{"cell_type":{"84ac0a19":"code","2cc86c4f":"code","998a8ebf":"code","3e5a81c7":"code","0e22f6dc":"code","a61450a9":"code","e4057c44":"code","f4b6539a":"code","c3812597":"code","6f3a54a3":"code","88013719":"code","b6e7c568":"code","dd90353d":"code","b9c1005a":"code","a45922e6":"code","79cefdd4":"code","ba28a2de":"code","75413a35":"code","0ed8b8e4":"code","210c8d3b":"code","2624cec8":"code","7f7e8a74":"code","e45a49fc":"code","dc0ad72d":"code","8fa8a7e2":"code","c4b0d523":"code","6ef66d44":"code","843cfe86":"code","1cb2537d":"code","46c61aac":"code","846f4c00":"code","140c9678":"code","1c540a12":"code","fae62e6d":"code","c4e7a2bb":"code","0d92d3c4":"code","524dc1ef":"code","1669cbd2":"code","083bba2f":"code","0f5e57f3":"code","53cd8135":"code","7bc2fe83":"code","2e919b41":"code","f26d44ff":"markdown","bf603523":"markdown","71ebedbd":"markdown","0c9ce703":"markdown","50171c1c":"markdown","7c712596":"markdown","4031e177":"markdown","78fe938b":"markdown","c043cd37":"markdown","7754b212":"markdown","bb38380e":"markdown","90ebed96":"markdown","60301a1e":"markdown","cb9b4fef":"markdown","3d0fa7ae":"markdown","b603e140":"markdown","f9228ab6":"markdown","86fb6155":"markdown","be43c030":"markdown","2bc8c6c5":"markdown","e5c65629":"markdown","f34a8b8c":"markdown"},"source":{"84ac0a19":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score\n\npd.set_option('max_columns', None)","2cc86c4f":"data = pd.read_csv('..\/input\/drug-consumptions-uci\/Drug_Consumption_Quantified.csv')\ndata = data.drop('ID', axis=1)\ndata.head()","998a8ebf":"# Check for missing values\ndata.isna().sum().sum()","3e5a81c7":"print(f'Original shape of data with {data.shape[0]} rows and {data.shape[1]} columns')","0e22f6dc":"# Overclaimers\ndata.query(\"Semer != 'CL0'\")","a61450a9":"# We will drop overclaimers since, there answers might not truly be accurate\ndata = data.drop(data[data['Semer'] != 'CL0'].index)\n\n# We will also drop unnecesary columns\ndata = data.drop(['Choc','Semer'], axis=1)\ndata = data.reset_index(drop=True)","e4057c44":"data.head()","f4b6539a":"drugs = ['Alcohol',\n         'Amyl',\n         'Amphet',\n         'Benzos',\n         'Caff',\n         'Cannabis',\n         'Coke',\n         'Crack',\n         'Ecstasy',\n         'Heroin',\n         'Ketamine',\n         'Legalh',\n         'LSD',\n         'Meth',\n         'Mushrooms',\n         'Nicotine',\n         'VSA'    ]","c3812597":"def drug_encoder(x):\n    if x == 'CL0':\n        return 0\n    elif x == 'CL1':\n        return 1\n    elif x == 'CL2':\n        return 2\n    elif x == 'CL3':\n        return 3\n    elif x == 'CL4':\n        return 4\n    elif x == 'CL4':\n        return 5\n    elif x == 'CL5':\n        return 6\n    else:\n        return 7","6f3a54a3":"for column in drugs:\n    data[column] = data[column].apply(drug_encoder)","88013719":"data.head()","b6e7c568":"corr = data.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr, annot=True, vmin=-1)","dd90353d":"low_corr = ['Age', 'Gender', 'Education', 'Alcohol','AScore','Caff']\nfor column in low_corr:\n    data = data.drop(column, axis=1)\ndata.head()","b9c1005a":"print(f'In the new dataframe there are {data.shape[0]} rows and {data.shape[1]} columns')","a45922e6":"# Combine cocaine and crack cocaine usage into one feature\ncocaine_df = data.copy()\ncocaine_df['coke_user'] = cocaine_df['Coke'].apply(lambda x: 0.5 if x not in [0,1] else 0)\ncocaine_df['crack_user'] = cocaine_df['Coke'].apply(lambda x: 0.5 if x not in [0,1] else 0)\ncocaine_df['both_user'] = cocaine_df[['coke_user', 'crack_user']].iloc[:].sum(axis=1)\ncocaine_df['Cocaine_User'] = cocaine_df['both_user'].apply(lambda x: 1 if x > 0 else 0)\ncocaine_df = cocaine_df.drop(['coke_user', 'crack_user', 'both_user' ], axis=1)","79cefdd4":"meth_df = data.copy()\nmeth_df['Meth_User'] = meth_df['Meth'].apply(lambda x: 1 if x not in [0,1] else 0)\nmeth_df = meth_df.drop(['Meth'], axis=1)","ba28a2de":"heroin_df = data.copy()\nheroin_df['Heroin_User'] = heroin_df['Heroin'].apply(lambda x: 1 if x not in [0,1] else 0)\nheroin_df = heroin_df.drop(['Heroin'], axis=1)","75413a35":"nic_df = data.copy()\nnic_df['Nicotine_User'] = nic_df['Nicotine'].apply(lambda x: 1 if x not in [0,1] else 0)\nnic_df = nic_df.drop(['Nicotine'], axis=1)","0ed8b8e4":"cocaine_df.head(1)","210c8d3b":"meth_df.head(1)","2624cec8":"heroin_df.head(1)","7f7e8a74":"nic_df.head(1)","e45a49fc":"def preprocessing_inputs(df, column):\n    df = df.copy()\n    \n    # Split df into X and y\n    y = df[column]\n    X = df.drop(column, axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), \n                           index=X_train.index, \n                           columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), \n                          index=X_test.index, \n                          columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test\n    ","dc0ad72d":"def plot_confusion_matrix(y,y_predict):\n    #Function to easily plot confusion matrix\n    cm = confusion_matrix(y, y_predict)\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax, fmt='g', cmap='Blues');\n    ax.set_xlabel('Predicted labels')\n    ax.set_ylabel('True labels')\n    ax.set_title('Confusion Matrix'); \n    ax.xaxis.set_ticklabels(['non-user', 'user']); ax.yaxis.set_ticklabels(['non-user', 'user'])","8fa8a7e2":"X_train, X_test, y_train, y_test = preprocessing_inputs(cocaine_df, 'Cocaine_User')","c4b0d523":"X_train.head()","6ef66d44":"print('Train set:', X_train.shape, y_train.shape)\nprint('Test set:', X_test.shape, y_test.shape)","843cfe86":"models = {\n            '     Logisitc Regression': LogisticRegression(),\n            '        Ridge Classifier': RidgeClassifier(),\n            ' Support Vector Machines': SVC(),\n            'Random Forest Classifier': RandomForestClassifier()}","1cb2537d":"for name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + ' trained.')","46c61aac":"print('                  ACCURACY')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    acc = accuracy_score(y_test, yhat)\n    \n    print(name + ' Accuracy: {:.2%}'.format(acc))\nprint('---------------------------------------------')\nprint('                  F1 SCORES')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    f1 = f1_score(y_test, yhat, pos_label=1)\n    print(name + ' F1-Score: {:.5}'.format(f1))","846f4c00":"#Confusion Matrix of Best Peforming Model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\nyhat = model.predict(X_test)\nplot_confusion_matrix(y_test, yhat)","140c9678":"X_train, X_test, y_train, y_test = preprocessing_inputs(meth_df, 'Meth_User')","1c540a12":"for name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + ' trained.')","fae62e6d":"print('                  ACCURACY')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    acc = accuracy_score(y_test, yhat)\n    print(name + ' Accuracy: {:.2%}'.format(acc))\nprint('---------------------------------------------')\nprint('                  F1 SCORES')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    f1 = f1_score(y_test, yhat, pos_label=1)\n    print(name + ' F1-Score: {:.5}'.format(f1))","c4e7a2bb":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)\nyhat = model.predict(X_test)\nplot_confusion_matrix(y_test, yhat)","0d92d3c4":"X_train, X_test, y_train, y_test = preprocessing_inputs(heroin_df, 'Heroin_User')","524dc1ef":"for name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + ' trained.')","1669cbd2":"print('                  ACCURACY')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    acc = accuracy_score(y_test, yhat)\n    print(name + ' Accuracy: {:.2%}'.format(acc))\nprint('---------------------------------------------')\nprint('                  F1 SCORES')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    f1 = f1_score(y_test, yhat, pos_label=1)\n    print(name + ' F1-Score: {:.5}'.format(f1))","083bba2f":"model = SVC()\nmodel.fit(X_train, y_train)\nyhat = model.predict(X_test)\nplot_confusion_matrix(y_test, yhat)","0f5e57f3":"X_train, X_test, y_train, y_test = preprocessing_inputs(nic_df, 'Nicotine_User')","53cd8135":"for name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + ' trained.')","7bc2fe83":"print('                  ACCURACY')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    acc = accuracy_score(y_test, yhat)\n    print(name + ' Accuracy: {:.2%}'.format(acc))\nprint('---------------------------------------------')\nprint('                  F1 SCORES')\nfor name, model in models.items():\n    yhat = model.predict(X_test)\n    f1 = f1_score(y_test, yhat, pos_label=1)\n    print(name + ' F1-Score: {:.5}'.format(f1))","2e919b41":"model = SVC()\nmodel.fit(X_train, y_train)\nyhat = model.predict(X_test)\nplot_confusion_matrix(y_test, yhat)","f26d44ff":"# Getting Started\n## Understanding the Dataset\nDatabase contains records for 1885 respondents. For each respondent 12 attributes are known: Personality measurements which include NEO-FFI-R (neuroticism, extraversion, openness to experience, agreeableness, and conscientiousness), BIS-11 (impulsivity), and ImpSS (sensation seeking), level of education, age, gender, country of residence and ethnicity. All input attributes are originally categorical and are quantified. After quantification values of all input features can be considered as real-valued. In addition, participants were questioned concerning their use of 18 legal and illegal drugs (alcohol, amphetamines, amyl nitrite, benzodiazepine, cannabis, chocolate, cocaine, caffeine, crack, ecstasy, heroin, ketamine, legal highs, LSD, methadone, mushrooms, nicotine and volatile substance abuse and one fictitious drug (Semeron) which was introduced to identify over-claimers. For each drug they have to select one of the answers: never used the drug, used it over a decade ago, or in the last decade, year, month, week, or day.\n\n| Feature     | Description                                                           |\n| ----------- | -----------------------------------                                   |\n| ID          | Identification                                                        |\n| Age         | Age range of participant                                              |\n| Gender      | Male or Female                                                        |\n| Education   | Level of education                                                    |\n| Country     | Country of orgin                                                      |\n| Ethnicity   | Ethnicity\/Race of participant                                         |\n| Nscore      | Quantified NEO Five-Factor Inventory Neuroticism score                |\n| Escore      | Quantified NEO Five-Factor Inventory Extraversion score               |\n| Oscore      | Quantified NEO Five-Factor Inventory Openness to experience score     |\n| Ascore      | Quantified NEO Five-Factor Inventory Agreeableness score              |\n| Cscore      | Quantified NEO Five-Factor Inventory Conscientiousness score          |\n| Impulsive   | Quantified BIS-11 impulsiveness score                                 |\n| SS          | Quantified Impulsive Sensation Seeking score                          |\n| Drug        | Various drugs were examined and measured in terms of frequency of use |","bf603523":"# Heroin","71ebedbd":"# Drug Consumption Prediction: Cocaine, Heroin, and Methamphetamines, Nicotine \n## Overview\n* Encode drug frequency feature as an ordinal feature\n* Perform feature engineering to create target labels for drugs of interest","0c9ce703":"# Cocaine","50171c1c":"## Model Training","7c712596":"# Feature Engineering\nWe will create three seperate datasets to asses predict whether an indivudal uses cocaine, methamphetamines, or heroin.","4031e177":"## Model Results","78fe938b":"# Feature Encoding","c043cd37":"## Model Training","7754b212":"## Packages and Libaries","bb38380e":"## Model Results","90ebed96":"## Model Training","60301a1e":"In the description of data, we are told that Semer is a fake drug that is used as a control. Since it is not a real drug those who claimed to have used Semer are assumed to be over claimers. We can not be sure these individuals have accurately recounted their drug use, therefore, we will remove these individuals from the data frame.","cb9b4fef":"# Methamphetamine","3d0fa7ae":"## Model Results","b603e140":"## Load Data","f9228ab6":"# Conclusions\n* Overall we see that our Logistic Regression, Random Forest Classifiers, and SVM's performed the best. The models performed best when classifying Cocaine and Nicotine. Although, this is probably due to the much larger sample size from these drugs compared to Heroin.\n* For further analysis you can check out my full EDA notebook [here](https:\/\/www.kaggle.com\/obeykhadija\/drug-consumptions-eda)","86fb6155":"## Model Training","be43c030":"# Data Cleaning","2bc8c6c5":"# Data Preprocessing","e5c65629":"# Nicotine","f34a8b8c":"## Model Results"}}