{"cell_type":{"bd7b5aad":"code","c9b70df5":"code","c2ac9bbf":"code","a110b36c":"code","9c52623d":"code","1703e4e0":"code","46bbf36d":"code","fcd89610":"code","b4806a39":"code","d18a44da":"code","b63ac30a":"code","61e45318":"code","1c21b557":"code","0ec6a240":"code","dd9ead74":"code","da6a34d7":"code","ecfb7e9a":"code","809ddc35":"code","a29d1cda":"code","14412f9f":"code","5c34b73a":"code","d1cad516":"code","ddfb2357":"code","e3048dd5":"code","c56235cf":"code","a4224023":"code","d42e1a6f":"code","1a76190c":"code","95abea8a":"code","83346940":"code","f51ea2f3":"code","9223121d":"code","6d5a64f0":"code","79905518":"code","aa05ce24":"code","1d6c0faf":"code","97fbc691":"code","c3440391":"code","08806029":"code","b83c0e15":"code","20801866":"code","ad1cd05b":"code","59979214":"code","ecd5a92f":"code","4b40a906":"code","16e521af":"code","bc2d54df":"code","1708b08c":"code","97e8a162":"code","a813d5ae":"code","4a3d07a7":"markdown","42c4f1b9":"markdown","16409aae":"markdown","07395062":"markdown","0c099832":"markdown","fc340348":"markdown","7223d943":"markdown","8fd24553":"markdown"},"source":{"bd7b5aad":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","c9b70df5":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c2ac9bbf":"print(df_train.shape)\nprint(df_test.shape)","a110b36c":"df_train.describe()","9c52623d":"df_train.info()","1703e4e0":"plt.figure(figsize = (20,8))\nsns.heatmap(df_train.isnull(),cbar=False)","46bbf36d":"plt.figure(figsize = (20,8))\nsns.heatmap(df_train.isnull(),cbar=False)","fcd89610":"pd.options.display.min_rows = 80\n\ndf_train.isnull().sum().sort_values(ascending = False)","b4806a39":"df_train.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage'],axis = 1, inplace = True)\ndf_test.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage'],axis = 1, inplace = True)","d18a44da":"df_train['GarageYrBlt'].fillna(df_train['GarageYrBlt'].dropna().mode()[0],inplace = True)\ndf_train['GarageCond'].fillna(df_train['GarageCond'].dropna().mode()[0],inplace = True)\ndf_train['GarageType'].fillna(df_train['GarageType'].dropna().mode()[0],inplace = True)\ndf_train['GarageFinish'].fillna(df_train['GarageFinish'].dropna().mode()[0],inplace = True)\ndf_train['GarageQual'].fillna(df_train['GarageQual'].dropna().mode()[0],inplace = True)\ndf_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].dropna().mode()[0],inplace = True)\ndf_train['BsmtExposure'].fillna(df_train['BsmtExposure'].dropna().mode()[0],inplace = True)\ndf_train['BsmtQual'].fillna(df_train['BsmtQual'].dropna().mode()[0],inplace = True)\ndf_train['BsmtCond'].fillna(df_train['BsmtCond'].dropna().mode()[0],inplace = True)\ndf_train['BsmtFinType1'].fillna(df_train['BsmtFinType1'].dropna().mode()[0],inplace = True)\ndf_train['MasVnrArea'].fillna(df_train['MasVnrArea'].dropna().mode()[0],inplace = True)\ndf_train['MasVnrType'].fillna(df_train['MasVnrType'].dropna().mode()[0],inplace = True)\ndf_train['Electrical'].fillna(df_train['Electrical'].dropna().mode()[0],inplace = True)\n","b63ac30a":"pd.options.display.min_rows = 82\ndf_train.isnull().sum().sort_values(ascending = False)","61e45318":"df_test['GarageYrBlt'].fillna(df_test['GarageYrBlt'].dropna().mode()[0],inplace = True)\ndf_test['GarageFinish'].fillna(df_test['GarageFinish'].dropna().mode()[0],inplace = True)\ndf_test['GarageQual'].fillna(df_test['GarageQual'].dropna().mode()[0],inplace = True)\ndf_test['GarageCond'].fillna(df_test['GarageCond'].dropna().mode()[0],inplace = True)\ndf_test['GarageType'].fillna(df_test['GarageType'].dropna().mode()[0],inplace = True)\ndf_test['BsmtCond'].fillna(df_test['BsmtCond'].dropna().mode()[0],inplace = True)\ndf_test['BsmtExposure'].fillna(df_test['BsmtExposure'].dropna().mode()[0],inplace = True)\ndf_test['BsmtQual'].fillna(df_test['BsmtQual'].dropna().mode()[0],inplace = True)\ndf_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].dropna().mode()[0],inplace = True)\ndf_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].dropna().mode()[0],inplace = True)\ndf_test['MasVnrType'].fillna(df_test['MasVnrType'].dropna().mode()[0],inplace = True)\ndf_test['MasVnrArea'].fillna(df_test['MasVnrArea'].dropna().mode()[0],inplace = True)\ndf_test['MSZoning'].fillna(df_test['MSZoning'].dropna().mode()[0],inplace = True)\ndf_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].dropna().mode()[0],inplace = True)\ndf_test['Utilities'].fillna(df_test['Utilities'].dropna().mode()[0],inplace = True)\ndf_test['Functional'].fillna(df_test['Functional'].dropna().mode()[0],inplace = True)\ndf_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].dropna().mode()[0],inplace = True)\n","1c21b557":"df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].dropna().mean(),inplace = True)\ndf_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].dropna().mean(),inplace = True)\ndf_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].dropna().mean(),inplace = True)\ndf_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].dropna().mean(),inplace = True)\ndf_test['KitchenQual'].fillna(df_test['KitchenQual'].dropna().mode()[0],inplace = True)\ndf_test['Exterior2nd'].fillna(df_test['Exterior2nd'].dropna().mode()[0],inplace = True)\ndf_test['Exterior1st'].fillna(df_test['Exterior1st'].dropna().mode()[0],inplace = True)\ndf_test['GarageArea'].fillna(df_test['GarageArea'].dropna().mean(),inplace = True)\ndf_test['SaleType'].fillna(df_test['SaleType'].dropna().mode()[0],inplace = True)\ndf_test['GarageCars'].fillna(df_test['GarageCars'].dropna().mean(),inplace = True)\n","0ec6a240":"df_test.isnull().sum().sort_values(ascending = False)","dd9ead74":"df_test.info()","da6a34d7":"df_test.info()","ecfb7e9a":"print(df_train.shape)\nprint(df_test.shape)","809ddc35":"df_train.corr()","a29d1cda":"plt.figure(figsize = (30,18))\nsns.heatmap(df_train.corr(),center=0,annot = True)","14412f9f":"df = pd.concat([df_train,df_test],axis = 0)\ndf","5c34b73a":"def category(object_columns):\n    df_final = df\n    i = 0\n    for fields in object_columns:\n        \n        print(fields)\n        df1 = pd.get_dummies(df[fields],drop_first =True)\n        \n        df.drop([fields],axis = 1,inplace = True)\n        if i==0:\n            df_final =df1.copy()\n        else:\n            df_final = pd.concat([df_final,df1],axis = 1)\n        i += 1\n    df_final = pd.concat([df,df_final],axis =1)\n    return df_final","d1cad516":"categorical_feature = [feature for feature in df_train.columns if df_train[feature].dtype =='O']\nlen(categorical_feature)","ddfb2357":"df = category(categorical_feature)","e3048dd5":"df.shape","c56235cf":"train_df = df.iloc[:1460,:]\ntest_df = df.iloc[1460:,:]","a4224023":"print(train_df.shape)\nprint(test_df.shape)","d42e1a6f":"sns.histplot(x='SalePrice',data = train_df,bins = 20)","1a76190c":"plt.hist(x='SalePrice',data = train_df,bins=20,rwidth=1.5,ec='black')","95abea8a":"max_sellingprice = train_df['SalePrice'].max()\nprint('The Largest Sale Price :',max_sellingprice,'usd')","83346940":"max_YrSold = train_df['YrSold'].max()\nprint('Largest sale year  :',max_YrSold,'usd')","f51ea2f3":"columns = ['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF','FullBath','YearBuilt']\nsns.pairplot(train_df[columns])","9223121d":"train_df","6d5a64f0":"test_df","79905518":"test_df.drop(['SalePrice'],axis = 1 , inplace = True)","aa05ce24":"X_train = train_df.drop(['SalePrice'],axis = 1)\nY_train = train_df['SalePrice']","1d6c0faf":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\ntest_df = sc.transform(test_df)","97fbc691":"X_train","c3440391":"test_df","08806029":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X_train,Y_train)","b83c0e15":"reg.coef_","20801866":"reg.intercept_","ad1cd05b":"reg.score(X_train,Y_train)","59979214":"result = reg.predict(X_train)","ecd5a92f":"compare_df = pd.DataFrame()\ncompare_df['Actual Values'] = Y_train\ncompare_df['Predicted Values'] = result\ncompare_df","4b40a906":"plt.figure(figsize = (15,8))\nplt.plot(Y_train,'o', color = 'blue',label = 'Actual Values')\nplt.plot(result,'*', color = 'red',label = 'Predicted values')","16e521af":"Y_pred = reg.predict(test_df)\nY_pred","bc2d54df":"\ndf_submission = pd.DataFrame(list(zip(df_test[\"Id\"], list(Y_pred))),columns =['Id', 'SalePrice'])","1708b08c":"df_submission.shape","97e8a162":"df_submission","a813d5ae":"df_submission.to_csv('Submission.csv',index =False)","4a3d07a7":"**final Prediction**","42c4f1b9":"**Applying Linear Regression**","16409aae":"filling null values ","07395062":"**Concatenating train and test data and doing one hot encoding for categorical data**","0c099832":"Creating submission file","fc340348":"Dropping columns which having higher null values ","7223d943":"**Feature Engineering**","8fd24553":"**Scaling The Data**"}}