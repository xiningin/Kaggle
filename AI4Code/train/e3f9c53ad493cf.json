{"cell_type":{"b5103d4a":"code","9738dc16":"code","29e97f30":"code","e3a4e613":"code","69788ed7":"code","373c2270":"code","93c97083":"code","d5f6ec6b":"code","729f2fa5":"code","6e41754b":"code","5ad7492b":"code","fad0c042":"code","d9d1593f":"code","6fc8cf8a":"code","882b5460":"code","0cdaa35d":"code","1133db44":"code","0d6ee716":"code","35dc602b":"code","36d255d9":"code","2ccf3edd":"code","26767c9a":"code","3b07dbd5":"code","074f88b8":"code","8260a36e":"code","d241517d":"code","11fedf4d":"markdown","013d68bc":"markdown","edf6b1c0":"markdown"},"source":{"b5103d4a":"import pandas as pd\ndf=pd.read_csv(\"..\/input\/fake-news\/train.csv\")\ndf.head()","9738dc16":"df.shape","29e97f30":"df.info()","e3a4e613":"round((df.isnull().sum().sort_values(ascending=False) * 100 \/len(df)),2)","69788ed7":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer","373c2270":"df=df.dropna()\ndf.shape","93c97083":"df.head()","d5f6ec6b":"df.reset_index(inplace=True)\ndf.head()","729f2fa5":"import re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['title'][i])\n    review = review.lower()\n    review = review.split()    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)\ncorpus[:5]","6e41754b":"# ## Get the Independent Features\n## TFidf Vectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_v=TfidfVectorizer(max_features=4096,ngram_range=(1,3))\nX=tfidf_v.fit_transform(corpus).toarray()\nX.shape","5ad7492b":"## Get the Dependent features\ny=df['label']\ny.head()","fad0c042":"## Divide the dataset into Train and Test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","d9d1593f":"tfidf_v.get_feature_names()[:5]","6fc8cf8a":"tfidf_v.get_params()","882b5460":"count_df = pd.DataFrame(X_train, columns=tfidf_v.get_feature_names())\ncount_df.head()","0cdaa35d":"from sklearn.naive_bayes import MultinomialNB\nclassifier=MultinomialNB()\nclassifier.fit(X_train, y_train)","1133db44":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,classifier.predict(X_test),target_names=['FAKE', 'REAL']))","0d6ee716":"from sklearn import metrics\nscore = metrics.accuracy_score(y_test, classifier.predict(X_test))\nscore","35dc602b":"from sklearn.linear_model import PassiveAggressiveClassifier\nlinear_clf = PassiveAggressiveClassifier(max_iter=64)","36d255d9":"linear_clf.fit(X_train, y_train)\nprint(classification_report(y_test,linear_clf.predict(X_test),target_names=['FAKE', 'REAL']))","2ccf3edd":"score = metrics.accuracy_score(y_test, linear_clf.predict(X_test))\nscore","26767c9a":"classifier=MultinomialNB(alpha=0.1)\nimport numpy as np\nprevious_score=0\nfor alpha in np.arange(0,1,0.05):\n    sub_classifier=MultinomialNB(alpha=alpha)\n    sub_classifier.fit(X_train,y_train)\n    y_pred=sub_classifier.predict(X_test)\n    score = metrics.accuracy_score(y_test, y_pred)\n    if score>previous_score:\n        classifier=sub_classifier\n    print(\"Alpha: {}, Score : {}\".format(alpha,score))","3b07dbd5":"## Get Features names\nfeature_names = tfidf_v.get_feature_names()\nfeature_names[:5]","074f88b8":"classifier.coef_[0]","8260a36e":"### Most real\nsorted(zip(classifier.coef_[0], feature_names), reverse=True)[:5]","d241517d":"### Most fake\nsorted(zip(classifier.coef_[0], feature_names))[:5]","11fedf4d":"# Passive Aggressive Classifier Algorithm","013d68bc":"# MultinomialNB Algorithm","edf6b1c0":"# Multinomial Classifier with Hyperparameter"}}