{"cell_type":{"bdf1edf0":"code","389012e5":"code","41afd199":"code","0b5e1179":"code","107043d8":"code","c1a6f30c":"code","ab742715":"code","acfcff2d":"code","b4db1a21":"code","6f78cfbc":"code","3cfd2c4c":"code","54efef5a":"code","f5299207":"code","a0ae0e1a":"code","5988df6c":"code","40aeacac":"code","a4ce948a":"code","63649453":"code","ec736306":"code","173715a9":"code","d4f91280":"code","60c83309":"code","c12a2657":"code","4a99ea3b":"code","db1ee5cb":"code","93539318":"code","b9538e87":"code","89811fa9":"code","98caf7a4":"code","d4a691da":"code","f32af17a":"code","4fd29598":"code","d501ee83":"code","e8ab87e9":"code","560c9b6e":"code","dd0367ab":"code","c575d146":"code","08a4af4d":"code","2158cd53":"code","b6e198c4":"code","36c99fa0":"code","5f1c5a3e":"code","9a41e68c":"code","bc22c08c":"code","531ac040":"code","e4f14c42":"code","f99f3fc1":"code","4cb92bf4":"code","14ea23af":"code","38b2951e":"code","963ffca6":"code","84efe430":"code","1b808ee5":"code","59903ce8":"code","798dabb1":"code","b13ad80f":"markdown","8be91c98":"markdown","a3564097":"markdown","648e5d9d":"markdown","a45cc3e2":"markdown","d5da66b4":"markdown","5907b9c0":"markdown","7b6fdd7f":"markdown","1bf858bf":"markdown","7886e70b":"markdown","74658d98":"markdown","a6fe5a4b":"markdown","1805cbfe":"markdown","f197173a":"markdown"},"source":{"bdf1edf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","389012e5":"# Read Data\n\nmedian_household_income = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","41afd199":"percentage_people_below_poverty_level.info()","0b5e1179":"percentage_people_below_poverty_level.head() # First 5 data","107043d8":"percentage_people_below_poverty_level.describe()","c1a6f30c":"percentage_people_below_poverty_level.poverty_rate.value_counts()","ab742715":"percentage_people_below_poverty_level['Geographic Area'].unique() # 50 states in the US","acfcff2d":"# Poverty rate of each state\n\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\n# We do not know anything about missing data so we replace 0 instead of \"-\" not to get any error plotting \n\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\n# In poverty rate column, all the values were assigned as object so we should change them into float\n\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\n# changing into \"list\"\n\narea_poverty_ratio = [] # Creating empty list\n\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i] # assigning all states to i one by one using for-loop \n    area_poverty_rate = sum(x.poverty_rate)\/len(x) # Getting an average\n    area_poverty_ratio.append(area_poverty_rate) # And add them into empty list that we constructed above\n    \ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio}) # Creating DataFrame to data\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values \nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')\nplt.show()","b4db1a21":"kill.head() # First 5 data in kill dataset","6f78cfbc":"# Most common 15 Name or Surname of killed people\nseparate = kill.name[kill.name != 'TK TK'].str.split() \na,b = zip(*separate)                    \nname_list = a+b                         \nname_count = Counter(name_list)         \nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')\nplt.show()","3cfd2c4c":"percent_over_25_completed_highSchool.head()","54efef5a":"percent_over_25_completed_highSchool.info()","f5299207":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","a0ae0e1a":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\nplt.show()","5988df6c":"share_race_city.head()","40aeacac":"share_race_city.info()","a4ce948a":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nshare_race_city.replace(['-'],0.0,inplace = True)\nshare_race_city.replace(['(X)'],0.0,inplace = True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")","63649453":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","ec736306":"data.head()","173715a9":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()","d4f91280":"data.head(10)","60c83309":"# parameters of joint plot can be changed\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")","c12a2657":"kill.race.head(20)","4a99ea3b":"kill.race.value_counts()","db1ee5cb":"# Race rates according in kill data \nkill.race.dropna(inplace = True)\nlabels = kill.race.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","93539318":"data.head(10)","b9538e87":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_poverty_ratio\", y=\"area_highschool_ratio\", data=data)\nplt.show()","89811fa9":"data.head()","98caf7a4":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# cubehelix plot\nsns.kdeplot(data.area_poverty_ratio, data.area_highschool_ratio, shade=True, cut=3)\nplt.show()","d4a691da":"data.head()","f32af17a":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","4fd29598":"data.corr()","d501ee83":"#correlation map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","e8ab87e9":"kill.head(10)","560c9b6e":"kill.columns","dd0367ab":"kill.manner_of_death.unique()","c575d146":"# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\")\nplt.show()","08a4af4d":"kill.head(10)","2158cd53":"# swarm plot\n# manner of death(olum sekli) : ates edilerek, ates edilerek ve sok tabancasiyla\n# gender cinsiyet\n# age: yas\nsns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill)\nplt.show()","b6e198c4":"data.head(10)","36c99fa0":"# pair plot\nsns.pairplot(data)\nplt.show()","5f1c5a3e":"kill.columns","9a41e68c":"kill.gender.value_counts()","bc22c08c":"kill.head(10)","531ac040":"# kill properties\n# Manner of death\nsns.countplot(kill.gender)\n#sns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color = 'blue',fontsize=15)\nplt.show()","e4f14c42":"# kill weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)\nplt.show()","f99f3fc1":"# age of killed people\nabove25 =['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)\nplt.show()","4cb92bf4":"# Race of killed people\nsns.countplot(data=kill, x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)\nplt.show()","14ea23af":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)\nplt.show()","38b2951e":"# most dangerous states\nstate = kill.state.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=state[:20].index,y=state[:20].values)\nplt.title('Most dangerous state',color = 'blue',fontsize=15)\nplt.show()","963ffca6":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)\nplt.show()","84efe430":"# Threat types\nsns.countplot(kill.threat_level)\nplt.xlabel('Threat Types')\nplt.title('Threat types',color = 'blue', fontsize = 15)\nplt.show()","1b808ee5":"# Flee types\nsns.countplot(kill.flee)\nplt.xlabel('Flee Types')\nplt.title('Flee types',color = 'blue', fontsize = 15)\nplt.show()","59903ce8":"# Having body cameras or not for police\nsns.countplot(kill.body_camera)\nplt.xlabel('Having Body Cameras')\nplt.title('Having body cameras or not on Police',color = 'blue',fontsize = 15)\nplt.show()","798dabb1":"# Kill numbers from states in kill data\nsta = kill.state.value_counts().index[:10]\nsns.barplot(x=sta,y = kill.state.value_counts().values[:10])\nplt.title('Kill Numbers from States',color = 'blue',fontsize=15)\nplt.show()","b13ad80f":"<a id=\"11\"><\/a> \n## Pair Plot","8be91c98":"<a id=\"7\"><\/a> \n## Violin Plot","a3564097":"# INTRODUCTION\n\nThere are many death cases by police officers accidentally or other in the US. So, in this dataset, I examine by using visualization methods\n\n1. Read datas\n1. Poverty rate of each state\n1. Most common 15 Name or Surname of killed people\n1. High school graduation rate of the population that is older than 25 in states\n1. Percentage of state's population according to races that are black,white,native american, asian and hispanic\n1. High school graduation rate vs Poverty rate of each state\n1. Kill properties\n    * Manner of death\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n    * Having body cameras or not for police\n1. Race rates according to states in kill data \n1. Kill numbers from states in kill data\n<br>\n<br>\nPlot Contents:\n* [Bar Plot](#1)\n* [Point Plot](#2)\n* [Joint Plot](#3)\n* [Pie Chart](#4)\n* [Lm Plot](#5)\n* [Kde Plot](#6)\n* [Violin Plot](#7)\n* [Heatmap](#8)\n* [Box Plot](#9)\n* [Swarm Plot](#10)\n* [Pair Plot](#11)\n* [Count Plot](#12)","648e5d9d":"### 201 values are not known or missing, shown in the second row above","a45cc3e2":"<a id=\"10\"><\/a> \n## Swarm Plot","d5da66b4":"<a id=\"4\"><\/a> \n## Pie Chart","5907b9c0":"<a id=\"3\"><\/a> \n## Joint Plot","7b6fdd7f":"<a id=\"2\"><\/a>\n## Point Plot","1bf858bf":"<a id=\"9\"><\/a> \n## Box Plot","7886e70b":"<a id=\"5\"><\/a> \n## Lm Plot","74658d98":"<a id=\"6\"><\/a> \n## Kde Plot","a6fe5a4b":"<a id=\"12\"><\/a> \n## Count Plot","1805cbfe":"<a id=\"1\"><\/a> \n## Bar Plot","f197173a":"<a id=\"8\"><\/a> \n## Heatmap"}}