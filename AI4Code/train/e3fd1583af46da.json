{"cell_type":{"3b634edb":"code","d7f7d27c":"code","dc7bf7ba":"code","9d173fde":"code","81d7e52e":"code","fff1bd9a":"code","aff15f19":"code","66553007":"code","3846a834":"code","84112055":"code","f8d8dae7":"code","ff5bf1fd":"code","afc24749":"code","f88397e1":"code","4d81b00c":"code","7a1c7b11":"code","f7672233":"code","94da94ae":"code","4fd72767":"code","1e013ebb":"code","0134b32f":"code","f47ae3d9":"code","740952a0":"code","89e0bc23":"code","d2760672":"code","23f100fa":"code","403aacc3":"markdown","17b707e9":"markdown","713784b4":"markdown","64a92a7c":"markdown","85b3ced4":"markdown","f6988bd3":"markdown","c6f51cbb":"markdown","93676fe4":"markdown","6784eec3":"markdown","a6f44a1e":"markdown","0fba50c2":"markdown","04a832d1":"markdown","80d73be7":"markdown","b8e38788":"markdown","bb27a569":"markdown","ced709e5":"markdown","1b852042":"markdown","083bbe2c":"markdown","163ee916":"markdown","585c0d0f":"markdown","aee2c652":"markdown","9dfca4df":"markdown","f439eada":"markdown","4b7c50d6":"markdown"},"source":{"3b634edb":"import numpy as np\nimport pandas as pd","d7f7d27c":"columns_name=['user_id','item_id','rating','timestamp']\ndf=pd.read_csv(\"..\/input\/movielens-100k-dataset\/ml-100k\/u.data\",sep=\"\\t\",names=columns_name)        \n#u.data is a tsv file (tab separated values)\nprint(df.head())\ndf.shape","dc7bf7ba":"movies=pd.read_csv(\"..\/input\/movielens-100k-dataset\/ml-100k\/u.item\",sep=\"\\|\",header= None)\n","9d173fde":"print(movies.shape)\nmovies.head()","81d7e52e":"#There are 24 columns bit we just need to extract two columns from this dataset to get the movie names corresponding to each item_id\nmovies=movies[[0,1]]\nmovies.head()","fff1bd9a":"#Give column names to the columns of this data frame also.\nmovies.columns=['item_id','title'] \nmovies.head(1)","aff15f19":"df=pd.merge(df,movies,on=\"item_id\")","66553007":"df.groupby(\"title\").mean()['rating'].sort_values(ascending=False)","3846a834":"df.groupby(\"title\").count()[\"rating\"].sort_values(ascending=False)","84112055":"ratings=pd.DataFrame(df.groupby(\"title\").mean()['rating'])\nratings['number of ratings']=pd.DataFrame(df.groupby(\"title\").count()[\"rating\"])\nprint(ratings.head())","f8d8dae7":"ratings.sort_values(by='rating', ascending=False)","ff5bf1fd":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"dark\")","afc24749":"plt.figure(figsize=(12,8))\nplt.hist(ratings['number of ratings'], bins=70,)\nplt.show\n","f88397e1":"plt.hist(ratings['rating'],bins=70)\nplt.show","4d81b00c":"sns.jointplot(x='rating',y='number of ratings',data=ratings,alpha=0.5)","7a1c7b11":"moviematrix=df.pivot_table(index=\"user_id\",columns=\"title\",values='rating')\nprint(moviematrix)","f7672233":"starwars_user_ratings=moviematrix['Star Wars (1977)']\nstarwars_user_ratings.head()","94da94ae":"#finding correlation of starwars movie withh all other movies\nsimilar_to_starwars=moviematrix.corrwith(starwars_user_ratings)    ","4fd72767":"similar_to_starwars\n","1e013ebb":"corr_starwars=pd.DataFrame(similar_to_starwars,columns=['correlation'])\ncorr_starwars.head()","0134b32f":"corr_starwars.dropna(inplace=True)","f47ae3d9":"corr_starwars.sort_values('correlation',ascending=False).head(10)","740952a0":"corr_starwars=corr_starwars.join(ratings['number of ratings'])","89e0bc23":"corr_starwars.head()","d2760672":"corr_starwars[corr_starwars['number of ratings']>100].sort_values('correlation',ascending=False)","23f100fa":"def predict_movies(movie_name):\n    movie_user_ratings=moviematrix[movie_name]\n    similar_to_movie=moviematrix.corrwith(movie_user_ratings)\n    corr_movie=pd.DataFrame(similar_to_movie,columns=['correlation'])\n    corr_movie.dropna(inplace=True)\n    corr_movie=corr_movie.join(ratings['number of ratings'])\n    predictions=corr_movie[corr_movie['number of ratings']>100].sort_values('correlation',ascending=False)\n    return predictions\npredictions=predict_movies(\"As Good As It Gets (1997)\")  #any movie name from the data set can be put here\npredictions.head()","403aacc3":"Looks neat! Along the x-axis, we have the number of times movies have been rated. Along the y-axis, we have how many movies have been rated those number of times. For example, the number of movies that have been rated by 0\u201310 people are more than 500\nNow let\u2019s plot another histogram. This time it id going to be a histogram of average ratings.","17b707e9":"### As already mentioned, one user has rated one or more than one movie. This means that one movie has been rated by more than one user. We\u2019ll have to find the average rating of each movie to get some meaningful data.","713784b4":"## Data Preparation\nRecommendation systems require a very large dataset. For this model, we\u2019ll be using a dataset of 100k movies. Load the dataset. The columns of this data frame do not have names. So, we\u2019ll give a name to every column.\n","64a92a7c":"This was a content-based recommendation system that we made using very basic python libraries. The ones used in real life are way more complicated. This was just to give you some idea about recommendation systems.","85b3ced4":"### merging both dataframes","f6988bd3":"People are given user ids and movies are given item ids. Every person has rated one or more than one movie.\nThis data frame, however, does not tell which item id corresponds to which movie name. To get the names of movies, we\u2019ll load another dataset (both these datasets are available in the file downloaded earlier).","c6f51cbb":"## Exploratory Data Analysis\nNow we have the final data frame that we\u2019ll be using to make our prediction model. But before that, it\u2019s time for some data visualization. Enter matplotlib and seaborn!\n","93676fe4":"Now, this data looks pretty good as only movies that have been rated by more than 100 people will be recommended.\n# MAKING THE RECOMMENDATION FUNCTION\nLet\u2019s make a general recommendation function now which will give us 5 movie recommendations based on the movie we enter.","6784eec3":"### Movies with a rating of exactly 5 or 1 are likely to have been reviewed by only 1 or 2 people because when more number of people rate a movie, the average cannot be a perfect 5 or 1. Any movie which has been rated by only a few people cannot be recommended to a user. Let\u2019s slowly get rid of these movies which have been recommended by very few users. Start with finding out the number of ratings a particular movie has received.","a6f44a1e":"Now we will find out that what ratings have been given to other movies by the users who have rated Star Wars","0fba50c2":"Let\u2019s plot a histogram of number of ratings to check the distribution.","04a832d1":"From this matrix let\u2019s extract Star War\u2019s information","80d73be7":"## If 6 people have rated the movie Hollow Reed as 5 and the same people out of 583 people have rated Star Wars as 5, then both of these movies have a correlation of 1. But this data is not meaningful as very few people have rated Hollow Reed. To overcome this, we will put a threshold at 100 people so that only the movies that have been watched by more than 100 people are recommended. Here, the movie with the title \u2019Til There was You (1997) cannot be recommended as it has been rated by only 9 people.","b8e38788":"## Recommendation system with reference to a particular movie","bb27a569":"Along the x-axis, we have the average movie ratings and along the y-axis, we have the number of movies. This is kind of a normal distribution.\n![19.PNG](attachment:19.PNG)\n\nAnd now a final plot!","ced709e5":"The basic idea behind this is that if a person likes Star Wars, he\/she can be recommended the movie with the highest correlation.\nWe had NaN values in our data frame. We\u2019ll remove those using dropna( ) function.","1b852042":"# Libraries used\n* Pandas\n* Matplotlib\n* Seaborn","083bbe2c":"# **Content-Based Recommendation System Implementation**\nA content-based recommendation system revolves around a user\u2019s profiles. It is based on the user\u2019s ratings including the number of times a user has clicked on different items or even liked those items. The recommendations are based on the similarity between those items.\n![final.PNG](attachment:final.PNG)","163ee916":"Let\u2019s take a little look at our data.","585c0d0f":"There are NaN values corresponding to the movies which have not been rated along with star wars or vice versa since correlation does not exist.\nNext, we\u2019ll make a separate data frame for movies and their correlation with the movie Star Wars.","aee2c652":"# Implementing a content-based movie recommendation system\n We\u2019ll be making a movie recommendation system which is based on ratings given to a movie by different users.\nStart by importing the necessary libraries:","9dfca4df":"We\u2019ll implement our recommendation model for a single movie at first. Let\u2019s pick Star Wars (1977).\nFirst, make a matrix to shows which user has given what rating to which movie. There are a lot of NaN values because all the users have not watched all the movies.","f439eada":"Now that we have both the attributes (average rating and number of ratings) for every movie, let\u2019s create a separate data frame for them.","4b7c50d6":"The above plot shows that as the rating increases, the number of ratings of that movie also increases. In addition to it, the figure clearly depicts the movies which have been rated by very few people by isolated dots (ends of the x-axis)."}}