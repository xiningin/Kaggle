{"cell_type":{"b3554f4a":"code","921b5458":"code","2700dedd":"code","b217d4b4":"code","436a38b3":"code","47fa12d4":"code","839eef2e":"code","e1810ea8":"code","c8be6956":"code","d3220b50":"code","0b8fabb7":"code","8097c1b7":"code","fe535363":"code","e0f88e16":"code","e44dce71":"code","c18e2b22":"code","cecc0496":"code","b169fb03":"code","4989469d":"code","05957fa6":"code","cb76af4e":"code","8c6940d1":"code","2744b818":"code","e82fda59":"code","d959a673":"code","a99b9835":"code","d6da11c0":"code","4471b61e":"code","d3ac07a6":"code","a7903f17":"code","7e740fdc":"code","06105eff":"code","b205ba5f":"code","2bbe5a25":"code","df6fa068":"code","2225519b":"code","c423f3ef":"code","ece039de":"code","9bcb0f91":"code","021d6c0f":"code","f35ec0c4":"code","17071056":"code","dbb0a745":"code","516808b0":"code","3723a138":"code","3ab4a666":"code","4e1121d7":"code","2213795b":"code","f981e555":"code","c3a54cbb":"code","c8ef6728":"code","5a23f518":"code","69e5f44d":"code","66eeb175":"code","ea085a40":"code","1eac3b39":"code","6d805a8c":"code","988108cb":"code","0f3ee07c":"code","d7af31de":"code","7dda91aa":"code","d90c8643":"code","ba9447cc":"code","ebedc75e":"code","22f4d7e8":"code","0cdfd256":"code","5e33f7dd":"code","98f94e4b":"code","36ceff60":"code","592780e9":"code","eb3023f9":"code","1476b9d3":"code","81cd48ab":"code","5544b1ab":"code","8d2d8804":"code","1a928c7f":"code","9cc9bc65":"code","f636f784":"code","8c1ff523":"code","daed1e68":"code","ad9712c4":"code","55ef82bc":"code","dedb2472":"code","e1f2bf59":"code","f944259d":"code","6adb4509":"code","35905a48":"code","702bb653":"code","0769cf74":"code","b67e46ef":"code","91a40902":"code","eef1a529":"code","944e36fe":"markdown","95d50134":"markdown","1c4ea8b0":"markdown","5b09fc34":"markdown","c971ce86":"markdown","ca59593d":"markdown"},"source":{"b3554f4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","921b5458":"df_train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')","2700dedd":"df_train.head()","b217d4b4":"df_train.describe()","436a38b3":"df_train.info()","47fa12d4":"df_train.describe()","839eef2e":"df_train.info()","e1810ea8":"dups = df_train.duplicated()","c8be6956":"print('Number of duplicate rows = %d' % (dups.sum()))","d3220b50":"import seaborn as sns","0b8fabb7":"len(df_train.columns)","8097c1b7":"for column in df_train.columns:\n    sns.boxplot(x=df_train[column])","fe535363":"from matplotlib import pyplot as plt","e0f88e16":"df_train.corr()","e44dce71":"def remove_outlier(col):\n    sorted(col)\n    Q1,Q3=np.percentile(col,[25,75])\n    IQR=Q3-Q1\n    lower_range= Q1-(1.5 * IQR)\n    upper_range= Q3+(1.5 * IQR)\n    return lower_range, upper_range","c18e2b22":"for column in df_train.columns:\n    lr,ur=remove_outlier(df_train[column])\n    df_train[column]=np.where(df_train[column]>ur,ur,df_train[column])\n    df_train[column]=np.where(df_train[column]<lr,lr,df_train[column])","cecc0496":"from sklearn.feature_selection import SelectKBest,chi2, f_regression","b169fb03":"# Copy all the predictor variables into X dataframe\nX = df_train.drop('loss', axis=1)\n\n# Copy target into the y dataframe. \ny = df_train[['loss']]","4989469d":"# Split X and y into training and test set in 75:25 ratio\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25 , random_state=1)","05957fa6":"fs = SelectKBest(score_func=f_regression, k=15)","cb76af4e":"fs.fit(X_train, y_train)","8c6940d1":"X_train_fs = fs.transform(X_train)","2744b818":"X_train_fs.shape","e82fda59":"df_test.head()","d959a673":"X_test_fs = fs.transform(X_test)","a99b9835":"for i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))","d6da11c0":"from matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn import preprocessing\nimport pandas_profiling\nfrom plotnine import *","4471b61e":"plt.bar([i for i in range(len(fs.scores_))], fs.scores_)\nplt.show()","d3ac07a6":"from sklearn.linear_model import LinearRegression","a7903f17":"# invoke the LinearRegression function and find the bestfit model on training data\nregression_model = LinearRegression()\nregression_model.fit(X_train_fs, y_train)","7e740fdc":"regression_model.coef_ #[0][0] #[0][2]","06105eff":"regression_model.score(X_train_fs, y_train)","b205ba5f":"# R square on testing data\nregression_model.score(X_test_fs, y_test)","2bbe5a25":"#RMSE on Training data\npredicted_train = regression_model.fit(X_train_fs, y_train).predict(X_train_fs)","df6fa068":"from sklearn.metrics import mean_absolute_error","2225519b":"yhat = regression_model.predict(X_test_fs)","c423f3ef":"mae = mean_absolute_error(y_test, yhat)","ece039de":"print('MAE: %.3f' % mae)","9bcb0f91":"from sklearn import metrics","021d6c0f":"np.sqrt(metrics.mean_squared_error(y_train, predicted_train))","f35ec0c4":"np.sqrt(metrics.mean_squared_error(y_test, yhat))","17071056":"X_test_pd = fs.transform(df_test)","dbb0a745":"predicted_test = regression_model.predict(X_test_pd)","516808b0":"predicted_test","3723a138":"df_test['loss'] = predicted_test","3ab4a666":"df_test2 = df_test[['id','loss']]","4e1121d7":"df_test2.head()","2213795b":"df_test2.to_csv('test.csv')\ndf_test2.to_csv('submission.csv')","f981e555":"from sklearn.ensemble import RandomForestRegressor","c3a54cbb":"from sklearn.metrics import r2_score,mean_squared_error,mean_squared_log_error,make_scorer\nfrom sklearn.pipeline import make_pipeline","c8ef6728":"mod=RandomForestRegressor(n_estimators=50)","5a23f518":"model=make_pipeline(mod)","69e5f44d":"print(model)","66eeb175":"from sklearn.model_selection import train_test_split,KFold,cross_val_score,GridSearchCV,RandomizedSearchCV","ea085a40":"kfold=KFold(n_splits=5)","1eac3b39":"model.fit(X_train_fs,y_train)","6d805a8c":"score=cross_val_score(model,X_train_fs,y_train,cv=kfold)","988108cb":"from sklearn.model_selection import train_test_split,KFold,cross_val_score,GridSearchCV,RandomizedSearchCV","0f3ee07c":"kfold=KFold(n_splits=5)","d7af31de":"model.fit(X_train_fs,y_train)","7dda91aa":"score=cross_val_score(model,X_train_fs,y_train,cv=kfold)","d90c8643":"yp=model.predict(X_test_fs)","ba9447cc":"print('Match not Found')","ebedc75e":"print(r2_score(y_test,yp),'Rsquare')","22f4d7e8":"np.sqrt(metrics.mean_squared_error(y_test, yp))","0cdfd256":"print(mean_squared_error(y_test,yp), 'MSE')","5e33f7dd":"yp2=model.predict(X_test_pd)","98f94e4b":"yp2","36ceff60":"df_test['lossrf'] = yp2","592780e9":"df_test3 = df_test[['id','lossrf']]","eb3023f9":"df_test3.rename(columns={\"id\": \"id\",\"lossrf\":\"loss\"})","1476b9d3":"df_test3.to_csv('submission_rf.csv')","81cd48ab":"import xgboost as xgb","5544b1ab":"print(xgb.__version__)","8d2d8804":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","1a928c7f":"xg_reg.fit(X_train_fs,y_train)","9cc9bc65":"y_test_preds = xg_reg.predict(X_test_fs)","f636f784":"y_train_preds = xg_reg.predict(X_train_fs)","8c1ff523":"rmse = np.sqrt(mean_squared_error(y_train, y_train_preds))\nprint(\"RMSE: %f\" % (rmse))","daed1e68":"np.sqrt(metrics.mean_squared_error(y_train, y_train_preds))","ad9712c4":"data_dmatrix = xgb.DMatrix(data=X_train_fs,label=y_train)","55ef82bc":"params = {\"objective\":\"reg:linear\",'colsample_bytree': 0.3,'learning_rate': 0.1,\n                'max_depth': 5, 'alpha': 10}\n\ncv_results = xgb.cv(dtrain=data_dmatrix, params=params, nfold=3,\n                    num_boost_round=50,early_stopping_rounds=10,metrics=\"rmse\", as_pandas=True, seed=123)","dedb2472":"cv_results.head()","e1f2bf59":"print((cv_results[\"test-rmse-mean\"]).tail(1))","f944259d":"xgb.plot_importance(xg_reg)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","6adb4509":"y_test_preds = xg_reg.predict(X_test_pd)","35905a48":"df_test['lossxgb'] = y_test_preds","702bb653":"df_test4 = df_test[['id','lossxgb']]","0769cf74":"df_test4.rename(columns={\"id\": \"id\",\"lossxgb\":\"loss\"})","b67e46ef":"df_test4.to_csv('submission_xgb.csv')","91a40902":"from sklearn.metrics import confusion_matrix,classification_report","eef1a529":"data_new = df_train2.apply(zscore)","944e36fe":"**Random Forest**","95d50134":"**Feature Selection**","1c4ea8b0":"**Checking for Duplicates**","5b09fc34":"**Linear Regression**","c971ce86":"**XG Boost Regressor**","ca59593d":"**Removing Outliers**"}}