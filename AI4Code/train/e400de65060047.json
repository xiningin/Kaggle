{"cell_type":{"0c4e74e1":"code","5180d9a8":"code","46ce2f32":"code","4b914643":"code","02433f18":"code","c99a59a3":"code","1d3884d1":"code","7ab1d06d":"code","901401f2":"code","727aa94a":"code","a219d1d1":"code","e519e343":"code","24b0b4ad":"code","a715aafd":"code","d91cf4e9":"code","ee0e9f7a":"code","05ed0e75":"code","c6dd798b":"code","9cdc11d1":"code","6bd8938c":"code","4d43380e":"code","86e02870":"code","f8919f9c":"code","2c929f0f":"code","cbdae1d3":"code","d7da43bf":"code","84fbd846":"code","81fb289e":"code","ccc53ba4":"code","d61b314d":"code","11f1338c":"code","2898f562":"code","611f7196":"code","17bdbe5e":"code","1a981fc4":"code","54f6f4d5":"code","cb0fa56c":"code","f97477ef":"code","9b6ef802":"code","0708fb72":"code","69e940d5":"code","3d2859c9":"code","f7ec71f4":"code","603a223a":"code","7ba273e9":"code","bcf7cf50":"code","cac004c7":"code","bfa4b2bc":"code","59dcb65d":"code","56907772":"code","4dbf6a1d":"code","0cb6400c":"markdown","28b7e977":"markdown","411da22e":"markdown","63b1bbb9":"markdown","85d569d9":"markdown","0afcc26b":"markdown","41896df5":"markdown","5f1947a9":"markdown","e962ca07":"markdown","6fa25e1f":"markdown","8afa1b72":"markdown","25aab2ec":"markdown"},"source":{"0c4e74e1":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n#sets the backend of matplotlib to the 'inline' backend\n%matplotlib inline \nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","5180d9a8":"df1 = pd.read_csv(\"..\/input\/bangalore\/banglore.csv\")\ndf1.head()","46ce2f32":"df1.shape","4b914643":"df1.columns","02433f18":"df1['area_type'].unique()","c99a59a3":"df1['area_type'].value_counts()","1d3884d1":"df2 = df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.shape","7ab1d06d":"df2.isnull().sum()","901401f2":"df2.shape","727aa94a":"df3 = df2.dropna()\ndf3.isnull().sum()","a219d1d1":"df3.shape","e519e343":"df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\ndf3.bhk.unique()","24b0b4ad":"  def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","a715aafd":"#Explore total_sqft feature\ndf3[~df3['total_sqft'].apply(is_float)].head(10)","d91cf4e9":"def convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","ee0e9f7a":"df4 = df3.copy()\ndf4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)\ndf4 = df4[df4.total_sqft.notnull()]\ndf4.head(2)","05ed0e75":"df4.loc[30]","c6dd798b":"#Adding a new column\ndf5 = df4.copy()\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft'] # Price is in lakh rupees\ndf5.head()","9cdc11d1":"#Let' s explore location\n\nlen(df5.location.unique())","6bd8938c":"#Removing white space\ndf5.location = df5.location.apply(lambda x: x.strip())\nlocation_stats = df5['location'].value_counts(ascending=False)\nlocation_stats\n","4d43380e":"len(location_stats[location_stats>10])\nlen(location_stats[location_stats<=10])","86e02870":"location_stats_less_than_10 = location_stats[location_stats<=10]\nlocation_stats_less_than_10","f8919f9c":"df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)\nlen(df5.location.unique())","2c929f0f":"df5[df5.total_sqft\/df5.bhk<300].head()","cbdae1d3":"df5.shape","d7da43bf":"df6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","84fbd846":"df6.price_per_sqft.describe()","81fb289e":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf7 = remove_pps_outliers(df6)\ndf7.shape","ccc53ba4":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='red',label='2 BHK', s=50)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,\"Rajaji Nagar\")","d61b314d":"plot_scatter_chart(df7,\"Hebbal\")","11f1338c":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8 = remove_bhk_outliers(df7)\n# df8 = df7.copy()\ndf8.shape","2898f562":"plot_scatter_chart(df8,\"Hebbal\")","611f7196":"plot_scatter_chart(df8,\"Rajaji Nagar\")","17bdbe5e":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","1a981fc4":"plt.hist(df8.bath,rwidth=0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","54f6f4d5":"df8[df8.bath>10]","cb0fa56c":"#It is unusual to have 2 more bathrooms than number of bedrooms in a home\ndf9 = df8[df8.bath<df8.bhk+2]\ndf9.shape","f97477ef":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)","9b6ef802":"dummies = pd.get_dummies(df10.location)\ndummies.head(3)","0708fb72":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')# dropping \"other\" inorder to avoid dummy trap\ndf11.head()","69e940d5":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","3d2859c9":"X = df12.drop(['price'],axis='columns')\nX.head(3)","f7ec71f4":"df12 = df11.drop('location',axis='columns')\ndf12.head(2)","603a223a":"y = df12.price\ny.head(3)","7ba273e9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","bcf7cf50":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","cac004c7":"# K Fold Cross validation\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","bfa4b2bc":"#Find best model using GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(X,y)","59dcb65d":"#Test the model for few properties\ndef predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr_clf.predict([x])[0]","56907772":"predict_price('1st Phase JP Nagar',1000, 2, 2)","4dbf6a1d":"predict_price('Indira Nagar',1000, 2, 2)","0cb6400c":"# Outlier detection and removal","28b7e977":"Now it's suitable for on-hot encoding","411da22e":"# Feature Engineering","63b1bbb9":"The maximum and minimum values show some extreme cases. Since we are building a model, we have to remove them.","85d569d9":"Let's check if for a given location how does the 2 BHK and 3 BHK property prices look like","0afcc26b":"We can use domain knowledge here.For example, When dividing total square foot by number of bedrooms, we sould get a reasonable value.","41896df5":"Let's categorize locations with less than 10 data points as \"Other\"","5f1947a9":"# Outlier Removal Using Standard Deviation and Mean","e962ca07":"# Model building","6fa25e1f":"# Importing and cleaning data","8afa1b72":"Looks like there are a too many locations.We should reduce dimention","25aab2ec":"# Use One Hot Encoding For Location"}}