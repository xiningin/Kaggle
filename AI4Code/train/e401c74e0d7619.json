{"cell_type":{"a72590ab":"code","409e0d4c":"code","5993e4ea":"code","2c3207f1":"code","645bdbbc":"code","2dad777c":"code","078f2d67":"code","502e494b":"code","990e8fe2":"code","b11f0b5d":"code","95e3fdae":"code","26aa2a7f":"code","7a6e0a31":"code","4eb9d94f":"code","d906d085":"code","9018ad2f":"code","f450594b":"code","03d00d12":"code","1f1e2974":"code","0ed08e45":"code","d59da83d":"code","72098ac0":"code","92133f29":"code","27f4777f":"code","f7d7e8a7":"code","664f7fc5":"code","1748f5df":"code","cceb3d67":"code","d6c3ad02":"code","866ee897":"code","74567a37":"code","64e05085":"code","3fd134f4":"code","09bd73b6":"code","02db3ed6":"code","eab5494d":"code","ba4be074":"code","55199b6f":"code","2aa660c2":"code","0ca7c9c2":"code","fd4b33c2":"code","14025553":"code","f1db99b4":"code","2f57a662":"code","3f57df37":"code","f7ac18a6":"code","9e9d3b49":"code","fb76acb5":"code","721ea083":"code","b6d88cf3":"code","83dfde21":"code","d85c906e":"code","93eddd92":"code","307817fd":"code","3eebad48":"code","a691ea52":"code","1cd9f43e":"code","d8176002":"code","042be735":"code","4fd40132":"code","c4b91dbe":"code","70f95722":"code","d85ffab8":"code","7480ce3e":"code","5e744a8d":"code","653dee90":"code","d504648c":"code","bae0b809":"markdown","58c30e02":"markdown","1e5dd56a":"markdown","9805963b":"markdown","a9152189":"markdown","88f6c326":"markdown","be8b0e7e":"markdown","10ef35a3":"markdown","07830345":"markdown","956cc77c":"markdown","5101fa7f":"markdown","646892c2":"markdown","120302b8":"markdown","80a8e667":"markdown","59670366":"markdown","3bf95271":"markdown","2f2ce2db":"markdown","98cb8894":"markdown","166ee43b":"markdown","45f17cfe":"markdown","fe594860":"markdown","b5931b7a":"markdown","5a0d2e70":"markdown","637ec501":"markdown","8451fe51":"markdown"},"source":{"a72590ab":"# Single line comments","409e0d4c":"\"\"\"\nMulti line comments in python , they can span \nover a lot of lines.\n\"\"\"","5993e4ea":"print(\"This is through a print statement.\")","2c3207f1":"import math\n\nprint(math.pi)","645bdbbc":"# getting help on a function is as easy as:\nhelp(print)","2dad777c":"help(math) # help on library","078f2d67":"help(math.pi) # help on a variable from library","502e494b":"import math\nprint(dir(math))","990e8fe2":"# variable assignment\nvar_str = \"some random string.\"\nvar_int = 123\nvar_float = 12.345\nvar_bool = True\nvar_complex = 2 + 3j","b11f0b5d":"# Finding type of variables in python\nprint(\n    type(var_str),\n    type(var_int),\n    type(var_float),\n    type(var_bool),\n    type(var_complex)\n     )","95e3fdae":"a = print('')\nprint(a)\na == None","26aa2a7f":"type(None)","7a6e0a31":"# Basic Operations in python\nprint(\"addition\",12+3)\nprint(\"subtraction\",4-1)\nprint(\"multiplication\",3*7)\nprint(\"division\",12\/5)\nprint(\"Quotient : True Division\", 12 \/\/ 5)\nprint(\"Remainder : Modulus\", 12 % 5)\nprint(\"exponentation\", 3**5)\nprint(\"negation\", -5)","4eb9d94f":"# Functions\ndef func_name(param_1,param_2, param_3):\n    return ( param_1 + param_2 ) \/ param_3;\n\nfunc_name(8,6,5)","d906d085":"def area_of_circle(rad, pi = 3.14):\n    \"\"\"\n    Calculates the area of a circle given the radius.\n    pi is optional parameter, if not provided pi is taken as 3.14.\n    \n    >>> area_of_circle(1)\n    3.14\n    \n    >>> area_of_circle(1, 22\/7)\n    3.142857142857143\n    \"\"\"\n    return pi * (rad ** 2);\n\nprint(area_of_circle(1))\nprint(area_of_circle(1, 22\/7))","9018ad2f":"help(area_of_circle)","f450594b":"def mult_by_five(x):\n    return 5 * x\n\ndef call(fn, arg):\n    \"\"\"Call fn on arg\"\"\"\n    return fn(arg)\n\ndef squared_call(fn, arg):\n    \"\"\"Call fn on the result of calling fn on arg\"\"\"\n    return fn(fn(arg))\n\nprint(\n    call(mult_by_five, 1),\n    squared_call(mult_by_five, 1), \n    sep='\\n', # '\\n' is the newline character - it starts a new line\n)","03d00d12":"def mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)","1f1e2974":"a = 5\nb = 9\nprint(\n    a == a, #True\n    a != a, #False\n    a > b,  #False\n    a >= b, #False\n    a < a,  #False\n    a <= a  #True\n)","0ed08e45":"print(3.0 == 3, '3' == 3)","d59da83d":"def xor_fnc(a,b):\n    return (a and not b) or (not a and b) # Combining and , or , not\n\nprint(\nxor_fnc(True,True),\nxor_fnc(True,False),\nxor_fnc(False,True),\nxor_fnc(False,False),\n)","72098ac0":"score = 65\nif score > 80:\n    print('Distinction')\nelif score > 60:\n    print('A Grade')\nelif score > 40:\n    print('B Grade')\nelse:\n    print('Fail')","92133f29":"primes = [2, 3, 5, 7]\n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nhands = [\n    ['J', 'Q', 'K'],\n    ['2', '2', '2'],\n    ['6', 'A', 'K'], # (Comma after the last element is optional)\n]\n\nmy_favourite_things = [32, 'raindrops on roses', help]\n","27f4777f":"type(primes)","f7d7e8a7":"type(hands)","664f7fc5":"planets[0] # List index starts from zero","1748f5df":"planets[-1] # Negative number counts from last","cceb3d67":"planets[:2] # select n elements (start index inclusive, end index not inclusive)","d6c3ad02":"planets[:-1]","866ee897":"print(\n    planets[3:1],\n    planets[-1:-3]\n)","74567a37":"planets[3] = 'Malacandra'\nplanets","64e05085":"planets[:3] = ['Mur', 'Vee', 'Ur']\nplanets","3fd134f4":"planets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]\nplanets","09bd73b6":"print(\n    len(planets),\n    sorted(planets),\n    sum(primes),\n    max(primes),\n    sep = '\\n'\n)","02db3ed6":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanets.append('Pluto')\nplanets","eab5494d":"planets.pop()","ba4be074":"planets.index('Venus')","55199b6f":"planets.append('X360')\n\"Venus\" in planets","2aa660c2":"a = (1,2,3)","0ca7c9c2":"type(a)","fd4b33c2":"try: \n    a[0]=111\n    \nexcept TypeError as e:\n    print(e)","14025553":"days = ['Mon', 'Tue' ,'Wed']\nfor day in days:\n    print(day, end = ' ')","f1db99b4":"i=0\nwhile i < 11:\n    print(i, end=',')\n    i+=1","2f57a662":"squares = [i**2 for i in range(10)]\nsquares","3f57df37":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupyter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']\nbig_planets = [planet.upper() + '!' for planet in planets if len(planet) > 5]\nbig_planets","f7ac18a6":"var_str_a = \"Some str\"\nvar_str_with_escape_seq = 'Children\\'s Academy\\n We the people\\n'\nprint(var_str_with_escape_seq)\n\nhello = \"hello\\nworld\"\ntriplequoted_hello = \"\"\"hello\nworld\"\"\"\n\nprint(triplequoted_hello)\n\ntriplequoted_hello == hello","9e9d3b49":"some_str = \"Lorem ipsum\"\nsome_str.index('re')","fb76acb5":"some_str.startswith('Lo')","721ea083":"try: \n    some_str[2] = 'K'\nexcept BaseException as e:\n    print(e)\n    ","b6d88cf3":"some_str.split()","83dfde21":"datestr = '1956-01-31'\nyear, month, day = datestr.split('-')\nprint(year, month, day)","d85c906e":"'\/'.join([month, day, year])","93eddd92":"planet = \"Pluto\"\nposition = 9\n\n\"{}, you'll always be the {}th planet to me.\".format(planet, position)","307817fd":"var_dict = {'one':1, 'two':2, 'three':3}\nvar_dict['one']","3eebad48":"var_dict['eleven'] = 11\nvar_dict","a691ea52":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanet_to_initial = {planet: planet[0] for planet in planets}\nplanet_to_initial","1cd9f43e":"# in operator works on keys\n'Saturn' in planet_to_initial","d8176002":"numbers = {'one':1, 'two':2, 'three':3}\nfor k in numbers:\n    print(\"{} = {}\".format(k, numbers[k]))","042be735":"numbers.keys()","4fd40132":"numbers.values()","c4b91dbe":"for planet, initial in planet_to_initial.items():\n    print(\"{} begins with \\\"{}\\\"\".format(planet.rjust(10), initial))","70f95722":"for planet, initial in planet_to_initial.items():\n    print(\"{}\".format(planet.rjust(50), initial))","d85ffab8":"'...,,,..,,.asda..,.,.sdfsd..,.,.,.,,'.rstrip('.,')","7480ce3e":"# Roll 10 dice\nimport numpy\nrolls = numpy.random.randint(low=1, high=6, size=10)\nrolls","5e744a8d":"try:\n    [1, 4, 5, 4, 2, 4, 3, 1, 1, 1] + 10\n\nexcept BaseException as e:\n    print(e)","653dee90":"type(rolls)","d504648c":"rolls + 10","bae0b809":"# Variable Types (Basic)","58c30e02":"### initialize a list","1e5dd56a":"# Operations (Maths)","9805963b":"# Loops","a9152189":"# List Comprehensions","88f6c326":"# Functions applied to Functions\n\nFunctions that operate on other functions are called \"Higher order functions.\"","be8b0e7e":"# Conditional Statements","10ef35a3":"# Comment","07830345":"# Variable Types (Tuples)","956cc77c":"### and , or , not","5101fa7f":"### Modifying Lists","646892c2":"# Print","120302b8":"# Operations (Comparison)","80a8e667":"### Indexing","59670366":"# Variable Types (Lists)","3bf95271":"# Functions","2f2ce2db":"### None Type\n* The None type is pythons way of telling a null \/ empty value\n* Functions which do not return a value essentially return None\n","98cb8894":"# dir function","166ee43b":"# Other","45f17cfe":"# Import a library","fe594860":"# Strings & Dictionaries","b5931b7a":"### Docstrings : \nDocstrings or documentation strings - are triple-quoted strings (which may span multiple lines) that comes immediately after the header of a function. When we call help() on a function, it shows the docstring.","5a0d2e70":"# Help","637ec501":"### Slicing","8451fe51":"# List Functions"}}