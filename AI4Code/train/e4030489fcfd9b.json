{"cell_type":{"a012c821":"code","93815b01":"code","a4b9957c":"code","a9d5f318":"code","9680274b":"code","0fe6b8e2":"code","5af230d9":"code","d0b3820d":"code","0a6d9080":"code","8d205028":"code","1f11ed4d":"code","95b45a96":"code","05cb2e06":"code","7bb471cc":"code","5e013b0e":"markdown","c0169669":"markdown"},"source":{"a012c821":"import pandas as pd\nimport numpy as np\nfrom fastai.vision.all import *\nimport pickle\nimport os\nimport torch","93815b01":"train = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\ntest_df = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')","a4b9957c":"train = train.sample(frac=1).reset_index(drop=True)","a9d5f318":"def id2path(id, is_test):\n    a, b, c = id[0], id[1], id[2]\n    if is_test: return f'..\/input\/g2net-gravitational-wave-detection\/test\/{a}\/{b}\/{c}\/{id}.npy'\n    return f'..\/input\/g2net-gravitational-wave-detection\/train\/{a}\/{b}\/{c}\/{id}.npy'","9680274b":"def id2img(id, is_test):\n    fname = id2path(id, is_test)\n    img = np.load(fname).reshape(3,64,64).transpose(1,2,0)\n    img = (img - img.min()) \/ (img.max() - img.min())\n    return img","0fe6b8e2":"class NumpyDataset(torch.utils.data.Dataset):\n    def __init__(self, df, is_test=False):\n        self.df,self.is_test = df,is_test\n        \n    def __getitem__(self, i):\n        image_id = self.df['id'].loc[i]\n        img = id2img(image_id, self.is_test).transpose(2,0,1)\n        if self.is_test:\n            tgt = 0 if i < 10 else 1\n            return (torch.tensor(img, dtype=torch.float), torch.tensor(tgt, dtype=torch.long))\n        else:\n            tgt = self.df['target'].loc[i]\n            return (torch.tensor(img, dtype=torch.float), torch.tensor(tgt, dtype=torch.long))\n    \n    def __len__(self): return len(self.df)","5af230d9":"cut = int(0.8 * len(train))\ntrain_df = train[:cut].reset_index(drop=True)\nvalid_df = train[cut:].reset_index(drop=True)\nlen(train_df), len(valid_df)","d0b3820d":"train_ds = NumpyDataset(train_df, is_test=False)\nvalid_ds = NumpyDataset(train_df, is_test=False)\ntest_ds = NumpyDataset(test_df, is_test=True)","0a6d9080":"dls = DataLoaders.from_dsets(train_ds, valid_ds)\ndls.c = 1","8d205028":"learn = cnn_learner(dls, resnet34, loss_func=BCEWithLogitsLossFlat(), metrics=RocAucBinary())","1f11ed4d":"learn.fit_one_cycle(1, 3e-3)","95b45a96":"learn.save('model')","05cb2e06":"learn.recorder.plot_loss()","7bb471cc":"test_dl = DataLoader(test_ds, bs=256, shuffle=False, drop_last=False)\npreds, _ = learn.get_preds(dl=test_dl)\ntest_df.target = np.array(preds)\ntest_df.to_csv('submission.csv', index=False)\ntest_df.head()","5e013b0e":"# fastai training with resnet34\nfastai is a great tool to create a strong baseline quickly. My idea is to convert the numpy files to images and train a model with an imagenet-pretrained model. Let's see if this approach gets us anywhere :) \n\n### I will smile for every upvote :) ","c0169669":"# Inference"}}