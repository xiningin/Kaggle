{"cell_type":{"bd6fc0a5":"code","aa832532":"code","0dad4c22":"code","7ba2e983":"code","44d5816f":"code","44bc7183":"code","2450bf92":"code","6ce11ccd":"code","125dea67":"code","a5a84da1":"code","c871fc35":"code","47557c05":"code","2ece4244":"code","fa34a66b":"code","8c07e973":"code","d0fa3a72":"code","f79b2f40":"code","f5fe4815":"code","92b591db":"code","e105ed05":"code","41391fbf":"code","b6a064ec":"code","d6d544f4":"code","4bde3ccf":"code","2fefc35a":"code","6abd6d85":"code","62bf353c":"code","37bf5587":"code","1a085261":"code","18e094c2":"code","07e41aad":"code","7c92dbdd":"code","7c1da3eb":"code","5e91fdd9":"code","924802df":"code","033fbd77":"code","1f682f8a":"code","a75df858":"code","e66e318e":"code","897a2213":"code","c2919280":"code","ce26ee7f":"code","4d41d856":"code","34d87e34":"code","2568a817":"code","5082f099":"code","b86e2368":"code","53b5dac6":"code","66a67631":"markdown"},"source":{"bd6fc0a5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","aa832532":"df = pd.read_csv('..\/input\/adult-census-income\/adult.csv')","0dad4c22":"df.head()","7ba2e983":"df.columns","44d5816f":"df.shape","44bc7183":"df.info()","2450bf92":"df.describe()","6ce11ccd":"df.isnull().values.any()","125dea67":"df.isin(['?']).sum()","a5a84da1":"df = df.replace('?', np.NaN)","c871fc35":"for col in ['workclass', 'occupation', 'native.country']:\n    df[col].fillna(df[col].mode()[0], inplace=True)","47557c05":"df.isnull().sum()","2ece4244":"df.head()","fa34a66b":"df['income'].value_counts()","8c07e973":"sns.countplot(x='income', data = df)","d0fa3a72":"sns.boxplot(y='age',x='income',data=df)","f79b2f40":"sns.boxplot(y='hours.per.week',x='income',data=df)","f5fe4815":"sns.countplot(df['sex'],hue=df['income'])","92b591db":"sns.countplot(df['occupation'],hue=df['income'])\nplt.xticks(rotation=90)","e105ed05":"df['income']=df['income'].map({'<=50K': 0, '>50K': 1})","41391fbf":"sns.barplot(x=\"education.num\",y=\"income\",data=df)","b6a064ec":"df['workclass'].unique()","d6d544f4":"sns.barplot(x=\"workclass\",y=\"income\",data=df)\nplt.xticks(rotation=90)","4bde3ccf":"df['education'].unique()","2fefc35a":"sns.barplot(x=\"education\",y=\"income\",data=df)\nplt.xticks(rotation=90)","6abd6d85":"df['marital.status'].unique()","62bf353c":"sns.barplot(x=\"marital.status\",y=\"income\",data=df)\nplt.xticks(rotation=90)","37bf5587":"df['relationship'].unique()","1a085261":"sns.barplot(x=\"relationship\",y=\"income\",data=df)\nplt.xticks(rotation=90)","18e094c2":"df['native.country'].unique()","07e41aad":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","7c92dbdd":"for col in df.columns:\n    if df[col].dtypes == 'object':\n        df[col] = le.fit_transform(df[col])","7c1da3eb":"df.dtypes","5e91fdd9":"df.head()","924802df":"corrmat = df.corr()\nplt.figure(figsize=(20,12))\nsns.heatmap(corrmat, annot=True, cmap='coolwarm')","033fbd77":"corrmat['income'].sort_values(ascending = False)","1f682f8a":"X = df.iloc[:,0:-1]\ny = df.iloc[:,-1]","a75df858":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","e66e318e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = pd.DataFrame(sc.fit_transform(X_train))\nX_test = pd.DataFrame(sc.transform(X_test))","897a2213":"X_train.head()","c2919280":"l=[]","ce26ee7f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Logistic Regression:', acc * 100)\nl.append(acc)","4d41d856":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nclassifier = SVC(kernel = 'rbf', random_state = 42)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('SVM:', acc * 100)\nl.append(acc)","34d87e34":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Knn:',acc * 100)\nl.append(acc)","2568a817":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Decision Tree:', acc * 100)\nl.append(acc)","5082f099":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Naive Bayes:', acc * 100)\nl.append(acc)","b86e2368":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix as cm\nfrom sklearn.metrics import classification_report as cr\nclassifier = RandomForestClassifier(n_estimators = 300, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprint('Random Forest:',acc * 100)\nl.append(acc)\nprint(cm(y_test, y_pred))\nprint(cr(y_test, y_pred))","53b5dac6":"y_axis=['Logistic Regression',\n     'Support Vector Classifier',\n        'K-Neighbors Classifier',\n      'Decision Tree Classifier',\n       'Gaussian Naive Bayes',\n      'Random Forest Classifier']\nx_axis=l\nsns.barplot(x=x_axis,y=y_axis)\nplt.xlabel('Accuracy')","66a67631":"If you find this kernel useful, **PLEASE UPVOTE!!**"}}