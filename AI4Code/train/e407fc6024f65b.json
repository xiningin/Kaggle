{"cell_type":{"3dd2ce2c":"code","3f63ad44":"code","44218189":"code","28889c98":"code","3c9b7c60":"code","668e0603":"code","bd33c643":"code","0ad08b6f":"code","eb10140c":"code","b7b682cc":"code","8aa7badc":"code","d5eee94f":"code","109fdcb2":"code","1fbbbff0":"code","544a4f00":"code","0dd4d83a":"code","1115e882":"code","d08fbfb5":"code","e5b530d4":"code","9c5433e8":"code","0dc2d684":"code","ccf1d39c":"code","542955ea":"code","7c4fd81d":"code","ef49dae2":"code","390fae18":"code","aaeb3567":"code","6c64afea":"code","b663ad29":"code","43d6ed86":"code","f6ad00d2":"code","d3ae8dbf":"code","d279a66d":"code","bb5c8227":"code","edcb6a92":"code","9495bb9c":"code","dff3379b":"markdown","53d8d40e":"markdown","f1ee269a":"markdown","64ebe349":"markdown","7d7c9646":"markdown","7ee6da2c":"markdown","623c53e1":"markdown","08be2e60":"markdown","1404373b":"markdown","17d86759":"markdown","e9d4d370":"markdown","b5a26c75":"markdown","dd3767ce":"markdown","f9830078":"markdown","ee08750e":"markdown","389f7126":"markdown","53943b80":"markdown","a10d2266":"markdown","30f221de":"markdown","205b105e":"markdown","96a18b65":"markdown","83fcd815":"markdown","c1ad5899":"markdown","9ae64865":"markdown","6df4d9d5":"markdown","f303f1a5":"markdown","39ebc787":"markdown","5e0dce6c":"markdown","29a90e99":"markdown","5dbe68bc":"markdown","225f2d44":"markdown"},"source":{"3dd2ce2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.max_seq_items = 2000\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport plotly.express as px\nimport plotly.graph_objs as go\n# import plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n# modeling\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso, LassoCV, RidgeCV\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.svm import SVR","3f63ad44":"covid = pd.read_csv('..\/input\/bingcovid0613\/Bing-COVID19-Data-6-13.csv',engine='python')","44218189":"# OLD:\n# covid = pd.read_csv('..\/input\/bingcovid67\/bing-covid-6-7.csv',engine='python')","28889c98":"# set up column names\ncovid.columns= ['ID','Date','Confirmed','ConfirmedChange','Deaths','DeathsChange','Recovered','RecoveredChange','Latitude','Longitude','ISO2','ISO3','Country','AdminRegion1','AdminRegion2']\n\ncovid['ID'] = covid['ID'].astype(int)\n\n# Create function to change empty strings to 0:\ndef insert_zeros(series):\n    return [(float(x) if x else 0) for x in series]\n\n# execute function as needed:\ncovid['ConfirmedChange'] = insert_zeros(covid['ConfirmedChange'])\ncovid['Deaths'] = insert_zeros(covid['Deaths'])\ncovid['DeathsChange'] = insert_zeros(covid['DeathsChange'])\ncovid['Recovered'] = insert_zeros(covid['Recovered'])\ncovid['RecoveredChange'] = insert_zeros(covid['RecoveredChange'])\ncovid['Latitude'] = insert_zeros(covid['Latitude'])\ncovid['Longitude'] = insert_zeros(covid['Longitude'])\n\n# set various cols to float data type:\ncovid[['ID',\n       'Confirmed',\n       'ConfirmedChange',\n       'Deaths',\n       'DeathsChange',\n       'Recovered',\n       'RecoveredChange',\n       'Latitude',\n       'Longitude']] = covid[['ID',\n                  'Confirmed',\n                  'ConfirmedChange',\n                  'Deaths',\n                  'DeathsChange',\n                  'Recovered',\n                  'RecoveredChange',\n                  'Latitude',\n                  'Longitude'\n                 ]].astype(float)\n\n# set date to datetime data type:\ncovid['Date'] = pd.to_datetime(covid['Date'])","3c9b7c60":"start_date = '2020-03-01' # Start March 1\nend_date = '2020-06-11' # End June 11\n\ncovid = covid[covid['Date'] >= start_date] \ncovid = covid[covid['Date'] <= end_date] ","668e0603":"# get USA data\nusa = covid.loc[covid['Country'] == 'United States']\n\n# US State population and HDI score data\n# get state population data\nstate_pop=pd.read_csv('..\/input\/statedata\/2019-state-pop.csv')\nstate_pop = state_pop[['NAME', 'POPESTIMATE2019']]\nuseless = ['United States', 'Northeast Region', 'Midwest Region', 'South Region','West Region','Puerto Rico']\nstate_pop = state_pop[~state_pop['NAME'].isin(useless)]\nstate_pop.rename(columns={'NAME': 'State', 'POPESTIMATE2019': '2019 State Population'}, inplace=True)\n\n# map population data onto main dataframe\npop_mapping = dict(state_pop[['State', '2019 State Population']].values)\npd.options.mode.chained_assignment = None\nusa['Population'] = usa.AdminRegion1.map(pop_mapping)\n\n\n# get state HDI data from globaldatalab.org\nstate_hdi = pd.read_csv('..\/input\/statedata\/2018-state-hdi.csv') # 2018 is most recent.\nstate_hdi = state_hdi[['Region', '2018']] # obtain necessary columns\n\n# set up useless rows\nuseless = ['Total'] \nstate_hdi = state_hdi[~state_hdi['Region'].isin(useless)] # remove useless rows\nstate_hdi.rename(columns={'Region': 'State', '2018': '2018 HDI Score'}, inplace=True)\n\n# map HDI scores onto main dataframe\nhdi_mapping = dict(state_hdi[['State', '2018 HDI Score']].values)\nusa['2018 HDI Score'] = usa.AdminRegion1.map(hdi_mapping)","bd33c643":"statelist = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\n\n","0ad08b6f":"usa['Infection Rate'] = usa['Confirmed'] \/ usa['Population'] # add infection rate\nusa['Mortality Rate'] = usa['Deaths'] \/ usa['Confirmed'] # add mortality rate\nusa['State'] = usa['AdminRegion1']\nusa.replace({'State': statelist}, inplace=True) # add state list\nusa.dropna(subset = ['AdminRegion1'], inplace=True) # drop county rows\nusa = usa.loc[usa['AdminRegion2'].isna()] # remove county subset data\n\n# set negative changed values to 0\nusa['ConfirmedChange'] = np.where((usa.ConfirmedChange < 0), 0 ,usa.ConfirmedChange)","eb10140c":"# Drop state rows\nworld = covid.loc[covid['AdminRegion1'].isna()]\n# drop \"worldwide\" row\nworld = world.loc[world['Country'] != 'Worldwide']\nworld = world[world.Country != 'Congo']","b7b682cc":"# Fix China and Congo names\nworld.loc[world['Country'] == 'China (mainland)', 'Country'] = 'China'\nworld.loc[world['Country'] == 'Hong Kong SAR', 'Country'] = 'Hong Kong'\n\n# set negative changed values to 0\nworld['ConfirmedChange'] = np.where((world.ConfirmedChange < 0), 0 ,world.ConfirmedChange)\nworld['ConfirmedChange'] = world['ConfirmedChange'].fillna(0)\n\n# latest date\nworld_current = world[world['Date'] == end_date]\n\n# grab top 60 countries:\nworld_top = world[world['Date'] == end_date].sort_values('Confirmed').tail(60)\ntoplist = world_top['Country']\nworld_top = world[world['Country'].isin(toplist)]\n","8aa7badc":"# US map with slider\ncolscale = [\n            [0, 'rgb(224,255,224)'],\n            [0.02, 'rgb(31,120,0)'],\n            [0.10, 'rgb(175,175,0)'],\n            [1, 'rgb(227,26,28)']]\n\nfig = px.choropleth(\n                    usa,\n                   locations='State',\n                   color='Deaths',\n                   hover_name='State',\n                   locationmode= 'USA-states',\n                    animation_frame=usa[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    color_continuous_scale=colscale,\n                    range_color = (0,10_000)\n                   )\nfig.update_layout(\n    title_text = f'US COVID Deaths: {start_date} - {end_date}, 2020',\n    geo_scope='usa')\nfig.show()","d5eee94f":"# US map with slider\ncolscale = [[0, 'rgb(224,255,224)'],\n            [0.02, 'rgb(31,120,0)'],\n            [0.10, 'rgb(175,175,0)'],\n            [1, 'rgb(227,26,28)']]\n\nfig = px.choropleth(\n                    usa,\n                   locations='State',\n                   color='Confirmed',\n                   hover_name='State',\n                   locationmode= 'USA-states',\n                    animation_frame=usa[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    color_continuous_scale=colscale,\n                    range_color = (0,200_000)\n                   )\nfig.update_layout(\n    title_text = f'US COVID-19 Confirmed Cases: {start_date} - {end_date}, 2020',\n    geo_scope='usa')\nfig.show()","109fdcb2":"bubs = px.scatter(usa,\n                x = 'Confirmed',\n                y = 'Deaths',\n                size = (usa['Population']\/500_000+3),\n                color = usa['2018 HDI Score'],\n                hover_name='State',\n                animation_frame=usa[\"Date\"].dt.strftime('%Y-%m-%d'),\n                range_x=[1.3,6],\n                range_y=[0,5]\n#                 log_x=True,\n#                 log_y=True\n                   )\nbubs.update_layout(\n    title_text = f'US States by COVID-19 Cases and Deaths through {end_date}, 2020(log scale)',\n    \n    xaxis_type='log',\n    yaxis_type='log'\n)\nbubs.show()","1fbbbff0":"bubs = px.scatter(usa.sort_values('State', ascending=False),\n                x = 'Date',\n                y = 'State',\n                size = 'ConfirmedChange',\n                color = 'ConfirmedChange',\n                color_continuous_scale = 'viridis',\n                height = 1000,\n                   )\nbubs.update_layout(\n    title_text = f'US States by New COVID-19 Cases: {start_date} - {end_date}',\n    yaxis = dict(dtick = 1)\n)\nbubs.show()","544a4f00":"bubbles = px.scatter(world_top.sort_values('Country', ascending=False),\n                x = 'Date',\n                y = 'Country',\n                size = 'ConfirmedChange',\n                color = 'ConfirmedChange',\n                color_continuous_scale = 'viridis',\n                height = 1500,\n                   )\nbubbles.update_layout(\n    title_text = f'Daily Confirmed Cases (Top 60 Countries) {start_date} - {end_date}',\n    yaxis = dict(dtick = 1)\n)\nbubbles.show()","0dd4d83a":"fig = px.bar(world_current.sort_values('Confirmed').tail(15),\n            x='Confirmed',\n            y='Country',\n            orientation='h', \n            width=700\n            )\nfig.update_layout(title=f'COVID-19: Top 15 Countries by Confirmed Cases (Cumulative), {end_date}', \n                      xaxis_title=\"\", \n                      yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","1115e882":"# World map with slider\n\ncolscale = [\n            [0, 'rgb(224,255,224)'],\n            [0.02, 'rgb(31,120,0)'],\n            [0.10, 'rgb(175,175,0)'],\n            [1, 'rgb(227,26,28)']]\n\nfig = px.choropleth(\n                    world,\n                   locations='Country',\n                   color='Deaths',\n                   hover_name='Country',\n                   locationmode= 'country names',\n                    animation_frame=world[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    color_continuous_scale=colscale,\n                    range_color = (0,100_000)\n                   )\nfig.update_layout(\n    title_text = f'World COVID Deaths: {start_date} - {end_date}, 2020',\n)\nfig.show()","d08fbfb5":"# World map with slider\n\ncolscale = [\n            [0, 'rgb(224,255,224)'],\n            [0.02, 'rgb(31,120,0)'],\n            [0.10, 'rgb(175,175,0)'],\n            [1, 'rgb(227,26,28)']]\n\nfig = px.choropleth(\n                    world,\n                   locations='Country',\n                   color='Confirmed',\n                   hover_name='Country',\n                   locationmode= 'country names',\n                    animation_frame=world[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    color_continuous_scale=colscale,\n                    range_color = (0,1_000_000)\n                   )\nfig.update_layout(\n    title_text = f'Worldwide COVID-19 Confirmed Cases: {start_date} - {end_date}',\n)\nfig.show()","e5b530d4":"hdi = pd.read_csv('..\/input\/hdiclean25\/HDI-2.5.csv')\npd.set_option('display.max_columns',300)\npd.set_option('display.max_rows',300)\nhdi.loc[hdi['Country'] == 'Congo', 'Country'] = 'Congo (DRC)'\n\n# ideal number of features:\nprint(f'Maximum number of features: {np.sqrt(hdi.shape[0]).round(0)}')","9c5433e8":"def viewer(df):\n    view = pd.DataFrame()\n    view['dtypes'] = df.dtypes\n    view['nunique'] = df.nunique()\n    view['nans'] = df.isna().sum()\n    view['mean'] = df.mean().round(2)\n    view['std dev'] = df.std().round(2)\n    return view.T","0dc2d684":"viewer(hdi)","ccf1d39c":"# HDI feature correlation Heatmap:\ndata = hdi.drop(['Country'], axis=1)\n\ncorr = data.corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool)) # Generate a mask for the upper triangle\nf, ax = plt.subplots(figsize=(20, 16)) # Set up the matplotlib figure\ncmap = sns.diverging_palette(220, 10, as_cmap=True) # Generate a custom diverging colormap\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap='coolwarm',\n#             vmax=.3, \n            center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.title('Heatmap of HDI feature correlation');","542955ea":"# only include countries with 1 million pop or more:\nhdi_large = hdi[hdi['Population millions'] >= 1.0]\n\n# create union:\nunion = []\nfor i in list(world['Country'].unique()):\n    if i in list(hdi_large['Country']):\n        union.append(i)\n\n# look at differences:\nstragglers = []\nfor i in list(hdi_large['Country'].unique()):\n    if i not in union:\n        stragglers.append(i)\nprint(f'# of stragglers:{len(stragglers)}')\nprint(f'stragglers: {stragglers}')\n\n# only include inner joins:\nworld_cut = world[world['Country'].isin(union)]\nhdi_cut = hdi[hdi['Country'].isin(union)]\nsame_length = len(world_cut['Country'].unique()) == len(hdi_cut['Country'].unique())\nlength = len(hdi_cut['Country'])\n\n# view results:\nprint(f'Same length? : {same_length}')\nprint(f'# of countries: {length}')","7c4fd81d":"# merge world and hdi datasets:\ncombined = world_cut.merge(hdi_cut, on=['Country'])\n\n# Clean dataset:\ncombined.drop(['AdminRegion1', 'AdminRegion2', 'ISO2', 'ISO3'], axis=1, inplace=True)\ncombined['Deaths'] = combined['Deaths'].fillna(0)\ncombined['DeathsChange'] = combined['DeathsChange'].fillna(0)\ncombined['Recovered'] = combined['Recovered'].fillna(0)\ncombined['RecoveredChange'] = combined['RecoveredChange'].fillna(0)\n\n# Infection and mortality rates\ncombined['infection_rate'] = combined['Confirmed'] \/ combined['Population millions']\ncombined['mortality_rate'] = combined['Deaths'] \/ combined['Confirmed']\ncombined['mortality_rate'] = combined['mortality_rate'].fillna(0)","ef49dae2":"# Test Dates\nmar1 = combined[combined['Date'] == '2020-03-01']\napr1 = combined[combined['Date'] == '2020-04-01']\nmay1 = combined[combined['Date'] == '2020-05-01']\njun1 = combined[combined['Date'] == '2020-06-01']","390fae18":"# MASS FEATURES LIST:\n\nfeatures = [\n#         'index', \n#         'ID', \n#         'Date', \n#         'Confirmed', \n#         'ConfirmedChange', \n#         'Deaths',\n#        'DeathsChange', \n#         'Recovered', \n#         'RecoveredChange', \n#         'Latitude', \n#         'Longitude',\n#        'Country', \n        '2018 HDI category', \n        '2018 HDI', \n        'Life expectancy at birth',\n       'Expected years of schooling',\n        'Mean years of schooling',\n       'Gross national income (GNI) per capita PPP $',\n       'GNI per capita rank minus HDI rank', \n        '2018 HDI rank', \n#         '1990 HDI',\n#        '2000 HDI', \n#         '2010 HDI', \n#         '2013 HDI', \n#         '2015 HDI', \n#         '2016 HDI', \n#         '2017 HDI',\n#        '2018 HDI.1', \n#         'Change in HDI rank ',\n#        'Average annual HDI growth 1990-2000',\n#        'Average annual HDI growth 2000-2010',\n#        'Average annual HDI growth 2010-2018',\n#        'Average annual HDI growth 1990-2018',\n       'Inequality-adjusted HDI (IHDI) ', \n#         'IHDI loss %',\n#        'IHDI diff from HDI rank', \n        'Coefficient of human inequality',\n       'Inequality in life expectancy %',\n       'Inequality-adjusted life expectancy index',\n       'Inequality in education %', \n        'Inequality-adjusted education index',\n       'Inequality in income %', \n        'Inequality-adjusted income index',\n       '% income share of poorest 40 pct', \n        '% income share of richest 10pct',\n       'Gini Coefficient %', \n        'GDI Overall', \n        'HDI female', \n        'HDI male',\n       'Life expectancy female', \n        'Life expectancy male',\n       'Expected schooling female', \n        'Expected schooling male',\n       'Mean schooling female', \n        'Mean schooling male',       #28\n        'GNI per capita female',\n       'GNI per capita male', \n        'Gender Inequality Index',\n       'Gender Inequality Rank', \n        'Maternal mortality per 100,000',\n       'Teenage maternity per 1000', \n        'Female % of parliament',\n       'Secondary Education rate female', \n        'Secondary Education rate male',\n       'Labor force participation females', \n        'Labor force participation males',\n       'Population millions', \n        'Population millions 2030 estimate',\n       'Avg annual growth 2005-2010', \n        'Avg annual growth 2015-2020',\n       ' Urban %', \n        'Under age 5-millions', \n        'Ages 15\u201364 millions',\n       'Ages 65 and older millions', \n        'Median age',\n       'Young dependency rate per 100',    #49\n        'Seniors dependency rate per 100',\n       'fertility rate 2005-2010', \n        'Fertility rate 2015-2020',\n       'Infants lacking DPT vaccine',       #53\n        'Infants lacking measles vaccine',\n       'Infant mortality per 1000', \n        'Under five mortality per 1000',\n       'Female adult per 1000', \n        'Male adult per 1000',\n       'Noninfectious disease mortality Female per 100k', #59\n       'Noninfectious disease mortality male per 100k', \n        'Malaria per 1000',\n       'Tuberculosis per 100,000', \n        'HIV positive %, adult',    #63\n       'Healthy life expectancy at birth', #64\n        'Healthcare % of GDP',\n       'Pop % with secondary education', \n        'GDP billions', \n        'GDP per capita',\n       'GDP per capita growth',  #64\n        'Fixed capital % of gdp',\n       'Domestic credit provided by financial sector',\n       'Consumer price index 2018 vs 2010', \n        'Employment to population ratio',\n       'Labour force participation rate', #69\n        'agriculture % of employment',\n       'Services % of employment', \n        'Unemployment %', \n        'Under 24 unemployment %',\n       '% Working poor at PPP$3.20 a day', \n        'High-skill to low-skill ratio', #75\n       'Birth registration', \n        'Refugees-thousands ',\n       'Homeless per million natural disasters', \n        'Prisoners per 100k',\n       'Suicides per 100k female', \n        'Suicides per 100k male',\n       'Exports and imports %GDP', \n        'Foreign investment inflows %GDP',\n       'Remittances, inflows %GDP',\n        'Net migration per 1000',\n       'Stock of immigrants %pop', \n        'International inbound tourists thousands',\n       'Internet users pct', \n        'Mobile phone subscriptions per 100',\n       'Mobile subscription pct chg', \n        'Physicians per 10k', #91\n       'Vulnerable employment %', \n        'Rural population electricity access',\n       'Population basic drinking water', \n        'Population basic sanitation',\n       'Male-female birth ratio', \n        'Youth unemployment female to male',\n       'F-M unemployment rate', \n        '% female in parliament', \n#         'infection_rate',\n#        'mortality_rate'\n]","aaeb3567":"# ****REDUCED FEATURES LIST****\n\nfeatures2 = [\n# #         'index', \n# #         'ID', \n# #         'Date', \n# #         'Confirmed', \n# #         'ConfirmedChange', \n# #         'Deaths',\n# #        'DeathsChange', \n# #         'Recovered', \n# #         'RecoveredChange', \n# #         'Latitude', \n# #         'Longitude',\n# #        'Country', \n#         '2018 HDI category', \n#         '2018 HDI', \n#         'Life expectancy at birth',\n#        'Expected years of schooling',\n#         'Mean years of schooling',\n#        'Gross national income (GNI) per capita PPP $',\n#        'GNI per capita rank minus HDI rank', \n#         '2018 HDI rank', \n# #         '1990 HDI',\n# #        '2000 HDI', \n# #         '2010 HDI', \n# #         '2013 HDI', \n# #         '2015 HDI', \n# #         '2016 HDI', \n# #         '2017 HDI',\n# #        '2018 HDI.1', \n# #         'Change in HDI rank ',\n# #        'Average annual HDI growth 1990-2000',\n# #        'Average annual HDI growth 2000-2010',\n# #        'Average annual HDI growth 2010-2018',\n# #        'Average annual HDI growth 1990-2018',\n#        'Inequality-adjusted HDI (IHDI) ', \n# #         'IHDI loss %',\n# #        'IHDI diff from HDI rank', \n#         'Coefficient of human inequality',\n#        'Inequality in life expectancy %',\n#        'Inequality-adjusted life expectancy index',\n#        'Inequality in education %', \n#         'Inequality-adjusted education index',\n#        'Inequality in income %', \n#         'Inequality-adjusted income index',\n#        '% income share of poorest 40 pct', \n#         '% income share of richest 10pct',\n       'Gini Coefficient %',                #19\n#         'GDI Overall', \n#         'HDI female', \n#         'HDI male',\n#        'Life expectancy female', \n#         'Life expectancy male',\n#        'Expected schooling female', \n#         'Expected schooling male',\n#        'Mean schooling female', \n#         'Mean schooling male',       #28\n#         'GNI per capita female',\n#        'GNI per capita male', \n#         'Gender Inequality Index',\n#        'Gender Inequality Rank', \n#         'Maternal mortality per 100,000',\n#        'Teenage maternity per 1000', \n#         'Female % of parliament',\n#        'Secondary Education rate female', \n#         'Secondary Education rate male',\n#        'Labor force participation females', \n#         'Labor force participation males',\n#        'Population millions', \n#         'Population millions 2030 estimate',\n#        'Avg annual growth 2005-2010', \n#         'Avg annual growth 2015-2020',\n#        ' Urban %', \n#         'Under age 5-millions', \n#         'Ages 15\u201364 millions',\n#        'Ages 65 and older millions', \n#         'Median age',\n#        'Young dependency rate per 100',          #49\n#         'Seniors dependency rate per 100',\n#        'fertility rate 2005-2010', \n#         'Fertility rate 2015-2020',\n#        'Infants lacking DPT vaccine',       #53\n#         'Infants lacking measles vaccine',\n#        'Infant mortality per 1000', \n#         'Under five mortality per 1000',\n#        'Female adult per 1000', \n#         'Male adult per 1000',\n#        'Noninfectious disease mortality Female per 100k',    #59\n#        'Noninfectious disease mortality male per 100k', \n#         'Malaria per 1000',\n#        'Tuberculosis per 100,000', \n#         'HIV positive %, adult',        #63\n#        'Healthy life expectancy at birth',     #64\n#         'Healthcare % of GDP',\n#        'Pop % with secondary education', \n#         'GDP billions', \n#         'GDP per capita',\n#        'GDP per capita growth',           #64\n#         'Fixed capital % of gdp',\n#        'Domestic credit provided by financial sector',\n#        'Consumer price index 2018 vs 2010', \n#         'Employment to population ratio',\n#        'Labour force participation rate',         #69\n#         'agriculture % of employment',\n#        'Services % of employment', \n#         'Unemployment %', \n#         'Under 24 unemployment %',\n#        '% Working poor at PPP$3.20 a day', \n#         'High-skill to low-skill ratio',         #75\n#        'Birth registration', \n#         'Refugees-thousands ',\n#        'Homeless per million natural disasters', \n#         'Prisoners per 100k',\n#        'Suicides per 100k female', \n#         'Suicides per 100k male',\n#        'Exports and imports %GDP', \n#         'Foreign investment inflows %GDP',\n#        'Remittances, inflows %GDP',\n#         'Net migration per 1000',\n#        'Stock of immigrants %pop', \n        'International inbound tourists thousands',   #87\n#        'Internet users pct', \n#         'Mobile phone subscriptions per 100',\n#        'Mobile subscription pct chg', \n        'Physicians per 10k',             #91\n#        'Vulnerable employment %', \n#         'Rural population electricity access',\n#        'Population basic drinking water', \n#         'Population basic sanitation',\n#        'Male-female birth ratio', \n#         'Youth unemployment female to male',\n#        'F-M unemployment rate', \n#         '% female in parliament', \n# #         'infection_rate',\n# #        'mortality_rate'\n]","6c64afea":"# set up variables\nX = jun1[features]\ny = jun1['mortality_rate']\n\n# train-test-split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n# Scale data\nss = StandardScaler()\nss.fit(X_train)\nX_train = ss.transform(X_train)\nX_test = ss.transform(X_test)\n\n# instantiate and fit Linear Regression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n# score linear Regression\nlr_cvs = cross_val_score(lr, X_train, y_train, cv=5)\nlr_train_score = lr.score(X_train, y_train)\nlr_test_score = lr.score(X_test, y_test)\nlr_preds = lr.predict(X_test)\nlr_r2 = r2_score(y_test, lr_preds)\n\n# instantiate and fit Lasso\nl_alphas = np.logspace(-3, 2, 100)\nlasso = LassoCV(\n    alphas = l_alphas,\n    cv = 5,\n    max_iter=10_000)\nlasso.fit(X_train, y_train)\n# score LASSO\nlasso_cvs = cross_val_score(lasso, X_train, y_train, cv=5)\nlasso_train_score = lasso.score(X_train, y_train)\nlasso_test_score = lasso.score(X_test, y_test)\nlasso_preds = lasso.predict(X_test)\nlasso_r2 = r2_score(y_test, lasso_preds)\n\n# svr\nsvr = SVR(C=1., epsilon = 0.1, kernel = 'rbf')\nsvr.fit(X_train, y_train)\nsvr_cv = cross_val_score(svr, X_train, y_train, cv=5)\nsvr_preds = svr.predict(X_test)\nsvr_r2 = r2_score(y_test, svr_preds)\n\nprint(f'lr cv score: {lr_cvs.mean()}')\nprint(f'lr train score: {lr_train_score}')\nprint(f'lr test score: {lr_test_score}')\nprint(f'lr r2 value: {lr_r2}')\nprint('-'*18)\nprint(f'lasso best alpha: {lasso.alpha_}')\nprint(f'lasso cv score: {lasso_cvs.mean()}')\nprint(f'lasso train score: {lasso_train_score}')\nprint(f'lasso test score: {lasso_test_score}')\nprint(f'lasso r2 value: {lasso_r2}')\nprint('-'*18)\nprint(f'svr cv score: {svr_cv.mean()}')\nprint(f'svr r2 value: {svr_r2}')","b663ad29":"# plot residual errors and observe\nlr_residuals = y_test - lr_preds\nlasso_residuals = y_test - lasso_preds\nsvr_residuals = y_test - svr_preds\nplt.scatter(lr_preds, lr_residuals, color = 'green')\nplt.scatter(lasso_preds, lasso_residuals, color = 'orange')\nplt.scatter(svr_preds, svr_residuals, color = 'blue');\n","43d6ed86":"plt.scatter(lasso_preds, lasso_residuals);","f6ad00d2":"# Examine coefficients:\nfor i in list(enumerate(lasso.coef_)):\n    print(i)","d3ae8dbf":"# look at significant coefficients:\ncoef_set = list(enumerate(lasso.coef_))\nsig_coefs = []\nfor i in lasso.coef_:\n    if abs(i) > 0.01:\n        sig_coefs.append(i)\nlen(sig_coefs)","d279a66d":"for key, val in coef_set:\n    if abs(val) > 0.01:\n        print(key)","bb5c8227":"# Function to observe features\ndef regression(df, x_var, y_var, dates):\n    # empty list for results\n    results = []\n\n    # iterate through dates\n    for date in dates:\n        data = df[df['Date'] == date]\n        x = data[[x_var]]\n        y = data[y_var]\n\n        lr = LinearRegression()\n        lr.fit(x, y)\n        score = lr.score(x, y)\n        results.append([date,score])\n    return results  ","edcb6a92":"datelist = combined['Date'].unique()\n\n# Create Arrays to run\ngini = combined[['Date', 'mortality_rate', 'Gini Coefficient %']]\ndocs = combined[['Date', 'mortality_rate', 'Physicians per 10k']]\ntour = combined[['Date', 'mortality_rate', 'International inbound tourists thousands']]\n\n# Run function and extract results\ngini_results = regression(gini, 'Gini Coefficient %', 'mortality_rate', datelist)\ndocs_results = regression(docs, 'Physicians per 10k', 'mortality_rate', datelist)\ntour_results = regression(tour, 'International inbound tourists thousands', 'mortality_rate', datelist)\n\n# Merge Dataframes\ngini_df = pd.DataFrame.from_records(gini_results)\ngini_df.columns = ['Date', 'Gini Coefficient']\ndocs_df = pd.DataFrame.from_records(docs_results)\ndocs_df.columns = ['Date', 'Physicians Per Capita']\ntour_df = pd.DataFrame.from_records(tour_results)\ntour_df.columns = ['Date', \"Int'l Inbound Tourists\"]\nfinal = gini_df.merge(docs_df, left_on='Date', right_on='Date')\nfinal = final.merge(tour_df, left_on='Date', right_on='Date')","9495bb9c":"# Plotly Express Graph:\nfig = px.line(final, x='Date', y =['Gini Coefficient','Physicians Per Capita',\"Int'l Inbound Tourists\"], labels={'variable':'2018 HDI Attributes'})\n# fig.add_trace(x=docs_df['Date'], y=docs_df['Physicians Per Capita'])\nfig.update_layout(\n    title_text = 'Global R-Squared Values Targeting COVID-19 Mortality Rates Over Time'\n)\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='R-Squared Values Against Mortality Rates')\nfig.show()","dff3379b":"### Discontinuous data is a reminder that this is reported data and not true case numbers.","53d8d40e":"### The above bubble graph did not work out as well as intended. The HDI scores by state have appeared nicely, however:\n- There is clearly a bug with bubbles beginning in the top left.\n- There is obviously some unclean data as the data points jump around in the middle. I have not taken the time to verify the unclean data points against Johns Hopkins or some other reputable source.\n- Also, some of the unclean data may simply represent staggered reporting cycles, in which case it is very real.","f1ee269a":"# Modeling:\n### Using LASSO to reduce number of features","64ebe349":"# COVID-19 Interactive Visualizations and Dynamic External Correlations\n*by Colin Simon* <br>\n*June 15, 2020* <br>\ncolinksimon@gmail.com <br>\nhttps:\/\/www.linkedin.com\/in\/colin-simon\/\n\n## Order of Production:\n1. Gather recent Bing COVID-19 data\n2. Create beautiful and interactive visualizations to understand path of virus, both globally and domestically(United States)\n3. Gather, clean, and map Human Development Index(HDI) data onto the COVID-19 dataset.\n4. Use machine learning algorithms(particularly LASSO) to reduce necessary features from HDI dataset(illuminate most predictive variables)\n5. Finally, use reduced features to establish time-scaled relationships with mortality rates by country.\n\n## Results and Conclusions:\n1. Some of the visualizations came out very well. In particular the static Bubble Charts surprised me as the fastest way to view both confirmed cases and deaths in respective regions. The interactive Bubble Chart clearly has bugs when one clicks play.\n2. The initial modeling used Scikit-Learn algorithms: Linear Regression, Ridge, LASSO, and Support Vector Regressor. These all produced atrocious results, mostly negative R-squared values, except LASSO once produced a 0.37 R-squared value, which is encouraging given that it is predicting a worldwide virus.\n3. The LASSO results allowed me to reduce the features to just three: Gini Coefficient(a measure of wealth inequality), Physicians Per Capita, and Quantity of Inbound Tourists.\n4. Visually we can see an obvious spike around May 25 in all three correlation measurements. This could be a result of increased reported deaths, or reduced testing, or it could be an increased correlation! \n5. Ultimately the graph does not reach even 0.20 R-Squared value, so we can only attribute 20% of the change in mortality rates to the Quantity of Inbound Tourists. It is also important to keep in mind these are 2018 HDI scores.\n\n#### Datasets:\n- COVID-19 Data from www.bing.com\/covid\n- Human Development Index(HDI) Data from http:\/\/hdr.undp.org\/ \n<br>\n\n#### Acknowledgements:\n- This blogpost had some excellent Plotly ideas: https:\/\/towardsdatascience.com\/python-for-data-science-a-guide-to-data-visualization-with-plotly-969a59997d0c\n- Kaggle notebook and more visualization adaptations from: https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\n<br>\n\n#### Other Notes:\n- The 2018 HDI dataset has over 200 variables. This was cut down to 104 with cleaning in Excel before importing.\n- Only countries over 1 million population were included in modeling.\n- Some countries such as Syria and North Korea had inadequate data for use in this project.\n- The HDI dataset had a variety of missing values. Many columns were dropped before being merged into this dataset.\n- I originally created a local SQL database using Postgres and PGAdmin4, pulled the Bing data into the local server, then queried it into a Jupyter Notebook. I found downloading it straight to a .csv file far easier, but it was a great exercise.\n- Ultimately I found Plotly Express to be prettier and more effective than Matplotlib, Seaborn, or Bokeh.\n- I AM NOT A MEDICAL PROFESSIONAL. This notebook is intended as an exercise.\n- Some of the Bing data is not particularly clean; I have not checked it all against Johns Hopkins or some other reputable source. Also, some of this could be due to messy\/inconsistent reporting.","7d7c9646":"- This does show us that the LASSO residuals are more accurate. \n- The SVR(Support Vector Regressor) residuals look quite odd in that vertical alignment. \n- Linear Regression residuals clearly have some sort of negative correlation.","7ee6da2c":"Clean features","623c53e1":"# Cleaning:","08be2e60":"## Import packages and libraries:","1404373b":"Only 3 Features have coefficients over 0.01.","17d86759":"# Plotly: US Interactive Maps","e9d4d370":"### Features List (MINIMIZED):","b5a26c75":"Create viewer tool to explore data:","dd3767ce":"# Final use of extracted features:","f9830078":"Select Dates:","ee08750e":"There appears to be no linear relationship with the LASSO model predictions, so we'll dig into the extracted features.","389f7126":"These numbers are the positions in the features list that we'll use below.","53943b80":"> # Human Development Index (HDI)\n\n> The HDI dataset combines health, education, and standard-of-living measurements to provide an overall quantitative metric for countries around the earth. Here we will merge the data and explore its relationship with the Bing COVID dataset.\n\n> Gather HDI Data:","a10d2266":"# Plotly: World Data","30f221de":"## Import Data","205b105e":"# Merge datasets:","96a18b65":"### The below are the indexes for the features I think will work!!!","83fcd815":"### Set up USA subset:","c1ad5899":"Statelist (hidden)","9ae64865":"## Static Bubble Graphs:","6df4d9d5":"# Final Plotly Graph\n\n**The below graph charts three selected Human Development Index(HDI) variables and their relationships with COVID-19 mortality rates over time.**\n<br>\n* Only countries with populations of at least 1 million people were included\n* Countries have not been weighted by population or other means.\n","f303f1a5":"### Set up World Subset:","39ebc787":"These scores may look horrible, but this is merely for use in feature extraction.","5e0dce6c":"#### The deep blue and orange\/red in the above heatmap suggests a high amount of multicollinearity between variables.","29a90e99":"## Results and Conclusions:\n1. Some of the visualizations came out very well. In particular the Bubble Charts surprised me as the fastest way to view both confirmed cases and deaths in respective regions.\n2. The initial modeling used Scikit-Learn algorithms: Linear Regression, Ridge, LASSO, and Support Vector Regressor. These all produced atrocious results, mostly negative R-squared values, except LASSO once produced a 0.37 R-squared value, which is encouraging given that it is predicting a worldwide virus.\n3. The LASSO results allowed me to reduce the features to just three: Gini Coefficient(a measure of wealth inequality), Physicians Per Capita, and Quantity of Inbound Tourists.\n4. Visually we can see an obvious spike around May 25 in all three correlation measurements. This could be a result of increased reported deaths, or reduced testing, or it could be an increased correlation! \n5. Ultimately the graph does not reach even 0.20 R-Squared value, so we can only attribute 20% of the change in mortality rates to the Quantity of Inbound Tourists. It is also important to keep in mind these are 2018 HDI scores.","5dbe68bc":"# Prepare to Merge HDI and World datasets","225f2d44":"### A few countries lack accurate data. Additionally, border disputes and new or currently-forming countries also create imperfections on these maps."}}