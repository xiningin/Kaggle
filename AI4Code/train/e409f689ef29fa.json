{"cell_type":{"1bff14c9":"code","9ac69485":"code","b7c1312d":"code","43dbfb14":"code","4515b396":"code","5b671580":"code","d2349677":"code","cce4d704":"code","a26e28a0":"code","238b702c":"code","e671639b":"code","6d96dda4":"code","061d241e":"code","1249d9c4":"code","25768614":"code","e19dbf93":"code","e04f645b":"code","93dcff35":"code","bf48cd47":"code","4def695c":"code","6dd80f7a":"code","eb65939e":"code","71e4872b":"markdown","edd7eb11":"markdown","a1a215a9":"markdown","e5cacd97":"markdown","a62c9ac8":"markdown","aaa879cf":"markdown","3cdd0e7f":"markdown","e56e09ab":"markdown","9b5570d4":"markdown","c387d820":"markdown","034c7ea0":"markdown","a5eaf1fa":"markdown","ee5d77bd":"markdown","df01e4ac":"markdown","52ddc096":"markdown","51a6bddb":"markdown","dc61dbd3":"markdown","2d2841c3":"markdown"},"source":{"1bff14c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\nimport os\nprint(os.listdir(\"..\/input\"))\n#loading additional dependencies \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom math import sqrt\n#seed\nimport random\nrandom.seed(30) #seed for reproducibility\n#ml \nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\n#viz\nimport matplotlib.pyplot as plt #plots and graphs\nimport seaborn as sns #additional functionality and visualization\nplt.style.use('fivethirtyeight')#set style\n%matplotlib inline\n\n\n","9ac69485":"#load data and create dataframe \ntrain_data = pd.read_csv('..\/input\/train_V2.csv')\n#summarize information \nprint(\"database shape:\",train_data.shape)\nbefore = train_data.shape\nprint(\"missing data?\",train_data.isnull().values.any())\nprint(\"deleting missing values...\")# dataframe has missing values, we will drop them because of time constraints. Usually not desirable since missing information can actually provide with important insights.\ntrain_data = train_data.dropna()\nprint(\"missing data?\",train_data.isnull().values.any())\nafter = train_data.shape\n#print(\"using random sample (1% of data) to speed up computation...\")\n#train_data = train_data.sample(n=None, frac=0.01, replace=False, weights=None, random_state=None, axis=None)\nprint(\"database shape:\",train_data.shape)\nprint(\"Dropped rows:\",before[0]-after[0])\ntrain_data.head()","b7c1312d":"train_data.describe()","43dbfb14":"train_data[\"Id\"].describe()","4515b396":"#we will drop winning placement and all features that do not represent player behaviour\ncluster_data = train_data.iloc[:,3:-2]\ncluster_data= cluster_data.drop([\"matchType\",\"rankPoints\",\"maxPlace\",\"killPlace\",\n                                \"killPoints\",\"matchDuration\",\"numGroups\"],axis=1)\nprint(\"Database shape: \",cluster_data.shape)\ncluster_data.head()","5b671580":"#developing a heatmap with example from https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\ncorr = cluster_data.corr() # compute correlation matrix\nf, ax = plt.subplots(figsize=(16,16)) #set size\ncmap = sns.diverging_palette(220,10,as_cmap=True) #define a custom color palette\nsns.heatmap(corr,annot=False,cmap=cmap,square=True,linewidths=0.5) #draw graph\nplt.show()","d2349677":"#top n correlations\nn=10\ndef get_redundant_pairs(df):\n    '''Get diagonal and lower triangular pairs of correlation matrix'''\n    pairs_to_drop = set()\n    cols = df.columns\n    for i in range(0, df.shape[1]):\n        for j in range(0, i+1):\n            pairs_to_drop.add((cols[i], cols[j]))\n    return pairs_to_drop\n\ndef get_top_abs_correlations(df, n=5):\n    au_corr = df.corr().abs().unstack()\n    labels_to_drop = get_redundant_pairs(df)\n    au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)\n    return au_corr[0:n]\n\nprint(get_top_abs_correlations(corr,n))","cce4d704":"#create footDistance feature and drop highly correlated features\ncluster_data['footDistance'] = cluster_data['walkDistance'] + cluster_data['swimDistance']\ncluster_data= cluster_data.drop([\"kills\",\"killStreaks\",\"DBNOs\",\"walkDistance\",\"swimDistance\"],axis=1)\n\n#developing a heatmap with example from https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\ncorr = cluster_data.corr() # compute correlation matrix\nf, ax = plt.subplots(figsize=(16,16)) #set size\ncmap = sns.diverging_palette(220,10,as_cmap=True) #define a custom color palette\nsns.heatmap(corr,annot=False,cmap=cmap,square=True,linewidths=0.5) #draw graph\nplt.show()\n","a26e28a0":"#we also standardize the data, clustering algorithms are sensitive to scale for measuring distance\nstandardized = preprocessing.scale(cluster_data)\n#building the df again\ndf_labels = cluster_data.iloc[:0].columns\nst_cluster_data = pd.DataFrame(standardized, columns=df_labels)\nst_cluster_data.head()","238b702c":"#plot distribution\nplt.rcParams['figure.figsize'] = (16, 9)\nplot_1 = sns.distplot(st_cluster_data[\"damageDealt\"], kde_kws={\"label\": \"damageDealt\"})\nplot_2 = sns.distplot(st_cluster_data[\"assists\"], kde_kws={\"label\": \"assists\"})\nplot_3 = sns.distplot(st_cluster_data[\"boosts\"], kde_kws={\"label\": \"boosts\"})\nplt.xlabel('Player actions distribution')","e671639b":"#Using the elbow method to find the optimum number of clusters\nwcss = []\nfor i in range(1,11):\n    km=KMeans(n_clusters=i,init='k-means++', max_iter=300, n_init=10, random_state=30)\n    km.fit(st_cluster_data)\n    wcss.append(km.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')\nplt.show()","6d96dda4":"# Fitting K-Means to the dataset\nnum_clusters = 4\nkmeans = KMeans(n_clusters=num_clusters,\n                init='k-means++',\n                max_iter=1000,\n                n_init=20,\n                random_state=30)\ny_kmeans = kmeans.fit_predict(st_cluster_data)","061d241e":"#we can change the beginning of  the cluster numbering to 1 instead of 0 (optional)\ny_kmeans1=y_kmeans\ny_kmeans1=y_kmeans+1\n# New Dataframe called cluster\ncluster = pd.DataFrame(y_kmeans1)\n# Adding cluster to the Dataset1\ncluster_data['cluster'] = cluster\n#Mean of clusters\nkmeans_mean_cluster = pd.DataFrame(round(cluster_data.groupby('cluster').mean(),4))\n#trasnponse for easier visualization\nkmeans_mean_cluster","1249d9c4":"for i in range(4):\n    obs = cluster_data[\"cluster\"].where(cluster_data[\"cluster\"]==i+1).count()\n    percentage = round(cluster_data[\"cluster\"].where(cluster_data[\"cluster\"]==i+1).count()\/cluster_data[\"cluster\"].count()*100,2)\n    print(\"Cluster {} has\".format(i+1),obs, \"players, or {}%\".format(percentage))","25768614":"#we standardize the data to visualize it in the same scale\nradar_data = preprocessing.scale(kmeans_mean_cluster)\nradar_data = pd.DataFrame(radar_data)\nradar_data","e19dbf93":"#https:\/\/www.kaggle.com\/typewind\/draw-a-radar-chart-with-python-in-a-simple-way\nlabels = np.array(cluster_data.columns.values)\nlabels = labels[:-1]\nstats = radar_data.loc[0].values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats=np.concatenate((stats,[stats[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\n#plot the figure\nfig=plt.figure()\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats, 'o-', linewidth=2)\nax.fill(angles, stats, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title(\"Cluster 1: Snipers\")\nax.grid(True)","e04f645b":"#https:\/\/www.kaggle.com\/typewind\/draw-a-radar-chart-with-python-in-a-simple-way\nlabels = np.array(cluster_data.columns.values)\nlabels = labels[:-1]\nstats = radar_data.loc[1].values\n\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats=np.concatenate((stats,[stats[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\n#plot the figure\nfig=plt.figure()\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats, 'o-', linewidth=2)\nax.fill(angles, stats, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title(\"Cluster 2: Roamers\")\nax.grid(True)","93dcff35":"#https:\/\/www.kaggle.com\/typewind\/draw-a-radar-chart-with-python-in-a-simple-way\nlabels = np.array(cluster_data.columns.values)\nlabels = labels[:-1]\nstats = radar_data.loc[2].values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats=np.concatenate((stats,[stats[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\n#plot the figure\nfig=plt.figure()\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats, 'o-', linewidth=2)\nax.fill(angles, stats, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title(\"Cluster 3: Aggressive solo\")\nax.grid(True)","bf48cd47":"#https:\/\/www.kaggle.com\/typewind\/draw-a-radar-chart-with-python-in-a-simple-way\nlabels = np.array(cluster_data.columns.values)\nlabels = labels[:-1]\nstats = radar_data.loc[3].values\n\nangles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n# close the plot\nstats=np.concatenate((stats,[stats[0]]))\nangles=np.concatenate((angles,[angles[0]]))\n\n#plot the figure\nfig=plt.figure()\nax = fig.add_subplot(111, polar=True)\nax.plot(angles, stats, 'o-', linewidth=2)\nax.fill(angles, stats, alpha=0.25)\nax.set_thetagrids(angles * 180\/np.pi, labels)\nax.set_title(\"Cluster 4: Vehicle team riders\")\nax.grid(True)","4def695c":"#we use the standardized cluster data and reduce to three dimensions \npca = PCA(n_components=2)\npca_result = pca.fit_transform(st_cluster_data)\n\n#https:\/\/github.com\/llSourcell\/spike_sorting\n# Plot the 1st principal component aginst the 2nd and use the 3rd for color\nfig, ax = plt.subplots(figsize=(16, 9)) \nax.scatter(pca_result[:, 0], pca_result[:, 1])\nax.set_xlabel('1st principal component', fontsize=20)\nax.set_ylabel('2nd principal component', fontsize=20)\nax.set_title('Principal Component Analysis', fontsize=23)\n\nfig.subplots_adjust(wspace=0.1, hspace=0.1)\nplt.show()","6dd80f7a":"# Fitting K-Means to the dataset\nnum_clusters = 4\nkmeans = KMeans(n_clusters=num_clusters,\n                init='k-means++',\n                max_iter=1000,\n                n_init=20,\n                random_state=30)\ny_kmeans_pca = kmeans.fit_predict(pca_result)\ny_kmeans_pca=y_kmeans_pca+1","eb65939e":"# Plot the result\nplt.scatter(pca_result[:, 0], pca_result[:, 1],\n           c=y_kmeans_pca, edgecolor='none', cmap=plt.get_cmap('Spectral',4))\nplt.xlabel('1st principal component', fontsize=20)\nplt.ylabel('2nd principal component', fontsize=20)\nplt.title('Data Clusters in 2D', fontsize=23)\nplt.colorbar();","71e4872b":"As mentioned earlier, the data is highly skewed. This is visually represented in the following graph where we plot the distribution of some player actions. ","edd7eb11":"**Cluster 4** shows players with relatively higher ride distance, road kills, vehicle destroys and team killls. Seemingly showing the preference to use vehicles in teams. ","a1a215a9":"## 1. Database Description\n\nIn a PUBG game, up to 100 players start in each match (matchId). Players can be on teams (groupId) which get ranked at the end of the game (winPlacePerc) based on how many other teams are still alive when they are eliminated. In game, players can pick up different munitions, revive downed-but-not-out (knocked) teammates, drive vehicles, swim, run, shoot, and experience all of the consequences -- such as falling too far or running themselves over and eliminating themselves.\nYou are provided with a large number of anonymized PUBG game stats, formatted so that each row contains one player's post-game stats. The data comes from matches of all types: solos, duos, squads, and custom; there is no guarantee of there being 100 players per match, nor at most 4 player per group.\n\n**Data fields**\n* DBNOs - Number of enemy players knocked.\n* assists - Number of enemy players this player damaged that were killed by teammates.\n* boosts - Number of boost items used.\n* damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n* headshotKills - Number of enemy players killed with headshots.\n* heals - Number of healing items used.\n* Id - Player\u2019s Id\n* killPlace - Ranking in match of number of enemy players killed.\n* killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* killStreaks - Max number of enemy players killed in a short amount of time.\n* kills - Number of enemy players killed.\n* longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* matchDuration - Duration of match in seconds.\n* matchId - ID to identify match. There are no matches that are in both the training and testing set.\n* matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* revives - Number of times this player revived teammates.\n* rideDistance - Total distance traveled in vehicles measured in meters.\n* roadKills - Number of kills while in a vehicle.\n* swimDistance - Total distance traveled by swimming measured in meters.\n* teamKills - Number of times this player killed a teammate.\n* vehicleDestroys - Number of vehicles destroyed.\n* walkDistance - Total distance traveled on foot measured in meters.\n* weaponsAcquired - Number of weapons picked up.\n* winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* numGroups - Number of groups we have data for in the match.\n* maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","e5cacd97":"Player actions like assists, boosts, heals, kills have hight standard deviations relative to their mean, indicating a degree of skewness towards zero. The data implies most players perform less actions in a game, while a small percentage seem to perform many actions duing a game. ","a62c9ac8":"We are interested in building player profiles based on the data, regardless of their winning placement. For now, we are droping all features that do not represent an action or behaviour.","aaa879cf":"* **Cluster 1** represents shows players with seemingly higher accuracy and distance kills than the rest. Low walking distance and items pickup suggests that these players remain more static than their counterparts. \n*Note: The input code for the rest of the clusters has been hidden from the notebook for cleanliness.*","3cdd0e7f":"* **Cluster 2** shows players that on average collect more weapons, have high on foot distance travelled. They seem to be more passive in their gameplay, perhaps roaming from isolated points instead of droping into the action right away. The relaitvely high use of healing items suggests defensive play styles. ","e56e09ab":"The previous table shows the mean of the attributes by cluster, we can visualize the data in separate radar graphs. ","9b5570d4":"### 3. Clustering\nClustering is useful for extracting information from data to create the profiles. Ideally, it will group players based on their similarity of actions, making it possible to infer different play styles. ","c387d820":"> # PUBG: Creating player profiles\n#### by Kristofer S\u00f6derstr\u00f6m\n___\n*This notebook attempts to create player profiles based on clustering \nanalysis. Based on [these](https:\/\/towardsdatascience.com\/clustering-algorithms-for-customer-segmentation-af637c6830ac) [notebooks](https:\/\/medium.com\/datadriveninvestor\/unsupervised-learning-with-python-k-means-and-hierarchical-clustering-f36ceeec919c)\n## Contents\n1. Database Description\n1. Exploratory Analysis\n1. Clustering \n","034c7ea0":"**Cluster 3** shows players with relatively high offensive solo actions. These seemingly aggressive style players seem to be the most effective at dealing damage. ","a5eaf1fa":"The plot allows us to see our assigned clusters in a 2 dimensional space.","ee5d77bd":"The plot shows the sum of squared distances of samples to their closest cluster center as we increase the number of clusters. We can take into account the reduction of variance for the selection of clusters. However, there is some degree of subjectivity based on a prioir expectations. For now, we will choose 4 as the number of clusters. \n","df01e4ac":"A **heatmap** is a good way to start visualization. It will allow a bird's-eye view of the dataset and identifying correlation between features. We can also list out the highest correlated pairs of features.  \n* Player actions related to offensive actions such as: damage dealt, kills, kill streaks, headshot kills and knockouts are all highly correlated (>85%) with each other. It might be a good idea to select only one or two of these features for parsimony. \n* We will create one feature out of the sum walkDistance and swimDistance features, called footDistance, to better represent movement without a vehicle","52ddc096":"According to the database description, Id refers to the individual player. According to the description below, there are as many unique players as the size of the database, around 4,6 million.","51a6bddb":"Another way to visualize the cluster data is to reduce the dimensionality and plot the data with the number of clusters we have defined earlier. First we visualize the data in 2D. ","dc61dbd3":"It is worth noting that cluster size varies greatly. With over 60% of players belonging to the first cluster, and the first two clusters representing almost 90% of recollected data. Cluster 4 represents less than 1% of the data.","2d2841c3":"## 2. Exploratory Analysis\n* There is a mix of object, interger, and float data.\n* Around 4.5 million rows, Id (player) in matchID\n* 29 columns \n* Most data is numerical. Id, groupId, matchId and matchType are object data"}}