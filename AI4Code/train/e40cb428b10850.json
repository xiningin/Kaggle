{"cell_type":{"5a122e71":"code","2666052e":"code","c2b15b14":"code","c06fad2d":"code","c926b70f":"code","3dc93876":"code","98edca71":"code","a74096d8":"code","8615e044":"code","d5148b09":"code","de62753b":"code","4fef31c0":"code","e9efcb5b":"code","9bf28bd4":"code","255bac7b":"code","2976041f":"code","d4359a1e":"code","2561e28c":"code","f872b674":"code","3a5fd605":"code","d6a490f1":"code","6121bf33":"code","bc85b7d9":"code","5ebe4ac2":"code","5f4b12bb":"code","634f3807":"code","895369b3":"code","087e7246":"code","022f0c6f":"code","989b0862":"code","9e4e6923":"code","540d0436":"code","b6c552a7":"code","913bf805":"code","b7ee0eb9":"code","9ec0a4cf":"code","fb664c33":"code","b86180c0":"code","37f90916":"code","2d04f45e":"code","ca83099f":"code","22ae1dd1":"code","8073ffa8":"code","694f24cd":"code","f8325b17":"code","52b1f6d8":"code","7d10dcf4":"code","520c1d4a":"code","cb1df6fe":"code","ed0518d8":"code","0b435cad":"code","a04f554c":"code","4fc1409a":"code","f4d35f83":"markdown","6a5502b3":"markdown","e2655df5":"markdown","1aa43708":"markdown","9811614a":"markdown","fba829da":"markdown","bd933aa2":"markdown","6fad9541":"markdown","2c2af28c":"markdown","bf4cc4a4":"markdown","8b01d10b":"markdown","1277e72a":"markdown","b60b8df7":"markdown","99e5f02a":"markdown","29aeb71e":"markdown","56a67d91":"markdown","1908c68f":"markdown","8e87848c":"markdown","938671b4":"markdown","a013ebd3":"markdown","257194c3":"markdown","8c10ab92":"markdown","3a84d74f":"markdown","348ea0df":"markdown","fb285ea5":"markdown","528a3e0e":"markdown","be45c89b":"markdown","391656c6":"markdown","5f563071":"markdown","3a9f39d3":"markdown","d8d5e45b":"markdown","50974691":"markdown","bc9f9e8b":"markdown","b0ff6957":"markdown"},"source":{"5a122e71":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns ","2666052e":"filepath = '..\/input\/pokemon\/pokemons dataset.csv'","c2b15b14":"pokemon_dataset = pd.read_csv(filepath, encoding = 'latin-1')\nnp.random.seed(0)","c06fad2d":"pokemon_dataset","c926b70f":"pokemon_dataset.dtypes","3dc93876":"count_missing = pokemon_dataset.isnull().sum()\ncount_missing","98edca71":"new_pokemon_dataset = pokemon_dataset[(pokemon_dataset != 0).all(1)]","a74096d8":"new_pokemon_dataset","8615e044":"new_pokemon_dataset.dtypes","d5148b09":"primary_type = pd.DataFrame(new_pokemon_dataset.groupby(['Primary Type']).sum())\nprimary_type","de62753b":"secondary_type = pd.DataFrame(new_pokemon_dataset.groupby(['Secondary type']).sum())\nsecondary_type","4fef31c0":"plt.figure(figsize=(20,10))\nx = [primary_type for primary_type, df in new_pokemon_dataset.groupby(['Primary Type'])]\nplt.bar(x, new_pokemon_dataset.groupby(['Primary Type']).sum()['Total'])\nplt.xticks(x, rotation='vertical', size=20)\nplt.yticks(size=20)\nplt.xlabel('Types of primary pokemon', size=20)\nplt.ylabel('Total of primary pokemon score', size=20)\nplt.show()","e9efcb5b":"plt.figure(figsize=(20,10))\nx1 = [secondary_type for secondary_type, df in new_pokemon_dataset.groupby(['Secondary type'])]\nplt.bar(x1, new_pokemon_dataset.groupby(['Secondary type']).sum()['Total'], color='g')\nplt.xticks(x1, rotation='vertical', size=20)\nplt.yticks(size=20)\nplt.xlabel('Types of secondary pokemon', size=20)\nplt.ylabel('Total of secondary pokemon score', size=20)\nplt.show()","9bf28bd4":"prim_secon = pd.concat([primary_type, secondary_type], axis=1)","255bac7b":"prim_secon","2976041f":"plt.figure(figsize=(30,20))\nprim_secon_corr = prim_secon.corr()\nsns.heatmap(prim_secon_corr, annot=True)","d4359a1e":"prim_secon_total = pd.DataFrame(primary_type['Total'] + secondary_type['Total'])","2561e28c":"prim_secon_total","f872b674":"plt.figure(figsize=(20,10))\nx2 = [prim_secon_total for prim_secon_total, df in prim_secon_total.groupby(['Primary Type'])]\nplt.bar(x2, prim_secon_total.groupby(['Primary Type']).sum()['Total'], color='olive')\nplt.xticks(x2, rotation='vertical', size=20)\nplt.yticks(size=20)\nplt.xlabel('Types of pokemons', size=20)\nplt.ylabel('Total of pokemon stat score', size=20)\nplt.show()","3a5fd605":"primary_type.sum()","d6a490f1":"secondary_type.sum()","6121bf33":"primary_type","bc85b7d9":"secondary_type","5ebe4ac2":"combination_1 = pd.DataFrame(primary_type['Attack'] + primary_type['Speed'])","5f4b12bb":"combination_1['Atk_spd'] = pd.DataFrame(primary_type['Attack'] + primary_type['Speed'])\ncombination_1","634f3807":"combination_2 = pd.DataFrame(primary_type['Defense'] + primary_type['HP'])","895369b3":"combination_2['Def_hp'] = pd.DataFrame(primary_type['Defense'] + primary_type['HP'])\ncombination_2","087e7246":"prim_type = primary_type.groupby('Primary Type')\nprim_total = primary_type['Total']\n\nkeys = [pair for pair, df in prim_type]\nplt.bar(keys, prim_total)\nplt.xticks(keys, rotation='vertical', size=8)\n\ntotal_stat = combination_1.groupby('Primary Type').mean()['Atk_spd']\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.bar(keys, prim_total, color='g')\nax2.plot(keys, total_stat, color='b')\nax1.set_xlabel('Primary type pokemon')\nax1.set_ylabel('Total of primary type', color='orange')\nax2.set_ylabel('Attack and speed', color='b')\nax1.set_xticklabels(keys, rotation='vertical', size=8)\nfig.show()","022f0c6f":"prim_type_2 = primary_type.groupby('Primary Type')\nprim_total_2 = primary_type['Total']\n\nkeys_2 = [pair for pair, df in prim_type_2]\nplt.bar(keys_2, prim_total_2)\nplt.xticks(keys_2, rotation='vertical', size=8)\n\ntotal_stat_2 = combination_2.groupby('Primary Type').mean()['Def_hp']\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.bar(keys_2, prim_total_2, color='orange')\nax2.plot(keys_2, total_stat_2, color='black')\nax1.set_xlabel('Primary type pokemon')\nax1.set_ylabel('Total of primary type', color='brown')\nax2.set_ylabel('Defense and HP', color='b')\nax1.set_xticklabels(keys, rotation='vertical', size=8)\nfig.show()","989b0862":"combination_1_1 = pd.DataFrame(secondary_type['Attack'] + secondary_type['Speed'])","9e4e6923":"combination_1_1['atl_spd'] = pd.DataFrame(secondary_type['Attack'] + secondary_type['Speed'])\ncombination_1_1","540d0436":"combination_1_2 = pd.DataFrame(secondary_type['Defense'] + secondary_type['HP'])","b6c552a7":"combination_1_2['def_hp'] = pd.DataFrame(secondary_type['Defense'] + secondary_type['HP'])\ncombination_1_2\n\n#Ignore the column '0'","913bf805":"sec_type = secondary_type.groupby('Secondary type')\nsec_total = secondary_type['Total']\n\nkeys_3 = [pair for pair, df in sec_type]\nplt.bar(keys_3, sec_total)\nplt.xticks(keys_3, rotation='vertical', size=8)\n\ntotal_stat_3 = combination_1_1.groupby('Secondary type').mean()['atl_spd']\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.bar(keys_3, sec_total, color='purple')\nax2.plot(keys_3, total_stat_3, color='black')\nax1.set_xlabel('secondary type pokemon')\nax1.set_ylabel('Total of secondary type', color='orange')\nax2.set_ylabel('Attack and speed', color='b')\nax1.set_xticklabels(keys_3, rotation='vertical', size=8)\nfig.show()","b7ee0eb9":"sec_type_2 = secondary_type.groupby('Secondary type')\nsec_total_2 = secondary_type['Total']\n\nkeys_4 = [pair for pair, df in sec_type_2]\nplt.bar(keys_4, sec_total_2)\nplt.xticks(keys_4, rotation='vertical', size=8)\n\ntotal_stat_4 = combination_1_2.groupby('Secondary type').mean()['def_hp']\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.bar(keys_4, sec_total_2, color='maroon')\nax2.plot(keys_4, total_stat_4, color='black')\nax1.set_xlabel('secondary type pokemon')\nax1.set_ylabel('Total of secondary type', color='brown')\nax2.set_ylabel('Defense and HP', color='b')\nax1.set_xticklabels(keys_4, rotation='vertical', size=8)\nfig.show()","9ec0a4cf":"new_pokemon_dataset","fb664c33":"new_pokemon_dataset['Secondary type'] = new_pokemon_dataset['Secondary type'].fillna(0)","b86180c0":"new_pokemon_dataset","37f90916":"drop_zero = (new_pokemon_dataset != 0).all(axis=1)","2d04f45e":"clean_dataset = new_pokemon_dataset.loc[drop_zero]\nprint(clean_dataset)","ca83099f":"pd.DataFrame(clean_dataset)","22ae1dd1":"primary_choice = pd.DataFrame(combination_1['Atk_spd'] - combination_2['Def_hp'])\nprimary_type_choice = pd.DataFrame(primary_choice)\nprimary_type_choice['Marginal Stat'] = primary_type_choice","8073ffa8":"primary_type_choice","694f24cd":"secondary_choice = pd.DataFrame(combination_1_1['atl_spd'] - combination_1_2['def_hp'])\nsecondary_type_choice = pd.DataFrame(secondary_choice)\nsecondary_type_choice['marginal stat'] = secondary_type_choice","f8325b17":"secondary_type_choice","52b1f6d8":"have_this = primary_type_choice['Marginal Stat'] + secondary_type_choice['marginal stat']\nhave_this","7d10dcf4":"choice_set_pokemon = pd.DataFrame(data=have_this)","520c1d4a":"choice_set_pokemon","cb1df6fe":"final_pokemon = pd.DataFrame(choice_set_pokemon.rename(columns={0 : 'Scores'}, inplace=False))","ed0518d8":"final_pokemon","0b435cad":"final_pokemon['Should I get this'] = np.where(final_pokemon['Scores'] > 0, True, False)","a04f554c":"final_pokemon","4fc1409a":"final_pokemon.to_csv('pokemon_data.csv')","f4d35f83":"#### For this, we will have to merge the stats of both primary and secondary pokemon dataframe that we created and based on the total, we will get the best pokemon.","6a5502b3":"#### here we can see, the column 'Secondary type' has 492 rows of null values so instead of getting rid of the entire column, we will only delete the rows that has the null values and create a new variable to red the cleaned dataset.","e2655df5":"#### So from here as well we can make a number of interpretation:\n### Graph 1:\n#### 1. Fighting and flying's total power is depended upon their attack and speed level.\n#### 2. Dark is the only one that is below its spike level that means its power is not depended upon its attack and speed.\n#### 3. Dragon, fairy, ground, poison, psychic and steel are all way above their spike range of attack which means apart from attack                  and speed, their power is also depended upon something else, perhaps, defense or hp.","1aa43708":"#### So from this we can see \"primary type\" is better than the \"secondary type\", we dont have to plot it as there is a great difference.","9811614a":"## 1st task : Find out the best primary and attack type pokemon.","fba829da":"# Analysis and visualization","bd933aa2":"# Data cleaning","6fad9541":"### we can observe a number of things here:\n#### 1. Water type is the only one relying on attack and speed.\n#### 2. grass and pyschic are having more power than having their attack which means they have other attribute that is making them                more stronger\n#### 3. Dark,dragon, electric and fighting despite being in the spike region have low power which means their main power is relied on              some other attribute than attack and speed\n\n\n### We will do the same for the next combination which is 'combination_2'","2c2af28c":"### Now, at the end we will create a new column where we will put a conditional statement that whether we should get this type of particular pokemon type or not and then export the file into a csv.","bf4cc4a4":"## 2nd task: Which is the best overall pokemon? ","8b01d10b":"# .....................................................................................\n# ...........................................................................................................................................\n# ...........................................................................................................................................","1277e72a":"#### Here we can see the best primary type pokemon is the \"Water type\" and the worst one is the \"Flying type\". (I dont think charizard is bad is it?)","b60b8df7":"#### Now, we will add a new column 'Have_this' with the statement 'Yes' or 'No' whether to get this type of pokemon or not.\n\n#### we will do that by taking into the analysis from the primary and secondary type dataframe that we created earlier.","99e5f02a":"#### here we can see that the best secondary type pokemon is \"Flying\" (justice to charizard), and the worst one to get is \"Bug\" (wait scizor is bad?) ","29aeb71e":"### Combinations\n\n### 1. Attack & speed\n\n### 2. defense & hp\n\n**You can make your own combinations. This is my own preference so let's see how they turn out**","56a67d91":"### ................................................................................................................................","1908c68f":"### First we will load all the necessary packages and modules to be needed and read the dataset.","8e87848c":"### ................................................................................................................................................................","938671b4":"### Graph 2:\n#### 1. Faiy, fighting and flying are in the same power level as their attack which means their main power up is based on their defense              and HP.\n#### 2. Dragon, ground and steel are all below their power level of defense and HP which means Defense and HP are not their                        strongest form of power.\n","a013ebd3":"### ............................................................................................","257194c3":"### So this is the dataframe we need to export as a csv or xlsx file but first we need to add a column to get which kind of pokemon we need and rename that column '0'","8c10ab92":"## 4th task: why a certain type is better than the other?","3a84d74f":"#### Okay it looks fine so next what we will do is check for null values and get rid of them.","348ea0df":"#### it may show that we still have null values but they are actually removed now which you will see when we move onto analysis and visualization.\n\n#### We will ignore 'Name 2' here as it is something we shouldn't be focused on","fb285ea5":"### Now lets add a column on the existing dataset to signify whether we want to have this pokemon or not.","528a3e0e":"#### for this , we will have to sum up both 'primary_type' and 'secondary_type' dataframes and plot them to see which ones better.","be45c89b":"#### So now we can see that, the best pokemon we can get is \"Water type\", followed by \"Psychic\" and then \"Flying\" whereas, the worst one we can get is \"Ice\" type (Can't remember any).","391656c6":"#### First we will get rid of the rows in the dataset having NaN values by converting them to '0' and the deleting the rows with the values 0.","5f563071":"#### We will check if the datatypes of all the columns are accurate or not because it may have numeric values in the dataset but they can be set as object or string which we dont want.","3a9f39d3":"## 3rd task: Which is the best, primary type pokemon or secondary type pokemon?","d8d5e45b":"### and there we go, so this shows which ones we should get and which ones we should not\n### I'm not sure if this is suffice but hope it does the trick for you all\n### Now lets export it","50974691":"#### This was optional.","bc9f9e8b":"#### for this, we will separate the stats of primary and secondary type pokemons into two different dataset\/dataframe and visualize them.","b0ff6957":"#### For this, we will have to create a barchart based on the total and, based on the spike of attack, defense, hp and speed, we will get an idea that why a certain type is better than the other."}}