{"cell_type":{"6e1897a0":"code","92966ab5":"code","4d727d1f":"code","a502b4e6":"code","b26f279a":"code","d732bdae":"code","2b10e204":"code","fe47bd95":"code","945b08cc":"code","d01484f6":"code","f04c88ad":"code","d8e02695":"code","52665877":"code","af3eeace":"code","d1b9e916":"code","77e59d39":"code","be2af3c0":"code","e581476d":"code","22530bb1":"code","e7d7999f":"code","2db73d92":"code","054a5e57":"code","e6462bfb":"code","2aa2ef24":"code","88970803":"code","1f8a7dcc":"code","c88f02b1":"code","9029e628":"code","4a3dfc7d":"code","d7d6b77c":"markdown","be2c563b":"markdown","b18df189":"markdown","4f8eb91c":"markdown"},"source":{"6e1897a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nfrom scipy.stats import skew\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n%config InlineBackend.figure_format = 'retina' #set 'png' here when working on notebook\n%matplotlib inline","92966ab5":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","4d727d1f":"train.head()","a502b4e6":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","b26f279a":"plt.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","d732bdae":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","2b10e204":"all_data = pd.get_dummies(all_data)\n","fe47bd95":"all_data = all_data.fillna(all_data.mean())\n","945b08cc":"X_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","d01484f6":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","f04c88ad":"model_ridge = Ridge()","d8e02695":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","52665877":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation - Just Do It\")\n","af3eeace":"cv_ridge.min()","d1b9e916":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)\n","77e59d39":"rmse_cv(model_lasso).mean()\n","be2af3c0":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)\n","e581476d":"print(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")\n","22530bb1":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","e7d7999f":"plt.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\n","2db73d92":"plt.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","054a5e57":"import xgboost as xgb\n","e6462bfb":"dtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)","2aa2ef24":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()\n","88970803":"model_xgb = xgb.XGBRegressor(n_estimators=360, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\nmodel_xgb.fit(X_train, y)","1f8a7dcc":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","c88f02b1":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","9029e628":"preds = 0.7*lasso_preds + 0.3*xgb_preds\n","4a3dfc7d":"solution = pd.DataFrame({\"id\":test.Id, \"SalePrice\":preds})\nsolution.to_csv(\"ridge_sol.csv\", index = False)","d7d6b77c":"# Preprocessing","be2c563b":"# Reading Data","b18df189":"# xgboost","4f8eb91c":"# Model Selection"}}