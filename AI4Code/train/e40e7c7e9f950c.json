{"cell_type":{"dba09125":"code","d16fac6e":"code","106f299d":"code","16cbf9ee":"code","3587864b":"code","2b28c3f2":"code","c7019ed5":"code","a3070c2d":"code","39a5e0ad":"code","bba7805b":"code","8fe22842":"code","f43567be":"code","6a76b140":"code","ec6821d7":"code","6ee94984":"code","230fed2f":"code","cb1f2b21":"code","3ba4ea21":"code","019662fa":"code","860f467c":"code","613ac149":"code","ae23faf9":"code","954a299b":"code","37e99c1f":"code","0caaff7b":"code","d29babea":"code","e4d51fd2":"code","d2d4af69":"code","66d1a4a2":"code","826d7598":"code","48cc001d":"code","36fbb3d5":"code","36c224f2":"code","52f2fead":"code","11ed0344":"code","d2e5ffc3":"code","08eff9e0":"code","e7bb294a":"code","2c69b0ff":"code","417aaa5b":"code","f4550c28":"code","8c7ddc1a":"code","55193c02":"code","f496cf20":"code","ca61a14e":"code","292b1de1":"code","fc28ac39":"code","5a6dd52c":"code","0e6e4dfe":"code","795cfd01":"code","724c7fbe":"code","e0aaef47":"code","9a70d083":"code","6741219e":"code","35b85f8d":"code","1d6b494e":"code","e7c6dea2":"markdown","0d51c6cb":"markdown","eb96b988":"markdown","9e49c4b2":"markdown","6e4af509":"markdown","ba246ab0":"markdown","002524be":"markdown","61be89a8":"markdown","70bd65a5":"markdown","fac295d9":"markdown","d1df2ddf":"markdown","95cc2fb9":"markdown","50396f4b":"markdown","9cea339b":"markdown","5af93b2d":"markdown","99d84d63":"markdown"},"source":{"dba09125":"conda list","d16fac6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","106f299d":"import matplotlib.pyplot as plt\nimport statsmodels.api as sm","16cbf9ee":"diamantes = pd.read_csv('..\/input\/ceupe-big-data-analytics\/diamonds_train.csv')\ndiamondess_submision = pd.read_csv('..\/input\/ceupe-big-data-analytics\/diamonds_test.csv')\nsample_sub= pd.read_csv('..\/input\/ceupe-big-data-analytics\/sample_submission.csv')\n","3587864b":"diamantes['carat'].plot(kind='hist', bins=20, title='histogram', figsize=(10, 7));","2b28c3f2":"diamantes.head()","c7019ed5":"diamantes.dtypes","a3070c2d":"(diamantes.isnull().sum()\/diamantes.shape[0])*100","39a5e0ad":"corr = diamantes.set_index('carat').corr()\nsm.graphics.plot_corr(corr, xnames=list(corr.columns))\nplt.show()","bba7805b":"diamantes.describe()","8fe22842":"diamondess_submision.describe()","f43567be":"diamantes_2 = diamantes.loc[(diamantes['x']==0) | (diamantes['y']==0) | (diamantes['z']==0)]\ndiamantes_2.describe()","6a76b140":"diamantes_3 = diamantes[ (diamantes['x'] > 0) & (diamantes['y'] > 0) & (diamantes['z'] > 0) ]\ndiamantes_3.describe()","ec6821d7":"diamantes.describe()","6ee94984":"ax = sns.catplot(y=\"price\", x=\"cut\",col=\"clarity\", kind=\"box\", data=diamantes_3)","230fed2f":"ax = sns.catplot(y=\"price\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantes_3)","cb1f2b21":"diamantes_3.shape","3ba4ea21":"ax = sns.pairplot(diamantes_3[['clarity','x','y','z','price']],hue='clarity')","019662fa":"ax = sns.catplot(y=\"table\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantes_3)","860f467c":"Q1 = diamantes_3['table'].quantile(0.25)\nQ3 = diamantes_3['table'].quantile(0.75)\nIQR = Q3 - Q1","613ac149":"filter = (diamantes_3[\"table\"] >= Q1 - 1.5*IQR) & (diamantes_3[\"table\"] <= Q3 + 1.5*IQR)\ndiamantesIQR = diamantes_3.loc[filter]\ndiamantesIQR.describe()","ae23faf9":"ax = sns.catplot(y=\"table\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantesIQR)","954a299b":"ax = sns.pairplot(diamantesIQR[['clarity','x','y','z','price']],hue='clarity')","37e99c1f":"diamantes_3.describe()","0caaff7b":"diamantesIQR.describe()","d29babea":"ax = sns.catplot(y=\"depth\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantesIQR)","e4d51fd2":"Q1 = diamantesIQR['depth'].quantile(0.25)\nQ3 = diamantesIQR['depth'].quantile(0.75)\nIQR = Q3 - Q1\nfilter = (diamantesIQR[\"depth\"] >= Q1 - 1.5*IQR) & (diamantesIQR[\"depth\"] <= Q3 + 1.5*IQR)\ndiamantesIQR = diamantesIQR.loc[filter]\ndiamantesIQR.describe()","d2d4af69":"ax = sns.catplot(y=\"depth\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantesIQR)","66d1a4a2":"Q1 = diamantesIQR['carat'].quantile(0.25)\nQ3 = diamantesIQR['carat'].quantile(0.75)\nIQR = Q3 - Q1\nfilter = (diamantesIQR[\"carat\"] >= Q1 - 1.5*IQR) & (diamantesIQR[\"carat\"] <= Q3 + 1.5*IQR)\ndiamantesIQR = diamantesIQR.loc[filter]\ndiamantesIQR.describe()","826d7598":"ax = sns.catplot(y=\"carat\", x=\"color\",col=\"cut\", kind=\"box\", data=diamantesIQR)","48cc001d":"diamantesIQR.describe()","36fbb3d5":"NUM_FEATS = ['carat', 'depth', 'table', 'x', 'y', 'z']\nCAT_FEATS = ['cut', 'color', 'clarity']\nFEATS = NUM_FEATS + CAT_FEATS\nTARGET = 'price'","36c224f2":"numeric_transformer = \\\nPipeline(steps=[('imputer', SimpleImputer(strategy='median')), \n                ('scaler', StandardScaler())])\ncategorical_transformer = \\\nPipeline(steps=[('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n                ('onehot', OneHotEncoder(handle_unknown='ignore'))])\npreprocessor = \\\nColumnTransformer(transformers=[('num', numeric_transformer, NUM_FEATS),\n                                ('cat', categorical_transformer, CAT_FEATS)])","52f2fead":"preprocessor","11ed0344":"x_processor = diamantesIQR\npd.DataFrame(data=preprocessor.fit_transform(x_processor)).head()","d2e5ffc3":"from sklearn.model_selection import train_test_split","08eff9e0":"from sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel= Pipeline(steps=[('preprocessor', preprocessor),\n                       ('regressor', RandomForestRegressor())])","e7bb294a":"diamonds_train, diamonds_test = train_test_split(x_processor)","2c69b0ff":"print(diamonds_train.shape)\nprint(diamonds_test.shape)","417aaa5b":"from sklearn.metrics import mean_squared_error","f4550c28":"model.fit(diamonds_train[FEATS], diamonds_train[TARGET]);","8c7ddc1a":"y_test = model.predict(diamonds_test[FEATS])\ny_train = model.predict(diamonds_train[FEATS])","55193c02":"print(f\"test error: {mean_squared_error(y_pred=y_test, y_true=diamonds_test[TARGET], squared=False)}\")\nprint(f\"train error: {mean_squared_error(y_pred=y_train, y_true=diamonds_train[TARGET], squared=False)}\")","f496cf20":"from sklearn.model_selection import cross_val_score","ca61a14e":"scores = cross_val_score(model, \n                         diamantes[FEATS], \n                         diamantes[TARGET], \n                         scoring='neg_root_mean_squared_error', \n                         cv=5, n_jobs=-1)","292b1de1":"import numpy as np\nnp.mean(-scores)","fc28ac39":"from sklearn.model_selection import RandomizedSearchCV","5a6dd52c":"param_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'regressor__n_estimators': [16, 32, 64, 128, 256, 512],\n    'regressor__max_depth': [2, 4, 8, 16],\n}\n\ngrid_search = RandomizedSearchCV(model, \n                                 param_grid, \n                                 cv=5, \n                                 verbose=10, \n                                 scoring='neg_root_mean_squared_error', \n                                 n_jobs=-1,\n                                 n_iter=32)\n\ngrid_search.fit(diamantes[FEATS], diamantes[TARGET])","0e6e4dfe":"grid_search.best_params_","795cfd01":"grid_search.best_score_","724c7fbe":"y_pred = grid_search.predict(diamondess_submision[FEATS])","e0aaef47":"submission_df = pd.DataFrame({'id': diamondess_submision['id'], 'price': y_pred})","9a70d083":"submission_df.head()","6741219e":"submission_df.describe()","35b85f8d":"submission_df.price.clip(0, 20000, inplace=True)","1d6b494e":"submission_df.to_csv('diamonds_rf.csv', index=False)","e7c6dea2":"paso 0. ***Verificacion de librerias instaladas***","0d51c6cb":"POdemos observar que tenemos valores minimos Ceros en X,Y,Z, asi que nos diponemos a eliminar esos datos","eb96b988":"# ***Caso 5 - Predicci\u00f3n del precio de los diamantes***","9e49c4b2":"Una vez eliminado los valores 0 que puede que haya sido introducido por error humano y tambien reduciendo los outliners que existia en table, seguiremos buscando outliners con carat y depth, para que nuestro analisis de prediccion sea lo mas acertado posible","6e4af509":"# # **Iniciamos con la pre prosesamiento de datos**","ba246ab0":"viendo esto podemos deducir de que no existen valroes nulos","002524be":"Ahora como podemos observar con la comparacion entre la descripccion de las 2 tablas, ya no existen diamantes con x,y,z = 0","61be89a8":"Ahora hacemos una comparacion entre diamantes 3 y diamanteIQR ","70bd65a5":"Analisis de valores faltantes","fac295d9":"# Entrenamiento del modelo lineal ","d1df2ddf":"**Importacion de librerias**","95cc2fb9":"OPtimizacion del modelo","50396f4b":"Podemos observar que existen diversos outliners pero estos se ven afectados a los diversos valores de categorizacion, si eliminamos estos outliners afectara en nuestra preediccion. sin embargo para una mejor prediccion utilizaremos el metodo de IQR","9cea339b":"Realizamos una variacion del modelo\n","5af93b2d":"Una vez sacado los diferentes Ouliners importantes de las dimensiones que habia en nuestra tabla con el metodo IQR, podemos continuar con el entrenamiento de nuestro modelo","99d84d63":"**ANALISIS OUTLINERS**"}}