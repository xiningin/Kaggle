{"cell_type":{"a9018b6f":"code","5139c98a":"code","a90a0fd0":"code","1ebc406d":"code","581ac492":"code","62d82d0f":"code","bb49edff":"code","1490c02b":"code","de67885f":"code","6e7427b1":"code","3e2a240d":"code","f18046fb":"code","f6714356":"code","78e230dc":"code","7b59087e":"code","96fcbb4a":"code","06da7329":"code","e893d908":"code","f576de00":"code","03fe77ce":"code","aa52f132":"code","7c9d05a4":"code","03bf56e7":"code","d9635622":"code","a584722b":"code","6df23e40":"code","c16a6bfd":"code","2d23c2d7":"code","e10c9d97":"code","ac514799":"code","5e7b30d6":"code","30c4aa23":"code","0cd08204":"code","8a721cea":"code","d3293817":"code","24c49d61":"code","85986b22":"code","078af5ec":"code","d3e36ea8":"code","1b0f460f":"code","e7bcd442":"code","78887c07":"code","63404111":"code","37c3bcca":"code","25d5e3e9":"code","22cdea75":"code","f8eb3443":"code","d4262b19":"code","66617ccc":"code","d0362268":"code","46f25432":"code","c3dffd61":"code","ca50aba4":"code","d25fa52c":"code","81b3869b":"code","1ce22f41":"code","1606cea0":"code","89145c8e":"code","b00d0f64":"code","f715b4f4":"code","0e298397":"code","bd9e224b":"code","49c880d3":"code","d5862d40":"code","cf366294":"code","e7d1479c":"code","23f66328":"code","0caa00ad":"code","4cfc311f":"code","db359573":"code","27e226b2":"code","6cafe6b2":"code","10fa1ff7":"code","e409c0d4":"code","558f0baf":"code","cbc4a9c7":"code","722421d2":"code","e33a25a5":"code","787a1aa6":"code","c38b8187":"code","0b14c3e6":"code","a837d43d":"code","ddcc18dc":"code","de57b364":"code","be4f7b09":"code","48d5c01d":"code","6c503487":"code","1a093c0f":"code","811df772":"code","0396ef09":"code","088f8c23":"code","1d8ab622":"code","3b22c1e6":"code","76d9a9e8":"code","08b03db7":"code","256ae8f5":"code","f9df6f48":"code","0081541d":"code","3ebb108c":"code","9d2978dc":"code","b298ffad":"code","5680d180":"code","83b4d043":"code","141c5bcd":"code","b38de475":"code","6886f179":"code","a65c52a8":"code","bf6eaefe":"code","21995def":"code","53318489":"code","fabd4ad2":"code","fca45317":"code","9faca545":"code","2dae20f1":"code","1f8326d0":"code","294ffa37":"code","2d754620":"code","49a98307":"code","b085a20f":"code","1e93f900":"code","280e73c7":"code","7ac6e9dc":"code","f9f75b69":"code","6cd78e6c":"code","fe2165cc":"code","337bf318":"code","59fe3a9b":"code","5b0b3664":"code","5090de5e":"code","403dee45":"code","83cf081f":"code","b7fc9b95":"code","316a0cdd":"code","2c19da09":"code","061850a6":"code","4a3318d5":"code","8fb424ab":"code","cb20f57c":"code","bd45181b":"code","82d859e7":"code","cd780d41":"code","8f185896":"code","52f1ceed":"code","446e4974":"code","fda6acee":"code","852480c0":"code","ee5cfc49":"code","9d678bde":"code","79149aa0":"code","bab61fa7":"markdown","7dc9b511":"markdown","e04f3440":"markdown","6f32eefe":"markdown","fc3e3862":"markdown","cf9277ec":"markdown","1bf293d5":"markdown","bd4b4355":"markdown"},"source":{"a9018b6f":"my_list = [1,2,3]","5139c98a":"my_list","a90a0fd0":"import numpy as np","1ebc406d":"np.array(my_list) #1-d array","581ac492":"arr = np.array(my_list)","62d82d0f":"my_math = [[1,2,3],[4,5,6],[7,8,9]]","bb49edff":"np.array(my_math) #2-d array","1490c02b":"np.arange(0,10)","de67885f":"np.arange(3)","6e7427b1":"np.arange(3.0)","3e2a240d":"np.arange(0,11)","f18046fb":"np.arange(0,11,2) #3rd argument is step size","f6714356":"#arrays of all zeroes\nnp.zeros(3)","78e230dc":"np.zeros((5,5)) #rowsxcolumns","7b59087e":"np.zeros((2,3)) #passing tuple as a argument in zeros method of numpy","96fcbb4a":"np.ones(3)","06da7329":"np.ones((5,5))","e893d908":"np.linspace(0,5) ","f576de00":"np.linspace(0,5,10) #returns 1-d vector with one set of values of 10 evenly spaced points.","03fe77ce":"#identity matrix\nnp.eye(4) #square matrix rows = columns","aa52f132":"#arrays of random no.\n\nnp.random.rand(5)     #in argument we will pass given shape of array\n\n#1-d array of random numbers uniformly distributed over 0 and 1 \n\n#uniform distribution from 0 to 1","7c9d05a4":"np.random.rand(5,5) #2-d array ","03bf56e7":"#if want to return a sample from the standard normal distribution or a gaussian distribution\n\nnp.random.randn(2)","d9635622":"np.random.randn(4,4) #no need to pass tuple as agrument instead passing two dimensions as a separate \n                                                                                          #argument","a584722b":"#random integers from a low to high number\n\nnp.random.randint(1,100)           #low is inclusive , high is exclusive that is 1 and 100","6df23e40":"np.random.randint(1,100,10)            #10 random integers","c16a6bfd":"arr = np.arange(25)","2d23c2d7":"arr","e10c9d97":"ranarr = np.random.randint(0,50,10)","ac514799":"ranarr","5e7b30d6":"#reshape method - can return a array containing the same data of a new shape\n\narr.reshape(5,5)\n\n#error if unable to complete that matrix see total elements = rows x columns\n#here 5 rows x 5 columns = 25 elements","30c4aa23":"#methods for finding max or min values \n\nranarr","0cd08204":"ranarr.max()","8a721cea":"ranarr.min()","d3293817":"#location of max or min values \n\nranarr.argmax()","24c49d61":"ranarr.argmin()","85986b22":"arr.shape #25, means arr array is just 1-d vector","078af5ec":"arr.reshape(5,5)","d3e36ea8":"arr = arr.reshape(5,5)","1b0f460f":"arr.shape","e7bcd442":"#datatype","78887c07":"arr.dtype","63404111":"ranarr.dtype","37c3bcca":"from numpy.random import randint","25d5e3e9":"randint(2,10)","22cdea75":"import numpy as np","f8eb3443":"arr = np.arange(0,11)","d4262b19":"arr  #arr is variable name of array itself","66617ccc":"arr[8]","d0362268":"arr[1:5] #last index location of slicing is exclusive","46f25432":"arr[0:5]","c3dffd61":"arr[:6]","ca50aba4":"arr[0:6]","d25fa52c":"arr[5:]","81b3869b":"arr[5:0]","1ce22f41":"arr[0:5] = 100","1606cea0":"arr","89145c8e":"arr = np.arange(0,11)","b00d0f64":"arr","f715b4f4":"slice_of_arr = arr[0:6]","0e298397":"slice_of_arr","bd9e224b":"slice_of_arr[:] = 99","49c880d3":"slice_of_arr","d5862d40":"arr #original array changes ","cf366294":"arr_copy = arr.copy()","e7d1479c":"arr","23f66328":"arr_copy","0caa00ad":"arr_copy[:] = 100","4cfc311f":"arr_copy","db359573":"arr","27e226b2":"#indexing a 2-d array\n\narr_2d = np.array([[5,10,15],[20,25,30],[35,40,45]])","6cafe6b2":"arr_2d","10fa1ff7":"#grabing elements from 2-d array\n\narr_2d[0][0]  #index 0 for row then column","e409c0d4":"arr_2d[0] #entire row index 0 ","558f0baf":"arr_2d[1][1]","cbc4a9c7":"arr_2d[2][1]","722421d2":"arr_2d[2,1]","e33a25a5":"arr_2d[1,1]","787a1aa6":"arr_2d[:2,1:]  #grab everything upto row 2 and then grab from column 1 onwards\n\n#slice notation","c38b8187":"arr_2d[:2]","0b14c3e6":"#mostimportant method of selection - conditional selection","a837d43d":"arr = np.arange(1,11)","ddcc18dc":"arr","de57b364":"arr > 5","be4f7b09":"bool_arr = arr > 5","48d5c01d":"bool_arr","6c503487":"arr[bool_arr]              #only get those results where this boolean array happens to be true.","1a093c0f":"arr[arr > 5]","811df772":"arr[arr<3]","0396ef09":"arr","088f8c23":"arr_2d = np.arange(50).reshape(5,10)\n\n#calling a method off a another method","1d8ab622":"arr_2d","3b22c1e6":"arr_2d[1:3] # row index 1 upto row index 2","76d9a9e8":"arr_2d[1:3,3:5] #row index 1 to 2 , 3 not included then column index 3 upto 4 - 5 not included","08b03db7":"arr = np.arange(0,11)","256ae8f5":"arr","f9df6f48":"arr + arr   #adding element by element basis","0081541d":"arr - arr","3ebb108c":"arr * arr","9d2978dc":"arr + 100","b298ffad":"arr *100","5680d180":"arr-100","83b4d043":"arr*100","141c5bcd":"1\/0","b38de475":"arr\/arr #0\/0 = nan or null object, but still getting output with warning","6886f179":"arr","a65c52a8":"1\/arr  #1\/0 = inf for infinity","bf6eaefe":"arr","21995def":"arr ** 2","53318489":"np.sqrt(arr)","fabd4ad2":"arr","fca45317":"np.exp(arr)","9faca545":"np.max(arr)","2dae20f1":"np.sin(arr)","1f8326d0":"np.log(arr) #log0 = negative infinity with warning","294ffa37":"#initializing numpy arrays with same number ","2d754620":"np.full((3,3),55)","49a98307":"n4 = np.full((3,3),55)","b085a20f":"n4","1e93f900":"#joining numpy arrays","280e73c7":"n1 = np.array([1,2,3])\nn2 = np.array([4,5,6])","7ac6e9dc":"np.vstack((n1,n2))","f9f75b69":"np.hstack((n1,n2))","6cd78e6c":"np.column_stack((n1,n2))","fe2165cc":"#numpy intersection and difference","337bf318":"n1 = np.array([10,20,30,40,50,60])\nn2 = np.array([50,60,70,80,90])\n","59fe3a9b":"np.intersect1d(n1,n2)","5b0b3664":"np.setdiff1d(n1,n2)","5090de5e":"np.setdiff1d(n2,n1)","403dee45":"#numpy array mathematics","83cf081f":"n1 = np.array([10,20])","b7fc9b95":"n2 = np.array([30,40])","316a0cdd":"np.sum([n1,n2])","2c19da09":"np.sum([n1,n2],axis=0)","061850a6":"np.sum([n1,n2],axis=1)","4a3318d5":"#numpy math function","8fb424ab":"#mean","cb20f57c":"n1 = np.random.randint(1,50,10)","bd45181b":"n1","82d859e7":"np.mean(n1)","cd780d41":"#median","8f185896":"np.median(n1)","52f1ceed":"#standard deviation","446e4974":"np.std(n1)","fda6acee":"#NumPy Save and load","852480c0":"n1","ee5cfc49":"np.save('myarray',n1)","9d678bde":"new_n1 = np.load('myarray.npy')","79149aa0":"new_n1","bab61fa7":"## warnings by numpy","7dc9b511":"# NumPy operations","e04f3440":"### 1-d arrays are vectors\n### matrices are 2-d arrays but matrix still have one row or one column","6f32eefe":"# NumPy arrays","fc3e3862":"# NumPy Indexing and Selection","cf9277ec":"# array with array\n","1bf293d5":"### Universal array functions which are essentially just mathematical operations","bd4b4355":"#### array with scalar operations - scalar means a single number and numpy does it basically by broadcast\n####  that number to every element in the array - operations occurs on an element by element basis"}}