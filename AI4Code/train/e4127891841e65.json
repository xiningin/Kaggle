{"cell_type":{"09ea0e03":"code","51c6b553":"code","fe2a4624":"code","c5606ec9":"code","d7ed32d4":"markdown","58157dc0":"markdown","6b353f59":"markdown","21434802":"markdown","b03c6b1d":"markdown"},"source":{"09ea0e03":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n%matplotlib inline\n\ntrain = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","51c6b553":"PlayId = 20170907000395\ndef create_football_field(linenumbers=True, fifty_is_los=False):\n\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1, edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=(24, 12.66))\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80, 80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    \n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n\n    ez1 = patches.Rectangle((0, 0), 10, 53.3, linewidth=0.1, edgecolor='r', facecolor='blue', alpha=0.2, zorder=0)\n    ez2 = patches.Rectangle((110, 0), 120, 53.3, linewidth=0.1, edgecolor='r', facecolor='blue', alpha=0.2, zorder=0)\n    ax.add_patch(ez1)\n    ax.add_patch(ez2)\n        \n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10), horizontalalignment='center', fontsize=20, color='white')\n            plt.text(x, 53.3 - 5, str(numb - 10), horizontalalignment='center', fontsize=20, color='white')\n            \n    hash_range = range(11, 110)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n    \n    return fig, ax\n\ncreate_football_field()\nplt.show()","fe2a4624":"def add_players(PlayId, show_position=True, show_orientation=True, show_motion_direction=True):\n    play_information = train.query(\"PlayId == @PlayId\")\n    train.query(\"PlayId == @PlayId and Team == 'away'\").plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=200, legend='Away')\n    train.query(\"PlayId == @PlayId and Team == 'home'\").plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=200, legend='Home')\n    \n    if show_position:\n        for index, row in play_information.iterrows():\n            plt.annotate(row['Position'], (row['X']-0.5, row['Y']-0.5), color='white')\n    \n    if show_orientation:\n        for index, row in play_information.iterrows():\n            x_arrow = 1.25*np.sin(np.deg2rad(row['Orientation']))\n            y_arrow = 1.25*np.cos(np.deg2rad(row['Orientation']))\n            plt.arrow(row['X'], row['Y'], x_arrow, y_arrow, head_width=0.5, length_includes_head=True,\n                      color = 'orange' if row['Team'] == 'away' else 'blue')\n\n    if show_motion_direction:\n        for index, row in play_information.iterrows():\n            x_arrow = -row['S']*np.sin(np.deg2rad(row['Dir']))\n            y_arrow = row['S']*np.cos(np.deg2rad(row['Dir']))\n            plt.arrow(row['X'], row['Y'], x_arrow, y_arrow, head_width=0.5, length_includes_head=True,\n                      head_starts_at_zero=True, \n                      facecolor='orange' if row['Team'] == 'away' else 'blue')\n    plt.title('PlayId: ' + str(PlayId))\n\nfig, ax = create_football_field()\nadd_players(PlayId)\nplt.show()","c5606ec9":"def highlight_lines(PlayId, show_scrimmage_line=True, show_play_direction=True, show_yards=True, show_teams=True):\n    \n    play_information = train.query(\"PlayId == @PlayId\")\n    yl = play_information['YardLine'].tolist()[0]\n    yl_left = yl + 10 \n    yl_right = 110 - yl\n    distance_left_scrimmage = 0\n    distance_right_scrimmage = 0\n    for index, rows in play_information.iterrows():\n        distance_left_scrimmage += abs(rows['X'] - yl_left)\n        distance_right_scrimmage += abs(rows['X'] - yl_right)\n\n    if distance_left_scrimmage <= distance_right_scrimmage:\n        yl = yl_left\n    else:\n        yl = yl_right\n\n    if show_scrimmage_line:\n        plt.plot([yl, yl], [0, 53.3], color='yellow')\n        plt.text(yl + 1, 46, 'Line of scrimmage', color='yellow', fontsize=20)\n        \n    direction = play_information['PlayDirection'].tolist()[0]\n    if show_play_direction:\n        if 'right' in direction:\n            plt.arrow(55, 2, 10, 0, head_width=0.5, length_includes_head=True, color='red')\n        else:\n            plt.arrow(65, 2, -10, 0, head_width=0.5, length_includes_head=True, color='red')\n        plt.text(54, 3, 'Play direction', color='red', fontsize=20)\n    \n    if show_yards:\n        if 'right' in direction:\n            sign = 1\n        else: \n            sign = -1\n        yard_strip = patches.Rectangle((yl, 52.3), sign*play_information['Yards'].tolist()[0], 1, linewidth=0.1,  facecolor='red')\n        ax.add_patch(yard_strip)\n        plt.text(yl + sign*(3**-sign), 50, 'Yards: {}' .format(play_information['Yards'].tolist()[0]), color='red', fontsize=20)\n    \n    if show_teams:\n        visitor = (play_information['VisitorTeamAbbr'].tolist()[0],\n                   play_information['VisitorScoreBeforePlay'].tolist()[0],\n                  'orange')\n        home = (play_information['HomeTeamAbbr'].tolist()[0], \n                play_information['HomeScoreBeforePlay'].tolist()[0],\n                'blue')\n\n        if play_information['PossessionTeam'].tolist()[0] == visitor[0]:\n            if 'right' in direction:\n                team_l, score_l, color_l = visitor\n                team_r, score_r, color_r = home\n            else:\n                team_r, score_r, color_r = visitor\n                team_l, score_l, color_l = home\n        else:\n            if 'right' in direction:\n                team_r, score_r, color_r = visitor\n                team_l, score_l, color_l = home\n            else:\n                team_l, score_l, color_l = visitor\n                team_r, score_r, color_r = home\n        \n        plt.text(1, 26, '{0}: {1}' .format(team_l, score_l), color=color_l, fontsize=30)\n        plt.text(111, 26, '{0}: {1}' .format(team_r, score_r), color=color_r, fontsize=30)\n\nfig, ax = create_football_field()\nadd_players(PlayId)\nhighlight_lines(PlayId)\nplt.show()","d7ed32d4":"## Create The Football Field\nFirst we create the football field with the endzones (again, thanks to Rob for this awesome plot). I got rid of a few parameters and prepared the plot for various plotting layers but the main structure is still the same. ","58157dc0":"# Highlight lines and more information\nSome additional information to the play situation is presented in the last function, e.g. the line of scrimmage, play direction and the current game score. But at the end we are interested in the actual achieved yards... so they are presented as a red bar starting from the line of scrimmage. ","6b353f59":"# Adding Players and their motion information\nThis is the most useful part to get an overview of the play situation. The players are plotted with their orientation and their moving direction. The length of the moving direction arrow differs to visualize the speed of the sepcific player. In addition the position of the player is shown. ","21434802":"## Reference\n1. https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position","b03c6b1d":"# NFL Big Data Bowl\nThe following code visualizes the game to get a grasp of the different play situations. You only have to define the PlayId you are looking for. I added some features and functionalities to the football field made by Rob Mulla (https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position ). In addition I changed it to a layerwise plotting module.\n## Plotting the field"}}