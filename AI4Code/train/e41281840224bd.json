{"cell_type":{"6d5a46bf":"code","dd979f94":"code","75d87ef3":"code","114a2be1":"code","0219df4a":"code","7c3c743f":"code","65f5247f":"code","485de5b4":"code","716810c4":"code","1af1383d":"code","b23041d2":"code","e7b43b66":"code","dbc1586d":"code","3a90e9cf":"code","41d1282a":"code","df169a16":"code","bc7e4fb3":"code","af5e1dd6":"code","38ce792a":"code","bfed1b0d":"code","9012b9a3":"markdown","09c803ef":"markdown","01f9ca0e":"markdown","e794e752":"markdown","cd2cc9b8":"markdown","6d26274a":"markdown","e3169899":"markdown","24a39028":"markdown","279f4cf9":"markdown","cb2a5901":"markdown"},"source":{"6d5a46bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dd979f94":"train=pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv\")\nsubmission=pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_submission.csv\")","75d87ef3":"import matplotlib.pyplot as plt\n%matplotlib inline","114a2be1":"train['Date']=pd.to_datetime(train['Date'])\ntrain['Date'] = train['Date'].apply(lambda x:x.date().strftime('%m-%d'))\ntest['Date']=pd.to_datetime(test['Date'])\ntest['Date'] = test['Date'].apply(lambda x:x.date().strftime('%m-%d'))","0219df4a":"hor=train['Date']\nver=train['ConfirmedCases']\nplt.figure(figsize=(20,10))\nplt.plot(hor, ver)\nplt.title('Time Series Confirmed Cases')\nplt.show()","7c3c743f":"hor=train['Date']\nver=train['Fatalities']\nplt.figure(figsize=(20,10))\nplt.plot(hor, ver)\nplt.title('Time Series Fatalities')\nplt.show()","65f5247f":"train1=train[48:]  #excluding first 48 values from train dataset as they are all zero\n#train1=train\ntrain1.head()","485de5b4":"X_test1=test[['ForecastId']]+50 #matching the test data Id in line to training ID's","716810c4":"X1=train1[['Id']]\ny_con=train1[['ConfirmedCases']]\ny_fat=train1[['Fatalities']]","1af1383d":"from sklearn.preprocessing import PolynomialFeatures\npoly=PolynomialFeatures(7) #Polynomial Feature with degree 7\nX=poly.fit_transform(X1)\nX_test=poly.fit_transform(X_test1)","b23041d2":"from sklearn.linear_model import Ridge, Lasso, SGDRegressor, LinearRegression\nmodel_con=Lasso()\nmodel_con.fit(X, y_con)","e7b43b66":"y_pred_con=model_con.predict(X_test)","dbc1586d":"model_fat=Lasso()\nmodel_fat.fit(X, y_fat)","3a90e9cf":"y_pred_fat=model_fat.predict(X_test)","41d1282a":"y_pred_con1=y_pred_con.ravel()\ny_pred_fat1=y_pred_fat.ravel()\n","df169a16":"y_pred_con1=y_pred_con1[13:]  #replacing 13 test prediction with training label as they overlap\ny_con_t=train1['ConfirmedCases']\ny_con_t=y_con_t[2:].ravel()  #getting those 13 labels from training set to put into prediction\n#y_con_t=y_con_t[50:].ravel()\ny_pred_con_final=np.round(np.append(y_con_t, y_pred_con1))\ny_pred_con_final","bc7e4fb3":"y_pred_fat1=y_pred_fat1[13:] #replacing 13 test prediction with training label as they overlap\ny_fat_t=train1['Fatalities']\ny_fat_t=y_fat_t[2:].ravel() #getting those 13 labels from training set to put into prediction\n#y_fat_t=y_fat_t[50:].ravel()\ny_pred_fat_final=np.round(np.append(y_fat_t, y_pred_fat1))\ny_pred_fat_final","af5e1dd6":"data={'ForecastId':submission.ForecastId,'ConfirmedCases':y_pred_con_final, 'Fatalities':y_pred_fat_final}\nresult=pd.DataFrame(data, index=submission.index)\nresult.to_csv('\/kaggle\/working\/submission.csv', index=False)\nm1=pd.read_csv('\/kaggle\/working\/submission.csv')\nm1.head()","38ce792a":"hor=test.Date\nver=y_pred_con_final\nplt.figure(figsize=(20,10))\nplt.plot(hor, ver)\nplt.title('Confirmed Cases Prediction')\nplt.show()","bfed1b0d":"hor=test.Date\nver=y_pred_fat_final\nplt.figure(figsize=(20,10))\nplt.plot(hor, ver)\nplt.title('Fatalities Prediction')\nplt.show()","9012b9a3":"**#StayHome #StaySafe #May Almighty bless us all.**","09c803ef":"**Please upvote if you like this or find this notebook useful, thanks.**","01f9ca0e":"**Preparing the Submission File**","e794e752":"**Analysis and Feature Engineering**","cd2cc9b8":"**Exploratory Data Analysis and Visualization**","6d26274a":"**Predicted Result Visualization**","e3169899":"# COVID-19 USA(California) Confirmed Cases and Fatalities Forecasting","24a39028":"**Reading the Data**","279f4cf9":"**Building the Model**","cb2a5901":"**In this notebook, the model will be predicting the cumulative number of confirmed COVID19 cases in California, as well as the number of resulting fatalities, for future dates. We understand this is a serious situation, and in no way want to trivialize the human impact this crisis is causing by predicting fatalities. Our goal is to provide better methods for estimates that can assist medical and governmental institutions to prepare and adjust as pandemics unfold.**"}}