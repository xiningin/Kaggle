{"cell_type":{"bb278a89":"code","23b35c13":"code","b9fc9df7":"code","462fbaf3":"code","a1f99319":"code","972cbfcb":"code","03ef1789":"code","7f6fb7b8":"code","615ee51c":"code","9d9bd0e1":"code","40211935":"code","6611a7d9":"code","05f8d982":"code","81caf3cc":"code","f3e883c2":"code","f72f8d18":"code","071243c2":"code","84761a2c":"code","bf5d77a6":"code","8ae78614":"code","b984f3d3":"code","06aad992":"code","d4794ab9":"code","b8bdd8d4":"code","e6f504a4":"code","1caffcc1":"code","18331cc8":"code","a38cf450":"code","672da268":"code","29906344":"code","b74f60ca":"code","54c74bd8":"code","4fbed3d8":"code","c9f99524":"code","b7660459":"code","4cf25823":"code","12672ca0":"code","80945ade":"code","405acd2a":"code","4133d6f0":"code","26f02d3e":"code","1e5a6646":"code","b38f0f7e":"code","dc60d2d7":"code","262999d5":"code","c0f8fe6f":"code","6ae70606":"code","4d4df80d":"code","2cb87e3d":"code","0aab57bd":"code","8525a46c":"code","43e93979":"code","32824c0b":"code","3f693183":"code","05c0759d":"code","4b999101":"code","cdbd5820":"code","a8138472":"code","033d4a00":"code","ac63c2ae":"code","f3313d86":"code","34ed91ff":"code","c8036905":"code","f489b825":"code","b97788df":"code","5e060273":"code","7c08f7d1":"code","73fd5792":"code","b82e839a":"code","fda51191":"code","643e232f":"code","aeeb7c46":"code","40419526":"code","6925b7c0":"code","6a417460":"markdown","a5687ceb":"markdown","4a131bdd":"markdown","165eea69":"markdown","281d163a":"markdown","b4c5def2":"markdown","2dfef696":"markdown","0a7a4440":"markdown","9bd47725":"markdown","9b9b8f69":"markdown","b5f90bce":"markdown","935bf2a7":"markdown","1442a94b":"markdown","146a50bc":"markdown","396ffe89":"markdown","512fa867":"markdown","52162ef6":"markdown","cbb1cb22":"markdown","a5013201":"markdown","3641c0c7":"markdown","77e01080":"markdown","42984f0a":"markdown","a69e9333":"markdown","5f9efe52":"markdown","140e7734":"markdown","0dbc61d7":"markdown","9f387b6b":"markdown","1c74a63e":"markdown","b9ba1590":"markdown","51a07986":"markdown","cb4a7620":"markdown","9970d115":"markdown","20e2ee93":"markdown","b1f4f8d3":"markdown","0ea76f72":"markdown","5067d421":"markdown","00e8ffbe":"markdown","16d1386d":"markdown","167eda40":"markdown","c4b57896":"markdown","c41e7945":"markdown","07d461c9":"markdown","570a2875":"markdown","d03014f3":"markdown","46bcfdf9":"markdown","8f4294a2":"markdown","e59b35b5":"markdown","6d76369c":"markdown","1dd9b26a":"markdown","c0317308":"markdown","74c7a031":"markdown","35b26b4a":"markdown","6a849bf0":"markdown","1def5c07":"markdown","a64edbea":"markdown","43f44393":"markdown","66a4f4d3":"markdown","a0ec1fba":"markdown","88b32f39":"markdown","a44d2a74":"markdown","26eb38f3":"markdown","ccf9f22d":"markdown","9556bbcd":"markdown","44336c97":"markdown","e0c08419":"markdown","6c4fcf67":"markdown","8030ea62":"markdown","ce56e7d2":"markdown","40b41b01":"markdown","1ab6e103":"markdown","a9e18c1a":"markdown","a510316a":"markdown"},"source":{"bb278a89":"# For data manipulation\nimport pandas as pd         \n\n# Garbage Collector to free up memory\nimport gc                         \ngc.enable()                       # Activate ","23b35c13":"orders = pd.read_csv('..\/input\/orders.csv' )\norder_products_train = pd.read_csv('..\/input\/order_products__train.csv')\norder_products_prior = pd.read_csv('..\/input\/order_products__prior.csv')\nproducts = pd.read_csv('..\/input\/products.csv')\naisles = pd.read_csv('..\/input\/aisles.csv')\ndepartments = pd.read_csv('..\/input\/departments.csv')","b9fc9df7":"'''\n#### Remove triple quotes to trim your dataset and experiment with your data\n### COMMANDS FOR CODING TESTING - Get 10% of users \norders = orders.loc[orders.user_id.isin(orders.user_id.drop_duplicates().sample(frac=0.01, random_state=25))] \n'''","462fbaf3":"orders.head()","a1f99319":"order_products_train.head()","972cbfcb":"order_products_prior.head()","03ef1789":"products.head()","7f6fb7b8":"aisles.head()","615ee51c":"departments.head()","9d9bd0e1":"# We convert character variables into category. \n# In Python, a categorical variable is called category and has a fixed number of different values\naisles['aisle'] = aisles['aisle'].astype('category')\ndepartments['department'] = departments['department'].astype('category')\norders['eval_set'] = orders['eval_set'].astype('category')\nproducts['product_name'] = products['product_name'].astype('category')","40211935":"#Merge the orders DF with order_products_prior by their order_id, keep only these rows with order_id that they are appear on both DFs\nop = orders.merge(order_products_prior, on='order_id', how='inner')\nop.head()","6611a7d9":"## First approach in one step:\n# Create distinct groups for each user, identify the highest order number in each group, save the new column to a DataFrame\nuser = op.groupby('user_id')['order_number'].max().to_frame('u_total_orders')\nuser.head()\n\n## Second approach in two steps: \n#1. Save the result as DataFrame with Double brackets --> [[ ]] \n#user = op.groupby('user_id')[['order_number']].max()\n#2. Rename the label of the column\n#user.columns = ['u_total_orders']\n#user.head()","05f8d982":"# Reset the index of the DF so to bring user_id from index to column (pre-requisite for step 2.4)\nuser = user.reset_index()\nuser.head()","81caf3cc":"u_reorder = op.groupby('user_id')['reordered'].mean().to_frame('u_reordered_ratio')\nu_reorder = u_reorder.reset_index()\nu_reorder.head()","f3e883c2":"dow=op.groupby('user_id')['order_dow'].mean().to_frame('average_dow')\ndow=dow.reset_index()\ndow.head()","f72f8d18":"user = user.merge(dow, on='user_id', how='left')\n\ndel dow\ngc.collect()\n\nuser.head()","071243c2":"user = user.merge(u_reorder, on='user_id', how='left')\n\ndel u_reorder\ngc.collect()\n\nuser.head()","84761a2c":"prop=op.groupby(\"order_products\")[reorder].count\/sum(count).to_frame(\"proportion_reordered\")\nprop=prop.reset_index()\nprop.head","bf5d77a6":"# Create distinct groups for each product, count the orders, save the result for each product to a new DataFrame  \nprd = op.groupby('product_id')['order_id'].count().to_frame('p_total_purchases')\nprd.head()","8ae78614":"# Reset the index of the DF so to bring product_id rom index to column (pre-requisite for step 2.4)\nprd = prd.reset_index()\nprd.head()","b984f3d3":"# execution time: 25 sec\n# the x on lambda function is a temporary variable which represents each group\n# shape[0] on a DataFrame returns the number of rows\np_reorder = op.groupby('product_id').filter(lambda x: x.shape[0] >40)\np_reorder.head()","06aad992":"p_reorder = p_reorder.groupby('product_id')['reordered'].mean().to_frame('p_reorder_ratio')\np_reorder = p_reorder.reset_index()\np_reorder.head()","d4794ab9":"Addtocart=op.groupby('product_id')['add_to_cart_order'].mean().to_frame('position_to_cart')\nAddtocart = Addtocart.reset_index()\nAddtocart.head()","b8bdd8d4":"#Merge the prd DataFrame with reorder\nprd = prd.merge(p_reorder, on='product_id', how='left')\n\n#delete the reorder DataFrame\ndel p_reorder\ngc.collect()\n\nprd.head()","e6f504a4":"#Merge the prd DataFrame with Addtocart\nprd=prd.merge(Addtocart, on='product_id',how='left')\n#delete the Addtocart df\ndel Addtocart\ngc.collect()\nprd.head()","1caffcc1":"prd['p_reorder_ratio'] = prd['p_reorder_ratio'].fillna(value=0)\nprd.head()","18331cc8":"# Create distinct groups for each combination of user and product, count orders, save the result for each user X product to a new DataFrame \nuxp = op.groupby(['user_id', 'product_id'])['order_id'].count().to_frame('uxp_total_bought')\nuxp.head()","a38cf450":"# Reset the index of the DF so to bring user_id & product_id rom indices to columns (pre-requisite for step 2.4)\nuxp = uxp.reset_index()\nuxp.head()","672da268":"times = op.groupby(['user_id', 'product_id'])[['order_id']].count()\ntimes.columns = ['Times_Bought_N']\ntimes.head()","29906344":"total_orders = op.groupby('user_id')['order_number'].max().to_frame('total_orders')\ntotal_orders.head()","b74f60ca":"first_order_no = op.groupby(['user_id', 'product_id'])['order_number'].min().to_frame('first_order_number')\nfirst_order_no  = first_order_no.reset_index()\nfirst_order_no.head()","54c74bd8":"span = pd.merge(total_orders, first_order_no, on='user_id', how='right')\nspan.head()","4fbed3d8":"# The +1 includes in the difference the first order were the product has been purchased\nspan['Order_Range_D'] = span.total_orders - span.first_order_number + 1\nspan.head()","c9f99524":"uxp_ratio = pd.merge(times, span, on=['user_id', 'product_id'], how='left')\nuxp_ratio.head()","b7660459":"uxp_ratio['uxp_reorder_ratio'] = uxp_ratio.Times_Bought_N \/ uxp_ratio.Order_Range_D\nuxp_ratio.head()","4cf25823":"uxp_ratio = uxp_ratio.drop(['Times_Bought_N', 'total_orders', 'first_order_number', 'Order_Range_D'], axis=1)\nuxp_ratio.head()","12672ca0":"#Remove temporary DataFrames\ndel [times, first_order_no, span]","80945ade":"uxp = uxp.merge(uxp_ratio, on=['user_id', 'product_id'], how='left')\n\ndel uxp_ratio\nuxp.head()","405acd2a":"op[op.user_id==1].head(45)","4133d6f0":"op['order_number_back'] = op.groupby('user_id')['order_number'].transform(max) - op.order_number +1 \nop.head(15)","26f02d3e":"op[op.user_id==7].head(10)","1e5a6646":"op5 = op[op.order_number_back <= 5]\nop5.head(15)","b38f0f7e":"last_five = op5.groupby(['user_id','product_id'])[['order_id']].count()\nlast_five.columns = ['times_last5']\nlast_five.head(10)","dc60d2d7":"uxp = uxp.merge(last_five, on=['user_id', 'product_id'], how='left')\n\ndel last_five\nuxp.head()","262999d5":"uxp = uxp.fillna(0)\nuxp.head()","c0f8fe6f":"#Merge uxp features with the user features\n#Store the results on a new DataFrame\ndata = uxp.merge(user, on='user_id', how='left')\ndata.head()","6ae70606":"#Merge uxp & user features (the new DataFrame) with prd features\ndata = data.merge(prd, on='product_id', how='left')\ndata.head()","4d4df80d":"del op, user, prd, uxp\ngc.collect()","2cb87e3d":"## First approach:\n# In two steps keep only the future orders from all customers: train & test \norders_future = orders[((orders.eval_set=='train') | (orders.eval_set=='test'))]\norders_future = orders_future[ ['user_id', 'eval_set', 'order_id'] ]\norders_future.head(10)\n\n## Second approach (if you want to test it you have to re-run the notebook):\n# In one step keep only the future orders from all customers: train & test \n#orders_future = orders.loc[((orders.eval_set=='train') | (orders.eval_set=='test')), ['user_id', 'eval_set', 'order_id'] ]\n#orders_future.head(10)\n\n## Third approach (if you want to test it you have to re-run the notebook):\n# In one step exclude all the prior orders so to deal with the future orders from all customers\n#orders_future = orders.loc[orders.eval_set!='prior', ['user_id', 'eval_set', 'order_id'] ]\n#orders_future.head(10)","0aab57bd":"# bring the info of the future orders to data DF\ndata = data.merge(orders_future, on='user_id', how='left')\ndata.head(10)","8525a46c":"#Keep only the customers who we know what they bought in their future order\ndata_train = data[data.eval_set=='train']\ndata_train.head()","43e93979":"#Get from order_products_train all the products that the train users bought bought in their future order\ndata_train = data_train.merge(order_products_train[['product_id','order_id', 'reordered']], on=['product_id','order_id'], how='left' )\ndata_train.head(15)","32824c0b":"#Where the previous merge, left a NaN value on reordered column means that the customers they haven't bought the product. We change the value on them to 0.\ndata_train['reordered'] = data_train['reordered'].fillna(0)\ndata_train.head(15)","3f693183":"#We set user_id and product_id as the index of the DF\ndata_train = data_train.set_index(['user_id', 'product_id'])\ndata_train.head(15)","05c0759d":"#We remove all non-predictor variables\ndata_train = data_train.drop(['eval_set', 'order_id'], axis=1)\ndata_train.head(15)","4b999101":"#Keep only the future orders from customers who are labelled as test\ndata_test = data[data.eval_set=='test']\ndata_test.head()","cdbd5820":"#We set user_id and product_id as the index of the DF\ndata_test = data_test.set_index(['user_id', 'product_id'])\ndata_test.head()","a8138472":"#We remove all non-predictor variables\ndata_test = data_test.drop(['eval_set','order_id'], axis=1)\n#Check if the data_test DF, has the same number of columns as the data_train DF, excluding the response variable\ndata_test.head()","033d4a00":"# TRAIN FULL \n\n###########################\n## IMPORT REQUIRED PACKAGES\n###########################\nfrom sklearn.ensemble import RandomForestClassifier\n\n########################################\n## SPLIT DF TO: X_train, y_train (axis=1)\n########################################\nX_train, y_train = data_train.drop('reordered', axis=1), data_train.reordered\n\n############################\n## INSTANTIATE AND TRAIN MODEL\n############################\nrfc = RandomForestClassifier(n_estimators=100,max_depth=10, n_jobs=-1 ,random_state=60)\nmodel = rfc.fit(X_train, y_train)\n\n############################\n# FEATURE IMPORTANCE - AS DF\n############################\nfeature_importances_df = pd.DataFrame(model.feature_importances_, index = X_train.columns, columns=['importance']).sort_values('importance',ascending=False)\nprint(feature_importances_df)\n\n##################################\n# FEATURE IMPORTANCE - GRAPHICAL\n##################################\nfeat_importances = pd.Series(model.feature_importances_, index=X_train.columns).sort_values()\nfeat_importances.plot(kind='barh')\n\n############################\n# DELETE TEMPORARY OBJECTS #\n############################\ngc.collect()\n","ac63c2ae":"model.get_params()","f3313d86":"# Import GridSearchCV from scikit-learn\nfrom sklearn.model_selection import GridSearchCV\n\n# Create a range of values for different parameters\nparam_grid = {\n    'max_depth': [4,5,6],\n    'max_features': [3, 4, 5],\n    'n_estimators': [14, 16, 20]\n}\n\n# Select a fitting model without any parameter\nrfc = RandomForestClassifier()\n\n# Instantiate the grid search model\n#    ARGUMENTS\n#    estimator: The fitting model we have selected\n#    param_grid: the values that we have defined for the different parameters\n#    cv: splits the dataset in three different subsets (2 for train - 1 for test)\n#    n_jobs: how many CPUs to use (-1 = all)\n#    verbose: print progress of grid search during execution\n\ngrid_search = GridSearchCV(estimator = rfc, n_jobs=1,  param_grid = param_grid, \n                          cv = 3, )\n\n# FIT our model with the combinations of different parameters - here is where GridSearch will be exeucuted\ngrid_search.fit(X_train, y_train)\n\n# Print the best parameters\nprint(\"The best parameters are: \/n\",  grid_search.best_params_)\n\n# Store the model for prediction (chapter 5)\nmodel = grid_search.best_estimator_\n\n# Delete X_train , y_train\ndel [X_train, y_train, rfc]","34ed91ff":"model.get_params()","c8036905":"import xgboost\n\n# subsample\nX_train, y_train = data_train.drop('reordered', axis=1), data_train.reordered\n\n\nd_train = xgboost.DMatrix(X_train, y_train)\n\n\nparam = {'max_depth':10, \n         'eta':0.02,\n         'colsample_bytree':0.4,\n         'subsample':0.75,\n         'silent':1,\n         'nthread':27,\n         'eval_metric':'logloss',\n         'binary':'logistic',\n         'tree_method':'hist'\n}\n\nwatchlist= [(d_train, \"train\")]\n\n\nbst = xgboost.train(params=param, dtrain=d_train, num_boost_round=100, evals=watchlist, verbose_eval=10)\n\n\nxgboost.plot_importance(bst)","f489b825":"# Predict values for test data with our model from chapter 5 - the results are saved as a Python array\ntest_pred = model.predict(data_test).astype(int)\n\n## OR Set custom threshold \ntest_pred = (model.predict_proba(data_test)[:,1] >= 0.21).astype(int)\n\ntest_pred[0:10] #display the first 10 predictions of the numpy array","b97788df":"#Save the prediction (saved in a numpy array) on a new column in the data_test DF\ndata_test['prediction'] = test_pred\ndata_test.head(10)","5e060273":"#Reset the index\nfinal = data_test.reset_index()\n#Keep only the required columns to create our submission file (for chapter 6)\nfinal = final[['product_id', 'user_id', 'prediction']]\n\ngc.collect()\nfinal.head()","7c08f7d1":"orders_test = orders.loc[orders.eval_set=='test',(\"user_id\", \"order_id\") ]\norders_test.head()","73fd5792":"final = final.merge(orders_test, on='user_id', how='left')\nfinal.head()","b82e839a":"#remove user_id column\nfinal = final.drop('user_id', axis=1)","fda51191":"#convert product_id as integer\nfinal['product_id'] = final.product_id.astype(int)\n\n## Remove all unnecessary objects\ndel orders\ndel orders_test\ngc.collect()\n\nfinal.head()","643e232f":"d = dict()\nfor row in final.itertuples():\n    if row.prediction== 1:\n        try:\n            d[row.order_id] += ' ' + str(row.product_id)\n        except:\n            d[row.order_id] = str(row.product_id)\n\nfor order in final.order_id:\n    if order not in d:\n        d[order] = 'None'\n        \ngc.collect()\n\n#We now check how the dictionary were populated (open hidden output)\nd","aeeb7c46":"#Convert the dictionary into a DataFrame\nsub = pd.DataFrame.from_dict(d, orient='index')\n\n#Reset index\nsub.reset_index(inplace=True)\n#Set column names\nsub.columns = ['order_id', 'products']\n\nsub.head()","40419526":"#Check if sub file has 75000 predictions\nsub.shape[0]\nprint(sub.shape[0]==75000)","6925b7c0":"sub.to_csv('sub.csv', index=False)","6a417460":"#### 2.3.3.3 Perform a .groupby( ) on users and products to get how many times each customer bought every product.\nHaving kept the last 5 orders for each user, we perform a .groupby( ) on user_id & product_id. With .count( ) we get how many times each customer bought a product.","a5687ceb":"# 7. Get F1 Score","4a131bdd":"# 1. Import and Reshape Data \nFirst we load the necessary Python packages and then we import the CSV files that were provided by Instacart.\n\n## 1.1 Import the required packages\nThe garbage collector (package gc), attempts to reclaim garbage, or memory occupied by objects (e.g., DataFrames) that are no longer in use by Python ([ref1](https:\/\/www.techopedia.com\/definition\/1083\/garbage-collection-gc-general-programming), [ref2](https:\/\/en.wikipedia.org\/wiki\/Garbage_collection_(computer_science)). This package will eliminate our risk to exceed the 16GB threshold of available RAM that Kaggle offers.\n\nThe **\"as\"** reserved word is to define an alias to the package. The alias help us to call easier a package in our code.","165eea69":"## 4.2 Fine-tune your model\nMost algorithms have their own parameters that we need to declare. With method .get_params() we can retrieve the parameters of our fitting model","281d163a":"### 2.4.1 Merge data with prd DataFrame\nIn this step we continue with our new DataFrame **data** and we perform a left join with prd DataFrame. The matching key here is the \"product_id\".\n<img src=\"https:\/\/i.imgur.com\/Iak6nIz.jpg\" width=\"400\">\n\nLeft join, ensures that the new DataFrame will have:\n- all the observations of the data (features of userXproducts and users) DataFrame \n- all the **matching** observations of prd DataFrame with data based on matching key **\"product_id\"**","b4c5def2":"## 2.1 Create user predictors\nWe create the following predictors:\n- 2.1.1 Number of orders per customer\n- 2.1.2 How frequent a customer has reordered products\n\n### 2.1.1 Number of orders per customer\nWe calculate the total number of placed orders per customer. We create a **user** DataFrame to store the results.","2dfef696":"These parameters do not necessarily create the best fitting model (in terms of prediction score). The method .GridSearchCV( ) can make several trials to define the best parameters for our fitting model. ","0a7a4440":"To filter and select the columns of our desire on orders (the 2 first steps) there are numerous approaches:","9bd47725":"- Set as index the column(s) that describe uniquely each row (in our case \"user_id\" & \"product_id\")\n","9b9b8f69":"# 2. Create Predictor Variables\nWe are now ready to identify and calculate predictor variables based on the provided data. We can create various types of predictors such as:\n* <b>User predictors<\/b> describing the behavior of a user e.g. total number of orders of a user.\n* <b>Product predictors<\/b> describing characteristics of a product e.g. total number of times a product has been purchased.\n* <b>User & product predictors<\/b> describing the behavior of a user towards a specific product e.g. total times a user ordered a specific product.","b5f90bce":"So for user_id==1, the product 196 has been ordered on all of its last five orders, where the product 35951 has been ordered only one time.","935bf2a7":"Our goal is a to create a new column ('order_number_back') which indicates the last order as first, the second from the end as second and so on. To achieve this, we get the highest order_number (max) for user_id==1 and we subtract the order_number of each order from it. Thus for last order (order_number == 10) that will be: \n<br>\n<br>\n\n![order_number_back](https:\/\/latex.codecogs.com\/png.latex?%5Cdpi%7B200%7D%20%5Ctiny%20%5Cfontsize%7B%20%7D%7Bbaselineskip%7D%20order%5C_number%5C_back%28x%29%3D%20order%5C_number.max%28%29%20-order%5C_number%28x%29%3D10%20-%2010%20%3D%200)\n\nAnd as we want the last order to be marked as first, rather than zeroth, the previous formula will be:\n\n![](https:\/\/latex.codecogs.com\/png.latex?%5Cdpi%7B200%7D%20%5Ctiny%20%5Cfontsize%7B%20%7D%7Bbaselineskip%7D%20order%5C_number%5C_back%28x%29%3D%20order%5C_number.max%28%29%20-order%5C_number%28x%29%3D10%20-%2010%20&plus;1%3D%201)\n\n> Note that order_number.max( ) is a single value, where order_number is a 1-D array (column\/Series)\n\nBy applying the above formula to the orders of user_id == 1 we get the following results:\n![](https:\/\/i.imgur.com\/toda8ay.png)","1442a94b":"### 2.4.1 Merge uxp with user DataFrame\nHere we select to perform a left join of uxp with user DataFrame based on matching key \"user_id\"\n\n<img src=\"https:\/\/i.imgur.com\/WlI84Ud.jpg\" width=\"400\">\n\nLeft join, ensures that the new DataFrame will have:\n- all the observations of the uxp (combination of user and products) DataFrame \n- all the **matching** observations of user DataFrame with uxp based on matching key **\"user_id\"**\n\nThe new DataFrame as we have already mentioned, will be called **data**.","146a50bc":"## 1.4 Create a DataFrame with the orders and the products that have been purchased on prior orders (op)\nWe create a new DataFrame, named <b>op<\/b> which combines (merges) the DataFrames <b>orders<\/b> and <b>order_products_prior<\/b>. Bear in mind that <b>order_products_prior<\/b> DataFrame includes only prior orders, so the new DataFrame <b>op<\/b>  will contain only these observations as well. Towards this end, we use pandas' merge function with how='inner' argument, which returns records that have matching values in both DataFrames. \n<img src=\"https:\/\/i.imgur.com\/zEK7FpY.jpg\" width=\"400\">","396ffe89":"On the last columm (reordered) you can find out our response (y). \nThere are combinations of User X Product which they were reordered (1) on last order where other were not (NaN value).\n\nNow we manipulate the data_train DataFrame, to bring it into a structure for Machine Learning (X1,X2,....,Xn, y):\n- Fill NaN values with value zero (regards reordered rows without value = 1)","512fa867":"## 1.2 Load data from the CSV files\nInstacart provides 6 CSV files, which we have to load into Python. Towards this end, we use the .read_csv() function, which is included in the Pandas package. Reading in data with the .read_csv( ) function returns a DataFrame.","52162ef6":"The model has now the new parameters from GridSearchCV:","cbb1cb22":"- set product_id column as integer (mandatory action to proceed to the next step)","a5013201":"### 2.3.2.1 Calculate the numerator ('Times_Bought_N')\n\nTo answer this question we simply .groupby( ) user_id & product_id and we count the instances of order_id for each group.","3641c0c7":"Check that the formula has been applied to all users. Here we check the new column for a random user (user_id== 7):","77e01080":"# 4. Create predictive model (fit)\nThe Machine Learning model that we are going to create is based on the Random Forest Algorithm.\n\n\n## 4.1 Train Random Forest\n\nFrom Scikit-learn package we import the Random Forest Classifier.\n\nTo create the predictive model we:\n\n**1** - We create a DataFrame with all the predictors, named **X_train** and a Series with the response, named **y_train**\n\n**2** - We initiate a Random Forest Classifier of scikit-learn package. On RandomForestClassifier( ) you will notice different arguments:\n\n>> - n_estimators: defines the total number of different decision trees that will be made (can be tuned to provide better F1 score)\n>> - n_jobs: defines the total number of CPU processors that will be used to train the model. Value -1 means that all processors will be used (there is not need to be tuned)\n>> - random_state: a seed number so can reproduce the same models with our algorithm. Different seed numbers yield to slightly different models (there is not need to be tuned)\n\n**3** - Finally we train our model with the X_train and y_train data.","42984f0a":"# Introduction\nThis kernel has been created by the [Information Systems Lab](http:\/\/islab.uom.gr) to introduce students of the [University of Macedonia](http:\/\/www.uom.gr\/index.php?tmima=2&categorymenu=2), Greece to Machine Learning & Data Science.\n\n## The Instacart competition\nInstacart is an American company that operates as a same-day grocery delivery service. Customers select groceries through a web application from various retailers and delivered by a personal shopper. Instacart's service is mainly provided through a smartphone app, available on iOS and Android platforms, apart from its website.\n\nIn 2017 Instacart organised a Kaggle competition and provided to the community a sample dataset of over 3 million grocery orders from more than 200,000 Instacart users. The orders include 32 million basket items and 50,000 unique products. The objective of the competition was participants to **predict which previously purchased products will be in a user\u2019s next order**.\n\n## Objective\nThe objective of this Kernel is to introduce students to predictive business analytics with Python through the Instacart case. \n\nBy the time you finish this example, you will be able to:\n* Describe the steps of creating a predictive analytics model\n* Use Python and Pandas package to manipulate data\n* Use Python and Pandas package to create, combine, and delete DataFrames\n* Use Random Forests to create a predictive model\n* Apply the predictive model in order to make a prediction\n* Create a submission file for the competition of Instacart\n\n## Problem definition\nThe data that Instacart opened up include orders of 200,000 Instacart users with each user having between 4 and 100 orders. Instacart indicates each order in the data as prior, train or test. Prior orders describe the **past behaviour** of a user while train and test orders regard the **future behaviour that we need to predict**. \n\nAs a result, we want to predict which previously purchased products (prior orders) will be in a user\u2019s next order (train and test orders). \n\nFor the train orders Instacart reveals the results (i.e., the ordered products) while for the test orders we do not have this piece of information. Moreover, the future order of each user can be either train or test meaning that each user will be either a train or a test user. \n\nThe setting of the Instacart problem is described in the figure below (orders with yellow color denotes future orders of a user). \n\n<img src=\"https:\/\/i.imgur.com\/S0Miw3m.png\" width=\"350\">\n\nEach user has purchased various products during their prior orders. Moreover, for each user we know the order_id of their future order. The goal is to predict which of these products will be in a user's future order. \n\nThis is a **classification problem** because we need to predict whether each pair of user and product is a reorder or not. This is indicated by the value of the reordered variable, i.e. reordered=1 or reordered=0 (see figure below). \n\n<img src=\"https:\/\/i.imgur.com\/SxK2gsR.png\" width=\"350\">\n\nAs a result we need to come up and calculate various **predictor variables (X)** that will describe the characteristics of a product and the behaviour of a user regarding one or multiple products. We will do so by analysing the prior orders of the dataset. We will then use the train users to create a predictive model and the test users to make our actual prediction. As a result we create a table as the following one and we train an algorithm based on predictor variables (X) and response variable (Y).\n\n<img src=\"https:\/\/i.imgur.com\/Yb1CKAF.png\" width=\"600\">\n\n## Method\nOur method includes the following steps:\n1. <b>Import and reshape data<\/b>: This step includes loading CSV files into pandas DataFrames, tranform character variables to categorical variables, and create a supportive table.\n2. <b>Create predictor variables<\/b>: This step includes identifying and calculating predictor variables (aka features) from the initial datasets provided by Instacart. \n3. <b>Create train and test DataFrames<\/b>: In this step we create two distinct pandas DataFrames that will be used in the creation and the use of the predictive model.\n4. <b>Create predictive model (fit)<\/b>: In this step we train a predictive model through the train dataset.\n5. <b>Apply predictive model (predict)<\/b>: This step includes applying the model to predict the 'reordered' variable for the test dataset.\n6. <b>Create submission file<\/b>: In this final step we create the submission file with our predictions for Instacart's competition.\n7. <b>Get F1 score<\/b>: In this step we submit the produced and file and get the F1 score describing the accuracy of our prediction model.","a69e9333":"We now use the .head( ) method in order to visualise the first 10 rows of these tables. Click the Output button below to see the tables.","5f9efe52":"The denominator ('Order_Range_D') now can be created with simple operations between the columns of span DataFrame:","140e7734":"In order to calculate the order number where the user bought a product for first time ('first_order_number') we .groupby( ) by both user_id & product_id and we select the order_number column and we retrieve the .min( ) value.","0dbc61d7":"We convert the dictionary to a DataFrame and prepare it to extact it into a .csv file","9f387b6b":"## 2.2.2 What is the probability for a product to be reordered\nIn this section we want to find the products which have the highest probability of being reordered. Towards this end it is necessary to define the probability as below:\n<img src=\"https:\/\/latex.codecogs.com\/gif.latex?\\dpi{150}&space;\\large&space;probability\\&space;reordered\\&space;(product\\_id)=&space;\\frac{number\\&space;of\\&space;reorders}{total\\&space;number\\&space;of\\&space;orders\\&space;}\" title=\"probability\\ reordered\\ (product\\_id)= \\frac{number\\ of\\ reorders}{total\\ number\\ of\\ orders\\ }\" \/>\n\nExample: The product with product_id=2 is included in 90 purchases but only 12 are reorders. So we have:  \n\n<img src=\"https:\/\/latex.codecogs.com\/gif.latex?\\dpi{150}&space;\\large&space;p\\_reorder\\(product\\_id\\mathop{==}&space;2&space;)=&space;\\frac{12}{90}=&space;0,133\" title=\"\\large p\\_reorder\\(product\\_id\\mathop{==} 2 )= \\frac{12}{90}= 0,133\" \/>\n\n### 2.2.2.1 Remove products with less than 40 purchases - Filter with .shape[0]\nBefore we proceed to this estimation, we remove all these products that have less than 40 purchases in order the calculation of the aforementioned ratio to be meaningful.\n\nUsing .groupby() we create groups for each product and using .filter( ) we keep only groups with more than 40 rows. Towards this end, we indicate a lambda function.","1c74a63e":"### 2.3.2.2 Calculate the denumerator ('Order_Range_D')\nTo calculate the denumerator, we first calculate the total orders of each user & first order number for each user and every product purchase.\n\nIn order to calculate the total number of orders of each cutomer ('total_orders') we .groupby( ) only by the user_id, we keep the column order_number and we get its highest value with the aggregation function .mean()","b9ba1590":"### 2.2.2.2 Group products, calculate the mean of reorders\n\nTo calculate the reorder probability we will use the aggregation function mean() to the reordered column. In the reorder data frame, the reordered column indicates that a product has been reordered when the value is 1.\n\nThe .mean() calculates how many times a product has been reordered, divided by how many times has been ordered in total. \n\nE.g., for a product that has been ordered 9 times in total, where 4 times has been reordered, the ratio will be:\n\n![example ratio](https:\/\/latex.codecogs.com\/gif.latex?\\dpi{120}&space;\\large&space;&space;mean=&space;\\frac{0&plus;1&plus;0&plus;0&plus;1&plus;1&plus;0&plus;0&plus;1}{9}&space;=&space;0,44) \n\nWe calculate the ratio for each product. The aggregation function is limited to column 'reordered' and it calculates the mean value of each group.","51a07986":"### 2.3.3 How many times a customer bought a product on its last 5 orders\nFor this feature, we want to keep the last five orders for each customer and get how many times bought any product on them. To achieve this we need to:\n* Create a new variable ('order_number_back') which keeps the order_number for each order in reverse order\n* Keep only the last five orders for each order\n* Perform a .groupby( ) on users and products to get how many times each customer bought a product.\n* Create the following ratio:\n\n![](https:\/\/latex.codecogs.com\/gif.latex?times%5C%20last%20%5C5%5C%20%28of%5C%20a%5C%20purchased%5C%20product%5C%20from%5C%20a%5C%20user%29%3D%5Cfrac%7BTimes%5C%20a%5C%20user%5C%20bought%5C%20a%5C%20product%5C%20on%5C%20its%5C%20last%5C%205%5C%20orders%7D%7BTotal%5C%20orders%5C%20%3D5%7D)","cb4a7620":"**The submission file should have 75.000 predictions to be submitted in the competition**","9970d115":"### 2.3.2.3 Create the final ratio \"uxp_reorder_ratio\"\n\nWe merge **times** DataFrame, which contains the numerator, and **span** DataFrame, which contains the denumerator of our desired ratio. **As both variables derived from the combination of users & products, any type of join will keep all the combinations.**\n\n<img src=\"https:\/\/i.imgur.com\/h7m1bFh.jpg\" width=\"250\">","20e2ee93":"# 5. Apply predictive model (predict)\nThe model that we have created is stored in the **model** object.\nAt this step we predict the values for the test data and we store them in a new column in the same DataFrame.\n\nFor better results, we set a custom threshold to 0.21. The best custom threshold can be found through a grid search.","b1f4f8d3":"The information from the DataFrames that we have created to store our features (op, user, prd, uxp) is now stored on **data**. \n\nAs we won't use them anymore, we now delete them.","0ea76f72":"#### 2.3.3.2 Keep only the last five orders for each customer\nWith the use of order_number_back we can now select to keep only the last five orders of each customer:","5067d421":"The DataFrame can now be converted to .csv file. Pandas can export a DataFrame to a .csv file with the .to_csv( ) function.","00e8ffbe":"If you want to reduce the execution time of this Kernel you can use the following piece of code by uncomment it. This will trim the orders DataFrame and will keep a 10% random sample of the users. You can use this for experimentation.","16d1386d":"\nWe select to keep only the 'user_id', 'product_id' and the final feature 'uxp_reorder_ratio'\n","167eda40":"The new feature will be merged with the user DataFrame (section 2.1.1) which keep all the features based on users. We perform a left join as we want to keep all the users that we have created on the user DataFrame\n\n<img src=\"https:\/\/i.imgur.com\/wMmC4hb.jpg\" width=\"400\">","c4b57896":"The table contains for all the customers **(user_id)**: <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u27a1\ufe0e the orders **(order_id)** that they have placed accompanied with: <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u27a1\ufe0e the products **(product_id)** that have been bought in each order","c41e7945":"### 2.4.2 Delete previous DataFrames","07d461c9":"This step results in the following DataFrames:\n* <b>orders<\/b>: This table includes all orders, namely prior, train, and test. It has single primary key (<b>order_id<\/b>).\n* <b>order_products_train<\/b>: This table includes training orders. It has a composite primary key (<b>order_id and product_id<\/b>) and indicates whether a product in an order is a reorder or not (through the reordered variable).\n* <b>order_products_prior <\/b>: This table includes prior orders. It has a composite primary key (<b>order_id and product_id<\/b>) and indicates whether a product in an order is a reorder or not (through the reordered variable).\n* <b>products<\/b>: This table includes all products. It has a single primary key (<b>product_id<\/b>)\n* <b>aisles<\/b>: This table includes all aisles. It has a single primary key (<b>aisle_id<\/b>)\n* <b>departments<\/b>: This table includes all departments. It has a single primary key (<b>department_id<\/b>)","570a2875":"Before you are ready to submit your prediction to the competion, **ensure that**:\n- **You have used all of the offered data and not the 10% that was defined as an optional step on section 1.2**\n\nTo submit your prediction and get the F1 score you have to:\n1. Commit this notebook and wait for the results \n2. Go to view mode (where you see your notebook but you can't edit it)\n3. Click on the data section from your left panel\n4. Find the sub.csv (on outputs), below the section with the data from Instacart\n5. Click on \"Submit to competition\" button\n\nRegarding step 1:\n>This step might take long. If it exceeds 20-30 minutes it would be wise to check your code again. Kaggle won't inform you during commit if the notebook has:\n- syntax errors\n- if it exceeds 16 GB RAM\n- if it takes an algorirthms too much to train or predict\n\n>Any new commit:\n- can't take more than 9 hours\n- doesn't stop if it exceeds the 16 GB RAM - you will just receive an error of unsuccesful commit after 9 hours","d03014f3":"#### 2.3.3.1 Create a new variable ('order_number_back') which keeps the order_number for each order in reverse order\nIn this step we show how we create a reverse order_number for each customer. <br>\nHave a look at the orders of customer 1 (user_id == 1)","46bcfdf9":"### 2.2.2.3 Merge the new feature on prd DataFrame\nThe new feature will be merged with the prd DataFrame (section 2.2.1) which keep all the features based on products. We perform a left join as we want to keep all the products that we have created on the prd DataFrame\n<img src=\"https:\/\/i.imgur.com\/dOVWPKb.jpg\" width=\"400\">","8f4294a2":"And we move on with two final manipulations:\n- remove any undesired column (in our case user_id)","e59b35b5":"### 2.3.2 How frequently a customer bought a product after its first purchase\nThis ratio is a metric that describes how many times a user bought a product out of how many times she had the chance to a buy it (starting from her first purchase of the product):\n\n<img src=\"https:\/\/latex.codecogs.com\/gif.latex?\\dpi{120}&space;\\large&space;probability\\&space;reordered\\&space;(user\\_id\\&space;,&space;product\\_id)&space;=&space;\\frac{Times\\_Bought\\_N}{Order\\_Range\\_D}\" title=\"\\large probability\\ reordered\\ (user\\_id\\ , product\\_id) = \\frac{Times\\_Bought\\_N}{Order\\_Range\\_D}\" \/>\n\n* Times_Bought_N = Times a user bought a product\n* Order_Range_D = Total orders placed since the first user's order of a product\n\nTo clarify this, we examine the use with user_id:1 and the product with product_id:13032. User 1 has made 10 orders in total.She has bought the product 13032 **for first time in her 2nd order** and she has bought the same product 3 times in total. The user was able to buy the product 9 times (starting from her 2nd order until her last order). As a result, she has bought it 3 out of 9 times, meaning reorder_ratio=3\/9= 0,333.\n\nThe Order_Range_D variable is created using two supportive variables:\n* Total_orders = Total number of orders of each user\n* First_order_number = The order number where the customer bought a product for first time\n\nIn the next blocks we show how we create:\n1. The numerator 'Times_Bought_N'\n2. The denumerator 'Order_Range_D' with the use of the supportive variables 'total_orders' & 'first_order_number' \n3. Our final ratio 'uxp_order_ratio'","6d76369c":"## 2.2 Create product predictors\nWe create the following predictors:\n- 2.2.1 Number of purchases for each product\n- 2.2.2 What is the probability for a product to be reordered\n\n### 2.2.1 Number of purchases for each product\nWe calculate the total number of purchases for each product (from all customers). We create a **prd** DataFrame to store the results.","1dd9b26a":"# 3. Create train and test DataFrames\n## 3.1 Include information about the last order of each user\n\nThe **data** DataFrame that we have created on the previous chapter (2.4) should include two more columns which define the type of user (train or test) and the order_id of the future order.\nThis information can be found on the initial orders DataFrame which was provided by Instacart: \n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/jbatzRY.jpg\" >\n\n\nTowards this end:\n1. We select the **orders** DataFrame to keep only the future orders (labeled as \"train\" & \"test). \n2. Keep only the columns of our desire ['eval_set', 'order_id'] <span style=\"color:red\">**AND** <\/span> 'user_id' as is the matching key with our **data** DataFrame\n2. Merge **data** DataFrame with the information for the future order of each customer using as matching key the 'user_id'","c0317308":"## 2.3 Create user-product predictors\nWe create the following predictors:\n- 2.3.1 How many times a user bought a product\n- 2.3.2 How frequently a customer bought a product after its first purchase\n- 2.3.3 How many times a customer bought a product on its last 5 orders\n\n### 2.3.1 How many times a user bought a product\nWe create different groups that contain all the rows for each combination of user and product. With the aggregation function .count( ) we get how many times each user bought a product. We save the results on new **uxp** DataFrame.","74c7a031":"## 1.3 Reshape data\nWe transform the data in order to facilitate their further analysis. First, we convert character variables into categories so we can use them in the creation of the model. In Python, a categorical variable is called category and has a fixed number of different values.","35b26b4a":"For our submission file we initiate an empty dictionary. In this dictionary we will place as index the order_id and as values all the products that the order will have. If none product will be purchased, we have explicitly to place the string \"None\". This syntax follows the submission's file standards defined by the competition.","6a849bf0":"We merge it with our predictions (from chapter 5) using a left join:\n<img src=\"https:\/\/i.imgur.com\/KJubu0v.jpg\" width=\"400\">","1def5c07":"## Train XGBoost Classifier\nXGBoost Classifier is among the top fitting methods on winning solutions of Kaggle.","a64edbea":"## 3.3 Prepare the test DataFrame\nThe test DataFrame must have the same structure as the train DataFrame, excluding the \"reordered\" column (as it is the label that we want to predict).\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/lLJ7wpA.jpg\" >\n\n To create it, we:\n- Keep only the customers who are labelled as test","43f44393":"- Remove the columns that are predictors (in our case:'eval_set', 'order_id')","66a4f4d3":"\nWe divide the Times_Bought_N by the Order_Range_D for each user and product.","a0ec1fba":"# 6. Creation of Submission File\nTo submit our prediction to Instacart competition we have to get for each user_id (test users) their last order_id. The final submission file should have the test order numbers and the products that we predict that are going to be bought.\n\nTo create this file we retrieve from orders DataFrame all the test orders with their matching user_id:","88b32f39":"For these customers we get from order_products_train the products that they have bought. The matching keys are here two: the \"product_id\" & \"order_id\". A left join keeps all the observations from data_train DataFrame\n\n<img src=\"https:\/\/i.imgur.com\/kndys9d.jpg\" width=\"400\">","a44d2a74":"In the next code block we perform the same calculations for all users. We .groupby( ) op by the user_id and we select the column order_number. With .transform(max) we request to get the highest number of the column order_number for each group & with minus (-) op.order_number we substract the order_number of each row. Finally we add 1 for the reason mentioned above.\n\n> .transform( ) perform some group-specific computations and return a like-indexed object. ","26eb38f3":"- Set as index the column(s) that uniquely describe each row (in our case \"user_id\" & \"product_id\")\n","ccf9f22d":"We merge the first order number with the total_orders DataFrame. As total_orders refers to all users, where first_order_no refers to unique combinations of user & product, we perform a right join:\n<img src=\"https:\/\/i.imgur.com\/bhln0tn.jpg\" width=\"250\">","9556bbcd":"## 2.4 Merge all features\nWe now merge the DataFrames with the three types of predictors that we have created (i.e., for the users, the products and the combinations of users and products).\n\nWe will start from the **uxp** DataFrame and we will add the user and prd DataFrames. We do so because we want our final DataFrame (which will be called **data**) to have the following structure: \n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/mI5BbFE.jpg\" >\n\n\n\n\n","44336c97":"### 2.1.2 How frequent a customer has reordered products\n\nThis feature is a ratio which shows for each user in what extent has products that have been reordered in the past: <br>\nSo we create the following ratio: <br>\n\n<img src=\"https:\/\/latex.codecogs.com\/gif.latex?\\dpi{120}&space;\\large&space;probability\\&space;reordered\\&space;(user\\_id)=&space;\\frac{total\\&space;times\\&space;of\\&space;reorders}{total\\&space;number\\&space;of\\&space;purchased\\&space;products\\&space;from\\&space;all\\&space;baskets}\" title=\"probability\\ reordered\\ (user\\_id)= \\frac{total\\ times\\ of\\ reorders}{total\\ number\\ of\\ purchased\\ products\\ from\\ all\\ baskets}\" \/>\n\nThe nominator is a counter for all the times a user has reordered products (value on reordered=1), the denominator is a counter of all the products that have been purchased on all user's orders (reordered=0 & reordered=1).\n\nE.g., for a user that has ordered 6 products in total, where 3 times were reorders, the ratio will be:\n\n![example ratio](https:\/\/latex.codecogs.com\/gif.latex?\\dpi{120}&space;\\large&space;&space;mean=&space;\\frac{0&plus;1&plus;0&plus;0&plus;1&plus;1}{6}&space;=&space;0,5) \n\nTo create the above ratio we .groupby() order_products_prior by each user and then calculate the mean of reordered.\n","e0c08419":"### 2.3.2.4 Merge the final feature with uxp DataFrame\nThe new feature will be merged with the uxp DataFrame (section 2.3.1) which keep all the features based on combinations of user-products. We perform a left join as we want to keep all the user-products that we have created on the uxp DataFrame\n\n<img src=\"https:\/\/i.imgur.com\/hPJXBuB.jpg\" width=\"250\">","6c4fcf67":"## 3.2 Prepare the train DataFrame\nIn order to prepare the train Dataset, which will be used to create our prediction model, we need to include also the response (Y) and thus have the following structure:\n\n<img style=\"float: left;\" src=\"https:\/\/i.imgur.com\/PDu2vfR.jpg\" >\n\nTowards this end:\n1. We keep only the customers who are labelled as \"train\" from the competition\n2. For these customers we get from order_products_train the products that they have bought, in order to create the response variable (reordered:1 or 0)\n3. We make all the required manipulations on that dataset and we remove the columns that are not predictors\n\nSo now we filter the **data** DataFrame so to keep only the train users:","8030ea62":"> Our final DataFrame should not have any NaN values, otherwise the fitting process (chapter 4) will throw an error!","ce56e7d2":"To fulfill step 3, we merge on **data** DataFrame the information for the last order of each customer. The matching key here is the user_id and we select a left join as we want to keep all the observations from **data** DataFrame.\n\n<img src=\"https:\/\/i.imgur.com\/m3pNVDW.jpg\" width=\"400\">","40b41b01":"#### 2.3.3.5 Merge the final feature with uxp DataFrame\nThe new feature will be merged with the uxp DataFrame (section 2.3.1) which keep all the features based on combinations of user-products. We perform a left join as we want to keep all the user-products that we have created on the uxp DataFrame\n\n<img src=\"https:\/\/i.imgur.com\/ObfHDPl.jpg\" width=\"400\">","1ab6e103":"#### 2.3.3.6 Fill NaN values\nIf you check uxp DataFrame you will notice that some rows have NaN values for our new feature. This happens as there might be products that the customer did not buy on its last five orders. For these cases, we turn NaN values into zero (0) with .fillna(0) method.","a9e18c1a":"- Remove columns which are not predictors (in our case: 'eval_set','order_id')","a510316a":"#### 2.2.2.4 Fill NaN values\nAs you may notice, there are product with NaN values. This regards the products that have been purchased less than 40 times from all users and were not included in the p_reorder DataFrame. **As we performed a left join with prd DataFrame, all the rows with products that had less than 40 purchases from all users, will get a NaN value.**\n\nFor these products we their NaN value with zero (0):"}}