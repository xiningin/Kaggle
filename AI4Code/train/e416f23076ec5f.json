{"cell_type":{"dd6a2cbb":"code","c3de94a1":"code","698603e0":"code","551200de":"code","eb24a02c":"code","6c1ca965":"code","5ac0d2db":"code","365b801c":"code","5616226a":"code","a959170a":"code","4a7bc75e":"code","220034a2":"code","d26a60b6":"code","43697a3b":"code","5c131783":"code","a33d4f36":"code","1be21315":"markdown","02368795":"markdown","0c4da1e7":"markdown","08754bda":"markdown","4f6e24fe":"markdown"},"source":{"dd6a2cbb":"import numpy as np\nimport pandas as pd \nimport os","c3de94a1":"train_dir = '\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/train'\nval_dir = '\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/valid'\ntest_dir='\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/test'\nprint(\"Path Direcorty: \",os.listdir(\"\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\"))\nprint(\"Train Direcorty: \",os.listdir(\"\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/train\"))\nprint(\"Test Direcorty: \",os.listdir(\"\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/test\"))\nprint(\"Validation Direcorty: \",os.listdir(\"\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/valid\"))","698603e0":"print(\"Training Inclusion data:\",len(os.listdir(train_dir+'\/'+'Inclusion')))\n\nprint(\"Testing Inclusion data:\",len(os.listdir(test_dir+'\/'+'Inclusion')))\n\nprint(\"Validation Inclusion data:\",len(os.listdir(val_dir+'\/'+'Inclusion')))","551200de":"import tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","eb24a02c":"# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n# Flow training images in batches of 10 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        train_dir,\n        target_size=(200, 200),\n        batch_size=10,\n        class_mode='categorical')\n\n# Flow validation images in batches of 10 using test_datagen generator\nvalidation_generator = test_datagen.flow_from_directory(\n        val_dir,\n        target_size=(200, 200),\n        batch_size=10,\n        class_mode='categorical')","6c1ca965":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy') > 0.98 ):\n            print(\"\\nReached 98% accuracy so cancelling training!\")\n            self.model.stop_training = True ","5ac0d2db":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (2,2), activation='relu', input_shape=(200, 200, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (2,2), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (2,2), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(6, activation='softmax')\n])\n\nmodel.summary()","365b801c":"model.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\nprint('Compiled!')","5616226a":"callbacks = myCallback()\nhistory = model.fit(train_generator,\n        batch_size = 32,\n        epochs=20,\n        validation_data=validation_generator,\n        callbacks=[callbacks],\n        verbose=1, shuffle=True)","a959170a":"import matplotlib.pyplot as plt \nplt.figure(1)  \n# summarize history for accuracy  \nplt.subplot(211)  \nplt.plot(history.history['accuracy'])  \nplt.plot(history.history['val_accuracy'])  \nplt.title('model accuracy')  \nplt.ylabel('accuracy')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \n   \n # summarize history for loss  \n   \nplt.subplot(212)  \nplt.plot(history.history['loss'])  \nplt.plot(history.history['val_loss'])  \nplt.title('model loss')  \nplt.ylabel('loss')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \nplt.show()\n","4a7bc75e":"# First, we are going to load the file names and their respective target labels into numpy array! \nfrom sklearn.datasets import load_files\nimport numpy as np\n\ntest_dir = '\/kaggle\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/test'\n\ndef load_dataset(path):\n    data = load_files(path)\n    files = np.array(data['filenames'])\n    targets = np.array(data['target'])\n    target_labels = np.array(data['target_names'])\n    return files,targets,target_labels\n    \nx_test, y_test,target_labels = load_dataset(test_dir)","220034a2":"no_of_classes = len(np.unique(y_test))\nno_of_classes","d26a60b6":"from keras.utils import np_utils\ny_test = np_utils.to_categorical(y_test,no_of_classes)\n","43697a3b":"# We just have the file names in the x set. Let's load the images and convert them into array.\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img\n\ndef convert_image_to_array(files):\n    images_as_array=[]\n    for file in files:\n        # Convert to Numpy Array\n        images_as_array.append(img_to_array(load_img(file)))\n    return images_as_array\n\nx_test = np.array(convert_image_to_array(x_test))\nprint('Test set shape : ',x_test.shape)","5c131783":"x_test = x_test.astype('float32')\/255","a33d4f36":"# Let's visualize test prediction.\n\ny_pred = model.predict(x_test)\n\n# plot a raandom sample of test images, their predicted labels, and ground truth\nfig = plt.figure(figsize=(16, 9))\nfor i, idx in enumerate(np.random.choice(x_test.shape[0], size=16, replace=False)):\n    ax = fig.add_subplot(4, 4, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(x_test[idx]))\n    pred_idx = np.argmax(y_pred[idx])\n    true_idx = np.argmax(y_test[idx])\n    ax.set_title(\"{} ({})\".format(target_labels[pred_idx], target_labels[true_idx]),\n                 color=(\"green\" if pred_idx == true_idx else \"red\"))","1be21315":"## Here, you can see the dataset distribution for 'Inclusion' surface defect. Rest of the dataset also follow the same distribution","02368795":"# About the dataset\nThis dataset was downloaded from NEU Metal Surface Defects Databse which contains six kinds of typical surface defects of the hot-rolled steel strip are collected, i.e., rolled-in scale (RS), patches (Pa), crazing (Cr), pitted surface (PS), inclusion (In) and scratches (Sc). The database includes 1,800 grayscale images: 300 samples each of six different kinds of typical surface defects.\n\nBut for this analysis, the dataset divided into 3 directories. The training directory contains 276 images of each class from the 300 images. The rest 24 images of each class also divided into tests and valid datasets.\n\nI don't know for sure about the dataset sharing as it's not my own data that's why I kept it private.","0c4da1e7":"## Stop training the model at 98% traning accuracy","08754bda":"## Pre-processing the data","4f6e24fe":"# Test Result visualization"}}