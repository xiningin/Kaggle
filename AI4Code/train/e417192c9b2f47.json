{"cell_type":{"e2d4a235":"code","18cb4fa8":"code","143cafe0":"code","f27dbce6":"code","734fa9a3":"code","05804693":"code","1dddbe3b":"code","a44b6315":"code","38070abe":"code","37fd4ea6":"code","4d1f1fd3":"code","0723785c":"code","c381aab3":"code","d048825a":"code","db2f7e16":"code","e1b3fd40":"code","56602cde":"code","2b05aa23":"code","60172912":"code","bdb42e43":"code","a3027526":"code","d27e0983":"code","40f8875b":"code","9eab88b2":"code","75cb4f0c":"code","3b2467f9":"markdown","31ee43e6":"markdown","5bf2cbac":"markdown","82df2474":"markdown","f4795c92":"markdown","cd7be21c":"markdown"},"source":{"e2d4a235":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18cb4fa8":"# Import modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","143cafe0":"df = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv', index_col=14)","f27dbce6":"# Drop id column, convert duration to minutes\ndf.drop('id', axis=1, inplace=True)\ndf['duration_m'] = df['duration_ms']\/60000\ndf.drop('duration_ms', axis=1, inplace=True)","734fa9a3":"df.head()","05804693":"# Plot distribution of each column\ndf.hist(figsize = (18,18))\nplt.show()","1dddbe3b":"# Plot popularity vs year of track\nsns.jointplot(df['year'],df['popularity'])","a44b6315":"# Heat map display of correlation levels\nplt.figure(figsize=(20, 14))\nsns.set(style=\"whitegrid\")\ncorr = df.corr()\nax = sns.heatmap(corr,annot=True,cmap=\"coolwarm\")\nax.set_title('Correlation Map')\nplt.show()","38070abe":"# Cluster map based on correlation levels\nsns.clustermap(corr,cmap=\"coolwarm\")","37fd4ea6":"# Group tracks by artist, plot most popular\nplt.figure(figsize=(20, 14))\nx = df.groupby(\"artists\")[\"popularity\"].sum().sort_values(ascending=False).head(20)\nax = sns.barplot(x.index, x)\nax.set_title('Most Popular Artists')\nax.set_ylabel('Popularity')\nax.set_xlabel('Artists')\nplt.xticks(rotation = 90)\nplt.show()","4d1f1fd3":"# Etablish another column that shows the average popularity of an artist's other songs\nmean_pop = df.groupby(['artists'])['popularity'].mean()\nmean_dict = mean_pop.to_dict()\ndef converter(artist):\n    if artist in mean_dict.keys():\n        return mean_dict[artist]\n    else:\n        return 0\ndf['artist_mean_pop'] = df['artists'].apply(converter)","0723785c":"#Establish model features and split data between training and test set\nfeatures = ['danceability','year','tempo','energy','valence','speechiness','instrumentalness','acousticness','duration_m','loudness','artist_mean_pop','explicit']\nx = df[features].values\ny = df['popularity'].values\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=1)","c381aab3":"# Instantiate random forest regressor\nrfr = RandomForestRegressor()","d048825a":"# Fit the model\nrfr.fit(x_train,y_train)","db2f7e16":"# Predict values \nrfr_pred = rfr.predict(x_test)","e1b3fd40":"# Mean absolute error of model\nmetrics.mean_absolute_error(y_test,rfr_pred)","56602cde":"# Root mean squared error of model\nnp.sqrt(metrics.mean_squared_error(y_test,rfr_pred))","2b05aa23":"# R squared score of model\nmetrics.r2_score(y_test,rfr_pred)","60172912":"# Band\/artist data frame\ndef band_df(band):\n    return df[df['artists'] == band]\n\n# Predict the popularity of specific songs\ndef song_popularity_prediction(artist, song, prnt=False):\n    \"\"\"Save the model into pickle dump, allows targeting of specific rows for desired prediction\"\"\"\n    data_frame = band_df(artist) \n    import pickle\n    mymodle = open('fordeploy.pkl', 'wb')\n    pickle.dump(rfr,mymodle,protocol=pickle.HIGHEST_PROTOCOL)\n    mymodle.close()\n    mymodel = open('fordeploy.pkl', 'rb')\n    model = pickle.load(mymodel)\n    example = data_frame.loc[song].filter(features)\n    data = np.array([example.values]).reshape(1,-1)\n    prediction = model.predict(data)\n    actual = data_frame.loc[song]['popularity']\n    if not prnt:\n        return prediction\n    else:\n        print(\"Predicted popularity for the song {} is {}. The actual popularity is {}.\".format(song, prediction, actual))","bdb42e43":"# Input band with format: \"['The Beatles']\" output plot of predicted values vs actual values\ndef analyze_band_predictions(band):  \n    artist_df = band_df(band)\n    actual = []\n    predicted = []\n    \n    for i in range(artist_df.shape[0]):\n        actual.append(artist_df.iloc[i]['popularity'])\n        predicted.append(int(song_popularity_prediction(band, artist_df.iloc[i].name)))\n\n    plt.figure(figsize=(20, 14))\n    plt.scatter(actual,predicted)\n    plt.title('Predicted Popularity of {} Songs'.format(band))\n    plt.ylabel('Predicted')\n    plt.xlabel('Actual')","a3027526":"# Look at metrics for a specific song\nphish = band_df(\"['Phish']\")\nphish.loc['You Enjoy Myself']","d27e0983":"song_popularity_prediction(\"['Phish']\", 'You Enjoy Myself', prnt=True)","40f8875b":"song_popularity_prediction(\"['Phish']\", 'Sample in a Jar', prnt=True)","9eab88b2":"song_popularity_prediction(\"['Grateful Dead']\", 'Eyes of the World', prnt=True)","75cb4f0c":"analyze_band_predictions(\"['Phish']\")","3b2467f9":"### Evaluate","31ee43e6":"### Build Model","5bf2cbac":"## Random Forest Regression","82df2474":"### Case Study","f4795c92":"# Random Forest Regression for Predicting Song Popularity","cd7be21c":"## Analyze Data"}}