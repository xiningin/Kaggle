{"cell_type":{"3cc22fe9":"code","8ad4256b":"code","2ebee778":"code","09d17f0b":"code","6259fe8f":"code","d301be88":"code","0f9ad73d":"code","8e00da9c":"code","a87d54d9":"code","8c4ec397":"code","ee3c28c0":"code","74d2f781":"code","ded297ef":"code","f29d387e":"code","4047cbe6":"code","fef5b757":"code","b8687c60":"code","159a30a4":"code","7d976337":"code","6293591d":"markdown","64c7a066":"markdown","ae45d20c":"markdown","4d4f7c88":"markdown","631ea9ef":"markdown","685e864f":"markdown","0f31e46d":"markdown","f4911011":"markdown","680fccc0":"markdown","d7ee4268":"markdown","f5caa46c":"markdown","927b45a9":"markdown","ac1f052d":"markdown","aefb2e91":"markdown","b73faae9":"markdown"},"source":{"3cc22fe9":"! python -m pip install pythonnet \n! python -m pip install numpy \n! python -m pip install matplotlib ","8ad4256b":"! python -m pip install clr","2ebee778":"import clr # needs the \"pythonnet\" package\nimport sys\nimport os\nimport time\n\n# check whether python is running as 64bit or 32bit\n# to import the right .NET dll\nimport platform\nbits, name = platform.architecture()\n\nif bits == \"64bit\":\n\tfolder = [\"x64\"]\nelse:\n\tfolder = [\"x86\"]\n\nsys.path.append(os.path.join(\"..\", *folder))","09d17f0b":"# AddReference makes the following `From Lepton ...` line \n# run by hooking the LeptonUVC dll into the python import \n# mechanism\nclr.AddReference(\"LeptonUVC\")\n\nfrom Lepton import CCI","6259fe8f":"found_device = None\nfor device in CCI.GetDevices():\n    if device.Name.startswith(\"PureThermal\"):\n        found_device = device\n        break\n\nif not found_device:\n    print(\"Couldn't find lepton device\")\nelse:\n    lep = found_device.Open()","d301be88":"str(lep.oem.GetSoftwareVersion())","0f9ad73d":"lep.sys.GetCameraUpTime()","8e00da9c":"lep.sys.RunFFCNormalization()","a87d54d9":"lep.vid.GetPcolorLut()","8c4ec397":"lep.sys.SetGainMode(CCI.Sys.GainMode.LOW)","ee3c28c0":"lep.vid.SetPcolorLut(1)\n","74d2f781":"from System import Enum\nlist(Enum.GetNames(CCI.Vid.PcolorLut))","ded297ef":"clr.AddReference(\"ManagedIR16Filters\")\nfrom IR16Filters import IR16Capture, NewIR16FrameEvent, NewBytesFrameEvent\n\nimport numpy\nfrom matplotlib import pyplot as plt\n# %matplotlib inline is Jupyter magic to display plot results inline in the \n# notebook\n%matplotlib inline\n\ncapture = None","f29d387e":"from collections import deque\n\n# change maxlen to control the number of frames of history we want to keep\nincoming_frames = deque(maxlen=10)\ndef got_a_frame(short_array, width, height):\n    incoming_frames.append((height, width, short_array))\n\nif capture != None:\n    # don't recreate capture if we already made one\n    capture.RunGraph()\nelse:\n    capture = IR16Capture()\n    capture.SetupGraphWithBytesCallback(NewBytesFrameEvent(got_a_frame))\n    capture.RunGraph()","4047cbe6":"capture.StopGraph()","fef5b757":"def short_array_to_numpy(height, width, frame):\n    return numpy.fromiter(frame, dtype=\"uint16\").reshape(height, width)","b8687c60":"from matplotlib import cm\n\nheight, width, net_array = incoming_frames[-1]\narr = short_array_to_numpy(height, width, net_array)\n\nplt.imshow(arr, cmap=cm.plasma)","159a30a4":"try:\n    lep.rad.SetTLinearEnableStateChecked(True)\n    print(\"this lepton supports tlinear\")\nexcept:\n    print(\"this lepton does not support tlinear\")","7d976337":"height, width, net_array = incoming_frames[-1]\narr = short_array_to_numpy(height, width, net_array)\n\ndef centikelvin_to_celsius(t):\n    return (t - 27315) \/ 100\n\ndef to_fahrenheit(ck):\n    c = centikelvin_to_celsius(ck)\n    return c * 9 \/ 5 + 32\n\n# get the max image temp\nprint(\"maximum temp {:.2f} \u00baF \/ {:.2f} \u00baC\".format(\n    to_fahrenheit(arr.max()), centikelvin_to_celsius(arr.max())))\n# get the average image temp\nprint(\"average temp {:.2f} \u00baF \/ {:.2f} \u00baC\".format(\n    to_fahrenheit(arr.mean()), centikelvin_to_celsius(arr.mean())))","6293591d":"You can assign the palette with either its index or\nits name","64c7a066":"Start saving incomming images in a queue with a max size so we don't \nuse too much memory. Set maxlen higher values to keep more history. ","ae45d20c":"The full list of available palettes is:","4d4f7c88":"Grab the most recent image in the queue (python indexes negative numbers\nbackwards from the end of arrays) and display it with matplotlib.\n\nIf the graph is currently running, this should update the frame everytime you\nre-run the following cell. ","631ea9ef":"Look for a PureThermal USB device.","685e864f":"## Import the CCI SDK","0f31e46d":"Skip executing the next cell to keep `incomming_frames`\nalways stocked with new images","f4911011":"## Streaming frames from the Lepton\n\nMake sure to keep track of the capture object because creating more than one instance\nof it during a single session can cause problems. \n\nIR16Filters is a library for grabbing Y16 (16 bit greyscale) images from a webcam\nbecause most webcam libraries don't support this format.\n\nnumpy is a library for number crunching in python that we can use to hold incomming \nimages as 2-dimensional arrays, and matplotlib supports displaying and colorizing \nincomming images.","680fccc0":"Run a FFC. If this command executes successfully, the shutter on the lepton should close and open.","d7ee4268":"Get the current palette (**P**seudo-**color** **L**ook **U**p **T**able)","f5caa46c":"## Setup Python's path for the Lepton .NET dlls\n\nNote that because this is a .NET library, it uses .NET naming conventions \nand requires importing `clr` (provided by the `pythonnet` package on pip).\n\nThis first cell adds the right version (64 bit vs 32 bit) of the library to \npython's path based on the bit-depth of the python thats currently running. ","927b45a9":"You can show the image with a variety of different colormaps. This doesn't use the lepton\npalette, because we are getting the raw 16-bit image and matplotlib is colorizing it for display purposes. \n\n`cm.viridis` and `cm.plasma` are both perceptually uniform and should use most of their colorspaces. `cm.bwr` gives a nice hot and cold effect. A full list of avaiable colormaps can be found in \nthe matplotlib docs:\n[matplotlib.org\/examples\/color\/colormaps_reference.html](https:\/\/matplotlib.org\/examples\/color\/colormaps_reference.html)","ac1f052d":"Get the current camera uptime. This is a good way to test if the \nconnection is working.","aefb2e91":"# Interacting with the Lepton from Python\n\nIf you're new to Jupyter these are the basics. Code is organized into \"cells\" which are blocks of code that can \nbe run one at a time, in any order.\nYou can execute blocks by highlighting the cell and entering shift+enter or by clicking Run > Run Selected Cells.\n\nNote that a line begining with `!` will be executed in the shell\/command prompt of your system. Use the following cell to make\nsure you have all of the dependencies of this notebook.","b73faae9":"## Dealing with temperatures\n\nIf you are using a Lepton 2.5 or 3.5, radiometry should be enabled. When radiometry is on, \npixel values are in centikelvin so that they can be represented by unsigned 16 bit integers.\nNote that 100cK = 1K. \nConverting to Celcius can be done by dividing by 100 and subtracting absolute zero as shown below.\n\nThe following only works if the camera supports tlinear. Use the block \nbelow to test support."}}