{"cell_type":{"a6311f21":"code","37e970ae":"code","f324e312":"code","9114fd38":"code","5f8bc8be":"code","9cc20ec6":"code","a8d09afc":"code","628c1d2d":"code","a926fe94":"markdown","81e952d8":"markdown","ff4b1df0":"markdown","5c7716f9":"markdown"},"source":{"a6311f21":"!pip install rapidfuzz --progress-bar off","37e970ae":"import pandas as pd\nimport plotly.express as px","f324e312":"# There are issues with the headers, apparently?\n# To handle it, I use alternative encoding and replace the column names accordingly.\n\ncolumn_names = ['country', 'region', 'subregion', 'LDC', 'africa_subregion',\n                'africa_region', 'total', 'male', 'female']\n\nyouth_df = pd.read_csv('..\/input\/youth-and-adult-literacy-rate-around-the-globe\/Youth_15to24Yrs.csv',\n                       encoding = 'unicode_escape')\nadult_df = pd.read_csv('..\/input\/youth-and-adult-literacy-rate-around-the-globe\/Adults_15YrsAndUp.csv',\n                       encoding = 'unicode_escape')\n\nyouth_df.columns = column_names\nadult_df.columns = column_names","9114fd38":"print(youth_df.shape)\nprint(adult_df.shape)","5f8bc8be":"adult_df.tail()","9cc20ec6":"# Read ISO country column for plotting purposes\niso_df = pd.read_csv('..\/input\/country-mapping-iso-continent-region\/continents2.csv')[['name', 'alpha-3']]\niso_df.tail()","a8d09afc":"from rapidfuzz import process\n\n# Helper function to apply\ndef find_standard_name(country):\n    result, score, index = process.extractOne(country, iso_df['name'])\n    return result\n\n# Replace the names first\nadult_df['standard_name'] = adult_df['country'].apply(find_standard_name)\n\n# Do a left join with the following specification:\n# - use 'standard_name' as the key on adult_df\n# - set 'name' as index on iso_df, and use that index as key on iso_df\nadult_df_with_iso = adult_df.merge(iso_df.set_index('name'), how = 'left',\n                                   left_on = 'standard_name', right_index = True)\n\n# Display the dataframe\n# Note: many countries have missing data.\nadult_df_with_iso.tail(20)","628c1d2d":"# Plot a chloropleth map\nfig = px.choropleth(adult_df_with_iso,\n                    locations=\"alpha-3\",  # column with 3-letter ISO code\n                    color=\"total\",        # column to color the map for, i.e. level of literacy\n                    hover_name=\"country\", # column to show when hovering\n                    color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","a926fe94":"# Use plotly to make map visuals\n\nWe will want to plot each country with a color representing its level of literacy rate. Such plots are called \"choropleth maps\".","81e952d8":"# Introduction\n\nThis notebook will walk through the process of reading the data up until making the visualizations.  And handling anything that comes in our way in-between. Simple, lightweight, and for fun. Enjoy!","ff4b1df0":"# Fuzzy matching\n\nMy recent fascination is the usefulness of fuzzy matching. Given close enough sources and targets, we can match strings without needing complete similarity.\n\nIt is immensely useful when matching city names, country names (our case right now), or people's names with alternate spellings.\n\n---\n\nNote: fuzzymatching for this case actually feels like an overkill. But the alternatives are less interesting: manually adjusting the data (tedious) or finding alternative ISO-code reference (how can I know which ISO-code is exactly the one I need?).","5c7716f9":"# Closing\n\nThere you have it! Main takeaways from this notebook are fuzzy matching and using `plotly` to make chloropleth maps.\n\nI hope this notebook is useful for you. Feel free to upvote if you like it! If you'd like to retry and use this notebook as your base for further coding, you're welcome to fork (Copy and Edit).\n\nKeep learning and happy data-sciencing!"}}