{"cell_type":{"754c972f":"code","92792924":"code","e273e302":"code","0abe8ac0":"code","1ad85a08":"code","c2af6f92":"code","3a0ee02e":"code","648e0b6c":"code","f8dac6cd":"code","a1c65e5e":"code","27191934":"code","3d636857":"code","0c7546dc":"code","61fcec41":"code","2baeabcf":"code","ef3ee639":"code","31eaec1e":"code","2c4a4edb":"code","b27491cb":"code","e4b2a400":"code","69ace14d":"code","d2a33d01":"code","2a29df61":"code","11fb80ef":"code","3211b61c":"code","bc9ceaff":"code","2906c0f9":"code","6c11c3b9":"code","fb5d0966":"code","31b06283":"code","002285e1":"code","7099998c":"code","63ddb476":"code","d51a3e93":"code","7f6da148":"code","7b9608c6":"code","3d5839e7":"code","230afdee":"code","2cb79782":"code","1ea57fa3":"code","745f5a9e":"code","6475a31a":"code","ebb2d80e":"code","feb84e4c":"code","090a08de":"code","3239cf00":"code","aba23613":"code","56d6e5a3":"code","a4973f2d":"code","28efd9c2":"code","ebbfd116":"code","7b3b2c18":"code","17a19779":"code","05e587fd":"code","7737411d":"code","49cfca02":"code","6d8063b8":"code","41a9c247":"code","73f59ed0":"code","c69ac91e":"code","57851087":"code","85185dd2":"code","5b367daf":"code","0182eecc":"code","4f96650b":"code","c3e8cb2b":"code","13002ae6":"markdown","98a1981d":"markdown","fc10a294":"markdown","917d8101":"markdown","c328d804":"markdown","96042a20":"markdown","e84d251d":"markdown","27633bf8":"markdown","6783b639":"markdown","fcc781e5":"markdown","4d4c7ecf":"markdown","b00c6bda":"markdown","cbf7fe58":"markdown","bdf2a458":"markdown","10a78f9a":"markdown","1b257897":"markdown","786267e1":"markdown","ff833e2e":"markdown","0b941477":"markdown"},"source":{"754c972f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92792924":"## Reading the data in Dataframe\n\ndf = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf.head()\n","e273e302":"## Column information\n\ndf.info()","0abe8ac0":"df.isnull().sum()","1ad85a08":"for feature in df.columns:\n    if df[feature].isnull().sum() > 1:\n        print(\"{} Feature has {}% Missing values \".format(feature,round(df[feature].isnull().mean()*100,1)))","c2af6f92":"## Copy the data from orginal DF to duplicate DF1\n\ndf1 = df.copy()\ndf1.head()","3a0ee02e":"## Update the null vales with respective value in society\n\ndf1['society'].fillna(\"Info Not available\",inplace = True)\ndf1.head()","648e0b6c":"df1['size'].unique()","f8dac6cd":"## We have 0.1% null values in size feature, so we can update with respective values\n\ndf1['size'].fillna('0',inplace = True)","a1c65e5e":"## Update the null vales with respective value in bathroom feature\n\ndf1['bath'].fillna(1.0,inplace = True)","27191934":"## Update the null vales with respective value in balcony feature\n\ndf1['balcony'].fillna(0.0,inplace = True)","3d636857":"## Find out varies values in total_sqft feature\n\ndef is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True\n\n\ndf1[~df1['total_sqft'].apply(is_float)]","0c7546dc":"def convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2 ## take a mean value for range value\n    try:\n        return float(x) ## Directly return float value if it is same\n    except:\n        return None ## otherwise make Null","61fcec41":"df1.total_sqft.isnull().sum() ## Before executing the function","2baeabcf":"## pass the total_sqft value to the convert_sqft_to_num function\n\ndf1.total_sqft = df1.total_sqft.apply(convert_sqft_to_num) ","ef3ee639":"df1.total_sqft.isnull().sum() ## After executing the function","31eaec1e":"## Remove the records if the total_sqft column has null value based on index comparision\n\ndf1.total_sqft.dropna(axis='index',inplace=True)","2c4a4edb":"df1.total_sqft.isnull().sum()","b27491cb":"df1","e4b2a400":"\ndf1 = df1.astype({'bath':np.int32, 'balcony':np.int32})","69ace14d":"df1.info()","d2a33d01":"## Creating new size column which can only have numerical value alone\n\ndf1['bhk'] = df1['size'].apply(lambda x : int(x.split()[0]))\ndf1","2a29df61":"## Creating new price_per_sqr column which can evoluate the price per Sqr feet\n\ndf1['price_per_sqr'] = round(df1['price'] * 100000 \/ df1['total_sqft'],2) \n\ndf1","11fb80ef":"## Finding unique location\n\ndf1.location.unique()","3211b61c":"len(df1.location.unique())","bc9ceaff":"## Locaton count value pair\n\nlocation_stats = df1['location'].value_counts() \nlocation_stats","2906c0f9":"location_stats.values.sum()","6c11c3b9":"## Locaton data point count > 10\n\nlen(location_stats[location_stats > 10] )","fb5d0966":"## Locaton data point count < 10\n\nlen(location_stats[location_stats <= 10])","31b06283":"## Identify the location which has below 10 data point\n\nbelow_10_dp = location_stats[location_stats <= 10]\nbelow_10_dp","002285e1":"## Replace the location name by others which is present in \"below_10_dp\" list\n\ndf1['location'] = df1['location'].apply(lambda x : 'Others' if x in below_10_dp else x)\ndf1","7099998c":"len(df1.location.unique())","63ddb476":"df2 = df1.copy()","d51a3e93":"df2[(df2.total_sqft\/df2.bhk) < 300].head()","7f6da148":"l = len(df2[df2.total_sqft\/df2.bhk<300])\nprint(\"Around {}% of records become otliers with this condition\".format(round(l\/len(df) * 100,2)))","7b9608c6":"df2.shape","3d5839e7":"df3 = df2[~(df2.total_sqft\/df2.bhk < 300)]\ndf3.shape","230afdee":"df3.price_per_sqr.describe()","2cb79782":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqr)\n        st = np.std(subdf.price_per_sqr)\n        reduced_df = subdf[(subdf.price_per_sqr>(m-st)) & (subdf.price_per_sqr<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf4 = remove_pps_outliers(df3)\ndf4.shape","1ea57fa3":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    fig = plt.figure(figsize=(12,8))\n    fig, plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)\n    fig, plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df4,\"Rajaji Nagar\") ## Display only for Rajaji nagar","745f5a9e":"## For Hebbal\n\nplot_scatter_chart(df4,\"Hebbal\")","6475a31a":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqr),\n                'std': np.std(bhk_df.price_per_sqr),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqr<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf5 = remove_bhk_outliers(df4)\ndf5.shape","ebb2d80e":"plot_scatter_chart(df5,\"Rajaji Nagar\")","feb84e4c":"plot_scatter_chart(df5,\"Hebbal\")","090a08de":"import matplotlib\n\nplt.hist(df5.price_per_sqr,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\",size = 13)\nplt.ylabel(\"Count\", size = 13)\nplt.title(\"Price per sqft distribution\", size = 20)","3239cf00":"df5.bath.unique()","aba23613":"df5[df5.bath>10]","56d6e5a3":"## Bedroom < bathroom\nl = len(df5[df5.bath > df5.bhk + 1]) ## Each house may have one additional bathroom for guest\nbath_bed = df5[df5.bath > df5.bhk + 1]\nbath_bed","a4973f2d":"l","28efd9c2":"df6 = df5[~(df5.bath > df5.bhk + 1)]\ndf6.shape","ebbfd116":"## removing unnecessary columns\n\ndf7 = df6.drop(['area_type','availability','size','society','price_per_sqr'],axis='columns')\ndf7","7b3b2c18":"dummies = pd.get_dummies(df7.location)\ndummies.head()","17a19779":"## Combining latested DF & Dummies(which have location value in the form of numeric)\n\ndf8 = pd.concat([df7,dummies.drop('Others',axis='columns')],axis='columns')\ndf8.head()","05e587fd":"## Droping the location column \n\ndf8 = df8.drop('location',axis='columns')\ndf8.head()","7737411d":"def LinearEquationPlot(df7,location):\n    xy = df8[(df7.location==location)]\n    fig = plt.figure(figsize=(20,10))\n    sns.regplot(x='total_sqft', y='price', data=xy,ci = 68)","49cfca02":"## Linear line and plots for Hebbal location\n\nLinearEquationPlot(df7,'Hebbal')","6d8063b8":"df8.shape","41a9c247":"## Indipendent features\n\nX = df8.drop(['price'],axis='columns')\n\nX.head()","73f59ed0":"## Dependent feature\n\ny = df8.price\ny.head()","c69ac91e":"## Seperate the data for training & testing\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","57851087":"## Accuracy rate using LinearRegression algorithm\n\nfrom sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)","85185dd2":"## cross validation to measure accuracy of our LinearRegression model\n\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n\ncross_val_score(LinearRegression(), X, y, cv=cv)","5b367daf":"def predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(X.columns==location)[0][0]\n\n    x = np.zeros(len(X.columns))\n    x[0] = sqft\n    x[1] = bath\n    x[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return round(lr_clf.predict([x])[0],2)","0182eecc":"## Predecting house price by giving Location, sqft, Bathroom and Bedroom as a input to the \"predict_price\" function\n\namount = predict_price('Indira Nagar',1000, 2, 2)\n\nprint(\"Rs.{} Lakhs\".format(amount))","4f96650b":"## Coeffecient of Linear equation\n\nlr_clf.coef_ ","c3e8cb2b":"## Intercept\n\nlr_clf.intercept_ ","13002ae6":"+ Dimensionality Reduction","98a1981d":"## Data Preprocessing","fc10a294":"Total 1306 unique location means it will make our model more complecate. So we can replace \"Others\" to location, which has very less data point( > below 10)","917d8101":"+ Finding null values and fill with respective values \n+ preprocessing the data","c328d804":"+ Based on location apply SD & mean to reduce the outliers","96042a20":"## Outlier Removal Using Standard Deviation and Mean","e84d251d":"+ Finding number of locaton has count value less then 10","27633bf8":"+ Now we can remove those 2 BHK apartments whose price_per_sqft is less than mean price_per_sqft of 1 BHK apartment","6783b639":"We have range value and some other values as well like Sq. Yard, Sq. meter. So I'm going to take mean value for the range category and ignore the remaining data like Sq. Yard.\n","fcc781e5":"+ Add the new column to identify the exact BHK value.","4d4c7ecf":"+ Outlier Removal Using Bathrooms Feature","b00c6bda":"## Outlier Removal Using Business Logic","cbf7fe58":"## Use One Hot Encoding For Location","bdf2a458":"## Feature Engineering","10a78f9a":"# Problem statement: Built a ML model to predict house price using various features like(Bathroom, Bedroom & Size)","1b257897":"## Model building","786267e1":"+ Change correct data type to the features ","ff833e2e":"By average we can say, the model has 84% accuracy ","0b941477":"12, 13 & 16 are abnormal values, So we need to find the outliers"}}