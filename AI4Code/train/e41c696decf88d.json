{"cell_type":{"78d4a19b":"code","c8d49d6b":"code","cbc3ecfd":"code","78475ac8":"code","c65ab51a":"code","bae9df1c":"code","da2e6b13":"markdown","9a7677da":"markdown","56f51c90":"markdown","167c7926":"markdown","8dcca508":"markdown"},"source":{"78d4a19b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import Dense\nfrom keras.models import Sequential","c8d49d6b":"#loading data \ndata=pd.read_csv(\"\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv\")\n\n#feature selection and turning data into numpy array\ntrain_data=data.iloc[:,1:2].to_numpy()\n\n#feature scalling\nsc=MinMaxScaler(feature_range=(0,1))\nscaled_train_data=sc.fit_transform(train_data)\n\n#creating DS with 60 timestamps and 1 output for train & val split\nX_train=[]\ny_train=[]\nfor i in range(60,1258):\n    X_train.append(scaled_train_data[i-60:i,0])\n    y_train.append(scaled_train_data[i,0])\nX_train,y_train=np.array(X_train),np.array(y_train)\n\n#converting data into 3d tensors so that model accepts it\nX_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))","cbc3ecfd":"# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","78475ac8":"# Getting the real stock price of 2017\ndataset_test = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Test.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values\n\n# Getting the predicted stock price of 2017\ndataset_total = pd.concat((data['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)\n\n","c65ab51a":"predicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","bae9df1c":"plt.plot(actual_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.xticks([arange()])\nplt.show()","da2e6b13":"# Predicting Google Stock Price Trend Using RNN (LSTM)\nThis notebook implements the RNN and use it to make predictions on trends about google stock prices in future.","9a7677da":"### Setting up the tool box:","56f51c90":"### Preprocessing data:","167c7926":"### Modeling:","8dcca508":"### Predictions and Visualizing the Results:"}}