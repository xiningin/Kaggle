{"cell_type":{"2a87a5dd":"code","2cd126ad":"code","f9c35e0f":"code","121b0b8b":"code","f2d72d0a":"code","ee150abf":"code","49e0c9ac":"code","f85e5a66":"code","a19af6ca":"code","0c6dd5b6":"code","6d826921":"code","8169efdf":"code","e9014c77":"code","9f818aaa":"code","2547fffa":"code","44334ef5":"code","d06b801f":"code","4ed1a587":"code","8351ffec":"code","eb7d6c19":"code","0982232c":"code","642d7986":"code","dcf31dab":"code","85ee7e30":"code","07bd7797":"code","d7f9c37c":"code","dc68083d":"code","90b4fedd":"code","9e69d224":"code","66dbeb81":"code","b092aae8":"markdown","f3f552fb":"markdown","3dadacff":"markdown","16c4f407":"markdown","027f305b":"markdown","2a3aa9e6":"markdown","5e568c8d":"markdown","5f5c46e6":"markdown","c9b1c5ec":"markdown","d1b8e9c0":"markdown","43360569":"markdown","4b0664e0":"markdown","10c959aa":"markdown","1b8af075":"markdown","fc3c1faa":"markdown","6b1786af":"markdown","b3e9de02":"markdown","6e4ad22a":"markdown"},"source":{"2a87a5dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n#Load the dependancies\nfrom tqdm.notebook import tqdm\nimport copy\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport random\nfrom torchvision import models\nimport torch.multiprocessing as mp\nfrom torch.nn import functional as F\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport pydicom.pixel_data_handlers.gdcm_handler as gdcm_handler \nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport pydicom\nimport os\nfrom torch.utils.data import DataLoader, Dataset\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","2cd126ad":"def seed_all(seed=42):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    \nseed_all()","f9c35e0f":"def calc_metric_loss(pred_fvc,sigma,true_fvc):\n    true_fvc=np.reshape(true_fvc,pred_fvc.shape)\n    sigma[sigma<70]=70\n    delta=np.abs(pred_fvc-true_fvc)\n    delta[delta>1000]=1000\n    metric=-(np.sqrt(2)*delta\/sigma)-np.log(np.sqrt(2)*sigma)\n    return -metric","121b0b8b":"class MLP2(nn.Module):\n    def __init__(self, input_dim, output_dim,hidden_layers=[1024, 1024], droprate=0.5, activation='relu'):\n        super(MLP2, self).__init__()\n        self.model = nn.Sequential()\n        self.model.add_module('input', nn.Linear(input_dim, hidden_layers[0]))\n        if activation == 'relu':\n            self.model.add_module('relu0', nn.ReLU())\n        elif activation == 'tanh':\n            self.model.add_module('tanh0', nn.Tanh())\n        for i in range(len(hidden_layers)-1):\n            self.model.add_module('dropout'+str(i+1), nn.Dropout(p=droprate))\n            self.model.add_module('hidden'+str(i+1), nn.Linear(hidden_layers[i], hidden_layers[i+1]))\n            if activation == 'relu':\n                self.model.add_module('relu'+str(i+1), nn.ReLU())\n            elif activation == 'tanh':\n                self.model.add_module('tanh'+str(i+1), nn.Tanh())\n        self.model.add_module('dropout'+str(i+2), nn.Dropout(p=droprate))\n        self.model.add_module('final', nn.Linear(hidden_layers[i+1], output_dim))\n        \n    def forward(self, x):\n        return self.model(x)\n    \n    def predict(self,x, samples):\n        self.train()\n        #Stochastic forward passes which we will average\n        y_samples = [self.forward(x) for _ in range(samples)]\n        y_samples = torch.cat(y_samples, dim=1)\n        std = torch.std(y_samples,dim=1)\n        self.eval()\n        mean = self.forward(x)\n        self.train()\n        return mean, std\n    \n    def metric_loss(self,pred_fvc,true_fvc,pred_sigma):\n        true_fvc=torch.reshape(true_fvc,pred_fvc.shape)\n        sigma_clipped=torch.clamp(pred_sigma,min=1e-3,max=70)\n        delta=torch.clamp(torch.abs(pred_fvc-true_fvc),max=1000)\n        metric=torch.div(-torch.sqrt(torch.tensor([2.0]).to(device))*delta,sigma_clipped)-torch.log(torch.sqrt(torch.tensor([2.0]).to(device))*sigma_clipped)\n        return -metric\n    \n    def fvc_loss(self,pred_fvc,true_fvc):\n        true_fvc=torch.reshape(true_fvc,pred_fvc.shape)\n        fvc_err=torch.abs(pred_fvc-true_fvc)\n        return fvc_err","f2d72d0a":"class MC_Dropout_Model(nn.Module):\n    def __init__(self, input_dim, output_dim, drop_prob=0.2):\n        super(MC_Dropout_Model, self).__init__()\n        self.input_dim = input_dim\n        self.output_dim = output_dim\n        self.drop_prob = drop_prob\n        # network with two hidden and one output layer\n        self.fc1 = nn.Linear(input_dim, 100)\n        self.drop1=nn.Dropout(p=drop_prob)\n        self.fc2 = nn.Linear(100, 100)\n        self.drop2=nn.Dropout(p=drop_prob)\n        self.fc3 = nn.Linear(100, output_dim)\n    \n    def forward(self, x):\n        out=x\n        out = F.relu(self.fc1(out))\n        out= self.drop1(out)\n        out = F.relu(self.fc2(out))\n        out= self.drop2(out)\n        out = self.fc3(out)\n        return out\n    \n    def predict(self,x, samples):\n        self.train()\n        #Stochastic forward passes which we will average\n        y_samples = [self.forward(x) for _ in range(samples)]\n        y_samples = torch.cat(y_samples, dim=1)\n        std = torch.std(y_samples,dim=1)\n        self.eval()\n        mean = self.forward(x)\n        self.train()\n        return mean, std\n    \n    def metric_loss(self,pred_fvc,true_fvc,pred_sigma):\n        true_fvc=torch.reshape(true_fvc,pred_fvc.shape)\n        sigma_clipped=torch.clamp(pred_sigma,min=70)\n        delta=torch.clamp(torch.abs(pred_fvc-true_fvc),max=1000)\n        metric=torch.div(-torch.sqrt(torch.tensor([2.0]).to(device))*delta,sigma_clipped)-torch.log(torch.sqrt(torch.tensor([2.0]).to(device))*sigma_clipped)\n        return -metric\n    \n    def fvc_loss(self,pred_fvc,true_fvc):\n        true_fvc=torch.reshape(true_fvc,pred_fvc.shape)\n        fvc_err=torch.abs(pred_fvc-true_fvc)\n        return fvc_err","ee150abf":"def plot_training_loss(train, val,title='loss'):\n    plt.figure()\n    plt.plot(train, label='Train')\n    plt.plot(val, label='Val')\n    if title=='loss':\n        plt.title('Model Training Loss')\n    else:\n        plt.title('Model Metric Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.savefig('training_loss')","49e0c9ac":"train=pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest=pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nsubmission=pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')","f85e5a66":"train['base_Weeks']=train.groupby(['Patient'])['Weeks'].transform('min')\nbase=train[train.Weeks==train.base_Weeks]\nbase = base.rename(columns={'FVC': 'base_FVC','Percent': 'base_Percent'})\nbase.drop_duplicates(subset=['Patient', 'Weeks'], keep='first',inplace=True)\ntrain=train.merge(base[['Patient','base_FVC','base_Percent']],on='Patient',how='left')\ntrain['Week_passed'] = train['Weeks'] - train['base_Weeks']","a19af6ca":"test = test.rename(columns={'Weeks': 'base_Weeks', 'FVC': 'base_FVC','Percent': 'base_Percent'})\n\n# Adding Sample Submission\nsubmission = pd.read_csv(\"..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv\")\n\n# In submisison file, format: ID_'week', using lambda to split the ID\nsubmission['Patient'] = submission['Patient_Week'].apply(lambda x:x.split('_')[0])\n\n# In submisison file, format: ID_'week', using lambda to split the Week\nsubmission['Weeks'] = submission['Patient_Week'].apply(lambda x:x.split('_')[1]).astype(int)\n\ntest = submission.drop(columns = [\"FVC\", \"Confidence\"]).merge(test, on = 'Patient')\n\ntest['Week_passed'] = test['Weeks'] - test['base_Weeks']\n\ntest=test[train.columns.drop(['FVC','Percent'])]","0c6dd5b6":"COLS = ['Sex','SmokingStatus']\nfor col in COLS:\n    for mod in train[col].unique():\n        train[mod] = (train[col] == mod).astype(int)\n        \n        test[mod] = (test[col] == mod).astype(int)\n    train.drop(col,axis=1,inplace=True)\n    test.drop(col,axis=1,inplace=True)","6d826921":"from sklearn import preprocessing\nrobust_scaler = preprocessing.RobustScaler()\ntrain[train.columns.difference(['Patient','FVC','Percent','Weeks','base_Weeks'])]=robust_scaler.fit_transform(train[train.columns.difference(['Patient','FVC','Percent','Weeks','base_Weeks'])])","8169efdf":"import pickle\nwith open('..\/input\/file-dictionary\/good_files.pickle', 'rb') as handle:\n    good_file_dict = pickle.load(handle)\nwith open('..\/input\/file-dictionary\/bad_files.pickle', 'rb') as handle:\n    bad_file_dict = pickle.load(handle)","e9014c77":"class OSIC(Dataset):\n    def __init__(self,patient_ids,df,file_dict,train=True, transform=None,nims=10):\n        self.df=df[df.Patient.isin(patient_ids)]\n        self.train=train\n        if self.train:\n            self.fvc=self.df['FVC'].values\n        else:\n            self.df[self.df.columns.difference(['Patient','FVC','Percent','Weeks','base_Weeks'])]=robust_scaler.transform(self.df[self.df.columns.difference(['Patient','FVC','Percent','Weeks','base_Weeks'])])\n    \n        self.data=self.df[self.df.columns.difference(['FVC','Patient','Percent'])].values\n        self.patients=self.df['Patient'].values\n        self.file_dict=file_dict\n        self.nims=nims\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        if self.train:\n            data = {'fvc': self.fvc[idx],\n                   'data': self.data[idx]}\n        else:\n            data = {'data': self.data[idx]}\n        return data","9f818aaa":"epochs=200\nbatch_size=32\nnum_workers=3","2547fffa":"ids=train.Patient.unique()\nindex = np.argwhere(ids=='ID00011637202177653955184')\nids = list(np.delete(ids, index))\nrandom.shuffle(ids)\nids=np.array(ids)\n\ntrain_ids,val_ids=np.split(ids, [int(round(0.9 * len(ids), 0))])\n\ntrain_dataset = OSIC(train_ids,train,good_file_dict)  \ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size,shuffle=True,num_workers=num_workers)\n\nval_dataset = OSIC(val_ids,train,good_file_dict)  \nval_dataloader = DataLoader(val_dataset, batch_size=batch_size,shuffle=True,num_workers=num_workers)","44334ef5":"model = MC_Dropout_Model(train_dataset.data.shape[1], 1).to(device)\n#model = MLP2(train_dataset.data.shape[1], 1).to(device)\nprint('Number of parameters:')\nprint(sum(p.numel() for p in model.parameters() if p.requires_grad))","d06b801f":"optimizer = optim.Adam(model.parameters())\nepoch_train_metric=[]\nepoch_val_metric=[]\nepoch_train_loss=[]\nepoch_val_loss=[]\nepoch=0\nmin_val_loss = 1e+100\nmin_val_metric = 1e+100\nearly_stop = False\npatience=10\n#Start by training for fvc\nwhile epoch<epochs and not early_stop:\n    epoch+=1\n    train_loss=0\n    train_metric=0\n    model.train()\n    for batch_idx, data in enumerate(train_dataloader):\n        optimizer.zero_grad()\n        fvc,sigma = model.predict(data['data'].float().to(device),100)\n        fvc_loss = model.fvc_loss(fvc,data['fvc'].to(device)).mean()\n        metric_loss = model.metric_loss(fvc,data['fvc'].to(device),sigma).mean()\n        loss=fvc_loss\n        loss.backward()\n        train_loss += loss.item()\n        train_metric += metric_loss.item()\n        optimizer.step()\n    print('====> Epoch: {} Average train loss FVC: {:.4f}'.format(\n                        epoch, train_loss \/ len(train_dataloader)))\n    print('====> Epoch: {} Average train metric: {:.4f}'.format(\n                        epoch, train_metric \/ len(train_dataloader)))\n    \n    val_loss=0\n    val_metric=0\n    model.eval()\n    with torch.no_grad():\n        for batch_idx, data in enumerate(val_dataloader):\n            fvc,sigma = model.predict(data['data'].float().to(device),100)\n            fvc_loss = model.fvc_loss(fvc,data['fvc'].to(device)).mean()\n            metric_loss = model.metric_loss(fvc,data['fvc'].to(device),sigma).mean()\n            loss=fvc_loss\n            val_loss += loss.item()\n            val_metric += metric_loss.item()\n        print('====> Epoch: {} Average val loss FVC: {:.4f}'.format(\n                        epoch, val_loss \/ len(val_dataloader)))\n        print('====> Epoch: {} Average val metric: {:.4f}'.format(\n                        epoch, val_metric \/ len(val_dataloader)))\n    \n    epoch_train_loss.append(train_loss\/ len(train_dataloader))\n    epoch_val_loss.append(val_loss \/ len(val_dataloader))\n    epoch_train_metric.append(train_metric\/ len(train_dataloader))\n    epoch_val_metric.append(val_metric \/ len(val_dataloader))\n\n    if val_metric\/ len(val_dataloader) < min_val_metric:\n        min_val_metric = val_metric\/ len(val_dataloader)\n        best_model = copy.deepcopy(model.state_dict())\n        print('Min metric %0.2f' % min_val_metric)\n        epochs_no_improve = 0\n\n    else:\n        epochs_no_improve += 1\n        # Check early stopping condition\n        if epochs_no_improve == patience:\n            print('Early stopping!')\n            early_stop = True\n            model.load_state_dict(best_model)","4ed1a587":"plot_training_loss(epoch_train_loss, epoch_val_loss)","8351ffec":"submission=pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv')","eb7d6c19":"test_ids=test.Patient.unique()\ntest_dataset = OSIC(test_ids,test,good_file_dict,train=False)  \ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size,shuffle=False,num_workers=num_workers)\nmodel.eval()\nfvc_pred = []\nsigma_pred = []\nwith torch.no_grad():\n    for batch_idx, data in enumerate(test_dataloader):\n        fvc,sigma = model.predict(data['data'].float().to(device),100)\n        fvc_pred.append(fvc)\n        sigma_pred.append(sigma)\nfvc_pred=torch.cat(fvc_pred, dim=0)\nsigma_pred=torch.cat(sigma_pred, dim=0)\ntest['FVC']=fvc_pred.cpu().numpy()\ntest['Confidence']=sigma_pred.cpu().numpy()","0982232c":"test['Patient_Week']=test[\"Patient\"] + '_' + test['Weeks'].apply(str)","642d7986":"submission=submission[['Patient_Week']].merge(test[['Patient_Week','FVC','Confidence']],on='Patient_Week')","dcf31dab":"submission.to_csv('submission.csv', index=False, float_format='%.1f')","85ee7e30":"plt.scatter(submission['FVC'],submission['Confidence'])\nplt.title('Test')\nplt.xlabel('FVC')\nplt.ylabel('Confidence')","07bd7797":"fvc_pred = []\nsigma_pred = []\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size,shuffle=False,num_workers=num_workers)\nwith torch.no_grad():\n    for batch_idx, data in enumerate(train_dataloader):\n        fvc,sigma = model.predict(data['data'].float().to(device),100)\n        fvc_pred.append(fvc)\n        sigma_pred.append(sigma)\nfvc_pred_train=torch.cat(fvc_pred, dim=0)\nsigma_pred_train=torch.cat(sigma_pred, dim=0)\n\nprint('train metric', calc_metric_loss(fvc_pred_train.cpu().numpy(),sigma_pred_train.cpu().numpy(),train_dataset.fvc).mean())\n\nplt.scatter(fvc_pred_train.cpu().numpy(),sigma_pred_train.cpu().numpy())\nplt.title('Train')\nplt.xlabel('FVC')\nplt.ylabel('Confidence')\n","d7f9c37c":"plt.scatter(train_dataset.fvc,fvc_pred_train.cpu().numpy())\nplt.title('Train: predicted FVC vs true FVC')\nplt.xlabel('True FVC')\nplt.ylabel('Predicted FVC')","dc68083d":"fvc_pred = []\nsigma_pred = []\nval_dataloader = DataLoader(val_dataset, batch_size=batch_size,shuffle=False,num_workers=num_workers)\nwith torch.no_grad():\n    for batch_idx, data in enumerate(val_dataloader):\n        fvc,sigma = model.predict(data['data'].float().to(device),100)\n        fvc_pred.append(fvc)\n        sigma_pred.append(sigma)\nfvc_pred_val=torch.cat(fvc_pred, dim=0)\nsigma_pred_val=torch.cat(sigma_pred, dim=0)\n\nprint('val metric', calc_metric_loss(fvc_pred_val.cpu().numpy(),sigma_pred_val.cpu().numpy(),val_dataset.fvc).mean())\n\nplt.scatter(fvc_pred_val.cpu().numpy(),sigma_pred_val.cpu().numpy())\nplt.title('Val')\nplt.xlabel('FVC')\nplt.ylabel('Confidence')","90b4fedd":"plt.scatter(val_dataset.fvc,fvc_pred_val.cpu().numpy())\nplt.title('Val: predicted FVC vs true FVC')\nplt.xlabel('True FVC')\nplt.ylabel('Predicted FVC')","9e69d224":"plt.hist(submission['FVC'], alpha=0.5,label='test')\nplt.hist(fvc_pred_train.cpu().numpy(), alpha=0.5,label='train')\nplt.hist(fvc_pred_val.cpu().numpy(), alpha=0.5,label='val')\nplt.legend()\nplt.title('Histogram of FVC predictions')","66dbeb81":"plt.hist(submission['Confidence'], alpha=0.5,label='test')\nplt.hist(sigma_pred_train.cpu().numpy(), alpha=0.5,label='train')\nplt.hist(sigma_pred_val.cpu().numpy(), alpha=0.5,label='val')\nplt.legend()\nplt.title('Histogram of Confidence predictions')","b092aae8":"## Val","f3f552fb":"# OH Encode Sex and Smoking\nWith thanks to https:\/\/www.kaggle.com\/ulrich07\/osic-keras-starter-with-custom-metrics","3dadacff":"# Load Dataframes","16c4f407":"# Rescale based on train data","027f305b":"# I've used this to avoid the files dcmread can't load (future version with CNN)","2a3aa9e6":"# Post-Match Analysis","5e568c8d":"mse seems fine","5f5c46e6":"## All","c9b1c5ec":"## Train","d1b8e9c0":"# Training Parameters","43360569":"https:\/\/xuwd11.github.io\/Dropout_Tutorial_in_PyTorch\/\n\nhttps:\/\/github.com\/JavierAntoran\/Bayesian-Neural-Networks","4b0664e0":"## Test Predictions","10c959aa":"# Pre-train with mse of FVC prediction","1b8af075":"# Test Data","fc3c1faa":"# Split training data into train and val by patient (80:20)\n'ID00011637202177653955184' has no images we can load. Therefore I'm going to drop.\n\nWe shuffle the train data","6b1786af":"# Prepare Training Data (Tabular)","b3e9de02":"# Prepare Test Data (tabular)","6e4ad22a":"# Plot training curves"}}