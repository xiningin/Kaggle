{"cell_type":{"a76c2ce2":"code","e7bdda24":"code","aade4e70":"code","473c20d5":"code","b98710be":"code","9895ba79":"code","23a196ad":"code","6aa030a2":"code","4fb79876":"code","c674fa36":"code","211f69f3":"code","d816bf12":"code","aedaf279":"code","0aaec366":"code","ef98bd04":"code","aa04830d":"code","02f11aa8":"code","046054c8":"code","39d4d3b8":"code","e9635fc8":"code","252b98d7":"code","a9bb6544":"code","b54f34c9":"code","c6ccbfeb":"code","9d28f80a":"code","c16b3d5a":"code","7154899b":"code","6544a769":"code","d51b6648":"markdown","5ab5d6bc":"markdown","f745a260":"markdown","113098d8":"markdown","fdf75045":"markdown","efc3ab1b":"markdown","adf9237a":"markdown","f06a7e55":"markdown","c29bfd4c":"markdown","f5810722":"markdown","f09b2aee":"markdown","f509096d":"markdown","1d378288":"markdown","4dc56374":"markdown","21722cba":"markdown","9cee68f0":"markdown","1e0550fe":"markdown","283b4f78":"markdown"},"source":{"a76c2ce2":"# necessary libraries\nimport datetime as dt\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nall_data = pd.read_csv('..\/input\/sbti-companies\/companies-taking-action.csv') #Kaggle\n# all_data = pd.read_csv('\/Users\/bharatjuyal\/Desktop\/DS\/data\/companies-taking-action.csv') #Local","e7bdda24":"# (all_data.isnull().sum()*100\/len(all_data)).sort_values(ascending = False)","aade4e70":"selected_cols = all_data[['Date','Company Name', 'Target Qualification', 'Country',\n             'Region', 'Sector', 'Status', 'Target', 'Target Classification']]","473c20d5":"committed = selected_cols.copy()\ncommitted = committed.loc[all_data['Status'] == 'Committed']\n\n# Sorting based on date\ncommitted = committed.sort_index()\npx.bar(committed.Sector.value_counts(),\n       template = 'ggplot2',\n       orientation = 'v')","b98710be":"sme = all_data.loc[all_data['SME?'] == 1.0]\n# Number of companies that are sme  (rows and columns)\npx.bar(sme.Sector.value_counts(), template = 'ggplot2', orientation = 'v')","9895ba79":"ambition = all_data.loc[all_data['Business ambitions 1.5'] == 1.0]\npx.bar(ambition.Sector.value_counts(),\n       template = 'ggplot2',\n       orientation = 'v')","23a196ad":"target_set = selected_cols.copy()\ntarget_set = target_set.loc[selected_cols['Status'] == 'Targets Set']\n# Changing the date format for datetime index\ntarget_set.Date = target_set.Date.astype('datetime64[ns]')\ntarget_set = target_set.set_index(target_set['Date'])\ntarget_set = target_set.drop('Date', axis = 1)\n# Sorting based on date\ntarget_set = target_set.sort_index()\n# target_set.shape","6aa030a2":"target_set.isnull().sum()","4fb79876":"target_set.loc[target_set.index.isnull()]","c674fa36":"target_set = target_set.loc[target_set['Company Name'] != \"Legacy Vacation Resorts\"]","211f69f3":"# Check for no target classification\nclassification_na = target_set.loc[target_set['Target Classification'].isnull()]\nclassification_na","d816bf12":"target_set = target_set[target_set['Target Classification'].notna()]","aedaf279":"outlier_target_q = target_set.loc[target_set['Target Qualification'] == \"1.5\u00b0C\/Well-below 2\u00b0C\"]\nprint('Outlier target qualification - 1.5\u00b0C\/Well-below 2\u00b0C ')\noutlier_target_q","0aaec366":"target_set = target_set.loc[target_set['Target Qualification'] != \"1.5\u00b0C\/Well-below 2\u00b0C\"]\n# Dummy columns for categorical variables\ntarget_q = pd.get_dummies(target_set['Target Qualification'])\nregion = pd.get_dummies(target_set['Region'])\ncountry = pd.get_dummies(target_set['Country'])\nsector = pd.get_dummies(target_set['Sector'])\n\n# Resampling columns for monthly values\ntarget_q_m = target_q.resample('1M').sum()\nregion_m = region.resample('1M').sum()\ncountry_m = country.resample('1M').sum()\nsector_m = sector.resample('1M').sum()\n\n# Cumulative sum of monthly values as series\ntarget_q_m = target_q_m.apply(lambda x: x.cumsum())\nregion_m = region_m.apply(lambda x: x.cumsum())\ncountry_m = country_m.apply(lambda x: x.cumsum())\nsector_m = sector_m.apply(lambda x: x.cumsum())\n\nregion_target_m = pd.merge(region_m,\n                           target_q_m,\n                           left_index = True,\n                           right_index = True)","ef98bd04":"# instantiate the figure object\nfig1 = go.Figure()\n\n# add a scatter trace for every column\nfor col in target_q_m.columns:\n    fig1.add_scatter(x=target_q_m.index, y=target_q_m[col], name = col)\n\n# change the scale to logarithmic and add title\nfig1.update_layout(\n    yaxis=dict(type=\"log\"),\n    title=f\"Target qualifications from {target_q_m.index[0].strftime('%B %Y')} - \" \\\n          +                f\"{target_q_m.index[-1].strftime('%B %Y')}\"\n)\n\nfig1.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])))\nfig1.show()","aa04830d":"# instantiate the figure object\nfig2 = go.Figure()\n\n# add a scatter trace for every column\nfor col in region_m.columns:\n    fig2.add_scatter(x=region_m.index,\n                     y=region_m[col],\n                     name = col,\n                     mode = 'markers+lines'\n                    )\n\n# change the scale to logarithmic and add title\nfig2.update_layout(\n    yaxis=dict(type=\"log\"),\n    title=f\"Regional performance from {region_m.index[0].strftime('%B %Y')} - \" \\\n          +                f\"{region_m.index[-1].strftime('%B %Y')}\"\n)\nfig2.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])))\n\nfig2.show()","02f11aa8":"Asia_monthly_cumulative = pd.DataFrame(region_target_m['Asia'])\nIndia_monthly_cumulative = pd.DataFrame(country_m['India'])\nAsia_India = pd.merge(Asia_monthly_cumulative, India_monthly_cumulative, left_index= True, right_index = True)\npx.line(Asia_India,\n           log_y = True,\n           title = 'Total number of companies with targets set in Asia and India')","046054c8":"# All 1.5\u00b0C targets in India\nindia_one_point_five = pd.DataFrame(target_set.loc[(target_set.Country == 'India') & (target_set['Target Qualification'] == '1.5\u00b0C')])\n# All 2\u00b0C targets in India\nindia_two = pd.DataFrame(target_set.loc[(target_set.Country == 'India') & (target_set['Target Qualification'] == '2\u00b0C')])\n# All Well below 2\u00b0C' targets in India\nindia_wbtwo = pd.DataFrame(target_set.loc[(target_set.Country == 'India') & (target_set['Target Qualification'] == 'Well-below 2\u00b0C')])","39d4d3b8":"# All 1.5\u00b0C targets in Asia\nasia_one_point_five = pd.DataFrame(\n    target_set.loc[(target_set.Region == 'Asia') & (target_set['Target Qualification'] == '1.5\u00b0C')])\n# All 2\u00b0C targets in Asia\nasia_two = pd.DataFrame(\n    target_set.loc[(target_set.Region == 'Asia') & (target_set['Target Qualification'] == '2\u00b0C')])\n# All Well below 2\u00b0C' targets in Asia\nasia_wbtwo = pd.DataFrame(\n    target_set.loc[(target_set.Region == 'Asia') & (target_set['Target Qualification'] == 'Well-below 2\u00b0C')])","e9635fc8":"# All 1.5\u00b0C targets in World\nworld_one_point_five = pd.DataFrame(\n    target_set.loc[(target_set['Target Qualification'] == '1.5\u00b0C')])\n# All 2\u00b0C targets in World\nworld_two = pd.DataFrame(\n    target_set.loc[(target_set['Target Qualification'] == '2\u00b0C')])\n# All Well below 2\u00b0C' targets in World\nworld_wbtwo = pd.DataFrame(\n    target_set.loc[(target_set['Target Qualification'] == 'Well-below 2\u00b0C')])","252b98d7":"asia  = target_set.loc[target_set.Region == 'Asia']\n# asia.Country.value_counts()\nchina_taiwan = asia.loc[(asia.Country == 'China') | (asia.Country == 'Taiwan, Province of China')]\nchina_taiwan_opf = pd.DataFrame(\n    china_taiwan.loc[(china_taiwan['Target Qualification'] == '1.5\u00b0C')])\njapan = asia.loc[(asia.Country == 'Japan')]\njapan_opf = pd.DataFrame(\n    japan.loc[(japan['Target Qualification'] == '1.5\u00b0C')])","a9bb6544":"bullet_asia = make_subplots(\n#     subplot_titles=['1.5\u00b0C: India', '2\u00b0C: India', 'WB2\u00b0C: India']\n)\nbullet_asia.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = japan_opf[['Sector']].value_counts().sum(),\n    delta = {'reference': world_one_point_five[['Country']].value_counts().mean()},\n    domain = {'x': [0.9, 0], 'y': [0.7, 0.9]},\n    title = {'text': \"Japan\", 'font': {\"size\": 10}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, world_one_point_five[['Sector']].value_counts().sum()]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': world_one_point_five[['Country']].value_counts().mean()},\n        'steps': [\n            {'range': [0, asia_one_point_five[['Sector']].value_counts().sum()], 'color': \"gray\"},\n            {'range': [asia_one_point_five[['Sector']].value_counts().sum(), world_one_point_five[['Sector']].value_counts().sum()], 'color': \"lightgray\"}],\n        'bar': {'color': \"blue\"}}))\n\nbullet_asia.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = india_one_point_five[['Sector']].value_counts().sum(),\n    delta = {'reference': world_one_point_five[['Country']].value_counts().mean()},\n    domain = {'x': [0, 1], 'y': [0.4, 0.6]},\n    title = {'text': \"India\", 'font': {\"size\": 10}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, world_one_point_five[['Sector']].value_counts().sum()]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': world_one_point_five[['Country']].value_counts().mean()},\n        'steps': [\n            {'range': [0, asia_one_point_five[['Sector']].value_counts().sum()], 'color': \"gray\"},\n            {'range': [asia_one_point_five[['Sector']].value_counts().sum(), world_one_point_five[['Sector']].value_counts().sum()], 'color': \"lightgray\"}],\n        'bar': {'color': \"blue\"}}))\n\nbullet_asia.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = china_taiwan_opf[['Sector']].value_counts().sum(),\n    delta = {'reference': world_one_point_five[['Country']].value_counts().mean()},\n    domain = {'x': [0.9, 0], 'y': [0.1, 0.3]},\n    title = {'text': \"China-Taiwan\", 'font': {\"size\": 9}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, world_one_point_five[['Sector']].value_counts().sum()]},\n        'threshold': {\n            'line': {'color': \"black\", 'width': 2},\n            'thickness': 0.75,\n            'value': world_one_point_five[['Country']].value_counts().mean()},\n        'steps': [\n            {'range': [0, asia_one_point_five[['Sector']].value_counts().sum()], 'color': \"gray\"},\n            {'range': [asia_one_point_five[['Sector']].value_counts().sum(), world_one_point_five[['Sector']].value_counts().sum()], 'color': \"lightgray\"}],\n        'bar': {'color': \"blue\"}}))\n\nbullet_asia.show()","b54f34c9":"bullet_india = make_subplots()\nbullet_india.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = india_two[['Sector']].value_counts().sum(),\n    delta = {'reference': asia_two[['Sector']].value_counts().sum()},\n    domain = {'x': [0.9, 0], 'y': [0.1, 0.4]},\n    title = {'text': \"2\u00b0C: India\", 'font': {\"size\": 9}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, world_one_point_five[['Sector']].value_counts().sum()]},\n        'threshold': {\n            'line': {'color': \"red\", 'width': 2},\n            'thickness': 0.75,\n            'value': asia_two[['Sector']].value_counts().sum()},\n        'steps': [\n            {'range': [0, asia_two[['Sector']].value_counts().sum()], 'color': \"gray\"},\n            {'range': [asia_two[['Sector']].value_counts().sum(), world_two[['Sector']].value_counts().sum()], 'color': \"lightgray\"}],\n        'bar': {'color': \"blue\"}}))\n\nbullet_india.add_trace(go.Indicator(\n    mode = \"number+gauge+delta\", value = india_wbtwo[['Sector']].value_counts().sum(),\n    delta = {'reference': asia_wbtwo[['Sector']].value_counts().sum()},\n    domain = {'x': [0.9, 0], 'y': [0.5, 0.8]},\n    title = {'text': \"WB2\u00b0C: India\", 'font': {\"size\": 8}},\n    gauge = {\n        'shape': \"bullet\",\n        'axis': {'range': [None, world_one_point_five[['Sector']].value_counts().sum()]},\n        'threshold': {\n            'line': {'color': \"red\", 'width': 2},\n            'thickness': 0.75,\n            'value': asia_wbtwo[['Sector']].value_counts().sum()},\n        'steps': [\n            {'range': [0, asia_wbtwo[['Sector']].value_counts().sum()], 'color': \"gray\"},\n            {'range': [asia_wbtwo[['Sector']].value_counts().sum(), world_wbtwo[['Sector']].value_counts().sum()], 'color': \"lightgray\"}],\n        'bar': {'color': \"blue\"}}))\nbullet_india.show()","c6ccbfeb":"Asia_sector = asia_one_point_five[['Sector']].value_counts()","9d28f80a":"Japan_sector = japan_opf[['Sector']].value_counts()","c16b3d5a":"PRC_sector = china_taiwan_opf[['Sector']].value_counts()","7154899b":"India_sector = india_one_point_five[['Sector']].value_counts()","6544a769":"(India_sector)","d51b6648":"#### Handling missing 'Date'\n\n* **Missing values** : <mark>Legacy Vacation Resorts<\/mark> has a missing date of setting target, (same as website) \n* **Action** : Omitting row for consistentcy","5ab5d6bc":"### Processing:\n\n_Check percentage of missing value in all data_","f745a260":"### Preparing\n\n_Source_: dataset downloaded from [SBTi][]\n    \n[SBTi]: https:\/\/sciencebasedtargets.org\/companies-taking-action, \"Science based targets\" ","113098d8":"### Companies with <mark>targets set<\/mark> <a class=\"anchor\" id=\"target_set\"><\/a>","fdf75045":"### Check for missing values for companies with target set","efc3ab1b":"## Total number of companies with targets set in Asia and India <a id = 'india_asia' class=\"anchor\"><\/a>\n[FAQ](#faq)","adf9237a":"### <mark>Small and medium sized <\/mark> enterprises <a class=\"anchor\" id=\"sme\"><\/a>","f06a7e55":"* In Asia, __Japan__ leads with  __65__ companies having 1.5 degree targets, __India__ has __16__.\n* From __China__ and __Taiwan, Province of China__ , __8__ companies have 1.5 degrees targets set.\n\n* __Steps__: \n    * _DarkGrey_: Total companies with 1.5 degree targets in Asia\n    * _LightGrey_: Total companies with 1.5 degree targets in the World.\n\n* __Delta__ and __Threshold__: Average number of companies with 1.5 degree targets in the World","c29bfd4c":"### Comparing India with Asia and the world <a class=\"anchor\" id=\"india_asia_world\"><\/a>\n[FAQ](#faq)","f5810722":"Missing values in companies with their targets set\n    \n*  1 missing __'Date'__\n*  4 missing __'Target Classification'__\n","f09b2aee":"## Regional Performance \n### (Cumulative- number of companies with targets set)<a class=\"anchor\" id=\"region_cumulative\"><\/a>\n[FAQ](#faq)","f509096d":"### Companies with <mark>Business ambitions 1.5<\/mark> <a class=\"anchor\" id=\"ambition\"><\/a>","1d378288":"### Checking percentage of missing value in all data","4dc56374":"### Companies <mark>committed<\/mark> <a class=\"anchor\" id=\"committed\"><\/a>","21722cba":"#### Handling missing 'Target Classification'\n\n\n* **Missing target classification** : <mark>Eaton<\/mark>, <mark>Faurecia S.A.<\/mark>, <mark>Nobia AB<\/mark> and <mark>Grosvenor Britain & Ireland<\/mark> do not have Target classification.\n* **Action** : Omitting rows for consistency","9cee68f0":"### Target Qualifications <a class=\"anchor\" id=\"target_cumulative\"><\/a>\n[<<FAQ](#faq)","1e0550fe":"__Note about missing values__\n    \n  * **Completion rate less than 50%** : `SME?`, `Date Explanation`, `Business ambitions 1.5` and `ISIN` have null values for more than 50% of data.\n   \n  * **Committed vs Target set** : The data is aggregated at the company level but the companies with *'Committed'* status do not have `Target Classification`, `Target Qualification` and `Target`(statement) in the data.\n    \n  * **Recommended columns for analysis** : `Date`, `Company Name`, `Region`, `Country`, `Sector`, `Status`, `Target`, `Target Qualification` and `Target Classification`","283b4f78":"## Companies taking action\n\n<mark>Exploring companies committed to a science based decarbonization target<\/mark>\n\n### FAQ <a class=\"anchor\" id=\"faq\"><\/a>\n   \n   * [Companies with __'committed'__ status](#committed)\n   * [Companies with __'targets set'__](#target_set)\n   * [__'Small and medium sized'__ enterprises](#sme)\n   * [Companies where __'Business ambitions 1.5'__](#ambition)\n   * [Regional performance (Number of companies with targets set)](#region_cumulative)\n   * [Performance against target qualifications (1.5, 2 and Well below 2 degree celsius)](#target_cumulative)\n   * [Asia and India total number of companies with targets set](#india_asia)\n   * [Sectors in India with 1.5 degree target qualifications vs Asia and World](#india_asia_world)"}}