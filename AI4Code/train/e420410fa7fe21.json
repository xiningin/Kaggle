{"cell_type":{"c2684b40":"code","eb185a1a":"code","f0f1969a":"code","647a3055":"code","f35dcc6e":"code","ba71d2f2":"code","357854c9":"code","0dbd1824":"code","bbfafe26":"code","f2a331d8":"code","df5afc1f":"code","e2bc53ce":"code","dbc4aec0":"code","ac3a2973":"code","48eaa593":"code","372fe2f9":"code","7dc1c502":"code","b08a8510":"code","d35147e5":"code","02a1c104":"code","9d67abb6":"code","0257f6ab":"code","5f741a43":"code","32f74efd":"code","15a5b172":"code","8ee86f03":"code","ae7998c8":"code","878da7c7":"code","1dd77224":"code","e3076df5":"code","e30ab2b2":"code","78bc57cc":"code","8b62d87f":"code","95026861":"code","cac146f6":"code","ca2760d8":"code","7f84cb7d":"code","84030ce3":"code","5937b4d7":"code","a6c21693":"code","1c1102d0":"code","8f326897":"code","47e2edc0":"markdown","fefc81a9":"markdown","3f64ccee":"markdown","ed67729b":"markdown","abbbbe2b":"markdown","25a82d0f":"markdown","ccc9ad37":"markdown","7fbdf876":"markdown","a32fc891":"markdown","dfe40508":"markdown","6fcd74c3":"markdown","2a530b93":"markdown","e1a3571e":"markdown","58f8d97d":"markdown","5427f3bf":"markdown","b6fbbdbd":"markdown","76bea669":"markdown","4f73fc43":"markdown","ea59e34d":"markdown","7d4bf649":"markdown","bfa3e4ce":"markdown","e904ae31":"markdown","b2e03c50":"markdown","1fc969d2":"markdown","a4d9d5d5":"markdown"},"source":{"c2684b40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb185a1a":"#Importing Libraries\n\n\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score","f0f1969a":"#reading the dataset\nzomato_real=pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")\nzomato_real.head() # prints the first 5 rows of a DataFrame","647a3055":"zomato_real.info() # Looking at the information about the dataset, datatypes of the coresponding columns and missing values\n","f35dcc6e":"#Deleting Unnnecessary Columns\nzomato=zomato_real.drop(['url','dish_liked','phone'],axis=1) #Dropping the column \"dish_liked\", \"phone\", \"url\" and saving the new dataset as \"zomato\"\n","ba71d2f2":"zomato_real.head() # looking at the dataset after transformation\n","357854c9":"#Removing the Duplicates\nzomato.duplicated().sum()\nzomato.drop_duplicates(inplace=True)\nzomato_real.head() # looking at the dataset after transformation","0dbd1824":"#Remove the NaN values from the dataset\nzomato.isnull().sum()\nzomato.dropna(how='any',inplace=True)\nzomato.info() #.info() function is used to get a concise summary of the dataframe","bbfafe26":"#Reading Column Names\nzomato.columns","f2a331d8":"#Changing the column names\nzomato = zomato.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',\n                                  'listed_in(city)':'city'})\nzomato.columns","df5afc1f":"#Some Transformations\nzomato['cost'] = zomato['cost'].astype(str) #Changing the cost to string\nzomato['cost'] = zomato['cost'].apply(lambda x: x.replace(',','.')) #Using lambda function to replace ',' from cost\nzomato['cost'] = zomato['cost'].astype(float) # Changing the cost to Float\nzomato.info() # looking at the dataset information after transformation","e2bc53ce":"#Reading uninque values from the Rate column\nzomato['rate'].unique()","dbc4aec0":"#Removing '\/5' from Rates\nzomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')\nzomato['rate'].head() # looking at the dataset after transformation","ac3a2973":"# Adjust the column names\nzomato.name = zomato.name.apply(lambda x:x.title())\nzomato.online_order.replace(('Yes','No'),(True, False),inplace=True)\nzomato.book_table.replace(('Yes','No'),(True, False),inplace=True)\nzomato_real.head() # looking at the dataset after transformation","48eaa593":"zomato.cost.unique() # cheking the unique costs\n","372fe2f9":"#Encode the input Variables\ndef Encode(zomato):\n    for column in zomato.columns[~zomato.columns.isin(['rate', 'cost', 'votes'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nzomato_en = Encode(zomato.copy())\nzomato_en.head() # looking at the dataset after transformation","7dc1c502":"#Get Correlation between different variables\ncorr = zomato_en.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)\nzomato_en.columns","b08a8510":"#Defining the independent variables and dependent variables\nx = zomato_en.iloc[:,[2,3,5,6,7,8,9,11]]\ny = zomato_en['rate']\n#Getting Test and Training Set\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=353)\nx_train.head()","d35147e5":"y_train.head()\n","02a1c104":"zomato_en['menu_item'].unique() # seeing the unique values in 'menu_item'\n","9d67abb6":"zomato_en['location'].unique() # seeing the unique values in 'location'\n","0257f6ab":"zomato_en['cuisines'].unique() # seeing the unique values in 'cusines'\n","5f741a43":"zomato_en['rest_type'].unique() # seeing the unique values in 'rest_type'\n","32f74efd":"x.head()\n","15a5b172":"y.head()\n","8ee86f03":"#Restaurants delivering Online or not\nsns.countplot(zomato['online_order'])\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Restaurants delivering online or Not')\n","ae7998c8":"sns.countplot(zomato['book_table'])\nfig = plt.gcf()\nfig.set_size_inches(10,10)\nplt.title('Restaurants allowing table booking or not')","878da7c7":"plt.rcParams['figure.figsize'] = (13, 9)\nY = pd.crosstab(zomato['rate'], zomato['book_table'])\nY.div(Y.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True,color=['red','yellow'])\nplt.title('table booking vs Normal rate', fontweight = 30, fontsize = 20)\nplt.legend(loc=\"upper right\")\nplt.show()","1dd77224":"sns.countplot(zomato['city'])\nsns.countplot(zomato['city']).set_xticklabels(sns.countplot(zomato['city']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(13,13)\nplt.title('Location wise count for restaurants')","e3076df5":"loc_plt=pd.crosstab(zomato['rate'],zomato['city'])\nloc_plt.plot(kind='bar',stacked=True);\nplt.title('Locationwise Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Location',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend();","e30ab2b2":"sns.countplot(zomato['rest_type'])\nsns.countplot(zomato['rest_type']).set_xticklabels(sns.countplot(zomato['rest_type']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(15,15)\nplt.title('Restuarant Type')","78bc57cc":"loc_plt=pd.crosstab(zomato['rate'],zomato['rest_type'])\nloc_plt.plot(kind='bar',stacked=True);\nplt.title('Rest type - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Rest type',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');\nplt.legend().remove();","8b62d87f":"sns.countplot(zomato['type'])\nsns.countplot(zomato['type']).set_xticklabels(sns.countplot(zomato['type']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(15,15)\nplt.title('Type of Service')","95026861":"type_plt=pd.crosstab(zomato['rate'],zomato['type'])\ntype_plt.plot(kind='bar',stacked=True);\nplt.title('Type - Rating',fontsize=15,fontweight='bold')\nplt.ylabel('Type',fontsize=10,fontweight='bold')\nplt.xlabel('Rating',fontsize=10,fontweight='bold')\nplt.xticks(fontsize=10,fontweight='bold')\nplt.yticks(fontsize=10,fontweight='bold');","cac146f6":"sns.countplot(zomato['cost'])\nsns.countplot(zomato['cost']).set_xticklabels(sns.countplot(zomato['cost']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(15,15)\nplt.title('Cost of Restuarant')","ca2760d8":"fig = plt.figure(figsize=(20,7))\nloc = sns.countplot(x=\"location\",data=zomato_real, palette = \"Set1\")\nloc.set_xticklabels(loc.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Location\",size=18)\nloc\nplt.title('NO. of restaurants in a Location',size = 20,pad=20)","7f84cb7d":"fig = plt.figure(figsize=(17,5))\nrest = sns.countplot(x=\"rest_type\",data=zomato_real, palette = \"Set1\")\nrest.set_xticklabels(rest.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Restaurant type\",size=15)\nrest \nplt.title('Restaurant types',fontsize = 20 ,pad=20)","84030ce3":"plt.figure(figsize=(15,7))\nchains=zomato_real['name'].value_counts()[:20]\nsns.barplot(x=chains,y=chains.index,palette='Set1')\nplt.title(\"Most famous restaurant chains in Bangaluru\",size=20,pad=20)\nplt.xlabel(\"Number of outlets\",size=15)","5937b4d7":"#Prepare a Linear Regression Model\nreg=LinearRegression()\nreg.fit(x_train,y_train)\ny_pred=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","a6c21693":"#Prepairng a Decision Tree Regression\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(x_train,y_train)\ny_predict=DTree.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","1c1102d0":"#Preparing Random Forest REgression\nfrom sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=500,random_state=329,min_samples_leaf=.0001)\nRForest.fit(x_train,y_train)\ny_predict=RForest.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","8f326897":"#Preparing Extra Tree Regression\nfrom sklearn.ensemble import  ExtraTreesRegressor\nETree=ExtraTreesRegressor(n_estimators = 100)\nETree.fit(x_train,y_train)\ny_predict=ETree.predict(x_test)\n\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","47e2edc0":"# Decision tree regression","fefc81a9":"resturant delivering online or not\n","3f64ccee":"# Resturant type","ed67729b":"![title](https:\/\/i1.wp.com\/thespoon.tech\/wp-content\/uploads\/2020\/04\/Zomato.jpg?fit=900%2C600&ssl=1)","abbbbe2b":"Splitting the Dataset","25a82d0f":"# the highest correlation between name and address  which is 0.62 which is not of very much concern","ccc9ad37":"Thanku for reading this notebook  please upvote this note book if you like","7fbdf876":"# Random forest regression","a32fc891":"TABLE OF CONTENT\n\n1.  Loading the dataset: Load the data and import the libraries.\n2.  Data Cleaning:\n\n> * Deleting redundant columns.\n> * Renaming the columns.\n> * Dropping duplicates.\n> * Cleaning individual columns.\n> * Remove the NaN values from the dataset\n> * Some Transformations\n\n\n3. Regression Analysis\n\n> * Linear Regression\n> * Decision Tree Regression\n> * Random Forest Regression\n\n4. Data Visualization: Using plots to find relations between the features.\n\n> * Restaurants delivering Online or not\n> * Restaurants allowing table booking or not\n> * Table booking Rate vs Rate\n> * Best Location\n> * Relation between Location and Rating\n> * Restaurant Type\n> * Gaussian Rest type and Rating\n> * Types of Services\n> * Relation between Type and Rating\n> * Cost of Restuarant\n> * No. of restaurants in a Location\n> * Restaurant type\n> * Most famous restaurant chains in Bengaluru","dfe40508":"It can be observed that we can get better accuracy with extra tree regressior","6fcd74c3":"# Table booking rate vs normal rate","2a530b93":"# location and rating","e1a3571e":"# resturant allowed table booking or not","58f8d97d":"# no of resturant in location","5427f3bf":"# gaussian rest type and rating","b6fbbdbd":"# resturant type","76bea669":"# cost of resturant","4f73fc43":"# Extra tree regressior","ea59e34d":"# Types of services","7d4bf649":"# linear regression","bfa3e4ce":"# location","e904ae31":"# Most famous resturant chain in bangaluru","b2e03c50":"# Type and rating","1fc969d2":"# Regression analysis","a4d9d5d5":"# Data Visualization\n"}}