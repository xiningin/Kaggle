{"cell_type":{"b27d857c":"code","03433c94":"code","857de18c":"code","70660a00":"code","8f438736":"code","6d6d4663":"code","1dba24df":"code","004075d1":"code","f7eaaa5b":"code","bd4f1359":"code","66d08562":"code","3a7986b2":"code","d12b256f":"code","174a4aa5":"code","b8b64cba":"code","e5eeb897":"code","43b28ca8":"markdown","e933217d":"markdown","18ca08af":"markdown","b68ec465":"markdown"},"source":{"b27d857c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","03433c94":"data = pd.read_csv(\"..\/input\/2017.csv\")","857de18c":"data.info()","70660a00":"data.columns","8f438736":"data.head(10) #shows first 10 rows","6d6d4663":"data.rename(columns={\"Economy..GDP.per.Capita.\":\"GDP\"}, inplace = True) ","1dba24df":"data.rename(columns={\"Happiness.Rank\":\"HappinessRank\"}, inplace= True)","004075d1":"data.tail(10) #shows last 10 rows","f7eaaa5b":"data.corr() #creates a correlation figure with rates among the columns ","bd4f1359":"#Correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.01f',ax=ax)\nplt.show()","66d08562":"#histogram\n#bins = number of bar in figure\ndata.GDP.plot(kind=\"hist\",bins=154,figsize=(15,15))\nplt.show()","3a7986b2":"ax = plt.gca()\n\ndata.plot(kind='line', x = \"HappinessRank\",y = \"GDP\", color = \"green\", ax=ax,grid = True,figsize = (15,15))\ndata.plot(kind='line', x = \"HappinessRank\",y = \"Freedom\", color = 'red', ax=ax,grid = True)\ndata.plot(kind='line', x = \"HappinessRank\",y = \"Trust..Government.Corruption.\", color = 'b', ax=ax,grid = True)\nplt.legend(loc = \"upper left\")\nplt.show()","d12b256f":"data.rename(columns={\"Happiness.Score\":\"HappinessScore\"}, inplace = True) ","174a4aa5":"#Let's classify countries whether they are livable or not. Our treshold is is average happiness score\n#(Of course that is not the right way to determine countries that livable or not)  \nthreshold = sum(data.HappinessScore)\/len(data.HappinessScore)\ndata[\"livable\"] = [True if i > threshold else False for i in data.HappinessScore]\ndata.loc[::5,[\"Country\",\"GDP\",\"livable\"]]","b8b64cba":"data.describe()","e5eeb897":"#Black line at top is max\n#Blue line at top is 75%\n#Blue (or middle) line is median (50%)\n#Blue line at bottom is 25%\n#Black line at bottom is min\ndata.boxplot(column=\"HappinessScore\", by=\"livable\")","43b28ca8":"Let's import our dataset","e933217d":"If we're about to analyze statistical values down here;\n* **Count:** Number of entries\n* **Mean:** Average of entries \n* **Std:** Standart deviation\n* **Min:** Minimum entry\n* **25%:** First quantile\n* **50%:** Second quantile or median of serie\n* **75%:** Third quantile\n* **Max:** Maximum entry\n\nWhat is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17 \n* The median is the number that is in middle of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","18ca08af":"**Pay attention!!** we changed names of 2 columns which are \"Happiness.Rank\" and \"Economy..GDP.per.Capita.\" as \"HappinessRank\" and \"GDP\"","b68ec465":"If we run these (.info() and .columns()) commands, it's able to see what that dataset have characteristic properties as columns. (for .info() command, we also can see properties of these columns.) "}}