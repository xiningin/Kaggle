{"cell_type":{"dc1abc00":"code","0f8b65e9":"code","947ed5eb":"code","3f72c435":"code","ba8efb44":"code","b9b96848":"code","e9e1ef3f":"code","b7b3240e":"code","9503b5e2":"code","541b9048":"code","4fe1cf56":"code","f7f978d8":"code","830f275c":"code","c9a8316f":"code","cbda64df":"code","6f7b81d0":"code","3955859e":"code","9188fe72":"code","5b662ee0":"code","b7a3920c":"code","18d1517a":"code","e9183605":"code","350526a0":"code","b9ca30dd":"code","82b833ca":"code","debb2056":"code","278d03f8":"code","5e404d40":"code","fd3a8487":"code","63099870":"code","4968024f":"markdown","fbfdb31b":"markdown","f314c3f6":"markdown","52d5da87":"markdown","aa9a5d08":"markdown","dd72189a":"markdown","bc537302":"markdown","f2a9af00":"markdown","a88dda6a":"markdown"},"source":{"dc1abc00":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0f8b65e9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import class_weight\nimport warnings\nwarnings.filterwarnings('ignore')\n","947ed5eb":"train_df=pd.read_csv('\/kaggle\/input\/heartbeat\/mitbih_train.csv',header=None)\ntest_df=pd.read_csv('\/kaggle\/input\/heartbeat\/mitbih_test.csv',header=None)","3f72c435":"train_df[187]=train_df[187].astype(int)\nequilibre=train_df[187].value_counts()\nprint(equilibre)\n\n","ba8efb44":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['n','q','v','s','f'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","b9b96848":"from sklearn.utils import resample\ndf_1=train_df[train_df[187]==1]\ndf_2=train_df[train_df[187]==2]\ndf_3=train_df[train_df[187]==3]\ndf_4=train_df[train_df[187]==4]\ndf_0=(train_df[train_df[187]==0]).sample(n=20000,random_state=42)\n\ndf_1_upsample=resample(df_1,replace=True,n_samples=20000,random_state=123)\ndf_2_upsample=resample(df_2,replace=True,n_samples=20000,random_state=124)\ndf_3_upsample=resample(df_3,replace=True,n_samples=20000,random_state=125)\ndf_4_upsample=resample(df_4,replace=True,n_samples=20000,random_state=126)\n\ntrain_df=pd.concat([df_0,df_1_upsample,df_2_upsample,df_3_upsample,df_4_upsample])","e9e1ef3f":"equilibre=train_df[187].value_counts()\nprint(equilibre)\n","b7b3240e":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['n','q','v','s','f'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","9503b5e2":"c=train_df.groupby(187,group_keys=False).apply(lambda train_df : train_df.sample(1))","541b9048":"c","4fe1cf56":" plt.plot(c.iloc[0,:186])","f7f978d8":"def plot_hist(class_number,size,min_,bins):\n    img=train_df.loc[train_df[187]==class_number].values\n    img=img[:,min_:size]\n    img_flatten=img.flatten()\n\n    final1=np.arange(min_,size)\n    for i in range (img.shape[0]-1):\n        tempo1=np.arange(min_,size)\n        final1=np.concatenate((final1, tempo1), axis=None)\n    print(len(final1))\n    print(len(img_flatten))\n    plt.hist2d(final1,img_flatten, bins=(bins,bins),cmap=plt.cm.jet)\n    plt.show()","830f275c":"plot_hist(0,70,5,65)","c9a8316f":" plt.plot(c.iloc[1,:186])","cbda64df":"plot_hist(1,50,5,45)","6f7b81d0":" plt.plot(c.iloc[2,:186])","3955859e":"plot_hist(2,50,5,45)","9188fe72":"plt.plot(c.iloc[3,:186])","5b662ee0":"plot_hist(3,60,15,45)","b7a3920c":"plt.plot(c.iloc[4,:186])","18d1517a":"plot_hist(4,50,15,35)","e9183605":"def add_gaussian_noise(signal):\n    noise=np.random.normal(0,0.5,186)\n    return (signal+noise)\n","350526a0":"tempo=c.iloc[0,:186]\nbruiter=add_gaussian_noise(tempo)\n\nplt.subplot(2,1,1)\nplt.plot(c.iloc[0,:186])\n\nplt.subplot(2,1,2)\nplt.plot(bruiter)\n\nplt.show()\n\n","b9ca30dd":"target_train=train_df[187]\ntarget_test=test_df[187]\ny_train=to_categorical(target_train)\ny_test=to_categorical(target_test)","82b833ca":"X_train=train_df.iloc[:,:186].values\nX_test=test_df.iloc[:,:186].values\nfor i in range(len(X_train)):\n    X_train[i,:186]= add_gaussian_noise(X_train[i,:186])\nX_train = X_train.reshape(len(X_train), X_train.shape[1],1)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],1)","debb2056":"def network(X_train,y_train,X_test,y_test):\n    \n\n    im_shape=(X_train.shape[1],1)\n    inputs_cnn=Input(shape=(im_shape), name='inputs_cnn')\n    conv1_1=Convolution1D(128,(3), activation='relu', input_shape=im_shape)(inputs_cnn)\n    pool1=MaxPool1D(pool_size=(3), strides=(2), padding=\"same\")(conv1_1)\n    conv2_1=Convolution1D(128, (3), activation='relu', input_shape=im_shape)(pool1)\n    pool2=MaxPool1D(pool_size=(3), strides=(2), padding=\"same\")(conv2_1)\n\n    flatten=Flatten()(pool1)\n    dense_end1 = Dense(128, activation='relu')(flatten)\n    main_output = Dense(5, activation='softmax', name='main_output')(dense_end1)\n    \n    \n    model = Model(inputs= inputs_cnn, outputs=main_output)\n    model.compile(optimizer='adam', loss='categorical_crossentropy',metrics = ['accuracy'])\n    \n    \n    callbacks = [EarlyStopping(monitor='val_loss', patience=8),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n\n    history=model.fit(X_train, y_train,epochs=40,callbacks=callbacks, batch_size=32,validation_data=(X_test,y_test))\n    model.load_weights('best_model.h5')\n    return(model,history)","278d03f8":"def evaluate_model(history,X_test,y_test,model):\n    scores = model.evaluate((X_test),y_test, verbose=0)\n    print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n    \n    print(history)\n    fig1, ax_acc = plt.subplots()\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Model - Accuracy')\n    plt.legend(['Training', 'Validation'], loc='lower right')\n    plt.show()\n    \n    fig2, ax_loss = plt.subplots()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model- Loss')\n    plt.legend(['Training', 'Validation'], loc='upper right')\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.show()\n    target_names=['0','1','2','3','4']\n    \n    y_true=[]\n    for element in y_test:\n        y_true.append(np.argmax(element))\n    prediction_proba=model.predict(X_test)\n    prediction=np.argmax(prediction_proba,axis=1)\n    cnf_matrix = confusion_matrix(y_true, prediction)\n    ","5e404d40":"from keras.layers import Dense, Convolution1D, MaxPool1D, Flatten, Dropout\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers.normalization import BatchNormalization\nimport keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel,history=network(X_train,y_train,X_test,y_test)\n\n","fd3a8487":"evaluate_model(history,X_test,y_test,model)\ny_pred=model.predict(X_test)\n","63099870":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(10, 10))\nplot_confusion_matrix(cnf_matrix, classes=['N', 'S', 'V', 'F', 'Q'],normalize=True,\n                      title='Confusion matrix, with normalization')\nplt.show()\n\n","4968024f":"![4-Figure2-1.png](attachment:4-Figure2-1.png)","fbfdb31b":"**Load Data**","f314c3f6":"##Reference:\n\nhttps:\/\/www.kaggle.com\/gregoiredc\/arrhythmia-on-ecg-classification-using-cnn\n\nhttps:\/\/www.kaggle.com\/coni57\/model-from-arxiv-1805-00794","52d5da87":"![3-s2.0-B9780124159365000098-f09-10-9780124159365.jpg](attachment:3-s2.0-B9780124159365000098-f09-10-9780124159365.jpg)","aa9a5d08":"**Network**","dd72189a":"**Balance of dataset**","bc537302":"**Classes**","f2a9af00":"![image.png](attachment:image.png)\n","a88dda6a":"**Pretreat**"}}