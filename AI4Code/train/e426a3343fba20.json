{"cell_type":{"667becc4":"code","34200399":"code","e00d61e3":"code","df65c8d1":"code","3499d772":"code","475522bf":"code","06d5e779":"code","4a63a074":"code","90e76ac2":"code","8de8b2ab":"markdown","445c466b":"markdown","48403da7":"markdown","4c64747b":"markdown","2df3dfcb":"markdown","a3c48f8d":"markdown","388a67a4":"markdown","56d18ec6":"markdown","e2b83de4":"markdown","c4ffaea9":"markdown","89ec8ce6":"markdown","2f878653":"markdown"},"source":{"667becc4":"import pandas as pd \nimport os\nimport numpy as np\n\npath = '\/kaggle\/input\/two-person-interaction-kinect-dataset\/'\n\nfull_data = pd.DataFrame()\n\nfor subdir, dirs, files in sorted(os.walk(path)):\n    for file in sorted(files):\n        if file.endswith('.txt'):\n            #print('subdir:{},name:{}'.format(subdir[-6:-4],file))\n            data = pd.read_csv(subdir+'\/'+file,header=None)\n            data['classs'] = subdir[-6:-4]\n            full_data = pd.concat([full_data,data],ignore_index=True)\n\nfull_data.drop(full_data.columns[[0]],axis=1,inplace=True)\nfull_data.head()","34200399":"full_data.describe()","e00d61e3":"full_data.dtypes","df65c8d1":"full_data['classs'].astype('category')","3499d772":"x = full_data.drop([\"classs\"],axis=1)\ny = full_data.classs.values\nprint('size of x = ',x.shape)\nprint('size of y = ',y.shape)","475522bf":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.25,shuffle=True)","06d5e779":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nknn_clf = KNeighborsClassifier(n_neighbors=3)\nprint('......')\nsvm_clf = SVC(random_state=1)\nnb_clf = GaussianNB()\nnn_clf = MLPClassifier(solver='lbfgs',max_iter=20000)\nsgd_clf = SGDClassifier()\nrf_clf = RandomForestClassifier(n_estimators=100,random_state=1)\n\nvoting_clf = VotingClassifier(\n        estimators=[('knn',knn_clf),('svm',svm_clf),('nb',nb_clf),\n                    ('NN',nn_clf),('sgd',sgd_clf),('rf',rf_clf)], voting='hard')\n\nfrom sklearn.metrics import accuracy_score\naccuracies = {}\nfor clf in (knn_clf, svm_clf, nb_clf, nn_clf, sgd_clf, rf_clf, voting_clf):\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict(x_test)\n    print(clf.__class__.__name__,accuracy_score(y_test, y_pred))\n    accuracies[clf.__class__.__name__] = accuracy_score(y_test,y_pred)\n","4a63a074":"from sklearn.model_selection import cross_val_score\n\naccuracy_map = cross_val_score(estimator = rf_clf, X = x_train, y =y_train, cv = 8)\nprint(\"avg acc: \",np.mean(accuracy_map))\nprint(\"acg std: \",np.std(accuracy_map))","90e76ac2":"from matplotlib import pyplot as plt\n\nplt.figure(figsize=(14, 8))\nplt.suptitle('Accuracies of classifiers')\nplt.subplot(121)\nplt.bar(*zip(*sorted(accuracies.items())),color = 'g')\nplt.xticks(fontsize=7)\nplt.subplot(122)\nplt.plot(*zip(*sorted(accuracies.items())),marker='P',linestyle='--',color='r')\nplt.xticks(fontsize=7)\nplt.grid()\nplt.show()","8de8b2ab":"- Let's split data as \"x\" is data and \"y\" is label.","445c466b":"- First we have to parse data.I will just use skeleton joint data to classify.Because it give us 3d coordinates of joints.\n","48403da7":"- As you see above, we have 15 joint positions for x,y,z and 2 people so;\n**15(joint) x 3(x,y,z) x 2(person) = 90**\n- 91th column is class of action.(8 classes)","4c64747b":"**That's all, please upvote if you like my notebook:)**","2df3dfcb":"- Let's check that is the data ready?","a3c48f8d":"- I used KNN, SVM, NN, SGD, RF, NB and the voting classifier.Random forest estimator is 100.You can check hyperparamters.","388a67a4":"# DATA DESCRIPTION\n![approaching_skel.gif](attachment:approaching_skel.gif)\n\n### Data Storage Format\n\n..Data\n\n.......SubjectA&B\n\n...................Action01\n\n............................01(A to B)\n\n............................02(B to A)\n\n...................Action02\n\n...................\n\n...................Action08\n\n.......SubjectA&B\n\n.\n\n.\n### Actions\n1. close up\n2. get away from each other\n3. kick\n4. push\n5. shake hands\n6. hug\n7. give a notebook\n8. punch","56d18ec6":"Hi, today I will show you how to classifiy human activities with 3d human joint data.Let's see what happened!","e2b83de4":"- The best result is Random Forest as you see, but I want to make a Cross Validaton to prove the accuracy and look the precision.","c4ffaea9":"-  91. column is the class of the action, but it is in format of object.To use it correctly, I will change it to \"categorical\" format.","89ec8ce6":"- In this section, I split data into train and test.","2f878653":"- As you see, average accuracy of 10 fold CV is very high and standart deviation is veri low which means both accuracy score and precision is very good.\n- Now, let's visualize accuracies to show you better and compare."}}