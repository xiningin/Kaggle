{"cell_type":{"83b9c926":"code","7028e9de":"code","f7460148":"code","566f5f0b":"code","d38d4013":"code","1ee8e279":"code","b57b7a7f":"code","e628e31d":"code","9b62191f":"code","a8e369c2":"code","f464e20a":"code","e0a00f0d":"code","aa86b5d3":"code","f34ce9d4":"code","2ed80956":"code","b5fb4c9a":"code","3ab1abc5":"markdown","9b1f9a84":"markdown","1a858014":"markdown","13741e58":"markdown","846223a9":"markdown","c3a89586":"markdown","4e988a44":"markdown"},"source":{"83b9c926":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","7028e9de":"\nimport glob\nimport cv2\nfrom pathlib import Path\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, SeparableConv2D\n","f7460148":"\ndata_dir = Path('..\/input\/intel-image-classification')\n\ntrain_dir = data_dir \/ 'seg_train' \/ 'seg_train'\ntest_dir  = data_dir \/ 'seg_test' \/ 'seg_test'\npred_dir  = data_dir \/ 'seg_pred' \/ 'seg_pred'","566f5f0b":"# Creating empty lists\nX_train = []\nY_train = []\nX_test  = []\nY_test  = []\nX_pred  = []","d38d4013":"# Getting files and appending to their respective lists\nbuildings_dir = train_dir \/ 'buildings'\nbuildings     = buildings_dir.glob('*.jpg')\n\nforest_dir    = train_dir \/ 'forest'\nforest        = forest_dir.glob('*.jpg')\n\nglacier_dir   = train_dir \/ 'buildings'\nglacier       = glacier_dir.glob('*.jpg')\n\nmountain_dir  = train_dir \/ 'mountain'\nmountain      = mountain_dir.glob('*.jpg')\n\nsea_dir       = train_dir \/ 'sea'\nsea           = sea_dir.glob('*.jpg')\n\nstreet_dir    = train_dir \/ 'street'\nstreet        = street_dir.glob('*.jpg')","1ee8e279":"\nheight = 100 \nwidth  = 100\nfor a in buildings:\n    image = cv2.imread(str(a))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(0, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\nfor b in forest:\n    image = cv2.imread(str(b))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(1, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\nfor c in glacier:\n    image = cv2.imread(str(c))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(2, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\nfor d in mountain:\n    image = cv2.imread(str(d))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(3, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\nfor e in sea:\n    image = cv2.imread(str(e))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(4, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\nfor f in street:\n    image = cv2.imread(str(f))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(5, num_classes=6)\n    X_train.append((img))\n    Y_train.append((label))\n    \nX_train = np.array(X_train)  \nY_train = np.array(Y_train)","b57b7a7f":"X_train.shape ,Y_train.shape","e628e31d":"buildings_dir = test_dir \/ 'buildings'\nbuildings     = buildings_dir.glob('*.jpg')\n\nforest_dir    = test_dir \/ 'forest'\nforest        = forest_dir.glob('*.jpg')\n\nglacier_dir   = test_dir \/ 'buildings'\nglacier       = glacier_dir.glob('*.jpg')\n\nmountain_dir  = test_dir \/ 'mountain'\nmountain      = mountain_dir.glob('*.jpg')\n\nsea_dir       = test_dir \/ 'sea'\nsea           = sea_dir.glob('*.jpg')\n\nstreet_dir    = test_dir \/ 'street'\nstreet        = street_dir.glob('*.jpg')","9b62191f":"for a in buildings:\n    image = cv2.imread(str(a))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(0, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\nfor b in forest:\n    image = cv2.imread(str(b))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(1, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\nfor c in glacier:\n    image = cv2.imread(str(c))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(2, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\nfor d in mountain:\n    image = cv2.imread(str(d))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(3, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\nfor e in sea:\n    image = cv2.imread(str(e))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(4, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\nfor f in street:\n    image = cv2.imread(str(f))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    label = to_categorical(5, num_classes=6)\n    X_test.append((img))\n    Y_test.append((label))\n    \nX_test = np.array(X_test)  \nY_test = np.array(Y_test)","a8e369c2":"X_test.shape ,Y_test.shape","f464e20a":"pred_all = pred_dir.glob('*.jpg')\nfor p in pred_all:\n    image = cv2.imread(str(p))\n    resizeimage = cv2.resize(image, (height,width))\n    img = resizeimage.astype(np.float32)\/255.\n    X_pred.append((img))\n    \nX_pred = np.array(X_pred)\n\nX_pred.shape","e0a00f0d":"# introducing inception block\n\n#conv_1x1 = Conv2D(64, (1, 1), padding='same', activation='relu')(x)\n\n#conv_3x3 = Conv2D(96, (1, 1), padding='same', activation='relu')(x)\n#conv_3x3 = Conv2D(128, (3, 3), padding='same', activation='relu')(conv_3x3)\n\n#conv_5x5 = Conv2D(16, (1, 1), padding='same', activation='relu')(x)\n#conv_5x5 = Conv2D(32, (5, 5), padding='same', activation='relu')(conv_5x5)\n\n#pool_proj = MaxPooling2D((2,2), strides = (1,1),padding='same')(x)\n#pool_proj = Conv2D(32, (1, 1), padding='same', activation='relu')(pool_proj)\n\n#concat = Concatenate(axis=3)\n#x = concat([conv_1x1, conv_3x3 , conv_5x5 , pool_proj])","aa86b5d3":"model=Sequential()\nmodel.add(Conv2D(32, (3,3),padding=\"same\",activation=\"relu\",input_shape=(100,100,3)))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(SeparableConv2D(64 , (3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(SeparableConv2D(128,(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\n\nmodel.add(SeparableConv2D(128,(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\n\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.8))\nmodel.add(Dense(6,activation=\"softmax\"))\nmodel.summary()","f34ce9d4":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\n","2ed80956":"# training the model\n\nmodel.fit(X_train ,Y_train , batch_size=500 ,epochs=120)","b5fb4c9a":"model.evaluate(X_test,Y_test)","3ab1abc5":"**2(c). Reading image files of prediction data**","9b1f9a84":"**4. Evaluation**","1a858014":"**2(b). Reading image files of test data**","13741e58":"** 1 .**IMPORTING LIBRARIES**","846223a9":"**3. MODEL**","c3a89586":"**2(a). Reading image files of training data**","4e988a44":"2. **Data cleansing**"}}