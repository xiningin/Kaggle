{"cell_type":{"bf05fff7":"code","cbbcf3ef":"code","db692f8d":"code","ccd7d3a2":"code","9e1ff181":"code","3f18081d":"code","6176f8f5":"code","b90c4ecf":"code","247c4be6":"code","4ea8a930":"code","aa53268b":"code","88486544":"code","dc3a6aa3":"code","ab50ac88":"code","5b53d612":"code","81d771a9":"code","5c1ed948":"code","4f1a4a45":"code","644c57d8":"code","1ed0df8a":"code","a746b2e7":"code","65678751":"code","f422ea0f":"code","05b90a29":"code","c4a10103":"code","42490e56":"code","fbcec8bb":"code","919eaa50":"code","89eaee7d":"code","e9ffa341":"code","66bf0fb3":"code","9db849a5":"code","db6a73a9":"code","fe5b3ca6":"code","e48c0900":"code","dc62f865":"code","509c4964":"code","c116ec0d":"code","f3121c99":"code","e46fdbe3":"code","f80d787c":"code","e9276d1c":"code","f908e0f9":"code","51a1b6e6":"code","b4acf967":"code","d2ac7fe7":"code","7191d004":"code","e28c1a16":"code","ef806dff":"code","3609e96d":"code","6404c2ae":"code","4e0543d4":"code","e295d033":"code","0fa18a2d":"code","02fc6f39":"code","a067ec59":"code","445fd94a":"code","20eb68a2":"code","71d12abe":"code","56c2fab7":"code","bf8911ec":"code","daf14c8a":"code","f0ff3d86":"code","fb7da2be":"code","0ca8349e":"code","1a920a21":"code","16cd8bff":"code","60a7c75d":"code","3292fadc":"code","a6171d67":"code","99c4486f":"code","f5cd9df4":"code","bbffbe40":"code","2247b2f7":"code","f5e7914c":"code","8b1a79b3":"code","c41e965f":"code","621df8f1":"code","ca11ada2":"code","ef58222d":"code","a5827f6f":"code","0c0880df":"code","2e6cc765":"code","4d9e42c5":"code","a29c1747":"code","d8498c94":"code","6eb4d5ff":"code","2a645d9d":"code","dadc40a4":"code","fdd9a45f":"code","d4a2e591":"code","75cefdc6":"code","4b895422":"code","7244a58b":"code","ca7536f8":"code","c9ebab6e":"code","b2ced6ff":"code","0ba90e8c":"code","c571488b":"markdown","9e3f00dd":"markdown","3a0afab9":"markdown","f3eefee4":"markdown","52a16ae1":"markdown","36383359":"markdown","fff42a86":"markdown","41cc2abe":"markdown","ce5656dd":"markdown","6a38db2d":"markdown","54046f9c":"markdown","9af24069":"markdown","2ae304a5":"markdown","0b8ab266":"markdown","f957fbe5":"markdown","ad82b8b1":"markdown","a043136a":"markdown","5d31531e":"markdown","d29ea541":"markdown","bd2dae07":"markdown","57a3a47a":"markdown","333b20bf":"markdown"},"source":{"bf05fff7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nimport sklearn.model_selection as ms\nfrom sklearn.metrics import r2_score\nimport sklearn\nimport math\n","cbbcf3ef":"train_df = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv') \n#Loading train.csv","db692f8d":"test_df = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv') #loading test.csv","ccd7d3a2":"submission_file = pd.read_csv ('..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv') #loading summision file","9e1ff181":"test_df.head() #top 5 rows in test file","3f18081d":"test_df.dtypes #data types in test file","6176f8f5":"train_df.head()","b90c4ecf":"train_df.info() #information on data","247c4be6":"#Renaming the columns\ntrain_df = train_df.rename(columns = {'Unnamed: 0': 'ClaimNumber',\n                           'Unnamed: 1':'DateTimeOfAccident',\n                          'Unnamed: 3' : 'Age',\n                          'Unnamed: 4' :'Gender',\n                          'Unnamed: 5' : 'MaritalStatus',\n                          'Unnamed: 6' : 'DependentChildren',\n                          'Unnamed: 8': 'WeeklyWages',\n                          'Unnamed: 9' : 'PartTimeFullTime',\n                          'Unnamed: 10' :'HoursWorkedPerWeek',\n                          'Unnamed: 12': 'ClaimDescription',\n                          'Unnamed: 13' : 'InitialIncurredCalimsCost',\n                          'Unnamed: 14' : 'UltimateIncurredClaimCost'})","4ea8a930":"train_df  = train_df.drop(0, axis=0) #dropping the first row","aa53268b":"train_df","88486544":"train_df.dtypes #datatypes of train.csv","dc3a6aa3":"train_df['MaritalStatus']","ab50ac88":"train_df.head()","5b53d612":"test_df.dtypes #datatypes","81d771a9":"#Converting DataTypes from object to int and float\ntrain_df['Age'] = train_df['Age'].astype('int64') ","5c1ed948":"train_df['DependentChildren'] = train_df['DependentChildren'].astype('int64')\ntrain_df['DependentsOther'] = train_df['DependentsOther'].astype('int64')\ntrain_df['WeeklyWages'] = train_df['WeeklyWages'].astype('float')\ntrain_df['DaysWorkedPerWeek'] = train_df['DaysWorkedPerWeek'].astype('int')\ntrain_df['HoursWorkedPerWeek'] = train_df['HoursWorkedPerWeek'].astype('float')\ntrain_df['InitialIncurredCalimsCost'] = train_df['InitialIncurredCalimsCost'].astype('int64')\ntrain_df['UltimateIncurredClaimCost'] = train_df['UltimateIncurredClaimCost'].astype('float')","4f1a4a45":"#converting dtype:  object to datetime\ntrain_df['DateTimeOfAccident'] = pd.to_datetime(train_df['DateTimeOfAccident'])\ntrain_df['DateReported'] = pd.to_datetime(train_df['DateReported'])\n\ntest_df['DateTimeOfAccident'] = pd.to_datetime(train_df['DateTimeOfAccident'])\ntrain_df['DateReported'] = pd.to_datetime(train_df['DateReported'])","644c57d8":"train_df.dtypes","1ed0df8a":"train_df.describe() #describe ","a746b2e7":"train_df.isnull() #Checking for null values","65678751":"train_df.isnull().sum() ","f422ea0f":"test_df.isnull().sum()","05b90a29":"train_df = train_df.drop('ClaimNumber', axis = 1)  #Dropping columns in train.csv\ntrain_df = train_df.drop({'DateTimeOfAccident', 'DateReported'}, axis=1)","c4a10103":"test_df = test_df.drop('ClaimNumber', axis=1) #Dropping columns in test.csv\ntest_df = test_df.drop({'DateTimeOfAccident', 'DateReported'}, axis=1)","42490e56":"#Categorical variable - substituting the missing values with mode\ntrain_df['MaritalStatus'].mode()","fbcec8bb":"train_df['MaritalStatus'] = train_df['MaritalStatus'].fillna(train_df['MaritalStatus'].mode()[0])","919eaa50":"test_df['MaritalStatus'] = test_df['MaritalStatus'].fillna(test_df['MaritalStatus'].mode()[0]) #same for test_df","89eaee7d":"train_df.isnull().sum()","e9ffa341":"test_df.isnull().sum()","66bf0fb3":"sns.distplot(train_df['WeeklyWages']) #skewed","9db849a5":"#DATA IS SKEWED, so we substitute with median\ntrain_df['WeeklyWages'].median()","db6a73a9":"train_df['WeeklyWages'] = train_df['WeeklyWages'].replace(np.nan, train_df['WeeklyWages'].median())","fe5b3ca6":"train_df['HoursWorkedPerWeek'].head()","e48c0900":"sns.distplot(train_df['HoursWorkedPerWeek']) #checking the distribution","dc62f865":"#skewed\ntrain_df['HoursWorkedPerWeek'] = train_df['HoursWorkedPerWeek'].replace(np.nan, train_df['HoursWorkedPerWeek'].median())","509c4964":"train_df.isnull().sum() #No null values","c116ec0d":"train_df['Age'].describe() #describing 'Age' column","f3121c99":"train_df['Age']","e46fdbe3":"#Equal width binning","f80d787c":"#for train data\ntrain_df['Age_bin'] = pd.cut(train_df['Age'], bins=[10,20,30,40,50,60,70,80], \n        labels = ['Denarian','Vicenarian','Tricenarian','Quadragenarian',\n                 'Quinquagenarian','Sexagenarian','Septuagenarian'])","e9276d1c":" #for test data\ntest_df['Age_bin'] = pd.cut(test_df['Age'], bins=[10,20,30,40,50,60,70,80], \n        labels = ['Denarian','Vicenarian','Tricenarian','Quadragenarian',\n                 'Quinquagenarian','Sexagenarian','Septuagenarian'])","f908e0f9":"train_df['Age_bin'] # Age_bin column","51a1b6e6":"train_df['WeeklyWages'].describe() # describing columns","b4acf967":"train_df['HoursWorkedPerWeek'].describe()","d2ac7fe7":"train_df['InitialIncurredCalimsCost'].describe()","7191d004":"#function for scaling\ndef scaling(x):\n    y = (x-x.min())\/(x.max()-x.min())\n    return y\n\n","e28c1a16":"train_df_scaled = train_df.copy() #copying train_df data into train_df_scaled","ef806dff":"#replacing the data in columns in train_df_scaled with scaled columns (Normalized data)\n\ntrain_df_scaled['UltimateIncurredClaimCost'] = scaling(train_df['UltimateIncurredClaimCost'])\ntrain_df_scaled['InitialIncurredCalimsCost'] = scaling(train_df['InitialIncurredCalimsCost'])\ntrain_df_scaled['Age'] = scaling(train_df['Age'])\ntrain_df_scaled['WeeklyWages'] = scaling(train_df['WeeklyWages'])\ntrain_df_scaled['HoursWorkedPerWeek'] = scaling(train_df['HoursWorkedPerWeek'])","3609e96d":"test_df_scaled = test_df.copy() #copying test data","6404c2ae":"#Sustituting the data in columns with scaled data\ntest_df_scaled['InitialIncurredCalimsCost'] = scaling(test_df['InitialIncurredCalimsCost'])\ntest_df_scaled['Age'] = scaling(test_df['Age'])\ntest_df_scaled['WeeklyWages'] = scaling(test_df['WeeklyWages'])\ntest_df_scaled['HoursWorkedPerWeek'] = scaling(test_df['HoursWorkedPerWeek'])","4e0543d4":"train_df_scaled['WeeklyWages'].describe()","e295d033":"#separating the numerical columns and categorical columns\nnum_train_df_scaled = train_df_scaled.select_dtypes(include = [float,int])  #numerical","0fa18a2d":"cat_train_df = train_df.select_dtypes(exclude = [float, int]) #categorical","02fc6f39":"cat_train_df","a067ec59":"#Number of Married, Unmarries and single people\n\nsns.countplot(train_df['MaritalStatus'])\n\n#M-Married\n#U- Unknown\n#S- Single","445fd94a":"#Countplot for age_bin\n\nplt.figure(figsize = (16,6))\nsns.countplot(cat_train_df['Age_bin'])","20eb68a2":"#Number of males and females\n\nsns.countplot(x = train_df['Gender'])","71d12abe":"train_df_scaled['WeeklyWages'].describe()","56c2fab7":"#Relation between UltimateIncurredClaimCost and WeeklyWages\n\nplt.figure(figsize=(16,16))\n\nsns.scatterplot(train_df_scaled['UltimateIncurredClaimCost'],train_df_scaled['WeeklyWages'])\n","bf8911ec":"train_df_scaled['Gender'].value_counts()","daf14c8a":"#with gender\nplt.figure(figsize=(16,6))\n\nsns.scatterplot(data=train_df_scaled, x ='WeeklyWages',y = 'UltimateIncurredClaimCost', \n               hue = 'Gender')","f0ff3d86":"#regressionplot for HoursWorkedPerWeek and WeeklyWages\n\nplt.figure(figsize=(16,6))\n\nsns.regplot(train_df_scaled['HoursWorkedPerWeek'], train_df_scaled['WeeklyWages'])","fb7da2be":"#Number of part time and full time workers\n\nplt.figure(figsize=(16,7))\n\nsns.countplot(train_df['PartTimeFullTime'])","0ca8349e":"train_df_scaled.head() #top 5 rows","1a920a21":"#Relation between dependent children and hours worked per week\n\nplt.figure(figsize=(16,6))\n\nsns.scatterplot(train_df_scaled['DependentChildren'], train_df_scaled['HoursWorkedPerWeek'])","16cd8bff":"#Relation between Age and Days worked per week\n\nsns.scatterplot(train_df_scaled['Age'], train_df_scaled['DaysWorkedPerWeek'])","60a7c75d":"#distribution\nplt.figure(figsize=(16,6))\n\nsns.kdeplot(train_df_scaled['InitialIncurredCalimsCost'], shade = True) #positively skewed","3292fadc":"plt.figure(figsize=(16,6))\nsns.kdeplot(train_df_scaled['HoursWorkedPerWeek'], label = 'HoursWorkedPerWeek', shade = True)\n\nsns.kdeplot(train_df_scaled['WeeklyWages'], label='WeeklyWages', shade = True)\n\nplt.legend()","a6171d67":"plt.figure(figsize=(16,6))\n\nsns.lineplot(data = train_df_scaled['InitialIncurredCalimsCost'], label = 'Initial Incurred Claims Cost')\nsns.lineplot(data= train_df_scaled['UltimateIncurredClaimCost'], label = 'UltimateIncurredClaimCost')\n\nplt.legend()","99c4486f":"plt.figure(figsize=(16,6))\nsns.kdeplot(train_df_scaled['InitialIncurredCalimsCost'], label = 'InitialIncurredCalimsCost', shade = True)\n\nsns.kdeplot(train_df_scaled['UltimateIncurredClaimCost'], label='UltimateIncurredClaimCost', shade = True)\n\nplt.legend()","f5cd9df4":"#Distribution of age\nplt.figure(figsize=(16,6))\nsns.distplot(train_df_scaled['Age'], color='red')","bbffbe40":"plt.figure(figsize=(16,6))\n\nsns.set_style('whitegrid')\n\nsns.countplot(train_df_scaled['DependentChildren'])","2247b2f7":"#violin plot\n\nsns.catplot(data=train_df_scaled, x= 'UltimateIncurredClaimCost', col='PartTimeFullTime', kind = 'violin')","f5e7914c":"sns.catplot(data=train_df_scaled, x='DependentChildren', y ='UltimateIncurredClaimCost', kind = 'point')","8b1a79b3":"train_df_scaled.columns #columns in train_df_scaled","c41e965f":"plt.figure(figsize=(16,6))\n\nsns.set_style('whitegrid')\n\nsns.countplot(train_df_scaled['DependentsOther'])","621df8f1":"x_train = train_df_scaled.copy()\nx_test = test_df_scaled.copy()  #copying data","ca11ada2":"x_train.dtypes #datatypes of x_train","ef58222d":"x_train = x_train.drop({'Gender','MaritalStatus', 'PartTimeFullTime', 'ClaimDescription'}, axis=1) #dropping unnecessary columns","a5827f6f":"x_test = x_test.drop({'Gender','MaritalStatus', 'PartTimeFullTime', 'ClaimDescription'}, axis=1)","0c0880df":"x_train = x_train.drop('Age_bin', axis=1)","2e6cc765":"x_test = x_test.drop('Age_bin', axis=1)","4d9e42c5":"x_train.dtypes","a29c1747":"model = LinearRegression()","d8498c94":"train_df_scaled.head()","6eb4d5ff":"test_df_scaled","2a645d9d":"x_train_data = x_train.drop('UltimateIncurredClaimCost', axis=1)\n\ntarget_variable = x_train['UltimateIncurredClaimCost']","dadc40a4":"x_train_1, x_test_1, y_train,y_test = ms.train_test_split(x_train_data,target_variable,\n                                                       test_size =0.3, random_state=22)","fdd9a45f":"model = LinearRegression()","d4a2e591":"model.fit(x_train_1,y_train)","75cefdc6":"r_square = model.score(x_train_1, y_train)\nprint('R Square:',r_square)","4b895422":"intercept = model.intercept_\nprint('Intercept:', intercept)\nprint('Slope:', model.coef_)","7244a58b":"y_predict_ = model.predict(x_test_1)\nprint(y_predict_)     ","ca7536f8":"r = r2_score(y_test, y_predict_)\nprint(r)","c9ebab6e":"y_prediction = model.predict(x_test)\nprint(y_prediction)","b2ced6ff":"submission_file['UltimateIncurredClaimCost'] = y_prediction\nsubmission_file.to_csv(\"output.csv\",index=False)","0ba90e8c":"mse = sklearn.metrics.mean_squared_error(y_test, y_predict_)\n\nRootMeanSquaredError = math.sqrt(mse)\nprint('RootmeanSquaredError: ',RootMeanSquaredError )","c571488b":"# DATA LOADING","9e3f00dd":"# DATA NORMALIZATION","3a0afab9":"#### The number of working hours per week is more when there are less dependent children","f3eefee4":"## MISSING VALUE COMPUTATION","52a16ae1":"# PREDICTION FOR TRAINED DATA","36383359":"#### ","fff42a86":"#### There is no relationship between age and Days worked per week","41cc2abe":"#### This graph concludes that there are many people who are aged between 20-30","ce5656dd":"# DROPPING COLUMNS","6a38db2d":"#### There are many outliers.","54046f9c":"#### Male are more than female","9af24069":"#### Number of full time workers are comparitively more than part time workers\n","2ae304a5":"#### People with more dependent children claimed more \n","0b8ab266":"## FEATURE BINNING","f957fbe5":"10-20 -> Denarian\n\n20-30 -> Vicenarian\n\n\n30-40 -> Tricenarian\n\n\n40-50 -> Quadragenarian\n\n\n50-60 -> Quinquagenarian\n\n\n60-70 -> Sexagenarian\n\n\n70-80 -> Septuagenarian","ad82b8b1":"# DATA TRANSFORMATION","a043136a":"# LINEAR REGRESSION MODEL ","5d31531e":"### Checking the distribution","d29ea541":"# EXPLORATORY DATA ANALYSIS","bd2dae07":"# PREDICTION FOR TEST DATA","57a3a47a":"#### Many people in this data are single","333b20bf":"# IMPORTING LIBRARIES"}}