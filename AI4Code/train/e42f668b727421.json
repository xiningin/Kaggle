{"cell_type":{"2281cc1a":"code","02c59882":"code","9c7f4200":"code","188b9756":"code","be3e25d0":"code","ab6c0789":"code","01d11b31":"code","eae6f1b5":"code","3b976a7f":"code","9e3828da":"code","6676a77b":"code","96062805":"code","7068900a":"code","47b643e9":"code","9aa203d9":"code","468da546":"code","cd53b826":"code","aedd8e3e":"code","9fb53159":"code","fb86b6a6":"code","11fa5535":"code","e74df7e8":"code","10e2883a":"code","92bc0676":"code","ad604dcb":"code","74babcb1":"markdown","27b86996":"markdown"},"source":{"2281cc1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02c59882":"import numpy as np \nimport pandas as pd\n","9c7f4200":"gap = pd.read_csv('..\/input\/gapminder\/gapminder.csv')","188b9756":"gap.head()","be3e25d0":"# CHecking for null values\ngap.isna().sum()","ab6c0789":"gap.drop('Region',axis = 1,inplace = True)\n\n","01d11b31":"# Checking columns names\ngap.columns","eae6f1b5":"gap.describe()","3b976a7f":"x = gap.iloc[:,gap.columns != 'life']\ny = gap.loc[:,'life']\n","9e3828da":"# importing modeules\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error","6676a77b":"# dividing the dataset into train and test sets\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state =123)","96062805":"# Creating the Regressor\nreg = LinearRegression()\nreg.fit(X_train,y_train)\ny_pred = reg.predict(X_test)\n","7068900a":"# Finding R-squared\nprint('R-squared of model :',reg.score(X_test,y_test))","47b643e9":"# finding root mean squared error\nprint('Root mean squared error :: ',np.sqrt(mean_squared_error(y_pred,y_test)))","9aa203d9":"from sklearn.model_selection import cross_val_predict,cross_val_score","468da546":"# cross_val_score gives R-squared values according to cv value\nreg_cross_val = LinearRegression()\ncross_val_r_squared = cross_val_score(reg_cross_val,x,y,cv = 10)\n","cd53b826":"print(cross_val_r_squared)","aedd8e3e":"print('mean of cross val_score values::',np.mean(cross_val_r_squared))","9fb53159":"# Implementing Reidge Regression\n# importing Ridge\nfrom sklearn.linear_model import Ridge\n\nridge = Ridge(alpha = 0.1,normalize = True)\nridge.fit(X_train,y_train)\nridge_predict = ridge.predict(X_test)\nprint('Score using Ridge :: ',ridge.score(X_test,y_test))\n","fb86b6a6":"# Implementing Lasso Regression\n# importing Lsso\n\n\nfrom sklearn.linear_model import Lasso\n\nlasso = Lasso(alpha = 0.1,normalize = True)\nlasso.fit(X_train,y_train)\nlasso_predict = lasso.predict(X_test)\nprint('Score using Lasso :: ',lasso.score(X_test,y_test))","11fa5535":"from sklearn.model_selection import GridSearchCV","e74df7e8":"GridSearchCV?","10e2883a":"Las = Lasso()\nparam_grid = {'alpha':[0.1,0.2,0.3,0.4]}\ngr_cv = GridSearchCV(Las,param_grid,cv = 5)","92bc0676":"gr_cv.fit(X_train,y_train)","ad604dcb":"gr_cv.best_params_","74babcb1":"# Regularisation Regression\n## Ridge and Lasso regression","27b86996":"Using cross validation"}}