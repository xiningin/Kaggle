{"cell_type":{"5d14b943":"code","05eb6ca8":"code","c76cad74":"code","2028cde8":"code","16391128":"code","b0d3cbf2":"code","6393df95":"code","445a00ba":"code","0a4cef8b":"code","6bafcc41":"code","b7c4b1ec":"code","84325630":"code","ba5b95a1":"code","058a332b":"code","afa8fe26":"code","6251032f":"code","2ffb3d8e":"code","d90a72be":"code","4b2318fd":"code","a42ee015":"code","fba8efe8":"code","af8fda3e":"code","c46f1075":"code","b51ab35d":"code","6b4718b0":"markdown","6fec4d2d":"markdown","63832a1e":"markdown","6d8c5aa5":"markdown","a6f29888":"markdown","897f6478":"markdown","993e42f7":"markdown","422e8d95":"markdown"},"source":{"5d14b943":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n","05eb6ca8":"data=pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","c76cad74":"data=data.fillna('')","2028cde8":"data.head()","16391128":"vectorizer = TfidfVectorizer(stop_words='english')","b0d3cbf2":"desc=data['description'].values","6393df95":"desc=list(desc)","445a00ba":"des=vectorizer.fit_transform(desc)","0a4cef8b":"des.shape","6bafcc41":"cosine_sim = linear_kernel(des,des)","b7c4b1ec":"cosine_sim.shape","84325630":"cosine_sim[1]","ba5b95a1":"def recommendation(name,cos=cosine_sim):\n    idx=data[data['title']==name].index[0]\n    top_24_idx = np.argsort(cos[idx])[-25:]\n    top_24_idx=top_24_idx[::-1]\n    top_24_idx=top_24_idx[1:]\n    return data['title'].iloc[top_24_idx],top_24_idx\n    \n    ","058a332b":"movie=input('Please enter the movie name:')","afa8fe26":"recommendation(movie)[0]","6251032f":"rec_movies,ind=recommendation(movie)","2ffb3d8e":"# Asking from users what they prefer (since users choices are of their own ...) Kinda like a filter ..\ntype=0\ndirector=0\nrating=0\nlisted=0\ncountry=0\nx=(input('If you wanna filter please enter yes else enter no:'))\nif 'y' in x.lower():\n    type=int(input('Type(movie\/ Tv)'))\n    director=int(input('You want same director :(1\/0)'))\n    rating=int(input('Do you want the same rating :(1\/0)'))\n    listed=int(input('Do you care about the same genre :(1\/0)'))\n    country=int(input('Do you want the movie of the same country:(1\/0)'))\ncall=[type,director,country,rating,listed]\n\n    ","d90a72be":"def recom(ind=ind,movie=movie,call=call):\n    score=[]\n    for i in ind:\n        sc=0\n        a=data.iloc[i][1]\n        b=data.iloc[i][3]\n        c=data.iloc[i][5]\n        d=data.iloc[i][8]\n        e=data.iloc[i][10]\n        a1=data[data['title']==movie].drop(columns=['show_id','cast','date_added','release_year','duration','description','title'],axis=1)['type'].values[0]\n        b1=data[data['title']==movie].drop(columns=['show_id','cast','date_added','release_year','duration','description','title'],axis=1)['director'].values[0]\n        c1=data[data['title']==movie].drop(columns=['show_id','cast','date_added','release_year','duration','description','title'],axis=1)['country'].values[0]\n        d1=data[data['title']==movie].drop(columns=['show_id','cast','date_added','release_year','duration','description','title'],axis=1)['rating'].values[0]\n        e1=data[data['title']==movie].drop(columns=['show_id','cast','date_added','release_year','duration','description','title'],axis=1)['listed_in'].values[0]\n        if call[0]==0:\n            if a==a1:\n                sc+=1\n        else:\n            if a==a1:\n                sc+=4\n        if call[1]==0:\n            if b==b1:\n                sc+=1\n        else:\n            if b==b1:\n                sc+=4\n        if call[2]==0:\n            x=c.split(',')\n            for op in x:\n                if op in c1:\n                    sc+=1\n                    break\n        else:\n            x=c.split(',')\n            for op in x:\n                if op in c1:\n                    sc+=4\n                    break\n            \n        if call[3]==0:\n            if d==d1:\n                sc+=1\n        else:\n            if d==d1:\n                sc+=4\n        if call[4]==0:\n            x=e.split(',')\n            for op in x:\n                if op in e1:\n                    sc+=1\n                    break\n        else:\n            x=e.split(',')\n            for op in x:\n                if op in e1:\n                    sc+=4\n                    break\n        score.append(sc)\n    return score\n            \n            \n            \n            \n        \n        \n    \n    \n","4b2318fd":"ans=recom()","a42ee015":"print('The 12 best of the recommendations i found are :')\ntop_12_idx = np.argsort(ans)[-12:]\ntop_12_idx=top_12_idx[::-1]\nfor i in top_12_idx:\n    print(rec_movies.values[i])","fba8efe8":"# Pretty different result i suppose","af8fda3e":"data[data['title']=='Transformers: Robots in Disguise']","c46f1075":"data[data['title']=='Transformers Prime']","b51ab35d":"#Hope you all liked this  :)","6b4718b0":"The main of this is that we are gonna pick the best 12 recommendation using different techniques here ....","6fec4d2d":"If we try to find out the euclidian distance in this case we will be giving each and every feature equal importance in the choosing of the recommendation but in this case we can say that some of the features are more important to the users than the other features for example you will prefer to watch a movie from the same director so the feature of the director needs to be given more importance than the duration of the movie\/tv show.","63832a1e":"![image.png](attachment:image.png)","6d8c5aa5":"Now we can make this more detailed using the other features given to us","a6f29888":"Let's make our own scoring system here which will decide what we can choose ....","897f6478":"Let's consider the page size for the recommendation to be 12 and let's work with the 24 best recommendationsss and then choose the best 12 out of it","993e42f7":"![image.png](attachment:image.png)","422e8d95":"Now till here we have found out 24 total movies or tv shows based on the description ...."}}