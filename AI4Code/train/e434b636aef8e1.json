{"cell_type":{"a027c4db":"code","88774e25":"code","71befbbe":"code","7cbf8ad4":"code","888b3eb8":"code","501c2f11":"code","900ab024":"code","209252c6":"code","6d00339a":"code","3afbf4e0":"code","d0402b3c":"code","67273663":"code","d6bd47f0":"code","795b4e2e":"code","a4de813e":"code","b3af1b43":"code","08333917":"code","3e7f1c41":"code","dce26f15":"code","69b631c5":"code","4a504239":"code","3cb95c33":"code","4704e233":"code","30bb25df":"code","1c9923a1":"code","cd32cfb6":"code","668de580":"markdown","bf63a438":"markdown","e0cf2663":"markdown","edfe0f1d":"markdown","7e11be2d":"markdown","1654c481":"markdown","e4e68c2a":"markdown","6650e8ff":"markdown","14d81c8b":"markdown","530c8967":"markdown"},"source":{"a027c4db":"import re\nimport yfinance as yf\nfrom sklearn import preprocessing\nimport joblib\nfrom datetime import datetime as dt\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Input, Flatten, LSTM, GRU, RNN, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam, SGD","88774e25":"PATH = '..\/input\/actions\/'","71befbbe":"ntdoy = yf.Ticker('NTDOY')\nold  =  ntdoy.history(period = '20y',\n                      interval='1d')\ndata = old[['Close', 'Low', 'High']]","7cbf8ad4":"data.head(5)","888b3eb8":"data.to_csv('actions.csv',  header=['price', 'low', 'high'])","501c2f11":"actions = pd.read_csv(PATH + 'actions.csv')\nactions.head()","900ab024":"data = []\n\nfor i in range(len(actions)):\n    date = list(map(int, re.split(r'-', actions['Date'][i])))\n    weekday = dt(*date).weekday()\n    month = date[1]\n    \n    price = actions['price'][i]\n    \n    data.append([month, weekday, price])","209252c6":"data = pd.DataFrame(data, columns=['month', 'weekday', 'price'])","6d00339a":"data.to_csv('actions.csv', index=False)","3afbf4e0":"data = pd.read_csv(PATH + 'actions.csv')\ndata.head()","d0402b3c":"data['price'].plot()","67273663":"data.describe()","d6bd47f0":"min_max_m_wd = preprocessing.MinMaxScaler()\nnorm_m_wd = min_max_m_wd.fit_transform(data[['month','weekday']])","795b4e2e":"min_max_price = preprocessing.MinMaxScaler()\nnorm_price = min_max_price.fit_transform(data[['price']])","a4de813e":"days_p = 45","b3af1b43":"X_train = []\ny_train = []\n\nfor i in range(0, len(norm_m_wd[:4026]), days_p):\n    train = np.append(norm_m_wd[i:i+days_p], norm_price[i:i+days_p], axis=1)\n    X_train.append(train)\n    y_train.append(norm_price[i+days_p])  \n  \nX_train = np.array(X_train)\ny_train = np.array(y_train)","08333917":"X_test = []\ny_test = []\n\nfor i in range(3965, 3965+len(norm_m_wd[4026:]), days_p):\n    test = np.append(norm_m_wd[i:i+days_p], norm_price[i:i+days_p], axis=1)\n    X_test.append(test)\n    y_test.append(norm_price[i+days_p])\n    \nX_test = np.array(X_test)\ny_test = np.array(y_test)","3e7f1c41":"model = Sequential()\n\nmodel.add(Input(shape=(days_p, 3)))\n\nmodel.add(GRU(units=78, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(GRU(units=52, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(GRU(units=44))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=20))\nmodel.add(Dense(units=1))\n\nmodel.summary()","dce26f15":"model.compile(optimizer='adam', loss='mse')\nmodel.fit(X_train, y_train, epochs=100, batch_size=16)","69b631c5":"rez = model.predict(X_test)","4a504239":"plt.plot(range(len(rez)), rez, y_test)","3cb95c33":"ntdoy = yf.Ticker('NTDOY')\nold  =  ntdoy.history(period = '3mo',\n                      interval='1d')","4704e233":"def min_max_date(month, day):\n    return [(month-1)\/11, day\/4]","30bb25df":"inp_data = old[['Close']][len(old)-days_p-1:-1].to_dict()[\"Close\"]\nnew_data = []\n\nfor i in inp_data:\n    date = re.findall(r'\\d{4}-\\d{2}-\\d{2}', str(i))[0]\n    date_int = map(int, date.split('-'))\n    day = dt(*date_int).weekday()\n    month = int(date.split('-')[1])\n\n    price = min_max_price.transform([[inp_data[i]]])[0][0]\n    month, day = min_max_date(month, day)\n    \n    new_data.append([month, day, price])\nnew_data = np.array([new_data], dtype=np.float32)","1c9923a1":"predict = model.predict(new_data)","cd32cfb6":"min_max_price.inverse_transform(predict)[0, 0]","668de580":"# Read and Write data using yahoo finance","bf63a438":"# We take the necessary data","e0cf2663":"# Create model","edfe0f1d":"GitHub project: https:\/\/github.com\/Naklz1337\/PredictionPrice","7e11be2d":"## create keras model","1654c481":"# Libraries","e4e68c2a":"# Using","6650e8ff":"## Data preprocessing","14d81c8b":"# **Time series processing using the example of Nintendo stocks**","530c8967":"Create a model for trading Nintendo stocks"}}