{"cell_type":{"d0ddf12d":"code","b3fa46f3":"code","40e2f5a7":"code","56584144":"code","59c71a87":"code","3689aca1":"code","9474d333":"code","3637e031":"code","62114f12":"code","74d9c0d1":"code","6f0e2b93":"code","6a8e29fc":"code","3a1d3eb1":"markdown","7c3db7b8":"markdown","1e46ac70":"markdown","95c7384c":"markdown","e2a9f3c7":"markdown","98c96f1a":"markdown","cbd60d03":"markdown","4e7fed59":"markdown","e45b6984":"markdown","7023111c":"markdown","bc34829a":"markdown","a2048605":"markdown","70326a20":"markdown"},"source":{"d0ddf12d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2 as cv\nimport random\nfrom pathlib import Path\nimport os\n\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout, Activation\nfrom keras import optimizers\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.models import load_model","b3fa46f3":"img = cv.imread(\"..\/input\/ahcd1\/Test Images 3360x32x32\/test\/id_1007_label_28.png\")\nimg = cv.resize(img, (32,32))\nplt.imshow(img)","40e2f5a7":"# Read the train data\ntrain_images = pd.read_csv('..\/input\/ahcd1\/csvTrainImages 13440x1024.csv')\ntrain_labels = pd.read_csv('..\/input\/ahcd1\/csvTrainLabel 13440x1.csv')\n# Read the test data\ntest_images = pd.read_csv('..\/input\/ahcd1\/csvTestImages 3360x1024.csv')\ntest_labels = pd.read_csv('..\/input\/ahcd1\/csvTestLabel 3360x1.csv')\n# Show the shape of the data\ntrain_images.shape, train_labels.shape, test_images.shape, test_labels.shape","56584144":"# Create the validation set\n# Get a 500 random rows\/values from the validation set\nrand = random.sample(train_images.index.tolist(), 500)\n# from the 500 random Create the validation set \nvalidation_images = pd.DataFrame(train_images.iloc[rand, :].values)\nvalidation_labels = pd.DataFrame(train_labels.iloc[rand, :].values)","59c71a87":"# Train\nX_train = train_images.to_numpy()\ny_train = train_labels.to_numpy()\n# Validation\nX_valid = validation_images.to_numpy()\ny_valid = validation_labels.to_numpy()\n# Test\nX_test = test_images.to_numpy()\ny_test = test_labels.to_numpy()\n\n# Get the number of classes\nnum_classes = len(np.unique(y_train)) + 1\nnum_classes\n\n# Use to_categorical on the labels (29)\ny_train = to_categorical(y_train,num_classes)\ny_valid = to_categorical(y_valid,num_classes)\ny_test = to_categorical(y_test,num_classes)\n","3689aca1":"print(\"Training shape: \",X_train.shape)\nprint(\"Validation shape: \",X_valid.shape)\nprint(\"Testing shape: \",X_test.shape)","9474d333":"X_train = X_train.reshape([-1, 32, 32, 1])\nX_test = X_test.reshape([-1, 32, 32, 1])\nX_valid = X_valid.reshape([-1, 32, 32, 1])","3637e031":"# Define the model\nmodel = Sequential()\n# Add a conv2D layer and MaxPool2D layer\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu', input_shape=(32,32,1)))\nmodel.add(MaxPool2D(pool_size=2))\n# Add a conv2D layer and MaxPool2D layer\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=2))\n# Add a conv2D layer and MaxPool2D layer\nmodel.add(Conv2D(filters=128, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=2))\n# Add a flatten layer\nmodel.add(Flatten())\n# Add a Dense layer with 512 unit\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.3))\n# Add a Dense layer with 256 unit\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.3))\n# Add a final Dense layer\nmodel.add(Dense(num_classes,activation='softmax'))\n# Compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","62114f12":"history = model.fit(X_train,y_train,validation_data=(X_valid,y_valid),epochs=5,batch_size=32)","74d9c0d1":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(5)\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","6f0e2b93":"model.evaluate(X_test,y_test,batch_size=32)","6a8e29fc":"# Shuffle the test data\nfrom sklearn.utils import shuffle\nX_test, y_test = shuffle(X_test, y_test, random_state=30)\n# Only take the first 10 images\ny_test = y_test[:10]\nX_test = X_test[:10]\n# Print the arabic alphabet\nprint('Arabic alphabet:')\nprint(\"\u064a \u0648 \u0647 \u0646 \u0645 \u0644 \u0643 \u0642 \u0641 \u063a \u0639 \u0638 \u0637 \u0636 \u0635 \u0634 \u0633 \u0632 \u0631 \u0630 \u062f \u062e \u062d \u062c \u062b \u062a \u0628 \u0627\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")\nprint()\n# Predict on the test data \npred = model.predict(X_test)\n# Make a data frame\noutputDf = pd.DataFrame(pred)\n# Get the index of the max probability from the output Data frame\npredictedIndex = list(outputDf.idxmax(axis=1))\n# Print the predicted index\nprint(\"Predicted index: \", predictedIndex)\nprint()\n# For the Test set\ny_test = pd.DataFrame(y_test)\nrealIndex = list(y_test.idxmax(axis=1))\n# Print the real index\nprint(\"Real index: \", realIndex)\n# Make a loop in range the length of the test data (5)\nfor i in range(len(X_test)):\n    real = realIndex[i]\n    predicted = predictedIndex[i]\n    plt.title(f'Real: {real} predicted: {predicted}')\n    img = X_test[i]\n    img = cv.rotate(img, cv.ROTATE_90_CLOCKWISE)\n    plt.imshow(img,cmap='gray')\n    plt.show()","3a1d3eb1":"# The link of the data set:\nhttps:\/\/www.kaggle.com\/mloey1\/ahcd1","7c3db7b8":"## Read the csv file","1e46ac70":"## Reshape the data","95c7384c":"## Create a validation set","e2a9f3c7":"## Evaluate the model","98c96f1a":"## Train the model","cbd60d03":"## Build the model","4e7fed59":"## Show a example of the data","e45b6984":"## Show the shape","7023111c":"## Plot the loss and the accuracy","bc34829a":"## Define X_train\/y_train\/X_valid\/y_valid\/X_test\/y_test","a2048605":"## Importing the libraries","70326a20":"## Predict the test set"}}