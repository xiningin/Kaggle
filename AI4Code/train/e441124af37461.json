{"cell_type":{"e8664a4f":"code","f108366f":"code","0bda202e":"code","c37ab3d0":"code","5122384c":"code","abdd6b0d":"code","eff4e553":"code","8ddb3718":"code","c19c46db":"code","aec2e439":"code","e479cb66":"code","83b03382":"code","d2874100":"code","f101e3e7":"markdown","9a16013d":"markdown","ab74d15b":"markdown","7e64606d":"markdown","eaf47069":"markdown","4ef9a5e8":"markdown","7404f3ce":"markdown","becb1209":"markdown","1eaedb28":"markdown","95e17e25":"markdown","416f016f":"markdown","10117276":"markdown","71dc1e0a":"markdown","70b09066":"markdown","654d0372":"markdown","a9da9d50":"markdown","aae4fa1e":"markdown","4d817247":"markdown","3d616b8b":"markdown","0a374be6":"markdown","79cdd7de":"markdown","d0aeea19":"markdown","fa222873":"markdown","ac8bf0b1":"markdown","a27054ba":"markdown","05ab41a3":"markdown","f7587ee1":"markdown","ff641d38":"markdown","5cbab56c":"markdown","5ce54b3a":"markdown","c2af8e37":"markdown","cd8c05fd":"markdown","a354290e":"markdown","dd5eb4e5":"markdown","322c6639":"markdown","a32c9846":"markdown"},"source":{"e8664a4f":"from IPython.display import Image\nImage(\"\/kaggle\/input\/traditional-methods-for-portfolio-construction\/Lesson4GoalHeaderImage.png\")","f108366f":"from IPython.display import Image\nImage(\"\/kaggle\/input\/traditional-methods-for-portfolio-construction\/Lesson4Eqn4_1.png\")\n","0bda202e":"#read k portfolio 1 dataset comprising 15 stocks\n\n#dependencies\nimport numpy as np\nimport pandas as pd\n\n#input stock dataset\nStockFileName = '\/kaggle\/input\/traditional-methods-for-portfolio-construction\/DJIA_Apr112014_Apr112019_kpf1.csv'\nRows = 1259  #excluding header\nColumns = 15  #excluding date\n\n#read stock prices \ndf = pd.read_csv(StockFileName,  nrows= Rows)\n\n#extract asset labels\nassetLabels = df.columns[1:Columns+1].tolist()\nprint('k-portfolio 1 asset labels:\\n', assetLabels)\n\n#extract stock prices excluding header and trading dates\ndfStockPrices = df.iloc[1:, 1:]\n\n#store stock prices as an array\narStockPrices = np.asarray(dfStockPrices)\n[rows, cols]= arStockPrices.shape\nprint('k-portfolio 1 dataset size:\\n', rows, cols)\nprint('k-portfolio 1 stock prices:\\n', arStockPrices)","c37ab3d0":"#function to compute stock returns\ndef StockReturnsComputing(StockPrice, Rows, Columns):\n    \n    import numpy as np\n    \n    StockReturn = np.zeros([Rows-1, Columns])\n    for j in range(Columns):  # j: Assets\n        for i in range(Rows-1):     #i: Daily Prices\n            StockReturn[i,j]=((StockPrice[i+1, j]-StockPrice[i,j])\/StockPrice[i,j])\n\n    return StockReturn","5122384c":"#compute asset returns\narReturns = StockReturnsComputing(arStockPrices, rows, cols)\nprint('k-portfolio 1 returns:\\n', arReturns)","abdd6b0d":"#compute mean returns and variance covariance matrix of returns\n\n#set precision for printing results\nnp.set_printoptions(precision=5, suppress = True)\n\nmeanReturns = np.mean(arReturns, axis = 0)\nprint('Mean returns of k-portfolio 1:\\n', meanReturns)\ncovReturns = np.cov(arReturns, rowvar=False)\nprint('\\nVariance-Covariance matrix of returns of k-portfolio 1: \\n')\nprint('Size  ', covReturns.shape, '\\n', covReturns)","eff4e553":"#equal weighted portfolio construction: Annualized risk and \n#expected annualized portfolio return\n#trading days = 251\nPortfolioSize = Columns\nEqualWeightVector = np.ones((1,PortfolioSize))*(1.0\/PortfolioSize)\nEqWgtPortfolioRisk = np.sqrt(np.matmul((np.matmul(EqualWeightVector,covReturns)), \\\n                     np.transpose(EqualWeightVector)))\nEqWgtAnnPortfolioRisk = EqWgtPortfolioRisk*np.sqrt(251)*100\nEqWgtPortfolioReturn = np.matmul(EqualWeightVector, np.transpose(meanReturns))\nEqWgtAnnPortfolioReturn = 251*EqWgtPortfolioReturn * 100\n\nprint(\"Annualized Portfolio Risk :  %4.2f\" % EqWgtAnnPortfolioRisk, \"%\")\nprint(\"\\nAnnualized Expected Portfolio Return:  %4.2f\" %  EqWgtAnnPortfolioReturn,\"%\")\n","8ddb3718":"# Equal weighted portfolio: Diversification Ratio\nEqWgtPortfolioAssetStdDev = np.sqrt(np.diagonal(covReturns))\nEqWgtPortfolioDivRatio = np.sum(np.multiply(EqWgtPortfolioAssetStdDev, EqualWeightVector)) \\\n                         \/ EqWgtPortfolioRisk\nprint(\"\\n Equal Weighted Portfolio:Diversification Ratio  %4.2f\" % EqWgtPortfolioDivRatio)\n","c19c46db":"from IPython.display import Image\nImage(\"\/kaggle\/input\/traditional-methods-for-portfolio-construction\/Lesson4Eqn4_2.png\")\n\n","aec2e439":"#Inverse volatility weighted portfolio construction: Annualized risk and \n#Expected annualized portfolio return\n#Trading days = 251\nInvVolWeightAssets_Risk = np.sqrt(np.diagonal(covReturns))\nInvVolWeightAssets_ReciprocalRisk = 1.0\/InvVolWeightAssets_Risk\nInvVolWeightAssets_ReciprocalRisk_Sum = np.sum(InvVolWeightAssets_ReciprocalRisk)\nInvVolWeightAssets_Weights = InvVolWeightAssets_ReciprocalRisk \/ \\\n                             InvVolWeightAssets_ReciprocalRisk_Sum\nInvVolWeightPortfolio_Risk = np.sqrt(np.matmul((np.matmul(InvVolWeightAssets_Weights,\\\n                             covReturns)), np.transpose(InvVolWeightAssets_Weights)))\n\n#annualized risk and return\nInvVolWeightPortfolio_AnnRisk = np.sqrt(251)* InvVolWeightPortfolio_Risk *100\nInvVolWeightPortfolio_AnnReturn = 251* np.matmul(InvVolWeightAssets_Weights,\\\n                                  np.transpose(meanReturns)) *100\n\nprint(\"Annualized Portfolio Risk: %4.2f\" % InvVolWeightPortfolio_AnnRisk,\"%\\n\")\nprint(\"Annualized Expected Portfolio Return: %4.2f\" % InvVolWeightPortfolio_AnnReturn,\"%\")\n","e479cb66":"# Inverse volatility weighted portfolio: Diversification Ratio\nInvVolWeightAssets_Risk= np.sqrt(np.diagonal(covReturns))\nInvVolWeightPortfolioDivRatio = \\\nnp.sum(np.multiply(InvVolWeightAssets_Risk, InvVolWeightAssets_Weights))\\\n\/ InvVolWeightPortfolio_Risk\nprint(\"\\n Inverse Volatility  Weighted Portfolio:Diversification Ratio %4.2f\" \\\n      % InvVolWeightPortfolioDivRatio)\n","83b03382":"#identify the \"mini\" stock universe dataset\nStockFileName = '\/kaggle\/input\/traditional-methods-for-portfolio-construction\/DJIA_Apr112014_Apr112019.csv'\nRows = 1259  #excluding header\nColumns = 29  #excluding date","d2874100":"from IPython.display import Image\nImage (\"\/kaggle\/input\/traditional-methods-for-portfolio-construction\/Lesson4ExitTailImage.png\")","f101e3e7":"The Diversification Ratio of the Inverse Volatility Weighted Portfolio is shown in the output. ","9a16013d":"A comparison of the \"ideal\" portfolio behaviour with that of the $k$-portfolio's behaviour yields the following observations:    \n\n(1)  Even if an investor had enough capital to invest in all the stocks in the \"mini-universe\", despite employing time-tested portfolio construction methods such as equal weighted or inverse volatility weighted construction, the behaviour of the \"ideal\" portfolio does not surpass that of its contenders and hence is not a remarkable choice to opt for.  \n\n(2)  The Diversification Ratios of both equal weighted and inverse volatility weighted $k$-portfolios are in  proximity to that of the \"ideal\" portfolio, conveying a significant message that prudent selection of stocks ($k$-means clustering in this case) can ensure a diversification index as much as that of an \"ideal\"  portfolio  that invests in the complete universe of stocks.  \n\n(3)  Diversification does not mean investing in a large number of stocks, but making a prudent choice of stocks, smaller in number yet diverse from one another in behaviour. A $k$-portfolio guarantees diversification in this sense.   \n\n(4)  A portfolio that holds a large number of stocks, for the sake of diversification,  can give rise to huge transaction costs and management fees. $k$-portfolios in this regard are economical with regard to these costs.  \n\n(5) $k$-portfolios by and large assure **risk-parity investing**, where higher returns are ensured for an equal amount of risk and diversification ratio, as that of an \"ideal\" portfolio.\n","ab74d15b":"Needless to say, determining the asset allocation weights is an equally, if not more, complex task especially when investors are strongly inclined to follow some popular investment strategies or express preference for certain assets or asset classes in the portfolio or are bound by company norms or religious laws etc. We shall defer discussion on these complex asset allocation models and for now, focus on traditional and time tested methods of determining asset allocation weights. ","7e64606d":"The  investor chose to invest in a $k$-portfolio of 15 stocks selected out of the \"mini-universe\" of 29 DJIA stocks. The equal weighted portfolio construction yielded a Diversification Ratio of 1.53 and the inverse volatility weighted portfolio construction yielded a Diversification Ratio of 1.54. The annualized risk and expected portfolio return of the equal weighted and inverse volatility weighted portfolios were (13.68%, 12.34%) and (13.24%, 12.13%) respectively.  \nNow, was investing on the $k$-portfolio worth the effort? What if the investor had chosen to invest in the whole \"mini-universe\", which needless to say is an \"ideal\" portfolio? Would the behaviour of the \"ideal\" portfolio surpass that of the contending portfolios?  \n\nRepeating the portfolio construction methods over the \"mini-universe\" and running the Python code all over again with the CSV file whose details have been provided in the Python code shown below, yields an output,  snapshots of which are shown in the succeeding cells.","eaf47069":"Two traditional methods of asset allocation, which are considered as benchmark portfolio construction strategies are introduced in this lesson. They are,  \n\n(1) **Equal weighted portfolio construction**, and   \n(2) **Inverse volatility weighted portfolio construction**.  \n\nThe two techniques shall be applied over $k$-portfolios to determine their Diversification Ratios and study their behaviour. ","4ef9a5e8":"The first and foremost question is *what is the diversification index of a $k$-portfolio*? In other words, having decided to invest in a $k$-portfolio, how would an investor know how diversified is the portfolio?   \n  \nIn this regard,  one among several diversification indices available in the finance literature, viz., **Diversification Ratio** was introduced in Lesson 3. However, to compute the diversification index,  the investor should have decided on the apportionment of capital over each of the assets in the portfolio. In other words, the asset allocation **weights** (introduced in **Lesson 1 Fundamentals of Risk and Return of a Portfolio**) must have been determined. ","7404f3ce":"The \"ideal\" equal weighted porfolio yields the following results:","becb1209":"The \"ideal\" inverse volatility weighted portfolio yields the following results:","1eaedb28":"An **equal weighted portfolio construction** treats all stocks in the portfolio as equal and allots equal weights. Thus the weight vector of a portfolio comprising $N$ stocks is given by   \n ","95e17e25":"The $k$-portfolio returns are computed as discussed in **Lesson 1 Fundamentals of risk and return of a portfolio**. The Python function to compute daily returns and the code fragment that runs it over DJIA $k$-portfolio 1 are shown below.","416f016f":"## 4.4  \"Ideal\" Equal Weighted and Inverse Volatility Weighted Portfolios","10117276":"<h3 align=\"left\">References<\/h3>\n\n[PAI 18]   Vijayalakshmi Pai G. A., Metaheuristics for Portfolio Optimization- *An \n           Introduction using MATLAB*, Wiley-ISTE, 2018. https:\/\/www.mathworks.com\/academia\/books\/metaheuristics-for-portfolio-optimization-pai.html   \n           \n**GitHub Repository**    \n\nPythonFinance-PortfolioOptimization https:\/\/github.com\/PaiViji","71dc1e0a":"**Lesson 5: Mean-Variance Optimization of Portfolios**   \n\n(Goal: How would one determine the optimal weights which will ensure maximum  return and minimum risk for the portfolio that one is invested in?)  \n\nKaggle Kernel: Mean-Variance Optimization of Portfolios","70b09066":"<h5 align=\"right\">..............................(4.2)<\/h5>","654d0372":"## 4.1 Introduction","a9da9d50":"### Prologue","aae4fa1e":"**\"Ideal\" Equal Weighted Portfolio**  \n\nAnnualized portfolio risk:             12.84%   \nExpected Annualized portfolio return:  11.75%  \nDiversification Ratio:                  1.57","4d817247":"The annualized risk (%) and the expected annual return (%) of the inverse volatility weighted $k$-portfolio have been shown in the output.","3d616b8b":"The following Python code applies inverse volatility weighted portfolio construction method for the DJIA $k$-portfolio (**$k$-portfolio 1**) discussed in Sec. 4.2.   \n\nSince the diagonal of the variance-covariance matrix of returns **covReturns** denotes the variance of returns, the individual asset risk $\\sigma_i$ of asset $i$ in the $k$-portfolio, which is defined to be the standard deviation of asset returns, can be computed as square root of the variance. **InvVolWeightAssets_Risk** in the Python code shown below does just that.   \n","0a374be6":"## Lesson 4\n","79cdd7de":"## 4.2 Equal Weighted Portfolio Construction","d0aeea19":"Applying equal weighted portfolio construction method to $k$-portfolio 1 and obtaining the annualized risk (%) and the expected annual return (%) of the portfolio (as discussed in **Lesson 1 Fundamentals of risk and return of a portfolio**) yields the following.","fa222873":"An investor essentially has to do a lot of study and research before the assets comprising the portfolio are selected. **Lesson 3 Heuristic Portfolio Selection** detailed on how $k$-means clustering could be employed to undertake a heuristic selection of assets that ensures diversification. Termed **$k$-portfolios**, these portfolios ensured diversification by virtue of the choices made, one each from each cluster generated by the clustering method, which are inherently dissimilar in behaviour. Nevertheless, several questions need to be answered with regard to the behaviour of $k$-portfolios. ","ac8bf0b1":"## 4.3 Inverse Volatility Weighted Portfolio","a27054ba":"#  Traditional Methods for Portfolio Construction","05ab41a3":"Following equation (3.1) in **Lesson 3 Heuristic Portfolio Selection**, the Diversification Ratio of  $k$-portfolio 1 is computed as follows. ","f7587ee1":"\nThis blog  is an abridged adaptation of concepts discussed in Chapter 3 of [PAI 18] to Dow Jones dataset (DJIA index: April, 2014- April, 2019) and implemented in Python. Readers (read \"worker bees\"),  seeking more information may refer to the corresponding chapter in the  book.\n","ff641d38":"The following Python code applies equal weighted portfolio construction method for the DJIA $k$-portfolio (**$k$-portfolio 1**) discussed in Sec. 3.5 of **Lesson 3 Heuristic Portfolio Selection**.  The $k$-portfolio comprises the following stocks:  \n\n\ud835\udc58-portfolio 1:\n\n{Coca-Cola (KO), United Health (UNH), Walt Disney (DIS), IBM (IBM), Cisco (CSCO), JPMorgan Chase (JPM), Goldman Sachs (GS), Walgreens Boots Alliance (WBA), Apple (AAPL), Home Depot (HD), American Express (AXP), McDonald's (MCD), Merck (MRK), Boeing (BA), Caterpillar (CAT)}   ","5cbab56c":"### Companion Reading  \n","5ce54b3a":"An **inverse volatility weighted portfolio**  is one in which highly volatile assets are allotted smaller weights and low volatile assets are allotted larger weights. Thus, the weights of the individual assets in the portfolio are proportional to the reciprocals of their individual volatilities.   \nThe weights are given by,  \n","c2af8e37":"### Diversification Ratio of the Equal Weighted $k$-Portfolio","cd8c05fd":"* **Python for Portfolio Optimization: The Ascent!**\n\nFirst working lessons to ascend the hilly terrain of Portfolio Optimization in seven strides (Lessons), beginning with the fundamentals (Lesson 1) and climbing slope after slope (Lessons 2-6), to reach the first peak of constrained portfolio optimization models (Lesson 7), amongst a range of peaks waiting beyond!\n\n* **Lesson 1 Fundamentals of Risk and Return of a Portfolio**    \n\n* **Lesson 2 Some Glimpses of Financial Data Wrangling**   \n\n* **Lesson 3 Heuristic Portfolio Selection**\n","a354290e":"## Next....","dd5eb4e5":"<h5 align=\"right\">..............................(4.1)<\/h5>","322c6639":"The mean returns and the variance-covariance matrix of returns are computed as demonstrated in the Python code shown below.","a32c9846":"**\"Ideal\" Inverse Volatility  Weighted Portfolio** \n\nAnnualized portfolio risk:            12.47%  \nExpected Annualized portfolio return: 11.29%  \nDiversification Ratio:                 1.57\n"}}