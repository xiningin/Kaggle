{"cell_type":{"a69b1bd6":"code","99026b7c":"code","eceb92b1":"code","e1def5fc":"code","9bb16ada":"code","d0670e74":"code","51eba0de":"code","bb02d05b":"code","19c1b935":"code","679de023":"code","0706e6a7":"code","a6bf173e":"code","640bae31":"code","20aa27d0":"code","db744294":"code","017eb9e3":"code","5e3b84cf":"code","d9311532":"code","6b37c1da":"code","e67dfc16":"code","5a60bb96":"code","bdad8940":"code","497d7fde":"code","b9c41895":"code","e7f185c9":"code","67467324":"code","43aec301":"code","441436cc":"code","68d104e9":"code","e2abc8ff":"code","74778c45":"code","53ff00eb":"code","e7424287":"code","0044d446":"code","01939ef3":"code","60909bbc":"code","317ea72d":"code","2d04fb94":"code","7ab2a76c":"code","14dc0f98":"code","6d2dacee":"code","c3588e9b":"code","1c978c4a":"code","da3da2ff":"code","e44dd68d":"code","d0449ada":"code","f46cd2fe":"code","9b235f19":"code","4c23ba2e":"code","52f18b15":"code","1ff44130":"code","ca8b9b7b":"code","afcd898c":"code","5dcb7dea":"code","6cf6d155":"code","b380c95d":"code","25a7f390":"code","9b0ab767":"code","ceae9343":"code","67dbf4c9":"code","690df88a":"code","e687d415":"code","b45e24d8":"code","2469e335":"code","e7eeacd5":"code","a2545a4b":"code","4d3c8ecb":"code","1b8079cd":"code","7d3d6689":"code","0092515e":"code","eeb290f6":"code","558fe41a":"code","51726706":"code","098c9ffe":"code","68794e12":"code","a82c3e75":"code","2b409860":"code","07fe1872":"code","f93ef769":"code","7677fad7":"code","579122f7":"code","265f0c08":"code","99cf5c82":"code","1f0131b2":"code","fe1c7748":"code","2eb2375a":"code","aa4bee93":"code","19a069a7":"code","c440302c":"code","a5aa7b60":"code","e552bac9":"code","45532400":"markdown","203eb426":"markdown","720ab895":"markdown","3d043e34":"markdown","fd9979b3":"markdown","2fac3d8c":"markdown","fdb07e9b":"markdown"},"source":{"a69b1bd6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","99026b7c":"df=pd.read_csv('adult.csv')\ndf.head()","eceb92b1":"df.shape","e1def5fc":"df.isnull().sum()","9bb16ada":"type(df)","d0670e74":"df.info()","51eba0de":"sns.countplot(x='income', data=df)","bb02d05b":"df.describe()","19c1b935":"df.head()","679de023":"X=df.drop('income', axis =1) #X_value\nY=df['income'] #Y_value","0706e6a7":"from sklearn.model_selection import train_test_split\ntrain, test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=101)","a6bf173e":"train","640bae31":"train.head()","20aa27d0":"train.shape","db744294":"train.isnull().sum()","017eb9e3":"type(train)","5e3b84cf":"train.columns = [\n\"age\",\n\"workclass\",\n\"fnlwgt\",\n\"education\",\n\"education-num\",\n\"marital-status\",\n\"occupation\",\n\"relationship\",\n\"race\",\n\"sex\",\n\"capital-gain\",\n\"capital-loss\",\n\"hours-per-week\",\n\"native-country\",\n]","d9311532":"train.columns","6b37c1da":"column_names = train.columns","e67dfc16":"column_names","5a60bb96":"train.shape[0]","bdad8940":"train['native-country'].unique().sum()","497d7fde":"train['native-country'].isin([\"?\"]).value_counts()","b9c41895":"for c in column_names:\n    count = train[c].isin([\"?\"]).sum()\n    if(count>0):\n        print(c)\n        print(count)\n        print(count*100\/34189)\n        ","e7f185c9":"train","67467324":"train['workclass'].value_counts()","43aec301":"train['occupation'].value_counts()","441436cc":"train['native-country'].value_counts()","68d104e9":"for c in column_names:\n    train[c] = train[c].replace(\"?\", np.NaN)","e2abc8ff":"train.isnull().sum()","74778c45":"train = train.apply(lambda x: x.fillna(x.value_counts().index[0]))\ntrain.isnull().sum()","53ff00eb":"train.shape","e7424287":"train.describe()","0044d446":"column_names_str = [\"workclass\",\"education\",\"marital-status\",\"occupation\", \"relationship\",\"race\",\"sex\",\"native-country\"]","01939ef3":"for c in column_names_str:\n    print(c)\n    print(train[c].value_counts())\n","60909bbc":"train['native-country'].unique()","317ea72d":"train.replace(['United-States', 'Mexico', 'Outlying-US(Guam-USVI-etc)',\n       'Trinadad&Tobago', 'Philippines', 'Thailand', 'Jamaica', 'Iran',\n       'Puerto-Rico', 'Japan', 'Poland', 'Canada', 'Haiti', 'Portugal',\n       'Cuba', 'El-Salvador', 'Germany', 'Taiwan', 'South', 'Honduras',\n       'Laos', 'France', 'Columbia', 'Greece', 'Scotland', 'India',\n       'Nicaragua', 'Vietnam', 'England', 'Italy', 'Ecuador', 'China',\n       'Yugoslavia', 'Guatemala', 'Hong', 'Dominican-Republic', 'Peru',\n       'Ireland', 'Hungary', 'Cambodia', 'Holand-Netherlands'],['United-States', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other'] , inplace=True)","2d04fb94":"train['native-country'].unique()","7ab2a76c":"train['marital-status'].unique()","14dc0f98":"train.replace(['Never-married', 'Married-civ-spouse', 'Divorced',\n       'Married-spouse-absent', 'Separated', 'Married-AF-spouse',\n       'Widowed'],\n               [' not-married', ' married', ' not-married',\n       ' married', ' not-married', ' married',\n       ' not-married'], inplace=True)","6d2dacee":"train['marital-status'].value_counts()","c3588e9b":"column_names_str","1c978c4a":"Workclass = pd.get_dummies(train['workclass'],drop_first=True)\nEducation = pd.get_dummies(train['education'],drop_first=True)\nMaritalStatus = pd.get_dummies(train['marital-status'],drop_first=True)\nOccupation = pd.get_dummies(train['occupation'],drop_first=True)\nRelationship = pd.get_dummies(train['relationship'],drop_first=True)\nRace = pd.get_dummies(train['race'],drop_first=True)\nSex = pd.get_dummies(train['sex'],drop_first=True)\nNativeCountry = pd.get_dummies(train['native-country'],drop_first=True)","da3da2ff":"train.drop(['workclass',\n 'education',\n 'marital-status',\n 'occupation',\n 'relationship',\n 'race',\n 'sex',\n 'native-country',\n ], axis=1, inplace=True)","e44dd68d":"train = pd.concat([Workclass,Education,MaritalStatus,Occupation,Relationship,Race,Sex,NativeCountry],axis=1)","d0449ada":"train.head()","f46cd2fe":"train.keys()","9b235f19":"train.shape","4c23ba2e":"#because it is irrelevant\n# train.drop(['Holand-Netherlands'], axis=1, inplace=True)","52f18b15":"train.shape","1ff44130":"test.head()","ca8b9b7b":"test.shape","afcd898c":"def clean_data(dataset):\n    dataset.columns = [\n    \"age\",\n    \"workclass\",\n    \"fnlwgt\",\n    \"education\",\n    \"education-num\",\n    \"marital-status\",\n    \"occupation\",\n    \"relationship\",\n    \"race\",\n    \"sex\",\n    \"capital-gain\",\n    \"capital-loss\",\n    \"hours-per-week\",\n    \"native-country\",\n    ]\n\n    column_names = dataset.columns\n\n    for c in column_names:\n        dataset[c] = dataset[c].replace(\"?\", np.NaN)\n\n    dataset = dataset.apply(lambda x: x.fillna(x.value_counts().index[0]))\n#     dataset= dataset[dataset['occupation']!= \" ?\"]\n#     dataset= dataset[dataset['workclass']!= \" ?\"]\n#     dataset= dataset[dataset['native-country']!= \" ?\"]\n\n    column_names_str = [\"workclass\",\"education\",\"marital-status\",\"occupation\", \"relationship\",\"race\",\"sex\",\"native-country\"]\n\n\n    dataset.replace(['Never-married', 'Married-civ-spouse', 'Divorced',\n       'Married-spouse-absent', 'Separated', 'Married-AF-spouse',\n       'Widowed'],\n               [' not-married', ' married', ' not-married',\n       ' married', ' not-married', ' married',\n       ' not-married'], inplace=True)\n    \n    dataset.replace(['United-States', 'Mexico', 'Outlying-US(Guam-USVI-etc)',\n       'Trinadad&Tobago', 'Philippines', 'Thailand', 'Jamaica', 'Iran',\n       'Puerto-Rico', 'Japan', 'Poland', 'Canada', 'Haiti', 'Portugal',\n       'Cuba', 'El-Salvador', 'Germany', 'Taiwan', 'South', 'Honduras',\n       'Laos', 'France', 'Columbia', 'Greece', 'Scotland', 'India',\n       'Nicaragua', 'Vietnam', 'England', 'Italy', 'Ecuador', 'China',\n       'Yugoslavia', 'Guatemala', 'Hong', 'Dominican-Republic', 'Peru',\n       'Ireland', 'Hungary', 'Cambodia', 'Holand-Netherlands'],['United-States', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other', 'Other',\n       'Other', 'Other', 'Other', 'Other'] , inplace=True)\n\n\n    Workclass = pd.get_dummies(dataset['workclass'],drop_first=True)\n    Education = pd.get_dummies(dataset['education'],drop_first=True)\n    MaritalStatus = pd.get_dummies(dataset['marital-status'],drop_first=True)\n    Occupation = pd.get_dummies(dataset['occupation'],drop_first=True)\n    Relationship = pd.get_dummies(dataset['relationship'],drop_first=True)\n    Race = pd.get_dummies(dataset['race'],drop_first=True)\n    Sex = pd.get_dummies(dataset['sex'],drop_first=True)\n    NativeCountry = pd.get_dummies(dataset['native-country'],drop_first=True)\n\n\n\n    dataset.drop(['workclass',\n     'education',\n     'marital-status',\n     'occupation',\n     'relationship',\n     'race',\n     'sex',\n     'native-country'], axis=1, inplace=True)\n\n    dataset = pd.concat([Workclass,Education,MaritalStatus,Occupation,Relationship,Race,Sex,NativeCountry],axis=1)\n    return dataset","5dcb7dea":"test = clean_data(test)","6cf6d155":"test.shape","b380c95d":"test.keys()","25a7f390":"train.keys()","9b0ab767":"test.columns = ['Local-gov', 'Never-worked', 'Private', 'Self-emp-inc',\n       'Self-emp-not-inc', 'State-gov', 'Without-pay', '11th', '12th',\n       '1st-4th', '5th-6th', '7th-8th', '9th', 'Assoc-acdm', 'Assoc-voc',\n       'Bachelors', 'Doctorate', 'HS-grad', 'Masters', 'Preschool',\n       'Prof-school', 'Some-college', ' not-married', 'Armed-Forces',\n       'Craft-repair', 'Exec-managerial', 'Farming-fishing',\n       'Handlers-cleaners', 'Machine-op-inspct', 'Other-service',\n       'Priv-house-serv', 'Prof-specialty', 'Protective-serv', 'Sales',\n       'Tech-support', 'Transport-moving', 'Not-in-family', 'Other-relative',\n       'Own-child', 'Unmarried', 'Wife', 'Asian-Pac-Islander', 'Black',\n       'Other', 'White', 'Male', 'United-States']","ceae9343":"test.head()","67dbf4c9":"test.shape","690df88a":"test.keys()","e687d415":"train.keys()","b45e24d8":"train['Private'].value_counts()","2469e335":"X_train = train.copy()\nX_test = test.copy()","e7eeacd5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a2545a4b":"from sklearn.linear_model import LogisticRegression","4d3c8ecb":"# weights={0:1.0, 1:2.0}\nlogmodel = LogisticRegression(class_weight='balanced')\nlogmodel.fit(X_train,y_train)","1b8079cd":"predictions = logmodel.predict(X_test)","7d3d6689":"from sklearn.metrics import classification_report , confusion_matrix , accuracy_score","0092515e":"print(classification_report(y_test,predictions))","eeb290f6":"print(confusion_matrix(y_test,predictions))","558fe41a":"accuracy_score(y_test, predictions)","51726706":"print(logmodel.score(X_train, y_train))\nprint(logmodel.score(X_test, y_test))","098c9ffe":"from sklearn.neighbors import KNeighborsClassifier","68794e12":"knn = KNeighborsClassifier(n_neighbors=5)","a82c3e75":"knn.fit(X_train,y_train)","2b409860":"pred = knn.predict(X_test)","07fe1872":"accuracy_score(y_test, pred)","f93ef769":"print(classification_report(y_test,pred))","7677fad7":"from sklearn.svm import SVC","579122f7":"# model = SVC()\n# weights={0:1.0, 1:2.0}\nmodel = SVC(class_weight='balanced')","265f0c08":"model.fit(X_train,y_train)","99cf5c82":"predictions = model.predict(X_test)","1f0131b2":"accuracy_score(y_test, predictions)","fe1c7748":"print(classification_report(y_test,predictions))","2eb2375a":"from sklearn.tree import DecisionTreeClassifier","aa4bee93":"dtree = DecisionTreeClassifier()","19a069a7":"dtree.fit(X_train,y_train)","c440302c":"predictions = dtree.predict(X_test)","a5aa7b60":"accuracy_score(y_test,predictions)","e552bac9":"print(classification_report(y_test,predictions))","45532400":"# StandardScaler","203eb426":"# Model","720ab895":"# KNeighborsClassifier","3d043e34":"# LogisticRegression","fd9979b3":"# DecisionTreeClassifier and KNeighborsClassifier are predicting better with better accuracy","2fac3d8c":"# DecisionTreeClassifier","fdb07e9b":"# SVM"}}