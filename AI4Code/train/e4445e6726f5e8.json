{"cell_type":{"f45aee56":"code","4ccdb50e":"code","6ac01375":"code","19a0aed8":"code","946147b4":"code","7c0f189e":"code","7688351a":"code","4a5dafb3":"code","cee09f6c":"code","03558b03":"code","7ba021fa":"code","99eda824":"markdown","d39f4eb0":"markdown","42f621e0":"markdown","489ca1ed":"markdown","8ebbd2ea":"markdown"},"source":{"f45aee56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","4ccdb50e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv', index_col = 'id')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv', index_col = 'id')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv', index_col = 'id')\ntarget = train.pop('target')","6ac01375":"train_test_combined = pd.concat([train, test])\ncat_cols = [feature for feature in train.columns if 'cat' in feature]\ndummies = pd.get_dummies(train_test_combined, columns=cat_cols, drop_first=True)\n\n# Create new train and test sets with one-hot encodings\ntrain_ohe = dummies.iloc[:train.shape[0], :]\ntest_ohe = dummies.iloc[train.shape[0]:, :]\n","19a0aed8":"display(train_ohe.head())","946147b4":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(train_ohe, target, test_size=0.2, random_state=0)","7c0f189e":"import optuna\ndef objective(trial):\n    params = {\n        'random_state': 42,\n        'n_estimators': trial.suggest_categorical('n_estimators', [100]),\n        'max_depth': trial.suggest_int('max_depth', 10, 15),\n        'learning_rate': trial.suggest_float('learning_rate', 0.001, 0.01),\n        'subsample': trial.suggest_categorical('subsample', [0.9, 1.0])\n    }\n    model = GradientBoostingRegressor(**params) \n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_valid)\n    rmse = mean_squared_error(y_valid, y_pred, squared=False)\n    \n    return rmse","7688351a":"%%time\nstudy = optuna.create_study(direction='minimize',sampler=optuna.samplers.TPESampler(seed=42))\nstudy.optimize(objective, n_trials=10)\nprint('Number of finished trials:', len(study.trials))\nprint('Best parameters:', study.best_trial.params)\nprint('Best RMSE:', study.best_trial.value)","4a5dafb3":"#Set numbers manually from optuna tests for submittal.\n#'n_estimators': 100, 'max_depth': 13, 'learning_rate': 0.009556428757689247, 'subsample': 0.9}\n","cee09f6c":"model = GradientBoostingRegressor(\n            max_depth= study.best_trial.params['max_depth'],\n            subsample = study.best_trial.params['subsample'],\n            n_estimators= study.best_trial.params['n_estimators'],\n            learning_rate= float(study.best_trial.params['learning_rate'])\n        )\nmodel.fit(X_train, y_train)","03558b03":"predictions = model.predict(test_ohe)\npred_df = pd.DataFrame(test_ohe.index)\npred_df['target'] = np.zeros(len(test_ohe))\npred_df.loc[:len(test_ohe),'target'] = predictions","7ba021fa":"pred_df.to_csv('submission.csv',index=False)","99eda824":"**Load up the data, set target.**","d39f4eb0":"**By running optuna method, I used the reported, optimal values and set them accordingly.**\n","42f621e0":"**My head is spinning from all the other amazing methods to work through best approach and features. Just so I can say I made a submittal on a competition, I'll send this one in. It may take awhile to read and understand the numerous ways to solve the problem. Thanks to everyone for creating\/sharing their work!**","489ca1ed":"One-hot encode seems reasonable","8ebbd2ea":"# OPTUNA\nCredit to Ernee Kozyreff (https:\/\/www.kaggle.com\/ekozyreff) for enlightening me on optuna in his notebook (https:\/\/www.kaggle.com\/ekozyreff\/tps-2021-02-xgboost-optuna-gpu) ...really cool - thx!"}}