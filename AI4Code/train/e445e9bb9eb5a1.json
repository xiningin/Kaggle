{"cell_type":{"dcf5a9d7":"code","9b9c0efc":"code","545a11ed":"code","ded8aa73":"code","4950d2d4":"code","e20aac78":"code","9176e3ef":"code","1a50c3dd":"code","fd9ad028":"code","ff47289f":"code","a078cd13":"code","c864da67":"code","eb375e6f":"code","0aa274d4":"code","42e58252":"code","1bf45715":"code","04c1a842":"code","d9270886":"code","8b3247e1":"code","f8453900":"code","1d077f12":"code","0732e28b":"code","9a7148af":"code","cad260a1":"code","2a038485":"code","23944e73":"code","f3fa20ee":"code","247b50ba":"code","4085dbd5":"code","6fa3688a":"code","f2b2f126":"code","b4e79bd1":"code","2a33fedd":"code","eb5eaded":"code","bc09e380":"code","7b0bae7b":"markdown","137f8fe5":"markdown","0022817b":"markdown","f05b01fd":"markdown","190bc015":"markdown","4e93dedc":"markdown"},"source":{"dcf5a9d7":"import pandas as pd\nimport numpy as np\nimport os\nimport shutil\nimport glob\nimport matplotlib.pyplot as plt\n!pip install openpyxl","9b9c0efc":"covid_imgs = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID.metadata.xlsx\")\ncovid_imgs.head()","545a11ed":"opacity_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity.metadata.xlsx\")\nopacity_images.head()","ded8aa73":"pneumonia_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia.metadata.xlsx\")\npneumonia_images.head(2)","4950d2d4":"normal_images = pd.read_excel(\"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal.metadata.xlsx\")\nnormal_images.head(2)","e20aac78":"ROOT_DIR = \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\"\nimgs = ['COVID','Lung_Opacity','Normal','Viral Pneumonia']\n\nNEW_DIR = \"\/kaggle\/working\/augmented\/\"\n#..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID","9176e3ef":"if not os.path.exists(NEW_DIR):\n  os.mkdir(NEW_DIR)\n\n  for i in imgs:\n    org_dir = os.path.join(ROOT_DIR, i+\"\/\")\n    \n    for imgfile in glob.iglob(os.path.join(org_dir, \"*.png\")):\n      shutil.copy(imgfile, NEW_DIR)\n      \nelse:\n  print(\"Already Exist\")","1a50c3dd":"# lets visualise the number of images in each category\ncounter = {'COVID':0,'Lung_Opacity':0,'Normal':0,'Viral Pneumonia':0}\n\nfor image in imgs:\n  for count in glob.iglob(NEW_DIR+image+\"*\"):\n    counter[image] += 1\n\n# the number of images i have in each class\ncounter","fd9ad028":"plt.figure(figsize=(10,5))\nplt.bar(x = counter.keys(), height= counter.values())\nplt.show()","ff47289f":"if not os.path.exists(NEW_DIR+\"train_test_split\/\"):\n\n  os.makedirs(NEW_DIR+\"train_test_split\/\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/train\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/train\/Covid\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/test\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/test\/Covid\")\n\n  os.makedirs(NEW_DIR+\"train_test_split\/validation\/Normal\")\n  os.makedirs(NEW_DIR+\"train_test_split\/validation\/Covid\")\n\n\n  # Train Data\n  for i in np.random.choice(replace= False , size= 3000 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 3900 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 900 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/train\/Covid\" )\n    os.remove(i)\n\n  # Validation Data\n  for i in np.random.choice(replace= False , size= 308 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 500 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 200 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/validation\/Covid\" )\n    os.remove(i)\n\n  # Test Data\n  for i in np.random.choice(replace= False , size= 300 , a = glob.glob(NEW_DIR+imgs[0]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Covid\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 300 , a = glob.glob(NEW_DIR+imgs[2]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Normal\" )\n    os.remove(i)\n\n  for i in np.random.choice(replace= False , size= 200 , a = glob.glob(NEW_DIR+imgs[3]+\"*\") ):\n    shutil.copy(i , NEW_DIR+\"train_test_split\/test\/Covid\" )\n    os.remove(i)","a078cd13":"train_path  = \"\/kaggle\/working\/augmented\/train_test_split\/train\"\nvalid_path  = \"\/kaggle\/working\/augmented\/train_test_split\/validation\"\ntest_path   = \"\/kaggle\/working\/augmented\/train_test_split\/test\"","c864da67":"# Make imports\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.resnet50 import preprocess_input, ResNet50\nfrom keras.models import Model\nfrom keras.layers import Dense, MaxPool2D, Conv2D\nimport keras","eb375e6f":"train_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    shear_range=0.2)\ntrain = train_data_gen.flow_from_directory(directory=train_path, target_size=(224,224))","0aa274d4":"validattion_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\nvalid = validattion_data_gen.flow_from_directory(directory=valid_path, target_size=(224,224))","42e58252":"test_data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntest = test_data_gen.flow_from_directory(directory=test_path, target_size=(224,224), shuffle=False)","1bf45715":"# Covid +ve X-Ray is represented by 0 and Normal is represented by 1\n\nclass_type = {0:'Covid',  1 : 'Normal'}","04c1a842":"t_img, label = train.next()","d9270886":"# function when called will plot the images\n\ndef plotImages(img_arr, label):\n  \"\"\"\n  input  :- images array \n  output :- plots the images \n  \"\"\"\n  for im,l in zip(img_arr, label):\n    plt.figure(figsize=(5,5))\n    plt.imshow(im, cmap = 'gray')\n    plt.title(im.shape)\n    plt.axis = False\n    plt.show()","8b3247e1":"# function call to plot the images\n\nplotImages(t_img, label)","f8453900":"import tensorflow as tf\nimport tensorflow\nfrom tensorflow import keras\nfrom keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.layers import Flatten, Dense, MaxPool2D, Dropout","1d077f12":"res  = ResNet50( input_shape=(224,224,3), include_top=False)","0732e28b":"# We won't train all parameters again\nfor layer in res.layers:\n  layer.trainable = False","9a7148af":"x = Flatten()(res.output)\nout = Dense(units=2, activation='sigmoid', name='predictions')(x)\n\n\n# Creating our model\nmodel = Model(inputs=res.input, outputs=out)","cad260a1":"model.summary()","2a038485":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","23944e73":"ACCURACY_THRESHOLD = 0.95\nclass myCallback(tf.keras.callbacks.Callback): \n    def on_epoch_end(self, epoch, logs={}): \n        if(logs.get('accuracy') > ACCURACY_THRESHOLD):   \n          print(\"\\nReached %2.2f%% accuracy, so stopping training!!\" %(ACCURACY_THRESHOLD*100))   \n          self.model.stop_training = True\n\nes  = myCallback()","f3fa20ee":"hist = model.fit(train, steps_per_epoch=10, epochs=30, validation_data=valid, validation_steps=16, callbacks=[es])","247b50ba":"model.save(\"covid-resnet50\")","4085dbd5":"# checking out the accuracy of our model \n\nacc = model.evaluate_generator(generator= test)[1] \n\nprint(f\"The accuracy of your model is = {acc * 100} %\")","6fa3688a":"\nfrom keras.preprocessing import image\n\ndef get_img_array(img_path):\n  \"\"\"\n  Input : Takes in image path as input \n  Output : Gives out Pre-Processed image\n  \"\"\"\n  path = img_path\n  img = image.load_img(path, target_size=(224,224,3))\n  img = image.img_to_array(img)\n  img = np.expand_dims(img , axis= 0 )\n  \n  return img","f2b2f126":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","b4e79bd1":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","2a33fedd":"import numpy as np\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nY_pred = model.predict_generator(test)\ny_pred = np.argmax(Y_pred ,axis =1)\nprint('Confusion Matrix')\nconfusion_matrix = confusion_matrix(test.classes, y_pred)\nprint(confusion_matrix)\nprint('Classification Report')\ntarget_names = ['normal', 'covid']\nprint(classification_report(test.classes, y_pred, target_names=target_names))","eb5eaded":"import seaborn as sns\nsns.heatmap(confusion_matrix, annot = True)","bc09e380":"\n# path for that new image.\n\npath = \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Lung_Opacity\/Lung_Opacity-1010.png\"\n# you can add any image path\n\n#predictions: path:- provide any image from google or provide image from all image folder\nimg = get_img_array(path)\n\nres = class_type[np.argmax(model.predict(img))]\nprint(f\"The given X-Ray image is of type = {res}\")\nprint()\nprint(f\"The chances of image being Covid is : {model.predict(img)[0][0]*100} percent\")\nprint()\nprint(f\"The chances of image being Normal is : {model.predict(img)[0][1]*100} percent\")\n\n\n# to display the image  \nplt.imshow(img[0]\/255, cmap = \"gray\")\nplt.title(\"input image\")\nplt.show()","7b0bae7b":"# Detecting Covid Status","137f8fe5":"# Resnet50 as the pretrained base","0022817b":"# Working with Images","f05b01fd":"# **Graph**","190bc015":"# Working on the files","4e93dedc":"# Visualize the data"}}