{"cell_type":{"61684cb6":"code","ea6dc543":"code","a5b4b6e1":"code","aaa3ca1f":"code","58a54ff7":"code","201fcf6e":"code","8c2fb905":"code","e5ba24b7":"code","d5ac5f93":"code","81d7bf41":"code","a40b81f9":"code","afb13533":"code","8f32e3d7":"code","0307e382":"code","8622785e":"code","9cca5aa2":"code","20421289":"code","29fdbc17":"code","4ac16c01":"code","853d3366":"code","73661583":"code","32b4ce68":"code","95b70ac3":"code","ead2d57e":"code","3aff6fec":"code","8beba7cc":"code","889cc526":"code","592816cc":"code","24ecdcae":"code","b1abd9ba":"code","912f0f1e":"code","953182c4":"code","6cf2b802":"code","91fd9249":"code","55053182":"code","a2cf6d8c":"code","2e33f9d2":"code","7d8fa4e3":"code","d1fcd7d3":"code","47b15e10":"code","4967b853":"code","15b78c99":"code","7017411c":"code","291e5ce8":"code","f7e9929e":"code","af34cf6f":"code","8bcb03f8":"code","4bd4cafa":"code","5497e453":"code","b2fa244b":"code","35287290":"code","fe61a7a1":"code","f9cb9fcb":"code","13ea59e1":"code","5e33a64e":"code","6b318847":"code","eb36deb8":"code","9475be8d":"code","fed14b51":"code","99746e9c":"code","033e9816":"code","af01c750":"code","00637876":"code","ada96037":"code","590a4735":"code","05631550":"code","e84d6e9d":"code","7e66e84f":"code","57041629":"code","1167c76c":"code","8461d109":"code","103ca52a":"code","02a27220":"code","000a53ab":"code","c24347e4":"code","5842f254":"code","1fc6c00b":"code","c6c8a5ac":"markdown","fb52ea24":"markdown","cedcd581":"markdown","43e5a6bd":"markdown","c1164018":"markdown","93d0dd85":"markdown","c9d1d30f":"markdown","7e4b392a":"markdown","5d139ac1":"markdown","53be6c39":"markdown","f118b748":"markdown","f898a333":"markdown","6a0d056e":"markdown","5604c2d3":"markdown","af3c6ae4":"markdown","c5de85a8":"markdown","ff1f21d5":"markdown","6cd50ea3":"markdown","6875b847":"markdown","58f05a1b":"markdown","1c304a00":"markdown","b4c99745":"markdown","0e704079":"markdown","067193d1":"markdown","c8b5954a":"markdown"},"source":{"61684cb6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ea6dc543":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","a5b4b6e1":"bhd = pd.read_csv(\"\/kaggle\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv\")","aaa3ca1f":"bhd.head()","58a54ff7":"bhd.columns","201fcf6e":"bhd.shape","8c2fb905":"bhd.dtypes","e5ba24b7":"bhd.isna().sum()","d5ac5f93":"bhd = bhd.rename(columns = {'price':'price_lakhs'})","81d7bf41":"bhd.describe(include='all')","a40b81f9":"plt.figure(figsize=(10,4))\nsns.countplot(x = bhd.area_type, data = bhd)\nplt.show()","afb13533":"bhd.availability.value_counts()","8f32e3d7":"def check_avail(l):\n    if l == 'Ready To Move':\n        return 1\n    else: \n        return 0","0307e382":"bhd['availability'] = bhd['availability'].apply(check_avail)","8622785e":"bhd.rename(columns= {'availability':'avail_now'}, inplace = True)","9cca5aa2":"plt.figure(figsize=(10,3))\nsns.countplot(x = bhd.avail_now, data = bhd)\nplt.show()","20421289":"bhd.location.value_counts()","29fdbc17":"bhd.location.value_counts()[:10].plot(kind='barh',figsize=(14,6))\nplt.show()","4ac16c01":"bhd['size'].value_counts()","853d3366":"bhd['size'] = bhd['size'].apply(lambda a: str(a).split(' ')[0])\n\nbhd['size'] = bhd['size'].apply(lambda x:3 if(x =='nan') else x)\n\nbhd['size'] = bhd['size'].map(int)","73661583":"bhd['size'].value_counts().plot(kind= 'bar',figsize=(10,4))\nplt.show()","32b4ce68":"bhd.rename(columns= {'size':'size_bhk'}, inplace = True)","95b70ac3":"bhd['society'].value_counts()","ead2d57e":"bhd['society'].isna().sum()","3aff6fec":"bhd.drop(['society'],axis=1,inplace=True)","8beba7cc":"bhd.total_sqft.value_counts()","889cc526":"def oton(k):\n    num = k.split('-')\n    q=0\n    for t in num:\n        try :\n            q+=float(t)\n            return q\/len(num)\n        except ValueError as v:\n            return num","592816cc":"bhd['total_sqft']=bhd['total_sqft'].apply(oton)","24ecdcae":"# assigning sqft value to corresponding house sizes in bhk\nsize = bhd['size_bhk'].value_counts().index\nsize = [i for i in size]\nsqft = []\nfor z in size:\n    \n    y=bhd[bhd['size_bhk']==z]['total_sqft']\n    sum = 0\n    count=0\n    for i in y:\n        if(type(i) == float):\n            sum+=i\n            count+=1\n        else :\n            continue\n    sqft.append(sum\/count)    ","b1abd9ba":"def fitk(v):\n    c1 = v[0]\n    c2 = v[1]\n    if type(c2) != float:\n        return sqft[size.index(c1)]\n    else :\n        return c2","912f0f1e":"bhd['total_sqft'] = bhd[['size_bhk','total_sqft']].apply(fitk,axis=1)","953182c4":"plt.figure(figsize=(14,5))\nsns.distplot(bhd['total_sqft'],kde = False)\nplt.show()","6cf2b802":"bhd.drop(bhd[bhd['total_sqft'] < 300].index,inplace=True)","91fd9249":"bhd.total_sqft.std()","55053182":"bhd.total_sqft.mean()","a2cf6d8c":"bhd.drop(bhd[bhd['total_sqft'] > 10000].index,inplace=True)","2e33f9d2":"plt.figure(figsize=(12,4))\nsns.countplot(x='bath',data=bhd)\nplt.show()","7d8fa4e3":"bhd.bath.isna().sum()","d1fcd7d3":"bhd.balcony.isna().sum()","47b15e10":"bhd.dropna(axis=0,how='any',inplace=True)","4967b853":"# converting to int datatype \nbhd['bath']=bhd['bath'].map(int)\nbhd['balcony']=bhd['balcony'].map(int)","15b78c99":"sns.heatmap(data=bhd.isna(),yticklabels=False,cbar = False,cmap='cividis')\nplt.show()","7017411c":"bhd.duplicated().sum()","291e5ce8":"bhd.drop_duplicates(inplace=True)","f7e9929e":"bhd.info()","af34cf6f":"bhd.head()","8bcb03f8":"plt.figure(figsize=(10,6))\nsns.countplot(x='area_type',data=bhd)\n# plt.legend(loc =1)\nplt.show()","4bd4cafa":"plt.figure(figsize=(10,6))\nsns.countplot(x='area_type',data=bhd,hue='avail_now')\n# plt.legend(loc =1)\nplt.show()","5497e453":"plt.figure(figsize=(10,6))\nsns.countplot(x='size_bhk',data=bhd)\n# plt.legend(loc =1)\nplt.show()","b2fa244b":"plt.figure(figsize=(10,6))\nsns.distplot(x=bhd['total_sqft'],kde=False)\nplt.show()","35287290":"y = bhd.price_lakhs.value_counts()\nplt.figure(figsize=(16,5))\nplt.hist(x=y.index,weights=y,bins=60)\nplt.show()","fe61a7a1":"sns.heatmap(bhd.corr())\nplt.show()","f9cb9fcb":"sns.pairplot(data=bhd)","13ea59e1":"bhd.drop(['location'],axis=1,inplace=True)","5e33a64e":"bhd['ppsft'] = (bhd['price_lakhs']*100000)\/bhd['total_sqft']","6b318847":"bhd.corr()","eb36deb8":"bhd.describe()","9475be8d":"bhd.drop(bhd[bhd['bath'] > 10].index,inplace=True)","fed14b51":"sns.boxplot(data=bhd)","99746e9c":"bhdn = pd.get_dummies(bhd,drop_first=True)","033e9816":"y = bhdn[['price_lakhs']]\n\nX = bhdn.drop(['price_lakhs'],axis=1)","af01c750":"bhdn.head()","00637876":"X.head()","ada96037":"y.head()","590a4735":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score","05631550":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","e84d6e9d":"Lr = LinearRegression()","7e66e84f":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=15)","57041629":"Lr.fit(X_train,y_train)","1167c76c":"Lr.score(X_train,y_train)","8461d109":"Lr.score(X_test,y_test)","103ca52a":"y_hat = Lr.predict(X_test)","02a27220":"from sklearn.metrics import r2_score","000a53ab":"r2_score(y_test,y_hat)","c24347e4":"cv = ShuffleSplit(n_splits=6, test_size=0.2, random_state=10)\nar = cross_val_score(LinearRegression(), X, y, cv=cv)","5842f254":"ar","1fc6c00b":"print(f\"This model can explain nearly {round(ar.mean()*100,2)}% of the results.\")","c6c8a5ac":"So our data is free from any null values.","fb52ea24":"Adding 1 more column.","cedcd581":"Renaming this price column to <code>price_lakhs<\/code>,as now it'll remove the ambiguity of unit.","43e5a6bd":"Seems as if we do have null values in the dataset and have to treat them appropiatety.","c1164018":"Removing duplicate entries from the dataset.","93d0dd85":"Lets explore <code>area_type<\/code> column","c9d1d30f":"## EDA","7e4b392a":"House available in the price range of 50-100 lakhs are maximum in count. Followed by houses priced below 50lakhs and houses priced between 100-150lakhs.","5d139ac1":"So from the Viz we get to know that **Whitefield** has most no of apartments available followed by **Sarjapur Road** and **Electronic city**.","53be6c39":"A large chunk of houses available are either 2 or 3 BHK.","f118b748":"Lets just plot and have a look.","f898a333":"Nearly three quarter of houses are available as ready to move.","6a0d056e":"Majority of the houses available are below 200 lakhs","5604c2d3":"From this preliminary analysis we get to know that:-\n\na). On average for every house atleast we have a balcony, a couple of bathrooms and price frequently ranging somewhere between 70  and 112\n\nb).  Most of the houses available are 2BHK and in GrrvaGr society wth an availability of 'Ready to move'.","af3c6ae4":"There are 9 columns and 13,320 entries into the dataset.","c5de85a8":"So most of the houses are available immediately are in Super-builtup area.","ff1f21d5":"Making the dataset ready for the prediction via Regression.","6cd50ea3":"**Checkng the r-squared value**","6875b847":"Majority of the houses are with two bathrooms.","58f05a1b":"## Now, we'll explore data and do data cleaning side by side.","1c304a00":"Since nearly half of the values from the column are missing thus we'll get rid of this column","b4c99745":"Since we aren't quite aware of the time at which data has been gathered so we'll instead try to classify it as if the house is available for \"Ready to move or not\" and rename the column as <code>avail_now<\/code>","0e704079":"# Project to predict Price of Houses in Bengaluru using Regression","067193d1":"**Super built-up** Area is most common type followed by **Built-up** and **Plot** Area.","c8b5954a":"Most of the houses have area in the range of 1000 to 5000 sqft."}}