{"cell_type":{"18c613b9":"code","7325e034":"code","32658083":"code","32c1a352":"code","24f4987b":"code","48dee980":"code","3519506b":"code","4fac1746":"code","ac0d3ebd":"code","e6e90618":"code","f13dade8":"code","c126fe46":"code","f8d831cd":"code","fe4975e3":"code","c0157a8b":"code","586a426c":"code","4a7907f5":"code","65e7431a":"code","54369818":"code","133bad4e":"code","b30a156a":"code","de3863fb":"code","6468a3d6":"code","5e1bd727":"code","9377d899":"code","9c4965e9":"code","884f49f6":"code","b97cadbb":"code","632ce972":"code","071c10ec":"code","3b18d013":"code","a9b567d7":"code","166c86c8":"code","08e54511":"code","ff4af6d4":"code","ff1e6491":"code","9e7809ca":"code","67d2ed3b":"code","5e3d5851":"code","b6512de8":"code","f2e27c88":"code","e4d92038":"code","e7201553":"code","59a43849":"code","43cb83a9":"code","fd3851cd":"code","e6312643":"code","1b7d0129":"code","b8b5a5e1":"code","2c96cfc9":"code","88b7988e":"markdown","ed8a18f9":"markdown","8fe298f2":"markdown","2dcd1e0e":"markdown","34722e7b":"markdown"},"source":{"18c613b9":"import pandas as pd\nimport re \nfrom matplotlib import pyplot\nimport seaborn as sns\nimport numpy as np\nimport os\nprint(os.listdir(\"..\/input\"))#r\u00e9cup\u00e8re les deux fichiers\nnp.random.seed(12345)","7325e034":"notclean = pd.read_csv('..\/input\/bitcoin-tweets-14m\/cleanprep.csv', delimiter=',',header = None)#lit le csv et le met dans notclean\nnotclean.head()#affiche les 5 premi\u00e8res lignes","32658083":"notclean.info() #les types d'objects","32c1a352":"#-----------------Pre-processing -------------------#\n\nnotclean.columns =['dt', 'name','text','polarity','sensitivity'] #on change le nom des colonnes\nnotclean =notclean.drop(['name','text'], axis=1)#on enl\u00e8ve les deux colonnes\nnotclean.head()","24f4987b":"notclean.info()","48dee980":"notclean['dt'] = pd.to_datetime(notclean['dt'])#format date pour \u00eatre trait\u00e9\nnotclean['DateTime'] = notclean['dt'].dt.floor('h')#remet \u00e0 l'heure sans les min\nnotclean.head()","3519506b":"notclean.info()","4fac1746":"vdf = notclean.groupby(pd.Grouper(key='dt',freq='H')).size().reset_index(name='tweet_vol')#on regroupe par paquet d'heure et le nombre de tweet par heure\nvdf.head()","ac0d3ebd":"vdf.info()","e6e90618":"vdf=vdf.set_index('dt')#on index la colonne dt\nvdf.head()","f13dade8":"vdf.info()","c126fe46":"notclean.index = pd.to_datetime(notclean.index) #index en format date\nnotclean.head()","f8d831cd":"notclean.info()","fe4975e3":"vdf['tweet_vol'] =vdf['tweet_vol'].astype(float)#changement de int64 en float64\nvdf.head()","c0157a8b":"vdf.info()","586a426c":"df = notclean.groupby('DateTime').agg(lambda x: x.mean())#regrouper par date avec comme condition: faire une moyenne des trois autres colonnes pour chaque ligne\ndf['Tweet_vol'] = vdf['tweet_vol']#rajoute une colone\ndf = df.drop(df.index[0])#enl\u00e8ve la premi\u00e8re colonne\ndf.head()","4a7907f5":"df.tail()#affiche la fin","65e7431a":"df.info()","54369818":"btcDF = pd.read_csv('..\/input\/btc-price\/btcSave2.csv')#lit le csv et le met dans btcDF\nbtcDF['Timestamp'] = pd.to_datetime(btcDF['Timestamp'])#met en format date\nbtcDF = btcDF.set_index(pd.DatetimeIndex(btcDF['Timestamp']))#met l'index sur la nouvelle colonne qui a le format date\nbtcDF.head()","133bad4e":"btcDF = btcDF.drop(['Timestamp'], axis=1)#enl\u00e8ve le colonne qui n'est pas en format date","b30a156a":"btcDF.head()#il nous reste la colonne avec le bon format","de3863fb":"Final_df = pd.merge(df,btcDF, how='inner',left_index=True, right_index=True)#on fusionne les deux tableaux en gardant le m\u00eame index\nFinal_df.head()","6468a3d6":"Final_df.info()","5e1bd727":"Final_df=Final_df.drop(['Weighted Price'],axis=1 )#on enl\u00e8ve Weighted Price\nFinal_df.head()","9377d899":"Final_df.columns = ['Polarity', 'Sensitivity','Tweet_vol','Open','High','Low', 'Close_Price', 'Volume_BTC', 'Volume_Dollar']#on renomme les tableaux","9c4965e9":"Final_df.head()","884f49f6":"Final_df = Final_df[['Polarity', 'Sensitivity','Tweet_vol', 'Open','High','Low', 'Volume_BTC', 'Volume_Dollar', 'Close_Price']]#on remet dans un ordre plus pratique","b97cadbb":"Final_df","632ce972":"#--------------Analysis----------------------------#\nvalues = Final_df.values\ngroups = [0,1,2,3,4,5,6,7]\ni =1  \npyplot.figure()\nfor group in groups:\n    pyplot.subplot(len(groups), 1,i)\n    pyplot.plot(values[:,group])\n    pyplot.title(Final_df.columns[group], y=.5, loc='right')\n    i += 1\npyplot.show()","071c10ec":"Final_df['Volume_BTC'].max()#on r\u00e9cup\u00e8re le max en volume en BTC","3b18d013":"Final_df['Volume_Dollar'].max()#on r\u00e9cup\u00e8re le max en volume en dollar","a9b567d7":"Final_df['Volume_BTC'].sum()#on r\u00e9cup\u00e8re la somme des volumes en BTC","166c86c8":"Final_df['Volume_Dollar'].sum()#on r\u00e9cup\u00e8re la somme des volumes en dollar","08e54511":"Final_df['Tweet_vol'].max()#on r\u00e9cup\u00e8re le max en volume de tweet","ff4af6d4":"Final_df.describe() #g\u00e9n\u00e8re des statistiques descriptives sur le jeu de donn\u00e9es(moyenne\/ecart-type\/quartile\/min\/max)","ff1e6491":"cor = Final_df.corr() #correlation entre les colonnes donc 1 quand c'est la m\u00eame\ncor","9e7809ca":"Top_Vol =Final_df['Volume_BTC'].nlargest(10)#retourne les 10 plus gros volume en BTC\nTop_Vol","67d2ed3b":"Top_Sen =Final_df['Sensitivity'].nlargest(10)#retourne les 10 plus sensitivity\nTop_Sen","5e3d5851":"import matplotlib.pyplot as plt\nsns.set(style=\"white\")\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax =sns.heatmap(cor, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .7})\nplt.show()","b6512de8":"plt.plot(Final_df.index, Final_df['Close_Price'], 'black')\nplt.plot(Final_df.index, Final_df['Open'], 'yellow')\nplt.plot(Final_df.index, Final_df['Low'], 'red')\nplt.plot(Final_df.index, Final_df['High'], 'green')\nplt.title('BTC Close Price(hr)')\nplt.xticks(rotation='vertical')\nplt.ylabel('Price ($)');\nplt.show();\n\nplt.plot(Final_df.index, Final_df['Volume_BTC'], 'g')\nplt.title('Trading Vol BTC(hr)')\nplt.xticks(rotation='vertical')\nplt.ylabel('Vol BTC');\nplt.show();\n\nplt.plot(Final_df.index, Final_df['Polarity'], 'b')\nplt.xticks(rotation='vertical')\nplt.title('Twitter Sentiment(hr)')\nplt.ylabel('Pol (0-1)');\nplt.show();\nplt.legend()\n\nplt.plot(Final_df.index, Final_df['Tweet_vol'], 'b')\nplt.xticks(rotation='vertical')\nplt.title('Tweet Vol(hr)')\nplt.ylabel('No. of Tweets');\nplt.show();\nplt.legend()","f2e27c88":"#sns Heatmap for Hour x volume \n#Final_df['time']=Final_df.index.time()\nFinal_df['time']=Final_df.index.to_series().apply(lambda x: x.strftime(\"%X\"))#r\u00e9cup\u00e8re l'heure et la met dans une colonne\nFinal_df.head()","e4d92038":"hour_df=Final_df\nhour_df=hour_df.groupby('time').agg(lambda x: x.mean())#fait des groupes par horaire et peu importe le jour puis classe par heure\nhour_df.head()","e7201553":"hour_df['hour'] = hour_df.index#change le nom de l'index en hour\nresult = hour_df.pivot(index='hour', columns='Polarity', values='Volume_BTC')#organise suivant l'index et la colonne choisi avec la valeur choisi\nsns.heatmap(result, annot=True, fmt=\"g\", cmap='viridis') #librairie seaborn pour visualiser les r\u00e9sultats\nplt.title('Polarity x BTC Volume avg(Hr)')#mettre un titre\nplt.show()#afficher","59a43849":"hour_df['hour'] = hour_df.index\nresult = hour_df.pivot(index='Volume_BTC', columns='hour', values='Tweet_vol')#idem avec Tweet\nsns.heatmap(result, annot=True, fmt=\"g\", cmap='viridis')#librairie seaborn pour visualiser les r\u00e9sultats\nplt.title('BTC Vol x Tweet Vol avg(Hr)')\nplt.show()","43cb83a9":"#---------------- LSTM Prep ------------------------#","fd3851cd":"df = Final_df","e6312643":"df.info()","1b7d0129":"df = df.drop(['Open','High', 'Low', 'Volume_Dollar'], axis=1)#on enl\u00e8ve les colonnes non utile pour notre mod\u00e8le\ndf.head()","b8b5a5e1":"df = df[['Close_Price', 'Polarity', 'Sensitivity','Tweet_vol','Volume_BTC']]#on met dans on ordre choisi\ndf.head()","2c96cfc9":"cor = df.corr()\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\")\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax =sns.heatmap(cor, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .7})\nplt.show()","88b7988e":"# Exploratory Analysis","ed8a18f9":"# We transform the raw data into readable csv files","8fe298f2":"# Bitcoin Model with Tweet Volume and Sentiment","2dcd1e0e":"# Data Pre-processing","34722e7b":"# LSTM Model"}}