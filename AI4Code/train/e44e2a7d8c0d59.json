{"cell_type":{"71280efd":"code","8ccda35c":"code","54adf71a":"markdown","6509b95b":"markdown"},"source":{"71280efd":"import os, random, time, pickle, argparse, sys, datetime\n\ndef load_csv(filename):\n    asm = []\n    with open(filename) as stream:\n        for i, line in enumerate(stream.readlines()):\n            if i == 0: continue\n            f = int(line.split(',')[-1])\n            asm.append(f)\n    return asm\n\n\ndef save_csv(asm, filename):\n    with open(filename, \"w\") as s:\n        s.write(\"family_id,assigned_day\\n\")\n        for f, d in enumerate(asm):\n            s.write(\"%d,%d\\n\" %(f,d+1))\n\n            \nclass Submission:\n    def __init__(self):\n        DATAPATH = '..\/input\/santa777\/'\n        with open (DATAPATH+'Npp.pkl', 'rb') as fp: self.Npp = pickle.load(fp)\n        with open (DATAPATH+'Acc_Table.pkl', 'rb') as fp: self.Acc_Table = pickle.load(fp)\n        with open (DATAPATH+'Pre_Table.pkl', 'rb') as fp: self.Pre_Table = pickle.load(fp)\n        with open (DATAPATH+'Choice_Table.pkl', 'rb') as fp: self.Choice_Table = pickle.load(fp)\n        with open (DATAPATH+'Rank_Table.pkl', 'rb') as fp: self.Rank_Table = pickle.load(fp)\n        \n        self.score = 0\n        self.found_a_move = False\n        \n        self.occ = [0]*100 # current occupancy for 100 days\n        self.asm = None # current assignment of days for 5000 families\n        self.rank = [0]*5000 # current choice preference for 5000 families\n        self.pre = [0.]*5000 # current preference cost for 5000 families\n        self.acc = [0.]*100 # current accounting cost for 100 days\n        self.moves = []\n        self.depth = 0\n        self.cnt_moves = 0\n        self.total_time = 0\n        \n\n    def refresh_mode(self, mode=100, w_pre=1):\n        self.mode = mode\n        self.w_pre = w_pre\n        # Preference Cost\n        for f, d in enumerate(self.asm): self.pre[f] = self.Pre_Table[f][d]\n        # Accounting Cost\n        self.acc[99] = (self.occ[99]-125.0) \/ 400.0 * self.occ[99]**(0.5)\n        for d in range(99): self.acc[d] = self.get_acc_cost(d)\n        self.score = ( sum(self.w_pre * self.pre) + sum(self.acc)) \/ (self.w_pre + 1) * 2\n                        \n    def shuffle_search(self, n='random', toleration=0, lower_tol=-9999):\n        self.found_a_move = False\n        k = n if n != 'random' else random.choice([1,2,3,4,5])\n        families = random.sample(range(5000), k)\n        cands = [random.choice([d for d in self.Choice_Table[f][0:4]  \n                                   if d!=self.rank[f]]) for f in families]\n        moves = [[families[j], cands[j]] for j in range(k)]\n        delta = self.implement_moves(moves, toleration=toleration, lower_tol=lower_tol)\n        return delta\n        \n\n    def implement_moves(self, moves, toleration=0, lower_tol=-9999):\n        _occ = self.occ.copy()\n        _asm = self.asm.copy()\n        _families, _days = [], []\n        for move in moves:\n            f, d, n = move[0], move[1], self.Npp[move[0]]\n            _occ[ _asm[f] ] -= n\n            _occ[ d ] += n\n            _families.append(f)\n            _days.append( _asm[f] )\n            _days.append(d)\n            _asm[f] = d\n\n        delta, affected_days = self.compute_delta(_asm, _occ, _families, _days)\n\n        if delta < toleration and delta > lower_tol:\n            if ((toleration > 0) and (delta>0)) or (toleration==0): \n                self.found_a_move = True\n                self.score += delta \n                self.asm = _asm\n                self.occ = _occ\n                for f in _families: self.pre[f] = self.Pre_Table[f][_asm[f]]\n                for d in affected_days: self.acc[d] = self.get_acc_cost(d, occ_arr=_occ)\n                print('Delta', round(delta,3), '\\tScore', round(self.score, 4),  \n                      '\\tmax_occ', max(self.occ), '\\tmin_occ', min(self.occ), '\\tMode', self.mode)\n        return delta\n\n\n    def compute_delta(self, asm, occ, families, days):\n        a = datetime.datetime.now()\n        affected_days = days.copy()\n        affected_days += [d+1 for d in days if d!=99]\n        affected_days += [d-1 for d in days if d!=0]\n        days = list(set(affected_days)) # get unique\n        \n        delta_pre = 0\n        for f in families: \n            d = asm[f]\n            delta_pre = delta_pre + self.Pre_Table[f][d] - self.pre[f]\n\n        delta_acc = 0\n        for d in days: delta_acc = (delta_acc + self.get_acc_cost(d, occ_arr=occ) - self.acc[d])\n                \n        delta = self.w_pre * delta_pre + delta_acc \n        b = datetime.datetime.now()\n        c = b - a\n        self.cnt_moves += 1\n        self.total_time += c.microseconds\n        return delta, affected_days\n         \n    def embed_submission(self, submission_path):\n        self.asm = load_csv(submission_path)\n        self.asm = [i-1 for i in self.asm]\n        for f, d in enumerate(self.asm): \n            self.occ[d] += self.Npp[f]\n            self.rank[f] = int(self.Rank_Table[f][d])\n            \n    def get_family_info(self, f): \n        return self.asm[f], self.rank[f], self.Npp[f] # day assigned, choice rank, n_people\n    \n    def get_acc_cost(self, today, occ_arr=None):\n        if occ_arr is None: occ_arr = self.occ.copy()\n        if today==99: return (occ_arr[99]-125.0) \/ 400.0 * (occ_arr[99])**(0.5)\n        count_violation = 0\n        idx0 = occ_arr[today]\n        if idx0 < 125: \n            count_violation += abs(idx0-125)\n            idx0 = 125\n        if idx0 > 300: \n            count_violation += abs(idx0-300)\n            idx0 = 300\n\n        idx1 = occ_arr[today+1]\n        if idx1 < 125: \n            count_violation += abs(idx1-125)\n            idx1 = 125\n        if idx1 > 300: \n            count_violation += abs(idx0-300)\n            idx1 = 300            \n            \n        cost = self.Acc_Table[idx0-125][idx1-125] + self.mode*count_violation\n        return cost\n                \n","8ccda35c":"\nfilename = '..\/input\/santa777\/submission_76177.csv'\nS = Submission()\nS.embed_submission(filename)\nS.refresh_mode(mode=100)\nprint('Input score:', S.score)\n\n\nwhile S.score < 77777.77:\n    delta = S.shuffle_search(toleration=10)\n    \n    \nwhile S.score > 77777.77:\n    delta = S.shuffle_search(lower_tol=-2)\n\n    \nupper_tol = 0.5\nlower_tol = 0    \nwhile True:\n    delta = S.shuffle_search(toleration=upper_tol, lower_tol=lower_tol)\n    if S.score > 77777.77:\n        upper_tol = 0\n        lower_tol = -0.5\n    elif S.score < 77777.77:\n        upper_tol = 0.5\n        lower_tol = 0\n    if S.score >= 77777.77 and S.score <= 77777.7749: break\n    \n\nprint('Done! Score', S.score)\nsave_csv(S.asm, str(int(S.score))+'.csv')","54adf71a":"**Have fun!**","6509b95b":"Let's have some fun!\n\nSanta just requested me to write this notebook. This notebook will show how to calculate score incrementally, and help Santa achieve his ultimate desired cost: \n\n**77777.77**. \n\nHe loves this number so much and he said personally to me that no matter how low we can get, he is still willing to sacrifice some pocket money just to write that very beautiful number into his accountant notebook. I ask him why, then he confessed that winning a slot machine has been his dream for over 2000 years but never comes true!"}}