{"cell_type":{"cea08686":"code","6d5f7ec0":"code","aa745697":"code","545612a0":"code","e38b1c5f":"code","d2eeb181":"code","453bb8c4":"code","c4855efd":"code","c8c8301b":"code","3407b254":"code","6a47339d":"code","02b4f89b":"code","96ffc19c":"code","802fd25f":"code","b106a835":"code","87628ac1":"code","8b1ad8f7":"code","5ec0d98f":"code","10020de2":"code","37a6cda8":"code","0056d8b8":"code","75b74ec7":"markdown","0dd45708":"markdown","7295967b":"markdown","fd62b057":"markdown"},"source":{"cea08686":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt # to plot charts\n\nfrom sklearn.model_selection import train_test_split\n\nseed = 42\nnp.random.RandomState(seed)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6d5f7ec0":"# Kers modules\nfrom keras.optimizers import SGD\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Dense, Dropout, Conv2D, Flatten, MaxPool2D\nfrom keras.callbacks import EarlyStopping, History, LearningRateScheduler","aa745697":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df.head(5)","545612a0":"train_df.shape","e38b1c5f":"y = train_df.values[:, 0]\nX = train_df.values[:, 1:]\nX = X.reshape(-1, 28, 28, 1)","d2eeb181":"X.shape","453bb8c4":"y = to_categorical(y)\ny.shape","c4855efd":"validation_split = .3\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=validation_split, stratify=y, random_state=seed)","c8c8301b":"print(X_train.shape, y_train.shape)","3407b254":"print(X_val.shape, y_val.shape)","6a47339d":"model = Sequential()\n\nmodel.add(Conv2D(64, kernel_size=3, padding='same', strides=1, activation='relu', input_shape=(28, 28, 1)))\n\nmodel.add(Conv2D(64, kernel_size=3, padding='same', strides=1, activation='relu'))\n\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=2))\n\nmodel.add(Conv2D(128, kernel_size=3, padding='same', strides=1, activation='relu'))\n\nmodel.add(Conv2D(128, kernel_size=3, padding='same', strides=1, activation='relu'))\n\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=2))\n\nmodel.add(Conv2D(256, kernel_size=3, padding='same', strides=1, activation='relu'))\n\nmodel.add(Conv2D(256, kernel_size=3, padding='same', strides=1, activation='relu'))\n\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(2048, activation='relu'))\n\nmodel.add(Dropout(rate=0.15))\n\nmodel.add(Dense(1024, activation='relu'))\n\nmodel.add(Dropout(rate=0.15))\n\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","02b4f89b":"early_stopping_monitor = EarlyStopping(patience=5) # (min_delta=1e-3)\nannealing = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)","96ffc19c":"training = model.fit(X_train, y_train, epochs=50, validation_data=(X_val, y_val), batch_size=32, \n                     callbacks=[early_stopping_monitor, annealing])","802fd25f":"history = training.history\n\nsns.lineplot(x=range(len(history[\"acc\"])),y=history[\"acc\"], label=\"acc\")\nsns.lineplot(x=range(len(history[\"val_acc\"])),y=history[\"val_acc\"], label=\"val_acc\")","b106a835":"predict_df = pd.read_csv(\"..\/input\/test.csv\")\n\npredict_df.head(2)","87628ac1":"X_predict = predict_df.values\nX_predict = X_predict.reshape(-1, 28, 28, 1)","8b1ad8f7":"X_predict.shape","5ec0d98f":"plt.imshow(X_train[0].reshape(28, 28))","10020de2":"predictions = model.predict_classes(X_predict)\npredictions","37a6cda8":"predictions.shape","0056d8b8":"## create output\noutput = pd.DataFrame()\n\noutput[\"ImageId\"] = [i for i in range(1, predictions.shape[0]+1)]\noutput[\"Label\"] = predictions\n\noutput.to_csv(\"predictions_cnn_3.csv\", index=False)","75b74ec7":"**In this notebook I'm exploring ConvNN model**","0dd45708":"### Make Predictions","7295967b":"## Load & Prepare data","fd62b057":"## Build Network"}}