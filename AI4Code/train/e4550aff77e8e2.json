{"cell_type":{"fa41cf4c":"code","2c750d14":"code","67006d66":"code","593c8433":"code","f7625e04":"markdown","7853a4af":"markdown","d4ca4e44":"markdown","762841f5":"markdown"},"source":{"fa41cf4c":"import gc\nimport numpy as np\nimport pandas as pd\nimport datatable as dt\nfrom category_encoders import *\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom lightgbm import LGBMClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2c750d14":"%%time\ndf_train = dt.fread('..\/input\/song-popularity-prediction\/train.csv').to_pandas()\ndf_test  = dt.fread('..\/input\/song-popularity-prediction\/test.csv').to_pandas()\n\ndf_train.drop('id', axis=1, inplace=True)\ndf_test.drop('id', axis=1, inplace=True)\n\ndf_train['audio_mode'] = 1*df_train['audio_mode']\ndf_test['audio_mode'] = 1*df_test['audio_mode']\n\n# prepare dataframe for modeling\nX = df_train.drop(columns=['song_popularity']).copy()\ny = 1*df_train['song_popularity'].copy()\n\ncat_cols = ['key', 'audio_mode', 'time_signature']\n\nX['nan_count'] = X.isna().sum(axis=1)\ndf_test['nan_count'] = df_test.isna().sum(axis=1)\n\nX['std'] = X.std(axis=1)\ndf_test['std'] = df_test.std(axis=1)\n\nX.head()","67006d66":"n_splits=10\nkf = StratifiedKFold(n_splits=n_splits, random_state=42, shuffle=True)\n\ntrain_preds = np.zeros(len(X.index))\ntest_preds = np.zeros(len(df_test.index))\n\nlgb_params = {'objective': 'binary', 'metric': 'auc', 'boosting_type': 'gbdt', 'device_type': 'cpu', 'verbosity': -1, 'seed': 42,\n              'feature_pre_filter': False, 'reg_alpha': 0.012481431905466338, 'reg_lambda': 2.5204154937461038e-08, 'num_leaves': 4,\n              'colsample_bytree': 0.852, 'subsample': 1.0, 'subsample_freq': 0, 'min_child_samples': 20, 'num_iterations': 1000,\n              'early_stopping_round': 200, 'categorical_column': [5, 8, 11, 15, 16, 17]}\n\nfor i, (train_idx, test_idx) in enumerate(kf.split(X, y)):\n\n    x_train, x_val = X.iloc[train_idx].copy(), X.iloc[test_idx].copy()\n    y_train, y_val = y.iloc[train_idx].copy(), y.iloc[test_idx].copy()\n\n    for col in cat_cols:\n        enc = TargetEncoder(cols=[col])\n        x_train[f'{col}_target'] = enc.fit_transform(x_train[col], y_train)\n        x_val[f'{col}_target'] = enc.transform(x_val[col])\n        df_test[f'{col}_target'] = enc.transform(df_test[col])\n\n    model = LGBMClassifier(**lgb_params, n_jobs=4, silent=True)\n\n    model.fit(x_train, y_train,\n              eval_set=[(x_val, y_val)],\n              early_stopping_rounds=200,\n              verbose=0)\n\n    train_oof_preds = model.predict_proba(x_val)[:,1]\n    train_preds[test_idx] = train_oof_preds\n\n    print(f\"LGB - AUC = {roc_auc_score(y_val, train_oof_preds)}\")\n\n    test_oof_preds = model.predict_proba(df_test)[:,1]\n    test_preds += test_oof_preds \/ n_splits\n\nprint(f\"\\n--> Overall metrics for LGB\")\nprint(\": AUC = {}\\n\".format(roc_auc_score(y, train_preds)))","593c8433":"submission  = dt.fread('..\/input\/song-popularity-prediction\/sample_submission.csv').to_pandas()\nsubmission['song_popularity'] = test_preds\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","f7625e04":"## Create submission","7853a4af":"## Import libraries","d4ca4e44":"## Load data","762841f5":"## 10-fold evaluation"}}