{"cell_type":{"9e59cc6d":"code","797d3a1c":"code","df211e0b":"code","8a5ba765":"code","706fe191":"code","a161597e":"code","fae28023":"code","1038e86f":"code","09974e74":"code","f291e085":"code","1d7e7f89":"code","84afc480":"code","2ae69f6f":"code","44014a8d":"code","67c7a6b9":"code","5cfe4cf2":"code","adceb045":"code","121f4278":"code","893c8f02":"code","c74b19ae":"code","8ec2d207":"code","9ef43531":"code","7f09fa85":"code","0a18e38a":"code","75a780cb":"code","a5357782":"code","bdeb6d14":"code","4fd7d058":"code","b3771a9b":"code","48c8a2bf":"code","be77fcc9":"code","f1f3a126":"code","603d5be6":"code","f6d10b97":"code","fc3cd660":"code","7a2053a7":"code","412a92a5":"markdown","ec3eea02":"markdown","5e55e864":"markdown","7b1a8e5c":"markdown","75b57555":"markdown","fb2e6b7f":"markdown","a7287921":"markdown","ba7c109d":"markdown","7d0e1c67":"markdown"},"source":{"9e59cc6d":"import pandas as pd\nimport numpy as np","797d3a1c":"data=pd.read_csv('Preprocessing.csv')\ndata.head()","df211e0b":"data_origin= pd.get_dummies(data)\ndata_origin.head()\n#transfer ","8a5ba765":"from sklearn,preprocessing import Imputer\ndata[data='?']=np.nan # convert '?' to NaN\nprint(data.isnull().sum()) # the number of NaN\n#impute missing data","706fe191":"Customer= pd.read_csv('Logistics.csv')\nCustomer.head()\n# 1-FEMALE, 2-MALE, 3-UNKNOWN","a161597e":"Customer.info() #show lost value of attribute","fae28023":"Customer.describe()","1038e86f":"import matplotlib.pyplot as plt\nfig=plt.figure()\nfig.set(alpha = 0.2) # set fiture color\n\nCustomer.next_12mo_buyer_flg.value_counts().plot(kind=\"bar\")\nplt.title('Buyer_Flag in 12 months')\n#next 12 month buyer_flag","09974e74":"plt.subplot2grid((2,3),(0,0))\nplt.hist(Customer.NTH_ORDER, bins=100, color='red')\nplt.title('Nth Order')\nplt.ylabel('Amount')\nplt.xlim(0,50)\n# Nth Order\n\nplt.subplot2grid((2,3),(0,1),colspan=2)\nplt.hist(Customer.TENURE_IN_DAYS, bins=20, edgecolor='None', color='green')\nplt.title('Tenure')\n# Tenure in days\n\nplt.subplot2grid((2,3),(1,0))\nplt.scatter(Customer.next_12mo_buyer_flg, Customer.LIFETIME_REVENUE, color='orange')\nplt.title('Lifetime Revenue')\n# Lifetime Revenue\n\nplt.subplot2grid((2,3),(1,1))\nplt.scatter(Customer.next_12mo_buyer_flg, Customer.AVG_LAG)\nplt.title('Average Lag')\n# Average Lag\n\nplt.subplot2grid((2,3),(1,2))\nplt.scatter(Customer.next_12mo_buyer_flg, Customer.DPT, color='purple')\nplt.title('DPT')\n# Dollar per transaction","f291e085":"Customer.UPT[Customer.GENDER == 1].plot(kind='kde')   \nCustomer.UPT[Customer.GENDER == 2].plot(kind='kde')\nCustomer.UPT[Customer.GENDER == 0].plot(kind='kde')\nplt.xlabel('UPT')\nplt.ylabel('Condensity')\nplt.legend(('FEMALE','MALE','UNKNOWN'))\n# UPT with gender","1d7e7f89":"Customer_L = pd.read_csv('Logistics.csv')\nCustomer_L.head()","84afc480":"Customer_L.set_index('CUSTOMER_DIM_ID', inplace=True)\nCustomer_L.head()","2ae69f6f":"Customer_L=pd.DataFrame(Customer_L)\ny_L=Customer_L['next_12mo_buyer_flg']\nX_L=Customer_L.drop('next_12mo_buyer_flg', axis=1)\nX_L.head()","44014a8d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nX_train_L, X_test_L, y_train_L, y_test_L = train_test_split(X_L, y_L, test_size=0.2, random_state = 42)\nlogreg = LogisticRegression()\nlogreg.fit(X_train_L, y_train_L)\ny_pred_L = logreg.predict(X_test_L)\ny_pred_proba_L = logreg.predict_proba(X_test_L)","67c7a6b9":"\nX_test_L=pd.DataFrame(X_test_L)\nresult_L=pd.DataFrame(y_pred_proba_L)\nresult_L.columns = ['flag = 0', 'flag = 1']\nresult_L.index=X_test_L.index\ndf_out = pd.concat([X_test_L,result_L], axis=1)\ndf_out=df_out.sort_values(by='flag = 1')","5cfe4cf2":"df_out.head()","adceb045":"df_out.to_csv(\"Logistics_predictions.csv\")","121f4278":"logreg.score(X_test_L, y_test_L)","893c8f02":"from sklearn.metrics import roc_curve\ny_pred_proba_L = logreg.predict_proba(X_test_L)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test_L, y_pred_proba_L)","c74b19ae":"plt.plot([0,1], [0,1], 'k--')\nplt.plot(fpr, tpr, label = 'Logistic Regression')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression ROC Curve')\nplt.show()","8ec2d207":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test_L, y_pred_proba_L)\n# Larger area under ROC curve = better model","9ef43531":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nprint(confusion_matrix(y_test_L, y_pred_L))\nprint(classification_report(y_test_L, y_pred_L))\n\n# precision = TP\/(TP+FP)\n# recall=TP\/(TP+FN)\n\n\n# precision - fraction of retrieved instances that are relevant\n# recall - fraction of relevant instances that are retrieved\n# F1 score - measure of a test's accuracy\n# support - count of testes samples","7f09fa85":"Customer_K = pd.read_csv('K-Nearest Neighbors.csv', index_col=0)\nCustomer_K.head()\n\ny_K=Customer_K['next_12mo_buyer_flg'].values\nX_K=Customer_K.drop('next_12mo_buyer_flg', axis=1).values","0a18e38a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\nX_train_K, X_test_K, y_train_K, y_test_K= train_test_split(X_K, y_K, test_size=0.2, random_state=42, stratify=y_K) \nknn=KNeighborsClassifier(n_neighbors=4)\nknn.fit(X_train_K, y_train_K)\nknn.score(X_test_K, y_test_K)","75a780cb":"y_pred=knn.predict(X_test_K)\nprint(\"prediction:{}\".format(y_pred))","a5357782":"y_pred_proba=knn.predict_proba(X_test_K)\nprint(\"prediction:{}\".format(y_pred_proba))\nresult_K=DataFrame(y_pred_proba)\nresult_K.columns = ['flag = 0', 'flag = 1']\nresult_K.to_csv(\"KNeighbors_predictions_test.csv\", index=False) \n#Export file","bdeb6d14":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\ny=Customer_K['next_12mo_buyer_flg'].values\nX=Customer_K.drop('next_12mo_buyer_flg', axis=1).values\n\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42, stratify=y) \nreg_all = LinearRegression()\nreg_all.fit(X_train, y_train)\ny_pred = reg_all.predict(X_test)","4fd7d058":"reg_all.score(X_test, y_test)","b3771a9b":"from sklearn.model_selection import cross_val_score\ncv_scores = cross_val_score(reg_all, X_test, y_test, cv=5)\ncv_scores","48c8a2bf":"rfm = pd.read_csv('RFM Customer Value.csv', index_col='customer_dim_id')\nrfm.head()","be77fcc9":"quantiles = rfm.quantile(q=[0.25,0.5,0.75])\nquantiles = quantiles.to_dict()","f1f3a126":"segmented_rfm = rfm\n\n# The lowest recency, highest frequency and monetary amounts are our best customers\ndef RScore(x, p, d):\n    if x <=d[p][0.25]:\n        return 1\n    elif x <=d[p][0.5]:\n        return 2\n    elif x<=d[p][0.75]:\n        return 3\n    else:\n        return 4\n\ndef FMScore(x, p, d):\n    if x <=d[p][0.25]:\n        return 4\n    elif x <=d[p][0.5]:\n        return 3\n    elif x<=d[p][0.75]:\n        return 2\n    else:\n        return 1","603d5be6":"segmented_rfm['r_quartile'] = segmented_rfm['recency_days'].apply(RScore, args=('recency_days',quantiles,))\nsegmented_rfm['f_quartile'] = segmented_rfm['lifetime_orders'].apply(FMScore, args=('lifetime_orders',quantiles,))\nsegmented_rfm['m_quartile'] = segmented_rfm['lifetime_revenue'].apply(FMScore, args=('lifetime_revenue',quantiles,))\nsegmented_rfm.head()","f6d10b97":"# combine RFM score\nsegmented_rfm['RFMScore'] = segmented_rfm.r_quartile.map(str)  + segmented_rfm.f_quartile.map(str) + segmented_rfm.m_quartile.map(str)\nsegmented_rfm.head()","fc3cd660":"result = segmented_rfm[segmented_rfm['RFMScore']=='111'].sort_values('lifetime_revenue', ascending=False)\nresult.head()","7a2053a7":"result.to_csv('RFM_result.csv')","412a92a5":"### Linear Regression Model","ec3eea02":"# RFM Customer Value\n\n* Recency(R): recency_days\n* Frequency(F): lifetime_orders\n* Monetary Value: lifetime_revenue\n\n> https:\/\/cdn-images-1.medium.com\/max\/800\/1*MeXvFG4Ez0wStMDCXZyN-Q.png","5e55e864":"### K-Nearest Neighbors Model","7b1a8e5c":"# Shopping Flag and Probability model\n## Preprocessing Data","75b57555":"## Validation of Data\n#### ROC Curve - Threshold","fb2e6b7f":"#### 5-fold cross-validation","a7287921":"## Analysis","ba7c109d":"### Logistic Regression Model","7d0e1c67":"## Train and Test Data"}}