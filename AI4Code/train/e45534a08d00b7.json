{"cell_type":{"780fae1c":"code","ce763e63":"code","43c014bb":"code","0471fd60":"code","54e4ff52":"code","0bc39960":"code","858fc1c8":"code","fff19fc5":"code","86b2ec64":"code","71919bc1":"code","7e8ce2c4":"code","7b0506e1":"code","dfa5a8e6":"code","c9102fa2":"code","6e285576":"code","ccc0d619":"markdown"},"source":{"780fae1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ce763e63":"import pandas as pd\nimport tensorflow as tf\nimport numpy as np\nimport re\nimport seaborn as sns\nfrom wordcloud import WordCloud\n\nimport matplotlib.pyplot as plt","43c014bb":"class Sentiment:\n\n    def preprocessing(string):\n        emoji_pattern = re.compile(\"[\"\n        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n        u\"\\U0001F1F2-\\U0001F1F4\"  # Macau flag\n        u\"\\U0001F1E6-\\U0001F1FF\"  # flags\n        u\"\\U0001F600-\\U0001F64F\"\n        u\"\\U00002702-\\U000027B0\"\n        u\"\\U000024C2-\\U0001F251\"\n        u\"\\U0001f926-\\U0001f937\"\n        u\"\\U0001F1F2\"\n        u\"\\U0001F1F4\"\n        u\"\\U0001F620\"\n        u\"\\u200d\"\n        u\"\\u2640-\\u2642\"\n        \"]+\", flags=re.UNICODE)\n        \n        string = re.sub(r\"[^A-Za-z0-9(),!?\\'\\`]\", \" \", string)\n        string = re.sub(r\"\\'s\", \" \\'s\", string)\n        string = re.sub(r\"\\'ve\", \" \\'ve\", string)\n        string = re.sub(r\"n\\'t\", \" n\\'t\", string)\n        string = re.sub(r\"\\'re\", \" \\'re\", string)\n        string = re.sub(r\"\\'d\", \" \\'d\", string)\n        string = re.sub(r\"\\'ll\", \" \\'ll\", string)\n        string = re.sub(r\",\", \" , \", string)\n        string = re.sub(r\"!\", \" ! \", string)\n        string = re.sub(r\"\\(\", \" \\( \", string)\n        string = re.sub(r\"\\)\", \" \\) \", string)\n        string = re.sub(r\"\\?\", \" \\? \", string)\n        string = re.sub(r\"\\s{2,}\", \" \", string)\n        string = emoji_pattern.sub(r'', string)\n        return string.strip().lower()\n    \n    \n    def batch_iter(data, batch_data, num_epochs):\n        \n        data = np.array(data)\n        data_size = len(data)\n        num_batch_per_epoch = int(len(data) - 1\/ batch_size )+ 1\n        for epoch in range(num_epoch):\n            if shuffle:\n                shuffle_indices = np.random.permutation(np.arange(data_size))\n                shuffled_data = data[shuffle_indices]\n            else:\n                shuffled_data = data\n            for batch_num in range(num_batches_per_epoch):\n                start_index = batch_num * batch_size\n                end_index = min((batch_num + 1) * batch_size, data_size)\n                yield shuffled_data[start_index:end_index]\n                \n                \n    def load_data_and_labels(data, max_features, maximum_len):\n        \n        from keras.preprocessing.text import Tokenizer\n        from keras.preprocessing.sequence import pad_sequences\n        from keras.utils import to_categorical\n        \n        train = data.sample(frac = 1).reset_index(drop=True)\n        \n        \n\n        X = data['tweet'].apply(lambda x: Sentiment.preprocessing(x))\n        Y = to_categorical(data['label'].values)\n        tokenizer = Tokenizer(num_words=max_features)\n        tokenizer.fit_on_texts(list(X))\n        \n        X = tokenizer.texts_to_sequences(X)\n        X = pad_sequences(X, maxlen = maximum_len)\n        \n        \n        return X, Y\n        \n        \n        \n        \n        \n       \n    \n\n        ","0471fd60":"train_data = pd.read_csv(\"\/kaggle\/input\/twitter-sentiment-analysis-hatred-speech\/train.csv\", encoding = \"ISO-8859-1\")\n# positive = train_data[train_data['label']==0]\n# print(train_data[train_data['target']==2])\n\ntrain_data.head()","54e4ff52":"maximum_len = 300\nmax_features = 10000\n\nX_train, Y_train = Sentiment.load_data_and_labels(train_data, max_features, maximum_len)\nprint(X_train.shape)","0bc39960":"sns.countplot(train_data['label'])","858fc1c8":"negative = train_data[train_data['label']==0]\npositive = train_data[train_data['label']==1]\n                      ","fff19fc5":"wordcloud = WordCloud(max_font_size = 60, max_words = 600, background_color = \"black\").generate(str(negative))\nplt.imshow(wordcloud)","86b2ec64":"wordcloud = WordCloud(max_font_size = 60, max_words = 100, background_color = \"black\").generate(str(positive))\nplt.imshow(wordcloud)","71919bc1":"train_data[\"label\"].value_counts().plot(kind = 'pie', explode = [0,0.1], figsize = (6,6), autopct = '%1.1f%%', shadow = True)\n\nplt.ylabel(\"Negative and Positive\")\nplt.legend([\"positive\", \"negative\"])\nplt.show()","7e8ce2c4":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X_train, Y_train, test_size = 0.2, random_state = 42)","7b0506e1":"from keras.layers import Input, Dense, Embedding, Flatten\nfrom keras.layers import SpatialDropout1D\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D\nfrom keras.models import Sequential","dfa5a8e6":"model = Sequential()\n\n# Input \/ Embdedding\nmodel.add(Embedding(max_features, 150, input_length=maximum_len))\n\n# CNN\nmodel.add(SpatialDropout1D(0.2))\n\nmodel.add(Conv1D(32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\n\nmodel.add(Conv1D(64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\n\nmodel.add(Flatten())\n\n# Output layer\nmodel.add(Dense(2, activation='sigmoid'))","c9102fa2":"epochs = 5\nbatch_size = 32","6e285576":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=epochs, batch_size=batch_size, verbose=1)","ccc0d619":"At this point we are ready to feed the input to Keras Embedding layer as shown above.\n\n'input_dim' = the vocab size that we will choose\n\n'output_dim' = the number of dimensions we wish to embed into\n\n'input_length' = lenght of the maximum document\n\n\n\n"}}