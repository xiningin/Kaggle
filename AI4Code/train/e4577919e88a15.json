{"cell_type":{"176ce709":"code","b06ac4fd":"code","0a4f8973":"code","01ff7bf8":"code","9a3d7955":"code","2d6076ff":"code","f7862882":"code","b43bc2c9":"code","bf81fe06":"code","ecdcd0ca":"code","a111d392":"code","5880c885":"code","037f29b2":"code","1eccd5a0":"code","c3f385b7":"markdown","79735931":"markdown","a4f9c9db":"markdown","cd92d972":"markdown","066db27f":"markdown","366cce28":"markdown","ba8ef889":"markdown","d776f923":"markdown","6d2fcca7":"markdown","e1789515":"markdown"},"source":{"176ce709":"# Importando las Librerias\nimport pandas as pd\nfrom IPython.display import Image, HTML\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","b06ac4fd":"# Importing the dataset\nlistings = pd.read_csv('..\/input\/listings.csv', usecols = ['id', 'name', 'description'])\nlistings.head(10)","0a4f8973":"listings['name'] = listings['name'].astype('str')\nlistings['description'] = listings['description'].astype('str')","01ff7bf8":"name_corpus = ' '.join(listings['name'])\ndescription_corpus = ' '.join(listings['description'])","9a3d7955":"name_wordcloud = WordCloud(stopwords = STOPWORDS, background_color = 'white', height = 2000, width = 4000).generate(name_corpus)\nplt.figure(figsize = (16,8))\nplt.imshow(name_wordcloud)\nplt.axis('off')\nplt.show()","2d6076ff":"description_wordcloud = WordCloud(stopwords = STOPWORDS, background_color = 'white', height = 2000, width = 4000).generate(description_corpus)\nplt.figure(figsize = (16,8))\nplt.imshow(description_wordcloud)\nplt.axis('off')\nplt.show()","f7862882":"listings['content'] = listings[['name', 'description']].astype(str).apply(lambda x: ' \/\/ '.join(x), axis = 1)","b43bc2c9":"# Fillna\nlistings['content'].fillna('Null', inplace = True)","bf81fe06":"tf = TfidfVectorizer(analyzer = 'word', ngram_range = (1, 2), min_df = 0, stop_words = 'english')\ntfidf_matrix = tf.fit_transform(listings['content'])","ecdcd0ca":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","a111d392":"results = {}\nfor idx, row in listings.iterrows():\n    similar_indices = cosine_similarities[idx].argsort()[:-100:-1]\n    similar_items = [(cosine_similarities[idx][i], listings['id'][i]) for i in similar_indices]\n    results[row['id']] = similar_items[1:]","5880c885":"def item(id):\n    name   = listings.loc[listings['id'] == id]['content'].tolist()[0].split(' \/\/ ')[0]\n    desc   = ' \\nDescription: ' + listings.loc[listings['id'] == id]['content'].tolist()[0].split(' \/\/ ')[1][0:165] + '...'\n    prediction = name  + desc\n    return prediction\n\ndef recommend(item_id, num):\n    print('Recommending ' + str(num) + ' products similar to ' + item(item_id))\n    print('---')\n    recs = results[item_id][:num]\n    for rec in recs:\n        print('\\nRecommended: ' + item(rec[1]) + '\\n(score:' + str(rec[0]) + ')')","037f29b2":"recommend(item_id = 4085439, num = 5)","1eccd5a0":"recommend(item_id = 7021702, num = 5)","c3f385b7":"Iterar a trav\u00e9s de los elementos similares de cada art\u00edculo y almacenar los 100 m\u00e1s similares!","79735931":"> **Hagamos una predicci\u00f3n**\n\nCreamos dos funciones para mostrar los resultados de la recomendaci\u00f3n:\n\n1. Funci\u00f3n para obtener un nombre de elemento amigable y una descripci\u00f3n del campo de contenido, dado un ID de art\u00edculo\n\n1. Funci\u00f3n para leer los resultados del diccionario.","a4f9c9db":"Ahora, creamos una columna que contiene una combinaci\u00f3n de columnas de nombre y descripci\u00f3n que es importante para el sistema de recomendaci\u00f3n basado en contenido","cd92d972":"**Objetivo**\n\nAprender de los datos y recomendar a los usuarios las mejores habitaciones alrededor de Seattle, seg\u00fan las similitudes de contenido (name y description).\n\nBrindar m\u00e1s opciones de habitaciones y aumentar la personalizaci\u00f3n a los posibles hu\u00e9spedes","066db27f":"**Entrenando al recomendador**\n\nTF-IDF (Term Frequency - Inverse Document Frequency)\n\nCreamos una matriz TF-IDF de unigramas y bigramas para cada ID o sala. El par\u00e1metro \"stop words\" le dice al m\u00f3dulo TF-IDF que ignore palabras comunes en ingl\u00e9s como 'the', 'about', etc. TF-IDF analizar\u00e1 las descripciones, identificar\u00e1 frases distintas en la descripci\u00f3n de cada elemento y luego encontrar\u00e1 contenidos similares basado en esas frases. \n\nF\u00f3rmula:\n\n\ud835\udc64(\ud835\udc56,\ud835\udc57)=\u3016\ud835\udc61\ud835\udc53\u3017(\ud835\udc56,\ud835\udc57) x log\u2061(\ud835\udc41\/\u3016\ud835\udc51\ud835\udc53\u3017_\ud835\udc56 )\n\n\ud835\udc61\ud835\udc53\u3017_(\ud835\udc56,\ud835\udc57) = number of occurrences of i in j; \u3016\ud835\udc51\ud835\udc53\u3017_\ud835\udc56 = number of documents containing i; \ud835\udc41 = total number of documents","366cce28":"**Introducci\u00f3n**\n\nEste ejercicio se basa en el realizado: https:\/\/www.kaggle.com\/airbnb\/seattle\/downloads\/reviews.csv\/2\n\nEn este ejercicio, intentaremos implementar algoritmos de recomendaci\u00f3n (basados en contenido). Utilizaremos datos de listados de Airbnb en el \u00e1rea de Seattle. El motor aprender\u00e1 de:\n\n* id: ID de listados para cada habitaci\u00f3n alrededor de Seattle\n* name: El t\u00edtulo de los listados de habitaciones\n* description: Detalles dados por el anfitri\u00f3n para describir sus habitaciones.","ba8ef889":"Finalmente, intentamos colocar una identificaci\u00f3n de los datos de los listados y la cantidad de recomendaciones para mostrar.","d776f923":"**An\u00e1lisis exploratorio**\n\n\u00bfHay palabras que figuran m\u00e1s a menudo en el nombre y la descripci\u00f3n de los listados? \n\nVamos a averiguar si hay algunas palabras que aparecen con m\u00e1s frecuencia.\n","6d2fcca7":"Las palabras que aparecen con m\u00e1s frecuencia en el nombre o t\u00edtulo de los listados son: Seattle, Capitol Hill, View, Home, Cozy, etc. Obviamente, esto representa datos del \u00e1rea de Seattle con palabras comunes en los listados de salas. \n\nA diferencia de la descripci\u00f3n, aqu\u00ed algunas de las tapas ya son espec\u00edficas como: casa, hogar, apartamento, sala de estar, espacio. Son palabras t\u00edpicas para los anfitriones al describir sus listas.","e1789515":"**Similitud de Coseno**\n\nLa similitud de coseno calcula la similitud midiendo el \u00e1ngulo del coseno entre dos vectores. TF-IDF convierte los vectores a partir de los contenidos y esta medida identificar\u00e1 qu\u00e9 contenidos est\u00e1n m\u00e1s cerca uno del otro."}}