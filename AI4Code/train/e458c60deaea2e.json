{"cell_type":{"d4068101":"code","48dee9f6":"code","d2a71804":"code","07297f68":"code","9a723810":"code","a54dfc0b":"code","eca8a755":"code","fd973680":"code","3e31129b":"code","f69ce066":"code","52ddd1da":"code","a3428ffb":"code","1bfb03a6":"code","d83146bf":"code","bf076aba":"code","7988c7ac":"code","e37c0bf6":"code","0089c79f":"code","85c953b9":"code","1b973108":"code","56ed3afc":"code","893ea72d":"code","65dd9c57":"code","409254eb":"code","6b35d06d":"code","6f0a0dd2":"code","f8dbb5f5":"code","4b7ffc33":"code","3d0d8a35":"code","c07ad2e9":"code","d7cfca93":"code","5f89dd2d":"code","f91f3e05":"code","fe6cecdb":"code","f4f78844":"code","2b34063f":"code","9910e125":"code","2e361012":"code","114e2ba3":"code","0d21c1a1":"code","b1cba0bc":"code","10a926e3":"code","9a013626":"code","b74f28fb":"code","bab337a3":"code","a7c86f90":"code","b3f57ae8":"code","58ba3524":"code","26efccaf":"markdown","abd6bd5a":"markdown","55f2771c":"markdown","df99d182":"markdown","3d99200e":"markdown","d3b8250a":"markdown","d271a613":"markdown","9ffc3ef5":"markdown"},"source":{"d4068101":"# All import statements\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\nimport re\nimport nltk\nfrom nltk.corpus import stopwords","48dee9f6":"df = pd.read_csv('..\/input\/crowdflower\/train.csv')\ndf.head()","d2a71804":"df.shape","07297f68":"df.median_relevance.value_counts()[-1::-1]\n","9a723810":"df.median_relevance.value_counts()\nx = range(4)\ny = df.median_relevance.value_counts()[-1::-1]\n","a54dfc0b":"ax = df.median_relevance.value_counts()[-1::-1].plot(kind='bar',color=['C0', 'C1', 'C2','C3'])\nfor i,j in zip(x,y):\n    print(i,j)\n    plt.annotate(str(round(j\/df.shape[0]*100,2))+'%', xy=(i,j), ha='center', va='bottom')\nplt.title('Bar plot of the target values')\nplt.xlabel('Target values')\nplt.show()","eca8a755":"ax = missingno.matrix(df)","fd973680":"print('Percentage of points that are having missing values',round(sum(df.product_description.isna())\/df.shape[0]*100,2),'%')","3e31129b":"# I cannot just drop the 24.06% of the points randomly.\n# I will fill the missing values with an empty string\ndf.product_description.fillna('',inplace=True)","f69ce066":"# Just confirming if there are any more NAN values.\ndf.info()","52ddd1da":"y = df['query'].value_counts().tolist()","a3428ffb":"y  = sorted(y,reverse=True)\nx = range(len(y))\nplt.bar(x,y)\nplt.ylabel('Count')\nplt.xlabel('Category')\nplt.title('Bar plot of the query text categories and the count')\nplt.show()","1bfb03a6":"df['query'].value_counts()","d83146bf":"y  = df.product_title.value_counts()","bf076aba":"out = sum(df.product_title.value_counts()>1)\nprint('{} product titles are repeated more than once'.format(out))","7988c7ac":"out = sum(df.product_title.value_counts()==1)\nprint('{} product titles occured only once'.format(out))\nprint('Which is {}% of total data'.format(round(out\/df.shape[0]*100,2)))","e37c0bf6":"print('Max length of product title is',max(df.product_title.str.len()))","0089c79f":"print('Min length of product title is',min(df.product_title.str.len()))","85c953b9":"product_title_len = df.product_title.str.len()","1b973108":"plt.plot(sorted(product_title_len))","56ed3afc":"product_title_len.plot.kde()","893ea72d":"sns.kdeplot(\n    data=product_title_len,\n    cumulative=True\n)","65dd9c57":"for i in range(0,100,10):\n    print('{}th percentile value is {}'.format(i,np.percentile(product_title_len,i)))","409254eb":"for i in range(90,100,1):\n    print('{}th percentile value is {}'.format(i,np.percentile(product_title_len,i)))","6b35d06d":"start = 99\nfor i in range(10):    \n    print('{:.1f}th percentile value is {:.1f}'.format(start,np.percentile(product_title_len,start)))\n    start+=0.1","6f0a0dd2":"out= sum(product_title_len>145)\nprint('{} product titles have length>145 i.e greater than 99.8 percentile'.format(out))\n","f8dbb5f5":"sns.histplot(data = df, x = 'product_title_len', y = 'median_relevance')","4b7ffc33":"df['product_title_len'] = df.product_title.str.len()","3d0d8a35":"df.head()","c07ad2e9":"df['product_description_len'] = df.product_description.str.len()","d7cfca93":"print('Max length of product title is',max(df.product_description_len))","5f89dd2d":"print('Min length of product title is',min(df.product_description_len))","f91f3e05":"plt.plot(sorted(df.product_description_len))","fe6cecdb":"df.product_description_len.plot.kde()","f4f78844":"sns.kdeplot(\n    data=df.product_description_len,\n    cumulative=True\n)","2b34063f":"for i in range(0,100,10):\n    print('{}th percentile value is {}'.format(i,np.percentile(df.product_description_len,i)))","9910e125":"for i in range(90,100,1):\n    print('{}th percentile value is {:.1f}'.format(i,np.percentile(df.product_description_len,i)))","2e361012":"start = 99\nfor i in range(10):    \n    print('{:.1f}th percentile value is {:.1f}'.format(start,np.percentile(df.product_description_len,start)))\n    start+=0.1","114e2ba3":"start = 99.9\nfor i in range(10):    \n    print('{:.2f}th percentile value is {:.1f}'.format(start,np.percentile(df.product_description_len,start)))\n    start+=0.01","0d21c1a1":"# we can truncate sentneces of length>10,000 as 99.96% of the sentences have length <99.97 percentile","b1cba0bc":"out= sum(df.product_description_len>10**3)\nprint('{} product titles have length>145 i.e greater than 99.96 percentile'.format(out))\n","10a926e3":"sns.histplot(data = df, x = 'product_description_len', y = 'median_relevance')","9a013626":"def check_html(series):\n    count = 0\n    for item in series:\n        if(bool(BeautifulSoup(item, \"html.parser\").find())):\n            count+=1\n            \n    return count\n    ","b74f28fb":"start = datetime.now()\ncheck_html(df['query'])\nend = datetime.now()\nprint('Time take to run this cell is',end-start)","bab337a3":"start = datetime.now()\ncheck_html(df['product_title'])\nend = datetime.now()\nprint('Time take to run this cell is',end-start)","a7c86f90":"start = datetime.now()\ncheck_html(df['product_description'])\nend = datetime.now()\nprint('Time take to run this cell is',end-start)","b3f57ae8":"df.loc[df.id==290]","58ba3524":"## Data Analysis of the feature 'Query'","26efccaf":"## Data Analysis of the feature 'Query'","abd6bd5a":"#### Analysis of Query text\n\n1. Total 261 unique categories\n2. Most of the categories are repeated in the range 30-50 times\n3. Wireless mouse is the most common query occuring 113 times in the data\n4. Dollhouse bathtub was present the least times in the data - 8 times","55f2771c":"## Check for HTML values in each of the text column","df99d182":"#### We cannot draw any analysis based on the product title length as all the classes are overlapping","3d99200e":"## Analysis:\n\n1. Data is very imbalanced\n    1. Most of the datapoints are from class - 4\n    2. Very few datapoints belong to class - 1","d3b8250a":"## Understanding about the train data\n\n1. Id \n2. Query -- Text about the query.\n3. Product_title -- Text about the title of the product.\n4. Prodcut_description -- Text about the product description.\n5. Median_relevance -- Median relevance score given by 3 raters\n6. relevance_variance -- Variance of the relevant scores given by these three raters. \n\nThere are 10158 training data points.\n","d271a613":"## Analysis of the feature 'Product title'","9ffc3ef5":"## EDA Product Description"}}