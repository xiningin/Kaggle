{"cell_type":{"bd84eff2":"code","83aecb0d":"code","0594d58e":"code","ddd533e0":"code","d9a8c703":"code","6ea77717":"code","32ea49de":"code","994e1620":"code","dd7aebbd":"code","629060a4":"code","03bedc87":"code","8e334672":"code","2b892a38":"code","167f9ac3":"code","56bc7e5f":"code","9a4f53ba":"code","a689fecd":"code","8eccd963":"code","bde53c1d":"code","70e9b6fe":"code","22817118":"code","79f5d1b6":"code","f27bdbcf":"code","7bb6b6f2":"code","05fcd816":"code","ebfdde1c":"code","6981f247":"code","bea0925a":"code","6ce1c31e":"code","fec93214":"code","420df26d":"code","4393b149":"code","822c8261":"code","dd09d94f":"code","afff2f49":"code","a698982b":"code","c203aba7":"code","4e4a604d":"code","e4a59279":"code","9e0cb5d8":"code","4b3df610":"code","44565612":"code","4c5b0846":"markdown","8dafeb44":"markdown","fd22374d":"markdown","c8d62b08":"markdown","ea5cceb7":"markdown","87ed3bae":"markdown","30908393":"markdown","394b25b5":"markdown","940608a9":"markdown","daeb36a9":"markdown","f2227e27":"markdown","6a769944":"markdown","40a09983":"markdown","3ab86fba":"markdown","3c163f26":"markdown","677e03ea":"markdown","76bcdf5e":"markdown","fce410e6":"markdown","99f5ec41":"markdown","a3e08ce4":"markdown","a3aad3cc":"markdown","488d2153":"markdown"},"source":{"bd84eff2":"import pandas as pd\n\n# import dataset\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nprint(\"train shape:\", train.shape)\nprint(\"test shape:\", test.shape)","83aecb0d":"train.head()","0594d58e":"train.info()","ddd533e0":"train.describe()","d9a8c703":"train.isnull().sum()","6ea77717":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(color_codes=True)\n\n#Correlation map\ncorrmat = train.corr()\nplt.subplots(figsize=(16, 9))\nsns.heatmap(corrmat, vmax = 0.8, square=True)","32ea49de":"train['OverallQual'].unique()","994e1620":"train['OverallQual'].value_counts()","dd7aebbd":"train.groupby('OverallQual').count()","629060a4":"train[train['OverallQual']>9]","03bedc87":"# target value analysis\ntrain['SalePrice'].describe()","8e334672":"sns.distplot(train['SalePrice'], rug=True)","2b892a38":"print(\"Skewness: {:.2f}\".format(train['SalePrice'].skew()))\nprint(\"Kurtosis: {:.2f}\".format(train['SalePrice'].kurt()))","167f9ac3":"# select numberical features and categorical\nimport numpy as np\n\nnumberical_features=train.select_dtypes(include=[np.number])\ncategorical_features=train.select_dtypes(include=[np.object])\n\nlen(numberical_features.columns)","56bc7e5f":"# save ID and drop it from train\ntrain_ID=train['Id']\ntest_ID=test['Id']\ntrain.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","9a4f53ba":"test_ID","a689fecd":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.xlabel('GrLiveArea')\nplt.ylabel('SalePrice')\nplt.show()","8eccd963":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","bde53c1d":"from scipy import stats\n\nsns.distplot(train['SalePrice'] , fit= stats.norm);\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\n\n# plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\nplt.show()","70e9b6fe":"# apply log(1+x) to all elements of the column\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n\n# new distribution \nsns.distplot(train['SalePrice'] , fit= stats.norm);\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\nplt.show()","22817118":"# concatenate the train and test data\nn_train = train.shape[0]\nn_test = test.shape[0]\ny_train = train['SalePrice'].values\nall_data = pd.concat((train, test)).reset_index(drop = True)\nall_data.drop(['SalePrice'], axis = 1, inplace = True)\nall_data.shape","79f5d1b6":"all_data_na = (all_data.isnull().sum()\/len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending = False)\nmissing_data = pd.DataFrame({'missing ratio' : all_data_na})\nprint(len(missing_data))\nprint(missing_data)","f27bdbcf":"all_data['PoolQC'] = all_data['PoolQC'].fillna('None')\nall_data['MiscFeature'] = all_data['MiscFeature'].fillna('None')\nall_data['Alley'] = all_data['Alley'].fillna('None')\nall_data['Fence'] = all_data['Fence'].fillna('None')\nall_data['FireplaceQu'] = all_data['FireplaceQu'].fillna('None')\nall_data['LotFrontage'] = all_data.groupby('Neighborhood')['LotFrontage'].transform(\n    lambda x: x.fillna(x.median()))\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\nall_data['MasVnrType'] = all_data[\"MasVnrType\"].fillna('None')\nall_data['MasVnrArea'] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['Utilities'] = all_data['Utilities'].fillna('None')\n#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","7bb6b6f2":"# transforming some numerical variables that are really categorical\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","05fcd816":"from sklearn.preprocessing import LabelEncoder\n# categorical_features=train.select_dtypes(include=[np.object])\n# categorical_features.columns\nfrom sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))\nall_data.info()","ebfdde1c":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\nall_data.shape","6981f247":"numeric_features = all_data.dtypes[all_data.dtypes != \"object\"].index\nskewed_features = all_data[numeric_features].apply(lambda x: stats.skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_features})\nskewness","bea0925a":"skewness = skewness[abs(skewness) > 0.75]\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    all_data[feat] = boxcox1p(all_data[feat], lam)\nall_data[skewed_features]","6ce1c31e":"all_data = pd.get_dummies(all_data)\n\ntrain = all_data[:n_train]\ntest = all_data[n_train:]\ntrain.iloc[0]","fec93214":"from sklearn.model_selection import KFold, cross_val_score\n\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle = True, random_state = 42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, train.values, y_train, scoring = 'neg_mean_squared_error', cv = kf))\n    return rmse","420df26d":"from sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import Lasso\n\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\n\nscore = rmsle_cv(lasso)\nscore.mean()","4393b149":"from sklearn.kernel_ridge import KernelRidge\n\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\n\nscore = rmsle_cv(KRR)\nscore.mean()","822c8261":"from sklearn.linear_model import ElasticNet\n\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\nscore = rmsle_cv(ENet)\nscore.mean()","dd09d94f":"from sklearn.ensemble import GradientBoostingRegressor\n\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nscore = rmsle_cv(GBoost)\nscore.mean()","afff2f49":"import xgboost as xgb\n\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nscore = rmsle_cv(model_xgb)\nscore.mean()","a698982b":"import lightgbm as lgb\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n\nscore = rmsle_cv(model_lgb)\nscore.mean()","c203aba7":"from catboost import Pool, CatBoostRegressor, cv\n\nmodel_cat = CatBoostRegressor(iterations=2000,\n                              learning_rate=0.10,\n                              depth=3,\n                              l2_leaf_reg=4,\n                              border_count=15,\n                              loss_function='RMSE',\n                              verbose=200)\n# cv_cat = model_cat.fit(train, y_train)","4e4a604d":"from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\nclass StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n        \n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n    \n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","e4a59279":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR), meta_model = lasso)","9e0cb5d8":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","4b3df610":"# Training and Prediction\nstacked_averaged_models.fit(train.values, y_train)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\n\nmodel_xgb.fit(train, y_train)\nxgb_pred = np.expm1(model_xgb.predict(test))\n\nmodel_lgb.fit(train, y_train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\n\ncv_cat = model_cat.fit(train, y_train)\ncat_pred = np.expm1(model_cat.predict(test))\n\nensemble = stacked_pred*0.4 + xgb_pred*0.2 + lgb_pred*0.2 + cat_pred*0.2","44565612":"submission = pd.DataFrame()\nsubmission['Id'] = test_ID\nsubmission['SalePrice'] = ensemble\nsubmission.to_csv('submission.csv', index=False)","4c5b0846":"## 2.4 transform variables","8dafeb44":"### 3.2.4 Gradient Boosting Regression","fd22374d":"## 3.2 model","c8d62b08":"## 2.2 target variable log-transformation","ea5cceb7":"## 2.1 noise filtering","87ed3bae":"# 2. data preprocessing","30908393":"### 3.2.7 CatBoost","394b25b5":"## 2.5 label encoder","940608a9":"## 3.1 validation function","daeb36a9":"# 3. model deployment ","f2227e27":"## 2.3 impute missing values","6a769944":"### 3.2.3 Elatic Net Regression","40a09983":"### 3.2.6 LightGBM","3ab86fba":"# 1. data collection","3c163f26":"# 2.7 skew features","677e03ea":"## 2.6 add important feaures","76bcdf5e":"### 3.2.7 Stacking average models","fce410e6":"### 3.2.5 XGBoost","99f5ec41":"# 4. submission","a3e08ce4":"### 3.2.2 Kernel Ridge Regression","a3aad3cc":"### 3.2.1 LASSO","488d2153":"# 2.8 One-hot encode"}}