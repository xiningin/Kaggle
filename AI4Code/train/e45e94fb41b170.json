{"cell_type":{"d488e4b0":"code","5ae0d45d":"code","8d0e99f8":"code","013c7264":"code","6a0c13e7":"code","d5a1953e":"code","44831d2b":"code","cc9c76a8":"code","97682c29":"code","d58d8ce5":"code","21eac866":"code","05274bf7":"code","2444a832":"code","1c95cb7c":"code","6abbe4a8":"code","6de64d71":"code","2f11b836":"code","19571105":"code","e19d7a0d":"code","b5bc7581":"code","153d2531":"code","064179fe":"code","b003f9a4":"code","ceb5d6d9":"code","47f931f0":"code","3317da55":"code","fa4a9405":"code","f15571e0":"code","7cac1a0f":"code","4d8f56e9":"code","1dfb95f0":"code","cba0aad5":"code","32b3bf07":"code","4a796742":"code","be18e7e3":"code","0ab05917":"code","4c408e3c":"code","cb2d20de":"code","b17b2da4":"code","71ad1454":"code","7869c6ef":"code","0301a4c4":"code","f9f752c2":"code","99e325aa":"code","5efa757f":"code","5b2d6ee6":"code","6f60ff43":"code","e863a545":"code","a1eb0477":"code","1bc4ee04":"code","bf9c8fa2":"code","eda314fa":"code","38738282":"code","66e9d2a3":"code","51dccca4":"code","e924455f":"code","386ad36b":"code","10087bc2":"code","9948c0e4":"code","89d87678":"code","b2c6b4ce":"code","c43d320a":"code","312006bb":"code","4c79299f":"code","079d792e":"code","8b5a8990":"code","cf72471e":"code","52b99c85":"code","3c8bc721":"code","b054be43":"code","715042ad":"code","5c548852":"code","f3740793":"code","cbf0c92d":"code","07a3e304":"code","9460763f":"code","c6e21c81":"code","f68ed12a":"code","97712942":"code","443e58a4":"code","a38e3762":"code","47f40cc4":"code","15caecfa":"code","95ffa2cb":"code","fa941b85":"code","99d24089":"code","1ce905d1":"code","bbf46671":"code","ccc0b600":"code","255e3294":"code","e5a53d17":"code","343c4c11":"code","ef3ce353":"code","bc3009b0":"code","cc031fb7":"code","c949a688":"code","0c1b160d":"code","cd880e5f":"code","e3a7e886":"code","8e46974b":"code","f0ed1f73":"code","74202193":"code","b67ce017":"code","7aa3e0d3":"code","09252e6a":"code","80a329f0":"code","0ea25c3e":"code","75981d85":"code","e95fa873":"markdown","2701fa2b":"markdown","1cb77a7e":"markdown","36f4a37e":"markdown","df122952":"markdown","dda29075":"markdown","5acc5679":"markdown","3a118a37":"markdown"},"source":{"d488e4b0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport csv\nimport seaborn as sns\nfrom nltk.stem.porter import PorterStemmer\nporter = PorterStemmer()","5ae0d45d":"train = pd.read_csv(\"..\/input\/stumbleupon\/train.tsv\", delimiter=\"\\t\")\ntest = pd.read_csv(\"..\/input\/stumbleupon\/test.tsv\", delimiter=\"\\t\")\nsample = pd.read_csv(\"..\/input\/stumbleupon\/sampleSubmission.csv\")","8d0e99f8":"train.info()","013c7264":"test.info()","6a0c13e7":"test.info()","d5a1953e":"train.head(2)","44831d2b":"test.head(2)","cc9c76a8":"sample.head(2)","97682c29":"train.columns","d58d8ce5":"train.head(1).loc[0]","21eac866":"list(zip(train.columns, train.dtypes, train.nunique()))","05274bf7":"\"\"\"\nobject columns\n\nurl\nboilerplate\nalchemy_category        14\nalchemy_category_score\nis_news                 2\nnews_front_page         3\n\"\"\"","2444a832":"train.head(2).url","1c95cb7c":"train.head(2).boilerplate","6abbe4a8":"train.head(2).alchemy_category","6de64d71":"train.head(2).alchemy_category_score","2f11b836":"train.head(2).is_news","19571105":"train.head(2).news_front_page","e19d7a0d":"#url\n#boilerplate\n#alchemy_category_score","b5bc7581":"train.head(2).boilerplate[0].split(\":\")[1]","153d2531":"train[\"boilerplate_str\"]=train.boilerplate.apply(lambda x:x.split(\":\")[1])\ntest[\"boilerplate_str\"]=test.boilerplate.apply(lambda x:x.split(\":\")[1])","064179fe":"train.drop('boilerplate', inplace=True, axis=1)\ntest.drop('boilerplate', inplace=True, axis=1)","b003f9a4":"train.shape, test.shape","ceb5d6d9":"train.head(2)","47f931f0":"train.alchemy_category_score[train.alchemy_category_score==\"?\"] =0","3317da55":"test.alchemy_category_score[test.alchemy_category_score==\"?\"] =0","fa4a9405":"train.alchemy_category_score","f15571e0":"train.alchemy_category_score= train.alchemy_category_score.apply(lambda x:float(x))\ntest.alchemy_category_score=test.alchemy_category_score.apply(lambda x:float(x))","7cac1a0f":"train.alchemy_category_score","4d8f56e9":"list(zip(train.columns, train.dtypes, train.nunique()))","1dfb95f0":"train.select_dtypes(['object'])","cba0aad5":"y = train.label\ntrain.drop('label', axis=1, inplace=True)","32b3bf07":"train.shape, test.shape","4a796742":"\"\"\"\nnow we have three text categories\nalchemy_category        14\nis_news                 2\nnews_front_page         3\n\n\"\"\"\ndummies_col = ['alchemy_category','is_news','news_front_page']","be18e7e3":"train[dummies_col]","0ab05917":"train['flage'] ='train'\ntest['flage'] ='test'","4c408e3c":"train.shape, test.shape","cb2d20de":"dataset_1 = pd.concat([train, test], axis= 0)","b17b2da4":"pd.get_dummies(dataset_1['alchemy_category'],drop_first=True)","71ad1454":"dataset_1.shape","7869c6ef":"dataset_1.head()","0301a4c4":"dataset_1=pd.get_dummies(dataset_1, columns = dummies_col)","f9f752c2":"dataset_1.shape","99e325aa":"dataset_1.head(2)","5efa757f":"dataset_1.columns","5b2d6ee6":"train.shape, test.shape","6f60ff43":"train = dataset_1[dataset_1.flage=='train']\ntest = dataset_1[dataset_1.flage=='test']","e863a545":"train.shape, test.shape","a1eb0477":"train.select_dtypes(['object'])","1bc4ee04":"train.drop('flage', axis=1, inplace=True)\ntest.drop('flage', axis=1 , inplace=True)","bf9c8fa2":"train.shape, test.shape","eda314fa":"train['label'] = y","38738282":"train.shape, test.shape","66e9d2a3":"zone1_train= train[['urlid','url']]\nzone1_test= test[['urlid','url']]","51dccca4":"zone1_train.url[0]","e924455f":"zone1_train.url[0].replace(\"\/\",\" \")","386ad36b":"import string\nstring.punctuation","10087bc2":"from nltk.corpus import stopwords\n#stopwords.words('english')","9948c0e4":"def text_process(mess):\n    mess=mess.replace(\"\/\",\" \")\n    mess = mess.replace(\"-\" ,\" \")\n    nopunc = [char for char in mess if char not in string.punctuation]\n    nopunc = \"\".join(nopunc)\n    return [porter.stem(word) for word in nopunc.split() if word.lower() not in stopwords.words('english')]","89d87678":"text_process(zone1_train.url[0])","b2c6b4ce":"zone1_train.url[0]","c43d320a":"from sklearn.feature_extraction.text import CountVectorizer\nbow_transformer = CountVectorizer(analyzer = text_process)\nbow_transformer.fit(zone1_train['url'])","312006bb":"#bow_transformer.vocabulary_","4c79299f":"messages_bow_train = bow_transformer.transform(zone1_train['url'])\nmessages_bow_test = bow_transformer.transform(zone1_test['url'])","079d792e":"(messages_bow_train.todense() != 0).sum()","8b5a8990":"messages_bow_train.shape","cf72471e":"#","52b99c85":"from sklearn.feature_extraction.text import TfidfTransformer","3c8bc721":"tfidf_transformer = TfidfTransformer()\ntfidf_transformer.fit(messages_bow_train)\ntfidf4_train = tfidf_transformer.transform(messages_bow_train)\ntfidf4_test = tfidf_transformer.transform(messages_bow_test)","b054be43":"(tfidf4_train.todense() != 0).sum()","715042ad":"d1 = pd.DataFrame(tfidf4_train.todense())\nd1","5c548852":"d2 = pd.DataFrame(tfidf4_test.todense())\nd2","f3740793":"train=pd.concat([train, d1], axis= 1)\ntest=pd.concat([test, d2], axis= 1)","cbf0c92d":"train.shape, test.shape","07a3e304":"zone2_train= train[['urlid','boilerplate_str']]\nzone2_test= test[['urlid','boilerplate_str']]","9460763f":"def text_process2(mess):\n    nopunc = [char for char in mess if char not in string.punctuation]\n    nopunc = \"\".join(nopunc)\n    return [porter.stem(word) for word in nopunc.split() if word.lower() not in stopwords.words('english')]","c6e21c81":"text_process2(zone2_train.boilerplate_str[0])","f68ed12a":"zone2_train.boilerplate_str[0]","97712942":"from sklearn.feature_extraction.text import CountVectorizer\nbow_transformer = CountVectorizer(analyzer = text_process2)\nbow_transformer.fit(zone2_train['boilerplate_str'])","443e58a4":"messages_bow_train = bow_transformer.transform(zone2_train['boilerplate_str'])\nmessages_bow_test = bow_transformer.transform(zone2_test['boilerplate_str'])","a38e3762":"(messages_bow_train.todense() != 0).sum()","47f40cc4":"tfidf_transformer = TfidfTransformer()\ntfidf_transformer.fit(messages_bow_train)\ntfidf5_train = tfidf_transformer.transform(messages_bow_train)\ntfidf5_test = tfidf_transformer.transform(messages_bow_test)","15caecfa":"(tfidf5_train.todense() != 0).sum()","95ffa2cb":"d3 = pd.DataFrame(tfidf5_train.todense())\nd4 = pd.DataFrame(tfidf5_test.todense())","fa941b85":"train.shape, test.shape","99d24089":"train.head(2)","1ce905d1":"test.head(2)","bbf46671":"list(train.columns)[-2:],list(test.columns)[-2:]","ccc0b600":"train=pd.concat([train, d3], axis= 1)\ntest=pd.concat([test, d4], axis= 1)","255e3294":"train.shape, test.shape","e5a53d17":"train.select_dtypes(['object'])","343c4c11":"train.drop('url', axis=1, inplace=True)\ntest.drop(\"url\", axis=1, inplace=True)\n\ntrain.drop('boilerplate_str', axis=1, inplace=True)\ntest.drop(\"boilerplate_str\", axis=1, inplace=True)","ef3ce353":"train.shape, test.shape","bc3009b0":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split","cc031fb7":"y = train.label\nX = train.drop(\"label\" , axis=1)","c949a688":"from sklearn.decomposition import PCA","0c1b160d":"pca = PCA(n_components= 2)\npca.fit(X)\nX = pca.transform(X)\ntest1 = pca.transform(test)","cd880e5f":"X.shape, y.shape, test1.shape","e3a7e886":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","8e46974b":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","f0ed1f73":"from sklearn.metrics import confusion_matrix, classification_report\n","74202193":"model = svm.SVC(gamma='scale',kernel='sigmoid')\nmodel.fit(X_train, y_train)\ntrain_pred=model.predict(X_train)\ntest_pred = model.predict(X_test)\nprint(\"Evaluate for train\")\nprint(confusion_matrix(y_train, train_pred))\nprint(classification_report(y_train, train_pred))\nprint(\"-\"*40)\nprint(\"Evaluate for test\")\nprint(confusion_matrix(y_test, test_pred))\nprint(classification_report(y_test, test_pred))","b67ce017":"sns.heatmap(confusion_matrix(y_test, test_pred))","7aa3e0d3":"model = svm.SVC(gamma='scale',kernel='rbf')\nmodel.fit(X_train, y_train)\ntrain_pred=model.predict(X_train)\ntest_pred = model.predict(X_test)\nprint(\"Evaluate for train\")\nprint(confusion_matrix(y_train, train_pred))\nprint(classification_report(y_train, train_pred))\nprint(\"-\"*40)\nprint(\"Evaluate for test\")\nprint(confusion_matrix(y_test, test_pred))\nprint(classification_report(y_test, test_pred))","09252e6a":"sns.heatmap(confusion_matrix(y_test, test_pred))","80a329f0":"# model = svm.SVC(gamma='scale', kernel='linear')\n# model.fit(X_train, y_train)\n# train_pred=model.predict(X_train)\n# test_pred = model.predict(X_test)\n# print(\"Evaluate for train\")\n# print(confusion_matrix(y_train, train_pred))\n# print(classification_report(y_train, train_pred))\n# print(\"-\"*40)\n# print(\"Evaluate for test\")\n# print(confusion_matrix(y_test, test_pred))\n# print(classification_report(y_test, test_pred))","0ea25c3e":"sample.label=model.predict(test1)","75981d85":"sample.to_csv(\"sub1.csv\",index=False)","e95fa873":"## So no we have two columns for text classification Let's use zone indexing","2701fa2b":"## PCA close","1cb77a7e":"## gamma='scale',kernel='rbf'","36f4a37e":"## PCA","df122952":"## gamma='scale', kernel='linear'","dda29075":"## All set let's use SVM","5acc5679":"# Zone2","3a118a37":"## default SVM"}}