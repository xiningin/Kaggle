{"cell_type":{"80c87c9e":"code","6611d328":"code","5b32db40":"code","c21c327d":"code","85480fe4":"code","0776690a":"code","efc50fe2":"code","fcf6b02e":"code","50b0bb9b":"code","0699659b":"code","1b69d5de":"code","0b23b437":"code","151c4b92":"code","f42112cc":"code","fd303c6e":"code","57d52fe7":"code","a4b31876":"code","8efb87a0":"code","d3252a26":"markdown","aeae87f4":"markdown","d828a9e4":"markdown","541987ca":"markdown","73db6140":"markdown","0a932c4e":"markdown","88b45d06":"markdown","fd753297":"markdown","28310c1b":"markdown","3ffce8d4":"markdown"},"source":{"80c87c9e":"# bibliotecas utilizadas\nimport numpy as np\nimport pandas as pd\nimport sklearn\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import preprocessing","6611d328":"# lendo as bases de treino e teste\n\nbase_treino =  pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\", header=0, sep=',', na_values=\"?\").dropna()\n\nbase_teste  =  pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\", header=0, sep=',', na_values=\"?\")","5b32db40":"# printa a base de treino a ser utilizada\n\nbase_treino","c21c327d":"# printa a base de teste a ser utilizada\n\nbase_teste","85480fe4":"# cria\u00e7\u00e3o de fun\u00e7\u00e3o auxiliar para a an\u00e1lise explorat\u00f3ria\n\ndef gerar(nome_coluna,tipo,retornar = False):\n    features = base_treino[nome_coluna].unique()  # essa primeira parte ordena a primeira linha da base, onde\n    features.sort()                               # pego o nome da coluna para refer\u00eancia posterior\n    prop_maior_50k = [None]*len(features)  \n    for i,j in enumerate(features):\n        maior_50k = (base_treino[(base_treino[nome_coluna] == j) \n                  & (base_treino['income']=='>50K')]['fnlwgt']).sum()\n        menor_50k = (base_treino[(base_treino[nome_coluna] == j) \n                  & (base_treino['income']=='<=50K')]['fnlwgt']).sum()\n\n        prop_maior_50k[i] = maior_50k\/(maior_50k + menor_50k)     # encontra uma rela\u00e7\u00e3o de propor\u00e7\u00e3o entre\n                                                                  # maior_50k e menor_50k \n        # plotar os gr\u00e1ficos\n        if (tipo == 'pie'):\n            plt.pie([prop_maior_50k[i],1 - prop_maior_50k[i]])\n            plt.title(j,color='black')\n            plt.legend(['>50k','<=50k'])\n            plt.show()\n        if (tipo == 'line'):\n            plt.plot(features,prop_maior_50k, color = 'orange')\n            plt.xlabel(nome_coluna)\n            plt.ylabel('Maior que 50k proporcional a menos que 50k')\n        \n    if (retornar == True):\n        prop_maior_50k, features = zip(*sorted(zip(prop_maior_50k, features)))\n        return(dict(zip(features,prop_maior_50k)))\n            ","0776690a":"gerar('age',tipo='line')","efc50fe2":"gerar('education.num',tipo='line')","fcf6b02e":"gerar('hours.per.week',tipo='line')","50b0bb9b":"gerar('marital.status', tipo='pie')","0699659b":"gerar('occupation', tipo='pie')","1b69d5de":"gerar('workclass', tipo = 'pie')","0b23b437":"gerar('race', tipo='pie')","151c4b92":"gerar('relationship', tipo='pie')","f42112cc":"X_adult = base_treino[[\"age\",\"education.num\",\"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\nY_adult = base_treino['income']\n\n# pega os x vizinhos para o teste do classificador\nKNN_5  = KNeighborsClassifier(n_neighbors = 5)        \nKNN_50 = KNeighborsClassifier(n_neighbors = 50)\nKNN_100 = KNeighborsClassifier(n_neighbors = 100)\n\n# aplica o teste do classificador\nscore_5 = cross_val_score(KNN_5, X_adult, Y_adult, cv = 10)\nscore_50 = cross_val_score(KNN_50, X_adult, Y_adult, cv = 10)\nscore_100 = cross_val_score(KNN_100, X_adult, Y_adult, cv = 10)\n\nprint(' Score: 5 vizinhos pr\u00f3ximos')\nprint(score_5)\n\nprint('\\n Score: 50 vizinhos pr\u00f3ximos')\nprint(score_50)\n\nprint('\\n Score: 100 vizinhos pr\u00f3ximos')\nprint(score_100)","fd303c6e":"def ord_features(b_treino,b_teste,lista_features):\n    b_teste.replace([np.inf, -np.inf, np.nan], 0, inplace = True)\n    b_teste.fillna(value = 0)      # transforma as lacunas vazias da base de teste em zeros\n    b_teste.loc[b_teste['workclass'] == 'Never-worked', 'workclass'] = 0   # seleciona a coluna de 'workclass'\n    for j in lista_features:\n        feature_income = gerar(j, tipo = None, retornar = True)    # vai trazer um 'zip' das features de acordo com o income >50k\n        for i in feature_income:\n            b_treino.loc[b_treino[j] == i, j] = feature_income[i]  # substitui os valores por uma propor\u00e7\u00e3o de >50k\/pop.\n            b_teste.loc[b_teste[j] == i, j]  = feature_income[i]\n    return (b_treino,b_teste)","57d52fe7":"lista_features = ([\"age\",\"education.num\",\"capital.gain\", \"capital.loss\",\n                     \"hours.per.week\",'workclass','marital.status','occupation',\n                     'relationship','race','sex','native.country'])\n\n(base_treino_modificado,base_teste_modificado) = ord_features(base_treino, base_teste, lista_features)\n\nX_adult = base_treino_modificado[lista_features]\nY_adult = base_treino_modificado['income']\n\nscore_50 = cross_val_score(KNN_50, X_adult, Y_adult, cv = 10)\n\nprint(score_50)","a4b31876":"KNN_50.fit(X_adult, Y_adult)\n\nX_base_teste = base_teste_modificado[lista_features]\n\nY_base_teste_precis\u00e3o = KNN_50.predict(X_base_teste)","8efb87a0":"prev = pd.DataFrame()\nprev[0] = base_teste.index\nprev[1] = Y_base_teste_precis\u00e3o\nprev.columns = ['Id', 'income']\nprev.head()\nprev.to_csv('previs\u00e3o.csv', index = False)","d3252a26":"**A partir de agora, ser\u00e1 feita uma ordena\u00e7\u00e3o das features de acordo com a influ\u00eancia de cada um para o classificador**\n\nA influ\u00eancia pode ser revista a partir dos gr\u00e1ficos acima.","aeae87f4":"Agora ser\u00e1 feito o treino com a base de treino","d828a9e4":"**A partir de agora ser\u00e3o apresentados os treinos referente aos classificadores KNN.**","541987ca":"Em seguida, os inputs e outputs dos gr\u00e1ficos mostrando a influ\u00eancia de cada indicador, a partir de cada coluna da base, .","73db6140":"Treino do KNN com valores num\u00e9ricos","0a932c4e":"Ser\u00e1 aplicada a fun\u00e7\u00e3o acima para determinar a classifica\u00e7\u00e3o para 50 vizinhos da base de treino.","88b45d06":"**Paulo V\u00edtor Pereira Rodrigues       n\u00baUSP: 11263234**","fd753297":"A primeira etapa \u00e9 ler as bases de treino e teste e j\u00e1 estabelecer alguns pequenos tratamentos origin\u00e1rios dos par\u00e2metros da leitura.","28310c1b":"A pr\u00f3xima etapa ser\u00e1 analisar a influ\u00eancia de cada indicador (coluna) e gerar alguns gr\u00e1ficos referentes aos dados presentes na base de treino.","3ffce8d4":"Como poder ser visto acima, entre os KNN testados, o que apresenta melhor score \u00e9 o de 50 vizinhos. "}}