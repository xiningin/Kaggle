{"cell_type":{"e21c7f3c":"code","3c2e209f":"code","a3db6392":"code","5ebd4501":"code","3b9650bb":"code","3aa031d3":"code","7e6d2076":"code","303638b2":"code","2dd1910e":"code","7d2f6ba7":"code","1927bf6a":"code","48d9e13d":"code","27738085":"code","2817f551":"code","d42dbd3e":"code","48f6b628":"code","10eed59b":"code","f399d6db":"code","d3d71d07":"code","32ca5fe3":"code","c535bce3":"code","ee1c9965":"code","6ca7a9b7":"code","fa0f66c8":"code","f546da0a":"code","fdd72e19":"code","0a895032":"code","8436f24d":"code","58fdfe90":"code","a1f76a3b":"code","ee679436":"code","a291863c":"code","69bd6297":"code","23053eb2":"code","c35d45fa":"code","d244d87e":"code","a1a5b4de":"code","88d3b02f":"code","72ed0dbb":"code","9bd53f6a":"code","9c5b8725":"code","cfd4accb":"code","ac148918":"code","86aae53d":"code","86b84b15":"code","c52f3352":"code","24ed27e4":"code","8de0ae58":"code","7598d74e":"code","bb1689c9":"code","02fa44b9":"code","991d4c46":"code","31ab186a":"code","f6d39096":"code","e76a729d":"code","77a521fd":"code","104c7816":"code","393d702b":"code","502567b1":"markdown","20883fda":"markdown","246addfe":"markdown","9e79336c":"markdown","4f74f9b1":"markdown","6bdf2530":"markdown","26265676":"markdown","2236a2b1":"markdown","ddc1b8d1":"markdown","2d676c11":"markdown","f67e2f62":"markdown","ddd82994":"markdown","8581c99a":"markdown","ad1579a9":"markdown","5b127441":"markdown","dedccf16":"markdown","7a9cba67":"markdown","c0c68f62":"markdown","9bde36fb":"markdown","67c1ee3b":"markdown","af747e13":"markdown","ee645810":"markdown","2302aa21":"markdown","61da1f1f":"markdown","8109dd0c":"markdown","31e88aab":"markdown","82518bda":"markdown","313b4cac":"markdown","020fe91a":"markdown","bfae9c55":"markdown","61c550a1":"markdown","9d11cba3":"markdown","0623e33c":"markdown","36cf79f0":"markdown","7238262f":"markdown","d596b14d":"markdown","623868b6":"markdown","d34fccdc":"markdown","fbd88fd0":"markdown","1cb266ee":"markdown","9fa854a2":"markdown","f11e3920":"markdown","e23184d1":"markdown"},"source":{"e21c7f3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c2e209f":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')","a3db6392":"tips_data = sns.load_dataset('tips')","5ebd4501":"tips_data.head()","3b9650bb":"tips_data.describe()","3aa031d3":"tips_data.dtypes","7e6d2076":"tips_data.info()","303638b2":"tips_data.columns","2dd1910e":"print(tips_data.sex.unique())\nprint(tips_data.day.unique())\nprint(tips_data.time.unique())\nprint(tips_data.smoker.unique())","7d2f6ba7":"tips_data.shape","1927bf6a":"tips_data.isnull().sum()","48d9e13d":"tips_data.iloc[2]","27738085":"tips_data.iloc[[2, 4, 6]]","2817f551":"tips_data.iloc[7:12]","d42dbd3e":"#indexing the dataframe using .loc\n\n#selecting the specific rows and column as user input(1-5 rows and 2nd and 4th cols)\ntips_data.loc[1:5, [\"sex\", \"smoker\"]]","48f6b628":"Q1 = tips_data.total_bill.quantile(0.25)\nQ3 = tips_data.total_bill.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","10eed59b":"tips_data.style.set_properties(**{'background-color': 'black', \n                           'color': 'green'})","f399d6db":"tips_data.style.highlight_min(axis=0)","d3d71d07":"tips_data.style.highlight_max(axis=0)","32ca5fe3":"cm = sns.light_palette(\"green\", as_cmap=True)\ntips_data.style.background_gradient(cmap=cm)","c535bce3":"tips_data.style.background_gradient(cmap=cm).highlight_min(axis=0, color='lightblue').highlight_max(axis=0, color='blue')","ee1c9965":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips_data, size=5)","6ca7a9b7":"#Data\nX = tips_data['total_bill']\nY = tips_data['tip']\n\n#scattering the plot\nplt.scatter(X, Y)\n\n#define labels for axis\nplt.xlabel('Total Bill', fontsize = 15)\nplt.ylabel('Tip', fontsize = 15)\n\n#show plot\nplt.show()","fa0f66c8":"#data\nX = tips_data['total_bill']\nY = tips_data['tip']\n\n#scattering the plot\n#s is the shape, c is the colour, aplha is for opacity(0 < alpha < 1)\nplt.scatter(X, Y, s=np.array(Y)**2, c=\"green\", alpha=0.8)\n\n#title\nplt.title('Scatter Plot', fontsize = 18)\n\n#define labels for axis\nplt.xlabel('Total Bill', fontsize = 15)\nplt.ylabel('Tip', fontsize = 15)\n\n#show plot\nplt.show()","f546da0a":"rng = np.random.RandomState(0)\ncolors = rng.rand(len(tips_data))\nsizes = 1000 * rng.rand(len(tips_data))\n\nplt.figure(figsize = (10, 5))\nx = tips_data['total_bill']\ny = tips_data['tip']\nplt.scatter(x, y, c=colors[:], s=sizes, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar();","fdd72e19":"sns.FacetGrid(tips_data, hue=\"time\", size=5) \\\n   .map(plt.scatter, \"total_bill\", \"tip\") \\\n   .add_legend()","0a895032":"sns.FacetGrid(tips_data, hue=\"time\", size=6) \\\n   .map(sns.kdeplot, \"total_bill\") \\\n   .add_legend()","8436f24d":"plt.hist(tips_data['total_bill'])","58fdfe90":"x1 = tips_data['total_bill']\nx2 = tips_data['tip']\nkwargs = dict(histtype='stepfilled', alpha=0.3)\n\nplt.hist(x1, **kwargs)\nplt.hist(x2, **kwargs)","a1f76a3b":"x = tips_data['total_bill']\ny = tips_data['tip']\nplt.hist2d(x, y, bins=30, cmap='Blues')\ncb = plt.colorbar()\ncb.set_label('Counts in Hist bin')","ee679436":"x = tips_data['total_bill']\ny = tips_data['tip']\nfig, ax = plt.subplots()\nax.plot(x, '-b', label='Total Bill')\nax.plot(y, '--r', label='Tip')\nax.axis('equal')\nleg = ax.legend();","a291863c":"fig, ax = plt.subplots()\n\nfor key, group in tips_data.groupby('time'):\n    group.plot('total_bill', 'tip', yerr='size', label=key, ax=ax)\n\nplt.show()","69bd6297":"set(tips_data['smoker'])","23053eb2":"tips_data.smoker.value_counts().plot(kind = 'bar', rot = 0)\nplt.show()","c35d45fa":"tips_data.smoker.value_counts().plot(kind=\"bar\", rot=0, color=\"green\")\n\nplt.text(x = -0.05, y = tips_data.smoker.value_counts()[1]+1, s = tips_data.smoker.value_counts()[1])\nplt.text(x = 0.98, y = tips_data.smoker.value_counts()[0]+2, s = tips_data.smoker.value_counts()[0])\n\n#define the title & labels\nplt.title(\"Bar Plot\", fontsize = 18)\nplt.xlabel(\"Smoker\", fontsize = 15)\nplt.ylabel(\"Count\", fontsize = 15)\n\nplt.show()","d244d87e":"tips_data.day.value_counts()","a1a5b4de":"#'autopct' displays the percentage upto the 1 decimal\n#'radiius' sets the radius of pie plot\nplt.figure(figsize = (10, 5))\nplt.pie(tips_data.day.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['Sat', 'Sun', 'Thur', 'Fri'])\n\nplt.show()","88d3b02f":"#eploded pie chart\nplt.figure(figsize = (10, 5))\nplt.pie(tips_data.day.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['Sat', 'Sun', 'Thur', 'Fri'], explode=[0,0,0,0.4])\n\nplt.show()","72ed0dbb":"#donut pie plot\nplt.pie(tips_data.day.value_counts(), autopct=\"%.1f%%\", radius=1.5, labels=['Sat', 'Sun', 'Thur', 'Fri'])\n\ncircle = plt.Circle((0,0), 0.5, color='white')\nplot = plt.gcf()\nplot.gca().add_artist(circle)\n\nplt.show()","9bd53f6a":"#plot the histogram\n\n#specify the bins(bar) for histogram\nplt.hist(tips_data['tip'], bins=5)\n\n#define labels and title\nplt.title(\"Histogram of Tips Data\", fontsize = 18)\nplt.xlabel(\"Tip\", fontsize = 15)\nplt.ylabel(\"Frequency\",fontsize = 15)\n\nplt.show()","9c5b8725":"# Box Plot -------->\n\nplt.boxplot(tips_data['total_bill'])\n\n#add labels for five number summary\nplt.text(x = 1.1, y=tips_data['total_bill'].min(), s='min')\nplt.text(x = 1.1, y=tips_data.total_bill.quantile(0.25), s='Q1')\nplt.text(x = 1.1, y=tips_data['total_bill'].median(), s='median(Q2)')\nplt.text(x = 1.1, y=tips_data.total_bill.quantile(0.75), s='Q3')\nplt.text(x = 1.1, y=tips_data['total_bill'].max(), s='max')\n\n#add the graph title and axes labels\nplt.title('Boxplot Of Total Bill Amount', fontsize = 18)\nplt.ylabel('Total Bill', fontsize = 15)\n\nplt.show()","cfd4accb":"plt.boxplot(tips_data['total_bill'])\n\n#add labels for five number summary\nplt.text(x = 1.1, y=tips_data['total_bill'].min(), s='min')\nplt.text(x = 1.1, y=tips_data.total_bill.quantile(0.25), s='Q1')\nplt.text(x = 1.1, y=tips_data['total_bill'].median(), s='median(Q2)')\nplt.text(x = 1.1, y=tips_data.total_bill.quantile(0.75), s='Q3')\nplt.text(x = 1.1, y=tips_data['total_bill'].max(), s='max')\n\n#add an arrow(annotate) to show the outliers\nplt.annotate('Outliers', xy=(0.97, 45), xytext=(0.7, 44), arrowprops=dict(facecolor=\"black\", arrowstyle=\"simple\"))\n\n#add the graph title and axes labels\nplt.title('Boxplot Of Total Bill Amount', fontsize = 18)\nplt.ylabel('Total Bill', fontsize = 15)\n\nplt.show()","ac148918":"# Strip Plot ------->\n\nsns.stripplot(y = 'tip', x = 'time', data = tips_data)\nplt.show()","86aae53d":"#strip plot with jitter to spread the points\nsns.stripplot(y = 'tip', x = 'time', data = tips_data, jitter=True)\nplt.show()","86b84b15":"#Swarm Plot----------->\n\nsns.swarmplot(y = 'tip', x = 'time', data = tips_data)\nplt.show()","c52f3352":"#swarm plot with adding another categorical variable 'day'\nsns.swarmplot(y = 'tip', x = 'time', data = tips_data, hue='day')\nplt.show()","24ed27e4":"# Violin Plot ----------->\n\nsns.violinplot(y = 'total_bill', x = 'day', data = tips_data)\nplt.show()","8de0ae58":"#set the figure size\nplt.figure(figsize=(8,5))\n\n#ploting the violin using split-True\nsns.violinplot(y = 'total_bill', x = 'day', data = tips_data, hue='sex', split=True)\nplt.show()","7598d74e":"X =[1]*50+[2]*100+[3]*60+[4]*40\n\nY = np.linspace(10,90,250)\n\nZ = (['A']*5+['B']*5+ ['C']*5+['D']*5+ ['E']*5+['F']*5+['A']*5+['B']*5+ ['C']*5+['D']*5)*5\n\ndata = pd.DataFrame({'X':X,'Y':Y,'Z':Z})\n\n#set the figure size\nplt.figure(figsize=(8,5))\n\nsns.violinplot(y = 'Y',x='X',data=data,hue = 'Z',split= False)\n\nplt.show()","bb1689c9":"sns.set(style='darkgrid')\nsns.lineplot(x='total_bill', y='tip', data=tips_data)","02fa44b9":"sns.lineplot(x=\"total_bill\", y=\"tip\",\n            hue=\"time\", style=\"time\",\n            markers=True, dashes=False, data=tips_data)","991d4c46":"# Pair Plot----------->\n\nplt.figure(figsize=(8,8))\nsns.pairplot(tips_data)\nplt.show()","31ab186a":"sns.pairplot(tips_data, vars=[\"total_bill\", \"tip\"], diag_kind=\"kde\",\n             plot_kws = {'alpha': 0.6, 's': 80, 'edgecolor': 'k'})","f6d39096":"# Distribution Plot -------->\nsns.distplot(tips_data['total_bill'])\nplt.show()","e76a729d":"#iterate the distplot() function over the time\n\n#list the time\ntime = ['Lunch', 'Dinner']\n\n#iterate through time\nfor i in time:\n    subset = tips_data[tips_data['time']==i]\n    \n#Draw the density plot\n#'hist'=False is not plot histogram\n#'kde = True' plots density curve\n    sns.distplot(subset['total_bill'], hist=False, kde=True,\n                kde_kws={'shade':True},\n                label=i)","77a521fd":"# Count Plot ----------->\n\n#set 'time' as a 'hue' parmeter\nsns.countplot(data = tips_data, x = 'day', hue = 'time')\nplt.show()","104c7816":"# Heat Map----------->\n\n#compute correlation\ncorr_matrix = tips_data.corr()\ncorr_matrix","393d702b":"#annot=True return the correlation values\nsns.heatmap(corr_matrix, annot=True)\nplt.show()","502567b1":"Thank you for taking time to look at my EDA","20883fda":"## Bar Plot:","246addfe":"## Heatmap:","9e79336c":"### Fetch first few data from dataset","4f74f9b1":"Columns in DataFrame","6bdf2530":"## Violin Plot:","26265676":"## Loading the dataset","2236a2b1":"## FacetGrid:","ddc1b8d1":"Scatter Plot using random colors","2d676c11":"## Distribution Plot:","f67e2f62":"Checking for Null Values","ddd82994":"## Line Plot:","8581c99a":"Set background color for min value in column containing numbers","ad1579a9":"## Hist Plot:","5b127441":"## Count Plot:","dedccf16":"## Box Plot:","7a9cba67":"## Scatter Plot:","c0c68f62":"Checking the DataType of each column","9bde36fb":"### Tips Dataset:\n* total_bill   ---->  float64\n* tip      ---->      float64\n* sex      ---->     category\n* smoker   ---->     category\n* day      ---->     category\n* time     ---->     category\n* size     ---->        int64","67c1ee3b":"Set Background Color & Font Color","af747e13":"Checking the index value of the dataframe using iloc","ee645810":"Set background color for max value in column containing numbers","2302aa21":"**Exploratory Data Analysis** or **(EDA)** is understanding the data sets by summarizing their main characteristics often plotting them visually. This step is very important especially when we arrive at modeling the data in order to apply Data Science. Plotting in EDA consists of Histograms, Box plot, Scatter plot and many more. It often takes much time to explore the data. Through the process of EDA, we can ask to define the problem statement or definition on our data set which is very important.","61da1f1f":"## What is Exploratory Data Analysis?","8109dd0c":"## Set DataFrame Visualization","31e88aab":"Inter - Quantile Range (IQR - For Total Bill","82518bda":"## Pie Chart:","313b4cac":"## Joint Plot:","020fe91a":"## Every Feedback is Useful. Feel free to contribute \ud83d\ude03","bfae9c55":"using seaborn library","61c550a1":"### Description of the dataset","9d11cba3":"## Data Visualization","0623e33c":"## Sub Plot:","36cf79f0":"## Importing the necessary libraries","7238262f":"#### Unique Values","d596b14d":"## Strip Plot:","623868b6":"### Value count of the day in dataset","d34fccdc":"![EDA.png](attachment:EDA.png)","fbd88fd0":"## Pair Plot:","1cb266ee":"## Swarm Plot:","9fa854a2":"## Histogram:","f11e3920":"Shape of the DataFrame","e23184d1":"## Thanks .... "}}