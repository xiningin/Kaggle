{"cell_type":{"c5af3c02":"code","d5eaf98c":"code","6aa6c65d":"code","9b634487":"code","d8ba56ad":"code","989c9a95":"code","bf99e1b0":"code","d09aa90f":"code","b390f15c":"code","d675ebf8":"code","ddc0cee6":"code","29e797b2":"code","13cc4fca":"code","1395c12d":"code","5dcfa47b":"code","a0f78466":"code","7df6b91e":"code","9e1a9065":"code","aa632c13":"code","1f321b1c":"code","25531810":"code","df4b7612":"code","098afaca":"code","536c072a":"code","5cbf9959":"code","673b75d5":"code","058ca444":"code","94b93c9c":"code","5a4482c4":"code","67bddd93":"code","fc56cd87":"code","d8971eb3":"code","f3c20cd2":"code","5891fff9":"markdown","d980402f":"markdown","363ac172":"markdown","9a5dfa85":"markdown","97a215a6":"markdown","5c36c94c":"markdown","8903d3d8":"markdown","edaf4f76":"markdown","f2b1ae76":"markdown","e7f875ac":"markdown","e26ede24":"markdown","bdd2f06a":"markdown","77cb57d9":"markdown","2bb7af36":"markdown","fec38033":"markdown","33da8ae9":"markdown","3a848e15":"markdown","7d8e5483":"markdown","270483c9":"markdown","a5aee430":"markdown","d4136274":"markdown","49a06f37":"markdown","37211249":"markdown"},"source":{"c5af3c02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport datetime as dt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d5eaf98c":"movies =pd.read_csv('..\/input\/tmdb_5000_movies.csv')","6aa6c65d":"movies.head()","9b634487":"movies.info()","d8ba56ad":"movies.shape","989c9a95":"type(movies)","bf99e1b0":"# checking for unrealistic values like very low revenue or budget\n# movies.groupby('revenue').count()","d09aa90f":"sns.set_style('darkgrid')\nsns.distplot(movies['revenue'])\n#Kde histogram to see the impact of 0 values on the overall data","b390f15c":"#movies.groupby('budget').count()","d675ebf8":"#Droppong 0 revenue movies\n\n#df = df.drop(df[df.score<50].index), messed up turned dataframe into None object\n#df = df[(df[['A','C']] != 0).all(axis=1)], error list doesnt have attribute all\n#df[df.name != 'Tina']\nmovies = movies[movies['revenue']!=0]\nsns.set_style('darkgrid')\nsns.distplot(movies['revenue'])","ddc0cee6":"movies.release_date = pd.to_datetime(movies.release_date)\nmovies['year'] = movies.release_date.dt.year\n# use a visualisation to see what portion of movies are older that 20 years\nsns.set_style('darkgrid')\nsns.distplot(movies['year'])\n","29e797b2":"movies1 = movies.groupby(['year']).count()\n","13cc4fca":"movies2 = movies[movies['year']>= 2000]\nsns.set_style('darkgrid')\nsns.distplot(movies2['year'])","1395c12d":"sns.relplot(x=\"budget\", y=\"revenue\", data= movies2, size =\"popularity\", hue = 'year', palette = 'Set3',alpha=.7,sizes=(40,1000),height=10)","5dcfa47b":"# This is a more uniform dataset\nmovies2.shape","a0f78466":"#Lets look for outliers\n#movies2.groupby('budget').count()","7df6b91e":"# checking the budget to see distribution\nsns.set_style('darkgrid')\nsns.distplot(movies2['budget'])","9e1a9065":"movies3 = movies2[movies2['budget']>= 100000]\nsns.set_style('darkgrid')\nsns.distplot(movies3['budget'])","aa632c13":"sns.set(style=\"whitegrid\")\n\nax = sns.boxplot(x=movies3[\"budget\"])","1f321b1c":"#checking the higest revenue movies, creating a sorted dataframe by \nmovies_sorted_revenue = movies3.sort_values('revenue', ascending=False)\nmovies_sorted_revenue.head(30)","25531810":"movies4 = movies3[movies3['revenue']>= 100000]\nsns.set_style('darkgrid')\nsns.distplot(movies4['revenue'])","df4b7612":"movies4.shape","098afaca":"movies3.shape","536c072a":"# get the number of missing data points per column\nmissing_values_count = movies4.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_values_count","5cbf9959":"# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = [ 'keywords', 'genres','production_companies','production_countries','spoken_languages']\nfor feature in features:\n    movies4[feature] = movies4[feature].apply(literal_eval)\n    \n# Returns the top element.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        names =' '.join(names[:1])\n    return names\n\nfor feature in features:\n    movies4[feature] = movies4[feature].apply(get_list)\n    \nmovies4[['title','keywords', 'genres','production_companies','production_countries','spoken_languages']].sample(5)","673b75d5":"#Checking for correlation in the data\nmovies.corr()","058ca444":"f,ax = plt.subplots(figsize=(9, 9))\nsns.heatmap(movies.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","94b93c9c":"#df[df.c2.gt(df.c2.quantile(0.8))]\n# get top 20% of movies by revenue as the cluster\n#df.loc[df['column_name'] == some_value]\nmovies_top = movies4.loc[movies4['revenue']>=500000000]\n\n# As there is too much data the plot is not meaningful so will try and subset the data","5a4482c4":"sns.relplot(x=\"budget\", y=\"revenue\", data= movies_top, size =\"popularity\", hue = 'genres', palette = 'Set2',alpha=.7,sizes=(40,1000),height=10)","67bddd93":"#import plotly\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom IPython.display import HTML, Image","fc56cd87":"#find unique values of genre column\n#df.B.unique()\nmovies4['genres'].unique()","d8971eb3":"#Interactive boxplots by revenue, hue = genre\naction_revenue = movies4[movies4['genres']=='Action']['revenue']\nadventure_revenue = movies4[movies4['genres']=='Adventure']['revenue']\ndrama_revenue = movies4[movies4['genres']=='Drama']['revenue']\ncomedy_revenue = movies4[movies4['genres']=='Comedy']['revenue']\nanimation_revenue = movies4[movies4['genres']=='Animation']['revenue']\nsciencef_revenue = movies4[movies4['genres']=='Science Fiction']['revenue']\n\n#trace_avg_ph = go.Box(    y=avg_ph,    name = 'Power Hitters',    text = avg_ph.index  )\ntrace_act_rev = go.Box(y= action_revenue, name ='Action', text=action_revenue.index )\ntrace_adv_rev = go.Box(y= adventure_revenue, name ='Adventure', text=adventure_revenue.index )\ntrace_dra_rev = go.Box(y= drama_revenue, name ='Drama', text=drama_revenue.index )\ntrace_com_rev = go.Box(y= comedy_revenue, name ='Comedy', text=comedy_revenue.index )\ntrace_ani_rev = go.Box(y= animation_revenue, name ='Animation', text=animation_revenue.index )\ntrace_sci_rev = go.Box(y= sciencef_revenue, name ='Science Fiction', text=sciencef_revenue.index )\n\n#data = [trace0, trace1, trace2,trace3, trace4, trace5]\n#iplot(data)\n\nplo_data = [trace_act_rev, trace_adv_rev, trace_dra_rev, trace_com_rev, trace_ani_rev, trace_sci_rev]\niplot(plo_data)","f3c20cd2":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=movies_top['budget'],\n    y=movies_top['revenue'],\n    z=movies_top['popularity'],\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=movies['vote_count'].values,                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.5           # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5891fff9":"<a id='DataCleaning'><\/a>\n\n----------\n\n## 2.Data Cleaning","d980402f":"* [1. Data Exploration](#DataExploration)\n* [2. Data Cleaning](#DataCleaning)\n* [3. Visualisation](#Visualisation)\n    * [3.1 Seaborn](#seaborn)\n        * [3.1.1 Heatmap (Correlation)](#heatmap)\n        * [3.1.2 Scatterplot](#seascatter)\n    * [3.2 Plotly](#plotly)\n        * [3.2.1 Boxplot (Genres VS Revenue)](#boxplot)\n        * [3.2.2 3D Scatterplot (Genre, Revenue VS Popularity)](#scatter)","363ac172":"There seems to be some association between 1. popularity and vote_count, 2. revenue and vote count and 3. budget and revenue. \nSurpisingly the relationship between budget and popularity is not strong.","9a5dfa85":"<a id='seascatter'><\/a>\n\n### 3.1.2 Scatter Plot","97a215a6":"I dont understand how a 0 budget movie can be made. So we decide on a cut off of a 100k dollars as the minimum budget of the movies.","5c36c94c":"Revenue column has some unrealisticly low values. 1427 movies have made 0 dollors. Other movies have made 1 to a few hundred dollars, which seems unlikely and will not help our analysis.\n\nSimilarly we are going to check for unrealistic values in budget.","8903d3d8":"<a id='boxplot'><\/a>\n### 3.2.1 Boxplot (Genre VS Revenue)","edaf4f76":"<a id='scatter'><\/a>\n### 3.2.2 3D Scatterplot (Genre, Revenue VS Popularity)","f2b1ae76":"Looking for how many movies have 0 budget or revenue. Since our analysis is focused on budget and revenue, 0 budget will skew our data","e7f875ac":"<a id='heatmap'><\/a>\n\n### 3.1.1 Heatmap Correlation","e26ede24":"> Clearly a homepage and tagline have a lot of elements missing","bdd2f06a":"The highest budget movie according to our data set is The Warriors Way with a budget of 425 million dollars. This movie only made 11 million dollars. This data is not accurate and in actuallity The warriors way only costed 42 million to make. So we need to correct this data also.","77cb57d9":"We dont plan to use homepage or tagline.","2bb7af36":"<a id='PlotlyVisualisation'><\/a>\n\n----------\n\n## 3.2 Plotly ","fec38033":"We can try looking at the year of movies, to see if old movies are messing with out data and focus our analysis within a particular time frame. But first we need to change our release_date into datetime format so we can extrat the year of release easily.","33da8ae9":"<a id='Seaborn'><\/a>\n\n## 3.1 Seaborn Heatmap Correlation","3a848e15":"Scroll over the graph to see detail. Zoom out using double click. How cool is that :)","7d8e5483":"Lets start by removing all the 0 budget movies. Hopefully this will also remove most of the 0 budget movies","270483c9":"Since there are too many movies which will over crowd the plot, we only want to focus on movies that made more the 500 million dollars. so ","a5aee430":"### Stringfield to String (Genre, Keyword, spoken_language)","d4136274":"As these movies data back to 1960's, unless we can account for inflation we will not get a very accurate analysis.","49a06f37":"<a id='DataExploration'><\/a>\n\n----------\n\n## 1.Data Exploration","37211249":"Two thirds of our movies are concentrared in the 2000's and 2010's. we can concentrate on these years to get a more accurate picture."}}