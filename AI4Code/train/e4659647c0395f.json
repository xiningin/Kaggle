{"cell_type":{"aaf8ba3f":"code","ec7259db":"code","5070bf10":"code","7e3674d9":"code","75865d7c":"code","152e21dc":"code","925628a1":"code","4afdcdd9":"code","b4c4f336":"code","ebcd1e6e":"code","dceb350d":"code","135a5242":"code","404b0a33":"code","5f1a374f":"code","bee38a10":"code","46ac70b2":"markdown","59c2c46b":"markdown","2d0ed974":"markdown","d16e75f5":"markdown","f3619f96":"markdown","3469c959":"markdown","3f2a3ddb":"markdown","bd5319ed":"markdown"},"source":{"aaf8ba3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ec7259db":"def generator():\n    data_generator=tf.keras.preprocessing.image.ImageDataGenerator(\n        rescale=1.\/255,\n        rotation_range=45,\n        width_shift_range=0.3,\n        height_shift_range=0.3,\n        shear_range=0.1,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\n    \n    return data_generator","5070bf10":"train_generator=generator()\ntest_generator=generator()","7e3674d9":"def data_flow(path,generator):\n    data_flow=train_generator.flow_from_directory(path,batch_size=100,class_mode='binary')\n    return data_flow;","75865d7c":"train_dir='..\/input\/hot-dog\/hotdog\/train'\ntrain_data_generator=data_flow(train_dir,train_generator)","152e21dc":"test_dir='..\/input\/hot-dog\/hotdog\/test'\ntest_data_generator=data_flow(test_dir,train_generator)","925628a1":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(3,3),\n    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(3,3),\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),\n    tf.keras.layers.MaxPooling2D(3,3),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256,activation='relu'),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(16,activation='relu'),\n    tf.keras.layers.Dropout(0.4),\n    tf.keras.layers.Dense(1,activation='sigmoid')\n    \n])","4afdcdd9":"model.compile(loss='binary_crossentropy',optimizer=tf.keras.optimizers.RMSprop(lr=0.001),metrics=['acc'])","b4c4f336":"model_training=model.fit_generator(train_data_generator,\n                                   epochs=15,\n                                   validation_data=test_data_generator,\n                                   validation_steps=8)","ebcd1e6e":"accuracy=model_training.history['acc']\nvalidation_acc=model_training.history['val_acc']\nloss=model_training.history['loss']\nvalidation_loss=model_training.history['val_loss']","dceb350d":"import matplotlib.pyplot as plt\nplt.plot(list(range(15)),accuracy,label=\"Accuracy\")\nplt.plot(list(range(15)),validation_acc,label=\"Validation Accracy\")\nplt.xlabel(\"EPOCHS\")\nplt.ylabel(\"Validation Accuracy\")\nplt.legend()\nplt.show()","135a5242":"plt.plot(list(range(15)),loss,label=\"Loss\")\nplt.plot(list(range(15)),validation_loss,label=\"Validation Loss\")\nplt.xlabel(\"EPOCHS\")\nplt.ylabel(\"Validation Loss\")\nplt.legend()\nplt.show()","404b0a33":"plt.bar(list(range(15)),accuracy)\nplt.xlabel(\"EPOCHS\")\nplt.ylabel(\"Accuracy\")\nplt.show()","5f1a374f":"model.save('model')","bee38a10":"import shutil\n\nzip_name = 'trained_model'\ndirectory_name = 'model'\n\nshutil.make_archive(zip_name, 'zip', directory_name)","46ac70b2":"# Model Creation\n   The Convolutional Neural network is created below.  This neural network consists of 3 convolution layer and 3 neural network layers.  Dropout is being implemented in the network to eliminate some neurons.  Here, the model eliminates 40% of the neurons with Dropout.\n   The output layer has a single neuron which tells whether the image contains hot dog or not.\n![](https:\/\/cdn-images-1.medium.com\/max\/1000\/1*uxpH46OpTIj63j1MKQ-T2Q.png)  ","59c2c46b":"# MODEL COMPILATION\n   The model is compiled by using the loss function as **binary cross entropy** and the optimizer used here is **RMSprop**.","2d0ed974":"# Hot Dog or Not?\n   The Hot dog or not is a binary classification problem where we need predict whether the image contains hot dog or not.  In this notebook, **TensorFlow** is used to create the Neural Network.","d16e75f5":"The Network gave an accuracy of 82% with training data and 80% with testing data.","f3619f96":"# TRAINING\n  The network is trained with the training data for upto 15 epochs.","3469c959":"# SAVE MODEL","3f2a3ddb":"Here, training and testing ImageDataGenerator were created by calling the generator function.","bd5319ed":"the **generator()** function creates an ImageDataGenerator object and return it to the calling function.  To increase the accuracy of the model, data augmentation is used."}}