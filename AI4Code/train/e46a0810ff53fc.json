{"cell_type":{"d5533858":"code","48b9a7ca":"code","90e553ef":"code","aad901fa":"code","3f222fd9":"code","7569b7d6":"code","046772bf":"code","db8d51fb":"code","0a39ef8e":"code","226f6fbc":"code","8ed72787":"code","4f171ef3":"code","d96efc6a":"code","c9840c5a":"code","3b90253e":"code","f62c7c56":"code","bc4ce79b":"code","d001339a":"code","9fd17ec3":"code","a48993fa":"code","1ccd2160":"code","5f1dcb0d":"code","90c189c0":"code","50d0620a":"code","49a3836f":"code","8bc3690a":"code","16079de0":"markdown","8e39e37d":"markdown","a0efc200":"markdown","2a797a85":"markdown","a25fcf91":"markdown","dbe7d3f5":"markdown","06581eec":"markdown","b1fc4e55":"markdown","8dc3af4c":"markdown"},"source":{"d5533858":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48b9a7ca":"#for data wrangling and manipulation\n\nimport pandas as pd\nimport numpy as np\n\n#for NLP text processing and formatting\n\nimport re\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n\n# For word lemmitization\nimport nltk\nnltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\n\n# for word Stemming\nfrom nltk.stem.porter import PorterStemmer\n\n# for Machine Learning process\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\n# for Machine Learning model evaluation\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\n\n# Global Parameters\nstop_words = set(stopwords.words('english'))","90e553ef":"def preprocess_tweet_text(tweet):\n    \"\"\"\n    Function to process the the tweet text and tranform it into format usable by Machine learning models\n    \"\"\"\n    \n    # to convert all the characters of the tweet into lower case alphabets\n    tweet.lower()\n    \n    # Remove urls from the tweets\n    tweet = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', tweet, flags=re.MULTILINE)\n    \n    # Remove user related references from the tweets:: '@' and '#' \n    tweet = re.sub(r'\\@\\w+|\\#','', tweet)\n    \n    # Remove punctuations from the tweets\n    tweet = tweet.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove stopwords from the tweets\n    tweet_tokens = word_tokenize(tweet)\n    filtered_words = [w for w in tweet_tokens if not w in stop_words]\n    joined_text = \" \".join(filtered_words)\n    \n    return joined_text","aad901fa":"def get_feature_vector(train_fit):\n    \"\"\"\n    Function to Convert a collection of raw documents to a matrix of TF-IDF features.\n    TF-IDF - Term Frequency Inverse Documnet Frequency\n    \"\"\"\n    \n    vector = TfidfVectorizer(sublinear_tf=True)      # Defining the vector\n    vector.fit(train_fit)                            # fitting the data into the vector\n    return vector                                    # returning the vector as function call","3f222fd9":"# read data\ndataset = pd.read_csv(\"..\/input\/sentiment-analysis-of-tweets\/train.txt\",  sep = \",\")\nprint(\"Train Data has been read\")\ntest = pd.read_csv(\"..\/input\/sentiment-analysis-of-tweets\/test_samples.txt\",  sep = \",\")\nprint(\"Test Data has been read\")","7569b7d6":"# Preprocessing data before feeding it to ML models\n\nprocessed_text = dataset['tweet_text'].apply(preprocess_tweet_text)\n\nprint(\"Processed text :: \\n\\n\", processed_text)","046772bf":"stemmer = PorterStemmer()\n\nstemmed_words = [stemmer.stem(i) for i in processed_text]","db8d51fb":"lemmatizer = WordNetLemmatizer()\nlemma_words = [lemmatizer.lemmatize(w, pos='a') for w in stemmed_words]\n","0a39ef8e":"tf_vector = get_feature_vector(np.array(dataset[\"tweet_text\"]).ravel())","226f6fbc":"X = tf_vector.transform(np.array(dataset[\"tweet_text\"]).ravel())     # Predictor Variable\ny = np.array(dataset[\"sentiment\"]).ravel()                           # Target varaible","8ed72787":"# SPlitting the data into training and testing data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=30)","4f171ef3":"# Using Naive Bayes Model :\n\nNB_model = MultinomialNB()\n\nNB_model.fit(X_train, y_train)","d96efc6a":"# Predicting the values and the Accuracy Score\n\ny_predict_nb = NB_model.predict(X_test)\n\nprint(\"Accuracy Score for Naive Bayes Model is :: \", accuracy_score(y_test, y_predict_nb))","c9840c5a":"# Classification Report :\n\nprint(\"Classification_Report :: \\n\\n\", classification_report(y_test, y_predict_nb))","3b90253e":"# Training Logistics Regression model\nLR_model = LogisticRegression(solver='lbfgs')\nLR_model.fit(X_train, y_train)","f62c7c56":"# Predicting the Values :\n\ny_predict_lr = LR_model.predict(X_test)\n\nprint(\"Accuracy Score for Logistic Regression Model is :: \",accuracy_score(y_test, y_predict_lr))","bc4ce79b":"# Classification Report\n\nfrom sklearn.metrics import classification_report\n\nprint(\"Classification_Report :: \\n\\n\", classification_report(y_test, y_predict_lr))","d001339a":"# Creating text feature of test data :\n\ntest.tweet_text = test[\"tweet_text\"].apply(preprocess_tweet_text)\n\ntest_feature = tf_vector.transform(np.array(test['tweet_text']).ravel())\n","9fd17ec3":"# Using Naive Bayes Model for Prediction ::\n\ntest_prediction_nb = NB_model.predict(test_feature)\n\ntest_prediction_nb","a48993fa":"# Creating a Dataframe consising tweets and sentiment in a submission format\n\nsubmission_result_nb = pd.DataFrame({'tweet_id': test.tweet_id, 'sentiment':test_prediction_nb})\nsubmission_result_nb","1ccd2160":"# Total number os tweets grouped according sentiment\n\ntest_result = submission_result_nb['sentiment'].value_counts()\ntest_result","5f1dcb0d":"#Using Logistic Regression Model for Prediction ::\n\ntest_prediction_lr = LR_model.predict(test_feature)\n\ntest_prediction_lr","90c189c0":"# Creating a Dataframe consising tweets and sentiment\n\nsubmission_result_lr = pd.DataFrame({'tweet_id': test.tweet_id, 'sentiment':test_prediction_lr})\nsubmission_result_lr","50d0620a":"# Total number os tweets grouped according sentiment\n\ntest_result2 = submission_result_lr['sentiment'].value_counts()\ntest_result2","49a3836f":"import seaborn as sns\nsns.countplot(submission_result_lr['sentiment'])","8bc3690a":"import seaborn as sns\nsns.countplot(submission_result_nb['sentiment'])","16079de0":"# **Stemming ::**\n\n    It may be defined as the process to remove the inflectional forms of a word and bring them to a base form called the stem.\n\n    The chopped-off pieces are referred to as affixes\n\n    The two most common algorithms\/methods employed for stemming include the ::\n*         Porter Stemmer\n*         Snowball Stemmer\n\nWe will be using **Porter Stemmer** in our process.\n\n","8e39e37d":"# Defining the Variables :","a0efc200":"# Using Logistic Regression Model :","2a797a85":"# Visualizing the data :: ","a25fcf91":"# Vectorization ::\n\nProcessing natural language text and extract useful information from the given word or a sentence using machine learning and deep learning techniques requires the string\/text needs to be converted into a set of real numbers (a vector) \u2014 Word Embeddings.\n\nWord Embeddings or Word vectorization is a methodology in NLP to map words or phrases from vocabulary to a corresponding vector of real numbers which used to find word predictions, word similarities\/semantics.\n\nThe process of converting words into numbers are called **Vectorization**\n","dbe7d3f5":"# **Logistic Regression** model gives an accuracy score of 0.64103\n# **Naive Bayes** model gives an accuracy score of 0.60050","06581eec":"# Defining a function which will process the tweets before using it in the models","b1fc4e55":"# Lemmatization ::\n\n    It is a process wherein the context is used to convert a word to its meaningful base form.\n    It helps in grouping together words that have a common base form and so can be identified as a single item.\n    The base form is referred to as the lemma of the word and is also sometimes known as the dictionary form.\n    The most commonly used lemmatizers are the\n1.         WordNet Lemmatizer\n1.         Spacy Lemmatizer\n1.         TextBlob Lemmatizer\n\nWe will be using **WordNet Lemmatizer** in our process.\n","8dc3af4c":"# Defining Vectorizer  to convert the string into corresponding TF IDF vector matrix"}}