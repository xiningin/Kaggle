{"cell_type":{"cbda3ddf":"code","927193f9":"code","33e5898e":"code","ced81598":"code","823a709c":"code","08da1457":"code","da42ab61":"code","f00f6289":"code","143e67c6":"code","6da2aa8c":"code","162c5a06":"code","00158615":"code","371bd705":"code","d4212b4b":"code","109e5628":"code","e1b6d611":"code","b866b5bb":"code","11870511":"code","47798beb":"code","b7f0f5e1":"code","0563555b":"code","590f997e":"code","26f7a7f2":"code","c8457c40":"code","b238a159":"code","2331c889":"code","ad20ad60":"code","bf457fcb":"code","c97f5995":"code","830db8e3":"code","147c8016":"code","c798948d":"code","049d2eca":"code","4e07a4bd":"code","3e5cba81":"code","f8d0e641":"code","31f6a6eb":"code","3baaa2ba":"code","797a4747":"code","dcd1744c":"code","986ae2be":"code","6fece428":"code","ee4952c7":"code","583a9d6e":"code","db50a67e":"code","4227f274":"code","db8890db":"code","efa49730":"code","7f7a2a9f":"code","c6b00978":"code","ee599d20":"code","fc9d9d65":"code","49814c30":"markdown","f41c4d11":"markdown","8f86de0b":"markdown","8c761f79":"markdown","0cdda8d3":"markdown","6530411c":"markdown","f2b12d63":"markdown","47f8b089":"markdown","4f9ea372":"markdown","f41a8845":"markdown","20f71bdc":"markdown","fbc832d3":"markdown","16e26dd5":"markdown","c1532c4b":"markdown","c4332ca1":"markdown","a89dc5cb":"markdown","2ac36364":"markdown","f359f58c":"markdown","cd56c2ed":"markdown","1dde7947":"markdown","c6003c0a":"markdown","7491a6f5":"markdown","a0ca1ded":"markdown","5fafd0bc":"markdown","83179f08":"markdown","2c460c49":"markdown","2cc92ec7":"markdown","09656cca":"markdown","1fc0ce77":"markdown","3ff4beea":"markdown","db241922":"markdown","6c14865e":"markdown","93e6f4b1":"markdown","e0be65f8":"markdown","504e7be0":"markdown","c019b3e2":"markdown","5703d657":"markdown","c954b912":"markdown","08b50c77":"markdown"},"source":{"cbda3ddf":"import pandas as pd\nimport numpy as np\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.simplefilter('ignore')","927193f9":"train=pd.read_csv(r\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\ntest=pd.read_csv(r\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")","33e5898e":"train.sample(6)","ced81598":"test.sample(6)","823a709c":"df = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop10 = pd.DataFrame(df).head(10)\ntop10","08da1457":"fig = px.bar(top10, x=top10.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Brwnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","da42ab61":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'US') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()","f00f6289":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Italy') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","143e67c6":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'China') &(df_by_date.Date >= '2020-01-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in China')\nfig.show()","6da2aa8c":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Spain') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Spain')\nfig.show()","162c5a06":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'Germany') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Germany')\nfig.show()","00158615":"df_by_date = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == 'India') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in India')\nfig.show()","371bd705":"df = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases','Fatalities'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values(by='ConfirmedCases') \\\n                          .groupby(['Country_Region']).sum().sort_values(by='ConfirmedCases',ascending = False)\n\ndf = pd.DataFrame(df).reset_index()\n\n\ndf = pd.DataFrame(df)\n\ndf_new_cases = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['ConfirmedCases'].sum() \\\n                            .reset_index()).sort_values(['Country_Region','Date'])\ndf_new_cases.ConfirmedCases = df_new_cases.ConfirmedCases.diff().fillna(0)\ndf_new_cases = df_new_cases.loc[df_new_cases['Date'] == max(df_new_cases['Date']),['Country_Region','ConfirmedCases']]\ndf_new_cases.rename(columns={\"ConfirmedCases\": \"NewCases\"}, inplace=True, errors=\"raise\")\n\ndf_new_deaths = pd.DataFrame(train.fillna('NA').groupby(['Country_Region','Date'])['Fatalities'].sum() \\\n                            .reset_index()).sort_values(['Country_Region','Date'])\n\ndf_new_deaths.Fatalities = df_new_deaths.Fatalities.diff().fillna(0)\ndf_new_deaths = df_new_deaths.loc[df_new_deaths['Date'] == max(df_new_deaths['Date']),['Country_Region','Fatalities']]\n\ndf_new_deaths.rename(columns={\"Fatalities\": \"NewFatalities\"}, inplace=True, errors=\"raise\")\n\nmerged = df.merge(df_new_cases, left_on='Country_Region', right_on='Country_Region')\\\n            .merge(df_new_deaths, left_on='Country_Region', right_on='Country_Region')\n\n\nmerged.style.background_gradient(cmap=\"Blues\", subset=['ConfirmedCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['Fatalities'])\\\n            .background_gradient(cmap=\"Blues\", subset=['NewCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['NewFatalities'])","d4212b4b":"df=train.groupby(['Date','Country_Region']).agg('sum').reset_index()\ndf.tail(5)","109e5628":"def pltCountry_cases(ConfirmedCases,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['ConfirmedCases'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of cases' )\n  \n\n","e1b6d611":"def pltCountry_fatalities(Fatalities,*argv):\n    f, ax=plt.subplots(figsize=(16,5))\n    labels=argv\n    for a in argv: \n        country=df.loc[(df['Country_Region']==a)]\n        plt.plot(country['Date'],country['Fatalities'],linewidth=3)\n        plt.xticks(rotation=40)\n        plt.legend(labels)\n        ax.set(title='Evolution of the number of fatalities' )","b866b5bb":"pltCountry_cases('ConfirmedCases','China')\npltCountry_fatalities('Fatalities','China')","11870511":"pltCountry_cases('ConfirmedCases', 'Germany','Spain','France','US')\npltCountry_fatalities('Fatilities','Germany','Spain','France','US')","47798beb":"test['Date'] = pd.to_datetime(test['Date'])\ntrain['Date'] = pd.to_datetime(train['Date'])","b7f0f5e1":"case='ConfirmedCases'\ndef timeCompare(time,*argv):\n    Coun1=argv[0]\n    Coun2=argv[1]\n    f,ax=plt.subplots(figsize=(16,5))\n    labels=argv  \n    country=df.loc[(df['Country_Region']==Coun1)]\n    plt.plot(country['Date'],country[case],linewidth=2)\n    plt.xticks([])\n    plt.legend(labels)\n    ax.set(title=' Evolution of actual cases',ylabel='Number of cases' )\n\n    country2=df.loc[df['Country_Region']==Coun2]\n    #country2['Date']=country2['Date']-datetime.timedelta(days=time)\n    plt.plot(country2['Date'],country2[case],linewidth=2)\n    #plt.xticks([])\n    plt.legend(labels)\n    ax.set(title=' Evolution of cases in %d days difference '%time ,ylabel='Number of %s cases'%case )","0563555b":"timeCompare(8,'Italy','France')\ntimeCompare(6,'Italy','Spain')\ntimeCompare(7,'Italy','Germany')\ntimeCompare(7,'Italy','US')","590f997e":"timeCompare(8,'US','China')\ntimeCompare(6,'US','Spain')\ntimeCompare(7,'US','Germany')\ntimeCompare(7,'US','India')","26f7a7f2":"case='Fatalities'\ndef timeCompare_f(time,*argv):\n    Coun1=argv[0]\n    Coun2=argv[1]\n    f,ax=plt.subplots(figsize=(16,5))\n    labels=argv  \n    country=df.loc[(df['Country_Region']==Coun1)]\n    plt.plot(country['Date'],country[case],linewidth=2)\n    plt.xticks([])\n    plt.legend(labels)\n    ax.set(title=' Evolution of actual cases',ylabel='Number of cases' )\n\n    country2=df.loc[df['Country_Region']==Coun2]\n    #country2['Date']=country2['Date']-datetime.timedelta(days=time)\n    plt.plot(country2['Date'],country2[case],linewidth=2)\n    #plt.xticks([])\n    plt.legend(labels)\n    ax.set(title=' Evolution of Fatalities in %d days difference '%time ,ylabel='Number of %s cases'%case )","c8457c40":"timeCompare_f(8,'Italy','France')\ntimeCompare_f(6,'Italy','Spain')\ntimeCompare_f(7,'Italy','Germany')\ntimeCompare_f(7,'Italy','US')\ntimeCompare_f(7,'Italy','China')","b238a159":"timeCompare_f(8,'US','China')\ntimeCompare_f(6,'US','Spain')\ntimeCompare_f(7,'US','Germany')\ntimeCompare_f(7,'US','India')","2331c889":"sns.set(palette = 'Set1',style='darkgrid')\n#Function for making a time serie on a designated country and plotting the rolled mean and standard \ndef roll(country,case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    return (ts.rolling(window=4,center=False).mean().dropna())\n\n\ndef rollPlot(country, case='ConfirmedCases'):\n    ts=df.loc[(df['Country_Region']==country)]  \n    ts=ts[['Date',case]]\n    ts=ts.set_index('Date')\n    ts.astype('int64')\n    a=len(ts.loc[(ts['ConfirmedCases']>=10)])\n    ts=ts[-a:]\n    plt.figure(figsize=(16,6))\n    plt.plot(ts.rolling(window=7,center=False).mean().dropna(),label='Rolling Mean')\n    plt.plot(ts[case])\n    plt.plot(ts.rolling(window=7,center=False).std(),label='Rolling std')\n    plt.legend()\n    plt.title('Cases distribution in %s with rolling mean and standard' %country)\n    plt.xticks([])","ad20ad60":"tsC1=roll('China')\nrollPlot('China')","bf457fcb":"tsC2=roll('US')\nrollPlot('US')","c97f5995":"tsC3=roll('Italy')\nrollPlot('Italy')","830db8e3":"tsC4=roll('Spain')\nrollPlot('Spain')","147c8016":"tsC5=roll('Germany')\nrollPlot('Germany')","c798948d":"#Decomposing the ts to find its properties\nfig=sm.tsa.seasonal_decompose(tsC1.values,freq=7).plot()","049d2eca":"fig=sm.tsa.seasonal_decompose(tsC2.values,freq=7).plot()","4e07a4bd":"fig=sm.tsa.seasonal_decompose(tsC3.values,freq=7).plot()","3e5cba81":"fig=sm.tsa.seasonal_decompose(tsC4.values,freq=7).plot()","f8d0e641":"fig=sm.tsa.seasonal_decompose(tsC5.values,freq=7).plot()","31f6a6eb":"#Function to check the stationarity of the time serie using Dickey fuller test\ndef stationarity(ts):\n    print('Results of Dickey-Fuller Test:')\n    test = adfuller(ts, autolag='AIC')\n    results = pd.Series(test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for i,val in test[4].items():\n        results['Critical Value (%s)'%i] = val\n    print (results)\n\n#For China\ntsC=tsC1['ConfirmedCases'].values\nstationarity(tsC)","3baaa2ba":"#For US\ntsC=tsC2['ConfirmedCases'].values\nstationarity(tsC)","797a4747":"#For Italy\ntsC=tsC3['ConfirmedCases'].values\nstationarity(tsC)","dcd1744c":"#For Spain\ntsC=tsC4['ConfirmedCases'].values\nstationarity(tsC)","986ae2be":"#For Germany\ntsC=tsC5['ConfirmedCases'].values\nstationarity(tsC)","6fece428":"def corr(ts):\n    plot_acf(ts,lags=12,title=\"ACF\")\n    plot_pacf(ts,lags=12,title=\"PACF\")\n    \n\n#For China\ncorr(tsC1)","ee4952c7":"#For US\ncorr(tsC2)","583a9d6e":"#For Italy\ncorr(tsC3)","db50a67e":"#For Spain\ncorr(tsC4)","4227f274":"#For Germany\ncorr(tsC5)","db8890db":"#test['Date'] = pd.to_datetime(test['Date'])\n#train['Date'] = pd.to_datetime(train['Date'])\ntrain = train.set_index(['Date'])\ntest = test.set_index(['Date'])","efa49730":"\ndef create_features(df,label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df = df.copy()\n    df['Date'] = df.index\n    df['hour'] = df['Date'].dt.hour\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['quarter'] = df['Date'].dt.quarter\n    df['month'] = df['Date'].dt.month\n    df['year'] = df['Date'].dt.year\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['dayofmonth'] = df['Date'].dt.day\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n   \n    return X","7f7a2a9f":"train_features=pd.DataFrame(create_features(train))\ntest_features=pd.DataFrame(create_features(test))\nfeatures_and_target_train = pd.concat([train,train_features], axis=1)\nfeatures_and_target_test = pd.concat([test,test_features], axis=1)\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            df[c] = le.transform(df[c].astype(str))\n    return df\nfeatures_and_target_train= FunLabelEncoder(features_and_target_train)","c6b00978":"x_train= features_and_target_train[['Country_Region','month', 'dayofyear', 'dayofmonth' , 'weekofyear']]\ny1 = features_and_target_train[['ConfirmedCases']]\ny2 =features_and_target_train[['Fatalities']]\nx_test = features_and_target_test[['Country_Region', 'month', 'dayofyear', 'dayofmonth' , 'weekofyear']]\n","ee599d20":"#Mean absolute percentage error\ndef mape(y1, y_pred): \n    y1, y_pred = np.array(y1), np.array(y_pred)\n    return np.mean(np.abs((y1 - y_pred) \/ y1)) * 100\n\ndef split(ts):\n    #splitting 85%\/15% because of little amount of data\n    size = int(len(ts) * 0.85)\n    train= ts[:size]\n    test = ts[size:]\n    return(train,test)\n\n\n#Arima modeling for ts\ndef arima(ts,test):\n    p=d=q=range(0,6)\n    a=99999\n    pdq=list(itertools.product(p,d,q))\n    \n    #Determining the best parameters\n    for var in pdq:\n        try:\n            model = ARIMA(ts, order=var)\n            result = model.fit()\n\n            if (result.aic<=a) :\n                a=result.aic\n                param=var\n        except:\n            continue\n            \n    #Modeling\n    model = ARIMA(ts, order=param)\n    result = model.fit()\n    result.plot_predict(start=int(len(ts) * 0.7), end=int(len(ts) * 1.2))\n    pred=result.forecast(steps=len(test))[0]\n    #Plotting results\n    f,ax=plt.subplots()\n    plt.plot(pred,c='green', label= 'predictions')\n    plt.plot(test, c='red',label='real values')\n    plt.legend()\n    plt.title('True vs predicted values')\n    #Printing the error metrics\n    print(result.summary())        \n    \n    print('\\nMean absolute percentage error: %f'%mape(test,pred))\n    return (pred)\n\n\n\ntrain,test=split(tsC)\npred=arima(train,test)","fc9d9d65":"#Mean absolute percentage error\ndef mape(y2, y_pred): \n    y2, y_pred = np.array(y2), np.array(y_pred)\n    return np.mean(np.abs((y2 - y_pred) \/ y2)) * 100\n\ndef split(ts):\n    #splitting 85%\/15% because of little amount of data\n    size = int(len(ts) * 0.85)\n    train= ts[:size]\n    test = ts[size:]\n    return(train,test)\n\n\n#Arima modeling for ts\ndef arima(ts,test):\n    p=d=q=range(0,6)\n    a=99999\n    pdq=list(itertools.product(p,d,q))\n    \n    #Determining the best parameters\n    for var in pdq:\n        try:\n            model = ARIMA(ts, order=var)\n            result = model.fit()\n\n            if (result.aic<=a) :\n                a=result.aic\n                param=var\n        except:\n            continue\n            \n    #Modeling\n    model = ARIMA(ts, order=param)\n    result = model.fit()\n    result.plot_predict(start=int(len(ts) * 0.7), end=int(len(ts) * 1.2))\n    pred=result.forecast(steps=len(test))[0]\n    #Plotting results\n    f,ax=plt.subplots()\n    plt.plot(pred,c='green', label= 'predictions')\n    plt.plot(test, c='red',label='real values')\n    plt.legend()\n    plt.title('True vs predicted values')\n    #Printing the error metrics\n    print(result.summary())        \n    \n    print('\\nMean absolute percentage error: %f'%mape(test,pred))\n    return (pred)\n\n\n\ntrain,test=split(tsC)\npred=arima(train,test)","49814c30":"In this way we can forecast or predict for each and every region","f41c4d11":"Confirmed COVID-19 Cases per day in Germany","8f86de0b":"Model Building","8c761f79":"Confirmed COVID-19 cases per day in China","0cdda8d3":"Nice meaning full plots","6530411c":"AUTO Correlation","f2b12d63":"In italy, Spreading of virus done for a long time and thus effected more people. But in US within short period the spread is more in this way US had a great impact","47f8b089":"Comparing a group of countries with similar evolution: Germany, Spain, France and the US","4f9ea372":"# Importing Necessary Packages","f41a8845":"Country Wise Cases and fatalities","20f71bdc":"For day to day track and geospatial analysis refer my another notebook in which i explained detailedly and calculated Deaths, cases, Recovered day to day.\nHere is my notenok [https:\/\/www.kaggle.com\/eswarchandt\/geospatial-analysis-on-covid-19](http:\/\/)","fbc832d3":"From the above graph, we can say that US has most Confirmed cases and followed by italy.\nThe virus has began at China but virus is showing a  greater impact on US and Italy than China","16e26dd5":"From this graph we can say that,with in short period of time virus has spread more in US and kept in 1st place","c1532c4b":"Data Stationarity and transformation","c4332ca1":"Well , we have to appreaciate India in maintaining constant cases.US, Italy, China, Spain, Gemany has to take take","a89dc5cb":"From the above graph, we can say that, In china this virus has started and continued to spread. From this region, virus began to spread all parts of the world. In china the confirmed cases are increasing day by day.","2ac36364":"![image.png](attachment:image.png)","f359f58c":"The confirmed Cases compared to US, China, Italy , Spain and Germany are very less in India. But once it starts spreading it will show a greater impact.","cd56c2ed":"Time Series in China","1dde7947":"Confirmed COVID-19 cases Per day in India","c6003c0a":"From the above graph we analysed timeseries of US, Germany, France, italy ,Spain : Trend , Seasonal , Residual of Confirmed Cases are analysed","7491a6f5":"Here the p-value helps us to reject the null hypothesis of the non-stationarity of the data with confidence, but that assumption is sometimes not enough, we should also consider the time series might not be an AR(auto-regression).\nThis supposedly means that the parameter i(d) will be 0 and the model would be an ARMA model.","a0ca1ded":"Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nMost people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment. Older people, and those with underlying medical problems like cardiovascular disease, diabetes, chronic respiratory disease, and cancer are more likely to develop serious illness.\n\nThe best way to prevent and slow down transmission is be well informed about the COVID-19 virus, the disease it causes and how it spreads. Protect yourself and others from infection by washing your hands or using an alcohol based rub frequently and not touching your face.\n\nThe COVID-19 virus spreads primarily through droplets of saliva or discharge from the nose when an infected person coughs or sneezes, so it\u2019s important that you also practice respiratory etiquette (for example, by coughing into a flexed elbow).\n\nAt this time, there are no specific vaccines or treatments for COVID-19. However, there are many ongoing clinical trials evaluating potential treatments. WHO will continue to provide updated information as soon as clinical findings become available.\n\nStay informed:\n\nProtect yourself: advice for the public Myth busters Questions and answers Situation reports All information on the COVID-19 outbreak","5fafd0bc":"Please upvote if you liked my notebook and keep me motivated ","83179f08":"For day to day track of this COVID-19 Cases, Deaths please refer my another notebook [https:\/\/www.kaggle.com\/eswarchandt\/geospatial-analysis-on-covid-19](http:\/\/)","2c460c49":"Spain and china has more fatalities than US. India and germany has less fatalities than US","2cc92ec7":"# ARIMA","09656cca":"Italy has more fatalities than US, Germany, France, Spain but less than China initially. italy has grown its fatalities in less time period","1fc0ce77":"Cases Distribution with Rolling mean and standard deviation","3ff4beea":"# Introduction","db241922":"# EDA","6c14865e":"From the above graph we can conclude that with 7 days difference, US crossed Italy in Cases","93e6f4b1":"Decomposing the data","e0be65f8":"# Time evaluation","504e7be0":"The above are the forecated and predicted fatalities in coming weeks","c019b3e2":"The above obtained graphs are Forecasted and predicted cases in coming week","5703d657":"Confirmed COVID-19 cases per day in Spain","c954b912":"Confirmed COVID-19 cases per day in US","08b50c77":"Confirmed COVID-19 Cases by country"}}