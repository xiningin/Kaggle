{"cell_type":{"530bedc0":"code","57c0a42d":"code","e629489b":"code","3157cb6d":"code","5106b465":"code","c4ed4e45":"code","6ecccab8":"code","bfbdb92a":"code","6ecdc79d":"code","c96c1bd5":"code","feda7e17":"code","bd6c5e5f":"code","ba0917b4":"code","5a60798f":"code","3d7fe347":"code","87aa6dec":"code","1565ae9b":"code","2dd5d32d":"code","058e8678":"code","c3c6b2f1":"code","3ddf5ca1":"code","6e45c2f4":"code","2e3b33be":"code","20d4bf2a":"code","765d3177":"code","1babda0d":"code","80d019a7":"code","5186a9b8":"code","0123b8e8":"code","d1a6799d":"code","5eaae3e3":"code","8de0e066":"code","25de08af":"code","681b7c91":"code","cbc50fc5":"code","35a028fd":"code","9d1fa0f0":"code","72fbc6b4":"code","28ebe24a":"code","9eb9096a":"code","a6990bd0":"code","5f44a4d3":"markdown","6c2b38f5":"markdown","9fbd8ebf":"markdown","5d82d6d0":"markdown","06e82c23":"markdown"},"source":{"530bedc0":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport plotly.express as px","57c0a42d":"data0 = pd.read_csv('..\/input\/kaggle-datasets-ranking\/Kaggle Datasets Ranking.csv', \n                    error_bad_lines = False, encoding = 'latin-1', sep = ';')\ndata0","e629489b":"data0['Total Medals']=data0['Gold Medals']+data0['Silver Medals']+data0['Bronze Medals']\ndata0['Gold\/Silver Medals']=data0['Gold Medals']+data0['Silver Medals']\ndata0['Silver\/Bronze Medals']=data0['Silver Medals']+data0['Bronze Medals']","3157cb6d":"data0a=data0.sort_values('Gold Medals',ascending=False)\nfig = px.bar(data0a[0:40], x='Username', y='Gold Medals',title=\"Gold Medals Ranking\")\nfig.show()","5106b465":"data0b=data0.sort_values('Silver Medals',ascending=False)\nfig = px.bar(data0b[0:40], x='Username', y='Silver Medals',title=\"Silevr Medals Ranking\")\nfig.show()","c4ed4e45":"data0c=data0.sort_values('Bronze Medals',ascending=False)\nfig = px.bar(data0c[0:40], x='Username', y='Bronze Medals',title=\"Bronze Medals Ranking\")\nfig.show()","6ecccab8":"data0d=data0.sort_values('Total Medals',ascending=False)\nfig = px.bar(data0d[0:40], x='Username', y='Total Medals',title=\"Total Medals Ranking\")\nfig.show()","bfbdb92a":"data0.columns","6ecdc79d":"data0.info()","c96c1bd5":"Name=data0['Tier'].unique().tolist()\nN=list(range(3))\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) \ndata0['Tier']=data0['Tier'].map(normal_mapping)\nprint(normal_mapping)","feda7e17":"data0.to_csv('dataset.csv',index=False)","bd6c5e5f":"df=data0.copy()\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","ba0917b4":"data1=df\ndata1[0:2].T","5a60798f":"data1.columns","3d7fe347":"target=['Points']\ndatay=data1[target[0]]\ndatax=data1.drop([target[0]],axis=1)","87aa6dec":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","1565ae9b":"df_columns = list(datax.columns)\nprint(df_columns)","2dd5d32d":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)\ntrain_df.columns=df_columns\n#test_df.columns=df_columns","058e8678":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","c3c6b2f1":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3ddf5ca1":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","6e45c2f4":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","2e3b33be":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","20d4bf2a":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","765d3177":"y = trainy\nydf=pd.DataFrame(y)","1babda0d":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted '+target[0],fontsize=12)\n    ax.set_xlabel('Actual '+target[0],fontsize=12)\n    ax.scatter(oof,y)\n","80d019a7":"print(target)","5186a9b8":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","0123b8e8":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","d1a6799d":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Rank vs Points',fontsize=20)\nax.set_xlabel('Rank',fontsize=12)\nax.set_ylabel('Points',fontsize=12)\nax.scatter(data0['Rank'],data0['Points'])\nplt.show()","5eaae3e3":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Rank',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Rank',fontsize=12)\nax.scatter(data0['Tier'],data0['Rank'])\nplt.show()","8de0e066":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Total Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Total Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Total Medals'])\nplt.show()","25de08af":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Gold Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Gold Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Gold Medals'])\nplt.show()","681b7c91":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Silver Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Silver Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Silver Medals'])\nplt.show()","cbc50fc5":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Bronze Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Bronze Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Bronze Medals'])\nplt.show()","35a028fd":"comp=pd.read_csv('..\/input\/kaggle-competition-points-visualize-importance\/competition.csv')\ncomp[0:5]","9d1fa0f0":"data_mg=data0.merge(comp,how='outer',on='Username')\ndata_mg[0:5]","72fbc6b4":"data_mg2=data_mg[['Username','Tier_x','Tier_y','Points_x','Points_y']]\ndata_mg2[0:5]","28ebe24a":"# Double GrandMaster Holders\ndata_mg2[(data_mg2['Tier_x']==0) & (data_mg2['Tier_y']==0)]['Username'].tolist()","9eb9096a":"# Double Master Holders\ndata_mg2[(data_mg2['Tier_x']==1) & (data_mg2['Tier_y']==1)]['Username'].tolist()","a6990bd0":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Dataset Points vs Competition Points',fontsize=20)\nax.set_xlabel('Log Dataset Points',fontsize=12)\nax.set_ylabel('Log Competition Points',fontsize=12)\nax.scatter(np.log10(data_mg2['Points_x']),np.log10(data_mg2['Points_y']))\nplt.show()","5f44a4d3":"# Model","6c2b38f5":"# Visualize Importance","9fbd8ebf":"# Target setting","5d82d6d0":"# Data preparation","06e82c23":"# Comparison with Cmpetition Points"}}