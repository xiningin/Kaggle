{"cell_type":{"e600cc54":"code","d03ecd90":"code","fdb9938a":"code","5164241a":"code","bf169704":"code","a5dabd61":"code","d9330182":"code","15c2d5b8":"code","b15129af":"code","32d711f8":"code","fb03961e":"code","d2da1a31":"code","4c1699bc":"markdown","213eec98":"markdown"},"source":{"e600cc54":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom scipy.stats import mode, skew, kurtosis, entropy\nfrom sklearn.ensemble import ExtraTreesRegressor\n\n# Keras Neural Net \/ LSTM (RNN)\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Activation, ThresholdedReLU, MaxPooling2D, Embedding, Dropout\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras import backend as K\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers.advanced_activations import PReLU\nfrom keras.layers.normalization import BatchNormalization\nfrom keras import optimizers\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport dask.dataframe as dd\nfrom dask.multiprocessing import get\n\nfrom tqdm import tqdm, tqdm_notebook\ntqdm.pandas(tqdm_notebook)\nfrom IPython.display import display\n\nDebug = False\nnrows = None\nif Debug is True: nrows = 200\ntrain = pd.read_csv(\"..\/input\/train.csv\", nrows=nrows)\ntest = pd.read_csv(\"..\/input\/test.csv\", nrows=nrows)\ntraindex = train.ID.copy()\ntestdex = test.ID.copy()\nprint(test.shape)\n\ntransact_cols = [f for f in train.columns if f not in [\"ID\", \"target\"]]\ny = np.log1p(train[\"target\"]).values","d03ecd90":"cols = ['f190486d6', '58e2e02e6', 'eeb9cd3aa', '9fd594eec', '6eef030c1', '15ace8c9f', \n        'fb0f5dbfe', '58e056e12', '20aa07010', '024c577b9', 'd6bb78916', 'b43a7cfd5',\n        '58232a6fb', '1702b5bf0', '324921c7b', '62e59a501', '2ec5b290f', '241f0f867',\n        'fb49e4212', '66ace2992', 'f74e8f13d', '5c6487af1', '963a49cdc', '26fc93eb7',\n        '1931ccfdd', '703885424', '70feb1494', '491b9ee45', '23310aa6f', 'e176a204a',\n        '6619d81fc', '1db387535']\n\nfrom multiprocessing import Pool\nCPU_CORES = 1\ndef _get_leak(df, cols, lag=0):\n    \"\"\" To get leak value, we do following:\n       1. Get string of all values after removing first two time steps\n       2. For all rows we shift the row by two steps and again make a string\n       3. Just find rows where string from 2 matches string from 1\n       4. Get 1st time step of row in 3 (Currently, there is additional condition to only fetch value if we got exactly one match in step 3)\"\"\"\n    series_str = df[cols[lag+2:]].apply(lambda x: \"_\".join(x.round(2).astype(str)), axis=1)\n    series_shifted_str = df[cols].shift(lag+2, axis=1)[cols[lag+2:]].apply(lambda x: \"_\".join(x.round(2).astype(str)), axis=1)\n    target_rows = series_shifted_str.progress_apply(lambda x: np.where(x == series_str)[0])\n    target_vals = target_rows.apply(lambda x: df.loc[x[0], cols[lag]] if len(x)==1 else 0)\n    return target_vals\n\ndef get_all_leak(df, cols=None, nlags=15):\n    \"\"\"\n    We just recursively fetch target value for different lags\n    \"\"\"\n    df =  df.copy()\n    for i in range(nlags):\n        print(\"Processing lag {}\".format(i))\n        df[\"leaked_target_\"+str(i)] = _get_leak(df, cols, i)\n    return df\n\ntest[\"target\"] = train[\"target\"].mean()\nall_df = pd.concat([train[[\"ID\", \"target\"] + cols], test[[\"ID\", \"target\"]+ cols]]).reset_index(drop=True)","fdb9938a":"NLAGS = 15 #Increasing this might help push score a bit\nall_df = get_all_leak(all_df, cols=cols, nlags=NLAGS)","5164241a":"leaky_cols = [\"leaked_target_\"+str(i) for i in range(NLAGS)]\ntrain = train.join(all_df.set_index(\"ID\")[leaky_cols], on=\"ID\", how=\"left\")\ntest = test.join(all_df.set_index(\"ID\")[leaky_cols], on=\"ID\", how=\"left\")\n\n# Backward Fill\ndef fill(df):\n    df = df.replace(0,np.nan)\n    df = df.fillna(method='bfill', axis= 1)\n    return df\n\n# Time Series\ny = train[\"target\"].copy()\nts_cols = [\"target\"] + [col for col in train.columns if col.startswith('leaked_target')]\nts_cols = ts_cols[::-1]\n\n# ReOrder\ntrain = train[ts_cols]\ntest = test[ts_cols]\n\n# Get Mean\ntrain[\"nonzero_mean\"] = train.apply(lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1)\ntest[\"nonzero_mean\"] = test.apply(lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1)\n\n# Fll Zero Values\nlstm_train = fill(train)\nlstm_test = fill(test)","bf169704":"# Log Scaling (MinMaxScaler probably doesn't play as well)\nlstm_train = np.log1p(lstm_train)\nlstm_test = np.log1p(lstm_test)","a5dabd61":"# Scaling\n# target_scaler = MinMaxScaler()\n# print(target_scaler.fit(lstm_train['target'].values.reshape(-1, 1)))\n# lstm_train['target']= target_scaler.transform(lstm_train['target'].values.reshape(-1, 1))\n\ny = lstm_train.target.copy()\nlstm_train.drop(\"target\", axis=1, inplace=True)\nlstm_test.drop(\"target\", axis=1, inplace=True)\n\n# lstm_train_scaler = MinMaxScaler()\n# lstm_train = pd.DataFrame(lstm_train_scaler.fit_transform(lstm_train), columns = lstm_train.columns)\n# lstm_test_scaler = MinMaxScaler()\n# lstm_test = pd.DataFrame(lstm_test_scaler.fit_transform(lstm_test), columns = lstm_test.columns)","d9330182":"# Save for use elsewhere\nlstm_train.to_csv(\"Mohin_train.csv\", index=True)\nlstm_test.to_csv(\"Mohin_test.csv\", index=True)","15c2d5b8":"X = lstm_train.values.reshape(lstm_train.shape[0],lstm_train.shape[1],1)\ntest_df = lstm_test.values.reshape(lstm_test.shape[0],lstm_test.shape[1],1)\nprint(\"X Shape: \", X.shape)\nprint(\"Test DF: \", test_df.shape)\ndel lstm_train, lstm_test\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.10, random_state=1, shuffle=False)\n# Utility\ndef root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true), axis=-1)) \n\ninputshape = (X.shape[1], X.shape[2])\nprint(\"Input Shape: \", inputshape)\n\nLSTM_PARAM = {\"batch_size\":64,\n              \"verbose\":2,\n              \"epochs\":45}\n\n# Model Architecture\nmodel_lstm = Sequential([\n    LSTM(100, input_shape=inputshape),\n    Activation('relu'),\n    Dropout(0.5),\n    Dense(10),\n    Activation('relu'),\n    Dropout(0.5),\n    Dense(1, activation = 'linear')\n])\n\n# Objective Function\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n# Compile\nopt = optimizers.Adam()\nmodel_lstm.compile(optimizer=opt, loss=\"mae\")\ncallbacks_list=[EarlyStopping(monitor=\"val_loss\",min_delta=.1, patience=3, mode='auto')]\nhist = model_lstm.fit(X_train, y_train,\n                      validation_data=(X_valid, y_valid),\n                      callbacks=callbacks_list,\n                      **LSTM_PARAM)\n\n# Model Evaluation\nbest = np.argmin(hist.history[\"val_loss\"])\nprint(\"Optimal Epoch: \",best+1)\nprint(\"Train Score: {}, Validation Score: {}\".format(hist.history[\"loss\"][best],hist.history[\"val_loss\"][best]))\n\nplt.plot(hist.history['loss'], label='train')\nplt.plot(hist.history['val_loss'], label='validation')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Mean Square Error\")\nplt.title(\"Train and Validation Error\")\nplt.legend()\nplt.savefig(\"Train and Validation MSE Progression.png\")\nplt.show()","b15129af":"# Transform\npred = model_lstm.predict(test_df)\npred = [x for sl in pred for x in sl]\n# scaled = target_scaler.inverse_transform(np.array([x for sl in pred for x in sl]).reshape(-1, 1))\n# scaled = [x for sl in scaled for x in sl]","32d711f8":"display(pd.Series(y).describe())\ndisplay(pd.Series(pred).describe())","fb03961e":"# Visualize\n# y.hist(label=\"Training Ground Truth\")\n# pd.Series(pred).hist(label=\"Submission Prediction\")\n# f, ax = plt.subplots()\n# sns.kdeplot(y, shade=True, color=\"r\", ax = ax)\n# sns.kdeplot(pred, shade=True, color=\"b\", ax = ax)\n# plt.legend(loc='upper right')\n# plt.title(\"Distribution for Ground Truth and Submission\")\n# plt.show","d2da1a31":"# Submit\nsubmission = pd.Series(np.expm1(pred))\nsubmission.rename(\"target\", inplace=True)\nsubmission.index = testdex\nsubmission.index.name = \"ID\"\nsubmission.to_csv(\"LSTM_submission.csv\",index=True,header=True)\nsubmission.head()","4c1699bc":"## LSTM on Mohin's Time Features\nby Nick Brooks, July 2018 <br>\nFeatures are not my own, my contribution here is the Long-Short Term Memory Sequential Model\n***\nForked from: https:\/\/www.kaggle.com\/tezdhar\/breaking-lb-fresh-start <br>\nWhich is authored by [Mohsin hasan](https:\/\/www.kaggle.com\/tezdhar\/breaking-lb-fresh-start)\n\nPlease go through Giba's post and kernel  to underrstand what this leak is all about\nhttps:\/\/www.kaggle.com\/titericz\/the-property-by-giba (kernel)\nhttps:\/\/www.kaggle.com\/c\/santander-value-prediction-challenge\/discussion\/61329 (post)\n\nAlso, go through this Jiazhen's kernel which finds more columns to exploit leak\nhttps:\/\/www.kaggle.com\/johnfarrell\/giba-s-property-extended-result","213eec98":"We take time series columns from [here](https:\/\/www.kaggle.com\/johnfarrell\/giba-s-property-extended-result)"}}