{"cell_type":{"abd5ea0d":"code","2d2c5abf":"code","ad2f11a9":"code","603c0c50":"code","d44b195f":"code","e41746e3":"code","eea85e7e":"code","7b72a057":"code","9d677942":"code","7f754989":"code","2ffa8930":"code","3ee231af":"code","c17b7207":"code","9c193591":"code","6d6e8608":"markdown","3cc0ade5":"markdown","0867a55c":"markdown","9c43d977":"markdown","30708c0d":"markdown","385e9bd5":"markdown","b1a857e9":"markdown","7105dafd":"markdown","ca33b9e7":"markdown","5ad06982":"markdown","cb72c902":"markdown"},"source":{"abd5ea0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom plotly.subplots import make_subplots\nplt.style.use(\"ggplot\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d2c5abf":"df = pd.read_csv(\"\/kaggle\/input\/youtube-new\/USvideos.csv\")","ad2f11a9":"df.head()","603c0c50":"df.describe()","d44b195f":"df.dtypes","e41746e3":"w_ratings = df[df[\"ratings_disabled\"]==False].copy()","eea85e7e":"corr = w_ratings[[\"views\", \"likes\", \"dislikes\"]].corr(method = \"spearman\")\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","7b72a057":"fig, axes = plt.subplots(ncols=3,figsize=(30,5))\nax1 = sns.scatterplot(x =w_ratings[\"views\"],y= w_ratings[\"likes\"], ax = axes[0]).set_title(\"Views - Like Correlation\")\nax2 = sns.scatterplot(x =w_ratings[\"views\"],y=w_ratings[\"dislikes\"], ax = axes[1]).set_title(\"Views - Dislikes Correlation\")\nax3 = sns.scatterplot(x= w_ratings[\"likes\"], y= w_ratings[\"dislikes\"], ax = axes[2]).set_title(\"Likes - Dislikes Correlation\")\nfig.tight_layout()\nplt.show()","9d677942":"fig, axes = plt.subplots(ncols=3,figsize=(20,8))\nax1 = sns.distplot(w_ratings[\"views\"], ax = axes[0]).set_title(\"Views Distribution\")\nax2 = sns.distplot(w_ratings[\"likes\"], ax = axes[1]).set_title(\"Likes Distribution\")\nax3 = sns.distplot(w_ratings[\"dislikes\"], ax = axes[2]).set_title(\"Dislikes Distribution\")\nfig.tight_layout()\nplt.show()","7f754989":"views_log = np.log(w_ratings.views+0.01)\n\nfig = plt.figure(figsize=(15,5))\n\nsns.distplot(views_log)\nrv = norm(loc = views_log.mean(), scale = views_log.std())\nx = np.arange(views_log.min(), views_log.max(), .1)\n\nplt.plot(x, rv.pdf(x))\n\nplt.show()","2ffa8930":"\nlikes_log = np.log(w_ratings.likes+0.01)\n\nfig = plt.figure(figsize=(15,5))\n\nsns.distplot(likes_log)\nrv = norm(loc = likes_log.mean(), scale = likes_log.std())\nx = np.arange(likes_log.min(), likes_log.max(), .1)\n\nplt.plot(x, rv.pdf(x))\nplt.show()","3ee231af":"dislikes_log = np.log(w_ratings.dislikes+0.01)\n\nfig = plt.figure(figsize=(15,5))\n\nsns.distplot(dislikes_log)\nrv = norm(loc = dislikes_log.mean(), scale = dislikes_log.std())\nx = np.arange(dislikes_log.min(), dislikes_log.max(), .1)\n\nplt.plot(x, rv.pdf(x))\nplt.show()","c17b7207":"fig = px.scatter(x= views_log, y = likes_log, trendline =\"ols\", trendline_color_override=\"red\")\nfig.update_layout(title_text=\"Correlation between Logs of Views & Likes\", xaxis_title = \"Views Log\", yaxis_title = \"Likes Log\")\nfig.show()","9c193591":"fig = px.scatter(x= views_log, y = dislikes_log, trendline =\"ols\", trendline_color_override=\"red\")\nfig.update_layout(title_text=\"Correlation between Logs of Views & Dislikes\", xaxis_title = \"Views Log\", yaxis_title = \"Dislike Log\")\nfig.show()","6d6e8608":"# So we Log-Transform the Variables and visualize the new distributions","3cc0ade5":"First, we'll make a separate dataframe so be can only focus on the videos didn't disabled ratings (ratings_disabled = False) for the correlations","0867a55c":"**Taking a peek at the data**","9c43d977":"Here we use \"Spearman\" method for correlation isntead of the most common used \"Person\". We will explain why later.","30708c0d":"# In this graphs, it's not really clear the correlations between this 3 variables. Let's check their distribution.","385e9bd5":"# So let's try to visualize this correlations now","b1a857e9":"# Now, we check that there's in fact a Correlation between the variables (Views and Likes are the most important, but let's add dislikes)","7105dafd":"We used the Spearman Correlation Method because it's not affected under a monotone transformation as the Log-Transform we just did. The Pearson method instead measures the \"linear\" correlation between variables, and this would've change under the transformation of the variables.","ca33b9e7":"# It appears to be a pretty strong correlation between Views, Likes & Dislikes","5ad06982":"# Now we can better Visualize the Correlation Between the variables","cb72c902":"# The 3 seem to be have more of a Log-Normal Distribution"}}