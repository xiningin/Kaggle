{"cell_type":{"bd5b1075":"code","3b67954c":"code","0dc50d8e":"code","71554a17":"code","ba723034":"code","6f5844fe":"code","6b88545c":"code","1f424119":"code","5415827a":"code","bcc1d39b":"code","8af7cbb6":"code","903f32b1":"code","0985d6f3":"code","b33b9349":"markdown"},"source":{"bd5b1075":"import numpy as np \nimport pandas as pd\nimport json\nfrom PIL import Image\nimport os\n\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.data import Dataset, DataLoader","3b67954c":"BATCH = 32\nEPOCHS = 20\n\nLR = 0.0001\nIM_SIZE = 256\n\nDEVICE = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nTRAIN_DIR = '..\/input\/cassava-leaf-disease-classification\/train_images\/'\nTEST_DIR = '..\/input\/cassava-leaf-disease-classification\/test_images\/'","0dc50d8e":"labels = json.load(open(\"..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\"))\nprint(labels)\n\ntrain = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntrain.head()","71554a17":"X_Train, Y_Train = train['image_id'].values, train['label'].values\nX_Test = [name for name in (os.listdir(TEST_DIR))]","ba723034":"class GetData(Dataset):\n    def __init__(self, Dir, FNames, Labels, Transform):\n        self.dir = Dir\n        self.fnames = FNames\n        self.transform = Transform\n        self.lbs = Labels\n        \n    def __len__(self):\n        return len(self.fnames)\n\n    def __getitem__(self, index):\n        x = Image.open(os.path.join(self.dir, self.fnames[index]))\n        if \"train\" in self.dir:            \n            return self.transform(x), self.lbs[index]            \n        elif \"test\" in self.dir:            \n            return self.transform(x), self.fnames[index]","6f5844fe":"Transform = transforms.Compose(\n    [transforms.ToTensor(),\n     transforms.Resize((IM_SIZE, IM_SIZE)),\n     transforms.RandomRotation(90),\n     transforms.RandomHorizontalFlip(p=0.5),\n     transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])","6b88545c":"trainset = GetData(TRAIN_DIR, X_Train, Y_Train, Transform)\ntrainloader = DataLoader(trainset, batch_size=BATCH, shuffle=True, num_workers=4)\n\ntestset = GetData(TEST_DIR, X_Test, None, Transform)\ntestloader = DataLoader(testset, batch_size=1, shuffle=False, num_workers=4)","1f424119":"model = torchvision.models.resnet152()\nmodel.fc = nn.Linear(2048, 5, bias=True)","5415827a":"model = model.to(DEVICE)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=LR)","bcc1d39b":"for epoch in range(EPOCHS):\n    tr_loss = 0.0\n\n    model = model.train()\n\n    for i, (images, labels) in enumerate(trainloader):\n        \n        images = images.to(DEVICE)\n        labels = labels.to(DEVICE)\n\n        logits = model(images)\n        loss = criterion(logits, labels)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        tr_loss += loss.detach().item()\n    \n    model.eval()\n    print('Epoch: %d | Loss: %.4f'%(epoch, tr_loss \/ i))","8af7cbb6":"s_ls = []\n\nwith torch.no_grad():\n    model.eval()\n    for image, fname in testloader: \n        image = image.to(DEVICE)\n        \n        logits = model(image)        \n        ps = torch.exp(logits)        \n        _, top_class = ps.topk(1, dim=1)\n        \n        for pred in top_class:\n            s_ls.append([fname[0], pred.item()])","903f32b1":"sub = pd.DataFrame.from_records(s_ls, columns=['image_id', 'label'])\nsub.head()","0985d6f3":"sub.to_csv(\"submission.csv\", index=False)","b33b9349":"## Simplest starting code for this competition\nChangeLog\nv3 - augmentation was added"}}