{"cell_type":{"3e9c51f3":"code","102040a7":"code","abc7ee21":"code","e2ca5295":"code","a4bc202c":"code","4ec8f72a":"code","cfd5332c":"code","cc423896":"code","ab39d720":"code","01201d71":"code","8713b2cb":"code","5ed46e95":"code","9289b592":"code","144b3f69":"code","1aeb3f8d":"code","7a92afcd":"code","597d747e":"code","4dc8fd95":"code","3cea78e0":"code","ecb7715e":"code","8aeea1c8":"code","701855a9":"code","e13f5e2a":"code","28e8230d":"code","57546c73":"code","7a270604":"code","d6b2b41a":"code","30ad5f43":"code","3ac2b705":"code","e472193d":"code","c30a63cb":"code","92a92a7e":"code","37dcad05":"code","97d89c8b":"code","64d382c5":"code","a751ea24":"code","7e3fd4d8":"code","799c8924":"code","56821314":"code","ec5ca9f2":"code","4ee1d5ad":"code","3c343fc7":"code","6416431c":"markdown","823f9c09":"markdown","e5673631":"markdown","b1bcb319":"markdown","472dfdb2":"markdown","eb6d5fc0":"markdown","b7e0f3ca":"markdown","08e4560b":"markdown","92600b74":"markdown","9cfdc811":"markdown"},"source":{"3e9c51f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","102040a7":"import torch\nimport numpy as np\n\ntrain_on_gpu = torch.cuda.is_available()\n\nif not train_on_gpu:\n    print('CUDA is not available.  Training on CPU ...')\nelse:\n    print('CUDA is available!  Training on GPU ...')","abc7ee21":"import pickle\nimport numpy as np\nimport random\nfrom skimage import io\n\nfrom tqdm import tqdm, tqdm_notebook\nfrom PIL import Image\nfrom pathlib import Path\n\nfrom torchvision import transforms\nfrom multiprocessing.pool import ThreadPool\nfrom sklearn.preprocessing import LabelEncoder\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn as nn\n\nfrom matplotlib import colors, pyplot as plt\n%matplotlib inline\n\n# \u0432 sklearn \u043d\u0435 \u0432\u0441\u0435 \u0433\u043b\u0430\u0434\u043a\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 colab \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \n# \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c warnings\nimport warnings\nwarnings.filterwarnings(action='ignore', category=DeprecationWarning)","e2ca5295":"SEED = 1937\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.cuda.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True\n","a4bc202c":"# \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0435\u0436\u0438\u043c\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \nDATA_MODES = ['train', 'val', 'test']\n# \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043a \u0440\u0430\u0437\u043c\u0435\u0440\u0443 224x224 px\nRESCALE_SIZE = 224\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0435\nDEVICE = torch.device(\"cuda\")","4ec8f72a":"class SimpsonsDataset(Dataset):\n    \"\"\"\n    \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0440\u0430\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0445 \u0438\u0437 \u043f\u0430\u043f\u043e\u043a\n    \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0441\u043a\u0430\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0432 \u0442\u043e\u0440\u0447\u0435\u0432\u044b\u0435 \u0442\u0435\u043d\u0437\u043e\u0440\u044b\n    \"\"\"\n    def __init__(self, files, mode):\n        super().__init__()\n        # \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n        self.files = sorted(files)\n        # \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b\n        self.mode = mode\n\n        if self.mode not in DATA_MODES:\n            print(f\"{self.mode} is not correct; correct modes: {DATA_MODES}\")\n            raise NameError\n\n        self.len_ = len(self.files)\n     \n        self.label_encoder = LabelEncoder()\n\n        if self.mode != 'test':\n            self.labels = [path.parent.name for path in self.files]\n            self.label_encoder.fit(self.labels)\n\n            with open('label_encoder.pkl', 'wb') as le_dump_file:\n                  pickle.dump(self.label_encoder, le_dump_file)\n                      \n    def __len__(self):\n        return self.len_\n      \n    def load_sample(self, file):\n        image = Image.open(file)\n        image.load()\n        return image\n  \n    def __getitem__(self, index):\n        # \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u0442\u0435\u043d\u0437\u043e\u0440\u044b PyTorch \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430\n        if self.mode == 'train': \n            transform = transforms.Compose([\n                transforms.Resize(size=(RESCALE_SIZE, RESCALE_SIZE)),\n                transforms.RandomRotation(degrees=30),\n                transforms.RandomHorizontalFlip(),\n                transforms.ColorJitter(hue=.1, saturation=.1),\n                transforms.ToTensor(),\n                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) \n            ])\n        else:\n            transform = transforms.Compose([\n                transforms.Resize(size=(RESCALE_SIZE, RESCALE_SIZE)),\n                transforms.ToTensor(),\n                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) \n            ])\n        x = self.load_sample(self.files[index])\n        x = transform(x)\n        if self.mode == 'test':\n            return x\n        else:\n            label = self.labels[index]\n            label_id = self.label_encoder.transform([label])\n            y = label_id.item()\n            return x, y","cfd5332c":"def imshow(inp, title=None, plt_ax=plt, default=False):\n    \"\"\"Imshow \u0434\u043b\u044f \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u0432\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt_ax.imshow(inp)\n    if title is not None:\n        plt_ax.set_title(title)\n    plt_ax.grid(False)","cc423896":"TRAIN_DIR = Path('\/kaggle\/input\/journey-springfield\/train\/simpsons_dataset')\nTEST_DIR = Path('\/kaggle\/input\/journey-springfield\/testset\/testset')\n\ntrain_val_files = sorted(list(TRAIN_DIR.rglob('*.jpg')))\ntest_files = sorted(list(TEST_DIR.rglob('*.jpg')))\n","ab39d720":"from sklearn.model_selection import train_test_split\n\ntrain_val_labels = [path.parent.name for path in train_val_files]\ntrain_files, val_files = train_test_split(train_val_files, test_size=0.25, \\\n                                          stratify=train_val_labels)","01201d71":"def create_dct_path_labels(train_files, train_labels):\n    dct_simpsons = {}\n    for label_i in np.unique(train_labels).tolist():\n        dct_simpsons[label_i] = []\n\n    for path_i, label_i in zip(train_files, train_labels):\n        dct_simpsons[label_i].append(path_i)\n\n    return dct_simpsons\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0438 \u0421\u0438\u043c\u043f\u0441\u043e\u043d\u043e\u0432, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u043f\u0443\u0442\u044f\u043c\u0438 \u043a \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c.\ndct_path_train = create_dct_path_labels(train_files, train_dataset.labels)\n\n# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u043c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u043d\u0435\u0435 100 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a, \u0434\u043e 100 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0432 \u043a\u043b\u0430\u0441\u0441\u0435\nfor person in dct_path_train:\n    if len(dct_path_train[person]) < 100:\n        dct_path_train[person] = dct_path_train[person] * (100 \/\/ len(dct_path_train[person]))\n        dct_path_train[person].extend(dct_path_train[person][:100 - len(dct_path_train[person])])\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \nfor person in dct_path_train:\n    print(f\"{person}\\t{len(dct_path_train[person])}\")\nnew_train_files = []\n\nfor person in dct_path_train:\n    new_train_files.extend(dct_path_train[person])\n\nval_dataset = SimpsonsDataset(val_files, mode='val')\nnew_train_dataset = SimpsonsDataset(new_train_files, mode='train')","8713b2cb":"fig, ax = plt.subplots(nrows=3, ncols=3,figsize=(8, 8), \\\n                        sharey=True, sharex=True)\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = new_train_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)","5ed46e95":"fig, ax = plt.subplots(nrows=3, ncols=3,figsize=(8, 8), \\\n                        sharey=True, sharex=True)\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = val_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)","9289b592":"def fit_epoch(model, train_loader, criterion, optimizer):\n    running_loss = 0.0\n    running_corrects = 0\n    processed_data = 0\n  \n    for inputs, labels in train_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n        optimizer.zero_grad()\n\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        preds = torch.argmax(outputs, 1)\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_data += inputs.size(0)\n              \n    train_loss = running_loss \/ processed_data\n    train_acc = running_corrects.cpu().numpy() \/ processed_data\n    return train_loss, train_acc","144b3f69":"def eval_epoch(model, val_loader, criterion):\n    model.eval()\n    running_loss = 0.0\n    running_corrects = 0\n    processed_size = 0\n\n    for inputs, labels in val_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n\n        with torch.set_grad_enabled(False):\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            preds = torch.argmax(outputs, 1)\n\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_size += inputs.size(0)\n    val_loss = running_loss \/ processed_size\n    val_acc = running_corrects.double() \/ processed_size\n    return val_loss, val_acc","1aeb3f8d":"def train(train_dataset, val_dataset, model, epochs, batch_size, shuffle=True, sampler=None):\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=shuffle, sampler=sampler, num_workers=4)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n    history = []\n    log_template = \"\\nEpoch {ep:03d} train_loss: {t_loss:0.4f} \\\n    val_loss {v_loss:0.4f} train_acc {t_acc:0.4f} val_acc {v_acc:0.4f}\"\n\n    with tqdm(desc=\"epoch\", total=epochs) as pbar_outer:\n        opt = torch.optim.AdamW(model.parameters())\n        scheduler = torch.optim.lr_scheduler.StepLR(opt, 3, 0.5)\n        criterion = nn.CrossEntropyLoss()\n\n        for epoch in range(epochs):\n            train_loss, train_acc = fit_epoch(model, train_loader, criterion, opt)\n            print(\"loss\", train_loss)\n            \n            val_loss, val_acc = eval_epoch(model, val_loader, criterion)\n            history.append((train_loss, train_acc, val_loss, val_acc))\n            scheduler.step()\n            pbar_outer.update(1)\n            tqdm.write(log_template.format(ep=epoch+1, t_loss=train_loss,\\\n                                           v_loss=val_loss, t_acc=train_acc, v_acc=val_acc))\n            \n    return history","7a92afcd":"def predict(model, test_loader):\n    with torch.no_grad():\n        logits = []\n    \n        for inputs in test_loader:\n            inputs = inputs.to(DEVICE)\n            model.eval()\n            outputs = model(inputs).cpu()\n            logits.append(outputs)\n            \n    probs = nn.functional.softmax(torch.cat(logits), dim=-1).numpy()\n    return probs","597d747e":"n_classes = len(np.unique(train_val_labels))","4dc8fd95":"from torchvision import models","3cea78e0":"model_resnet = models.resnet18(pretrained=True).to(DEVICE)\nchild_counter = 0\nfor child in model_resnet.children():\n    print(\" child\", child_counter, \"is:\")\n    print(child)\n    child_counter += 1","ecb7715e":"# \u0412\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043b\u043e\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\nfor i, child in enumerate(model_resnet.children()):\n    if i not in [9]:\n        for param in child.parameters():\n            param.requires_grad = False\n\nmodel_resnet.fc = nn.Sequential(nn.Linear(512,42))","8aeea1c8":"model_resnet = model_resnet.cuda()","701855a9":"history = train(new_train_dataset, val_dataset, model=model_resnet, epochs=5, \n#                 sampler=sampler_wht,\n                batch_size=64\n               )","e13f5e2a":"history = train(new_train_dataset, val_dataset, model=model_resnet, epochs=2, \n#                 sampler=sampler_wht,\n                batch_size=64\n               )","28e8230d":"import copy\n\n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0435\u0441\u0430 \u043d\u0430\u0448\u0435\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 model\nmodel_pre_weights = copy.deepcopy(model_resnet.state_dict())\ntorch.save(model_pre_weights, \"path_to\\\\model_pre_weights.pth\")","57546c73":"# \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u043b\u043e\u0438!!!\nfor child in model_resnet.children():\n    for param in child.parameters():\n        param.requires_grad = True","7a270604":"# \u041d\u0443, \u0441 \u0431\u043e\u0433\u043e\u043c!!!\nhistory = train(new_train_dataset, val_dataset, model=model_resnet, epochs=25, batch_size=64)","d6b2b41a":"# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0435\u0441\u0430 \u043d\u0430\u0448\u0435\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 model\nmodel_25epoch_weights = copy.deepcopy(model_resnet.state_dict())\ntorch.save(model_25epoch_weights, \"path_to\\\\model_25epoch_weights.pth\")","30ad5f43":"# \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432\u0435\u0441\u043e\u0432 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438\nmodel_resnet.load_state_dict(torch.load(\"path_to\\\\model_pre_weights.pth\"))","3ac2b705":"loss, acc, val_loss, val_acc = zip(*history)","e472193d":"plt.figure(figsize=(15, 9))\nplt.plot(loss, label=\"train_loss\")\nplt.plot(val_loss, label=\"val_loss\")\nplt.legend(loc='best')\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.show()","c30a63cb":"def predict_one_sample(model, inputs, device=DEVICE):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438\"\"\"\n    with torch.no_grad():\n        inputs = inputs.to(device)\n        model.eval()\n        logit = model(inputs).cpu()\n        probs = torch.nn.functional.softmax(logit, dim=-1).numpy()\n    return probs","92a92a7e":"random_characters = int(np.random.uniform(0,1000))\nex_img, true_label = val_dataset[random_characters]\nprobs_im = predict_one_sample(model_resnet, ex_img.unsqueeze(0))","37dcad05":"idxs = list(map(int, np.random.uniform(0,1000, 20)))\nimgs = [val_dataset[id][0].unsqueeze(0) for id in idxs]\n\nprobs_ims = predict(model_resnet, imgs)","97d89c8b":"label_encoder = pickle.load(open(\"label_encoder.pkl\", 'rb'))","64d382c5":"y_pred = np.argmax(probs_ims,-1)\n\nactual_labels = [val_dataset[id][1] for id in idxs]\n\npreds_class = [label_encoder.classes_[i] for i in y_pred]","a751ea24":"from sklearn.metrics import f1_score\n\nf1_score(actual_labels, y_pred, average='micro')","7e3fd4d8":"import matplotlib.patches as patches\nfrom matplotlib.font_manager import FontProperties\n\nfig, ax = plt.subplots(nrows=3, ncols=3,figsize=(12, 12), \\\n                        sharey=True, sharex=True)\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = val_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    \n    \n\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)\n    \n    actual_text = \"Actual : {}\".format(img_label)\n            \n    fig_x.add_patch(patches.Rectangle((0, 53),86,35,color='white'))\n    font0 = FontProperties()\n    font = font0.copy()\n    font.set_family(\"fantasy\")\n    prob_pred = predict_one_sample(model_resnet, im_val.unsqueeze(0))\n    predicted_proba = np.max(prob_pred)*100\n    y_pred = np.argmax(prob_pred)\n    \n    predicted_label = label_encoder.classes_[y_pred]\n    predicted_label = predicted_label[:len(predicted_label)\/\/2] + '\\n' + predicted_label[len(predicted_label)\/\/2:]\n    predicted_text = \"{} : {:.0f}%\".format(predicted_label,predicted_proba)\n            \n    fig_x.text(1, 59, predicted_text , horizontalalignment='left', fontproperties=font,\n                    verticalalignment='top',fontsize=8, color='black',fontweight='bold')","799c8924":"test_dataset = SimpsonsDataset(test_files, mode=\"test\")\ntest_loader = DataLoader(test_dataset, shuffle=False, batch_size=64)\nprobs = predict(model_resnet, test_loader)\n\n\npreds = label_encoder.inverse_transform(np.argmax(probs, axis=1))\ntest_filenames = [path.name for path in test_dataset.files]","56821314":"! ls ","ec5ca9f2":"import pandas as pd\nmysubmit = pd.DataFrame(columns=['Id'])\ntest_filenames = [path.name for path in test_dataset.files]\nmysubmit['Id'] = test_filenames","4ee1d5ad":"mysubmit[f'Expected'] = preds\nmysubmit.to_csv('resnet18_25epoch.csv', index=False)","3c343fc7":"#my_submit.to_csv('gdrive\/My Drive\/simpsons\/simple_cnn_baseline.csv', index=False)","6416431c":"# **Submit \u043d\u0430 Kaggle**","823f9c09":"\u041d\u0443 \u0438 \u0447\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u043e \u0432\u0441\u0435\u043c \u044d\u0442\u0438\u043c \u0434\u0435\u043b\u0430\u0442\u044c?","e5673631":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u043d\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u0430 \u0432 \u0441\u0432\u043e\u0438\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445. \u041c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u0430.\n","b1bcb319":"\u0425\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u0431\u043c\u0438\u0442. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u0435\u0442\u044c \u0438 \u043c\u0435\u0442\u043e\u0434\u044b eval \u0443 \u043d\u0435\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441\u0435\u0442\u044c \u0432 \u0440\u0435\u0436\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f. \u0421\u0442\u043e\u0438\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u0441\u043b\u043e\u0435 \u0441\u0442\u043e\u0438\u0442 softmax, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0442\u043e\u043c\u0443 \u0438\u043b\u0438 \u0438\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u043c.","472dfdb2":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u0440\u0438\u0432\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","eb6d5fc0":"\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0435 --- f1-score. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.","b7e0f3ca":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0442\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0442\u044c \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0430 \u0440\u0430\u0441\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c. \u0418\u0437\u0443\u0447\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u044d\u0442\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c.","08e4560b":"# \u041f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435?\n\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0430\u043c\u043e\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435, \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u0435\u043d\u044c\u043a\u0443\u044e \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0438 \u0441\u043c\u043e\u0433\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u0431\u043c\u0438\u0442, \u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0441\u043a\u043e\u0440 \u043d\u0430\u0441 \u044f\u0432\u043d\u043e \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u041d\u0430\u0434\u043e \u0441 \u044d\u0442\u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c.\n\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u043e\u0447\u043d\u044b\u0439\u0445 \u0443\u043b\u0443\u0447\u0448\u0435\u0439\u043d\u0438 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u0441\u0435\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u043f\u0440\u0438\u0448\u043b\u0438 \u0412\u0430\u043c \u0432 \u0433\u043e\u043b\u043e\u0432\u0443:\n\u0423\u0447\u0438\u043c \u0434\u043e\u043b\u044c\u0448\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0442\u0438\nlearning rate, batch size, \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0438 \u0432\u043e\u0442 \u044d\u0442\u043e \u0432\u0441\u0451\n\u041a\u0442\u043e \u0436\u0435 \u0442\u0430\u043a \u0441\u0442\u0440\u043e\u0438\u0442 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438? \u0410 \u0433\u0434\u0435 \u043f\u0443\u043b\u0438\u043d\u0433\u0438 \u0438 \u0431\u0430\u0442\u0447 \u043d\u043e\u0440\u043c\u044b? \u041d\u0430\u0434\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c\n\u041d\u0443 \u0440\u0430\u0437\u0432\u0435 \u0410\u0434\u0430\u043c \u043d\u0430\u0448\u0435 \u0432\u0441\u0435? adamW \u0434\u043b\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430, \u0441\u0442\u0430\u0442\u0435\u0439\u043a\u0430 \u0434\u043b\u044f \u043b\u044e\u0431\u0438\u0442\u0435\u043b\u0435\u0439 (\u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437), \u043d\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0445.\n\u041d\u0443 \u0440\u0430\u0437\u0432\u0435 \u044d\u0442\u043e deep learning? \u0412\u043e\u0442 ResNet \u0438 Inception, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0444\u0430\u0439\u043d\u0442\u044c\u044e\u043d\u0438\u0442\u044c \u043f\u043e\u0434 \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0442 \u044d\u0442\u043e \u044f \u043f\u043e\u043d\u0438\u043c\u0430\u044e (\u043c\u043e\u0436\u043d\u043e \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0432 \u043a\u043e\u043b\u0430\u0431\u0435, \u0430 \u043c\u043e\u0436\u043d\u043e \u0438 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c).\n\u0414\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e, \u043c\u043e\u0436\u043d\u043e \u0438\u0445 \u0430\u0443\u0433\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0434\u043e\u0443\u0447\u0438\u0442\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 ( \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437, \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440 \u0430\u0443\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439)\n\u0421\u0442\u043e\u0438\u0442 \u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u043e\u0431 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044f\u0445\n\u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u0443 \u0412\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f!","92600b74":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u0438.","9cfdc811":"#TODO : \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0430\u0431\u043c\u0438\u0442 (\u044d\u0442\u043e \u0432\u0430\u0436\u043d\u043e, \u0435\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435\u0441\u044c, \u043d\u043e \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u044d\u0442\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0438, \u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435 \u0432 \u0447\u0430\u0442 \u0438 \u0412\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442)"}}