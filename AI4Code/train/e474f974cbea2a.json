{"cell_type":{"52a667fc":"code","2ef4b923":"code","c405d1f2":"code","937ca1c4":"code","13135482":"code","7e8a1f6a":"code","ed3e4e78":"code","89cdef4a":"code","e8e2391a":"code","f6779bf4":"code","df9d5bb5":"code","043c5d69":"code","9e074ca1":"code","b9f020df":"code","83f79abd":"code","9daef14a":"code","c14cf7fb":"code","e9c23241":"code","42cf7294":"code","4d32f3aa":"code","61946a52":"code","5efe7a5f":"code","c4bf804f":"code","8d88d11e":"code","b8f4d224":"code","90e2dd9d":"code","b08ff7f5":"code","b64fed2f":"code","95118ab0":"code","c3753f6d":"code","c856d197":"code","fbb7388c":"code","18327581":"code","a0426474":"code","0604dd04":"code","40e3d703":"code","2ffe6ea8":"code","42b751d6":"code","dcfc7a2c":"code","5fc88e3e":"code","f964a0e9":"code","7154baaf":"code","205104c9":"code","d2c76eb8":"code","9f4d16fa":"code","bd5aa223":"code","1d137bf5":"code","da6a5b25":"code","c407c8ce":"code","6c03fec8":"code","b19d9d0c":"code","2d3ea2ce":"code","c35df702":"code","672acb5b":"code","ef80847d":"code","d5aa129c":"code","62b99ec4":"code","54652c29":"code","0298e5db":"code","1898343e":"code","1df9961b":"code","f52f6f50":"code","5b4e27b1":"code","dd7df608":"code","02687b99":"code","6f364516":"code","e1831c71":"code","999342a7":"code","7bdea37b":"code","33ee9d2f":"code","2620249b":"code","71806787":"code","4749994f":"code","6336b4aa":"code","4a0e69fc":"code","63e042d0":"code","aff0e17e":"code","65de9fd3":"code","00688001":"code","29c238d1":"code","f8fe1092":"code","014376a4":"code","3d65cb0c":"markdown","5a61b82c":"markdown","9cfd653f":"markdown","92864b00":"markdown","3dd7b933":"markdown","00e5c9a3":"markdown","75e52c10":"markdown","29ae66b7":"markdown","ff93c33a":"markdown","a90cbf52":"markdown","30a9e985":"markdown","b928db0f":"markdown","345fcd18":"markdown","1c0a2f96":"markdown","41c1daeb":"markdown"},"source":{"52a667fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ef4b923":"df = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand-complete\/hotel_booking.csv\")\ndf.head()","c405d1f2":"df.shape","937ca1c4":"df.isna().sum() # get missing values","13135482":"# Fill the missing values with '0' for \"Agent\" and \"Company\"\n# because if no agency is given it can be possible that the booking has been done without one,\n# if no company specified, it mean booking is done privately","7e8a1f6a":"# deal with missing values\ndef data_clean(df):\n    df.fillna(0, inplace=True)\n    print(df.isnull().sum())\n\ndata_clean(df)","ed3e4e78":"df.columns","89cdef4a":"list = ['adults', 'children', 'babies']\n\nfor i in list:\n    print('{} has unique values as {}'.format(i, df[i].unique()))","e8e2391a":"# wrong entries where adults, childern and babies are '0' at a time\nfilter = (df['children']==0) & (df['adults']==0) & (df['babies']==0) \ndf[filter]","f6779bf4":"# data after cleaning\ndata = df[~filter] # negation of filter i.e., data without above data\ndata.head()","df9d5bb5":"country_wise = data[data['is_canceled'] == 0]['country'].value_counts()\ncountry_wise","043c5d69":"# make a dataframe of above data\ncountry_wise_df = country_wise.reset_index()\ncountry_wise_df.columns = ['country', 'no. of guests']\ncountry_wise_df","9e074ca1":"import folium\nfrom folium.plugins import HeatMap\nbasemap = folium.Map()\n\nimport plotly.express as px\nmap_guests = px.choropleth(country_wise_df,\n             locations=country_wise_df['country'],\n             color=country_wise_df['no. of guests'],\n             hover_name=country_wise_df['country'],\n             title='Home country of guests')\nmap_guests.show()","b9f020df":"data2 = data[data['is_canceled']==0]\ndata2.columns","83f79abd":"plt.figure(figsize=(12,8))\nsns.boxplot(x='reserved_room_type', y='adr', hue='hotel', data=data2)\nplt.title('Price of rooms types per night & per person')\nplt.xlabel('Room type')\nplt.ylabel('Price(Euro)')\nplt.legend()\nplt.show()","9daef14a":"data_resort = data[(data['hotel']=='Resort Hotel') & (data['is_canceled']==0)]\ndata_city = data[(data['hotel']=='City Hotel') & (data['is_canceled']==0)]","c14cf7fb":"data_resort.head()","e9c23241":"resort_hotel_df = data_resort.groupby(['arrival_date_month'])['adr'].mean().reset_index()\nresort_hotel_df","42cf7294":"city_hotel_df = data_city.groupby(['arrival_date_month'])['adr'].mean().reset_index()\ncity_hotel_df","4d32f3aa":"# merge both data \nfinal_df = resort_hotel_df.merge(city_hotel_df, on='arrival_date_month')\nfinal_df.columns=['month', 'price_for_resort_hotel', 'price_for_city_hotel'] # rename columns\nfinal_df","61946a52":"# python modules for sorting the month, weekday etc\n!pip install sort_dataframeby_monthorweek\n!pip install sorted-months-weekdays","5efe7a5f":"import sort_dataframeby_monthorweek as sd\n\ndef sort_data(df, column):\n    return sd.Sort_Dataframeby_Month(df, column)","c4bf804f":"final_df = sort_data(final_df, 'month')\nfinal_df","8d88d11e":"final_df.columns","b8f4d224":"# line plot\npx.line(final_df, x='month', y=['price_for_resort_hotel', 'price_for_city_hotel'], \n        title='Room price per night over the months')","90e2dd9d":"rush_resort_df = data_resort['arrival_date_month'].value_counts().reset_index()\nrush_resort_df.columns = ['month', 'no. of guests']\nrush_resort_df","b08ff7f5":"rush_city_df = data_city['arrival_date_month'].value_counts().reset_index()\nrush_city_df.columns = ['month', 'no. of guests']\nrush_city_df","b64fed2f":"final_rush_df = rush_resort_df.merge(rush_city_df, on='month')\nfinal_rush_df.columns = ['month', 'no. of guests in resort', 'no. of guests in city hotel']\nfinal_rush_df","95118ab0":"final_rush_df = sort_data(final_rush_df, 'month')\nfinal_rush_df","c3753f6d":"# line plot\npx.line(final_rush_df, x='month', y=['no. of guests in resort', 'no. of guests in city hotel'], \n        title='Total number of guests per months')","c856d197":"data.corr()","fbb7388c":"# find the correlation with \"is_canceled\" because it is depended feature \n# (how all other variable are going to be depended on is_canceled?)\n\ncorrelation = data.corr()['is_canceled']\ncorrelation","18327581":"correlation.abs().sort_values(ascending=False)","a0426474":"data.groupby('is_canceled')['reservation_status'].value_counts()","0604dd04":"data.columns","40e3d703":"# exclude numerical columns which are not going to contribute much\nnum_not = ['days_in_waiting_list', 'arrival_date_year']","2ffe6ea8":"# get numerical features\nnum_features = [col for col in data.columns if data[col].dtype != 'O' and col not in num_not]\nnum_features","42b751d6":"# exclude the categorical features that are not going to contribute much\ncat_not = ['arrival_date_year', 'assigned_room_type', 'booking_changes', 'reservation_status', 'country', 'days_in_waiting_list']","dcfc7a2c":"# get catrgorical features\ncat_features = [col for col in data.columns if data[col].dtype == 'O' and col not in cat_not]\ncat_features","5fc88e3e":"data_cat = data[cat_features]\ndata_cat.head()","f964a0e9":"data_cat.dtypes","7154baaf":"data_cat['reservation_status_date'] = pd.to_datetime(data_cat['reservation_status_date'])","205104c9":"# derived features\ndata_cat['year'] = data_cat['reservation_status_date'].dt.year\ndata_cat['month'] = data_cat['reservation_status_date'].dt.month\ndata_cat['day'] = data_cat['reservation_status_date'].dt.day\n\ndata_cat['cancellation'] = data['is_canceled']","d2c76eb8":"# drop a feature because derived features already carries its information\ndata_cat.drop('reservation_status_date', axis=1, inplace=True) # drop vertically and update dataframe","9f4d16fa":"data_cat.head()","bd5aa223":"data_cat['market_segment'].unique()","1d137bf5":"cols = data_cat.columns[0:8] # each columns except 'cancellation'","da6a5b25":"# mean encoding, for example\ndata_cat.groupby(['hotel'])['cancellation'].mean() # it will replace the resort hotel with value '0.277674'","c407c8ce":"#  Each categorical feature has its value which will be used by ML model\n# and convert into dictionary so it can be easily mapped\n\nfor col in cols:\n    print(data_cat.groupby([col])['cancellation'].mean().to_dict())\n    print('\\n')","6c03fec8":"# mapping the data into dataframe\nfor col in cols:\n    dict = data_cat.groupby([col])['cancellation'].mean().to_dict()\n    data_cat[col] = data_cat[col].map(dict)","b19d9d0c":"data_cat.head()","2d3ea2ce":"dataframe = pd.concat([data_cat, data[num_features]], axis=1)","c35df702":"dataframe.columns","672acb5b":"dataframe.drop('cancellation', axis=1, inplace=True) # we had both 'cancellation' and 'is_canceled'\ndataframe","ef80847d":"dataframe.head()","d5aa129c":"def handle_outlier(col):\n    dataframe[col] = np.log1p(dataframe[col])","62b99ec4":"# for lead_time\nsns.distplot(dataframe['lead_time'])","54652c29":"handle_outlier('lead_time')\nsns.distplot(dataframe['lead_time'])","0298e5db":"# for adr\nsns.distplot(dataframe['adr'])","1898343e":"handle_outlier('adr')\nsns.distplot(dataframe['adr'].dropna())","1df9961b":"dataframe.isnull().sum()","f52f6f50":"dataframe.dropna(inplace=True) # drop and update the dataframe","5b4e27b1":"x = dataframe.drop('is_canceled', axis=1) # independent features\ny = dataframe['is_canceled'] # dependent feature","dd7df608":"x.shape","02687b99":"y.shape","6f364516":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","e1831c71":"feature_sel_model = SelectFromModel(Lasso(alpha=0.005,random_state=0))","999342a7":"feature_sel_model.fit(x,y)","7bdea37b":"feature_sel_model.get_support() # if a feature is going to contribute or not","33ee9d2f":"cols = x.columns\nselected_features = cols[feature_sel_model.get_support()] # using as a filter, feature corresponding to True will be filtered\n\nprint('total features: {}'.format(x.shape[1]))\nprint('selected features: {}'.format(len(selected_features)))","2620249b":"# update x\nx = x[selected_features]","71806787":"x.shape","4749994f":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)\nlogreg = LogisticRegression(solver='liblinear')\n\nlogreg.fit(X_train,y_train)","6336b4aa":"y_pred = logreg.predict(X_test)\ny_pred","4a0e69fc":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, y_pred)","63e042d0":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_test, y_pred)","aff0e17e":"from sklearn.model_selection import cross_val_score","65de9fd3":"score = cross_val_score(logreg, x, y, cv=10)\nscore.mean()","00688001":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","29c238d1":"models = []\n\nmodels.append(('LogisticRegression', LogisticRegression(solver='liblinear')))\nmodels.append(('Naive bayes', GaussianNB()))\nmodels.append(('RandomForest', RandomForestClassifier()))\nmodels.append(('Decision Tree', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier()))","f8fe1092":"models","014376a4":"for name, model in models:\n    print(name)\n    model.fit(X_train, y_train)\n    \n    predictions = model.predict(X_test)\n    print(confusion_matrix(predictions, y_test))\n    \n    print(accuracy_score(predictions, y_test))\n    print('\\n')","3d65cb0c":"- when booking is not cancelled and reservation status is check-out = 75011 guests\n- when booking is going to be cancelled when reservation is canceled = 42993 guest","5a61b82c":"## Analysing prices of hotel across year for Resort Hotel and City Hotel  \n(how much price varies over year?)","9cfd653f":"## Applying techniques of Feature Importance\nTo select most important features for ML model","92864b00":"The best distribution of price with City hotel is with \"G\" room type and with Resort hotel is with \"H\" and \"C\"","3dd7b933":"## Handling Outliers","00e5c9a3":"## Apply Logistic Regression","75e52c10":"## DATA CLEANING","29ae66b7":"## Analysing home country of guests","ff93c33a":"## Analysing the demand of hotels  \n(highest number of guests in which season?)","a90cbf52":"## Apply Cross Validation","30a9e985":"## Select important features using ML (correlation matrix)","b928db0f":"## Handling Categorical features (Mean Encoding)","345fcd18":"## Extract derived features from data","1c0a2f96":"eg. \"is_canceled\" and \"lead_time\" have a correlation of 0.29, i.e., if lead_time value increases, there is a probability of 29% that is_canceled also increases.","41c1daeb":"## Apply multiple ML algorithms"}}