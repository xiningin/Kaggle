{"cell_type":{"870f7a12":"code","9edad44b":"code","dd3eef12":"code","073fa71b":"code","14a229c6":"code","2dfe8461":"code","a3f8a609":"code","541b8522":"code","8017f009":"code","dd58b2a2":"code","0469c61f":"code","736b7b31":"code","b4901e13":"code","bf462dd6":"code","d31d8196":"code","ec42c560":"code","86cb939f":"code","b4034c9a":"code","136fb783":"code","5f5a599c":"code","e2a364e9":"code","926262e2":"code","64d819df":"code","6445635f":"code","940ae944":"code","9e489f2a":"code","08d95f2b":"code","c8f329a2":"code","64c46ffa":"code","5a012d5c":"code","2ed1409b":"code","2c9e73f3":"code","925f12fa":"code","0f4adda3":"code","002dd79e":"code","6d5ddb1c":"code","7133acc3":"code","9c678cc1":"code","94abc46e":"code","68fb295c":"code","0b380889":"code","0d521d1b":"code","6d3ef732":"code","c0c3c0ed":"code","369ddc91":"markdown","c8e15d38":"markdown","dabd5f5f":"markdown","34964a25":"markdown","db26b6cc":"markdown","bd6f5824":"markdown","b1b09104":"markdown","49c1d5f4":"markdown","56640c9c":"markdown","4af89664":"markdown"},"source":{"870f7a12":"!pip install pillow","9edad44b":"import PIL\nprint('Pillow Version:', PIL.__version__)","dd3eef12":"from PIL import Image\nimg1= Image.open(\"..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/pliers\/000000.jpg\")","073fa71b":"print(img1.format,img1.size,img1.mode)","14a229c6":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/pliers\/000000.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","2dfe8461":"from PIL import Image\nfrom numpy import asarray\n# load the image\nimage = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Gasoline Can\/Gasoline can (101).jpg')\n# convert image to numpy array\ndata = asarray(image)\n# summarize shape\nprint(data.shape)\n# create Pillow image\nimage2 = Image.fromarray(data)\n# summarize image details\nprint(image2.format)\nprint(image2.mode)\nprint(image2.size)","a3f8a609":"pyplot.imshow(image2)","541b8522":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Hammer\/000149.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","8017f009":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Wrench\/000010.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","dd58b2a2":"# create a thumbnail of an image\nfrom PIL import Image\n# load the image\nimage = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Hammer\/000013.jpg')\n# shows the size of the image\nprint(image.size)\n# create a thumbnail and preserve aspect ratio\nimage.thumbnail((100,100))\n# report the size of the thumbnail\nprint(image.size)","0469c61f":"image = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Gasoline Can\/Gasoline can (105).jpg')\n# report the size of the image\nprint(image.size)\n# resize image and ignore original aspect ratio\nimg_resized = image.resize((200,200))\n# report the size of the thumbnail\nprint(img_resized.size)","736b7b31":"# load image\nimage = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Hammer\/000110.jpg')\n# horizontal flip\nhoz_flip = image.transpose(Image.FLIP_LEFT_RIGHT)\n# vertical flip\nver_flip = image.transpose(Image.FLIP_TOP_BOTTOM)\n# plot all three images using matplotlib\npyplot.subplot(311)\npyplot.imshow(image)\npyplot.subplot(312)\npyplot.imshow(hoz_flip)\npyplot.subplot(313)\npyplot.imshow(ver_flip)\npyplot.show()","b4901e13":"# load image\nimage = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Toolbox\/000023.jpg')\n# plot original image\npyplot.subplot(311)\npyplot.imshow(image)\n# rotate 45 degrees\npyplot.subplot(312)\npyplot.imshow(image.rotate(45))\n# rotate 90 degrees\npyplot.subplot(313)\npyplot.imshow(image.rotate(90))\npyplot.show()\n#rotates 270 degrees\npyplot.imshow(image.rotate(270))\npyplot.show()","bf462dd6":"from PIL import Image\n# load image\nimage = Image.open('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Hammer\/000014.jpg')\n# create a cropped image\ncropped = image.crop((100, 100, 200, 200))\n# show cropped image\npyplot.imshow(cropped)","d31d8196":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\n%matplotlib inline","ec42c560":"train = pd.read_csv('..\/input\/mechanical-tools-dataset\/Annotated.csv')    # reading the csv file\ntrain.head()  ","86cb939f":"train.head(20)","b4034c9a":"train.tail()","136fb783":"train.shape","5f5a599c":"train.columns","e2a364e9":"train_image1 = []\nfor i in range(0,17):\n    img1 = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Screw Driver\/'+train['Id'][i],target_size=(400,400,3))\n    img1 = image.img_to_array(img1)\n    img1 = img1\/255\n    train_image1.append(img1)\ntrain_image2 = []\nfor i in range(17,33):\n    img2 = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Hammer\/'+train['Id'][i],target_size=(400,400,3))\n    img2 = image.img_to_array(img2)\n    img2 = img2\/255\n    train_image2.append(img2)\ntrain_image3 = []\nfor i in range(34,50):\n    img3 = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/pliers\/'+train['Id'][i],target_size=(400,400,3))\n    img3 = image.img_to_array(img3)\n    img3 = img3\/255\n    train_image3.append(img3)\ntrain_image4 = []\nfor i in range(46,75):\n    img4 = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Rope\/'+train['Id'][i],target_size=(400,400,3))\n    img4 = image.img_to_array(img4)\n    img4 = img4\/255\n    train_image4.append(img4)\ntrain_image5 = []\nfor i in range(71,91):\n    img5 = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/Toolbox\/'+train['Id'][i],target_size=(400,400,3))\n    img5 = image.img_to_array(img5)\n    img5 = img5\/255\n    train_image5.append(img5)\nX = np.array(train_image1+train_image2+train_image3+train_image4+train_image5)","926262e2":"X.shape","64d819df":"plt.imshow(X[8])","6445635f":"plt.imshow(X[17])","940ae944":"plt.imshow(X[35])","9e489f2a":"plt.imshow(X[50])","08d95f2b":"plt.imshow(X[60])","c8f329a2":"plt.imshow(X[70])","64c46ffa":"plt.imshow(X[2])","5a012d5c":"plt.imshow(X[6])","2ed1409b":"plt.imshow(X[69])","2c9e73f3":"plt.imshow(X[86])","925f12fa":"plt.imshow(X[90])","0f4adda3":"y = np.array(train.drop(['Label','Id'],axis=1))","002dd79e":"y.shape","6d5ddb1c":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.1)","7133acc3":"model = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=(5, 5), activation=\"relu\", input_shape=(400,400,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=64, kernel_size=(5, 5), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(6, activation='sigmoid'))","9c678cc1":"model.summary()","94abc46e":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","68fb295c":"model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test), batch_size=16)","0b380889":"img = image.load_img('..\/input\/mechanical-tools-dataset\/Mechanical Tools Image dataset\/Mechanical Tools Image dataset\/pliers\/000310.jpg',target_size=(400,400,3))\nimg = image.img_to_array(img)\nimg = img\/255","0d521d1b":"plt.imshow(img)","6d3ef732":"plt.imshow(X_test[2])","c0c3c0ed":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","369ddc91":"**Before making predictions, we now need to preprocess the test images using the same steps we saw earlier, i.e, resizing and rescaling.**","c8e15d38":"# Loads Image and training set resized","dabd5f5f":"**Resizing Images**","34964a25":"**Loads the photo as a Pillow Image object and converts it to a NumPy array, then converts it back to an Image object again.**","db26b6cc":"**Converting images into numpy arrays and back**","bd6f5824":"**Cropping Images**","b1b09104":" Resize a new image and ignore the original aspect ratio.","49c1d5f4":"# Deep learning model from scratch","56640c9c":"**Rotating Image**","4af89664":"# Flipping, Rotating and Cropping images\n**Flipping Image**"}}