{"cell_type":{"9c7a4972":"code","a80cbb58":"code","5f49b426":"code","643179bd":"code","e13582ad":"code","1222c550":"code","0ec72c8f":"code","e4382638":"code","e76c5e35":"code","b2155184":"code","c65b7899":"code","be1f4578":"code","3bd7747a":"code","119bf7d2":"code","24f7c008":"code","56b7db1e":"code","deafac38":"code","83a07f5a":"code","7eaed076":"code","d86a8643":"markdown","d5030263":"markdown","a32a1259":"markdown","5b4daa0d":"markdown","0a4f48f4":"markdown","32acaf35":"markdown","5933848f":"markdown","2f1a3743":"markdown","201a6dcb":"markdown","2ede330a":"markdown","2a6583ef":"markdown","cb58dab9":"markdown","3e11fbbd":"markdown","de813a58":"markdown","fb0dce52":"markdown","b10a8f3e":"markdown","8bfdc3b6":"markdown","a019f2c4":"markdown","9d8ab554":"markdown"},"source":{"9c7a4972":"!pip install -q scanpy\n\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","a80cbb58":"bdata = sc.read('..\/input\/theory-introto-singlecell-rnaseq-images\/test_adata\/test_adata.h5ad')\n","5f49b426":"bdata","643179bd":"print(bdata.obs.shape)\nbdata.obs.head()","e13582ad":"print(bdata.var.shape)\nbdata.var.head()","1222c550":"bdata.var_names  # print names of all the genes","0ec72c8f":"bdata.X","e4382638":"bdata.obs[\"new_cell_level_data\"] = [\"test\"] * bdata.n_obs  # adds a new column into obs, similar to pandas","e76c5e35":"bdata.obs.head()","b2155184":"# This might take a minute.\ncount_dataframe = pd.read_csv('..\/input\/singlecell-rnaseq-data-from-mouse-brain\/brain_counts.csv',\n                              index_col=0)  # use the first column to label the rows (the 'index')\n\n## print the first 2 rows of our dataframe\ncount_dataframe.head(2)","c65b7899":"# We can find out how many genes and cells are in the dataset by asking for its shape:\nprint(count_dataframe.shape)","be1f4578":"metadata_dataframe = pd.read_csv('..\/input\/singlecell-rnaseq-data-from-mouse-brain\/brain_metadata.csv', index_col=0)\nprint(metadata_dataframe.shape)\nmetadata_dataframe.head(2)","3bd7747a":"# We can count the number of times each value appears in a column like this:\nprint(pd.value_counts(metadata_dataframe['subtissue']))","119bf7d2":"adata = sc.AnnData(X = count_dataframe, obs = metadata_dataframe)\nprint(adata.shape)","24f7c008":"adata.X #expression matrix","56b7db1e":"is_spike_in = {}\nnumber_of_spike_ins = 0\n\nfor gene_name in adata.var_names:\n    if 'ERCC' in gene_name:\n        is_spike_in[gene_name] = True # record that we found a spike-in\n        number_of_spike_ins += 1 # bump the counter\n    else:\n        is_spike_in[gene_name] = False # record that this was not a spike-in\n        \nadata.var['ERCC'] = pd.Series(is_spike_in) # because the index of adata.var and the keys of is_spike_in match, anndata will take care of matching them up\nprint('found this many spike ins: ', number_of_spike_ins)","deafac38":"adata.var.head()","83a07f5a":"# We can save the AnnData objectfor later use:\nadata.write('brain_raw.h5ad') ## the h5ad extension is AnnData-specific","7eaed076":"!zip \"brain_raw.zip\" \".\/brain_raw.h5ad\"","d86a8643":"bdata.var contains information about the genes","d5030263":"<h2 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Preprocessing - Labeling spike-ins<\/h2>","a32a1259":"### Brain Metadata\nMetadata describes each cell.","5b4daa0d":"We found out all the spike-ins and added True against them in Gene info ie adata.var and False against non-spike-ins.","0a4f48f4":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Creating Anndata from the csv files in the dataset<\/h1>","32acaf35":"# Tabular Data\n## Constructing AnnData using the two csv files\nWe now have two dataframes, containing the counts and metadata from the Tabula Muris brain dataset. To keep these organized, we'll use a data structure called <b>AnnData<\/b>.","5933848f":"### Labeling spike-ins\nBecause this is smartseq2 data, we may have spike-ins. \nAn RNA spike-in is an RNA transcript of known sequence and quantity used to calibrate measurements in RNA hybridization assays, such as DNA microarray experiments, RT-qPCR, and RNA-Seq.\n\nA spike-in is designed to bind to a DNA molecule with a matching sequence, known as a control probe. This process of specific binding is called hybridization. A known quantity of RNA spike-in is mixed with the experiment sample during preparation. The degree of hybridization between the spike-ins and the control probes is used to normalize the hybridization measurements of the sample RNA.\n\n- These gene names start with ERCC. We can label them in adata.var as a gene annotation.","2f1a3743":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Exploration of Anndata object<\/h1>\n<br>","201a6dcb":"Basically, bdata.obs contains the observation across each cell.","2ede330a":"![Screenshot 2021-09-12 005741.jpg](attachment:a7dba344-9755-4f95-b3db-20b5a09f715b.jpg)","2a6583ef":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Exploring a Test Anndata from SCVI<\/h1>\n\nhttps:\/\/docs.scvi-tools.org\/en\/stable\/api\/reference\/scvi.data.spleen_lymph_cite_seq.html#scvi.data.spleen_lymph_cite_seq","cb58dab9":"count_dataframe is cells X genes. There are 3401 cells and 23433 genes.","3e11fbbd":"### Anndata : https:\/\/anndata.readthedocs.io\/en\/latest\/\nAnnData stores observations (samples) of variables\/features in the rows of a matrix. \n\nSingle dimensional annotations of the observation and variables are stored in the obs and var attributes as DataFrames. This is intended for metrics calculated over their axes. Multi-dimensional annotations are stored in obsm and varm, which are aligned to the objects observation and variable dimensions respectively. Square matrices representing graphs are stored in obsp and varp, with both of their own dimensions aligned to their associated axis. Additional measurements across both observations and variables are stored in layers.\n\n- Anndata.X - Data matrix of shape n_obs \u00d7 n_vars - stores the count matrix\n- Anndata.obs - One-dimensional annotation of observations (pd.DataFrame). - stores metadata about the observations (cells)\n- var - One-dimensional annotation of variables\/ features (pd.DataFrame). - stores metadata about the variables (genes)\n- uns - unstructured annotation (ordered dictionary). - stores any additional, unstructured information we decide to attach later","de813a58":"Is the numpy array of Cells X Genes","fb0dce52":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Introduction - Anndata<\/h1>","b10a8f3e":"## Loading the Data\n### Brain Counts\nExpression matrix where each column corresponds to a gene (or transcript) and each row corresponds to a single cell","8bfdc3b6":"We have 5 columns of information about 3,401 cells. Sounds reasonable","a019f2c4":"### Installations","9d8ab554":"The column names represent genes. The row names represent unique cell identifiers that were assigned by the authors of the dataset."}}