{"cell_type":{"b1cd7846":"code","3b41de4c":"code","66aeb389":"code","167b8565":"code","a1574300":"code","ac27bc9d":"code","e4bc579d":"code","7bef4d13":"code","481dafee":"code","fd3bc33b":"code","c0812766":"code","8db7ebf3":"code","d2bf914d":"code","3f141ea1":"code","68453520":"code","dfc24f45":"code","5fbb7e5c":"code","34ac34b0":"code","6b0f3c02":"code","d01b2d7e":"code","d2c0e1c2":"code","6b7d1ee2":"code","6fb4d116":"code","767612cb":"code","2ae3de7d":"code","8e18b650":"code","805abb83":"code","9e137522":"code","dcc8a517":"code","4ff3be2d":"code","6b79a989":"markdown","65fa01b9":"markdown","da5b6f24":"markdown","54933147":"markdown","5d0fd88f":"markdown","13f8c836":"markdown","915d7228":"markdown","399d9821":"markdown","819dfde6":"markdown","962def49":"markdown","a529a7a6":"markdown","67ca3397":"markdown","2ee31241":"markdown","f1fc0190":"markdown","a014f5c2":"markdown","cec68b2a":"markdown","f3ea7da0":"markdown"},"source":{"b1cd7846":"# importing required liberary \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom IPython.display import clear_output\nfrom time import sleep\nimport os","3b41de4c":"Train_Dir = '..\/input\/training.zip' # path to zip of train data \nTest_Dir = '..\/input\/test.zip' # path to zip of test data\nlookid_dir = '..\/input\/IdLookupTable.csv'\ntrain_data = pd.read_csv(Train_Dir)  # pandas unzip data on fly \ntest_data = pd.read_csv(Test_Dir) # pandas unzip data on fly\nlookid_data = pd.read_csv(lookid_dir) \nos.listdir('..\/input') # lists all folders and files in input folder ","66aeb389":"train_data.shape","167b8565":"train_data.head().T","a1574300":"train_data.isnull().any().value_counts()","ac27bc9d":"\ntrain_data.fillna(method = 'ffill',inplace = True) # ffill passes the last valid values forward \n#train_data.reset_index(drop = True,inplace = True)\n","e4bc579d":"train_data.isnull().any().value_counts()","7bef4d13":"# converting empty into zeros and vectorization \nimag = []\nfor i in range(0,7049):\n    img = train_data['Image'][i].split(' ')\n    img = ['0' if x == '' else x for x in img]\n    imag.append(img)\n    \n    ","481dafee":"image_list = np.array(imag,dtype = 'float')\nX_train = image_list.reshape(-1,96,96,1) # reshaping image into <number of images>*96*96*1 as it is grayscale \n\n","fd3bc33b":"plt.imshow(X_train[0].reshape(96,96),cmap='gray')\nplt.show()","c0812766":"training = train_data.drop('Image',axis = 1) # seperating features \n\n# vectorizing features\ny_train = []\nfor i in range(0,7049):\n    y = training.iloc[i,:]\n\n    y_train.append(y)\ny_train = np.array(y_train,dtype = 'float')\n\n","8db7ebf3":"from keras.layers import Conv2D,Dropout,Dense,Flatten\nfrom keras.models import Sequential\n\nmodel = Sequential([Flatten(input_shape=(96,96)),\n                         Dense(128, activation=\"relu\"),\n                         Dropout(0.1),\n                         Dense(64, activation=\"relu\"),\n                         Dense(30)\n                         ])\n\n\nmodel.summary()","d2bf914d":"from keras.layers.advanced_activations import LeakyReLU\nfrom keras.models import Sequential, Model\nfrom keras.layers import Activation, Convolution2D, MaxPooling2D, BatchNormalization, Flatten, Dense, Dropout, Conv2D,MaxPool2D, ZeroPadding2D","3f141ea1":"model = Sequential()\n\nmodel.add(Convolution2D(32, (3,3), padding='same', use_bias=False, input_shape=(96,96,1)))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(32, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(64, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(64, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(96, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\n# model.add(BatchNormalization())\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(128, (3,3),padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(256, (3,3),padding='same',use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(512, (3,3), padding='same', use_bias=False))\nmodel.add(LeakyReLU(alpha = 0.1))\nmodel.add(BatchNormalization())\n\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(30))\nmodel.summary()","68453520":"model.compile(optimizer='adam', \n              loss='mean_squared_error',\n              metrics=['mae'])","dfc24f45":"model.fit(X_train,y_train,epochs = 50,batch_size = 256,validation_split = 0.2)","5fbb7e5c":"#preparing test data\ntimag = []\nfor i in range(0,1783):\n    timg = test_data['Image'][i].split(' ')\n    timg = ['0' if x == '' else x for x in timg]\n    \n    timag.append(timg)","34ac34b0":"timage_list = np.array(timag,dtype = 'float')\nX_test = timage_list.reshape(-1,96,96,1) ","6b0f3c02":"plt.imshow(X_test[0].reshape(96,96),cmap = 'gray')\nplt.show()","d01b2d7e":"pred = model.predict(X_test)","d2c0e1c2":"def plot_img_with_points(img, points):\n    for i in range(0, len(points), 2):\n        x, y = points[i], points[i+1]\n        plt.plot(x, y, color='red', marker = 'o')\n#         print(x, y)\n    plt.imshow(img.reshape(96,96),cmap = 'gray')\n    plt.show()","6b7d1ee2":"fig = plt.figure(figsize=(20, 20))\n\nfor i in range(5):\n    ax = fig.add_subplot(5, 4, i + 1)\n    plot_img_with_points(X_test[i], pred[i])\n\nplt.show()","6fb4d116":"lookid_list = list(lookid_data['FeatureName'])\nimageID = list(lookid_data['ImageId']-1)\npre_list = list(pred)","767612cb":"rowid = lookid_data['RowId']\nrowid=list(rowid)","2ae3de7d":"feature = []\nfor f in list(lookid_data['FeatureName']):\n    feature.append(lookid_list.index(f))","8e18b650":"preded = []\nfor x,y in zip(imageID,feature):\n    preded.append(pre_list[x][y])","805abb83":"rowid = pd.Series(rowid,name = 'RowId')","9e137522":"loc = pd.Series(preded,name = 'Location')","dcc8a517":"submission = pd.concat([rowid,loc],axis = 1)\n","4ff3be2d":"submission.to_csv('face_key_detection_submission.csv',index = False)","6b79a989":"Lets predict our results","65fa01b9":"Now lets prepare our testing data","da5b6f24":"# Facial Kaypoint detection\nFacial keypoint detection is a beignner level datadet in CNN.    \nThis following solution belongs to Karan Jakhar for keypoint detection competition    ","54933147":"Lets see first image in out test data","5d0fd88f":"As there is no missing values we can now separate the labels and features.\nThe image is our feature and other values are labes that we have to predict later.\nAs image column values are in string format and there is also some missing values so we have to split the string by space and append it and also handling missing values","13f8c836":"Lets reshape and convert it into float value.","915d7228":"Lets check for missing values","399d9821":"Now the last step is the create our submission file keeping in the mind required format.\nThere should be two columns :- RowId and Location\nLocation column values should be filled according the lookup table provided ( IdLookupTable.csv)\n","819dfde6":" <h3>Facial Keypoint Detection<\/h3>         \n First of all let's discuss what we are given.        \nWe are given three CSV files.        <\/br>\ntraining.csv :- Its has coordinates of facial keypoints like left eye, rigth eye etc and also the image. <\/br>     \ntest.csv :- Its has image only and we have to give coordinates of various facial keypoints by looking at third csv file which is IdLookupTable.csv <\/br>     \nRest everything is explained below.      <\/br>\n**I would really appreciate if you could upvote this kernel.**\n","962def49":"As our data is ready for training , lets define our model. I am using keras and simple dense layers. For loss function I am using 'mse' ( mean squared error ) as we have to predict new values. Our result evaluted on the basics of 'mae' ( mean absolute error ) . ","a529a7a6":"Lets check for missing values now","67ca3397":"Now lets separate labels.","2ee31241":"Lets explore our dataset","f1fc0190":"Lets see what is the first image.","a014f5c2":"Reshaping and converting ","cec68b2a":"So there are missing values in 28 columns. We can do two things here one remove the rows having missing values and another is the fill missing values with something. I used two option as removing rows will reduce our dataset. \nI filled the missing values with the previous values in that row.","f3ea7da0":"Now our model is defined and we will train it by calling fit method. I ran it for 500 iteration keeping batch size and validtion set size as 20% ( 20% of the training data will be kept for validating the model )."}}