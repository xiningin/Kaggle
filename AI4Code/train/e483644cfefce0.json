{"cell_type":{"2c743088":"code","35c2e8c9":"code","2913fb04":"code","fcdce187":"code","abfc71bb":"code","543f4c71":"code","a37d5897":"code","7d5844a0":"code","54dca0c7":"code","19362dfc":"code","0c34e4f6":"code","cd6b75b6":"code","6430c621":"code","97b7039b":"code","5fbe0b3c":"code","3deeb5ea":"code","44f0cf19":"code","0b329828":"code","c4ba621f":"code","4a6a1fa0":"code","43f66f56":"code","4593c16e":"code","dfa3381a":"code","49b5ff40":"code","a1e300b6":"code","60e6980c":"code","975d39ec":"code","2a12be04":"code","35b4e8af":"code","98b96ae4":"code","99b5b089":"code","bcd546a8":"code","26e45bdb":"code","b7dec294":"code","fde8d107":"code","823768c3":"code","96d67090":"code","79990329":"code","d91cfd22":"code","27c929ea":"code","4949c174":"code","f8d8b6cd":"code","5a3101ce":"code","70e4fbbe":"code","13b36de7":"code","a787ac09":"code","a05ef658":"code","7d959353":"code","ee26ac94":"code","3080028f":"code","bccdbda2":"code","ef40ee34":"code","b380a817":"code","fcfca485":"code","5a61b20f":"code","56f16913":"code","8ea706b5":"code","d00db867":"code","be55f136":"code","a51baa59":"code","8aadc669":"code","fce56c45":"code","3634438b":"code","f5ac8f2a":"code","7d5362ec":"code","8b1d7009":"code","5c2c202e":"code","4c21fdfa":"code","41fc4781":"code","450c55b4":"code","52f4becb":"code","8fc813c4":"code","dddcf737":"code","3d88e990":"markdown","471cb6c6":"markdown","2a2b27ba":"markdown","b2541615":"markdown","e7461218":"markdown","8fbf6f81":"markdown","eaa92662":"markdown","aab5c363":"markdown"},"source":{"2c743088":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","35c2e8c9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","2913fb04":"df_train = pd.read_csv(\"..\/input\/train.csv\")","fcdce187":"df_test = pd.read_csv(\"..\/input\/test.csv\")","abfc71bb":"print(df_train.shape)\nprint(df_test.shape)","543f4c71":"df_train.head()","a37d5897":"#check the columns\ndf_train.columns","7d5844a0":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(30)","54dca0c7":"def nullvalue_function(df_train,percentage):\n    \n    # Checking the null value occurance\n    \n    print(df_train.isna().sum())\n\n    # Printing the shape of the data \n    \n    print(df_train.shape)\n    \n    # Converting  into percentage table\n    \n    null_value_table=pd.DataFrame((df_train.isna().sum()\/df_train.shape[0])*100).sort_values(0,ascending=False )\n    \n    null_value_table.columns=['null percentage']\n    \n    # Defining the threashold values \n    \n    null_value_table[null_value_table['null percentage']>percentage].index\n    \n    # Drop the columns that has null values more than threashold \n    df_train.drop(null_value_table[null_value_table['null percentage']>percentage].index,axis=1,inplace=True)\n    \n    # Replace the null values with median() # continous variables \n    for i in df_train.describe().columns:\n        df_train[i].fillna(df_train[i].median(),inplace=True)\n    # Replace the null values with mode() #categorical variables\n    for i in df_train.describe(include='object').columns:\n        df_train[i].fillna(df_train[i].value_counts().index[0],inplace=True)\n  \n    print(df_train.shape)\n    \n    return df_train","19362dfc":"df_train=nullvalue_function(df_train,30)","0c34e4f6":"## Top 20 columns important as per variance\ndf_train.var().sort_values(ascending=False).index[0:20]","cd6b75b6":"## Continuous and categorical columns\n\ncont=df_train.describe().columns\ncat=df_train.describe(include='object').columns","6430c621":"cat","97b7039b":"cat.shape","5fbe0b3c":"cont","3deeb5ea":"cont.shape","44f0cf19":"df_train_cat=df_train[cat]","0b329828":"df_train_cat.shape","c4ba621f":"for i in df_train_cat.columns:\n    print(i,df_train_cat[i].nunique())","4a6a1fa0":"from sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfor i in df_train_cat.columns:\n    le = preprocessing.LabelEncoder()\n    le.fit(df_train_cat[i])\n    transformed=le.transform(df_train_cat[i]) \n    df_train_cat[i]=transformed\n    ","43f66f56":"df_train_cat.columns","4593c16e":"df_train_cont=df_train[cont]","dfa3381a":"df_train_cont.shape","49b5ff40":"df_train_cat.shape","a1e300b6":"df_train.shape","60e6980c":"df_train_cont.head()","975d39ec":"df_train_cat.head()","2a12be04":"analytical_dataset=pd.DataFrame()","35b4e8af":"for i in df_train_cont.columns:\n    analytical_dataset[i]=df_train_cont[i]","98b96ae4":"for i in df_train_cat.columns:\n    analytical_dataset[i]=df_train_cat[i]","99b5b089":"analytical_dataset.shape","bcd546a8":"## Prioritizing the variables based on varaince \n\nanalytical_dataset_var=analytical_dataset[analytical_dataset.var().sort_values(ascending=False).index[0:30]]","26e45bdb":"analytical_dataset_var.head()","b7dec294":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(analytical_dataset_var)\nnormalized_x=scaler.transform(analytical_dataset_var)","fde8d107":"analytica_dataset_norm=pd.DataFrame(normalized_x)","823768c3":"analytica_dataset_norm.columns=analytical_dataset_var.columns","96d67090":"analytica_dataset_norm.head()","79990329":"analytica_dataset_norm.shape","d91cfd22":"analytica_dataset_norm['SalePrice']=df_train['SalePrice']","27c929ea":"#descriptive statistics summary\nanalytica_dataset_norm['SalePrice'].describe()","4949c174":"#histogram\nsns.distplot(analytica_dataset_norm['SalePrice']);","f8d8b6cd":"#skewness and kurtosis\nprint(\"Skewness: %f\" % analytica_dataset_norm['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % analytica_dataset_norm['SalePrice'].kurt())","5a3101ce":"analytica_dataset_norm.columns","70e4fbbe":"#scatterplot\ncol=['SalePrice', 'LotArea', 'GrLivArea', 'MiscVal', 'BsmtFinSF1','BsmtUnfSF', 'TotalBsmtSF', '2ndFlrSF',]\nsns.pairplot(analytica_dataset_norm[col], size = 2.5)\nplt.show();","13b36de7":"plt.figure(figsize=(10,10))\ncol=['SalePrice', 'LotArea', 'GrLivArea', 'MiscVal', 'BsmtFinSF1','BsmtUnfSF', 'TotalBsmtSF', '2ndFlrSF',]\nsns.heatmap(analytica_dataset_norm[col].corr(),annot=True)","a787ac09":"y=analytica_dataset_norm['SalePrice']\nx=analytica_dataset_norm.drop('SalePrice',axis=1)","a05ef658":"df_test.head()","7d959353":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)","ee26ac94":"print(x.shape,y.shape,x_train.shape, x_test.shape, y_train.shape, y_test.shape)","3080028f":"### KNN Algorithms\n\nfrom sklearn.neighbors import KNeighborsRegressor\nknn=KNeighborsRegressor(n_neighbors=5)\nknn.fit(x_train,y_train)\nkNN_predicted=knn.predict(x_test)","bccdbda2":"kNN_predicted","ef40ee34":"kNN_actual = y_test.values","b380a817":"kNN_actual","fcfca485":"pd.DataFrame(kNN_actual,kNN_predicted).head()","5a61b20f":"kNN_data_comparision=pd.DataFrame(kNN_actual,kNN_predicted)\nkNN_data_comparision.reset_index(inplace=True)","56f16913":"kNN_data_comparision.columns=['kNN_actual','kNN_predicted']","8ea706b5":"kNN_data_comparision.head()","d00db867":"kNN_data_comparision[0:292].plot(figsize=(20,5))","be55f136":"Error=abs(sum(kNN_data_comparision['kNN_actual']-kNN_data_comparision['kNN_predicted']))","a51baa59":"Error","8aadc669":"from sklearn.metrics import mean_squared_error\nmean_squared_error(kNN_actual, kNN_predicted)","fce56c45":"sum(abs(kNN_actual-kNN_predicted))\/len(kNN_actual)","3634438b":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(kNN_actual, kNN_predicted))","f5ac8f2a":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nlm.fit(x_train,y_train)\nlm_predicted=lm.predict(x_test)","7d5362ec":"lm_predicted","8b1d7009":"lm_actual=y_test.values","5c2c202e":"erros=pd.DataFrame(lm_actual, lm_predicted).reset_index()","4c21fdfa":"erros.columns=['lm_acutal','lm_predicted']","41fc4781":"erros.head()","450c55b4":"erros.plot(figsize=(20,5))","52f4becb":"from sklearn.metrics import mean_squared_error\nmean_squared_error(lm_actual, lm_predicted)","8fc813c4":"sum(abs(lm_actual-lm_predicted))\/len(lm_actual)","dddcf737":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(lm_actual, lm_predicted))","3d88e990":"## Model Building","471cb6c6":"## Normalization of the dataset","2a2b27ba":"### Linear regrssion","b2541615":"## Printing MSE MAE RMSE","e7461218":"## Null Value Treatment","8fbf6f81":"### kNN Algorithm","eaa92662":"## Printing MSE MAE RMSE","aab5c363":"## Missing data"}}