{"cell_type":{"1c87d754":"code","259764ec":"code","bcdca037":"code","689aeb88":"code","9cb5f6a9":"code","4a6a90ad":"code","f55c6c02":"code","e34c9e01":"code","5e49fe74":"code","91bd540c":"code","10e55825":"code","119f4bc9":"code","46b19d84":"code","3dcf13cf":"code","f8212510":"code","d3c16572":"code","84e61093":"code","f5d573ee":"code","f2258beb":"code","3b05c940":"code","03db8b60":"code","45d6b980":"code","46c33859":"code","e4132430":"code","37a7f175":"code","9b1321ca":"code","825f0e8f":"markdown","7b1e3ada":"markdown","68dcb835":"markdown","fc2125a1":"markdown","09ce4fe0":"markdown","1856e26a":"markdown","e1913c1b":"markdown","64c2aac4":"markdown","25342376":"markdown","197496a1":"markdown","cff270cf":"markdown","1d8f924b":"markdown","cc5af934":"markdown","f08247ec":"markdown","3040b6ca":"markdown","cfac31c5":"markdown"},"source":{"1c87d754":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","259764ec":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n%matplotlib inline\nimport glob\nimport pydicom\n\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom PIL import Image\n\nimport cv2 as cv\n\nimport random \n\nrandom.seed(42)","bcdca037":"TARGET_SIZE = 512\n\ndef dicom2array(path, voi_lut = True, fix_monochrome = True):\n    \"\"\"\n    Transform a dicom file to an array.\n    \n    - path : path of the dicom file\n    - voi_lut : Apply VOI LUT transformation\n    - fix_monochrome : Indicate if we fix the pixel value for specific files.\n    \n    VOI LUT (Value of Interest - Look Up Table) : The idea is to have a larger representation of the data.\n    Since, dicom files have larger pixel display range than usuall pictures. The idea is to keep a larger representation in order ot better see the subtle differences.\n    \n    Fix Monochrome : Some images have MONOCHROME1 interpretation. Which means that higher pixel values corresponding to the dark instead of the white.\n    \"\"\"\n    dicom = pydicom.read_file(path)\n    \n    # Apply the VOI LUT\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n        \n    # Fix the representation\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    \n    data = data * 255\n    \n    data = data.astype(np.uint8)\n    \n    return data\n\ndef img_vizualisation(imgs, nb_samples = 5):\n    \n    fig, axes = plt.subplots(nrows=nb_samples \/\/ 5, ncols=min(5, nb_samples), figsize=(min(5, nb_samples) * 4, 4 * (nb_samples \/\/ 5)))\n    i = 0\n    for img in imgs:\n        axes[i \/\/ 5, i % 5].imshow(np.array(img), cmap=plt.cm.gray, aspect='auto')\n        axes[i \/\/ 5, i % 5].axis('off')\n        i += 1\n    fig.show()    \n","689aeb88":"TRAIN_PATH = \"..\/input\/siim-covid19-detection\/train\/\"\n\npaths = glob.glob(TRAIN_PATH + \"*\/*\/*.dcm\")","9cb5f6a9":"sampled_path = random.sample(paths, 10)\n\nsamples = []\nfor path in sampled_path:\n    img = dicom2array(path)\n    samples.append(img)","4a6a90ad":"img_vizualisation(samples, 10)","f55c6c02":"img_example = samples[4]\nimg_example_hist = cv.equalizeHist(img_example)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n\nax1.imshow(img_example, cmap=plt.cm.gray)\nax1.axis('off')\nax1.set_title(\"Original image\")\n\nax2.imshow(img_example_hist, cmap=plt.cm.gray)\nax2.axis('off')\nax2.set_title(\"Histogram Equalization applied on the original image\")\n\nfig.show()","e34c9e01":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 4))\n\nax1.hist(img_example.flatten(), 256, [0, 256])\nax1.set_title(\"Original image\")\n\nax2.hist(img_example_hist.flatten(), 256, [0, 256])\nax2.set_title(\"Histogram Equalization applied on the original image\")\n\nfig.show()","5e49fe74":"import scipy.misc\n\nequalized_samples = []\nfor sample in samples:\n    img = cv.equalizeHist(sample)\n    equalized_samples.append(img)\n    \nimg_vizualisation(equalized_samples, 10)","91bd540c":"clahe = cv.createCLAHE(clipLimit=40.0, tileGridSize=(8,8))\n\nimg_example = samples[9]\nimg_example_clahe = clahe.apply(img_example)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n\nax1.imshow(img_example, cmap=plt.cm.gray)\nax1.axis('off')\nax1.set_title(\"Original image\")\n\nax2.imshow(img_example_clahe, cmap=plt.cm.gray)\nax2.axis('off')\nax2.set_title(\"CLAHE applied on the original image\")\n\nfig.show()","10e55825":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 4))\n\nax1.hist(img_example.flatten(), 256, [0, 256])\nax1.set_title(\"Original image\")\n\nax2.hist(img_example_clahe.flatten(), 256, [0, 256])\nax2.set_title(\"CLAHE applied on the original image\")\n\nfig.show()","119f4bc9":"clahe_samples = []\n\nclahe = cv.createCLAHE(clipLimit=40.0, tileGridSize=(8,8))\n\nfor sample in samples:\n    img = clahe.apply(sample)\n    clahe_samples.append(img)\n    \nimg_vizualisation(clahe_samples, 10)","46b19d84":"clahe_samples_2 = []\n\nclahe = cv.createCLAHE(clipLimit=20.0, tileGridSize=(15, 15))\n\nfor sample in samples:\n    img = clahe.apply(sample)\n    clahe_samples_2.append(img)\n    \nimg_vizualisation(clahe_samples_2, 10)","3dcf13cf":"import skimage.morphology\nfrom skimage.morphology import disk\n\nimg_example = samples[9]\n\nfootprint = disk(15)\n\ntop = skimage.morphology.white_tophat(img_example, footprint)\nbottom = skimage.morphology.black_tophat(img_example, footprint)\n\noutput = img_example + top - bottom\n\n\ncompare = np.concatenate((img_example, output), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare, cmap=plt.cm.gray)\nplt.show()","f8212510":"img_example = samples[9]\n\n# The size of the structured element has impact \nfilterSize = (15, 15)\nkernel = cv.getStructuringElement(cv.MORPH_RECT, filterSize) # MORPH_ELLIPSE\n\n\ntophat_img = cv.morphologyEx(img_example, cv.MORPH_TOPHAT, kernel)\nbothat_img = cv.morphologyEx(img_example, cv.MORPH_BLACKHAT, kernel) #\u00a0Black --> Bottom\n\noutput = img_example + tophat_img - bothat_img\n\ncompare = np.concatenate((img_example, output), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare, cmap=plt.cm.gray)\nplt.show()","d3c16572":"hat_samples = []\n\nkernel = cv.getStructuringElement(cv.MORPH_RECT, (15, 15)) # MORPH_ELLIPSE\n\nfor sample in samples:\n\n    tophat = cv.morphologyEx(sample, cv.MORPH_TOPHAT, kernel)\n    bothat = cv.morphologyEx(sample, cv.MORPH_BLACKHAT, kernel)\n    img = sample + tophat - bothat\n\n    hat_samples.append(img)\n    \nimg_vizualisation(hat_samples, 10)","84e61093":"img_example = equalized_samples[9]\n\nkernel = cv.getStructuringElement(cv.MORPH_RECT, (15, 15)) # MORPH_ELLIPSE\n\ntophat_img = cv.morphologyEx(img_example, cv.MORPH_TOPHAT, kernel)\nbothat_img = cv.morphologyEx(img_example, cv.MORPH_BLACKHAT, kernel) # Black --> Bottom\n\noutput = img_example + tophat_img - bothat_img\n\ncompare = np.concatenate((img_example, output), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare, cmap=plt.cm.gray)\nplt.show()","f5d573ee":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 4))\n\nax1.hist(img_example.flatten(), 256, [0, 256])\nax1.set_title(\"Original image\")\n\nax2.hist(output.flatten(), 256, [0, 256])\nax2.set_title(\"This approach on the original image\")\n\nfig.show()","f2258beb":"hat_samples = []\n\nkernel = cv.getStructuringElement(cv.MORPH_RECT, (15, 15)) # MORPH_ELLIPSE\n\nfor sample in equalized_samples:\n\n    tophat = cv.morphologyEx(sample, cv.MORPH_TOPHAT, kernel)\n    bothat = cv.morphologyEx(sample, cv.MORPH_BLACKHAT, kernel)\n    img = sample + tophat - bothat\n\n    hat_samples.append(img)\n    \nimg_vizualisation(hat_samples, 10)","3b05c940":"img_example = samples[0]\n# Note : ksize need to be an odd number.\nnoised_samples_example = cv.medianBlur(img_example, 5)\n\ncompare = np.concatenate((img_example, noised_samples_example), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare, cmap=plt.cm.gray)","03db8b60":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 4))\n\nax1.hist(img_example.flatten(), 256, [0, 256])\nax1.set_title(\"Original image\")\n\nax2.hist(noised_samples_example.flatten(), 256, [0, 256])\nax2.set_title(\"Noise reduction on the original image\")\n\nfig.show()","45d6b980":"#\u00a0https:\/\/stackoverflow.com\/questions\/7110899\/how-do-i-apply-a-dct-to-an-image-in-python\nfrom scipy.fftpack import dct, idct\n\ndef dct2(a):\n    return dct(dct(a.T, norm='ortho').T, norm='ortho')\n\ndef idct2(a):\n    return idct(idct(a.T, norm='ortho').T, norm='ortho')  \n\ndef dtc_transform(img):\n    return idct2(dct2(img))\n\nimg_example = samples[0]\nimg_idct = dtc_transform(img_example)\n\nprint(\"Check if the image are similar :\", np.allclose(img_example, img_idct))\n\ncompare = np.concatenate((img_example, img_idct), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare, cmap=plt.cm.gray)","46c33859":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 4))\n\nax1.hist(img_example.flatten(), 256, [0, 256])\nax1.set_title(\"Original image\")\n\nax2.hist(img_idct.flatten(), 256, [0, 256])\nax2.set_title(\"Noise reduction on the original image\")\n\nfig.show()","e4132430":"dct_samples = []\n\nfor sample in samples:\n    img = dtc_transform(sample)\n    dct_samples.append(img)\n    \nimg_vizualisation(dct_samples, 10)","37a7f175":"channel_1 = samples[9]\nchannel_2 = clahe_samples_2[9]\nchannel_3 = hat_samples[9]\n\n# Merge all channel to create our image\noutput = np.dstack((channel_1, channel_2, channel_3))\n\nreference = np.dstack((channel_1, channel_1, channel_1))\n\n# See the difference\ncompare = np.concatenate((reference, output), axis=1)\n\nplt.figure(figsize=(20,10))\nplt.imshow(compare)\nplt.show()","9b1321ca":"multi_channel_samples = []\n\nfor i in range(len(samples)):\n    channel_1 = samples[i]\n    channel_2 = clahe_samples_2[i]\n    #\u00a0channel_2 = clahe_samples[i]\n    channel_3 = hat_samples[i]\n    \n    out_img = np.dstack((channel_1, channel_2, channel_3))\n    \n    multi_channel_samples.append(out_img)\n    \nimg_vizualisation(multi_channel_samples, 10)","825f0e8f":"## Change the approach\n\nI'm really not satisfy with the last approach. I think that maybe by applying histogram equalization first and then applying it the morphological operator could be interesting.","7b1e3ada":"# Noise reduction\n\nWhen we realize a x-rays images, we could had some noise during the process. Before doing image enhancement, it could be interesting to reduce\/remove the noise present in our image. In this section, we are going to see two filter : the median filter and the DCT filter.\n\n## Median filter \n\nThe first method that we are going to use is the median filter. For each pixel value on our image, we will select the median value from the values next to the current pixel. In order to do that, we will pass over our image a box (for example : a box of 5x5). This will allow us to remove abnormal value.","68dcb835":"# Conclusion\n\nIn this notebook, we see some techniques that could be useful for image enhancement. \n\nThanks for your reading and your feedback. Don't hesitate if you have questions. \n\nIf you want to go further, there are other methods that I have not mentioned. Do not hesitate to go and see if you are interested.\n\n- MAHE (Median adaptive histogram equalization)\n- Multiple Morphological Gradient (mMG)\n- Wieners filter","fc2125a1":"## Contrast Enhancement of Medical X-Ray ImageUsing Morphological Operators with OptimalStructuring Element\n\nPaper : Contrast Enhancement of Medical X-Ray ImageUsing Morphological Operators with OptimalStructuring Element\n> https:\/\/arxiv.org\/pdf\/1905.08545.pdf\n\nThe idea of this paper is to apply a combination of Top-hat and Bottom-hat Transform. \n\n- Top Hat : It is the difference between input image and Opening of the image. \n- Opening : Erosion followed by dilatation\n\n- Black Hat : It is the difference between the closing of the input image and input image. \n- Closing : Dilation followed by Erosion.\n\nI have made two implementations, one with skimage library using a disk as the footprint used for top and black hat. And another implementation with opencv using an ellipse. The opencv method is faster than the skimage. \n\nRegarding the result, I am not really satisfied by this method (I maybe miss something in the paper). I let you see the result.","09ce4fe0":"### Visualization on the sample data","1856e26a":"## References \n\n- https:\/\/en.wikipedia.org\/wiki\/Histogram_equalization\n- https:\/\/docs.opencv.org\/master\/d5\/daf\/tutorial_py_histogram_equalization.html\n- https:\/\/www.ndt.net\/article\/icem2004\/papers\/64\/64.htm\n- https:\/\/medium.com\/@florestony5454\/median-filtering-with-python-and-opencv-2bce390be0d1\n","e1913c1b":"# COVID 19 - Image Enhancement\n\nIn this notebook, we will see the existing method for x-rays image enhancement.\nThe idea of this notebook, is do get a better visualization of the x-rays images, which could be useful for doctors to see possible disease or for deep learning techniques to preprocess the input images.\n\nIf you any remark, feel free to leave a comment. Good reading.","64c2aac4":"# Sample visualization\n\nTo see the different techniques, we will have a sample set that will serve as a reference.","25342376":"# Histogram equalization\n\nHistogram equalization is a method that **increases the global contrast of images**, especially when the image is represented by a narrow range of intensity values. With this method, we can adjust the pixel intensity in order to obtain a better distribution on the histogram using the full range of intensities evenly. This allows for areas of lower local constrast to gain higher contrast. \n\nFor radiography, this could be usefull, to have a better view of bone structure in x-ray images. A disadvantge of this method is that it is indiscriminate. It may increase the contrast of background noise, while decreasing the usable signal.\n\n> https:\/\/en.wikipedia.org\/wiki\/Histogram_equalization","197496a1":"## DCT-based filter\n\nThe idea of DCT (Discrete Cosinus Transform) based filter is to decompose a signal as a sum of cosines function. The DCT is the same idea of Fourier transformation where we decompose a signal into frequencies. The DCT is well used for data compression. But, here we are going to use it for noise reduction.\n\nFirst, we need to understand that an image can be decomposed as signals from the two dimensions of our image. Signals from the x-axis and signals form the y-axis. Based on that, we can decompose our image by decomposing each signal of our image. Each decomposition tries to get the core of the signal. It tries to get the best continues signals possible.\n\nThus, if for a signal, we have an abnormal value for one given point (noise), by decomposing the signal we try to get the core of the signal. Then, this abnormal value will .\n\nFinally, with the decomposition of our image, we can reconstruct the image by applying the inverse function of DCT. By doing that, we get an image similar from the original one but with no abnormals values.  ","cff270cf":"### CLAHE with different parameters","1d8f924b":"# Combine the different approaches\n\nAs we are dealing with grayscale image, it could be interesting to add different approaches and merge them in a single image in order to create a color image. The main advantage of this, is as we are usually using pretrained model, almost all of them use 3 channel. So, why not given additional information instead of just duplicate the channel.\n\nIn this proposition, I will keep the original image in the first channel and put in the two remaining channels transformed images from the original one.","cc5af934":"### Visualization on the sample data","f08247ec":"# CLAHE (Contrast Limited Adaptive Histogram Equalization) \n\nThe first histogram equalization we just saw, considers the global contrast of the image. In many cases, it is not a good idea. \nWe could have part of the image lost due to over-brightness.\n\nSo, to solve this problem, **adaptive histogram equalization** is used. To apply this method, image is divided into small blocks called \"tiles\". Then each of these blocks are histogram equalized as usual. So in a small area, histogram would confine to a small region (unless there is noise). If noise is there, it will be amplified. To avoid this, **contrast limiting** is applied. If any histogram bin is above the specified contrast limit, those pixels are clipped and distributed uniformly to other bins before applying histogram equalization. After equalization, to remove artifacts in tile borders, bilinear interpolation is applied.","3040b6ca":"### Visualization of histogram equalization transformation\n\nTo have a better idea of the result of histogram equalization, we could take the top right picture in our reference set. With this picture, it's really difficult to see the content of the image. If we have a look at the histogram of value of this picture (see below), we see that the pixel values are squeezes through 0 and 75. With histogram equalization, we can resample the values, in order to use the full range of pixels intensities.","cfac31c5":"### Visualization of CLAHE"}}