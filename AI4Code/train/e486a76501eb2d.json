{"cell_type":{"decbc431":"code","d626a037":"code","b1238166":"code","0abaa33a":"code","9d15c2b7":"code","00f5ae76":"code","4c0b72b6":"code","cacfe433":"code","3395fbea":"code","3cf8b1f8":"code","a5346647":"code","8e173bd4":"code","d50a7bbe":"code","79f4b81a":"code","9f33d395":"code","db7d35b8":"code","aab0dfc3":"code","c1754d7a":"code","96f1dfff":"code","bc4ecb71":"code","99141cf4":"code","a7e7a44c":"markdown","90d89d01":"markdown","fd786b3b":"markdown","d84544be":"markdown","6e166c0d":"markdown","2a765968":"markdown","fdc843ee":"markdown","dc66dfdc":"markdown","7354a50f":"markdown","96ecd55e":"markdown","ea7c307e":"markdown","686c5015":"markdown","10f645df":"markdown","821c6161":"markdown","bd77afff":"markdown","92ec3955":"markdown","aa7b4d01":"markdown","cb388961":"markdown","089a91e0":"markdown","05f6b382":"markdown"},"source":{"decbc431":"import pandas as pd \nimport os","d626a037":"output= pd.read_table(\"..\/input\/output\/output.txt\",header=None, sep='\\t')\noutput= output.rename(columns= {0:\"Log\"})\nnew= output[\"Log\"].str.split(\" \" ,n = 5, expand = True)\noutput[\"Date\"]= new[0].astype(str) + ' '+new[1]+' '+new[2]\noutput[\"Type\"]=new[3] +\" \"+ new[4]\nnew1=new[5].str.split(\";\",n=1,expand=True)\nnew2=new1[0].str.split(\"from\",n=1,expand=True)\noutput[\"Msg\"]= new2[0]\noutput[\"IP&PORT\"]=new2[1]\noutput[\"Detail\"]=new1[1]\noutput=output.drop(columns=['Log'])\n\n","b1238166":"output.to_excel(\"output_excel.xlsx\")","0abaa33a":"output.shape","9d15c2b7":"output.head(10) ","00f5ae76":"q1=output[output[\"Msg\"].str.contains(\"Failed password for root\", regex=False, case=False, na=False)]\ndisplay(q1)","4c0b72b6":"output.tail()","cacfe433":"q1.to_excel(\"q1_failedPasswordAttempts_for_root.xlsx\")","3395fbea":"q2= output[output[\"Msg\"].str.contains(\"Accepted password\" ,regex=False, case=False, na=False)]\ndisplay(q2)","3cf8b1f8":"authorizedUserList= set()\nfor i in q2[\"Msg\"].str.split(\"for\"):\n    authorizedUserList.add(i[1])\nprint(\"Authorized users are: \", '\\t'.join(i  for i in authorizedUserList ))","a5346647":"invalidAttempts=output.loc[\n              (output['Msg'].str.contains(\"authentication failure\")) |  \n              (output['Msg'].str.contains(\"invalid\",regex=False, case=False, na=False)) |  \n             (output['Msg'].str.contains(\"Failed\",regex=False, case=False, na=False))]\ndisplay(invalidAttempts)","8e173bd4":"invalidUserNameAttempts=  invalidAttempts[invalidAttempts[\"Msg\"].str.contains(\"invalid user\") & (invalidAttempts[\"IP&PORT\"].notnull())]\ninvalidUserNameAttempts","d50a7bbe":"invalidUserNameList= pd.DataFrame((invalidUserNameAttempts['Msg'].str.split(\" \",n=5,expand=True)[5]).unique())\ninvalidUserNameList","79f4b81a":"invalidUserNameAttempts.to_excel('q3_invalidUsernameAttempts.xlsx')","9f33d395":"q4=output[output[\"Msg\"].str.contains(\"Failed password for root\", regex=False, case=False, na=False)|\n          output[\"Msg\"].str.contains(\"Accepted password for root\", regex=False, case=False, na=False)]","db7d35b8":"ipList= q4[\"IP&PORT\"].str.split(\" \",n=2, expand=True)\n# ipList=pd.DataFrame(ipList[1].unique())\nipList=ipList[1].unique()\nipListDF=pd.DataFrame(ipList)\nipListDF=ipListDF.rename(columns={0:'IP'})\nipListDF","aab0dfc3":"#save dataframe\nipListDF.to_excel('q4_country.xlsx')","c1754d7a":"!pip install ip2geotools\nfrom ip2geotools.databases.noncommercial import DbIpCity","96f1dfff":"def location(ip):\n    try:\n        response = DbIpCity.get(ip, api_key='free')\n        return \"Country: {0}, City: {1}\".format(response.country, response.city)\n    except:\n        print(ip , \"exception\")\n        pass\n        return None\nipListDF[\"Location\"]= ipListDF[\"IP\"].apply(lambda x: location(x))\ndisplay(ipListDF)\n    ","bc4ecb71":"ipListDF.to_excel('q4_ipLocation.xlsx')","99141cf4":"Nov 15 06:56:58 momgoose sudo: simonwoo : TTY=pts\/0 ; PWD=\/var\/log ; USER=root ; COMMAND=\/usr\/bin\/less auth.log\nNov 15 06:56:58 momgoose sudo: pam_unix(sudo:session): session opened for user root by simonwoo(uid=1013)","a7e7a44c":"However......who is root from 114.79.146.115?","90d89d01":"First, I selected all the rows that contain  \"authentication failure\" ,\"invalid\/Invalid\", and \"Failed\" in order to make the flow of invalid attempts more visible since most of the invalid approaches have a log flow like below ;\n- 1) input_userauth_request with invalid user ID (the request host IP is recorded in the Detail column) (not always)\n- 2) try authentication \n- 3) Failed password for invalid user ID ","fd786b3b":"# Q4 List all the IPs and its city, country to access the server as a root \n","d84544be":"### Save failed password attempts","6e166c0d":"# Q5. Was any root login attempt successful?","2a765968":"# Q1. How many failed password attempt for root in output.txt file?\n\n- There were 71025 failed password attempts for root in output.txt file.","fdc843ee":"# Q3 List all the invalid username attempts.","dc66dfdc":"After filtering rows with failed and accepted password attempts for root, Iextracted all the IP addresses with  '.unuque()' method to avoid IP overlap.","7354a50f":"# Q2. List all the authorized users who logged in successfully? Provide the lines from the outputfile? \n\n### <Authorized user name & IP >\n- youngmin.kwon(10.1.1.3 , 10.12.13.151), \n- root(114.79.146.115),\n- simonwoo(115.145.188.81 )","96ecd55e":"### Successful login logs","ea7c307e":"### Save invalid username attempts","686c5015":"### Save the output file as csv for the later use.","10f645df":"There are 266279 logs in the output.txt. ","821c6161":"### Preprocessing","bd77afff":"#### ---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n# HW2\n\nDue 11-21-2019 Thursday 11:59:59pm\nInstruction: Download output.txt from http:\/\/momgoose.cs.sunykorea.ac.kr\/cybersec\/hw2\/\nWrite a python code and turn in all your source code and answers.\n\nQ1. How many failed password attempt for root in output.txt file?\n\nQ2. List all the authorized users who logged in successfully? Provide the lines from the outputfile?\n\nQ3. List all the invalid username attempts.\n\nQ4. List all the IPs and its city, country to access the server as a root Q5. Was any root login attempt successful?\n\nWhy?\n\nWhy not?\n\nJustify your answers.\n#### ---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n","92ec3955":"Below is an invalidUserNameList attempted so far. In total, 8444 attempts were carried out with below listed names.","aa7b4d01":"###  Date:      2019. 11. 19","cb388961":"### 2012313961 Yoon Seungrok","089a91e0":"### Shape of the DataFrame","05f6b382":"Below are invalid username attempts."}}