{"cell_type":{"30a5cfb1":"code","9a4b85c0":"code","7ca87830":"code","1e945c24":"code","b84f447c":"code","5db088c6":"code","e77095b5":"code","d4fa1a91":"code","55843cb0":"code","8b93ecd3":"code","0ff34aec":"code","b342afb2":"code","2ffde51b":"code","d1093102":"code","13b02419":"code","96838c49":"code","0fbb8595":"code","537bf5fd":"code","e05eefcb":"code","ee90facf":"markdown","92b735a8":"markdown","e77d6d25":"markdown"},"source":{"30a5cfb1":"import datetime\nimport pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport re\nimport matplotlib.pyplot as plt\nimport warnings\nimport zipfile \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nwarnings.filterwarnings(\"always\")\nwarnings.filterwarnings(\"ignore\")\nsns.set(style=\"darkgrid\")\nplt.rcParams['axes.unicode_minus'] = False  # \u7528\u6765\u6b63\u5e38\u663e\u793a\n\n%matplotlib inline","9a4b85c0":"df = pd.read_csv(\"..\/input\/pmsm_temperature_data.csv\")","7ca87830":"df.info()","1e945c24":"df.head()","b84f447c":"cor = df.corr()\nfig, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(cor, xticklabels=cor.columns, yticklabels=cor.columns, annot=True, ax=ax);","5db088c6":"extra_feats = {\n     \"i_s\": lambda x: np.sqrt(x[\"i_d\"]**2 + x[\"i_q\"]**2),  # Current vector norm\n     \"u_s\": lambda x: np.sqrt(x[\"u_d\"]**2 + x[\"u_q\"]**2),  # Voltage vector norm\n     \"S_el\": lambda x: x[\"i_s\"]*x[\"u_s\"],                  # Apparent power\n     \"P_el\": lambda x: x[\"i_d\"] * x[\"u_d\"] + x[\"i_q\"] *x[\"u_q\"],  # Effective power\n     \"i_s_x_w\": lambda x: x[\"i_s\"]*x[\"motor_speed\"],\n     \"S_x_w\": lambda x: x[\"S_el\"]*x[\"motor_speed\"],\n}\ndf = df.assign(**extra_feats)","e77095b5":"df.hist(figsize = (20,20))\nplt.show()","d4fa1a91":"df_clean = df.drop([\"profile_id\", \"i_q\"],axis=1)\nindexs = df_clean.index\ncolumns = df_clean.columns","55843cb0":"scaler = MinMaxScaler(feature_range=(-1, 1))\nscaler.fit(df_clean)\ndf_clean = pd.DataFrame(scaler.transform(df_clean), index=indexs, columns=columns)\ndf_clean.head()","8b93ecd3":"pl_data = df_clean.copy()\npl_data.index = pl_data[\"pm\"]\npl_data = pl_data.drop(columns=[\"pm\"], axis=1)","0ff34aec":"X = df_clean.drop([\"pm\"],axis=1)\ny = df_clean[\"pm\"]","b342afb2":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","2ffde51b":"LR_model = LinearRegression()\nLR_model.fit(X_train, y_train)\n\nprint(\"b0: \", LR_model.intercept_)\nprint(\"b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11 : \", LR_model.coef_)","d1093102":"def access(y_pred, y_true):\n    print(\"r2_score : \", r2_score(y_true, y_pred))\n    print(\"mean_squared_error : \", mean_squared_error(y_true, y_pred))\n          ","13b02419":"print(\"train\")\naccess(LR_model.predict(X_train), y_train)\nprint(\"\\ntest\")\naccess(LR_model.predict(X_test), y_test)","96838c49":"from keras.layers import Input, Dense\nfrom keras.models import Model","0fbb8595":"input_dim = X_train.shape[1]\nhidden_1 = 64\nhidden_2 = 64\nhidden_3 = 64\noutput_dim = 1\nbatch_size = 100\nepochs = 10\n\nX = Input(shape=[input_dim,])\nh = Dense(hidden_1, activation='relu')(X)\nh = Dense(hidden_2, activation='relu')(h)\nh = Dense(hidden_3, activation='relu')(h)\nY = Dense(output_dim, activation='sigmoid')(h)\n\nkeras_model = Model(X, Y)\nkeras_model.compile(loss='mean_squared_error', optimizer='adam')\nhistory = keras_model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, shuffle=False, validation_split=0.2)","537bf5fd":"y_pred = keras_model.predict(X_test)\nprint('MSE Train:', keras_model.evaluate(X_train, y_train, batch_size=batch_size))\nprint('MSE Test:', keras_model.evaluate(X_test, y_test, batch_size=batch_size))","e05eefcb":"pd.DataFrame(history.history)[[\"loss\", \"val_loss\"]].plot(figsize=(16, 6));","ee90facf":"* ****relate between i_q and torque is 1\uff0conly need keep one****","92b735a8":"* **LinearRegression**","e77d6d25":"* **Keras RNN model**"}}