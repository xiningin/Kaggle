{"cell_type":{"27547159":"code","1582379d":"code","f7b58f30":"code","89b29131":"code","eda7b905":"code","410cb354":"code","8735bd72":"code","1a46294c":"code","ef973f64":"code","3c37fa14":"code","f2fd975b":"code","68679dd8":"code","1fe4fc50":"code","6bd488ab":"code","f266c877":"code","3ad1dec7":"code","4a973770":"code","43379f72":"code","47fc8958":"code","302fb9e7":"code","a4ca453d":"code","ff70ad15":"code","7cd32e91":"code","b78de619":"code","43d863af":"code","99a852a3":"code","65555d22":"code","9e4be837":"code","66bf8e43":"code","1c5ff037":"code","400e8068":"code","0b776457":"code","78b94a30":"code","489e78f2":"code","c5504491":"code","093a83c6":"code","8de19a7a":"code","b4ecd873":"code","969fcc2e":"code","c46d85b4":"code","66db9200":"code","1aa234aa":"code","f9f7080c":"code","4e8df278":"code","f6a760c0":"code","360754a2":"code","fbd340fe":"code","443b5dba":"code","79d75082":"code","1326dea7":"code","1fd2d6b1":"code","db74c996":"code","f8c46131":"code","c82e38a2":"code","92de379c":"code","135aec00":"code","860b81bc":"code","1b0551af":"code","2379a653":"code","3a20a689":"code","6b9894a4":"code","dcf6b157":"code","67d94855":"code","eedb6ad7":"code","9f206e4a":"code","56b36a0e":"code","f83889f8":"code","e9ab82ee":"code","d57393a8":"code","1a16b7c3":"code","821d0300":"code","c349c440":"code","01894ecb":"code","2fc2da10":"code","cadcc9b6":"code","6008856f":"code","dcdefe67":"code","6f60decd":"code","521f03e6":"code","bf6ec22d":"code","d3085977":"code","06f66fbe":"code","efe83f7a":"code","d7537338":"code","beee7953":"code","f9480c58":"code","a68018d4":"code","3a5ad8e5":"code","8860a9a6":"code","20a70cae":"code","4554f287":"code","135a56de":"code","349c8baf":"code","1cac6fa4":"markdown","b6292db9":"markdown","92c8d1b3":"markdown","55fc2de6":"markdown","95ed00b5":"markdown","7733e8c4":"markdown","cf131ae2":"markdown","47dc931f":"markdown","e6b6229a":"markdown","10e4670f":"markdown","3070ba64":"markdown","27ce7bc1":"markdown","376b2804":"markdown","d5f50191":"markdown","5676616e":"markdown","44f97e6e":"markdown","d59a640c":"markdown","d5640468":"markdown","9abfcc7c":"markdown","4ec7ad83":"markdown","99e85135":"markdown","3eae7ce4":"markdown","b754ba1e":"markdown","ccd02bac":"markdown","9794ab32":"markdown","744d2381":"markdown","313ce8a6":"markdown","ad268e47":"markdown","a00602bf":"markdown","18468740":"markdown","4aa00058":"markdown","0ee4a747":"markdown","3482c770":"markdown","b10e5689":"markdown","60a0bff0":"markdown","03479d3c":"markdown","722251e5":"markdown","93591edd":"markdown","3ff3396b":"markdown","b71f1ff4":"markdown","4c1cf2a8":"markdown","a7f1ded0":"markdown","8d074509":"markdown","01c23c45":"markdown","85a79cfe":"markdown","aa32d8f5":"markdown","e6f29a8b":"markdown","00b358c4":"markdown","8f215946":"markdown"},"source":{"27547159":"#Data wrangling\nimport pandas as pd\nimport numpy as np\nimport missingno\nfrom collections import Counter\n\n#Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n%matplotlib inline\nfrom matplotlib.ticker import EngFormatter, StrMethodFormatter\npalette =  ['#3d405b','#e07a5f', '#81b29a', '#f77f00', '#40916c','#9d4edd','#b5e48c']\nsns.set_palette(palette)\nplt.rcParams[\"figure.figsize\"] = 10, 6\n\n#Machine Learning Models\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n#Hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n\n\n# Remove warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","1582379d":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain.head()","f7b58f30":"test.head()","89b29131":"print('Train set shape:', train.shape)\nprint('Test set shape:', test.shape)","eda7b905":"train.info()\nprint('-+-'*40)\ntest.info()","410cb354":"#N of missing data in train set by columns\ntrain.isnull().sum().sort_values(ascending=False)","8735bd72":"#N of missing data in test set by columns\ntest.isnull().sum().sort_values(ascending=False)","1a46294c":"#train set\nmissingno.matrix(train);","ef973f64":"#test set\nmissingno.matrix(test);","3c37fa14":"fig,ax = plt.subplots(1,2, figsize=(18,5))\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False, cmap='viridis', ax=ax[0])\nsns.heatmap(test.isnull(),yticklabels=False,cbar=False, ax=ax[1])\nax[0].set_title('Train set Missing Values')\nax[1].set_title('Test set Missing Values');","f2fd975b":"#Check unique Passenger ID\ntrain['PassengerId'].nunique()","68679dd8":"test['PassengerId'].nunique()","1fe4fc50":"train['Sex'].value_counts()","6bd488ab":"fig,ax = plt.subplots(1,1)\nsns.countplot(train.Survived, hue=train.Sex)\nsns.despine()\nax.set_xticklabels(['Not Survived', 'Survived'])\nax.set_title('Number of Survivor By Sex');","f266c877":"#Percentage of surivors by sex\nss = train.groupby('Sex')['Survived'].value_counts(normalize=True).round(decimals=2).unstack()*100\nss.head()","3ad1dec7":"fig,ax = plt.subplots(1,1)\nss.plot(kind='bar', ax=ax)\nax.yaxis.set_major_formatter(EngFormatter(unit=u\"%\"))\nax.tick_params(axis='x', labelrotation=0)\nlabels =['Not Survived', 'Survived']\nplt.legend(labels=labels)\nax.set_title('Percentage of Survived by Sex')\nsns.despine()","4a973770":"sns.barplot(x='Sex', y='Survived', data=train, ci=None)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Sex')\nsns.despine()\n\nplt.show()","43379f72":"#Survival Probability by Sex\ntrain[['Sex', 'Survived']].groupby('Sex', as_index=False).mean().sort_values(by = 'Survived', ascending=False)","47fc8958":"train['Pclass'].value_counts().sort_values(ascending=False)","302fb9e7":"sns.countplot(data=train, x='Pclass', hue='Sex')\nplt.title('Passenger Sex by Class')\nsns.despine();","a4ca453d":"sns.countplot(data=train, x='Pclass', hue='Survived')\nplt.title('Survived by Class')\nlabels =['Not Survived', 'Survived']\nplt.xlabel('Passenger Class')\nplt.legend(labels=labels)\nsns.despine();","ff70ad15":"#Percentage of surivors by class\nps = train.groupby('Pclass')['Survived'].value_counts(normalize=True).round(decimals=2).unstack()*100\nps.head()","7cd32e91":"fig,ax = plt.subplots(1,1)\nps.plot(kind='bar', ax=ax)\nax.yaxis.set_major_formatter(EngFormatter(unit=u\"%\"))\nax.tick_params(axis='x', labelrotation=0)\nlabels =['Not Survived', 'Survived']\nplt.legend(labels=labels)\nax.set_title('Percentage of Survived by Class')\nsns.despine()","b78de619":"train[['Pclass', 'Survived']].groupby('Pclass', as_index=False).mean().sort_values(by = 'Survived', ascending=False)","43d863af":"sns.barplot(x='Pclass', y='Survived', data=train, ci=None)\nplt.title('Survival Probability by Passenger Class')\nplt.ylabel('Survival Probability')\nsns.despine();","99a852a3":"sns.barplot(x = 'Pclass', y = 'Survived', hue = 'Sex', data = train, ci=None)\nsns.despine()\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by class and Gender');","65555d22":"train['Embarked'].value_counts().sort_values(ascending=False)","9e4be837":"sns.countplot(train.Embarked)\nsns.despine()\nplt.xlabel('Port of Embarkation')\nplt.title('N. of Passengers by Port of Embarkation');","66bf8e43":"g = sns.catplot(data=train, x='Pclass', col='Embarked', kind='count')\ng.fig.suptitle('Passenger Class by Port of Embarkation',  y=1.05);","1c5ff037":"train[['Embarked','Survived']].groupby('Embarked', as_index=False).mean().sort_values(by = 'Survived', ascending=False)","400e8068":"sns.barplot(data=train, x='Embarked', y='Survived', ci=None)\nsns.despine()\nplt.ylabel('Survival Probability')\nplt.title('Surivavl Probability by Port of Embrakation');","0b776457":"sns.catplot(kind='point', y='Survived',x='Pclass', hue='Sex', col='Embarked', data=train, sharey=True)\nplt.suptitle('Survival probablity for each categorical feature', y=1.05);","78b94a30":"def detect_outliers(df, n, features):\n    \"\"\"\"\n    This function will loop through a list of features and detect outliers in each one of those features. In each\n    loop, a data point is deemed an outlier if it is less than the first quartile minus the outlier step or exceeds\n    third quartile plus the outlier step. The outlier step is defined as 1.5 times the interquartile range. Once the \n    outliers have been determined for one feature, their indices will be stored in a list before proceeding to the next\n    feature and the process repeats until the very last feature is completed. Finally, using the list with outlier \n    indices, we will count the frequencies of the index numbers and return them if their frequency exceeds n times.    \n    \"\"\"\n    outlier_indices = []\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col], 75)\n        IQR = Q3 - Q1\n        outlier_step = 1.5 * IQR\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(key for key, value in outlier_indices.items() if value > n )\n    return multiple_outliers\n\noutliers_to_drop = detect_outliers(train, 2, ['Age', 'SibSp', 'Parch', 'Fare'])\nprint(\"We will drop these {} indices: \".format(len(outliers_to_drop)), outliers_to_drop)\n","489e78f2":"#outliers in numerical variable\ntrain.loc[outliers_to_drop]","c5504491":"#Drop outliers and reset index\nprint('Before: {} rows'.format(len(train)))\ntrain = train.drop(outliers_to_drop, axis = 0).reset_index(drop = True)\nprint('After: {} rows'.format(len(train)))","093a83c6":"sns.heatmap(train[['Survived', 'SibSp', 'Parch', 'Age', 'Fare']].corr(), annot=True, fmt='.2f', linewidth=0.3);","8de19a7a":"train['SibSp'].value_counts().sort_values(ascending=False)","b4ecd873":"sns.countplot(train.SibSp)\nsns.despine()\nplt.title('N. of SibSp');","969fcc2e":"sns.barplot(x='SibSp', y='Survived',data= train, ci=None)\nsns.despine()\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by SibSp');","c46d85b4":"train['Parch'].value_counts().sort_values(ascending=False)","66db9200":"sns.barplot(x='Parch', y='Survived', data=train, ci=None)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Parch')\nsns.despine();","1aa234aa":"train['Age'].isnull().sum()","f9f7080c":"sns.distplot(train['Age'])\nsns.despine()\nplt.title('Passenger Age Distribution');","4e8df278":"train['Age'].skew()","f6a760c0":"sns.kdeplot(train[(train.Survived == 0)]['Age'])\nsns.kdeplot(train[(train.Survived == 1)]['Age'])\nplt.legend(labels=['Not Survived','Survived'])\nsns.despine()\nplt.title('Age Distribution by Survival');","360754a2":"sns.distplot(train['Fare'], color=palette[4])\nsns.despine()\nplt.title('Passenger Fare Distribution');","fbd340fe":"sns.kdeplot(train[(train.Survived == 0)]['Fare'])\nsns.kdeplot(train[(train.Survived == 1)]['Fare'])\nplt.legend(labels=['Not Survived','Survived'])\nsns.despine()\nplt.title('Fare Distribution by Survival');","443b5dba":"train.isnull().sum().sort_values(ascending=False)","79d75082":"test.isnull().sum().sort_values(ascending=False)","1326dea7":"train = train.drop(['Cabin', 'Ticket'], axis=1)\ntest = test.drop(['Cabin', 'Ticket'], axis=1)","1fd2d6b1":"train['Age'].fillna(train['Age'].mean(), inplace=True)\ntrain['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)","db74c996":"train.isnull().sum().sort_values(ascending=False)","f8c46131":"test['Age'].fillna(test['Age'].mean(), inplace=True)\ntest['Fare'].fillna(test['Fare'].median(), inplace=True)","c82e38a2":"test.isnull().sum().sort_values(ascending=False)","92de379c":"#Combine training and test set\ncombine = pd.concat([train, test], axis=0).reset_index(drop=True)\ncombine.head()","135aec00":"sns.distplot(combine['Fare'], color=palette[3])\nsns.despine()\nplt.title('Passenger Fare Distribution');","860b81bc":"combine['Fare'] = combine['Fare'].map(lambda x: np.log(x) if x > 0 else 0)","1b0551af":"sns.distplot(combine['Fare'], color=palette[5])\nsns.despine()\nplt.title('Passenger Fare Distribution');","2379a653":"combine.head()","3a20a689":"combine['Title'] = [name.split(',')[1].split('.')[0].strip() for name in combine['Name']] #strip() removes spaces in strings\ncombine[['Name', 'Title']].head()","6b9894a4":"combine['Title'].value_counts().sort_values(ascending=False)","dcf6b157":"combine['Title'].nunique()","67d94855":"combine['Title'] = combine['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Lady', 'Jonkheer', 'Don', 'Capt', 'the Countess',\n                                             'Sir', 'Dona'], 'Uncommon')\ncombine['Title'] = combine['Title'].replace(['Mlle', 'Ms'], 'Miss')\ncombine['Title'] = combine['Title'].replace('Mme', 'Mrs')","eedb6ad7":"sns.countplot(combine.Title)\nsns.despine()\nplt.title('Title Count');","9f206e4a":"sns.barplot(x='Title', y='Survived', data=combine, ci=None)\nsns.despine()\nplt.title('Survival Probability by Title');","56b36a0e":"combine.drop('Name',axis=1, inplace=True)","f83889f8":"combine['FamilySize'] = combine['SibSp']+combine['Parch'] + 1 #+1 to include the passenger itself\ncombine[['SibSp', 'Parch', 'FamilySize']]","e9ab82ee":"combine['FamilySize'].nunique()","d57393a8":"sns.barplot(x='FamilySize', y='Survived',data=combine, ci=None)\nsns.despine()\nplt.title('Survival Probability by Family Size');","1a16b7c3":"#Create IsAlone feature\n\ncombine['IsAlone'] = 0\ncombine.loc[combine['FamilySize']== 1, 'IsAlone'] = 1","821d0300":"sns.barplot(x='IsAlone', y='Survived',data=combine, ci=None)\nsns.despine()\nplt.title('Survival Probability if the passenger Travelled Alone');","c349c440":"#drop SibSp and Parch\ncombine.drop(['SibSp','Parch'], axis=1, inplace=True)","01894ecb":"combine.head()","2fc2da10":"combine['Sex'] = combine['Sex'].map({'male': 0, 'female': 1})\n\n#Encode Title and Embarked feature\n\ncombine = pd.get_dummies(combine, columns = ['Title'])\ncombine = pd.get_dummies(combine, columns = ['Embarked'], prefix='Em')\n\ncombine.head()","cadcc9b6":"# Divide Fare into four bands\n\ncombine['FareBand'] = pd.cut(combine['Fare'],4)\ncombine[['FareBand', 'Survived']].groupby('FareBand', as_index=False).mean().sort_values(by='FareBand')","6008856f":"#Assign ordinal to each fare band\n\ncombine.loc[combine['Fare'] <= 1.56, 'Fare'] = 0\ncombine.loc[(combine['Fare'] > 1.56) & (combine['Fare'] <= 3.119), 'Fare'] = 1\ncombine.loc[(combine['Fare'] > 3.119) & (combine['Fare'] <= 4.679), 'Fare'] = 2\ncombine.loc[combine['Fare'] > 4.679, 'Fare'] = 3","dcdefe67":"#Convert fare into integer\n\ncombine['Fare'] = combine['Fare'].astype('int')","6f60decd":"# Drop FareBand feature\n\ncombine = combine.drop('FareBand', axis=1)","521f03e6":"combine.head()","bf6ec22d":"# Separate Training and test set from the combined DataFrame\n\ntrain = combine[:len(train)]\ntest = combine[len(train):]","d3085977":"train.head()","06f66fbe":"# Drop passenger ID column from training set\n\ntrain = train.drop('PassengerId', axis = 1)\ntrain.head()","efe83f7a":"#Convert Survived back to integer in the training set\n\ntrain['Survived'] = train ['Survived'].astype('int')\ntrain.head()","d7537338":"test.head()","beee7953":"#Drop PassengerId  and survived column from test set\n\ntest = test.drop('Survived', axis = 1)\ntest.head()","f9480c58":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']\nX_test = test.drop('PassengerId', axis = 1).copy()\nprint('X_train shape: ', X_train.shape)\nprint('y_train shape: ', y_train.shape)\nprint('X_test shape: ', X_test.shape)","a68018d4":"#Random Forest\nrf_params = {\n    'n_estimators': [10, 20, 30],\n    'max_features': ['sqrt',0.5],\n    'min_samples_leaf': [1,2,4,8],\n    }\nRFC = RandomForestClassifier(random_state=0)\nRFC_grid = GridSearchCV(RFC, rf_params, cv=3, scoring='accuracy')\nRFC_grid.fit(X_train, y_train)\nprint(RFC_grid.best_params_)\nprint(\"Accuracy:\"+ str(RFC_grid.best_score_))","3a5ad8e5":"#SVM\nsvm_params = {\n    'C': [1,10, 100],\n    'kernel': ['linear','poly','rbf','sigmoid']\n    \n}\nsvm = SVC(gamma='scale')\nsvm_grid = GridSearchCV(svm, svm_params, cv=3, scoring='accuracy')\nsvm_grid.fit(X_train, y_train)\nprint(svm_grid.best_params_)\nprint(\"Accuracy:\"+ str(svm_grid.best_score_))","8860a9a6":"#KNN\nknn_params = {\n    'n_neighbors': [2, 3, 5,10,15,20],\n}\nKNN = KNeighborsClassifier()\nKNN_grid = GridSearchCV(KNN, knn_params, cv=3, scoring='accuracy')\nKNN_grid.fit(X_train, y_train)\nprint(KNN_grid.best_params_)\nprint(\"Accuracy:\"+ str(KNN_grid.best_score_))","20a70cae":"#Logistic Regression\nlr_params = {\n    'penalty' : ['l1', 'l2'],\n    'C' : np.logspace(-3,3,7),\n}\nlr = LogisticRegression()\nlr_grid = GridSearchCV(lr, lr_params, cv=3, scoring='accuracy')\nlr_grid.fit(X_train, y_train)\nprint(lr_grid.best_params_)\nprint(\"Accuracy:\"+ str(lr_grid.best_score_))","4554f287":"y_pred = svm_grid.predict(X_test)","135a56de":"y_pred","349c8baf":"submission = {'PassengerId': test.PassengerId, 'Survived': y_pred}\nsubmission_df = pd.DataFrame(data=submission)\nsubmission_df.to_csv('Titanic_submission',index=False)","1cac6fa4":"# Import and read the data","b6292db9":"We will use SVM on the test set","92c8d1b3":"## Data types and missing values","55fc2de6":"Most Passengers were in third class","95ed00b5":"As numerical features we will analyze SibSp, Parch, Age and Fare.","7733e8c4":"We will drop the name column since it is not usefull for classification.\n","cf131ae2":"Most Passengers were embrked at Southampton.\n","47dc931f":"## Data Transformation","e6b6229a":"I'll drop Cabin and Ticket feature since they are not very valuable.","10e4670f":"### Categorical Features","3070ba64":"|Variable|Definition|Key|\n|:-:|:-:|:-:|\n|Survival |Survival |0=No, 1=Yes| \n|pclass |Ticket Class | |\n|Sex |sex | |\n|Age |Age in years | |\n|sibsp |# of siblings \/ spouses aboard the Titanic | |\n|parch |# of parents \/ children aboard the Titanic | |\n|ticket |Ticket number | |\n|fare |Passenger fare | |\n|cabin |Cabin number | |\n|embarked |Port of Embarkation |C = Cherbourg, Q = Queenstown, S = Southampton |\n","27ce7bc1":"These are our outliers and we can see that we also have some missing values in the Age column.","376b2804":"Every ID is associated with a different Passenger.","d5f50191":"# Preparing Submission","5676616e":"We ha ve more male passengers","44f97e6e":"Only Fare is slightly correlated with Survived, probably because it is also correlated with passenger class.","d59a640c":"We can achieve the same result with seaborn","d5640468":"# Data Preprocessing","9abfcc7c":"From these graphs we can see that:\n* Female passengers have a higher chance of survival\n* Passengers from first class have a higher chance of survival\n","4ec7ad83":"Most of the passengers were travelling alone","99e85135":"# Feature Encoding","3eae7ce4":"We will analyze Pclass (passenger Class), sex and Embarked as categorical features. Note that Pclass is int64 but it is a categorical feature.\n\nWe will only use the train set for visualization and exploratory analysis because we have the target variable (survived).\n","b754ba1e":"We have seen that the fare distribution was pretty skewed","ccd02bac":"## Numerical Features","9794ab32":"I'll now apply a logarithmic transformation","744d2381":"I'll agregate some titles into macro categories to simplify the classification process.","313ce8a6":"The Distribution of the Fare is very asymmetric, probably because we have a lot of passengers in third class. We will apply a log transformation before training the model.","ad268e47":"# Exploratory Data Analysis","a00602bf":"I'll now create three new feature\n\n* Title\n* FamilySize\n* IsAlone\n\n","18468740":"We had missing values for the age column","4aa00058":"Most Survivors are in first class, most deaths are in third class.","0ee4a747":"###  Detect and remove outliers in numerical variables","3482c770":"For the test set I'll again replace the missing values in Age with their mean and the missing value in Fare with its median.","b10e5689":"## Train and test split\n","60a0bff0":"## Feature Analysis","03479d3c":"# Modelling","722251e5":"# The Data","93591edd":"We will train 4 models\n* Random Forest\n* Logistic Regression\n* SVC\n* KNN\n\nWe will use GridSearch fro Hyperparameter Optimization","3ff3396b":"Missing values in Age (also why Age is stored as a float?) Cabin and Embarked for train set, missing values in Age, Fare and Cabin for test set.","b71f1ff4":"### Correlation with Survival","4c1cf2a8":"Now we can calculcate IsAlone from SibSp and Parch","a7f1ded0":"## Handling Missing Features\n","8d074509":"The median age of the survived is bigger ","01c23c45":"I'll replace the missing values in Age with their mean and the missing values in Embarked with their Mode","85a79cfe":"The age distribution is almost normal","aa32d8f5":"We can also visualize the missing data using missingno","e6f29a8b":"![](https:\/\/images.unsplash.com\/photo-1558431571-4a9f128e135f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1332&q=80)","00b358c4":"# Feature Engineering","8f215946":"We have seen that most passenger in third class did not survive. It comes with no surprise that the port of Southampton has the lower probability of survival since most of passengers from third class embraked at Southampton."}}