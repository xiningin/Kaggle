{"cell_type":{"e11d17e4":"code","89872467":"code","ebe831f3":"code","c7103316":"code","d00b2f98":"code","dfc39c05":"code","b88cb2c0":"code","bba88ecf":"code","7c6f23e6":"code","247a11ec":"code","f21767c3":"code","3659985c":"code","148eb724":"code","a9821928":"code","bca64e5c":"markdown","f312f983":"markdown","5b8d82a9":"markdown","460e2db3":"markdown","c070abfd":"markdown","9eafdbdd":"markdown","949d64ed":"markdown","a9538421":"markdown","b7d872ca":"markdown","b3aceae5":"markdown","0b33a152":"markdown","c0cdb928":"markdown","f3d9bbc4":"markdown","45615a1b":"markdown","0f1271e8":"markdown","1dcb122b":"markdown","75a7e48b":"markdown","f9bb0ed9":"markdown","571a6ccb":"markdown","bc6abc2a":"markdown","523329c9":"markdown","f275dd5e":"markdown","4c162f1a":"markdown","2ab0cb52":"markdown","e272ebe4":"markdown","df415d39":"markdown","8d62dbe6":"markdown","b07c5a85":"markdown","7ffd5991":"markdown","efcbc065":"markdown","160c983b":"markdown","33521cfa":"markdown","3ff53b5f":"markdown","2a1d34b4":"markdown"},"source":{"e11d17e4":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n    \nfrom sklearn.model_selection import train_test_split\n\n# Pipeline library for Training\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\n","89872467":"# Road the data\nX = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nprint(X.shape, X_test.shape)\n\n\n# Remove rows with missing target, seperate target from predictors\nX.dropna(axis=0, subset=['Survived'], inplace=True)\ny = X.Survived\nX.drop(['Survived'], axis=1, inplace=True)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X.columns if X[cname].nunique() < 10 and X[cname].dtype == 'object']\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X.columns if X[cname].dtype in ['float64', 'int64']]\n\n# keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX = X[my_cols].copy()\nX_test = X[my_cols].copy()","ebe831f3":"X_ = pd.read_csv(\"..\/input\/titanic\/train.csv\")","c7103316":"f, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nX_['Survived'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0])\n\nsns.countplot('Survived', data=X_, ax=ax[1])","d00b2f98":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n# Preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n        transformers =[\n            ('num', numerical_transformer, numerical_cols),\n            ('cat', categorical_transformer, categorical_cols)\n        ])","dfc39c05":"rf_clf = RandomForestClassifier()\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', rf_clf)\n])\n\nprint(cross_val_score(clf, X, y, cv=10).mean())","b88cb2c0":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","bba88ecf":"# train_test_split: 80%, 20%\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, test_size=0.2)\n\n# modeling\nrf_clf = RandomForestClassifier()\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', rf_clf)\n])\n\n# train\nclf.fit(X_train, y_train)\npreds = clf.predict(X_val)\n\n\n# confusion_matrix\ncm = confusion_matrix(y_val, preds)\nsns.heatmap(cm, annot=True, fmt=\"d\")","7c6f23e6":"clf.score(X_val, y_val)  # Return the mean accuracy on the given test data and labels","247a11ec":"accuracy_score(y_val, preds)","f21767c3":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_val, preds))","3659985c":"from sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt\n%matplotlib inline","148eb724":"fpr, tpr, thresholds = roc_curve(y_val,preds)\n\nplt.plot(fpr, tpr, label='ROC curve')\nplt.plot([0, 1], [0, 1], 'k--', label='Random guess')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.xlim([-0.02, 1])\nplt.ylim([0, 1.02])\nplt.legend(loc=\"lower right\")","a9821928":"from sklearn.metrics import log_loss\nlog_loss(y_val, preds)","bca64e5c":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*UJxVqLnbSj42eRhasKeLOA.png\">","f312f983":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*pk05QGzoWhCgRiiFbz-oKQ.png\">","5b8d82a9":"<img src=\"https:\/\/i.ytimg.com\/vi\/AOIkPnKu0YA\/maxresdefault.jpg\" width=600 \/>","460e2db3":"### Precision\n\n<code>Precision<\/code> is defined as the number of true positives divided by the number of true positives plus the number of false positives. Precision is about being precise","c070abfd":"# Machine Learning Model Evaluation Metrics Part I. Classification\n\n## Reference Notebook\n<a href='https:\/\/www.kaggle.com\/ishivinal\/machine-learning-model-evaluation-metrics'>\u2696\ufe0f Machine Learning Model Evaluation Metrics<\/a>","9eafdbdd":"### F1-Score","949d64ed":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*5XuZ_86Rfce3qyLt7XMlhw.png\" width=600 >","a9538421":"## Thank you! :)\nI hope this will help you :)\n[[](http:\/\/)](http:\/\/)<h3 style=\"color:green\">If you think this notebook is helpful, upvotes would be greatly appreciated :-) <\/h3>","b7d872ca":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/640\/1*a8hkMGVHg3fl4kDmSIDY_A.png\" width=600>","b3aceae5":"### Recall\n\nWhen it is actually the positive result, how often does it predict correcly","0b33a152":"# Modeling & Evaluate Score\n\n","c0cdb928":"<code>Log loss<\/code>, aka logistic loss or cross-entropy loss.\n\nThis is the loss function used in (multinomial) logistic regression and extensions of it such as neural networks, defined as the negative log-likelihood of the true labels given a probabilistic classifier\u2019s predictions.","f3d9bbc4":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/0*2ekvLNkZ0_cKcPtv\">","45615a1b":"<img src=\"https:\/\/image.freepik.com\/free-vector\/site-stats-concept-illustration_114360-1434.jpg\" width=300>","0f1271e8":"ROC curves are frequently used to show in a graphical way the connection\/trade-off between clinical sensitivity and specificity for every possible cut-off for a test or a combination of tests.","1dcb122b":"[[](http:\/\/)](http:\/\/)<h3 style=\"color:green\">If you think this notebook is helpful, upvotes would be greatly appreciated :-) <\/h3>","75a7e48b":"> Is it all over when machine learning modeling is done?","f9bb0ed9":"<code>F1 score<\/code> is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. <br>\nIntuitively it is not as easy to understand as accuracy, but F1 is usually more useful than accuracy, <code>especially if you have an uneven class distribution<\/code>","571a6ccb":"### Logistic loss","bc6abc2a":"## Learn more!\n[[Tutorial] Ensembel from starter to Expert!](https:\/\/www.kaggle.com\/leeyj0511\/tutorial-ensembel-from-starter-to-expert)","523329c9":"\u2714\ufe0f When to use Accuracy? (Important!)<br>\n\n<code>Accuracy<\/code> is good measure when the target variable class in the data are nearly balanced. example Survived(60%-yes, 40% no)","f275dd5e":"# Summary\n\n## TL;DR\n* <code>Accuracy<\/code>: is good measure when the target variable class in the data are nearly balanced. example Survived(60%-yes, 40% no) \n* <code>f1-Score<\/code>: is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account.<br>\n    * *if you have an <code>uneven class distribution<\/code>? than use f1-score*\n* <code>AUC-ROC curve<\/code> is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability.\n* <code>Log loss<\/code>, aka logistic loss or cross-entropy loss. when evaluate neural network","4c162f1a":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/640\/1*KhlD7Js9leo0B0zfsIfAIA.png\" width=600>","2ab0cb52":"Ok, Load Data & preprocess it<br>\n<br>\n*(for classification, we gonna use Titanic data)*\n<br>\n\none more, we use Pipelines. If you want to know more about pipeline. pleas check the <a href='https:\/\/www.kaggle.com\/leeyj0511\/for-starter-top-30-machine-learning-pipelines'>reference<\/a>.","e272ebe4":"# Data Preprocessing (using Pipelines)","df415d39":"### Accuracy\n<code>Accuracy<\/code> in classification problems is the number of correct predictions made by the model over all kinds predictions made","8d62dbe6":"### Auc - Roc curve","b07c5a85":"* numerical_transformer\/categorical_transformer\n* preprocessor(ColumnTransformer)\n* define model\n* Bundle preprocessing and modeling\n* Preprocessing of training data, fit model\n* Preprocessing of validation data, get predictions","7ffd5991":"# Model Evaluation\n## 1. Confusion Matrix\nA <code>confusion<\/code> matrix is a table that is often used to describe the performance of a classification model (or \"classifier\") on a set of test data for which the true values are known","efcbc065":"<code>AUC-ROC<\/code> curve is a performance measurement for classification problem at various thresholds settings. ROC is a probability curve and AUC represents degree or measure of separability. <br>\nIt tells how much model is capable of distinguishing between classes.<br>\nHigher the AUC, better the model is at predicting 0s and 1s as 1as.<br>\nBy analogy, Higher the AUC, better the model is at distinguishing between survived and not","160c983b":"## Pipelines for training","33521cfa":"The ROC curve is plotted with TPR against the FPR .","3ff53b5f":"# Import Library","2a1d34b4":"* I think <code>evaluation<\/code> is as important as modeling in machine learning.\n* How can I explain if my model is really good or not?\n* How can I present my model at an important presentation?\n* In this notebook, I am going to dig into how to *evaluate machine learning models*."}}