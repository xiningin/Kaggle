{"cell_type":{"1f3df03d":"code","bce234f4":"code","f83d2c18":"code","d4c93fab":"code","65ac30aa":"code","1d7e0510":"code","742c24f8":"code","1b90c284":"code","a2b44dc9":"code","798b9ac7":"code","bede1d6d":"code","dee1b385":"code","b4ad9551":"code","8ffd5956":"code","a73c7aa6":"code","4e241e3f":"code","088ee91f":"code","42b8ffde":"code","50a31ee4":"code","3a131a99":"code","a9700398":"code","ba960f56":"code","965b96be":"code","0da9eced":"code","9097bd5f":"code","7f32de65":"code","4df98165":"code","a53e22d7":"code","f6258f6b":"code","5668e407":"code","8641292d":"code","fb183deb":"code","5828db84":"code","4477e3fc":"code","d3f24bd9":"code","878252ed":"code","20ca2644":"code","f8f76cbb":"code","a12632a8":"code","ebe68e4d":"code","61b3627d":"code","e74e1a26":"code","fce9483c":"markdown"},"source":{"1f3df03d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bce234f4":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport soundfile as sf\nimport librosa\nimport librosa.display\nimport IPython.display as display\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv1D, MaxPool1D, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.applications import VGG19, VGG16, ResNet50\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f83d2c18":"path = '\/kaggle\/input\/birdclef-2021\/'\nos.listdir(path)","d4c93fab":"def read_ogg_file(path, file):\n    \"\"\" Read ogg audio file and return numpay array and samplerate\"\"\"\n    \n    data, samplerate = sf.read(path+file)\n    return data, samplerate\n\n\ndef plot_audio_file(data, samplerate):\n    \"\"\" Plot the audio data\"\"\"\n    \n    sr = samplerate\n    fig = plt.figure(figsize=(8, 4))\n    x = range(len(data))\n    y = data\n    plt.plot(x, y)\n    plt.plot(x, y, color='red')\n    plt.legend(loc='upper center')\n    plt.grid()\n    \n    \ndef plot_spectrogram(data, samplerate):\n    \"\"\" Plot spectrogram with mel scaling \"\"\"\n    \n    sr = samplerate\n    spectrogram = librosa.feature.melspectrogram(data, sr=sr)\n    log_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)\n    librosa.display.specshow(log_spectrogram, sr=sr, x_axis='time', y_axis='mel')\n","65ac30aa":"train_labels = pd.read_csv(path+'train_soundscape_labels.csv')\ntrain_meta = pd.read_csv(path+'train_metadata.csv')\ntest_data = pd.read_csv(path+'test.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","1d7e0510":"print('Number train label samples:', len(train_labels))\nprint('Number train meta samples:', len(train_meta))\nprint('Number train short folder:', len(os.listdir(path+'train_short_audio')))\nprint('Number train audios:', len(os.listdir(path+'train_soundscapes')))\nprint('Number test samples:', len(test_data))","742c24f8":"os.listdir(path+'train_short_audio\/caltow')[:2]","1b90c284":"train_labels.head()","a2b44dc9":"train_meta.head()","798b9ac7":"row = 0\ntrain_meta.iloc[row]","bede1d6d":"label = train_meta.loc[row, 'primary_label']\nfilename = train_meta.loc[row, 'filename']\n\n# Check if the file is in the folder\nfilename in os.listdir(path+'train_short_audio\/'+label)","dee1b385":"data, samplerate = sf.read(path+'train_short_audio\/'+label+'\/'+filename)\nprint(data[:8])\nprint(samplerate)","b4ad9551":"plot_audio_file(data, samplerate)","8ffd5956":"plot_spectrogram(data, samplerate)","a73c7aa6":"display.Audio(path+'train_short_audio\/'+label+'\/'+filename)","4e241e3f":"train_labels['audio_id'].unique()","088ee91f":"train_labels.groupby(by=['audio_id']).count()['birds'][:4]","42b8ffde":"print('original label:', train_labels.loc[458, 'birds'])\nprint('split into list:', train_labels.loc[458, 'birds'].split(' '))","50a31ee4":"labels = []\nfor row in train_labels.index:\n    labels.extend(train_labels.loc[row, 'birds'].split(' '))\nlabels = list(set(labels))\n\nprint('Number of unique bird labels:', len(labels))","3a131a99":"df_labels_train = pd.DataFrame(index=train_labels.index, columns=labels)\nfor row in train_labels.index:\n    birds = train_labels.loc[row, 'birds'].split(' ')\n    for bird in birds:\n        df_labels_train.loc[row, bird] = 1\ndf_labels_train.fillna(0, inplace=True)\n\n# We set a dummy value for the target label in the test data because we will need for the Data Generator\ntest_data['birds'] = 'nocall'\n\ndf_labels_test = pd.DataFrame(index=test_data.index, columns=labels)\nfor row in test_data.index:\n    birds = test_data.loc[row, 'birds'].split(' ')\n    for bird in birds:\n        df_labels_test.loc[row, bird] = 1\ndf_labels_test.fillna(0, inplace=True)","a9700398":"df_labels_train.sum().sort_values(ascending=False)[:10]","ba960f56":"train_labels = pd.concat([train_labels, df_labels_train], axis=1)\ntest_data = pd.concat([test_data, df_labels_test], axis=1)","965b96be":"file = os.listdir(path+'train_soundscapes')[0]\nfile","0da9eced":"data, samplerate = read_ogg_file(path+'train_soundscapes\/', file)","9097bd5f":"audio_id = file.split('_')[0]\nsite = file.split('_')[1]\nprint('audio_id:', audio_id, ', site:', site)","7f32de65":"train_labels[(train_labels['audio_id']==int(audio_id)) & (train_labels['site']==site) & (train_labels['birds']!='nocall')]","4df98165":"sub_data = data[int(455\/5)*160000:int(460\/5)*160000]","a53e22d7":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(sub_data, sr=samplerate)\nplt.grid()\nplt.show()","f6258f6b":"display.Audio(sub_data, rate=samplerate)","5668e407":"data_lenght = 160000\naudio_lenght = 5\nnum_labels = len(labels)","8641292d":"# batch_size = 16\n#batch_size = 16*5\nbatch_size = 16*2","fb183deb":"list_IDs_train, list_IDs_val = train_test_split(list(train_labels.index), test_size=0.33, random_state=2021)\nlist_IDs_test = list(samp_subm.index)","5828db84":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, data, batch_size):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.data = data\n        self.batch_size = batch_size\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        len_ = int(len(self.list_IDs)\/self.batch_size)\n        if len_*self.batch_size < len(self.list_IDs):\n            len_ += 1\n        return len_\n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        X = X.reshape((self.batch_size, 100, 1600\/\/2))\n        return X, y\n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.zeros((self.batch_size, data_lenght\/\/2))\n        y = np.zeros((self.batch_size, num_labels))\n        for i, ID in enumerate(list_IDs_temp):\n            prefix = str(self.data.loc[ID, 'audio_id'])+'_'+self.data.loc[ID, 'site']\n            file = [s for s in os.listdir(self.path) if prefix in s][0]\n            audio_file, audio_sr = read_ogg_file(self.path, file)\n            audio_file = audio_file[int((self.data.loc[ID, 'seconds']-5)\/audio_lenght)*data_lenght:int(self.data.loc[ID, 'seconds']\/audio_lenght)*data_lenght]\n            audio_file_fft = data_fft = np.abs(np.fft.fft(audio_file)[: len(audio_file)\/\/2])\n            # scale data\n            audio_file_fft = (audio_file_fft-audio_file_fft.mean())\/audio_file_fft.std()\n            X[i, ] = audio_file_fft\n            y[i, ] = self.data.loc[ID, self.data.columns[5:]].values\n        return X, y","4477e3fc":"train_generator = DataGenerator(path+'train_soundscapes\/', list_IDs_train, train_labels, batch_size)\nval_generator = DataGenerator(path+'train_soundscapes\/', list_IDs_val, train_labels, batch_size)\n#test_generator = DataGenerator(path+'test_soundscapes\/', list_IDs_test, test_data, 3)","d3f24bd9":"# epochs = 5\n#epochs = 5*5\nepochs = 6\nlernrate = 2e-3","878252ed":"model = Sequential()\nmodel.add(Conv1D(128, input_shape=(100, 1600\/\/2,), kernel_size=5, strides=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool1D(pool_size=(4)))\nmodel.add(Conv1D(128, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(num_labels, activation='softmax'))","20ca2644":"model.compile(optimizer = Adam(lr=lernrate),\n              loss='binary_crossentropy',\n              metrics=['binary_accuracy'])","f8f76cbb":"model.summary()","a12632a8":"history = model.fit_generator(generator=train_generator, validation_data=val_generator, epochs = epochs, workers=4)","ebe68e4d":"\n\nfig, axs = plt.subplots(1, 2, figsize=(16, 4))\nfig.subplots_adjust(hspace = .2, wspace=.2)\naxs = axs.ravel()\nloss = history.history['loss']\nloss_val = history.history['val_loss']\nepochs = range(1, len(loss)+1)\naxs[0].plot(epochs, loss, 'bo', label='loss_train')\naxs[0].plot(epochs, loss_val, 'ro', label='loss_val')\naxs[0].set_title('Value of the loss function')\naxs[0].set_xlabel('epochs')\naxs[0].set_ylabel('value of the loss function')\naxs[0].legend()\naxs[0].grid()\nacc = history.history['binary_accuracy']\nacc_val = history.history['val_binary_accuracy']\naxs[1].plot(epochs, acc, 'bo', label='accuracy_train')\naxs[1].plot(epochs, acc_val, 'ro', label='accuracy_val')\naxs[1].set_title('Accuracy')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Value of accuracy')\naxs[1].legend()\naxs[1].grid()\nplt.show()\n\n\"\"\" epochs=5.0, lernrate = 2e-3, batch_size = 16 \"\"\"\n#fig.savefig(\"img1.png\")\n\n\"\"\" epochs=5.0*5, lernrate = 2e-3, batch_size = 16*5 \"\"\"\nfig.savefig(\"img2.png\")","61b3627d":"output = samp_subm\noutput.to_csv('submission.csv', index=False)","e74e1a26":"output","fce9483c":"**If you are a beginner, this program is a good place to start.\n\n**Just run it, and you'll be on your way to submission.\n****"}}