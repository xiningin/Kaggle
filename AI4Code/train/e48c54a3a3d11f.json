{"cell_type":{"fd546a14":"code","b8b29d41":"code","816a674d":"code","74189c96":"code","512113fb":"code","41a557f6":"code","a2470ebe":"code","30073e08":"code","3c7f5aae":"code","86e43d3c":"code","22312203":"code","4f5446b2":"code","be4cae8e":"code","05d0cac8":"code","a453e242":"code","1b63faeb":"code","aab1d539":"code","480e4418":"code","4364b77e":"code","eb36b2ea":"code","93aaf826":"markdown","c803663e":"markdown","16d9cacf":"markdown","241c5a97":"markdown","bc162eb4":"markdown","4c722b22":"markdown","25ac3735":"markdown","c32d5c9a":"markdown","4eb96695":"markdown"},"source":{"fd546a14":"# Split the training set into training and validation\ndef splitTraining(train):\n\n    # Grab a quarter of the testing set for the validation set\n    split = (int(len(train)\/4))\n    return train[:-split], train[-split:]","b8b29d41":"import pandas as pd \nimport numpy as np\n\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string","816a674d":"# Import datasets\ntrain, valid = splitTraining(pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv'))\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","74189c96":"# Drop any rows where the text column is NaN for our datasets\ntrain = train.drop(train[train['text'].isna()].index.tolist())\nvalid = valid.drop(valid[valid['text'].isna()].index.tolist())","512113fb":"# Make all the text lowercase - casing doesn't matter when \n# we choose our selected text.\ntrain['text'] = train['text'].apply(lambda x: x.lower())\nvalid['text'] = valid['text'].apply(lambda x: x.lower())\ntest['text']  = test['text'].apply(lambda x: x.lower())","41a557f6":"pos_train = train[train['sentiment'] == 'positive']\nneutral_train = train[train['sentiment'] == 'neutral']\nneg_train = train[train['sentiment'] == 'negative']","a2470ebe":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(max_df=.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nX_train_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())\n\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    \n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\n\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","30073e08":"def calculate_selected_text(df_row, tol = 0):\n    \n    tweet = df_row['text']\n    sentiment = df_row['sentiment']\n    \n    if(sentiment == 'neutral'):\n        return tweet\n    \n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words = tweet.split()\n    words_len = len(words)\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n    \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + tol):\n        #if(new_sum > score):\n            score = new_sum\n            selection_str = lst[i]\n            #tol = tol*5 # Increase the tolerance a bit each time we choose a selection\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words\n        \n    return ' '.join(selection_str)","3c7f5aae":"pd.options.mode.chained_assignment = None","86e43d3c":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","22312203":"tol = 0.001\n\ntrain['predicted_selection'] = ''\n\nfor index, row in train.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    train.loc[train['textID'] == row['textID'], ['predicted_selection']] = selected_text","4f5446b2":"train['jaccard'] = train.apply(lambda x: jaccard(x['selected_text'], x['predicted_selection']), axis = 1)\nprint('The jaccard score for the training set is:', np.mean(train['jaccard']))","be4cae8e":"tol = 0.001\n\nvalid['predicted_selection'] = ''\n\nfor index, row in valid.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    valid.loc[valid['textID'] == row['textID'], ['predicted_selection']] = selected_text","05d0cac8":"valid['jaccard'] = valid.apply(lambda x: jaccard(x['selected_text'], x['predicted_selection']), axis = 1)\nprint('The jaccard score for the validation set is:', np.mean(valid['jaccard']))","a453e242":"train = pd.concat([train, valid], ignore_index=True)\npos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","1b63faeb":"cv = CountVectorizer(max_df=0.95, min_df=2,\n                                     max_features=10000,\n                                     stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","aab1d539":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","480e4418":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","4364b77e":"tol = 0.001\n\nfor index, row in test.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    sample.loc[sample['textID'] == row['textID'], ['selected_text']] = selected_text\n    ","eb36b2ea":"print(sample)\nsample.to_csv('submission.csv', index = False)","93aaf826":"Break up the training data into datasets where the sentiment is positive, neutral, or negative","c803663e":"Calculate the selected text and score for both the training set and validation set.","16d9cacf":"Recalculate word weights using the entire training set.","241c5a97":"Create a training set and a validation set.","bc162eb4":"### Algorithm for finding selected text: \n  \n1. For every tweet:\n\n    a. Let $j$ be the sentiment of the tweet. \n\n    b. If $j ==$ neutral return entire text.\n\n    c. Otherwise, for each subset of words in the tweet, calculate $\\sum\\limits_{i}w_{i, j}$, where $i$ is the set of words in the tweet\n\n   d. Return the subset of words with the largest sum, given that it exceeds some tolerance.","4c722b22":"Create and submit the submission file.","25ac3735":"### Algorithm for weight calculation:\n\n1. For each class $j \\in \\{positive, neutral, negative\\}$\n\n    a. Find all the words $i$ in the tweets belonging to class $j$.\n\n    b. Calculate $n_{i, j} =$ the number of tweets in class $j$ containing word $i$. \n\n    c. Let $d_j$ be the number of tweets in class $j$.  Calculate $p_{i, j} = \\frac{n_{i, j}}{d_j}$, the proportion of tweets in class $j$ that contain word $i$.\n\n    d. Let $w_{i, j} = p_{i, j} - \\sum\\limits_{k \\neq j}p_{i, k}$ be the weights assigned to each word within each class. \n    ","c32d5c9a":"### This is a simple solution using only word counts with CountVectorizer to make predictions.\n\n#### Here's the idea:\n- Find and weight words that are used most often in only certain kinds of tweets.\n- Search all subsets of the tweet and calculate a score based on these weights.\n- For positive or negative tweets, the selected text is the most highly weighted subset, within some threshold.\n- Always return the entire text for neutral tweets.","4eb96695":"### Generate Submission"}}