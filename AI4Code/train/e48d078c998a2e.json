{"cell_type":{"3f7549c6":"code","7f5d4e21":"code","ea6908e7":"code","e1b46529":"code","2b4d9df8":"code","86ad9d09":"code","8f29f24b":"code","3fb70e8b":"code","bdb62f28":"code","328ebbf2":"code","e07601d0":"code","91fd68c5":"code","b6544413":"code","ec571371":"code","455af770":"code","4bf8868e":"markdown","1a86fca2":"markdown","70d27685":"markdown","295be124":"markdown","80130956":"markdown","54f75e71":"markdown","92e7c7d5":"markdown","eee75ce6":"markdown","06993e4b":"markdown","0c453311":"markdown","15de3567":"markdown","d44ba704":"markdown","35133376":"markdown","db34d081":"markdown","4ca5015a":"markdown","3cf8c8ea":"markdown","501e0570":"markdown"},"source":{"3f7549c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f5d4e21":"df = pd.read_csv('..\/input\/covid-vaccination-forecast\/Vaccines_Singapore.csv')\ndf.info()","ea6908e7":"df.head()","e1b46529":"df.tail()","2b4d9df8":"import plotly_express as px\nfig = px.scatter(df,x = 'date', y = 'people_vaccinated', title=\"People vaccinated in SG\",labels={\n                     \"people_vaccinated\": \"People Vaccinated (Million)\" },)\nfig.show()","86ad9d09":"df1 = df[['date', 'people_vaccinated']]\ndf1.columns = ['ds', 'y']\ndf1.head()","8f29f24b":"df1['ds']= pd.to_datetime(df1['ds'])\ndf1.info()","3fb70e8b":"train_size = 28\ntest_size = df1.shape[0] - train_size\ndf_train = df1.head(train_size)\ndf_test = df1.tail(test_size)\nprint(df_train.shape, df_test.shape)\n\n","bdb62f28":"from fbprophet import Prophet\nm = Prophet()\nm.fit(df_train)","328ebbf2":"future = m.make_future_dataframe(periods=12, freq='W')\nfuture.tail()","e07601d0":"forecast = m.predict(future)\npd.options.display.float_format = '{:20,.0f}'.format\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","91fd68c5":"mil_list = [0] * 4\nfor i in range(len(mil_list)):\n    threshold = (i+1) * 1000000\n    result = np.where(forecast['yhat'] > threshold)\n    mil_list[i] = result[0][0]\nprint(mil_list)","b6544413":"test_pred = df_test[['ds']].copy()\ntest_pred = m.predict(test_pred)\ntest_pred[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","ec571371":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmape = round(mean_absolute_percentage_error(y_true=df_test['y'], y_pred=test_pred['yhat']),1)\nprint(\"Mape: \", mape)","455af770":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\ndef millions(x, pos):\n    'The two args are the value and tick position'\n    return '%1.1f Million' % (x * 1e-6)\nformatter = FuncFormatter(millions)\n\nimport matplotlib.dates as mdates\nmonthyearFmt = mdates.DateFormatter('%B %Y')\nlocator = mdates.AutoDateLocator(minticks=3, maxticks=7)\n\nfig = m.plot(forecast, xlabel='Date', ylabel='People Vaccinated')\nax = fig.gca()\nax.yaxis.set_major_formatter(formatter)\nax.xaxis.set_major_formatter(monthyearFmt)\nax.xaxis.set_major_locator(locator)\nax.scatter(df_test['ds'], df_test['y'], color='r', label='Actual data', marker='x')\nax.annotate('Model trained to this date',(df_train.iloc[-1]['ds'],df_train.iloc[-1]['y']), xytext=(0.4, 0.3), textcoords='axes fraction', arrowprops = dict(facecolor='green',color='green'))\nfor i in range(len(mil_list)):\n    arrow_label = str(i+1) + ' million vaccinated'\n    arrow_xpos = 0.1 + (i * 0.1)\n    arrow_ypos = 0.25 + (i * 0.2)\n    ax.annotate(arrow_label, (forecast.iloc[mil_list[i]]['ds'],forecast.iloc[mil_list[i]]['yhat']), xytext=(arrow_xpos, arrow_ypos), textcoords='axes fraction', arrowprops = dict(facecolor='blue',color='blue'))\nax.legend(loc='lower right', ncol=4)\nmape_string = \"Mean Absolute Percentage Error of actual vs predicted data: \" + str(mape) + \"%\"\nax.text(1, 0.15, mape_string, horizontalalignment='right',transform=ax.transAxes)\nax.title.set_text('Vaccination Forecast for SG')","4bf8868e":"The predict method will assign each row in future a predicted value which it names yhat. If you pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column yhat with the forecast, as well as columns for components and uncertainty intervals.","1a86fca2":"Let's check the Mean Absolute Percentage Error (MAPE) of the model on the validated data","70d27685":"Use the trained model to get predictions on the test data\n","295be124":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. You can get a suitable dataframe that extends into the future a specified number of days using the helper method Prophet.make_future_dataframe. By default it will also include the dates from the history, so we will see the model fit as well.","80130956":"## Updated SG data to 19th July. Vaccination forecast is built using 1st 28 data points","54f75e71":"I'm going to use the 1st 28 data points to train the model, and the rest of the points to validate the model later\n","92e7c7d5":"## FBProphet Model","eee75ce6":"## Let's draw the predicted forecast and all the historical + actual data","06993e4b":"We need to set the DS column explicitly to date format.","0c453311":"* The last reported date is on 19 July, so we have only ~6 mth of actual data so far.","15de3567":"Last predicted value is ~5 million!. Let's find the indexes of the 1st to 4th million predictions.","d44ba704":"My country Singapore only has 40 data entries so far, the 1st reported date is on 11th Jan.","35133376":"The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","db34d081":"You can see a surge in new vaccinations during 1st half of July, but the new vaccinations are stalling around ~4 million","4ca5015a":"Let's see the graph of people vaccinated to date!","3cf8c8ea":"Create Prophet object","501e0570":"Let's try to see weekly predictions for the next 12 weeks (3 mths) from the last date in the training data -> July to Sep"}}