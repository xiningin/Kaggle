{"cell_type":{"8d260da6":"code","6bcecfe7":"code","319d290e":"code","be9d3f79":"code","590f071b":"code","6a46efef":"code","1ddef5de":"code","2736fce1":"code","48dae24b":"code","41b5fa39":"code","a35e9a76":"code","bf6891ec":"code","159b1673":"code","e1f89872":"code","9306b047":"code","c4091926":"code","b38bda96":"code","5939233e":"code","d3f188e7":"code","7e363cc9":"code","b396d885":"code","3f882c7e":"code","4c8119b7":"code","bee72d96":"code","952f0600":"code","fa57dcfd":"code","7823083d":"code","67feb09d":"code","40afbc70":"code","5b7fc767":"code","47225b58":"code","63410392":"code","f87861c0":"markdown","c26f661d":"markdown","7dce331b":"markdown","aa516db8":"markdown","c4bea1c3":"markdown","eafb90a6":"markdown","cdaf6349":"markdown"},"source":{"8d260da6":"!pip install feature_engine","6bcecfe7":"import pandas as pd \nimport numpy as np \nimport missingno as mno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import Imputer, LabelEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer, MissingIndicator\nfrom feature_engine import missing_data_imputers as mdi\nfrom feature_engine.categorical_encoders import OneHotCategoricalEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom feature_engine import discretisers as dsc\nfrom feature_engine import categorical_encoders as ce","319d290e":"data = pd.read_csv(\"..\/input\/singapore-airbnb\/listings.csv\")","be9d3f79":"data.sample(4)","590f071b":"data.shape","6a46efef":"x = data.iloc[:,4:16].drop(columns=['price'])\ny = data.iloc[:,9]\nx.info()","1ddef5de":"mno.matrix(x, figsize = (20, 6))","2736fce1":"x=x.drop(columns=['last_review'])","48dae24b":"imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)\nmissing_column_mean = [\"reviews_per_month\", ]\nimputer = imputer.fit(x[missing_column_mean].values)\nx[missing_column_mean] = imputer.transform(data[missing_column_mean].values)","41b5fa39":"le=LabelEncoder()\ncol_names=x.select_dtypes(object).columns.astype(str)\nfor i in col_names:\n    x[i] = le.fit_transform(x[i])","a35e9a76":"from sklearn.ensemble import RandomForestRegressor\nkf = KFold(10, shuffle=True, random_state=1)\nscore=[]\nmse=[]\nfor l_train, l_valid in kf.split(x):\n    x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n    y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n    \n    rf=RandomForestRegressor(n_estimators=100)\n    rf.fit(x_train, y_train)\n    pred=rf.predict(x_valid)\n    m=mean_absolute_error(y_valid, pred)\n    s=rf.score(x_valid, y_valid)\n    score.append(s)\n    mse.append(m)","bf6891ec":"sns.distplot(score)","159b1673":"sns.distplot(mse)","e1f89872":"importance = pd.Series(np.abs(rf.feature_importances_))\nimportance.index = x.columns\nimportance.sort_values(inplace=True, ascending=False)\nimportance.plot.bar(figsize=(18,6))","9306b047":"data = data.iloc[:,4:16]","c4091926":"categorical = [var for var in data.columns if data[var].dtype=='O']\nprint('There are {} categorical variables'.format(len(categorical)))","b38bda96":"data['last_review'] = pd.to_datetime(data.last_review)\ndata['last_review_day'] = data['last_review'].dt.day\ndata['last_review_month'] = data['last_review'].dt.month\ndata['last_review_year'] = data['last_review'].dt.year\ndata['last_review_weekday'] = data['last_review'].dt.dayofweek\ndata=data.drop(columns=[\"last_review\"])\ncategorical.remove(\"last_review\")","5939233e":"numerical = [var for var in data.columns if data[var].dtype!='O']\ndiscrete = []\nfor var in numerical:\n    if len(data[var].unique()) < 20:\n        print(var, ' values: ', data[var].unique())\n        discrete.append(var)\nprint()\nprint('There are {} discrete variables'.format(len(discrete)))","d3f188e7":"numerical = [var for var in numerical if var not in discrete]\nnumerical.remove(\"price\")\nprint('There are {} numerical and continuous variables'.format(len(numerical)))","7e363cc9":"for var in data.columns:\n    if data[var].isnull().sum() > 0:\n        print(var, data[var].isnull().mean())\n\nmissing = [var for var in data.columns if data[var].isnull().sum() > 0]","b396d885":"for var in numerical:\n    plt.figure(figsize=(6,4))\n    plt.subplot(1, 2, 1)\n    fig = data.boxplot(column=var)\n    fig.set_title('')\n    fig.set_ylabel(var)\n    \n    plt.subplot(1, 2, 2)\n    fig = data[var].hist(bins=20)\n    fig.set_ylabel('Number of houses')\n    fig.set_xlabel(var)\n\n    plt.show()","3f882c7e":"for var in discrete:\n    data.groupby(var)['price'].median().plot()\n    plt.ylabel('Median Price per label')\n    plt.title(var)\n    plt.show()","4c8119b7":"data[categorical].nunique().plot.bar(figsize=(10,6))\nplt.title('CARDINALITY: Number of categories in categorical variables')\nplt.xlabel('Categorical variables')\nplt.ylabel('Number of different categories')","bee72d96":"for col in numerical:\n    if data[col].isnull().mean() > 0:\n        print(col, data[col].isnull().mean())","952f0600":"x = data.drop(columns=['price'])\ny = data.iloc[:,6]\nx[discrete] = x[discrete].astype('O')","fa57dcfd":"pipe = Pipeline([\n    ('missing_ind', mdi.AddNaNBinaryImputer(\n        variables=[\"reviews_per_month\", \"last_review_day\"]+discrete)),\n    ('imputer_num', mdi.MeanMedianImputer(imputation_method='median',\n                                          variables=[\"reviews_per_month\", \"last_review_day\"])),\n    ('imputer_cat', mdi.CategoricalVariableImputer(variables=categorical)),\n    ('freq_ca', mdi.FrequentCategoryImputer(variables=discrete))\n])\n\npipe.fit(x)\nx = pipe.transform(x)\nx.isnull().mean()","7823083d":"x[discrete] = x[discrete].astype('O')","67feb09d":"pipe = Pipeline([\n    ('categorical_enc', ce.OrdinalCategoricalEncoder(\n        encoding_method='ordered', variables=categorical+discrete)),\n    ('discretisation', dsc.EqualFrequencyDiscretiser(\n        q=5, return_object=True, variables=numerical)),\n    ('encoding', ce.OrdinalCategoricalEncoder(\n        encoding_method='ordered', variables=numerical))])\n\npipe.fit(x, y)\nx = pipe.transform(x)","40afbc70":"from sklearn.ensemble import RandomForestRegressor\nkf = KFold(10, shuffle=True, random_state=1)\nscore=[]\nmse=[]\nfor l_train, l_valid in kf.split(x):\n    x_train, x_valid = x.iloc[l_train], x.iloc[l_valid] \n    y_train, y_valid = y.iloc[l_train], y.iloc[l_valid]\n    rf=RandomForestRegressor(n_estimators=100)\n    rf.fit(x_train, y_train)\n    pred=rf.predict(x_valid)\n    m=mean_absolute_error(y_valid, pred)\n    s=rf.score(x_valid, y_valid)\n    score.append(s)\n    mse.append(m)","5b7fc767":"sns.distplot(score)","47225b58":"sns.distplot(mse)","63410392":"importance = pd.Series(np.abs(rf.feature_importances_))\nimportance.index = x.columns\nimportance.sort_values(inplace=True, ascending=False)\nimportance.plot.bar(figsize=(18,6))","f87861c0":"**Missing Value**","c26f661d":"**PRE-PROCESSING AND MODELLING**","7dce331b":"**Modelling - Random Forest**","aa516db8":"**Find Numerical**","c4bea1c3":"**Feature Cat**","eafb90a6":"**FEATURE ENGINEERING AND MODELLING** ","cdaf6349":"**Outliers and distributions**"}}