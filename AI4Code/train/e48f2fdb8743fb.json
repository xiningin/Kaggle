{"cell_type":{"182dc1c2":"code","210a9de7":"code","b539d205":"code","686b2aea":"code","1f142398":"code","0381db41":"code","67bc8697":"code","be995489":"code","44cb3a1a":"code","5c8d6b41":"code","ca821617":"code","00f6e47b":"code","9f2b897c":"code","107b8704":"code","b39786fe":"code","ad8ecb91":"code","0c4114b5":"code","4884c3d7":"code","6dc3919f":"code","f76eb549":"code","c7b0e792":"code","61e9c6fe":"code","2a7abfce":"code","51944f54":"code","67812ba6":"code","c1d598ee":"code","4bbe527b":"code","b56686a7":"code","5c776cd1":"code","bdf0d948":"code","d4adcd31":"code","01b4f3f1":"code","b5a680f6":"code","078bd9a3":"code","04cdb979":"code","3c0be196":"code","73850e52":"code","c79b5014":"code","7218e853":"code","9a057ee9":"code","0a1f7ba8":"code","b956f769":"code","9eb09d63":"code","c433c51a":"code","cd6f1c64":"code","13e3c8d0":"code","e86f9255":"code","63255341":"code","99d81593":"code","4bd6c5a6":"code","8c8aaa38":"code","f6e5d429":"code","4a15f87c":"code","7e892fee":"code","c031497d":"code","faaac4b4":"code","a9989c80":"code","db79b54b":"code","182ce9d3":"code","d1da8caa":"code","539f4987":"code","b305132e":"code","cad998cd":"code","96888322":"markdown","eba4deb7":"markdown","b91b9db2":"markdown","7992333b":"markdown","d85e33c0":"markdown","ac21929e":"markdown","ef3af989":"markdown","53e8e9cb":"markdown","a7990e70":"markdown","e589fbf4":"markdown","02062062":"markdown","4191b7ae":"markdown","786a9927":"markdown","1ac020a2":"markdown","46e170ae":"markdown","ecf4b8de":"markdown","3312a79c":"markdown","0a007c2f":"markdown","fec1b1f3":"markdown","828123bd":"markdown","ce6c2c8e":"markdown","9fdbaca2":"markdown","16d675f0":"markdown","343ab8f3":"markdown","3f13f71b":"markdown","132a3b94":"markdown","94d90375":"markdown","0e0e27c8":"markdown","2c811bf6":"markdown","58e78082":"markdown","07157118":"markdown","86a1efbd":"markdown","26fcf70f":"markdown","3b897252":"markdown","47cb60a7":"markdown","08e4d7fa":"markdown","8f41dbf9":"markdown","1449e59e":"markdown","cfa077fa":"markdown","2e962817":"markdown","31c5f93b":"markdown","3cba2d32":"markdown","c4aefe41":"markdown","aedb88c2":"markdown","5587f1c1":"markdown","c8d3148c":"markdown","a73e8970":"markdown","f4ce095e":"markdown","a85d099b":"markdown","6fcb6769":"markdown","780b5081":"markdown","6ab5bc8c":"markdown","13b9365a":"markdown"},"source":{"182dc1c2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","210a9de7":"treino = pd.read_csv('..\/input\/titanic\/train.csv')\nvalidacao = pd.read_csv('..\/input\/titanic\/test.csv')","b539d205":"treino.head()","686b2aea":"validacao.head()","1f142398":"treino.info()\nprint('_'*40)\nvalidacao.info()","0381db41":"treino[\"Embarked\"].value_counts()","67bc8697":"ax = sns.barplot(x = 'Embarked', y = 'Fare', data = treino)\nax","be995489":"treino[treino['Embarked'].isna()]","44cb3a1a":"treino[\"Embarked\"] = treino[\"Embarked\"].fillna(\"C\")","5c8d6b41":"novos_valores = {'S': 1, 'C': 2, 'Q': 3}\ntreino[\"Embarked\"] = treino[\"Embarked\"].map(novos_valores)\nvalidacao[\"Embarked\"] = validacao[\"Embarked\"].map(novos_valores)","ca821617":"treino.head()","00f6e47b":"validacao.head()","9f2b897c":"treino.info()\nprint('_'*40)\nvalidacao.info()","107b8704":"treino[\"Sex\"] = pd.get_dummies(treino[\"Sex\"])\nvalidacao[\"Sex\"] = pd.get_dummies(validacao[\"Sex\"])","b39786fe":"treino['Cabin'].unique()","ad8ecb91":"treino['Cabin'].isna().sum()","0c4114b5":"variaveis_reservas = [\"Cabin\", \"Ticket\"]\ntreino = treino.drop(variaveis_reservas, axis = 1)\nvalidacao = validacao.drop(variaveis_reservas, axis = 1)","4884c3d7":"pd.set_option('display.max_rows', None)\ntreino.sort_values('Survived')","6dc3919f":"treino_vivos = treino[treino[\"Survived\"] == 0].copy()\ntreino_mortos = treino[treino[\"Survived\"] == 1].copy()\n\nmedia_age_vivos = treino_vivos[\"Age\"].mean()\nmedia_age_mortos = treino_mortos[\"Age\"].mean()","f76eb549":"treino.loc[treino['Survived'] == 0, 'Age'] = treino.loc[treino['Survived'] == 0, 'Age'].fillna(media_age_mortos)\ntreino.loc[treino['Survived'] == 1, 'Age'] = treino.loc[treino['Survived'] == 1, 'Age'].fillna(media_age_vivos)","c7b0e792":"validacao['Age'] = validacao['Age'].fillna(validacao['Age'].mean())","61e9c6fe":"validacao[validacao['Fare'].isna()]","2a7abfce":"validacao['Fare'] = validacao['Fare'].fillna(validacao['Fare'].median())","51944f54":"treino.head()","67812ba6":"validacao.head()","c1d598ee":"treino.corr()","4bbe527b":"ax = sns.pairplot(treino, y_vars='Survived', x_vars=['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'],\n                  kind = 'reg')\nax.fig.suptitle('Dispers\u00e3o entre as Vari\u00e1veis', fontsize=20, y=1.05)\nax","b56686a7":"g = sns.FacetGrid(treino, col = 'Survived', height = 5)\ng.map(plt.hist, 'Age', bins=20)","5c776cd1":"g = sns.FacetGrid(treino, col = 'Survived', height = 5)\ng.map(plt.hist, 'SibSp', bins=20)","bdf0d948":"g = sns.FacetGrid(treino, col = 'Survived', height = 5)\ng.map(plt.hist, 'Parch', bins=20)","d4adcd31":"treino[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","01b4f3f1":"treino[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b5a680f6":"# Significado de cada vari\u00e1vel\n\n# Survived: Se sobreviveu ou n\u00e3o\n# Pclass: Ticket de classe(Status socio-econ\u00f4mico)\n# Name = Nome\n# Sex: Sexo\n# Age: Idade\n# SibSp: N\u00famero de irm\u00e3os\/irm\u00e3s ou c\u00f4njuges abordo\n# Parch: N\u00famero de pais ou crian\u00e7as abordo\n# Ticket: N\u00famero do Ticket\n# Fare: Tarifa paga\n# Cabin: N\u00famero da cabine\n# Embarked: Porta de embarque","078bd9a3":"treino.head()","04cdb979":"treino['FamilySize'] = treino['SibSp'] + treino['Parch']\n    \nvalidacao['FamilySize'] = validacao['SibSp'] + validacao['Parch']","3c0be196":"treino.head()","73850e52":"validacao.head()","c79b5014":"treino[[\"FamilySize\", \"Survived\"]].groupby(['FamilySize'],\n                                           as_index=False).mean().sort_values(by='Survived', ascending=False)","7218e853":"treino = treino.drop(\"SibSp\", axis=1)\ntreino = treino.drop(\"Parch\", axis=1)\n\nvalidacao = validacao.drop(\"SibSp\", axis=1)\nvalidacao = validacao.drop(\"Parch\", axis=1)","9a057ee9":"treino['Title'] = treino['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n\nvalidacao['Title'] = validacao['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])","0a1f7ba8":"treino[[\"Title\", \"Survived\"]].groupby(['Title'],\n                                           as_index=False).mean().sort_values(by='Survived', ascending=False)","b956f769":"treino.head()","9eb09d63":"validacao.head()","c433c51a":"treino = treino.drop(\"Name\", axis=1)\nvalidacao = validacao.drop(\"Name\", axis=1)","cd6f1c64":"titulos_treino = treino['Title'].unique()\ntotal_titulos_treino = len(titulos_treino)\nmapeamento_treino = dict(zip(titulos_treino, range(total_titulos_treino)))\n\ntitulos_val = validacao['Title'].unique()\ntotal_titulos_val = len(titulos_val)\nmapeamento_val = dict(zip(titulos_val, range(total_titulos_val)))","13e3c8d0":"treino['Title'] = treino['Title'].replace(mapeamento_treino)\nvalidacao['Title'] = validacao['Title'].replace(mapeamento_val)","e86f9255":"treino.head()","63255341":"validacao.head()","99d81593":"treino.info()","4bd6c5a6":"validacao.info()","8c8aaa38":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","f6e5d429":"treino = treino.drop(\"PassengerId\", axis=1)","4a15f87c":"X = treino.drop('Survived', axis = 1).copy()\nY = treino['Survived'].copy()\nX_treino, X_teste, Y_treino, Y_teste = train_test_split(X, Y, test_size= 0.5, random_state= 1)","7e892fee":"X_validacao  = validacao.drop(\"PassengerId\", axis=1).copy()\nX_treino.shape, X_teste.shape, Y_treino.shape, Y_teste.shape, X_validacao.shape","c031497d":"random_forest = RandomForestClassifier(n_estimators=100, max_depth = 10, random_state = 1)\nrandom_forest.fit(X_treino, Y_treino)\nY_predict = random_forest.predict(X_teste)\nrandom_forest.score(X_teste, Y_teste)\nacc_random_forest = round(random_forest.score(X_teste, Y_teste) * 100, 2)\nacc_random_forest","faaac4b4":"Val_predict = random_forest.predict(X_validacao)","a9989c80":"Sexto_modelo_feito_por_mim = pd.DataFrame({\n        \"PassengerId\": validacao[\"PassengerId\"],\n        \"Survived\": Val_predict\n    })","db79b54b":"#Sexto_modelo_feito_por_mim.to_csv('Sexto_modelo_feito_por_mim.csv', index=False)","182ce9d3":"Primeiro_modelo_feito_por_mim_score = 0.74162","d1da8caa":"Segundo_modelo_feito_por_mim_score = 0.75119","539f4987":"Terceiro_modelo_feito_por_mim_score = 0.76076","b305132e":"Quarto_modelo_feito_por_mim_score = 0.76555","cad998cd":"Quarto_modelo_feito_por_mim_score = 0.77990","96888322":"Exportando predi\u00e7\u00e3o.","eba4deb7":"Sabemos agora que pessoas que pagaram mais nas suas passagens geralmente entram pela entrada C e em sequ\u00eancia S e Q.","b91b9db2":"# Limpeza e transforma\u00e7\u00e3o dos dados","7992333b":"Agora s\u00f3 precisamos transformar os t\u00edtulos em num\u00e9ricos.","d85e33c0":"Aparentemente os dados de valida\u00e7\u00e3o est\u00e3o bem parecidos com os dados de treino.","ac21929e":"Na vari\u00e1vel Cabin existem muitos valores nulos, na verdade, a grande maioria, vamos olhar os valores \u00fanicos para ter\nno\u00e7\u00e3o de como podemos trabalhar isso.","ef3af989":"Sabemos tamb\u00e9m que as vari\u00e1veis Sex, Cabin e Embarked precisar\u00e3o de um tratamento antes de entrar no modelo.","53e8e9cb":"Vamos ver de uma forma diferente. Chance de sobreviv\u00eancia por n\u00famero de \"SibSp\" e \"Parch\"","a7990e70":"Dropando as vari\u00e1veis Parch e SibSp j\u00e1 que elas n\u00e3o ser\u00e3o mais necess\u00e1rias.","e589fbf4":"Nossa base de dados j\u00e1 est\u00e1 pronta para rodar nosso primeiro modelo, mas antes disso vamos olhar um pouco melhor para as vari\u00e1veis e ver se realmente vale a pena utilizar todas.","02062062":"Vamos tirar vari\u00e1veis que supostamente n\u00e3o ser\u00e3o ut\u00e9is do dataframe temporariamente, futuramente podemos test\u00e1-las.","4191b7ae":"Com esse comando podemos ver algumas outras vari\u00e1veis com valores NaN ou Missing, Age, Cabin e Embarked, precisaremos trat\u00e1-las","786a9927":"Vamos criar uma nova vari\u00e1vel com o tamanho da fam\u00edlia combinando SibSp e Parch, tamb\u00e9m vamos visualizar a rela\u00e7\u00e3o do tamanho da fam\u00edlia com a sobreviv\u00eancia.","1ac020a2":"Primeiro score no Kaggle sem par\u00e2metros no modelo","46e170ae":"Score no Kaggle com a nova vari\u00e1vel Title","ecf4b8de":"#  An\u00e1lisando Rela\u00e7\u00f5es das Vari\u00e1veis","3312a79c":"Olhando para a correla\u00e7\u00e3o percebemos que tem algumas vari\u00e1veis com forte correla\u00e7\u00e3o Positiva ou Negativas, por exemplo, as vari\u00e1veis \"Pclass\", \"Sex\", \"Fare\" e \"Embarked\" e nossos Pairplot confirma essa rela\u00e7\u00e3o. Temos tamb\u00e9m algumas outras que aparentemente n\u00e3o fazem tanta diferen\u00e7a assim, mas vamos olhar mais de perto.","0a007c2f":"Olhando as vari\u00e1veis \"SibSp\" e \"Parch\" fica dif\u00edcil chegar a uma conclus\u00e3o exata, muitas pessoas sem irm\u00e3os ou c\u00f4njuges viveram, mas tamb\u00e9m muitas morreram e o mesmo vale para pais e filhos. Na minha opin\u00e3o acabam sendo duas vari\u00e1veis codepentes, ou seja, uma pessoa que n\u00e3o tem irm\u00e3os\/c\u00f4njugues pode ter pais\/filhos abordo, e vice-versa. O ideal \u00e9 fazer uma nova vari\u00e1vel com o tamanho da fam\u00edlia.","fec1b1f3":"Podemos ver que todos os dados da coluna \"Embarked\" foram tratados e transformados, agora nos faltam apenas\n\"Age\", \"Cabin\" e \"Sex\".","828123bd":"Outra coisa que tem como fazermos \u00e9 classificar as pessoas por seus T\u00edtulos de Nome, vamos ver como isso se sai no nosso modelo.","ce6c2c8e":"Substituindo os valores NaN na vari\u00e1vel \"Age\".","9fdbaca2":"# Evolu\u00e7\u00e3o dos Scores no Kaggle","16d675f0":"# Criando novas vari\u00e1veis","343ab8f3":"Agora nos falta tratar os valores NaN da vari\u00e1vel \"Age\", a perguntar aqui \u00e9 \"Qual \u00e9 a melhor forma de preench\u00ea-l\u00e1?\"","3f13f71b":"Vamos olhar um pouco as vari\u00e1veis e ver se tiramos alguns insights para criar novas vari\u00e1veis que possam ajudar nosso modelo.","132a3b94":"Agora vamos transformar a coluna \"Embarked\" em valores num\u00e9ricos nos dois DataFrames","94d90375":"Taxa de sobreviv\u00eancia por tamanho de fam\u00edlia.","0e0e27c8":"Com uma pequena an\u00e1lise vemos que a grande maioria na vari\u00e1vel Embarked \u00e9 o S, sendo assim, podemos apenas tirar esses dois no nosso DataFrame ou preencher com o maior valor.","2c811bf6":"Importando bibliotecas","58e78082":"Score no Kaggle com a nova vari\u00e1vel FamilySize","07157118":"Ap\u00f3s olhar um pouco o DataFrame decidi preencher a vari\u00e1vel \"Age\" da seguinte forma, para os NaN que morreram, a m\u00e9dia da idade de quem morreu e o inverso para que viveu.","86a1efbd":"Transformando a vari\u00e1vel Sex em bin\u00e1rio.","26fcf70f":"Taxa de sobreviv\u00eancia por T\u00edtulo.","3b897252":"Prevendo resultado do DataFrame de valida\u00e7\u00e3o.","47cb60a7":"Cerca de 59 d\u00f3lares entram pela C, 28 d\u00f3lares entram pela S e 11 d\u00f3lares entram pela Q.","08e4d7fa":"Mas podemos tamb\u00e9m ver a rela\u00e7\u00e3o entre a quantidade que a pessoa pagou e se tem alguma rela\u00e7\u00e3o por qual porta ela entraria.","8f41dbf9":"Como o o dataframe de valida\u00e7\u00e3o n\u00e3o tem informa\u00e7\u00f5es de sobreviv\u00eancia eu irei colocar a m\u00e9dia da idade para todas que faltam.","1449e59e":"Nessa vari\u00e1vel temos alguns problemas, o primeiro \u00e9 que ela poderia ser importante para nosso modelo, ent\u00e3o \u00e9 uma pena ter que\nsimplesmente cort\u00e1-la. O segundo \u00e9 que n\u00e3o podemos preencher os valores NaN com qualquer valor, precisamos achar uma forma\nde descobrir quais s\u00e3o as cabines de cada passageiros ou ao menos chegar perto disso. Por\u00e9m, depois de um tempo pesquisando e\nolhando para as vari\u00e1veis decidi realmente cort\u00e1-la, ela tem muitos valores NaN, imposs\u00edvel corrigir, pelo menos eu\nn\u00e3o vi uma solu\u00e7\u00e3o at\u00e9 agora.","cfa077fa":"J\u00e1 no valor Fare do dataframe de valida\u00e7\u00e3o que falta, eu colocarei a mediana para n\u00e3o ter influ\u00eancia de outliers.","2e962817":"Score no Kaggle com Cross-validation usando train_test_split","31c5f93b":"Vamos olhar qual \u00e9 o valor que nossas duas vari\u00e1veis pagaram para entrar.","3cba2d32":"Em idade n\u00e3o da para prever muitos padr\u00f5es, mas j\u00e1 da saber que crian\u00e7as tem uma chance maior de sobreviv\u00eancia, faz sentido, para quem assistiu o filme \u00e9 comum ouvir a frase \"Mulheres e crian\u00e7as primeiro\", enquanto pessoas entre 20 e 30 anos tem uma chance maior de morrer.","c4aefe41":"Importando o modelo RandomForestClassifier e train_test_split","aedb88c2":"Rodando nosso primeiro modelo utilizando o RandomForestClassifier.","5587f1c1":"Escolhi preencher com maior valor C, pois o Fare deles s\u00e3o 80","c8d3148c":"# Titanic Competition","a73e8970":"Agora sim podemos ver que fam\u00edlia n\u00e3o \u00e9 muito bom quando se trata de sobreviv\u00eancia em alto mar.","f4ce095e":"De cara vemos alguns valores NaN e algumas vari\u00e1veis possivelmente sem import\u00e2ncia, como Name e Ticket.","a85d099b":"# Rodando Nosso Modelo Random Forest","6fcb6769":"Dividindo o dataframe entre treino e teste e tirando o id do passageiros do dataframe.","780b5081":"Importando dados de treino e valida\u00e7\u00e3o.","6ab5bc8c":"Score no Kaggle com o par\u00e2metro Max_depth = 10","13b9365a":"Vamos dropar os nomes j\u00e1 que n\u00e3o s\u00e3o mais \u00fateis."}}