{"cell_type":{"664dbece":"code","cc308706":"code","f6a979f8":"code","9f4ec2b0":"code","f0c2fbd9":"code","eb1c38c8":"code","1720d233":"code","7a4dcda1":"code","19527c83":"code","0c74fd6b":"code","ef278078":"code","e68957ef":"code","b5b0abc2":"code","570bb815":"code","bb167946":"code","35910fac":"code","0454ea30":"code","350461fc":"code","703c974d":"code","37cd6444":"code","d05635e8":"code","77e9c69d":"code","608a77a4":"code","91d8820c":"code","97a823d8":"code","1d33fd8c":"code","f4c4ccc8":"code","dcd973b6":"code","853ea74a":"markdown","646994dc":"markdown","5da99c2a":"markdown","842e0fd7":"markdown","6d7c8c2b":"markdown","960eef8e":"markdown","5b4315e7":"markdown","49f2b6dc":"markdown","be7a840f":"markdown","f9051073":"markdown","a00b7827":"markdown","7c2e7b63":"markdown","2f081933":"markdown","3cf6279b":"markdown","dea505b9":"markdown","c4214ade":"markdown","37d9a2b7":"markdown","b176c51f":"markdown","de78bb23":"markdown","db0b48e2":"markdown","f8b524e9":"markdown","3254554e":"markdown","d6653f68":"markdown","55a1af97":"markdown","a5796a7c":"markdown","6b9bd705":"markdown","37fd2b59":"markdown","f44e8b90":"markdown","8b5b7355":"markdown","a75002cd":"markdown","08bae495":"markdown","e61554c2":"markdown","62f1d09e":"markdown","9380487a":"markdown","643d8f82":"markdown","e2ea38c2":"markdown","5a673e79":"markdown"},"source":{"664dbece":"##Google play dataset##\nopened_file = open('..\/input\/google-play-store-apps\/googleplaystore.csv')\nfrom csv import reader\nread_file = reader(opened_file)\nandroid = list(read_file)\nandroid_header = android[0]\nandroid = android[1:]\n\n##Apple Store dataset##\nopened_file = open('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv')\nfrom csv import reader\nread_file = reader(opened_file)\nios = list(read_file)\nios_header = ios[0]\nios = ios[1:]","cc308706":"def explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]\n    for row in dataset_slice:\n        print(row)\n        print('\\n') # adds a new empty line after each row\n    if rows_and_columns:\n        print('Number of rows: ', len(dataset))\n        print('Number of columns: ', len(dataset[0]))\n    return '\\n' # add this empty line to avoid the \"none\" result","f6a979f8":"print(android_header)\nprint('\\n')\nprint(explore_data(android, 0, 3, True))","9f4ec2b0":"print(ios_header)\nprint('\\n')\nprint(explore_data(ios, 0, 3, True))","f0c2fbd9":"for row in android: \n    if len(row) != len(android_header):\n        print(row) # This print the row with different lenght\n        print('\\n')\n        print(android.index(row))# This print the number of thw row\n        print(len(row))# We verify the len of the row\n        print('\\n')\n        \nprint(android_header)# This print the header\nprint(len(android_header)) #Verify the len of the header\nprint('\\n')","eb1c38c8":"print(len(android))\ndel (android[10472]) # This function deletes a given row\nprint (len(android))","1720d233":"duplicate_apps = []\nunique_apps = []\n\nfor app in android:\n    name = app[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)       \n    else:\n        unique_apps.append(name)\n\nprint('Number of duplicate apps: ', len(duplicate_apps))\nprint('\\n')\nprint('Examples of duplicate apps:', duplicate_apps[:15])\nprint('\\n')","7a4dcda1":"for app in android:\n    name = app[0]\n    if name == 'Quick PDF Scanner + OCR FREE':\n        print(app)    ","19527c83":"print ('Expected length: ', len(android) - 1181)\n\nreviews_max = {}\n\nfor app in android:\n    name = app[0]\n    n_reviews = float(app[3])\n    if name in reviews_max and reviews_max[name] < n_reviews:\n        reviews_max[name] = n_reviews\n    elif name not in reviews_max:\n        reviews_max[name] = n_reviews\nprint('Result length:', len(reviews_max))","0c74fd6b":"android_clean = [] #Create first two empty list \nalready_added = []\n\nfor app in android:\n    name = app[0] # Assign the app name to a variable\n    n_reviews = float(app[3]) # Convert the number of reviews to float and assig to a variable\n    if (n_reviews == reviews_max[name]) and (name not in already_added):\n        android_clean.append(app)\n        already_added.append(name)","ef278078":"explore_data(android_clean, 0, 3, True)","e68957ef":"duplicate_apps_ios = []\nunique_apps_ios = []\n\nfor app_id in ios:\n    id_ios = app_id[1]\n    if id_ios in unique_apps_ios:\n        duplicate_apps_ios.append(id_ios)       \n    else:\n        unique_apps_ios.append(id_ios)\n\nprint('Number of duplicate apps: ', len(duplicate_apps_ios))\nprint('\\n')\nprint('Examples of duplicate apps:', duplicate_apps_ios[:15])\nprint('\\n')","b5b0abc2":"def name_str(string):\n    for character in string:\n        if ord(character) > 127:\n            return False\n    return True\nprint(name_str('Instagram'))\nprint(name_str('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(name_str('Docs To Go\u2122 Free Office Suite'))\nprint(name_str('Instachat \ud83d\ude1c'))","570bb815":"def name_str_eng(string):\n    ascii_n = 0 \n    for character in string:\n        if ord(character) > 127:\n            ascii_n += 1\n            if ascii_n > 3:\n                return False\n    return True\n\nprint(name_str_eng('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(name_str_eng('Docs To Go\u2122 Free Office Suite'))\nprint(name_str_eng('Instachat \ud83d\ude1c'))","bb167946":"android_eng = []\nios_eng = []\n\nfor app in android_clean:\n    name = app [0]\n    if name_str_eng(name):\n        android_eng.append(app)\n       \n   \n\nfor app in ios:\n    name = app [2]\n    if name_str_eng(name):\n        ios_eng.append(app)\n        \n  \n        \nprint(explore_data(ios_eng, 0, 3, True))\nprint('\\n')\nprint(explore_data(android_eng, 0, 3, True))","35910fac":"android_free = []\nios_free = []\n\nfor app in android_eng:\n    price = app [7]\n    if price == '0':\n        android_free.append(app)\n       \n   \n\nfor app in ios_eng:\n    price = app [5]\n    if price == '0':\n        ios_free.append(app)\n        \n  \n        \nprint(explore_data(ios_free, 0, 3, True))\nprint('\\n')\nprint(explore_data(android_free, 0, 3, True))","0454ea30":"def freq_table(data_set, index):\n    frequency_table = {}\n    \n    for app in data_set:\n        value = app[index]\n        if value in frequency_table:\n            frequency_table[value] += 1\n        else:\n            frequency_table[value] = 1\n            \n    return frequency_table\n\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n    \n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])\n    return '\\n'\n\nprint(display_table(ios_free, -5))\nprint('\\n')\nprint(display_table(android_free, -4))\nprint('\\n') \nprint(display_table(android_free, 1))\nprint('\\n')   ","350461fc":"def freq_table(data_set, index):\n    frequency_table = {}\n    total = 0\n    \n    for app in data_set:\n        total += 1\n        value = app[index]\n        if value in frequency_table:\n            frequency_table[value] += 1\n        else:\n            frequency_table[value] = 1\n    \n    frequency_percentage = {}\n    for value in frequency_table:\n        percentage = (frequency_table[value]\/ total)*100\n        frequency_percentage[value] = percentage          \n    return frequency_percentage\n\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n    \n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])\n    return '\\n'\n\nprint(display_table(ios_free, -5))\nprint('\\n')\nprint(display_table(android_free, -4))\nprint('\\n') \nprint(display_table(android_free, 1))\nprint('\\n')   ","703c974d":"prime_genre = freq_table(ios_free, -5)\napp_genre = []\ngenre_list = []\navg_ratings = []\n    \nfor genre in prime_genre:    \n    total = 0\n    len_genre = 0\n    for app in ios_free:\n        genre_app = app[-5]\n        if genre_app == genre:\n            n_user_rt = float(app[6]) # Is rating count total\n            total += n_user_rt\n            len_genre += 1\n    avg_n_ratings = total\/len_genre\n    genre_list.append(genre)\n    avg_ratings.append(avg_n_ratings)\n\ndef merge(list1, list2): \n    merged_list = [(list1[i], list2[i])\n        for i in range(0, len(list1))] \n    return merged_list     \n\nmerged = merge(genre_list, avg_ratings)\n\ndef takeSecond(elem):\n    return elem[1]\n\nmerged.sort(key=takeSecond, reverse = True)\n\nmerged\n","37cd6444":"for app in ios_free:\n    if app[-5] == 'Navigation':\n        print (app[2], ':', app[6])","d05635e8":"for app in ios_free:\n    if app[-5] == 'Reference':\n        print (app[2], ':', app[6])","77e9c69d":"for app in ios_free:\n    if app[-5] == 'Social Networking':\n        print (app[2], ':', app[6])","608a77a4":"display_table(android_free, 5)","91d8820c":"categories_android = freq_table(android_free, 1)\ngenre_list_an = []\navg_installs_an = []\n\nfor category in categories_android:\n    total = 0\n    len_category = 0\n    for app in android_free:\n        category_app = app[1]\n        if category_app == category:\n            n_installs = app[5]\n            n_installs = n_installs.replace('+', '')# This function replace a character\n            n_installs = n_installs.replace(',', '')\n            n_installs = float(n_installs)\n            total += n_installs\n            len_category += 1\n    avg_n_installs = total \/ len_category\n    genre_list_an.append(category)\n    avg_installs_an.append(avg_n_installs)\n\nmerged_an = merge(genre_list_an, avg_installs_an)\nmerged_an.sort(key=takeSecond, reverse = True)\nmerged_an\n\n    ","97a823d8":"for app in android_free:\n    if app[1] == 'COMMUNICATION' and (app[5] == '1,000,000,000+'\n                                      or app[5] == '500,000,000+'\n                                      or app[5] == '100,000,000+'):\n        print (app[0], ':', app[5])","1d33fd8c":"for app in android_free:\n    if app[1] == 'SOCIAL' and (app[5] == '1,000,000,000+'\n                                      or app[5] == '500,000,000+'\n                                      or app[5] == '100,000,000+'):\n        print (app[0], ':', app[5])","f4c4ccc8":"for app in android_free:\n    if app[1] == 'VIDEO_PLAYERS' and (app[5] == '1,000,000,000+'\n                                      or app[5] == '500,000,000+'\n                                      or app[5] == '100,000,000+'):\n        print (app[0], ':', app[5])","dcd973b6":"for app in android_free:\n    if app[1] == 'BOOKS_AND_REFERENCE' and (app[5] == '1,000,000+'\n                                            or app[5] == '5,000,000+'\n                                            or app[5] == '10,000,000+'\n                                            or app[5] == '50,000,000+'):\n        print(app[0], ':', app[5])","853ea74a":"## Removing duplicated entries\n\nIn this step we need first to identify the version of the duplicate app that has the most reviews:\n\n   1. We need to identify the expected length that we must obtain once we removed duplicates.\n   2. With the help of the dictionary function we need to identify how many apps we obtain if we remove the duplicated data. We are going to filter to obtain only the max number of reviews in an app.","646994dc":"First we are going to open the datasets, you can download the android dataset in this [link](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps), the apple store dataset can be downloaded in this [link](https:\/\/www.kaggle.com\/ramamet4\/app-store-apple-data-set-10k-apps). ","5da99c2a":"So, we need to remove the special characters of this clasification to made a proper use of the data. We again will use a nested loop, but in this case we are goin to use the `str.replace()` function to remove the special characters and so we can convert the string of the number of installations into a `float()`.","842e0fd7":"Apple store counts a total of 7197 apps and 16 columns, the explanation of the columns could be seen in the [documentation](https:\/\/www.kaggle.com\/ramamet4\/app-store-apple-data-set-10k-apps)","6d7c8c2b":"Following the result now we have 8864 android apps and 3222 ios apps, this is the final step, we are not going to clean more our data.","960eef8e":"## Profitable App Profiles for the App Store and Google Play Markets\n\nThis project is an study of the most profitable apps in Google Play and Apple Store, the objective is identify the **most downloaded** apps, the apps with **more ratings**, and how much these **apps cost**.","5b4315e7":"To remove the non-english apps we need to find a criteria to verify that all the string have english characters. In this case we are going to use the `ord()` function, this function return us the number of the character according ASCII clasification. If the number is greatre than 127 the character is not part of the common used characters on english.","49f2b6dc":"Now we need to confirm that in the Apple Store data does not have duplicates:","be7a840f":"Looking the results we could see that, at least only for english and free apps, we have the following results.\n\nFor the `prime_genre`in the app store:\n+ The most commmon genre is games, the runner-up is entertaiment.\n+ Education, social networking, photo, are other common apps and sum almost a 12% of the apps.\n+ The most apps are for games and entertainment.\n+ We need to see the total users of the apps to give a general conclusion, but it's a good sign that most of the apps are for games and entertainment.\n\nLooking in google play, at least for english and not free apps, we have the following remarks for the columns **`Category`**  and  **`Genres`**.\n\n+ In category the principal genres are Tools, Entertainment. In Genres Family and Games.\n+ Tools, business and lifestyle are other genres that are important. Education, business and productivity are othe categories.\n\nIf you compare both stores you see that games and entertainment are the majority of the apps. The genre family is associated with games apps for children, so it is also a game category.","f9051073":"We now must explore the **`android_clean`** dataset to check the result: ","a00b7827":"Next, we go to explore the data, we are going to define a function called explore data. \n\nThis function calls four parameters:\n  + `dataset`: is to be expected a lists of lists \n  + `Start an End`: are integers and represent the starting and ending indice from the data set.\n  + `rows and columns`: is a boolean (`True` or `False`)","7c2e7b63":"Next we are going to print the first few rows of each data set, first the android dat set.","2f081933":"## Most used apps Google\n\nThe google store have another way to organize the info, google had the following ranking of installations:","3cf6279b":"The most ratings are in reference, social networking and navigation, lets dive a little into each genre:","dea505b9":"Next we do the same with the Apple Store data set.","c4214ade":"We need to see how the duplicated apps appear in the data set, so we are going to print an example:","37d9a2b7":"Similar then in App Store case, apps like Whatsapp, Skype, and Messenger have a lot of installs.","b176c51f":"## Popular genres on android and ios\n\nOur direction is towards to put a first app on android to later put the app in ios:\n\n1. Build an android app with minimal chataristics.\n2. If we have good response, we develop it further\n3. If the apple is profitable the next step is to move to the ios plataform.\n\nThe columns that could be useful for the analisis are in ios apps `primer_genre` and in android apps `Genres` and `Category`.\n\nSo to identify the genree we are going to do the following steps:\n\n1. We need to crate a function that given a dataset and an index number returns the frequency of the values in the index, and put this values in a dictionary.\n2. We need to create a second function that convert the dictionry in a table that we can sort, so we van visualize easyly the most popular genres.","de78bb23":"Original in android we have 10841, in ios 7197. Noe in Android we have 9614 apps, and in Ios we have 6183 apps.","db0b48e2":"## Data Cleaning\n\nWe need to remove or correct data in the dataset for its proper use. Following the forum discution, a member of Kaggel indicates that there is an error in the [row 10472](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/discussion\/66015). So, we are going to check if 10472 is the only row with different length:","f8b524e9":"Once verified, we will delete this row:","3254554e":"## Most used apps\n\nNow, to complement the previous step we are going to review the most used apps. In Google Play we have the info in the column  **`Installs`**, in tha AppStore we have the column  ** `rating_count_tot`**\n\nIn this exercise we use a nested loop, the firsth loop iterates over the `genre`, and the nested loop iterates over the `app`, at the end we will obtain the genre and the average of ratings for each one.\n\nAt the end we are going to use another way to merge the final list to sort the results and see better wich are the most used apps.","d6653f68":"We don't want to remove all the duplicate entries, we need to get almost one entry. We can use a filter, in this case the number of reviews, if an **`app`** entry have a greater number of reviews, this would be and older version, so we are going to use this criterion:","55a1af97":"## Duplicated data\n\nNow we are going to explore if we have duplicated entries. We create two list for the android dat set to explore which apps have duplicates.","a5796a7c":"Looking through the book apps we can see that a book app is feasible to do and easy to develop. Apps that use sacred texts could be an affordable option to start, and the people could be glad to learn more regarding theses texts.","6b9bd705":"## Identifying free apps\n\nWe are going to work only with free apps. So we are going to use the same loops of the previous step, but in this case we are put the criteria of price 0.","37fd2b59":"Now, we are going to use the dictionary to remove the duplicated rows.\n\nUse the dictionary you created above to remove the duplicate rows. Into the loop use an If statement:\n\n+ If n_reviews is the same as the number of maximum reviews of the app name (the number can be found in the reviews_max dictionary) and name is not already in the list already_added: Append the entire row to the android_clean list (which will eventually be a list of list and store our cleaned data set).\n+ Append the name of the app name to the already_added list \u2014 this helps us to keep track of apps that we already added","f44e8b90":"Sorted the list we can observe that Communication, Video_player and Social are the most installed categories, so we are going to check the apps of these categories.","8b5b7355":"Since we are going to exclude using this system apps that are in english but with special characters, we are going to use another additional criteria to review the code.","a75002cd":"Now we are going to use the new function to filter the name of the apps. We are going to use the function in two loops, one for android apps other for apple apps.","08bae495":"We can also visualize the results in percentage to see a more consolidated data for analisis. In this case, inside the `freq_table` function we include `frequency_percentage` dictionary, that uses the percentage of the genre of the total of genres in the index. ","e61554c2":"We see in Video apps like Youtube, Google play movies and Mx Player taking the lead in the genre.","62f1d09e":"The google play counts with 10841 apps and 13 columns, the information of the columns could be seen in the [source](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps) of the dataset.","9380487a":"In this case apps likes facebook, pinterest and Linkedin are the most used.","643d8f82":"So, looking the results we obtain:\n\n+ The apps with more ratings in navigation are waze, google maps, and Geocaching.\n+ The apps with more ratings are the bible, and the dictionaries.\n+ The apps with most ratings on social network are facebook, pinterest and skype for phone.","e2ea38c2":"## Conclusion\n\nThis is a first attemp to complete a guided project, there is few things that I added to this project, in general I followed the steps of the solved project. Interesting to return later to this same project and try to see what I can add or do different.","5a673e79":"## Removing non-english apps"}}