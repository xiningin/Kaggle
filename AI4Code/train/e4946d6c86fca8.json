{"cell_type":{"89bb475e":"code","6d2cde9e":"code","fc7a6d7b":"code","9a55a8db":"code","84eaeece":"code","0da6e637":"code","1f04fd67":"code","ba8c8521":"code","4e17ecab":"code","112b55fc":"code","6807ad59":"code","2d5ac0e6":"code","e60e80da":"markdown"},"source":{"89bb475e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ndef normalize(df):\n    result = df.copy()\n    for feature_name in df.columns:\n        max_value = df[feature_name].max()\n        min_value = df[feature_name].min()\n        result[feature_name] = (((df[feature_name] - min_value) \/ (max_value - min_value)) - 0.5) *2\n    return result\n\ndef zscore(series):\n    return (series - series.mean()) \/ np.std(series)","6d2cde9e":"!pip install yfinance","fc7a6d7b":"\nimport yfinance as yf\n\nimport os\nimport matplotlib.pyplot as plt\n\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\ndateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m-%d')\n# spy_raw = pd.read_csv('\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/ETFs\/spy.us.txt',sep=',', index_col='Date', parse_dates=['Date'], date_parser=dateparse).fillna(0)\n# qqq_raw = pd.read_csv('\/kaggle\/input\/price-volume-data-for-all-us-stocks-etfs\/ETFs\/qqq.us.txt',sep=',', index_col='Date', parse_dates=['Date'], date_parser=dateparse).fillna(0)\n\nspy_raw = yf.download('SPY', \n                      start='2005-3-1', \n                      end='2021-03-10', \n                      progress=False)  \n\nqqq_raw = yf.download('QQQ', \n                      start='2005-3-1', \n                      end='2021-03-10', \n                      progress=False)  \n\n","9a55a8db":"qqq_raw.tail()","84eaeece":"# select on the same dates\nspy_raw = spy_raw.loc['2005-3-1':]\nspy_raw = spy_raw.rename(columns={\"Close\": \"spy\"})\nspy_raw = spy_raw.drop(columns=['Open', 'High', 'Low', 'Volume', 'Adj Close'])\n\nqqq_raw = qqq_raw.loc['2005-3-1':]\nqqq_raw = qqq_raw.rename(columns={\"Close\": \"qqq\"})\nqqq_raw =qqq_raw.drop(columns=['Open', 'High', 'Low', 'Volume', 'Adj Close'])\n","0da6e637":"# join multiple tables into one close table and normalize between -1 and 1\nclose_raw = spy_raw.merge(qqq_raw, how='inner', on='Date')\n\nprint(len(close_raw))\nclose_raw.corr(method='pearson', min_periods=1)","1f04fd67":"# train\/test spkit\ntrain_spy = close_raw['2006-06-08':'2018-08-08']['spy']\ntrain_qqq = close_raw['2006-06-08':'2018-08-08']['qqq']\ntest_spy  = close_raw['2020-03-08':]['spy']\ntest_qqq  = close_raw['2020-03-08':]['qqq']","ba8c8521":"#calc z_score\nratios = close_raw['2010-3-1':'2017-11-08']['spy'] \/ close_raw['2010-3-1':'2017-11-08']['qqq']\nzscore(ratios).plot(figsize=(15,7))\nplt.axhline(zscore(ratios).mean(), color='black')\nplt.axhline(1.0, color='red', linestyle='--')\nplt.axhline(-1.0, color='green', linestyle='--')\nplt.legend(['Ratio z-score', 'Mean', '+1', '-1'])\nplt.show()","4e17ecab":"# Compute rolling mean and rolling standard deviation\ndef calc_zscore(ratios, window1, window2):\n    ma1 = ratios.rolling(window=window1,center=False).mean()\n    ma2 = ratios.rolling(window=window2,center=False).mean()\n    std = ratios.rolling(window=window2,center=False).std()\n    zscore = (ma1 - ma2)\/std\n    return zscore\n\ndef plot_explain(S1, S2, window1, window2, zscore_60_5, gold_marker_gain, gold_marker_loss):\n    ratio = S1 \/ S2\n    # Plot price buy sell\n    plt.figure(figsize=(18,9))\n    buy = ratio.copy()\n    sell = ratio.copy()\n    buy[zscore_60_5>-1] = 0\n    sell[zscore_60_5<1] = 0\n    # Init buyR and sellR\n    S1[window2:].plot(color='b')\n    S2[window2:].plot(color='c')\n    buyR = 0*S1.copy()\n    sellR = 0*S1.copy()\n    # When buying the ratio, buy S1 and sell S2\n    buyR[buy!=0] = S1[buy!=0]\n    sellR[buy!=0] = S2[buy!=0]\n    # When selling the ratio, sell S1 and buy S2 \n    buyR[sell!=0] = S2[sell!=0]\n    sellR[sell!=0] = S1[sell!=0]\n    # Plot buy and sell\n    buyR[window2:].plot(color='g', linestyle='None', marker='^')\n    sellR[window2:].plot(color='r', linestyle='None', marker='^')\n    x1,x2,y1,y2 = plt.axis()\n    plt.axis( (x1, x2, min(S1.min(),S2.min()), max(S1.max(),S2.max()) ) )\n    plt.legend(['spy','qqq', 'Buy Signal', 'Sell Signal'])\n    plt.show()\n    # plot zscore\n    plt.figure(figsize=(18,7))\n    zscore_60_5.plot()\n    plt.axhline(0, color='black')\n    plt.axhline(1.0, color='red', linestyle='--')\n    plt.axhline(-1.0, color='green', linestyle='--')\n    gold_marker_gain.plot(color='g', linestyle='None', marker='^')\n    gold_marker_loss.plot(color='r', linestyle='None', marker='^')\n    plt.legend(['Rolling Ratio z-Score', 'Mean', '+1', '-1'])\n    plt.show()\n\ndef trade(S1, S2, window1, window2, zthreshhold_buysell=1.0, zthreshhold_clear=0.5, doplot=False):\n    maximum_S1_needed = 0\n    maximum_S2_needed = 0\n    # If window length is 0, algorithm doesn't make sense, so exit\n    if (window1 == 0) or (window2 == 0):\n        return 0\n    ratios = S1\/S2\n    zscore = calc_zscore(ratios, window1, window2)\n    # Simulate trading\n    money = 0\n    countS1 = 0\n    countS2 = 0\n    gain_count = 0\n    gain_amount = 0.0\n    loss_count = 0\n    loss_amount = 0.0\n    gold_marker_gain = zscore.copy()\n    gold_marker_gain[:] = float('nan')\n    gold_marker_loss = zscore.copy()\n    gold_marker_loss[:] = float('nan')\n    for i in range(len(ratios)):\n        # Sell short if the z-score is > 1\n        if zscore[i] > zthreshhold_buysell:\n            tmp = S1[i] - S2[i] * ratios[i]\n            money += tmp\n            countS1 -= 1\n            countS2 += ratios[i]\n        # Buy long if the z-score is < 1\n        elif zscore[i] < -zthreshhold_buysell:\n            tmp = S2[i] * ratios[i] - S1[i]\n            money += tmp\n            countS1 += 1\n            countS2 -= ratios[i]\n        # Clear positions if the z-score between -.5 and .5\n        elif abs(zscore[i]) < zthreshhold_clear:\n            tmp = countS1*S1[i] + S2[i] * countS2\n            if maximum_S1_needed < countS1:\n                maximum_S1_needed = countS1\n            if maximum_S2_needed < countS2:\n                maximum_S2_needed = countS2\n            if tmp > 0:\n                gain_count += 1\n                gain_amount += tmp\n                gold_marker_gain[i] = zscore[i]\n            elif tmp < 0:\n                loss_count += 1\n                loss_amount += tmp\n                gold_marker_loss[i] = zscore[i]\n            money += tmp\n            countS1 = 0\n            countS2 = 0\n    tmp = countS1*S1[i] + S2[i] * countS2\n    if tmp > 0:\n        gain_count += 1\n        gain_amount += tmp\n    else:\n        loss_count += 1\n        loss_amount += tmp\n    money += tmp\n    # plot\n    if doplot:\n        plot_explain(S1, S2, window1, window2, zscore, gold_marker_gain, gold_marker_loss)\n    print(countS1)\n    print(countS2)\n    print(gain_count)\n    print(loss_count)\n    print(gain_amount)\n    print(loss_amount)\n    print(\"maximum_S1_needed: %f\" % maximum_S1_needed)\n    print(\"maximum_S2_needed: %f\" % maximum_S2_needed)\n    print(\"Money that is gained addtionally from buy\/sell: %f\" % money)\n    return money","112b55fc":"# extra money earned from pair trading \ntrade(train_spy , train_qqq, 5, 90, zthreshhold_buysell=1.0, doplot=True)\n","6807ad59":"## extra money earned from pair trading \ntrade(test_spy , test_qqq, 5, 90, zthreshhold_buysell=1.0, zthreshhold_clear=0.5 ,  doplot=True)","2d5ac0e6":"# extra money earned from pair trading \ntrade(test_spy , test_qqq, 5, 30, zthreshhold_buysell=1.0, zthreshhold_clear=0.5,  doplot=True)","e60e80da":"TODO:\n* 1. better visualization (Done)\n* 2. determine what is the cuase of losing money? what are some bad trades that we could get rid of\n* 3. How to select best parmaeter like zthreshhold on train\/test data\n* 4. Explian how to select pairs (spy and qqq similar assumed in this case)"}}