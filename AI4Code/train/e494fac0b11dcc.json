{"cell_type":{"908f57c8":"code","59dcde3a":"code","90130a8f":"code","7e1dcfa1":"code","fe035fd7":"code","e2b54c55":"code","4254f085":"code","afe495e3":"code","65f75408":"code","26598447":"code","aac369b6":"code","caec26a8":"code","332b9bac":"code","e3c1dfab":"code","865a7c43":"code","11b2ccf8":"code","942f5ae2":"code","3954e406":"code","ee367390":"code","a1e5d527":"code","7c39119f":"markdown","39e9100b":"markdown","4b9923ed":"markdown","0d140b10":"markdown"},"source":{"908f57c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59dcde3a":"data = pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')\ndata.head()","90130a8f":"data.isna().sum()","7e1dcfa1":"data.info()","fe035fd7":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_palette(sns.color_palette([\"#e68c83\",\"#19737c\",\"#c82e2e\",\"#37d1d1\",\"#77c164\"]))","e2b54c55":"fig, ax = plt.subplots(ncols=3, nrows=1, figsize=[12,6])\nax[0].pie(data[\"gender\"].value_counts(), labels=data[\"gender\"].unique(), pctdistance=0.1, autopct=\"%.1f%%\")\nax[0].set_title(\"M\u00fc\u015fteri Cinsiyet Da\u011f\u0131l\u0131m\u0131\", fontsize=12)\nax[1].pie(data[\"Partner\"].value_counts(), labels=data[\"Partner\"].unique(), pctdistance=0.1, autopct=\"%.1f%%\")\nax[1].set_title(\"M\u00fc\u015fteri Medeni Hali\", fontsize=12)\nax[2].pie(data[\"PaperlessBilling\"].value_counts(), labels=data[\"PaperlessBilling\"].unique(), pctdistance=0.1, autopct=\"%.1f%%\")\nax[2].set_title(\"Elektronik Fatura Kullan\u0131m\u0131\", fontsize=12)","4254f085":"sns.countplot(x=data[\"InternetService\"])","afe495e3":"sns.countplot(x=data[\"Contract\"], hue=data[\"Churn\"])","65f75408":"sns.countplot(x=data[\"Contract\"], hue=data[\"InternetService\"])","26598447":"sns.countplot(x=data[\"StreamingTV\"], hue=data[\"Churn\"])","aac369b6":"sns.countplot(y=data[\"PaymentMethod\"], hue=data[\"Churn\"])","caec26a8":"for i in data.columns:\n  u = data[i].unique()\n  print(\"{} : {}\".format(i,u))","332b9bac":"data = data.drop(['Unnamed: 0', 'customerID'], axis=1)","e3c1dfab":"data[\"gender\"].replace(\"Male\", 1, inplace=True)\ndata[\"gender\"].replace(\"Female\", 0, inplace=True)\n\ndata[\"Partner\"].replace(\"Yes\", 1, inplace=True)\ndata[\"Partner\"].replace(\"No\", 0, inplace=True)\n\ndata[\"Dependents\"].replace(\"Yes\", 1, inplace=True)\ndata[\"Dependents\"].replace(\"No\", 0, inplace=True)\n\ndata[\"PhoneService\"].replace(\"Yes\", 1, inplace=True)\ndata[\"PhoneService\"].replace(\"No\", 0, inplace=True)\n\ndata[\"MultipleLines\"].replace(\"Yes\", 1, inplace=True)\ndata[\"MultipleLines\"].replace(\"No\", 0, inplace=True)\ndata[\"MultipleLines\"].replace(\"No phone service\", 0, inplace=True)\n\ndata[\"InternetService\"].replace(\"Fiber optic\", 1, inplace=True)\ndata[\"InternetService\"].replace(\"DSL\", 2, inplace=True)\ndata[\"InternetService\"].replace(\"No\", 0, inplace=True)\n\ndata[\"OnlineSecurity\"].replace(\"Yes\", 1, inplace=True)\ndata[\"OnlineSecurity\"].replace(\"No\", 0, inplace=True)\ndata[\"OnlineSecurity\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"OnlineBackup\"].replace(\"Yes\", 1, inplace=True)\ndata[\"OnlineBackup\"].replace(\"No\", 0, inplace=True)\ndata[\"OnlineBackup\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"DeviceProtection\"].replace(\"Yes\", 1, inplace=True)\ndata[\"DeviceProtection\"].replace(\"No\", 0, inplace=True)\ndata[\"DeviceProtection\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"TechSupport\"].replace(\"Yes\", 1, inplace=True)\ndata[\"TechSupport\"].replace(\"No\", 0, inplace=True)\ndata[\"TechSupport\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"StreamingTV\"].replace(\"Yes\", 1, inplace=True)\ndata[\"StreamingTV\"].replace(\"No\", 0, inplace=True)\ndata[\"StreamingTV\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"StreamingMovies\"].replace(\"Yes\", 1, inplace=True)\ndata[\"StreamingMovies\"].replace(\"No\", 0, inplace=True)\ndata[\"StreamingMovies\"].replace(\"No internet service\", 0, inplace=True)\n\ndata[\"Contract\"].replace(\"Two year\", 24, inplace=True)\ndata[\"Contract\"].replace(\"Month-to-month\", 1, inplace=True)\ndata[\"Contract\"].replace(\"One year\", 12, inplace=True)\n\ndata[\"PaperlessBilling\"].replace(\"Yes\", 1, inplace=True)\ndata[\"PaperlessBilling\"].replace(\"No\", 0, inplace=True)\n\ndata[\"PaymentMethod\"].replace(\"Bank transfer (automatic)\", 0, inplace=True)\ndata[\"PaymentMethod\"].replace(\"Credit card (automatic)\", 1, inplace=True)\ndata[\"PaymentMethod\"].replace(\"Electronic check\", 2, inplace=True)\ndata[\"PaymentMethod\"].replace(\"Mailed check\", 3, inplace=True)\n\ndata[\"Churn\"].replace(\"Yes\", 1, inplace=True)\ndata[\"Churn\"].replace(\"No\", 0, inplace=True)","865a7c43":"data.head()","11b2ccf8":"X=data.drop(['Churn', 'TotalCharges'], axis=1)\ny=data['Churn']","942f5ae2":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nX_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42, shuffle=True)","3954e406":"scaler= StandardScaler().fit(X_train)\nX_train=scaler.transform(X_train)\nx_test=scaler.transform(x_test)","ee367390":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, plot_roc_curve, confusion_matrix, classification_report, accuracy_score\n\nmodel = LogisticRegression()\n\nmodel.fit(X_train,y_train)\nmodel.score(X_train,y_train)\npred = model.predict(x_test)\n\nprint(\"Accuracy : {:.2f}%\\n\".format( accuracy_score(y_test, pred)*100))","a1e5d527":"print(classification_report(y_test,pred))","7c39119f":"# Logistic Regression","39e9100b":"# Loading Data","4b9923ed":"# Exploratory Data Analysis","0d140b10":"# Data Preprocessing"}}