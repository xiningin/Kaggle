{"cell_type":{"4108799a":"code","673a938f":"code","e5edccea":"code","cd6b1693":"code","0b9aa631":"code","ba19ef4d":"code","384cdf63":"code","f2453e0c":"code","b666d6fa":"code","f8855546":"code","fd34fc48":"code","5671ca6c":"code","eb6d810b":"code","45861491":"code","5f29d393":"code","5396e403":"code","36b7b541":"code","d35dd70a":"code","e0fdfc95":"code","1c9f1d31":"code","aa179021":"code","49a46ab2":"code","fbec86e4":"code","474f4caf":"code","e1567a5d":"code","be3b21a5":"code","37e75990":"markdown","893111be":"markdown","a190c5a7":"markdown","0afaba50":"markdown","b13b6375":"markdown","c4381a6c":"markdown","ca1f26d5":"markdown","4a61ef4b":"markdown","4578eb0e":"markdown","62d0151d":"markdown","ca015147":"markdown","412aa455":"markdown","e32c450e":"markdown","4bd8e594":"markdown","097247d1":"markdown","028068a2":"markdown","54c129cc":"markdown","c2f0e99f":"markdown","be072fb6":"markdown","3daff3ce":"markdown","4b58a23c":"markdown","a6dc3162":"markdown","e5183715":"markdown","3b98fd78":"markdown","791a10e6":"markdown"},"source":{"4108799a":"import random\nfrom PIL import Image\nfrom datetime import datetime\nimport unicodedata\n\nimport numpy as np\nimport pandas as pd\nimport nltk\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud","673a938f":"sns.set()\n\n# A color blind safe palette that goes well with the background\nCOLOR_5S = '#0571b0'\nCOLOR_1S = '#ca0020'\nREVIEWS_PALETTE = sns.color_palette((COLOR_1S, '#d57b6f', '#c6c6c6', '#7f9abc', COLOR_5S))\n\n# Lighter background to help with review categories' colors\nsns.set_style('darkgrid', {'axes.facecolor': '#eeeeee'})\n\n# Default figure size\nresize_plot = lambda: plt.gcf().set_size_inches(12, 5)","e5edccea":"orders = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\nreviews = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\n\n# Convert columns to datetime\nreviews['review_creation_date'] = pd.to_datetime(reviews['review_creation_date'], format='%Y\/%m\/%d %H:%M:%S')\nreviews['review_answer_timestamp'] = pd.to_datetime(reviews['review_answer_timestamp'], format='%Y\/%m\/%d %H:%M:%S')\norders['order_purchase_timestamp'] = pd.to_datetime(orders['order_purchase_timestamp'], format='%Y\/%m\/%d %H:%M:%S')\norders['order_delivered_customer_date'] = pd.to_datetime(orders['order_delivered_customer_date'], format='%Y\/%m\/%d %H:%M:%S')\n\n# Merge with orders\nreviews = pd.merge(reviews, orders, on='order_id')\n\n# Remove unused columns\nto_drop = [\n    'review_id', \n    'order_id', \n    'customer_id', \n    'review_comment_title', \n    'order_approved_at', \n    'order_delivered_carrier_date', \n    'order_estimated_delivery_date'\n]\nreviews.drop(columns=to_drop, inplace=True)","cd6b1693":"reviews.head()","0b9aa631":"p_5s = len(reviews[reviews['review_score'] == 5]) * 100 \/ len(reviews)\np_1s = len(reviews[reviews['review_score'] == 1]) * 100 \/ len(reviews)\nfirst_dt = reviews['review_creation_date'].min()\nlast_dt = reviews['review_creation_date'].max()\navg_s = reviews['review_score'].mean()\nprint(len(reviews), 'reviews')\nprint('First:', first_dt)\nprint('Last:', last_dt)\nprint(f'5\u2605: {p_5s:.1f}%')\nprint(f'1\u2605: {p_1s:.1f}%')\nprint(f'Average: {avg_s:.1f}\u2605')","ba19ef4d":" sns.catplot(\n    x='review_score', \n    kind='count', \n    data=reviews, \n    palette=REVIEWS_PALETTE\n).set(\n    xlabel='Review Score', \n    ylabel='Number of Reviews',\n);","384cdf63":"reviews['review_creation_delay'] = (reviews['review_creation_date'] - reviews['order_purchase_timestamp']).dt.days\nsns.scatterplot(\n    x='order_purchase_timestamp', \n    y='review_creation_delay', \n    hue='review_score', \n    palette= REVIEWS_PALETTE, \n    data=reviews\n).set(\n    xlabel='Purchase Date', \n    ylabel='Review Creation Delay (days)',\n    xlim=(datetime(2016, 8, 1), datetime(2018, 12, 31))\n);\nresize_plot()","f2453e0c":"reviews['year_month'] = reviews['order_purchase_timestamp'].dt.to_period('M')\nreviews_timeseries = reviews[reviews['review_creation_delay'] > 0].groupby('year_month')['review_score'].agg(['count', 'mean'])\n\nax = sns.lineplot(\n    x=reviews_timeseries.index.to_timestamp(), \n    y='count', \n    data=reviews_timeseries, \n    color='#984ea3', \n    label='count'\n)\nax.set(xlabel='Purchase Month', ylabel='Number of Reviews')\n\nsns.lineplot(\n    x=reviews_timeseries.index.to_timestamp(),\n    y='mean',\n    data=reviews_timeseries, \n    ax=ax.twinx(), \n    color='#ff7f00', \n    label='mean'\n).set(ylabel='Average Review Score');\nresize_plot()","b666d6fa":"reviews.groupby('order_status')['order_status'].count()","f8855546":"ax = sns.catplot(\n    x='order_status',\n    kind='count',\n    hue='review_score',\n    data=reviews[reviews['order_status'] != 'delivered'],\n    palette=REVIEWS_PALETTE\n).set(xlabel='Order Status', ylabel='Number of Reviews');\nresize_plot()","fd34fc48":"reviews['delay'] = (reviews['review_answer_timestamp'] - reviews['review_creation_date']).dt.days\n\nbins = [-1, 0, 1, 2, 3, 4, 5, 99999]\nlabels = ['0', '1', '2', '3', '4', '5', '6+']\nreviews['delay_group'] = pd.cut(reviews['delay'], bins, labels=labels)\n\nsns.catplot(\n    x='delay_group', \n    kind='count', \n    data=reviews, \n    palette=sns.color_palette('Greens_r', n_colors=7)\n).set(xlabel='Response Delay (days)', ylabel='Number of Reviews');","5671ca6c":"sns.catplot(\n    x='delay_group', \n    kind='count', \n    hue='review_score', \n    data=reviews, \n    palette=REVIEWS_PALETTE\n).set(xlabel='Response Delay (days)', ylabel='Number of Reviews');\nresize_plot()","eb6d810b":"reviews['review_length'] = reviews['review_comment_message'].str.len()\nreviews[['review_score', 'review_length', 'review_comment_message']].head()","45861491":"def comment_rate(df):\n    return df['review_length'].count() \/ len(df)\n\ncomment_rates = reviews.groupby('review_score').apply(comment_rate)\nsns.barplot(\n    comment_rates.index, \n    comment_rates.values, \n    palette=REVIEWS_PALETTE\n).set(xlabel='Review Score', ylabel='Comment Rate');","5f29d393":"g = sns.FacetGrid(data=reviews, col='review_score', hue='review_score', palette=REVIEWS_PALETTE)\ng.map(plt.hist, 'review_length', bins=40)\ng.set_xlabels('Comment Length')\ng.set_ylabels('Number of Reviews')\nplt.gcf().set_size_inches(12, 5)","5396e403":"def remove_accents(text):\n    return unicodedata.normalize('NFKD', text).encode('ascii', errors='ignore').decode('utf-8')\n\nSTOP_WORDS = set(remove_accents(w) for w in nltk.corpus.stopwords.words('portuguese'))\nSTOP_WORDS.remove('nao') # This word is key to understand delivery problems later\n\n\ndef comments_to_words(comment):\n    lowered = comment.lower()\n    normalized = remove_accents(lowered)\n    tokens = nltk.tokenize.word_tokenize(normalized)\n    words = tuple(t for t in tokens if t not in STOP_WORDS and t.isalpha())\n    return words\n\ndef words_to_ngrams(words):\n    unigrams, bigrams, trigrams = [], [], []\n    for comment_words in words:\n        unigrams.extend(comment_words)\n        bigrams.extend(' '.join(bigram) for bigram in nltk.bigrams(comment_words))\n        trigrams.extend(' '.join(trigram) for trigram in nltk.trigrams(comment_words))\n    \n    return unigrams, bigrams, trigrams\n\ndef plot_freq(tokens, color):\n    resize_plot()\n    nltk.FreqDist(tokens).plot(25, cumulative=False, color=color)","36b7b541":"commented_reviews = reviews[reviews['review_comment_message'].notnull()].copy()\ncommented_reviews['review_comment_words'] = commented_reviews['review_comment_message'].apply(comments_to_words)\n\nreviews_5s = commented_reviews[commented_reviews['review_score'] == 5]\nreviews_1s = commented_reviews[commented_reviews['review_score'] == 1]\n\nunigrams_5s, bigrams_5s, trigrams_5s = words_to_ngrams(reviews_5s['review_comment_words'])\nunigrams_1s, bigrams_1s, trigrams_1s = words_to_ngrams(reviews_1s['review_comment_words'])","d35dd70a":"plot_freq(unigrams_5s, COLOR_5S)\nplot_freq(bigrams_5s, COLOR_5S)\nplot_freq(trigrams_5s, COLOR_5S)","e0fdfc95":"plot_freq(unigrams_1s, COLOR_1S)\nplot_freq(bigrams_1s, COLOR_1S)\nplot_freq(trigrams_1s, COLOR_1S)","1c9f1d31":"reviews_delivered_1s = commented_reviews[(commented_reviews['review_score'] == 1) & (commented_reviews['order_delivered_customer_date'] < commented_reviews['review_creation_date'])]\nunigrams_d1s, bigrams_d1s, trigrams_d1s = words_to_ngrams(reviews_delivered_1s['review_comment_words'])\n\nplot_freq(unigrams_d1s, COLOR_1S)\nplot_freq(bigrams_d1s, COLOR_1S)\nplot_freq(trigrams_d1s, COLOR_1S)","aa179021":"def search_words(df, words, n_samples=5, context_character_count=30):\n    print(f'Search for \"{words.upper()}\"')\n    words_set = set(words.split(' '))\n    \n    # Initial filter\n    df = commented_reviews[commented_reviews['review_comment_words'].map(set) & words_set]\n    \n    if not len(df):\n        print('> Number of reviews: 0\\n')\n        return\n\n    # Filter by ordered words\n    ordered_words_filter = lambda row, words: words in ' '.join(row['review_comment_words'])\n    df = df[df.apply(ordered_words_filter, axis=1, args=(words,))]\n    \n    if len(df):\n        print('> Number of reviews:', len(df))\n    else:\n        print('> Number of reviews: 0\\n')\n        return\n    \n    avg_rating = df['review_score'].mean()\n    print(f'> Average rating: {avg_rating:.1f}\u2605')\n    \n    if n_samples:\n        print('> Samples:')\n        first_word = words.split(' ')[0]\n        for _, row in df.head(n_samples).iterrows():\n            comment = row['review_comment_message'].replace('\\r', '').replace('\\n', '')\n            score = row['review_score']\n            normalized_comment = remove_accents(comment.lower())\n            first_word_index = normalized_comment.index(first_word)\n\n            i1 = first_word_index - context_character_count\n            i2 = first_word_index + len(words) + context_character_count\n            e1, e2 = '\u2026 ', ' \u2026'\n\n            if i1 < 0:\n                i1 = 0\n                e1 = ''\n\n            if i2 > len(comment):\n                i2 = len(comment)\n                e2 = ''\n\n            print(f'  {score}\u2605', e1 + comment[i1:i2] + e2)\n    print()","49a46ab2":"search_words(commented_reviews, 'nota fiscal')\nsearch_words(commented_reviews, 'lannister')\nsearch_words(commented_reviews, 'contato')\nsearch_words(commented_reviews, 'original')","fbec86e4":"GOT_HOUSES = [\n    'baratheon',\n    'lannister',\n    'stark',\n    'targaryen',\n]\n\nfor house in GOT_HOUSES:\n    search_words(commented_reviews, house)","474f4caf":"def rgb_float_to_int(rgb):\n    return tuple(int(255 * c) for c in rgb)\n\nWORDCLOUD_1S_PALETTE = [rgb_float_to_int(rgb) for rgb in sns.color_palette('Reds', n_colors=9)[2:]]\nWORDCLOUD_5S_PALETTE = [rgb_float_to_int(rgb) for rgb in sns.color_palette('Blues', n_colors=9)[2:]]\n\ndef get_1s_color(*args, **kwargs):\n    return random.choice(WORDCLOUD_1S_PALETTE)\n\ndef get_5s_color(*args, **kwargs):\n    return random.choice(WORDCLOUD_5S_PALETTE)\n\ndef plot_wordcloud(words, style):\n    if style == '1s':\n        color_function = get_1s_color\n        mask_fn = 'thumbs_down.png'\n        \n    elif style == '5s':\n        color_function = get_5s_color\n        mask_fn = 'thumbs_up.png'\n        \n    mask = np.array(Image.open(f'..\/input\/ionicons\/{mask_fn}'))[:, :, 3]\n    mask_icon = mask == 0\n    mask_bg = mask > 0\n    mask[mask_icon] = 255\n    mask[mask_bg] = 0\n        \n    wordcloud = WordCloud(background_color='white', mask=mask)\n    wordcloud.generate(' '.join(words))\n    wordcloud.recolor(color_func=color_function)\n    \n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.gcf().set_size_inches(16, 10)\n","e1567a5d":"plot_wordcloud(unigrams_5s, '5s')","be3b21a5":"plot_wordcloud(unigrams_1s, '1s')","37e75990":"But what are those comments about? We can use a bit of Natural Language Processing to discover that. The process is summarized below:\n1. Convert text to lowercase\n2. Compatibility decomposition (decomposes \u00e3 into a~)\n3. Encode to ascii ignoring errors (removes accents), reencoding again to utf8\n4. Tokenization, to break a sentence into words\n5. Removal of stop words and non-alpha strings (special characters and numbers)\n6. ~~Lemmatization (transform into base or dictionary form of a word)~~*\n7. N-grams creation (group lemmas next to each other, by comment)\n8. Grouping n-grams of all comments together\n\n\\* Lemmatization is not available for Portuguese words with the NLTK package. I tried stemming, but it only made the result look uglier, without further grouping the words. Another approach would be to translate the text to English first, but I'll leave this alternative for a later time.\n\nI've made some functions to make this easier:","893111be":"Now that we have a basic NLP stack, we can use it to analyze 1 star and 5 stars reviews:","a190c5a7":"If we plot the review score distribution of orders that do not have a *'delivered'* status, we can see that most of them have a 1 star rating.","0afaba50":"I hope you enjoyed reading this Kernel! If you have any suggestions, please let me know :)","b13b6375":"As a bonus, we can also use this function to see what customers are saying about Olist's partners in Westeros:\n\n\\* Please note that some customers may not mention the seller's name at all. This cell is purely for fun :)","c4381a6c":"# Analysis of Olist's Customer Reviews \nIn this kernel, we are going to analyze Olist's E-Commerce dataset aiming to extract value from customer reviews. These satisfaction surveys are created and sent to the customer by e-mail when he\/she receives the product, or when the estimated delivery date is due. Each experience is given a 1-5 rating, and the customer may write down some comments.\n\n## 1. Preparation\nThese are the packages we'll be using for this analysis:","ca1f26d5":"It looks like unhappy customers are more likely to write comments. Below we can see that they write longer comments:","4a61ef4b":"Here we group reviews by month using the  **order_purchase_timestamp** column and plot a timeseries. We will only consider reviews created after the purchase date here - otherwise we could get some weird patterns on our graph.","4578eb0e":"## 4. Wrapping up\nThe analysis of customer reviews can bring valuable insights regarding ways of improving their experience, even with just basic NLP. We've seen that Olist's customers love the fast shipping their partners provide, but there's still room for improvement. Another action that may help is to identify sellers that sell poor quality\/fake items, sellers that delay too much or do not emit invoices, or sellers that provide poor customer service. \n\nFinally, here are word clouds representing 5 and 1 star reviews:","62d0151d":"## 2. Initial Exploration\nWe have two datasets merged together, as seen below. Notice how comments are left blank on some reviews.","ca015147":"Here we can see the review score distribution. It is interesting to observe that there's more 1 star reviews than 2\/3 stars reviews.","412aa455":"In order to easily spot 1 and 5 stars reviews through this analysis, I've picked red\/blue diverging colors. This palette should be color blind safe.","e32c450e":"Next we investigate reviews by checking their order status:","4bd8e594":"We can further investigate some of these topics by analyzing the reviews that mention them. I've made a function below that shows some samples along their mean score. ","097247d1":"Lastly, we load the **orders** and **reviews** datasets from Olist, merging them together so we have more information to do our analysis.","028068a2":"But how late do customers respond to Olist's satisfaction survey? We can check the difference between the **review_answer_timestamp** and **review_creation_date** columns.","54c129cc":"Now we can use this function to dig deeper. Assuming that you do not speak Portuguese, these are the conclusions I've made about them:\n- Some people didn't receive their invoices\n- Customers have mixed reviews about the Lannister's shop\n- People rate seller's customer service badly, which seems to be unresponsive in some cases\n- Some customers received fake items","c2f0e99f":"Since most 1 star reviews complain about the order not being delivered, we can select reviews that were created after the product was delivered. However, even when we do this, there are still some comments regarding delivery. We can observe n-grams similar to those above, with these new topics:\n- They received the wrong goods ('recebi produto errado', 'produto veio errado', 'produto totalmente diferente')\n- Fake goods ('produto nao original')","be072fb6":"We can define *comment rate* as the number of non-NaN comments by the number of reviews.","3daff3ce":"## 3. Exploring Review Comments\nAlthough we explored review ratings, we still know little about what customers like and dislike the most about Olist's experience.\n\nWe'll start by calculating the length of **review_comment_message**:","4b58a23c":"We expect that reviews are created after the corresponding purchases, but our dataset has some negative values for the *review creation delay* (reviews sent to customers before the purchase happening?). Fortunately, most of them were sent to customers a few days later, as expected.","a6dc3162":"Below are the frequency distributions for 5 star n-grams. We can identify some key topics Olist's customers enjoy about their experience:\n- Fast delivery ('chegou antes prazo', 'entrega rapida', 'entregue antes prazo', 'super rapida')\n- High quality goods ('produto otima qualidade', 'otimo produto', 'produto excelente', 'produto boa qualidade')\n- Good packaging ('bem embalado', 'produto chegou bem')","e5183715":"We can see that while most customers wait a day before responding, unhappy customers (1 star reviews) are more likely to answer it in the same day. ","3b98fd78":"There's 100K reviews on our dataframe, with an average of 4.1 stars.","791a10e6":"Below are the frequency distributions for 1 star n-grams. We can identify some key topics Olist's customers dislike about their experience:\n- They didn't receive their goods yet ('recebi produto', 'ainda nao recebi', 'produto nao entregue', 'produto nao chegou', 'nao recebi mercadoria')\n- They had some problem related with their invoices ('nota fiscal') \\* \n- They want refund ('quero dinheiro volta')\n- Bad quality goods ('produto pessima qualidade', 'produto veio defeito')\n- They had some problem when purchasing 2 products ('comprei dois produtos')\n- Bad experience with the Lannister's shop ('lannister') \\*\n- Bad experience with customer service, probably ('contato') \\*\n\n\\* It isn't clear yet how these topics are related to the 1 star ratings, so further analysis is done later"}}