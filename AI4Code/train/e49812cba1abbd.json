{"cell_type":{"0f2cbcbb":"code","609a21c2":"code","15038f50":"code","11cb5724":"code","e88db964":"code","0ba06177":"code","5fa94b3c":"code","79a8da1f":"code","dcf3417f":"code","16a0e36a":"code","2c681331":"code","a4dae424":"code","8207a34c":"code","c4013af6":"code","774d4472":"code","f1e3cc50":"code","2f4bd033":"code","e083cc1d":"code","409d2c95":"code","9a571739":"code","4b044ddb":"code","c6bbf6b5":"code","00848105":"code","879fc008":"code","abb1c766":"code","0651383c":"code","9965fd25":"code","620af81b":"code","70b4658b":"code","bbb61ea0":"code","f20e03be":"code","dab636d7":"code","4830ce70":"code","90daf44f":"code","b9d91f03":"code","e5455c44":"code","0cd4084c":"code","4cdc168e":"code","5176c73a":"markdown","3aeea4f5":"markdown","58e5bb0b":"markdown","10ccee31":"markdown","603d20a3":"markdown","52886572":"markdown","ff452ba8":"markdown","7e683ceb":"markdown","e56c1889":"markdown","f1a7ae4d":"markdown","a2b752ed":"markdown"},"source":{"0f2cbcbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","609a21c2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport os, gc, re, warnings\nimport matplotlib.pyplot as plt\n\nimport matplotlib.patches as patches\nfrom matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as mpatches\n\nplt.style.use('fivethirtyeight')","15038f50":"df1 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\ndf1","11cb5724":"df1.info()","e88db964":"df1.describe()","0ba06177":"fig = plt.figure(figsize=(12,6))\nsns.countplot(x=df1['season'], hue=df1['week'])\nplt.title('Game count per Season');","5fa94b3c":"fig = plt.figure(figsize=(12,6))\nhome = df1['homeTeamAbbr'].value_counts()\nsns.barplot(x=home.index, y=home.values, ci=None)\nplt.xlabel(\"Host Team\")\nplt.ylabel(\"Total\")\nplt.xticks(rotation=90);","79a8da1f":"fig = plt.figure(figsize=(12,6))\nvisitor = df1['visitorTeamAbbr'].value_counts()\nsns.barplot(x=visitor.index, y=visitor.values, ci=None)\nplt.xlabel(\"Visitor Team\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=90);","dcf3417f":"df2=pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\ndf2","16a0e36a":"df2.info()","2c681331":"df2.isnull().sum()","a4dae424":"df2[\"birthYear\"] = 0\ndf2[\"birthMonth\"] = 0\ndf2.dropna(subset=[\"birthDate\"], inplace=True)\nfor idx, row in df2.iterrows():\n    if len(row['birthDate'].split('\/')) == 3:  \n        df2.loc[idx, 'birthYear'] = row['birthDate'].split('\/')[2]\n        df2.loc[idx, 'birthMonth'] = row['birthDate'].split('\/')[0]\n        \n    elif len(row['birthDate'].split('-')) == 3:\n        df2.loc[idx, 'birthYear'] = row['birthDate'].split('-')[0]\n        df2.loc[idx, 'birthMonth'] = row['birthDate'].split('-')[1]","8207a34c":"df2.info()","c4013af6":"pl_height = df2[\"height\"] \npl_height = pl_height.apply(lambda x: x.split(\"-\")) \ndf2[\"height\"] =pl_height.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\ndf2[\"weight\"] = round(df2.weight * 0.453592, 2)\n\ndf2","774d4472":"import matplotlib.cm as cm\nfrom matplotlib.colors import rgb2hex\ncmap = cm.get_cmap('GnBu',12) \ncol_def =[]\nfor i in range(cmap.N):\n    rgb = cmap(i)[:3]\n    col_def.append(rgb2hex(rgb))\n    print(rgb2hex(rgb))","f1e3cc50":"positon_pl = df2['Position'].value_counts()\nsns.set_style('darkgrid')\nfig, axes = plt.subplots(1,2,figsize=(12,6))\naxes[0] = sns.barplot(x=positon_pl[:10].values, y=positon_pl[:10].index, edgecolor=\"purple\",palette=col_def, ax=axes[0])\naxes[0].set_title(\"Upper Ten Postions played by player (By Count)\", fontsize=18)\naxes[1].pie(x= positon_pl[:10], labels = positon_pl[:10].index, colors=col_def, autopct='%.0f%%',\n           explode=[0.03 for i in positon_pl[:10].index])\naxes[1].add_artist(plt.Circle((0,0),0.5,fc='red'))\nplt.show()","2f4bd033":"plt.figure(figsize=(10, 6), dpi=100)\nsns.regplot(x=df2.weight, y=df2.height, line_kws={\"color\": \"black\"})\nplt.title(\"Weight(Kg) vs Height(cm)\");","e083cc1d":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nax1 = fig.add_subplot(223)\nsns.histplot(df2.weight, ax=ax1)\nax1.set_title(\"Weight Distribution\")\n\nax2 = fig.add_subplot(224)\nsns.histplot(df2.height, ax=ax2, bins=10)\nax2.set_title(\"Height Distribution\");","409d2c95":"fig = plt.figure(figsize=(20, 15), dpi=80)\n\nbirthyear = df2['birthYear'].value_counts()\nax1 = fig.add_subplot(223)\nsns.barplot(x=birthyear.index, y=birthyear.values, ci=None, ax=ax1)\nax1.tick_params(axis='x', rotation=45)\nax1.set_title(\"Birthyear Distribution\",size=20)\nplt.xlabel(\"Year\", size=15)\n\nbirthmonth = df2['birthMonth'].value_counts()\nax2 = fig.add_subplot(224)\nsns.barplot(x=birthmonth.index, y=birthmonth.values, ci=None, ax=ax2)\nax2.set_title(\"Birthmonth Distribution\",size=20)\nplt.xlabel(\"Month\",size=15);","9a571739":"df3 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\ndf3['scoreDiff'] = abs(df3.preSnapHomeScore-df3.preSnapVisitorScore)\ndf3.head()","4b044ddb":"fig, ((ax1,ax2),(ax3,ax4),(ax5,ax6),(ax7,ax8), (ax9,ax10)) = plt.subplots(5,2, figsize=(15,20))\ndf3.kickLength.plot.hist(bins=50, title='Kick length', grid=True, ax=ax1)\ndf3.loc[df3.kickReturnYardage.notnull()]['kickReturnYardage'].plot.hist(bins=50, title='Return result (yds)', grid=True, ax=ax2)\ndf3.playResult.plot.hist(bins=50, title='Play result (yds)', grid=True, ax=ax3)\ndf3.yardsToGo.plot.hist(bins=20, title='Yards to go at play start', grid=True, ax=ax4)\ndf3.penaltyYards.plot.hist(title='Penalty yards', grid=True, ax=ax5)\ndf3.penaltyCodes.value_counts()[:10].plot.bar(title='Penalty codes (top 10)', ax=ax6)\ndf3.specialTeamsPlayType.value_counts().plot.bar(title='Play type', ax=ax7)\ndf3.specialTeamsResult.value_counts().plot.bar(title='Play result breakdown', ax=ax8)\ndf3.loc[df3.passResult.notnull()]['passResult'].value_counts().plot.bar(title='Pass result breakdown', ax=ax9)\ndf3.yardlineNumber.plot.hist(bins=20, title='Where plays happen (yardline #)', grid=True, ax=ax10)\n\n","c6bbf6b5":"df4 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\ndf4.head()","00848105":"fig, ((ax1,ax2,ax3), (ax4,ax5,ax6)) = plt.subplots(2,3, figsize=(15,8))  \ndf4.hangTime.plot.hist(bins=20, grid=True, title='Hangtime (seconds)', ax=ax1)\ndf4.loc[df4.kickType.notnull()]['kickType'].value_counts().plot.bar(title='Kick type', ax=ax2)\ndf4.loc[df4.kickDirectionActual.notnull()]['kickDirectionActual'].value_counts().plot.bar(title='Kick direction', ax=ax3)\ndf4.loc[df4.snapTime.notnull()]['snapTime'].plot.hist(bins=20, grid=True, title='Snap time', ax=ax4)\ndf4.loc[df4.kickContactType.notnull()]['kickContactType'].value_counts().plot.bar(title='Kick contact type', ax=ax5)\ndf4.loc[df4.returnDirectionActual.notnull()]['returnDirectionActual'].value_counts().plot.bar(title='Return direction', ax=ax6)","879fc008":"df5 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')\ndf6 =  pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\ndf7 =  pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\ndf5.head()\ndf6.head()\ndf7.head()","abb1c766":"print('Tracking events:')\ndf5.event.unique()","0651383c":"print('Tracking events:')\ndf6.event.unique()","9965fd25":"print('Tracking events:')\ndf7.event.unique()","620af81b":"df5['ts'] = pd.to_datetime(df5['time']).values.astype(np.int64) \/\/ 10 ** 9\ndf5 = df5.drop(columns=['time'])\ndf5.head()","70b4658b":"df6['ts'] = pd.to_datetime(df6['time']).values.astype(np.int64) \/\/ 10 ** 9\ndf6 = df6.drop(columns=['time'])\ndf6.head()","bbb61ea0":"df7['ts'] = pd.to_datetime(df7['time']).values.astype(np.int64) \/\/ 10 ** 9\ndf7 = df7.drop(columns=['time'])\ndf7.head()","f20e03be":"df5.groupby(['playId','nflId']).agg({'x': lambda x: x.iat[-1] - x.iat[0], \n                                       'y': lambda x: x.iat[-1] - x.iat[0], \n                                       's': 'mean',                         \n                                       'dis': 'sum',                       \n                                       'o': 'mean',                         \n                                       'dir': 'mean',                       \n                                       'frameId': 'last',                  \n                                       'ts': lambda x: x.max() - x.min(), \n                                       'position': 'first', \n                                       'team': 'first',\n                                       'playDirection': 'first',\n                                       'event': 'first'})","dab636d7":"df6.groupby(['playId','nflId']).agg({'x': lambda x: x.iat[-1] - x.iat[0], \n                                       'y': lambda x: x.iat[-1] - x.iat[0], \n                                       's': 'mean',                         \n                                       'dis': 'sum',                       \n                                       'o': 'mean',                         \n                                       'dir': 'mean',                       \n                                       'frameId': 'last',                  \n                                       'ts': lambda x: x.max() - x.min(), \n                                       'position': 'first', \n                                       'team': 'first',\n                                       'playDirection': 'first',\n                                       'event': 'first'})","4830ce70":"df7.groupby(['playId','nflId']).agg({'x': lambda x: x.iat[-1] - x.iat[0], \n                                       'y': lambda x: x.iat[-1] - x.iat[0], \n                                       's': 'mean',                         \n                                       'dis': 'sum',                       \n                                       'o': 'mean',                         \n                                       'dir': 'mean',                       \n                                       'frameId': 'last',                  \n                                       'ts': lambda x: x.max() - x.min(), \n                                       'position': 'first', \n                                       'team': 'first',\n                                       'playDirection': 'first',\n                                       'event': 'first'})","90daf44f":"ball_df = pd.merge(df5.loc[df5.team=='football'], df3, how='left', on=['gameId','playId'])\n\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(15,10))  \nball_df.loc[ball_df.specialTeamsPlayType=='Kickoff'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on kickoff plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax1)\nball_df.loc[ball_df.specialTeamsPlayType=='Punt'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on punt plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax2)\nball_df.loc[ball_df.specialTeamsPlayType=='Field Goal'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on field goal plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax3)\nball_df.loc[ball_df.specialTeamsPlayType=='Extra Point'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on extra point plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax4)\nplt.tight_layout()","b9d91f03":"ball_df = pd.merge(df6.loc[df6.team=='football'], df3, how='left', on=['gameId','playId'])\n\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(15,10))  \nball_df.loc[ball_df.specialTeamsPlayType=='Kickoff'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on kickoff plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax1)\nball_df.loc[ball_df.specialTeamsPlayType=='Punt'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on punt plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax2)\nball_df.loc[ball_df.specialTeamsPlayType=='Field Goal'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on field goal plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax3)\nball_df.loc[ball_df.specialTeamsPlayType=='Extra Point'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on extra point plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax4)\nplt.tight_layout()","e5455c44":"ball_df = pd.merge(df7.loc[df7.team=='football'], df3, how='left', on=['gameId','playId'])\n\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(15,10))  \nball_df.loc[ball_df.specialTeamsPlayType=='Kickoff'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on kickoff plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax1)\nball_df.loc[ball_df.specialTeamsPlayType=='Punt'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on punt plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax2)\nball_df.loc[ball_df.specialTeamsPlayType=='Field Goal'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on field goal plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax3)\nball_df.loc[ball_df.specialTeamsPlayType=='Extra Point'].\\\n    groupby('frameId')['s'].mean()[:100]\\\n    .plot.line(figsize=(10,6),\n               title='Avg. ball speed on extra point plays (first 100 frames)', \n               ylabel='speed',\n               ax=ax4)\nplt.tight_layout()","0cd4084c":"all_fakes = {'2018':'','2019':'','2020':''}\nfor year in all_fakes:\n    print(f'Loading {year} data....')\n    df = pd.read_csv(f'..\/input\/nfl-big-data-bowl-2022\/tracking{year}.csv')\n    print(f'Filtering fake play data....')\n    fake_play_list = df.loc[df.event.str.contains('fake')]['playId'].unique().tolist()\n    all_fakes[year] = df.loc[df.playId.isin(fake_play_list)]\n    print(f'Freeing memory....')\n    del df\n    gc.collect()\n    print('Completed.')\n    \nfake_df = all_fakes['2018'].append(all_fakes['2019']).append(all_fakes['2020'])\n\nprint(f'\\nShape of fake dataframe: {fake_df.shape}\\n')\nfake_df.head()","4cdc168e":"plt.rcParams['figure.figsize'] = [20, 16]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n   \n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    \n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=20, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=20, c=\"w\", weight=\"bold\", rotation=180)\n   \n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=3)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=3)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=3)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=3)\n   \n\n    # draw home end zone\n    plt.text(2.5, (height - 10) \/ 2, \"HOME\", size=40, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(112.5, (height - 10) \/ 2, \"AWAY\", size=40, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax\n\nfig, ax = drawPitch(100, 53.3)","5176c73a":"# SCOUTING DATASET","3aeea4f5":"#                                WORKING WITH GAME","58e5bb0b":"Finding Fake Player","10ccee31":"# TRACKING DATASET OF 3 YEARS","603d20a3":"# WORKING WITH PLAYERS","52886572":"Conclusion -\nFinally it has completed and I also took help from different source . It was a great project!","ff452ba8":"# WORKING WITH PLAYS DATAFRAME","7e683ceb":"Drawing the Plot for player position","e56c1889":"This graph shows the data of host team.","f1a7ae4d":"This graph shows the number of game per season.","a2b752ed":"Important Library is called for operation."}}