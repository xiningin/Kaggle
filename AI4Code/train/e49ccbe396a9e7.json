{"cell_type":{"fa2c2cf3":"code","ce88e144":"code","7b5d93f8":"code","7f661cfd":"code","f8ea5dd6":"code","47b87512":"code","a4d51c19":"code","299fa143":"code","03772ded":"code","bcd5494a":"code","3ea8caa9":"code","677c6a26":"code","d16fbf84":"code","68aa1f30":"code","6f756be7":"code","71e94d99":"code","ddd6a4c4":"code","f8cfe42a":"code","8b9e54be":"code","8d32dc8b":"code","ba40dc57":"code","04291116":"code","c71b7bcb":"markdown","ff39504d":"markdown","a1c02967":"markdown","c0fa365c":"markdown","a6cacd3d":"markdown","d8e51d37":"markdown","efacce58":"markdown","c435a3a8":"markdown","4ee76c6e":"markdown","673410c0":"markdown","5c493449":"markdown","d503340d":"markdown","b369f730":"markdown","c4c423f7":"markdown","0d51f69f":"markdown","03f6dcd3":"markdown","bd2cc7a8":"markdown"},"source":{"fa2c2cf3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport pickle\nimport pandas_profiling\nimport tensorflow as ts","ce88e144":"df = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv',header=[0])","7b5d93f8":"profile = df.profile_report(title='Report - Churn Modeling')\nprofile","7f661cfd":"# Tabela cruzada\ntb = df.pivot_table(['Age','EstimatedSalary','CreditScore','Balance','Tenure','NumOfProducts'],\n               index=['Geography','Gender','Exited','IsActiveMember'],\n               aggfunc='mean',\n               margins=True).reset_index().round(0)\ntb","f8ea5dd6":"# Boxplots com foco no target\ndf.boxplot(column='Age', by='Exited')\ndf.boxplot(column='Balance', by='Exited')\ndf.boxplot(column='CreditScore', by='Exited')\ndf.boxplot(column='EstimatedSalary', by='Exited')\ndf.boxplot(column='NumOfProducts', by='Exited')\ndf.boxplot(column='Tenure', by='Exited')","47b87512":"df_model = df.filter(['CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard',\n                      'IsActiveMember','EstimatedSalary','Exited'])","a4d51c19":"df_model['Age_bin'] = pd.qcut(df_model['Age'], 4, labels=False)\ndf_model['EstimatedSalary_bin'] = pd.qcut(df_model['EstimatedSalary'], 4, labels=False)\ndf_model['CreditScore_bin'] = pd.qcut(df_model['CreditScore'], 4, labels=False)\ndf_model['Tenure_bin'] = pd.qcut(df_model['Tenure'], 4, labels=False)\ndf_model.head()","299fa143":"df_model['Age_bin']= df_model['Age_bin'].astype(str)\ndf_model['EstimatedSalary_bin']= df_model['EstimatedSalary_bin'].astype(str)\ndf_model['CreditScore_bin']= df_model['CreditScore_bin'].astype(str) \ndf_model['Tenure_bin']= df_model['Tenure_bin'].astype(str)","03772ded":"df_model1 = pd.get_dummies(df_model)\ndf_model1.head(2)","bcd5494a":"#df_model1.columns\ndf_model2 =df_model1.filter(['NumOfProducts','HasCrCard','IsActiveMember','Exited','Geography_France',\n       'Geography_Germany', 'Geography_Spain', 'Gender_Female', 'Gender_Male',\n       'Age_bin_0', 'Age_bin_1', 'Age_bin_2', 'Age_bin_3',\n       'EstimatedSalary_bin_0', 'EstimatedSalary_bin_1',\n       'EstimatedSalary_bin_2', 'EstimatedSalary_bin_3', 'CreditScore_bin_0',\n       'CreditScore_bin_1', 'CreditScore_bin_2', 'CreditScore_bin_3',\n       'Tenure_bin_0', 'Tenure_bin_1', 'Tenure_bin_2', 'Tenure_bin_3'])\ndf_model2.head()","3ea8caa9":"sns.set(rc={'figure.figsize':(7,4)})\nsns.heatmap(df_model2.corr())\nplt.title('Mapa de correla\u00e7\u00f5es')\nplt.show()","677c6a26":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV, train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier","d16fbf84":"xtr, xval, ytr, yval = train_test_split(df_model2.drop('Exited',axis=1),\n                                                    df_model2['Exited'],\n                                                    test_size=0.3,\n                                                    random_state=67)","68aa1f30":"sel = SelectKBest(f_classif, k=10).fit(xtr,ytr)\nselecao = list(xtr.columns[sel.get_support()])\nprint(selecao)","6f756be7":"xtr = xtr.filter(selecao)\nxval = xval.filter(selecao)","71e94d99":"models = [] \nmodels.append(('ADA', AdaBoostClassifier())) \nmodels.append(('GB', GradientBoostingClassifier())) \nmodels.append(('RF', RandomForestClassifier())) \nmodels.append(('CART', DecisionTreeClassifier())) \nmodels.append(('RGL', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('NB', MultinomialNB()))\n\n# Avalia os algoritmos\nresults = [] \nnames = [] \n\nfor name, model in models: \n    cv_results = cross_val_score(model, xtr, ytr, cv=10, scoring=\"accuracy\") \n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std()) \n    print(msg)\n\n# Compara os algoritmos\nsns.set(rc={'figure.figsize':(5, 5)})\nfig = plt.figure() \nfig.suptitle('Compara\u00e7\u00e3o de modelos') \nax = fig.add_subplot(111) \nplt.boxplot(results) \nax.set_xticklabels(names) \nplt.show()","ddd6a4c4":"# Grid search: Metricas\nscoring = 'accuracy'\nkfold = KFold(n_splits=10, random_state=8)\nmodel = GradientBoostingClassifier(random_state = 8)\n\n# Grid search: par\u00e2metros\nparam_grid = {\n    'n_estimators': [20,50,100,150],\n    'learning_rate': [0.04, 0.03, 0.01],\n    'max_depth': [3,4,5],\n    #'min_samples_split': [0.0050, 0.0040, 0.0035, 0.0010],\n    #'subsample':[0.6,0.7,0.8,0.9],\n    #'max_features': ['sqrt', 'log2']\n}\n\n# Execu\u00e7\u00e3o do grid search\nCV_model = GridSearchCV(estimator=model, param_grid=param_grid,cv=kfold,scoring=scoring)\nCV_model_result = CV_model.fit(xtr, ytr)\n\n# Print resultados\nprint(\"Best: %f using %s\" % (CV_model_result.best_score_, CV_model_result.best_params_))","f8cfe42a":"baseline = GradientBoostingClassifier(**CV_model_result.best_params_)\nbaseline.fit(xtr,ytr)","8b9e54be":"p = baseline.predict(xval)","8d32dc8b":"cmx = confusion_matrix(yval, p)\nprint(cmx)","ba40dc57":"print(classification_report(yval, p))","04291116":"sns.set(rc={'figure.figsize':(8, 8)})\nfeatures = xtr.columns\nimportances = baseline.feature_importances_\nindices = np.argsort(importances)\n\nplt.title('Importancia das vari\u00e1veis')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Importancia relativa')\nplt.show()","c71b7bcb":"Matriz de confus\u00e3o","ff39504d":"Bibliotecas para an\u00e1lise de dados","a1c02967":"Avalia\u00e7\u00e3o do target por tabelas cruzadas e boxplots","c0fa365c":"Calcular a previs\u00e3o nos dados de teste","a6cacd3d":"Metricas da matriz de confus\u00e3o","d8e51d37":"Filtrar os dados para modelagem","efacce58":"Grid search - Gradient Boosting Regressor: O modelo GBM ajustou melhor aos dados e com isso iremos buscar os melhores par\u00e2metros para diminuir o erro da previs\u00e3o do nosso modelo","c435a3a8":"Sele\u00e7\u00e3o de vari\u00e1veis","4ee76c6e":"Bibliotecas de modelagem estat\u00edstica","673410c0":"Entrada de dados","5c493449":"An\u00e1lise Explor\u00e1toria de dados e Verifica\u00e7\u00f5es dos dados","d503340d":"Divis\u00e3o da amostra","b369f730":"Sele\u00e7\u00e3o de modelos - Melhor modelo que se ajusta os dados","c4c423f7":"Cria o modelo base com par\u00e2metros o grid search","0d51f69f":"Discretiza\u00e7\u00e3o de vari\u00e1veis n\u00famericas","03f6dcd3":"Engenharia de recursos","bd2cc7a8":"Import\u00e2ncia das vari\u00e1veis do modelo GBM otimizado"}}