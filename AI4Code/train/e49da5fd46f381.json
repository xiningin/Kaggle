{"cell_type":{"099fc3d3":"code","c2777c4b":"code","254ccdff":"code","8114ee3b":"code","85f31033":"code","8278ce7a":"code","c0fc1a1c":"code","9278f3e0":"code","c54c6da9":"code","a6a0571d":"code","08785b72":"code","ea31e1f8":"code","ce98b5c5":"code","e7a56bca":"code","999d3800":"code","6fba3f72":"code","a760fa79":"code","3669f269":"code","dd5ae6de":"code","5b223802":"code","ac7c2908":"code","c5a285e0":"code","83b49836":"code","ae0a8ad7":"code","613eb34f":"code","39c68c64":"code","624869f1":"code","cb341459":"code","6539919d":"code","714171da":"markdown","605b15aa":"markdown","a873544b":"markdown"},"source":{"099fc3d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2777c4b":"os.chdir(\"..\/input\")\nos.listdir()","254ccdff":"df=pd.read_csv(\"..\/input\/splicejunction-gene-sequences-dataset\/dna.csv\")","8114ee3b":"from warnings import filterwarnings\nfilterwarnings('ignore')","85f31033":"df.head()","8278ce7a":"# Coloumns names\ndf.columns","c0fc1a1c":"df.shape","9278f3e0":"df.isnull().sum().sort_values(ascending=False)","c54c6da9":"df.info()","a6a0571d":"y = df[\"class\"]\nX = df.drop(['class'], axis=1)\n\nX.head()\n\nnsp_classes = y.unique()\nnsp_classes\n\nfrom keras import utils as np_utils\nfrom sklearn.preprocessing import LabelEncoder\n# Encode class values as integers and perform one-hot-encoding\nencoder = LabelEncoder()\nencoder.fit(y)\ny = encoder.transform(y)\ny = np_utils.to_categorical(y)\nprint(y)\n\ny.shape","08785b72":"from sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\n\n\n\n# Train-Test \nfrom sklearn.model_selection import train_test_split\n# shuffle and split training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n                                                    random_state=0)\n","ea31e1f8":"def create_model(optimizer=\"adam\"):\n    # create model\n    model = Sequential()\n    model.add(Dense(7, input_dim=180, activation='relu')) \n    model.add(Dropout(0.3)) # Added droupout to prevent overfitting\n    model.add(Dense(41, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(5, activation='sigmoid'))\n    model.add(Dropout(0.3))\n    model.add(Dense(3, activation='softmax')) # # 3 because it is output, the output should be layer 3\n    # Because it is multi-class, activation function 'softmax' should be selected.\n    # Because it is multi class, the loss function is \"categorical_crossentropy\"\n    # Compile model\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer,metrics=[\"accuracy\"])\n    return model\nmodel = create_model() \n","ce98b5c5":"train=model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1,validation_data=(X_test,y_test))","e7a56bca":"# plot loss during training\nimport matplotlib.pyplot as plt\nplt.plot(train.history['loss'], label='train')\nplt.plot(train.history['val_loss'], label='test')\nplt.title('Model Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss values')\nplt.legend(loc='upper right')\nplt.show()","999d3800":"# Untunned Scores of the Model\nimport sklearn.metrics as metrics\ny_pred=model.predict_classes(X_test)\n","6fba3f72":"# %%Accuracy\n\nprint(\"Accuracy:\",metrics.accuracy_score(np.argmax(y_test, axis=1),y_pred))\n\n# %%f1 score\n\nprint(\"f1_weighted:\",metrics.f1_score(np.argmax(y_test, axis=1), y_pred,average='weighted'))\n","a760fa79":"# Grid Search Cross Validation\n# GridSearch Cross Validation Parameters\nparam_grid = {\n   \n    'epochs': [100,150,200], \n    'batch_size':[50,100],\n    'optimizer':['RMSprop', 'Adam','SGD'],\n    \n}\n\n# create model\n\n# Creating Model Object with KerasClassifier\nmodel_cv = KerasClassifier(build_fn=create_model, verbose=1)\n\n\ngrid = GridSearchCV(estimator=model_cv,  \n                    n_jobs=-1, \n                    verbose=1,\n                    cv=5,\n                    param_grid=param_grid)\n\ngrid_cv_model = grid.fit(X_train, y_train,) # Fitting the GridSearch Object on the Train Set\n\n\nmeans = grid_cv_model.cv_results_['mean_test_score'] # Mean of test scores\nstds = grid_cv_model.cv_results_['std_test_score'] # standard deviations of test scores\nparams = grid_cv_model.cv_results_['params'] # parameters used\n# to print all scores, standard deviations and parameters used\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))\n\n# Printing the Best Parameters as a Result of Grid Search Cross Validation on the Screen\nprint(\"Best: %f using %s\" % (grid_cv_model.best_score_, grid_cv_model.best_params_))\n","3669f269":"# %% Model Tuning- Building a Tuned Model with Best Parameters\n# Creating Tuned Model Object with KerasClassifier\ncv_model = grid_cv_model.best_estimator_","dd5ae6de":"#%% K-FOLD\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n# K-fold accuracy scores\n\nkfold = KFold(n_splits=5, shuffle=True)\nresults = cross_val_score(cv_model, X_test, np.argmax(y_test, axis=1), cv=kfold,scoring= 'accuracy')\n","5b223802":"print('K-fold Cross Validation Accuracy Results: ', results)\nprint('K-fold Cross Validation Accuracy Results Mean: ', results.mean())","ac7c2908":"# K-fold f1 scores\nfrom sklearn.model_selection import KFold\n\n\nkfold = KFold(n_splits=5, shuffle=True)\nresults = cross_val_score(cv_model, X_test, np.argmax(y_test, axis=1), cv=kfold,scoring=\"f1_weighted\")\n","c5a285e0":"print('K-fold Cross Validation f1_weighted Results: ', results)\nprint('K-fold Cross Validation f1_weighted Results Mean: ', results.mean())","83b49836":"# Tuned Model Prediction\n\ny_pred = cv_model.predict(X_test) ","ae0a8ad7":"# %% f1 score\nimport sklearn.metrics as metrics\nprint(\"f1_weighted:\",metrics.f1_score(np.argmax(y_test, axis=1), y_pred,average='weighted'))\n\n\n# %% Accuracy\n\nprint(\"accuracy:\",metrics.accuracy_score(np.argmax(y_test, axis=1), y_pred))","613eb34f":"#%% Confusion Matrix and Classification Report\nfrom sklearn.metrics import confusion_matrix, classification_report \n\n# Classification Report\nmodel_report = classification_report(np.argmax(y_test, axis=1), y_pred)\nprint(model_report)","39c68c64":"# Confusion Matrix\nmodel_conf = confusion_matrix(np.argmax(y_test, axis=1), y_pred)\nprint(model_conf)","624869f1":"#%% ROC-AUC Curve\n\ny_score = cv_model.predict_proba(X_test)\n\nfrom scipy import interp\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, auc\n# Learn to predict each class against the other\n\n\nn_classes = 3 # number of class\n\n\n\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(n_classes):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n\n# Compute micro-average ROC curve and ROC area\nfpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_score.ravel())\nroc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])","cb341459":"# The process of drawing a roc-auc curve belonging to a specific class\n\nplt.figure()\nlw = 2 # line_width\nplt.plot(fpr[2], tpr[2], color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[2]) # Drawing Curve according to 2. class \nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC E\u011frisi')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n","6539919d":"# Process of plotting roc-auc curve belonging to all classes.\n\nfrom itertools import cycle\n\n# First aggregate all false positive rates\nall_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n\n# Then interpolate all ROC curves at this points\nmean_tpr = np.zeros_like(all_fpr)\nfor i in range(n_classes):\n    mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n\n# Finally average it and compute AUC\nmean_tpr \/= n_classes\n\nfpr[\"macro\"] = all_fpr\ntpr[\"macro\"] = mean_tpr\nroc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n\n# Plot all ROC curves\nplt.figure()\nplt.plot(fpr[\"micro\"], tpr[\"micro\"],\n         label='micro-average ROC curve (area = {0:0.2f})'\n               ''.format(roc_auc[\"micro\"]),\n         color='deeppink', linestyle=':', linewidth=4)\n\nplt.plot(fpr[\"macro\"], tpr[\"macro\"],\n         label='macro-average ROC curve (area = {0:0.2f})'\n               ''.format(roc_auc[\"macro\"]),\n         color='navy', linestyle=':', linewidth=4)\n\ncolors = cycle(['aqua', 'darkorange', 'cornflowerblue'])\nfor i, color in zip(range(n_classes), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0} (area = {1:0.2f})'\n             ''.format(i, roc_auc[i]))\n\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Extending the ROC Curve to Multi-Class')\nplt.legend(loc=\"lower right\")\nplt.show()","714171da":"# Artificial Neural Network with KERAS ","605b15aa":"# Data Read","a873544b":"# Modelling"}}