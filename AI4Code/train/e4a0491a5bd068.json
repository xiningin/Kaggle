{"cell_type":{"59bae91d":"code","c8a3cfbf":"code","d8ebdfdd":"code","290694ca":"code","e3b711af":"code","b98a50ac":"code","3dcda8c5":"code","c66dec56":"code","3a82fa51":"code","45f8ebb6":"code","4477a9b8":"code","762e2a9a":"markdown","d3030b8e":"markdown","24271a10":"markdown","f3986f29":"markdown"},"source":{"59bae91d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport tensorflow as tf\nprint(tf.__version__)\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n\n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport warnings\nwarnings.filterwarnings('ignore')","c8a3cfbf":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain.head()\n","d8ebdfdd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(10,5))\nsns.countplot(train['label'])\nplt.tight_layout(); #for better visualization","290694ca":"y_train = train['label']\nfeatures = train.drop('label', axis=1)\nx_ = np.array(features)\nx_train = x_.reshape(x_.shape[0], 28, 28)\nx_test = np.array(test)\nx_train","e3b711af":"plt.imshow(x_train[0])\n","b98a50ac":"x_train.shape, y_train.shape","3dcda8c5":"x_train = x_train.reshape(x_train.shape[0], 28, 28,1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28,1)\nx_train.shape, y_train.shape","c66dec56":"x_train = x_train \/ 255\nx_test =  x_test \/ 255\n","3a82fa51":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28,1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=20)","45f8ebb6":"prediction = np.argmax(model.predict(x_test), axis=1)\nprint(prediction)","4477a9b8":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission.head()\nsubmission['Label']  = prediction\nsubmission.to_csv('submission.csv',index=False)\nsubmission.head()","762e2a9a":"**GET THE DATA**","d3030b8e":"**MAKE A MODEL USING Tf**","24271a10":"**Normalize our Data**","f3986f29":"**VISUAL OUR DATA**"}}