{"cell_type":{"d7856dd3":"code","55a6aefe":"code","0bd86357":"code","d9e89b9c":"code","51091952":"code","f4c307f0":"code","17d27eed":"code","6a0d8fb4":"code","d396882f":"code","509ef2ab":"code","028cccd0":"code","bfb4706a":"code","3a0f8352":"code","a2f153a3":"code","1334ecfe":"code","3f07979d":"markdown","4cae106b":"markdown","ac7c81c0":"markdown","4fb66c38":"markdown","2a0a6df4":"markdown","0ecb72a9":"markdown","96f9ecf5":"markdown","14c93e4b":"markdown","620cd07e":"markdown","52684641":"markdown","b79079a8":"markdown"},"source":{"d7856dd3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\nimport plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nimport ipywidgets as widgets\nfrom IPython.display import display\n","55a6aefe":"init_notebook_mode(connected = False) # to set offline mode for interactive chart by plotly package ","0bd86357":"# load six csv file and combine them all together into a big dataframe\nfilenames = []\npri_name = \"uber-raw-data-\"\nlast_name = \"14.csv\"\nmonths = ['apr', 'may', 'jun', 'jul', 'aug', 'sep']\n\nfor month in months:\n    filename = pri_name + month + last_name\n    filenames.append(filename)\n\nprint(filenames)","d9e89b9c":"# load all the data from all csv file \nbig_df = []\n\nfor filename in filenames:\n    uberdata = pd.read_csv('..\/input\/uber-pickups-in-new-york-city\/' + filename)\n    big_df.append(uberdata)\n\nuber_data = pd.concat(big_df)\nprint(uber_data.head())","51091952":"# define function for data cleansing \ndef data_clean(data_frame):\n    data_frame['Date\/Time'] = pd.to_datetime(data_frame['Date\/Time'])\n    data_frame = data_frame.rename({'Date\/Time': 'Date'}, axis = 1)\n    \n    data_frame['year'] = data_frame.Date.dt.year\n    data_frame['month'] = data_frame.Date.dt.month\n    data_frame['day'] = data_frame.Date.dt.day\n    data_frame['weekday'] = data_frame.Date.dt.weekday\n    data_frame['hour'] = data_frame.Date.dt.hour\n    data_frame['minute'] = data_frame.Date.dt.minute\n    data_frame['second'] = data_frame.Date.dt.second\n    \n    return data_frame\n\n#### create new dataframe and check data shape\nall_data = data_clean(uber_data)\nprint(all_data.shape)","f4c307f0":"# create function to plot bar chart\ndef plot_bar(xdata, ydata, chart_type, xlabel, colnum ):\n    \n    fig = go.Figure(data = [\n        go.Bar(name = 'Count', \n               x = xdata, \n               y = ydata,\n               marker_color = 'crimson',\n              width = [0.5]*colnum)\n       \n    ])\n\n    fig.update_layout(barmode = chart_type,\n                     title = 'Trips by '+ xlabel,\n                     xaxis = dict(title = xlabel),\n                     yaxis = dict(title = 'Total Count'))\n\n    fig.show()","17d27eed":"# group all the data based on differnt day in april\nagg_month = all_data.groupby(['month'], as_index = False)['Base'].count()\n# print(agg_month)\n\nmonths = ['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n\nplot_bar(months, agg_month['Base'], 'group', 'Month', 6)","6a0d8fb4":"# data preparation for weekday\nagg_weekday = all_data.groupby(['month', 'weekday'], as_index = False)['Base'].count()\n# print(agg_weekday[:7])\n# print(len(agg_weekday))\ndef filter_weekday(dataset, num):\n    data = []\n    for index in range(0, len(dataset)):\n        if dataset['weekday'][index] == num:\n            target_data = dataset['Base'][index]\n            data.append(target_data)\n    \n    return data\n\n\nweekday_data = []\nfor i in range(0,7):\n    data = filter_weekday(agg_weekday, i)\n    weekday_data.append(data)\n\n# print(weekday_data)","d396882f":"# create chart for visualization \n\nmonths = ['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n\nfig = go.Figure(data = [\n    go.Bar(name = 'Sunday', x = months, y = weekday_data[0]),\n    go.Bar(name = 'Monday', x = months, y = weekday_data[1]),\n    go.Bar(name = 'Tuesday', x = months, y = weekday_data[2]),\n    go.Bar(name = 'Wednesday', x = months, y = weekday_data[3]),\n    go.Bar(name = 'Thursday', x = months, y = weekday_data[4]),\n    go.Bar(name = 'Friday', x = months, y = weekday_data[5]),\n    go.Bar(name = 'Saturday', x = months, y = weekday_data[6])\n    \n           \n])\n\nfig.update_layout(barmode = 'group',\n                 title = 'Trips by weekday and month',\n                 xaxis = dict(title = 'Month'),\n                 yaxis = dict(title = 'Total Count'),\n                 bargap = 0.2,\n                 bargroupgap = 0.1\n)\n\nfig.show()\n","509ef2ab":"months = ['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n\nfig = go.Figure(data = [\n    go.Bar(name = 'Sunday', x = months, y = weekday_data[0]),\n    go.Bar(name = 'Monday', x = months, y = weekday_data[1]),\n    go.Bar(name = 'Tuesday', x = months, y = weekday_data[2]),\n    go.Bar(name = 'Wednesday', x = months, y = weekday_data[3]),\n    go.Bar(name = 'Thursday', x = months, y = weekday_data[4]),\n    go.Bar(name = 'Friday', x = months, y = weekday_data[5]),\n    go.Bar(name = 'Saturday', x = months, y = weekday_data[6])\n           \n])\n\nfig.update_layout(barmode = 'stack',\n                 title = 'Trips by weekday and Month',\n                 xaxis = dict(title = 'Month'),\n                 yaxis = dict(title = 'Total Count'))\n\nfig.show()","028cccd0":"# aggregate day count of each month and make a bar chart \n\nagg_day = all_data.groupby(['day'], as_index = False)['Base'].count()\n# print(agg_day)\n\nplot_bar(agg_day['day'], agg_day['Base'], 'group', 'Day',31)\n","bfb4706a":"hour = []\nfor x in range(0,24):\n    hour.append(x)\n    \nagg_hour = all_data.groupby(['hour'], as_index = False)['Base'].count()\n\nplot_bar(hour, agg_hour['Base'], 'group', 'Hour', 24)\n","3a0f8352":"# groupby base \n\nagg_base = all_data['Base'].value_counts()\n# print(agg_base.index[0])\n# print(agg_base.values)\ntitle = agg_base.index\n\nplot_bar(title, agg_base.values, 'group', 'Base', 5)\n","a2f153a3":"# trips by base and month data\nall_data['counter'] = 1\nbasename = uber_data.Base.unique()\n\nagg_BaseMonth = all_data.groupby(['month', 'Base'], as_index = False)['counter'].count()\n# print(agg_BaseMonth)","1334ecfe":"months = ['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n\n# create list for label of base \noption = []\nfor label in uber_data.Base.unique():\n    option.append(label)\n    \n\n# dropdown list for bases\norigin = widgets.Dropdown(\n    options=option,\n    value='B02512',\n    description='Base Name:',\n)\n\n# function to build interactive bar chart \ndef update_plot(origin):\n    \n    y_data = agg_BaseMonth[agg_BaseMonth.Base == origin].counter\n    \n    fig = go.Figure(data = [\n        go.Bar(name = 'Base Count', \n               x = months, \n               y = y_data,\n              marker_color = 'crimson',\n        width = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]),       \n    ])\n\n    fig.update_layout(barmode = 'group',\n                     title = 'Trips by Base and Month',\n                     xaxis = dict(title = 'Month'),\n                     yaxis = dict(title = 'Total Count'))\n\n    fig.show()\n    \n\nwidgets.interactive(update_plot, origin = origin)\n\n","3f07979d":"## Description: \nThis exercise uses Uber dataset in New York for year 2014, from April to September. The main of this exercise are:\n\n- Data cleasing including split datetime data into seperate columns in year, month, day and so on;\n- Data wrangling \n- Data visualisation by using package Plotly, plotly.graphs_objs, ipywidgets to create interactive charts ","4cae106b":"# Data cleasing and visualisation practice by using Uber dataset","ac7c81c0":"#### 4.4 Trips by Hour","4fb66c38":"### 2. load dataset ","2a0a6df4":"### 4. Data visualisation ","0ecb72a9":"### 4.2 Trips by Weekday and Month","96f9ecf5":"#### 4.5 Trips by Base and Month","14c93e4b":"### 1. load package","620cd07e":"### 3. Data preprocessing ","52684641":"#### 4.3 Trips by Day","b79079a8":"### 4.1 Trips by Month"}}