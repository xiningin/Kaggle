{"cell_type":{"0bfd297a":"code","ef93a2a3":"code","b6856e2f":"code","cb108582":"code","31fe3fa1":"code","b91be3cc":"code","86942e9d":"code","c349514c":"code","fb834373":"code","36bebcc1":"code","36a45c03":"code","550f94bf":"code","1366736a":"code","d93d107f":"code","6b9bbb10":"code","ee7fa380":"code","993d61f3":"code","b38a64f1":"code","63a1ebdc":"code","ec4e4d06":"code","e090b0e3":"code","7b0b73ec":"code","3a2d08e8":"markdown"},"source":{"0bfd297a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ef93a2a3":"#importing the data and overview \n\ndf= pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')\ndf.drop('No',axis=1, inplace=True)","b6856e2f":"df.head()","cb108582":"df.shape","31fe3fa1":"df.info()","b91be3cc":"sns.pairplot(df,diag_kind='kde')","86942e9d":"sns.displot(data= df, x='Y house price of unit area' , bins=25 , kde=True)","c349514c":"sns.heatmap(df.corr(), annot=True, cmap='inferno')","fb834373":"#defining features and the label\n\nX = df.drop('Y house price of unit area',axis=1)\ny = df['Y house price of unit area']","36bebcc1":"#preprocessing\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\npolynomial_converter=PolynomialFeatures(degree=2, include_bias=False)\npoly_features=polynomial_converter.fit_transform(X)\npoly_features.shape","36a45c03":"X.shape","550f94bf":"#spliting the dataset to work on train and test\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","1366736a":"#Training the model\n\nfrom sklearn.linear_model import LinearRegression\n\npoly_model=LinearRegression()\npoly_model.fit(X_train, y_train)","d93d107f":"#predicting Test\n\ny_pred=poly_model.predict(X_test)\npd.DataFrame({'Y_Test': y_test,'Y_Pred':y_pred, 'Residuals':(y_test-y_pred) }).head(8)","6b9bbb10":"#Testing the model\n\nfrom sklearn import metrics\n\n\nMAE_Poly = metrics.mean_absolute_error(y_test,y_pred)\nMSE_Poly = metrics.mean_squared_error(y_test,y_pred)\nRMSE_Poly = np.sqrt(MSE_Poly)\n\npd.DataFrame([MAE_Poly, MSE_Poly, RMSE_Poly], index=['MAE', 'MSE', 'RMSE'], columns=['metrics'])","ee7fa380":"train_RMSE_list=[]\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    \n   \n    polynomial_converter= PolynomialFeatures(degree=d, include_bias=False)\n    poly_features= polynomial_converter.fit_transform(X)\n    \n\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n \n    poly_model=LinearRegression()\n    poly_model.fit(X_train, y_train)\n    \n  \n    y_train_predict=poly_model.predict(X_train)\n    y_test_predict=poly_model.predict(X_test)\n    \n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train, y_train_predict))\n    \n\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_predict))\n    \n    \n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)","993d61f3":"train_RMSE_list","b38a64f1":"test_RMSE_list","63a1ebdc":"#plotting the polynomial d and RMSE\n\nplt.plot(range(1,6), train_RMSE_list[:5], label='Train_RMSE')\nplt.plot(range(1,6), test_RMSE_list[:5], label='Test_RMSE')\n\nplt.xlabel('Degree')\nplt.ylabel('RMSE')\nplt.legend()","ec4e4d06":"#degree 2 is suitable for this model\n\n#establish model parameters\n\nFinal_polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3, random_state=101)\n\nFinal_Poly_Model=LinearRegression()\nFinal_Poly_Model.fit(X_train, y_train)","e090b0e3":"#saving the model\n\nfrom joblib import dump\n\ndump(Final_Poly_Model, 'Final_Poly_Model.joblib')","7b0b73ec":"dump(Final_polynomial_converter, 'Poly_Converter.joblib')","3a2d08e8":"**EDA**"}}