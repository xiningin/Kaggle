{"cell_type":{"ecdf7dd8":"code","fd9589e0":"code","5d8546f9":"code","9e5bad31":"code","8d0b17c0":"code","af501e6c":"code","1f627378":"code","d0db44dc":"code","2e490bcd":"code","3c77bd49":"code","027f072b":"code","c0e4e69e":"code","5ba2c36f":"code","d1f1b701":"code","3ba0553b":"code","ac497b9d":"code","7d1c3f3a":"code","b3b9166e":"code","a53efa96":"code","4240b1d5":"code","30a47a10":"code","06ff0549":"code","79317155":"code","4130413b":"code","a2e21410":"code","1cfd1ad5":"code","bd4fa7de":"code","fbc16c85":"code","6187696d":"code","18faac49":"code","6163a4b2":"code","ee2ee1cb":"code","91c9ee25":"code","dd528aa0":"code","fb16ed29":"code","0e9dd917":"code","d0883a8a":"code","723848bb":"code","781bdb99":"code","03d4de13":"code","691b1765":"code","575cb56a":"markdown","e193c81e":"markdown","b22a44ec":"markdown","c3554c1c":"markdown"},"source":{"ecdf7dd8":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n#","fd9589e0":"#==============ROSTERS========================================\nstatusCode = {'A':1, 'D60':2, 'RM':3, 'D10':4, 'D7':5, 'PL':6, 'SU':7, \n              'FME':8, 'BRV':9, 'RES':10,'DEC':11}\nstatus = {'Active':1, 'Injured 60-Day':2, 'Reassigned to Minors':3,\n       'Injured 10-Day':4, 'Injured 7-Day':5, 'Paternity List':6,\n       'Suspended # days':7, 'Family Medical Emergency':8, 'Bereavement List':9,\n       'Reserve List (Minors)':10, 'Deceased':11, '60-day IL':12, '10-day IL':13,\n       'Reassigned':14, 'Paternity':15, 'Suspended':16}\n#============== GAME =================================#\ngameType = {'E':1, 'S':2, 'R':3, 'A':4, 'F':5, 'D':6, 'L':7, 'W':8}\ncodedGameState = {'F':1, 'C':2, 'D':3, 'S':4, 'U':5, 'O':6}\ndetailedGameState = {'Final':1, 'Cancelled':2, 'Completed Early':3, 'Postponed':4, \n                     'Scheduled':5,'Suspended':6, 'Game Over':7}\nisTie = {False:1, True:2}\nseriesDescription = {'Exhibition':1, 'Spring Training':2, 'Regular Season':3, 'All-Star Game':4,\n                     'Wild Card Game':5, 'Division Series':6, 'League Championship Series':7,\n                     'World Series':8}\n#===============================PLAYER SCORES============================\npositionName = {'Catcher':1,'Designated Hitter':2,'First Base':3,'Outfielder':4,\n                'Pinch Hitter':5,'Pinch Runner':6,'Pitcher':7, 'Second Base':8,\n                'Shortstop':9,'Third Base':10}\npositionType = {'Catcher':1, 'Hitter':2, 'Infielder':3, 'Outfielder':4, 'Pitcher':5, 'Runner':6}\n#=================================GAMES========================\ndoubleHeader = {\"N\":1, \"Y\":2, \"S\":3}\ndayNight = {\"day\":1, \"night\":2}\n#=================================================","5d8546f9":"SCORES = ['home', 'flyOuts', 'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns', 'strikeOuts', \n          'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch', 'atBats', 'caughtStealing', 'stolenBases', \n          'groundIntoDoublePlay', 'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi', 'leftOnBase', \n          'sacBunts', 'sacFlies', 'catchersInterference', 'pickoffs', 'airOutsPitching', 'groundOutsPitching', \n          'runsPitching', 'doublesPitching', 'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching', \n          'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching', 'hitByPitchPitching', 'atBatsPitching', \n          'caughtStealingPitching', 'stolenBasesPitching', 'inningsPitched', 'earnedRuns', 'battersFaced', 'outsPitching', \n          'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching', 'rbiPitching', 'inheritedRunners', 'inheritedRunnersScored', \n          'catchersInterferencePitching', 'sacBuntsPitching', 'sacFliesPitching']\nren_player = {col:col+\"_p\" for col in SCORES}\nren_team = {col:col+\"_t\" for col in SCORES}","9e5bad31":"time_index = \"index\"\n#============================\nrosters_id = [time_index, 'playerId']\nrosters_cat = [\"statusCode\",\"status\"]\n#=========================\npscores_id = [\"playerId\",\"index\", 'teamId'] #, \"gamePk\"\npscores_cat = [\"jerseyNum\",\"positionCode\",\"positionName\",\"positionType\"]\npscores_num = ['home', \n               'gamesPlayedBatting', 'flyOuts', 'groundOuts', 'runsScored', 'doubles', 'triples', \n               'homeRuns', 'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch', \n               'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay', 'groundIntoTriplePlay', \n               'plateAppearances', 'totalBases', 'rbi', 'leftOnBase', 'sacBunts', 'sacFlies', \n               'catchersInterference', 'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching', \n               'completeGamesPitching', 'shutoutsPitching', 'winsPitching', 'lossesPitching', 'flyOutsPitching', \n               'airOutsPitching', 'groundOutsPitching', \n               'runsPitching', 'doublesPitching', 'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching', \n               'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching', 'hitByPitchPitching', \n               'atBatsPitching', 'caughtStealingPitching', 'stolenBasesPitching', 'inningsPitched', \n               'saveOpportunities', 'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', \n               'balls', 'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching', 'rbiPitching', \n               'gamesFinishedPitching', 'inheritedRunners', 'inheritedRunnersScored', 'catchersInterferencePitching', \n               'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves', 'assists', \n               'putOuts', 'errors', 'chances']\npscores_num = [col+'_p' if (col in SCORES) else col for col in pscores_num]\n#==============\ntscores_id = [\"teamId\", \"index\",\"gamePk\"]\ntscores_num = ['home', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n       'pickoffs', 'airOutsPitching', 'groundOutsPitching', 'runsPitching',\n       'doublesPitching', 'triplesPitching', 'homeRunsPitching',\n       'strikeOutsPitching', 'baseOnBallsPitching', 'intentionalWalksPitching',\n       'hitsPitching', 'hitByPitchPitching', 'atBatsPitching',\n       'caughtStealingPitching', 'stolenBasesPitching', 'inningsPitched',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'hitBatsmen', 'balks',\n       'wildPitches', 'pickoffsPitching', 'rbiPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching']\ntscores_num = [col+'_t' if (col in SCORES) else col for col in tscores_num]\n#===========================\ngames_cat = [\"gameType\",\"codedGameState\",\"detailedGameState\",\"isTie\",\"seriesDescription\",\n             \"doubleHeader\", \"dayNight\"]\ngames_id = ['gamePk','homeId', 'awayId']\ngames_num = ['gameNumber',  'scheduledInnings', 'gamesInSeries', 'homeWins', 'homeLosses', \n             'homeWinPct', 'homeWinner', 'homeScore', 'awayWins', 'awayLosses', 'awayWinPct', \n             'awayWinner', 'awayScore']\n# season (cat) \/ 'resumeDate', 'resumedFrom' (continuity)\n#===========================","8d0b17c0":"#============================\ndef process_rosters(df):\n    df[\"statusCode\"] = df[\"statusCode\"].map(statusCode)\n    df[\"status\"] = df[\"status\"].map(status)\n    return df\n#=================\ndef process_pscores(df):\n    # deal with battingOrder\n    df[\"positionName\"] = df[\"positionName\"].map(positionName)\n    df[\"positionType\"] = df[\"positionType\"].map(positionType)\n    df[\"jerseyNum\"] = df[\"jerseyNum\"].fillna(100)\n    df[\"positionCode\"] = df[\"positionCode\"].fillna(0)\n    return df\n#======================================\ndef process_games(df):\n    #add season\n    df[\"gameType\"] = df[\"gameType\"].map(gameType)\n    df[\"codedGameState\"] = df[\"codedGameState\"].map(codedGameState)\n    df[\"detailedGameState\"] = df[\"detailedGameState\"].map(detailedGameState)\n    df[\"isTie\"] = df[\"isTie\"].map(isTie)\n    df[\"seriesDescription\"] = df[\"seriesDescription\"].map(seriesDescription)\n    df[\"doubleHeader\"] = df[\"doubleHeader\"].map(doubleHeader)\n    df[\"dayNight\"] = df[\"dayNight\"].map(dayNight)\n    return df\n#====================================\n\n#========================","af501e6c":"import pandas as pd\nimport numpy as np\nimport gc\nimport os\nfrom tqdm import tqdm","1f627378":"DATA_ROOT = \"..\/input\/mlb-pdef-train-dataset\"","d0db44dc":"#os.listdir(DATA_ROOT)","2e490bcd":"DEBUG = True","3c77bd49":"%%time\ntgt = pd.read_csv(f\"{DATA_ROOT}\/nextDayPlayerEngagement_train.csv\")\ntgt.drop(\"engagementMetricsDate\", axis=1, inplace=True)\ntgt[\"date\"] = pd.to_datetime(tgt[\"date\"], format='%Y%m%d')\ntgt = tgt.rename(columns={\"date\":\"EvalDate\"})\n\nif DEBUG:\n    print(tgt.shape)\n    tgt = tgt.loc[tgt[time_index]>=1000].reset_index(drop=True)\n    print(tgt.shape)\n#\ngc.collect()","027f072b":"tgt.head(2)","c0e4e69e":"tgt[\"index\"].max()","5ba2c36f":"%%time\nrosters = pd.read_csv(f\"{DATA_ROOT}\/rosters_train.csv\", usecols=rosters_cat + rosters_id)\nrosters = process_rosters(rosters)","d1f1b701":"%%time\npscores = pd.read_csv(f\"{DATA_ROOT}\/playerBoxScores_train.csv\")\npscores = pscores.rename(columns=ren_player)\npscores = pscores[pscores_id+pscores_cat+pscores_num]\npscores = process_pscores(pscores)\n#================\nNO_DOUBLON = True\nif NO_DOUBLON:\n    print(pscores.shape)\n    pscores = pscores.drop_duplicates(subset=rosters_id, keep=\"last\")\n    print(pscores.shape)","3ba0553b":"tscores = pd.read_csv(f\"{DATA_ROOT}\/teamBoxScores_train.csv\")\ntscores = tscores.rename(columns=ren_team)\ntscores = tscores[tscores_id + tscores_num]","ac497b9d":"print(tscores.shape)\ntscores  = tscores.drop_duplicates(subset=[\"teamId\", \"index\"], keep=\"last\")\nprint(tscores.shape)","7d1c3f3a":"games = pd.read_csv(f\"{DATA_ROOT}\/games_train.csv\", usecols=games_id + games_cat + games_num)\ngames = process_games(games)\ngames = games.drop_duplicates(subset=\"gamePk\", keep=\"last\")","b3b9166e":"%%time\n#======\ntgt = tgt.merge(rosters, on=[\"playerId\",\"index\"], how=\"left\")\ntgt = tgt.merge(pscores, on=[\"playerId\", \"index\"],  how=\"left\")\ntgt = tgt.merge(tscores, on=[\"teamId\", \"index\"],  how=\"left\")#, suffixes=[\"_p\", \"_t\"]\ntgt = tgt.merge(games, on=\"gamePk\", how=\"left\")\nprint(tgt.shape)\n#====\ngc.collect()","a53efa96":"IDCOLS = list( set( rosters_id + pscores_id + tscores_id + games_id ) ) \nIDCOLS = IDCOLS + [\"EvalDate\"]\nCATCOLS = rosters_cat + pscores_cat  + games_cat\nTGTCOLS = [\"target1\",\"target2\",\"target3\",\"target4\"]\nNUMCOLS = pscores_num + tscores_num + games_num ","4240b1d5":"TOFLOAT = [\"awayWinPct\", \"homeWinPct\"]\nTOINT = [col for col in NUMCOLS + CATCOLS if col not in TOFLOAT]","30a47a10":"%%time\ndef reduce_df(df, train=True):\n    df[\"jerseyNum\"] = df[\"jerseyNum\"].fillna(100) #100\n    # positionCode #12\n    df[NUMCOLS + CATCOLS] = df[NUMCOLS + CATCOLS].fillna(0.)\n    df[TOINT] = df[TOINT].astype(int)\n    if train:\n        lab = df[TGTCOLS].copy()\n        df.drop(TGTCOLS, axis=1, inplace=True)\n        df = reduce_mem_usage(df)\n        df = df.join(lab)\n    else:\n        df = reduce_mem_usage(df)\n    gc.collect()\n    return df","06ff0549":"%%time\ntgt  = reduce_df(tgt, train=True)","79317155":"tgt.info()","4130413b":"from sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt","a2e21410":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping","1cfd1ad5":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    nh = 50\n    x = L.Dense(nh, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(nh, activation=\"relu\", name=\"d2\")(x)\n    #x = L.Dense(nh, activation=\"relu\", name=\"d3\")(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model","bd4fa7de":"X = tgt[NUMCOLS].values\ny = tgt[TGTCOLS].values","fbc16c85":"%%time\nsc  = StandardScaler()\nX = sc.fit_transform(X)\ngc.collect()","6187696d":"net = make_model(X.shape[1])\nprint(net.summary())","18faac49":"X.mean()","6163a4b2":"net.fit(X, y, batch_size=30_000, epochs=10)\ngc.collect()","ee2ee1cb":"null = np.nan\ntrue = True\nfalse = False","91c9ee25":"START_DATE = pd.to_datetime(\"2018-01-01\")","dd528aa0":"#LAST_DF = tgt.loc[tgt[time_index]>850].copy().reset_index(drop=True)\n#PLAYERS = pd.DataFrame(tgt.playerId.unique(), columns=[\"playerId\"])\n#LAST_DF.shape, tgt.shape","fb16ed29":"import mlb\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test se","0e9dd917":"\"\"\"\nFE, SUB = [], []\nfor (test_df, sample_prediction_df) in iter_test: \n    FE.append(test_df)\n    SUB.append(sample_prediction_df)\n    env.predict(sample_prediction_df)\n#===========\n\"\"\"","d0883a8a":"def prepare_test(hid_df, hid_sub):\n    hid_tgt = hid_sub[[\"date\",\"playerId\"]].copy()\n    #================== PART ONE ========================#\n    # adding rosters\n    colname = \"rosters\"\n    \"\"\"#consider input as null\n    rosters = pd.DataFrame(columns=rosters_cat + rosters_id)\n    rosters[\"playerId\"] = hid_tgt[\"playerId\"]\n    \"\"\"\n    if hid_df[colname].iloc[0] ==  hid_df[colname].iloc[0]:\n        rosters = pd.DataFrame(eval(hid_df[colname].iloc[0]))\n        rosters[\"index\"] = (pd.to_datetime(rosters[\"gameDate\"]) - START_DATE).dt.days\n        rosters = rosters[rosters_cat + rosters_id]\n    else:\n        rosters = pd.DataFrame(columns=rosters_cat + rosters_id)\n        rosters[\"playerId\"] = hid_tgt[\"playerId\"]\n    rosters = process_rosters(rosters)\n    # adding player scores\n    colname = \"playerBoxScores\"\n    #consider input as null\n    pscores = pd.DataFrame(columns = pscores_id + pscores_cat + pscores_num)\n    pscores = pscores.rename(columns=ren_player)\n    pscores[\"playerId\"] = hid_tgt[\"playerId\"]\n    \"\"\"\n    if hid_df[colname].iloc[0] ==  hid_df[colname].iloc[0]:## An error occurs in this block.\n        pscores = pd.DataFrame(eval(hid_df[colname].iloc[0]))\n        pscores = pscores.rename(columns=ren_player)\n        pscores[\"index\"] = (pd.to_datetime(pscores[\"gameDate\"]) - START_DATE).dt.days\n        pscores = pscores[pscores_id + pscores_cat + pscores_num]\n    else:\n        pscores = pd.DataFrame(columns = pscores_id + pscores_cat + pscores_num)\n        pscores = pscores.rename(columns=ren_player)\n        pscores[\"playerId\"] = hid_tgt[\"playerId\"]\n    \"\"\"\n    pscores = process_pscores(pscores)\n    pscores = pscores.drop_duplicates(subset=\"playerId\", keep=\"last\")\n    # Merging\n    hid_tgt = hid_tgt.merge(rosters, on=\"playerId\", how=\"left\")\n    hid_tgt = hid_tgt.merge(pscores, on=\"playerId\", how=\"left\")\n    #===================PART TWO=============================\n    colname = \"teamBoxScores\"\n    \"\"\"#consider input as null\n    tscores = pd.DataFrame(columns = tscores_id  + tscores_num)\n    tscores = tscores.rename(columns=ren_team)\n    tscores[\"teamId\"] = list(hid_tgt[\"teamId\"].unique())\n    \"\"\"\n    if hid_df[colname].iloc[0] ==  hid_df[colname].iloc[0]:\n        tscores = pd.DataFrame(eval(hid_df[colname].iloc[0]))\n        tscores = tscores.rename(columns=ren_team)\n        tscores[\"index\"] = (pd.to_datetime(tscores[\"gameDate\"]) - START_DATE).dt.days\n        tscores = tscores[tscores_id  + tscores_num]\n    else:\n        tscores = pd.DataFrame(columns = tscores_id  + tscores_num)\n        tscores = tscores.rename(columns=ren_team)\n        tscores[\"teamId\"] = list(hid_tgt[\"teamId\"].unique())\n        \n    tscores  = tscores.drop_duplicates(subset=\"teamId\", keep=\"last\")\n    hid_tgt = hid_tgt.merge(tscores, on=\"teamId\", how=\"left\")\n    #==================PART THREE ============================\n    colname = \"games\"\n    \"\"\"#consider input as null\n    games = pd.DataFrame(columns = games_id  + games_cat + games_num )\n    games[\"gamePk\"] = list(hid_tgt[\"gamePk\"].unique())\n    \"\"\"\n    if hid_df[colname].iloc[0] ==  hid_df[colname].iloc[0]:\n        games = pd.DataFrame(eval(hid_df[colname].iloc[0]))\n        games[\"index\"] = (pd.to_datetime(games[\"gameDate\"]) - START_DATE).dt.days\n        games = games[games_id  + games_cat + games_num]\n    else:\n        games = pd.DataFrame(columns = games_id  + games_cat + games_num )\n        games[\"gamePk\"] = list(hid_tgt[\"gamePk\"].unique())\n    games = process_games(games)\n    games = games.drop_duplicates(subset=\"gamePk\", keep=\"last\")\n    hid_tgt = hid_tgt.merge(games, on=\"gamePk\", how=\"left\")\n    #================================================\n    hid_tgt  = reduce_df(hid_tgt, train=False)\n    return hid_tgt","723848bb":"\"\"\"\nidx = 4\nhid_df = FE[idx].copy()\nhid_sub = SUB[idx].copy()\nprint(hid_sub.shape[0])\n\"\"\"","781bdb99":"\"\"\"\nhid_sub = hid_sub.reset_index()\nhid_sub[\"playerId\"] = hid_sub[\"date_playerId\"].apply(lambda x: int( x.split(\"_\")[1] ))\nhid_sub.drop(TGTCOLS, axis=1, inplace=True)\n\nhid_tgt = prepare_test(hid_df, hid_sub)\nXe = hid_tgt[NUMCOLS].values\nXe = sc.transform(Xe)\n    \npe = net.predict(Xe)\npe = np.clip(pe, 0, 100)\n    \nhid_sub[TGTCOLS] = pe\nsub = hid_sub[[\"date_playerId\"] + TGTCOLS].copy()\n\"\"\"","03d4de13":"\nfor (hid_df, hid_sub) in iter_test: \n    hid_sub = hid_sub.reset_index()\n    hid_sub[\"playerId\"] = hid_sub[\"date_playerId\"].apply(lambda x: int( x.split(\"_\")[1] ))\n    hid_sub.drop(TGTCOLS, axis=1, inplace=True)\n    \n    hid_tgt = prepare_test(hid_df, hid_sub)\n    assert hid_tgt.shape[0] == hid_sub.shape[0]\n    Xe = hid_tgt[NUMCOLS].values\n    Xe = sc.transform(Xe)\n    \n    #pe = net.predict(Xe)\n    #pe = np.clip(pe, 0, 100)\n    \n    hid_sub[TGTCOLS] = 0.\n    sub = hid_sub[[\"date_playerId\"] + TGTCOLS].copy()\n    sub = sub.fillna(0.)\n    env.predict(sub)\n    gc.collect()\n#===========","691b1765":"sub.tail()","575cb56a":"## BUILD DATASET...","e193c81e":"## INFERENCE","b22a44ec":"## Description of the steps\n\n### 1- Rosters (gameDate, playerId, teamId)\n* statusCode: 11 values\n* status : 16 values\n\n### 2- Games (gamePk, gameDate)\nsince some games are postponed or arrested, we have to choose the last line of the game\n* gameType : 8\n* codedGameState : 6\n* detailedGameState : 7\n* isTie : 2\n* seriesDescription : 8\n\n### 3-playerBoxScores (playerId, gameDate,gamePk)\n* jerseyNum: 100\n* positionCode: 12\n* positionName: 8\n* positionType: 6\n\n\n### 4-teamBoxScores (teamId, index,gamePk)\n* No categorical variable\n\n### 5- events\n\n### 6- transactions\n\n### 7- awards\n\n### 8- standings\n\n### 9- playerTwitterFollowers\n\n### 10- teamTwiterFollowers\nOk","c3554c1c":"## REDUCING MEMORY USAGE"}}