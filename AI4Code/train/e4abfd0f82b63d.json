{"cell_type":{"d030e55e":"code","b54aae58":"code","c116eb8c":"code","a7ba5171":"code","cc8fc7b1":"code","3574fa26":"code","65e901f7":"code","55b9e3f5":"code","a081a2ce":"code","9a909072":"code","9d3cdbae":"code","506981b0":"code","6770cd74":"code","d2041bca":"code","01aa8d59":"code","3f4df810":"code","397f3f03":"code","92dc173b":"code","08886043":"code","9015a91a":"code","28762136":"code","34ca98fc":"code","9f90486a":"code","f722eaeb":"code","dd35cb90":"code","9c5d3b6b":"code","0ddc3b69":"code","da12ce53":"code","c87c2cb3":"code","07f7236b":"code","d94b000f":"code","50663a83":"code","09126bb3":"code","77a3e8cf":"code","c56d2b20":"code","958c0709":"markdown","e98384f6":"markdown","05ac5901":"markdown","335d5786":"markdown","58751242":"markdown","1ba3c525":"markdown","9b6ffe88":"markdown","91aff3b8":"markdown"},"source":{"d030e55e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b54aae58":"import matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns","c116eb8c":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.info()","a7ba5171":"df.isnull().sum()","cc8fc7b1":"df.skew()# skew can be seen reduced after removing outliers","3574fa26":"def plot_numeric_features(feature):#code to visualize distribution, scatterplot and boxplot\n    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5), dpi=110)\n    \n    sns.distplot(df[feature], ax=ax1)\n    sns.scatterplot(df[feature], df[\"DEATH_EVENT\"], ax=ax2)\n    sns.boxplot(df[feature],orient='h', ax=ax3, width=0.2)\n\n    print(f\"Skewness Coefficient of {feature} is {df[feature].skew():.2f}\")\n    ax1.set_yticks([])\n    \n    return plt","65e901f7":"plot_numeric_features(\"age\").show()","55b9e3f5":"plot_numeric_features(\"anaemia\").show()","a081a2ce":"plot_numeric_features(\"creatinine_phosphokinase\").show()","9a909072":"plot_numeric_features(\"diabetes\").show()\n","9d3cdbae":"plot_numeric_features(\"ejection_fraction\").show()","506981b0":"plot_numeric_features(\"high_blood_pressure\").show()","6770cd74":"plot_numeric_features(\"platelets\").show()","d2041bca":"plot_numeric_features(\"serum_creatinine\").show()","01aa8d59":"plot_numeric_features(\"serum_sodium\").show()","3f4df810":"plot_numeric_features(\"sex\").show()","397f3f03":"df=df[df['creatinine_phosphokinase']<2000]\ndf=df[df['ejection_fraction']<65]\ndf=df[(df['platelets']>100000) & (df['platelets']<450000)]\ndf=df[df['serum_creatinine']< 2]\ndf=df[df['serum_sodium']>126]\ndf","92dc173b":"df.skew()","08886043":"g = sns.countplot(df['DEATH_EVENT']) #checking imbalance after removing outliers\ng.set_xticklabels(['0','1'])\nplt.show()","9015a91a":"x = df[[c for c in df.columns if c != 'DEATH_EVENT']] #separating features\ny = df['DEATH_EVENT']#separating target","28762136":"from imblearn.over_sampling import SMOTE\nfrom collections import Counter\nsmote = SMOTE()\nx_smote, y_smote = smote.fit_resample(x, y)\nprint('Original dataset shape', Counter(y))\nprint('Resample dataset shape', Counter(y_smote))","34ca98fc":"g = sns.countplot(y_smote) # plotting for imbalance\ng.set_xticklabels(['0','1'])\nplt.show()","9f90486a":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split #splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(x_smote, y_smote, test_size=0.4, random_state=0)\nX_train.shape","f722eaeb":"from sklearn.preprocessing import MinMaxScaler #scaling all the features\n\nscaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","dd35cb90":"# importing various libraries\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.ensemble import GradientBoostingClassifier \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb\nfrom catboost import CatBoostClassifier","9c5d3b6b":"from sklearn.preprocessing import MinMaxScaler #scaling all the features\n\nscaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","0ddc3b69":"logReg=LogisticRegression()\nlogReg.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))\nprint('-----------')","da12ce53":"RF=RandomForestClassifier(n_estimators=100)\nRF.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","c87c2cb3":"GB=GradientBoostingClassifier(max_depth=5)\nGB.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","07f7236b":"KNN=KNeighborsClassifier(n_neighbors=5, weights='distance')\nKNN.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","d94b000f":"XGB=xgb.XGBClassifier(random_state=1,learning_rate=0.01)\nXGB.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","50663a83":"BOO=AdaBoostClassifier(random_state=1)\nBOO.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","09126bb3":"CB=CatBoostClassifier()\nCB.fit(X_train_scaled, y_train)\ny_test_pre = model.predict(X_test_scaled)\nprint(model.score(X_test_scaled,y_test))\nprint(recall_score(y_test, y_test_pre))","77a3e8cf":"# creating instances of classifiers\ncla = {\n\"LogisticRegression\":LogisticRegression(),\n'Random_Forest': RandomForestClassifier(n_estimators=100),\n'Gradient_Boosting': GradientBoostingClassifier(max_depth=5),\n'K_NN': KNeighborsClassifier(n_neighbors=5, weights='distance'),\n\"ADABOOST\":AdaBoostClassifier(random_state=1),\n\"xgboost\":xgb.XGBClassifier(random_state=1,learning_rate=0.01),\n\"CatBoost\":CatBoostClassifier()\n}","c56d2b20":"# #  calculating accuracies and recall\n\n# from sklearn.metrics import recall_score\n# for name, model in cla.items():\n#     model.fit(X_train_scaled, y_train)\n#     y_test_pre = model.predict(X_test_scaled)\n#     print(model.score(X_test_scaled,y_test))\n#     print(recall_score(y_test, y_test_pre))\n#     print('-----------')","958c0709":"**It is clear that the data which are bigger than 2000 are outlier**","e98384f6":"Remove outlier","05ac5901":"**It is clear that the data which are bigger than 65 are outlier **","335d5786":"**It is clear that the data which are less than 100000 and bigger than 450000 are outlier**","58751242":"Scatter and box plot","1ba3c525":"**It is clear that the data which are less than 126 are outlier**","9b6ffe88":"**It is clear that the data which are bigger than 2 are outlier**","91aff3b8":"** Our data is in imbalanced so here we do oversampling by making synthetic datathrough k nearest neibour trick**"}}