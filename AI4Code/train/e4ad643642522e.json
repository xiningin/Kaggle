{"cell_type":{"969f54c5":"code","7487c85b":"code","2a5e49b5":"code","c6a5e32e":"code","b5e44cda":"code","bab1400a":"code","30f5c2e1":"code","0d0d4344":"code","15acd4d0":"code","0d6db44d":"code","c48fe0f9":"code","a6c52c9e":"code","4edd39df":"code","e675fb11":"code","c5a5125a":"code","4d964b02":"code","05b0b6ad":"code","f97f41d5":"code","625c5dc7":"code","0bd663d7":"code","23d93a22":"code","ad3caf29":"code","d25a5c5b":"code","87df1e61":"code","20de90f7":"code","556ddeb4":"code","3da479f7":"code","55968d90":"code","eacc3243":"code","a566c058":"code","903efe50":"code","309ac0db":"code","89a782e1":"code","6dc98c53":"code","52d0bc03":"code","ac2ef715":"code","b42a5854":"code","1ad8c3bf":"code","cb2ce2e6":"code","5f45cac0":"code","c98bb33a":"code","4f8703fb":"code","0401c894":"code","b3b39a20":"code","ed12345e":"code","31e60c92":"code","a30c986c":"code","e51c1421":"code","e00c15d9":"code","4f879c72":"code","b1b2a21c":"code","a3523e5f":"code","5faf92c4":"code","fbce3ba9":"code","0d56270c":"code","7671f91c":"code","3f838144":"code","937e661f":"code","def84a19":"code","bac00033":"code","34f4b999":"code","c408a235":"code","4d4808ef":"code","74ac02da":"code","76618375":"code","635d72f0":"code","55b55ce1":"code","5a37857c":"code","3f152f32":"markdown","01d3c3df":"markdown","edcf8d6b":"markdown","10cbf116":"markdown","c4e72424":"markdown","663ed5e4":"markdown","2939b496":"markdown","491b294a":"markdown","f1cbeec4":"markdown","a75badfc":"markdown","20837544":"markdown","2fa68af0":"markdown","0f899ab0":"markdown","0eb441e9":"markdown","4b129870":"markdown","43b85ec9":"markdown","8eae47fc":"markdown","be556da2":"markdown","c6e02680":"markdown","7578060c":"markdown","d1147321":"markdown","2e7c515e":"markdown","6cb6a49a":"markdown","deb1b026":"markdown","6b174dad":"markdown","a2b59f1b":"markdown","88096550":"markdown"},"source":{"969f54c5":"# Allow several prints in one cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n# importing the core library\nimport numpy as np\n\n# helper functions to list the datasets available\ndef print_files():\n    import os\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\nprint_files()","7487c85b":"\nimport numpy as np\nprint(np.__version__)","2a5e49b5":"arr = np.array([2,4,6])\nprint(f'array is {arr}')\nprint(f'Type is {arr.dtype}')\nprint(f'Shape is {arr.shape}')","c6a5e32e":"\narr = np.arange(15)\narr","b5e44cda":"# Create a 3\u00d75 numpy array\n#3x5 means 3rows 5 columns\n\narr = np.arange(15).reshape(3, 5)\nprint(f'array is {arr}')\nprint(f'Type is {arr.dtype}')\nprint(f'Shape is {arr.shape}')\nprint(f'itemasize is {arr.itemsize}')","bab1400a":"b = np.array([(1.5,2,3), (4,5,6)])\nb","30f5c2e1":"c = np.array( [ [1,2], [3,4] ], dtype=complex )\nc\n","0d0d4344":"a = np.zeros((2,3))\nprint('np.zeros((2,3)= \\n{}\\n'.format(a))\n","15acd4d0":"b = np.ones((2,3))\nprint('np.ones((2,3))= \\n{}\\n'.format(b))","0d6db44d":"d = np.linspace(1, 2, 7)\nprint('np.linspace(1, 2, 7)= \\n{}\\n'.format(d))","c48fe0f9":"f = np.random.random((2,3))\nprint('np.random.random((2,3))= \\n{}\\n'.format(f))","a6c52c9e":"zero_line = np.zeros((1,3))\none_column = np.ones((3,1))\nprint(\"zero_line = \\n{}\\n\".format(zero_line))\nprint(\"one_column = \\n{}\\n\".format(one_column))\n\na = np.array([(1,2,3), (4,5,6)])\nb = np.arange(11, 20)\nprint(\"a = \\n{}\\n\".format(a))\nprint(\"b = \\n{}\\n\".format(b))\n","4edd39df":"b = b.reshape(3, -1)\nprint(\"b.reshape(3, -1) = \\n{}\\n\".format(b))\n","e675fb11":"b.reshape(3, -1)","c5a5125a":"c = np.vstack((a, b, zero_line))\nprint(\"c = np.vstack((a,b, zero_line)) = \\n{}\\n\".format(c))","4d964b02":"a = a.reshape(3, 2)\nprint(\"a.reshape(3, 2) = \\n{}\\n\".format(a))\n\nd = np.hstack((a, b, one_column))\nprint(\"d = np.hstack((a,b, one_column)) = \\n{}\\n\".format(d))","05b0b6ad":"e = np.hsplit(d, 3) # Split a into 3\nprint(\"e = np.hsplit(d, 3) = \\n{}\\n\".format(e))\nprint(\"e[1] = \\n{}\\n\".format(e[1]))","f97f41d5":"g = np.vsplit(d, 3)\nprint(\"np.hsplit(d, 2) = \\n{}\\n\".format(g))","625c5dc7":"a = np.array( [20,30,40,50] )\nb = np.arange(4)\nprint(f'{a}')\nprint(f'{b}')","0bd663d7":"c = a-b\nc","23d93a22":"d = a+b\nd","ad3caf29":"b**4","d25a5c5b":"50*np.sin(a)","87df1e61":"a<40","20de90f7":"A = np.array( [[1,1],\n              [0,1]] )\nB = np.array( [[2,0],\n              [3,4]] )","556ddeb4":"A*B","3da479f7":"A@B #matrix product","55968d90":"A.dot(B)","eacc3243":"b = np.arange(12).reshape(3,4)\nb","a566c058":"print(b)\nprint('************')\nprint(f' {b.sum(axis=0)}')\n","903efe50":"b.min(axis=1)  ","309ac0db":"b.cumsum(axis=1)","89a782e1":"np.sqrt(b)","6dc98c53":"np.exp(b)","52d0bc03":"arr = np.arange(1,20)\narr = arr * arr              #Multiplies each element by itself \nprint(\"Multpiles: \",arr)\narr = arr - arr              #Subtracts each element from itself\nprint(\"Substracts: \",arr)\narr = np.arange(1,20)\narr = arr + arr              #Adds each element to itself\nprint(\"Add: \",arr)\narr = arr \/ arr              #Divides each element by itself\nprint(\"Divide: \",arr)\narr = np.arange(1,20)\narr = arr + 50\nprint(\"Add +50: \",arr)","ac2ef715":"print(\"Sqrt: \",np.sqrt(arr))#Returns the square root of each element \nprint(\"Exp: \",np.exp(arr))     #Returns the exponentials of each element\nprint(\"Sin: \",np.sin(arr))     #Returns the sin of each element\nprint(\"Cos: \",np.cos(arr))     #Returns the cosine of each element\nprint(\"Log: \",np.log(arr))     #Returns the logarithm of each element\nprint(\"Sum: \",np.sum(arr))     #Returns the sum total of elements in the array\nprint(\"Std: \",np.std(arr))     #Returns the standard deviation of in the array","b42a5854":"a = np.arange(10)**3\na","1ad8c3bf":"a[2:5]","cb2ce2e6":"# from start to position 6, exclusive, set every 2nd element to 1000\na[:6:2] = 1000\na","5f45cac0":"a[ : :-1] #reversing a\n","c98bb33a":"base_data = np.floor((np.random.random((5, 5)) - 0.5) * 100)\nprint(\"base_data = \\n{}\\n\".format(base_data))\n\nprint(\"base_data.T = \\n{}\\n\".format(base_data.T))\nprint(\"base_data.transpose() = \\n{}\\n\".format(base_data.transpose()))\n\nmatrix_one = np.ones((5, 5))\nprint(\"matrix_one = \\n{}\\n\".format(matrix_one))\n\nminus_one = np.dot(matrix_one, -1)\nprint(\"minus_one = \\n{}\\n\".format(minus_one))\n\nprint(\"np.dot(base_data, minus_one) = \\n{}\\n\".format(\n    np.dot(base_data, minus_one)))","4f8703fb":"rg = np.random.default_rng(1)     # create instance of default random number generator\na = np.floor(10*rg.random((3,4)))\na","0401c894":"a.shape","b3b39a20":"a.ravel()","ed12345e":"a.reshape(6,2)","31e60c92":"a.T","a30c986c":"a.T.shape","e51c1421":"a = np.array([[1.0, 2.0], [3.0, 4.0]])\na","e00c15d9":"a.transpose()","4f879c72":"np.linalg.inv(a)","b1b2a21c":"u = np.eye(2)\nu","a3523e5f":"# Q. Replace all odd numbers in arr with -1 without changing arr\n# Input \narr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(\"Input\")\narr\n\n# Desired Output\n# out #>  array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])\n# arr #>  array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# Solution\nout = arr.copy()\nout[out%2 != 0] = -1\nprint(\"Solution\")\nprint(\"Modified array\")\nout\nprint(\"Original array\")\narr","5faf92c4":"# Q. Get the common items between a and b\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,2,3,4,3,4,5,6])\nb = np.array([7,2,10,2,7,4,9,4,9,8])\na\nb\n\n# Desired Output\n# array([2, 4])\n\n# Solution\nprint(\"Solution\")\nnp.unique(a[a == b])","fbce3ba9":"# Q. From array a remove all items present in array b\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,4,5])\nb = np.array([5,6,7,8,9])\na\nb\n\n# Desired Output\n# array([1,2,3,4])\n\n# Solution\nprint(\"Solution\")\na[~np.isin(a,b)] # np.isin to find the common elements (returns an array of Booleans). To filter only False, use ~ (CTRL + ALT + 4)","0d56270c":"# Q. Get the positions where elements of a and b match\n\n# Input\nprint(\"Input\")\na = np.array([1,2,3,2,3,4,3,4,5,6])\nb = np.array([7,2,10,2,7,4,9,4,9,8])\na\nb\n\n# Desired Output\n# > (array([1, 3, 5, 7]),)\n\n# Solution\nprint(\"Solution\")\nnp.where(a == b) # Notice: the solution if the INDEX but the values","7671f91c":"# Q. Get all items between 5 and 10 from a.\n\n# Input\nprint(\"Input\")\na = np.array([2, 6, 1, 9, 10, 3, 27])\na\n\n# Desired Output\n# (array([6, 9, 10]),)\n\n# Solution\nprint(\"Solution\")\na[(a > 5) & (a < 10)]","3f838144":"# Q. Swap columns 1 and 2 in the array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\ntemp = arr[:,0].copy() # temporary variable\narr[:,0], arr[:,1] = arr[:,1], temp\narr","937e661f":"# Q. Swap rows 1 and 2 in the array arr:\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\ntemp = arr[0,:].copy() # temporary variable\narr[0,:], arr[1,:] = arr[1,:], temp\narr\n","def84a19":"# Q. Reverse the rows of a 2D array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\narr[::-1]\narr[::-1, :] # exactly the same","bac00033":"# Q. Reverse the columns of a 2D array arr.\n\n# Input\nprint(\"Input\")\narr = np.arange(9).reshape(3,3)\narr\n\n# Solution\nprint(\"Solution\")\narr[:, ::-1]","34f4b999":"# Q. Print or show only 3 decimal places of the numpy array rand_arr.\n\n# Setting print options to default\nnp.set_printoptions(edgeitems=3,infstr='inf', linewidth=75, nanstr='nan', precision=8, suppress=False, threshold=1000, formatter=None)\n\n# Input\nprint(\"Input\")\nrand_arr = np.random.random((5,3))\nrand_arr\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(precision=3)\nrand_arr","c408a235":"# Q. Print the full numpy array a without truncating.\n\n# Input\nprint(\"Input\")\nnp.set_printoptions(threshold=6)\na = np.arange(15)\na\n\n# Desired Output\n# > array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\n# Solution\nprint(\"Solution\")\nnp.set_printoptions(threshold=len(a))\na","4d4808ef":"# Q. Extract the text column species from the 1D iris imported in previous question.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [5], dtype='str')\niris\n\n# Solution from the website\nprint(\"Solution from website\")\niris_1d = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', dtype=None)\nspecies = np.array([row[5] for row in iris_1d])\nspecies[:5]","74ac02da":"# Q. Convert the 1D iris to 2D array iris_2d by omitting the species text field.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [0, 1, 2, 3, 4], dtype = None)\niris[:4]\n\n# Another solution from the website\nprint(\"Another solution from website\")\niris_1d = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', dtype=None)\niris_2d = np.array([row.tolist()[:4] for row in iris_1d])\niris_2d[:4]","76618375":"# Q. Find the mean, median, standard deviation of iris's sepallength (1st column)\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [1])\niris\n\nimport pandas as pd\npd.Series(iris).describe()\n\nfrom scipy import stats \nstats.describe(iris) \n\n# Solution from the website\nprint(\"Another solution from the website\")\nmu, med, sd = np.mean(iris), np.median(iris), np.std(iris)\nprint(mu, med, sd)","635d72f0":"# Q. Create a normalized form of iris's sepallength whose values range exactly between 0 and 1 so that the minimum has value 0 and maximum has value 1.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [1])\n(iris - np.min(iris))\/(np.max(iris) - np.min(iris))\n\n# Another solution from the website\nprint(\"Another solution from the website\")\niris.ptp() # peak to peak. Basically the same as (np.max(iris) - np.min(iris))\n(iris - np.min(iris))\/iris.ptp()","55b55ce1":"# Q. Compute the softmax score of sepallength.\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\n# The Softmax regression is a form of logistic regression that normalizes an input value into a vector of values that follows a probability distribution whose total sums up to 1. \nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [1])\nsoftmax = np.exp(iris)\/sum(np.exp(iris))\nsoftmax.sum() # it must sum 1\n\n# We can also apply this to more than 1 column.\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [1, 2, 3, 4])\nsoftmax = np.exp(iris)\/sum(np.exp(iris))\nsoftmax.sum() # We have 4 since we have 4 columns, each sums 1\nsoftmax\n\n# Solution from the website\nprint(\"Solution from the website\")\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\n    https:\/\/stackoverflow.com\/questions\/34968722\/how-to-implement-the-softmax-function-in-python\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum(axis=0)\n\nprint(softmax(iris).sum())\nprint(softmax(iris))\n","5a37857c":"# Q. Find the 5th and 95th percentile of iris's sepallength\n\n# Input\n# Use the iris dataset provided\nprint_files()\n\n# Use this if you are working on your local machine\n# url = 'https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/iris\/iris.data'\n# iris_1d = np.genfromtxt(url, delimiter=',', dtype=None)\n\n# Solution\nprint(\"Solution\")\niris = np.genfromtxt('\/kaggle\/input\/iris\/Iris.csv', delimiter=',', skip_header=1, usecols = [1])\niris\nnp.percentile(iris, q = [5, 95])","3f152f32":"<a id='defination'><\/a>\n# Defination\n\n[Go back to the table of contents](#table_of_contents)\n\n\nNumpy is short name of numerical python which is one of the most important package for computing the numerical python.\n\n***Why Numpy***\n\n\n\u2022ndarray, an efficient multidimensional array providing fast array-oriented arith\u2010\nmetic operations and flexible broadcasting capabilities.\n\n\u2022 Mathematical functions for fast operations on entire arrays of data without hav\u2010\ning to write loops.\n\n\u2022 Tools for reading\/writing array data to disk and working with memory-mapped\nfiles.\n\n\u2022 Linear algebra, random number generation, and Fourier transform capabilities.\n\u2022 A C API for connecting NumPy with libraries written in C, C++, or FORTRAN.","01d3c3df":"<a id = 'q6'><\/a>\n\n# Cpoy in numpy\n\n[Go back to the table of contents](#table_of_contents)","edcf8d6b":"<a id = 'q28'><\/a>\n**28. How to compute the mean, median, standard deviation of a numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","10cbf116":"<a id = 'q29'><\/a>\n**29. How to normalize an array so the values range exactly between 0 and 1?**\n\n[Go back to the table of contents](#table_of_contents)","c4e72424":"<a id = 'q26'><\/a>\n# Iris Data Example\n\n[Go back to the table of contents](#table_of_contents)","663ed5e4":"![image.png](attachment:image.png)\n\n# Welcome to this Notebook\n\n***After completion of Notebook you will understand complete Numpy:***\n","2939b496":"<a id='6'><\/a>\n\n# Indexing\n\n[Go back to the table of contents](#table_of_contents)\n\n","491b294a":"<a id = 'n-darray'><\/a>\n# ndarray\n\nTo above arr we can convert using reshape function to make it ndaary\n\n\n[Go back to the table of contents](#table_of_contents)","f1cbeec4":"The array b is a one-dimensional array originally, and we resize it into a matrix of 3 rows and 3 columns by the reshape method:","a75badfc":"The second parameter here is set to -1, which means that it'll be determined based on actual conditions automatically. Since the array has 9 elements originally, the matrix after being resized is 3X3. The code output is as follows:","20837544":"How to create array","2fa68af0":"<a id = 'q21'><\/a>\n**21. How to print only 3 decimal places in python numpy array?**\n\n[Go back to the table of contents](#table_of_contents)","0f899ab0":"<a id='5'><\/a>\n\n# Linear Algebra\n\n[Go back to the table of contents](#table_of_contents)\n","0eb441e9":"## vstack,hstack,hsplit","4b129870":"<a id='1'><\/a>\n\n# Shapes and Operation\n\n[Go back to the table of contents](#table_of_contents)\n\n","43b85ec9":"<a id='3'><\/a>\n\n# Matrix\n\n[Go back to the table of contents](#table_of_contents)","8eae47fc":"<a id = 'q11'><\/a>\n\n# Example\n\n[Go back to the table of contents](#table_of_contents)","be556da2":"# np.random\nrandom: used to generate random numbers","c6e02680":"# That's all, thanks a lot. I hope you learned a lot of numpy.","7578060c":"<a id='table_of_contents'><\/a>\n# Table of contents\n\n[Defination](#defination)\n\n[1-darray](#1-darray)\n\n[n-darray](#n-darray)\n\n[Shapes and Operation](#1)\n\n[Basic Math Operation](#2)\n\n[Indxing](#6)\n\n\n[Matrix](#3)\n\n[Shape Manupulation](#4)\n\n[Linear Algebra](#5)\n\n[Copy in Numpy](#q6)\n\n[Examples](#q11)\n\n[Iris data Examlpe](#q26)\n\n","d1147321":"<a id = '1-darray'><\/a>\n# 1D array\n\nHere we will use arnage function which take start and stop as its parametres.\n\n**\nnumpy.arange([start, ]stop, [step, ]dtype=None)\n\n[Go back to the table of contents](#table_of_contents)","2e7c515e":"<a id = 'q30'><\/a>\n**30. How to compute the softmax score?**\n\n[Go back to the table of contents](#table_of_contents)","6cb6a49a":"# np.linspace\nlinespace: used to create an array by specifying the range and the number of elements","deb1b026":"# np.zeros,np.ones\nzeros: used to create an array whose elements are all 0\n\nones: used to create an array whose elements are all 1","6b174dad":"<a id='q1'><\/a>\n\n\n[Go back to the table of contents](#table_of_contents)","a2b59f1b":"<a id='4'><\/a>\n\n# Shape Manipulation\n\n[Go back to the table of contents](#table_of_contents)\n","88096550":"<a id='2'><\/a>\n\n# Basic Math Operation\n\n[Go back to the table of contents](#table_of_contents)\n"}}