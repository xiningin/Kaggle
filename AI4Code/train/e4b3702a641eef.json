{"cell_type":{"7583d771":"code","515f5f6f":"code","bcb5d77f":"code","06f77b04":"code","3a7996b8":"code","7e6203f2":"code","925cb00e":"code","6ff727a1":"markdown","31988bf3":"markdown","cd88096b":"markdown","b36f7a26":"markdown","62268819":"markdown","cca3c976":"markdown","8fe46a35":"markdown"},"source":{"7583d771":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom math import sqrt\nfrom math import exp\nfrom math import pi\nimport numpy as np\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","515f5f6f":"import pandas as pd\niris = pd.read_csv(\"..\/input\/iris-data-set\/iris.csv\",header=None)\niris.head()","bcb5d77f":"iris_train = iris.sample(frac=0.8,random_state=1000)\niris_test = iris.drop(iris_train.index)","06f77b04":"train_summary = dict()\nunique_classes = iris_train[4].unique()\nfor class_name in unique_classes:\n    train_summary[class_name] = dict()\n    train_summary[class_name]['values'] = dict()\n    mean_list = list()\n    std_list = list()\n    len_list = list()\n    for i in range(len(iris_train.columns)-1):\n        mean_list.append(np.mean(iris_train[iris_train[4]==class_name][i]))\n        std_list.append(np.std(iris_train[iris_train[4]==class_name][i]))\n        len_list.append(len(iris_train[iris_train[4]==class_name][i]))\n    train_summary[class_name]['values']['mean'] = mean_list\n    train_summary[class_name]['values']['std_dev'] = std_list\n    train_summary[class_name]['values']['length'] = len_list\n\ntrain_summary","3a7996b8":"def gaussian_density_function(x,mean,stdev):\n    exponent = exp(-((x-mean)**2\/(2*stdev**2)))\n    return (1\/(sqrt(2*pi)*stdev))*exponent","7e6203f2":"test_value = list(iris_test.iloc[23])\ntest_value","925cb00e":"print(\"Calculated Values\")\nmax_prob = 0;\nfor class_name in iris_train[4].unique():\n    p = train_summary[class_name]['values']['length'][0]\/float(len(iris_train))\n    for i in range(len(iris_train.columns)-1):\n           p=p*gaussian_density_function(test_value[i],train_summary[class_name]['values']['mean'][i],train_summary[class_name]['values']['std_dev'][i])\n    print(class_name , \": \", p)\n    if p>max_prob:\n        max_prob = p\n        final_class = class_name\nprint(\"\\nPredicted Class: \", final_class)","6ff727a1":"This is where we divide the data into train and test sets. 80% of the total data is taken as the train set and the remaining is used for sample testing. ","31988bf3":"Here we invoke the defined gaussian_probability_density function by passing the required arguments, including the parameters of the sample chosen. The function returns the calculated values and the category which has the maximum value is the category of the selected sample. ","cd88096b":"This is an implementation of the Naive Bayes algorithm done on the Iris dataset. We divided the data into train and test sets and after creating the model on the train dataset, we picked up random samples from the test dataset to validate the accuracy of the classification. We are able to classify the records with an accuracy of 100%.  ","b36f7a26":"Here we construct a dictionary breaking down the data into three groups (Iris-setosa,Iris-versicolor, Iris-virginica) based on the type of flower. We calculate the mean, standard deviation, and total inputs for the four different attributes (sepal length, sepal width, petal width, petal length) for the three groups. The data structure used to store the data can be viewed from the output below.","62268819":"We have defined a function which is the implementation of the mathematical formula for the algorithm","cca3c976":"We added the dataset in csv format without the header. The column names can be seen from the output view below.  ","8fe46a35":"This is where we decide the sample used to test the model. The actual category of the sample is the last value in the list. "}}