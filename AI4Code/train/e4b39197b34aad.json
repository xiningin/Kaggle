{"cell_type":{"ecb59347":"code","e0a69077":"code","f050c868":"code","33b5237e":"code","d07a5f44":"code","72157d3d":"code","44b7c304":"code","1cbec051":"code","d5475f8c":"code","eafa5cf3":"code","d794a033":"code","6bbcc09c":"code","2dbf701b":"code","f782dda3":"code","71b2f899":"code","475cb239":"code","670635b0":"code","6dedcac2":"code","78f9c639":"code","39b923dd":"code","bf03f792":"code","c58bcff7":"code","4325a7b8":"code","ac567ecb":"code","682d840a":"code","77ebc85e":"code","c743d195":"code","dda4e041":"code","559488e4":"code","3179f82c":"code","5a01d210":"code","a9a720b8":"code","9d40eda2":"code","e387f262":"code","e5ac18e6":"code","1d420b20":"code","9b2d8e18":"code","d8ad7274":"code","d6e02e99":"code","06f1465e":"markdown","bed8f3ca":"markdown","4332c06d":"markdown","966aa309":"markdown","33d6e1c5":"markdown","ae27f912":"markdown","ed65db25":"markdown","1f9ad9c1":"markdown","c1d8772c":"markdown","60bf1219":"markdown","488eb79c":"markdown","d9487331":"markdown"},"source":{"ecb59347":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e0a69077":"# You have to include the full link to the csv file containing your dataset\ncreditcard_df = pd.read_csv('\/kaggle\/input\/marketing_data.csv')\n\n# CUSTID: Identification of Credit Card holder \n# BALANCE: Balance amount left in customer's account to make purchases\n# BALANCE_FREQUENCY: How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n# PURCHASES: Amount of purchases made from account\n# ONEOFFPURCHASES: Maximum purchase amount done in one-go\n# INSTALLMENTS_PURCHASES: Amount of purchase done in installment\n# CASH_ADVANCE: Cash in advance given by the user\n# PURCHASES_FREQUENCY: How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n# ONEOFF_PURCHASES_FREQUENCY: How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n# PURCHASES_INSTALLMENTS_FREQUENCY: How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n# CASH_ADVANCE_FREQUENCY: How frequently the cash in advance being paid\n# CASH_ADVANCE_TRX: Number of Transactions made with \"Cash in Advance\"\n# PURCHASES_TRX: Number of purchase transactions made\n# CREDIT_LIMIT: Limit of Credit Card for user\n# PAYMENTS: Amount of Payment done by user\n# MINIMUM_PAYMENTS: Minimum amount of payments made by user  \n# PRC_FULL_PAYMENT: Percent of full payment paid by user\n# TENURE: Tenure of credit card service for user","f050c868":"creditcard_df","33b5237e":"creditcard_df.info()\n# Let's apply info and get additional insights on our dataframe\n# 18 features with 8950 points  ","d07a5f44":"creditcard_df.describe()","72157d3d":"creditcard_df[creditcard_df['ONEOFF_PURCHASES'] == 40761.25]","44b7c304":"creditcard_df['CASH_ADVANCE'].max()","1cbec051":"creditcard_df[creditcard_df['CASH_ADVANCE'] == 47137.211760000006]","d5475f8c":"# Let's see if we have any missing data, luckily we don't have many!\nsns.heatmap(creditcard_df.isnull(), yticklabels = False, cbar = False, cmap=\"Blues\")\n","eafa5cf3":"creditcard_df.isnull().sum()","d794a033":"# Fill up the missing elements with mean of the 'MINIMUM_PAYMENT' \ncreditcard_df.loc[(creditcard_df['MINIMUM_PAYMENTS'].isnull() == True), 'MINIMUM_PAYMENTS'] = creditcard_df['MINIMUM_PAYMENTS'].mean()\n","6bbcc09c":"creditcard_df.fillna({'CREDIT_LIMIT': creditcard_df.CREDIT_LIMIT.mean()} , inplace= True)","2dbf701b":"creditcard_df.isnull().sum()","f782dda3":"# Let's see if we have duplicated entries in the data\ncreditcard_df.duplicated().sum()","71b2f899":"creditcard_df.drop('CUST_ID' , axis = 1 , inplace = True)","475cb239":"creditcard_df","670635b0":"n = len(creditcard_df.columns)\nn","6dedcac2":"creditcard_df.columns","78f9c639":"# distplot combines the matplotlib.hist function with seaborn kdeplot()\n# KDE Plot represents the Kernel Density Estimate\n# KDE is used for visualizing the Probability Density of a continuous variable. \n# KDE demonstrates the probability density at different values in a continuous variable. \n\n# Mean of balance is $1500\n# 'Balance_Frequency' for most customers is updated frequently ~1\n# For 'PURCHASES_FREQUENCY', there are two distinct group of customers\n# For 'ONEOFF_PURCHASES_FREQUENCY' and 'PURCHASES_INSTALLMENT_FREQUENCY' most users don't do one off puchases or installment purchases frequently \n# Very small number of customers pay their balance in full 'PRC_FULL_PAYMENT'~0\n# Credit limit average is around $4500\n# Most customers are ~11 years tenure\n\nplt.figure(figsize=(10,150))\nfor i in range(len(creditcard_df.columns)):\n  plt.subplot(17, 1, i+1)\n  sns.distplot(creditcard_df[creditcard_df.columns[i]], kde_kws={'color': 'b', 'lw': 3, 'label': 'KDE' , 'bw' : 1.5}, hist_kws={'color': 'g'})\n  plt.title(creditcard_df.columns[i])\n\nplt.tight_layout()","39b923dd":"correlations = creditcard_df.corr()\nf , ax = plt.subplots(figsize = (20,10))\nsns.heatmap(correlations , annot = True)","bf03f792":"# Let's scale the data first\nscaler = StandardScaler()\ncreditcard_df_scaled = scaler.fit_transform(creditcard_df)","c58bcff7":"creditcard_df_scaled.shape","4325a7b8":"creditcard_df_scaled","ac567ecb":"# Index(['BALANCE', 'BALANCE_FREQUENCY', 'PURCHASES', 'ONEOFF_PURCHASES',\n#       'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'PURCHASES_FREQUENCY',\n#       'ONEOFF_PURCHASES_FREQUENCY', 'PURCHASES_INSTALLMENTS_FREQUENCY',\n#       'CASH_ADVANCE_FREQUENCY', 'CASH_ADVANCE_TRX', 'PURCHASES_TRX',\n#       'CREDIT_LIMIT', 'PAYMENTS', 'MINIMUM_PAYMENTS', 'PRC_FULL_PAYMENT',\n#       'TENURE'], dtype='object')\n\nscores_1 = []\nrange_values = range(1,20)\nfor i in range_values:\n    kmeans = KMeans(n_clusters =i)\n    kmeans.fit(creditcard_df_scaled)\n    \n    scores_1.append(kmeans.inertia_)\nplt.plot(scores_1 , 'bx-')\n\n# From this we can observe that, 4th cluster seems to be forming the elbow of the curve. \n# However, the values does not reduce linearly until 8th cluster. \n# Let's choose the number of clusters to be 7 or 8.","682d840a":"# scores_1 = []\n# range_values = range(1,20)\n# for i in range_values:\n#     kmeans = KMeans(n_clusters =i)\n#     kmeans.fit(creditcard_df_scaled[: , :7])\n    \n#     scores_1.append(kmeans.inertia_)\n# plt.plot(scores_1 , 'bx-')\n","77ebc85e":"kmeans = KMeans(7)\nkmeans.fit(creditcard_df_scaled)\nlabels = kmeans.labels_","c743d195":"kmeans.cluster_centers_.shape","dda4e041":"cluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns = [creditcard_df.columns])\ncluster_centers","559488e4":"# In order to understand what these numbers mean, let's perform inverse transformation\ncluster_centers = scaler.inverse_transform(cluster_centers)\ncluster_centers = pd.DataFrame(data = cluster_centers, columns = [creditcard_df.columns])\ncluster_centers\n\n# First Customers cluster (Transactors): Those are customers who pay least amount of intrerest charges and careful with their money, Cluster with lowest balance ($104) and cash advance ($303), Percentage of full payment = 23%\n# Second customers cluster (revolvers) who use credit card as a loan (most lucrative sector): highest balance ($5000) and cash advance (~$5000), low purchase frequency, high cash advance frequency (0.5), high cash advance transactions (16) and low percentage of full payment (3%)\n# Third customer cluster (VIP\/Prime): high credit limit $16K and highest percentage of full payment, target for increase credit limit and increase spending habits\n# Fourth customer cluster (low tenure): these are customers with low tenure (7 years), low balance \n","3179f82c":"labels.shape # Labels associated to each data point","5a01d210":"labels.max()","a9a720b8":"labels.min()","9d40eda2":"y_kmeans = kmeans.fit_predict(creditcard_df_scaled)\ny_kmeans\n","e387f262":"# concatenate the clusters labels to our original dataframe\ncreditcard_df_cluster = pd.concat([creditcard_df, pd.DataFrame({'cluster':labels})], axis = 1)\ncreditcard_df_cluster.head()","e5ac18e6":"# Plot the histogram of various clusters\nfor i in creditcard_df.columns:\n  plt.figure(figsize = (35, 5))\n  for j in range(7):\n    plt.subplot(1,7,j+1)\n    cluster = creditcard_df_cluster[creditcard_df_cluster['cluster'] == j]\n    cluster[i].hist(bins = 20)\n    plt.title('{}    \\nCluster {} '.format(i,j))\n  \n  plt.show()\n\n","1d420b20":"# Obtain the principal components \npca = PCA(n_components=2)\nprincipal_comp = pca.fit_transform(creditcard_df_scaled)\nprincipal_comp","9b2d8e18":"# Create a dataframe with the two components\npca_df = pd.DataFrame(data = principal_comp, columns =['pca1','pca2'])\npca_df.head()","d8ad7274":"# Concatenate the clusters labels to the dataframe\npca_df = pd.concat([pca_df,pd.DataFrame({'cluster':labels})], axis = 1)\npca_df.head()","d6e02e99":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"pca1\", y=\"pca2\", hue = \"cluster\", data = pca_df, palette =['red','green','blue','pink','yellow','gray','purple'])\nplt.show()","06f1465e":"## FIND THE OPTIMAL NUMBER OF CLUSTERS USING ELBOW METHOD","bed8f3ca":"Obtain the features (row) of the customer who made the maximim \"ONEOFF_PURCHASES\"\n\nObtain the features of the customer who made the maximum cash advance transaction? how many cash advance transactions did that customer make? how often did he\/she pay their bill?","4332c06d":"##### Let's apply describe() and get more statistical insights on our dataframe\nMean balance is $1564           \n\nBalance frequency is frequently updated on average ~0.9\n\nPurchases average is $1000\n\nOne off purchase average is ~$600\n\nAverage purchases frequency is around 0.5\n\naverage ONEOFF_PURCHASES_FREQUENCY, PURCHASES_INSTALLMENTS_FREQUENCY, and CASH_ADVANCE_FREQUENCY are generally low\n\nAverage credit limit ~ 4500\n\nPercent of full payment is 15%\n\nAverage tenure is 11 years","966aa309":"In this project, you have been hired as a data scientist at a bank and you have been provided with extensive data on the bank's customers for the past 6 monthhs.\n\nData include transactions frequency , amount , tenure etc,\n\nThe bank marketing team would like to leverage AI\/ML to launch a targeted marketing ad campaign that is tailored to specific group of customers.\n\nIn order for this campaign to be successful , the bank has divided its customers into at least 3 distinctive groups.\n\nThis porcess is known as \"maketing segmentation\" and it crucial for maximizing marketing campaign conversion rate.","33d6e1c5":"# About The Project","ae27f912":"\nDrop Customer ID column 'CUST_ID' and make sure that the column has been removed from the dataframe","ed65db25":"- The elbow method is a heuristic method of interpretation and validation of consistency within cluster analysis designed to help find the appropriate number of clusters in a dataset. \n- If the line chart looks like an arm, then the \"elbow\" on the arm is the value of k that is the best.","1f9ad9c1":"## VISUALIZE AND EXPLORE DATASET","c1d8772c":"## IMPORT LIBRARIES AND DATASETS","60bf1219":"\nFill out missing elements in the \"CREDIT_LIMIT\" column\nDouble check and make sure that no missing elements are present","488eb79c":"## APPLY K-MEANS METHOD","d9487331":"## APPLY PRINCIPAL COMPONENT ANALYSIS AND VISUALIZE THE RESULTS"}}