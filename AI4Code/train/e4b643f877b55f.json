{"cell_type":{"3772a246":"code","b326e892":"code","00263515":"code","c9b3d6ae":"code","c35fa734":"code","8097eddc":"code","22659c09":"code","8af22d95":"code","88ad9766":"code","0012d2c6":"code","5f1d2127":"code","7ce45eb6":"code","a8457259":"code","b5e8aa03":"code","16f90df3":"code","50171639":"code","15b86b22":"markdown"},"source":{"3772a246":"import os \nimport cv2\nimport keras\nimport warnings\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Dense, LeakyReLU, Reshape, Flatten, Input\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Conv2DTranspose\n\nfrom tensorflow.compat.v1.keras.layers import BatchNormalization\n\n","b326e892":"os.chdir(\"\/\")","00263515":"warnings.filterwarnings('ignore')","c9b3d6ae":"#!rm -rf kaggle\/working\/results ","c35fa734":"os.makedirs('kaggle\/working\/results')\nos.makedirs('kaggle\/working\/results\/generators')\nos.makedirs('kaggle\/working\/results\/pixed_faces')\nos.makedirs('kaggle\/working\/results\/discriminators')","8097eddc":"faces = os.listdir(\"kaggle\/input\/anime-faces\/data\")","22659c09":"len(faces)","8af22d95":"def toThePixL(square):\n  for index, face in enumerate(faces):\n    if face == \"data\":\n        pass\n    else:\n        img = Image.open(\"kaggle\/input\/anime-faces\/data\/\"+ face)\n        img = img.convert(\"RGB\")\n        img = img.resize((64, 64), Image.LANCZOS)\n        ImgW, ImgH = img.size\n        epicAlgorithm(square,ImgW,ImgH,face,img)","88ad9766":"def numOfSquaresFunc(square: int,ImgW,ImgH):\n  numOfSquaresW = round((ImgW \/ square) - 1)\n  numOfSquaresH = round((ImgH \/ square) - 1)\n  return (numOfSquaresW,numOfSquaresH) , square, square\/\/2","0012d2c6":"def epicAlgorithm(square: int,ImgW,ImgH,face,img):\n  pixValues = []\n\n  for j in range(1,numOfSquaresFunc(square,ImgW,ImgH)[0][1]+1):\n\n    for i in range(1,numOfSquaresFunc(square,ImgW,ImgH)[0][0]+1):\n      \n      pixValues.append((img.getpixel((\n            i * numOfSquaresFunc(square,ImgW,ImgH)[1] - numOfSquaresFunc(square,ImgW,ImgH)[2],\n            j * numOfSquaresFunc(square,ImgW,ImgH)[1]- numOfSquaresFunc(square,ImgW,ImgH)[2])),\n            (i * numOfSquaresFunc(square,ImgW,ImgH)[1] - numOfSquaresFunc(square,ImgW,ImgH)[2],\n            j * numOfSquaresFunc(square,ImgW,ImgH)[1] - numOfSquaresFunc(square,ImgW,ImgH)[2])))\n \n  background = 255 * np.ones(shape=[ImgW - numOfSquaresFunc(square,ImgW,ImgH)[1], ImgH - numOfSquaresFunc(square,ImgW,ImgH)[1], 3], dtype=np.uint8)         \n  \n  for pen in range(len(pixValues)):\n    \n    cv2.rectangle(background, pt1=(pixValues[pen][1][0]-numOfSquaresFunc(square,ImgW,ImgH)[2],pixValues[pen][1][1]-numOfSquaresFunc(square,ImgW,ImgH)[2]), \n                  pt2=(pixValues[pen][1][0]+numOfSquaresFunc(square,ImgW,ImgH)[2],pixValues[pen][1][1]+numOfSquaresFunc(square,ImgW,ImgH)[2]), \n                  color=(pixValues[pen][0][0],pixValues[pen][0][1],pixValues[pen][0][2]), thickness=-1)\n  cv2.imwrite(\"kaggle\/working\/results\/pixed_faces\/\"+ face, cv2.cvtColor(background, cv2.COLOR_RGB2BGR,background))","5f1d2127":"toThePixL(4)","7ce45eb6":"images = []\ndef load_images(size=(64,64)):\n  pixed_faces =  os.listdir(\"kaggle\/working\/results\/pixed_faces\")\n  images_Path = \"kaggle\/working\/results\/pixed_faces\"\n  for i in pixed_faces:\n    try:\n      image = cv2.imread(f\"{images_Path}\/{i}\")\n      image = cv2.resize(image,size)\n      images.append(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    except:\n      pass","a8457259":"load_images()","b5e8aa03":"len(images)","16f90df3":"class GAN():\n    def __init__(self):\n        self.img_shape = (64, 64, 3)\n        \n        self.noise_size = 100\n\n        optimizer = Adam(0.0002,0.5)\n\n        self.discriminator = self.build_discriminator()\n        self.discriminator.compile(loss='binary_crossentropy', \n                                   optimizer=optimizer,\n                                   metrics=['accuracy'])\n\n        self.generator = self.build_generator()\n        self.generator.compile(loss='binary_crossentropy', optimizer=optimizer)\n        \n        self.combined = Sequential()\n        self.combined.add(self.generator)\n        self.combined.add(self.discriminator)\n        \n        self.discriminator.trainable = False\n        \n        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n        \n        self.combined.summary()\n        \n    def build_generator(self):\n        epsilon = 0.00001\n        noise_shape = (self.noise_size,)\n        \n        model = Sequential()\n        \n        model.add(Dense(4*4*512, activation='linear', input_shape=noise_shape))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Reshape((4, 4, 512)))\n        \n        model.add(Conv2DTranspose(512, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(256, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(128, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(64, kernel_size=[4,4], strides=[2,2], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n        model.add(BatchNormalization(momentum=0.9, epsilon=epsilon))\n        model.add(LeakyReLU(alpha=0.2))\n        \n        model.add(Conv2DTranspose(3, kernel_size=[4,4], strides=[1,1], padding=\"same\",\n                                  kernel_initializer= keras.initializers.TruncatedNormal(stddev=0.02)))\n\n        model.add(Activation(\"tanh\"))\n        \n        model.summary()\n\n        noise = Input(shape=noise_shape)\n        img = model(noise)\n\n        return Model(noise, img)\n\n    def build_discriminator(self):\n\n        model = Sequential()\n\n        model.add(Conv2D(128, (3,3), padding='same', input_shape=self.img_shape))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(MaxPooling2D(pool_size=(3,3)))\n        model.add(Dropout(0.2))\n\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(Conv2D(128, (3,3), padding='same'))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(BatchNormalization())\n        model.add(MaxPooling2D(pool_size=(3,3)))\n        model.add(Dropout(0.3))\n\n        model.add(Flatten())\n        model.add(Dense(128))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dense(128))\n        model.add(LeakyReLU(alpha=0.2))\n        model.add(Dense(1, activation='sigmoid'))\n        \n        model.summary()\n        \n        img = Input(shape=self.img_shape)\n        validity = model(img)\n\n        return Model(img, validity)\n\n    def train(self, epochs, batch_size=128, metrics_update=50, save_images=100, save_model=2000):\n\n        X_train = np.array(images)\n        X_train = (X_train.astype(np.float32) - 127.5) \/ 127.5\n\n        half_batch = int(batch_size \/ 2)\n        \n        mean_d_loss=[0,0]\n        mean_g_loss=0\n\n        for epoch in range(epochs):\n            idx = np.random.randint(0, X_train.shape[0], half_batch)\n            imgs = X_train[idx]\n\n            noise = np.random.normal(0, 1, (half_batch, self.noise_size))\n            gen_imgs = self.generator.predict(noise)\n\n\n            \n\n            d_loss = 0.5 * np.add(self.discriminator.train_on_batch(imgs, np.ones((half_batch, 1))),\n                                  self.discriminator.train_on_batch(gen_imgs, np.zeros((half_batch, 1))))\n\n\n            noise = np.random.normal(0, 1, (batch_size, self.noise_size))\n\n            valid_y = np.array([1] * batch_size)\n            g_loss = self.combined.train_on_batch(noise, valid_y)\n            \n            mean_d_loss[0] += d_loss[0]\n            mean_d_loss[1] += d_loss[1]\n            mean_g_loss += g_loss\n            \n\n            if epoch % metrics_update == 0:\n                print (\"%d [Discriminator loss: %f, acc.: %.2f%%] [Generator loss: %f]\" % (epoch, mean_d_loss[0]\/metrics_update, 100*mean_d_loss[1]\/metrics_update, mean_g_loss\/metrics_update))\n                mean_d_loss=[0,0]\n                mean_g_loss=0\n            \n            if epoch % save_images == 0:\n                self.save_images(epoch)\n            \n\n            if epoch % save_model == 0:\n                self.generator.save(\"kaggle\/working\/results\/generators\/generator_%d\" % epoch)\n                self.discriminator.save(\"kaggle\/working\/results\/discriminators\/discriminator_%d\" % epoch)\n\n\n    def save_images(self, epoch):\n        noise = np.random.normal(0, 1, (25, self.noise_size))\n        gen_imgs = self.generator.predict(noise)\n        \n\n        gen_imgs = 0.5 * gen_imgs + 0.5\n\n        fig, axs = plt.subplots(5,5, figsize = (8,8))\n\n        for i in range(5):\n            for j in range(5):\n                axs[i,j].imshow(gen_imgs[5*i+j])\n                axs[i,j].axis('off')\n\n        plt.show()\n        \n        fig.savefig(\"kaggle\/working\/results\/pandaS_%d.png\" % epoch)\n        plt.close()","50171639":"gan=GAN()\ngan.train(epochs=15001, batch_size=256, metrics_update=200, save_images=1000, save_model=15000)","15b86b22":"\n![lol - Kopya.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQAAAABkCAYAAABpYO6eAAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACHDwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZEsRAUVLAHJAgoMRhFVCxvRtaLrqy89\/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTsAIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB\/+fpFnpfIHomAARm7M5GSwRF4g4JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8\/hcxMSBXQdli7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu\/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtFehn4uWcQrf+L7a\/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGXwzISF\/QP\/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H\/nUeBkGceA6fwxNFhImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd\/6NvvvgwIH554SqTi3P\/7zf9Z8Gl4iWDm\/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG\/iDEBAJVgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyCqbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiEj6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhGfDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFpB+kQ6RzpLuklmUzWIjuSo8gC8g5yM\/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJyeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJCYVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQlnyfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p\/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48vvacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq\/CVSlXOavylC5Ld6Kn0CvpvfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15LWytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AAbWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM\/5oYmGSYtJoct9UxtTbNN+02\/R3Mz0zllmN2S1zsrm7+QbzLvMXy\/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHWztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o\/Z0+1j7A\/ajDqoOTIcGh8eO6o5sxybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6eO7yHPFS8mJ5NXvNelt5r\/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP\/L38d\/s\/DNAOWBPwYyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmRXVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z\/RnNjDn4rziauNmWS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT\/ZMPJX9KCU9pS8Wlxqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy\/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT\/LL8V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33zaEb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7\/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2vTqy+XeNc01arWLu9dn4fe9\/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqbPhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+\/3wcZ\/jPScYJ1p\/0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h\/HhPTM\/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W\/S3\/2TxU\/uA5UDHdavrXTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW\/h\/sYH6AdFD6UeVjxSfNTws+7PbaOWo6fHXMf6Hwc\/vj\/OGn\/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+tfa5zvMffnP8rX82YnbiBf\/Fp99LXsq\/PPRq2aueuYC5R69TXy\/MF72Rf3P4LeNt37vwd5MLWe+x7ys\/6H7o\/ujz8cGn1E+f\/gUDmPP8usTo0wAAAAlwSFlzAAAOwwAADsMBx2+oZAAAOmRJREFUeF7tvQdYFNnWtt1NR5pozgkjZgXFjOQsYAYDIiIKCogijUhUzFlUTEjOOUvOTUYxYMYcRh2zSHz+3U6f+c77zTvnjMCo3\/x1X9e6quleVdUi69nPqrCLRkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQfEj4UywGyyzslSl18Y6lW6WpSoyq\/NUZFYmq9CU7AaLUigoKP6JcGd5z2QbJr2QWVeHXvb30MPmEnqtK0Ffq2z0XnjmRZdZ9jNFqRQUFP80eDp+CVyzSnBWlUDKQoBeFrkYtTYF09ZHQ9MmBLOMtiSIUikoKP5piC+ML2Cb5ELcNBfdzPIgb5kKjfWRMLPxxdYN3uCb2RSIUikoKP5psBcm5\/JM8yFrlo\/BFvmYtT4ZplbnsdXCFSct1iBwuUGuKJWCguKfBnd5Vq7UmjJIrSpEr5VZUDSPweKVR7FtmT2CV5kgxWQ2JQAUFP9U2Gb5eRJWNWCZFUB8cSpGLI2A9pIjsFuyGcEWq3FxtU6eKJWCguKfBts8q4hpVQ2GRTGkLIowyCwZSiZnsWz5LhxYx4ev+bIiUSoFBcU\/DcaSwMN0m1owSEjbX0Wv9UUYtToBGmuDYGXjg9XzVx0WpVJQUPzjUHCSYSyP82euyb\/BWp78oOvy+PuDV4Y9mLTS\/8achd7+cuprZUSZFBQU\/1S6dFGQoQ1S7i0xRLVXj9G6vWly5GcKCgoKCgoKCgoKCgoKCgoKCgoKCgqK\/9\/CXHpeiWNfocky9JkoeuuPyC0aSDMI1Kbp+RszdAKNGNr+xuzFqbo8zWMTRBnfFfFhxv17zfNX6bciQ3fQ0njjPvOjjbrphxtJku\/GVj1jTNMINKAZRKjSZnkKbwPm\/LbWd6J\/f\/F+uy3mDvBeNpv8JPbbm50Czylp5lzHqDnC7dJ\/e+vvQVNTumty+OA5dwVDNGqz+hjdLhhk9LBSnsQEo3oSNYWjjK9XjNLIyhqjsnPnoD\/\/u+kkcs53VXpV1Ecz+KDsONFb\/5EYvviUpxektW+eETe+fVrc6PZpttHNUzTj1yE0rfKDNGWHJbQBotTvwkn+cLln8VNV3kUM17tzRMb4tjfb6IY72+j2dkmj247djG479DS6advH+DF\/iH7z0akq5c4TlXcZ9R0hWv3vg7E40Ju1vhBM+8tgr8trZC0KsBR99DvSJkFW0usyn0nYVYJpUQza\/FTQDVLAWVoEadPcL+x5Eadp\/Rd2FaX\/7fRccH55r+UpTwauLsQw6xqMsr6EYWurMNiiHN1N88E2Jt+PfEfWslyIr8wA1zQ6l6bk3Eu0+t+LvnL37rstcuQCN0E+xB7yPisT5Rapd\/hUpIHLiCHbUpWKDtdq4MQNbezNVY4xc1fmij7uTMTS00duvlE79vbLm+PQcE8e764NxNtrA9BUPwp4roCmJwp4cXM06i8PR13tOBQUjWuKSxuR4xs4Wlu0jc6Enu3D2fsqpweaK\/rgbmK3hpRjUitFn\/2BQDtxpVuHxNOe+Iq3tYZz0RLFIsFEcwQLrZEsIJaJj+EsPL\/Aelp3hOfju4zXR7Tq30bpzq72j\/wGvmqMJ7+\/mAFAUHe0npYBjncBjvYD9g0Bdg1Di8cIYOd48r4Kmo9p4KnnzDeXN01ODjcdpy7aVCej7iXPNc9o5m4ghW1ZCNbGGrAt0l\/QVDf1E2XQe9ukHx3gfR8Dj71Cn733IMsnQmGWBbpeNBi6CeCYFEDcvBrcpSmXmMruiqL1\/jZkZvHl+q5KeydnfxVDbSox3Loco9ZXQJ68Hm1bg6Hry9HLIh9dLPPQw64cPZ2ukO98DawFx3eLNvG30s3d9NiAYEcMD7LD+MhNmJK8CWMOL44nHzF+y\/h2+ij04blmThecu6uKU9fmIIAsY3\/Rws5YRUdRSqdg7T5asrZ6cvSHX6ei+e0UtL2ajuYnU\/Fr3RjcLemPh5XD8Mv1cXhcOwbXiwejJm8A6iqJENxWwP2HU3Djnkprdr6yp2hznUKQu+ToJ9FSLS25snifIosvF2VwzU\/y0TpjWk9Ryu8Ue4iZ\/3KS9QHBbDSfZ+LzGToaztHw6TwNH86I4+M5KXy+IIWWYFJ8UbJAdBc8Pdr1doiF9FTRJjqdVNue4x8f7oPPp3vi9bFe5DsMQmvwaLScHYHmw0PxZddofHIdh2av6WhwnYUGFxU0eekBh5aiydMQH7ZqotZSqTXUeGin\/l6\/Ir44zkBmXSVk15VBan0pWFbF4G0shdSKkOnCz6XWJZ3rsfcJZHffhfS+O5Deews99txFV+caiC2KB00lADS9GEisLkJXx5uQ3Vj4WmpFgO7Xjf9NdFscrNLPsgiD1gkwaL0A\/SwK0Nc8D8M2VGDUpkuQ33oFI12uY4jbNfR1rUUXlxrIbK+BpFVEjmgTfx+kUEf4214fGb4Zw\/zWYVTAGoz2Xwl5P1OM8NR3EGV9MxtDxx45c2MWLtQpI\/DmHFyoVUTA5bE4kiqXL0rpMKamtC5XKuSz2z7MwMfnU\/Hx2VS0vpoJ\/DoHzc9m4VndJDy8MgH3Lo1FnWA4LucOxOX8gbhRMRL11ybg4V0lPH88Ey+fzUHexclnySaZv225Y9zzF5+HNEl8iiYFHMHDp3AJvPTnIdWdO0uU8pUKD5rL5zMM4AIZ7U8RATgpXIqhxZeGZl8mGk9Ko\/FUdzSf7Y6W879F65keJL8Pnu3t+cB3pfRQ0aY6lVr+kGXNR0fg9V7iog4NQWugAhA+B00nJuOD5yi83T4R75ymk0JXw0dHbXxw0Mc7e0M0u6zCa5slqF9phHvmuqi3U0Xuxpneos12DuLapzfJripFl1XEylsUQWxlNji2VZCwyZ0raZN8XHL3A0jsugO6Ry1oOy6D7l0L2f230XvnDUhbF4Jnkgz24kRwzXPQa9tl9N7zENLOlV9YFhHLRbvodHrND1bpv6YQfcgo32t1LnqszkbvNXmQs6+A3KYqyDldwnCvmxhIvqOMazWYzgKw3Uoh4ZTyt98N2HXqMOkR\/ja3B\/uvRZ\/jSzDszDKMubAC4wLMoOhv+Wms47xvdki2Z0bpn6ia0nqhbgb8r0yH\/+XJOFMyHH5F\/XEmrV+xKK1DOG+U7HG9fGR+0y8T8PbhJLx\/rICPjxTw4aECPj2Zgobns\/Hi\/hzcvaaE2tLRuFQwlDiA4bhXPRZPrk\/CyztT8eq+Eh7VjcOL2xOJc1DG9cIpUQsX9hcX7aLdFO2gObSE0vElkIOmQAk0B0gRCy2JD74SKqIU2iUPzt42PzZwXgJtp3ho85EmNloYJNeHA5yQIEGK3acv2o73\/hqtR0kc6ovmA\/2BY4NQt7VPmnInida\/c9l2nGnbbkW89hyBl57D8PHQBHw5Mg3v3SfiF4fxeGE\/Db\/YKuPJGhW8XKeHXywN8XzVfHzeaIVXFpZ4uHQNHq60wAuHZXiz2wgF\/Fkmok13HDHlw86c+VngLbgI8aVZYK3IAY\/0+dL2BdWSO25Bglh+qYMPwDp4D\/T9daDvvgrxXdfRa+dtyHnfxehd9RjgeAncNVnoTkbaXt514JHiY\/Ir2sRWh3WqPf0XstM3DxqwPOnVQNtL6LehFIM3EfvvXIuxbnUYsf0Khmy\/ioGeV9Hd8xI4buWguRVDzKsEzG3J32U+gN57lgQPDLTAQF9S\/P7mmBK+HlPDN2BmwjYont1Q1UdBgSdK\/a8Y23fvc6hg3MOYB3MReHUWTpSMw7GsQfArHIycOxNwPmHEPlFqu3HfNLrr4+tTCvFmKt7UEwG4PxGfnk7Fp2fT8O6hIt49moLXj2fg2nUFlJeNg6BwBGpKRuB+7US8rp9O8ubgMxGIjyT\/1d1xeEe+F57PAF7ORF3y0JSFC2kdEoESN5pzqz8DX87yyIgtjTbfrsBpWbSdkJoh\/PzyVt4pnCKW\/mRXtB3tiZbDvdFCirp1fz+07esD7O8OHOxJLDXptfcPQPOe\/viysx8avAbgi+cQNHoOR6vXGDR5jEPGikHzv+60E4ldMkn+0abpTU1uU\/DMYSSebZbHW+dpaHTXwpfthnizUQ\/PzHXweLkB3lquxLPlJniydBk+WTngnbkT7hvb4d5Ca9w1N8Grbfp4vGfuk5Pr5P7Q\/rSP6fv4dJ1E0LXjwJ6fBhlLAbo5XoGEyw0wnGrA9LwGySMPIe7ziAjADdBJG8AhLYCs5w30db8FOc876G1fCo55GmQdy9CFOAX29iqwiP3mupJYFX1ItKdOpY\/RKcNBay\/eGra5HGM9b2MScSqT9j3E2AMPMHTPHXT3qIG4eykYXmXEuQgg5l0Mtmf6dxGArlazRg89vfrdhFh7TIkihR9jB+VEZ8xO9IZSqjfk9q86Jkr9b9Dd4gbHBN6aiLDrM3GiaDz2pAyAT\/og5Nyegvw65fv7T07v0B+CggKNdbV8UjI+zyajvSLe1k\/Ch8dT8eXFbHx5OQctb2fhy2ti7YkIlFeNRlGpPCqqxuLWNTJy3Z+Kzy+mofWNEppeKxDhGIN39+Tx+e5oNN0iBVU7EqgahKpz3fzJrtp9xqLYmclv8eXg42FJNB7sjrYDpKgP9MZz125qV2xkz0D48\/6BwG45tHiPQKP3OFLck9DoNRHYNQnwHgPsGEWWJHaMADxGocVlJN45jiKWeyIa+dPR7KyMNv4c1JqNSxfttlPJXKS4+qaV0oOH65XwcuNsvLfTAVxXk9iARhsrfFi9Fq+XWaBhtT1eLVqLdyYbALvdaN14EPXztuKGvg1umJjgro0GET9NVHqO3yLadAeZsodPU40BTS0SLKMU0gaUoMumGnCInabZCkDjV4O75xYkjxIR8H0BtkfZE4592hoJhxw1iZURi3mm4RXi5pmgL4iA+Prsr722lPtlIiBXIbm9DrLOtyC9IvY02VNnngr7isy4WV0Gr\/SfI+9crCbvWkaiSm2EZ5Vab\/v4hZL87GdML\/L9d5aAtou0NrsKiJilfrcZgQbvWGQ5LsIWihEbMZ0IwGwiALOS92Bi3A4MPGfdJrtFy1CU+qc4R42yOXdlPM5WyONU4SgcviiH0znyyLgxE5WPNVtCUmd0+FhLbqr8+qY300nPP41YfqWvhf\/x2Qx8eDYbeK+MW5cm16clDPcsL5FXT0yUU4tLHKGWkSOvVlY8Tu1a2SS1u7Xj1PNShznVlQ659eXhEHy6MxzNt0ei8dJgfCzsjc9Z3fE2Tgax2xg6ol1+M4X2bH7TQSm88+yBz56D0ewhh2b+IDxe2\/sWHEnhOw9Hm\/NE8h5pVZxm4KOTCj47auILieuW0wqvW001eW47Xe257RS1NyRKl4\/fcst8yo2GjWp4b6ONz7bGxG4vxFsrA9xcrvbSacLIv2UKebPRo3tnLpg598ZqfbUbyxao3V+9msRatTvLbEk4qF3Tt1a7Y2irdl3TQiNDdZndNVOHxHdWe1ofGG3FNb11uLZ4KR7Y6hIBII7hsELntLNi0w\/w6ZrxYBAHwF14ERJm+ZC0LgPXrgJi9sQ+byWjued18I69AG\/XpYc88\/\/rnP\/IeVKSCwKSGYuTQDdNhPjGQsg4X4KMUy0kN9egi8MVSK27DIaWb+cfwfxzeFyntLvMXeT7exeBtjsftL2FoHmkfNcpweT2mAQqRDuQFmADFCPtMCl6G0aFb0X\/AGv0Przscd8ls\/\/0PLTDScVJZ6unfgi\/pYiQSxMQUDoGcZemoLBeA7c\/GSO+aO4uUWq70dfvw7tbO+mKUAA+PJ+O90+nkRFdGa8fTMGv9ycTmz8xadu27n\/pFJm7Na\/37YK++XgyFLg5FM1V\/fE5pwveJ0mhMY6DSwdoKaLUb6ZwgzS\/1bsf3vKH4d2WcXhrPQLPTPri9cKeeL2gH96YyOHdyol4T3roXy11SSwgPfQCZBqoHCGrs37byv\/EfYLS4PqlCx+9X7kKv5L++lczC\/yyygz3zEwQq6\/+Pw4u\/kiKDddvebbMCdcNV6PayBBPNhmTVscIb47Pum9r0LPjp7W5Ksf4LOMMcBakQ9w0GzzzQkjY\/CYADAcS\/Bpwve+B41rxK23h4a9nBv7AIGUuU9s3mrYoGfSVF8FcmwfW2gKwrUpI8ZeSbZaCbZTSwpzi+b+v39lMWdSbyU+pZ+wuBX03Kfy9+aR9IS5g58XvKgBd1BVkJp5ee2VWkgOmRW\/AuLD1kI+0JiKwAaMi7SG3z1Q4TfkfnJGy8iDugZwZ5cF1vxV\/2r1pKHo8F9de6eFpoyFya+Zkk7T\/9Q\/7W0gMHzHl6a0pbR9\/IcVPRv3XD5Xwyz0F1NeObksJH3KUpHzTPtzNZGQfZffOwJV+aC7ois\/pkmhIkERrvDhenGe9cF\/EHShK\/SbKrAfwsWMyPm+eg7dr5+DR\/HG4Prsvrih2w+3pffFAeRgea0zCqwXaxDovw9PFq5Csor9dtPqfkqWyxP\/NfAc8nW+HxwtscH+xBe6vWIGaJYZzRSk\/nBkju0k9td58977pKtQsNMBLp+VoPrwQLw6rfTprMXa8KK39cNV9+KxFWWAvzYD4yjyIrykCx4YU7KYKsLdWg+N+ExynsgaG+fn\/diECi6F1Moi9qgB0syzQTNOJGORAaq0A3awqIGtWBaaGX7Qo9+9lim5vOj+pnr6nGPS95PvsK4DY\/kKwdn6fYwD\/zqit2tNmhFo1zE2xxpRoMyglWWJuphNmJDlD3n8d+m3Vthel\/o5TxPTDpy\/P+Gr7Q4n9z72vhNqXynj0Xg3VddOf79g3oFNOV9XXKuk2v57xdeR\/80QJz+5Oxos745GdODRZlPLNrJ5Bk3qWIHWtLYuHxgQumuMlgAQpfAiRwkVXbrsezFK5djwf27Twaa0RXi6chzvK01EzdjgujxiEm2R5Z9IY3FOcgnfa8\/GLoXlbrsrSjaJV\/yPpM8zd3hl64tk8Vzw2dMRto7V4uW4d3jhZ\/TQCIOTx5g0ZrzasQb2lCRp2WqNxnwnu79RoDbdUnCJKaT9M9WN8+kLSwy+5CK5FIdjrisGwLQVzSxU4bjfAcaluYq8J\/q\/9qggxrnHgKe6aUrBWF4FnWYJu66vRc30NulpUgGMY84Q2atnfftWVUABo\/HgiAGTUJ6M\/Yy9xJHtzIeYZ\/90FQMiUQ8YbdS6uhWb6cqinrYROtj3mJDhgxDlzyB1Y8Ln\/+jm\/\/0cuPqRosKdQrfXCJWVEXJ6KlOuTUEEK9HGDKm4+mtrmHyRnLErtMKXpozc0PlHAyzsTSOGPw\/Pb47+eAShKlu\/QKdyiA6zDuMhBK7H+bXFcQCgCcVJ4dEqiXYVVuGQKv9HKGC8WLMMDtaW4NlENFXITUT1IHjeHj8Wd0RPwZMJ03J9l0Jw\/w3CVaLX\/SsFcO4fPRofw0nAXnhi74sESOzS7ueDDQdffTy\/+DNRYr0pocbXHW0dLNHlvICJggjoHFVxYNm6aKKX9MIkDoJtkQ2x5FrHuhRCzEUDMoRxMl2tgu15uZa2P+uY\/Bu7i0OOS1jWQWV8F2XWVkLQQQMKsCBKLk8Gc8R3aAKEAbEuoFyN9P3NPLti7s8H2zgDdOfiHCACBruW\/INy0chWMsk1hkGUF9aSNUApbB+UEO2gEWVYT489Ushjba13s3IcHqzQRfFUd8ddnIOmSPPJujiCj\/1RkFow5INpep1AUN3xby6NJ+PX2OLwm8eGBApqeKuLD7QkdGgEFB8WckMoihc\/+etkt4sjrRHE0R3Hatd3sedP575avwHMDOzxS3YibE5eiapAyavpPwq1hk\/CSFP+tSTMb0iZOXyRa5S9RqczX\/2xwBK\/09uCRgTseLXHAo40bkGK1+Kd6hFyJxYrIVvct+OC0Bh+dV+AdfyGqzGfCT3fM19OgHYKtf5bPsigCy4KMlFZFoG8kAuBUDabHdTBtYpxEad+KGGdFWiXbqhIcUvicFXngkuCtzAXTKEBZlPP3IRSA7b8JAGdXDtg7M8DxSIXYFv8fJQC0KTajui1KnX9zWdly6BMXoJ1gBc0Ee+gkbYJRhi2Uj+qdMAnUiHAs0sTu4tm4cGk24q5MRdqV0ah4NAoXS0YWjh5NY4s21ylUJo7i47kimu5PRiOJ5sdTgWfk53sTO\/R\/VLGX5oQEMVL8DCBGDK0kEEciiNEuAcidp8v\/sMwWT3Vc8FTFFfWK1rgsp4uqfgp4MFwBV8ZO\/hA\/aoKeKP0vc2DMkgG3lD1fNer64IXeXrw28UChscn9tQojuotSfgoumpgHfnbio9HFCl9cVuCT61LcttFGpJFSxw9Wcued57OsSknxF4JuVQCaHXntdh0s+4sdOs0gvjTwIG\/jZXDMSVthmgOmSQ7ELUohYZH79\/dXwmMAron1jP0FZOTPAsszDRz3JNLW\/DgBEKK8Z+YswzidRuVwbSie0cWMABOoRJhBM2YZTNJNYFuwAPxcFXjnTcWp4klIrpuOuo\/aqHo459WxC2NHiTbTaZRFD+Lj\/li03hqLZuIAWu5NAJ5MIq876AC8aXzE0tEWRUNbBA0tZIkYOpov0NrnAHSN+K8XbEG9igeequ7D87meuDvZAvfl56F82PSXfnIjVEWp30yO0qYFd+bufnhT0xuXdLc+DlZZ0OkXAp2e6DolXGmfZ4KST3Le7ICswpn+WZVagVkVun5Z1cb+WQ+tUrJuLo\/OKtI9kVWocygrV8Mjq0jHPUug55JVors1q3LhtuePLbfh3WYbfHZehUa31fjkbomqtYvniHbRfpiLzvOFp\/uYdkVgbCIOYDNxAB5XIGYd8Yc7Ar8F7hI\/J3G7CrBW50HMJAMM0zxIbrgKGbsr30UAGK7x9ez9pPfflQ6GRyJYHnFg\/7gW4Hc0j87cYpioA7VQLWhGGWF+uilW5ZvDtnQ5XMsXYEeBKo6XzERghRLSbs1E6VMNBKfPWCJavVPJPy3Jb63ui9bLQ9FcMwSN1YMB0m601Y3t0A1d+TuZ9khkoy2GibZoJlqj6EBk+wUgXWU+\/5XxNtxTI1Zd3QdP1A\/jyWxPXFZYe\/fkMPUO98GWA7X6nJ1gNtOqv+q\/boDrFGzlVgyMm+oTlj3Lv7VGNRk1aumoUk9DmWoCqnUSUGEQheoFUbizOhW3Vibh2tIo1M4PQanWSVTqnMAlfR9U6x5GpcF+VBq64brJJjxYswHvnLag1csN9zZt7LibFltxns9wIYXqVAyGE3EBjnmguZaRKOnYxhcddhLbkAu6eTpopqlgrCoCb9MdSNjVfRcBYG+PrefszQZzZzIRtFgwPGPBdg3\/4QJAEFsSrhlrUb4IS7MNYZa\/ADYlS+AomI+9NUY4Vq6OsFpNZN7VQ\/EzLZxLnXxctF6nk3uIyW8r7ILWigH4UtALDfk9gcoBaCvqt+lNNEflkT9N5dk5hsobsnx5jrz2JUt\/8jP5rCFdRqU5S0alLV1CpS2ZRDSJcMbX5YNzEmeRJIW2OEli\/XlABGkFQmhoPttOAVCez39t7I57WgeICPji1pxjuD\/zMIoUt88Tpfx0bBtuPTF+xvnbFeopyFWJRcbcWGRrJiJTMx7pGjFIVY9EsnYoUvWCkT7PHznzgyFYEokio2DkaF5Atup55Gv4oUTbD4XaZ1CgeQwC\/f2oXuSNeqvdeG3rjVuWjh0XAPbaAD53RxUpDjL687NB25pJir+4wwLANDvGZ23JgdjqFNCWkf7boghch1vgfCcHwN4eXc\/ZnQGWVzyY7pFgkiXLI\/pnEACaku3YXqbJOrfMSwxhclETK9PV4Fw6Dwdq9HG8bC5CalRQ8FgPSVVqxcJrAkSrdTq5B4gA5EmjlRT+x4vS+JAhi+b8XkBJb7RelMC7SBreBtHwmRRvQ6gYPgXT0UhG9LZ0cSBfGiiUArLJ61ThkX6yjOEACaTgEySAaLKMIRHFQ1swE7hAHMCp9h0DEArAS+PtqNc5SETgHO6oncYjZV88mXvqpzpY9y9sRq7umzD73M1yzXRkqycgWyMRWRqpyNRJxUWdFKRoJyJBOx5xOjEkwhCvG4AkvQCkG4YiWz8MubqRyNGKQpZ6GHLUgpGrGYwCnRAU6QcgX\/c4Sgz34tJ8Lwj0nDpeS5K2IXyZg7WQ8BaAu6OQFEk+xHaUguZe2KGNS1qf5Eu45ULMMhG0lSlgWZUQAbjx3QRA3CWynrsrFRxi\/TluMeTflgjezoSfQgCEaOyaoWmeY9RmmqmNxfHT4VSiC68SVewrnIZzZVMRXjr941avkX9p5pv2krlPjN+cTUbpQjL6Z8ni12RxfEqXQUtuT7Rk98DneCm8C2HhYyATjeE8NJBi\/hzDxecEFj6nstGYykFrAolIcbQGk2IPI6IQTUQhlmxTWPwk2iIk0OZHBOIkB83723cWIF9\/Gf\/Tck\/c192H+1qn8UDjLJ6pniUicPzv\/1v6dsSCph0PL9NKR45GEnK1UpCtnYYs7XSkaaWS4k9BonYyYnXiEa0dhUitMESQET9S4wJitYOQrBuODJ1YZGkl4KJmDC6qRyBDMxy5OlHI0Q8n7uEsMtSPo0j7COJnu37zgc8\/0GVLGL+7z1VI7y+FzIFSSO4TgLW\/Eowdgg79crvZn+XL7CRiYpMIulUa2LalYG++TASg4rsIANclop6zM4UUfxx4rjGQ9E6B9K7veynwf0LvhJKHVbFxm2WeHpbGTYFdzhw450zD3kIlnCyehLByhcaTMRPXiNL\/Fgp9eHwUdfsqAM05PfAloysa0rugObM7kNcPyOpDbDxxCKFctIZLoi2+KxqJrf8QS8eneDpaiBD8NtrLkuLvAoSTbUWTiBOKAHk\/kohAkDRaTpB2YG83fHDv167\/++L5ZvyGVTtwT2c36tVP4oHaGTxTO0cE4NRPJwAHJ7tPS1ONQK4GKXxh8ZOizyAhLP5kTTL661xEmsFFJBumIcEgGfH6CYjVi0K8TiRSDGKQrhePLJ1k5OulI1+fOAjdJLJuNFI1w5CuE44U9SAiDEEQGEQiUvngUtFu208XB6EAXIHMwVJIHxJAgogA+1AVGLs7LgDSOwsg5kDs\/6ZMcLaUgLm1GozvJQDbiAB4pYLrGguJ7TGQ9k6H7K7vdzPQf0Lda9y8ZYmzW2yKDLCxSB8rExVhk64Ej5LZOHlJFedrZiCxbgYuXpnzeb+vvJJotU6n7GwXPgR9SLETy59DrD+Jj6R3fxNJRnky+rckdUFrDHEEwVw0BQqn1iI\/xxGBSJQkxU9G\/hgmWsI4aAmSQGugNNoCZdAWTpbRZNSP4JKfeWj1lUHjnm5469QfJSuGtautzNSez39m6IBb6p64p0r6fxVf4gDOo\/4nFIAz0w6dKNJNJyN4Min+ZNLzJ5ERPAE5xAEEKwfBb27A1VCtiJxQ7bCcEJ2wnCCdUBJBOWHaQTkxeiE5kepBOZEqITnRaqGCWK2wl8VGGUQQEhGvGookzRAkaQQTMYhEkV4y\/Gcf7fgAIWwBuhyrJQJQBu7eIrD3FIN5oBLMvR07BsBbd5rPds2D2JZ0cJzySBSB4VhBBKBjwvKXEAqAMxEAjxSwXYgAuCZAZtdFSHr9+BZg9uYRQ8wTlJ+uy1OBTa4m7Iu0sSF7FhzzZ2F3lQp8r6gi+NpsXLyjhksvtZBaNLl22bKu0qLVO5VioQPI7YrWrB6k+HujMUUGL0mv\/\/AcDS\/8aKTnZ6I5RJwUOLHvgeJoCpVFWyzJTRSO9BJoCmDg4wk63h+h4+NRMTScJIIQwCZugAMEk7bgNGkJjvT8epvuQ+tR73xUBg8S7fqbSJyty7+rtg63VV1Rr3IY95VP4flPKgAxcwMLCkifn62TRKx\/ArH+8UQIEhA62y\/HcZyjcCJXid8y\/zsrhy0ZGjDnhFuGZkxzilAASJuQokkEQD0cOWrxOKV4wE6U2n641kF86UPXSAtQDbY3sf+7SByoAcO7tEOXQ4qt9HWiO+SQ0T8D4s4FYG0lYuAoAGNzx44t\/BV4XwUgqp7tngq2M2kB3JK\/OgCx7SE\/WgCYK6NnZTjW6GJTsRbs8ufCoUAFXpf0ceT2PHgIFOGRORK+xRORdUcdgrsqKL86ASFhQ4T303c6hYe4\/JYU0tcnSKI5tQs+x0ngfRgbDZGkv49ioU04gWY4KegQBloCmfgSQESAjPYIEgf8yOenxNB2jI42HxpafehoOk4DLjCAKEkiAl2Bs8L79OXw2nnsr5fMJ64X7fabSVdfxH+q74C7ai64p7IbD1SO4RVpAZ6p\/VwCML7XeImEuSFX8rRJ76+biFy9JOTrJiNBNeQX08Gm7RI\/IaEzjmcVakQijbQ+WToByBIeEyAC4KO4e5sopf2w14bwebuvg+ddDaYXGaG9ysE+eJ306hHt\/g8TIrbknJOYQwkp+Hxw+YVgOeaBTtqA7yEAwrsB2Vuj6sW2J4FBBEDCM5X0\/6lgugb8UAFY6jfVy75cDfYlqnAUqMEhfya25E7H3mua2Fup9corf8q7HTnDcSB9MEIF45FUOg5ZBcMhyB8K\/+N9Ov14QP4eJr8hSgxvyaj\/OYr3tb9vS5RCU6yUQ0OUhNqHMI7ahyCG2gdfmtpzH5ra4yNkeYSj9vwAQ+3lXvI+iQZhkPcbjjDU3uz9bdl2QYZET7XmIwPVbtjLqR5Rlxsu2mW7yNRcxH+72BGPDVzw3GAPnusdwVvdsz+dAOj20O0dPce\/PkcrDhnascjUjSd9vPDAX3SBKKVdXFDw3lqpEU36\/iBcWhSLMoMElJDWwnfq\/p2ilPbDNgvhc92ug+1WA7ZnLcTca8DcVQeOQ3K7798Wwljsf5DteAkcx1LwnErA3VoM+uZC0Owyv4sAMB2j6mnO8aDzY8D1TILEnjiI7\/L7YQKguW+K9roc1WY7wRxsKiKFX0wifyr4BZOxvUCx1fLEGE2n0EmrDxWPwfmysYitmow0wQQUFI5BdclwlCb3\/+Dr3n2yaHOdQu4OGr8hlIb3wWL4Qvr+phgycgvP38fLTBKl\/BSkqqvz3yy1wuvl2\/B6mTeez9+Ld\/N98Ezv8M8lAIN0e8fMDajPJLY\/WSuaFH4MMvSTkKQX16HJaHOmn9C7qhaOq8ZhuGuSjKtGyajRTsX5qfsPilLaD3tFGF982w1wna9A3P0aOB7XIeZWC4ZrdSPLItBclPatiNHN06pZDtXgbi6DpFMFEYFS0O1yQTMP6fjFC\/8N0gKIbQ2vp7nFg7YtjPxbQsDdEwypg74\/RADGrRnXf360ykPrcnXYFs2Cg2AWnAQz4FxELH\/pRKwLGPn7tGlu4cMjMx6poPKJHqpvz0V1tQJqS+XxvGYYqqJ6VGmM\/+s95H+jcJeYcxux+k3hXLRGS6ElhvTsqV1x71y3n+oCm3Tt6fxXyxfh5Zr1eLh8A67rr8cTI1c8MnT\/6QQgUjWoPpX0\/vFaMUjQiSPFn4xo7dgO\/d3dUQ5QvKnqj8saZ3FNLxhX9WNwTTcV\/tP2nRCltB+eWSRfwvkWOJsvE6teCwn3G2C6EAFwuwrOtrIm9gq\/b742mr4w9CTdphJiG0rAshVAfHM5cQBlYG1MB3PBno7fwfTfEAqAo3+92I4I0N38wHA\/C6lD59H9hM+PEACG6hm1ZNM8PVjmq2Jj8SxsLp2JbWXTsOPSVGyKky8fNIj2+8U+FrZDegXnT64vuTcTpVcUcal6Aq5XyeNh5XB8qO6P8qCuZ0SpHebyIXEbEMuPaOH5e1kghvTtqT1x62SXWFHKT0HufAX+a0tVPFhngHtrl+DqkkW4Y7wadXo\/1337WgO1+oSohdxP1ElBpFYiokjE6KQjTCupQw6gUNlzwx2N06iZewKVc8+iVisMdbqJ8FfadV6U0n64S4L4HNtLYKwTgG1fCcnt18AU3g3oRF7vvAXWpvwGmtEhTVH6f0OMbhxyjr6+ArT1JaDZFEHMjmx3Sxm424gbcMh6yptt\/13mA6BvOVHP3uUPrvdpSOz1Qe8zp9H33KHvLgBKh+e46KcaYfFFXVjkqWADcQCOpbPhUTMTzjmTPy7dPegPdtvdZ5B2StnolryyoSgsGIAawUA8qJTDh8tD0HRtBEojhq4QpXaIX\/yldJDchRQ+Kf5IGSICRACICDRHybYU7uT96ZN3vjfF5mP5DS7T8MsOdbw\/YY53R2zwjm+NRxYWP5UAaPfW7hGoFnInjozOEVpJCNUkIqCdjkCN9s1DEb54w4Ra013RN+btx3Xto6hR80X5nHOoVgsmIhANP0XPYFFq+xHTP8mnr8gGzTQFYmvzwdtaBS4pfg6f2PbtVWBuJSP5msR3XMO9wlMY\/wk2zfBCKG1NKWhri0GzLgLdXgAOWZ\/nXAVJrzpI2CV\/nxmBxqr2Ymw9VC9x4Ay6HfZBX99jGBrmi8EB+76rAIx3maqqEanbZJQyD6YZejDPVYVNoTIcy5ThVjULln6jN4hS\/0BI\/Ki91ddHoqCgB6oEPVFfPQCvavoDj8fj12vj3wYf79\/hqwQTt\/Emvw+WbUGUNNpCJdAWJomWYPGvr1+dlfgU5fDbtNs\/mrINcnycnIqWKD0gew2QsRkI46Nhv91PJQAKNAVWsGZkRYxuCsI0k0gkECFIxTmVyEcKffT\/8i3GzrMW9rhic3D3e9eA962Ogbi79CAu6R3GZS0\/VKoEo1w1FJUaETij4B4pWqUDqB\/g05akgG6SCNqqFLBtCyG5jRQ\/CYZDISnmDIhtLAHPLuc5z2i3gmit\/0n\/aeL0xVGxYuvIOmtLwbQhdt+hChziJHgu1RB3rwWPX9TCXXLge\/1BSUl7Hrzbw+ckBp45jBHBhzA69giGhe7OEn3+tzPabHRvrSCdewvSF2BR3DysTNPD6ixVrMufC6caVVhFK8SQtD+dKXnRotHs7IKRgpu3BuPqpV6or+2DJxU98eX2COCXsbiTNaBUWfn\/tA7tQVubxnl2RqIc0eL4coGFL+dZ+HRODJ\/PMUiB8fDilOSj3O2SRnrjZLqIVvkhFNv24CNKAW356mjJ00IL+Z0i1Zp8x59LAIT4qJ3LjiZ9f7hWPCKEAqCRiGitNJya5Z\/IH+cqrJ\/\/ND262LGZmy1yFu26+44fiA\/bSPFbHkXVwn0o0z2OKo0gVKjGQkCiVC0e56fsjhOt1wE0D\/A5FjnourEYPJtc0NdeJAWcBeamfDKC55O+PQ\/MDXlkJL9Elll3WDpe\/3PkGWQoK2YSncayroX05uuQ3XoDMi43IeN6AxLC4wiutWBur4GYeYCbaI3OYfQiSeaK3Zvpyw+nMG38sqS3R2Z28QzL5Lmdzey643hBv6MnGgaePoqR\/vswPnwXxkbswKjIHb8O9vPI7HViW2YPH7fM\/md3Zg4+45U5cI9teH+X5Z35UEsxrTPq0aY5S7E0cQFM4wywKoU4gIvqsC7RwNrkmQ9n2AzoK8r9U06c7Te+onzQ+7s3euP+5V54Wt0TH64NxscrA9F6rT+qInsLJ+7sEHnbGfOFxd9wVgy\/Hqfh\/SkaGs6x0OQn\/vVink+nuXh1jHOr6bx49ucLspmfznTPfH+kR+Zr716Zv7iR8Oid+cvOPpmvd\/XKfLOnS+anvd0yP+2UzXyzlZn5dAMt67olPU2wlsk\/qk1r98VMudbSfCROAAQz0VIyE605GsQFLAOifq4WQIj3jH17YvSTiADEkNE\/AbHECcRrpyBNJxuBc2KaQ1QSyoPV4zKDNGIygzVjM0M1EzLDNBMzIzXjMqO1Aysy9P1QvsgXAtMDEJjsQ4HxbmTpHkCupi\/yZwdDMDeZCEAKyjXTEDzzaLvnbvwd7ryT\/G52lejHr0FXYteZ1jmgWaaDbpcH1tZSSDgTN7C1DPT1eaBvKCOFnPyUsyrGirOpVEXMLGYZ2zylhrvpCri2Veiy7Qa6e9xDN8876OJORMDrDsTdroO2PFB4tLLzngugrMzlbTwZK+kZT5xKONj8AIh7BEF6TwC6H7uAAX5+GHD6IAb7emJS8E5Mi96F8SFukI\/aieHx+zAgchcGRh3AkGjiDuKOYEz8AYwP3oIJ+5b85fnk\/hMq+6evWJBkgEUpC7EsbQmWJxliWZI2LHK0sSZTtXXeob8+e01MUD+rezV98bCyN95eGYLPV4fjU\/VgNNYOwvuyga0Jh7q1ezKMf1HpSfeFP5MUu\/Bhmmw0nueh6Zw4GnyJEBBhQLDw4h7hnX6SQJzwuv\/uwPmegA+Jo32Ak6Q18SVxkvzsSz47TnK82YATDXCkA64s3F3PSXVXoP3lJyL9O7lmknxckEdbliLaSmYAhVrEAcwHzv48s\/f+i+2K2ycFaka0xuinIlY\/Dcm66UjWTkOcVgpidbOQYFCIxHl5SDbIRSpZphsUIEO\/AHn6hSg0ykKmXiRSdc+S8CHrHkeS9jEkaZ5CmvoFZM0JRbFyIkpUE1GpmYzomSfSRLttP5JGZ\/ldNlaii20ZZB2JXXckPf+mErBcasEivTtrawW4fPKeVR4p5DSyLAZ30yVwt9QSVyC09nXgCc\/3O1SCZV8OzmZi\/R1rSFFehdR24gIs4zr86Kr\/G6aF+1QJ1wDI7ggiYnMGPOd9YDp6gOnCR8\/DXhjuvwfD\/Tww4rwTlMJcoRzjBcWw7RgVuh3Dwt0xKMQFwyM9MTjIHcOCPTEm1B1T4h2hErOmYtGi9j\/BVwix5UzDMFWBcbIeDIn1X55pCrPMBViWogHLIh0sOD\/tm8\/dFsUMjGi4MQKNdaPRWieP1usj0XJlGFBH2oOYHomitI7AurWHE4twaeCCDCl6CVL8HCIGTOIGGGgKoKMtVAyt4aSYI1hACBECf1m0+HZF05EeaD7aC62He6Fpjwya90mhZa8EWj3ZaNoqhi92DLTZc9FsK4GS+cx23b6bocXe1uhMhCZiEhn5Z6EtRY0IkDLgrvDTCQCBfkz5TEiqcQESDDORPC+TFHE6YjRTEGqQjGCDFISQZYReEqJ1kxCnk4hErUSkEKdwUTsR6dqxSNWOQop2BBK1w5FAIlU3GmkaUchVjUTx3GgUq0ShUj0eCTPPZIr22X6Ymj585spcsMxzIGVbDt5mUshEBDgb0quZjhWgbRJOEir46gDYlvngricCYFMKcdsKSGypgiS\/FmyypFsXg2aRDZp5JmjWJN+6EMzloVtFu+lUGE4nVdmeAeC5+UDG4zDEXTwg7uoE2T2O6HfSiRS0KxRj3DAxcgsmh9pjZrQjZsdvw8QoPnEBThgevpm0A84YGuSEEQEukPd3gmLkRuimWN6eoDxIVrSbdjFas3\/XhTFq9wzjtGEYbYBlGUuxOm8RLEvmYXH47Iphw2gcUepf5qS7XM\/n5ePr8WgSWm+ORtstEnUjgRtyeFvcp0SU1iGExwPu7ZdIQqg0mokDaDjDQcN5UsQBHLSFcSG8XqA5mo6WSFLQYRy0Bkig+TQp9mMyaD3ShQiADBp3c0iwiQAQkfAm4UbWdeSgyZa0EzZcNKxmqIl2901kzaatebmchef8Hni7fwjeew\/GS8vuqND9Pw8H\/ZlYPdKm72mNkJtJRvmI0k9HlF4qwrSTEKSXgCD9BATrJSJcN5G8n0hcAREAUvjJ2gkk4pGiJbyIKA5JWrFII59lERcRpOb\/OkE97HOeWjQKVSJQRISgQiMJsTPPdMLTrlUO8GlL08A0ywBnHSla6yLS\/xMBsEqbSzcL92c6XQZ7cwWY9gLwiEBI2lVBgrQMPLsKSG6pIQJwhXxWDppwTsE1xCVYFIJmltZEMzq9WrSHTodptm0affsJsD2PQcJzL8TdXSC1cwt6HrJHvxMbMCrQDkqJTpievAWKUesxI9YGaqlbMCPRAUoJDpgQtRHjIxwgH7QJowMcMdrPHtNiNkI9anmlcAQX7aa9MOYFzCk2jtfCvGhdmF5ciLVli2GWqv1Z03Xc\/34Q9S+QFSyv8\/HWhFY8noC2e+OA26OB+8NRF9e7087ZmynTuPf2c5MQJo7WQHE0C88IhJPRPua32X0aY1hojGKjOZyFFiIMzadJjg8Z7Y+QnCMSwCGy3gFi\/YkAtO0hyx08tDqL47M1E7+uoCFXm9auSSzzVZhzHhszcduIhnuLaHi2kI4rqvTWo8NoP9UVi\/\/Omgl2E0+oh96OMs4jo34aAkgxB+iQ4icRQgo9TDeeCEASonRIIRMhSBC6AVL08ZoxXwUgWy8NsRrhzefmnPS1Hm09LFo1sLyYuAShC8hTj0IFaSv8ph7yE+2u\/bD1ffiS64vQ3a4MPCIA9NUZoJFRnmZTJpy+myW+Lu2ilPtdsEnBM9f+9tAQ3iYiApurIUHEQWrbNUg6XyWtw2Vwtt2EmEXGJ9q8U502d\/3\/yrRp4nS7nUniBy5A+sgpSBzcCdkjfPTx3YTepy3R+8xyDA8zx5SUjZievhEzLlpDPXcTdPK3fI1Z5L2pSbZQjN9ErD8fCtFbMDN8HZT26XRoHsR\/Mcdr8mKjCDUsztCHedECrMrUbTU+M2OZ6ON2U5E+wqmFCADeEiv8ahzeVsg1Z\/r06NTHWAlFoG4\/MxzhPCCZFHYqaQvSZYj1liKvOUCicJpvEhGkwIlAwI\/knSbFf5LkniLLY+SzQ6RVOMQADpL3dpH1HNm4slAsc3M7r2JcP06mS52O+BUsFUeTEdmvoThuaHRNXyQ89fwTM19+9aADqhdifHXjEGaUg0iDTMTpZyNWnyznZSBB2B7My0KyEWkVSLuQRIo+jbgFoRvwVz6Xt0PB5fcW54TSfvMctSiUa6WjUicDaaphrccUdk4Vfdx+pE0u8Ps416Kf8yVIbSwBfRURAMsCMpL\/NnuvjLKZLG9Ddi7T8Rpo60rB2kisv9MVMvKToneqhYTzdUi53oH0jqeQsBc8YSzwbZfN+2a0l0lz7d1cpb12Z0l4by\/sstdBMPT0FoHcaUtB933zBD326wjkzy0RTApdJZgQulwwLXKFQCPRUqCTbCWYHb1KMC1slWB62FrBjPANeeMPLU+Y4GncqaKlskNxhXGIStaiSI10vcOKnXZpbUH8MPNXtfLZz8uHp+Wc69fxGWH+hBIv7so7J7nJTRG8nC8REoWfI3mCD6EswftAmuC9P4mzDMH7ExzB22NcwdsDEoL3+yQF7\/fyBG93iAneeNAEDZ50Qcsu8cJXW6WyL68U9zqpR+vQqcTQSRLj67Vko77oSOfUzZYO8FPs8qfPVfzZ2DRjr4qXso\/PUVX\/zEDt+NxAzbiSQK04QYBmtCBQi4ROtCCYRIhmdMFZ5fPpu6fuFrrnPzhRUvArk5SDslPmhuT4KOwyEb3dMaRXXOB3c6qEtG0RuFbZEDO\/COaGEjLS\/9tde1OXSdNXxpxmrM\/9KHxsuMyOh5D0uA\/W9jtgudwBw64UYpYX49k6\/BGiNSgoKP5fQHLFWb6EYzEYa9NAN4mC2PJ40ttXQcap5g9HWFkGXmMkbAvUJFxvqHGcL6sxhOF4WY1mfLLjjyiioKD4\/kiaEQFwKQXbNpPY\/zgwLFPB45P+3uWPAkBBQfEPg2t+mi\/hXgauUz5YW3LB3loE8e3Cy3i\/w9RdFBQUPxa2xUk+z0MA8W354LoUgre9BDwv4WPBKQGgoPjHwyQCIO4lAM+tAGxXEm5F4OysIALwHabuoqCg+LEIBYDnVQIpD1L87vlguheCtbMUDEoAKCj++bDNT\/KlvIohS0KChLhnEdi7BWDs+A5P8aWgoPixsFeecJbyKCICUASJHUUQJ8HeQxwAJQAUFP98uOantkoTAejmVQgp9xzw3LPB2ZkPhksaJQAUFP902GvPzpfgp0HWMQHituFgWweAuc4PTNMdc0QpFBQU\/1i07MfQVxxpZaw+DYbJQTBMD0LMcPsr2lTt\/qIMCgqKfzB0ms7m3bSFXhBbugfc+Z6NHE3bP52skoKC4p+I8pppjCWearw5K37ae6wpKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo\/h+GRvv\/AA3x3fBLSjQoAAAAAElFTkSuQmCC)\n*   The 1st GAN Example that has been prepared by pixera.\n*   Dataset : https:\/\/www.kaggle.com\/soumikrakshit\/anime-faces\n*   Author: Alican Akca (https:\/\/github.com\/AlicanAKCA)\n*   Note: I have never watched Anime, don't ask this question. :)\n*   You can reach pretrained model and epoch results on this page.\n "}}