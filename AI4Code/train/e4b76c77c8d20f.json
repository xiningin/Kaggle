{"cell_type":{"ab884c1a":"code","62897e8f":"code","84f5e099":"code","92f9ee4d":"code","613c70d9":"code","f993c3a4":"code","be4b8054":"code","11c06ef1":"code","4ab7a21c":"code","d612ebb7":"code","b87701ff":"code","30c1845c":"code","055369db":"code","d6f756a6":"code","f43408bd":"code","2ebb1464":"code","120b9cae":"code","4730ad29":"code","c4998cb2":"code","04dc095b":"code","8fb5f193":"code","2c140947":"code","8c12973f":"code","55bfa7de":"code","98f545eb":"code","4e1bb99b":"code","dd6d2133":"code","4b37ef4e":"code","e9ca87b1":"code","617c6b16":"code","6bdf82cc":"code","12b6760f":"code","a7a0f8af":"code","4649901d":"code","e7227b89":"code","893bb599":"code","30742419":"code","67c04170":"code","8694915e":"code","8a0043d9":"code","53970135":"code","17e87c50":"code","5aecf510":"code","49a0c3d3":"code","da76421b":"code","eb9bbb76":"code","d17fa635":"code","cfc2c3e6":"code","79d205e5":"code","ffeb2956":"code","62d05f0b":"code","5cbd87de":"code","59d1d2e8":"code","592f02b9":"code","4d0b2e97":"code","630f995c":"code","42dc65e5":"code","25e2c7b4":"code","e4395229":"code","52e27eba":"code","b02b3824":"code","64bd0683":"code","301d8fed":"code","b35011c6":"code","7ca46cda":"code","c9ec6a8c":"code","e2f1c4f8":"code","e65077dd":"code","41d1a49c":"code","85369e9e":"code","77fe409a":"code","5913f49f":"code","8b840b39":"code","2a35533b":"code","9c16aba8":"code","b3bc17de":"code","ece5ecfa":"code","5e154e03":"code","75fe0870":"code","eabe5415":"code","daef5553":"code","30d35ffc":"code","01a06b14":"code","c4e891af":"code","0ec4b207":"code","58bce85c":"code","6dc01568":"code","d1b6326e":"code","365d611a":"code","71e996d0":"code","b4a318f6":"code","c84c1db0":"code","b6fcebf1":"code","5de8e432":"code","ce21a243":"code","2dff08c5":"code","fad288b4":"code","66566fa5":"markdown","ba2d79aa":"markdown","2a762f1a":"markdown","72a226eb":"markdown","ba7f081a":"markdown","144d7b05":"markdown","cf423207":"markdown","e6732dc7":"markdown","d821e1bd":"markdown","4f9bd7dc":"markdown","9d19748c":"markdown","ad8d2a96":"markdown","b12f9a48":"markdown","d4b04eba":"markdown","48d3f07b":"markdown","ba0d43bc":"markdown","b1a9b137":"markdown","f65a0fb7":"markdown","0699eb59":"markdown","1a773cfd":"markdown","891b520c":"markdown","7babe564":"markdown","9cc7ba48":"markdown","f21237c3":"markdown","94c18ca6":"markdown","f5f308f5":"markdown","b98a62e3":"markdown","654e9a01":"markdown","33a8ae35":"markdown","37c26076":"markdown","77b97103":"markdown","d942b22d":"markdown","56dcaf4e":"markdown","1562de40":"markdown","c6674a66":"markdown","871c4705":"markdown","284d5b96":"markdown","1dfe0670":"markdown","912b5049":"markdown","09215947":"markdown","95bbbcf5":"markdown","242a011a":"markdown","96174013":"markdown","705b682c":"markdown","b2c7973e":"markdown","7056b05c":"markdown","e743afe2":"markdown","499e29e2":"markdown","dee0170f":"markdown","d41eb834":"markdown","3730db2f":"markdown","cb7b44ca":"markdown","fa065acb":"markdown","120b8585":"markdown","9f8f0640":"markdown","ec34c450":"markdown","fd1a282b":"markdown","13128047":"markdown","99a82fec":"markdown","5d7ea1a9":"markdown","af79c4ef":"markdown","d4a8679d":"markdown","f086775e":"markdown","79d84c6a":"markdown","78bf7ca2":"markdown","e53fbd8e":"markdown","0ff68b7d":"markdown","2abcf8b9":"markdown","7f0d167e":"markdown","e7547d61":"markdown","88ff4668":"markdown","c0bc0160":"markdown","64bb03aa":"markdown","34790349":"markdown","31b1a074":"markdown","b34d630a":"markdown","a4b41f9d":"markdown","ea8ac32a":"markdown"},"source":{"ab884c1a":"import matplotlib.pyplot as plt\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nplt.style.use('bmh')\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nimport seaborn as sns \nimport numpy as np\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\nfrom sklearn.preprocessing import StandardScaler\nfrom numpy import genfromtxt\n%matplotlib inline\nimport plotly.graph_objs as go\nfrom plotly.graph_objs import *\nfrom mpl_toolkits.mplot3d import axes3d\nimport codecs\nimport matplotlib.image as mpimg\nimport plotly.tools as tls\nfrom wordcloud import WordCloud, STOPWORDS\nfrom scipy.misc import imread\nimport base64\nfrom os import path\nfrom PIL import Image\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\ncm = sns.light_palette(\"Yellow\", as_cmap=True)\npd.set_option('display.max_colwidth', -1)","62897e8f":"Freeform = pd.read_csv(\"..\/input\/freeFormResponses.csv\",encoding=\"ISO-8859-1\", low_memory=False)\nmultch = pd.read_csv(\"..\/input\/multipleChoiceResponses.csv\", encoding=\"ISO-8859-1\", low_memory=False)\nschema = pd.read_csv(\"..\/input\/SurveySchema.csv\", encoding=\"ISO-8859-1\", low_memory=False)","84f5e099":"column_names = multch.iloc[0:1]\nmultch = multch.iloc[1:]\nQnumber = schema.iloc[0,1:51].index\nResponses = schema.iloc[1,1:51].values\nResponses = np.array(Responses)\nResponses = Responses.astype(int)\nQuestions = schema.iloc[0,1:51].values\nPopularQuestion_df = pd.DataFrame({'Qnumber':Qnumber,'Questions':Questions,\n                                   'Responses':Responses})\nPopularQuestion_df = PopularQuestion_df.sort_values(['Responses'], ascending=False)\nPopularQuestion_df = PopularQuestion_df.reset_index(drop=True)\nPopularQuestion_df.style.background_gradient(cmap=cm)","92f9ee4d":"#columns = multch.columns\n#for x in columns : \n# print(x) \n\n# Function 1 to search and show the Question , pass Qnumber as an argument\ndef find_question(x):\n   y = PopularQuestion_df[PopularQuestion_df['Qnumber']== x]['Questions'].values[0]\n   print(x +':-'+ y)\n    \n# Function 2 scatter plot\ndef build_response_value(Q_Part,z):\n    columns = multch.columns\n    v_features=[]\n    for x in columns : \n        if x.find(Q_Part) >= 0:\n           v_features.append(x)      \n    value = []\n    count = []\n    col = []\n    for x in v_features:\n        i = multch[x].value_counts().index.values[0]\n        j = multch[x].value_counts().values[0]\n        value.append(i)\n        count.append(j)\n        col.append(x) \n  \n    value_count_df = pd.DataFrame({'value':value,\n                                  'count':count,\n                                  'col':col}) \n    value_count_df = value_count_df[value_count_df['value']!='None']\n    value_count_df = value_count_df.sort_values(['count'], ascending=False)\n    trace0 = go.Scatter(\n    x=value_count_df['value'].values,\n    y=value_count_df['count'].values,\n    mode='markers',\n    marker=dict(\n        size=value_count_df['count'].values\/z,\n        color=value_count_df['count'].values\n        )\n    )\n    layout = go.Layout(\n                  xaxis=go.layout.XAxis(\n                   automargin=True)\n                )\n    \n    data = [trace0]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n         \n    return value_count_df\n\n#function 3 box plot\ndef box_plot(Q_Part,Title) :\n    v_features=[]\n    z = 0\n    columns = multch.columns\n    v_features=[]\n    for x in columns : \n         if x.find(Q_Part) >= 0:\n            z = z + 1\n            v_features.append(x)      \n\n    trace = []\n    for i, cn in enumerate(multch[v_features]):\n        multch[v_features] = multch[v_features].astype(float).fillna(0.0)\n        j = column_names[cn][0]\n        j = j.split(\"-\",1)[-1]\n        trace.append ( \n            go.Box(\n                y=multch[cn],\n                name=str(j)\n                #marker = dict(\n                # color=colors[i],\n                #)\n            )\n        )\n    layout = go.Layout(\n        title=Title\n        )\n\n    fig = go.Figure(data=trace, layout=layout)\n    iplot(fig)\n\n#function 4 clean salary     \ndef clean_salary(sal):\n    sal = str(sal)    \n    if \"I do not wish to disclose my approximate yearly compensation\" in sal:\n        return np.nan\n    elif \"500,000+\" in sal:\n        return \"0 - 700,000\"\n    elif \"nan\" in sal:\n        return np.nan\n    else: \n        return sal\n\n#function 5 show salary vs any column you pass here\ndef colVSsalary(col,Title,df,horiz,vert):\n    multch_col_Q9 = df[[col,'Q9']]\n    multch_col_Q9 = multch_col_Q9.dropna()\n    multch_col_Q9['Q9'] = multch_col_Q9['Q9'].apply(lambda x: clean_salary(x))\n    multch_col_Q9 = multch_col_Q9.dropna()\n    multch_col_Q9['Q9'] = multch_col_Q9['Q9'].str.replace(',','')\n    multch_col_Q9['Q9'] = multch_col_Q9['Q9'].str.split('-')\n    multch_col_Q9['Q9'] = multch_col_Q9['Q9'].str[1]\n    multch_col_Q9['Q9'] = pd.to_numeric(multch_col_Q9['Q9'], errors='coerce')\n    Salmean = multch_col_Q9.groupby(col)['Q9'].mean().values\n    Salcount = multch_col_Q9.groupby(col)[col].count()\n    ColVal = Salcount.index\n    \n    #y = np.arange(Salmean.size)\n    \n    Salcount = multch_col_Q9.groupby(col)[col].count().values\n    idx = Salcount.argsort()\n    ColVal, Salmean, Salcount = [np.take(x, idx) for x in [ColVal, Salmean, Salcount]]\n    \n    trace1 = go.Bar(\n        x=Salcount ,\n        y=ColVal,\n        orientation = 'h',\n        marker=dict(\n            color = 'rgba(90, 104, 30, 0.8)'\n            #colorscale = 'Viridis',\n            #reversescale = True\n        ),\n        name=Title,      \n    )\n\n    trace2 = go.Bar(\n        x=Salmean ,\n        y=ColVal,\n        orientation = 'h',\n        marker=dict(\n            color = 'rgba(214, 104, 30, 0.8)'\n            #colorscale = 'Viridis',\n            #reversescale = True\n        ),\n        name='Mean Salary',    \n    )\n\n    layout = dict(\n        title='Questions with highest response',\n        width = 800, height = 800,\n        #yaxis=dict(\n        #showgrid=False,\n        #showline=False,\n        #showticklabels=True\n        #) ,\n        yaxis=go.layout.YAxis(\n          automargin=True)\n        #domain=[0, 0.85],\n    ),    \n    \n    fig = tools.make_subplots(rows=1, cols=2, print_grid=False, shared_yaxes=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig['layout'].update(height=500, width=800,margin=dict(l=185,))\n    iplot(fig)\n\n# Function 6 stackbar plot    \ndef StackBar_Plot(col1,col2):    \n    data = []\n    for i in multch[col1].unique():\n        country = multch.loc[multch[col1] == i, col2].value_counts().sort_index().index\n        valu_country = multch.loc[multch[col1] == i, col2].value_counts().sort_index().values\n        size = []  \n        for j in country :\n           size.append(multch.loc[multch[col2] == j, col1].dropna().size)\n        z = (valu_country\/size)*100\n        trace = go.Bar(\n              x=country,\n              y=z,\n              name=i,            \n              )\n        data.append(trace)\n        layout = go.Layout(\n               barmode='stack'\n                )\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\n#Function 7 pie plot\ndef Pie_Plot(x):    \n    labels = multch[x].value_counts().index\n    values = multch[x].value_counts().values\n    trace = go.Pie(labels=labels, values=values)\n    py.iplot([trace], filename='basic_pie_chart')    \n\n#function 8 bar plaot\ndef bar_Plot(col,Title):\n    x = multch[col].value_counts().index\n    y = multch[col].value_counts().values\n\n    trace2 = go.Bar(\n        x=x ,\n        y=y,\n        marker=dict(\n            color=y,\n            colorscale = 'Viridis',\n            reversescale = True\n        ),\n        name=Title,    \n    )\n    layout = dict(\n        title=Title,\n        #width = 900, height = 500,\n        xaxis=go.layout.XAxis(\n          automargin=True),\n        yaxis=dict(\n            showgrid=False,\n            showline=False,\n            showticklabels=True,\n    #         domain=[0, 0.85],\n        ), \n    )\n    fig1 = go.Figure(data=[trace2], layout=layout)\n    iplot(fig1)","613c70d9":"multch['Q3'] = multch['Q3'].replace(['United States of America'], 'United States')\nmultch['Q3'] = multch['Q3'].replace(['United Kingdom of Great Britain and Northern Ireland'], 'United Kingdom')\nmultch['Q3'] = multch['Q3'].replace(['I do not wish to disclose my location'], 'not disclosed')\nmultch['Q3'] = multch['Q3'].replace(['Iran, Islamic Republic of...'], 'Iran')","f993c3a4":"x = PopularQuestion_df[\"Questions\"].head(10).values\nj = []\nfor i in x:\n     if len(i) < 25 :\n         j.append(i)\n     else:\n        k = 25\n        z = len(i)\n        while k < (z-1) :\n          if i[k] == ' ' :\n             i = (i[0:k] + '<br>' + i[k:])\n             k = z\n          k+=1         \n        if len(i) > 60 :\n           k = 60\n           while k < (z-1) :\n              if i[k] == ' ' :\n                 i = (i[0:k] + '<br>' + i[k:])\n                 k = z\n              k+=1\n     j.append(i)               ","be4b8054":"#x = PopularQuestion_df[\"Questions\"].head(10)\ny = PopularQuestion_df[\"Responses\"].head(5)\n\ntrace2 = go.Bar(\n    x=j ,\n    y=y,\n    marker=dict(\n        color=y,\n        colorscale = 'Viridis',\n        reversescale = True\n    ),\n    name='Questions with highest response',\n )\n\nlayout = dict(\n    title='Questions with highest response',\n    width = 800, height = 1000,\n    yaxis=go.layout.YAxis(\n          automargin=True)\n)\n\nfig1 = go.Figure(data=[trace2], layout=layout)\nfig1['layout'].update(height=400, width=800,margin=dict(b=100,))\niplot(fig1)\n","11c06ef1":"x = PopularQuestion_df[\"Questions\"].tail(10).values\nj = []\nfor i in x:\n     if len(i) < 25 :\n         j.append(i)\n     else:\n        k = 25\n        while k < 50 :\n          if i[k] == ' ' :\n             i = (i[0:k] + '<br>' + i[k:])\n             k = 50\n          k+=1         \n        if len(i) > 60 :\n           k = 60\n           while k < 100 :\n              if i[k] == ' ' :\n                 i = (i[0:k] + '<br>' + i[k:])\n                 k = 100\n              k+=1        \n     j.append(i)           \n         ","4ab7a21c":"x = j\ny = PopularQuestion_df[\"Responses\"].tail(5)\n\ntrace2 = go.Bar(\n    x=x ,\n    y=y,\n    marker=dict(\n        color=y,\n        colorscale = 'Viridis',\n        reversescale = True,\n    )\n)\n\nlayout = dict(\n    title='Questions with Poor response',\n    width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\nfig1 = go.Figure(data=[trace2], layout=layout)\nfig1['layout'].update(height=400, width=800,margin=dict(l=50,b=100,))\niplot(fig1)\n","d612ebb7":"find_question('Q1')","b87701ff":"Pie_Plot('Q1')","30c1845c":"find_question('Q3')","055369db":"bar_Plot('Q3','Respondents across the world')","d6f756a6":"StackBar_Plot('Q1','Q3')","f43408bd":"find_question('Q4')","2ebb1464":"multch['Q4'] = multch['Q4'].str.replace(\"\u00e2\u0080\u0099\",\"'\")\n#Pie_Plot('Q4')\nx ='Q4'\nlabels = multch[x].value_counts().index\nvalues = multch[x].value_counts().values\ntrace = go.Pie(labels=labels, values=values)\ndata = [trace]\nlayout = go.Layout(width=400, height=400, \n                   legend=dict(x=0,y=2))\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='basic_pie_chart')","120b9cae":"find_question('Q5')\nbar_Plot('Q5','Undergraduate major')","4730ad29":"multch_Q5_Q4 = multch[['Q5','Q4']]\nmultch_Q5_Q4 = multch_Q5_Q4.groupby(['Q5','Q4'])['Q4'].count().unstack()\nmultch_Q5_Q4 = multch_Q5_Q4.sort_values([\"Master's degree\"], ascending=False)\nmultch_Q5_Q4 = multch_Q5_Q4.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q5_Q4,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q5_Q4.values,\n                   x=multch_Q5_Q4.columns,\n                   y=multch_Q5_Q4.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='How high respondents aim for higher level of education',\n    autosize=False,\n    width=800,\n    height=800,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=go.layout.YAxis(\n      automargin=True)\n    )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","c4998cb2":"multch_Q4_Q3 = multch[['Q3','Q4']]\nmultch_Q4_Q3 = multch_Q4_Q3.groupby(['Q3','Q4'])['Q4'].count().unstack()\nmultch_Q4_Q3 = multch_Q4_Q3.sort_values([\"Master's degree\"], ascending=False)\nmultch_Q4_Q3 = multch_Q4_Q3.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q4_Q3,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q4_Q3.values,\n                   x=multch_Q4_Q3.columns,\n                   y=multch_Q4_Q3.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='Respondents with highest level of education achieved\/foreseen<br>across the world',\n    autosize=False,\n    width=800,\n    height=1500,\n    yaxis=go.layout.YAxis(\n      automargin=True),\n    xaxis=go.layout.XAxis(\n      automargin=True)\n    )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","04dc095b":"col1 = 'Q4'   \ncol2 = 'Q3' \ndata = []\nfor i in multch[col1].unique():\n    country = multch.loc[multch[col1] == i, col2].value_counts().sort_index().index\n    valu_country = multch.loc[multch[col1] == i, col2].value_counts().sort_index().values\n    size = []  \n    for j in country :\n        size.append(multch.loc[multch[col2] == j, col1].dropna().size)\n    z = (valu_country\/size)*100\n    trace = go.Bar(\n            x=country,\n            y=z,\n            name=i,            \n            )\n    data.append(trace)\n    layout = go.Layout(width=800, height=400, \n                       barmode='stack',\n                       legend=dict(x=0,y=2))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8fb5f193":"find_question('Q3')\nfind_question('Q7')","2c140947":"multch_Q3_Q7 = multch[['Q3','Q7']]\nmultch_Q3_Q7 = multch_Q3_Q7.groupby(['Q3','Q7'])['Q7'].count().unstack()\nmultch_Q3_Q7 = multch_Q3_Q7.sort_values(['Computers\/Technology'], ascending=False)\nmultch_Q3_Q7 = multch_Q3_Q7.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q3_Q7,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q3_Q7.values,\n                   x=multch_Q3_Q7.columns,\n                   y=multch_Q3_Q7.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='Respondents from different fields across the world',\n    autosize=False,\n    width=800,\n    height=1500,\n    yaxis=go.layout.YAxis(\n      automargin=True),\n    xaxis=go.layout.XAxis(\n      automargin=True)\n    )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","8c12973f":"multch_Q7_Q8 = multch[['Q7','Q8']]\nmultch_Q7_Q8 = multch_Q7_Q8.groupby(['Q8','Q7'])['Q7'].count().unstack()\nmultch_Q7_Q8 = multch_Q7_Q8.sort_values(['Computers\/Technology'], ascending=False)\nmultch_Q7_Q8 = multch_Q7_Q8.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q7_Q8,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q7_Q8.values,\n                   x=multch_Q7_Q8.columns,\n                   y=multch_Q7_Q8.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='Years of experience in their respective fields',\n    autosize=False,\n    width=800,\n    height=600,\n    xaxis=go.layout.XAxis(\n      automargin=True)\n    )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","55bfa7de":"colVSsalary('Q3','Countrywise Respondents',multch,15,20)","98f545eb":"find_question('Q6')\nbar_Plot('Q6','Current Title\/Role')","4e1bb99b":"colVSsalary('Q6','Earning by current Title\/Role',multch,15,10)","dd6d2133":"multch_Q3_Q6 = multch[['Q3','Q6']]\nmultch_Q3_Q6 = multch_Q3_Q6.groupby(['Q3','Q6'])['Q6'].count().unstack()\nmultch_Q3_Q6 = multch_Q3_Q6.sort_values(['Data Scientist'], ascending=False)\nmultch_Q3_Q6 = multch_Q3_Q6.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q3_Q7,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q3_Q6.values,\n                   x=multch_Q3_Q6.columns,\n                   y=multch_Q3_Q6.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='Respondents across the world with their Title\/Roles',\n    autosize=False,\n    width=800,\n    height=1500,\n    yaxis=go.layout.YAxis(\n      automargin=True),\n    xaxis=go.layout.XAxis(\n      automargin=True)\n    )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","4b37ef4e":"multch_india = multch[multch['Q3']=='India'] \ncolVSsalary('Q7','Highest paying fields',multch_india,25,20)","e9ca87b1":"colVSsalary('Q8','Experience in years',multch_india,15,10)","617c6b16":"multch_USA = multch[multch['Q3']=='United States'] \ncolVSsalary('Q7','Highest paying fields',multch_USA,15,10)","6bdf82cc":"colVSsalary('Q8','Experience in years',multch_USA,15,10)","12b6760f":"multch_india = multch_india[multch_india['Q8']=='30 +']\nmultch_india['Q5'].value_counts()","a7a0f8af":"multch_india['Q7'].value_counts()","4649901d":"multch_india = multch[multch['Q3']=='India'] \ncolVSsalary('Q6','Title\/Role India',multch_india,15,10)","e7227b89":"multch_USA = multch[multch['Q3']=='United States'] \ncolVSsalary('Q6','Title\/Role USA',multch_USA,25,20)","893bb599":"multch_Q6_Q8 = multch_india[['Q6','Q8']]\nmultch_Q6_Q8 = multch_Q6_Q8.groupby(['Q6','Q8'])['Q6'].count().unstack()\n#multch_Q6_Q8 = multch_Q6_Q8.sort_values(['Computers\/Technology'], ascending=False)\nmultch_Q6_Q8 = multch_Q6_Q8.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q6_Q8,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q6_Q8.values,\n                   x=multch_Q6_Q8.columns,\n                   y=multch_Q6_Q8.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='India<br>Experience in current role',\n    autosize=False,\n    width=800,\n    height=800,\n    yaxis=go.layout.YAxis(\n    automargin=True)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n","30742419":"multch_Q6_Q8 = multch_USA[['Q6','Q8']]\nmultch_Q6_Q8 = multch_Q6_Q8.groupby(['Q6','Q8'])['Q6'].count().unstack()\n#multch_Q6_Q8 = multch_Q6_Q8.sort_values(['Computers\/Technology'], ascending=False)\nmultch_Q6_Q8 = multch_Q6_Q8.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q6_Q8,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\n\ntrace = go.Heatmap(z=multch_Q6_Q8.values,\n                   x=multch_Q6_Q8.columns,\n                   y=multch_Q6_Q8.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='USA<br>Experience in current role',\n    autosize=False,\n    width=800,\n    height=800,\n    yaxis=go.layout.YAxis(\n    automargin=True)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n","67c04170":"find_question('Q11')\nvalue_count_df = build_response_value('Q11_Part',100)","8694915e":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               #title='Activities performed by respondents with different title\/role',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","8a0043d9":"find_question('Q13')\nvalue_count_df = build_response_value('Q13_Part',100)","53970135":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +']\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \n    \nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n      \ndata.append(trace)\nlayout = go.Layout(\n               barmode='stack',\n               title='Fav IDE usage vs Experience'\n                )\n \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","17e87c50":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\n\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Fav IDE among respondents holding current title\/role '\n               #legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","5aecf510":"find_question('Q14')\nvalue_count_df = build_response_value('Q14_Part',50)","49a0c3d3":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               #title='Activities performed by respondents with different title\/role',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","da76421b":"find_question('Q15')\nvalue_count_df = build_response_value('Q15_Part',50)","eb9bbb76":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               #title='Activities performed by respondents with different title\/role',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","d17fa635":"find_question('Q16')\nvalue_count_df = build_response_value('Q16_Part',80)","cfc2c3e6":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +']\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \n    \nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n      \ndata.append(trace)\nlayout = go.Layout(\n               barmode='stack',\n               title='Python vs R usage VS Experience in current role'\n                )\n \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","79d205e5":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\nlayout = dict(\n    #title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Python vs R among <br> respondents holding current Title\/Role ',\n               #legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","ffeb2956":"find_question('Q19')\nvalue_count_df = build_response_value('Q19_Part',80)","62d05f0b":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +']\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred machine learning framework'\n                )\n \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","5cbd87de":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred Machine Learning framework among <br> respondents holding current Title\/Role ',\n               #legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","59d1d2e8":"find_question('Q21')\nvalue_count_df = build_response_value('Q21_Part',80)","592f02b9":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +']\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred data visualization libraries'\n                )\n \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","4d0b2e97":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred Data Viz libraries among <br> respondents holding current Title\/Role ',\n               #legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","630f995c":"find_question('Q23')\nbar_Plot('Q23','Time spent actively coding')","42dc65e5":"StackBar_Plot('Q23','Q6')","25e2c7b4":"find_question('Q24')\nbar_Plot('Q24','Years of experience in writing code to analyze the data')","e4395229":"find_question('Q25')\nbar_Plot('Q25','Years of experience in using Machine Learning')","52e27eba":"find_question('Q26')\nbar_Plot('Q26','Are you a Data Scientist?')","b02b3824":"StackBar_Plot('Q26','Q6')","64bd0683":"StackBar_Plot('Q26','Q3')","301d8fed":"find_question('Q27')\nvalue_count_df = build_response_value('Q27_Part',80)","b35011c6":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","7ca46cda":"find_question('Q28')\nvalue_count_df = build_response_value('Q28_Part',20)","c9ec6a8c":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","e2f1c4f8":"find_question('Q29')\nvalue_count_df = build_response_value('Q29_Part',80)","e65077dd":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","41d1a49c":"find_question('Q30')\nvalue_count_df = build_response_value('Q30_Part',20)","85369e9e":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","77fe409a":"find_question('Q31')\nvalue_count_df = build_response_value('Q31_Part',80)","5913f49f":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","8b840b39":"find_question('Q33')\nvalue_count_df = build_response_value('Q33_Part',80)","2a35533b":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","9c16aba8":"find_question('Q34')\nbox_plot('Q34_Part','what proportion of your time is devoted')","b3bc17de":"find_question('Q35')\nbox_plot('Q35_Part','% of your current machine learning\/data science training falls under each category')","ece5ecfa":"find_question('Q36')\nvalue_count_df = build_response_value('Q36_Part',80)","5e154e03":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred online learning platforms among Respondents with different Title\/Role '\n               #legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","75fe0870":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['0-1','1-2','2-3','3-4','4-5','5-10','10-15','15-20','20-25','25-30','30 +']\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q8'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q8'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title='Preferred Online learning platforms among experienced respondents '\n                )\n \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","eabe5415":"#find_question('Q38')\n#v_features = ['Q38_Part_1','Q38_Part_2','Q38_Part_3','Q38_Part_4','Q38_Part_5',\n#'Q38_Part_6','Q38_Part_7','Q38_Part_8','Q38_Part_9','Q38_Part_10','Q38_Part_11','Q38_Part_12','Q38_Part_13','Q38_Part_14','Q38_Part_15','Q38_Part_16','Q38_Part_17','Q38_Part_18','Q38_Part_19','Q38_Part_20','Q38_Part_21','Q38_Part_22']\n#value_count_df = build_response_value(v_features,200)\n#value_count_df","daef5553":"#find_question('Q39')\n#v_features = ['Q39_Part_1','Q39_Part_2']\n#value_count_df = build_response_value(v_features,80)\n#value_count_df","30d35ffc":"#find_question('Q41')\n#v_features = ['Q41_Part_1','Q41_Part_2','Q41_Part_3']\n#value_count_df = build_response_value(v_features,80)\n#value_count_df","01a06b14":"find_question('Q42')\nvalue_count_df = build_response_value('Q42_Part',80)","c4e891af":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","0ec4b207":"find_question('Q43')\nbar_Plot('Q43','% involvement in exploring unfair bias')","58bce85c":"find_question('Q44')\nvalue_count_df = build_response_value('Q44_Part',80)","6dc01568":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","d1b6326e":"find_question('Q45')\nvalue_count_df = build_response_value('Q45_Part',80)","365d611a":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","71e996d0":"find_question('Q46')\nbar_Plot('Q46','% involved exploring model insights?')","b4a318f6":"multch_Q6_Q46 = multch[['Q6','Q46']]\nmultch_Q6_Q46 = multch_Q6_Q46.groupby(['Q6','Q46'])['Q46'].count().unstack()\n#multch_Q6_Q8 = multch_Q6_Q8.sort_values(['Computers\/Technology'], ascending=False)\nmultch_Q6_Q46 = multch_Q6_Q46.fillna(0)\n#f, ax = plt.subplots(figsize=(15,20)) \n#g = sns.heatmap(multch_Q6_Q46,annot=True,fmt=\"2.0f\",cmap='YlGnBu',linewidths=.5,vmin=0.01)\n#plt.show()\ntrace = go.Heatmap(z=multch_Q6_Q46.values,\n                   x=multch_Q6_Q46.columns,\n                   y=multch_Q6_Q46.index, colorscale='YlGnBu'\n                  )\ndata=[trace]\nlayout = go.Layout(\n    title='Respondents with their Title\/Role with % involvement in exploring model insights',\n    autosize=False,\n    width=800,\n    height=800,\n    yaxis=go.layout.YAxis(\n    automargin=True)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","c84c1db0":"find_question('Q47')\nvalue_count_df = build_response_value('Q47_Part',80)","b6fcebf1":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","5de8e432":"find_question('Q49')\nvalue_count_df = build_response_value('Q49_Part',80)","ce21a243":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","2dff08c5":"find_question('Q50')\nvalue_count_df = build_response_value('Q50_Part',80)","fad288b4":"y = value_count_df.iloc[0].values[0]\nq = value_count_df.iloc[0].values[1]\nz = value_count_df.iloc[0].values[2]\npercent = []\nAge_group = ['Student', 'Data Scientist', 'Software Engineer', 'Data Analyst','Data Engineer','Research Scientist']\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ndata = []\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE',\n               '#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE','#8EE5EE'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )\ndata.append(trace)\ny = value_count_df.iloc[1].values[0]\nq = value_count_df.iloc[1].values[1]\nz = value_count_df.iloc[1].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF',\n               '#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF','#BF3EFF'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )    \ndata.append(trace)\ny = value_count_df.iloc[2].values[0]\nq = value_count_df.iloc[2].values[1]\nz = value_count_df.iloc[2].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f4b942','#f4b942','#f4b942','#f4b942','#f4b942',\n               '#f4b942','#f4b942','#f4b942','#f4b942','#f4b942','#f4b942'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\ny = value_count_df.iloc[3].values[0]\nq = value_count_df.iloc[3].values[1]\nz = value_count_df.iloc[3].values[2]\npercent = []\nfor x in Age_group :\n    p = len(multch[(multch['Q6'] == x ) & (multch[z] == y)][z])\n    total = len(multch[multch['Q6'] == x][z])\n    percent.append((p\/total)*100)\n    #print(percent)   \n\ntrace = go.Bar(\n    x=Age_group ,\n    y=percent,\n    #orientation = 'h',\n    name=y,\n    marker=dict(\n        color=['#f46e41','#f46e41','#f46e41','#f46e41','#f46e41',\n               '#f46e41','#f46e41','#f46e41','#f46e41','#f46e41','#f46e41'],\n        colorscale = 'Reds',\n        reversescale = True)\n    )        \ndata.append(trace)\nlayout = dict(\n    title='Age Group of Python Lovers with percent response',\n    # width = 900, height = 500,\n    xaxis=go.layout.XAxis(\n      automargin=True),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=True,\n#         domain=[0, 0.85],\n    ),\n    \n)\n     \n\nlayout = go.Layout(\n               barmode='stack',\n               title=' ',\n               legend=dict(x=0.5,y=1.3)\n                )\n   \nfig1 = go.Figure(data=data, layout=layout)\niplot(fig1)","66566fa5":"**Its really interesting a person who is still a student is earning close to 200k per annum :)**","ba2d79aa":"Without any doubt Cleaning the data to bring it in the form on which you can easily use all your methods and functions to draw insight will take up more time than rest of the activities. ","2a762f1a":"**Experience in current role\/title of the respondents in India**","72a226eb":"**Key Takeaways**\n-------------\n\n1. If you closely pay attention to all the responses kaggle has decided for non-demographic survey questions , they reveal Data science flow Data Scientists follow on their job. \n1. If you are not a data scientist then this survey will be helful in finding the missing skills required to become one.\n1. Involvement of Data Scientist, Data Analyst and Data Engineer in Data Science end to end flow is clearly defined by this survey <br>\n\n| End to End flow in Data Science | Data Scientists  |Data Analysts |Data Engineer |\n|------|------|------|\n|Data Warehouse|||<font color=\"Green\">Yes<\/font> |\n|Data Extraction|<font color=\"Green\">Yes<\/font> |<font color=\"Green\">Yes<\/font> ||\n|Exploratory Analysis,Insight and Communicate|<font color=\"Green\">Yes<\/font> |<font color=\"Green\">Yes<\/font> ||\n|Algorithmic Model Building|<font color=\"Green\">Yes<\/font> |||\n|Product Engineering|<font color=\"Green\">Yes<\/font> |||\n\n \n\n<p><img src=\"http:\/\/wefirstbranding.com\/wp-content\/uploads\/2011\/06\/thank-you...jpg\" align=\"left\" height=\"300\" width=\"300\" margin=\"0 auto\" \/> <br><br><br><b>Thanks for reaching so far and please do not hesitate to leave a constructive feedback which will help me to improve this work and future assignments.<\/b>\n <\/p>","ba7f081a":"1. We see a wide range of machine learning products made available by technical giants like Google, IBM and Microsoft which are committed to serve in various fields like NLP , Computer vision, Translation and many more... \n1. SAS is famous with Data Scientist and Data analysts with close to  7%. Considering the no of available machine learning products 7% is a significant number.","144d7b05":"1. Most of the respondents from India are Students while most of the respondents from USA are Data Scientists.\n1. We see Chinese students in great numbers participated the survey \n","cf423207":"Its obvious that students who aspire to enter data science ML field have to indulge in coding and preparing projects.<br>\nData scientists have to spend significant amount of time in Data cleaning and other activities which need data prepration to build the ML model.","e6732dc7":"Top 5 responses were a obvious choice and most of the data is stored in these formats and types. Image data is not far behind in the response and slowly gaining popularity that means we have many respondents who are confident of taming the Image data with help of poperful deep learning packages ","d821e1bd":"Around 40% respondetns from Data Scientists rely on dataset aggregation platform like Kaggle and 37% from them rely on Google search.","4f9bd7dc":"<p><img src=\"http:\/\/images.clipartpanda.com\/rate-clipart-097.jpg\" align=\"left\" height=\"300\" width=\"300\" margin=\"0 auto\" \/> <br><br><b>Mean Salaries drawn by Respondents across the world<\/b><br>\nNote:- For visualization purpose i have removed the lower range of the salaries from the data.\n <\/p>\n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>","9d19748c":"Yes it is time consuming effort and you do need incentives too. Lets see who thinks what thru below graph.","ad8d2a96":"**Salaries drawn as you grow in experience**","b12f9a48":"Kaggle Kernels are topping the charts here. <br> No wonder it is the most recommended\/used hosted notebook because of the excellent interface , version controlling and Kaggle competitions thru which we see talented lot publish their work.","d4b04eba":"<p><img src=\"https:\/\/st2.depositphotos.com\/4520249\/7735\/v\/950\/depositphotos_77358362-stock-illustration-student-id-card-icon.jpg\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/> <br><br><br><b> Demographic Questions (Gender Age , Ethnicity , education etc.)<\/b>\n <\/p>\n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>","48d3f07b":"<font color=\"Green\">Respondents from USA and Switzerland are drawing relatively better salary compared to other countries. <\/font> <br>\n**But for more fairer comparison one has to study in detail to know the cost of living of other countries to come to the logical conclusion.**\n","ba0d43bc":"**Countrywise ready\/emerging workforce to take up the challenges in different fields with years of experince**<br>\nDealing with response to question no Q3,Q7  and Q8 , refer table of questions displayed at top","b1a9b137":"Models being consistently accurate is the main key performance indicator for most of the organization. Having such models itself will attract more business and hence the revenue. <br>\nWe see overwhelming response for these options by Data Scientists with 56% and 46% respectively ","f65a0fb7":"1. Almost 46% of students either have or  aspire to have masters in near future. <br>\n1. 14 % are for PHD","0699eb59":"Data Scientists in India are drawing somewhat same salary what other Titles\/positions are drawing. We may need to look at the age\/experience of the respondents who has selected Data Scientist as their Title. ","1a773cfd":"**Functions to search the questions and plot the response**","891b520c":"It makes sense that Mathematics or Stats can land you the role offering the highest possible paying package","7babe564":"Lets verify these numbers against Respondents current titles\/roles","9cc7ba48":"**We have a large group of respondents from India who are very young in experience ** <br>\nWe see response in great numbers from Students , Data Scientists and data analyst in the experience range 0 to 2","f21237c3":"**USA**\n------------\n**Highest paying Fields**","94c18ca6":"Most of the Data scientists have the opinion that coding standards should be respected and code should be human readable. It becomes easy to refer the code for future enhancements we foresee in the same model.","f5f308f5":"**Analyzing the Future Workforce**\n------\n<p><img src=\"https:\/\/www.brightermonday.co.ke\/blog\/wp-content\/uploads\/sites\/12\/2017\/09\/Featured-How-To-Attract-The-Workforce-Of-The-Future.png\" align=\"left\" height=\"200\" width=\"300\" margin=\"0 auto\" \/> <br>  Another year with ovewhelming response to ML & DS survey. Special thanks to Kaggle community for conducting these surveys which helps Aspiring data scientists like us to learn about the current trend and for opening up the wide array of information to refer.\n <\/p>\n <br>Last year I started reskilling myself in Data science and didnt have much hands on experience of using Python\/R. I picked 2017 survey data as my 1st project\/kernel on Kaggle and was truly amazed by the high quality kernels published by other kagglers and their work became my source of learning. All my answers to get the correct plot\/visualization were answered and it stopped my endless browsing time looking for help in stack overflow.\n<br>\n Below is the the link of previous project. <br>\n[2017 DS & ML survey](https:\/\/www.kaggle.com\/shelars1985\/unveiling-the-power-of-superheroes-of-21st-century). \n\nThis time too i picked \"2018 DS & ML survey\" data and I am hopeful of drawing valuable insights in this kernel <br>","b98a62e3":"<p><img src=\"https:\/\/insights.dice.com\/wp-content\/uploads\/2016\/02\/Screen-Shot-2016-02-11-at-11.30.47-AM.png\" align=\"left\" height=\"250\" width=\"250\" margin=\"0 auto\" \/><br> <br><b>Which Title\/profession draws good amount of money<\/b><br>Note : Not all respondents revealed their salary , so you will find a different result below with Data Scientists being at the top with most responses. \n <\/p>\n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>\n\n","654e9a01":"We see very few Data scientists and software engineers have answered that they have not used this service and AWS is most used tool by Data Scientists. <br>\n<p><img src=\"https:\/\/www.cloudbility.com\/club\/wp-content\/uploads\/2017\/09\/1506305688858-1.png\" align=\"left\" height=\"100\" width=\"100\" margin=\"0 auto\" \/>Amazon Web Services offers reliable, scalable, and inexpensive cloud computing services. Its first 1 year of free usage is again a crowd puller for young data scientists. After learning new tools and techniques and gaining enough confident one can start knowing the essense of cloud computing by using AWS <\/p>\n","33a8ae35":"**We see a great response to Demographic Questions and answers to these questions helps us to categorize\/group answers to non demographic questions** <br>\nWhat exactly I mean by above statement : for eg. Create a groups\/subgroups of countries and group response to non demographic questions to learn the trend  across countries.","37c26076":"We have around 25% indians and 27% Americans confirming that they are Definately a data scientists.","77b97103":"We have respondents in great numbers with undergrad degree in Computer Science and Engineering software or non software related field along with Mathematics who aspire to achieve Masters compared Doctoral degree.\n\n**Some interesting findings** \n1. We see respondents with undergrad degree in<font color=\"Green\"> Physics or Astronomy <\/font> are more determined to have Doctoral degree than Masters so the numbers are little more compared to candidate for Masters.\n1. Same goes for <font color=\"Green\">medical or life science field<\/font> we have numbers equal to Masters here.","d942b22d":"Treating the unfair bias in the datasets or algorithm is crucial and should be addressed in order to have a good and fair model .\nTake an example of famous dataset of credit card fraud transaction dataset found in kaggle,  In this dataset you will find around 99% of the data is with label 1 which is a good transaction and very few entries are with 0 which are anamolous transactions. Such kind of datasets need a completely different strategy and significant amount of time deciding the appropriate models.","56dcaf4e":"**Lets Take a look at all the questions from Schema with total no of responses registered against them**  <br>\nNote: We will use Question nos in the rest of our notebook for ease of coding.","1562de40":"Data Scientists in USA are drawing good amount of money bust still we need to compare Age of the respondents here .","c6674a66":"**We see almost 82% of response came from males which is same figure from 2017 survey. ** <br>\nLets quickly visit Q3 to see whether this big no contributed by any particular country ","871c4705":"Kaggle , Google and Github are most used platforms for finding the public dataset.","284d5b96":"**Countrywise distribution of respondents who have attained or foreseen Highest level of education**","1dfe0670":"Mid size Organizations which are  planning to undergo digital transformation are in need to cut down the costs of setting up big data infrastructure. Instead of having a team of big data experts to set up infrastructure these big data and analytics product will manage your needs at affordable rates. We see various products again offerred by technology giants like Google,Microsoft and Amazon.","912b5049":"Job descriptions for Data scientist posted on all Job related portals usually demands either **Masters or a PHD** in Engineering or related fields. Lets visualize this using heatmap","09215947":"1. Around 50% respondents from USA are doing Masters\/have masters \n1. Around 50% respondents from India have bachelor degree\/will earn ","95bbbcf5":"**India**\n-------------------\n**Highest Paying Fields**","242a011a":"**Years of experience in their respective fields**","96174013":"Lets break above graph for two countries USA and India to know more about which Title attracks how much money in these countries.","705b682c":"1. We have a good no of response from Studenrs , Software engineers , Data Analyst and Data Scientists. <br>\n1. Data scientists are seen in good numbers from all range of Experience here. ","b2c7973e":"**Salaries drawn as you grow in experience ** \n","7056b05c":"We have around 5k resopndets which spends around 50 to 74 % of time coding but above raph is surely not super intuitive and doesnt tell exactly respondents from which group spends how much time in coding. Lets take help of stackbar to club the above response with Q6 to know who spends how much time.","e743afe2":"1. from above heatmaps it is pretty clear that most of the **Respondents are from Computer\/Technology field for almost all the countries** and <font color=\"Red\">the response 'I am student' and 'Academic\/Education' can be delusional <\/font>as there are high chances that these students\/Professionals again belong to Computer science\/Information technology courses or will choose their career in the same field. \n1. We have a very <font color=\"Green\">big workforce between 0 to 5 years of experience. <\/font> \n1. **One more Influential factor in growing popularity in India among young workforce for Data Science and Machine learning :**\nAll the major IT giants are reskilling their young workforce and have made it mandatory to take up the courses in Big data and Analytics field. \n1. It will be interesting to know about respondents choosing for shift in their career after spending more than 5 years in their current job ","499e29e2":"Now it all make sense who is involved how much percentage of time exploring model insights <br>\n**Its natural for Data Scientist be involved more than 50% of his time in exploring model insights right from Validation, Model evaluation and Model selection.**","dee0170f":"**30+ experienced respondents in India**","d41eb834":"**When questions asked with aim to understand professional activity responses started descreasing.**<br>\nThere can be many reasons behind this.\n1. students who took the surveys are yet to start their professional career with no real experience have may skipped the questions.\n1. We may have missing data because of the interest lapse from the respondets after answering so many questions.\n\n","3730db2f":"**Lets find out proportion countrywise expressed in percentage**","cb7b44ca":"1. We can clearly see how popular python is among all crowd compared to R, More than 60% from each age group prefers Python  and more than 80 % Data Scientists are using Python\n\n1. R usage is less among students and Software engineers as we see a mere 20% and 11% usage by them respectively\n","fa065acb":"Lets validate above response by comparison with Title\/Role of the respondents.","120b8585":"Data Scientists have to take the informed decision at every step of Data science lifycycle and Below circustances warrant exploration of model insights and interpretation of models prediction.\n1. Models which meant to produce Insights (eg. Explantory Models).\n1. New ML model or new dataset need to undergo hypothesis tests like A\/B testing or other statistical tests.\n1.  when we believe our model is production ready or is it really a value add confirming ROI","9f8f0640":"<p><img src=\"https:\/\/www.callcentrehelper.com\/images\/stories\/2010\/2017\/08\/survey-response-phone-orange-vector-760.jpg\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/><br> <br><b>Response to Demographic and non-demographic questions<\/b>\n <\/p>\n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>\n","ec34c450":"We have many respondents from student category with the claim of being a Data scientist or are confident of being a data scientist. Thanks to Massive open online courses designed to empower interested people with all the necessary materials to become data scientist.","fd1a282b":"**Experience in current role\/title of the respondents in USA**","13128047":"<p><img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*PPIp7twJJUknfohZqtL8pQ.png\" align=\"left\" height=\"200\" width=\"300\" margin=\"0 auto\" \/>Python is the most preferred language here. One who has mastered the OOPS concept or come from a programmer background with C\/C++ or Java from their university days will obviuosly choose Python over other language. To back my claim lets take a look at below two graphs showing the percent share of preferred tools among respondents<\/p>","99a82fec":"**Data Scientist in India **","5d7ea1a9":"MySQL is used almost everywhere and hence it becomes must or good to have skills for a programmer. Recruiters judge the candidate by set of questions involving SQL queries and a good proficiency level in SQL decides your understanding and capability to learn and apply databse concepts. <br><br>\nCheck below graph for more clarification. MySql is the topmost preferred RDB used by Data Scientists and siftware Engineers.","af79c4ef":"<p><img src=\"http:\/\/www.khbuzz.com\/wp-content\/uploads\/2015\/08\/rupee-vs-dollar.jpg\" align=\"left\" height=\"300\" width=\"300\" margin=\"0 auto\" \/> <br><br><b>What influence your salary if you are from USA and  India<\/b><br>\n This subsection is dedicated to compare variuos influential factors deciding your salary in India and USA and I chose these countries because of the highest no of respondents from the same. \n <\/p>\n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>\n\n","d4a8679d":"<p><img src=\"https:\/\/dimensionless.in\/wp-content\/uploads\/2018\/09\/Jupyter.jpg\" align=\"left\" height=\"100\" width=\"100\" margin=\"0 auto\" \/>Jupyter\/Python being the most loved IDE is very easy to use and ensure a good readibility with features of both command line and embedded results just after the code. More than 75% Data scientists from the respondents prefer this IDE  <\/p> <br>\n\n<p><img src=\"https:\/\/onlineacademiccommunity.uvic.ca\/dsc\/wp-content\/uploads\/sites\/2373\/2017\/11\/RStudio.png\" align=\"left\" height=\"100\" width=\"100\" margin=\"0 auto\" \/>Rstudio is fav IDE among R users and ranked 2nd by the respondents . Its a great IDE tool recommended for newcomers as it provides a graphical workspace of objects you are currently working on. Rmarkdown helps you create high quality documents, presentation and dashboards <\/p>\n\n","f086775e":"<p><img src=\"https:\/\/banner2.kisspng.com\/20180403\/ujw\/kisspng-desk-office-clip-art-work-5ac44cd12354b3.0098918815228141611447.jpg\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/> <br><br><b>Knowing professional activities at granular level. <\/b> <br> All the below questions are role based questions and need to be compared with current role\/title respondents are holding with how many years of experience.\n <\/p>\n \n <p><img src=\"https:\/\/media.giphy.com\/media\/ABSESQ0lLAxSU\/source.gif\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>  <\/p>\n","79d84c6a":"**Comparing how Data scientists are paid in India and USA**\n1. USA sees a steady growth in income as you become more experienced\n1. Indians too sees a steady growth till the age group of 25-30 and we see a sudden change in the salary which equals to what an American earn after having 30+ years of experince.\n1. Field of  Online Business \/ Internet based sales helps you earn more compared to other fields in India\n1. USA has equal opportunity to earn more in almost all the fields. ","78bf7ca2":"1. Close to 50% Data scientist rely on Plot showing Actual results vs predicted results along with Examining feature importance .\n1. All other choises depends upon the complexity of the model hence their usage.","e53fbd8e":"Reducing bias and ensuring fairness is the main goal of DS and ML model for this we constantly need data about groups which is unfairly targeted.","0ff68b7d":"Online courses from Coursera , Udemy and others offers wide range of courses in Data science and machine learning in affordable prize but to really get the essense of what Data science and machine learning is all about one has to remain active on Kaggle. <br><br>\nIt was a difficult journey for a person like me who has more than 11 years of experince in Mainframe and I am still part of it.  Finding a time to search dataset and practise on my own and staying focused and inspired was a tedius task for me. But Kaggel made it all easy for a person like me to learn and apply the knowledge.","2abcf8b9":"1. Coursera's association with the reputed Universities to offer best quality content along with the certificate of completion which is awarded after taking up challenging Excercise makes them fav among all aspiring data scientists. \n1. We see around 54% data scientist endorsing Coursera as a best online learning platform.\n1. Coursera is pretty famous with almost all experienced respondents here.","7f0d167e":"After working in the industry Data Scientists and Software engineers posses good amount of working knowledge of using cloud computing tools which is evident from above percent share from their group.","e7547d61":"We know USA and India is leading the pack in response so it will be unfair if we compare all the countries with each other to know about the gender distribution. So to understand the share countrywise we need percent distribution.<br><br>\n**Lets checkout the countries with less response overall**\n<font color=\"Green\">We see good percentage of women from Tunnisia and Malaysia representing their country compared to the men and other gender<\/font> <br>\n\nHover over other countries to know the percetage of the different genders who took this survey","88ff4668":"**Data Scientist in USA**","c0bc0160":"1. Analysis and understanding data to influence business and product is the essential skillset for a data scientist and in order to understand the business and value add one should have a good understanding of that particular domain.\n1. Both Data Analysts and Data Scientists are putting more than 60 % of time in Analysis. \n1. Then we see Data scientist involved equally in Building prototype and running machine learning service.","64bb03aa":"**Activities Performed by Respondents with different Title\/Role**","34790349":"1. more no of Young crowd seems to have used almost all data visualization libraries , hence the response by age group 1-2. \nand the pecentage slowly drops down as we move across more experienced resource.  From Data scientists group we see good amount \n\n1. Matplotlib is a plotting library for the Python programming language and starting point when we step into programming world of Python for data science\n\n1. Seaborn\u00a0is a visualization library based on matplotlib. It seeks to make default data visualizations much more visually appealing. It also has the goal of making more complicated plots simpler to create. It does integrate well with\u00a0pandas. \n\n1. ggplot2 is a data visualization package for the statistical programming language R.\n\n1. Plotly is a great tool to generate interactive plots and it is compatible with both R and Python. If you check out the kernels by almost all top kagglers they use Plotly library the most for data visualization.","31b1a074":"<p><img src=\"https:\/\/www.scipy-lectures.org\/_images\/scikit-learn-logo.png\" align=\"left\" height=\"200\" width=\"200\" margin=\"0 auto\" \/>scikit-learn is a Python module for machine learning and before taking the giant step towards Deep learning almost all Data scientist start their journey by exploring scikit-learn first. Around 60% respondents from the range 1-2 years and more than 70% data scientists in this survey are using scikit-learn <\/p> <br><br>\n\n<p><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcS5V8qUdy6f9DBenaFPVnmzU1gG_alpYA6gnScMwW0dY8v3tqmF\" align=\"left\" height=\"100\" width=\"100\" margin=\"0 auto\" \/>TensorFlow is an open source software library for numerical computation using data flow graphs. <\/p> <br><br>\n\n<p><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSaxvMhL7e8Gr_ozJ9606PLzhn1Og2vJ5Kp9fG4DmHcLrX4jixyTQ\" align=\"left\" height=\"100\" width=\"100\" margin=\"0 auto\" \/><br>Deep Learning library for Python. Convnets, recurrent neural networks, and more. Runs on TensorFlow or Theano. <\/p>","b34d630a":"Close to 40% data scientists thinks its a time consuming activity which prevents them making their work even easier and reusable.\n","a4b41f9d":"Machine learning requires a broad set of powerful compute options, ranging from GPUs for compute-intensive deep learning, to FPGAs for specialized hardware acceleration, to high-memory instances for running inference. <br>\n**Amazon EC2 provides a wide selection of instance types optimized to fit machine learning use cases**. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity and give you the flexibility to choose the appropriate mix of resources, whether you are training models or running inference on trained models.","ea8ac32a":"**We see United states and India are again taking leads in taking the Kaggle survey like in 2017** <br><br>\n**A quick look at countrywise Gender distribution expressed in percentages**"}}