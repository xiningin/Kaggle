{"cell_type":{"076fa29c":"code","aae6dd53":"code","56668d25":"code","38fd469b":"code","2b382839":"code","fc03c8f1":"code","ad1a1597":"code","a6ae5e45":"code","4cba4178":"code","3aa5bb3f":"code","db9bbfb6":"code","eb1b8130":"code","bc377bec":"code","2ba76a16":"code","5c8610e6":"code","fa38d843":"code","7d438afd":"code","4e2718d0":"code","40acb78c":"code","cf889cee":"code","7cfff9ba":"code","826d693f":"code","1bf64998":"code","b2478146":"markdown","448d75be":"markdown","c9c770f6":"markdown","a3b77637":"markdown","479ac128":"markdown","cfdc4d7f":"markdown"},"source":{"076fa29c":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings                        # to hide error messages(if any)\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","aae6dd53":"df = pd.read_csv('..\/input\/Dataset_spine.csv')\n\n#Renaming the columns\ndf = df.rename(columns = {'Col1':'pelvic_incidence',\n                          'Col2':'pelvic tilt',\n                            'Col3':'lumbar_lordosis_angle',\n                            'Col4':'sacral_slope',\n                            'Col5':'pelvic_radius',\n                            'Col6':'degree_spondylolisthesis',\n                            'Col7':'pelvic_slope',\n                            'Col8':'Direct_tilt',\n                            'Col9':'thoracic_slope',\n                            'Col10':'cervical_tilt',\n                            'Col11':'sacrum_angle',\n                            'Col12':'scoliosis_slope',\n                            'Class_att':'label'})\n\n#Removing the unnecessary colum('Unnamed: 13')\ndf = df.drop('Unnamed: 13', axis = 1)\ndf.head()","56668d25":"def label_values(label):\n    if label == 'Abnormal':\n        return 1\n    elif label == 'Normal':\n        return 0\n\n\ndf['label_value'] = df['label'].apply(label_values)","38fd469b":"df.head()","2b382839":"df.isnull().sum()","fc03c8f1":"df.shape","ad1a1597":"df.dtypes","a6ae5e45":"df.describe()","4cba4178":"#Generating heatmap\nplt.figure(figsize = (20,12))\nsns.heatmap(df.corr(), annot = True, cmap = 'Paired')\nplt.show()","3aa5bb3f":"sns.pairplot(df, hue = 'label')\nplt.show()","db9bbfb6":"#Count of the attribures\nsns.countplot(x = 'label', data = df)\nplt.show()","eb1b8130":"# importing the sklearn modules\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn import preprocessing","bc377bec":"#Listing features to be used for prediction\nfeatures = ['pelvic_incidence','pelvic tilt',\n'lumbar_lordosis_angle','sacral_slope',\n'pelvic_radius',\n'degree_spondylolisthesis',\n'pelvic_slope',\n'Direct_tilt',\n'thoracic_slope',\n'cervical_tilt',\n'sacrum_angle',\n'scoliosis_slope']","2ba76a16":"#Drawing box plots for the various featues in X\nfig, axes = plt.subplots(nrows=3, ncols=4, figsize=(10, 7))\nfor idx, feat in enumerate(features):\n    ax = axes[int(idx \/ 4), idx % 4]\n    sns.boxplot(x='label', y=feat, data=df, ax=ax)\n    ax.set_xlabel('')\n    ax.set_ylabel(feat)\nfig.tight_layout();","5c8610e6":"X = df[features]\ny =df['label_value']","fa38d843":"#Splitting the data set into training and test sets\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.33, random_state = 42)","7d438afd":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)","4e2718d0":"# Storing the predicted values in y_pred for X_test\ny_pred = logreg.predict(X_test)","40acb78c":"#Generating the cofusion matrix\ncnf_matrix = metrics.confusion_matrix(y_test,y_pred)\ncnf_matrix","cf889cee":"class_names = [0,1]\nfig,ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks,class_names)\nplt.yticks(tick_marks,class_names)\n\n#create a heat map\nsns.heatmap(pd.DataFrame(cnf_matrix), annot = True, cmap = 'YlGnBu',\n           fmt = 'g')\nax.xaxis.set_label_position('top')\nplt.tight_layout()\nplt.title('Confusion matrix', y = 1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nplt.show()","7cfff9ba":"print('Accuracy Score: ',metrics.accuracy_score(y_test,y_pred))","826d693f":"print('Precision Score: ',metrics.precision_score(y_test,y_pred))","1bf64998":"print('Recall Score: ',metrics.recall_score(y_test,y_pred))","b2478146":"Giving a numerical value to the label attribute:<br\/>\n    **0** for **normal** <br\/>\n    **1** for **abnormal**","448d75be":"There are no empty\/missing values in the data frame","c9c770f6":"A new column called label value is added","a3b77637":"The features described in the above data set are:<br\/>\n\n**1. count** tells us the number of NoN-empty rows in a feature.\n\n**2. mean** tells us the mean value of that feature.\n\n**3. std** tells us the Standard Deviation Value of that feature.\n\n**4. min** tells us the minimum value of that feature.\n\n**5. 25%**, **50%**, and **75%** are the percentile\/quartile of each features.\n\n**6. max** tells us the maximum value of that feature.","479ac128":"## Data set summary","cfdc4d7f":"Checking for null values in the data frame"}}