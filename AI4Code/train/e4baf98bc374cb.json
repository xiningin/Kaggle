{"cell_type":{"7c7ed9e4":"code","1f2bc1eb":"code","2f7e4349":"code","7441f42b":"code","49da29f0":"code","f6d7cc44":"code","957d9dbe":"code","a95be38d":"code","d1265655":"code","3dfd2327":"code","5c1cd792":"code","09c3dca8":"code","560c0564":"code","2b8d1287":"code","543cd0ab":"code","f2b620fe":"code","df545d10":"code","cd2dae2d":"code","03deb0d3":"code","b9cf12ca":"code","8110e983":"code","1aea6e62":"code","6c4be785":"code","a86c5a8d":"code","0e28582e":"code","63381ae5":"code","70664f01":"code","3bbb95b6":"code","9f735cd4":"code","13545fd1":"code","ad2357fc":"code","dc268465":"code","53012531":"markdown"},"source":{"7c7ed9e4":"#Importing Libraries\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression","1f2bc1eb":"#Loading Data\ndata= pd.read_csv(\"..\/input\/Combined_News_DJIA.csv\")\ndata.head(4)","2f7e4349":"#Divide data into train and test\ntrain = data[data['Date'] < '2015-01-01']\ntest = data[data['Date'] > '2014-12-31']","7441f42b":"#Combining all 25 headlines of training dataset into a single string\ntrainheadlines = []\nfor row in range(0,len(train.index)):\n    trainheadlines.append(' '.join(str(x) for x in train.iloc[row,2:27]))","49da29f0":"#Setting up CountVectorizer\ncv = CountVectorizer( min_df=0.1, max_df=0.7, max_features = 200000, ngram_range = (1, 1))\ncv_train = cv.fit_transform(trainheadlines)","f6d7cc44":"#Setting up LogisticRegression model\nlogt = LogisticRegression()\nmodel = logt.fit(cv_train, train[\"Label\"])\nmodel","957d9dbe":"#Combining all 25 headlines of testing dataset into a single string\ntestheadlines = []\nfor row in range(0,len(test.index)):\n    testheadlines.append(' '.join(str(x) for x in test.iloc[row,2:27]))","a95be38d":"#Making Predictions\ncv_test = cv.transform(testheadlines)\ny_pred=logt.predict(cv_test)","d1265655":"#Checking accuracy_score\nfrom sklearn.metrics import accuracy_score\naccuracy_score(test['Label'],y_pred)","3dfd2327":"#Advanced modeling using 2-gram weights\nad_cv = CountVectorizer( min_df=0.03, max_df=0.97, max_features = 200000, ngram_range = (2, 2))\ncv_train2g = ad_cv.fit_transform(trainheadlines)","5c1cd792":"log1 = LogisticRegression()\nmodel1 = log1.fit(cv_train2g, train[\"Label\"])\nmodel1","09c3dca8":"cv_test2g = ad_cv.transform(testheadlines)\nY_pred1 = log1.predict(cv_test2g)","560c0564":"from sklearn.metrics import accuracy_score\naccuracy_score(test['Label'],Y_pred1)","2b8d1287":"#Confusion_matrix\nprint(pd.crosstab(test[\"Label\"], Y_pred1, rownames=[\"Actual\"], colnames=[\"Predicted\"]))","543cd0ab":"# Importing RandomForestClassifier\nfrom sklearn.ensemble import RandomForestClassifier","f2b620fe":"cv = CountVectorizer( min_df=0.1, max_df=0.7, max_features = 200000, ngram_range = (1, 1))\ncv_train = cv.fit_transform(trainheadlines)","df545d10":"rfc=RandomForestClassifier()\nforest = rfc.fit(cv_train,train[\"Label\"])\nforest","cd2dae2d":"cv_test = cv.transform(testheadlines)\ny_predrfc=rfc.predict(cv_test)","03deb0d3":"from sklearn.metrics import accuracy_score\naccuracy_score(test['Label'],y_predrfc)","b9cf12ca":"#Advanced modeling using 2-gram weights\nad_cv = CountVectorizer( min_df=0.03, max_df=0.97, max_features = 200000, ngram_range = (2, 2))\ncv_train2g = ad_cv.fit_transform(trainheadlines)","8110e983":"forest_2g = rfc.fit(cv_train2g, train[\"Label\"])\nforest_2g","1aea6e62":"cv_test2g = ad_cv.transform(testheadlines)","6c4be785":"Y_predrfc1 = rfc.predict(cv_test2g)","a86c5a8d":"from sklearn.metrics import accuracy_score\naccuracy_score(test['Label'],Y_predrfc1)","0e28582e":"# naive_bayes \nfrom sklearn.naive_bayes import MultinomialNB","63381ae5":"mnb=MultinomialNB(alpha=0.01)\nmnbmodel= mnb.fit(cv_train, train[\"Label\"])\nmnbmodel","70664f01":"y_predmnb2=mnb.predict(cv_test)","3bbb95b6":"from sklearn.metrics import accuracy_score\naccuracy_score(test['Label'],y_predmnb2)","9f735cd4":"mnb2gram = mnb.fit(cv_train2g, train[\"Label\"])\nmnb2gram","13545fd1":"Y_predmnb2 = mnb.predict(cv_test2g)","ad2357fc":"from sklearn.metrics import accuracy_score","dc268465":"accuracy_score(test['Label'],Y_predmnb2)","53012531":"## Applying few more algorithms to predict more accurate result"}}