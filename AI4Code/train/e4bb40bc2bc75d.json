{"cell_type":{"a46be0a8":"code","6f0bebb6":"code","40415644":"code","6f513d5c":"code","644db817":"code","257c40e0":"code","9a6cc0af":"code","082da28a":"code","ab9577ab":"code","a1c89522":"code","415faf07":"code","6efb12c6":"code","5190db5b":"code","e4a75203":"code","b764f353":"code","5cc0dfe1":"code","0b596e99":"code","08b10324":"code","289ab75e":"code","6093b72b":"code","3152dbfc":"code","fe56c88b":"code","5820f403":"code","837be3a2":"code","f258b1c4":"code","383fa520":"code","0bbf1f3b":"code","0455ba04":"code","0a8ab7ba":"code","bf8a300c":"code","a2da6f20":"code","60ab33ba":"code","4716049d":"code","c22b37eb":"code","b6ad8e5c":"markdown","caada652":"markdown","8d75329e":"markdown","caa8a75d":"markdown","7e43e450":"markdown","93e94ba6":"markdown","87306080":"markdown","0d7df9a7":"markdown","9bf43001":"markdown","726df767":"markdown","15e343e3":"markdown","bb95a4f5":"markdown","92139417":"markdown","9b82f03f":"markdown","caec4ed0":"markdown","809b7d6c":"markdown","3a63d673":"markdown","8c86f043":"markdown","7f480eb7":"markdown","3763eb0b":"markdown","2e65f476":"markdown","a4be9a7d":"markdown","612fcce9":"markdown","57b930ee":"markdown","a7cfa4b3":"markdown","e14576b2":"markdown","d84e946a":"markdown","6d9df091":"markdown","fde1fe4a":"markdown","70e01c8e":"markdown","4afd5c90":"markdown","98e9aead":"markdown"},"source":{"a46be0a8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","6f0bebb6":"#creating data with the help of numpy\nx = np.array([1,2,3,4,5,6,7])\ny = x\n\nplt.figure()\nplt.scatter(x,y);","40415644":"colors = ['green']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y,c=colors,s=100)","6f513d5c":"colors = ['green']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y,c=colors,s=100)\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.legend()\nplt.title('Sample Scatter Plot');","644db817":"plt.figure()\nplt.scatter(x[:-1], y[:-1], c='green', s=100, label='Positive')\nplt.scatter(x[-1], y[-1], c='red', s=100, label='Negative')\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.legend(loc = \"upper left\", fontsize = 13)\nplt.title('Sample Scatter Plot');","257c40e0":"df1 = pd.read_csv('..\/input\/youtube-video-likes-by-corey-schafer-github\/vidlikes.csv')\nprint(df1.head())\n\nview_count = df1['view_count']\nlikes = df1['likes']\nratio = df1['ratio']","9a6cc0af":"plt.figure()\nplt.scatter(view_count, likes, c=ratio, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes');","082da28a":"plt.figure(figsize=(7,5))\nplt.scatter(view_count, likes, c=ratio, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)\n\nplt.xscale('log')\nplt.yscale('log')\n\ncbar = plt.colorbar()\ncbar.set_label('Like Dislike Ratio')\n\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes');","ab9577ab":"linear_data = np.array([1,2,3,4,5,6,7,8])\nexponential_data = linear_data**2\n\n# plot the linear data and the exponential data\nplt.plot(linear_data, '-o', exponential_data, '-o')","a1c89522":"plt.plot(linear_data, '-o', exponential_data, '-o')\n\nplt.xlabel('X-axis')\nplt.ylabel('y-axis')\nplt.title('Linear vs Exponential')\n# add a legend with legend entries (because we didn't have labels when we plotted the data series)\nplt.legend(['Linear', 'Exponential'])\n\nplt.fill_between(range(len(linear_data)), \n                       linear_data, exponential_data, \n                       facecolor='blue', \n                       alpha=0.25);","415faf07":"ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\npython = [45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640]\njava = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583]\nOthers = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\n\nplt.plot(ages_x, python, 'b', linewidth=3, label='Python')   \nplt.plot(ages_x, java, color='#adad3b', linewidth=3, label='Java')\nplt.plot(ages_x, Others, color='black', linestyle='--', label='All Devs')\n\nplt.title('Median Salary by Age')\nplt.xlabel('Ages')\nplt.ylabel('Median Salary')\nplt.legend(fontsize=12);   #necessary to give labels to the line\/ You can also pass label as argument inside legend","6efb12c6":"linear_data = np.array([1,2,3,4,5,6,7,8])\nexponential_data = linear_data**2\nxvals = range(len(linear_data))\nxvals1 = []\nfor item in xvals:\n    xvals1.append(item+0.3) #Because width of first bar is 0.3\n    \nplt.bar(xvals, linear_data, width = 0.3, color='red', label='Linear')\nplt.bar(xvals1, exponential_data, width=0.3, color='blue', label='Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize=13);","5190db5b":"plt.bar(xvals, linear_data, width = 0.3, color='b', label='Linear')\nplt.bar(xvals, exponential_data, width = 0.3, bottom=linear_data, color='r', label='Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize=13);","e4a75203":"languages =['Python', 'SQL', 'Java', 'C++', 'JavaScript']\npos = np.arange(len(languages))\npopularity = [56, 39, 34, 34, 29]\n\nplt.bar(pos, popularity, align='center')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8);","b764f353":"# change the bar colors to be less bright blue\nbars = plt.bar(pos, popularity, align='center', linewidth=0, color='lightslategrey')\n# make one bar, the python bar, a contrasting color\nbars[0].set_color('#1F77B4')\n\n# soften all labels by turning grey\nplt.xticks(pos, languages, alpha=0.8)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\n\n#remove ytick labels\nplt.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)\n\n# remove the frame of the chart\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# direct label each bar with Y axis values\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                 ha='center', color='w', fontsize=11)","5cc0dfe1":"plt.figure(figsize=(8,4))\n\nplt.subplot(1,2,1) #number of rows, number of columns, current position\nplt.bar(pos, popularity, align='center')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\n\nplt.subplot(1,2,2) #number of rows, number of columns, current position\nbars = plt.bar(pos, popularity, align='center', linewidth=0, color='lightslategrey')\nbars[0].set_color('#1F77B4')\nplt.xticks(pos, languages, alpha=0.8)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\nplt.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                 ha='center', color='w', fontsize=11)\n    \nplt.tight_layout(pad=3)","0b596e99":"from sklearn.datasets import load_iris\n\niris = load_iris()\ndf = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n                     columns= iris['feature_names'] + ['target'])\ndf.head()","08b10324":"plt.figure(figsize=(11,7))\n\nfor i in range(1, len(df.columns)):\n    plt.subplot(2, 2, i)\n    plt.scatter(df.iloc[:,i-1], df['target'])\n    plt.title(df.columns[i-1])\n    plt.ylabel('Target')\n    \nplt.tight_layout(pad=3)","289ab75e":"import seaborn as sns\n\nsns.pairplot(data=df, x_vars='sepal length (cm)', y_vars='sepal width (cm)', hue='target');","6093b72b":"g = sns.pairplot(data=df, x_vars=df.columns[:-1], y_vars=df.columns[:-1], hue='target')\ng.fig.suptitle('Relationship Among Features', y=1.08, fontsize=20);","3152dbfc":"sns.boxplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\");","fe56c88b":"sns.swarmplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\");","5820f403":"sns.violinplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\");","837be3a2":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nsns.regplot(df['petal length (cm)'], df['petal width (cm)'])\n\nplt.subplot(1,2,2)\nsns.regplot(df['sepal length (cm)'], df['sepal width (cm)'])\n\nplt.tight_layout(pad=3)","f258b1c4":"sns.countplot(x='target', data=df);","383fa520":"list1 = np.random.randint(2, size=50)\ntest = pd.DataFrame(list1, columns=['int'])\n\nsns.countplot(x='int', data=test);","0bbf1f3b":"speed = [0.1, 17.5, 40, 48, 52, 69, 88]\nlifespan = [2, 8, 70, 1.5, 25, 12, 28]\nindex = ['snail', 'pig', 'elephant', 'rabbit', 'giraffe', 'coyote', 'horse']\ndf1 = pd.DataFrame({'speed': speed, 'lifespan': lifespan}, index=index)\nax = df1.plot.bar(rot=0)","0455ba04":"sns.heatmap(df.corr(), annot=True);","0a8ab7ba":"df.iloc[0,0] = np.NaN\ndf.iloc[10,0] = np.NaN\ndf.iloc[20,0] = np.NaN\ndf.iloc[30,0] = np.NaN\ndf.iloc[32,0] = np.NaN\ndf.iloc[34,0] = np.NaN\ndf.iloc[35,0] = np.NaN\ndf.iloc[36,0] = np.NaN\n\ndf.iloc[10,2] = np.NaN\ndf.iloc[110,2] = np.NaN\ndf.iloc[120,2] = np.NaN\ndf.iloc[130,2] = np.NaN\ndf.iloc[132,2] = np.NaN\ndf.iloc[134,2] = np.NaN\ndf.iloc[135,2] = np.NaN\ndf.iloc[136,2] = np.NaN","bf8a300c":"sns.heatmap(df.isnull(), yticklabels=False, cmap='plasma');","a2da6f20":"import plotly.express as px","60ab33ba":"fig = px.bar(y=df1.speed,x=df1.index,title='Speed of animals',color_discrete_sequence=['#333333'])\nfig.show()","4716049d":"df1.sort_values(by='lifespan',inplace=True)\nfig = px.bar(y=df1.lifespan,x=df1.index,title='Life Span of animals',color_discrete_sequence=['#D63412'])\nfig.show()","c22b37eb":"fig = px.bar(df1,y=['speed', 'lifespan'],x=df1.index,title='Speed of animals',color_discrete_sequence=['#333333','#D63412'])\nfig.show()","b6ad8e5c":"![image.png](attachment:image.png)","caada652":"**The above plot Contains lots of junk, such as:**\n\n- No X-labels\n- Graph is about % popularity so need of Y-labels\n- Same color bars\n- Plot looks heavier\n\n**Let's dejunkify the plot**","8d75329e":"# Pair Plots\n\nA pairs plot allows us to see both distribution of single variables and relationships between two variables. Simple 2D Scatter plot is used to understand the relationship or pattern between two variables or dimensions in our dataset. A 3D plot will be used for three variables or dimensions.","caa8a75d":"<center><h1> 10 Simple Rules for Better Plotting<\/h1><\/center>\n\n* Rule 1: Know Your Audience.\n> You plot has to be designed with your audience in mind. It's not the same to communicate with professional scientist, upper managment or with general public.\n> Remmember that when you are thinking about the plot.\n* Rule 2: Identify Your Message\n> Your figure must containg a message in order to be succeful. Take your time to think about the message you want to send, and once it's clear for you\n> starts developing the figure.\n* Rule 3: Adapt the Figure to the Support Medium\n> This is a more practical rule. Know where your figures will be presented and adapt the figure accordingly.\n> It's not the same if the figure will be in a powerpoing, journal or an email.\n> If it's part of a bigger presentatio, make the lines bolder, the plot simpler so that the viewer can instantly\n> understand it.\n* Rule 4: Captions Are Not Optional\n> Provide additional information or data for facilitate the comprehension of the plot.\n> In a bar chart, if it's relevant, add the numbers to facilitate the comparison.\n> If needed, add an example about how to read the plot.\n* Rule 5: Do Not Trust the Defaults\n> The defaults of any plotting library are good enough for any plot but they are best for none.\n> Adjust the color palletes, the fontsize, title, spines, axies and so on for the figure.\n> To make it more readable and more nicer to look at.\n* Rule 6: Use Color Effectively\n> We have associated feelings with specific colors so use them accordingly. There are 3 colorsmaps, use the most relevant for your data:\n> 1. Sequential: one variation of a unique color, used for quantitative data varying from low to high.\n> 2. Diverging: variation from one color to another, used to highlight deviation from a median value.\n> 2. Qualitative: rapid variation of colors, used mainly for discrete or categorical data.\n* Rule 7: Do Not Mislead the Reader\n> Try to show the data as objectively as possible. Some tools are very bad by nature: like pie charts or 3D charts when comparing quantities.\n> As a rule of thumb, make sure to always use the simplest type of plots that can convey your message and make sure to use labels, ticks, title, and the full range of values when relevant.\n* Rule 8: Avoid \u201cChartjunk\u201d\n> Chartjunk refers to all the unnecessary or confusing visual elements found in a figure that do not improve the message (in the best case) or add confusion (in the worst case). \n> For example, chartjunk may include the use of too many colors, too many labels, gratuitously colored backgrounds, useless grid lines, etc.\n* Rule 9: Message Trumps Beauty\n> In science, message and readability of the figure is the most important aspect while beauty is only an option.\n* Rule 10: Get the Right Tool\n> There are a lot of libraries that you can use to make plots and figures. You have plenty of libraries in Python, R, Javascript, Matlab, Excel, Tableau and others.\n> Use the right tool for each plot.","7e43e450":"# Violin Plots\n\nIn general, violin plots are a method of plotting numeric data and can be considered a combination of the box plot with a kernel density plot. In the violin plot, we can find the same information as in the box plots:\n- median (a white dot on the violin plot)\n- interquartile range (the black bar in the center of violin)\n- the lower\/upper adjacent values ","93e94ba6":"**The yellow lines indicate the null values**","87306080":"# Box Plots\n\nA box plot is a graphical rendition of statistical data based on the minimum, first quartile, median, third quartile, and maximum. ","0d7df9a7":"**Not effective because numbers are comparatively very large!, Apply log to avoid that.**","9bf43001":"**Stackoverflow developing survey**","726df767":"<h1 style=\"color:blue\">Contents:<\/h1>\n\n<b>\n<ul>\n<li> Scatter Plots\n<li> Line Plots\n<li> Bar Plots\n<li> Sub Plots\n<li> Pair Plots\n<li> Box Plots\n<li> Swarm Plots\n<li> Violin Plots\n<li> Regression Plots\n<li> Count Plots\n<li> HeatMap\n<\/ul> \n    \n    \n-> Bonus: 10 Simple Rules for better plotting.","15e343e3":"# Regression Plots\n\nScatter plot + Best fitiing line = Regression Plots","bb95a4f5":"**Let's compare two figure we just created above with Subplot**","92139417":"<center>\n<h1 style=\"color:green\">Don't forget to upvote if you like it! It's free! :)<\/h1>\n<h1 style=\"color:green\">Thanks and be safe!<\/h1>\n<\/center>","9b82f03f":"# Scatter Plots\n\nA graph in which the values of two variables are plotted along two axes, the pattern of the resulting points revealing any correlation present.","caec4ed0":"**This indicates data is in equal proportion**","809b7d6c":"**Data from stackoverflow developing survey**","3a63d673":"**Can also be used to analyze null values**","8c86f043":"# Line Plots\n\nA line plot is a way to display data along a number line. Line plots are also called dot plots.","7f480eb7":"* **The art of Data Representation is plots.**\n\n* **This Notebook contains all kind of plots and basic examples to the advnace real world problem solutions.**\n\n* **You will learn how and when to use plots and some effecient plot techniques.**\n\n* **Easy Interactive plots with Plotly**\n","3763eb0b":"# Swarm Plots\n\nA swarm plot is very similar to a strip plot, yet the locations of points are adjusted automatically to avoid overlap even if the jitter value is not applied. These plots resemble bees swarming","2e65f476":"# Count Plots\n\nSeaborn is a module in Python that is built on top of matplotlib that is designed for statistical plotting. ... One of the plots that seaborn can create is a countplot. A countplot is kind of likea histogram or a bar graph for some categorical area.","a4be9a7d":"**Example of a youtube video data**","612fcce9":"# Bar Plots\n\nA bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.","57b930ee":"![image.png](attachment:image.png)","a7cfa4b3":"# Interactive plots\nNow that you have learned basic plots and i know, you we be now excited to learn interactive plots. Plotly makes it easy to plot interactive plots.","e14576b2":"# HeatMap\n\n**Generally used to describe correlation among data**","d84e946a":"# Sub Plots","6d9df091":"**Let's represent this data with Scatter plots**","fde1fe4a":"**We aren't able to add legend so let's use different technique**","70e01c8e":"# Count plot to comapre two feature","4afd5c90":"**Subplots for iris_datasets**","98e9aead":"<center><h1 style=\"color:red\">Plotting Techniques in Python<\/h1><\/center>"}}