{"cell_type":{"a6c1eaa8":"code","06e6543b":"code","25add6ab":"code","a34b376e":"code","dc2e1868":"code","f3872c0d":"code","c4ff31ea":"code","1fda0b9f":"code","a9bb1872":"code","0711ff62":"code","8cd2d4cf":"code","fbf8fcca":"code","dfa438db":"code","2a39a95f":"code","54d18513":"code","fcb44629":"code","8687e398":"code","6c67ea96":"code","251e1580":"code","0bf44d2a":"code","d1d0925f":"code","4c3724f5":"code","dff676b7":"code","5eb7b82b":"code","71a4e6ac":"code","b28041bf":"code","feb35433":"code","56294790":"code","02310ff1":"code","20f91bff":"code","0238d2db":"markdown","5fb917b5":"markdown","4aa55985":"markdown","90817356":"markdown","a21dd30e":"markdown","e26d6285":"markdown","36e5a7a6":"markdown","5197ff6e":"markdown","bcd98ead":"markdown","db37b940":"markdown","c78d4736":"markdown","8607be37":"markdown","f4b4756a":"markdown","ab938c12":"markdown","df0a55a6":"markdown","e3265f56":"markdown","24f72e20":"markdown","3ee7b3ea":"markdown","34676d93":"markdown"},"source":{"a6c1eaa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfrom scipy import stats\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06e6543b":"df_stroke = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\ndf_stroke.head()","25add6ab":"df_stroke.info()","a34b376e":"df_stroke.describe()","dc2e1868":"df_stroke.columns = df_stroke.columns.str.lower()\ndf_stroke.columns.to_list()","f3872c0d":"df_stroke.duplicated().sum()","c4ff31ea":"missing_values=df_stroke.isnull().sum()\nmissing_values","1fda0b9f":"# Total cells in the dataset\ntotal_cells=np.product(df_stroke.shape)\nprint('Total cells in this dataset:',total_cells)","a9bb1872":"# Calculating the percentage of missing values:\ntotal_missing = missing_values.sum()\npercent_missing = (total_missing\/total_cells) * 100\nprint(\"Total missing values: {}  =  {:.2f} %\".format(total_missing, percent_missing))","0711ff62":"# Calculating the percentage of missing values in each column is often more meaningful to me\nprint('PERCENTAGE OF MISSING VALUES IN EACH COLUMN:\\n')\nfor col in df_stroke.columns:\n    missing = np.mean(df_stroke[col].isnull())\n    print('{}:  {:.2f}%'.format(col, missing*100))","8cd2d4cf":"# Showing rows where values for bmi are missing\nmissing_bmi=df_stroke[pd.isnull(df_stroke.bmi)]\nmissing_bmi.head(5)","fbf8fcca":"df_stroke[\"bmi\"] = df_stroke[\"bmi\"].fillna(\"Unknown\")\ndf_stroke.head()","dfa438db":"df_stroke.isnull().sum()","2a39a95f":"df_stroke.corr()","54d18513":"# Visualisation of the corralation table\ncorrelation = df_stroke.corr()\nplt.figure(figsize=(11,9))\nsns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)\nplt.title('Correlation Matric', size=17)\nplt.xlabel('Stroke Data')\nplt.ylabel('Stroke Data')\nplt.show()","fcb44629":"df_stroke.apply(lambda x: x.factorize()[0]).corr(method='pearson')","8687e398":"# Visualisation of the correlation table\ncorrelation_matrix = df_stroke.apply(lambda x: x.factorize()[0]).corr(method='pearson')\nplt.figure(figsize=(11,9))\nsns.heatmap(correlation_matrix, annot = True)\nplt.title(\"Correlation Matrix\")\nplt.xlabel(\"Stroke Data\")\nplt.ylabel(\"Stroke Data\")\nplt.show()","6c67ea96":"# Showing the highest correlations in descending order\ncorrelation_mat = correlation_matrix\ncorr_pairs = correlation_mat.unstack()\nsorted_pairs = corr_pairs.sort_values(kind=\"quicksort\", ascending=False).where(corr_pairs < 1.0)\nstrong_pairs = sorted_pairs[abs(sorted_pairs) > 0.1]\nprint(strong_pairs)","251e1580":"# Creating new columns with numeric values for gender and status\ndf_stroke['gender_number'] = np.where((df_stroke['gender'] == \"Female\"), 1, 0)\ndf_stroke['married_number'] = np.where((df_stroke['ever_married'] == 'Yes'),1, 0)\ndf_stroke.head()","0bf44d2a":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.countplot(x='ever_married',hue='gender_number', data=df_stroke, ax=ax[0])\nax[0].set_title('Patients Married', size=17, pad=17)\nax[0].set_xlabel('Ever Married', size=13, labelpad=11)\nax[0].set_ylabel('Count', size=13)\nax[0].legend(loc='upper right', title='Gender:', labels=['Female','Male'])\n\nsns.countplot(x='work_type',hue='gender_number', data=df_stroke, ax=ax[1])\nax[1].set_title('Worktype of all Patients', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\nax[1].legend(loc='upper right', title='Gender:', labels=['Male','Female'])\n\nplt.show()","d1d0925f":"heart_diseases = df_stroke.loc[(df_stroke.heart_disease == 1)]\nno_heart_disease = df_stroke.loc[(df_stroke.heart_disease == 0)]\n\nfig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.histplot(x='age',hue='gender_number', data=heart_diseases, ax=ax[0], bins=10)\nax[0].set_title('Patients with Heart Disease by Gender', size=17, pad=17)\nax[0].set_xlabel('Age', size=13, labelpad=11)\nax[0].set_ylabel('Count', size=13)\nax[0].legend(loc='upper left', title='Gender:', labels=['Female','Male'])\n\n\nsns.histplot(x='age', hue='gender_number',data=no_heart_disease, ax=ax[1], bins=10)\nax[1].set_title('Patients without Hypertension by Gender', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\nax[1].legend(loc='upper left', title='Gender:', labels=['Male','Female'])\n\nplt.xlim(0,85)\nplt.show()","4c3724f5":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.histplot(x='age',hue='gender_number', data=df_stroke, ax=ax[0])\nax[0].set_title('Patients with Heart Disease by Gender', size=17, pad=17)\nax[0].set_xlabel('Age', size=13, labelpad=11)\nax[0].set_ylabel('Count', size=13)\nax[0].legend(loc='upper left', title='Gender:', labels=['Female','Male'])\n\n\nsns.histplot(x='age', hue='gender_number',data=no_heart_disease, ax=ax[1], bins=10)\nax[1].set_title('Patients without Hypertension by Gender', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\nax[1].legend(loc='upper left', title='Gender:', labels=['Male','Female'])\n\nplt.xlim(0,85)\nplt.show()","dff676b7":"hypertension = df_stroke.loc[(df_stroke.hypertension == 1)]\nno_hypertension = df_stroke.loc[(df_stroke.hypertension == 0)]\n\nfig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.histplot(x='age',hue='gender_number', data=hypertension, ax=ax[0], bins=10)\nax[0].set_title('Patients with Hypertension by Gender', size=17, pad=17)\nax[0].set_xlabel('Age', size=13, labelpad=11)\nax[0].set_ylabel('Count', size=13)\nax[0].legend(loc='upper left', title='Gender:', labels=['Female','Male'])\n\n\nsns.histplot(x='age',hue='gender_number', data=no_hypertension, ax=ax[1], bins=10)\nax[1].set_title('Patients without Heart Disease by Gender', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\nax[1].legend(loc='upper left', title='Gender:', labels=['Male','Female'])\n\nplt.xlim(0,85)\nplt.show()","5eb7b82b":"print(df_stroke.gender.value_counts().sum())\nprint(df_stroke.gender.value_counts())","71a4e6ac":"# Calculating the amount and percentage of female and male patients\nmale_patients = df_stroke.gender.value_counts()[0]\nfemale_patients = df_stroke.gender.value_counts()[1]\nother = df_stroke.gender.value_counts()[2]\nall_patients = male_patients + female_patients + other\n\npct_female_patients = female_patients * 100 \/ all_patients\npct_male_patients = male_patients * 100 \/ all_patients\npct_other = other * 100 \/ all_patients\n\nprint('Female Patients:\\t{} ---> {:.2F}%\\nMale Patients:\\t\\t{} ---> {:.2F}%\\nOther:\\t\\t\\t{} ---> {:.2F}%\\n\\nTOTAL:\\t\\t\\t{}'.format(female_patients,pct_female_patients,male_patients,pct_male_patients,other,pct_other,all_patients))","b28041bf":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.boxplot(x=\"age\", data=df_stroke, ax=ax[0])\nax[0].set_title('Age of all Patients', size=17, pad=17)\nax[0].set_xlabel('Age', size=13, labelpad=11)\n\nsns.histplot(x='age', hue='gender_number', data=df_stroke, ax=ax[1], kde=True)\nax[1].set_title('Age Distribution of all Patients', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\nax[1].legend(loc='upper left', title='Gender:', labels=['Male','Female'])\n\nfig.show()","feb35433":"# Calculating males and females suffering a stroke\n\n# Females:\nfemale_stroke = df_stroke.loc[(df_stroke.stroke == 1) & (df_stroke.gender == 'Female')]\nnumber_female_stroke = female_stroke.value_counts().sum()\n# Males:\nmale_stroke = df_stroke.loc[(df_stroke.stroke == 1) & (df_stroke.gender == 'Male')]\nnumber_male_stroke = male_stroke.value_counts().sum()\n# Total:\ntotal_strokes = number_male_stroke + number_female_stroke\n\nprint('NUMBER OF STROKES:\\nFemales:\\t{}\\nMales:\\t\\t{}\\nTOTAL:\\t\\t{}'.format(number_female_stroke, number_male_stroke,total_strokes))","56294790":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.histplot(x='age', data=female_stroke, ax=ax[0], bins=12, kde=True)\nax[0].set_title('Female Patients suffering a Stroke', size=17, pad=17)\nax[0].set_xlabel('Age', size=13, labelpad=11)\nax[0].set_ylabel('Count', size=13)\n\n\nsns.histplot(x='age', data=male_stroke, ax=ax[1], bins=6, kde=True)\nax[1].set_title('Male Patients suffering a Stroke', size=17, pad=17)\nax[1].set_xlabel('Age', size=13, labelpad=11)\nax[1].set_ylabel('Count', size=13)\n\nplt.ylim(0, 67)\nplt.xlim(0, 85)\nplt.show()","02310ff1":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.countplot(x='heart_disease', hue='gender', data=df_stroke, ax=ax[0])\nax[0].set_title('Heart Diseases compared to Gender', size=15, pad=13)\nax[0].set_xlabel('Heart Disease')\nax[0].set_ylabel('Count')\nax[0].legend(loc='upper right',title='Gender:')\n\n\nsns.boxplot(x='heart_disease',y='age', hue='gender', data=df_stroke, ax=ax[1])\nax[1].set_title('Heart Diseases and Age compared to Gender', size=15, pad=13)\nax[1].set_xlabel('Heart Diseases')\nax[1].set_ylabel('Age')\nax[1].legend(loc='lower right',title='Gender')\n\nplt.show()","20f91bff":"fig, ax= plt.subplots(1, 2, figsize=(20,7))\n\nsns.countplot(x='gender', hue='stroke', data=df_stroke, ax=ax[0])\nax[0].set_title('Strokes compared to Gender', size=15, pad=13)\nax[0].set_xlabel('Strokes')\nax[0].set_ylabel('Count')\nax[0].legend(loc='upper right', labels=['No Stroke','Stroke'])\n\n\nsns.boxplot(x='stroke',y='age', hue='gender', data=df_stroke, ax=ax[1])\nax[1].set_title('Strokes and Age compared to Gender', size=15, pad=13)\nax[1].set_xlabel('Strokes')\nax[1].set_ylabel('Age')\nax[1].legend(loc='lower right',title='Gender')\n\nplt.show()","0238d2db":"When you look at the column 'smoking_status' you can see that there is a status 'Unknown' instead of missing values. In this case I replace the missing values in column 'bmi' also by 'Unknown'","5fb917b5":"## 1.1 Context\n\nAccording to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths.\nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.\n\n## 1.2 Data Description\n\n* **`id`**: unique identifier\n* **`gender`**: \"Male\", \"Female\" or \"Other\"\n* **`age`**: age of the patient\n* **`hypertension`**: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* **`heart_disease`**: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* **`ever_married`**: \"No\" or \"Yes\"\n* **`work_type`**: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* **`Residence_type`**: \"Rural\" or \"Urban\"\n* **`avg_glucose_level`**: average glucose level in blood\n* **`bmi`**: body mass index\n* **`smoking_status`**: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n* **`stroke`**: 1 if the patient had a stroke or 0 if not","4aa55985":"## 5.2 Analysing Patterns using Visualisation","90817356":"# 1. INTRODUCTION","a21dd30e":"***\n**GENERAL INFORMATION ABOUT PATIENTS**\n***","e26d6285":"***\n**AGE**\n***","36e5a7a6":"# 4. DATA WRANGLING","5197ff6e":"# 3. READING AND VIEWING DATA","bcd98ead":"# 4.2 Missing Data","db37b940":"To be continued...","c78d4736":"# Stroke Prediction Dataset\nExploratory Data Analysis on Stroke Prediction (Python)\n***","8607be37":"# 5. EXPLORATORY DATA ANALYSIS (EDA)","f4b4756a":"<img src=\"https:\/\/cdn.pixabay.com\/photo\/2018\/02\/20\/17\/33\/brain-3168269_1280.png\" width='70%' margin='0, auto'>","ab938c12":"As there are no strong correlations within the numeric data, I will change the other columns into numeric data to include them into the correlation.","df0a55a6":"# 2. IMPORTING LIBRARIES","e3265f56":"## Identifying Missing Data","24f72e20":"# 4.1 Duplicated Data ","3ee7b3ea":"## Dealing with Missing Data","34676d93":"## 5.1 Correlation"}}