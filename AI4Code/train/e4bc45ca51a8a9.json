{"cell_type":{"dee66ec3":"code","e68c4bc6":"code","823f4d93":"code","c67c4b1d":"code","f4e07337":"code","66deed1a":"code","81fd4387":"code","068d4575":"code","dbf9053b":"code","05d04984":"code","ef9733e6":"code","59b4b0ed":"code","4224ff08":"code","14559698":"code","65e4e7e1":"markdown","fa20b388":"markdown","7649f817":"markdown","ee8271df":"markdown","a7ded3ee":"markdown","2d5ed89d":"markdown","20cfaa3b":"markdown","86439a7b":"markdown","07fb35cc":"markdown","48064eb5":"markdown","0878d331":"markdown","d4f41290":"markdown","fdf1823f":"markdown","312df6c3":"markdown"},"source":{"dee66ec3":"import os, re, time, json\nimport PIL.Image, PIL.ImageFont, PIL.ImageDraw\nimport numpy as np\ntry:\n  # %tensorflow_version only exists in Colab.\n  %tensorflow_version 2.x\nexcept Exception:\n  pass\nimport tensorflow as tf\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom matplotlib import pyplot as plt\nimport tensorflow_datasets as tfds\n\nprint(\"Tensorflow version \" + tf.__version__)","e68c4bc6":"BATCH_SIZE = 32 \nclasses = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']","823f4d93":"#Matplotlib config\nplt.rc('image', cmap='gray')\nplt.rc('grid', linewidth=0)\nplt.rc('xtick', top=False, bottom=False, labelsize='large')\nplt.rc('ytick', left=False, right=False, labelsize='large')\nplt.rc('axes', facecolor='F8F8F8', titlesize=\"large\", edgecolor='white')\nplt.rc('text', color='a8151a')\nplt.rc('figure', facecolor='F0F0F0')# Matplotlib fonts\nMATPLOTLIB_FONT_DIR = os.path.join(os.path.dirname(plt.__file__), \"mpl-data\/fonts\/ttf\")\n\n# utility to display a row of digits with their predictions\ndef display_images(digits, predictions, labels, title):\n\n  n = 10\n\n  indexes = np.random.choice(len(predictions), size=n)\n  n_digits = digits[indexes]\n  n_predictions = predictions[indexes]\n  n_predictions = n_predictions.reshape((n,))\n  n_labels = labels[indexes]\n \n  fig = plt.figure(figsize=(20, 4))\n  plt.title(title)\n  plt.yticks([])\n  plt.xticks([])\n\n  for i in range(10):\n    ax = fig.add_subplot(1, 10, i+1)\n    class_index = n_predictions[i]\n    \n    plt.xlabel(classes[class_index])\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(n_digits[i])\n\n# utility to display training and validation curves\ndef plot_metrics(metric_name, title, ylim=5):\n  plt.title(title)\n  plt.ylim(0,ylim)\n  plt.plot(history.history[metric_name],color='blue',label=metric_name)\n  plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)","c67c4b1d":"(training_images, training_labels) , (validation_images, validation_labels) = tf.keras.datasets.cifar10.load_data()","f4e07337":"display_images(training_images, training_labels, training_labels, \"Training Data\" )","66deed1a":"display_images(validation_images, validation_labels, validation_labels, \"Training Data\" )","81fd4387":"def preprocess_image_input(input_images):\n  input_images = input_images.astype('float32')\n  output_ims = tf.keras.applications.resnet50.preprocess_input(input_images)\n  return output_ims\n","068d4575":"train_X = preprocess_image_input(training_images)\nvalid_X = preprocess_image_input(validation_images)","dbf9053b":"'''\nFeature Extraction is performed by ResNet50 pretrained on imagenet weights. \nInput size is 224 x 224.\n'''\ndef feature_extractor(inputs):\n\n  feature_extractor = tf.keras.applications.resnet.ResNet50(input_shape=(224, 224, 3),\n                                               include_top=False,\n                                               weights='imagenet')(inputs)\n  return feature_extractor\n\n\n'''\nDefines final dense layers and subsequent softmax layer for classification.\n'''\ndef classifier(inputs):\n    x = tf.keras.layers.GlobalAveragePooling2D()(inputs)\n    x = tf.keras.layers.Flatten()(x)\n    x = tf.keras.layers.Dense(1024, activation=\"relu\")(x)\n    x = tf.keras.layers.Dense(512, activation=\"relu\")(x)\n    x = tf.keras.layers.Dense(10, activation=\"softmax\", name=\"classification\")(x)\n    return x\n\n'''\nSince input image size is (32 x 32), first upsample the image by factor of (7x7) to transform it to (224 x 224)\nConnect the feature extraction and \"classifier\" layers to build the model.\n'''\ndef final_model(inputs):\n\n    resize = tf.keras.layers.UpSampling2D(size=(7,7))(inputs)\n\n    resnet_feature_extractor = feature_extractor(resize)\n    classification_output = classifier(resnet_feature_extractor)\n\n    return classification_output\n\n'''\nDefine the model and compile it. \nUse Stochastic Gradient Descent as the optimizer.\nUse Sparse Categorical CrossEntropy as the loss function.\n'''\ndef define_compile_model():\n  inputs = tf.keras.layers.Input(shape=(32,32,3))\n  \n  classification_output = final_model(inputs) \n  model = tf.keras.Model(inputs=inputs, outputs = classification_output)\n \n  model.compile(optimizer='SGD', \n                loss='sparse_categorical_crossentropy',\n                metrics = ['accuracy'])\n  \n  return model\n\n\nmodel = define_compile_model()\n\nmodel.summary()","05d04984":"EPOCHS = 3\nhistory = model.fit(train_X, training_labels, epochs=EPOCHS, validation_data = (valid_X, validation_labels), batch_size=64)","ef9733e6":"loss, accuracy = model.evaluate(valid_X, validation_labels, batch_size=64)","59b4b0ed":"plot_metrics(\"loss\", \"Loss\")","4224ff08":"plot_metrics(\"accuracy\", \"Accuracy\")","14559698":"probabilities = model.predict(valid_X, batch_size=64)\nprobabilities = np.argmax(probabilities, axis = 1)\n\ndisplay_images(validation_images, probabilities, validation_labels, \"Bad predictions indicated in red.\")","65e4e7e1":"Plot the training accuracy (blue) as well as the validation accuracy (green).","fa20b388":"- Define the batch size\n- Define the class (category) names","7649f817":"\n\n\n# Transfer Learning\nIn this notebook, we will perform transfer learning to train CIFAR-10 dataset on ResNet50 model available in Keras.\n\n","ee8271df":"## Parameters","a7ded3ee":"Define some functions that will help us to create some visualizations. ","2d5ed89d":"## Define the Network\nWe will be performing transfer learning on **ResNet50** available in Keras.\n- We'll load pre-trained **imagenet weights** to the model.\n- We'll choose to retain all layers of **ResNet50** along with the final classification layers.","20cfaa3b":"## Imports","86439a7b":"### Visualize Dataset\n\nUse the `display_image` to view some of the images and their class labels.","07fb35cc":"## Loading and Preprocessing Data\n[CIFAR-10](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html) dataset has 32 x 32 RGB images belonging to 10 classes. We will load the dataset from Keras.","48064eb5":"### Preprocess Dataset\nHere, we'll perform normalization on images in training and validation set. \n- We'll use the function [preprocess_input](https:\/\/github.com\/keras-team\/keras-applications\/blob\/master\/keras_applications\/resnet50.py) from the ResNet50 model in Keras.","0878d331":"## Evaluate the Model\n\nCalculate the loss and accuracy metrics using the model's `.evaluate` function.","d4f41290":"### Visualize predictions\nWe can take a look at the predictions on the validation set.","fdf1823f":"### Plot Loss and Accuracy Curves\n\nPlot the loss (in blue) and validation loss (in green).","312df6c3":"## Train the model"}}