{"cell_type":{"9e5ebd58":"code","b13404e9":"code","8520c7f6":"code","6d8c9589":"code","c0f13ca1":"code","e882be26":"code","fc546525":"code","d8755dda":"code","acb6f584":"code","0379b4ea":"code","88e9b626":"code","6e58c894":"code","f183a2ca":"code","4ed2e481":"code","20b3bac9":"code","afa9d90a":"code","9d095ec9":"code","5ff6ef4b":"code","69931896":"code","31e70f52":"code","e68b88ec":"code","9705666a":"code","f78e0752":"code","bae1a73d":"code","ae126c3f":"code","939ebd69":"code","26dcaadd":"code","97b3c142":"code","1015fe9d":"code","3c2c3f65":"code","60c8304d":"code","75bfa75f":"code","5e1b81d0":"code","667b91b8":"code","252dc587":"code","c767cba1":"code","d50e9d66":"code","3eb8ea4e":"code","0a2c718f":"code","309936ab":"markdown","e7ad411c":"markdown","077c6dcf":"markdown","ee049e52":"markdown","5129d7c6":"markdown","2b9dce72":"markdown","c3f3abf7":"markdown","162f6539":"markdown","26698e02":"markdown","7f3ac39f":"markdown","9ae5f6af":"markdown","d30badfe":"markdown","96064797":"markdown","3dd46e56":"markdown","56114287":"markdown","d49d36a7":"markdown","46288af6":"markdown","869771ad":"markdown","568fc9aa":"markdown","f853e561":"markdown","a8d78a97":"markdown","eb5393ab":"markdown","d8da1142":"markdown","dbde0c3d":"markdown","ea43a388":"markdown","69a0e629":"markdown"},"source":{"9e5ebd58":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b13404e9":"#Loading The Libraries\n\n#For visualizations\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n!pip install --upgrade pip -q\n!pip install dexplot -q\n!pip install dabl -q\n!pip install sweetviz -q\n!pip install autoviz -q\n!pip install pycaret -q\n!pip install seaborn -q\n# for visualizations\nplt.style.use('fivethirtyeight')\n\n# for interactive visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\nfrom sklearn.preprocessing import StandardScaler\n\nfrom pandas_profiling import ProfileReport\nimport dexplot as dxp\nimport dabl","8520c7f6":"dt = pd.read_csv(\"\/kaggle\/input\/heart-disease-dataset-by-openml\/heart-statlog_csv.csv\")","6d8c9589":"display(dt.head())","c0f13ca1":"dt['class'][dt['class'] == 'present']=1\ndt['class'][dt['class'] == 'absent']=0","e882be26":"display(dt.head())","fc546525":"dt[['class']] = dt[['class']].apply(pd.to_numeric) ","d8755dda":"dt.info()","acb6f584":"dt.describe()","0379b4ea":"df_plot = dt.copy()\n\ndj = {0 : 'normal', 1 :'fixed defect', 2 : 'reversable defect'}\ndk = {0:'Less chance of Heart Attack',1:'High Chance of Heart Attack'}\n\n\ndf_plot['thal'].replace(dj, inplace=True)\ndf_plot['class'].replace(dk, inplace=True)\nprint(df_plot)","88e9b626":"profile = ProfileReport(df_plot, title='Pandas Profiling Report')","6e58c894":"profile.to_notebook_iframe()","f183a2ca":"clean_data = dabl.clean(dt, verbose=1)\nclean_data.describe()","4ed2e481":"types = dabl.detect_types(clean_data)\ntypes","20b3bac9":"dabl.plot(clean_data,'class')","afa9d90a":"dabl_classifer = dabl.SimpleClassifier(random_state=0)","9d095ec9":"X = clean_data.drop('class', axis=1)\ny = clean_data.maximum_heart_rate_achieved\nsc = StandardScaler()\nX = sc.fit_transform(X)","5ff6ef4b":"dabl_classifer.fit(X, y)","69931896":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()","31e70f52":"sep = ','\ntarget = 'class'\nfilename = '..\/input\/heart-disease-dataset-by-openml\/heart-statlog_csv.csv'","e68b88ec":"dft = AV.AutoViz(filename, sep=sep, depVar=target, dfte=df_plot, header=0, verbose=2,lowess=False,chart_format='svg',max_rows_analyzed=1500,max_cols_analyzed=30)","9705666a":"from pycaret.classification import *\nclassifier = setup(dt, target = 'class', session_id=42, experiment_name='heart',normalize=True,silent=True)\nbest = compare_models()\n# return best model based on AUC\nbest = compare_models(sort = 'AUC') \n\n# return top 3 models based on 'Accuracy'\ntop3 = compare_models(n_select = 2)","f78e0752":"lr = create_model('lr', fold = 10)","bae1a73d":"rf = create_model('rf', fold = 5)","ae126c3f":"et = create_model('et',fold = 5)","939ebd69":"models(type='ensemble').index.tolist()","26dcaadd":"tuned_lr = tune_model(lr)","97b3c142":"plot_model(lr)","1015fe9d":"plot_model(rf)","3c2c3f65":"plot_model(et)","60c8304d":"plot_model(lr, plot = 'confusion_matrix')","75bfa75f":"plot_model(rf, plot = 'confusion_matrix')","5e1b81d0":"plot_model(et, plot = 'confusion_matrix')","667b91b8":"plot_model(lr, plot = 'feature')","252dc587":"plot_model(rf, plot = 'feature')","c767cba1":"plot_model(et, plot = 'feature')","d50e9d66":"plot_model(lr, plot = 'class_report')","3eb8ea4e":"plot_model(rf, plot = 'class_report')","0a2c718f":"plot_model(et, plot = 'class_report')","309936ab":"# 2. Pandas Profiling","e7ad411c":"# 5.PYCARET","077c6dcf":"# 4.AutoViz","ee049e52":"# HEART ATTACK PREDICTION USING AUTOMATED MACHINE LEARNING TOOLS _ PYCARET","5129d7c6":"**PyCaret is an open source low-code machine learning library in Python that aims to reduce the hypothesis to insights cycle time in a ML experiment. It enables data scientists to perform end-to-end experiments quickly and efficiently. In comparison with the other open source machine learning libraries, PyCaret is an alternate low-code library that can be used to perform complex machine learning tasks with only few lines of code. PyCaret is essentially a Python wrapper around several machine learning libraries and frameworks such as scikit-learn, XGBoost, Microsoft LightGBM, spaCy and many more.**","2b9dce72":"This database contains 14 attributes (which have been extracted from a larger set of 75)\n\nAttribute Information: \n<ol>\n <li>age<\/li>\n<li>sex<\/li>\n<li>chest pain type (4 values)<\/li>\n<li>resting blood pressure<\/li>\n<li>serum cholestoral in mg\/dl<\/li>\n<li>fasting blood sugar > 120 mg\/dl<\/li>\n<li>resting electrocardiographic results (values 0,1,2)<\/li> \n<li>maximum heart rate achieved<\/li>\n<li>exercise induced angina<\/li>\n<li>oldpeak = ST depression induced by exercise relative to rest<\/li>\n<li>the slope of the peak exercise ST segment<\/li>\n<li>number of major vessels (0-3) colored by flourosopy<\/li>\n<li>thal: 3 = normal; 6 = fixed defect; 7 = reversable defect<\/li>\n<li>Class 1 To: absent From: 2 To: present<\/li>\n<\/ol>","c3f3abf7":"**Create Custom Models**","162f6539":"\n\nFor each column the following statistics - if relevant for the column type - are presented in an interactive HTML report:\n* Type inference: detect the types of columns in a dataframe.\n* Essentials: type, unique values, missing values\n* Quantile statistics like minimum value, Q1, median, Q3, maximum, range, interquartile range\n* Descriptive statistics like mean, mode, standard deviation, sum, median absolute deviation, coefficient of variation, kurtosis, skewness\n* Most frequent values\n* Histogram\n* Correlations highlighting of highly correlated variables, Spearman, Pearson and Kendall matrices\n* Missing values matrix, count, heatmap and dendrogram of missing values\n* Text analysis learn about categories (Uppercase, Space), scripts (Latin, Cyrillic) and blocks (ASCII) of text data.\n* File and Image analysis extract file sizes, creation dates and dimensions and scan for truncated images or those containing EXIF information.","26698e02":"**ROC Curve**","7f3ac39f":"**AutoViz is a one-click visualization engine: It creates powerful charts that anyone from a beginner to an expert can use.\nAutoViz knows creating charts from any data manually is hard: It's even harder when you don't know what's in it. AutoViz starts by first analyzing your data to know if it is a Classification, Regression, Unsupervised or Time Series problem. It then chooses the best charts to maximize your insights...**","9ae5f6af":"**Feature Importance Plot**","d30badfe":"# 3. Data Analysis Baseline Library","96064797":"Plot for Random Forest Classifier","3dd46e56":"**Analyze Model with Plot Curves**\n","56114287":"Classification Report","d49d36a7":"**Exploratory Data Analysis (EDA) plays a very important role in understanding the dataset. Whether you are going to build a Machine Learning Model or if it's just an exercise to bring out insights from the given data, EDA is the primary task to perform. While it's undeniable that EDA is very important, The task of performing Exploratory Data Analysis grows in parallel with the number of columns your dataset has got.**","46288af6":"**Generates profile reports from a pandas DataFrame. The pandas df.describe() function is great but a little basic for serious exploratory data analysis. pandas_profiling extends the pandas DataFrame with df.profile_report() for quick data analysis.**","869771ad":"Dabl seeks to automate this process. If you run the following commands dabl will attempt to identify missing values, feature types and erroneous data","568fc9aa":"**Dabl also seeks to speed up the model selection process. By running a very small amount of code dabl trains a selection of scikit-learn models and returns the corresponding scores**","f853e561":"**dabl detects features types and automatically cleans the data this makes analysing the data extremely fast.**","a8d78a97":"Plot for logistic regression","eb5393ab":"**HyperParameter Tuning**","d8da1142":"# About the Data","dbde0c3d":"**Confusion Metrics**","ea43a388":"# 1.Exploratory Data Analysis","69a0e629":"Plot for Extra Trees Classifier"}}