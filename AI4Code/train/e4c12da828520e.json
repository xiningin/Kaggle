{"cell_type":{"8ff1a57e":"code","32a89a46":"code","79c9ea6e":"code","f3ef968b":"code","d2660b34":"code","05de8dfa":"code","b701fdf5":"code","2f4027b3":"code","fef4b1a5":"code","052f1b3c":"code","6e45bc5f":"code","c3482408":"code","daa67381":"code","21a45f0d":"code","4109e17f":"code","79ab6bb9":"code","ed165460":"code","75b6c3b5":"code","23472dde":"code","4e3b17ad":"code","064d89eb":"code","0ed6ea40":"code","658c76f3":"code","9567154a":"code","ec15c3ec":"code","9cfcc4b0":"code","3ef69ce1":"code","cecc8cbc":"code","1f6e17d9":"code","48aea7d4":"code","1d6f7f88":"code","04f70de8":"code","a8b3f492":"code","45b01f90":"code","278ef30a":"code","c6a49c8c":"code","976a8dff":"code","de77355d":"code","ec5c1ff8":"code","e3fd30e6":"code","d51fa227":"code","d8432a0b":"code","9f3335cf":"code","d097b18e":"code","cf4ce327":"code","78ed375a":"code","feaa39ed":"code","2aab773a":"code","d6e7c1e3":"code","dea3db30":"code","02f3386c":"code","64939035":"code","9f506c14":"code","856b2654":"code","73084471":"code","28f9023b":"code","ca8a14ff":"code","da829263":"code","2ca06fbf":"code","3ebb9069":"code","52ff0641":"code","beb7855c":"markdown","64b087c6":"markdown","dcdd329f":"markdown","b09f4311":"markdown","a9d3b80b":"markdown","758a0d83":"markdown","6b2d042d":"markdown","6e2bb7c1":"markdown","7aa8dd60":"markdown","97ee4ab7":"markdown","f2d84f65":"markdown","1e3b6462":"markdown","80bf3763":"markdown","64758975":"markdown","ca80d680":"markdown","17470683":"markdown","41546c9b":"markdown","14b0dbe9":"markdown","7690ab3d":"markdown","7f393366":"markdown","02301fb0":"markdown","378dbd44":"markdown","97d56315":"markdown","1f7a46aa":"markdown","99b3549c":"markdown","4b940a5b":"markdown","b38f3e19":"markdown","08d132c2":"markdown","75fe2178":"markdown","522961c1":"markdown","ed006567":"markdown","0d261710":"markdown","06fd570e":"markdown","27767103":"markdown","57421904":"markdown","63a7797c":"markdown","0fffa307":"markdown","ec115cb7":"markdown","0f977641":"markdown","6ec7829a":"markdown","9ecb1f56":"markdown","002dce08":"markdown","9297cb06":"markdown","f2ab6e3f":"markdown","86aa1f44":"markdown","ac346bfd":"markdown","4d23849a":"markdown","af1943a5":"markdown","37c646cb":"markdown","63db43b1":"markdown","de60d986":"markdown","cde36cc0":"markdown","f45978f1":"markdown","044b23b8":"markdown","dce415fe":"markdown","d1a27923":"markdown","80ee73a3":"markdown","3edebbcf":"markdown","6c9f8aad":"markdown","f1bf87b4":"markdown","01ccb1df":"markdown","734c5cfb":"markdown","d82dff93":"markdown","21ae3be0":"markdown","897f230f":"markdown","651d5d74":"markdown","b4a02f07":"markdown","0885954e":"markdown","78608500":"markdown","acb09ce8":"markdown","2e6bf2f6":"markdown","5d781363":"markdown","abea7933":"markdown","d3bbcbe5":"markdown","d4e4f50c":"markdown","924ebb1c":"markdown","c613a11d":"markdown","290e0326":"markdown","618b27b9":"markdown","01a85d22":"markdown","def8840c":"markdown","f88dbe26":"markdown","5fc97918":"markdown"},"source":{"8ff1a57e":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library","32a89a46":"!conda install -c anaconda xlrd --yes","79c9ea6e":"df_can = pd.read_excel('https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2)\n\nprint ('Data read into a pandas dataframe!')","f3ef968b":"df_can.head()\n# tip: You can specify the number of rows you'd like to see as follows: df_can.head(10) ","d2660b34":"df_can.tail()","05de8dfa":"df_can.info()","b701fdf5":"df_can.columns.values ","2f4027b3":"df_can.index.values","fef4b1a5":"print(type(df_can.columns))\nprint(type(df_can.index))","052f1b3c":"df_can.columns.tolist()\ndf_can.index.tolist()\n\nprint (type(df_can.columns.tolist()))\nprint (type(df_can.index.tolist()))","6e45bc5f":"# size of dataframe (rows, columns)\ndf_can.shape  ","c3482408":"# in pandas axis=0 represents rows (default) and axis=1 represents columns.\ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndf_can.head(2)","daa67381":"df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)\ndf_can.columns","21a45f0d":"df_can['Total'] = df_can.sum(axis=1)","4109e17f":"df_can.isnull().sum()","79ab6bb9":"df_can.describe()","ed165460":"df_can.Country  # returns a series","75b6c3b5":"df_can[['Country', 1980, 1981, 1982, 1983, 1984, 1985]] # returns a dataframe\n# notice that 'Country' is string, and the years are integers. \n# for the sake of consistency, we will convert all column names to string later on.","23472dde":"df_can.set_index('Country', inplace=True)\n# tip: The opposite of set is reset. So to reset the index, we can use df_can.reset_index()","4e3b17ad":"df_can.head(3)","064d89eb":"# optional: to remove the name of the index\ndf_can.index.name = None","0ed6ea40":"# 1. the full row data (all columns)\nprint(df_can.loc['Japan'])\n\n# alternate methods\nprint(df_can.iloc[87])\nprint(df_can[df_can.index == 'Japan'].T.squeeze())","658c76f3":"# 2. for year 2013\nprint(df_can.loc['Japan', 2013])\n\n# alternate method\nprint(df_can.iloc[87, 36]) # year 2013 is the last column, with a positional index of 36","9567154a":"# 3. for years 1980 to 1985\nprint(df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]])\nprint(df_can.iloc[87, [3, 4, 5, 6, 7, 8]])","ec15c3ec":"df_can.columns = list(map(str, df_can.columns))\n[print (type(x)) for x in df_can.columns.values] #<-- uncomment to check type of column headers","9cfcc4b0":"# useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nyears","3ef69ce1":"# 1. create the condition boolean series\ncondition = df_can['Continent'] == 'Asia'\nprint(condition)","cecc8cbc":"# 2. pass this condition into the dataFrame\ndf_can[condition]","1f6e17d9":"# we can pass mutliple criteria in the same line. \n# let's filter for AreaNAme = Asia and RegName = Southern Asia\n\ndf_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]\n\n# note: When using 'and' and 'or' operators, pandas requires we use '&' and '|' instead of 'and' and 'or'\n# don't forget to enclose the two conditions in parentheses","48aea7d4":"print('data dimensions:', df_can.shape)\nprint(df_can.columns)\ndf_can.head(2)","1d6f7f88":"# we are using the inline backend\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","04f70de8":"print ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","a8b3f492":"print(plt.style.available)\nmpl.style.use(['ggplot']) # optional: for ggplot-like style","45b01f90":"haiti = df_can.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column\nhaiti.head()","278ef30a":"haiti.plot()","c6a49c8c":"haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting\nhaiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show() # need this line to show the updates made to the figure","976a8dff":"haiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\n# annotate the 2010 Earthquake. \n# syntax: plt.text(x, y, label)\nplt.text(2000, 6000, '2010 Earthquake') # see note below\n\nplt.show() ","de77355d":"df_CI = df_can.loc[['India', 'China'], years]\ndf_CI.head()","ec5c1ff8":"df_CI.plot(kind='line')","e3fd30e6":"df_CI = df_CI.transpose()\ndf_CI.head()","d51fa227":"df_CI.index = df_CI.index.map(int)\ndf_CI.plot(kind='line')","d8432a0b":"df_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)\ndf_top5 = df_can.head(5)\ndf_top5 = df_top5[years].transpose()\n\ndf_top5.index = df_top5.index.map(int) \n\ndf_top5.plot(kind='line', figsize=(14, 8))\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\nplt.show()","9f3335cf":"df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df_can.head()\n\n# transpose the dataframe\ndf_top5 = df_top5[years].transpose() \n\ndf_top5.head()","d097b18e":"df_top5.index = df_top5.index.map(int) # let's change the index values of df_top5 to type integer for plotting\ndf_top5.plot(kind='area', \n             stacked=False,\n             figsize=(20, 10), # pass a tuple (x, y) size\n             )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","cf4ce327":"df_top5.plot(kind='area', \n             alpha=0.25, # 0-1, default value a= 0.5\n             stacked=False,\n             figsize=(20, 10),\n            )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","78ed375a":"# option 2: preferred option with more flexibility\nax = df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10))\n\nax.set_title('Immigration Trend of Top 5 Countries')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","feaa39ed":"df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True)\n\n# get the least 5 entries\ndf_least5 = df_can.tail(5)\n\n# transpose the dataframe\ndf_least5 = df_least5[years].transpose() \n\ndf_least5.head()\n\ndf_least5.index = df_least5.index.map(int)\ndf_least5.plot(kind='area', alpha=0.45, stacked=False, figsize=(20, 10))\nplt.title('Immigration trend of least 5 countries')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show()","2aab773a":"# get the 5 countries with the least contribution\ndf_least5 = df_can.tail(5)\n\n# transpose the dataframe\ndf_least5 = df_least5[years].transpose() \ndf_least5.head()\n\ndf_least5.index = df_least5.index.map(int) # let's change the index values of df_least5 to type integer for plotting\n\nax = df_least5.plot(kind='area', alpha=0.55, stacked=False, figsize=(20, 10))\n\nax.set_title('Immigration Trend of 5 Countries with Least Contribution to Immigration')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","d6e7c1e3":"# np.histogram returns 2 values\ncount, bin_edges = np.histogram(df_can['2013'])\n\nprint(count) # frequency count\nprint(bin_edges) # bin ranges, default = 10 bins","dea3db30":"df_can['2013'].plot(kind='hist', figsize=(8, 5))\n\nplt.title('Histogram of Immigration from 195 Countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","02f3386c":"# 'bin_edges' is a list of bin intervals\ncount, bin_edges = np.histogram(df_can['2013'])\n\ndf_can['2013'].plot(kind='hist', figsize=(8, 5), xticks=bin_edges)\n\nplt.title('Histogram of Immigration from 195 countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","64939035":"# let's quickly view the dataset  and then generate histogram.\ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()","9f506c14":"# transpose dataframe\ndf_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\n\n# generate histogram\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","856b2654":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\ndf_t.plot(kind ='hist', \n          figsize=(10, 6),\n          bins=15,\n          alpha=0.6,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen']\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","73084471":"count, bin_edges = np.histogram(df_t, 15)\nxmin = bin_edges[0] - 10   #  first bin value is 31.0, adding buffer of 10 for aesthetic purposes \nxmax = bin_edges[-1] + 10  #  last bin value is 308.0, adding buffer of 10 for aesthetic purposes\n\n# stacked Histogram\ndf_t.plot(kind='hist',\n          figsize=(10, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True,\n          xlim=(xmin, xmax)\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants') \n\nplt.show()","28f9023b":"# create a dataframe of the countries of interest (cof)\ndf_cof = df_can.loc[['Greece', 'Albania', 'Bulgaria'], years]\n# transpose the dataframe\ndf_cof = df_cof.transpose() \n\n# let's get the x-tick values\ncount, bin_edges = np.histogram(df_cof, 15)\n\n# Un-stacked Histogram\ndf_cof.plot(kind ='hist',\n            figsize=(10, 6),\n            bins=15,\n            alpha=0.35,\n            xticks=bin_edges,\n            color=['coral', 'darkslateblue', 'mediumseagreen']\n            )\n\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","ca8a14ff":"# step 1: get the data\ndf_iceland = df_can.loc['Iceland', years]\n\n# step 2: plot data\ndf_iceland.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","da829263":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) # rotate the bars by 90 degrees\n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\nplt.show()","2ca06fbf":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) \n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=72.5,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.show()","3ebb9069":"# sort dataframe on 'Total' column (descending)\ndf_can.sort_values(by='Total', ascending=True, inplace=True)\n\n# get top 15 countries\ndf_top15 = df_can['Total'].tail(15)","52ff0641":"# generate plot\ndf_top15.plot(kind='barh', figsize=(12, 12), color='steelblue')\nplt.xlabel('Number of Immigrants')\nplt.title('Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013')\n\n# annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')\n\nplt.show()","beb7855c":"# 6. Bar Charts (Dataframe) <a id='BC'><\/a> \n\nA bar plot is a way of representing data where the *length* of the bars represents the magnitude\/size of the feature\/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals.\n\nTo create a bar plot, we can pass one of two arguments via `kind` parameter in `plot()`:\n\n   * `kind=bar` creates a vertical bar plot\n   * `kind=barh` creates a horizontal bar plot","64b087c6":"With just a few lines of code, you were able to quickly identify and visualize the spike in immigration!\n\nQuick note on x and y values in `plt.text(x, y, label)`:\n\n    Since the x-axis (years) is type 'integer', we specified x as a year. The y axis (number of immigrants) is type 'integer',    so we can just specify the value y = 6000.   \n            plt.text(2000, 6000, '2010 Earthquake') # years stored as type int\n    If the years were stored as type 'string', we would need to specify x as the index position of the year. Eg 20th index is   year 2000 since it is the 20th year with a base year of 1980.\n            plt.text(20, 6000, '2010 Earthquake') # years stored as type int\n    We will cover advanced annotation methods in later modules.","dcdd329f":"*pandas* automatically populated the x-axis with the index values (years), and the y-axis with the column values (population). However, notice how the years were not displayed because they are of type *string*. Therefore, let's change the type of the index values to integer for plotting.\n\nAlso, let's label the x and y axis using `plt.title()`, `plt.ylabel()`, and `plt.xlabel()` as follows:","b09f4311":"# 2. Visualizing Data using Matplotlib <a id='VDuM'><\/a> ","a9d3b80b":"# 3. Line Pots (Series\/Dataframe) <a id='LP'><\/a> ","758a0d83":"In the last cell, we created a line plot that visualized the top 5 countries that contribued the most immigrants to Canada from 1980 to 2013. With a little modification to the code, we can visualize this plot as a cumulative plot, also knows as a **Stacked Line Plot** or **Area plot**.","6b2d042d":"A histogram is a way of representing the *frequency* distribution of numeric dataset. The way it works is it partitions the x-axis into bins, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.","6e2bb7c1":"# *pandas* Intermediate: Indexing and Selection (slicing) <a id='PI'><\/a> ","7aa8dd60":"To get the list of column headers we can call upon the dataframe's `.columns` parameter.","97ee4ab7":"Note: The main types stored in `pandas objects` are `float, int, bool, datetime64[ns] and datetime64[ns, tz] (in >= 0.17.0), timedelta[ns]`, `category (in >= 0.15.0)`, and `object (string)`. In addition these `dtypes` have item sizes, e.g. `int64` and `int32`.\n\nLet's clean the data set to remove a few unnecessary columns. We can use *pandas* `drop()` method as follows:","f2d84f65":"Dataset Source: [ International migration flows to and from selected countries - The 2015 revision](https:\/\/www.un.org\/en\/development\/desa\/population\/migration\/data\/empirical2\/migrationflows.asp).\n\nThe dataset contains annual data on the flows of international immigrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. The current version presents data pertaining to 45 countries.\n\nIn this kernel, we will focus on the Canadian immigration data.","1e3b6462":"Step 2: Plot data:\n\n1. Use `kind='barh'` to generate a bar chart with horizontal bars.\n1. Make sure to choose a good size for the plot and to label your axes and to give the plot a title.\n1. Loop through the countries and annotate the immigrant population using the anotate function of the scripting interface.","80bf3763":"The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008.\n\nLet's annotate this on the plot using the annotate method of the **scripting layer** or the **pyplot interface**. We will pass in the following parameters:\n\n   * `s`: str, the text of annotation.\n   * `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n   * `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n   * `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n   * `arrowprops`: Takes a dictionary of properties to draw the arrow:\n*                  `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.\n*                  `connectionstyle`: Specifies the connection type. `arc3` is a straight line.\n*                  `color`: Specifes color of arror.\n*                  `lw`: Specifies the line width.\n\nI encourage you to read the Matplotlib documentation for more details on annotations: http:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.annotate.","64758975":"Side Note: We could use `df_can['2013'].plot.hist()`, instead. In fact, throughout this lesson, using `some_data.plot(kind='type_plot', ...)` is equivalent to `some_data.plot.type_plot(...)`. That is, passing the type of the plot as argument or method behaves the same.\n\nSee the pandas documentation for more info http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.plot.html.","ca80d680":"First, we will extract the data series for Haiti.","17470683":"## The Dataset: Immigration to Canada from 1980 to 2013 <a id='I2C'><\/a> ","41546c9b":"In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population.\n\nNotice that the x-axis labels do not match with the bin size. This can be fixed by passing in a `xticks` keyword that contains the list of the bin sizes, as follows:","14b0dbe9":"*pandas* will auomatically graph the two countries on the same graph. Go ahead and plot the new transposed dataframe. Make sure to add a title to the plot and label the axes.","7690ab3d":"The first thing we'll do is import two key data analysis modules: **pandas** and **Numpy**.","7f393366":"# *pandas* Basics <a id='PB'><\/a> ","02301fb0":"**Question**: Compare the trend of top 5 countries that contributed the most to immigration to Canada.","378dbd44":"*Note*: How come we didn't need to transpose Haiti's dataframe before plotting (like we did for df_CI)?\n\n\nThat's because haiti is a series as opposed to a dataframe, and has the years as its indices as shown below.\n\n      print(type(haiti))\n      print(haiti.head(5))\n      \n         class 'pandas.core.series.Series'\n         1980 1666\n         1981 3692\n         1982 3498\n         1983 2860\n         1984 1418\n         Name: Haiti, dtype: int64","97d56315":"## Filtering based on a criteria\n\nTo filter the dataframe based on a condition, we simply pass the condition as a boolean vector.\n\nFor example, Let's filter the dataframe to show the data on Asian countries (AreaName = Asia).","1f7a46aa":"That doesn't look right...\n\nRecall that *pandas* plots the indices on the x-axis and the columns as individual lines on the y-axis. Since `df_CI` is a dataframe with the `country` as the index and `years` as the columns, we must first transpose the dataframe using `transpose()` method to swap the row and columns.","99b3549c":"Since we converted the years to string, let's declare a variable that will allow us to easily call upon the full range of years:","4b940a5b":"**What is a line plot and why use it?**\n\nA line chart or line plot is a type of plot which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields. Use line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.","b38f3e19":"Let's start by importing `Matplotlib` and `Matplotlib.pyplot` as follows:","08d132c2":"Column names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index.\n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","75fe2178":"## Plotting in pandas\n\nFortunately, pandas has a built-in implementation of Matplotlib that we can use. Plotting in pandas is as simple as appending a .plot() method to a series or dataframe.\n\nDocumentation:\n\n\n*   [Plotting with Series](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/index.html)\n*   [Plotting with Dataframes](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/index.html)\n\n","522961c1":"We can easily add more countries to line plot to make meaningful comparisons immigration from different countries.\n\n**Question**: Let's compare the number of immigrants from India and China from 1980 to 2013.","ed006567":"The unstacked plot has a default transparency (alpha value) at 0.5. We can modify this value by passing in the `alpha` parameter.","0d261710":"2. Using the **artist layer** to create an unstacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.55.","06fd570e":"From the above plot, we can observe that the China and India have very similar immigration trends through the years.","27767103":"Let's make a few modifications to improve the impact and aesthetics of the previous plot:\n   * increase the bin size to 15 by passing in bins parameter\n   * set transparency to 60% by passing in alpha paramemter\n   * label the x-axis by passing in x-label paramater\n   * change the colors of the plots by passing in color parameter","57421904":"## Select Row\nThere are main 3 ways to select rows:\n\n    df.loc[label]        \n        #filters by the labels of the index\/column\n    df.iloc[index]       \n        #filters by the positions of the index\/column\n        \n\n\nBefore we proceed, notice that the default index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Japan, we need to know the corressponding index value.\n\nThis can be fixed very easily by setting the 'Country' column as the index using `set_index()` method.","63a7797c":"### To learn more about advanced Visualisation Tools, Click [here](https:\/\/www.kaggle.com\/vijaygiitk\/data-visualisation-moderate-2) to go to next Kernel.","0fffa307":"We can check to see how many null objects we have in the dataset as follows:","ec115cb7":"We can also veiw the bottom 5 rows of the dataset using the `tail()` function.","0f977641":"# 1. Exploring Datasets with pandas <a id='EDp'><\/a> ","6ec7829a":"Let's rename the columns so that they make sense. We can use `rename()` method by passing in a dictionary of old and new names as follows:","9ecb1f56":"# Thank you for completing this lesson!","002dce08":"Line plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than 5-10 lines on a single graph; any more than that and it becomes difficult to interpret.","9297cb06":"Step 1: Get the data set for China and India, and display dataframe.","f2ab6e3f":"Similarly, to get the list of indicies we use the `.index` parameter.","86aa1f44":"*optional: apply a style to Matplotlib.","ac346bfd":"When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the `info()` method.","4d23849a":"**Vertical bar plot**\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar.\n\n**Let's start off by analyzing the effect of Iceland's Financial Crisis:**\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\n**Question**: Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013.","af1943a5":"## Select Column\n**There are two ways to filter on a column name:**\n\n\nMethod 1: Quick and easy, but only works if the column name does NOT have spaces or special characters.\n\n    df.column_name \n        (returns series)\n        \nMethod 2: More robust, and can filter on multiple columns.\n\n    df['column']  \n        (returns series)\n    df[['column 1', 'column 2']] \n        (returns dataframe)\n        \n\n\n\n\n---\n\n\nExample: Let's try filtering on the list of countries ('Country').","37c646cb":"If we do no want the plots to overlap each other, we can stack them using the `stacked` paramemter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the `xlim` paramater, as show below.","63db43b1":"We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows:","de60d986":"Example: Let's view the number of immigrants from Japan (row 87) for the following scenarios: \n1. The full row data (all columns) \n2. For year 2013 3. For years 1980 to 1985","cde36cc0":"## Other Plots\nCongratulations! you have learned how to wrangle data with python and create a line plot with Matplotlib. There are many other plotting styles available other than the default Line plot, Area plot, Histogram all of which can be accessed by passing `kind` keyword to `plot()`. The full list of available plots are as follows:\n\n\n*   `box` for boxplot\n*   `kde` or density for density plots\n*   `pie` for pie plots\n*   `scatter` for scatter plots\n*   `hexbin` for hexbin plot\n","f45978f1":"# 4. Area Pots <a id='AP'><\/a> ","044b23b8":"Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass `stacked=False`.\n\n","dce415fe":"That does not look right!\n\nDon't worry, you'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.\n\nInstead of plotting the population frequency distribution of the population for the 3 countries, *pandas* instead plotted the population frequency distribution for the `years`.\n\nThis can be easily fixed by first transposing the dataset, and then plotting as shown below.","d1a27923":"Note: The default type of index and columns is NOT list.","80ee73a3":"Step 2: Plot graph. We will explicitly specify line plot by passing in `kind` parameter to `plot()`.","3edebbcf":"## Matplotlib: Standard Python Visualization Library <a id='SPVL'><\/a> \n\n\nThe primary plotting library we will explore in the course is [Matplotlib](https:\/\/matplotlib.org\/). As mentioned on their website:\n\n>     Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nIf you are aspiring to create impactful visualization with python, Matplotlib is an essential tool to have at your disposal.","6c9f8aad":"Before we proceed: let's review the changes we have made to our dataframe.","f1bf87b4":"By default, the `histrogram` method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n   * 178 countries contributed between 0 to 3412.9 immigrants\n   * 11 countries contributed between 3412.9 to 6825.8 immigrants\n   * 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..\n\nWe can easily graph this distribution by passing `kind=hist` to `plot()`.","01ccb1df":"Here, We have learned the *pandas* basics and explored Matplotlib along with Visualisation tools.\n\nI hope this kernal is useful to you to learn the Visualisation tools.\n\nIf you find this notebook helpful to you to learn, Please **Upvote**!!","734c5cfb":"**Let's start with a case study:**\n\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and about three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a `Line` plot:\n\n\n**Question**: Plot a line graph of immigration from Haiti using `df.plot()`.","d82dff93":"We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let's annotate this spike in the plot by using the `plt.text()` method.","21ae3be0":"**Horizontal Bar Plot**\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to label categetorical variables.\n\n**Question**: Using the scripting layter and the `df_can` dataset, create a horizontal bar plot showing the total number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.\n\nStep 1: Get the data pertaining to the top 15 countries.","897f230f":"# Table of Contents\n\n  1. [Exploring Datasets with *pandas*](#EDp)\n     1. [The Dataset: Immigration to Canada from 1980 to 2013](#I2C)\n     2. [*pandas* Basics](#PB)\n     3. [*pandas* Intermediate: Indexing and Selection](#PI)\n  2. [Visualizing Data using Matplotlib](#VDuM)\n     1. [Matplotlib: Standard Python Visualization Library](#SPVL)\n  3. [Line Plots](#LP)\n  4. [Area Plots](#AP)\n     1. [Types of Plotting](#ToP)\n  5. [Histograms](#Hist)\n  6. [Bar Charts](#BC)","651d5d74":"Let's also annotate a text to go over the arrow. We will pass in the following additional parameters:\n\n* `rotation`: rotation angle of text in degrees (counter clockwise)\n* `va`: vertical alignment of text [\u2018center\u2019 | \u2018top\u2019 | \u2018bottom\u2019 | \u2018baseline\u2019]\n* `ha`: horizontal alignment of text [\u2018center\u2019 | \u2018right\u2019 | \u2018left\u2019]","b4a02f07":"To get the index and columns as lists, we can use the `tolist()` method.","0885954e":"**Question**: What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?\n\nBefore we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us **Numpy**'s `histrogram` method to get the bin ranges and frequency counts as follows:","78608500":"Let's view the top 5 rows of the dataset using the `head()` function.","acb09ce8":"Finally, let's view a quick summary of each column in our dataframe using the `describe()` method.","2e6bf2f6":"### Two types of plotting <a id='ToP'><\/a>\nThere are two styles\/options of ploting with `matplotlib`. Plotting using the Artist layer and plotting using the scripting layer.\n\n*Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' *\n\nYou can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedurally; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.\n\n           # Option 1: This is what we have been using so far\n           df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10)) \n           plt.title('Immigration trend of top 5 countries')\n           plt.ylabel('Number of immigrants')\n           plt.xlabel('Years')\n           \n*Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) *\n\nYou can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding \"set_\" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title, or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis.\n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).\n\nIn this kernel, we will stick to the **scripting layer**, except for some advanced visualizations where we will need to use the **artist layer** to manipulate advanced aspects of the plots.","5d781363":"## Introduction\nThe aim of this Course is to introduce you to data visualization with Python as concrete and as consistent as possible. Speaking of consistency, because there is no best data visualization library avaiblable for Python - up to creating these kernels - we have to introduce different libraries and show their benefits when we are discussing new visualization concepts. Doing so, we hope to make our kaggle fellow well-rounded with visualization libraries and concepts so that they are able to judge and decide on the best visualitzation technique and tool for a given problem and audience.\n\nNote: The majority of the plots and visualizations will be generated using data stored in pandas dataframes. Therefore, in this kernel along with Visualisation tools, we provide a brief crash course on pandas.","abea7933":"# 5. Histograms <a id='Hist'><\/a> ","d3bbcbe5":"pandas is an essential data analysis toolkit for Python. From their [website](https:\/\/pandas.pydata.org\/):\n\n> pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with \u201crelational\u201d or \u201clabeled\u201d data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.\n\nThe course heavily relies on pandas for data wrangling, analysis, and visualization. We encourage you to spend some time and familizare yourself with the pandas API Reference: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html.","d4e4f50c":"*optional: check if Matplotlib is loaded.","924ebb1c":"Let's download and import our primary Canadian Immigration dataset using pandas `read_excel()` method. Normally, before we can do that, we would need to download a module which pandas requires to read in excel files. This module is **xlrd**. For the convenience, I have pre-installed this module, so we would not have to worry about that. \n          \nNow we are ready to read in our data.","c613a11d":"We can also plot multiple histograms on the same plot. For example, let's try to answer the following questions using a histogram.\n\n**Question**: What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?","290e0326":"1. Using the **scripting layer** to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.45.","618b27b9":"Let's try filtering on the list of countries ('OdName') and the data for years: 1980 - 1985.","01a85d22":"## Matplotlib.Pyplot\n\n\nOne of the core aspects of Matplotlib is `matplotlib.pyplot`. It is Matplotlib's scripting layer. It is a collection of command style functions that make Matplotlib work like MATLAB. Each `pyplot` function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. In this kernel, we will work with the scripting layer to learn how to generate line plots. In future lessons, we will get to work with the Artist layer as well to experiment first hand how it differs from the scripting layer.","def8840c":"To view the dimensions of the dataframe, we use the `.shape` parameter.","f88dbe26":"Next, we will plot a line plot by appending `.plot()` to the `haiti` dataframe.","5fc97918":"Using the **scripting layer** to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35."}}