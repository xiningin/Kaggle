{"cell_type":{"a90580f4":"code","9defc5ef":"code","553ca2fc":"code","941c30fe":"code","c34a51b9":"code","be9b2d1d":"code","bf7491f8":"code","d2c16977":"code","6b915691":"code","8a88eddc":"code","d54febaa":"code","e654a81b":"code","dc185c37":"code","73b709c5":"code","68be702f":"code","c0b3fd52":"code","395f2603":"code","f49acbb1":"code","b207e8a5":"code","0aa2ffa1":"code","cf2ef8b3":"code","a6f33131":"code","50828eec":"code","2e7493d1":"code","7af20454":"code","53764c5f":"code","9afda3fd":"code","121b7363":"code","51b4f6de":"code","157f9247":"markdown","7ce46e48":"markdown","99caafba":"markdown","fa8a007d":"markdown","abdc43df":"markdown"},"source":{"a90580f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9defc5ef":"import matplotlib.pyplot as plt\n%matplotlib inline","553ca2fc":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/krishnaik06\/ARIMA-And-Seasonal-ARIMA\/master\/perrin-freres-monthly-champagne-.csv')\ndf","941c30fe":"df.tail()","c34a51b9":"df.columns=['Month','Sales']\ndf.head()","be9b2d1d":"df.dropna(axis=0,inplace=True)\ndf","bf7491f8":"df['Month']=pd.to_datetime(df['Month'])\ndf","d2c16977":"df.set_index('Month',inplace=True)\ndf","6b915691":"df.plot()","8a88eddc":"from statsmodels.tsa.stattools import adfuller\n","d54febaa":"test_result=adfuller(df['Sales'])","e654a81b":"def adfuller_test(Sales):\n    result=adfuller(Sales)\n    labels=['ADF test statistic','p-value','Lags_used','number of observation used']\n    for value,label in zip(result,labels):\n        print(label+':'+str(value))\n    if result[1]<=0.05:\n        print('strong evidence against the null hypothesis(ho) reject the null hypothesis it is stationary')\n    else:\n        print('it is non stationary')","dc185c37":"adfuller_test(df['Sales'])","73b709c5":"df['Sales'].shift(1)","68be702f":"df['sales_first_difference']=df['Sales']-df['Sales'].shift(1)\ndf['seasonal first difference']=df['Sales']-df['Sales'].shift(12)\ndf","c0b3fd52":"adfuller_test(df['seasonal first difference'].dropna())","395f2603":"df['seasonal first difference'].plot()","f49acbb1":"from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(df['Sales'])\nplt.show()","b207e8a5":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfig=plt.figure(figsize=(12,6))\nax1=fig.add_subplot(211)\nfig=plot_acf(df['seasonal first difference'].iloc[13:],lags=40,ax=ax1)\nax2=fig.add_subplot(212)\nfig=plot_pacf(df['seasonal first difference'].iloc[13:],lags=40,ax=ax2)","0aa2ffa1":"#for non seasonal data\n#p=1,d=1q=0or1\nfrom statsmodels.tsa.arima_model import ARIMA","cf2ef8b3":"model=ARIMA(df['Sales'],order=(1,1,1))\nmodel_fit=model.fit()","a6f33131":"model_fit.summary()","50828eec":"df['forecast']=model_fit.predict(start=90,end=103,dynamic=True)\ndf[['Sales','forecast']].plot()","2e7493d1":"import statsmodels.api as sm\nmodel=sm.tsa.statespace.SARIMAX(df['Sales'],order=(1,1,1),seasonal_order=(1,1,1,12))\nresults=model.fit()","7af20454":"df['forecast']=results.predict(start=90,end=103,dynamic=True)\ndf[['Sales','forecast']].plot()","53764c5f":"df.index[-1]","9afda3fd":"from pandas.tseries.offsets import DateOffset\nfuture_dates=[df.index[-1]+DateOffset(months=x)for x in range(0,24)]\nfuture_dataset_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\nfuture_dataset_df.tail()","121b7363":"future_df=pd.concat([df,future_dataset_df])","51b4f6de":"future_df['forecast']=results.predict(start=104,end=120,dynamics=True)\nfuture_df[['Sales','forecast']].plot()","157f9247":"ARIMA AND SEASONAL ARIMA\nautoregressive integrated moving averages\n1. visualize the time series data\n\n2.make the time series data stationary\n\n3.plot the correlation and autocorrelation chart\n\n4.construct the arima model or seasonal arima based on the data\n\n5. use the model to make predictions","7ce46e48":"# decyfuller test is a hypothesis testing where null hypothesis is h0=it is non stationary\n# alternate hypothesis h1 = it is stationary","99caafba":"# Auto regressive model \nP ar model lags\nd differencing\nq=ma lags","fa8a007d":"# visualize the data","abdc43df":"# the above algoritm does not work well as you can see with yellow forecast line becuse the data is seasonal and arima needs non-seasonal data but dont worry below alogithm work well"}}