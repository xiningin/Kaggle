{"cell_type":{"ec44ded3":"code","dbdf372f":"code","0bfe023e":"code","c79fa0f1":"code","95ed53d4":"code","036595c2":"code","c7816a58":"code","adb077de":"code","a70d7d85":"code","34579350":"code","b20d86a4":"code","d5240482":"code","0895f210":"code","00634bb7":"code","1a385e66":"code","2fe9ab77":"code","d58460dd":"code","bf85b32e":"code","789a3bed":"code","9c82457a":"code","65215741":"code","f868ac35":"code","a4010e82":"code","6449641c":"code","37a55a0b":"code","fcb39dca":"code","580e697b":"code","ecbe9d8a":"code","19012448":"code","ffeb6472":"code","1a6219ef":"code","27c3ca06":"code","a6ad0124":"code","606d385d":"code","e2d565a3":"code","d9e5861d":"code","bc38bd26":"code","cfc26a7a":"code","7298ced9":"code","7238aede":"code","8cdf012f":"code","b2cc9860":"code","ec084edd":"code","907b2989":"code","f87ca0c0":"code","a455c104":"markdown","d69ccf36":"markdown","cf114eb1":"markdown","70638e00":"markdown","60489a8a":"markdown","c62ca826":"markdown","38dc8fe6":"markdown","d32472f9":"markdown","2a5a52e0":"markdown","aed22fb4":"markdown","12f66a57":"markdown","e4119b6d":"markdown","a2b15e76":"markdown","dbf15829":"markdown","168545ed":"markdown","40f9a300":"markdown","e8dda00b":"markdown","b43bbead":"markdown","d77ccd8b":"markdown","0a8fd314":"markdown","6de711b3":"markdown","d6df3bd9":"markdown","01fc6c11":"markdown"},"source":{"ec44ded3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\nplt.style.use('ggplot')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","dbdf372f":"order = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\ncategory = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/product_category_name_translation.csv')\ncustomer = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\norderitems = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\norderpayment = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')\norderreview = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\nproduct = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\nsellers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv')\ngeolocation = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv')","0bfe023e":"print('Customer : ', len(customer))\nprint('Order : ', len(order))\nprint('Order Items : ', len(orderitems))\nprint('Order Payment : ', len(orderpayment))\nprint('Product : ', len(product))\nprint('Sellers : ', len(sellers))\nprint('Order Reviews : ', len(orderreview))\nprint('Geolocation : ', len(geolocation))\nprint('Category : ', len(category))","c79fa0f1":"delivered_order = order[order['order_status'] == 'delivered']\ndelivered_order = delivered_order.fillna(0)\ndelivered_order = delivered_order[delivered_order['order_delivered_customer_date'] != 0]\ndelivered_order = delivered_order[delivered_order['order_approved_at'] != 0]\ntime = (pd.to_datetime(delivered_order['order_delivered_customer_date']) - pd.to_datetime(delivered_order['order_approved_at'])).dt.days\ndelivered_order['delivery_time (days)'] = time\ndelivered_order = delivered_order[delivered_order['delivery_time (days)'] > 0]\ndelivered_order = delivered_order.sort_values('order_approved_at')\ndelivered_order = delivered_order.set_index(pd.to_datetime(delivered_order['order_approved_at']).dt.date, drop=True)\ndelivery_days_average = delivered_order.groupby(delivered_order.index).mean()\nglobal_average = float(delivery_days_average.mean())\n\nplt.figure(figsize = (12,8))\nplt.plot(delivery_days_average.index, delivery_days_average, label = 'daily_delivery_time')\nplt.axhline(y=global_average, linestyle='--', color='blue', label = 'average : ' + str(global_average)[:5] + ' days')\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('average delivery time (days)', fontsize=16)\nplt.title('Average delivery time over time since ' + str(delivery_days_average.index[0]) + ' to ' + str(delivery_days_average.index[-1]) , fontsize=16)\nplt.legend(loc='best', fontsize=16)\nplt.show()","95ed53d4":"items_seller = pd.merge(orderitems, sellers, on='seller_id')\norder_items_seller = pd.merge(items_seller,delivered_order, on='order_id',)\nunique_seller = order_items_seller['seller_id'].unique()\n\nseller_mean = {}\nfor seller_id in unique_seller :\n    seller = order_items_seller[order_items_seller['seller_id'] == seller_id]\n    seller = seller.set_index(pd.to_datetime(seller['order_approved_at']).dt.date, drop=True)\n    seller_days_average = seller.groupby(seller.index).mean()\n    global_average = seller_days_average['delivery_time (days)'].mean()\n    seller_mean[seller_id] = global_average","036595c2":"delivery_time = pd.DataFrame(seller_mean.items(), columns=['seller_id', 'delivery_time'])\ndelivery_time.sort_values('delivery_time')[:20]","c7816a58":"# Rerata kecepatan pengiriman produk masing-masing seller setiap hari dihitung saat barang dikirim\ndelivery_time['delivery_time'].hist(bins=1000, figsize=(15,8))\nplt.axis([0,35,0,110])\nplt.xlabel('average delivery time (days)', fontsize=16)\nplt.ylabel('number of seller', fontsize=16)\nplt.title('histogram of average delivery time from all seller', fontsize=18)\nplt.show()","adb077de":"# Fungsi untuk menghitung jarak dua buah titik berdasarkan perbedaan latitude dan longitude\ndef distance_km(lat1,lon1,lat2,lon2):\n    R = 6373.0  # approximate radius of earth in km\n    lat1 = np.radians(lat1)\n    lon1 = np.radians(lon1)\n    lat2 = np.radians(lat2)\n    lon2 = np.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = np.sin(dlat \/ 2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon \/ 2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n    distance = R * c\n    return distance\n\n# distance_km(52.2296756,21.0122287,52.406374,16.9251681)","a70d7d85":"ord_itm_sel_cus = pd.merge(order_items_seller, customer, on='customer_id')\nseller_zip = geolocation.iloc[:,:3]\nseller_zip.columns = ['seller_zip_code_prefix', 'seller_lat', 'seller_lng']\nseller_zip = seller_zip.groupby('seller_zip_code_prefix', ).first()\n\ncustomer_zip = geolocation.iloc[:,:3]\ncustomer_zip.columns = ['customer_zip_code_prefix', 'customer_lat', 'customer_lng']\ncustomer_zip = customer_zip.groupby('customer_zip_code_prefix', ).first()\n\nord_itm_sel_cus_locsel = pd.merge(ord_itm_sel_cus, seller_zip, on='seller_zip_code_prefix')\nord_itm_sel_cus_locselcus = pd.merge(ord_itm_sel_cus_locsel, customer_zip, on='customer_zip_code_prefix')\nord_itm_sel_cus_locselcus['distance (km)'] = distance_km(ord_itm_sel_cus_locselcus['seller_lat'],ord_itm_sel_cus_locselcus['seller_lng'],ord_itm_sel_cus_locselcus['customer_lat'],ord_itm_sel_cus_locselcus['customer_lng'])\nord_itm_sel_cus_locselcus['delivery_time\/distance'] = ord_itm_sel_cus_locselcus['delivery_time (days)']\/ord_itm_sel_cus_locselcus['distance (km)']\nord_itm_sel_cus_locselcus = ord_itm_sel_cus_locselcus[ord_itm_sel_cus_locselcus['distance (km)'] > 0]\nord_itm_sel_cus_locselcus = ord_itm_sel_cus_locselcus.sort_values('delivery_time\/distance', ascending=True).reset_index()\ngroup_category = pd.merge(ord_itm_sel_cus_locselcus, product, on='product_id')\ngroup_category_trans = pd.merge(group_category, category, on='product_category_name')","34579350":"fastest_delivery_by_product_id = group_category_trans.groupby('product_id').agg({'product_category_name': 'first',\n                                                                                 'product_category_name_english': 'first',\n                                                                                  'delivery_time\/distance':'mean',\n                                                                                   'order_item_id': 'sum',\n                                                                                })\n\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance', ascending=True)\nfastest_delivery_by_product_id[:10]","b20d86a4":"fastest_delivery_by_product_id = group_category_trans.groupby('product_id').agg({'product_category_name': 'first',\n                                                                                 'product_category_name_english': 'first',\n                                                                                  'delivery_time\/distance':'mean',\n                                                                                   'order_item_id': 'sum',\n                                                                                })\nfastest_delivery_by_product_id = fastest_delivery_by_product_id[fastest_delivery_by_product_id['order_item_id'] > 100]\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance', ascending=True)\nfastest_delivery_by_product_id[:10]","d5240482":"fastest_delivery_by_product_id = group_category_trans.groupby('product_category_name').agg({'product_category_name_english':'first',\n                                                                                           'delivery_time\/distance':'mean',\n                                                                                           'order_item_id':'sum'})\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance')\nfastest_delivery_by_product_id[:10]","0895f210":"fastest_delivery_by_product_id = group_category_trans.groupby('product_category_name').agg({'product_category_name_english':'first',\n                                                                                           'delivery_time\/distance':'mean',\n                                                                                           'order_item_id':'sum'})\n\nfastest_delivery_by_product_id = fastest_delivery_by_product_id[fastest_delivery_by_product_id['order_item_id'] > 100]\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance', ascending=True)\nfastest_delivery_by_product_id[:10]","00634bb7":"fastest_delivery_by_product_id = group_category_trans.groupby('seller_id').agg({'delivery_time\/distance':'mean',\n                                                                                'order_item_id':'sum'})\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance', ascending=True)\nfastest_delivery_by_product_id[:10]","1a385e66":"fastest_delivery_by_product_id = group_category_trans.groupby('seller_id').agg({'delivery_time\/distance':'mean',\n                                                                                'order_item_id':'sum'})\nfastest_delivery_by_product_id = fastest_delivery_by_product_id[fastest_delivery_by_product_id['order_item_id'] > 100]\nfastest_delivery_by_product_id = fastest_delivery_by_product_id.sort_values('delivery_time\/distance', ascending=True)\nfastest_delivery_by_product_id[:10]","2fe9ab77":"group_category_trans['volume'] = group_category_trans['product_length_cm'] * group_category_trans['product_height_cm'] * group_category_trans['product_width_cm']\ngroup_category_trans['weight\/volume'] = group_category_trans['product_weight_g']\/group_category_trans['volume']\ngroup_category_trans['price\/distance'] = group_category_trans['price']\/group_category_trans['distance (km)']","d58460dd":"find_corr = group_category_trans[['price', 'freight_value', 'seller_zip_code_prefix', 'delivery_time (days)',\n       'customer_zip_code_prefix', 'seller_lat', 'seller_lng', 'customer_lat',\n       'customer_lng', 'distance (km)','product_weight_g', 'product_length_cm', 'product_height_cm', 'product_width_cm',\n       'volume']]\ncorr_matrix = find_corr.corr()\ncorr_matrix['delivery_time (days)'].sort_values(ascending=False)","bf85b32e":"from pandas.plotting import scatter_matrix\n\nfind_corr = group_category_trans[['freight_value', 'delivery_time (days)',\n       'customer_zip_code_prefix', 'distance (km)','product_weight_g']]\n\nscatter_matrix(find_corr, figsize=(20,20))\nplt.show()","789a3bed":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\n\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy = 'median')),\n    ('std_scaler', StandardScaler())\n])\n\nX = group_category_trans[['freight_value', 'customer_zip_code_prefix', 'distance (km)','product_weight_g']]\ny = group_category_trans['delivery_time (days)']\n\nX_data = num_pipeline.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y.values, test_size=0.2, random_state = 14)\nlin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)\ny_model = lin_reg.predict(X_test)\nprint(\"Predictions : \", y_model)\nprint(\"Actual : \", y_test)","9c82457a":"y_predictions = lin_reg.predict(X_test)\nlin_mse = mean_squared_error(y_test, y_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","65215741":"def display_scores(scores):\n    print(\"Score : \", scores)\n    print(\"Mean : \", scores.mean())\n    print(\"Standar deviasion : \", scores.std())\n\nlin_scores = cross_val_score(lin_reg, X_data, y.values, scoring='neg_mean_squared_error', cv=10)\nlin_rmse = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse)","f868ac35":"lin_reg.coef_","a4010e82":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(max_depth=100)\ntree_reg.fit(X_train, y_train)\ny_predict = tree_reg.predict(X_test)\nprint(\"Prediction : \", y_predict)\nprint(\"Actual : \", y_test)","6449641c":"y_predictions = tree_reg.predict(X_test)\nlin_mse = mean_squared_error(y_test, y_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","37a55a0b":"tree_scores = cross_val_score(tree_reg, X_data, y.values, scoring='neg_mean_squared_error', cv=10)\nlin_rmse = np.sqrt(-tree_scores)\ndisplay_scores(lin_rmse)","fcb39dca":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators = 10)\nforest_reg.fit(X_train, y_train)\ny_predict = forest_reg.predict(X_test)\nprint('Predictions : ', y_predict)\nprint('Actual : ', y_test)","580e697b":"y_predictions = forest_reg.predict(X_test)\nforest_mse = mean_squared_error(y_test, y_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","ecbe9d8a":"forest_scores = cross_val_score(forest_reg, X_data, y.values, scoring='neg_mean_squared_error', cv=5)\nforest_rmse = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse)","19012448":"from sklearn.linear_model import SGDRegressor\n\nsgd_reg = SGDRegressor(max_iter=1000, penalty = 'l2', eta0=0.05)\nsgd_reg.fit(X_train, y_train)\ny_predict = sgd_reg.predict(X_test)\nprint(\"Prediction : \", y_predict)\nprint(\"Actual : \", y_test)","ffeb6472":"y_predictions = sgd_reg.predict(X_test)\nsgd_mse = mean_squared_error(y_test, y_predictions)\nsgd_rmse = np.sqrt(sgd_mse)\nsgd_rmse","1a6219ef":"sgd_scores = cross_val_score(sgd_reg, X_data, y.values, scoring='neg_mean_squared_error', cv=10)\nsgd_rmse = np.sqrt(-sgd_scores)\ndisplay_scores(sgd_rmse)","27c3ca06":"sgd_reg.coef_","a6ad0124":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [{'penalty': [None, 'l2', 'l1'], 'eta0': [0.01, 0.05, 0.1, 0.15]}]\n\nsgd_reg = SGDRegressor()\ngrid_search = GridSearchCV(sgd_reg, param_grid, cv=5, scoring='neg_mean_squared_error')\ngrid_search.fit(X_data, y.values)","606d385d":"# Hyperparameter terbaik dari pencarian grid cv\ngrid_search.best_params_","e2d565a3":"final_model = grid_search.best_estimator_\ny_predict = final_model.predict(X_test)\nfinal_mse = mean_squared_error(y_test, y_predict)\nfinal_rmse = np.sqrt(final_mse)\nfinal_rmse","d9e5861d":"final_scores = cross_val_score(final_model, X_data, y.values, scoring = 'neg_mean_squared_error', cv=5)\nfinal_rmse = np.sqrt(-final_scores)\ndisplay_scores(final_rmse)","bc38bd26":"final_model.coef_","cfc26a7a":"group_cat_review = pd.merge(group_category_trans, orderreview, on='order_id')\nclass_data = group_cat_review[['price', 'freight_value', 'seller_zip_code_prefix','delivery_time (days)',\n                              'customer_zip_code_prefix','seller_lat', 'seller_lng', 'customer_lat',\n                               'customer_lng', 'distance (km)', 'delivery_time\/distance','product_weight_g',\n                               'product_length_cm', 'product_height_cm', 'product_width_cm', 'volume', 'review_score']]","7298ced9":"corr_matrix = class_data.corr()\ncorr_matrix['review_score'].sort_values(ascending=False)","7238aede":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nX = class_data = group_cat_review[['freight_value','delivery_time (days)',\n                                'distance (km)']]\n\ny = class_data = group_cat_review['review_score']\n\nscaler = StandardScaler()\nscaler.fit(X)\nX_data = scaler.transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_data, y.values, test_size=0.2)\n\nlog_reg = LogisticRegression(multi_class='auto', solver='lbfgs')\nlog_reg.fit(X_train, y_train)","8cdf012f":"y_model = log_reg.predict(X_test)\naccuracy_score(y_test, y_model )","b2cc9860":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier(random_state=42)\nsgd_clf.fit(X_train, y_train)","ec084edd":"y_model = sgd_clf.predict(X_test)\naccuracy_score(y_test, y_model)","907b2989":"# from sklearn.svm import SVC\n\n# svm_clf = SVC()\n# svm_clf.fit(X_train, y_train)","f87ca0c0":"# y_model = svm_clf.predict(X_test)\n# accuracy_score(y_test, y_model)","a455c104":"Seller dengan nomor identitas **44717f64ec2a457979cf83c429077666** memiliki kecepatan pengiriman yang paling baik dibandingkan seller lainnya. Namun jumlah penjualan yang telah dilakukan oleh seller tersebut masih sangat sedikit sehingga secara statistik tidak cukup representatif.","d69ccf36":"**GridSearch CV, find best hyperparameter**","cf114eb1":"**Random Forest**","70638e00":"Berdasarkan perhitungan terlihat bahwa produk dengan kategori **costruction_tools_tools** memiliki kecepatan pengiriman yang paling baik dibandingkan dengan produk lainnya yang sudah terjual sebanyak lebih dari 100 items","60489a8a":"### Rerata kecepatan pengiriman berdasarkan seller_id dengan pejualan produk lebih dari 100 items","c62ca826":"Tabel diatas menunjukkan korelasi masing-masing feature terhadap review score dari customer. Terlihat bahwa nilai review score memiliki korelasi yang sangat besar dengan kecepatan waktu pengiriman.","38dc8fe6":"### Rerata kecepatan pengiriman berdasarkan kategori produk yang terjual lebih dari 100 items","d32472f9":"### Rerata kecepatan pengiriman setiap hari berdasarkan product_id yang terjual lebih dari 100 items","2a5a52e0":"Berdasarkan tabel diatas terlihat produk dengan id **dade783416e4099641bdd36ee0f0c3a3** menempati peringkat teratas yang memiliki waktu pengiriman\/jarak yang paling kecil dibandingkan dibandingkan produk lainnya. Pada peringkat atas dapat dilihat produk dengan kategori mainan menempati tiga peringkat teratas. Namun hasil ini belum cukup adil untuk membandingkan secara keseluruhan, karena jika ditinjau dari jumlah item yang terjual maka terlihat produk mainan yang menempati peringkat teratas masih terjual dalam jumlah yang sangat sedikit sehingga secara statistik tidak cukup representatif. ","aed22fb4":"Tabel nilai korelasi untuk setiap feature terhadap waktu pengiriman. Terlihat lamanya waktu pengiriman memiliki korelasi yang sangat besar dengan jarak antar kota dan kode pos kostumer (posisi kota). Biaya pengiriman juga memiliki korelasi yang cukup besar terhadap lamanya waktu pengiriman.","12f66a57":"Berdasarkan perhitungan juga terlihat bahwa produk dengan kategori **security_and_services** memiliki waktu pengiriman (delivery_time\/distance) yang paling cepat. Namun secara statistik hasil ini masih kurang representatif karena jumlah pembelian yang dimiliki oleh kategori tersebut masih sangat sedikit yaitu (2 items).","e4119b6d":"**SGD Classification**","a2b15e76":"**SVM Classification**","dbf15829":"**Linear Regression**","168545ed":"**Logistic Probabilistic Classification**","40f9a300":"Jika diambil product_id yang memiliki jumlah penjualan produk lebih dari 100 agar dapat cukup representatif secara statistik maka dapat dilihat bahwa produk dengan kode identitas **9571759451b1d780ee7c15012ea109d4** dengan kategori produk berupa **automotiv** memiliki kecepatan pengiriman (delivery_time\/distance) paling tinggi dibandingkan yang lainnya.","e8dda00b":"**Stochastic Gradient Descent Regressor**","b43bbead":"Seller dengan identitas **8a432f4e5b471f8da497d7dc517666e2** memiliki kecepatan pengiriman terbaik dibandingkan seller lainnya yang telah menjual produk sebanyak lebih dari 100 items","d77ccd8b":"### Rerata kecepatan pengiriman berdasarkan seller_id","0a8fd314":"**Decision Tree**","6de711b3":"Rerata kecepatan pengiriman setiap hari dari tahun 2016 hingga tahun 2018. Secara keseluruhan terlihat kecepatan pengiriman sebesar 11.73 hari","d6df3bd9":"### Rerata kecepatan pengiriman berdasarkan kategori produk","01fc6c11":"**Classification**"}}