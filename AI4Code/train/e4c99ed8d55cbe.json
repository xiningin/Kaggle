{"cell_type":{"5e308645":"code","fe2314e1":"code","98b32e2c":"code","ea643ad6":"code","05d87524":"code","e669f8db":"code","49916811":"code","8bd9e93e":"code","f13edb9b":"code","05c8350e":"code","0f44cb30":"code","9a282ee4":"code","c41b575e":"code","9d17a088":"code","6577f4e8":"code","72d8ccc9":"code","8edd194f":"code","a08d2acc":"code","7b7d8d05":"code","881b2958":"code","e9f05f7d":"code","b6ee3505":"code","28db4ba8":"code","ff993eac":"code","aa8211d3":"code","e1984658":"code","760dbed6":"code","d08e2644":"code","946ab2c4":"code","d59cbe35":"markdown","3d7726c4":"markdown","c3f13397":"markdown","bb841c72":"markdown","b544678e":"markdown","633d4374":"markdown","9856616f":"markdown","51712385":"markdown","073fcbfb":"markdown","71d44eb4":"markdown","fcdda8c1":"markdown","04fc16af":"markdown","45c60238":"markdown"},"source":{"5e308645":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe2314e1":"img_dir = '..\/input\/image-classification\/images\/images'\nval_dir = '..\/input\/image-classification\/validation\/validation'","98b32e2c":"!pip3 install tensorflow==2.3.0 -q","ea643ad6":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import datasets, layers, models, regularizers\nimport matplotlib.pyplot as plt\n%matplotlib inline\ntf.__version__","05d87524":"# change as you want\nimage_size = (180, 180)\nbatch_size = 32","e669f8db":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=img_dir,\n    validation_split=0.3,\n    subset=\"training\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n)","49916811":"train_ds.class_names","8bd9e93e":"val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=img_dir,\n    validation_split=0.3,\n    subset=\"validation\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n)","f13edb9b":"test_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=val_dir,\n    validation_split=0.9999,\n    subset=\"validation\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n)","05c8350e":"# put your code here\nclass_names = train_ds.class_names\n\nplt.figure(figsize=(16, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(10):\n        ax = plt.subplot(2, 5, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(class_names[int(labels[i])])\n        plt.axis(\"off\")\n","0f44cb30":"epochs = 200\n\ndef create_model():\n       \n    class_numbers = len (class_names) \n    model = models.Sequential()\n    \n    model.add(layers.experimental.preprocessing.RandomFlip(\"horizontal\"))\n\n    model.add(layers.experimental.preprocessing.Rescaling(1.\/255))\n    \n    model.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(180,180, 3)))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Dropout(0.5))\n    \n    model.add(layers.Flatten())\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(32, activation='relu'))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(class_numbers))\n    \n    model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n    \n    return model","9a282ee4":"model = create_model()","c41b575e":"checkpoint_path = \"training_1\/cp.ckpt\"\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\n# Create a callback that saves the model's weights\ncp_callback = keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n                                                 save_weights_only=True,\n                                                 verbose=1)\nearlystop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\n\n\n\n# Train the model with the new callback\nhistory = model.fit(train_ds, epochs=epochs, validation_data=(val_ds),\n                    callbacks=[cp_callback,earlystop])  # Pass callback to training","9d17a088":"ls {checkpoint_dir}","6577f4e8":"# Create a basic model instance\nmodel = create_model()\n\n# Evaluate the model\nloss,acc = model.evaluate(test_ds, verbose=2)\nprint(\"Untrained model, accuracy: {:5.2f}%\".format(100*acc))","72d8ccc9":"# Loads the weights\nmodel.load_weights(checkpoint_path)\n\n# Re-evaluate the model\nloss,acc = model.evaluate(test_ds, verbose=2)\nprint(\"Restored model, accuracy: {:5.2f}%\".format(100*acc))","8edd194f":"def plot_history(history, epochs):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs_range = range(epochs+1)\n    plt.figure(figsize=(16, 8))\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs_range, acc,label='Training Accuracy')\n    plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.xlabel('Number of epochs')\n    plt.ylabel('Accuracy (%)')\n    plt.title('Training and Validation Accuracy')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs_range, loss, label='Training Loss')\n    plt.plot(epochs_range, val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.xlabel('Number of epochs')\n    plt.ylabel('Loss (%)')\n    plt.title('Training and Validation Loss')\n    plt.show()","a08d2acc":"plot_history(history, earlystop.stopped_epoch)","7b7d8d05":"# Save the entire model as a SavedModel.\n!mkdir -p saved_model\nmodel.save('saved_model\/my_model') \n","881b2958":"# my_model directory\n!ls saved_model\n\n# Contains an assets folder, saved_model.pb, and variables folder.\n!ls saved_model\/my_model\n","e9f05f7d":"new_model = tf.keras.models.load_model('saved_model\/my_model')\n\n# Check its architecture\nnew_model.summary()","b6ee3505":"test_dir = '..\/input\/image-classification\/test\/test'\nos.listdir(test_dir)","28db4ba8":"test2_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=test_dir,\n    validation_split=0.9999,\n    subset=\"validation\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n)\n","ff993eac":"predictions = model.predict(test2_ds)","aa8211d3":"import matplotlib.pyplot as plt\nplt.figure(figsize=(18, 10))\nfor images, labels in test2_ds:\n    for i in range(0,9):\n        ax = plt.subplot(3, 3, i + 1)\n        predictions[i]\n        score = tf.nn.softmax(predictions[i])\n        percent_confidence = 100 * np.max(score)\n        plt.title(class_names[np.argmax(score)]+' ('+str (round(percent_confidence,2))+' %)')\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.axis(\"off\")","e1984658":"from skimage import io\nimport matplotlib.pyplot as plt","760dbed6":"# First Image\nplt.figure(figsize=(18, 10))\nimage_url = \"https:\/\/static.designboom.com\/wp-content\/dbsub\/416329\/2018-03-04\/fullscreen_1520192182_099fb995346f31c749f6e40db0f395e3.jpg\"\nimage_path = tf.keras.utils.get_file('fullscreen_1520192182_099fb995346f31c749f6e40db0f395e3', origin=image_url)\nimg = keras.preprocessing.image.load_img(image_path, target_size=(180, 180))\nimg_array = keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.softmax(predictions[0])\npercent_confidence = 100 * np.max(score)\nplt.title(class_names[np.argmax(score)]+' ('+str (round(percent_confidence,2))+' %)')\nimage = io.imread(image_url)\nplt.imshow(image)\nplt.axis(\"off\")","d08e2644":"# Second Image\nplt.figure(figsize=(18, 10))\nimage_url = \"https:\/\/levelpreston.co.uk\/wp-content\/uploads\/2017\/10\/foodLEVELS-10023-1000x800.jpg\"\nimage_path = tf.keras.utils.get_file('foodLEVELS-10023-1000x800', origin=image_url)\nimg = keras.preprocessing.image.load_img(image_path, target_size=(180, 180))\nimg_array = keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.softmax(predictions[0])\npercent_confidence = 100 * np.max(score)\nplt.title(class_names[np.argmax(score)]+' ('+str (round(percent_confidence,2))+' %)')\nimage = io.imread(image_url)\nplt.imshow(image)\nplt.axis(\"off\")","946ab2c4":"# Third Image\nplt.figure(figsize=(18, 10))\nimage_url = \"https:\/\/www.besthospitalitydegrees.com\/wp-content\/uploads\/2014\/01\/travel-adventure-blogs.jpg\"\nimage_path = tf.keras.utils.get_file('travel-adventure-blogs', origin=image_url)\nimg = keras.preprocessing.image.load_img(image_path, target_size=(180, 180))\nimg_array = keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batch\npredictions = model.predict(img_array)\nscore = tf.nn.softmax(predictions[0])\npercent_confidence = 100 * np.max(score)\nplt.title(class_names[np.argmax(score)]+' ('+str (round(percent_confidence,2))+' %)')\nimage = io.imread(image_url)\nplt.imshow(image)\nplt.axis(\"off\")","d59cbe35":"# Your model ","3d7726c4":"# Test data ","c3f13397":"# Validation data ","bb841c72":"# Test on 3 external images ","b544678e":"# Plot error and accuracy (train and validation) ","633d4374":"# Import TF & check the version ","9856616f":"# Visualize (plot) some images from training data with their labels ","51712385":"# Save model ","073fcbfb":"# Data Directories ","71d44eb4":"# Training data ","fcdda8c1":"# Install TF","04fc16af":"# Test on some images from \n\n```..\/input\/image-classification\/test\/test\/classify```","45c60238":"# Image size and batch size \nchange the image size and the batch size as you want"}}