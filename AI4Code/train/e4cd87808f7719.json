{"cell_type":{"6e60a904":"code","5b7f00aa":"code","45d872ba":"code","81e0859e":"code","fd3d0d87":"code","74f9a398":"code","a3eacd85":"code","fb4e5d2a":"code","4545d1dc":"code","c675732a":"code","0e8c5a28":"code","ceaeefad":"code","b0fd23c6":"code","9fa33040":"code","f1b4ccef":"code","96305da1":"code","aa7e8ab1":"code","924fa5b5":"code","d05b7453":"code","7b3674fe":"code","c87ef1ed":"code","cbcc362c":"code","a23e2711":"code","4d3e20e8":"code","a7711a25":"code","689ac28f":"code","4b780314":"code","142f4dc4":"code","291d87dd":"code","1f015bb5":"code","71c800c9":"code","b75497f6":"code","b8f07405":"code","3bee181a":"code","a80a1ffe":"code","8790e949":"code","52b641e3":"code","c805656c":"code","35c549ab":"code","cdf28adf":"code","636c7f61":"code","ece12097":"code","dfe2052f":"code","18dfa5a2":"code","243f384d":"code","9988af03":"code","db78c688":"code","d2f9b4a1":"code","394acea2":"code","009d1999":"code","d0bf6d70":"code","045e824a":"code","d1d0d04e":"code","aa46d9d2":"code","d74bd94c":"code","cddeff23":"code","d6194d5f":"code","a763088a":"code","3c701729":"code","70847b49":"code","813cb1ba":"code","f7f12f3b":"code","321599f7":"code","a012313d":"code","b0b3e227":"code","823925a3":"code","72b32765":"code","abe238e3":"code","e7ae433c":"code","a86fe164":"code","ea3c37fe":"code","3645593e":"code","2997e741":"code","f921b632":"code","db856982":"code","f187d3be":"code","3687cee3":"code","8552b44b":"code","cdfa54aa":"markdown","6cc894d8":"markdown","f0434afc":"markdown","ae09f7ab":"markdown","510239ec":"markdown","08a5c072":"markdown","8a39021f":"markdown","8514e82c":"markdown","b50f4f15":"markdown","7b110dc7":"markdown","9966c95a":"markdown","33734246":"markdown","a66b97b0":"markdown","638c9236":"markdown","fbd813f0":"markdown","4849f8b9":"markdown","b8d6597a":"markdown","9ee166ad":"markdown","91d2586f":"markdown","573601dc":"markdown","237bfc7f":"markdown","063b7b36":"markdown","fb5fa3a8":"markdown","bd0f135c":"markdown","9cd188cd":"markdown","89e188a2":"markdown","89711a93":"markdown","bcef1b9e":"markdown","f5fba69b":"markdown","5ff1370e":"markdown","20aad8bc":"markdown","2ba27d6e":"markdown"},"source":{"6e60a904":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\nfrom mpl_toolkits.mplot3d import axes3d\nimport seaborn as sns\nfrom sklearn.preprocessing import scale\nimport sklearn.linear_model as skl_lm\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nimport statsmodels.api as sm\n\nprint(\"Packages LOADED\")","5b7f00aa":"df_base = pd.read_csv('\/kaggle\/input\/Log-Reg-Case-Study.csv')\ndf_base.head()","45d872ba":"from sklearn.linear_model import LogisticRegression\n\ndata = df_base\narr = df_base.values\narr\n\n# Declare the independent variables by just taking 4 variables\nX = data.ix[:,(1,10,11,13)]\nX","81e0859e":"# Declare the dependent variable - Default_On_Payment\ny = data.ix[:,16]\ny","fd3d0d87":"# Run the regression\nregr = LogisticRegression()\nregr.fit(X,y)\n\n# Predict the results\npred = regr.predict(X)\npred","74f9a398":"y","a3eacd85":"# Build the Confusion Matrix\n\nfrom sklearn.metrics import confusion_matrix,classification_report\n\ncm_df = pd.DataFrame(confusion_matrix(y,pred).T, index=regr.classes_, columns=regr.classes_)\ncm_df.index.name = 'Predicted'\ncm_df.columns.name = 'True'\nprint(cm_df)","fb4e5d2a":"# Partition into 70% Train and 30% Test data\n\n# Train data\nmodel_data = df_base.sample(frac=0.7, random_state=1234)\nmodel_data.head()","4545d1dc":"df_base.shape","c675732a":"print(model_data.shape)","0e8c5a28":"# Test data\ntest_data = df_base.loc[~df_base.index.isin(model_data.index),:]\nprint(test_data.shape)","ceaeefad":"df = model_data\ndf.describe()","b0fd23c6":"# Age\n\nprint(df.Age.describe())","9fa33040":"# check 99.5 quantile\nprint(df.Age.quantile(q=0.995))","f1b4ccef":"# check 99.7 quantile\nprint(df.Age.quantile(q=0.997))","96305da1":"# check 99.9 quantile\nprint(df.Age.quantile(q=0.999))","aa7e8ab1":"# Capping the Age values greater than 75 to 75\ndf.loc[df['Age']>75,'Age'] = 75","924fa5b5":"print(min(df.Age))","d05b7453":"print(max(df.Age))","7b3674fe":"df.isnull().values.any()","c87ef1ed":"df.isnull().sum()","cbcc362c":"df.isnull().sum().sum()","a23e2711":"# Housing\n\npd.crosstab(data.Housing,data.Default_On_Payment)","4d3e20e8":"sns.countplot(x='Housing', data=df, palette='hls')\nplt.show()","a7711a25":"print(df.Housing.isnull().sum())","689ac28f":"pd.crosstab(data.Housing.isnull(), data.Default_On_Payment)","4b780314":"pd.crosstab(data.Housing, data.Default_On_Payment).plot(kind='bar')\nplt.title('Frequency of Defaulters')\nplt.xlabel('Housing')\nplt.ylabel('Frequency of Defaults')\nplt.show()","142f4dc4":"df.Housing.isnull().sum()","291d87dd":"df['Housing'].mode()[0]","1f015bb5":"df.Housing[df.Housing=='A152'].count()","71c800c9":"df['Housing'].fillna(df['Housing'].mode()[0], inplace=True)\ndf.Housing[df.Housing=='A152'].count()","b75497f6":"df.Housing.isnull().sum()","b8f07405":"print(df.Num_Dependents.value_counts())","3bee181a":"sns.countplot(x='Num_Dependents', data=df, palette='hls')\nplt.show()","a80a1ffe":"pd.crosstab(data.Num_Dependents, data.Default_On_Payment).plot(kind='bar')\nplt.title('Frequency of Defaulters')\nplt.xlabel('Num_Dependents')\nplt.ylabel('Frequency of Defaults')\nplt.show()","8790e949":"def get_Percent(col,df):\n    grps = df.groupby([col,'Default_On_Payment'])\n    df2 = pd.DataFrame()\n    for name,group in grps:\n        df2.loc[name[0],name[1]] = len(group)\n    df2['Percentage 0'] = df2[0]*100\/(df2[0]+df2[1])\n    df2['Percentage 1'] = df2[1]*100\/(df2[0]+df2[1])\n    print(df2.sort_values(by='Percentage 1'))\n    \ncols = ['Num_Dependents']\n\nfor col in cols:\n    get_Percent(col,df_base)","52b641e3":"df.shape","c805656c":"df = df.drop(['Customer_ID', 'Num_Dependents'], axis=1)\ndf.shape","35c549ab":"df['Job_Status'].unique()","cdf28adf":"df['Job_Status'].describe()","636c7f61":"df['Job_Status'].isnull().sum()","ece12097":"print(df.Job_Status.value_counts())","dfe2052f":"sns.countplot(x='Job_Status', data=df, palette='hls')\nplt.show()","18dfa5a2":"pd.crosstab(data.Job_Status, data.Default_On_Payment)","243f384d":"pd.crosstab(data.Job_Status, data.Default_On_Payment).plot(kind='bar')\nplt.title('Frequency of Defaulters')\nplt.xlabel('Job_Status')\nplt.ylabel('Frequency of Defaults')\nplt.show()","9988af03":"cols = ['Job_Status']\n\nfor col in cols:\n    get_Percent(col,df_base)","db78c688":"df['Job_Status'].mode()","d2f9b4a1":"df['Job_Status'].fillna(df['Job_Status'].mode()[0], inplace=True)\ndf.Job_Status.isnull().sum()","394acea2":"df.Job_Status.unique()","009d1999":"print(model_data.shape)","d0bf6d70":"f1 = model_data['Job_Status'] == 'A171'\nf2 = model_data['Job_Status'] == 'A172'\nf3 = model_data['Job_Status'] == 'A173'","045e824a":"model_data['Dummy_A171'] = np.where(f1,1,0)\nmodel_data['Dummy_A172'] = np.where(f2,1,0)\nmodel_data['Dummy_A173'] = np.where(f3,1,0)\n\nprint(model_data.shape)","d1d0d04e":"model_data = model_data.drop(['Job_Status'], axis=1)\n\nmodel_data.shape","aa46d9d2":"cols = ['Purpose_Credit_Taken']\n\nfor col in cols:\n    get_Percent(col, df_base)","d74bd94c":"# For Low Default Percentage\n\nf1 = model_data['Purpose_Credit_Taken']=='P41'\nf2 = model_data['Purpose_Credit_Taken']=='P43'\nf3 = model_data['Purpose_Credit_Taken']=='P48'\n\nprint(model_data.shape)","cddeff23":"model_data['Dummy_Purpose_Credit_Taken_Low'] = np.where(np.logical_or(f1,\n                                                                     np.logical_or(f2,f3)),1,0)\n\nprint(model_data.shape)","d6194d5f":"# For High Default peecentage\n\nf1 = model_data['Purpose_Credit_Taken']=='P49'\nf2 = model_data['Purpose_Credit_Taken']=='P40'\nf3 = model_data['Purpose_Credit_Taken']=='P45'\nf4 = model_data['Purpose_Credit_Taken']=='P50'\nf5 = model_data['Purpose_Credit_Taken']=='P46'\n\nprint(model_data.shape)","a763088a":"model_data['Dummy_Purpose_Credit_Taken_High'] = np.where(np.logical_or(f1,\n                                                                      np.logical_or(f2,\n                                                                                   np.logical_or(f3,\n                                                                                                np.logical_or(f4,f5)))),1,0)\n\nprint(model_data.shape)","3c701729":"model_data = model_data.drop(['Purpose_Credit_Taken'],axis=1)\n\nmodel_data.shape","70847b49":"pd.crosstab(data.Age,data.Default_On_Payment)","813cb1ba":"pd.crosstab(data.Age,data.Default_On_Payment).plot(kind='bar')\nplt.title('Frequency of Defaulters')\nplt.xlabel('Age')\nplt.ylabel('Frequency of Defaults')\nplt.show()","f7f12f3b":"bins = [0,30,100]\nages = model_data.Age\nlbls = [1,0]\n\nmodel_data['Dummy_Age_Group'] = pd.cut(ages,labels=lbls,bins=bins)","321599f7":"model_data[['Age','Dummy_Age_Group']].head()","a012313d":"model_data.shape","b0b3e227":"# Drop the 'Age' column as we have created a Dummy Variable for it.\nmodel_data = model_data.drop(['Age'],axis=1)\nmodel_data.shape","823925a3":"# Drop non-numeric columns\ndf2 = model_data._get_numeric_data()\ndf2.head()","72b32765":"# Independent variables\nX = df2.loc[:,df2.columns!='Default_On_Payment'].values\nX","abe238e3":"# Dependent variable\ny = df2.iloc[:,5].values\ny","e7ae433c":"logit = sm.Logit(y,sm.add_constant(X))\nlg = logit.fit()\nlg.summary()","a86fe164":"# Find out the significant variables\n\ndef get_significant_vars(lm):\n    var_p_vals_df = pd.DataFrame(lm.pvalues)\n    var_p_vals_df['vars'] = var_p_vals_df.index\n    var_p_vals_df.columns = ['pvals','vars']\n    return list(var_p_vals_df[var_p_vals_df.pvals<=0.05]['vars'])\n\nsignificant_vars = get_significant_vars(lg)\nsignificant_vars","ea3c37fe":"# Consider only the significant variables and fit function again\nX = df2.ix[:,(0,2,4,9)].values\nX","3645593e":"logit = sm.Logit(y,sm.add_constant(X))\nlg = logit.fit()\nlg.summary()","2997e741":"significant_vars = get_significant_vars(lg)\nsignificant_vars","f921b632":"# Consider only the significant variables and fit function again\nX = df2.ix[:,(0,1,4)].values\nX","db856982":"logit = sm.Logit(y,sm.add_constant(X))\nlg = logit.fit()\nlg.summary()","f187d3be":"significant_vars = get_significant_vars(lg)\nsignificant_vars","3687cee3":"regr = LogisticRegression()\nregr.fit(X,y)\nprint(regr.coef_)\nprint(regr.intercept_)","8552b44b":"pred = regr.predict(X)\npred","cdfa54aa":"### Regression model","6cc894d8":"We will calculate the percentage of Default_On_Payment against the Num_Dependents","f0434afc":"# Run a raw sample Logistic Regression model without any Partitioning\/Pre-processing","ae09f7ab":"## Advanced Missing Techniques - Dummy Variables for Job_Status","510239ec":"### Predict the results","08a5c072":"## Build the Model using StatsModels","8a39021f":"## EDA and Bivariate Analysis on Job_Status","8514e82c":"## Categorize the Age and create a Dummy Variable for 'Age'","b50f4f15":"The above implies that only 0.1% of Age values are above 75, so we will cap those values to 75","7b110dc7":"## Deal with missing values - Job_Status","9966c95a":"### Drop the 'Purpose_Credit_Taken' column as we have created Dummy Variables for it","33734246":"## EDA on 'Age' column","a66b97b0":"Since the Percentages of Default_On_Payment is not changing with the Num_Dependents, we can drop that column.\nAlso, Customer_ID column is immaterial to the Regression, we will drop this aswell.","638c9236":"## Deal with Missing values - Housing","fbd813f0":"From the above, we will consider the top 3 rows as low default percentage and the bottom 5 rows as high default percentage on 'Purpose_Credit_Taken'","4849f8b9":"# Import the libraries","b8d6597a":"### Capping (Handling the outliers)","9ee166ad":"# Preprocessing","91d2586f":"### Check the Missing values","573601dc":"# Load the dataset","237bfc7f":"## EDA on 'Purpose_Credit_Taken'\nCalculate the precentages of 'Default_On_Payment' against 'Purpose_Credit_Taken' using the previously defined **get_Percent** function","063b7b36":"Since there are variations in percentages of Default_On_Payment against Job_Status, we cannot drop that column","fb5fa3a8":"### Bivariate Analysis and EDA\n","bd0f135c":"## Create Dummy Variables for Low Default percentage and High Default percentage-'Purpose_Credit_Taken'","9cd188cd":"# Partitioning","89e188a2":"### Logit function","89711a93":"### Declare the Independent and Dependent variables","bcef1b9e":"## Univariate Analysis","f5fba69b":"## EDA and Bivariate Analysis on 'Num of Dependents'","5ff1370e":"Interpreting the above, the Age 30 can be seen as the dividing factor. Below Age 30, there are more defaulters than the ones above Age 30.","20aad8bc":"Drop the original column 'Job_Status' as we have created Dummy Variables for it.","2ba27d6e":"Calculate the percentages of Default_On_Payment against Job_Status using the previously defined **get_Percent** function"}}