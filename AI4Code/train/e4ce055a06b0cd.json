{"cell_type":{"3e3ac14f":"code","5e92d023":"code","2cfef4cc":"code","efc5ab3b":"code","faa95dc0":"code","7943ba75":"code","e0ef7f86":"code","951c35bb":"code","8db5515d":"code","9f99823e":"code","8da817d3":"code","7975fe2d":"code","e1cc2751":"code","9686b04c":"code","311278ed":"code","23883b92":"code","49752ab7":"code","e0c8a029":"code","2eef0576":"code","8d79f73e":"code","beb25f08":"code","ff8c28d5":"code","2c2351ae":"code","7952a025":"code","5df297b4":"code","8afcacdc":"code","d79f36a4":"code","f1ee614f":"code","06b03f30":"code","e594cd2c":"code","6db4a3c3":"code","a663bfae":"code","5949dd00":"code","cd6107e7":"code","b4771e39":"code","e991f0c8":"code","51092735":"code","cd55f070":"code","5a09ca7f":"code","45749bc5":"code","1ddde901":"code","fc90d922":"code","dcfa85f4":"code","624b5aec":"code","8bf25678":"code","f082dad8":"code","84bc4292":"code","9b3f969c":"code","5dbb00b9":"code","ebd89977":"code","785c6fff":"code","ba8344fc":"code","b8ccc8cd":"code","6998d6d4":"code","defd3485":"code","32e9365d":"code","0719e787":"code","a7276bbe":"code","66f4a949":"code","c0094cd4":"code","96dbc9a0":"code","7778d349":"code","87469fad":"code","3b8a48c0":"code","45716226":"code","0d57ef13":"code","36669252":"code","c1e197a2":"code","bc1808d9":"code","88a7619b":"code","2ec165fb":"code","d6ae6d80":"code","0748f50b":"code","1fc3e631":"code","4346cf21":"code","a43c7ea0":"code","85b9c472":"code","708deff3":"code","595c2c64":"code","87011a87":"code","4eafd9c3":"code","05904e7b":"code","f580fcb9":"code","ff0e2654":"code","afc39283":"code","b0b3911d":"code","ef6a6dbb":"code","c8c52ed3":"code","976793e1":"markdown","bb7213f7":"markdown","d757bf24":"markdown","290ebc4e":"markdown","f4a20c23":"markdown","5adb2249":"markdown","8772aa87":"markdown","1a088106":"markdown","6c01adc9":"markdown","e9a18b1c":"markdown","d71dc119":"markdown","6b1b6b3e":"markdown","4ef6dce0":"markdown","98419a65":"markdown","794f907e":"markdown","d3765275":"markdown","67f55698":"markdown","46f9fadc":"markdown","6c8316f2":"markdown","7ac4f9c5":"markdown","a8a3e0f7":"markdown","72eb9ae6":"markdown","5adbfa27":"markdown","5077f6cd":"markdown","77d6e205":"markdown","c5419208":"markdown","2f82b416":"markdown"},"source":{"3e3ac14f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e92d023":"import os\nfrom os import listdir\nimport pandas as pd\nimport numpy as np\nimport glob\nimport tqdm\nfrom typing import Dict\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n#color\nfrom colorama import Fore, Back, Style\n\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n#pydicom\nimport pydicom\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n","2cfef4cc":"# List files available\nlist(os.listdir(\"..\/input\/osic-pulmonary-fibrosis-progression\"))","efc5ab3b":"from colorama import Fore, Back, Style\nIMAGE_PATH = \"..\/input\/osic-pulmonary-fibrosis-progressiont\/\"\n\ntrain_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\n\nprint(Fore.BLUE + 'Training data shape: ',Style.RESET_ALL, train_df.shape)\ntrain_df.head(10)","faa95dc0":"train_df.groupby(['SmokingStatus']).count()['Sex'].to_frame()","7943ba75":"# Null values and Data types\nprint(Fore.BLUE + 'Train Set !!',Style.RESET_ALL)\nprint(train_df.info())\nprint('-------------')\nprint(Fore.GREEN + 'Test Set !!',Style.RESET_ALL)\nprint(test_df.info())","e0ef7f86":"train_df.isnull().sum()","951c35bb":"test_df.isnull().sum()","8db5515d":"# Total number of Patient in the dataset(train+test)\n\nprint(Fore.BLUE +\"Total Patients in Train set: \",Style.RESET_ALL,train_df['Patient'].count())\nprint(Fore.GREEN +\"Total Patients in Test set: \",Style.RESET_ALL,test_df['Patient'].count())","9f99823e":"print(Fore.BLUE + \"The total patient ids are\",Style.RESET_ALL,f\"{train_df['Patient'].count()},\", Fore.GREEN + \"from those the unique ids are\", Style.RESET_ALL, f\"{train_df['Patient'].value_counts().shape[0]}.\")","8da817d3":"train_patient_ids = set(train_df['Patient'].unique())\ntest_patient_ids = set(test_df['Patient'].unique())\n\ntrain_patient_ids.intersection(test_patient_ids)","7975fe2d":"columns = train_df.keys()\ncolumns = list(columns)\nprint(columns)","e1cc2751":"train_df['Patient'].value_counts().max()","9686b04c":"test_df['Patient'].value_counts().max()","311278ed":"np.quantile(train_df['Patient'].value_counts(), 0.75) - np.quantile(test_df['Patient'].value_counts(), 0.25)","23883b92":"print(np.quantile(train_df['Patient'].value_counts(), 0.95))\nprint(np.quantile(test_df['Patient'].value_counts(), 0.95))","49752ab7":"files = folders = 0\n\npath = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\"\n\nfor _, dirnames, filenames in os.walk(path):\n  # ^ this idiom means \"we won't be using this value\"\n    files += len(filenames)\n    folders += len(dirnames)\n#print(Fore.YELLOW +\"Total Patients in Train set: \",Style.RESET_ALL,train_df['Patient'].count())\nprint(Fore.BLUE +f'{files:,}',Style.RESET_ALL,\"files\/images, \" + Fore.GREEN + f'{folders:,}',Style.RESET_ALL ,'folders\/patients')","e0c8a029":"files = []\nfor _, dirnames, filenames in os.walk(path):\n  # ^ this idiom means \"we won't be using this value\"\n    files.append(len(filenames))\n\nprint(Fore.YELLOW +f'{round(np.mean(files)):,}',Style.RESET_ALL,'average files\/images per patient')\nprint(Fore.BLUE +f'{round(np.max(files)):,}',Style.RESET_ALL, 'max files\/images per patient')\nprint(Fore.GREEN +f'{round(np.min(files)):,}',Style.RESET_ALL,'min files\/images per patient')","2eef0576":"patient_df = train_df[['Patient', 'Age', 'Sex', 'SmokingStatus']].drop_duplicates()\npatient_df.head()","8d79f73e":"# Creating unique patient lists and their properties. \ntrain_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\ntest_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/test\/'\n\npatient_ids = os.listdir(train_dir)\npatient_ids = sorted(patient_ids)\n\n#Creating new rows\nno_of_instances = []\nage = []\nsex = []\nsmoking_status = []\n\nfor patient_id in patient_ids:\n    patient_info = train_df[train_df['Patient'] == patient_id].reset_index()\n    no_of_instances.append(len(os.listdir(train_dir + patient_id)))\n    age.append(patient_info['Age'][0])\n    sex.append(patient_info['Sex'][0])\n    smoking_status.append(patient_info['SmokingStatus'][0])\n\n#Creating the dataframe for the patient info    \npatient_df = pd.DataFrame(list(zip(patient_ids, no_of_instances, age, sex, smoking_status)), \n                                 columns =['Patient', 'no_of_instances', 'Age', 'Sex', 'SmokingStatus'])\nprint(patient_df.info())\npatient_df.head()","beb25f08":"patient_df['SmokingStatus'].value_counts()","ff8c28d5":"patient_df['SmokingStatus'].value_counts().iplot(kind='bar',\n                                              yTitle='Percentage', \n                                              linecolor='red', \n                                              opacity=0.7,\n                                              color='blue',\n                                              theme='pearl',\n                                              bargap=0.8,\n                                              gridcolor='white',\n                                              title='Distribution of the SmokingStatus column in the Unique Patient Set')","2c2351ae":"train_df['Weeks'].value_counts().head()","7952a025":"train_df['Weeks'].value_counts().iplot(kind='barh',\n                                      xTitle='Counts(Weeks)', \n                                      linecolor='black', \n                                      opacity=0.7,\n                                      color='#450902',\n                                      theme='pearl',\n                                      bargap=0.2,\n                                      gridcolor='white',\n                                      title='Distribution of the Weeks in the training set')","5df297b4":"train_df['Weeks'].iplot(kind='hist',\n                              xTitle='Counts(Weeks)', \n                              linecolor='black', \n                              opacity=0.7,\n                              color='#8072FB',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the Weeks in the training set')","8afcacdc":"fig = px.scatter(train_df, x=\"Weeks\", y=\"Age\", color='Sex')\nfig.show()","d79f36a4":"train_df['FVC'].value_counts()","f1ee614f":"train_df['FVC'].iplot(kind='hist',\n                      xTitle='Lung Capacity(ml)', \n                      linecolor='black', \n                      opacity=0.8,\n                      color='#FB72ED',\n                      bargap=0.5,\n                      gridcolor='white',\n                      title='Distribution of the FVC in the training set')","06b03f30":"fig = px.scatter(train_df, x=\"FVC\", y=\"Percent\", color='Age')\nfig.show()","e594cd2c":"fig = px.scatter(train_df, x=\"FVC\", y=\"Age\", color='Sex')\nfig.show()","6db4a3c3":"fig = px.scatter(train_df, x=\"FVC\", y=\"Weeks\", color='SmokingStatus')\nfig.show()","a663bfae":"patient = train_df[train_df.Patient == 'ID00422637202311677017371']\nfig = px.line(patient, x=\"Weeks\", y=\"FVC\", color='SmokingStatus')\nfig.show()","5949dd00":"train_df['Percent'].value_counts()","cd6107e7":"train_df['Percent'].iplot(kind='hist',bins=30,color='#FB7286',xTitle='Percent distribution',yTitle='Count')","b4771e39":"df = train_df\nfig = px.violin(df, y='Percent', x='SmokingStatus', box=True, color='Sex', points=\"all\",\n          hover_data=train_df.columns)\nfig.show()","e991f0c8":"plt.figure(figsize=(16, 6))\nax = sns.violinplot(x = train_df['SmokingStatus'], y = train_df['Percent'], palette = 'Blues')\nax.set_xlabel(xlabel = 'Smoking Habit', fontsize = 15)\nax.set_ylabel(ylabel = 'Percent', fontsize = 15)\nax.set_title(label = 'Distribution of Smoking Status Over Percentage', fontsize = 20)\nplt.show()","51092735":"df = px.data.iris() # iris is a pandas DataFrame\nfig = px.scatter(train_df, x=\"Age\", y=\"Percent\", color='SmokingStatus')\nfig.show()","cd55f070":"patient_df['Age'].iplot(kind='hist',bins=30,color='#FB72ED',xTitle='Ages of distribution',yTitle='Count')","5a09ca7f":"patient_df['SmokingStatus'].value_counts()","45749bc5":"plt.figure(figsize=(16, 6))\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Ex-smoker', 'Age'], label = 'Ex-smoker',shade=True)\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Never smoked', 'Age'], label = 'Never smoked',shade=True)\nsns.kdeplot(patient_df.loc[patient_df['SmokingStatus'] == 'Currently smokes', 'Age'], label = 'Currently smokes', shade=True)\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","1ddde901":"plt.figure(figsize=(16, 6))\nax = sns.violinplot(x = patient_df['SmokingStatus'], y = patient_df['Age'], palette = 'Blues')\nax.set_xlabel(xlabel = 'Smoking habit', fontsize = 15)\nax.set_ylabel(ylabel = 'Age', fontsize = 15)\nax.set_title(label = 'Distribution of Smokers over Age', fontsize = 20)\nplt.show()\n","fc90d922":"plt.figure(figsize=(16, 6))\nsns.kdeplot(patient_df.loc[patient_df['Sex'] == 'Male', 'Age'], label = 'Male',shade=True)\nsns.kdeplot(patient_df.loc[patient_df['Sex'] == 'Female', 'Age'], label = 'Female',shade=True)\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","dcfa85f4":"patient_df['Sex'].value_counts()","624b5aec":"patient_df['Sex'].value_counts().iplot(kind='bar',\n                                          yTitle='Count', \n                                          linecolor='black', \n                                          opacity=0.7,\n                                          color='#320601',\n                                          theme='pearl',\n                                          bargap=0.8,\n                                          gridcolor='white',\n                                          title='Distribution of the Sex column in Patient Dataframe')","8bf25678":"plt.figure(figsize=(16, 6))\na = sns.countplot(data=patient_df, x='SmokingStatus', hue='Sex')\n\nfor p in a.patches:\n    a.annotate(format(p.get_height(), ','), \n           (p.get_x() + p.get_width() \/ 2., \n            p.get_height()), ha = 'center', va = 'center', \n           xytext = (0, 4), textcoords = 'offset points')\n\nplt.title('Gender split by SmokingStatus', fontsize=16)\nsns.despine(left=True, bottom=True);","f082dad8":"df = px.data.tips()\nfig = px.box(patient_df, x=\"Sex\", y=\"Age\", points=\"all\")\nfig.show()","84bc4292":"# Extract patient id's for the training set\nids_train = train_df.Patient.values\n# Extract patient id's for the validation set\nids_test = test_df.Patient.values\n\n# Create a \"set\" datastructure of the training set id's to identify unique id's\nids_train_set = set(ids_train)\nprint(f'There are {len(ids_train_set)} unique Patient IDs in the training set')\n# Create a \"set\" datastructure of the validation set id's to identify unique id's\nids_test_set = set(ids_test)\nprint(f'There are {len(ids_test_set)} unique Patient IDs in the test set')\n\n# Identify patient overlap by looking at the intersection between the sets\npatient_overlap = list(ids_train_set.intersection(ids_test_set))\nn_overlap = len(patient_overlap)\nprint(f'There are {n_overlap} Patient IDs in both the training and test sets')\nprint('')\nprint(f'These patients are in both the training and test datasets:')\nprint(f'{patient_overlap}')","9b3f969c":"corrmat = train_df.corr() \nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap = 'RdPu', linewidths = 0.5) ","5dbb00b9":"print('Train .dcm number of images:', len(list(os.listdir('..\/input\/osic-pulmonary-fibrosis-progression\/train'))), '\\n' +\n      'Test .dcm number of images:', len(list(os.listdir('..\/input\/osic-pulmonary-fibrosis-progression\/test'))), '\\n' +\n      '--------------------------------', '\\n' +\n      'There is the same number of images as in train\/ test .csv datasets')","ebd89977":"def plot_pixel_array(dataset, figsize=(5,5)):\n    plt.figure(figsize=figsize)\n    plt.grid(False)\n    plt.imshow(dataset.pixel_array, cmap='gray') # cmap=plt.cm.bone)\n    plt.show()","785c6fff":"# https:\/\/www.kaggle.com\/schlerp\/getting-to-know-dicom-and-the-data\ndef show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    \n    print(dataset.data_element(\"ImageOrientationPatient\"))\n    print(dataset.data_element(\"ImagePositionPatient\"))\n    print(dataset.data_element(\"PatientID\"))\n    print(dataset.data_element(\"PatientName\"))\n    print(dataset.data_element(\"PatientSex\"))\n   \n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)","ba8344fc":"i = 1\nnum_to_plot = 2\nfor folder_name in os.listdir('..\/input\/osic-pulmonary-fibrosis-progression\/train\/'):\n        patient_path = os.path.join('..\/input\/osic-pulmonary-fibrosis-progression\/train\/',folder_name)\n        \n        for i in range(1, num_to_plot+1):     \n            file_path = os.path.join(patient_path, str(i) + '.dcm')\n\n            dataset = pydicom.dcmread(file_path)\n            show_dcm_info(dataset)\n            plot_pixel_array(dataset)\n\n        break","b8ccc8cd":"#https:\/\/www.kaggle.com\/yeayates21\/osic-simple-image-eda\n\nimdir = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00123637202217151272140\"\nprint(\"total images for patient ID00123637202217151272140: \", len(os.listdir(imdir)))\n\n# view first (columns*rows) images in order\nw=10\nh=10\nfig=plt.figure(figsize=(12, 12))\ncolumns = 5\nrows = 5\nimglist = os.listdir(imdir)\nfor i in range(1, columns*rows +1):\n    filename = imdir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='nipy_spectral')\nplt.show()","6998d6d4":"# https:\/\/www.kaggle.com\/yeayates21\/osic-simple-image-eda\n\nimdir = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00123637202217151272140\"\nprint(\"total images for patient ID00123637202217151272140: \", len(os.listdir(imdir)))\n\n# view first (columns*rows) images in order\nw=10\nh=10\nfig=plt.figure(figsize=(12, 12))\ncolumns = 4\nrows = 5\nimglist = os.listdir(imdir)\nfor i in range(1, columns*rows +1):\n    filename = imdir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='gnuplot')\nplt.show()","defd3485":"apply_resample = False\n\ndef load_scan(path):\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: float(x.ImagePositionPatient[2]))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices","32e9365d":"def load_scan(path):\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: float(x.ImagePositionPatient[2]))\n    try:\n        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])\n    except:\n        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)\n        \n    for s in slices:\n        s.SliceThickness = slice_thickness\n        \n    return slices","0719e787":"def get_pixels_hu(slices):\n    image = np.stack([s.pixel_array for s in slices])\n    # Convert to int16 (from sometimes int16), \n    # should be possible as values should always be low enough (<32k)\n    image = image.astype(np.int16)\n\n    # Set outside-of-scan pixels to 0\n    # The intercept is usually -1024, so air is approximately 0\n    image[image == -2000] = 0\n    \n    # Convert to Hounsfield units (HU)\n    for slice_number in range(len(slices)):\n        \n        intercept = slices[slice_number].RescaleIntercept\n        slope = slices[slice_number].RescaleSlope\n        \n        if slope != 1:\n            image[slice_number] = slope * image[slice_number].astype(np.float64)\n            image[slice_number] = image[slice_number].astype(np.int16)\n            \n        image[slice_number] += np.int16(intercept)\n    \n    return np.array(image, dtype=np.int16)","a7276bbe":"def set_lungwin(img, hu=[-1200., 600.]):\n    lungwin = np.array(hu)\n    newimg = (img-lungwin[0]) \/ (lungwin[1]-lungwin[0])\n    newimg[newimg < 0] = 0\n    newimg[newimg > 1] = 1\n    newimg = (newimg * 255).astype('uint8')\n    return newimg","66f4a949":"scans = load_scan('..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/')\nscan_array = set_lungwin(get_pixels_hu(scans))","c0094cd4":"scans = load_scan('..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/')\nscan_array = set_lungwin(get_pixels_hu(scans))","96dbc9a0":"# Resample to 1mm (An optional step, it may not be relevant to this competition because of the large slice thickness on the z axis)\n\nfrom scipy.ndimage.interpolation import zoom\n\ndef resample(imgs, spacing, new_spacing):\n    new_shape = np.round(imgs.shape * spacing \/ new_spacing)\n    true_spacing = spacing * imgs.shape \/ new_shape\n    resize_factor = new_shape \/ imgs.shape\n    imgs = zoom(imgs, resize_factor, mode='nearest')\n    return imgs, true_spacing, new_shape\n\nspacing_z = (scans[-1].ImagePositionPatient[2] - scans[0].ImagePositionPatient[2]) \/ len(scans)\n\nif apply_resample:\n    scan_array_resample = resample(scan_array, np.array(np.array([spacing_z, *scans[0].PixelSpacing])), np.array([1.,1.,1.]))[0]","7778d349":"import imageio\nfrom IPython.display import Image\n\nimageio.mimsave(\"\/tmp\/gif.gif\", scan_array, duration=0.0002)\nImage(filename=\"\/tmp\/gif.gif\", format='png')","87469fad":"from matplotlib.widgets import Slider\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\nfig = plt.figure()\n\nims = []\nfor image in scan_array:\n    im = plt.imshow(image, animated=True, cmap=\"Greys\")\n    plt.axis(\"off\")\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=False,\n                                repeat_delay=1000)","3b8a48c0":"HTML(ani.to_jshtml())","45716226":"?np.sort","0d57ef13":"HTML(ani.to_html5_video())","36669252":"patient_id = \"ID00035637202182204917484\"\n\ndicom_path = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\"\n\nfiles = np.array([f.replace(\".dcm\",\"\") for f in os.listdir(f\"{dicom_path}\/{patient_id}\/\")])\nfiles = -np.sort(-files.astype(\"int\"))\ndicoms = [f\"{dicom_path}\/{patient_id}\/{f}.dcm\" for f in files]","c1e197a2":"images = []\nfor dcm in dicoms:\n    tmp = pydicom.dcmread(dcm)\n    slope = tmp.RescaleSlope\n    intercept = tmp.RescaleIntercept\n    final = tmp.pixel_array*slope + intercept\n    images.append(final)\n    \nimages = np.array(images) ","bc1808d9":"fig = plt.figure()\n\nims = []\nfor image in range(0,images.shape[0],10):\n    im = plt.imshow(images[image,:,:], \n                    animated=True, cmap=plt.cm.bone)\n    plt.axis(\"off\")\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=False,\n                                repeat_delay=1000)\n\nplt.close()","88a7619b":"HTML(ani.to_jshtml())","2ec165fb":"HTML(ani.to_html5_video())","d6ae6d80":"fig = plt.figure()\n\nims = []\nfor image in range(0,images.shape[1],5):\n    im = plt.imshow(images[:,image,:], animated=True, cmap=plt.cm.bone)\n    plt.axis(\"off\")\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=False,\n                                repeat_delay=1000)\n\nplt.close()\n\nHTML(ani.to_jshtml())","0748f50b":"fig = plt.figure()\n\nims = []\nfor image in range(0,images.shape[2],5):\n    im = plt.imshow(images[:,:,image], animated=True, cmap=plt.cm.bone)\n    plt.axis(\"off\")\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=False,\n                                repeat_delay=1000)\n\nplt.close()\n\nHTML(ani.to_jshtml())","1fc3e631":"plt.hist(np.array(images).reshape(-1,), bins=50)\nplt.show()","4346cf21":"import matplotlib.animation as animation\n\nfig = plt.figure()\n\nims = []\nfor image in scan_array:\n    im = plt.imshow(image, animated=True, cmap=\"Greys\")\n    plt.axis(\"off\")\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=False,\n                                repeat_delay=1000)","a43c7ea0":"HTML(ani.to_jshtml())","85b9c472":"HTML(ani.to_html5_video())","708deff3":"from typing import Dict\ndef extract_dicom_meta_data(filename: str) -> Dict:\n    # Load image\n    \n    image_data = pydicom.read_file(filename)\n    img=np.array(image_data.pixel_array).flatten()\n    row = {\n        'Patient': image_data.PatientID,\n        'body_part_examined': image_data.BodyPartExamined,\n        'image_position_patient': image_data.ImagePositionPatient,\n        'image_orientation_patient': image_data.ImageOrientationPatient,\n        'photometric_interpretation': image_data.PhotometricInterpretation,\n        'rows': image_data.Rows,\n        'columns': image_data.Columns,\n        'pixel_spacing': image_data.PixelSpacing,\n        'window_center': image_data.WindowCenter,\n        'window_width': image_data.WindowWidth,\n        'modality': image_data.Modality,\n        'StudyInstanceUID': image_data.StudyInstanceUID,\n        'SeriesInstanceUID': image_data.StudyInstanceUID,\n        'StudyID': image_data.StudyInstanceUID, \n        'SamplesPerPixel': image_data.SamplesPerPixel,\n        'BitsAllocated': image_data.BitsAllocated,\n        'BitsStored': image_data.BitsStored,\n        'HighBit': image_data.HighBit,\n        'PixelRepresentation': image_data.PixelRepresentation,\n        'RescaleIntercept': image_data.RescaleIntercept,\n        'RescaleSlope': image_data.RescaleSlope,\n        'img_min': np.min(img),\n        'img_max': np.max(img),\n        'img_mean': np.mean(img),\n        'img_std': np.std(img)}\n\n    return row","595c2c64":"import glob\nimport tqdm\ntrain_image_path = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train'\ntrain_image_files = glob.glob(os.path.join(train_image_path, '*', '*.dcm'))\n\nmeta_data_df = []\nfor filename in tqdm.tqdm(train_image_files):\n    try:\n        meta_data_df.append(extract_dicom_meta_data(filename))\n    except Exception as e:\n        continue","87011a87":"# Convert to a pd.DataFrame from dict\nmeta_data_df = pd.DataFrame.from_dict(meta_data_df)\nmeta_data_df.head()","4eafd9c3":"# source: https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/154658\nfolder='train'\nPATH='..\/input\/osic-pulmonary-fibrosis-progression\/'\n\nlast_index = 2\n\ncolumn_names = ['image_name', 'dcm_ImageOrientationPatient', \n                'dcm_ImagePositionPatient', 'dcm_PatientID',\n                'dcm_PatientName', 'dcm_PatientSex'\n                'dcm_rows', 'dcm_columns']\n\ndef extract_DICOM_attributes(folder):\n    patients_folder = list(os.listdir(os.path.join(PATH, folder)))\n    df = pd.DataFrame()\n    \n    i = 0\n    \n    for patient_id in patients_folder:\n   \n        img_path = os.path.join(PATH, folder, patient_id)\n        \n        print(img_path)\n        \n        images = list(os.listdir(img_path))\n        \n        #df = pd.DataFrame()\n\n        for image in images:\n            image_name = image.split(\".\")[0]\n\n            dicom_file_path = os.path.join(img_path,image)\n            dicom_file_dataset = pydicom.read_file(dicom_file_path)\n                \n            '''\n            print(dicom_file_dataset.dir(\"pat\"))\n            print(dicom_file_dataset.data_element(\"ImageOrientationPatient\"))\n            print(dicom_file_dataset.data_element(\"ImagePositionPatient\"))\n            print(dicom_file_dataset.data_element(\"PatientID\"))\n            print(dicom_file_dataset.data_element(\"PatientName\"))\n            print(dicom_file_dataset.data_element(\"PatientSex\"))\n            '''\n            \n            imageOrientationPatient = dicom_file_dataset.ImageOrientationPatient\n            #imagePositionPatient = dicom_file_dataset.ImagePositionPatient\n            patientID = dicom_file_dataset.PatientID\n            patientName = dicom_file_dataset.PatientName\n            patientSex = dicom_file_dataset.PatientSex\n        \n            rows = dicom_file_dataset.Rows\n            cols = dicom_file_dataset.Columns\n            \n            #print(rows)\n            #print(columns)\n            \n            temp_dict = {'image_name': image_name, \n                                    'dcm_ImageOrientationPatient': imageOrientationPatient,\n                                    #'dcm_ImagePositionPatient':imagePositionPatient,\n                                    'dcm_PatientID': patientID, \n                                    'dcm_PatientName': patientName,\n                                    'dcm_PatientSex': patientSex,\n                                    'dcm_rows': rows,\n                                    'dcm_columns': cols}\n\n\n            df = df.append([temp_dict])\n            \n        i += 1\n        \n        if i == last_index:\n            break\n            \n    return df","05904e7b":"extract_DICOM_attributes('train')","f580fcb9":"import pandas_profiling as pdp","ff0e2654":"train_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')","afc39283":"profile_train_df = pdp.ProfileReport(train_df)","b0b3911d":"profile_train_df","ef6a6dbb":"profile_test_df = pdp.ProfileReport(test_df)","c8c52ed3":"profile_test_df","976793e1":"**We already see 5 patients in test set that can be found in train set as well.**","bb7213f7":"**Data Exploration in Details**\n\n**Individual Patient Dataframe**\n\n**for 175 unique patients, we make new dataframe**\n\nhttps:\/\/www.kaggle.com\/redwankarimsony\/pulmonary-fibrosis-progression-interactive-eda","d757bf24":"# Number of Patients and Images in Training Images Folder\n https:\/\/www.kaggle.com\/yeayates21\/osic-simple-image-eda","290ebc4e":"# Pick one patient for FVC vs Weeks","f4a20c23":"# FVC vs Weeks","5adb2249":"# Heatmap for train.csv","8772aa87":"**Basic Data Exploration**\n\n\n**General Info**","1a088106":"**Weeks distribution**","6c01adc9":"**Reading the train.csv**","e9a18b1c":"****Patient Counts****","d71dc119":"# Extracting DIOCOM files information in a dataframe","6b1b6b3e":"18 : Ex-smoker\n\n49 : Never smoked\n\n9 : Currently smokes","4ef6dce0":"# FVC - The forced vital capacity\n# The forced vital capacity (FVC), i.e. the volume of air exhaled\n\n# the recorded lung capacity in ml","98419a65":"#                OSIC Pulmonary Fibrosis Progression\n\n\n***1. Introduction***\n\n\n**1.1 What is Pulmonary fibrosis?**\nIdiopathic pulmonary fibrosis (IPF) is a type of chronic scarring lung disease characterized by a progressive and irreversible decline in lung function. Symptoms typically include gradual onset of shortness of breath and a dry cough.Other changes may include feeling tired, and abnormally large and dome shaped finger and toenails (nail clubbing).Complications may include pulmonary hypertension, heart failure, pneumonia, or pulmonary embolism.\n\nThe cause is unknown.Risk factors include cigarette smoking, certain viral infections, and a family history of the condition.The underlying mechanism involves scarring of the lungs.Diagnosis requires ruling out other potential causes.It may be supported by a CT scan or lung biopsy which show usual interstitial pneumonia (UIP).It is a type of interstitial lung disease (ILD).\n\nPeople often benefit from pulmonary rehabilitation and supplemental oxygen.Certain medications like pirfenidone or nintedanib may slow the progression of the disease.Lung transplantation may also be an option.\n\nAbout 5 million people are affected globally.The disease newly occurs in about 12 per 100,000 people per year.Those in their 60s and 70s are most commonly affected.Males are affected more often than females. Average life expectancy following diagnosis is about four years.\n![](https:\/\/previews.123rf.com\/images\/stockdevil\/stockdevil1503\/stockdevil150300002\/37249266-pulmonary-tuberculosis-collection-chest-x-ray-show-patchy-infiltration-interstitial-infiltration-alv.jpg)\n\n**1.2 What is OSIC Pulmonary Fibrosis Progression Competition?**\nIn this competition, you\u2019ll predict a patient\u2019s severity of decline in lung function based on a CT scan of their lungs. You\u2019ll determine lung function based on output from a spirometer, which measures the volume of air inhaled and exhaled. The challenge is to use machine learning techniques to make a prediction with the image, metadata, and baseline FVC as input.\n\n**1.3 What I need to do? Observation**\nI will predict a patient\u2019s severity of decline in lung function based on a CT scan of their lungs. In other words, I will predict the final three FVC measurements for each patient, as well as a confidence value in your prediction.\n\nThe leaderboard of this competition is calculated with approximately 1%->15% of the test data. The final results will be based on the other 99%->85%, so the final standings may be different.\n\n**1.4 Metric: Laplace Log Likelihood**\n\n![](https:\/\/i.imgur.com\/tEIZvli.png)\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/ad\/Laplace_cdf_mod.svg\/488px-Laplace_cdf_mod.svg.png)\n\n\nThe evaluation metric of this competition is a modified version of Laplace Log Likelihood. Read more about it on the Evaluation Page.\n\nIf you feel this was something new and fresh, and it added some value to you, please consider upvoting, it motivates to keep writing good kernels\n\n**Contents**\n\nBasic Exploratory Data Analysis\n\nGetting started - Importing libraries\n\nReading the train.csv\n\nData Exploration\n\nCheck Train & Test Info.\n\nUnique Patients(Ids)\n\nExploring the 'SmokingStatus' column\n\nWeeks distribution\n\nFVC - The forced vital capacity\n\nExploring the Percent column\n\nGender Distribution\n\nPatient Overlap\n\nVisualising Images : DECOM\n\nVisualising One DECOM Image & Info\n\nVisualising Multiple DECOM Images\n\nVisualization using gif\n\nExtracting DIOCOM files Info.\n\nPandas Profiling\n\nPandas Profiling Report for Train.csv\n\nPandas Profiling Report for Test.csv\n\n","794f907e":"There are some negative values for Weeks.\n\nBecause Weeks is the relative number of weeks pre\/post the baseline CT.","d3765275":"# Age Distribution of Unique Patients","67f55698":"**Importing the necessary libraries**","46f9fadc":"# FVC vs Age","6c8316f2":"**Missing values**","7ac4f9c5":"# Percent vs SmokingStatus In Patient Dataframe","a8a3e0f7":"# Distribution of Age vs SmokingStatus In Patient Dataframe","72eb9ae6":"Distribution Age over Week","5adbfa27":"# FVC vs Percent","5077f6cd":"**Exploring the 'SmokingStatus' column**","77d6e205":"FVC seems to related Percent linearly.","c5419208":"Percent\nA computed field which approximates the patient's FVC as a percent of the typical FVC for a person of similar characteristics","2f82b416":"**There is no missing values in train_df and test_df.**"}}