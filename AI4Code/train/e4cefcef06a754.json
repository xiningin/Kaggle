{"cell_type":{"e0b8f22b":"code","b5e03e86":"code","f1aabea1":"code","c66a5e87":"code","81492bff":"code","6391efcf":"code","892dc26b":"code","39ee062b":"code","8706ce6f":"code","4c400dfc":"code","74c58406":"code","5d79cf74":"code","96b8d8f1":"code","0e8622c0":"code","b0cd1498":"code","9ab97f6d":"markdown","e3ee4539":"markdown","3b422d78":"markdown","a6611a43":"markdown","dc00dd14":"markdown","ab353ee1":"markdown","99f19ba4":"markdown","ea6e0f2c":"markdown","ef790a12":"markdown","c7aea58c":"markdown","f943aa78":"markdown"},"source":{"e0b8f22b":"# Importing packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go \nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\n\nplt.rcParams.update({'font.size': 14})\ndata = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates = ['ObservationDate','Last Update'])\ndata.shape","b5e03e86":"data.head(10)\n","f1aabea1":"data['Country\/Region'].unique()","c66a5e87":"# data = data.drop_duplicates()\ndata = data.drop(['SNo', 'Last Update', 'Province\/State'], axis=1)\ndata = data.rename(columns={'Country\/Region': 'Country', 'ObservationDate':'Date'})\n# To check null values\ndata.isnull().sum()","81492bff":"data.head(2)","6391efcf":"#This creates a table that sums up every element in the Confirmed, Deaths, and recovered columns.\ntemp = data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum()\n#Reset index coverts the index series, in this case date, into an index value. \ntemp = temp.reset_index()\ntemp = temp.sort_values('Date', ascending=False)\ntemp['Mortality Rate %']=temp['Deaths']\/temp['Confirmed']*100\ntemp.head().style.background_gradient(cmap='PRGn')","892dc26b":"#Confirmed ALL\nfig = go.Figure()\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Scatter(x=temp['Date'], \n                         y=temp['Confirmed'],\n                         mode='lines+markers',\n                         name='Confirmed',\n                         line=dict(color='Yellow', width=2)))\nfig.show()","39ee062b":"Top_3_affected = data.copy()\nScrewed=['Iran','Italy','South Korea']#,'Mainland China']\nTop_3_affected = Top_3_affected[Top_3_affected.Country.isin(Screwed)]\nTop_3_affected = Top_3_affected.groupby(['Date', 'Country']).agg({'Confirmed': ['sum']})\nTop_3_affected.columns = ['Confirmed Cases']\nTop_3_affected = Top_3_affected.reset_index()\nfig = px.line(Top_3_affected, x=\"Date\", y=\"Confirmed Cases\", color=\"Country\",\n              line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()","8706ce6f":"grouped_multiple = data.groupby(['Date']).agg({'Deaths': ['sum'],'Recovered': ['sum'],'Confirmed': ['sum']})\ngrouped_multiple.columns = ['Deaths_ALL','Recovered_ALL','Confirmed_ALL']\ngrouped_multiple = grouped_multiple.reset_index()\ngrouped_multiple['Difference_world']=grouped_multiple['Confirmed_ALL'].diff().shift(-1)\n\ngrouped_multiple['Deaths_ALL_%'] = grouped_multiple.apply(lambda row: ((row.Deaths_ALL)\/(row.Confirmed_ALL))*100 , axis=1)\ngrouped_multiple['Recovered_ALL_%'] = grouped_multiple.apply(lambda row: ((row.Recovered_ALL)\/(row.Confirmed_ALL))*100 , axis=1)\ngrouped_multiple['World_growth_rate']=grouped_multiple.apply(lambda row: row.Difference_world\/row.Confirmed_ALL*100, axis=1)\n\n\nfig = go.Figure()\nfig.update_layout(template='plotly_dark')\nfig.add_trace(go.Scatter(x=grouped_multiple['Date'], \n                         y=grouped_multiple['Deaths_ALL_%'],\n                         mode='lines+markers',\n                         name='Death rate',\n                         line=dict(color='red', width=2)))\n\nfig.add_trace(go.Scatter(x=grouped_multiple['Date'], \n                         y=grouped_multiple['Recovered_ALL_%'],\n                         mode='lines+markers',\n                         name='Recovery rate',\n                         line=dict(color='Green', width=2)))\n\nfig.add_trace(go.Scatter(x=grouped_multiple['Date'], \n                         y=grouped_multiple['World_growth_rate'],\n                         mode='lines+markers',\n                         name='Growth rate confirmed',\n                         line=dict(color='Yellow', width=2)))\n\nfig.show()\ngrouped_multiple.tail()","4c400dfc":"mortality = data.copy()\n\nmortality = mortality[mortality.Country.isin(Screwed)]\nmortality = mortality.groupby(['Date', 'Country']).agg({'Deaths': ['sum'],'Recovered': ['sum'],'Confirmed': ['sum']})\nmortality.columns = ['Deaths','Recovered','Confirmed']\nmortality = mortality.reset_index()\nmortality = mortality[mortality.Deaths != 0]\nmortality = mortality[mortality.Confirmed != 0]\n\nmortality['Mortality_Rate'] = mortality.apply(lambda row: ((row.Deaths+1)\/(row.Confirmed+1))*100, axis=1)\n\n#We filter out where mortality rate is above 10% \nd = mortality[mortality.Mortality_Rate < 10]\n\n#We wannt only to plot countries with more than 100 confirmed cases, as the situation evovles, more countries will enter this list.\ndd = d[d.Confirmed > 100]\n\nfig = px.line(dd, x=\"Date\", y=\"Mortality_Rate\", color=\"Country\",\n              line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()\n\n##add average\n\n\n","74c58406":"floorVar=0.8\nworldPop=25000\n\n#Modelling total confirmed cases \nconfirmed_training_dataset = pd.DataFrame(data.groupby('Date')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'ds', 'Confirmed': 'y'})\n#confirmed_training_dataset.insert(0,'floor',1)\nconfirmed_training_dataset['floor'] = confirmed_training_dataset.y*floorVar\nconfirmed_training_dataset['cap'] = confirmed_training_dataset.y+worldPop\n\n#Modelling mortality rate\nmortality_training_dataset = pd.DataFrame(mortality.groupby('Date')['Mortality_Rate'].mean().reset_index()).rename(columns={'Date': 'ds', 'Mortality_Rate': 'y'})\n\n#Modelling deaths\ndeath_training_dataset = pd.DataFrame(data.groupby('Date')['Deaths'].sum().reset_index()).rename(columns={'Date': 'ds', 'Deaths': 'y'})","5d79cf74":"# Total dataframe model \nm = Prophet(\n    interval_width=0.90,\n    changepoint_prior_scale=0.05,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=True,\n    seasonality_mode='additive'\n    )\n\nm.fit(confirmed_training_dataset)\nfuture = m.make_future_dataframe(periods=61)\nfuture['cap']=confirmed_training_dataset.y+worldPop\nfuture['floor']=confirmed_training_dataset.y*floorVar\nconfirmed_forecast = m.predict(future)\n\n# Mortality rate model\nm_mortality = Prophet ()\nm_mortality.fit(mortality_training_dataset)\nmortality_future = m_mortality.make_future_dataframe(periods=31)\nmortality_forecast = m_mortality.predict(mortality_future)\n\n# Deaths model\nm2 = Prophet(interval_width=0.95)\nm2.fit(death_training_dataset)\nfuture2 = m2.make_future_dataframe(periods=7)\ndeath_forecast = m2.predict(future2)","96b8d8f1":"fig = plot_plotly(m, confirmed_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for Total Confirmed cases',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","0e8622c0":"fig = plot_plotly(m_mortality, mortality_forecast)\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for mortality rate',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations=annotations)\nfig","b0cd1498":"fig_death = plot_plotly(m2, death_forecast)  \nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Predictions for Deaths',\n                              font=dict(family='Arial',\n                                        size=30,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\nfig_death.update_layout(annotations=annotations)\nfig_death","9ab97f6d":"Copying the dataframe into a new dataframe and deleting the columns for China, to get an image of what the status is for the coronavirus in the rest of the world. There has been a lot of talk about Chinese sources being unreliable. Thus modelling how the virus will progress based on Chinese data only can give a skewed result, and if the hypothesis is to be believed that the chinese government is lying about their numbers and artificially deflating them, then a predictive model will give a too low result and perhaps enact a false sense of security. Not providing an urgent response to an epidemic can be the thing that results in the epidemic progressing into a pandemic. ","e3ee4539":"Calculating the percentage change in the growth rates. To see if the growth in total cases is accelerrating or decellerating. ","3b422d78":"## Machine learning with facebook prophet","a6611a43":"Note that in the dataset, a place may have reported data more than once per day. For more effective analysis, we convert the data into daily. If the data for the latest day is not available, we will fill it with previous available data.","dc00dd14":"## Predictions for confirmed. ","ab353ee1":"## Plotly visualizations","99f19ba4":"Evolution in mortality rates over time by Country","ea6e0f2c":"Worldpop is the variable that holds the cap rate nessecary for fb prophet algoritm to work. Prophet requires columns to be labelled ds and y. For the logaritmic model a cap rate and a floor is nessecary. These are inserted into the pandas dataframe. We are using a constant cap rate. Right now its set at 500k.","ef790a12":"## Confirmed Visualisations","c7aea58c":"# Analysis of Coronavirus Data\n\n","f943aa78":"Checking the latest 10 cases to see when the dataset was last updated. "}}