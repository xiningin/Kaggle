{"cell_type":{"eac10e10":"code","4db1ac1f":"code","2b2efd47":"code","32745391":"code","d506da56":"code","75e97d35":"code","e9d88b0a":"code","23881a8e":"code","71545059":"code","fef1c798":"code","6fe65f61":"code","9092b5e6":"code","428ebd16":"code","dff904a9":"code","9a81cd85":"code","b9592d86":"code","133be934":"code","0a98de6f":"code","3ba6a5d7":"code","c8ae1a8d":"code","f0578927":"code","2ec86e0b":"code","cd5b4004":"code","8fa1caae":"code","3deb4771":"code","41a5c670":"code","bbb47832":"code","5c4425f0":"code","b038a80f":"code","2089f72d":"code","6323dcf4":"code","bc84981d":"code","43126ead":"code","6687cfcd":"code","1ef31f81":"code","7b309562":"code","e866d4bf":"code","4b8fd2b4":"code","a42363a9":"code","841cb19a":"code","1faf274a":"code","68e15b37":"code","174d23f4":"code","63421758":"code","153743ef":"code","56116918":"code","c06dcf6c":"code","d42173d3":"code","3554e13e":"code","7343382a":"code","505b1f09":"code","bdbcd3a4":"code","c7ed52d6":"code","2b3c21db":"code","09524eee":"code","6477d2a6":"code","3801971f":"code","69cab0f3":"code","1ee73faa":"code","1a83994d":"code","c0df4761":"code","6d0076d9":"code","85eae6c4":"code","5f64a423":"code","a5b6e52e":"code","bf74cad5":"code","615121a1":"code","dc7cd7c6":"code","8159efd8":"code","6e1a9c96":"code","a0e884bd":"code","7f9ca37e":"code","d93c4993":"code","41fa653a":"code","c7c3758b":"code","8908a797":"code","9bed41bd":"code","335c2f34":"code","099f8fdc":"code","26510716":"code","d619dae4":"code","5f1f9222":"code","098251a1":"code","c213391e":"code","08e69b9a":"code","d1ae1740":"code","765e3617":"code","afc72dcf":"code","736f5b3f":"code","ab03f7d5":"code","6ba80905":"code","d0e95be5":"code","f067bf03":"code","02cb89ab":"code","4bb7b9dc":"code","3847e5ba":"code","84343b1a":"code","17dfddf7":"code","6840bd6a":"code","aebdf134":"code","f22228fd":"code","61a27230":"code","d1107a78":"code","7a19f2d4":"code","6b9b9f35":"code","a0bfc2e8":"code","46451473":"code","21f98861":"code","c01e8a58":"code","1bfcc9a3":"code","0d64fa82":"code","688f3c69":"code","868134ee":"code","cc5a3213":"code","5fca5e0d":"code","7d158b2a":"code","cc7fc8de":"code","155ff44d":"code","f10ee2b5":"code","fe7c936a":"code","be2e4960":"code","d57f7c80":"code","8a653f3e":"code","c13423a5":"code","72bd2ae7":"code","39153481":"code","37b3f4ef":"code","1f40b7c0":"code","36af2d1b":"code","6023ba37":"code","fe274b34":"code","25b6025b":"code","f0f7022b":"code","b72e5f26":"code","24710193":"code","879bde20":"code","2103754a":"code","5a7f06ab":"code","8277f0c4":"code","7401da3c":"code","0bceea8d":"code","9b4d551b":"code","868f57db":"code","a9f276f2":"code","0b42cf55":"code","9aef695b":"code","8f93cb40":"code","7c86cbaa":"code","d16bf70f":"code","73636661":"code","315f4c45":"code","57b6eb02":"code","58b79468":"code","812d28e0":"code","f676d3e1":"code","98e483ca":"code","dee26a23":"code","6b03b67f":"code","cb4d4681":"code","1c16520c":"code","a8532187":"code","764cee42":"code","a0572822":"code","65995084":"code","9353620e":"markdown","2a5c71b1":"markdown","9770e868":"markdown","726fae3f":"markdown","df0706ab":"markdown","7019082c":"markdown","d1aa6074":"markdown","e6229866":"markdown","9585fc6b":"markdown","4cac82f1":"markdown","85fbcf51":"markdown","3e9515e0":"markdown","148f9f3d":"markdown","4ce1a68d":"markdown","4877213b":"markdown","f147300c":"markdown","c25df8ef":"markdown","97f2a4aa":"markdown","a94663ea":"markdown","0ed22f09":"markdown","75df61e1":"markdown","a96b8866":"markdown","8f1abb41":"markdown","be3dc660":"markdown","f916f48f":"markdown","fc78742d":"markdown","5e25d183":"markdown","660dde20":"markdown","2eea0967":"markdown","e44b3c91":"markdown","6afae74f":"markdown","6e0b82ff":"markdown","645b51b8":"markdown","f62f92b6":"markdown","1a6373c9":"markdown","69c91fb6":"markdown","46a66774":"markdown","cd267147":"markdown","52150b37":"markdown","5c7343c4":"markdown","fc3488be":"markdown","298b43d1":"markdown","1a902f0f":"markdown"},"source":{"eac10e10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nimport datetime\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4db1ac1f":"car_train=pd.read_csv('\/kaggle\/input\/used-cars-price-prediction\/train-data.csv')\ncar_test=pd.read_csv('\/kaggle\/input\/used-cars-price-prediction\/test-data.csv')","2b2efd47":"car_train.head()","32745391":"car_train.info()","d506da56":"car_test.info()","75e97d35":"car_test.Mileage.min()","e9d88b0a":"car_test.Fuel_Type.value_counts()","23881a8e":"#since the new price column is missing in both train and test set lets remove that column\ncar_train=car_train.drop('New_Price',axis=1)\ncar_test=car_test.drop('New_Price',axis=1)\n","71545059":"car_train.columns","fef1c798":"print(\"There is {} duplicated values in data frame\".format(car_train.duplicated().sum()))\n","6fe65f61":"features_nan=[features for features in car_train.columns if car_train[features].isnull().sum()>=1]","9092b5e6":"for feature in features_nan:\n    print(feature,car_train[feature].isnull().sum())","428ebd16":"car_train=car_train.dropna()","dff904a9":"car_train.shape","9a81cd85":"car_train.nunique()","b9592d86":"import seaborn as sns\nsns.countplot(y='Location',data=car_train)\nprint(car_train.Location.value_counts(normalize=True)*100)","133be934":"car_train.Year.value_counts()","0a98de6f":"sns.countplot(x='Fuel_Type',data=car_train)\nprint(car_train.Fuel_Type.value_counts())","3ba6a5d7":"sns.countplot(x='Transmission',data=car_train)\nprint(car_train.Transmission.value_counts(normalize=True)*100)","c8ae1a8d":"sns.countplot(x='Owner_Type',data=car_train)\nprint(car_train.Owner_Type.value_counts(normalize=True)*100)","f0578927":"sns.countplot(x='Seats',data=car_train)\nprint(car_train.Seats.value_counts())","2ec86e0b":"sns.countplot(y=\"Engine\", data=car_train, palette=\"Greens_d\",\n              order=car_train.Engine.value_counts().iloc[:10].index)","cd5b4004":"car_train.dtypes","8fa1caae":"car_train.describe()","3deb4771":"#df['Cust #'].str.replace(r'\\D+', '').astype(int)\ncar_train.columns","41a5c670":"car_train.Power.values","bbb47832":"car_train.Engine.values","5c4425f0":"print(car_train.Mileage.dtypes)\ncar_train.Mileage.values","b038a80f":"#df['float'] = df['strCondition'].str.extract(r'(\\d+.\\d+)').astype('float')","2089f72d":"car_train['power_n']=car_train.Power.str.extract(r'(\\d+.\\d+)').astype('float')","6323dcf4":"car_train['milage_n']=car_train.Mileage.str.extract(r'(\\d+.\\d+)').astype('float')","bc84981d":"car_train['Engine_n']=car_train.Engine.str.extract(r'(\\d+.\\d+)').astype('int')","43126ead":"car_train['seat_n']=car_train.Seats.astype('int')\n","6687cfcd":"car_train['power_n'].values","1ef31f81":"car_train['Engine_n'].values","7b309562":"car_train['milage_n'].values","e866d4bf":"car_train['seat_n'].values","4b8fd2b4":"features_c=['Price','Kilometers_Driven']","a42363a9":"#price\nplt.subplot(121)\nsns.distplot(car_train['Price'],color=\"r\");\n\nplt.subplot(122)\ncar_train['Price'].plot.box(figsize=(16,5))\n\nplt.show()\n#the price features have some outliers and its right skewed","841cb19a":"#price\nplt.subplot(121)\nsns.distplot(car_train['Kilometers_Driven'],color=\"y\");\n\nplt.subplot(122)\ncar_train['Kilometers_Driven'].plot.box(figsize=(16,5))\n\nplt.show()\n#the Kilometers_Driven features have big outliers and its right skewed","1faf274a":"#milage\nplt.subplot(121)\nsns.distplot(car_train['milage_n'],color=\"b\");\n\nplt.subplot(122)\ncar_train['milage_n'].plot.box(figsize=(16,5))\n\nplt.show()","68e15b37":"#engine cc\nplt.subplot(121)\nsns.distplot(car_train['Engine_n'],color=\"g\");\n\nplt.subplot(122)\ncar_train['Engine_n'].plot.box(figsize=(16,5))\n\nplt.show()\n","174d23f4":"#power\nplt.subplot(121)\nsns.distplot(car_train['power_n'],color=\"m\");\n\nplt.subplot(122)\ncar_train['power_n'].plot.box(figsize=(16,5))\n\nplt.show()\n","63421758":"#location vs price\n\nsns.barplot(y=\"Location\", x=\"Price\", data=car_train)\n\n#here we are seeing the median price at each location","153743ef":"fig_dims = (20, 30)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.boxplot(x=\"Price\", y=\"Location\", data=car_train )","56116918":"car_train.columns","c06dcf6c":"print(car_train.Year.dtype)\ncar_train.Year.values","d42173d3":"#df['new_date'] = pd.to_datetime(df['old_date'].astype('str'), format = '%y%m%d')","3554e13e":"car_train.Year=pd.to_datetime(car_train.Year.astype('str'), format = '%Y-%m-%d')","7343382a":"car_train.Year.values","505b1f09":"car_train.info()","bdbcd3a4":"b= pd.pivot_table(car_train, values = 'Power', index = 'Year', aggfunc = 'count')\nb.head(5)\n#these is the count of cars","c7ed52d6":"from matplotlib.dates import DateFormatter\ntimeline = b.index\ngraph = b['Power']\n\nfig, ax = plt.subplots(figsize = (10, 5))\nax.plot(timeline, graph)\n\ndate_form = DateFormatter(\"%Y\")\nax.xaxis.set_major_formatter(date_form)\nplt.title('car count from 1998 to 2020')\nplt.xlabel('Time')\nplt.ylabel('car count vs year')\n\nplt.show()","2b3c21db":"a = pd.pivot_table(car_train, values = 'Price', index = 'Year', aggfunc = 'median')\na.head(5)","09524eee":"from matplotlib.dates import DateFormatter\ntimeline = a.index\ngraph = a['Price']\n\nfig, ax = plt.subplots(figsize = (10, 5))\nax.plot(timeline, graph)\n\ndate_form = DateFormatter(\"%Y\")\nax.xaxis.set_major_formatter(date_form)\nplt.title('car price from 1998 to 2020')\nplt.xlabel('Time')\nplt.ylabel('price vs year')\n\nplt.show()","6477d2a6":"# fuel type vs price\nsns.barplot(y=\"Fuel_Type\", x=\"Price\", data=car_train)\n","3801971f":"print(car_train.dtypes)","69cab0f3":"#Transmission vs Price\nsns.barplot(y=\"Transmission\", x=\"Price\", data=car_train)\n","1ee73faa":"#Owner_Type vs price\nsns.barplot(y=\"Owner_Type\", x=\"Price\", data=car_train)","1a83994d":"len(car_train)","c0df4761":"print(car_train.Seats.value_counts())\nsns.barplot(x='Seats',y='Price',data=car_train)","6d0076d9":"plt.figure(figsize=(10,6))\ndata=car_train.copy()\nplt.scatter(data['Seats'],data['Price'],alpha=0.3)\nplt.xlabel(feature)\nplt.ylabel('Price')\nplt.show()","85eae6c4":"print(car_train.Name.nunique())\ncar_train.Name.values","5f64a423":"part =car_train['Name'].str.partition()\ncar_train['company'] = part[0]\ncar_train.head()","a5b6e52e":"car_train.columns","bf74cad5":"car_train=car_train.drop('Unnamed: 0',axis=1)\n","615121a1":"print(car_train.company.dtypes)\ncar_train.company.nunique()\n","dc7cd7c6":"from wordcloud import WordCloud, STOPWORDS\n\ntext = car_train['company'].unique() \nwordcloud = WordCloud(\n    width = 500,\n    height = 500,\n    background_color = 'black',\n    stopwords = STOPWORDS).generate(str(text))\nfig = plt.figure(\n    figsize = (10, 8),\n    facecolor = 'k',\n    edgecolor = 'k')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()\n","8159efd8":"fig_dims = (20, 25)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(y=\"company\", x=\"Price\", data=car_train)","6e1a9c96":"part =car_train['Name'].str.partition()\ncar_train['car_name'] = part[2]\ncar_train.head()","a0e884bd":"car_train.car_name.nunique()","7f9ca37e":"car_train.columns","d93c4993":"#milage vs price\ncar_train.loc[car_train.Mileage=='0.0 kmpl']","41fa653a":"car_train.columns","c7c3758b":"features_ch=['Kilometers_Driven','Price','power_n','milage_n','Engine_n']","8908a797":"for feature in features_ch:\n        plt.figure(figsize=(10,6))\n    \n        data=car_train.copy()\n        plt.scatter(data[feature],data['Price'],alpha=0.3)\n        plt.xlabel(feature)\n        plt.ylabel('Price')\n        plt.show()","9bed41bd":"car_train.shape","335c2f34":"features_ch=['Kilometers_Driven','Price','power_n','milage_n','Engine_n']","099f8fdc":"for i in features_ch:\n    fig, ax = plt.subplots()\n    fig.set_size_inches(12,6)\n    #plt.xlim(-10,10)\n    sns.boxplot(x=i,data=car_train,ax=ax)","26510716":"for feature in features_ch:\n    print(feature)\n    print('max threshold :',car_train[feature].quantile(0.999))\n    print('min threshold :',car_train[feature].quantile(0.001))","d619dae4":"from sklearn.base import BaseEstimator,TransformerMixin,RegressorMixin","5f1f9222":"class RemoveOutliers(BaseEstimator,TransformerMixin):\n    \"\"\"This class removes outliers from data.\n    Note: Outlier values are hard coded\n    \"\"\"\n\n    def fit (self,X,y=None):\n        return self\n    \n    \n    def transform(self,X,y=None):\n        X=X[X['Kilometers_Driven']< 262000] \n            \n        X=X[X['Price']<=100]\n        \n        X=X[X['power_n']<= 530]\n        \n        X=X[X['Engine_n']<= 5900 ]\n        \n        return X\n","098251a1":"data1=RemoveOutliers().fit_transform(car_train)","c213391e":"for feature in features_ch:\n    print(feature)\n    print('max threshold :',data1[feature].max())\n    print('min threshold :',data1[feature].min())","08e69b9a":"car_train.shape","d1ae1740":"data1.shape","765e3617":"for i in features_ch:\n    fig, ax = plt.subplots()\n    fig.set_size_inches(12,6)\n    #plt.xlim(-10,10)\n    sns.boxplot(x=i,data=data1,ax=ax)","afc72dcf":"data1[features_ch].hist(bins=50,figsize=(15,10))","736f5b3f":"skewness=[]\nfor i in features_ch:\n    skewness.append(data1[i].skew())\npd.DataFrame(data=skewness,index=features_ch,columns=['skewness']).sort_values(by='skewness',ascending=False)","ab03f7d5":"data_labels=data1['Price']\ndata2=data1.drop('Price',axis=1)","6ba80905":"data1['Kilometers_Driven'].values","d0e95be5":"#X['bedrooms_per_room']=X['bedrooms_per_room'].apply(lambda x: np.log1p(x)**0.25)","f067bf03":"#X['total_rooms']=X['total_rooms'].apply(lambda x: boxcox1p(x,0.25))\nfrom scipy.special import boxcox1p","02cb89ab":"data1['Kilometers_Driven'].apply(lambda x: boxcox1p(x,0.33) ).hist(bins=50,label='a')\nplt.legend()","4bb7b9dc":"data1['power_n'].apply(lambda x: np.log(x) ).hist(bins=50,label='a')\nplt.legend()","3847e5ba":"data1['Engine_n'].apply(lambda x: np.log(x) ).hist(bins=50,label='a')\nplt.legend()","84343b1a":"data1['milage_n'].apply(lambda x: np.log1p(x)**4).hist(bins=50,label='a')\nplt.legend()","17dfddf7":"class FeaturesTransformer(BaseEstimator,TransformerMixin):\n    \"\"\"This class trnsforms numberical featuress in the dataset.\n    Note: Transformations are hard coded.\n    \"\"\"\n    def fit(self,X,y=None):\n        return self\n    def transform(self,X,y=None):\n        import numpy as np\n        from scipy.special import boxcox1p        \n        X['Kilometers_Driven']=X['Kilometers_Driven'].apply(lambda x: boxcox1p(x,0.33))\n        \n        X['power_n']=X['power_n'].apply(lambda x:np.log(x) )\n        \n        X['Engine_n']=X['Engine_n'].apply(lambda x: np.log(x))\n        \n        X['milage_n']=X['milage_n'].apply(lambda x: np.log1p(x)**4)\n        \n        return X","6840bd6a":"data2=FeaturesTransformer().fit_transform(data1)","aebdf134":"features_ch\nfeatures_c=['Kilometers_Driven', 'power_n', 'milage_n', 'Engine_n']","f22228fd":"data2[features_c].hist(bins=50,figsize=(15,12))","61a27230":"data3=data2.drop(['Name','Mileage','Engine','Power','Seats','car_name'],axis=1)","d1107a78":"data2.info()","7a19f2d4":"data3['Year']=data3.Year.dt.year","6b9b9f35":"data3.info()","a0bfc2e8":"data3.company.nunique()","46451473":"fig_dims = (15, 8)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.boxplot(y=\"Price\", x=\"Owner_Type\", data=car_train )","21f98861":"data3.Owner_Type.value_counts()","c01e8a58":"#Train_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","1bfcc9a3":"data3.replace({'First':1,'Second':2,'Third':3,'Fourth & Above':4},inplace = True)","0d64fa82":"data3.info()","688f3c69":"#as Transmission  is an nominal varible lets perform onehotencoding\nTransmission = data3[[\"Transmission\"]]\n\nTransmission = pd.get_dummies(Transmission,drop_first=True)\n\nTransmission.head()","868134ee":"# Location\nlocation = data3[[\"Location\"]]\n\nlocation = pd.get_dummies(location,drop_first=True)\n\nlocation.head()","cc5a3213":"data3.company.nunique()","5fca5e0d":"#company\n\ncompany = data3[[\"company\"]]\n\ncompany = pd.get_dummies(company,drop_first=True)\n\ncompany.head()","7d158b2a":"#fuel_type\n\nFuel_Type = data3[[\"Fuel_Type\"]]\n\nFuel_Type = pd.get_dummies(Fuel_Type,drop_first=True)\n\nFuel_Type.head()\n","cc7fc8de":"#Concatenate dataframe >data3+ company + Location +  Transmission + Fuel_Type\n\ndata_train = pd.concat([data3,company ,location ,Transmission,Fuel_Type ], axis = 1)","155ff44d":"data_train.head(3)","f10ee2b5":"#data_train.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","fe7c936a":"data3.columns","be2e4960":"data_train.drop(['Location','Fuel_Type','Transmission','company'],axis=1 , inplace = True)","d57f7c80":"data_train.shape","8a653f3e":"features_c","c13423a5":"scaled_features = data_train.copy()","72bd2ae7":"from sklearn.preprocessing import StandardScaler","39153481":"col_names = ['Kilometers_Driven','power_n','milage_n','Engine_n']\nfeatures = scaled_features[col_names]\nscaler = StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)","37b3f4ef":"scaled_features[col_names] = features\n#print(scaled_features)\n","1f40b7c0":"scaled_features.head(2)","36af2d1b":"scaled_features[features_c].hist(bins=50,figsize=(15,12))","6023ba37":"car_test=pd.read_csv('\/kaggle\/input\/used-cars-price-prediction\/test-data.csv')\ncar_test=car_test.drop('New_Price',axis=1)\n#there is null values in the power column as null bhp\n#car_test.replace({'null bhp':'missing'}, inplace =True)\ncar_test=car_test.dropna()","fe274b34":"#pd.set_option('display.max_rows',10)","25b6025b":"#car_test.loc[car_test['Power'] == 'null bhp', :]","f0f7022b":"car_test.drop(car_test.index[car_test['Power'] == 'null bhp'], inplace = True)","b72e5f26":"car_test['power_n']=car_test.Power.str.extract(r'(\\d+)').astype('float')\n\n\n    \ncar_test['milage_n']=car_test.Mileage.str.extract(r'(\\d+.\\d+)').astype('float')\n    \ncar_test['Engine_n']=car_test.Engine.str.extract(r'(\\d+.\\d+)').astype('int')\n\ncar_test['seat_n']=car_test.Seats.astype('int')","24710193":"car_test.info()","879bde20":"car_test.drop(['Mileage','Engine','Power','Seats','Unnamed: 0'],axis=1 , inplace = True)","2103754a":"car_test.info()","5a7f06ab":"part =car_test['Name'].str.partition()\ncar_test['company'] = part[0]\ncar_test.head()","8277f0c4":"car_test.replace({'First':1,'Second':2,'Third':3,'Fourth & Above':4},inplace = True)","7401da3c":"car_test.info()","0bceea8d":"#as Transmission  is an nominal varible lets perform onehotencoding\nTransmission = car_test[[\"Transmission\"]]\n\nTransmission = pd.get_dummies(Transmission,drop_first=True)\n\n\n# Location\nlocation = car_test[[\"Location\"]]\n\nlocation = pd.get_dummies(location,drop_first=True)\n\n\n\n#company\n\ncompany = car_test[[\"company\"]]\n\ncompany = pd.get_dummies(company,drop_first=True)\n\n\n#fuel_type\n\nFuel_Type = car_test[[\"Fuel_Type\"]]\n\nFuel_Type = pd.get_dummies(Fuel_Type,drop_first=True)\n\n\n\n\n\n","9b4d551b":"data_test = pd.concat([car_test,company ,location ,Transmission,Fuel_Type ], axis = 1)","868f57db":"data_test .drop(['Transmission','Location','company','Fuel_Type','Name'],axis=1 , inplace = True)","a9f276f2":"data_test .shape","0b42cf55":"scaled_features.shape","9aef695b":"y=scaled_features['Price']\nX=scaled_features.drop('Price',axis=1)","8f93cb40":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 25)","7c86cbaa":"from sklearn.linear_model import LinearRegression\nlinear_reg = LinearRegression()\nlinear_reg.fit(X_train, y_train)\ny_pred= linear_reg.predict(X_test)\nprint(\"Accuracy on Traing set: \",linear_reg.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",linear_reg.score(X_test,y_test))","d16bf70f":"from sklearn.ensemble import ExtraTreesRegressor\nselection = ExtraTreesRegressor()\nselection.fit(X, y)","73636661":"#plot graph of feature importances for better visualization\n\nplt.figure(figsize = (12,8))\nfeat_importances = pd.Series(selection.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')\nplt.show()","315f4c45":"from sklearn.ensemble import RandomForestRegressor\nreg_rf = RandomForestRegressor()\nreg_rf.fit(X_train, y_train)\ny_pred= reg_rf.predict(X_test)\nprint(\"Accuracy on Traing set: \",reg_rf.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",reg_rf.score(X_test,y_test))","57b6eb02":"y_pred = reg_rf.predict(X_test)","58b79468":"from sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nprint(\"\\t\\tError Table\")\nprint('Mean Absolute Error      : ', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared  Error      : ', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared  Error : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('R Squared Error          : ', metrics.r2_score(y_test, y_pred))","812d28e0":"sns.distplot(y_test-y_pred)\nplt.show()","f676d3e1":"from sklearn.model_selection import RandomizedSearchCV","98e483ca":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","dee26a23":"# Create the random grid\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","6b03b67f":"# Random search of parameters, using 5 fold cross validation, \n# search across 100 different combinations\nrf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","cb4d4681":"rf_random.fit(X,y)","1c16520c":"rf_random.best_params_","a8532187":"reg_rf1 = RandomForestRegressor(n_estimators=1000,min_samples_split=2,min_samples_leaf=1,max_features='sqrt',max_depth=25)","764cee42":"reg_rf1.fit(X_train, y_train)","a0572822":"prediction1=reg_rf1.predict(X_test)","65995084":"print('MAE:', metrics.mean_absolute_error(y_test, prediction1))\nprint('MSE:', metrics.mean_squared_error(y_test, prediction1))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction1)))\nprint('R Squared Error          : ', metrics.r2_score(y_test, prediction1))\n\nprint(\"Accuracy on Traing set: \",reg_rf1.score(X_train,y_train))","9353620e":"# Getting dummy variables","2a5c71b1":"I try to remove only some outliers but we lost many rows from our original dataset","9770e868":"since we have small amount of dataset I probably try to remove very few","726fae3f":"#  Feature Scaling","df0706ab":"lets change the datatype of year to int","7019082c":"this is not making no sense some times this will be because of hiegh demand for cars with 2 seats","d1aa6074":"# lets add new column called company by extractin the company name from Name column","e6229866":"as we all know the company has good influence in price ","9585fc6b":"no idea what to do with this Name ,we can add two new column from this Name column","4cac82f1":"# Transforming skewed features","85fbcf51":"# Year vs price","3e9515e0":"we are getting good accuracy without any hyperparameter tuning","148f9f3d":"lets change the datatype of year for good visvalisation","4ce1a68d":"# word cloud for company names","4877213b":"**for visvalisation we can add new column to the dataset based of Milage column, we can convert object datatype to numberic**","f147300c":"**Transformed features**","c25df8ef":"# lets add new column car_name from the Name column","97f2a4aa":"lets plot an scatter plot","a94663ea":"the fueltype and price and related ,beacause there 2 electric cars in the dataset but they has high price value","0ed22f09":"# Test data","75df61e1":"****lets look the year and price ****","a96b8866":"so we can see a high car price as year goes . ","8f1abb41":"if we can join the test and train dataset and deal with the missing data we can also increase the accuracy again","be3dc660":"# Bivarative analysis","f916f48f":"# EDA","fc78742d":"check for duplicate values","5e25d183":"Droping unwanted columns ","660dde20":"**ok perfect**","2eea0967":"# Random forest","e44b3c91":"transformation of skewed features","6afae74f":"data is caped in some of these features","6e0b82ff":"lets drop these from the test data","645b51b8":"# outliers","f62f92b6":"# Model","1a6373c9":"# continous features","69c91fb6":"we can see some 0 in the milage feature","46a66774":"probably i am not droping these values because there are zero milage 2nd hand cars,I think milage less than 1","cd267147":"# discrete features","52150b37":"# Linear regression","5c7343c4":"# ordinal categorical data","fc3488be":"**transmission is also  ordinal I guess so **","298b43d1":"# Hyperparameter","1a902f0f":"# continous features vs price"}}