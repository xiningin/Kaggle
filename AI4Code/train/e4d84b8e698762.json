{"cell_type":{"5a36b139":"code","c16db7ab":"code","aa02de30":"code","85d153ec":"code","09d6f5f8":"code","7aecca60":"code","7a9aa8a3":"code","5182b9a8":"code","7d110f03":"code","cea36404":"code","28d1436d":"code","b3bdda1f":"code","582ca3df":"code","8d75ff31":"code","bd3c8320":"code","4c27e28e":"code","d579cd95":"code","130da5f3":"code","09b475e8":"code","1b6a18a5":"code","82fcac5c":"code","c4adc0c7":"code","9a5598e6":"markdown","06b72970":"markdown","101c0f94":"markdown","ea7f7b93":"markdown","41bc6915":"markdown","bd17982e":"markdown","574968be":"markdown"},"source":{"5a36b139":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c16db7ab":"import math\nimport random\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew \n\n\nimport pickle\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import explained_variance_score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, \\\n                                 RidgeCV, Lasso, LassoCV, \\\n                                 ElasticNet, ElasticNetCV","aa02de30":"train_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_data = pd.get_dummies(train_data)\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\nprint(train_data)","85d153ec":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ntrain = train_data.select_dtypes(include=numerics)","09d6f5f8":"d_train = train.fillna((np.mean(train)))","7aecca60":"target = d_train['SalePrice']","7a9aa8a3":"mean = np.mean(train)\ntrain -= mean\nstd = np.mean(train)\ntrain \/= std\n\ntest_data -= mean\ntest_data \/= std","5182b9a8":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(target, d_train, test_size = 0.1, random_state = 0)","7d110f03":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    # Because we will need to instantiate\n    # the same model multiple times,\n    # we use a function to construct it.\n    model=models.Sequential()\n    model.add(layers.Flatten())\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(128, activation='relu'))# Add the proper output and activation\n    model.add(layers.Dense(1, activation='relu'))# Add the proper output and activation\n    #model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n    return model","cea36404":"from sklearn.linear_model import LinearRegression\nLN = LinearRegression() \nLN.fit(d_train, target)","28d1436d":"LN.intercept_","b3bdda1f":"y_pred = LN.predict(d_train)","582ca3df":"plt.scatter(target, y_pred)\nplt.xlabel(\"SalePrices\")\nplt.ylabel(\"Predicted Saleprices\")\nplt.title(\"SalePrices vs Predicted Saleprices\")\nplt.show()","8d75ff31":"from sklearn.linear_model import SGDRegressor\n\nSH = SGDRegressor()\nSH.fit(d_train, target)","bd3c8320":"SH.intercept_","4c27e28e":"y_predect = SH.predict(d_train)","d579cd95":"plt.scatter(target, y_predect)\nplt.xlabel(\"SalePrices\")\nplt.ylabel(\"Predicted Saleprices\")\nplt.title(\"SalePrices vs Predicted Saleprices\")\nplt.show()","130da5f3":"model = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model.fit(d_train,target,\n                    epochs=20, batch_size=2, verbose=0)","09b475e8":"from sklearn.linear_model import Ridge\nrr = Ridge(alpha=0.01)\nrr.fit(d_train, target) \npred_train_rr= rr.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_rr)))\nprint(r2_score(target, pred_train_rr))\npred_test_rr= rr.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_rr))) \nprint(r2_score(target, pred_test_rr))","1b6a18a5":"from sklearn.linear_model import Lasso\nmodel_lasso = Lasso(alpha=0.01)\nmodel_lasso.fit(d_train, target) \npred_train_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_lasso)))\nprint(r2_score(target, pred_train_lasso))\n\npred_test_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_lasso))) \nprint(r2_score(target, pred_test_lasso))","82fcac5c":"from sklearn.linear_model import ElasticNet\nmodel_enet = ElasticNet(alpha = 0.01)\nmodel_enet.fit(d_train, target) \npred_train_enet= model_enet.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_enet)))\nprint(r2_score(target, pred_train_enet))\n\npred_test_enet= model_enet.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_enet)))\nprint(r2_score(target, pred_test_enet))","c4adc0c7":"# Import SVM Regressor\nfrom sklearn import svm\nreg = svm.SVR()","9a5598e6":"#ElasticNet Regression","06b72970":"#linear regression","101c0f94":"#SGDRegressor","ea7f7b93":"#Lasso Regression","41bc6915":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","bd17982e":"#Ridge Regression","574968be":"#SVM Regressor"}}