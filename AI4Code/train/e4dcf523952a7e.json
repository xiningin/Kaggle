{"cell_type":{"71ec00f1":"code","fbae4347":"code","441c1ce9":"code","453d8d88":"code","71f06a37":"code","b39aa662":"code","252e53c5":"code","a1bde414":"code","1f0f6ab0":"code","e1467c9d":"code","912384d1":"code","53b61e25":"code","5736d233":"code","99ba3f93":"code","22f6cfc5":"code","6a500c22":"code","305b7da7":"code","68498335":"code","28bb7367":"code","9493c7f5":"code","763815ae":"code","9f2837a6":"code","2e494999":"code","ba1d5852":"code","e55d09dc":"code","d282e663":"code","1d7d505f":"code","f50ccdcd":"code","f96d26d1":"code","41f66a7c":"code","cf25ab48":"code","6f839de4":"code","07035bcd":"code","9c378cae":"code","aadee1f6":"code","1ab79b7b":"code","e81d4676":"code","7a77f00d":"code","8faedf82":"code","2bb62574":"code","601191ae":"code","c09d497a":"code","bce3119f":"code","8a3503a8":"code","daf226dd":"code","76e17d65":"code","c8f4a1c3":"code","49c59bbe":"code","bb2875b2":"code","718f5b43":"code","7bbbfcc4":"code","325f0586":"code","470af824":"code","4c658ed2":"code","a41c1b62":"code","d0e4d2b7":"code","bc25305f":"code","579fcd47":"code","fe5fd016":"code","54105db1":"code","3e2e9682":"code","89402475":"code","ddc8b878":"code","409aa99d":"code","066e5ae7":"code","133ca0fa":"code","19ecd757":"code","0c4f3af8":"code","acfe50a8":"code","7c491e9e":"code","110f102e":"code","1145c314":"code","3e90d04a":"code","de1e02a6":"code","14cbf478":"code","85153eb4":"code","5756a319":"code","5f5c5fe1":"code","224c943c":"code","030eaa85":"code","b04c201b":"code","444e446e":"code","54df85f9":"code","8425f058":"code","bc61d916":"code","337fb3ba":"code","b95d9aa0":"code","4b210cbf":"code","aab5c4d7":"code","1737307f":"code","5f6cd005":"code","a25bf10f":"code","3ccf363c":"code","bd8fe941":"code","0c940a03":"markdown"},"source":{"71ec00f1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport statsmodels.api as sm\n\n\n\nimport matplotlib.dates as dates\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping","fbae4347":"df = pd.read_csv(\"\/kaggle\/input\/google-data-historic-dataset\/GOOGL.csv\")\n","441c1ce9":"df.head()","453d8d88":"df.info()","71f06a37":"df.index = pd.to_datetime(df[\"Date\"])","b39aa662":"df.info()","252e53c5":"df.info()","a1bde414":"df.drop('Date', axis=1, inplace=True)\n","1f0f6ab0":"df","e1467c9d":"df.describe()","912384d1":"df['Open'].plot(figsize=(12,8))\nplt.ylabel(\"open price\")","53b61e25":"df['High'].plot(figsize=(12,8))\nplt.ylabel(\"High price\")","5736d233":"df['Volume'].plot(figsize=(12,8))\nplt.ylabel(\"Volume price\")","99ba3f93":"df.isnull().sum()","22f6cfc5":"df['Total Pos'] = df.sum(axis=1)","6a500c22":"df.head()","305b7da7":"df['Total Pos'].plot(figsize=(10,8))\nplt.title('Total Portfolio Value')","68498335":"df.drop('Total Pos',axis=1).plot(kind='line')","28bb7367":"df['Daily Return'] = df['Total Pos'].pct_change(1)","9493c7f5":"cum_ret = 100 * (df['Total Pos'][-1]\/df['Total Pos'][0] -1 )\nprint('Our return {} was percent!'.format(cum_ret))","763815ae":"df['Daily Return'].mean()","9f2837a6":"df['Daily Return'].std()","2e494999":"df['Daily Return'].plot(kind='kde')","ba1d5852":"SR = df['Daily Return'].mean()\/df['Daily Return'].std()","e55d09dc":"SR","d282e663":"ASR = (252**0.5)*SR","1d7d505f":"ASR","f50ccdcd":"df['Daily Return'].std()","f96d26d1":"df['Daily Return'].mean()","41f66a7c":"df['Daily Return'].plot(kind='kde')","cf25ab48":"all_plot = df\/df.iloc[0]\nall_plot.plot(figsize=(24,16))","6f839de4":"df.hist(bins=100,figsize=(12,6));\nplt.tight_layout()","07035bcd":"df.resample(rule='A').mean()","9c378cae":"df.resample(rule='AS').min()","aadee1f6":"df.resample(rule='AS').std()","1ab79b7b":"df.resample(rule='M').mean().head()","e81d4676":"df.resample(rule='MS').max().head()","7a77f00d":"    title = 'Yearly Mean Closing Price for zoom'\n    df['Close'].resample('A').mean().plot.bar(title=title,color=['#b41f7d']);","8faedf82":"df.resample(rule='M').max()","2bb62574":"df['Close'].resample('M').max().plot.bar(figsize=(16,6),color='#1f77b4');","601191ae":"ax = df['Close'].plot(figsize=(24,6),title=title)\n","c09d497a":"df.tail()","bce3119f":"df.head()","8a3503a8":"df['6-month-SMA'] = df['Close'].rolling(window=6).mean()\ndf['12-month-SMA'] = df['Close'].rolling(window=12).mean()\ndf['2-month-SMA'] = df['Close'].rolling(window=2).mean()","daf226dd":"df.head(7)","76e17d65":"df[[\"Close\",\"6-month-SMA\",\"12-month-SMA\",\"2-month-SMA\"]].plot(figsize=(18,10));","c8f4a1c3":"df['EWMA12'] = df['Close'].ewm(span=12,adjust=True).mean()","49c59bbe":"df[['Close','EWMA12']].plot(figsize=(12,6));","bb2875b2":"df[['Close','EWMA12','12-month-SMA']].plot(figsize=(30,15)).autoscale(axis='x',tight=True);","718f5b43":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing","7bbbfcc4":"span = 12\nalpha = 2\/(span+1)","325f0586":"df['EWMA12'] = df['Close'].ewm(alpha=alpha,adjust=False).mean()\n","470af824":"model=SimpleExpSmoothing(df[\"Close\"])","4c658ed2":"model.fit(smoothing_level=alpha,optimized=False)","a41c1b62":"fitted_model=model.fit(smoothing_level=alpha,optimized=False)","d0e4d2b7":"fitted_model.fittedvalues","bc25305f":"fitted_model.fittedvalues.shift(-1)","579fcd47":"df[\"SES12\"]=fitted_model.fittedvalues.shift(-1)","fe5fd016":"df","54105db1":"df.tail()","3e2e9682":"df[['Close',\"SES12\"]].plot(figsize=(30,15)).autoscale(axis='x',tight=True);","89402475":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n\ndf['DESadd12'] = ExponentialSmoothing(df['Close'], trend='add').fit().fittedvalues.shift(-1)\ndf.head()","ddc8b878":"df[['Close',  'SES12', 'DESadd12']].plot(figsize=(24,12))","409aa99d":"df['DESadd12'].head()\n","066e5ae7":"df.tail()","133ca0fa":"df[['Close','EWMA12','DESadd12']].iloc[:12].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","19ecd757":"df['DESmul12'] = ExponentialSmoothing(df['Close'], trend='mul').fit().fittedvalues.shift(-1)\ndf.head()","0c4f3af8":"df[['Close','DESadd12','DESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","acfe50a8":"df['TESadd12'] = ExponentialSmoothing(df['Close'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf.head()","7c491e9e":"df['TESmul12'] = ExponentialSmoothing(df['Close'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf.head()","110f102e":"df[['Close','TESadd12','TESmul12']].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","1145c314":"df[['Close','TESadd12','TESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","3e90d04a":"df = pd.read_csv(\"\/kaggle\/input\/google-data-historic-dataset\/GOOGL.csv\")\n","de1e02a6":"df","14cbf478":"len(df)","85153eb4":"train_df = df.iloc[:3800]\ntest_df = df.iloc[3800:]","5756a319":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Open'],name=\"Zoom Train\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Open'],name=\"Zoom Test\"),secondary_y=False,)","5f5c5fe1":"test_df[0:3]","224c943c":"from sklearn.preprocessing import MinMaxScaler","030eaa85":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(train_df['Open'].values.reshape(-1,1))","b04c201b":"prediction_days = 30\n\nx_train = []\ny_train = []\n\nfor x in range(prediction_days, len(scaled_data)-3):     \n    x_train.append(scaled_data[x-prediction_days:x, 0])\n    y_train.append(scaled_data[x+3, 0])     \n    \nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","444e446e":"model = Sequential()    \nmodel.add(LSTM(units = 30, return_sequences = True, input_shape = (x_train.shape[1],1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 30, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 30))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1))","54df85f9":"model.summary()\nmodel.compile(optimizer='adam', loss='mean_squared_error')  ","8425f058":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=6)\nhis=model.fit(x_train,y_train,epochs=20,batch_size=32,callbacks=[callback])","bc61d916":"plt.plot(his.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['loss'], loc='upper right')\nplt.show()","337fb3ba":"actual_prices = test_df['Open'].values\ntotal_dataset = pd.concat((train_df['Open'], test_df['Open']), axis=0)\n\nmodel_inputs = total_dataset[len(total_dataset)-len(test_df)-prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1,1)\nmodel_inputs = scaler.transform(model_inputs)","b95d9aa0":"x_test = []\nfor x in range(prediction_days,len(model_inputs)):\n    x_test.append(model_inputs[x-prediction_days:x,0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))\n\npredicted_prices = model.predict(x_test)\npredicted_prices = scaler.inverse_transform(predicted_prices)","4b210cbf":"plt.figure(figsize=(15,12))\nplt.plot(actual_prices, color='red', label=f\"Actual price\" )\nplt.plot(predicted_prices, color= 'blue', label=f\"Predicted 5-days-after price\")\nplt.title(f\"google Stock\")\nplt.xlabel(\"Days in test period\")\nplt.ylabel(f\"Price\")\nplt.legend()\nplt.show()","aab5c4d7":"test_df['predict']=predicted_prices\ntest_df[[\"Date\",\"Open\",\"predict\"]]","1737307f":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Open'],name=\"Train Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Open'],name=\"Test Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['predict'],name=\"Predicted 5-days after price\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=900,height=500,title_text=\"Zoom\")\nfig.update_xaxes(title_text=\"year\")\nfig.update_yaxes(title_text=\"prices\",secondary_y=False)\nfig.show()","5f6cd005":"real_data = [model_inputs[len(model_inputs)+1-prediction_days:len(model_inputs+1),0]]\nreal_data = np.array(real_data)\nreal_data = np.reshape(real_data,(real_data.shape[0],real_data.shape[1],1))\nprint(real_data.shape)\n","a25bf10f":"prediction = model.predict(real_data)\nprediction = scaler.inverse_transform(prediction)\nprint(f\"prediction: {prediction[0][0]}\")","3ccf363c":"test_df","bd8fe941":"test_df[['Open','predict']].iloc[:250].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","0c940a03":"# deeplerarning"}}