{"cell_type":{"a02bf382":"code","2409097a":"code","f99b0f8b":"code","cee15fb7":"code","eb201d20":"code","01e04eea":"code","11131658":"code","fd5cf765":"code","d35d97a0":"code","beda145b":"code","ddaf1943":"code","49145378":"code","e0db5c6c":"code","1146b9ed":"code","6453f701":"code","49778c54":"code","7458b7fb":"code","ae6d6087":"code","b9a22d03":"code","1ad68a5c":"code","bd00cb4d":"code","a26a506d":"code","a07c210e":"code","a5cb3d9b":"code","dc776fdf":"code","e2bcf21b":"code","07c3799e":"code","7e53415f":"code","178f283c":"markdown","2d048e29":"markdown","56e6c440":"markdown","79f78898":"markdown","f5d810b7":"markdown","44aa0673":"markdown","c5aafd99":"markdown","f1debb93":"markdown","db7ff170":"markdown"},"source":{"a02bf382":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2409097a":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nfrom skimage import io\n\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.python.keras import Sequential\nfrom tensorflow.keras import layers, optimizers\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.initializers import glorot_uniform\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler\nimport tensorflow.keras.backend as K\n\nfrom tensorflow.keras.layers import Conv2D, BatchNormalization, Activation, MaxPool2D, Conv2DTranspose, Concatenate, Input\nfrom tensorflow.keras.applications import VGG19\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport random\n\nimport glob\nfrom IPython.display import display","f99b0f8b":"print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","cee15fb7":"data = pd.read_csv('..\/input\/lgg-mri-segmentation\/kaggle_3m\/data.csv')\ndata.info()","eb201d20":"data.head(10)","01e04eea":"data_map = []\nfor sub_dir_path in glob.glob(\"\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/\"+\"*\"):\n    #if os.path.isdir(sub_path_dir):\n    try:\n        dir_name = sub_dir_path.split('\/')[-1]\n        for filename in os.listdir(sub_dir_path):\n            image_path = sub_dir_path + '\/' + filename\n            data_map.extend([dir_name, image_path])\n    except Exception as e:\n        print(e)","11131658":"df = pd.DataFrame({\"patient_id\" : data_map[::2],\n                   \"path\" : data_map[1::2]})\ndf.head()","fd5cf765":"df_imgs = df[~df['path'].str.contains(\"mask\")] # if have not mask\ndf_masks = df[df['path'].str.contains(\"mask\")]# if have mask\n\n# File path line length images for later sorting\nBASE_LEN = 89 # len(\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_ <-!!!43.tif)\nEND_IMG_LEN = 4 # len(\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_43 !!!->.tif)\nEND_MASK_LEN = 9 # (\/kaggle\/input\/lgg-mri-segmentation\/kaggle_3m\/TCGA_DU_6404_19850629\/TCGA_DU_6404_19850629_43 !!!->_mask.tif)\n\n# Data sorting\nimgs = sorted(df_imgs[\"path\"].values, key=lambda x : int(x[BASE_LEN:-END_IMG_LEN]))\nmasks = sorted(df_masks[\"path\"].values, key=lambda x : int(x[BASE_LEN:-END_MASK_LEN]))\n\n# Sorting check\nidx = random.randint(0, len(imgs)-1)\nprint(\"Path to the Image:\", imgs[idx], \"\\nPath to the Mask:\", masks[idx])","d35d97a0":"# Final dataframe\nbrain_df = pd.DataFrame({\"patient_id\": df_imgs.patient_id.values,\n                         \"image_path\": imgs,\n                         \"mask_path\": masks\n                        })\ndef pos_neg_diagnosis(mask_path):\n    value = np.max(cv2.imread(mask_path))\n    if value > 0 : \n        return 1\n    else:\n        return 0\n    \nbrain_df['mask'] = brain_df['mask_path'].apply(lambda x: pos_neg_diagnosis(x))\nbrain_df","beda145b":"brain_df['mask'].value_counts()","ddaf1943":"sns.countplot(brain_df['mask'])\nplt.show()","49145378":"count = 0\ni = 0\nfig,axs = plt.subplots(12,3, figsize=(20,50))\nfor mask in brain_df['mask']:\n    if (mask==1):\n        img = io.imread(brain_df.image_path[i])\n        axs[count][0].title.set_text(\"Brain MRI\")\n        axs[count][0].imshow(img)\n        \n        mask = io.imread(brain_df.mask_path[i])\n        axs[count][1].title.set_text(\"Mask\")\n        axs[count][1].imshow(mask, cmap='gray')\n        \n        img[mask==255] = (255,0,0)  # change pixel color at the position of mask\n        axs[count][2].title.set_text(\"MRI with Mask\")\n        axs[count][2].imshow(img)\n        count +=1\n    i += 1\n    if (count==12):\n        break\n        \nfig.tight_layout()","e0db5c6c":"brain_df_train = brain_df.drop(columns=['patient_id'])\n# Convert the data in mask column to string format, to use categorical mode in flow_from_dataframe\nbrain_df_train['mask'] = brain_df_train['mask'].apply(lambda x: str(x))\nbrain_df_train.info()","1146b9ed":"brain_df_mask = brain_df[brain_df['mask'] == 1]\nbrain_df_mask.shape","6453f701":"# creating test, train and val sets\nX_train, X_val = train_test_split(brain_df_mask, test_size=0.15)\nX_test, X_val = train_test_split(X_val, test_size=0.5)\nprint(\"Train size is {}, valid size is {} & test size is {}\".format(len(X_train), len(X_val), len(X_test)))\n\ntrain_ids = list(X_train.image_path)\ntrain_mask = list(X_train.mask_path)\n\nval_ids = list(X_val.image_path)\nval_mask= list(X_val.mask_path)","49778c54":"class DataGenerator(tf.keras.utils.Sequence):\n  def __init__(self, ids , mask, image_dir = '.\/', batch_size = 16, img_h = 256, img_w = 256, shuffle = True):\n\n    self.ids = ids\n    self.mask = mask\n    self.image_dir = image_dir\n    self.batch_size = batch_size\n    self.img_h = img_h\n    self.img_w = img_w\n    self.shuffle = shuffle\n    self.on_epoch_end()\n\n  def __len__(self):\n    'Get the number of batches per epoch'\n\n    return int(np.floor(len(self.ids)) \/ self.batch_size)\n\n  def __getitem__(self, index):\n    'Generate a batch of data'\n\n    #generate index of batch_size length\n    indexes = self.indexes[index* self.batch_size : (index+1) * self.batch_size]\n\n    #get the ImageId corresponding to the indexes created above based on batch size\n    list_ids = [self.ids[i] for i in indexes]\n\n    #get the MaskId corresponding to the indexes created above based on batch size\n    list_mask = [self.mask[i] for i in indexes]\n\n\n    #generate data for the X(features) and y(label)\n    X, y = self.__data_generation(list_ids, list_mask)\n\n    #returning the data\n    return X, y\n\n  def on_epoch_end(self):\n    'Used for updating the indices after each epoch, once at the beginning as well as at the end of each epoch'\n    \n    #getting the array of indices based on the input dataframe\n    self.indexes = np.arange(len(self.ids))\n\n    #if shuffle is true, shuffle the indices\n    if self.shuffle:\n      np.random.shuffle(self.indexes)\n\n  def __data_generation(self, list_ids, list_mask):\n    'generate the data corresponding the indexes in a given batch of images'\n\n    # create empty arrays of shape (batch_size,height,width,depth) \n    #Depth is 3 for input and depth is taken as 1 for output becasue mask consist only of 1 channel.\n    X = np.empty((self.batch_size, self.img_h, self.img_w, 3))\n    y = np.empty((self.batch_size, self.img_h, self.img_w, 1))\n\n    #iterate through the dataframe rows, whose size is equal to the batch_size\n    for i in range(len(list_ids)):\n      #path of the image\n      img_path = str(list_ids[i])\n      \n      #mask path\n      mask_path = str(list_mask[i])\n      \n      #reading the original image and the corresponding mask image\n      img = io.imread(img_path)\n      mask = io.imread(mask_path)\n\n      #resizing and coverting them to array of type float64\n      img = cv2.resize(img,(self.img_h,self.img_w))\n      img = np.array(img, dtype = np.float64)\n      \n      mask = cv2.resize(mask,(self.img_h,self.img_w))\n      mask = np.array(mask, dtype = np.float64)\n\n      #standardising \n      img -= img.mean()\n      img \/= img.std()\n      \n      mask -= mask.mean()\n      mask \/= mask.std()\n      \n      #Adding image to the empty array\n      X[i,] = img\n      \n      #expanding the dimnesion of the image from (256,256) to (256,256,1)\n      y[i,] = np.expand_dims(mask, axis = 2)\n    \n    #normalizing y\n    y = (y > 0).astype(int)\n\n    return X, y\n\ntrain_data = DataGenerator(train_ids, train_mask)\nval_data = DataGenerator(val_ids, val_mask)","7458b7fb":"def conv_block(input, num_filters):\n    x = Conv2D(num_filters, 3, padding=\"same\")(input)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n\n    x = Conv2D(num_filters, 3, padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n\n    return x\n\ndef decoder_block(input, skip_features, num_filters):\n    x = Conv2DTranspose(num_filters, (2, 2), strides=2, padding=\"same\")(input)\n    x = Concatenate()([x, skip_features])\n    x = conv_block(x, num_filters)\n    return x\n\ndef build_vgg19_unet(input_shape):\n    \"\"\" Input \"\"\"\n    inputs = Input(input_shape)\n\n    \"\"\" Pre-trained VGG19 Model \"\"\"\n    vgg19 = VGG19(include_top=False, weights=\"imagenet\", input_tensor=inputs)\n\n    \"\"\" Encoder \"\"\"\n    s1 = vgg19.get_layer(\"block1_conv2\").output         \n    s2 = vgg19.get_layer(\"block2_conv2\").output         \n    s3 = vgg19.get_layer(\"block3_conv4\").output         \n    s4 = vgg19.get_layer(\"block4_conv4\").output         \n\n    \"\"\" Bridge \"\"\"\n    b1 = vgg19.get_layer(\"block5_conv4\").output         \n\n    \"\"\" Decoder \"\"\"\n    d1 = decoder_block(b1, s4, 512)                     \n    d2 = decoder_block(d1, s3, 256)                     \n    d3 = decoder_block(d2, s2, 128)                    \n    d4 = decoder_block(d3, s1, 64)                      \n\n    \"\"\" Output \"\"\"\n    outputs = Conv2D(1, 1, padding=\"same\", activation=\"sigmoid\")(d4)\n\n    model = Model(inputs, outputs, name=\"VGG19_U-Net\")\n    return model\nmodel = build_vgg19_unet((256,256,3))\nmodel.summary()","ae6d6087":"# Define a custom loss function for Vgg19 UNet model\n\nepsilon = 1e-5\nsmooth = 1\n\ndef tversky(y_true, y_pred):\n    y_true_pos = K.flatten(y_true)\n    y_pred_pos = K.flatten(y_pred)\n    true_pos = K.sum(y_true_pos * y_pred_pos)\n    false_neg = K.sum(y_true_pos * (1-y_pred_pos))\n    false_pos = K.sum((1-y_true_pos)*y_pred_pos)\n    alpha = 0.7\n    return (true_pos + smooth)\/(true_pos + alpha*false_neg + (1-alpha)*false_pos + smooth)\n\ndef focal_tversky(y_true,y_pred):\n    y_true = tf.cast(y_true, tf.float32)\n    y_pred = tf.cast(y_pred, tf.float32)\n    \n    pt_1 = tversky(y_true, y_pred)\n    gamma = 0.75\n    return K.pow((1-pt_1), gamma)\n\ndef tversky_loss(y_true, y_pred):\n    return 1 - tversky(y_true,y_pred)","b9a22d03":"# compling model and callbacks functions\nadam = tf.keras.optimizers.Adam(lr = 0.05, epsilon = 0.1)\nmodel.compile(optimizer = adam, \n                  loss = focal_tversky, \n                  metrics = [tversky]\n                 )\n#callbacks\nearlystopping = EarlyStopping(monitor='val_loss',\n                              mode='min', \n                              verbose=1, \n                              patience=30\n                             )\n# save the best model with lower validation loss\ncheckpointer = ModelCheckpoint(filepath=\"seg_model.h5\", \n                               verbose=1, \n                               save_best_only=True\n                              )\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',\n                              mode='min',\n                              verbose=1,\n                              patience=10,\n                              min_delta=0.0001,\n                              factor=0.2\n                             )\n","1ad68a5c":"history = model.fit(train_data, \n                  epochs = 60, \n                  validation_data = val_data,\n                  callbacks = [checkpointer, earlystopping, reduce_lr]\n                 )","bd00cb4d":"model = load_model(\"seg_model.h5\",custom_objects={\"focal_tversky\":focal_tversky,\"tversky\":tversky,\"tversky_loss\":tversky_loss})","a26a506d":"history.history.keys()","a07c210e":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(history.history['loss']);\nplt.plot(history.history['val_loss']);\nplt.title(\"SEG Model focal tversky Loss\");\nplt.ylabel(\"focal tversky loss\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);\n\nplt.subplot(1,2,2)\nplt.plot(history.history['tversky']);\nplt.plot(history.history['val_tversky']);\nplt.title(\"SEG Model tversky score\");\nplt.ylabel(\"tversky Accuracy\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);","a5cb3d9b":"test_ids = list(X_test.image_path)\ntest_mask = list(X_test.mask_path)","dc776fdf":"def prediction(test, model_seg):\n  \n    # empty list to store results\n    mask, image_id,has_mask = [], [], []\n    \n    #itetrating through each image in test data\n    for i in test.image_path:\n        \n\n        \n        #Creating a empty array of shape 1,256,256,1\n        X = np.empty((1,256,256,3))\n        # read the image\n        img = io.imread(i)\n        #resizing the image and coverting them to array of type float64\n        img = cv2.resize(img, (256,256))\n        img = np.array(img, dtype=np.float64)\n        \n        # standardising the image\n        img -= img.mean()\n        img \/= img.std()\n        #converting the shape of image from 256,256,3 to 1,256,256,3\n        X[0,] = img\n        \n        #make prediction of mask\n        predict = model_seg.predict(X)\n        \n        # if sum of predicted mask is 0 then there is not tumour\n        if predict.round().astype(int).sum()==0:\n            image_id.append(i)\n            has_mask.append(0)\n            mask.append('No mask :)')\n        else:\n        #if the sum of pixel values are more than 0, then there is tumour\n            image_id.append(i)\n            has_mask.append(1)\n            mask.append(predict)\n            \n    return pd.DataFrame({'image_path': image_id,'predicted_mask': mask,'has_mask': has_mask})\n","e2bcf21b":"# making prediction\ndf_pred = prediction(X_test, model)\ndf_pred","07c3799e":"# merging original and prediction df\ndf_pred = X_test.merge(df_pred, on='image_path')\ndf_pred.head(10)","7e53415f":"#visualizing prediction\ncount = 0\nfig, axs = plt.subplots(15,5, figsize=(30,70))\n\nfor i in range(len(df_pred)):\n    if df_pred.has_mask[i]==1 and count<15:\n        #read mri images\n        img = io.imread(df_pred.image_path[i])\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        axs[count][0].imshow(img)\n        axs[count][0].title.set_text('Brain MRI')\n        \n        #read original mask\n        mask = io.imread(df_pred.mask_path[i])\n        axs[count][1].imshow(mask)\n        axs[count][1].title.set_text('Original Mask')\n        \n        #read predicted mask\n        pred = np.array(df_pred.predicted_mask[i]).squeeze().round()\n        axs[count][2].imshow(pred)\n        axs[count][2].title.set_text('AI predicted mask')\n        \n        #overlay original mask with MRI\n        img[mask==255] = (255,0,0)\n        axs[count][3].imshow(img)\n        axs[count][3].title.set_text('Brain MRI with original mask (Ground Truth)')\n        \n        #overlay predicted mask and MRI\n        img_ = io.imread(df_pred.image_path[i])\n        img_ = cv2.cvtColor(img_, cv2.COLOR_BGR2RGB)\n        img_[pred==1] = (0,255,150)\n        axs[count][4].imshow(img_)\n        axs[count][4].title.set_text('MRI with AI PREDICTED MASK')\n        \n        count +=1\n    if (count==15):\n        break\n\nfig.tight_layout()        \n","178f283c":"## Model Evaluation","2d048e29":"# Vizualization","56e6c440":"<div style = \"text-align: center;\"><img src = \"attachment:e5c237c7-5fd2-4733-8e68-dfa3b47fd736.png\" width=\"100%\"><\/div>\n\n**What's Brain Tumor ?** <br>\n&nbsp;&nbsp;&nbsp;&nbsp;A brain tumor occurs when abnormal cells form within the brain. There are two main types of tumors: cancerous (malignant) tumors and benign (non-cancerous) tumors. Cancerous tumors can be divided into primary tumors, which start within the brain, and secondary tumors, which most commonly have spread from tumors located outside the brain, known as brain metastasis tumors. All types of brain tumors may produce symptoms that vary depending on the part of the brain involved. These symptoms may include headaches, seizures, problems with vision, vomiting and mental changes. The headache is classically worse in the morning and goes away with vomiting. Other symptoms may include difficulty walking, speaking or with sensations. As the disease progresses, unconsciousness may occur.<br>\n**Semantic Segmentation** <br>\n&nbsp;&nbsp;&nbsp;&nbsp;The goal of semantic image segmentation is to label each pixel of an image with a corresponding class of what is being represented. Because we\u2019re predicting for every pixel in the image, this task is commonly referred to as dense prediction.","79f78898":"## Segmantati\u0131n Model Performance ","f5d810b7":"# Preprocessing image","44aa0673":"# Prepare dataset","c5aafd99":"# Create Model","f1debb93":"# import libraries","db7ff170":"## Training  Model"}}