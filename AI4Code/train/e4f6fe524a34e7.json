{"cell_type":{"a4a0dbd9":"code","f3b1881e":"code","4f4cfd64":"code","88284ed1":"code","a516885e":"code","20d92d15":"code","36f32e4d":"code","72f89d1b":"code","c2114a3b":"code","53b19e00":"code","c283388f":"code","fba929c7":"code","f4703b1b":"code","6a89a63b":"markdown","5a963c57":"markdown","8382505c":"markdown","7e8f1c42":"markdown","6b73a50c":"markdown","d1c8dee8":"markdown","777b1f32":"markdown","fd10e011":"markdown","3a15ddb5":"markdown"},"source":{"a4a0dbd9":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom mpl_toolkits.mplot3d import proj3d\nfrom matplotlib.patches import FancyArrowPatch","f3b1881e":"np.random.seed(0) # random seed for consistency\n\nmu_vec1 = np.array([0,0,0])\ncov_mat1 = np.array([[1,0,0],[0,1,0],[0,0,1]])\nclass1_sample = np.random.multivariate_normal(mu_vec1, cov_mat1, 40).T\n\nmu_vec2 = np.array([1,2,3])\ncov_mat2 = np.array([[1,0,0],[0,1,0],[0,0,1]])\nclass2_sample = np.random.multivariate_normal(mu_vec2, cov_mat2, 40).T\n\nall_samples = np.concatenate((class1_sample, class2_sample), axis=1)","4f4cfd64":"fig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\nax.plot(class1_sample[0,:], class1_sample[1,:], class1_sample[2,:], 'go', markersize=8, alpha=0.5, label='Class 1')\nax.plot(class2_sample[0,:], class2_sample[1,:], class2_sample[2,:], 'b*', markersize=8, alpha=0.5, label='Class 2')\nplt.legend()","88284ed1":"mean_x = np.mean(all_samples[0,:])\nmean_y = np.mean(all_samples[1,:])\nmean_z = np.mean(all_samples[2,:])\n\nmean_vector = np.array([[mean_x],[mean_y],[mean_z]])\n\nprint('Mean Vector:\\n', mean_vector)","a516885e":"all_samples_meaned = all_samples - mean_vector\ncov_mat = 1\/len(all_samples_meaned)*all_samples_meaned.dot(all_samples_meaned.T)\nprint('Covariance Matrix:\\n', cov_mat)","20d92d15":"# eigenvectors and eigenvalues from the covariance matrix using eigendecomposition\neig_val_cov, eig_vec_cov = np.linalg.eig(cov_mat)\n\nfor i in range(len(eig_val_cov)):\n    eigvec_cov = eig_vec_cov[:,i].reshape(1,3).T\n\n    print('Eigenvector {}: \\n{}'.format(i+1, eigvec_cov))\n    print('Eigenvalue {}: {}'.format(i+1, eig_val_cov[i]))\n    print(40 * '-')","36f32e4d":"eig_vec_cov.dot(np.identity(3)*eig_val_cov).dot(eig_vec_cov.T)","72f89d1b":"class Arrow3D(FancyArrowPatch):\n    def __init__(self, xs, ys, zs, *args, **kwargs):\n        FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)\n        self._verts3d = xs, ys, zs\n\n    def draw(self, renderer):\n        xs3d, ys3d, zs3d = self._verts3d\n        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)\n        self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))\n        FancyArrowPatch.draw(self, renderer)","c2114a3b":"fig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\nax.plot(class1_sample[0,:], class1_sample[1,:], class1_sample[2,:], 'go', markersize=8, alpha=0.5, label='Class 1')\nax.plot(class2_sample[0,:], class2_sample[1,:], class2_sample[2,:], 'b*', markersize=8, alpha=0.5, label='Class 2')\n\nfor v in eig_vec_cov.T:\n    a = Arrow3D([mean_x, v[0]], [mean_y, v[1]], [mean_z, v[2]], mutation_scale=20, lw=3, arrowstyle=\"-|>\", color=\"r\")\n    ax.add_artist(a)","53b19e00":"# Sort the (eigenvalue, eigenvector) from high to low\nidx = np.argsort(eig_val_cov)[::-1]\neig_val_cov = eig_val_cov[idx]\neig_vec_cov = eig_vec_cov[idx]\n\n# Visually confirm that the list is correctly sorted by decreasing eigenvalues\nfor val, vec in zip(eig_val_cov, eig_vec_cov):\n    print(val, '\\t', vec)","c283388f":"matrix_w = eig_vec_cov[:,:2]\nprint('Matrix W:\\n', matrix_w)","fba929c7":"transformed = matrix_w.T.dot(all_samples)","f4703b1b":"plt.plot(transformed[0,:40], transformed[1,:40], 'go', alpha=0.5, label='class1')\nplt.plot(transformed[0,40:], transformed[1,40:], 'b*', alpha=0.5, label='class2')\nplt.legend();\nplt.title('Transformed samples with class labels');","6a89a63b":"# Firstly we create some data","5a963c57":"# Let's plot our eigenvectors","8382505c":"# Let's plot the data we have just created","7e8f1c42":"## Recheck eigendecomposition","6b73a50c":"# Now we calculate the covariance matrix","d1c8dee8":"# Plot transformed sample","777b1f32":"# Transform with dot product","fd10e011":"# Now we calculate the mean vector","3a15ddb5":"* Well, that's a bad angle to inspect data."}}