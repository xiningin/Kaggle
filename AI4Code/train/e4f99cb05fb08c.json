{"cell_type":{"0f110721":"code","fdda22e2":"code","58f38557":"code","82c0a1e1":"code","417f9b6a":"code","b33a8d49":"code","13a667c7":"code","387838b1":"code","1845f8ae":"code","9baa4c5e":"code","26d71af5":"code","9b0112ea":"code","9cc5dc04":"code","3ebfb280":"code","06c1fc66":"code","e6afaf07":"code","ff3ff5d1":"code","b1a40835":"code","748069e1":"code","a0e6cbfb":"code","c4ad7d11":"code","6be3c951":"code","46aadf66":"code","d5864304":"code","7696f7c5":"code","819b3436":"code","13d7577c":"code","010e4cef":"code","0a483b90":"code","c71d5c31":"code","5f8261a1":"code","accac4db":"code","86c07f3d":"code","b7c85017":"code","db0b3db8":"code","1ebf25f9":"code","557ff4be":"code","1a0f7230":"code","302d2ddc":"code","a0fff3fb":"code","ab6abfe1":"code","048ec0e7":"code","15c1b5a1":"code","7afb4bfc":"code","2f9ed1f2":"code","9e505860":"code","f4ae8101":"code","6c3cbdba":"code","3da9e84a":"code","12f4c9bb":"code","5a3f7a63":"code","2d5ec376":"code","2f42ff44":"code","da603f17":"code","e5a7211c":"code","62016738":"code","83cfa7ad":"code","ef399b85":"code","6bc6d796":"code","9b7565e9":"code","71453859":"code","f6d02269":"code","f53556af":"code","f5ffdd1a":"code","204b4b71":"code","7463c3d2":"code","6e45411e":"code","21e35582":"code","f5fceb65":"code","b6c92dab":"code","746db7fe":"code","3581e97c":"code","0d95e6be":"code","de7e3d6a":"code","b591ba82":"code","9af8f9c5":"code","af7e903f":"code","ff8e7db0":"code","66484755":"code","e6d74f2e":"code","8a785fb1":"code","b85371f1":"code","ac3c4f58":"code","e26f2b50":"markdown","12cf6f3e":"markdown","b7c1e827":"markdown","947612b2":"markdown","9be45dc8":"markdown","2973c565":"markdown","8f1c5565":"markdown","789f1e7c":"markdown","d46740ab":"markdown","165a78ff":"markdown","134ee983":"markdown","f9f90718":"markdown","2b965e95":"markdown","bfca1b33":"markdown","004d0ec1":"markdown","8cbc3231":"markdown","7cacc2a2":"markdown","a4de43d7":"markdown","05bc43a8":"markdown","23653db9":"markdown","6356630e":"markdown","63c85fa9":"markdown","e8711c2e":"markdown","10b321c1":"markdown","bc9852bd":"markdown","5a5efa61":"markdown","79e60b67":"markdown","73f68adb":"markdown","a274d491":"markdown","f55eafc5":"markdown","7b62facd":"markdown","3578277d":"markdown"},"source":{"0f110721":"# This Python 3 environment comes with many helpful analytics libraries installed\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set() # setting seaborn default for plots\n%matplotlib inline\n","fdda22e2":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport sklearn.metrics as mc\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport sklearn.ensemble as ens \n","58f38557":"# !pip install xgboost\nimport xgboost as xgb \n#!pip install lightgbm\nimport lightgbm as lgbm\n#!pip install catboost\nimport catboost as cb\nfrom mlxtend.classifier import StackingClassifier\nfrom tpot import TPOTClassifier","82c0a1e1":"TRAIN_PATH = '..\/input\/train.csv'\nTEST_PATH = '..\/input\/test.csv'\ntrain_df = pd.read_csv(TRAIN_PATH)\ntest_df = pd.read_csv(TEST_PATH)","417f9b6a":"train_df.columns","b33a8d49":"train_df.head()","13a667c7":"train_df.describe()","387838b1":"train_df.info()","1845f8ae":"test_df.info()","9baa4c5e":"train_df.isnull().sum()","26d71af5":"test_df.isnull().sum()","9b0112ea":"train_df['Survived'].value_counts()","9cc5dc04":"def bar_chart(feature):\n    survived = train_df[train_df['Survived']==1][feature].value_counts()\n    dead = train_df[train_df['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","3ebfb280":"bar_chart('Sex')","06c1fc66":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e6afaf07":"bar_chart('Pclass')","ff3ff5d1":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b1a40835":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","748069e1":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","a0e6cbfb":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","c4ad7d11":"train_df = pd.read_csv(TRAIN_PATH)\ntest_df = pd.read_csv(TEST_PATH)\ntrain_df.columns","6be3c951":"train_test_data = [train_df, test_df] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ntitle_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    ","46aadf66":"train_df.columns","d5864304":"test_df.columns","7696f7c5":"# train_df['Has_family'] = train_df['SibSp'] + train_df['Parch']\n# test_df['Has_family'] = test_df['SibSp'] + test_df['Parch']\n# train_df[train_df['Has_family']>0] = 1\n# test_df[test_df['Has_family']>0] = 1","819b3436":"X_train_df = train_df.drop(columns=['Survived', 'PassengerId', 'Name', 'Ticket', 'Cabin'])\nX_test_df = test_df.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])","13d7577c":"X_train_df.shape, X_test_df.shape","010e4cef":"y_train_df = train_df['Survived']","0a483b90":"X_train_df.isnull().sum()","c71d5c31":"X_test_df.isnull().sum()","5f8261a1":"# X_train_df.loc[ X_train_df['Age'] <= 5, 'Age']= 0\n# X_train_df.loc[(X_train_df['Age'] > 5) & (X_train_df['Age'] <= 16), 'Age'] = 1\n# X_train_df.loc[(X_train_df['Age'] > 16) & (X_train_df['Age'] <= 32), 'Age'] = 2\n# X_train_df.loc[(X_train_df['Age'] > 32) & (X_train_df['Age'] <= 48), 'Age'] = 3\n# X_train_df.loc[(X_train_df['Age'] > 48) & (X_train_df['Age'] <= 64), 'Age'] = 4\n# X_train_df.loc[ X_train_df['Age'] > 64, 'Age'] = 5\n# X_train_df","accac4db":"# X_test_df.loc[ X_test_df['Age'] <= 5, 'Age']= 0\n# X_test_df.loc[(X_test_df['Age'] > 5) & (X_test_df['Age'] <= 16), 'Age'] = 1\n# X_test_df.loc[(X_test_df['Age'] > 16) & (X_test_df['Age'] <= 32), 'Age'] = 2\n# X_test_df.loc[(X_test_df['Age'] > 32) & (X_test_df['Age'] <= 48), 'Age'] = 3\n# X_test_df.loc[(X_test_df['Age'] > 48) & (X_test_df['Age'] <= 64), 'Age'] = 4\n# X_test_df.loc[ X_test_df['Age'] > 64, 'Age'] = 5","86c07f3d":"mod = X_train_df.Embarked.value_counts().argmax()\nX_train_df.Embarked.fillna(mod, inplace=True)","b7c85017":"fare_med = train_df.Fare.median()\nX_test_df.Fare.fillna(fare_med, inplace=True)","db0b3db8":"age_med = train_df.Age.median()\nX_train_df.Age.fillna(age_med, inplace=True)\nX_test_df.Age.fillna(age_med, inplace=True)","1ebf25f9":"X_train_df.isnull().sum()","557ff4be":"X_test_df.isnull().sum()","1a0f7230":"X_train_df = pd.get_dummies(X_train_df, columns=['Sex', 'Pclass', 'Embarked', 'Title'], drop_first=True)\nX_test_df = pd.get_dummies(X_test_df, columns=['Sex', 'Pclass', 'Embarked', 'Title'], drop_first=True)","302d2ddc":"X_train_df.head()","a0fff3fb":"X_test_df.head()","ab6abfe1":"X_train_df.shape, X_test_df.shape","048ec0e7":"# age_notnull = pd.concat([X_train_df[X_train_df.Age.notnull()], X_test_df[test_df.Age.notnull()]], axis=0)\n# X_age_notnull = age_notnull.drop(columns=['Age'])\n# y_age_notnull = pd.DataFrame(age_notnull['Age'])\n# X_age_train_null = X_train_df[X_train_df.Age.isnull()].drop(columns=['Age'])\n# X_age_test_null = X_test_df[X_test_df.Age.isnull()].drop(columns=['Age'])\n# #------------------------------------------------------------------------\n# #  Data Scalling\n# age_sc_X = MinMaxScaler()\n# X_age_notnull = age_sc_X.fit_transform(X_age_notnull)\n# X_age_train_null = age_sc_X.transform(X_age_train_null)\n# X_age_test_null = age_sc_X.transform(X_age_test_null)\n# age_sc_y = MinMaxScaler()\n# y_age_notnull = age_sc_y.fit_transform(y_age_notnull)\n# #------------------------------------------------------------------------\n# #  Age Predecttion\n# X_train, X_test, y_train, y_test = train_test_split(X_age_notnull, y_age_notnull.ravel(), test_size=0.2, random_state=42)\n# RF_age_reg = ens.RandomForestRegressor(n_estimators= 845, min_samples_split= 5,min_samples_leaf= 2,\n#                                        max_features= 'sqrt', max_depth= 100, bootstrap= True)\n# RF_age_reg.fit(X_train, y_train)\n# y_pred = RF_age_reg.predict(X_test)\n# mc.mean_absolute_error(y_test, y_pred), mc.r2_score(y_test, y_pred)\n# X_age_train_null_pred = list(RF_age_reg.predict(X_age_train_null))\n# X_age_test_null_pred = list(RF_age_reg.predict(X_age_test_null))\n# train_null_index = list(X_train_df.Age[X_train_df.Age.isnull()].index)\n# test_null_index = list(X_test_df.Age[X_test_df.Age.isnull()].index)\n# train_fillna_df = pd.DataFrame(X_age_train_null_pred, columns=['Age'], index=train_null_index)\n# test_fillna_df = pd.DataFrame(X_age_test_null_pred, columns=['Age'], index=test_null_index)\n# X_train_df.Age.fillna(train_fillna_df['Age'], inplace=True)\n# X_test_df.Age.fillna(test_fillna_df['Age'], inplace=True)\n# X_train_sc = X_train_df\n# X_test_sc = X_test_df","15c1b5a1":"sc_X = MinMaxScaler()\nX_train_sc = sc_X.fit_transform(X_train_df)\nX_test_sc = sc_X.transform(X_test_df)","7afb4bfc":"X_train, X_test, y_train, y_test = train_test_split(X_train_sc, y_train_df.values, test_size=0.2)","2f9ed1f2":"logi_clf = LogisticRegression(solver='lbfgs', max_iter=1000)\nlogi_parm = {\"C\": [0.1, 0.5, 1, 5],\n             'solver': ['newton-cg', 'lbfgs'],\n}","9e505860":"svm_clf = SVC(probability=True)\nsvm_parm = {'kernel': ['rbf', 'poly'], \n            'C': [1, 100, 500], \n            'gamma': ['scale']}","f4ae8101":"dt_clf = DecisionTreeClassifier()\ndt_parm = {'criterion':['gini', 'entropy']}","6c3cbdba":"knn_clf = KNeighborsClassifier()\nknn_parm = {'n_neighbors':[5, 10, 15, 20], \n            'weights':['uniform', 'distance'], \n            'p': [1,2]}","3da9e84a":"gnb_clf = GaussianNB()\ngnb_parm = {'var_smoothing':[1e-09]}","12f4c9bb":"def generate_submission(clf, file_name):\n    pred = clf.predict(X_test_sc)\n    pred = np.array(pred, dtype='int')\n    test_df = pd.read_csv(TEST_PATH)\n    y_test_df = test_df['PassengerId']\n    cols = ['PassengerId', 'Survived']\n    submit_df = pd.DataFrame(np.hstack((y_test_df.values.reshape(-1,1),pred.reshape(-1,1))), \n                             columns=cols)\n    submit_df.to_csv('submission_{}.csv'.format(file_name), index=False)","5a3f7a63":"clfs = [logi_clf, svm_clf, dt_clf, knn_clf, gnb_clf]\nparams = [logi_parm, svm_parm, dt_parm, knn_parm, gnb_parm] \nclf_names = ['logistic', 'SVM', 'DT', 'KNN', 'GNB']","2d5ec376":"clfs_opt = []\nclfs_best_scores = []\nclfs_best_param = []\ni=0\nfor clf_, param in zip(clfs, params):\n    clf = RandomizedSearchCV(clf_, param, cv=5)\n    clf.fit(X_train, y_train)\n    clfs_opt.append(clf.best_estimator_)\n    clfs_best_scores.append(clf.best_score_)\n    clfs_best_param.append(clf.best_params_)\n    print(i)\n    i+=1","2f42ff44":"all_Clfs_dict = {}\nall_Clfs_list = []\nfor name, clf in zip(clf_names, clfs_opt):\n    all_Clfs_dict[name] = clf\n    all_Clfs_list.append((name, clf))","da603f17":"arg = np.argmax(clfs_best_scores)","e5a7211c":"clf = clfs_opt[arg]\ny_pred = clf.predict(X_test)\nmc.accuracy_score(y_test, y_pred)","62016738":"voting_clf = ens.VotingClassifier(all_Clfs_list)\nvoting_param = {'voting': ['hard', 'soft'], 'weights': [clfs_best_scores]}","83cfa7ad":"meta_est_clf = ens.BaggingClassifier(base_estimator=clfs_opt[arg])\nmeta_est_param = {'n_estimators':range(50,1000,100),\n        'max_samples':[1.0, 0.9, 0.8],\n        'bootstrap_features':[False, True],\n        'random_state': [0,1,2,3,4,5]}","ef399b85":"rf_clf = ens.RandomForestClassifier()\nrf_param = {'n_estimators' : range(50,1000,100),\n         'criterion': ['gini', 'entropy'],\n         'max_depth' : range(4,16,2),\n         'min_samples_split' : [2, 5, 10],\n         'min_samples_leaf' : [1, 2, 4],\n         'bootstrap' : [True, False]\n        }","6bc6d796":"ada_clf = ens.AdaBoostClassifier()\nada_param = {'n_estimators' : range(50,1000,100),\n            'learning_rate': [1.0, 0.01, 0.001]\n        }","9b7565e9":"gbm_clf = ens.GradientBoostingClassifier()\ngbm_param = {'n_estimators' : range(50,1000,100),\n            'max_depth':range(4,16,2), \n        }","71453859":"xgbm_param = {'n_estimators' : range(50,1000,100),\n            'learning_rate': [1.0, 0.01, 0.001],\n              'objective': ['binary:logistic'],\n        }\nxgbm_clf = xgb.XGBClassifier()","f6d02269":"lgbm_param = {'n_estimators' : range(50,1000,100),\n            'learning_rate': [1.0, 0.01, 0.001],\n        }\nlgbm_clf = lgbm.LGBMClassifier()","f53556af":"ens_clfs = [rf_clf, ada_clf, gbm_clf, xgbm_clf, lgbm_clf]\nens_params = [rf_param, ada_param, gbm_param, xgbm_param, lgbm_param] \nens_clf_names = ['RF', 'Ada', 'GBM', 'XGBM', 'LGBM']","f5ffdd1a":"ens_clfs_opt = []\nens_clfs_best_scores = []\n\ni=0\nfor clf_, param in zip(ens_clfs, ens_params):\n    clf = RandomizedSearchCV(clf_, param, cv=5)\n    clf.fit(X_train, y_train)\n    ens_clfs_opt.append(clf.best_estimator_)\n    ens_clfs_best_scores.append(clf.best_score_)\n    print(i)\n    i+=1","204b4b71":"arg = np.argmax(ens_clfs_best_scores)\nens_clfs_best_scores[arg]\n# clf = clfs_opt[arg]","7463c3d2":"ens_clf_names[arg]","6e45411e":"clf = ens_clfs_opt[arg]\ny_pred = clf.predict(X_test)\nmc.accuracy_score(y_test, y_pred)","21e35582":"generate_submission(clf, 'best_ens')","f5fceb65":"cat_clf = cb.CatBoostClassifier(\n            iterations = 1000,\n            learning_rate= 0.01,\n)","b6c92dab":"cat_clf.fit(X_train, y_train, early_stopping_rounds=5, use_best_model=True, plot=True,\n           eval_set=(X_test, y_test), verbose_eval=False)","746db7fe":"cat_clf.get_best_score()","3581e97c":"y_pred = cat_clf.predict(X_test)\nmc.accuracy_score(y_test, y_pred)","0d95e6be":"generate_submission(cat_clf, 'CatBoost')","de7e3d6a":"# ens_clfs_opt.append(cat_clf)\n# ens_clfs_best_scores.append(cat_clf.get_best_score())","b591ba82":"stackin_clf = StackingClassifier(classifiers=ens_clfs_opt, meta_classifier=cat_clf)\nstackin_clf.fit(X_train_sc, y_train_df)","9af8f9c5":"pred=stackin_clf.predict(X_test)\nmc.accuracy_score(y_test, y_pred)","af7e903f":"generate_submission(stackin_clf, 'stacking')","ff8e7db0":"tpot_clf = TPOTClassifier(generations=50,population_size=100, \n                          crossover_rate=0.5, mutation_rate=0.1,\n                          verbosity=False)","66484755":"tpot_clf.fit(X_train, y_train)\ntpot_clf.score","e6d74f2e":"pred=tpot_clf.predict(X_test)\nmc.accuracy_score(y_test, y_pred)","8a785fb1":"generate_submission(tpot_clf, 'tpot')","b85371f1":"tpot_clf.export('tpot_titanic_pipline.py')","ac3c4f58":"# %load tpot_titanic_pipline.py","e26f2b50":"#  Tpot genetic optimization","12cf6f3e":"## Name","b7c1e827":"###  Gradient Boost GBM","947612b2":"### Random Forest","9be45dc8":"##  Random Search Optimization for all above","2973c565":"### Light GBosst LGBM","8f1c5565":"#  Stacking","789f1e7c":"##  Boosting","d46740ab":"## KNN Clssifier","165a78ff":"# Ensempling Methods","134ee983":"### CatBoost","f9f90718":"##  Logostic Regression Classifier","2b965e95":"##  Descision Tree Classifier","bfca1b33":"   # Model Validation","004d0ec1":"# Data Visualization","8cbc3231":"### Bagging Meta-estimator","7cacc2a2":"## Gaussian Naive Bays Classifier","a4de43d7":"* Categorical: Survived, Sex, and Embarked. Ordinal: Pclass. <br>\n* Continous: Age, Fare. <br>\n* Discrete: SibSp, Parch. <br>","05bc43a8":"# Data Preprocessing","23653db9":"##  Fare missing data","6356630e":"# OneHot Encoding","63c85fa9":"##  Support Vector Machine Classifier","e8711c2e":"##  Age Prediction","10b321c1":"# Algorithms Training","bc9852bd":"###  AdaBoost","5a5efa61":"### XGBoost XGBM","79e60b67":"## Bagging","73f68adb":"##  Age missing data","a274d491":"## Voting","f55eafc5":"## Embarked missing data","7b62facd":"## Data Scaling","3578277d":"### Hard and soft Voting"}}