{"cell_type":{"4e5cdce8":"code","b2668cbb":"code","a0fa44f3":"code","5cae4286":"code","055b4299":"code","05cf6018":"code","b0721273":"code","6d82bdcf":"code","ed001421":"code","9baea9a0":"code","123e9d81":"code","4292195d":"code","373dbe51":"code","786282e4":"code","57edafb3":"code","f1a7e8d8":"code","458d6e99":"code","14c34a38":"code","0820a9f3":"code","10699f47":"code","37373bf4":"code","c78a7634":"code","8c32eda9":"code","9e762605":"code","05de04a5":"code","49ddf65b":"code","4069e8e3":"code","9d622f21":"code","007c3675":"code","670cf1d8":"code","6fd945e8":"code","a45727cd":"code","0605f695":"code","dc2c4619":"code","7cc34928":"code","f7eee4cd":"code","84e7a20e":"code","c19deb91":"code","d62c03c9":"code","8978ebe3":"code","230f42ee":"code","63ae7d3d":"code","0b8b955d":"code","6324323a":"code","2c6ad912":"code","b63f9610":"code","82ce21fb":"code","35b77086":"code","b8aed87d":"code","8895878e":"code","e3839033":"code","f8e251f4":"code","72f018cb":"code","6ed65634":"code","3e2b96c5":"code","8ce81f2b":"code","0a66d050":"code","fe7bae7b":"code","dc754830":"code","59dfb659":"code","605b28a2":"code","bb0fd828":"code","086160f1":"code","6654429b":"code","38a24048":"code","870bf614":"code","ebfd68c0":"code","871db678":"code","ceb7360a":"code","e56a214c":"markdown","34eba36a":"markdown","c622428a":"markdown","9551e0ab":"markdown","ae6b5916":"markdown","12df9d85":"markdown","cc216855":"markdown","b4c3216b":"markdown","231f5808":"markdown","1282ec22":"markdown","44f2a70e":"markdown","69f3dd0a":"markdown"},"source":{"4e5cdce8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2668cbb":"data = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ncombats = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/combats.csv')\ntest = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/tests.csv')","a0fa44f3":"data.head()","5cae4286":"len(data)","055b4299":"plt.figure(figsize=(12, 6))\nsns.countplot(data.Generation)","05cf6018":"data.groupby(['Generation'])['#'].count()","b0721273":"data['Total'] = data['HP'] + data['Attack'] + data['Defense'] + data['Sp. Atk'] + data['Sp. Def'] + data['Speed']","6d82bdcf":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Generation\", y=\"Total\", data=data)","ed001421":"# The 4th generation seems to be the best (by the mean)","9baea9a0":"generations = data.groupby('Generation')[['Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Legendary']].mean()","123e9d81":"generations = generations.reset_index()\ngenerations.index = generations.index + 1","4292195d":"generations","373dbe51":"generations.plot(x=\"Generation\", y=['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed'], kind=\"bar\", figsize=(15, 6))","786282e4":"plt.figure(figsize=(12,6))\nsns.lineplot(data=generations[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']])","57edafb3":"plt.figure(figsize=(10,10))\ndata.groupby(['Type 1'])['#'].count().plot.pie(autopct='%1.0f%%', pctdistance=0.9, labeldistance=1.1, startangle=90)","f1a7e8d8":"data.groupby(['Type 1'])['#'].count().sort_values(ascending=False)","458d6e99":"# There are a lot of Water and Normal types","14c34a38":"type_g = data.groupby(['Generation', 'Type 1'])['#'].count().reset_index()","0820a9f3":"type_g = type_g.sort_values(['Generation', '#'])","10699f47":"type_g.groupby('Generation').tail(1)","37373bf4":"# Water leads the first 3 generations then Normal for the 2 next","c78a7634":"plt.figure(figsize=(12, 6))\nsns.distplot(data.Total, hist=False)","8c32eda9":"# Strongest\ndata.iloc[data.Total.nlargest(10).index.values][['Name', 'Total']]","9e762605":"# Weakest\ndata.iloc[data.Total.nsmallest(10).index.values][['Name', 'Total']]","05de04a5":"g=sns.catplot(x='Type 1', y='Total', kind='bar', data=data, size=6)\ng.set_xticklabels(rotation=90)","49ddf65b":"# Best type is Dragon","4069e8e3":"data.groupby(['Type 1'])['Total'].mean().reset_index().sort_values('Total', ascending=False)","9d622f21":"plt.figure(figsize=(10,6))\nsns.countplot(data.Legendary)","007c3675":"plt.figure(figsize=(10,6))\nsns.violinplot(x='Legendary', y='Total', data=data)","670cf1d8":"fig, ax = plt.subplots(figsize=(9, 7))\n# Draw the two density plots\nlegendary = data[data.Legendary == True]\nnot_legendary = data[data.Legendary == False]\n\nax = sns.kdeplot(legendary.Attack, legendary.Defense,\n                 cmap=\"Reds\", shade=True, shade_lowest=False)\nax = sns.kdeplot(not_legendary.Attack, not_legendary.Defense,\n                 cmap=\"Blues\", shade=True, shade_lowest=False)\n\n# Add labels to the plot\nred = sns.color_palette(\"Reds\")[-2]\nblue = sns.color_palette(\"Blues\")[-2]\nax.text(25, 0, \"Non Legendary\", size=16, color=blue)\nax.text(125, 150, \"Legendary\", size=16, color=red)","6fd945e8":"combats.head()","a45727cd":"best = combats.groupby('Winner').count().reset_index().iloc[:,:2].sort_values('First_pokemon', ascending=False)[:5]","0605f695":"best","dc2c4619":"best = pd.merge(best, data, left_on='Winner', right_on='#')","7cc34928":"best[['Winner', 'Name']]","f7eee4cd":"worst = combats.groupby('Winner').count().reset_index().iloc[:,:2].sort_values('First_pokemon', ascending=True)[:5]","84e7a20e":"worst","c19deb91":"worst = pd.merge(worst, data, left_on='Winner', right_on='#')","d62c03c9":"worst[['Winner', 'Name']]","8978ebe3":"# Convert to categorical\n\ndata['Type 1'] = data['Type 1'].astype('category').cat.codes\ndata['Type 2'] = data['Type 2'].astype('category').cat.codes\ndata['Legendary'] = data['Legendary'].astype('category').cat.codes","230f42ee":"info = data[['#', 'Name']]","63ae7d3d":"first = data.copy()\nsecond = data.copy()","0b8b955d":"second.columns = ['#_s', 'Name_s', 'Type 1_s', 'Type 2_s', 'HP_s', 'Attack_s', 'Defense_s', 'Sp. Atk_s',\n       'Sp. Def_s', 'Speed_s', 'Generation_s', 'Legendary_s', 'Total_s']\n\nfirst.columns = ['#_f', 'Name_f', 'Type 1_f', 'Type 2_f', 'HP_f', 'Attack_f', 'Defense_f', 'Sp. Atk_f',\n       'Sp. Def_f', 'Speed_f', 'Generation_f', 'Legendary_f', 'Total_f']","6324323a":"train = pd.merge(combats, first, left_on='First_pokemon', right_on='#_f')\ntrain = pd.merge(train, second, left_on='Second_pokemon', right_on='#_s')","2c6ad912":"# First pokemon win ?\ntrain['First_win'] = train['First_pokemon'] == train['Winner']\ntrain['First_win'] = train['First_win'].astype('category').cat.codes","b63f9610":"train","82ce21fb":"train['diff_HP'] = train['HP_f'] - train['HP_s']\ntrain['diff_Attack'] = train['Attack_f'] - train['Attack_s']\ntrain['diff_Defense'] = train['Defense_f'] - train['Defense_s']\ntrain['diff_Sp. Atk'] = train['Sp. Atk_f'] - train['Sp. Atk_s']\ntrain['diff_Sp. Def'] = train['Sp. Def_f'] - train['Sp. Def_s']\ntrain['diff_Speed'] = train['Speed_f'] - train['Speed_s']\ntrain['diff_Total'] = train['Total_f'] - train['Total_s']","35b77086":"train = train[['First_pokemon', 'Second_pokemon', 'Type 1_f', 'Type 2_f', 'Type 1_s', 'Type 2_s',\n       'Legendary_f', 'Legendary_s', 'diff_HP', 'diff_Attack', 'diff_Defense',\n       'diff_Sp. Atk', 'diff_Sp. Def', 'diff_Speed', 'diff_Total', 'First_win']]","b8aed87d":"train","8895878e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","e3839033":"X = train.drop(\"First_win\", axis=1)\nY = train[\"First_win\"]","f8e251f4":"# Split 20% test, 80% train\n\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2, random_state=0)","72f018cb":"# Logistic Regression\n\nlog = LogisticRegression(max_iter=100)\nlog.fit(X_train, Y_train)\nY_pred_log = log.predict(X_val)\nacc_log = accuracy_score(Y_pred_log, Y_val)\nacc_log","6ed65634":"rf = RandomForestClassifier()\n\n# search the best params\ngrid = {'n_estimators':[100,200], 'max_depth': [10,20,50]}\n\nclf_rf = GridSearchCV(rf, grid, cv=10)\nclf_rf.fit(X_train, Y_train)\n\nY_pred_rf = clf_rf.predict(X_val)\n# get the accuracy score\nacc_rf = accuracy_score(Y_pred_rf, Y_val)\nprint(acc_rf)","3e2b96c5":"knn = KNeighborsClassifier()\n\n# values we want to test for n_neighbors\nparam_grid = {'n_neighbors': np.arange(1, 20)}\n\nclf_knn = GridSearchCV(knn, param_grid, cv=5)\n\n#fit model to data\nclf_knn.fit(X_train, Y_train)\n\nY_pred_knn = clf_knn.predict(X_val)\n# get the accuracy score\nacc_knn = accuracy_score(Y_pred_rf, Y_val)\nprint(acc_knn)","8ce81f2b":"# LGBM Classifier\n\nlgbm = LGBMClassifier(random_state=0)\nlgbm.fit(X_train, Y_train)\nY_pred_lgbm = lgbm.predict(X_val)\nacc_lgbm = accuracy_score(Y_pred_lgbm, Y_val)\nacc_lgbm","0a66d050":"clf_xgb = XGBClassifier(learning_rate=0.02, n_estimators=100, max_depth = 50)\n\nclf_xgb.fit(X_train, Y_train)\n\nY_pred_xgb = clf_xgb.predict(X_val)\n# get the accuracy score\nacc_xgb = accuracy_score(Y_pred_xgb, Y_val)\nprint(acc_xgb)","fe7bae7b":"# We will use the LGBM model","dc754830":"test = pd.merge(test, first, left_on='First_pokemon', right_on='#_f')\ntest = pd.merge(test, second, left_on='Second_pokemon', right_on='#_s')","59dfb659":"test['diff_HP'] = test['HP_f'] - test['HP_s']\ntest['diff_Attack'] = test['Attack_f'] - test['Attack_s']\ntest['diff_Defense'] = test['Defense_f'] - test['Defense_s']\ntest['diff_Sp. Atk'] = test['Sp. Atk_f'] - test['Sp. Atk_s']\ntest['diff_Sp. Def'] = test['Sp. Def_f'] - test['Sp. Def_s']\ntest['diff_Speed'] = test['Speed_f'] - test['Speed_s']\ntest['diff_Total'] = test['Total_f'] - test['Total_s']","605b28a2":"test = test[['First_pokemon', 'Second_pokemon', 'Type 1_f', 'Type 2_f', 'Type 1_s', 'Type 2_s',\n       'Legendary_f', 'Legendary_s', 'diff_HP', 'diff_Attack', 'diff_Defense',\n       'diff_Sp. Atk', 'diff_Sp. Def', 'diff_Speed', 'diff_Total']]","bb0fd828":"test","086160f1":"X = train.drop(\"First_win\", axis=1)\nY = train[\"First_win\"]","6654429b":"lgbm = LGBMClassifier(random_state=0)\nlgbm.fit(X, Y)\n\nY_test = lgbm.predict(test)","38a24048":"test = test[['First_pokemon', 'Second_pokemon']]\ntest['First_Win'] = Y_test","870bf614":"test.head(20)","ebfd68c0":"# With the names\nf = first[['#_f', 'Name_f']]\ns = second[['#_s', 'Name_s']]\n\ntest = pd.merge(test, f, left_on='First_pokemon', right_on='#_f')\ntest = pd.merge(test, s, left_on='Second_pokemon', right_on='#_s')","871db678":"test = test[['Name_f', 'Name_s', 'First_Win']]\ntest.columns = ['Name_First_Pokemon', 'Name_Second_Pokemon', 'First_Win']","ceb7360a":"test.head(50)","e56a214c":"### Types","34eba36a":"### Which is the better type ?","c622428a":"### Number of Pok\u00e9mon","9551e0ab":"# Combats","ae6b5916":"### Generations","12df9d85":"# Data Prediction","cc216855":"### Most frequent type per generation","b4c3216b":"### Legendary","231f5808":"### Most wins","1282ec22":"# Data Exploration","44f2a70e":"# Data Featuring","69f3dd0a":"### Weakest and best Pokemon"}}