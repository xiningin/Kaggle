{"cell_type":{"11d5d4d9":"code","5b8bda62":"code","1aa5e27e":"code","fc353362":"code","4add7632":"code","e0e53539":"code","f1ab9753":"code","912bbc51":"code","ffaf76c1":"code","a00f8283":"code","edf8997a":"code","3fdeae7e":"code","c8ceaa3a":"code","0382501a":"code","b13dc759":"code","912013c5":"code","61acd88f":"code","2b04b3a3":"code","33976400":"code","91a9f30d":"code","f71f07e4":"code","b873e952":"code","cdd92445":"code","7797447d":"code","77613878":"code","1b3c3cb5":"code","cf4d79bd":"code","5aed565b":"code","5e026ff4":"code","7315e087":"code","9f30acf3":"code","76da84c0":"code","6646e8a7":"code","0a8ad546":"code","0eb39a6c":"code","a10d739e":"code","7fa34200":"code","7d6efd76":"markdown","32f720d1":"markdown","ac98c7f1":"markdown","df0b743b":"markdown","48a877ed":"markdown","71f382b1":"markdown","97bced7f":"markdown"},"source":{"11d5d4d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/product-category-from-invoice\/Dataset\"))\n\n# Any results you write to the current directory are saved as output.","5b8bda62":"train=pd.read_csv('..\/input\/product-category-from-invoice\/Dataset\/Train.csv')\ntest=pd.read_csv('..\/input\/product-category-from-invoice\/Dataset\/Test.csv')","1aa5e27e":"train.shape","fc353362":"train.info()","4add7632":"test.shape","e0e53539":"test.info()","f1ab9753":"train.describe()","912bbc51":"train.head()","ffaf76c1":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\ntrain['Product_Category'].value_counts().plot.bar()\nplt.show()","a00f8283":"train['Product_Category'].value_counts()","edf8997a":"print(' # of unique classes ',train['Product_Category'].nunique())","3fdeae7e":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\ntrain['GL_Code'].value_counts().plot.bar()\nplt.show()","c8ceaa3a":"import seaborn as sns\nplt.figure(1)\nsns.distplot(train['Inv_Amt']);","0382501a":"from sklearn.preprocessing import LabelEncoder\nfor col in ['GL_Code', 'Vendor_Code']:\n    \n    le = LabelEncoder()\n    le.fit(list(train[col]) + list(test[col]))\n    train[col] = le.transform(train[col])\n    test[col] = le.transform(test[col])","b13dc759":"train.head()","912013c5":"# printing some random description\nsent_0 = train['Item_Description'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\n\nsent_1000 = train['Item_Description'].values[1000]\nprint(sent_1000)\nprint(\"=\"*50)","61acd88f":"stopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","2b04b3a3":"from tqdm import tqdm\nimport re\npreprocessed_text = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(train['Item_Description'].values):\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    \n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_text.append(sentance.strip())","33976400":"train['Item_Description_Preprocessed']=preprocessed_text\ntrain.drop('Item_Description',axis=1,inplace=True)","91a9f30d":"train.head()","f71f07e4":"import string\nimport nltk\nfrom nltk.corpus import stopwords \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold","b873e952":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\ntf_idf_vect.fit(preprocessed_text)\nprint(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\nprint('='*50)\n\nfinal_tf_idf = tf_idf_vect.transform(preprocessed_text)\nfinal_tf_idf_test = tf_idf_vect.transform(test['Item_Description'])\nprint(\"the type of count vectorizer \",type(final_tf_idf))\nprint(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])","cdd92445":"target = LabelEncoder()\ny_endoded = target.fit_transform(train['Product_Category'])","7797447d":"X_train, X_valid, y_train, y_valid = train_test_split(final_tf_idf,y_endoded, test_size=0.3, random_state=1)","77613878":"import xgboost as xgb\nparam = {}\n# use softmax multi-class classification\nparam['objective'] = 'multi:softprob'\nparam['eta'] = 0.1\nparam['max_depth'] = 6\nparam['silent'] = 1\nparam['nthread'] = 4\nparam['num_class'] = len(target.classes_)\nparam['eval_metric'] = ['mlogloss']\nparam['seed'] = 1\n\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndvalid = xgb.DMatrix(X_valid, label=y_valid)\n\nevallist = [(dtrain, 'train'), (dvalid, 'eval')]\n\nclf = xgb.train(param, dtrain, 100, evallist, verbose_eval=50)","1b3c3cb5":"y_pred_valid = clf.predict(dvalid)\n\nprint(\"Accuracy : \",accuracy_score(y_valid, np.argmax(y_pred_valid, axis=1)))","cf4d79bd":"dtest = xgb.DMatrix(final_tf_idf_test)\ny_test_pred = clf.predict(dtest)","5aed565b":"output = test[['Inv_Id']].copy()\noutput['Product_Category'] = target.inverse_transform(np.argmax(y_test_pred, axis=1))","5e026ff4":"output['Product_Category'].nunique()","7315e087":"num_splits = 5\nskf = StratifiedKFold(n_splits= num_splits, random_state=1, shuffle=True)","9f30acf3":"y_test_pred = np.zeros((test.shape[0], len(target.classes_)))\nprint(y_test_pred.shape)\ny_valid_scores = []\nX = train['Item_Description_Preprocessed']\nfold_cnt = 1\ndtest = xgb.DMatrix(final_tf_idf_test)\n\nfor train_index, test_index in skf.split(X, y_endoded):\n    print(\"\\nFOLD .... \",fold_cnt)\n    fold_cnt += 1\n    \n    X_train, X_valid = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_valid = y_endoded[train_index], y_endoded[test_index]\n    \n    X_train_bow = tf_idf_vect.transform(X_train)\n    X_valid_bow = tf_idf_vect.transform(X_valid)\n    \n    dtrain = xgb.DMatrix(X_train_bow, label=y_train)\n    dvalid = xgb.DMatrix(X_valid_bow, label=y_valid)\n\n    evallist = [(dtrain, 'train'), (dvalid, 'eval')]\n\n    clf = xgb.train(param, dtrain, 100, evallist, verbose_eval=50)\n    #Predict validation data\n    y_pred_valid = clf.predict(dvalid)\n    y_valid_scores.append(accuracy_score(y_valid, np.argmax(y_pred_valid, axis=1)))\n    \n    #Predict test data\n    y_pred = clf.predict(dtest)\n    \n    y_test_pred += y_pred","76da84c0":"print(\"Validation Scores :\", y_valid_scores)\nprint(\"Average Score: \",np.round(np.mean(y_valid_scores),3))","6646e8a7":"y_test_pred \/= num_splits","0a8ad546":"output['Product_Category'] = target.inverse_transform(np.argmax(y_test_pred, axis=1))","0eb39a6c":"output['Product_Category'].nunique()","a10d739e":"output.to_csv(\"submission.csv\", index=False)","7fa34200":"output.head()","7d6efd76":"### Loading Data","32f720d1":"### Performing Text processing","ac98c7f1":"### Task: Predict product category from given invoice details","df0b743b":"* As some class are highly populated over others so we will employ oversampling techniques to balance the dataset.","48a877ed":"### Encoding of Categorical features using Label encoder","71f382b1":"* Out of total 36 classes the model can able to predict 34 classes with an accuracy of 99.8%.","97bced7f":"* Out of total 36 classes the model can able to predict 34 classes with an accuracy of 99.8%."}}