{"cell_type":{"c13ca845":"code","84937ccc":"code","9f86be33":"code","14e31fc6":"code","5086e543":"code","08506d8d":"code","a97a58c3":"code","98b01003":"code","af5e513f":"code","6c83e84f":"code","1b4ab813":"code","435a6dde":"code","6cef2c14":"code","4fa9a3c0":"code","13646e9c":"code","b4b8e3bc":"code","cf017b43":"code","79687a95":"code","1b39eba3":"code","2d80a352":"code","203cde75":"code","f1599255":"code","62447403":"code","2411e4a4":"code","0335c823":"code","09b033d3":"code","65e80ad1":"code","b5367f4a":"code","c82426a2":"code","a01807d1":"code","31af7fdb":"code","2e5467cd":"code","29421dd2":"code","cb48c821":"code","7e6c2829":"code","c3ba75ed":"code","14178d9a":"code","05d50690":"code","6f52b682":"code","a24b3dc1":"code","a6968550":"code","141b6087":"code","dd220bcd":"markdown","538de425":"markdown","6e09f5b5":"markdown","9489034e":"markdown","5734f3ca":"markdown","6b24c9be":"markdown","92139178":"markdown","d067ad99":"markdown","d8af9877":"markdown","d9a2fbc2":"markdown","47836d3f":"markdown","a13faf19":"markdown","0159c696":"markdown","26d042fc":"markdown","69bd20d2":"markdown","fcaae6a0":"markdown","0847b819":"markdown","bed14e9b":"markdown","e05f59b3":"markdown","581afda7":"markdown","47640117":"markdown","e00b845c":"markdown","af731b2b":"markdown","b243f47c":"markdown","18405f4c":"markdown","4c0be86e":"markdown","38969bb0":"markdown","bcc0dbc6":"markdown","1172beaf":"markdown","aa5d9b14":"markdown","75e3c243":"markdown","1f59b05b":"markdown","e3911d3b":"markdown","434b6bc6":"markdown","120ab637":"markdown","23df6e09":"markdown","0cba0723":"markdown","c4cdab58":"markdown","3f222110":"markdown","fde83866":"markdown","4df6edf8":"markdown","9194846f":"markdown","b9b2c3ac":"markdown","6402753d":"markdown","4fef4ebe":"markdown","26f3b7a3":"markdown"},"source":{"c13ca845":"def sumAll(arr):\n    myMin = min(arr)\n    myMax = max(arr)\n    return (myMax**2 + myMax)\/2 - (myMin**2 - myMin)\/2","84937ccc":"sumAllCheck = [[1, 4], [4, 1], [5, 10], [10, 5]]\nfor check in sumAllCheck:\n    print(sumAll(check))","9f86be33":"def diffArray(arr1, arr2):\n    return list(set(arr1) ^ set(arr2))","14e31fc6":"symDiffCheck = [([1, 2, 3, 5], [1, 2, 3, 4, 5]),\n               ([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]),\n               ([\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]),\n               ([\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]),\n               ([1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]),\n               ([], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]),\n               ([1, \"calf\", 3, \"piglet\"], [7, \"filly\"])]\nfor check in symDiffCheck:\n    print(diffArray(check[0], check[1]))","5086e543":"def destroyer(arr, *remove):\n    return [x for x in arr if x not in remove]","08506d8d":"print(destroyer([1, 2, 3, 1, 2, 3], 2, 3))\nprint(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3))\nprint(destroyer([3, 5, 1, 2, 2], 2, 3, 5))\nprint(destroyer([2, 3,2, 3], 2, 3))\nprint(destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53))\nprint(destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"],\n               \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\"))","a97a58c3":"def filterFunc(myDict, sourceDict):\n    for key in sourceDict.keys():\n        if (key not in myDict) or (myDict[key] != sourceDict[key]):\n            return False\n    return True\ndef whatIsInAName(collection, source):\n    return [item for item in collection if filterFunc(item, source)]","98b01003":"nameCheck = [([{\"first\": \"Romeo\", \"last\": \"Montague\"}, {\"first\": \"Mercutio\", \"last\": None}, {\"first\": \"Tybalt\", \"last\": \"Capulet\"}], {\"last\": \"Capulet\"}),\n            ([{\"apple\": 1}, {\"apple\": 1, \"bat\": 2}, {\"apple\": 1}], {\"apple\": 1}),\n            ([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 }),\n            ([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 }),\n            ([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 }),\n            ([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})]\nfor check in nameCheck:\n    print(whatIsInAName(check[0], check[1]))","af5e513f":"import re\ndef spinalCase(s):\n    withSpaces = re.sub('([a-z])([A-Z])', \"\\g<1> \\g<2>\", s)\n    splitString = re.split(\"[^A-Za-z]\", withSpaces)\n    return \"-\".join(splitString).lower()","6c83e84f":"spinalCheck = [\"This Is Spinal Tap\", \"thisIsSpinalTap\", \"The_Andy_Griffith_Show\", \"Teletubbies say Eh-oh\", \"AllThe-small Things\"]\nfor check in spinalCheck:\n    print(spinalCase(check))","1b4ab813":"import re\ndef translatePigLatin(s):\n    cons_regex = \"^[^aeiou]+\"\n    vow_regex = \"[aeiou]\"\n    if (re.match(vow_regex, s) is not None):\n        return s + \"way\"\n    elif (re.search(vow_regex, s) is None):\n        return s + \"ay\"\n    else:\n        tail = re.match(cons_regex, s).group(0)\n        return s[len(tail):] + tail + \"ay\"","435a6dde":"pigLatinTest = [\"california\", \"paragraphs\", \"glove\", \"algorithm\", \"eight\", \"fly\", \"rhythm\", \"yolk\"]\nfor test in pigLatinTest:\n    print(test, translatePigLatin(test))","6cef2c14":"def myReplace(s, before, after):\n    if (before[0].isupper()):\n        cap_after = after[0].upper() + after[1:]\n        return s.replace(before, cap_after)\n    else:\n        return s.replace(before, after)","4fa9a3c0":"replaceCheck = [(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\"),\n               (\"Let us go to the store\", \"store\", \"mall\"),\n               (\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\"),\n               (\"This has a spellngi error\", \"spellngi\", \"spelling\"),\n               (\"His name is Tom\", \"Tom\", \"john\"),\n               (\"Let us get back to more Coding\", \"Coding\", \"algorithms\")]\nfor check in replaceCheck:\n    print(check[0])\n    print(myReplace(check[0], check[1], check[2]))","13646e9c":"def pairElements(bases):\n    pairDict = {\"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\"}\n    base_pairs = []\n    for base in bases:\n        base_pairs.append([base, pairDict[base]])\n    return base_pairs","b4b8e3bc":"basesCheck = [\"GCG\", \"ATCGA\", \"TTGAG\", \"CTCTA\"]\nfor check in basesCheck:\n    print(pairElements(check))","cf017b43":"import string\ndef fearNotLetter(letterRange):\n    ascii_lower = string.ascii_lowercase\n    comparison_range = ascii_lower[ascii_lower.find(letterRange[0]):]\n    for i in range(len(letterRange)):\n        if letterRange[i] != comparison_range[i]:\n            return comparison_range[i]\n    return None","79687a95":"missing_letter_check = [\"abce\", \"abcdefghjklmno\", \"stvwx\", \"bcdf\", \"abcdefghijklmnopqrstuvwxyz\"]\nfor check in missing_letter_check:\n    print(fearNotLetter(check))","1b39eba3":"def uniteUnique(*arrays):\n    arrays_union = []\n    for i in range(len(arrays)):\n        for j in range(len(arrays[i])):\n            if (arrays[i][j] not in arrays_union):\n                arrays_union.append(arrays[i][j])\n    return arrays_union","2d80a352":"print(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]))\nprint(uniteUnique([1, 3, 2], [1, [5]], [2, [4]]))\nprint(uniteUnique([1, 2, 3], [5, 2, 1]))\nprint(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]))","203cde75":"def convertHTML(string):\n    html_dict = {\"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&apos;\"}\n    for key in html_dict.keys():\n        string = string.replace(key, html_dict[key])\n    return string","f1599255":"convertHTML_check = [\"Dolce & Gabbana\", \"Hamburgers < Pizza < Tacos\", \"Sixty > twelve\", 'Stuff in \"quotation marks\"', \"Schindler's List\", \"<>\", \"abc\"]\nfor check in convertHTML_check:\n    print(check)\n    print(convertHTML(check))","62447403":"def sumFibs(num):\n    alpha = (1 + 5**0.5)\/2\n    beta = (1 - 5**0.5)\/2\n    fib_sum = 0\n    n = 1\n    fib_n = 0\n    while fib_n <= num:\n        if fib_n % 2 != 0:\n            fib_sum += fib_n\n        fib_n = round((alpha**n - beta**n)\/(alpha - beta))\n        n += 1\n    return fib_sum","2411e4a4":"fib_sum_check = [1, 1000, 4000000, 4, 75024, 75025]\nfor check in fib_sum_check:\n    print(sumFibs(check))","0335c823":"def sumPrimes(num):\n    primes = []\n    for i in range(2, num + 1):\n        divisibility_check = [(i\/x).is_integer() for x in primes]\n        if (True not in divisibility_check):\n            primes.append(i)\n    return sum(primes)","09b033d3":"print(sumPrimes(10))\nprint(sumPrimes(977))","65e80ad1":"# Use the Euclidean algorithm to compute the GCD\ndef gcd(a, b):\n    while b != 0:\n        t = b\n        b = a % b;\n        a = t\n    return a\n\ndef smallestCommons(arr):\n    arr_min = min(arr)\n    arr_max = max(arr)\n    test_range = [i for i in range(arr_min, arr_max + 1)]\n    # Set the initial value for lcm\n    # Use the formula lcm(a, b) = abs(a*b)\/gcd(a, b)\n    lcm = abs(test_range[0]*test_range[1])\/gcd(test_range[0], test_range[1])\n    # Now compute the lcm of the entire sequence\n    # Use the formula lcm(a, b, c) = lcm(lcm(a, b), c)\n    for i in range(2, len(test_range)):\n        lcm = abs(lcm*test_range[i])\/gcd(lcm, test_range[i])\n    return int(lcm)","b5367f4a":"lcm_check = [[1, 5], [5, 1], [2, 10], [1, 13], [23, 18]]\nfor check in lcm_check:\n    print(smallestCommons(check))","c82426a2":"def dropElements(arr, func):\n    startIndex = len(arr) + 1\n    for i in range(len(arr)):\n        if (func(arr[i]) and (i < startIndex)):\n            startIndex = i\n    return arr[startIndex:]","a01807d1":"print(dropElements([1, 2, 3, 4], lambda x: x >= 3))\nprint(dropElements([0, 1, 0, 1], lambda x: x == 1))\nprint(dropElements([1, 2, 3], lambda x: x > 0))\nprint(dropElements([1, 2, 3, 4], lambda x: x > 5))\nprint(dropElements([1, 2, 3, 7, 4], lambda x: x > 3))\nprint(dropElements([1, 2, 3, 9, 2], lambda x: x > 2))","31af7fdb":"def steamrollArray(arr):\n    flattened_array = []\n    # Loop through the elements of arr\n    for i in range(len(arr)):\n        if isinstance(arr[i], list):\n            # If the element being checked is itself an array, recurse\n            # Then concatenate the result to the flattened array\n            flattened_array += steamrollArray(arr[i])\n        else:\n            # Otherwise, append the element to the flattened array\n            flattened_array.append(arr[i])\n    return flattened_array","2e5467cd":"steamroll_check = [[[[\"a\"]], [[\"b\"]]], [1, [2], [3, [[4]]]], [1, [], [3, [[4]]]], [1, {}, [3, [[4]]]]]\nfor check in steamroll_check:\n    print(steamrollArray(check))","29421dd2":"def binaryAgent(binary_string):\n    # Split the binary string into individual numbers\n    binary_letters = binary_string.split()\n    # Process the binary letters\n    # First convert each letter from a string into a base-10 integer using int(x, 2)\n    # Then convert each number into it's corresponding character using\n    # the built-in function chr(i)\n    letters = [chr(int(x, 2)) for x in binary_letters]\n    # Rejoin the characters using the String.join() function\n    return \"\".join(letters)","cb48c821":"print(binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\"))\nprint(binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\"))","7e6c2829":"def truthCheck(collection, pre):\n    for item in collection:\n        if (bool(item.get(pre)) == False):\n            return False\n    return True","c3ba75ed":"print(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\", \"sex\": \"male\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"))\nprint(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\"}, {\"user\": \"Dipsy\"}, {\"user\": \"Laa-Laa\", \"sex\": \"female\"}, {\"user\": \"Po\", \"sex\": \"female\"}], \"sex\"))\nprint(truthCheck([{\"user\": \"Tinky-Winky\", \"sex\": \"male\", \"age\": 0}, {\"user\": \"Dipsy\", \"sex\": \"male\", \"age\": 3}, {\"user\": \"Laa-Laa\", \"sex\": \"female\", \"age\": 5}, {\"user\": \"Po\", \"sex\": \"female\", \"age\": 4}], \"age\"))\nprint(truthCheck([{\"name\": \"Pete\", \"onBoat\": True}, {\"name\": \"Repeat\", \"onBoat\": True}, {\"name\": \"FastFoward\", \"onBoat\": None}], \"onBoat\"))\nprint(truthCheck([{\"name\": \"Pete\", \"onBoat\": True}, {\"name\": \"Repeat\", \"onBoat\": True, \"alias\": \"Repete\"}, {\"name\": \"FastFoward\", \"onBoat\": True}], \"onBoat\"))\nprint(truthCheck([{\"single\": \"yes\"}], \"single\"))\nprint(truthCheck([{\"single\": \"\"}, {\"single\": \"double\"}], \"single\"))\nprint(truthCheck([{\"single\": \"double\"}, {\"single\": None}], \"single\"))\nprint(truthCheck([{\"single\": \"double\"}, {\"single\": 0.0}], \"single\"))","14178d9a":"def addTogether(*args):\n    check_numerical = [isinstance(x, int) or isinstance(x, float) for x in args]\n    if (not all(check_numerical)):\n        return None\n    if (len(args) == 2):\n        return args[0] + args[1]\n    if (len(args) == 1):\n        return lambda x: addTogether(x, args[0])","05d50690":"print(addTogether(2, 3))\nprint(addTogether(2)(3))\nprint(addTogether(\"http:\/\/bit.ly\/IqT6zt\"))\nprint(addTogether(2, \"3\"))\nprint(addTogether(2)([3]))","6f52b682":"class Person(object):\n    def __init__(self, firstAndLast):\n        \"\"\"Assumes firstAndLast is a full name for the person\"\"\"\n        self.name = firstAndLast.split()\n    def getFirstName(self):\n        return self.name[0]\n    def getLastName(self):\n        return self.name[1]\n    def getFullName(self):\n        return \" \".join(self.name)\n    def setFirstName(self, first):\n        self.name[0] = first\n    def setLastName(self, last):\n        self.name[1] = last\n    def setFullName(self, firstAndLast):\n        self.name = firstAndLast.split()","a24b3dc1":"bob = Person(\"Bob Ross\")\nprint(bob.getFirstName())\nprint(bob.getLastName())\nprint(bob.getFullName())\nbob.setFirstName(\"Haskell\")\nprint(bob.getFullName())\nbob.setLastName(\"Curry\")\nprint(bob.getFullName())\nbob.setFullName(\"Bobby Hill\")\nprint(bob.getFirstName())\nprint(bob.getLastName())","a6968550":"import math\ndef orbitalPeriod(arr):\n    GM = 398600.4418\n    earthRadius = 6367.4447\n    orbitalPeriods = []\n    for elt in arr:\n        elt_name = elt[\"name\"]\n        elt_alt = elt[\"avgAlt\"]\n        period = 2 * math.pi * math.sqrt((elt_alt + earthRadius)**3\/GM)\n        orbitalPeriods.append({\"name\": elt_name, \"orbitalPeriod\": round(period)})\n    return orbitalPeriods","141b6087":"print(orbitalPeriod([{\"name\": \"sputnik\", \"avgAlt\": 35873.5553}]))\nprint(orbitalPeriod([{\"name\": \"iss\", \"avgAlt\": 413.6}, {\"name\": \"hubble\", \"avgAlt\": 556.7}, {\"name\": \"moon\", \"avgAlt\": 378632.553}]))","dd220bcd":"## Wherefore art thou","538de425":"In this notebook, I will work through the intermediate algorithm scripting challenges from freeCodeCamp. On freeCodeCamp, the challenges are done in JavaScript, so to get some additional Python practice I will do them here in Python.","6e09f5b5":"Make a function that looks through an array of dictionaries (first argument) and returns an array of all dictionaries that have matching name and value pairs (second argument). Each name and value pair of the source dictionary has to be present in the dictionary from the collection if it is to be included in the returned array.","9489034e":"Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.","5734f3ca":"## Arguments optional","6b24c9be":"## Drop it","92139178":"This solution will use the closed-form formula of the Fibonacci sequence, which is given by $F_n = \\frac{\\alpha^n - \\beta^n}{\\alpha - \\beta}$, where $\\alpha$ and $\\beta$ are the roots of the polynomial $x^2 - x - 1$.","d067ad99":"## DNA pairing","d8af9877":"Translate the provide string into pig latin. Pig latin takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word, and suffixes an \"ay\". If a word begins with a vowel, you just add \"way\" to the end. Note that words such as \"rhythm\" should be translated to \"rhythmay\" (internal y's aren't counted as vowels).","d9a2fbc2":"## Sum all primes","47836d3f":"## Diff two arrays","a13faf19":"# Intermediate Algorithm Scripting","0159c696":"Fill the object constructor with the following methods: `getFirstName()`, `getLastName()`, `getFullName()`, `setFirstName(first)`, `setLastName(last)`, `setFullName(firstAndLast)`. The methods that take an argument must accept only one argument, and it has to be a string.","26d042fc":"Return an English translated sentence of the passed binary string. The binary string will be space separated.","69bd20d2":"## Search and replace","fcaae6a0":"## Sorted union","0847b819":"## Spinal Tap case","bed14e9b":"Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters. The range will be an array of two number that will not necesarily be in numerical order. For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly disible by all numbers *between* 1 and 3. The answer here would be 6.","e05f59b3":"You will be provided with an initial array (the first argument in the destroyer function), followed by one or more additional arguments. Remove all elements from the initial array that are of the same value as these arguments.","581afda7":"## Sum all numbers in a range","47640117":"## Missing letters","e00b845c":"## Convert HTML entities","af731b2b":"## Smallest common multiple","b243f47c":"Return a new array that transforms the elements' average altitude into their orbital periods (in seconds). The array will contain dictionaries in the format `{name: \"name\", avgAlt: avgAlt}`. The values should be rounded to the nearest whole number. The body being orbited is Earth. Use this formula for the period.\n$$\nT = 2 \\pi \\sqrt{\\frac{a^3}{\\mu}}\n$$\nHere, $T$ is the period in seconds, $a$ is the radius of the orbit, and $\\mu = GM$ is the standard gravitational parameter. More specifically, $a$ will be the sum of the average altitude and the radius of the earth (assuming a circular orbit), $G$ is the gravitational constant, and $M$ is the mass of the Earth.","18405f4c":"## Seek and destroy","4c0be86e":"Convert the characters `&`, `<`, `>`, `\"` (double quote), and `'` (apostrophe) in a string to their corresponding HTML entities.","38969bb0":"Check if the predicate (second argument) is *truthy* on all elements of a collection (first argument). In other words, you are given an arry of dictionaries. The predicate `pre` will be a key and you need to return true if the value of each dictionary at the given key is `truthy`. Otherwise return false. Recall that the following built-in object are considered false.\n- constants defined to be false: `None` and `False`\n- zero of any numeric type: `0`, `0.0`, `0j`, `Decimal(0)`, `Fraction(0, 1)`\n- empty sequences and collections: `''`, `()`, `[]`, `{}`, `set()`, `range(0)`","bcc0dbc6":"We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. Note that the lowest number will not always come first.","1172beaf":"Perform a search and replace on the sentence using the arguments provided and return the new sentence. The first argument is the sentence to perform the search and replace on. The second argument is the word that you will be replacing (before). The third argument is what you will be replacing the second argument with (after). Note that you should preserve the case of the first character in the original word when you are replacing it. For example, if you mean to replace the word \"Book\" with the word \"dog\", it should be replaced as \"Dog\".","aa5d9b14":"Given a positive integer `num`, return the sum of all odd Fibonacci numbers that are less than or equal to `num`. Recall that the first two numbers in the Fibonacci sequence are $F_1 = F_2 = 1$ and that for $n \\geq 3$ the sequence is defined as $F_n = F_{n - 1} + F_{n - 2}$.","75e3c243":"## Pig Latin","1f59b05b":"## Make a person","e3911d3b":"## Binary agents","434b6bc6":"Sum all the prime numbers up to and including the provided number. Recall that a prime number is defined as a number greater than 1 and having only two divisors, 1 and itself. For example, 2 is a prime number because it is only divisible by 1 and 2. Note that the number provided may not be a prime.","120ab637":"## Steamroller","23df6e09":"Find the missing letter in the passed letter range and return it. If all letters are present in the range, return `None`.","0cba0723":"## Map the debris","c4cdab58":"Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arays. In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array. The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.","3f222110":"## Everything be true","fde83866":"The DNA strand is missing the pairing element. Take each character, get its pair, and return the result as a 2D array. Recall that base pairs are a pair of AT and CG. Match the missing element to the provided character. Return the provided character as the first element in each array.","4df6edf8":"Given the array `arr`, iterate through and remove each element starting from the first element (index 0) until the function `func` returns `True` when the iterated element is passed through it. The return the rest of the array once the condition is satisfied. Otherwise, if the condition isn't satisfied for any element of `arr`, return an empty array.","9194846f":"Flatten a nested array. You must account for arbitrary levels of nesting.","b9b2c3ac":"## Sum all odd Fibonacci numbers","6402753d":"Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum. For example, `addTogether(2, 3)` should return `5`, and `addTogether(2)` should return a function. Calling this returned function with a single argument will then return the sum: `sumTwoAnd = addTogether(2)` then means `sumTwoAnd(3)` returns 5. If either argument isn't a valid number, return `None`.","4fef4ebe":"For the solution, we'll use some properties of [LCM](https:\/\/en.wikipedia.org\/wiki\/Least_common_multiple). Namely, we'll use the formula for LCM which utilizes the greatest common divisor. In order to efficiently compute the greatest common divisor, we'll use the [Euclidean algorithm](https:\/\/en.wikipedia.org\/wiki\/Euclidean_algorithm).","26f3b7a3":"Compare two arrays and return a new array with any items found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays."}}