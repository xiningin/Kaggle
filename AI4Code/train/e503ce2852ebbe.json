{"cell_type":{"1f1608a0":"code","79641253":"code","101f2ee3":"code","01fcd7c0":"code","a8601e11":"code","db980fbc":"code","290f657d":"code","81338772":"code","4bb033fa":"code","9cc68761":"code","08de11b9":"code","888555e8":"code","fa3d08ab":"code","4e4243dc":"code","e3eeb28d":"code","788c8136":"code","79a3fe29":"code","2ce5e893":"code","e3864fda":"code","f70dc4a1":"code","3d5b5543":"code","82dfc465":"code","4adc4e3a":"code","a1962c47":"code","7f6c8ed4":"code","c8436ffa":"code","95de2743":"code","e577b5d9":"code","dc116af0":"code","686d97d6":"code","46ca622b":"code","e58328b5":"code","840b4cd5":"code","690c9115":"code","10267913":"code","e8d2a7c5":"markdown","3f617933":"markdown","a4185ceb":"markdown","100a8c68":"markdown","17fa2aff":"markdown","80432927":"markdown","bb5cae54":"markdown","2af790bb":"markdown","04a752a0":"markdown","014c20f4":"markdown","d03efafc":"markdown","4e7c2f11":"markdown","bb65c29a":"markdown","a02f08d4":"markdown"},"source":{"1f1608a0":"import numpy as np \nimport pandas as pd \n\n# Data processing, metrics and modeling\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold,KFold\nfrom datetime import datetime\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, accuracy_score, roc_auc_score, f1_score, roc_curve, auc,precision_recall_curve\nfrom sklearn import metrics\nfrom sklearn import preprocessing\n\n# Suppr warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport itertools\nfrom scipy import interp\n# Plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import rcParams","79641253":"%%time\ntrain_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv', index_col='TransactionID')\ntrain_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv', index_col='TransactionID')\nsample_submission = pd.read_csv('..\/input\/ieee-fraud-detection\/sample_submission.csv', index_col='TransactionID')","101f2ee3":"# merge \ntrain_df = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest_df = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\n\nprint(\"Train shape : \"+str(train_df.shape))\nprint(\"Test shape  : \"+str(test_df.shape))","01fcd7c0":"train_df = train_df.drop([\"TransactionDT\"], axis = 1)\ntest_df = test_df.drop([\"TransactionDT\"], axis = 1)","a8601e11":"train_df = train_df.reset_index()\ntest_df = test_df.reset_index()","db980fbc":"train_df['nulls1'] = train_df.isna().sum(axis=1)\ntest_df['nulls1'] = test_df.isna().sum(axis=1)","290f657d":"train_df = train_df.iloc[:, :55]\ntest_df = test_df.iloc[:, :54]","81338772":"del train_transaction, train_identity, test_transaction, test_identity","4bb033fa":"emails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum', 'scranton.edu': 'other', 'optonline.net': 'other', 'hotmail.co.uk': 'microsoft', 'comcast.net': 'other', 'yahoo.com.mx': 'yahoo', 'yahoo.fr': 'yahoo', 'yahoo.es': 'yahoo', 'charter.net': 'spectrum', 'live.com': 'microsoft', 'aim.com': 'aol', 'hotmail.de': 'microsoft', 'centurylink.net': 'centurylink', 'gmail.com': 'google', 'me.com': 'apple', 'earthlink.net': 'other', 'gmx.de': 'other', 'web.de': 'other', 'cfl.rr.com': 'other', 'hotmail.com': 'microsoft', 'protonmail.com': 'other', 'hotmail.fr': 'microsoft', 'windstream.net': 'other', 'outlook.es': 'microsoft', 'yahoo.co.jp': 'yahoo', 'yahoo.de': 'yahoo', 'servicios-ta.com': 'other', 'netzero.net': 'other', 'suddenlink.net': 'other', 'roadrunner.com': 'other', 'sc.rr.com': 'other', 'live.fr': 'microsoft', 'verizon.net': 'yahoo', 'msn.com': 'microsoft', 'q.com': 'centurylink', 'prodigy.net.mx': 'att', 'frontier.com': 'yahoo', 'anonymous.com': 'other', 'rocketmail.com': 'yahoo', 'sbcglobal.net': 'att', 'frontiernet.net': 'yahoo', 'ymail.com': 'yahoo', 'outlook.com': 'microsoft', 'mail.com': 'other', 'bellsouth.net': 'other', 'embarqmail.com': 'centurylink', 'cableone.net': 'other', 'hotmail.es': 'microsoft', 'mac.com': 'apple', 'yahoo.co.uk': 'yahoo', 'netzero.com': 'other', 'yahoo.com': 'yahoo', 'live.com.mx': 'microsoft', 'ptd.net': 'other', 'cox.net': 'other', 'aol.com': 'aol', 'juno.com': 'other', 'icloud.com': 'apple'}\nus_emails = ['gmail', 'net', 'edu']\n\n#https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/100499#latest_df-579654\nfor c in ['P_emaildomain', 'R_emaildomain']:\n    train_df[c + '_bin'] = train_df[c].map(emails)\n    test_df[c + '_bin'] = test_df[c].map(emails)\n    \n    train_df[c + '_suffix'] = train_df[c].map(lambda x: str(x).split('.')[-1])\n    test_df[c + '_suffix'] = test_df[c].map(lambda x: str(x).split('.')[-1])\n    \n    train_df[c + '_suffix'] = train_df[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')\n    test_df[c + '_suffix'] = test_df[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')","9cc68761":"for c1, c2 in train_df.dtypes.reset_index().values:\n    if c2=='O':\n        train_df[c1] = train_df[c1].map(lambda x: str(x).lower())\n        test_df[c1] = test_df[c1].map(lambda x: str(x).lower())","08de11b9":"numerical = [\"TransactionAmt\", \"nulls1\", \"dist1\", \"dist2\"] + [\"C\" + str(i) for i in range(1, 15)] + \\\n            [\"D\" + str(i) for i in range(1, 16)] + \\\n            [\"V\" + str(i) for i in range(1, 340)]\ncategorical = [\"ProductCD\", \"card1\", \"card2\", \"card3\", \"card4\", \"card5\", \"card6\", \"addr1\", \"addr2\",\n               \"P_emaildomain_bin\", \"P_emaildomain_suffix\", \"R_emaildomain_bin\", \"R_emaildomain_suffix\",\n               \"P_emaildomain\", \"R_emaildomain\",\n              \"DeviceInfo\", \"DeviceType\"] + [\"id_0\" + str(i) for i in range(1, 10)] +\\\n                [\"id_\" + str(i) for i in range(10, 39)] + \\\n                 [\"M\" + str(i) for i in range(1, 10)]\n","888555e8":"numerical = [col for col in numerical if col in train_df.columns]\ncategorical = [col for col in categorical if col in train_df.columns]","fa3d08ab":"def nan2mean(df):\n    for x in list(df.columns.values):\n        if x in numerical:\n            #print(\"___________________\"+x)\n            #print(df[x].isna().sum())\n            df[x] = df[x].fillna(0)\n           #print(\"Mean-\"+str(df[x].mean()))\n    return df\ntrain_df=nan2mean(train_df)\ntest_df=nan2mean(test_df)","4e4243dc":"# Label Encoding\ncategory_counts = {}\nfor f in categorical:\n    train_df[f] = train_df[f].replace(\"nan\", \"other\")\n    train_df[f] = train_df[f].replace(np.nan, \"other\")\n    test_df[f] = test_df[f].replace(\"nan\", \"other\")\n    test_df[f] = test_df[f].replace(np.nan, \"other\")\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_df[f].values) + list(test_df[f].values))\n    train_df[f] = lbl.transform(list(train_df[f].values))\n    test_df[f] = lbl.transform(list(test_df[f].values))\n    category_counts[f] = len(list(lbl.classes_)) + 1\n# train_df = train_df.reset_index()\n# test_df = test_df.reset_index()","e3eeb28d":"from sklearn.preprocessing import StandardScaler","788c8136":"for column in numerical:\n    scaler = StandardScaler()\n    if train_df[column].max() > 100 and train_df[column].min() >= 0:\n        train_df[column] = np.log1p(train_df[column])\n        test_df[column] = np.log1p(test_df[column])\n    scaler.fit(np.concatenate([train_df[column].values.reshape(-1,1), test_df[column].values.reshape(-1,1)]))\n    train_df[column] = scaler.transform(train_df[column].values.reshape(-1,1))\n    test_df[column] = scaler.transform(test_df[column].values.reshape(-1,1))","79a3fe29":"target = 'isFraud'","2ce5e893":"#cut tr and val\ntr_df, val_df = train_test_split(train_df, test_size = 0.2, random_state = 42, shuffle = False)","e3864fda":"def get_input_features(df):\n    X = {'numerical':np.array(df[numerical])}\n    for cat in categorical:\n        X[cat] = np.array(df[cat])\n    return X","f70dc4a1":"category_counts","3d5b5543":"from keras.layers import Concatenate, Input, Dense, Embedding, Flatten, Dropout, BatchNormalization, SpatialDropout1D\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import Model\nfrom keras.optimizers import  Adam\nimport keras.backend as k\ndef make_model():\n    k.clear_session()\n\n    categorical_inputs = []\n    for cat in categorical:\n        categorical_inputs.append(Input(shape=[1], name=cat))\n    \n    categorical_embeddings = []\n    for i, cat in enumerate(categorical):\n        categorical_embeddings.append(\n            Embedding(category_counts[cat], int(np.log1p(category_counts[cat]) + 1), name = cat + \"_embed\")(categorical_inputs[i]))\n    \n    categorical_logits = Concatenate(name = \"categorical_conc\")([Flatten()(SpatialDropout1D(.1)(cat_emb)) \n                                                                 for cat_emb in categorical_embeddings])\n\n    numerical_inputs = Input(shape=[tr_df[numerical].shape[1]], name = 'numerical')\n    numerical_logits = Dropout(.1)(numerical_inputs)\n  \n\n    x = Concatenate()([\n        categorical_logits, \n        numerical_logits,\n    ])\n\n    x = Dense(200, activation = 'relu')(x)\n    x = Dropout(.2)(x)\n    x = Dense(100, activation = 'relu')(x)\n    x = Dropout(.2)(x)\n    out = Dense(1, activation = 'sigmoid')(x)\n    \n\n    model = Model(inputs=categorical_inputs + [numerical_inputs],outputs=out)\n    loss = \"binary_crossentropy\"\n    model.compile(optimizer=Adam(lr = 0.01), loss = loss)\n    return model\n","82dfc465":"from sklearn.metrics import roc_auc_score\nfrom copy import deepcopy","4adc4e3a":"categorical_save = deepcopy(categorical)\nnumerical_save = deepcopy(numerical)","a1962c47":"X_train = get_input_features(tr_df)\nX_valid = get_input_features(val_df)\nX_test = get_input_features(test_df)\ny_train = tr_df[target]\ny_valid = val_df[target]\nmodel = make_model()\nbest_score = 0\npatience = 0\nfor i in range(100):\n    if patience < 3:\n        hist = model.fit(X_train, y_train, validation_data = (X_valid,y_valid), batch_size = 8000, epochs = 1, verbose = 1)\n        valid_preds = model.predict(X_valid, batch_size = 8000, verbose = True)\n        score = roc_auc_score(y_valid, valid_preds)\n        print(score)\n        print()\n        if score > best_score:\n            model.save_weights(\"model.h5\")\n            best_score = score\n            patience = 0\n        else:\n            patience += 1","7f6c8ed4":"drop_cats = []","c8436ffa":"for category_test in categorical_save:\n    categorical = [cat for cat in categorical_save if cat not in drop_cats]\n    categorical.remove(category_test)\n    print(categorical)\n    X_train = get_input_features(tr_df)\n    X_valid = get_input_features(val_df)\n    X_test = get_input_features(test_df)\n    y_train = tr_df[target]\n    y_valid = val_df[target]\n    model = make_model()\n    local_score = 0\n    patience = 0\n    for i in range(100):\n        if patience < 3:\n            hist = model.fit(X_train, y_train, validation_data = (X_valid,y_valid), batch_size = 8000, epochs = 1, verbose = 0)\n            valid_preds = model.predict(X_valid, batch_size = 8000, verbose = False)\n            score = roc_auc_score(y_valid, valid_preds)\n            if score > local_score:\n                model.save_weights(\"model.h5\")\n                local_score = score\n                patience = 0\n            else:\n                patience += 1\n        else:\n            if local_score < best_score:\n                print(\"performance reduced when\", category_test, \"dropped to\", local_score, \"from\", best_score)\n                print()\n                break\n            else:\n                drop_cats.append(category_test)\n                print(\"performance increased when\", category_test, \"dropped to\", local_score, \"from\", best_score)\n                print()\n                best_score = local_score\n                model.save_weights(\"best_model.h5\")\n                break","95de2743":"drop_cats","e577b5d9":"categorical = [cat for cat in categorical_save if cat not in drop_cats]","dc116af0":"drop_nums = []","686d97d6":"for numerical_test in numerical_save:\n    numerical = [num for num in numerical_save if num not in drop_nums]\n    numerical.remove(numerical_test)\n    print(numerical)\n    X_train = get_input_features(tr_df)\n    X_valid = get_input_features(val_df)\n    X_test = get_input_features(test_df)\n    y_train = tr_df[target]\n    y_valid = val_df[target]\n    model = make_model()\n    local_score = 0\n    patience = 0\n    for i in range(100):\n        if patience < 4:\n            hist = model.fit(X_train, y_train, validation_data = (X_valid,y_valid), batch_size = 8000, epochs = 1, verbose = 0)\n            valid_preds = model.predict(X_valid, batch_size = 8000, verbose = False)\n            score = roc_auc_score(y_valid, valid_preds)\n            if score > local_score:\n                model.save_weights(\"model.h5\")\n                local_score = score\n                patience = 0\n            else:\n                patience += 1\n        else:\n            if local_score < best_score:\n                print(\"performance reduced when\", numerical_test, \"dropped to\", local_score, \"from\", best_score)\n                print()\n                break\n            else:\n                drop_nums.append(numerical_test)\n                print(\"performance increased when\", numerical_test, \"dropped to\", local_score, \"from\", best_score)\n                print()\n                best_score = local_score\n                model.save_weights(\"best_model.h5\")\n                break","46ca622b":"print(drop_nums)","e58328b5":"numerical = [num for num in numerical_save if num not in drop_nums]","840b4cd5":"model = make_model()","690c9115":"model.load_weights(\"best_model.h5\")","10267913":"X_valid = get_input_features(val_df)\nX_test = get_input_features(test_df)\nvalid_preds = model.predict(X_valid, batch_size = 500, verbose = True)\nscore = roc_auc_score(y_valid, valid_preds)\nprint(score)","e8d2a7c5":"Grabbing the features we want to pass into the neural network","3f617933":"## Neural Network Model Details\n\nOur neural network will be fairly standard. We will use the embedding layer for categoricals and the numericals will go through feed forward dense layers. \n\nWe create our embedding layers such that we have as many rows as we had categories and the dimension of the embedding is the log1p + 1 of the number of categories. So this means that categorical variables with very high cardinality will have more dimensions but not signficantly more so the information will still be compressed down to only about 13 dimensions and the smaller number of categories will be only 2-3.\n\nWe will then pass the embeddings through a spatial dropout layer which will drop dimensions within the embedding across batches and then flatten and concatenate. Then we will concatenate this to the numerical features and then add some more dense layers after. ","a4185ceb":"## Numerical and Categorical\nListing off and categorizing the various variables available to us. We have numerical and categoricals. We will treat both of these slightly differently later","100a8c68":"## Numerical Scaling\n\nNow we will do some scaling of the data so that it will be in a more NN friendly format. First we will do log1p for any values that are above 100 and not below 0. This is in order to scale down any numerical variables that might have some extremely high values that might affect the statistics of the standard scaler \n\nAfter that we will pass them through the standard scaler so that the values have a normal mean and std. This makes the NN converge signficantly faster. ","17fa2aff":"## Data Loading\nJust the standard loading of the data used in most other kernels. ","80432927":"## Final Testing\nNow we will use the roc_auc_score to check the scores respectively","bb5cae54":"Dropping numeric","2af790bb":"Selecting just the first set of columns and excluding the synthetic \"v\" features and other very sparse categoricals like deviceinfo and deviceid","04a752a0":"We will iterate through epochs of the model and save the model weights if the score is an improvement upon previous best roc_auc_scores since this is competition metric. If the NN does not improve upon previous best after 4 epochs we will skip the rest of the training steps to save time. ","014c20f4":"Dropping categoricals","d03efafc":"Dropping time since this likely isnt something we want our model to directly learn from","4e7c2f11":"Finding out all Categorical Features and converting them into lower case respectively","bb65c29a":"## Greedy Feature Selection\n\nFirst we will train the NN with all categorical and numerical features in order to make a baseline.\n\nAfter that we will greedily drop one feature at a time and see if it increases or decreases performance. If it increases upon dropping the feature then we will drop the feature. If it decreases then it will stay. ","a02f08d4":"## Label Encoding\nWe will take our categorical features fill the nans and assign them an integer ID per category and write down the number of total categories per column. We'll use this later in an embedding layer of the NN"}}