{"cell_type":{"3d763f61":"code","8f108a82":"code","ce8b7523":"code","3f0edc45":"code","ce9341a2":"code","ceee229f":"code","0f36d033":"code","f2780265":"code","5a702018":"code","cd5fcabe":"code","d4ff0755":"code","496e601b":"code","97feaea6":"markdown","38a44537":"markdown","fe5d59c1":"markdown","c4a04fb6":"markdown","f4bd8dcb":"markdown","3f0e1af8":"markdown"},"source":{"3d763f61":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf","8f108a82":"train_dir = '..\/input\/lyme-disease-rashes\/RashData\/Train\/Train_2_Cases'\nval_dir = '..\/input\/lyme-disease-rashes\/RashData\/Validation\/Validation_2_Cases'","ce8b7523":"batch_size = 32\n\nimg_height = 128\nimg_width = 128","3f0edc45":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    train_dir,\n    validation_split=0.2,\n    seed=42,\n    subset='training',\n    batch_size=batch_size,\n    image_size=(img_height, img_width)\n)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    train_dir,\n    validation_split=0.2,\n    seed=42,\n    subset='validation',\n    batch_size=batch_size,\n    image_size=(img_height, img_width)\n)\n\ntest_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    val_dir,\n    batch_size=batch_size,\n    image_size=(img_height, img_width)\n)","ce9341a2":"class_names = train_ds.class_names\nprint(class_names)","ceee229f":"plt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype('uint8'))\n        plt.title(class_names[labels[i]])\n        plt.axis('off')\n    plt.show()","0f36d033":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n\ntrain_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)\ntest_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)","f2780265":"inputs = tf.keras.Input(shape=(img_height, img_width, 3))\nx = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255)(inputs)\nx = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D()(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D()(x)\nx = tf.keras.layers.BatchNormalization()(x)\nx = tf.keras.layers.Flatten()(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\n\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nepochs = 45\n\nhistory = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()],\n    verbose=0\n)","5a702018":"plt.figure(figsize=(20, 10))\n\nepochs_range = range(1, epochs + 1)\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\ntrain_auc = history.history['auc']\nval_auc = history.history['val_auc']\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, train_loss, label=\"Training Loss\")\nplt.plot(epochs_range, val_loss, label=\"Validation Loss\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training and Validation Loss\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, train_auc, label=\"Training AUC\", color='b')\nplt.plot(epochs_range, val_auc, label=\"Validation AUC\", color='r')\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"AUC\")\nplt.title(\"Training and Validation AUC\")\nplt.legend()\n\nplt.show()","cd5fcabe":"np.argmin(val_loss)","d4ff0755":"np.argmax(val_auc)","496e601b":"model.evaluate(test_ds)","97feaea6":"# Modeling","38a44537":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/MEbLvoXXnac","fe5d59c1":"# Results","c4a04fb6":"# Task for Today  \n\n***\n\n## Lyme Disease Image Recognition  \n\nGiven *images of various rashes*, let's try to predict if a given rash is a **symptom of Lyme disease**.  \n  \nWe will use a TensorFlow CNN to make our predictions.","f4bd8dcb":"# Getting Started","3f0e1af8":"# Visualization"}}