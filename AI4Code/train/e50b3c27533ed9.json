{"cell_type":{"73e67caa":"code","819f6b52":"code","95c571ae":"code","57bf6dec":"code","c528f59f":"code","1b5448c4":"code","957403c4":"code","b5d99671":"code","c0757174":"code","d3470b76":"code","93aa03e7":"code","143d671c":"code","446c9b4c":"code","23f47662":"code","705aa1f0":"code","c8235dab":"code","c1f54c45":"code","8a9571f9":"code","36aa86e5":"code","55f9a278":"code","d91e341f":"code","71f95075":"code","3df65b0a":"code","dbe39934":"code","44f78bf1":"code","68010916":"code","8af5b0a1":"code","bbc4d4ea":"code","5e588176":"code","02b6168b":"code","f44b88ff":"markdown","c67efd93":"markdown","c469ae00":"markdown","de8d4485":"markdown","54d4a4e9":"markdown","43a4a45e":"markdown","5374240d":"markdown","9c2bb40f":"markdown"},"source":{"73e67caa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","819f6b52":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","95c571ae":"df = pd.read_csv('..\/input\/winequalityred\/winequality-red.csv')","57bf6dec":"df.head()","c528f59f":"df.info() # There is no null values in the dataset.","1b5448c4":"# Grouping quality into high and low\ndf['quality'] = pd.cut(df['quality'], bins = (2,5,8), labels = ['low', 'high'])\ndf['quality'].unique()","957403c4":"from sklearn.preprocessing import LabelEncoder, StandardScaler","b5d99671":"lab_enc = LabelEncoder()","c0757174":"df['quality'] = lab_enc.fit_transform(df['quality'])\ndf.head(10)","d3470b76":"df['quality'].value_counts() \n# 1 denotes low and 0 denoteds high quality of wine.","93aa03e7":"# Statistical Description\ndf.describe()","143d671c":"# Plotting A Countplot Of Quality Of Data\nplt.style.use('dark_background')\nsns.countplot(df['quality'], color = 'cyan', edgecolor = 'gray')\nplt.tight_layout()\nplt.xlabel('Quality')\nplt.ylabel('Counts')\nplt.title('Counts Of Wine Quality')\nplt.show()","446c9b4c":"plt.style.use('ggplot')\nplt.hist(df['alcohol'], color = 'maroon', edgecolor = 'pink')\nplt.title('Distribution Of Alcohol')\nplt.xlabel('Alcohol')\nplt.tight_layout()\nplt.show()\n# Histogram shows that there very less numbers of wine consisting \n# generous amount of alcohol. ","23f47662":"# Using train_test_split method for splitting dataset into \n# train and test data. \nfrom sklearn.model_selection import train_test_split","705aa1f0":"X = df.drop('quality', axis = 1) \n# All the variables are selected as independent variable except quality\nY = df['quality'] # Quality variable is target variable.","c8235dab":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.4, random_state = 52)\n# Splitting dataset into 60% training set and 40% testing set with\n# random state of 52.","c1f54c45":"# Using standard scaling to get optimized result\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.fit_transform(X_test)","8a9571f9":"# Random forest , Neural Network and SVM are tested. First, SVM...\nfrom sklearn.svm import SVC","36aa86e5":"svm_clsf = SVC()","55f9a278":"svm_clsf.fit(X_train, Y_train)\nsvm_pred = svm_clsf.predict(X_test)","d91e341f":"# Using confusion matrix and classification report for \n# checking the performance of the model.\nfrom sklearn.metrics import confusion_matrix , classification_report","71f95075":"print(classification_report(svm_pred, Y_test))\nprint(confusion_matrix(svm_pred, Y_test))","3df65b0a":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier","dbe39934":"rfcs = RandomForestClassifier(n_estimators = 200)","44f78bf1":"rfcs.fit(X_train, Y_train)\nrfcs_pred = rfcs.predict(X_test)","68010916":"print(classification_report(rfcs_pred, Y_test))\nprint(confusion_matrix(rfcs_pred, Y_test))","8af5b0a1":"# Neural Network\nfrom sklearn.neural_network import MLPClassifier","bbc4d4ea":"mlpc = MLPClassifier(hidden_layer_sizes = (11,11,11), max_iter = 500)","5e588176":"mlpc.fit(X_train, Y_train)\nmlpc_pred = mlpc.predict(X_test)","02b6168b":"print(classification_report(mlpc_pred, Y_test))\nprint(confusion_matrix(mlpc_pred, Y_test))","f44b88ff":"Neural network is the least accurate algorithm in this dataset\nBecause of less accuracy and more number of wrong labeled values.","c67efd93":"# Feature Selection","c469ae00":"Accuracy of SVM algorithm on this dataset is little bit low\nAnd number of wrong labeled values are also high. ","de8d4485":"# Exploratory Data Analysis","54d4a4e9":"# Importing Libraries","43a4a45e":"# Data Preprocessing","5374240d":"# Machine Learning","9c2bb40f":"Performance of random forest algorith is quite better than SVM\nAnd number of wrong labeled values are less than SVM."}}