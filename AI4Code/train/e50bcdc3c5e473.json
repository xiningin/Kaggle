{"cell_type":{"a64bfe96":"code","8b50b005":"code","3808309e":"code","8e5f3140":"code","a1656f8f":"code","af908536":"code","8541468f":"code","733d72c7":"code","7c24c883":"code","63aadbab":"code","0ad56f90":"code","cba50f57":"code","a0001fa6":"code","2df4c6a0":"code","a08973b0":"code","a3e96503":"code","f9b291c5":"code","456839a8":"code","1c4a8271":"code","7e0c5cdb":"code","afed40b6":"code","c1845e3d":"code","bc38e29d":"code","64dba3d5":"code","a307de88":"code","bc5692c6":"code","15578df6":"markdown","7e906e37":"markdown","d3f3c6a3":"markdown","4e24ba88":"markdown","bc211ab2":"markdown","83b13dc3":"markdown"},"source":{"a64bfe96":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nfrom sklearn import tree","8b50b005":"df = pd.read_csv('..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv')","3808309e":"df.head()","8e5f3140":"df.tail()","a1656f8f":"df.count()","af908536":"print(df.size)\nprint(df.shape)\nprint(df.columns)","8541468f":"df['label'].unique()","733d72c7":"df.dtypes","7c24c883":"df['label'].value_counts()","63aadbab":"sns.heatmap(df.corr(),annot=True)","0ad56f90":"features = df[['N','P','K','temperature','humidity','ph','rainfall']]\ntarget = df['label']\nlabels = df['label']","cba50f57":"acc = []\nmodel = []","a0001fa6":"from sklearn.model_selection import train_test_split\nXtrain, Xtest, Ytrain, Ytest = train_test_split(features,target,test_size=0.2,\n                                               random_state=2)","2df4c6a0":"from sklearn.tree import DecisionTreeClassifier\nDecisionTree = DecisionTreeClassifier(criterion='entropy',random_state=2,max_depth=5)\nDecisionTree.fit(Xtrain,Ytrain)\npredicted_values = DecisionTree.predict(Xtest)\nx = metrics.accuracy_score(Ytest, predicted_values)\nacc.append(x)\nmodel.append('Decision Tree')\nprint(\"DecisionTrees's Accuracy is: \", x*100)\n\nprint(classification_report(Ytest,predicted_values))","a08973b0":"from sklearn.model_selection import cross_val_score","a3e96503":"# Cross validation score (Decision Tree)\nscore = cross_val_score(DecisionTree, features, target,cv=5)","f9b291c5":"score","456839a8":"import pickle\nDT_pkl_filename = 'DecisionTree.pkl'\nDT_Model_pkl = open(DT_pkl_filename, 'wb')\npickle.dump(DecisionTree, DT_Model_pkl)\n# Close the pickle instances\nDT_Model_pkl.close()","1c4a8271":"from sklearn.naive_bayes import GaussianNB\n\nNaiveBayes = GaussianNB()\n\nNaiveBayes.fit(Xtrain,Ytrain)\n\npredicted_values = NaiveBayes.predict(Xtest)\nx = metrics.accuracy_score(Ytest, predicted_values)\nacc.append(x)\nmodel.append('Naive Bayes')\nprint(\"Naive Bayes's Accuracy is: \", x)\n\nprint(classification_report(Ytest,predicted_values))","7e0c5cdb":"# Cross validation score (NaiveBayes)\nscore = cross_val_score(NaiveBayes,features,target,cv=5)\nscore","afed40b6":"import pickle\n# Dump the trained Naive Bayes classifier with Pickle\nNB_pkl_filename = 'NBClassifier.pkl'\n# Open the file to save as pkl file\nNB_Model_pkl = open(NB_pkl_filename, 'wb')\npickle.dump(NaiveBayes, NB_Model_pkl)\n# Close the pickle instances\nNB_Model_pkl.close()","c1845e3d":"from sklearn.svm import SVC\n\nSVM = SVC(gamma='auto')\n\nSVM.fit(Xtrain,Ytrain)\n\npredicted_values = SVM.predict(Xtest)\n\nx = metrics.accuracy_score(Ytest, predicted_values)\nacc.append(x)\nmodel.append('SVM')\nprint(\"SVM's Accuracy is: \", x)\n\nprint(classification_report(Ytest,predicted_values))","bc38e29d":"# Cross validation score (SVM)\nscore = cross_val_score(SVM,features,target,cv=5)\nscore","64dba3d5":"from sklearn.ensemble import RandomForestClassifier\n\nRF = RandomForestClassifier(n_estimators=20, random_state=0)\nRF.fit(Xtrain,Ytrain)\n\npredicted_values = RF.predict(Xtest)\n\nx = metrics.accuracy_score(Ytest, predicted_values)\nacc.append(x)\nmodel.append('RF')\nprint(\"RF's Accuracy is: \", x)\n\nprint(classification_report(Ytest,predicted_values))","a307de88":"plt.figure(figsize=[10,5],dpi = 100)\nplt.title('Accuracy Comparison')\nplt.xlabel('Accuracy')\nplt.ylabel('Algorithm')\nsns.barplot(x = acc,y = model,palette='dark')","bc5692c6":"data = np.array([[104,18, 30, 23.603016, 60.3, 6.7, 140.91]])\nprediction = RF.predict(data)\nprint(prediction)","15578df6":"# SVM","7e906e37":"# Navie Bayes","d3f3c6a3":"# Random Forrest","4e24ba88":"# CROP PREDICTION","bc211ab2":"# Decision Tree","83b13dc3":"# Prediction"}}