{"cell_type":{"7cee68f5":"code","254642c7":"code","cc2a39cd":"code","840c3744":"code","4b2e20f3":"code","a9b5df97":"code","113dfe76":"code","050a2d88":"code","7be6f50f":"code","3f798564":"code","97f10123":"code","790d022b":"markdown","45b919a5":"markdown","5106bb04":"markdown","19790b39":"markdown","4b567d61":"markdown","3d1b0352":"markdown","e2b2e13a":"markdown","bbbef9c3":"markdown","2c3fd094":"markdown","afea2982":"markdown"},"source":{"7cee68f5":"# install from file; ignore the message regarding autogloun-core since that is not used \n!pip install ..\/input\/scikitlearn024\/scikit_learn-0.24.0-cp37-cp37m-manylinux2010_x86_64.whl > \/dev\/null","254642c7":"# success check (should say 0.24)\n!pip freeze | grep scikit-learn","cc2a39cd":"import pandas as pd\n\ntrain_data = pd.read_csv(\"\/kaggle\/input\/jane-street-market-prediction\/train.csv\", index_col='ts_id')","840c3744":"import numpy as np\n\ntrain_data = train_data[train_data[\"weight\"] > 0]\ntrain_data.reset_index(drop=True, inplace=True)\ntrain_data.set_index('ts_id')\n\ntrain_data = train_data.astype({col: np.float32 for col in train_data.select_dtypes('float64').columns})\ntrain_data = train_data.astype({col: np.int32 for col in train_data.select_dtypes('int64').columns})","4b2e20f3":"# the target variable is the action (1 to make the trading operation and 0 to skip it);\n# in training, the operation is considered positive if it has positive return (the future time horizons are not used in evaluation metric)\ntrain_data['action'] = (train_data['resp'] > 0.0001).astype('int')\n\n# the only target variable is the action: this is a binary classification problem\nfull_y_train = train_data['action']\n\n# the predictor variables are the feature columns\nx_cols = ['feature_' + str(i) for i in range(0, 130)]\nfull_x_train = train_data[x_cols]\n\n# date series to be used in splitting\ndate_series = train_data['date']","a9b5df97":"min_date = date_series.min()\nmax_date = date_series.max()\n\ndates = list(range(min_date, max_date + 1))\nprint(dates)","113dfe76":"from sklearn.model_selection import TimeSeriesSplit\n\nsplit_num = 5\ndate_gap_num = 1\n\nsplitter = TimeSeriesSplit(n_splits=split_num, gap=date_gap_num)\ndate_splits = list(splitter.split(dates))\nfor i, (train_dates, valid_dates) in enumerate(date_splits):\n    print(\"Date split #{}\\n train: {}\\nvalid: {}\\n\\n\".format(i, train_dates, valid_dates))","050a2d88":"def get_indices_from_dates(dates):\n    return [ i - 1 for i in date_series[date_series.isin(dates)].index]","7be6f50f":"split_indices = list()\nfor train_dates, valid_dates in date_splits:\n    train_indices = get_indices_from_dates(train_dates)\n    valid_indices = get_indices_from_dates(valid_dates)\n    split_indices.append((train_indices, valid_indices))","3f798564":"from xgboost import XGBClassifier\n\n# Replace with your model here, this is just a non-optimized example, with few estimators for fast run-time\nmodel = XGBClassifier(tree_method='gpu_hist', n_estimators=10)","97f10123":"from sklearn.model_selection import cross_val_score\n\ncv_scores = cross_val_score(model, full_x_train.values, full_y_train, cv=split_indices, scoring='f1')\nprint(\"Scores:\", cv_scores, \"\\tmean score:\", np.mean(cv_scores))","790d022b":"# Jane Street Market Prediction","45b919a5":"## Features and target definition\n\nSet which are the predictors (x) and the variable to predict (y).","5106bb04":"## Time Series Splitting\n\nThe data in the competition is a time series, so to avoid potential information leakage a splitting technique where validation data is always temporarily later than training data.","19790b39":"## Scikit-learn 0.24 install\n\nRequired for TimeSeriesSplit with the gap parameter. For more details on getting the install file, check [this notebook](https:\/\/www.kaggle.com\/heylav\/time-series-split-with-gap-using-just-sklearn).","4b567d61":"## Data filtering\n\n* Operations with non-positive weight are irrelevant for scoring, so ignored.\n\n* For RAM saving, numeric (int or float) data is made to use 32 bits instead of 64. ","3d1b0352":"## Data loading\n\nRead the training data.","e2b2e13a":"## Cross validation\n\nUse the splits to run cross validation using a classification model.","bbbef9c3":"Find the date range: dates will be the splitting unit, to avoid having operations of the same day in multiple splits (which could happen if we splitted at operation level instead).","2c3fd094":"Perform the date-level splitting.","afea2982":"Find the data frame indices associated to each split, based on dates. Note: if instead of the index you want whole data frame or series splits, see the Version 1 of this notebook."}}