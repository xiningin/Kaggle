{"cell_type":{"b68a60d0":"code","d2a43208":"code","448ef576":"code","c19cd22c":"code","a2adb0fe":"code","ed6ec4b0":"code","f73828c2":"code","b3c0e6bc":"code","1f3c87aa":"code","8182b7f2":"code","0785be15":"code","20e7c19f":"code","d1882bc2":"code","2c14e997":"code","ec78d32b":"markdown","f3e2fc2e":"markdown","403d2209":"markdown"},"source":{"b68a60d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2a43208":"import zipfile\nzip_ref = zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/train.zip', 'r')\nzip_ref.extractall('\/kaggle\/temp\/dogs-vs-cats\/')\nzip_ref = zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/test1.zip', 'r')\nzip_ref.extractall('\/kaggle\/temp\/dogs-vs-cats\/')\nzip_ref.close()","448ef576":"os.listdir('\/kaggle\/temp\/dogs-vs-cats\/')","c19cd22c":"os.mkdir('\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/')\nos.mkdir('\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/')","a2adb0fe":"import shutil\nfor file in os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/'):\n    if 'dog' in str(file) and 'jpg' in str(file):\n        shutil.move('\/kaggle\/temp\/dogs-vs-cats\/train\/'+str(file),'\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/'+str(file))\n    if 'cat' in str(file) and 'jpg' in str(file):\n        shutil.move('\/kaggle\/temp\/dogs-vs-cats\/train\/'+str(file),'\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/'+str(file))","ed6ec4b0":"print(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/')))\nprint(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/')))","f73828c2":"os.mkdir('\/kaggle\/temp\/dogs-vs-cats\/validate\/')\nos.mkdir('\/kaggle\/temp\/dogs-vs-cats\/validate\/dog\/')\nos.mkdir('\/kaggle\/temp\/dogs-vs-cats\/validate\/cat\/')","b3c0e6bc":"os.listdir('\/kaggle\/temp\/dogs-vs-cats\/')","1f3c87aa":"for file in os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/')[:1250]:\n    shutil.move('\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/'+str(file),'\/kaggle\/temp\/dogs-vs-cats\/validate\/dog\/'+str(file))\nfor file in os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/')[:1250]:\n    shutil.move('\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/'+str(file),'\/kaggle\/temp\/dogs-vs-cats\/validate\/cat\/'+str(file))","8182b7f2":"print(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/dog\/')))\nprint(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/train\/cat\/')))\nprint(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/validate\/dog\/')))\nprint(len(os.listdir('\/kaggle\/temp\/dogs-vs-cats\/validate\/cat\/')))","0785be15":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nTRAIN_DIR = '\/kaggle\/temp\/dogs-vs-cats\/train\/'\nVALIDATION_DIR ='\/kaggle\/temp\/dogs-vs-cats\/validate\/'\n\ntrain_datagen = ImageDataGenerator(rescale=1\/255,rotation_range=40, width_shift_range=0.15,\n    height_shift_range=0.15,shear_range=0.2, zoom_range=0.2,\n    horizontal_flip=True, vertical_flip=True)\ntrain_generator = train_datagen.flow_from_directory(\n    TRAIN_DIR,\n    batch_size = 32,\n    shuffle=True,\n    target_size=(300,300),\n    class_mode='binary'\n)\n\n\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\nvalidation_generator = validation_datagen.flow_from_directory(\n    VALIDATION_DIR,\n    batch_size = 32,\n    target_size=(300,300),\n    class_mode='binary'\n)","20e7c19f":"model = tf.keras.models.Sequential(\n[\n    tf.keras.layers.Conv2D(16,(3,3),input_shape=(300,300,3)),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512,activation='relu'),\n    tf.keras.layers.Dense(128,activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')\n])\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.summary()","d1882bc2":"history = model.fit(train_generator,\n                              epochs=500,\n                              validation_data=validation_generator,\n                              callbacks=[\n                                  tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3),\n                                  tf.keras.callbacks.ModelCheckpoint(\n                                        filepath='\/kaggle\/working\/',\n                                        save_weights_only=True,\n                                        monitor='val_accuracy',\n                                        mode='max',\n                                        save_best_only=True)\n                              ])","2c14e997":"try:\n    from matplotlib import pyplot as plt\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'val'], loc='upper left')\n    plt.show()\nexcept:\n    pass\n\ntry:\n    from matplotlib import pyplot as plt\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'val'], loc='upper left')\n    plt.show()\nexcept:\n    pass","ec78d32b":"# The below cells are for defining a TensorFlow model and preparing the Image Generator for feeding it to the model.fit","f3e2fc2e":"# The below cells visualize the model accuracy and loss to check the performance","403d2209":"# The below cells are related to arrangement of data so that we can readly consume it for model training"}}