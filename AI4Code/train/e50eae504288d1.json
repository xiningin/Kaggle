{"cell_type":{"c98393a1":"code","50e70e92":"code","073ec10c":"code","7ccdb982":"code","49fb0403":"code","04cd1f64":"code","f9488659":"code","6e7f4eac":"code","01a3a09f":"code","8e7d03e4":"markdown","2ed69091":"markdown","0f4b008d":"markdown","e867bf97":"markdown","f18daa5d":"markdown","4c38ee48":"markdown","ff08bee9":"markdown","6b37886a":"markdown","0e4de852":"markdown"},"source":{"c98393a1":"from IPython.display import clear_output\n!pip install mljar-supervised --user\nclear_output()","50e70e92":"import numpy as np\nimport pandas as pd\nfrom supervised import AutoML","073ec10c":"# data \nTRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\nTARGET = \"Survived\"\nTHRESHOLD = 0.5\n\n# mljar \nMODE = \"Optuna\"\nEVAL_METRIC = \"auc\"\nALGORHYTHMS = [\"LightGBM\", \"Xgboost\", \"Extra Trees\"]\nOPTUNA_TIME_BUDGET = 30 \nTOTAL_TIME_LIMIT = 48 * OPTUNA_TIME_BUDGET\nFEATURES_SELECTION = False","7ccdb982":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","49fb0403":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","04cd1f64":"y = train[TARGET]\nX = train.drop([TARGET], axis=1)\nX_test = test","f9488659":"automl = AutoML(mode=MODE, \n                eval_metric=EVAL_METRIC,\n                algorithms=ALGORHYTHMS,\n                optuna_time_budget=OPTUNA_TIME_BUDGET,   # tune each algorithm \n                total_time_limit=TOTAL_TIME_LIMIT,  # total time limit, set large enough to have time to compute all steps\n                features_selection=FEATURES_SELECTION)\nautoml.fit(X, y)","6e7f4eac":"preds = automl.predict(X_test)","01a3a09f":"submission = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsubmission[TARGET] = (preds > THRESHOLD).astype(int)\nsubmission.to_csv(SUBMISSION_PATH,index=False)\nsubmission.head()","8e7d03e4":"# import libraries","2ed69091":"# preprocess data (delete\/null check and fill new data\/scaling)","0f4b008d":"# global variables","e867bf97":"# install MLJAR","f18daa5d":"# load data","4c38ee48":"# split data(train input\/train label\/test input)","ff08bee9":"# compute prediction on test data","6b37886a":"# submit test result","0e4de852":"# build model (MLJAR Optuna)"}}