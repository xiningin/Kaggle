{"cell_type":{"132d81fd":"code","74aa1d4d":"code","06c8f65d":"code","e0735e56":"code","3805de2b":"code","5084ffab":"code","833f3088":"code","21dc9921":"code","fbf96aaf":"code","0e165bae":"code","3c08e836":"code","b418d19d":"code","36490b0f":"code","57600e1c":"code","6306cc7d":"code","b5c12237":"code","ad967f17":"code","63fa9a87":"code","bb63ccac":"code","3135d560":"code","eea78de2":"code","ac105df2":"code","53b7e7e8":"code","4cab7a8c":"code","bc9b3265":"code","6c2df0ff":"code","1ddfebc0":"code","5182a132":"code","098ed586":"code","5459ffcf":"code","4dd43d3f":"code","43b01edf":"code","3260a510":"code","73ea4a8e":"code","f4985a69":"code","aa797eb2":"code","7e467620":"code","452101ee":"code","b45ba44b":"code","139000ae":"code","aa96c3b0":"code","4ee13836":"code","33886f6e":"code","504d44dd":"code","bf18b2de":"markdown","7de75b8a":"markdown","c089dcfa":"markdown","40e06dbb":"markdown","84d11671":"markdown","97d59d41":"markdown","0b134562":"markdown","9cea5648":"markdown","69799372":"markdown","5c79f14e":"markdown","bf9cc2b5":"markdown","1dff595c":"markdown","7dd40d47":"markdown","f419ca7c":"markdown","4d195ef7":"markdown","8e27ac15":"markdown","c79d5608":"markdown","a0851090":"markdown","58abe77a":"markdown","9d22301e":"markdown","b2639e53":"markdown","3d19f4ce":"markdown","ebaddaf8":"markdown","663bbb1f":"markdown","b4c7a656":"markdown","33eba5a2":"markdown","e4b13084":"markdown","b02dd3a3":"markdown","4e572204":"markdown","1d9b4349":"markdown","2ae6a747":"markdown","998c5701":"markdown","eed257d1":"markdown","e364f4a0":"markdown","86257ed0":"markdown","a53b0ece":"markdown","7bbefdfa":"markdown","2bfd49df":"markdown","a05ab549":"markdown","cddb33e5":"markdown","64811464":"markdown","2085ee7c":"markdown","26d3feb0":"markdown"},"source":{"132d81fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","74aa1d4d":"import matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import train_test_split","06c8f65d":"#Reading the file\nfile = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")","e0735e56":"file.describe()","3805de2b":"file.isnull().sum(axis=0)","5084ffab":"file.columns","833f3088":"corr = file[['temp','atemp','humidity', 'windspeed','casual', 'registered','count']].corr()","21dc9921":"f,axes = plt.subplots(1,1,figsize = (7,7))\nsb.heatmap(corr,square=True,annot = True,linewidth = .5,center = 2,ax = axes)","fbf96aaf":"file = file\nfile['Date'] = pd.DatetimeIndex(file['datetime']).date\nfile['Hour'] = pd.DatetimeIndex(file['datetime']).hour\nfile['Day'] = pd.DatetimeIndex(file['datetime']).day\nfile['Month'] = pd.DatetimeIndex(file['datetime']).month\nfile['Year'] = pd.DatetimeIndex(file['datetime']).year","0e165bae":"f,axes = plt.subplots(1,1,figsize = (35,11))\nsb.lineplot(x ='Date', y = 'registered', data = file, hue = 'Hour',ax = axes,legend = 'full',palette = 'bright')","3c08e836":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'season'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0])\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","b418d19d":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'holiday'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","36490b0f":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'workingday'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","57600e1c":"f,axes = plt.subplots(1,3,figsize = (17,7))\nsb.despine(left = True)\nx = 'weather'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","6306cc7d":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Hour'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","b5c12237":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Day'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","ad967f17":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Month'\n#order = ['January','February','March','April','May','June','July','August','September','October','November','December']\nplot = sb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0])\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","63fa9a87":"f,axes = plt.subplots(1,3,figsize = (19,7))\nsb.despine(left = True)\nx = 'Year'\n\nsb.barplot(x = x , y = 'casual' , data = file, saturation = 1, ax =  axes[0] ,)\nsb.barplot(x = x , y = 'registered' , data = file, saturation = 1, ax = axes[1])\nsb.barplot(x = x , y = 'count' , data = file, saturation = 1, ax = axes[2])","bb63ccac":"file.describe()","3135d560":"file.columns","eea78de2":"for i in file.groupby('season').count().index:\n    s = 's'+str(i)\n    a=[]\n    for j in file.season:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    file[s]=a\nfile.sample(5)","ac105df2":"for i in file.groupby('weather').count().index:\n    s = 'w'+str(i)\n    a=[]\n    for j in file.weather:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    file[s]=a\nfile.sample(5)","53b7e7e8":"for i in file.groupby('Hour').count().index:\n    s = 'Hour'+str(i)\n    a=[]\n    for j in file.Hour:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    file[s]=a\nfile.sample(5)","4cab7a8c":"for i in file.groupby(\"Month\").count().index:\n    s = 'Month' + str(i)\n    a = []\n    for j in file.Month:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    file[s] = a\nfile.sample(5)","bc9b3265":"file.columns","6c2df0ff":"feed = file[['Hour0', 'Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5',\n       'Hour6', 'Hour7', 'Hour8', 'Hour9', 'Hour10', 'Hour11', 'Hour12',\n       'Hour13', 'Hour14', 'Hour15', 'Hour16', 'Hour17', 'Hour18', 'Hour19',\n       'Hour20', 'Hour21', 'Hour22', 'Hour23','Month1', 'Month2', 'Month3',\n       'Month4', 'Month5', 'Month6', 'Month7', 'Month8', 'Month9', 'Month10',\n       'Month11', 'Month12','Year','s1','s2','s3','s4','holiday','workingday',\n        'w1','w2','w3','w4','temp','humidity','casual','registered','count']]","1ddfebc0":"feed.describe()","5182a132":"feed.columns","098ed586":"df_train_x = feed.drop('casual',axis = 1).drop('registered',axis=1).drop('count',axis=1)\ndf_train_x.describe()","5459ffcf":"df_train_y = feed['count']\ndf_train_y.describe","4dd43d3f":"x_train, x_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size=0.15, random_state=42)","43b01edf":"reg = LinearRegression().fit(x_train, y_train)\npredictions = reg.predict(x_test)\n\nfor i in range(len(predictions)):\n    predictions[i] = max(1,i)\n\nprint(np.sqrt(mean_squared_log_error( y_test, predictions )))","3260a510":"plt = sb.residplot(x = predictions, y = y_test,lowess = True,color = 'r')","73ea4a8e":"reg = LinearRegression().fit(df_train_x, df_train_y)","f4985a69":"test_file = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')","aa797eb2":"test=test_file\ntest.describe()","7e467620":"test['mth'] = pd.DatetimeIndex(test['datetime']).month\ntest['yr'] = pd.DatetimeIndex(test['datetime']).year\ntest['dy'] = pd.DatetimeIndex(test['datetime']).day\ntest['hr'] = pd.DatetimeIndex(test['datetime']).hour\n\nfor i in test.groupby(\"season\").count().index:\n    s = 's' + str(i)\n    a = []\n    for j in test.season:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\nfor i in test.groupby(\"weather\").count().index:\n    s = 'w' + str(i)\n    a = []\n    for j in test.weather:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\nfor i in test.groupby('hr').count().index:\n    s = 'hr'+str(i)\n    a=[]\n    for j in test.hr:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s]=a\nfor i in test.groupby(\"mth\").count().index:\n    s = 'm' + str(i)\n    a = []\n    for j in test.mth:\n        if j==i:\n            a.append(1)\n        else:\n            a.append(0)\n    test[s] = a\ntest.sample(10)","452101ee":"test = test[['hr0','hr1','hr2','hr3','hr4','hr5','hr6','hr7','hr8','hr9','hr10','hr11','hr12','hr13','hr14','hr15','hr16','hr17','hr18',\n                 'hr19','hr20','hr21','hr22','hr23','m1','m2','m3','m4','m5','m6','m7','m8','m9','m10','m11','m12','yr',\n                 's1','s2','s3','s4','holiday','workingday','w1','w2','w3','w4','temp','humidity']]\ntest.describe","b45ba44b":"final_predictions = pd.DataFrame()\nfinal_predictions['cout'] = reg.predict(test)","139000ae":"s=[]\nfor j in final_predictions.cout:\n    if int(j)<1:\n        s.append(1)\n    else:\n        s.append(j)\nfinal_predictions['count'] = s ","aa96c3b0":"final_predictions.describe","4ee13836":"final_predictions['datetime']=test_file['datetime']\nfinal_predictions = final_predictions[['datetime','count']]","33886f6e":"final_predictions.describe()","504d44dd":"final_predictions.to_csv('submission.csv',index=False)","bf18b2de":"## Processing of the test file","7de75b8a":"## 4. Weather","c089dcfa":"## 3. Working day","40e06dbb":"### The conclusions drawn are:\n1. We can see that temp and atemp have a very strong positive correlation therefore we can use only temp as a variable without any loss of information. \n\n2. We can infer from the correlaton matrix that windspeed has almost no correlation with the casual,registered or count which we wish to predict so we can remove that","84d11671":"## 2. Weather ","97d59d41":"Training set will be the same for both the models.","0b134562":"# Checking for null values","9cea5648":"First we have to separate the individual date and time for each data point into hour,day,month and year.","69799372":"### Reading the test file","5c79f14e":"### 5.b. Day","bf9cc2b5":"Therefore what I will attempt to do is make two separate models for the casual and the registerd training them separately and then adding the result to get the count.","1dff595c":"# Preparing training and testing sets","7dd40d47":"### Retraining the decision tree over the whole dataset for submission.","f419ca7c":"## 2. Holiday","4d195ef7":"# Loading the training dataset","8e27ac15":"**Since we know that the output is never less than 1 we have to replace all negative values with 1.**","c79d5608":"## Data visualizaton for non continuous variables in data","a0851090":"# Machine learning model","58abe77a":"## 1. Season","9d22301e":"### 1. Training set","b2639e53":"### 5.a. Hour","3d19f4ce":"### 5.d. Year ","ebaddaf8":"### Splitting data into train and test sets","663bbb1f":"## 5. Date and Time","b4c7a656":"### Using polynomial on the dataset","33eba5a2":"### 2. Training set","e4b13084":"## Predicting the output over test set","b02dd3a3":"# Adding relevant columns for each of the categorical data columns and removing unnecesary ones","4e572204":"No data cleaning is required since no Null values are found!","1d9b4349":"**From the above graphs we can conclude that the feature day has hardly any influence over the features registered and count.**","2ae6a747":"## Heatmap of all the continuous values in the file.","998c5701":"Since we know that the output is never less than 1 we replace all negative values with 1 before appending in pre to calculate error.","eed257d1":"**The sudden periodic changes between the differrent regions is due to the missing data.These are the regions in which the regions we have to predict the result.**","e364f4a0":"## Removing unnecessary columns","86257ed0":"## 4.Month","a53b0ece":"## Exporting output to csv","7bbefdfa":"We can see that in the final graph there are two prominent peaks.\n1. At 8 a.m\n2. At 5 p.m\nWhere as the trend of casual is mostly the same throughout the day. \n\nFrom this we can conclude that the registered are mostly people going on their jobs which explains the peaks at the start and end of office hours. Clearly these people would have a more definite and predictible schedule and are therefore more likely to be registered.","2bfd49df":"### 5.c. Month","a05ab549":"## 1. Season","cddb33e5":"## 3. Hour","64811464":"# Data visualization:","2085ee7c":"# Importing important libraries","26d3feb0":"Combining the graphs of casual and registered into one of may make it seem like that holiday and workingday have no dependence on count but we can clearly see that holiday increases the casual amount by upto 40% and a reverse kind of trend is observed in working day so it is reasonable to take two different models one for casual and another for registered."}}