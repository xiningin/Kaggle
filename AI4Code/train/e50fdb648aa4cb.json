{"cell_type":{"1706dac5":"code","b6c3257c":"code","9f5577ef":"code","7d1a2020":"code","9c1f9d7e":"code","1dd60d31":"code","b366fd46":"code","c72b50f5":"code","50d04f94":"code","1e27135a":"code","ed135876":"code","82e83f1a":"code","0151fd47":"code","2550e1a4":"code","0714c83d":"code","95b175d7":"code","923af269":"code","5fc3aadf":"code","499771d3":"code","a2051788":"code","4f798c14":"code","fdee68dd":"code","a997178c":"code","138ad4a8":"code","608111ec":"code","07960e40":"code","6b6b6034":"code","d9b9bb45":"code","7791eaee":"code","453c80ac":"code","4a6afb37":"code","6283194e":"code","e2337fe5":"code","b84e2e45":"markdown","2aa50132":"markdown","9afbe575":"markdown","33fb7a50":"markdown","c244d1e4":"markdown","636793b4":"markdown","85c69cdb":"markdown","c548e303":"markdown","f26dbd4d":"markdown","233ca453":"markdown","9fa02b9c":"markdown","bd7365cb":"markdown","c1d8227a":"markdown","badd67df":"markdown","a3760159":"markdown","f7b2a363":"markdown","7df0e05d":"markdown","3cac2d78":"markdown","b5f763be":"markdown","14e658a6":"markdown","d1a8bec1":"markdown","f1fc97ad":"markdown","d1eb7f39":"markdown","5dd477de":"markdown","97666dae":"markdown","106750f8":"markdown","86482391":"markdown","322e3f9d":"markdown","584c91ee":"markdown","aebd4935":"markdown","edca5403":"markdown","f1c4c993":"markdown","eca67695":"markdown","8fd6a07a":"markdown","a24a821c":"markdown","b969b73f":"markdown","c374132a":"markdown","ba1770e8":"markdown","ace7af50":"markdown","e3e9d3c6":"markdown"},"source":{"1706dac5":"import numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# from plotly.offline import init_notebook_mode\n# init_notebook_mode(connected=True)\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport textwrap\n\n# display(plt.style.available)\n# display(pio.renderers)\n# display(pio.templates)","b6c3257c":"plt.style.use('default')\nplt.style.use('seaborn-white')\nplt.style.use('seaborn-notebook')\nsns.set_palette('Set2')\n\npio.templates.default = \"seaborn\"","9f5577ef":"# create wide df\n\ndf20 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2020.csv')\ndf21 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2021.csv')\n\nlcols = [0,1,2,6,7,8,9,10,11]\ndf20 = df20.iloc[:, lcols]\ndf21 = df21.iloc[:, lcols]\n\ndf20['Year'] = 2020\ndf21['Year'] = 2021\n\ndf = pd.concat([df21, df20])\ndf.rename(columns={'Country name': 'Country', \n                   'Regional indicator': 'Region', \n                   'Ladder score': 'Happiness score'}, inplace=True)\ndf['all'] = ''\n# display(df)\n\ndf20 = df[df.Year == 2020]\ndf21 = df[df.Year == 2021]\n# display(df20)\n\n# create long df\n\ndfM = df.melt(id_vars=['Country', \n                       'Region', \n                       'Year'], \n              value_vars=df.columns[2:-2], \n              var_name='Var', value_name='Value')\ndfM['all'] = ''\n# display(dfM)","7d1a2020":"# create wide %change df\n\ndfall = dfM.pivot(index=['Country', 'Region'], columns=['Var', 'Year'], values='Value').reset_index()\n\nscorecols = df.columns[2:-2]\nfor col in scorecols:\n    dfall[(col, '% Ch')] = ((dfall[(col, 2021)] - dfall[(col, 2020)])\/dfall[(col, 2020)])*100\n# display(dfall.sort_index(axis=1))\n\ndfdiff = dfall[['Country', 'Region']].join(dfall.loc[:, pd.IndexSlice[:, '% Ch']])\n# display(dfdiff)\n\ndfdiff.columns = dfdiff.columns.to_flat_index().str.join(' ').str.rstrip(' ')\ndfdiff.dropna(inplace=True)\n# display(dfdiff)\n\n# create long %change df\n\ndfdiffM = dfdiff.melt(id_vars = dfdiff.columns[0:2], \n                      value_vars = dfdiff.columns[2:], \n                      var_name='Var', value_name='Value'\n                     )\n# dfdiffM['all'] = ''\n\n# add feature\ndfdiffM['% Change'] = dfdiffM.apply(lambda row: 'Positive' if row.Value > 0\n                                  else 'Negative', \n                                  axis=1)\n# display(dfdiffM)","9c1f9d7e":"# export data\n\n# dfdiff.to_csv('dfdiff.csv')\n# dfdiffM.to_csv('dfdiffM.csv')\n# dfall.sort_index(axis=1).to_csv('dfall.csv')\n\n# data = dfall.set_index(['Country', 'Region']).sort_index(axis=1)\n# data.columns = [f\"{x}_{y}\" for x, y in data.columns.to_flat_index()]\n# data = data.reset_index().melt(id_vars=['Country', 'Region']) # from https:\/\/stackoverflow.com\/questions\/50571793\/concise-way-of-flattening-multiindex-columns\n# data[['Var','Year']] = data.variable.str.split(\"_\",expand=True)\n# data = data.drop('variable', axis=1)\n# data.rename(columns = {'value':'Value'}, inplace = True)\n# data['Year'] = data['Year'].replace(['% Ch'], '% Change')\n# data = data[['Country', 'Region', 'Var', 'Year', 'Value']]\n# display(data)\n\n# data.to_csv('dfallM.csv')","1dd60d31":"display(dfall.sort_index(axis=1))","b366fd46":"def hist(var):\n    fig = px.histogram(df, x=var, \n                 marginal='box', \n                 color_discrete_sequence=px.colors.qualitative.Set3,\n                )\n    fig.update_layout(width=480, height=360)\n    fig.show()\n\nhist(scorecols[0])","c72b50f5":"hist(scorecols[1])","50d04f94":"hist(scorecols[2])","1e27135a":"hist(scorecols[3])","ed135876":"hist(scorecols[4])","82e83f1a":"hist(scorecols[5])","0151fd47":"hist(scorecols[6])","2550e1a4":"cc = df.Country.nunique()\ndata = df\nfig = px.choropleth(data, locations='Country', \n                    locationmode='country names',\n#                     color='Country',\n#                     basemap_visible=False,\n                    fitbounds='locations',\n                    color_discrete_sequence=px.colors.qualitative.Set3,\n                    title=(str(cc) + ' Total Countries'),\n                   )\nfig.update_layout(height=540)\nfig.show()","0714c83d":"data = df.groupby('Region').Country.nunique().sort_values(ascending=False)\nwith sns.axes_style(\"whitegrid\"):\n    plt.figure(figsize=(5,3))\n    sns.barplot(y=data.index, x=data, palette='Set3')\n    plt.gca().set_xlabel('Country Count')\n    sns.despine(left=True, bottom=True)","95b175d7":"display(data.to_frame())","923af269":"region = df.Region.unique()[0]\ndata = df\nfig = px.choropleth(data, locations='Country', \n                    locationmode='country names',\n#                     color='Country',\n                    animation_frame = 'Region',\n#                     basemap_visible=False,\n                    fitbounds='locations',\n                    color_discrete_sequence=px.colors.qualitative.Pastel1,\n                    title=('Countries in each region'),\n                   )\nfig.update_layout(width=640)\nfig.show()","5fc3aadf":"s = df.groupby('Region').Country.unique()\nfor i in range(len(s)-1):\n    print(s.index[i]+':')\n    print(s[i])\n    print()","499771d3":"countries = set(df20.Country) - set(df21.Country)\ndata = df[df.Country.isin(countries)]\nfig = px.choropleth(data, locations='Country', \n                    locationmode='country names',\n                    color='Country',\n#                     animation_frame = 'Region',\n#                     basemap_visible=False,\n                    fitbounds='locations',\n                    color_discrete_sequence=px.colors.qualitative.Set3,\n                    title=('Countries missing from 2021 report'),\n                   )\nfig.update_layout(width=640, height=360)\nfig.show()","a2051788":"countries = set(df21.Country) - set(df20.Country)\ndata = df[df.Country.isin(countries)]\nfig = px.choropleth(data, locations='Country', \n                    locationmode='country names',\n                    color='Country',\n                    fitbounds='locations',\n                    scope='europe',\n                    color_discrete_sequence=px.colors.qualitative.Set3,\n                    title=('Countries added in 2021 report'),\n                   )\nfig.update_layout(width=480, height=360)\nfig.show()","4f798c14":"data = dfM[dfM.Year == 2021]\nfig = px.choropleth(data, locations='Country', locationmode='country names', \n                    color='Value',\n                    animation_frame = 'Var',\n                    basemap_visible=False,\n                    color_continuous_scale='Purpor_r',\n                    title=('Values from 2021 Report')\n                   )\nfig.update_layout(height=600)\nfig.show()","fdee68dd":"data = dfdiffM\nfig = px.choropleth(data, locations='Country', locationmode='country names', \n                    color='Value',\n                    animation_frame = 'Var',\n                    basemap_visible=False,\n                    color_continuous_scale='Tropic',\n                    color_continuous_midpoint=0, title=('Percent Change (2020 to 2021)')\n                   )\nfig.update_layout(height=600)\nfig.show()","a997178c":"g = sns.displot(data=dfM, x='Value', col='Var', hue='Year', kind='kde', \n                col_wrap=2, \n                palette=sns.color_palette()[2:4],\n                height=1.25, aspect=3, \n                facet_kws={'sharey': False, 'sharex': False}\n               )\ng.fig.subplots_adjust(top=0.85)\ng.fig.suptitle('All Countries 2021 vs 2020', size=16)\ng.set_axis_labels('','')\nsns.despine(left=True)","138ad4a8":"def varcompare(df1=df, df2=dfdiff, region=None):\n    diffcols = dfdiff.columns[2:]\n    fig, axes = plt.subplots(7, 2, figsize=(8,7))\n    \n    if region:\n        df1 = df[df.Region == region]\n        df2 = dfdiff[dfdiff.Region == region]\n        fig.suptitle(region, size=16)\n    else:\n        fig.suptitle('All countries', size=16)\n\n    for i, var in enumerate(scorecols):\n        sns.kdeplot(data=df1, x=var, hue='Year', ax=axes[i][0], palette=sns.color_palette()[2:4])\n        axes[i][0].set_ylabel(textwrap.fill(var, 12), rotation=0, horizontalalignment='right')\n        axes[i][0].set_xlabel('')\n        axes[i][0].set_yticklabels([])\n\n    for i, var in enumerate(diffcols):\n        sns.boxplot(data=df2, x=var, ax=axes[i][1], palette=[sns.color_palette()[-1]])\n        axes[i][1].set_xlabel('')\n\n    for i in range(1, 7):\n        axes[i][0].legend_.remove()\n\n#     axes[0][0].set_title('2021 vs 2020')\n    axes[0][1].set_title('% Change (2020 to 2021)')\n\n    plt.tight_layout()\n    sns.despine(left=True)\n#     fig.subplots_adjust(top=0.90)\n    plt.show()\n\nvarcompare()","608111ec":"region = df.Region.unique()[0]\nvarcompare(region=region)","07960e40":"regions = df.Region.unique()\nfor i in range(1, len(regions)):\n    varcompare(region=regions[i])","6b6b6034":"def regioncompare(var):\n    s = df.groupby('Region')[var].median().sort_values(ascending=False)\n    with sns.axes_style(\"whitegrid\"):\n        plt.figure()\n        sns.violinplot(data=df, x=var, y='Region', hue='Year', \n                       order=s.index,\n                       split=True, \n                       palette = sns.color_palette()[2:4],\n                       inner='quartiles')\n        plt.gca().set_yticklabels([textwrap.fill(t.get_text(), 18)  for t in plt.gca().get_yticklabels()])\n        plt.gca().legend(loc='upper left')\n        plt.gca().set_title(var + ', by region desc')\n        plt.gca().set_xlabel(\"\")\n        plt.gca().set_ylabel(\"\");\n        sns.despine(bottom=True, left=True)\n\nvar=scorecols[0]\nregioncompare(var)","d9b9bb45":"for i in range(1, len(scorecols)):\n    regioncompare(scorecols[i])","7791eaee":"def vardetail(var):\n    color20 = sns.color_palette()[2]\n    color21 = sns.color_palette()[3]\n\n    fig = plt.figure(figsize=(9,9), \n#                      constrained_layout=True\n                    )\n\n    gs = fig.add_gridspec(5,3)\n    ax = fig.add_subplot(gs[:1, :])\n    ax1 = fig.add_subplot(gs[1:3, 1])\n    ax2 = fig.add_subplot(gs[1:3, 2])\n    ax3 = fig.add_subplot(gs[3:, 1])\n    ax4 = fig.add_subplot(gs[3:, 2])\n    ax5 = fig.add_subplot(gs[1:, :1])\n\n#     sns.violinplot(data=df, x=var, y='all', hue='Year', split=True, \n#                    palette=[color19, color20], inner='quartiles', ax=ax)\n    sns.kdeplot(data=df, x=var, hue='Year', palette=[color20, color21], ax=ax)\n#     ax.set_title('All Countries')\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n#     ax.legend(loc='upper left')\n#     ax.legend(bbox_to_anchor=(0, 1))\n    \n    # 2020 top\n    order = rank(df20, var, False)\n    sns.barplot(data=df20, y='Country', x=var, order=order.head(10), palette=[color20], ax=ax1)\n    ax1.set_title('Top 10 Countries')\n    ax1.set_xlabel(\"\")\n    ax1.set_ylabel(\"2020\", size=12)\n    ax1.set_yticklabels([textwrap.fill(t.get_text(), 15)  for t in ax1.get_yticklabels()])\n\n    # 2020 bottom\n    order = rank(df20, var)\n    sns.barplot(data=df20, y='Country', x=var, order=order.head(10), palette=[color20], ax=ax2)\n    ax2.set_title('Bottom 10 Countries')\n    ax2.set_xlabel(\"\")\n    ax2.set_ylabel(\"\")\n    ax2.set_yticklabels([textwrap.fill(t.get_text(), 15)  for t in ax2.get_yticklabels()])\n\n    # 2021 top\n    order = rank(df21, var, False)\n    sns.barplot(data=df21, y='Country', x=var, order=order.head(10), palette=[color21], ax=ax3)\n    ax3.set_xlabel(\"\")\n    ax3.set_ylabel(\"2021\", size=12)\n    ax3.set_yticklabels([textwrap.fill(t.get_text(), 15)  for t in ax3.get_yticklabels()])\n\n    # 2021 bottom\n    order = rank(df21, var)\n    sns.barplot(data=df21, y='Country', x=var, order=order.head(10), palette=[color21], ax=ax4)\n    ax4.set_xlabel(\"\")\n    ax4.set_ylabel(\"\")\n    ax4.set_yticklabels([textwrap.fill(t.get_text(), 15)  for t in ax4.get_yticklabels()])\n    \n    # by Region\n    s = df.groupby('Region')[var].median().sort_values(ascending=False)\n    sns.violinplot(data=df, x=var, y='Region', hue='Year', order=s.index,\n                   palette=[color20, color21], split=True, inner='quartiles', ax=ax5)\n    ax5.set_yticklabels([textwrap.fill(t.get_text(), 14)  for t in ax5.get_yticklabels()])\n    ax5.set_title('Region, desc')\n    ax5.set_xlabel(\"\")\n    ax5.set_ylabel(\"\")\n    ax5.legend_.remove()\n    \n    plt.suptitle(var + ', 2021 vs 2020', size=18)\n    plt.tight_layout()\n    sns.despine(left=True, bottom=True)\n#     ax5.spines['right'].set_visible(True)\n    ax.spines['bottom'].set_visible(True)\n    fig.show()","453c80ac":"def rank(df, var, asc=True):\n    data = df[['Country', var]].sort_values(by=var, ascending=asc)\n    return data['Country']\n\ndef varchange(var):\n    color = sns.color_palette()[-1]\n    colorP = sns.color_palette()[4]\n    colorN = sns.color_palette()[5]\n    \n    fig=plt.figure(figsize=(8,6), \n#                    constrained_layout=True\n                  )\n    gs = fig.add_gridspec(5,2)\n    ax = fig.add_subplot(gs[:1, :])\n    ax1 = fig.add_subplot(gs[1:, 1])\n    ax2 = fig.add_subplot(gs[1:3, 0])\n    ax3 = fig.add_subplot(gs[3:, 0])\n\n    # box\n    sns.boxplot(data=dfdiff, x=var, orient='h', palette=[color], ax=ax)\n    ax.set_xlabel(\"\")\n\n    # pos\/neg counts\n    data = dfdiffM[dfdiffM.Var == var]\n    data['% Change'].value_counts().plot.pie(ax=ax1, labels = ['Positive', 'Negative'], colors=[colorP, colorN])\n    # alternate: bar\n    # sns.countplot(data=data, x='% Change', order=['Positive', 'Negative'], ax=ax4)\n    ax1.set_title('Country Counts')\n    ax1.set_xlabel(\"\")\n    ax1.set_ylabel(\"\")\n\n    # top 10\n    order = rank(dfdiff, var, False)\n    sns.barplot(data=dfdiff, y='Country', x=var, order=order.head(10), palette=[colorP], ax=ax2)\n    ax2.set_title('Top 10 Countries')\n    ax2.set_xlabel(\"\")\n    ax2.set_ylabel(\"\")\n\n    # bottom 10\n    order = rank(dfdiff, var)\n    sns.barplot(data=dfdiff, y='Country', x=var, order=order.head(10), palette=[colorN], ax=ax3)\n    ax3.set_title('Bottom 10 Countries')\n    ax3.set_xlabel(\"\")\n    ax3.set_ylabel(\"\")\n\n    plt.suptitle(var + 'ange (2020 to 2021)', size=16)\n    plt.tight_layout()\n    sns.despine(left=True, bottom=True)\n    ax.spines['bottom'].set_visible(True)\n\n    fig.show()\n\ndiffcols = dfdiff.columns[2:]","4a6afb37":"num = 0\nvardetail(scorecols[num])","6283194e":"varchange(diffcols[num])","e2337fe5":"for i in range(1, len(scorecols)):\n    vardetail(scorecols[i])\n    varchange(diffcols[i])","b84e2e45":"**Social support:**\n> Social support (or having someone to count on in times of trouble) is the national\naverage of the binary responses (either 0 or 1) to the GWP question \u201cIf you\nwere in trouble, do you have relatives or friends you can count on to help you\nwhenever you need them, or not?\u201d","2aa50132":"# 2021 vs 2020: World Maps","9afbe575":"**GDP per capita:**\n>  The statistics of GDP per capita (variable name gdp) in purchasing power parity\n(PPP) at constant 2017 international dollar prices are from the October 14,\n2020 update of the World Development Indicators (WDI). The GDP \ufb01gures\nfor Taiwan, Syria, Palestine, Venezuela, Djibouti and Ymen are from the Penn\nWorld Table 9.1.","33fb7a50":"# Variable Comparison (GridSpec)\nLet's put the previous comparisons together into one graphic, and add the top and bottom ranked countries.","c244d1e4":"### Comparing Percent Change by variable:","636793b4":"# Preliminary EDA","85c69cdb":"# How did the year of COVID-19 affect world happiness?\n### World Happiness: 2021 vs 2020","c548e303":"![zachary-nelson-98Elr-LIvD8-unsplash.jpg](attachment:e077f487-18b1-422d-a1db-8798f4dafb77.jpg)","f26dbd4d":"**How many countries are in the report?**","233ca453":"Photo by <a href=\"https:\/\/unsplash.com\/@zacharytnelson?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Zachary Nelson<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/happy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash<\/a>\n  ","9fa02b9c":"The distributions are quite close together and it isn't easy to see the differences. **We'll add percent change:**","bd7365cb":"# Variable Comparison (FacetGrid)\nThere are a number of ways we can look at each variable in further detail.","c1d8227a":"**Generosity:**\n> Generosity is the residual of regressing national average of response to the GWP\nquestion \u201cHave you donated money to a charity in the past month?\u201d on GDP\nper capita.","badd67df":"The 2021 World Happiness Report attempts to measure happiness around the world according to the following variables:\n\n* Happiness score\n* GDP per capita\n* Healthy Life Expectancy\n* Social support\n* Freedom to make life choices\n* Generosity\n* Corruption Perception\n\nThis notebook will examine how the numbers in the lastest 2021 report differ from the year before.\n\nI will be practicing visualizations using some custom facetgrids and gridspec with matplotlib and seaborn.","a3760159":"### Numeric variables\nThere are 7 variables that we'll examine. *From the appendix pdf:*","f7b2a363":"**Which countries have 2021 data, but no 2020 data?**","7df0e05d":"![helena-lopes-PGnqT0rXWLs-unsplash.jpg](attachment:f9684415-4f81-47ca-a070-f83073905d46.jpg)","3cac2d78":"**Comparing all variables for all countries, 2021 vs 2020:**","b5f763be":"***Expand for full list:***","14e658a6":"**Happiness score:**\n> Happiness score or subjective well-being (variable name ladder): The survey\nmeasure of SWB is from the Feb 26, 2021 release of the Gallup World Poll\n(GWP) covering years from 2005 to 2020. Unless stated otherwise, it is the na-\ntional average response to the question of life evaluations. The English wording\nof the question is \u201cPlease imagine a ladder, with steps numbered from 0 at the\nbottom to 10 at the top. The top of the ladder represents the best possible life\nfor you and the bottom of the ladder represents the worst possible life for you.\nOn which step of the ladder would you say you personally feel you stand at this\ntime?\u201d This measure is also referred to as Cantril life ladder, or just life ladder\nin our analysis.\n\n","d1a8bec1":"### Countries and Regions","f1fc97ad":"**We can also compare regions for each variable:**","d1eb7f39":"**Thanks for reading, any comments or suggestions are welcome!**","5dd477de":"***Expand for table:***","97666dae":"***Full table:***","106750f8":"**Which countries have 2020 data, but no 2021 data?**","86482391":"### Latest Values\nFirst, the values from the latest report:","322e3f9d":"### Percent Change from Previous Year\nThe percent change from 2020 to 2021:","584c91ee":"Photo by <a href=\"https:\/\/unsplash.com\/@wildlittlethingsphoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Helena Lopes<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/happy?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash<\/a>","aebd4935":"**Health life expectancy:**\n> Healthy Life Expectancy (HLE). Healthy life expectancies at birth are based\non the data extracted from the World Health Organization\u2019s (WHO) Global\nHealth Observatory data repository (Last updated: 2020-09-28). The data at\nthe source are available for the years 2000, 2005, 2010, 2015 and 2016. To\nmatch this report\u2019s sample period (2005-2020), interpolation and extrapolation\nare used.","edca5403":"**Which countries are in each region?**","f1c4c993":"***Expand for all variables:***","eca67695":"**Same comparison, but for each region:**","8fd6a07a":"**Perceptions of corruption:**\n> Corruption Perception: The measure is the national average of the survey re-\nsponses to two questions in the GWP: \u201cIs corruption widespread throughout\nthe government or not\u201d and \u201cIs corruption widespread within businesses or\nnot?\u201d The overall perception is just the average of the two 0-or-1 responses. In\ncase the perception of government corruption is missing, we use the perception\nof business corruption as the overall perception. The corruption perception at\nthe national level is just the average response of the overall perception at the\nindividual level.","a24a821c":"**How many countries are in each region?**","b969b73f":"### Comparing 2021 vs 2020 by variable:","c374132a":"***Expand for all regions:***","ba1770e8":"**Freedom to make life choices:**\n> Freedom to make life choices is the national average of responses to the GWP\nquestion \u201cAre you satis\ufb01ed or dissatis\ufb01ed with your freedom to choose what\nyou do with your life?\u201d","ace7af50":"# Import + Prep data","e3e9d3c6":"***Expand for all variables:***"}}