{"cell_type":{"937bc21c":"code","157f49fd":"code","601d09d0":"code","a51b32e0":"code","e38cf96d":"code","10eecc01":"code","47693e10":"code","24b39a51":"code","a06eae62":"code","8de42d55":"code","9cd34bcf":"code","b080bc9a":"code","c6925d81":"code","ae28c037":"code","d6104d33":"code","94448348":"code","eb5825d6":"code","84bdb43d":"code","9880bd3b":"code","63e3b91e":"code","e644c973":"code","9627fa62":"code","b06aaed9":"code","e18ae7c1":"code","48fcdfdf":"code","c5907f14":"code","87c9cfd5":"code","788d02a5":"code","1f22e59c":"code","49844a46":"code","6da1d05c":"code","3443f516":"code","aa502a10":"code","de6a4658":"code","3ea98e9c":"code","af4596fd":"code","e998230f":"code","fef26d0a":"code","f7f9cbf0":"code","e1088f3b":"code","28c03393":"code","9c5d6c2e":"code","548770d7":"code","f80cda00":"code","9e9824dc":"code","d23a87e9":"code","93c68e82":"markdown","b1f77af0":"markdown","7b782326":"markdown","1044a31e":"markdown","3c637eef":"markdown","c25d9895":"markdown","f9d88c12":"markdown","4b04ae1b":"markdown","d04f81a4":"markdown","bc11b0ac":"markdown","cb0d709b":"markdown","6fdca104":"markdown","6a15fb3c":"markdown","541efabd":"markdown","e1102602":"markdown","8620f512":"markdown","39d420f1":"markdown","f0973424":"markdown","1cd0c4b8":"markdown","2d0c6b84":"markdown","98d4c04b":"markdown","4a975374":"markdown","47491af1":"markdown","7bf08046":"markdown","d35e1268":"markdown"},"source":{"937bc21c":"\n# LOAN PREDICTION - MACHINE LEARNING \n# IMPORT NECESSARY LIBRARY  \nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sa\n","157f49fd":"loandf=pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\n\nloandf.head(10)","601d09d0":"\nprint(loandf.info())\nprint(loandf.describe())\nloandf.head(5)","a51b32e0":"print(loandf.isnull().sum())","e38cf96d":"\nprint(loandf['Gender'].value_counts())\nprint(loandf['Married'].value_counts())\nprint(loandf['Dependents'].value_counts())\nprint(loandf['Self_Employed'].value_counts())\nprint(loandf['Loan_Amount_Term'].value_counts())\nprint(loandf['Credit_History'].value_counts())","10eecc01":"loandf.Gender=loandf.Gender.fillna(\"Male\")\nloandf.Married=loandf.Married.fillna(\"Yes\")\nloandf.Dependents=loandf.Dependents.fillna(0)\nloandf.Self_Employed=loandf.Self_Employed.fillna(\"No\")\nloandf.Loan_Amount_Term=loandf.Loan_Amount_Term.fillna(360)\nloandf.Credit_History=loandf.Credit_History.fillna(1)","47693e10":"m1=loandf['LoanAmount'].mean()\nloandf.LoanAmount=loandf.LoanAmount.fillna(m1)","24b39a51":"loandf.replace(to_replace=\"3+\", value=3, inplace=True, limit=None, regex=False)\nloandf.head(10)","a06eae62":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nl = LabelEncoder()\n#for i in range(1,6):\nloandf.iloc[ : ,1]=l.fit_transform(loandf.iloc[ : ,1])\nloandf.iloc[ : ,2]=l.fit_transform(loandf.iloc[ : ,2])\nloandf.iloc[ : ,4]=l.fit_transform(loandf.iloc[ : ,4])\nloandf.iloc[ : ,5]=l.fit_transform(loandf.iloc[ : ,5])\nfor i in range(10,13):\n  loandf.iloc[ : ,i]=l.fit_transform(loandf.iloc[ : ,i])\n\n","8de42d55":"loandf.head(10)","9cd34bcf":"\nloandf.drop([\"Loan_ID\"],axis=1,inplace=True)\nlist1=loandf.columns\nn=len(list1)\nx_tr=loandf[list1[0:n-1]]\ny_tr=loandf[list1[n-1]]\nAns=list(y_tr)\nprint (Ans)\n","b080bc9a":"loandf.corr()","c6925d81":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression(random_state = 0)\nLR.fit(x_tr, y_tr)","ae28c037":"x_ts=pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv\")","d6104d33":"x_ts","94448348":"x_ts.info()\nprint(x_ts['Gender'].value_counts())\nprint(x_ts['Married'].value_counts())\nprint(x_ts['Dependents'].value_counts())\nprint(x_ts['Self_Employed'].value_counts())\nprint(x_ts['Loan_Amount_Term'].value_counts())\nprint(x_ts['Credit_History'].value_counts())","eb5825d6":"x_ts.Gender=x_ts.Gender.fillna(\"Male\")\nx_ts.Dependents=x_ts.Dependents.fillna(0)\nx_ts.Self_Employed=x_ts.Self_Employed.fillna(\"No\")\nx_ts.Loan_Amount_Term=x_ts.Loan_Amount_Term.fillna(360)\nx_ts.Credit_History=x_ts.Credit_History.fillna(1)\nx_ts.LoanAmount=x_ts.LoanAmount.fillna(x_ts['LoanAmount'].mean())\nx_ts.replace(to_replace=\"3+\", value=3, inplace=True, limit=None, regex=False)\nx_ts.columns","84bdb43d":"x_ts.drop([\"Loan_ID\"],axis=1,inplace=True)\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nl = LabelEncoder()\nfor i in range(0,2):\n  x_ts.iloc[ : ,i]=l.fit_transform(x_ts.iloc[ : ,i])\nfor i in range(3,6):\n  x_ts.iloc[ : ,i]=l.fit_transform(x_ts.iloc[ : ,i])\nfor i in range(9,11):\n  x_ts.iloc[ : ,i]=l.fit_transform(x_ts.iloc[ : ,i])\n","9880bd3b":"x_ts","63e3b91e":"pred=LR.predict(x_ts)\npred","e644c973":"y_pre=LR.predict(x_tr)\ny_pre","9627fa62":"from sklearn import metrics\nprint('The score of Logistic Regression is: ', metrics.accuracy_score(y_pre, y_tr))","b06aaed9":"from sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nKNN.fit(x_tr, y_tr)","e18ae7c1":"y_tr1=KNN.predict(x_tr)\ny_tr1","48fcdfdf":"print('The score of KNN is: ', metrics.accuracy_score(y_tr1, y_tr))","c5907f14":"from sklearn.metrics import confusion_matrix\ncm1 = confusion_matrix(y_tr1, y_tr)\ncm1","87c9cfd5":"from sklearn.svm import SVC\nSVM= SVC(kernel = 'linear', random_state = 0)\nSVM.fit(x_tr, y_tr)","788d02a5":"y_tr2=SVM.predict(x_tr)\ny_tr2","1f22e59c":"print(\"The score of SVM is :\",metrics.accuracy_score(y_tr2, y_tr))","49844a46":"from sklearn.tree import DecisionTreeClassifier\nDTREE = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nDTMOD=DTREE.fit(x_tr, y_tr)\n","6da1d05c":"pred3=DTREE.predict(x_ts)\npred3","3443f516":"y_tr3=DTREE.predict(x_tr)\nAns1=list(y_tr3)\nprint(Ans1)","aa502a10":"print(\"The score of DECISSION TREE:\",metrics.accuracy_score(y_tr3, y_tr))","de6a4658":"count=0\nmissvalue=0\nfor i in range(len(Ans)):\n    if Ans[i]==Ans1[i] :\n        count+=1\n    else :\n        missvalue+=1\nprint(\"The count of correctly predicted value by decision tree out of \"+str(len(Ans))+\"is:\",count )\n","3ea98e9c":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_tr,y_tr3))","af4596fd":"y_ans_for_test_data=DTREE.predict(x_ts)\nprint(y_ans_for_test_data)","e998230f":"from sklearn.datasets import load_iris\nfrom sklearn import tree\nX, y = load_iris(return_X_y=True)\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x_tr, y_tr)\ntree.plot_tree(clf.fit(x_tr,y_tr)) ","fef26d0a":"list2=(DTMOD.feature_importances_)\npd.DataFrame(list2,[x_tr.columns])","f7f9cbf0":" DecisionTreeClassifier(class_weight=0.2, criterion='entropy', max_depth=None,\n                       max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=5, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort=False,\n                       random_state=0, splitter='best')\nDTMOD.max_features\nDTMOD.get_n_leaves\n","e1088f3b":"plt.scatter(x_tr['LoanAmount'],x_tr[\"ApplicantIncome\"])\n\n","28c03393":"\nsa.catplot(x=\"Married\", y=\"LoanAmount\", data=x_tr)","9c5d6c2e":"sa.catplot(x=\"Education\", y=\"LoanAmount\", data=x_tr)","548770d7":"sa.catplot(x=\"LoanAmount\", y=\"Loan_Status\", data=loandf)","f80cda00":"sa.catplot(x=\"Loan_Status\", y=\"ApplicantIncome\", data=loandf)","9e9824dc":"sa.catplot(x=\"Loan_Status\", y=\"LoanAmount\", data=loandf)","d23a87e9":"sa.catplot(data=loandf, orient=\"Dependents\", kind=\"box\")","93c68e82":"USING KNN ALGORITHM \n","b1f77af0":"NOW TEST THE VALUE ","7b782326":"NOW GET THE ANS FOR TEST DATA ","1044a31e":"from the above graph we can say MARRIED persons want more loan than unmarried person ","3c637eef":"so the decision tree gives the 100% correct value ","c25d9895":"READING THE GIVEN DATA SET ","f9d88c12":"so decission tree gives the max score (1) so we can go with decission tree for this problem \nnow check the value for accuracy ","4b04ae1b":"THERE IS NO CORR BET LOAN AMOUNT AND LOAN STATUS ","d04f81a4":"encoding the catagorical data in to numerical values ","bc11b0ac":"SVM ALGORITHM\n","cb0d709b":"DECISION TREE ALGORITHM ","6fdca104":"THANKS FOR WATHING ","6a15fb3c":"NOW CHECK THE CORRELATION AND DATA VISUALIZATION \nbefore making decision tree we have to remove index of x_tr\n","541efabd":"The above feature shows that Credit_History, Applicantincome and Loan amount decides the most importent decision  ","e1102602":"checking the data set value ","8620f512":"NOW WE HAVE TO FIT THE CORRECT MODULE \n1) LOGISTIC REGRESSION ","39d420f1":"NOW CHECK THE VALUE FOR OUR TEST DATA  using LOGISTIC regression ","f0973424":"NOW CHECK THE IMPORTANCES OF FEATURE ","1cd0c4b8":"NOW DROP THE UNWANTED DATA (LOAN_ID) AND SPLIT THE X AND Y","2d0c6b84":"CHECK THE ACCURACY OF LOGISTIC REGRESSION ","98d4c04b":"Now we have to encode the catagorical value in to numerical value\n 1) splitting the dependented and in dependent value \n","4a975374":"APPLICATION INCOME not decide loan status ","47491af1":"NOW WE ARE GOING TO FILL THE NULL VALUE WITH MODE(FOR CATAGORICAL DATA ) AND MEAN (FOR NUMERIC DATA ) ","7bf08046":"graduate people want more loan ","d35e1268":"ABOVE PLOT SHOWS THAT APPLICANT INCOME LESSTHAN 20000 SEEK for loan less than 300"}}