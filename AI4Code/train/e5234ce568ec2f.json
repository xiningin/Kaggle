{"cell_type":{"2bc96355":"code","867ddac4":"code","33634d02":"code","33ad3389":"code","203ddd8f":"code","80db6c25":"code","98ffb021":"code","83afd354":"code","4a83f5ee":"code","7ad5af6f":"code","e92d7395":"code","9c45e171":"code","77def6c0":"code","f1451957":"code","d851140d":"code","48a6bb8f":"code","529c1034":"code","2ab2900b":"code","ce6ea24c":"code","e5ec5f4b":"code","5cd273b5":"code","20142f23":"code","e51896e2":"code","f24c8d5f":"code","f9da1a66":"code","b15875bb":"code","f562b73e":"code","c7e85e01":"code","fa09c8d0":"code","420e7c74":"code","13820b2a":"code","6e8dfe91":"code","1b6fd71b":"markdown","b4e010df":"markdown","09e1e6e5":"markdown","cc5c70dc":"markdown","6291d1b6":"markdown","c486aeab":"markdown","a367622d":"markdown","2e208c2f":"markdown","202215fa":"markdown","2f0c9c4b":"markdown","564ca976":"markdown","7813a2a3":"markdown","03d19bd1":"markdown"},"source":{"2bc96355":"# Gerekli K\u00fct\u00fcphaneler ve Ayarlar\n\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom sklearn.metrics import mean_absolute_error\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport statsmodels.api as sm\nimport itertools\n\nimport warnings\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\nwarnings.filterwarnings('ignore')","867ddac4":"#load dataset\ntrain = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/test.csv', parse_dates=['date'])\ndf = pd.concat([train, test], sort=False) # veri \u00f6ni\u015fleme i\u00e7in test ve train bir araya getirdim\ndf.head()","33634d02":"print(\"Train setinin boyutu:\",train.shape)\nprint(\"Test setinin boyutu:\",test.shape)","33ad3389":"df.shape","203ddd8f":"df.quantile([0, 0.05, 0.25, 0.50, 0.75, 0.95, 0.99, 1]).T","80db6c25":"df[\"date\"].min()","98ffb021":"df[\"date\"].max()","83afd354":"# Sat\u0131\u015f da\u011f\u0131l\u0131m\u0131\ndf[\"sales\"].describe([0.10, 0.30, 0.50, 0.70, 0.80, 0.90, 0.95, 0.99])","4a83f5ee":"# Ma\u011faza say\u0131s\u0131\ndf[\"store\"].nunique()","7ad5af6f":"#\u00dcr\u00fcn say\u0131s\u0131\ndf[\"item\"].nunique() ","e92d7395":"# Her ma\u011fazadaki e\u015fsiz \u00fcr\u00fcn e\u015fit say\u0131da m\u0131?\ndf.groupby([\"store\"])[\"item\"].nunique()","9c45e171":"# Ma\u011faza-\u00fcr\u00fcn k\u0131r\u0131l\u0131m\u0131nda sat\u0131\u015f istatistikleri\ndf.groupby([\"store\", \"item\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","77def6c0":"# hangi ayda sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['month'] = df.date.dt.month\n# ay\u0131n hangi g\u00fcn\u00fcnde sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['day_of_month'] = df.date.dt.day\n# y\u0131l\u0131n hangi g\u00fcn\u00fcnde sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['day_of_year'] = df.date.dt.dayofyear \n# y\u0131l\u0131n hangi haftas\u0131nda sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['week_of_year'] = df.date.dt.weekofyear\n# haftan\u0131n hangi g\u00fcn\u00fcnde sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['day_of_week'] = df.date.dt.dayofweek\n# hangi y\u0131lda sat\u0131\u015f yap\u0131lm\u0131\u015f\ndf['year'] = df.date.dt.year\n# haftasonu mu de\u011fil mi\ndf[\"is_wknd\"] = df.date.dt.weekday \/\/ 4\n# ay\u0131n ba\u015flang\u0131c\u0131 m\u0131\ndf['is_month_start'] = df.date.dt.is_month_start.astype(int)\n# ay\u0131n biti\u015fi mi\ndf['is_month_end'] = df.date.dt.is_month_end.astype(int) ","f1451957":"df.head()","d851140d":"# store-item-month k\u0131r\u0131l\u0131m\u0131nda sat\u0131\u015f istatistikleri\ndf.groupby([\"store\", \"item\", \"month\"]).agg({\"sales\": [\"sum\", \"mean\", \"median\", \"std\"]})","48a6bb8f":"def random_noise(dataframe):\n    return np.random.normal(scale=1.6, size=(len(dataframe),))","529c1034":"df.sort_values(by=['store', 'item', 'date'], axis=0, inplace=True)\ndf.head()","2ab2900b":"def lag_features(dataframe, lags):\n    for lag in lags:\n        dataframe['sales_lag_' + str(lag)] = dataframe.groupby([\"store\", \"item\"])['sales'].transform(\n            lambda x: x.shift(lag)) + random_noise(dataframe)\n    return dataframe\n\ndf = lag_features(df, [91, 98, 105, 112, 119, 126, 182, 364, 546, 728])","ce6ea24c":"def roll_mean_features(dataframe, windows):\n    for window in windows:\n        dataframe['sales_roll_mean_' + str(window)] = dataframe.groupby([\"store\", \"item\"])['sales']. \\\n                                                          transform(\n            lambda x: x.shift(1).rolling(window=window, min_periods=10, win_type=\"triang\").mean()) + random_noise(\n            dataframe)\n    return dataframe\n\n\ndf = roll_mean_features(df, [365, 546, 730])","e5ec5f4b":"def ewm_features(dataframe, alphas, lags):\n    for alpha in alphas:\n        for lag in lags:\n            dataframe['sales_ewm_alpha_' + str(alpha).replace(\".\", \"\") + \"_lag_\" + str(lag)] = \\\n                dataframe.groupby([\"store\", \"item\"])['sales'].transform(lambda x: x.shift(lag).ewm(alpha=alpha).mean())\n    return dataframe\n\n\nalphas = [0.99, 0.95, 0.9, 0.8, 0.7, 0.5]\nlags = [91, 98, 105, 112, 180, 270, 365, 546, 728]\n\ndf = ewm_features(df, alphas, lags)\ndf.tail()","5cd273b5":"#One-Hot Encoding\n\ndf = pd.get_dummies(df, columns=['day_of_week', 'month'])","20142f23":"#Converting sales to log(1+sales)\n\ndf['sales'] = np.log1p(df[\"sales\"].values)","e51896e2":"# 2017'nin ba\u015f\u0131na kadar (2016'n\u0131n sonuna kadar) train seti.\ntrain = df.loc[(df[\"date\"] < \"2017-01-01\"), :]\n\n# 2017'nin ilk 3'ay\u0131 validasyon seti.\nval = df.loc[(df[\"date\"] >= \"2017-01-01\") & (df[\"date\"] < \"2017-04-01\"), :]\n\n# ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler\ncols = [col for col in train.columns if col not in ['date', 'id', \"sales\", \"year\"]]","f24c8d5f":"# train seti i\u00e7in ba\u011f\u0131ml\u0131 de\u011fi\u015fkenin se\u00e7ilmesi\nY_train = train['sales']\n\n# train seti i\u00e7in ba\u011f\u0131ms\u0131z de\u011fi\u015fkenin se\u00e7ilmesi\nX_train = train[cols]\n\n# validasyon seti i\u00e7in ba\u011f\u0131ml\u0131 de\u011fi\u015fkenin se\u00e7ilmesi\nY_val = val['sales']\n\n# validasyon seti i\u00e7in ba\u011f\u0131ms\u0131z de\u011fi\u015fkenin se\u00e7ilmesi\nX_val = val[cols] \n\n# kontrol\nY_train.shape, X_train.shape, Y_val.shape, X_val.shape","f9da1a66":"def smape(preds, target):\n    n = len(preds)\n    masked_arr = ~((preds == 0) & (target == 0))\n    preds, target = preds[masked_arr], target[masked_arr]\n    num = np.abs(preds - target)\n    denom = np.abs(preds) + np.abs(target)\n    smape_val = (200 * np.sum(num \/ denom)) \/ n\n    return smape_val\n\n\ndef lgbm_smape(preds, train_data):\n    labels = train_data.get_label()\n    smape_val = smape(np.expm1(preds), np.expm1(labels))\n    return 'SMAPE', smape_val, False","b15875bb":"# LightGBM parameters\nlgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'num_boost_round': 10000, \n              'early_stopping_rounds': 200,\n              'nthread': -1}","f562b73e":"lgbtrain = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\nlgbval = lgb.Dataset(data=X_val, label=Y_val, reference=lgbtrain, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain,\n                  valid_sets=[lgbtrain, lgbval],\n                  num_boost_round=lgb_params['num_boost_round'],\n                  early_stopping_rounds=lgb_params['early_stopping_rounds'],\n                  feval=lgbm_smape, # haty\u0131 g\u00f6zlemliyoruz\n                  verbose_eval=100)\n\ny_pred_val = model.predict(X_val, num_iteration=model.best_iteration)\n\n# validasyon hatas\u0131n\u0131n y\u00fczdesi\nsmape(np.expm1(y_pred_val), np.expm1(Y_val))","c7e85e01":"#Final Model\n\n# test ve train ba\u011f\u0131ml\u0131\/ba\u011f\u0131ms\u0131z de\u011fi\u015fkenlerinin belirlenmesi\n\ntrain = df.loc[~df.sales.isna()]\nY_train = train['sales']\nX_train = train[cols]\n\ntest = df.loc[df.sales.isna()]\nX_test = test[cols]","fa09c8d0":"lgb_params = {'metric': {'mae'},\n              'num_leaves': 10,\n              'learning_rate': 0.02,\n              'feature_fraction': 0.8,\n              'max_depth': 5,\n              'verbose': 0,\n              'nthread': -1,\n              \"num_boost_round\": model.best_iteration}\n\n# LightGBM dataset\nlgbtrain_all = lgb.Dataset(data=X_train, label=Y_train, feature_name=cols)\n\nmodel = lgb.train(lgb_params, lgbtrain_all, num_boost_round=model.best_iteration)\ntest_preds = model.predict(X_test, num_iteration=model.best_iteration)","420e7c74":"#1. ma\u011fazan\u0131n 1.\u00fcr\u00fcnleri i\u00e7in yap\u0131lan tahminler\n\nforecast = pd.DataFrame({\"date\":test[\"date\"],\n                        \"store\":test[\"store\"],\n                        \"item\":test[\"item\"],\n                        \"sales\":test_preds\n                        })\n\nforecast[(forecast.store == 1) & (forecast.item == 1)].set_index(\"date\").sales.plot(color = \"green\",\n                                                                                    figsize = (20,9),\n                                                                                    legend=True, label = \"Store 1 Item 1 Forecast\");","13820b2a":"#1.Ma\u011fazan\u0131n 17. \u00dcr\u00fcn\u00fc \u0130\u00e7in Tahmin Edilen De\u011ferler\n\ntrain[(train.store == 1) & (train.item == 17)].set_index(\"date\").sales.plot(figsize = (20,9),legend=True, label = \"Store 1 Item 17 Sales\")\nforecast[(forecast.store == 1) & (forecast.item == 17)].set_index(\"date\").sales.plot(legend=True, label = \"Store 1 Item 17 Forecast\");","6e8dfe91":"df.shape","1b6fd71b":"![pexels-artem-beliaikin-1036857.jpg](attachment:489f7f61-56d0-4124-94b4-1349e08a7d05.jpg)","b4e010df":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Importing Libraries<\/span><\/h1>","09e1e6e5":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Rolling Mean Features (Hareketli Ortalamalar)<\/span><\/h1>","cc5c70dc":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Custom Cost Function<\/span><\/h1>","6291d1b6":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Feature Engineering<\/span><\/h1>","c486aeab":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Lag\/Shifted Features (Gecikmeler)<\/span><\/h1>","a367622d":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Store Item Demand Forecasting<\/span><\/h1>\n**This competition is provided as a way to explore different time series techniques on a relatively simple and clean dataset.**\n\n**You are given 5 years of store-item sales data, and asked to predict 3 months of sales for 50 different items at 10 different stores.**\n","2e208c2f":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Exponentially Weighted Mean Features (\u00dcssel A\u011f\u0131rl\u0131kl\u0131 Ortalama Featurelar\u0131)<\/span><\/h1>","202215fa":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Exploring Data Analysis<\/span><\/h1>","2f0c9c4b":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">LightGBM Model<\/span><\/h1>","564ca976":"\n<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Variables<\/span><\/h1>\n\n\n- date\n- store\n- item\n- sales\n\n","7813a2a3":"<a id = \"1\"><\/a><h1 id=\"Salary Prediction with Machine Learning\"><span class=\"label label-default\" style=\"background-color:#f5c0c0; font-size:30px; \ncolor: Black; \">Random Noise (G\u00fcr\u00fclt\u00fc)<\/span><\/h1>","03d19bd1":"<div style=\"display:fill;\n            border-radius: false;\n            border-style: solid;\n            border-color:;\n            border-style: false;\n            border-width: 2px;\n            color:;\n            font-size:15px;\n            font-family: Georgia;\n            background-color:#ACCDA7;\n            text-align:center;\n            letter-spacing:0.1px;\n            padding: 0.1em;\">\n\n**<h2>THANK YOU FOR TAKING THE TIME**"}}