{"cell_type":{"7709e21e":"code","e5838351":"code","21c82144":"code","ad5d3ca1":"code","8e6b2b59":"code","9dafac86":"code","aaa50d19":"code","1c3170e0":"code","d064912c":"code","f5a3e210":"code","bb4b3a89":"code","b15aeec5":"code","2bdde5ae":"code","1e1b5e07":"code","83cc8490":"code","1983687c":"code","d2051e12":"code","622914b7":"code","2cf0be7a":"code","3f08d4cd":"code","bf2a4d8d":"code","62fa785a":"code","4a278e90":"code","af43a348":"code","4b30b425":"code","20c2ef28":"code","3b7c52b4":"code","6b9e5b6e":"code","59d98bf9":"code","001e5475":"code","4ff5bd51":"code","7e5bd92c":"code","6933ddd8":"code","0c8a9323":"code","168f5f3c":"code","37c2020a":"code","9f428dc1":"code","aab8bbac":"code","d3f1101b":"code","9b956972":"code","8ec2eb7d":"code","5691c307":"code","3df61987":"code","131d918e":"code","6f93cab7":"code","cdf6a35b":"code","ff2af24e":"code","222b850b":"markdown","6db4c57c":"markdown","524ba93a":"markdown","7c7040f5":"markdown","3b36aa4a":"markdown","4862fa53":"markdown","3cc54de8":"markdown","d59515cf":"markdown","8b8e3808":"markdown","2a5814f0":"markdown"},"source":{"7709e21e":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport joblib\n\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import tree\nfrom sklearn import ensemble\nfrom sklearn import neighbors\n\nfrom sklearn import multioutput\nfrom sklearn import metrics\nfrom sklearn import svm\nfrom sklearn.gaussian_process.kernels import DotProduct, WhiteKernel, Matern, RBF\n\nfrom matplotlib import pyplot as plt\n\nsns.set(style=\"dark\")","e5838351":"IMAGE_WIDTH = 3384\nIMAGE_HEIGHT = 2710","21c82144":"def print_metrics(test_set, predictions):\n    print(\"Test metrics\")\n    print(\"-\"*20)\n    \n    wx_error = sklearn.metrics.mean_absolute_error(test_set['wx'], predictions[:, 0])\n    wy_error = sklearn.metrics.mean_absolute_error(test_set['wy'], predictions[:, 1])\n    wz_error = sklearn.metrics.mean_absolute_error(test_set['wz'], predictions[:, 2])\n    \n    wx_r2 = sklearn.metrics.r2_score(test_set['wx'], predictions[:, 0])\n    wy_r2 = sklearn.metrics.r2_score(test_set['wy'], predictions[:, 1])\n    wz_r2 = sklearn.metrics.r2_score(test_set['wz'], predictions[:, 2])\n\n    print(f\"- WX error {wx_error}\")\n    print(f\"- WY error {wy_error}\")\n    print(f\"- WZ error {wz_error}\")\n\n    print(\"\")\n    print(f\"- WX R2 score {wx_r2}\")\n    print(f\"- WY R2 score {wy_r2}\")\n    print(f\"- WZ R2 score {wz_r2}\")\n    \n    return wx_error, wy_error, wz_error, wx_r2, wy_r2, wz_r2\n          \ndef plot_predictions(test_set, predictions, fig, ax):\n          \n    line_kws = {'color':'black', 'linestyle':'--', 'linewidth':2}\n    scatter_kws = {'s':1}\n    \n    ax[0].set_title('World X')\n    ax[1].set_title('World Y')\n    ax[2].set_title('World Z')\n\n    ax[0] = sns.regplot(test_set['wx'], predictions[:, 0], ax=ax[0], line_kws=line_kws, scatter_kws=scatter_kws)\n    ax[1] = sns.regplot(test_set['wy'], predictions[:, 1], ax=ax[1], line_kws=line_kws, scatter_kws=scatter_kws)\n    ax[2] = sns.regplot(test_set['wz'], predictions[:, 2], ax=ax[2], line_kws=line_kws, scatter_kws=scatter_kws)","ad5d3ca1":"dataf = pd.read_csv('..\/input\/carworldpositions\/data_points.csv').drop('Unnamed: 0', axis=1)","8e6b2b59":"dataf.describe()","9dafac86":"# Remove outliers\ndataf = dataf[dataf['wx'] < 100]\ndataf = dataf[dataf['wy'] < 100]\ndataf = dataf[dataf['wz'] < 100]","aaa50d19":"sns.pairplot(dataf)","1c3170e0":"# Normalization (and centering) for some of the algorithms (knn, svm or nn)\ndataf['Cx'] \/= IMAGE_WIDTH\ndataf['Cy'] \/= IMAGE_HEIGHT\n\nscaler = sklearn.preprocessing.StandardScaler()\ndataf[['wx', 'wy', 'wz']] = scaler.fit_transform(dataf[['wx', 'wy', 'wz']])","d064912c":"# Train test split\nmask = np.random.random(len(dataf)) > 0.7\n\ndtrain = dataf[mask]\ndtest = dataf[~mask]\n\n# Predictor and target variable names\npredictors = ['Cx', 'Cy', 'bh', 'bw']\ntargets = ['wx', 'wy', 'wz']","f5a3e210":"# DataFrame to store the results\ntest_metrics = pd.DataFrame(columns=['Method', 'WX_Error', 'WY_Error', 'WZ_Error', 'WX_r2', 'WY_r2', 'WZ_r2'])","bb4b3a89":"rf = sklearn.ensemble.RandomForestRegressor(n_estimators=200)\nrf = rf.fit(X=dtrain[predictors], y=dtrain[targets])","b15aeec5":"preds = rf.predict(dtest[predictors])","2bdde5ae":"results = print_metrics(dtest, preds)","1e1b5e07":"test_metrics = test_metrics.append(pd.Series(('RF', *results), index=test_metrics.columns), ignore_index=True)","83cc8490":"fig, ax = plt.subplots(3, figsize=(15,16))\nplot_predictions(dtest, preds, fig, ax)","1983687c":"bt = sklearn.ensemble.GradientBoostingRegressor()\n\nmor = sklearn.multioutput.MultiOutputRegressor(bt)\nmor = mor.fit(X=dtrain[predictors], y=dtrain[targets])","d2051e12":"preds = mor.predict(dtest[predictors])","622914b7":"results = print_metrics(dtest, preds)","2cf0be7a":"test_metrics = test_metrics.append(pd.Series(('BoostingT', *results), index=test_metrics.columns), \n                                   ignore_index=True)","3f08d4cd":"fig, ax = plt.subplots(3, figsize=(15,16))\nplot_predictions(dtest, preds, fig, ax)","bf2a4d8d":"knn = neighbors.KNeighborsRegressor(10)\nknn = knn.fit(X=dtrain[predictors], y=dtrain[targets])","62fa785a":"preds = knn.predict(dtest[predictors])","4a278e90":"results = print_metrics(dtest, preds)","af43a348":"test_metrics = test_metrics.append(pd.Series(('KNN', *results), index=test_metrics.columns), \n                                   ignore_index=True)","4b30b425":"fig, ax = plt.subplots(3, figsize=(15,16))\nplot_predictions(dtest, preds, fig, ax)","20c2ef28":"svr = sklearn.svm.SVR(gamma='scale')\n\nmor = sklearn.multioutput.MultiOutputRegressor(svr)\nmor = mor.fit(X=dtrain[predictors], y=dtrain[targets])","3b7c52b4":"preds = mor.predict(dtest[predictors])","6b9e5b6e":"results = print_metrics(dtest, preds)","59d98bf9":"test_metrics = test_metrics.append(pd.Series(('SVM', *results), index=test_metrics.columns), \n                                   ignore_index=True)","001e5475":"fig, ax = plt.subplots(3, figsize=(15,16))\nplot_predictions(dtest, preds, fig, ax)","4ff5bd51":"from tensorflow import keras as k","7e5bd92c":"inp = k.layers.Input(shape=(len(predictors),))\nh = k.layers.Dense(300, activation='linear')(inp)\nh = k.layers.Dropout(.3)(h)\nh = k.layers.Dense(500, activation='relu')(h)\nh = k.layers.Dropout(.1)(h)\nh = k.layers.Dense(300, activation='linear')(h)\nh = k.layers.Dense(200, activation='linear')(h)\nh = k.layers.Dense(200, activation='selu')(h)\nout = k.layers.Dense(3, activation='linear')(h)\n\nmodel = k.models.Model(inputs=inp, outputs=out)\n\nmodel.compile(k.optimizers.Adam(), loss='mse')","6933ddd8":"h = model.fit(x=dtrain[predictors].values, y=dtrain[targets].values, \n              validation_split=.3, epochs=10, batch_size=16)","0c8a9323":"preds = model.predict(dtest[predictors].values)","168f5f3c":"results = print_metrics(dtest, preds)","37c2020a":"test_metrics = test_metrics.append(pd.Series(('NN', *results), index=test_metrics.columns), \n                                   ignore_index=True)","9f428dc1":"fig, ax = plt.subplots(3, figsize=(15,16))\nplot_predictions(dtest, preds, fig, ax)","aab8bbac":"test_metrics","d3f1101b":"# Reload dataset without normalization\ndataf = pd.read_csv('..\/input\/carworldpositions\/data_points.csv').drop('Unnamed: 0', axis=1)\n# Remove outliers\ndataf = dataf[dataf['wx'] < 100]\ndataf = dataf[dataf['wy'] < 100]\ndataf = dataf[dataf['wz'] < 100]\n\ndtrain = dataf[mask]\ndtest = dataf[~mask]","9b956972":"rf = sklearn.ensemble.RandomForestRegressor()","8ec2eb7d":"param_grid = {\n    'n_estimators':[200, 400, 500, 800, 1000, 2000]\n}\n\ngs = sklearn.model_selection.GridSearchCV(rf, n_jobs=4, param_grid=param_grid)","5691c307":"gs = gs.fit(dtrain[predictors], dtrain[targets])","3df61987":"pd.concat([pd.DataFrame(gs.cv_results_[\"params\"]),\n           pd.DataFrame(gs.cv_results_[\"mean_test_score\"], columns=[\"MSE\"])],axis=1)\n","131d918e":"rf = sklearn.ensemble.RandomForestRegressor(n_estimators=200)\nrf = rf.fit(X=dtrain[predictors], y=dtrain[targets])","6f93cab7":"preds = rf.predict(dtest[predictors])","cdf6a35b":"results = print_metrics(dtest, preds)","ff2af24e":"# Save the model if you need it\n# joblib.dump(rf, 'pos_predictor.joblib')","222b850b":"#\u00a0Predicting 3D World position from Car bounding boxes.\n\nThis kernel aims to find a model which, given a 2D bounding box (defined as the center and its height\/width), can predict the position of a car in the real world (distance, height and lateral displacement).\n\nHere I test several baseline models and, later, fine tune the best one.\n\nThe dataset I'm going to be using is a derived one (built by me): https:\/\/www.kaggle.com\/alvaroibrain\/carworldpositions, which contains the features mentioned above. The dataset has been made from the Baidu one using YOLO for finding the bounding boxes and then, finding the matches between the BBoxes and the real world points.\n\nHope this approach can serve you to improve your predictions.","6db4c57c":"# Neural net","524ba93a":"## SVM","7c7040f5":"##\u00a0Boosting","3b36aa4a":"Random Forest seems to be the baseline winner. I will finetune it.\n\nThe X position (lateral displacement is well predicted), however, Y and Z have a little more variance. This needs to be improved.","4862fa53":"#\u00a0Model selection\n\nWe will test baseline models to choose one to do the fine-tuning","3cc54de8":"##\u00a0KNN","d59515cf":"200 trees seems OK","8b8e3808":"## Random Forest","2a5814f0":"# Results"}}