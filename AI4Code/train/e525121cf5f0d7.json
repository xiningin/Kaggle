{"cell_type":{"baccf49e":"code","34bf17cd":"code","265cc112":"code","e9f2a910":"code","d1d8e490":"code","0b95a809":"code","85542be4":"code","bb3efea0":"code","4bcb86b2":"code","37e1e5a5":"code","aba626e0":"code","6e43d4d4":"code","92811010":"code","2d365ab8":"code","ab2c57cb":"code","7fe05061":"code","9851463f":"code","9856f663":"code","d30351d6":"code","6541b9bd":"code","99d568a1":"code","5023d7bc":"code","1242003e":"code","a6bd6d6a":"code","a1aa557d":"code","214f1786":"code","cf27f391":"code","fb0b67ca":"code","948a646a":"code","c217b035":"code","954184ef":"code","bbe8cd80":"code","4eff09c6":"code","f181ac53":"code","6a15e1d8":"markdown","734dc33a":"markdown","a051340c":"markdown","81b053a1":"markdown","e3aa5c17":"markdown","1f61775e":"markdown","f2fb168f":"markdown","46ce2593":"markdown","a6bb5dc1":"markdown","c19909a8":"markdown","c5604049":"markdown","414dc5c2":"markdown","06e53ac0":"markdown","7898bb65":"markdown","3d281feb":"markdown","5c7b58a1":"markdown","c8cf9deb":"markdown","287a2539":"markdown","01a12cf5":"markdown","bbc87bf0":"markdown","047515ef":"markdown","571a52e5":"markdown","b7750cae":"markdown","e834b5dc":"markdown","6cd8eccc":"markdown","7f0942ed":"markdown","4286992e":"markdown","686c6c7c":"markdown"},"source":{"baccf49e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34bf17cd":"import matplotlib.pyplot as plt\n","265cc112":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","e9f2a910":"data","d1d8e490":"edu = pd.read_csv('\/kaggle\/input\/ense3ict\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","0b95a809":"edu.head()","85542be4":"edu.tail()","bb3efea0":"edu.describe()","4bcb86b2":"edu['Value']","37e1e5a5":"edu[10:14]","aba626e0":"edu.iloc[90:94][['TIME','GEO']]","6e43d4d4":"edu[edu['Value'] > 6.5].tail()","92811010":"edu[edu[\"Value\"].isnull()].head()","2d365ab8":"edu.max(axis = 0)","ab2c57cb":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))\n","7fe05061":"s = edu[\"Value\"]\/100\ns.head()","9851463f":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","9856f663":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","d30351d6":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","6541b9bd":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","99d568a1":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","5023d7bc":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","1242003e":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","a6bd6d6a":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","a1aa557d":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","214f1786":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","cf27f391":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","fb0b67ca":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","948a646a":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","c217b035":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","954184ef":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","bbe8cd80":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","4eff09c6":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","f181ac53":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')\n\n\n","6a15e1d8":"the sqrt function from the NumPylibrary to perform the square root of each value in the column Value.","734dc33a":"The result of all these functions applied to a row or column is always a number. Meanwhile, if a function is applied to a DataFrameor a selection of rows and columns, then you can specify if the function should be applied to the rows for each column (setting the axis=0 keyword on the invocation of the function), or it should be applied on the columns for each row (setting the axis=1 keyword on the invocation of the function).","a051340c":"We can rearrange our data using the function pivot_table. Here, we can specify which columns will be the new indexes, the new values, and the new columns","81b053a1":"If we want to select a subset of rows from a DataFrame, we can do so by indicating a range of rows separated by a colon (:) inside the square brackets. This is known as a slice of rows:\n\nThis instruction returns the slice of rows from the 10th to the 13th position","e3aa5c17":"Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nwe just want quick statistical information on all the numeric columns in a DataFrame, we can use the function describe().","1f61775e":"To remove NaNvalues, instead of the generic functiondrop, we can use the specific function dropna()","f2fb168f":"if we want to plot the accumulated values for each country over the last 6 years, we can take the Seriesobtained","46ce2593":"7. What do you observe regarding the parameter ascending=False?\nRanks are assigned in the order they appear in the array, avoiding gaps between ranking.\n","a6bb5dc1":"If we want to return to the original order, we can sort by an index using the function sort_indexand specifying axis=0:\n\n","c19909a8":"we want to do is to insert a new row at the bottom of the DataFrame, we can use the Pandas function append.We must be aware to setting the ignore_indexflag in the append method to True, otherwise the index 0 is given to this new row, which will produce an error if it already exists:","c5604049":"the Pandas maxfunction excludes NaNvalues, thus they are interpreted as missing values, while the standard Python max function will take the mathematical interpretation of NaNand return it as the maximum:","414dc5c2":"each column is treated as a separated Series. For example, instead of printing the accumulated value over the years, we can plot the value for each year.","06e53ac0":"5. What does this index return? What does the first index represent? And the second one?\n- Boolean indexing uses the result of a Boolean operation over the data, returning a mask with True or False for each row. Row with true marked is selected.","7898bb65":"Finally, if we want to remove this row, we need to use the function dropagain. Now we have to set the axis to 0, and specify the index of the row we want to remove. Since we want to remove the last row, we can use the max function over the indexes to determine which row is.","3d281feb":"We can sort a DataFrameusing any column, using the sort function.","5c7b58a1":"we assign the Seriesthat results from dividing the columnValueby the maximum value in the same column to a new column named ValueNorm.","c8cf9deb":"The following code to read and show the content: the educ_figdp_1_Data.csv file stored in the same directoryas our notebook directory.","287a2539":"If we want to select a subset of columns and rows using the labels as our references instead of the positions, we can use ilocindexing:\n\n","01a12cf5":"we want to make a global ranking considering all the years, we can sum up all the columns and rank the result. Then we can sort the resulting values to retrieve the top five countries for the last 6 years, in this way:","bbc87bf0":"The function isnull()can be used to remove NaN values. This has a similar effect to filtering the NaN values, as explained above, but here the difference is that a copy of the DataFramewithout the NaNvalues is returned, instead of a view.","047515ef":"What does the method tail()return?","571a52e5":"instead of removing the rows containing NaN, we want to fill them with another value, then we can use the method fillna()","b7750cae":"Which measures does the result show? It seems that it shows some default values, can you guess which ones?\n------we want to select a subset of data from a DataFrame, it is necessary to indicate this subset using square brackets ([  ])after the DataFrame. ","e834b5dc":"The value the function returns will be the square of that value.","6cd8eccc":"The only safe way to tell whether a value is missing in a DataFrameis by using the function isnull(). Indeed, this function can be used to filter rows with missing values:","7f0942ed":"we can use the new index to select specific rows by label, using the locoperator","4286992e":"we use the pandas DataFrameobject constructor with a dictionary of lists as argument. The value of each entry in the dictionary is the name of the column, and the lists are their values.","686c6c7c":"What happens if we give a number as argument to the method head()?"}}