{"cell_type":{"b514ba46":"code","e7549bfc":"code","865d4546":"code","318f8fef":"code","23162892":"code","18a6c793":"code","6e936321":"code","f5a03f4d":"code","669b1cde":"code","ea2d7fd7":"code","72a992eb":"code","5daafe14":"code","0f0ad212":"code","0ec19982":"code","0331466c":"code","b2c9cf97":"code","d01816c8":"code","c5079372":"markdown","ab8bde89":"markdown","b4b02178":"markdown"},"source":{"b514ba46":"#import packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\nfrom keras.datasets import mnist\n\nimport matplotlib.pyplot as plt\nimport pandas as pd","e7549bfc":"#load mnist dataset\n(xtrain, ytrain), (xtest, ytest) = mnist.load_data()\nprint('images in train dataset : {}'.format(xtrain.shape))\nprint('images in test dataset  : {}'.format(xtest.shape))","865d4546":"plt.imshow(xtrain[0])","318f8fef":"#preprocessing\nnum_pixels = xtrain.shape[1]*xtrain.shape[2]\n\nxtrain_ann = xtrain.reshape(xtrain.shape[0], num_pixels).astype('float32')\nxtest_ann = xtest.reshape(xtest.shape[0], num_pixels).astype('float32')\nprint('new shape in train dataset : {}'.format(xtrain_ann.shape))\nprint('new shape in test dataset  : {}'.format(xtest_ann.shape))","23162892":"xtrain_ann = xtrain_ann\/255.0\nxtest_ann = xtest_ann\/255.0\n\nytrain = to_categorical(ytrain)\nytest = to_categorical(ytest)\n\nnum_classes = ytest.shape[1]\nprint('shape of output : {}'.format(num_classes))","18a6c793":"#create model\ndef classificationModelANN():\n  model = Sequential()\n  model.add(Dense(num_pixels, activation='relu', input_shape=(num_pixels,)))\n  model.add(Dense(100, activation='relu'))\n  model.add(Dense(num_classes, activation='relu'))\n\n  model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n  return model","6e936321":"#fit model, evaluate model\nmodelANN = classificationModelANN()\n\nannhist = modelANN.fit(xtrain_ann, ytrain, validation_data = (xtest_ann, ytest), epochs = 10, verbose = 1)\n\nscoreANN = modelANN.evaluate(xtest_ann, ytest, verbose=0)","f5a03f4d":"print('Accuracy: {}%'.format(round(scoreANN[1],3)))","669b1cde":"#plot acuuracy graph\nplt.plot(range(1,11), annhist.history['val_accuracy'], label='valid')\nplt.plot(range(1,11), annhist.history['accuracy'], label='train')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.ylim(0,1)\nplt.grid()\nplt.legend()\nplt.show()","ea2d7fd7":"#load packages\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\n\nfrom keras.layers import Flatten","72a992eb":"#preprocessing\nxtrain_cnn = xtrain.reshape(xtrain2.shape[0], 28, 28, 1).astype('float32')\nxtest_cnn = xtest.reshape(xtest2.shape[0], 28, 28, 1).astype('float32')\n\nxtrain_cnn = xtrain_cnn\/255\nxtest_cnn = xtest_cnn\/255\n\n#ytest, ytrain is same for ann and cnn","5daafe14":"#create model\ndef classificationModelCNN():\n  model = Sequential()\n  model.add(Conv2D(16, (4,4), strides=(1,1), activation ='relu', input_shape=(28,28,1)))\n  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n  model.add(Conv2D(32, (4,4), strides=(1,1), activation ='relu', input_shape=(28,28,1)))\n  model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n  \n  model.add(Flatten())\n\n  model.add(Dense(100, activation='relu'))\n  model.add(Dense(num_classes, activation='softmax'))\n\n  model.compile(\n      optimizer='adam',\n      loss='categorical_crossentropy',\n      metrics=['accuracy']\n  )\n  return model","0f0ad212":"#fit model, evaluate model\nmodelCNN = classificationModelCNN()\n\ncnnhist = modelCNN.fit(\n    xtrain_cnn,\n    ytrain,\n    validation_data = (xtest_cnn, ytest),\n    epochs = 10,\n    verbose = 1\n)\n\nscoreCNN = modelCNN.evaluate(xtest_cnn, ytest, verbose = 0)","0ec19982":"print('Accuracy: {}%'.format(round(scoreCNN[1],5)))  ","0331466c":"#plot accuracy graph\nplt.plot(range(1,11), cnnhist.history['val_accuracy'], label='valid')\nplt.plot(range(1,11), cnnhist.history['accuracy'], label='train')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.ylim(0.8,1)\nplt.grid()\nplt.legend()\nplt.show()","b2c9cf97":"#plot ann vs cnn over validation accuracy\nplt.plot(range(1,11), cnnhist.history['val_accuracy'], label='CNN')\nplt.plot(range(1,11), annhist.history['val_accuracy'], label='ANN')\nplt.title('CNN vs ANN')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.ylim(0.4,1)\nplt.grid()\nplt.legend()\nplt.show()","d01816c8":"print('ANN Accuracy : {}'.format(round(scoreANN[1]*100,5)))\nprint('CNN Accuracy : {}'.format(round(scoreCNN[1]*100,5)))","c5079372":"<h3>Comparision of ANN and CNN over MNIST Dataset<\/h3>\n<h5>This is the original dataset with 60\/10 split<\/h5>\n<h5>The results are at the end of the notebook<\/h5>","ab8bde89":"<h1>ANN Model<\/h1>","b4b02178":"<h1>CNN Model<\/h1>"}}