{"cell_type":{"999df8a2":"code","46b12cfc":"code","d63a8585":"code","8aee174a":"code","b1ed2b77":"code","68135f36":"code","eb4b1fb7":"code","9c31cb85":"code","e2d387c0":"code","5eb0b345":"code","76f7606c":"code","95aa7393":"code","8bac0fee":"code","cb4eae43":"code","88ccb3b0":"code","8cc4438e":"code","2f0a55a7":"code","780ff0b1":"code","c74358a3":"code","5b369876":"code","dd49da8d":"code","f6711f2b":"code","4ce4cf77":"code","aeaa74de":"code","6b6bf99a":"code","b2654bd3":"code","7a8f6b46":"code","fa1c49eb":"code","b4594656":"code","87787117":"code","03cb28bc":"code","dd3aa4bc":"code","3c28c57e":"code","ec772293":"code","a9f861f7":"code","8409334a":"code","2e3c988f":"code","bffcd505":"code","7fbe9948":"code","affb9ce2":"code","589c1e87":"code","7380be99":"markdown","a3b4aa98":"markdown","0cbaad44":"markdown","91a82c5f":"markdown","6865aeda":"markdown","fc86f928":"markdown","2b11eb75":"markdown","61eb2adf":"markdown","449f95b8":"markdown","ff3a9f38":"markdown","b4b650af":"markdown","437bda08":"markdown","c7f5f65c":"markdown","0c62cc74":"markdown","5dcd5dfe":"markdown","77dfd590":"markdown","37606ba6":"markdown","f54e02cf":"markdown","3892f1a5":"markdown","f01f8ee6":"markdown","419c7bb6":"markdown","af7525ca":"markdown","ebcff572":"markdown","54aa7f45":"markdown"},"source":{"999df8a2":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, \\\n    roc_auc_score, confusion_matrix, classification_report, plot_roc_curve","46b12cfc":"df = pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\")","d63a8585":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows',None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 170)\n\ndf.head(20)","8aee174a":"df.shape","b1ed2b77":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","68135f36":"check_df(df)","eb4b1fb7":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","9c31cb85":"def check_outlier(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","e2d387c0":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","5eb0b345":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nfor col in num_cols:\n    print(col, check_outlier(df, col))","76f7606c":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","95aa7393":"for col in num_cols:\n    replace_with_thresholds(df, col)","8bac0fee":"for col in num_cols:\n    print(col, check_outlier(df, col))\n","cb4eae43":"df.isnull().values.any()\n","88ccb3b0":"df.head()","8cc4438e":"def zeros_values(df):\n    median = df[num_cols].median()\n    df[num_cols] = df[num_cols].replace(to_replace = 0, value = median)\nzeros_values(df)\ndf.head(20)","2f0a55a7":"\ndf.loc[(df[\"Age\"] < 18), \"NEW_AGE\"] = \"Young\"\ndf.loc[(df[\"Age\"] > 18) & (df[\"Age\"] < 56), \"NEW_AGE\"] = \"Mature\"\ndf.loc[(df[\"Age\"] > 56), \"NEW_AGE\"] = \"Old\"","780ff0b1":"df.loc[(df[\"Insulin\"] >=120), \"NEW_INSULIN\"] = \"Anormal\"\ndf.loc[(df[\"Insulin\"] < 120), \"NEW_INSULIN\"] = \"normal\"","c74358a3":"df.loc[(df[\"BMI\"] < 18.5), \"NEW_BMI\"] = \"under\"\ndf.loc[(df[\"BMI\"] >= 18.5) & (df[\"BMI\"] <= 24.9) ,\"NEW_BMI\"] = \"healthy\"\ndf.loc[(df[\"BMI\"] >= 25) & (df[\"BMI\"] <= 29.9) ,\"NEW_BMI\"]= \"over\"\ndf.loc[(df[\"BMI\"] >= 30), \"NEW_BMI\"] = \"obese\"","5b369876":"df.loc[(df[\"BloodPressure\"] < 79), \"NEW_BLOODPRESSURE\"] = \"Normal\"\ndf.loc[(df[\"BloodPressure\"] > 79) & (df[\"BloodPressure\"] < 89), \"NEW_BLOODPRESSURE\"] = \"Hypertension_S1\"\ndf.loc[(df[\"BloodPressure\"] > 89) & (df[\"BloodPressure\"] < 123), \"NEW_BLOODPRESSURE\"] = \"Hypertension_S2\"","dd49da8d":"df.loc[(df[\"Glucose\"] < 70), \"NEW_GLUCOSE\"] = \"Low\"\ndf.loc[(df[\"Glucose\"] >= 70) & (df[\"Glucose\"] < 99), \"NEW_GLUCOSE\"] = \"Normal\"\ndf.loc[(df[\"Glucose\"] > 99) & (df[\"Glucose\"] <= 125), \"NEW_GLUCOSE\"] = \"Secret\"\ndf.loc[(df[\"Glucose\"] >= 126) & (df[\"Glucose\"] < 200), \"NEW_GLUCOSE\"] = \"High\"","f6711f2b":"df[\"DiaPedFunc\"] = pd.qcut(df[\"DiabetesPedigreeFunction\"], 3, labels=[\"Low\", \"Medium\", \"High\"])","4ce4cf77":"df.loc[df['Pregnancies'] == 0, \"NEW_PREGNANCIES\"] = \"NoPregnancy\"\ndf.loc[((df['Pregnancies'] > 0) & (df['Pregnancies'] <= 4)), \"NEW_PREGNANCIES\"] = \"NormalPregnancy\"\ndf.loc[(df['Pregnancies'] > 4), \"NEW_PREGNANCIES\"] = \"OverPregnancy\"","aeaa74de":"df.head()","6b6bf99a":"df.shape","b2654bd3":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col].astype(str))\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtypes == \"O\"\n               and len(df[col].unique()) == 2]\n\nfor col in df.columns:\n    label_encoder(df, col)","7a8f6b46":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\n\nohe_cols = [col for col in df.columns if 10 >= len(df[col].unique()) > 2]\n\none_hot_encoder(df, ohe_cols, drop_first=True)","fa1c49eb":"rs = RobustScaler()\ndf[num_cols] = rs.fit_transform(df[num_cols])","b4594656":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)","87787117":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)","03cb28bc":"log_model = LogisticRegression().fit(X_train, y_train)","dd3aa4bc":"y_pred = log_model.predict(X_train)\naccuracy_score(y_train, y_pred)","3c28c57e":"y_prob = log_model.predict_proba(X_test)[:, 1]\ny_pred = log_model.predict(X_test)","ec772293":"import seaborn as sns\nfrom matplotlib import pyplot as plt\ndef plot_confusion_matrix(y, y_pred):\n    acc = round(accuracy_score(y, y_pred), 2)\n    cm = confusion_matrix(y, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()\n\nplot_confusion_matrix(y_test, y_pred)","a9f861f7":"# ACCURACY\naccuracy_score(y_test, y_pred)","8409334a":"# PRECISION\nprecision_score(y_test, y_pred)","2e3c988f":"# RECALL\nrecall_score(y_test, y_pred)","bffcd505":"# F1\nf1_score(y_test, y_pred)","7fbe9948":"# ROC CURVE\nplot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()","affb9ce2":"# AUC\nroc_auc_score(y_test, y_prob)","589c1e87":"# Classification report\nprint(classification_report(y_test, y_pred))","7380be99":"categorize the age variable","a3b4aa98":"Using one-hot-encoder for categorical cols","0cbaad44":"Split the data by train and test. Test size is 20% and train size is 80%","91a82c5f":"What about missing values?","6865aeda":"Check the outliers again!","fc86f928":"Which features have outliers?","2b11eb75":"Define the target variable and features","61eb2adf":"Replacing outliers with upper and lower limit","449f95b8":"Categorize the insulin values (normal and anormal)","ff3a9f38":"First look at the data","b4b650af":"Build the model and train","437bda08":"Evaluate the success of the model with train set","c7f5f65c":"**DATA PREP & EDA**","0c62cc74":"Using the label encoder for data types object and unique values equal to 2","5dcd5dfe":"Categorize the Blood Pressure","77dfd590":"Categorize the BMI (under,healthy,over and obese)","37606ba6":"I replaced the values with a value of zero in the data with the median.","f54e02cf":"Evaluate the model accuracy with test set","3892f1a5":"**Diabetes Prediction with Logistic Regression**\n\nFeatures\n\nPregnancies, Glucose, Blood Pressure, Skin Thickness, Insulin, Diabetes Pedigree Function, Age and Outcome (if you have the disease (1) or haven't (0)\n","f01f8ee6":"**Feature Engineering**","419c7bb6":"We were able to separate the variables in the data set as categorical and numerical.","af7525ca":"Categorize the Glucose","ebcff572":"Scale the data,\n\nI used RobustScaler because it robust the outliers","54aa7f45":"Adjust thresholds and check the outliers "}}