{"cell_type":{"c490185a":"code","aa6b3b97":"code","d6b373a1":"code","e41ecefa":"code","fc9aba52":"code","a537d7e3":"code","01d68753":"code","c34287fb":"code","b21db0b6":"code","8bde3e57":"code","f2430f92":"code","bb9d966e":"code","bfa11d52":"code","f21881d2":"code","2f6976c8":"code","c2c112f3":"code","149fd007":"code","226cd766":"code","71168f59":"code","8b336990":"code","fe8c395d":"code","b8af0f69":"code","5f7728c1":"code","372f99f1":"code","10fc2c2c":"code","e6181493":"code","1fe2ba66":"markdown","3b0a0647":"markdown","efe38b1c":"markdown","52cba51d":"markdown","3d08ac71":"markdown","85e9425a":"markdown","1a4b0aaa":"markdown","2f6aab0e":"markdown","c5d0655b":"markdown","cca5b0b8":"markdown","f69a474e":"markdown","6bca5eee":"markdown","089239b0":"markdown","aeac90a2":"markdown","bd845e20":"markdown","c36097c7":"markdown","8ac68845":"markdown","0449cde9":"markdown","3db25857":"markdown","b31efc34":"markdown","f3b93a9d":"markdown","ca1c0852":"markdown","70d50123":"markdown","060867d6":"markdown","35ae201e":"markdown","0378134f":"markdown","968d7242":"markdown","46427cf4":"markdown","f0f47aff":"markdown","3af8ba11":"markdown","c40de527":"markdown","aa2e1862":"markdown","b32476b5":"markdown","120cd26b":"markdown","34712ad1":"markdown","f5b76533":"markdown","09c0544a":"markdown","c69a4c5f":"markdown","a9956624":"markdown","56549c80":"markdown","9687cd78":"markdown","34cc2761":"markdown","02e7f82e":"markdown"},"source":{"c490185a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt # Import the library that handles coloring\nimport matplotlib.patches as pch # Import to add figures\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.cluster import KMeans # Clustering algorithm\nfrom  matplotlib.ticker import MaxNLocator # Ticker formatter.\n\n# Get our Human Develoment Index dataset.\nhdi_data = \"\/kaggle\/input\/hdi2019\/HDI.csv\"\n# Get our World Happiness Ladder Score.\nwhls_data = \"\/kaggle\/input\/world-happiness-ranking\/Happiness.csv\"","aa6b3b97":"# Read my dataset and make if a dataframe called \"hdi_df\". Use the row one(second row) as headers.\nhdi_df = pd.read_csv(hdi_data, header=1)\n# Show the result\nhdi_df.head()","d6b373a1":"# Drop all the columns that have 'all' values as NaN.\nhdi_df.dropna(axis=1, how='all', inplace=True)\n# Show the result\nhdi_df.head()","e41ecefa":"# Drop all the columns but 'HDI Rank (2018)', 'Country' and '2018'.\nhdi_df = hdi_df[['HDI Rank (2018)','Country', '2018']]\n# Rename the 'HDI Rank (2018)' column to just 'Rank' to make it easier to handle, and rename the '2018' column to 'HDI'.\nhdi_df.rename(columns={'HDI Rank (2018)':'Rank', '2018':'HDI'}, inplace=True)\n# Show the result.\nhdi_df.head()","fc9aba52":"# First, remove the rows where 'Rank' is NaN,\nhdi_df.dropna(axis=0, subset=['Rank'], inplace=True)\n# Convert the 'Rank' to numberic to that we can sort the dataframe based on it as numbers. Any parsing error should be coerced(converted to NaN)..\nhdi_df['Rank'] = pd.to_numeric(hdi_df['Rank'], errors='coerce')\n# Sort our values using the 'Rank' column and save it 'inplace'.\nhdi_df.sort_values(by='Rank', inplace=True)\n# Show the tail to see if the conversion left any NaNs.\nhdi_df.tail()","a537d7e3":"# Save the regions to a new dataframe. The regions are the rows that contain null. \nregions_df = hdi_df[hdi_df['Rank'].isnull()]\n# Print the regions dataframe to make sure we only got regions and not countries.\nprint(regions_df)\n# Remove the regions from our hdi dataframe by grabing the notnull ones.\nhdi_df = hdi_df[hdi_df['Rank'].notnull()]\n# Cast the 'Rank' column to integer.\nhdi_df['Rank'] = hdi_df['Rank'].astype(int)\n# Change the Index to be the 'Coutry'\nhdi_df.set_index('Country',inplace=True)\n# Show the result.\nhdi_df.head()","01d68753":"# Read my dataset and make if a dataframe called \"whls_df\".\nwhls_df = pd.read_csv(whls_data)\n# Show the result.\nwhls_df.head()","c34287fb":"# Drop all the columns but 'Ladder score' and 'Country name'.\nwhls_df = whls_df[['Ladder score','Country name']]\n# Rename the 'Ladder score' column to 'WHLS', 'Country name' to just 'Country'\nwhls_df.rename(columns={'Ladder score':'WHLS', 'Country name':'Country'}, inplace=True)\n# Show the result.\nwhls_df.head()","b21db0b6":"# Sort our values using the 'WHLS' column in descending order and save it inplace.\nwhls_df.sort_values('WHLS', ascending=False, inplace=True)\n# Calculate the 'Rank'\nwhls_df['Rank'] = range(1,len(whls_df)+1)\n#\n# Show the result.\nwhls_df.head()","8bde3e57":"# Get the column list.\ncols = list(whls_df.columns)\n# Get the column indexes.\na, b, c = cols.index('WHLS'), cols.index('Country'), cols.index('Rank')\n# Rearrenge the columns in our cols list.\ncols[c], cols[b], cols[a] = cols[a], cols[b], cols[c]\n# Overwrite the dataframe to save the changes.\nwhls_df = whls_df[cols]\n# Change the Index to be the 'Coutry'\nwhls_df.set_index('Country',inplace=True)\n# Show the result.\nwhls_df.head()","f2430f92":"# Show the 10 happiest contries in the world.\nwhls_df.head(10)","bb9d966e":"# Sort our values using the 'Rank' column in descending order to get the least happy top-down.\nwhls_df_temp = whls_df.sort_values('Rank', ascending=False)\n# Show the top 10 which will now be the least happy contries in the world.\nwhls_df_temp.head(10)","bfa11d52":"# Show the 10 most developed countries in the world.\nhdi_df.head(10)","f21881d2":"# Sort our values using the 'Rank' column in descending order to get the least developed top-down.\nhdi_df_temp = hdi_df.sort_values('Rank', ascending=False)\n# Show the top 10 which will now be the least developed contries in the world.\nhdi_df_temp.head(10)","2f6976c8":"# Merge the dataframes of both the HDI and the WHLS using an outer join on the index.\nouter_country_df = hdi_df.merge(whls_df, right_index=True, left_index=True, how='outer',\n          suffixes=('_hdi', '_whls'))\n# Check the result.\nprint(outer_country_df)\n\n# Get the missing Countries(index) which would end up have the Ranks(either) as Null after the merge.\nmissing_in_hdi = outer_country_df[outer_country_df['Rank_hdi'].isnull()].index\nmissing_in_whls = outer_country_df[outer_country_df['Rank_whls'].isnull()].index\n# Convert the sequences resulting from it to a list.\nmissing_in_hdi = missing_in_hdi.tolist()\nmissing_in_whls = missing_in_whls.tolist()\n\n# Print the results.\nprint(\"Missing in HDI:\")\nprint(missing_in_hdi)\nprint(\"\\nMissing in WHLS:\")\nprint(missing_in_whls)","c2c112f3":"# Make our lists of names to be change on each of the studies.\nhdi_renamed_indexes = {'Czechia': 'Czech Republic',\n                       'Hong Kong, China (SAR)': 'Hong Kong',\n                       'Korea (Republic of)': 'South Korea',\n                       'Bolivia (Plurinational State of)': 'Bolivia',\n                       'Viet Nam': 'Vietnam',\n                       'Russian Federation': 'Russia',\n                       'Iran (Islamic Republic of)': 'Iran',\n                       'North Macedonia': 'Macedonia',\n                       'Congo': 'Congo (Brazzaville)',\n                       'Eswatini (Kingdom of)': 'Swaziland',\n                       \"Lao People's Democratic Republic\": 'Laos',\n                       'Congo (Democratic Republic of the)': 'Congo (Kinshasa)',\n                       \"C\u00f4te d'Ivoire\": 'Ivory Coast',\n                       'Venezuela (Bolivarian Republic of)': 'Venezuela',\n                       'Palestine, State of': 'Palestine',\n                       'Tanzania (United Republic of)': 'Tanzania',\n                       'Moldova (Republic of)': 'Moldova',\n                       'Micronesia (Federated States of)': 'Micronesia',\n                       'Syrian Arab Republic': 'Syria',\n                       'Brunei Darussalam': 'Brunei',\n                       'Timor-Leste': 'East Timor'}\nwhls_renamed_indexes = {\"Palestinian Territories\":'Palestine',\n                        'Hong Kong S.A.R. of China':'Hong Kong',\n                        'Taiwan Province of China':'Taiwan'}\n# Rename the indexes using the lists we created.\nhdi_df.rename(index=hdi_renamed_indexes, inplace=True)\nwhls_df.rename(index=whls_renamed_indexes, inplace=True)\n# Print the results.\nprint(hdi_df)\nprint(whls_df)","149fd007":"# Re-Merge the dataframes of both the HDI and the WHLS using an outer join on the index now that the names are fixed.\nouter_country_df = hdi_df.merge(whls_df, right_index=True, left_index=True, how='outer',\n          suffixes=('_hdi', '_whls'))\n\n# Get the missing Countries(index) which would end up have the Ranks(either) as Null after the merge.\nmissing_in_hdi = outer_country_df[outer_country_df['Rank_hdi'].isnull()].index\nmissing_in_whls = outer_country_df[outer_country_df['Rank_whls'].isnull()].index\n# Convert the sequences resulting from it to a list.\nmissing_in_hdi = missing_in_hdi.tolist()\nmissing_in_whls = missing_in_whls.tolist()\n\n# Print the results.\nprint(\"Missing in HDI:\")\nprint(missing_in_hdi)\nprint(\"\\nMissing in WHLS:\")\nprint(missing_in_whls)","226cd766":"# Remove the list of missing countries in WHLS from HDI.\nhdi_df.drop(missing_in_whls, inplace=True)\n# Sort our values using the 'HDI' column in descending order and save it inplace.\nhdi_df.sort_values('HDI', ascending=False, inplace=True)\n# Re-calculate the 'Rank'.\nhdi_df['Rank'] = range(1,len(hdi_df)+1)\n# Print the result for cofirmation\nprint(hdi_df)\n\n# Remove the list of missing countries in HDI from WHLS.\nwhls_df.drop(missing_in_hdi, inplace=True)\n# Sort our values using the 'WHLS' column in descending order and save it inplace.\nwhls_df.sort_values('WHLS', ascending=False, inplace=True)\n# Re-calculate the 'Rank'.\nwhls_df['Rank'] = range(1,len(whls_df)+1)\n# Print the result for cofirmation\nprint(whls_df)","71168f59":"# Inner merge using the both right and left index as matching value. We then add suffixes to the Ranks of the studies for differentiation.\ninner_country_df = hdi_df.merge(whls_df, right_index=True, left_index=True, suffixes=('_hdi', '_whls'))","8b336990":"# Extract the countries that are in both the top 20 of HDI and top 20 of WHLS. We make sure we create a copy of the view so that we don't alter the joined dataframe because it will be used later.\nboth_top_df = inner_country_df[(inner_country_df['Rank_hdi'] <= 20) & (inner_country_df['Rank_whls'] <= 20)].copy()\n# Drop the HDI and WHSL columns because we already used them to re-calculate the Ranks so we don't need them for these questions anymore.\nboth_top_df.drop(columns=['HDI', 'WHLS'], inplace=True)\n# Sort our values using the index(Country) in ascending order(alphabetical) and save it inplace.\nboth_top_df.sort_index(inplace=True)\n# Print the result to verify.\nprint(both_top_df)\n\n# Now create a bar plot using 'ggplot' style to be able to see the countries that match in the top 20 visually.\nwith plt.style.context(\"ggplot\"):\n    # Plot a bar chart, rotating the ticks and increasing the figure size.\n    both_top_df.plot(kind='bar', rot=90, figsize=(15, 15))\n    # Make sure we force the Y Axis to shot the values as integers.\n    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))\n    # We also going to include all the ticks from the min (0) and the max(20).\n    plt.yticks(np.arange(min(both_top_df['Rank_hdi']), max(both_top_df['Rank_hdi'])+1, 1.0))\n    # Finally rename the rank lengeds so that we don't show the undescore.\n    plt.legend([\"HDI Rank\", \"WHLS Rank\"])\n    # Shot the Y Axis label.\n    plt.ylabel(\"Rank\")\n# Show the plot\nplt.show()","fe8c395d":"# Extract the countries that are in both the bottom 20 of HDI and bottom 20 of WHLS. We make sure we create a copy of the view so that we don't alter the joined dataframe because it will be used later.\nboth_bot_df = inner_country_df[(inner_country_df['Rank_hdi'] > 130) & (inner_country_df['Rank_whls'] > 130)].copy()\n# Drop the HDI and WHSL columns because we already used them to re-calculate the Ranks so we don't need them for these questions anymore.\nboth_bot_df.drop(columns=['HDI', 'WHLS'], inplace=True)\n# Sort our values using the index(Country) in ascending order(alphabetical) and save it inplace.\nboth_bot_df.sort_index(inplace=True)\n# Print the result to verify.\nprint(both_bot_df)\n\n# Now create a bar plot using 'ggplot' style to be able to see the countries that match in the top 20 visually.\nwith plt.style.context(\"ggplot\"):\n    # Plot a bar chart, rotating the ticks and increasing the figure size.\n    both_bot_df.plot(kind='bar', rot=90, figsize=(15, 15))\n    # Make sure we force the Y Axis to shot the values as integers.\n    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))\n    # We also going to include all the ticks from the min (131) and the max(150).\n    plt.yticks(np.arange(min(both_bot_df['Rank_whls'])-1, max(both_bot_df['Rank_whls'])+1, 1.0))\n    # Set the limits to (131,150) so that we only show the last few ranks.\n    plt.gca().set_ylim(bottom=131, top=150)\n    # Finally rename the rank lengeds so that we don't show the undescore.\n    plt.legend(['HDI Rank', 'WHLS Rank'])\n    # Shot the Y Axis label.\n    plt.ylabel(\"Rank\")\n# Show the plot\nplt.show()","b8af0f69":"# Create a scatter plot using 'ggplot' style to be able to see how close to the center the countries are.\nwith plt.style.context(\"ggplot\"):\n    # Increase the figure size\n    plt.figure(figsize=(15, 15))\n    # Create the scatter using HDI and WHLS as x and y axis.\n    plt.scatter(inner_country_df['Rank_hdi'],inner_country_df['Rank_whls']); \n    # This line will represent the spot where the Ranks are the same. The closer the Countries are to it, the more related HDI and WHLS are.\n    plt.plot([inner_country_df['Rank_hdi'].min(), inner_country_df['Rank_hdi'].max()],[inner_country_df['Rank_whls'].min(), inner_country_df['Rank_whls'].max()],\n             \"r--\", label='Same Rank', color='Black')\n    # Show the legend\n    plt.legend()\n    # Set the X Axis lavel\n    plt.xlabel(\"HDI Rank\")\n    # Set the X Axis lavel\n    plt.ylabel(\"WHLS Rank\")\n    # Invert the axis so that the top ones show up on the top-right corner.\n    plt.gca().invert_xaxis()\n    plt.gca().invert_yaxis()\n# Shot the plot\nplt.show()","5f7728c1":"# Calculate the absolute value of the different between the ranks to see how far appart from each other they are.\ninner_country_df['Rank_Diff'] = abs(inner_country_df['Rank_hdi'] - inner_country_df['Rank_whls'])\n# Print the result DataFrame to see how it looks.\nprint(inner_country_df)\n# Create a histogram plot using 'ggplot' style to be able to see how the rank differences are distributed.\nwith plt.style.context(\"ggplot\"):\n    # Increase the figure size\n    plt.figure(figsize=(15, 15))\n    # Plot the histogram using \"Rank_Diff\" as X, with 14 bins and bar style. Get the return values because we will use them later to set the style.\n    n, bins, patches = plt.hist(inner_country_df['Rank_Diff'], bins=14, histtype='bar')\n    # Append an extra element(0) to the n array.\n    n = np.append(n,[0])\n    # Plot a line with points in every (bin,n) to show how the distribution moves.\n    plt.plot(bins, n, 'r--', color='Black')\n    # Set the X Axis label.\n    plt.xlabel(\"Rank Difference\")\n    # We also going to include every 5 ticks from 0 to 80.\n    plt.xticks(np.arange(0, 80, 5.0))\n    # Set the Y Axis label.\n    plt.ylabel(\"Frequency(Number of Countries)\")\n    # Include every 3 ticks from 0 to 35.\n    plt.yticks(np.arange(0, 35, 3.0))\n    \n    # Get the color map using the 'nipy_spectral' palette for the amount of patches times 2(to get colors from the center[green] to the right[red]) \n    colors = plt.get_cmap('nipy_spectral', len(patches)*2)\n    \n    # Set the color of the patches iterating through all the patches and setting their color using our palette.\n    for i in range(len(patches)):\n        # i+length-1 to make sure we start from the middle of the palette to the end.\n        patches[i].set_facecolor(colors(i+len(patches)-1))\n# Show the plot\nplt.show()","372f99f1":"# Create kmeans object with 7 clusters\nkmeans = KMeans(n_clusters=7)\n# Get our scatter plot points\npoints = inner_country_df[['Rank_hdi','Rank_whls']]\n# Fit k-means object to data\nkmeans.fit(points)\n# Create a scatter plot using 'ggplot' style to be able to see how the rank differences are distributed.\nwith plt.style.context(\"ggplot\"):\n    # Increase the figure size\n    plt.figure(figsize=(15, 15))\n    # Create out scatter plot using the ranks as Axis and setting the color map to the KMeans cluters.\n    plt.scatter(points['Rank_hdi'],points['Rank_whls'], c=kmeans.labels_);\n    # This line will represent the spot where the ranks are the same. The closer the Countries are to it, the more related HDI and WHLS are.\n    plt.plot([points['Rank_hdi'].min(), points['Rank_hdi'].max()],[points['Rank_whls'].min(), points['Rank_whls'].max()], \"r--\", label='Same Rank')\n    # Make sure we show the center line legend.\n    plt.legend()\n    # Add the axis labels\n    plt.xlabel(\"HDI Rank\")\n    plt.ylabel(\"WHLS Rank\")\n    \n    # Invert the axis to have the top ones on the top-right corner.\n    plt.gca().invert_xaxis()\n    plt.gca().invert_yaxis()\n    \n    # Add the country names(index) by annotating them next to each of the points in the plot.\n    for i, txt in enumerate(inner_country_df.index.tolist()):\n        plt.gca().annotate(txt, (points['Rank_hdi'][i], points['Rank_whls'][i]))\n# Show the plot\nplt.show()","10fc2c2c":"# Get the countries with HDI Rank lower than 50 and WHLS higher than 25. \nlow_hdi_high_whls_df = inner_country_df[(inner_country_df['Rank_hdi'] > 50) & (inner_country_df['Rank_whls'] < 25)].copy()\n# Remove the columns that are not necessary.\nlow_hdi_high_whls_df.drop(columns=['HDI', 'WHLS'], inplace=True)\n# Print the result\nprint(\"High WHLS\/Low HDI:\\n\")\nprint(low_hdi_high_whls_df)\n\n# Get the countries with WHLS Rank lower than 50 and HDI higher than 25. \nhigh_hdi_low_whls_df = inner_country_df[(inner_country_df['Rank_hdi'] < 25) & (inner_country_df['Rank_whls'] > 50)].copy()\n# Remove the columns that are not necessary.\nhigh_hdi_low_whls_df.drop(columns=['HDI', 'WHLS'], inplace=True)\n# Print the result\nprint(\"\\nHigh HDI\/Low WHLS:\\n\")\nprint(high_hdi_low_whls_df)","e6181493":"# Create a scatter plot using 'ggplot' style to be able to see how the rank differences are distributed.\nwith plt.style.context(\"ggplot\"):\n    # Increase the figure size\n    plt.figure(figsize=(15, 15))\n    # Create out scatter plot using the ranks as Axis and setting the color map to the KMeans cluters.\n    plt.scatter(points['Rank_hdi'],points['Rank_whls'], c=kmeans.labels_);\n    # This line will represent the spot where the ranks are the same. The closer the Countries are to it, the more related HDI and WHLS are.\n    plt.plot([points['Rank_hdi'].min(), points['Rank_hdi'].max()],[points['Rank_whls'].min(), points['Rank_whls'].max()], \"r--\", label='Same Rank')\n    \n    # Make sure we show the center line legend.\n    plt.legend()\n    \n    # Add the axis labels\n    plt.xlabel(\"HDI Rank\")\n    plt.ylabel(\"WHLS Rank\")\n        \n    # Invert the axis to have the top ones on the top-right corner.\n    plt.gca().invert_xaxis()\n    plt.gca().invert_yaxis()\n    \n    # Add the country names(index) by annotating them next to each of the points in the plot.\n    for i, txt in enumerate(inner_country_df.index.tolist()):\n        plt.gca().annotate(txt, (points['Rank_hdi'][i], points['Rank_whls'][i]))\n    \n    # Add a rectangle to highlight the entire scatter plot area, this one will be used to identify the top and bottom and their outliers.\n    plt.gca().add_patch(pch.Rectangle((-2,-2),155,155,linewidth=2,edgecolor='blue',facecolor='cyan', alpha=0.1))\n    \n    # Add another rectangle to obscure the center ones. We are interested in the top and bottom outliers, not the center.\n    plt.gca().add_patch(pch.Rectangle((25,25),102,102,linewidth=2,edgecolor='red',facecolor='black', alpha=0.9))\n    \n    # Add 2 more rectangles, one for the top 25\/25 and one from the bottom 25\/25.\n    plt.gca().add_patch(pch.Rectangle((-1,-1),26,26,linewidth=2,edgecolor='Green',facecolor='none'))\n    plt.gca().add_patch(pch.Rectangle((152,152),-25,-25,linewidth=2,edgecolor='Blue',facecolor='none'))\n    \n    # These purple squares highlight the outliers.\n    plt.gca().add_patch(pch.Rectangle((22,57),-20,20,linewidth=2,edgecolor='Purple',facecolor='none'))\n    plt.gca().add_patch(pch.Rectangle((45,26),20,-20,linewidth=2,edgecolor='Purple',facecolor='none'))\n    plt.gca().add_patch(pch.Rectangle((151,95),-20,20,linewidth=2,edgecolor='Purple',facecolor='none'))\n    plt.gca().add_patch(pch.Rectangle((77,130),20,20,linewidth=2,edgecolor='Purple',facecolor='none'))\n    \n# Show the plot\nplt.show()","1fe2ba66":"### Question 5: What are the countries included in one study and not the other?\n\nTo answer this question we are going to combine both data sources using merge(outer) and the Country as our matching value.\nThe result will include the countries that do not show in the other data source.","3b0a0647":"Now that we have renamed all the Countries that needed to be renamed, we need remove the missing countries because those are not comparable.","efe38b1c":"### Question 9: Do most of the countries with a higher HDI have a higher WHLS?\n\nTo answer this question we are going to calculate the absolute value of the Ranks difference and create an histogram with the result.\n\n***NOTE:*** The plot will be styled to look better.","52cba51d":"# Question 10-11: Are there any countries with low\/high HDI and the oposite in WHLS?\n\nFor this we are going to use the previous scatter plot but we are going to refine it identifiying clusters using K-Means clustering and adding some other useful things to the plot.","3d08ac71":"### Sort The Data\n\nWe are going to make sure our data is properly sorted, so that we can calculate the rank.\n\nThe rank will be added using python's range.","85e9425a":"#### Result 10-11B\n\nWe can see that a few of the countries we identified on the scatter plot were correct according our previous calculations.","1a4b0aaa":"## Questions A [Step 3]\n\nNow that our data is cleaned and scoped properly, we will proceed with the questions.\nEach of the next few sections will contain 1 question and its coded answer.","2f6aab0e":"#### Results 9\n\nThe Histogram helps answer this question by showing that the relationship is pretty strong. Most of the countries have less than 20 points difference between their ranks(Green), and we only have a small number of outiers(Reds), therefore, countries with higher development index tend to be happier.","c5d0655b":"### Question 4: Which are the 10 least developed countries in the world?\n\nAgain answering this one like we answered the least happy one, sort the data frame in descending order using the Rank, then show the result with Head(10).","cca5b0b8":"## Questions B [Step 4-5]\n\nNow that we are done with the single data source questions, we are going to move to the questions that require both data sources to be answered.\nEach of the next few sections will contain 1 question and its coded answer.","f69a474e":"#### Result 5B\n\nGood, we now have the actual result.\n\n**The HDI Dataset is missing:** Taiwan, North Cyprus, and Kosovo\n\n**The WHLS Dataset is missing:** Liechtenstein, Andorra, Qatar, Brunei, Oman, Palau, Barbados, Bahamas, Seychelles, Cuba, Saint Kitts and Nevis, Antigua and Barbuda, Grenada, Saint Lucia, Saint Vincent and the Grenadines, Fiji, Dominica, Suriname, Belize, Tonga, Samoa, Marshall Islands, Guyana, Cabo Verde, East Timor, Kiribati, Bhutan, Micronesia, Sao Tome and Principe, Vanuatu, Equatorial Guinea, Angola, Solomon Islands, Syria, Papua New Guinea, Sudan, Djibouti, Guinea-Bissau, and Eritrea","6bca5eee":"### Remove Extra Data\n\nOur dataset appears to be in better shape this time so we are only going to remove all the columns that fall outside of the scope of this project.\nWe will rename the \"Ladder Score\" to 'WHLS' and 'Country name' to 'Country'.","089239b0":"## Project Plan\n1. The first step would be to import the datasets to my Kaggle notebook.\n2. Given that data comes with multiple variables that fall outside of the scope of this project, I will use Pandas to extract the entities that are of my interest (HDI and WHLS).\n3. Once the data of each data source is scoped to my needs, I will then proceed to answer the questions that do not require data from both sources.\n4. The next step will be to answer the question of the missing countries in one of the data sources.\n5. I will then proceed to merge the data sources (with Pandas) using different merges based on the country name.\n6. Finally, I will create a few plots to answer my remaining questions and come up with my conclusions.","aeac90a2":"#### Compare the top and bottom 20 countries and see which of them are in both studies\n\nIn the next code we will figure out how many of the top\/bottom 20 in HDI, are also top\/bottom 20 in WHLS.\nIf there are a few exceptions to both least and most. We will get those exceptions in the next couple of questions so for the purpose of questions 6 and 7 we will ignore them.\n","bd845e20":"#### Results 6-7\n- Almost all (17) of the Top 20 of both HDI and WHLS match.\n- Only half of the Bottom 20 of both HDI and WHLS match.\n\nWhat this means the there appears to be a correlation between Development and Happiness but it is clearer in the High Score Countries.\n","c36097c7":"## Profile of Data Sources\n\nThe data sources\u2019 datasets were obtained in two different formats. The World Happiness Ranking Dataset is a single Office Open XML Spreadsheet Document (XLS) file with multiple columns (for the different variables and the score) and a row for each of the analyzed countries. The Human Development Index Ranking comes in a single Comma-separated Values (CSV) format file, with a column for every year since 1990 and a row for each of the studied countries.\n\nThe World Happiness Ranking dataset contains many variables and entities that may be used for further analysis but for the purpose of this project, I am only going to focus on the main score: The World Happiness Ladder Score (WHLS).\n\nThe Human Development Index Ranking contains multiple years of data but given that the WHLS 2019 is based on the 2018 numbers, I will only use the 2018 Human Development Index (HDI) to be consistent in terms of the time and obtain the best possible results.\n\nThe previously mentioned indexes\/scores would be the only entities that are going to be extracted from the data sources, therefore, all the other columns in the datasets will not be needed or used.\n\nThe data does not seem to have any restrictions for their usage (other than citing) and it is freely available for anyone to download and study.","8ac68845":"## Conclusions\n\nOur hypothesis was that there is a strong correlation between the perceived happiness of a Country and the economic developemt.\n**Our notebook shows that this is clearly true at least for the countries at the Top and the Bottom of both studies**\n\nThese are other points that we were able to deduct from this project:\n\n1. There is correlation between the Human Development Index and the World Happiness. Most of the highly developed Countries are also very happy Countries. The same applies to the least developed.\n2. According to our histogram, the Rank of both studies are very consistent. Most are within 20 point of each other.\n3. There are a few outliers but the studies are mostly correlated. Examples of these outliers are Hong Kong, Mexico, South Korea, Uruguay, Costa Rica, Singapore, Japan, Botwana, Egypt, Niger, Mali, and Burkina Faso.\n4. Both studies include almost every country in the world(close to 80%). The HDI study includes more because its index does not depend on polling and apparently polling in the small islands is not common given that the World Happiness Score does not include many islands.\n5. Almost all the countries in WHLS study were in the HDI study too.\n6. The Nordic Countries appear to be the most developed and most happy.\n7. African countries are the least developed and least happy too.\n8. United states is not as high as people think it is. It does not make it to the Top 20 in neither of the studies.\n9. Would be interesting to keep exploring this and include some of the variables the are used to get each of the index\/scores.\n10. Let's all move to a nordic country :)","0449cde9":"### Clean the data\n\nThere are currently a lot of columns witht NaN values. I am going to get rid of those using dropna()","3db25857":"### Sort The Data\n\nWe are going to sort our dataframe using the rank as sort values. But first, we would need to convert the 'Rank' to numeric so that it can be sorted as numbers and not as string.","b31efc34":"#### Result 2\n\nAfganistan comes in last, followed by South Sudan, Zimbabwe, Rwanda, Central African Republic, Tanzania, Botswana, Yemen, Malawi, and India in that order.","f3b93a9d":"### Question 6-7: Is there any correlation between the HDI and WHLS within the top\/bottom countries?\n\nTo answer this question we are going to:\n1. Remove all the countries we are not interested in from each dataset and recalculate the ranks.\n2. Combine both data sources using merge(inner) with the Country as our matching value.\n3. Compare the top and bottom 20 countries and see which of them are in both studies.","ca1c0852":"## Human Development Index (HDI) [Step 2a]\n\nI am going to start by getting and shaping the HDI data.\nFor this I'm going to use read_csv, setting the row one(second row) values as my headers given that the CSV file contains a row with the title.","70d50123":"### Question 3: Which are the 10 most developed countries in the world?\n\nTo answer this we are going to do the same we did with the previous ones because our HDI data is also properly sorted and cleaned.\nHead(10) will show the 10 most developed countries.","060867d6":"#### Result 3\nNorway comes first, followed by Switzerland, Ireland, Germany, Hong Kong, Australia, Iceland, Sweden, Singapore, and Netherlands in that order.","35ae201e":"#### Result 1\n\nFinland comes in first, followed by Denmark, Switzerland, Iceland, Norway, Netherlands, Sweden, New Zealand, Austria, and Luxembourg in that order.","0378134f":"# Mini Project 1B - World Happiness and Development Index Relation\n\n_**The happiness of the citizens of a country appears to be correlated to the development of that country.**_ The countries that are widely recognized as the most developed, seem to also be the happiest. For example, the Nordic countries are highly developed states that are popularly branded as the happiest ones.  This makes me think that the happiness of a person depends on the environment in which they live.\n\nIn this project, I will try to prove the previous hypothesis by reviewing the happiness and the development of the world and see if there is any correlation between them.","968d7242":"#### Remove all the countries we are not interested in from each dataset and recalculate the ranks\n\nGiven that we are only interested in countries with both numbers, we are going to drop our lists of missing countries from each of the datasets.\nOnce the datasets are clean we are going to recalculate the ranks using a range.\nIf there are any ties, the rank would be determined by the countries alphabetical order.","46427cf4":"## World Happiness Ladder Score (WHLS) [Step 2b]\n\nWe are done with the HDI, so we now move to prepare the World Happiness Ladder Score data.\nFor this I am going to use read_csv again, but this time I will not specify any header row given that there is no title in this data.","f0f47aff":"## Imports and Kaggle Stuff [Step 1]\n\nThis section will include all the import functions that I will use in my entire notebook and will also contain the API secret grab and input dataset(Produce list) grab.","3af8ba11":"### Remove Extra Data\n\nSince our dataset contains the HDI for every year since 1990 and we are only intereseted in 2018, we are going to drop all the years that are not 2018.\nWe are also going to rename 'HDI Rank (2018)' to 'Rank' so that we can handle more easily, and '2018' to 'HDI'.","c40de527":"#### Result 5A\n\nThe previous prints show the missing countries on each dataset, but as we can noticed, some of them are there but with a different name.\nIn the next section we will try to fix these discrepancies.\n\nThe ones that we are going to consolidate are:\n\n* Czechia -> Czech Republic\n* Taiwan Province of China -> Taiwan\n* Korea (Republic of) -> South Korea\n* Bolivia (Plurinational State of) -> Bolivia\n* Russian Federation -> Russia\n* Hong Kong S.A.R. of China\/Hong Kong, China (SAR) -> Hong Kong\n* Viet Nam -> Vietnam\n* Iran (Islamic Republic of) -> Iran\n* North Macedonia -> Macedonia\n* Congo -> Congo (Brazzaville)\n* Congo (Democratic Republic of the) -> Congo (Kinshasa)\n* Lao People's Democratic Republic -> Laos\n* Eswatini (Kingdom of) -> Swaziland\n* C\u00f4te d'Ivoire -> Ivory Coast\n* Venezuela (Bolivarian Republic of) -> Venezuela\n* Palestine, State of\/Palestinian Territories -> Palestine\n* Tanzania (United Republic of) -> Tanzania\n* Moldova (Republic of) -> Moldova\n* Micronesia (Federated States of) -> Micronesia\n* Syrian Arab Republic -> Syria\n* Brunei Darussalam -> Brunei\n* Timor-Leste -> East Timor","aa2e1862":"#### Combine both data sources using merge(inner) with the Country as our matching value\n\nGiven that Country is used as our index, we can simple do a merge setting both right_index and left_index to True,","b32476b5":"## Questions To Answer\n1. Which are the 10 happiest countries in the world?\n2. Which are the 10 least happy countries in the world?\n3. Which are the 10 most developed countries in the world?\n4. Which are the 10 least developed countries in the world?\n5. What are the countries included in one study and not the other?\n6. Is there any correlation between the HDI and WHLS within the top countries?\n7. I there any correlation between the HDI and WHLS within the bottom countries?\n8. Are there any outliers or is there an even distribution?\n9. Do most of the countries with a higher HDI have a higher WHLS?\n10. Are there any countries with low HDI and high WHLS?\n11. Are there any countries with high HDI and low WHLS?","120cd26b":"#### Result 10-11C\n\nThe last scatter plot confirms what our outlier list says and shows a few more higlighted with purple squares.\nIn this case were able to identify outliers on the bottom side. Egypt, Botswana, Niger, Guinea, Burkina Faso, Mali, Sambia and Senegal.\n\nThe plot also confirms how correlated the top and the bottom of each study are. the top(Green) and bottom(blue) clusters are very close to each other, therefore very consistent.","34712ad1":"#### Results 8\n\n- From the scatter plot we can deduct that many Countries scores match nicely. So there seems to be an even disctribution.\n- We can also see that the matching is more common in the top and in the bottom. The middle is more uncertain.\n- A few outliers are noticeable but can not entirely be isolated visually. We will try to do that when answering the next few questions.","f5b76533":"### Get Some Clusters\n\nThe top and bottom countries are not entirely clear in the previous scatter plot so we are going to add some clusters to see how they look and answer our questions.\nWe are going to use K-Means Clustering for this.","09c0544a":"#### Result 4\nNiger comes last, followed by Central African Republic, Chad, South Sudan, Burundi, Mali, Eritrea, Burkina Faso, Sierra Leone, and Mozambique in that order.","c69a4c5f":"### Question 8: Are there any outliers or do all Countries match nicely?\n\nTo answer this question we are going to create a scatter plot with both WHLS and HDI ranks and see if the points are close enough to the center.\n\n***NOTE:*** The plot will be styled to look better.","a9956624":"### Reshape One More Time\n\nAs we can see, that did not endup the way we wanted to, some 'Countries' are actually regions which have no rank so they are null(NaN).\n\nWe will now remove(but copy in case we may used them later) those regions from the HDI dataframe.\n\nAfter removing them, we are going to cast the 'Rank' column as integer so that we can get rid of the floating point that resulted from the sort.\n\nAt the end we are going to use 'Country' as index and that should be our final state.","56549c80":"### Reorder Columns and Reindex\n\nTo be consistent with the HDI data set, we are going to reorder the columns so that the 'Rank' gets next to the index, and then 'WHLS'. We will then make 'Country' the index.","9687cd78":"### Question 2: Which are the 10 least happy countries in the world?\n\nThis is again quick given our previous shaping and cleaning of the data.\nTo get this we could use tail(10) to get the last 10 elements in our sorted DataFrame, but, we are going to temporarily re-sort the Dataframe again to show them top-down(The least happy on top) and then use head(10) to output them.","34cc2761":"### Question 1: Which are the 10 happiest countries in the world?\n\nThis is fairly simple now that we have the WHLS sorted and we have included the ranking in our DataFrame.\nFor this we will only get the head(10)","02e7f82e":"#### Result 10-11A\n1. From the plot we can deduct that almost all the happiest countries in the world are also the most developed ones. \n2. We can also see that not all but many of the least happy countries are also the least developed.\n3. Outliers are more noticeble now because KMeans clusters them with other group of countries.\n\n**Some of the Top outliers are: **\n\n- Hong-Kong\n- Costa Rica\n- Singapore\n- Japan\n\n**Some of the Center outliers are:**\n\n- Mexico\n- Guatemala\n- El Salvador\n- Greece\n\n**Some of the Bottom outliers are:**\n\n- Niger\n- Botswana\n- Sri Lanka\n- Pakistan\n\nWe are going to get the list of the High\/Low of each rank and see how many countries we can find. For this we are going to get a sub dataframe containing the countries with ranks higher than 25 but lower than 50."}}