{"cell_type":{"31832cc7":"code","83dde75f":"code","56b99d78":"code","90242e7f":"code","b7454991":"code","2f2e87cf":"code","76142758":"code","63098f4c":"code","593adf83":"code","23acad7d":"code","ccb451f7":"code","4a1ef9c7":"code","bb3aea4a":"code","6955cb2b":"code","9ecb6ec7":"code","2f2749a3":"code","a3c4c9c2":"code","036fe0c9":"code","64c61fda":"code","78870c37":"code","0c5c8198":"code","d077cdca":"code","556b0712":"code","b00e92fe":"code","606c999b":"markdown","6fb403a0":"markdown","c1372de9":"markdown","a291acd4":"markdown","b47643b2":"markdown","f859e6a3":"markdown","519ee644":"markdown","457ff8dd":"markdown","f856f638":"markdown","ed7d2c97":"markdown","8a06305b":"markdown"},"source":{"31832cc7":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\n\ndf = pd.read_csv('..\/input\/income_evaluation.csv')\ndf.head(10)\n\n# Any results you write to the current directory are saved as output.","83dde75f":"df[' education'].value_counts().head(10).plot.bar()","56b99d78":"df[' sex'].value_counts().head(10).plot.bar()","90242e7f":"sns.countplot(x=\" income\", data=df, palette=\"bwr\")\nplt.show()","b7454991":"pd.crosstab(df[' sex'],df[' income']).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Income  for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.ylabel('Frequency')\nplt.show()","2f2e87cf":"pd.crosstab(df[' education'],df[' income']).plot(kind=\"bar\",figsize=(20,6),color=['#FFC300','#581845' ])\nplt.title('Income  for education')\nplt.xticks(rotation=0)\nplt.ylabel('Frequency')\nplt.show()","76142758":"df_treat = pd.get_dummies(df)\ndf_treat.dtypes.value_counts()\ndf_treat = df_treat.rename(columns=({' income_ <=50K':'minusEqual50',' income_ >50K':'Plus50'}))\ndf_treat.head(10)","63098f4c":"temp= [df_treat['minusEqual50'],df_treat['Plus50']]\ny= pd.DataFrame(temp)\ny= y.transpose()\nx = df_treat.drop(columns=['minusEqual50','Plus50'])\n\n","593adf83":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train,y_test = train_test_split(x,y,test_size = 0.20,random_state = 42)\n","23acad7d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nmodel_LR= LogisticRegression()","ccb451f7":"model_LR.fit(x_train,y_train['minusEqual50'])","4a1ef9c7":"y_prob = model_LR.predict_proba(x_test)[:,1] # This will give you positive class prediction probabilities  \ny_pred = np.where(y_prob > 0.5, 1, 0) # This will threshold the probabilities to give class predictions.\nmodel_LR.score(x_test, y_pred)\n\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nconfusion_matrix=metrics.confusion_matrix(y_test['minusEqual50'],y_pred)\nconfusion_matrix","bb3aea4a":"auc_roc=metrics.roc_auc_score(y_test['minusEqual50'],y_pred)\nauc_roc","6955cb2b":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test['minusEqual50'], y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","9ecb6ec7":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","2f2749a3":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nconfusion_matrix=metrics.confusion_matrix(y_test['minusEqual50'],y_pred)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(confusion_matrix,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.title(\"Test for Test Dataset\")\nplt.xlabel(\"predicted y values\")\nplt.ylabel(\"real y values\")\nplt.show()","a3c4c9c2":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier()\nmlp.fit(x_train,y_train['minusEqual50'])","036fe0c9":"y_prob = mlp.predict_proba(x_test)[:,1] # This will give you positive class prediction probabilities  \ny_pred = np.where(y_prob > 0.5, 1, 0) # This will threshold the probabilities to give class predictions.\nmlp.score(x_test, y_pred)","64c61fda":"confusion_matrix=metrics.confusion_matrix(y_test['minusEqual50'],y_pred)\nconfusion_matrix\n","78870c37":"auc_roc=metrics.classification_report(y_test['minusEqual50'],y_pred)\nauc_roc","0c5c8198":"auc_roc=metrics.roc_auc_score(y_test['minusEqual50'],y_pred)\nauc_roc","d077cdca":"from sklearn.metrics import roc_curve, auc\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test['minusEqual50'], y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nroc_auc","556b0712":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate,true_positive_rate, color='red',label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","b00e92fe":"from sklearn.metrics import confusion_matrix\nconfusion_matrix=metrics.confusion_matrix(y_test['minusEqual50'],y_pred)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(confusion_matrix,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.title(\"Test for Test Dataset\")\nplt.xlabel(\"predicted y values\")\nplt.ylabel(\"real y values\")\nplt.show()","606c999b":"Classification\n\nWe have a binary classification: \n\nperson with income <=50K\nperson with income >50K\n","6fb403a0":"**Logistic Regression**","c1372de9":"Counting types values","a291acd4":"Plotting the ROC curve in order to evaluate the classification","b47643b2":"**MLPClassifier**\n\n","f859e6a3":"Treating the categorical variables","519ee644":"Dropping target values and trasform it in dataframe","457ff8dd":"Confusion Matrix","f856f638":"**EDA EXPLORATION******","ed7d2c97":"Data Set Information:\n\nExtraction was done by Barry Becker from the 1994 Census database. A set of reasonably clean records was extracted using the following conditions: ((AAGE>16) && (AGI>100) && (AFNLWGT>1)&& (HRSWK>0)) \n\nPrediction task is to determine whether a person makes over 50K a year. \n\n\nAttribute Information:\n\nListing of attributes: \n\n>50K, <=50K. \n\nage: continuous. \nworkclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked. \nfnlwgt: continuous. \neducation: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool. \neducation-num: continuous. \nmarital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse. \noccupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces. \nrelationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried. \nrace: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black. \nsex: Female, Male. \ncapital-gain: continuous. \ncapital-loss: continuous. \nhours-per-week: continuous. \nnative-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.\n\n","8a06305b":"ROC AUC SCORE"}}