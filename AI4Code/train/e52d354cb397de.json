{"cell_type":{"494e9a1f":"code","fb3b708a":"code","21d5862e":"code","d7054dea":"code","07836a69":"code","1e421016":"code","6b12c44e":"code","cf4e0a1e":"code","691156d8":"code","d3b6b163":"code","de0467bc":"code","739e0995":"code","89d61dca":"code","9dbdb9cb":"code","c46c7750":"code","329ac9f7":"code","b0fada34":"code","ce429a90":"code","d0c57fa5":"code","0cd4f9fd":"code","ad4aad96":"code","1e839b34":"code","c5882b03":"code","c004c588":"code","fca608fd":"code","b22806a0":"code","8ae56413":"code","ab582362":"code","a5917632":"code","c7e5e2fe":"code","2faaa2f8":"code","8ffdda6a":"code","69187aef":"code","87414d00":"code","a61432c1":"code","7e460068":"code","c343a042":"code","99b770fc":"code","038b0c9a":"code","367c4a6a":"code","c2b2c373":"code","61271a36":"code","0433fea4":"code","c448c650":"code","9d191d60":"code","480744e9":"code","4036a997":"code","8adf658e":"code","f639de8b":"code","d179d744":"code","1d5d205b":"code","b2c37551":"code","9ac28fff":"code","974ba3dc":"code","7c6483a4":"code","cb9d6ba0":"code","37178de6":"code","10d9820d":"code","35bf6d7b":"code","4e63ef3c":"code","b17bd0fb":"code","7880e1ba":"code","b2394ab2":"code","65075683":"code","c87f0cc8":"code","cdee7f34":"code","15f02c18":"code","89b45b4c":"code","73df9f8e":"code","b2addf21":"code","962f3c00":"code","a55324ed":"code","765e926c":"code","ee4fc30b":"code","4bebfeca":"code","1badb86b":"code","c921e5ed":"code","25b0d41d":"code","65250143":"code","3466d59e":"code","0d14c0c8":"code","4980cd20":"code","2c13239f":"code","3366fb0b":"code","acc90dce":"code","65c1389e":"code","b5dac84d":"code","e386ab05":"code","ba6846e7":"code","14f8efda":"code","52810b08":"code","91ff1b68":"code","d540eb6c":"code","1111d102":"code","5b7eba71":"code","a1532d27":"code","3bc39c3b":"code","728ac9d5":"code","c7080728":"code","05e97963":"code","a1ede344":"code","153249a0":"code","eb1118c1":"code","f0d16796":"code","93f60084":"code","35d67538":"code","a3774085":"code","c8d5ff47":"code","e7fd339a":"code","b50c6a69":"code","699be210":"code","5b4e3970":"code","8dfd3e84":"code","b464d0c3":"code","e4eb7bc3":"code","6ec1f7fb":"code","57e3cc95":"code","18a02834":"code","e70f7d35":"code","9d3b03c8":"code","e301b117":"code","6232a38b":"code","b8c59e52":"code","8c2eeb3d":"code","0994bebe":"code","989e0776":"code","bd19c6a1":"code","1f0a0526":"code","c42f468f":"code","7a1b576d":"code","fe941bd1":"code","345a45d1":"code","4d021b42":"code","a3d39324":"code","cb88d108":"code","4635516a":"code","55fb9ce8":"code","484bdf18":"code","b6fa1418":"code","f4b1ed7a":"code","c70651c8":"code","a82bb448":"code","cc7a353f":"code","ea8979e0":"code","b769a5d5":"code","b220778a":"code","ec5756e3":"code","1ed6591b":"code","50ad30ac":"code","c346f1e2":"code","1edab896":"code","a2fb80b6":"code","36ea98b5":"code","ae7834de":"code","be8d041b":"code","6d3e51c2":"code","53db887d":"code","4c26b124":"code","929b87c6":"code","4663123c":"code","f12cac1c":"code","b1d9b5c7":"code","a27b202a":"code","5f31a746":"code","882a7ed2":"code","6066f5df":"code","4c77875c":"code","02482e34":"code","d51cd886":"code","3b0e9461":"code","be9f7eb9":"code","824bd9fd":"code","777546b6":"code","fa6d0a1f":"code","9597353b":"code","25bb144a":"code","860fa9e7":"code","6308840d":"code","2d51b5e1":"markdown","954e609b":"markdown","f5b52c2b":"markdown","e4d948f5":"markdown","56edad43":"markdown","5afaac24":"markdown","e8615e6a":"markdown","4e500e91":"markdown","c3b8276b":"markdown","b406ff7b":"markdown","bcf92372":"markdown","6d47f499":"markdown","48e5ea1f":"markdown","05cdf670":"markdown","d5960418":"markdown","6320f7f9":"markdown","ecf00e08":"markdown","3696bd4f":"markdown","8efe0097":"markdown","3c23b0a1":"markdown","ac446862":"markdown","141c98e5":"markdown","142cf4d5":"markdown","c83b18db":"markdown","88e95fec":"markdown","350704da":"markdown","0f4001d2":"markdown","155fa1d3":"markdown","babab8cd":"markdown","398bcd1f":"markdown","c338429b":"markdown","0eb8168a":"markdown","9375a806":"markdown","d108d153":"markdown","4fa79c26":"markdown","9e1fe618":"markdown","2d0d3bef":"markdown","933fd7bf":"markdown","59490fba":"markdown","9c9ce21c":"markdown","ea8c5dc5":"markdown","0fd74c98":"markdown","937e28bc":"markdown","cd13afa0":"markdown","9559d5c0":"markdown","cd68d704":"markdown","cc20f15f":"markdown","bfbadd3e":"markdown","10326f3a":"markdown","aa8c687e":"markdown","31e27ddd":"markdown","b9131330":"markdown","b154107d":"markdown","f583d62a":"markdown","99a90a89":"markdown","8d8640ff":"markdown","88cf607b":"markdown","92ced90d":"markdown","3752b1d1":"markdown","00ec54b7":"markdown","a5f75d2a":"markdown","5bba2b8b":"markdown","b5847c74":"markdown","e30236ff":"markdown","252f62c2":"markdown","d13e6942":"markdown","5692365b":"markdown","3e640979":"markdown","abbaca42":"markdown","5e45b7de":"markdown","5c115fcb":"markdown","3e3f649d":"markdown","cebe47f3":"markdown"},"source":{"494e9a1f":"import numpy as np # linear algebra\nimport pandas as pd \nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Graphics in SVG format are more sharp and legible\n%config InlineBackend.figure_format = 'svg' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\nplt.rcParams['image.cmap'] = 'viridis'\n\n%matplotlib inline","fb3b708a":"pd.set_option('display.max_rows', 5000)\npd.set_option('display.max_columns', 5000)","21d5862e":"# load the dataset\nPATH_TO_DATA = '..\/input'\n\ndf_train = pd.read_csv(os.path.join(PATH_TO_DATA, \n                                             'train.csv'), index_col='Id')\ndf_test = pd.read_csv(os.path.join(PATH_TO_DATA, \n                                             'test.csv'), index_col='Id')","d7054dea":"# take a look at the first 5 rows of the dataset\ndf_train.head()","07836a69":"# take a look at the first 5 rows of the dataset\ndf_test.head()","1e421016":"# number of samples and columns\ndf_train.shape, df_test.shape","6b12c44e":"# check for duplicates\nsum(df_train.duplicated()), sum(df_test.duplicated())","cf4e0a1e":"# check the datatypes\ndf_train.info()","691156d8":"# column names\ndf_train.columns","d3b6b163":"# continuous variables\ncontinuous_features = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', \n                       '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n                       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\n\ndf_train[continuous_features].head()","de0467bc":"# the number of continuous features\ndf_test[continuous_features].shape[1]","739e0995":"# discrete variables\ndiscrete_features = ['YearBuilt', 'YearRemodAdd', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', \n                     'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'MoSold', 'YrSold']\n# check the filter\ndf_train[discrete_features].head()","89d61dca":"# the number of discrete features\ndf_test[discrete_features].shape[1]","9dbdb9cb":"# nominal variables\nnominal_features = ['MSSubClass', 'MSZoning', 'Street', 'Alley', 'Utilities', 'LotConfig', 'Neighborhood', 'Condition1', \n                    'Condition2', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n                    'Foundation', 'Heating', 'CentralAir', 'Electrical', 'GarageType', 'PavedDrive', 'MiscFeature',\n                    'SaleType', 'SaleCondition']\n\n# check the filter\ndf_train[nominal_features].head()","c46c7750":"# the number of continuous features\ndf_test[nominal_features].shape[1]","329ac9f7":"# ordinal variables\nordinal_features = ['LotShape', 'LandContour', 'LandSlope', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', \n                    'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n                    'HeatingQC', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageFinish', 'GarageQual', 'GarageCond', \n                    'PoolQC', 'Fence']\n\n# check the filter\ndf_train[ordinal_features].head()","b0fada34":"# the number of continuous features\ndf_test[ordinal_features].shape[1]","ce429a90":"# test to check if all the columns are included\nlist(continuous_features + discrete_features + nominal_features + ordinal_features).sort() == list(df_test.columns).sort() ","d0c57fa5":"# check for missing values\ndf_train.isnull().sum()[df_train.isnull().sum() > 0]","0cd4f9fd":"# the number \nnuls_columns = list(df_train.isnull().sum()[df_train.isnull().sum() > 0].index)\nlen(nuls_columns)","ad4aad96":"# nuls in continuous features\ncontinuous_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in continuous_features]\ncontinuous_nuls","1e839b34":"# nuls in discrete features\ndiscrete_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in discrete_features]\ndiscrete_nuls","c5882b03":"# nuls in nominal features\nnominal_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in nominal_features]\nnominal_nuls","c004c588":"# nuls in ordinal features\nordinal_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in ordinal_features]\nordinal_nuls","fca608fd":"# check for missing values\ndf_test.isnull().sum()[df_test.isnull().sum() > 0]","b22806a0":"# the number of variables with nulls\nnuls_columns = list(df_test.isnull().sum()[df_test.isnull().sum() > 0].index)\nlen(nuls_columns)","8ae56413":"# nuls in continuous features\ncontinuous_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in continuous_features]\ncontinuous_nuls","ab582362":"# nuls in discrete features\ndiscrete_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in discrete_features]\ndiscrete_nuls","a5917632":"# nuls in nominal features\nnominal_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in nominal_features]\nnominal_nuls","c7e5e2fe":"# nuls in ordinal features\nordinal_nuls = [nul_columns for nul_columns in nuls_columns if nul_columns in ordinal_features]\nordinal_nuls","2faaa2f8":"# let's filter only for discrete, nominal and ordinal features\nunique_filter =  discrete_features + nominal_features + ordinal_features","8ffdda6a":"# non-null unique values for ordinal features\ndf_train[ordinal_features].nunique()","69187aef":"# non-null unique values for nominal features\ndf_train[nominal_features].nunique()","87414d00":"# non-null unique values for nominal features\ndf_train[discrete_features].nunique()","a61432c1":"df_train[discrete_features].head()","7e460068":"# non-null unique values differences between training and testing set\ndf_diff_features = df_train[unique_filter].nunique() - df_test[unique_filter].nunique()\ndf_diff_features = df_diff_features[df_diff_features != 0]\ndf_diff_features","c343a042":"df_diff_features.plot(kind='barh', figsize=(10, 10));\nplt.title('Categorical Features Differences Training\/Testing Set')\nplt.show()","99b770fc":"# describe the dataset\ndf_train[continuous_features + ['SalePrice']].describe().T","038b0c9a":"for feat in ['Alley', 'GarageType', 'MiscFeature', 'FireplaceQu', 'Fence']:\n    # fill NaNs\n    df_train[feat].fillna(f'No{feat}', inplace=True)\n    df_test[feat].fillna(f'No{feat}', inplace=True)\n    print(f'{feat}...done')","367c4a6a":"# test for training set\ndf_train[['Alley', 'GarageType', 'MiscFeature', 'FireplaceQu', 'Fence']].isnull().sum()","c2b2c373":"# check for testing set \ndf_test[['Alley', 'GarageType', 'MiscFeature', 'FireplaceQu', 'Fence']].isnull().sum()","61271a36":"# fill for no basement\nfor feat in ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    # fill NaNs\n    df_train[feat].fillna(f'NoBasement', inplace=True)\n    df_test[feat].fillna(f'NoBasement', inplace=True)\n    print(f'{feat}...done')","0433fea4":"# test for train\ndf_train[['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']].isnull().sum()","c448c650":"# and testing set\ndf_test[['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']].isnull().sum()","9d191d60":"# fill for no pool\ndf_train['PoolQC'].fillna(f'NoPool', inplace=True)\ndf_test['PoolQC'].fillna(f'NoPool', inplace=True)","480744e9":"df_train['PoolQC'].isnull().sum(), df_test['PoolQC'].isnull().sum()","4036a997":"# fill for no garage\nfor feat in ['GarageFinish', 'GarageQual', 'GarageCond']:\n    # fill NaNs\n    df_train[feat].fillna(f'NoGarage', inplace=True)\n    df_test[feat].fillna(f'NoGarage', inplace=True)\n    print(f'{feat}...done')","8adf658e":"# test for train\ndf_train[['GarageFinish', 'GarageQual', 'GarageCond']].isnull().sum()","f639de8b":"# and testing set\ndf_test[['GarageFinish', 'GarageQual', 'GarageCond']].isnull().sum()","d179d744":"# check again for missing values\ndf_test[nominal_features+ordinal_features].isnull().sum()[df_test.isnull().sum() > 0]","1d5d205b":"# check for missing values\ndf_train[nominal_features+ordinal_features].isnull().sum()[df_train.isnull().sum() > 0]","b2c37551":"# let's see the entries\ndf_test[df_test['MSZoning'].isnull()]","9ac28fff":"df_test.loc[df_test[df_test['MSZoning'].isnull()].index, 'MSZoning']","974ba3dc":"# index variable\nMSZoning_null_index = list(df_test[df_test['MSZoning'].isnull()].index)","7c6483a4":"df_test.loc[MSZoning_null_index[0], 'MSZoning'] = 'I'\ndf_test.loc[MSZoning_null_index[1], 'MSZoning'] = 'A'\ndf_test.loc[MSZoning_null_index[2], 'MSZoning'] = 'A'\ndf_test.loc[MSZoning_null_index[3], 'MSZoning'] = 'I'","cb9d6ba0":"# test the changes\ndf_test['MSZoning'].isnull().sum()","37178de6":"df_train['MSZoning'].value_counts()","10d9820d":"df_test['MSZoning'].value_counts()","35bf6d7b":"# reassign values\ndf_test.loc[MSZoning_null_index[0], 'MSZoning'] = 'RH'\ndf_test.loc[MSZoning_null_index[1], 'MSZoning'] = 'RL'\ndf_test.loc[MSZoning_null_index[2], 'MSZoning'] = 'RL'\ndf_test.loc[MSZoning_null_index[3], 'MSZoning'] = 'RH'","4e63ef3c":"# plot categorical feature differences between training and testing set\ndef plot_bar(feature):\n    width = 0.35\n    ind = np.arange(df_test[feature].value_counts().shape[0])\n    locations = ind + width \/ 2 # ytick locations\n    labels = list(df_test[feature].value_counts().index) # ytick labels\n\n    heights_test = list(df_test[feature].value_counts().values)\n    heights_train = list(df_train[feature].value_counts().values)\n    plot_test = plt.bar(ind, heights_test, width, label='Test')\n    plot_train = plt.bar(ind + width, heights_train, width, label='Train')\n\n    plt.title('{} Bar Chart'.format(feature))\n    plt.xlabel('{}'.format(feature))\n    plt.ylabel('')\n    plt.xticks(locations, labels)\n\n    plt.legend()\n    plt.show()","b17bd0fb":"plot_bar('MSZoning')","7880e1ba":"df_test[df_test['Utilities'].isnull()]","b2394ab2":"# index variable\nUtilities_null_index = list(df_test[df_test['Utilities'].isnull()].index)\nUtilities_null_index","65075683":"# assign the new values\ndf_test.loc[Utilities_null_index, 'Utilities'] = 'NoSewr'","c87f0cc8":"# test the changes\ndf_test['Utilities'].isnull().sum()","cdee7f34":"plot_bar('Utilities')","15f02c18":"df_test['Utilities'].value_counts()","89b45b4c":"df_train['Utilities'].value_counts()","73df9f8e":"df_test[df_test['Exterior1st'].isnull()]","b2addf21":"# index variable\nExterior1st_null_index = df_test[df_test['Exterior1st'].isnull()].index[0]","962f3c00":"# reassign values\ndf_test.loc[Exterior1st_null_index, 'Exterior1st'] ='PreCast'\ndf_test.loc[Exterior1st_null_index, 'Exterior2nd'] ='PreCast'\ndf_test.loc[Exterior1st_null_index, 'GarageYrBlt'] ='NoGarage'","a55324ed":"df_test[df_test['Exterior2nd'].isnull()].shape","765e926c":"df_test[df_test['SaleType'].isnull()]","ee4fc30b":"# index variable\nSaleType_null_index = df_test[df_test['SaleType'].isnull()].index[0]","4bebfeca":"df_test.loc[SaleType_null_index, 'SaleType'] ='VWD'","1badb86b":"df_test[df_test['SaleType'].isnull()]","c921e5ed":"df_test['SaleType'].value_counts()","25b0d41d":"df_train['SaleType'].value_counts()","65250143":"# I'll put it in the Oth category in order to have similar structure\ndf_test.loc[SaleType_null_index, 'SaleType'] ='Oth'","3466d59e":"plot_bar('SaleType')","0d14c0c8":"df_test[df_test['KitchenQual'].isnull()]","4980cd20":"# index variable\nKitchenQual_null_index = df_test[df_test['KitchenQual'].isnull()].index[0]","2c13239f":"#df_test.loc[KitchenQual_null_index, 'KitchenQual'] = 'Po'\n# reassign value to match distributions\ndf_test.loc[KitchenQual_null_index, 'KitchenQual'] = 'Fa'","3366fb0b":"df_test['KitchenQual'].value_counts()","acc90dce":"df_train['KitchenQual'].value_counts()","65c1389e":"df_test[df_test['Functional'].isnull()]","b5dac84d":"# index variable\nFunctional_null_index = list(df_test[df_test['Functional'].isnull()].index)","e386ab05":"df_test.loc[Functional_null_index[0], 'Functional'] = 'Sev'\ndf_test.loc[Functional_null_index[1], 'Functional'] = 'Sev'","ba6846e7":"df_train['Functional'].value_counts()","14f8efda":"df_test['Functional'].value_counts()","52810b08":"plot_bar('Functional')","91ff1b68":"df_train[df_train['Electrical'].isnull()]","d540eb6c":"# index variable\nElectrical_null_index = df_train[df_train['Electrical'].isnull()].index[0]","1111d102":"df_train.loc[Electrical_null_index, 'Electrical'] = 'SBrkr'","5b7eba71":"df_train['Electrical'].value_counts()","a1532d27":"df_test['Electrical'].value_counts()","3bc39c3b":"df_train[df_train['MasVnrType'].isnull()]","728ac9d5":"df_test[df_test['MasVnrType'].isnull()]","c7080728":"# index variable\nMasVnrType_null_index = list(df_train[df_train['MasVnrType'].isnull()].index)\nMasVnrType_null_index","05e97963":"# assign values\ndf_train.loc[MasVnrType_null_index, 'MasVnrArea'] = 0\ndf_train.loc[MasVnrType_null_index, 'MasVnrType'] = 'None'","a1ede344":"MasVnrType_null_index = list(df_test[df_test['MasVnrType'].isnull()].index)\n\ndf_test.loc[MasVnrType_null_index, 'MasVnrArea'] = 0\ndf_test.loc[MasVnrType_null_index, 'MasVnrType'] = 'None'","153249a0":"plot_bar('MasVnrType')","eb1118c1":"df_test[continuous_features + discrete_features].isnull().sum()[df_test[continuous_features + discrete_features].isnull().sum() > 0]","f0d16796":"df_train[continuous_features + discrete_features].isnull().sum()[df_train[continuous_features + discrete_features].isnull().sum() > 0]","93f60084":"# Fill LotFrontage with mean\ndf_train['LotFrontage'].describe()","35d67538":"plt.hist(df_train['LotFrontage'], bins=30, alpha=0.5, label='Train set')\nplt.hist(df_test['LotFrontage'], bins=30, alpha=0.5, label='Test set')\n\nplt.title(\"LotFrontage Histogram Train\/Test\")\nplt.xlabel('LotFrontage ($ft$)')\nplt.ylabel('Frequency')\n\nplt.legend()\nplt.show()","a3774085":"# median value LotFrontage\nLotFrontage_null_fill = df_train['LotFrontage'].mode()[0]\n# fill nans for training and testing set\ndf_train['LotFrontage'].fillna(LotFrontage_null_fill, inplace=True)\ndf_test['LotFrontage'].fillna(LotFrontage_null_fill, inplace=True)","c8d5ff47":"df_train['LotFrontage'].isnull().sum(), df_test['LotFrontage'].isnull().sum()","e7fd339a":"df_train[df_train['GarageYrBlt'].isnull()][:10]","b50c6a69":"GarageYrBlt_null_vals_train = list(df_train[df_train['GarageYrBlt'].isnull()].index)\nGarageYrBlt_null_vals_test = list(df_test[df_test['GarageYrBlt'].isnull()].index)","699be210":"df_train.loc[GarageYrBlt_null_vals_train, 'GarageYrBlt'] = 'NoGarage'\ndf_test.loc[GarageYrBlt_null_vals_test, 'GarageYrBlt'] = 'NoGarage'","5b4e3970":"df_train['GarageYrBlt'].isnull().sum(), df_test['GarageYrBlt'].isnull().sum()","8dfd3e84":"df_test[continuous_features + discrete_features].isnull().sum()[df_test[continuous_features + discrete_features].isnull().sum() > 0]","b464d0c3":"df_test[df_test['GarageArea'].isnull()]","e4eb7bc3":"GarageArea_null_index = df_test[df_test['GarageArea'].isnull()].index[0]","6ec1f7fb":"df_test.loc[GarageArea_null_index, 'GarageCars'] = 0\ndf_test.loc[GarageArea_null_index, 'GarageArea'] = 0","57e3cc95":"df_test[df_test['BsmtFullBath'].isnull()]","18a02834":"BsmtFullBath_nulls_index = list(df_test[df_test['BsmtFullBath'].isnull()].index)\nmask_bsm = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',  'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']\ndf_test.loc[BsmtFullBath_nulls_index, mask_bsm] = 0","e70f7d35":"df_test[mask_bsm].isnull().sum()","9d3b03c8":"# check to see if we cleaned for nulls\ndf_train.isnull().sum()[df_train.isnull().sum() > 0], df_test.isnull().sum()[df_train.isnull().sum() > 0]","e301b117":"# let's see the four observations with GrLivArea bigger the 4000 \n# from the training set\ndf_test[df_test['GrLivArea'] > 4000]","6232a38b":"# let's see the four observations with GrLivArea bigger the 4000 \n# from the training set\ndf_train[df_train['GrLivArea'] > 4000]","b8c59e52":"# drop the rows with extreme values\ndf_train.drop(df_train[df_train['GrLivArea'] > 4000].index, inplace=True)","8c2eeb3d":"# test the change\ndf_train[df_train['GrLivArea'] > 4000]","0994bebe":"# reset index\ndf_train = df_train.reset_index(drop=True)\n# check the shape of our dataframe\ndf_train.shape","989e0776":"# rename the index column\ndf_train.index.names = ['Id'] ","bd19c6a1":"df_train.head()","1f0a0526":"# save this for later\ndf_train.to_csv(os.path.join('train_clean.csv'), sep=',', index_label='Id')\ndf_test.to_csv(os.path.join('test_clean.csv'), sep=',', index_label='Id')","c42f468f":"df_train.head()","7a1b576d":"df_train = pd.read_csv(os.path.join( \n                                             'train_clean.csv'), index_col='Id')\ndf_test = pd.read_csv(os.path.join( \n                                             'test_clean.csv'), index_col='Id')\ndf_train.head()","fe941bd1":"plt.hist(df_train['SalePrice'], bins=30)\nplt.title(\"Sale Price Histogram\")\nplt.xlabel('SalePrice ($USD$)')\nplt.ylabel('Frequency')\n\nplt.show()","345a45d1":"plt.hist(np.log(df_train['SalePrice']), bins=30)\nplt.title(\"Sale Price (Log Transformation) Histogram\")\nplt.xlabel('$log(SalePrice)$ ($USD$)')\nplt.ylabel('Frequency')\n\nplt.show()","4d021b42":"plt.hist(df_train['GrLivArea'], bins=30)\nplt.title(\"Above Ground Living Area Square Feet Histogram\")\nplt.xlabel('GrLivArea ($ft^{2}$)')\nplt.ylabel('Frequency')\n\nplt.show()","a3d39324":"plt.scatter(df_train.GrLivArea, df_train.SalePrice)\nplt.title(\"Above Ground Living Area Square Feet vs Sale Price (training set)\")\nplt.xlabel('GrLivArea')\nplt.ylabel('Sale Price')\nplt.show()","cb88d108":"plt.hist(df_train['GrLivArea'], bins=30, alpha=0.5, label='Train set')\nplt.hist(df_test['GrLivArea'], bins=30, alpha=0.5, label='Test set')\n\nplt.title(\"Above Ground Living Area Square Feet Histogram Train\/Test\")\nplt.xlabel('GrLivArea ($ft^{2}$)')\nplt.ylabel('Frequency')\n\nplt.legend()\nplt.show()","4635516a":"# group data by year and month\ndf_time_price = df_train.groupby(['YrSold', 'MoSold'], as_index=False)['SalePrice'].mean()\n# see the first rows\ndf_time_price.head()","55fb9ce8":"mean_2010 = df_time_price[df_time_price['YrSold'] == 2010]['SalePrice'].mean()\nmean_2010","484bdf18":"# create data with median value\nnew_dummy_df2010 = pd.DataFrame(np.array([[2010, 8, mean_2010], [2010, 9, mean_2010], [2010, 10, mean_2010], \n                       [2010, 11, mean_2010], [2010, 12, mean_2010]]),\n                   columns=['YrSold', 'MoSold', 'SalePrice'], index=[55, 56, 57, 58, 59])\nnew_dummy_df2010","b6fa1418":"# append the new data\ndf_time_price = df_time_price.append(new_dummy_df2010)","f4b1ed7a":"years = list(range(2006,2011))\nlabels = list(range(1, 13))","c70651c8":"plt.figure(figsize=(8, 6))\n\nfor year in years:\n    plt.plot(labels, df_time_price[df_time_price['YrSold'] == year]['SalePrice'], label=year)\n\nplt.title('Sale Price During Time Period')\nplt.xticks(labels)\nplt.xlabel('Months')\nplt.ylabel('Sale Price')\nplt.legend()\nplt.show()","a82bb448":"# calculate correlation matrix\ncorr = df_train[continuous_features + ['SalePrice']].corr()\n#Plot figsize\nfig, ax = plt.subplots(figsize=(12, 12))\n#Generate Color Map\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\n#Generate Heat Map, allow annotations and place floats in map\ng = sns.heatmap(corr, cmap=colormap, annot=True, fmt=\".2f\")\n#Apply xticks\n# plt.xticks(range(len(corr.columns)), corr.columns);\n# #Apply yticks\n# plt.yticks(range(len(corr.columns)), corr.columns)\n# #show plot\nplt.show()","cc7a353f":"imp_cont_features = ['GrLivArea', 'TotalBsmtSF', 'GarageArea', 'MasVnrArea', 'LotFrontage', \n                     'OpenPorchSF', 'WoodDeckSF']","ea8979e0":"%config InlineBackend.figure_format = 'png' \nsm = pd.plotting.scatter_matrix(df_train[imp_cont_features + ['SalePrice']], figsize=(30, 30), diagonal='kde');\n\nfor ax in sm.ravel():\n    ax.set_xlabel(ax.get_xlabel(), fontsize = 20, rotation = 45)\n    ax.set_ylabel(ax.get_ylabel(), fontsize = 20, rotation = 0)\n\n#May need to offset label when rotating to prevent overlap of figure\n[s.get_yaxis().set_label_coords(-0.5,0.5) for s in sm.reshape(-1)]\n\n#Hide all ticks\n[s.set_xticks(()) for s in sm.reshape(-1)]\n[s.set_yticks(()) for s in sm.reshape(-1)]\nplt.show()","b769a5d5":"for feat in imp_cont_features:\n    plt.scatter(df_train[feat], np.log(df_train.SalePrice))\n    plt.xlabel(feat)\n    plt.ylabel('$log(Sale Price)$')\n    plt.show()","b220778a":"df_train['TotalSquareFootage'] = df_train['GrLivArea'] + df_train['TotalBsmtSF']\ndf_test['TotalSquareFootage'] = df_test['GrLivArea'] + df_test['TotalBsmtSF']","ec5756e3":"plt.scatter(df_train['TotalSquareFootage'], np.log(df_train.SalePrice))\nplt.xlabel('TotalSquareFootage')\nplt.ylabel('$log(Sale Price)$')\nplt.show()","1ed6591b":"df_train['logSalePrice'] = np.log(df_train.SalePrice)","50ad30ac":"# calculate correlation matrix\ncorr = df_train[['TotalSquareFootage', 'SalePrice']].corr()\n#Plot figsize\nfig, ax = plt.subplots(figsize=(3,3))\n#Generate Color Map\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\n#Generate Heat Map, allow annotations and place floats in map\ng = sns.heatmap(corr, cmap=colormap, annot=True, fmt=\".2f\")\n#Apply xticks\n# plt.xticks(range(len(corr.columns)), corr.columns);\n# #Apply yticks\n# plt.yticks(range(len(corr.columns)), corr.columns)\n# #show plot\nplt.show()","c346f1e2":"import statsmodels.api as sm","1edab896":"df_train['intercept'] = 1","a2fb80b6":"X = df_train[['intercept', 'TotalSquareFootage']]\ny = df_train['SalePrice']","36ea98b5":"# predicting the price and add all of our var that are quantitative\nlm = sm.OLS(y, X)\nresults = lm.fit()\nresults.summary()","ae7834de":"# these are our cofficients for our function\nnp.dot(np.dot(np.linalg.inv(np.dot(X.transpose(), X)) , X.transpose()), y)","be8d041b":"df_train['Neighborhood'].value_counts()","6d3e51c2":"# create neighborhood dummies\nneighborhood_dummies = pd.get_dummies(df_train['Neighborhood'])\nneighborhood_dummies.head()","53db887d":"# select all the columns but the first\nneighborhood_columns = list(neighborhood_dummies.columns[1:])\nneighborhood_dummies[neighborhood_columns].head()","4c26b124":"X = X.join(neighborhood_dummies)\nX.head()","929b87c6":"y = df_train['SalePrice']","4663123c":"lm2 = sm.OLS(y, X[['intercept', 'TotalSquareFootage'] + neighborhood_columns])\nresults2 = lm2.fit()\nresults2.summary()","f12cac1c":"'{0:.10f}'.format(-4.119e+04)","b1d9b5c7":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error","a27b202a":"X.drop(columns=['intercept'], inplace=True)\ny = df_train['logSalePrice']","5f31a746":"reg = LinearRegression()\n# fit training data\nreg.fit(X, y)\n# get the R^2\nreg.score(X, y)","882a7ed2":"# get the coefficients\nreg.coef_","6066f5df":"# get the intercept\nreg.intercept_","4c77875c":"# make predictions\npred = reg.predict(X)","02482e34":"# calculate RMSE\ndef rmse(y, pred):\n    return np.sqrt(mean_squared_error(y, pred))","d51cd886":"# error\nrmse(y, pred)","3b0e9461":"# calculate RMSE\n# np.sqrt(mean_squared_error(y, pred))","be9f7eb9":"# load the dataset\nPATH_TO_DATA = '..\/input'\n\nsub = pd.read_csv(os.path.join(PATH_TO_DATA, \n                                             'sample_submission.csv'), index_col='Id')","824bd9fd":"df_test.head()","777546b6":"# create neighborhood dummies\nneighborhood_dummies_test = pd.get_dummies(df_test['Neighborhood'])\nneighborhood_dummies_test.head()","fa6d0a1f":"X_test = df_test[['TotalSquareFootage']]\nX_test = X_test.join(neighborhood_dummies_test)\nX_test.head()","9597353b":"# make predictions\npred_test = reg.predict(X_test)\n# exponentiate the results\npred_test = np.exp(pred_test)\npred_test[:10]","25bb144a":"sub['SalePrice'] = pred_test","860fa9e7":"plt.hist(pred_test, bins=40);\nplt.title('Distribution of SalePrice predictions');","6308840d":"sub.to_csv('model1.csv')\n# load the dataset\n\nmodel1_sub = pd.read_csv(os.path.join( \n                                             'model1.csv'), index_col='Id')\nmodel1_sub.head() # 0.19363","2d51b5e1":"From the above bar chart we can see the two distribution for zone classification are similar.","954e609b":"#### Non-null unique values","f5b52c2b":"Applying a log transformation on the Sale Price we can now see that our distribution is now more normal.","e4d948f5":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\nLet\u2019s visualize the information in our dataset by finding correlation between our variables and see how the data is distributed.","56edad43":"#### sklearn\n\n* let's use the sklearn Ordinary Least Squares Linear Regression\n* fit the logarithm of SalePrice: `logSalePrice`","5afaac24":"The properties with `None`, `MasVnrType` have `0`, `MasVnrArea`.","e8615e6a":"#### Nulls in testing set","4e500e91":"From the above carrelation matrix, we can see that our target variable, `SalePrice`, has a strong positive linear relationship with `GrLivArea`. ALso, a moderate positive linear relationship with:  \n* `TotalBsmtSF`(0.65)\n* `GarageArea`(0.64)\n* `1stFlrSF`(0.63) + `2ndFlrSF`(0.3) + `LowQualFinSF`= GrLivArea (that's why they correlate with each)\n* `MasVnrArea`(0.47)\n* `BsmtFinSF1` (0.4)\n* `LotFrontage` (0.34)\n* `OpenPorchSF` (0.33)\n* `WoodDeckSF` (0.32)\n\nBsmtFinSF2 + BsmtUnfSF = TotalBsmtSF","c3b8276b":"#### Nulls in training set","b406ff7b":"We don't have 2010 data for all year round. Therefore, we need to create some 0 data for vizualization purpose and append it to our dataframe.  ","bcf92372":"There are 19 columns with nuls in the training set. Let's identify the variable types with nuls because we have to figure out the reason why this variables are left blank in order to fill them with appropriate values.\n\nWe can see that there are some particular columns with really high number of nulls. For example, the `Alley` feature has 1369 nuls and only 91 non-nulls value. Same goes for `PoolQC`, `Fence`, `MiscFeature` and possibly `FireplaceQu`","6d47f499":"Here there are some differences between the two features, with two `NoSewr` values in the testing set and one `NoSeWa` in the training set.","48e5ea1f":"Same for the testing set, we can see the features: `Alley`, `PoolQC`, `Fence`, `MiscFeature` and `FireplaceQu` have lots of nulls. I'll look at these variable to figure out the reason for this.","05cdf670":"#### GarageYrBlt","d5960418":"#### KitchenQual","6320f7f9":"#### #Add Neighborhood Dummies","ecf00e08":"#### LotFrontage","3696bd4f":"Based only on the total square footage we get a R-squared of 0.674. This means that 67,4 % of the variability in SalePrice is explained by `TotalSquareFootage`","8efe0097":"<a id='wrangling'><\/a>\n## 2 Data Wrangling\n\nGetting the data I need in three steps:\n1. Gather \n2. Assess\n3. Cleaning","3c23b0a1":"<a id=\"conclusions\"><\/a>\n## Conclusions\n\nFitting the clean data to a simple **Linear Regression Model** in order to make a baseline model for further improvements. Using only two variables I was able to make a simple model with a **Coefficient of Determination  (R Squared)** of about 0.80. I first applied a log transformation on our target variable to make it normally distributed and then I fitted my input variables to the linear model. The two variables used in the regression are the Total Square Footage (`TotalBsmtS`F + `GrLivArea`) and the `Neighborhood`. On the second variable I used one-hot-encoding. The model was evaluated with `Root Mean Squared Error (RMSE)` with a value of about 0.17444 on the training set and 0.19363 on the testing set on the Kaggle House Prices Competition. \nThis is just a baseline model which has great room for improvement and creativity on feature engineering. This model used only two features and in the dataset there are 79. Also, there are other models that should be used like XGBoost, CatBoost, LightGBM, ElasticNet and others. Stacking the results of these models and hyperparameter tuning are the next steps for a second more complex model with better predictions.","ac446862":"In the testing set, we have nuls in 33 columns: 7 continuous features, 4 discrete column, 9 nominal columns and 13 ordinal columns. ","141c98e5":"#### #2.b Ordinal Features","142cf4d5":"#### Baseline Model\n\nLet's try to fit a Linear Regression by simply taking into consideration the neighborhood and total square footage:\n* Neighborhood\n* TotalBsmtSF + GrLivArea","c83b18db":"#### Remove Outliers\n\n* Remove from the training set and testing set the observations with a `GrLivArea` > 4,000. It is important to delete these values as Linear Regression is sensitive to outliers. \n* We have to be aware that there is an extreme data point in the testing set as well which we cannot remove.  ","88e95fec":"#### Utilities","350704da":"### #2.1. Gather the Data\n\nThe data set can be found on Kaggle, the classic [\"House Prices: Advanced Regression Techniques\"](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview) competition.","0f4001d2":"`GrLivArea` (above ground living area square feet) ranges from 334 to a maximum value of 3627 $ft^{2}$. From the above histogram of Above Ground Living Area we can see that most properties have a living area between 1,128 and 1,775 $ft^{2}$, with a median 1,458 $ft^{2}$.  ","155fa1d3":"#### Correlation Matrix","babab8cd":"#### Nulls in Categorical variables \n\nLooking at the description for each variable I found that 'NA' stands for:\n\n* `Alley`: No alley access\n* `GarageType`: No Garage\n* `MiscFeature`: None\n* `BsmtQual`, `BsmtCond`, `BsmtExposure`, `BsmtFinType1`, `BsmtFinType2`: No Basement\n* `FireplaceQu`: No Fireplace\n* `Pool quality`, `PoolQC`: No pool\n* `GarageFinish`, `GarageQual`, `GarageCond`: No Garage\n* `Fence`: No Fence\n\nThese should be replaced by other variables in order to account for them when encoding our features.\n\n\nSome other features with Nulls that require further investigations: `MSZoning`, `Utilities`, `Exterior1st`, `Exterior2nd`, `MasVnrType`, `SaleType`, `Functional`.","398bcd1f":"#### MasVnrType  and MasVnrArea\n\n* MasVnrArea - None\n* MasVnrType - 0","c338429b":"These where Sal (Salvage Only) but in order to have the same structure I put them in Sev (Severely Damaged)","0eb8168a":"#### #1.b Discrete Features","9375a806":"From the above histogram, we can see that the training and testing set distributions of Above Ground Living Area are similar with the difference that in the testing set there is one extreme value.","d108d153":"#### Nulls in Numeric variables\n\nThere are also Nuls in continuous variables:\n* `LotFrontage`, `MasVnrArea`, `BsmtFinSF1`, `BsmtFinSF2`, `BsmtUnfSF`, `TotalBsmtSF`, `GarageArea`: maybe fill them with the mean values to not affect the distributions of values.\n\nDiscrete Null values:\n* `BsmtFullBath`, `BsmtHalfBath`, `GarageYrBlt`, `GarageCars`","4fa79c26":"The Sale Price Histogram is right skewed, ranging from 34,900 USD to 755,000 USD. The median sale price is 163,000 which might indicate there are some potential outliers or extreme values that can cause bias to our model if we don't eliminate them.","9e1fe618":"Differences \nBecause there are no Industrial and Agricultural examples in our testing set, I will reassign these to \n* I -> RH (Residential High Density)\n* A -> RL (Residential Low Density)","2d0d3bef":"We can see here that SalePrice has a strong positive linear relation with TotalSquareFootage, with a Correlation Coefficient of 0.82. I will use this continuous variable in my first simple model.","933fd7bf":"From the the above scatter matrix we can see the distributions of the features correlated to our target variable as well as  the density plot for each variable.","59490fba":"We can see there are some differences between the unique values from training set to testing set. It's important to assess the differences since we want our model to make predictions on similar data. It is tough to predict values if we don't have training examples.","9c9ce21c":"This observation has more missing values. Let's fill them all.","ea8c5dc5":"### #2 Assesing Data\n\nGeneral properties of the training and testing sets:\n* Number of samples in train\/test dataset: 1460, 1459\n* Number of columns in train\/test dataset: 80, 79\n* Duplicate rows in each dataset: 0\n* Datatypes: float64(3), int64(35), object(43). So, at first look we have 37 numeric variables and 43 categorical variables. Actually, there are 19 continuous features (without the target variable), 14 discrete features, 23 nominal features and 23 ordinal features\n* Features with missing values: there are 19 columns in the training set with missing values and 33 in the test set\n* Number of non-null unique values for features in training set\n* Use the `describe` function for the statistics of the dataset:\n    * the count, mean, standard deviation and the 5 number summary for each variable.","0fd74c98":"#### Features\n\nLet's categorize our features to identify them easier for each of the variable type (numeric and categorical): continuous, discrete, nominal and ordinal.","937e28bc":"#### Functional","cd13afa0":"#### Sale Price Over Time Period","9559d5c0":"#### MsZoning","cd68d704":"#### #1.a Continuous Features","cc20f15f":"We can see that there are 14 more variables with nuls in the testing set. Let's identify them.","bfbadd3e":"#### Continuous Features Nulls","10326f3a":"$yhat = 82.80489695x - 31594.19591877$","aa8c687e":"#### GarageArea & GarageCars","31e27ddd":"#### Exterior1st","b9131330":"Removing the outliers now we can better see the strong linear relation between Sale Price and Above Ground Living Area.","b154107d":"From the above line plot we can see monthly average `SalePrice` from 2006 to 2010. We don't have data for 8-12 months of 2010, so they are filled with the mean value. The biggest sales with a mean value of more then 220,000 USD were recorded in September of 2006 while the worst month was in July of 2010. We can see that, typically, the last four months of the year are more profitable.","f583d62a":"## House Prices Dataset Analysis\n\n### Table of Contents\n<ol>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ol>\n\n<a id='intro'><\/a>\n## 1. Introduction\n\n[The Ames Housing dataset](http:\/\/jse.amstat.org\/v19n3\/decock.pdf) was compiled by Dean De Cock for use in data science education and it's a great a;ternative to the Boston Housing dataset. It describes the sale of individual residential property in Ames, Iowa from 2006 to 2010. This dataset contains only residential sales within the date set, only the most recent sales data on any property. \n\nThe dataset contains 2919 observations separated in:\n* training set, with 1460 observations\n* testing set, with 1459 observations.\n\nThere are 80 features involved in assessing home values, with the target variable included. They focus on the quality and quantity of many physical attributes of the property. \n\nThe features have the following structure:\n\n#### #1 Categorical Variables:\n\nThey range from 2 to 28 classes. We should use label encoding for these categorical variables.\n\n* 23 **nominal**: typically identify various types of dwellings, garages, materials, and environmental conditions \n* 23 **ordinal**: ordinal variables typically rate various items within the property. \n\n**PID**  and **NEIGHBORHOOD** are two features of special interest.\n\nPID (Parcel Identification Number assigned to each property within the Ames Assessor\u2019s system) \n* This number can be used in conjunction with the [Assessor\u2019s Office](http:\/\/www.cityofames.org\/assessor\/) or [Beacon](http:\/\/beacon.schneidercorp.com\/) websites to directly view the records of a particular observation.\n* The typical record will indicate the values for characteristics commonly quoted on most home flyers and will include a picture of the property.\n* I must say that PID number was especially useful when trying to fill the missing values.\n\n#### #2 Numeric variables:\n* 14 discrete: quantify the number of items occurring within the house:\n    * the number of kitchens, bedrooms, and bathrooms (full and half) located in the basement and above grade (ground) living areas of the home, the garage capacity, construction\/remodeling dates.\n* 19 continuous (area dimensions)\n    * typical lot size and total dwelling square footage and other more specific variables are quantified in the data set like: area measurements on the basement, main living area, porches are broken down into individual categories based on quality and type.\n    \nI have compiled a spreadsheet (features.ods) with all the features with the description for each type of variable: \n\n* numeric (continuous, discrete) \n* categorical (nominal, ordinal)\n\n### Goal\n\nThe goal of this notebook is to understand the Ames Dataset in order to uncover meaningful patterns and insights and model the data to make accurate sale price predictions.\n1. First, I will assess and clean the data by: \n    * Categorize features \n    * Fill in missing values\n    * Remove outliers \n2. Perform **Exploratory Data Analysis** to visualise how our variables are distributed and how they correlate to each other.\n3. Fit the clean data to a simple **Linear Regression Model** in order to make a baseline model for further improvements. Using only two variables I was able to make a simple model with a **Coefficient of Determination  (R Squared)** of about 0.80. I first applied a log transformation on our target variable to make it normally distributed and then I fitted my input variables to the linear model. The two variables used in the regression are the Total Square Footage (`TotalBsmtS`F + `GrLivArea`) and the `Neighborhood`. On the second variable I used one-hot-encoding. The model was evaluated with `Root Mean Squared Error (RMSE)` with a value of about 0.17444 on the training set and 0.19363 on the testing set on the Kaggle House Prices Competition. \nThis is just a baseline model which has great room for improvement and creativity on feature engineering. This model used only two features and in the dataset there are 79. Also, there are other models that should be used like XGBoost, CatBoost, LightGBM, ElasticNet and others. Stacking the results of these models and hyperparameter tuning are the next steps for a second more complex model with better predictions.","99a90a89":"So, at first look we have 37 numeric variables and 43 categorical variables. I'll pay some attention to this, as the variable types are important when modelling our data and making predictions.","8d8640ff":"#### BsmtFinSF1, BsmtFinSF2, BsmtUnfSF,  TotalBsmtSF, BsmtFullBath, BsmtHalfBath","88cf607b":"#### TotalSquareFootage","92ced90d":"### Fit a regression model with Bloomington Heights as Baseline","3752b1d1":"#### Electrical","00ec54b7":"#### Fillna for categorical variables\n\nFrom the dataset description, the missing values in these categorical features: 'Alley', 'GarageType', 'MiscFeature', 'FireplaceQu', 'Fence', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'PoolQC', 'GarageFinish', 'GarageQual', 'GarageCond', means `None`","a5f75d2a":"Let's calculate [Root-Mean-Squared-Error (RMSE)](https:\/\/en.wikipedia.org\/wiki\/Root-mean-square_deviation) \n* between the logarithm of the predicted value and the logarithm of the observed sales price. \n\n**Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.**","5bba2b8b":"#### Conclusions for Neighborhood Blmngtn\n\n1. 79.6% of the variability in price can be explained by the linear model built using total square footage and neighborhood.\n2. For each additional unit increase in TotalSquareFootage, the price is expected to increase by 62 dollars as long as all the other variables stay the same.\n3. We expect that a house in NridgHt will cost 75310 more than a house in Blmngtn, all else being equal.\n4.  We expect that a house in SWISU will cost 41190 less than a house in Blmngtn, all else being equal.","b5847c74":"### #2 Cleaning the Data\n\n* The dataset is pretty clean but we do need to fill in the missing values and remove potential outliers that can affect our Linear Model.","e30236ff":"We are left now with the above variables to fill in missing values for categorical features. We can see there are more missing values in the testing set than in the training set. Let's see if we can figure out why they are not filled.","252f62c2":"#### #2.a Nominal Features","d13e6942":"### Fit a Simple Linear Model","5692365b":"#### #1 Create an intercept","3e640979":"In the training set, we have nulls in 19 columns: 2 continuous, 1 discrete, 5 nominal and 11 ordinal columns. ","abbaca42":"#### Evaluate our base model","5e45b7de":"#### SaleType","5c115fcb":"#### Submit Predictions","3e3f649d":"After looking online, I found [here]( http:\/\/www.amstat.org\/publications\/jse\/v19n3\/decock\/AmesHousing.xls ) the original version of the dataset and I could easily extract the information for the `MSZoning` and other features.\nLet's make the changes manually.","cebe47f3":"#### Dataset Statistics"}}