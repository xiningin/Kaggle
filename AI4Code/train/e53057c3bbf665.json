{"cell_type":{"a67cf5cc":"code","7c56bae6":"code","d3566953":"code","81f9c88a":"code","261565c4":"code","407e5982":"code","1dd7d3c7":"code","59d2e466":"code","28a443da":"code","be161413":"code","bb88bdf7":"code","a65db3a9":"code","c171a845":"code","0b34bc79":"code","44532dc9":"code","4e59f634":"code","9ba38681":"code","ef3ea26e":"code","9a9abc7b":"code","999bd9a9":"markdown","dbd5ab31":"markdown","b0a439f6":"markdown","573b95a3":"markdown","ae31acc7":"markdown","af956b69":"markdown","e1dfa8e7":"markdown","8eb1b7b7":"markdown","26e7ff63":"markdown","130172b6":"markdown","8016f3c0":"markdown","f16515fb":"markdown","b8dcc0bb":"markdown","0081455d":"markdown","78d11e78":"markdown"},"source":{"a67cf5cc":"#Import basic packages\nimport numpy as np\nimport pandas as pd\n\n#Package for data visualisation\nimport matplotlib.pyplot as plt\n\n#Packages for preprocessing\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\n#Packages for modelling \nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Package for evaluation\nfrom sklearn.model_selection import cross_val_score","7c56bae6":"#Read training & testing dataset and store it as DataFrame \ndf_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\n\n#Check the shape of each of the dataset\nprint(df_train.shape)\nprint(df_test.shape)","d3566953":"#Assign a value and create a new column in testing set.\ndf_test['target'] = 10\n#Combine both dataset and denote to (df_all)\ndf_all = df_train.append(df_test, sort = True)","81f9c88a":"#Take a look at the summary of each column\ndf_all.info()","261565c4":"#Replace (-1) with NaN\ndf_all = df_all.replace(-1,np.nan)\n#Let's look at the summary again\ndf_all.info()","407e5982":"#Let's list down all the categorical variables that contain NaN. \ncat_na = ['ps_ind_02_cat', 'ps_ind_04_cat', 'ps_ind_05_cat', 'ps_car_01_cat', 'ps_car_02_cat', 'ps_car_03_cat', 'ps_car_05_cat', 'ps_car_07_cat', 'ps_car_09_cat']\n#Bar chart plot regards on the frequency count of each category in each of the categorical variables that contain NaN. \nfor i in cat_na:\n    my_tab = pd.crosstab(index = df_all[i],columns=\"count\")    \n    my_tab.plot.bar()\n    plt.show()","1dd7d3c7":"#Fill NaN with most frequently number\nfor i in cat_na:\n    df_all[i] = df_all[i].fillna(df_all[i].mode()[0])","59d2e466":"#List down all the continuous variables that contain NaN\ncont_na = ['ps_reg_03', 'ps_car_11', 'ps_car_12', 'ps_car_14']\n#It is not wise to have a frequency plot for continuous variable...give it a try if you want to find out. \n#Fill NaN with mean\nfor i in cont_na:\n    df_all[i] = df_all[i].fillna(df_all[i].mean())","28a443da":"#Use nunique method to determine the number of unique values in each column\ndef count_unique_value(dataframe):\n    df = pd.DataFrame()\n    df['No. of unique value'] = dataframe.nunique()\n    df['DataType'] = dataframe.dtypes\n    return df\n\nprint(count_unique_value(df_all))","be161413":"#Change datatype to 'Category' for the columns with number of unique value <= 20. \ndef change_datatype(dataframe):\n    col = dataframe.columns\n    for i in col:\n        if dataframe[i].nunique()<=20:\n            dataframe[i] = dataframe[i].astype('category')\n    \nchange_datatype(df_all)\n\n#Change the datatype of target to int64. \ndf_all['target'] = df_all['target'].astype('int64')","bb88bdf7":"#Convert categorical variables to dummy variables\ndf_all_dummy = pd.get_dummies(df_all, drop_first = True)","a65db3a9":"#Split the combined dataset into training set & testing set\ndf_train_adj = df_all_dummy[df_all_dummy['target'] != 10]\ndf_test_adj = df_all_dummy[df_all_dummy['target'] == 10]","c171a845":"#Extract training data from training set\ndata_to_train = df_train_adj.drop(['target','id'], axis = 1)\n#Extract labels from training set\nlabels_to_use = df_train_adj['target']","0b34bc79":"#Build different model\n\n#Logistic Regression\nlogreg = make_pipeline(RobustScaler(), LogisticRegression())\n\n#SGD Classifier\nsgd = make_pipeline(RobustScaler(), SGDClassifier(loss=\"log\"))\n\n#Random Forest Classifier\nrfc = make_pipeline(RobustScaler(), RandomForestClassifier(50))","44532dc9":"def evaluation_auc(model):\n    result= cross_val_score(model, data_to_train, labels_to_use, cv = 3, scoring = 'roc_auc')\n    return(result)","4e59f634":"#Score for Logistic Regression\nscore = evaluation_auc(logreg)\nprint(\"\\nLogistic Regression Score: {:.5f} ({:.5f})\\n\".format(score.mean(), score.std()))","9ba38681":"#Score for SGD Classifier\nscore = evaluation_auc(sgd)\nprint(\"\\nSGD Classifier Score: {:.5f} ({:.5f})\\n\".format(score.mean(), score.std()))","ef3ea26e":"#Score for Random Forest Classifier\nscore = evaluation_auc(rfc)\nprint(\"\\nRandom Forest Classifier score: {:.5f} ({:.5f})\\n\".format(score.mean(), score.std()))","9a9abc7b":"#Submission preparation\ntest_df_id = df_test['id']\ntest_df_x = df_test_adj.drop(['target', 'id'], axis = 1)\nlogreg.fit(data_to_train, labels_to_use)\n\n#As we are predicting probability, use predict_proba instead of predict! \ntest_df_y = logreg.predict_proba(test_df_x)[:,1]\n\nsubmission = pd.DataFrame({'id': list(test_df_id), 'target': list(test_df_y)})\nsubmission.to_csv('sgd_log.csv')","999bd9a9":"Preprocess for data cleaning\n\nUsually, we will conduct data cleaning process for both training & testing dataset. To aviod repetitive work, we will first need to combine both training & testing dataset into one. \n\nps. By looking at the shape for both dataset, testing dataset is short of one column==> 'target'. We will need to assign a new column named 'target' in the testing set. As this is a binary classification problem, the values will be either 1 or 0 under column 'target' in training test. To avoid confusion, we will need to assign a different value. ","dbd5ab31":"**Main Content:**\n* Import important packages,  training & testing dataset\n* Data Cleaning\n* Find the best fit model\n* Submission","b0a439f6":"**PART IV: Submission**","573b95a3":"Logistics Regression performs the best! Our final submission will be based on that! ","ae31acc7":"**PART I: Import Packages, training & testing dataset**","af956b69":"**Build a evaluation model**","e1dfa8e7":"Hi guys, I'm Ivan! \n\nIn this kernel, I'm going to introduce a simple algorithm to solve a binary classification problem. **Logistic Regression!!!**\nAs this is my very first kernel regards on classification, please correct me if you spot any mistakes! :)\nThis kernel is only meant for beginners, hopefully it will be useful! Now, let's start !","8eb1b7b7":"Change some of the continuous variables to categorical variables. \n\nReason behind this: \nSome of the columns are classified as continuous variables, however, it makes more sense to convert it into categorical variables if the number of categories is not huge. ","26e7ff63":"By looking at the above output, it seems that we do not have any missing value across all the columns. Well, it is not as smooth as you think....\n\nIt is stated at the missing value is replace by -1. Therefore, we have to change it back to NaN and fill up with a value that is more reasonable! ","130172b6":"*This is the end of the kernel, thank you! *","8016f3c0":"**PART II: Data Cleaning**\n\nData cleaning is extremely important in many of the project, and it is very tedious for most of the time. To have a good picture on the data, sometimes we need to be creative! \n","f16515fb":"We have done most of the work in data cleaning process. Right now, let's wrap up! \n","b8dcc0bb":"Interpretation on the plot:\n\nIn each of the bar chart, there is a significance difference in the frequency count of each of the catetory. It will be reasonable that if we fill up the missing value with the value that appears the most in the corresponding column. ","0081455d":"Of course you can build as much model as you want. It is also possible to have a more accurate result by changing the default parameters. For Random forecast classifier, the larger number of estimators, the more accurate of the model. However, the processing time is getting slower as the number of estimators increases. The maximum number of estimators should not be larger than total number of variables. ","78d11e78":"**PART III: Find the best fit model**"}}