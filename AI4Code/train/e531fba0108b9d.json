{"cell_type":{"caab5a6d":"code","8ef179b4":"code","0cab76ba":"code","664103fa":"code","dab2de26":"code","d207cf6e":"code","55795666":"code","e28aeebf":"code","0ac93e35":"code","fce6fd36":"code","d0e67b7f":"code","ce9fc961":"code","49bdf129":"code","b3bbcfb5":"code","eec31c15":"code","f2b377c9":"code","766b4999":"code","f64b385f":"code","c7975480":"code","d172310b":"code","21a0cd10":"code","b5f3eb4c":"code","5f90665f":"code","2fc96b11":"code","43fa8320":"code","fcfe2257":"code","5b3287c1":"code","f6b378a5":"code","3592fd8b":"code","8498edc7":"code","3e416765":"code","1fa934fc":"markdown","9780231c":"markdown","83e5c9d6":"markdown"},"source":{"caab5a6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ef179b4":"df = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ndf.head()","0cab76ba":"df.shape","664103fa":"df.isna().sum()","dab2de26":"df['Gender'] = df['Gender'].fillna('Male')\ndf['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].median())\ndf['Dependents'] = df['Dependents'].fillna('1')\ndf['Self_Employed']= df['Self_Employed'].fillna('No')\ndf['Credit_History'] = df['Credit_History'].fillna(1)\ndf['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].median())\ndf['Married'] = df['Married'].fillna('No')","d207cf6e":"df['Married'].replace({'No':0, 'Yes':1},inplace=True)\ndf['Gender'].replace({'Male':0, 'Female':1},inplace=True)\ndf['Education'].replace({'Graduate':1,'Not Graduate':0},inplace=True)\ndf['Self_Employed'].replace({'No':0, 'Yes':1},inplace=True)\ndf['Loan_Status'].replace({'N':0, 'Y':1},inplace=True)\ndf['Property_Area'].replace({'Rural':1, 'Semiurban':3, 'Urban':2},inplace=True)\ndf['Dependents'].replace({'3+':3,'2':2,'1':1,'0':0},inplace=True)","55795666":"df.head()","e28aeebf":"df.isna().sum()","0ac93e35":"import matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score,train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier","fce6fd36":"plt.hist(df['ApplicantIncome'])\nplt.show()\n","d0e67b7f":"plt.hist(df['CoapplicantIncome'])\nplt.show()","ce9fc961":"a = df[df['ApplicantIncome'] > 30000]\na","49bdf129":"b = df[df['CoapplicantIncome']>15000]\nb","b3bbcfb5":"df.drop(index=a.index,inplace=True)\ndf.drop(index=b.index,inplace=True)","eec31c15":"plt.hist(df['LoanAmount'])\nplt.show()","f2b377c9":"df['LoanAmountlog'] = np.log(df['LoanAmount'])","766b4999":"plt.hist(df['Loan_Amount_Term'])\nplt.show()","f64b385f":"x = df[['Gender','Married','Dependents','Education','Self_Employed','ApplicantIncome',\n        'CoapplicantIncome','LoanAmountlog','Loan_Amount_Term','Credit_History','Property_Area']]\ny = df['Loan_Status']","c7975480":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.30)","d172310b":"clf = LogisticRegression(random_state=0,max_iter=1000).fit(x_train, y_train)\ne = clf.predict(x_test)\nprint(confusion_matrix(y_test, e))\nacc = accuracy_score(y_test, e)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(clf,x,y,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","21a0cd10":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\nj = rfc.predict(x_test)\nprint(confusion_matrix(y_test,j))\nacc = accuracy_score(y_test, j)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(rfc,x,y,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","b5f3eb4c":"x1 = df[['Education','Credit_History','Property_Area','Married','Gender']]\ny1 = df['Loan_Status']","5f90665f":"x_train1, x_test1, y_train1, y_test1 = train_test_split(x1,y1, test_size=0.30)","2fc96b11":"clf = LogisticRegression(random_state=0,max_iter=100).fit(x_train1, y_train1)\ne = clf.predict(x_test1)\nprint(confusion_matrix(y_test1, e))\nacc = accuracy_score(y_test1, e)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(clf,x1,y1,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","43fa8320":"rfc = RandomForestClassifier()\nrfc.fit(x_train1, y_train1)\nj = rfc.predict(x_test1)\nprint(confusion_matrix(y_test1,j))\nacc = accuracy_score(y_test1, j)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(rfc,x1,y1,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","fcfe2257":"model = LGBMClassifier()\nmodel.fit(x_train1, y_train1)\nl = model.predict(x_test1)\nprint(confusion_matrix(y_test1,l))\nacc = accuracy_score(y_test1, l)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(model,x1,y1,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","5b3287c1":"mod = XGBClassifier()\nmod.fit(x_train1,y_train1)\nr = mod.predict(x_test1)\nconfusion_matrix(y_test1,r)\nfrom sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test1, r)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(mod,x1,y1,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","f6b378a5":"x = df[['Education','Credit_History','Property_Area']]\ny = df['Loan_Status']","3592fd8b":"\nfrom imblearn.combine import SMOTEENN\nsmk = SMOTEENN()\nX_res,y_res=smk.fit_resample(x,y)\nprint(X_res.shape,y_res.shape)\nx_train, x_test, y_train, y_test = train_test_split(X_res,y_res, test_size=0.30)","8498edc7":"clf = LogisticRegression(random_state=0,max_iter=1000).fit(x_train, y_train)\ne = clf.predict(x_test)\nprint(confusion_matrix(y_test, e))\nacc = accuracy_score(y_test, e)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(clf,x,y,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","3e416765":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\nj = rfc.predict(x_test)\nprint(confusion_matrix(y_test,j))\nacc = accuracy_score(y_test, j)\nprint(\"Accuracy: %.3f\" % acc)\nscore = cross_val_score(rfc,x,y,cv=10)\nprint(\"Cross_val_accuracy: %0.2f\" % (score.mean()))","1fa934fc":"# **Oversampling**","9780231c":"# **Detecting outliers**","83e5c9d6":"# **Reducing the attributes**"}}