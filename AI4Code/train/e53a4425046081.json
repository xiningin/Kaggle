{"cell_type":{"982d8a00":"code","92b65043":"code","8c1eca52":"code","ef424513":"code","5598ba31":"code","626215c1":"code","8c0fba90":"code","aa0ebc00":"code","8dc78a5e":"code","77731d0a":"code","ad8673f4":"code","d01a406d":"code","bcb0b371":"code","1f52978d":"code","c43eef98":"code","b627c1c6":"code","0eca1aef":"code","3c2c99bd":"code","4253a500":"code","a82a2733":"code","fdd1b5c4":"code","1f0ee22f":"code","0ee8f386":"code","7b28bb3e":"code","679f41a7":"code","d9ba6c8d":"code","217c4b6c":"code","a0f7ebb3":"markdown","15fcdf3e":"markdown","eb490de4":"markdown","046ae683":"markdown","6789f40d":"markdown","09db66b2":"markdown","13a90b43":"markdown","a55d5b93":"markdown","465f8c27":"markdown","cbef9cd5":"markdown","3f640967":"markdown","c80ef16e":"markdown","c53488ff":"markdown","65b6922a":"markdown","cccabdd8":"markdown","d35ac056":"markdown","567cbf5e":"markdown","5ccbd04a":"markdown","998c7b97":"markdown","7c224edb":"markdown","a63f1e78":"markdown","f6643a09":"markdown","62074e31":"markdown","73277e34":"markdown","8c39410e":"markdown","ad38edee":"markdown","9b8303cb":"markdown","9d5e170a":"markdown","fe5f1815":"markdown","90d0ac49":"markdown"},"source":{"982d8a00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 23) \nimport os\nprint(os.listdir(\"..\/input\/mushroom-classification\"))","92b65043":"data = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","8c1eca52":"data.head()","ef424513":"data.info()","5598ba31":"# copy data\ndataset = data.copy()\n\n# rename all values\ndataset = dataset.replace({'class' : {'p': 'poisonous', 'e': 'edible'}})\ndataset = dataset.replace({'cap-shape' : {'b':'bell','c':'conical','x':'convex','f':'flat','k':'knobbed','s':'sunken'}})\ndataset = dataset.replace({'cap-surface' : {'f':'fibrous','g':'grooves','y':'scaly','s':'smooth'}})\ndataset = dataset.replace({'cap-color' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','r':'green',\n                                                    'p':'pink','u':'purple','e':'red','w':'white','y':'yellow'}})\ndataset = dataset.replace({'bruises' : {'t':'bruises','f':'no'}})\ndataset = dataset.replace({'odor' : {'a':'almond','l':'anise','c':'creosote','y':'fishy','f':'foul','m':'musty','n':'none',\n                                              'p':'pungent','s':'spicy'}})\ndataset = dataset.replace({'gill-attachment' : {'a':'attached','d':'descending','f':'free','n':'notched'}})\ndataset = dataset.replace({'gill-spacing' : {'c':'close','w':'crowded','d':'distant'}})\ndataset = dataset.replace({'gill-size' : {'b':'broad','n':'narrow'}})\ndataset = dataset.replace({'gill-color' : {'k':'black','n':'brown','b':'buff','h':'chocolate','g':'gray','r':'green',\n                                                    'o':'orange','p':'pink','u':'purple','e':'red','w':'white','y':'yellow'}})\ndataset = dataset.replace({'stalk-shape' : {'e':'enlarging','t':'tapering'}})\ndataset = dataset.replace({'stalk-root' : {'b':'bulbous','c':'club','u':'cup','e':'equal','z':'rhizomorphs',\n                                                     'r':'rooted','?':\"missing\"}})\ndataset = dataset.replace({'stalk-surface-above-ring' : {'f':'fibrous','y':'scaly','k':'silky','s':'smooth'}})\ndataset = dataset.replace({'stalk-surface-below-ring' : {'f':'fibrous','y':'scaly','k':'silky','s':'smooth'}})\ndataset = dataset.replace({'stalk-color-above-ring' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange',\n                                                                'p':'pink','e':'red','w':'white','y':'yellow'}})\ndataset = dataset.replace({'stalk-color-below-ring' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange',\n                                                                'p':'pink','e':'red','w':'white','y':'yellow'}})\ndataset = dataset.replace({'veil-type' : {'p':'partial','u':'universal'}})\ndataset = dataset.replace({'veil-color' : {'n':'brown','o':'orange','w':'white','y':'yellow'}})\ndataset = dataset.replace({'ring-number' : {'n':'none','o':'one','t':'two'}})\ndataset = dataset.replace({'ring-type' : {'c':'cobwebby','e':'evanescent','f':'flaring','l':'large','n':'none',\n                                                   'p':'pendant','s':'sheathing','z':'zone'}})\ndataset = dataset.replace({'spore-print-color' : {'k':'black','n':'brown','b':'buff','h':'chocolate','r':'green','o':'orange',\n                                                           'u':'purple','w':'white','y':'yellow'}})\n\ndataset = dataset.replace({'population' : {'a':'abundant','c':'clustered','n':'numerous','s':'scattered','v':'several',\n                                                     'y':'solitary'}})\ndataset = dataset.replace({'habitat' : {'g':'grasses','l':'leaves','m':'meadows','p':'paths','u':'urban','w':'waste','d':'woods'}})","626215c1":"dataset.head()","8c0fba90":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px","aa0ebc00":"sns.heatmap(dataset.isnull())\nprint(dataset.isnull().sum())","8dc78a5e":"dataset[\"class\"].value_counts()","77731d0a":"a = dataset[\"class\"].value_counts()\ncolors = [\"#43b581\", \"#f04747\"]\nfig = px.pie(a, values=\"class\", title='Percentage of poisonous and edible', names=a.index, hole=0.3)\nfig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(colors=colors, line=dict(color='#ffffff', width=2)), textfont_size=20)\nfig.show()","ad8673f4":"plt.subplots(figsize=(10,6))\nsns.set_style(\"whitegrid\")\ng = sns.countplot(dataset[\"cap-shape\"], hue=dataset[\"class\"], palette=\"Set2\")\n\nplt.legend(loc=\"upper right\")\nplt.title(\"cap shape VS class\", fontweight=\"bold\")\nfor p in g.patches:\n    g.annotate('{:2}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+1), va='bottom', ha=\"center\", fontweight='bold')","d01a406d":"# Poisonous\npoi = dataset[dataset[\"class\"]==\"poisonous\"][[\"cap-color\"]]\n\na = poi[\"cap-color\"].value_counts()\ncolors = ['brown', 'red', 'gray', 'yellow', 'white', 'buff', 'pink', 'cinnamon']\nfig = px.pie(a, values=\"cap-color\", title='Poisonous mushroom according to color', names=a.index, hole=0.3)\nfig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(colors=colors, line=dict(color='#313131', width=2)), textfont_size=20)\nfig.show()\n\n# Edible\nedi = dataset[dataset[\"class\"]==\"edible\"][[\"cap-color\"]]\n\nb = edi[\"cap-color\"].value_counts()\ncolors = ['brown', 'gray', 'white', 'red', 'yellow', 'pink', 'buff', 'cinnamon', 'purple', 'green']\nfig = px.pie(b, values=\"cap-color\", title='Edible mushroom according to color', names=b.index, hole=0.3)\nfig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(colors=colors, line=dict(color='#313131', width=2)), textfont_size=20)\nfig.show()","bcb0b371":"plt.subplots(figsize=(10,6))\nsns.set_style(\"whitegrid\")\ng = sns.countplot(dataset[\"gill-attachment\"], hue=dataset[\"class\"], palette=\"Set2\")\n\nplt.legend(loc=\"upper right\")\nplt.title(\"gill attachment VS class\", fontweight=\"bold\")\nfor p in g.patches:\n    g.annotate('{:2}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+1), va='bottom', ha=\"center\", fontweight='bold')","1f52978d":"# Poisonous mushroom habitat\npoi = dataset[dataset[\"class\"]==\"poisonous\"][[\"habitat\"]]\n\na = poi[\"habitat\"].value_counts()\nfig = px.pie(a, values=\"habitat\", title='Poisonous mushroom according to habitat', names=a.index, hole=0.3)\nfig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#313131', width=2)), textfont_size=20)\nfig.show()\n\n# Edible mushroom habitat\nedi = dataset[dataset[\"class\"]==\"edible\"][[\"habitat\"]]\n\nb = edi[\"habitat\"].value_counts()\nfig = px.pie(b, values=\"habitat\", title='Edible mushroom according to habitat', names=b.index, hole=0.3)\nfig.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#313131', width=2)), textfont_size=20)\nfig.show()","c43eef98":"fig, (ax1,ax2) = plt.subplots(1, 2, figsize=(12, 6))\ndataset[\"ring-number\"].value_counts().plot(kind=\"bar\", ax=ax1)\ng = sns.countplot(dataset[\"ring-number\"], hue=dataset[\"class\"], ax=ax2, palette=\"Set2\")\nplt.suptitle(\"Ring number VS class\", fontweight=\"bold\")\nfor p in g.patches:\n    g.annotate('{:2}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+1), va='bottom', ha=\"center\")\nplt.legend(loc=\"upper right\")","b627c1c6":"from sklearn.preprocessing import LabelEncoder\nlencoder=LabelEncoder()\nfor col in data.columns:\n    dataset[col] = lencoder.fit_transform(dataset[col])","0eca1aef":"dataset.drop(\"veil-type\", axis=1, inplace=True)\n\ncorre = dataset.corr()\nplt.subplots(figsize=(16, 8))\nsns.heatmap(corre, annot=True)","3c2c99bd":"corre[\"class\"].sort_values(ascending=False)","4253a500":"from sklearn.model_selection import train_test_split\nX = dataset.drop([\"class\"], axis=1)\ny = dataset[\"class\"]\n\nseed = 42\ntest = 0.3\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=seed, test_size=test)","a82a2733":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","fdd1b5c4":"from sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression, PassiveAggressiveClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import GridSearchCV","1f0ee22f":"model_params = {\n    \"svm\": {\n        \"model\": SVC(gamma=\"auto\"),\n        \"params\":{\n            \"C\": [1, 10, 20],\n            \"kernel\": [\"rbf\", \"linear\"]\n        }\n    },\n    \"RandomForest\": {\n        \"model\": RandomForestClassifier(),\n        \"params\": {\n            \"n_estimators\": [1, 5, 10]\n        }\n    },\n    \"Logistic Regression\":{\n        \"model\": LogisticRegression(solver=\"liblinear\", multi_class=\"auto\"),\n        \"params\": {\n            \"C\": [1, 10, 20]\n        }\n    },\n    \"ExtraTree\": {\n        \"model\": ExtraTreesClassifier(),\n        \"params\": {\n            \"n_estimators\" : [1, 5, 10]\n        }\n    },\n    \"DecisionTree\": {\n        \"model\": DecisionTreeClassifier(),\n        \"params\": {\n            \"criterion\": [\"gini\", \"entropy\"]\n        }\n    }\n}","0ee8f386":"scores = []\nfor model_name, param in model_params.items():\n    clf = GridSearchCV(param[\"model\"], param[\"params\"], cv=10, return_train_score=False)\n    clf.fit(X_train, y_train)\n    scores.append({\n        \"model\": model_name,\n        \"best_score\": clf.best_score_,\n        \"best_params\": clf.best_params_,\n    })","7b28bb3e":"df = pd.DataFrame(scores, columns=[\"model\", \"best_score\", \"best_params\"])\ndf","679f41a7":"model = SVC(C=1, kernel=\"rbf\")\n\nmodel.fit(X_train, y_train)\n\npredict = model.predict(X_test)\n\npredict","d9ba6c8d":"print(classification_report(predict, y_test))","217c4b6c":"print(confusion_matrix(predict, y_test))","a0f7ebb3":"# Use Hypertunning","15fcdf3e":"# Habitat of Mushroom","eb490de4":"## Attribute Information: \n# (classes: edible=e, poisonous=p)\n\n    cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\n    cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\n    cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\n    bruises: bruises=t,no=f\n\n    odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\n    gill-attachment: attached=a,descending=d,free=f,notched=n\n\n    gill-spacing: close=c,crowded=w,distant=d\n\n    gill-size: broad=b,narrow=n\n\n    gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\n    stalk-shape: enlarging=e,tapering=t\n\n    stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\n    stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\n    stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\n    stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n    stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n    veil-type: partial=p,universal=u\n\n    veil-color: brown=n,orange=o,white=w,yellow=y\n\n    ring-number: none=n,one=o,two=t\n\n    ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\n    spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\n    population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\n    habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n","046ae683":"# Take a look of this dataset","6789f40d":"# import visualization dependencies","09db66b2":"# A fresh look","13a90b43":"# check the correlation","a55d5b93":"# This dataset is full of single letter, thats very hard for me to explore..So, I used full names","465f8c27":"# Ring Types","cbef9cd5":"# import all essential module","3f640967":"# Working Process\n\n## 1. Load Data\n## 2. Data rename\n## 3. Some Visualizations\n## 4. LabelEncoding\n## 5. Check Correlation\n## 6. StandardScalar\n## 7. Hyper Tunning\n## 8. Find Best Model and Best Parameters","c80ef16e":"# Now the Classification Part","c53488ff":"# Load the data","65b6922a":"# Train, Test, Split part","cccabdd8":"# The idea behind StandardScaler is that it will transform your data such that its distribution will have a mean value 0 and standard deviation of 1","d35ac056":"# Search for best model and best parameters","567cbf5e":"# Class of mushroom","5ccbd04a":"# The pileus is the technical name for the cap, or cap-like part, of a basidiocarp or ascocarp (fungal fruiting body) that supports a spore-bearing surface, the hymenium. The hymenium (hymenophore) may consist of lamellae, tubes, or teeth, on the underside of the pileus. A pileus is characteristic of agarics, boletes, some polypores, tooth fungi, and some ascomycetes.\n\n# Let's check which cap shape is edible and which one is poisonous, according to data","998c7b97":"# data information","7c224edb":"# classification report","a63f1e78":"# If you like Please Upvote","f6643a09":"# confusion matrix","62074e31":"# correlation with class","73277e34":"# Use the Label Encoder to encode","8c39410e":"# percentage of poisonous and edible mushroom","ad38edee":"# Mushroom cap-color","9b8303cb":"# Although gill attachments are very important in identifying mushrooms, one should not think that they are a hard-and-fast characteristic. A species may feature several different types of gill attachments, especially the three narrowly attached types ( adnexed, emarginate, and sinuate), even on the same fruiting body. The term notched is sometimes used to mean either emarginate or sinuate, as in the cross-sectioned fruiting body","9d5e170a":"# svm, randomforest, Extratree, Decisiontree gives high accuracy with those params","fe5f1815":"## Check null value","90d0ac49":"# create dataframe for best model and params"}}