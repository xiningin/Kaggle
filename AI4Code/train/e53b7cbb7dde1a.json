{"cell_type":{"9c42b900":"code","9025a380":"code","a0274072":"code","57a62d87":"code","d434b758":"code","bcd5b255":"code","8f808b03":"code","ceb1fa11":"code","6941e245":"code","255b0bc0":"markdown","8054de33":"markdown","9ddb4459":"markdown","05947acd":"markdown","b7e08329":"markdown","74d01e1a":"markdown","55c8b147":"markdown","39f1258c":"markdown"},"source":{"9c42b900":"import numpy as np\nimport pandas as pd\nimport os\nimport h5py\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport random\nimport glob\nimport cv2 as cv\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom sklearn.metrics import accuracy_score\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns","9025a380":"lst_fire_img = glob.glob('\/kaggle\/input\/fire-dataset\/fire_dataset\/fire_images\/*.png')\nlst_non_fire_img = glob.glob('\/kaggle\/input\/fire-dataset\/fire_dataset\/non_fire_images\/*.png')","a0274072":"#preprosessing\n\nX, Y = [], []\nimg_size= (160, 160)\nfor root,_,files in os.walk(\"..\/input\/fire-dataset\/fire_dataset\/fire_images\"):\n    for file in files:\n        x = cv.imread(os.path.join(root, file))\n        if(x is None):\n            print(file)\n            continue\n        x = cv.resize(x, img_size, interpolation=cv.INTER_AREA)\n        X.append(x\/255.0)\n        Y.append(1)\nfor root,_,files in os.walk(\"..\/input\/fire-dataset\/fire_dataset\/non_fire_images\"):\n    for file in files:\n        x = cv.imread(os.path.join(root, file))\n        if(x is None):\n            print(file)\n            continue\n        x = cv.resize(x, img_size, interpolation=cv.INTER_AREA)\n        X.append(x\/255.0)\n        Y.append(0)\n        \nX = np.stack(X)\nY = np.asarray(Y)\nnum_fire_images = np.sum(Y == 1)\nnum_non_fire_images = np.sum(Y == 0)\nprint(\"Number of Fire Images:\", num_fire_images)\nprint(\"Number of non-Fire Images:\", num_non_fire_images)\nX_tv, X_test, Y_tv, Y_test = train_test_split(X, Y, test_size = 0.1, shuffle=True, stratify=Y, random_state=1)\nX_train, X_val, Y_train, Y_val = train_test_split(X_tv, Y_tv, test_size=0.2, shuffle=True, stratify=Y_tv, random_state=2)\nclass_weights = {0:num_fire_images\/X.shape[0], 1:num_non_fire_images\/X.shape[0]}\nprint(\"Class Weights:\",class_weights)","57a62d87":"#Displaying images\nlst_images_random = random.sample(lst_fire_img,10) + random.sample(lst_non_fire_img,10)\nrandom.shuffle(lst_images_random)\n\nplt.figure(figsize = (20,20))\n\nfor i in range(len(lst_images_random)):\n    \n    plt.subplot(4,5,i+1)\n\n\n    if \"non_fire\" in lst_images_random[i]:\n        img = cv2.imread(lst_images_random[i])\n        img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n        plt.imshow(img,cmap = 'gray')\n        plt.title('Image without fire')\n\n    else:\n        img = cv2.imread(lst_images_random[i])\n        img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n        plt.imshow(img,cmap = 'gray')\n        plt.title(\"Image with fire\")\n\n\n\nplt.show()","d434b758":"#Model builld\n\nfrom keras.models import Sequential\nfrom keras import layers\nmodel = Sequential()\n\nmodel.add(layers.Conv2D(512,(3,3),input_shape = (160,160,3),activation='relu'))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Conv2D(224,(3,3),activation='relu'))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Conv2D(128,(3,3),activation='relu'))\nmodel.add(layers.MaxPooling2D(3,3))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(256, activation = 'relu'))\nmodel.add(layers.Dense(64,activation = 'relu'))\nmodel.add(layers.Dense(1,activation= \"sigmoid\"))","bcd5b255":"model.summary()","8f808b03":"callbacks = [EarlyStopping(monitor = 'val_loss',patience = 18,restore_best_weights=True)]\nmodel.compile(optimizer='adam',loss = 'binary_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train,Y_train,validation_data=(X_val,Y_val),\nepochs = 30,\nbatch_size = 32,callbacks = callbacks)","ceb1fa11":"#model testing \nY_pred = (model.predict(X_test)>0.5).astype(np.int64)\nacc = accuracy_score(Y_test, Y_pred)\nrec = recall_score(Y_test, Y_pred)\npre = precision_score(Y_test, Y_pred)\n\nprint(\"Test Accuracy:\",acc)\nprint(\"Test Precision:\",pre)\nprint(\"Test Recall:\",rec)","6941e245":"im = Image.open(\"non_fire.189.png\")\nim.show()","255b0bc0":"I used max pooling rather than using the average value (average pooling) it using the max values which is a better way because we are able to get a downsampled outcome,Conv2d is a  layer creates a convolution kernel that is wind with layers input which helps produce a tensor of outputs.","8054de33":"Plot 20 images to see how data is looking so far","9ddb4459":"# Introduction\nI am making a fire classification model  that is able to tell weither something is on fire or not, this could be helpful with modernday issues with wildfires appearing every now and then around the world. I predict that the model will be able to accuratly predict weither  or not there is a fire, since the model will NOT be analysing smoke so it should not get mixed between fog and smoke.","05947acd":"Testing and trainging the model and getting accuracy sore from it","b7e08329":"Imports","74d01e1a":"Preprossesing can enhance the data before we use it to make it more accurate","55c8b147":"# Conclusion \nGoing through the process of depicting data the test came back to be 97%. probably the reason that it wasnt able to get a 100% was probably due tot he fact that file 189_nonfire isnt particulary a normal png, it is a gif but its not labeled as one (can be viewed down below).","39f1258c":"Loading data with glob, glob performs wildcard pattern matching on filenames, and an fnmatch module with functions for matching strings or filtering lists based on these same wildcard patterns."}}