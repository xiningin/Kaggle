{"cell_type":{"a7e87c34":"code","3aae8588":"code","8173cc57":"code","bf13e855":"code","6532e556":"code","dab00d47":"code","13711812":"code","96f2cc3c":"code","8a19f2c1":"code","7448b3ab":"code","ba0dd174":"code","4d09c76a":"code","208caf11":"code","330dea69":"code","56fe1b99":"code","43949544":"code","bddd9e70":"code","12bbf749":"code","9d3104e5":"code","e82fdb7f":"code","92117f35":"code","bbefc3a0":"code","a95a9d03":"code","234d5037":"code","4f1a4406":"code","81fa2674":"code","b636ca37":"code","405d8989":"markdown","f0370d6b":"markdown","f12bd8f5":"markdown","8a2da133":"markdown","95f23a11":"markdown","da953548":"markdown","a4cbcf6a":"markdown","72e6526a":"markdown","e695ed6b":"markdown","f4538d31":"markdown","172afb28":"markdown","7c9218b1":"markdown","86671f95":"markdown","c8712f6d":"markdown","26b78218":"markdown","b4ab426c":"markdown","1f8c3023":"markdown","4e5f935e":"markdown","25472a77":"markdown","eea785c2":"markdown","0d4f6821":"markdown","09007ad2":"markdown","e3466a65":"markdown","e411af13":"markdown","088b34f5":"markdown","0d3614dd":"markdown","126d1d72":"markdown"},"source":{"a7e87c34":"pip install scikit-posthocs","3aae8588":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime \nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\nfrom scipy import stats\nimport scikit_posthocs as sp\nfrom statsmodels.stats.multicomp import (pairwise_tukeyhsd, MultiComparison)\nimport time\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","8173cc57":"df = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf.head()","bf13e855":"df.info()","6532e556":"count_by_gender = df \\\n    .groupby('gender', as_index = False) \\\n    .agg({'lunch' : 'count'}) \\\n    .rename(columns = {'lunch' : 'count'})\n\nfig = go.Figure(data = go.Bar(\n    x = count_by_gender['gender'],\n    y = count_by_gender['count'],\n    marker = dict(\n        line = dict(\n            color = 'black',\n            width = 2),\n        color = ['#E7003E', 'lightseagreen']),\n    opacity = 0.6,\n    width = [0.5, 0.5]\n))\n\nfig.add_annotation(    \n    x = 0,\n    y = count_by_gender['count'][0] + 5,\n    text = str(count_by_gender['count'][0]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 1,\n    y = count_by_gender['count'][1] + 5,\n    text = str(count_by_gender['count'][1]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n    \nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Number of observations by gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    visible = False)\n\nfig.update_xaxes(\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","dab00d47":"fig = go.Figure(data=go.Violin(\n    x = df['math score'], \n    box_visible=True, \n    line_color = 'black',\n    fillcolor = '#C0C0C0', \n    opacity=0.6,\n    marker_color = 'black',\n    y0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of math score',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_xaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 5) \n\nfig.show()","13711812":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'female']['gender'],\n    y = df[df['gender']== 'female']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#E7003E',\n    name = 'female',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'male']['gender'],\n    y = df[df['gender']== 'male']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = 'lightseagreen',\n    name = 'male',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of math score by gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","96f2cc3c":"fig = go.Figure(data=go.Violin(\n    x = df['reading score'], \n    box_visible=True, \n    line_color = 'black',\n    fillcolor = '#C0C0C0', \n    opacity=0.6,\n    marker_color = 'black',\n    y0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of reading score',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_xaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 5) \n\nfig.show()","8a19f2c1":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'female']['gender'],\n    y = df[df['gender']== 'female']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#E7003E',\n    name = 'female',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'male']['gender'],\n    y = df[df['gender']== 'male']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = 'lightseagreen',\n    name = 'male',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of reading score by gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","7448b3ab":"fig = go.Figure(data=go.Violin(\n    x = df['writing score'], \n    box_visible=True, \n    line_color = 'black',\n    fillcolor = '#C0C0C0', \n    opacity=0.6,\n    marker_color = 'black',\n    y0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of writing score',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_xaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 5) \n\nfig.show()","ba0dd174":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'female']['gender'],\n    y = df[df['gender']== 'female']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#E7003E',\n    name = 'female',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['gender']== 'male']['gender'],\n    y = df[df['gender']== 'male']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = 'lightseagreen',\n    name = 'male',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of writing score by gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\nfig.show()","4d09c76a":"p_values =[]\nfor score in ['math score', 'reading score', 'writing score']:\n        p_value = stats.mannwhitneyu(df[df['gender'] == 'female'][score], df[df['gender'] == 'male'][score])[1]\n        p_values.append(p_value)\ndf_mannw_gender = pd.DataFrame({'score' : ['math score', 'reading score', 'writing score'],\n                                'p-value' : p_values})\nfig = go.Figure(data=[go.Table(\n    columnwidth = [50, 80],\n    header = dict(\n        values = ['score', 'p-value'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [df_mannw_gender['score'], df_mannw_gender['p-value']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 450,\n    height = 300,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.18,\n        text = 'Mann\u2013Whitney U test',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","208caf11":"count_by_race = df \\\n    .groupby('race\/ethnicity', as_index = False) \\\n    .agg({'lunch' : 'count'}) \\\n    .rename(columns = {'lunch' : 'count'})\n\nfig = go.Figure(data = go.Bar(\n    x = count_by_race['race\/ethnicity'],\n    y = count_by_race['count'],\n    marker = dict(\n        line = dict(\n            color = 'black',\n            width = 2),\n        color = ['#3CB371', '#FF7F50', '#DAA520', '#9400D3', '#BDB76B']),\n    opacity = 0.6,\n    width = [0.5, 0.5, 0.5, 0.5, 0.5]\n))\n\nfig.add_annotation(    \n    x = 0,\n    y = count_by_race['count'][0] + 5,\n    text = str(count_by_race['count'][0]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 1,\n    y = count_by_race['count'][1] + 5,\n    text = str(count_by_race['count'][1]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 2,\n    y = count_by_race['count'][2] + 5,\n    text = str(count_by_race['count'][2]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 3,\n    y = count_by_race['count'][3] + 5,\n    text = str(count_by_race['count'][3]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 4,\n    y = count_by_race['count'][4] + 5,\n    text = str(count_by_race['count'][4]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n    \nfig.update_layout(\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Number of observations by race\/ethnicity',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    visible = False)\n\nfig.update_xaxes(\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","330dea69":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group A']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group A']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#3CB371',\n    name = 'group A',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group B']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group B']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#FF7F50',\n    name = 'group B',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group C']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group C']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#DAA520',\n    name = 'group C',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group D']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group D']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#9400D3',\n    name = 'group D',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group E']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group E']['math score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#BDB76B',\n    name = 'group E',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of math score by race\/ethnicity',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1,\n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\nfig.show()","56fe1b99":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group A']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group A']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#3CB371',\n    name = 'group A',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group B']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group B']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#FF7F50',\n    name = 'group B',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group C']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group C']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#DAA520',\n    name = 'group C',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group D']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group D']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#9400D3',\n    name = 'group D',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group E']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group E']['reading score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#BDB76B',\n    name = 'group E',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of reading score by race\/ethnicity',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","43949544":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group A']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group A']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#3CB371',\n    name = 'group A',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group B']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group B']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#FF7F50',\n    name = 'group B',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group C']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group C']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#DAA520',\n    name = 'group C',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group D']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group D']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#9400D3',\n    name = 'group D',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.add_trace(go.Violin(\n    x = df[df['race\/ethnicity']== 'group E']['race\/ethnicity'],\n    y = df[df['race\/ethnicity']== 'group E']['writing score'],\n    box_visible = True,\n    line_color = 'black',\n    fillcolor = '#BDB76B',\n    name = 'group E',\n    opacity = 0.6,\n    x0 = ' ',\n    points = 'all',\n    pointpos = -1.5))\n\nfig.update_layout(\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of writing score by race\/ethnicity',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","bddd9e70":"p_values =[]\nfor score in ['math score', 'reading score', 'writing score']:\n        p_value = stats.kruskal(df[df['race\/ethnicity'] == 'group A'][score], \n                                df[df['race\/ethnicity'] == 'group B'][score],\n                                df[df['race\/ethnicity'] == 'group C'][score],\n                                df[df['race\/ethnicity'] == 'group D'][score],\n                                df[df['race\/ethnicity'] == 'group E'][score])[1]\n        p_values.append(p_value)\ndf_mannw_race = pd.DataFrame({'score' : ['math score', 'reading score', 'writing score'],\n                                'p-value' : p_values})\nfig = go.Figure(data=[go.Table(\n    columnwidth = [50, 80],\n    header = dict(\n        values = ['score', 'p-value'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [df_mannw_race['score'], df_mannw_race['p-value']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 450,\n    height = 300,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.18,\n        text = 'Kruskal-Wallis Test',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","12bbf749":"dunn_test_df = sp.posthoc_dunn([\n                     df[df['race\/ethnicity'] == 'group A']['math score'], \n                     df[df['race\/ethnicity'] == 'group B']['math score'],\n                     df[df['race\/ethnicity'] == 'group C']['math score'],\n                     df[df['race\/ethnicity'] == 'group D']['math score'],\n                     df[df['race\/ethnicity'] == 'group E']['math score']], \n                     p_adjust = 'bonferroni')\ndunn_test_df \\\n    .rename(columns = {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            index =   {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            inplace = True)\ndunn_test_df = round(dunn_test_df, 4)\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [200, 200, 200, 200, 200, 200],\n    header = dict(\n        values = ['groups', 'group A', 'group B', 'group C', 'group D', 'group E'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [['group A', 'group B', 'group C', 'group D', 'group E'], dunn_test_df['group A'], dunn_test_df['group B'], dunn_test_df['group C'], dunn_test_df['group D'], dunn_test_df['group E']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 585,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Dunn\u2019s Test (math score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","9d3104e5":"dunn_test_df = sp.posthoc_dunn([\n                     df[df['race\/ethnicity'] == 'group A']['reading score'], \n                     df[df['race\/ethnicity'] == 'group B']['reading score'],\n                     df[df['race\/ethnicity'] == 'group C']['reading score'],\n                     df[df['race\/ethnicity'] == 'group D']['reading score'],\n                     df[df['race\/ethnicity'] == 'group E']['reading score']], \n                     p_adjust = 'bonferroni')\ndunn_test_df \\\n    .rename(columns = {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            index =   {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            inplace = True)\ndunn_test_df = round(dunn_test_df, 4)\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [200, 200, 200, 200, 200, 200],\n    header = dict(\n        values = ['groups', 'group A', 'group B', 'group C', 'group D', 'group E'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [['group A', 'group B', 'group C', 'group D', 'group E'], dunn_test_df['group A'], dunn_test_df['group B'], dunn_test_df['group C'], dunn_test_df['group D'], dunn_test_df['group E']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 615,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Dunn\u2019s Test (reading score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","e82fdb7f":"dunn_test_df = sp.posthoc_dunn([\n                     df[df['race\/ethnicity'] == 'group A']['writing score'], \n                     df[df['race\/ethnicity'] == 'group B']['writing score'],\n                     df[df['race\/ethnicity'] == 'group C']['writing score'],\n                     df[df['race\/ethnicity'] == 'group D']['writing score'],\n                     df[df['race\/ethnicity'] == 'group E']['writing score']], \n                     p_adjust = 'bonferroni')\ndunn_test_df \\\n    .rename(columns = {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            index =   {1 : 'group A',\n                       2 : 'group B',\n                       3 : 'group C',\n                       4 : 'group D',\n                       5 : 'group E'},\n            inplace = True)\ndunn_test_df = round(dunn_test_df, 4)\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [200, 200, 200, 200, 200, 200],\n    header = dict(\n        values = ['groups', 'group A', 'group B', 'group C', 'group D', 'group E'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [['group A', 'group B', 'group C', 'group D', 'group E'], dunn_test_df['group A'], dunn_test_df['group B'], dunn_test_df['group C'], dunn_test_df['group D'], dunn_test_df['group E']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 615,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Dunn\u2019s Test (writing score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","92117f35":"count_by_race_gender = df \\\n    .groupby(['race\/ethnicity', 'gender'], as_index = False) \\\n    .agg({'lunch' : 'count'}) \\\n    .rename(columns = {'lunch' : 'count'})\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = count_by_race_gender[count_by_race_gender['gender'] == 'female']['race\/ethnicity'],\n    y = count_by_race_gender[count_by_race_gender['gender'] == 'female']['count'],\n    name = 'female',\n    marker_color = '#E7003E',\n    opacity = 0.6,\n    marker = dict(\n        line = dict(\n            color = 'black',\n            width = 2))\n))\n\nfig.add_trace(go.Bar(\n    x = count_by_race_gender[count_by_race_gender['gender'] == 'male']['race\/ethnicity'],\n    y = count_by_race_gender[count_by_race_gender['gender'] == 'male']['count'],\n    name = 'male',\n    marker_color = 'lightseagreen',\n    opacity = 0.6,\n    marker = dict(\n        line = dict(\n            color = 'black',\n            width = 2))\n))\n\nfig.add_annotation(    \n    x = -0.2,\n    y = count_by_race_gender['count'][0] + 5,\n    text = str(count_by_race_gender['count'][0]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 0.2,\n    y = count_by_race_gender['count'][1] + 5,\n    text = str(count_by_race_gender['count'][1]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 0.8,\n    y = count_by_race_gender['count'][2] + 5,\n    text = str(count_by_race_gender['count'][2]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 1.2,\n    y = count_by_race_gender['count'][3] + 5,\n    text = str(count_by_race_gender['count'][3]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 1.8,\n    y = count_by_race_gender['count'][4] + 5,\n    text = str(count_by_race_gender['count'][4]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 2.2,\n    y = count_by_race_gender['count'][5] + 5,\n    text = str(count_by_race_gender['count'][5]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 2.8,\n    y = count_by_race_gender['count'][6] + 5,\n    text = str(count_by_race_gender['count'][6]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 3.2,\n    y = count_by_race_gender['count'][7] + 5,\n    text = str(count_by_race_gender['count'][7]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 3.8,\n    y = count_by_race_gender['count'][8] + 5,\n    text = str(count_by_race_gender['count'][8]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.add_annotation(    \n    x = 4.2,\n    y = count_by_race_gender['count'][9] + 5,\n    text = str(count_by_race_gender['count'][9]),\n    yanchor = 'bottom',\n    arrowhead = 5,\n    arrowwidth = 1,\n    arrowcolor = 'black',\n    ax = 0,\n    ay = -10,\n    showarrow = False,\n    font = dict(\n        size = 15, \n        color = 'black', \n        family = 'Droid Serif'),\n    bordercolor = 'white',\n    align= 'center',\n    borderwidth = 1,\n    borderpad = 4,\n    bgcolor = 'white'\n  )\n\nfig.update_layout(\n    legend = dict(\n        font = dict(\n            color = 'black',\n            size = 15,\n            family = 'Droid Serif')),\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Number of observations by race\/ethnicity and gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    visible = False)\n\nfig.update_xaxes(\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","bbefc3a0":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'female']['math score'],\n    legendgroup = 'female', \n    scalegroup = 'female', \n    name = 'female',\n    fillcolor = '#E7003E',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'male']['math score'],\n    legendgroup = 'male', \n    scalegroup = 'male', \n    name = 'male',\n    fillcolor = 'lightseagreen',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.update_layout(\n    legend = dict(\n        font = dict(\n            color = 'black',\n            size = 15,\n            family = 'Droid Serif')),\n    violinmode = 'group',\n    showlegend = True,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of math score by race\/ethnicity and gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC', \n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","a95a9d03":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'female']['reading score'],\n    legendgroup = 'female', \n    scalegroup = 'female', \n    name = 'female',\n    fillcolor = '#E7003E',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'male']['reading score'],\n    legendgroup = 'male', \n    scalegroup = 'male',\n    name = 'male',\n    fillcolor = 'lightseagreen',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.update_layout(\n    legend = dict(\n        font = dict(\n            color = 'black',\n            size = 15,\n            family = 'Droid Serif')),\n    violinmode = 'group',\n    showlegend = True,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of reading score by race\/ethnicity and gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True,\n    gridwidth = 1,\n    gridcolor = '#DCDCDC',\n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","234d5037":"fig = go.Figure()\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'female']['writing score'],\n    legendgroup = 'female', \n    scalegroup = 'female', \n    name = 'female',\n    fillcolor = '#E7003E',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.add_trace(go.Violin(\n    x = df['race\/ethnicity'],\n    y = df[df['gender'] == 'male']['writing score'],\n    legendgroup = 'male', \n    scalegroup = 'male', \n    name = 'male',\n    fillcolor = 'lightseagreen',\n    line_color = 'black',\n    box_visible = True,\n    opacity = 0.6)\n             )\n\nfig.update_layout(\n    legend = dict(\n        font = dict(\n            color = 'black',\n            size = 15,\n            family = 'Droid Serif')),\n    violinmode = 'group',\n    showlegend = True,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        text = 'Ditribution of writing score by race\/ethnicity and gender',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\n\nfig.update_yaxes(\n    showgrid = True, \n    gridwidth = 1, \n    gridcolor = '#DCDCDC',\n    showline = True,\n    color = 'black',\n    linecolor = 'black',\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15),\n    dtick = 10) \n\nfig.update_xaxes(\n    tickfont = dict(\n        color = 'black',\n        family = 'Droid Serif',\n        size = 15))\n\nfig.show()","4f1a4406":"df.rename(columns = {'math score' : 'math_score', \n                     'reading score' : 'reading_score',\n                     'writing score' : 'writing_score',\n                     'race\/ethnicity' : 'race_ethnicity'}, inplace = True)\ndf['math_score_log'] = np.log(df['math_score'])\ndf['reading_score_log'] = np.log(df['reading_score'])\ndf['writing_score_log'] = np.log(df['writing_score'])\ndf_1 = df[df['math_score'] > 0]\n\nformula = 'math_score_log ~ gender + race_ethnicity + gender : race_ethnicity'\nmodel = ols(formula, df_1).fit()\naov_table = anova_lm(model, typ=2)\naov_table = aov_table \\\n    .reset_index() \\\n    .rename(columns = {'index' : 'groups'})\n\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [250, 250],\n    header = dict(\n        values = ['groups', 'PR(>F)'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [aov_table['groups'], aov_table['PR(>F)']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 675,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Two-Way ANOVA (math score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","81fa2674":"formula = 'reading_score_log ~ gender + race_ethnicity + gender : race_ethnicity'\nmodel = ols(formula, df_1).fit()\naov_table = anova_lm(model, typ=2)\naov_table = aov_table \\\n    .reset_index() \\\n    .rename(columns = {'index' : 'groups'})\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [250, 250],\n    header = dict(\n        values = ['groups', 'PR(>F)'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [aov_table['groups'], aov_table['PR(>F)']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 675,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Two-Way ANOVA (reading score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","b636ca37":"formula = 'writing_score_log ~ gender + race_ethnicity + gender : race_ethnicity'\nmodel = ols(formula, df_1).fit()\naov_table = anova_lm(model, typ=2)\naov_table = aov_table \\\n    .reset_index() \\\n    .rename(columns = {'index' : 'groups'})\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [250, 250],\n    header = dict(\n        values = ['groups', 'PR(>F)'],\n        fill_color = '#C0C0C0',\n        line_color = 'black',\n        align = 'left'),\n    cells = dict(\n        values = [aov_table['groups'], aov_table['PR(>F)']],\n        fill_color = 'white',\n        line_color = 'black',\n        align = 'left'))\n                     ])\nfig.update_layout(\n    width = 675,\n    height = 350,\n    showlegend = False,\n    plot_bgcolor = 'white',\n    paper_bgcolor = 'white',\n    title = dict(\n        x = 0.14,\n        text = 'Two-Way ANOVA (writing score)',\n        font = dict(\n            size = 24,\n            color = 'black',\n            family = 'Droid Serif')))\nfig.show()","405d8989":"**By median reading score:**\n1. group E - 74\n2. group D - 71\n3. group C - 71\n4. group B - 67\n5. group A - 64","f0370d6b":"**There are more women than men in this dataset**","f12bd8f5":"**By median writing score:**\n1. group E - 72\n2. group D - 72\n3. group C - 68\n4. group B - 67\n5. group A - 62","8a2da133":"**There are statistically significant differences between these groups:**\n\n* group A & group D\n* group A & group E\n* group B & group E","95f23a11":"# gender and race\/ethnicity","da953548":"# By race\/ethnicity","a4cbcf6a":"**In all race\/ethnic groups, women have a higher median mathcore than men.**\n\nTop:\n1. group E\/female - 76\n2. group D\/female - 74\n3. group C\/female - 73\n4. group E\/male - 73\n5. group B\/female - 71.5\n6. group D\/male - 68\n7. group A\/female - 67.5\n8. group C\/male - 66\n9. group B\/male - 62\n10. group A\/male - 61","72e6526a":"**By median math score:**\n1. group E - 74.5\n2. group D - 69\n3. group C - 65\n4. group B - 63\n5. group A - 61","e695ed6b":"**Most people in Group C, least people in Group A.**","f4538d31":"**With Two-Way ANOVA, we will check whether the combination of gender and race factors affects the score. But first let's transform our data.**","172afb28":"**In all race\/ethnic groups, men have a higher median mathcore than women.**\n\nTop:\n1. group D\/male -72\n2. group A\/male - 69.5\n3. group E\/male - 69\n4. group E\/female - 68\n5. group C\/male - 68\n6. group A\/female - 67\n7. group B\/male - 67\n8. group B\/female - 65\n9. group C\/female - 64\n10. group D\/female - 62","7c9218b1":"**There are statistically significant differences between these groups:**\n\n* group A & group D\n* group A & group \u0421\n* group A & group E\n* group B & group E","86671f95":"**Distribution of reading score: 17 - 100. Median - 70.**","c8712f6d":"**Women have a higher median writing score than men.**","26b78218":"**Men have a higher median math score than women.**","b4ab426c":"**Distribution of math score: 0 - 100. Median - 66.**","1f8c3023":"**There is no significant interaction effect between gender and race\/ethnicity.**","4e5f935e":"# By gender","25472a77":"**The Kruskal-Wallis H-test tests the null hypothesis that median of all of the groups are equal. We reject the null hypothesis, so we'll do Dunn's test.**","eea785c2":"**In the race\/ethnic groups with the best results (group D and group E), the ratio of men and women is almost the same.**","0d4f6821":"**We have statistically significant differences in all scores.**","09007ad2":"**There are statistically significant differences between these groups:**\n\n* group A & group D\n* group A & group E\n* group B & group E\n* group C & group E\n* group D & group E","e3466a65":"**There is no significant interaction effect between gender and race\/ethnicity.**","e411af13":"**There is no significant interaction effect between gender and race\/ethnicity.**","088b34f5":"**Women have a higher median reading score than men.**","0d3614dd":"**Distribution of writing score: 10 - 100. Median - 69.**","126d1d72":"**In all race\/ethnic groups, women have a higher median mathcore than men.**\n\nTop:\n1. group D\/female - 76\n2. group E\/female - 76\n3. group C\/female - 74\n4. group B\/female - 71.5\n5. group E\/male - 70\n6. group A\/female - 67\n7. group D\/male - 67\n8. group C\/male - 62\n9. group A\/male - 60\n10. gorup B\/male - 60"}}