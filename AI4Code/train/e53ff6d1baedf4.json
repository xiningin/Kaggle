{"cell_type":{"b5384729":"code","a8d8f39c":"code","2dd17a19":"code","2bd1acdc":"code","587a6528":"code","2aa90ef4":"code","52b6ef4e":"code","1504abf1":"code","b82321a4":"code","6cacce38":"code","649c8584":"code","0748e7fd":"code","c32e5dd3":"code","fca320e0":"code","c3d14250":"code","6b93315c":"code","24e99878":"code","18e07608":"code","ee7954ad":"code","79f3fb8f":"markdown","200a771f":"markdown","f017f8f3":"markdown","1fef90bc":"markdown","5a75fc2f":"markdown","00ef5518":"markdown","853cd5e9":"markdown","a999ff07":"markdown"},"source":{"b5384729":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8d8f39c":"\n\nimport time \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","2dd17a19":"df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv',index_col = 0)  \ndf","2bd1acdc":"df_test = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv',index_col = 0)  \ndf_test","587a6528":"y = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv',index_col = 0 )\ny","2aa90ef4":"y_additional = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv',index_col = 0 )\ny_additional","52b6ef4e":"y.sum(axis = 1).value_counts()","1504abf1":"y_additional.sum(axis = 1).value_counts()","b82321a4":"mode_which_part_to_process = 'full'\nif mode_which_part_to_process == 'full':\n    # consider only gene expression part \n    X = df[[c for c in df.columns if ('c-' in c) or ('g-' in c)]].values\nif mode_which_part_to_process == 'genes':\n    # consider only gene expression part \n    X = df[[c for c in df.columns if 'g-' in c]].values\nif mode_which_part_to_process == 'c':\n    # consider only gene expression part \n    X = df[[c for c in df.columns if 'c-' in c]].values\n\nprint(len([c for c in df.columns if 'g-' in c] ), 'genes count ')\nX_original_save = X.copy()\nprint(X.shape)","6cacce38":"t0 = time.time()\ncorr_matr = np.corrcoef(X.T) # Hint - use numpy , pandas is MUCH SLOWER   (df.corr() )\nprint(time.time() - t0, 'seconds passed')\nprint(np.min(corr_matr ), 'minimal correlation' )\ncorr_matr_abs = np.abs( corr_matr )\nprint(np.mean(corr_matr_abs ), 'average absolute correlation' )\nprint(np.median(corr_matr_abs), 'median absolute correlation' )\nprint(np.min(corr_matr_abs ), 'min absolute correlation' )\nprint(np.std(corr_matr_abs ), 'std absolute correlation' )\n\n\ncorr_matr.shape","649c8584":"\nv = corr_matr.flatten()\nplt.figure(figsize=(14,8))\nt0 = time.time()\nplt.hist(v, bins = 50)\nplt.title('correlation coefficients distribution')\nplt.show()\nprint(time.time() - t0, 'seconds passed')\n\nprint(np.min(corr_matr ), 'minimal correlation' )\nprint(np.mean(corr_matr_abs ), 'average absolute correlation' )\nprint(np.median(corr_matr_abs), 'median absolute correlation' )\nprint(np.min(corr_matr_abs ), 'min absolute correlation' )\nprint(np.std(corr_matr_abs ), 'std absolute correlation' )\n\n\nv.shape","0748e7fd":"plt.figure(figsize=(14,8))\nt0 = time.time()\nsns.heatmap(corr_matr_abs).set_title('Correlation (abs) heatmap')\nprint(time.time() - t0, 'seconds passed')\n","c32e5dd3":"import igraph","fca320e0":"corr_matr_abs_bool = corr_matr_abs > 0.78\ncorr_matr_abs_bool = corr_matr_abs_bool[:772 ,:772 ]\ncorr_matr_abs_bool = np.triu(corr_matr_abs_bool,1) # Take upper triangular part \ng = igraph.Graph().Adjacency(corr_matr_abs_bool.tolist())\ng.to_undirected(mode = 'collapse')\nprint( corr_matr_abs_bool.astype(int) )\n\nprint('Number of nodes ', g.vcount())\nprint('Number of edges ', g.ecount() )\nprint('Number of weakly connected compoenents', len( g.clusters(mode='WEAK')))\n\n\nprint('Sizes of connected components large than 5 nodes')\nc = 0\nfor t in list(g.clusters(mode='WEAK') ):\n    if len(t) <= 5: continue\n    c+=1 \n    print(len(t) )\nprint('count components large than one node:', c )\n    \nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \nvisual_style[\"vertex_size\"] = 2\nigraph.plot(g,bbox = (800,500), **visual_style )\n","c3d14250":"# Plot the largest component separately \nfor t in list(g.clusters(mode='WEAK') ):\n    if len(t) <= 5: continue\n    print(t)\n    g2 = g.subgraph(t)\nigraph.plot(g2,bbox = (800,200), **visual_style )\n    ","6b93315c":"# 0.7 -> 116\n# 0.6 -> 243\n# 0.5 -> 381\n# 0.4  -> 548\n# 0.3 -> 730\ncorr_matr_abs_bool = corr_matr_abs > 0.6\n\ncorr_matr_abs_bool = corr_matr_abs_bool[:772 ,:772 ]\ncorr_matr_abs_bool = np.triu(corr_matr_abs_bool,1) # Take upper triangular part \ng = igraph.Graph().Adjacency(corr_matr_abs_bool.tolist())\ng.to_undirected(mode = 'collapse')\nprint( corr_matr_abs_bool.astype(int) )\n\nprint('Number of nodes ', g.vcount())\nprint('Number of edges ', g.ecount() )\nprint('Number of weakly connected compoenents', len( g.clusters(mode='WEAK')))\n\n\nprint('Sizes of connected components large than 5 nodes')\nc = 0\nfor t in list(g.clusters(mode='WEAK') ):\n    if len(t) <= 5: continue\n    c+=1 \n    print(len(t) )\nprint('count components large than one node:', c )\n    \nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['red' for v in g.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \nvisual_style[\"vertex_size\"] = 15\nigraph.plot(g,bbox = (800,500), **visual_style )\n","24e99878":"# Plot the largest component separately \nfor t in list(g.clusters(mode='WEAK') ):\n    if len(t) <= 5: continue\n    print(t)\n    g2 = g.subgraph(t)\n    \nprint('Number of nodes ', g2.vcount())\nprint('Number of edges ', g2.ecount() )\n\nlayout = g2.layout('tree') # 'drl') # 'grid_fr') #'fr') # 'circle') # \"kamada_kawai\")    \nvisual_style[\"vertex_size\"] = 3\nigraph.plot(g2,bbox = (800,800), **visual_style, layout = layout)","18e07608":"verbose = 0\ndf_stat = pd.DataFrame() # dict_save_largest_component_size = {} \ni = 0\nfor correlation_threshold in [0.9, 0.8, 0.7, 0.6, 0.5, 0.4] :\n    t0 = time.time()\n    print()\n    print(correlation_threshold , 'correlation_threshold ')\n    corr_matr_abs_bool = corr_matr_abs > correlation_threshold\n    corr_matr_abs_bool = corr_matr_abs_bool[:772 ,:772 ] # Restrict to  genes part \n    corr_matr_abs_bool = np.triu(corr_matr_abs_bool,1) # Take upper triangular part \n    g = igraph.Graph().Adjacency(corr_matr_abs_bool.tolist())\n    g.to_undirected(mode = 'collapse')\n    if verbose >= 10:\n        print( corr_matr_abs_bool.astype(int) )\n        print('Number of nodes ', g.vcount())\n        print('Number of edges ', g.ecount() )\n        print('Number of weakly connected compoenents', len( g.clusters(mode='WEAK')))\n\n\n    list_clusters_nodes_lists = list( g.clusters(mode='WEAK') )\n    list_clusers_size = [len(t) for t in list_clusters_nodes_lists ]\n    list_clusers_size = np.sort(list_clusers_size)[::-1]\n    print('Top 5 cluster sizes:', list_clusers_size[:5] , 'seconds passed:', np.round(time.time()-t0 , 2))\n    #dict_save_largest_component_size[correlation_threshold ] = list_clusers_size[0]\n    for t  in list_clusters_nodes_lists:\n        if len(t) == list_clusers_size[0]:\n            print('50 Genes in largest correlated group:')\n            print(df.columns[t[:50]])\n    i += 1\n    df_stat.loc[i,'correlation threshold'] = correlation_threshold\n    df_stat.loc[i,'Largest Component Size'] = list_clusers_size[0]\n    df_stat.loc[i,'Second Component Size'] = list_clusers_size[1]\n    \ndf_stat\n","ee7954ad":"df_stat","79f3fb8f":"We see that gene is either correlated with ALL viabilities or not correlated again with ALL \nWhat does it mean biologically ? Some genes are crucial for cell survival, some not  ? \n","200a771f":"# First look at features correlations ","f017f8f3":"# What is about ? \n\nAnalysis of correlated features for MoA context. \nIn particular we try to select groups of correllated genes (using graph utils). \n\nObservations: \n\nRoughly speaking there seems to be the only ONE group of highly-correlated genes, all other genes are uncorreled between that group and themselves also.\n(The size of the group depends on how \"high\" correlation threshold we put, but the picture above does not change).  \nIt seems surprising that there is the only one group, but not several correlated clusters of features. \n\nMore details:\n\n1\n\nThere is group of 34 genes which are quite strongly correllated: \nGenes: [37, 38, 50, 58, 63, 72, 121, 123, 131, 147, 185, 186, 195, 228, 248, 257, 261, 328, 349, 369, 386, 406, 410, 417, 439, 460, 489, 569, 629, 672, 731, 744, 760, 761]\n(strongly means that correlation threshold is 0.78, and these genes connected between each other by correlation, see details below).\n\nAll other genes are correlated below threshold BOTH between each other and main group. \n\n2\n\nWhen we decrease threshold correlation threshold threshold, say to  0.6 the group of correlated gens grows to 243 genes, while other remain \"uncorrellated\" - both between themselves and big group. \n\n3 Changing correlation threshold statistics: \n\nThreshold | Correlated component size:\n\n0.78 | 34\n\n0.7 | 116\n\n0.6 | 243\n\n0.5 | 381\n\n0.4  | 548\n\n0.3 | 730\n\n\nPS\n\nCan there be some biological interpreation for that big group ? \n\n\nPS\n\nWe use igraph package\nsome tutorial examples can be found here: \nhttps:\/\/www.kaggle.com\/alexandervc\/igraph-cheatsheet\n\n","1fef90bc":"# Analyse several thresholds","5a75fc2f":"# Analysis with graphs \n\nTake a correlation matrix and change it with threshold - if above - put 1, if below put 0.\nConstruct a graph from it - nodes are connected if 1 in matrix.\nLook at that graph for several thresholds and see the pattern - there seems to be only one group of correlated features - all other stands separate. \n","00ef5518":"# Load data","853cd5e9":"## High correlation threshold - 0.78","a999ff07":"## Medium correlation threshold - 0.6"}}