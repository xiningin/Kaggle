{"cell_type":{"d7992c5e":"code","b8288be3":"code","55392bd0":"code","d8fd578e":"code","a0faccb4":"code","50a09190":"code","33f42367":"code","6d30ff58":"code","8542f3fd":"markdown","d4084306":"markdown","a763be49":"markdown"},"source":{"d7992c5e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf = pd.read_csv ('..\/input\/road-weather-information-stations.csv')\nprint(df.columns)","b8288be3":"#two words about data\ndf.head(5)","55392bd0":"#get hist for correct values based on analysis in previous kernel\nmask = df['RoadSurfaceTemperature'] > 24 \nmask &= df['AirTemperature'] > 30\nmask &= df['AirTemperature'] < 100\nrst = df[mask]\nrst.hist(column = ['RoadSurfaceTemperature', 'AirTemperature'], sharex=True, sharey=True)","d8fd578e":"rst['Date'] = pd.to_datetime(rst['DateTime'])\ntemp_ave = rst[['AirTemperature', 'RoadSurfaceTemperature']].groupby([rst.Date.dt.year, rst.Date.dt.month, rst.Date.dt.day]).agg('mean')\ntemp_ave['date'] = temp_ave.index\ntemp_ave['date'] = pd.to_datetime(temp_ave['date'], format=\"(%Y, %m, %d)\")\ntemp_ave = temp_ave.reset_index(drop = True)\ntemp_ave.head()","a0faccb4":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode()\n\ndata = [\n    go.Scatter(x=temp_ave.date, y=temp_ave.AirTemperature, name='Air')\n    , go.Scatter(x=temp_ave.date, y=temp_ave.RoadSurfaceTemperature, name='Road Surface')\n]\nlayout = dict(title='Average Temperature',\n              xaxis=dict(title='Date'),\n              yaxis=dict(title='Temperature, F'))\nfig = dict(data = data, layout = layout)\niplot(fig)","50a09190":"loc = rst['StationLocation']\ncoord = pd.DataFrame(list(loc.apply(lambda x: (float((eval(x))['longitude']), float((eval(x))['latitude'])))), columns=['longitude','latitude'])\ncoord = coord.groupby('latitude').agg('min')\ncoord['latitude'] = coord.index\ncoord.reset_index(drop=True)","33f42367":"coord.tail(3)","6d30ff58":"import folium\nMAP_COORDINATES = (coord['latitude'].max(), coord['longitude'].max())\n\nmap = folium.Map(location=MAP_COORDINATES, zoom_start=10)\nfor c in coord.iterrows() :\n    folium.Marker([c[1]['latitude'],c[1]['longitude']]).add_to(map)\n    \ndisplay (map)","8542f3fd":"Filter incrorrect values & get filling of data ranges with histogram","d4084306":"Make some plots","a763be49":"Build sensors map"}}