{"cell_type":{"2ca0769b":"code","6193cb1b":"code","e3bd0d0a":"code","da989d86":"code","12a620b9":"code","2518c4f0":"code","2b25532c":"code","90501948":"code","7ab3e546":"code","a277408a":"code","8745702e":"code","d9004dde":"code","b03203b7":"code","b8e7cb67":"code","cf4bbc32":"code","6b6fca04":"code","fdf3749b":"code","433e0217":"code","70641d6f":"code","09d9cc1b":"code","604ce56e":"code","aaa0da32":"code","984c37dd":"code","191d421f":"code","11a609de":"code","ef92d684":"code","bf29a638":"code","e79a94cd":"code","e02481b2":"code","e254fcab":"code","bb0ac838":"code","4a8a7128":"code","51c69800":"code","9433f2ef":"markdown"},"source":{"2ca0769b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6193cb1b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import PolynomialFeatures, OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom numpy.random import random\nfrom numpy.random import randint","e3bd0d0a":"path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/'\ntrain_start = pd.read_csv(path + 'train.csv')\ntest_start = pd.read_csv(path + 'test.csv')\n\ntrain_full = train_start.copy()\ntrain_full.head()","da989d86":"train_full.describe()","12a620b9":"train_full.info()","2518c4f0":"null_columns = {col: [train_full[col].isnull().sum(), train_full[col].dtype] for col in list(train_full.columns) if train_full[col].isnull().sum()}\nnull_columns","2b25532c":"corr_matrix = train_full.corr()\ncorr_matrix['SalePrice'].sort_values(ascending=False)","90501948":"corr_matrix['SalePrice'].sort_values(ascending=False).index.tolist()[:7]","7ab3e546":"%matplotlib inline\nattributes = corr_matrix['SalePrice'].sort_values(ascending=False).index.tolist()[:7]\nscatter_matrix(train_full[attributes], figsize=(12, 8))","a277408a":"train_full.plot(kind=\"scatter\", x=\"OverallQual\", y=\"SalePrice\", alpha=0.1)","8745702e":"train_full.plot(kind=\"scatter\", x=\"GrLivArea\", y=\"SalePrice\", alpha=0.2)","d9004dde":"train_full.plot(kind=\"scatter\", x=\"GarageCars\", y=\"SalePrice\", alpha=0.2)","b03203b7":"train_full.plot(kind=\"scatter\", x=\"GarageArea\", y=\"SalePrice\", alpha=0.2)","b8e7cb67":"train_full.plot(kind=\"scatter\", x=\"TotalBsmtSF\", y=\"SalePrice\", alpha=0.2)","cf4bbc32":"train_full.plot(kind=\"scatter\", x=\"1stFlrSF\", y=\"SalePrice\", alpha=0.2)","6b6fca04":"null_columns = {col: [train_full[col].isnull().sum(), train_full[col].dtype] for col in list(train_full.columns) if train_full[col].isnull().sum()}\nnull_columns","fdf3749b":"# Remove Id column and features with more than 50% null entries.\ntrain_full.drop('Id', axis=1, inplace=True)\ntrain_full.drop([col for col, val in null_columns.items() if val[0] >= 600], axis=1, inplace=True)","433e0217":"train_full = train_start.drop('SalePrice', axis=1)\ntrain_labels = train_start['SalePrice'].copy()","70641d6f":"train_full.info()","09d9cc1b":"null_columns = {col: [train_full[col].isnull().sum(), train_full[col].dtype] for col in list(train_full.columns) if train_full[col].isnull().sum()}\nnull_columns","604ce56e":"cat_null_columns = {col: value for col, value in null_columns.items() if value[1] == 'O'}\ncat_null_columns","aaa0da32":"num_null_columns = {col: value for col, value in null_columns.items() if value[1] == np.float}\nnum_null_columns","984c37dd":"cat_attribs = [col for col in train_full.columns if train_full[col].dtype == 'object']\ncat_attribs","191d421f":"num_attribs = [col for col in train_full.columns if train_full[col].dtype in [np.int, np.float]]\nnum_attribs","11a609de":"num_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(missing_values=np.nan, strategy='median')),\n    ('std_scaler', StandardScaler()),\n])\n\ncat_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),\n    ('encoder', OneHotEncoder(sparse=False))\n])\n\nfull_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", cat_pipeline, cat_attribs),\n])\n\ntrain_prepared = full_pipeline.fit_transform(train_full)","ef92d684":"train_prepared","bf29a638":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","e79a94cd":"svm_reg = SVR()\nscores = cross_val_score(svm_reg, train_prepared, train_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)\n\nsvm_rmse_scores = np.sqrt(-scores)\ndisplay_scores(svm_rmse_scores)","e02481b2":"rf_reg = RandomForestRegressor(random_state = 42)\nscores = cross_val_score(rf_reg, train_prepared, train_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)\n\nrf_rmse_scores = np.sqrt(-scores)\ndisplay_scores(rf_rmse_scores)","e254fcab":"params = {\n        'criterion': [\"mse\", \"mae\"],\n        'n_estimators': list(range(25,525,25)),\n        'max_features': ['auto', 'sqrt', 'log2', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        'min_samples_split': list(range(2,11,1)),\n        'min_samples_leaf': list(range(1,11,1)),\n    }\n\nforest_reg = RandomForestRegressor(random_state=42)\nrnd_search = RandomizedSearchCV(forest_reg, param_distributions=params,\n                                n_iter=30, cv=5, scoring='neg_mean_squared_error', random_state=42)\nrnd_search.fit(train_prepared, train_labels)","bb0ac838":"cvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","4a8a7128":"final_model = rnd_search.best_estimator_\n\nX_test = test_start.copy()\n\nX_test_prepared = full_pipeline.transform(X_test)\nfinal_predictions = final_model.predict(X_test_prepared)\n\nfinal_predictions","51c69800":"sample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\noutput = pd.DataFrame({'Id': sample_submission.Id,'SalePrice': final_predictions})\noutput.to_csv('submission.csv', index=False)\n","9433f2ef":"## Data Cleaning"}}