{"cell_type":{"4a1d54e9":"code","20ad7a23":"code","0b44fd98":"code","e5849de6":"code","d94bc524":"code","d474a991":"code","c6380d1a":"code","8f446043":"code","ece4da6d":"code","398d1e83":"code","31ae2371":"code","96e74691":"code","c2970668":"code","768786fb":"code","f55eaaa9":"code","7bb50a66":"code","9ef42f31":"code","5bbfdeda":"code","f9decc25":"code","69855c02":"code","288e5a78":"code","60898ef4":"code","ffda3e1c":"code","f51caec8":"code","82a33f11":"code","81dc83db":"code","2e6e4c33":"code","0ff8ee5f":"code","db918ae3":"code","d9f742fe":"code","7c55acd3":"code","68902e92":"code","4f432c4f":"code","4ee98cde":"code","2e9f91f8":"code","654917d0":"code","54c8bc3a":"code","95cbdb5a":"code","457a4c5f":"code","977a66e9":"code","242e4118":"code","3f649828":"code","43fffd69":"code","bf88f651":"code","b81fdf36":"code","a2fce5cf":"code","d3e5d416":"code","da809424":"code","e2c5db2d":"code","02c63bc9":"code","c4add441":"code","fa548e13":"code","6a7bd873":"code","ca3548b6":"code","9b796911":"code","22293a04":"code","198c8409":"code","58d5cce5":"code","fbcd09b8":"code","0aee398d":"code","eb93c995":"code","2bb4b062":"code","b9898206":"code","116937d7":"code","53c5361f":"code","5cb5c63f":"code","8fef43c2":"code","cca12b59":"code","f3f25e98":"code","ac0d7b66":"code","f48c0058":"code","71ab4dc0":"code","a1e997e4":"code","6159dc6d":"code","78531612":"code","6e23c92f":"code","dbf95199":"code","7d66fcba":"code","436efcbc":"code","e35a9f17":"code","059fb8df":"code","1f3a4493":"code","a4764004":"code","86cd6d37":"code","19d425ed":"code","16c02764":"code","6432d2e1":"code","72c4d505":"code","1cb3357d":"code","5dce0705":"code","0acc5dd2":"code","ebca4422":"code","b15fa15d":"markdown","fbc1fbe5":"markdown","5add27a6":"markdown","5d33169f":"markdown","5f7c583d":"markdown","b225b9ff":"markdown","591c7bab":"markdown","141d192b":"markdown","35c746c3":"markdown","6be1cad6":"markdown","003adc57":"markdown","e7282106":"markdown","96a8e23f":"markdown","83343cc9":"markdown","fd26ac08":"markdown","1f72d0aa":"markdown","3b4e8fcf":"markdown","a49c31eb":"markdown","29cb3303":"markdown","16fb8907":"markdown","b0755a4a":"markdown","038aa4a3":"markdown","1b3cd212":"markdown","42db44e6":"markdown","f450ce88":"markdown","41961444":"markdown","cf9078f4":"markdown","f4341aba":"markdown","35fd2328":"markdown","9543022f":"markdown","20d4a9b5":"markdown","0e4f78e3":"markdown","3270a69b":"markdown","c592ca02":"markdown","83e4587d":"markdown","ca8ee126":"markdown","9b713bc9":"markdown","02efa63a":"markdown","54822781":"markdown","3eada53a":"markdown","5f93996f":"markdown","018b41ba":"markdown","e8765faf":"markdown"},"source":{"4a1d54e9":"import numpy as np\nimport pandas as pd\n\nfile_path = \".\/Bol_Feminicidio 2013-16.csv\"\ncolab_path = \"\/content\/Bol_Feminicidio 2013-16.csv\"\n\nkaggle_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16.csv\"\n\ndf_raw = pd.read_csv(kaggle_path)\n\ndf_raw.info()","20ad7a23":"# Muestra de datos en bruto\ndf_raw.head(5)","0b44fd98":"# Descubriendo cantidades verdaderas de NaN y quitando espacios al inicio y final\n\ndef strip_and_NaN(value):\n    \"\"\"\n        Convierte un valor string en NaN si es 'No se sabe',\n        y le quita los espacios al inicio y final\n    \"\"\"\n    if isinstance(value, str):\n        if value.lower().strip() == 'no se sabe':\n            res = np.NaN\n        else:\n            res = value.strip()\n    else:\n        res = value\n    \n    return res\n\ndf_basic = df_raw.applymap(strip_and_NaN)\ndf_basic.info()","e5849de6":"# Remover columna \"Unnamed: 37\" totalmente vac\u00eda\ndf_basic.drop(['Unnamed: 37'], axis=1, inplace=True)","d94bc524":"# Conversi\u00f3n de \"Fecha\" a tipo date\ndf_basic['Fecha'] = pd.to_datetime(df_basic['Fecha'], format=\"%d-%m-%Y\")","d474a991":"# Quitar trailing spaces en los nombres de las columnas\ndf_basic.columns = df_basic.columns.str.strip()","c6380d1a":"# Visualizaci\u00f3n de las columnas: (mediante la columna \"Nota de prensa\")\ndf_basic[df_basic['Nota de Prensa 1'].str.len() < 5].iloc[:, 10:28]","8f446043":"rows = [76, 157, 283]\n\n# Desplazamiento filas 76, 157, 283\ndf_basic.loc[rows, 'Observaciones'] = df_basic.loc[rows, 'Agresi\u00f3n previa'].values\ndf_basic.iloc[rows, 10:25] = df_basic.iloc[rows, 11:26].values\n\n# Desplazamiento fila 256\ndf_basic.iloc[256, 16:24] = df_basic.iloc[256, 17:25].values\n\n# Ver nuevos valores\ndf_basic.iloc[[*rows, 256], 10:26]","ece4da6d":"# Agrupaci\u00f3n de valores no nulos en una sola columna\nlink_columns = np.delete(df_basic.columns.tolist()[22:], 12)\n\norig_values = df_basic[link_columns].values.tolist()\ndf_basic['Enlaces originales'] = [[i for i in row if str(i) != 'nan' and str(i) != ''] for row in orig_values]","398d1e83":"# Eliminaci\u00f3n de enlaces fallidos\nimport requests\n\ndef remove_failed_links(value):\n    \n    if 'http' in str(value):\n        try:\n            r = requests.head(value, allow_redirects=True)\n            code = r.status_code\n        except:\n            code = 'Err'\n        print(code, end=',')\n        return value if code == 200 else np.NaN\n    \n    return np.NaN\n\n# Correr las 1000 peticiones HTTP\n# valid_values = df_basic[link_columns].applymap(remove_failed_links).values.tolist()\n# valid_values[:3]","31ae2371":"# Guardar los enlaces v\u00e1lidos en una columna\n# df_basic['Enlaces v\u00e1lidos'] = [[i for i in row if str(i) != 'nan' and str(i) != ''] for row in valid_values]","96e74691":"# Contar enlaces con 'http' (todos a los que se realiza la verificaci\u00f3n)\n# df_basic[link_columns].applymap(lambda val: val if 'http' in str(val) else np.NaN).notnull().sum().sum()","c2970668":"# Quitar las columnas con enlaces, excepto las creadas recientemente\n#df_basic.drop(link_columns, axis=1, inplace=True)\n#df_basic.columns","768786fb":"# Guardar el .csv hasta aqu\u00ed\n#df_basic.to_csv('Bol_Feminicidio 2013-16 Clean_Basic.csv')","f55eaaa9":"import numpy as np\nimport pandas as pd\n\nbasic_path = \".\/Bol_Feminicidio 2013-16 Clean_Basic.csv\"\nkaggle_basic_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16 Clean_Basic.csv\"\n\ndf = pd.read_csv(kaggle_basic_path, index_col=0)","7bb50a66":"df[df[\"Nombre de la v\u00edctima\"] == \"Mar\u00eda Jos\u00e9 Mendoza S\u00e1nchez y su hija\"]","9ef42f31":"# Fila original\nfila_orig = df.iloc[255, :].to_dict()\nfila_orig","5bbfdeda":"# Por el enlace: https:\/\/anteriorportal.erbol.com.bo\/noticia\/seguridad\/17092016\/joven_madre_y_su_bebe_fueron_degolladas_en_yapacani\n# se conoce el nombre de la hija: Karen Briana Oza Mendoza, y que ten\u00eda 9 meses, y que ambas fueron degolladas\nmadre = { **fila_orig,\n    'Nombre de la v\u00edctima': 'Mar\u00eda Jos\u00e9 Mendoza S\u00e1nchez',\n    'Edad de la v\u00edctima': '20',\n    'Tipo de agresi\u00f3n que caus\u00f3 la muerte': 'Golpeada, apu\u00f1alada, violada, degollada'}\n\nhija = { **fila_orig,\n    'Nombre de la v\u00edctima': 'Karen Briana Oza Mendoza',\n    'Edad de la v\u00edctima': '9 meses',\n    'Tipo de agresi\u00f3n que caus\u00f3 la muerte': 'Golpeada, apu\u00f1alada, degollada',\n    'N\u00famero de hijos': 0}\n\ndf.drop(255, inplace=True)\ndf = df.append(madre, ignore_index=True)\ndf = df.append(hija, ignore_index=True)","f9decc25":"# Valores en la columna (con valores textuales)\ndf[ df['Edad del acusado'].str.len() > 2][['Nombre del autor\/Presunto autor',\n       'Edad del acusado','Tipo de agresi\u00f3n que caus\u00f3 la muerte']]","69855c02":"# Reemplazar 'y' por una coma y convertir las edades en valores separados por comas sin espacios\ndf.loc[:, 'Edad del acusado'] = df.loc[:, 'Edad del acusado'].str.replace(' y ', ',').str.replace(', ',',')\n# Mostrar los nuevos valores (con m\u00e1s de una edad)\ndf[ df['Edad del acusado'].str.len() > 2][['Nombre del autor\/Presunto autor',\n       'Edad del acusado','Tipo de agresi\u00f3n que caus\u00f3 la muerte']]","288e5a78":"# Valores \u00fanicos en la columna antes\ndf['Edad de la v\u00edctima'].unique()","60898ef4":"def months_to_year(value):\n    if 'mes' in str(value):\n        values = value.split()\n        return round(int(values[0])\/12, 2)\n    return value\n\ndf['Edad de la v\u00edctima'] = df['Edad de la v\u00edctima'].apply(months_to_year).astype('float32')\n\n# Valores \u00fanicos en la columna despu\u00e9s\ndf['Edad de la v\u00edctima'].unique()","ffda3e1c":"# Ver valores que tienen m\u00e1s de una coma (solo deber\u00eda existir una separando las dos coordenadas)\ndf[df['Geolocalizaci\u00f3n'].str.split(',', expand=True).iloc[:,2].notnull()]['Geolocalizaci\u00f3n']","f51caec8":"# Correcciones manuales\ndf.loc[75, 'Geolocalizaci\u00f3n'] = '-16.529820, -68.139058'\ndf.loc[243, 'Geolocalizaci\u00f3n'] = '-17.7982957, -63.1277495'\ndf.loc[270, 'Geolocalizaci\u00f3n'] = '-21.5530089, -64.7372975'\n\n# Verificar que se tengan dos valores (lat. y lon.) para la columna Geolocalizaci\u00f3n\nprint('Solamente dos coordenadas: ', df['Geolocalizaci\u00f3n'].str.split(',', expand=True).shape[1] == 2)","82a33f11":"# Verificar si los valores de coordenadas son v\u00e1lidos\ncoords = df['Geolocalizaci\u00f3n'].str.replace(',',' ').str.split(expand=True)\ncoords.columns = ['Latitud','Longitud']\n\ndef is_valid_coordinate(value):\n    \"\"\" Verifica (con extremos m\u00e1ximos) si un n\u00famero\n    es una coordenada v\u00e1lida dentro de Bolivia.\n    OJO: Valores nulos son aceptados. Solo se filtran valores no nulos\n    que no corresponden al territorio boliviano.\"\"\"\n    \n    if str(value) == 'nan': return True\n    try:\n        value = float(value)\n        return (value > -69.644987 and value < -57.453888) or (value < -9.669215 and value > -22.873088)\n    except ValueError:\n        return False\n\ncoords[(~coords['Latitud'].apply(is_valid_coordinate)) | (~coords['Longitud'].apply(is_valid_coordinate)) ]","81dc83db":"# Correcci\u00f3n manual (adici\u00f3n de signo negativo)\ncoords.loc[214, 'Latitud'] = -17.822201\n\n# Adici\u00f3n de coordenadas como columnas nuevas al conjunto de datos\ndf['Latitud'] = coords['Latitud'].astype('float64')\ndf['Longitud'] = coords['Longitud'].astype('float64')\n\n# Eliminar columna original\ndf.drop('Geolocalizaci\u00f3n', axis=1, inplace=True)\ndf.columns","2e6e4c33":"df['Temperancia'].value_counts()","0ff8ee5f":"value_map = {\n    \"Sobrio\": 0,\n    \"No\": 0,\n    \"Ebrio\": 1\n}\n\ndf[\"Acusado en estado de ebriedad\"] = df[\"Temperancia\"].replace(value_map)\ndf.drop('Temperancia', axis=1, inplace=True)\ndf.columns","db918ae3":"# Valores \u00fanicos de ambas columnas\nprint(\"Valores \u00fanicos agresi\u00f3n mortal: \", df['Tipo de agresi\u00f3n que caus\u00f3 la muerte'].unique())\nprint(\"Valores \u00fanicos agresi\u00f3n previa: \", df['Agresi\u00f3n previa'].unique())","d9f742fe":"df[['Detalles agresi\u00f3n previa', 'Detalles agresi\u00f3n mortal']] = df[['Agresi\u00f3n previa','Tipo de agresi\u00f3n que caus\u00f3 la muerte']]\n\naggression_list = ['Golpeada','Apu\u00f1alada','Asfixiada','Degollada','Ahogada','Disparo','Violada','Quemada','Maniatada',\n                  'Atropellada','Precipicio','Electrocutada','Machetazo','Envenenada','Discusi\u00f3n','Torturada','Acosada','Flagelada','Sedada']\n\n# Map de palabras similares\/sin\u00f3nimos\naggression_similar = {\n    \"ahorcada\" : \"Asfixiada\",\n    \"estrangulada\" : \"Asfixiada\",\n    \"dispararon\" : \"Disparo\",\n    \"arrollada\" : \"Atropellada\",\n    \"dopada\" : \"Sedada\",\n    \"traumatismo\" : \"Golpeada\",\n    \"edema\" : \"Golpeada\",\n    \"anoxia\" : \"Asfixiada\",\n    \"empujada\" : \"Precipicio\",\n    \"arrojada\" : \"Precipicio\"\n}\n\ndef map_aggressions(value):\n    if isinstance(value, str):\n        \n        values = value.replace(',', ' ').split()\n        \n        valid_list = [v.capitalize() for v in values if v.capitalize() in aggression_list]\n        \n        valid_list.extend([aggression_similar[v.lower()] for v in values if v.lower() in aggression_similar.keys()])\n        \n        return \",\".join(list(set(valid_list))) if len(valid_list) > 0 else np.NaN\n        \n    return np.NaN\n\ndf['Agresi\u00f3n previa'] = df['Agresi\u00f3n previa'].apply(map_aggressions)\ndf['Tipo de agresi\u00f3n que caus\u00f3 la muerte'] = df['Tipo de agresi\u00f3n que caus\u00f3 la muerte'].apply(map_aggressions)","7c55acd3":"# Nuevos valores \u00fanicos de ambas columnas\nprint(\"Valores \u00fanicos agresi\u00f3n mortal: \", df['Tipo de agresi\u00f3n que caus\u00f3 la muerte'].unique(), end=\"\\n\\n\")\nprint(\"Valores \u00fanicos agresi\u00f3n previa: \", df['Agresi\u00f3n previa'].unique())","68902e92":"# Notar las nuevas dos columnas al final\ndf.columns","4f432c4f":"# Valores presentes en la columna\ndf['N\u00famero de hijos'].value_counts()","4ee98cde":"# Cambiando todos los valores 'Ninguno' por 0\ndf['N\u00famero de hijos'].replace('Ninguno', 0, inplace=True)","2e9f91f8":"df['Intento de suicidio'] = df['Intento de suicidio'].replace({'No': 0 , 'Si': 1})\ndf['Intento de suicidio'].value_counts()","654917d0":"# Ver los valores originales\ndf['Relaci\u00f3n con la v\u00edctima'].value_counts()","54c8bc3a":"# Lista de valores v\u00e1lidos de relaciones\nrelation_list = ['Esposo','Concubino','Novio','Ninguna','Ex-novio','Ex-esposo','Ex-concubino','Amigo','Amigo','Hijo',\n                 'Cu\u00f1ado','Padre','Yerno','Nieto','Hermano','C\u00f3mplices','Padrastro','Pandilleros','Abuelo']\n\n# Diccionario para correcci\u00f3n de valores\nrelation_dict = {\n    'ex novio': 'Ex-novio',\n    'ex esposo': 'Ex-esposo',\n    'ex concubino': 'Ex-concubino',\n    'ninguno': 'Ninguna'\n}\n\n# Diccionario para valores generales\ngeneral_dict = {\n    'Esposo': 'Pareja',\n    'Concubino': 'Pareja',\n    'Novio': 'Pareja',\n    'Ex-novio': 'Ex-pareja',\n    'Ex-esposo': 'Ex-pareja',\n    'Ex-concubino': 'Ex-pareja',\n    'Hijo': 'Familiar',\n    'Padre': 'Familiar',\n    'Yerno': 'Familiar',\n    'Hermano': 'Familiar',\n    'Padrastro': 'Familiar',\n    'Nieto': 'Familiar',\n    'Abuelo': 'Familiar',\n    'Cu\u00f1ado': 'Conocido',\n    'Amigo': 'Conocido',\n    'Amiga': 'Conocido'\n}\n\ndef relation_map(value):\n    if isinstance(value, str):\n        values = value.replace(' y ', ',').replace(', ', ',').lower().replace('exposo','esposo').split(',')\n        \n        valid_list = [relation_dict[v] for v in values if v in relation_dict.keys()]\n        valid_list.extend([v.capitalize() for v in values if v.capitalize() in relation_list])\n        \n        return ','.join(valid_list) if len(valid_list) > 0 else np.NaN\n        \n    return np.NaN\n\ndef general_map(value):\n    if isinstance(value, str):\n        values = value.split(',')\n        \n        return ','.join([general_dict[v] if v in general_dict.keys() else 'Otro' for v in values])\n    return np.NaN\n\ndf['Relaci\u00f3n detallada'] = df['Relaci\u00f3n con la v\u00edctima'].apply(relation_map)\ndf['Relaci\u00f3n general'] = df['Relaci\u00f3n detallada'].apply(general_map)\n\ndf.drop('Relaci\u00f3n con la v\u00edctima', axis=1, inplace=True)\n\n# Mostrar los nuevos valores\nprint('Valores \u00fanicos en \"Relaci\u00f3n detallada\":\\n', df['Relaci\u00f3n detallada'].unique(), end='\\n\\n')\nprint('Valores \u00fanicos en \"Relaci\u00f3n general\":\\n', df['Relaci\u00f3n general'].unique())","95cbdb5a":"df['Situaci\u00f3n del presunto autor'] = df['Situaci\u00f3n del presunto autor'].str.capitalize()\ndf['Situaci\u00f3n del presunto autor'].replace('Pr\u00f3fugos','Pr\u00f3fugo', inplace=True)\ndf['Situaci\u00f3n del presunto autor'].value_counts()","457a4c5f":"df.columns","977a66e9":"df['Fecha de Sentencia'].replace({'Sin sentencia':np.NaN, 'Extinci\u00f3n':np.NaN}, inplace=True)\ndf['Fecha de Sentencia'] = pd.to_datetime(df['Fecha de Sentencia']).dt.strftime('%d-%m-%Y')\ndf['Fecha de Sentencia'].unique()","242e4118":"df[(df['Fecha'].notnull() & df['mes'].isnull())]","3f649828":"# Correcci\u00f3n del valor en la fila 221\ndf.loc[221, 'mes'] = 'Diciembre'","43fffd69":"# Guardar .csv final\n# df.to_csv('Bol_Feminicidio 2013-16 Clean_Full.csv')","bf88f651":"import numpy as np\nimport pandas as pd\n\nclean_path = \".\/Bol_Feminicidio 2013-16 Clean_Full.csv\"\nkaggle_clean_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16 Clean_Full.csv\"\n\ndf = pd.read_csv(kaggle_clean_path, index_col=0)","b81fdf36":"# Total de tipos de agresi\u00f3n\ndf['Tipo de agresi\u00f3n que caus\u00f3 la muerte'].value_counts()","a2fce5cf":"# Crear una columna para cada tipo de agresi\u00f3n\ndummies_mortal = df['Tipo de agresi\u00f3n que caus\u00f3 la muerte'].str.get_dummies(sep=',')\ndummies_previa = df['Agresi\u00f3n previa'].str.get_dummies(sep=',')\n\ndummies_final = dummies_mortal.copy()\n\n# Unir ambos grupos por columnas comunes\nfor col in dummies_previa.columns:\n    if (col in dummies_mortal):\n        dummies_final[col] = (dummies_final[col] | dummies_previa[col]).astype('int32')\n    else:\n        dummies_final[col] = dummies_previa[col]\n\ndf.drop(['Tipo de agresi\u00f3n que caus\u00f3 la muerte','Agresi\u00f3n previa'], axis=1, inplace=True)\ndf = df.join(dummies_final)\nprint('Nuevas columnas: ', dummies_final.columns)","d3e5d416":"df['Relaci\u00f3n general'].value_counts()","da809424":"df['Relaci\u00f3n detallada'].value_counts()","e2c5db2d":"cols = ['Relaci\u00f3n general','Relaci\u00f3n detallada']\n\nfor col in cols:\n    dummies = df[col].str.get_dummies(sep=',')\n    df.drop(col, axis=1, inplace=True)\n    df = df.join(dummies)\n    \n    print('Nuevas columnas: ', dummies.columns)","02c63bc9":"# Guardar .csv final\n# df.to_csv('Bol_Feminicidio 2013-16 Preprocessed.csv')","c4add441":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('seaborn')\n\npreproc_path = \".\/Bol_Feminicidio 2013-16 Preprocessed.csv\"\nkaggle_preproc_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16 Preprocessed.csv\"\n\ndf = pd.read_csv(kaggle_preproc_path, index_col=0)\n\n# Identificar columnas relacionadas mediante enumeraci\u00f3n\nprint(list(enumerate(df.columns)))","fa548e13":"cols_agresion = df.columns[25:44]\ncols_rel_general = df.columns[44:49]\ncols_rel_detallada = df.columns[49:]","6a7bd873":"fig = plt.figure(figsize=(10,6))\nax = df.groupby('ano')['ano'].count().plot(kind='bar', color='c')\nplt.title('Cantidad de feminicidios por a\u00f1o', fontsize=20, y=1.05)\nplt.xlabel('A\u00f1o', fontsize=16)\nplt.xticks(rotation=0)\nplt.ylim(0, 120)\nplt.gca().xaxis.grid(False)\n    \nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points')\nplt.show()","ca3548b6":"bins = [0,10,18,25,35,45,55,65,100]\n\nbinned_victima = pd.cut(df['Edad de la v\u00edctima'], bins).value_counts(sort=False)\nbinned_acusado = pd.cut(df['Edad del acusado'].str.split(',', expand=True).unstack().dropna().astype(int), bins[1:]).value_counts(sort=False)\n\nfig = plt.figure(figsize=(20,6))\n\nplt.subplot(121)\nax = binned_victima.plot(kind='bar', color='g')\n\nplt.title('Feminicidios por edad de la v\u00edctima', fontsize=20, y=1.05)\nplt.xlabel('Rango de edades (en a\u00f1os)', fontsize=16, position=(0.5, 0))\nplt.xticks(rotation=0)\nplt.ylim(0, 100)\n\nplt.gca().xaxis.grid(False)\n    \nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 25),\n                textcoords='offset points')\n    \n    ax.annotate(str(np.round(p.get_height()*100\/binned_victima.sum(), decimals=2)) + '%',\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points')\n    \nplt.subplot(122)\nax = binned_acusado.plot(kind='bar', color='r')\n\nplt.title('Feminicidios por edad del presunto autor', fontsize=20, y=1.05)\nplt.xlabel('Rango de edades (en a\u00f1os)', fontsize=16, position=(0.5, 0))\nplt.xticks(rotation=0)\nplt.ylim(0, 100)\n\nplt.gca().xaxis.grid(False)\n    \nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 25),\n                textcoords='offset points')\n    \n    ax.annotate(str(np.round(p.get_height()*100\/binned_acusado.sum(), decimals=2)) + '%',\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points')\n\nplt.show()","9b796911":"ages = df[['Edad de la v\u00edctima','Edad del acusado']].copy()\nages.dropna(axis=0, inplace=True)\n\nages = pd.DataFrame(ages['Edad del acusado'].str.split(',').tolist(), index=ages['Edad de la v\u00edctima']).stack()\nages = ages.reset_index()[['Edad de la v\u00edctima', 0]]\nages.columns = ['Edad de la v\u00edctima', 'Edad del acusado']\nages['Edad de la v\u00edctima'] = ages['Edad de la v\u00edctima'].astype(int)\nages['Edad del acusado'] = ages['Edad del acusado'].astype(int)\nages.head()","22293a04":"# Mostrar las filas que deber\u00edan ser distribuidas\ndf[df['Edad del acusado'].str.split(',', expand=True).iloc[:,1].notnull()][['Edad de la v\u00edctima','Edad del acusado']]","198c8409":"# Fila original (para un valor igual a 30)\ndf[df['Edad de la v\u00edctima'] == 30][['Edad de la v\u00edctima','Edad del acusado']].dropna(axis=0)","58d5cce5":"# Distribuci\u00f3n nueva de filas para el mismo valor\nages[ages['Edad de la v\u00edctima'] == 30][['Edad de la v\u00edctima','Edad del acusado']].dropna(axis=0)","fbcd09b8":"#bins = [0,10,18,25,35,45,55,65,100]\nbins = [0,10,14,18,22,26,30,34,38,42,46,55,65,100]\nbinned = pd.DataFrame({'Edad de la v\u00edctima': pd.cut(ages['Edad de la v\u00edctima'], bins),\n                       'Edad del acusado': pd.cut(ages['Edad del acusado'], bins[1:])})\n\ngrouped = binned.groupby(['Edad de la v\u00edctima','Edad del acusado'])['Edad del acusado'].count().to_frame()\ngrouped.columns = ['Cantidad']\ngrouped.reset_index(inplace=True)\n\npivoted = grouped.pivot(index='Edad de la v\u00edctima', columns='Edad del acusado', values='Cantidad')\n\nplt.figure(figsize=(12,12))\nsns.heatmap(pivoted, annot=True, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Relaci\u00f3n entre edades de la v\u00edctima y el acusado', fontsize=18)\nplt.xlabel('Rangos de edad del acusado', fontsize=14)\nplt.ylabel('Rangos de edad de la v\u00edctima', fontsize=14)\nplt.yticks(rotation=0)\nplt.show()","0aee398d":"fig = plt.figure(figsize=(18,6))\n\nfrec_agresiones = df.loc[:, cols_agresion].sum(axis=0).sort_values(ascending=False)\n\nax = frec_agresiones.plot(kind='bar')\n\nplt.title('Frecuencia de agresiones sufridas por las v\u00edctimas', fontsize=20, y=1.05)\nplt.xlabel('Tipo de agresi\u00f3n', fontsize=16, position=(0.5, 0))\nplt.xticks(fontsize=12, rotation=45)\nplt.ylim(0, 180)\n\nplt.gca().xaxis.grid(False)\n    \nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 25),\n                textcoords='offset points')\n    \n    ax.annotate(str(np.round(p.get_height()*100\/frec_agresiones.sum(), decimals=2)) + '%',\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points')\n\nplt.show()","eb93c995":"df[(df['Intento de suicidio'].notnull() & df['Edad de la v\u00edctima'].notnull())]","2bb4b062":"ages = df[['Edad del acusado','Intento de suicidio']].copy()\nages.dropna(axis=0, inplace=True)\n\nages = pd.DataFrame(ages['Edad del acusado'].str.split(',').tolist()).stack()\nages = ages.reset_index()[[0, 'level_1']]\nages.columns = ['Edad del acusado', 'Intento de suicidio']\nages['Edad del acusado'] = ages['Intento de suicidio'].astype(int)\nages['Intento de suicidio'].value_counts()","b9898206":"import folium\n\ncoords = df[['Latitud','Longitud']].dropna(axis=0)\n\nmapa = folium.Map(\n    location=[-16.2902, -63.5887],\n    zoom_start=5,\n    tiles='Stamen Terrain'\n)\n\npuntos = folium.map.FeatureGroup()\n\nfor lat, lng in coords.values:\n    puntos.add_child(folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='red',\n        fill=True\n    ))\n    \nmapa = mapa.add_child(puntos)\n#mapa","116937d7":"import numpy as np\nimport pandas as pd\n\npreproc_path = \".\/Bol_Feminicidio 2013-16 Preprocessed.csv\"\nkaggle_preproc_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16 Preprocessed.csv\"\n\ndf = pd.read_csv(kaggle_preproc_path, index_col=0)","53c5361f":"df.columns","5cb5c63f":"# Lista de columnas relevantes para el an\u00e1lisis\nrelevantes = ['Edad de la v\u00edctima', 'Departamento', 'Edad del acusado',\n       'Intento de suicidio', 'Estado del caso', 'Situaci\u00f3n del presunto autor', 'Sentencia',\n       'N\u00famero de hijos', 'Acusado en estado de ebriedad', 'Ahogada', 'Apu\u00f1alada', 'Asfixiada',\n       'Atropellada', 'Degollada', 'Disparo', 'Electrocutada', 'Envenenada',\n       'Golpeada', 'Machetazo', 'Precipicio', 'Quemada', 'Violada', 'Acosada',\n       'Discusi\u00f3n', 'Flagelada', 'Maniatada', 'Sedada', 'Torturada',\n       'Conocido', 'Ex-pareja', 'Familiar', 'Otro', 'Pareja']","8fef43c2":"df.dropna(axis=0, inplace=True, subset=['Latitud','Longitud'])\n\ndf['Estado del caso'].fillna(df['Estado del caso'].mode()[0], inplace=True)\ndf['Situaci\u00f3n del presunto autor'].fillna(df['Situaci\u00f3n del presunto autor'].mode()[0], inplace=True)\ndf['Sentencia'].fillna(df['Sentencia'].mode()[0], inplace=True)\n\ndf['N\u00famero de hijos'].fillna(0, inplace=True)\ndf['Intento de suicidio'].fillna(0, inplace=True)\ndf['Acusado en estado de ebriedad'].fillna(0, inplace=True)\n\ndf['Edad de la v\u00edctima'].fillna(df['Edad de la v\u00edctima'].mean(), inplace=True)\n\ndf = df.reset_index().drop('index', axis=1)\n\ndf[relevantes].info()","cca12b59":"nan_indexes = df[df['Edad del acusado'].isnull()].index\nnan_indexes","f3f25e98":"dataset = pd.DataFrame(df['Edad del acusado'].fillna(-1).astype(str).str.split(',').tolist()) \\\n    .stack().reset_index()[['level_0', 0]]\n\ndataset = pd.merge(left=dataset, right=df.reset_index(), left_on='level_0', right_on='index', how='right') \\\n    .drop(['level_0','index','Edad del acusado'], axis=1) \\\n    .rename({0: 'Edad del acusado'}, axis=1)\n\ndataset['Edad del acusado'] = dataset['Edad del acusado'].replace('-1', np.NaN) \\\n    .fillna(round(dataset['Edad del acusado'].astype(float).mean(), 0)).astype(int)\n\ndataset[relevantes].info()","ac0d7b66":"# Guardar .csv intermedio\n# dataset.to_csv('Bol_Feminicidio 2013-16 Preprocessed Significative.csv')","f48c0058":"dataset = dataset[relevantes].copy()\n# Mostrar las primeras 15 columnas\ndataset.iloc[:,:15].info()","71ab4dc0":"minmax_cols = ['Edad del acusado','Edad de la v\u00edctima','N\u00famero de hijos']\n#standard_cols = ['Latitud','Longitud']\n\ndataset[minmax_cols].head()","a1e997e4":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nminmax_scaler = MinMaxScaler()\nstandard_scaler = StandardScaler()\n\ndataset[minmax_cols] = minmax_scaler.fit_transform(dataset[minmax_cols])\n#dataset[standard_cols] = standard_scaler.fit_transform(dataset[standard_cols])\n\ndataset[minmax_cols].head()","6159dc6d":"from sklearn.preprocessing import OneHotEncoder\n\nonehot_cols = ['Departamento','Estado del caso','Situaci\u00f3n del presunto autor','Sentencia']\n\nencoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nencoded_cols = pd.DataFrame(encoder.fit_transform(dataset[onehot_cols]),\n                            columns=encoder.get_feature_names(onehot_cols))\nencoded_cols.index = dataset.index\n\nfull_preprocessed = pd.merge(dataset.drop(onehot_cols, axis=1), encoded_cols, left_index=True, right_index=True)\nfull_preprocessed.shape","78531612":"full_preprocessed.columns","6e23c92f":"# Descartar columnas correlacionadas\nfull_preprocessed.drop(['Estado del caso_Extinci\u00f3n','Sentencia_Extinci\u00f3n'], axis=1, inplace=True)","dbf95199":"# Guardar .csv final\n# full_preprocessed.to_csv('Bol_Feminicidio 2013-16 Preprocessed Full.csv')","7d66fcba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('seaborn')\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nfull_preproc_path = '.\/Bol_Feminicidio 2013-16 Preprocessed Full.csv'\nkaggle_full_preproc_path = \"\/kaggle\/input\/Bol_Feminicidio 2013-16 Preprocessed Full.csv\"\ndataset = pd.read_csv(kaggle_full_preproc_path, index_col=0)\n\ndataset.head()","436efcbc":"# Correlaciones fuertes\ncorr = dataset.corr().abs().unstack().sort_values(kind='quicksort', ascending=False)\ncorr[(corr != 1)&(corr > 0.5)].drop_duplicates()","e35a9f17":"# Visualizaci\u00f3n de elbow para KMeans\nmodel = KMeans(random_state=0)\nvisualizer = KElbowVisualizer(model, k=(2,10))\n\nvisualizer.fit(dataset)\nvisualizer.poof()","059fb8df":"# Construcci\u00f3n de modelo de clustering KMeans\nmodel = KMeans(init='k-means++', n_clusters=7, n_init=15)\nmodel.fit(dataset)\nprint(\"Primeras 100 etiquetas (en orden): \", model.labels_[:100])","1f3a4493":"clustered = pd.read_csv('\/kaggle\/input\/Bol_Feminicidio 2013-16 Preprocessed Significative.csv', index_col=0)\n\nclustered['Cluster'] = pd.Series(model.labels_)\nclustered.columns","a4764004":"relevantes = ['Edad del acusado', 'ano', 'mes', 'Fecha', 'Nombre de la v\u00edctima',\n       'Edad de la v\u00edctima', 'Lugar del feminicidio', 'Provincia',\n       'Departamento', 'Circunstancias', 'Nombre del autor\/Presunto autor',\n       'Intento de suicidio', 'Estado del caso',\n       'Situaci\u00f3n del presunto autor', 'Sentencia', 'Fecha de Sentencia',\n       'N\u00famero de hijos', 'Observaciones', 'Acusado en estado de ebriedad', 'Detalles agresi\u00f3n previa',\n       'Detalles agresi\u00f3n mortal']","86cd6d37":"from sklearn.cluster import AgglomerativeClustering\n\nmodel = AgglomerativeClustering(n_clusters=4, linkage='complete')\n\nmodel.fit(dataset)\nmodel.labels_[:50]","19d425ed":"from scipy.cluster import hierarchy\nfrom scipy.spatial import distance_matrix","16c02764":"dist_matrix = distance_matrix(dataset,dataset)\nZ = hierarchy.linkage(dist_matrix, 'complete')\nplt.figure(figsize=(20,12))\ndendro = hierarchy.dendrogram(Z)","6432d2e1":"from sklearn.cluster import DBSCAN\n\nmodel = DBSCAN(eps=2, min_samples=5)\nmodel.fit(dataset)\n\n# Retorna los cl\u00fasteres y la cantidad de instancias pertenecientes (-1 son instancias que no pertenecen a ning\u00fan cluster)\nnp.unique(model.labels_, return_counts=True)","72c4d505":"clustered = pd.read_csv('\/kaggle\/input\/Bol_Feminicidio 2013-16 Preprocessed Significative.csv', index_col=0)\n\nclustered['Cluster'] = pd.Series(model.labels_)\nclustered.columns","1cb3357d":"# Estad\u00edsticas b\u00e1sicas de columnas num\u00e9ricas\nnro_cluster = 0\n\nclustered[clustered['Cluster'] == nro_cluster].describe()","5dce0705":"agresiones = ['Ahogada', 'Apu\u00f1alada', 'Asfixiada',\n       'Atropellada', 'Degollada', 'Disparo', 'Electrocutada', 'Envenenada',\n       'Golpeada', 'Machetazo', 'Precipicio', 'Quemada', 'Violada', 'Acosada',\n       'Discusi\u00f3n', 'Flagelada', 'Maniatada', 'Sedada', 'Torturada']\n\nrelacion_gral = ['Conocido', 'Ex-pareja', 'Familiar', 'Otro', 'Pareja']\n\ndef bar_subplot(series, title, x_label, color, rotation):\n    ax = series.plot(kind='bar', color=color)\n\n    plt.title(title, fontsize=22)\n    plt.xlabel(x_label, fontsize=16, position=(0.5, 0))\n    plt.xticks(rotation=rotation, fontsize=12)\n    plt.ylim(0, plt.ylim()[1]*1.15)\n    plt.gca().xaxis.grid(False)\n\n    for p in ax.patches:\n        ax.annotate(np.round(p.get_height(),decimals=2),\n                    (p.get_x()+p.get_width()\/2., p.get_height()),\n                    ha='center', va='center',\n                    xytext=(0, 25),\n                    textcoords='offset points', fontsize=14)\n\n        ax.annotate(str(np.round(p.get_height()*100\/binned_victima.sum(), decimals=2)) + '%',\n                    (p.get_x()+p.get_width()\/2., p.get_height()),\n                    ha='center', va='center',\n                    xytext=(0, 10),\n                    textcoords='offset points', fontsize=14)","0acc5dd2":"# Cl\u00fasteres: 0, 1, 2\nnro_cluster = 1\n\ndf = clustered[clustered['Cluster'] == nro_cluster]\n\nbins = [0,10,14,18,22,26,30,34,38,42,46,55,65,100]\n\nbinned_victima = pd.cut(df['Edad de la v\u00edctima'], bins).value_counts(sort=False)\nbinned_acusado = pd.cut(df['Edad del acusado'], bins[1:]).value_counts(sort=False)\n\nfig = plt.figure(figsize=(30,32))\n\nplt.subplot(431)\nbar_subplot(binned_victima, 'Feminicidios por edad de la v\u00edctima', 'Rango de edades (en a\u00f1os)', 'g', 0)\n\nplt.subplot(432)\nbar_subplot(binned_acusado, 'Feminicidios por edad del presunto autor', 'Rango de edades (en a\u00f1os)', 'r', 0)\n\nplt.subplot(433)\nbar_subplot(df.groupby('ano')['ano'].count(), 'Cantidad de feminicidios por a\u00f1o', 'A\u00f1o', 'c', 0)\n\nplt.subplot(434)\nbar_subplot(df.groupby('Departamento')['Departamento'].count(), 'Cantidad de feminicidios por departamento', 'Departamento', 'b', 45)\n\nrest = ['Intento de suicidio', 'Estado del caso',\n       'Situaci\u00f3n del presunto autor', 'Sentencia', 'N\u00famero de hijos']\n\nfor i in range(5, 10):\n    plt.subplot(4, 3, i)\n    bar_subplot(df.groupby(rest[i-5])[rest[i-5]].count(), 'Cantidad de feminicidios por '+rest[i-5], rest[i-5], 'm', 0)\n\nplt.subplot(4, 3, 10)\nbar_subplot(df[agresiones].sum().sort_values(ascending=False), 'Frecuencia de agresiones sufridas por las v\u00edctimas', 'Agresi\u00f3n', 'k', 45)\n\nplt.subplot(4, 3, 11)\nbar_subplot(df[relacion_gral].sum().sort_values(ascending=False), 'Frecuencia de relaci\u00f3n con las v\u00edctimas', 'Relaci\u00f3n', 'k', 45)\n\nplt.tight_layout()\nplt.show()","ebca4422":"df0 = clustered[clustered['Cluster'] == 0]\ndf1 = clustered[clustered['Cluster'] == 1]\ndf2 = clustered[clustered['Cluster'] == 2]\n\nbinned_victima0 = pd.cut(df0['Edad de la v\u00edctima'], bins).value_counts(sort=False)\nbinned_victima1 = pd.cut(df1['Edad de la v\u00edctima'], bins).value_counts(sort=False)\nbinned_victima2 = pd.cut(df2['Edad de la v\u00edctima'], bins).value_counts(sort=False)\n\nbinned_all = pd.DataFrame({'Cluster 1': binned_victima0, 'Cluster 2': binned_victima1, 'Cluster 3': binned_victima2})\n\nax = binned_all.plot.bar(width=0.9)\n# ax1 = binned_victima1.plot(kind='bar', color='c')\n# ax2 = binned_victima2.plot(kind='bar', color='m')\n\nplt.title('Edad de la v\u00edctima por cl\u00faster', fontsize=22)\nplt.xlabel('Edad', fontsize=16, position=(0.5, 0))\nplt.xticks(rotation=0)\nplt.ylim(0, plt.ylim()[1]*1.15)\nplt.gca().xaxis.grid(False)\nplt.gcf().set_size_inches(26, 10)\nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),\n                (p.get_x()+p.get_width()\/2., p.get_height()),\n                ha='center', va='center',\n                xytext=(0, 10),\n                textcoords='offset points', fontsize=14)\nplt.show()","b15fa15d":"### 4.2 Cantidad de feminicidios por edad de la v\u00edctima","fbc1fbe5":"## 6: Clustering de feminicidios","5add27a6":"### 2.10 Limpieza de \"Situaci\u00f3n del presunto autor\"\n\nAlgunos valores est\u00e1n repetidos debido a may\u00fasculas y plurales.","5d33169f":"### 2.9 Limpieza de \"Relaci\u00f3n con la v\u00edctima\"\n\nLa columna contiene muchos valores repetidos y mal clasificados por errores de sintaxis. Ser\u00e1n corregidos mediante un diccionario.\n\nAdicionalmente, se construir\u00e1 otra columna denominada \"Relaci\u00f3n general\" mediante otro diccionario, y la columna actual ser\u00e1 renombrada a \"Relaci\u00f3n detallada\".","5f7c583d":"### 2.8 Procesamiento de \"Intento de suicidio\"\n\nTodos los valores \"Si\" ser\u00e1n transformados a 1 y \"No\" a 0.","b225b9ff":"### 2.6 Limpieza de detalles espec\u00edficos en \"Agresi\u00f3n previa\" y \"Tipo de agresi\u00f3n que caus\u00f3 la muerte\"\n\nEn algunas filas, ambas columnas contienen valores poco generalizables. Estos valores originales ser\u00e1n almacenados en dos columnas nuevas: \"Detalles agresi\u00f3n mortal\" y \"Detalles agresi\u00f3n previa\" y todos los valores ser\u00e1n reemplazados por aquellos que figuren en una lista de valores gen\u00e9ricos o sin\u00f3nimos.","591c7bab":"### 3.1: Columnas por tipo de agresi\u00f3n","141d192b":"Varias filas de la columna \"Observaciones\" contienen enlaces a p\u00e1gs. web, y en las columnas que contienen estos enlaces (Notas de Prensa, Youtube, Otros formatos, Seguimiento de la nota, Observaciones, Unnamed), varios est\u00e1n fallados y no redireccionan a ning\u00fan lugar. Otros parecen estar divididos en m\u00faltiples columnas.\n\n- Se agrupar\u00e1n todos los valores originales (no nulos) en un array bajo una sola columna \"Enlaces originales\".\n- Se filtrar\u00e1n todos los enlaces fallados y se agrupar\u00e1n los v\u00e1lidos en una sola columna \"Enlaces v\u00e1lidos\".\n- Se eliminar\u00e1n las columnas originales de enlaces (Notas de Prensa, Youtube, etc., excepto Observaciones).","35c746c3":"# Limpieza de datos\n\n## 1: Limpieza b\u00e1sica","6be1cad6":"## 3: Preprocesamiento para visualizaci\u00f3n","003adc57":"### 2.4 Correcci\u00f3n de Geolocalizaciones err\u00f3neas\n\nSe espera que la columna \"Geolocalizaci\u00f3n\" contenga coordenadas num\u00e9ricas (latitud y longitud) separadas por una coma, donde cada coordenada tiene una precisi\u00f3n de 6 d\u00edgitos decimales. As\u00ed mismo, al tratarse de un dataset de casos de feminicidios en Bolivia, los valores deben encontrarse bajo un rango de coordenadas v\u00e1lido para el territorio boliviano. Las filas que no cumplan estos requisitos ser\u00e1n corregidas en lo posible.\n\nAdem\u00e1s, se separar\u00e1n ambos valores (latitud y longitud) en dos columnas distintas con los nombres correspondientes.","e7282106":"### Visualizaci\u00f3n cruzada de los 3 cl\u00fasteres","96a8e23f":"## 5: Preprocesamiento para an\u00e1lisis","83343cc9":"#### Dendrograma:","fd26ac08":"# Importaci\u00f3n de datos y librer\u00edas","1f72d0aa":"### 4.3 Frecuencias en la relaci\u00f3n de edades de la v\u00edctima y autor del crimen\n\n__Observaci\u00f3n__: Existen casos de feminicidio con m\u00faltiples autores\/acusados (con diferentes edades), por los que estos casos (por cuesti\u00f3n de an\u00e1lisis) ser\u00e1n distribuidos en diferentes filas, como si fueran casos distintos.\n\nTambi\u00e9n existen valores en los que se conoce la edad de la v\u00edctima pero no la del acusado, o viceversa. Estas filas ser\u00e1n descartadas.","3b4e8fcf":"### 5.1 _Feature selection_\n\nSe realiza la extracci\u00f3n de solamente las columnas relevantes para el an\u00e1lisis.","a49c31eb":"### 5.1 Tratamiento de valores faltantes\n\nEl modelo no puede contener valores nulos, por lo que se realizar\u00e1n las siguientes operaciones para llenar los datos:\n\n- Las instancias con \"Latitud\" y \"Longitud\" nulas ser\u00e1n descartadas.\n- Los valores nulos en las columnas de \"Edad de la v\u00edctima\" y \"Edad del acusado\" ser\u00e1n rellenadas con la media de cada columna correspondiente. __La columna \"Edad del acusado\" ser\u00e1 rellenada y tratada en el siguiente punto__.\n- Las provincias desconocidas se rellenar\u00e1n con la moda del departamento al que corresponden.\n- Los valores nulos en las columnas \"Estado del caso\", \"Situaci\u00f3n del presunto autor\" y \"Sentencia\" ser\u00e1n rellenados con la moda de cada columna.\n- Los valores nulos en la columna \"N\u00famero de hijos\" ser\u00e1n rellenados con 0 (Sin hijos).\n- Los valores nulos en la columna \"Intento de suicidio\" ser\u00e1n rellenados con 0 (No hubo intento).\n- Los valores nulos en la columna \"Acusado en estado de ebriedad\" ser\u00e1n rellenados con 0 (Sobrio).","29cb3303":"#### Verificaci\u00f3n de la distribuci\u00f3n en filas adicionales","16fb8907":"### Observaci\u00f3n\n\nDespu\u00e9s de una exploraci\u00f3n b\u00e1sica, se encontraron 4 filas que cuentan con valores desplazados entre columnas. Los valores ser\u00e1n correctamente posicionados.","b0755a4a":"### 4.5 Tasa de suicidio de los agresores en relaci\u00f3n a la edad de la v\u00edctima","038aa4a3":"### 5.3 Desdoblamiento de edad del acusado\n\nCiertos casos de feminicidio tienen m\u00faltiples autores\/acusados, por lo que la columna \"Edad del acusado\" contiene m\u00faltiples valores para estas filas. Estos valores deben ser \u00fanicos para el an\u00e1lisis, por lo que se desdoblar\u00e1n en m\u00faltiples filas, como si fueran casos de feminicidio distintos.","1b3cd212":"### Hierarchical Agglomerative Analysis para clustering por niveles jer\u00e1rquicos","42db44e6":"### 3.2: Columnas por \"Relaci\u00f3n general\" y \"Relaci\u00f3n detallada\"","f450ce88":"### 4.4 Frecuencias de cada tipo de agresi\u00f3n","41961444":"### 2.5 Cambio de \"Temperancia\" a \"Acusado en estado de ebriedad\"","cf9078f4":"### 4.5 Visualizaci\u00f3n geogr\u00e1fica de casos","f4341aba":"### 2.11 Limpieza simple de \"Fecha de sentencia\"\n\nEsta columna est\u00e1 destinada a almacenar fechas solamente, pero se incluyen valores relacionados pero correspondientes a la columna \"Sentencia\". Aquellos valores ser\u00e1n reemplazados por _NaN_.","35fd2328":"### 5.5 Codificaci\u00f3n de valores categ\u00f3ricos restantes\n\nLas columnas a utilizar para generar columnas categ\u00f3ricas son las siguientes:\n\n- Provincia\n- Departamento\n- Estado del caso\n- Situaci\u00f3n del presunto autor\n- Sentencia","9543022f":"### DBSCAN: Clustering por densidad","20d4a9b5":"## 4: Visualizaci\u00f3n ","0e4f78e3":"### 2.1 Fila 255: Caso Mar\u00eda Jos\u00e9 Mendoza S\u00e1nchez y su hija\n\nLa fila cuenta como dos feminicidios distintos (relacionados). Se elimina la fila y se crean dos nuevas.","3270a69b":"### 2.7 Limpieza de la columna \"N\u00famero de hijos\"\n\nSe cambiar\u00e1n todas las instancias del valor no-num\u00e9rico \"Ninguno\" a 0 (diferenciar 0 de _NaN_).","c592ca02":"De esta manera, se realizar\u00e1n las siguientes modificaciones:\n\nPara las filas 76, 157, 283:\n- Se mover\u00e1n los valores de la columna \"Agresi\u00f3n previa\" a \"Observaciones\", que a su vez est\u00e1 vac\u00eda en estas filas.\n- Se desplazar\u00e1n los valores desde la columna \"Tipo de agresi\u00f3n\" (col. 11) hasta \"Youtube 1\" (col. 26) una columna hacia la izquierda (hacia 10-25).\n\nPara la fila 256:\n\n- Se desplazar\u00e1n los valores desde la columna \"Estado del caso\" (col. 17) hasta \"Nota de Prensa 4\" (col. 25) una columna hacia la izquierda (hacia 16-24)","83e4587d":"__OJO__: Estas columnas ser\u00e1n extra\u00eddas en el punto 5.3 para antes tener los valores significativos sin realizar normalizaci\u00f3n ni codificaci\u00f3n guardados en un CSV intermedio. ","ca8ee126":"### Visualizaci\u00f3n de caracter\u00edsticas generales por cl\u00faster","9b713bc9":"## 2: Limpieza espec\u00edfica","02efa63a":"### 2.12 Correcci\u00f3n de mes nulo con fecha no-nula\n\nExiste una fila en el que la fecha entera indica que el feminicidio se realiz\u00f3 en el mes de diciembre, pero la columna mes es nulo. Se agregar\u00e1 este valor a la columna correspondiente.","54822781":"### 4.1 Cantidad de feminicidios anual","3eada53a":"### 2.3 Correcci\u00f3n de valores en \"Edad de la v\u00edctima\" en meses\n\nLas edades que tengan la palabra \"meses\" ser\u00e1n convertidas a valores decimales (object a float32).","5f93996f":"### 2.2 Reordenamiento de valores m\u00faltiples en \"Nombre del autor\/Presunto autor\" y \"Edad del acusado\"\n\nAlgunos actos de feminicidio tuvieron m\u00faltiples autores, listados con nombres y edades en solamente dos columnas.\n\nSe separar\u00e1n las edades \u00fanicamente por \", \" y ser\u00e1n convertidas en arreglos (todas las edades, inclusive si solamente se tiene un valor). Los nombres permanecer\u00e1n como tal por sem\u00e1ntica.","018b41ba":"### __OJO:__ el siguiente c\u00f3digo realiza aprox. 1000 peticiones HTTP. Recomendable saltar hasta el paso _2: Limpieza espec\u00edfica_ e importar directamente el .csv guardado ","e8765faf":"### 5.4 Normalizaci\u00f3n de valores num\u00e9ricos no-binarios\n\nColumnas a normalizar:\n\n- Edad del acusado (MinMax)\n- Edad de la v\u00edctima (MinMax)\n- N\u00famero de hijos (MinMax)\n- Latitud y Longitud (norm. dist.)"}}