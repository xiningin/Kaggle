{"cell_type":{"839965ee":"code","f942855f":"code","3bc5cd0b":"code","46b360c6":"code","c672e87a":"code","a0b1b9e5":"code","23efb6e9":"code","07735600":"code","aed8afa1":"code","f194ba2f":"code","c632f7cd":"code","9c6197c0":"code","7c511cd2":"code","2954c8be":"code","0ea33910":"code","3bf171be":"code","be7542a9":"code","dffbeeac":"code","7f4dd809":"code","40ad1deb":"code","d324d76e":"code","4aced150":"code","bf5d5332":"code","52b17353":"code","0c692929":"code","d13fe2b8":"code","1d27bcc8":"code","c5dc8003":"code","6c9ffd9c":"code","1d1bd7c9":"code","5bb9f05f":"code","47bbefd9":"code","15f4abd0":"code","00c838f9":"code","de6a9f46":"code","091b2e8a":"code","8de5beda":"code","8cb9ac8c":"code","e18da241":"code","507ec0db":"code","27483308":"code","f9f4f068":"code","d1b69905":"code","40d6896f":"code","9590f62d":"markdown"},"source":{"839965ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f942855f":"# classifier models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# modules to handle data\nimport pandas as pd\nimport numpy as np\n\n# visualization tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","3bc5cd0b":"# load data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","46b360c6":"\n# save PassengerId for final submission\npassengerId = test.PassengerId\n\n# merge train and test\ntitanic = train.append(test, ignore_index=True)","c672e87a":"# create indexes to separate data later on\ntrain_idx = len(train)\ntest_idx = len(titanic) - len(test)","a0b1b9e5":"titanic.head()","23efb6e9":"# get info on features\ntitanic.info()","07735600":"# PassengerId can be removed from data for now\ntitanic.drop('PassengerId', axis=1, inplace=True)","aed8afa1":"# create a new feature to extract title names from the Name column\ntitanic['Title'] = titanic.Name.apply(lambda name: name.split(',')[1].split('.')[0].strip())\n\n# view the newly created feature\ntitanic.head()","f194ba2f":"# show count of titles\nprint(\"There are {} unique titles.\".format(titanic.Title.nunique()))\n\n# show unique titles\nprint(\"\\n\", titanic.Title.unique())","c632f7cd":"# normalize the titles\nnormalized_titles = {\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"\n}","9c6197c0":"# map the normalized titles to the current titles\ntitanic.Title = titanic.Title.map(normalized_titles)\n\n# view value counts for the normalized titles\nprint(titanic.Title.value_counts())","7c511cd2":"# group by Sex, Pclass, and Title\ngrouped = titanic.groupby(['Sex','Pclass', 'Title'])\n\n# view the median Age by the grouped features\ngrouped.Age.median()","2954c8be":"# apply the grouped median value on the Age NaN\ntitanic.Age = grouped.Age.apply(lambda x: x.fillna(x.median()))\n\n# view changes\ntitanic.info()","0ea33910":"\n# fill Cabin NaN with U for unknown\ntitanic.Cabin = titanic.Cabin.fillna('U')","3bf171be":"# find most frequent Embarked value and store in variable\nmost_embarked = titanic.Embarked.value_counts().index[0]\n\n# fill NaN with most_embarked value\ntitanic.Embarked = titanic.Embarked.fillna(most_embarked)","be7542a9":"\n# fill NaN with median fare\ntitanic.Fare = titanic.Fare.fillna(titanic.Fare.median())\n\n# view changes\ntitanic.info()","dffbeeac":"# view the percentage of those that survived vs. those that died in the Titanic\ntitanic.Survived.value_counts(normalize=True)","7f4dd809":"# group by sex\ngroup_by_sex = titanic.groupby('Sex')\n\n# survival rate by sex\ngroup_by_sex.Survived.mean()","40ad1deb":"# group by passenger class and sex\ngroup_class_sex = titanic.groupby(['Pclass', 'Sex'])\n\n# survival rates by class and sex\ngroup_class_sex.Survived.mean()","d324d76e":"# plot by Survivded, Sex\n_ = sns.factorplot(x='Sex', col='Survived', data=titanic, kind='count')","4aced150":"\n# plot by Pclass, Sex, Survived\n_ = sns.factorplot(x='Pclass', hue='Sex', col='Survived', data=titanic, kind='count')","bf5d5332":"# get stats on all the features\ntitanic.describe()","52b17353":"# size of families (including the passenger)\ntitanic['FamilySize'] = titanic.Parch + titanic.SibSp + 1","0c692929":"# map first letter of cabin to itself\ntitanic.Cabin = titanic.Cabin.map(lambda x: x[0])\n\n# view normalized count\ntitanic.Cabin.value_counts(normalize=True)","d13fe2b8":"titanic.head()","1d27bcc8":"# Convert the male and female groups to integer form\ntitanic.Sex = titanic.Sex.map({\"male\": 0, \"female\":1})","c5dc8003":"# create dummy variables for categorical features\npclass_dummies = pd.get_dummies(titanic.Pclass, prefix=\"Pclass\")\ntitle_dummies = pd.get_dummies(titanic.Title, prefix=\"Title\")\ncabin_dummies = pd.get_dummies(titanic.Cabin, prefix=\"Cabin\")\nembarked_dummies = pd.get_dummies(titanic.Embarked, prefix=\"Embarked\")","6c9ffd9c":"\n# concatenate dummy columns with main dataset\ntitanic_dummies = pd.concat([titanic, pclass_dummies, title_dummies, cabin_dummies, embarked_dummies], axis=1)\n\n# drop categorical fields\ntitanic_dummies.drop(['Pclass', 'Title', 'Cabin', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\n\ntitanic_dummies.head()","1d1bd7c9":"# create train and test data\ntrain = titanic_dummies[ :train_idx]\ntest = titanic_dummies[test_idx: ]\n\n# convert Survived back to int\ntrain.Survived = train.Survived.astype(int)","5bb9f05f":"# create X and y for data and target values\nX = train.drop('Survived', axis=1).values\ny = train.Survived.values","47bbefd9":"# create array for test set\nX_test = test.drop('Survived', axis=1).values\n#X_test","15f4abd0":"\n# create param grid object\nlog_params = dict(\n    C = np.logspace(-5, 8, 15),\n    penalty = ['l1', 'l2']\n)","00c838f9":"\n# instantiate logistic regressor\nlog = LogisticRegression()\n\n# load param grid and log model into GridSearcCV\nlogreg_cv = GridSearchCV(estimator=log, param_grid=log_params, cv=5)\n\n# fit model\nlogreg_cv.fit(X, y)","de6a9f46":"\n# Print the tuned parameters and score\nprint(\"Tuned Logistic Regression Parameters: {}\".format(logreg_cv.best_params_)) \nprint(\"Best score is {}\".format(logreg_cv.best_score_))","091b2e8a":"# predict on test set for submission\nlog_pred = logreg_cv.predict(X_test)","8de5beda":"# create param grid object\nforrest_params = dict(\n    max_depth = [n for n in range(9, 14)],\n    min_samples_split = [n for n in range(4, 11)],\n    min_samples_leaf = [n for n in range(2, 5)],\n    n_estimators = [n for n in range(10, 60, 10)],\n)","8cb9ac8c":"# instantiate Random Forest model\nforrest = RandomForestClassifier()","e18da241":"# build and fit model\nforest_cv = GridSearchCV(estimator=forrest, param_grid=forrest_params, cv=5)\nforest_cv.fit(X, y)","507ec0db":"# print(\"Best score: {}\".format(forest_model.best_score_))\n# print(\"Optimal params: {}\".format(forest_model.best_estimator_))\nprint(\"Best score: {}\".format(forest_cv.best_score_))\nprint(\"Optimal params: {}\".format(forest_cv.best_estimator_))","27483308":"# random forrest prediction on test set\nforrest_pred = forest_cv.predict(X_test)\nprint(forrest_pred)","f9f4f068":"# dataframe with predictions\nkaggle = pd.DataFrame( {'PassengerId': passengerId, 'Survived': forrest_pred} )","d1b69905":"# ensure df is in the right format\nkaggle.head(10)","40d6896f":"\n# save to csv\nfilename = 'submit.csv'\nkaggle.to_csv(filename, index=False)","9590f62d":"Titanic Survival Problem"}}