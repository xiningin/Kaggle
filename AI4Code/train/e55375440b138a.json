{"cell_type":{"e29896f7":"code","6112beb6":"code","b18d03fa":"code","9e188225":"code","044d1160":"code","7610ad53":"code","cb07971b":"code","9532c5be":"code","a241d597":"code","0eed6273":"markdown","dce1746f":"markdown","f59512a8":"markdown","19055af5":"markdown","b2d41bb3":"markdown","a9bafbd9":"markdown","db56c7c3":"markdown","f8568f03":"markdown","ce4bde6d":"markdown"},"source":{"e29896f7":"import numpy as np\nimport tensorflow as tf\n%matplotlib inline\n\nprint(tf.__version__)","6112beb6":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Conv1D, MaxPooling1D","b18d03fa":"model = Sequential([\n    Conv1D(filters=16, kernel_size=3, input_shape=(128, 64), kernel_initializer='random_uniform', bias_initializer=\"zeros\", activation='relu'),\n    MaxPooling1D(pool_size=4),\n    Flatten(),\n    Dense(64, kernel_initializer='he_uniform', bias_initializer='ones', activation='relu'),\n])","9e188225":"\nmodel.add(Dense(64, \n                kernel_initializer=tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.05), \n                bias_initializer=tf.keras.initializers.Constant(value=0.4), \n                activation='relu'),)\n\nmodel.add(Dense(8, \n                kernel_initializer=tf.keras.initializers.Orthogonal(gain=1.0, seed=None), \n                bias_initializer=tf.keras.initializers.Constant(value=0.4), \n                activation='relu'))","044d1160":"import tensorflow.keras.backend as K","7610ad53":"# Define a custom initializer\n\ndef my_init(shape, dtype=None):\n    return K.random_normal(shape, dtype=dtype)\n\nmodel.add(Dense(64, kernel_initializer=my_init))","cb07971b":"# Print the model summary\n\nmodel.summary()","9532c5be":"import matplotlib.pyplot as plt","a241d597":"# Plot histograms of weight and bias values\n\nfig, axes = plt.subplots(5, 2, figsize=(12,16))\nfig.subplots_adjust(hspace=0.5, wspace=0.5)\n\n# Filter out the pooling and flatten layers, that don't have any weights\nweight_layers = [layer for layer in model.layers if len(layer.weights) > 0]\n\nfor i, layer in enumerate(weight_layers):\n    for j in [0, 1]:\n        axes[i, j].hist(layer.weights[j].numpy().flatten(), align='left')\n        axes[i, j].set_title(layer.weights[j].name)","0eed6273":"## Importing the Libraries","dce1746f":"## Creating Model","f59512a8":"## Custom weight and bias initialisers\n\nIt is also possible to define your own weight and bias initialisers. Initializers must take in two arguments, the shape of the tensor to be initialised, and its dtype.\n\nHere is a small example, which also shows how you can use your custom initializer in a layer.","19055af5":"Default weights and biases\nInitially we have not specified the initial values of the weights and biases in each layer of our neural networks.\n\nThe default values of the weights and biases in TensorFlow depend on the type of layers we are using.\n\nFor example, in a Dense layer, the biases are set to zero (zeros) by default, while the weights are set according to glorot_uniform, the Glorot uniform initialiser.\n\nThe Glorot uniform initialiser draws the weights uniformly at random from the closed interval , where\n \n\nand  and  are the number of inputs to, and outputs from the layer respectively.\n\nInitialising your own weights and biases\nWe often would like to initialise our own weights and biases, and TensorFlow makes this process quite straightforward.\n\nWhen we construct a model in TensorFlow, each layer has optional arguments kernel_initialiser and bias_initialiser, which are used to set the weights and biases respectively.\n\nIf a layer has no weights or biases (e.g. it is a max pooling layer), then trying to set either kernel_initialiser or bias_initialiser will throw an error.\n\nLet's see an example, which uses some of the different initialisations available in Keras.","b2d41bb3":"## Thanks for visiting and reading !","a9bafbd9":"## Visualising the initialised weights and biases\n\nFinally, we can see the effect of our initialisers on the weights and biases by plotting histograms of the resulting values. Compare these plots with the selected initialisers for each layer above.","db56c7c3":"# weight and Bias initilizer in tensorflow model\nIn this notebook investigate different ways to initialise weights and biases in the layers of neural networks.","f8568f03":"## Adding some layers\n\nAs the following example illustrates, we can also instantiate initialisers in a slightly different manner, allowing us to set optional arguments of the initialisation method.","ce4bde6d":"## Checking the version of tensorflow"}}