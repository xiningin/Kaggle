{"cell_type":{"aab3e9c0":"code","ddf99b2f":"code","f92d05f1":"code","966bea92":"code","eace4b74":"code","71d7d280":"code","b853c072":"code","506779fb":"code","3d36fef6":"code","e19bdb93":"code","0ed42b16":"markdown","854f14d2":"markdown","3a4d510e":"markdown","c42f7af9":"markdown","93b3c39c":"markdown"},"source":{"aab3e9c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddf99b2f":"df = pd.read_table('..\/input\/songmode\/dev.tsv')\ndf.head()","f92d05f1":"\ndef skew_kurt(df):\n    sku = []\n    for col in df.columns:\n        if col not in ['id','artists']:\n            sku.append([col,\n                        df[col].kurt(),\n                        df[col].skew(),\n                        np.log(df[col]).skew(),\n                        np.sqrt(df[col]).skew()\n                        ]\n                       )\n\n    return pd.DataFrame(sku,columns=['columns','kurt','skew','log skew','sqrt skew'])\n\nsku = skew_kurt(df)\nsku","966bea92":"plt.figure(figsize=(16,6))\n\ncol = 'duration_ms'\nplt.title(\"Distribution of \"+col)\nsns.distplot(df[df['mode']==0][col],color=\"green\", kde=True,bins=120, label='mode 0')\nsns.distplot(df[df['mode']==1][col],color=\"red\", kde=True,bins=120, label='mode 1')\nplt.legend()\nplt.show()\n","eace4b74":"plt.figure(figsize=(16,6))\n\ncol = 'duration_ms'\nplt.title(\"Distribution of \"+col + \" log trainsform\")\nsns.distplot(np.log(df[df['mode']==0][col]),color=\"green\", kde=True,bins=120, label='mode 0')\nsns.distplot(np.log(df[df['mode']==1][col]),color=\"red\", kde=True,bins=120, label='mode 1')\nplt.legend()\nplt.show()\n","71d7d280":"plt.figure(figsize=(16,6))\n\ncol = 'duration_ms'\nplt.title(\"Distribution of \"+col + \" log trainsform\")\nsns.distplot(np.log(df[col]), kde=True,bins=120, label='all')\nplt.legend()\nplt.show()","b853c072":"\nplt.figure(figsize=(16,6))\n\n\nplt.title(\"Distribution of \"+col+ \" sqrt trainsform\")\nsns.distplot(np.sqrt(df[df['mode']==0][col]),color=\"green\", kde=True,bins=120, label='mode 0')\nsns.distplot(np.sqrt(df[df['mode']==1][col]),color=\"red\", kde=True,bins=120, label='mode 1')\nplt.legend()\nplt.show()","506779fb":"plt.figure(figsize=(16,6))\n\n\nplt.title(\"Distribution of \"+col+ \" sqrt trainsform\")\nsns.distplot(np.sqrt(df[col]), kde=True,bins=120, label='all')\nplt.legend()\nplt.show()","3d36fef6":"\n\nfrom scipy import stats\n\nplt.figure(figsize=(16,6))\n\nplt.title(\"Distribution of \"+col + \" boxcox trainsform\")\nsns.distplot(stats.boxcox(df[df['mode']==0][col])[0],color=\"green\", kde=True,bins=120, label='mode 0')\nsns.distplot(stats.boxcox(df[df['mode']==1][col])[0],color=\"red\", kde=True,bins=120, label='mode 1')\nplt.legend()\nplt.show()\n","e19bdb93":"\n\n\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of \"+col + \" boxcox trainsform\")\nsns.distplot(stats.boxcox(df[col])[0], kde=True,bins=120, label='all')\nplt.legend()\nplt.show()\n","0ed42b16":"Thanks to Rachael Tatman for her good tutorial of [Boxcox transform on train & test data](https:\/\/www.kaggle.com\/rtatman\/boxcox-transform-on-train-test-data). In this notebook, we are going to see the effects of different transformers on this dataset. After reading this notebook, I would like kindly to ask you that **Is it a good idea to apply Box-cox or other transformation methods based on target class separately?** \nIn this case, after applying the box-cox transformers on column of *duration_ms*, the distribution of its values based on target value of '***mode***' column is totally changed and separated from each other. Let's go!!!","854f14d2":"Now We are applying transformers: log, sqrt, box-cox","3a4d510e":"As you can see, The skewness value of *duration_ms* is about 7.72","c42f7af9":"On contrast, when we apply this method to all target values, the distribuation of all values are changed as what you see above. So **the question is which king of approach is better for a classification task?**\n\n\n*Please answer to this question and if you find it usefull up-vote this kernel *","93b3c39c":"As you can see here, after applying the box-cox transformers method for each target class, the distribution of each targets are changed."}}