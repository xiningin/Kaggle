{"cell_type":{"85e5dcd3":"code","12e83e4b":"code","a6164de8":"code","bef33468":"code","7f0ba149":"code","0dc50622":"code","14f3e126":"code","4b11826b":"code","8d5b8ee3":"code","ea9146ec":"markdown","b0bb9d7c":"markdown","114adccb":"markdown","91df8fac":"markdown","b82388d1":"markdown","cf1ad735":"markdown","4bce8a1d":"markdown"},"source":{"85e5dcd3":"import json\nimport os\nimport re\nimport sys\n\nfrom collections import Counter\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm import tqdm\n\n%matplotlib inline","12e83e4b":"# read HGNC.txt downloaded from https:\/\/www.genenames.org\/\nhgnc_df = pd.read_csv('..\/input\/hgnc-hugo-gene-nomenclature-committee\/HGNC.txt', sep='\\t')\nhgnc_df.head()","a6164de8":"# regex to find gene symbols and gene mutation words\nr_symbols = re.compile('(?:^|\\W)([A-Z][A-Z0-9orf\\-_]*[@#]?)(?:$|\\W)')\nvocab = ['deleted', 'deleting', 'deletion', 'truncation',\n         'duplication', 'recombination', 'crossovers', 'transposition',\n         'insertion', 'inserted', 'inserting',\n         'mutation', 'mutant', 'mutated',\n         'polymorphism', 'snp',\n         'variant', 'variation']\nr_vocab = '(?:' + '|'.join(vocab) + ')'\nr_vocab = re.compile(r_vocab)\nsymbols = set(hgnc_df['Approved symbol'].values)\n\n# check that the regex finds all gene symbols\nfound_symbols = hgnc_df['Approved symbol'].str.extract('(?:^|\\W)([A-Z][A-Z0-9orf\\-_]*[@#]?)(?:$|\\W)', expand=True)\n(found_symbols[0]==hgnc_df['Approved symbol']).all()","bef33468":"# folders\nDIR = '\/kaggle\/input\/CORD-19-research-challenge'\n\nl = [d for d in os.listdir(DIR) if os.path.isdir(os.path.join(DIR,d))]\nl.sort()\nprint(*l, sep='\\n')","7f0ba149":"# perform everything:\n# 1. switch all JSON files to TEXT files if needed\n# 2. process TEXT files to collect all mentionned gene symbols\n# 3. simple visualization\n\ndef run(dataset):\n    # init variables\n    json_folder_path = os.path.join(DIR, dataset, dataset)\n    print(f'Files in folder \"{dataset}\": {len(os.listdir(json_folder_path))}')\n\n    text_folder_path = os.path.join('..\/working', dataset, 'text')\n    if not os.path.exists(text_folder_path):\n        os.mkdir(os.path.join('..\/working', dataset))\n        os.mkdir(text_folder_path)\n    \n    # switch all JSON files to TEXT files\n    list_of_files = list(os.listdir(json_folder_path))\n    \n    if len(os.listdir(text_folder_path)) == 0:\n\n        for file in tqdm(list_of_files):\n            json_path = os.path.join(json_folder_path, file)\n            text_path = os.path.join(text_folder_path, os.path.splitext(file)[0]+'.txt')\n            with open(json_path) as json_file, open(text_path, 'w') as text_file:\n                json_data = json.load(json_file)\n                text_file.write(json_data['metadata']['title'])\n                text_file.write('\\n\\n')\n                text_file.write('\\n\\n'.join(x['text'] for x in json_data['abstract']))\n                text_file.write('\\n\\n')\n                text_file.write('\\n\\n'.join(x['text'] for x in json_data['body_text']))\n            \n    # process TEXT files to collect all mentionned gene symbols\n    list_of_files = list(os.listdir(text_folder_path))\n    c = Counter()\n\n    for file in tqdm(list_of_files):\n\n        text_path = os.path.join(text_folder_path, file)\n\n        with open(text_path) as text_file:\n            text_data = text_file.readlines()\n\n        for text in text_data:\n\n            if not r_vocab.search(text):\n                continue\n\n            found_symbols = [s for s in r_symbols.findall(text) if s in symbols]\n            c.update(found_symbols)\n\n    s = pd.Series(list(c.values()), index=c.keys())\n    s = s.sort_values(ascending=False)\n    \n    # visualization\n    \n    print('Found {} gene symbols in \"{}\"'.format(len(s), dataset))\n    \n    # gene symbols\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.set_title('Top 30 genes mentionned in \"{}\"'.format(dataset))\n    sns.barplot(x=s[:30], y = s[:30].index);\n    \n    # gene names\n    mapping = hgnc_df.set_index('Approved symbol')['Approved name']\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.set_title('Top 30 genes mentionned in \"{}\"'.format(dataset))\n    sns.barplot(x=s[:30], y = [mapping[i] for i in s[:30].index]);","0dc50622":"# biorxiv_medrxiv\nrun('biorxiv_medrxiv')","14f3e126":"# comm_use_subset\nrun('comm_use_subset')","4b11826b":"# custom_license\nrun('custom_license')","8d5b8ee3":"# noncomm_use_subset\nrun('noncomm_use_subset')","ea9146ec":"## Data to be processed","b0bb9d7c":"## HGNC Data","114adccb":"# CORD-19 Human Genes Insights\n\nSome code is originated from `CORD-19 Solution Toolbox`.\n\n\nThe steps are:\n\n* switch JSON files to text files (title, abstract, body_text);  \n* select parts of text including gene mutation words (enriched with Word2Vec): deleted, deleting, deletion, truncation, duplication, recombination, crossovers, transposition, insertion, inserted, inserting,  mutation, mutant, mutated, polymorphism, snp, variant, variation;  \n* find in those parts of text gene approved symbols (source: HGNC, HUGO Gene Nomenclature Committee);  \n* visualize gene insights.\n\nUnrelevant findings may occur and would require disambiguation techniques.\n\n## Load packages","91df8fac":"## 2. comm_use_subset","b82388d1":"## 4. noncomm_use_subset","cf1ad735":"## 3. custom_license","4bce8a1d":"## 1. biorxiv_medrxiv"}}