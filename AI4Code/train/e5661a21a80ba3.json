{"cell_type":{"9dcb0b60":"code","745af1f1":"code","20133d8e":"code","adee9334":"code","bb1473b9":"code","d134fc31":"code","0bf5de0c":"code","ebf4bab9":"code","89124fab":"code","a5721910":"code","be74b356":"code","d8b175a6":"markdown","685d5bde":"markdown","4e02fed9":"markdown","af8238e0":"markdown"},"source":{"9dcb0b60":"import numpy as np\nimport pandas as pd\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.optimizers import SGD\nfrom sklearn.model_selection import train_test_split","745af1f1":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf.head()","20133d8e":"def prep_pixels(train, test):\n    # convert from integers to floats\n    train_norm = train.astype('float32')\n    test_norm = test.astype('float32')\n    # normalize to range 0-1\n    train_norm = train_norm \/ 255.0\n    test_norm = test_norm \/ 255.0\n    # return normalized images\n    return train_norm, test_norm","adee9334":"train = df[list(df.columns)[1:]].values\ntrain = train.reshape((train.shape[0], 28, 28, 1))\n\ntest = df['label'].values\ntest = np.eye(10)[test]\n\ntrain, test = prep_pixels(train, test)\n\ntrainX, testX, trainY, testY = train_test_split(train, test, test_size=0.33, random_state=42)","bb1473b9":"def define_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))\n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Flatten())\n    model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n    model.add(Dense(10, activation='softmax'))\n    # compile model\n    opt = SGD(lr=0.01, momentum=0.9)\n    model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n    return model","d134fc31":"model = define_model()\nmodel.fit(trainX, trainY, epochs=10, batch_size=32, verbose=1)","0bf5de0c":"df_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ndf_test.head()","ebf4bab9":"to_predict = df_test.values\nto_predict = to_predict.astype('float32')\nto_predict = to_predict \/ 255.0\nto_predict = to_predict.reshape((to_predict.shape[0], 28, 28, 1))","89124fab":"pred_y = model(to_predict)\npred_y = np.argmax(pred_y, axis=1)","a5721910":"df_predicts = pd.DataFrame.from_dict({ 'ImageId' :np.arange(len(pred_y)) + 1, \n                                       'Label' : pred_y})\ndf_predicts.head()","be74b356":"df_predicts.to_csv(\"submission.csv\", index=False)","d8b175a6":"# Predict","685d5bde":"# Train","4e02fed9":"# Data","af8238e0":"# Submit"}}