{"cell_type":{"f71c1e6c":"code","59f6f525":"code","358f7cae":"code","91022cdd":"code","600521e4":"code","d639e265":"code","b6572e01":"code","f205ed24":"code","e016a7d6":"code","b7a94bb3":"code","a10b9a6b":"code","6552733a":"code","2413d844":"markdown","032ac262":"markdown","ee31966f":"markdown","224882e7":"markdown","3f5e65b7":"markdown","cd9406e0":"markdown","8c26212b":"markdown"},"source":{"f71c1e6c":"import os\nimport cv2\nfrom PIL import Image\nimport pandas as pd\nimport numpy as np\nimport random\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D, Dropout, Dense\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split","59f6f525":"import os\nprint(os.listdir('..\/input\/gtsrb-german-traffic-sign'))\n","358f7cae":"# Reading the input images and putting them into a numpy array\ndata=[]\nlabels=[]\nheight = 30\nwidth = 30\nchannels = 3\nnum_classes = 43\nn_inputs = height * width*channels\nfor i in range(num_classes) :\n    s=\"..\/input\/gtsrb-german-traffic-sign\/train\/{0}\/\".format(i)\n    print(s)\n    imageset=os.listdir(s)\n    for imgs  in imageset:\n        image=cv2.imread(s+imgs)\n        i_array = Image.fromarray(image, 'RGB')\n        size = i_array.resize((height, width))\n        data.append(np.array(size))\n        labels.append(i)\n\n          \n        \n        \n","91022cdd":"x_train=np.array(data)\nx_train= x_train\/255.0\ny_train=np.array(labels)\ny_train=keras.utils.to_categorical(y_train,num_classes)","600521e4":"# Spli|t Data\nX_train,X_test,Y_train,Y_test = train_test_split(x_train,y_train,test_size = 0.3,random_state=0)\nprint(\"Train :\", X_train.shape)\nprint(\"Test :\", X_test.shape)","d639e265":"# Show Train images\nimport matplotlib.pyplot as plt\n\ndef display_images(images, labels, amount):\n    for i in range(amount):\n        index = int(random.random() * len(images))\n        plt.axis('off')\n        plt.imshow(images[index])\n        plt.show()       \n        print(\"Size of this image is \" + str(images[index].shape))\n        print(\"Class of the image is \" + str(labels[index]))\n\nprint(\"Train images\")\ndisplay_images(X_train, Y_train, 3)","b6572e01":"# Build Model\nmodel = keras.models.Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3,3), padding='same', activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Conv2D(32, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.summary()","f205ed24":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e016a7d6":"# Train Model\nepochs = 15\nhistory = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), batch_size=32, epochs=epochs,verbose=1)","b7a94bb3":"# plot the accuracy and the loss\nimport matplotlib.pyplot as plt\nfrom keras import models\n\nplt.figure(0)\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\n\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()","a10b9a6b":"# Predicting Test data \ny_test=pd.read_csv(\"..\/input\/gtsrb-german-traffic-sign\/Test.csv\")\nlabels=y_test['Path'].as_matrix()\ny_test=y_test['ClassId'].values\n\ndata=[]\n\nfor f in labels:\n    image=cv2.imread('..\/input\/gtsrb-german-traffic-sign\/test\/'+f.replace('Test\/', ''))\n    image_from_array = Image.fromarray(image, 'RGB')\n    size_image = image_from_array.resize((height, width))\n    data.append(np.array(size_image))\n\nX_test=np.array(data)\nX_test = X_test.astype('float32')\/255  \npred = model.predict_classes(X_test)","6552733a":"# Accuracy with the test data\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","2413d844":"# Traffic Sign Recognition using CNN","032ac262":"After preprocessing images we need to split the images.by using train_test_split","ee31966f":"\nTo arrive at such a multiclass classifier, we need to perform the following steps\n1. Preprocess the dataset:\n2. Extract features:\n3. Train the classifier:\n4. Score the classifier:**","224882e7":"importing Libraries","3f5e65b7":"The goal  is to train a multiclass classifier to recognize traffic signs.\n1.German Traffic Sign Recognition Benchmark (GTSRB) dataset\n2.CNN","cd9406e0":"importing datasets","8c26212b":"This is the Final accuracy of the model"}}