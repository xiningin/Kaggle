{"cell_type":{"2fe79dc8":"code","18852f0c":"code","31d98959":"code","831cbb14":"code","9c3dca6f":"code","fb844d02":"code","d1a3fc69":"code","a8b18934":"code","39ba91a2":"code","e27b9065":"code","acfa6b6a":"code","e295e523":"code","dca84984":"code","f52566a0":"code","bdacc7c3":"code","c1433a28":"code","e753ad18":"code","18fc9ec1":"code","7a8d3d87":"code","606c3082":"code","c9257ed8":"code","a7f01894":"code","6524155a":"code","e45eb9ed":"code","165fc020":"code","aef1ae22":"code","290de784":"code","e15f3dc6":"code","9d66dc70":"code","96a39333":"code","2432e019":"code","a74c93cf":"code","69c753a6":"code","0cc7ab8a":"code","4c569dc0":"code","ffb38e95":"code","422f2d8f":"code","45e14a8f":"code","a8b3f3c4":"code","24bca3da":"code","27644594":"code","708e96f4":"code","773a022f":"code","5eb2f2f5":"code","c51aa912":"code","798dbb99":"code","c05ae278":"code","8d9052d8":"code","e9eceeee":"code","60ad5626":"code","81293fd1":"code","f1019ce5":"code","15a600f6":"code","1e0a97cd":"code","5fa65860":"code","5de44be2":"code","5e15ce81":"code","2de4beba":"code","e83c624d":"code","36f99125":"code","cb895f38":"code","675f5628":"code","02f06d3f":"code","439c459e":"code","9a789bea":"code","418acdaf":"code","8d6f7d94":"code","e70e68a0":"code","ffcf7c94":"code","ae9bf3a0":"code","43d8dec7":"code","0ba5bd85":"code","f8a66c8e":"code","818c6df0":"code","f9c4d02d":"code","6f9885ed":"code","78cd44e5":"code","d9015c28":"code","fe2ff582":"code","c1eb9a26":"code","98882d73":"code","36f87879":"code","b3d609ad":"code","ae10c305":"markdown","41202e3c":"markdown","3072d51c":"markdown","1fdcb037":"markdown","5ca78732":"markdown"},"source":{"2fe79dc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18852f0c":"Train = pd.read_csv('..\/input\/titanic\/train.csv')","31d98959":"Train.head()","831cbb14":"Train.shape","9c3dca6f":"Train.info()","fb844d02":"Train.tail()","d1a3fc69":"Train.describe()","a8b18934":"import seaborn as sns","39ba91a2":"Train.head(\n)","e27b9065":"Train['Survived'].value_counts()","acfa6b6a":"Train['Pclass'].value_counts()","e295e523":"sns.countplot(x=Train.Pclass)","dca84984":"sns.barplot(x=Train.Pclass,y= Train.Survived)","f52566a0":"sns.countplot(x=Train.Pclass,hue=Train.Survived)","bdacc7c3":"sns.countplot(x=Train.Sex,hue=Train.Survived)","c1433a28":"sns.countplot(x=Train.Survived,hue=Train.Sex)","e753ad18":"import matplotlib.pyplot as plt","18fc9ec1":"fig,ax = plt.subplots(1,2,figsize = (15,5))\nsns.distplot(x = Train.Age,kde=False,ax=ax[0])\nax[0].set_title('histogram of age')\nsns.distplot(x=Train.Fare,kde=False,ax = ax[1])\nax[1].set_title('hist of fare')","7a8d3d87":"fig,ax = plt.subplots(1,2,figsize = (15,5))\nax1 = sns.distplot(x = Train[Train['Survived']==1].Age.dropna(),kde=False,ax=ax[0],label='Survived')\nax1 = sns.distplot(x = Train[Train['Survived']==0].Age.dropna(),kde=False,ax=ax[0],label='Not survived')\nax1.legend()\nax[0].set_title('histogram of age')\nax2 = sns.distplot(x = Train[Train['Survived']==1].Fare.dropna(),kde=False,ax=ax[1],label='Survived')\nax2 = sns.distplot(x = Train[Train['Survived']==0].Fare.dropna(),kde=False,ax=ax[1],label='Not Survived')\nax2.legend()\nax[1].set_title('hist of fare')","606c3082":"Male = Train[Train['Sex'] == 'male']\nFemale = Train[Train['Sex'] == 'female']\n\nfig,ax = plt.subplots(2,2,figsize = (15,15))\nax1 = sns.distplot(x = Male[Male['Survived']==1].Age.dropna(),kde=False,ax=ax[0][0],label='Survived')\nax1 = sns.distplot(x = Male[Male['Survived']==0].Age.dropna(),kde=False,ax=ax[0][0],label='Not survived')\nax1.legend()\nax2 = sns.distplot(x = Female[Female['Survived']==1].Age.dropna(),kde=False,ax=ax[0][1],label='Survived')\nax2 = sns.distplot(x = Female[Female['Survived']==0].Age.dropna(),kde=False,ax=ax[0][1],label='Not survived')\nax2.legend()\nax[0][0].set_title('histogram of age for male')\nax[0][1].set_title('histogram of age for female')\nax3 = sns.distplot(x = Male[Male['Survived']==1].Fare.dropna(),kde=False,ax=ax[1][0],label='Survived')\nax3 = sns.distplot(x = Male[Male['Survived']==0].Fare.dropna(),kde=False,ax=ax[1][0],label='Not Survived')\nax3.legend()\nax4 = sns.distplot(x = Female[Female['Survived']==1].Fare.dropna(),kde=False,ax=ax[1][1],label='Survived')\nax4 = sns.distplot(x = Female[Female['Survived']==0].Fare.dropna(),kde=False,ax=ax[1][1],label='Not Survived')\nax4.legend()\nax[1][0].set_title('hist of fare for male')\nax[1][1].set_title('hist of fare for female')","c9257ed8":"Train['Parch'].value_counts()","a7f01894":"Train['SibSp'].value_counts()","6524155a":"fig,ax = plt.subplots(1,2,figsize=(15,5))\nax1 = sns.countplot(x=Train.Parch,hue=Train.Survived,ax=ax[0])\nax1.set_title('Parch')\nax2 = sns.countplot(x=Train.SibSp,hue=Train.Survived,ax=ax[1])\nax2.set_title('SibSp')","e45eb9ed":"Train['relatives'] = Train['SibSp']+Train['Parch']","165fc020":"sns.factorplot('relatives','Survived',data=Train,aspect=5)","aef1ae22":"Train['Embarked'].value_counts()","290de784":"Train.Embarked.describe()","e15f3dc6":"sns.countplot(x = Train.Embarked.dropna(),hue = Train.Survived)","9d66dc70":"FacetGrid = sns.FacetGrid(Train, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","96a39333":"grid = sns.FacetGrid(Train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","2432e019":"train = Train.copy()","a74c93cf":"gender = {'male':1, 'female': 0}\ntrain['Sex'] = train['Sex'].map(gender)","69c753a6":"y = train['Survived']\ntrain.drop(['Survived','Name','Cabin','Ticket'],axis=1,inplace=True)","0cc7ab8a":"train.set_index('PassengerId',inplace=True)\ny.index = train.index\n","4c569dc0":"train.head()","ffb38e95":"embarked = {'S':0,'C':1,'Q':2}\ntrain['Embarked'].fillna('S',inplace=True)","422f2d8f":"train['Embarked'] = train['Embarked'].map(embarked)","45e14a8f":"train['Age'] = pd.qcut(train['Age'],q=4)\ntrain['Fare'] = pd.qcut(train['Fare'],q=4)","a8b3f3c4":"train['Age'].value_counts()","24bca3da":"train['Fare'].value_counts()","27644594":"train.head()","708e96f4":"import  sklearn\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n","773a022f":"train.Fare.unique()","5eb2f2f5":"le = preprocessing.LabelEncoder()\nle.fit(train.Age.unique())\ntrain['Age'] = le.transform(train['Age'])","c51aa912":"le2 = preprocessing.LabelEncoder()\nle2.fit(train.Fare.unique())\ntrain['Fare'] = le2.transform(train['Fare'])","798dbb99":"train.head()","c05ae278":"y.head()","8d9052d8":"x_train, x_test , y_train,y_test= train_test_split(train,y,test_size=0.2)","e9eceeee":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","60ad5626":"from sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","81293fd1":"models = [LogisticRegression(), SVC(), DecisionTreeClassifier(), RandomForestClassifier()]\n","f1019ce5":"for model in models:\n    model.fit(x_train,y_train)\n    print('The score for ',model,'is',model.score(x_train,y_train))","15a600f6":"predictions = models[3].predict(x_test)\nprint(classification_report(y_test,predictions))","1e0a97cd":"random_forest = RandomForestClassifier(n_estimators=200,oob_score=True)","5fa65860":"random_forest.fit(x_train,y_train)\ny_pred = random_forest.predict(x_test)\nrandom_forest.score(x_train,y_train)","5de44be2":"print(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","5e15ce81":"importances = pd.DataFrame({'feature':x_train.columns,'importance':np.round(random_forest.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances","2de4beba":"importances.plot.bar()","e83c624d":"train_pred = random_forest.predict(x_train)\nprint(classification_report(y_train,train_pred))","36f99125":"print(classification_report(y_test,y_pred))","cb895f38":"from sklearn.metrics import confusion_matrix,precision_score,recall_score,precision_recall_curve","675f5628":"print(confusion_matrix(y_train,train_pred))\nprint(confusion_matrix(y_test,y_pred))","02f06d3f":"y_pred[0]","439c459e":"y_scores = random_forest.predict_proba(x_train)\ny_scores = y_scores[:,1]\n\nprecision, recall, threshold = precision_recall_curve(y_train, y_scores)\ndef plot_precision_and_recall(precision, recall, threshold):\n    plt.plot(threshold, precision[:-1], \"r-\", label=\"precision\", linewidth=5)\n    plt.plot(threshold, recall[:-1], \"b\", label=\"recall\", linewidth=5)\n    plt.xlabel(\"threshold\", fontsize=19)\n    plt.legend(loc=\"upper right\", fontsize=19)\n    plt.ylim([0, 1])\n\nplt.figure(figsize=(14, 7))\nplot_precision_and_recall(precision, recall, threshold)\nplt.show()","9a789bea":"def plot_precision_vs_recall(precision, recall):\n    plt.plot(recall, precision, \"g--\", linewidth=2.5)\n    plt.ylabel(\"recall\", fontsize=19)\n    plt.xlabel(\"precision\", fontsize=19)\n    plt.axis([0, 1.5, 0, 1.5])\n\nplt.figure(figsize=(14, 7))\nplot_precision_vs_recall(precision, recall)\nplt.show()","418acdaf":"from sklearn.metrics import roc_curve\n\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, y_scores)\n\ndef plot_roc_curve(false_positive_rate, true_positive_rate, label=None):\n    plt.plot(false_positive_rate, true_positive_rate, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'r', linewidth=4)\n    plt.axis([0, 1, 0, 1])\n    plt.xlabel('False Positive Rate (FPR)', fontsize=16)\n    plt.ylabel('True Positive Rate (TPR)', fontsize=16)\n\nplt.figure(figsize=(14, 7))\nplot_roc_curve(false_positive_rate, true_positive_rate)\nplt.show()","8d6f7d94":"from sklearn.metrics import roc_auc_score\nr_a_score = roc_auc_score(y_train, y_scores)\nprint(\"ROC-AUC-Score:\", r_a_score)","e70e68a0":"test = pd.read_csv('..\/input\/titanic\/test.csv')","ffcf7c94":"test.head()","ae9bf3a0":"test['Sex'] = test['Sex'].map(gender)\ntest['Embarked'].fillna('S',inplace=True)\ntest['Embarked'] = test['Embarked'].map(embarked)\ntest.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)","43d8dec7":"test.head()","0ba5bd85":"test['Age'] = pd.qcut(test['Age'],q=4)\ntest['Fare'] = pd.qcut(test['Fare'],q=4)","f8a66c8e":"le3 = preprocessing.LabelEncoder()\nle3.fit(test.Age.unique())\ntest['Age'] = le3.transform(test['Age'])\nle4 = preprocessing.LabelEncoder()\nle4.fit(test.Fare.unique())\ntest['Fare'] = le4.transform(test['Fare'])","818c6df0":"test.set_index('PassengerId',inplace=True)","f9c4d02d":"test['relatives'] = test['SibSp']+test['Parch']","6f9885ed":"test.head()","78cd44e5":"Survived = random_forest.predict(test)","d9015c28":"set(Survived)","fe2ff582":"submission = pd.DataFrame({'PassengerId': test.index,'Survived':Survived})","c1eb9a26":"submission.head()","98882d73":"submission['Survived'].value_counts()","36f87879":"submission.shape","b3d609ad":"submission.to_csv('titanic_submission.csv',index=False)","ae10c305":"We can see some features are incomplete( such as age,cabin etc.). so, i want to remove some unwanted features, let's check them.\n","41202e3c":"1) Pclass","3072d51c":"Lets see the effect of each feature on the result","1fdcb037":"Data preprocessing","5ca78732":"2) Sex"}}