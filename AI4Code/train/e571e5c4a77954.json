{"cell_type":{"c0881e56":"code","d1c48890":"code","5b2650e4":"code","7f3165f2":"code","69e1d909":"code","b2e61017":"code","f8718059":"code","06faac0f":"code","d911bf0c":"code","feb1cd42":"code","381f67d5":"code","583feca6":"code","f9b92073":"code","5c592865":"code","062df6cb":"code","ede7644a":"code","007baff1":"code","33149a59":"code","55115960":"code","402a3109":"code","b2bfbd3a":"code","acfecd53":"code","3c5c9b27":"code","f1def2f7":"code","cd8af175":"code","ed608865":"code","01e2dfd8":"code","091e7247":"code","9f76709d":"code","8dbe3f53":"code","21fc50f5":"code","36e8e5d5":"code","1a0b5ccd":"code","f4694606":"code","7050281b":"code","4722efd1":"code","b171fdaf":"code","2cdb066f":"code","3bdb9bea":"code","261bed8f":"code","06df6791":"code","c5ef143f":"code","0fe8d9e6":"code","c255c4eb":"code","f989c6c4":"code","32815d5f":"code","ff66ffa9":"code","abd12acd":"code","4a5bdcea":"code","a8784ef3":"code","4c706696":"code","9ee8a859":"code","f2bef44c":"code","b98d5017":"code","ecefa3b1":"code","aaf25dda":"code","f505fabf":"code","27c2760e":"code","8c2c5c3b":"code","41882969":"code","f85b138d":"code","d6546ac4":"code","4d19159b":"code","2c147d77":"code","6dd3a628":"code","40378cbf":"code","3033ad03":"code","970b881f":"code","c1b8134b":"code","0514da14":"code","c6129a80":"code","f86b53f6":"code","cf26c9a1":"code","5aaf9bdc":"code","837b6a01":"code","d8b61a11":"code","e9001c5e":"code","3da0c693":"code","0adea913":"code","95cba725":"code","44cae497":"code","c553c31b":"code","a103c22f":"code","7a63e5ec":"code","a1992449":"code","e4133e70":"code","c7aee040":"code","a1de7f78":"code","27f7903e":"code","19450336":"code","9acf04ee":"code","47690dc5":"code","a0f49634":"code","06ef1088":"code","cbbb20ea":"code","e4440837":"code","bae1e673":"code","66231413":"code","a69451a1":"code","7414c27b":"code","edd8a293":"code","86e6b563":"code","6949a1b9":"code","32af29b7":"code","73b7fa2e":"code","5b823967":"code","b426a278":"code","22e469d7":"code","96b86b38":"code","3570dcfa":"code","e7269a89":"code","882565ef":"code","3bace119":"code","d45a684e":"code","13e2e1fa":"code","9d695440":"code","dbac7af6":"code","df41b10b":"code","c27069f2":"code","216d3f80":"code","c2e1e20d":"code","a468f00c":"code","390546f0":"code","8bd32656":"code","ddfcba79":"code","bde0a960":"code","1adbf48a":"code","6145bb21":"code","eb947e05":"code","ac7e5184":"code","c7fde10c":"code","60ba0315":"code","e00e6bb2":"code","c5fcc294":"code","672de97b":"code","931d527c":"code","b368677c":"code","654b1654":"markdown","38db4cc9":"markdown","335217ad":"markdown","6770e161":"markdown","644f8b18":"markdown","31c4dbd0":"markdown","dd755811":"markdown","1584a83a":"markdown","59ac5d0f":"markdown","c9f5f0dc":"markdown","210e9ddc":"markdown","f8cca60c":"markdown","2ee4bbad":"markdown","e2937862":"markdown"},"source":{"c0881e56":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d1c48890":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf2 = pd.read_csv('..\/input\/titanic\/test.csv')","5b2650e4":"df.head()","7f3165f2":"df2.head()","69e1d909":"df.info()","b2e61017":"df.describe()","f8718059":"df.isnull().sum()","06faac0f":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","d911bf0c":"sns.heatmap(df2.isnull(),yticklabels=False,cbar=False,cmap='viridis')","feb1cd42":"sns.countplot(x='Survived',data=df)","381f67d5":"sns.countplot(x='Survived',data=df, hue='Sex')","583feca6":"sns.countplot(x='Survived',data=df, hue='Pclass')","f9b92073":"sns.displot(df['Age'].dropna(), bins=30, kde=True)","5c592865":"sns.countplot(x='SibSp',data=df)","062df6cb":"import cufflinks as cf\ncf.go_offline()","ede7644a":"df['Fare'].iplot(kind='hist',bins=30)","007baff1":"plt.figure(figsize=(10,6),dpi=200)\nsns.boxplot(x='Pclass',y='Age',data=df)","33149a59":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","55115960":"df['Age'] = df[['Age','Pclass']].apply(impute_age,axis=1)\ndf2['Age'] = df2[['Age','Pclass']].apply(impute_age,axis=1)","402a3109":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b2bfbd3a":"sns.heatmap(df2.isnull(),yticklabels=False,cbar=False,cmap='viridis')","acfecd53":"df.drop('Cabin',axis=1,inplace=True)\ndf2.drop('Cabin',axis=1,inplace=True)","3c5c9b27":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","f1def2f7":"sns.heatmap(df2.isnull(),yticklabels=False,cbar=False,cmap='viridis')","cd8af175":"df.isnull().sum()","ed608865":"df2.isnull().sum()","01e2dfd8":"df2['Fare'].fillna(df['Fare'].mean(), inplace=True)","091e7247":"df2.isnull().sum().sum()","9f76709d":"df.dropna(inplace=True)\ndf2.dropna(inplace=True)","8dbe3f53":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False)","21fc50f5":"df.head()","36e8e5d5":"df2.head()","1a0b5ccd":"df_nums = df.select_dtypes(exclude='object')\ndf_objs = df.select_dtypes(include='object')","f4694606":"df_nums.columns","7050281b":"df_objs.columns","4722efd1":"sex1 = pd.get_dummies(df['Sex'],drop_first=True)\nembark1 = pd.get_dummies(df['Embarked'],drop_first=True)\n\nsex2 = pd.get_dummies(df2['Sex'],drop_first=True)\nembark2 = pd.get_dummies(df2['Embarked'],drop_first=True)","b171fdaf":"df = pd.concat([df,sex1,embark1],axis=1)\ndf2 = pd.concat([df2,sex2,embark2],axis=1)","2cdb066f":"df.info()","3bdb9bea":"df2.info()","261bed8f":"df.head()","06df6791":"df2.head()","c5ef143f":"def func(name):\n    if 'Mr' in name and not 'Mrs' in name:\n        return 1\n    else:\n        return 0","0fe8d9e6":"def funcc(name):\n    if 'Mrs' in name:\n        return 1\n    else:\n        return 0","c255c4eb":"def funx(name):\n    if 'Miss' in name:\n        return 1\n    else:\n        return 0","f989c6c4":"def dr(name):\n    if 'Dr' in name:\n        return 1\n    else:\n        return 0","32815d5f":"df['Mr'] = df['Name'].apply(func)\ndf['Mrs'] = df['Name'].apply(funcc)\ndf['Miss'] = df['Name'].apply(funx)\ndf['Dr'] = df['Name'].apply(dr)\ndf.head()\n","ff66ffa9":"df2.head()","abd12acd":"df2.dropna(inplace=True)","4a5bdcea":"df2['Mr'] = df2['Name'].apply(func)\ndf2['Mrs'] = df2['Name'].apply(funcc)\ndf2['Miss'] = df2['Name'].apply(funx)\ndf2['Dr'] = df2['Name'].apply(dr)\ndf2.head()","a8784ef3":"df.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ndf2.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","4c706696":"df.head()","9ee8a859":"df['Age'] = (df['Age']-df['Age'].mean())\/np.std(df['Age'])\ndf['Fare'] = (df['Fare']-df['Fare'].mean())\/np.std(df['Fare'])","f2bef44c":"df.head()","b98d5017":"df2.head()","ecefa3b1":"df2['Age'] = (df2['Age']-df['Age'].mean())\/np.std(df['Age'])\ndf2['Fare'] = (df2['Fare']-df['Fare'].mean())\/np.std(df['Fare'])","aaf25dda":"df2.head()","f505fabf":"from sklearn.model_selection import train_test_split","27c2760e":"x = df.drop(['Survived','PassengerId'],axis=1)\ny = df['Survived']","8c2c5c3b":"x","41882969":"x.columns","f85b138d":"x_train, x_test, y_train, y_test =  train_test_split(x,y,test_size=0.1,random_state=101)","d6546ac4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,plot_confusion_matrix","4d19159b":"def report_model(model):\n    model.fit(x_train, y_train)\n    pred = model.predict(x_test)\n    plot_confusion_matrix(model,x_test,y_test)\n    print(classification_report(y_test,pred))\n    ","2c147d77":"log_model = LogisticRegression(solver='saga',max_iter=100000)","6dd3a628":"report_model(log_model)","40378cbf":"log_model.coef_","3033ad03":"coefs  = pd.Series(log_model.coef_[0],x.columns)","970b881f":"coefs = coefs.sort_values()","c1b8134b":"plt.figure(figsize=(14,8))\nsns.barplot(x=coefs.index, y=coefs.values)\nplt.show()","0514da14":"from sklearn.metrics import plot_precision_recall_curve, plot_roc_curve","c6129a80":"plot_precision_recall_curve(log_model,x_test,y_test)","f86b53f6":"plot_roc_curve(log_model,x_test,y_test)","cf26c9a1":"from sklearn.model_selection import GridSearchCV","5aaf9bdc":"l1_ratio = np.linspace(0,1,10)\nc = np.logspace(0,4,5)","837b6a01":"param_grid = {'l1_ratio':l1_ratio,'penalty':['elasticnet'],'C':c}","d8b61a11":"grid_model = GridSearchCV(log_model,param_grid=param_grid)\n","e9001c5e":"report_model(grid_model)","3da0c693":"grid_model.best_params_","0adea913":"from sklearn.neighbors import KNeighborsClassifier","95cba725":"knn = KNeighborsClassifier(n_neighbors=15)","44cae497":"report_model(knn)","c553c31b":"error = []\n\nfor i in range(1,30):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    pred = knn.predict(x_test)\n    error.append(1-(accuracy_score(y_test,pred)))\n    ","a103c22f":"plt.plot(range(1,30),error,'r-',marker='o')\nplt.xlabel('Values of K')\nplt.ylabel('Error')\nplt.title('Error vs K')","7a63e5ec":"from sklearn.svm import SVC","a1992449":"svm = SVC()\nparam_grid = {'C':np.linspace(1,6,10),'kernel':['linear','rbf','sigmoid'],'gamma':['scale','auto']}\ngrid = GridSearchCV(svm,param_grid)","e4133e70":"report_model(grid)","c7aee040":"grid.best_params_","a1de7f78":"grid.best_score_","27f7903e":"from sklearn.tree import DecisionTreeClassifier","19450336":"model = DecisionTreeClassifier()","9acf04ee":"report_model(model)","47690dc5":"from sklearn.tree import plot_tree","a0f49634":"plt.figure(figsize=(14,10),dpi=200)\nplot_tree(model,filled=True,feature_names=x.columns);","06ef1088":"param_grid = {'criterion':['entropy','gini'],'max_depth':list(range(3,8))}","cbbb20ea":"dt_grid = GridSearchCV(model, param_grid)","e4440837":"report_model(dt_grid)","bae1e673":"dt_grid.best_params_","66231413":"plt.figure(figsize=(14,10),dpi=200)\nplot_tree(dt_grid.best_estimator_,filled=True,feature_names=x.columns);","a69451a1":"dt_grid.best_estimator_","7414c27b":"from sklearn.ensemble import RandomForestClassifier","edd8a293":"param_grid = {\"n_estimators\":[100],\"max_depth\":[4,5,6,7]}","86e6b563":"random_forest = RandomForestClassifier()\nrand_grid = GridSearchCV(random_forest,param_grid)\n","6949a1b9":"report_model(rand_grid)","32af29b7":"rand_grid.best_estimator_","73b7fa2e":"from sklearn.ensemble import AdaBoostClassifier","5b823967":"len(x.columns)","b426a278":"error_rates = []\n\nfor n in range(1,16):\n    \n    model = AdaBoostClassifier(n_estimators=n)\n    model.fit(x_train,y_train)\n    preds = model.predict(x_test)\n    err = 1 - accuracy_score(y_test,preds)\n    \n    error_rates.append(err)","22e469d7":"plt.figure(dpi=150)\nplt.plot(range(1,16),error_rates)","96b86b38":"param_grid = {\"n_estimators\":[1,5,10,25,50,75,100]}\n","3570dcfa":"ada_model = AdaBoostClassifier(n_estimators=3)","e7269a89":"report_model(ada_model)","882565ef":"from sklearn.ensemble import GradientBoostingClassifier","3bace119":"param_grid = {\"n_estimators\":[1,10,25,50],'max_depth':[3,4,5,6],\"learning_rate\":np.arange(0.05, 0.15, 0.01)}","d45a684e":"gb_model = GradientBoostingClassifier()","13e2e1fa":"grid = GridSearchCV(gb_model,param_grid)","9d695440":"report_model(grid)","dbac7af6":"grid.best_params_","df41b10b":"report_model(best_gbc_model)","c27069f2":"import tensorflow as tf","216d3f80":"tf.random.set_seed(42)\n\nmodel_1 = tf.keras.Sequential([\n#     tf.keras.layers.Dense(100, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])\n\nmodel_1.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n             optimizer = tf.keras.optimizers.Adam(), metrics=['accuracy'])\n\nhistory = model_1.fit(x_train, y_train, epochs=500, verbose = 0)","c2e1e20d":"def check_model(model, history):\n    loss, accuracy = model.evaluate(x_test, y_test)\n    print(f\"Model loss on test set: {(loss):.4f}\")\n    print(f\"Model accuracy on test set: {(accuracy*100):.2f}%\")\n    pd.DataFrame(history.history).plot(figsize=(10,7), xlabel=\"epochs\");\n    \n    ","a468f00c":"check_model(model_1, history)","390546f0":"tf.random.set_seed(42)\n\nmodel_2 = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])\n\nmodel_2.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n             optimizer = tf.keras.optimizers.Adam(), metrics=['accuracy'])\n\nhistory = model_2.fit(x_train, y_train, epochs=500, verbose = 0)","8bd32656":"check_model(model_2, history)","ddfcba79":"tf.random.set_seed(42)\n\nmodel_3 = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])\n\nmodel_3.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n             optimizer = tf.keras.optimizers.Adam(), metrics=['accuracy'])\n\nhistory = model_3.fit(x_train, y_train, epochs=300, verbose = 0)","bde0a960":"check_model(model_3, history)","1adbf48a":"tf.random.set_seed(42)\n\nmodel_4 = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])\n\nmodel_4.compile(loss=tf.keras.losses.BinaryCrossentropy(), \n             optimizer = tf.keras.optimizers.Adam(), metrics=['accuracy'])\n\nhistory = model_4.fit(x_train, y_train, epochs=300, verbose = 0)","6145bb21":"check_model(model_4, history)","eb947e05":"model_2.fit(x,y)","ac7e5184":"predictions = tf.round( model_2.predict(df2.drop('PassengerId',axis=1)))","c7fde10c":"predictions","60ba0315":"df = pd.DataFrame(df2['PassengerId'])","e00e6bb2":"df['Survived'] = predictions.numpy()","c5fcc294":"df.head()","672de97b":"df.set_index('PassengerId', inplace=True)","931d527c":"\ndf.head()","b368677c":"df.to_csv(\"submission.csv\")","654b1654":"# Random Forest","38db4cc9":"# Neural Networks","335217ad":"# Choose final model","6770e161":"## Model 2","644f8b18":"## Model 3","31c4dbd0":"## Model 4","dd755811":"## Model 1","1584a83a":"# Elbow method","59ac5d0f":"# ADABOOST","c9f5f0dc":"# KNN","210e9ddc":"# Gradient Boosting","f8cca60c":"# Descision Trees","2ee4bbad":"# SVM","e2937862":"# Logistic Regression"}}