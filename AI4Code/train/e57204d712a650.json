{"cell_type":{"61467782":"code","273b2004":"code","ee3f133f":"code","6c238dcf":"code","a5a23c73":"code","c052bddb":"code","a4fcf639":"code","3067f921":"code","3a7978f4":"code","a710196e":"code","44a9c259":"code","a4be2e72":"code","37f85639":"code","2f6fdbec":"code","bad890ed":"code","f5cdb5ec":"code","838dbe29":"code","3da3632f":"code","1a970b00":"code","c4e00599":"code","54a51e59":"code","274925c2":"code","a9192a7d":"code","55254250":"code","8617fddc":"code","06628113":"code","df7a8ed2":"code","70f00528":"code","a0178fda":"code","10326f44":"code","4f629739":"code","729c3397":"code","31308019":"code","931ce4d8":"code","7fd3c7d4":"code","10ea8eee":"code","b303ecf9":"code","0f61c5e1":"code","fb0b5755":"code","b959b98e":"code","21a2d460":"code","03b26d0f":"markdown","ac0caf68":"markdown","0c5eff62":"markdown","a1eff247":"markdown","b7824815":"markdown","25e26c6c":"markdown","7ae1dd55":"markdown","5a5a05a8":"markdown","00be2ac0":"markdown","fc197ae5":"markdown","0ab8066d":"markdown","da497b86":"markdown","3615f31e":"markdown","70a08f2f":"markdown","dc5134a7":"markdown","6de6b820":"markdown","f552f336":"markdown","9d13a756":"markdown","1be94f40":"markdown","c3259e2a":"markdown","d280edc2":"markdown","cbba078b":"markdown","3de2a6af":"markdown","d77f440e":"markdown","2ae987c3":"markdown","013b70e9":"markdown","aba6dd7a":"markdown","37bd7085":"markdown","a9b32e74":"markdown","38ec967a":"markdown","b05bc0d9":"markdown","42a2ce06":"markdown","42bb6ec1":"markdown","07c42176":"markdown","3bab2682":"markdown","64190377":"markdown","8243cf0a":"markdown","40138707":"markdown","fb3c3562":"markdown","89493cb8":"markdown","a94293cb":"markdown","e4c63303":"markdown","3b96c2ef":"markdown","b29befa9":"markdown","5de8d62d":"markdown","b3581c42":"markdown","41cf499c":"markdown","55ac2ef0":"markdown","2340aaa6":"markdown","e940aa5b":"markdown","ee9a1036":"markdown","c520de2c":"markdown","d1e1ac1a":"markdown","c4c34371":"markdown","5c75ea6e":"markdown","1158aec3":"markdown","2e75c8fc":"markdown","5a056d17":"markdown","737609a7":"markdown","e3d9e044":"markdown","8d78fa5f":"markdown","4164860e":"markdown","a5ad6fa8":"markdown","a6ee99f2":"markdown","b5d2b341":"markdown","2a0a0c7c":"markdown","3b091f6e":"markdown","d3df7d74":"markdown","c3d529ff":"markdown","f4ffc210":"markdown","f3ab4696":"markdown","011d9841":"markdown","07c4ca61":"markdown","87cba5de":"markdown","d8f4c051":"markdown"},"source":{"61467782":"import pandas as pd\nimport matplotlib.pylab as plt","273b2004":"filename = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DA0101EN\/auto.csv\"","ee3f133f":"headers = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]","6c238dcf":"df = pd.read_csv(filename, names = headers)","a5a23c73":"# To see what the data set looks like, we'll use the head() method.\ndf.head()","c052bddb":"import numpy as np\n\n# replace \"?\" to NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head(5)","a4fcf639":"missing_data = df.isnull()\nmissing_data.head(5)","3067f921":"for column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")    ","3a7978f4":"avg_norm_loss = df[\"normalized-losses\"].astype(\"float\").mean(axis=0)\nprint(\"Average of normalized-losses:\", avg_norm_loss)","a710196e":"df[\"normalized-losses\"].replace(np.nan, avg_norm_loss, inplace=True)","44a9c259":"avg_bore=df['bore'].astype('float').mean(axis=0)\nprint(\"Average of bore:\", avg_bore)","a4be2e72":"df[\"bore\"].replace(np.nan, avg_bore, inplace=True)","37f85639":"# Write your code below and press Shift+Enter to execute \n","2f6fdbec":"df['num-of-doors'].value_counts()","bad890ed":"df['num-of-doors'].value_counts().idxmax()","f5cdb5ec":"#replace the missing 'num-of-doors' values by the most frequent \ndf[\"num-of-doors\"].replace(np.nan, \"four\", inplace=True)","838dbe29":"# simply drop whole row with NaN in \"price\" column\ndf.dropna(subset=[\"price\"], axis=0, inplace=True)\n\n# reset index, because we droped two rows\ndf.reset_index(drop=True, inplace=True)","3da3632f":"df.dtypes","1a970b00":"df[[\"bore\", \"stroke\"]] = df[[\"bore\", \"stroke\"]].astype(\"float\")\ndf[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"int\")\ndf[[\"price\"]] = df[[\"price\"]].astype(\"float\")\ndf[[\"peak-rpm\"]] = df[[\"peak-rpm\"]].astype(\"float\")","c4e00599":"df.dtypes","54a51e59":"df.head()","274925c2":"# Convert mpg to L\/100km by mathematical operation (235 divided by mpg)\ndf['city-L\/100km'] = 235\/df[\"city-mpg\"]\n\n# check your transformed data \ndf.head()","a9192a7d":"# Write your code below and press Shift+Enter to execute \n","55254250":"# replace (original value) by (original value)\/(maximum value)\ndf['length'] = df['length']\/df['length'].max()\ndf['width'] = df['width']\/df['width'].max()","8617fddc":"# Write your code below and press Shift+Enter to execute \n","06628113":"df[\"horsepower\"]=df[\"horsepower\"].astype(float, copy=True)","df7a8ed2":"%matplotlib inline\nimport matplotlib as plt\nfrom matplotlib import pyplot\nplt.pyplot.hist(df[\"horsepower\"])\n\n# set x\/y labels and plot title\nplt.pyplot.xlabel(\"horsepower\")\nplt.pyplot.ylabel(\"count\")\nplt.pyplot.title(\"horsepower bins\")","70f00528":"bins = np.linspace(min(df[\"horsepower\"]), max(df[\"horsepower\"]), 4)\nbins","a0178fda":"group_names = ['Low', 'Medium', 'High']","10326f44":"df['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True )\ndf[['horsepower','horsepower-binned']].head(20)","4f629739":"df[\"horsepower-binned\"].value_counts()","729c3397":"%matplotlib inline\nimport matplotlib as plt\nfrom matplotlib import pyplot\npyplot.bar(group_names, df[\"horsepower-binned\"].value_counts())\n\n# set x\/y labels and plot title\nplt.pyplot.xlabel(\"horsepower\")\nplt.pyplot.ylabel(\"count\")\nplt.pyplot.title(\"horsepower bins\")","31308019":"%matplotlib inline\nimport matplotlib as plt\nfrom matplotlib import pyplot\n\na = (0,1,2)\n\n# draw historgram of attribute \"horsepower\" with bins = 3\nplt.pyplot.hist(df[\"horsepower\"], bins = 3)\n\n# set x\/y labels and plot title\nplt.pyplot.xlabel(\"horsepower\")\nplt.pyplot.ylabel(\"count\")\nplt.pyplot.title(\"horsepower bins\")","931ce4d8":"df.columns","7fd3c7d4":"dummy_variable_1 = pd.get_dummies(df[\"fuel-type\"])\ndummy_variable_1.head()","10ea8eee":"dummy_variable_1.rename(columns={'fuel-type-diesel':'gas', 'fuel-type-diesel':'diesel'}, inplace=True)\ndummy_variable_1.head()","b303ecf9":"# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy_variable_1], axis=1)\n\n# drop original column \"fuel-type\" from \"df\"\ndf.drop(\"fuel-type\", axis = 1, inplace=True)","0f61c5e1":"df.head()","fb0b5755":"# Write your code below and press Shift+Enter to execute \n","b959b98e":"# Write your code below and press Shift+Enter to execute \n","21a2d460":"df.to_csv('clean_df.csv')","03b26d0f":"Finally, let's drop all rows that do not have price data:","ac0caf68":" We apply the function \"cut\" the determine what each value of \"df['horsepower']\" belongs to. ","0c5eff62":"<h4>Replace NaN by mean value:<\/h4>","a1eff247":"<h3>Welcome!<\/h3>\n\nBy the end of this notebook, you will have learned the basics of Data Wrangling! ","b7824815":"<h2>What is the purpose of Data Wrangling?<\/h2>","25e26c6c":"<h3>Bins visualization<\/h3>\nNormally, a histogram is used to visualize the distribution of bins we created above. ","7ae1dd55":"The plot above shows the binning result for attribute \"horsepower\". ","5a5a05a8":"<h4>Convert data types to proper format<\/h4>","00be2ac0":"get indicator variables and assign it to data frame \"dummy_variable_1\" ","fc197ae5":" <div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  #5: <\/h1>\n\n<b>Merge the new dataframe to the original dataframe then drop the column 'aspiration'<\/b>\n<\/div>","0ab8066d":"We build a bin array, with a minimum value to a maximum value, with bandwidth calculated above. The bins will be values used to determine when one bin ends and another begins.","da497b86":"Use the Pandas method <b>read_csv()<\/b> to load the data from the web address. Set the parameter  \"names\" equal to the Python list \"headers\".","3615f31e":"This dataset was hosted on IBM Cloud object click <a href=\"https:\/\/cocl.us\/corsera_da0101en_notebook_bottom\">HERE<\/a> for free storage ","70a08f2f":"<h2>Reading the data set from the URL and adding the related headers.<\/h2>","dc5134a7":"<b>Wonderful!<\/b>\n\nNow, we finally obtain the cleaned dataset with no missing values and all data in its proper format.","6de6b820":"<h4>Let us list the columns after the conversion<\/h4>","f552f336":"<h1>Data Wrangling<\/h1>","9d13a756":"<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  #1: <\/h1>\n\n<b>According to the example above, replace NaN in \"stroke\" column by mean.<\/b>\n<\/div>","1be94f40":"<h1>Thank you for completing this notebook<\/h1>","c3259e2a":"Lets see the number of vehicles in each bin.","d280edc2":"<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  #4: <\/h1>\n\n<b>As above, create indicator variable to the column of \"aspiration\": \"std\" to 0, while \"turbo\" to 1.<\/b>\n<\/div>","cbba078b":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\n# calculate the mean vaule for \"stroke\" column\navg_stroke = df[\"stroke\"].astype(\"float\").mean(axis = 0)\nprint(\"Average of stroke:\", avg_stroke)\n\n# replace NaN by mean value in \"stroke\" column\ndf[\"stroke\"].replace(np.nan, avg_stroke, inplace = True)\n\n-->\n","3de2a6af":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\n# get indicator variables of aspiration and assign it to data frame \"dummy_variable_2\"\ndummy_variable_2 = pd.get_dummies(df['aspiration'])\n\n# change column names for clarity\ndummy_variable_2.rename(columns={'std':'aspiration-std', 'turbo': 'aspiration-turbo'}, inplace=True)\n\n# show first 5 instances of data frame \"dummy_variable_1\"\ndummy_variable_2.head()\n\n-->","d77f440e":"<h4>Calculate the average of the column <\/h4>","2ae987c3":"<h4>Replace \"NaN\" by mean value in \"normalized-losses\" column<\/h4>","013b70e9":"Whole columns should be dropped only if most entries in the column are empty. In our dataset, none of the columns are empty enough to drop entirely.\nWe have some freedom in choosing which method to replace data; however, some methods may seem more reasonable than others. We will apply each method to many different columns:\n\n<b>Replace by mean:<\/b>\n<ul>\n    <li>\"normalized-losses\": 41 missing data, replace them with mean<\/li>\n    <li>\"stroke\": 4 missing data, replace them with mean<\/li>\n    <li>\"bore\": 4 missing data, replace them with mean<\/li>\n    <li>\"horsepower\": 2 missing data, replace them with mean<\/li>\n    <li>\"peak-rpm\": 2 missing data, replace them with mean<\/li>\n<\/ul>\n\n<b>Replace by frequency:<\/b>\n<ul>\n    <li>\"num-of-doors\": 2 missing data, replace them with \"four\". \n        <ul>\n            <li>Reason: 84% sedans is four doors. Since four doors is most frequent, it is most likely to occur<\/li>\n        <\/ul>\n    <\/li>\n<\/ul>\n\n<b>Drop the whole row:<\/b>\n<ul>\n    <li>\"price\": 4 missing data, simply delete the whole row\n        <ul>\n            <li>Reason: price is what we want to predict. Any data entry without price data cannot be used for prediction; therefore any row now without price data is not useful to us<\/li>\n        <\/ul>\n    <\/li>\n<\/ul>","aba6dd7a":"<h2 id=\"data_normalization\">Data Normalization<\/h2>\n\n<b>Why normalization?<\/b>\n<p>Normalization is the process of transforming values of several variables into a similar range. Typical normalizations include scaling the variable so the variable average is 0, scaling the variable so the variance is 1, or scaling variable so the variable values range from 0 to 1\n<\/p>\n\n<b>Example<\/b>\n<p>To demonstrate normalization, let's say we want to scale the columns \"length\", \"width\" and \"height\" <\/p>\n<p><b>Target:<\/b>would like to Normalize those variables so their value ranges from 0 to 1.<\/p>\n<p><b>Approach:<\/b> replace original value by (original value)\/(maximum value)<\/p>","37bd7085":"<b>Good!<\/b> Now, we obtain the dataset with no missing values.","a9b32e74":"We now have the value 0 to represent \"gas\" and 1 to represent \"diesel\" in the column \"fuel-type\". We will now insert this column back into our original dataset. ","38ec967a":"<h4>Replace NaN by mean value<\/h4>","b05bc0d9":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\n#merge the new dataframe to the original datafram\ndf = pd.concat([df, dummy_variable_2], axis=1)\n\n# drop original column \"aspiration\" from \"df\"\ndf.drop('aspiration', axis = 1, inplace=True)\n\n-->","42a2ce06":"Based on the summary above, each column has 205 rows of data, seven columns containing missing data:\n<ol>\n    <li>\"normalized-losses\": 41 missing data<\/li>\n    <li>\"num-of-doors\": 2 missing data<\/li>\n    <li>\"bore\": 4 missing data<\/li>\n    <li>\"stroke\" : 4 missing data<\/li>\n    <li>\"horsepower\": 2 missing data<\/li>\n    <li>\"peak-rpm\": 2 missing data<\/li>\n    <li>\"price\": 4 missing data<\/li>\n<\/ol>","42bb6ec1":"<h2 id=\"indicator\">Indicator variable (or dummy variable)<\/h2>\n<b>What is an indicator variable?<\/b>\n<p>\n    An indicator variable (or dummy variable) is a numerical variable used to label categories. They are called 'dummies' because the numbers themselves don't have inherent meaning. \n<\/p>\n\n<b>Why we use indicator variables?<\/b>\n<p>\n    So we can use categorical variables for regression analysis in the later modules.\n<\/p>\n<b>Example<\/b>\n<p>\n    We see the column \"fuel-type\" has two unique values, \"gas\" or \"diesel\". Regression doesn't understand words, only numbers. To use this attribute in regression analysis, we convert \"fuel-type\" into indicator variables.\n<\/p>\n\n<p>\n    We will use the panda's method 'get_dummies' to assign numerical values to different categories of fuel type. \n<\/p>","07c42176":"<p>\n    Check the dataframe above carefully, you will find the last column provides the bins for \"horsepower\" with 3 categories (\"Low\",\"Medium\" and \"High\"). \n<\/p>\n<p>\n    We successfully narrow the intervals from 57 to 3!\n<\/p>","3bab2682":"<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  #2: <\/h1>\n\n<b>According to the example above, transform mpg to L\/100km in the column of \"highway-mpg\", and change the name of column to \"highway-L\/100km\".<\/b>\n<\/div>","64190377":"<h4>Calculate the mean value for 'bore' column<\/h4>","8243cf0a":" We set group  names:","40138707":"As we can see, several question marks appeared in the dataframe; those are missing values which may hinder our further analysis. \n<div>So, how do we identify all those missing values and deal with them?<\/div> \n\n\n<b>How to work with missing data?<\/b>\n\nSteps for working with missing data:\n<ol>\n    <li>dentify missing data<\/li>\n    <li>deal with missing data<\/li>\n    <li>correct data format<\/li>\n<\/ol>","fb3c3562":"<h3 id=\"deal_missing_values\">Deal with missing data<\/h3>\n<b>How to deal with missing data?<\/b>\n\n<ol>\n    <li>drop data<br>\n        a. drop the whole row<br>\n        b. drop the whole column\n    <\/li>\n    <li>replace data<br>\n        a. replace it by mean<br>\n        b. replace it by frequency<br>\n        c. replace it based on other functions\n    <\/li>\n<\/ol>","89493cb8":"<h3>Import data<\/h3>\n<p>\nYou can find the \"Automobile Data Set\" from the following link: <a href=\"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/autos\/imports-85.data\">https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/autos\/imports-85.data<\/a>. \nWe will be using this data set throughout this course.\n<\/p>","a94293cb":"save the new csv ","e4c63303":"To see which values are present in a particular column, we can use the \".value_counts()\" method:","3b96c2ef":"URL of the dataset","b29befa9":"Here we can see, we've normalized \"length\", \"width\" and \"height\" in the range of [0,1].","5de8d62d":"Lets plot the histogram of horspower, to see what the distribution of horsepower looks like.","b3581c42":"<h4>Lets list the data types for each column<\/h4>","41cf499c":"<p>We would like 3 bins of equal size bandwidth so we use numpy's <code>linspace(start_value, end_value, numbers_generated<\/code> function.<\/p>\n<p>Since we want to include the minimum value of horsepower we want to set start_value=min(df[\"horsepower\"]).<\/p>\n<p>Since we want to include the maximum value of horsepower we want to set end_value=max(df[\"horsepower\"]).<\/p>\n<p>Since we are building 3 bins of equal length, there should be 4 dividers, so numbers_generated=4.<\/p>","55ac2ef0":"We can see that four doors are the most common type. We can also use the \".idxmax()\" method to calculate for us the most common type automatically:","2340aaa6":" Python list <b>headers<\/b> containing name of headers ","e940aa5b":"<h4>Import pandas<\/h4> ","ee9a1036":"<p>The formula for unit conversion is<p>\nL\/100km = 235 \/ mpg\n<p>We can do many mathematical operations directly in Pandas.<\/p>","c520de2c":"change column names for clarity ","d1e1ac1a":"<h2 id=\"identify_handle_missing_values\">Identify and handle missing values<\/h2>\n\n\n<h3 id=\"identify_missing_values\">Identify missing values<\/h3>\n<h4>Convert \"?\" to NaN<\/h4>\nIn the car dataset, missing data comes with the question mark \"?\".\nWe replace \"?\" with NaN (Not a Number), which is Python's default missing value marker, for reasons of computational speed and convenience. Here we use the function: \n <pre>.replace(A, B, inplace = True) <\/pre>\nto replace A by B","c4c34371":" Use the method <b>head()<\/b> to display the first five rows of the dataframe. ","5c75ea6e":"<h4>Calculate the mean value for 'peak-rpm' column:<\/h4>","1158aec3":"<h2 id=\"data_standardization\">Data Standardization<\/h2>\n<p>\nData is usually collected from different agencies with different formats.\n(Data Standardization is also a term for a particular type of data normalization, where we subtract the mean and divide by the standard deviation)\n<\/p>\n    \n<b>What is Standardization?<\/b>\n<p>Standardization is the process of transforming data into a common format which allows the researcher to make the meaningful comparison.\n<\/p>\n\n<b>Example<\/b>\n<p>Transform mpg to L\/100km:<\/p>\n<p>In our dataset, the fuel consumption columns \"city-mpg\" and \"highway-mpg\" are represented by mpg (miles per gallon) unit. Assume we are developing an application in a country that accept the fuel consumption with L\/100km standard<\/p>\n<p>We will need to apply <b>data transformation<\/b> to transform mpg into L\/100km?<\/p>\n","2e75c8fc":" Convert data to correct format ","5a056d17":"<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Questiont #3: <\/h1>\n\n<b>According to the example above, normalize the column \"height\".<\/b>\n<\/div>","737609a7":"dentify_missing_values\n\n<h4>Evaluating for Missing Data<\/h4>\n\nThe missing values are converted to Python's default. We use Python's built-in functions to identify these missing values. There are two methods to detect missing data:\n<ol>\n    <li><b>.isnull()<\/b><\/li>\n    <li><b>.notnull()<\/b><\/li>\n<\/ol>\nThe output is a boolean value indicating whether the value that is passed into the argument is in fact missing data.","e3d9e044":"<h4>Replace \"NaN\" by mean value:<\/h4>","8d78fa5f":"<h2>Table of content<\/h2>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n<ul>\n    <li><a href=\"#identify_handle_missing_values\">Identify and handle missing values<\/a>\n        <ul>\n            <li><a href=\"#identify_missing_values\">Identify missing values<\/a><\/li>\n            <li><a href=\"#deal_missing_values\">Deal with missing values<\/a><\/li>\n            <li><a href=\"#correct_data_format\">Correct data format<\/a><\/li>\n        <\/ul>\n    <\/li>\n    <li><a href=\"#data_standardization\">Data standardization<\/a><\/li>\n    <li><a href=\"#data_normalization\">Data Normalization (centering\/scaling)<\/a><\/li>\n    <li><a href=\"#binning\">Binning<\/a><\/li>\n    <li><a href=\"#indicator\">Indicator variable<\/a><\/li>\n<\/ul>\n    \nEstimated Time Needed: <strong>30 min<\/strong>\n<\/div>\n \n<hr>","4164860e":"<h3>Example of Binning Data In Pandas<\/h3>","a5ad6fa8":"<h3>What is the fuel consumption (L\/100k) rate for the diesel car?<\/h3>","a6ee99f2":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\n# transform mpg to L\/100km by mathematical operation (235 divided by mpg)\ndf[\"highway-mpg\"] = 235\/df[\"highway-mpg\"]\n\n# rename column name from \"highway-mpg\" to \"highway-L\/100km\"\ndf.rename(columns={'\"highway-mpg\"':'highway-L\/100km'}, inplace=True)\n\n# check your transformed data \ndf.head()\n\n-->\n","b5d2b341":"<h3 id=\"correct_data_format\">Correct data format<\/h3>\n<b>We are almost there!<\/b>\n<p>The last step in data cleaning is checking and making sure that all data is in the correct format (int, float, text or other).<\/p>\n\nIn Pandas, we use \n<p><b>.dtype()<\/b> to check the data type<\/p>\n<p><b>.astype()<\/b> to change the data type<\/p>","2a0a0c7c":"<h4>Count missing values in each column<\/h4>\n<p>\nUsing a for loop in Python, we can quickly figure out the number of missing values in each column. As mentioned above, \"True\" represents a missing value, \"False\"  means the value is present in the dataset.  In the body of the for loop the method  \".value_counts()\"  counts the number of \"True\" values. \n<\/p>","3b091f6e":"Double-click <b>here<\/b> for the solution.\n\n<!-- The answer is below:\n\ndf['height'] = df['height']\/df['height'].max() \n# show the scaled columns\ndf[[\"length\",\"width\",\"height\"]].head()\n\n-->","d3df7d74":"Lets plot the distribution of each bin.","c3d529ff":"<h2 id=\"binning\">Binning<\/h2>\n<b>Why binning?<\/b>\n<p>\n    Binning is a process of transforming continuous numerical variables into discrete categorical 'bins', for grouped analysis.\n<\/p>\n\n<b>Example: <\/b>\n<p>In our dataset, \"horsepower\" is a real valued variable ranging from 48 to 288, it has 57 unique values. What if we only care about the price difference between cars with high horsepower, medium horsepower, and little horsepower (3 types)? Can we rearrange them into three \u2018bins' to simplify analysis? <\/p>\n\n<p>We will use the Pandas method 'cut' to segment the 'horsepower' column into 3 bins <\/p>\n\n","f4ffc210":"\"True\" stands for missing value, while \"False\" stands for not missing value.","f3ab4696":"Data Wrangling is the process of converting data from the initial format to a format that may be better for analysis.","011d9841":"The last two columns are now the indicator variable representation of the fuel-type variable. It's all 0s and 1s now.","07c4ca61":"<p>As we can see above, some columns are not of the correct data type. Numerical variables should have type 'float' or 'int', and variables with strings such as categories should have type 'object'. For example, 'bore' and 'stroke' variables are numerical values that describe the engines, so we should expect them to be of the type 'float' or 'int'; however, they are shown as type 'object'. We have to convert data types into a proper format for each column using the \"astype()\" method.<\/p> ","87cba5de":"<h4>Calculate the mean value for the  'horsepower' column:<\/h4>","d8f4c051":"The replacement procedure is very similar to what we have seen previously"}}