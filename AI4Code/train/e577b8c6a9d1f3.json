{"cell_type":{"627aaec5":"code","98a748ba":"code","6177555e":"code","e959e113":"code","fec2b4e1":"code","91eca431":"code","fd3a8dd5":"code","8a4a04b9":"code","c64f07c4":"code","a8066427":"code","be10372a":"code","b53b388f":"code","a76c3ca4":"code","18ea3311":"code","f517dea8":"code","5b32600e":"code","63ebc1a7":"code","9bd807a3":"code","27d684d7":"code","7d42b194":"code","2894c105":"code","14eee3bb":"code","1f0bc159":"code","fc18c770":"code","b9ff299e":"code","a5eb0732":"code","26d4f894":"code","f3c64dbd":"code","7fd0ea49":"code","eef2e97a":"markdown","59be4f1e":"markdown","a552eaea":"markdown","f13172a2":"markdown","e6252b9c":"markdown","19135f9e":"markdown","3ba356ae":"markdown","e8437882":"markdown","110005ff":"markdown","dfce73d7":"markdown","11f6fc48":"markdown","8eaa0b2b":"markdown","060c93ec":"markdown","f0f6452a":"markdown","78392a1c":"markdown","07227229":"markdown","0d6e9223":"markdown"},"source":{"627aaec5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98a748ba":"train = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows=1_00_000)\ntest = pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv')","6177555e":"train[\"DateTime\"] = pd.to_datetime(train['pickup_datetime'], unit='ns')\n","e959e113":"train['key'] = pd.to_datetime(train['key'], unit='ns')\ntrain.info()","fec2b4e1":"test[\"DateTime\"] = pd.to_datetime(test['pickup_datetime'], unit='ns')\n","91eca431":"test[\"key\"] = pd.to_datetime(test['key'], unit='ns')\ntest","fd3a8dd5":"train.dropna(inplace=True)\ntest.dropna(inplace = True)","8a4a04b9":"train.shape","c64f07c4":"# train = train.drop(['key','pickup_datetime'], axis = 1)\ntrain = train.drop(['pickup_datetime'], axis = 1)\ntrain.head()","a8066427":"# test = test.drop(['key','pickup_datetime'], axis = 1)\ntest = test.drop(['pickup_datetime'], axis = 1)\ntest.head()","be10372a":"y = train.iloc[0:,[0,1]]\nx = train.iloc[0:,[2,3,4,5,6,7]]","b53b388f":"R = 6373.0\nlat1 =np.asarray(np.radians(x['pickup_latitude']))\nlon1 = np.asarray(np.radians(x['pickup_longitude']))\nlat2 = np.asarray(np.radians(x['dropoff_latitude']))\nlon2 = np.asarray(np.radians(x['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\nls1=[] \na = np.sin(dlat\/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\n\n    \nx['Distance']=np.asarray(distance)*0.621\n\n# x_clean = x.drop([ 'pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis = 1)\n# x_clean.head()\nx.head()","a76c3ca4":"R = 6373.0\nlat1 =np.asarray(np.radians(train['pickup_latitude']))\nlon1 = np.asarray(np.radians(train['pickup_longitude']))\nlat2 = np.asarray(np.radians(train['dropoff_latitude']))\nlon2 = np.asarray(np.radians(train['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\nls1=[] \na = np.sin(dlat\/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\n\n    \ntrain['Distance']=np.asarray(distance)*0.621\n\n# x_clean = x.drop([ 'pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis = 1)\n# x_clean.head()\ntrain.head()\n","18ea3311":"R = 6373.0\nlat11 =np.asarray(np.radians(test['pickup_latitude']))\nlon11 = np.asarray(np.radians(test['pickup_longitude']))\nlat22 = np.asarray(np.radians(test['dropoff_latitude']))\nlon22 = np.asarray(np.radians(test['dropoff_longitude']))\n\ndlon1 = lon22 - lon11\ndlat1 = lat22 - lat11\nls1=[] \na1 = np.sin(dlat1\/2)**2 + np.cos(lat11) * np.cos(lat22) * np.sin(dlon1\/ 2)**2\nc1 = 2 * np.arctan2(np.sqrt(a1), np.sqrt(1 - a1))\ndistance1 = R * c1\n\n    \ntest['Distance']=np.asarray(distance1)*0.621\n# test_clean = test.drop([ 'pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis = 1)\n\n# test_clean.dtypes\n\ntest.head()","f517dea8":"x.dtypes","5b32600e":"y.dtypes","63ebc1a7":"print(x.head(),y.head(),test.head(),train.head())","9bd807a3":"import matplotlib as plt\nfrom sklearn import datasets,linear_model","27d684d7":"a = x.iloc[0:200,6]\nb = y.iloc[0:200,1]\n","7d42b194":"import matplotlib.pyplot as plt\n\n\nplt.scatter(b,a)\nplt.show()\n\n","2894c105":"train['DateTime'] = pd.to_numeric(pd.to_datetime(train['DateTime']))\ntrain['key'] = pd.to_numeric(pd.to_datetime(train['key']))\ntest['DateTime'] = pd.to_numeric(pd.to_datetime(test['DateTime']))\ntest['key'] = pd.to_numeric(pd.to_datetime(test['key']))\ny['key'] = pd.to_numeric(pd.to_datetime(y['key']))\n\nx['DateTime'] = pd.to_numeric(pd.to_datetime(x['DateTime']))","14eee3bb":"y = y.iloc[:,1]","1f0bc159":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)","fc18c770":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression(normalize=True)\nlr.fit(x_train,y_train)\ny_predicted = lr.predict(x_test)\nprint(lr.score(x_test,y_test))\n# 1st test  = -0.013287637014155473","b9ff299e":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test,y_predicted)\n# # 1st test  = 112.004853684073\n## with 100000 dataset = 94.0358896381812\n## with 1000000 dataset try 1 = 95.36892390730144\n## with 1000000 dataset try 2 = 95.36026307535313\n## with 1000000 dataset try 3 = 96.83297952994907\n## with 100000 dataset  = 93.37144467436306\n## with 10000 dataset try1 = 96.03901121564002\n## with 10000 dataset try2 = 81.26929962886342\n## with 10000 dataset try3 = 98.48885378200688\n## with 10000 dataset try4 = 104.36002792791918\n## with 10000 dataset try5 = 97.20492555017101\n## with 10000 dataset try6 = 83.93965348592229\n## with 10000 dataset try7 = 75.27941712945345\n## with 10000 dataset try8  = 78.95396330172005\n## with 1000 dataset   =   39.90092494230721\n## with 1000 dataset   =   76.44837215099844\n## with 1000 dataset   =   38.46728504333877\n## with 1000 dataset   =   93.07429700649337\n## with 1000 dataset   =   48.39973592705823\n## with 1000 dataset   =   1055865.4214096582\n## with 1000 dataset   =   85.46861840805632\n## with 1000 dataset   =   64.39358773994795\n## with 100 dataset    =   12.34566678724564\n## with 100 dataset    =   10.142841154191558 \n## with 100 dataset    =   5.786482441190635\n## with 100 dataset    =   30.963445495727807\n## with 100 dataset    =   14.648523611686821\n","a5eb0732":"pred=np.round(lr.predict(test.drop('key',axis=1)),2)\npred.shape","26d4f894":"pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv').head()","f3c64dbd":"\nSubmission=pd.DataFrame(data=pred,columns=['fare_amount'])\nSubmission['key']=test['key']\nSubmission=Submission[['key','fare_amount']]\nSubmission.to_csv('nyc_taxi_fare_predictin.csv', index=False)","7fd0ea49":"Submission.set_index('key',inplace=True)","eef2e97a":"## Converting datetime to float()","59be4f1e":"## Traning the model","a552eaea":"## Splitting the values","f13172a2":"## Submission Starts","e6252b9c":"### Plotting graph of cost vs distance","19135f9e":"#### dropping null values","3ba356ae":"## Converting daytime object to datetime format","e8437882":"## Training Starts\n","110005ff":"#### Adding distance to Train","dfce73d7":"#### Testing the accuracy","11f6fc48":"#### Adding distance to x","8eaa0b2b":"### It was just hard to do this I mean converting time like this","060c93ec":"#### Defining y for the prediction","f0f6452a":"#### Reading the submission file for some insight","78392a1c":"### File Submitted","07227229":"## Defining the labels and features","0d6e9223":"#### Adding distance to test"}}