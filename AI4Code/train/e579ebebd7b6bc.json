{"cell_type":{"860ea44e":"code","4890dfea":"code","b59030d6":"code","5936fec2":"code","be04310b":"code","d7c3ff27":"code","e0e1c3e6":"code","71a3e805":"code","8db09546":"code","28949816":"code","479143ff":"code","035b4892":"code","73f9cf7f":"code","38d245c7":"code","62cf4a62":"code","6decd5fe":"code","10443d0a":"code","e11dee0f":"code","5e136ed4":"code","473f5d0e":"code","80db113b":"code","d8fce077":"code","2ed48182":"code","1f98ca0a":"code","b5b6b255":"code","6c20139d":"code","ed41718f":"code","8cc0e97a":"code","662a461b":"code","2c9b5428":"code","1b547968":"code","e38bd877":"code","2567c08f":"code","64de72b7":"code","9f8051d6":"code","841d5e84":"code","cf5fb827":"code","d3a5af29":"code","f79e9471":"markdown","f85ffff8":"markdown","a062878e":"markdown","f9adaa1e":"markdown","a70f53d9":"markdown","f71bd5fa":"markdown","a98447b0":"markdown","324eb940":"markdown","c58edbd8":"markdown","dc172a81":"markdown","fae220ea":"markdown","9865e45e":"markdown","9a95c19b":"markdown","cdb5caa5":"markdown","8e2f2c07":"markdown","18e65a21":"markdown","8dc42b9c":"markdown"},"source":{"860ea44e":"# import seaborn and matplotlib - data visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \n# import pandas - data processing\nimport pandas as pd \nimport os\n","4890dfea":"# to read\/write Excel 2010 xlsx\/xlsm\/xltx\/xltm files.\n!pip install openpyxl","b59030d6":"# read the data from excel file\ndata = pd.read_excel(\"\/kaggle\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx\")","5936fec2":"# first look at the data\ndata.head()","be04310b":"# 231 features\/columns and 1925 rows\nprint(data.shape)\n\nprint(\"This dataset has \", data.shape[0], \" rows and \", data.shape[1], \" columns.\")","d7c3ff27":"# utility function to print columns with number of NA values it has\ndef print_na(df):\n    for i in range(df.isna().sum().shape[0]):\n        f = df.isna().sum().index[i]\n        v = df.isna().sum()[i]\n        print(f, \" : \", v)","e0e1c3e6":"# Null \/ NA values in our dataset\nprint_na(data)","71a3e805":"# check for duplicate columns i.e columns having all values exactly equal\nduplicated = data.T.duplicated()\ncount = 0\n\n# The first instance of a column is marked as 'False', when the value is seen to be repeated in other \n# column(s) it is marked as 'True'\nfor i in range(len(duplicated)):\n    if duplicated[i] == True:\n        print(duplicated.index[i], \":\", duplicated[i])\n        count += 1\n        \n# 143 duplicate columns\nprint(\"total duplicate columns = \", count)","8db09546":"# Eliminate duplicate columns - it drops the columns marked as 'True' from the previous step\n# In this way we still retain one copy of the values for analysis (the one that is marked as 'False')\ndata = data.T.drop_duplicates().T","28949816":"# check the shape here : 231 - 143 = 88\ndata.shape","479143ff":"def generate_icu_feature(p_id):\n    df = data[data['PATIENT_VISIT_IDENTIFIER']==p_id]\n    icu_track = df['ICU']\n    icu = False\n    for t in icu_track:\n        icu = icu or t\n    return icu\n\ndata['ICU'] = data.apply(lambda x : generate_icu_feature(x['PATIENT_VISIT_IDENTIFIER']), axis = 1)","035b4892":"# all unique ids\npatient_id = data['PATIENT_VISIT_IDENTIFIER'].unique()\n\n#\nNA_filled_first_window = []\n\n# Iterate for each unique patient id\nfor p_id in patient_id:\n    # create a temporary dataframe to hold details for each patient\n    temp = data[ data['PATIENT_VISIT_IDENTIFIER'] == p_id ]\n    # Fill missing data with mean of values\n    temp.fillna(temp.mean(),inplace=True)\n    # using dataframe.iloc[[0]] => returns a dataframe\n    # using dataframe.iloc[0] => returns a series\n    NA_filled_first_window.append(temp.iloc[[0]])\n    \n# Concatenate dataframes from NA_filled_first_window to assemble the final dataframe\nfinal_data = pd.concat(NA_filled_first_window)\n   ","73f9cf7f":"# check for any remaining NA\nprint_na(final_data)","38d245c7":"# Find the one with nan value\nfinal_data[ final_data['DISEASE GROUPING 1'].isna() ]","62cf4a62":"# the patient with ID = 199 has all values as NaN, hence drop this patient details\nfinal_data = final_data[ final_data['PATIENT_VISIT_IDENTIFIER'] != 199 ]","6decd5fe":"# We still have one more row with more NaN values, Find the one with nan value for 'ALBUMIN_MEDIAN'\nfinal_data[ final_data['ALBUMIN_MEDIAN'].isna() ]","10443d0a":"# drop the patient with Id = 287\nfinal_data = final_data[ final_data['PATIENT_VISIT_IDENTIFIER'] != 287 ]\n\n# Run the cell that displays NA values => now we don't have any NA values and we can start with data visualization now","e11dee0f":"final_data.drop(columns = 'WINDOW',inplace=True)","5e136ed4":"col = final_data.columns[final_data.nunique() <= 1].tolist()\n\nprint(col)\n\nfinal_data.drop(columns = col, inplace=True)","473f5d0e":"pd.set_option('display.max_rows', len(final_data.dtypes))\n# get the datatypes of all the columns\nfinal_data.dtypes","80db113b":"# AGE_ABOVE65\nax = sns.countplot(x=\"AGE_ABOVE65\", hue=\"ICU\", data=final_data)\n\n## People with age above 65 have a higher chance of needing an ICU","d8fce077":"# GENDER\nax = sns.countplot(x=\"GENDER\", hue=\"ICU\", data=final_data)\n\n## Gender 0 is at a slightly higher risk if considered standalone\n## Although there may be other factors influencing the high icu count for it","2ed48182":"# create a temporary dataframe\nicu_count = [final_data[ final_data['ICU']==0 ].shape[0],  final_data[ final_data['ICU']==1 ].shape[0] ]\n\ngender_count = [ final_data[ (final_data['ICU']==0) & (final_data['GENDER']==0)].shape[0], \n                final_data[ (final_data['ICU']==1) & (final_data['GENDER']==0)].shape[0] ]\n\nabove65_count = [final_data[ (final_data['ICU']==0) & (final_data['AGE_ABOVE65']==1) ].shape[0],  \n                 final_data[ (final_data['ICU']==1) & (final_data['AGE_ABOVE65']==1) ].shape[0] ]\n\nplot_df = pd.DataFrame(list(zip(icu_count, gender_count, above65_count)), columns =['icu_count', 'gender_count','above65_count']) \n\nplot_df","1f98ca0a":"sns.set_color_codes(\"pastel\")\nfig = plt.subplots(figsize=(8,10))\n\nax = sns.barplot(x=\"icu_count\", y=\"icu_count\", data=plot_df, label=\"total\", orient='h', color=\"lightgray\")\n\nsns.barplot(x=\"gender_count\", y=\"icu_count\", data=plot_df, label=\"gender\", orient='h', color=\"b\")\n\nsns.barplot(x=\"above65_count\", y=\"icu_count\", data=plot_df, label=\"above 65\" , orient='h', color=\"r\")\n\nax.set(ylabel=\"ICU COUNT\",xlabel=\"Total in ICU or not\")\nplt.legend()\n\n# 189 is the count of patients NOT admitted in the ICU\n# 194 is the count of patients admitted in the ICU","b5b6b255":"disease_grp = ['DISEASE GROUPING 1','DISEASE GROUPING 2','DISEASE GROUPING 3',\n               'DISEASE GROUPING 4', 'DISEASE GROUPING 5', 'DISEASE GROUPING 6']\n\nfig, axes = plt.subplots(ncols=2,nrows=3,figsize=(15,10))\n\ncol = 0\n\nfor i in range(len(disease_grp)):\n    sns.countplot(x=disease_grp[i], hue=\"ICU\", data=final_data, ax = axes[int((i)\/2)][col])\n    col = (col+1) % 2\n               ","6c20139d":"sns.countplot(x=\"HTN\", hue=\"ICU\", data=final_data)\n\n## For hypertension - people with hypertension have a slightly higher chance of needing the ICU \n## However, it cannot be claimed with certainity as there is high imbalance","ed41718f":"sns.countplot(x=\"IMMUNOCOMPROMISED\", hue=\"ICU\", data=final_data)\n\n## Immunocompromised or non-immunocompromised does not make a significant difference, the distribution \n## looks similar for both, we cannot make any claims as the people with some immunocompromised conditions\n## are fewer than ones with such condition.","8cc0e97a":"sns.countplot(x=\"OTHER\", hue=\"ICU\", data=final_data)","662a461b":"vital_signs = final_data.columns[13:]\nvital_signs_df = final_data[vital_signs]","2c9b5428":"f,ax = plt.subplots(figsize=(23,23))\nsns.heatmap(vital_signs_df.drop(columns=['ICU']).corr())\nplt.show()","1b547968":"rows_list = []\nfor f in vital_signs:\n    v1 = vital_signs_df[ vital_signs_df['ICU']==1 ][f].var()\n    v0 = vital_signs_df[ vital_signs_df['ICU']==0 ][f].var()\n    dict1 = {\n        'feature' : f,\n        'icu' : v1,\n        'non-icu' : v0\n    }\n    rows_list.append(dict1)\n    \nvar_vital_signs = pd.DataFrame(rows_list) ","e38bd877":"var_vital_signs","2567c08f":"fig = plt.subplots(figsize=(20,8))\nax = sns.lineplot(data=var_vital_signs, x=\"feature\", y=\"icu\", color='r')\nsns.lineplot(data=var_vital_signs, x=\"feature\", y=\"non-icu\", color='g')\nplt.xticks(rotation=90)\nplt.show()\n\n## We can clearly see that the variance of vital signs for patients admitted in the icu varies drastically compared to that of the ones\n## not admitted to the ICU","64de72b7":"sns.kdeplot(final_data[ final_data['ICU']==1 ]['GGT_MEDIAN'],color = \"red\")\nsns.kdeplot(final_data[ final_data['ICU']==0 ]['GGT_MEDIAN'],color = \"green\")\n\n## From the kde plot we can see the spread (variance) of the red plot (ICU) is more than the green one. ","9f8051d6":"# Check age percentile balance\nsns.countplot(x=\"AGE_PERCENTIL\", hue=\"ICU\", data=final_data)","841d5e84":"# Convert string percentile values to integers inorder to use this data for fitting a ML algorithm\ndef get_percentile(percentile_string):\n    if (percentile_string =='Above 90th'):\n        return 95\n    else:\n        return int(percentile_string[:-2])\n    \nfinal_data['AGE_PERCENTIL'] = final_data['AGE_PERCENTIL'].apply(lambda x : get_percentile(x))","cf5fb827":"sns.countplot(x=\"ICU\", data=final_data)\n\n## We have a balanced dataset, because the number of entries\/rows\/patients admitted to ICU and the number of entries not admitte to ICU \n## is almost equal.\n## Thus no imbalance exists for the target variable.","d3a5af29":"# Add 'index=False' to avoid the additional col 'Unnamed:0' which is added as an index while exporting the dataframe to csv\nfinal_data.to_csv('Covid_ICU_preprocessed.csv', index=False)","f79e9471":"### HTN - Hypertension                                \n","f85ffff8":"## Analysis for other vital signs","a062878e":"### Age percentile attribute","f9adaa1e":"### If the patient was ever admitted to the ICU in any of the windows, make the first window i.e 0-2 as True","a70f53d9":"### Exporting the preprocessed data for ML model training.","f71bd5fa":"### Exploring Disease groupings","a98447b0":"<center><h1>PREPROCESSING<\/h1><\/center>","324eb940":"## Target variable balance","c58edbd8":"### Visualize all the 3 features in a single plot","dc172a81":"### For example - ALBUMIN_MEDIAN","fae220ea":"### OTHER","9865e45e":"### Drop window column since it adds no value","9a95c19b":"<center><h1>DATA VISUALIZATION<h1><\/center> \n    \nHenceforth we will be working with the dataframe 'final_data'","cdb5caa5":"### IMMUNOCOMPROMISED                   ","8e2f2c07":"<center><h1> Data Visualization and Exploratory Data Analysis for <i>'COVID-19 - Clinical Data to assess diagnosis'<\/i> Data <\/h1><\/center>\n\n<br>\n<br>\n\n<img src=\"https:\/\/media.giphy.com\/media\/SgoRoQa9jO83C\/giphy.gif\">\n\n<br>\n<br>\n\n\n*Please feel free to reach out regarding any questions, comments or concerns.* \n*Open for discussions and corrections too.*\n\n**Note** : '##' indicates insights derived from the plot or analysis and '#' indicates general comments.\n\n","18e65a21":"### Create new dataframe 'final_data' after finlling NA values of a patient with mean of his other values.  ","8dc42b9c":"### Drop columns with constant value (same value for all rows)"}}