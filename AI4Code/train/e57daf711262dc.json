{"cell_type":{"6f8b7162":"code","ca2f156d":"code","c522a2ba":"code","26d2447d":"code","a9de2171":"code","fa96453e":"code","c862e25b":"code","b3f2ecb1":"code","49e6b5d4":"code","f2499001":"code","e5a45327":"code","393cd404":"markdown","f7e9737c":"markdown","390f9b12":"markdown"},"source":{"6f8b7162":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport cv2\nimport random\n%matplotlib inline","ca2f156d":"base_path = '..\/input\/mechanic-component-images-normal-defected'","c522a2ba":"print(f\"There are {len(os.listdir(base_path))} type of dataset\")","26d2447d":"data_set = []\namount_of_each = []\nfor folder in os.listdir(base_path):\n    data_set.append(folder)\n    amount_of_each.append(len(os.listdir(os.path.join(base_path,folder))))\n    \nplt.figure(figsize=(9,6))\nsns.set_style('darkgrid')\nsns.barplot(x = data_set,y = amount_of_each)","a9de2171":"fig,ax = plt.subplots(3,3,figsize=(9,8))\nfor i in range(3):\n    file_name = random.choice(os.listdir(os.path.join(base_path,data_set[i])))\n    folder = os.path.join(base_path,data_set[i])\n    for j in range(3):\n        img = cv2.imread(os.path.join(folder,file_name))\n        ax[i,j].imshow(img)","fa96453e":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense,Flatten,Dropout\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16,ResNet50,EfficientNetB6\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\nimport tensorflow as tf\ntf.config.list_physical_devices('GPU') ","c862e25b":"resnet = ResNet50(include_top=False,input_shape=(80,80,3))\nfor layer in resnet.layers:\n    layer.trainable = False\nflat = Flatten()((resnet.layers[-1].output))\ndense1 = Dense(1024,activation='relu')(flat)\ndense2 = Dense(512,activation='relu')(dense1)\ndrop = Dropout(0.2)(dense2)\nmodel_output = Dense(3,activation = 'softmax')(drop)\nmodel = Model(resnet.input,model_output)\n# model.summary()","b3f2ecb1":"callback = ModelCheckpoint('.\/checkpoint.ckt',save_weights_only=True,\n    monitor='val_accuracy',\n    mode='max',\n    save_best_only=True)\nearlystop = EarlyStopping(monitor='val_accuracy',patience=15,mode='max',restore_best_weights=True)\nmodel.compile(optimizer=RMSprop(learning_rate=0.001),loss = 'categorical_crossentropy',metrics=['accuracy'])","49e6b5d4":"data_gen = ImageDataGenerator(brightness_range=[1.5,2.5],\n                              rotation_range = 0.6,validation_split=0.3)","f2499001":"train_data = data_gen.flow_from_directory(base_path,target_size=(80,80),subset='training')\nvalid_data = data_gen.flow_from_directory(base_path,target_size=(80,80),subset='validation')","e5a45327":"history= model.fit(train_data,epochs=8,validation_data=valid_data,callbacks=[callback])","393cd404":"### Checking for each dataset. How many each image data belong with?","f7e9737c":"## Create model by using Resnet pretrained model","390f9b12":"## Visualize each type of dataset"}}