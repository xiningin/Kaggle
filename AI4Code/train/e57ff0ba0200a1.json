{"cell_type":{"8cbecd7b":"code","65b2e73f":"code","280d5c3d":"code","22c75124":"code","bd640e0c":"code","e47226e8":"code","19c62749":"code","3b111d47":"code","f3ef4232":"code","bfcfc176":"code","d1bbad45":"code","78398146":"code","0190063c":"code","3f33c351":"code","776c459c":"code","1797b3d4":"code","060be44b":"code","aeb5f714":"code","42df29ea":"code","8d2a9e63":"code","516ec242":"code","b2aa1d07":"code","3669c099":"code","80e03c21":"code","f3cbbcde":"code","2fef70ee":"code","8f3544d6":"code","8d99f2d4":"code","8a31a159":"code","a6f462a0":"code","ba891646":"code","a6245118":"code","65b0f720":"code","4b218ada":"code","f857bc3e":"code","fad44a69":"code","326c13f1":"code","2d5b499a":"code","2c6e6b4b":"code","4785da53":"code","16d5e38e":"code","a97b6f5e":"code","9c3c797d":"code","c0f7fdaf":"code","67e406c3":"code","60220a3f":"code","850121b2":"code","85424b99":"code","6e941925":"code","a77a8b34":"code","92cdeddf":"code","2e007e2f":"markdown","a5cfd506":"markdown","bd89888d":"markdown","3794f082":"markdown","a1b6c80e":"markdown","5ede0c1e":"markdown","9f6be61f":"markdown","fcb4b316":"markdown","e46490af":"markdown","29a9f633":"markdown","8d3e384d":"markdown","13d83435":"markdown","f7ad30ec":"markdown","825384ae":"markdown","60be826b":"markdown"},"source":{"8cbecd7b":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport scikitplot as skplt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, classification_report\n\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.naive_bayes import GaussianNB\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","65b2e73f":"data = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/train.csv',index_col=0)\nprint('Data Size: ', data.shape,'\\n')\n\ndata.head()","280d5c3d":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\ndata.describe()","22c75124":"print(data.target.unique())\ndata.target.value_counts(normalize=True)","bd640e0c":"data.isna().sum().sum()","e47226e8":"corrmat = data.corr()  \n  \nf, ax = plt.subplots(figsize =(20, 20)) \nsns.heatmap(corrmat, ax = ax, cmap =\"YlGnBu\", linewidths =0.5)","19c62749":"((corrmat>=0.5).sum() !=1 ).sum()","3b111d47":"train, test = train_test_split(data, test_size = 0.2,\n                        stratify = data['target'])\n\ntrain.shape, test.shape","f3ef4232":"train.target.value_counts(normalize=True)","bfcfc176":"test.target.value_counts(normalize=True)","d1bbad45":"X_train = train.drop(columns=['target'])\ny_train = train.target\n\nX_test = test.drop(columns=['target'])\ny_test = test.target\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","78398146":"scaler = StandardScaler() #MaxAbsScaler() # MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","0190063c":"model1 = LogisticRegressionCV(cv = 5,\n                            solver='lbfgs', \n                            class_weight='balanced', \n                            n_jobs=4, \n                            random_state=77)\nmodel1.fit(X_train_scaled,y_train)","3f33c351":"print(pd.DataFrame(confusion_matrix(y_train, model1.predict(X_train_scaled), labels=model1.classes_)))","776c459c":"print(classification_report(y_train, model1.predict(X_train_scaled), labels=model1.classes_))","1797b3d4":"X_train_prob = model1.predict_proba(X_train_scaled)\nX_train_prob = pd.DataFrame(X_train_prob)\nX_train_prob.head()","060be44b":"print(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')","aeb5f714":"print(pd.DataFrame(confusion_matrix(y_test, model1.predict(X_test_scaled), labels=model1.classes_)))","42df29ea":"print(classification_report(y_test, model1.predict(X_test_scaled), labels=model1.classes_))","8d2a9e63":"X_test_prob = model1.predict_proba(X_test_scaled)\nX_test_prob = pd.DataFrame(X_test_prob)\nX_test_prob.head()","516ec242":"print(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","b2aa1d07":"pca = PCA(random_state=77)\npca.fit(X_train_scaled)\nskplt.decomposition.plot_pca_2d_projection(pca, X_train_scaled, y_train) \nplt.show()\n","3669c099":"pca = PCA(n_components = 180)\nX_train_pca = pca.fit_transform(X_train_scaled)\nX_test_pca = pca.transform(X_test_scaled)","80e03c21":"pd.DataFrame(X_train_pca).head()","f3cbbcde":"model2 = LogisticRegressionCV(cv = 5,\n                              solver='lbfgs', \n                              class_weight='balanced', \n                              n_jobs=4, \n                              random_state=77)\nmodel2.fit(X_train_pca, y_train)","2fef70ee":"print(pd.DataFrame(confusion_matrix(y_train, model2.predict(X_train_pca), labels=model2.classes_)))","8f3544d6":"print(classification_report(y_train, model2.predict(X_train_pca), labels=model2.classes_))","8d99f2d4":"print(pd.DataFrame(confusion_matrix(y_test, model2.predict(X_test_pca), labels=model2.classes_)))","8a31a159":"print(classification_report(y_test, model2.predict(X_test_pca), labels=model2.classes_))","a6f462a0":"X_train_prob = pd.DataFrame(model2.predict_proba(X_train_pca))\nX_test_prob = pd.DataFrame(model2.predict_proba(X_test_pca))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","ba891646":"selector = RFE(model1)\nselector = selector.fit(X_train_scaled, y_train)","a6245118":"X_train_scaled = pd.DataFrame(X_train_scaled, index=X_train.index, columns=X_train.columns)\nX_train_scaled.head(3)","65b0f720":"ranking = list(zip(X_train_scaled.columns, selector.ranking_))\n\nmask = [x[0] for x in ranking if x[1]>1] #drop features that weren't ranked as 1 (1=highest feature importance)\nprint('Number of unimportant features: ', len(mask),'\\n')\nprint(mask)","4b218ada":"X_train_rfe = X_train_scaled.drop(columns=mask)\nX_train_rfe.columns","f857bc3e":"X_test_scaled = pd.DataFrame(X_test_scaled, index=X_test.index, columns=X_test.columns)\nX_test_rfe = X_test_scaled.drop(columns=mask)\nlen(X_test_rfe.columns)","fad44a69":"model3 = LogisticRegressionCV(cv = 5,\n                              class_weight= 'balanced', \n                              random_state=55, \n                              n_jobs=4)\nmodel3.fit(X_train_rfe, y_train)","326c13f1":"X_train_prob = pd.DataFrame(model3.predict_proba(X_train_rfe))\nX_test_prob = pd.DataFrame(model3.predict_proba(X_test_rfe))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","2d5b499a":"skplt.metrics.plot_roc(y_test, X_test_prob)\nplt.show()","2c6e6b4b":"selector2 = RFE(model2)\nselector2 = selector2.fit(X_train_pca, y_train)","4785da53":"X_train_pca = pd.DataFrame(X_train_pca)\nX_train_pca.head(2)","16d5e38e":"ranking = list(zip(X_train_pca.columns, selector2.ranking_))\n\nmask = [x[0] for x in ranking if x[1]>1] #drop features that weren't ranked as 1 (1=highest feature importance)\nprint('Number of unimportant features: ', len(mask),'\\n')\nprint(mask)","a97b6f5e":"X_train_pca_rfe = X_train_pca.drop(columns=mask)\nX_train_pca_rfe.columns","9c3c797d":"X_test_pca = pd.DataFrame(X_test_pca)\nX_test_pca_rfe = X_test_pca.drop(columns=mask)\nlen(X_test_pca_rfe.columns)","c0f7fdaf":"model4 = LogisticRegressionCV(cv = 5,\n                              class_weight= 'balanced', \n                              random_state=55, \n                              n_jobs=4)\nmodel4.fit(X_train_pca_rfe, y_train)","67e406c3":"X_train_prob = pd.DataFrame(model4.predict_proba(X_train_pca_rfe))\nX_test_prob = pd.DataFrame(model4.predict_proba(X_test_pca_rfe))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","60220a3f":"model5 = GaussianNB()\nparams = {}\nskf = StratifiedKFold(n_splits=10)\n\nmodel5_cv = GridSearchCV(model5, params, cv=skf, scoring='roc_auc', n_jobs=4)\nmodel5_cv.fit(X_train_pca_rfe, y_train)","850121b2":"X_train_prob = pd.DataFrame(model5_cv.predict_proba(X_train_pca_rfe))\nX_test_prob = pd.DataFrame(model5_cv.predict_proba(X_test_pca_rfe))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","85424b99":"model5_cv.fit(X_train_pca, y_train)\nX_train_prob = pd.DataFrame(model5_cv.predict_proba(X_train_pca))\nX_test_prob = pd.DataFrame(model5_cv.predict_proba(X_test_pca))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","6e941925":"model6 = GaussianNB()\nparams = {}\n\nmodel6_cv = GridSearchCV(model6, params, cv=skf, scoring='roc_auc', n_jobs=4)\nmodel6_cv.fit(X_train_scaled, y_train)","a77a8b34":"X_train_prob = pd.DataFrame(model6_cv.predict_proba(X_train_scaled))\nX_test_prob = pd.DataFrame(model6_cv.predict_proba(X_test_scaled))\n\nprint(f'Train AUC= {roc_auc_score(y_train, X_train_prob[1]):.4f}')\nprint(f'Test AUC= {roc_auc_score(y_test, X_test_prob[1]):.4f}')","92cdeddf":"skplt.metrics.plot_roc(y_test, X_test_prob)\nplt.show()","2e007e2f":"## Santander Customer Transaction Perdiction","a5cfd506":"## Model 2 - Scaler + PCA (n=180)\n### AUC = ~0.86","bd89888d":"___","3794f082":"## Model 5 - GaussianNB - Scaled, PCA, RFE\n### AUC = ~0.87","a1b6c80e":"The main goal of this analysis is to predict which customers will make a transaction in the future. The used metric is the AUC according to competition rules, therefore we're about to maximize the AUC of class 1.","5ede0c1e":"### Splitting the data:","9f6be61f":"## Model 3 - Scaler + RFE (Without PCA)\n### AUC = ~0.85","fcb4b316":"### Looking for Correlations:","e46490af":"## Model 1 - scaler + cv\n### AUC = ~0.85","29a9f633":"## Model 6 - Scaler only!\n### AUC = ~0.89","8d3e384d":"# Models:","13d83435":"## Model 4 - Scaler + PCA (n=180) + RFE\n### AUC = ~0.86","f7ad30ec":"### Imbalanced target value:","825384ae":"### Data without Nulls:","60be826b":"## Model 6 - GaussianNB - Scaled, PCA\n### AUC = ~0.88"}}