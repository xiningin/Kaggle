{"cell_type":{"ef382966":"code","48915afb":"code","36610cd8":"code","56b6f02a":"code","9121f2c0":"code","4c313c23":"code","e2ea34e9":"code","bade547e":"code","f23c8117":"markdown","7bb45217":"markdown","122cc9cc":"markdown","494c09eb":"markdown"},"source":{"ef382966":"import numpy as np  #for linear processing   \nimport pandas as pd #for handling tabular data\nfrom bokeh.plotting import figure #to import the interactive figure\nfrom bokeh.io import output_notebook,show #to plot and show results inline in the  notebook\noutput_notebook() #similiar to %matplotlib\nfrom numpy import cos,linspace,log,tan,sin","48915afb":"x=linspace(-6,6,100)\ny=tan(x)\np = figure(width=500, height=500) \np.circle(x,y, size=3, color=\"black\", alpha=0.6)\nshow(p)","36610cd8":"data_frame=pd.read_csv(\"..\/input\/titanic\/train.csv\")\np = figure(width=2000, height=500)\np.circle(data_frame.PassengerId,data_frame.Age, size=10, color=\"Blue\", alpha=0.6)\nshow(p)","56b6f02a":"from bokeh.sampledata.autompg import autompg\n\ngrouped = autompg.groupby(\"yr\")\n\nmpg = grouped.mpg\navg, std = mpg.mean(), mpg.std()\nyears = list(grouped.groups)\namerican = autompg[autompg[\"origin\"]==1]\njapanese = autompg[autompg[\"origin\"]==3]","9121f2c0":"p = figure(title=\"MPG by Year (Japan and US)\")\n\np.vbar(x=years, bottom=avg-std, top=avg+std, width=0.8, \n       fill_alpha=0.2, line_color=None, legend_label=\"MPG 1 stddev\")\n\np.circle(x=japanese[\"yr\"], y=japanese[\"mpg\"], size=10, alpha=0.5,\n         color=\"red\", legend_label=\"Japanese\")\n\np.triangle(x=american[\"yr\"], y=american[\"mpg\"], size=10, alpha=0.3,\n           color=\"blue\", legend_label=\"American\")\n\np.legend.location = \"top_left\"\nshow(p)","4c313c23":"from bokeh.models import ColumnDataSource\nfrom bokeh.layouts import gridplot\n\nsource = ColumnDataSource(autompg)\n\noptions = dict(plot_width=300, plot_height=300,\n               tools=\"pan,wheel_zoom,box_zoom,box_select,lasso_select\")\n\np1 = figure(title=\"MPG by Year\", **options)\np1.circle(\"yr\", \"mpg\", color=\"blue\", source=source)\n\np2 = figure(title=\"HP vs. Displacement\", **options)\np2.circle(\"hp\", \"displ\", color=\"green\", source=source)\n\np3 = figure(title=\"MPG vs. Displacement\", **options)\np3.circle(\"mpg\", \"displ\", size=\"cyl\", line_color=\"red\", fill_color=None, source=source)\n\np = gridplot([[ p1, p2, p3]], toolbar_location=\"right\")\n\nshow(p)","e2ea34e9":"\n\nfrom IPython.display import IFrame\nIFrame('https:\/\/demo.bokeh.org\/sliders', width=900, height=410)\n\n","bade547e":"from bokeh.io import curdoc\nfrom bokeh.layouts import column, row\nfrom bokeh.models import ColumnDataSource, Slider, TextInput\nfrom bokeh.plotting import figure\n\n# Set up data\nN = 200\nx = np.linspace(0, 4*np.pi, N)\ny = np.sin(x)\nsource = ColumnDataSource(data=dict(x=x, y=y))\n\n\n# Set up plot\nplot = figure(plot_height=400, plot_width=400, title=\"Coronavirus measure\",\n              tools=\"crosshair,pan,reset,save,wheel_zoom\",\n              x_range=[0, 4*np.pi], y_range=[-2.5, 2.5])\n\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\n\n# Set up widgets\ntext = TextInput(title=\"title\", value='my sine wave')\noffset = Slider(title=\"offset\", value=0.0, start=-5.0, end=5.0, step=0.1)\namplitude = Slider(title=\"amplitude\", value=1.0, start=-5.0, end=5.0, step=0.1)\nphase = Slider(title=\"phase\", value=0.0, start=0.0, end=2*np.pi)\nfreq = Slider(title=\"frequency\", value=1.0, start=0.1, end=5.1, step=0.1)\n\n\n# Set up callbacks\ndef update_title(attrname, old, new):\n    plot.title.text = text.value\n\ntext.on_change('value', update_title)\n\ndef update_data(attrname, old, new):\n\n    # Get the current slider values\n    a = amplitude.value\n    b = offset.value\n    w = phase.value\n    k = freq.value\n\n    # Generate the new curve\n    x = np.linspace(0, 4*np.pi, N)\n    y = a*np.sin(k*x + w) + b\n\n    source.data = dict(x=x, y=y)\n\nfor w in [offset, amplitude, phase, freq]:\n    w.on_change('value', update_data)\n\n\n# Set up layouts and add to document\ninputs = column(text, offset, amplitude, phase, freq)\n\ncurdoc().add_root(row(inputs, plot, width=800))\ncurdoc().title = \"Sliders\"","f23c8117":"Linked Brushing\n\nTo link plots together at a data level, we can explicitly wrap the data in a ColumnDataSource. This allows us to reference columns by name.\n\nWe can use a \"select\" tool to select points on one plot, and the linked points on the other plots will highlight.\n","7bb45217":"Let's Start with a example:","122cc9cc":"# Bar Plot Example\n\nBokeh's core display model relies on *composing graphical primitives* which are bound to data series. This is similar in spirit to Protovis and D3, and different than most other Python plotting libraries.\n\nA slightly more sophisticated example demonstrates this idea.\n\nBokeh ships with a small set of interesting \"sample data\" in the `bokeh.sampledata package`. We'll load up some historical automobile mileage data, which is returned as a Pandas `DataFrame`.\n","494c09eb":"**Bokeh** is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, and to extend this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create **interactive plots**, **dashboards**, and ** data applications**."}}