{"cell_type":{"c45ed635":"code","2dea1a06":"code","1f930006":"code","0054207f":"code","de2386a4":"code","02866fb7":"code","2699ff7b":"code","cedbc4fc":"code","64fd9be5":"code","79bcf02f":"code","859b3a71":"code","e6b62c9c":"code","7ce08c55":"code","9b18f26a":"code","863ac49a":"code","01eaa9f9":"code","16795281":"code","cf28c488":"code","6cdf93f2":"code","0c60444a":"code","f313c3b8":"code","e3e5ef8e":"code","4ad8d536":"code","749d2a7e":"code","723569b2":"code","c1819be8":"markdown","388a796b":"markdown","7016c739":"markdown","3d8370f4":"markdown","737f41ab":"markdown","e5246698":"markdown","3dcb8aa8":"markdown","e9621c05":"markdown","861281b1":"markdown","e084f759":"markdown","e6927e09":"markdown","70077ccf":"markdown","21e4c8ce":"markdown"},"source":{"c45ed635":"import pandas as pd\nimport numpy as np","2dea1a06":"data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\n\ndata.head()","1f930006":"data.describe()","0054207f":"data.dtypes","de2386a4":"data['Type'].unique()\n#No MB (Mobile) type?","02866fb7":"data['City Group'].unique()","2699ff7b":"data['City'].unique()\n#City seems not so useful right now","cedbc4fc":"#Creating a flag for each type of restaurant\ndata['Type_IL'] = np.where(data['Type'] == 'IL', 1, 0)\ndata['Type_FC'] = np.where(data['Type'] == 'FC', 1, 0)\ndata['Type_DT'] = np.where(data['Type'] == 'DT', 1, 0)\n\n#Creating a flag for 'Big Cities'\ndata['Big_Cities'] = np.where(data['City Group'] == 'Big Cities', 1, 0)\n\n#Converting Open_Date into day count\n#Considering the same date the dataset was made available\ndata['Days_Open'] = (pd.to_datetime('2015-03-23') - pd.to_datetime(data['Open Date'])).dt.days\n\n#Removing unused columns\ndata = data.drop('Type', axis=1)\ndata = data.drop('City Group', axis=1)\ndata = data.drop('City', axis=1)\ndata = data.drop('Open Date', axis=1)\n\n#Adjusting test data as well\ntest_data['Type_IL'] = np.where(test_data['Type'] == 'IL', 1, 0)\ntest_data['Type_FC'] = np.where(test_data['Type'] == 'FC', 1, 0)\ntest_data['Type_DT'] = np.where(test_data['Type'] == 'DT', 1, 0)\ntest_data['Big_Cities'] = np.where(test_data['City Group'] == 'Big Cities', 1, 0)\ntest_data['Days_Open'] = (pd.to_datetime('2015-03-23') - pd.to_datetime(test_data['Open Date'])).dt.days\ntest_data = test_data.drop('Type', axis=1)\ntest_data = test_data.drop('City Group', axis=1)\ntest_data = test_data.drop('City', axis=1)\ntest_data = test_data.drop('Open Date', axis=1)","64fd9be5":"data.dtypes","79bcf02f":"from sklearn import model_selection\nfrom sklearn import linear_model\n\n\nX = data.drop(['Id', 'revenue'], axis=1)\nY = data.revenue","859b3a71":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n\nfrom sklearn import metrics\n\ndef check_rmse(X, Y, alpha):\n    RMSE_lasso = []\n    RMSE_ridge = []\n\n    for i in alpha:\n        lasso = Lasso(alpha=i)\n        lasso.fit(X, Y)\n\n        ridge = Ridge(alpha=i)\n        ridge.fit(X, Y)\n\n        RMSE_lasso.append(metrics.mean_squared_error(Y, lasso.predict(X)))\n        RMSE_ridge.append(metrics.mean_squared_error(Y, ridge.predict(X)))\n        \n    \n    return (RMSE_lasso, RMSE_ridge)","e6b62c9c":"import matplotlib.pyplot as plt\n\nalpha = [i\/10 for i in range(25, 100, 10)]\nRMSE_lasso, RMSE_ridge = check_rmse(X, Y, alpha)\n\nplt.figure()\nplt.plot(alpha, RMSE_lasso, 'o-', color=\"r\", label=\"RMSE_lasso\")\nplt.plot(alpha, RMSE_ridge, 'o-', color=\"b\", label=\"RMSE_ridge\")\nplt.legend(loc='best')\nplt.show()","7ce08c55":"plt.figure()\nplt.plot(alpha, RMSE_lasso, 'o-', color=\"r\", label=\"RMSE_lasso\")\nplt.legend(loc='best')\nplt.show()","9b18f26a":"lasso = Lasso(alpha=5.5)\nlasso.fit(X, Y)\n\nmetrics.mean_squared_error(Y, lasso.predict(X))","863ac49a":"model = Lasso(alpha=5.5)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-5.5.csv', index=False)\ntest_predicted.describe()","01eaa9f9":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=150)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-random-forest.csv', index=False)\ntest_predicted.describe()","16795281":"model = Ridge(alpha=330)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-ridge-330.csv', index=False)\ntest_predicted.describe()","cf28c488":"model = Lasso(alpha=200000)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-high-alpha.csv', index=False)\ntest_predicted.describe()","6cdf93f2":"for c in X.columns:\n    print(c, len(X[c].unique()))","0c60444a":"data['Days_Open'].unique()","f313c3b8":"data['Time_Open'] = round(data['Days_Open'] \/ 700, 0)\ndata = data.drop('Days_Open', axis=1)\n\ntest_data['Time_Open'] = round(test_data['Days_Open'] \/ 700, 0)\ntest_data = test_data.drop('Days_Open', axis=1)","e3e5ef8e":"data['Time_Open'].unique()","4ad8d536":"X = data.drop(['Id', 'revenue'], axis=1)\nY = data.revenue","749d2a7e":"model = Ridge(alpha=330)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-ridge-330-div-700.csv', index=False)\ntest_predicted.describe()","723569b2":"model = Lasso(alpha=200000)\nmodel.fit(X, Y)\n\ntest_predicted = pd.DataFrame()\ntest_predicted['Id'] = test_data.Id\ntest_predicted['Prediction'] = model.predict(test_data.drop('Id', axis=1))\ntest_predicted.to_csv('submission-lasso-high-alpha-div-700.csv', index=False)\ntest_predicted.describe()","c1819be8":"**Dataset acknowledgment**","388a796b":"**Testing a Random Forest Regressor**  ","7016c739":"**Running the new dataset against best models obtained previously:**","3d8370f4":"**Checking columns of interest**","737f41ab":"**Splitting data into X and Y**","e5246698":"**Checking error for Lasso with alpha=5.5**  \n(Does not converge)","3dcb8aa8":"**Removing Ridge from view for better visualization **","e9621c05":"**Checking again dataset columns:**","861281b1":"**Using a time coefficient instead of day count**","e084f759":"**Pre-processing**","e6927e09":"> **Seeking best alpha for Lasso and Ridge**","70077ccf":"**Prediction revenue using Lasso with smallest error on train data:**  \n(Negative values?)","21e4c8ce":"**For Ridge and Lasso, instead of using alpha with smallest error, now I'm using smallest alpha that will make the predicted values look reasonable**  "}}