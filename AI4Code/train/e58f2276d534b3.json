{"cell_type":{"9f3895f2":"code","ad2817a1":"code","f0112700":"code","9efb552c":"code","5b533cfc":"code","e7c43a7a":"code","1d9d187a":"code","277b0458":"code","981fbfc6":"code","e39fa50e":"code","0c47390d":"code","6fe90be2":"code","3d5dff23":"code","8b985a3a":"code","06e0dcb9":"code","4f1f951a":"code","fc81bf1a":"code","49555d02":"code","b5dd6889":"code","3214861e":"code","65da97fd":"code","3e68df13":"code","6cd5f425":"code","b29f4e28":"code","0a78880e":"code","3bc4e9bb":"code","9b3954a0":"code","2f8689f6":"code","93adb637":"code","4a7c4870":"code","9eca9a03":"code","6d9e01ce":"code","239079ad":"code","f2865548":"code","b6130573":"code","ca3b1120":"code","c21a0a45":"markdown","0d65cd0d":"markdown","f287f2c9":"markdown","126c90b0":"markdown","915172fa":"markdown","dc63e956":"markdown","74e1265b":"markdown","c9f40594":"markdown","8b7416c7":"markdown","8201daf2":"markdown","24286ab2":"markdown"},"source":{"9f3895f2":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as gpd\nimport folium\nfrom folium.plugins import HeatMap\nimport re\n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (12, 5);\nsns.set_style('whitegrid')","ad2817a1":"with open('..\/input\/restaurant-recommendation-challenge\/VariableDefinitions.txt') as f:\n    print(f.read())","f0112700":"chunk_size=10000\nroot_dir = '..\/input\/restaurant-recommendation-challenge'\ntrain_full = pd.read_csv(os.path.join(root_dir, 'train_full.csv'))\norders = pd.read_csv(os.path.join(root_dir, 'orders.csv'))\nvendors = pd.read_csv(os.path.join(root_dir, 'vendors.csv'))","9efb552c":"train_full = train_full.sample(chunk_size)\norders = orders.sample(chunk_size)","5b533cfc":"train_full.head()","e7c43a7a":"orders.head()","1d9d187a":"train_full.isna().sum().sum()","277b0458":"fig, ax = plt.subplots(1, 2)\ntrain_full['gender'].hist(ax=ax[0], color='yellow')\ntrain_full['location_type'].hist(ax=ax[1])","981fbfc6":"train_full['country_id'].value_counts()","e39fa50e":"locs = gpd.read_file(os.path.join(root_dir, 'train_locations.csv'))\nlocs.dropna(subset=['latitude'], inplace=True)\nlocs.head()","0c47390d":"def check_num(string):\n    regex = r'-?[0-9]*.[0-9]*'\n    m = re.match(regex, string)\n    if m is None:\n        return float(0)\n    return float(string[:6])\n\nlocs['latitude'] = locs['latitude'].apply(check_num)\nlocs['longitude'] = locs['longitude'].apply(check_num)\nlocs['geometry'] = gpd.points_from_xy(locs['longitude'], locs['latitude'])","6fe90be2":"m = folium.Map(location=[50,-85], zoom_start=2)\nfor i in list(locs.index)[:50]:\n    folium.Marker([locs.loc[i, 'latitude'], locs.loc[i, 'longitude']]).add_to(m)\nm","3d5dff23":"sorted(train_full['location_number'].unique())","8b985a3a":"train_full[['status_x', 'status_y']].hist(color='magenta')","06e0dcb9":"train_full['discount_percentage'].value_counts()","4f1f951a":"train_full['commission'].unique()","fc81bf1a":"train_full['display_orders'].value_counts()","49555d02":"train_full['target'].sum()","b5dd6889":"train_full['rank'].hist()","3214861e":"train_full['prepration_time'].hist(color='gold')","65da97fd":"orders.head()","3e68df13":"orders.describe()","6cd5f425":"plt.hist(orders['payment_mode']);","b29f4e28":"sns.heatmap(orders.corr(), cmap=\"YlGnBu\")","0a78880e":"fig, ax = plt.subplots(1, 2)\nsns.distplot(orders['grand_total'], ax=ax[0], color='purple')\nsns.distplot(orders['item_count'], ax=ax[1])","3bc4e9bb":"fig, ax = plt.subplots(1, 2)\norders.loc[:, 'delivery_date'] = pd.to_datetime(orders['delivery_date'])\nax[0].scatter(orders.set_index('delivery_date').index, orders['item_count'], \n              label='items', alpha=0.6, color='red')\nax[0].legend();\nax[1].scatter(orders.set_index('delivery_date').index, orders['grand_total'], \n              label='total pay', alpha=0.6, color='green')\nax[1].legend();","9b3954a0":"orders.loc[:, 'delivery_time'] = pd.to_datetime(orders['delivery_time'], errors='coerce')\nfor i in range(0, 24):\n    df = orders[orders['delivery_time'].dt.hour==i]\n    orders.loc[df.index, 'delivery_hour'] = i\norders['delivery_hour'].hist(bins=24, label='orders by hour of day')\nplt.legend();","2f8689f6":"orders.groupby('customer_id').mean()['grand_total'].plot(marker='.', linestyle='none', color='orange')\nplt.title('total cost');","93adb637":"orders[orders['grand_total']==0.0]","4a7c4870":"orders[orders['grand_total']==0.0]['promo_code'].isna().sum(), orders[orders['grand_total']==0.0].shape","9eca9a03":"customers = pd.read_csv('..\/input\/restaurant-recommendation-challenge\/train_customers.csv')\ncustomers.head()","6d9e01ce":"customers['akeed_customer_id'].nunique(), customers.shape[0]","239079ad":"dists = ['gender', 'language', 'status', 'verified']\nd=0\nfig, ax = plt.subplots(2, 2)\nfor i in range(2):\n    for j in range(2):\n        customers[dists[d]].dropna().hist(ax=ax[i][j], label=dists[d], color='aqua')\n        if dists[d] == 'gender':\n            ax[i][j].tick_params(rotation=45)\n        ax[i][j].legend();\n        plt.tight_layout();\n        d+=1","f2865548":"def clean_string(string):\n    string = str(string)\n    if '?' in string or string=='nan' or string.strip(' ')=='':\n        return np.nan\n    string = string.strip(' ').lower()\n    return string\n\ncustomers.loc[:, 'gender'] = customers['gender'].apply(clean_string)\ncustomers['gender'].hist(color='chocolate')","b6130573":"def calc_age(year):\n    if len(str(year))==2:\n        if str(year).startswith('0'):\n            year = '20'+str(year)\n        else:\n            year = '19'+str(year)\n        year = int(year)\n    if year is None:\n        return np.nan\n    return 2020-year\n\ncustomers.loc[:, 'age'] = customers['dob'].apply(calc_age)\ncustomers[customers['age']<16]","ca3b1120":"ages = customers[customers['age']>16]\nages = ages[ages['age']<110]\nages['age'].dropna().hist(bins=20, label='customers by age', color='brown')","c21a0a45":"Needless to say there is something wrong with our location data. At least we confirmed statment from variale defenitions.\n> 'Latitude' and 'longitude': Not true latitude and longitude - locations have been masked, but nearby locations remain nearby in the new reference frame and can thus be used for clustering. However, not all locations are useful due to GPS errors and missing data - you may want to treat outliers separately.","0d65cd0d":"That will conclude our quick look at data given. Clearly we need somewhat more effective tools to deal with high volume of data. That is what we will be doing in the <a href='https:\/\/www.kaggle.com\/erelin6613\/pyspark-alternating-least-squares-in-action?scriptVersionId=39511328'>next notebook<\/a>.","f287f2c9":"### EDA\nWe are given a huge amount of data for customers' orders, locations of a restaurants. Let us see what insights we might from it","126c90b0":"Ouch, there is some mess going on in the gender column.","915172fa":"Well... customers as young as 1 y.o. looks truely suspicious, not too mention the accounts of such customers seems to be created the same year or even earlier than they were born... That's funny but with high confidence we can tell these are mistaken records.","dc63e956":"Hm, let us see where are our locations anyway.","74e1265b":"Okay, so most of these people used promo code. A bit of insight we've got.","c9f40594":"Files attached are realy vast, let's pick just a sample of those for performance and basic analysis.","8b7416c7":"Huh, we even have people how appear to pay nothing... at least according to the given data. Let's dig some more.","8201daf2":"Well... we have many not really informative features here. Probably we can get better insights from orders and customers individually?","24286ab2":"First, we are given some varibale explanations."}}