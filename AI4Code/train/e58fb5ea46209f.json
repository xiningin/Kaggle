{"cell_type":{"ae7c80e1":"code","481e4bea":"code","2cd1e3f7":"code","2bcfda39":"code","9234b9fb":"code","9de0092e":"code","134037f6":"code","6db730de":"markdown"},"source":{"ae7c80e1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport numpy as np\nimport pickle\nimport cv2\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\nimport os\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","481e4bea":"\n\nEPOCHS = 20\nINIT_LR = 1e-5\nBS = 8\ndefault_image_size = tuple((256, 256))\nimage_size = 0\n\nwidth=256\nheight=256\ndepth=3","2cd1e3f7":"#since number of classes being used is 3\nn_classes = 3","2bcfda39":"from keras import layers\nfrom keras.models import Model\n\noptss = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\ndef alexnet(in_shape=(256,256,3), n_classes=n_classes, opt=optss):\n    in_layer = layers.Input(in_shape)\n    conv1 = layers.Conv2D(96, 11, strides=4, activation='relu')(in_layer)\n    pool1 = layers.MaxPool2D(3, 2)(conv1)\n    conv2 = layers.Conv2D(256, 5, strides=1, padding='same', activation='relu')(pool1)\n    pool2 = layers.MaxPool2D(3, 2)(conv2)\n    conv3 = layers.Conv2D(384, 3, strides=1, padding='same', activation='relu')(pool2)\n    conv4 = layers.Conv2D(256, 3, strides=1, padding='same', activation='relu')(conv3)\n    pool3 = layers.MaxPool2D(3, 2)(conv4)\n    flattened = layers.Flatten()(pool3)\n    dense1 = layers.Dense(4096, activation='relu')(flattened)\n    drop1 = layers.Dropout(0.8)(dense1)\n    dense2 = layers.Dense(4096, activation='relu')(drop1)\n    drop2 = layers.Dropout(0.8)(dense2)\n    preds = layers.Dense(n_classes, activation='softmax')(drop2)\n\n    model = Model(in_layer, preds)\n    model.compile(loss=\"categorical_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n    return model\n\n","9234b9fb":"model = alexnet()","9de0092e":"from tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model.png')","134037f6":"model.summary()","6db730de":"# Model Visualization"}}