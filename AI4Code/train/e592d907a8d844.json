{"cell_type":{"4c9754e9":"code","d9c405d3":"code","597961ba":"code","a1ca226d":"code","948be828":"code","d0301931":"code","421f5682":"code","4d305727":"code","2b79a486":"code","f95f0450":"code","ddbe0d04":"code","1b043e12":"code","a81507d3":"code","dd7a3b4d":"code","cd13b6a4":"code","a062a817":"code","2eda8e8b":"code","bdbe2b1d":"code","bed31830":"code","dd24a58c":"code","34cacc32":"code","b728ba91":"code","ec9ea5f5":"code","eb7c979f":"code","3a22c569":"code","265e2456":"code","a7ad427b":"code","f699cd77":"code","e484f193":"code","122fbead":"code","415da038":"code","7b14c90d":"code","7a361111":"code","740772be":"code","43d44eac":"code","cc0c099c":"code","3c06f335":"code","43a3411b":"code","2f2dcc55":"markdown","1570b743":"markdown","3be5cb88":"markdown","6ede5a72":"markdown"},"source":{"4c9754e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9c405d3":"import pandas as pd\nimport numpy as np","597961ba":"import csv\ndf = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep='\\t')\ndf.head()","a1ca226d":"df.describe()","948be828":"df.info()","d0301931":"df.isna().sum()","421f5682":"df = df[~df['Income'].isna()]\ndf.isna().sum()","4d305727":"df.drop(['Z_CostContact','Z_Revenue'],axis=1 ,inplace=True)\ndf.columns","2b79a486":"import matplotlib.pyplot as plt\nimport seaborn as sns","f95f0450":"#plotting year of birth","ddbe0d04":"sns.displot(df['Year_Birth'])","1b043e12":"df['Education'] = df['Education'].replace(['PhD','Master','2n Cycle'],'Post Graduate')\ndf['Education'] = df['Education'].replace(['Graduation','Basic'],'Under Graduate')\ndf['Education'].unique()","a81507d3":"sns.displot(df['Education'])","dd7a3b4d":"sns.displot(df['Marital_Status'])\nplt.xticks(rotation=45)\nplt.show()","cd13b6a4":"df['Marital_Status'] = df['Marital_Status'].replace(['Together','Married'],'Relationship')\ndf['Marital_Status'] = df['Marital_Status'].replace(['Single','Divorced','Widow','Alone','Absurd','YOLO'],'Single')\ndf['Marital_Status'].unique()","a062a817":"sns.displot(df['Marital_Status'])\nplt.xticks(rotation=45)\nplt.show()","2eda8e8b":"print(df['Kidhome'].unique())\nprint(df['Teenhome'].unique())\n\ndf['Total_kids'] = df['Kidhome'] + df['Teenhome']\ndf['Total_kids'].unique()","bdbe2b1d":"# Vizualizing distribution of total kids column\nsns.displot(df['Total_kids'].sort_values().astype(str))","bed31830":"# Creating new features using expense\ndf['Total_expense'] = df['MntWines'] + df['MntFruits'] + df['MntMeatProducts'] + df['MntFishProducts'] + df['MntSweetProducts'] + df['MntGoldProds']\nsns.displot(df['Total_expense'])","dd24a58c":"# Creating new features using campaign acceptance features\ndf['Total_accepted'] = df['AcceptedCmp1'] + df['AcceptedCmp2'] + df['AcceptedCmp3'] + df['AcceptedCmp4'] + df['AcceptedCmp5']\ndf['Total_accepted'].unique()","34cacc32":"# Vizualizing the distribution plot for total accepted feature\nsns.displot(df['Total_accepted'].astype(str))","b728ba91":"# Creating new feature - Total purchase\ndf['Total_purchase'] = df['NumDealsPurchases'] + df['NumWebPurchases'] + df['NumCatalogPurchases'] + df['NumStorePurchases'] \nsns.displot(df['Total_purchase'])","ec9ea5f5":"df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])\ndf['first_date'] = pd.to_datetime('01-01-2015')\ndf['days_engaged'] = (df['first_date'] - df['Dt_Customer']).dt.days","eb7c979f":"plt.figure(figsize=(28, 6))\nsns.distplot(df[\"Income\"],color = 'Seagreen')","3a22c569":"df['first_date'].head()","265e2456":"# importing date class from datetime module\nfrom datetime import date\n\n# creating the date object of today's date\ntodays_date = date.today()\n\n# fetching the current year, month and day of today\ndf['current_year'] = todays_date.year\n\ndf['total_year_enrol'] = df['current_year'] - pd.DatetimeIndex(df['Dt_Customer']).year","a7ad427b":"df.columns","f699cd77":"# Dropping unnecessary columns\ndf.drop(['Kidhome','Teenhome', 'Dt_Customer', 'MntWines', 'MntFruits',\n       'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts',\n       'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases',\n       'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',\n       'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1',\n       'AcceptedCmp2', 'first_date','ID'],axis=1,inplace=True)\ndf.columns","e484f193":"# Getting all the categorical variable\ncatg_col=[]\nfor i in df.columns:\n    if(df[i].dtype =='object'):\n        catg_col.append(i)\n        \nprint(catg_col)","122fbead":"# Label encoding for all categorical nominal variable\nfrom sklearn import preprocessing","415da038":"encoder = preprocessing.LabelEncoder()\nfor i in catg_col:\n    df[i]= encoder.fit_transform(df[i])\n    \nprint(df)","7b14c90d":"# Implement standardization of features\nfrom sklearn.preprocessing import StandardScaler\nscale_data = StandardScaler()\ndf_val = scale_data.fit_transform(df.values)\ndf_model = pd.DataFrame(df_val, columns=df.columns)\ndf_model","7a361111":"# Determining correlation between all correlation\nplt.figure(figsize=(15,15))\nsns.heatmap(df.corr(),annot=True,linewidths=0.5)","740772be":"# Creating new dataframe for clustering\ndf_model.columns\nX = df_model.iloc[:,[3,10]]","43d44eac":"from sklearn.cluster import KMeans\nwcss = [] \nfor i in range(1, 11): \n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X) \n    wcss.append(kmeans.inertia_)\n\nplt.plot(range(1, 11), wcss)\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS') \nplt.show()","cc0c099c":"# Validating all the columns which will be used for clustering\nX.columns","3c06f335":"# K means Clustering\nkmeans = KMeans(n_clusters=2, init=\"k-means++\",random_state=50)\nlabel = kmeans.fit_predict(X[['Income', 'Total_purchase']])","43a3411b":"#Getting the Centroids\ncentroids = kmeans.cluster_centers_\nu_labels = np.unique(label)\n \n#plotting the results:\nfor i in u_labels:\n    plt.scatter(X[label == i].iloc[:,0] , X[label == i].iloc[:,1] , label = i)\nplt.scatter(centroids[:,0] , centroids[:,1] , s = 60, color = \"black\")\nplt.xlabel('Income')\nplt.ylabel('Total Purchase')\nplt.legend()\nplt.show()","2f2dcc55":"reducing columns and separting education in PG and UG","1570b743":"(After removing the null values)","3be5cb88":"24 income values are null","6ede5a72":"Integrating marital status into 2 categories - Relationship and Single"}}