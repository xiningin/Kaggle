{"cell_type":{"8db76e06":"code","d677fd80":"code","5fda77d5":"code","8a437c67":"code","c51814a1":"code","6c5cf401":"code","2eecd514":"code","ea365478":"code","8662545f":"code","f49716ca":"code","4e328ed0":"code","82c09e83":"code","91483434":"code","84c7bbad":"code","d9d5f7d5":"code","fd46f4be":"code","97a6222f":"code","07353a8d":"code","95bbacd6":"code","a48292f7":"code","2fe025b2":"code","42d6caa5":"markdown","4de16004":"markdown","3c034692":"markdown","68be31da":"markdown","26335fc2":"markdown","a3a496a4":"markdown","bf800bc6":"markdown","1294bde3":"markdown","d7d0ced5":"markdown","f1f0c123":"markdown","1ba7d384":"markdown"},"source":{"8db76e06":"import os\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom multiprocessing import Pool\n\nimport imageio\nimport tensorflow as tf\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rc('xtick',labelsize=11)\nplt.rc('ytick',labelsize=11)\nplt.rcParams[\"axes.grid\"] = False\n\nimport altair as alt\n\nfrom IPython.display import display, HTML\n\n# Set Color Palettes for the notebook\ncustom_colors = ['#74a09e','#86c1b2','#98e2c6','#f3c969','#f2a553', '#d96548', '#c14953']\nsns.palplot(sns.color_palette(custom_colors))\n\n# Set Style\n#sns.set_style(\"whitegrid\")\nsns.despine(left=True, bottom=True)","d677fd80":"BASE_DIR = '..\/input\/labeled-chest-xray-images\/chest_xray'\nTRAIN_DIR = os.path.join(BASE_DIR, 'train')\nTEST_DIR = os.path.join(BASE_DIR, 'test')","5fda77d5":"!ls ..\/input\/labeled-chest-xray-images\/chest_xray\/train\/NORMAL | head -5","8a437c67":"# Functions to extract image properties such as image xsize, image ysize, personno, split class(train, test).\ndef extract_image_props(impath):\n    if impath.split('\/')[-1].split('-')[0] == 'NORMAL':\n        label = 'NORMAL'\n    elif impath.split('\/')[-1].split('-')[0] == 'BACTERIA':\n        label = 'BACTERIA'\n    elif impath.split('\/')[-1].split('-')[0] == 'VIRUS':\n        label = 'VIRUS'\n    \n    personno = impath.split('\/')[-1].split('-')[1]\n    imgno = impath.split('.')[-2][-4:]\n    \n    im = imageio.imread(impath)\n    br_med = np.median(im)\n    br_std = np.std(im)\n    xsize = im.shape[1]\n    ysize = im.shape[0]\n    datasplit = impath.split('\/')[-3]\n    return datasplit, impath, label, xsize, ysize, br_med, br_std, personno, imgno\n\ndef extract_image_props_all(DIR=BASE_DIR):\n    impaths = tf.io.gfile.glob([DIR + '\/*\/*\/*.jpeg', ])\n    \n    with Pool(4) as p:\n        image_props = list(tqdm(p.imap(extract_image_props, impaths), total=1000))\n\n    df = pd.DataFrame(columns=['datasplit', 'path', 'label', 'xsize', 'ysize',\n                               'br_med', 'br_std', 'personno', 'imgno'])\n    df['datasplit'] = np.array(image_props).T[0]\n    df['path'] = np.array(image_props).T[1]\n    df['label'] = np.array(image_props).T[2]\n    df['xsize'] = np.array(image_props).T[3].astype(int)\n    df['ysize'] = np.array(image_props).T[4].astype(int)\n    df['br_med'] = np.array(image_props).T[5].astype(float)\n    df['br_std'] = np.array(image_props).T[6].astype(float)\n    df['personno'] = np.array(image_props).T[7]\n    df['imgno'] = np.array(image_props).T[8].astype(int)\n    df.to_csv('train_image_props.csv', index=False)\n    return df","c51814a1":"# This runs the code defined above to extract the properties of all images.\nif not os.path.isfile('.\/train_image_props.csv'):\n    print('Extracting properties of all images...')\n    print('Takes approximately 1min.')\n    df_ipa = extract_image_props_all(BASE_DIR)\n    df_ipa['aspectratio_yx'] = df_ipa.ysize \/ df_ipa.xsize\n    print('Done!')\nelse:\n    print('Using available train_image_props.csv')\n    df_ipa = pd.read_csv('train_image_props.csv')","6c5cf401":"df_ipa.head().style.set_caption('Head Image Properties')","2eecd514":"def multivariateGrid(col_x, col_y, col_k, df, k_is_color=False, scatter_alpha=.5, globalhist=False):\n    def colored_scatter(x, y, c=None):\n        def scatter(*args, **kwargs):\n            args = (x, y)\n            if c is not None:\n                kwargs['c'] = c\n            kwargs['alpha'] = scatter_alpha\n            plt.scatter(*args, **kwargs)\n\n        return scatter\n\n    g = sns.JointGrid(\n        x=col_x,\n        y=col_y,\n        data=df,\n        height=8\n    )\n    g.set_axis_labels('X Size', 'Y Size')\n    \n    color = None\n    legends=[]\n    for name, df_group in df.groupby(col_k):\n        legends.append(name)\n        if k_is_color:\n            color=name\n        g.plot_joint(\n            colored_scatter(df_group[col_x],df_group[col_y],color),\n        )\n        sns.distplot(\n            df_group[col_x].values,\n            ax=g.ax_marg_x,\n            color=color,\n            kde=False\n        )\n        sns.distplot(\n            df_group[col_y].values,\n            ax=g.ax_marg_y,\n            color=color,            \n            vertical=True,\n            kde=False\n        )\n    # Do also global Hist:\n    if globalhist:\n        sns.distplot(\n            df[col_x].values,\n            ax=g.ax_marg_x,\n            color='grey'\n        )\n        sns.distplot(\n            df[col_y].values.ravel(),\n            ax=g.ax_marg_y,\n            color='grey',\n            vertical=True\n        )\n    plt.legend(legends)","ea365478":"multivariateGrid('xsize', 'ysize', 'datasplit', df=df_ipa)","8662545f":"df_ipa.aspectratio_yx.hist(bins=30, grid=False, color=custom_colors[2])\ndf_ipa[df_ipa.datasplit == 'train'].aspectratio_yx.hist(bins=30, grid=False, color=custom_colors[3])\ndf_ipa[df_ipa.datasplit == 'test'].aspectratio_yx.hist(bins=30, grid=False, color=custom_colors[4])\nplt.legend(['Total', 'Train', 'Test'])\nplt.xlabel('Aspect Ratio (Y:X)')\nplt.ylabel('Counts')\nplt.show()","f49716ca":"data_stats = df_ipa.groupby(['datasplit'])['label'].value_counts().reset_index(name='counts')\n\nchart = alt.Chart(data_stats).mark_bar().encode(\n    x=alt.X('label:N', axis=alt.Axis(format='', title='')),\n    y=alt.X('counts:Q', axis=alt.Axis(title='Counts', grid=False)),\n    color=alt.Color('label:N', legend=alt.Legend(title=\"Labels by color\")),\n    column=alt.Column('datasplit:N', header=alt.Header(title=[''], labelOrient='bottom')),\n    tooltip=['counts:Q', 'label:N']\n).properties(\n    width=200,\n    height=200\n)\n\nchart.configure_title(\n    fontSize=20,\n    font='Courier',\n    anchor='start',\n    color='black',\n    align='center',\n).configure_view(\n    strokeWidth=0\n)","4e328ed0":"print('The highest and the lowest number of images taken from a patient: ')\nprint(df_ipa.personno.value_counts())","82c09e83":"print('Median number of images taken from a patient: ', round(np.median(df_ipa.personno.value_counts().values), 2))\nprint('Average number of images taken from a patient: ', round(np.mean(df_ipa.personno.value_counts().values), 2))","91483434":"df_ipa.br_med.hist()\nplt.xlabel('Median Brigthness')\nplt.ylabel('Counts')\nplt.show()","84c7bbad":"def get_label(datum):\n    label = tf.strings.split(tf.strings.split(datum, os.sep)[-1], '-')[0]\n    if label == 'NORMAL':\n        label = 0\n    elif label == 'BACTERIA':\n        label = 1\n    elif label == 'VIRUS':\n        label = 2\n    else:\n        label = -1\n    return datum, label\n\ndef data_create(folder=TRAIN_DIR, condition='*', resize=False, sample=None):\n    if condition == 'BACTERIA' or condition == 'VIRUS':\n        pattern = folder + '\/' + 'PNEUMONIA\/' + condition + '*.jpeg'\n    else:\n        pattern = folder + '\/' + condition + '\/*.jpeg'\n    data = tf.io.gfile.glob(pattern)\n    \n    if sample:\n        data = random.sample(data, sample)\n        \n    data = tf.data.Dataset.from_tensor_slices(data)\n    data = data.map(get_label)\n    data = data.map(lambda x, y: (tf.io.read_file(x), y), tf.data.experimental.AUTOTUNE)\n    data = data.map(lambda x, y: (tf.image.decode_jpeg(x, channels=1), y), tf.data.experimental.AUTOTUNE)\n    if resize:\n        data = data.map(lambda x, y: (tf.image.resize(x, (resize, resize), method='nearest'), y), tf.data.experimental.AUTOTUNE)\n    return data","d9d5f7d5":"def display(folder=TRAIN_DIR, condition='*', resize=None, sample=5):\n    ds = data_create(folder, condition=condition, resize=resize, sample=sample)\n    \n    # Plotting\n    fig, axs = plt.subplots(1, sample, figsize=(15, 5))\n    for i, datum in enumerate(ds):\n        axs[i].imshow(tf.squeeze(datum[0], -1).numpy(), cmap=plt.get_cmap('gray'))\n        if datum[1].numpy() == 0:\n            im_label = 'NORMAL'\n        elif datum[1].numpy() == 1:\n            im_label = 'BACTERIA'\n        elif datum[1].numpy() == 2:\n            im_label = 'VIRUS'\n        axs[i].set(title=im_label)\n    plt.show()","fd46f4be":"display(TRAIN_DIR, condition='NORMAL', sample=5, resize=512)","97a6222f":"display(TRAIN_DIR, condition='BACTERIA', sample=5, resize=512)","07353a8d":"display(TRAIN_DIR, condition='VIRUS', sample=5, resize=512)","95bbacd6":"display(TEST_DIR, condition='NORMAL', sample=5, resize=512)","a48292f7":"display(TEST_DIR, condition='BACTERIA', sample=5, resize=512)","2fe025b2":"display(TEST_DIR, condition='VIRUS', sample=5, resize=512)","42d6caa5":"# 3. PersonNo-related Statistics\n---\n","4de16004":"## 1.1 Xsize vs Ysize Distribution for All Datasets\n---\n> The distribution of the image size is important when employing data augmentation methods.\n\n- A broad distribution of image sizes in both the train and test datasets.  \n- The train and test datasets' image sizes are well represented in the train dataset.\n","3c034692":"**Observations from quick image inspection:**\n\n- Chests are not exactly vertical in all images - a random tilt to either sides not more than 5degree.\n- Chest widths vary from image to image - some kids are chubbier than the others or the resizing makes some of the chests slimmer.\n- Some images exhibit the letter R on the top left.\n- Some images exhibit text on the top right.\n- Some images display medical devices in the form of little circles and wires.\n- Some images are darker than the others.\n- Images are not perfectly centered - the degree of blank spaces on the sides vary.\n\n---> These observations will be useful for data augmentation.","68be31da":"Filenames follow the convention shown below:\n\n{CONDITION}-{UNIQUE_PATIENT_NO}-{PATIENT_SPECIFIC_IMAGE_NO}.jpeg  \n\nwhere CONDITION is one of NORMAL, VIRUS, BACTERIA.\n\nSee the list below.","26335fc2":"# 1. Image Properties\n---","a3a496a4":"# 2. Train-Test Split Distribution\n---","bf800bc6":"# <center> Chest X-ray Images <\/center>\n\nThis notebook presents a brief exploratory analysis of the Chest X-ray Images dataset v3.","1294bde3":"# 5. Image Inspection\n---\nRandomly selected 5 images from each of the three clasess (NORMAL, BACTERIA, VIRUS) in both train and test datasets. ","d7d0ced5":"# 4. Distribution of Median Brightnesses","f1f0c123":"## 1.2 Aspect Ratio\n---\n> Aspect ratio distribution resembles a Gaussian distribution with a peak around 0.7.","1ba7d384":"The images are located in train and test folders."}}