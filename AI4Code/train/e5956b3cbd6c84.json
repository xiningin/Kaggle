{"cell_type":{"ec5dcdd0":"code","61b41568":"code","8adcb330":"code","b9cd3081":"code","06d7b7e1":"code","7c872681":"code","752ee498":"code","87257a84":"code","b8a5f3c2":"code","23d34d09":"code","3138c39b":"markdown","ec9c3bbb":"markdown","685cbf03":"markdown","d56f6ccf":"markdown","09376b97":"markdown","c4bad025":"markdown","5bf81780":"markdown","15466209":"markdown","400076f3":"markdown","50355675":"markdown"},"source":{"ec5dcdd0":"import pandas as pd # verinin organizasyonu i\u00e7in\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_validate\nfrom sklearn import svm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n\n#Grafik \u00e7izdirme k\u00fct\u00fcphanesi\nimport matplotlib.pyplot as plt\n\nimport os #Sistem \nimport warnings #uyar\u0131lar\nprint(os.listdir(\"..\/input\/\"))\nwarnings.filterwarnings(\"ignore\")","61b41568":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/cancer\/data.csv\", header =None)\ndata.head()","8adcb330":"dataorj = data.copy()\nfeature_names = dataorj.drop([0,32,1],axis=1).values[0].tolist()\n\ndata = data.drop([0],axis=0)\nY=data[1].map({'M':1,'B':0})\ndata = data.drop([0,32,1],axis=1)\n\n\ndataset = data.values\nX = dataset[:,0:31]\nX = X.astype('float64')","b9cd3081":"data.head()","06d7b7e1":"for i in range(1,31):\n    X[:,(i-1):i] = (X[:,(i-1):i]-np.min(X[:,(i-1):i]))\/(np.max(X[:,(i-1):i])\n    -np.min(X[:,(i-1):i]))","7c872681":"x_train, x_test, y_train, y_test = train_test_split(X, Y, \n      test_size=0.3, random_state=1)\n\ndata_name = \"wisconsin\"\n","752ee498":"def calculate2(cm):\n    TP = cm[0,0]\n    TN = cm[1,1]\n    FP = cm[0,1]\n    FN = cm[1,0]\n    \n    if TP+FN == 0:\n        FN = 0.000001\n    if TN+FP == 0:\n        FP = 0.000001\n    accuracy = (TP+TN)\/(TP+TN+FP+FN)\n    print(\"accuracy: \",accuracy)\n    sensitivity = TP\/(TP+FN)\n    print(\"sensitivity: \",sensitivity)\n    specificity = TN\/(TN+FP)\n    print(\"specificity: \",specificity)\n    \n    matrisim=[[\"accuracy: \",accuracy],[\"sensitivity: \",sensitivity],\n          [\"specificity: \",specificity]]\n    return matrisim\n    \ndef training(model,name,n1,n2,n3):\n    print(\"--------------------\")\n    print(\"MODEL : \",str(name))\n    print(\"--------------------\")\n    fig=plt.gcf()\n    fig.set_size_inches(10,5)\n    plt.subplot(n1,n2,n3)\n    plt.title('train')\n    model.fit(x_train,y_train)\n    y_pred0=cross_val_predict(model,x_train,y_train,cv=10)\n    cm=confusion_matrix(y_train,y_pred0)\n    sns.heatmap(cm,annot=True,fmt=\"d\")\n        \n    print(\"\\naccuracy_score: \"+str(metrics.accuracy_score(y_train, y_pred0)))\n    print(\"*\")\n    plt.subplot(n1,n2,n3+1)\n    plt.title('test')\n    model.fit(x_test,y_test)\n    y_pred00=cross_val_predict(model,x_test,y_test,cv=10)\n    cm2=confusion_matrix(y_test,y_pred00)\n    sns.heatmap(cm2,annot=True,fmt=\"d\")\n\n    plt.subplot(n1,n2,n3+2)\n    plt.title('validation all')\n    model.fit(X,Y)\n    y_pred2=cross_val_predict(model,X,Y,cv=10)\n    conf_mat2=confusion_matrix(Y,y_pred2)\n    sns.heatmap(conf_mat2,annot=True,fmt=\"d\")\n    # plt.show()\n\n    a=str(data_name)+str(name)+'.png'\n    fig.savefig(a,dpi=100)\n\n\n    cv1 = cross_validate(model, x_train, y_train, cv=10)\n    cv2 = cross_validate(model, x_test, y_test, cv=10)\n    cv3 = cross_validate(model, X, Y, cv=10)\n\n    print('train '+str(name)+'accuracy is: ',cv1['test_score'].mean())\n    print('test '+str(name)+' accuracy is: ',cv2['test_score'].mean())\n    print('validation all'+str(name)+'accuracy is: ',cv3['test_score'].mean())\n    print('')\n    \n    matris1 = calculate2(cm)\n    matris2 = calculate2(cm2)\n    matris3 = calculate2(conf_mat2)\n    \n    return matris1,matris2,matris3","87257a84":"randomforest=RandomForestClassifier(n_estimators=20,oob_score=False,random_state=43)\nknn=KNeighborsClassifier(n_neighbors=4)\nlog_class=LogisticRegression()  \nclf = DecisionTreeClassifier()","b8a5f3c2":"matris1,matris2,matris3=training(randomforest,\"randomForest\",4,3,1)\nmatris11,matris22,matris33=training(knn,\"knn\",4,3,4)\nmatris111,matris222,matris333=training(log_class,\"logisticReg\",4,3,7)\nmatris1111,matris2222,matris3333=training(clf,\"clf\",4,3,10)\nplt.show()","23d34d09":"import graphviz\nfrom sklearn.tree import export_graphviz\n\ntarg_names = ['Yes','No']\n\ndata = export_graphviz(clf,out_file=None,feature_names=feature_names,class_names=targ_names,   \n                         filled=True, rounded=True,  \n                         special_characters=True)\ngraph = graphviz.Source(data)\ngraph","3138c39b":"Model de\u011ferlendirme\nS\u0131n\u0131fland\u0131r\u0131c\u0131n\u0131n veya modelin \u00e7e\u015fitlerin t\u00fcr\u00fcn\u00fc ne kadar do\u011fru tahmin edebilece\u011fini tahmin edelim.\n\nDo\u011fruluk, ger\u00e7ek test seti de\u011ferleri ve \u00f6ng\u00f6r\u00fclen de\u011ferler kar\u015f\u0131la\u015ft\u0131r\u0131larak hesaplanabilir.","ec9c3bbb":"\u00d6znitelik Se\u00e7imi\nBurada, verilen s\u00fctunlar\u0131 ba\u011f\u0131ml\u0131 (veya hedef de\u011fi\u015fken) ve ba\u011f\u0131ms\u0131z de\u011fi\u015fken (veya \u00f6zellik de\u011fi\u015fkenleri) olmak \u00fczere iki t\u00fcr de\u011fi\u015fkene b\u00f6lmeniz gerekir.","685cbf03":"Veri B\u00f6lme\nModel performans\u0131n\u0131 anlamak i\u00e7in, veri setini bir e\u011fitim setine ve bir test setine b\u00f6lmek iyi bir stratejidir.","d56f6ccf":"**DESICION TREE CLASSIFIER - KARAR AGACI SINIFLANDIRMA**","09376b97":"Verileri y\u00fckleme\n\u0130lk \u00f6nce gerekli veri setini panda k\u00fct\u00fcphanesi CSV okuma fonksiyonunu kullanarak y\u00fckleyelim.","c4bad025":"kullanaca\u011f\u0131m\u0131z hesaplama ve training fonksiyonlar\u0131n\u0131 olu\u015ftural\u0131m","5bf81780":"Gerekli K\u00fct\u00fcphaneleri \u0130\u00e7e Aktarma\n\u0130lk \u00f6nce gerekli k\u00fct\u00fcphaneleri y\u00fckleyelim.","15466209":"**Karar A\u011fa\u00e7lar\u0131n\u0131 G\u00f6rselle\u015ftirme**","400076f3":"Normalize","50355675":"Karar A\u011fac\u0131 Modeli Olu\u015fturma\nScikit-learn kullanarak bir Karar A\u011fac\u0131 Modeli olu\u015ftural\u0131m."}}