{"cell_type":{"9a9c5cc2":"code","2789e4c0":"code","7823b140":"code","4ffa1466":"code","c26bdf82":"code","544bd83c":"code","b5e67882":"code","756439e6":"code","a82887ec":"code","b342d468":"code","30c4e537":"code","4f89faf7":"code","17856c81":"code","a8c3ddf5":"code","d18842b5":"code","2e12286e":"code","d0f4d306":"code","b7fdf3e6":"code","8139e6d8":"code","a1f01060":"code","b364b7a0":"code","71d8bff0":"code","584d7ac2":"code","7fece806":"code","df79970d":"code","9a3c0af9":"code","11aa2088":"code","136a3f0f":"code","075a9637":"code","1117de37":"code","b0837c05":"code","50d05966":"code","8414c739":"code","88063a5d":"code","c68eafa5":"code","e7ef838e":"code","1de6002c":"code","e82823c5":"code","e73f3c4c":"markdown","4dd73126":"markdown","63b294f5":"markdown","945f14fc":"markdown","cbac6737":"markdown","b9b8c81b":"markdown","c7aef978":"markdown","8b4bc6d1":"markdown","c2ad3755":"markdown","a7b73d23":"markdown","5a797720":"markdown","d54af721":"markdown","5490c36b":"markdown","a0a5c2fd":"markdown","0fabade9":"markdown","ef2206c6":"markdown","3bac934f":"markdown","b33becc9":"markdown","fdd1e024":"markdown","1a77eee8":"markdown","e982699e":"markdown","4da75746":"markdown","8d3b0b45":"markdown","58181d16":"markdown","a8c12c95":"markdown","fc3c5766":"markdown","668df19b":"markdown","f21fd1b0":"markdown","49d702c3":"markdown","eac02585":"markdown","f5048e30":"markdown","e5569aa3":"markdown","376c8487":"markdown","4ad6eecd":"markdown"},"source":{"9a9c5cc2":"#import findspark","2789e4c0":"#findspark.init('\/home\/davinci\/spark-2.4.5-bin-hadoop2.7')","7823b140":"!pip install pyspark  #for installing spark in kaggle kernel\nfrom pyspark.sql import SparkSession","4ffa1466":"# May take a little while on a local computer\nspark = SparkSession.builder.appName(\"Basics\").getOrCreate()","c26bdf82":"#This is a dataset available online \n# Might be a little slow locally\ndf = spark.read.json('..\/input\/peoplejson1\/people.json')","544bd83c":"# Note how data is missing!\ndf.show()","b5e67882":"df.printSchema()","756439e6":"from pyspark.sql.types import StructField,StringType,IntegerType,StructType","a82887ec":"data_schema = [StructField(\"age\", IntegerType(), True),StructField(\"name\", StringType(), True)]\nfinal_struc = StructType(fields=data_schema)\ndf = spark.read.json('..\/input\/peoplejson1\/people.json', schema=final_struc)\ndf.printSchema()","b342d468":"df.columns","30c4e537":"df.head(2) #by default shows 1 row","4f89faf7":"print(df['age'])","17856c81":"print(df.select('age'))","a8c3ddf5":"df.select('age').show()","d18842b5":"df.select(['age','name']).show()","2e12286e":"# Adding a new column which is copied from an old column.\ndf.withColumn('newage',df['age']).show()","d0f4d306":"# Renaming a column\ndf.withColumnRenamed('age','supernewage').show()","b7fdf3e6":"df.withColumn('doubleage',df['age']*4).show()","8139e6d8":"# Let Spark know about the header and infer the Schema types!\ndf = spark.read.csv('..\/input\/applstock\/appl_stock.csv',inferSchema=True,header=True)","a1f01060":"df.show()","b364b7a0":"# Using SQL\ndf.filter(\"Close<500\").show()","71d8bff0":"# Using SQL with .select()\ndf.filter(\"Close<500\").select(['Open','Close']).show()","584d7ac2":"# Using normal df methods.\ndf.filter(df[\"Close\"] < 200).show()","7fece806":"# Make sure to add in the parenthesis separating the statements!\ndf.filter( (df[\"Close\"] < 200) & (df['Open'] > 200) ).show()","df79970d":"# Make sure to add in the parenthesis separating the statements!\ndf.filter( (df[\"Close\"] < 200) | (df['Open'] > 200) ).show()","9a3c0af9":"# Make sure to add in the parenthesis separating the statements!\ndf.filter( (df[\"Close\"] < 200) & ~(df['Open'] < 200) ).show()","11aa2088":"df.filter(df[\"Low\"] == 197.16).show()","136a3f0f":"df = spark.read.csv(\"..\/input\/containsnull1\/ContainsNull.csv\",header=True,inferSchema=True)","075a9637":"df.show()","1117de37":"# Drop any row that contains missing data\ndf.na.drop().show()","b0837c05":"# Has to have at least 2 NON-null values\ndf.na.drop(thresh=2).show()","50d05966":"df.na.drop(subset=[\"Sales\"]).show()","8414c739":"df.na.drop(how='any').show()","88063a5d":"df.na.drop(how='all').show()","c68eafa5":"df.na.fill('NEW VALUE').show()","e7ef838e":"df.na.fill(0).show()","1de6002c":"df.na.fill('No Name',subset=['Name']).show()","e82823c5":"from pyspark.sql.functions import mean\nmean_val = df.select(mean(df['Sales'])).show()\n\n","e73f3c4c":"### 2.3) Grabbing the data","4dd73126":"There are data types that makes infering of  schema easier (like csv ). \n\nStill there is an option to define our own schema and can read the datasets in that schema.\n\nSpark has all the tools you need for this, it just requires a very specific structure:","63b294f5":"# 6) Conclusion\n\nAs you have seen spark is a good way to work with huge datasets.Spark helps to solve the problem of larger processing times by using parallelization approach. \n\nThe spark topic is huge.I wont be able to show everthing to you in one notebook. My sole purpose of creating this notebook was to introduce you to Pyspark and the basic operations on datasets using pyspark. I hope that is fulfilled. \n\nIn the upcoming notebooks I'll be diving into the spark ML lib library used for machine learning and will introduce you to various machine learning algorithms using pyspark.\n\n1). Linear Regression.\n\n\n2). Logistic Regression.\n\n\n3). Decision Trees & Random forests.\n\n\n4). K-means Clustering.\n\n\n5). Natural Language Processing.\n\n\n\nand more...\n\n","945f14fc":"# 1)  Introduction to pyspark\n\nThis is a begginer friendly notebook for people who want to dive into the world of big data and datascience. As the datasets becomes more and more bigger, the need for bigdata technologies such as hadoop, spark etc.. increases.In my research I found spark to be the best one among those technologies. This notebook is written for absolute begginers in spark. This notebook will be accompanied by several notebooks explaining more advanced topics in pyspark.\n     \n\nApache Spark is a distributed framework that handle's Big Data analysis. Apache Spark is written in Scala and can be integrated with Python, Scala, R, SQL, Java  languages. Spark is basically a computational engine, that works with huge sets of data by processing them in parallel and batch systems.PySpark is the Python API of Apache Spark.I like to keep the introduction short and want to show how to work using pyspark. For curious minds i'll be explaining how spark works internally in section 7.\n\n\nThe main advantage of spark is that, it can do various machine learning tasks with ease.The Ml lib library which we see in the upcoming notebooks will help you to deal with datascience problems using huge datasets. \n","cbac6737":"To select more than one column, we can give the column names as a list","b9b8c81b":"More complicated operations to create new columns","c7aef978":"### 3.2) Filtering data using normal df methods.","8b4bc6d1":"### 3.1) Filtering Data using SQL\n\nA big ability of spark is quick filtering and searching capacity. Spark also allows us to use sql queries for filtering and other operations. So i'll be showing both sql and ordinary DF methods.","c2ad3755":"# 7) Resources\n\nFirst of all a big thanks to Jose Portilla and his course \"Spark and Python for big data using pyspark\" in udemy, for lifting of my yspark journe. Great course with lots of valuable materials and examples. \n\nhttps:\/\/spark.apache.org\/ : The spark website -- Literally have everything we need \n\n\nA lot of youtube videos and websites.\n\n\n\n\nHope to meet you soon in next notebook.","a7b73d23":"Usually you should specify what columns you want to fill with the subset parameter","5a797720":"# Table of Contents\n\n#### 1). Introduction.\n\n#### 2). Importing and checking Datasets.\n\n     2.1) Creating a DataFrame.\n     \n     2.2) Showing the data.\n     \n     2.3) Grabbing the data.\n     \n     2.4) Creating new columns.\n\n#### 3). Basics operations on dataframes.\n\n     3.1) Filtering data using SQL Queries.\n  \n     3.2) Filtering data using Dataframe methods.\n\n#### 4). Handling missing data using spark.\n\n     4.1) Keeping the missing data.\n  \n     4.2) Dropping the missing data.\n  \n     4.3) Filling the missing data.\n\n#### 5). How spark works internally.\n\n#### 6). Conclusion and further materials.\n\n#### 7). Resources\n\n\nFeel free to skip to sections as per your requirements.","d54af721":"# 3) Basic operations on Dataframes","5490c36b":"There are 2 types of functions .show() and .collect()\n\n*) .show()  : print the data and shows to us\n\n*) .collect() : can be used to assign data to a variable.","a0a5c2fd":"To show the columns","0fabade9":"# 2) Importing and Checking datasets.\n\nPost Spark version2.0, Spark introduced dataframes.These are like advanced version of tables with rows and columns,for easy handling of large datasets.\n\nThese dataframes are the same ones which you might have used in python or R with additional properties. Spark DataFrame expand on a lot of these concepts, allowing you to transfer that knowledge easily by understanding the simple syntax of Spark DataFrames.\n\n### 2.1) Creating a DataFrame\n\nFirst we need to start a SparkSession:\n\nThe below 2 commands are used to import findspark module which actually tells the program where spark folder (the one we downloads during installation) is residing in your computer.\n","ef2206c6":"### 4.1) Keeping the missing data\n\nHere we dont have to do anything. Spark already understands the missing value and gives it null.","3bac934f":"### 2.4) Creating new columns\n\nTo create new columns we can use .withcolumn()","b33becc9":"### 2.2) Showing the data","fdd1e024":"### 4.2) Drop the missing data\n\nWe can yse .na functions for missing data.\n\nThere are 3 parameters.\n\n    df.na.drop(how='any', thresh=None, subset=None)\n    \n    * param how: 'any' or 'all'.\n    \n        If 'any', drop a row if it contains any nulls.\n        If 'all', drop a row only if all its values are null.\n    \n    * param thresh: int, default None\n    \n        If specified, drop rows that have less than `thresh` non-null values.\n        This overwrites the `how` parameter.\n        \n    * param subset: \n        optional list of column names to consider.","1a77eee8":"Then start the SparkSession","e982699e":"Notice how the data remains as a null.\n","4da75746":"In the above piece of code we defined a a list of data schema using the parmaeters. Then by using the structtype we made a schema out of it. Then in 3rd sentense, we used that schema to read our json file. ","8d3b0b45":"# The prologue\n\nLet me start with a situation from my life. When I reached an intermediate level of my datascience journey, I faced with this issue of huge datasets. The datasets are becoming bigger and with my laptop having average specs (I5--7th gen with 12 Gb of Ram), it feels like training of the models takes forever. Especially the memory demanding algorithms such as cross validation is taking heavy toll on my lap and me (as i have to run the algorithm over night and this makes me wakeup several times in the middle of night to check for execution completion).  \n\nSo to tackle this situation I found several methods \n\n*) AWS --- Costly but effective --- allows you to assign huge resources for your algorithms\n\n*) paid Kernels ---- Same as Aws \n\n*) ........................\n\n*) Last but not the least, we have spark --- free open source \n\nSo this notebook is my Entire Solution for handling huge datasets in data science, in other words a solution for better sleep at night. \n","58181d16":"A very common practice is to fill values with the mean value for the column, for example:","a8c12c95":"We have to create the list of Structure fields\n    * :param name: string, name of the field.\n    * :param dataType: :class:`DataType` of the field.\n    * :param nullable: boolean, whether the field can be null (None) or not.","fc3c5766":"### 4.3) Fill the missing values\n\nWe can also fill the missing values with new values. If you have multiple nulls across multiple data types, Spark is actually smart enough to match up the data types. For example:","668df19b":"To show the rows","f21fd1b0":"We will first need to get the data from a file (or connect to a large distributed file like HDFS, we'll talk about this later once we move to larger datasets on AWS EC2). Here i'm importing data from a json file","49d702c3":"Spark will automatically set null value for missing data.","eac02585":"# 5) How spark works internally.\n\n\n\nYou might have thought like why this session is kept here instead of placing it in the beginning. The sole purpose of it is that, this section explains how spark works internally and to understand we should know some terms such as sparkcontest and all which you will be quite familiar by now.\n\n\n\nThe whole code you have written for execution is called as driver program. Spark runs this programs on various clusters known as nodes. This Parallelization is the one helping you to achieve greater processing speeds. Spark uses executors for this. If you are using shells and writting the programs in an interactive way, these shells are considered as driver programs by itself. The next thing is sc -- the spark contest (we have used it in our code). This is actually the linkage between the driver program and the multiple executors. So whenever we reads a file the spark contest internally links to all the nodes. \n\n\n\nThis is a basic introduction of how spark works internally.\n","f5048e30":"## Preknowledge requirement\n\n\n* Spark --- Begginer (This notebook is for absolute beginners of spark. For those who use spark already can still take some knowledge as we all think differently)\n\n* Datascience --- Beginner, intermediate , advanced ( only thing is you should be new\/intermediate to spark )\n\n* Python --- Should love it.","e5569aa3":"when we ran the above command spark understood the schema of the dataframe. This is an handy tool while using some datasets.","376c8487":"As you can see this returns a column object. But it is far less usefull. we can use .select() function to import it as a dataframe.","4ad6eecd":"# 4) Handling Missing Data\n\nThere will be missing data or null data in your datasets. SO you can handle these missing data in three ways\n\n    *) Keep the missing data points.\n    *) Drop them missing data points.\n    *) Fill them in with some other value.\n\n"}}