{"cell_type":{"14f13c8e":"code","6ae4ebb7":"code","e53ac468":"code","071fae65":"code","c0a93734":"code","dea40a48":"code","f124f14f":"code","a6f33ab9":"code","91e53e0e":"code","294a4d58":"code","6c9ce017":"code","21d8628b":"code","185e8cfe":"code","4a584218":"code","bf3d5e6e":"code","4e819ee1":"code","ac221a7e":"code","e5a1a28b":"code","92db01d2":"code","ff006845":"code","85263b77":"code","f2603a09":"code","145e2f63":"code","fb01ec8d":"code","d72000ee":"code","8e89c4b4":"code","f396fb05":"code","7ff5afed":"code","109a1856":"markdown"},"source":{"14f13c8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ae4ebb7":"train = pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv\")\ntrain.head()","e53ac468":"train.nunique()","071fae65":"train[\"No_of_topics\"] = train[\"Computer Science\"]+train[\"Physics\"]+train[\"Mathematics\"]+train[\"Statistics\"]+train[\"Quantitative Biology\"]+train[\"Quantitative Finance\"]\ntrain[train[\"No_of_topics\"] > 1]   ","c0a93734":"train.No_of_topics.value_counts()","dea40a48":"train[\"content\"] = train[\"TITLE\"]+train[\"ABSTRACT\"]\ntrain.drop(labels = [\"ID\",\"TITLE\",\"ABSTRACT\",\"No_of_topics\"],axis=1,inplace = True)\ntrain.head()","f124f14f":"from collections import Counter\ndef vocab(texts):\n    cnt = Counter()\n    for row in texts.values:\n        for i in row.split():\n            cnt[i] += 1\n    return len(cnt)\nvocab_size = vocab(train.content)","a6f33ab9":"from sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn import metrics\n\n\nlabels = ['Computer Science', 'Physics', 'Mathematics','Statistics', \n          'Quantitative Biology', 'Quantitative Finance']\n\nfor label in labels:\n    print(label)\n    print('')\n    print('Value counts:')\n    print(train[label].value_counts())\n\n    X = train['content']\n    y = train[label]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0, test_size=0.33)\n    \n    text_clf = Pipeline([('tfidf', TfidfVectorizer()),\n                         ('clf', LinearSVC()),\n    ])\n\n    text_clf.fit(X_train, y_train)  \n\n    predictions = text_clf.predict(X_test)\n\n    print(metrics.confusion_matrix(y_test,predictions))\n    print('')\n    print(metrics.classification_report(y_test,predictions))\n    print('')\n    print('')\n    print('')\n    print('')","91e53e0e":"import matplotlib.pyplot as plt\n\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 10\nfig_size[1] = 8\nplt.rcParams[\"figure.figsize\"] = fig_size\ntrain_labels = train[['Computer Science', 'Physics', 'Mathematics','Statistics','Quantitative Biology', 'Quantitative Finance']]\ntrain_labels.sum(axis=0).plot.bar()","294a4d58":"import re\ndef preprocess_text(sen):\n    # Remove punctuations and numbers\n    sentence = re.sub('[^a-zA-Z]', ' ', sen)\n\n    # Single character removal\n    sentence = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', sentence)\n\n    # Removing multiple spaces\n    sentence = re.sub(r'\\s+', ' ', sentence)\n\n    return sentence\n","6c9ce017":"X = []\nsentences = list(train[\"content\"])\nfor sen in sentences:\n    X.append(preprocess_text(sen))\ny = train_labels.values\ny\n","21d8628b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras_preprocessing.sequence import pad_sequences","185e8cfe":"tokenizer = Tokenizer(num_words=5000)\ntokenizer.fit_on_texts(X_train)\n\nX_train = tokenizer.texts_to_sequences(X_train)\nX_test = tokenizer.texts_to_sequences(X_test)\n\nvocab_size = len(tokenizer.word_index) + 1\n\nmaxlen = 200\n\nX_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\nX_test = pad_sequences(X_test, padding='post', maxlen=maxlen)","4a584218":"from numpy import array\nfrom numpy import asarray\nfrom numpy import zeros\n\nembeddings_dictionary = dict()\n\nglove_file = open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.200d.txt', encoding=\"utf8\")\n\nfor line in glove_file:\n    records = line.split()\n    word = records[0]\n    vector_dimensions = asarray(records[1:], dtype='float32')\n    embeddings_dictionary[word] = vector_dimensions\nglove_file.close()\n\nembedding_matrix = zeros((vocab_size, 200))\nfor word, index in tokenizer.word_index.items():\n    embedding_vector = embeddings_dictionary.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[index] = embedding_vector","bf3d5e6e":"from keras.layers import Embedding,Dense,GlobalMaxPool1D,Dropout,Flatten,Bidirectional,LSTM\nfrom keras.models import Sequential\n# Model 1\n# deep_inputs = Input(shape=(maxlen,))\n# embedding_layer = Embedding(vocab_size, 200, weights=[embedding_matrix], trainable=False)(deep_inputs)\n# LSTM_Layer_1 = LSTM(128)(embedding_layer)\n# maxpool = GlobalMaxPooling1D()\n# dense_layer2 =  Dense(128, activation='relu')(maxpool)\n# dense_layer_1 = Dense(6, activation='sigmoid')(LSTM_Layer_1)\n# model = Model(inputs=deep_inputs, outputs=dense_layer_1)\n# Model 2\nmodel=Sequential([Embedding(vocab_size,200,input_length=maxlen,weights=[embedding_matrix], trainable=False),\n                 Bidirectional(LSTM(128,return_sequences=True)),\n                 GlobalMaxPool1D(),\n                  Dense(128,activation = 'relu'),\n                 Dense(64,activation='relu'),\n                  Dense(6,activation='sigmoid')\n                 ])\n\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])","4e819ee1":"model.summary()","ac221a7e":"from keras.utils import plot_model\nplot_model(model, to_file='model_plot4a.png', show_shapes=True, show_layer_names=True)","e5a1a28b":"history = model.fit(X_train, y_train, batch_size=128, epochs=5, verbose=1, validation_split=0.2)\n","92db01d2":"score = model.evaluate(X_test, y_test, verbose=1)\n\nprint(\"Test Score:\", score[0])\nprint(\"Test Accuracy:\", score[1])","ff006845":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\n\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\n\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train','test'], loc='upper left')\nplt.show()","85263b77":"test.head()","f2603a09":"test['content'] = test[\"TITLE\"]+test[\"ABSTRACT\"]\ntest.drop(labels = [\"ID\",\"TITLE\",\"ABSTRACT\"],axis=1,inplace = True)\ntest.head()\n","145e2f63":"test_df = []\nrows = list(test.content)\nfor sent in rows:\n    test_df.append(preprocess_text(sent))\n    \n#     return rows\n# rows","fb01ec8d":"# from keras.preprocessing.text import pad_sequences,texts_to_sequences\ntokenizer.fit_on_sequences(test_df)\nX_test = tokenizer.texts_to_sequences(test_df)\nX_test = pad_sequences(X_test,maxlen = 200,padding = 'post')\n","d72000ee":"preds = model.predict(X_test)\nfor arr in preds:\n    for i in range(len(arr)):\n        if arr[i]>0.5:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n","8e89c4b4":"preds = preds.astype(\"int32\")\npreds","f396fb05":"df = pd.DataFrame(data = preds,columns = ['Computer Science', 'Physics', 'Mathematics','Statistics','Quantitative Biology', 'Quantitative Finance'])\ndf.head()","7ff5afed":"sample = pd.read_csv(\"..\/input\/janatahack-independence-day-2020-ml-hackathon\/sample_submission_UVKGLZE.csv\")\nsample\nfinal_df = pd.DataFrame({\"ID\":sample.ID,})\nfinal = pd.concat([final_df,df],axis=1)\nfinal.to_csv(\"submission.csv\",index = False)\nprint(final.shape)\nfinal.head()","109a1856":"# Topic Modeling for Research Articles \n\nResearchers have access to large online archives of scientific articles. As a consequence, finding relevant articles has become more difficult. Tagging or topic modelling provides a way to give token of identification to research articles which facilitates recommendation and search process.\n\nGiven the abstract and title for a set of research articles, predict the topics for each article included in the test set. \n\nNote that a research article can possibly have more than 1 topic. The research article abstracts and titles are sourced from the following 6 topics: \n\n1. Computer Science\n\n2. Physics\n\n3. Mathematics\n\n4. Statistics\n\n5. Quantitative Biology\n\n6. Quantitative Finance"}}