{"cell_type":{"59f64a24":"code","132de1ea":"code","016baad1":"code","a5481243":"code","f1b03310":"code","1b740663":"markdown","b1339cce":"markdown","3acef4dc":"markdown","09c37091":"markdown","d69da11b":"markdown","beb80053":"markdown"},"source":{"59f64a24":"import keras.backend as K\nimport numpy as np\nfrom keras import Input, layers\nfrom keras.models import Model\n","132de1ea":"# custom filter\ndef my_filter(shape, dtype=None):\n\n    f = np.array([\n            [[[1]], [[0]], [[-1]]],\n            [[[1]], [[0]], [[-1]]],\n            [[[1]], [[0]], [[-1]]]\n        ])\n    assert f.shape == shape\n    return K.variable(f, dtype='float32')","016baad1":"input_mat = np.array([\n    [ [4], [9], [2], [5], [8], [3] ],\n    [ [3], [6], [2], [4], [0], [3] ],\n    [ [2], [4], [5], [4], [5], [2] ],\n    [ [5], [6], [5], [4], [7], [8] ],\n    [ [5], [7], [7], [9], [2], [1] ],\n    [ [5], [8], [5], [3], [8], [4] ]\n])\n\n# we need to give the batch size. \n# here we will just add a dimension at the beginning which makes batch size=1\ninput_mat = input_mat.reshape((1, 6, 6, 1))","a5481243":"def build_model():\n    input_tensor = Input(shape=(6,6,1))\n\n    x = layers.Conv2D(filters=1, \n                      kernel_size = 3,\n                      kernel_initializer=my_filter,\n                      strides=2, \n                      padding='valid') (input_tensor)\n\n    model = Model(inputs=input_tensor, outputs=x)\n    return model","f1b03310":"model = build_model()\nout = model.predict(input_mat)\nprint(out)\n","1b740663":"Suppose we want to apply a 3x3 custom filter onto an 6x6 image.\n![](https:\/\/i.stack.imgur.com\/iGfcD.png)","b1339cce":"# Dummy conv model where we will use our custom filter","3acef4dc":"# Testing","09c37091":"Dummy example input image (it is 1 channel image. So dimension will be 6x6x1. \n\nHere, pixel values are random integer. Generally pixel values should be 0 to 255 or 0.0 to 1.0.)","d69da11b":"# Definition of the custom filter","beb80053":"# Imports "}}