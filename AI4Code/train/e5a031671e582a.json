{"cell_type":{"e20d2b75":"code","2ff3c7ac":"code","68c0a760":"code","0f9ba767":"code","006f44e2":"code","a91e7645":"code","25d94980":"code","096f493f":"code","c36e93a9":"code","602ee01f":"markdown"},"source":{"e20d2b75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom pandas.plotting import lag_plot\nfrom pandas import datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nimport warnings\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ff3c7ac":"df = pd.read_csv(\"..\/input\/taketwo-interactive-stock-data\/TTWO.csv\")\ndf.head()","68c0a760":"df.count()","0f9ba767":"\nplt.figure()\nlag_plot(df['Adj Close'], lag=3)\nplt.title('Take Two Stock - Autocorrelation plot with lag = 3')\nplt.show()","006f44e2":"#Test train split\ntrain_data, test_data = df[0:int(len(df)*0.7)], df[int(len(df)*0.7):]\ntraining_data = train_data['Adj Close'].values\ntest_data = test_data['Adj Close'].values\nhistory = list(training_data)\nmodel_predictions = []\nN_test_observations = len(test_data)","a91e7645":"#Fitting ARIMA model with order 4,1,0\nfor time_point in range(N_test_observations):\n    model = ARIMA(history, order=(4,1,0))\n    #warnings.filterwarnings('ignore', 'statsmodels.tsa.arima_model.ARIMA',\n     #                   FutureWarning)\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    model_predictions.append(yhat)\n    true_test_value = test_data[time_point]\n    history.append(true_test_value)","25d94980":"MSE_error = mean_squared_error(test_data, model_predictions)\nprint('Testing Mean Squared Error is {}'.format(str(round(MSE_error,2))))","096f493f":"test_set_range = df[int(len(df)*0.7):].index","c36e93a9":"plt.plot(test_set_range, model_predictions, color='blue', marker='o', linestyle='dashed',label='Predicted Price')\nplt.plot(test_set_range, test_data, color='red', label='Actual Price')\n\nplt.title('TAKE TWO Prices Prediction')\nplt.xlabel('Date')\nplt.ylabel('Prices')\nplt.legend()\nplt.show()","602ee01f":"# Lag Plot\nBased on the figure, we can determine if we there is any autocorrelation."}}