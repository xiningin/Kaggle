{"cell_type":{"81ddb968":"code","90c2c866":"code","63d981b3":"code","5fdd40a6":"code","e17f5588":"code","e3f66ec6":"code","d8a06f38":"code","fbe16097":"code","6edc0235":"code","05765f4c":"code","46eea8e8":"code","ab5e2a04":"code","47309919":"code","17615560":"code","8b152421":"markdown","6d088425":"markdown","2f725d21":"markdown","f9599606":"markdown","d3940564":"markdown"},"source":{"81ddb968":"import numpy as np\nimport pandas as pd\nimport json\nfrom pandas.io.json import json_normalize\nimport datetime\nimport os\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n%matplotlib inline","90c2c866":"print(os.listdir(\"..\/input\"))","63d981b3":"json_columns = ['totals']\nusecols = [ 'date', 'fullVisitorId', 'totals']\nfillnazero_columns = ['totals_totalTransactionRevenue', 'totals_transactionRevenue', 'totals_transactions']\nfloat_columns = ['totals_totalTransactionRevenue', 'totals_transactionRevenue', 'totals_transactions']","5fdd40a6":"train = pd.read_csv('..\/input\/train_v2.csv', parse_dates=['date'], converters={column: json.loads for column in json_columns}, \n                    dtype={'fullVisitorId': 'str'}, usecols=usecols)","e17f5588":"def process_json_columns(df, json_columns):\n    for column in json_columns:\n        normalized_column_df = json_normalize(df[column]) \n        normalized_column_df.columns = [f\"{column}_{subcolumn}\" for subcolumn in normalized_column_df.columns] \n        df = df.drop(column, axis=1).merge(normalized_column_df, right_index=True, left_index=True)\n    return df\n\ndef fillna(df, fillnazerocols):\n    df[fillnazerocols] = df[fillnazerocols].fillna(0)\n    return df\n\ndef change_dtypes_float(df, float_columns):\n    for c in float_columns:\n        df[c] = df[c].astype('float32')\n    return df\n\ntrain = process_json_columns(train, json_columns)\ntrain = change_dtypes_float(train, float_columns)\ntrain = fillna(train, fillnazero_columns)","e3f66ec6":"private = train[(train['date'] >= datetime.datetime(2017, 12, 1)) & (train['date'] <= datetime.datetime(2018, 1, 31))] \ntest = train[(train['date'] >= datetime.datetime(2017, 5, 1)) & (train['date'] <= datetime.datetime(2017, 10, 15))] \ngap = train[(train['date'] >= datetime.datetime(2017, 10, 16)) & (train['date'] <= datetime.datetime(2017, 11, 30))] ","d8a06f38":"def analysis_plot(private, test, gap):\n    fullVisitorId_private = pd.Index(private['fullVisitorId'].unique())\n    fullVisitorId_test = pd.Index(test['fullVisitorId'].unique())\n    private_revenue = private.groupby('fullVisitorId')['totals_totalTransactionRevenue'].sum()\n    gap_revenue = gap.groupby('fullVisitorId')['totals_totalTransactionRevenue'].sum()\n\n    data = [go.Bar(\n        x=[ '#Visitors in test that are in private', '#Visitors in private with revenue', \n            '#Visitors in private with revenue that are in test', '#Visitors in private with revenue that are in gap'],\n        y=[fullVisitorId_test.isin(fullVisitorId_private).sum(),\n            (private_revenue>0).sum(),\n            private_revenue[private_revenue>0].index.isin(test['fullVisitorId']).sum(),\n            gap_revenue[gap_revenue>0].index.isin(test['fullVisitorId']).sum()]                                                                                \n    )]\n    py.iplot(data, filename='basic-bar')\nanalysis_plot(private, test, gap)","fbe16097":"test = pd.read_csv('..\/input\/test_v2.csv', parse_dates=['date'], converters={column: json.loads for column in json_columns}, \n                    dtype={'fullVisitorId': 'str'}, usecols=usecols)","6edc0235":"test = process_json_columns(test, json_columns)\ntest = change_dtypes_float(test, float_columns)\ntest = fillna(test, fillnazero_columns)","05765f4c":"test['date'].min()","46eea8e8":"test['date'].max()","ab5e2a04":"full = train.append(test)","47309919":"private_recent = full[(full['date'] >= datetime.datetime(2018, 8, 15)) & (full['date'] <= datetime.datetime(2018, 10, 15))] \ntest_recent = full[(full['date'] >= datetime.datetime(2018, 1, 1)) & (full['date'] <= datetime.datetime(2018, 5, 13))] \ngap_recent = full[(full['date'] >= datetime.datetime(2018, 6, 14)) & (full['date'] <= datetime.datetime(2018, 8, 14))] ","17615560":"analysis_plot(private_recent, test_recent, gap_recent)","8b152421":"### The idea of this kernel is to question the possibility to predict target for _v2 by replicating private test set with 2017 train data . \n### There seems to be only 106 customers out of 329636 (0.032% of the customers in replicated public test) that are present in the replicated test set and also generated profit in private test.   ","6d088425":"### Analysis","2f725d21":"### Replicate test and private test based on 2017 data","f9599606":"### Replicate based on more recent data (seasonality is not accounted for)","d3940564":"### Read and process the data"}}