{"cell_type":{"735b706d":"code","33e1e63e":"code","958e1012":"code","6b029556":"code","6b3213da":"code","5f5503d2":"code","7dc6b1bc":"code","cec8d0c5":"code","fbcddfd2":"code","ad75602c":"code","b8b0f367":"code","88d60cb1":"code","deccbbb1":"code","cb9420d0":"code","381b38b2":"code","ecfce210":"code","4c20f57f":"code","80f9cf4f":"code","a92c36f7":"code","a237c638":"code","e6bce772":"code","4d30124d":"code","8f761ce6":"code","99a1028a":"code","2ac62ae1":"code","2b75177a":"markdown","f1e48cd1":"markdown","16606846":"markdown","3cc36677":"markdown","a79466ab":"markdown","e9331660":"markdown","eac2c83c":"markdown","fee526d4":"markdown"},"source":{"735b706d":"# Deep Learning package\nimport tensorflow as tf\n\n# Keras is high end API of tensorflow\nimport keras","33e1e63e":"# scalar with Tensor Rank=0, shape=0, default type: dtype :int32\ntf.constant(10)","958e1012":"# 202 doesnt come up as output, int8 has range of -128 to +127, i.e 2^8\nconst_1 = tf.constant(202, dtype='int8') #127 will come out to be 127\nconst_1","6b029556":"const_2 = tf.constant([2.,4.,8.,5.,9.,11.], dtype='float16')\nconst_2","6b3213da":"print(const_2.numpy()) #output in form of a list","5f5503d2":"print(const_2.shape)","7dc6b1bc":"const_3 = tf.constant([82,53,25,89,12,299], dtype='int16')\nconst_3","cec8d0c5":"const_4 = tf.constant([[10,20,30],\n                      [40,50,60],\n                      [11,7,19]], dtype='int8')\nconst_4","fbcddfd2":"const_4","ad75602c":"# Rank of Matrix = 3\nconst_5 = tf.constant([[[10,12,15],\n                      [21,33,34],\n                      [21,44,45]],\n                       \n                      [[16,17,23],\n                      [45,54,100],\n                      [34,48,96]]], dtype='int8')\nconst_5","b8b0f367":"# variable Declaration\n# Rank 0 variable declaration\nvar_1 = tf.Variable(0,dtype='int8')\nvar_1","88d60cb1":"var_1.numpy()","deccbbb1":"var_2 = tf.Variable([10, 12, 15, 18, 22],dtype='int16')\nvar_2","cb9420d0":"var_2.numpy()","381b38b2":"var_2 = tf.Variable([10, 12, 15, 18, 22],dtype='int16')\nvar_2","ecfce210":"weights = tf.Variable([[10, 12, 13, 16, 18, 19]], dtype ='float16')\nweights","4c20f57f":"X = tf.constant([[10, 20, 30, 40, 50, 60]], dtype='float16')\nX","80f9cf4f":"# Y = W * X\ntf.tensordot(X, weights)\n# Error is beacsue of matrix not following matrix multiplication rule","a92c36f7":"wt = tf.transpose(weights)\nwt","a237c638":"tf.tensordot(wt,X, axes=1)","e6bce772":"import keras\nkeras.__version__","4d30124d":"# Dense Neural Network - Multi Layer Network\nfrom keras.layers import Dense\n\n# Sequential - sequential neural networks\nfrom keras.models import Sequential\n\n# Optimizers\nfrom keras.optimizers import RMSprop","8f761ce6":"def build_model():\n    # Sequential Neural Network\n    model = Sequential()\n    # Input Layer\n    # Dense - Dense Neural Network, activation function, input_shape = number of features\n    # units = number of neurons\n    model.add(Dense(units =4, activation= 'relu', input_shape=[9]))\n    \n    # Hidden Layers\n    model.add(Dense(units =8, activation= 'relu'))\n    \n    # Output Layers\n    model.add(Dense(units = 1))\n    \n    # Model compiler\n    model.compile(optimizer = 'RMSProp', metrics = ['mean_squared_error'])\n    \n    return model","99a1028a":"model = build_model()","2ac62ae1":"model.summary()\n\n# Params - 40, 40 different weights and 40 different biases\n# 9*4 + 4 bias","2b75177a":"**Variable Declaration**","f1e48cd1":"**Vector**\n* Tensor Rank 1","16606846":"**Tensorflow Matrix**\n* Tensorflow Rank 2 - collection of vectors","3cc36677":"**Mathematical Operation**","a79466ab":"**Tensor**\n* Tensor is N-Dimensional representation of array of Data of various ranks (tensor rank) like:\n* scalar: tensor 0, vector: tensor 1, matrix tensor 2, tensor : rank3, tensor ...","e9331660":"**Dense Neural Netwrok**","eac2c83c":"**Keras - API For Tensorflow**","fee526d4":"**Tensor N-D array**\n* Collection of matrices"}}