{"cell_type":{"b6ccc4d9":"code","da4e1588":"code","5b348644":"code","8823d3c5":"code","344fd50a":"code","81194f4a":"code","0a92538c":"code","277abea7":"code","6a7582c3":"code","574300e3":"code","777fb80d":"code","f2f3f5da":"code","fb234e2f":"markdown"},"source":{"b6ccc4d9":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import StratifiedShuffleSplit\nimport xgboost as xgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\nimport regex as re\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15,15\nfrom sklearn.preprocessing import KBinsDiscretizer\nimport warnings\nwarnings.filterwarnings(\"ignore\")","da4e1588":"train_data = pd.read_csv('..\/input\/mathco\/train.csv')\n\ntrain_data = train_data[~train_data.duplicated()]","5b348644":"test_data = pd.read_csv('..\/input\/mathco\/test.csv')\n\ntest_data = test_data[~test_data.duplicated()]","8823d3c5":"train_data['Mileage'] = train_data['Mileage'].apply(lambda x :  float(re.findall(r'\\d{0,}', x)[0]))\n\ntrain_data['Doors'] = train_data['Doors'].apply(lambda x :  float(re.findall(r'\\d{1,}', x)[0]))\n\ntest_data['Mileage'] = test_data['Mileage'].apply(lambda x :  float(re.findall(r'\\d{0,}', x)[0]))\n\ntest_data['Doors'] = test_data['Doors'].apply(lambda x :  float(re.findall(r'\\d{1,}', x)[0]))\n\ntrain_data['Turbo'] = train_data['Engine volume'].apply(lambda x :len(re.findall('Turbo', x)))\n\ntest_data['Turbo'] = test_data['Engine volume'].apply(lambda x :len(re.findall('Turbo', x)))\n\ntrain_data['Engine volume']=train_data['Engine volume'].str.replace('Turbo','').astype(float)\n\ntest_data['Engine volume']=test_data['Engine volume'].str.replace('Turbo','').astype(float)\n\ntrain_data['Levy'] = train_data['Levy'].replace({'-':'0'}).astype(float)\n\n#train_data['Levy'] = train_data['Levy'].replace({0:train_data['Levy'].mean()})\n\ntrain_data['Levy'] = train_data['Levy'].replace({0:-1})\n\ntest_data['Levy'] = test_data['Levy'].replace({'-':'0'}).astype(float)\n\n#test_data['Levy'] = test_data['Levy'].replace({0:test_data['Levy'].mean()})\n\ntest_data['Levy'] = test_data['Levy'].replace({0:-1})","344fd50a":"def frequency_encoding(column_name,df):\n    fe_pol = (df.groupby(column_name).size()) \/ len(df)\n    return df[column_name].apply(lambda x : fe_pol[x])","81194f4a":"train_data['istrain'] = 1\n\ntest_data['istrain'] = 0\n\ncombined_data = pd.concat([train_data, test_data], axis = 0)","0a92538c":"combined_data['Mileage'] = combined_data['Mileage'].replace({0:combined_data['Mileage'].mean()})\nmileage_discretizer = KBinsDiscretizer(n_bins=125, encode='ordinal', strategy='quantile')\ncombined_data['Mileage_Bins'] =mileage_discretizer.fit_transform(combined_data['Mileage'].values.reshape(-1,1)).astype(int)","277abea7":"combined_data['f1'] = combined_data.groupby(['Levy'])['Airbags'].transform('mean')\ncombined_data['f2'] = combined_data.groupby(['Levy'])['Airbags'].transform('std').fillna(-1)\ncombined_data['f3'] = combined_data.groupby(['Model'])['Engine volume'].transform('nunique')\ncombined_data['f4'] = combined_data.groupby(['Mileage'])['Airbags'].transform('mean')\ncombined_data['f5'] = frequency_encoding('Mileage',combined_data)\ncombined_data['f6'] = combined_data.groupby(['Mileage'])['Gear box type'].transform('nunique')\ncombined_data['f7'] = combined_data.groupby(['Airbags'])['Manufacturer'].transform('nunique')\ncombined_data['f8'] =  combined_data.groupby(['Color'])['Cylinders'].transform('nunique')\ncombined_data['f9'] =  combined_data.groupby(['Fuel type'])['Mileage'].transform('mean')\ncombined_data['f10'] =  combined_data.groupby(['Fuel type'])['Mileage'].transform('std').fillna(-1)\ncombined_data['f11'] =  combined_data.groupby(['Category'])['Airbags'].transform('mean')\ncombined_data['f12'] =  combined_data.groupby(['Category'])['Cylinders'].transform('mean')\ncombined_data['f13'] =  combined_data.groupby(['Mileage_Bins'])['Mileage'].transform('median')\ncombined_data['f14'] =  combined_data.groupby(['Mileage_Bins'])['Cylinders'].transform('nunique')\ncombined_data['f15'] =  combined_data.groupby(['Mileage_Bins'])['Airbags'].transform('nunique')\ncombined_data['f16'] =  combined_data.groupby(['Manufacturer','Prod. year','Model'])['Cylinders'].transform('mean')\ncombined_data['f17'] =  combined_data.groupby(['Manufacturer','Prod. year','Model'])['Cylinders'].transform('nunique')\ncombined_data['f18'] =  combined_data.groupby(['Fuel type','Model'])['Mileage'].transform('nunique')\ncombined_data['f19'] =  combined_data.groupby(['Mileage','Levy'])['Cylinders'].transform('count')\ncombined_data['f20'] = combined_data.groupby(['Gear box type','Drive wheels'])['Mileage'].transform('mean')\ncombined_data['f21'] = combined_data.groupby(['Airbags'])['Prod. year'].transform('nunique')\ncombined_data['f22'] = combined_data.groupby(['Manufacturer'])['Engine volume'].transform(lambda x :x.mode()[0])","6a7582c3":"df_numeric = combined_data.select_dtypes(exclude=['object'])\n\ndf_obj = combined_data.select_dtypes(include=['object']).copy()\n    \nfor c in df_obj:\n    df_obj[c] = pd.factorize(df_obj[c])[0]\n    \ncombined_data = pd.concat([df_numeric, df_obj], axis=1)\n\ny = combined_data['istrain']\n\ncombined_data.drop('istrain', axis = 1, inplace = True)\n\ncombined_data = combined_data.drop(['Mileage','Mileage_Bins','Price','Model'], axis = 1)","574300e3":"skf = StratifiedShuffleSplit(n_splits = 5, random_state = 44,test_size =0.3)\nxgb_params = {\n        'learning_rate': 0.1, 'max_depth': 6,'subsample': 0.9,\n        'colsample_bytree': 0.9,'objective': 'binary:logistic',\n        'n_estimators':100, 'gamma':1,\n        'min_child_weight':4\n        }   \nclf = xgb.XGBClassifier(**xgb_params, seed = 10,use_label_encoder=False)   ","777fb80d":"def feature_importance(model, X_train):\n\n    fI = model.feature_importances_\n    \n    #print(fI)\n    \n    names = X_train.columns.values\n    \n    ticks = [i for i in range(len(names))]\n    \n    plt.bar(ticks, fI)\n    \n    plt.xticks(ticks, names,rotation = 90)\n    \n    plt.show()\n    \n    return fI","f2f3f5da":"scores = []\n\nfor train_index, test_index in skf.split(combined_data, y):\n       \n        x0, x1 = combined_data.iloc[train_index], combined_data.iloc[test_index]\n        \n        y0, y1 = y.iloc[train_index], y.iloc[test_index]        \n        \n        clf.fit(x0, y0, eval_set=[(x1, y1)],\n               eval_metric='logloss', verbose=False,early_stopping_rounds=10)\n                \n        prval = clf.predict_proba(x1)[:,1]\n        \n        feature_importance(clf,x0)\n        \n        metric = roc_auc_score(y1,prval)\n\n        scores.append(metric)\n        \n        print(metric)\n        \nprint('%.8f (%.8f)' % (np.array(scores).mean(), np.array(scores).std()))","fb234e2f":"* with model avg auc is 0.54\n* removing model brings auc down to 0.49\n* substituting Levy with mean cause auc to jump to 0.75\n* substituting Levy with 0 or -1 keeps auc at 0.49\n"}}