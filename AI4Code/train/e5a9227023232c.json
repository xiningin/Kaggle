{"cell_type":{"a0a75581":"code","93bd3eb6":"code","91d6f33d":"code","c569082f":"code","274a67cc":"code","d3349b1b":"code","a9b75e75":"markdown","c682c00a":"markdown","ed8a243a":"markdown","36412626":"markdown","31d9477d":"markdown","d53dcb17":"markdown"},"source":{"a0a75581":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import multivariate_normal\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score","93bd3eb6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nprint(train.shape, test.shape)","91d6f33d":"%%time\nMAGIC = 'wheezy-copper-turtle-magic'\ncols = [c for c in train.columns if c not in ['id', 'target', MAGIC]]\n\noof_pdf = np.zeros(len(train))\npreds_pdf = np.zeros(len(test))\n\nfor i in range(512):\n    if i%20==0: print(i, end=' ')\n    train2 = train[train[MAGIC]==i]\n    test2 = test[test[MAGIC]==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n\n    skf = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        train4 = train3[train_index]\n        target4 = train2['target'][train_index]\n\n        mean0 = np.mean(train4[target4 == 0], axis=0)\n        mean1 = np.mean(train4[target4 == 1], axis=0)\n        cov0 = np.cov(train4[target4 == 0], rowvar=False)\n        cov1 = np.cov(train4[target4 == 1], rowvar=False)\n        \n        pdf0 = multivariate_normal.pdf(train3[test_index], mean0, cov0)\n        pdf1 = multivariate_normal.pdf(train3[test_index], mean1, cov1)\n        oof_pdf[idx1[test_index]] = pdf1 \/ (pdf0 + pdf1)\n\n        pdf0 = multivariate_normal.pdf(test3, mean0, cov0)\n        pdf1 = multivariate_normal.pdf(test3, mean1, cov1)\n        preds_pdf[idx2] += pdf1 \/ (pdf0 + pdf1) \/ skf.n_splits\n\nprint('fin')\nprint(roc_auc_score(train['target'], oof_pdf))","c569082f":"%%time\noof_pdf_2 = np.zeros(len(train))\npreds_pdf_2 = np.zeros(len(test))\n\nfor i in range(512):\n    if i%20==0: print(i, end=' ')\n    train2 = train[train[MAGIC]==i]\n    test2 = test[test[MAGIC]==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n\n    target = train2['target'].values.copy()\n    p = 0.005\n    target[oof_pdf[idx1] < p] = 0\n    target[oof_pdf[idx1] > 1-p] = 1\n    \n    pred2 = preds_pdf[idx2]\n    q = 0.01\n    train3 = np.vstack([train3, test3[pred2 < q], test3[pred2 > 1-q]])\n    target = np.hstack([target, np.zeros((pred2 < q).sum()), np.ones((pred2 > 1-q).sum())])\n    \n    skf = StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, target):\n        train4 = train3[train_index]\n        target4 = target[train_index]\n\n        mean0 = np.mean(train4[target4 == 0], axis=0)\n        mean1 = np.mean(train4[target4 == 1], axis=0)\n        cov0 = np.cov(train4[target4 == 0], rowvar=False)\n        cov1 = np.cov(train4[target4 == 1], rowvar=False)\n\n        test_index = test_index[test_index < len(train2)]\n        if len(test_index) > 0:\n            pdf0 = multivariate_normal.pdf(train3[test_index], mean0, cov0)\n            pdf1 = multivariate_normal.pdf(train3[test_index], mean1, cov1)\n            oof_pdf_2[idx1[test_index]] += pdf1 \/ (pdf0 + pdf1)\n\n        pdf0 = multivariate_normal.pdf(test3, mean0, cov0)\n        pdf1 = multivariate_normal.pdf(test3, mean1, cov1)\n        preds_pdf_2[idx2] += pdf1 \/ (pdf0 + pdf1) \/ skf.n_splits\n\nprint('fin')\nprint(roc_auc_score(train['target'], oof_pdf_2))","274a67cc":"sample_submission = pd.read_csv('..\/input\/sample_submission.csv')\nsample_submission['target'] = preds_pdf_2\nsample_submission.to_csv('submission_02.csv', index=False)","d3349b1b":"import matplotlib.pyplot as plt\nplt.hist(preds_pdf_2, bins=100, log=True)\nplt.grid()\nplt.show()","a9b75e75":"# About this kernel\n* In this kernel, classifiers in sklearn are not used.\n* Probability was calculated using multivariate_normal.pdf of scipy.\n\n\n* multivariate_normal.pdf calculates probability density from means and covariances\n* I calculated two pdf, one of them is for target=0 (pdf0), and the other is for target=1 (pdf1).\n* The probability can calculated by pdf1 \/ (pdf0 + pdf1)\n\n\n* And these calculation finish in few minutes.","c682c00a":"# pseudo labeling","ed8a243a":"# submission","36412626":"update:\n\nVersion4: added some explanations and comments","31d9477d":"# Simple prediction","d53dcb17":"P.S.\n* Thank you every competitors, your kernels and discussions ware so helpful for me.\n* I hope this kernel would help someone someday.\n\nThank you."}}