{"cell_type":{"8af39e92":"code","2d092cb5":"code","3ec9fe01":"code","ac5150aa":"code","ece91d65":"code","5b994b9c":"code","10da1e7a":"code","7b890142":"code","6ff0a5fe":"code","bad3755d":"code","d0f0e436":"code","a7843c14":"code","c45f5eec":"code","1bf67726":"code","3c22f3c7":"code","e3b3037e":"code","edb6d24d":"code","c8bbbb98":"code","a5089879":"code","7014fafc":"code","6f086426":"code","27b0688f":"code","c976fb6e":"markdown","42e19476":"markdown","c47fba73":"markdown","c53dca9f":"markdown","26462bd4":"markdown","0b14754a":"markdown","408ebdaf":"markdown","9f51f834":"markdown","1651f98e":"markdown","c15e470e":"markdown","fffc3e4f":"markdown","f2bc0d2b":"markdown","922f331a":"markdown"},"source":{"8af39e92":"import pandas\nimport numpy\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nimport plotly.graph_objects as go\nimport datetime\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2d092cb5":"numpy.random.seed(7)","3ec9fe01":"dataframe = pandas.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndataframe.head()","ac5150aa":"dataframe = dataframe.drop(['State\/UnionTerritory', 'ConfirmedIndianNational', 'ConfirmedForeignNational', 'Cured', 'Deaths', 'Time', 'Sno'], axis=1)\ndataframe.head()","ece91d65":"dataframe['Date'] = pandas.to_datetime(dataframe['Date'], format='%d\/%m\/%y').dt.strftime('%Y-%m-%d')\ndataframe","5b994b9c":"gdf = dataframe.groupby('Date')\ndata = []\ndate = []\ncases = []\nfor name, df in gdf:\n    print(name)\n    date.append(name)\n    s = sum(df['Confirmed'].astype(float))\n    cases.append(s)\n    data.append([s])\ndata","10da1e7a":"len(data)","7b890142":"dataset = numpy.array(data)\ndataset.shape","6ff0a5fe":"dataset.shape","bad3755d":"for i in range(len(cases)-1, 1, -1):\n    cases[i] = cases[i] - cases[i-1]\n    dataset[i][0] = cases[i]","d0f0e436":"trace = go.Scatter(\n    x = date,\n    y = cases,\n    mode = 'lines',\n    name = 'Data'\n)\nlayout = go.Layout(\n    title = \"Covid 19 India\",\n    xaxis = {'title' : \"Date\"},\n    yaxis = {'title' : \"Confirmed Cases\"}\n)\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","a7843c14":"split_percent = 0.80\nsplit = int(split_percent*len(dataset))\nsplit","c45f5eec":"dataset_train = dataset[:split]\ndataset_test = dataset[split:]\n\ndate_train = date[:split]\ndate_test = date[split:]\n\nprint(len(dataset_train))\nprint(len(dataset_test))","1bf67726":"look_back = 3\ntrain_generator = TimeseriesGenerator(dataset_train, dataset_train, length=look_back, batch_size=1)     \ntest_generator = TimeseriesGenerator(dataset_test, dataset_test, length=look_back, batch_size=1)\ntrain_generator","3c22f3c7":"model = Sequential()\nmodel.add(\n    LSTM(10,\n        activation='relu',\n        return_sequences=True,\n        input_shape=(look_back,1))\n)\nmodel.add(LSTM(7, return_sequences=True, activation='relu'))\nmodel.add(LSTM(3, activation='relu'))\nmodel.add(Dense(1, activation='relu'))\nmodel.compile(optimizer='adam', loss='mse')","e3b3037e":"model.summary()","edb6d24d":"num_epochs = 200\nhistory = model.fit_generator(train_generator, epochs=num_epochs, verbose=1)","c8bbbb98":"prediction = model.predict_generator(test_generator)","a5089879":"dataset_train = dataset_train.reshape((-1))\ndataset_test = dataset_test.reshape((-1))\n\ntrace1 = go.Scatter(\n    x = date_train,\n    y = dataset_train,\n    mode = 'lines',\n    name = 'Data'\n)\ntrace2 = go.Scatter(\n    x = date_test,\n    y = prediction,\n    mode = 'lines',\n    name = 'Prediction'\n)\ntrace3 = go.Scatter(\n    x = date_test,\n    y = dataset_test,\n    mode='lines',\n    name = 'Ground Truth'\n)\nlayout = go.Layout(\n    title = \"Covid 19 India\",\n    xaxis = {'title' : \"Date\"},\n    yaxis = {'title' : \"Confirmed Cases\"}\n)\nfig = go.Figure(data=[trace1, trace2, trace3], layout=layout)\nfig.show()","7014fafc":"def predict(num_prediction, model):\n    prediction_list = dataset[-look_back:]\n    \n    for _ in range(num_prediction):\n        x = prediction_list[-look_back:]\n        x = x.reshape((1, look_back, 1))\n        out = model.predict(x)[0][0]\n        prediction_list = numpy.append(prediction_list, out)\n    prediction_list = prediction_list[look_back-1:]\n        \n    return prediction_list\n    \ndef predict_dates(num_prediction):\n    last_date = date[-1]\n    prediction_dates = pandas.date_range(last_date, periods=num_prediction+1).tolist()\n    return prediction_dates","6f086426":"num_prediction = 10\nforecast = predict(num_prediction, model).astype(int)\nforecast_dates = predict_dates(num_prediction)","27b0688f":"given_trace = go.Scatter(\n    x = date,\n    y = cases,\n    mode = 'lines',\n    name = 'Data' \n)\nforcast_trace = go.Scatter(\n    x = forecast_dates,\n    y = forecast,\n    mode = 'lines',\n    name = 'Data'\n)\nlayout = go.Layout(\n    title = \"Covid 19 India Forcast Information\",\n    xaxis = {'title' : \"Date\"},\n    yaxis = {'title' : \"Confirmed Cases\"}\n)\nfig = go.Figure(data=[given_trace, forcast_trace], layout=layout)\nfig.show()","c976fb6e":"# Forecasting\nOur testing shows the model is somewhat good. So we can move on to predicting the future or forecasting.\n> Foreshadowing: Since we are attempting to predict the future, there will be a great amount of uncertainty in the prediction.","42e19476":"**Graph to show confirmed cases recorded everyday.**","c47fba73":"**Predications can be wrong since we have limited inforrmation.**","c53dca9f":"# Since data are cummilative we need to find everday data\n**Subtract current data from previous data to get everyday data.**","26462bd4":"**So here we we set lookback n = 3**\nSo if our data is like this,\n> [1,2,3,4,5,6]\n\nthe required data format (n=3) would be this:\n* [1,2,3] -> [4]\n* [2,3,4] -> [5]\n* [3,4,5] -> [6]\n","0b14754a":"> Forecasting for longer duration is not feasible. So, let\u2019s forecast a 10 days confirmed cases.","408ebdaf":"**Load covid 19 india cases from 30 January 2020 to 12 May 2020**","9f51f834":"* **Remove unnecessary columns.**\n* **We need only date and Confirmed cases**","1651f98e":"* **Group the data based on date.**\n* **Sum up all confirmed cases on these dates recorded in different sates of India.**","c15e470e":"> Split data 80% to train the model and 20% to test the model.","fffc3e4f":"**Forecating covid confirm cases based on previous data on different dates**","f2bc0d2b":"# Create Model\n* We use LSTM to train our model\n* We use two layers of LSTM and one layer of dense (i.e simple nuurel network layer).\n* This model is used to predict fututre confirmed cases","922f331a":"**In timeseries predication we used previous time data to predict future data.**\n* Coming back to the format, at a given day x(t), the features are the values of x(t-1), x(t-2), \u2026., x(t-n) where n is look back."}}