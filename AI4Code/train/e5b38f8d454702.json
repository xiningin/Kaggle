{"cell_type":{"3f9aa0aa":"code","bdb7205a":"code","c239c675":"code","f9641ab7":"code","16493a38":"code","b39c1454":"code","9e1fd9ae":"code","20c9f97b":"code","192db82a":"code","141b515a":"code","a2da021c":"code","f296f20b":"code","76216ebd":"code","d43b7e43":"code","5fe5603c":"code","8e8978cf":"code","e4fbb4c6":"code","937bdc48":"code","cb57844d":"code","fea940e2":"code","ee6016d5":"code","786796f8":"markdown","fe5f7601":"markdown","a9d9b39e":"markdown","ecc2c568":"markdown","75eedfb2":"markdown","1e6f4a3a":"markdown","f9831cfd":"markdown"},"source":{"3f9aa0aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdb7205a":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf","c239c675":"ds = pd.read_csv('..\/input\/churn-modelling\/churn modelling.csv')\nds.head()","f9641ab7":"x = ds.iloc[:, 3:-1].values\ny = ds.iloc[:, -1].values","16493a38":"print(x)","b39c1454":"print(y)","9e1fd9ae":"#checking for null values\nds.isnull().sum()","20c9f97b":"#Label Encoding the \"Gender\" column\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nx[:, 2] = le.fit_transform(x[:, 2])","192db82a":"print(x)","141b515a":"#One Hot Encoding the \"Geography\" column\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\nx = np.array(ct.fit_transform(x))","a2da021c":"print(x)","f296f20b":"#Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","76216ebd":"#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","d43b7e43":"#Initializing the ANN\nann = tf.keras.models.Sequential()","5fe5603c":"#Adding the input layer and the first hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))","8e8978cf":"#Adding the second hidden layer\nann.add(tf.keras.layers.Dense(units=6, activation='relu'))","e4fbb4c6":"#Adding the output layer\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","937bdc48":"#Compiling the ANN\nann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","cb57844d":"#Training the ANN on the Training set\nann.fit(x_train, y_train, batch_size = 32, epochs = 100)","fea940e2":"#Predicting the Test set results\ny_pred = ann.predict(x_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","ee6016d5":"#Creating Confusion Matrix & checking accuracy\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","786796f8":"**Part 2: Building the ANN**","fe5f7601":"**ANN (churn prediction)** \nChurn is predicted in order to determine wheather the customer will leave the bank or not.\nThe dataset contains 13 independent variables and 1 dependent variable. (By using 2 hidden layers having 6 neurons each)","a9d9b39e":"**Part 1: Data Preprocessing**","ecc2c568":"**Accuracy = 86.2%**","75eedfb2":"**Part 4: Making the predictions and evaluating the model**","1e6f4a3a":"**Part 3: Traning the ANN**","f9831cfd":"No missing values"}}