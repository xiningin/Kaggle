{"cell_type":{"42197f94":"code","e70ace72":"code","db3d42ac":"code","b85f2c45":"code","8fe77d89":"code","5ed09e07":"code","078095f2":"code","fa7e7c90":"code","ffc070c4":"code","8a1cb384":"code","0225da1b":"markdown","94fbe84a":"markdown"},"source":{"42197f94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e70ace72":"import pandas as pd\nfrom sklearn.datasets import load_digits\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","db3d42ac":"digits = load_digits()\ndir(digits)","b85f2c45":"X = digits.data\nX.shape","8fe77d89":"y=digits.target\ny.shape","5ed09e07":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2,random_state=0)","078095f2":"knn=KNeighborsClassifier(n_neighbors=2,metric='euclidean',p=4)\nknn.fit(X_train,y_train)","fa7e7c90":"y_pred=knn.predict(X_test)\ny_pred","ffc070c4":"score=accuracy_score(y_test,y_pred)\nscore","8a1cb384":"cm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","0225da1b":"**Train , Test and Predict**","94fbe84a":"**Confusion Metrix**"}}