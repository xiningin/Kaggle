{"cell_type":{"cd7b5118":"code","9e90bb68":"code","f6bd1fae":"code","43dc2251":"code","a65d1568":"code","af980a2d":"code","1642368a":"code","7ed530d7":"code","a42818aa":"code","93bb8984":"code","7b6a4350":"code","80f739f5":"code","bb7ffac5":"code","bdfd8cc7":"code","407ad145":"code","a795642d":"code","2fe216c3":"code","6eb350f4":"code","197df304":"code","4d6fc28f":"code","f712cf94":"code","8a7ff805":"code","7550368d":"code","25c4793d":"code","2fa0c5f7":"code","369b7ecf":"code","32ede45d":"code","1a839ddf":"code","a4e18726":"code","0e47c8eb":"markdown","fe456fd3":"markdown","6143ffeb":"markdown","d5eee67f":"markdown","1accd086":"markdown"},"source":{"cd7b5118":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nimport itertools\nimport seaborn as sns\n\nimport joblib","9e90bb68":"class config:\n    \n    NUM_FOLDS = 5\n    \n    TRAIN_PATH = \"..\/input\/nmims-m2-batch-5\/train.csv\"\n    \n    TEST_PATH = \"..\/input\/nmims-m2-batch-5\/test.csv\"","f6bd1fae":"train = pd.read_csv(config.TRAIN_PATH)\ntest = pd.read_csv(config.TEST_PATH)","43dc2251":"print(f\"Train shape: {train.shape}\")\nprint(f\"Test shape: {test.shape}\")","a65d1568":"train.head()","af980a2d":"plt.figure(figsize=(12, 8))\nsns.heatmap(train.corr(), annot=True)","1642368a":"train.TravelInsurance.value_counts(normalize=True)","7ed530d7":"train['Employment Type'].value_counts()","a42818aa":"plt.figure(figsize=(12, 8))\nplt.hist(train.AnnualIncome)\nplt.xlabel(\"Income\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of annual income\")\nplt.show()","93bb8984":"print(f\"Variance in annual income before transformation: {train.AnnualIncome.var()}\")","7b6a4350":"train.info()","80f739f5":"test.loc[:, \"TravelInsurance\"] = -1\n\ndata = pd.concat([train, test]).reset_index(drop=True)\n\n# use log transformation on annualincome\ndata['AnnualIncome'] = data['AnnualIncome'].apply(lambda x: np.log(1 + x))\n\nnum_cols = [\"Age\", \"AnnualIncome\", \"FamilyMembers\"]\n\nfeatures_to_encode = [c for c in data.columns if c not in num_cols and c not in (\"id\", \"TravelInsurance\")]\n\nfor feature in features_to_encode:\n    encoder = preprocessing.LabelEncoder()\n    temp_col = data[feature].values\n    data.loc[:, feature] = encoder.fit_transform(temp_col)\n    \ntrain = data[data.TravelInsurance != -1].reset_index(drop=True)\ntest = data[data.TravelInsurance == -1].reset_index(drop=True)\ntest = test.drop(['TravelInsurance'], axis=1)","bb7ffac5":"train.head()","bdfd8cc7":"train.columns","407ad145":"test.head()","a795642d":"plt.figure(figsize=(12, 8))\nplt.hist(train.AnnualIncome)\nplt.xlabel(\"Income\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of annual income after transformation\")\nplt.show()","2fe216c3":"print(f\"Variance in annual income after log transformation: {train.AnnualIncome.var()}\")","6eb350f4":"def create_folds(df):\n    \n    df['kfold'] = -1\n    \n    df = df.sample(frac=1).reset_index(drop=True)\n    \n    y = df.TravelInsurance.values\n    \n    skf = model_selection.StratifiedKFold(config.NUM_FOLDS)\n    \n    for f, (t_, v_) in enumerate(skf.split(X=df, y=y)):\n        df.loc[v_, 'kfold'] = f\n    \n    return df","197df304":"train_folds = create_folds(train)\ntrain_folds.kfold.value_counts()","4d6fc28f":"from sklearn import linear_model\nfrom sklearn import tree\nimport lightgbm as lgbm\nimport xgboost as xgb\nimport catboost as cb\n\nmodel_dispatcher = {\n    \"lgbm_model\": lgbm.LGBMClassifier(n_jobs=-1),\n    \"xgboost_model\": xgb.XGBClassifier(n_jobs=-1),\n    \"catboost_model\": cb.CatBoostClassifier(verbose=0)\n}","f712cf94":"def run(df, fold, model, model_name, save_model=None):\n    \n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    val_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    xtrain = train_df.drop(['TravelInsurance', 'id', 'kfold'], axis=1)\n    xval = val_df.drop(['TravelInsurance', 'id', 'kfold'], axis=1)\n    \n    model.fit(xtrain, train_df.TravelInsurance)\n    \n    valid_preds = model.predict_proba(xval)[:, 1]\n    \n    score =  metrics.roc_auc_score(val_df.TravelInsurance.values, valid_preds)\n    \n    if save_model is not None:\n        if save_model in model_name:\n            print(f\"Saving {model_name} for fold {fold}\")\n            joblib.dump(model, f\"{model_name}_{fold}.bin\")\n    \n    return score","8a7ff805":"final_scores = {}\nfor model_name, model in model_dispatcher.items():\n    print(f\"Using {model_name}\")\n    scores = []\n    for fold in range(5):\n        score = run(train_folds, fold, model, model_name, save_model='lgbm')\n        scores.append(score)\n        \n    final_scores[model_name] = scores","7550368d":"final_df_scores = pd.DataFrame(final_scores)\nfinal_df_scores = final_df_scores.T\nfinal_df_scores.columns = ['f0', 'f1', 'f2', 'f3', 'f4']\nfinal_df_scores['CV'] = (final_df_scores[\"f0\"] + final_df_scores[\"f1\"] + final_df_scores[\"f2\"] + final_df_scores[\"f3\"] + final_df_scores[\"f4\"]) \/ 5\nfinal_df_scores","25c4793d":"# from sklearn import tree\n# plt.figure(figsize=(12,8))\n# tree.plot_tree(model_dispatcher['dt'],\n#                feature_names=list(train_folds.drop(['TravelInsurance', 'id', 'kfold'], axis=1).columns),\n#                class_names= [\"0\", \"1\"],\n#                filled = True)\n# plt.show()","2fa0c5f7":"sample_sub = pd.DataFrame()\nsample_sub['id'] = test['id']\n\nfor i in range(5):\n    model = joblib.load(f\"lgbm_model_{i}.bin\")\n    try:\n        test_preds += model.predict_proba(test.drop([\"id\"], axis=1))[:, 1]\n    except:\n        test_preds = model.predict_proba(test.drop([\"id\"], axis=1))[:, 1]\n# take average of 5 folds' predictions\ntest_preds \/= 5\nsample_sub['TravelInsurance'] = test_preds","369b7ecf":"sample_sub.head()","32ede45d":"print(\"Predictions value counts:\")\n((sample_sub.TravelInsurance > 0.5) * 1).value_counts(normalize=True)","1a839ddf":"plt.figure(figsize=(12, 8))\nplt.hist(sample_sub.TravelInsurance)\nplt.xlabel(\"Travel Insurance\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of predictions\")\nplt.show()","a4e18726":"sample_sub.to_csv(\"lgbm_log_income.csv\", index=False)","0e47c8eb":"# Cleaning\n\n- LabelEncoder\n- Using log transformation on AnnualIncome","fe456fd3":"# Create folds","6143ffeb":"# Modeling","d5eee67f":"# Model dispatcher","1accd086":"# Creating submission"}}