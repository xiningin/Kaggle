{"cell_type":{"1a91ac54":"code","1c82668c":"code","7da304ea":"code","9b501c8a":"code","4396b99f":"code","d58c1d95":"code","a77509ef":"code","975e0722":"code","3c22d601":"code","5168500b":"code","b2ed474c":"code","04a10ddd":"code","2d97623b":"code","c5df2b29":"code","08280bea":"code","7e3ff9b9":"code","5e62c2a6":"code","c129563d":"code","c1666288":"code","f4942ea2":"code","7e7587f5":"code","f9e844f7":"code","fdf29cfa":"code","39a8436a":"code","3ae6ab71":"code","b2db7bd6":"code","e2109b65":"code","45d1139b":"code","209f824e":"code","35b66dce":"code","4e42e173":"code","8b218a99":"code","aee8d058":"code","88885ade":"code","8c07317a":"code","e29451b0":"code","1c7fda2d":"code","258f6af5":"code","fe82d493":"code","46052309":"code","f31c84ff":"code","a25943fe":"code","f056a42f":"code","8b9afbc9":"code","aa79f30b":"code","0a39ba72":"code","e5bfec2f":"code","150ae742":"code","10d94632":"code","2e24baa0":"code","2c5ba2d7":"code","09ed88c6":"markdown","1da18efe":"markdown","a95723db":"markdown","c15f37bf":"markdown","1fefe842":"markdown","05eba196":"markdown","3a36cf16":"markdown","5a76b137":"markdown","dde3bc11":"markdown","f0c4cab7":"markdown","f326ca30":"markdown","5d8ec6c2":"markdown","e08512c7":"markdown","1ef3601a":"markdown","eccd1831":"markdown","6329126e":"markdown","ac6dc29c":"markdown","3d707c25":"markdown","2501cf35":"markdown","561aa6e7":"markdown","8571c1ec":"markdown","c0dbe7f8":"markdown","81ebbbfa":"markdown","3b0572a5":"markdown","2000558e":"markdown","d4b54b49":"markdown","4521ff24":"markdown","641eef75":"markdown","369c9923":"markdown","35bfc27f":"markdown","90897ee5":"markdown","a35e6e1b":"markdown","685b9917":"markdown"},"source":{"1a91ac54":"import numpy as np # linear algebrimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport os\n# Any results you write to the current directory are saved as output.","1c82668c":"%matplotlib inline \n\nimport matplotlib\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","7da304ea":"df= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf.head()","9b501c8a":"df.shape","4396b99f":"df.info()","d58c1d95":"df['ObservationDate'] = pd.to_datetime(df['ObservationDate'])\ndf['Last Update'] = pd.to_datetime(df['Last Update'])\ndf['Confirmed']=df['Confirmed'].astype('int')\ndf['Deaths']=df['Deaths'].astype('int')\ndf['Recovered']=df['Recovered'].astype('int')\n","a77509ef":"from datetime import date\nrecent=df[['ObservationDate']][-1:].max()\ndf_update=df.loc[df.ObservationDate==pd.Timestamp(recent['ObservationDate'])]\ndf_update","975e0722":"df_update.isnull().sum()","3c22d601":"df_update['Province\/State']=df_update.apply(lambda x: x['Country\/Region'] if pd.isnull(x['Province\/State']) else x['Province\/State'],axis=1)\ndf['Province\/State']=df.apply(lambda x: x['Country\/Region'] if pd.isnull(x['Province\/State']) else x['Province\/State'],axis=1)","5168500b":"df_update['Country\/Region']=df_update.apply(lambda x:'China' if x['Country\/Region']=='Mainland China' else x['Country\/Region'],axis=1)\ndf['Country\/Region']=df.apply(lambda x:'China' if x['Country\/Region']=='Mainland China' else x['Country\/Region'],axis=1)","b2ed474c":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf_update['ProvinceID'] = le.fit_transform(df_update['Province\/State'])\ndf_update['CountryID']=le.fit_transform(df_update['Country\/Region'])\ndf_update.head()","04a10ddd":"corr= df_update.corr()\nsns.heatmap(corr,annot=True)","2d97623b":"num_plot_global=num_plot.reset_index()\nnum_plot_global['Death Case Increase']=0\nnum_plot_global['Confirmed Case Increase']=0\nnum_plot_global['Confirmed Case Increase'][0]=0\nnum_plot_global['Death Case Increase'][0]=0\nfor i in range(1,num_plot_global.shape[0]):\n    num_plot_global['Confirmed Case Increase'][i]=-(num_plot_global.iloc[i-1][1]-num_plot_global.iloc[i][1])\n    num_plot_global['Death Case Increase'][i]=-(num_plot_global.iloc[i-1][3]-num_plot_global.iloc[i][3])\nnum_plot_global.tail()","c5df2b29":"india_cases_complete=df.loc[df['Country\/Region']=='India']\nindia_cases_complete['date'] = india_cases_complete['ObservationDate'].dt.date\nindia_cases_complete['date']=pd.to_datetime(india_cases_complete['date'])\nindia_cases_complete = india_cases_complete[india_cases_complete['date'] > pd.Timestamp(date(2020,1,21))]\nnum_plot = india_cases_complete.groupby('date')[\"Confirmed\", \"Recovered\", \"Deaths\"].sum()\nnum_plot.plot(figsize=(8,8),colormap='winter',title='Per Day statistics for India',marker='o')\nnum_plot_india=num_plot.reset_index()","08280bea":"num_plot_india['Confirmed Case Increase']=0\nnum_plot_india['Death Case Increase']=0\nnum_plot_india['Confirmed Case Increase'][0]=0\nnum_plot_india['Death Case Increase'][0]=0\nfor i in range(1,num_plot_india.shape[0]):\n    num_plot_india['Confirmed Case Increase'][i]=-(num_plot_india.iloc[i-1][1]-num_plot_india.iloc[i][1])\n    num_plot_india['Death Case Increase'][i]=-(num_plot_india.iloc[i-1][3]-num_plot_india.iloc[i][3])\nnum_plot_india.tail()","7e3ff9b9":"num_plot_india['Confirmed Case Increase'].plot(kind='bar',width=0.95,colormap='winter',figsize=(20,6),title='Confirmed Case Increase')\nplt.show()","5e62c2a6":"num_plot_india['Death Case Increase'].plot(kind='bar',width=0.95,colormap='winter',figsize=(20,6),title='Death Case Increase')\nplt.show()","c129563d":"from sklearn.preprocessing import LabelEncoder\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)\nle=LabelEncoder()\n\ndf.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\ndf = df.fillna('unknown')\ndf['Country'] = df['Country'].str.replace('US','United States')\ndf['Country'] = df['Country'].str.replace('UK','United Kingdom') \ndf['Country'] = df['Country'].str.replace('Mainland China','China')\ndf['Code']=le.fit_transform(df['Country'])\nvirus_data = df\n#print(virus_data.head())\n#print(len(virus_data))\n\ntop_country = virus_data.loc[virus_data['Date'] == virus_data['Date'].iloc[-1]]\ntop_country = top_country.groupby(['Code','Country'])['Confirmed'].sum().reset_index()\ntop_country = top_country.sort_values('Confirmed', ascending=False)\ntop_country = top_country[:50]\ntop_country_codes = top_country['Country']\ntop_country_codes = list(top_country_codes)\n#print(top_country)\n\ncountries = virus_data[virus_data['Country'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','Code','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n#print(countries_day)\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n\nchina = countries_day.loc[countries_day['Code']==43]\n\nnew_confirmed_cases_china = []\nnew_confirmed_cases_china.append( list(china['Confirmed'])[0] - list(china['Deaths'])[0] \n                           - list(china['Recovered'])[0] )\n\nfor i in range(1,len(china)):\n\n    new_confirmed_cases_china.append( list(china['Confirmed'])[i] - \n                                     list(china['Deaths'])[i] - \n                                     list(china['Recovered'])[i])\n    \n    \nitaly = countries_day.loc[countries_day['Code']==102]\n\nnew_confirmed_cases_ita = []\nnew_confirmed_cases_ita.append( list(italy['Confirmed'])[0] - list(italy['Deaths'])[0] \n                           - list(italy['Recovered'])[0] )\n\nfor i in range(1,len(italy)):\n    \n    new_confirmed_cases_ita.append( list(italy['Confirmed'])[i] - \n                                  list(italy['Deaths'])[i] - \n                                  list(italy['Recovered'])[i])\n    \n    \nskorea = countries_day.loc[countries_day['Code']==186]\n\nnew_confirmed_cases_skorea = []\nnew_confirmed_cases_skorea.append( list(skorea['Confirmed'])[0] - list(skorea['Deaths'])[0] \n                           - list(skorea['Recovered'])[0] )\n\nfor i in range(1,len(skorea)):\n    \n    new_confirmed_cases_skorea.append( list(skorea['Confirmed'])[i] - \n                                     list(skorea['Deaths'])[i] - \n                                    list(skorea['Recovered'])[i])\n    \n    \nindia = countries_day.loc[countries_day['Code']==96]\n\nnew_confirmed_cases_india = []\nnew_confirmed_cases_india.append( list(india['Confirmed'])[0] - list(india['Deaths'])[0] \n                           - list(india['Recovered'])[0] )\n\nfor i in range(1,len(india)):\n    \n    new_confirmed_cases_india.append( list(india['Confirmed'])[i] - \n                                     list(india['Deaths'])[i] - \n                                    list(india['Recovered'])[i])\n    \n\nspain = countries_day.loc[countries_day['Code']==188]\n\nnew_confirmed_cases_spain = []\nnew_confirmed_cases_spain.append( list(spain['Confirmed'])[0] - list(spain['Deaths'])[0] \n                           - list(spain['Recovered'])[0] )\n\nfor i in range(1,len(spain)):\n    \n    new_confirmed_cases_spain.append( list(spain['Confirmed'])[i] - \n                                     list(spain['Deaths'])[i] - \n                                    list(spain['Recovered'])[i])\n    \n\nus = countries_day.loc[countries_day['Code']==211]\n\nnew_confirmed_cases_us = []\nnew_confirmed_cases_us.append( list(us['Confirmed'])[0] - list(us['Deaths'])[0] \n                           - list(us['Recovered'])[0] )\n\nfor i in range(1,len(us)):\n    \n    new_confirmed_cases_us.append( list(us['Confirmed'])[i] - \n                                     list(us['Deaths'])[i] - \n                                    list(us['Recovered'])[i])\n    \n    \ngerman = countries_day.loc[countries_day['Code']==77]\n\nnew_confirmed_cases_german = []\nnew_confirmed_cases_german.append( list(german['Confirmed'])[0] - list(german['Deaths'])[0] \n                           - list(german['Recovered'])[0] )\n\nfor i in range(1,len(german)):\n    \n    new_confirmed_cases_german.append( list(german['Confirmed'])[i] - \n                                     list(german['Deaths'])[i] - \n                                    list(german['Recovered'])[i])\n    \np1=figure(plot_width=800, plot_height=550, title=\"COVID 2019 Trajectories for Countries\")\np1.grid.grid_line_alpha=0.3\np1.xaxis.axis_label = 'Total number of Confirmed Cases (Log scale)'\np1.yaxis.axis_label = 'Total number of active cases (Log scale)'\n\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=1)\n\np1.line(np.log(list(china['Confirmed'])), np.log(new_confirmed_cases_china), color='red', \n        legend_label='China', line_width=3)\np1.circle(np.log(list(china['Confirmed'])[-1]), np.log(new_confirmed_cases_china[-1]), size=5)\n\np1.line(np.log(list(italy['Confirmed'])), np.log(new_confirmed_cases_ita), color='blue', \n        legend_label='Italy', line_width=3)\np1.circle(np.log(list(italy['Confirmed'])[-1]), np.log(new_confirmed_cases_ita[-1]), size=5)\n\n\n\np1.line(np.log(list(skorea['Confirmed'])), np.log(new_confirmed_cases_skorea), color='violet', \n        legend_label='South Korea', line_width=3)\np1.circle(np.log(list(skorea['Confirmed'])[-1]), np.log(new_confirmed_cases_skorea[-1]), size=5)\n\n\np1.line(np.log(list(india['Confirmed'])), np.log(new_confirmed_cases_india), color='orange', \n        legend_label='India', line_width=3)\np1.circle(np.log(list(india['Confirmed'])[-1]), np.log(new_confirmed_cases_india[-1]), size=5)\n\np1.line(np.log(list(spain['Confirmed'])), np.log(new_confirmed_cases_spain), color='brown', \n        legend_label='Spain', line_width=3)\np1.circle(np.log(list(spain['Confirmed'])[-1]), np.log(new_confirmed_cases_spain[-1]), size=5)\n\np1.line(np.log(list(us['Confirmed'])), np.log(new_confirmed_cases_us), color='green', \n        legend_label='United States', line_width=3)\np1.circle(np.log(list(us['Confirmed'])[-1]), np.log(new_confirmed_cases_us[-1]), size=5)\n\np1.line(np.log(list(german['Confirmed'])), np.log(new_confirmed_cases_german), color='black', \n        legend_label='Germany', line_width=3)\np1.circle(np.log(list(german['Confirmed'])[-1]), np.log(new_confirmed_cases_german[-1]), size=5)\n\np1.legend.location = \"bottom_right\"\n#output_file(\"coronavirus.html\", title=\"COVID2019 Trajectory\")\nshow(p1)\n\n\n","c1666288":"import requests\nimport io\nage_group = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/statewisetestingdetailsindiacsv\/statewise_tested_numbers_data.csv')\n","f4942ea2":"#Removal of 'Unassigned' State\/UnionTerritory\nindia_covid_19.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered'}, inplace=True)\nunassigned=india_covid_19[india_covid_19['State']=='Unassigned'].index\nindia_covid_19.drop(unassigned,axis=0,inplace=True)\nunassigned1=india_covid_19[india_covid_19['State']=='Nagaland#'].index\nindia_covid_19.drop(unassigned1,axis=0,inplace=True)\nunassigned2=india_covid_19[india_covid_19['State']=='Jharkhand#'].index\nindia_covid_19.drop(unassigned2,axis=0,inplace=True)\nunassigned3=india_covid_19[india_covid_19['State']=='Madhya Pradesh#'].index\nindia_covid_19.drop(unassigned3,axis=0,inplace=True)","7e7587f5":"\nstatewise_cases = pd.DataFrame(india_covid_19.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"India\" \nfig = px.treemap(statewise_cases, path=['Country','State'], values='Confirmed',color='Confirmed', hover_data=['State'])\nfig.show()","f9e844f7":"labels = ['Male', 'Female']\nsizes = []\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\nexplode = (0.05, 0)\ncolors = ['#ffcc99','#66b3ff']\nplt.figure(figsize= (8,8))\nplt.pie(sizes, explode=explode, labels=labels,colors=colors, autopct='%1.1f',startangle=90)\nplt.title('Percentage of Gender (Ignoring the Missing Values)',fontsize = 10)\nplt.show ()","fdf29cfa":"fig = plt.figure(figsize=(10,10))\nage_dist_india = age_group.groupby('AgeGroup')['Sno'].sum().sort_values(ascending=False)\ndef absolute_value(val):\n    a  = val\n    return (np.round(a,2))\nage_dist_india.plot(kind=\"pie\",title='Case Distribution by Age',autopct=absolute_value,colormap='Paired',startangle=90)\n\nplt.show ()","39a8436a":"india_covid_19['Deaths']=india_covid_19['Deaths'].astype('int')","3ae6ab71":"state_details = pd.pivot_table(india_covid_19, values=['Confirmed','Deaths','Recovered'], index='State', aggfunc='max')\nstate_details['Recovery Rate'] = round(state_details['Recovered'] \/ state_details['Confirmed'],2)\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\nstate_details.style.background_gradient(cmap='Purples')","b2db7bd6":"testing=state_testing.groupby('State')['Total Tested'].max().sort_values(ascending=False).reset_index()\nfig = px.bar(testing, \n             x=\"Total Tested\",\n             y=\"State\", \n             orientation='h',\n             height=800,\n             title='Statewise Testing',\n            color='State')\nfig.show()","e2109b65":"state_test_details = pd.pivot_table(state_testing, values=['Total Tested','Positive','Negative'], index='State', aggfunc='max')\nstate_test_details['Positive Test Rate'] = round(state_test_details['Positive'] \/ state_test_details['Total Tested'],2)\nstate_test_details['Negative Test Rate'] = round(state_test_details['Negative'] \/state_test_details['Total Tested'], 2)\nstate_test_details = state_test_details.sort_values(by='Total Tested', ascending= False)\nstate_test_details.style.background_gradient(cmap='Blues')","45d1139b":"values = list(ICMR_labs['state'].value_counts())\nstates = list(ICMR_labs['state'].value_counts().index)\nlabs = pd.DataFrame(list(zip(values, states)), \n               columns =['values', 'states'])\nfig = px.bar(labs, \n             x=\"values\",\n             y=\"states\", \n             orientation='h',\n             height=1000,\n             title='Statewise Labs',\n            color='states')\nfig.show()","209f824e":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nhospital_beds_states =hospital_beds.drop([36])\ncols_object = list(hospital_beds_states.columns[2:8])\nfor cols in cols_object:\n    hospital_beds_states[cols] = hospital_beds_states[cols].astype(int,errors = 'ignore')\ntop_5_primary = hospital_beds_states.nlargest(5,'NumPrimaryHealthCenters_HMIS')\ntop_5_community = hospital_beds_states.nlargest(5,'NumCommunityHealthCenters_HMIS')\ntop_5_district_hospitals = hospital_beds_states.nlargest(5,'NumDistrictHospitals_HMIS')\ntop_5_public_facility = hospital_beds_states.nlargest(5,'TotalPublicHealthFacilities_HMIS')\ntop_5_public_beds = hospital_beds_states.nlargest(5,'NumPublicBeds_HMIS')\ntop_rural_hos = hospital_beds_states.nlargest(5,'NumRuralHospitals_NHP18')\ntop_rural_beds = hospital_beds_states.nlargest(5,'NumRuralBeds_NHP18')\ntop_urban_hos = hospital_beds_states.nlargest(5,'NumUrbanHospitals_NHP18')\ntop_urban_beds = hospital_beds_states.nlargest(5,'NumUrbanBeds_NHP18')\n\nplt.figure(figsize=(30,30))\nplt.suptitle('Health Facilities in Top 5 States',fontsize=30)\nplt.subplot(231)\nplt.title('Primary Health Centers',fontsize=25)\nplt.barh(top_5_primary['State\/UT'],top_5_primary['NumPrimaryHealthCenters_HMIS'],color ='blue');\n\nplt.subplot(232)\nplt.title('Community Health Centers',fontsize=25)\nplt.barh(top_5_community['State\/UT'],top_5_community['NumCommunityHealthCenters_HMIS'],color = 'blue');\n\nplt.subplot(233)\nplt.title('Public Health Facilities',fontsize=25)\nplt.barh(top_5_public_facility['State\/UT'],top_5_public_facility['TotalPublicHealthFacilities_HMIS'],color='blue');\n\nplt.subplot(234)\nplt.title('District Hospitals',fontsize=25)\nplt.barh(top_5_district_hospitals['State\/UT'],top_5_district_hospitals['NumDistrictHospitals_HMIS'],color = 'orange');\n\nplt.subplot(235)\nplt.title('Rural Hospitals',fontsize=25)\nplt.barh(top_rural_hos['State\/UT'],top_rural_hos['NumRuralHospitals_NHP18'],color = 'orange');\nplt.subplot(236)\nplt.title('Urban Hospitals',fontsize=25)\nplt.barh(top_urban_hos['State\/UT'],top_urban_hos['NumUrbanHospitals_NHP18'],color = 'orange');\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n\n\n","35b66dce":"\nplt.figure(figsize=(27,15))\nplt.suptitle('Number of Beds in Top 5 States',fontsize=30);\nplt.subplot(131)\nplt.title('Rural Beds',fontsize=25)\nplt.barh(top_rural_beds['State\/UT'],top_rural_beds['NumRuralBeds_NHP18'],color = 'orange');\n\nplt.subplot(132)\nplt.title('Urban Beds',fontsize=25)\nplt.barh(top_urban_beds['State\/UT'],top_urban_beds['NumUrbanBeds_NHP18'],color = 'blue');\nplt.subplot(133)\nplt.title('Public Beds',fontsize=25)\nplt.barh(top_5_public_beds['State\/UT'],top_5_public_beds['NumPublicBeds_HMIS'],color = 'purple');\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n","4e42e173":"#Current number of confirmed cases\nax = num_plot_india['Confirmed'].plot(title=\"Confirmed Cases in India\",figsize=(8,8));\nax.set(xlabel=\"Date\", ylabel=\"Confirmed Cases\");","8b218a99":"train = num_plot_india.iloc[:-3,:2]\ntest = num_plot_india.iloc[-3:,:2]\n","aee8d058":"train.rename(columns={\"date\":\"ds\",\"Confirmed\":\"y\"},inplace=True)\ntest.rename(columns={\"date\":\"ds\",\"Confirmed\":\"y\"},inplace=True)\ntest = test.set_index(\"ds\")\ntest = test['y']","88885ade":"from fbprophet import Prophet\npd.plotting.register_matplotlib_converters()\nmodel = Prophet(changepoint_prior_scale=0.4, changepoints=['2020-04-14','2020-04-25','2020-05-09','2020-05-14'])\nmodel.fit(train)","8c07317a":"future_dates = model.make_future_dataframe(periods=20)\nforecast =  model.predict(future_dates)\nax = forecast.plot(x='ds',y='yhat',label='Predicted Confirmed Case',legend=True,figsize=(10,10))\ntest.plot(y='y',label='Actual Confirmed Cases',legend=True,ax=ax)","e29451b0":"from fbprophet.diagnostics import performance_metrics\nfrom fbprophet.diagnostics import cross_validation\ndf_cv = cross_validation(model, initial='60 days', period='20 days', horizon = '3 days')\ndf_cv.head()\ndf_p = performance_metrics(df_cv)\ndf_p.head()\n","1c7fda2d":"forecast.tail(20)","258f6af5":"from fbprophet import Prophet\nmodel_india = Prophet(growth=\"logistic\",changepoint_prior_scale=0.4,changepoints=['2020-04-14','2020-04-25','2020-05-09','2020-05-14'])\npop = 1380004385 #from worldometers\ntrain['cap'] = pop\nmodel_india.fit(train)\n# Future Prediction\nfuture_dates = model_india.make_future_dataframe(periods=300)\nfuture_dates['cap'] = pop\nforecast =  model_india.predict(future_dates)\n# Plotting\nax = forecast.plot(x='ds',y='yhat',label='Predicted Confirmed Cases',legend=True,figsize=(10,10))\ntest.plot(y='y',label='Actual Confirmed Counts',legend=True,ax=ax)\nax.set(xlabel=\"Date\", ylabel=\"Confirmed Cases\");","fe82d493":"forecast.iloc[100:150]","46052309":"from statsmodels.tsa.arima_model import ARIMA\nimport datetime\narima = ARIMA(train['y'], order=(3, 1, 0))\narima = arima.fit(trend='nc', full_output=True, disp=True)\nforecast = arima.forecast(steps= 30)\npred = list(forecast[0])\nstart_date = train['ds'].max()\nprediction_dates = []\nfor i in range(30):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (20,10))\nplt.xlabel(\"Dates\",fontsize = 10)\nplt.ylabel('Total cases',fontsize = 10)\nplt.title(\"Predicted Values for the next 25 Days\" , fontsize = 20)\n\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = 'blue',label = 'Predicted')\nplt.plot_date(y=train['y'].tail(15),x=train['ds'].tail(15),linestyle = '-',color = 'orange',label = 'Actual')\n\n","f31c84ff":"pred=pd.DataFrame(forecast[0],columns=['Predicted'])\ndates=pd.DataFrame(prediction_dates,columns=['Date'])\narima_df=pd.merge(dates,pred,right_index=True,left_index=True)\narima_df.tail(30)","a25943fe":"test=test.reset_index()","f056a42f":"df1=pd.DataFrame(forecast[0],columns=['yhat'])\ndf2=pd.DataFrame(prediction_dates,columns=['ds'])\ndf3=test['y']\ndf4=pd.merge(df2,df3,right_index=True,left_index=True)\ndf5=pd.merge(df4,df1,right_index=True,left_index=True)","8b9afbc9":"df5['mse'],df5['rmse'],df5['mae'],df5['mape'],df5['mdape']=[0,0,0,0,0]","aa79f30b":"for t in range(len(test)):\n    mape =  np.mean(np.abs(df5['yhat'][t] - df5['y'][t])\/np.abs(df5['y'][t]))\n    df5['mape'][t]=\"{:.5f}\".format(mape)\n    mdape =  np.median(np.abs(df5['yhat'][t] - df5['y'][t])\/np.abs(df5['y'][t]))\n    df5['mdape'][t]=\"{:.5f}\".format(mdape)\n    mae = np.mean(np.abs(df5['yhat'][t] - df5['y'][t]))\n    df5['mae'][t]=mae\n    mse = np.mean((df5['yhat'][t] - df5['y'][t])**2)\n    df5['mse'][t]=mse\n    rmse = np.mean((df5['yhat'][t] - df5['y'][t])**2)**.5\n    df5['rmse'][t]=rmse","0a39ba72":"df5","e5bfec2f":"num_plot_india['Active']=0\nfor i in range(len(num_plot_india)):\n    num_plot_india['Active'][i]=num_plot_india['Confirmed'][i]-num_plot_india['Recovered'][i]-num_plot_india['Deaths'][i]\nnum_plot_india","150ae742":"train_bed=pd.DataFrame(columns=['ds','y'])\ntest_bed=pd.DataFrame(columns=['ds','y'])\ntrain_bed_y= num_plot_india.iloc[:-5,-1:]\ntrain_bed_ds = num_plot_india.iloc[:-5,:1]\ntrain_bed=pd.merge(train_bed_ds,train_bed_y,right_index=True,left_index=True)\ntrain_bed.rename(columns={'date': 'ds', 'Active': 'y'}, inplace=True)\ntest_bed_y = num_plot_india.iloc[-5:,-1:]\ntest_bed_ds = num_plot_india.iloc[-5:,:1]\ntest_bed=pd.merge(test_bed_ds,test_bed_y,right_index=True,left_index=True)\ntest_bed.rename(columns={'date': 'ds', 'Active': 'y'}, inplace=True)","10d94632":"test_bed = test_bed.set_index(\"ds\")\ntest_bed = test_bed['y']","2e24baa0":"num_bed=hospital_beds.iloc[36][7]+hospital_beds.iloc[36][9]+hospital_beds.iloc[36][11]\nmodel_bed = Prophet(growth = \"logistic\",changepoints=['2020-04-10','2020-04-20','2020-05-02','2020-05-10'])\nbed_cap = num_bed \ntrain_bed['cap'] = bed_cap\nmodel_bed.fit(train_bed)\n# Future Prediction\nfuture_dates = model_bed.make_future_dataframe(periods=200)\nfuture_dates['cap'] = bed_cap\nforecast =  model_bed.predict(future_dates)\n# Plotting\nax = forecast.plot(x='ds',y='yhat',label='Predicted Active Cases',legend=True,figsize=(10,10))\ntest_bed.plot(y='y',label='Actual Active Counts',legend=True,ax=ax)\nax.set(xlabel=\"Date\", ylabel=\"Active Cases\");","2c5ba2d7":"forecast.iloc[230:240]","09ed88c6":"**Considering current number of active cases, between mid May and mid-August we will see a drastic increase in the number of active cases and by end September all the available hospital beds in India will be occupied <br>\nif we donot lower the increase of cases or increase the number of beds**","1da18efe":"**Statewise Recovery and Death Rate in India**<br>\n1)Maharashtra has the highest number of Confirmed cases in India<br>\n2) Kerala has highest recovery rate among the top 20 hotspot states in India <br>\n3)We have 3 Green states (COVID-19-free) now in India since Goa and Manipur have reported fresh cases <br>\n4)West Bengal has the highest death rate.","a95723db":"**Making Predictions for India based on the current scenario **","c15f37bf":"**Adding other datasources for further analysis of India on State-level**","1fefe842":"** We perform encoding of the Country to CountryID and Province to ProvinceID**","05eba196":"**Wherever Province is null, we replace it with the Country name and we group Mainland China and China together in China**","3a36cf16":"**We can see that by 31st May (End of Lockdown 4) more than 1.51L confirmed cases are predicted as per this model with upper limit of around 1.59L. As more data comes in these values will keep changing**","5a76b137":"**Laboratories available for testing in Each of the states**","dde3bc11":"**Prediction for Bed capacity in India**","f0c4cab7":"**Using Prophet**","f326ca30":"**Out of the 25959 records we are now left with only 377 and many of the records dont have a Province defined.<br>\nThese are mostly provinces that are not part of China**","5d8ec6c2":"# Trajectories for some of the countries","e08512c7":"**Observing the cases in India. Confirmed cases are increasing in India each day. There is a need to get a flatter curve for confirmed cases which currently is in upswing with a steep increase since past few days.**","1ef3601a":"**ARIMA is predicting 1.42L confirmed cases on 31st May**","eccd1831":"**We will convert ObservationDate and Last Update to datetime since they are currently taken as object<br><br>\n The counts for 'Confirmed', 'Deaths' and 'Recovered' will be converted to int**","6329126e":"**Number of Beds Facility-wise**","ac6dc29c":"# Predictions for India","3d707c25":"**Statewise Testing done so far in India till 15th May**<br>\nTamil Nadu has done maximum number of tests with 3% of tested cases being positive<br>\nMaharashta has the highest positive rate (11%) showing that the virus has spread widely in this area.","2501cf35":"**Age-wise distribution of the COVID-2019 cases**<br>\nThe cases are more common in elderly population as seen in the graph below","561aa6e7":" **Since the final count of cases is present on 17th May 2020 we will create a separate dataframe for the same**","8571c1ec":"**Arima Predictions**","c0dbe7f8":"**17th May has recorded highest number of COVID19 confirmed cases in India in a day (5050). We notice a peak in every 4-5 days**","81ebbbfa":"**Using ARIMA**","3b0572a5":"**Accuracy Metrics for ARIMA**","2000558e":"**Accuracy Metrics for Prophet**","d4b54b49":"**Hospital Infrastructure in India**","4521ff24":"**As seen below Uttar Pradesh has many hospitals followed mostly by Maharshtra**","641eef75":"# India","369c9923":"**Prediction considering till when entire population of India will be impacted**<br>\nIf we consider logistic growth, between mid July to December the daily number of confirmed cases will be rising and by Jan 2021 we will be at the peak with daily increase being constant thereafter.","35bfc27f":"**Statewise Confirmed Cases in India for COVID-2019**","90897ee5":"**There seems to be an issue with an extra death reported on Day 50 due to which on Day 51 we see a downtrend.Highest number of deaths reported in a day is 175 for India which was on 4th May.**","a35e6e1b":"**Lets look at some of country graphs together and check the trajectory being followed. As seen below all the countries are following the same trajectory. South Korea was able to break the chain quiet early as compared to the other nations. Germany and Italy are making the downturn move. The good news for India is that it made some downward movement from the earlier trajectory but there is a drop to be seen yet.**","685b9917":"**Gender-wise distribution of the COVID-2019 cases**<br>\nThe figure shows the cases are more than double in Males than Females"}}