{"cell_type":{"1cdaacc1":"code","0b0f50d8":"code","3ed812fb":"code","24893a0b":"code","40f31f0f":"code","886725d4":"code","9bcbfd73":"code","e5550756":"code","15de8ae8":"code","a856811c":"code","1784d642":"code","7fee3580":"code","356a9618":"code","85fb352e":"code","f746990a":"code","5da92534":"code","db819b4b":"code","e5b08843":"code","60772fbb":"code","63db925f":"code","ee9f1e2a":"code","ea6f6c7c":"code","16f643a1":"markdown","ce720257":"markdown","01d5ff3f":"markdown","b903d155":"markdown","0381e2bc":"markdown","dd52d565":"markdown","0f801749":"markdown","239c4a34":"markdown"},"source":{"1cdaacc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b0f50d8":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.dates as mdates\nfrom fbprophet import Prophet","3ed812fb":"Covid19_G_Data = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/train.csv\")\nCovid19_G_Data.head()","24893a0b":"data_Clear= Covid19_G_Data.drop(['Province_State','Id'],axis=1)\ndata_Clear","40f31f0f":"total_cases = data_Clear.groupby('Country_Region')['ConfirmedCases'].max().sort_values(ascending=False).to_frame()\ntotal_cases.style.background_gradient(cmap='Reds')","886725d4":"total_case=total_cases.reset_index().head(10)\ntotal_case","9bcbfd73":"f,ax = plt.subplots(figsize =(10,10))\nsns.set_color_codes(\"muted\")\nchart=sns.barplot(x='Country_Region',y='ConfirmedCases',data=total_case,label=\"Total Cases\")\nfor item in chart.get_xticklabels():\n    item.set_rotation(90)","e5550756":"fig = go.Figure(data=go.Scatter(x=total_case['Country_Region'], y=total_case['ConfirmedCases'],\n                                mode='lines+markers',\n                                hovertemplate = \"Cases: %{y}<br> %{x}<extra><\/extra>\",\n                                showlegend = False\n                               ))\nfig.show()","15de8ae8":"ConfirmedCases_By_Date=data_Clear.groupby([\"Date\"])['ConfirmedCases'].sum().to_frame()\nConfirmedCases_By_Date=ConfirmedCases_By_Date.reset_index()","a856811c":"ConfirmedCases_By_Date.columns=['ds','y']\nm = Prophet(changepoint_prior_scale=0.1)\nm.fit(ConfirmedCases_By_Date)\nfuture = m.make_future_dataframe(periods=300,freq='H')\nforecast = m.predict(future)\nforecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","1784d642":"d=m.plot(forecast)","7fee3580":"d1=m.plot_components(forecast)","356a9618":"Fatalities_By_Date_Data = Covid19_G_Data.drop(['Country_Region','ConfirmedCases','Id','Province_State'],axis=1)\nFatalities_By_Date_Data","85fb352e":"Fatalities_By_Date=data_Clear.groupby([\"Date\"])['Fatalities'].sum().to_frame()\nFatalities_By_Date=ConfirmedCases_By_Date.reset_index()","f746990a":"Fatalities_By_Date_Data.columns=['ds','y']\nm = Prophet(changepoint_prior_scale=0.01)\nm.fit(Fatalities_By_Date)\nfuture = m.make_future_dataframe(periods=300,freq='H')\nforecast_Fatalities = m.predict(future)\nforecast_Fatalities[['ds','yhat','yhat_lower','yhat_upper']].tail()","5da92534":"d=m.plot(forecast_Fatalities)","db819b4b":"d=m.plot_components(forecast_Fatalities)","e5b08843":"forcastupdate = forecast.rename(columns={\"yhat\": \"ConfirmedCases\"})\nOutput_data1=forcastupdate[['ConfirmedCases']]\nOutput_data1","60772fbb":"forecast_FatalitiesUpdate = forecast_Fatalities.rename(columns={\"yhat\": \"Fatalities\"})\nOutput_data2 = forecast_FatalitiesUpdate[['Fatalities']]\nOutput_data2","63db925f":"res = pd.concat([Output_data1, Output_data2], axis=1, sort=False)\nres.index = np.arange(1, len(res)+1)\nres.index.name ='ForecastId'\nfinal_res = res.reset_index()","ee9f1e2a":"final_res.head()","ea6f6c7c":"final_res.to_csv(\"submission.csv\",index=False)","16f643a1":"Plotting for top 10 countries based on confirmed cases","ce720257":"Prediction For Date and Fatalities","01d5ff3f":"Clearing Unwanted Data form the DataSet","b903d155":"Filtering columns with required data","0381e2bc":"Prediction for Confirmed Cases and Date","dd52d565":"Total Number of Cases Based on Each Country","0f801749":"Filtering data for model traning and prediction","239c4a34":"Combining Both the Predictions"}}