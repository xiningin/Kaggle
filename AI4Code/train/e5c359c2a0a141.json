{"cell_type":{"29a55ad7":"code","82812f37":"code","8b271761":"code","c23af9f0":"code","7abde877":"code","524ce7ad":"code","8ad61f15":"code","55a0e1ef":"code","5b46143d":"code","e99978e5":"code","516f2ff6":"code","c42b9fd6":"code","0237e0cf":"code","3fe2f16d":"code","b0126462":"code","1e9f9020":"code","1019fb30":"code","efdd5337":"code","d2856c36":"code","04806491":"code","1d8023d2":"code","6bcad91b":"code","4e803657":"code","f17886af":"code","a67e8511":"code","aab8625f":"code","4991be8c":"code","046db7a9":"code","bbb3f0d5":"code","c8d52f58":"code","d8b041df":"code","75c2da10":"code","26ad920c":"code","276c4be3":"code","2dd9add0":"code","6ec7b65d":"code","151a2cfb":"code","20f23fb7":"code","77e14f41":"code","16d07d35":"code","70859074":"code","10e0b2bd":"code","0998ef90":"code","7dffc4f7":"code","e3f1253a":"code","6180d01b":"code","1621bbf3":"code","ae1ce1dc":"code","33570afd":"code","ad167a3d":"code","11ba666a":"code","a67bcca8":"markdown","69b245f5":"markdown","5aecb237":"markdown","a9ec9e70":"markdown","ca02146a":"markdown","a4380393":"markdown","6df701c8":"markdown","701692f6":"markdown","bb760c18":"markdown","00841990":"markdown","430d3e3a":"markdown","50571f26":"markdown","49d3fd44":"markdown","65b2bf92":"markdown","e97968a2":"markdown","49005a94":"markdown","c63a7f23":"markdown","cabf24f2":"markdown"},"source":{"29a55ad7":"# let's first import the libraries this is deployment of ml models udemy course excercise\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport scipy.stats as stats\n\npd.set_option('display.max_columns',None)","82812f37":"import os\nfor dirname, _, filenames in os.walk('..\/input\/house-prices-dataset'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8b271761":"data=pd.read_csv('..\/input\/house-prices-dataset\/train.csv')\n#\nprint(data.shape)\n#\ndata.head()","c23af9f0":"data.drop('Id',axis=1,inplace=True) # id is serial number so dropping it\ndata.shape","7abde877":"data['SalePrice'].hist(bins=20,density=True)\nplt.xlabel('Price')\nplt.ylabel('houses')\nplt.show()","524ce7ad":"# we use log transformation for right skewed data and to make it gaussian\n\nnp.log(data['SalePrice']).hist(bins=50,density=True)\nplt.ylabel('houses')\nplt.xlabel('Price')\nplt.show()","8ad61f15":"cat_var=[i for i in data.columns if data[i].dtype=='O']\ncat_var=cat_var+['MSSubClass']\nlen(cat_var) #cat_var is a list","55a0e1ef":"#lets identify numerical Variables\n\nnum_var=[i for i in data.columns if i not in cat_var and i!='SalePrice']\nlen(num_var) # another list","5b46143d":"# make a list of missing values and find the missing value in percentage\nlis=[i for i in data.columns if data[i].isnull().sum()>0]\ndata[lis].isnull().mean().sort_values(ascending=False)","e99978e5":"data[lis].isnull().mean().sort_values(ascending=False).plot.bar(figsize=(12,6))\nplt.ylabel('percentage of missing data')\nplt.axhline(y=0.9,c='r')\nplt.show()","516f2ff6":"cat_na=[var for var in cat_var if var in lis]\nnum_na=[var for var in num_var if var in lis]\nprint('cat_features na length=',len(cat_na))\nprint('num_features na length=',len(num_na))","c42b9fd6":"num_na","0237e0cf":"def analsis(data,var):\n    \n    temp=data.copy()\n\n    temp[var]=np.where(temp[var].isnull(),1,0)\n\n\n\n    tmpplot=temp.groupby(var)['SalePrice'].agg(['mean','std'])\n\n    # plot into a bar graph\n    \n    tmpplot.plot(kind=\"barh\", y=\"mean\", legend=False,\n             xerr=\"std\", title=\"Sale Price\", color='green')\n\n    plt.show()\n","3fe2f16d":"for i in lis:\n    analsis(data,i)","b0126462":"len(num_var)","1e9f9020":"data[num_var]","1019fb30":"year_cols=[i for i in num_var if 'Yr' in i or 'Year' in i]\nyear_cols","efdd5337":"# let's explore the values in the year_cols\n\nfor i in year_cols:\n    print(i,data[i].unique(),'\\n')","d2856c36":"for i in year_cols:\n    plt.figure(figsize=(7,5))\n    plt.plot(data.groupby(i)['SalePrice'].median())\n    plt.ylabel('Sale Price')\n    plt.xlabel(i)","04806491":"#in 20 out 20\n## plot median sale price vs year in which it was built","1d8023d2":"plt.figure(figsize=(7,5))\nplt.plot(data.groupby('YearBuilt')['SalePrice'].median())\nplt.ylabel('Sale Price')\nplt.title('Median House Price')\nplt.show()","6bcad91b":"def analys_yearvars(data,var):\n    df=data.copy()\n    \n    df[var]=df['YrSold']-df[var]\n    plt.plot(df.groupby('YrSold')[var].median())\n    plt.ylabel('Time from '+var)\n    plt.show()\n    \nfor i in year_cols:\n    if i!= 'YrSold':\n        analys_yearvars(data,i)","4e803657":"#plot instead the time since last remodelled, or time since built, and sale price, to see if there is a relationship.","f17886af":"year_cols","a67e8511":"def relation_yr_sale(df,var):\n    df=df.copy()\n    df['var']=df['YrSold']-df[var]\n    plt.scatter(df['var'],df['SalePrice'])\n    plt.xlabel(var)\n    plt.ylabel('SalePrice')\n    plt.show()\n    \nfor i in year_cols:\n    if i !='YrSold':\n        relation_yr_sale(data,i)","aab8625f":"# find which variables are discrete, i.e., show a finite number of values\n# lis=[]\n# for i in num_var:\n#     if len(data[i].unique())<20 and i not in year_cols:\n#         print(i)\ndisc_var=[i for i in num_var if len(data[i].unique())<20 and i not in year_cols]        \nprint('Length of discrete variables:',len(disc_var))","4991be8c":"data[disc_var].head()","046db7a9":"for var in disc_var:\n    sns.catplot(x=var, y='SalePrice', data=data, kind=\"box\", height=4, aspect=1.5)\n    # add data points to boxplot with stripplot\n    sns.stripplot(x=var, y='SalePrice', data=data, jitter=0.1, alpha=0.3, color='k')\n    plt.show()","bbb3f0d5":"cont_var=[i for i in num_var if i not in disc_var+year_cols]\nprint('Number of continous variables :',len(cont_var))","c8d52f58":"data[cont_var].head()","d8b041df":"data[cont_var].hist(bins=30, figsize=(15,15))\nplt.show()","75c2da10":"# first make a list with the super skewed variables\n# for later\n\nskewed = [\n    'BsmtFinSF2', 'LowQualFinSF', 'EnclosedPorch',\n    '3SsnPorch', 'ScreenPorch', 'MiscVal'\n]","26ad920c":"# capture the remaining continuous variables\n\ncont_vars = [\n    'LotFrontage',\n    'LotArea',\n    'MasVnrArea',\n    'BsmtFinSF1',\n    'BsmtUnfSF',\n    'TotalBsmtSF',\n    '1stFlrSF',\n    '2ndFlrSF',\n    'GrLivArea',\n    'GarageArea',\n    'WoodDeckSF',\n    'OpenPorchSF',\n]","276c4be3":"# Let's go ahead and analyse the distributions of the variables\n# after applying a yeo-johnson transformation\n\n# temporary copy of the data\ntmp = data.copy()\n\nfor var in cont_vars:\n\n    # transform the variable - yeo-johsnon\n    tmp[var], param = stats.yeojohnson(data[var])\n\n    \n# plot the histograms of the transformed variables\ntmp[cont_vars].hist(bins=30, figsize=(15,15))\nplt.show()","2dd9add0":"# let's plot the original or transformed variables\n# vs sale price, and see if there is a relationship\n\nfor var in cont_vars:\n    \n    plt.figure(figsize=(12,4))\n    \n    # plot the original variable vs sale price    \n    plt.subplot(1, 2, 1)\n    plt.scatter(data[var], np.log(data['SalePrice']))\n    plt.ylabel('Sale Price')\n    plt.xlabel('Original ' + var)\n\n    # plot transformed variable vs sale price\n    plt.subplot(1, 2, 2)\n    plt.scatter(tmp[var], np.log(tmp['SalePrice']))\n    plt.ylabel('Sale Price')\n    plt.xlabel('Transformed ' + var)\n                \n    plt.show()","6ec7b65d":"# Let's go ahead and analyse the distributions of these variables\n# after applying a logarithmic transformation\n\ntmp = data.copy()\n\nfor var in [\"LotFrontage\", \"1stFlrSF\", \"GrLivArea\"]:\n\n    # transform the variable with logarithm\n    tmp[var] = np.log(data[var])\n    \ntmp[[\"LotFrontage\", \"1stFlrSF\", \"GrLivArea\"]].hist(bins=30)\nplt.show()","151a2cfb":"# let's plot the original or transformed variables\n# vs sale price, and see if there is a relationship\n\nfor var in [\"LotFrontage\", \"1stFlrSF\", \"GrLivArea\"]:\n    \n    plt.figure(figsize=(12,4))\n    \n    # plot the original variable vs sale price    \n    plt.subplot(1, 2, 1)\n    plt.scatter(data[var], np.log(data['SalePrice']))\n    plt.ylabel('Sale Price')\n    plt.xlabel('Original ' + var)\n\n    # plot transformed variable vs sale price\n    plt.subplot(1, 2, 2)\n    plt.scatter(tmp[var], np.log(tmp['SalePrice']))\n    plt.ylabel('Sale Price')\n    plt.xlabel('Transformed ' + var)\n                \n    plt.show()","20f23fb7":"for var in skewed:\n    \n    tmp = data.copy()\n    \n    # map the variable values into 0 and 1\n    tmp[var] = np.where(data[var]==0, 0, 1)\n    \n    # determine mean sale price in the mapped values\n    tmp = tmp.groupby(var)['SalePrice'].agg(['mean', 'std'])\n\n    # plot into a bar graph\n    tmp.plot(kind=\"barh\", y=\"mean\", legend=False,\n             xerr=\"std\", title=\"Sale Price\", color='green')\n\n    plt.show()","77e14f41":"print('Number of categorical variables :', len(cat_var))","16d07d35":"data[cat_var].head()","70859074":"data[cat_var].nunique().sort_values(ascending=False).plot.bar(figsize=(12,5))","10e0b2bd":"# re-map strings to numbers, which determine quality\n\nqual_mappings = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5, 'Missing': 0, 'NA': 0}\n\nqual_vars = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond',\n             'HeatingQC', 'KitchenQual', 'FireplaceQu',\n             'GarageQual', 'GarageCond',\n            ]\n\nfor var in qual_vars:\n    data[var] = data[var].map(qual_mappings)","0998ef90":"exposure_mappings = {'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4, 'Missing': 0, 'NA': 0}\n\nvar = 'BsmtExposure'\n\ndata[var] = data[var].map(exposure_mappings)","7dffc4f7":"finish_mappings = {'Missing': 0, 'NA': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}\n\nfinish_vars = ['BsmtFinType1', 'BsmtFinType2']\n\nfor var in finish_vars:\n    data[var] = data[var].map(finish_mappings)","e3f1253a":"garage_mappings = {'Missing': 0, 'NA': 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}\n\nvar = 'GarageFinish'\n\ndata[var] = data[var].map(garage_mappings)","6180d01b":"fence_mappings = {'Missing': 0, 'NA': 0, 'MnWw': 1, 'GdWo': 2, 'MnPrv': 3, 'GdPrv': 4}\n\nvar = 'Fence'\n\ndata[var] = data[var].map(fence_mappings)","1621bbf3":"# capture all quality variables\n\nqual_vars  = qual_vars + finish_vars + ['BsmtExposure','GarageFinish','Fence']\n","ae1ce1dc":"# now let's plot the house mean sale price based on the quality of the \n# various attributes\n\nfor var in qual_vars:\n    # make boxplot with Catplot\n    sns.catplot(x=var, y='SalePrice', data=data, kind=\"box\", height=4, aspect=1.5)\n    # add data points to boxplot with stripplot\n    sns.stripplot(x=var, y='SalePrice', data=data, jitter=0.1, alpha=0.3, color='k')\n    plt.show()","33570afd":"# capture the remaining categorical variables\n# (those that we did not re-map)\n\ncat_others = [\n    var for var in cat_var if var not in qual_vars\n]\n\nlen(cat_others)","ad167a3d":"def analyse_rare_labels(df, var, rare_perc):\n    df = df.copy()\n\n    # determine the % of observations per category\n    tmp = df.groupby(var)['SalePrice'].count() \/ len(df)\n\n    # return categories that are rare\n    return tmp[tmp < rare_perc]\n\n# print categories that are present in less than\n# 1 % of the observations\n\nfor var in cat_others:\n    print(analyse_rare_labels(data, var, 0.01))\n    print()","11ba666a":"for var in cat_others:\n    # make boxplot with Catplot\n    sns.catplot(x=var, y='SalePrice', data=data, kind=\"box\", height=4, aspect=1.5)\n    # add data points to boxplot with stripplot\n    sns.stripplot(x=var, y='SalePrice', data=data, jitter=0.1, alpha=0.3, color='k')\n    plt.show()","a67bcca8":"## Variable Types\n**Next, let's identify the categorical and numerical variables**","69b245f5":"**We can see that the target is continuous, and the distribution is skewed towards the right.**<br>\n**We can improve the value spread with a mathematical transformation.**","5aecb237":"# Discrete Variables","a9ec9e70":"# SKEWED VARIABLES","ca02146a":"* Let's evaluate how many different categories are present in each of the variables. *","a4380393":"The distribution of the variables are now more \"Gaussian\" looking.\n\nLet's go ahead and evaluate their relationship with the target.","6df701c8":"#### There are a number of variables that refer to the quality of some aspect of the house, for example the garage, or the fence, or the kitchen. I will replace these categories by numbers increasing with the quality of the place or room.\n\n#### The mappings can be obtained from the Kaggle Website. One example:\n\n - Ex = Excellent\n - Gd = Good\n - TA = Average\/Typical\n - Fa = Fair\n - Po = Poor","701692f6":"## Analysis\n### We will analyse the following:\n\n1. The target variable\n2. Variable types (categorical and numerical)\n3. Missing data\n4. Numerical variables\n- Discrete\n- Continuous\n- Distributions\n- Transformations\n\n5. Categorical variables\n\n- Cardinality\n- Rare Labels\n- Special mappings","bb760c18":"# Data Analysis","00841990":"# Categorical Variables","430d3e3a":"# relationship between missing data and sales price","50571f26":"# Numerical Variables","49d3fd44":"## Yeo-Johnson transformation","65b2bf92":"# Quality variables","e97968a2":"#### Some of the categorical variables show multiple labels that are present in less than 1% of the houses.\n\nLabels that are under-represented in the dataset tend to cause over-fitting of machine learning models.\n\nThat is why we want to remove them.\n\nFinally, we want to explore the relationship between the categories of the different variables and the house sale price:","49005a94":"# Missing values\n**Let's go ahead and find out which variables of the dataset contain missing values.**","c63a7f23":"## Logarithmic transformation","cabf24f2":"# Rare labels:"}}