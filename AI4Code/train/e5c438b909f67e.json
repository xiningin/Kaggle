{"cell_type":{"3e9f578a":"code","f38a4731":"code","ea82af96":"code","60f24eba":"code","1d7aaed7":"code","d398f3aa":"code","af73d6dc":"code","655dd2c3":"code","ec1b83e1":"code","e3c70d53":"code","0ddf24ac":"code","a87830a7":"code","2fd984c9":"code","d31f1772":"code","8a5cc0cd":"code","8a3c75aa":"code","81accff5":"code","937585de":"markdown","10f94ace":"markdown","70d44d1f":"markdown","136a8a24":"markdown","86fd31c5":"markdown","57025088":"markdown","942934ee":"markdown","f5241f28":"markdown"},"source":{"3e9f578a":"import tensorflow as tf \nimport numpy as np\nfrom  tensorflow.keras  import  Sequential \nfrom  tensorflow.keras.layers import Dense","f38a4731":"(X_train_full , y_train_full), (X_test , y_test) = tf.keras.datasets.boston_housing.load_data()","ea82af96":"print(X_train_full.shape , y_train_full.shape)\nprint(X_test.shape , y_test.shape)","60f24eba":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X_train_full, y_train_full, test_size=0.1, random_state=42)","1d7aaed7":"print(X_train.shape , y_train.shape)\nprint(X_val.shape , y_val.shape)\nprint(X_test.shape , y_test.shape)","d398f3aa":"X_train[0] # 13 features","af73d6dc":"y_train[0] # mean de 13 attributs in one column","655dd2c3":"X_train[0][:] # one feature ","ec1b83e1":"with tf.io.TFRecordWriter('Traindata.tfrecord') as tfrecord:\n    for ligne  in X_train:\n        i=0\n        features = {\n            'feature_1' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[0]])),\n            'feature_2' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[1]])),\n            'feature_3' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[2]])),\n            'feature_4' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[3]])),\n            'feature_5' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[4]])),\n            'feature_6' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[5]])),\n            'feature_7' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[6]])),\n            'feature_8' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[7]])),\n            'feature_9' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[8]])),\n            'feature_10' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[9]])),\n            'feature_11' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[10]])),\n            'feature_12' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[11]])),\n            'feature_13' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[12]])),\n            'Target' : tf.train.Feature(float_list=tf.train.FloatList(value= [y_train[i]])),\n        }\n        i =i+1\n        example = tf.train.Example(features=tf.train.Features(feature=features))\n        tfrecord.write(example.SerializeToString())","e3c70d53":"with tf.io.TFRecordWriter('Validatedata.tfrecord') as tfrecord:\n    for ligne  in X_val:\n        i=0\n        features = {\n            'feature_1' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[0]])),\n            'feature_2' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[1]])),\n            'feature_3' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[2]])),\n            'feature_4' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[3]])),\n            'feature_5' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[4]])),\n            'feature_6' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[5]])),\n            'feature_7' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[6]])),\n            'feature_8' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[7]])),\n            'feature_9' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[8]])),\n            'feature_10' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[9]])),\n            'feature_11' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[10]])),\n            'feature_12' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[11]])),\n            'feature_13' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[12]])),\n            'Target' : tf.train.Feature(float_list=tf.train.FloatList(value= [y_val[i]])),\n        }\n        i =i+1\n        example = tf.train.Example(features=tf.train.Features(feature=features))\n        tfrecord.write(example.SerializeToString())","0ddf24ac":"with tf.io.TFRecordWriter('Testdata.tfrecord') as tfrecord:\n    for ligne  in X_test:\n        i=0\n        features = {\n            'feature_1' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[0]])),\n            'feature_2' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[1]])),\n            'feature_3' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[2]])),\n            'feature_4' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[3]])),\n            'feature_5' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[4]])),\n            'feature_6' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[5]])),\n            'feature_7' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[6]])),\n            'feature_8' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[7]])),\n            'feature_9' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[8]])),\n            'feature_10' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[9]])),\n            'feature_11' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[10]])),\n            'feature_12' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[11]])),\n            'feature_13' : tf.train.Feature(float_list=tf.train.FloatList(value= [ligne[12]])),\n            'Target' : tf.train.Feature(float_list=tf.train.FloatList(value= [y_test[i]])),\n        }\n        i =i+1\n        example = tf.train.Example(features=tf.train.Features(feature=features))\n        tfrecord.write(example.SerializeToString())","a87830a7":"# Create a description of the features.\nfeature_description = {\n    'feature_0': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_1': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_2': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_3': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_4': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_5': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_6': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_7': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_8': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_9': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_10': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_11': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_12': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'feature_13': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n    'Target': tf.io.FixedLenFeature([], tf.float32, default_value=0.0),\n}\n\ndef parse_function(example_proto):\n  # Parse the input `tf.train.Example` proto using the dictionary above.\n  return tf.io.parse_single_example(example_proto, feature_description)","2fd984c9":"train_dataset = tf.data.TFRecordDataset('Traindata.tfrecord')\ntrain_dataset = train_dataset.map(parse_function)\ntrain_dataset","d31f1772":"val_dataset = tf.data.TFRecordDataset('Validatedata.tfrecord')\nval_dataset = val_dataset.map(parse_function)\nval_dataset","8a5cc0cd":"test_dataset = tf.data.TFRecordDataset('testdata.tfrecord')\ntest_dataset = test_dataset.map(parse_function)\ntest_dataset","8a3c75aa":"model = Sequential([\n    Dense(300, activation=\"relu\"),\n    Dense(100, activation=\"relu\"),\n    Dense(1, activation=\"relu\")\n])\n\nmodel.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=\"sgd\",\n              metrics=[\"accuracy\"])","81accff5":" model.fit(train_dataset)","937585de":"# 2. Fichier TFrecord pour les donn\u00e9es de validation :","10f94ace":"# 1. Fichier TFrecord pour les donn\u00e9es d'entra\u00eenement","70d44d1f":"* ## Train Data :","136a8a24":"* ## Test Data :","86fd31c5":"* ## Validation Data :","57025088":"# 5.  Model Keras :","942934ee":"# 3. Fichier TFrecord pour les donn\u00e9es de Test :","f5241f28":"# 4.Cr\u00e9ation de DataSet :"}}