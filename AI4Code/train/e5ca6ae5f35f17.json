{"cell_type":{"489f0003":"code","1c167e8b":"code","c83c6cc5":"code","ebc2e33b":"code","17ff9106":"code","ce5a8ff9":"code","e2a3c7f6":"code","023a7f2c":"code","5c0dc98f":"code","5bed717c":"code","5b6912c6":"code","35dec1ed":"code","05a832b1":"code","bba2227c":"code","f0bb154d":"code","44f6c60a":"code","7da37c8e":"code","b53d57ae":"code","5da42004":"code","73b4d009":"code","96ae6f0f":"code","39127290":"code","08e883fe":"code","f7b3850f":"code","0547f42a":"code","5334d163":"code","8c604b57":"code","3daa7403":"markdown","8b8072f7":"markdown","33d25a7e":"markdown","7c781c16":"markdown","405e7764":"markdown","d836e20e":"markdown","33666727":"markdown","4564edac":"markdown","a87c5921":"markdown","d9ccbe58":"markdown","be508f1c":"markdown"},"source":{"489f0003":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","1c167e8b":"\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Activation,Conv2D,MaxPool2D\nfrom keras.optimizers import SGD,Adam\nfrom keras import regularizers\nfrom keras.utils import np_utils\nimport matplotlib.pyplot as plt\n","c83c6cc5":"train_set = pd.read_csv(\"..\/input\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/test.csv\")\ntrain_set.head()","ebc2e33b":"y_train = train_set['label']    # Extracting the prediction column (that the model has to predict)","17ff9106":"x_train = train_set.drop(['label'],axis=1)\nx_train = np.array(x_train)        # Converting the pandas dataframe to numpy array \ny_train = np.array(y_train)\ntest_set = np.array(test_set)","ce5a8ff9":"val_x = x_train[33000:]   #  Validation set(val_x,val_y) is used to check performance on unseen data and make \nval_y = y_train[33000:]                         # improvements","e2a3c7f6":"x_train = x_train[:33000]\ny_train = y_train[:33000]\n","023a7f2c":"x_train = x_train.reshape(-1,28,28)\nx_train.shape","5c0dc98f":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])                 # Printing images need data in form 28x28 and not as (33000,784)\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(x_train[i], cmap=plt.cm.binary)\nplt.show()","5bed717c":"x_train = x_train.reshape(-1,784)\nx_train.shape","5b6912c6":"val_x = val_x.reshape(-1,784)\nval_x.shape","35dec1ed":"test_set = test_set.reshape(28000,784)\ntest_set.shape","05a832b1":"x_train = x_train\/255\nval_x = val_x\/255\ntest_set = test_set\/255","bba2227c":"x_train = x_train.reshape(-1,28,28,1)\nx_train.shape","f0bb154d":"val_x = val_x.reshape(-1,28,28,1)\nval_x.shape","44f6c60a":"test_set = test_set.reshape(-1,28,28,1)\ntest_set.shape","7da37c8e":"print(np.unique(y_train, return_counts=True)) # No. of unique values in y_train(or y_val for that matter )","b53d57ae":"# one-hot encoding using keras' numpy-related utilities\nn_classes = 10\nprint(\"Shape before one-hot encoding: \", y_train.shape)\ny_train = np_utils.to_categorical(y_train, n_classes)\nprint(\"Shape after one-hot encoding: \", y_train.shape)\nprint(\"Shape before one-hot encoding: \", val_y.shape)\nval_y = np_utils.to_categorical(val_y, n_classes)\nprint(\"Shape after one-hot encoding: \", val_y.shape)","5da42004":"class_names = ['Zero', 'One', 'Two', 'Three', 'Four', \n               'Five', 'Six', 'Seven', 'Eight', 'Nine']","73b4d009":"# Set the CNN model \n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n","96ae6f0f":"optimizer = Adam(lr=0.001)","39127290":"model.compile(optimizer=optimizer, \n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n#Note: when using the categorical_crossentropy loss, your targets should be in categorical format (e.g. if you \n# have 10 classes, the target for each sample should be a 10-dimensional vector that is all-zeros except for a \n#1 at the index corresponding to the class of the sample). In order to convert integer targets into categorical \n#targets, you can use the Keras utility to_categorical.\n\n#When using the sparse_categorical_crossentropy loss, your targets should be integer targets. If you have categorical\n# targets, you should use categorical_crossentropy.","08e883fe":"model.fit(x_train, y_train, epochs=10, batch_size=25)","f7b3850f":"predictions = model.predict(test_set)","0547f42a":"model.metrics_names # This list corresponds to what the list returned by model.evaluate refers to","5334d163":"model.evaluate(val_x,val_y)\n# Accuracy on unseen data (validation set extracted from train_set)","8c604b57":"predictions = model.predict_classes(test_set, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"CNN-MNIST.csv\", index=False, header=True)","3daa7403":"### RESHAPING DATA, BEFORE FEEDING IT TO THE MODEL","8b8072f7":"### NORMALIZING DATA BEFORE FEEDING INTO THE MODEL","33d25a7e":"### SAVING THE PREDICTIONS TO CSV FILE BEFORE SUBMITTING","7c781c16":"### ONE HOT ENCODING , TO CONVERT STRING FEATURES TO INTEGERS","405e7764":"## Introduction to CNN Keras - Acc 0.993\n\nThis is a multi-layered layer CNN trained on the famous, MNIST dataset. I have trained the model on layers of CNN, followed by 2 layers of FC(Fully Connected NN). I chose to do it on Keras, for its user-friendly background.\n\n1. First I prepared my data, which required plenty of processing. \n2. Then, i defined my model, compiled it and run it.\n3. Then, the model was evaluated on **val_set**, to get an idea of how well it is performing on unseen data\n4. Finally, it was used to make predictions on **test_set**, which were then converted to a csv file and uploaded.\n\nI do hope, this kernel proves to be a good starting point in helping you become a gr8 computer vision engineer!","d836e20e":"![image.png](attachment:image.png)\n\nVisualing a CNN model (an e.g)","33666727":"### PRINTING  IMAGES","4564edac":"### FIT\/ TRAIN THE MODEL","a87c5921":"### COMPILE  ","d9ccbe58":"### LOADING DATA -","be508f1c":"**You found this notebook helpful or you just liked it , upvotes would be very much appreciated - That will keep me motivated to bring even better kernels for you all :)**"}}