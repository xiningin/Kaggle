{"cell_type":{"db38003d":"code","8ec20659":"code","40149cfa":"code","472916d3":"code","c6c109ca":"code","c4267062":"code","174a699f":"code","575d343b":"code","defd5f11":"code","4ae54cb7":"code","4c24c120":"code","a6ed0d66":"code","1aa2093b":"code","6c8cd851":"code","de966f03":"code","ea1fc3a1":"code","7964b1e6":"code","f6f881d2":"code","b688a8f8":"code","979a9472":"code","760e0671":"code","863733a0":"code","845d95b9":"code","1de329b9":"code","93a48c58":"code","bb1dfcfe":"code","57e1cb33":"code","7a232efa":"code","f67b897f":"code","a8cc7248":"markdown"},"source":{"db38003d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ec20659":"import pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom keras.models import Sequential\nfrom keras.utils.np_utils import to_categorical \nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","40149cfa":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","472916d3":"train.head()","c6c109ca":"train.shape","c4267062":"labels = train['label']\nlabels = np.array(labels)\nlabels","174a699f":"del train['label']\ntrain.shape","575d343b":"train = train \/ 255\ntest = test \/ 255","defd5f11":"print(train.shape)\nprint(labels.shape)\nprint(test.shape)","4ae54cb7":"# Reshape the data\ntrain = np.array(train).reshape(-1, 28, 28)\ntrain.shape","4c24c120":"# Add dimension\ntrain = np.expand_dims(train,axis=-1)\nlabels = np.expand_dims(labels,axis=-1)","a6ed0d66":"train.shape","1aa2093b":"# labels category\nlabels = to_categorical(labels, num_classes = 10)","6c8cd851":"# Check the shape\nprint(train.shape)\nprint(labels.shape)","de966f03":"# Convert test data\ntest = test.to_numpy().reshape(-1,28,28)\ntest = np.expand_dims(test,axis=-1)\n\ntest.shape","ea1fc3a1":"# Split data and labels for train and test datasets\nX_train, X_test, y_train, y_test = train_test_split(train, labels, test_size = 0.17)","7964b1e6":"# Check the shape for train data\nprint(X_train.shape)\nprint(y_train.shape)","f6f881d2":"# Check the shape for test data\nprint(X_test.shape)\nprint(y_test.shape)","b688a8f8":"# Build up model - Sequential (Convolutional Model)\nmodel = tf.keras.Sequential([])\nmodel.add(tf.keras.layers.Conv2D(32, (3, 3), padding = 'same', activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same', activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(2, 2)),\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","979a9472":"model.summary()","760e0671":"# Compile model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","863733a0":"#Add ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=20, zoom_range=0.2)\ndatagen.fit(X_train)","845d95b9":"# Fit model\n#model.fit(X_train, y_train, validation_data = (X_test,y_test), epochs=10)\nmodel.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                    steps_per_epoch=len(X_train)\/32, epochs=10)","1de329b9":"# Evaluation\nmodel.evaluate(X_test,y_test)","93a48c58":"# Predict data\npredictions = model.predict(test)\ny_pred = np.argmax(predictions, axis=1)","bb1dfcfe":"# Show some prediction\nplt.figure(figsize=(5,5))\n\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(test[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(y_pred[i])","57e1cb33":"submission =  pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","7a232efa":"# Save data\nsubmission['Label'] = pd.DataFrame(y_pred)","f67b897f":"submission.to_csv('\/kaggle\/working\/MySubmissions.csv', index = False)","a8cc7248":"Data Preprocessing"}}