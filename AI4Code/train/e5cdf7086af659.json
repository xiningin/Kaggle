{"cell_type":{"cad34c91":"code","ad6dd1c4":"code","0b7fdd66":"code","bcdf24e8":"code","363db55d":"code","fc93fef6":"code","dbd829dd":"code","41f10e96":"code","09abb581":"code","14fe40c0":"code","6ef5fb48":"code","f1ca4571":"code","cbceed6c":"code","5af30a8f":"code","ef721070":"code","327eaea2":"code","424413a1":"code","5240afc9":"code","5388ac49":"code","a3d3861e":"code","a43cadd1":"code","dd248cf9":"code","5823c6e4":"code","3d9d6346":"code","3db01f11":"code","708079d1":"code","fb87b8a0":"code","aef2647e":"markdown","751eff02":"markdown","5fe857a8":"markdown","68264ecc":"markdown","206f958f":"markdown","05e55676":"markdown","b4559115":"markdown","957b3882":"markdown","4f8118f4":"markdown","f8d6c2a1":"markdown","ac506518":"markdown","8ac3ad21":"markdown","4aae5ab4":"markdown","784035ab":"markdown","3e45943b":"markdown","bde58936":"markdown","b9b9e111":"markdown"},"source":{"cad34c91":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport itertools\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')","ad6dd1c4":"df = pd.read_csv(\"..\/input\/time-series-sale-data\/sale_volume_timeseries.csv\")\ndf.head()","0b7fdd66":"df.info()","bcdf24e8":"df['Date'] =  pd.to_datetime(df['Date'], format='%Y-%m-%d')","363db55d":"print(\"Min Date is\", df.Date.min(), \"&\", \"Max Date is:\",df.Date.max()) # Haftal\u0131k frekansta \u00fc\u00e7 y\u0131ll\u0131k data","fc93fef6":"df.isnull().values.any() # Eksik veri kontrol\u00fc","dbd829dd":"round(df.describe().T,2)","41f10e96":"sns.set(rc={'figure.figsize':(18,6)})\nsns.set_style(\"white\")\nsns.histplot(df.Sale_volume, kde = True, bins = 30, color = \"red\").set_title(\"Sat\u0131\u015flar\u0131n Da\u011f\u0131l\u0131m\u0131\", fontsize =20);","09abb581":"df_forecast = df.sort_values(\"Date\")","14fe40c0":"df_forecast.index = df_forecast['Date']\ndel df_forecast[\"Date\"]","6ef5fb48":"df_forecast # Time Series Prediction yap\u0131lacak data","f1ca4571":"result = seasonal_decompose(df_forecast)\n\nfig, axes = plt.subplots(4, 1, sharex=True)\n\nresult.observed.plot(ax = axes[0], color='r')\naxes[0].set_ylabel('G\u00f6zlemlenen')\n\nresult.trend.plot(ax = axes[1], color='g')\naxes[1].set_ylabel('Trend')\n\nresult.seasonal.plot(ax = axes[2])\naxes[2].set_ylabel('Sezonsall\u0131k')\n\nresult.resid.plot(ax = axes[3], color='k')\naxes[3].set_ylabel('Art\u0131klar');","cbceed6c":"from statsmodels.tsa.stattools import adfuller\n\nX = df_forecast.index.values\nresult = adfuller(X)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","5af30a8f":"s=sm.tsa.seasonal_decompose(df_forecast)\na = s.seasonal[0:52]\naa = pd.DataFrame(a.values).rename(columns = {0:\"Seasonality\"})\naa.index.name = \"Week Number\"\naa.index += 1 \naa.sort_values(\"Seasonality\", ascending = False).head()","ef721070":"df_forecast1 = df_forecast.copy()\ndf_forecast1['Sale_volume'] = df_forecast['Sale_volume'].diff()[1:]\ndf_forecast1 = df_forecast1.dropna()","327eaea2":"df_forecast1.head()","424413a1":"from statsmodels.tsa.stattools import adfuller\n\nX = df_forecast1.values\nresult = adfuller(X)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","5240afc9":"X = df_forecast.values\nsize = int(len(X) * 0.8)\ntrain, test = df_forecast[0:size], df_forecast[size:len(X)]","5388ac49":"plt.rcParams.update({'figure.figsize':(25,15), 'figure.dpi':100})\n\n# Orijinal Data\nfig, axes = plt.subplots(4, 2)\naxes[0, 0].plot(df_forecast); axes[0, 0].set_title('Original Data')\nplot_acf(df_forecast, ax=axes[0, 1])\n\n# 1. Fark\naxes[1, 0].plot(df_forecast.diff()); axes[1, 0].set_title('1.Difference')\nplot_acf(df_forecast.diff().dropna(), ax=axes[1, 1])\n\n# 2. Fark\naxes[2, 0].plot(df_forecast.diff().diff()); axes[2, 0].set_title('2. Difference')\nplot_acf(df_forecast.diff().diff().dropna(), ax=axes[2, 1])\n\n# 1.fark ve k\u0131smi otokorelasyon\naxes[3,0].plot(df_forecast.diff()); axes[3, 0].set_title('1. Difference')\nplot_pacf(df_forecast.diff().dropna(), ax=axes[3,1])\n\nplt.show()","a3d3861e":"p = range(2, 4)\nd = [1]\nq = range(2, 4)\n\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 52) for x in list(itertools.product(p, d, q))]\n\nAIC = []\nSARIMAX_model = []\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = SARIMAX(df_forecast,\n            order=param,\n            seasonal_order=param_seasonal,\n            enforce_stationarity=False,\n            enforce_invertibility=False)\n            results = mod.fit(disp=0)\n            AIC.append(results.aic)\n            SARIMAX_model.append([param, param_seasonal])\n        except:\n            continue\n\nprint('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_model[AIC.index(min(AIC))][0],SARIMAX_model[AIC.index(min(AIC))][1]))","a43cadd1":"mod = SARIMAX(train,\n                order=(2, 1, 2),\n                seasonal_order=(2, 1, 3, 52),\n                enforce_stationarity=False,\n                enforce_invertibility=False)\n\nresults = mod.fit()\n\npredictions = results.forecast(len(test))\npredictions = pd.Series(predictions, index=test.index)","dd248cf9":"plt.figure(figsize=(20,5))\n\nplt.plot(df_forecast)\nplt.plot(predictions)\n\nplt.legend(('Data', 'Predictions'), fontsize=16)\n\nplt.title('Predictions vs Data', fontsize=20)\nplt.ylabel('Volume', fontsize=16)\nfor year in range(test.index.min().year,test.index.max().year):\n    plt.axvline(pd.to_datetime(str(year)+'-01-01'), color='red', linestyle='--', alpha=0.2)","5823c6e4":"mod = SARIMAX(df_forecast,\n                order=(2, 1, 2),\n                seasonal_order=(2, 1, 3, 52),\n                enforce_stationarity=False,\n                enforce_invertibility=False)\n\nresults = mod.fit()","3d9d6346":"start_dates=pd.to_datetime('2019-05-28')\nend_dates=pd.to_datetime('2019-11-11')\n\nfcast3 = results.get_prediction(start = start_dates, end = end_dates)\nfcast3_ci = fcast3.conf_int()\ny_forecasted = pd.DataFrame(fcast3.predicted_mean)\n\nbx=df_forecast.plot()\nax = y_forecasted.plot(ax=bx)\nfcast3.predicted_mean.plot(ax=ax,label='ForecastVar')\n\nax.fill_between(fcast3_ci.index, \n                fcast3_ci.iloc[:, 0], \n                fcast3_ci.iloc[:, 1], color='k', alpha=.05)\n\nplt.ylabel('Volume')\nplt.xlabel('Date')\nplt.legend()\nplt.show()","3db01f11":"y_forecasted.head()","708079d1":"y_forecasted.rename(columns = {\"predicted_mean\":\"Sale_volume\"}, inplace = True)","fb87b8a0":"df_last = pd.concat([df_forecast,y_forecasted])\ndf_last","aef2647e":"### Zaman Serisini Bile\u015fenlerine Ay\u0131rma","751eff02":"## Time Series Analysis & Prediction with SARIMA","5fe857a8":"<font color='red'>**Augmented Dicker Fuller testinin null hipotezi serinin dura\u011fan olmad\u0131\u011f\u0131n\u0131 s\u00f6yler. P-value 0.05 ten k\u00fc\u00e7\u00fck olmad\u0131\u011f\u0131 i\u00e7in H0 hipotezini %95 g\u00fcven aral\u0131\u011f\u0131nda reddetmek i\u00e7in yeterli bulgumuz yoktur. Bir ba\u015fka deyi\u015fle serinin dura\u011fan olmad\u0131\u011f\u0131 reddedilemez bir hipotezdir. Seriyi dura\u011fan hale getirmek i\u00e7in her sat\u0131r\u0131 bir \u00f6ncekinden \u00e7\u0131karmak, yani difference almak yayg\u0131n bir yakla\u015f\u0131md\u0131r.**<font>","68264ecc":"<font color='blue'>**Parametreler**\n\n<font color='black'>**d** de\u011feri, seriyi dura\u011fan hale getirmek i\u00e7in gereken minimum fark say\u0131s\u0131d\u0131r.\n    \n<font color='black'>**p** de\u011feri, de\u011fi\u015fkenin, tahmin edici olarak kullan\u0131lacak kendi gecikmelerinin say\u0131s\u0131d\u0131r. (AR = Auto Regressive)\n\n<font color='black'>**q** de\u011feri, modeline girmesi gereken gecikmeli tahmin hatalar\u0131n\u0131n say\u0131s\u0131d\u0131r. (MA = Moving Average)\n   \n<font color='black'>**s** de\u011feri, sezonsall\u0131k parametresidir.","206f958f":"## Hiperparametre Optimizasyonu","05e55676":"<font color='red'>**PACF ve ACF grafiklerine bakarak belirledi\u011fimiz parametre aral\u0131klar\u0131n\u0131 search ederek en d\u00fc\u015f\u00fck AIC de\u011feri veren parametreleri se\u00e7tik. AIC yani Akaike bilgi kriteri, g\u00f6receli bir model kalite \u00f6l\u00e7\u00fcs\u00fcd\u00fcr. \u015eimdi bu parametrelerle modeli kuraca\u011f\u0131m.**<font>","b4559115":"<font color='red'>**Bu bir sat\u0131\u015f verisi oldu\u011fu i\u00e7in baz\u0131 \u00f6zel g\u00fcnlerde her y\u0131l y\u00fcksek sat\u0131\u015f beklenir. Bu durum serimizde sezonsall\u0131\u011f\u0131n mevcut oldu\u011funu do\u011frulamaktad\u0131r. Sezonsall\u0131\u011f\u0131n pozitif anlamda en y\u00fcksek oldu\u011fu haftalar 3, 26, 36 ve 35. haftalard\u0131r.**<font>","957b3882":"<font color='red'>**Gelecek 6 ay tahminlemesinin ge\u00e7mi\u015f veriye olduk\u00e7a iyi uydu\u011fu g\u00f6r\u00fcnmektedir. \u015eimdi tahminlenen aylara dair verileri ana datayla birle\u015ftirece\u011fim.**<font>","4f8118f4":"<font color='red'>**G\u00f6r\u00fclece\u011fi \u00fczere verisetimizde test train ayr\u0131m\u0131 yapt\u0131ktan sonra test verisinde olduk\u00e7a fit bir tahmin elde ettik. \u015eimdi ayn\u0131 modelle gelecek 6 ay\u0131 tahmin edece\u011fiz.**<font>","f8d6c2a1":"<font color='red'>**P-value'dan anla\u015f\u0131laca\u011f\u0131 \u00fczere seri dura\u011fan hale getirilmi\u015ftir. Model olarak ise SARIMA ( Sezonsal otoregresif hareketli ortalama ) tercih ediyoruz. S-AR-I-MA modeli, dura\u011fanl\u0131\u011f\u0131 kontrol eden d parametresine ( I ) sahip oldu\u011fu i\u00e7in gecikmesi al\u0131nm\u0131\u015f datay\u0131 kullanmam\u0131za gerek yoktur. Model zaten de\u011fi\u015fkenin difference al\u0131nm\u0131\u015f halini kullanacakt\u0131r.**<font>","ac506518":"<font color='blue'>*Created with* \u2764 *by Mustafa Batuhan Ermi\u015f.*<font>","8ac3ad21":"<font color='red'>**Bu k\u0131s\u0131mda ilk etapta ACF ve PACF grafikleri ile optimum parametre aral\u0131klar\u0131n\u0131 belirleyece\u011fim ve sonras\u0131nda bu aral\u0131klar i\u00e7in bir gridsearch ger\u00e7ekle\u015ftirerek optimum parametreleri bulaca\u011f\u0131m.**<font>","4aae5ab4":"## Test - Train ile  Model ","784035ab":"**d** -  A\u015fa\u011f\u0131da g\u00f6rebilece\u011fimiz gibi seri, 1.difference \u0131nda dura\u011fan olmu\u015ftur. Bu durumda daha fazla difference almak, manas\u0131zd\u0131r. **[1]**\n\n**p** -  A\u015fa\u011f\u0131daki K\u0131smi otokerelasyonlara bak\u0131ld\u0131\u011f\u0131nda ilk 3 gecikmenin \u00f6nem seviyesinin anlaml\u0131 \u00f6l\u00e7\u00fcde \u00fcst\u00fcnde oldu\u011fu g\u00f6r\u00fclmektedir. **[2 veya 3]**\n\n**q** - Yine otokorelasyon grafi\u011fine bak\u0131ld\u0131\u011f\u0131nda ise \u00f6nem seviyesinin \u00fcst\u00fcnde 3 gecikme vard\u0131r. **[2 veya 3]**\n\n**s** - Haftal\u0131k sezonsall\u0131k oldu\u011fu i\u00e7in s de\u011ferini 52 haftaya binaen 52 alaca\u011f\u0131z. **[52]**","3e45943b":"<font color='red'>**Sat\u0131\u015flar\u0131n zaman serisi grafi\u011fine bak\u0131ld\u0131\u011f\u0131nda, serinin bir y\u00fckselen bir trende sahip oldu\u011fu, dolay\u0131s\u0131yla dura\u011fan olmad\u0131\u011f\u0131 a\u00e7\u0131k\u00e7a g\u00f6r\u00fclmektedir. Bu durumda serimiz bir tahminleme varsay\u0131m\u0131 olan dura\u011fanl\u0131\u011f\u0131 kar\u015f\u0131lam\u0131yor gibi g\u00f6r\u00fclmektedir. Fakat yine de dura\u011fanl\u0131\u011f\u0131 s\u0131nayan bir hipotez testi olan Dicker Fuller ile kontrol etmemiz faydal\u0131d\u0131r.**<font>","bde58936":"## Future Prediction Model","b9b9e111":"<font color='blue'>**1 - Yukar\u0131daki incelemeler sonucu bir trend g\u00f6zlemledi\u011fimiz i\u00e7in ( ve Dickey Fuller Testine binaen ) seri dura\u011fan hale getirilmelidir. 2 - Sezonsall\u0131k etkisi s\u00f6z konusu oldu\u011fu i\u00e7in sezonsal parametre i\u00e7eren bir model se\u00e7imi gereklidir.**<font>"}}