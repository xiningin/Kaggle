{"cell_type":{"343fad7d":"code","34c57edb":"code","a0ea6904":"code","f0eb0c24":"code","09b59b9b":"code","1a2a98a4":"code","c83b89f5":"code","dfe9f80d":"code","2ac2eb1b":"code","326e3130":"code","05ee2c8d":"code","fb9d27c0":"code","b9289eaa":"code","a6a85afa":"code","aa0c1662":"code","56a33d78":"markdown"},"source":{"343fad7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34c57edb":"# paths for files\npath_str_mf = \"..\/input\/mutual-funds-and-etfs\/Mutual Funds.csv\"\n","a0ea6904":"# create dataframe from data\ndf_mf = pd.read_csv(path_str_mf)\ndf_mf.shape\n","f0eb0c24":"list(df_mf.columns) ","09b59b9b":"# Create separate unpivoted dataframes for different groups of columns\n\n# master table\ndf_fund = df_mf[[\n    'fund_symbol',\n    'fund_extended_name',\n    'fund_family',\n    'category',\n    'investment_strategy',\n    'investment_type',\n    'size_type'\n]]\n\ndf_fund.head()","1a2a98a4":"summary_stats_cols = [\n    'rating',\n    'return_rating',\n    'risk_rating',\n    'fund_net_annual_expense_ratio',\n    'category_net_annual_expense_ratio',\n    'net_asset_value',\n    'fund_yield',\n]\n\ndf_sum_stats = pd.melt(df_mf, id_vars =['fund_symbol'], value_vars = summary_stats_cols)\n\ndf_sum_stats['data_category'] = 'summary stats'\n\ndf_sum_stats.head()","c83b89f5":"asset_cols = [\n     'asset_cash',\n     'asset_stocks',\n     'asset_bonds',\n     'asset_others'\n]\n\n\ndf_asset = pd.melt(df_mf, id_vars = ['fund_symbol'], value_vars =asset_cols)\n\ndf_asset['data_category'] = 'asset percentages'\n\ndf_asset.head()","dfe9f80d":"sector_cols = [\n     'sector_basic_materials',\n     'sector_consumer_cyclical',\n     'sector_financial_services',\n     'sector_real_estate',\n     'sector_consumer_defensive',\n     'sector_healthcare',\n     'sector_utilities',\n     'sector_communication_services',\n     'sector_energy',\n     'sector_industrials',\n     'sector_technology'\n]\n\ndf_sectors = pd.melt(df_mf, id_vars =['fund_symbol'], value_vars =sector_cols)\n\ndf_sectors['data_category'] = 'sector percentages'\n\ndf_sectors.head()","2ac2eb1b":"return_cols = [\n 'fund_return_1year',\n 'category_return_1year',\n 'fund_return_3years',\n 'category_return_3years',\n 'fund_return_5years',\n 'category_return_5years',\n 'fund_return_10years',\n 'category_return_10years'\n]\n\ndf_return = pd.melt(df_mf, id_vars =['fund_symbol'], value_vars =return_cols)\n\n# create column for data category for consolidated table\ndf_return['data_category'] = 'fund return'\n\ndf_return.head()","326e3130":"beta_cols = [\n 'fund_beta_3years',\n 'category_beta_3years',\n 'fund_beta_5years',\n 'category_beta_5years',\n 'fund_beta_10years',\n 'category_beta_10years'\n]\n\ndf_beta = pd.melt(df_mf, id_vars =['fund_symbol'], value_vars =beta_cols)\n\n# create column for data category for consolidated table\ndf_beta['data_category'] = 'beta'\n\ndf_beta.head()\n\n","05ee2c8d":"#  list of data frames to append\n\nappend_frames = [df_asset, df_beta, df_return, df_sectors, df_sum_stats]\n\ndf_sub_frames  = pd.concat(append_frames)\n\ndf_sub_frames.head()","fb9d27c0":"# number of rows\ndf_sub_frames.shape","b9289eaa":"# join subframes data to master table\ndf_consol = pd.merge(df_fund, df_sub_frames, on='fund_symbol', how='left')\n\ndf_consol.sample(10)\n","a6a85afa":"df_consol.shape","aa0c1662":"# drop \ntry:\n    os.remove(\".\/df_consol.csv\")\nexcept FileNotFoundError as e:\n    print(\"File does not exist.\")\n\n#df_consol.to_csv('df_consol.csv',index=False)","56a33d78":"This code takes the mutual funds dataset and normalizes it for selected categories so that it will be easier to pivot.\nI removed some of the less commonly used indicators and historical data because the resulting data set was too large."}}