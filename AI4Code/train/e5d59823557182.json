{"cell_type":{"6515bb5c":"code","62a1e2e4":"code","b2b85413":"code","166dc128":"code","577ca578":"code","331fea1d":"code","b85ce815":"code","de0b6b78":"code","ae1f1640":"code","9e2805e5":"code","485e6897":"code","c2b1dd4e":"code","b173a049":"code","8aa52fa0":"code","a5fed739":"code","e1dca942":"code","9ec634eb":"code","702daf8a":"code","71a8f1be":"code","6e0f2ded":"code","24ec6c5f":"code","708e575e":"code","daad0032":"code","49a59e6d":"code","85dee9eb":"code","77939334":"code","5315d275":"code","5bc6cb21":"code","4eee920c":"markdown","f90cce99":"markdown"},"source":{"6515bb5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import hstack\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","62a1e2e4":"# a helper function for writing predictions to a file\ndef write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","b2b85413":"train_df = pd.read_csv('..\/input\/catch-me-if-you-can\/train_sessions.csv',\n                       index_col='session_id')\ntest_df = pd.read_csv('..\/input\/catch-me-if-you-can\/test_sessions.csv',\n                      index_col='session_id')\n\n# Convert time1, ..., time10 columns to datetime type\ntimes = ['time%s' % i for i in range(1, 11)]\ntrain_df[times] = train_df[times].apply(pd.to_datetime)\ntest_df[times] = test_df[times].apply(pd.to_datetime)\n\n# Sort the data by time\ntrain_df = train_df.sort_values(by='time1')\n\n# Look at the first rows of the training set\ntrain_df.head()","166dc128":"sites = ['site%s' % i for i in range(1, 11)]\ntrain_df[sites].fillna(0).astype('int').to_csv('train_sessions_text.txt', \n                                               sep=' ', \n                       index=None, header=None)\ntest_df[sites].fillna(0).astype('int').to_csv('test_sessions_text.txt', \n                                              sep=' ', \n                       index=None, header=None)","577ca578":"!head -5 train_sessions_text.txt","331fea1d":"!ls","b85ce815":"cv = CountVectorizer()","de0b6b78":"%%time\nwith open('train_sessions_text.txt') as inp_train_file:\n    X_train = cv.fit_transform(inp_train_file)\nwith open('test_sessions_text.txt') as inp_test_file:\n    X_test = cv.transform(inp_test_file)\nprint(X_train.shape, X_test.shape)","ae1f1640":"type(X_train)","9e2805e5":"y_train = train_df['target'].astype(int)","485e6897":"y_train.head()","c2b1dd4e":"logit = LogisticRegression(C = 1, random_state=42)","b173a049":"%%time\ncv_scores = cross_val_score(logit, X_train, y_train, cv= 5, scoring='roc_auc')","8aa52fa0":"cv_scores.mean()","a5fed739":"%%time\nlogit.fit(X_train, y_train)","e1dca942":"test_pred_logit1 = logit.predict_proba(X_test)[:,1]","9ec634eb":"write_to_submission_file(test_pred_logit1, 'logit_sub1.txt') ## .908 ROC AUC","702daf8a":"!head logit_sub1.txt","71a8f1be":"def add_time_features(time1_series, X_sparse):\n    hour = time1_series.apply(lambda ts: ts.hour)\n    morning = ((hour >= 7) & (hour <= 11)).astype('int')\n    day = ((hour >= 12) & (hour <= 18)).astype('int')\n    evening = ((hour >= 19) & (hour <= 23)).astype('int')\n    night = ((hour >= 0) & (hour <= 6)).astype('int')\n    X = hstack([X_sparse, morning.values.reshape(-1, 1), \n                day.values.reshape(-1, 1), evening.values.reshape(-1, 1), \n                night.values.reshape(-1, 1)])\n    return X","6e0f2ded":"test_df.loc[:, 'time1'].fillna(0).apply(lambda ts: ts.hour).head()","24ec6c5f":"%%time\nX_train_with_time = add_time_features(train_df['time1'].fillna(0), X_train)\nX_test_with_time = add_time_features(test_df['time1'].fillna(0), X_test)","708e575e":"logit_with_time = LogisticRegression(C = 1, random_state=42)","daad0032":"%%time\ncv_scores = cross_val_score(logit_with_time, X_train_with_time, y_train, cv= 5, scoring='roc_auc');","49a59e6d":"cv_scores.mean()","85dee9eb":"%%time\nlogit_with_time.fit(X_train_with_time, y_train)","77939334":"test_pred_logit2 = logit_with_time.predict_proba(X_test_with_time)[:,1]","5315d275":"write_to_submission_file(test_pred_logit2, 'logit_sub2.txt') ## .93565 ROC AUC","5bc6cb21":"!head logit_sub2.txt","4eee920c":"### Time Features\n\n- hour when the session started\n- morning \n- day\n- eve\n- night","f90cce99":"### train Logistic regression"}}