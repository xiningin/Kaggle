{"cell_type":{"626199ca":"code","f7af64bc":"code","be234327":"code","ee568d6a":"code","ca4d55b4":"code","a9624715":"code","410a42d4":"code","14d48f7d":"code","e8aec905":"code","15b63b2c":"code","47b9ee0a":"code","2cbaa32f":"code","108a8f6c":"code","af7c3ead":"code","adbd5f3d":"code","106fe727":"code","86d4b53a":"code","18b951a4":"code","fd5c0acc":"code","89891731":"code","620f18f0":"code","a1d1730e":"code","eb2f5b25":"code","b7efc757":"code","a6ebe9f5":"code","1274df5c":"code","cdbd1cb7":"code","b63f0c04":"code","9d3ddeb0":"code","b27aa474":"code","aabaeef9":"code","d718691f":"code","f0ca8317":"code","c5b89839":"code","791b5cad":"code","a54d0833":"code","b0a08069":"code","d9eed45e":"code","09eef2cd":"code","de4055a7":"code","a25738af":"code","080c5e90":"code","d3c139b6":"code","f2407a1d":"code","a8536651":"code","4d5999a1":"code","af11556b":"code","b34a801c":"code","7038c095":"code","02451ce0":"code","636119a3":"code","7fbbf135":"code","b0d01cec":"code","206c79e6":"code","da47b96a":"code","81b1a5b0":"code","3cff9379":"code","8d32a2ff":"code","e7ed6707":"code","7e38d607":"code","f4091dbd":"code","b306b5d7":"code","a7268145":"code","a91050ca":"code","1118188b":"code","7e757a0a":"code","19b16ce4":"code","a36b367e":"code","da81d8a5":"code","74498ca0":"code","b02ed368":"code","ade62770":"code","fce631b6":"code","13563e55":"code","0fad0222":"markdown","0fbb2d5f":"markdown","bd404174":"markdown","47269815":"markdown","dec9b525":"markdown","f01146e7":"markdown","7a45ed1b":"markdown","bd0ce3f1":"markdown","1be4183a":"markdown","df713e92":"markdown","2417435b":"markdown","b78ef084":"markdown","13c48295":"markdown","88ec0329":"markdown","5a32cb04":"markdown","b4545665":"markdown","edb05a69":"markdown","0ee4c8e4":"markdown","ab1ceeb9":"markdown","48f71af0":"markdown","385fb2b7":"markdown","f6ab450c":"markdown","6899dcc5":"markdown","83c94fcd":"markdown","a4d99375":"markdown","328048cc":"markdown","0a8c7757":"markdown","f2e5428b":"markdown","af0fc544":"markdown","95dd3c7b":"markdown","c065ee1e":"markdown"},"source":{"626199ca":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","f7af64bc":"df_Train = pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/test.csv')\ndf_survived=pd.read_csv('..\/input\/d\/rahulsah06\/titanic\/gender_submission.csv')","be234327":"df_test.head()","ee568d6a":"df_survived.head()","ca4d55b4":"df_survived.drop(['PassengerId'],axis=1)","a9624715":"df_test['Survived']=df_survived['Survived']","410a42d4":"df_survived.head()","14d48f7d":"df_test.head()","e8aec905":"df_Train.head()","15b63b2c":"df=pd.concat([df_test,df_Train])","47b9ee0a":"df.head()","2cbaa32f":"df.info()","108a8f6c":"df.corr()['Survived'].sort_values()","af7c3ead":"sns.scatterplot(data=df , x='Survived', y='Fare')","adbd5f3d":"sns.boxplot(data=df , x='Survived', y='Fare')","106fe727":"df[(df['Survived']==1)&(df['Fare']>400)][['Survived','Fare']]","86d4b53a":"index_drop=df[(df['Fare']>400) & (df['Survived']==1) ].index\ndf=df.drop(index_drop, axis=0)","18b951a4":"sns.scatterplot(data=df_Train , x='Survived', y='Fare')","fd5c0acc":"sns.boxplot(data=df , x='Survived', y='Fare')","89891731":"df.isnull().any()","620f18f0":"df=df.drop(['Name'],axis=1)","a1d1730e":"df.isnull().sum()","eb2f5b25":"100*(df.isnull().sum()\/len(df))","b7efc757":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","a6ebe9f5":"nan_percent= missing_percent(df)","1274df5c":"sns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","cdbd1cb7":"sns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)\nplt.ylim(0,1)","b63f0c04":"df[df['Fare'].isnull()]","9d3ddeb0":"df= df.dropna(axis=0, subset=['Fare'])","b27aa474":"df[df['Embarked'].isnull()]","aabaeef9":"df= df.dropna(axis=0, subset=['Embarked'])","d718691f":"nan_percent= missing_percent(df)\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation=90)","f0ca8317":"df[df['Age'].isnull()]","c5b89839":"sns.kdeplot(data=df['Age'])","791b5cad":"df['Age'] = df['Age'].fillna(df['Age'].mean())\n\nmissing_percent(df)","a54d0833":"df= df.drop(['Cabin'], axis=1)","b0a08069":"df.isnull().any()","d9eed45e":"df=df.drop(['Ticket'],axis=1)","09eef2cd":"df.head()","de4055a7":"sns.barplot(data=df,x='Survived',y='Fare',color='c')","a25738af":"sns.barplot(data=df,x='Survived',y='Age',color='c')","080c5e90":"sns.barplot(data=df,y='Survived',x='Sex',color='c')","d3c139b6":"sns.heatmap(data=df.corr(),annot=True,cmap=\"Blues\")","f2407a1d":"sns.barplot(x=\"Survived\", y=\"Fare\", hue=\"Pclass\", data=df,palette=\"Blues_d\")","a8536651":"df.info()","4d5999a1":"df.head()","af11556b":"df['Survived'] = df['Survived'].apply(str)\ndf['Pclass'] = df['Pclass'].apply(str)","b34a801c":"df.info()","7038c095":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","02451ce0":"df_num.info()","636119a3":"df_obj.info()","7fbbf135":"# Converting objects to number by one-hot encoding(drop_first=True:removes multi-collinearity)\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","b0d01cec":"Final_df= pd.concat([df_num, df_obj], axis=1)","206c79e6":"Final_df.head()","da47b96a":"sns.countplot(data=Final_df, x='Survived_1')","81b1a5b0":"X= Final_df.drop('Survived_1', axis=1)\ny= Final_df['Survived_1']","3cff9379":"from sklearn.model_selection import train_test_split","8d32a2ff":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","e7ed6707":"from sklearn.svm import SVC","7e38d607":"model= SVC()","f4091dbd":"model.fit(X_train, y_train)","b306b5d7":"y_pred= model.predict(X_test)","a7268145":"from sklearn.metrics import classification_report, confusion_matrix","a91050ca":"confusion_matrix(y_test, y_pred)","1118188b":"print(classification_report(y_test, y_pred))","7e757a0a":"# help(SVC)","19b16ce4":"from sklearn.model_selection import GridSearchCV","a36b367e":"svm = SVC()\nparam_grid = {'C':[0.01,0.1,1, 10, 100, 1000],'gamma':[1, 0.1, 0.01, 0.001, 0.0001]}\ngrid = GridSearchCV(svm,param_grid, cv=5)","da81d8a5":"grid.fit(X_train,y_train)","74498ca0":"grid.best_estimator_","b02ed368":"grid.best_params_","ade62770":"y_pred_grid= grid.predict(X_test)","fce631b6":"confusion_matrix(y_test, y_pred_grid)","13563e55":"print(classification_report(y_test, y_pred_grid))","0fad0222":"# EDA","0fbb2d5f":"the problem is balanced","bd404174":"**grid search:**\n> it searches based on cross validation","47269815":"**since missing ages are not neglectable,we replace them with mean.**","dec9b525":"### Evaluating the Model","f01146e7":"**\"Survived\" and \"Pclass\" are categorical but now they are Int. we have to change them to object**","7a45ed1b":"# SVM","bd0ce3f1":"### checking for outliers:","1be4183a":"**ticket column doesn't help us in model buillding so we drop it**","df713e92":"**the more they paid for Fare the more they survived**","2417435b":"# dealing with categorical data","b78ef084":"### Predicting Test data","13c48295":"**we don't have any missing value**","88ec0329":"**it seems age didn't affected on this issue**","5a32cb04":"**Split the Data to Train & Test**","b4545665":"# SVM development: \n**Maximal Margine Classifier -> Support Vector Classifier -> Support Vector Machine**\n\n**how do we choose where to put the hyperplane?**\n> * if data was easily separable: we can choose the one who has the maximum margins between classes**(Maximal Margine Classifier)**\n> * if we had some kind if noise in data we choose **soft margine**: we can have miss-classification in soft margine that leads to have better classification and lower variance and higher bias **(Support Vector Classifier)**\n> * what if the data wasn't separable so easily? using **Kernel** to add dimension in order to use hypelane to separate the data **(Support Vector Machine)**\n\n### Kernal:\n\n* kernel transformation is a function that works on features to add their dimention for a better classification\n\n* types of kernel:\n\n1.  Linear Kernel\n\n1.  polynomial(degrees: 2,3,..)\n\n1.  RBF kernel(sklearn default)","edb05a69":"### Train the model","0ee4c8e4":"**Dummy Variables:**","ab1ceeb9":"**we almost don't have any data about Cabin(missing=77%) so we drop it**","48f71af0":"search sklearn svm gamma","385fb2b7":"### Hyperparameters:\n**Choosing the best hyperparameters through GridSearchCV**","f6ab450c":"# Support Vector Machine","6899dcc5":"**most of the survivors were female**","83c94fcd":"**Fare value had the most impact on surviving**","a4d99375":"**we have passenger Id so we can drop the names because it can not help us for our model building**","328048cc":"**now the data set is ready**","0a8c7757":"# Support Vector Machine","f2e5428b":"### Checking for missing data:","af0fc544":"\n\n# SVM\n\n**in this algorithm we are looking for a hyperplane to effectively separate classes**\n\n**what is hyperplane?**\n\n> In an N-dimensional space, a hyperplane is a flat affine subspace of hyperplane n-1 dimension.\n\n","95dd3c7b":"**as it shows people with more fare and the high Pclass had more chance to survive**","c065ee1e":"# EDA & Data Cleaning:"}}