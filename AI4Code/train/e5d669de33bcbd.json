{"cell_type":{"9aea4646":"code","b5f8c981":"code","a7234d5c":"code","58c63270":"code","556a0368":"code","e3e4940b":"code","c9863271":"code","880869ff":"code","7fc778b7":"code","535a389f":"code","2ef57a3c":"code","721c9634":"code","2149d27e":"code","5437b2b7":"code","f5d9abb0":"code","e2cad646":"code","ab4ceb30":"code","189afa42":"code","bc5dc891":"code","5d680eea":"code","b1a6506a":"code","259d2107":"code","5aadc05f":"code","c5cd61ca":"code","cf25e1c3":"code","dd4b1d68":"code","c3819503":"code","9fca1e56":"code","40fb38b6":"code","8012225b":"code","0c50daa9":"code","c3297a6a":"code","68041a26":"code","a9ac08cb":"code","20793f15":"code","e322a83a":"code","2b1b15ab":"code","85ff4897":"code","41a34dd1":"code","70ea8045":"code","77291971":"code","2a33f80b":"code","cc1a2300":"code","6f12c04c":"code","d9ae7e54":"code","4128d2d2":"code","f0fc1da4":"markdown","0c4e1300":"markdown","670494ab":"markdown","db56abc0":"markdown","15d49376":"markdown","94b73412":"markdown","6f51c54f":"markdown","5b5d1b24":"markdown","487c3f85":"markdown","3441f8e9":"markdown","17b0c17b":"markdown","6a3ba7ac":"markdown","72f870c4":"markdown","fe81a741":"markdown","c5173875":"markdown","4f45f2d6":"markdown","eb0cc457":"markdown","304f3fc4":"markdown","8252c9f1":"markdown","30ba2ab1":"markdown","0bf7233e":"markdown","a1591894":"markdown","73a8741c":"markdown","b66065b2":"markdown","4892dc03":"markdown","68328c7a":"markdown","856e6cac":"markdown","947a6322":"markdown","5eafb5be":"markdown","75489907":"markdown","0e0a6466":"markdown","2ab30c56":"markdown","a2f5b9f6":"markdown","a07fdb55":"markdown","7c9e41c0":"markdown","01609856":"markdown","9f16edba":"markdown","bcc83f29":"markdown","c24d88ec":"markdown","9e9c0b9e":"markdown","4b481b5f":"markdown","dc4c76c9":"markdown","9d5fe4af":"markdown","2ebc8d20":"markdown","62ceac0d":"markdown","8b324c14":"markdown","83c2c291":"markdown","64fd1408":"markdown","0716d9d5":"markdown","8d602e7f":"markdown","a6c43280":"markdown","c5f55ca0":"markdown","68896bad":"markdown","3296c645":"markdown","3b73dc8b":"markdown","7b8aa0da":"markdown","13228d68":"markdown","ec554c7f":"markdown","0938ce7e":"markdown","534ad93f":"markdown","6522aea3":"markdown","8c61cb35":"markdown","e993bdb9":"markdown","30794bf4":"markdown","b1a76b23":"markdown","394a9687":"markdown","48bc7d5b":"markdown","49a291cd":"markdown","8458fd08":"markdown","fe5bcf02":"markdown"},"source":{"9aea4646":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport pandas.io.sql as psql\nimport matplotlib.pyplot as plt\nimport os\n%matplotlib notebook","b5f8c981":"pd.set_option('display.expand_frame_repr', False)\npd.set_option('display.max_columns', None)  \npd.set_option('display.max_colwidth', -1)\npd.options.display.float_format = '{:,.2f}'.format","a7234d5c":"!ls ..\/input\/wine-reviews","58c63270":"inpath = '..\/input\/wine-reviews\/'","556a0368":"dfcsv = pd.read_csv(inpath + 'winemag-data-130k-v2.csv')","e3e4940b":"dfcsv2 = pd.read_csv(inpath + 'winemag-data_first150k.csv') ","c9863271":"dfcsv2.head()","880869ff":"dfcsv.head() #returns top 5","7fc778b7":"dfcsv.tail() #returns bottom 5","535a389f":"dfcsv.columns","2ef57a3c":"dfcsv.shape","721c9634":"dfcsv.dtypes","2149d27e":"dfcsv.info()","5437b2b7":"dfcsv.describe()","f5d9abb0":"dfcsv.columns","e2cad646":"dfcsv[['country', 'description', 'designation']]","ab4ceb30":"dfcsv.head()","189afa42":"dfcsv[dfcsv.country == 'Italy']","bc5dc891":"dfcsv[(dfcsv.country == 'Italy') | (dfcsv.region_1 == 'Etna') ]","5d680eea":"dfcsv[(dfcsv.country == 'Italy') & (dfcsv.region_1 == 'Etna') ]","b1a6506a":"dfcsv[(dfcsv.country == 'Italy') & (dfcsv.region_1 == 'Etna')][['country', 'region_1', 'designation']]","259d2107":"dfcsv.head()","5aadc05f":"dfcsv[dfcsv.taster_name.duplicated(keep=False)]","c5cd61ca":"dfcsv.head()","cf25e1c3":"dfcsv.sort_values(by =['country'] , ascending = True)","dd4b1d68":"dfcsv.sort_values(by =['points', 'country' ] , ascending = [False,True])","c3819503":"dfcsv.head()","9fca1e56":"dfcsv['points_price'] = dfcsv.points \/ dfcsv.price  ","40fb38b6":"dfcsv[['country', 'points','price','points_price', ]].head()","8012225b":"def priceClass(price):\n    if price > 30:\n        rclass = 'Expensive'\n    elif price <= 30:\n        rclass = 'Cheap'\n    else:\n        rclass = 'Error'\n    return rclass","0c50daa9":"dfcsv['priceClass'] = dfcsv.price.apply(priceClass)","c3297a6a":"dfcsv[['price','priceClass']]","68041a26":"fname = lambda point: 'Good Quality' if (point >60 ) else 'Bad Quality' ","a9ac08cb":"dfcsv['Quality'] = dfcsv.points.apply(fname)","20793f15":"dfcsv[['points', 'Quality']]","e322a83a":"def multiCol(pClass,Qual):\n    if pClass == 'Cheap' and  Qual == 'Good Quality':\n        stat = 'Good Buy'\n    else:\n        stat = 'Dont Buy'\n    \n    return stat","2b1b15ab":"dfcsv['Buy_NotBuy'] = dfcsv.apply(lambda df: multiCol(df.priceClass, df.Quality), axis = 1) ","85ff4897":"dfcsv.head() #ahhh Good buy == Goodbye ahhh :')","41a34dd1":"dfcsv.country.value_counts()","70ea8045":"dfcsv.groupby('country').sum()","77291971":"dfcsv.groupby('country').aggregate({'points':np.sum,'price':np.mean}).sort_values(by = 'points', ascending = False)","2a33f80b":"dfcsv.head()","cc1a2300":"pd.pivot_table(dfcsv, index = 'country', aggfunc={'points':np.sum,'price':np.mean}).sort_values(by = 'points', ascending = False)","6f12c04c":"pd.pivot_table(dfcsv, values =['points', 'price'] , index = 'taster_name', columns = 'country', aggfunc={'points':np.sum,'price':np.mean})","d9ae7e54":"dfcsv.to_csv(inpath + '\/wine.csv') ","4128d2d2":"dfcsv.to_pickle(inpath + '\/wine.pickle')","f0fc1da4":"Needed parameters, ","0c4e1300":"# Summarizing, Aggregating Data","670494ab":"##  Describe\n","db56abc0":"##  from CSV","15d49376":"##  from Text - Fixed Width File","94b73412":"##  Duplicates","6f51c54f":"dfPickle = pd.read_pickle(inpath + '\/wine.pickle')  #no pickle resource","5b5d1b24":"Prints dimensions of the dataframe in columns by rows (cols, rows)","487c3f85":"# Filtering and Sorting","3441f8e9":"basically it is grouping with, column switch","17b0c17b":"###  Multiple Condition","6a3ba7ac":"##  Handling NaN","72f870c4":"####  OR","fe81a741":"##  Head","c5173875":"##  Pivot","4f45f2d6":"Basically counts of all the columns","eb0cc457":"###  Combination","304f3fc4":"a. merge\nb. aggregation\nc. sort\nd. duplicated rows?? \ne. add use cases ","8252c9f1":"Data squashing according to values according to a column","30ba2ab1":"df['column_name'] = dfbased functions","0bf7233e":"# Overview","a1591894":"## Columns ","73a8741c":"###  Single Condition filtering","b66065b2":"###  Relationship to groupby","4892dc03":"OR symbol  \"|\"","68328c7a":"AND sysbol  \"&\"","856e6cac":"## Tail","947a6322":"##  Info","5eafb5be":"application of custom functions","75489907":"##  To CSV","0e0a6466":"# Importing DATA ","2ab30c56":"## Datatypes","a2f5b9f6":"## Shape","a07fdb55":"user may also prefer to use df.column.isin(list), rather than usign multiple conditions referring to the same column","7c9e41c0":"###  Multiple","01609856":"# Exporting Data ","9f16edba":"## To SQL","bcc83f29":"##  from Pickle","c24d88ec":"Apply row level filtering first prior to selection of specific columns","9e9c0b9e":"# Viewing and Cleaning Data","4b481b5f":"##  Conditional Filtering \/ Row level","dc4c76c9":"### Single Column","9d5fe4af":"##  Selecting Specific Columns \/ Column Level","2ebc8d20":"SQL's TOP, LIMIT equivalent ","62ceac0d":"#### AND","8b324c14":"Statistically summary of numerical columns in the data set","83c2c291":"######  what functions will be useful ??","64fd1408":"## Adding Columns","0716d9d5":"in standard SQL \nSELECT [top, distinct]\n* \n\nFROM MAIN TABLE  \nJOIN SUB TABLE  primary keys  = foreign keys \n\nWHERE\nCONDITION\n\n--GROUP BY  --group by must have agregation functions\n\n\nSORT BY","8d602e7f":"## Lambda Functions  and Custom Functions","a6c43280":"## To Pickle","c5f55ca0":"Filtering is index based","68896bad":"##  Sorting","3296c645":"table = dataframe ","3b73dc8b":"## Pandas and SQL ","7b8aa0da":"# Manipulating Data","13228d68":"#### Regular Functions","ec554c7f":"pandas data frames are reiterable and results of which can be stored to another dataframe. This comes handy especially when using aggregated data","0938ce7e":"###  Switch","534ad93f":"### Single","6522aea3":"##  Groupby","8c61cb35":"##  from SQL","e993bdb9":"enclose statement using \"()\"","30794bf4":"lambda x : True if (x > 10 and x < 20) else False","b1a76b23":"####  Lambda Functions","394a9687":"cnxbrs = pyodbc.connect(driver='{SQL Server}',server='',database='',uid='',pwd='')","48bc7d5b":"###  Multiple Column","49a291cd":"## Joining Data Frames","8458fd08":"## SQL","fe5bcf02":"pd.read_fwf()"}}