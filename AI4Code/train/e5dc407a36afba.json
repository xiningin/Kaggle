{"cell_type":{"85cf1e55":"code","b1d0f06f":"code","057ed5c2":"code","4053fb93":"code","b3d2e762":"code","b91b70b6":"code","9a40df89":"code","e89ca51e":"code","b6cf0b3a":"code","55499513":"code","6be88ea1":"code","4bb41d57":"code","5e16d783":"code","1d1f7373":"code","695e475a":"code","858d79d3":"code","b5a46ab8":"code","09ee66dc":"code","7acb0785":"code","136f8de9":"code","4cdc2ea2":"code","2a47538e":"code","a42d740c":"code","2512aab8":"code","5dab4408":"code","06216877":"code","42cb4154":"markdown","ad7b7638":"markdown","363cb864":"markdown","4e8f0299":"markdown","3904e024":"markdown","46f2ff94":"markdown","5c0d6f5c":"markdown","ec21d677":"markdown","8ecfe6bc":"markdown","9c6f41e0":"markdown","fc6bc247":"markdown","a48625ca":"markdown"},"source":{"85cf1e55":"import pickle\nimport pandas as pd\nimport numpy as np\nimport os, sys, gc \nfrom plotnine import *\nimport plotnine\n\nfrom tqdm import tqdm_notebook\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport matplotlib as mpl\nfrom matplotlib import rc\nimport re\nfrom matplotlib.ticker import PercentFormatter\nimport datetime\nfrom math import log # IDF \uacc4\uc0b0\uc744 \uc704\ud574","b1d0f06f":"%config InlineBackend.figure_format = 'retina'\nmpl.font_manager._rebuild()\n\nfontpath = '..\/input\/t-academy-recommendation\/NanumBarunGothic.ttf'\nfont = fm.FontProperties(fname=fontpath, size=9).get_name()\n\nmpl.pyplot.rc('font', family=font)\nplt.rc('font', family=font)\nplt.rcParams['font.family'] = font","057ed5c2":"warnings.filterwarnings(action='ignore')","4053fb93":"path = \"..\/input\/t-academy-recommendation\/\"\nprint(os.listdir(path))","b3d2e762":"# \ud558\ub098\uc758 \ub9ac\uc2a4\ud2b8\ub85c \ubc18\ud658\ud558\ub294 \ucf54\ub4dc \ndef chainer(s):\n    return list(itertools.chain.from_iterable(s))","b91b70b6":"# pd.read_json : json \ud615\ud0dc\uc758 \ud30c\uc77c\uc744 dataframe \ud615\ud0dc\ub85c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc \nmagazine = pd.read_json(path + 'magazine.json', lines=True) # lines = True : Read the file as a json object per line.\nmetadata = pd.read_json(path + 'metadata.json', lines=True)\nusers = pd.read_json(path + 'users.json', lines=True)","9a40df89":"import itertools\nfrom itertools import chain\nimport glob\nimport os ","e89ca51e":"read_rowwise = pd.read_csv(path + \"read_rowwise.csv\")","b6cf0b3a":"%%time \n# article_id\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc0ad\uc81c \nread_rowwise = read_rowwise[read_rowwise['article_id'] != ''].reset_index(drop=True)\n\n# \uc77d\uc740\ub0a0\uc9dc\uc640 \uc2dc\uac04 \ucd94\ucd9c \nread_rowwise['dt'] = read_rowwise['from'].astype(str).apply(lambda x: x[0:8]).astype(int)\nread_rowwise['hr'] = read_rowwise['from'].astype(str).apply(lambda x: x[8:10]).astype(int)\nread_rowwise['read_dt'] = pd.to_datetime(read_rowwise['dt'].astype(str).apply(lambda x: x[0:4] + '-' + x[4:6] + '-' + x[6:8]))\n\nread_rowwise['author_id'] = read_rowwise['article_id'].apply(lambda x: str(x).split('_')[0])","55499513":"read_rowwise[read_rowwise['user_id'] == '#0000d1188f75d0b0ea7a8e23a2b760e5']","6be88ea1":"read_rowwise[read_rowwise['user_id'] == '#0000eea6d339abfd02ed590bc451fc63']","4bb41d57":"following_cnt_by_user = users['following_list'].map(len)\nfollowing_rowwise = pd.DataFrame({'user_id': np.repeat(users['id'], following_cnt_by_user),\n                             'author_id': chainer(users['following_list'])})\n\nfollowing_rowwise.reset_index(drop=True, inplace=True)\n\n# \uad6c\ub3c5\ud558\ub294 \uc791\uac00\uc758 \uae00\uc744 \uc77d\ub294 \ube44\uc728 vs \uadf8\ub807\uc9c0 \uc54a\uc740 \uc791\uac00\uc758 \uae00\uc744 \uc77d\ub294 \ube44\uc728 \nfollowing_rowwise['is_following'] = 1\nread_rowwise = pd.merge(read_rowwise, following_rowwise, how='left', on=['user_id', 'author_id'])\n\ndel following_rowwise\ngc.collect()","5e16d783":"user_id = '#a87e970972364bb14a542f57b0933db9'\nread_user = read_rowwise[read_rowwise['user_id'] == user_id]\nread_user = read_user.groupby(['read_dt', 'is_following', 'author_id'])['author_id'].agg({'count'}).reset_index()","1d1f7373":"from mizani.breaks import date_breaks\nfrom mizani.formatters import date_format\n\n(ggplot(data=read_user)\n    + geom_point(aes(x='read_dt', y='count', color='author_id', size='count'), alpha = 0.5, show_legend=False)\n    + geom_text(aes(x='read_dt', y='count', label='author_id'), color='grey', \n               data = read_user[read_user['is_following'] == 1], size=7)\n    + scale_x_datetime(breaks=date_breaks('1 month'), labels=date_format('%Y%m'))\n    + theme_minimal()\n    + ggtitle(\"\uc77c\ubcc4 \uc77d\uc740 \uc791\uac00\uc758 \uae00\uc758 \ube48\ub3c4\")\n    + labs(x=\"\ub144\ub3c4\", y=\"\uc77d\uc740 \uc791\uac00\uc758 \uae00\uc758 \ube48\ub3c4\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_text_y = element_text(color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n )","695e475a":"metadata.head()","858d79d3":"from datetime import datetime \nmetadata['reg_datetime'] = metadata['reg_ts'].apply(lambda x : datetime.fromtimestamp(x\/1000.0))\nmetadata.loc[metadata['reg_datetime'] == metadata['reg_datetime'].min(), 'reg_datetime'] = datetime(2090, 12, 31)\nmetadata['reg_dt'] = metadata['reg_datetime'].dt.date\nmetadata['type'] = metadata['magazine_id'].apply(lambda x : '\uac1c\uc778' if x == 0.0 else '\ub9e4\uac70\uc9c4')\nmetadata['reg_dt'] = pd.to_datetime(metadata['reg_dt'])","b5a46ab8":"read_cnt_by_reg_dt = pd.DataFrame(metadata.groupby('reg_dt')['article_id'].count()).reset_index()\nread_cnt_by_reg_dt = read_cnt_by_reg_dt.iloc[:-1]\n\n(ggplot(data=read_cnt_by_reg_dt)\n    + geom_line(aes(x='reg_dt', y='article_id'), colour = '#49beb7')\n    + theme_minimal()\n    + ggtitle(\"\ub4f1\ub85d\uc77c\uc790\ubcc4 \uae00 \uc218\")\n    + labs(x=\"\ub4f1\ub85d\uc77c\uc790\", y=\"\uae00 \uc218\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n )","09ee66dc":"read_cnt_by_reg_dt_ = read_cnt_by_reg_dt[read_cnt_by_reg_dt['reg_dt'] >= '2019-03-01']\n\n(ggplot(data=read_cnt_by_reg_dt_)\n    + geom_line(aes(x='reg_dt', y='article_id'), colour = '#49beb7')\n    + theme_minimal()\n    + ggtitle(\"3\uc6d4\uc758 \ub4f1\ub85d\uc77c\uc790\ubcc4 \uae00 \uc218\")\n    + labs(x=\"\ub4f1\ub85d\uc77c\uc790\", y=\"\uae00 \uc218\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n )","7acb0785":"# metadata[metadata['magazine_id'] == 34075]\nread_cnt_by_reg_dt = read_rowwise[read_rowwise['author_id'] == '@merryseo'].groupby(['read_dt','article_id'])['article_id'].agg({'count'}).reset_index()\nread_cnt_by_reg_dt = read_cnt_by_reg_dt.sort_values(by='read_dt', ascending=False)\n\n(ggplot(data=read_cnt_by_reg_dt)\n    + geom_line(aes(x='read_dt', y='count',group='article_id', colour='article_id'), show_legend=False)\n    + theme_minimal()\n    + ggtitle(\"\uc704\ud074\ub9ac \ub9e4\uac70\uc9c4 Magazine(34075)\")\n    + labs(x=\"\ub4f1\ub85d\uc77c\uc790\", y=\"\uae00 \uc18c\ube44\uc218\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n    + scale_color_hue(l=0.5)\n )","136f8de9":"# metadata[metadata['magazine_id'] == 34075]\nread_cnt_by_reg_dt = read_rowwise[read_rowwise['author_id'] == '@basenell'].groupby(['read_dt','article_id'])['article_id'].agg({'count'}).reset_index()\nmetadata_ = metadata[['id', 'reg_dt']].rename(columns={'id':'article_id'})\nread_cnt_by_reg_dt = pd.merge(read_cnt_by_reg_dt, metadata_[['article_id', 'reg_dt']], how='left', on='article_id')\nread_cnt_by_reg_dt = read_cnt_by_reg_dt[read_cnt_by_reg_dt['reg_dt'] >= '2019-01-15']\n\n(ggplot(data=read_cnt_by_reg_dt)\n    + geom_line(aes(x='read_dt', y='count',group='article_id', colour='article_id'), show_legend=False)\n    + theme_minimal()\n    + ggtitle(\"\uc704\ud074\ub9ac \ub9e4\uac70\uc9c4 Magazine(40511)\")\n    + labs(x=\"\ub4f1\ub85d\uc77c\uc790\", y=\"\uae00 \uc18c\ube44\uc218\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n    + scale_color_hue(l=0.5)\n )","4cdc2ea2":"# \ub4f1\ub85d\uc77c\uc5d0 \ub530\ub978 \uae00 \uc18c\ube44\uc218\uc758 \ubcc0\ud654 \nread_rowwise = pd.merge(read_rowwise, metadata_, how='left', on='article_id')\nread_rowwise['diff_dt'] = (read_rowwise['read_dt'] - read_rowwise['reg_dt']).dt.days\noff_day = read_rowwise.groupby(['diff_dt'])['diff_dt'].agg({'count'}).reset_index()\n\n# \uba54\ud0c0\ub370\uc774\ud130\uc5d0 \ub0a0\uc9dc\uac00 \uc798\ubabb \ub9e4\ud551\ub418\uc5b4\uc11c \uc74c\uc218\uac12\uc774 \ub098\uc624\ub294 \uac12 \uc81c\uac70 \n# 200\uc774\ud558\ub85c \ubf51\uc740 \uc774\uc720\ub294 \ub0a0\uc9dc\uac00 \ub108\ubb34 \ud070 \ub370\uc774\ud130\uac00 \uc788\uc5b4\uc11c \uc81c\uac70\ud588\uc74c \noff_day = off_day[(off_day['diff_dt'] >= 0) & (off_day['diff_dt'] <= 200)]","2a47538e":"(ggplot(data=off_day)\n    + geom_line(aes(x='diff_dt', y='count'), color='#49beb7')\n    + theme_minimal()\n    + ggtitle(\"\uacbd\uacfc\uc77c\uc5d0 \ub530\ub978 \uae00 \uc18c\ube44\uc218 \ubcc0\ud654\")\n    + labs(x=\"\uacbd\uacfc\uc77c\", y=\"\ud3c9\uade0 \uae00 \uc18c\ube44\uc218\") \n    + theme(text = element_text(fontproperties=fm.FontProperties(fname=fontpath, size=9)),\n         axis_text_x = element_text(angle=60, color='black'),\n         axis_line=element_line(color=\"black\"),\n         axis_ticks=element_line(color = \"grey\"),\n         figure_size=(12,6))\n    + scale_color_hue(l=0.5)\n )","a42d740c":"metadata['keyword_list'].values[0]","2512aab8":"keyword_dict = {}\nfor i in tqdm_notebook(metadata[metadata['keyword_list'].apply(lambda x: len(x)) != 0]['keyword_list'].values):\n    for j in range(0, len(i)):\n        word = i[j]\n        cnt = 1\n        try:\n            keyword_dict[word] += cnt\n        except:\n            keyword_dict[word] = cnt","5dab4408":"# wordcloud\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc815\ubcf4\ub294 lovit\ub2d8\uc758 \ube14\ub85c\uadf8 https:\/\/lovit.github.io\/nlp\/2018\/04\/17\/word_cloud\/\ub97c \ucc38\uace0\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \nfrom wordcloud import WordCloud\nfrom PIL import Image\n\nwordcloud = WordCloud(\n    font_path = fontpath,\n    width = 800,\n    height = 800,\n    background_color=\"white\",\n    mask= np.array(Image.open(path + \"\/figure\/RS-KR.png\"))\n\n)\nwordcloud = wordcloud.generate_from_frequencies(keyword_dict)","06216877":"fig = plt.figure(figsize=(12, 8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.show()\nfig.savefig('wordcloud2.png')","42cb4154":"\ub4f1\ub85d\uc77c\uc790\ubcc4 \uae00\uc758 \uc218\ub97c \ubcf4\uba74 2015\ub144\ub3c4 7\uc6d4 1\uc77c\uc744 \uae30\uc810\uc73c\ub85c \uc99d\uac00\ud558\ub294 \ucd94\uc138\uc774\uace0, \uc8fc\uae30\uc801\uc73c\ub85c \uc99d\uac00\ud588\ub2e4\uac00 \uac10\uc18c\ud558\ub294 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 1\ub144\uc744 \uc8fc\uae30\ub85c 1\ubc88\uc815\ub3c4 \ud53c\ud06c\ub97c \ubcf4\uc774\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc785\ub2c8\ub2e4. \ud2b9\ud788, 2019\ub144\ub3c4 1\uc6d4 \uadfc\ubc29\uc5d0\ub294 \uc5c4\uccad\ub098\uac8c \ub6f0\ub294\ub370 \ud574\ub2f9 \uc774\uc720\ub97c \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","ad7b7638":"## \ub370\uc774\ud130 \ud0d0\uc0c9\uc758 \ubaa9\uc801\n1. \ub370\uc774\ud130\uac00 \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \uad6c\uc131\ub41c\uc9c0 \ud655\uc778\ud558\uace0 \ubd84\uc11d\uc758 \ubc29\ud5a5\uc744 \uacb0\uc815 \n2. \uc0ac\uc6a9\uc790\uc640 \uc544\uc774\ud15c\uc758 \ud2b9\uc131\uc744 \ud30c\uc545\ud558\uace0 \uc88b\uc740 \ud53c\uccd0\uc640 \uc544\uc774\ub514\uc5b4\ub97c \ubc1c\uad74 ","363cb864":"\ucc38\uace0\uc790\ub8cc \n- \ube0c\ub7f0\uce58 \ub370\uc774\ud130\uc758 \ud0d0\uc0c9\uacfc \uc2dc\uac01\ud654 : https:\/\/brunch.co.kr\/@kakao-it\/332\n- Kakao Arena 2\ud68c \ub300\ud68c : \ube0c\ub7f0\uce58 \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uae00 \ucd94\ucc9c \ub300\ud68c : https:\/\/arena.kakao.com\/forum\/topics\/10","4e8f0299":"\ub370\uc774\ud130\uc758 \uc885\ub958\ub294 \ud06c\uac8c 5\uac00\uc9c0\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uba54\ud0c0 \ub370\uc774\ud130\uc758 magazine_id\uc640 Magazine\ub370\uc774\ud130\uc758 id\uc640 \ub9e4\ud551\ub418\ub294 \ub4f1 \uceec\ub7fc\uba85\uc774 \uc870\uae08 \ub2e4\ub978 \uc810\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc0ac\ud56d\uc5d0 \uc720\uc758\ud558\uba74\uc11c \uac01 \ud30c\uc77c\ubcc4\ub85c \uc5b4\ub5a0\ud55c \ud2b9\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","3904e024":"json \ud30c\uc77c\uc758 \uacbd\uc6b0\ub294 pd.read_json\uc744 \uc774\uc6a9\ud574\uc11c \uc27d\uac8c \ubd88\ub7ec\uc654\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, read\uc758 \ub370\uc774\ud130\ub294 \ud30c\uc77c\uba85\uc774 \"\uc2dc\uc791\uc77c_\uc885\ub8cc\uc77c\" \ud615\ud0dc\ub85c \uc81c\uacf5\ub418\uc5c8\uace0 \ud30c\uc77c\uc758 \uac2f\uc218\ub3c4 3600\uac1c\ub85c \ub9ce\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30\uc5d0 \uacbd\ub85c\ub0b4\uc5d0 \uc788\ub294 \ud30c\uc77c\uc744 \ud55c\ubc88\uc5d0 \ubd88\ub7ec\uc640\uc11c \ud558\ub098\uc758 \ud30c\uc77c\ub85c \ud569\uce58\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. ","46f2ff94":"## \ub370\uc774\ud130 \ud0d0\uc0c9 - metadata","5c0d6f5c":"\ub450\ubc88\uc9f8\ub85c \ubc1c\uacac\ud55c \uc774\uc720\ub294 \uc2dc\uac04\uc774 \ud750\ub984\uc5d0 \ub530\ub77c\uc11c \uc0ac\uc6a9\uc790\uc758 \uc120\ud638\uac00 \ubc14\ub014 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc0ac\uc6a9\uc790\ub97c \ubcf4\uba74 \ucd08\uae30\uc5d0 \uad6c\ub3c5\ud588\ub358 \uc791\uac00\ub4e4\uc740 \ub9ce\uc73c\ub098 \uc2dc\uac04\uc774 \uc9c0\ub098\uba74\uc11c \uc77d\uc9c0 \uc54a\uace0 \uac00\uc7a5 \ucd5c\uadfc \ud55c\ub2ec\uc5d0\ub294 \uad6c\ub3c5\ud558\uc9c0 \uc54a\uc740 \uc791\uac00\ub4e4\uc758 \uae00\uc744 \ub354 \ub9ce\uc774 \uc77d\ub294 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uad6c\ub3c5\ud558\ub294 \uc791\uac00\uc758 \uc774\ub984\ub9cc \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4. )","ec21d677":"\uc704\ub97c \ud1b5\ud574 \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uc815\ubcf4\ub294 **\ucd94\ucc9c\uc2dc\uc5d0 \ud574\ub2f9 \uc815\ubcf4\ub4e4\uc744 \ud1a0\ub300\ub85c \uc2dc\uac04\uc5d0 \ub530\ub77c\uc11c \uc0ac\uc6a9\uc790\uc758 \uc120\ud638\uac00 \ubc14\ub010 \uac83\uc740 \uc544\ub2cc\uc9c0, \uad6c\ub3c5\ud55c \uc791\uac00\ub9cc\uc758 \uae00\uc744 \uc77d\ub294 \uac8c \uc2e0\ub8b0\ud560 \ub9cc\ud55c\uc9c0\uc5d0 \ub300\ud574 \uc815\ud655\ud788 \ub530\uc838\ubd10\uc57c \ud569\ub2c8\ub2e4.**","8ecfe6bc":"## \ub370\uc774\ud130 \ub85c\ub4dc","9c6f41e0":"https:\/\/brunch.co.kr\/brunchbookproject\/7 \uba3c\uc800, \ud574\ub2f9 \uc774\uc720\ub294 \ube0c\ub7f0\uce58\ubd81 \ucd9c\ud310 \ud504\ub85c\uc81d\ud2b8\uc758 \uacb0\uacfc\uc785\ub2c8\ub2e4. \ube0c\ub7f0\uce58\uc5d0\uc11c\ub294 \ub2e8\uc21c \uae00\ub9cc \uc4f0\ub294\uac8c \uc544\ub2c8\ub77c \ub9e4\uac70\uc9c4, \uc704\ud074\ub9ac \uc5f0\uc7ac\ub4f1\uc758 \ub2e4\uc591\ud55c \ud615\ud0dc\uc758 \uae00\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \ud574\ub2f9 \ub0a0\uc9dc\ub294 \ube0c\ub7f0\uce58\ubd81 \ucd9c\ud310 \ud504\ub85c\uc81d\ud2b8\uc758 \ub9c8\uac10\ub0a0\ub85c\uc11c \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc774 \uc2e0\uccad\ud55c \uac83\uc73c\ub85c \ud310\ub2e8\ub429\ub2c8\ub2e4. \n\n\uc774\ubc88\uc5d0\ub294 2019\ub144\ub3c4 3\uc6d4\uc758 \ub370\uc774\ud130\ub9cc\uc744 \ubf51\uc544\uc11c \uc8fc\uae30\ubcc4\ub85c \uc5b4\ub5a4 \ud2b9\uc131\uc744 \ubcf4\uc774\ub294 \uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","fc6bc247":"\uc704\ud074\ub9ac \ub9e4\uac70\uc9c4\uc5d0 \ub530\ub978 \uae00 \uc18c\ube44\uc218\ub97c **\ubc1c\ud589\uacfc \ub3d9\uc2dc\uc5d0 \uc5c4\uccad\ub09c \uc18c\ube44\uc218**\ub97c \ubcf4\uc774\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc790\uc138\ud788\ubcf4\uba74, \uc77c\uc8fc\uc77c \uc774\ud6c4\uc5d0 \ub2e4\uc2dc \uc19f\uc544\uc624\ub974\ub294 \ubaa8\uc2b5 \ub610\ud55c \ubcfc \uc218 \uc788\ub294\ub370, \ub2e4\uc74c\ud3b8\uc744 \ubcf4\uae30\uc804\uc5d0 \uc774\uc804\ud3b8\uc744 \ubcf4\ub294 \ubaa8\uc2b5\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","a48625ca":"3\uc6d4\uc758 \ub4f1\ub85d\uc77c\uc790\ubcc4 \uae00 \uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 1\uc8fc\uc77c\uc744 \uc8fc\uae30\ub85c \uc5b4\ub5a4 \ud328\ud134\uc744 \ubcf4\uc774\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ubaa8\uc2b5\uc744 \ubcf4\uc774\ub294 \uc774\uc720\ub294 \uc704\ud074\ub9ac \ub9e4\uac70\uc9c4\uc5d0 \uc788\ub294\ub370 \ub9e4\uc8fc \ub3d9\uc77c\ud55c \ub0a0\uc9dc\uc5d0 \"\ube0c\ub7f0\uce58\uc5d0\uc11c \uc120\uc815\ud55c \uc791\uac00\uac00 \uae00\uc744 \uc8fc\uae30\uc801\uc73c\ub85c \uc62c\ub9ac\ub294 \ub9e4\uac70\uc9c4\"\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. "}}