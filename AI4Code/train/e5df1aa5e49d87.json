{"cell_type":{"1f965e03":"code","8ef1567f":"code","62a149a4":"code","c1e54637":"code","012dcce1":"code","3e7a926c":"code","6d04d17d":"code","893ab21b":"code","0110ef97":"code","9b1ec092":"code","4ddf70af":"code","3db738ba":"code","249f1f7f":"code","7fc9275c":"code","94684d53":"code","91875099":"code","8d83de69":"code","c1291343":"code","a6c99506":"code","0b43b793":"code","557b70b5":"code","3eca9238":"code","c4dce0f4":"code","30a774a5":"code","6749fa3f":"code","24ab020d":"markdown","c1e43781":"markdown","6a1e3fab":"markdown","8210a13a":"markdown","db44a866":"markdown","3aae0bb3":"markdown","b7ffdf0f":"markdown","538304f8":"markdown","79b76b97":"markdown","a12b6eda":"markdown","64a97e8c":"markdown","267ff092":"markdown","54d63424":"markdown","d1117b3d":"markdown","72c965c8":"markdown","be0cdb81":"markdown","3b2229a2":"markdown","f91f8c20":"markdown","f7535cbd":"markdown","4874d8bb":"markdown","f6d5c91b":"markdown","8060ee1f":"markdown","77d093cf":"markdown","de356ca7":"markdown","d336ba92":"markdown","ecebe63e":"markdown","89d085ea":"markdown","b9f38bc3":"markdown","f382facc":"markdown","cd8abc88":"markdown"},"source":{"1f965e03":"import pandas as pd\nimport numpy as np\nimport sqlite3\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom IPython.display import Image\n\n%matplotlib inline\n\npd.set_option('max_columns', 180)\npd.set_option('max_rows', 200000)\npd.set_option('max_colwidth', 5000)","8ef1567f":"#run_query(q): Takes a SQL query as an argument and returns a pandas dataframe by using the connection as a SQLite built-in context manager. \ndef run_query(q):\n    with sqlite3.connect('mlb.db') as conn:\n        return pd.read_sql_query(q, conn)\n    \n#run_command(c): Takes a SQL command as an argument and executes it using the sqlite module.\ndef run_command(c):\n    with sqlite3.connect('mlb.db') as conn:\n        conn.execute('PRAGMA foreign_keys = ON;') #Enables enforcement of foreign key restraints.\n        conn.isolation_level = None\n        conn.execute(c)\n    \n#show_tables(): calls the run_query() function to return a list of all tables and views in the database.\ndef show_tables():\n    q = '''SELECT\n            name,\n            type\n        FROM sqlite_master\n        WHERE type IN (\"table\",\"view\");\n        '''\n    return run_query(q)    \n    ","62a149a4":"#game_log.csv\ngame_log = pd.read_csv(\"..\/input\/major-league-baseball-games-data-from-retrosheet\/game_log.csv\",low_memory=False)\nprint(game_log.shape)\ngame_log.head()","c1e54637":"#park_codes.csv\npark_codes = pd.read_csv(\"..\/input\/major-league-baseball-games-data-from-retrosheet\/park_codes.csv\")\nprint(park_codes.shape)\npark_codes.head()","012dcce1":"#person_codes.csv\nperson_codes = pd.read_csv(\"..\/input\/major-league-baseball-games-data-from-retrosheet\/person_codes.csv\")\nprint(person_codes.shape)\nperson_codes.head()","3e7a926c":"#team_codes.csv\nteam_codes = pd.read_csv(\"..\/input\/major-league-baseball-games-data-from-retrosheet\/team_codes.csv\")\nprint(team_codes.shape)\nteam_codes.head()","6d04d17d":"print(team_codes['franch_id'].value_counts().head())\nteam_codes[team_codes['franch_id']=='BR3']","893ab21b":"Image(filename='..\/input\/major-league-baseball-games-data-from-retrosheet\/baseball_positions.png')","0110ef97":"fig = plt.figure(figsize=(9,6))\n\nleagues = game_log['h_league'].value_counts().index.tolist()\ntimes = game_log['h_league'].value_counts().tolist()\npercentage_times = np.array(times)\/sum(times)\ncolors = cm.Set3(np.arange(10)\/10.)\nexplode = [0]*6\nexplode[0] = 0.1\n\npatches, texts, autotexts = plt.pie(percentage_times, \n                                    colors=colors, \n                                    labels=leagues, \n                                    autopct='%1.1f%%',\n                                    explode=explode,\n                                    startangle=-90,\n                                    shadow=True)\nfor i in range(0,2):\n    texts[i].set_fontsize(18)\n    autotexts[i].set_fontsize(14)\n    \nfor i in range(2,6):\n    texts[i].set_fontsize(0)\n    autotexts[i].set_fontsize(0)\n    \nplt.title('Pct Values for Each League', fontsize=25, y=1.1)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","9b1ec092":"game_log['h_league'].value_counts(dropna=False)","4ddf70af":"conn = sqlite3.connect('mlb.db')\n\ngame_log.to_sql('game_log', conn, index=False, if_exists='replace')\npark_codes.to_sql('park_codes', conn, index=False, if_exists='replace')\nperson_codes.to_sql('person_codes', conn, index=False, if_exists='replace')\nteam_codes.to_sql('team_codes', conn, index=False, if_exists='replace')\n\nshow_tables()","3db738ba":"#Adds the new game_id column\nq1 = '''\n    ALTER TABLE game_log\n    ADD game_id VARCHAR(12);\n'''\n\ntry:\n    run_command(q1)\nexcept:\n    pass\n\n#Set the concatenation of h_name, date and number_of_game as game_id values\nq2 = '''\n    UPDATE game_log \n    SET game_id = h_name || date || number_of_game\n    WHERE game_id IS NULL;\n'''\n\nrun_command(q2)\n\nq3 = '''\n    SELECT \n        date, \n        h_name, \n        number_of_game,\n        game_id\n    FROM game_log\n    LIMIT 10;\n\n'''\n\nrun_query(q3)","249f1f7f":"Image(filename='..\/input\/major-league-baseball-games-data-from-retrosheet\/normalized_schema.png')","7fc9275c":"q4 = '''\n    CREATE TABLE IF NOT EXISTS person (\n        person_id TEXT,\n        first_name TEXT,\n        last_name TEXT,\n        PRIMARY KEY (person_id)\n    );\n'''\n\nrun_command(q4)\n\nq5 = '''\n    INSERT OR IGNORE INTO person\n    SELECT\n        id,\n        first,\n        last\n    FROM person_codes;\n'''\n\nrun_command(q5)\n\nq6 = '''\n    SELECT * FROM person\n    LIMIT 10;\n'''\nrun_query(q6)","94684d53":"q7 = '''\n    CREATE TABLE IF NOT EXISTS park (\n        park_id TEXT,\n        name TEXT,\n        nickname TEXT,\n        city TEXT,\n        state TEXT,\n        notes TEXT,\n        PRIMARY KEY (park_id)\n    );\n'''\n\nrun_command(q7)\n\nq8 = '''\n    INSERT OR IGNORE INTO park\n    SELECT\n        park_id,\n        name,\n        aka,\n        city,\n        state,\n        notes\n    FROM park_codes;\n'''\n\nrun_command(q8)\n\nq9 = '''\n    SELECT * FROM park\n    LIMIT 10;\n'''\nrun_query(q9)","91875099":"app_type = pd.read_csv(\"..\/input\/major-league-baseball-games-data-from-retrosheet\/appearance_type.csv\",low_memory=False)\napp_type.to_sql('app_type', conn, index=False, if_exists='replace')","8d83de69":"q10 = '''\n    CREATE TABLE IF NOT EXISTS appearance_type (\n        appearance_type_id TEXT,\n        name TEXT,\n        category TEXT,\n        PRIMARY KEY (appearance_type_id)\n    );\n'''\n\nrun_command(q10)\n\nq11 = '''\n    INSERT OR IGNORE INTO appearance_type\n    SELECT\n        appearance_type_id,\n        name,\n        category\n    FROM app_type;\n'''\n\nrun_command(q11)\n\nq12 = '''\n    SELECT * FROM appearance_type\n    LIMIT 10;\n'''\nrun_query(q12)","c1291343":"q13 = '''\n    CREATE TABLE IF NOT EXISTS league (\n        league_id TEXT,\n        name TEXT,\n        PRIMARY KEY (league_id)\n    );\n'''\n\nrun_command(q13) \n\nq14 = '''\n    INSERT OR IGNORE INTO league\n    VALUES\n        ('AL', 'American League'),\n        ('NL', 'National League'),\n        ('AA', 'American Association'),\n        ('UA', 'Union Association'),\n        ('FL', 'Federal League'),\n        ('PL', 'Players League');\n'''\n\nrun_command(q14)\n\nq15 = '''\n    SELECT * FROM league;\n'''\n\nrun_query(q15)","a6c99506":"q16 = '''\n    CREATE TABLE IF NOT EXISTS team (\n        team_id TEXT,\n        league_id TEXT,\n        city TEXT,\n        nickname TEXT,\n        franch_id TEXT,\n        PRIMARY KEY (team_id),\n        FOREIGN KEY (league_id) REFERENCES league(league_id)\n    );\n'''\n\nrun_command(q16) \n\nq17 = '''\n    INSERT OR IGNORE INTO team\n    SELECT\n        team_id,\n        league,\n        city,\n        nickname,\n        franch_id\n    FROM team_codes;\n'''\n\nrun_command(q17)\n\nq18 = '''\n    SELECT * FROM team\n    LIMIT 10;\n'''\n\nrun_query(q18)","0b43b793":"q19 = '''\n    CREATE TABLE IF NOT EXISTS game (\n        game_id TEXT,\n        date TEXT,\n        number_of_game INT,\n        park_id TEXT,\n        length_outs FLOAT,\n        day BOOLEAN,\n        completion TEXT,\n        forefeit TEXT,\n        protest TEXT,\n        attendance INTEGER,\n        legnth_minutes INTEGER,\n        additional_info TEXT,\n        acquisition_info TEXT,\n        PRIMARY KEY (game_id),\n        FOREIGN KEY (park_id) REFERENCES park(park_id)\n    );\n'''\n\nrun_command(q19) \n\nq20 = '''\n    INSERT OR IGNORE INTO game\n    SELECT\n        game_id,\n        date,\n        number_of_game,\n        park_id,\n        length_outs,\n        CASE\n            day_night\n            WHEN 'D' THEN 1\n            WHEN 'N' THEN 0\n            ELSE NULL\n            END\n            AS day,\n        completion,\n        forefeit,\n        protest,\n        attendance,\n        length_minutes,\n        additional_info,\n        acquisition_info\n    FROM game_log;\n'''\n\nrun_command(q20)\n\nq21 = '''\n    SELECT * FROM game\n    LIMIT 10;\n'''\n\nrun_query(q21)","557b70b5":"q = '''\nSELECT sql FROM sqlite_master\nWHERE name = \"game_log\"\n  AND type = \"table\";\n\n'''\nrun_query(q)","3eca9238":"q22 = '''\n    CREATE TABLE IF NOT EXISTS team_appearance (\n        team_id TEXT,\n        game_id TEXT,\n        home BOOLEAN,\n        league_id TEXT,\n        score INT,\n        line_score TEXT,\n        at_bats INT,\n        hits INT,\n        doubles INT,\n        triples INT,\n        homeruns INT,\n        rbi INT,\n        sacrifice_hits INT,\n        sacrifice_flies INT,\n        hit_by_pitch INT,\n        walks INT,\n        intentional_walks INT,\n        strikeouts INT,\n        stolen_bases INT,\n        caught_stealing INT,\n        grounded_into_double INT,\n        first_catcher_interference INT,\n        left_on_base INT,\n        pitchers_used INT,\n        individual_earned_runs INT,\n        team_earned_runs INT,\n        wild_pitches INT,\n        balks INT,\n        putouts INT,\n        assists INT,\n        errors INT,\n        passed_balls INT,\n        double_plays INT,\n        triple_plays INT,\n        PRIMARY KEY (team_id, game_id),\n        FOREIGN KEY (team_id) REFERENCES team(team_id),\n        FOREIGN KEY (game_id) REFERENCES game(game_id),\n        FOREIGN KEY (team_id) REFERENCES team(team_id)\n    );\n'''\n\nrun_command(q22) \n\nq23 = '''\n    INSERT OR IGNORE INTO team_appearance\n    SELECT\n        h_name,\n        game_id,\n        1 AS home,\n        h_league,\n        h_score,\n        h_line_score,\n        h_at_bats,\n        h_hits,\n        h_doubles,\n        h_triples,\n        h_homeruns,\n        h_rbi,\n        h_sacrifice_hits,\n        h_sacrifice_flies,\n        h_hit_by_pitch,\n        h_walks,\n        h_intentional_walks,\n        h_strikeouts,\n        h_stolen_bases,\n        h_caught_stealing,\n        h_grounded_into_double,\n        h_first_catcher_interference,\n        h_left_on_base,\n        h_pitchers_used,\n        h_individual_earned_runs,\n        h_team_earned_runs,\n        h_wild_pitches,\n        h_balks,\n        h_putouts,\n        h_assists,\n        h_errors,\n        h_passed_balls,\n        h_double_plays,\n        h_triple_plays\n    FROM game_log\n\n    UNION\n\n    SELECT    \n        v_name,\n        game_id,\n        0 AS home,\n        v_league,\n        v_score,\n        v_line_score,\n        v_at_bats,\n        v_hits,\n        v_doubles,\n        v_triples,\n        v_homeruns,\n        v_rbi,\n        v_sacrifice_hits,\n        v_sacrifice_flies,\n        v_hit_by_pitch,\n        v_walks,\n        v_intentional_walks,\n        v_strikeouts,\n        v_stolen_bases,\n        v_caught_stealing,\n        v_grounded_into_double,\n        v_first_catcher_interference,\n        v_left_on_base,\n        v_pitchers_used,\n        v_individual_earned_runs,\n        v_team_earned_runs,\n        v_wild_pitches,\n        v_balks,\n        v_putouts,\n        v_assists,\n        v_errors,\n        v_passed_balls,\n        v_double_plays,\n        v_triple_plays\n    FROM game_log;\n'''\n\nrun_command(q23)\n\nq24 = '''\n    WITH home1 AS\n        (\n            SELECT *\n            FROM team_appearance\n            WHERE home = 1 AND doubles IS NOT NULL\n            LIMIT 5\n        ),\n    \n        home0 AS\n        (\n            SELECT *\n            FROM team_appearance\n            WHERE home = 0 AND doubles IS NOT NULL\n            LIMIT 5\n        )\n        \n        \n    SELECT *\n    FROM home1\n    \n    UNION\n    \n    SELECT *\n    FROM home0\n    \n'''\n\nrun_query(q24)","c4dce0f4":"q25 = '''\n    DROP TABLE IF EXISTS person_appearance\n'''\n\nrun_command(q25)\n\nq26 = '''\nCREATE TABLE person_appearance (\n    appearance_id INTEGER PRIMARY KEY,\n    person_id TEXT,\n    team_id TEXT,\n    game_id TEXT,\n    appearance_type_id,\n    FOREIGN KEY (person_id) REFERENCES person(person_id),\n    FOREIGN KEY (team_id) REFERENCES team(team_id),\n    FOREIGN KEY (game_id) REFERENCES game(game_id),\n    FOREIGN KEY (appearance_type_id) REFERENCES appearance_type(appearance_type_id)\n);\n'''\n\nq27 = '''\nINSERT OR IGNORE INTO person_appearance (\n    game_id,\n    team_id,\n    person_id,\n    appearance_type_id\n) \n    SELECT\n        game_id,\n        NULL,\n        hp_umpire_id,\n        \"UHP\"\n    FROM game_log\n    WHERE hp_umpire_id IS NOT NULL    \n\nUNION\n\n    SELECT\n        game_id,\n        NULL,\n        [1b_umpire_id],\n        \"U1B\"\n    FROM game_log\n    WHERE \"1b_umpire_id\" IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        NULL,\n        [2b_umpire_id],\n        \"U2B\"\n    FROM game_log\n    WHERE [2b_umpire_id] IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        NULL,\n        [3b_umpire_id],\n        \"U3B\"\n    FROM game_log\n    WHERE [3b_umpire_id] IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        NULL,\n        lf_umpire_id,\n        \"ULF\"\n    FROM game_log\n    WHERE lf_umpire_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        NULL,\n        rf_umpire_id,\n        \"URF\"\n    FROM game_log\n    WHERE rf_umpire_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        v_name,\n        v_manager_id,\n        \"MM\"\n    FROM game_log\n    WHERE v_manager_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        h_name,\n        h_manager_id,\n        \"MM\"\n    FROM game_log\n    WHERE h_manager_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        CASE\n            WHEN h_score > v_score THEN h_name\n            ELSE v_name\n            END,\n        winning_pitcher_id,\n        \"AWP\"\n    FROM game_log\n    WHERE winning_pitcher_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        CASE\n            WHEN h_score < v_score THEN h_name\n            ELSE v_name\n            END,\n        losing_pitcher_id,\n        \"ALP\"\n    FROM game_log\n    WHERE losing_pitcher_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        CASE\n            WHEN h_score > v_score THEN h_name\n            ELSE v_name\n            END,\n        saving_pitcher_id,\n        \"ASP\"\n    FROM game_log\n    WHERE saving_pitcher_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        CASE\n            WHEN h_score > v_score THEN h_name\n            ELSE v_name\n            END,\n        winning_rbi_batter_id,\n        \"AWB\"\n    FROM game_log\n    WHERE winning_rbi_batter_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        v_name,\n        v_starting_pitcher_id,\n        \"PSP\"\n    FROM game_log\n    WHERE v_starting_pitcher_id IS NOT NULL\n\nUNION\n\n    SELECT\n        game_id,\n        h_name,\n        h_starting_pitcher_id,\n        \"PSP\"\n    FROM game_log\n    WHERE h_starting_pitcher_id IS NOT NULL;\n'''\n\ntemplate = '''\n    INSERT INTO person_appearance (\n        game_id,\n        team_id,\n        person_id,\n        appearance_type_id\n    ) \n        SELECT\n            game_id,\n            {hv}_name,\n            {hv}_player_{num}_id,\n            \"O{num}\"\n        FROM game_log\n        WHERE {hv}_player_{num}_id IS NOT NULL\n\n    UNION\n\n        SELECT\n            game_id,\n            {hv}_name,\n            {hv}_player_{num}_id,\n            \"D\" || CAST({hv}_player_{num}_def_pos AS INT)\n        FROM game_log\n        WHERE {hv}_player_{num}_id IS NOT NULL;\n'''\n\n\nrun_command(q26)\nrun_command(q27)\n\nfor hv in [\"h\",\"v\"]:\n    for num in range(1,10):\n        query_vars = {\n            \"hv\": hv,\n            \"num\": num\n        }\n        run_command(template.format(**query_vars))","30a774a5":"q28 = '''\n    SELECT\n        pa.*,\n        at.name,\n        at.category\n    FROM person_appearance pa\n    INNER JOIN appearance_type at on at.appearance_type_id = pa.appearance_type_id\n    LIMIT 10;\n'''\n\nrun_query(q28)","6749fa3f":"original_tables = ['game_log', 'park_codes', 'team_codes', 'person_codes']\n\nfor table in original_tables:\n    q29 = '''DROP TABLE IF EXISTS {}'''.format(table)\n    run_command(q29)\n\nshow_tables()","24ab020d":"### League\nAs mentioned before, the leagues analysed in the data are:\n\n- AL: American League\n- NL: National League\n- AA: American Association\n- UA: Union Association\n- FL: Federal League\n- PL: Players League","c1e43781":"Shows the ID (which seems to match up with those in the main game log), first and last name, debut and role on each person involved in the games, featuring players, coaches, umpires and 'head coaches' (managers). Some of them may have had more than one role.","6a1e3fab":"### Appearance Type\nFirst, the data needs to be imported into SQLite from *appearance_type.csv* in order to insert it in the table.","8210a13a":"### Game","db44a866":"## Primary Key\n\nThe game log file does not have a single column that can be used as a primary key to uniquely identify each game. However, the Retrosheet data dictionary tells us that each game can be identified with an unique ID such as:\n\n*__id:__* *Each game begins with a twelve character ID record which identifies the date, home team, and number of the game. For example, ATL198304080 should be read as follows. The first three characters identify the home team (the Braves). The next four are the year (1983). The next two are the month (April) using the standard numeric notation, 04, followed by the day (08). The last digit indicates if this is a single game (0), first game (1) or second game (2) if more than one game is played during a day, usually a double header The id record starts the description of a game thus ending the description of the preceding game in the file.*\n\nThis way, creating a custom primary key made up of the concatenation of h_name, date and number_of_game in a new column called game_id, each game will be uniquely identified in the database.","3aae0bb3":"### Team Appearance\nFirst, let's extract the schema from the game_log table, and use that as a starting point for the query to avoid manually typing all the column names.","b7ffdf0f":"This means depending on the city or the league there may be more than one team ID, but the franchise (and the corresponding nickname) keeps being the same for all of them.","538304f8":"### Person","79b76b97":"### Helper Files","a12b6eda":"### Defensive positions ","64a97e8c":"### Team","267ff092":"In the game log, there are some columns reserved for the defensive position of each player (*v_player_#_def_pos*, where # corresponds to the number of player).\n\nTheir values go from 1 to 10, as seen in the image above, where I will consider number 10 as 'unknown' or a player that doesn't field.\n\nBased on the above diagram and some research, numbers 1-9 refer to:\n\n1. Pitcher\n2. Catcher\n3. 1st Base\n4. 2nd Base\n5. 3rd Base\n6. Shortstop\n7. Left Field\n8. Center Field\n9. Right Field","54d63424":"Shows information about the teams, where team_id seems to match up with the main game log.\n\nTaking a look at the franch_id, we realize for one single franchise there may be more than one team_id, as follows:","d1117b3d":"## Creating the tables\nTaking the right columns in the right order from the tables we already have will allow to create the tables for the normalized database:\n\n- team_appearance\n- team\n- person\n- person_appearance\n- game\n- league\n- appearance_type\n- park","72c965c8":"By looking at the values in the 'h_league' column, we can also see that about 1000 games do not include a value for the home team league.","be0cdb81":"Looks like the data mostly includes data from the two current leagues.\n\nAfter some research, I have found the acronym for each league refers to:\n\n- AL: American League\n- NL: National League\n- AA: American Association\n- UA: Union Association\n- FL: Federal League\n- PL: Players League","3b2229a2":"# Importing Data into SQLite","f91f8c20":"The main game log provides information about more than 171,000 games, containing:\n\n- Overall information on each game.\n- A list of the players and their positions (based on the order in which they batted).\n- Team results and stats.\n- Win-loss records.\n\nIt also seems like coaches are not recorded in the table.","f7535cbd":"### Main file","4874d8bb":"The data files that will be used to create the database are:\n\nMain file:\n\n- **'game_log.csv':** Contains hundreds of data points on each game, as a result of combining 127 separate CSV files from retrosheet (pre-cleaned), intersecting with the helper files on points such as park, player or team information. A file called 'game_log_fields.txt' explains the fields included in the main file, used as a reference for some of the explanatory markdowns.\n\n'Helper' files (for extra data):\n- **'park_codes.csv':** Contains information about the baseball parks where the games were held.\n- **'person_codes.csv':** Contains information about the people involved in the games, from player to coach.\n- **'team_codes.csv':** Contains information about the teams.","f6d5c91b":"Specifies the name of the baseball park, its location, years active and the league they hold games for. IDs, names, nicknames, location and league records from this table match with the main game log table.","8060ee1f":"# Removing the Original Tables","77d093cf":"The current baseball leagues in the US are the American League (AL) and the National League (NL). Let's see which ones the main game log include.","de356ca7":"# Helper functions","d336ba92":"# Introduction\nThis project aims to design and create a database of baseball game-level statistics, working with files of Major League Baseball (MLB) games data from Retrosheet ( https:\/\/www.retrosheet.org\/ ).","ecebe63e":"# EDA - Understanding the Data","89d085ea":"# Normalization\nFor the purpose of this project, the normalized schema I will use is the following:","b9f38bc3":"### Person Appearance","f382facc":"### Leagues","cd8abc88":"### Park"}}