{"cell_type":{"5c3cf56b":"code","714b7f56":"code","0ba9e5fe":"code","f50f9505":"code","87881f10":"code","d98c8894":"code","24ab8d6e":"code","c7660f8a":"code","952a96da":"code","d9fe16c7":"code","91e4714f":"code","73d0acf9":"code","f5d5b066":"code","d558ccb6":"code","7478e31d":"code","078c7c65":"markdown","a03ac613":"markdown","80a32ce8":"markdown","91f4e8df":"markdown","34f11d72":"markdown","2316edfb":"markdown","7ab730be":"markdown","4f0f852e":"markdown"},"source":{"5c3cf56b":"![ -d \/kaggle\/input\/release-2021-v1\/augeropendata ] && [ ! -d augeropendata ] && ln -s \/kaggle\/input\/release-2021-v1\/augeropendata augeropendata  # kaggle specific linking dataset to augeropendata directory","714b7f56":"# Data analysis tools\nimport pandas as pd\nimport numpy as np\nfrom numpy import radians as rad\nimport math \n\n# Fitting and Plotting\nimport scipy.stats\nfrom scipy.stats import norm\nfrom scipy.optimize import curve_fit \nfrom scipy.optimize import minimize\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","0ba9e5fe":"# Default values for plots\n#plt.rcParams[\"figure.figsize\"] = [12, 9] # figure width and height\nplt.rcParams[\"figure.figsize\"] = [14, 9] # figure width and height\nplt.rcParams[\"font.size\"] = 20\n","f50f9505":"# Jupyter\/ IPython formatting\nfrom IPython.display import Math, Latex, display","87881f10":"# Data loading, encapsulated to make it less installation and OS dependant\nimport os.path\nfrom zipfile import ZipFile\ndef AugerOpen(fdir, file):\n    \"\"\"\n    Loads a file from the auger open data release. Can be either in the local directory,\n    in the parent directory or in the augeropendata directory.\n    File is identified by it directory *fdir* and filename *file* and can be found in the directory\n    or in a zip file.\n    \"\"\"\n    for loc in [\".\", \"..\", \"augeropendata\", \"data\"]:\n        fname = os.path.join(loc, fdir, file)\n        if os.path.isfile(fname):\n            return open(fname)\n        zname=os.path.join(loc, fdir + \".zip\")\n        if os.path.isfile(zname):\n            with ZipFile(zname) as myzip:\n                return myzip.open(os.path.join(fdir, file))\n    raise FileNotFoundError(os.path.join(fdir, file))","d98c8894":"hd = pd.read_csv(AugerOpen('summary', 'dataSummary.csv'))","24ab8d6e":"## weighted average in multi-eye events to be done before the energy cut \n## the energy cut will be done later on weighted average\nfd_calib = hd[(hd.fd_hdCalibEye == 1)].copy() # copy so we can add columns later\n\nfd_grouped = fd_calib.groupby('id')\nfd_unique = fd_calib.drop_duplicates('id').set_index('id')\n\nn_events = len(fd_calib)\nn_unique = len(fd_unique)\n\ndisplay(Latex(f'''Read {n_events} calibration events of which {n_unique} unique have an energy above $2.5~ \\\\times 10^{{18}}\\\\,\\\\mathrm{{eV}}$.\n    The total number of FD events (counting multi-eye events as multiple events) is {n_events}.'''))","c7660f8a":"## Calculate weights: 1\/uncertainty^2\nfd_calib['fd_e_weight'] = 1 \/ np.square(fd_calib.fd_dtotalEnergy)\n\n## Calculate E\/sigma^2 \nfd_calib['fd_e_weighted'] = fd_calib.fd_totalEnergy * fd_calib.fd_e_weight\n\n## Calculated weighted energy average for multi-eye events\n## and convert from series to \nweighted_sum = fd_grouped['fd_e_weighted'].sum()\nsum_of_weights = fd_grouped['fd_e_weight'].sum()\n\n# energy values in EeV\nfd_e_avg = weighted_sum \/ sum_of_weights\nfd_unique['fd_AVG'] = fd_e_avg\n\nfd_e_avg_err = 1 \/ np.sqrt(sum_of_weights)\nfd_unique['fd_ERR'] = fd_e_avg_err","952a96da":"## shower to shower fluctuations\n## The contribution from shower-to-shower fluctuations to the uncertainty in E$_{SD}$ can be parameterized as\n## a relative error in S$_{38}$.\n\ndef sh_to_sh (lgefd):\n    \"\"\"parameterization of the shower to shower fluctuations\"\"\"\n    s2s = [0.127, -0.081, 0.0277]     \n    return s2s[0] + s2s[1]*(lgefd - 18.5) + s2s[2]*np.square(lgefd - 18.5)\n","d9fe16c7":"##  vectors for p.d.f. (E > 2.5 EeV)\nsd_s38_err = fd_unique.sd_ds1000 * fd_unique.sd_s38 \/ fd_unique.sd_s1000\nsd_s38_err_sh = np.sqrt(np.square(sd_s38_err) + np.square(sh_to_sh(np.log10(fd_e_avg*1e18)) * fd_unique.sd_s38))\n\n## vectors for the S38 E_FD correlation fit and plot (E > 3 EeV)\nfd_calib_fit = fd_unique[fd_unique.fd_AVG > 3]\n\n# energy values in eV\nfd_e_fit = fd_calib_fit.fd_AVG * 1e18\nfd_e_err_fit = fd_calib_fit.fd_ERR * 1e18\nsd_e_fit = fd_calib_fit.sd_energy * 1e18\nsd_s38_fit= fd_calib_fit.sd_s38\nsd_s38_err_fit = fd_calib_fit.sd_ds1000 * fd_calib_fit.sd_s38 \/ fd_calib_fit.sd_s1000\nsd_s38_err_sh_fit = np.sqrt( np.square(sd_s38_err_fit) + np.square(sh_to_sh(np.log10(fd_e_fit)) * sd_s38_fit) )\n\ndisplay(Latex(f'''We get {len(fd_e_fit)} unique events with FD total energy above $3~ \\\\times 10^{{18}}\\\\,\\\\mathrm{{eV}}$.'''))","91e4714f":"# CONSTANT CIC CURVE PLOT PRD @ 25 VEM INTENSITY THRESHOLD ( ~ 5 x 10^18 eV)\nap25 = [0.924103, -1.54603, -0.914497]\n\ndef cic (zen, apars):\n    cc = np.square(np.cos(rad(zen))) - 0.621\n    return ((apars[2]*cc + apars[1])*cc + apars[0])*cc + 1  # Honer evaluation\n\nthetas = np.linspace(0, 60)\ncic_th = cic(thetas, ap25)\n\n\n## SD zenith\nszen = fd_calib_fit.sd_theta\n\n## S(1000) with weather and geomagnetic corrections \/ S_38\n\ncicfacwg = (fd_calib_fit.sd_s1000 * fd_calib_fit.sd_wcorr * fd_calib_fit.sd_gcorr \/ sd_s38_fit)\n\nplt.figure(figsize=(15, 5)) \n\nplt.subplot(121)\nplt.plot(1 \/ np.cos(rad(szen)), cicfacwg, '+')\nplt.plot(1 \/ np.cos(rad(thetas)), cic_th)\n\nplt.xlabel('sec($\\Theta$)')\nplt.title('attenuation factor')\nplt.ylabel('attenuation factor')\n#\nplt.ylim(0.3, 1.4)\n#plt.xlim(1, 2)    \n\nplt.subplot(122)\nplt.hist(sd_s38_fit, bins=50)\n\n#plt.xlabel('cos$^2$($\\Theta$)')\nplt.title('S(38) distribution')\nplt.xlabel('S(38) distribution [VEM]')\nplt.yscale('log')\n","73d0acf9":"## SIMPLE FIT WITH POWER LAW FUNCTION\n# FCN DEFINITION E_SD = A*S_38^B\n\ndef power(x, a, b):\n     \"\"\"pw\"\"\"\n     return (a * pow(x, b))\n\ndef poweri(x, a, b):\n     \"\"\"pwi\"\"\"\n     return (pow(x*a, b))\n\nvals, covar = curve_fit(power, sd_s38_fit, fd_e_fit\/1e18, p0=(0.1, 1))\nvals1, covar1 = curve_fit(poweri, fd_e_fit\/1e18, sd_s38_fit, p0=(1 \/ vals[0], 1 \/ vals[1]))\n\nnp.set_printoptions(precision=4)\n\ndisplay(Latex(f''' SIMPLE FIT PARAMETERS: $~$ A = ({vals[0]:.4f} $\\\\pm$ {np.sqrt(covar[0,0]):.1}) \n$\\\\times ~ 10^{{18}}$ eV, \nB = {vals[1]:.3f} $\\\\pm$ {np.sqrt(covar[1,1]):.1}'''))\n","f5d5b066":"## LOGLIKELIHOOD FIT IMPLEMENTATION\n\ndef bootstrap_pdf(fe, fs, fpar):\n    \"\"\" Probability density function \n    for the detection of a hybrid shower  \n    Note: sum runs on data sample E > 2.5\n    \n    Args: \n        FD energy in EeV, s38, fit parameters    \n    Returns:\n        probability density function     \n    \"\"\" \n    \n    #efd = fe\n    #s = fs\n    # create column vectors of energies and signals to evaluate PDFs at\n    efd = np.asarray(fe)[:, np.newaxis]\n    s = np.asarray(fs)[:, np.newaxis]\n\n\n    efd_exp = fd_e_avg #in EeV\n    sigma_efd = fd_e_avg_err #in EeV\n    \n    s_exp = pow(efd_exp\/fpar[0], 1\/fpar[1])   \n    sh2sh = sh_to_sh(np.log10(efd_exp * 1e18)) # E in eV\n    sigma_s = np.sqrt( np.square(sd_s38_err) + np.square(sh2sh*s_exp) )\n\n    ## sum on i events E_FD > 2.5 EeV\n    pdf = np.sum(norm.pdf(efd, efd_exp, sigma_efd) * norm.pdf(s, s_exp, sigma_s), axis=1)      \n \n    return (pdf \/ len(fd_e_avg))  \n    \ndef loglike(parll):\n    \"\"\"unbinned likelihood function \n    Note: sum runs on data sample E > 3 EeV\n    \n    Args: \n        fit parameters    \n    Returns:\n        negative log-likelihood  \n    \"\"\"     \n    log_lik = 0         \n    ## sum on k events E_FD > 3 EeV \n    log_lik = - np.log(bootstrap_pdf(fd_e_fit \/ 1e18, sd_s38_fit, parll)).sum()\n        \n    # negative log-likelihood\n    return log_lik\n\nipars = [vals[0], vals[1]]\n#ipars = [0.19, 1]\n\nresult = minimize(loglike, ipars, method='Nelder-Mead')\n\nprint (result)\n\ndisplay(Latex(f''' LIKELIHOOD FIT PARAMETERS: $~$ A = {result.x[0]*10:.4f} \n$\\\\times ~ 10^{{17}}$ eV, \nB = {result.x[1]:.4f}'''))\n","d558ccb6":"# PLOT DATA WITH POWER LAW FIT\n\nx = 10**np.linspace(18.4, 19.8) # equal steps in log space\n\nplt.figure(figsize=(10, 8)) \n\nplt.errorbar(fd_e_fit, sd_s38_fit, sd_s38_err_sh_fit, fd_e_err_fit, fmt='.k', color='black', ecolor='lightgray')\n\n## SIMPLE FIT\n#fit1 = pow(x \/ (vals[0] * 1e18), 1 \/ vals[1])\n#plt.plot(x,fit1)\n\n## LIKELIHOOD FIT\nfit1 = pow(x \/ (result.x[0] * 1e18), 1 \/ result.x[1])\nplt.plot(x, fit1)\n\nplt.title('Correlation Plot')\nplt.yscale('log')\nplt.xscale('log')\nplt.xlabel('$E_{FD}$ [eV]')\nplt.ylabel('$S_{38}$ [VEM]')\nplt.xlim(1e18, 1e20)\nplt.ylim(4, 5e2)\nNone","7478e31d":"# DISTRIBUTION OF E_SD\/E_FD + GAUSSIAN FIT\n\n##  FULL SAMPLE\nfig, ax = plt.subplots(1,1)\n\ndatat = sd_e_fit \/ fd_e_fit\n\nn, binst, patches = ax.hist(datat,15, density=1, alpha=0.5)\n\nbinw = binst[1] - binst[0]\n\ncenters = (0.5*(binst[1:] + binst[:-1]))\n\nx = np.linspace(min(datat), max(datat), 310)\n\npars, cov = curve_fit(lambda x, mu, sig : norm.pdf(x, mu, sig), centers, n, p0=[1, 0.15])  \n                                                                                                                                                  \nax.set_title('Distribution of E$_{SD}$\/E$_{FD}$')\n\n##plot the fit function\nplt.plot(x, norm.pdf(x, *pars))\n\nplt.xlabel('$E_{SD}\/E_{FD}$')\nplt.ylabel('probability density')\nplt.xlim(0.2,1.8)\nplt.show()\n\nreso = np.sqrt(np.square(pars[1]) - np.square(0.074)) * 100\n\ndisplay(Latex(f'''RMS DEVIATION  \n$\\\\mu$ = {pars[0]:.2f} $\\\\pm$ {np.sqrt(cov[0,0]):.2f}, $\\\\sigma$ = {pars[1]:.2f} $\\\\pm$ {np.sqrt(cov[1,1 ]):.3f} \n$~~~$ SD OVERALL RESOLUTION {reso:.0f} % '''))\n\n\n","078c7c65":"### Correlation plot \n\nThe correlation between FD energies and S$_{38}$ is well described by a power law relationship E$_{FD}$ = A S$_{38}\\,^{B}$. The two parameters A and B are fitted to the selected hybrid data. For the fit we use a tailored maximum-likelihood method where the probability density function is given by a bootstrap estimate of the energy distribution of the selected events and where the uncertainties in S$_{38} and FD energy are evaluated on an event-by-event basis. The calibration constants A and B are used to estimate the energy for the bulk of SD events and they define the SD energy scale. For details see [1] and in particular Appendix B.","a03ac613":"### From S(1000) to S$_{38}$\n\nThe energy estimator for the Surface Detector is the shower size, S(1000), (`sd_s1000`), the signal at 1000 m from the shower impact point in the plane of the shower front. It is measured in units of vertical muon equivalent (VEM), corresponding to the signal released by a muon traversing the SD station vertically. Corrections of order 2% and 1% for the atmospheric and geomagnetic effects (`sd_wcorr`, `sd_gcorr`), respectively, are made to S(1000), see [3], [4]. For a given energy, the value of S(1000) decreases with the zenith angle because of the increasing atmospheric depth crossed by the shower. The corrected shower-size estimator, S$_{38}$, (`sd_s38`), is then derived by applying a zenith and energy dependent factor, parameterized with a third degree polynomial in terms of the variable x = cos$^2 \\theta$ - cos$^2 38^\\circ$. It can be seen as the signal that a shower would have produced had it arrived at 38$^\\circ$, the median angle of the zenith distribution. For more details see [1] and references therein. ","80a32ce8":"## Distribution of E$_{SD}$\/E$_{FD}$ and SD energy resolution \n\nThe SD resolution $\\sigma_{SD}$(E)\/E can be inferred from data by analyzing in each energy bins the histograms of the ratio E$_{SD}$\/E$_{FD}$, following a Gaussian ratio distribution. The resolution is $\\sim$ 20% at 2$ \\cdot$ 10$^{18}$ eV and tends smoothly to $\\sim $ 7% above 2$\\cdot$10$^{19}$ eV. The FD energy resolution $\\sigma_{FD}$(E)\/E is ~ 7.4%, see [1]. The overall resolution is obtained by subtracting in quadrature the FD energy resolution from the $\\sigma$ of the fitted Gaussian.","91f4e8df":"This is the kaggle version of a Pierre Auger Observatory Open Data notebook. You can run it by clicking on \"Copy and Edit\" in the top right corner.","34f11d72":"Select events for this analysis:\n- Has `fd_hdCalibEye` set\n- Fluorescence detector energy (`fd_totalEnergy`) above $3\\,\\mathrm{EeV}$ for fit and plots\n- Fluorescence detector energy (`fd_totalEnergy`) above $2.5\\,\\mathrm{EeV}$ for p.d.f definition\n\nAlso prepare a dataframe with unique events, i.e., with each `id` present only once. This dataframe gets indexed by event `id` to allow to merge with data like averages from multi-eye events.","2316edfb":"### Energy from the calorimetric FD measurement \n\n\nGet total energy of the event `fd_dtotalEnergy` and its uncertainty `fd_dtotalEnergy`. For multi-eye events, which are those where the `id` is repeated, we calculate the average of total energy weighted with the inverse of the squared uncertainty.\n\n**Note**: in [1] the weighted average is made on the calorimetric energy and secondly the invisible energy correction [2] is applied to get the total FD energy and its uncertainty.\n","7ab730be":"![PierreAugerObservatoryLogo.jpg](attachment:PierreAugerObservatoryLogo.jpg)\n# Energy Calibration\n\n<i>Notebook released together with the Pierre Auger Observatory Open Data release 2021 (<a href=\"https:\/\/doi.org\/10.5281\/zenodo.4487613\">DOI 10.5281\/zenodo.4487613<\/a>). More information at the <a href=\"https:\/\/www.auger.org\/opendata\/\">Auger open data website<\/a>.<\/i>\n\nThe energy estimation for the vertical (zenith < 60 degrees) events recorded by the Pierre Auger Surface Detector (SD) relies on the calibration of its energy estimator, the shower size S(1000), i.e. the signal at 1000 m from the shower impact at the ground, or shower core, in the plane of the shower front. To calibrate the shower size we profit from the measurement of the shower calorimetric energy performed by the Fluorescence Detector (FD) for a subsample of high quality events simultaneously recorded by both the SD and FD, the so-called golden hybrid events.\n\nNOTE: this is a **simplified version** of the energy calibration applied to data from the Pierre Auger Observatory. For details on the full energy calibration procedure please refer to the following publications:\n\n[1] Pierre Auger Collaboration [A. Aab et al.], \"A measurement of the cosmic ray energy spectrum above 2.5$\\cdot$10$^{18}$ eV using the Pierre Auger Observatory\", Phys. Rev. D. 102 (2020) 062005. DOI: https:\/\/doi.org\/10.1103\/PhysRevD.102.062005 arXiv: https:\/\/arxiv.org\/abs\/2008.06486\n\n[2] Pierre Auger Collaboration [A. Aab et al.], \"Data-driven estimation of the invisible energy of cosmic ray showers with the Pierre Auger Observatory\", Phys. Rev. D 100 (2019) 082003. DOI: https:\/\/doi.org\/10.1103\/PhysRevD.100.082003 arXiv: https:\/\/arxiv.org\/abs\/1901.08040\n\n[3] Pierre Auger Collaboration [A. Aab et al.], \"Impact of atmospheric effects on the energy reconstruction of air showers observed by the surface detectors of the Pierre Auger Observatory\", JINST 12 (2017) P02006. DOI: https:\/\/doi.org\/10.1088\/1748-0221\/12\/02\/P02006 arXiv: https:\/\/arxiv.org\/abs\/1702.02835 \n\n\n[4] Pierre Auger Collaboration [P. Abreu et al.], \"The effect of the geomagnetic field on cosmic ray energy estimates and large scale anisotropy searches on data from the Pierre Auger Observatory\", J. Cosmol. Astropart. Phys. 11 (2011) 022. DOI: https:\/\/doi.org\/10.1088\/1475-7516\/2011\/11\/022 arXiv: https:\/\/arxiv.org\/abs\/1111.7122\n\n","4f0f852e":"## Calibration with golden hybrid data\n\nThe so-called *golden hybrid* events are simultaneously observed and independently reconstructed by the Fluorescence Detector (FD) and the Surface Detector (SD). \nThe total energy as measured with the FD, `fd_totalEnergy`, and the SD shower size estimator S$_{38}$, `sd_s38`, are given in the released dataset file. The identifying flag for this analysis is `fd_hdCalibEye` == 1\n\nThe hybrid events are selected to guarantee a precise estimation of the FD energies and to minimize primary mass dependent biases due to the field of view of the FD telescopes, see \\[1\\]. The selection criteria are summarized as follows:\n- stability of data taking and atmospheric data;\n- quality of the shower geometry and profile measurement;\n- fiducial volume cuts.\n\nThe calibration is performed by selecting events with E_FD > 3 x 10^18 eV to guarantee a nearly 100% trigger efficiency of the SD array. Note that for the definition of the p.d.f of the likelihood fit we use events with energy above E > 2.5 EeV."}}