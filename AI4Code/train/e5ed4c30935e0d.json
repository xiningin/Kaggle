{"cell_type":{"7514c55f":"code","f4e4a87a":"code","24ab62d9":"code","65dc616e":"code","53bd1649":"code","eb103ebc":"code","7a4f5983":"code","e4171f29":"code","cd2f0542":"code","8bf7e842":"code","d8604fd2":"code","07fa3872":"code","3066367c":"code","4e950a56":"code","72b6f3ba":"code","098c7134":"code","d40467fc":"code","1b307f6d":"code","ce39c782":"code","dcd7638e":"code","3626bc80":"code","10c11c6d":"code","a1980bbe":"code","c56169c1":"code","bb361506":"code","bed0bb46":"code","94ff101e":"code","2222558e":"code","68c340f2":"code","96aff93f":"code","0923416a":"code","b488fc8c":"code","7b41b680":"code","3352de43":"code","243377e3":"markdown","a53ee1f7":"markdown","a96a6e0b":"markdown","9faf543a":"markdown","e73fac0c":"markdown","79bc71b4":"markdown","a2dcbe0d":"markdown"},"source":{"7514c55f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\n\nfrom imblearn.over_sampling import SMOTE\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nimport lightgbm as lgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set()","f4e4a87a":"df = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ntest_data = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","24ab62d9":"df.shape","65dc616e":"df.isnull().sum()","53bd1649":"df['City_Code_Patient'] = df['City_Code_Patient'].fillna(8.0)\ntest_data['City_Code_Patient'] = test_data['City_Code_Patient'].fillna(8.0)","eb103ebc":"df['Bed Grade'] = df['Bed Grade'].fillna(2.0)\ntest_data['Bed Grade'] = test_data['Bed Grade'].fillna(2.0)","7a4f5983":"data = df.groupby('Hospital_code')['patientid'].count().reset_index()\ndata.columns = ['Hospital','Count']\n\nfig = px.bar(\n    data,\n    x='Hospital',\n    y='Count',\n    width=900,\n    height=600,\n    title='Patient count per Hospital'\n)\n\nfig.show()","e4171f29":"data = df.groupby(['Available Extra Rooms in Hospital'])['patientid'].count().reset_index()\ndata.columns = ['Available Extra Rooms in Hospital','Count']\n\nfig = px.bar(\n    data,\n    x='Available Extra Rooms in Hospital',\n    y='Count',\n    width=900,\n    height=600,\n    title='Count of Available Extra Rooms in Hospital'\n)\n\nfig.show()","cd2f0542":"data = df.groupby(['Department'])['patientid'].count().reset_index()\ndata.columns = ['Department','Count']\n\nfig = px.bar(\n    data,\n    x='Department',\n    y='Count',\n    width=600,\n    height=600,\n    title='Cases per Department'\n)\n\nfig.show()","8bf7e842":"data = df.groupby(['Stay'])['patientid'].count().reset_index()\ndata.columns = ['Stay','Count']\n\nfig = px.bar(\n    data,\n    x='Stay',\n    y='Count',\n    width=900,\n    height=600,\n    title='Stay'\n)\n\nfig.show()","d8604fd2":"data = df.groupby(['Age'])['patientid'].count().reset_index()\ndata.columns = ['Age','Patient Count']\n\nfig = px.bar(\n    data,\n    x='Age',\n    y='Patient Count',\n    width=900,\n    height=600,\n    title='Age-wise distribution of patients'\n)\n\nfig.show()","07fa3872":"data = df.groupby(['Visitors with Patient'])['patientid'].count().reset_index()\ndata.columns = ['Visitors with Patient','Patient Count']\n\nfig = px.bar(\n    data,\n    x='Visitors with Patient',\n    y='Patient Count',\n    width=900,\n    height=600,\n    title='Visitors with Patient'\n)\n\nfig.show()","3066367c":"data = df.groupby(['Type of Admission'])['patientid'].count().reset_index()\ndata.columns = ['Type of Admission','Count']\n\nfig = px.bar(\n    data,\n    x='Type of Admission',\n    y='Count',\n    width=500,\n    height=500,\n    title='Type of Admissions'\n)\n\nfig.show()","4e950a56":"#Separating Categorical and Numerical Data\n\ncols_to_label=[]\nfor i in df.columns:\n    if df[i].dtypes == 'O':\n        cols_to_label.append(i)\n\ncols_to_label","72b6f3ba":"df['Bill_per_patient'] = df.groupby('patientid')['Admission_Deposit'].transform('sum')\n\ntest_data['Bill_per_patient'] = test_data.groupby('patientid')['Admission_Deposit'].transform('sum')","098c7134":"cols_to_label = ['Hospital_code','City_Code_Hospital','Hospital_type_code','Available Extra Rooms in Hospital','Bed Grade','City_Code_Patient','Visitors with Patient','Hospital_region_code','Department','Ward_Type','Ward_Facility_Code','Type of Admission','Severity of Illness','Age','Stay']","d40467fc":"cols_to_label2 = ['Hospital_code','City_Code_Hospital','Hospital_type_code','Available Extra Rooms in Hospital','Bed Grade','City_Code_Patient','Visitors with Patient','Hospital_region_code','Department','Ward_Type','Ward_Facility_Code','Type of Admission','Severity of Illness','Age']","1b307f6d":"#Encoding the dataset\n\ndf[cols_to_label] = df[cols_to_label].apply(LabelEncoder().fit_transform)\ntest_data[cols_to_label2] = test_data[cols_to_label2].apply(LabelEncoder().fit_transform)","ce39c782":"df['Stay'].value_counts()","dcd7638e":"df.head()","3626bc80":"#Scaling the dataset\n\ns_scaler = StandardScaler()\n\ndata = s_scaler.fit_transform(df.drop('Stay',axis=1))\ndata2 = s_scaler.fit_transform(test_data)","10c11c6d":"#Plotting Correlation Heatmap\n\nplt.subplots(figsize=(10,7))\nsns.heatmap(df.corr(),cmap='coolwarm_r')","a1980bbe":"data = pd.DataFrame(data)\ndata.columns = ['case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit','Bill_per_patient']\ndata = data.drop(['case_id'], axis=1)","c56169c1":"data2 = pd.DataFrame(data2)\ndata2.columns = ['case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit','Bill_per_patient']\ndata2 = data2.drop(['case_id'], axis=1)","bb361506":"X = data\ny = df['Stay']","bed0bb46":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=1)","94ff101e":"X_train.shape, y_train.shape","2222558e":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)\nscore = gnb.score(X_train, y_train)\nprint(f'The Train accuracy of the GaussianNB model is : {score}')\npredictions = gnb.predict(X_test)\nacc = accuracy_score(predictions, y_test)\nprint(f'The Test accuracy of the GaussianNB model is : {acc}')","68c340f2":"lgb_cl = lgb.LGBMClassifier(boosting_type='gbdt', learning_rate=0.1, n_estimators=5000, importance_type='gain', objective='multiclass', num_boost_round=100,\n                            num_leaves=300, max_depth=5, \n                            max_bin=60, bagging_faction=0.9, feature_fraction=0.9, subsample_freq=2, scale_pos_weight=2.5, \n                            random_state=1994, n_jobs=-1, silent=False)\n\nlgb_cl.fit(X_train, y_train)\npreds = lgb_cl.predict(X_test)\natrain = round(lgb_cl.score(X_train, y_train)*100,2)\nacc = round(accuracy_score(preds, y_test)*100,2)\nprint(f'The Train accuracy of the LGBMClassifier model is: {atrain}%')\nprint(f'The Test accuracy of the LGBMClassifier model is: {acc}%')","96aff93f":"final_predictions = lgb_cl.predict(data2)","0923416a":"final_predictions = pd.DataFrame(final_predictions)","b488fc8c":"final_predictions[0] = final_predictions[0].map({0:'0-10',1:'11-20',2:'21-30',3:'31-40',4:'41-50',5:'51-60',6:'61-70',7:'71-80',8:'81-90',9:'91-100',10:'More than 100 Days'})","7b41b680":"final_preds = pd.DataFrame(columns=['case_id','Stay'])\nfinal_preds['case_id'] = test_data['case_id']\nfinal_preds['Stay'] = final_predictions[0]\nfinal_preds","3352de43":"final_submission_data = final_preds.to_csv('submissions.csv', index=False)","243377e3":"### 4. Preprocessing Data","a53ee1f7":"### 1. Import Relevant Libraries","a96a6e0b":"### 2. Data Cleaning","9faf543a":"Thank You!!!","e73fac0c":"### 2. Plotting Data with Plotly","79bc71b4":"### 5. Data Modeling","a2dcbe0d":"# Janatahack Healthcare Analytics"}}