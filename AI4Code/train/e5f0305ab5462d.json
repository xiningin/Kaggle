{"cell_type":{"b40c25ba":"code","923f67fc":"code","f699dfe1":"code","23877d03":"code","1208ba39":"code","d93e5a7b":"code","9427984c":"code","59daeed9":"code","0b7c9fe8":"code","a2ecbbaa":"code","92b13c6d":"code","bf729962":"code","9602a5be":"code","c4ca80c9":"code","7b651e7d":"code","f9b76179":"code","f89220d4":"code","276ec147":"code","312fe10a":"code","c7a5bfbb":"code","569ae032":"code","4036ea32":"code","93e4df7c":"code","aaccb49c":"code","2b364c01":"code","5b49fb10":"code","8517ef12":"code","d0968eb8":"code","f5d133cc":"code","90553f33":"markdown","fbd0764e":"markdown","ace36115":"markdown","6ad323bd":"markdown","cf7cd17e":"markdown","d956103b":"markdown","c44fe3b3":"markdown","ec5a961b":"markdown","2b21ae11":"markdown","abc8c354":"markdown","fa3b97dc":"markdown","44788cd8":"markdown","02f3204f":"markdown","0b194370":"markdown","1f244d08":"markdown"},"source":{"b40c25ba":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\n\nif df.shape[0] != 3:\n    !pip install \/kaggle\/input\/kerasapplications -q\n    !pip install \/kaggle\/input\/efficientnet-keras-source-code\/ -q --no-deps\n\n    import os\n\n    import efficientnet.tfkeras as efn\n    import numpy as np\n    import pandas as pd\n    import tensorflow as tf\n\n    def auto_select_accelerator():\n        try:\n            tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"Running on TPU:\", tpu.master())\n        except ValueError:\n            strategy = tf.distribute.get_strategy()\n        print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n\n        return strategy\n\n\n    def build_decoder(with_labels=True, target_size=(300, 300), ext='jpg'):\n        def decode(path):\n            file_bytes = tf.io.read_file(path)\n            if ext == 'png':\n                img = tf.image.decode_png(file_bytes, channels=3)\n            elif ext in ['jpg', 'jpeg']:\n                img = tf.image.decode_jpeg(file_bytes, channels=3)\n            else:\n                raise ValueError(\"Image extension not supported\")\n\n            img = tf.cast(img, tf.float32) \/ 255.0\n            img = tf.image.resize(img, target_size)\n\n            return img\n\n        def decode_with_labels(path, label):\n            return decode(path), label\n\n        return decode_with_labels if with_labels else decode\n\n\n    def build_augmenter(with_labels=True):\n        def augment(img):\n            img = tf.image.random_flip_left_right(img)\n            img = tf.image.random_flip_up_down(img)\n            return img\n\n        def augment_with_labels(img, label):\n            return augment(img), label\n\n        return augment_with_labels if with_labels else augment\n\n\n    def build_dataset(paths, labels=None, bsize=32, cache=True,\n                      decode_fn=None, augment_fn=None,\n                      augment=True, repeat=True, shuffle=1024, \n                      cache_dir=\"\"):\n        if cache_dir != \"\" and cache is True:\n            os.makedirs(cache_dir, exist_ok=True)\n\n        if decode_fn is None:\n            decode_fn = build_decoder(labels is not None)\n\n        if augment_fn is None:\n            augment_fn = build_augmenter(labels is not None)\n\n        AUTO = tf.data.experimental.AUTOTUNE\n        slices = paths if labels is None else (paths, labels)\n\n        dset = tf.data.Dataset.from_tensor_slices(slices)\n        dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n        dset = dset.cache(cache_dir) if cache else dset\n        dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n        dset = dset.repeat() if repeat else dset\n        dset = dset.shuffle(shuffle) if shuffle else dset\n        dset = dset.batch(bsize).prefetch(AUTO)\n\n        return dset\n\n    COMPETITION_NAME = \"shopee-product-matching\"\n    strategy = auto_select_accelerator()\n    BATCH_SIZE = strategy.num_replicas_in_sync * 1024\n\n    IMSIZE = (224, 240, 260, 300, 380, 456, 528, 600)\n\n    load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\n    sub_df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\n    test_paths = load_dir + \"test_images\/\" + sub_df['image'] \n\n    sub_df['clothers'] = 0\n    sub_df['other'] = 0\n    \n\n    label_cols = sub_df.columns[4:]\n\n    test_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[0], IMSIZE[0]))\n    dtest = build_dataset(\n        test_paths, bsize=BATCH_SIZE, repeat=False, \n        shuffle=False, augment=False, cache=False,\n        decode_fn=test_decoder\n    )\n\n    with strategy.scope():\n        model = tf.keras.models.load_model(\n            '..\/input\/shopee-2-class-train-efnb0-2\/modelb00.h5'\n        )\n\n    model.summary()\n\n    sub_df[label_cols] = model.predict(dtest, verbose=1)\n    df = sub_df.copy()\n    del sub_df\n\n    df_other = df[df['other'] >= 0.5]\n    df_clothes = df[df['other'] < 0.5]\n    df_other_len = df_other.shape[0]\n    df_other = df_other.append(df_clothes).reset_index(drop=True)\n    df = df_other.copy()\n    del df_other, df_clothes\nelse:\n    df['clothes'] = [0,1,0]\n    df['other'] = [1,0,1]    \n    df_other = df[df['other'] >= 0.5]\n    df_clothes = df[df['other'] < 0.5]\n    df_other = df_other.append(df_clothes).reset_index(drop=True)\n    df = df_other.copy()   \n    df_other_len = 2\n","923f67fc":"from numba import cuda\nimport torch\ncuda.select_device(0)\ncuda.close()\ncuda.select_device(0)","f699dfe1":"import sys, os\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\n\nimport numpy as np \nimport pandas as pd \n\nimport math, random\nimport cv2\nimport timm\nfrom tqdm import tqdm \n\nimport albumentations as A \nfrom albumentations.pytorch.transforms import ToTensorV2\n\nimport torch \nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nfrom torch import nn\nimport torch.nn.functional as F \nimport torchvision.models as models\nfrom torch.nn import Parameter\n\nimport gc\nimport cudf, cuml, cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml.neighbors import NearestNeighbors\n\nimport copy\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport transformers\nfrom transformers import (BertTokenizer, BertModel,\n                          DistilBertTokenizer, DistilBertModel)","23877d03":"COMPUTE_CV = False\nSAVE_IMGEMBEDDING = False\nEFF_B5 = True\nECA_NFNET_L0 = False\nMODEL_TESTING_NFNET = False\nMY_NFNET = True\nBERT = True\nDISTILBERT = False\nSAVE_DISTILBERT = False # You need to enable internet to download pretrained model\nEMBEDDING34_TH = 0.36\n\n#df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\nif len(df)>3: COMPUTE_CV = False\nif COMPUTE_CV: \n    print('this submission notebook will compute CV score but commit notebook will not')\nelse:\n    print('this submission notebook will only be used to submit result')","1208ba39":"class CFG:\n    \n    img_size = 512\n    fc_dim = 512\n    batch_size = 20\n    seed = 2020\n    \n    device = 'cuda' if torch.cuda.is_available() else 'cpu'\n    classes = 11014\n    classes_other = 11014 - 3282\n    classes_clothes = 3282\n        \n    model_name = 'tf_efficientnet_b5_ns'\n    model_name2 = 'eca_nfnet_l0'\n    model_name3 = 'efficientnet_b3'\n    model_name5 = 'eca_nfnet_l0'\n    model_name6 = 'eca_nfnet_l0'\n    \n    model_path = '..\/input\/shopee-pytorch-models\/arcface_512x512_eff_b5_.pt'\n    if MODEL_TESTING_NFNET or MY_NFNET:\n        model_path2 = '..\/input\/shopee-price-match-guarantee-embeddings\/arcface_512x512_nfnet_l0(mish)_b24_15.pt'\n    else:\n        model_path2 = '..\/input\/shopee-pytorch-models\/arcface_512x512_nfnet_l0 (mish).pt'\n    model_path3 = '..\/input\/shopee-pytorch-models\/arcface_512x512_eff_b3.pt'\n    model_path5 = '..\/input\/other-eca-nfnet-l0-training-21ep\/arcface_512x512_nfnet_l0(mish)19.pt'\n    model_path6 = '..\/input\/clothes-eca-nfnet-l0-training-30ep\/arcface_512x512_nfnet_l0(mish)28.pt'\n    scale = 30 \n    margin = 0.5","d93e5a7b":"def read_dataset(COMPUTE_CV,df = df):\n    \n    if COMPUTE_CV:\n        df_cu = cudf.DataFrame(df)\n        image_paths = '..\/input\/shopee-product-matching\/train_images\/' + df['image']\n    \n    else:\n        df_cu = cudf.DataFrame(df)\n        image_paths = '..\/input\/shopee-product-matching\/test_images\/' + df['image']\n\n    return df, df_cu, image_paths","9427984c":"def seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_torch(CFG.seed)","59daeed9":"def combine_predictions(row):\n    x = np.concatenate([row['image_predictions'], row['text_predictions'], row['phash_predictions']])\n    return ' '.join( np.unique(x))\ndef combine_for_cv(row):\n    x = np.concatenate([row['image_predictions'], row['text_predictions'], row['phash_predictions']])\n    return np.unique(x)\ndef combine_predictions_BERT(row):\n    x = np.concatenate([row['image_predictions'], row['text_predictions'], row['phash_predictions'], row['text_predictions_BERT']])\n    return ' '.join( np.unique(x))\ndef combine_for_cv_BERT(row):\n    x = np.concatenate([row['image_predictions'], row['text_predictions'], row['phash_predictions'], row['text_predictions_BERT']])\n    return np.unique(x)\n","0b7c9fe8":"def getMetric(col):\n    def f1score(row):\n        n = len(np.intersect1d(row.target, row[col]))\n        return 2*n \/ (len(row.target) + len(row[col]))\n    return f1score","a2ecbbaa":"def get_test_transforms():\n\n    return A.Compose(\n        [\n            A.Resize(CFG.img_size,CFG.img_size,always_apply=True),\n            A.Normalize(),\n        ToTensorV2(p=1.0)\n        ]\n    )","92b13c6d":"class ShopeeDataset(Dataset):\n    def __init__(self, image_paths, transforms=None):\n\n        self.image_paths = image_paths\n        self.augmentations = transforms\n\n    def __len__(self):\n        return self.image_paths.shape[0]\n\n    def __getitem__(self, index):\n        image_path = self.image_paths[index]\n        \n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.augmentations:\n            augmented = self.augmentations(image=image)\n            image = augmented['image']       \n    \n        return image,torch.tensor(1)","bf729962":"class ArcMarginProduct(nn.Module):\n    def __init__(self, in_features, out_features, scale=30.0, margin=0.50, easy_margin=False, ls_eps=0.0):\n        super(ArcMarginProduct, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.scale = scale\n        self.margin = margin\n        self.ls_eps = ls_eps  # label smoothing\n        self.weight = Parameter(torch.FloatTensor(out_features, in_features))\n        nn.init.xavier_uniform_(self.weight)\n\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(margin)\n        self.sin_m = math.sin(margin)\n        self.th = math.cos(math.pi - margin)\n        self.mm = math.sin(math.pi - margin) * margin\n\n    def forward(self, input, label):\n        # --------------------------- cos(theta) & phi(theta) ---------------------------\n        cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = torch.where(cosine > 0, phi, cosine)\n        else:\n            phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n        # --------------------------- convert label to one-hot ---------------------------\n        # one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')\n        one_hot = torch.zeros(cosine.size(), device='cuda')\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.out_features\n        # -------------torch.where(out_i = {x_i if condition_i else y_i) -------------\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.scale\n\n        return output\n    \n\nclass ShopeeModel(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes,\n        model_name = CFG.model_name,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = False,\n        pretrained = False):\n\n\n        super(ShopeeModel,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n        \n        elif model_name == 'nfnet_f3':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x\n    \n    \nclass ShopeeModel2(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes,\n        model_name = CFG.model_name2,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = False):\n\n\n        super(ShopeeModel2,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n        \n        elif model_name == 'eca_nfnet_l0':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x\n    \n    \nclass ShopeeModel3(nn.Module):\n\n    def __init__(\n        self, \n        model_name = CFG.model_name3,\n        n_classes = CFG.classes,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = False):\n\n\n        super(ShopeeModel3,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n        \n        elif model_name == 'eca_nfnet_l0':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x\n    \nclass ShopeeModel5(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes_other,\n        model_name = CFG.model_name5,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = False):\n\n\n        super(ShopeeModel5,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n        \n        elif model_name == 'eca_nfnet_l0':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x\n    \nclass ShopeeModel6(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes_clothes,\n        model_name = CFG.model_name6,\n        fc_dim = 512,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = False):\n\n\n        super(ShopeeModel6,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n\n        if model_name == 'resnext50_32x4d':\n            final_in_features = self.backbone.fc.in_features\n            self.backbone.fc = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'efficientnet_b3':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n\n        elif model_name == 'tf_efficientnet_b5_ns':\n            final_in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n        \n        elif model_name == 'eca_nfnet_l0':\n            final_in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.fc = nn.Linear(final_in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        final_in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            final_in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.fc.weight)\n        nn.init.constant_(self.fc.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        feature = self.extract_feat(image)\n        #logits = self.final(feature,label)\n        return feature\n\n    def extract_feat(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.fc(x)\n            x = self.bn(x)\n        return x","9602a5be":"# https:\/\/www.kaggle.com\/parthdhameliya77\/pytorch-eca-nfnet-l0-image-tfidf-inference\nclass Mish_func(torch.autograd.Function):\n    \n    \"\"\"from: https:\/\/github.com\/tyunist\/memory_efficient_mish_swish\/blob\/master\/mish.py\"\"\"\n    \n    @staticmethod\n    def forward(ctx, i):\n        result = i * torch.tanh(F.softplus(i))\n        ctx.save_for_backward(i)\n        return result\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        i = ctx.saved_variables[0]\n  \n        v = 1. + i.exp()\n        h = v.log() \n        grad_gh = 1.\/h.cosh().pow_(2) \n\n        # Note that grad_hv * grad_vx = sigmoid(x)\n        #grad_hv = 1.\/v  \n        #grad_vx = i.exp()\n        \n        grad_hx = i.sigmoid()\n\n        grad_gx = grad_gh *  grad_hx #grad_hv * grad_vx \n        \n        grad_f =  torch.tanh(F.softplus(i)) + i * grad_gx \n        \n        return grad_output * grad_f \n\n\nclass Mish(nn.Module):\n    def __init__(self, **kwargs):\n        super().__init__()\n        pass\n    def forward(self, input_tensor):\n        return Mish_func.apply(input_tensor)\n\n\ndef replace_activations(model, existing_layer, new_layer):\n    \n    \"\"\"A function for replacing existing activation layers\"\"\"\n    \n    for name, module in reversed(model._modules.items()):\n        if len(list(module.children())) > 0:\n            model._modules[name] = replace_activations(module, existing_layer, new_layer)\n\n        if type(module) == existing_layer:\n            layer_old = module\n            layer_new = new_layer\n            model._modules[name] = layer_new\n    return model","c4ca80c9":"def get_image_embeddings(image_paths, model_name=CFG.model_name, EFF_B5=EFF_B5, nfnet_only=False):\n    \n    if EFF_B5 and not nfnet_only:\n        embeds = []\n\n        model = ShopeeModel(model_name = model_name)\n        model.eval()\n        model.load_state_dict(torch.load(CFG.model_path))\n        model = model.to(CFG.device)\n\n        image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n        image_loader = DataLoader(\n            image_dataset,\n            batch_size=CFG.batch_size,\n            pin_memory=True,\n            drop_last=False,\n            num_workers=4\n        )\n\n        with torch.no_grad():\n            for img,label in tqdm(image_loader): \n                img = img.cuda()\n                label = label.cuda()\n                feat = model(img,label)\n                image_embeddings = feat.detach().cpu().numpy()\n                embeds.append(image_embeddings)\n\n\n        del model, image_embeddings\n        image_embeddings1 = np.concatenate(embeds)\n        print(f'image embeddings1 shape is {image_embeddings1.shape}')\n        del embeds\n        gc.collect()\n        \n    else: image_embeddings1 = None\n    \n    #---\n    \n    model = ShopeeModel2()\n    model.eval()\n    model = replace_activations(model, torch.nn.SiLU, Mish())\n\n    model.load_state_dict(torch.load(CFG.model_path2))\n    model = model.to(CFG.device)\n    \n    image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n    image_loader = DataLoader(\n        image_dataset,\n        batch_size=CFG.batch_size,\n        pin_memory=True,\n        drop_last=False,\n        num_workers=4\n    )\n    \n    embeds2 = []\n    with torch.no_grad():\n        for img,label in tqdm(image_loader): \n            img = img.cuda()\n            label = label.cuda()\n            feat = model(img,label)\n            image_embeddings = feat.detach().cpu().numpy()\n            embeds2.append(image_embeddings)\n    \n    del model\n    image_embeddings3 = np.concatenate(embeds2)\n    print(f'image embeddings3 shape is {image_embeddings3.shape}')\n    del embeds2\n    gc.collect()\n    \n    #---\n    if not nfnet_only:\n        embeds = []\n\n        model = ShopeeModel3()\n        model.eval()\n        model.load_state_dict(torch.load(CFG.model_path3))\n        model = model.to(CFG.device)\n\n\n        image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n        image_loader = DataLoader(\n            image_dataset,\n            batch_size=CFG.batch_size,\n            pin_memory=True,\n            drop_last=False,\n            num_workers=4\n        )\n\n\n        with torch.no_grad():\n            for img,label in tqdm(image_loader): \n                img = img.cuda()\n                label = label.cuda()\n                feat = model(img,label)\n                image_embeddings = feat.detach().cpu().numpy()\n                embeds.append(image_embeddings)\n\n\n        del model\n        image_embeddings4 = np.concatenate(embeds)\n        print(f'Our image embeddings shape is {image_embeddings.shape}')\n        del embeds\n        gc.collect()    \n\n    else: image_embeddings4 = None\n\n    embeds = []\n    \n    model = ShopeeModel5()\n    model.eval()\n    model.load_state_dict(torch.load(CFG.model_path5))\n    model = model.to(CFG.device)\n    \n\n    image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n    image_loader = torch.utils.data.DataLoader(\n        image_dataset,\n        batch_size=CFG.batch_size,\n        pin_memory=True,\n        drop_last=False,\n        num_workers=4\n    )\n    \n    \n    with torch.no_grad():\n        for img,label in tqdm(image_loader): \n            img = img.cuda()\n            label = label.cuda()\n            feat = model(img,label)\n            image_embeddings = feat.detach().cpu().numpy()\n            embeds.append(image_embeddings)\n    \n    \n    del model\n    image_embeddings5 = np.concatenate(embeds)\n    print(f'Our image embeddings shape is {image_embeddings.shape}')\n    del embeds\n    gc.collect() \n    \n    embeds = []\n    \n    model = ShopeeModel6()\n    model.eval()\n    model.load_state_dict(torch.load(CFG.model_path6))\n    model = model.to(CFG.device)\n    \n\n    image_dataset = ShopeeDataset(image_paths=image_paths,transforms=get_test_transforms())\n    image_loader = torch.utils.data.DataLoader(\n        image_dataset,\n        batch_size=CFG.batch_size,\n        pin_memory=True,\n        drop_last=False,\n        num_workers=4\n    )\n    \n    \n    with torch.no_grad():\n        for img,label in tqdm(image_loader): \n            img = img.cuda()\n            label = label.cuda()\n            feat = model(img,label)\n            image_embeddings = feat.detach().cpu().numpy()\n            embeds.append(image_embeddings)\n    \n    \n    del model\n    image_embeddings6 = np.concatenate(embeds)\n    print(f'Our image embeddings shape is {image_embeddings.shape}')\n    del embeds\n    gc.collect() \n    return image_embeddings1, image_embeddings3, image_embeddings4, image_embeddings5, image_embeddings6","7b651e7d":"# Threshold shifting depending on dataset length\n# https:\/\/www.kaggle.com\/c\/shopee-product-matching\/discussion\/234927\ndef dataset_th(known_th, known_dataset_len, new_dataset_len):\n    return (-2.051562606852219e-06 * (new_dataset_len-known_dataset_len)) + known_th\n\ndataset_th(1.7, 34250, 70000)","f9b76179":"def get_image_predictions_other(df, embeddings1, embeddings3, embeddings34, \n                          EFF_B5=EFF_B5, ECA_NFNET_L0=ECA_NFNET_L0, predictions34_th=0.36):\n    \n    if len(df) > 3:\n        KNN = 50\n    else : \n        KNN = 3\n    \n    #--\n    if EFF_B5:\n        model = NearestNeighbors(n_neighbors = KNN)\n        model.fit(embeddings1)\n        distances, indices = model.kneighbors(embeddings1)\n\n        threshold = 1.7 - 0.2978\n        predictions1 = []\n        for k in tqdm(range(0, df_other_len)):\n            idx = np.where(distances[k,] < threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = list(df['posting_id'].iloc[ids])\n            # for ii in np.arange(1.7-0.2978, (1.7-0.2978)*1.5, 0.04):\n                # if ii < (1.7-0.2978)*1.5 and len(posting_ids) <= 1:\n                    # idx = np.where(distances[k,] < ii)[0]\n                    # ids = indices[k,idx]\n                    # posting_ids = list(df['posting_id'].iloc[ids].values)  \n            predictions1.append(posting_ids)\n\n        del model, distances, indices, embeddings1\n        gc.collect()\n\n    #--\n    if ECA_NFNET_L0:\n        model = NearestNeighbors(n_neighbors = KNN, metric = 'cosine')\n        model.fit(embeddings3)\n        distances, indices = model.kneighbors(embeddings3)\n\n        threshold=0.36\n        predictions3 = []\n        for k in tqdm(range((0, df_other_len))):\n            idx = np.where(distances[k,] < threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = list(df['posting_id'].iloc[ids])\n            predictions3.append(posting_ids)\n\n        del model, distances, indices, embeddings3\n        gc.collect()    \n    #--\n    \n    model = NearestNeighbors(n_neighbors = KNN, metric = 'cosine')\n    model.fit(embeddings34)\n    distances, indices = model.kneighbors(embeddings34)\n    \n    predictions34 = []\n    for k in tqdm(range(0, df_other_len)):\n        idx = np.where(distances[k,] < predictions34_th)[0]\n        ids = indices[k,idx]\n        posting_ids = list(df['posting_id'].iloc[ids].values)\n        for ii in np.arange(predictions34_th, 0.54, 0.02):\n            if ii < 0.5 and len(posting_ids) <= 1:\n                idx = np.where(distances[k,] < ii)[0]\n                ids = indices[k,idx]\n                posting_ids = list(df['posting_id'].iloc[ids].values)    \n        predictions34.append(posting_ids)\n        \n    del model, distances, indices\n    gc.collect()\n    \n    # combine predictions(i.e. image IDs) of all the models & remove the duplicates.\n    # we can try & experiment here to combine different models here..\n    if EFF_B5 and ECA_NFNET_L0:\n        predictions = [list(set(a + c + d)) for a, c, d in zip(predictions1, predictions3, predictions34)]\n    elif EFF_B5:\n        predictions = [list(set(a + d)) for a, d in zip(predictions1, predictions34)]\n    else:\n        predictions = predictions34\n\n    \n    return predictions","f89220d4":"def get_image_predictions_clothes(df, embeddings1, embeddings3, embeddings34, \n                          EFF_B5=EFF_B5, ECA_NFNET_L0=ECA_NFNET_L0, predictions34_th=0.36):\n    \n    if len(df) > 3:\n        KNN = 50\n    else : \n        KNN = 3\n    \n    #--\n    if EFF_B5:\n        model = NearestNeighbors(n_neighbors = KNN)\n        model.fit(embeddings1)\n        distances, indices = model.kneighbors(embeddings1)\n\n        threshold = 1.7 - 0.2978\n        predictions1 = []\n        for k in tqdm(range(df_other_len, df.shape[0])):\n            idx = np.where(distances[k,] < threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = list(df['posting_id'].iloc[ids])\n            # for ii in np.arange(1.7-0.2978, (1.7-0.2978)*1.5, 0.04):\n                # if ii < (1.7-0.2978)*1.5 and len(posting_ids) <= 1:\n                    # idx = np.where(distances[k,] < ii)[0]\n                    # ids = indices[k,idx]\n                    # posting_ids = list(df['posting_id'].iloc[ids].values)  \n            predictions1.append(posting_ids)\n\n        del model, distances, indices, embeddings1\n        gc.collect()\n\n    #--\n    if ECA_NFNET_L0:\n        model = NearestNeighbors(n_neighbors = KNN, metric = 'cosine')\n        model.fit(embeddings3)\n        distances, indices = model.kneighbors(embeddings3)\n\n        threshold=0.36\n        predictions3 = []\n        for k in tqdm(range(df_other_len, df.shape[0])):\n            idx = np.where(distances[k,] < threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = list(df['posting_id'].iloc[ids])\n            predictions3.append(posting_ids)\n\n        del model, distances, indices, embeddings3\n        gc.collect()    \n    #--\n    \n    model = NearestNeighbors(n_neighbors = KNN, metric = 'cosine')\n    model.fit(embeddings34)\n    distances, indices = model.kneighbors(embeddings34)\n    \n    predictions34 = []\n    for k in tqdm(range(df_other_len, df.shape[0])):\n        idx = np.where(distances[k,] < predictions34_th)[0]\n        ids = indices[k,idx]\n        posting_ids = list(df['posting_id'].iloc[ids].values)\n        for ii in np.arange(predictions34_th, 0.54, 0.02):\n            if ii < 0.5 and len(posting_ids) <= 1:\n                idx = np.where(distances[k,] < ii)[0]\n                ids = indices[k,idx]\n                posting_ids = list(df['posting_id'].iloc[ids].values)    \n        predictions34.append(posting_ids)\n        \n    del model, distances, indices\n    gc.collect()\n    \n    # combine predictions(i.e. image IDs) of all the models & remove the duplicates.\n    # we can try & experiment here to combine different models here..\n    if EFF_B5 and ECA_NFNET_L0:\n        predictions = [list(set(a + c + d)) for a, c, d in zip(predictions1, predictions3, predictions34)]\n    elif EFF_B5:\n        predictions = [list(set(a + d)) for a, d in zip(predictions1, predictions34)]\n    else:\n        predictions = predictions34\n\n    \n    return predictions","276ec147":"#https:\/\/www.kaggle.com\/cdeotte\/part-2-rapids-tfidfvectorizer-cv-0-700#Use-Text-Embeddings\n\ndef get_text_predictions(df, df_cu, max_features=25_000):\n    \n    model = TfidfVectorizer(stop_words=None, binary=True, max_features=max_features)\n    text_embeddings = model.fit_transform(df_cu['title']).toarray()\n    preds = []\n    CHUNK = 1024*4\n\n    print('Finding similar titles...')\n    CTS = len(df)\/\/CHUNK\n    if len(df)%CHUNK!=0: CTS += 1\n    for j in range( CTS ):\n\n        a = j*CHUNK\n        b = (j+1)*CHUNK\n        b = min(b,len(df))\n        print('chunk',a,'to',b)\n\n        # COSINE SIMILARITY DISTANCE\n        cts = cupy.matmul(text_embeddings, text_embeddings[a:b].T).T\n\n        for k in range(b-a):\n            IDX = cupy.where(cts[k,]>0.80)[0]\n            o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            \n            for ii in np.arange(0.80, 0.50, -0.02):\n                if ii > 0.5 and o.shape[0] <= 1:\n                    IDX = cupy.where(cts[k,] > ii)[0]\n                    o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            preds.append(o)\n    \n    del model,text_embeddings\n    gc.collect()\n    return preds","312fe10a":"df, df_cu, image_paths = read_dataset(COMPUTE_CV)\ndf.head()","c7a5bfbb":"if not COMPUTE_CV or SAVE_IMGEMBEDDING:\n    image_embeddings1, image_embeddings3, image_embeddings4, image_embeddings5, image_embeddings6 = get_image_embeddings(image_paths.values, nfnet_only=MODEL_TESTING_NFNET if COMPUTE_CV else COMPUTE_CV)\n    if SAVE_IMGEMBEDDING and not MODEL_TESTING_NFNET: \n        np.savetxt('tf_efficientnet_b5_ns.csv', image_embeddings1, delimiter=',')\n        np.savetxt('eca_nfnet_l0.csv', image_embeddings3, delimiter=',')\n        np.savetxt('efficientnet_b3.csv', image_embeddings4, delimiter=',')\n    elif COMPUTE_CV and MODEL_TESTING_NFNET:\n        image_embeddings1 = np.loadtxt('..\/input\/shopee-price-match-guarantee-embeddings\/tf_efficientnet_b5_ns.csv', delimiter=',')\n        np.savetxt('eca_nfnet_l0_b24_15.csv', image_embeddings3, delimiter=',')\n        image_embeddings4 = np.loadtxt('..\/input\/shopee-price-match-guarantee-embeddings\/efficientnet_b3.csv', delimiter=',')\nelse:\n    if EFF_B5:\n        image_embeddings1 = np.loadtxt('..\/input\/shopee-price-match-guarantee-embeddings\/tf_efficientnet_b5_ns.csv', delimiter=',')\n    image_embeddings3 = np.loadtxt('..\/input\/shopee-price-match-guarantee-embeddings\/eca_nfnet_l0_b24_15.csv', delimiter=',')\n    image_embeddings4 = np.loadtxt('..\/input\/shopee-price-match-guarantee-embeddings\/efficientnet_b3.csv', delimiter=',')","569ae032":"image_embeddings_other = image_embeddings3 \/ 3 + image_embeddings4 \/ 3  + image_embeddings5 \/ 3\nimage_embeddings_clothes = image_embeddings3 \/ 3 + image_embeddings4 \/ 3  + image_embeddings6 \/ 3\ndel image_embeddings4,image_embeddings5,image_embeddings6","4036ea32":"df","93e4df7c":"image_predictions_other = get_image_predictions_other(df, image_embeddings1, image_embeddings3, image_embeddings_other, \n                                          predictions34_th=EMBEDDING34_TH)\nimage_predictions_clothes = get_image_predictions_clothes(df, image_embeddings1, image_embeddings3, image_embeddings_clothes, \n                                          predictions34_th=EMBEDDING34_TH)\n\ntext_predictions = get_text_predictions(df, df_cu)","aaccb49c":"image_predictions_other.extend(image_predictions_clothes)","2b364c01":"image_predictions = image_predictions_other.copy()\ndel image_predictions_other, image_predictions_clothes","5b49fb10":"if DISTILBERT:\n    class CFG:\n        DistilBERT = True # if set to False, BERT model will be used\n        bert_hidden_size = 768\n\n        batch_size = 64\n        epochs = 30\n        num_workers = 4\n        learning_rate = 1e-5 #3e-5\n        scheduler = \"ReduceLROnPlateau\"\n        step = 'epoch'\n        patience = 2\n        factor = 0.8\n        dropout = 0.5\n        model_path = \"\/kaggle\/working\"\n        max_length = 30\n        model_save_name = \"model.pt\"\n        device = torch.device(\"cuda\" if torch.cuda.is_available() else 'cpu')\n\n        \n    if SAVE_DISTILBERT:\n        if CFG.DistilBERT:\n            model_name='cahya\/distilbert-base-indonesian'\n            tokenizer = DistilBertTokenizer.from_pretrained(model_name)\n            bert_model = DistilBertModel.from_pretrained(model_name)\n        else:\n            model_name='cahya\/bert-base-indonesian-522M'\n            tokenizer = BertTokenizer.from_pretrained(model_name)\n            bert_model = BertModel.from_pretrained(model_name)\n        tokenizer.save_pretrained(\".\/models\/tokenizer\/\")\n        bert_model.save_pretrained(\".\/models\/bert_model\/\")\n    else:\n        tokenizer = DistilBertTokenizer.from_pretrained(\"..\/input\/shopee-price-match-guarantee-embeddings\/DistilBERT_pretrained\/models\/tokenizer\")\n        bert_model = DistilBertModel.from_pretrained(\"..\/input\/shopee-price-match-guarantee-embeddings\/DistilBERT_pretrained\/models\/bert_model\")\n\n\n    lbl_encoder = LabelEncoder()\n    df['label_code'] = lbl_encoder.fit_transform(df['label_group'])\n    NUM_CLASSES = df['label_code'].nunique()\n\n\n    class TextDataset(torch.utils.data.Dataset):\n        def __init__(self, dataframe, tokenizer, mode=\"train\", max_length=None):\n            self.dataframe = dataframe\n            if mode != \"test\":\n                self.targets = dataframe['label_code'].values\n            texts = list(dataframe['title'].apply(lambda o: str(o)).values)\n            self.encodings = tokenizer(texts, \n                                       padding=True, \n                                       truncation=True, \n                                       max_length=max_length)\n            self.mode = mode\n\n        def __getitem__(self, idx):\n            # putting each tensor in front of the corresponding key from the tokenizer\n            # HuggingFace tokenizers give you whatever you need to feed to the corresponding model\n            item = {key: torch.tensor(values[idx]) for key, values in self.encodings.items()}\n            # when testing, there are no targets so we won't do the following\n            if self.mode != \"test\":\n                item['labels'] = torch.tensor(self.targets[idx]).long()\n            return item\n\n        def __len__(self):\n            return len(self.dataframe)\n\n\n    dataset = TextDataset(df, tokenizer, mode='test', max_length=CFG.max_length)\n    dataloader = DataLoader(dataset, \n                             batch_size=CFG.batch_size, \n                             num_workers=CFG.num_workers, \n                             shuffle=True)\n    batch = next(iter(dataloader))\n    \n    \n    # code from https:\/\/github.com\/ronghuaiyang\/arcface-pytorch\/blob\/47ace80b128042cd8d2efd408f55c5a3e156b032\/models\/metrics.py#L10\n    class ArcMarginProduct(nn.Module):\n        r\"\"\"Implement of large margin arc distance: :\n            Args:\n                in_features: size of each input sample\n                out_features: size of each output sample\n                s: norm of input feature\n                m: margin\n                cos(theta + m)\n            \"\"\"\n        def __init__(self, in_features, out_features, s=30.0, m=0.50, easy_margin=False):\n            super(ArcMarginProduct, self).__init__()\n            self.in_features = in_features\n            self.out_features = out_features\n            self.s = s\n            self.m = m\n            self.weight = Parameter(torch.FloatTensor(out_features, in_features))\n            nn.init.xavier_uniform_(self.weight)\n\n            self.easy_margin = easy_margin\n            self.cos_m = math.cos(m)\n            self.sin_m = math.sin(m)\n            self.th = math.cos(math.pi - m)\n            self.mm = math.sin(math.pi - m) * m\n\n        def forward(self, input, label):\n            # --------------------------- cos(theta) & phi(theta) ---------------------------\n            cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n            sine = torch.sqrt((1.0 - torch.pow(cosine, 2)).clamp(0, 1))\n            phi = cosine * self.cos_m - sine * self.sin_m\n            if self.easy_margin:\n                phi = torch.where(cosine > 0, phi, cosine)\n            else:\n                phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n            # --------------------------- convert label to one-hot ---------------------------\n            # one_hot = torch.zeros(cosine.size(), requires_grad=True, device='cuda')\n            one_hot = torch.zeros(cosine.size(), device=CFG.device)\n            one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n            # -------------torch.where(out_i = {x_i if condition_i else y_i) -------------\n            output = (one_hot * phi) + ((1.0 - one_hot) * cosine)  # you can use torch.where if your torch.__version__ is 0.4\n            output *= self.s\n            # print(output)\n\n            return output\n\n\n    class Model(nn.Module):\n        def __init__(self, \n                     bert_model, \n                     num_classes=NUM_CLASSES, \n                     last_hidden_size=CFG.bert_hidden_size):\n\n            super().__init__()\n            self.bert_model = bert_model\n            self.arc_margin = ArcMarginProduct(last_hidden_size, \n                                               num_classes, \n                                               s=30.0, \n                                               m=0.50, \n                                               easy_margin=False)\n\n        def get_bert_features(self, batch):\n            output = self.bert_model(input_ids=batch['input_ids'], attention_mask=batch['attention_mask'])\n            last_hidden_state = output.last_hidden_state # shape: (batch_size, seq_length, bert_hidden_dim)\n            CLS_token_state = last_hidden_state[:, 0, :] # obtaining CLS token state which is the first token.\n            return CLS_token_state\n\n        def forward(self, batch):\n            CLS_hidden_state = self.get_bert_features(batch)\n            output = self.arc_margin(CLS_hidden_state, batch['labels'])\n            return output\n\n        \n    def get_text_embeddings():\n        model = Model(bert_model) #the class of the model u created\n        model.eval()\n        WEIGHTS_FILE = \"..\/input\/shopee-price-match-guarantee-embeddings\/DistilBERT\/model.pt\"\n        model.load_state_dict(torch.load(WEIGHTS_FILE))\n        model = model.to(CFG.device)\n                \n        embeds = []\n        with torch.no_grad():\n            for txt, label in tqdm(dataloader):\n                txt = txt.cuda()\n                label = label.cuda()\n                feat = model(txt, label)\n                text_embeddings = feat.detach().cpu().numpy()\n                embeds.append(text_embeddings)\n\n        del model\n        text_embeddings = np.concatenate(embeds)\n        print(f'text_embeddings shape is {text_embeddings.shape}')\n        del embeds\n        gc.collect()\n\n        \n    get_text_embeddings()","8517ef12":"if BERT:\n    NUM_WORKERS = 4\n    BATCH_SIZE = 16\n    SEED = 42\n\n    device = torch.device('cuda')\n\n    ################################################# MODEL ####################################################################\n\n    transformer_model = '..\/input\/sentence-transformer-models\/paraphrase-xlm-r-multilingual-v1\/0_Transformer'\n    TOKENIZER = transformers.AutoTokenizer.from_pretrained(transformer_model)\n\n    ################################################ MODEL PATH ###############################################################\n\n    TEXT_MODEL_PATH = '..\/input\/best-multilingual-model\/sentence_transfomer_xlm_best_loss_num_epochs_25_arcface.bin'\n\n    model_params = {\n        'n_classes':11014,\n        'model_name':transformer_model,\n        'use_fc':False,\n        'fc_dim':512,\n        'dropout':0.3,\n    }\n\n    class ShopeeDataset(Dataset):\n        def __init__(self, csv):\n            self.csv = csv.reset_index()\n\n        def __len__(self):\n            return self.csv.shape[0]\n\n        def __getitem__(self, index):\n            row = self.csv.iloc[index]\n\n            text = row.title\n\n            text = TOKENIZER(text, padding='max_length', truncation=True, max_length=128, return_tensors=\"pt\")\n            input_ids = text['input_ids'][0]\n            attention_mask = text['attention_mask'][0]  \n\n            return input_ids, attention_mask\n\n\n    class ShopeeNet(nn.Module):\n\n        def __init__(self,\n                     n_classes,\n                     model_name='bert-base-uncased',\n                     use_fc=False,\n                     fc_dim=512,\n                     dropout=0.0):\n            \"\"\"\n            :param n_classes:\n            :param model_name: name of model from pretrainedmodels\n                e.g. resnet50, resnext101_32x4d, pnasnet5large\n            :param pooling: One of ('SPoC', 'MAC', 'RMAC', 'GeM', 'Rpool', 'Flatten', 'CompactBilinearPooling')\n            :param loss_module: One of ('arcface', 'cosface', 'softmax')\n            \"\"\"\n            super(ShopeeNet, self).__init__()\n\n            self.transformer = transformers.AutoModel.from_pretrained(model_name)\n            final_in_features = self.transformer.config.hidden_size\n\n            self.use_fc = use_fc\n\n            if use_fc:\n                self.dropout = nn.Dropout(p=dropout)\n                self.fc = nn.Linear(final_in_features, fc_dim)\n                self.bn = nn.BatchNorm1d(fc_dim)\n                self._init_params()\n                final_in_features = fc_dim\n\n\n        def _init_params(self):\n            nn.init.xavier_normal_(self.fc.weight)\n            nn.init.constant_(self.fc.bias, 0)\n            nn.init.constant_(self.bn.weight, 1)\n            nn.init.constant_(self.bn.bias, 0)\n\n        def forward(self, input_ids,attention_mask):\n            feature = self.extract_feat(input_ids,attention_mask)\n            return F.normalize(feature)\n\n        def extract_feat(self, input_ids,attention_mask):\n            x = self.transformer(input_ids=input_ids,attention_mask=attention_mask)\n\n            features = x[0]\n            features = features[:,0,:]\n\n            if self.use_fc:\n                features = self.dropout(features)\n                features = self.fc(features)\n                features = self.bn(features)\n\n            return features\n\n\n    def get_BERT_embeddings(df):\n        embeds = []\n\n        model = ShopeeNet(**model_params)\n        model.eval()\n\n        model.load_state_dict(dict(list(torch.load(TEXT_MODEL_PATH).items())[:-1]))\n        model = model.to(device)\n\n        text_dataset = ShopeeDataset(df)\n        text_loader = torch.utils.data.DataLoader(\n            text_dataset,\n            batch_size=BATCH_SIZE,\n            pin_memory=True,\n            drop_last=False,\n            num_workers=NUM_WORKERS\n        )\n\n\n        with torch.no_grad():\n            for input_ids, attention_mask in tqdm(text_loader): \n                input_ids = input_ids.cuda()\n                attention_mask = attention_mask.cuda()\n                feat = model(input_ids, attention_mask)\n                text_embeddings = feat.detach().cpu().numpy()\n                embeds.append(text_embeddings)\n\n\n        del model\n        text_embeddings = np.concatenate(embeds)\n        print(f'Our text embeddings shape is {text_embeddings.shape}')\n        del embeds\n        gc.collect()\n        return text_embeddings\n\n\n    def get_neighbours_cos_sim(df,embeddings):\n        '''\n        When using cos_sim use normalized features else use normal features\n        '''\n        embeddings = cupy.array(embeddings)\n\n        if False:\n            thresholds = list(np.arange(0.5,0.7,0.05))\n\n            scores = []\n            for threshold in thresholds:\n\n    ################################################# Code for Getting Preds #########################################\n                preds = []\n                CHUNK = 1024*4\n\n                print('Finding similar titles...for threshold :',threshold)\n                CTS = len(embeddings)\/\/CHUNK\n                if len(embeddings)%CHUNK!=0: CTS += 1\n\n                for j in range( CTS ):\n                    a = j*CHUNK\n                    b = (j+1)*CHUNK\n                    b = min(b,len(embeddings))\n\n                    cts = cupy.matmul(embeddings,embeddings[a:b].T).T\n\n                    for k in range(b-a):\n                        IDX = cupy.where(cts[k,]>threshold)[0]\n                        o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n                        o = ' '.join(o)\n                        preds.append(o)\n    ######################################################################################################################\n                df['pred_matches'] = preds\n                df['f1'] = f1_score(df['matches'], df['pred_matches'])\n                score = df['f1'].mean()\n                print(f'Our f1 score for threshold {threshold} is {score}')\n                scores.append(score)\n\n            thresholds_scores = pd.DataFrame({'thresholds': thresholds, 'scores': scores})\n            max_score = thresholds_scores[thresholds_scores['scores'] == thresholds_scores['scores'].max()]\n            best_threshold = max_score['thresholds'].values[0]\n            best_score = max_score['scores'].values[0]\n            print(f'Our best score is {best_score} and has a threshold {best_threshold}')\n\n        else:\n            preds = []\n            CHUNK = 1024*4\n            threshold = 0.9\n\n            print('Finding similar texts...for threshold :',threshold)\n            CTS = len(embeddings)\/\/CHUNK\n            if len(embeddings)%CHUNK!=0: CTS += 1\n\n            for j in range( CTS ):\n                a = j*CHUNK\n                b = (j+1)*CHUNK\n                b = min(b,len(embeddings))\n                print('chunk',a,'to',b)\n\n                cts = cupy.matmul(embeddings,embeddings[a:b].T).T\n\n                for k in range(b-a):\n                    IDX = cupy.where(cts[k,]>threshold)[0]\n                    o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n                    preds.append(o)\n\n        return df, preds\n    \n    \n    text_embeddings_BERT = get_BERT_embeddings(df)\n    _, text_predictions_BERT = get_neighbours_cos_sim(df, text_embeddings_BERT)","d0968eb8":"df['image_predictions'] = image_predictions\ndf['text_predictions'] = text_predictions\ntmp = df.groupby('image_phash').posting_id.agg('unique').to_dict()\ndf['phash_predictions'] = df.image_phash.map(tmp)\nif BERT:\n    df['text_predictions_BERT'] = text_predictions_BERT\n    df['matches'] = df.apply(combine_predictions_BERT, axis = 1)\nelse: \n    df['matches'] = df.apply(combine_predictions, axis = 1)\ndf1 = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')    \ndf1.columns = ['posting_id', 'a', 'b', 'c']\ndf = pd.merge(df1, df, on = 'posting_id', how = 'left')\n\ndf[['posting_id', 'matches']].to_csv('submission.csv', index = False)\ndf[['posting_id', 'matches']].head()","f5d133cc":"if COMPUTE_CV:\n    tmp = df.groupby('label_group').posting_id.agg('unique').to_dict()\n    df['target'] = df.label_group.map(tmp) \n    if BERT:\n        df['matches_CV'] = df.apply(combine_for_cv_BERT, axis = 1)\n    else:\n        df['matches_CV'] = df.apply(combine_for_cv, axis = 1)\n    MyCVScore = df.apply(getMetric('matches_CV'), axis=1)\n    print('CV score =', MyCVScore.mean())\n    \n    \nprint(f'COMPUTE_CV = {COMPUTE_CV}')\nprint(f'SAVE_IMGEMBEDDING = {SAVE_IMGEMBEDDING}')\nprint(f'EFF_B5 = {EFF_B5}')\nprint(f'ECA_NFNET_L0 = {ECA_NFNET_L0}')\nprint(f'MODEL_TESTING_NFNET = {MODEL_TESTING_NFNET}')\nprint(f'MY_NFNET = {MY_NFNET}')\nprint(f'BERT = {BERT}')\nprint(f'DISTILBERT = {DISTILBERT}')\nprint(f'SAVE_DISTILBERT = {SAVE_DISTILBERT}')\nprint(f'EMBEDDING34_TH = {EMBEDDING34_TH}')","90553f33":"## Prediction","fbd0764e":"## Model","ace36115":"# Result","6ad323bd":"# Image","cf7cd17e":"# Data Load-in and Preparation","d956103b":"# **other**","c44fe3b3":"# BERT\n\n- [Metric Learning Pipeline : Only Text Sbert](https:\/\/www.kaggle.com\/tanulsingh077\/metric-learning-pipeline-only-text-sbert)\n- [Reaching 0.612 with Text Only : Shopee](https:\/\/www.kaggle.com\/tanulsingh077\/reaching-0-612-with-text-only-shopee)","ec5a961b":"# **2class**","2b21ae11":"# Utility","abc8c354":"# Text","fa3b97dc":"## Embedding and Prediction","44788cd8":"# DistilBERT\n\n- [LB with only TEXT data](https:\/\/www.kaggle.com\/c\/shopee-product-matching\/discussion\/230620)\n- [Does using BERT or any transformer Model even makes sense?](https:\/\/www.kaggle.com\/c\/shopee-product-matching\/discussion\/228741)\n- [Indonesian DistilBERT finetuning with ArcMargin](https:\/\/www.kaggle.com\/moeinshariatnia\/indonesian-distilbert-finetuning-with-arcmargin)","02f3204f":"# **clothes**","0b194370":"## Embedding","1f244d08":"# Setting"}}