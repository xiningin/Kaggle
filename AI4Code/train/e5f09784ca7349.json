{"cell_type":{"b2ad3b05":"code","426ef53e":"code","9cbcd7fb":"code","6b92c2ba":"code","9a2b7e82":"code","4b6d7186":"code","f2d81415":"code","89680341":"code","aefd3423":"code","c3279bae":"code","39b36d90":"code","83f72ac1":"code","c40c8114":"code","c83bd287":"code","42b405d2":"code","8a2164df":"code","173caf1f":"code","3b28fd73":"code","078dc714":"markdown","b5eed2f8":"markdown","f1390b51":"markdown","a7fbac33":"markdown","a3331914":"markdown","ac9ba8b5":"markdown","0ccc38b4":"markdown","e1410d9c":"markdown","cbc84aaa":"markdown","85650187":"markdown","6318f9bc":"markdown","413476d3":"markdown","eebcca6c":"markdown","b86fe7f2":"markdown"},"source":{"b2ad3b05":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n","426ef53e":"data = pd.read_csv('..\/input\/load-file\/daily_average_load.csv')\ny=data['day']\ndata","9cbcd7fb":"data.describe()","6b92c2ba":"data_copy=data\nsc_X = StandardScaler()\nX =  pd.DataFrame(sc_X.fit_transform(data_copy.drop([\"day\"],axis = 1)),columns=data.columns.drop('day'))\nX","9a2b7e82":"import matplotlib as mpl\n# \u6539\u5168\u5c40\u5b57\u4f53\nmpl.rcParams['font.sans-serif']=['Times New Roman'] # \u5b57\u4f53\u65b0\u7f57\u9a6c\nmpl.rcParams['axes.grid'] = False  # \u4e0d\u663e\u793a\u7f51\u683c\nmpl.rcParams['lines.linewidth'] = 3 # \u7ebf\u5bbd\nmpl.rcParams['axes.linewidth'] = 3 # \u8fb9\u6846\u7ebf\u5bbd\n\n\nz = linkage(X, \"centroid\")\nfig, ax = plt.subplots(figsize=(16,8))  #16*8\ndendrogram(z, no_labels=True) #\u753b\u56fe\nplt.title(\"Hierachial Clustering Dendrogram\",size=30,weight=\"bold\",family=\"Times New Roman\")\nplt.xlabel(\"Cluster label\",weight=\"normal\",size=20)\nplt.ylabel(\"Distance\",size=20)\n#plt.axhline(y=10) #\u753b\u4e00\u6761\u5206\u7c7b\u7ebf\nplt.show()\n","4b6d7186":"index_lst=dendrogram(z, leaf_font_size=14)['ivl']\n","f2d81415":"def view_Rank2D_picture(X):\n    from yellowbrick.features import Rank2D\n    visualizer = Rank2D(algorithm=\"spearman\",  size=(1080, 720))\n    visualizer.fit_transform(X)\n    visualizer.poof()\n\ndef draw_heatmap(X):\n    matrix = X.corr().abs()\n    plt.figure(figsize=(64,64))\n    # matrix = matrix.where(np.triu(np.ones(matrix.shape), k=1).astype(np.bool))\n    sns.heatmap(matrix,annot=False)\n    plt.show()\n    return matrix\n    \n    \n","89680341":"X_T=X.T\nindex_lst=list(map(int,index_lst))\ndf_xian=X_T[index_lst]\ndraw_heatmap(df_xian)\nview_Rank2D_picture(df_xian)\n","aefd3423":"iris = X.drop(['total1','total2'],axis=1).T\n#\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\ng= sns.clustermap(iris, fmt=\"d\",cmap='coolwarm',figsize=(14,7),method=\"centroid\")\nax = g.ax_heatmap\nlabel_y = ax.get_yticklabels()\nplt.rc('font',family='Times New Roman',size=32)\nplt.setp(label_y, rotation=360, horizontalalignment='left')\n#\u8bbe\u7f6e\u56fe\u7247\u540d\u79f0\uff0c\u5206\u8fa8\u7387\uff0c\u5e76\u4fdd\u5b58\nplt.savefig('cluster.tif',dpi = 600)\nplt.show()","c3279bae":"# \u6807\u51c6\u5316\u540e\u7684\u56fe\u50cf\niris = X.drop(['total1','total2'],axis=1).T\n#\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\ng= sns.clustermap(iris, fmt=\"d\",cmap='coolwarm',figsize=(14,7),method=\"centroid\",standard_scale=1)\nax = g.ax_heatmap\nlabel_y = ax.get_yticklabels()\nplt.rc('font',family='Times New Roman',size=32)\nplt.setp(label_y, rotation=360, horizontalalignment='left')\n#\u8bbe\u7f6e\u56fe\u7247\u540d\u79f0\uff0c\u5206\u8fa8\u7387\uff0c\u5e76\u4fdd\u5b58\nplt.savefig('cluster.tif',dpi = 600)\nplt.show()","39b36d90":"from sklearn.cluster import KMeans\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\n","83f72ac1":"# \u628a\u4e0a\u9762\u6570\u636e\u70b9\u5206\u4e3a\u4e24\u7ec4\uff08\u975e\u76d1\u7763\u5b66\u4e60\uff09\nclf = KMeans(n_clusters=3)\nclf.fit(X)  # \u5206\u7ec4\n \ncenters = clf.cluster_centers_ # \u4e24\u7ec4\u6570\u636e\u70b9\u7684\u4e2d\u5fc3\u70b9\nlabels = clf.labels_   # \u6bcf\u4e2a\u6570\u636e\u70b9\u6240\u5c5e\u5206\u7ec4\nprint(centers)\nprint(labels)\n\n\n","c40c8114":"## \u6807\u51c6\u5316\u540e\u7684K-means","c83bd287":"\nx0 = X[labels == 0]\nx1 = X[labels == 1]\nx2 = X[labels == 2]\nplt.scatter(x0['total1'], x0['total2'], c = \"red\", marker='o', label='label0')\nplt.scatter(x1['total1'], x1['total2'], c = \"green\", marker='*', label='label1')\nplt.scatter(x2['total1'], x2['total2'], c = \"blue\", marker='+', label='label2')\nplt.xlabel('total1')\nplt.ylabel('total2')\nplt.legend(loc=2)\nplt.show()\n","42b405d2":"x0 = data[labels == 0]\nx1 = data[labels == 1]\nx2 = data[labels == 2]\nplt.scatter(x0['total1'], x0['total2'], c = \"red\", marker='o', label='label0')\nplt.scatter(x1['total1'], x1['total2'], c = \"green\", marker='*', label='label1')\nplt.scatter(x2['total1'], x2['total2'], c = \"blue\", marker='+', label='label2')\nplt.xlabel('total1')\nplt.ylabel('total2')\nplt.legend(loc=2)\nplt.show()\n","8a2164df":"def k_means_plot(k):\n    # \u628a\u4e0a\u9762\u6570\u636e\u70b9\u5206\u4e3a\u4e24\u7ec4\uff08\u975e\u76d1\u7763\u5b66\u4e60\uff09\n    clf = KMeans(n_clusters=k)\n    clf.fit(X)  # \u5206\u7ec4\n    centers = clf.cluster_centers_ # \u4e24\u7ec4\u6570\u636e\u70b9\u7684\u4e2d\u5fc3\u70b9\n    labels = clf.labels_   # \u6bcf\u4e2a\u6570\u636e\u70b9\u6240\u5c5e\u5206\u7ec4\n    # plot\n    # get random color\n    number_of_colors = k\n    color_list = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    \n    # \n    x_list=[]\n    for i in range(k):\n        x_list.append(data[labels == i])\n    i=0\n    for xn in x_list:\n        plt.scatter(xn['total1'], xn['total2'], c = color_list[i], marker='+', label='label'+str(i))\n        i+=1\n    plt.xlabel('total1')\n    plt.ylabel('total2')\n    plt.legend(loc=2)\n    plt.show()\n    \n    return x_list","173caf1f":"def print_days(x_list):\n    sum_list=[]\n    i=0\n    for curr_dataframe in x_list:\n        curr_day = curr_dataframe['day']\n        print('curr_label=',i)\n        print('curr_day:')\n        print(curr_day.tolist())\n        sum_list.append(len(curr_day.tolist()))\n        print('total_days=',len(curr_day.tolist()))\n        i+=1\n        print('\\n')\n    return sum_list\n\nx_list=k_means_plot(8)\nsum_list=print_days(x_list)\nprint('sum_list: ',sum_list)\n\n\n","3b28fd73":"x_list=k_means_plot(7)\nsum_list=print_days(x_list)\nprint('sum_list: ',sum_list)\n","078dc714":"\u5bfc\u5165\u5e93 ","b5eed2f8":"\u5206\u4e3a 8 \u7c7b","f1390b51":"## K-Means","a7fbac33":"## HeatMap","a3331914":"## \u5c42\u6b21\u805a\u7c7b\n","ac9ba8b5":"\u81ea\u52a8\u9009\u62e9\u5206\u4e3aK\u7c7b\u7684\u753b\u56fe\u51fd\u6570","0ccc38b4":"### \u5206\u4e3a 3 \u7c7b","e1410d9c":"> \u4f5c\u4e3a\u76ee\u524d\u6700\u5e38\u89c1\u7684\u4e00\u79cd\u53ef\u89c6\u5316\u624b\u6bb5\uff0c\u70ed\u56fe\u56e0\u5176\u4e30\u5bcc\u7684\u8272\u5f69\u53d8\u5316\u548c\u751f\u52a8\u9971\u6ee1\u7684\u4fe1\u606f\u8868\u8fbe\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u5927\u6570\u636e\u5206\u6790\u573a\u666f\u3002\u540c\u65f6\uff0c\u4e13\u7528\u4e8e\u5927\u6570\u636e\u7edf\u8ba1\u5206\u6790\u3001\u7ed8\u56fe\u548c\u53ef\u89c6\u5316\u7b49\u573a\u666f\u7684 R \u8bed\u8a00\uff0c\u5728\u53ef\u89c6\u5316\u65b9\u9762\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u529f\u80fd\u5f3a\u5927\u3001\u8986\u76d6\u5168\u9762\u7684\u51fd\u6570\u5e93\u548c\u5de5\u5177\u5305\u3002\u56e0\u6b64\uff0c\u5bf9\u76f8\u5173\u4ece\u4e1a\u8005\u800c\u8a00\uff0c\u7528 R \u8bed\u8a00\u7ed8\u5236\u70ed\u56fe\u5c31\u6210\u4e86\u4e00\u9879\u6700\u901a\u7528\u7684\u5fc5\u5907\u6280\u80fd\u3002 \u7ed8\u5236\u70ed\u56fe\u7684\u8f6f\u4ef6\u6216\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u5982Excel\u3001R\u8bed\u8a00\u3001HemI\u3001Python\u3001MATLAB\u7b49\uff0c\u5404\u5177\u7279\u70b9\u6216\u4f18\u52bf\u3002Excel\u6700\u7b80\u5355\uff0c\u754c\u9762\u64cd\u4f5c\u5bb9\u6613\u4e0a\u624b\uff0c\u4e0d\u8fc7\u529f\u80fd\u6ca1\u6709\u53ef\u64cd\u4f5c\u6027\u5f3a\u7684R\u8bed\u8a00\u3001Python\u7b49\u5f3a\u5927\uff1bR\u3001Python\u3001MATLAB\u6709\u66f4\u591a\u53c2\u6570\u53ef\u6839\u636e\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e\uff0c\u6548\u679c\u4f18\u4e8eExcel\uff1bHemI\u529f\u80fd\u4ecb\u4e8eExcel\u548cR\u4e4b\u95f4\u3002\u672c\u671f\u5c31\u5148\u4ecb\u7ecd\u4f7f\u7528Excel\u5b9e\u73b0\u70ed\u56fe\u7ed8\u5236\u3002\n","cbc84aaa":"\u521d\u59cb\u6570\u636e\u7684 K-Means","85650187":"K-Means\u662f\u4e00\u79cd\u805a\u7c7b(Clustering)\u7b97\u6cd5\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5\u4e3a\u6570\u636e\u5206\u7c7b\u3002K\u4ee3\u8868\u4f60\u8981\u628a\u6570\u636e\u5206\u4e3a\u51e0\u4e2a\u7ec4\uff0c\u524d\u6587\u5b9e\u73b0\u7684K-Nearest Neighbor\u7b97\u6cd5\u4e5f\u6709\u4e00\u4e2aK\uff0c\u5b9e\u9645\u4e0a\uff0c\u5b83\u4eec\u6709\u4e00\u4e2a\u76f8\u4f3c\u4e4b\u5904\uff1aK-Means\u4e5f\u4f7f\u7528\u6b27\u62c9\u8ddd\u79bb\u516c\u5f0f\u3002\n\n\n- K-Means\uff1ahttps:\/\/en.wikipedia.org\/wiki\/K-means_clustering\n- scikit-learn\u4e2d\u7684\u805a\u7c7b\u7b97\u6cd5\uff1ahttp:\/\/scikit-learn.org\/stable\/modules\/clustering.html\n- scikit-learn K-Means\u6587\u6863\uff1ahttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.cluster.KMeans.html\n\n> K-Means\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u521d\u59cb\u968f\u673a\u7ed9\u5b9aK\u4e2a\u7c07\u4e2d\u5fc3\uff0c\u6309\u7167\u6700\u90bb\u8fd1\u539f\u5219\u628a\u5f85\u5206\u7c7b\u6837\u672c\u70b9\u5206\u5230\u5404\u4e2a\u7c07\u3002\u7136\u540e\u6309\u5e73\u5747\u6cd5\u91cd\u65b0\u8ba1\u7b97\u5404\u4e2a\u7c07\u7684\u8d28\u5fc3\uff0c\u4ece\u800c\u786e\u5b9a\u65b0\u7684\u7c07\u5fc3\u3002\u4e00\u76f4\u8fed\u4ee3\uff0c\u76f4\u5230\u7c07\u5fc3\u7684\u79fb\u52a8\u8ddd\u79bb\u5c0f\u4e8e\u67d0\u4e2a\u7ed9\u5b9a\u7684\u503c\u3002\n\n","6318f9bc":"Scaling the data\ndata Z is rescaled such that \u03bc = 0 and \ud835\uded4 = 1, and is done through this formula:\n\nZ=(xi-\u03bc)\/\u03c3\n\nto learn more about scaling techniques  \nhttps:\/\/medium.com\/@rrfd\/standardize-or-normalize-examples-in-python-e3f174b65dfc   \nhttps:\/\/machinelearningmastery.com\/rescaling-data-for-machine-learning-in-python-with-scikit-learn\/\n\n","413476d3":"\u89c2\u5bdf\u8fd9\u4e00\u7cfb\u5217\u6570\u636e\u7684\u8303\u56f4\u3002\u5927\u5c0f\u3001\u6ce2\u52a8\u8d8b\u52bf\u7b49\u7b49\uff0c\u4fbf\u4e8e\u5224\u65ad\u540e\u7eed\u5bf9\u6570\u636e\u91c7\u53d6\u54ea\u7c7b\u6a21\u578b\u66f4\u5408\u9002","eebcca6c":"\u5206\u4e3a7\u7c7b","b86fe7f2":"\u5bfc\u5165\u6570\u636e\u96c6"}}