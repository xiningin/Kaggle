{"cell_type":{"c7763556":"code","3ff8609b":"code","329f4a97":"code","7bf67e7e":"code","83654631":"code","9fe32d24":"code","fceefb23":"code","0d7ba096":"code","383c32d3":"code","d55485eb":"code","17b0d95e":"code","6ff117d1":"code","aaf925d0":"code","0d2ec531":"code","e0d836c6":"code","1d9fb35c":"code","e9a509ee":"code","224c3b3b":"code","cc1c0767":"markdown","01c11ea1":"markdown","49fdc823":"markdown","23cb0b87":"markdown","f2586765":"markdown","90e1044c":"markdown","d850a6f7":"markdown","3a94181f":"markdown","925acdfa":"markdown","aec528d6":"markdown","e6136686":"markdown","e3eacdb9":"markdown","e8998af9":"markdown","df20b316":"markdown","3fae0752":"markdown","bf8cf2e3":"markdown","9bc598b8":"markdown","c44c0e11":"markdown"},"source":{"c7763556":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nsns.set_style('whitegrid')","3ff8609b":"games = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')","329f4a97":"# make 'gameClock' values to a datetime value from string\nplays['gameClock'] = pd.to_datetime(plays['gameClock'],format= '%H:%M:%S' ).dt.time\n\n# Add the Team Names into plays\ndef gameidtoT(i, col):\n    return games[games['gameId'] == i][col].values[0]\n\nplays['homeTeamAbbr'] = plays['gameId'].apply(gameidtoT, col='homeTeamAbbr')\nplays['visitorTeamAbbr'] = plays['gameId'].apply(gameidtoT, col='visitorTeamAbbr')\n\n# Add the team name thats leading for each play in plays\nwinning_team_list = list()\nfor i in range(0, len(plays)):\n  home_score = plays.loc[i, 'preSnapHomeScore']\n  away_score = plays.loc[i, 'preSnapVisitorScore']\n  home_team = plays.loc[i, 'homeTeamAbbr']\n  away_team = plays.loc[i, 'visitorTeamAbbr']\n  if home_score > away_score:\n    winning_team = home_team\n  elif away_score > home_score:\n    winning_team = away_team\n  else:\n    winning_team = 'Tied'\n  winning_team_list.append(winning_team)\n\nwinning_team_array = np.array(winning_team_list)\nplays['TeamWinning'] = winning_team_array\n\nplaysq4 = plays[plays['quarter'] == 4] # plays from the fourth quarter\n\nimport datetime\nfourmin = datetime.time(4, 0, 0)\nplaysq4_4min = playsq4[playsq4['gameClock'] <= fourmin]\ndifference = abs(playsq4_4min['preSnapHomeScore'] - playsq4_4min['preSnapVisitorScore'])\n\n# Set final to be the data frame with all plays where the score is in [4, 8] and there is <= 4 min left in the game\nfinal = playsq4_4min[(difference <= 8) & (difference >=4)]","7bf67e7e":"final = final.drop(final[final['TeamWinning'] == final['possessionTeam']].index)\nfinal = final.reset_index(drop=True)\nfinal = final.set_index(['gameId','playId'])","83654631":"tyler_data_frame = pd.read_csv('..\/input\/tyler-data-frame\/tyler_data_frame - tyler_data_frame.csv')\nteamWin = tyler_data_frame['TeamWin']\n\n# Add teamWin as a collumn in final\nfinal = final.reset_index()\ndef tylertoW(i):\n    return tyler_data_frame[tyler_data_frame['gameId'] == i]['TeamWin'].values[0]\n\nfinal['teamWin'] = final['gameId'].apply(tylertoW)","9fe32d24":"# The first play of each game in final\nfirstplayof4m = final.reset_index().set_index(['gameId']).groupby('gameId')['playId'].min()\n\n# See if the winning team going into 4 minutes held or blew their lead\ndef heldorblown(i):\n    fpof = firstplayof4m[firstplayof4m.index == i].loc[i]\n    #firstrow = final.loc[(i, fpof)]\n    firstrow = final[(final['gameId'] == i) & (final['playId'] == fpof)]\n    if firstrow['TeamWinning'].values[0] == firstrow['teamWin'].values[0]:\n        return 'held'\n    else:\n        return 'blown'\n    \nfinal['heldOrBlown'] = final['gameId'].apply(heldorblown)\n\nfinal = final.set_index(['gameId','playId'])","fceefb23":"check = final.reset_index()\ngameIds = np.unique(check['gameId'])\nchange_to_blown = []\nfor i in range(0, 77): # 77 games\n  count = 0\n  first_play = firstplayof4m.loc[gameIds[i]]\n  first_row = final.loc[(gameIds[i], first_play)]\n  team_winning_initially = first_row['TeamWinning']\n  plays_wanted = playsq4_4min[playsq4_4min['gameId'] == gameIds[i]]\n  index_of_plays_for_this_game = plays_wanted[plays_wanted['gameId'] ==  gameIds[i]]['playId'].values\n  index_of_plays_for_this_game = index_of_plays_for_this_game[index_of_plays_for_this_game >= first_play]\n  for j in range(0, len(index_of_plays_for_this_game)):\n    individual_play_row = plays_wanted.loc[plays_wanted['playId'] == index_of_plays_for_this_game[j]]\n    current_team_winning = individual_play_row['TeamWinning']\n    if current_team_winning.values[0] != team_winning_initially: # if the losing team comes back\n      count = count + 1\n  if count > 0:\n    if team_winning_initially == first_row['teamWin']: # if the losing team came back but the original team won the game\n       change_to_blown.append(gameIds[i])\nfor i in change_to_blown:\n    final.loc[(i),'heldOrBlown'] = 'blown'","0d7ba096":"held = final[final['heldOrBlown'] == 'held'].reset_index() \nblown = final[final['heldOrBlown'] == 'blown'].reset_index()","383c32d3":"sns.scatterplot('defendersInTheBox','offensePlayResult',hue='heldOrBlown',data=final)\nplt.show()","d55485eb":"sns.scatterplot('numberOfPassRushers','defendersInTheBox',hue='heldOrBlown',data=final)\nplt.show()","17b0d95e":"# each index of the array reprensents number of pass rushers\nnormal = final.reset_index()\ndef percentOfPassRushersPerGame(gameid, df):\n  pass_rushers = np.array(df[df['gameId'] == gameid]['numberOfPassRushers'])\n  number_of_plays = len(pass_rushers)\n  pass_rush_list = []\n  for i in range(0, 8):\n    pass_rush_list.append(len(pass_rushers[pass_rushers == i]) \/ number_of_plays)\n  return np.array(pass_rush_list)\n\ndef percentOfPassRushersByDataFrame(dataframe, df):\n  final_array = np.zeros(8)\n  game_ids = np.unique(dataframe['gameId'])\n  for i in range(0, len(game_ids)):\n    final_array = final_array + percentOfPassRushersPerGame(game_ids[i], df)\n  final_array = final_array \/ len(game_ids)\n  return final_array\n\n","6ff117d1":"def averagePassRushersPerGameByDF(dataframe, df):\n  lister = []\n  game_ids = np.unique(dataframe['gameId'])\n  for i in range(0, len(game_ids)):\n    percents = percentOfPassRushersPerGame(game_ids[i], df)\n    average = 0\n    for i in range(0, 8):\n      average = average + (percents[i] * i)\n    lister.append(average)\n  return np.array(lister)","aaf925d0":"held_average = averagePassRushersPerGameByDF(held, normal)\nblown_average = averagePassRushersPerGameByDF(blown, normal)\nstats.ttest_ind(held_average, blown_average, equal_var=False)","0d2ec531":"def averageDefendersInTheBoxPerGameByDF(dataframe):\n  lister = []\n  gameids = np.unique(dataframe['gameId'])\n  for i in range(0, len(gameids)):\n    average_defenders_in_box = dataframe[dataframe['gameId'] == gameids[i]]['defendersInTheBox'].mean()\n    lister.append(average_defenders_in_box)\n  return(np.array(lister))","e0d836c6":"held_defenders_in_box = averageDefendersInTheBoxPerGameByDF(held)\nblown_defenders_in_box = averageDefendersInTheBoxPerGameByDF(blown)\nstats.ttest_ind(held_defenders_in_box, blown_defenders_in_box, equal_var=False)","1d9fb35c":"antifinal_plays = plays.set_index(['gameId','playId'])\nplays2 = plays.set_index(['gameId', 'playId'])\nfor i in final.index.get_level_values(0).unique():\n    # drop all games that are represented in df=final\n    antifinal_plays.drop(index=i,axis=0,level=0,inplace=True)\nfor i in antifinal_plays.index.get_level_values(0).unique():\n    # drop all games represented in df=antifinal from plays2\n    # this results in a df that has all the plays for games represented in df=final\n    plays2.drop(index=i,axis=0,inplace=True)\nfor i in final.index.values:\n    # drop (gameid,playid) tuples that are found in final (plays2 = every play not in df=final)\n    plays2.drop(index=i,axis=0,inplace=True)\n    \nplays2.reset_index(inplace=True)\n# add column w the team that won to df\nplays2['teamWin'] = plays2['gameId'].apply(tylertoW)\n\n# make a df of all unique gameId,possessionTeam combinations from final\n# this gets us the defensive possesions of the team that was winning from final\nunique_gamepos = list(dict.fromkeys(list(zip(final.reset_index()['gameId'], final['possessionTeam']))))\nunique_gameposdf = pd.DataFrame(unique_gamepos).set_index(0)\nfor i in np.arange(0,len(plays2)):\n    # drop the row if the team on defense is not the same as the one in final \n    if plays2.loc[i]['possessionTeam'] != unique_gameposdf.loc[plays2.loc[i]['gameId']].values[0]:\n        plays2.drop(index=i,axis=0,inplace=True)\nplays2.reset_index(drop=True,inplace=True)","e9a509ee":"# make a df of all unique gameId,held\/blown combinations from final\ngameid_heldblown = pd.DataFrame(list(dict.fromkeys(list(zip(final.reset_index()['gameId'], final['heldOrBlown']))))).set_index(0)\n\ndef gameidtoHB(i):\n    \"\"\"input a gameId and return whether the leading team held or blew the lead\"\"\"\n    return gameid_heldblown.loc[i].values[0]\n\nplays2['heldOrBlown'] = plays2['gameId'].apply(gameidtoHB)","224c3b3b":"# get df's only where teams held or blew the lead\nheld2 = plays2[plays2['heldOrBlown'] == 'held'].reset_index()\nblown2 = plays2[plays2['heldOrBlown'] == 'blown'].reset_index()\n\n# use percentOfPassRushersByDataFrame function\nheld_lead_pass_rushers2 = pd.Series(percentOfPassRushersByDataFrame(held2, plays2))\nblown_lead_pass_rushers2 = pd.Series(percentOfPassRushersByDataFrame(blown2, plays2))\n\n# get average # of passrushers for teams that held the lead prior to a lead with under 4 min to go\naverage_held_lead_pass_rushers2 = 0\nfor i in range(0, 8):\n    average_held_lead_pass_rushers2 = average_held_lead_pass_rushers2 + (held_lead_pass_rushers2[i] * i)\n\n# get average # of passrushers for teams that blew the lead prior to a lead with under 4 min to go\naverage_blown_lead_pass_rushers2 = 0\nfor i in range(0, 8):\n    average_blown_lead_pass_rushers2 = average_blown_lead_pass_rushers2 + (blown_lead_pass_rushers2[i] * i)\nprint(average_held_lead_pass_rushers2, average_blown_lead_pass_rushers2)","cc1c0767":"#### Compute a T-test on the average number of defenders in the box for held-lead games and blown-lead games","01c11ea1":"## **Overview**\n#### Our objective was to analyze defensive trends towards the end of the game. Specifically we thought it would be interesting to look at situations where a team is leading by 4-8 points with 4 minutes or less left in the fourth quarter. Our goal was to find defensive trends that contributed to a win. \n#### We split up the data between the teams that held their 4-8 point lead to win the game and the teams that blew the lead to lose the game. Then looking at the number of pass rushers from both situations we found that the teams who held their lead used an average of 3.95 pass rushers during their lead within the last 4 minutes, while the teams that blew the lead used an average of 4.12 pass rushers. \n#### When comparing the same teams defense from the rest of the game we found the average number of pass rushers before 4 minutes left was 4.07 for the teams that held their lead, and 4.1 for the the teams that blew their lead. While these are essentually equal, it is interesting to see that the teams who blew their lead tended to slightly increase their pass rush, while the teams who kept their lead to win tended to slightly decrease their pass rush. We found a similar trend for the number of defenders in the box as well.\n#### Next we ran a two-sample T test on the number of pass rushers for the teams who held and blew their leads with under 4 minutes left in the game and got a P-value of 0.17. Since this is a very specific situation we only found 77 games that met our criteria, therefore if this same analysis was run over several seasons to gather more data it might be possible to find data with significance. \n#### Based off of our analysis, we would reccomend to teams who are leading by 4-8 points towards the end of the game that they should tend towards a consevative pass rush to win the game. ","49fdc823":"#### Compute a T-test on the average number of pass rushers for held-lead games and blown-lead games","23cb0b87":"#### Define a function that gives the average number of defenders in the box per game by DataFrame","f2586765":"## **Import Libraries**","90e1044c":"## **Import Games and Plays Dataframes**\n\n","d850a6f7":"#### Create a new DataFrame (plays2) of the sames games in final, but with the defensive plays from the winning team (at the beginning of final) that do not qualify to be represented in final","3a94181f":"#### Identify situations where the initial winning team blew the lead, but then scored again to win (This should count as a blown lead from the defensive perspective). Switch to blown in the heldOrBlown column","925acdfa":"#### Add a column (heldOrBlown) to plays2","aec528d6":"#### Add a column (heldOrBlown) to final which signifies whether the team that was winning by 4-8 points originally held on to their lead or blew it","e6136686":"#### Drop the plays where the winning team has the ball (resulting in a dataframe where the winning team is on defense)","e3eacdb9":"#### Define a function that gives the average number of pass rushers per game by DataFrame","e8998af9":"#### Since there was no data on who won each game, we checked each of the 77 games in final for the winner. This data was collected in an excel sheet which we read into Google Collab (tyler_data_frame)\n#### Add a column (teamWin) to final which represents the winner of each game","df20b316":"# **The Art of Holding a Lead** \n##### By Kento Abeywardane and Matthew Paull","3fae0752":"#### Find the average number of pass rushers for plays2 split by held or blown lead games","bf8cf2e3":"#### Define two new dataframes (held and blown) that represent games where teams held their lead and games where teams blew there lead","9bc598b8":"## **Data Analysis**\n#### Define functions that give the percentage of pass rush selections per game and DataFrame","c44c0e11":"## **Data Cleaning**\n#### Create a new Dataframe (final) from 'Plays' that has all of the plays from 4 minutes or less in the 4th quarter, and where the score differential is within 4-8 points"}}