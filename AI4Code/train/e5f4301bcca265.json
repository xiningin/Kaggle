{"cell_type":{"765c101f":"code","ccccb488":"code","36372dac":"code","7c5a4c8b":"code","86622802":"code","8743567b":"code","1b66d4b9":"code","bd6d05d1":"code","d4b42fe7":"code","8b59134e":"code","5a9414e0":"code","75df1529":"code","46843705":"code","116f9cf2":"code","117c9faa":"code","7d9ea684":"code","d5a8c319":"code","4a1fc62d":"code","7b1ffbaf":"code","5742d50e":"code","7c61cb2a":"code","1110d3a8":"code","3defe742":"code","57e096b9":"code","2ba4643d":"code","d4851fc4":"code","1ea46051":"code","c265d6b3":"code","b08d37c9":"code","9c09f632":"code","c99ff9fb":"code","ccfab216":"code","1a2d9696":"markdown","042af2c1":"markdown","5a2724bd":"markdown","4f3a3ad4":"markdown","ffdc3255":"markdown","ddde8bb9":"markdown","c2328d2e":"markdown","1db9f8ad":"markdown","319a0e13":"markdown","ef49e14a":"markdown","b16f675d":"markdown"},"source":{"765c101f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ccccb488":"df = pd.read_csv('\/kaggle\/input\/stocknews\/Combined_News_DJIA.csv', encoding = 'ISO-8859-1')\n\n# encoding is used to encode some of the utf-8 characters...so use it","36372dac":"df.head()\n","7c5a4c8b":"df.shape","86622802":"#divide in train and tes\ntrain = df[df['Date']<'20150101']\ntest = df[df['Date'] > '20141231']","8743567b":"train.shape","1b66d4b9":"test.shape","bd6d05d1":"#remove punctuation\n#apart from alphabets we will replace every character with blank\ndata = train.iloc[:, 2:27]\ndata.replace(\"[^a-zA-Z]\", \" \", regex=True, inplace=True)","d4b42fe7":"#renaming column\nlist1 = [i for i in range(25)]\nnew_Index = [str(i) for i in list1]\ndata.columns = new_Index\ndata.head(5)","8b59134e":"#converting hadlines to lower case\nfor index in new_Index:\n    data[index] = data[index].str.lower()\ndata.head(2)","5a9414e0":"' '.join(str(x) for x in data.iloc[1, 0:25])  #example","75df1529":"#all the sentences in the form of list\n\nheadlines = []\nfor row in range(0, len(data.index)):\n    headlines.append(' '.join(str(x) for x in data.iloc[row, 0:25]))","46843705":"headlines[5]","116f9cf2":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier","117c9faa":"# implememt BAG OF WORDS\ncountVector = CountVectorizer(ngram_range=(2,2))\n#ngram(2,2) means it will combine the 2 words together and assign the value\n\ntrainDataset = countVector.fit_transform(headlines)","7d9ea684":"trainDataset[0]  #sparse matrix ie combination of 0 and 1","d5a8c319":"randomClassifier = RandomForestClassifier(n_estimators=200, criterion='entropy')\nrandomClassifier.fit(trainDataset, train['Label'])\n","4a1fc62d":"testTransform =[]\nfor row in range(0, len(test.index)):\n    testTransform.append(' '.join(str(x) for x in test.iloc[row, 2:27]))\n    \ntest_dataset = countVector.transform(testTransform)\npredictions = randomClassifier.predict(test_dataset)","7b1ffbaf":"test.loc[1611, :]","5742d50e":"predictions","7c61cb2a":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score","1110d3a8":"matrix = confusion_matrix(test['Label'], predictions)\nprint(matrix)\nscore = accuracy_score(test['Label'], predictions)\nprint(score)\nreport = classification_report(test['Label'], predictions)\nprint(report)","3defe742":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier","57e096b9":"# implememt BAG OF WORDS\ntfidfVector = TfidfVectorizer(ngram_range=(2,2))\n#ngram(2,2) means it will combine the 2 words together and assign the value\n\ntrainDataset = tfidfVector.fit_transform(headlines)","2ba4643d":"randomClassifier = RandomForestClassifier(n_estimators=200, criterion='entropy')\nrandomClassifier.fit(trainDataset, train['Label'])","d4851fc4":"testTransform =[]\nfor row in range(0, len(test.index)):\n    testTransform.append(' '.join(str(x) for x in test.iloc[row, 2:27]))\n    \ntest_dataset = tfidfVector.transform(testTransform)\npredictions = randomClassifier.predict(test_dataset)","1ea46051":"predictions","c265d6b3":"matrix = confusion_matrix(test['Label'], predictions)\nprint(matrix)\nscore = accuracy_score(test['Label'], predictions)\nprint(score)\nreport = classification_report(test['Label'], predictions)\nprint(report)","b08d37c9":"from sklearn.naive_bayes import MultinomialNB","9c09f632":"naive = MultinomialNB()\nnaive.fit(trainDataset, train['Label'])","c99ff9fb":"predictions = naive.predict(test_dataset)\npredictions","ccfab216":"matrix = confusion_matrix(test['Label'], predictions)\nprint(matrix)\nscore = accuracy_score(test['Label'], predictions)\nprint(score)\nreport = classification_report(test['Label'], predictions)\nprint(report)","1a2d9696":"### What the DATA is?\n0 -> stock prize will have not going to increase nxt day\n\n1 -> stok prize will increse on next day\n\nTOP (1-25) --> headlines of new paper","042af2c1":"Countvectorizer is used to convert all the sentences into vectors","5a2724bd":"# Stock Sentiment Analysis\n\nIt will predict wheter stock will up or down","4f3a3ad4":"# Lets use TFIDF instead of COunt Vectorizer\n","ffdc3255":"### Check accuracy\n","ddde8bb9":"# Lets use Navie bayes instead of RandomForest","c2328d2e":"> Combine all the 25 headlines to a single sentence","1db9f8ad":"## Text Preprocessing","319a0e13":"### Implement Random forest Classifier","ef49e14a":"### Predict for the Test Dataset","b16f675d":"There are lots of 'symbols' so we will remove them from headline"}}