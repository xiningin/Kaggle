{"cell_type":{"feb80fff":"code","97725a74":"code","71a4b2e9":"code","676719ed":"code","ada1ea8a":"code","878b2747":"code","d368abc3":"code","37af6179":"code","dd5d3f55":"code","7a1c4bba":"code","b60d292c":"code","7c4c8d72":"code","a57da61f":"code","0608efaa":"code","b32a044f":"code","2b3e3dbc":"code","b99a9193":"code","2c330398":"code","eae4e6bb":"code","0818570e":"code","1cb18762":"code","8897f6ec":"code","bfededf0":"code","cb318356":"code","cb4366b2":"code","0da08959":"code","1349970f":"code","6fab6429":"code","ff562296":"code","4ecb8da0":"code","04515a19":"code","66c2ea67":"markdown","1ff896a9":"markdown","8127e5e4":"markdown","08bf384b":"markdown","80285372":"markdown","f23d4db9":"markdown","c1794913":"markdown","85345fe7":"markdown","7d6d67f7":"markdown","d059f4df":"markdown","78884af8":"markdown","f52c3702":"markdown","c942bc98":"markdown","44ab371b":"markdown"},"source":{"feb80fff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","97725a74":"# Load data that we will use.\ndata_2017 = pd.read_csv('..\/input\/2017.csv')\ndata_2016 = pd.read_csv('..\/input\/2016.csv')\ndata_2015= pd.read_csv('..\/input\/2015.csv')","71a4b2e9":"# information about data_2017\ndata_2017.info","676719ed":"data_2017.columns","ada1ea8a":"data_2017.rename(\n    columns={\n   'Happiness.Score' : 'Happiness_Score',\n   'Happiness.Rank' : 'Happiness_Rank',\n   'Whisker.high' : 'Whisker_high',\n   'Whisker.low' : 'Whisker_low',\n   'Economy..GDP.per.Capita.' : 'Economy',\n   'Health..Life.Expectancy.' : 'Health_Life_Expectancy',\n   'Trust..Government.Corruption.' : 'Trust_Government_Corruption',\n   'Dystopia.Residual' : 'Dystopia_Residual'\n   \n  },\n  inplace=True\n)","878b2747":"data_2017.columns","d368abc3":"data_2016.columns","37af6179":"data_2016.rename(\n    columns={\n   'Happiness Score' : 'Happiness_Score',\n   'Happiness Rank' : 'Happiness_Rank',\n   'Lower Confidence Interval' : 'Lower_Confidence_Interval',\n   'Upper Confidence Interval' : 'Upper_Confidence_Interval',\n   'Economy (GDP per Capita)' : 'Economy',\n   'Health (Life.Expectancy)' : 'Health_Life_Expectancy',\n   'Trust (Government.Corruption)' : 'Trust_Government_Corruption',\n   'Dystopia Residual' : 'Dystopia_Residual'\n   \n  },\n  inplace=True\n)","dd5d3f55":"data_2016.columns","7a1c4bba":"data_2015.columns","b60d292c":"data_2015.rename(\n    columns={\n   'Happiness Score' : 'Happiness_Score',\n   'Happiness Rank' : 'Happiness_Rank',\n   'Standard Error' : 'Standard_Error',\n   'Economy (GDP per Capita)' : 'Economy',\n   'Health (Life Expectancy)' : 'Health_Life_Expectancy',\n   'Trust (Government.Corruption)' : 'Trust_Government_Corruption',\n   'Dystopia Residual' : 'Dystopia_Residual'\n   \n  },\n  inplace=True\n)","7c4c8d72":"data_2015.columns","a57da61f":"data_2017.head(10)","0608efaa":"data_2017[\"Happiness_Score\"].value_counts(dropna =False)","b32a044f":"data_2016[\"Happiness_Score\"].value_counts(dropna =False)","2b3e3dbc":"data_2015[\"Happiness_Score\"].value_counts(dropna =False)","b99a9193":" # prepare data frame\ndf = data_2017.iloc[:150,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    #x = x axis\n                    x = df.Happiness_Score,\n                    #y = y axis\n                    y = df.Economy,\n                    #  mode = type of plot like marker, line or line + markers\n                     mode = \"lines\",\n                    #name = name of the plots\n                     name = \"Economy\",\n                     #marker = marker is used with dictionary.\n                     #color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n                     marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                     #text = The hover text (hover is curser)\n                    text= df.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.Happiness_Score,\n                    y = df.Family,\n                    mode = \"lines+markers\",\n                    name = \"Family\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.Country)\n\n\n#data = is a list that we add traces into it\ndata = [trace1, trace2]\n#layout = it is dictionary.\n#title = title of layout\n#x axis = it is dictionary\n#title = label of x axis\n#ticklen = length of x axis ticks\n#zeroline = showing zero line or not\nlayout = dict(title = 'Economy and Family vs Happiness Score of  150 Countries',\n              xaxis= dict(title= 'Happiness Score',ticklen= 5,zeroline= False)\n             )\n\n#fig = it includes data and layout\nfig = dict(data = data, layout = layout)\n#iplot() = plots the figure(fig) that is created by data and layout\niplot(fig)","2c330398":"# prepare data frames\ndf2017 = data_2017.iloc[:150,:]\ndf2015 = data_2015.iloc[:150,:]\ndf2016 = data_2016.iloc[:150,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2017.Happiness_Score,\n                    y = df2017.Family,\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2017.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.Happiness_Score,\n                    y = df2015.Family,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.Happiness_Score,\n                    y = df2016.Family,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Happiness Score vs Family  of 150 Countries with 2015, 2016 and 2017 years',\n              xaxis= dict(title= 'Happiness Score',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Family',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","eae4e6bb":"# prepare data frames\ndf2017 = data_2017.iloc[:15,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Happiness_Score,\n                name = \"Happiness_Score\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2017.Country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2017.Country,\n                y = df2017.Economy,\n                name = \"Economy\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2017.Country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","0818570e":"# prepare data frames\ndf2016 = data_2016.iloc[:15,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = df2016.Country\n\ntrace1 = {\n  'x': x,\n  'y': df2016.Happiness_Score,\n  'name': 'Happiness Score',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df2016.Economy,\n  'name': 'Economy',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Countries'},\n  'barmode': 'relative',\n  'title': 'Happiness Score and Economy of top 15 Countries in 2016'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1cb18762":"# import graph objects as \"go\" and import tools\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n# prepare data frames\ndf2015 = data_2015.iloc[:15,:]\n\ny_saving = [each for each in df2015.Happiness_Score]\ny_net_worth  = [float(each) for each in df2015.Economy]\nx_saving = [each for each in df2015.Country]\nx_net_worth  = [each for each in df2015.Country]\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='Happiness Score',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='Economy',\n)\nlayout = dict(\n                title='Happiness Score and Economy',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\nannotations = []\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","8897f6ec":"# data preparation\ndf2015 = data_2015\ndf2015.Region.value_counts()","bfededf0":"# data preparation\ndf2015 = data_2015\nvalues = df2015.Region.value_counts()\nlabels = ['Sub-Saharan Africa',  'Central and Eastern Europe', 'Latin America and Caribbean',\n'Western Europe', 'Middle East and Northern Africa', 'Southeastern Asia', 'Southern Asia', 'Eastern Asia','Australia and New Zealand',\n'North America']\n\n\n\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": values,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Regions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Regions of Countries \",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Percent of Regions\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\n\n#trace = go.Pie(labels=labels, values=values, title=\"Regions of Countries\")\n\niplot(fig)","cb318356":"# data preparation\n# Firstly lets create 2 data frame\ndata1 = data_2015.iloc[:10,:]\ndata2= data_2015.iloc[80:90,:]\ndf2015 = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\n#we used 2 parts of data to see differences between Countries happiness scores\n#(scores are so close to each other and very difficult to understand differences  between 7.5620 - 7.4856)\nsize  = df2015.Happiness_Score\ncolor = df2015.Economy\ndata = [\n    {\n        'y': df2015.Economy,\n        'x': df2015.Country,\n        'mode': 'markers',\n        'marker': {\n            'color': color,\n            'size': size,\n        \n            'showscale': True\n        },\n        \"text\" :  df2015.Country    \n    }\n]\niplot(data)\n\n     ","cb4366b2":"\n# prepare data frames\ndf2017 = data_2017.Happiness_Score\ndf2015 = data_2015.Happiness_Score\ndf2016 = data_2016.Happiness_Score\ntrace1 = go.Histogram(\n    x=df2017,\n    opacity=0.75,\n    name = \"2017\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=df2016,\n    opacity=0.75,\n    name = \"2016\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ntrace3 = go.Histogram(\n    x=df2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2,trace3]\nlayout = go.Layout(barmode='overlay',\n                   title=' Happiness Scores in 2015,2016 and 2017',\n                   xaxis=dict(title='Happiness Scores'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0da08959":"# data prepararion\ndf2017 = data_2017.Country\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df2017))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","1349970f":"# data preparation\ndf2015 = data_2015\n\ntrace0 = go.Box(\n    y=df2015.Happiness_Score,\n    name = 'Happiness score of countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=df2015.Economy,\n    name = 'Economy of countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","6fab6429":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = data_2015\ndata2015 = dataframe.loc[:,[\"Happiness_Score\",\"Family\", \"Economy\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","ff562296":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Happiness_Score,\n    name = \"Happiness_Score\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Economy,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Economy\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Economy and Happiness Score vs Happiness Rank of Countries'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","4ecb8da0":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Happiness_Score,\n    z=dataframe.Economy,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","04515a19":"\ntrace1 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Family,\n    name = \"Family\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Health_Life_Expectancy,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Health\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Economy,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Economy\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Happiness_Score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Happiness_Score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Family, Health, Economy and Happiness score VS Happiness Rank of Countries'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","66c2ea67":"**Scatter**","1ff896a9":"**Pie Charts**","8127e5e4":"**Inset Plots**","08bf384b":"**3D Scatter Plot with Colorscaling**","80285372":"**Bar Charts**","f23d4db9":"**Loading Data and Explanation of Features**\n\n**About this data**\n\nHappiness rank and scores by country, 2015.2016,2017.\n\n**Data Features**\n* Country ; Name of the country.\n* Region    ; Region the country belongs to.\n* Happiness Rank  ; Rank of the country based on the Happiness Score.\n* Happiness Score  ; A metric measured in 2015 by asking the sampled people the question: \"How would you rate your happiness on a scale of 0 to 10 where 10 is the happiest.\"\n* Standard Error  ; The standard error of the happiness score.\n* Economy (GDP per Capita)  ; The extent to which GDP contributes to the calculation of the Happiness Score.\n* Family ; The extent to which Family contributes to the calculation of the Happiness Score\n* Health (Life Expectancy) ; The extent to which Life expectancy contributed to the calculation of the Happiness Score\n* Freedom ; The extent to which Freedom contributed to the calculation of the Happiness Score.\n* Trust (Government Corruption) ; The extent to which Perception of Corruption contributes to Happiness Score.\n* Generosity ; The extent to which Generosity contributed to the calculation of the Happiness Score.\n* Dystopia Residual ; The extent to which Dystopia Residual contributed to the calculation of the Happiness Score.\n","c1794913":"**Box Plots**\n\n* Box Plots\n\n  * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n\n      * 25th percentile = quartile 1 (Q1) that is lower quartile\n      * 75th percentile = quartile 3 (Q3) that is higher quartile\n      *  height of box = IQR = interquartile range = Q3-Q1\n      * Whiskers = 1.5 * IQR from the Q1 and Q3\n      * Outliers = being more than 1.5*IQR away from median commonly.\n      \n * trace = box\n      * y = data we want to visualize with box plot\n      * marker = color","85345fe7":"**Histogram**","7d6d67f7":"**Bubble Charts**","d059f4df":"**Multiple Subplots**","78884af8":"**Word Cloud**","f52c3702":"**Cleaning Data**","c942bc98":"**Scatter Matrix Plots**\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features","44ab371b":"**Line Chart**"}}