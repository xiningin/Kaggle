{"cell_type":{"6991f391":"code","55398a4b":"code","0b20cbe4":"code","22263661":"code","ef976fbb":"code","a776b286":"code","970f9cad":"code","7484723e":"code","c1685d1e":"code","54bae8ff":"code","1a488d9c":"code","c58b8b61":"code","6002112d":"code","6f247551":"code","0cae27bc":"code","401edf0c":"code","a53b9df7":"code","5baf5b1f":"code","32fefa5b":"code","da8479cb":"code","13733c04":"code","0cd7f301":"code","5c194c3f":"code","c57b71a0":"code","d910feac":"code","a2414199":"code","efd72649":"code","13557107":"code","5cc8492e":"code","0faff656":"code","616dac16":"code","269482ea":"code","9b3b931f":"code","3093eb19":"markdown","ac5dfaca":"markdown","0debadf2":"markdown","758ca5d6":"markdown","9609903a":"markdown","f578df2c":"markdown","5c971c19":"markdown","11eec49a":"markdown","a276f36b":"markdown","59fc0a80":"markdown","593fbfbd":"markdown","5b89cafb":"markdown","fe9ccba9":"markdown","de21dc0b":"markdown","ba7e452c":"markdown","a402765d":"markdown","9fb82cf0":"markdown","4e0a8b9d":"markdown","521f3105":"markdown","5242008f":"markdown"},"source":{"6991f391":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55398a4b":"#Importing the necessary libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom mlxtend.plotting import plot_decision_regions\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom xgboost import XGBClassifier","0b20cbe4":"# Read the CSV file\ndf=pd.read_csv(\"..\/input\/titanic\/train.csv\")\n# Drop the Unnecessary coloumns\ndf=df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\nprint(\"Percentage of Null values in Each column \\n\",round(df.isnull().sum()\/len(df.index)*100,2))\n# Check the Meta info\ndf.info()\n# Check for the outliers\ndf.describe(percentiles=[0.25,0.50,0.75,0.90,0.95,1])\ndf['Embarked'].value_counts()","22263661":"df_outlier=df[['Survived','Pclass' ,'Age','SibSp','Parch','Fare']]\nQ1 = df_outlier.quantile(0.25)\n\nQ3 = df_outlier.quantile(0.75)\nIQR = Q3 - Q1\n((df_outlier < (Q1 - 1.5 * IQR)) | (df_outlier > (Q3 + 1.5 * IQR))).sum()","ef976fbb":"#!pip install plotly\nimport plotly.express as px\nfig = px.violin(df, y=\"Age\", box=True, points='all', title=\"People Age\")\nfig.show()","a776b286":"#Hover on the graph to know the outliers details.\nfig = px.violin(df, y=\"SibSp\", box=True, points='all', title=\"Sibbling & Spouse\")\nfig.show()","970f9cad":"df01 = df.melt( id_vars=['Survived'],value_vars=['Sex'], var_name='cols',  value_name='vals')\nplt.figure(figsize=(12,5))\ng =sns.countplot(x=\"Survived\", hue='vals', data=df01)","7484723e":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nSurvivalRate=''.join((\"Survival Rate of Male in ThirdClass is only:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==3)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==3)]).set(title=SurvivalRate)\nplt.subplot(2,2,2)\nSurvivalRate=''.join((\"Survival Rate of Male in SecondClass is only:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==2)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==2)]).set(title=SurvivalRate)\nplt.subplot(2,2,3)\nSurvivalRate=''.join((\"Survival Rate of Male in FirstClass is only:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==1)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==1)]).set(title=SurvivalRate)","c1685d1e":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nSurvivalRate=''.join((\"Survival Rate of Female in ThirdClass is :- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==3)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==3)]).set(title=SurvivalRate)\nplt.subplot(2,2,2)\nSurvivalRate=''.join((\"Survival Rate of Female in SecondClass is :- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==2)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==2)]).set(title=SurvivalRate)\nplt.subplot(2,2,3)\nSurvivalRate=''.join((\"Survival Rate of Female in FirstClass is :- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Survived']==1)].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==1)].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==1)]).set(title=SurvivalRate)","54bae8ff":"df01=df.copy()\ndf01['Sex'].replace(['female', 'male'], [0,1], inplace = True)\nage_bins = range(15,75,5)\nmedians_by_age_group = df01.groupby([\"Survived\",pd.cut(df01['Age'], age_bins)]).median()\n\nmedians_by_age_group.index = medians_by_age_group.index.set_names(['Survived', 'Age_group'])\nmedians_by_age_group.reset_index(inplace=True)\nmedians_by_age_group\n\nfig, ax = plt.subplots(figsize=(12,5))\n#sns.barplot(x='Survived', y='Age_group',hue=\"Sex\", data=medians_by_age_group,\n            #palette=['#cc66ff','#0066ff'],\n           # alpha=0.7,edgecolor='k',\n           # ax=ax)\n\nsns.barplot(x='Age_group',y='Fare',hue=\"Survived\", data=medians_by_age_group)\n\nax.set_title('Median estimated salary of customers based on Age who purchased or not')\nax.set_xlabel('Age group')\nplt.show()","1a488d9c":"plt.figure(figsize=(32,19))\nplt.subplot(3,3,1)\nSurvivalRate=''.join((\"Survival Rate of Female in ThirdClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,2)\nSurvivalRate=''.join((\"Survival Rate of Female in ThirdClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,3)\nSurvivalRate=''.join((\"Survival Rate of Female in ThirdClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==3) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n\n\nplt.subplot(3,3,4)\nSurvivalRate=''.join((\"Survival Rate of Female in SecondClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,5)\nSurvivalRate=''.join((\"Survival Rate of Female in SecondClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,6)\nSurvivalRate=''.join((\"Survival Rate of Female in SecondClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==2) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n\nplt.subplot(3,3,7)\nSurvivalRate=''.join((\"Survival Rate of Female in FirstClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,8)\nSurvivalRate=''.join((\"Survival Rate of Female in FirstClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,9)\nSurvivalRate=''.join((\"Survival Rate of Female in FirstClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"female\") & (df['Pclass']==1) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n","c58b8b61":"plt.figure(figsize=(32,19))\nplt.subplot(3,3,1)\nSurvivalRate=''.join((\"Survival Rate of Male in ThirdClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,2)\nSurvivalRate=''.join((\"Survival Rate of Male in ThirdClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,3)\nSurvivalRate=''.join((\"Survival Rate of Male in ThirdClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==3) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n\n\nplt.subplot(3,3,4)\nSurvivalRate=''.join((\"Survival Rate of Male in SecondClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,5)\nSurvivalRate=''.join((\"Survival Rate of Male in SecondClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,6)\nSurvivalRate=''.join((\"Survival Rate of Male in SecondClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==2) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n\nplt.subplot(3,3,7)\nSurvivalRate=''.join((\"Survival Rate of Male in FirstClass who boarded from Southhampton Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='S') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='S')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='S')]).set(title=SurvivalRate)\nplt.subplot(3,3,8)\nSurvivalRate=''.join((\"Survival Rate of Male in FirstClass who boarded from Cherbourg Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='C') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='C')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='C')]).set(title=SurvivalRate)\nplt.subplot(3,3,9)\nSurvivalRate=''.join((\"Survival Rate of Male in FirstClass who boarded from Queenstown Port:- \",str(round((df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Survived']==1) & (df['Embarked']=='Q') ].Pclass.count()\/df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='Q')].Pclass.count()*100),2)),' %'))\nsns.countplot(x='Survived',hue='Sex',data=df[(df['Sex']==\"male\") & (df['Pclass']==1) & (df['Embarked']=='Q')]).set(title=SurvivalRate)\n","6002112d":"dfclassification=df\ndfclassification['Age'] = dfclassification['Age'].fillna(dfclassification['Age'].median())\ndfclassification = dfclassification.dropna(axis=0)\n\n\ndfclassification['Sex'].replace(['female', 'male'], [0,1], inplace = True)\nmylist = list(dfclassification.select_dtypes(include=['object']).columns)\ndummy1=pd.get_dummies(dfclassification[mylist],drop_first=True)\ndfclassificationFinal = pd.concat([dummy1,dfclassification], axis=1)\ndfclassificationFinal=dfclassificationFinal.drop(['Embarked'],axis='columns')\n\nfrom sklearn import preprocessing\nX = dfclassificationFinal.drop('Survived',axis=1).values\ny = dfclassificationFinal['Survived'].values","6f247551":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.1,random_state=2,stratify=y)\n#X_train, X_test, y_train, y_test = cross_validation.train_test_split(X,y, test_size=0.3, random_state=0, stratify=y)\n\ntrain_0, train_1 = len(y_train[y_train==0]), len(y_train[y_train==1])\ntest_0, test_1 = len(y_test[y_test==0]), len(y_test[y_test==1])\nprint('>Train: 0=%d, 1=%d, Test: 0=%d, 1=%d' % (train_0, train_1, test_0, test_1))","0cae27bc":"model=SVC()\nmodel.fit(X_train,y_train)\nprint(f' Training Accuracy is:- {model.score(X_train,y_train)}')\nf'Test Accuracy is:- {model.score(X_test,y_test)}'","401edf0c":"\n# Logistic Regression parameters for K-fold cross vaidation\nparams = {\"C\": [0.01, 0.1, 1, 10, 100, 1000]}\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=4)\n\n#perform cross validation\nmodel_cv = GridSearchCV(estimator = LogisticRegression(),\n                        param_grid = params, \n                        scoring= 'roc_auc', \n                        cv = folds, \n                        n_jobs=-1,\n                        verbose = 1,\n                        return_train_score=True) \n#perform hyperparameter tuning\nmodel_cv.fit(X_train, y_train)\n#print the evaluation result by choosing a evaluation metric\nprint('Best ROC AUC score: ', model_cv.best_score_)\n#print the optimum value of hyperparameters\nprint('Best hyperparameters: ', model_cv.best_params_)","a53b9df7":"# cross validation results\ncv_results = pd.DataFrame(model_cv.cv_results_)\n\n# plotting of C versus train and validation scores\nplt.figure(figsize=(8, 6))\nplt.plot(cv_results['param_C'], cv_results['mean_test_score'])\nplt.plot(cv_results['param_C'], cv_results['mean_train_score'])\nplt.xlabel('C')\nplt.ylabel('sensitivity')\nplt.legend(['test result', 'train result'], loc='upper left')\nplt.xscale('log')\n\n# Instantiating the model with best C\nlog_reg_imb_model = LogisticRegression(C=0.1,solver='lbfgs')\n\n# Fitting the model on train dataset\nlog_reg_imb_model.fit(X_train, y_train)","5baf5b1f":"# Creating function to show ROC-AUC score, f1 score and classification report\n\ndef show_scores(y_test, y_pred):\n    '''\n    Display ROC-AUC score, f1 score and classification report of a model.\n    '''\n    print(f\"F1 Score: {round(f1_score(y_test, y_pred)*100,2)}%\") \n    print(f\"Classification Report: \\n {classification_report(y_test, y_pred)}\")\n\n# Predictions on the train set\ny_train_pred = log_reg_imb_model.predict(X_train)\nshow_scores(y_train, y_train_pred)","32fefa5b":"# Predictions on the train set\ny_train_pred = log_reg_imb_model.predict(X_test)\nshow_scores(y_test, y_train_pred)","da8479cb":"from sklearn import metrics\n# ROC Curve function\ndef draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    return None\n\n    # Predicted probability\ny_train_pred_proba = log_reg_imb_model.predict_proba(X_train)[:,1]\n\n# Plot the ROC curve\ndraw_roc(y_train, y_train_pred_proba)","13733c04":"# Predicted probability\ny_train_pred_proba = log_reg_imb_model.predict_proba(X_test)[:,1]\n\n# Plot the ROC curve\ndraw_roc(y_test, y_train_pred_proba)","0cd7f301":"params = {\"C\": [0.01, 0.1, 1, 10, 100, 1000]}\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=4)\n\n#perform cross validation\nXGmodel_cv = GridSearchCV(estimator = XGBClassifier(learning_rate=0.1, n_estimators=150, max_depth=5,\n min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=3,seed=27),\n                        param_grid = params, \n                        scoring= 'roc_auc', \n                        cv = folds, \n                        n_jobs=4,\n                        verbose = 1,\n                        return_train_score=True) \n#perform hyperparameter tuning\nXGmodel_cv.fit(X_train, y_train)\n#print the evaluation result by choosing a evaluation metric\nprint('Best ROC AUC score: ', XGmodel_cv.best_score_)\n#print the optimum value of hyperparameters\nprint('Best hyperparameters: ', XGmodel_cv.best_params_)","5c194c3f":"# cross validation results\nXGcv_results = pd.DataFrame(XGmodel_cv.cv_results_)\n\n# plotting of C versus train and validation scores\nplt.figure(figsize=(8, 6))\nplt.plot(XGcv_results['param_C'], XGcv_results['mean_test_score'])\nplt.plot(XGcv_results['param_C'], XGcv_results['mean_train_score'])\nplt.xlabel('C')\nplt.ylabel('sensitivity')\nplt.legend(['test result', 'train result'], loc='upper left')\nplt.xscale('log')\n\n# Instantiating the model with best C\nxgboos_imb_model = XGBClassifier(C=0.01,learning_rate=0.1,n_estimators=150, max_depth=5,\n min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', nthread=4, scale_pos_weight=3,seed=27)\n\n# Fitting the model on train dataset\nxgboos_imb_model.fit(X_train, y_train)","c57b71a0":"# Creating function to show ROC-AUC score, f1 score and classification report\n\ndef show_scores(y_test, y_pred):\n    '''\n    Display ROC-AUC score, f1 score and classification report of a model.\n    '''\n    print(f\"F1 Score: {round(f1_score(y_test, y_pred)*100,2)}%\") \n    print(f\"Classification Report: \\n {classification_report(y_test, y_pred)}\")\n\n# Predictions on the train set\ny_train_pred = xgboos_imb_model.predict(X_train)\nshow_scores(y_train, y_train_pred)\n","d910feac":"# Predictions on the train set\ny_train_pred = xgboos_imb_model.predict(X_test)\nshow_scores(y_test, y_train_pred)","a2414199":"\nfrom sklearn import metrics\n# ROC Curve function\ndef draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    return None\n\n    # Predicted probability\ny_train_pred_proba = xgboos_imb_model.predict_proba(X_train)[:,1]\n\n# Plot the ROC curve\ndraw_roc(y_train, y_train_pred_proba)","efd72649":"# Predicted probability\ny_train_pred_proba = xgboos_imb_model.predict_proba(X_test)[:,1]\n\n# Plot the ROC curve\ndraw_roc(y_test, y_train_pred_proba)","13557107":"y_predicted = xgboos_imb_model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_predicted)\nimport seaborn as sn\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True,fmt='g')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","5cc8492e":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier, Perceptron, RidgeClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier,GradientBoostingRegressor\nfrom sklearn.svm import SVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nfrom sklearn.metrics import precision_score\n\nmodels =[(\"SVC\", SVC()),\n         ('KNN',KNeighborsClassifier()),(\"DTC\", DecisionTreeClassifier()),\n         (\"GNB\", GaussianNB()),(\"SGDC\", SGDClassifier()),(\"Perc\", Perceptron()),\n         (\"NC\",NearestCentroid()),(\"Ridge\", RidgeClassifier()),\n         (\"BNB\", BernoulliNB()),('RF',RandomForestClassifier()),('ADA',AdaBoostClassifier()),\n         ('XGB',GradientBoostingClassifier()),('PAC',PassiveAggressiveClassifier())]\npred = []\nnames = []\nmodelsprecision = []\n\nfor name,model in models:\n    model.fit(X_train, y_train)\n    prediction = model.predict(X_test)\n    score = precision_score(y_test, prediction,average = 'macro')\n    pred.append(score)\n    names.append(name)\n    modelsprecision.append((name,score))\n    \nmodelsprecision.sort(key=lambda k:k[1],reverse=True)\n\nmodelsprecision","0faff656":"\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier(class_weight = 'balanced', criterion = 'gini', min_samples_leaf=1, min_samples_split=16, n_estimators=700)\nrf_model.fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\nprint(\"Accuracy: {0}\".format(metrics.accuracy_score(y_test, y_pred)))\nprint(\"Recall\/Sensitivity: {0}\".format(metrics.recall_score(y_test, y_pred)))\n{model.score(X_train,y_train)}","616dac16":"dftest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndftest=dftest.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\n\ndftest['Age'] = dftest['Age'].fillna(dftest['Age'].median())\nprint(\"Percentage of Null values in Each column \\n\",round(dftest.isnull().sum()\/len(dftest.index)*100,2))\n\ndftest['Fare'] = dftest['Fare'].fillna(0)\n#dftest = dftest.dropna(axis=0)\nprint(\"Percentage of Null values in Each column \\n\",round(dftest.isnull().sum()\/len(dftest.index)*100,2))\n\n\ndftest['Sex'].replace(['female', 'male'], [0,1], inplace = True)\nmylist = list(dftest.select_dtypes(include=['object']).columns)\ndummy1=pd.get_dummies(dftest[mylist],drop_first=True)\ndftestFinal = pd.concat([dummy1,dftest], axis=1)\ndftestFinal=dftestFinal.drop(['Embarked'],axis='columns')\ndftestFinal.shape","269482ea":"y_train_pred = xgboos_imb_model.predict(dftestFinal.values)\ny_train_pred\ndffinal=pd.DataFrame(y_train_pred) \n\ndffinal.rename(columns={ dffinal.columns[0]: \"Survived\" }, inplace = True)\ndffinal.to_csv('FinalTestXGboostFinal.csv')","9b3b931f":"y_train_pred = log_reg_imb_model.predict(dftestFinal.values)\ndffinal=pd.DataFrame(y_train_pred) \n\ndffinal.rename(columns={ dffinal.columns[0]: \"Survived\" }, inplace = True)\ndffinal.to_csv('FinalTestPredictionLogistic.csv')","3093eb19":"### Model 02:- Logistic Regression with Hyper parmeter tuning.","ac5dfaca":"#### ROC curve on Test","0debadf2":"## Section 03:- Splitting the Data in to X_train and X_test","758ca5d6":"* <b><h4> From the above plot it's clear that if you are female and if you were travelling in 3rd class\/level your survival chances are 50% compared to 96.81% in First class<\/h5><\/b>","9609903a":"* <h4><b>From the above Male survival rate is very less compred to Female<\/b><\/h4>","f578df2c":"### Modal-3 Using XGBoost ","5c971c19":"* <h4><b> Survival rate for Male from the titanic tragedy from<\/b><\/h4>\n    \n    * 3rd class --> Survival rate is more if a male boards from Cherbourg port\n    * 2nd class --> Survival rate is more if a mal boards from Cherbourg port\n    * 1st class --> Survival rate is more if a male boards from Cherbourg port","11eec49a":"## Section 04:- Model Building","a276f36b":"### Model-4 Spot Check ","59fc0a80":"## Section 01:- Reading Data and Checking the Meta information","593fbfbd":"* <h4><b> Survival rate for female from the titanic tragedy from<\/b><\/h4>\n    \n    * 3rd class --> Survival rate is more if a female boards from Queenstown port\n    * 2nd class --> Survival rate is 100% if a femal boards from Cherbourg port or Queenstown port\n    * 1st class --> Survival rate is 100% if a female boards from Queenstown port","5b89cafb":"#### Model 01:- Support Vector Machine (SVM)","fe9ccba9":"##### <b>ROC on Train Set<\/b>","de21dc0b":"* <b><h4> From the above plot it's clear that if you are Male and if you were travelling in 3rd class\/level your survival chances are just 13% compared to 36% in First class<\/h5><\/b>","ba7e452c":"* <h4> From the above plot(Hover on the graph) Youngest person on board was 0.42 years and oldest person who was on board was 80 years <\/h4>","a402765d":"## Section 02:- EDA","9fb82cf0":"### Checking for outliers","4e0a8b9d":"### One hot Encoding the columns","521f3105":"### Model-5 Random Forest ","5242008f":"* <h4> From the above plot(Hover on the graph) min number of sibling and spouse on had was zero and max number of sibling and spouse on had was 8<\/h4>"}}