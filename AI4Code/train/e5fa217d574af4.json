{"cell_type":{"9f2dadb4":"code","04a9a0ec":"code","a6ad1664":"code","b5c0b54a":"code","8e3df4ea":"code","77bbee58":"code","0ff842aa":"code","21cb5f69":"code","fd44764d":"code","e82f5295":"code","9b68fbb9":"code","2e3a9b8f":"code","6c46b614":"code","42737178":"code","92674692":"code","81084745":"code","cc2806c4":"code","2a40f972":"code","cf59fe21":"code","4c9566a0":"code","32e57267":"code","9dcb989d":"code","9e0c2d87":"code","3bbc6924":"code","b49ab2f5":"code","0121f1af":"code","d246ce62":"code","ea6a7ce6":"markdown","c50a4bc7":"markdown","c414b560":"markdown","b9d1a671":"markdown","d96fe617":"markdown","0d289951":"markdown","fe3643dd":"markdown","2329b3a1":"markdown","b02e2d2b":"markdown","58245334":"markdown","cb0fad4a":"markdown","5f93d741":"markdown","edb7283d":"markdown","cc18eb4c":"markdown","215cd153":"markdown","ecae5ab6":"markdown","884ae83a":"markdown","0cfa7def":"markdown","9e1c4a03":"markdown","d71c78ef":"markdown","d17404e1":"markdown","a0d9bb4c":"markdown","47dc5d8b":"markdown","c59e6e2e":"markdown","725ac0b7":"markdown","cc7529b0":"markdown"},"source":{"9f2dadb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visulaization\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04a9a0ec":"#USED TO CLEAR THE OUTPUT KERNEL\ndef clear():\n    print(\"\\n\"*50)\n\n    \n#CREATES A HATCH BLOCK TO MAKE OUTPUT READABLE    \ndef create_block():\n    print(\"\\n\\n\\n\")\n    print(\"#\"*100)\n    print(\"\\n\\n\\n\")","a6ad1664":"p2_gen = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\np2_wet = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")","b5c0b54a":"def unique_cols(df, cols):\n    \n    l = df[cols].unique()\n    \n    print(\"There are total\",len(l),\"unique\",cols,\"\\n\")\n    print(\"#\"*100,\"\\n\")\n\n    for i in range(len(l)):\n        print(cols,\"NUMBER\",i+1,\":-  \", l[i] )\n        \n###############################################################################################################################################################################        \n###############################################################################################################################################################################  \n###############################################################################################################################################################################  \n\n\ndef column_list_creator(df, DS_name):\n    col_list = df.columns                            #STORING COLUMNS IN LIST DATATYPE\n    print(\"########## Columns In DataSet\", DS_name, \"##########\\n\")   #PRINTING HEADER FOR COLUMNS\n    \n    for i in range(len(col_list)):\n        print(\"#\",i+1,\"...\",col_list[i])        #PRINTING COLUMNS THROUGH ITERATION\n        \n    print(\"\\n\"*5)                          #CLEARING LITTLE SPACE FOR NEXT OUTPUT\n\n    \n    \n###############################################################################################################################################################################  \n###############################################################################################################################################################################  \n###############################################################################################################################################################################  \n\ndef basic_stats(df, col):\n    print(\"#####-----BASIC STATISTICS ON\",col,\"-----#####\\n\\n\")\n    print(\"MAXIMUM \",col,\" IS:- \", df[col].max())\n    print(\"MINIMUM \",col,\" IS:- \", df[col].min())\n    print(\"AVERAGE \",col,\" IS:- \", df[col].mean())\n    create_block()\n\n\n\n###############################################################################################################################################################################  \n###############################################################################################################################################################################  \n###############################################################################################################################################################################  \n        \n\ndef unique_data(df, cols):\n    print(\"\u00dcNIQUE VALUES OCCURENCE IN COLUMN\", cols, \":-\")\n    print(df[cols].value_counts())\n","8e3df4ea":"column_list_creator(p2_gen, \"PLANT_2_GENERATION_DATA\")\ncolumn_list_creator(p2_wet, \"PLANT_2_WEATHER_SENSOR_DATA\")\n","77bbee58":"unique_cols(p2_gen, \"SOURCE_KEY\")","0ff842aa":"basic_stats(p2_gen,'TOTAL_YIELD')\nbasic_stats(p2_gen, 'DAILY_YIELD')\nbasic_stats(p2_gen, 'DC_POWER')\nbasic_stats(p2_gen, 'AC_POWER')\nbasic_stats(p2_wet, 'AMBIENT_TEMPERATURE')\nbasic_stats(p2_wet, 'MODULE_TEMPERATURE')\nbasic_stats(p2_wet, 'IRRADIATION')\n","21cb5f69":"unique_data(p2_gen, \"SOURCE_KEY\")","fd44764d":"print(\"MEAN VALUE OF DAILY YIELD IS:-  \",p2_gen[\"DAILY_YIELD\"].mean())","e82f5295":"#CREATING DATE AND TIME COLUMNS SEPARATELY FOR WEATHER DATA\n\np2_wet['DATE_TIME'] = pd.to_datetime(p2_wet['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')\n\np2_wet['DATE'] = p2_wet['DATE_TIME'].apply(lambda x:x.date())\np2_wet['TIME'] = p2_wet['DATE_TIME'].apply(lambda x:x.time())\n\np2_wet['HOUR'] = pd.to_datetime(p2_wet['TIME'],format='%H:%M:%S').dt.hour\np2_wet['MINUTES'] = pd.to_datetime(p2_wet['TIME'],format='%H:%M:%S').dt.minute\n\n\n\n#CREATING DATE AND TIME COLUMNS SEPARATELY FOR GENERATION DATA\n\np2_gen['DATE_TIME'] = pd.to_datetime(p2_gen['DATE_TIME'],format = '%Y-%m-%d %H:%M:%S')\n\np2_gen['DATE'] = p2_gen['DATE_TIME'].apply(lambda x:x.date())\np2_gen['TIME'] = p2_gen['DATE_TIME'].apply(lambda x:x.time())\n\np2_gen['HOUR'] = pd.to_datetime(p2_gen['TIME'],format='%H:%M:%S').dt.hour\np2_gen['MINUTES'] = pd.to_datetime(p2_gen['TIME'],format='%H:%M:%S').dt.minute\n\n\n\n#GETING NEW COLUMN DATA\np2_gen.info()\nprint(\"\\n\"*5)\np2_wet.info()","9b68fbb9":"p2_wet.groupby('DATE')['IRRADIATION'].sum()","2e3a9b8f":"\n\n\n#PLOTTING GRAPH\nirddiation_sum = p2_wet.groupby('DATE')['IRRADIATION'].sum()    \n\nunique_date = p2_wet[\"DATE\"].unique()\n\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\naxes.plot(unique_date, irddiation_sum)\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"TOTAL IRRADIATION\")\nplt.title(\"TOTAL IRRADIATION PER DAY\")\nplt.show()\n\n\n\n","6c46b614":"print(\"MAXIMUM AMBIENT TEMPERATURE IS\\n\", p2_wet[\"AMBIENT_TEMPERATURE\"].max())\ncreate_block()\nprint(\"MAXIMUM MODULE TEMPERATURE IS\\n\", p2_wet[\"MODULE_TEMPERATURE\"].max())","42737178":"l = p2_gen['PLANT_ID'].unique() # creates a list of all unique plant id\n\nfor i in l:\n    z = p2_gen[p2_gen['PLANT_ID']== i]['SOURCE_KEY'].unique()\n    print(\"NUMBER OF INVERTERS FOR PLANT \", i, \"ARE\", len(z),\":-\\n\\n\")\n    \n    for j in z:\n        print(j)","92674692":"print(\"MAXIMUM DC POWER IN A DAY IS:-\\n \", p2_gen.groupby('DATE')['DC_POWER'].max())\ncreate_block()\nprint(\"MINIMUM DC POWER IN A DAY IS:-\\n \", p2_gen.groupby('DATE')['DC_POWER'].min())\n\n\n\n","81084745":"#PLOTTING GRAPH\nmax_dc_per_day =  p2_gen.groupby('DATE')['DC_POWER'].max()\n\nmin_dc_per_day =  p2_gen.groupby('DATE')['DC_POWER'].min()\n\nunique_date = p2_wet[\"DATE\"].unique()\n\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\naxes.plot(unique_date, max_dc_per_day, color='r', label=\"MAX DC OUTPUT\")\naxes.plot(unique_date, min_dc_per_day, color='b', label=\"MIN DC OUTPUT\")\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"DC POWER\")\nplt.title(\"MAX v\/s MIN DC POWER PER DAY\")\n\nplt.legend(loc=\"upper left\")\n\nplt.show()","cc2806c4":"print(\"MAXIMUM AC POWER IN A DAY IS:-\\n \", p2_gen.groupby('DATE')['AC_POWER'].max())\ncreate_block()\nprint(\"MINIMUM AC POWER IN A DAY IS:-\\n \", p2_gen.groupby('DATE')['AC_POWER'].min())\n","2a40f972":"#PLOTTING GRAPH\nmax_ac_per_day =  p2_gen.groupby('DATE')['AC_POWER'].max()\n\nmin_ac_per_day =  p2_gen.groupby('DATE')['AC_POWER'].min()\n\nunique_date = p2_wet[\"DATE\"].unique()\n\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"AC POWER\")\nplt.title(\"MAX v\/s MIN AC POWER PER DAY\")\n\naxes.plot(unique_date, max_ac_per_day, color='r', label=\"MAXIMUM AC OUTPUT\")\naxes.plot(unique_date, min_ac_per_day, color='b', label=\"MINIMUM AC OUTPUT\")\n\nplt.legend(loc=\"upper left\")\n\nplt.show()","cf59fe21":"max_ac_per_day =  p2_gen.groupby('DATE')['AC_POWER'].max()\n\nmin_dc_per_day =  p2_gen.groupby('DATE')['DC_POWER'].max()\n\nunique_date = p2_wet[\"DATE\"].unique()\n\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"OUTPUT POWER\")\nplt.title(\"MAX DC v\/s AC POWER PER DAY\")\n\naxes.plot(unique_date, max_ac_per_day, color='r', label=\"MAXIMUM AC OUTPUT\")\naxes.plot(unique_date, min_dc_per_day, color='b', label=\"MAXIMUM DC OUTPUT\")\n\nplt.legend(loc=\"upper left\")\n\nplt.show()","4c9566a0":"avg_ac_per_day =  p2_gen.groupby('DATE')['AC_POWER'].mean()\n\navg_dc_per_day =  p2_gen.groupby('DATE')['DC_POWER'].mean()\n\nunique_date = p2_wet[\"DATE\"].unique()\n\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"OUTPUT POWER\")\nplt.title(\"AVERAGE DC v\/s AC POWER PER DAY\")\n\naxes.plot(unique_date, avg_ac_per_day, color='r', label=\"AVERAGE AC OUTPUT\")\naxes.plot(unique_date, avg_dc_per_day, color='b', label=\"AVERAGE DC OUTPUT\")\n\nplt.legend(loc=\"upper left\")\n\nplt.show()","32e57267":"max_dc_inverter = p2_gen[p2_gen['DC_POWER']== p2_gen[\"DC_POWER\"].max()]['SOURCE_KEY']\nprint(\"MAXIMUM DC POWER IS GIVEN BY INVERTER :- \", max_dc_inverter)\n\nprint(\"\\n\"*4)\n\nmax_ac_inverter = p2_gen[p2_gen['AC_POWER']== p2_gen[\"AC_POWER\"].max()]['SOURCE_KEY']\nprint(\"MAXIMUM AC POWER IS GIVEN BY INVERTER :- \", max_ac_inverter)","9dcb989d":"def takeSecond(elem):\n    return elem[1]\n\ninv = p2_gen['SOURCE_KEY'].unique()\nac_inv =  p2_gen.groupby('SOURCE_KEY')['AC_POWER'].mean()\n\np_list=[]\n\nfor i in range(len(inv)):\n     p_list.append([inv[i], ac_inv[i]])\n    \np_list.sort(reverse = True ,key=takeSecond)\n\nprint(\"RANKING INVERTERS BASED ON AC OUTPUT\\n\\n\")\n\nfor i in range(len(p_list)):\n    print(\"RANK\", i+1, \":- ##\",p_list[i][0], \"## AVERAGE AC OUPUT IS:-\", p_list[i][1], \"\\n\" )","9e0c2d87":"def takeSecond(elem):\n    return elem[1]\n\ninv = p2_gen['SOURCE_KEY'].unique()\ndc_inv =  p2_gen.groupby('SOURCE_KEY')['DC_POWER'].mean()\n\np_list=[]\n\nfor i in range(len(inv)):\n     p_list.append([inv[i], dc_inv[i]])\n    \np_list.sort(reverse = True ,key=takeSecond)\n\nprint(\"RANKING INVERTERS BASED ON DC OUTPUT\\n\\n\")\n\nfor i in range(len(p_list)):\n    print(\"RANK\", i+1, \":- ##\",p_list[i][0], \"## AVERAGE DC OUPUT IS:-\", p_list[i][1], \"\\n\" )","3bbc6924":"print(\"Ideally 22 Inverters are working for 24 hours(1 day), and we are getting data every 15 min(i.e. 4 times per hour)\")\n\nprint(\"Hence we can say ideally there are\",22*24*4,\"number of data everyday\")","b49ab2f5":"print(\"This is the data collected per day:-\\n\\n\")\np2_gen['DATE'].value_counts().sort_index()\n","0121f1af":"print(\"Now i will plot the graph for number of data per day\\n\")\nprint(\"And there will be one particular line which corresponds to the ideal data per day\")","d246ce62":"\ndata_per_day = p2_gen['DATE'].value_counts().sort_index()\n\nunique_date = p2_gen[\"DATE\"].unique()\n\nideal_data = []\n#CREATING IDEAL DATA LIST\nfor i in range(len(unique_date)):\n    ideal_data.append(22*24*4)\n\nfig= plt.figure(figsize=(16,9))\n\naxes= fig.add_axes([0.1,0.1,0.8,0.8])\n\nplt.xlabel(\"DATE\")\nplt.ylabel(\"NUMBER OF DATA\")\nplt.title(\"AVERAGE DATA PER DAY\")\n\naxes.plot(unique_date, data_per_day, color='r', label=\"DATA PER DAY\")\naxes.plot(unique_date,ideal_data , color='b', label=\"IDEAL DATA PER DAY\")\n\nplt.legend(loc=\"lower right\")\n\nplt.show()","ea6a7ce6":"# 6.What is the total irradiation per day?","c50a4bc7":"# COMMOM FUNCTIONS ","c414b560":"#GETTING ALL COLUMNS OF BOTH FILES FOR PLANT 1","b9d1a671":"MAXIMUM DC POWER vs MINIMUM DC POWER DATA","d96fe617":"GRAPH FOR MAX AC POWER VS MIN AC POWER","0d289951":"RANKING ON BASE OF AC OUTPUT","fe3643dd":"# **Task Details**\n1. Load the data from the CSV files\n2. Explore each dataset - columns, counts, basic stats\n3. Understand the domain context and explore underlying patterns in the data\n4. Explore the data and try to answer questions like -\n5. What is the mean value of daily yield?\n6. What is the total irradiation per day?\n7. What is the max ambient and module temperature?\n8. How many inverters are there for each plant?\n9. What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n10. Which inverter (source_key) has produced maximum DC\/AC power?\n11. Rank the inverters based on the DC\/AC power they produce\n12. Is there any missing data?\n13. You might have to pre-process the data to allow for some of the analysis (hint: date and time)\n\nExpected Submission\nSubmit your notebook with all your work.\nEvaluation\nYou will be evaluated on how detailed and comprehensive is your exploration.","2329b3a1":"# 9.What is the maximum\/minimum amount of DC\/AC Power generated in a time day?","b02e2d2b":"# 11.Rank the inverters based on the DC\/AC power they produce","58245334":"# 1.LOADING DATA FROM .csv FILES","cb0fad4a":"# 7.MAXIMUM AMBIENT & MODULE TEMPERATURE","5f93d741":"# GETTING UNIQUE DATA COUNTS","edb7283d":"# 5.What is the mean value of daily yield?","cc18eb4c":"RANKING ON BASE OF DC OUTPUT","215cd153":"# GETTING UNIQUE INVERTERS","ecae5ab6":"MAXIMUM AC POWER VS MINIMUM AC POWER","884ae83a":"# Is there any missing data?","0cfa7def":"# CREATING DATE, TIME,HOURS & MINUTES COLUMN SEPARATELY","9e1c4a03":"# 8.HOW MANY INVERTERS ARE THERE FOR EACH PLANT","d71c78ef":"MAXIMUM DC POWER vs MINIMUM DC POWER GRAPH","d17404e1":"# BASIC STATS.. MEAN, MAX, MIN FOR DIFFERENT COLUMNS","a0d9bb4c":"# 10. Which inverter (source_key) has produced maximum DC\/AC power?","47dc5d8b":"Average DC v\/s AC output per day","c59e6e2e":"MAXIMUM AC v\/s DC Output per day","725ac0b7":"# MULTIPURPOSE FUNCTIONS","cc7529b0":"# 2. EXPLORING DATASETS"}}