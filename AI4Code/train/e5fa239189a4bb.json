{"cell_type":{"d509b17b":"code","765035eb":"code","4e89ee8c":"code","c8261699":"code","492555ec":"code","34314fb2":"code","ddce4dcd":"code","31259795":"code","93074dcc":"code","db233551":"code","14fda9a0":"code","8edab1c4":"code","ae299c24":"code","61cdee5e":"code","0baec1b4":"code","7498d2a1":"code","e406d4ed":"code","8b40e39f":"code","c5077eaa":"code","0463ac35":"code","56fa729d":"code","200b47b5":"code","b06e1b55":"code","2e09e33c":"code","7e720704":"code","56c4d0fd":"code","582ef6b1":"code","255b5895":"code","65d67f03":"code","42fe395b":"code","0cca11e4":"code","1e763b33":"code","cc5f31b6":"code","39747c8d":"code","d446c875":"code","9335d86e":"code","4c9cff25":"code","10b24372":"code","1d54a146":"markdown","1baaa176":"markdown","ed7f012c":"markdown","94ca6491":"markdown","4ae98868":"markdown","7ee75d63":"markdown","5c76499a":"markdown","cc367ab6":"markdown","38c799a8":"markdown","e7896bff":"markdown","645f597a":"markdown","41935ae6":"markdown","70d3db88":"markdown","52a5ccf5":"markdown","0c296eb6":"markdown","1b7e5b19":"markdown","49b9b2bb":"markdown","69f204b3":"markdown","20823f6d":"markdown"},"source":{"d509b17b":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","765035eb":"import pandas as pd\nimport numpy as np","4e89ee8c":"# Importing Housing.csv\nhousing = pd.read_csv('..\/input\/Housing.csv')","c8261699":"# Looking at the first five rows\nhousing.head()","492555ec":"# List of variables to map\n\nvarlist =  ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'yes': 1, \"no\": 0})\n\n# Applying the function to the housing list\nhousing[varlist] = housing[varlist].apply(binary_map)","34314fb2":"# Check the housing dataframe now\n\nhousing.head()","ddce4dcd":"# Get the dummy variables for the feature 'furnishingstatus' and store it in a new variable - 'status'\n\nstatus = pd.get_dummies(housing['furnishingstatus'])\n\n# Check what the dataset 'status' looks like\nstatus.head()","31259795":"# Let's drop the first column from status df using 'drop_first = True'\nstatus = pd.get_dummies(housing['furnishingstatus'], drop_first = True)\n\n# Add the results to the original housing dataframe\nhousing = pd.concat([housing, status], axis = 1)\n\n# Now let's see the head of our dataframe.\nhousing.head()","93074dcc":"# Drop 'furnishingstatus' as we have created the dummies for it\nhousing.drop(['furnishingstatus'], axis = 1, inplace = True)\n\nhousing.head()","db233551":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\n\ndf_train, df_test = train_test_split(housing, train_size = 0.7, test_size = 0.3, random_state = 100)","14fda9a0":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","8edab1c4":"# Apply scaler() to all the columns except the 'yes-no' and 'dummy' variables\nnum_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n\ndf_train.head()","ae299c24":"y_train = df_train.pop('price')\nX_train = df_train","61cdee5e":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","0baec1b4":"# Running RFE with the output number of the variable equal to 10\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)             # running RFE\nrfe = rfe.fit(X_train, y_train)","7498d2a1":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","e406d4ed":"col = X_train.columns[rfe.support_]\ncol","8b40e39f":"X_train.columns[~rfe.support_]","c5077eaa":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","0463ac35":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)","56fa729d":"lm = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","200b47b5":"#Let's see the summary of our linear model\nprint(lm.summary())","b06e1b55":"X_train_new = X_train_rfe.drop([\"bedrooms\"], axis = 1)","2e09e33c":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train_lm = sm.add_constant(X_train_new)","7e720704":"lm = sm.OLS(y_train,X_train_lm).fit()   # Running the linear model","56c4d0fd":"#Let's see the summary of our linear model\nprint(lm.summary())","582ef6b1":"X_train_new.columns","255b5895":"X_train_new = X_train_new.drop(['const'], axis=1)","65d67f03":"# Calculate the VIFs for the new model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","42fe395b":"y_train_price = lm.predict(X_train_lm)","0cca11e4":"# Importing the required libraries for plots.\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1e763b33":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","cc5f31b6":"num_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","39747c8d":"y_test = df_test.pop('price')\nX_test = df_test","d446c875":"# Now let's use our model to make predictions.\n\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","9335d86e":"# Making predictions\ny_pred = lm.predict(X_test_new)","4c9cff25":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)                          # Y-label","10b24372":"lm.params","1d54a146":"## Model Selection using RFE (Housing Case Study)","1baaa176":"#### Applying the scaling on the test sets","ed7f012c":"### RFE\nRecursive feature elimination","94ca6491":"### Importing and Understanding Data","4ae98868":"### Rescaling the Features \n\nWe will use MinMax scaling.","7ee75d63":"## Splitting the Data into Training and Testing Sets","5c76499a":"## Building our model\n\nThis time, we will be using the **LinearRegression function from SciKit Learn** for its compatibility with RFE (which is a utility from sklearn)","cc367ab6":"### Dividing into X and Y sets for the model building","38c799a8":"`Bedrooms` is insignificant in presence of other variables; can be dropped","e7896bff":"### Building model using statsmodel, for the detailed statistics","645f597a":"The variable `furnishingstatus` has three levels. We need to convert these levels into integer as well. For this, we will use something called `dummy variables`.","41935ae6":"#### Dividing into X_test and y_test","70d3db88":"### Data Preparation","52a5ccf5":"Rebuilding the model without `bedrooms`","0c296eb6":"## Making Predictions","1b7e5b19":"### Dummy Variables","49b9b2bb":"Now, you don't need three columns. You can drop the `furnished` column, as the type of furnishing can be identified with just the last two columns where \u2014 \n- `00` will correspond to `furnished`\n- `01` will correspond to `unfurnished`\n- `10` will correspond to `semi-furnished`","69f204b3":"## Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","20823f6d":"## Model Evaluation"}}