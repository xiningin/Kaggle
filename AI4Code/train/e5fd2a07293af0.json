{"cell_type":{"2c07fe5c":"code","8d191912":"code","60e094ba":"code","7770062b":"code","b05f92ae":"code","90ed0945":"code","cf86b9b1":"code","4338d3cd":"code","553b3bd3":"code","18c00c30":"code","e7e39f29":"code","f80dfbfe":"code","a7da0fba":"code","0a7a173c":"code","0fcf8ceb":"code","3581eeea":"code","f2a70394":"code","b67188b6":"code","c6b2bdac":"code","393215a5":"code","754ddb03":"code","f450460d":"code","ffcc480e":"code","4825555e":"markdown","ea6a352f":"markdown","044bc8c6":"markdown","8208617d":"markdown","de2f82bf":"markdown","af125c50":"markdown","d6b34aa4":"markdown","c31085db":"markdown","dabc2ac7":"markdown","aac9a7b2":"markdown","a6579979":"markdown","11171df6":"markdown","58e6485a":"markdown","d7bf9535":"markdown","d1ebca23":"markdown","6ac114c4":"markdown"},"source":{"2c07fe5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d191912":"import pandas as pd\nimport numpy as np;\nimport matplotlib.pyplot as plt;\nimport seaborn as sns;\nfrom sklearn.impute import SimpleImputer;\nfrom sklearn.compose import ColumnTransformer;\nfrom sklearn.pipeline import Pipeline;\nfrom sklearn.preprocessing import LabelEncoder;\nfrom sklearn.preprocessing import StandardScaler;\nfrom sklearn.preprocessing import MinMaxScaler;\nfrom sklearn.model_selection import train_test_split;\nfrom sklearn.linear_model import LinearRegression ;\nfrom sklearn.linear_model import Ridge, Lasso;\nfrom sklearn.metrics import mean_squared_error;\nfrom sklearn.metrics import r2_score;\nfrom sklearn.preprocessing import PolynomialFeatures;\nfrom sklearn.svm import SVR;\nfrom sklearn.svm import SVC;\nfrom sklearn.tree import DecisionTreeClassifier;\nfrom sklearn.ensemble import RandomForestClassifier;\nfrom sklearn.ensemble import RandomForestRegressor;\nfrom sklearn.neighbors import KNeighborsClassifier;\nfrom sklearn.naive_bayes import GaussianNB;\nimport pickle;","60e094ba":"data = pd.read_csv('..\/input\/indian-food-101\/indian_food.csv')","7770062b":"data.head(30)","b05f92ae":"data.isnull().sum()\/data.shape[0]*100","90ed0945":"data = data.dropna()","cf86b9b1":"data.head(20)","4338d3cd":"data = data.replace(to_replace = '-1', method = 'ffill')","553b3bd3":"data.head(30)","18c00c30":"data = data.replace(to_replace = -1, method = 'ffill')","e7e39f29":"data.head(30)","f80dfbfe":"data['diet'].unique()","a7da0fba":"plt.figure(figsize = (16,9))\ndf_diet_type = data.diet.value_counts().reset_index()\nplt.pie(df_diet_type.diet, labels = df_diet_type['index'],autopct='%1.1f%%')\nplt.title(\"Vegetarian vs Non-Vegetarian recipes in dataset\")\nplt.show()\n\n#plt.show()","0a7a173c":"data['course'].unique()","0fcf8ceb":"plt.figure(figsize = (20,10))\n\ncourse = data.groupby('course').size().to_frame(name = \"count\").reset_index()\nsns.barplot(x = 'count', y='course', data = course )\n\nplt.title(\"Type of Course\")\nplt.ylabel(\"course\")\nplt.xlabel(\"Count\")\n\nplt.show()","3581eeea":"data['flavor_profile'].unique()","f2a70394":"plt.figure(figsize = (16,9))\n\nflavor = data.groupby('flavor_profile').size().to_frame(name = \"count\").reset_index()\nsns.barplot(x = 'count', y='flavor_profile', data = flavor )\n#sub_index = np.arange(len(flavor))\n\nplt.title(\"Type of Flavors\")\nplt.ylabel(\"Flavor Profile\")\nplt.xlabel(\"Count\")\n\nplt.show()","b67188b6":"data['region'].unique()","c6b2bdac":"plt.figure(figsize = (16,9))\n\nregion = data.groupby('region').size().to_frame(name = \"count\").reset_index()\nsns.barplot(x = 'count', y='region', data = region )\n\nplt.title(\"Foods Belonging to Different Regions\")\nplt.ylabel(\"Region\")\nplt.xlabel(\"Count\")\n\nplt.show()","393215a5":"data['state'].unique()","754ddb03":"plt.figure(figsize = (20,10))\n\nstate = data.groupby('state').size().to_frame(name = \"count\").reset_index()\nsns.barplot(x = 'count', y='state', data = state )\n\nplt.title(\"Foods Belonging to Different States\")\nplt.ylabel(\"State\")\nplt.xlabel(\"Count\")\n\nplt.show()","f450460d":"data['cook_time'].unique()","ffcc480e":"plt.figure(figsize = (16,9))\n\ndf_cook_time = (data.prep_time + data.cook_time).to_frame('total_time').reset_index()\nplt.hist(df_cook_time['total_time'],np.arange(5,150,10), rwidth = 0.9)\n\nplt.title(\"Cooking time\")\nplt.ylabel(\"Number of recipes\")\nplt.xlabel(\"Time in minutes\")\n\nplt.show()\n\n","4825555e":"# **Hmm. Looks nice. Are there any null values? Let us check**","ea6a352f":"# **Haah!Very Few. We can easily drop them. It will not impact the datasets**","044bc8c6":"# **Hah! PANJABIS! Balle balle!!\n# \n# We Indians spend an imense amount of time in cooking. But are all dishes like that? Let us check**","8208617d":"# **Nope. Thats not true. Surely some of our dishes take more time. But the average time limit is less than a hour. \n# \n# It was really nice exploruing the data. Specially when that is about this incredible region. Hope YOU enjoyed as well**","de2f82bf":"# **Nice. Let us look at our data again.**","af125c50":"# **Now the data looks perfect. We can now start to visualize our data**","d6b34aa4":"# **Great. People liking the main course pretty much. \n# \n# Let us have a look at the flavor section now**","c31085db":"# **West is winning. :D\n# \n# How about the states? Which state seems to be more foody?**","dabc2ac7":"# **There are still some -1 values. But we just replaced them. Why they are still in our dataframe?\n# \n# Humm. Looks like we have only replaced the strings. We now need to replace the int values as well**","aac9a7b2":"# **Wait! There are some -1 values. What to do? \n# \n# I guess we can replace them.**","a6579979":"# **Yeah! Surely we like spices. Thats why, we really dont enjoy arab or traditional europian meals. ;) \n# \n# How about the regions?**","11171df6":"# * **Let us start with the diet section**","58e6485a":"# **How does the data look? Wanna Explore?**","d7bf9535":"# **Haha HUge! Looks like everyone is becoming vegetarian these days. \n# \n# Next, let us explore the cuisine section**","d1ebca23":"# **Let us import the data**","6ac114c4":"# **Let us import the libraries first**"}}