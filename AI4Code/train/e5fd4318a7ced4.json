{"cell_type":{"99daef55":"code","9274c61e":"code","dde51493":"code","ba289205":"code","65fb8272":"code","c97c2b9b":"code","deeb2970":"code","3ad73b1a":"markdown","46f18212":"markdown","d7d9c58d":"markdown","3b69ca1d":"markdown","9cc4450e":"markdown"},"source":{"99daef55":"import numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\nfrom keras import optimizers\nimport math\nimport seaborn as sns","9274c61e":"x = np.linspace(-10, 10, 100)\ny = np.cos(x)\nplt.plot(x,y)\nplt.show()","dde51493":"model = Sequential()\nmodel.add(Dense(30, input_shape=(1,), activation='relu'))\nmodel.add(Dense(30, input_shape=(1,), activation='relu'))\nmodel.add(Dense(30, input_shape=(1,), activation='relu'))\nmodel.add(Dense(1, activation='linear'))\nada = optimizers.Adam(lr=0.01)\nmodel.compile(loss='mean_squared_error', optimizer=ada, metrics=['mean_squared_error'])\nmodel.fit(x, y, epochs=100, verbose=0)","ba289205":"x = np.linspace(-10, 10, 100)\ny = np.cos(x)\nprediction = model.predict(x)\nplt.plot(x, y) \nplt.plot(x, prediction)\nplt.show()","65fb8272":"x = np.linspace(-20, 20, 200)\ny = np.cos(x)\nprediction = model.predict(x)\nplt.plot(x, y)\nplt.plot(x, prediction)\nplt.show()","c97c2b9b":"x = np.linspace(-10, 10, 100)\ny = np.cos(x)\n\nfrom keras import regularizers\nmodel = Sequential()\nmodel.add(Dense(30, input_shape=(1,), activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(Dense(30, input_shape=(1,), activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(Dense(30, input_shape=(1,), activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(Dense(30, input_shape=(1,), activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nmodel.add(Dense(1, activation='linear'))\nada = optimizers.Adam(lr=0.01)\nmodel.compile(loss='mean_squared_error', optimizer=ada, metrics=['mean_squared_error'])\nmodel.fit(x, y, epochs=100, verbose=0)","deeb2970":"x = np.linspace(-20, 20, 200)\ny = np.cos(x)\nprediction = model.predict(x)\nplt.plot(x, y)\nplt.plot(x, prediction)\nplt.show()","3ad73b1a":"## Regularize model\nI applied L2 Regularization method for generalizaing model, but It doesn't help. It just decayed weights, but was not able to learn periodic pattern.","46f18212":"## Prediction on unseen data\nBut the problem was they can't generalize on unseen data","d7d9c58d":"## The function that neural net try to approximate","3b69ca1d":"## Multi-layer perceptron","9cc4450e":"Multi-layer perceptron almost perfetly predicted data that they already learned."}}