{"cell_type":{"2cb8d588":"code","c3df7bc1":"code","f4276818":"code","471d6e1c":"code","2e18974e":"code","6c415039":"code","0f15653a":"code","41abbec0":"code","ddd6ffcc":"code","3b4f49de":"code","7cc57346":"code","f6f75c81":"code","610767b0":"code","46c7dbfd":"code","bbd00180":"code","b07e1feb":"code","28fb1fdb":"code","072084e7":"code","84439768":"code","ed20bcf0":"code","b66f6a7c":"code","36eba0d0":"code","8882afef":"code","5cb169a5":"code","c3b78c35":"code","f13a5232":"code","2b39d334":"code","38293571":"code","1a350f2d":"code","0c456807":"code","940c3cc0":"code","896b1c30":"code","cb472eda":"code","ae2902a9":"code","45cd0df5":"code","c5c0bdae":"code","5de2ee1c":"code","d864b3fa":"markdown","de7184f6":"markdown","706fe407":"markdown","60f48240":"markdown","038b7e48":"markdown","bc6d6137":"markdown","343dfab1":"markdown","ab098dda":"markdown","1d1bab18":"markdown","85079e2a":"markdown","1940f380":"markdown","eb7b1bde":"markdown","49a0981e":"markdown","50ecebf8":"markdown","14b5412c":"markdown","03029d57":"markdown","219e523b":"markdown","b60bff9f":"markdown","fcc188d8":"markdown","4b61f868":"markdown","eb7da615":"markdown","f8f47d4d":"markdown","39c992fc":"markdown","0165bbb3":"markdown","f0720b58":"markdown","56051898":"markdown","bb6cbd90":"markdown","02cf7efd":"markdown","de65acec":"markdown"},"source":{"2cb8d588":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA","c3df7bc1":"elecom = pd.read_csv('..\/input\/electric-production\/Electric_Production.csv')","f4276818":"elecom.head(5)","471d6e1c":"elecom.tail(5)","2e18974e":"elecom.shape","6c415039":"elecom.info()","0f15653a":"from datetime import datetime\nelecom['DATE']=pd.to_datetime(elecom['DATE'],infer_datetime_format=True)","41abbec0":"elecom.info()","ddd6ffcc":"elecomind = elecom.set_index('DATE',inplace=False)","3b4f49de":"elecomind.head()\n","7cc57346":"plt.figure(figsize=(10,5))\nplt.xlabel('Date')\nplt.ylabel('Electric Power Consumption')\nplt.plot(elecomind)","f6f75c81":"def test_stationarity(timeseries):\n    \n    #Determine rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    #Plot rolling statistics\n    plt.figure(figsize=(10,5))\n    plt.plot(timeseries, color='blue', label='Original')\n    plt.plot(movingAverage, color='red', label='Rolling Mean')\n    plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey\u2013Fuller test:\n    print('Results of Dickey Fuller Test:')\n    elecom_test = adfuller(timeseries['Value'], autolag='AIC')\n    dfoutput = pd.Series(elecom_test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in elecom_test[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","610767b0":"test_stationarity(elecomind)","46c7dbfd":"elecom_log = np.log(elecomind)","bbd00180":"plt.figure(figsize=(10,5))\nplt.xlabel('Date')\nplt.ylabel('Electric Power Consumption')\nplt.plot(elecom_log)","b07e1feb":"rollmean_log = elecom_log.rolling(window=12).mean()\nrollstd_log = elecom_log.rolling(window=12).std()","28fb1fdb":"plt.figure(figsize=(10,5))\nplt.plot(elecom_log, color='blue', label='Original')\nplt.plot(rollmean_log, color='red', label='Rolling Mean')\nplt.plot(rollstd_log, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation (Logarithmic Scale)')","072084e7":"elecom_new = elecom_log - rollmean_log","84439768":"elecom_new.head()\n","ed20bcf0":"elecom_new.dropna(inplace=True)","b66f6a7c":"elecom_new.head()","36eba0d0":"test_stationarity(elecom_new)","8882afef":"elecom_log_diff = elecom_log - elecom_log.shift()\nplt.figure(figsize=(10,5))\nplt.plot(elecom_log_diff)","5cb169a5":"elecom_log_diff.dropna(inplace=True)\nplt.figure(figsize=(10,5))\nplt.plot(elecom_log_diff)","c3b78c35":"test_stationarity(elecom_log_diff)\n","f13a5232":"decomposition = seasonal_decompose(elecom_log)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.figure(figsize=(10,5))\nplt.subplot(411)\nplt.plot(elecom_log, label='Original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\n\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","2b39d334":"elecom_decompose = residual\nelecom_decompose.dropna(inplace=True)","38293571":"rollmean_decompose = elecom_decompose.rolling(window=12).mean()\nrollstd_decompose = elecom_decompose.rolling(window=12).std()\n\nplt.figure(figsize=(10,5))\nplt.plot(elecom_decompose, color='blue', label='Original')\nplt.plot(rollmean_decompose, color='red', label='Rolling Mean')\nplt.plot(rollstd_decompose, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')","1a350f2d":"lag_acf = acf(elecom_log_diff, nlags=20)\nlag_pacf = pacf(elecom_log_diff, nlags=20, method='ols')","0c456807":"#Plot ACF:\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(elecom_log_diff)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(elecom_log_diff)), linestyle='--', color='gray')\nplt.title('Autocorrelation Function')            \n\n#Plot PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(elecom_log_diff)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(elecom_log_diff)), linestyle='--', color='gray')\nplt.title('Partial Autocorrelation Function')\n            \nplt.tight_layout()","940c3cc0":"model = ARIMA(elecom_log, order=(3,1,3))\nplt.figure(figsize=(10,5))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(elecom_log_diff)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'%sum((results_ARIMA.fittedvalues - elecom_log_diff['Value'])**2))\nprint('Plotting ARIMA model')","896b1c30":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\npredictions_ARIMA_diff.head()","cb472eda":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_diff_cumsum.head()","ae2902a9":"predictions_ARIMA_log = pd.Series(elecom_log['Value'].iloc[0], index=elecom_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","45cd0df5":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.figure(figsize=(10,5))\nplt.plot(elecomind)\nplt.plot(predictions_ARIMA)","c5c0bdae":"elecom_log.head()","5de2ee1c":"elecom_log.shape","d864b3fa":"\n\nARIMA Model - 0.5227\n\nWith the ARIMA model built, we will now generate predictions. But, before we do any plots for predictions ,we need to reconvert the predictions back to original form. This is because, our model was built on log transformed data.","de7184f6":"**ARIMA Model**\n\nMaking order = (3,1,3)","706fe407":"From above plot, we can see that Rolling Mean itself has a trend component even though Rolling Standard Deviation is fairly constant with time.\n\nFor time series to be stationary, we need to ensure that both Rolling Mean and Rolling Standard Deviation remain fairly constant WRT time.\n\nBoth the curves needs to be parallel to X-Axis, in our case it is not so.\n\nWe've also conducted the ADCF ie Augmented Dickey Fuller Test. Having the Null Hypothesis to be Time Series is Non Stationary.\n\nFor a Time series to be stationary, the ADCF test should have:\n\n1-p-value should be low (according to the null hypothesis)\n\n2-The critical values at 1%,5%,10% confidence intervals should be as close as possible to the Test Statistics From the above ADCF test result, we can see that p-value(near to 0.18) is very large. Also critical values lower than Test Statistics. Hence, we can safely say that our Time Series at the moment is NOT STATIONARY","60f48240":"Let's determine & plot rolling statistics.","038b7e48":"**Prediction & Reverse Transformation**","bc6d6137":"**Inverse of log is exp**","343dfab1":"Now, we will need to index DATE column.","ab098dda":"Plotting ACF & PACF","1d1bab18":"From above graph we can say that, we slightly bettered our previous results. Now, we are heading into the right direction.\n\nFrom the above graph, Time series with log scale as well as Rolling Mean(moving avg) both have the trend component. Thus subtracting one from the other should remove the trend component.\n\nR (result) = Time Series Log Scale - Rolling Mean Log Scale -> this can be our final non trend curve.","85079e2a":"Loading the basic libraries","1940f380":"Working on Rolling stats seperately (not using function) because we would need Rolling stats separately for computing","eb7b1bde":"From the above plot, we can see that there is a Trend compoenent in the series. Hence, we now check for stationarity of the data.","49a0981e":"Let's plot the data","50ecebf8":"From above plot, we can see that, visually this is the very best result as our series along with rolling stats values of moving avg(mean) & moving standard deviation is very much flat & stationary.\n\nLet us now break down the 3 components of the log scale series using a system libary function. Once, we separate our the components, we can simply ignore trend & seasonality and check on the nature of the residual part.","14b5412c":"Let's determine & plot rolling statistics.","03029d57":"From the ACF graph, we can see that curve touches y=0.0 line at x=2. Thus, from theory, Q = 3 From the PACF graph, we see that curve touches y=0.0 line at x=2. Thus, from theory, P = 3\n\n(from the above graphs the p and q values are very close to 3 where the graph cuts off the origin)\n\nARIMA is AR + I + MA. Before, we see an ARIMA model, let us check the results of the individual AR & MA model. Note that, these models will give a value of RSS. Lower the RSS values indicates a better model.","219e523b":"Data Transformation To Achieve Stationarity\nNow, we will have to perform some data transformation to achieve Stationarity. We can perform any of the transformations like taking log scale, square, square root, cube, cube root, time shift, exponential decay, etc.\n\nLet's perform Log Transformation.\n\nBasically we need to remove the trend component.","b60bff9f":"Loading Electric Production data set","fcc188d8":"There can be cases where an observation simply consist of trend & seasonality. In that case, there won't be any residual component & that would be a null or NaN. Hence, we also remove such cases.","4b61f868":"From the above plot, we came to know that \"indeed subtracting two related series having similar trend components actually removed trend and made the dataset stationary\"\n\nAlso, after concluding the results from ADFC test, we can now say that given series is now STATIONARY","eb7da615":"Time Shift Transformation","f8f47d4d":"There are 397 records in datasets and 2 columns. There are no null records present. But, look at the DATE column. We need to convert them in to datetime datatype.","39c992fc":"Let's make one function consisting of stationary data checking and ADCF test working. Because we will need to repeat the steps many times, therefore, making function will become very handy.","0165bbb3":"#                                **Electricity Consumption Using Time Series Analysis**","f0720b58":"Let's check first 5 and last 5 records of data set","56051898":"Let's determine & plot rolling statistics.","bb6cbd90":"\n\n![](https:\/\/media.istockphoto.com\/photos\/power-lines-picture-id1162866631?k=6&m=1162866631&s=612x612&w=0&h=sewQVJT9jWzB2Rn7ShC_yHC9DiBFrjyJufjg9U0QZKg=)\n","02cf7efd":"From above plot, we can see that our predicted forecasts are very close to the real time series values. It also indicates a fairly accurate model.","de65acec":"# THANK YOU ;)"}}