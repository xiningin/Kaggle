{"cell_type":{"28c664c0":"code","589cca21":"code","8ef3ce6e":"code","5b7711c3":"code","f72257e6":"code","74ba279c":"code","d749cbb4":"code","488bbe34":"code","67680147":"code","8fb77130":"code","e0d9ac59":"code","22c3da14":"code","4a47f798":"code","2756b803":"code","b8f97386":"code","fa817baa":"code","8ccf9b88":"code","3555a552":"code","9ccb890f":"code","556c6988":"code","6f7efc4a":"code","9fd065ee":"code","6672b4e8":"code","6d180002":"code","ce043f13":"code","c4076740":"code","f792aad9":"code","be249c2c":"code","643a231c":"code","733ea964":"code","7ac79236":"code","ecf6d696":"code","e3a1d740":"code","4abf77ad":"code","021039a9":"code","fa4effdd":"code","17e7d386":"markdown","c4c66228":"markdown","c8eec9e3":"markdown","4536923d":"markdown","5335a797":"markdown","c42dd216":"markdown","dcea990c":"markdown","f8cd5a42":"markdown","70fb64b1":"markdown","86052107":"markdown"},"source":{"28c664c0":"# importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","589cca21":"data = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/train.csv\")\ndf = pd.DataFrame(data)","8ef3ce6e":"df.head()","5b7711c3":"df.describe()\n","f72257e6":"col = df.columns  #getting list of column names","74ba279c":"# showing column wise %ge of NaN values they contains \n\nfor i in col:\n  print(i,\"\\t-\\t\", df[i].isna().mean()*100)\n","d749cbb4":"num_df = df.select_dtypes(exclude=['object'])\ncat_df= df.drop(num_df, axis=1)","488bbe34":"num_df.head()","67680147":"num_df.describe()","8fb77130":"num_df = num_df.drop([\"id\"], axis = 1)   #Since Id does not has any role in price prediction of houses","e0d9ac59":"cormap = num_df.corr()\nfig, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(cormap, annot = True)","22c3da14":"cat_df.head()","4a47f798":"cat_df.describe()","2756b803":"from sklearn.preprocessing import LabelEncoder\n\ncat_col = cat_df.columns\nfor i in cat_col:\n  enc = LabelEncoder()\n  cat_df[i] = enc.fit_transform(cat_df[i].astype('str'))","b8f97386":"cat_df.head()\n","fa817baa":"cat_df['target'] = df['target']  # to get coreltion with target attribute","8ccf9b88":"cormat = cat_df.corr()\nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(cormat, annot = True)","3555a552":"final_df = pd.concat([ cat_df.drop(['target'], axis=1), num_df], axis = 1, sort=False)\nfinal_df.head()","9ccb890f":"X = final_df.drop(['target'], axis=1)\ny = final_df['target']","556c6988":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","6f7efc4a":"print(X.shape, y.shape)","9fd065ee":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","6672b4e8":"import xgboost as xgb\nreg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.3, learning_rate = 0.08 ,max_depth = 4, n_estimators = 500, )","6d180002":"reg.fit(X_train, y_train)","ce043f13":"# Prediction\n\ny_pred = reg.predict(X_test)\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()","c4076740":"#Evaluating the Model\n\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","f792aad9":"# Here we ready the Test Data\ntest_data = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2021\/test.csv\")\ntest_df = pd.DataFrame(test_data)\ntest_df.head()","be249c2c":"num_test_df = test_df.select_dtypes(exclude=['object'])\ncat_test_df= test_df.drop(num_test_df, axis=1)","643a231c":"Id = num_test_df['id']\nnum_test_df = num_test_df.drop([\"id\"], axis = 1)","733ea964":"# Let's Encode the test categorical dataset also\n\nfor i in cat_test_df.columns:\n    enc = LabelEncoder()\n    cat_test_df[i] = enc.fit_transform(cat_test_df[i].astype('str'))\n\ncat_test_df.head()","7ac79236":"final_test_df = pd.concat([ cat_test_df, num_test_df], axis = 1, sort=False)\nfinal_test_df.head()","ecf6d696":"X = pd.DataFrame(scaler.transform(final_test_df), columns=final_test_df.columns)\nX.head()","e3a1d740":"Y_pred = reg.predict(X)","4abf77ad":"final_df = pd.DataFrame({'id': Id, 'target': Y_pred})","021039a9":"final_df.head()","fa4effdd":"final_df.to_csv('.\/submission.csv', index=False)","17e7d386":"> Since range of data in different columns veries significantly we need to scale the independent variable i.e. X. For this we will use _Min-Max Scaling_.\n","c4c66228":"### XGBoost","c8eec9e3":"> Let's first encode the categorical data into numerical for futher analysis","4536923d":"> Since data does'nt contain any null values, we can move further","5335a797":"### Data Information","c42dd216":"> Now let's analyse the categorical part of dataset.\n\n","dcea990c":"*****","f8cd5a42":"> Since the given dataset contains both categorical and numerical dataset we have to separate them for further analysis. ","70fb64b1":"> As we can see that the value of root mean squared error is 0.844, which is slightly lesser than 12% of the mean value.","86052107":"> Now start analysis with numerical data."}}