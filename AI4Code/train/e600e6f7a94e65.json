{"cell_type":{"66aa9e18":"code","2f5e892a":"code","a854947e":"code","72f5fd52":"code","b983cf79":"code","c8a3c809":"code","74675593":"code","f8cd90d3":"code","263b7165":"code","eacccebf":"code","2ddc2a36":"code","40754c2e":"code","ae3dfcad":"code","a74c0f6c":"code","05079024":"code","a442df96":"code","4cb2bfb0":"code","4127c7a5":"code","9258ab45":"code","6b06b729":"code","564c44ab":"code","e82837a2":"code","53d5f026":"code","5be9759e":"code","d1f07121":"code","ed43561a":"code","1ee6f512":"markdown","19e452a1":"markdown","b2c12685":"markdown","090106db":"markdown"},"source":{"66aa9e18":"import numpy as np\nimport folium\nimport pandas as pd\nimport time\n","2f5e892a":"#create a data frame \nstats = pd.read_csv('..\/input\/nflstatistics\/Basic_Stats.csv')","a854947e":"#understand the dimensions of our data\nstats.shape","72f5fd52":"# print out the first 10 rows\nstats.head(10)","b983cf79":"#determine the number of missing values for each column\nstats.isna().sum()","c8a3c809":"stats_dropna = stats.replace('', np.nan)\nstats_clean = stats_dropna.dropna(subset=['Birth Place'], how = 'any')\nstats_clean.isna().sum()","74675593":"stats_clean.shape","f8cd90d3":"# we can geocode the birthplace cities\n#lets rename Birth Place field to remove the space\nstats_clean.rename(columns={'Birth Place': 'BirthPlace'}, inplace=True)","263b7165":"stats_clean.head(10)","eacccebf":"#Retrieve the number of players borm in city\ncounts = stats_clean['BirthPlace'].value_counts()\ncountsdf = pd.DataFrame(counts)\ncountsdf.shape","2ddc2a36":"countsdf  = countsdf.reset_index().rename(columns={' ':'CityState'})","40754c2e":"countsdf.rename(columns={'index': 'CityState','BirthPlace': 'freq'}, inplace=True)","ae3dfcad":"countsdf.head()","a74c0f6c":"countsdf['CityState'] = countsdf['CityState'].str.replace(' ,', ',')","05079024":"countsdf.head()","a442df96":"citiesreduced = countsdf['freq'] > 10 #there needs to be ten or more football players per city \ncountsdf = countsdf[citiesreduced ]","4cb2bfb0":"countsdf.shape","4127c7a5":"\"\"\"\nimport geocoder\n\nfor index,row in countsdf.iterrows():\n    b = geocoder.geonames(row['CityState'], key='YOUR-USER-NAME')\n    countsdf.loc[index,'Y_LAT'] = b.lat\n    countsdf.loc[index,'X_LONG'] = b.lng\n    countsdf.loc[index,'population'] = b.population\n    print(b.population,b.lat,b.lng,b.address)\n    time.sleep(7)\n\nprint(\"done geocoding with geonames\")\n\nresults of this code snippet pushd to csv below. This code works great. Applying an\nappropriate sleep timer is crucial to retrieving the information from geonames. For more info \non GeoNames see http:\/\/www.geonames.org\/export\/web-services.html. I prefer geocoder over geopy\nbecuase extracting population from GeoNames was simple with the geocoder library.\n\n\"\"\"","9258ab45":"\"\"\"\nOnce the coordinates and poplation are retreived we can filter the datafrma down to the info we really need. \n\ndata = countsdf.filter(['CityState','freq','Y_LAT','X_LONG','population'])\n\n\"\"\"","6b06b729":"\"\"\"\n\nper1000 = countsdf['population']\/ 1000\ndata['playersPer1000'] = countsdf['freq'] \/ per1000\n\nFor Kaggle we create \"geocodedcities2.csv\" with the below\n\ncsv = data.to_csv('geocodedcities2.csv')\n\"\"\"","564c44ab":"geo_coded_cities = pd.read_csv(\"..\/input\/geocoded-cities-with-population\/geocodedcities2.csv\")","e82837a2":"#check NAs\ndropna = geo_coded_cities .replace('', np.nan)\ndata_clean = dropna.dropna(how = 'any')\ndata_clean.isna().sum()","53d5f026":"#Reduce data to only those city with population data\nreduced = data_clean['population'] > 0\ndata_reduced = data_clean[reduced ]","5be9759e":"# Double checking to ensure lat\/longs are floats so can plot our lat\/longs\ndata_reduced['Y_LAT'] = data_reduced['Y_LAT'].astype(float)\ndata_reduced['X_LONG'] = data_reduced['X_LONG'].astype(float)","d1f07121":"#create a folium map centered in the USA\nusa_center = (37.1369916,-103.8264166)\n\n# create empty map zoomed in on San Francisco\nfolium_map = folium.Map(location=usa_center,\n                        zoom_start=4,tiles='Stamen Terrain')\n\n# add a marker for every record in the reduced data. set color to call out cities with more than 100 players born\nfor coord in data_reduced.iterrows():\n    perCapita = coord[1]['freq']\n    popup_text = \"CityState: {}<br> Total Players Born: {}<br>\"\n    popup_text = popup_text.format(coord[1]['CityState'],coord[1]['freq'])\n    color=\"#E37222\"\n    \n    folium.CircleMarker(\n        location = [coord[1]['Y_LAT'],coord[1]['X_LONG']],popup=popup_text,radius = coord[1]['freq']\/10,color=color,fill=True).add_to(folium_map)\n    \n\nfolium_map","ed43561a":"#create a folium map centered in the USA\nusa_center = (37.1369916,-103.8264166)\n\n# create empty map zoomed in on San Francisco\nfolium_map = folium.Map(location=usa_center,\n                        zoom_start=4,tiles='Stamen Terrain')\n\n# add a marker for every record in the reduced data. set color to call out cities with more than 100 players born\nfor coord in data_reduced.iterrows():\n    perCapita = coord[1]['playersPer1000']\n    pop = coord[1]['population']\n    popup_text = \"CityState: {}<br> Players Born Per 1000 People: {}<br> City Population: {}<br>\"\n    popup_text = popup_text.format(coord[1]['CityState'],coord[1]['playersPer1000'],coord[1]['population'])\n    color=\"#E37222\"\n    \n    folium.CircleMarker(\n        location = [coord[1]['Y_LAT'],coord[1]['X_LONG']],popup=popup_text,radius = coord[1]['playersPer1000']*20,color=color,fill=True).add_to(folium_map)\n    \n\nfolium_map","1ee6f512":"We now have values for Birth Place for all rows.. Out of 17172 rows we see that 12467 values for 'High School Location' are NAs! The amount of missing data points devalues analysis of 'High School Location'. We will concentrate on the 'Birthplace location' field.","19e452a1":"**Objective**\n\nThe goal of this notebook to identify geographic origin points of NFL football players. The analysis will focus on the birthplace and high school locations for each player (where data is available)","b2c12685":"# Geocoding and Extracting Population","090106db":"# Compare the Population Map (above) with the Per 1000 Person Map (below)"}}