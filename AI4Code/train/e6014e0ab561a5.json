{"cell_type":{"267866c5":"code","aa40f37d":"code","bf2f9524":"code","c6eb7771":"code","2f97be21":"code","9c501866":"code","5e6975ec":"code","e346599b":"code","7a0448a9":"code","4e83e0ff":"code","03e740a1":"code","cad6ca2f":"code","39f5f1b6":"code","8cd26c03":"code","1b767c7d":"markdown"},"source":{"267866c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/digit-recognizer\/train.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa40f37d":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","bf2f9524":"df.head(10)\n","c6eb7771":"# save the labels into l\nl = df['label']","2f97be21":"# store the pixel into d, except l\nd = df.drop(\"label\", axis=1)\n# d","9c501866":"# check shape\nprint(l.shape)\nprint(d.shape)","5e6975ec":"import matplotlib.pyplot as plt\n\n# display number\nplt.figure(figsize=(7,7))\nidx=1\n\n# reshape pixel from 1d to 2d pixel array\ngrid = d.iloc[idx].to_numpy().reshape(28, 28)\nplt.imshow(grid, interpolation=\"none\", cmap=\"gray\")\nplt.show()\n\nprint(l[idx])","e346599b":"labels = l.head(1000)\ndata = d.head(1000)\n\nprint(\"shape of sample data =\" , data.shape)","7a0448a9":"# Standardizing the data\nfrom sklearn.preprocessing import StandardScaler\nstandardized_data = StandardScaler().fit_transform(data)\nprint(standardized_data.shape)","4e83e0ff":"from sklearn.manifold import TSNE\n\n# pickle top 1k points as tSNE\ndata_1k = standardized_data[0:1000, :]\nlabels_1k = labels[0:1000]\n","03e740a1":"\nmodel = TSNE(n_components=2, random_state=0)\n\ntsne_data = model.fit_transform(data_1k)","cad6ca2f":"tsne_data = np.vstack((tsne_data.T, labels_1k)).T\ntsne_df = pd.DataFrame(data=tsne_data, columns = (\"Dim_1\", \"Dim_2\", \"label\"))\n","39f5f1b6":"\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\n\nsn.FacetGrid(tsne_df, hue=\"label\", height=6).map(plt.scatter, \"Dim_1\", \"Dim_2\").add_legend()\nplt.show()","8cd26c03":"model = TSNE(n_components=2, random_state=0, perplexity=24, n_iter=580)\ntsne_data = model.fit_transform(data_1k) \n\n# creating a new data fram which help us in ploting the result data\ntsne_data = np.vstack((tsne_data.T, labels_1k)).T\ntsne_df = pd.DataFrame(data=tsne_data, columns=(\"Dim_1\", \"Dim_2\", \"label\"))\n\n# Ploting the result of tsne\nsn.FacetGrid(tsne_df, hue=\"label\", height=6).map(plt.scatter, 'Dim_1', 'Dim_2').add_legend()\nplt.title('With perplexity = 50')\nplt.show()","1b767c7d":"\n# t-SNE"}}