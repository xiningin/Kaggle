{"cell_type":{"a8106f57":"code","0d890dfc":"code","e591ccad":"code","587540d5":"code","74e9ca04":"code","ba9e7c71":"code","9f9da56a":"code","d3ccd967":"code","a20bc031":"code","4fc3b9c8":"code","dfea0a56":"code","b4c1adc2":"code","205d6162":"code","80e9e6a5":"code","3a8e8436":"code","9e400a10":"code","0a82838b":"markdown","62160125":"markdown"},"source":{"a8106f57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d890dfc":"import pandas as pd \nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('darkgrid')","e591ccad":"# import data\ndf_2020 = pd.read_csv('..\/input\/f1-2021-2020-bahrain-qualifying-data\/2020_round_15_qualifying.csv')\ndf_2021 = pd.read_csv('..\/input\/f1-2021-2020-bahrain-qualifying-data\/2021_round_1_qualifying.csv')\ndf_2021.head()","587540d5":"# identify null values (drivers who did not attend the qualifying session)\nnull_2020 = df_2020.isnull().sum()[df_2020.isnull().sum() > 0]\nnull_2021 = df_2021.isnull().sum()[df_2021.isnull().sum() > 0]\nprint(null_2020)\nprint(null_2021)","74e9ca04":"df_2021.info()","ba9e7c71":"# drop unnamed column\ndf_2020.drop(columns=['Unnamed: 0'], axis=1, inplace=True)\ndf_2021.drop(columns=['Unnamed: 0'], axis=1, inplace=True)","9f9da56a":"# delete all rows with drivers who did not attend Q3\nq3_2020 = df_2020.dropna(subset=['secs_q3'], axis=0)\nq3_2021 = df_2021.dropna(subset=['secs_q3'], axis=0)","d3ccd967":"plt.figure(figsize=(11, 4))\n\nplt.subplot(1,2,1)\nsns.barplot(x='driver', y='secs_q3', data=q3_2020, color='darkblue')\nplt.ylim(87, 91)\nplt.ylabel('Q3 Times in Sec.')\nplt.axhline(q3_2020['secs_q3'].mean(), ls='--', color='red')\nplt.title(\"Q3 Times 2020\")\n\nplt.subplot(1,2,2)\nsns.barplot(x='driver', y='secs_q3', data=q3_2021, color='darkblue')\nplt.ylim(87, 91)\nplt.ylabel('Q3 Times in Sec.')\nplt.axhline(q3_2021['secs_q3'].mean(), ls='--', color='red')\nplt.title(\"Q3 Times 2021\");\n\nplt.savefig(\"q3_times.png\")","a20bc031":"plt.figure(figsize=(11, 4))\n\nplt.subplot(1,2,1)\nsns.boxplot(y=q3_2020['secs_q3'], color='lightblue')\nplt.ylabel('Q3 Times in Sec.')\nplt.ylim(87, 91)\nplt.axhline(q3_2020['secs_q3'].mean(), ls='--', color='red')\nplt.title(\"Q3 Times 2020\")\n\nplt.subplot(1,2,2)\nsns.boxplot(y=q3_2021['secs_q3'], color='lightblue')\nplt.ylabel('Q3 Times in Sec.')\nplt.ylim(87, 91)\nplt.axhline(q3_2021['secs_q3'].mean(), ls='--', color='red')\nplt.title(\"Q3 Times 2021\");","4fc3b9c8":"q3_2020.describe()","dfea0a56":"q3_2021.describe()","b4c1adc2":"q_constructor_2020 = df_2020[['constructor', 'secs_q1', 'secs_q2', 'secs_q3']].groupby(['constructor'], as_index=False).min()\nq_constructor_2020['best_time'] = q_constructor_2020.min(axis=1)\nq_constructor_2020['slow_time'] = q_constructor_2020.max(axis=1)\nq_constructor_2020['delta_constructor'] = q_constructor_2020['slow_time'] - q_constructor_2020['best_time']\nq_constructor_2020['delta_best'] = q_constructor_2020['best_time'] - q_constructor_2020['best_time'].min()\nq_constructor_2020 = q_constructor_2020.sort_values(by='best_time', ascending=True)\n\nq_constructor_2021 = df_2021[['constructor', 'secs_q1', 'secs_q2', 'secs_q3']].groupby(['constructor'], as_index=False).min()\nq_constructor_2021['best_time'] = q_constructor_2021.min(axis=1)\nq_constructor_2021['slow_time'] = q_constructor_2021.max(axis=1)\nq_constructor_2021['delta_constructor'] = q_constructor_2021['slow_time'] - q_constructor_2021['best_time']\nq_constructor_2021['delta_best'] = q_constructor_2021['best_time'] - q_constructor_2021['best_time'].min()\nq_constructor_2021 = q_constructor_2021.sort_values(by='best_time', ascending=True)\nq_constructor_2021","205d6162":"plt.figure(figsize=(11, 4))\n\nplt.subplot(2,1,1)\nsns.barplot(x='constructor', y='best_time', data=q_constructor_2020, color='darkblue')\nplt.ylabel('Qualifying Times in Sec.')\nplt.ylim(87, 93)\nplt.axhline(q_constructor_2020['best_time'].mean(), ls='--', color='red')\n\nplt.subplot(2,1,2)\nsns.barplot(x='constructor', y='best_time', data=q_constructor_2021, color='darkblue')\nplt.ylabel('Qualifying Times in Sec.')\nplt.ylim(87, 93)\nplt.axhline(q_constructor_2021['best_time'].mean(), ls='--', color='red');","80e9e6a5":"# Who made the best improvements compared to last year's bahrain qualifying\ndelta_frame = pd.DataFrame({\n    \"constructor\": [\"Red Bull\", \"Mercedes\", \"Ferrari\", \"AlphaTauri\", \"McLaren\", \"Renault\/Alpine\", \"Aston Martin\/RP\", \"Alfa Romeo\", \"Williams\", \"Haas\"],\n    \"best_2020\": [87.678, 87.264, 89.137, 88.448, 88.542, 88.417, 88.322, 89.491, 89.294, 90.111],\n    \"best_2021\": [88.997, 89.385, 89.678, 89.809, 89.927, 90.249, 90.601, 90.708, 91.316, 92.449]\n})\ndelta_frame.head()","3a8e8436":"delta_frame[\"delta\"] = delta_frame['best_2021'] - delta_frame['best_2020']\ndelta_frame = delta_frame.sort_values(by='delta', ascending=True)\ndelta_frame.head()","9e400a10":"plt.figure(figsize=(11, 4))\nsns.barplot(x='constructor', y='delta', data=delta_frame, color='darkblue')\nplt.ylabel('Delta (in seconds)')\nplt.axhline(delta_frame['delta'].mean(), ls='--', color='red')\nplt.title(\"Delta of best Qualifying Laps 2020 vs 2021 in Bahrain compared per Constructor\");","0a82838b":"# Qualifying Constructor Analysis","62160125":"# Q3 Driver analysis"}}