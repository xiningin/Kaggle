{"cell_type":{"802fcfd0":"code","70dedb30":"code","49f196ad":"code","8061b923":"code","205dc2ad":"code","8b88fc7c":"code","eb3cfa63":"code","6373ef45":"code","ddb3f0a5":"code","8ae9b630":"code","e63f0119":"code","a92a1e8a":"code","38fbc4ba":"code","7c866173":"code","7c5c155c":"code","74d2f27b":"code","1c07c397":"code","387325c9":"code","13dad0ac":"markdown","f30d07dc":"markdown","e8934840":"markdown","ab156606":"markdown","ce733b25":"markdown","1435d78e":"markdown","25596301":"markdown","acd6a420":"markdown","b80d4456":"markdown","cd6b5944":"markdown"},"source":{"802fcfd0":"from IPython.display import Image\nImage(\"..\/input\/animages\/1.png\")","70dedb30":"# importing libraries\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\n# Libraries for TensorFlow\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras import models, layers\n\n# Library for Transfer Learning\nfrom tensorflow.keras.applications import resnet50\n\nprint(\"Importing libraries completed.\")","49f196ad":"# listing the folders containing images\n\n# Main Dataset\nmain_folder=\"..\/input\/animal10\/Animals-10\"\nclass_names=os.listdir(main_folder)\nprint(class_names)\n\n# Validation Dataset\nvalidation_folder=\"..\/input\/validationimage\"\nval_class_names=os.listdir(validation_folder)\nprint(val_class_names)","8061b923":"# Preparing Training image data (image array and class name) for processing\n\n# Declaring variables\nx=[] # to store array value of the images\ny=[] # to store the labels of the images\n\nfor folder in os.listdir(main_folder):\n    image_list=os.listdir(main_folder+\"\/\"+folder)\n    for img_name in image_list:\n        # Loading images\n        img=image.load_img(main_folder+\"\/\"+folder+\"\/\"+img_name,target_size=(100,100))\n        \n        # Converting to arrary\n        img=image.img_to_array(img)\n        \n        # Transfer Learning: this is to apply preprocess of resnet to our images before passing it to resnet\n        img=resnet50.preprocess_input(img) #  Optional step\n        \n        # Appending the arrarys\n        x.append(img) # appending image array\n        y.append(class_names.index(folder)) # appending class index to the array\n        \nprint(\"Preparing Training Dataset Completed.\")","205dc2ad":"# Preparing validation images data (image array and class name) for processing\n\n# Declaring variables\nval_images=[]\nval_image_label=[] # to store the labels of the images\n\nfor folder in os.listdir(validation_folder):\n    image_list=os.listdir(validation_folder+\"\/\"+folder)\n    for img_name in image_list:\n        # Loading images\n        img=image.load_img(validation_folder+\"\/\"+folder+\"\/\"+img_name,target_size=(100,100))\n        \n        # Converting to arrarys\n        img=image.img_to_array(img)\n\n        # Transfer Learning: this is to apply preprocess of resnet to our images before passing it to resnet\n        img=resnet50.preprocess_input(img) #  Optional step\n        \n        # Appending arrays\n        val_images.append(img) # appending image array\n        val_image_label.append(val_class_names.index(folder))\n        \nprint(\"Preparing Validation Dataset Completed.\")","8b88fc7c":"# Verifying the output\n\n# Training Dataset\nprint(\"Training Dataset\")\n\nx=np.array(x) # Converting to np arrary to pass to the model\nprint(x.shape)\n\ny=to_categorical(y) # onehot encoding of the labels\n# print(y)\nprint(y.shape)\n\n\n# Validation Dataset\nprint(\"Validation Dataset\")\n\nval_images=np.array(val_images) \nprint(val_images.shape)\n\nval_image_label=to_categorical(val_image_label) # onehot encoding of the labels)\nprint(val_image_label.shape)","eb3cfa63":"# Check properties of the model that we are going to use for Transfer Learning\n\nprint(\"Summary of default ResNet50 model.\\n\")\n\n# we are using resnet50 for transfer learnin here. So we have imported it\nfrom tensorflow.keras.applications import resnet50\n\n# initializing model with weights='imagenet'i.e. we are carring its original weights\nmodel_resnet=resnet50.ResNet50(weights='imagenet')\n\n# display the summary to see the properties of the model\nmodel_resnet.summary()","6373ef45":"# Modelling WITH Transfer Learning\n\n# Here we will prepare model as per our requirements\n\nprint(\"Summary of Custom ResNet50 model.\\n\")\nprint(\"1) We setup input layer and 2) We removed top (last) layer. \\n\")\n\n# let us prepare our input_layer to pass our image size. default is (224,224,3). we will change it to (100,100,3)\ninput_layer=layers.Input(shape=(100,100,3))\n\n# initialize the transfer model ResNet50 with appropriate properties per our need.\n# we are passing paramers as following\n# 1) weights='imagenet' - Using this we are carring weights as of original weights.\n# 2) input_tensor to pass the ResNet50 using input_tensor\n# 3) we want to change the last layer so we are not including top layer\nresnet_model=resnet50.ResNet50(weights='imagenet',input_tensor=input_layer,include_top=False)\n\n# See the summary of the model with our properties.\nresnet_model.summary()","ddb3f0a5":"# access the current last layer of the model and add flatten and dense after it\n\nprint(\"Summary of Custom ResNet50 model.\\n\")\nprint(\"1) We flatten the last layer and added 1 Dense layer and 1 output layer.\\n\")\n\nlast_layer=resnet_model.output # we are taking last layer of the model\n\n# Add flatten layer: we are extending Neural Network by adding flattn layer\nflatten=layers.Flatten()(last_layer) \n\n# Add dense layer\n# dense1=layers.Dense(100,activation='relu')(flatten)\n\n# Add dense layer to the final output layer\noutput_layer=layers.Dense(10,activation='softmax')(flatten)\n\n# Creating modle with input and output layer\nmodel=models.Model(inputs=input_layer,outputs=output_layer)\n\n# Summarize the model\nmodel.summary()","8ae9b630":"# we will freez all the layers except the last layer\n\n# we are making all the layers intrainable except the last layer\nprint(\"We are making all the layers intrainable except the last layer. \\n\")\nfor layer in model.layers[:-1]:\n    layer.trainable=False\nmodel.summary()","e63f0119":"# Train the Model\n\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=5)\n# print(xtrain)\n# print(xtest)\n# print(ytrain)\n# print(ytest)\n\nprint(\"Splitting data for train and test completed.\")","a92a1e8a":"# Compiling Model\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])\n\nprint(\"Model compilation completed.\")","38fbc4ba":"# Fit the Model\n\nmodel.fit(xtrain,ytrain,epochs=20,batch_size=64,verbose=True,validation_data=(xtest,ytest))\n\nprint(\"Fitting the model completed.\")","7c866173":"# This function helps to predict individual image supplied to it\ndef predict(img_name):\n    img=image.load_img(img_name,target_size=(100,100))\n    img=image.img_to_array(img)\n    plt.imshow(img.astype('int32'))\n    plt.show()\n    img=resnet50.preprocess_input(img)\n    prediction=model.predict(img.reshape(1,100,100,3))\n    output=np.argmax(prediction)\n    print(class_names[output])\n\n# This function plots the image supplied in array\ndef plot_image(i, predictions_array, true_label, img): # taking index and 3 arrays viz. prediction array, true label array and image array\n    predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    \n#     plt.imshow(img) # showing b\/w image\n    plt.imshow(img.astype('int32'))\n    \n#     print(*predictions_array)\n    predicted_label=np.argmax(predictions_array)\n    true_label=np.argmax(true_label)\n\n#     print(predicted_label)\n#     print(true_label)\n\n    if predicted_label == true_label: #setting up label color\n        color='green' # correct then blue colour\n    else:\n        color='red' # wrong then red colour\n    plt.xlabel(\"{} {:2.0f}% ({})\".format(val_class_names[predicted_label], 100*np.max(predictions_array), val_class_names[true_label]), color=color)\n\n# This function plots bar chart supplied in the array data\ndef plot_value_array(i, predictions_array, true_label): # taking index along with predictions and true label array\n    predictions_array, true_label = predictions_array[i], true_label[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    predicted_label=np.argmax(predictions_array)\n    true_label=np.argmax(true_label)\n#     print(predicted_label)\n#     print(true_label)\n    if predicted_label == 0:\n        predicted_label=1\n    if true_label == 0:\n        true_label=1\n    \n    thisplot=plt.bar(range(10), predicted_label, color='seashell')\n    plt.ylim([0,1])\n\n    thisplot[predicted_label].set_color('red')\n    thisplot[true_label].set_color('green')","7c5c155c":"# Preparing prediction arrary\npredictions=[]\n\nfor img in val_images:\n    img=img.reshape(1,100,100,3)\n    predictions.append(model.predict(img))","74d2f27b":"# Prediction of individual images taken from internet\n\n# Butterfly\n!wget -q https:\/\/www.futurity.org\/wp\/wp-content\/uploads\/2019\/02\/viceroy-butterfly_1600.jpg\npredict('viceroy-butterfly_1600.jpg') \n    \n# Cat\n!wget -q https:\/\/static.scientificamerican.com\/sciam\/cache\/file\/92E141F8-36E4-4331-BB2EE42AC8674DD3_source.jpg\npredict('92E141F8-36E4-4331-BB2EE42AC8674DD3_source.jpg')\n\n# call the function\n\n# defining parameters to pass to function\ni=22 # image number 12. You may change value of i for play around\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\n\nplot_image(i,predictions, val_image_label, val_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions, val_image_label)\nplt.show()","1c07c397":"# Prediction on Validation images\n\n# Declaring variables\nnum_rows=6\nnum_cols=4\nnum_images=num_rows*num_cols\n\nplt.figure(figsize=(2*2*num_cols,2*num_rows))\nfor i in range(num_images):\n    plt.subplot(num_rows, 2*num_cols, 2*i+1)\n\n    plot_image(i,predictions, val_image_label, val_images)\n    \n    plt.subplot(num_rows, 2*num_cols, 2*i+2)\n\n    plot_value_array(i, predictions, val_image_label)\nplt.show()","387325c9":"print(\"Notebook completed.\")","13dad0ac":"# 6. Model Evaluation","f30d07dc":"**Observation:**\n\n1. The first layer is having image size = (100,100,3) now.\n1. Also, see the folloiwng 2 top (last) layers which were there in original resnet are now not the part of our customized layer because we set include_top=False:\n\n> avg_pool (GlobalAveragePooling2 (None, 2048)         0           conv5_block3_out[0][0]           \n> __________________________________________________________________________________________________\n> predictions (Dense)             (None, 1000)         2049000     avg_pool[0][0]     ","e8934840":"**Observations:**\n1. We want to carry weights as it was in original model, so we are carring weights = 'imagenet'\n2. The very first layer is input layer which accept image size = (224, 224, 3). Our image size are different, so we need to change the parameter - image_size in the first layer. Our size will be: (100,100, 3)\n3. We want to change the last layer as we have 10 class classificatoin problem. So, we will not include top layer\n4. Also, we will not train all the layers except the last one as we will have to train that. So, we will set properties for trainable = False excet for the top i.e. last layer.","ab156606":"# 3. Preparing Data","ce733b25":"# 1. Importing Libraries","1435d78e":"# 7. Predictions","25596301":"# 2. Data Gethering","acd6a420":" # Image Classification using Transfer Learning - ResNet50\n \n**Transfer learning (TL)** is a research problem in machine learning (ML) that focuses on storing knowledge gained while solving one problem and applying it to a different but related problem. For example, knowledge gained while learning to recognize cars could apply when trying to recognize trucks.\n(Source: https:\/\/en.wikipedia.org\/wiki\/Transfer_learning)\n\nTransfer learning is a machine learning method where a model developed for a task is reused as the starting point for a model on a second task which is related to original task.\n\nIt is quite popular in deep learning where pre-trained models are used as the starting point on Computer Vision (CV) and Natural Language Processing (NLP) tasks. This is very helpful approach as it saves lots of time, resoureses. This way one can avail benefit of using complex models developed by others as start point and on top of it develop another.\n\n","b80d4456":"# 5. Building a Model: Using Transfer Learning","cd6b5944":"# 4. Verification of Data"}}