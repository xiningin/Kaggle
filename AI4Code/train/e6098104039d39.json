{"cell_type":{"ade22f30":"code","9c6cf3dc":"code","a243e16a":"code","4a993fef":"code","ecc54a19":"code","be9874db":"code","df44b369":"code","5824bb47":"code","8746d1e6":"code","0b20c328":"code","9d00b814":"code","d8278730":"code","64be6a48":"code","c525c887":"code","3f6b9a82":"code","5e071890":"code","aebbbacd":"code","e02644f1":"code","373b0f4f":"code","fc392684":"code","3b941308":"code","2b916f61":"code","1932e34c":"code","2fd97065":"code","e347c88e":"code","2a3f87d8":"code","a5bff0d2":"code","4b606e23":"code","50a40336":"code","261d5ab1":"code","fd19ad02":"code","f15aefee":"markdown","a84537e4":"markdown","7020532e":"markdown","32e1dd13":"markdown","d96a0678":"markdown","c6c6a900":"markdown","69146fb2":"markdown","f4779207":"markdown","304d56d6":"markdown","168b1330":"markdown","8c54156f":"markdown"},"source":{"ade22f30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c6cf3dc":"data = pd.read_csv('\/kaggle\/input\/fetal-health-classification\/fetal_health.csv')\ndata.head()","a243e16a":"data['fetal_health'] = data['fetal_health'].map({1:'Normal', 2:'Suspect', 3:'Pathological'})","4a993fef":"data.info()","ecc54a19":"data.describe().T","be9874db":"plot_data = data.groupby('fetal_health')['fetal_health'].agg(['count']).reset_index()\n\nfig = px.pie(plot_data, values = plot_data['count'], names = plot_data['fetal_health'])\n\nfig.update_traces(textposition = 'inside', textinfo = 'percent + label', hole = 0.5, \n                  marker = dict(colors = ['#2A3132','#336B87'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(title_text = 'Customer<br>fetal_health', title_x = 0.5, title_y = 0.55, title_font_size = 26, \n                  title_font_family = 'Calibri', title_font_color = 'black', showlegend = False)\n                  \nfig.show()","df44b369":"def plot_category(feature, figsize=None):\n    Normal_count = data[data['fetal_health']=='Normal'].groupby([feature]).size()\n    Suspect_count = data[data['fetal_health']=='Suspect'].groupby([feature]).size()\n    Pathological_count = data[data['fetal_health']=='Pathological'].groupby([feature]).size()\n    labels = Normal_count.index\n\n    x = np.arange(len(labels)) # the label locations\n    width = 0.7  # the width of the bars\n\n    if figsize:\n        fig, ax = plt.subplots(figsize=figsize)\n    else:\n        fig, ax = plt.subplots()\n    rects1 = ax.bar(x-width\/3, round(Normal_count*100\/data.groupby([feature]).size(), 2), \n                    width\/5, label='Normal')\n    rects2 = ax.bar(x-width\/8, round(Suspect_count*100\/data.groupby([feature]).size(), 2), \n                    width\/5, label='Suspect')\n    rects3 = ax.bar(x+width\/8, round(Pathological_count*100\/data.groupby([feature]).size(), 2), \n                    width\/5, label='Pathological')\n    ax.set_ylabel('Count')\n    ax.set_title('Based on %s'%feature)\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels, rotation=80)\n    ax.legend(loc=0, bbox_to_anchor=(1, 1));\n\n    ax.bar_label(rects1, padding=1)\n    ax.bar_label(rects2, padding=1)\n    ax.bar_label(rects3, padding=1)\n    ax.bar_label(rects4, padding=1)\n\n    fig.tight_layout()\n    plt.show()\n    \ndef plot_numerical(feature, figsize=None):\n    fig = plt.figure(figsize=(10,6))\n\n    sns.kdeplot(data[data['fetal_health']=='Normal'][feature])\n    sns.kdeplot(data[data['fetal_health']=='Suspect'][feature])\n    sns.kdeplot(data[data['fetal_health']=='Pathological'][feature])\n\n    fig.legend(labels=['Normal', 'Suspect', 'Pathological'])\n    plt.title('fetal_health based on %s'%feature)\n    plt.show()\n    \ndef plot_pie(feature):\n    plot_data = data.groupby([feature, 'fetal_health'])[feature].agg({'count'}).reset_index()\n\n    fig = px.sunburst(plot_data, path = [feature, 'fetal_health'], values = 'count', color = feature, \n                      title = 'Affect of %s on Customer fetal_health'%feature, width = 600, height = 600)\n\n    fig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', \n                      title_font_size = 22, title_x = 0.5)\n\n    fig.update_traces(textinfo = 'label + percent parent')\n    fig.show()","5824bb47":"for feature in ['uterine_contractions', 'baseline value', 'fetal_movement']:\n    plot_numerical(feature)","8746d1e6":"for feature in ['accelerations', 'light_decelerations', 'severe_decelerations', 'prolongued_decelerations']:\n    plot_numerical(feature)","0b20c328":"for feature in ['abnormal_short_term_variability', 'mean_value_of_short_term_variability', \n                'percentage_of_time_with_abnormal_long_term_variability',\n                'mean_value_of_long_term_variability']:\n    plot_numerical(feature)","9d00b814":"for feature in ['histogram_width',\n       'histogram_min', 'histogram_max', 'histogram_number_of_peaks',\n       'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean',\n       'histogram_median', 'histogram_variance', 'histogram_tendency']:\n    plot_numerical(feature)","d8278730":"numerical_features = ['baseline value', 'accelerations', 'fetal_movement',\n       'uterine_contractions', 'light_decelerations', 'severe_decelerations',\n       'prolongued_decelerations', 'abnormal_short_term_variability',\n       'mean_value_of_short_term_variability',\n       'percentage_of_time_with_abnormal_long_term_variability',\n       'mean_value_of_long_term_variability', 'histogram_width',\n       'histogram_min', 'histogram_max', 'histogram_number_of_peaks',\n       'histogram_number_of_zeroes', 'histogram_mode', 'histogram_mean',\n       'histogram_median', 'histogram_variance', 'histogram_tendency']","64be6a48":"df = data.copy()\ndf['fetal_health'] = df['fetal_health'].map({'Normal':0, 'Suspect':1, 'Pathological':2})","c525c887":"plt.figure(figsize=(20, 10))\nsns.heatmap(round(df[numerical_features+['fetal_health']].corr(), 2), annot=True,\n            mask=None, cmap='GnBu')\ncorr_mat = df.corr()\nplt.show()","3f6b9a82":"# Correlated Features\ns = corr_mat.unstack()\nso = s.sort_values(kind=\"quicksort\").drop_duplicates()\nres1 = so[so>=0.5]\nprint(res1)","5e071890":"from statsmodels.stats.outliers_influence import variance_inflation_factor","aebbbacd":"# Calculating VIF\nvif = pd.DataFrame()\nvif[\"variables\"] = [feature for feature in numerical_features if feature not in ['histogram_median', 'histogram_min', 'histogram_max',\n                                                                                'histogram_mean', 'histogram_mode']]\nvif[\"VIF\"] = [variance_inflation_factor(df[vif['variables']].values, i) for i in range(len(vif[\"variables\"]))]\nprint(vif)","e02644f1":"NumericData = data[[feature for feature in numerical_features if feature not in ['accelerations', 'fetal_movement',\n                                                                                'uterine_contractions', 'light_decelerations',\n                                                                                'severe_decelerations', 'prolongued_decelerations',\n                                                                                'mean_value_of_short_term_variability']]]\nNumericMelt = NumericData.melt()\nplt.figure(figsize=(15,10))\nplt.title(\"Boxplots for Numerical variables\")\nbp = sns.boxplot(x='variable', y='value', data=NumericMelt)\nbp = sns.stripplot(x='variable', y='value', data=NumericMelt, jitter=True, edgecolor='gray')\nbp.set_xticklabels(bp.get_xticklabels(), rotation=90)\nplt.show()","373b0f4f":"NumericData = data[[feature for feature in ['accelerations', 'uterine_contractions', 'light_decelerations']]]\nNumericMelt = NumericData.melt()\nplt.figure(figsize=(15,10))\nplt.title(\"Boxplots for Numerical variables\")\nbp = sns.boxplot(x='variable', y='value', data=NumericMelt)\nbp = sns.stripplot(x='variable', y='value', data=NumericMelt, jitter=True, edgecolor='gray')\nbp.set_xticklabels(bp.get_xticklabels(), rotation=90)\nplt.show()","fc392684":"NumericData = data[[feature for feature in ['prolongued_decelerations', 'mean_value_of_short_term_variability', 'fetal_movement']]]\nNumericMelt = NumericData.melt()\nplt.figure(figsize=(15,10))\nplt.title(\"Boxplots for Numerical variables\")\nbp = sns.boxplot(x='variable', y='value', data=NumericMelt)\nbp = sns.stripplot(x='variable', y='value', data=NumericMelt, jitter=True, edgecolor='gray')\nbp.set_xticklabels(bp.get_xticklabels(), rotation=90)\nplt.show()","3b941308":"NumericData = data[[feature for feature in ['severe_decelerations']]]\nNumericMelt = NumericData.melt()\nplt.figure(figsize=(15,10))\nplt.title(\"Boxplots for Numerical variables\")\nbp = sns.boxplot(x='variable', y='value', data=NumericMelt)\nbp = sns.stripplot(x='variable', y='value', data=NumericMelt, jitter=True, edgecolor='gray')\nbp.set_xticklabels(bp.get_xticklabels(), rotation=90)\nplt.show()","2b916f61":"# Percentage of outliers present in each variable\noutlier_percentage = {}\nfor feature in numerical_features:\n    tempData = data.sort_values(by=feature)[feature]\n    Q1, Q3 = tempData.quantile([0.25, 0.75])\n    IQR = Q3 - Q1\n    Lower_range = Q1 - (1.5 * IQR)\n    Upper_range = Q3 + (1.5 * IQR)\n    outlier_percentage[feature] = round((((tempData<(Q1 - 1.5 * IQR)) | (tempData>(Q3 + 1.5 * IQR))).sum()\/tempData.shape[0])*100,2)\noutlier_percentage","1932e34c":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics, preprocessing\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom xgboost import XGBClassifier","2fd97065":"train_data = df.copy()\nfeature_cols = [feature for feature in train_data.columns if feature not in(['fetal_health'])]\nprint('features used- ', feature_cols)\n\n''' Rescaling to [0,1] '''\nscaler = StandardScaler()\nscaler.fit(train_data[feature_cols])\ntrain_data[feature_cols] = scaler.transform(train_data[feature_cols])","e347c88e":"X = train_data[feature_cols]\ny = train_data['fetal_health']\n\nvalidation_size = 0.3\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=validation_size, \n                                                    random_state=0, stratify=y)","2a3f87d8":"model = LogisticRegression(class_weight={0:1, 1:5, 2:5}, max_iter=200)\nmodel.fit(X_train, y_train)","a5bff0d2":"y_pred = model.predict(X_train)\n\nprint('Train metrics...')\nprint(confusion_matrix(y_train, y_pred))\nprint(classification_report(y_train, y_pred))\n\ny_pred = model.predict(X_test)\n\nprint('Validation metrics...')\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","4b606e23":"''' metrics on original data '''\ny_pred = model.predict(train_data[feature_cols])\n\ndef make_cm(matrix, columns):\n    n = len(columns)\n    act = ['actual fetal_health'] * n\n    pred = ['predicted fetal_health'] * n\n\n    cm = pd.DataFrame(matrix, \n        columns=[pred, columns], index=[act, columns])\n    return cm\n\ndf_matrix=make_cm(\n    confusion_matrix(train_data['fetal_health'], y_pred),['Normal', 'Suspect', 'Pathological'])\n\ndisplay(df_matrix)\nprint(classification_report(train_data['fetal_health'], y_pred))","50a40336":"model = XGBClassifier(\n    learning_rate=0.02, \n    max_depth=5,\n    #min_child_weight=2, \n    n_estimators=300, \n    random_state=0, \n    #reg_lambda=2,\n    #reg_alpha=0.5,\n    use_label_encoder=False\n)\n\nmodel.fit(X_train, y_train,\n          eval_metric='merror',\n          verbose=False)","261d5ab1":"y_pred = model.predict(X_train)\n\nprint('Train metrics...')\nprint(confusion_matrix(y_train, y_pred))\nprint(classification_report(y_train, y_pred))\n\ny_pred = model.predict(X_test)\n\nprint('Test metrics...')\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","fd19ad02":"''' metrics on original data '''\ny_pred = model.predict(train_data[feature_cols])\n\ndef make_cm(matrix, columns):\n    n = len(columns)\n    act = ['actual fetal_health'] * n\n    pred = ['predicted fetal_health'] * n\n\n    cm = pd.DataFrame(matrix, \n        columns=[pred, columns], index=[act, columns])\n    return cm\n\ndf_matrix=make_cm(\n    confusion_matrix(train_data['fetal_health'], y_pred),['Normal', 'Suspect', 'Pathological'])\n\ndisplay(df_matrix)\nprint(classification_report(train_data['fetal_health'], y_pred))","f15aefee":"# Training Model","a84537e4":"# CORRELATION","7020532e":"**Observations-**\n* uterine_contractions - >0.0025 is normal while < 0.0025 is suspect\n* baseline value - 125-135 is Pathological, 135+ is Suspect\n* accelerations - 0.0025+ is normal\n* abnormal_short_term_variability - <50 is normal\n* mean_value_of_short_term_variability - <1 is suspect, 1-2 is normal & >2 is pathological\n* percentage_of_time_with_abnormal_long_term_variability - 10-70 is suspect\n* mean_value_of_long_term_variability - <3 is Pathological, 3-10 is suspect and 10+ is normal","32e1dd13":"# EDA","d96a0678":"**Observations-**\n* baseline value - histogram_mode, histogram_mean, histogram_median\n* mean_value_of_short_term_variability - light_decelerations, histogram_variance, histogram_width","c6c6a900":"# Model 1: Logistic Regression","69146fb2":"# Looking at Outliers","f4779207":"# Model 2: XGB","304d56d6":"# Analyzing features using VIF","168b1330":"looks like no null values","8c54156f":"|feature|description|\n|---|---|\n|baseline value| FHR baseline (beats per minute)|\n|accelerations| Number of accelerations per second|\n|fetal_movement| Number of fetal movements per second|\n|uterine_contractions| Number of uterine contractions per second|\n|light_decelerations| Number of light decelerations per second|\n|severe_decelerations| Number of severe decelerations per second|\n|prolongued_decelerations| Number of prolonged decelerations per second|\n|abnormal_short_term_variability|Percentage of time with abnormal short term variability|"}}