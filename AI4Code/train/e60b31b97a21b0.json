{"cell_type":{"878e12a4":"code","e2c5a153":"code","2c3b5988":"code","59a08008":"code","86f376a9":"code","906b0ecd":"code","7957f2e8":"code","ae7d80f7":"code","01c1ab8c":"code","18ec08ff":"code","f6671ea1":"markdown","20c169a3":"markdown","b39b640f":"markdown","8ae24f8b":"markdown","5f80eda8":"markdown","44e81935":"markdown"},"source":{"878e12a4":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np #\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        if filename==\"y_train.npy\":\n            print('reading train')            \n            y_train=np.read_csv(os.path.join(dirname, filename) )#,error_bad_lines=False)#,names=['id','body','headline']\n                    \n        if filename.find(\"rain\")>0:\n            print('reading train')            \n            train=pd.read_csv(os.path.join(dirname, filename) )#,error_bad_lines=False)#,names=['id','body','headline']\n        if filename.find(\"est\")>0:\n            print('reading test')\n            test=pd.read_csv(os.path.join(dirname, filename) )#,error_bad_lines=False )\n\n","e2c5a153":"train","2c3b5988":"test","59a08008":"total=train.append(test,ignore_index=True)\ntotal","86f376a9":"def bestsimilar(dtrain,tekst,label,indexv):\n    if True:\n        ncomps=300\n        from sklearn.decomposition import TruncatedSVD\n        tsvd=TruncatedSVD(n_components=ncomps, n_iter=7, random_state=42)\n        from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n        from sklearn.datasets import fetch_20newsgroups\n        news = fetch_20newsgroups(subset='train')\n        print('#vectorizing text')\n        kolom=dtrain.describe().T\n\n        vectc=TfidfVectorizer(ngram_range=(2,3),analyzer='char_wb')\n        vectw=TfidfVectorizer(ngram_range=(1,2))\n        \n        dtrain['txt']=dtrain[tekst]+' '+dtrain['image_phash']\n        dfidf=vectc.fit_transform(dtrain['txt'])\n        dfidfw=vectw.fit_transform(dtrain['txt'])\n\n        print(dfidf.shape,dfidfw.shape)\n        dfidf=tsvd.fit_transform(dfidf)\n        dfidfw=tsvd.fit_transform(dfidfw)\n        \n        print('svd')\n\n        \n        from sklearn.metrics.pairwise import cosine_similarity,laplacian_kernel,manhattan_distances\n        print('cosim')\n        matchdb=cosine_similarity(np.hstack((dfidf, dfidfw)),np.hstack((dfidf[-3:], dfidfw[-3:])))\n        for xi in range(3):\n            dtrain['svd'+str(xi)]=matchdb[:,xi]\n                \n    return dtrain\nmatchdb=bestsimilar(total,'title','label_group','posting_id') ","906b0ecd":"matchdb.sort_values('svd0')[-20:]","7957f2e8":"BASE = '..\/input\/shopee-product-matching\/train_images\/'\nimport cv2, matplotlib.pyplot as plt\npad = '..\/input\/shopee-product-matching\/test_images\/'\n\ndef displayDF(train, random=False, COLS=5, ROWS=10, path=BASE):\n    for k in range(ROWS):\n        plt.figure(figsize=(20,5))\n        for j in range(COLS):\n            if random: row = np.random.randint(0,len(train))\n            else: row = COLS*k + j\n            name = train.iloc[row,1]\n            title = train.iloc[row,3]\n            title_with_return = \"\"\n            for i,ch in enumerate(title):\n                title_with_return += ch\n                if (i!=0)&(i%20==0): title_with_return += '\\n'\n            #print(path,name)\n            img = cv2.imread(path+name)\n            plt.subplot(1,COLS,j+1)\n            plt.title(title_with_return)\n            plt.axis('off')\n            plt.imshow(img)\n        plt.show()\n\n\ndisplayDF(test,random=False,COLS=3,ROWS=1,path=pad)","ae7d80f7":"\nBASE = '..\/input\/shopee-product-matching\/train_images\/'\n\ndisplayDF(matchdb.sort_values('svd0')[-51:-1],random=False)","01c1ab8c":"displayDF(matchdb.sort_values('svd1')[-55:-1],random=False)","18ec08ff":"displayDF(matchdb.sort_values('svd2')[-55:-1],random=False)","f6671ea1":"second matching images","20c169a3":"find matching products sort on cosinus similarity ","b39b640f":"first matchings images","8ae24f8b":"third matching images","5f80eda8":"display test images","44e81935":"pure title tekst matching"}}