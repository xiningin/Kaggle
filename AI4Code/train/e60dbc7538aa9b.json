{"cell_type":{"66ffe656":"code","ebee21ed":"code","298c818b":"code","279db5fc":"code","c7e816bb":"code","0e5dd031":"code","bf16922c":"markdown","852ad599":"markdown","ca62058d":"markdown"},"source":{"66ffe656":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split # splittind data\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebee21ed":"df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\ndf.info()","298c818b":"df.RainTomorrow = df.RainTomorrow.replace(to_replace = ['Yes','No'],value = ['1','0'])","279db5fc":"df.columns","c7e816bb":"df.RISK_MM = [int(each*10) for each in df.RISK_MM]","0e5dd031":"\nx = df.RainTomorrow\ny = df.RISK_MM\n\n#Splitting test and train data\nx_train, x_test, y_train, y_test = train_test_split(x.T,y,test_size = 0.2, random_state = 42)\n\n#Converting strings to numerical values\nx_train = x_train.replace(to_replace = ['Yes','No'],value = ['1','0'])\nx_test = x_test.replace(to_replace = ['Yes','No'],value = ['1','0'])\n\n#We multiply values by 100 to not lose values while converting to int and get more accuracy.\nx_train = [int(each*100) for each in x_train]\nx_test = [int(each*100) for each in x_test]\ny_train = [int(each*100) for each in y_train]\ny_test = [int(each*100) for each in y_test]\n\n#Sklearn needs 2d array so we convert list to array to use reshape method and get 2d arrays\nx_t_arr = np.array(x_train).reshape(-1,1)\ny_t_arr = np.array(y_train).reshape(-1,1)\nx_test_arr = np.array(x_test).reshape(-1,1)\ny_test_arr = np.array(y_test).reshape(-1,1)\n\n\n\nlr = LogisticRegression(solver='lbfgs', max_iter=3000)\nlr.fit(x_t_arr,y_t_arr)\nprint(\"Score : \",lr.score(x_test_arr,y_test_arr))\n#Score is nearly 0.639","bf16922c":"## Let's have a look on our data","852ad599":"## We need to convert Yes and No values of RainTomorrow column to numerical values to use it","ca62058d":"## RISK_MM column has float values but sklearn needs int values so we multiply values by 10 to not lose values while converting to int."}}