{"cell_type":{"511784dd":"code","240d515e":"code","8469328e":"code","c7a8e1b4":"code","a3e4875e":"code","218fd262":"code","f637cc50":"code","98374220":"code","783b5799":"code","43c7887d":"code","cc0c1fbf":"code","4362956d":"code","41817d31":"code","309feb79":"code","ef7b7c0d":"code","c90da8dc":"code","f8f35513":"code","f3d525fa":"code","1384e8c0":"code","4a8c9da7":"code","b3e9b4cb":"code","2b2f39d0":"code","911ad651":"code","dcc8eaf6":"code","fccd67a3":"code","e12758f9":"code","559de66f":"markdown","06497305":"markdown","97634a4a":"markdown","59052799":"markdown","6d06b5db":"markdown","fb403800":"markdown","01d5b180":"markdown"},"source":{"511784dd":"import numpy as np\nimport pandas as pd","240d515e":"from fastai.tabular.all import *\npath = Path('..\/input\/lish-moa')\npath.ls()","8469328e":"train_features = pd.read_csv(path\/'train_features.csv')\ntest_features = pd.read_csv(path\/'test_features.csv')\ntrain_targets = pd.read_csv(path\/'train_targets_scored.csv')\ntrain_drugs = pd.read_csv(path\/'train_drug.csv')\nsub = pd.read_csv(path\/'sample_submission.csv')","c7a8e1b4":"train_features.shape, train_targets.shape","a3e4875e":"categorical = ['cp_type', 'cp_time', 'cp_dose']\ncontinuous = [i for i in train_features.columns if i not in ['cp_type', 'cp_time', 'cp_dose', 'sig_id']]\ndep_var = [i for i in train_targets.columns if i != 'sig_id']\ntrain_features[dep_var] = train_targets[dep_var]\ntrain_features.shape","218fd262":"# We have appended the targets to the features dataframe\ntrain_features.iloc[1:5,-5:-1]","f637cc50":"n_train = np.rint(train_features.shape[0]*0.8).astype(int)\nn_train","98374220":"indices = np.random.permutation(train_features.shape[0])\ntrain_idx, test_idx = indices[:n_train], indices[n_train:]\nsplits = (list(train_idx), list(test_idx))","783b5799":"procs = [FillMissing, Categorify, Normalize]\ndata = TabularPandas(train_features, procs=procs, cat_names=categorical,\n                    cont_names=continuous, y_names=dep_var, splits = splits)","43c7887d":"len(data.train), len(data.valid)","cc0c1fbf":"data.show(10)","4362956d":"dls = data.dataloaders(512)","41817d31":"learn = tabular_learner(dls, layers=[600,300], loss_func=BCEWithLogitsLossFlat())","309feb79":"learn.lr_find()","ef7b7c0d":"learn.fit_one_cycle(5,5e-3)","c90da8dc":"learn.loss_func","f8f35513":"learn.recorder.plot_loss()","f3d525fa":"test_dl = dls.test_dl(test_features)","1384e8c0":"test_dl.show(5)","4a8c9da7":"preds,_ = learn.get_preds(dl=test_dl)","b3e9b4cb":"preds.shape, preds.dtype","2b2f39d0":"preds_df = pd.DataFrame(preds).astype(\"float\")","911ad651":"preds_df.head","dcc8eaf6":"submission = sub\nsubmission[dep_var] = preds_df\nsubmission.loc[test_features['cp_type']=='ctl_vehicle', dep_var] = 0","fccd67a3":"submission.head()","e12758f9":"submission.to_csv('submission.csv', index=False)","559de66f":"# Get Predictions for Submission\nWe follow the guide to setting up a test set here: https:\/\/forums.fast.ai\/t\/a-brief-guide-to-test-sets-in-v2-you-can-do-labelled-now-too\/57054","06497305":"## Dataloaders","97634a4a":"# Introduction\nThis notebook will broadly follow the approach laid out in chapter 9 of \"Deep Learning for Coders with fastai and PyTorch,\" titled \"Tabular Modeling Deep Dive.\" Our initial goal is to get a deep learning model running and able to produce a valid submission as quickly as possible, after which we can do some more thoughtful EDA and iterate on the model.","59052799":"# Data Preprocessing","6d06b5db":"# Set Up Learner","fb403800":"From the documentation:\n\n>Features for the training set. Features `g-` signify gene expression data, and `c-` signify cell viability data. `cp_type` indicates samples treated with a compound (`cp_vehicle`) or with a control perturbation (`ctrl_vehicle`); control perturbations have no MoAs; `cp_time` and `cp_dose` indicate treatment duration (24, 48, 72 hours) and dose (high or low).","01d5b180":"# Fit Model"}}