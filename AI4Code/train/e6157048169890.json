{"cell_type":{"1bf2fc5d":"code","a387d46d":"code","a5916777":"code","f83ec239":"code","d1fe2ef4":"code","4bef1e1d":"code","22b88db0":"code","c3520863":"code","f926f2c7":"code","ca2ee1c2":"code","d409197f":"code","bc6cbe1f":"code","8394ab28":"code","41a30423":"code","e7073a8b":"code","66f84baf":"code","fc0c66ed":"code","f593c954":"code","7614ef6e":"code","a176b790":"code","f8f3ef6c":"code","93464f15":"code","bd7b3343":"code","beb10ec9":"code","37d9f0d7":"code","e45df101":"code","495353b8":"code","900b8130":"code","9ea75747":"code","9fbf9339":"code","a6b2f12e":"code","65546512":"code","98b62f36":"code","a7eef865":"code","92a48b56":"code","7b29a92a":"code","55be6296":"code","657e2da7":"code","13a7515b":"code","7933ffc2":"code","d40807a6":"code","1a7a694d":"code","dd765c70":"code","25bdad8f":"code","c41c8174":"code","050670fa":"code","65124a54":"code","3a966bde":"code","2ee68dac":"code","16cddd25":"code","614c9eb0":"markdown","890f8695":"markdown","4eecc5a3":"markdown","e5e19d23":"markdown","51dbfa06":"markdown","dcbfc201":"markdown","2e88cdea":"markdown","efa49c51":"markdown","925ebc70":"markdown","45e2a46c":"markdown","7006b0c7":"markdown","7abb0e8f":"markdown","ed35fc49":"markdown","81bc0ced":"markdown","fdea9c17":"markdown","c41f69a4":"markdown","bef713f6":"markdown","cce0609a":"markdown","eede9480":"markdown","9621d106":"markdown","1003fdea":"markdown","b01f3823":"markdown","1b769ee2":"markdown","ef519741":"markdown","207e96bc":"markdown","7b9acebd":"markdown","8e8160c4":"markdown","454b1ab2":"markdown","27dd36ef":"markdown","a9f63d5c":"markdown","0dde6aca":"markdown","bb8d5356":"markdown","9af65615":"markdown","06bb2077":"markdown","f7b68887":"markdown","d4732617":"markdown","9cf1fce3":"markdown","0e34620f":"markdown","749616f1":"markdown","28eb1649":"markdown","72a7d9e7":"markdown","6b75bfd2":"markdown","986c0cad":"markdown"},"source":{"1bf2fc5d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random\n\n# turn off warnings for final notebook\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', None)\n%matplotlib inline\nsns.set_context('notebook')\nsns.set_palette('Set2')\nsns.set_style('darkgrid')\n\nclass color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'","a387d46d":"df_list=pd.read_csv('..\/input\/listingsairbnbmunich\/listings.csv')\ndf_list.head(5)","a5916777":"df_rev=pd.read_csv('..\/input\/reviewsairbnbmunich\/reviews.csv')\ndf_rev.head(5)","f83ec239":"df_cal=pd.read_csv('..\/input\/calendarairbnbmunich\/calendar.csv')\ndf_cal.head(5)","d1fe2ef4":"df_list.columns","4bef1e1d":"df_list_1=df_list[['id', 'host_since',\n       'host_is_superhost',\n       'neighbourhood_cleansed',\n       'property_type', 'room_type', 'accommodates',\n       'bathrooms_text', 'bedrooms', 'beds', 'amenities', 'price',\n       'minimum_nights', 'maximum_nights', 'number_of_reviews',\n       'number_of_reviews_ltm', 'number_of_reviews_l30d', 'first_review',\n       'last_review', 'review_scores_rating', 'review_scores_accuracy',\n       'review_scores_cleanliness', 'review_scores_checkin',\n       'review_scores_communication', 'review_scores_location',\n       'review_scores_value', 'reviews_per_month']]\ndf_list_1.columns","22b88db0":"# general information about the dataset\ndf=df_list_1\n\ndf.info()                                     # check for incorrect datatypes\ndf.isnull().sum().sort_values(ascending=False)# check for missing data (first step)\n","c3520863":"print(\"Duplicated values\")\ndf_list.duplicated().value_counts()","f926f2c7":"# Attention price is listed as object, let's take a deeper look.\nprint(df_list_1['price'].apply(type).value_counts())\ndf_list_1['price']","ca2ee1c2":"#This has to be corrected immediately\ndf= df_list_1\n\ndef clean_currency(x):\n    \"\"\" If the value is a string, then remove currency symbol and delimiters\n    otherwise, the value is numeric and can be converted\n    \"\"\"\n    if isinstance(x, str):\n        return(x.replace('$', '').replace(',', ''))\n    return(x)\n\ndf['price'] = df['price'].apply(clean_currency).astype('float')\n","d409197f":"print(df_list_1['price'].apply(type).value_counts())\ndf_list_1['price']","bc6cbe1f":"df=df_list_1\n\n\nsns.heatmap(df.isnull(),cbar=True).set_title(\"Visualizing Missing Values\\n\", fontsize=25)\nplt.gcf().set_size_inches(30,8)\nplt.xticks(ticks=[x+0.5 for x in range(df.columns.shape[0])],labels=df.columns,rotation=80, fontsize=15)\n\nplt.show()","8394ab28":"df=df_list_1\n\npd.set_option(\"display.precision\", 2)\n\ndef highlight_columns(df, rows=20, color='lightgreen', columns_to_shadow=[], columns_to_show=[]):\n    highlight = lambda slice_of_df: 'background-color: %s' % color\n    sample_df = df.head(rows)\n    if len(columns_to_show) != 0:\n        sample_df = sample_df[columns_to_show]\n    highlighted_df = sample_df.style.applymap(highlight, subset=pd.IndexSlice[{'accommodates','bedrooms','beds','number_of_reviews_l30d'}, columns_to_shadow])\n    return highlighted_df\n\nsubsets = pd.IndexSlice[{'accommodates','beds','price'}, {'min'}]\nhighlight_columns(df.describe().T,columns_to_shadow=['max']).applymap(lambda x: \"background-color: lightgreen\", subset=subsets) # Here we highlight suspicious numbers to futher investigate","41a30423":"# Let's check if exists a missing value for reviews, but exists a non-zero number of reviews:\n# These represent cases where reviews exist, but the reviewee probably wrote a review, but didn't fill the score review.(1372-1312 = 60 cases)\nprint(df_list_1.loc[(df_list_1['review_scores_value'].isnull()) & (df_list_1['number_of_reviews']!=0) ].shape)\ndf_list_1.loc[(df_list_1['review_scores_value'].isnull()) & (df_list_1['number_of_reviews']!=0) ].head(5)","e7073a8b":"# Here I checked if there is a good correlation between bedrooms and accommodations to guide imputation of missing values.\n# There is no clear correlation to take advantage of.\nsns.scatterplot(data=df_list_1,x=\"bedrooms\",y=\"accommodates\")","66f84baf":"#Checking value count of 'accomodates' in cases of missing values for 'bedrooms', this will guide imputation\ndf_list_1[df_list_1['bedrooms'].isnull()]['accommodates'].value_counts()","fc0c66ed":"# Here I checked if there is a good correlation between beds and accommodations to guide imputation of missing values.\n# There is no clear correlation to take advantage of.\ndf_list_1[df_list_1['beds'].isnull()]['accommodates'].value_counts()\nsns.scatterplot(data=df_list_1,x=\"beds\",y=\"accommodates\")","f593c954":"#Checking value count of 'accomodates' in cases of missing values for 'beds', this will guide imputation.\ndf_list_1[df_list_1['beds'].isnull()]['accommodates'].value_counts()","7614ef6e":"#Checking value count of 'accomodates' compared to 'beds', this will guide imputation.\ndf_list_1[['beds','accommodates']].value_counts( sort=False, ascending=True).head(30)","a176b790":"#Checking value count of 'accomodates' in cases of missing values for 'bathrooms_text', this will guide imputation.\ndf_list_1[df_list_1['bathrooms_text'].isnull()]['accommodates'].value_counts()","f8f3ef6c":"#Here we find the case where host_is_superhost and host_since features are missing\ndf_list_1[df_list_1['host_is_superhost'].isnull()]","93464f15":"#There seems to be something strange with the max \"accomodates\" being 16, but the max \"beds\" and \"bedrooms\" are 50.\ndf_list[df_list_1['accommodates']>15]\n# Accommodates seems to have a hardcap at 16 people.\n# Using the links in the listing we can see some hostel, hotels and similar in the listing. What isn't the particular goal of the study.\n# We are going to apply a filter for listing with \"accommodatas\" for 16 and \"bedrooms\" equal and higher than 10, this seeks to exclude hotels and similar that \n# didn't list in airbnb just about the room itself.","bd7b3343":"#There seems to be something strange with the \"beds\" being 0.\ndf_list.loc[(df_list_1['beds']==0)]\n#After checking some entries through the listings_url. There are some campings, some makeshift beds out of sofas, but most of the visited listings have indeed a bed.\n#It constutites a lesser error to impute all these values as 1.","beb10ec9":"#There seems to be something strange with the \"prices\" at 0 and \"accomodates\" at 0.\ndf_list.loc[(df_list_1['price']==0)|(df_list_1['accommodates']==0)]\n# it seems that actual hotels can list at airbnb, but due to being unnusual they lack \"price\" and proper \"accommodates\".\n#Definetely excluding those.","37d9f0d7":"#There seems to be something strange with the \"number_of_reviews_l30d\" with numbers higher than 30. More than one per day?\ndf_list.loc[(df_list_1['number_of_reviews_l30d']>=30)]\n# I couldn't pinpoint why this happened, the listings seem pretty normal. Maybe a case of selfreview to boost numbers? In any case I don't think this will hurt the overall results or model.\n# We are leaving as it is for the moment.","e45df101":"df_list.loc[(df_list_1['accommodates']>=16)|(df_list_1['bedrooms']>=10)]","495353b8":"# at this point we will change from df_list_1 to df_list_2 (consider this a version control)\ndf_list_2=df_list_1.copy()","900b8130":"df_list_2['bedrooms'].fillna(value=1, axis=None, inplace=True)\ndf_list_2['bedrooms'].isnull().value_counts()","9ea75747":"df_list_2['beds'].fillna(value=1, axis=None, inplace=True)\ndf_list_2['beds'].replace(0,1, inplace=True)\ndf_list_2['beds'].isnull().value_counts()","9fbf9339":"df_list_2['bathrooms_text'].fillna(value=1, axis=None, inplace=True)\ndf_list_2['bathrooms_text'].isnull().value_counts()","a6b2f12e":"df_list_2.drop(df_list_2.loc[(df_list_2['accommodates']>=16)|(df_list_2['bedrooms']>=10)].index, inplace=True)","65546512":"df_list_2.drop(df_list_2.loc[(df_list_2['price']==0)|(df_list_2['accommodates']==0)].index, inplace=True)","98b62f36":"df=df_list_2.copy()\ndf.amenities = df.amenities.str.replace('[{\"\"}]', \"\")\ndf.amenities = df.amenities.str.replace('[', \"\")\ndf.amenities = df.amenities.str.replace(']', \"\")\ndf= df.amenities.str.get_dummies(sep = \",\")","a7eef865":"amenities=df.sum(axis=0).sort_values(ascending=False)\nnormalized_amenities=(amenities)\/(df_list_2.shape[0])\nnormalized_amenities[normalized_amenities>0.05]","92a48b56":"df_list_2['neighbourhood_cleansed'].value_counts()","7b29a92a":"fig, ax = plt.subplots(figsize=(8, 8))\nax.set_title(\"Neighbourhood\", size=20,fontweight='bold')\n\ndf_list_2['neighbourhood_cleansed'].value_counts().plot(kind='bar', cmap='tab20c', title=\"Property Type\",sort_columns=True)","55be6296":"df_list_2['property_type'].value_counts()","657e2da7":"df_list_2['property_type_clean']=df_list_2['property_type'].replace({\n'Entire apartment':'Entire apartment',\n'Private room in house':'Private room in house',\n'Private room in apartment':'Private room in apartment',\n'Private room in condominium':'Private room in apartment',\n'Shared room in apartment':'Shared room in apartment',\n'Entire townhouse':'Entire house',\n'Private room in villa':'Private room in house',\n'Entire condominium':'Private room in apartment',\n'Private room in townhouse':'Private room in house',\n'Entire house':'Entire house',\n'Private room in loft':'Private room in apartment',\n'Entire loft':'Entire apartment',\n'Private room in bed and breakfast':'Private room in apartment',\n'Private room':'Private room in apartment',\n'Entire serviced apartment':'Entire apartment',\n'Private room in camper\/rv':'Other',\n'Shared room in condominium':'Shared room in apartment',\n'Camper\/RV':'Other',\n'Entire guest suite':'Private room in apartment',\n'Hut':'Other',\n'Entire home\/apt':'Entire apartment',\n'Entire hostel':'room in hotel\/hostel',\n'Private room in guest suite':'Private room in apartment',\n'Private room in serviced apartment':'Private room in apartment',\n'Private room in guesthouse':'Private room in house',\n'Room in boutique hotel':'room in hotel\/hostel',\n'Entire place':'Entire apartment',\n'Cave':'Other',\n'Shared room in bed and breakfast':'Shared room in apartment',\n'Entire bungalow':'Entire apartment',\n'Private room in hostel':'room in hotel\/hostel',\n'Shared room in boat':'Other',\n'Earth house':'Other',\n'Room in bed and breakfast':'Private room in apartment',\n'Shared room in tipi':'Other',\n'Private room in tent':'Other',\n'Shared room in tent':'Other',\n'Room in hotel':'room in hotel\/hostel',\n'Room in serviced apartment':'Private room in apartment',\n'Room in aparthotel':'room in hotel\/hostel',\n'Tiny house':'Entire house',\n'Private room in bungalow':'Private room in house',\n'Shared room in guesthouse':'Shared room in apartment',\n'Bus':'Other',\n'Shared room in loft':'Shared room in apartment',\n'Shared room in hostel':'room in hotel\/hostel',\n'Entire guesthouse':'Entire house',\n'Private room in nature lodge':'Other',\n'Private room in barn':'Other'\n    })","13a7515b":"df_list_2['property_type_clean'].value_counts()","7933ffc2":"def label_function(val):\n    return f'{val:.0f}%'\n\nfig, ax = plt.subplots(figsize=(8, 8))\ndf_list_2.groupby('property_type_clean').size().plot(kind='pie', textprops={'fontsize': 13},autopct=label_function, cmap='tab20c', title=\"Property Type\",sort_columns=True)\nplt.axis('off')\nax.set_title(\"Property Type\", size=20,fontweight='bold')","d40807a6":"df_list_2['bathrooms_text'].value_counts()","1a7a694d":"df_list_2['bathrooms']=df_list_2['bathrooms_text'].replace({\n    '1 bath':'1',\n    '1 private bath':'1' ,\n    '1 shared bath':'1' ,\n    '1.5 shared baths':'1.5',\n    'Shared half-bath':'0.5',\n    '1.5 baths':'1.5',\n    '2.5 baths':'2.5',\n    '2.5 shared baths':'2.5' ,\n    '2 baths':'2',\n    '2 shared baths':'2' ,\n    '0 baths':'0',\n    '0 shared baths':'0' ,\n    'Half-bath':'0.5',\n    '3 baths':'3',\n    '4 baths':'4',\n    '3.5 baths':'3.5',\n    '5 baths':'5',\n    '4 shared baths':'4',\n    '8 shared baths':'8',\n    '8.5 shared baths':'8.5',\n    '3 shared baths':'3'\n    })\n\ndf_list_2['bathrooms']= df_list_2['bathrooms'].astype('float')","dd765c70":"df_list_2['bathrooms'].value_counts()","25bdad8f":"df_list_2['room_type'].value_counts()","c41c8174":"df_list_2['host_is_superhost'].value_counts()","050670fa":"df_list_2.to_csv('df_list_2.csv',index=False)","65124a54":"normalized_amenities.to_csv('amenities.csv',index=True)","3a966bde":"df_rev.head()","2ee68dac":"# general information about the dataset\ndf=df_rev\n\ndf.info()                                     # check for incorrect datatypes\ndf.isnull().sum().sort_values(ascending=False)# check for missing data (first step)","16cddd25":"from scipy.signal import find_peaks\n\n# Plot the number reviews over time to see any patterns\ndf_reviews_plot = df_rev.groupby('date')['id'].count().reset_index()\ndf_reviews_plot[\"rolling_mean\"] = df_reviews_plot.id.rolling(window=30).mean()\ndf_reviews_plot['date'] = pd.to_datetime(df_reviews_plot['date'])\n\npeaks, _ = find_peaks(df_reviews_plot['rolling_mean'],distance=200)\n\nplt.figure(figsize=(20, 10))\n\nplt.plot(df_reviews_plot['date'][peaks], df_reviews_plot[\"rolling_mean\"][peaks], \"x\", color='red') # ploting an X in the peaks\n\nplt.plot(df_reviews_plot.date, df_reviews_plot.rolling_mean); # ploting the series\n\nplt.title(\"Number of reviews by date (last 30 days mean)\", fontsize=20);\n#plt.xlabel(\"time\");\nplt.ylabel(\"reviews\", fontsize=14);\nfor i in peaks:\n    plt.annotate(df_reviews_plot['date'][i].date(),xy=(df_reviews_plot['date'][i],df_reviews_plot['rolling_mean'][i]))\n\n    \nprops = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\ntextstr = \"Oktoberfest period\\n ~ 20 Sep - 05 Oct\"\nplt.annotate(textstr,xy=(0.85, 0.90), xycoords=\"axes fraction\", fontsize=14, verticalalignment='top', bbox=props)\n\n\nplt.grid()","614c9eb0":"**Room type**  \nLet's inspect the room types.","890f8695":"### **Conclusions\/Insights:**  \n\n    \n**DataTypes**  \n* The column 'Price' seems to be saved as string and not as float. The datatype was corrected on the spot.\n\n**Duplicates**  \n* No duplicates found.\n\n**Missing Values**\n\n* 1372 rows (~27%) of the listings don't have have score reviews. Probably recent listings. Despite bringing additional information, the lack of reviews can be interpreted as evidence that the pricing is not  adapted to the market,e.g. listing at a lower price to catch initial customers. These listings will be included the general overview, but excluded of models for price prediction.\n* 565 rows (~11%) of the listings don't have the number of bedrooms. Of those, 501 states that they accommodate 3 or less people.In this dataset the overwhelming majority of listings have only one bedroom. Because of this, in this notebook we will impute these values as being 1.\n* 89 rows  (~2%) of the listings don't have the number of beds. Of those, 79 states that they accommodate 2 or less people.In this dataset the overwhelming majority of listings have only one bed. Because of this, in this notebook we will impute these values as being 1.\n* 11 rows  (~0.2%) of the listings don't have bathrooms_text. Of those,10 states that they accommodate 3 or less people.In this dataset the overwhelming majority of listings have only one bathroom. Because of this, in this notebook we will impute these values as being 1.\n* 1 row  (~0.2%) of the listings doesn't have host_is_superhost, host_since or score reviews. This row will be included in the general overview, but naturaly excluded of models. \n\n**Atypical Values**  \n\n* Accommodates seems to have a hardcap at 16 people.Using the links in the listing we can see some hostel, hotels and similar in the listing. What isn't the particular goal of the study. We are going to apply a **filter** for listing with \"accommodates\" for 16 or \"bedrooms\" equal and higher than 10, which sums up** for 17 rows.\n* 237 rows (~6%) had number of beds set as 0. Listings were inspected: there are some campings, some makeshift beds out of sofas, but most of the visited listings have indeed a bed.I conclude that it constutites a lesser error to replace all these values by 1.\n* 3 rows had 0 as price or 0 accomodates. The listings referred to hotels. These rows will be excluded.","4eecc5a3":"![](https:\/\/i.imgur.com\/OTmSEnt.jpg)  \nPhoto of Marienplatz in Munich by <a href=\"https:\/\/unsplash.com\/@danielsessler\">Daniel Se\u00dfler<\/a> on <a href=\"https:\/\/unsplash.com\/photos\/C6l894Q7wpI\">Unsplash<\/a>","e5e19d23":"![](https:\/\/i.imgur.com\/Ky8ZWjX.jpg)","51dbfa06":"****","dcbfc201":"Much better.","2e88cdea":"**Host is superhost?**  \nLet's inspect the superhost status.","efa49c51":"### **General information about the Reviews dataset**","925ebc70":"**Neighborhood**  \nLet's take a look at the neighborhood.","45e2a46c":"****\nHere we can already export the csv files and plot some graphs with tablaeu.","7006b0c7":"### **General information about the Listings dataset**","7abb0e8f":"<h3 style=\"\n           font-family:newtimeroman;\n           font-size:300%;\n           text-align:center;\n           ; padding:15px\"> Cooccurrence Analysis <\/h3><a id=2><\/a>\n \n![](https:\/\/i.imgur.com\/4sbMTit.png)","ed35fc49":"No obvious problem here. But let's check if (\"Sendling-Westpark\", \"Sendling\") and (\"Berg am Laim\", \"Laim\") means different places.\n  \nAfter checking: yes, they are different places. Moving on.","81bc0ced":"We could turn this into a boolean. but maybe later.","fdea9c17":"![](https:\/\/images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com\/f\/8cc1eeaa-4046-4c4a-ae93-93d656f68688\/dep51cx-d4206067-f005-4c8b-9fe8-d544c901b0a8.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzhjYzFlZWFhLTQwNDYtNGM0YS1hZTkzLTkzZDY1NmY2ODY4OFwvZGVwNTFjeC1kNDIwNjA2Ny1mMDA1LTRjOGItOWZlOC1kNTQ0YzkwMWIwYTguanBnIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.9zBwe-a2skICkc12TH70AdE55bPsS4U1chM_MNSNS6A)\n","c41f69a4":"**Bathroom_text**  \nLet's clean some toilet related data, dear data janitors.","bef713f6":"![](https:\/\/i.imgur.com\/NRyNtLW.jpg)\n","cce0609a":"![](http:\/\/www.graciano.adv.br\/imagens\/Under-construction1.jpg)","eede9480":"Now let's only keep the ones we are going to work with","9621d106":"Again further cleaning is possible and even desireble for a more acurate description of the data. But this is good enough for the moment. If we got time we can come back to this LATER.","1003fdea":"Done.","b01f3823":"\"Price\" is listed as string.This has to be corrected immediately or it will hinder the next analysis","1b769ee2":"### **Further Exploration for missing values:**  \n(Conclusions resumed below, open if you want to check in details.)","ef519741":"****","207e96bc":"****","7b9acebd":"**Amenities**  \nAmenities are a challenge. We can spend a whole lot of time perfecting this specific data, specially with NLP (Natural Language Processing). But for now let's stick with a simpler solution. We are going to remove some special characters, split each amenity in one column and then count the most frequent amenities.  \nThis procedure isn't perfect but it's fast and appropriately accurate at this level.","8e8160c4":"**Property type**  \nLet's inspect the property labels. Probably there will be some confusion.\n","454b1ab2":"Surprisingly clean =)","27dd36ef":"Here I used a text analysis software, namely Iramuteq, to group the most common words present in the comments.  \nNotice: only word in english were included and with a frequency >100 counts.  ","a9f63d5c":"`Expand` to see possible dashboards at this point:  \n[Link to Tableau Public](https:\/\/public.tableau.com\/app\/profile\/aramis.farias\/viz\/AirbnbMunich\/Story1)","0dde6aca":"\n**Understanding the features**\n\nhttps:\/\/docs.google.com\/spreadsheets\/d\/1iWCNJcSutYqpULSQHlNyGInUvHg2BoUGoNRIGa6Szc4\/edit#gid=1938308660\n\n","bb8d5356":"This would be way better as **numbers**, don't you think?","9af65615":"Wow. Cave? that was unexpected.  \n  \nLet's agree on standardizing these property types.\nI suggest:\n* Entire apartment  \n* Private room in apartment  \n* Private room in house  \n* Room in hotel  \n* Shared room in apartment  \n* Entire house  \n* Others\n\n(Let's control the urge to put cave in a separate category.)","06bb2077":"# 1. Importing \n<h1 style=\"background:#FFDE91;\n           font-family:newtimeroman;\n           font-size:350%;\n           text-align:center;\n           border-radius: 50px 50px;\n           border:5px solid black;\n           ; padding:15px\"> \ud83d\udcda Importing Libraries and Data <\/h1><a id=1><\/a>","f7b68887":"### **Appling changes:**  \nJust code stuff","d4732617":"### **Further Exploration for atypical values:**  \n(Conclusions resumed below, open if you want to check in details.)","9cf1fce3":"# 2. Exploring and Preparing \n<h1 style=\"background:#FFDE91;\n           font-family:newtimeroman;\n           font-size:350%;\n           text-align:center;\n           border-radius: 50px 50px;\n           border:5px solid black;\n           ; padding:15px\"> \ud83d\udd0e Exploring and Preparing <\/h1><a id=2><\/a>","0e34620f":"****","749616f1":"# 0. Stablishing the goal \n<h1 style=\"background:#FFDE91;\n           font-family:newtimeroman;\n           font-size:350%;\n           text-align:center;\n           border-radius: 50px 50px;\n           border:5px solid black;\n           ; padding:15px\"> \ud83c\udfc1 Goal <\/h1><a id=0><\/a>","28eb1649":"### **Categorical Variables**  \n","72a7d9e7":"### **Conclusions\/Insights:**\n\n* The Listing dataset is going to require the most work, given its size. It has many columns, few of which will not be used for this exercise.","6b75bfd2":"First let's take a look at the columns of the Listing dataset","986c0cad":"**Using the open source airbnb dataset from below, build a dashboard to help property owners and investors understand the Airbnb property market.**\n\n**Beginner**  \nCreate a dashboard to describe the Airbnb property market by showing the number of properties with specific property attributes\n\n* How can we help property owners and investors get a high-level overview of the property market?\n* What is the average rental price for apartments in your chosen city?\n* What number of bedrooms is the most common?\n* What proportion of Airbnb rentals have a swimming pool, air-conditioning, washing machine, etc?\n\n**Intermediate**   \nCreate an interactive dashboard to explore the property market. Build on the beginner level by allowing users to filter data directly from the dashboard.\n\n* How can we help a property owner understand the market and compare their property to others nearby?\n* If I own a 2 bedroom apartment with a swimming pool in the centre of your chosen city, how much would I be able to rent it for?\n* How many other properties are similar to mine?\n* Can you bring in any external data sources to support your dashboard, e.g. transport stations, distance to airport, schools, etc\n\n**Advanced\u200d**  \nBuild an interactive dashboard with your own custom metrics to evaluate the state of Airbnb property markets.\n\n* What factors might impact whether an Airbnb rental is a successful investment?\n* What data can we provide to a property investor to help them decide where next to buy a property?\n* Can we make the market measurable through a custom evaluation metric, eg \"Amsterdam has a stable tourism industry year round and the demand for properties is higher than the supply. It is an A+ investment. Barcelona's tourism industry is highly seasonal & demand is low. It is a B- investment.)"}}