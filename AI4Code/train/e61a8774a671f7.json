{"cell_type":{"e4b69ac1":"code","f3368406":"code","8aed9577":"code","f62bc9d6":"code","265a0024":"code","5d130319":"code","d1d539f7":"code","29b9eb74":"code","f3e033b0":"code","f3e50b62":"markdown","10667ee9":"markdown"},"source":{"e4b69ac1":"import numpy as np\nimport pandas as pd\nimport sys\nimport os\nfrom time import time\nimport tensorflow as tf\nimport gc\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm\nfrom sklearn.model_selection import StratifiedKFold","f3368406":"def ff(num_input_columns, BLOCKS = 4, drop_rate=.3, kernel_size = 2):\n    \n    #Input\n    inp = tf.keras.layers.Input(num_input_columns)\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(drop_rate)(x)\n    x = tf.keras.layers.Dense(125, activation = 'relu')(x)\n    x = tf.keras.layers.Reshape(target_shape=(5,5,5,1))(x)\n    \n    num_filters = 4\n    for i in range(1,BLOCKS+1):\n        num_filters\n        x = tf.keras.layers.Conv3D(filters = num_filters, kernel_size = kernel_size, \n                                   padding='same', name=f'Block{i}_conv1', activation='relu')(x)\n        x = tf.keras.layers.BatchNormalization(name = f'Block{i}_BN1')(x)\n        x = tf.keras.layers.Conv3D(filters = num_filters, kernel_size = kernel_size, padding='same', \n                                   name=f'Block{i}_conv2', activation='relu')(x)\n        x = tf.keras.layers.BatchNormalization(name = f'Block{i}_BN2')(x)\n        x = tf.keras.layers.Conv3D(filters = num_filters, kernel_size = kernel_size, padding='valid', \n                                   name=f'Block{i}_conv3', activation='relu')(x)\n        x = tf.keras.layers.BatchNormalization(name = f'Block{i}_BN3')(x)\n        num_filters = num_filters * 4\n\n    x = tf.keras.layers.Flatten()(x)\n    x = tf.keras.layers.Dense(100, activation='relu')(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dropout(rate=.1)(x)\n    x = tf.keras.layers.Dense(50, activation='relu')(x)\n    x = tf.keras.layers.Dropout(rate=.1)(x)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n    model = tf.keras.Model(inputs=inp, outputs=x)\n    \n    \n    model.compile(optimizer=tf.keras.optimizers.Adam(.001),\n                  loss=tf.keras.losses.BinaryCrossentropy(),\n                  metrics=[tf.keras.metrics.AUC()])\n    return model","8aed9577":"#model = ff(108, 4)\n#tf.keras.utils.plot_model(model, show_shapes=True)","f62bc9d6":"train = pd.read_feather('\/kaggle\/input\/september-feather\/train_rg')\ntrain_nan_count = pd.read_feather('\/kaggle\/input\/september-feather\/train_rg_min', columns = ['nan_count'])\ntest =  pd.read_feather('\/kaggle\/input\/september-feather\/test_rg')\ntest_nan_count = pd.read_feather('\/kaggle\/input\/september-feather\/test_rg_min', columns = ['nan_count'])\n\nss = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nFEATURES = [feat for feat in train.columns if 'f' in feat]\nTARGET = 'claim'\n\n######################\n#Feature Engineering\n######################\n\n#Adding row wise features\nROW_WISE = ['min','max','std','var','mean']\nfor df in [train, test]:\n    df['min'] = df[FEATURES].min(axis=1)\n    df['max'] = df[FEATURES].max(axis=1)\n    df['std'] = df[FEATURES].std(axis=1)\n    df['var'] = df[FEATURES].var(axis=1)\n    df['mean'] = df[FEATURES].mean(axis=1)\n\n#Adding count all all nas\ntrain['nan_count'] = train_nan_count['nan_count'] \/ 14\ntest['nan_count'] = test_nan_count['nan_count'] \/ 14\n\n#Final Features for nn\nFEATURES = FEATURES + ROW_WISE + ['nan_count']","265a0024":"#######################\n#Cross Val Params\n#######################\nNUM_FOLDS = 5 # the number of folds in the KFold validation\nNUM_STARTS = 1 #Number of random starts to train per fold\nNUM_SPLITS = 1 #Number of times to repeat the KFold validation","5d130319":"oof = pd.DataFrame()\npreds = pd.DataFrame()\nES = tf.keras.callbacks.EarlyStopping(monitor='val_auc', min_delta=0, patience=20, verbose=0, mode='max')\n\n#Number of times to do KFold cross val\nfor random_state in tqdm(range(NUM_SPLITS)):\n    skf = StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=random_state)\n    oof[random_state] = np.zeros(train.shape[0])\n    preds[f'Fold_{random_state}'] = np.zeros(test.shape[0])\n    \n    for f, (t_idx, v_idx) in enumerate(skf.split(X=train, y=train[TARGET])):\n        tr_temp = train[FEATURES].iloc[t_idx]\n        tr_temp_target = train[TARGET].iloc[t_idx]\n        val_temp = train[FEATURES].iloc[v_idx]\n        val_temp_target = train[TARGET].iloc[v_idx]\n        Repeat_start = time()\n        \n        #Number of random starts per fold\n        for repeat in range(NUM_STARTS):\n            tf.keras.backend.clear_session()\n            start = time()\n            model = ff(len(FEATURES), BLOCKS = 4, drop_rate=.3, kernel_size = 2)\n            \n            model.fit(tr_temp, tr_temp_target, batch_size=1024, callbacks=[ES], epochs=200,\n                      validation_data=(val_temp, val_temp_target))\n            oof[random_state].iloc[v_idx] = np.squeeze(model.predict(val_temp, batch_size=100000)) \/ NUM_STARTS\n            preds[f'Fold_{random_state}'] += np.squeeze(model.predict(test[FEATURES], \n                                                                     batch_size=100000)) \/ (NUM_STARTS * NUM_FOLDS)\n            print(f'{time() - start :.2f}', end=', ')\n        print(f'Repeat total: {time() - Repeat_start :.2f}')","d1d539f7":"scores = [roc_auc_score(train[TARGET].values, oof[col].values) for col in oof.columns]\nscore = np.mean(scores)\nprint(f'Scores on all Cross validation splits: {scores}')\nprint(f'Mean AUC from splits: {score}')","29b9eb74":"print(f'Null Preds: {preds.isnull().sum()}')\npreds.fillna(value=.5, inplace=True)","f3e033b0":"preds.to_csv('predictions.csv', index=False)\noof.to_csv('oof.csv', index=False)\nss[TARGET] = np.mean(preds, axis=1)\nss.to_csv('ss.csv', index=False)","f3e50b62":"# But why?\n\nNo real reason.  Why not?","10667ee9":"# Data Prep"}}