{"cell_type":{"19896317":"code","804be5a9":"code","ecf97c62":"code","0d562df3":"code","801f5de9":"code","b2d76a2b":"code","9b14f47e":"code","36a8ebe2":"markdown","ac5f7d63":"markdown","80a81657":"markdown","94280fae":"markdown","e304ee1f":"markdown","0ba2664e":"markdown","9cf5d2bb":"markdown","d1b642b9":"markdown","291cc69d":"markdown","1c3ac3cb":"markdown","34c4b833":"markdown","a030cf0e":"markdown","0ea6b464":"markdown","b4131ada":"markdown"},"source":{"19896317":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nall_data = pd.concat([train, test])\nall_data['date_time'] = pd.to_datetime(all_data['date_time'])\nall_data['year'] = all_data['date_time'].dt.year\nall_data['month'] = all_data['date_time'].dt.month\nall_data['week'] = all_data['date_time'].dt.week\nall_data['day'] = all_data['date_time'].dt.day\nall_data['dayofweek'] = all_data['date_time'].dt.dayofweek\nall_data['time'] = all_data['date_time'].dt.date - all_data['date_time'].dt.date.min()\nall_data['hour'] = all_data['date_time'].dt.hour\nall_data['time'] = all_data['time'].apply(lambda x : x.days)\nall_data.drop(columns = 'date_time', inplace = True)\nall_data['SMC'] = (all_data['absolute_humidity'] * 100) \/ all_data['relative_humidity']\nall_data['Dew_Point'] = 243.12*(np.log(all_data['relative_humidity'] * 0.01) + (17.62 * all_data['deg_C'])\/(243.12+all_data['deg_C']))\/(17.62-(np.log(all_data['relative_humidity'] * 0.01)+17.62*all_data['deg_C']\/(243.12+all_data['deg_C'])))\ntrain2 = all_data[:len(train)]\ntest2 = all_data[len(train):]\ntrain['SMC'] = train2['SMC']","804be5a9":"fig, ax = plt.subplots(5, 3, figsize = (10,13))\n\nax[0,0].plot(train2.groupby(train2['sensor_1'])['target_carbon_monoxide'].mean(), 'r');\nax[0,1].plot(train2.groupby(train2['sensor_1'])['target_benzene'].mean(), 'r');\nax[0,2].plot(train2.groupby(train2['sensor_1'])['target_nitrogen_oxides'].mean(), 'r');\n\nax[1,0].plot(train2.groupby(train2['sensor_2'])['target_carbon_monoxide'].mean(), 'b');\nax[1,1].plot(train2.groupby(train2['sensor_2'])['target_benzene'].mean(), 'b');\nax[1,2].plot(train2.groupby(train2['sensor_2'])['target_nitrogen_oxides'].mean(), 'b');\n\nax[2,0].plot(train2.groupby(train2['sensor_3'])['target_carbon_monoxide'].mean(), 'y');\nax[2,1].plot(train2.groupby(train2['sensor_3'])['target_benzene'].mean(), 'y');\nax[2,2].plot(train2.groupby(train2['sensor_3'])['target_nitrogen_oxides'].mean(), 'y');\n\nax[3,0].plot(train2.groupby(train2['sensor_4'])['target_carbon_monoxide'].mean(), 'black');\nax[3,1].plot(train2.groupby(train2['sensor_4'])['target_benzene'].mean(), 'black');\nax[3,2].plot(train2.groupby(train2['sensor_4'])['target_nitrogen_oxides'].mean(), 'black');\n\nax[4,0].plot(train2.groupby(train2['sensor_5'])['target_carbon_monoxide'].mean(), 'violet');\nax[4,1].plot(train2.groupby(train2['sensor_5'])['target_benzene'].mean(), 'violet');\nax[4,2].plot(train2.groupby(train2['sensor_5'])['target_nitrogen_oxides'].mean(), 'violet');\n\nax[0,0].set_title('sensor_1-CO')\nax[0,1].set_title('sensor_1-Benzene')\nax[0,2].set_title('sensor_1-NOx')\n\nax[1,0].set_title('sensor_2-CO')\nax[1,1].set_title('sensor_2-Benzene')\nax[1,2].set_title('sensor_2-NOx')\n\nax[2,0].set_title('sensor_3-CO')\nax[2,1].set_title('sensor_3-Benzene')\nax[2,2].set_title('sensor_3-NOx')\n\nax[3,0].set_title('sensor_4-CO')\nax[3,1].set_title('sensor_4-Benzene')\nax[3,2].set_title('sensor_4-NOx')\n\nax[4,0].set_title('sensor_5-CO')\nax[4,1].set_title('sensor_5-Benzene')\nax[4,2].set_title('sensor_5-NOx')\n\nfig.tight_layout()\nplt.show()","ecf97c62":"tg = ['target_nitrogen_oxides', 'target_benzene', 'target_carbon_monoxide']\nfeatures = ['deg_C', 'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\nfig, ax = plt.subplots(len(tg), len(features), figsize=(20, 10))\nn = 0\nm = 0\nfor i in tg:\n    m = 0\n    for f in features:\n        p = sns.regplot(train2.index, np.log(train2[i]) \/ train2[f], ax = ax[n, m]);\n        p.set(xlabel = f, ylabel= i)\n        m += 1\n    n += 1\nplt.tight_layout()\nplt.show()","0d562df3":"features = ['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4' ,'sensor_5', 'deg_C']\ndef plot_sensor(name):\n    \n    plt.figure(figsize=(16,4))\n\n    plt.plot(all_data.index[:len(train)], train[name], label='train')\n    plt.plot(all_data.index[len(train):] + len(train), test[name], label='test')\n    plt.ylabel(name)\n    plt.legend()\n    plt.show()\n\nfor col in train[features].columns:\n    plot_sensor(col)","801f5de9":"tg = ['target_nitrogen_oxides', 'target_benzene', 'target_carbon_monoxide']\nfeatures = ['relative_humidity', 'absolute_humidity']\nfig, ax = plt.subplots(len(tg), len(features), figsize=(20, 10))\nn = 0\nm = 0\nfor i in tg:\n    m = 0\n    for f in features:\n        p = sns.regplot(train2.index, np.log(train2[i]) \/ train2[f], ax = ax[n, m]);\n        p.set(xlabel = f, ylabel= i)\n        m += 1\n    n += 1\nplt.tight_layout()\nplt.show()","b2d76a2b":"plt.figure(figsize=(12,12))\nsns.heatmap(train2.corr());","9b14f47e":"fig, ax = plt.subplots(3, 3, figsize = (20,15))\nsns.boxplot(train2['year'], train2['target_carbon_monoxide'], ax = ax[0, 0]);\nsns.boxplot(train2['year'], train2['target_benzene'], ax= ax[0, 1]);\nsns.boxplot(train2['year'], train2['target_nitrogen_oxides'], ax = ax[0, 2]);\n\nsns.boxplot(train2['month'], train2['target_carbon_monoxide'], ax = ax[1, 0]);\nsns.boxplot(train2['month'], train2['target_benzene'], ax= ax[1, 1]);\nsns.boxplot(train2['month'], train2['target_nitrogen_oxides'], ax = ax[1, 2]);\n\nsns.boxplot(train2['hour'], train2['target_carbon_monoxide'], ax = ax[2,0]);\nsns.boxplot(train2['hour'], train2['target_benzene'], ax= ax[2,1]);\nsns.boxplot(train2['hour'], train2['target_nitrogen_oxides'], ax = ax[2,2]);\n\nplt.show();","36a8ebe2":"# **Introduction**\n\n### **This notebook shows EDA only. If you wanna check full notebook with modeling, [Click Here](https:\/\/www.kaggle.com\/junhyeok99\/automl-pycaret)**\n\n ","ac5f7d63":"## **Focused On Air Pollution**","80a81657":"### **HeatMap**\n\n*   **Heatmap shows us that sensor 1~5 are influential feature**\n*   **But 'sensor_3' looks different from others**\n\n#### **Need to check sensor_3 feature_importance later!!**","94280fae":"### **BoxPlot**\n\n#### **Shows that Month data, Hour data are influential because of the temp!**","e304ee1f":"![](https:\/\/www.navy.ac.kr:10001\/intro\/images\/sang_01.jpg)","0ba2664e":"## [Check This Notebook](https:\/\/www.kaggle.com\/junhyeok99\/pycaret-automl-baseline) If you wanna check **pycaret_baseline**","9cf5d2bb":"## There are 5 sensors in train, test data. So we need to check about sensors\n### Below image shows us a criteria about air pollution\n\\\n\\\n![image.png](attachment:863415f6-dfab-4afa-a66e-147f7f85c61e.png)","d1b642b9":"## **Humidity & Target relationship**","291cc69d":"## Checking above image, we can guess about targets units! (ppm or etc..)\n\n\n## *But we can't analyze sensor values with above image data*\n\n## So, we need to check about relation between **sensor data** and **target values**","1c3ac3cb":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRbDGlfpRiStDHa6mcsTgaPHyFpgwQPf3x27A&usqp=CAU)","34c4b833":"## **Time seires train & test data visualization**\n\n####  - Refered to [LSTM Encoder-Decoder- starter (Keras)](https:\/\/www.kaggle.com\/remekkinas\/lstm-encoder-decoder-starter-keras)\n#### To recognize the trend of data","a030cf0e":"# **TPS - July 2021**","0ea6b464":"## **\u2191\u2191\u2191Sensor_4 & deg_C data seem like have a similar trend\u2191\u2191\u2191**","b4131ada":"### With above visualization, we can guess that **target values and sensors values have proportionality relationship!**\n\n### It's clear that **\"sensor\"** is in proportionality relationship with **\"Degree of pollutant density\"**\n## **Because it is just a SENSOR to measure**\n\n### So, we can clear to handle those outliers\n\n### **If you wanna handle outliers or skewed data, you can use scaler(In my case, I used log-scaling)**"}}