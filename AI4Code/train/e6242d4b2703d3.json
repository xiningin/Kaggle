{"cell_type":{"08083653":"code","c447250b":"code","3b4258a5":"code","a988a1a5":"code","e3854e37":"code","25f77f89":"code","dedd6808":"code","79fc1949":"code","17b75a5b":"code","de135b79":"code","32b1812c":"code","7be610ba":"code","823b53bd":"code","c78a7e82":"code","4d75c927":"code","e8bdcab8":"code","4536cea8":"code","b56f8602":"code","f6dae0a5":"code","8062d390":"code","390d46c5":"code","6734385a":"code","db75a583":"code","14474844":"code","ab629995":"code","9bcade63":"code","54254b25":"code","24202686":"code","03a9315f":"markdown","94fc3fa6":"markdown","2f759a59":"markdown","141d6cb2":"markdown","a684304e":"markdown","e68ab310":"markdown","07e7d3ad":"markdown","e95fcb59":"markdown","4414b731":"markdown","7b1e509c":"markdown","ee69b67e":"markdown","626c4b54":"markdown","61b20d57":"markdown","1e69bb46":"markdown","04c03a41":"markdown","ffe889dc":"markdown","e0f5ee9a":"markdown","466a7ca2":"markdown","f0c39ab2":"markdown","0674816f":"markdown","235b970d":"markdown","d092aad3":"markdown","239ac4b6":"markdown","dd70ee22":"markdown","41670c4b":"markdown","1c7db6ee":"markdown"},"source":{"08083653":"# Setup\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport math \n\n# for time series\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\nimport plotly.offline as py\n\npy.init_notebook_mode()\npd.plotting.register_matplotlib_converters()\nsns.set_style(\"whitegrid\")\npd.set_option(\"display.max_columns\", 30)\n\n# load data\npatient_path = \"..\/input\/coronavirusdataset\/patient.csv\"\ntime_path = \"..\/input\/coronavirusdataset\/time.csv\"\nroute_path = \"..\/input\/coronavirusdataset\/route.csv\"\npatient = pd.read_csv(patient_path, index_col=\"patient_id\")\ntime = pd.read_csv(time_path, index_col=\"date\")\nroute = pd.read_csv(route_path, index_col=\"patient_id\")\n\nprint(f\"Last Update: {pd.datetime.today().strftime('%m\/%d\/%Y')}\")","c447250b":"patient.head()","3b4258a5":"patient.info()","a988a1a5":"time.head()","e3854e37":"# format date columns:\ndate_cols = [\"confirmed_date\", \"released_date\", \"deceased_date\"]\nfor col in date_cols:\n    patient[col] = pd.to_datetime(patient[col])\n\ntime.index = pd.to_datetime(time.index)\n\n# correct single spelling mistake:\npatient.loc[patient[\"sex\"]==\"feamle\", \"sex\"] = \"female\"\n# correct single empty birth_year entry\npatient.loc[patient[\"birth_year\"]==\" \", \"birth_year\"] = np.nan\npatient[\"birth_year\"] = patient[\"birth_year\"].astype(\"float\")\n\n# Derive features:\n\n#status by gender:\npatient[\"state_by_gender\"] = patient[\"state\"] + \"_\" + patient[\"sex\"]\n\n# age:\n# approximation, using 2019 - assuming 3\/4 are born after march\/current month of 2020\npatient[\"age\"] = 2019 - patient[\"birth_year\"]\n\n\ndef group_age(age):\n    \"\"\"This function is used to group patients by age\n    in steps of 10 years. It returns the age range\n    of the patient as a string.\n    \"\"\"\n    if age >= 0: # not NaN\n        if age % 10 != 0:\n            lower = int(math.floor(age \/ 10.0)) * 10\n            upper = int(math.ceil(age \/ 10.0)) * 10 - 1\n            return f\"{lower}-{upper}\"\n        else:\n            lower = int(age)\n            upper = int(age + 9) \n            return f\"{lower}-{upper}\"\n    return \"Unknown\"\n\n\npatient[\"age_range\"] = patient[\"age\"].apply(group_age)\n\n# duration of infection:\npatient[\"time_to_release_since_confirmed\"] = patient[\"released_date\"] - patient[\"confirmed_date\"]\npatient[\"time_to_death_since_confirmed\"] = patient[\"deceased_date\"] - patient[\"confirmed_date\"]\npatient[\"duration_since_confirmed\"] = patient[[\"time_to_release_since_confirmed\", \"time_to_death_since_confirmed\"]].min(axis=1)\npatient[\"duration_days\"] = patient[\"duration_since_confirmed\"].dt.days\n\n# for case fetality rate:\npatient[\"state_deceased\"] = (patient[\"state\"] == \"deceased\").astype(\"int8\")\n\n# for underlying diseases:\npatient.loc[patient[\"disease\"] == 1, \"disease\"] = \"Underlying disease\"\npatient.loc[patient[\"disease\"] == 0, \"disease\"] = \"No underlying disease\"\npatient.loc[patient[\"disease\"].isna(), \"disease\"] = \"Unknown\"","25f77f89":"# Acc tests\nfig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"test\"],\n                    mode='lines',\n                    name=\"Acc. tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"negative\"],\n                    mode='lines',\n                    name=\"Acc. negative tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"confirmed\"],\n                    mode='lines',\n                    name=\"Acc. positive tests\")))\nfig.update_layout(title=\"Accumulated test results over time\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\",\n                   #yaxis_type=\"log\",\n                   template=\"seaborn\")\nfig.show()\n\n# Acc cases\nfig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"confirmed\"],\n                    mode='lines',\n                    name=\"Acc. confirmed\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"released\"],\n                    mode='lines',\n                    name=\"Acc. released\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"deceased\"],\n                    mode='lines',\n                    name=\"Acc. deceased\")))\nfig.update_layout(title=\"Accumulated cases over time\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\",\n                   #yaxis_type=\"log\",\n                   template=\"seaborn\")\nfig.show()\n","dedd6808":"regions = time.drop([\"time\", \"test\",\"negative\", \"confirmed\", \"released\", \"deceased\"], axis=1)\nregions = regions.transpose(copy=True)\n\n# joining the dfs makes datetimes unaccessable, so convert them to str first, dicard hour info:\nregions.columns = [str(col)[:10] for col in regions.columns]\n\n# region coordinates for provinces are those of the province capital.\nregion_coordinates = pd.DataFrame({\n                \"latitude\":[37.532600, 35.166668, 35.834236, 37.456257, 35.166668, 36.351002,\n                      35.549999, 26.291321, 37.156000, 37.87472, 36.63722, 36.32139,\n                      35.82194, 34.99014, 36.56556, 35.22806, 33.499621],\n                \"longitude\": [127.024612, 129.066666, 128.534210, 126.705208,\n                        126.916664, 127.385002, 129.316666, 127.165604, 127.006000,\n                        127.73417, 127.48972, 127.41972, 127.14889, 126.47899, 128.725,\n                        128.68111, 126.531188]}, \n                index=['Seoul', 'Busan', 'Daegu', 'Incheon', 'Gwangju', 'Daejeon',\n                        'Ulsan', 'Sejong', 'Gyeonggi-do', 'Gangwon-do',\n                        'Chungcheongbuk-do', 'Chungcheongnam-do', 'Jeollabuk-do',\n                        'Jeollanam-do', 'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do'])\n\nregions = region_coordinates.join(regions, how=\"left\")\n\nmarker_scale_factor = 0.4 # scale marker size based on number confirmed to the power of this factor\nroute_map = folium.Map(location=[36.5,128],\n                       min_zoom=3,\n                       max_zoom=10,\n                       zoom_start=6.5,\n                       tiles=\"cartodbpositron\")\n\nfor lat, lon, date in zip(regions[\"latitude\"],\n                          regions[\"longitude\"],\n                          regions.iloc[:, -1]): # iloc for last date\n    folium.CircleMarker([lat, lon],\n                  color=\"red\",\n                  radius=math.pow(date, marker_scale_factor),\n                  fill=True,\n                  fill_color=\"crimson\",\n                  fill_opacity=0.2).add_to(route_map)\nroute_map","79fc1949":"# Reason of infection\nreason_order = list(patient[\"infection_reason\"].value_counts().index)\n\nplt.figure(figsize=(12, 8))\nsns.countplot(y = \"infection_reason\",\n              data=patient,\n              order=reason_order)\nplt.title(\"Known reasons of infection\", fontsize=16)\nplt.xlabel(\"Count\", fontsize=16)\nplt.ylabel(\"Reason of infection\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","17b75a5b":"states = pd.DataFrame(patient[\"state\"].value_counts())\nstates[\"status\"] = states.index\nstates.rename(columns={\"state\": \"count\"}, inplace=True)\n\nfig = px.pie(states,\n             values=\"count\",\n             names=\"status\",\n             title=\"Current state of patients\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"value+percent+label\")\nfig.show()","de135b79":"plt.figure(figsize=(10, 8))\nsns.countplot(x = \"sex\",\n            hue=\"state\",\n              order=[\"female\", \"male\"],\n            hue_order=[\"isolated\", \"released\", \"deceased\"],\n            data=patient)\nplt.title(\"Patient state by gender\", fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","32b1812c":"age_ranges = sorted(set([ar for ar in patient[\"age_range\"] if ar != \"Unknown\"]))\ncustom_palette = [\"blue\", \"green\", \"red\"]\n# figure\nplt.figure(figsize=(12, 8))\nsns.countplot(x = \"age_range\",\n            hue=\"state\",\n            order=age_ranges,\n            hue_order=[\"isolated\", \"released\", \"deceased\"],\n            palette=custom_palette,\n            data=patient)\nplt.title(\"State by age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper right\")\nplt.show()\n\n# stats\ndeceased_age_dist = patient.loc[patient[\"state_deceased\"] == 1][\"age\"].describe()\nmedian_age_of_deceased = int(patient.loc[patient[\"state_deceased\"] == 1][\"age\"].median())\nmean_age_of_deceased = int(deceased_age_dist[\"mean\"])\nmean_age_of_deceased_std = int(deceased_age_dist[\"std\"])\nmin_age_of_deceased = int(deceased_age_dist[\"min\"])\n\nprint(f\"The mean age of those who died is {mean_age_of_deceased} +\/- {mean_age_of_deceased_std} years (median: {median_age_of_deceased}).\")\nprint(f\"The youngest patient who died was {min_age_of_deceased} years old.\")","7be610ba":"# define order\nage_gender_hue_order =[\"isolated_female\", \"released_female\", \"deceased_female\",\n                       \"isolated_male\", \"released_male\", \"deceased_male\"]\n# color list:\ncustom_palette = [\"royalblue\", \"lightgreen\", \"orangered\", \"blue\", \"green\", \"red\"]\n\nplt.figure(figsize=(12, 8))\nsns.countplot(x =\"age_range\",\n              hue=\"state_by_gender\",\n              order=age_ranges,\n              hue_order=age_gender_hue_order,\n              palette=custom_palette,\n              data=patient)\nplt.title(\"State by gender and age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper right\")\nplt.show()","823b53bd":"# exclude post mortem confirmations:\nexcl_post_mortem = patient.loc[(patient[\"time_to_death_since_confirmed\"].astype(\"int64\") > 0) |\n                               (patient[\"time_to_release_since_confirmed\"].astype(\"int64\") > 0)]\ndurations = excl_post_mortem[[\"time_to_release_since_confirmed\", \"time_to_death_since_confirmed\"]].describe()\n\n# Duration boxplot\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"state\",\n            y=\"duration_days\",\n            order=[\"released\", \"deceased\"],\n            data=excl_post_mortem)\nsns.swarmplot(x=\"state\",\n            y=\"duration_days\",\n            order=[\"released\", \"deceased\"],\n            size= 8.0,  \n            color=\".25\",  \n            data=excl_post_mortem)\nplt.title(\"Time from confirmation to release or death \\n (expluding post mortem confirmations)\",\n          fontsize=16)\nplt.xlabel(\"State\", fontsize=16)\nplt.ylabel(\"Days\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n\n# boxplot by gender\norder_duration_sex = [\"female\", \"male\"]\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"sex\",\n            y=\"duration_days\",\n            order=order_duration_sex,\n            hue=\"state\",            \n            hue_order=[\"released\", \"deceased\"],\n            data=excl_post_mortem)\nplt.title(\"Time from confirmation to release or death by gender\\n (expluding post mortem confirmations)\",\n          fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"Days\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n\n# boxplot by age_range\norder_duration_age = sorted(patient[\"age_range\"].unique())[:-1]\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"age_range\",\n            y=\"duration_days\",\n            order=order_duration_age,\n            hue=\"state\",            \n            hue_order=[\"released\", \"deceased\"],\n            data=excl_post_mortem)\nplt.title(\"Time from confirmation to release or death by age range\\n (expluding post mortem confirmations)\",\n          fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Days\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","c78a7e82":"isolated = patient.loc[patient[\"state\"] == \"isolated\"].shape[0]\nupper_quartile_duration_death = durations[\"time_to_death_since_confirmed\"][\"75%\"].days\nmax_duration_death = durations[\"time_to_death_since_confirmed\"][\"max\"].days\nmedian_duration_death = durations\n\npatient[\"time_since_confirmation\"] = pd.to_datetime(\"today\") - patient[\"confirmed_date\"]\npatients_over_upper_quartile = patient.loc[(patient[\"time_since_confirmation\"].dt.days > upper_quartile_duration_death) & \n                                           (patient[\"state\"] == \"isolated\")].shape[0]\npatients_over_max = patient.loc[(patient[\"time_since_confirmation\"].dt.days > max_duration_death) & \n                                           (patient[\"state\"] == \"isolated\")].shape[0]\nupper_perc = round((patients_over_upper_quartile \/ isolated * 100), 2)\nmax_perc = round((patients_over_max \/ isolated * 100), 2)\n\nprint(f\"Currently, {isolated} patients are isolated in South Korea.\")\nprint(f\"{patients_over_upper_quartile} ({upper_perc}%) of those have been isolated for more than {upper_quartile_duration_death} days (75th quartile of deceased).\")","4d75c927":"disease_info_yes = patient.loc[patient[\"disease\"] == \"Underlying disease\"].shape[0]\ndisease_yes_deceased = patient.loc[(patient[\"disease\"] == \"Underlying disease\") & (patient[\"state\"] == \"deceased\")].shape[0]\ndisease_info_no = patient.loc[patient[\"disease\"] == \"No underlying disease\"].shape[0]\ndisease_info_all = disease_info_yes + disease_info_no\ndeceased_all = patient[\"state_deceased\"].sum()\nperc_disease = round((disease_info_yes \/ disease_info_all * 100),1) # percentage of disease known\nperc_disease_died = round((disease_info_yes \/ disease_yes_deceased * 100),1) # pre-existing diseased who died\nperc_deceased_disease = round((disease_yes_deceased \/ deceased_all * 100),1) # deceased with pre-existing disease\n\n\nprint(f\"Disease information is available for {disease_info_all} patients.\")\nprint(f\"Out of these {disease_info_all} patients, {disease_info_yes} have\/had an underlying disease ({perc_disease}%).\")\nprint(f\"Out of these {disease_info_yes} patients with an underlying disease, {disease_yes_deceased} have died ({perc_disease_died}%).\")\nprint(f\"Out of the {deceased_all} patients that died, {disease_yes_deceased} had an underlying disease ({perc_deceased_disease}%).\")\n\n# age of deceased with no known underlying disease:\nage_mean = int(patient.loc[(patient[\"disease\"]==\"Unknown\") & (patient[\"state\"]==\"deceased\")][\"age\"].mean())\nage_median = int(patient.loc[(patient[\"disease\"]==\"Unknown\") & (patient[\"state\"]==\"deceased\")][\"age\"].median())\nage_min = int(patient.loc[(patient[\"disease\"]==\"Unknown\") & (patient[\"state\"]==\"deceased\")][\"age\"].min())\nage_max = int(patient.loc[(patient[\"disease\"]==\"Unknown\") & (patient[\"state\"]==\"deceased\")][\"age\"].max())\n\nprint(f\"The deceased with no underlying disease were between {age_min} and {age_max} years old (mean: {age_mean}, median: {age_median}).\")\n\nhue_order_disease = [\"Underlying disease\", \"No underlying disease\", \"Unknown\"]\nplt.figure(figsize=(10, 8))\nsns.countplot(data=patient,\n            x=\"state_deceased\",\n            hue=\"disease\",\n            order=[1],\n            hue_order=hue_order_disease)\nplt.title(\"Underlying diseases of deceased\", fontsize=16)\nplt.xlabel(\"\", fontsize=16)\nplt.ylabel(\"Number of cases\", fontsize=16)\nplt.xticks(fontsize=0)\nplt.yticks(fontsize=12)\nplt.show()","e8bdcab8":"total_confirmed = time.sort_values(by=\"date\", ascending=False).iloc[0][\"confirmed\"]\ntotal_deceased = time.sort_values(by=\"date\", ascending=False).iloc[0][\"deceased\"]\ntotal_recovered = time.sort_values(by=\"date\", ascending=False).iloc[0][\"released\"]\ntotal_cfr = round((total_deceased \/ total_confirmed * 100),1)\n\nprint(f\"The current CFR for COVID-19 in South Korea is {total_cfr} %.\")\nprint(f\"This number is based on {total_confirmed} confirmed cases and {total_deceased} fetalities.\")\nprint(\"Calculating the CFR using the number of released patients instead of confirmed cases yields a much higher - at this point in time unrealistic - number\")","4536cea8":"#calc numbers and rates\ntotal_confirmed = patient.shape[0]\nfemales = patient.loc[patient[\"sex\"] == \"female\"].shape[0]\nmales = patient.loc[patient[\"sex\"] == \"male\"].shape[0]\n\nfemales_deceased = patient.loc[(patient[\"sex\"] == \"female\") & (patient[\"state\"] == \"deceased\")].shape[0]\nmales_deceased = patient.loc[(patient[\"sex\"] == \"male\") & (patient[\"state\"] == \"deceased\")].shape[0]\ntotal_deceased = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\n\nfemale_cfr = round((females_deceased \/ females * 100),1)\nmale_cfr = round((males_deceased \/ females * 100),1)\ntotal_cfr = round((total_deceased \/ total_confirmed * 100),1)\ntotal_cfr_sex_known = round(((females_deceased + males_deceased) \/ (females + males) * 100),1)\n\n#extrapolation\nfraction_sex_known = patient.loc[patient[\"sex\"].notna()].shape[0] \/ total_confirmed\n\nestimated_female_patients = int(round(females \/ fraction_sex_known, 0))\nestimated_male_patients = int(round(males \/ fraction_sex_known, 0))\nextr_female_rate = round((female_cfr * fraction_sex_known),1)\nextr_male_rate = round((male_cfr * fraction_sex_known),1)\n\n# make dataframe\ncfr_gender = pd.DataFrame({\"Known number of patients\": [females,\n                                                             males,\n                                                             total_confirmed],\n                                      \"Number deceased\": [females_deceased,\n                                                          males_deceased,\n                                                          total_deceased],\n                                      \"CFR [%] (gender known)\": [female_cfr,\n                                                                              male_cfr,\n                                                                              total_cfr_sex_known],\n                                      \"Estimated number of total patients\": [estimated_female_patients,\n                                                                       estimated_male_patients,\n                                                                       estimated_female_patients + estimated_male_patients],\n                                      \"Estimated total CFR [%]\": [extr_female_rate,\n                                                                           extr_male_rate,\n                                                                           total_cfr]}, \n                                     index=[\"Female\", \"Male\", \"Total\"])\ncfr_gender.index.name = \"Gender\"\ncfr_gender","b56f8602":"gender_order = [\"Female\", \"Male\"]\nplt.figure(figsize=(10, 8))\nsns.barplot(x=cfr_gender.index,\n            y=cfr_gender[\"Estimated total CFR [%]\"],\n            order = gender_order,\n            palette=[\"grey\"])\nplt.title(\"Estimated CFR by gender\", fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"CFR [%]\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","f6dae0a5":"#rate by age:\ncfr_age = pd.DataFrame(patient.groupby(\"age_range\")[\"state_deceased\"].describe()[[\"count\", \"mean\"]])\ncfr_age.rename(columns={\"count\":\"Number of patients\",\"mean\":\"CFR\"}, inplace=True)\ncfr_age.drop(\"Unknown\", axis=0, inplace=True)\n\n# add total rate for age known:\ntotal_patients_w_age = patient.loc[patient[\"age\"].notna()].shape[0]\ntotal_deceased_w_age = patient.loc[(patient[\"age\"].notna()) & (patient[\"state\"] == \"deceased\")].shape[0]\ntotal_rate_w_age = total_deceased_w_age \/ total_patients_w_age\ntotal_w_age_cfr = pd.DataFrame({\"Number of patients\": total_patients_w_age,\n                                     \"CFR\": total_rate_w_age},\n                                    index=[\"Total (age known)\"])\n\n\n#extrapolation\nfraction_age_known = patient.loc[patient[\"age\"].notna()].shape[0] \/ total_confirmed\n\n# df:\ncfr_age[\"Number of patients\"] = cfr_age[\"Number of patients\"].astype(\"int64\")\ncfr_age[\"CFR\"] = round(cfr_age[\"CFR\"],3) * 100\ncfr_age.rename(columns={\"CFR\":\"CFR [%] (age known)\"}, inplace=True)\ncfr_age.index.name = \"Age range\"\ncfr_age[\"Estimated number of total patients\"] = (cfr_age[\"Number of patients\"] \/ fraction_age_known).astype(\"int64\")\ncfr_age[\"Estimated total CFR [%]\"] = round((cfr_age[\"CFR [%] (age known)\"] * fraction_age_known), 1)\n\ncfr_age\n\n","8062d390":"plt.figure(figsize=(12, 8))\nsns.barplot(x=cfr_age.index,\n            y=cfr_age[\"Estimated total CFR [%]\"],\n            order = age_ranges,\n            palette=[\"grey\"])\nplt.title(\"Estimated CFR by age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"CFR [%]\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","390d46c5":"#rate by gender and age:\ncfr_gender_age = pd.DataFrame(patient.groupby([\"age_range\", \"sex\"])[\"state_deceased\"].describe()[[\"count\", \"mean\"]])\ncfr_gender_age.rename(columns={\"count\":\"Number of patients\",\"mean\":\"CFR\"}, inplace=True)\ncfr_gender_age.drop(\"Unknown\", axis=0, inplace=True)\n\n#formatting:\ncfr_gender_age[\"Number of patients\"] = cfr_gender_age[\"Number of patients\"].astype(\"int64\")\ncfr_gender_age[\"CFR\"] = round(cfr_gender_age[\"CFR\"],3) * 100\ncfr_gender_age.rename(columns={\"CFR\":\"CFR [%] (gender and age known)\"}, inplace=True)\n\n# only for plotting:\ncfr_gender_age[\"age_range\"] = list(x[0] for x in cfr_gender_age.index)\ncfr_gender_age[\"gender\"] = list(x[1] for x in cfr_gender_age.index)\n\n#extrapolation\nfraction_age_known = patient.loc[patient[\"age\"].notna()].shape[0] \/ total_confirmed\nfraction_sex_known = patient.loc[patient[\"sex\"].notna()].shape[0] \/ total_confirmed\n\ncfr_gender_age[\"Estimated total number of patients\"] = (cfr_gender_age[\"Number of patients\"] \/ fraction_age_known).astype(\"int64\")\ncfr_gender_age[\"Estimated total CFR [%]\"] = round((cfr_gender_age[\"CFR [%] (gender and age known)\"] * fraction_age_known), 1)\n# show table\ncfr_gender_age.drop([\"age_range\", \"gender\"], axis=1)","6734385a":"plt.figure(figsize=(12, 8))\nsns.barplot(x=\"age_range\",\n            y=cfr_gender_age[\"Estimated total CFR [%]\"],\n            order = age_ranges,\n            hue=\"gender\",\n            hue_order=[\"female\", \"male\"],\n            palette=[\"darkgrey\", \"black\"],\n            data=cfr_gender_age)\nplt.title(\"Estimated CFR by age and gender\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"CFR [%]\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper left\")\nplt.show()","db75a583":"# using data from patient.csv:\ninfected_patient = patient.shape[0]\nrecovered_patient = patient.loc[patient[\"state\"] == \"released\"].shape[0]\ndeceased_patient = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\ndead_per_recovered_p = deceased_patient \/ recovered_patient\ndead_per_recovered_p\n\n# using data from time.csv:\ninfected_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"confirmed\"]\nrecovered_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"released\"]\ndeceased_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"deceased\"]\ndead_per_recovered_t = deceased_time \/ recovered_time\n\noutcome = pd.DataFrame({\"Confirmed\": [infected_patient, infected_time],\n                                \"Recovered\":[recovered_patient, recovered_time],\n                                \"Deceased\": [deceased_patient, deceased_time]}, index=[\"patient.csv\", \"time.csv\"])\noutcome.index.name=\"Data source\"\noutcome[\"Recovered [%]\"] = round((outcome[\"Recovered\"] \/ outcome[\"Confirmed\"] * 100), 1)\noutcome[\"Deceased [%]\"] = round((outcome[\"Deceased\"] \/ outcome[\"Confirmed\"] * 100), 1)\noutcome[\"Deceased \/ Recovered [%]\"] = round((outcome[\"Deceased\"] \/ outcome[\"Recovered\"] * 100), 1)\noutcome[\"Data source\"] = outcome.index # only for plotting\noutcome.drop(\"Data source\", axis=1)","14474844":"outcome_fig = outcome.melt(\"Data source\", var_name=\"columns\",  value_name=\"values\")\n\nsns.catplot(x=\"columns\",\n            y=\"values\",\n            hue=\"Data source\", \t\n            kind=\"bar\",   \n            data=outcome_fig.iloc[2:6])\nplt.title(\"Outcomes of disease so far\", fontsize=16)\nplt.xlabel(\"Outcome\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","ab629995":"# utility function:\n\ndef prophet_prediction(fit_df, n_periods, **kwargs):\n    \"\"\"Fit FB Prophet to provided DataFrame, predict n_periods in the \n    future. Return tuple of fitted predictor and result as a\n    pandas DataFrame containing ds, the target and upper and lower bounds.\n    Provided df must be two columns 'ds' and 'y'. n_periods must be an int.\n    Any provided keywords are passed on to Prophet.\n    \"\"\"\n    # create instance of Prophet\n    proph = Prophet(**kwargs)\n    # fit model\n    proph.fit(fit_df)\n    # define future dataframe \/ length of prediction\n    future_df = proph.make_future_dataframe(periods=n_periods)\n    # make predictions and store as dataframe\n    pred = proph.predict(future_df)\n    \n    #format df columns:\n    pred[\"yhat\"] = pred[\"yhat\"].astype(\"int64\")\n    pred[\"yhat_lower\"] = pred[\"yhat_lower\"].astype(\"int64\")\n    pred[\"yhat_upper\"] = pred[\"yhat_upper\"].astype(\"int64\")\n    \n    # return fitted model and predicted data as tuple\n    return (proph, pred[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\"]])","9bcade63":"#---------This is a test of the model based on historical data------------\n\n# From the EDA we know that the confirmed cases started to increase sharply around 2020-02-20. \n# We will use this as the starting point to fit our model.\nstart_date = \"2020-02-20\"\nend_date = \"2020-03-05\"\n\n# prep input for prophet:\nconfirmed_data = pd.DataFrame({\"ds\": time.index, \"y\": time[\"confirmed\"]})\nconfirmed_data = confirmed_data[start_date:end_date]\n\n# use utility function for modeling:\npred_confirmed = prophet_prediction(confirmed_data, 5)[1]\n\n# Add actual data to dataframe for comparison and calculate absolute percentage errors.\npred_confirmed[\"actual confirmed\"] =  time[start_date:\"2020-03-10\"][\"confirmed\"].values\npred_confirmed[\"Difference [%]\"] = round((abs(pred_confirmed[\"yhat\"] - pred_confirmed[\"actual confirmed\"]) \n                                          \/ pred_confirmed[\"actual confirmed\"] * 100),2)\n\n# Mean absolute percentage error (MAPE):\nmape = round(np.mean(pred_confirmed[\"Difference [%]\"].tail(5)),2)\nprint(f\"MAPE of confirmed case predictions for the time period 2020-03-06 - 2020-03-10: {mape}%.\")\npred_confirmed[[\"ds\", \"yhat\", \"yhat_lower\", \"yhat_upper\", \"actual confirmed\", \"Difference [%]\"]].tail(5)","54254b25":"start_date = \"2020-02-20\"\nend_date = \"2020-03-10\" # Date of modeling\ndays_to_predict = 10\n\nactual_confirmed = list(time[\"2020-03-11\":][\"confirmed\"].values)\nwhile len(actual_confirmed) < 10:\n    actual_confirmed.append(np.nan)\n\nconfirmed_data = pd.DataFrame({\"ds\": time.index, \"y\": time[\"confirmed\"]})\nconfirmed_data = confirmed_data[start_date:end_date]\nconfirmed_w_pred = prophet_prediction(confirmed_data, days_to_predict)\nresult = confirmed_w_pred[1].tail(10).copy()\nresult.index = result[\"ds\"]\nresult.index.name = \"Date\"\nresult[\"actual confirmed\"] = actual_confirmed\nresult[\"Difference [%]\"] = round((abs(result[\"yhat\"] - result[\"actual confirmed\"]) \n                                          \/ result[\"actual confirmed\"] * 100),2)\nresult.drop(\"ds\", axis=1)","24202686":"# Plot modeled data:\nfig = plot_plotly(confirmed_w_pred[0], confirmed_w_pred[1])\nfig.update_layout(title={\"text\": \"Predicted development of confirmed cases\", \"x\": 0.5, \"xanchor\": \"center\"},\n                  xaxis_title=\"Date\",\n                  yaxis_title=\"Number of cases\")\npy.iplot(fig)","03a9315f":"## 8. Predicting further development of cases\nLet's see how good we can predict the number of confirmed cases for the next ten days (as of 2020-03-10) with the easy-to-use Prophet from Facebook.  \n  \nFirst, let's build a model and test it on five days of historical data:","94fc3fa6":"## 1.1 Data processing","2f759a59":"The above test results for a five day period are very good.  \n(yhat is the predicted value for the number of confirmed cases. yhat_upper and yhat_lower is the uncertainty interval.)  \n  \n  \nLet's now try to predict the number of confirmed cases for the next ten days:","141d6cb2":"Actual data points are shown as black dots. The blue line is the predicted value, and the blue band around it represents the uncertainty interval.","a684304e":"## 3. Overview of patient state  \nThe following data comes from the patient.csv file and may differ from the data above from the time.csv file, due to different update times of the files","e68ab310":"## 1. Data inspection and processing","07e7d3ad":"## 2. Test results and spread of the infection","e95fcb59":"## 3.2 Patient state by age","4414b731":"Most rows only contain information about the coutry, the date of confirmation of the infection and the current state.  \nWe also have information on the gender and year of birth of several houndred patients.  \nThe reason of infection and who infected whom is only shown\/known for a few patients.  ","7b1e509c":"## 2.1 Affected regions:\nCircle marker are placed on the Cities and the province capitals.  \nThe size of the circles represents tu number of confirmed cases to the power of a scaling factor (currently 0.4)","ee69b67e":"The date the infection was confirmed is not the start of the infection or the symptoms, but it is the closest data we have here.  \nIt is unknown how far the disease has progressed in each of the patients at the time of confirmation.  \nHowerver, this figure does uderline the importance of seeking medical help early, when the first symptoms appear.","626c4b54":"### I will update this notebook as new data becomes available and as my time allows\n### Comments, questions and suggestions are welcome.\n### If you find the notebook useful, please upvote!","61b20d57":"## 3.3 Patient state by gender and age","1e69bb46":"## 5. Role of underlying diseases  ","04c03a41":"## 6.1 CFR by gender","ffe889dc":"## 3.1 Patient state by gender","e0f5ee9a":"## 6.2 CFR by gender and age  ","466a7ca2":"I will update the table with the actual numbers as they become available","f0c39ab2":"Some information about underlying diseases has recently been added to the dataset.","0674816f":"## 7. Outcomes of the disease so far by data source\nThe number of confirmed, recovered and deceased cases can very by data source due to different update times.  \nHere is an overview of the numbers by files in this dataset:","235b970d":"## 4. Duration of infection","d092aad3":"## 6.2 CFR by age","239ac4b6":"## 6. Case fetality rates (CFR)\n#### Note:\n**Gender and age are known for less than 10 % of all patients. **    \nRates in the tables are shown for groups for which age and gender are known, as well as the **estimated total number** of patients in that group.  \n**The estimated numbers are based on the hypothesis that the gender and age distribution among all patients is the same as among those where gender and age are known.**\nAlso, all rates are calculated from the number of confirmed cases.   \nAccording to the WHO, \"Some people become infected but don\u2019t develop any symptoms and don't feel unwell\" [(1)](https:\/\/www.who.int\/news-room\/q-a-detail\/q-a-coronaviruses).  \nSo there certainly are more total (recovered) cases than confirmed ones.\nPlease keep this in mind when interpreting the following numbers. ","dd70ee22":"## Setup","41670c4b":"## 2.2 Reason of infection","1c7db6ee":"# Analysis of COVID-19 data from South Korea\n\nInformation on COVID-19:  \nCoronavirus disease 2019 (COVID-19) is an infectios diseas that was first discovered in Wuhan, China in Dec. 2019, where the outbreak began.\nThe most common syptoms are fever, tiredness and dry cough.\nAbout 80% of the infected recover without special treatment.   \nAround 1 out of every 6 people becomes seriously ill and develops difficulty breathing.  \nOlder people, and those with underlying medical problems, are more likely to develop serious illness.  \nThe disease can spread from person to person through small droplets from the nose or mouth.     \nThe incubation period of the disease is commonly around five days, but ranges from 1-14 days.  \nSource: https:\/\/www.who.int\/news-room\/q-a-detail\/q-a-coronaviruses (retrieved 2020-03-10)  \n  \nFurther information:  \n[Information portal of the WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019)  \n[Information portal of the german Robert Koch Institute](https:\/\/www.rki.de\/EN\/Home\/homepage_node.html)  \n[\nCOVID-19 Global Cases by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University (JHU)\n](https:\/\/www.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6) \n  \n### Content:\n1. Data inspection and processing (useful starter code here)  \n2. Test results and spread of the infection  \n3. Overview of patient state  \n4. Duration of infection  \n5. role of underlying diseases  \n6. Case fetality rates (CFR)  \n7. Outcomes of the disease so far by data source  \n8. Predicting further development of cases\n  \nFor better readability, most of the Code is hidden. Click the \"Code\" buttons to view it."}}