{"cell_type":{"3534acfa":"code","122ce76e":"code","ee409d5f":"code","bcd19b49":"code","8501186a":"code","c52896f1":"code","4a5ca947":"code","a1772bca":"code","07715c2e":"code","ddc28799":"code","a2435e85":"code","9c136a1a":"code","137e5aa7":"code","3bce1f65":"code","0ef3cc1e":"code","77564ca5":"code","6aac5dc2":"code","df0b44cc":"code","f8bb11e4":"code","fcad753e":"code","41b39c6a":"code","932f7a46":"markdown","83b99ad8":"markdown","83636b41":"markdown","a9b2e611":"markdown","4ee28676":"markdown","a4cbfb63":"markdown","e3ab5c40":"markdown","1eae1e88":"markdown","e6c9d814":"markdown","da2c38c6":"markdown","27cbe12c":"markdown","c01646e5":"markdown","d2a6b4b0":"markdown","d6a000c9":"markdown","ba871b96":"markdown","265f320b":"markdown"},"source":{"3534acfa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndata = pd.read_csv('..\/input\/kaggle_datasets.csv')\ndata.head()","122ce76e":"data.shape","ee409d5f":"data_ex0 = data.loc[(data.kernels > 0 ) | (data.upvotes > 0), :]\ndata_ex0.shape","bcd19b49":"data_ex0.describe()","8501186a":"plt.hist(data_ex0.discussions); # The ';' is to avoid showing a message before the chart","c52896f1":"data_ex0.discussions.plot(kind='hist'); ","4a5ca947":"data_ex0.nlargest(10, 'discussions').loc[:,['title','discussions']]","a1772bca":"# Default plot\nplt.figure(figsize=(8,5)) # Specify the figure size\nplt.hist(data_ex0.kernels)\nplt.show()","07715c2e":"# Zoom in to distribution of 0-20 kernels\nplt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, range = (0, 21))\nplt.show()","ddc28799":"# Look at the tail ends\nplt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, range = (100, data_ex0.kernels.max())) # 100 up to highest number of kernels\nplt.show()","a2435e85":"# Zero to 100 kernels in 20 bins\nplt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, range = (0, 100), bins = 20)\nplt.show()","9c136a1a":"# Use a numpy array to specify how the bins are separated\nplt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, bins = np.arange(5, 51, 5)) # 5-10, 10-15... up to 45-50\nplt.show()","137e5aa7":"# Taking logarithm on the x-axis\nplt.figure(figsize=(8,5))\nplt.hist(np.log1p(data_ex0.kernels)) # Use np.log1p instead of np.log to avoid error taking log of 0\nplt.show()","3bce1f65":"# Taking logarithm on the y-axis\nplt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, bins=30, log=True)\nplt.show()","0ef3cc1e":"plt.figure(figsize=(8,5))\nplt.hist(data_ex0.kernels, bins=30, log=True, color = 'fuchsia')\nplt.title('Distribution of Kernels Created', fontsize=16)\nplt.xlabel('No. of kernels')\nplt.ylabel('Frequency')\nplt.show()","77564ca5":"data_ex0.upvotes.plot.kde();","6aac5dc2":"data_ex0.upvotes.plot.kde(ind = np.arange(0, data_ex0.upvotes.max()));","df0b44cc":"sns.kdeplot(data_ex0.upvotes);","f8bb11e4":"sns.kdeplot(data_ex0.upvotes, clip = (0,200));","fcad753e":"# Do it with Seaborn\nplt.figure(figsize=(8,5))\nsns.kdeplot(data_ex0.loc[data_ex0.featured == 0, 'upvotes'], color='green', label='non-featured')\nsns.kdeplot(data_ex0.loc[data_ex0.featured == 1, 'upvotes'], color='red', label='featured')\nplt.xlim(0, 100) # Limit the view from 0 to 100\nplt.show()","41b39c6a":"# Do it with Matplotlib\nplt.figure(figsize=(8,5))\ndata_ex0.loc[data_ex0.featured == 1, 'upvotes'].plot.kde(color='red')\ndata_ex0.loc[data_ex0.featured == 0, 'upvotes'].plot.kde(color='green')\nplt.legend(('Yes', 'No'), title='Featured?')\nplt.xlim(0,100)\nplt.show()","932f7a46":"As a starting point, we plot a histogram of the distribution of the number of discussion threads using **plt.hist()** function in Matplotlib:","83b99ad8":"# Tutorial: Histograms and KDEs in Python\n\nIn this tutorial, we will walk through plotting histograms and kde (kernel density estimate) charts using Matplotlib and Seaborn in Python. We use the dataset of **Kaggle Datasets Collection** in this example. This notebook can also be used as a quick reference when you need to make histograms and kdes of various types.\n\n## Loading Data and Cleaning","83636b41":"## KDE Plots of More Than One Factor\n\nThen we make the last sets of charts by plotting kdes grouped by factor so that we can visualize the difference in distribution among factor values. Here we separate the data by whether they are 'featured' datasets and plot the distribution of upvotes:","a9b2e611":"We can also plot by .plot() method in pandas, which also uses Matplotlib:","4ee28676":"## KDE Charts - The Basics\n\nInstead of histograms, we can also plot kdes so that the distribution is shown as lines instead of rectangular bars. We will plot the distribution of upvotes:","a4cbfb63":"In both charts, it seems there is nothing beyond 50 or so. Let us look at the maximum values:","e3ab5c40":"The above chart looks strange as the number of upvotes cannot be positive. We can set the range to display with ind argument:","1eae1e88":"Reference:\n- [matplotlib.pyplot.hist() documentation](https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.hist.html)\n- [List of color names](https:\/\/matplotlib.org\/gallery\/color\/named_colors.html)","e6c9d814":"## Basic Histograms","da2c38c6":"## Completing the Charts\n\nIt's time to add title, axes labels, and change color of the histograms.","27cbe12c":"It is seen that featured datasets tend to have more upvotes than the non-featured ones.\n\nThe looks of kde plots using Seaborn and Matplotlib are different because they use a different kernel estimate, which is beyond the scope of this notebook.\n\nReference documentation:\n- [pandas.DataFrame.plot.kde()](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.kde.html)\n- [Seaborn.kdeplot()](https:\/\/seaborn.pydata.org\/generated\/seaborn.kdeplot.html)\n\nThat's it for now. Happy plotting!","c01646e5":"Only 3443 rows remain. And we will show the histograms based on this subset of data. Let's run some descriptive statistics as well:","d2a6b4b0":"Two datasets have more than 100 discussions but most of them have zero or a few. When the data is very skewed and has a long tail, a default histogram will not give much information. We will show how to display the histograms in different ways for a closer look of data.","d6a000c9":"The dataset contains 8036 rows, but there are many datasets uploaded on Kaggle have very few audience or activity. In this case we want to exclude datasets that have neither kernels nor upvotes.","ba871b96":"We can use the clip arguments to limit the datapoints to which the kde fits:","265f320b":"## Customization of Histograms\n\nIn this part we will show various arguments we can use to show the histograms differently to get a better sense of how the data is distributed. We will use the distribution of the number of kernels in this example:"}}