{"cell_type":{"31a72752":"code","915edd7e":"code","ab22595e":"code","024b39de":"code","96be31e8":"code","bcf0963e":"code","00b584a0":"code","dfc5392e":"code","9023910a":"code","4bd760b2":"code","6fb69347":"code","50a7a281":"code","290c9c48":"code","d54ea4c0":"code","882a6dea":"markdown"},"source":{"31a72752":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 150)\npd.set_option('max_rows', 150)","915edd7e":"import matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom scipy import stats\n#To plot figs on jupyter\n%matplotlib inline\n# figure size in inches\nrcParams['figure.figsize'] = 14,6\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 200)\npd.set_option('max_rows', 200)","ab22595e":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","024b39de":"PATH =   r\"\/kaggle\/input\/features\/FEATURES-2014-2015\/\"\ndf = pd.read_csv(PATH+\"part-067.csv\")\ndf.shape","96be31e8":"df.columns","bcf0963e":"df.head()","00b584a0":"df.dtypes","dfc5392e":"df.isAnomaly.value_counts()","9023910a":"df[df['isAnomaly']==True].head()","4bd760b2":"df[df['isAnomaly']==True].describe()","6fb69347":"from plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\n\ndef line_plot_check_nan(df1, df2, x, y, title, width, height):\n    \n    trace1 = go.Scatter(\n        x = df1[x],\n        y = df1[y],\n        mode='lines',\n        name='with_nans',\n        marker = dict(\n            color = '#1E90FF', \n        ), \n    )\n    \n    df3 = df2.dropna()\n    trace2 = go.Scatter(\n        x = df3[x],\n        y = df3[y],\n        mode='markers',\n        name='no_nans',\n        marker = dict(\n            color = 'red', \n        ), \n    )\n    \n    layout = go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5\n        ),\n        font = dict(size = 14),\n        width = width,\n        height = height,\n    )\n    \n    data = [trace1, trace2]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig, filename = 'line_plot')","50a7a281":"line_plot_check_nan(df[df['isAnomaly']==True], df[df['isAnomaly']==True], 'timestamp', \"Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))\",\" Memory space usage by date\", 1400, 600)","290c9c48":"line_plot_check_nan(df[df['isAnomaly']==False], df[df['isAnomaly']==False], 'timestamp', \"Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))\",\" Memory space usage by date\", 1400, 600)","d54ea4c0":"# Plots the disribution of a variable colored by value of the target\ndef kde_target(var_name, df):\n    \n    # Calculate the correlation coefficient between the new variable and the target\n    corr = df['isAnomaly'].corr(df[var_name])\n    \n    # Calculate medians for repaid vs not repaid\n    avg_highr = df.loc[df['isAnomaly'] == 0, var_name].median()\n    avg_lowr = df.loc[df['isAnomaly'] == 1, var_name].median()\n    \n    plt.figure(figsize = (12, 6))\n    \n    # Plot the distribution for target == 0 and target == 1\n    sns.kdeplot(df.loc[df['isAnomaly'] == 0, var_name], label = 'isAnomaly == 0')\n    sns.kdeplot(df.loc[df['isAnomaly'] == 1, var_name], label = 'isAnomaly == 1')\n    \n    # label the plot\n    plt.xlabel(var_name); plt.ylabel('Density'); plt.title('%s Distribution' % var_name)\n    plt.legend();\n    \n    # print out the correlation\n    print('The correlation between %s and the TARGET is %0.4f' % (var_name, corr))\n    # Print out average values\n    print('Median value for request with high runtime value = %0.4f' % avg_highr)\n    print('Median value for request with low runtime value =     %0.4f' % avg_lowr)\n    \n\nkde_target('Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))', df[['Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))','isAnomaly']].dropna(),)","882a6dea":"## End Notebook"}}