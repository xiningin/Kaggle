{"cell_type":{"efdbd3a4":"code","18d54df6":"code","3c16030c":"code","fe7ee276":"code","4d1e10c3":"code","1518eb11":"code","1474876f":"code","9c0a7a84":"code","a3e53cdf":"markdown","bbe8fd4f":"markdown"},"source":{"efdbd3a4":"import pandas as pd\nimport numpy as np\n\nfrom hpsklearn import HyperoptEstimator, any_classifier\nfrom hyperopt import tpe\n\nfrom sklearn import metrics\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)\n\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')","18d54df6":"raw_game_data = pd.read_csv('..\/input\/nba-1219-seasons-datasets\/2012-18_teamBoxScore.csv')\nraw_game_data","3c16030c":"games_stat = raw_game_data.copy()\ngames_stat.columns = map(str.upper, games_stat.columns)\ngames_stat['TEAMRSLT'] = games_stat.apply(lambda x: 1 if x['TEAMRSLT'] == 'Win' else 0, axis=1)\n\nid = 1;\ngame_ids = [];\nfor i in range(0, len(games_stat), 2):\n    game_ids.append(id)\n    game_ids.append(id)\n    id += 1\n\ngames_stat['GAME_ID'] = game_ids\n\nimportance_columns = ['TEAMFGM', 'TEAMFGA', 'TEAMFG%', 'TEAM3PM', 'TEAM3PA', 'TEAM3P%', 'TEAMFTM', \n                      'TEAMFTA', 'TEAMFT%', 'TEAMAST', 'TEAMSTL', 'TEAMBLK', 'TEAMPF', \n                      'OPPTFGM', 'OPPTFGA', 'OPPTFG%', 'OPPT3PM', 'OPPT3PA', 'OPPT3P%', 'OPPTFTM',\n                      'OPPTFTA', 'OPPTFT%', 'OPPTAST', 'OPPTSTL', 'OPPTBLK', 'OPPTPF']\n\ndef get_columns_mean(columns, data_frame_describe, data_frame):\n    for column in columns:\n        mean = data_frame_describe[column]['mean']\n        data_frame[column] = round(mean, 5)\n    \ndef get_teams_mean(game_id, home_team, away_team):\n    columns = ['TEAMFGM', 'TEAMFGA', 'TEAMFG%', 'TEAM3PM', 'TEAM3PA', 'TEAM3P%', 'TEAMFTM',\n           'TEAMFTA', 'TEAMFT%', 'TEAMOREB', 'TEAMDREB', 'TEAMREB', 'TEAMAST', 'TEAMTOV', 'TEAMSTL',\n           'TEAMBLK', 'TEAMPF']\n    \n    opposite_column = ['OPPTFGM', 'OPPTFGA', 'OPPTFG%', 'OPPT3PM', 'OPPT3PA', 'OPPT3P%', 'OPPTFTM', \n            'OPPTFTA', 'OPPTFT%', 'OPPTOREB', 'OPPTDREB', 'OPPTREB', 'OPPTAST', 'OPPTTOV',  'OPPTSTL', \n            'OPPTBLK', 'OPPTPF']\n        \n    HOME = games_stat.loc[(games_stat['GAME_ID'] < game_id) & (games_stat['TEAMABBR'] == home_team), :][-5:]\n    AWAY = games_stat.loc[(games_stat['GAME_ID'] < game_id) & (games_stat['TEAMABBR'] == away_team), :][-5:]\n\n    HOME = HOME.filter(columns)\n    AWAY = AWAY.filter(columns)\n\n    get_columns_mean(HOME.columns, HOME.describe(), HOME)\n    HOME = HOME.iloc[-1:,:]\n\n    get_columns_mean(AWAY.columns, AWAY.describe(), AWAY)\n    AWAY = AWAY.iloc[-1:,:]\n\n    rename_column = dict()\n    for i in range(len(columns)):\n        rename_column[columns[i]] = opposite_column[i]\n    \n    AWAY.rename(columns=rename_column, inplace=True)\n    \n    HOME['key'] = 1\n    AWAY['key'] = 1\n    AWAY_HOME = pd.merge(HOME, AWAY, how='outer')\n    del AWAY_HOME['key']\n\n    AWAY_HOME = AWAY_HOME.filter(importance_columns)\n    AWAY_HOME = list(AWAY_HOME.iloc[0,:])\n    return AWAY_HOME","fe7ee276":"games = []\nresults = []\n\nfor step in range(50, len(games_stat), 2):\n    team_home = games_stat.iloc[step + 1]\n    team_away = games_stat.iloc[step]\n    game_id = team_home['GAME_ID']\n    team_home_name = team_home['TEAMABBR']\n    team_away_name = team_away['TEAMABBR']\n    result = team_home['TEAMRSLT']\n\n    game = get_teams_mean(game_id, team_home_name, team_away_name)\n    games.append(game)\n    results.append(result)","4d1e10c3":"game_data_training = pd.DataFrame(np.array(games), columns=importance_columns)\ngame_data_result = pd.DataFrame(np.array(results), columns=['TEAMRSLT'])\ngame_data_result = game_data_result['TEAMRSLT']\n\ngame_data_training.fillna(0, inplace = True)\ngame_data_training.isnull().sum().max()","1518eb11":"scaler = MinMaxScaler()\nscaler = scaler.fit(game_data_training)\ngame_data_scaled_training = pd.DataFrame(scaler.transform(game_data_training))\ngame_data_scaled_training.columns = game_data_training.columns\n\npca = PCA(n_components=15)\npca = pca.fit(game_data_training)\nstats_transformed = pca.fit_transform(game_data_training)\nstats_transformed.shape","1474876f":"x_train, x_test, y_train, y_test = train_test_split(game_data_training.to_numpy(), game_data_result.to_numpy(), test_size=0.2)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","9c0a7a84":"estim = HyperoptEstimator(algo=tpe.suggest,\n                          max_evals=60,\n                          trial_timeout=60)\n\n# kaggle doesn't pass new version of Hyperopt, try clone this notebook and make it manually\n\n# estim.fit(x_train, y_train)\n# print(estim.score(x_test, y_test))\n# print(estim.best_model())","a3e53cdf":"The best predictive models of regular matches based on average statistics of the last 5 matches with hyperopt","bbe8fd4f":"# Collect average data game per teams(optional)"}}