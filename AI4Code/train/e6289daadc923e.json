{"cell_type":{"e7a69999":"code","0b962857":"code","a97f1f04":"code","a0453054":"code","82c4e0d4":"code","6641520f":"code","f6dc73bd":"code","b3c2324a":"code","bc376388":"code","ca400e6d":"code","978e1c69":"code","01b6ed21":"code","ed784d5f":"code","e38af9aa":"code","e98b3a71":"code","5328a408":"code","b8fbb23c":"markdown","b21f15f8":"markdown","eae81390":"markdown","8701f825":"markdown","1b82b16c":"markdown","48dc87ac":"markdown","d8ad2792":"markdown","ba2d0a3b":"markdown"},"source":{"e7a69999":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 1000)\n    \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b962857":"df = pd.read_csv('\/kaggle\/input\/loan-data\/loan.csv', parse_dates = ['date_issued', 'date_last_payment'])\ndf.head()","a97f1f04":"df['date_issued:year'] = df['date_issued'].dt.year\ndf['date_issued:month'] = df['date_issued'].dt.month\ndf['date_issued:day'] = df['date_issued'].dt.day\ndf['date_issued:day_of_week'] = df['date_issued'].dt.day_of_week\ndf['date_issued:day_of_year'] = df['date_issued'].dt.day_of_year\ndf[['date_issued','date_issued:year','date_issued:month','date_issued:day','date_issued:day_of_week','date_issued:day_of_year']].head()","a0453054":"def day_part(hour):\n    if hour in [4,5]:\n        return \"dawn\"\n    elif hour in [6,7]:\n        return \"early morning\"\n    elif hour in [8,9,10]:\n        return \"late morning\"\n    elif hour in [11,12,13]:\n        return \"noon\"\n    elif hour in [14,15,16]:\n        return \"afternoon\"\n    elif hour in [17, 18,19]:\n        return \"evening\"\n    elif hour in [20, 21, 22]:\n        return \"night\"\n    elif hour in [23,24,1,2,3]:\n        return \"midnight\"\n    \n    \n# utilize it along with apply method\ndf['date_issued:hour'] = df['date_issued'].dt.hour\ndf['date_issued:day_part'] = df['date_issued:hour'].apply(day_part)\ndf.head()","82c4e0d4":"df['date_issued:is_year_start'] = df['date_issued'].dt.is_year_start\ndf['date_issued:is_quarter_start'] = df['date_issued'].dt.is_quarter_start\ndf['date_issued:is_month_start'] = df['date_issued'].dt.is_month_start\ndf['date_issued:is_month_end'] = df['date_issued'].dt.is_month_end\ndf[['date_issued','date_issued:is_year_start','date_issued:is_quarter_start','date_issued:is_month_start','date_issued:is_month_end']].head()","6641520f":"df['date_issued:is_weekend'] = np.where(df['date_issued:day_of_week'].isin([5,6]), 1,0)\ndf[['date_issued','date_issued:day_of_week','date_issued:is_weekend']].head()","f6dc73bd":"df['date_last_payment'] - df['date_issued']","b3c2324a":"(df['date_last_payment'] - df['date_issued']).dt.days","bc376388":"(df['date_last_payment'] - df['date_issued']).dt.months","ca400e6d":"(df['date_last_payment'] - df['date_issued'])\/np.timedelta64(1, 'M')","978e1c69":"(df['date_last_payment'] - df['date_issued'])\/np.timedelta64(3, 'M')","01b6ed21":"!pip install fast_ml --upgrade","ed784d5f":"df = pd.read_csv('\/kaggle\/input\/loan-data\/loan.csv', parse_dates = ['date_issued', 'date_last_payment'])","e38af9aa":"from fast_ml.feature_engineering import FeatureEngineering_DateTime\n\ndt_fe = FeatureEngineering_DateTime()\n\ndt_fe.fit(df, datetime_variables=['date_issued'], prefix = 'date_issued:')\n\ndf = dt_fe.transform(df)\ndf.head()","e98b3a71":"df.columns","5328a408":"from datetime import datetime\n\ndatetime.today()","b8fbb23c":"# 2: Create Day Part Flag","b21f15f8":"# 1: Extract Date time Component","eae81390":"# 4: Create Weekend Flag","8701f825":"# 3 : Create Boolean Flags","1b82b16c":"# 5 : Calculate Date \/ Time Differences","48dc87ac":"# Feature Engineering of DateTime type variables for Machine Learning, Data Science\n\n### In this notebook, we will cover following topics.\n\n1. How to extract Date \/ Time components\n1. How to create Day Part Flag\n1. How to create Boolean Flags\n1. How to create Weekend Flag\n1. How to Calculate Date \/ Time Differences\n\n**Bonus Section:** Using Fast_ml for feature engineering","d8ad2792":"---","ba2d0a3b":"# BONUS -- Fast_ml for quick feature engieering"}}