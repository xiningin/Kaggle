{"cell_type":{"c2a55734":"code","de60e166":"code","3e4015df":"code","2c6d8865":"code","68006b9f":"code","6da9e105":"code","3ab8968a":"code","8ad4fb7b":"code","d4215ddf":"code","49e62d9f":"code","db1bd1ba":"code","8021fef3":"code","369490ca":"code","fec6e392":"code","22a094fe":"code","f85ffd5e":"code","f243c022":"code","ed4c85e4":"code","f5ba95fc":"code","fc04ff01":"code","acbcca58":"code","37bf4251":"code","c8e4e12d":"code","35a0c3d7":"code","49650953":"code","adf586b7":"code","506b84cb":"code","18ed8f9b":"code","217e56e8":"code","5719631b":"code","8df74556":"code","282bc62c":"markdown","23fc5d6f":"markdown","5a5834e9":"markdown","a509d692":"markdown","7f84c1f7":"markdown","cc027dcd":"markdown","1667d6d2":"markdown","4064c15e":"markdown","5ae9c775":"markdown"},"source":{"c2a55734":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de60e166":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3e4015df":"df = pd.read_csv('\/kaggle\/input\/company-bankruptcy-prediction\/data.csv')\ndf.head()","2c6d8865":"# Count the value of Bankrupt column\ndf['Bankrupt?'].value_counts()","68006b9f":"# Find if there are any null values\ndf.isnull().sum()","6da9e105":"# Import packages\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report","3ab8968a":"# Create model\nLR = LogisticRegression()","8ad4fb7b":"# Split the dataset\nx_train, x_test, y_train, y_test = train_test_split(df.drop('Bankrupt?',axis=1), df['Bankrupt?'],test_size=0.2, random_state=5)","d4215ddf":"# Fit the model\nLR.fit(x_train,y_train)\n# Predict\ny_pred1 = LR.predict(x_test)","49e62d9f":"accuracy_score(y_test,y_pred1)","db1bd1ba":"confusion_matrix(y_test,y_pred1)","8021fef3":"print(classification_report(y_test,y_pred1))","369490ca":"# Import packages\nfrom sklearn.neighbors import KNeighborsClassifier","fec6e392":"# Find the elbow point\ntest_accuracy = []\n\nfor k in range(1,20):\n    neigh = KNeighborsClassifier(n_neighbors=k)\n    neigh.fit(x_train,y_train)\n    test_accuracy.append(accuracy_score(y_test,neigh.predict(x_test)))","22a094fe":"plt.plot(test_accuracy)","f85ffd5e":"# Create model and fit the model\nneigh = KNeighborsClassifier(n_neighbors=2)\nneigh.fit(x_train, y_train)","f243c022":"print(accuracy_score(y_test,neigh.predict(x_test)))","ed4c85e4":"print(confusion_matrix(y_test, neigh.predict(x_test)))","f5ba95fc":"# Import packages\nfrom sklearn.tree import DecisionTreeClassifier","fc04ff01":"# Create model and fit\ndtree=DecisionTreeClassifier(criterion=\"gini\",max_depth=None,min_samples_leaf=1,random_state=10)\ndtree.fit(x_train,y_train)","acbcca58":"accuracy_score(y_test,dtree.predict(x_test))","37bf4251":"confusion_matrix(y_test,dtree.predict(x_test))","c8e4e12d":"# Import packages\nfrom sklearn.ensemble import RandomForestClassifier","35a0c3d7":"# Create model and fit\nrfc = RandomForestClassifier(criterion=\"gini\",max_depth=None,min_samples_leaf=1,random_state=10)\nrfc.fit(x_train,y_train)","49650953":"accuracy_score(y_test,rfc.predict(x_test))","adf586b7":"confusion_matrix(y_test,rfc.predict(x_test))","506b84cb":"# Import packages\nfrom sklearn.svm import SVC","18ed8f9b":"# Create and fit the model\nsvc = SVC(C=1,kernel='linear',gamma = 0.001)\nsvc.fit(x_train,y_train)","217e56e8":"accuracy_score(y_test,svc.predict(x_test))","5719631b":"# Create and fit the model\nsvc_p = SVC(C=1,kernel='poly', degree = 2,gamma = 0.001)\nsvc_p.fit(x_train,y_train)","8df74556":"accuracy_score(y_test,svc_p.predict(x_test))","282bc62c":"## Model - Decision tree","23fc5d6f":"## Model - Logistic regression","5a5834e9":"## Model - Polynomial SVM","a509d692":"It is not a balanced dataset since the value of Bankrupt=0 is more than value of Bankrput=1.","7f84c1f7":"## Import packages","cc027dcd":"## Model - Random forest","1667d6d2":"## Data","4064c15e":"## Model - KNN","5ae9c775":"## Model - Linear SVM"}}