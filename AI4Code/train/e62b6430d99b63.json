{"cell_type":{"c9134122":"code","669d4495":"code","4199ec65":"code","fbd4161f":"code","bf679a15":"code","06dfdb7c":"code","c60d00b9":"code","0c5579bd":"code","b61dff7b":"code","04043721":"code","7b4fe521":"code","e6c7234a":"code","7298ce27":"code","d09d30c0":"code","e4e5ff0f":"code","824be489":"code","5256ee21":"code","6963212f":"code","e8a63416":"code","56519ef4":"code","c29ab35c":"code","a2fd79c0":"code","42b2d959":"code","deb8117d":"code","86c31be7":"code","3e572cba":"code","21856a4a":"code","c87cb3a2":"code","e8d64983":"markdown","ef9cf80e":"markdown","47fefb28":"markdown","2594054e":"markdown","687cf387":"markdown","ad5d6016":"markdown"},"source":{"c9134122":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport tensorflow as tf\nimport keras","669d4495":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","4199ec65":"len(train.columns)","fbd4161f":"train['label'].unique()","bf679a15":"train.shape","06dfdb7c":"test.shape","c60d00b9":"train.info()","0c5579bd":"train.head()","b61dff7b":"# reshape the first row of \"train\" into a 28 x 28 photo, excluding the \"label\" column\nnum1 = np.array(train.loc[0][1:]).reshape(28,28)\nprint(num1)","04043721":"# display the image in a heatmap\nsns.heatmap(data=num1,cmap=\"gray\")","7b4fe521":"# display the next image in the train set using the same process as above\nnum2 = np.asarray(train.loc[1][1:]).reshape(28,28)\nsns.heatmap(num2,cmap=\"gray\")","e6c7234a":"nptrain = np.array(train)\nplt.figure(figsize=(3,4))\nfor j in range(10):\n    for i in range(len(nptrain)):\n        if nptrain[i][0] == j:\n            plt.subplot(3,4,j+1)\n            plt.imshow(nptrain[i][1:].reshape(28,28), interpolation='nearest')\n            plt.title(j)\n            break\nplt.show()","7298ce27":"# create a countplot of the amount of times each number, or label, appears in the data\nsns.countplot(x=train[\"label\"],data=train,palette=\"magma\")\nplt.title(\"Distribution of Numbers\")\nplt.xlabel(\"Image Number\")\nplt.ylabel(\"Count\")","d09d30c0":"# Load data\ny = train[\"label\"]\nx = train.drop(labels = [\"label\"], axis = 1) \n\n# Reshape data\nx = x.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","e4e5ff0f":"from sklearn.model_selection import train_test_split\n\n# Prepare training\/validation sets\nx_training, x_validation, y_training, y_validation = train_test_split(x,\n                                                                      y,\n                                                                      test_size=0.33,\n                                                                      shuffle=True)","824be489":"x_training.shape\ny_training.shape","5256ee21":"from keras.preprocessing.image import ImageDataGenerator\n\n# Data augmentation\ndata_generator = ImageDataGenerator(rescale = 1.\/255,\n                                    rotation_range = 10,\n                                    zoom_range = 0.1, \n                                    width_shift_range = 0.1,\n                                    height_shift_range = 0.1)\ndata_generator.fit(x_training)","6963212f":"it = data_generator.flow(x_training)","e8a63416":"x_training.shape","56519ef4":"from keras.utils import to_categorical\ny_training = to_categorical(y_training, num_classes = 10)\ny_validation = to_categorical(y_validation, num_classes = 10)","c29ab35c":"import keras\n","a2fd79c0":"from keras.models import Sequential,Input,Model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\n","42b2d959":"from keras.applications import ResNet50\nfrom keras.applications import imagenet_utils\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img","deb8117d":"batch_size = 64\nepochs = 35\nnum_classes = 10","86c31be7":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(28,28,1),padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2),padding='same'))\nmodel.add(Conv2D(64,(3, 3), activation='linear',padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2),padding='same'))\nmodel.add(Conv2D(128,(3, 3), activation='linear',padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2),padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='linear'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(BatchNormalization())\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(),metrics=['accuracy'])","3e572cba":"training_model = model.fit(x_training, y_training, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(x_validation, y_validation))","21856a4a":"results = model.predict(test)\nresults = np.argmax(results, axis = 1)\nresults = pd.Series(results,name='Label')","c87cb3a2":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"cnn_baseline.csv\",index=False)","e8d64983":"# Implementation","ef9cf80e":"The train data is comprised of images with 784 pixels and a 'target' column, which has 10 possible values (hand-written digits), each ranging from 0 to 9.","47fefb28":"# Examining Distributions of Categories in Train Data","2594054e":"# Data Augmentation","687cf387":"# General Info About Data","ad5d6016":"# Displaying Examples of Images"}}