{"cell_type":{"668ca01e":"code","3959b46c":"code","ba654ea1":"code","fdac4914":"code","574a86b7":"code","678fc213":"code","97fa6e24":"code","23a8640b":"code","4bd71938":"code","64c998c5":"code","5d5f8821":"code","fbf624f7":"code","6c4c092a":"markdown"},"source":{"668ca01e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport time\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3959b46c":"%%time\ntrain = pd.read_csv('..\/input\/train.csv')","ba654ea1":"train.shape","fdac4914":"train.head()","574a86b7":"test_df = pd.read_csv('..\/input\/test.csv')","678fc213":"X = train.drop([\"ID_code\", \"target\"], axis=1)\nY = train[\"target\"]\nX_test = test_df.drop([\"ID_code\"], axis=1)","97fa6e24":"X_test.head()","23a8640b":"def augment(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y\n","4bd71938":"n_fold = 15\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=42)","64c998c5":"params = {'num_leaves': 13,\n         'min_data_in_leaf': 80,\n          'min_sum_hessian_in_leaf': 10.0,\n         'objective': 'binary',\n          'boost_from_average': False,\n         'max_depth': -1,\n         'learning_rate': 0.0083,\n         'boost': 'gbdt',\n         'bagging_freq': 5,\n         'tree_learner': \"serial\",\n         'bagging_fraction': 0.335,\n         'feature_fraction': 0.041,\n         #'reg_alpha': 1.738,\n         #'reg_lambda': 4.99,\n         'metric': 'auc',\n         #'min_gain_to_split': 0.01077313523861969,\n         #'min_child_weight': 19.428902804238373,\n         'num_threads': 8}","5d5f8821":"prediction = np.zeros(len(X_test))\noof = np.zeros(len(X))\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(X,Y)):\n    print('Fold', fold_n, 'started at', time.ctime())\n    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n    y_train, y_valid = Y.iloc[train_index], Y.iloc[valid_index]\n    \n    X_tr, y_tr = augment(X_train.values, y_train.values)\n    X_tr = pd.DataFrame(X_tr)\n    \n    train_data = lgb.Dataset(X_tr, label=y_tr)\n    valid_data = lgb.Dataset(X_valid, label=y_valid)\n        \n    model = lgb.train(params,train_data,num_boost_round=1000000,\n                    valid_sets = [train_data, valid_data],verbose_eval=3000,early_stopping_rounds = 4000)\n    oof[valid_index] = model.predict(X.iloc[valid_index], num_iteration=model.best_iteration)\n            \n    #y_pred_valid = model.predict(X_valid)\n    prediction += model.predict(X_test, num_iteration=model.best_iteration)\/15\nprint(\"CV score: {:<8.5f}\".format(roc_auc_score(Y, oof)))","fbf624f7":"sub = pd.DataFrame({\"ID_code\": test_df.ID_code.values})\nsub[\"target\"] = prediction\nsub.to_csv(\"submission.csv\", index=False)","6c4c092a":"### Reference\n- For Augment: https:\/\/www.kaggle.com\/jiweiliu\/lgb-2-leaves-augment"}}