{"cell_type":{"d950eb40":"code","53086e18":"code","e0ded678":"code","cd832dff":"code","377c1e29":"code","06851708":"code","537eb712":"code","d3e6f558":"code","fdaed369":"code","ec73e379":"code","c39ea3e8":"code","29d2624f":"code","16304661":"code","ab2ae43c":"code","7daf8e51":"code","fed0401b":"code","c5b87ed7":"code","e97eaa9c":"code","9d747b7b":"code","58af4232":"code","01e1dbde":"code","cf726a35":"code","50cf8e0f":"code","79bdf54c":"code","570ae30c":"code","47a59c76":"code","9084e0d6":"code","b1ab9009":"code","9ac22865":"code","21dcb0b0":"code","0f4f8647":"code","7177bec9":"code","5c682f08":"code","01df5e43":"code","3d79524a":"code","dab1dcc2":"code","fb56def9":"code","e03b4f56":"code","d67f7f0f":"code","5851e78e":"code","c3bb1cab":"code","a656f36d":"code","0da83767":"code","b1cae9d8":"code","fd95b3ef":"code","d6132276":"code","7fc36b12":"code","65f90306":"code","55fc19f9":"code","fedf8ccb":"code","efaafd9b":"code","d781d7ec":"code","551f8473":"code","4821474b":"code","dcc7272c":"code","d3b4f53f":"code","b7bb5baa":"code","22f54e43":"code","4e8c9284":"code","1cb7171e":"code","25f83925":"code","de891bd7":"code","89cce7e9":"markdown","63b4db90":"markdown","d6738047":"markdown","662eefc9":"markdown","a79610f4":"markdown","03e2786b":"markdown","8dc6fcb1":"markdown","56d8c14d":"markdown","561d8bba":"markdown","db63ae37":"markdown","33dcf7ee":"markdown","4a775fb1":"markdown","96747ed2":"markdown","79de0598":"markdown","11ebadbd":"markdown","75300933":"markdown","674285c4":"markdown","ddcca05d":"markdown","8982af07":"markdown","310657d8":"markdown","0943e602":"markdown","1a1497eb":"markdown","862a009b":"markdown","1a973bb8":"markdown","b96ef035":"markdown"},"source":{"d950eb40":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","53086e18":"train","e0ded678":"test","cd832dff":"sub","377c1e29":"train['source'] = 'train'\ntest['source'] = 'test'\ndata = pd.concat([train, test], ignore_index=True)\ndata","06851708":"data.isnull().sum()","537eb712":"data.drop(['Name','Ticket'], axis=1, inplace=True)","d3e6f558":"data.isnull().sum()","fdaed369":"data['Age'].isnull().sum()","ec73e379":"data['Age'].describe()","c39ea3e8":"data['Age'].mode()","29d2624f":"data['Age'].replace(np.nan, data['Age'].mode()[0], inplace=True)","16304661":"data.loc[data.Age < 1, \"Age\"] = data.Age * 100\ndata['Age'].astype(int)","ab2ae43c":"data['Age'].isnull().sum()","7daf8e51":"data['Embarked'].isnull().sum()","fed0401b":"data['Embarked'].describe()","c5b87ed7":"data['Embarked'].mode()","e97eaa9c":"data['Embarked'].replace(np.nan,data['Embarked'].mode()[0], inplace=True)","9d747b7b":"data['Embarked'].isnull().sum()","58af4232":"data['Fare'].isnull().sum()","01e1dbde":"data['Fare'].describe()","cf726a35":"data['Fare'].mean()","50cf8e0f":"data['Fare'].fillna(data['Fare'].mean(), inplace=True)","79bdf54c":"data['Fare'].isnull().sum()","570ae30c":"!pip install ptitprince","47a59c76":"from ptitprince import RainCloud","9084e0d6":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10, 10))\nRainCloud(data=data, y='Fare', orient='h')\nax.grid()","b1ab9009":"# log scale\ndata['Fare'] = data['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\n\nfig, ax = plt.subplots(figsize=(10, 10))\nRainCloud(data=data, y='Fare', orient='h')\nax.grid()","9ac22865":"data['Fare'].describe()","21dcb0b0":"data['Cabin'].isnull().sum()","0f4f8647":"data['Cabin'].describe()","7177bec9":"data['Cabin'].mode()","5c682f08":"data['Cabin'].replace(np.nan, data['Cabin'].mode()[0], inplace=True)","01df5e43":"data","3d79524a":"data.isnull().sum()","dab1dcc2":"data[\"Cabin\"]","fb56def9":"data['Cabin'] = data['Cabin'].apply(lambda x: x[0:1])\ndata['Cabin'].value_counts()","e03b4f56":"import seaborn as sns\n\nsns.countplot(x='Cabin',hue='Survived',data=data)\nplt.show()","d67f7f0f":"data['family_size'] = data['SibSp']+data['Parch']+1","5851e78e":"data","c3bb1cab":"train_modified = data.loc[data['source']=='train']\ntest_modified = data.loc[data['source']=='test']","a656f36d":"train_modified.head()","0da83767":"test_modified.head()","b1cae9d8":"train_modified.drop('source',axis=1,inplace=True)\ntest_modified.drop(['source','Survived'],axis=1,inplace=True)","fd95b3ef":"!pip install pycaret","d6132276":"from pycaret.classification import *","7fc36b12":"clf1 = setup(data = train_modified,\n             target = 'Survived',\n             numeric_features=['SibSp', 'Parch', 'family_size'],\n             categorical_features=['Pclass'],\n             silent = True)","65f90306":"compare_models()","55fc19f9":"lgbm = create_model('lightgbm')","fedf8ccb":"tuned_lightgbm = tune_model(lgbm)","efaafd9b":"plot_model(estimator = tuned_lightgbm, plot = 'learning')","d781d7ec":"plot_model(estimator = tuned_lightgbm, plot = 'auc')","551f8473":"plot_model(estimator = tuned_lightgbm, plot = 'confusion_matrix')","4821474b":"plot_model(estimator=tuned_lightgbm, plot='feature')","dcc7272c":"evaluate_model(tuned_lightgbm)","d3b4f53f":"interpret_model(tuned_lightgbm)","b7bb5baa":"predictions = predict_model(tuned_lightgbm, data=test_modified)\npredictions.head()","22f54e43":"sub['Survived'] = list(map(int, predictions['Label'].astype(float)))\nsub.to_csv('tuned_lightgbm.csv', index=False)","4e8c9284":"xgboost  = create_model('xgboost')\ncatboost  = create_model('catboost')","1cb7171e":"blend = blend_models(estimator_list=[tuned_lightgbm, xgboost, catboost])","25f83925":"predictions = predict_model(blend, data=test_modified)\npredictions.head()","de891bd7":"sub['Survived'] = list(map(int, predictions['Label'].astype(float)))\nsub.to_csv('blend.csv', index=False)","89cce7e9":"### Check the distribution by RainCloud","63b4db90":"## Feature engineering","d6738047":"## Embarked","662eefc9":"# Preprocess and Feature Engineering by PyCaret","a79610f4":"## Fare","03e2786b":"Let's plot some of the results.","8dc6fcb1":"Algorithms are arranged in descending order of \"Accuracy\".  \nNow, use **lightGBM**, which is relatively rapid, accurate and popular in kaggle\n\nNext, create a model with lightGBM.","56d8c14d":"## Cabin","561d8bba":"In this notebook, I will use pycaret.  \n[PyCaret](https:\/\/pycaret.org\/) is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within minutes in your choice of notebook environment.\n\n[This kaggle notebook](https:\/\/www.kaggle.com\/frtgnn\/pycaret-introduction-classification-regression) would be helpful.  ","db63ae37":"Let's get back to compare_models() cell and check it.  \nFollowing lightgbm, catboost and gbc are ranked high.  \nSo we'll use tuned_lightgbm, catboost and gbc.","33dcf7ee":"## Age","4a775fb1":"# Load data","96747ed2":"# Reference\n- https:\/\/www.kaggle.com\/ranjeetshrivastav\/tabular-playground-series-apr-2021","79de0598":"Feature Importance is below.","11ebadbd":"The type of survival is object so you should change this to int.","75300933":"# Missing Values","674285c4":"First of all, let's check the data.","ddcca05d":"As well as tuned_lightgbm, check the result of this blend model.","8982af07":"Let's actually make a prediction.","310657d8":"# Hyperparameter tuning","0943e602":"## Cabin","1a1497eb":"# Ensemble","862a009b":"# Compare models","1a973bb8":"You can see that the influence of fare and age is very high.\n\nBelow you can see various other results as well.","b96ef035":"## Family size (SibSp+Parch)"}}