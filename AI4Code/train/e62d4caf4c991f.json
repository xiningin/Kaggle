{"cell_type":{"14bf1ae3":"code","d5a899b6":"code","d85be02a":"code","8b6cd44d":"code","9df283cf":"code","a7426256":"code","0b25cd8b":"code","eac0f9ca":"code","295d7175":"code","6eca550c":"code","a37546dd":"code","e0c740cf":"code","5f692dd2":"code","aeb185fd":"code","90aa1ee3":"code","c39ab5f1":"code","b1963b28":"code","fe9987a6":"code","5b5a6211":"code","7351368b":"code","6a0e6303":"code","09c1db90":"code","d051680b":"code","dca2420c":"markdown","18b95509":"markdown","58bb285c":"markdown"},"source":{"14bf1ae3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn.linear_model import Lasso, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","d5a899b6":"train_df.info()","d85be02a":"test_df.info()","8b6cd44d":"sample_df.info()","9df283cf":"plt.figure(figsize = (15,10))\nsns.heatmap(train_df.corr())","a7426256":"i = 0\nfig, axs = plt.subplots(11,1, figsize = (20,35))\nfor i in range(len(axs)):\n    axs[i].plot(train_df.iloc[:,i+1])\n    axs[i].set_title(train_df.columns[i+1])\n    i += 1","0b25cd8b":"X_train = train_df.iloc[:, 1:9]\ny_train = train_df.iloc[:, -3:]\nX_test = test_df.iloc[:, 1:]","eac0f9ca":"lasso_reg = Lasso()\nridge_reg = Ridge()\nrf_reg = RandomForestRegressor()\nxgb_reg = XGBRegressor()\nlgbm_reg = LGBMRegressor()\nmodels = [lasso_reg, ridge_reg, rf_reg, xgb_reg, lgbm_reg]","295d7175":"ols_1 = sm.OLS(y_train.iloc[:,0], X_train).fit()\nols_1.summary()","6eca550c":"X_train_part, X_valid, y_train_part, y_valid = train_test_split(X_train, y_train, test_size = 0.3)","a37546dd":"for model in models:\n    model.fit(X_train_part, y_train_part['target_carbon_monoxide'])\n    y_pred = model.predict(X_valid)\n    mse = mean_squared_error(y_valid['target_carbon_monoxide'], y_pred)\n    rmse = np.sqrt(mse)\n    print(\"####\", model.__class__.__name__, \"'s target_carbon_monoxide RMSE : \", rmse, '\\n')","e0c740cf":"cm_preds = lgbm_reg.fit(X_train, y_train.iloc[:,0]).predict(X_test)","5f692dd2":"ols_2 = sm.OLS(y_train.iloc[:,1], X_train).fit()\nols_2.summary()","aeb185fd":"X_tr_bz = X_train.drop(['absolute_humidity'], axis = 1, inplace = False)\nX_test_bz = X_test.drop('absolute_humidity', axis = 1, inplace = False)\nX_train_part, X_valid, y_train_part, y_valid = train_test_split(X_tr_bz, y_train, test_size = 0.3)","90aa1ee3":"for model in models:\n    model.fit(X_train_part, y_train_part['target_benzene'])\n    y_pred = model.predict(X_valid)\n    mse = mean_squared_error(y_valid['target_benzene'], y_pred)\n    rmse = np.sqrt(mse)\n    print(\"####\", model.__class__.__name__, \"'s target_benzene RMSE : \", rmse, '\\n')","c39ab5f1":"bz_preds = lgbm_reg.fit(X_tr_bz, y_train.iloc[:,1]).predict(X_test_bz)","b1963b28":"ols_3 = sm.OLS(y_train.iloc[:,2], X_train).fit()\nols_3.summary()","fe9987a6":"X_tr_no = X_train.drop(['deg_C', 'absolute_humidity'], axis = 1, inplace = False)\nX_test_no = X_test.drop(['deg_C', 'absolute_humidity'], axis = 1, inplace = False)\nX_train_part, X_valid, y_train_part, y_valid = train_test_split(X_tr_no, y_train, test_size = 0.3)","5b5a6211":"for model in models:\n    model.fit(X_train_part, y_train_part['target_nitrogen_oxides'])\n    y_pred = model.predict(X_valid)\n    mse = mean_squared_error(y_valid['target_nitrogen_oxides'], y_pred)\n    rmse = np.sqrt(mse)\n    print(\"####\", model.__class__.__name__, \"'s target_nitrogen_oxides RMSE : \", rmse, '\\n')","7351368b":"no_preds = lgbm_reg.fit(X_tr_no, y_train.iloc[:,2]).predict(X_test_no)","6a0e6303":"predictions = pd.DataFrame({sample_df.columns[0]:test_df['date_time'], sample_df.columns[1]:cm_preds, sample_df.columns[2]:bz_preds, sample_df.columns[3]:no_preds})","09c1db90":"predictions.head()","d051680b":"predictions.to_csv('submission.csv', index = False)","dca2420c":"1. **target_carbon_monoxide**","18b95509":"3. **target_nitrogen_oxides**","58bb285c":"2. **target_benzene**"}}