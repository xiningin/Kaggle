{"cell_type":{"92714c2a":"code","591ba847":"code","8f9f02ca":"code","9c428c6c":"code","c9e8be21":"code","c011f0e2":"code","4d3b5dd2":"code","49d05b94":"code","9acb3041":"code","b30f2078":"code","64815eb3":"code","9db0909a":"code","3df9710b":"code","7e8314ac":"code","7617b16b":"code","85c37590":"code","78b0ac66":"code","8db6d07c":"code","a04e2046":"code","52fd95a7":"code","e26f30eb":"code","dc6e2dc3":"code","44223a21":"code","7fc715a6":"code","48e67838":"markdown"},"source":{"92714c2a":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","591ba847":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport cv2\nimport torchvision\nfrom torchvision.transforms import transforms\nfrom torch.utils.data import Dataset, DataLoader, ConcatDataset\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom PIL import ImageFile\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport os\nimport torch.nn as nn\nimport torch.nn.functional as f\nfrom skimage import io\nfrom torch.utils.data import (\n    Dataset,\n    DataLoader,\n) \nimport warnings\nwarnings.filterwarnings('ignore')\ntorch.manual_seed(0)\nimport sys\n\ndevice=torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(device)","8f9f02ca":"data_lebel=pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\n","9c428c6c":"data_lebel","c9e8be21":"data_lebel['diagnosis'].unique()","c011f0e2":"data_lebel['diagnosis'].value_counts()\n","4d3b5dd2":"# #Histogram of label counts.\n# data_lebel.diagnosis.hist()\n# plt.xticks([0,1,2,3,4])\n# plt.grid(False)\n# plt.show() ","49d05b94":"import PIL.Image as Image ","9acb3041":"from sklearn.utils import class_weight #For calculating weights for each class.\nclass_weights = class_weight.compute_class_weight(class_weight='balanced',classes=np.array([0,1,2,3,4]),y=data_lebel['diagnosis'].values)\nclass_weights = torch.tensor(class_weights,dtype=torch.float).to(device)\n \nprint(class_weights) #Prints the calculated weights for the classes.\n","b30f2078":"IMAGE_SIZE = 28 \ntransform_image = transforms.Compose([\n                                transforms.ToPILImage(),\n                                transforms.RandomRotation(20,expand=True), \n                                transforms.Resize(IMAGE_SIZE),  ## image resize\n                                transforms.CenterCrop(IMAGE_SIZE),\n                                transforms.ToTensor(), ## array converted into torch tensor and then divided by 255 (1.0\/255)\n                               ])","64815eb3":"class dataset(Dataset): # Inherits from the Dataset class.\n    \n    def __init__(self,df,data_path,image_transform=None,train=True): # Constructor.\n        super(Dataset,self).__init__() #Calls the constructor of the Dataset class.\n        self.df = df\n        self.data_path = data_path\n        self.image_transform = image_transform\n        self.train = train\n        \n    def __len__(self):\n        return len(self.df) #Returns the number of samples in the dataset.\n    \n    def __getitem__(self,index):\n        image_id = self.df['id_code'][index]\n        image = Image.open(f'{self.data_path}\/{image_id}.png') #Image.\n        if self.image_transform :\n            image = self.image_transform(image) #Applies transformation to the image.\n        \n        if self.train :\n            label = self.df['diagnosis'][index] #Label.\n            return image,label #If train == True, return image & label.\n        \n        else:\n            return image #If train != True, return image.","9db0909a":"path = \"\/kaggle\/input\/aptos2019-blindness-detection\/\"","3df9710b":"image_transform = transforms.Compose([transforms.Resize([299,299]),\n                                      transforms.ToTensor(),\n                                      transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))]) #Transformations to apply to the image.\ndata_set = dataset(data_lebel,f'{path}train_images',image_transform=image_transform)\n\n#Split the data_set so that valid_set contains 0.1 samples of the data_set. \ntrain_set,valid_set = torch.utils.data.random_split(data_set,[3302,360])","7e8314ac":"train_dataloader = DataLoader(train_set,batch_size=32,shuffle=True) #DataLoader for train_set.\nvalid_dataloader = DataLoader(valid_set,batch_size=32,shuffle=False) #DataLoader for validation_set.","7617b16b":"len(train_dataloader)","85c37590":"def train(dataloader,model,loss_fn,optimizer):\n\n    model.train() #Sets the model for training.\n    \n    total = 0\n    correct = 0\n    running_loss = 0\n    \n    for batch,(x,y) in enumerate(dataloader): #Iterates through the batches.\n        \n        output = model(x.to(device)) #model's predictions.\n        loss   = loss_fn(output,y.to(device)) #loss calculation.\n       \n        running_loss += loss.item()\n        \n        total        += y.size(0)\n        predictions   = output.argmax(dim=1).cpu().detach() #Index for the highest score for all the samples in the batch.\n        correct      += (predictions == y.cpu().detach()).sum().item() #No.of.cases where model's predictions are equal to the label.\n        \n        optimizer.zero_grad() #Gradient values are set to zero.\n        loss.backward() #Calculates the gradients.\n        optimizer.step() #Updates the model weights.\n             \n    \n    avg_loss = running_loss\/len(dataloader) # Average loss for a single batch\n    \n    print(f'\\nTraining Loss = {avg_loss:.6f}',end='\\t')\n    print(f'Accuracy on Training set = {100*(correct\/total):.6f}% [{correct}\/{total}]') #Prints the Accuracy.\n    \n    return avg_loss","78b0ac66":"def validate(dataloader,model,loss_fn):\n    \n    model.eval() #Sets the model for evaluation.\n    \n    total = 0\n    correct = 0\n    running_loss = 0\n    \n    with torch.no_grad(): #No need to calculate the gradients.\n        \n        for x,y in dataloader:\n            \n            output        = model(x.to(device)) #model's output.\n            loss          = loss_fn(output,y.to(device)).item() #loss calculation.\n            running_loss += loss\n            \n            total        += y.size(0)\n            predictions   = output.argmax(dim=1).cpu().detach()\n            correct      += (predictions == y.cpu().detach()).sum().item()\n            \n    avg_loss = running_loss\/len(dataloader) #Average loss per batch.      \n    \n    print(f'\\nValidation Loss = {avg_loss:.6f}',end='\\t')\n    print(f'Accuracy on Validation set = {100*(correct\/total):.6f}% [{correct}\/{total}]') #Prints the Accuracy.\n    \n    return avg_loss","8db6d07c":"def optimize(train_dataloader,valid_dataloader,model,loss_fn,optimizer,nb_epochs):\n    #Lists to store losses for all the epochs.\n    train_losses = []\n    valid_losses = []\n\n    for epoch in range(nb_epochs):\n        print(f'\\nEpoch {epoch+1}\/{nb_epochs}')\n        print('-------------------------------')\n        train_loss = train(train_dataloader,model,loss_fn,optimizer) #Calls the train function.\n        train_losses.append(train_loss)\n        valid_loss = validate(valid_dataloader,model,loss_fn) #Calls the validate function.\n        valid_losses.append(valid_loss)\n    \n    print('\\nTraining has completed!')\n    \n    return train_losses,valid_losses","a04e2046":"def test(dataloader,model):\n    \n    y_true_tensor = torch.tensor([]).cuda()\n    y_pred_tensor = torch.tensor([]).cuda()\n    \n    model.eval() #Sets the model for evaluation.\n    \n    total = 0\n    correct = 0\n    \n    with torch.no_grad(): #No need to calculate the gradients.\n        \n        for x,y in dataloader:\n            \n            output        = model(x.to(device)) #model's output.\n            \n            total        += y.size(0)\n            predictions   = output.argmax(dim=1).cpu().detach()\n            correct      += (predictions == y.cpu().detach()).sum().item()\n            \n            y_true_tensor = torch.cat((y_true_tensor,y.to(device)))\n            y_pred_tensor = torch.cat((y_pred_tensor,predictions.to(device)))\n            \n      \n    print(f'Accuracy on Test set = {100*(correct\/total):.6f}% [{correct}\/{total}]') #Prints the Accuracy.\n    \n    from sklearn.metrics import confusion_matrix\n    from sklearn.metrics import classification_report\n    y_true = y_true_tensor.tolist()\n    y_pred = y_pred_tensor.tolist()\n    matrix = confusion_matrix(y_true,y_pred)\n    print(matrix)\n    \n    classify_report = classification_report(y_true, y_pred)\n    print(classify_report)","52fd95a7":"# ##Inception v3\n\n# import torchvision.models as models\n# inception_v3= models.inception_v3(pretrained=True,aux_logits=False) \n\n# # image size must be >= 299 x 299 during training if aux_logits is set to be True.\n\n# inception_v3.cuda()\n# num_classes = 5\n# batch_size = 32\n\n# learning_rate=0.0001\n\n# optimizer = torch.optim.Adam(inception_v3.parameters(),lr=learning_rate)\n\n \n# criterion = torch.nn.CrossEntropyLoss(weight=class_weights)\n\n# inception_v3.fc = nn.Linear(2048, 5)\n# inception_v3.cuda()\n# print(\"Model Is Ready To Run \")\n\n# nb_epochs = 30\n\n\n# train_losses, valid_losses = optimize(train_dataloader,valid_dataloader,inception_v3,criterion,optimizer,nb_epochs)\n\n# torch.save(inception_v3,'inception_v3.pth')\n\n# # inception_v3 = torch.load(PATH)\n\n# test(valid_dataloader,inception_v3)","e26f30eb":"import torchvision.models as models\ndensenet121= models.densenet121(pretrained=True)\n\nfor param in densenet121.parameters():\n    param.requires_grad = False\n\ndensenet121.classifier = nn.Sequential(\n    nn.Linear(1024, 256),\n    nn.ReLU(),\n    nn.Dropout(0.4),\n    nn.Linear(256, 5), \n)\ndensenet121.cuda()\nnum_classes = 5\nbatch_size = BATCH_SIZE\nlearning_rate = 0.0001\n \ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(densenet121.parameters(),lr=learning_rate)\n\n\nnb_epochs = 30\n\n\ntrain_losses, valid_losses = optimize(train_dataloader,valid_dataloader,densenet121,criterion,optimizer,nb_epochs)\n\ntorch.save(densenet121,'densenet121.pth')\n\n# inception_v3 = torch.load(PATH)\n\ntest(valid_dataloader,densenet121)","dc6e2dc3":"import torchvision.models as models\nvgg16 = models.vgg16(pretrained=False)\nOUTPUT_DIM=5\nIN_FEATURES = vgg16.classifier[-1].in_features \nfinal_fc = torch.nn.Linear(IN_FEATURES, OUTPUT_DIM)\nvgg16.classifier[-1] = final_fc\nvgg16.cuda()\n\nnum_classes = 5\nbatch_size = 32\nlearning_rate = 0.0001\n \ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(vgg16.parameters(),lr=learning_rate)\n\n\nnb_epochs = 30\n\n\ntrain_losses, valid_losses = optimize(train_dataloader,valid_dataloader,vgg16,criterion,optimizer,nb_epochs)\n\ntorch.save(vgg16,'vgg16.pth')\n\n# inception_v3 = torch.load(PATH)\n\ntest(valid_dataloader,vgg16)\n\n\n","44223a21":"import torchvision.models as models\nresnet50=models.resnet50(pretrained=True)\nresnet50.fc = nn.Linear(2048, 5)\nresnet50.cuda()\nnum_classes = 5\nbatch_size = 32\nlearning_rate = 0.0001\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(resnet50.parameters(),lr=learning_rate)\n\n\n\nnb_epochs = 30\n\n\ntrain_losses, valid_losses = optimize(train_dataloader,valid_dataloader,resnet50,criterion,optimizer,nb_epochs)\n\ntorch.save(resnet50,'resnet50.pth')\n\n# inception_v3 = torch.load(PATH)\n\ntest(valid_dataloader,resnet50)","7fc715a6":"# test_set = dataset(test_df,f'{path}test_images',image_transform = image_transform)\n\n# test_dataloader = DataLoader(test_set, batch_size=32, shuffle=False) #DataLoader for test_set.","48e67838":"Train"}}