{"cell_type":{"2ab17f5b":"code","f9644c29":"code","8c43133d":"code","0ed0255a":"code","5ff2af8e":"code","dd4de6c9":"code","05e42a41":"code","1f3c2b47":"code","b694a722":"code","7bc73663":"code","59354a8a":"code","d4926516":"code","65431633":"code","66a36f98":"code","b424195a":"code","10af58bf":"code","86817ee0":"code","aa9c413f":"code","49f0a4de":"code","6804b4c2":"code","314616a8":"code","ef0593c8":"code","aa76cda9":"markdown","b43632e0":"markdown","c0550687":"markdown","a5168d23":"markdown","6b59b59a":"markdown","ded83244":"markdown","8ed58ea5":"markdown","7c179cc8":"markdown","ca53856b":"markdown"},"source":{"2ab17f5b":"!pip install mido\n!pip install pygame","f9644c29":"import pandas as pd\nimport numpy as np\nfrom mido import MidiFile\nimport pygame\nimport IPython\nimport matplotlib.pyplot as plt\nimport librosa.display","8c43133d":"data=pd.read_csv('..\/input\/musicnet-dataset\/musicnet_metadata.csv')","0ed0255a":"data.head()","5ff2af8e":"# Let's try to open one of the file (Beethoven ??)\nmid=MidiFile('..\/input\/musicnet-dataset\/musicnet_midis\/musicnet_midis\/Beethoven\/2313_qt15_1.mid',clip=True)\nmid","dd4de6c9":"for track in mid.tracks:\n    print(track)","05e42a41":"for msg in mid.tracks[1]:\n    print(msg)","1f3c2b47":"message_numbers = []\nduplicates = []\n\nfor track in mid.tracks:\n    if len(track) in message_numbers:\n        duplicates.append(track)\n    else:\n        message_numbers.append(len(track))\n\nfor track in duplicates:\n    mid.tracks.remove(track)\n\nmid.save('new_song.mid')","b694a722":"mid1=MidiFile('..\/input\/musicnet-dataset\/musicnet_midis\/musicnet_midis\/Bach\/2186_vs6_1.mid',clip=True)\nmid2=MidiFile('..\/input\/musicnet-dataset\/musicnet_midis\/musicnet_midis\/Beethoven\/2313_qt15_1.mid',clip=True)","7bc73663":"# Let's take the violin from this and put it in mid2\nmid1.tracks","59354a8a":"mid2.tracks.append(mid1.tracks[0])","d4926516":"# Let's have a look once\nmid2.tracks","65431633":"# Wow we got both of them together now let's save the new song\nmid2.save('Yet Another Song.mid')","66a36f98":"# def play_music(midi_filename):\n#   '''Stream music_file in a blocking manner'''\n#   clock = pygame.time.Clock()\n#   pygame.mixer.music.load(midi_filename)\n#   pygame.mixer.music.play()\n#   while pygame.mixer.music.get_busy():\n#     clock.tick(30) # check if playback has finished\n    \n# midi_filename = '..\/input\/musicnet-dataset\/musicnet_midis\/musicnet_midis\/Beethoven\/2313_qt15_1.mid'\n\n# # mixer config\n# freq = 44100  # audio CD quality\n# bitsize = -16   # unsigned 16 bit\n# channels = 2  # 1 is mono, 2 is stereo\n# buffer = 1024   # number of samples\n# pygame.mixer.init(freq, bitsize, channels, buffer)\n\n# # optional volume 0 to 1.0\n# pygame.mixer.music.set_volume(0.8)\n\n# # listen for interruptions\n# try:\n#   # use the midi file you just saved\n#   play_music(midi_filename)\n# except KeyboardInterrupt:\n#   # if user hits Ctrl\/C then exit\n#   # (works only in console mode)\n#   pygame.mixer.music.fadeout(1000)\n#   pygame.mixer.music.stop()\n#   raise SystemExit","b424195a":"for i in mid1.tracks :\n    for msg in i :\n        if str(type(msg))!=\"<class 'mido.midifiles.meta.MetaMessage'>\":\n            print(msg)","10af58bf":"# Using Librosa to have a look at the data\nimport librosa\nx, sr = librosa.load('..\/input\/musicnet-dataset\/musicnet\/musicnet\/train_data\/1727.wav')","86817ee0":"print(x.shape)\nprint(sr)","aa9c413f":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","49f0a4de":"X = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')","6804b4c2":"data=pd.read_csv('..\/input\/musicnet-dataset\/musicnet\/musicnet\/train_labels\/1727.csv')","314616a8":"data.head()","ef0593c8":"IPython.display.Audio('.\/animal.wav')","aa76cda9":"## This is a huuuge file as we can see from the shape of the array","b43632e0":"## This means this is a midi file from the above location and type 1 which means all the tracks starts at the same time and 6 tracks here means 6 synchronous tracks while showing 11947 messages in total\n## There are 3 types in total :*\n## 1) 0 Type (Single Track) : all messages are saved in one track\n## 2) 1 Type (Synchronous Track) : all tracks start at the same time\n## 3) 2 Type (Asynchronous Track) :  each track is independent of the others","c0550687":"## From this we can see the composition of messages shown by the different tracks which are synchronously working with each other for e.g. :\n## Violin1 has 3277 messages in total","a5168d23":"# Displaying a Spectrogram","6b59b59a":"## These are the messages of Violin1 these all will account for total number of 3277","ded83244":"## Visualizing the data\/Audio File.","8ed58ea5":"## Let's play some more and add a part of Bach to Beethoven . I know it will be chaos but let's try","7c179cc8":"## From the above example we can see that there are some repetitions of the messages we can clean that up using a code","ca53856b":"# This is the code to run the file and play the song for this you will be needing pygame on your system and this code is from :\nhttps:\/\/www.daniweb.com\/programming\/software-development\/code\/216979\/embed-and-play-midi-music-in-your-code-python"}}