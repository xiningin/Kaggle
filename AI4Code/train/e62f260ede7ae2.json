{"cell_type":{"f1f0fd25":"code","d1e0ed18":"code","e8237d83":"code","b58b239e":"code","3aef0b1e":"code","5f2dde6a":"code","5ab0ad7c":"code","de814264":"code","b0da7ab9":"code","682356c6":"code","a4da19fb":"code","01b362f5":"code","58698412":"code","cf147b48":"code","126295ec":"code","f4b5179e":"code","df4b6989":"code","ab1ca9d4":"code","1ae4bed2":"code","b36f144a":"code","9ae4347c":"code","2fc59032":"code","e35d634d":"markdown","8667e536":"markdown","1b9fa256":"markdown","6e69c563":"markdown","af311163":"markdown","0b419c95":"markdown","4150294f":"markdown","4d5d6629":"markdown","1b0b6a31":"markdown","b4ee7605":"markdown"},"source":{"f1f0fd25":"import numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import confusion_matrix","d1e0ed18":"# Load the train dataset\ntitanic = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic.info()","e8237d83":"# Load the test dataset\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.info()","b58b239e":"# Get the NaNs for the train and test\nprint('\\t\\tTrain\\tTest')\n\nfor col in test:\n    nullInTrain = titanic[col].isnull().sum()\n    nullInTest = test[col].isnull().sum()\n    print((col + ':').ljust(16, ' ') + str(nullInTrain) + '\\t' + str(nullInTest))","3aef0b1e":"ageMean = titanic[\"Age\"].mean()\nageStd = titanic[\"Age\"].std()\nnullCount = titanic.shape[0]\n\ncabinDefault = titanic['Cabin'].mode()[0]\n\n# random numbers between the mean +- std\nrandomAges = np.random.randint(ageMean - ageStd, ageMean + ageStd, size=nullCount)\n\ntitanic['Age'].fillna(value=pd.Series(randomAges), inplace=True)\n\ntitanic['Cabin'].fillna(cabinDefault, inplace=True)\n\ntitanic['Embarked'].fillna(titanic['Embarked'].mode()[0], inplace=True)","5f2dde6a":"ageMean = test[\"Age\"].mean()\nageStd = test[\"Age\"].std()\nnullCount = test.shape[0]\n\n# random numbers between the mean +- std\nrandomAges = np.random.randint(ageMean - ageStd, ageMean + ageStd, size=nullCount)\n\ntest['Age'].fillna(value=pd.Series(randomAges), inplace=True)\n\ntest['Cabin'].fillna(cabinDefault, inplace=True)\n\ntest['Fare'].fillna(test['Fare'].mean(), inplace=True)","5ab0ad7c":"# Get the NaNs for the train and test\nprint('\\t\\tTrain\\tTest')\n\nfor col in test:\n    nullInTrain = titanic[col].isnull().sum()\n    nullInTest = test[col].isnull().sum()\n    print((col + ':').ljust(16, ' ') + str(nullInTrain) + '\\t' + str(nullInTest))","de814264":"# Survival Rate by sex\n\nfor c in titanic['Sex'].unique():\n    subset_c = titanic[titanic['Sex'] == c][\"Survived\"]\n    survival_rate = int((sum(subset_c)\/len(subset_c))*100)\n    print(f\"{survival_rate}% of passengers from sex {c} survived\")","b0da7ab9":"# Survival Rate by pclass\n\nfor c in titanic['Pclass'].unique():\n    subset_c = titanic[titanic['Pclass'] == c][\"Survived\"]\n    survival_rate = int((sum(subset_c)\/len(subset_c))*100)\n    print(f\"{survival_rate}% of passengers from pclass {c} survived\")","682356c6":"columns = [\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\nfig = make_subplots(\n    rows=len(columns)\/\/2, \n    cols=2,\n    column_widths = [10] * 2,\n    row_heights = [10] * 4,\n    subplot_titles=[\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n)\n\nfor i, column in enumerate(columns):\n    r = (i)\/\/2\n    c = (i) - r*2\n    \n    survived = titanic[titanic.Survived == 1][column]\n    died = titanic[titanic.Survived == 0][column]\n    fig.append_trace(go.Histogram(x=survived, name='survived', marker_color='#EB89B5'), r+1, c+1)\n    fig.append_trace(go.Histogram(x=died, name='died', marker_color='#330C73'), r+1, c+1)\n\nfig.update_layout(showlegend=False, height=1000)\n\nfig.show()","a4da19fb":"# Train set encoder\nencoder = OrdinalEncoder()\n\ntitanic[['Sex', 'Embarked']] = encoder.fit_transform(titanic[['Sex', 'Embarked']])","01b362f5":"# Test set encoder\nencoder = OrdinalEncoder()\n\ntest[['Sex', 'Embarked']] = encoder.fit_transform(test[['Sex', 'Embarked']])","58698412":"corr = titanic.corr()","cf147b48":"fig = px.imshow(corr)\nfig.show()","126295ec":"X_train = titanic[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()\n\ny_train = titanic['Survived'].copy()\n\nX_test = test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].copy()","f4b5179e":"X_train.head()","df4b6989":"X_test.head()","ab1ca9d4":"from sklearn.tree import DecisionTreeRegressor\n\ndtmodel = DecisionTreeRegressor(max_depth=6)\ndtmodel.fit(X_train, y_train)","1ae4bed2":"from sklearn.tree import DecisionTreeRegressor\n\ndtrmodel = DecisionTreeRegressor()\ndtrmodel.fit(X_train, y_train)","b36f144a":"dtrmodel.score(X_train, y_train)","9ae4347c":"final_predictions = dtrmodel.predict(X_test)","2fc59032":"submission = pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived':final_predictions})\n\nsubmission.to_csv('gender_submission.csv',index=False)","e35d634d":"# Encoding","8667e536":"# Prediction","1b9fa256":"# Load data","6e69c563":"# Correlation Matrix","af311163":"# Decision Tree","0b419c95":"# Data exploration","4150294f":"# Clean data","4d5d6629":"Clean the test data","1b0b6a31":"# Imports","b4ee7605":"Clean the train data"}}