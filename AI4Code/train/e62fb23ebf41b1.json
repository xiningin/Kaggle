{"cell_type":{"091fe6a9":"code","31f3c5ba":"code","8a2a45a9":"code","0ca1e201":"code","a2e0be70":"code","89cedcee":"code","2d531775":"code","44ef77a3":"code","b75274bc":"code","1c342682":"code","a553d164":"code","2b15bf33":"code","a068f367":"code","86e2df1a":"code","21124e57":"code","ea45eaac":"code","3024a2a7":"code","418f27a5":"code","b9e3f458":"code","500b54a6":"code","fe55f129":"code","de384975":"code","ebfdfb2b":"code","ebdd2bd3":"code","e302de34":"code","c5714ad7":"code","fbfddb90":"markdown","5d39aa36":"markdown","a2ba8e8f":"markdown","6eaa61b1":"markdown","47734cc3":"markdown"},"source":{"091fe6a9":"import numpy as np # lineer Cebir\nimport pandas as pd # Veri \u0130\u015fleme\nimport matplotlib.pyplot as plt # G\u00f6rselle\u015ftirme Arac\u0131\nimport seaborn as sns  # G\u00f6rselle\u015ftirme Arac\u0131\nfrom datetime import datetime # tarih-zaman k\u00fct\u00fcphanesi\n\nimport warnings\nwarnings.filterwarnings('ignore') # Uyar\u0131lar\u0131 g\u00f6rmezden gelme","31f3c5ba":"df = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\") # reading data\ndf.head() # head shows first 5 rows of the data","8a2a45a9":"df.tail() # tail shows last 5 rows of the data","0ca1e201":"df.columns # columns gives us columns names of features","a2e0be70":"df.shape # shape gives numbers of rows and columns in a tuble","89cedcee":"df.info() # info gives us some info about data","2d531775":"# Belirtti\u011fimiz k\u0131s\u0131mdaki unique i\u00e7eri\u011fin ka\u00e7ar adet oldu\u011funu verir. \n# dropna = False NaN verileri de dahil eder.\nprint(df[\"Type 1\"].value_counts(dropna=False))","44ef77a3":"# describe gives us statistical and mathematical values\ndf.describe()","b75274bc":"df.boxplot(column=\"Attack\",by=\"Legendary\")\nplt.show()","1c342682":"dfHead = df.head() # yeni data olu\u015fturuduk\ndfHead","a553d164":"# tidy\nmelted = pd.melt(frame=dfHead, id_vars=\"Name\", value_vars=[\"Attack\",\"Defense\"])\nmelted","2b15bf33":"# reverse of melting\nmelted.pivot(index=\"Name\", columns=\"variable\", values=\"value\")","a068f367":"df1 = df.head()\ndf2 = df.tail()\ndfCon = pd.concat([df1,df2], axis=0, ignore_index=True)\ndfCon","86e2df1a":"df3=df.Attack.head()\ndf4=df.Defense.head()\ndfCon1=pd.concat([df3,df4],axis=1)\ndfCon1","21124e57":"df.dtypes","ea45eaac":"df[\"Type 1\"] = df[\"Type 1\"].astype(\"category\")\ndf[\"Speed\"] = df[\"Speed\"].astype(\"float\")\ndf.dtypes","3024a2a7":"df.head(10) \n# NaN verileri oldu\u011fu gibi b\u0131rakabiliriz.\n# dropna() ile verisetinden o rowlar\u0131 \u00e7\u0131karabiliriz.\n# NaN olmayan bo\u015f k\u0131s\u0131mlar\u0131 fillna() ile NaN olarak doldurabiliriz.\n# ya da bu k\u0131s\u0131mlar\u0131 mean, median gibi verilerle doldurabiliriz.","418f27a5":"df.info()","b9e3f458":"df[\"Type 2\"].value_counts(dropna=False)","500b54a6":"df.dropna(inplace=True)","fe55f129":"assert 1==1 # herhangi bir \u015fey d\u00f6nd\u00fcrmedi\u011finde True demektir.","de384975":"assert df[\"Type 2\"].notnull().all()","ebfdfb2b":"df[\"Type 2\"].fillna(\"empty\", inplace=True)","ebdd2bd3":"assert df[\"Type 2\"].notnull().all()","e302de34":"assert df.columns[1] == \"Name\"","c5714ad7":"assert df.columns[1] == \"Hp\"","fbfddb90":"# Missing Data and Testing With Assert","5d39aa36":"# Concatenating Data and Data types","a2ba8e8f":"# EDA","6eaa61b1":"# Visual Exploratory Data Analysis","47734cc3":"# Tidy and Pvoting Data"}}