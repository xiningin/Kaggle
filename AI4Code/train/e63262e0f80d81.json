{"cell_type":{"dd9fa638":"code","9b68deed":"code","65ef6823":"code","fa586430":"code","720ba8c7":"code","f7ed8fba":"code","19ac5b3f":"code","b1af6e4f":"code","eac62193":"code","87d99ed8":"code","5849b7f7":"code","02f3f98b":"code","80134ca9":"code","7b151d4b":"code","89e2a75c":"code","57df0713":"code","69f940bf":"code","1c51c452":"code","8176fcf8":"code","b4a1d782":"code","dac2f716":"code","e68bb1c3":"code","716e92ff":"code","f5ebac25":"code","6c9dc0d6":"code","91a78024":"code","53183558":"code","ac88e063":"code","db3a22dd":"code","aed4eccc":"code","3b4723f9":"code","19018327":"code","0c7e84b8":"markdown","26b5e864":"markdown","b98a06ee":"markdown","afe0ea99":"markdown","656740c8":"markdown","185c4f01":"markdown"},"source":{"dd9fa638":"import numpy as np\nimport pandas as pd\nfrom catboost import CatBoostRegressor\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import TimeSeriesSplit, cross_val_score, ShuffleSplit\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.feature_selection import SelectKBest, f_classif, VarianceThreshold\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9b68deed":"CUT_DATE = \"2019-06-22\"","65ef6823":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","fa586430":"df['date'] = pd.to_datetime(df.date)","720ba8c7":"df.isnull().sum()","f7ed8fba":"# CRM calculation \n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)\n\ndf = df[df['CPM'] >= 0].reset_index(drop=True)\n\n# removing existing in the formula variables\ndel df['total_revenue']\ndel df['measurable_impressions']","19ac5b3f":"df['day'] = pd.DatetimeIndex(df['date']).day","b1af6e4f":"df.nunique()","eac62193":"# Removing useless variables with 1 value\n\ndel df['revenue_share_percent']\ndel df['integration_type_id']","87d99ed8":"test = df[pd.to_datetime(df[\"date\"]) >= pd.to_datetime(CUT_DATE)]\ntest_quantile_val = test['CPM'].quantile(.95)\ntest = test[test['CPM'] < test_quantile_val].reset_index(drop=True)","5849b7f7":"train = df[pd.to_datetime(df['date']) < pd.to_datetime(CUT_DATE)]\ntrain_quantile_val = train['CPM'].quantile(.95)\ntrain = train[train['CPM'] < train_quantile_val].reset_index(drop=True)","02f3f98b":"train.head()","80134ca9":"train.describe()","7b151d4b":"test.describe()","89e2a75c":"plt.figure(figsize=(20,10))\ncor = df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","57df0713":"train.columns","69f940bf":"column_names = ['site_id', 'ad_type_id', 'geo_id', 'device_category_id',\n       'advertiser_id', 'order_id', 'line_item_type_id', 'os_id',\n       'monetization_channel_id', 'ad_unit_id', 'total_impressions',\n       'viewable_impressions', 'day']\n\nx_data_best = SelectKBest(f_classif, k=5).fit_transform(train[column_names], train[['CPM']])\nvar_thresh = VarianceThreshold(.9).fit(train[column_names])\nx_data_modified = var_thresh.transform(train[column_names])","1c51c452":"var_thresh.get_support()","8176fcf8":"# so, device_category_id is not importaint\n\nselected_columns = ['site_id', 'ad_type_id', 'geo_id',\n       'advertiser_id', 'order_id', 'line_item_type_id', 'os_id',\n       'monetization_channel_id', 'ad_unit_id', 'total_impressions',\n       'viewable_impressions', 'day']","b4a1d782":"categorical_features = ['site_id', 'ad_type_id', 'geo_id',\n                       'advertiser_id', 'order_id','line_item_type_id',\n                       'os_id', 'monetization_channel_id',\n                       'ad_unit_id', 'day',\n                       ]\n\nnumerical_features   = ['total_impressions', 'viewable_impressions']","dac2f716":"train_features = train[categorical_features + numerical_features]\ntarget = train[['CPM']]","e68bb1c3":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', scaler, numerical_features)])","716e92ff":"model = CatBoostRegressor(loss_function='RMSE', \n                          cat_features=categorical_features, \n                          random_seed=83)","f5ebac25":"pipe = Pipeline(steps=[('regressor', model)])","6c9dc0d6":"pipe.fit(train_features, target)","91a78024":"predictions = pipe.predict(test[categorical_features + numerical_features])","53183558":"mean_squared_error(test['CPM'].tolist(), predictions)","ac88e063":"reg1 = GradientBoostingRegressor()\nreg2 = RandomForestRegressor()\nreg3 = LinearRegression()\nereg = VotingRegressor(estimators=[('gb', reg1), ('rf', reg2), ('lr', reg3)])","db3a22dd":"pipe = Pipeline(steps=[('regressor', ereg)])","aed4eccc":"pipe.fit(train_features, target)","3b4723f9":"predictions = pipe.predict(test[categorical_features + numerical_features])","19018327":"mean_squared_error(test['CPM'].tolist(), predictions)","0c7e84b8":"# Feature selection","26b5e864":"# Experiments","b98a06ee":"Catboost results are better **3664.08**","afe0ea99":"#### CatBoost","656740c8":"# Train and test preparation","185c4f01":"## Sklearn regressors"}}