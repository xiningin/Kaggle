{"cell_type":{"ca3b225a":"code","cad62622":"code","15c6a7b1":"code","dcc6b1d5":"code","df47ff89":"code","79cf0428":"code","2217ae13":"code","499a707b":"code","182d4fec":"code","1c7b6ba6":"code","f860ddd7":"code","a94332bd":"code","809a96e4":"code","dd577ce6":"code","bd3d1f6b":"code","ef946fcf":"code","93b7d719":"code","1c97bf77":"code","2fe5e65b":"code","f30e7bb9":"code","cefdbd91":"code","587a43eb":"code","f3a3c9d0":"code","84ebb795":"code","e9a8beef":"code","f3b095b3":"code","2463e14c":"code","aefc5bc3":"code","3e87f53c":"code","3a91b45f":"code","6751e631":"code","92bf6457":"code","3c131739":"code","c22c8a75":"code","18b832da":"code","23b0ee1f":"code","d7ff39a4":"code","e4a9a922":"code","f0df6459":"code","b0f4a27a":"code","e5b55b9f":"code","a2f9541e":"code","03d5386a":"code","3d0e098f":"code","0f648599":"code","4fb1e829":"code","9495215f":"code","69e208cf":"code","fe5cbfc2":"code","3fded40b":"code","2c9b06f8":"code","ac56e106":"code","b167f0d2":"code","e8768507":"code","1d449744":"code","f210c6bb":"code","b06ed8a0":"code","0d023647":"code","ea4d09ac":"code","70c1299d":"code","116184f2":"code","4e95f1c8":"code","c26e4a1f":"code","fad37484":"code","89b98501":"code","3b11a8a3":"code","d1de32b7":"code","f501c38f":"code","830ce2cc":"code","f7c9a45d":"code","42f32e4b":"code","08ec81c4":"code","20a69d9e":"markdown","2f925827":"markdown","ffdd8a02":"markdown","abbaeaf0":"markdown","3d505477":"markdown","ffea279b":"markdown"},"source":{"ca3b225a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cad62622":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')\ndata.columns #Total of 20 columns","15c6a7b1":"data.dtypes","dcc6b1d5":"#Converting data to different type\n#dataNew = data.keywords.astype('category') # 'float' ...\ncv = lambda x, y: x.astype(y)","df47ff89":"cv(data.keywords, 'category')","79cf0428":"data.shape","2217ae13":"data.info() #homepage property have 3091 null elements","499a707b":"data.head(8)","182d4fec":"data.tail(8)","1c7b6ba6":"data.describe()","f860ddd7":"data.plot()\nplt.show()","a94332bd":"#Filling && Dropping Nan | Null | - data\n#data.property.dropna(inplace = True) #Nan will be dropped.\n#data.property.fillna('Anything',inplace = True) #Anything is a value that we wish to change Nan with.","809a96e4":"#dropna allows to count null values\ndata.production_companies.value_counts(dropna = False) ","dd577ce6":"data.production_countries.value_counts(dropna = False) ","bd3d1f6b":"data.homepage.dropna(inplace = True) #Drops null values\n#ASSERTING\n#assert 1 == 1 #True returns nothing\n#assert 1 == 93 #False returns error\nassert data['homepage'].notnull().all() #Checks if homepage has no null value \n#returns true if homepage does not include null values.","ef946fcf":"data.homepage.fillna('myValue', inplace = True)\nassert data['homepage'].notnull().all()","93b7d719":"assert data.columns[0] == 'budget'","1c97bf77":"assert data.budget.dtype == int","2fe5e65b":"#assert data.budget.dtype == pd.int #Error because pd does not have attribute int","f30e7bb9":"assert data.budget.dtype == np.int","cefdbd91":"data.boxplot(column = 'budget')\nplt.show()\n#data.boxplot(column = 'revenue', by = ['vote_average', 'vote_count'])\n#data.boxplot(column = 'revenue', by = 'vote_average')\n#plt.show()","587a43eb":"data.head()","f3a3c9d0":"#Melting\ndataHead = data.head()\ndataHead = pd.melt(frame = dataHead, id_vars = 'title', value_vars = ['budget', 'revenue'])\ndataHead","84ebb795":"#Reverse melting\ndataHead.pivot(index = 'title', columns = 'variable', values = 'value')","e9a8beef":"#Concatenating\n#pd.concat([DATA1, DATA2], axis = (0 | 1), ignore_index = True <- sorts index from beginning)\nconcatRow = pd.concat([data.head(2), data.tail(2)], axis = 0, ignore_index = True)\nconcatRow","f3b095b3":"#concatColumn = pd.concat([data.head(2), data.tail(2)], axis = 1)\nconcatColumn = pd.concat([data.title.head(2), data.popularity.head(2)], axis = 1)\nconcatColumn","2463e14c":"#Filters movies which cost less than 1.000.000 and earned less than 1.000.000\ndata = data[(data.budget > 1000000) & (data.revenue > 1000000)]\ndata.loc[data.budget == data.budget.max()]","aefc5bc3":"data.loc[data.revenue == data.revenue.max()]","3e87f53c":"data.plot(x = 'budget', y = 'revenue', kind = 'scatter', color = 'blue', alpha = 0.9)\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\nplt.title('Budget vs Revenue')\nplt.show()","3a91b45f":"data.loc[:,['budget', 'revenue']].plot()\nplt.show()","6751e631":"data.loc[:,['budget', 'revenue']].plot(subplots = True)\nplt.show()","92bf6457":"#data.plot(kind = 'hist', y = 'revenue', bins = 999, range = (0, 250), normed = True)\n#data.plot(kind = 'hist', y = 'budget', bins = 99, range = (0, 250), density = True)\n#data.plot(kind = 'hist', y = 'budget', bins = 100, range = (1, 999))\n#data.plot(kind = 'hist', y = 'budget', bins = 100, ylim = (0, 1000), range = (1, 1000))\ncolumnsToKeep = ['title', 'budget', 'revenue']\ndataHead = data[columnsToKeep].head()\n#dataHead.plot(kind = 'hist', y = 'revenue', bins = 100, ylim = (-1, 1), range = (-1, 1))\ndataHead.plot(kind = 'hist', y = 'revenue', bins = 25)\nplt.legend(loc = 'upper right')\n#plt.savefig('graph.png')\nplt.show()","3c131739":"dataHead.plot(\n    kind = 'hist', \n    y = 'revenue',\n    bins = 100,\n    cumulative = True\n)\nplt.show()","c22c8a75":"firstMovie = data[data.id == 1865] # firstMovie == Pirates of the Caribbean: On Stranger Tides\nsecondMovie = data[data.id == 19995]  # secondMovie == Avatar\n#  columnsToDrop = ['keywords', \n#                  'original_language', \n#                  'original_title', \n#                  'overview', \n#                  'production_companies',\n#                  'production_countries',\n#                  'release_date',\n#                  'runtime',\n#                  'spoken_languages',\n#                  'status',\n#                  'tagline'\n#                 ]\n# firstMovie.drop(columnsToDrop, axis = 1, inplace = True)\n# secondMovie.drop(columnsToDrop, axis = 1, inplace = True)\n# gives KeyError: \"['keywords' 'original_title'] not found in axis\"\ncolumnsToKeep = ['title', 'popularity', 'vote_average', 'vote_count']\nfirstMovie = firstMovie[columnsToKeep]\nsecondMovie = secondMovie[columnsToKeep]","18b832da":"# def getDetails(movie):\n#     \"\"\"\n#     Get popularity, vote average and vote count properties as one string\n#    :param pandas.dataFrame movie: Movie to get its details from.\n#    :return: str : Details as one string\n#    \"\"\"\n#     details = np.empty(shape = (2, 4), dtype = object) # np.empty(shape = (2, 4), dtype = np.str)\n#     shapeCounter = 0\n#     if movie is not None:\n#         for key, value in movie.items():\n#             if key == 'title' or key == 'popularity' or key == 'vote_average' or key == 'vote_count':\n#                 details[0, shapeCounter] = str(key[0].upper() + key[1:len(key)])\n#                 details[1, shapeCounter] = str(value)\n#                 shapeCounter += 1\n            \n#     return details\n         \n# details0 = getDetails(firstMovie)\n# details1 = getDetails(secondMovie)","23b0ee1f":"def getDetailsAsArray(movie):\n    \"\"\"\n    Get properties as numpy array\n    :param pandas.dataFrame movie: Movie to get properties from.\n    :return: numpy.array: Details as numpy object array.\n    \"\"\"\n    #details = np.empty(shape = (2, 4), dtype='U32')\n    details = np.empty(shape = (2, 4), dtype = object)\n    columnCounter = 0\n    if movie is not None:\n        for key, value in movie.items():      \n            # turn value series into a str list.\n            value = value.to_string().split()\n            # delete first element 17\n            del value[0]          \n            # join the list\n            value = ' '.join(value).strip()\n            if key == 'vote_average' or 'vote_count':\n                details[0, columnCounter] = str(key)\n            else:\n                details[0, columnCounter] = str(key[0].upper() + key[1:len(key)])\n            details[1, columnCounter] = str(value)\n            columnCounter += 1\n        \n    return details","d7ff39a4":"details0 = getDetailsAsArray(firstMovie)\ndetails1 = getDetailsAsArray(secondMovie)","e4a9a922":"isBigger = lambda x, y: x > y","f0df6459":"def getPercentage(firstValue, secondValue):\n    \"\"\"\n    Calculates a percentage of this values.\n    :param float firstValue:\n    :param float secondValue:\n    :return float percentage\n    \"\"\"\n    return float(secondValue) * 100 \/ float(firstValue)","b0f4a27a":"def compare(details0, details1):\n    \"\"\"\n    Compares popularity, vote average and vote count properties as one string\n    :param np.array details0: First details\n    :param np.array details1: Second details\n    \"\"\"\n    print('Titles: ')\n    print('First title: ', details0[1, 0])\n    print('Second title: ', details1[1, 0])\n    firstPop = details0[1, 2]\n    secondPop = details1[1, 2]\n    firstVoteCount = details0[1, 3]\n    secondVoteCount = details1[1, 3]\n    #Popularity comparison\n    if isBigger(firstPop, secondPop):\n        percentage = getPercentage(firstPop, secondPop)\n        print('First title is', '{0:.2f}'.format(percentage), 'more popular then second title.')\n    elif isBigger(secondPop, firstPop):\n        percentage = getPercentage(secondPop, firstPop)\n        print('Second title is', '{0:.2f}'.format(percentage), 'more popular then first title.')\n    else:\n        print('Titles are equally popular.')\n    #Vote count comparison\n    if isBigger(firstVoteCount, secondVoteCount):\n        percentage = getPercentage(firstVoteCount, secondVoteCount)\n        print('First title is voted', '{0:.2f}'.format(percentage), 'then second title.')\n    elif isBigger(secondVoteCount, firstVoteCount):\n        percentage = getPercentage(secondVoteCount, firstVoteCount)\n        print('Second title is voted', '{0:.2f}'.format(percentage), 'then first title.')\n    else:\n        print('Titles are equally voted.')","e5b55b9f":"compare(details0, details1)","a2f9541e":"#Pandas creating frames with dictionaries\n# pd.DataFrame(\n#     dict(\n#         list(\n#             zip(\n#                 ['name', 'age', 'job'], \n#                 [\n#                     ['Jack', 'Cindy', 'Python'], \n#                     [32, 18, 29], \n#                     ['Coal Miner', 'Secretary', 'Engineer']\n#                 ]\n#             )\n#         )\n#     )\n# )\nname = ['Jack', 'Cindy', 'Adam']\nage = [32, 18, 29]\njob = ['Coal Miner', 'Secretary', 'Engineer']\nlistLabels = ['name', 'age', 'job']\nlistColumns = [name, age, job]\nzippedList = list(zip(listLabels, listColumns))\ndictionary = dict(zippedList)\nframe = pd.DataFrame(dictionary)\nframe","03d5386a":"#Assing new value\nframe['salary'] = [300, 600, 900]\nframe","3d0e098f":"#Broadcasting\nframe['isWorking'] = True\nframe","0f648599":"#Pandas Time Series\n#yyyy-mm-dd hh:mm:ss)\ntimeList = ['1992-03-08', '1992-04-12']\ndateTime = pd.to_datetime(timeList)\ntype(dateTime)","4fb1e829":"columnsToKeep = [\n    'title', \n    'budget', \n    'revenue', \n    'popularity'\n]\ndataHead = data[columnsToKeep].head(9).copy()\ndateList = [\n    '1992-01-01', \n    '1992-01-05',\n    '1992-02-01', \n    '1992-03-01',\n    '1992-03-11',\n    '1992-04-01',\n    '1992-05-01',\n    '1993-03-02',\n    '1994-02-05'\n]\ndateTime = pd.to_datetime(dateList)\ndataHead['date'] = dateTime\ndataHead = dataHead.set_index('date')\ndataHead","9495215f":"print(dataHead.loc['1992-01-01'])\nprint('---Slicing---')\nprint(dataHead.loc['1992-01-01' : '1992-04-01'])","69e208cf":"#Resampling\n# A = year M = month\ndataHead.resample('A').mean()","fe5cbfc2":"dataHead.resample('M').mean()","3fded40b":"dataHead.resample('M').first().interpolate('linear')","2c9b06f8":"dataHead.resample('M').mean().interpolate('linear')","ac56e106":"#excludeNan = lambda frame: [else 'aaA' var if pd.notnull(var) for var in frame]\nexclude = lambda frame: [\n    var if pd.notnull(var)\n    else \"SpaceHolder\"\n    for var in frame\n]\ndataHead.resample('M').apply(exclude)\n#Not working.","b167f0d2":"#I reimported because id column is dropped at this point.\ndata = pd.read_csv('..\/input\/tmdb_5000_movies.csv')\ndata = data.set_index('id')\ndata = data.sort_values('id')\ndata.head() #1 : 5 and 6 : 11 missing in id","e8768507":"data['title'][5]","1d449744":"print(type(data['title']))\nprint(type(data[['title']]))","f210c6bb":"data.loc[1:15, 'title'] # Fro\u00f6 1 to 15 get 'title'","b06ed8a0":"data.loc[1:15, 'title':] #from 1 to 15 get from 'title' to end","0d023647":"data[(data.vote_count > 10000) & (data.vote_average > 5.0)].head()","ea4d09ac":"data.title[(data.popularity > 50.0) & (data.budget == 100000000)].head()","70c1299d":"data['profit'] = data.revenue - data.budget\n#Change order of columns so the profit property will be at the beginning\ncolumns = data.columns.tolist()\n#columns[-1:] get last element columns[:-1] get everything except last element\n#columns[-1:] + columns[:-1] \ncolumns = columns[::-1] #columns[-1:] + columns[:-1] \ndata[columns].head()","116184f2":"#Index processing\nprint(data.index.name)\n#data.index.name = 'index'\n#data.index = range(100, 900, 1) #index range will be changed\n#data.set_index('title') == data.index = data['title']","4e95f1c8":"#Data index has a hierarchy\nhierarchicalData = data.set_index(['status', 'runtime'])\nhierarchicalData.head()","c26e4a1f":"dic = {\n    'title': ['aaaa', 'bbbb', 'cccc', 'dddd'],\n    'status': ['R', 'R', 'C', 'C'],\n    'budget': [15, 20, 15, 20],\n    'revenue': [4, 8, 12, 16]\n}\nframe = pd.DataFrame(dic)\nframe","fad37484":"#Pivot\nframe.pivot(index = 'status', columns = 'budget', values = 'revenue')\n#title: aaa status: R budget: 15, revenue: 6\n#title: bbb status: R budget: 20, revenue: 9","89b98501":"frame = frame.set_index(['status', 'budget'])\nframe","3b11a8a3":"#level position of stacked index\nframe.unstack(level = 0)","d1de32b7":"frame.unstack(level = 1)","f501c38f":"frame = frame.swaplevel(0, 1)\nframe","830ce2cc":"#Melting repeat\ndic = {\n    'title': ['aaaa', 'bbbb', 'cccc', 'dddd'],\n    'status': ['R', 'R', 'C', 'C'],\n    'budget': [15, 20, 15, 20],\n    'revenue': [4, 8, 12, 16]\n}\nframe = pd.DataFrame(dic)\npd.melt(frame, id_vars = 'status', value_vars = ['title', 'revenue'])","f7c9a45d":"frame.groupby('status').mean()","42f32e4b":"frame.groupby('status').budget.mean()","08ec81c4":"frame.groupby('status')['revenue', 'budget'].min()","20a69d9e":"My data's columns are all lower case and does not contain spaces so it is not required to clean it.","2f925827":"My data's columns plot.","ffdd8a02":"Last eight element of my data.","abbaeaf0":"First eight element of my data.","3d505477":"Avatar movie cost 237.000.000 to make and earned 2.787.965.087 total gain is 2.552.965.087","ffea279b":"Pirates of the Caribbean: On Stranger Tides movie cost 380.000.000 to make and earned 1.045.713.802 total gain is 665.713.802"}}