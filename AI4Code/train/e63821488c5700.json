{"cell_type":{"bce1e22d":"code","3701b30c":"code","f79b93eb":"code","20f7c60f":"code","751222ff":"code","0dae46f4":"code","baa0c2fc":"code","92a0df5b":"code","20a6b8fc":"code","c8f5948e":"code","04e6a829":"code","4b54d476":"code","4e40d1e2":"code","11972151":"code","155631f7":"code","e23e3155":"code","e7eed36d":"code","6defef80":"code","b822d71a":"code","64b0b8fb":"code","aa1c4ebb":"code","0d464e48":"code","ec0ec058":"code","71e4f5d5":"code","1234552f":"code","58b1cabd":"code","045773a1":"code","b6b1650b":"code","024888a2":"code","fa5461a6":"code","69295ca4":"code","88051dc8":"code","a2b2ff02":"code","0223a75c":"code","1de078f6":"code","a23dd88b":"code","09fae196":"code","78d67f08":"code","0fa8db6f":"code","3be9b32d":"code","9ad0f3e1":"code","9001b339":"code","471b37bc":"code","d22e3710":"code","75548b24":"code","9a62c3f1":"code","2b340fc8":"code","cb2430cc":"code","5b4e4a42":"code","b8f68a89":"code","db5b6b90":"code","e614e8f4":"code","ae73165c":"code","b436a3b2":"code","2c300f79":"code","2fc9d9f6":"code","86b86a99":"code","af565402":"code","fbfe49e6":"markdown","680653e8":"markdown","9b8e416f":"markdown","e87305a5":"markdown","274d194b":"markdown","55e0b61b":"markdown","c3fab8e4":"markdown","fb275209":"markdown","545c699f":"markdown","3f5082df":"markdown","a23b5bc2":"markdown","3f287cec":"markdown","910a668a":"markdown","91ac4147":"markdown","c18311f1":"markdown","c14a11b4":"markdown","e7ec4705":"markdown","7b5b01fb":"markdown","4a8cdac5":"markdown","ac881dac":"markdown","55fc3931":"markdown","7b44651e":"markdown","8beca177":"markdown","c3790e53":"markdown","60cefd84":"markdown","ab0453d5":"markdown","da425ff7":"markdown","265d9b4c":"markdown"},"source":{"bce1e22d":"import pandas as pd\nimport numpy as np\nimport os\n\nimport gc","3701b30c":"DATA_ROOT = '..\/input\/'\nORIGINAL_DATA_FOLDER = os.path.join(DATA_ROOT, 'movie-review-sentiment-analysis-kernels-only')\nTMP_DATA_FOLDER = os.path.join(DATA_ROOT, 'kaggle_review_sentiment_tmp_data')","f79b93eb":"train_data_path = os.path.join(ORIGINAL_DATA_FOLDER, 'train.tsv')\ntest_data_path = os.path.join(ORIGINAL_DATA_FOLDER, 'test.tsv')\nsub_data_path = os.path.join(ORIGINAL_DATA_FOLDER, 'sampleSubmission.csv')\n\ntrain_df = pd.read_csv(train_data_path, sep=\"\\t\")\ntest_df = pd.read_csv(test_data_path, sep=\"\\t\")\nsub_df = pd.read_csv(sub_data_path, sep=\",\")","20f7c60f":"import seaborn as sns\nfrom sklearn.feature_extraction import text as sktext","751222ff":"train_df.head()","0dae46f4":"test_df.head()","baa0c2fc":"sub_df.head()","92a0df5b":"overlapped = pd.merge(train_df[[\"Phrase\", \"Sentiment\"]], test_df, on=\"Phrase\", how=\"inner\")\noverlap_boolean_mask_test = test_df['Phrase'].isin(overlapped['Phrase'])","20a6b8fc":"print(\"training data phrase length distribution\")\nsns.distplot(train_df['Phrase'].map(lambda ele: len(ele)), kde_kws={\"label\": \"train\"})\n\nprint(\"testing data phrase length distribution\")\nsns.distplot(test_df[~overlap_boolean_mask_test]['Phrase'].map(lambda ele: len(ele)), kde_kws={\"label\": \"test\"})","c8f5948e":"print(\"training and testing data sentences hist:\")\nsns.distplot(train_df['SentenceId'], kde_kws={\"label\": \"train\"})\nsns.distplot(test_df['SentenceId'], kde_kws={\"label\": \"test\"})","04e6a829":"print(\"The number of overlapped SentenceId between training and testing data:\")\ntrain_overlapped_sentence_id_df = train_df[train_df['SentenceId'].isin(test_df['SentenceId'])]\nprint(train_overlapped_sentence_id_df.shape[0])\n\ndel train_overlapped_sentence_id_df\ngc.collect()","4b54d476":"pd.options.display.max_colwidth = 250\nprint(\"Example of sentence and phrases: \")\n\nsample_sentence_id = train_df.sample(1)['SentenceId'].values[0]\nsample_sentence_group_df = train_df[train_df['SentenceId'] == sample_sentence_id]\nsample_sentence_group_df","4e40d1e2":"import nltk\nimport gensim\nimport operator \nfrom keras.preprocessing import text as ktext","11972151":"def build_vocab(texts):\n    tk = ktext.Tokenizer(lower = True, filters='')\n    tk.fit_on_texts(texts)\n    return tk.word_counts\n\ndef check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    for word in vocab.keys():\n        if word in embeddings_index:\n            known_words[word] = vocab[word]\n            continue\n        unknown_words[word] = vocab[word]\n\n    print('Found embeddings for {:.3%} of vocab'.format(len(known_words) \/ len(vocab)))\n    num_known_words = np.sum(np.asarray(list(known_words.values())))\n    num_unknown_words = np.sum(np.asarray(list(unknown_words.values())))\n    print('Found embeddings for  {:.3%} of all text'.format(float(num_known_words) \/ (num_known_words + num_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","155631f7":"texts = list(train_df['Phrase'].values) + list(test_df['Phrase'].values)\nvocab = build_vocab(texts)","e23e3155":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr[:len(arr)-1], dtype='float32')\n    \n    embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>15)\n        \n    return embeddings_index","e7eed36d":"pretrained_w2v_path = os.path.join(DATA_ROOT, \"nlpword2vecembeddingspretrained\/GoogleNews-vectors-negative300.bin\")\nw2v_google = gensim.models.KeyedVectors.load_word2vec_format(pretrained_w2v_path, binary=True).wv\n\npretrained_w2v_path = os.path.join(DATA_ROOT, \"fasttext-crawl-300d-2m\/crawl-300d-2M.vec\")\nw2v_fasttext = load_embed(pretrained_w2v_path)","6defef80":"print(\"google\")\nunknown_vocab = check_coverage(vocab, w2v_google)\nprint(\"unknown vocabulary:\")\nprint(unknown_vocab[:50])\n\nprint(\"\\n\")\n\nprint(\"fast text\")\nunknown_vocab = check_coverage(vocab, w2v_fasttext)\nprint(\"unknown vocabulary:\")\nprint(unknown_vocab[:50])","b822d71a":"w2v = w2v_fasttext\n# del w2v_google, w2v_fasttext, texts, vocab\n# gc.collect()","64b0b8fb":"from keras.preprocessing import sequence\nimport gensim\nfrom sklearn import preprocessing as skp","aa1c4ebb":"max_len = 50\nembed_size = 300\nmax_features = 30000","0d464e48":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", \"n't\": \"not\", \"'ve\": \"have\"}","ec0ec058":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","71e4f5d5":"known_contract_list = known_contractions(w2v)\nprint(known_contract_list)","1234552f":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","58b1cabd":"train_df.loc[:, 'Phrase'] = train_df['Phrase'].map(lambda text: clean_contractions(text, contraction_mapping))\ntest_df.loc[:, 'Phrase'] = test_df['Phrase'].map(lambda text: clean_contractions(text, contraction_mapping))","045773a1":"full_text = list(train_df['Phrase'].values) + list(test_df['Phrase'].values)\nvocab = build_vocab(full_text)\ncheck_coverage(vocab, w2v)\nprint(\"\")","b6b1650b":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","024888a2":"punct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }","fa5461a6":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown\n\ndef clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text","69295ca4":"print(unknown_punct(w2v, punct))","88051dc8":"train_df.loc[:, 'Phrase'] = train_df['Phrase'].map(lambda text: clean_special_chars(text, punct, punct_mapping))\ntest_df.loc[:, 'Phrase'] = test_df['Phrase'].map(lambda text: clean_special_chars(text, punct, punct_mapping))","a2b2ff02":"full_text = list(train_df['Phrase'].values) + list(test_df['Phrase'].values)\nvocab = build_vocab(full_text)\nunknown_vocab = check_coverage(vocab, w2v)","0223a75c":"def map_unknown_token(text, dst_token, unknown_vocab_set):\n#     token_list = []\n#     for t in text.split(\" \"):\n#         if t in unknown_vocab_set:\n#             token_list.append(dst_token)\n#         else:\n#             token_list.append(t)\n    \n#     return \" \".join(token_list)\n    return' '.join([dst_token if t.lower() in unknown_vocab_set else t for t in text.split(\" \")])","1de078f6":"unknown_vocab_set = set(list(map(\n    lambda unknown_vocab_tuple: unknown_vocab_tuple[0],\n    unknown_vocab\n)))\ntrain_df.loc[:, 'Phrase'] = train_df['Phrase'].map(lambda ele: map_unknown_token(ele, \"[ name ]\", unknown_vocab_set))\ntest_df.loc[:, 'Phrase'] = test_df['Phrase'].map(lambda ele: map_unknown_token(ele, \"[ name ]\", unknown_vocab_set))","a23dd88b":"full_text = list(train_df['Phrase'].values) + list(test_df['Phrase'].values)\nvocab = build_vocab(full_text)\nunknown_vocab = check_coverage(vocab, w2v)\nprint(unknown_vocab)","09fae196":"full_text = list(train_df['Phrase'].values) + list(test_df[~overlap_boolean_mask_test]['Phrase'].values)\n\ntk = ktext.Tokenizer(lower = True, filters='')\ntk.fit_on_texts(full_text)\ntrain_tokenized = tk.texts_to_sequences(train_df['Phrase'])\ntest_tokenized = tk.texts_to_sequences(test_df[~overlap_boolean_mask_test]['Phrase'])\n\nX_train = sequence.pad_sequences(train_tokenized, maxlen = max_len)\nX_test = sequence.pad_sequences(test_tokenized, maxlen = max_len)","78d67f08":"word_index = tk.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.zeros((nb_words + 1, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = None\n    if word in w2v:\n        embedding_vector = w2v[word]\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector\n        \ndel w2v\ngc.collect()","0fa8db6f":"y_train = train_df['Sentiment']\n\nled = skp.LabelEncoder()\nled.fit(y_train.values)\n\ny_train = led.transform(y_train.values)","3be9b32d":"import tensorflow as tf\n\nfrom keras import callbacks as kc\nfrom keras import optimizers as ko\nfrom keras import initializers, regularizers, constraints\nfrom keras.engine import Layer\nimport keras.backend as K","9ad0f3e1":"def _dot_product(x, kernel):\n    \"\"\"\n    Wrapper for dot product operation, in order to be compatible with both\n    Theano and Tensorflow\n    Args:\n        x (): input\n        kernel (): weights\n    Returns:\n    \"\"\"\n    if K.backend() == 'tensorflow':\n        # todo: check that this is correct\n        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)\n    else:\n        return K.dot(x, kernel)\n    \n    \nclass AttentionWeight(Layer):\n    \"\"\"\n        This code is a modified version of cbaziotis implementation:  GithubGist cbaziotis\/AttentionWithContext.py\n        Attention operation, with a context\/query vector, for temporal data.\n        Supports Masking.\n        Follows the work of Yang et al. [https:\/\/www.cs.cmu.edu\/~diyiy\/docs\/naacl16.pdf]\n        \"Hierarchical Attention Networks for Document Classification\"\n        by using a context vector to assist the attention\n        # Input shape\n            3D tensor with shape: `(samples, steps, features)`.\n        # Output shape\n            2D tensor with shape: `(samples, steps)`.\n        :param kwargs:\n        Just put it on top of an RNN Layer (GRU\/LSTM\/SimpleRNN) with return_sequences=True.\n        The dimensions are inferred based on the output shape of the RNN.\n        Example:\n            model.add(LSTM(64, return_sequences=True))\n            model.add(AttentionWeight())\n        \"\"\"\n\n    def __init__(self,\n                 W_regularizer=None, u_regularizer=None, b_regularizer=None,\n                 W_constraint=None, u_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.u_regularizer = regularizers.get(u_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.u_constraint = constraints.get(u_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        super(AttentionWeight, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1], input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        if self.bias:\n            self.b = self.add_weight((input_shape[-1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n\n        self.u = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_u'.format(self.name),\n                                 regularizer=self.u_regularizer,\n                                 constraint=self.u_constraint)\n\n        super(AttentionWeight, self).build(input_shape)\n\n    def compute_mask(self, input, input_mask=None):\n        # do not pass the mask to the next layers\n        return None\n\n    def call(self, x, mask=None):\n        uit = _dot_product(x, self.W)\n\n        if self.bias:\n            uit += self.b\n\n        uit = K.tanh(uit)\n        ait = _dot_product(uit, self.u)\n\n        a = K.exp(ait)\n\n        # apply mask after the exp. will be re-normalized next\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in theano\n            a *= K.cast(mask, K.floatx())\n\n        # in some cases especially in the early stages of training the sum may be almost zero\n        # and this results in NaN's. A workaround is to add a very small positive number \u03b5 to the sum.\n        # a \/= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        return a\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0], input_shape[1]\n\n    def get_config(self):\n        config = {\n            'W_regularizer': regularizers.serialize(self.W_regularizer),\n            'u_regularizer': regularizers.serialize(self.u_regularizer),\n            'b_regularizer': regularizers.serialize(self.b_regularizer),\n            'W_constraint': constraints.serialize(self.W_constraint),\n            'u_constraint': constraints.serialize(self.u_constraint),\n            'b_constraint': constraints.serialize(self.b_constraint),\n            'bias': self.bias\n        }\n        base_config = super(AttentionWeight, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))","9001b339":"def is_integer(val):\n    return isinstance(val, (int, np.int_))\n\ndef predict(keras_model, x, learning_phase=0):\n\n    if isinstance(keras_model.input, list):\n        f = backend.function(\n            keras_model.input + [backend.learning_phase()],\n            [keras_model.output, ]\n        )\n        y = f(tuple(x) + (learning_phase,))[0]\n    else:\n        f = backend.function(\n            [keras_model.input, backend.learning_phase()],\n            [keras_model.output, ]\n        )\n        y = f((x, learning_phase))[0]\n    return y\n    \n\ndef build_birnn_attention_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, \n        item_embedding=None, rnn_depth=1, mlp_depth=1, num_att_channel=1,\n        drop_out=0.5, rnn_drop_out=0., rnn_state_drop_out=0.,\n        trainable_embedding=False, gpu=False, return_customized_layers=False):\n    \"\"\"\n    Create A Bidirectional Attention Model.\n\n    :param voca_dim: vocabulary dimension size.\n    :param time_steps: the length of input\n    :param output_dim: the output dimension size\n    :param rnn_dim: rrn dimension size\n    :param mlp_dim: the dimension size of fully connected layer\n    :param item_embedding: integer, numpy 2D array, or None (default=None)\n        If item_embedding is a integer, connect a randomly initialized embedding matrix to the input tensor.\n        If item_embedding is a matrix, this matrix will be used as the embedding matrix.\n        If item_embedding is None, then connect input tensor to RNN layer directly.\n    :param rnn_depth: rnn depth\n    :param mlp_depth: the depth of fully connected layers\n    :param num_att_channel: the number of attention channels, this can be used to mimic multi-head attention mechanism\n    :param drop_out: dropout rate of fully connected layers\n    :param rnn_drop_out: dropout rate of rnn layers\n    :param rnn_state_drop_out: dropout rate of rnn state tensor\n    :param trainable_embedding: boolean\n    :param gpu: boolean, default=False\n        If True, CuDNNLSTM is used instead of LSTM for RNN layer.\n    :param return_customized_layers: boolean, default=False\n        If True, return model and customized object dictionary, otherwise return model only\n    :return: keras model\n    \"\"\"\n    \n    if item_embedding is not None:\n        inputs = models.Input(shape=(time_steps,), dtype='int32', name='input0')\n        x = inputs\n\n        # item embedding\n        if isinstance(item_embedding, np.ndarray):\n            assert voca_dim == item_embedding.shape[0]\n            x = layers.Embedding(\n                voca_dim, item_embedding.shape[1], input_length=time_steps,\n                weights=[item_embedding, ], trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        elif utils.is_integer(item_embedding):\n            x = layers.Embedding(\n                voca_dim, item_embedding, input_length=time_steps,\n                trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        else:\n            raise ValueError(\"item_embedding must be either integer or numpy matrix\")\n    else:\n        inputs = models.Input(shape=(time_steps, voca_dim), dtype='float32', name='input0')\n        x = inputs\n    \n    x = layers.SpatialDropout1D(rnn_drop_out, name='rnn_spatial_droutout_layer')(x)\n\n    if gpu:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.CuDNNLSTM(rnn_dim, return_sequences=True),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n            x = layers.Dropout(rate=rnn_drop_out, name=\"rnn_dropout_layer\" + str(i))(x)\n    else:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.LSTM(rnn_dim, return_sequences=True, dropout=rnn_drop_out, recurrent_dropout=rnn_state_drop_out),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n\n    # attention\n    attention_heads = []\n    x_per = layers.Permute((2, 1), name='permuted_attention_x')(x)\n    for h in range(max(1, num_att_channel)):\n        attention = AttentionWeight(name=\"attention_weights_layer\" + str(h))(x)\n        xx = layers.Dot([2, 1], name='focus_head' + str(h) + '_layer0')([x_per, attention])\n        attention_heads.append(xx)\n\n    if num_att_channel > 1:\n        x = layers.Concatenate(name='focus_layer0')(attention_heads)\n    else:\n        x = attention_heads[0]\n\n    x = layers.BatchNormalization(name='focused_batch_norm_layer')(x)\n    x = layers.Dropout(rate=rnn_drop_out, name=\"focused_dropout_layer\")(x)\n\n    # MLP Layers\n    for i in range(mlp_depth - 1):\n        x = layers.Dense(mlp_dim, activation='selu', kernel_initializer='lecun_normal', name='selu_layer' + str(i))(x)\n        x = layers.AlphaDropout(drop_out, name='alpha_layer' + str(i))(x)\n\n    outputs = layers.Dense(output_dim, activation=\"softmax\", name=\"softmax_layer0\")(x)\n\n    model = models.Model(inputs, outputs)\n\n    if return_customized_layers:\n        return model, {'AttentionWeight': AttentionWeight}\n    return model\n\n\ndef build_cnn_model(\n        voca_dim, time_steps, output_dim, mlp_dim, num_filters, filter_sizes,\n        item_embedding=None, mlp_depth=1,\n        drop_out=0.5, cnn_drop_out=0.5, pooling='max', padding='valid',\n        trainable_embedding=False, return_customized_layers=False):\n    \"\"\"\n    Create A CNN Model.\n\n    :param voca_dim: vocabulary dimension size.\n    :param time_steps: the length of input\n    :param output_dim: the output dimension size\n    :param num_filters: list of integers\n        The number of filters.\n    :param filter_sizes: list of integers\n        The kernel size.\n    :param mlp_dim: the dimension size of fully connected layer\n    :param item_embedding: integer, numpy 2D array, or None (default=None)\n        If item_embedding is a integer, connect a randomly initialized embedding matrix to the input tensor.\n        If item_embedding is a matrix, this matrix will be used as the embedding matrix.\n        If item_embedding is None, then connect input tensor to RNN layer directly.\n    :param mlp_depth: the depth of fully connected layers\n    :param drop_out: dropout rate of fully connected layers\n    :param cnn_drop_out: dropout rate of between cnn layer and fully connected layers\n    :param pooling: str, either 'max' or 'average'\n        Pooling method.\n    :param padding: One of \"valid\", \"causal\" or \"same\" (case-insensitive).\n        Padding method.\n    :param trainable_embedding: boolean\n    :param return_customized_layers: boolean, default=False\n        If True, return model and customized object dictionary, otherwise return model only\n    :return: keras model\n    \"\"\"\n\n    if item_embedding is not None:\n        inputs = models.Input(shape=(time_steps,), dtype='int32', name='input0')\n        x = inputs\n\n        # item embedding\n        if isinstance(item_embedding, np.ndarray):\n            assert voca_dim == item_embedding.shape[0]\n            x = layers.Embedding(\n                voca_dim, item_embedding.shape[1], input_length=time_steps,\n                weights=[item_embedding, ], trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        elif utils.is_integer(item_embedding):\n            x = layers.Embedding(\n                voca_dim, item_embedding, input_length=time_steps,\n                trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        else:\n            raise ValueError(\"item_embedding must be either integer or numpy matrix\")\n    else:\n        inputs = models.Input(shape=(time_steps, voca_dim), dtype='float32', name='input0')\n        x = inputs\n    \n    x = layers.SpatialDropout1D(cnn_drop_out, name='cnn_spatial_droutout_layer')(x)\n\n    pooled_outputs = []\n    for i in range(len(filter_sizes)):\n        conv = layers.Conv1D(num_filters[i], kernel_size=filter_sizes[i], padding=padding, activation='relu')(x)\n        if pooling == 'max':\n            conv = layers.GlobalMaxPooling1D(name='global_pooling_layer' + str(i))(conv)\n        else:\n            conv = layers.GlobalAveragePooling1D(name='global_pooling_layer' + str(i))(conv)\n        pooled_outputs.append(conv)\n\n    x = layers.Concatenate(name='concated_layer')(pooled_outputs)\n    x = layers.Dropout(cnn_drop_out, name='conv_dropout_layer')(x)\n    x = layers.BatchNormalization(name=\"batch_norm_layer\")(x)\n\n    # MLP Layers\n    for i in range(mlp_depth - 1):\n        x = layers.Dense(mlp_dim, activation='selu', kernel_initializer='lecun_normal', name='selu_layer' + str(i))(x)\n        x = layers.AlphaDropout(drop_out, name='alpha_layer' + str(i))(x)\n\n    outputs = layers.Dense(output_dim, activation=\"softmax\", name=\"softmax_layer0\")(x)\n\n    model = models.Model(inputs, outputs)\n\n    if return_customized_layers:\n        return model, dict()\n\n    return model\n\n\ndef build_birnn_cnn_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, num_filters, filter_sizes,\n        item_embedding=None, rnn_depth=1, mlp_depth=1,\n        drop_out=0.5, rnn_drop_out=0.5, rnn_state_drop_out=0.5, cnn_drop_out=0.5, pooling='max', padding='valid',\n        trainable_embedding=False, gpu=False, return_customized_layers=False):\n    \"\"\"\n    Create A Bidirectional CNN Model.\n\n    :param voca_dim: vocabulary dimension size.\n    :param time_steps: the length of input\n    :param output_dim: the output dimension size\n    :param rnn_dim: rrn dimension size\n    :param num_filters: list of integers\n        The number of filters.\n    :param filter_sizes: list of integers\n        The kernel size.\n    :param mlp_dim: the dimension size of fully connected layer\n    :param item_embedding: integer, numpy 2D array, or None (default=None)\n        If item_embedding is a integer, connect a randomly initialized embedding matrix to the input tensor.\n        If item_embedding is a matrix, this matrix will be used as the embedding matrix.\n        If item_embedding is None, then connect input tensor to RNN layer directly.\n    :param rnn_depth: rnn depth\n    :param mlp_depth: the depth of fully connected layers\n    :param num_att_channel: the number of attention channels, this can be used to mimic multi-head attention mechanism\n    :param drop_out: dropout rate of fully connected layers\n    :param rnn_drop_out: dropout rate of rnn layers\n    :param rnn_state_drop_out: dropout rate of rnn state tensor\n    :param cnn_drop_out: dropout rate of between cnn layer and fully connected layers\n    :param pooling: str, either 'max' or 'average'\n        Pooling method.\n    :param padding: One of \"valid\", \"causal\" or \"same\" (case-insensitive).\n        Padding method.\n    :param trainable_embedding: boolean\n    :param gpu: boolean, default=False\n        If True, CuDNNLSTM is used instead of LSTM for RNN layer.\n    :param return_customized_layers: boolean, default=False\n        If True, return model and customized object dictionary, otherwise return model only\n    :return: keras model\n    \"\"\"\n\n    if item_embedding is not None:\n        inputs = models.Input(shape=(time_steps,), dtype='int32', name='input0')\n        x = inputs\n\n        # item embedding\n        if isinstance(item_embedding, np.ndarray):\n            assert voca_dim == item_embedding.shape[0]\n            x = layers.Embedding(\n                voca_dim, item_embedding.shape[1], input_length=time_steps,\n                weights=[item_embedding, ], trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        elif utils.is_integer(item_embedding):\n            x = layers.Embedding(\n                voca_dim, item_embedding, input_length=time_steps,\n                trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        else:\n            raise ValueError(\"item_embedding must be either integer or numpy matrix\")\n    else:\n        inputs = models.Input(shape=(time_steps, voca_dim), dtype='float32', name='input0')\n        x = inputs\n        \n    x = layers.SpatialDropout1D(rnn_drop_out, name='rnn_spatial_droutout_layer')(x)\n\n    if gpu:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.CuDNNLSTM(rnn_dim, return_sequences=True),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n            x = layers.Dropout(rate=rnn_drop_out, name=\"rnn_dropout_layer\" + str(i))(x)\n    else:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.LSTM(rnn_dim, return_sequences=True, dropout=rnn_drop_out, recurrent_dropout=rnn_state_drop_out),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n\n    pooled_outputs = []\n    for i in range(len(filter_sizes)):\n        conv = layers.Conv1D(num_filters[i], kernel_size=filter_sizes[i], padding=padding, activation='relu')(x)\n        if pooling == 'max':\n            conv = layers.GlobalMaxPooling1D(name='global_pooling_layer' + str(i))(conv)\n        else:\n            conv = layers.GlobalAveragePooling1D(name='global_pooling_layer' + str(i))(conv)\n        pooled_outputs.append(conv)\n\n    x = layers.Concatenate(name='concated_layer')(pooled_outputs)\n    x = layers.BatchNormalization(name=\"batch_norm_layer\")(x)\n    x = layers.Dropout(cnn_drop_out, name='conv_dropout_layer')(x)\n\n    # MLP Layers\n    for i in range(mlp_depth - 1):\n        x = layers.Dense(mlp_dim, activation='selu', kernel_initializer='lecun_normal', name='selu_layer' + str(i))(x)\n        x = layers.AlphaDropout(drop_out, name='alpha_layer' + str(i))(x)\n\n    outputs = layers.Dense(output_dim, activation=\"softmax\", name=\"softmax_layer0\")(x)\n\n    model = models.Model(inputs, outputs)\n\n    if return_customized_layers:\n        return model, dict()\n\n    return model\n\ndef build_birnn_hierarchy_cnn_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, num_filters, filter_sizes, \n        dilation_rates=1, strides=1,\n        item_embedding=None, rnn_depth=1, mlp_depth=1,\n        drop_out=0.5, rnn_drop_out=0.5, rnn_state_drop_out=0.5, cnn_drop_out=0.5, pooling='max', padding='valid',\n        trainable_embedding=False, gpu=False, return_customized_layers=False):\n    \"\"\"\n    Create A Bidirectional CNN Model.\n\n    :param voca_dim: vocabulary dimension size.\n    :param time_steps: the length of input\n    :param output_dim: the output dimension size\n    :param rnn_dim: rrn dimension size\n    :param num_filters: list of integers\n        The number of filters.\n    :param filter_sizes: list of integers\n        The kernel size.\n    :param mlp_dim: the dimension size of fully connected layer\n    :param item_embedding: integer, numpy 2D array, or None (default=None)\n        If item_embedding is a integer, connect a randomly initialized embedding matrix to the input tensor.\n        If item_embedding is a matrix, this matrix will be used as the embedding matrix.\n        If item_embedding is None, then connect input tensor to RNN layer directly.\n    :param rnn_depth: rnn depth\n    :param mlp_depth: the depth of fully connected layers\n    :param num_att_channel: the number of attention channels, this can be used to mimic multi-head attention mechanism\n    :param drop_out: dropout rate of fully connected layers\n    :param rnn_drop_out: dropout rate of rnn layers\n    :param rnn_state_drop_out: dropout rate of rnn state tensor\n    :param cnn_drop_out: dropout rate of between cnn layer and fully connected layers\n    :param pooling: str, either 'max' or 'average'\n        Pooling method.\n    :param padding: One of \"valid\", \"causal\" or \"same\" (case-insensitive).\n        Padding method.\n    :param trainable_embedding: boolean\n    :param gpu: boolean, default=False\n        If True, CuDNNLSTM is used instead of LSTM for RNN layer.\n    :param return_customized_layers: boolean, default=False\n        If True, return model and customized object dictionary, otherwise return model only\n    :return: keras model\n    \"\"\"\n\n    if item_embedding is not None:\n        inputs = models.Input(shape=(time_steps,), dtype='int32', name='input0')\n        x = inputs\n\n        # item embedding\n        if isinstance(item_embedding, np.ndarray):\n            assert voca_dim == item_embedding.shape[0]\n            x = layers.Embedding(\n                voca_dim, item_embedding.shape[1], input_length=time_steps,\n                weights=[item_embedding, ], trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        elif utils.is_integer(item_embedding):\n            x = layers.Embedding(\n                voca_dim, item_embedding, input_length=time_steps,\n                trainable=trainable_embedding,\n                mask_zero=False, name='embedding_layer0'\n            )(x)\n        else:\n            raise ValueError(\"item_embedding must be either integer or numpy matrix\")\n    else:\n        inputs = models.Input(shape=(time_steps, voca_dim), dtype='float32', name='input0')\n        x = inputs\n        \n    x = layers.SpatialDropout1D(rnn_drop_out, name='rnn_spatial_droutout_layer')(x)\n\n    if gpu:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.CuDNNLSTM(rnn_dim, return_sequences=True),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n            x = layers.Dropout(rate=rnn_drop_out, name=\"rnn_dropout_layer\" + str(i))(x)\n    else:\n        # rnn encoding\n        for i in range(rnn_depth):\n            x = layers.Bidirectional(\n                layers.LSTM(rnn_dim, return_sequences=True, dropout=rnn_drop_out, recurrent_dropout=rnn_state_drop_out),\n                name='bi_lstm_layer' + str(i))(x)\n            x = layers.BatchNormalization(name='rnn_batch_norm_layer' + str(i))(x)\n\n    for i in range(len(filter_sizes)):\n        if is_integer(dilation_rates):\n            di_rate = dilation_rates\n        else:\n            di_rate = dilation_rates[i]\n        \n        if is_integer(strides):\n            std = strides\n        else:\n            std = strides[i]\n            \n        x = layers.Conv1D(num_filters[i], kernel_size=filter_sizes[i], padding=padding, activation='relu', dilation_rate=di_rate, strides=std)(x)\n        \n    if pooling == 'max':\n        x = layers.GlobalMaxPooling1D(name='global_pooling_layer')(x)\n    else:\n        x = layers.GlobalAveragePooling1D(name='global_pooling_layer')(x)\n\n    x = layers.BatchNormalization(name=\"batch_norm_layer\")(x)\n    x = layers.Dropout(cnn_drop_out, name='conv_dropout_layer')(x)\n\n    # MLP Layers\n    for i in range(mlp_depth - 1):\n        x = layers.Dense(mlp_dim, activation='selu', kernel_initializer='lecun_normal', name='selu_layer' + str(i))(x)\n        x = layers.AlphaDropout(drop_out, name='alpha_layer' + str(i))(x)\n\n    outputs = layers.Dense(output_dim, activation=\"softmax\", name=\"softmax_layer0\")(x)\n\n    model = models.Model(inputs, outputs)\n\n    if return_customized_layers:\n        return model, dict()\n\n    return model","471b37bc":"from keras.utils import model_to_dot\nfrom keras import models\nfrom keras import layers\n\nimport matplotlib.pyplot as plt\nfrom IPython.display import SVG","d22e3710":"histories = list()\niterations = list()\nmodel_builders = list()","75548b24":"def build_model1():\n    voca_dim = embedding_matrix.shape[0]\n    time_steps = max_len\n    output_dim = led.classes_.shape[0]\n    mlp_dim = 50\n    num_filters = [128, 128, 128]\n    filter_sizes = [1, 3, 5]\n    item_embedding = embedding_matrix\n    mlp_depth = 2\n    cnn_drop_out = 0.2\n    mlp_drop_out = 0.2\n    padding = 'causal'\n\n    return build_cnn_model(\n        voca_dim, time_steps, output_dim, mlp_dim, num_filters, filter_sizes, \n        item_embedding=item_embedding, mlp_depth=2, cnn_drop_out=cnn_drop_out,\n        padding=padding,\n        return_customized_layers=True\n    )\n\nmodel_builders.append(build_model1)","9a62c3f1":"model, cnn_cl = build_model1()\nprint(model.summary())","2b340fc8":"adam = ko.Nadam()\nmodel.compile(adam, loss=\"sparse_categorical_crossentropy\", metrics=[\"sparse_categorical_accuracy\",])\n\nfile_path = \"best_cnn_model.hdf5\"\ncheck_point = kc.ModelCheckpoint(file_path, monitor = \"val_sparse_categorical_accuracy\", verbose = 1, save_best_only = True, mode = \"max\")\nearly_stop = kc.EarlyStopping(monitor = \"val_sparse_categorical_accuracy\", mode = \"max\", patience=3)\nhistory = model.fit(X_train, y_train, batch_size=500, epochs=20, validation_split=0.1, callbacks = [check_point, early_stop])\n\nhistories.append(np.max(np.asarray(history.history['val_sparse_categorical_accuracy'])))\niterations.append(np.argmax(np.asarray(history.history['val_sparse_categorical_accuracy'])))\ndel model, history\ngc.collect()","cb2430cc":"def build_model2():\n    voca_dim = embedding_matrix.shape[0]\n    time_steps = max_len\n    output_dim = led.classes_.shape[0]\n    rnn_dim = 100\n    mlp_dim = 50\n    item_embedding = embedding_matrix\n    rnn_depth=1\n    mlp_depth = 2\n    rnn_drop_out = 0.3\n    rnn_state_drop_out = 0.3\n    mlp_drop_out = 0.2\n    num_att_channel = 1\n    gpu=True\n    \n    return build_birnn_attention_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, \n        item_embedding=item_embedding, rnn_depth=rnn_depth, mlp_depth=mlp_depth, num_att_channel=num_att_channel,\n        rnn_drop_out=rnn_drop_out, rnn_state_drop_out=rnn_state_drop_out,\n        gpu=gpu, return_customized_layers=True\n    )\n\nmodel_builders.append(build_model2)","5b4e4a42":"model, rnn_cl = build_model2()\nprint(model.summary())","b8f68a89":"adam = ko.Nadam(clipnorm=2.0)\nmodel.compile(adam, loss=\"sparse_categorical_crossentropy\", metrics=[\"sparse_categorical_accuracy\",])\n\nfile_path = \"best_birnn_attention_model.hdf5\"\ncheck_point = kc.ModelCheckpoint(file_path, monitor = \"val_sparse_categorical_accuracy\", verbose = 1, save_best_only = True, mode = \"max\")\nearly_stop = kc.EarlyStopping(monitor = \"val_sparse_categorical_accuracy\", mode = \"max\", patience=3)\nhistory = model.fit(X_train, y_train, batch_size=500, epochs=20, validation_split=0.1, callbacks = [check_point, early_stop])\n\nhistories.append(np.max(np.asarray(history.history['val_sparse_categorical_accuracy'])))\niterations.append(np.argmax(np.asarray(history.history['val_sparse_categorical_accuracy'])))\ndel model, history\ngc.collect()","db5b6b90":"def build_model3():\n    voca_dim = embedding_matrix.shape[0]\n    time_steps = max_len\n    output_dim = led.classes_.shape[0]\n    rnn_dim = 100\n    mlp_dim = 50\n    item_embedding = embedding_matrix\n    rnn_depth=1\n    mlp_depth = 2\n    num_filters = [128, 128, 128]\n    filter_sizes = [1, 3, 5]\n    cnn_drop_out = 0.2\n    rnn_drop_out = 0.3\n    rnn_state_drop_out = 0.3\n    mlp_drop_out = 0.2\n    padding = 'causal'\n    gpu=True\n    \n    return build_birnn_cnn_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, num_filters, filter_sizes, \n        item_embedding=item_embedding, rnn_depth=rnn_depth, mlp_depth=mlp_depth,\n        rnn_drop_out=rnn_drop_out, rnn_state_drop_out=rnn_state_drop_out, cnn_drop_out=cnn_drop_out,\n        padding=padding,\n        gpu=gpu, return_customized_layers=True\n    )\n\nmodel_builders.append(build_model3)","e614e8f4":"model, rc_cl = build_model3()\nprint(model.summary())","ae73165c":"adam = ko.Nadam(clipnorm=2.0)\nmodel.compile(adam, loss=\"sparse_categorical_crossentropy\", metrics=[\"sparse_categorical_accuracy\",])\n\nfile_path = \"best_birnn_cnn_model.hdf5\"\ncheck_point = kc.ModelCheckpoint(file_path, monitor = \"val_sparse_categorical_accuracy\", verbose = 1, save_best_only = True, mode = \"max\")\nearly_stop = kc.EarlyStopping(monitor = \"val_sparse_categorical_accuracy\", mode = \"max\", patience=3)\nhistory = model.fit(X_train, y_train, batch_size=500, epochs=20, validation_split=0.1, callbacks = [check_point, early_stop])\n\nhistories.append(np.max(np.asarray(history.history['val_sparse_categorical_accuracy'])))\niterations.append(np.argmax(np.asarray(history.history['val_sparse_categorical_accuracy'])))\ndel model, history\ngc.collect()","b436a3b2":"def build_model4():\n    voca_dim = embedding_matrix.shape[0]\n    time_steps = max_len\n    output_dim = led.classes_.shape[0]\n    rnn_dim = 100\n    mlp_dim = 50\n    item_embedding = embedding_matrix\n    rnn_depth=1\n    mlp_depth = 2\n    num_filters = [128, 256, 512]\n    filter_sizes = [1, 3, 5]\n    dilation_rates = [1, 2, 4]\n    strides=1\n    cnn_drop_out = 0.2\n    rnn_drop_out = 0.3\n    rnn_state_drop_out = 0.3\n    mlp_drop_out = 0.2\n    padding = 'causal'\n    gpu=True\n    \n    return build_birnn_hierarchy_cnn_model(\n        voca_dim, time_steps, output_dim, rnn_dim, mlp_dim, num_filters, filter_sizes, \n        dilation_rates=dilation_rates, strides=strides,\n        item_embedding=item_embedding, rnn_depth=rnn_depth, mlp_depth=mlp_depth,\n        rnn_drop_out=rnn_drop_out, rnn_state_drop_out=rnn_state_drop_out, cnn_drop_out=cnn_drop_out,\n        padding=padding,\n        gpu=gpu, return_customized_layers=True\n    )\n\nmodel_builders.append(build_model4)","2c300f79":"model, rhc_cl = build_model4()\nprint(model.summary())","2fc9d9f6":"adam = ko.Nadam(clipnorm=2.0)\nmodel.compile(adam, loss=\"sparse_categorical_crossentropy\", metrics=[\"sparse_categorical_accuracy\",])\n\nfile_path = \"best_birnn_hierarchy_cnn_model.hdf5\"\ncheck_point = kc.ModelCheckpoint(file_path, monitor = \"val_sparse_categorical_accuracy\", verbose = 1, save_best_only = True, mode = \"max\")\nearly_stop = kc.EarlyStopping(monitor = \"val_sparse_categorical_accuracy\", mode = \"max\", patience=3)\nhistory = model.fit(X_train, y_train, batch_size=500, epochs=20, validation_split=0.1, callbacks = [check_point, early_stop])\n\nhistories.append(np.max(np.asarray(history.history['val_sparse_categorical_accuracy'])))\niterations.append(np.argmax(np.asarray(history.history['val_sparse_categorical_accuracy'])))\ndel model, history\ngc.collect()","86b86a99":"histories = np.asarray(histories)\n\nmodel_paths = [\n    \"best_cnn_model.hdf5\",\n    \"best_birnn_attention_model.hdf5\",\n    \"best_birnn_cnn_model.hdf5\",\n    \"best_birnn_hierarchy_cnn_model.hdf5\"\n]\n\ncls =[\n    cnn_cl, rnn_cl, rc_cl, rhc_cl\n]\n\npred = list()\nfor idx in range(len(model_paths)):\n    model = models.load_model(model_paths[idx], cls[idx])\n    pred_tmp = model.predict(X_test, batch_size = 1024, verbose = 1)\n    pred.append(np.round(np.argmax(pred_tmp, axis=1)).astype(int))","af565402":"def majority_vote(preds_data_point):\n    unique, counts = np.unique(preds_data_point, return_counts=True)\n    idx = np.argmax(counts)\n    return unique[idx]\n\npred = np.asarray(pred)\npredictions = list()\nfor i in range(pred.shape[1]):\n    predictions.append(majority_vote(pred[:, i]))\npredictions = np.asarray(predictions)\n\ntest_not_overlap_df = test_df[~overlap_boolean_mask_test]\ntest_not_overlap_df['Sentiment'] = predictions\n\nres_df = pd.concat([overlapped, test_not_overlap_df], sort=True)[sub_df.columns.values.tolist()]\n\nassert sub_df.shape[0] == res_df.shape[0]\nassert sub_df.shape[1] == res_df.shape[1]\n\nres_df.to_csv(\"submission.csv\", index=False)","fbfe49e6":"#### Check Vocabulary Coverage","680653e8":"#### Load Embedding","9b8e416f":"# Make Prediction","e87305a5":"## Clean Texts","274d194b":"## CNN Model","55e0b61b":"# Import Data","c3fab8e4":"### Map The Rest OOV Tokens to \"[ name ]\"","fb275209":"## RNN-HierarchyCNN","545c699f":"# Define Keras Model","3f5082df":"## RNN-CNN Model","a23b5bc2":"## Histogram of phrase length","3f287cec":"# Data Preprocessing","910a668a":"# Build and Train Models","91ac4147":"What left are actually names entities","c18311f1":"### Encode labels","c14a11b4":"#### Build Vocabulary","e7ec4705":"### Clean Special Characters","7b5b01fb":"## Explore Phrase Text","4a8cdac5":"## Attention RNN Model","ac881dac":"## Define Attention Layer","55fc3931":"1. There are overlapped phrase texts between training and testing data, which should assign training data labels directly instead of getting from prediction.\n2. Max text length should be set around 60.\n3. There is no overlapped sentence between training and testing data. Within each sentence group, the phraseId order is the in-order tanversal over the parsing tree of the sentence text. (This might be a very important information as we can utilized the composition as powerful predictive information). \n4. Fast Text has higher vocabulary coverage rate. We are able to correct some of oov tokens.\n","7b44651e":"## Find Overlapped Phrases Between Train and Test Data","8beca177":"## Explore Sentence Id","c3790e53":"# EDA","60cefd84":"### Tokenize Text","ab0453d5":"## Define Models","da425ff7":"### Build embedding matrix","265d9b4c":"### Clean Contractions"}}