{"cell_type":{"0239e680":"code","4815e267":"code","8720ef1c":"code","81af2726":"code","9c3928ca":"code","bc65bc1a":"code","743219a2":"code","ee8eb933":"code","b99c3eee":"code","a2d94e03":"code","9df3f225":"code","034aa3e9":"code","09acfd34":"code","0424f79b":"code","c42a20f1":"code","6ddfb5d6":"code","a6d23ffc":"code","2352ed48":"code","59f14523":"code","df2fbe8b":"code","82f6e850":"code","1cbec527":"code","84f25bb3":"code","53014aaf":"markdown","c0306a0a":"markdown","00c59db6":"markdown","9dfff0fa":"markdown","c5b36f84":"markdown","d0b94b30":"markdown","afb80948":"markdown","c45b9994":"markdown","d4529a48":"markdown","350a2b0e":"markdown","3679bcb3":"markdown","5a87bed6":"markdown","cac566c3":"markdown","8c4789a2":"markdown","76291798":"markdown","91389566":"markdown","d51ee195":"markdown","8b938ed6":"markdown","ea697bcc":"markdown","9207a165":"markdown","03db77f8":"markdown","da53ba1c":"markdown","fdf1ebdd":"markdown"},"source":{"0239e680":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, AveragePooling2D, Activation\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop","4815e267":"# Input data files are available in the \"..\/input\/\" directory.\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","8720ef1c":"train.shape, test.shape","81af2726":"X = train.drop(labels=[\"label\"], axis=1)\ny = train[\"label\"]\n\n# check the shape\nX.shape, y.shape","9c3928ca":"# checking manually\ny.value_counts()","bc65bc1a":"# Checking by plotting the same\nplt.subplots(figsize = (10,8))\nplt.title('Counts in numbers to their labels ')\nsns.countplot(x=y, data=train)\nplt.show()","743219a2":"X_train , X_test , y_train , y_test = train_test_split(X,y, test_size = 0.1 , random_state = 99)\n# check the shape now\nX_train.shape,X_test.shape,y_train.shape,y_test.shape,test.shape","ee8eb933":"X_train=X_train.values.astype('float32')\nX_test=X_test.values.astype('float32')\ntest=test.values.astype('float32')","b99c3eee":"# changing the shape of X_train and y_train and test also\nX_train=X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test=X_test.reshape(X_test.shape[0], 28, 28, 1)\ntest=test.reshape(test.shape[0] , 28 , 28 , 1)","a2d94e03":"X_train.shape,X_test.shape,test.shape","9df3f225":"# check the maximum values in the dataset\nX_train.max(),X_train.min()","034aa3e9":"X_train=X_train\/255\nX_test=X_test\/255\ntest=test\/255","09acfd34":"# check the maximum values in the dataset\nX_train.max(),X_train.min()","0424f79b":"input_shape=X_train[0].shape\ninput_shape","c42a20f1":"# Build the Model\nmodel= Sequential()\nmodel.add(Conv2D(filters = 6, kernel_size = (5,5), activation='relu', input_shape = (28, 28, 1), padding = 'same'))\nmodel.add(MaxPooling2D(pool_size = (2,2), strides=2))\nmodel.add(Conv2D(filters=16, kernel_size = 5, activation='relu'))\nmodel.add(MaxPooling2D(pool_size = 2, strides=2))\nmodel.add(Conv2D(filters=120, kernel_size = 5, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(84, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))","6ddfb5d6":"# model.compile(optimizer= Adam(learning_rate =0.01), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.compile(optimizer= 'adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","a6d23ffc":"model.summary()","2352ed48":"history = model.fit(X_train, y_train, batch_size=512, epochs=10, validation_split=0.2)","59f14523":"#Evaluating the Model\nmodel.evaluate(X_test, y_test, verbose=0)","df2fbe8b":"# plot confusion matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix","82f6e850":"y_pred = model.predict_classes(X_test)","1cbec527":"class_names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nclass_names","84f25bb3":"mat=confusion_matrix(y_test, y_pred)\nplot_confusion_matrix(conf_mat=mat, class_names= class_names,show_normed=True, figsize=(7,7))","53014aaf":"Import the important libraries","c0306a0a":"Splitting the data into X and y(i.e independent and dependent varaible in simple terms)","00c59db6":"Fitting the model","9dfff0fa":"We can easily that the data range is between 0 to 255, here we need to normalize the data to bring it into the range of 0 to 1 so that our model predicts the data more efficiently","c5b36f84":"Now check the shape again","d0b94b30":"Evaluating the Model","afb80948":"Before building the model here we will need to pass the input shape","c45b9994":"Now let us check whether the target variable is imbalanced or not in the training data\n\n","d4529a48":"Above is the LeNet Architecture , we will build our model according to this architecture\n","350a2b0e":"Compile the Model","3679bcb3":"Here above we converted the values of the data into float32, by which the above three dataframes got converted into a numpy array","5a87bed6":"Import the data in the train and test from the input directory","cac566c3":"Here the shape of our data is not according to the CNN architecture, so we will reshape the data into CNN architecture that is (images,rows,cols,channels) Here the images will be the no of the images used , rows and columns will be the pixels of the images mentioned in the dataset descriptions which are 28 * 28 . since all images are gray scale so it will only use '1' channel","8c4789a2":"![LeNet-5%20architecture.jpg](attachment:LeNet-5%20architecture.jpg)","76291798":"This is an example of using CNN on MNIST Dataset Using LeNet-5 Architecture .\n\nHope everyone watching this likes it.","91389566":"We can easily conclude from the above that the data is not unbalanced\n\nNow we will split the data into training and testing","d51ee195":"pd.DataFrame(history.history).plot(figsize=(10,5))\nplt.grid(True)\nplt.show()","8b938ed6":"**Now we will Build the Model**","ea697bcc":"Now our data has been normalized, we can also scale the data by using MinMaxScaler as well as Standard Scaler","9207a165":"check the shape of the train and test data","03db77f8":"Now we will check the range values of the data.","da53ba1c":"Check the summary of the model","fdf1ebdd":"Making the prediction using the model"}}