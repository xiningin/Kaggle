{"cell_type":{"e7254f0e":"code","d94692b5":"code","3043caf4":"code","7a364c87":"code","13c8fe83":"code","60e96efe":"code","59fc761b":"code","fee19803":"code","f39535b4":"code","a1b10ad3":"code","3d344876":"code","04676eb7":"code","2548799f":"code","8a7259c6":"markdown","747cb8bf":"markdown","de649be3":"markdown","79f7cb6c":"markdown","efb35d10":"markdown","58a30a77":"markdown","31bb8ea6":"markdown","b2da132a":"markdown","9965bdda":"markdown","bd474255":"markdown"},"source":{"e7254f0e":"import pandas as pd\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d94692b5":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3043caf4":"train['Name'] = train['Name'].str.extract(' ([A-Za-z]+)\\.',expand = False)\ntest['Name'] = test['Name'].str.extract(' ([A-Za-z]+)\\.',expand = False)\n\ntitle = {'Countess' : 7,'Lady' : 7,'Dona' : 7,'Mlle' : 6,'Mme' : 6,'Mrs' : 6,'Miss' : 6,'Ms' : 6,'Master' : 5,'Don' : 4,'Jonkheer' : 4,'Sir' : 4,'Capt' : 3,'Col' : 3,'Major' : 3,'Dr' : 2,'Rev' : 1,'Mr' : 0}\n\ntrain['Name'] = train['Name'].map(title)\ntest['Name'] = test['Name'].map(title)","7a364c87":"sex = {'female' : 1,'male' : 0}\n\ntrain['Sex'] = train['Sex'].map(sex)\ntest['Sex'] = test['Sex'].map(sex)","13c8fe83":"for index in train[train['Cabin'].notna()].index:\n    train.at[index,'Cabin'] = train.at[index,'Cabin'][0]\n\nfor index in test[test['Cabin'].notna()].index:\n    test.at[index,'Cabin'] = test.at[index,'Cabin'][0]\n    \ncabin = {'A' : 7,'B' : 6,'C' : 5,'D' : 4,'E' : 3,'F' : 2,'G' : 1,'T' : 0}\n\ntrain['Cabin'] = train['Cabin'].map(cabin)\ntest['Cabin'] = test['Cabin'].map(cabin)","60e96efe":"train['FamSize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamSize'] = test['SibSp'] + test['Parch'] + 1","59fc761b":"train['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True)\ntest['Fare'].fillna(test['Fare'].mean(),inplace = True)","fee19803":"train.drop(columns = ['PassengerId','Ticket'],inplace = True)\n\nPassengerId = test['PassengerId']\ntest.drop(columns = ['PassengerId','Ticket'],inplace = True)","f39535b4":"train = pd.get_dummies(train)\ntest = pd.get_dummies(test)","a1b10ad3":"imputed = KNNImputer().fit_transform(train.drop(columns = 'Survived').to_numpy())\ntrain['Age'] = pd.Series(imputed[:,3]).values\ntrain['Cabin']=pd.Series(imputed[:,7]).values\n\nimputed = KNNImputer().fit_transform(test.to_numpy())\ntest['Age'] = pd.Series(imputed[:,3]).values\ntest['Cabin']=pd.Series(imputed[:,7]).values","3d344876":"X = train.drop(columns = 'Survived')\ny = train['Survived']","04676eb7":"clf = RandomForestClassifier(n_estimators = 20,random_state = 42,max_depth = 10,min_samples_leaf = 5)\nscores = cross_val_score(clf,X,y,scoring = 'accuracy')\nprint('Rerata akurasi',scores.mean(),'dengan simpangan baku',scores.std(),'.')\nmodel = clf.fit(X,y)","2548799f":"pd.Series(model.predict(test),name = 'Survived',index = PassengerId).to_csv('submission.csv',index_label = 'PassengerId')","8a7259c6":"Klasifikasi dilakukan menggunakan RandomForrestClassifier() dengan cross validation untuk menguji keumuman model. Parameter n_estimators, max_depth, dan min_samples_leaf dipilih dengan mempertimbangkan ukuran dataframe training dan test. Model dievaluasi dengan `accuracy score` sebagaimana metrics yang digunakan oleh platfom kaggle untuk kompetensi ini.","747cb8bf":"Imputasi missing values pada kolom Age dan Cabin, baik untuk dataframe train maupun test akan dilakukan dengan method `KNNImputer()` dengan harapan nilai pengganti missing values pada kolom tersebut sesuai mungkin dengan sebaran data yang ada.","de649be3":"Kualitas prediksi dengan teknik seperti di atas ternyata hanya menghasilkan skor `accuracy` sebesar 0.76794 saja.","79f7cb6c":"Kolom PassengerId tampaknya hanya nomor urut penumpang, sedangkan kolom Ticket sepertinya juga kombinasi huruf-angka acak yang tidak berperan dalam peluang selamatnya penumpang. Dengan demikian, kedua kolom tersebut akan dibuang.","efb35d10":"Notebook ini sebagain diilhami dari karya [Megan L. Risdal](https:\/\/www.kaggle.com\/mrisdal\/exploring-survival-on-the-titanic) dan [Moore](https:\/\/www.kaggle.com\/imoore\/titanic-the-only-notebook-you-need-to-see).","58a30a77":"Pelabuhan embarkasi penumpang pada kolom Embarked, baik untuk dataframe train maupun test, akan disandikan dengan one hot encoding.","31bb8ea6":"Secara umum, penumpang wanita memiliki peluang selamat lebih tinggi daripada penumpang pria. Untuk itu, kolom Sex akan disandikan menggunakan skema ordinal encoding.","b2da132a":"Dari kolom Name, kita bisa menyarikan gelar penumpang, yang secara tidak langsung menginformasikan status sosial, jenis kelamin, dan umur penumpang. Secara umum, kita menganggap bahwa bangsawan wanita, wanita dewasa biasa, anak-anak, bangsawan laki-laki, profesional, kemudian laki-laki dewasa biasa secara berturut-turut memiliki peluang selamat dari besar ke kecil. Hal ini dapat dicapai melalui skema ordinal encoding.\n\nInformasi lain yang dapat disarikan dari kolom Name adalah nama keluarga penumpang, yang secara tidak langsung menginformasikan kebangsaan dan kemampuan berbahasa Inggris penumpang. Secara umum, kita menganggap bahwa penumpang dari persemakmuran Inggris, negara Eropa, kemudian non-Eropa secara berturut-turut memiliki peluang selamat dari besar ke kecil. Sebagaimana gelar, hal ini juga dapat dicapai melalui skema ordinal encoding. Namun demikian, karena rumitnya pengkategorian marga penumpang, langkah ini akan diabaikan.","9965bdda":"Huruf pertama pada isian kolom Cabin diasumsikan mencerminkan geladak (deck) penumpang. Berdasarkan laman [ini](https:\/\/en.wikipedia.org\/wiki\/Titanic), diketahui bahwa geladak A, B, C, dan seterusnya sampai T berturut-turut tersusun mulai dari atas ke bawah pada desain kapal. Secara umum, kita menganggap bahwa semakin di atas posisi suatu geladak, semakin mudah penumpang pada geladak tersebut menjangkau sekoci, yang pada akhirnya berhubungan dengan peluang selamatnya penumpang tersebut. Untuk mengakomodasi anggapan ini, kolom Cabin juga akan disandikan menggunakan ordinal encoding.\n\nTampaknya, penumpang tunggal (tanpa disertai keluarga saat berlayar) atau penumpang dengan ukuran keluarga yang lebih besar dari 4 orang memiliki peluang selamat yang lebih kecil. Penumpang tunggal mungkin rela berkorban demi penumpang lain yang membawa keluarganya, sedangkan penumpang dengan ukuran keluarga yang lebih besar dari 4 orang mungkin diharuskan rela berkorban karena keterbatasan kapasitas sekoci. Oleh karena itu, perlu diciptakan kolom baru FamSize untuk merepresentasikan ukuran keluarga penumpang.","bd474255":"Missing values pada dataframe train kolom Embarked akan diisi dengan modus, sedangkan missing values pada dataframe test kolom Fare akan diisi dengan rerata."}}