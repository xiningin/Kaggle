{"cell_type":{"cfa4e5a9":"code","5dfc4cf8":"code","12d9d783":"code","f2a7d951":"code","e0f176be":"code","0a5a00d9":"code","e8a96b20":"code","fceefcce":"code","3a0ecf37":"code","bff187cf":"code","087943a2":"code","e91198de":"code","1d90474b":"code","82e9e189":"code","176eb168":"code","cb11522d":"code","6b89dab1":"code","2c13d025":"code","e91dc59b":"markdown","e3c5823d":"markdown","232c22af":"markdown","c1758e9c":"markdown","0ab4fea6":"markdown","f7361993":"markdown","002adc8e":"markdown","680e0bb2":"markdown","659d6666":"markdown","cd994963":"markdown","dfdef942":"markdown","43c70e0c":"markdown","cc7b1f03":"markdown","4f41744e":"markdown","ed53a885":"markdown","1fb15340":"markdown","7e91cdb7":"markdown","a8641927":"markdown","bea02960":"markdown","7c05ef7a":"markdown","f263676a":"markdown","e1499008":"markdown"},"source":{"cfa4e5a9":"%matplotlib inline\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns ; sns.set()\nimport os\n# print(os.listdir(\"..\/input\"))\nimport plotly\nplotly.__version__\nimport plotly.plotly as py\nimport plotly.graph_objs as go","5dfc4cf8":"rawData = pd.read_csv('..\/input\/zomato.csv')\nrawData.head()","12d9d783":"print('Data types')\nprint(rawData.dtypes)\nprint('Info')\nprint(rawData.info())\nprint('Rows and Columns')\nprint(rawData.shape)","f2a7d951":"print(rawData.columns)\nrawData.drop(['url','phone',],axis=1,inplace=True)\nrawData = rawData.rename( columns={'approx_cost(for two people)':'cost_for_two','listed_in(type)':'restaurant_type','listed_in(city)':'city'} )\nrawData = rawData.replace('Sant\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u00a9 Spa Cuisine','Spa Cuisine')","e0f176be":"# Calculate percentage of restaurants with no rating. \nnewRest = (rawData['rate'] == 'NEW').sum()\ntotalRatings= (rawData['rate'].count())\nnanValues = (rawData['rate'].isnull()).sum()\npercentOfNoRatings = ((nanValues + newRest)  \/ totalRatings * 100).round(2)\nprint (f'There are {totalRatings} restaurants in the Zomato data set that have ratings. Out of the total 51,717 restaurants {percentOfNoRatings}% are new or have no rating ')","0a5a00d9":"ratingCount = pd.DataFrame(rawData.groupby('rate')['rate'].count())\n# drop na values\ndataFiltered = rawData.dropna()\n# filter out ratings that have a value of NEW\ndataFiltered = dataFiltered[dataFiltered['rate'] != 'NEW']\n\n# reduce rating column to just rating\ndataFiltered['rate'] = dataFiltered['rate'].astype(str)\ndataFiltered['rate'] = dataFiltered['rate'].apply(lambda rate: rate[:3])\ndataFiltered['rate'] = dataFiltered['rate'].astype(float)\n\n# remove ',' from cost for two column\ndataFiltered['cost_for_two'] = dataFiltered['cost_for_two'].apply(lambda x: x.replace(',','')).astype(int)","e8a96b20":"sns.set_style('white')\nfig, ax = plt.subplots(figsize=(15,9))\nsns.distplot(dataFiltered['rate'],bins=15,color=\"m\",kde=False,)\nplt.title('Distribution of Ratings')\nplt.xlabel('Rating')\nsns.despine()","fceefcce":"sns.set_style('white')\nfig, ax = plt.subplots(figsize=(30,9))\nsns.distplot(dataFiltered['cost_for_two'],color=\"m\",kde=False,)\nplt.title('Distribution of Meal Cost')\nplt.xlabel('Cost for Two')\nplt.xticks(dataFiltered['cost_for_two'].unique(),rotation='vertical')\nplt.xlim(40,3000)\nsns.despine()","3a0ecf37":"# Need to remove , from cost column \/\/ need to move this above meal cost dist\n# dataFiltered['cost_for_two'] = dataFiltered['cost_for_two'].apply(lambda x: x.replace(',','')).astype(int)\n# plotting\nfig, ax = plt.subplots(figsize=(30,9))\nax = sns.scatterplot(y='rate',x='cost_for_two',data=dataFiltered, color='m',palette='plasma')\nax.set_title('Cost vs Ratings')\nax.set_ylabel('Ratings')\nax.set_xlabel('Cost for Two')\nsns.set_style('white')\nsns.despine()","bff187cf":"plt.figure(figsize=(20,5))\n\nsns.regplot(x='rate',y='votes',data=dataFiltered,color='m')\nplt.ylim(0,17500)\nplt.xlabel('Rating')\nplt.ylabel('Votes')\nplt.title('Rating vs Votes')\nsns.despine()","087943a2":"# create a column that has the number of cusines served\ndataFiltered['cuisines_count'] = dataFiltered['cuisines'].apply(lambda x: len(x.split(','))).astype(int)\n#plot it\n\nplt.figure(figsize=(10,5))\nsns.set_style('white')\nsns.scatterplot(x='cuisines_count', y='votes',data=dataFiltered,palette='plasma')\nsns.despine()\nplt.ylabel('Votes')\nplt.xlabel('Cuisines Served')","e91198de":"topTenRestTypesByVotes = pd.DataFrame(dataFiltered.groupby(['rest_type'])[['votes']].sum()).sort_values(by='votes',ascending=False).astype(int)\ntopTenRestTypesByVotes.reset_index(inplace=True)\n\nplt.figure(figsize=(15,5))\nsns.barplot(topTenRestTypesByVotes['votes'].iloc[:10],topTenRestTypesByVotes['rest_type'].iloc[:10],palette='plasma')\nsns.despine()\nplt.ylabel('Restaurant Type')\nplt.xlabel('Total Votes')\nplt.title('Top Ten Restaurant Types by Total Votes')","1d90474b":"topTenTypeByRate = pd.DataFrame(dataFiltered.groupby(['rest_type','name'])['rate'].mean()).sort_values(by='rate',ascending=False).iloc[:10].reset_index()\ntopTenTypeByRate\n\nplt.figure(figsize=(15,5))\nsns.barplot(topTenTypeByRate['rate'].iloc[:10],topTenTypeByRate['rest_type'].iloc[:10],palette='plasma')\nsns.despine()\nplt.ylabel('Restaurant Type')\nplt.xlabel('Average Rating')\nplt.title('Top Ten Restaurant Types by Average Rating')","82e9e189":"topTenByVotes = pd.DataFrame(dataFiltered.groupby(['name','rest_type'])['votes'].sum()).sort_values(by='votes',ascending=False).iloc[0:10].reset_index()\n\nplt.figure(figsize=(15,5))\nsns.barplot(topTenByVotes['votes'].iloc[:10],topTenByVotes['name'].iloc[:10],palette='plasma')\nsns.despine()\nplt.ylabel('Restaurant')\nplt.xlabel('Total Votes')\nplt.title('Top Ten Restaurants by Total Votes')","176eb168":"topTenByRatings = pd.DataFrame(dataFiltered.groupby(['name'])['rate'].mean()).sort_values(by='rate',ascending=False).reset_index()\n\nfig, axs = plt.subplots(figsize=(10,5),)\nsns.barplot(topTenByRatings['rate'].iloc[:10],topTenByRatings['name'].iloc[:10],palette='plasma')\nsns.despine()\nplt.ylabel('Restaurant')\nplt.xlabel('Average Rating')\nplt.title('Top Ten Restaurants by Average Rating')\nplt.xlim(3.5,5.0)","cb11522d":"highestRatedByLocation = pd.DataFrame(dataFiltered.groupby(['city'])['rate'].mean()).sort_values(by='rate',ascending=False).reset_index()\nhighestRatedByLocation\n\nsns.set_style('white')\n\nplt.figure(figsize=(5,5))\nsns.barplot(y=highestRatedByLocation['city'].iloc[:10],x=highestRatedByLocation['rate'].iloc[:10],palette='plasma')\nplt.title('Location of Highest Rated Restaurants')\nplt.ylabel('City')\nplt.xlabel('Average Rating')\nplt.xlim(3.5,5.0)\nsns.despine()\n","6b89dab1":"cityTotalVotes = pd.DataFrame(dataFiltered.groupby('city')['votes'].sum()).sort_values(by='votes',ascending=False).reset_index()\ncityTotalVotes\n\nsns.set_style('white')\nplt.figure(figsize=(10,5))\nsns.barplot(y=cityTotalVotes['city'].iloc[:10],x=cityTotalVotes['votes'].iloc[:10],palette='plasma')\nplt.title('Location of Highest Rated Restaurants')\nplt.ylabel('City')\nplt.xlabel('Average Rating')\n# plt.xlim(3.5,5.0)\nsns.despine()","2c13d025":"# f, (ax1, ax2) = plt.subplots(2)\n# sns.regplot(x, y, ax=ax1)\n# sns.kdeplot(x, ax=ax2)\n\n# f, (ax1, ax2) = plt.subplots(1,2,figsize=(20,5))\n# sns.barplot(y=cityTotalVotes['city'].iloc[:10],x=cityTotalVotes['votes'].iloc[:10],palette='plasma', ax=ax1)\n\n# plt.title('Location of Highest Rated Restaurants')\n# plt.ylabel('City')\n# plt.xlabel('Average Rating')\n# plt.xlim(3.5,5.0)\n\n# sns.barplot(y=highestRatedByLocation['city'].iloc[:10],x=highestRatedByLocation['rate'].iloc[:10],palette='plasma', ax=ax2)\n\n# f[0] = plt.title('Location of Highest Rated Restaurants')\n# ax2 = plt.ylabel('City')\n# ax2 = plt.xlabel('Average Rating')\n\n# f.tight_layout()","e91dc59b":"<div id='whereAreTheHighestRatedRestaurants'><\/div>\n**Where are the Highest Rated Restaurants?**","e3c5823d":"<div id='topTenRatings'><\/div>\nTop Ten Restaurants by Average Rating","232c22af":"<div id='distOfMealCost'><\/div>\n**Distribution of Meal Cost**","c1758e9c":"# **Lets get a look at our data. **","0ab4fea6":"Exploratory analysis into the Zomato Bengaluru Data Set ","f7361993":"<div id='ratingVsVotes'><\/div>\n**Ratings vs Votes**","002adc8e":"**Import Dependencies**\n<div id='dependencies'><\/div>","680e0bb2":"It is evident that as the analysis futhers that we will need to change a few data types from object to int or floats. It is also seen that the rating column and dishes liked have a considerable aomount of null values that will be addresed. ","659d6666":"For the rating column we will remove the \/5 allowing us to analyze the data without errors. \nThis will include removing NAN values and NEW restaurants. This is unfortunate with almost 23% of the restaurants having no ratings. \n    ","cd994963":"Something that struck me was if there was any correlation between how many cuisines were offered and ratings. \n\n   We see the highest votes go to restaurants that have between 3 and 4 cuisines, with a decline in votes for place that serve more than five. Pretty obivious, always better to focus a few than many. ","dfdef942":"<div id='cityTotalVotes'><\/div>\n**Where are the Most Voted Restaurants?**","43c70e0c":"It's apparent that votes stay below the 2000 mark until a restaurants rating goes above 3.5.","cc7b1f03":"<div id='ratingDist'><\/div>\n **Distribution of Ratings**","4f41744e":"We can see that once we pass around the 1,500 Rupee mark the ratings count lowers but does stay above 3.5, with most of the ratings being pretty well spread out for restaurants that are between 0 and 1,000 Ruppees. ","ed53a885":"<div id='diving'><\/div>\n# Diving into the dataset. \n","1fb15340":"1. [Import Dependencies](#dependencies)\n1. [View Data](#viewdata)\n1. [Clean Up](#dropColumns)\n1. [Diving into the Data](#diving)\n    1. [Distribution of Ratings](#ratingDist)\n    1. [Distribution of Meal Cost](#distOfMealCost)\n    1. [Meal Cost vs. Rating](#ratingVsMealCost)\n    1. [Is there a relationship between Rating and Votes?](#ratingVsVotes)\n    1. [Top Ten Restaurant Types by Vote Count](#topTenByVote)\n    1. [Top Ten Restaurant Types by Ratings](#topTenTypeByRate)\n    1. [Top Ten Restaurants by Votes](#topTenRests)\n    1. [Top Ten Restaurants by Rating](#topTenRatings)\n    1. [Where are the Highest Rated Restaurants](#whereAreTheHighestRatedRestaurants)\n    1. [Where are the Most Voted Restaurants](#cityTotalVotes)\n\n\n","7e91cdb7":"# **View Data**\n<div id='viewdata'><\/div>","a8641927":"<div id='dropColumns'><\/div>\n\n# **Clean the data up. **\n\n1.    Drop unnecessary columns and rename columns. \n1.    No need for URL and Phone Numbers. \n1.    Clean up a restaurants name\n1.    Drop null and new values from the rating \n1.    Remove ',' from cost_for_two column\n ","bea02960":"<div id='topTenRests'><\/div>\n****Top Ten Restaurants by Total Votes\n","7c05ef7a":"<div id='topTenTypeByRate'><\/div>\n\n****Top Ten Restaurant Types by Ratings\n","f263676a":"****Top Ten Restaurants Types by Vote Count\n<div id='topTenByVote'><\/div>","e1499008":"<div id='ratingVsMealCost'><\/div>\n**Rating vs. Meal Cost**\n\nLets see if there is any relationship between Ratings and the Meal cost for two people. "}}