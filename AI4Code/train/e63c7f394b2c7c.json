{"cell_type":{"c059b5c2":"code","40b3b613":"code","80bf98d8":"code","29bb3072":"code","4904decf":"code","f4e82f68":"code","89e431ea":"code","8510ad3a":"code","5e38c0a6":"code","0a8771f9":"code","5d6fd134":"code","76bc6c9a":"code","f649a124":"code","38918c6e":"code","aba13198":"code","2f2f06c5":"code","b59ed2f0":"code","1c9f2ddf":"code","582842e1":"code","6b3516cf":"code","cf9c7a9b":"code","3e69bba8":"code","42b0bb95":"code","2d2410f8":"code","eba0119e":"code","c7964651":"code","f7dd8e0e":"code","217cf04b":"code","80eefc79":"code","d678adf5":"code","533da890":"code","16fa5b3c":"code","9cacaa2c":"code","9d6a752a":"code","8aca0cef":"code","8854dcda":"code","06071552":"code","a7f3902a":"code","2211e3cf":"code","69220ab2":"code","3f7e3218":"code","abf0280b":"code","7ed5ff38":"code","af4df8d8":"code","13a2dda0":"code","0cf3902c":"code","e4f53b24":"code","dd77af11":"code","310ffb3a":"markdown","6d778889":"markdown","029d7213":"markdown","684e9c73":"markdown","9c73e150":"markdown"},"source":{"c059b5c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40b3b613":"#Importing the test and the train data\ntrain_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_id = test_data.PassengerId","80bf98d8":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import r2_score\nfrom statistics import mode\n\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","29bb3072":"#Seeing the data\ntrain_data.head()","4904decf":"#Taking a look at the null values\nprint(train_data.isnull().any())\nprint('\\n')\nprint(test_data.isnull().any())","f4e82f68":"#Counting the null values\nprint(train_data.isnull().sum())\nprint('\\n')\nprint(test_data.isnull().sum())","89e431ea":"#Let us visualize the null values of our train data in a heatmap\nsns.heatmap(train_data.isnull(), yticklabels=False)","8510ad3a":"#We will have a look at the distribution of the Age\nsns.distplot(train_data[\"Age\"])","5e38c0a6":"#We can see that it is right-skewed, so if we replace it by mean, then it won't be that accurate so we will replace the age by median, \n#but first let us see if any outliers are there in age\nsns.boxplot(x=\"Age\", data=train_data)","0a8771f9":"#We will apply Z-score to remove the outliers in Age\noutliers=[]\ndef find_outliers(data):\n    threshold = 3\n    mean = np.mean(data)\n    std = np.std(data)\n    for i in data:\n        Z_score = (i-mean)\/std\n        if np.abs(Z_score)>threshold:\n            outliers.append(i)\n    \n    return outliers\nfind_outliers(train_data[\"Age\"])","5d6fd134":"#Removing the outliers\nfor i in range(len(train_data[\"Age\"])):\n    if(train_data[\"Age\"][i] in outliers):\n        train_data = train_data.drop(i)","76bc6c9a":"#check outliers in age after removing them, we can see there are still some outliers in the range 65-70 so we will keep them still\nsns.boxplot(x=\"Age\", data=train_data)","f649a124":"#We can still see there are some outliers still present, but we can keep this\n#Replacing age with median after removing outliers\ntrain_data[\"Age\"].fillna(train_data[\"Age\"].median(skipna=True), inplace=True)\ntest_data[\"Age\"].fillna(test_data[\"Age\"].median(skipna=True), inplace=True)","38918c6e":"#Checking the heatmap for null values again\nsns.heatmap(train_data.isnull(), yticklabels=False)\ntrain_data[\"Embarked\"].isnull().sum()","aba13198":"#As we can see in embarked only 2 values are null, so we will replace it with the most frequent occuring value\ntrain_data['Embarked'].describe()","2f2f06c5":"#As S is the top, so we will replace null by S\ncommon_value = 'S'\ndata = [train_data]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","b59ed2f0":"#Let us see the correlation between the features\ntrain_data.corr()","1c9f2ddf":"#We saw earlier test data have one null value in fare, so we can simply replace it with median\ntest_data[\"Fare\"].fillna(test_data[\"Fare\"].median(skipna=True), inplace=True)","582842e1":"train.describe()","6b3516cf":"sns.pairplot(train);","cf9c7a9b":"#sns.factorplot(x='Survived', col='Age', kind='count', bins=5,data=df_train);\nsurvived = train[(train['Survived'] == 1) & (train['Age'].notna() == True)];\nnotSurvived = train[(train['Survived'] == 0) & (train['Age'].notna() == True)];","3e69bba8":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(survived['Age']).set_title(\"Survivor's Age\");\nplt.subplot(2,2,2)\nsns.distplot(notSurvived['Age']).set_title(\"NonSurvivor's Age\");\nplt.subplot(2,2,3)\nsns.distplot(survived['Fare']).set_title(\"Survivor's Fare\");\nplt.subplot(2,2,4)\nsns.distplot(notSurvived['Fare']).set_title(\"NonSurvivor's Fare\");","42b0bb95":"train.Survived.value_counts()","2d2410f8":"train.Survived.value_counts(normalize = True).mul(100).round(2).astype(\"str\").add(\"%\")\n","eba0119e":"def uni_plot(feature,x=6,y=5):\n\n    sns.set_style('darkgrid')\n    sns.set(font_scale=1.5)\n\n    f,ax = plt.subplots(figsize=(x,y))\n    f = train[feature].value_counts(normalize = True).mul(100).round(2).sort_index().plot(ax= ax,kind = \"bar\",color=\"skyblue\")\n    for p in ax.patches:\n        ax.annotate(p.get_height().astype(str) + \"%\",(p.get_x()+p.get_width()\/2,1 + p.get_height()),ha = \"center\" )\n    ax.set_ylim(0,100)\n    ax.set_xlabel(feature,fontsize=20)\n    ax.set_ylabel(\"Percentage\",fontsize=20)\n    ax.set_title(\"{} distribution\".format(feature),fontsize=20)\n    ax.set_xticklabels(sorted(train[feature].dropna().unique()),rotation= 360,fontsize=15)\n    plt.setp(f.get_yticklabels(),fontsize=15);\n    \n    return f","c7964651":"g = uni_plot(\"Survived\")\ng.set_xticklabels([\"Not Survived\",\"Survived\"])\ng.set_xlabel(\"Survival status\");","f7dd8e0e":"train.Sex.value_counts(normalize=True).mul(100).round(2).astype(\"str\").add(\"%\")","217cf04b":"g = uni_plot(\"Sex\");","80eefc79":"def feat_survived(feature):\n    return train.pivot_table(\"Survived\",index = feature).mul(100).round(2).reset_index()","d678adf5":"feat_survived(\"Sex\")","533da890":"def surv_rate(feature,h=5,a=1):\n    import numpy as np\n\n    sns.set(style=\"whitegrid\", color_codes=True,font_scale = 1.5)\n    \n    pal = sns.color_palette(\"crest\", len(feat_survived(feature)))\n    rank = feat_survived(feature)[\"Survived\"].argsort().argsort()   \n    \n    g = sns.catplot(data=feat_survived(feature),x=feature, y=\"Survived\",kind = \"bar\",\n                    dodge=False,hue=feature,palette=np.array(pal[::1])[rank],height=h,aspect=a)\n\n    for p in g.ax.patches:\n        g.ax.annotate(p.get_height().astype(str) + \"%\",(p.get_x()+p.get_width()\/2,1 + p.get_height()),ha = \"center\" )\n    \n    \n    g.ax.set_ylim(0,100)\n    g.add_legend()\n    g.set_xlabels(feature,fontsize=20)\n    g.set_ylabels(\"Survival Percent\",fontsize=20)\n    plt.setp(g.ax.get_yticklabels(),fontsize=15)\n    g.ax.set_title(\"Survival rate by {}\".format(feature),fontsize=20)\n    g.add_legend\n    \n    return g","16fa5b3c":"feat_survived(\"Sex\")","9cacaa2c":"surv_rate(\"Sex\");","9d6a752a":"train[\"Age\"].isnull().sum()","8aca0cef":"train.Age.describe()","8854dcda":"sns.displot(train,x=\"Age\",kde=True,stat=\"probability\",alpha=0.8);\n","06071552":"sns.displot(train,x=\"Age\",kde=True,stat=\"probability\",col=\"Survived\",hue=\"Survived\");\n","a7f3902a":"train_2= train.copy()","2211e3cf":"train_2[\"Age_bracket\"]=pd.cut(train.Age,bins=[0,10,20,30,40,50,60,70,80])\n","69220ab2":"train_2.loc[:,[\"Age\",\"Age_bracket\"]].head()\n","3f7e3218":"train_2.head()\n","abf0280b":"g = sns.displot(data=train_2,x=\"Age\",hue=\"Age_bracket\",kind=\"kde\",multiple=\"stack\",\n            alpha=1,palette=\"crest\",height=6,aspect=2);\ng.add_legend();","7ed5ff38":"Age_Surv_df = train_2.pivot_table(\"Survived\",index=\"Age_bracket\").mul(100).round(2).sort_values(by=\"Survived\",\n                                                                            ascending=False).reset_index()","af4df8d8":"Age_Surv_df","13a2dda0":"sns.set(style=\"whitegrid\",font_scale = 1.2)\n    \npal = sns.color_palette(\"crest\", len(Age_Surv_df[\"Survived\"]))\nrank = Age_Surv_df[\"Survived\"].argsort().argsort()   \n\ng = sns.catplot(data=Age_Surv_df,x=\"Age_bracket\", y=\"Survived\",kind = \"bar\",\n                height=8,aspect=1,hue =\"Age_bracket\",dodge=False,palette=np.array(pal[::1])[rank])\nfor p in g.ax.patches:\n    g.ax.annotate(p.get_height().astype(str) + \"%\",(p.get_x()+p.get_width()\/2,1 + p.get_height()),ha = \"center\" )\n\ng.ax.set_ylim(0,100)\ng.add_legend()\ng.set_xlabels(\"Age_bracket\",fontsize=20)\ng.set_ylabels(\"Survival Percent\",fontsize=20)\nplt.setp(g.ax.get_yticklabels(),fontsize=15)\ng.ax.set_title(\"Survival rate by {}\".format(\"Age_bracket\"),fontsize=20);","0cf3902c":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","e4f53b24":"#draw a bar plot of survival by Pclass\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n\n#print percentage of people by Pclass that survived\nprint(\"Percentage of Pclass = 1 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 2 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 3 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)","dd77af11":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.9)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.9)\nbins = [-1,  0,  5,  12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown',  'Baby',   'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","310ffb3a":"As predicted, females have a much higher chance of survival than males. The Sex feature is essential in our predictions.","6d778889":"As predicted, people with higher socioeconomic class had a higher rate of survival. (62.9% vs. 47.3% vs. 24.2%)\n\n","029d7213":"Here, we can observe that 74.2% of the females survived but only 18.89% of the males survived.\n\nThat means that approximately 3 of every 4 females survived but only 1 of every 5 males survived.\n\nIt's really interesting to see higher survival rate in females because despite having more males than females on the ship, females were saved more.","684e9c73":"Most of the passengers i.e., approximately 64.76% were males and 35.24% were females.\n","9c73e150":"Approximately 61.62% of the passengers did not survive. Approximately only 38.38% of the passengers were lucky enough to survive."}}