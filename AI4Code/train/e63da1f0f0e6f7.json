{"cell_type":{"9694b99a":"code","923a931d":"code","386a96e9":"code","a72aaaea":"code","26a5ab3f":"code","adef4727":"code","491b7b67":"code","cd4dc2ea":"code","3b7821c3":"code","67f0ed12":"code","d44723ac":"code","2ebef4c8":"code","1137ce55":"code","de688e8e":"code","018aff27":"code","f48b6a12":"code","1e8d1750":"code","b58edd63":"code","5e73f4bf":"code","501e89a5":"code","21e3b524":"code","6ea8c6eb":"code","692ca7e3":"code","ca02f6c3":"code","838c4291":"code","40e8cf17":"code","6bac7e45":"code","1e2912f4":"markdown"},"source":{"9694b99a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","923a931d":"import os\nfrom datetime import datetime\nimport glob\nimport seaborn as sns\nimport matplotlib.pyplot as plt","386a96e9":"condition = pd.DataFrame()\nfor file in glob.glob(\"..\/input\/the-depression-dataset\/data\/condition\/*.csv\"):\n    df_read = pd.read_csv(file)\n    df_read['Number'] = file[47:63]\n    condition = condition.append(df_read,ignore_index=True)","a72aaaea":"control = pd.DataFrame()\nfor file in glob.glob('..\/input\/the-depression-dataset\/data\/control\/*.csv'):\n    df_read = pd.read_csv(file)\n    df_read['Number'] = file[45:63]\n    control = control.append(df_read,ignore_index=True)","26a5ab3f":"control.head()","adef4727":"condition.head()","491b7b67":"condition.loc[ condition['Number'] == 'condition_1.csv', 'Number'] = 'condition_1'\ncondition.loc[ condition['Number'] == 'condition_2.csv', 'Number'] = 'condition_2'\ncondition.loc[ condition['Number'] == 'condition_3.csv', 'Number'] = 'condition_3'\ncondition.loc[ condition['Number'] == 'condition_4.csv', 'Number'] = 'condition_4'\ncondition.loc[ condition['Number'] == 'condition_5.csv', 'Number'] = 'condition_5'\ncondition.loc[ condition['Number'] == 'condition_6.csv', 'Number'] = 'condition_6'\ncondition.loc[ condition['Number'] == 'condition_7.csv', 'Number'] = 'condition_7'\ncondition.loc[ condition['Number'] == 'condition_8.csv', 'Number'] = 'condition_8'\ncondition.loc[ condition['Number'] == 'condition_9.csv', 'Number'] = 'condition_9'\ncondition.loc[ condition['Number'] == 'condition_10.csv', 'Number'] = 'condition_10'\ncondition.loc[ condition['Number'] == 'condition_11.csv', 'Number'] = 'condition_11'\ncondition.loc[ condition['Number'] == 'condition_12.csv', 'Number'] = 'condition_12'\ncondition.loc[ condition['Number'] == 'condition_13.csv', 'Number'] = 'condition_13'\ncondition.loc[ condition['Number'] == 'condition_14.csv', 'Number'] = 'condition_14'\ncondition.loc[ condition['Number'] == 'condition_15.csv', 'Number'] = 'condition_15'\ncondition.loc[ condition['Number'] == 'condition_16.csv', 'Number'] = 'condition_16'\ncondition.loc[ condition['Number'] == 'condition_17.csv', 'Number'] = 'condition_17'\ncondition.loc[ condition['Number'] == 'condition_18.csv', 'Number'] = 'condition_18'\ncondition.loc[ condition['Number'] == 'condition_19.csv', 'Number'] = 'condition_19'\ncondition.loc[ condition['Number'] == 'condition_20.csv', 'Number'] = 'condition_20'\ncondition.loc[ condition['Number'] == 'condition_21.csv', 'Number'] = 'condition_21'\ncondition.loc[ condition['Number'] == 'condition_22.csv', 'Number'] = 'condition_22'\ncondition.loc[ condition['Number'] == 'condition_23.csv', 'Number'] = 'condition_23'\n","cd4dc2ea":"control.loc[ control['Number'] == 'control_1.csv', 'Number'] = 'control_1'\ncontrol.loc[ control['Number'] == 'control_2.csv', 'Number'] = 'control_2'\ncontrol.loc[ control['Number'] == 'control_3.csv', 'Number'] = 'control_3'\ncontrol.loc[ control['Number'] == 'control_4.csv', 'Number'] = 'control_4'\ncontrol.loc[ control['Number'] == 'control_5.csv', 'Number'] = 'control_5'\ncontrol.loc[ control['Number'] == 'control_6.csv', 'Number'] = 'control_6'\ncontrol.loc[ control['Number'] == 'control_7.csv', 'Number'] = 'control_7'\ncontrol.loc[ control['Number'] == 'control_8.csv', 'Number'] = 'control_8'\ncontrol.loc[ control['Number'] == 'control_9.csv', 'Number'] = 'control_9'\ncontrol.loc[ control['Number'] == 'control_10.csv', 'Number'] = 'control_10'\ncontrol.loc[ control['Number'] == 'control_11.csv', 'Number'] = 'control_11'\ncontrol.loc[ control['Number'] == 'control_12.csv', 'Number'] = 'control_12'\ncontrol.loc[ control['Number'] == 'control_13.csv', 'Number'] = 'control_13'\ncontrol.loc[ control['Number'] == 'control_14.csv', 'Number'] = 'control_14'\ncontrol.loc[ control['Number'] == 'control_15.csv', 'Number'] = 'control_15'\ncontrol.loc[ control['Number'] == 'control_16.csv', 'Number'] = 'control_16'\ncontrol.loc[ control['Number'] == 'control_17.csv', 'Number'] = 'control_17'\ncontrol.loc[ control['Number'] == 'control_18.csv', 'Number'] = 'control_18'\ncontrol.loc[ control['Number'] == 'control_19.csv', 'Number'] = 'control_19'\ncontrol.loc[ control['Number'] == 'control_20.csv', 'Number'] = 'control_20'\ncontrol.loc[ control['Number'] == 'control_21.csv', 'Number'] = 'control_21'\ncontrol.loc[ control['Number'] == 'control_22.csv', 'Number'] = 'control_22'\ncontrol.loc[ control['Number'] == 'control_23.csv', 'Number'] = 'control_23'\ncontrol.loc[ control['Number'] == 'control_24.csv', 'Number'] = 'control_24'\ncontrol.loc[ control['Number'] == 'control_25.csv', 'Number'] = 'control_25'\ncontrol.loc[ control['Number'] == 'control_26.csv', 'Number'] = 'control_26'\ncontrol.loc[ control['Number'] == 'control_27.csv', 'Number'] = 'control_27'\ncontrol.loc[ control['Number'] == 'control_28.csv', 'Number'] = 'control_28'\ncontrol.loc[ control['Number'] == 'control_29.csv', 'Number'] = 'control_29'\ncontrol.loc[ control['Number'] == 'control_30.csv', 'Number'] = 'control_30'\ncontrol.loc[ control['Number'] == 'control_31.csv', 'Number'] = 'control_31'\ncontrol.loc[ control['Number'] == 'control_32.csv', 'Number'] = 'control_32'","3b7821c3":"control.groupby(['Number']).activity.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"])","67f0ed12":"condition.groupby(['Number']).activity.agg([\"count\", \"median\", \"mean\", \"std\", \"max\"]).sort_index(axis=1)","d44723ac":"scores = pd.read_csv('..\/input\/the-depression-dataset\/data\/scores.csv')","2ebef4c8":"scores.rename({'number':'Number'},axis=1,inplace=True)\nscores.head()","1137ce55":"df = scores.merge(condition, on=['Number'], how='left')\ndf.tail(10)","de688e8e":"df.head(60)","018aff27":"df.sort_values(by=['Number','date'])","f48b6a12":"control_graph_dataframe = control.groupby(['Number'])['activity'].agg(['mean','std','var','min','max']).sort_values(by='Number').sort_values(by='max')","1e8d1750":"sns.displot(data=control_graph_dataframe,x='mean',kde=True)","b58edd63":"con1 = pd.read_csv('..\/input\/the-depression-dataset\/data\/condition\/condition_1.csv')\ncon1.head()","5e73f4bf":"df.groupby('gender').activity.agg(['count','mean','std','var','min','max'])","501e89a5":"df.head()","21e3b524":"df.info()","6ea8c6eb":"count = 0\nfor i in df.columns:\n    if df[i].isnull().sum() > 0:\n        count = count +1\n        print('{}: {} adet veri eksik. (% {})\\n'.format(i, df[i].isnull().sum(),round(df[i].isnull().sum()\/len(df),4)))\n        \nprint(\"************************************ \\n\")\nprint('{} adet de\u011fi\u015fkende eksik de\u011fer var.'.format(count)) ","692ca7e3":"df.head()","ca02f6c3":"condition_scores_df = df.loc[df['Number'].str.startswith('cond')]","838c4291":"condition_scores_df['madrs'] = (df['madrs1'] + df['madrs2'])\/2;","40e8cf17":"condition_scores_df.loc[(condition_scores_df['madrs'] >= 0) & (condition_scores_df['madrs'] <= 6),'madrs'] = 'Depresyon Yok'","6bac7e45":"condition_and_scores_dataframe.madrs.unique()","1e2912f4":"**Montgomery\u2013\u00c5sberg Depresyon Derecelendirme \u00d6l\u00e7e\u011fi**\n\nMADRS, antidepresan etkinlik denemelerinde en s\u0131k kullan\u0131lan sonu\u00e7 \u00f6l\u00e7\u00fcs\u00fcd\u00fcr ve son on y\u0131lda artan s\u0131kl\u0131kta kullan\u0131lm\u0131\u015ft\u0131r. Bu \u00f6l\u00e7e\u011fin temel amac\u0131, depresif semptomolojiyi, \u00f6zellikle antidepresanlarla tedavi edilen hastalardaki de\u011fi\u015fiklikleri de\u011ferlendirmektir.\n\nHAM-D17 somatik belirtilere y\u00f6nelik maddeler i\u00e7erirken, MADRS depresyonun psikolojik belirtilerine (\u00f6rne\u011fin, \u00fcz\u00fcnt\u00fc, gerilim ve karamsar d\u00fc\u015f\u00fcnceler) odaklan\u0131r.Bu \u00f6l\u00e7ek klinisyen taraf\u0131ndan derecelendirilmi\u015ftir ve 10 maddeden olu\u015fmaktad\u0131r; her madde 0-6 aras\u0131nda derecelendirilir, bu da maksimum toplam 60 puanla sonu\u00e7lan\u0131r ve daha y\u00fcksek puanlar daha fazla depresif semptomolojinin g\u00f6stergesidir.\n\nMADRS puanlama y\u00f6nergeleri, 0 ile 6 aras\u0131nda de\u011fi\u015fen toplam puan\u0131n hastan\u0131n normal aral\u0131kta oldu\u011funu (depresyon olmad\u0131\u011f\u0131n\u0131), 7 ile 19 aras\u0131nda de\u011fi\u015fen bir puan\u0131n \"hafif depresyon\", 20 ile 34 aras\u0131nda \"orta depresyon\" oldu\u011funu g\u00f6sterir. 35 ve \u00fczeri puan \u201ca\u011f\u0131r depresyon\u201du, toplam 60 puan ve \u00fczeri ise \u201c\u00e7ok \u015fiddetli depresyon\u201du g\u00f6sterir"}}