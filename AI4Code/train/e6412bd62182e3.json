{"cell_type":{"31bc413e":"code","dc990ac7":"code","b2f818d0":"code","6ee46074":"code","f32a51a1":"code","2dfff6d1":"code","7b33ea83":"code","62d51ec9":"code","9103e7e7":"code","acf05666":"code","21073a23":"code","4f2b80b7":"code","4448fb7e":"code","33e9a9c6":"code","94e3a37f":"code","7f2ad876":"code","da9c80b1":"code","780c22dd":"code","0e6fe5b7":"code","22c4d7ad":"code","f1a38af2":"code","20eb1ab0":"code","daa73658":"code","7b8a5ad8":"code","3e752971":"code","fddabd4a":"code","25496043":"code","938336d6":"code","87f5014a":"code","152c7a8a":"code","956806d9":"code","3a5bd3c7":"code","835e426c":"code","f41b4a94":"code","16efd21b":"markdown","6b82fe20":"markdown","5eb5950e":"markdown","de288620":"markdown","0b7203ea":"markdown","c4815f32":"markdown","b8069885":"markdown"},"source":{"31bc413e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom pathlib import Path\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dc990ac7":"def preprocess(df):\n    df.date = pd.to_datetime(df.date)\n    df['year'] = df.date.dt.year\n    df['month'] = df.date.dt.month\n    df['year_month'] = df.date.apply(lambda x: x.strftime('%Y-%m'))\n    df['is_weekend'] = df.date.dt.day_name().isin(('Saturday', 'Sunday'))\n    df['day_of_week'] = df.date.dt.dayofweek\n    df['month_end'] = df.date.dt.is_month_end\n    df['month_start'] = df.date.dt.is_month_start\n    df['item'] = df.item.astype('category')\n    df['store'] = df.store.astype('category')\n    df['week_of_year'] = df.date.dt.weekofyear\n    return df","b2f818d0":"PATH = Path(\"..\/input\")","6ee46074":"train_df = pd.read_csv(PATH \/ 'train.csv')","f32a51a1":"train_df.head()","2dfff6d1":"train_df = preprocess(train_df)","7b33ea83":"train_df.head()","62d51ec9":"train_df.year_month.tail()","9103e7e7":"plt.figure(figsize=(8,5))\nplt.hist(train_df.date, bins=12 * 5)\nplt.show()","acf05666":"sales_per_date = train_df.groupby('date').sales.sum().reset_index()","21073a23":"sales_per_date.head()","4f2b80b7":"sales_per_date = sales_per_date.sort_values('date')\nsales_per_date['date_f'] = pd.factorize(sales_per_date.date)[0] + 1","4448fb7e":"plt.figure(figsize=(10,8))\nax = sns.regplot(x='date_f', y='sales', data=sales_per_date)\nmapping = dict(zip(sales_per_date['date_f'], sales_per_date['date'].dt.date))\nax.set_xticklabels(pd.Series(ax.get_xticks()).map(mapping).fillna(''))\nplt.show()","33e9a9c6":"sales_per_store_over_time = train_df.groupby(['store', 'year_month']).sales.sum().reset_index()","94e3a37f":"total_sales = train_df.groupby('store').sales.sum()","7f2ad876":"highest_store = total_sales.reset_index().sort_values('sales', ascending=False).iloc[0,].store","da9c80b1":"lowest_store = total_sales.reset_index().sort_values('sales', ascending=True).iloc[0].store","780c22dd":"plt.figure(figsize=(15,8))\nfor i in sales_per_store_over_time.store.unique():\n    \n    alpha = 0.5\n    linewidth = 1\n    color = 'grey'\n\n    if i == lowest_store:\n        color = 'red'\n        alpha = 1\n        linewidth = 2\n    if i == highest_store:\n        alpha = 1\n        color = 'aqua'\n        linewidth = 2\n\n    store_values = sales_per_store_over_time[sales_per_store_over_time.store == i]\n\n    plt.plot(store_values['year_month'], store_values['sales'], linewidth=linewidth, alpha=1, label=i, color=color)\n\nplt.legend(loc='upper left')\nplt.xticks(rotation=70)\nplt.show()","0e6fe5b7":"list_of_sales_per_store = []\nfor i in sales_per_store_over_time.store.unique():\n    store_values = sales_per_store_over_time[sales_per_store_over_time.store == i]\n    list_of_sales_per_store.append(store_values.sales)","22c4d7ad":"plt.figure(figsize=(15,10))\nplt.stackplot(sales_per_store_over_time.date.unique(), list_of_sales_per_store, labels=sales_per_store_over_time.store.unique())\nplt.legend(loc='upper left')\nplt.show()","f1a38af2":"def smape(actual, target):\n    return 100 * np.mean(2 * np.abs(actual - target)\/(np.abs(actual) + np.abs(target)))","20eb1ab0":"to_keep = ['store', 'item','year', 'month', 'is_weekend', 'day_of_week', 'month_end', 'month_start', 'week_of_year']","daa73658":"model = lightgbm.LGBMRegressor(n_jobs=-1, n_estimators=500, max_depth=8, objective='regression_l1', random_state=420)","7b8a5ad8":"valid_df = train_df[(train_df.year == 2017) & (train_df.month.isin((10, 11, 12)))]\ntrain_df_dropped = train_df.drop(valid_df.index)","3e752971":"X = train_df_dropped[to_keep]\ny = train_df_dropped['sales']\nvalid_X = valid_df[to_keep]\nvalid_y = valid_df['sales']","fddabd4a":"model.fit(X, y, eval_set=[(valid_X, valid_y)], eval_metric=['mape', smape], early_stopping_rounds=300)","25496043":"feature_importances = pd.DataFrame({'importance': model.feature_importances_, 'name': X.columns})","938336d6":"sns.barplot(\n    data=feature_importances.sort_values('importance', ascending=False), x='importance', y='name')","87f5014a":"pred = model.predict(valid_X)","152c7a8a":"smape(valid_y, pred)","956806d9":"test_df = pd.read_csv(PATH \/ 'test.csv')","3a5bd3c7":"test_df = preprocess(test_df)","835e426c":"pred = model.predict(test_df[to_keep])","f41b4a94":"pd.DataFrame({'id': test_df['id'],'sales': pred}).to_csv('submission.csv', index=False)","16efd21b":"# Store item demand EDA","6b82fe20":"## Submission","5eb5950e":"## EDA","de288620":"## Training","0b7203ea":"## Prepare dataset","c4815f32":"Breaks down sales for each store over time.\nNote: Shows the lowest and the highest earners.","b8069885":"Individual contribution of each store to the total."}}