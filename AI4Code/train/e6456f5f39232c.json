{"cell_type":{"11c9776a":"code","523cdaf1":"code","8b2b5184":"code","6e51e4c2":"code","f830b901":"code","4d3201ad":"code","eb7749fa":"code","5956de41":"code","e0117538":"code","982dd66d":"code","f88d638a":"code","28697d3d":"code","a1123c07":"code","6563ada1":"code","5c73158a":"code","6993936b":"code","16d71fab":"code","d080bd62":"code","54a5d429":"code","258777fe":"code","ace1786a":"code","ce0fbb1b":"code","08372b36":"code","5ec3aedd":"code","c830904e":"code","28f1be61":"code","a6d369c3":"code","3989a37f":"code","0f50e642":"code","60a75484":"code","57701522":"code","f98f1529":"code","34fe0261":"code","f94894af":"code","865d047b":"code","91789fcc":"code","c56fb524":"code","3dad572e":"code","26d510cb":"code","5b00dbfe":"code","620f873d":"code","d3c873ef":"code","a25731d6":"code","ebb7e16d":"code","df86f1d4":"code","27b00214":"code","eedb7705":"markdown","5a3722ee":"markdown","7cb3a33c":"markdown","e11692a9":"markdown","e6d10a83":"markdown","5297c10f":"markdown","fd1f74cb":"markdown","648f0e7a":"markdown","ec407804":"markdown","44aa2b8e":"markdown","6bbb3c3c":"markdown","3e4702da":"markdown","a98c34a1":"markdown","35ced7ee":"markdown","61a48f96":"markdown","f84c410a":"markdown","0fe567e5":"markdown","7ee6e2fc":"markdown","d5dbb3c2":"markdown","abc5dc24":"markdown","b0d35f7f":"markdown","53df7337":"markdown","e6a08626":"markdown","b8df1eb3":"markdown","0de0732c":"markdown","43e5710e":"markdown","68289000":"markdown","46feceea":"markdown","024ff1be":"markdown","516ebba1":"markdown","81c25fd8":"markdown","2d3022fd":"markdown","42e79ac9":"markdown","1a0a8eb9":"markdown","bc0f0c6c":"markdown","bbb95c3e":"markdown","6a4b7dc3":"markdown","84c298dc":"markdown","343e17b0":"markdown"},"source":{"11c9776a":"!pip install --upgrade git+https:\/\/github.com\/goolig\/dsClass.git","523cdaf1":"import pandas as pd\nimport itertools\nfrom datetime import timedelta\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\n%matplotlib inline\n\nimport seaborn as sns\nsns.set_context(\"poster\")\nplt.style.use('fivethirtyeight')\n#plt.style.use('ggplot')\nplt.rcParams['axes.labelweight'] = 'bold'\nplt.rcParams['axes.titleweight'] = 'bold'\nplt.rcParams['figure.titleweight'] = 'bold' \n\nfrom IPython.display import display, HTML\n\nimport numpy as np\nimport math\n\nimport datetime\nimport time\nimport sys\n\nimport networkx as nx\n\n\nimport sklearn\nprint(\"sklearn.__version__:\",sklearn.__version__)\n\nimport pylab as pl\nimport matplotlib.dates as mdates\n\n#print('Machine: {} {}\\n'.format(os.uname().sysname,os.uname().machine))\nprint(sys.version)\nfrom dsClass.path_helper import *","8b2b5184":"import ipywidgets as widgets\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nfrom IPython.display import display, Markdown","6e51e4c2":"file_name = get_file_path(\"results_by_booth_2015 - english - v3_utf8.csv\")\nresult_df = pd.read_csv(file_name,delimiter=',')\nprint(\"Columns:\")\nprint(result_df.columns)\nprint()\nprint(\"df shape:\",result_df.shape)\nresult_df.tail(5)","f830b901":"result_df = result_df.dropna(axis=0, how='any')\nresult_df = result_df[result_df.votes > 0]\nresult_df.loc[result_df.Registered_voters == 0,'Registered_voters'] = result_df[result_df.Registered_voters == 0].votes\nresult_df.shape","4d3201ad":"block_percent = 0.0325","eb7749fa":"all_registered_voters = result_df.Registered_voters.sum()\nall_votes = result_df.proper_votes.sum()\nprint(\"all registerd voters:\",all_registered_voters)\nprint(\"all_votes:\",all_votes)\nprint(\"vote percentage:\",all_votes\/all_registered_voters)\noverall_votes_per_party = result_df.iloc[:,8:].sum()\npercantage_vote_per_pary = overall_votes_per_party\/all_votes\npercantage_vote_per_pary = percantage_vote_per_pary[percantage_vote_per_pary.values>block_percent]\npercantage_vote_per_pary.sort_values(ascending=False).plot.bar(alpha=0.7)","5956de41":"# Print the large parties\nlarge_parties = percantage_vote_per_pary.index.values\nprint(large_parties)","e0117538":"non_party_col = list(result_df.iloc[:,0:8].columns)\nint_columns = []\nint_columns.extend(non_party_col)\nint_columns.extend(list(large_parties))\nprint(int_columns)","982dd66d":"res_work_df = result_df.copy()\nres_work_df = res_work_df[int_columns]\nres_work_df_city = res_work_df.groupby(['settlement_name_english','Settlement_code'])[int_columns[4:]].sum().reset_index()\nprint(res_work_df_city.shape)\nres_work_df_city.head(5)","f88d638a":"min_vote_rate = 0.6\nmin_proper_votes = 300","28697d3d":"res_work_df = res_work_df_city.copy()\nres_work_df['vote_rate'] = res_work_df.proper_votes \/ res_work_df.Registered_voters\nres_work_df = res_work_df[(res_work_df.vote_rate > min_vote_rate) & (res_work_df.proper_votes > min_proper_votes)]\nprint(res_work_df.shape)\nres_work_df.sample(10)","a1123c07":"res_work_df[res_work_df.settlement_name_english.str.contains(\"BE'ER SHEVA|TEL AVIV|JERU|HAI\")] # BE'ER SHEVA \/ TEL AVIV \/ JERUSALEM ","6563ada1":"res_work_df[res_work_df.vote_rate == np.inf]","5c73158a":"res_work_df_percentage_votes = res_work_df.iloc[:,6:-1].div(res_work_df.proper_votes, axis=0)\nres_work_df_percentage_votes.head(5)","6993936b":"res_work_df_percentage_votes_transpose = res_work_df_percentage_votes.transpose()\nres_work_df_percentage_votes_transpose.head(11)","16d71fab":"X = res_work_df_percentage_votes_transpose\nX.head(3)","d080bd62":"def above_median(fclist):\n    med = np.median(fclist)\n    return (fclist > med).astype(int)\n\nX = X.apply(above_median, axis=1)","54a5d429":"X[1:10]","258777fe":"names = res_work_df_percentage_votes_transpose.index.tolist()","ace1786a":"from sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=4, random_state=0).fit(X)\nclusters = km.labels_.tolist()\nclusters","ce0fbb1b":"from sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=2)\nresults_tsne = tsne.fit(X)\n\ncoords = results_tsne.embedding_\n\ncolors = ['blue','red','green','cyan','magenta','yellow','black','white']\nlabel_colors = [colors[i] for i in clusters]\n\nplt.subplots_adjust(bottom = 0.1)\nplt.scatter(\n    coords[:, 0], coords[:, 1], marker = 'o', c=label_colors\n    )\n\n#names = distance.index.values.tolist()\nfor label, x, y in zip(names, coords[:, 0], coords[:, 1]):\n    plt.annotate(\n        label,\n        xy = (x, y), xytext = (-20, 20),\n        textcoords = 'offset points', ha = 'right', va = 'bottom',\n        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))\n\nplt.show()\n","08372b36":"from sklearn.metrics.pairwise import pairwise_distances\nfrom sklearn.preprocessing import MinMaxScaler\n\nx = res_work_df_percentage_votes_transpose\n\nres = pairwise_distances(x, metric='correlation') # cosine \/ jaccard \/ correlation \/ euclidean\n\ndistance = pd.DataFrame(res, index=res_work_df_percentage_votes_transpose.index, \n                        columns= res_work_df_percentage_votes_transpose.index)\n\ndistance","5ec3aedd":"import scipy\nfrom scipy.cluster import hierarchy\n\nlabels = distance.index.values.tolist()\nsq_distance = scipy.spatial.distance.squareform(distance)\n\nZ = hierarchy.linkage(sq_distance, 'single')\n#plt.figure()\n#dn = hierarchy.dendrogram(Z)\n\nhierarchy.set_link_color_palette(['m', 'c', 'y', 'k'])\nfig, axes = plt.subplots(1, 1, figsize=(16, 6))\n#dn1 = hierarchy.dendrogram(Z, ax=axes[0], above_threshold_color='y', orientation='top', labels=labels)\ndn1 = hierarchy.dendrogram(Z, ax=axes, above_threshold_color='y', orientation='top', labels=labels)\n#dn2 = hierarchy.dendrogram(Z, ax=axes[1], above_threshold_color='#bcbddc', orientation='right', labels=labels)\nhierarchy.set_link_color_palette(None)  # reset to default after use\nplt.show()","c830904e":"new_order_distance = distance.reindex(dn1['ivl'])\nnew_order_distance = new_order_distance[dn1['ivl']] ","28f1be61":"import seaborn as sns\nax = sns.heatmap(new_order_distance)","a6d369c3":"distance_cutoff = 1\nparties = percantage_vote_per_pary.index.tolist()\nparties","3989a37f":"import itertools\ndist_list = list(distance.index)\nall_2_org_combos = itertools.combinations(dist_list, 2)\nmax_dist = distance.max().max()\n\n# Generate graph with nodes: \nG=nx.Graph()\n\nfor p in parties:\n    G.add_node(p,\n               name=p,\n               p_vote=float(percantage_vote_per_pary[p]),             \n               comm=\"0\") \n    \n# Connect nodes:\nfor combo in all_2_org_combos:\n    combo_dist = distance[combo[0]][combo[1]]\n    opp_dist = combo_dist - max_dist\n    if distance[combo[0]][combo[1]] < distance_cutoff:\n        G.add_edge(combo[0],combo[1],weight=float(abs(opp_dist)))\n        \n\nn = G.number_of_nodes()\nm = G.number_of_edges()     \nprint(\"number of nodes in graph G: \",n)\nprint(\"number of edges in graph G: \",m)\nprint()","0f50e642":"#! conda install -c conda-forge python-louvain\n#! pip install python-Louvain","60a75484":"import community\ncommunities = community.best_partition(G)\nmod = community.modularity(communities,G)\nprint(\"modularity:\", mod)","57701522":"G","f98f1529":"if m > 0:         \n    for k,v in communities.items():\n        #for n in C:\n        G.nodes[k]['comm'] = str(v)\nelse:\n    print(\"Not runnig Community algorithm because the graph has no edges\")","34fe0261":"com_values = [communities.get(node) for node in G.nodes()]\n\np_votes = [d['p_vote'] for n,d in G.nodes(data=True)]\nnode_size=[v * 3000 for v in p_votes]\n\n#pos=nx.spring_layout(G)\n#pos=nx.spectral_layout(G)\n#pos=nx.random_layout(G)\n#pos=nx.circular_layout(G)\n#pos = nx.shell_layout(G)\npos=nx.fruchterman_reingold_layout(G)\nnx.draw_networkx(G,pos, cmap = plt.get_cmap('jet'), node_color = com_values, node_size=node_size, with_labels=True)","f94894af":"com_values = [communities.get(node) for node in G.nodes()]\np_votes = [d['p_vote'] for n,d in G.nodes(data=True)]\nnode_size=[v * 3000 for v in p_votes]\n\nnum_nodes = G.number_of_nodes()\nnum_edges = G.number_of_edges()\n\noptions_list = [\"spring_layout\", \"planar_layout\", \"circular_layout\", \"random_layout\", \"shell_layout\", \"spectral_layout\"]\n\nw_dropdown = widgets.Dropdown(\n    options=options_list,\n    value=options_list[0],\n    description='Layout:',\n    disabled=False,\n)\n\ndef display_plot(layout):\n    if layout==\"spring_layout\":\n        pos=nx.spring_layout(G, k=0.3, iterations=20, scale=2)\n    elif layout==\"planar_layout\": \n        pos=nx.planar_layout(G)\n    elif layout==\"circular_layout\":\n        pos=nx.circular_layout(G)\n    elif layout==\"random_layout\":\n        pos=nx.random_layout(G)\n    elif layout==\"shell_layout\":\n        pos=nx.shell_layout(G) \n    elif layout==\"spectral_layout\":\n        pos=nx.spectral_layout(G)      \n    else:    \n        print(\"problrm with choosing a layout\")\n        \n    plt.figure(figsize=(16,6))     \n    if num_edges > 1:\n        nx.draw_networkx(G,pos, cmap = plt.get_cmap('jet'), node_color = com_values, with_labels=True,  alpha=0.8, font_size=14)\n    else:\n        nx.draw_networkx(G,pos, cmap = plt.get_cmap('jet'), with_labels=True,  alpha=0.8, font_size=16)\n    plt.show() \n\ndisplay(Markdown(\"# Choose layout for network display\"))\ninteract(display_plot, layout=w_dropdown);","865d047b":"graphFileName = \"parties.gexf\"\nnx.write_gexf(G, graphFileName, encoding='utf-8')","91789fcc":"res_work_df_percentage_votes.head(5)","c56fb524":"#Q1 \nx = res_work_df.iloc[:,6:-1].div(res_work_df.proper_votes, axis=0)\n\nres = pairwise_distances(x, metric='correlation') # cosine \/ jaccard \/ correlation \/ euclidean\n\ndistance = pd.DataFrame(res, index=res_work_df_percentage_votes.index, \n                        columns= res_work_df_percentage_votes.index)\n\ndistance.iloc[0:10,0:10]","3dad572e":"distance_cutoff = 0.01\nmin_proper_votes = 1000","26d510cb":"#Q2\n\ndict_idx2set_name = {}\nfor i in range(len(res_work_df)):\n    dict_idx2set_name[res_work_df['Settlement_code'].values[i]] = res_work_df['settlement_name_english'].values[i]\n\ndict_set_name2proper_votes = {}\nfor i in range(len(res_work_df)):\n    dict_set_name2proper_votes[res_work_df['settlement_name_english'].values[i]] = res_work_df['proper_votes'].values[i]\n    \nkey = res_work_df['Settlement_code'].values[0]\nvalue = dict_idx2set_name[key]\n\nprint(\"Example Get from dict_idx2set_name\")\nprint(\"Key: \"  + str(key))\nprint(\"Value: \"  + str(value))\nprint()\n\nkey = res_work_df['settlement_name_english'].values[0]\nvalue = dict_set_name2proper_votes[key]\n\nprint(\"Example Get from dict_set_name2proper_votes\")\nprint(\"Key: \"  + str(key))\nprint(\"Value: \"  + str(value))\n","5b00dbfe":"#Q3\ncities_over_votes_threshold = res_work_df[res_work_df.proper_votes>min_proper_votes]\nlen(cities_over_votes_threshold)","620f873d":"#Q4\npercantage_vote_per_city = cities_over_votes_threshold['proper_votes']\/all_votes\ncities = percantage_vote_per_city.index.tolist()\n\n# Generate graph with nodes: \nG=nx.Graph()\n\nfor c in cities:\n    G.add_node(res_work_df['settlement_name_english'][c],\n               name=res_work_df['settlement_name_english'][c],\n               city_code=res_work_df['Settlement_code'][c],\n               proper_vote=float(res_work_df['proper_votes'][c]),\n               comm=\"0\")\n    \n# Connect nodes:\nfor i in cities:\n    for j in cities:\n        if i != j and distance[i][j] < 0.015:\n            G.add_edge(res_work_df['settlement_name_english'][i], res_work_df['settlement_name_english'][j], weight=float(distance[i][j]))\n\n        \nn = G.number_of_nodes()\nm = G.number_of_edges()     \n        \nprint(\"number of nodes in graph G: \",n)\nprint(\"number of edges in graph G: \",m)\nprint()","d3c873ef":"#Q5\n\ncommunities = community.best_partition(G)\nmod = community.modularity(communities,G)\ncom_values = [communities.get(node) for node in G.nodes()]\n\nprint(\"number of communities is: \" + str(len(set(communities.values()))))\ncommunity_occurrences_dict = {i:list(communities.values()).count(i) for i in list(communities.values())}\nmax_key = max(community_occurrences_dict, key=community_occurrences_dict.get)\nprint(\"The max community is: \" + str(max_key) + \" and the max occurences of this community is: \" + str(community_occurrences_dict[max_key]))\nprint(\"modularity:\", mod)","a25731d6":"#Q6\nif m > 0:         \n    for k,v in communities.items():\n        #for n in C:\n        G.nodes[k]['comm'] = str(v)","ebb7e16d":"#Q7\n\nnode_size = [d.get('proper_vote')\/100 for n,d in G.nodes(data=True)]\npos=nx.fruchterman_reingold_layout(G)\nnx.draw_networkx(G,pos, cmap = plt.get_cmap('jet'), node_color = com_values, node_size=node_size, with_labels=True, font_size=5)","df86f1d4":"#Q8\ncommunity_votes = {}\nfor n,d in G.nodes(data=True):\n    if d.get('comm') in community_votes.keys():\n        community_votes[d.get('comm')] = community_votes[d.get('comm')] + 1\n    else:\n        community_votes[d.get('comm')] = 1\n        \ncommunity_votes\n\nfrom collections import Counter\n\ntop_5_common = dict(Counter(community_votes).most_common(5))\nfor k in top_5_common:\n    top_5_common[k] = []\ntop_5_common\ncity = \"\"\nfor n,d in G.nodes(data=True):\n    if d.get('comm') in top_5_common.keys():\n        top_5_common[d.get('comm')].append(n)\n        city = n\n    \nprint(\"The following dict present the top 5 commuities and its cities, key is the community and value is the list of cities in this community:\")\nfor com, cities in top_5_common.items():\n    print()\n    print(\"Community: \" + str(com) + \", Cities in this community: \" + str(cities))\nprint()\nprint(\"The parties in \" + city + \" city are:\")\nres_work_df[res_work_df.settlement_name_english == city].iloc[:,6:-1]","27b00214":"graphFileName_gefix = \"cities.gexf\"\nnx.write_gexf(G, graphFileName_gefix, encoding='utf-8')","eedb7705":"## Check if there bad rows with infinite values","5a3722ee":"## Heatmap of Distance Matrix Reordered as the Dendrogram","7cb3a33c":"## Q7 Draw Network\n- Set node size according to votes \/ degree\n- Try different layouts","e11692a9":"## Visualize Clusters","e6d10a83":"## Run K-Means\n- Tanspose matrix\n- Convert numeric voting rate to (1,0) where 1 means the voting rate in that settelment was above the median","5297c10f":"\u05d0\u05ea\u05dd \u05de\u05ea\u05d1\u05e7\u05e9\u05d9\u05dd \u05dc\u05d7\u05e9\u05d1 \u05de\u05d8\u05e8\u05d9\u05e6\u05ea \u05de\u05e8\u05d7\u05e7\u05d9\u05dd \u05d1\u05d9\u05df \u05e2\u05d9\u05e8 \u05dc\u05e2\u05d9\u05e8 \u05d5\u05dc\u05d4\u05d3\u05e4\u05d9\u05e1 \u05d0\u05ea \u05e2\u05e9\u05e8\u05ea \u05d4\u05e9\u05d5\u05e8\u05d5\u05ea \u05d5\u05d4\u05e2\u05de\u05d5\u05d3\u05d5\u05ea \u05d4\u05e8\u05d0\u05e9\u05d5\u05e0\u05d5\u05ea \u05e9\u05d1\u05d4. \u05d4\u05de\u05e8\u05d7\u05e7 \u05de\u05d7\u05d5\u05e9\u05d1 \u05e2\"\u05d9 \u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d9\u05ea \u05e7\u05d5\u05e8\u05dc\u05e6\u05d9\u05d4 (\u05e4\u05d9\u05e8\u05e1\u05d5\u05df). \u05db\u05dc \u05e2\u05d9\u05e8 \u05de\u05d9\u05d5\u05e6\u05d2\u05ea \u05e2\"\u05d9 \u05d5\u05e7\u05d8\u05d5\u05e8 \u05d5\u05d1\u05d5 \u05db\u05de\u05d5\u05ea \u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05d9\u05d7\u05e1\u05d9\u05ea \u05dc\u05db\u05dc \u05de\u05e4\u05dc\u05d2\u05d4 (res_work_df_percentage_votes).","fd1f74cb":"# Imports","648f0e7a":"# Clean Data","ec407804":"# Clustering","44aa2b8e":"## Q3: Create list of cities that hold all the constraints\n\n\u05e2\u05dc\u05d9\u05db\u05dd \u05dc\u05d9\u05e6\u05d5\u05e8 \u05e8\u05e9\u05d9\u05de\u05d4 \u05e9\u05dc \u05d4\u05d0\u05d9\u05e0\u05d3\u05e7\u05e1\u05d9\u05dd \u05e9\u05dc \u05d4\u05e2\u05e8\u05d9\u05dd, \u05d1\u05d4\u05dd \u05db\u05de\u05d5\u05ea \u05d4\u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05d4\u05d9\u05d9\u05ea\u05d4 \u05d2\u05d3\u05d5\u05dc\u05d4 \u05de1000. \u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05d0\u05ea \u05d2\u05d5\u05d3\u05dc \u05d4\u05e8\u05e9\u05d9\u05de\u05d4.\n\n\u05db\u05ea\u05d1\u05d5 \u05d1\u05de\u05d9\u05dc\u05d9\u05dd \u05d0\u05d5 \u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05dc\u05de\u05e1\u05da - \u05db\u05de\u05d4 \u05e2\u05e8\u05d9\u05dd \u05e2\u05d5\u05e0\u05d5\u05ea \u05dc\u05d3\u05e8\u05d9\u05e9\u05d4?","6bbb3c3c":"## Hierarchical Clustering","3e4702da":"# Distance Matrix\n- http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.pairwise.pairwise_distances.html\n- https:\/\/docs.scipy.org\/doc\/scipy\/reference\/spatial.distance.html#module-scipy.spatial.distance","a98c34a1":"\u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05d0\u05ea \u05d4\u05e8\u05e9\u05ea. \u05d4\u05e9\u05ea\u05de\u05e9\u05d5 \u05d1\u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d4 nx.draw_networkx. \u05e0\u05d9\u05ea\u05df \u05dc\u05d4\u05e2\u05d6\u05e8 \u05dc\u05de\u05e9\u05dc \u05d1 nx.spring_layout \u05db\u05d3\u05d9 \u05dc\u05de\u05e6\u05d5\u05d0 \u05d0\u05ea \u05d4\u05de\u05d9\u05e7\u05d5\u05dd \u05d4\u05d0\u05d5\u05e4\u05d8\u05d9\u05de\u05dc\u05d9 \u05dc\u05db\u05dc \u05e2\u05d9\u05e8, \u05d9\u05e9 \u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d5\u05ea \u05e0\u05d5\u05e1\u05e4\u05d5\u05ea \u05e9\u05e2\u05d5\u05e9\u05d5\u05ea \u05d6\u05d0\u05ea. \u05e7\u05d1\u05e2\u05d5 \u05d0\u05ea \u05d2\u05d5\u05d3\u05dc \u05db\u05dc \u05e2\u05d9\u05e8 \u05dc\u05e4\u05d9 \u05db\u05de\u05d5\u05ea \u05d4\u05d4\u05e6\u05d1\u05e2\u05d5\u05ea\\\u05d3\u05e8\u05d2\u05ea\u05d4 (\u05db\u05de\u05d5\u05ea \u05e7\u05e9\u05ea\u05d5\u05ea).","35ced7ee":"# Now Generate a Similar Network For Cities ","61a48f96":"## Q6: Add communitites information to the nodes in the network","f84c410a":"## Q8 Calculate:\n\n### Sum over network\n- Using the network, sum proper votes for each community \n- Print the top 5 communities (in sum of votes) and the cities that compose them\n- For one of the cities in a top-5 community, print the votes for each party ","0fe567e5":"# 2015 Elections","7ee6e2fc":"## Draw Network\n- https:\/\/networkx.github.io\/documentation\/networkx-1.10\/reference\/generated\/networkx.drawing.nx_pylab.draw_networkx.html\n- https:\/\/networkx.github.io\/documentation\/networkx-1.10\/reference\/drawing.html","d5dbb3c2":"\u05d1\u05e1\u05e2\u05d9\u05e3 \u05d6\u05d4 \u05e2\u05dc\u05d9\u05db\u05dd \u05dc\u05d9\u05e6\u05d5\u05e8 \u05e9\u05e0\u05d9 \u05de\u05d9\u05dc\u05d5\u05e0\u05d9\u05dd \u2013 hash tables, \u05d1\u05e8\u05d0\u05e9\u05d5\u05df (dict_idx2set_name) \u05d4\u05de\u05e4\u05ea\u05d7\u05d5\u05ea \u05d9\u05d4\u05d9\u05d5 \u05d4\u05d0\u05d9\u05e0\u05d3\u05e7\u05e1\u05d9\u05dd \u05e9\u05dc \u05d4\u05e2\u05e8\u05d9\u05dd \u05d1\u05d3\u05d0\u05d8\u05d0 \u05e1\u05d8 \u05d4\u05de\u05e7\u05d5\u05e8\u05d9 (res_work_df.index) \u05d5\u05d4\u05e2\u05e8\u05db\u05d9\u05dd \u05e9\u05dc \u05d4\u05de\u05d9\u05dc\u05d5\u05df \u05d9\u05d4\u05d9\u05d5 \u05e9\u05de\u05d5\u05ea \u05d4\u05d9\u05e9\u05d5\u05d1 \u05d1\u05d0\u05e0\u05d2\u05dc\u05d9\u05ea. \u05d1\u05de\u05d9\u05dc\u05d5\u05df \u05d4\u05e9\u05e0\u05d9 (dict_set_name2proper_votes) \u05d4\u05de\u05e4\u05ea\u05d7 \u05d4\u05d5\u05d0 \u05e9\u05dd \u05d4\u05d9\u05e9\u05d5\u05d1 \u05d1\u05d0\u05e0\u05d2\u05dc\u05d9\u05ea \u05d5\u05d4\u05e2\u05e8\u05da \u05d9\u05d4\u05d9\u05d4 \u05db\u05de\u05d5\u05ea \u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05d7\u05d5\u05e7\u05d9\u05d5\u05ea.\n\u05d4\u05d3\u05d2\u05d9\u05de\u05d5 \u05e9\u05dc\u05d9\u05e4\u05d4 \u05dc\u05d3\u05d5\u05d2\u05de\u05d4 \u05de\u05db\u05dc \u05d0\u05d7\u05d3 \u05de\u05d4\u05de\u05d9\u05dc\u05d5\u05e0\u05d9\u05dd.\n","abc5dc24":"# Data Import","b0d35f7f":"# Calculate percentage votes for each city-party","53df7337":"## Q1: Build Distance matrix and view it","e6a08626":"## Build Network\n\n### Build the network of cities with the following attributes\n- distance_cutoff = 0.01\n- min_proper_votes = 1000 : use only cities where proper_votes > min_proper_votes\n- Data for each node: city code, city name, proper votes, community\n- Edge weight: similarity ","b8df1eb3":"# Intersting  links:\n- https:\/\/github.com\/jtorrents\/pydata_bcn_NetworkX\/blob\/master\/NetworkX_SNA_workshop_with_solutions.ipynb","0de0732c":"\u05dc\u05db\u05dc \u05e7\u05d5\u05d3\u05e7\u05d5\u05d3, \u05d4\u05d5\u05e1\u05d9\u05e4\u05d5 \u05d0\u05ea \u05d4\u05de\u05d9\u05d3\u05e2 \u05d1\u05e0\u05d5\u05d2\u05e2 \u05dc\u05e7\u05d4\u05d9\u05dc\u05d4 \u05e9\u05dc\u05d5. \n\u05db\u05d3\u05d9 \u05dc\u05de\u05dc\u05d0 \u05d0\u05ea \u05d4\u05e1\u05e2\u05d9\u05e3, \u05e2\u05dc\u05d9\u05db\u05dd \u05dc\u05e2\u05d1\u05d5\u05e8 \u05d1\u05dc\u05d5\u05dc\u05d0\u05d4 \u05e2\u05dc \u05db\u05dc \u05e4\u05e8\u05d9\u05d8 \u05e9\u05d4\u05d7\u05d6\u05d9\u05e8\u05d4 \u05d4\u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d4 best_partition \u05d5\u05dc\u05d4\u05d6\u05d9\u05df \u05d0\u05ea \u05e2\u05e8\u05da \u05d4\u05e7\u05d4\u05d9\u05dc\u05d4 \u05d4\u05de\u05ea\u05d0\u05d9\u05dd \u05dc\u05e7\u05d5\u05d3\u05e7\u05d5\u05d3. \u05e0\u05d9\u05ea\u05df \u05dc\u05d4\u05d6\u05d9\u05df \u05e2\u05e8\u05da value \u05dc\u05e7\u05d5\u05d3\u05e7\u05d5\u05d3 K \u05d1\u05e6\u05d5\u05e8\u05d4 \u05d4\u05d1\u05d0\u05d4:\n\nG.node[k]['comm'] = value\n","43e5710e":"# Group by City and Filter Out Small Parties","68289000":"## Q2: Create dictionaries if neccassary","46feceea":"## Generate gexf file to view in Gephi\n- Save network to a gexf file format\n- Upload file in Gephi\n- Order layout using: OpenOrd \/ Yifan Hu \/ Fruchterman Reingold\n- Appearance of nodes:\n  - Color nodes by community\n  - Node size by number of votes (proper votes)\n  - Label size by number of votes as well","024ff1be":"## With widgets\n* https:\/\/ipywidgets.readthedocs.io\/en\/stable\/examples\/Widget%20Basics.html\n* https:\/\/ipywidgets.readthedocs.io\/en\/stable\/examples\/Widget%20List.html","516ebba1":"# Build Network","81c25fd8":"# Overall Votes Per Party","2d3022fd":"\u05d4\u05e0\u05ea\u05d5\u05e0\u05d9\u05dd \u05d0\u05e9\u05e8 \u05e7\u05d9\u05d1\u05dc\u05ea\u05dd \u05de\u05db\u05d9\u05dc\u05d9\u05dd \u05d0\u05ea \u05e8\u05d9\u05db\u05d5\u05d6 \u05ea\u05d5\u05e6\u05d0\u05d5\u05ea \u05d4\u05d1\u05d7\u05d9\u05e8\u05d5\u05ea \u05e2\u05d1\u05d5\u05e8 \u05d4\u05d1\u05d7\u05d9\u05e8\u05d5\u05ea \u05dc\u05db\u05e0\u05e1\u05ea \u05dc\u05d9\u05e9\u05e8\u05d0\u05dc \u05d1\u05e9\u05e0\u05ea 2015. \u05db\u05dc \u05e8\u05e9\u05d5\u05de\u05d4 \u05de\u05ea\u05d0\u05e8\u05ea \u05d0\u05ea \u05d4\u05ea\u05d5\u05e6\u05d0\u05d5\u05ea \u05e9\u05dc \u05e7\u05dc\u05e4\u05d9 \u05d0\u05d7\u05d3. \u05d4\u05e7\u05dc\u05e4\u05d9 \u05de\u05d6\u05d5\u05d4\u05d4 \u05dc\u05e4\u05d9 \u05de\u05d6\u05d4\u05d4 \u05d4\u05d9\u05e9\u05d5\u05d1 \u05d5\u05de\u05e1\u05e4\u05e8 \u05d4\u05e7\u05dc\u05e4\u05d9. \u05e9\u05dd \u05d4\u05d9\u05e9\u05d5\u05d1 \u05e0\u05d9\u05ea\u05df \u05d2\u05dd \u05d1\u05e2\u05d1\u05e8\u05d9\u05ea \u05d5\u05d1\u05d0\u05e0\u05d2\u05dc\u05d9\u05ea. \u05de\u05dc\u05d1\u05d3 \u05d6\u05d0\u05ea \u05e2\u05d1\u05d5\u05e8 \u05db\u05dc \u05e8\u05e9\u05d5\u05de\u05d4 \u05d9\u05d3\u05d5\u05e2 \u05db\u05de\u05d4 \u05de\u05e6\u05d1\u05d9\u05e2\u05d9\u05dd \u05e8\u05e9\u05d5\u05de\u05d9\u05dd \u05e2\u05d1\u05d5\u05e8\u05d4 \u05e7\u05d9\u05d9\u05de\u05d9\u05dd, \u05db\u05de\u05d4 \u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05d4\u05d9\u05d5 \u05d1\u05e4\u05d5\u05e2\u05dc, \u05db\u05de\u05d4 \u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05e0\u05e4\u05e1\u05dc\u05d5, \u05db\u05de\u05d4 \u05d4\u05e6\u05d1\u05e2\u05d5\u05ea \u05d7\u05d5\u05e7\u05d9\u05d5\u05ea \u05d4\u05ea\u05d1\u05e6\u05e2\u05d5 \u05d1\u05e7\u05dc\u05e4\u05d9 \u05d6\u05d5, \u05d5\u05e9\u05d0\u05e8 \u05d4\u05e9\u05d3\u05d5\u05ea \u05de\u05ea\u05d0\u05e8\u05d9\u05dd \u05d0\u05ea \u05db\u05de\u05d5\u05ea \u05d4\u05e7\u05d5\u05dc\u05d5\u05ea \u05e2\u05d1\u05d5\u05e8 \u05db\u05dc \u05de\u05e4\u05dc\u05d2\u05d4.","42e79ac9":"# Q9: Generate gexf file to view in Gephi\n* Save network to a gexf file format\n* Upload file in Gephi (install it localy from https:\/\/gephi.org\/users\/download\/ or use gephi online: https:\/\/www.rollapp.com\/app\/gephi)\n* Order layout using: OpenOrd \/ Yifan Hu \/ Fruchterman Reingold\n* Appearance of nodes:\n* Color nodes by community\n* Node size by number of votes (proper votes)\n* Label size by number of votes as well\n* Take a screen-shot of the entire network\n* Take a screen-shot of the largest community (sum over proper votes)\n* \u05d0\u05ea \u05d4\u05ea\u05de\u05d5\u05e0\u05d5\u05ea \u05d4\u05d2\u05d9\u05e9\u05d5 \u05d1\u05e7\u05d5\u05d1\u05e5 zip \u05d1\u05d4\u05d2\u05e9\u05d4 \u05d4\u05e0\u05e4\u05e8\u05d3\u05ea \u05e9\u05e0\u05e4\u05ea\u05d7\u05d4 \u05d1\u05de\u05d5\u05d3\u05dc. \n","1a0a8eb9":"## Distance Matrix\n- The distance will be between each city - try the correlation metric first\n- The vector of each city will be composed of the relative votes for each party","bc0f0c6c":"# Remove low votings rates","bbb95c3e":"## Communities and Modularity\n- https:\/\/en.wikipedia.org\/wiki\/Modularity_%28networks%29\n- https:\/\/en.wikipedia.org\/wiki\/Community_structure\n- https:\/\/en.wikipedia.org\/wiki\/Louvain_Modularity","6a4b7dc3":"### Q4: Network Generation\n\u05e2\u05dc\u05d9\u05db\u05dd \u05dc\u05d9\u05e6\u05d5\u05e8 \u05d2\u05e8\u05e3 \u05d5\u05d1\u05d5 \u05db\u05dc \u05e7\u05d5\u05d3\u05e7\u05d5\u05d3 \u05d4\u05d5\u05d0 \u05d9\u05e9\u05d5\u05d1 \u05e9\u05e2\u05d5\u05de\u05d3 \u05d1\u05ea\u05e0\u05d0\u05d9 \u05de\u05d4\u05e1\u05e2\u05d9\u05e3 \u05d4\u05e7\u05d5\u05d3\u05dd, \u05d5\u05d1\u05d9\u05df \u05e9\u05ea\u05d9 \u05e2\u05e8\u05d9\u05dd \u05e7\u05d9\u05d9\u05de\u05ea \u05e7\u05e9\u05ea \u05d0\u05dd \u05d4\u05de\u05e8\u05d7\u05e7 \u05e9\u05d7\u05d9\u05e9\u05d1\u05ea\u05dd \u05d1\u05e1\u05e2\u05d9\u05e3 1 \u05d1\u05d9\u05df \u05d4\u05e2\u05e8\u05d9\u05dd \u05e7\u05d8\u05df \u05de0.015, \u05d4\u05e9\u05ea\u05de\u05e9\u05d5 \u05d1\u05de\u05d8\u05e8\u05d9\u05e6\u05ea \u05d4\u05de\u05e8\u05d7\u05e7\u05d9\u05dd \u05de\u05e1\u05e2\u05d9\u05e3 1.\n\n\u05db\u05de\u05d4 \u05e7\u05d5\u05d3\u05e7\u05d5\u05d3\u05d9\u05dd \u05d9\u05e9 \u05d1\u05d2\u05e8\u05e3?\n\u05db\u05de\u05d4 \u05e7\u05e9\u05ea\u05d5\u05ea \u05d9\u05e9 \u05d1\u05d2\u05e8\u05e3?\n","84c298dc":"## Q5: Run community algorithm\n\u05d1\u05d0\u05de\u05e6\u05e2\u05d5\u05ea \u05de\u05d5\u05d3\u05dc \u05d4\u05e7\u05d4\u05d9\u05dc\u05d5\u05ea, \u05e2\u05dc\u05d9\u05db\u05dd \u05dc\u05de\u05e6\u05d5\u05d0 \u05d0\u05ea \u05d4\u05d7\u05dc\u05d5\u05e7\u05d4 \u05d4\u05d0\u05d5\u05e4\u05d8\u05d9\u05de\u05dc\u05d9\u05ea \u05e9\u05dc \u05d4\u05d2\u05e8\u05e3, \u05d5\u05d0\u05ea \u05d4\u05de\u05d5\u05d3\u05dc\u05e8\u05d9\u05d5\u05ea \u05e9\u05dc\u05d5.\n\u05d4\u05e9\u05ea\u05de\u05e9\u05d5 \u05d1\u05d7\u05d1\u05d9\u05dc\u05ea \u05d4\u05e7\u05d4\u05d9\u05dc\u05d5\u05ea (import community) \u05d5\u05d1\u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d5\u05ea best_partition \u05d5 modularity \u05d1\u05d4\u05ea\u05d0\u05dd \u05db\u05d3\u05d9 \u05dc\u05de\u05dc\u05d0 \u05d0\u05ea \u05d4\u05e1\u05e2\u05d9\u05e3. \u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05dc\u05de\u05e1\u05da \u05d0\u05ea \u05db\u05de\u05d5\u05ea \u05d4\u05e7\u05d4\u05d9\u05dc\u05d5\u05ea \u05e9\u05e0\u05de\u05e6\u05d0\u05d5, \u05d5\u05d0\u05ea \u05d4\u05de\u05d5\u05d3\u05d5\u05dc\u05e8\u05d9\u05d5\u05ea.\n\u05dc\u05d0\u05d7\u05e8 \u05de\u05db\u05df, \u05de\u05e6\u05d0\u05d5 \u05d0\u05ea \u05d4\u05e7\u05d4\u05d9\u05dc\u05d4 \u05d4\u05d2\u05d3\u05d5\u05dc\u05d4 \u05d1\u05d9\u05d5\u05ea\u05e8 \u05d1\u05d2\u05e8\u05e3 \u05d5\u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05dc\u05de\u05e1\u05da \u05d0\u05ea \u05d2\u05d5\u05d3\u05dc\u05d4.\n\n\n- How many communities?\n- How many nodes in the largest community?\n- What is the modularity score?","343e17b0":"\u05e4\u05d5\u05e0\u05e7\u05e6\u05d9\u05d5\u05ea \u05e2\u05d6\u05e8:\n* \u05d9\u05e6\u05d5\u05e8 \u05d2\u05e8\u05e3 \u05d7\u05d3\u05e9: nx.Graph()\n* \u05d4\u05d5\u05e1\u05e4\u05ea \u05e7\u05d5\u05d3\u05e7\u05d5\u05d3: G.add_node\n* \u05d4\u05d5\u05e1\u05e4\u05ea \u05e7\u05e9\u05ea: G.add_edge\n* \u05dc\u05e1\u05d9\u05d5\u05dd, \u05d4\u05d3\u05e4\u05d9\u05e1\u05d5 \u05d0\u05ea \u05db\u05de\u05d5 \u05d4\u05e7\u05e9\u05ea\u05d5\u05ea \u05d5\u05db\u05de\u05d5\u05ea \u05d4\u05e7\u05d5\u05d3\u05e7\u05d5\u05d3\u05d9\u05dd:\n* n = G.number_of_nodes()\n* m = G.number_of_edges()\n"}}