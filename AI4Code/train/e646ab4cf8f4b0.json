{"cell_type":{"2aed411d":"code","a1af4a00":"code","0c012d89":"code","3b5ca5cc":"code","1deac7aa":"code","a0694955":"code","e3fc3c2a":"code","108da8d4":"code","8d7d7525":"code","8a3489a7":"code","fb21fb00":"code","06a3e92a":"code","8482fc1f":"code","c393bc6d":"code","56af390f":"code","05879a83":"code","fc3bfd5b":"code","01e2912e":"code","b9ae303c":"code","9d1348c2":"code","017d420f":"code","9756014b":"code","66204726":"code","85a6ae0b":"code","ea130b7d":"code","dc63fc40":"code","83c367a0":"code","b4b7b61f":"code","2ac10e97":"code","ba7076cd":"code","3dc7eb64":"code","917649eb":"code","bcaa8ca8":"code","3291324d":"code","a7ee890b":"code","ac95e6d8":"code","de78e1a6":"code","e4b7225f":"code","dc3d1a36":"code","0895e6d5":"code","ad2c6606":"code","772a8730":"code","12b500fa":"code","2342dba7":"code","73eb736a":"code","2dc2ece6":"code","fc4349ba":"code","fb945069":"code","60b0f817":"code","0b749749":"code","5314f674":"code","3f940b98":"code","5aef0073":"code","a205884d":"code","8e75d452":"code","16a8643b":"code","16edbed8":"code","26045193":"code","088a0920":"code","5b0abc4a":"code","dafdc096":"code","2ca5db5d":"code","d50c6082":"code","45a64382":"code","ec92979a":"code","ed86cefd":"code","0fb08ab3":"code","686d4fb0":"code","b17876ba":"code","4de90c0c":"code","18321182":"code","e867dd65":"code","e0e8ae2c":"code","1384ddf4":"code","bf7fd9ac":"code","d98fcb9d":"code","7c047cc0":"code","bdb4fb80":"code","0b0d9ac0":"code","9e5e4b6f":"code","45138dab":"code","205a9e83":"code","a2c05f61":"code","b5af80d6":"code","2552a31b":"code","039be214":"code","75db9ba6":"code","c275f469":"code","7c530cac":"code","8087ccbb":"code","31f9a0db":"code","866cae65":"code","6567648a":"code","f9055abf":"code","504eaa8b":"code","dd2d8262":"code","ef374046":"code","1e48758c":"code","f869104c":"markdown","8d48fde9":"markdown","6b50f963":"markdown","a8f1b86c":"markdown","ea19c7ef":"markdown","181a3177":"markdown","c47184a9":"markdown","b7343685":"markdown","8218aa1d":"markdown","93781927":"markdown","5839006a":"markdown","cd2c6883":"markdown","56d21dfc":"markdown","de0b50d6":"markdown","9267e651":"markdown","cd2533f9":"markdown","fded02f4":"markdown","34859cfe":"markdown","7c673645":"markdown","fc86b57d":"markdown","d1fd0498":"markdown","37017251":"markdown","3bd8294b":"markdown","560fcaf3":"markdown","1860d98b":"markdown","2a192f27":"markdown","25b7b4d9":"markdown","1da18ce1":"markdown","3e02ee6b":"markdown","72d396bb":"markdown","654b8b1c":"markdown","8a5d421c":"markdown","9421c14b":"markdown","fdde8e6d":"markdown","6ce48e1a":"markdown","6437474d":"markdown","9cc9e536":"markdown","06714079":"markdown","059c7278":"markdown","c7108c88":"markdown","b7ee9cf3":"markdown","d02e9913":"markdown","71c8cf05":"markdown"},"source":{"2aed411d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\") #plt.style.available\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings #t\u00fcm uyar\u0131lar\u0131 kapat\u0131yor.\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1af4a00":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","0c012d89":"train_df.columns","3b5ca5cc":"train_df.head()","1deac7aa":"train_df.describe() #numerik degerlerin istatiksel bilgileri.","a0694955":"train_df.info()","e3fc3c2a":"def bar_plot(variable):\n    \"\"\"\n    input: variable example:\"sex\"\n    output : bar plot & value count\n    \"\"\"\n    # get features\n    var = train_df[variable]\n    #count number of categorical variable(value)\n    varValue = var.value_counts()\n    \n    #visuliaze\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable, varValue))\n    \n    \n    ","108da8d4":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\n\nfor i in category1:\n    bar_plot(i)","8d7d7525":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor i in category2:\n   # bar_plot(i)\n    print (\"{} \\n\".format(train_df[i].value_counts()))","8a3489a7":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50) #bin default 10\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","fb21fb00":"numericVar =[\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","06a3e92a":"#PClass ve Survived #Acaba Yolcular\u0131n S\u0131n\u0131flaryla hayatta kalmayla alakas\u0131 var m\u0131 ? \n#PClass'a g\u00f6re grupla daha sonra as_index(false: \"Azalana g\u00f6re s\u0131ralama\") ile s\u0131rala ortalamas\u0131n\u0131 al. Survived'a g\u00f6re azalana g\u00f6re s\u0131rala\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = True). mean().sort_values(by=\"Survived\", ascending=False)","8482fc1f":"#Sex ve Survived #Acaba Yolcular\u0131n Cinsiyetleriyle hayatta kalmayla alakas\u0131 var m\u0131 ?  ?  \ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False). mean().sort_values(by=\"Survived\", ascending=False)","c393bc6d":"#SibSp ve Survived #Acaba Yolcular\u0131n Karde\u015f\/E\u015f say\u0131s\u0131yla hayatta kalmayla alakas\u0131 var m\u0131 ?  \ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","56af390f":"#Parch ve Survived #Acaba Yolcular\u0131n Karde\u015f say\u0131s\u0131yla hayatta kalmayla alakas\u0131 var m\u0131 ?  \ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)","05879a83":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        \n        #1st quartile Q1\n        Q1 = np.percentile(df[c],25)\n        \n        #3rd quartile Q3\n        Q3 = np.percentile(df[c],75)\n        \n        #IQR\n        IQR = Q3 - Q1\n        \n        #Outlier Step        \n        outlier_step = IQR * 1.5\n        \n        #detect outlier and thei indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices) #kac tane outlier var \n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2) # 2den fazla varsa c\u0131kar\u0131cag\u0131z 1 tane varsa kals\u0131n.\n    \n    return multiple_outliers ","fc3bfd5b":"train_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])] #outlier tespit etmek istedi\u011fimiz feature'lar","01e2912e":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","b9ae303c":"import numpy as np\n# 75. y\u00fczdelik dilim nedir? Cevap 20'dir, yani insanlar\u0131n% 75'i 20 veya daha gen\u00e7tir.\n# 1D array \nage = [20, 2, 7, 1, 34]\nprint(\"arr : \", age) \nprint(\"50th percentile of age : \", \n       np.percentile(age, 50))\nprint(\"25th percentile of age : \",\n       np.percentile(age, 25))\nprint(\"75th percentile of age : \",\n       np.percentile(age, 75))","9d1348c2":"a = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\"]\n\nCounter(a)","017d420f":"a = [1, 2, 5, 4, 5, 5, 6, 7]\nnp.percentile(a,90)","9756014b":"#train ve test.df communite\ntrain_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","66204726":"train_df.head()","85a6ae0b":"#Find Miissing Value\ntrain_df.columns","ea130b7d":"#miissing value olan columns\ntrain_df.columns[train_df.isnull().any()]","dc63fc40":"#kac tane missing value var\ntrain_df.isnull().sum()","83c367a0":"#embarked'da nanlar nerelerde\ntrain_df[train_df[\"Embarked\"].isnull()]","b4b7b61f":"#bilet fiyatlar\u0131na g\u00f6re kar\u015f\u0131la\u015ft\u0131r\u0131p doldurabiliriz\ntrain_df.boxplot(column=\"Fare\", by = \"Embarked\")\nplt.show","2ac10e97":"# NAN olan Embarked'lar\u0131m\u0131z Fare'leri 80 olmas\u0131 daha y\u00fcksek bir ihtimal. O y\u00fczden C'den binme olas\u0131l\u0131\u011f\u0131 daha y\u00fcksek\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\") #C ile doldurduk","ba7076cd":"train_df[train_df[\"Embarked\"].isnull()]  # kontrol eti\u011fimizde bos gozukmuyor art\u0131k ","3dc7eb64":"# Fare'de NaN olan de\u011fer\ntrain_df[train_df[\"Fare\"].isnull()]","917649eb":"train_df[train_df[\"Pclass\"] == 3 ]","bcaa8ca8":"# PClass = 3 olan yolcular\u0131n ortalama \u00f6dedikleri fiyatlar\u0131 bulal\u0131m\nnp.mean(train_df[train_df[\"Pclass\"] == 3 ][\"Fare\"])","3291324d":"#Plass'tan yola c\u0131karak Fare'sini tahmin edebiliriz. Ortalama fiyat\u0131 NaN olan yerlere yazd\u0131k.\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3 ][\"Fare\"]))","a7ee890b":"train_df[train_df[\"Fare\"].isnull()]","ac95e6d8":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]  # correlationlar\u0131n\u0131 inceleyece\u011fim feature lar\u0131m\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\") # annot True \u00fczerlerine de\u011ferini yazar. fmt ile de virg\u00fcl'den sonra 2 karakter yaz\u0131yor\nplt.show()\n","de78e1a6":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probabilitiy\")\nplt.show()\n# e\u011fer 2'den fazla sibsp de\u011ferine sahipse survived propability azal\u0131yor. Buradan yeni feaure haz\u0131rlayabiliriz 2ve2den az ise \"1\" 2'den b\u00fcy\u00fckse 2 diye tan\u0131mlayabiliriz.","e4b7225f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", size = 6, data = train_df)\ng.set_ylabels(\"Survived Probability\")\nplt.show()\n#Parent\/Children ","dc3d1a36":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size =6)\ng.set_ylabels=(\"Pclass Probability\")\nplt.show()\n#","0895e6d5":"g = sns.FacetGrid(train_df, col = \"Survived\", size = 7)\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()\n\n# age <= 10 hayatta kalma oran\u0131 y\u00fcksek ","ad2c6606":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size= 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","772a8730":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","12b500fa":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","2342dba7":"train_df[train_df[\"Age\"].isnull()]\n#male\/female g\u00f6re ortalama al ona g\u00f6re doldur\n#pclass'a g\u00f6re ortalama al ona g\u00f6re doldurabiliriz\n#Sibsp'e g\u00f6re ortalama al ona g\u00f6re doldurabiliriz\n#Parch'a g\u00f6re ortalama al ona g\u00f6re doldurabiliriz","73eb736a":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\n# Age a\u015fa\u011f\u0131 yukar\u0131 ayn\u0131 g\u00f6z\u00fck\u00fcyor . o y\u00fczden bilgiye buradan ula\u015faamay\u0131z","2dc2ece6":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind =\"box\", size = 8)\nplt.show()\n# PClass ya\u015f tahmin etmek i\u00e7in g\u00fczel bir \u00f6zellik\n# 1.nci S\u0131n\u0131f 2.nci S\u0131n\u0131ftan ya\u015f ortalamas\u0131 daha b\u00fcy\u00fck 2.nci s\u0131n\u0131fta 3.nc\u00fc s\u0131n\u0131ftan ya\u015f ortalamas\u0131 daha b\u00fcy\u00fckt\u00fcr.","fc4349ba":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind =\"box\", size = 8)\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind =\"box\", size = 8)\nplt.show()","fb945069":"#Sex : male ve female iken 0 ve 1 yapt\u0131k\ntrain_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"] ]","60b0f817":"sns.heatmap(train_df[[\"Age\",\"SibSp\", \"Parch\", \"Sex\",\"Pclass\"]].corr(),annot=True)\nplt.show()","0b749749":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","5314f674":"age_pred","3f940b98":"train_df[train_df[\"Age\"].isnull()]","5aef0073":"train_df[\"Name\"].head(10)\n#insanlar\u0131n title'lar\u0131na g\u00f6re survived'a bulabliiriz","a205884d":"s = \"Futrelle, Mrs. Jacques Heath\"\ns.split(\".\")[0].split(\",\")[-1].strip() # son eleman\u0131 almak i\u00e7in -1 #strip'le de boslugu al\u0131yoruz","8e75d452":"#\u00f6nce . ya g\u00f6re sonra da , g\u00f6re ay\u0131r\u0131rsak mr veya mrs \u0131 alabiliriz\nname = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","16a8643b":"train_df[\"Title\"].head(10)","16edbed8":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","26045193":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","088a0920":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","5b0abc4a":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","dafdc096":"#Name feature \u0131n\u0131 kullanarak 4 kategorili title ad\u0131nda feature olu\u015fturduk artk \"name\"e gerek yok\ntrain_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","2ca5db5d":"train_df.head()","d50c6082":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","45a64382":"train_df.head()","ec92979a":"#parch -SibSp merge\ntrain_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 #yolcunun kendisi olaca\u011f\u0131 i\u00e7in +1 dedik 0 olmas\u0131 sa\u00e7ma olurdu.","ed86cefd":"train_df.head()","0fb08ab3":"#FSize'\u0131n Survived ile ili\u015fkisi var m\u0131 bakal\u0131m?\ng = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()\n# 4.5 < | >4.5 category yapabiliriz","686d4fb0":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","b17876ba":"train_df.head(10)","4de90c0c":"# family size count'una bakal\u0131m\nsns.countplot(x = \"family_size\", data = train_df)\nplt.show()","18321182":"#family_size ile survived oran\u0131na bakal\u0131m\ng = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e867dd65":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","e0e8ae2c":"train_df[\"Embarked\"].head()","1384ddf4":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","bf7fd9ac":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","d98fcb9d":"train_df[\"Ticket\"].head()","7c047cc0":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","bdb4fb80":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","0b0d9ac0":"train_df[\"Ticket\"].head(20)","9e5e4b6f":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\") # Ticket yerine T kullan \ntrain_df.head(10)","45138dab":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","205a9e83":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\") #categroy'e \u00e7evir\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","a2c05f61":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\") #category'e \u00e7evir\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","b5af80d6":"# kullanmak istemedi\u011fimiz column'lar\u0131 siliyoruz\ntrain_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","2552a31b":"train_df.columns","039be214":"train_df.head()","75db9ba6":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","c275f469":"train_df_len","7c530cac":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True) #Survived columunu \u00e7\u0131kar. testin i\u00e7ine e\u015fitle","8087ccbb":"test.head()","31f9a0db":"train = train_df[:train_df_len] \nX_train = train.drop(labels = \"Survived\", axis = 1) #X_Train'e Survived'\u0131 \u00e7\u0131kard\u0131k.\ny_train = train[\"Survived\"] # Y_train = Survived\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","866cae65":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) # y\u00fczde olarak yapmak i\u00e7in 2 de .'dan ' sonrasi i\u00e7in\nacc_log_test = round(logreg.score(X_test, y_test)*100,2) #\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","6567648a":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20), \n                 \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","f9055abf":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1) \n    #njobs paralel cal\u0131st\u0131r  verbose cal\u0131s\u0131rken goster b\u0131zede \n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","504eaa8b":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","dd2d8262":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1) #voting soft oranlar\u0131 topla hard 0 veya1 leri topla hangisi fazlaysa onlar\u0131 yaz\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","ef374046":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False) # D\u0131\u015far\u0131ya aktar","1e48758c":"test_survived","f869104c":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","8d48fde9":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n\n*     Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, sibsp and Parch\n*     Numerical Variable: Age, PassengerId, Fare","6b50f963":"<a id = \"8\" > <\/a><br>\n# Missing Value","a8f1b86c":"<a id = \"30\"><\/a><br>\n## Train - Test Split","ea19c7ef":"<a id = \"11\"><\/a><br>\n## Parch -- Survived<br>","181a3177":"<a id = \"23\"><\/a><br>\n## Family Size","c47184a9":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin ","b7343685":"<a id = \"22\"><\/a><br>\n## Name -- Title","8218aa1d":"### CORRELATION Between SibSp -- Parch -- Age -- Fare -- Survived","93781927":"<a id =\"12\"><\/a><br>\n\n## Pclass -- Survived","5839006a":"* float64(2) : Fare and Age\n* int64(5) : Pclass, sibSp, pach, passengerId and Survived\n* object(5) : Cabin,ticket, embarked, name and sex","cd2c6883":"<a id = \"4\"><\/a><br>\n# Categorical Variable","56d21dfc":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n1.PassengerID: unique id number .(ki\u015fiye atanm\u0131\u015f numara.)\n\n2.Survived: Passenger survive(1) or dead(0) (Gemi kazas\u0131ndan sa\u011f kal\u0131p kalmad\u0131\u011f\u0131 durum)\n\n3.Pclass: Passenger class\n\n4.Name : name\n\n5.Sex: gender of passenger\n\n6.Age: age of passenger\n\n7.SibSp: number of siblings\/spouses\n\n8.Parch: number of parents\/children\n\n9.Ticket: ticket number\n\n10.Fare: amount of money spent on ticket\n\n11.Cabin: cabin category\n\n12.Embarked: port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","de0b50d6":"<a id =\"17\"><\/a><br>\n\n## Fill Missing Age Feature","9267e651":"<a id = \"27\"><\/a><br>\n## Sex","cd2533f9":"<a id = \"24\"><\/a><br>\n## Embarked","fded02f4":"<a id = \"5\"><\/a><br>\n# Numerical Variable","34859cfe":"**#PClass'tan yola c\u0131karak Fare'sini tahmin edebiliriz.**","7c673645":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","fc86b57d":"* Age <= 10 y\u00fcksek bir hayatta kalma oran\u0131na sahiptir,\n* en ya\u015fl\u0131 yolcu (80) hayatta kald\u0131,\n* \u00e7o\u011fu yolcu 15-35 ya\u015f aral\u0131\u011f\u0131nda,\n* Age feature train i\u00e7in kullanabiliriz\n* NaN de\u011ferler i\u00e7inde Age kullabiliriz.","d1fd0498":"<a id =\"14\"><\/a><br>\n\n## PClass -- Age -- Survived","37017251":"<a id =\"15\"><\/a><br>\n\n## Embarked -- Sex -- Pclass -- Survived","3bd8294b":"<a id = \"1\"> <\/a><br>\n## Load and Check Data","560fcaf3":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* sibSp - Survived\n* Parch - Survived","1860d98b":"<a id = \"29\"><\/a><br>\n# Modeling","2a192f27":"K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 b\u00fcy\u00fck ailelere g\u00f6re daha fazlad\u0131r.","25b7b4d9":"### Fare ile Survived korelasyona sahip gibi g\u00f6r\u00fcnmektedir (0.26).","1da18ce1":"<a id = \"25\"><\/a><br>\n## Ticket","3e02ee6b":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1552 out of 2224 passanger and crew.\n\n\n<font color = blue>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable  Description](#2)    \n    [Univariate Variable Analysis](#3)        \n      [Categorical Variable Analysis](#4)    \n      [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n6. [Visulation](#9)<br>\n    - CORRELATION Between SibSp -- Parch -- Age -- Fare -- Survived<br>\n    * [SibSp -- Survived](#10)<br>\n    * [Parch -- Survived](#11)<br>\n    * [Pclass -- Survived](#12)<br>\n    * [Age -- Survived](#13)<br>\n    * [Pclass -- Age -- Survived](#14)<br>\n    * [Embarked -- Sex -- PClass -- Survived](#15)<br>\n    * [Embarked -- Sex -- Fare -- Survived](#16)<br>\n    * [Fill Missing : Age Feature](#17)<br>\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","72d396bb":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","654b8b1c":"* k\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 daha y\u00fcksektir.\n* parch = 3 olan yolcunun hayatta kalmas\u0131nda bir standart var\n* Sibsp ve parch, th = 3 ile yeni \u00f6zellik \u00e7\u0131karma i\u00e7in kullan\u0131labilir.\n","8a5d421c":"<a id = \"9\"> <\/a><br>\n# Visulation","9421c14b":"1,4,5,6,8,9,11,12,13,14,15,16,17,100\n\nveriyi bozan ayr\u0131k de\u011ferlerden kurtulmam\u0131z gerekir. Modelimizi e\u011fitirken karar vermemizi zorla\u015ft\u0131yor istatiksel olarak.<br>\nmedian: ortadaki say\u0131<br>\nmean : ortalama<br>\nQ1: 6<br>\nQ3:15<br>\nIQR: Q3-Q1 =9 <BR>\noutlier_ol_step = 9 *1.5 <br>\n    Q1-13.5 || Q3+13,5 BUNUN DISINDAK\u0130LER OUTL\u0130ER'DIR B\u0130Z\u0130M \u0130\u00c7\u0130N\n\n\n","fdde8e6d":"<a id = \"21\"><\/a><br>\n# Feature Engineering","6ce48e1a":"<a id =\"13\"><\/a><br>\n\n## Age -- Survived","6437474d":"<a id =\"16\"><\/a><br>\n\n## Embarked -- Sex -- Fare -- Survived","9cc9e536":"# Fill Missing Value<br>\n","06714079":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","059c7278":"<a id = \"26\"><\/a><br>\n## Pclass","c7108c88":"# Age'i doldurmak i\u00e7in -> Parch, Sibsp and Pclass \u0131 kullanabilirz\n**","b7ee9cf3":"<a id = \"7\"><\/a> <br>\n# Outlier Detection","d02e9913":"<a id = \"10\"><\/a><br>\n## SibSp -- Survived","71c8cf05":"\npclass model e\u011fitimi i\u00e7in \u00f6nemli bir \u00f6zelliktir."}}