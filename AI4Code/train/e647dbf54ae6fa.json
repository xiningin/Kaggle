{"cell_type":{"c755682a":"code","81a484cc":"code","a4fd9e0c":"code","6424a350":"code","19768f37":"code","71a69c91":"code","0a75219f":"code","eb02e41b":"code","8e9b6ec7":"code","40bfb670":"code","c3d5487c":"code","51ceda9c":"code","9a61f5b4":"code","81fef60a":"code","83bc9034":"code","4fcbf2b6":"code","24e7ea70":"code","9abef5d2":"code","7d2eae81":"code","d7add6da":"code","df3b5a59":"code","c38cff11":"code","0ba43e7a":"code","bf78c4dd":"code","b7f87591":"code","4a500325":"code","93898633":"code","07fc1e87":"code","eb576b74":"code","4a927a8d":"code","7b44e75b":"code","e24aade9":"code","718b0c7a":"code","dd2bed89":"code","f98ea89f":"code","4dde19ca":"markdown","350f8bdb":"markdown","bfbc122a":"markdown","fef9f934":"markdown","d09f0943":"markdown","5390865a":"markdown","b9e8dbac":"markdown","06a35917":"markdown","ac362381":"markdown","320e3087":"markdown"},"source":{"c755682a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\/mobile-price-classification\"))","81a484cc":"data=pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")\ndata.info()","a4fd9e0c":"len(list(data.columns))","6424a350":"data.isnull().sum().max()","19768f37":"data.head()","71a69c91":"data['price_range'].describe(), data['price_range'].unique()","0a75219f":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr=data.corr()\nfig = plt.figure(figsize=(15,12))\nr = sns.heatmap(corr)","eb02e41b":"corr.sort_values(by=[\"price_range\"],ascending=False).iloc[0].sort_values(ascending=False)","8e9b6ec7":"def plot_dist_(col1, col2):\n    plt.figure()\n    plt.clf()\n    x_max = data[col1].max() + 0.5\n    y_max = data[col2].max() + 0.5\n    x_min = data[col1].min() - 0.5\n    y_min = data[col2].min() - 0.5\n\n    # Plot the training points\n    plt.scatter(data[col1], data[col2], c=data[col1], cmap=plt.cm.Set1, edgecolor='k')\n    plt.xlabel(col1.title())\n    plt.ylabel(col2.title())\n\n    plt.xlim(x_min, x_max)\n    plt.ylim(y_min, y_max)\n    plt.xticks(())\n    plt.yticks(())","40bfb670":"plot_dist_(\"price_range\", \"ram\")","c3d5487c":"plot_dist_(\"price_range\", \"battery_power\")","51ceda9c":"y = data[\"price_range\"].values\nx_data=data.drop([\"price_range\"],axis=1)","9a61f5b4":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nx_t = scaler.fit_transform(x_data)","81fef60a":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_t,y,test_size = 0.2,random_state=1)","83bc9034":"np.unique(y_train, return_counts=True)","4fcbf2b6":"np.unique(y_test, return_counts=True)","24e7ea70":"from sklearn.svm import SVC\nfrom sklearn.metrics import plot_confusion_matrix","9abef5d2":"possible_K = ['linear', 'poly', 'rbf', 'sigmoid']\npossible_G = [.01,.05,.1,.25,.50,0.75,1]\nmodel = None\nbest_score = 0\nbest_C = 0\nbest_K = None\nscores = {}\nbest_G = None\n\nfor K in possible_K:\n    if K!='linear': \n        K_scores = {}\n        for G in possible_G:\n            G_scores = []\n            pc = 1\n            counter = 0\n            while pc <= 15:\n                C = 2**pc\n                pc+=1\n                clf = SVC(kernel=K,C=C,gamma=G,probability=True).fit(x_train,y_train)\n                scoretrain = clf.score(x_train,y_train)\n                scoretest  = clf.score(x_test,y_test)\n                G_scores.append(scoretest)\n                if scoretest > best_score:\n                    best_score = scoretest\n                    best_C = C\n                    model = clf\n                    best_K = K\n                    best_G = G\n                if len(G_scores) > 2 and scoretest <= G_scores[-2]: #early stopper\n                    if counter > 2:\n                        break\n                    counter+=1\n            K_scores[G] = G_scores\n    else:\n        K_scores = []\n        pc = 1\n        counter = 0\n        while pc <= 15:\n            C = 2**pc\n            pc+=1\n            clf = SVC(kernel=K,C=C,probability=True).fit(x_train,y_train)\n            scoretrain = clf.score(x_train,y_train)\n            scoretest  = clf.score(x_test,y_test)\n            K_scores.append(scoretest)\n            if scoretest > best_score:\n                best_score = scoretest\n                best_C = C\n                model = clf\n                best_K = K\n            if len(K_scores) > 2 and scoretest <= K_scores[-2]: #early_stopper\n                if counter > 2:\n                    break\n                counter+=1\n    scores[K] = K_scores\n\nif best_K=='linear':\n    print(\"Best SVM at C:{} with K:{} -> Test Score: {:2f} \\n\".format(best_C,best_K,best_score))\nelse:\n    print(\"Best SVM at C:{} with K:{} and G:{} -> Test Score: {:2f} \\n\".format(best_C,best_K,best_G,best_score))","7d2eae81":"plt.plot(range(len(scores['linear'])),scores['linear'])\nplt.title('Linear')\nplt.show()","d7add6da":"for K in possible_K:\n    if K == 'linear':\n        continue\n    for G in scores[K].keys():\n        plt.plot(range(len(scores[K][G])),scores[K][G])\n        plt.title(str(K.title()) + \", Gamma :- \" + str(G))\n        plt.show()","df3b5a59":"plot_confusion_matrix(model, x_test, y_test)","c38cff11":"from sklearn.model_selection import cross_val_score,StratifiedKFold\nscores = cross_val_score(model,x_train,y_train,cv=5)\nscores","0ba43e7a":"scores.mean()","bf78c4dd":"y_pred=model.predict(x_test)","b7f87591":"y_pred","4a500325":"y_test","93898633":"from sklearn.metrics import roc_auc_score","07fc1e87":"roc_auc_score(y_test, clf.predict_proba(x_test), multi_class='ovr')","eb576b74":"from sklearn.metrics import f1_score","4a927a8d":"f1_score(y_test, y_pred, average=None)","7b44e75b":"test_data=pd.read_csv(\"..\/input\/mobile-price-classification\/test.csv\")\ntest_data.info()","e24aade9":"ids = test_data[\"id\"].values\nx_test_data=test_data.drop([\"id\"],axis=1)\nx_test_t = scaler.fit_transform(x_test_data)","718b0c7a":"y_pred_t=model.predict(x_test_t)","dd2bed89":"np.unique(y_pred_t, return_counts=True)","f98ea89f":"my_submission = pd.DataFrame({'Id': ids, 'SalePrice': y_pred_t})\nmy_submission.to_csv('submission.csv', index=False)","4dde19ca":"Split the data into train and test in 4:1 ratio","350f8bdb":"Distribution of classes in both train and test balanced","bfbc122a":"## SVM","fef9f934":"Diagonal matrix meaning very low inter-feature correlation","d09f0943":"### Plotting columns vs label for top 2","5390865a":"## EDA","b9e8dbac":"High correlation between ram and price which means ram effects the price highly","06a35917":"## Preprocessing","ac362381":"## Testing output","320e3087":"High accuracy across all classes"}}