{"cell_type":{"c889210f":"code","ca0023a9":"code","4945553d":"code","1a928b92":"code","866e5e18":"code","50071f25":"code","0adb4039":"code","ccbd57d1":"code","a0ed6dc8":"code","d52e1e5a":"code","ffa0fe83":"code","9ad028c0":"code","0cbe2c47":"code","9b41e658":"code","a1b1f2c2":"code","968bcaed":"code","8d56d21b":"code","47ae3900":"code","1244acca":"code","ce1ffbbc":"code","35a770c2":"code","efb1271a":"code","9a014b82":"code","5ffb99a3":"code","dfc435fa":"code","c65a34ff":"code","08ff832d":"code","dba0b34f":"code","b91fe251":"code","cf593766":"code","c86165a9":"code","31ae4d4f":"code","c87236ce":"code","e77aad03":"code","675bca4d":"code","fc8fec0a":"code","fd2958c8":"code","79537f15":"code","68316a96":"code","a2e8dd5e":"markdown","1a58a3d2":"markdown","91d423ca":"markdown","5295f3c2":"markdown","ed814356":"markdown","924dcc51":"markdown","efa2115f":"markdown","bda1e1d9":"markdown","bb148fc8":"markdown","83f5927a":"markdown","de4be958":"markdown","134d74c3":"markdown","6314aa02":"markdown","4dac2666":"markdown","65cc1570":"markdown","dbe74f2d":"markdown","aa762c03":"markdown","672fda14":"markdown","7183377b":"markdown","f583da21":"markdown","01ab6a91":"markdown","55efd603":"markdown","20b332d1":"markdown"},"source":{"c889210f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn import linear_model\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\nfrom datetime import date, timedelta\n\nfrom tabulate import tabulate\n","ca0023a9":"train_df = pd.read_parquet('..\/input\/medallion-monthly-test\/train.parquet')\ntest_df = pd.read_parquet('..\/input\/medallion-monthly-test\/test.parquet')\nss = pd.read_csv('..\/input\/medallion-monthly-test\/sample_submission.csv')\n\n# train_df = pd.read_parquet('train.parquet')\n# test_df = pd.read_parquet('test.parquet')","4945553d":"test_df.head(3)","1a928b92":"for i, c in train_df.iterrows():\n    # How old is the video\n    train_df.loc[i,'age'] = (date(2021, 12, 31)-c['publishedAt'].date()).days\n    # How many days it took to go viral: \n    train_df.loc[i,'daystotrend'] = (c['trending_date']-c['publishedAt'].date()).days","866e5e18":"cols = [col for col in train_df.columns if col not in ['title', 'channelTitle','likes', 'dislikes','tags','comment_count', \n                                                       'thumbnail_link', 'comments_disabled', \n                                                       'ratings_disabled', 'description']]\ntrain_df_2=train_df[cols].copy()","50071f25":"train_df_2[train_df_2['video_id']=='3C66w5Z0ixs']","0adb4039":"video_count=train_df_2.groupby('video_id').count()\nvideo_count=video_count.reset_index()\nvd_ct=video_count[['video_id', 'id']].copy()\nvd_ct.columns=['video_id', 'Total_Trending_Days']\ntrain_df_3=train_df_2.merge(vd_ct, how='inner', on='video_id')\ntrain_df_3.head(3)","ccbd57d1":"import seaborn as sns, numpy as np\nax = sns.displot(data=video_count, x='id')","a0ed6dc8":"min_cols=train_df_2.groupby('video_id').min()\nmin_cols=min_cols.reset_index()\n\nmin_dt=min_cols[['video_id','trending_date']].copy()\nmin_dt.columns=['video_id', 'min_trending_dt']\ntrain_df_4=train_df_3.merge(min_dt, how='inner', on='video_id')\n\ntrain_df_4['trending_date']=pd.to_datetime(train_df_4['trending_date'])\ntrain_df_4['min_trending_dt']=pd.to_datetime(train_df_4['min_trending_dt'])\ntrain_df_4['days_since_first_trend']=(train_df_4['trending_date']-train_df_4['min_trending_dt']).dt.days\ntrain_df_4.head(4)","d52e1e5a":"import seaborn as sns, numpy as np\nax = sns.displot(data=train_df_4, x='days_since_first_trend')","ffa0fe83":"for i, c in test_df.iterrows():\n    test_df.loc[i,'age'] = (date(2021, 12, 31)-c['publishedAt'].date()).days\n    test_df.loc[i,'daystotrend'] = (c['trending_date']-c['publishedAt'].date()).days","9ad028c0":"test_df_2=test_df[['video_id','publishedAt','channelId','categoryId','trending_date']].copy()\ntest_df_2.head()","0cbe2c47":"test_df_2.info()","9b41e658":"test_df_2.loc[test_df_2['video_id'].isin(train_df_4['video_id'])]","a1b1f2c2":"test_df_2.loc[test_df_2['channelId'].isin(train_df_4['channelId'])]","968bcaed":"test_df_2.loc[test_df_2['categoryId'].isin(train_df_4['categoryId'])]","8d56d21b":"video_count_test=test_df_2.groupby('video_id').count()\nvideo_count_test=video_count_test.reset_index()\nvd_ct_test=video_count_test[['video_id', 'channelId']].copy()\nvd_ct_test.columns=['video_id', 'Total_Trending_Days']\ntest_df_3=test_df_2.merge(vd_ct_test, how='inner', on='video_id')\ntest_df_3.head(5)","47ae3900":"min_cols_test=test_df_2.groupby('video_id').min()\nmin_cols_test=min_cols_test.reset_index()\n\nmin_dt_test=min_cols_test[['video_id','trending_date']].copy()\nmin_dt_test.columns=['video_id', 'min_trending_dt']\ntest_df_4=test_df_3.merge(min_dt_test, how='inner', on='video_id')\ntest_df_4['trending_date']=pd.to_datetime(test_df_4['trending_date'])\ntest_df_4['min_trending_dt']=pd.to_datetime(test_df_4['min_trending_dt'])\ntest_df_4['days_since_first_trend']=(test_df_4['trending_date']-test_df_4['min_trending_dt']).dt.days\ntest_df_4.head(4)","1244acca":"test_df_4.loc[~(test_df_4['video_id'].isin(train_df_4['video_id'])),'video_id']='other'\ntest_df_4['video_id'].value_counts()","ce1ffbbc":"test_df_4.loc[~(test_df_4['channelId'].isin(train_df_4['channelId'])),'channelId']='other'\ntest_df_4['channelId'].value_counts()","35a770c2":"train_df_4[train_df_4['video_id']=='XCAlNWNbN5c']","efb1271a":"test_df_4[test_df_4['video_id']=='XCAlNWNbN5c']","9a014b82":"train_df_4.loc[train_df_4.query('Total_Trending_Days > 5').sample(frac=.1).index,'video_id'] = 'other'\ntrain_df_4.loc[train_df_4.query('Total_Trending_Days >5').sample(frac=.1).index,'channelId'] = 'other'","5ffb99a3":"#test_df_4.loc[test_df_4['channelId'].isin(train_df_4['channelId'])]","dfc435fa":"#test_df_4.loc[test_df_4['video_id'].isin(train_df_4['video_id'])]","c65a34ff":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error as MSE\n\nfrom sklearn.model_selection import train_test_split","08ff832d":"from sklearn import preprocessing\n# instatiate sklearn's labelencoder\nle_1 = preprocessing.LabelEncoder()\nle_2 = preprocessing.LabelEncoder()\nle_3 = preprocessing.LabelEncoder()\n\n# fit label encorder and return encoded integer labels for categorical string features\ntrain_df_4['video_id'] = le_1.fit_transform(train_df_4['video_id'].values)\ntrain_df_4['categoryId'] = le_2.fit_transform(train_df_4['categoryId'].values)\ntrain_df_4['channelId'] = le_3.fit_transform(train_df_4['channelId'].values)\n\ntest_df_4['video_id'] = le_1.transform(test_df_4['video_id'].values)\ntest_df_4['categoryId'] = le_2.transform(test_df_4['categoryId'].values)\ntest_df_4['channelId'] = le_3.transform(test_df_4['channelId'].values)","dba0b34f":"X=train_df_4[['video_id','categoryId','channelId', 'days_since_first_trend']]\ny=train_df_4['view_count']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=69)","b91fe251":"X_train.info()","cf593766":"rf = RandomForestRegressor(n_estimators=1000, n_jobs=6)\nimport time\n\nt_start = time.time()\nrf.fit(X,y)\nt_stop = time.time()\n\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","c86165a9":"rf.feature_importances_","31ae4d4f":"import pandas as pd\nimport matplotlib.pyplot as plt\n# Create a pd.Series of features importances\nimportances_rf = pd.Series(rf.feature_importances_,\nindex = X_train.columns)\n# Sort importances_rf\nsorted_importances_rf = importances_rf.sort_values()\n# Make a horizontal bar plot\nsorted_importances_rf.plot(kind='barh', color='blue')\nplt.show()","c87236ce":"import time\nt_start = time.time()\n\nscores = cross_val_score(rf, X, y, cv=10, scoring='neg_root_mean_squared_error')\nscores\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","e77aad03":"scores","675bca4d":"# 2500 trees - -6738864.642 RMSE with a standard deviation of 2159809.02\n# 1000 trees - -6728373.725 RMSE with a standard deviation of 2157479.25\n# 500 trees - -6734026.920 RMSE with a standard deviation of 2134480.06\nprint(\"%0.3f RMSE with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","fc8fec0a":"test_df_4['view_count'] = rf.predict(test_df_4[X.columns])","fd2958c8":"submit=pd.concat([test_df['id'], test_df_4['view_count']], axis=1)","79537f15":"test_df_4['view_count']","68316a96":"submit.to_csv('submission.csv', index=False)","a2e8dd5e":"## Random Forest","1a58a3d2":"### Test - Calculate Total # of Trending Days for Each Video","91d423ca":"#### Character Level RNN on Title","5295f3c2":"### Plot 'Days Since first Trending' for Each Video","ed814356":"# Deal with Unseen Data Labels","924dcc51":"## Train Feature Engineering","efa2115f":"### Test - Calculate 'Days Since first Trending' as a feature","bda1e1d9":"### Test - category Ids - 5800 of 5800 rows in found in Training Dataset","bb148fc8":"#### Test Data Set - replace Unseen Data Labels with 'Other'","83f5927a":"#### Final Step - Train Data set - Mask Random Video_ids and CHannelIds\n\nhttps:\/\/stackoverflow.com\/questions\/41729368\/pandas-randomly-replace-k-percent","de4be958":"### Cross Validation","134d74c3":"### Plot the Total # of Trending Days for Each Video","6314aa02":"### Calculate Total # of Trending Days for Each Video","4dac2666":"### Split Test and Train Data","65cc1570":"### Test - channell Ids - 4598 of 5800 rows in found in Training Dataset","dbe74f2d":"## Test Feature Engineering","aa762c03":"### Test - Video Ids - 300 of 5800 rows in found in Training Dataset","672fda14":"### Encode Category Labels","7183377b":"### Feature Importance","f583da21":"## Prediction ","01ab6a91":"### Calculate 'Days Since first Trending' as a feature\n\n    - First add Each Video's minimum videos Trend Date","55efd603":"#  Predicting the view count of youtube videos","20b332d1":"# Import Supervised Learning Models\n\nUse Video Id, Category Id, Channel Id as Categorical Features\n\ndays_since_first_trend as numerical data"}}