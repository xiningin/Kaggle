{"cell_type":{"4b4c4268":"code","51878180":"code","7bb1e29c":"code","dc65147a":"code","ccbe41cf":"code","ad135e7d":"code","66e99980":"code","41619757":"code","6a5c2a7f":"code","547b22da":"code","882f19bb":"code","f9daff48":"code","151bc862":"code","d49ff861":"code","39aabff5":"code","03623362":"code","b5951f4d":"code","bd9b4458":"code","008a970d":"code","ef033d38":"code","8029a100":"code","1955dc1e":"code","116531b4":"code","fb384e92":"code","6340ec74":"code","8ce8c40a":"code","4e117232":"code","bc6fc65b":"code","9ceb25c1":"code","fe1cc659":"code","a58c8a97":"code","e863acbd":"code","e657e21c":"code","f3bed394":"code","27453d4d":"code","f3da9fd3":"code","89af0545":"code","3fbdd5f1":"code","c81ae016":"code","b53cace9":"code","b2b3c2ba":"code","e4d7c755":"code","7e7a9f46":"code","caac1e32":"code","558cc89d":"code","b8054729":"code","249e8907":"code","d32552a7":"code","a7d33b62":"code","9f5da735":"code","bde3a79a":"code","c017d01f":"code","08391e62":"code","0d5501ce":"code","75c25cc7":"code","8b0dcda0":"code","178c4f03":"code","1fcfe6b5":"markdown","ff6dfa74":"markdown","fccb00f0":"markdown","28c8bfd0":"markdown","fdf5a0fa":"markdown","f2f2614b":"markdown","a4e90a15":"markdown","16f30932":"markdown","2c08df4d":"markdown","f0e10a4a":"markdown","0639a91d":"markdown","7653c76f":"markdown","63f17694":"markdown","27d41477":"markdown","a49f9248":"markdown","7617851c":"markdown","73c94db6":"markdown","c50a10eb":"markdown"},"source":{"4b4c4268":"import pandas as pd \nimport numpy as np","51878180":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","7bb1e29c":"train.head()","dc65147a":"train.drop(['Name'],axis=1,inplace=True)","ccbe41cf":"train.head()","ad135e7d":"train.columns","66e99980":"train.index","41619757":"sample_sub=pd.read_csv(\"..\/input\/gender_submission.csv\")","6a5c2a7f":"sample_sub.head()","547b22da":"train.head()","882f19bb":"test.head()","f9daff48":"test.drop(['Name'],axis=1,inplace=True)","151bc862":"test.head()","d49ff861":"train.isnull().sum()","39aabff5":"train.index","03623362":"test.isnull().sum()","b5951f4d":"train.drop(['Cabin'],axis=1,inplace=True)\ntest.drop(['Cabin'],axis=1,inplace=True)\ntest.drop(['Ticket'],axis=1,inplace=True)\ntrain.drop(['Ticket'],axis=1,inplace=True)\ntrain.drop(['PassengerId'],axis=1,inplace=True)\ntest.drop(['PassengerId'],axis=1,inplace=True)","bd9b4458":"test.head()","008a970d":"train.head()","ef033d38":"import seaborn as sns\nsns.countplot(x='Survived',hue='Sex',data=train)","8029a100":"sns.countplot(x='Survived',hue='Parch',data=train)","1955dc1e":"sns.countplot(x='Survived',hue='SibSp',data=train)","116531b4":"sns.countplot(x='Survived',hue='Pclass',data=train)","fb384e92":"train.isnull().sum()","6340ec74":"test.isnull().sum()","8ce8c40a":"train['Age'].mean()","4e117232":"train['Age'].fillna((train['Age'].mean()), inplace=True)","bc6fc65b":"test['Age'].fillna((test['Age'].mean()), inplace=True)","9ceb25c1":"test['Fare'].fillna((test['Fare'].mean()), inplace=True)","fe1cc659":"train.dropna()","a58c8a97":"test.isnull().sum()","e863acbd":"train.columns","e657e21c":"train.head()","f3bed394":"test.head()","27453d4d":"Pclass=pd.get_dummies(train['Pclass'],drop_first=True)\nPclass1=pd.get_dummies(test['Pclass'],drop_first=True)\nSex=pd.get_dummies(train['Sex'],drop_first=True)\nSex1=pd.get_dummies(test['Sex'],drop_first=True)\nEmbarked=pd.get_dummies(train['Embarked'],drop_first=True)\nEmbarked1=pd.get_dummies(test['Embarked'],drop_first=True)","f3da9fd3":"train=pd.concat([train,Pclass,Sex,Embarked],axis=1)\ntest=pd.concat([test,Pclass1,Sex1,Embarked1],axis=1)","89af0545":"train.drop(['Sex','Embarked','Pclass'],axis=1,inplace=True)\ntest.drop(['Sex','Embarked','Pclass'],axis=1,inplace=True)","3fbdd5f1":"train.head()","c81ae016":"test.head()","b53cace9":"sample_sub.head()","b2b3c2ba":"from sklearn.model_selection import train_test_split","e4d7c755":"y=train['Survived']","7e7a9f46":"y.head()","caac1e32":"X=train.drop('Survived',axis=1)","558cc89d":"X.head()","b8054729":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)","249e8907":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","d32552a7":"predictions = logmodel.predict(X_test)","a7d33b62":"from sklearn.metrics import classification_report","9f5da735":"classification_report(y_test,predictions)","bde3a79a":"from sklearn.metrics import confusion_matrix","c017d01f":"confusion_matrix(y_test,predictions)","08391e62":"(145+67)\/(41+67+15+145)","0d5501ce":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\ny_pred = gbk.predict(X_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","75c25cc7":"test.head()","8b0dcda0":"test.isnull().sum()","178c4f03":"predictions1 = gbk.predict(test)\nsample_sub['Survived']= predictions1\nsample_sub.to_csv(\"submit.csv\", index=False)\nsample_sub.head()","1fcfe6b5":"### Replacing null values by mean of the vaues of column data","ff6dfa74":"### Visualization","fccb00f0":"approx 79% accuracy","28c8bfd0":"### Dropping old columns","fdf5a0fa":"#### Dropping null values from train","f2f2614b":"##### Model 1","a4e90a15":"### Please comment how to improve the accuracy i am new ","16f30932":"### Dropping columns with too much null values and non required data","2c08df4d":"## Predicting ","f0e10a4a":"### Transforming instead of skewing","0639a91d":"## Simple Beginner kernel using logistic regression","7653c76f":"### Imports","63f17694":"### transformation","27d41477":"### Fitting the data into model","a49f9248":"## Modelling","7617851c":"### Joining newly created dummy data columns ","73c94db6":"### Checking for null values","c50a10eb":"##### Model 2"}}