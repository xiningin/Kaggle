{"cell_type":{"f5150a43":"code","6687d735":"code","0f2f7207":"code","f9a3f947":"code","55920d20":"code","384ac8f1":"code","c1a1af39":"code","f2c13b4a":"code","e5d622a5":"code","efe6f7cb":"code","3d6bf681":"code","d18c5ed5":"code","30ac03ca":"code","c828d2f6":"code","4c23dab3":"code","59a45d61":"code","33fdea51":"code","c155aecd":"markdown","18e8d6db":"markdown","56617c5e":"markdown","d1dcd80d":"markdown","c2bd2451":"markdown","51169fb2":"markdown","548bef4a":"markdown","e6263e4e":"markdown","37411094":"markdown","a9158e98":"markdown","831e962e":"markdown","62db3106":"markdown","0ff27300":"markdown","bc7f5596":"markdown","c9b897fa":"markdown","9f9acd31":"markdown"},"source":{"f5150a43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6687d735":"import matplotlib.pyplot as plt\nimport seaborn as sns","0f2f7207":"data = pd.read_csv('..\/input\/pokemon-database\/Pokemon Database.csv')\n\ndata.head()","f9a3f947":"columns = data.columns\nprint(columns)","55920d20":"Features = ['Pokemon Id','Pokemon Name','Legendary Type', 'Primary Type', 'Secondary Type','Health Stat', 'Attack Stat', 'Defense Stat', 'Special Attack Stat',\n       'Special Defense Stat', 'Speed Stat', 'Base Stat Total','Game(s) of Origin']\n\npokedata = data[Features].copy()\npokedata.head()","384ac8f1":"pokedata['Legendary Type'] = pokedata['Legendary Type'].fillna('Not Legendary')\npokedata['Secondary Type'] = pokedata['Secondary Type'].fillna('Empty')\npokedata.head()","c1a1af39":"a,b = pokedata.shape\n\n\nleg_classes = np.unique(pokedata['Legendary Type'])\nleg_sizes=[]\nnumber_of_leg_type = {}\nfor c in leg_classes:\n  a2,b2 = pokedata[pokedata[\"Legendary Type\"].isin([c])].shape\n  leg_sizes.append(a2\/a*100)\n  number_of_leg_type[c] = a2\n\nprint(number_of_leg_type)","f2c13b4a":"explode = [0.1,0.1,0.1,0]\n\nfig1, ax1 = plt.subplots(figsize=(10,10))\nax1.pie(leg_sizes, explode=explode, labels=leg_classes, autopct='%1.1f%%',\n        shadow=True, startangle=0)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Ration of Legendary types')\nplt.show()","e5d622a5":"pri_classes = np.unique(pokedata['Primary Type'])\npri_sizes=[]\nnumber_of_pri_type = {}\nfor c in pri_classes:\n  a2,b2 = pokedata[pokedata[\"Primary Type\"].isin([c])].shape\n  pri_sizes.append(a2\/a*100)\n  number_of_pri_type[c] = a2\n\nprint(number_of_pri_type)","efe6f7cb":"fig1, ax1 = plt.subplots(figsize=(10,10))\nax1.pie(pri_sizes, labels=pri_classes, autopct='%1.1f%%',\n        shadow=True, startangle=0)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Ratio of Primary types', loc='left')\nplt.show()","3d6bf681":"sec_classes = np.unique(pokedata['Secondary Type'])\nsec_sizes=[]\nnumber_of_sec_type = {}\nfor c in sec_classes:\n  a2,b2 = pokedata[pokedata[\"Secondary Type\"].isin([c])].shape\n  sec_sizes.append(a2\/a*100)\n  number_of_sec_type[c] = a2\n\nprint(number_of_sec_type)","d18c5ed5":"fig1, ax1 = plt.subplots(figsize=(10,10))\nax1.pie(sec_sizes, labels=sec_classes, autopct='%1.1f%%',\n        shadow=True, startangle=0)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title('Ratio of Secondary types', loc='left')\nplt.show()","30ac03ca":"plt.figure(figsize=(8, 8))\nsns.boxplot(x=\"Legendary Type\", y=\"Base Stat Total\", data=pokedata)\nplt.xlabel('Legendary Type', fontsize=18)\nplt.ylabel('Total Stat', fontsize=16)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show(True)","c828d2f6":"plt.figure(figsize=(15,8))\nsns.boxplot(x=\"Primary Type\", y=\"Base Stat Total\", data=pokedata)\nplt.xlabel('Primary Type', fontsize=16)\nplt.ylabel('Total Stat', fontsize=16)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=14)\nplt.show(True)","4c23dab3":"plt.figure(figsize=(16, 8))\nsns.boxplot(x=\"Secondary Type\", y=\"Base Stat Total\", data=pokedata)\nplt.xlabel('Secondary Type', fontsize=16)\nplt.ylabel('Total Stat', fontsize=16)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=14)\nplt.show(True)","59a45d61":"max_index = pokedata[\"Base Stat Total\"].idxmax()\nmax_stats = pokedata[\"Base Stat Total\"].max()\n\nprint(max_index)\nprint(max_stats)","33fdea51":"pokedata.iloc[max_index]","c155aecd":"Clearly, the average stats (the black line inside of the box) of legendary pok\u00e9mons are higher than non-legendary, although we note the existence of some weak legendary pok\u00e9mons (the outlier dots outside the boxes).","18e8d6db":"Since we are here, let's use the same code for the column of primary types of pokemon","56617c5e":"We plan to work on the difference of lengendary pok\u00e9mons. Let's fill those NaN","d1dcd80d":"Let us see what the data contains","c2bd2451":"Very few Flying type right? My hipothesys is that usually flying pok\u00e9mon have their flying type in type 2. Let's test this hypothesis by doing the same as above for the Secondary Type column","51169fb2":"The same code can be used to see the boxplots for secondary type","548bef4a":"# How many legendary pok\u00e9mons there are?","e6263e4e":"The Dragon type stands out a bit, but the other types seem to have about the same avarage.","37411094":"Other packages in this notebook","a9158e98":"# Understanding the data","831e962e":"There is an incredibly strong outlier poison pokemon. Let's see who is that pok\u00e9mon:","62db3106":"Pok\u00e9mon indexed at 931?? Who that may be?","0ff27300":"Now let's see if we can see this contrast in different primary types of pok\u00e9mon:","bc7f5596":"Of course is the Legendary poison-dragon pok\u00e9mon Eternatus from Pokemon Sword-Shield","c9b897fa":"That's a lot of attributes!!! \nWe want to focus on only some of them:\n\n(Not all are used in this notebook, but we want to explore them in future analisys)","9f9acd31":"# Boxplot the difference between legendary pok\u00e9mons"}}