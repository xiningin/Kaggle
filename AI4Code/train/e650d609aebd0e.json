{"cell_type":{"c9aef10b":"code","c8ad013a":"code","86cb7011":"code","bfa8e611":"code","68f05bb3":"code","5d8f0749":"code","6f229e8f":"code","12f1bf19":"code","aaf5a36f":"code","d49e9f24":"code","444ca492":"code","0e311b27":"code","8210c943":"code","c73a858b":"code","f7be10f8":"code","f27b3c93":"code","f334add3":"code","e6d8fb2a":"code","6a169e79":"code","165ac6f9":"code","c480f987":"code","1335012d":"code","be47dcd6":"code","db469688":"code","20ab0db8":"code","abbdcf35":"code","cfb85fa2":"code","02f5c9c6":"code","cb708ba6":"markdown","2d5d2d49":"markdown","19b58051":"markdown","bfa96dfd":"markdown","9dfceeab":"markdown","1cb0c6ff":"markdown","8b63fb10":"markdown","76792300":"markdown","64572671":"markdown","15cc4999":"markdown","4225e778":"markdown","39b745c7":"markdown","1a79a8fe":"markdown","b5f1ca9c":"markdown","0d809849":"markdown"},"source":{"c9aef10b":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c8ad013a":"#load Product features\nmeal_info = pd.read_csv(\"..\/input\/food-demand-forecasting\/meal_info.csv\")\nprint(meal_info.shape)\nmeal_info.head()","86cb7011":"#verify no null values\nmeal_info.info()","bfa8e611":"fulfilment_center = pd.read_csv('..\/input\/food-demand-forecasting\/fulfilment_center_info.csv')\nprint(fulfilment_center.shape)\nfulfilment_center.head()","68f05bb3":"fulfilment_center.info()","5d8f0749":"#import train set\nraw_train = pd.read_csv('..\/input\/food-demand-forecasting\/train.csv')\nprint(raw_train.shape)\nraw_train.head()","6f229e8f":"raw_train.info()","12f1bf19":"raw_test = pd.read_csv('..\/input\/food-demand-forecasting\/test.csv')\nprint(raw_test.shape)\nraw_test.head()","aaf5a36f":"raw_test.info()","d49e9f24":"# Merge datasets based on ID features\ntest = pd.merge(left = raw_test, right = fulfilment_center, left_on = 'center_id', right_on = 'center_id', how='left')\ntest = pd.merge(left = test, right = meal_info, left_on = 'meal_id', right_on = 'meal_id', how = 'left')\n\n#change type of incorrectly classified features\n#test[['city_code','region_code']] = test[['city_code','region_code']].astype('object')\n#test.set_index('id', inplace=True)\n\nprint(test.shape)\ntest.head()","444ca492":"# Merge datasets based on ID features\ntrain = pd.merge(left = raw_train, right = fulfilment_center, left_on = 'center_id', right_on = 'center_id', how='left')\ntrain = pd.merge(left = train, right = meal_info, left_on = 'meal_id', right_on = 'meal_id', how = 'left')\n\n#change type of incorrectly classified features\n#train[['city_code','region_code']] = train[['city_code','region_code']].astype('object')\n#train.set_index('id', inplace=True)\n\nprint(train.shape)\ntrain.head()","0e311b27":"append = test.append(train)\nappend.shape","8210c943":"fig, ax = plt.subplots(1,2, figsize=(14,6))\nfig.suptitle('Meal info distribution')\nsns.histplot(ax = ax[0], data=train[['category','cuisine']],x='category', hue='cuisine', multiple='stack').set_title(\"Train set\")\nsns.histplot(ax = ax[1], data=test[['category','cuisine']],x='category', hue='cuisine', multiple='stack').set_title(\"Test set\")\n\nfor ax in ax:\n    ax.tick_params(axis='x', labelrotation=90)\nplt.show()","c73a858b":"fig, ax = plt.subplots(1,2, figsize=(14,6))\nfig.suptitle('Fulfilment center sampled region and center types')\nsns.countplot(ax = ax[0], data=train[['region_code','center_type']],x='region_code', hue='center_type').set_title(\"Train set\")\nsns.countplot(ax = ax[1], data=test[['region_code','center_type']],x='region_code', hue='center_type').set_title(\"Test set\")\n\nfor ax in ax:\n    ax.tick_params(axis='x', labelrotation=90)\nplt.show()","f7be10f8":"plt.figure(figsize=(13,7))\nsns.lineplot(data=append, x='week', y='num_orders').set_title('Historic demand')\nplt.show()","f27b3c93":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nappend['center_type'] = le.fit_transform(append['center_type'])\nplt.figure(figsize=(15,10))\nsns.heatmap(append.corr(), cbar=True, annot=True, square=True, fmt='.2f')\nplt.show()","f334add3":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import metrics ","e6d8fb2a":"train","6a169e79":"features_to_encode = ['center_type', 'category', 'cuisine']\n\ndef one_hot_encode(features_to_encode, dataset):\n    encoder = OneHotEncoder(sparse=False)\n    encoder.fit(dataset[features_to_encode])\n\n    encoded_cols = pd.DataFrame(encoder.transform(dataset[features_to_encode]),columns=encoder.get_feature_names())\n    dataset = dataset.drop(columns=features_to_encode)\n    for cols in encoded_cols.columns:\n        dataset[cols] = encoded_cols[cols]\n    return dataset","165ac6f9":"OH_train = one_hot_encode(features_to_encode, train)\nOH_train.set_index('id', inplace=True)\nOH_train_y = OH_train['num_orders']\nOH_train_X = OH_train.drop(columns='num_orders')\nOH_train","c480f987":"OH_test = one_hot_encode(features_to_encode, test)\nOH_test.set_index('id', inplace=True)\nOH_test","1335012d":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(OH_train_X, OH_train_y, test_size = 0.30)","be47dcd6":"RF_pipe = make_pipeline(StandardScaler(),RandomForestRegressor())\nRF_pipe.fit(X_train, y_train)\nRF_train_y_pred = RF_pipe.predict(X_val)\nprint(RF_pipe.score(X_val, y_val))\nprint('RMSLE:', 100*np.sqrt(metrics.mean_squared_log_error(y_val, RF_train_y_pred)))","db469688":"# make pipeline\nSGD_pipe = make_pipeline(StandardScaler(),SGDRegressor())\nSGD_pipe.fit(X_train, y_train)\nSGD_train_y_pred = SGD_pipe.predict(X_val)\nprint(SGD_pipe.score(X_val, y_val))\n#print('RMSLE:', 100*np.sqrt(metrics.mean_squared_log_error(y_val, SGD_train_y_pred)))","20ab0db8":"DT_pipe = make_pipeline(StandardScaler(),DecisionTreeRegressor())\nDT_pipe.fit(X_train, y_train)\nDT_train_y_pred = DT_pipe.predict(X_val)\nprint(DT_pipe.score(X_val, y_val))\nprint('RMSLE:', 100*np.sqrt(metrics.mean_squared_log_error(y_val, DT_train_y_pred)))","abbdcf35":"for keys in RF_pipe.get_params().items():\n    print(keys[0],\": \",keys[1])","cfb85fa2":"hyperparameters = {'randomforestregressor__max_features' : ['auto','log2'],\n                  'randomforestregressor__max_depth' : [None]}\n\nRF_grid_search = GridSearchCV(RF_pipe, hyperparameters, cv=2, verbose=1)\n\n#Fit and tune model\nRF_grid_search.fit(OH_train_X, OH_train_y)\nprint (RF_grid_search.best_params_)\nprint (RF_grid_search.refit)","02f5c9c6":"OH_test_y_pred = RF_grid_search.predict(OH_test)\n\nsubmission = pd.DataFrame(data=OH_test_y_pred, index=OH_test.index, columns = ['num_orders'])\nsubmission.reset_index(inplace=True)\nsubmission.to_csv('.\/submission.csv')\nsubmission","cb708ba6":"## Import datasets","2d5d2d49":"## Explore data","19b58051":"### Tune hyperparameters for best fitting model. Cross Validate.\nTune hyperparameters on best fitting model through cross validation. Fit to whole training dataset. ","bfa96dfd":"## Data Wrangling\n\nMerge information from the relational tables usind the IDs to obtain Train\/Test datasets with the features needed for the multivariate model. Handle any missing\/incorrect values.\nAny data type errors are corrected. Some Features of numeric type(city_code, region_code) are treated as categorical variables, as they represent a location.","9dfceeab":"Observing the linear correlation heatmap, it is clear that the operation area (size in m2), pries, as well as promotions, have the largest impact on the number of orders.","1cb0c6ff":"### Decision Tree: Regressor","8b63fb10":"### Fulfillment center information","76792300":"### Product demand historical data","64572671":"# Meal Demand Forecasting\n\nBackground:\nThe client is a meal delivery company which operates in multiple cities. They have various fulfillment centers in these cities for dispatching meal orders to their customers. The client wants you to help these centers with demand forecasting for upcoming weeks so that these centers will plan the stock of raw materials accordingly.\n\nThe replenishment of majority of raw materials is done on weekly basis and since the raw material is perishable, the procurement planning is of utmost importance. Secondly, staffing of the centers is also one area wherein accurate demand forecasts are really helpful. \n\n__Objective:__ predict the demand for the next 10 weeks (Weeks: 146-155) for the center-meal combinations in the test set:\n- Historical data of demand for a product-center combination (Weeks: 1 to 145)\n- Product(Meal) features such as category, sub-category, current price and discount\n- Information for fulfillment center like center area, city information etc.\n\nData:\nhttps:\/\/www.kaggle.com\/sureshmecad\/meal-demand-forecasting","15cc4999":"### Product (Meal) categories","4225e778":"### One hot encoding","39b745c7":"### Forecast test data with trained, optimized model","1a79a8fe":"### Ensemble Model: RandomForestRegressor","b5f1ca9c":"### Linear Models: Stochastic Gradient Descent","0d809849":"## Model Development\n- One hot encoding for categorical variables\n- Normalization\n- Model computing"}}