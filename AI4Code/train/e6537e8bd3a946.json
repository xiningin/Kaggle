{"cell_type":{"55217693":"code","e66d5df7":"code","06669606":"code","7e1c52ab":"code","bf1765ce":"code","b392dbbc":"code","e834978b":"code","10de623c":"code","7bc00018":"code","c19cc2f5":"code","f72b05b8":"code","b72ad206":"code","b6abce84":"code","51e5cd30":"code","825450a7":"code","31cbf768":"code","ca6c4361":"code","bb36a1a0":"code","a5108f59":"code","a0c9a318":"code","9e187ac6":"code","6bac9c78":"code","b31d0600":"code","19695aa6":"code","7decaca8":"code","ce3008f1":"code","902aad09":"code","3b784979":"code","34cf28f8":"code","1cdf7738":"code","e94815c1":"code","439dfdd2":"code","4df6dbc3":"code","a05c248b":"code","65e11c5e":"code","356ad828":"code","28b7392b":"code","167a71b8":"code","5ebabfdd":"code","f2abf2eb":"code","40a25a1b":"code","c515d5f8":"code","fcc39008":"code","cd94ea9c":"code","6cf445fa":"code","4cb89a20":"code","982cd14a":"code","b84fc04a":"code","1ed69ed5":"code","4575e802":"code","6604c988":"code","bf1ba3c8":"code","1dd88bdf":"code","f000b92a":"code","e90bc395":"code","4e2298ea":"code","e8500a60":"code","5ae7b796":"code","67d351f6":"code","dabbce00":"code","d248c2b1":"code","e828e43f":"code","33b9cc3e":"code","2f744893":"code","b2138e6c":"code","a4c0619f":"code","75feec94":"code","767471e5":"code","1ccbd086":"code","fb847d99":"code","c77c4a1a":"code","5f0d3ef9":"code","9838e1c1":"code","df01fa02":"code","ef52a28c":"code","a3fde4db":"code","38539814":"code","bae8bbb5":"code","c3b67d7c":"code","55de8e2f":"code","3459c83f":"code","dcf3e838":"markdown","4c4fad92":"markdown","f37bd060":"markdown","746f980e":"markdown","f594a660":"markdown","f89bad7c":"markdown","c890386d":"markdown","cf0233bf":"markdown","9ecc7962":"markdown","326385dd":"markdown","f96cc867":"markdown","00aaa8be":"markdown","966a0564":"markdown","26fa8527":"markdown","0ec51d02":"markdown","3dc3bc7c":"markdown","21b41013":"markdown","ca297056":"markdown","8367e023":"markdown","67a56700":"markdown","a2ac2a5d":"markdown","89575f2b":"markdown","cf51d6b3":"markdown","df809709":"markdown","52dce250":"markdown","76127296":"markdown","8fc1ef7a":"markdown","a74dbb29":"markdown","1bfca480":"markdown","2d1becf3":"markdown","93925d08":"markdown","f486987f":"markdown","063889f3":"markdown","13c35a3d":"markdown","4ef172ea":"markdown","21ea1ece":"markdown","76d7a2e0":"markdown","a55bb7ed":"markdown","e97c486d":"markdown","010e46aa":"markdown","51188fce":"markdown","47eca898":"markdown","f414e1fa":"markdown","d4251c6d":"markdown","f6a7f60d":"markdown","83dd5ae7":"markdown"},"source":{"55217693":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport seaborn as sns\n\nplt.style.use(\"seaborn-colorblind\")\nplt.style.use(\"seaborn-whitegrid\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e66d5df7":"#=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_passengerId = test_df[\"PassengerId\"]\n","06669606":"train_df.info()","7e1c52ab":"def bar_plot(variable):\n    \n    \"\"\"\n    input: varible exmple: \"sex\"\n    output: bar plot& value count\n    \"\"\"\n    \n    # get feature\n    var = train_df[variable]\n    \n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"The {} is: \\n {}\".format(variable,varValue))    \n    ","bf1765ce":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)\n    ","b392dbbc":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","e834978b":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins=80)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","10de623c":"numVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numVar:\n    plot_hist(n)\n    ","7bc00018":"# Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","c19cc2f5":"# Sex -Survived\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending= False)","f72b05b8":"# SibSp - Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index =False).mean().sort_values(by=\"Survived\",ascending=False)","b72ad206":"#Parc-Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","b6abce84":"#Parch-SibSp -Survived\ntrain_df[[\"Parch\",\"SibSp\",\"Survived\"]].groupby([\"Parch\",\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","51e5cd30":"#Fare and Survived correlation\ntrain_df[[\"Fare\",\"Survived\"]].groupby([\"Fare\"],as_index=False).mean().sort_values(by= \"Survived\",ascending= False)\n","825450a7":"train_df","31cbf768":"def detectOutliers(df,features):\n    outlier_indices = []\n    for i in features:\n        #1st quartile\n        Q1 = np.percentile(df[i],25)\n        #3rd quartile\n        Q3 = np.percentile(df[i],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier_step\n        outlierStep = IQR * 1.5\n        # detect oulier and their indeces\n        outlier_listCol = df[((df[i] < Q1 - outlierStep)| (df[i] > Q3 + outlierStep))].index\n        outlier_indices.extend(outlier_listCol)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,k in outlier_indices.items() if k>2)\n    \n    return multiple_outliers","ca6c4361":"train_df.loc[detectOutliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]\ntrain_df = train_df.drop(detectOutliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop=True)\ntrain_df","bb36a1a0":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","a5108f59":"train_df.columns[train_df.isnull().any()]","a0c9a318":"train_df.isnull().sum()","9e187ac6":"train_df[train_df[\"Embarked\"].isnull()]","6bac9c78":"train_df.boxplot(column = \"Fare\",by=\"Embarked\")\nplt.show()","b31d0600":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","19695aa6":"train_df[train_df[\"Fare\"].isnull()]","7decaca8":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"]==3][\"Fare\"].mean())","ce3008f1":"train_df[train_df[\"Fare\"].isnull()]","902aad09":"#seaborn\nlist1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot = True,fmt = \".3f\")","3b784979":"g = sns.factorplot(x=\"SibSp\",y = \"Survived\",data = train_df,kind = \"bar\",size = 6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","34cf28f8":"g = sns.factorplot(x= \"Parch\",y= \"Survived\",data = train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survied Probability\")\nplt.show()","1cdf7738":"g = sns.factorplot(x= \"Pclass\",y = \"Survived\",data =train_df,kind = \"bar\",size= 5)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e94815c1":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","439dfdd2":"g = sns.FacetGrid(train_df,col = \"Survived\",row=\"Pclass\",size = 2)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","4df6dbc3":"g = sns.FacetGrid(train_df,row = \"Embarked\",size = 3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","a05c248b":"g = sns.FacetGrid(train_df,col = \"Embarked\",row = \"Survived\",size = 2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","65e11c5e":"train_df[train_df[\"Age\"].isnull()]","356ad828":"sns.factorplot(x = \"Sex\",y=\"Age\",data = train_df,kind=\"box\",size = 4)\nplt.show()","28b7392b":"sns.factorplot(x = \"Sex\",y = \"Age\",hue= \"Pclass\",data = train_df ,kind = \"box\",size = 5)\nplt.show()","167a71b8":"sns.factorplot(x = \"Parch\",y = \"Age\",data = train_df,kind = \"box\",size = 7)\nsns.factorplot(x = \"SibSp\",y = \"Age\",data= train_df,color = \"red\",kind = \"box\",size = 7)\nplt.show()","5ebabfdd":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]\n","f2abf2eb":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"Parch\",\"SibSp\",\"Pclass\"]].corr(),annot = True)\nplt.show()","40a25a1b":"index_nan_age = list(train_df[train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][(train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"])].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","c515d5f8":"train_df[\"Age\"][train_df[\"Age\"].isnull()]","fcc39008":"train_df[\"Name\"].head()","cd94ea9c":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df[\"Title\"]","6cf445fa":"sns.countplot(x = \"Title\",data = train_df)\nplt.xticks(rotation = 40)\nplt.show()","4cb89a20":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Jonkheer\",\"Dona\",\"Major\",\"Dr\",\"Rev\",\"Don\",\"Sir\",\"Col\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Mrs\" or i== \"Mlle\" or i == \"Ms\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","982cd14a":"train_df[\"Title\"].head(13)","b84fc04a":"g = sns.factorplot(x = \"Title\" , y = \"Survived\" , data = train_df,kind = \"bar\",size=5)\ng.set_xticklabels([\"Master\",\"Miss-Mrs-Mlle-Ms\",\"Mr\",\"other\"])\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","1ed69ed5":"train_df.drop(labels = [\"Name\"],axis = 1,inplace = True)\n","4575e802":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head()","6604c988":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","bf1ba3c8":"train_df.head()","1dd88bdf":"g = sns.factorplot(x= \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\", size = 5)\ng.set_ylabels(\"Survival Posibility\")\nplt.show()","f000b92a":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"Fsize\"]]","e90bc395":"train_df.head(15)","4e2298ea":"sns.countplot(x = \"family_size\",data = train_df)\nplt.show()","e8500a60":"g = sns.factorplot(x = \"family_size\",y = \"Survived\", data = train_df,kind=\"bar\",size=5)","5ae7b796":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","67d351f6":"g = sns.countplot(x = \"Embarked\",data = train_df)\nplt.show()","dabbce00":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","d248c2b1":"train_df[\"Ticket\"].head(20)","e828e43f":"liste = []\nfor i in train_df[\"Ticket\"]:\n    if not i.isdigit():\n        liste.append(i.replace(\".\",\" \").replace(\"\/\",\" \").strip().split(\" \")[0])\n    else:\n        liste.append(\"X\")\ntrain_df[\"Ticket\"] = liste","33b9cc3e":"train_df = pd.get_dummies(train_df,columns = [\"Ticket\"],prefix = \"T\")\n","2f744893":"train_df.head()","b2138e6c":"g = sns.countplot(x = \"Pclass\",data = train_df)\nplt.show()","a4c0619f":"train_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","75feec94":"train_df[\"Sex\"] = train_df [ \"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])","767471e5":"train_df.head()","1ccbd086":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"],axis = 1,inplace = True)","fb847d99":"train_df.head()","c77c4a1a":"from sklearn.model_selection import train_test_split,StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","5f0d3ef9":"train_df_len","9838e1c1":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1,inplace = True)","df01fa02":"test.head()","ef52a28c":"train = train_df[:train_df_len]\nX_train = train.drop(labels= \"Survived\",axis = 1)\ny_train = train[\"Survived\"]\nX_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state =42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","a3fde4db":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train,y_train)* 100,2)\nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","38539814":"random_state = 42\n# All the classifiers are listed in classifier[] like this:\nclassifier = [DecisionTreeClassifier( random_state = random_state),\n             SVC(random_state=random_state),\n             RandomForestClassifier(random_state=random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n#Decision Tree Classifier parameters are Min Samples split, and Max Depth\ndt_param_grid = {\"min_samples_split\": range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n#SVC parameters are: Kernel, Gamma, and C\nsvc_param_grid = {\"kernel\":[\"rbf\"],\n                 \"gamma\": [ 0.001,0.01,0.1,1],\n                 \"C\":[1,10,50,100,200,300,1000]}\n#Random Forest Classifier parameters are max_feature,min_samples_split,min_samples_leaf,bootstrap,n_estimators,criterion:\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,200],\n                \"criterion\":[\"gini\"]}\n# Logistic Regression Parameters are C, Penalty\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\":[\"l1\",\"l2\"]}\n# KNNeighbors parameters are n_neighbors,weights,metric\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10,dtype = int).tolist(),\n                 \"weights\": [ \"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\n# All of below parameters grids are listed on classifier_param\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                    knn_param_grid]","bae8bbb5":"cv_result = []\nbest_estimator = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid = classifier_param[i],cv = StratifiedKFold(n_splits = 10),scoring = \"accuracy\",n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimator.append(clf.best_estimator_)\n    print(cv_result[i])","c3b67d7c":"#Visualization of the cross validation results\ncv_results = pd.DataFrame({\"Cross Validation Means\": cv_result,\"Ml Models\": [ \"DecisionTreeClassifier\",\"SVC\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\",\"Ml Models\",data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","55de8e2f":"votingC =  VotingClassifier(estimators = [(\"dt\",best_estimator[0]),\n                                         (\"rfc\",best_estimator[2]),\n                                         (\"lr\",best_estimator[3])],voting = \"soft\",n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","3459c83f":"test_survived = pd.Series(votingC.predict(test),name = \"Survived\").astype(int)\nresults = pd.concat([test_passengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic_hidircan.csv\",index = False)","dcf3e838":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg then killed 1502 out of 2224 passengers and crew.\n And now I'm observing that the sink of the titanic ship's machine learning algorithm to understand how people survived.\n   \n<font color = \"yellow\">\nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Descriptions](#2)\n   * [Univariate Variable Analysis](#3)\n     * [Numerical Variable Analysis](#4)\n     * [Categorical Variable Analysis](#5)\n   \n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n * [Find missing Value](#9)\n * [Fill Missing Value](#10)\n1. [Visualization](#11)\n * [Correlation Between SibSp -- ParCh -- Age -- Fare -- Survived](#12)\n * [SibSp -- Survived](#13)\n * [Parch -- Survived](#14)\n * [Pclass -- Survived](#15)\n * [Age -- Survive](#16)\n * [Pclass -- Survived -- Age](#17)\n * [Embarked -- Sex -- Pclass --Survived](#18)\n * [Embarked -- Sex -- Fare -- Survived](#19)\n * [Filling Missing Age Value](#20)\n \n1. [Feauture Engineering](#21)\n * [Name -- Title](#22)\n * [Family Size](#23)\n * [Embarked](#24)\n * [Ticket](#25)\n * [Pclass](#26)\n * [Sex](#27)\n * [Drop Passenger Id and Cabin](#28)\n1. [Modeling](#29)\n * [Train Test Split](#30)\n * [Simple Logistic Regresiion](#31)\n * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n * [Ensemble Modeling](#33)\n * [Prediction and Submission](#34)","4c4fad92":"* float64(2):Age, Fare\n* int64(5):PassengerID,Survived,PClass,SibSp,Parch\n* object(5):Name,Sex,Ticket,Cabin,Embarked","f37bd060":"<a id=\"17\"><\/a><br>\n## 6-f) Pclass -- Survived -- Age","746f980e":"Age is not correlated with sex but correalated with Parch, SibSp, and Pclass","f594a660":"<a id=\"7\"><\/a><br>\n# 4-Outlier Detection","f89bad7c":"Small families have more chances to survive than large families","c890386d":"Fare feature seems to have correlation with survived feature (0.265)","cf0233bf":"<a id=\"4\" ><\/a><br>\n# 2-a-i)Categorical Variable Analysis","9ecc7962":"<a id = \"13\"><\/a><br>\n## 6-b) SibSp -- Survived","326385dd":"<a id =\"27\" ><\/a><br>\n## 7-f) Sex","f96cc867":"<a id = \"33\" ><\/a><br>\n## 8-d) Emsemble Modeling","00aaa8be":"Sex is not informative for age prediction, age distribution seems to be same","966a0564":"<a id =\"21\"><\/a><br>\n## 7) Feature Engineering","26fa8527":"<a id = \"16\" ><\/a><br>\n## 6-e) Age -- Survived","0ec51d02":"<a id = \"24\"><\/a><br>\n## 7-c) Embarked","3dc3bc7c":"<a id = \"31\"><\/a><br>\n## 8-b) Simple Logistic Regression","21b41013":"<a id =\"1\"><\/a><br>\n# 1-Load and Check Data","ca297056":"<a id = \"2\" ><\/a><br>\n# 2- Variable Descriptions\n\n1. PassengerId : id of passenger\n1. Survived: if died :0 ,lived :1\n1. Pclass: passenger class\n1. Name: name of passenger\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: Sib means siblings, Sp means spouses\n1. Parch: par means parents, ch means children\n1. Ticket: ticket number of passenger\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherburg, S =Southhampton, Q=Queenstown\n","8367e023":"First class passengers are older than second . and seconds are older than third class passengers","67a56700":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small families have more chance to survive\n* there is a standard deviation in survival of passenger with parch=3","a2ac2a5d":"<a id=\"6\"><\/a><br>\n# 3-Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","89575f2b":"<a id=\"10\"><\/a><br>\n## 5-b)Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1\n","cf51d6b3":"* Female passengers have much better survival rate than males\n* males have better survival rate in pclass 3 in C\n* embarked ans sex will be used in training","df809709":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training","52dce250":"<a id=\"3\" ><\/a><br>\n# 2-a)Univarite Variable Analysis\n* Categorical Variable Analysis : Survived, Sex, Pclass,Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable Analysis : Fare, age and passengerId","76127296":"<a id=\"12\" ><\/a><br>\n## 6-a) Correlation Between SibSp -- ParCh -- Age -- Fare -- Survived","8fc1ef7a":"* age <=10 has a high surviva rate\n* the oldest passengers (80) survived\n* large number of 20 years old didnt survive\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","a74dbb29":"<a id = \"14\"><\/a><br>\n## 6-c) ParCh -- Survived","1bfca480":"<a id=\"32\"><\/a><br>\n## 8-c) Hyperparameter Tuning - GridSearch - CrossValidation\n\n We Will compare 5 machine learning classifier and evaluate mean accuracy of each of them by stratified Cross validation\n* DECISION TREE\n* SWM \n* RANDOM FOREST\n* KNN\n* LOGISTIC REGRESSION","2d1becf3":"<a id=\"9\"><\/a><br>\n## 5-a)Find Missing Value","93925d08":"<a id=\"8\" ><\/a><br>\n# 5- Missing Value\n   * Find Missing Value\n   * Fill Missing Value","f486987f":"<a id=\"18\"><\/a><br>\n## 6-g)Embarked -- Sex -- Pclass -- Survived\n","063889f3":"<a id =\"20\"><\/a><br>\n## 6-i)Filling Missing Age Value","13c35a3d":"<a id= \"29\"><\/a><br>\n# 8)Modeling","4ef172ea":"<a id = \"23\" ><\/a><br>\n## 7-b) Family Size","21ea1ece":"* Having a lot of SibSp have less chance to survive\n* If sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories","76d7a2e0":"<a id=\"15\"><\/a><br>\n## 6-d) Pclass -- Survived","a55bb7ed":"<a id =\"22\"><\/a><br>\n## 7-a) Name -- Title","e97c486d":"<a id = \"34\" ><\/a><br>\n## 8-e) Prediction and Submission","010e46aa":"<a id =\"30\"><\/a><br>\n## 8-a)Train Test Split","51188fce":"<a id=\"26\"><\/a><br>\n## 7-e) Pclass","47eca898":"<a id =\"25\"><\/a><br>\n## 7-d) Ticket","f414e1fa":"<a id=\"5\"><\/a><br>\n# 2-a-ii)Numerical Variable Analysis","d4251c6d":"<a id = \"19\" ><\/a> <br>\n## 6-h) Embarked -- Sex -- Fare -- Survived","f6a7f60d":"<a id = \"28\"><\/a><br>\n## 7-g)Drop Passenger ID and Cabin","83dd5ae7":"<a id=\"11\" ><\/a><br>\n# 6- Visualization"}}