{"cell_type":{"e6a4c9c9":"code","e48cb5f2":"code","f1f5becd":"code","ff707874":"code","7b9fe5ad":"code","5021da46":"code","e023dc76":"code","02b34f74":"code","9755acd4":"code","dde10e26":"code","3c9aae49":"code","352a7bcc":"code","9b0eba4b":"code","70b18a20":"code","d0019ac7":"code","9998eccf":"code","dc669564":"code","e8f48852":"code","0a2b71a8":"code","c1f0b5c7":"code","a5bb5b2c":"code","249309f2":"code","5e6aedea":"markdown","715b626f":"markdown","36ff3c26":"markdown","0769f7ef":"markdown","fa8b4725":"markdown"},"source":{"e6a4c9c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e48cb5f2":"import math\nimport os\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2","f1f5becd":"random.seed(42)","ff707874":"BASE_PATH = '..\/input\/indian-memes\/'\nMEME_PATH = os.path.join(BASE_PATH, 'memes')\n#PHOTO_PATH = os.path.join(BASE_PATH, 'photo_jpg')","7b9fe5ad":"d_meme_sizes = {}\nfor image_name in os.listdir(MEME_PATH):\n    img = cv2.imread(os.path.join(MEME_PATH, image_name))\n    d_meme_sizes[img.shape] = d_meme_sizes.get(img.shape, 0) + 1\n\n#d_photo_sizes = {}\n#for image_name in os.listdir(PHOTO_PATH):\n #   img = cv2.imread(os.path.join(PHOTO_PATH, image_name))\n  #  d_photo_sizes[img.shape] = d_photo_sizes.get(img.shape, 0) + 1\n\n\nprint(f'Memes images:')\nfor size, count in d_meme_sizes.items():\n    print(f'shape: {size}\\tcount: {count}')\nprint('-' * 10)\n#print(f'Photo images:')\n#for size, count in d_photo_sizes.items():\n #   print(f'shape: {size}\\tcount: {count}')\nprint('-' * 10)","5021da46":"def batch_visualization(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    \n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    \n    image_names = all_names[:n_images]\n    if is_random:\n        image_names = random.sample(all_names, n_images)\n    \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.axis('off')\n    \n    plt.show()","e023dc76":"batch_visualization(MEME_PATH, 1, is_random=True, figsize=(8, 8))","02b34f74":"batch_visualization(MEME_PATH, 4, is_random=True)","9755acd4":"batch_visualization(MEME_PATH, 9, is_random=True)","dde10e26":"batch_visualization(MEME_PATH, 16, is_random=True)","3c9aae49":"batch_visualization(MEME_PATH, 115, is_random=True, figsize=(8, 8))","352a7bcc":"def color_hist_visualization(image_path, figsize=(16, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 4, 1)\n    plt.imshow(img)\n    plt.axis('off')\n    \n    colors = ['red', 'green', 'blue']\n    for i in range(len(colors)):\n        plt.subplot(1, 4, i + 2)\n        plt.hist(\n            img[:, :, i].reshape(-1),\n            bins=25,\n            alpha=0.5,\n            color=colors[i],\n            density=True\n        )\n        plt.xlim(0, 255)\n        plt.xticks([])\n        plt.yticks([])\n    \n    \n    plt.show()","9b0eba4b":"color_hist_visualization('..\/input\/indian-memes\/memes\/115.jpg')","70b18a20":"color_hist_visualization('..\/input\/indian-memes\/memes\/179.jpg')","d0019ac7":"color_hist_visualization('..\/input\/indian-memes\/memes\/200.jpg')","9998eccf":"def channels_visualization(image_path, figsize=(16, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 4, 1)\n    plt.imshow(img)\n    plt.axis('off')\n    \n    for i in range(3):\n        plt.subplot(1, 4, i + 2)\n        tmp_img = np.full_like(img, 0)\n        tmp_img[:, :, i] = img[:, :, i]\n        plt.imshow(tmp_img)\n        plt.xlim(0, 255)\n        plt.xticks([])\n        plt.yticks([])\n    \n    \n    plt.show()","dc669564":"color_hist_visualization('..\/input\/indian-memes\/memes\/205.jpg')\nchannels_visualization('..\/input\/indian-memes\/memes\/207.jpg')","e8f48852":"color_hist_visualization('..\/input\/indian-memes\/memes\/276.jpg')\nchannels_visualization('..\/input\/indian-memes\/memes\/263.jpg')","0a2b71a8":"img_path = '..\/input\/indian-memes\/memes\/84.jpg'\ncolor_hist_visualization(img_path)\nchannels_visualization(img_path)","c1f0b5c7":"def grayscale_visualization(image_path, figsize=(8, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.axis('off')\n    \n    plt.subplot(1, 2, 2)\n    tmp_img = np.full_like(img, 0)\n    for i in range(3):\n        tmp_img[:, :, i] = img.mean(axis=-1)\n    plt.imshow(tmp_img)\n    plt.axis('off')\n    \n    \n    plt.show()","a5bb5b2c":"img_path = '..\/input\/indian-memes\/memes\/116.jpg'\ngrayscale_visualization(img_path)","249309f2":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#a83a32','#a8324e','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh! @mpwolke' )","5e6aedea":"#Individual channels visualization","715b626f":"#Codes by Yaroslav Isaienkov  https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\/notebook","36ff3c26":"#Color channel histograms","0769f7ef":"#I wanted number 115. It returned many, No 115. ","fa8b4725":"#mpwolke coping other Kagglers Notebooks. Yes that's Me!"}}