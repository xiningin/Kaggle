{"cell_type":{"f69fdde3":"code","81de09f0":"code","15021d1d":"code","fb92e35a":"code","a5274af9":"code","2849c5d7":"code","a1c62d42":"code","56a5f537":"code","94ec8b3e":"code","29e649e4":"code","7bee7186":"code","3a56d90d":"code","47cd2800":"code","9ee63a0a":"code","72ab5f4b":"code","e804d536":"code","3fc44867":"code","d0397a62":"code","235ee411":"code","a59b1038":"code","f30192bb":"code","c4a6682e":"code","9e8f93f1":"code","883d93f5":"code","d37147ac":"code","6b986f6e":"code","e37a2c0d":"code","7db84def":"code","64e5e341":"code","e4c03065":"code","db05f741":"code","a4412884":"code","76878884":"code","5e614a2f":"code","2f0b3f7a":"code","000d05ba":"code","3f347000":"code","e4cd61db":"code","e739869f":"code","716d253e":"code","97fdb8de":"code","8fe8ab82":"code","18def113":"code","5df02747":"code","c8061ef2":"code","9ac1007b":"code","d4702b43":"code","2ab9f053":"code","63da5692":"code","d8c7dc0f":"code","06ac48e0":"code","bfdc4eb6":"code","1759504f":"code","0738aef4":"code","a1b39292":"code","6468ecc8":"code","8b05c70f":"code","6642d0a8":"code","c7ff0080":"code","ef671694":"code","76324d5d":"code","a01dceb4":"markdown"},"source":{"f69fdde3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV,GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81de09f0":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmiss = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","15021d1d":"train.head()","fb92e35a":"test.head()","a5274af9":"print(train.shape)\nprint(test.shape)","2849c5d7":"train.describe()","a1c62d42":"train.info()","56a5f537":"#Let's Check the missing values first","94ec8b3e":"train.isnull().sum()","29e649e4":"test.isnull().sum()","7bee7186":"sns.heatmap(train.isnull(), yticklabels=False,cbar=False,cmap=\"viridis\")","3a56d90d":"plt.figure(figsize=(15,5))\nsns.distplot(train['Age'])","47cd2800":"train['Age'].describe()","9ee63a0a":"plt.figure(figsize=(8,5))\nsns.boxplot('Age',data=train)","72ab5f4b":"train[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].mean())\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].mean())","e804d536":"train['Cabin'].unique()","3fc44867":"train[\"Cabin\"] = train[\"Cabin\"].fillna(train[\"Cabin\"].mode()[0])\ntest[\"Cabin\"] = test[\"Cabin\"].fillna(test[\"Cabin\"].mode()[0])","d0397a62":"train[\"Embarked\"] = train[\"Embarked\"].fillna(train[\"Embarked\"].mode()[0])","235ee411":"sns.heatmap(train.isnull(), yticklabels=False,cbar=False,cmap=\"viridis\")","a59b1038":"train.isnull().sum()","f30192bb":"test.isnull().sum()","c4a6682e":"train.head()","9e8f93f1":"train.info()","883d93f5":"plt.figure(figsize=(8,5))\nsns.countplot('Sex',data=train)","d37147ac":"plt.figure(figsize=(8,5))\nsns.countplot('Embarked',data=train)","6b986f6e":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['Sex'], hue = train['Survived'], data = train);","e37a2c0d":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['Sex'], hue = train['Pclass'], data = train);","7db84def":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['Survived'], hue = train['Pclass'], data = train);","64e5e341":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['Survived'], hue = train['Embarked'], data = train);","e4c03065":"train['Parch']","db05f741":"train['family'] = train['SibSp'] + train['Parch'] + 1\ntest['family'] = test['SibSp'] + test['Parch'] + 1","a4412884":"for i in range(len(train)):\n    if(train['family'][i] > 1):\n        train['family'][i] = 1\n    else:\n        train['family'][i] = 0\n        \n        \nfor i in range(len(test)):\n    if(test['family'][i] > 1):\n        test['family'][i] = 1\n    else:\n        test['family'][i] = 0","76878884":"train['family'].unique()","5e614a2f":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['family'], hue = train['Survived'], data = train);","2f0b3f7a":"plt.figure(figsize=(15,5))\nsns.distplot(train['Fare'])","000d05ba":"train['Fare'].describe()","3f347000":"train['fare_val'] = 0\nfor i in range(len(train)):\n    if(train['Fare'][i] > 32.0):\n        train['fare_val'][i] = 1\n        \ntest['fare_val'] = 0\nfor i in range(len(test)):\n    if(test['Fare'][i] > 32.0):\n        test['fare_val'][i] = 1","e4cd61db":"train.groupby('fare_val').Survived.value_counts()","e739869f":"plt.figure(figsize = (10,5))\nsns.countplot(x = train['fare_val'], hue = train['Survived'], data = train);","716d253e":"train.head()","97fdb8de":"lbl = LabelEncoder()\n\ntrain['Sex'] = lbl.fit_transform(train[['Sex']].values.ravel())\ntest['Sex'] = lbl.fit_transform(test[['Sex']].values.ravel())","8fe8ab82":"train = pd.get_dummies(columns = ['Pclass','Embarked'],data=train,drop_first = True)\ntest = pd.get_dummies(columns = ['Pclass','Embarked'],data=test,drop_first = True)","18def113":"train.head()","5df02747":"train = train.drop(['Name','PassengerId','Ticket','Cabin','SibSp','Parch','Fare'],axis = 1)\ntest_new = test.drop(['Name','PassengerId','Ticket','Cabin','SibSp','Parch','Fare'],axis = 1)","c8061ef2":"train.head()","9ac1007b":"X = train.drop(['Survived'],axis = 1) \ny = train['Survived']","d4702b43":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 27)","2ab9f053":"X_train.head()","63da5692":"model = DecisionTreeClassifier() \nmodel.fit(X_train,y_train)","d8c7dc0f":"y_predict = model.predict(X_test)","06ac48e0":"#  prediction Summary by species\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nLR_SC = accuracy_score(y_predict,y_test)\nprint('accuracy is',LR_SC)","bfdc4eb6":"rfc = XGBClassifier()","1759504f":"rfc.fit(X_train,y_train)\ny_predict = rfc.predict(X_test)\n#  prediction Summary by species\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nLR_SC = accuracy_score(y_predict,y_test)\nprint('accuracy is',LR_SC)","0738aef4":"test_new.head()","a1b39292":"final_pred = rfc.predict(test_new)","6468ecc8":"passId = test[['PassengerId']].values","8b05c70f":"submiss.head()","6642d0a8":"sub = {'PassengerId':passId.ravel(), 'Survived':final_pred}","c7ff0080":"submission_csv = pd.DataFrame(sub)","ef671694":"submission_csv.head(5)","76324d5d":"submission_csv.to_csv('final_titanic_xgb.csv',index = False)","a01dceb4":"As we can see more people survived from the first class. It suggests first class has greater chance survival"}}