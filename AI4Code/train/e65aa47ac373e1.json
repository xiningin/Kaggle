{"cell_type":{"39d8cfdc":"code","63a67628":"code","597c04fc":"code","e1145018":"code","e013190b":"code","d610784b":"code","439a1206":"code","4898558f":"code","bf7f9bf5":"code","c0e78a01":"code","06f99037":"code","6663dfaa":"code","5f8d0793":"code","1abd23fb":"code","1f504caf":"code","d6d2d75c":"code","fcdabaec":"code","ab948766":"code","cf587270":"code","aab2ba69":"code","08e6d3b0":"code","1b558f76":"code","49e70f43":"code","43d76106":"code","a74e18ec":"code","05e9ec79":"code","a04bf2d6":"code","8eaf892d":"code","cc4624cd":"code","14750b60":"code","8932923c":"code","ecf94df9":"code","71cc0b68":"code","11cd32f7":"code","c7749cf4":"code","7dfcd5d9":"code","11ec26f3":"code","b3cdc135":"code","d5ca2ff2":"code","c997621f":"code","e6d982fd":"code","6ce1e523":"code","2143c9b2":"code","41209313":"code","8ad5b2b5":"code","e546145c":"code","b3b3cdde":"code","e3a0f1ad":"code","46b6201f":"markdown","4695d0a5":"markdown","570f9d7b":"markdown","e35f3f31":"markdown","8362584f":"markdown","998fecf3":"markdown","9b7c294b":"markdown","82689ae3":"markdown","1de214bb":"markdown"},"source":{"39d8cfdc":"#import standard library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n%matplotlib inline","63a67628":"#read the data file\nprint(os.listdir(\"..\/input\"))\nhousing = pd.read_csv(\"..\/input\/housing.csv\")","597c04fc":"#Get in insight of Dataset\nhousing.head()\nhousing.info()","e1145018":"housing['ocean_proximity'].value_counts()","e013190b":"# Let's plot a histogram to get the feel of type of data we are dealing with\nhousing.hist(bins=30,figsize=(15,20))","d610784b":"# Try to find columns having corelation\ncorr_mat = housing.corr()\ncorr_mat['median_house_value'].sort_values(ascending = False)","439a1206":"#Try to visualize the 'Median Income' Features.\nhousing['median_income'].hist(bins=30)","4898558f":"housing['median_income'].value_counts()","bf7f9bf5":"# Try to create some Strata from 'Median income'\nhousing['income_cat'] = np.ceil(housing['median_income']\/1.5)\nhousing['income_cat'].value_counts()","c0e78a01":"housing['income_cat'].where(housing['income_cat']<5,5.0,inplace=True)\nhousing['income_cat'].value_counts()","06f99037":"housing['income_cat'].hist(bins=30)","6663dfaa":"# Stratified Sampling using Scikit-learn's StratifiedShuffleSplit Class\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1,test_size=0.1,random_state=42)\nfor train_index,test_index in split.split(housing,housing['income_cat']):\n    train_set = housing.loc[train_index]\n    test_set = housing.loc[test_index]","5f8d0793":"# Let\u2019s compare income category proportion in Stratified Sampling\ndef strata_compare(data):\n    return data['income_cat'].value_counts()\/len(data)","1abd23fb":"compare_props = pd.DataFrame({\n    \"Overall\": strata_compare(housing),\n    \"Train Stratified\": strata_compare(train_set),\n    \"Test Stratified\": strata_compare(test_set),\n   }).sort_index()\ncompare_props[\"Train Strat. %error\"] = 100 * compare_props[\"Train Stratified\"] \/ compare_props[\"Overall\"] - 100\ncompare_props[\"Test Strat. %error\"] = 100 * compare_props[\"Test Stratified\"] \/ compare_props[\"Overall\"] - 100\ncompare_props","1f504caf":"#Droping 'income_cat' columns\nfor set_ in (train_set,test_set):\n    set_.drop('income_cat',axis=1,inplace=True)","d6d2d75c":"df = train_set.copy()","fcdabaec":"df.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.1)","ab948766":"df.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n    s=df[\"population\"]\/100, label=\"population\", figsize=(10,7),\n    c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n    sharex=False)\nplt.legend()","cf587270":"df.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n             alpha=0.1)\nplt.axis([0, 16, 0, 550000])","aab2ba69":"# Experimenting with Attribute Combinations\n\ndf[\"rooms_per_household\"] = df[\"total_rooms\"]\/df[\"households\"]\ndf[\"bedrooms_per_room\"] = df[\"total_bedrooms\"]\/df[\"total_rooms\"]\ndf[\"population_per_household\"]=df[\"population\"]\/df[\"households\"]\n\ndf.head(20)","08e6d3b0":"cor_mat = df.corr()\ncor_mat['median_house_value'].sort_values(ascending=False)","1b558f76":"df.plot(kind=\"scatter\", x=\"rooms_per_household\", y=\"median_house_value\",\n             alpha=0.2)\nplt.axis([0, 5, 0, 520000])\nplt.show()","49e70f43":"df['bedrooms_per_room'].max()","43d76106":"# Let\u2019s revert to a clean training set\nhousing = train_set.drop(\"median_house_value\", axis=1) # drop labels for training set\nhousing_labels = train_set[\"median_house_value\"].copy()\nhousing_num = housing.drop('ocean_proximity', axis=1)\nhousing_cat = housing['ocean_proximity']","a74e18ec":"# Definition of the CategoricalEncoder class, copied from PR #9151.\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils import check_array\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy import sparse\n\nclass CategoricalEncoder(BaseEstimator, TransformerMixin):\n    \"\"\"Encode categorical features as a numeric array.\n    The input to this transformer should be a matrix of integers or strings,\n    denoting the values taken on by categorical (discrete) features.\n    The features can be encoded using a one-hot aka one-of-K scheme\n    (``encoding='onehot'``, the default) or converted to ordinal integers\n    (``encoding='ordinal'``).\n    This encoding is needed for feeding categorical data to many scikit-learn\n    estimators, notably linear models and SVMs with the standard kernels.\n    Read more in the :ref:`User Guide <preprocessing_categorical_features>`.\n    Parameters\n    ----------\n    encoding : str, 'onehot', 'onehot-dense' or 'ordinal'\n        The type of encoding to use (default is 'onehot'):\n        - 'onehot': encode the features using a one-hot aka one-of-K scheme\n          (or also called 'dummy' encoding). This creates a binary column for\n          each category and returns a sparse matrix.\n        - 'onehot-dense': the same as 'onehot' but returns a dense array\n          instead of a sparse matrix.\n        - 'ordinal': encode the features as ordinal integers. This results in\n          a single column of integers (0 to n_categories - 1) per feature.\n    categories : 'auto' or a list of lists\/arrays of values.\n        Categories (unique values) per feature:\n        - 'auto' : Determine categories automatically from the training data.\n        - list : ``categories[i]`` holds the categories expected in the ith\n          column. The passed categories are sorted before encoding the data\n          (used categories can be found in the ``categories_`` attribute).\n    dtype : number type, default np.float64\n        Desired dtype of output.\n    handle_unknown : 'error' (default) or 'ignore'\n        Whether to raise an error or ignore if a unknown categorical feature is\n        present during transform (default is to raise). When this is parameter\n        is set to 'ignore' and an unknown category is encountered during\n        transform, the resulting one-hot encoded columns for this feature\n        will be all zeros.\n        Ignoring unknown categories is not supported for\n        ``encoding='ordinal'``.\n    Attributes\n    ----------\n    categories_ : list of arrays\n        The categories of each feature determined during fitting. When\n        categories were specified manually, this holds the sorted categories\n        (in order corresponding with output of `transform`).\n    Examples\n    --------\n    Given a dataset with three features and two samples, we let the encoder\n    find the maximum value per feature and transform the data to a binary\n    one-hot encoding.\n    >>> from sklearn.preprocessing import CategoricalEncoder\n    >>> enc = CategoricalEncoder(handle_unknown='ignore')\n    >>> enc.fit([[0, 0, 3], [1, 1, 0], [0, 2, 1], [1, 0, 2]])\n    ... # doctest: +ELLIPSIS\n    CategoricalEncoder(categories='auto', dtype=<... 'numpy.float64'>,\n              encoding='onehot', handle_unknown='ignore')\n    >>> enc.transform([[0, 1, 1], [1, 0, 4]]).toarray()\n    array([[ 1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]])\n    See also\n    --------\n    sklearn.preprocessing.OneHotEncoder : performs a one-hot encoding of\n      integer ordinal features. The ``OneHotEncoder assumes`` that input\n      features take on values in the range ``[0, max(feature)]`` instead of\n      using the unique values.\n    sklearn.feature_extraction.DictVectorizer : performs a one-hot encoding of\n      dictionary items (also handles string-valued features).\n    sklearn.feature_extraction.FeatureHasher : performs an approximate one-hot\n      encoding of dictionary items or strings.\n    \"\"\"\n\n    def __init__(self, encoding='onehot', categories='auto', dtype=np.float64,\n                 handle_unknown='error'):\n        self.encoding = encoding\n        self.categories = categories\n        self.dtype = dtype\n        self.handle_unknown = handle_unknown\n\n    def fit(self, X, y=None):\n        \"\"\"Fit the CategoricalEncoder to X.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_feature]\n            The data to determine the categories of each feature.\n        Returns\n        -------\n        self\n        \"\"\"\n\n        if self.encoding not in ['onehot', 'onehot-dense', 'ordinal']:\n            template = (\"encoding should be either 'onehot', 'onehot-dense' \"\n                        \"or 'ordinal', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.handle_unknown not in ['error', 'ignore']:\n            template = (\"handle_unknown should be either 'error' or \"\n                        \"'ignore', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.encoding == 'ordinal' and self.handle_unknown == 'ignore':\n            raise ValueError(\"handle_unknown='ignore' is not supported for\"\n                             \" encoding='ordinal'\")\n\n        X = check_array(X, dtype=np.object, accept_sparse='csc', copy=True)\n        n_samples, n_features = X.shape\n\n        self._label_encoders_ = [LabelEncoder() for _ in range(n_features)]\n\n        for i in range(n_features):\n            le = self._label_encoders_[i]\n            Xi = X[:, i]\n            if self.categories == 'auto':\n                le.fit(Xi)\n            else:\n                valid_mask = np.in1d(Xi, self.categories[i])\n                if not np.all(valid_mask):\n                    if self.handle_unknown == 'error':\n                        diff = np.unique(Xi[~valid_mask])\n                        msg = (\"Found unknown categories {0} in column {1}\"\n                               \" during fit\".format(diff, i))\n                        raise ValueError(msg)\n                le.classes_ = np.array(np.sort(self.categories[i]))\n\n        self.categories_ = [le.classes_ for le in self._label_encoders_]\n\n        return self\n\n    def transform(self, X):\n        \"\"\"Transform X using one-hot encoding.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_features]\n            The data to encode.\n        Returns\n        -------\n        X_out : sparse matrix or a 2-d array\n            Transformed input.\n        \"\"\"\n        X = check_array(X, accept_sparse='csc', dtype=np.object, copy=True)\n        n_samples, n_features = X.shape\n        X_int = np.zeros_like(X, dtype=np.int)\n        X_mask = np.ones_like(X, dtype=np.bool)\n\n        for i in range(n_features):\n            valid_mask = np.in1d(X[:, i], self.categories_[i])\n\n            if not np.all(valid_mask):\n                if self.handle_unknown == 'error':\n                    diff = np.unique(X[~valid_mask, i])\n                    msg = (\"Found unknown categories {0} in column {1}\"\n                           \" during transform\".format(diff, i))\n                    raise ValueError(msg)\n                else:\n                    # Set the problematic rows to an acceptable value and\n                    # continue `The rows are marked `X_mask` and will be\n                    # removed later.\n                    X_mask[:, i] = valid_mask\n                    X[:, i][~valid_mask] = self.categories_[i][0]\n            X_int[:, i] = self._label_encoders_[i].transform(X[:, i])\n\n        if self.encoding == 'ordinal':\n            return X_int.astype(self.dtype, copy=False)\n\n        mask = X_mask.ravel()\n        n_values = [cats.shape[0] for cats in self.categories_]\n        n_values = np.array([0] + n_values)\n        indices = np.cumsum(n_values)\n\n        column_indices = (X_int + indices[:-1]).ravel()[mask]\n        row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),\n                                n_features)[mask]\n        data = np.ones(n_samples * n_features)[mask]\n\n        out = sparse.csc_matrix((data, (row_indices, column_indices)),\n                                shape=(n_samples, indices[-1]),\n                                dtype=self.dtype).tocsr()\n        if self.encoding == 'onehot-dense':\n            return out.toarray()\n        else:\n            return out","05e9ec79":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# column index\nrooms_ix, bedrooms_ix, population_ix, household_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y=None):\n        return self  # nothing else to do\n    def transform(self, X, y=None):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, household_ix]\n        population_per_household = X[:, population_ix] \/ X[:, household_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household,\n                         bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]","a04bf2d6":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# Create a class to select numerical or categorical columns \n# since Scikit-Learn doesn't handle DataFrames yet\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names].values","8eaf892d":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion","cc4624cd":"num_attribs = list(housing_num)\ncat_attribs = [\"ocean_proximity\"]\n\nnum_pipeline = Pipeline([\n        ('selector', DataFrameSelector(num_attribs)),\n        ('imputer', Imputer(strategy=\"median\")),\n        ('attribs_adder', CombinedAttributesAdder()),\n        ('std_scaler', StandardScaler()),\n    ])\n\ncat_pipeline = Pipeline([\n        ('selector', DataFrameSelector(cat_attribs)),\n        ('cat_encoder', CategoricalEncoder(encoding=\"onehot-dense\")),\n    ])","14750b60":"full_pipeline = FeatureUnion(transformer_list=[\n        (\"num_pipeline\", num_pipeline),\n        (\"cat_pipeline\", cat_pipeline),\n    ])","8932923c":"housing_prepared = full_pipeline.fit_transform(housing)\nprint(housing_prepared[0])","ecf94df9":"df.head(2)","71cc0b68":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(housing_prepared, housing_labels)","11cd32f7":"from sklearn.metrics import mean_squared_error\n\nhousing_predictions = lin_reg.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_labels, housing_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","c7749cf4":"# Train a model using Decision Tree\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(random_state=42)\ntree_reg.fit(housing_prepared, housing_labels)","7dfcd5d9":"# Calculate RMSE in Decision Tree model\n\nhousing_predictions = tree_reg.predict(housing_prepared)\ntree_mse = mean_squared_error(housing_labels, housing_predictions)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","11ec26f3":"\nfrom sklearn.model_selection import cross_val_score\n\ntree_reg = DecisionTreeRegressor(random_state=42)\nscores = cross_val_score(tree_reg, housing_prepared, housing_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)","b3cdc135":"tree_rmse_scores","d5ca2ff2":"#Look at the score of cross-validation\n\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\ndisplay_scores(tree_rmse_scores)","c997621f":"# Now compute the same score for Linear Regression\n\nlin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,\n                             scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","e6d982fd":"# Let's train one more model using Random Forests\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(random_state=42)\nforest_reg.fit(housing_prepared, housing_labels)","6ce1e523":"# Calculate RMSE in Random Forest model\n\nhousing_predictions = forest_reg.predict(housing_prepared)\nforest_mse = mean_squared_error(housing_labels, housing_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","2143c9b2":"# Cross Validation in Random Forest model\n\nfrom sklearn.model_selection import cross_val_score\n\nforest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels,\n                                scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","41209313":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n]\n\nforest_reg = RandomForestRegressor(random_state=42)\n# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error')\ngrid_search.fit(housing_prepared, housing_labels)","8ad5b2b5":"grid_search.best_params_","e546145c":"grid_search.best_estimator_","b3b3cdde":"final_model = grid_search.best_estimator_\n\nX_test = test_set.drop(\"median_house_value\", axis=1)\ny_test = test_set[\"median_house_value\"].copy()\n\nX_test_prepared = full_pipeline.transform(X_test)\nfinal_predictions = final_model.predict(X_test_prepared)\n\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)","e3a0f1ad":"final_rmse","46b6201f":"**Since it is limited to some limited values, so 'ocean_proximity' is categorical attributes.**","4695d0a5":"# Prepare the data for Machine Learning algorithms","570f9d7b":"**1. Missing value for 'total_bedrooms' 2. All attributes are numerical, except the ocean_proximity field**","e35f3f31":"**It seems that some of the features are capped. like : 'House Median Age','Median Income','Median House Value'**\n**Also Median Income Feature is having long tail.**","8362584f":"# Discover and visualize the data to gain insights","998fecf3":"# Evaluate model on the Test Set","9b7c294b":"**Median Income is most correlated feature. We can use Median Income Features for Stratified Split. But since it having long tail, we can try to create some starta from it**","82689ae3":"# Fine-tune the Model","1de214bb":"**Now it looks good, we can do splitting now.  Splitting is required now itself so that our model don't data snooping(i.e., looks all the data).\nWe are doing Stratified Sampling because we want to take records from each strata in same ratio as it was in original dataset.**"}}