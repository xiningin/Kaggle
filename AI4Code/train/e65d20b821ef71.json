{"cell_type":{"d2a4b85f":"code","355b1f88":"code","75ce1ff2":"code","3ff877bf":"code","9cca7ae9":"code","d55e81a1":"code","51d2bf64":"code","bc36a345":"code","0017c91d":"code","5909301b":"code","3fdc4f58":"code","06ca5498":"code","20abf022":"code","ff5fc403":"code","665c2da3":"code","c45dadf1":"code","8ca66549":"code","8e026b8d":"code","021a831a":"code","5bedbb33":"code","699b415b":"code","7c9da8ca":"markdown","4519541f":"markdown","b3a87d8f":"markdown","aff63180":"markdown","43d12ed0":"markdown","3f4c3960":"markdown","cacaef7c":"markdown","4501f3b1":"markdown","7f40b78d":"markdown","a9ade3e4":"markdown","867b6d53":"markdown","1f029674":"markdown","98364e95":"markdown","7c0f1b31":"markdown","6583bb37":"markdown","e1220015":"markdown","4df1d57d":"markdown","79504cc1":"markdown"},"source":{"d2a4b85f":"seed_value = 770\nimport os\nos.environ['PYTHONHASHSEED']=str(seed_value)\nimport random\nrandom.seed(seed_value)\nimport numpy as np\nnp.random.seed(seed_value)\nimport tensorflow as tf\ntf.random.set_seed(seed_value)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RidgeCV, LassoCV, ElasticNetCV\n%matplotlib inline\nimport sklearn.metrics as metrics\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.simplefilter(action='ignore', category=FutureWarning)","355b1f88":"df = pd.read_csv('..\/input\/nasa-airfoil-self-noise\/NASA_airfoil_self_noise.csv',sep = \",\", header = 0)\ndf.head()","75ce1ff2":"df.describe()","3ff877bf":"df.info()","9cca7ae9":"sns.set_palette(\"GnBu_d\")\nsns.set_style('whitegrid')\nplt.rcParams['figure.figsize'] = (7.0, 5.0)\nsns.pairplot(df,plot_kws={\"s\": 75}, height = 1.5)","d55e81a1":"plt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Correlation Plot\")\nsns.heatmap(df.corr(),cmap = 'viridis')","51d2bf64":"sns.jointplot(x='AngleAttack',y='SuctionSide',data=df,\n              joint_kws={\"s\": 200}, kind = \"scatter\" )","bc36a345":"X = df.drop(['Sound'], axis = 1)\ny = df['Sound']\nprint(\"Dependent Variables\")\ndisplay(X.head())\nprint(\"Independent Variable\")\ndisplay(y.to_frame().head())","0017c91d":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\nX_numeric = X._get_numeric_data()\nX_numeric = add_constant(X_numeric)\nVIF_frame = pd.Series([variance_inflation_factor(X_numeric.values, i) \n               for i in range(X_numeric.shape[1])], \n              index=X_numeric.columns).to_frame()\n\nVIF_frame.drop('const', axis = 0, inplace = True) \nVIF_frame.rename(columns={VIF_frame.columns[0]: 'VIF'},inplace = True)\nVIF_frame[~VIF_frame.isin([np.nan, np.inf, -np.inf]).any(1)]","5909301b":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size = 0.25, random_state=823)\nX_train_numeric = X_train._get_numeric_data()\nX_test_numeric = X_test._get_numeric_data()\nscaler = StandardScaler()\nX_train_numeric_scaled = pd.DataFrame(scaler.fit_transform(X_train_numeric), \n                                      index=X_train.index,\n                                      columns=X_train_numeric.columns)\nX_test_numeric_scaled = pd.DataFrame(scaler.transform(X_test_numeric), \n                                     index = X_test.index, \n                                     columns=X_test_numeric.columns)\nX_train.update(X_train_numeric_scaled)\nX_test.update(X_test_numeric_scaled)","3fdc4f58":"alpha = [1e-3, 1e-2, 1e-1, 1]\ncv = 10\nencv = ElasticNetCV(alphas = alpha, cv = cv, random_state = 1234)\nencv.fit(X_train,y_train)\ncoeff_df = pd.DataFrame(encv.coef_,X.columns,columns=['Coefficient'])\nintercept = pd.DataFrame(encv.intercept_,['Intercept'],['Coefficient'])\ncoeffs = pd.concat([coeff_df,intercept])\ncoeffs.round(3)","06ca5498":"preds_test_en = encv.predict(X_test)\npreds_train = encv.predict(X_train)\nprint(\"Sample Test Predictions: \" + str(preds_test_en[0:5]))\nprint(\"Sample Train Predictions: \" + str(preds_train[0:5]))","20abf022":"d1 = {'Test' : [metrics.mean_absolute_error(y_test, preds_test_en),\n                metrics.mean_squared_error(y_test, preds_test_en),\n                np.sqrt(metrics.mean_squared_error(y_test, preds_test_en))],\n     'Train' : [metrics.mean_absolute_error(y_train, preds_train),\n                metrics.mean_squared_error(y_train, preds_train),\n               np.sqrt(metrics.mean_squared_error(y_train, preds_train))]}\nm = pd.DataFrame(d1,['MAE','MSE','RMSE'])\nm.style.format(\"{:.4f}\")","ff5fc403":"# Our predictions\nplt.scatter(y_test,preds_test_en)\n# Perfect predictions\nplt.plot(y_test,y_test,'lime')\nplt.xlabel(\"Actual\", fontsize = 18)\nplt.ylabel(\"Predicted\", fontsize = 18)","665c2da3":"preds_test_en = pd.Series(preds_test_en.flatten().tolist())\nplt.rcParams['figure.figsize'] = (7.0, 5.0)\nplt.title(\"Error Distribution Plot\")\nsns.distplot(y_test-preds_test_en, bins = 20);","c45dadf1":"X_train2, X_val, y_train2, y_val = train_test_split(X_train, y_train, \n                                                    test_size = 0.30, random_state=823)","8ca66549":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# Initialization\nNN_model = Sequential()\n\n# Input Layer\nNN_model.add(Dense(5,activation='relu'))\n\n#Hidden Layer\/s\nNN_model.add(Dense(3,activation='relu'))\nNN_model.add(Dense(3,activation='relu'))\n\n# Output Layer:\nNN_model.add(Dense(1))\n\nearly_stop = EarlyStopping(monitor = 'val_loss', \n                           mode ='min', \n                           verbose = 1, \n                           patience = 20)\n\nNN_model.compile(optimizer = 'adam', loss = 'mse')\n\nNN_model.fit(x = X_train2.values, \n             y = y_train2.values,\n             validation_data = (X_val.values, y_val.values),\n             epochs = 1000,\n             callbacks=[early_stop])","8e026b8d":"NN_model.summary()","021a831a":"preds_test_nn = NN_model.predict(X_test)\n# Our predictions\nplt.scatter(y_test,preds_test_nn)\n# Perfect predictions\nplt.plot(y_test,y_test,'lime')\nplt.xlabel(\"Actual\", fontsize = 18)\nplt.ylabel(\"Predicted\", fontsize = 18)","5bedbb33":"preds_train = NN_model.predict(X_train)\nd1 = {'Test' : [metrics.mean_absolute_error(y_test, preds_test_nn),\n                metrics.mean_squared_error(y_test, preds_test_nn),\n                np.sqrt(metrics.mean_squared_error(y_test, preds_test_nn))],\n     'Train' : [metrics.mean_absolute_error(y_train, preds_train),\n                metrics.mean_squared_error(y_train, preds_train),\n               np.sqrt(metrics.mean_squared_error(y_train, preds_train))]}\nm = pd.DataFrame(d1,['MAE','MSE','RMSE'])\nm.style.format(\"{:.4f}\")","699b415b":"preds_test_en = preds_test_en.values.flatten().tolist()\npreds_test_nn = preds_test_nn.flatten().tolist()\nsns.distplot(y_test-preds_test_nn, bins = 20,color = 'green', hist = False, label = \"ANN\")\nsns.distplot(y_test-preds_test_en, bins = 20,color = 'yellow', hist = False, label = \"ElasticNetCV\")\nplt.legend(prop={'size': 12})","7c9da8ca":"### Exploratory Data Analysis","4519541f":"#### We can already see the data's simplicity. The goal is to predict the sound levels based on all the other variables.","b3a87d8f":"### Collinearity Verification using Variance Inflation Factor","aff63180":"#### Prior to creating the ANN, we split the train set into train and val. This is necessary because we need a validation set during training of the ANN","43d12ed0":"#### It is noticeable that AngleAttack and SuctionSide variables are correlated. We'll see later if their correlation is significant enough to affect the regression modelling","3f4c3960":"### Defining X&y","cacaef7c":"### ElasticNetCV - Training","4501f3b1":"### Splitting & Scaling","7f40b78d":"#### We can say that there is no VIF value that is high enough that can affect the regression modelling. Let's go ahead and move on to the next step","a9ade3e4":"### Notes on Evaluation","867b6d53":"We construct an ANN that has a very simple architecture. It has an input layer of 5 nodes representing the 5 features then we have 2 hidden layers with 3 neurons each and then of course an output layer with a single neuron.\n\nNote that it is possible to get significantly better results with better architectures","1f029674":"### *In this notebook intended for beginners, a simple implementation of ElasticNet for predicting airfoil self-noise is demonstrated. This is a good dataset for practicing regression modelling because of its simplicity. In the latter part, simple ANN is also implemented to try to see how it performs vs the ElasticNet.*","98364e95":"Evaluation metrics for regression problems:\n\n**Mean Absolute Error** (MAE) - mean of the absolute value of the errors:\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n**Mean Squared Error** (MSE)  - mean of the squared errors:\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n**Root Mean Squared Error** (RMSE) - square root of the mean of the squared errors:\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$","7c0f1b31":"### ElasticNetCV - Evaluation","6583bb37":"#### That's it! If you find this notebook helpful, please upvote :)","e1220015":" ### **Data & Libraries Import**\n #### Notice that a seed value is set because we want to be able to recreate the ANN results.","4df1d57d":"### ANN - Training","79504cc1":"#### For this dataset, you can notice that the ANN actually did a slightly better job in predicting. The MSE for ANN is only around 18 compared to the the 23ish MSEs of the ElasticNetCV model. This can be visualized through the actualvspredicted scatterplots of the 2 models (the actualvspredicted scatterplot of ANN is more densed towards the perfect line, indicating better fit) and the histogram (The yellow line represents the ElasticNetCV model and the green one is the ANN. We can notice that the ANN model (the green line) had more errors which lie closer to zero, indicating that it did a better job predicting)"}}