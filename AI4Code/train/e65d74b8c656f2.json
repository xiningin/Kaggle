{"cell_type":{"6959ea3f":"code","afeece45":"code","55a22e2e":"code","4c213645":"code","7e6efb00":"code","349210ab":"code","5e762f85":"code","55ebfdaa":"code","40369437":"code","3158dd17":"code","9469ddbd":"code","98a51541":"code","6236e4fa":"markdown","e543e7e8":"markdown","2367c191":"markdown","d371b0bc":"markdown","b358c7b9":"markdown","9b8e8baa":"markdown","d32bfef0":"markdown","ae9b7225":"markdown","bb97410c":"markdown","9578cd21":"markdown","a64fb48b":"markdown"},"source":{"6959ea3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","afeece45":"training_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ntraining_data.head()","55a22e2e":"X = training_data.select_dtypes(exclude='object')\nX = X.dropna()\n\ny = X.SalePrice\n\nX = X.drop(labels=\"SalePrice\", axis=1)\nX.describe()","4c213645":"ames_model = DecisionTreeRegressor(random_state=1)\names_model.fit(X.iloc[200:], y.iloc[200:])","7e6efb00":"print(\"Making predictions for the following 5 houses:\")\nprint(X.iloc[200:205])\nprint(\"The predictions are\")\nprint(ames_model.predict(X.iloc[200:205]))\nprint(\"Actual values:\")\nprint(y.iloc[200:205])","349210ab":"from sklearn.metrics import mean_absolute_error #As someone who's most experienced with C and java, this line physically hurts me\n\npredicted_home_prices = ames_model.predict(X.iloc[200:])\nmean_absolute_error(y.iloc[200:], predicted_home_prices)","5e762f85":"predicted_home_prices = ames_model.predict(X[:200])\nmean_absolute_error(y[:200], predicted_home_prices)","55ebfdaa":"from sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\names_model = DecisionTreeRegressor()\names_model.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = ames_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","40369437":"def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","3158dd17":"from sklearn.preprocessing.imputation import Imputer\n\n# make copy to avoid changing original data (when Imputing)\nnew_data = training_data.copy().select_dtypes(exclude='object')\n\n# make new columns indicating what will be imputed\ncols_with_missing = (col for col in new_data.columns \n                                 if new_data[col].isnull().any())\nfor col in cols_with_missing:\n    new_data[col + '_was_missing'] = new_data[col].isnull()\n\n# Imputation\nmy_imputer = Imputer()\nnew_data = pd.DataFrame(my_imputer.fit_transform(new_data))\n\nnew_y = new_data[40] # The imputer added two columns, I don't know why...\nnew_data = new_data.drop(labels=40,axis=1)\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","9469ddbd":"y = training_data.SalePrice\nX = training_data.drop(labels=\"SalePrice\", axis=1)\none_hot_encoded_training_predictors = pd.get_dummies(X)\nnew_data = one_hot_encoded_training_predictors.copy()\n\ncols_with_missing = (col for col in new_data.columns \n                                 if new_data[col].isnull().any())\nfor col in cols_with_missing:\n    new_data[col + '_was_missing'] = new_data[col].isnull()\nnew_data = pd.DataFrame(my_imputer.fit_transform(new_data))\n\ntrain_X, val_X, train_y, val_y = train_test_split(new_data, y, random_state = 0)\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","98a51541":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators=100, learning_rate=0.02)\nmy_model.fit(train_X, train_y, early_stopping_rounds=2, \n             eval_set=[(val_X, val_y)], verbose=False)\n\npredictions = my_model.predict(val_X)\n\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions, val_y)))","6236e4fa":"Hmm, still not good, let's try a different model.","e543e7e8":"With this, we see that having 50 maximum leaf nodes is the most accurate model. the max leaf nodes is called a 'hyperparameter', it's something that we can change to get a better fitted model. The value that the hyperparameters should be at is different for every dataset.\n\nWe'll come back to hyperparameters later. let's improve our data set now! First let's estimate those NaN values we dropped with a tool called imputation.","2367c191":"Hmm, that didn't do much.  Let's try including the text (catagorical) data.","d371b0bc":"This may seems just as bad, but now we know it's our model that's inaccurate, not that we've overfitted the model. So now let's make it better! Here's a copypasted way to compare changes to our model.","b358c7b9":"This notebook has most of the lessons found on KUC lesson <s>Copypasted<\/s> implemented. Do your best to improve the final result of this notebook. If you have any questions about what this notebook is doing, [please look at the lesson that covers it](http:\/\/https:\/\/www.kaggle.com\/learn\/machine-learning) or ask me. Let's start by loading our data:","9b8e8baa":"Now there we go! cut the error down to 30,000! n_estimators, learning_rate, and early_stopping_rounds are hyperparameters. play around with these values and see if you can improve the model! I got it down below 17,000, so that's your target!\n\nIf you want to try something more advanced, look through these tutorials :https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques#tutorials","d32bfef0":"Now that we have our data, we need to get it in a format we can use.\n\nFirst, we drop anything that isn't a number, such as text and NaN values.\n\nNext, we separate the variable we want to predict from the rest of our variables, then drop that column.\n\nOptionally, we can take a look at our statistics about the data we have left.","ae9b7225":"Heck, that's some tasty accuracy!\n\nNow, let's check the total error using Mean Absolute Error","bb97410c":"Now, we create our model.","9578cd21":"Oooooooowweeeeeeeee! perfect! except, that's probably not accurate. This model has been overfitted, and won't be accurate for any new observations. let's test this out using the 200 we left out of our first trial:","a64fb48b":"That's closer to what I would expect. while a model can be fitted to be (basially) perfectly accurate on the data you train them on, it's worthless on new data. We can 'avoid' this using the train-test split."}}