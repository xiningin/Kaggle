{"cell_type":{"44e8345f":"code","cc0c1cf5":"code","43796519":"code","bd5d9b90":"code","aeff9dcc":"code","d20fa672":"code","a02c8a10":"code","f9e2efb1":"code","7b2b368a":"code","d9c8911b":"code","0bb47835":"code","c7b10ee4":"code","78eff6d4":"code","bf02e36a":"code","f46fd27b":"code","85d3babc":"code","69707c3a":"code","660c21f4":"code","4e1273a1":"code","ea23b1a9":"code","c5d827a2":"code","b81eb019":"code","e8e75119":"code","292a0849":"code","5d32346c":"code","533a77e1":"code","5967e0fb":"markdown","9c84a66b":"markdown","687a0227":"markdown","5f792291":"markdown","1f1ec5e2":"markdown","f63c5423":"markdown","1007202e":"markdown","983d38ca":"markdown","fedd60db":"markdown","c5768c90":"markdown","22d6c1a1":"markdown","83841e8a":"markdown","7d526592":"markdown","09b24f8a":"markdown","29c7d35d":"markdown","7feae21c":"markdown","4d5efe23":"markdown","b79fd380":"markdown","423b2d98":"markdown"},"source":{"44e8345f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n# Loading the data in pandas dataframe\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest = test.merge(gender_submission,on='PassengerId')\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.info()\ntrain.head()","cc0c1cf5":"train.Cabin = train.Cabin.fillna('R')\ntrain.Cabin=train.Cabin.str.extract('([A-Z])', expand=False)\ntrain.Cabin.unique()\ntest.Cabin = test.Cabin.fillna('R')\ntest.Cabin=test.Cabin.str.extract('([A-Z])', expand=False)\ntest.Cabin.unique()","43796519":"train['Title'] = train.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntrain.Title.value_counts()\ntest['Title'] = test.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntrain.Title.isin(test.Title)\ntest.Title.value_counts()","bd5d9b90":"def data_clean(df):\n    df['Title'] = df.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n    #assign a value for missing titles\n    df['Title'] = df['Title'].fillna('NoTitle')\n    #Unify titles\n    df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n    new_y = df.Survived\n    new_X = df.drop(columns = ['Survived','Ticket','Name'])\n    new_X=new_X.set_index('PassengerId')\n    new_X.info()\n    \n    return new_X,new_y\nX_train,y_train = data_clean(train)\nprint(\"X_train - Info\")\nX_train.info()\nX_test,y_test = data_clean(test)\nprint(\"X_test - Info\")\nX_test.info()","aeff9dcc":"def categor_age_fare(df):\n    # fill missing values\n    df.Age=df.Age.fillna(df.Age.median())\n    #create bands for age\n    df.loc[ df['Age'] <= 16, 'Age'] = 0\n    df.loc[ (df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\n    df.loc[ (df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\n    df.loc[ (df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\n    df.loc[ df['Age'] > 64, 'Age'] = 4\n    df['Age'] = df['Age'].astype(int)\n\n    df.Fare=df.Fare.fillna(df.Age.median())\n    #create bands for fare\n    df.loc[ df['Fare'] <= 7.91, 'Fare'] = 0\n    df.loc[ (df['Fare'] > 7.91) & (df['Fare'] <= 14.454), 'Fare'] = 1\n    df.loc[ (df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare'] = 2\n    df.loc[ df['Fare'] > 31, 'Fare'] = 3\n    df.Fare = df.Fare.astype(int)\n    return df\n\nX_train = categor_age_fare(X_train)\nprint(\"X_train - Info\")\nX_train.info()\nX_test = categor_age_fare(X_test)\nprint(\"X_test - Info\")\nX_test.info()\nX= pd.concat([X_train,X_test])\ntrain['Agegrouped']=X_train.Age\ntrain['Faregrouped']=X_train.Fare\nX_train=X_train.drop(columns = ['Fare'])\nX_test=X_test.drop(columns = ['Fare'])","d20fa672":"categorical_feature_mask = X_train.dtypes==object\ncategorical_cols = X_train.columns[categorical_feature_mask].tolist()","a02c8a10":"train['LastName'] = train.Name.apply(lambda x:x.split(sep=',')[0])\nprint(str(train.LastName.value_counts().count())+\" unique Lastnames are there\\n\")","f9e2efb1":"from sklearn.preprocessing import LabelEncoder\n# instantiate labelencoder object\nle = LabelEncoder()\nX_train.Sex = le.fit_transform(X_train.Sex)\nX_test.Sex = le.fit_transform(X_test.Sex)\nX_train.Embarked = X_train.Embarked.fillna(X_train['Embarked'].value_counts().idxmax())\n#X_train.Embarked = le.fit_transform(X_train.Embarked)\nX_test.Embarked = X_test.Embarked.fillna(X_test['Embarked'].value_counts().idxmax())\n#X_test.Embarked = le.fit_transform(X_test.Embarked)\nX_train.Title = X_train.Title.fillna(X_train['Title'].value_counts().idxmax())\nX_train.Title = le.fit_transform(X_train.Title)\nX_test.Title = X_test.Title.fillna(X_test['Title'].value_counts().idxmax())\nX_test.Title = le.fit_transform(X_test.Title)\n#X_train.Cabin = X_train.Cabin.fillna(X_train['Cabin'].value_counts().idxmax())\n#X_train.Cabin = le.fit_transform(X_train.Cabin)\n#X_test.Cabin = X_test.Cabin.fillna(X_test['Cabin'].value_counts().idxmax())\n#X_test.Cabin = le.fit_transform(X_test.Cabin)","7b2b368a":"#Processing feature: 'Pclass','Age','Embarked','Cabin','Title'\n#splitting each feature into new binary features \n\ndef dummy_data(data, columns):\n    for column in columns:\n        data = pd.concat([data, pd.get_dummies(data[column], prefix=column)], axis=1)\n        data = data.drop(column, axis=1)\n    return data\n\n\ndummy_columns = [\"Pclass\",'Age','Embarked','Cabin','Title']\nX_ohe_train=dummy_data(X_train, dummy_columns)\ndisplay(X_ohe_train.head())\nX_ohe_test = dummy_data(X_test, dummy_columns)\nX_ohe_test.insert(X_ohe_train.columns.get_loc(\"Cabin_T\"),\"Cabin_T\",0)\ndisplay(X_ohe_test.iloc[:,11:14])","d9c8911b":"from sklearn.preprocessing import MinMaxScaler\nmin_max=MinMaxScaler(feature_range=(0, 1))\n# To scale data \nX_train_minmax = X_ohe_train\nX_test_minmax = X_ohe_test\nX_train_minmax.iloc[:,1:3]=min_max.fit_transform(X_train_minmax.iloc[:,1:3])\nX_test_minmax.iloc[:,1:3]=min_max.fit_transform(X_test_minmax.iloc[:,1:3])","0bb47835":"# of people survived grouped by sex\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_sex = train.groupby('Sex').sum().Survived.to_frame()\ngroupby_sex['Total'] = train.groupby('Sex').count().Survived\ngroupby_sex.plot.bar()\nplt.show()","c7b10ee4":"# of people survived grouped by age\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_age = train.groupby('Agegrouped').sum().Survived.to_frame()\ngroupby_age['Total'] = train.groupby('Agegrouped').count().Survived\ngroupby_age.index = groupby_age.index.map({0:'0 - 16',1:'16 - 32',2:'32 - 48',3:'48 - 64',4:'64+'})\ngroupby_age.plot.bar()\nplt.xlabel('Age Range')\nplt.ylabel('Count')\nplt.show()","78eff6d4":"# of people survived grouped by age\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_title = train.groupby('Title').sum().Survived.to_frame()\ngroupby_title['Total'] = train.groupby('Title').count().Survived\ngroupby_title.plot.bar()\nplt.ylabel('Count')\nplt.show()","bf02e36a":"# of people survived grouped by age\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_age = train.groupby('Faregrouped').sum().Survived.to_frame()\ngroupby_age['Total'] = train.groupby('Faregrouped').count().Survived\ngroupby_age.index = groupby_age.index.map({0:'0 - 7.91',1:'7.91 - 14.54',2:'14.54 - 31',3:'>31'})\ngroupby_age.plot.bar()\nplt.xlabel('Fare Range')\nplt.ylabel('Count')\nplt.show()","f46fd27b":"# of people survived grouped by sex\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_embarked = train.groupby('Embarked').sum().Survived.to_frame()\ngroupby_embarked['Total'] = train.groupby('Embarked').count().Survived\ngroupby_embarked.plot.bar()\nplt.show()","85d3babc":"# of people survived grouped by sex\nprint(\"percentage of people survived :\",round(y_train.sum()\/y_train.count(),2)*100)\ngroupby_cabin = train.groupby('Cabin').sum().Survived.to_frame()\ngroupby_cabin['Total'] = train.groupby('Cabin').count().Survived\ngroupby_cabin\ngroupby_cabin.plot.bar()\nplt.show()","69707c3a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlr = LogisticRegression()\n#X_train = MinMaxScaler().fit_transform(X_train)\nlr.fit(X_train_minmax,y_train)\ny_pred = lr.predict(X_test_minmax)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",lr.score(X_test_minmax, y_test))","660c21f4":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train_minmax,y_train)\n\ny_pred=clf.predict(X_test_minmax)","4e1273a1":"y_test","ea23b1a9":"from sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import roc_auc_score\n# Model Accuracy, how often is the classifier correct?\nAccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\",Accuracy)\nroc_score = roc_auc_score(y_test, y_pred)\nprint(\"ROC_AUC_SCORE : \",roc_score)\nCM = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix : \\n\",CM)\nreport = classification_report(y_test, y_pred)\nprint(\"Classification Report :\\n\",report)","c5d827a2":"NotMatchingrows = X_test_minmax.copy()\nNotMatchingrows['y_test'] = y_test.values\nNotMatchingrows['y_pred'] = y_pred\nNotMatchingrows = NotMatchingrows[NotMatchingrows.y_pred != NotMatchingrows.y_test]","b81eb019":"NotMatchingrows","e8e75119":"#Dependencies\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n# Neural network\nmodel = Sequential()\nmodel.add(Dense(20, activation='relu',input_shape=(X_train_minmax.shape[1],)))\nmodel.add(Dense(16, activation='softmax'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(8, activation='softmax'))\nmodel.add(Dense(4, activation='softmax'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n#compiling the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['acc'])\n\nfrom keras.callbacks import EarlyStopping\n#set early stopping monitor so the model stops training when it won't improve anymore\nearly_stopping_monitor = EarlyStopping(patience=3)\n\n#train model\nmodel.fit(X_train_minmax, y_train, validation_split=0.4, epochs=100, callbacks=[early_stopping_monitor])","292a0849":"y_pred = (model.predict(X_test_minmax)>=0.5).astype('int64')\naccuracy = model.evaluate(X_test_minmax,y_test,verbose = 0)[1]\nprint(\"Accuracy score of the neural network is :\",accuracy)","5d32346c":"from sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import roc_auc_score\n# Model Accuracy, how often is the classifier correct?\nAccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\",Accuracy)\nroc_score = roc_auc_score(y_test, y_pred)\nprint(\"ROC_AUC_SCORE : \",roc_score)\nCM = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix : \\n\",CM)\nreport = classification_report(y_test, y_pred,output_dict=True)\nprint(\"Classification Report :\\n\",report)","533a77e1":"final_results = pd.DataFrame(y_pred, columns = ['Survived'])\nfinal_results['PassengerId'] = gender_submission.PassengerId\nfinal_results=final_results.set_index('PassengerId')\nfinal_results.to_csv('FinalResults-'+str(round(accuracy,2))+'-'+str(CM[0][1])+','+str(CM[1][0])+'.csv')\nprint(\"Output CSV file has been saved \"+'FinalResults-'+str(round(accuracy,2))+'-'+str(CM[0][1])+','+str(CM[1][0])+'.csv')","5967e0fb":"# Generate LastName column from Name by using the separator ','","9c84a66b":"# Encoding the categorical values with one hot encoder","687a0227":"# Filter categorical columns using mask and turn it into a list","5f792291":"# Categorizing the Age and Fare columns\n# Filling the missing values","1f1ec5e2":"# Lets visualize the the data grouped by Title","f63c5423":"# Import labelencoder to encode categorical values","1007202e":"> This is my First Competition in Kaggle!!!\n> Looking forward to learn a lot\n# Import necessary libraries and load the data","983d38ca":"# Feature scaling needs to be done for continuous columns","fedd60db":"# Lets visualize the the data grouped by Age","c5768c90":"# Find accuracy of each model","22d6c1a1":"# Lets visualize the the data grouped by Sex","83841e8a":"> From the above visualization, we can see that the people who have boarded at cherbourg have high probability to survive than others.","7d526592":"# Analysing the data in each column","09b24f8a":"> 667 uniques Lastnames are huge and we can use that as a feature in our classification models","29c7d35d":"# Random Forest Classifier","7feae21c":"# Linear Regression","4d5efe23":"> From the above visualization, we can understand that '**Mrs**' have survived a lot than '**Miss**'.\n> So it conveys that the married women have more probability to survive than unmarrieds.","b79fd380":"# Neural Network using tensorflow","423b2d98":"# Generating the final results and saving it in a CSV file"}}