{"cell_type":{"65cfbc98":"code","d0f25915":"code","f5db2ba9":"code","4a34cc40":"code","7ab12bdb":"code","96c8922d":"code","7a390ff0":"code","a8057ca0":"code","cd2c6211":"code","d8c61298":"code","070fd323":"code","c7160274":"markdown","68508e1e":"markdown","94b4c563":"markdown","5a5e1f40":"markdown","edded5e0":"markdown","116e9fc0":"markdown","66ee04b7":"markdown","45ff107d":"markdown"},"source":{"65cfbc98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport random\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport xml.etree.ElementTree as ET\n\nimport torch \nimport torchvision\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0f25915":"img_base_path = \"..\/input\/all-dogs\/all-dogs\"\n# Files\nimages = os.listdir(img_base_path)\nprint(\"Number of Images: \", len(images))","f5db2ba9":"# choose 16 random images to display\nimages_to_display = random.choices(images, k=64)\n\nfig = plt.figure(figsize=(25, 16))\nfor ii, img in enumerate(images_to_display):\n    ax = fig.add_subplot(8, 8, ii + 1, xticks=[], yticks=[])\n    \n    img = Image.open(os.path.join(img_base_path, img))\n    plt.imshow(img)","4a34cc40":"images_to_display[18]","7ab12bdb":"!cat ..\/input\/annotation\/Annotation\/n02091244-Ibizan_hound\/n02091244_2934","96c8922d":"# choose image\nimage_name = 'n02105641_169.jpg'\n\n# read image\nimg = Image.open(os.path.join(img_base_path, image_name))\n\n# display image\nfig = plt.figure(figsize=(8, 12))\nplt.imshow(img)","7a390ff0":"# finding annotation of this particular image\n# image_name == dogBreed_number\n\nannotation_folders = os.listdir('..\/input\/annotation\/Annotation')\nbreed_folder = [x for x in annotation_folders if image_name.split('_')[0] in x]\nassert len(breed_folder) == 1, \"Multiple Folders Found\"\n\nbreed_folder = breed_folder[0]\nprint(\"Image Folder: \", breed_folder)\nannotation_path = os.path.join('..\/input\/annotation\/Annotation', breed_folder, image_name[:-4])\nprint(\"Annotation Path: \", annotation_path)","a8057ca0":"# View annotations\n!cat ..\/input\/annotation\/Annotation\/n02105641-Old_English_sheepdog\/n02105641_169","cd2c6211":"### Getting Bounding Box of dog (ROI) in Image\ntree = ET.parse(annotation_path)\nroot = tree.getroot()\nobjects = root.findall('object')\nfor obj in objects:\n    bndbox = obj.find('bndbox')\n    xmin = int(bndbox.find('xmin').text)\n    ymin = int(bndbox.find('ymin').text)\n    xmax = int(bndbox.find('xmax').text)\n    ymax = int(bndbox.find('ymax').text)\nbbox = (xmin, ymin, xmax, ymax)\nprint(\"Bounding Box: \", bbox)\n\n# crop image\nimg = img.crop(bbox)\n\n# display crop image\nfig = plt.figure(figsize=(8, 12))\nplt.imshow(img)","d8c61298":"# This loader will use the underlying loader plus crop the image based on the annotation\nfrom torchvision import transforms, datasets\nfrom torch.utils.data import DataLoader, Dataset\n\nannotation_folders = os.listdir('..\/input\/annotation\/Annotation')\ndef ImageLoader(path):\n    img = datasets.folder.default_loader(path) # default loader\n    # Get bounding box\n    breed_folder = [x for x in annotation_folders if path.split('\/')[-1].split('_')[0] in x][0]\n    annotation_path = os.path.join('..\/input\/annotation\/Annotation', breed_folder, path.split('\/')[-1][:-4])\n\n    tree = ET.parse(annotation_path)\n    root = tree.getroot()\n    objects = root.findall('object')\n    for obj in objects:\n        bndbox = obj.find('bndbox')\n        xmin = int(bndbox.find('xmin').text)\n        ymin = int(bndbox.find('ymin').text)\n        xmax = int(bndbox.find('xmax').text)\n        ymax = int(bndbox.find('ymax').text)\n    bbox = (xmin, ymin, xmax, ymax)\n    \n    # return cropped image\n    img = img.crop(bbox)\n    img = img.resize((64, 64), Image.ANTIALIAS)\n    return img\n\n\n\n# Data Pre-procesing and Augmentation (Experiment on your own)\nrandom_transforms = [transforms.ColorJitter(), transforms.RandomRotation(degrees=20)]\n\ntransform = transforms.Compose([\n                                transforms.CenterCrop(64),\n                                transforms.RandomHorizontalFlip(p=0.5),\n                                transforms.RandomApply(random_transforms, p=0.3),\n                                transforms.ToTensor(),\n                                transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n\n# The dataset (example)\ndataset = torchvision.datasets.ImageFolder(\n    '..\/input\/all-dogs\/',\n    loader=ImageLoader, # THE CUSTOM LOADER\n    transform=transform\n)","070fd323":"_, axes = plt.subplots(figsize=(32, 32), ncols=8, nrows=8)\nfor i, ax in enumerate(axes.flatten()):\n    ax.imshow(dataset[i][0].permute(1, 2, 0).detach().numpy())\nplt.show()","c7160274":"#### Noise(extra features) can be observed in image. These will lead to poor generation as model will get confused what to produce","68508e1e":"### Using annotations to crop ROI","94b4c563":"#### Try commenting crop line from above code to see the difference.\n#### Also code is considering only one dog per image.\n#### Like if it helps you :)","5a5e1f40":"# View Samples from Data","edded5e0":"### Annotations\n#### The structure of the annotations are classic XML with the bbox at \"annotation\/object\/bndbox\".\nStructure of XML is as follows","116e9fc0":"##### Try re running above cell again and again to view more samples. \n#### It can be observed that images contains significant backgrounds(Noise in our case). Some images contains trees, persons, objects and even some have multiple dogs in them too. This could create problem while training our model.\nWe have given annotations for all images, which can be used to pre-process(crop) these images ","66ee04b7":"# Loading Data\n### Creating PyTorch DataLoader with Data Augmentation\n#### Data Augmentation help in training model better. Its like increasing size of your Dataset and prevents overfitting. ","45ff107d":"### Crops will give be having only dogs in them, so model will be able to learn better and easier.\n### A point to remember is that images may contain more than one dogs in which case annotations will have more than one bounding boxes in them (image: 'n02088364_3752.jpg'). \nTry \"!cat ..\/input\/annotation\/Annotation\/n02088364-beagle\/n02088364_3752\""}}