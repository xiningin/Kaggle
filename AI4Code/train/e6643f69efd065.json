{"cell_type":{"d812d2f3":"code","5f806265":"code","fc7d2108":"code","af737203":"code","54a88f3a":"code","4bf9fb73":"code","fb500fb5":"code","af0e8491":"code","4df57e57":"code","10e70232":"code","837ae901":"code","b94094ba":"code","f0d2e6c4":"code","d8404122":"code","df7fd2b2":"code","587a5c66":"code","531ae226":"code","2eb3687c":"code","10d4b45f":"code","e6ca61c5":"code","3f19bd04":"code","e4112f26":"code","3925985d":"code","fdc73772":"code","ca45dd08":"code","2b54a132":"markdown","22dc8510":"markdown","69b51a3d":"markdown","12d7c248":"markdown","3ada1e96":"markdown","d9ebf725":"markdown","550faa47":"markdown","0664c800":"markdown","78d18a49":"markdown","841617fc":"markdown","fbf0ae6f":"markdown"},"source":{"d812d2f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f806265":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","fc7d2108":"df = pd.read_csv('..\/input\/eshop-clothing-dataset\/e-shop clothing 2008.csv', delimiter=',')\ndf.head()","af737203":"df.info()","54a88f3a":"df.isnull().sum()","4bf9fb73":"df['price 2'].value_counts()","fb500fb5":"from sklearn.preprocessing import LabelEncoder","af0e8491":"df['page 2 (clothing model)'] = LabelEncoder().fit_transform(df['page 2 (clothing model)'])\ndf.head()","4df57e57":"week = list()\nfor i in df.day:\n    if i <= 7:\n        week.append(1) #minggu pertama\n    elif i <= 14:\n        week.append(2) #minggu kedua\n    elif i <= 21:\n        week.append(3) #minggu ketiga\n    elif i <= 31:\n        week.append(4) #minggu keempat\ndf['week'] = week\ndf.head()","10e70232":"df.drop(columns=['year', 'session ID', 'day'], inplace=True)\ndf.head()","837ae901":"from sklearn.model_selection import train_test_split","b94094ba":"X = df.drop(columns=['price'])\ny = df.price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","f0d2e6c4":"from sklearn.model_selection import cross_val_score","d8404122":"from sklearn.ensemble import RandomForestRegressor","df7fd2b2":"cv = cross_val_score(RandomForestRegressor(), X_train, y_train, cv=5, scoring='neg_root_mean_squared_error')\nprint('rmse : ', cv.mean())","587a5c66":"from sklearn.neighbors import KNeighborsRegressor","531ae226":"cv = cross_val_score(KNeighborsRegressor(), X_train, y_train, cv=5, scoring='neg_root_mean_squared_error')\nprint('rmse : ', cv.mean())","2eb3687c":"from sklearn.naive_bayes import GaussianNB","10d4b45f":"cv = cross_val_score(GaussianNB(), X_train, y_train, cv=5, scoring='neg_root_mean_squared_error')\nprint('rmse : ', cv.mean())","e6ca61c5":"from sklearn.metrics import mean_squared_error","3f19bd04":"fe = RandomForestRegressor()\nfe.fit(X_train, y_train)\nprint('rmse : ', mean_squared_error(y_test, fe.predict(X_test)))","e4112f26":"sorted_idx = fe.feature_importances_.argsort()\nplt.barh(X_train.columns[sorted_idx], fe.feature_importances_[sorted_idx])\nplt.xlabel(\"Random Forest Feature Importance\")","3925985d":"X_train_2 = X_train.loc[:, ['page 1 (main category)', 'page 2 (clothing model)', 'price 2']]\n\nX_test_2 = X_test.loc[:, ['page 1 (main category)', 'page 2 (clothing model)', 'price 2']]","fdc73772":"cv = cross_val_score(RandomForestRegressor(), X_train.loc[:, ['page 1 (main category)', 'page 2 (clothing model)', 'price 2']], y_train, cv=5, scoring='neg_root_mean_squared_error')\nprint('rmse : ', cv.mean())","ca45dd08":"model = RandomForestRegressor()\nmodel.fit(X_train_2, y_train)\ny_pred = model.predict(X_test_2)\nprint('rmse: ', mean_squared_error(y_pred, y_test))","2b54a132":"# Load Data","22dc8510":"### Random Forest","69b51a3d":"### Naive Bayes","12d7c248":"### KNN","3ada1e96":"# Feature Importance","d9ebf725":"# Final training & evaluasi","550faa47":"# Fitur kategorik","0664c800":"# Ubah fitur day menjadi week","78d18a49":"# Hapus fitur yang tidak relevan","841617fc":"# Split data","fbf0ae6f":"# Model selection"}}