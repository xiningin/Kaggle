{"cell_type":{"42b5fe5b":"code","5561e5a4":"code","a46b8474":"code","12effe90":"code","45e27b1b":"code","8f37b962":"code","8c715557":"code","e37f7f67":"code","503ed0df":"code","b5f8c275":"code","cd4649e0":"code","6870c479":"code","59873505":"code","ee24298a":"code","82ebb7f0":"code","7d25839d":"code","780fe1d4":"code","8b08c458":"code","03395e01":"code","2056e311":"code","5533cc3e":"code","869b90d5":"code","cdf01b5f":"code","c94f396a":"code","502a8388":"code","3459cae3":"code","792061d4":"code","bb134cf5":"code","33940c68":"code","52dbdfca":"code","bb33e90c":"code","0d0fbbc6":"code","321f2081":"code","000a4147":"code","2575fd66":"code","1c5ea235":"code","0584081b":"code","b8d97ebb":"code","77cd457a":"code","c26e73ab":"code","6f3c90c4":"code","8a96f14c":"code","273fdcbb":"code","2fc935a9":"code","0259ecf7":"code","111e74eb":"code","aa7881fd":"code","e733e628":"code","456db581":"code","f2e5f428":"code","0e9f85d9":"code","25ab78a1":"code","164b13bc":"markdown","1e2163a2":"markdown","5fdccd97":"markdown","408c47a3":"markdown","b2b2b860":"markdown","8f3d97d9":"markdown","547a8be4":"markdown","d4d6ae73":"markdown","17808637":"markdown"},"source":{"42b5fe5b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as ex","5561e5a4":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","a46b8474":"df.shape","12effe90":"df.head()","45e27b1b":"df.info()","8f37b962":"df.describe().T","8c715557":"import matplotlib as mpl\nmpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=[\"c\", \"r\", \"b\"])","e37f7f67":"target_count = df['target'].value_counts()\ndiseased = target_count[0]\nnon_diseased = target_count[1]\nlabels = ['Not Diseased', 'Diseased']\nsizes = [diseased, non_diseased]\nexplode = (0, 0.1)\nfig, ax = plt.subplots()\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nplt.show()","503ed0df":"fig, ax = plt.subplots(5,3, figsize=(15,19))\nsns.boxplot(data=df, y='age', x='target', ax=ax[0,0])\nsns.countplot(df['sex'], hue=df['target'], ax=ax[0,1])\nsns.countplot(df['cp'], hue=df['target'], ax=ax[0,2])\nsns.boxplot(data=df, y='trestbps', x='target', ax=ax[1,0])\nsns.boxplot(data=df, y='chol', x='target', ax=ax[1,1])\nsns.countplot(df['fbs'], hue=df['target'], ax=ax[1,2])\nsns.countplot(df['restecg'], hue=df['target'], ax=ax[2,0])\nsns.boxplot(data=df, y='thalach', x='target', ax=ax[2,1])\nsns.countplot(df['exang'], hue=df['target'], ax=ax[2,2])\nsns.boxplot(data=df, y='oldpeak', x='target', ax=ax[3,0])\nsns.countplot(df['slope'], hue=df['target'], ax=ax[3,1])\nsns.countplot(df['ca'], hue=df['target'], ax=ax[3,2])\nsns.countplot(df['thal'], hue=df['target'], ax=ax[4,0])\nfig.delaxes(ax[4,1])\nfig.delaxes(ax[4,2])","b5f8c275":"corr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n#cmap = sns.diverging_palette(230, 20, as_cmap=True)\nfig, ax = plt.subplots(figsize=(11,11))\nsns.heatmap(corr, mask=mask, center=0,\n            square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\": .5})","cd4649e0":"target_corr = corr['target'].drop(['target'], axis=0).sort_values(ascending=False)","6870c479":"ax = target_corr.plot(kind='bar', title=\"Correlation to Disease\", figsize=(12,9), fontsize=12, color='b')","59873505":"df1=df","ee24298a":"df1['gender'] = df1.groupby(['sex', 'target'])['target'].transform('count')","82ebb7f0":"male_no = df1.query('sex==0 & target==0')['gender'].unique()[0]\nmale_yes = df1.query('sex==0 & target==1')['gender'].unique()[0]\nfemale_no = df1.query('sex==1 & target==0')['gender'].unique()[0]\nfemale_yes = df1.query('sex==1 & target==1')['gender'].unique()[0]","7d25839d":"labels = ['Not Diseased', 'Diseased']\nsizes_m = [male_no, male_yes]\nsizes_f = [female_no, female_yes]\nfig, (ax1, ax2) = plt.subplots(1,2, figsize =(10,5))\nax1.pie(sizes_m, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_f, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('Male')\nax2.title.set_text('Female')","780fe1d4":"df1['chest_pain'] = df1.groupby(['cp', 'target'])['target'].transform('count')","8b08c458":"cp0_no = df1.query('cp==0 & target==0')['chest_pain'].unique()[0]\ncp0_yes = df1.query('cp==0 & target==1')['chest_pain'].unique()[0]\ncp1_no = df1.query('cp==1 & target==0')['chest_pain'].unique()[0]\ncp1_yes = df1.query('cp==1 & target==1')['chest_pain'].unique()[0]\ncp2_no = df1.query('cp==2 & target==0')['chest_pain'].unique()[0]\ncp2_yes = df1.query('cp==2 & target==1')['chest_pain'].unique()[0]\ncp3_no = df1.query('cp==3 & target==0')['chest_pain'].unique()[0]\ncp3_yes = df1.query('cp==3 & target==1')['chest_pain'].unique()[0]","03395e01":"labels = ['Not Diseased', 'Diseased']\nsizes_cp0 = [cp0_no, cp0_yes]\nsizes_cp1 = [cp1_no, cp1_yes]\nsizes_cp2 = [cp2_no, cp2_yes]\nsizes_cp3 = [cp3_no, cp3_yes]\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize =(17,6))\nax1.pie(sizes_cp0, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_cp1, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax3.pie(sizes_cp2, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax4.pie(sizes_cp3, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('CP = 0')\nax2.title.set_text('CP = 1')\nax3.title.set_text('CP = 2')\nax4.title.set_text('CP = 3')","2056e311":"df1['ex'] = df1.groupby(['exang', 'target'])['target'].transform('count')","5533cc3e":"ex0_no = df1.query('exang==0 & target==0')['ex'].unique()[0]\nex0_yes = df1.query('exang==0 & target==1')['ex'].unique()[0]\nex1_no = df1.query('exang==1 & target==0')['ex'].unique()[0]\nex1_yes = df1.query('exang==1 & target==1')['ex'].unique()[0]","869b90d5":"labels = ['Not Diseased', 'Diseased']\nsizes_ex0 = [ex0_no, ex0_yes]\nsizes_ex1 = [ex1_no, ex1_yes]\nfig, (ax1, ax2) = plt.subplots(1,2, figsize =(10,5))\nax1.pie(sizes_ex0, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_ex1, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('Exang = 0')\nax2.title.set_text('Exang = 1')","cdf01b5f":"df1['cg'] = df1.groupby(['restecg', 'target'])['target'].transform('count')","c94f396a":"cg0_no = df1.query('restecg==0 & target==0')['cg'].unique()[0]\ncg0_yes = df1.query('restecg==0 & target==1')['cg'].unique()[0]\ncg1_no = df1.query('restecg==1 & target==0')['cg'].unique()[0]\ncg1_yes = df1.query('restecg==1 & target==1')['cg'].unique()[0]\ncg2_no = df1.query('restecg==2 & target==0')['cg'].unique()[0]\ncg2_yes = df1.query('restecg==2 & target==1')['cg'].unique()[0]","502a8388":"labels = ['Not Diseased', 'Diseased']\nsizes_cg0 = [cg0_no, cg0_yes]\nsizes_cg1 = [cg1_no, cg1_yes]\nsizes_cg2 = [cg2_no, cg2_yes]\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize =(15,5))\nax1.pie(sizes_cg0, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_cg1, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax3.pie(sizes_cg2, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('Restecg = 0')\nax2.title.set_text('Restecg = 1')\nax3.title.set_text('Restecg = 2')","3459cae3":"df1['sl'] = df1.groupby(['slope', 'target'])['target'].transform('count')","792061d4":"sl0_no = df1.query('slope==0 & target==0')['sl'].unique()[0]\nsl0_yes = df1.query('slope==0 & target==1')['sl'].unique()[0]\nsl1_no = df1.query('slope==1 & target==0')['sl'].unique()[0]\nsl1_yes = df1.query('slope==1 & target==1')['sl'].unique()[0]\nsl2_no = df1.query('slope==2 & target==0')['sl'].unique()[0]\nsl2_yes = df1.query('slope==2 & target==1')['sl'].unique()[0]","bb134cf5":"labels = ['Not Diseased', 'Diseased']\nsizes_sl0 = [sl0_no, sl0_yes]\nsizes_sl1 = [sl1_no, sl1_yes]\nsizes_sl2 = [sl2_no, sl2_yes]\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize =(15,5))\nax1.pie(sizes_sl0, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_sl1, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax3.pie(sizes_sl2, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('Slope = 0')\nax2.title.set_text('Slope = 1')\nax3.title.set_text('Slope = 2')","33940c68":"df1['th'] = df1.groupby(['thal', 'target'])['target'].transform('count')","52dbdfca":"th0_no = df1.query('thal==0 & target==0')['th'].unique()[0]\nth0_yes = df1.query('thal==0 & target==1')['th'].unique()[0]\nth1_no = df1.query('thal==1 & target==0')['th'].unique()[0]\nth1_yes = df1.query('thal==1 & target==1')['th'].unique()[0]\nth2_no = df1.query('thal==2 & target==0')['th'].unique()[0]\nth2_yes = df1.query('thal==2 & target==1')['th'].unique()[0]\nth3_no = df1.query('thal==3 & target==0')['th'].unique()[0]\nth3_yes = df1.query('thal==3 & target==1')['th'].unique()[0]","bb33e90c":"labels = ['Not Diseased', 'Diseased']\nsizes_th0 = [th0_no, th0_yes]\nsizes_th1 = [th1_no, th1_yes]\nsizes_th2 = [th2_no, th2_yes]\nsizes_th3 = [th3_no, th3_yes]\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1,4, figsize =(17,6))\nax1.pie(sizes_th0, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax2.pie(sizes_th1, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax3.pie(sizes_th2, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax4.pie(sizes_th3, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax1.title.set_text('Thal = 0')\nax2.title.set_text('Thal = 1')\nax3.title.set_text('Thal = 2')\nax4.title.set_text('Thal = 3')","0d0fbbc6":"df5 = df1.drop(['chest_pain', 'ex', 'cg', 'sl', 'th'], axis=1)","321f2081":"df5.info()","000a4147":"df5 = pd.concat([df5, pd.get_dummies(df5['cp'], prefix='chest')], axis=1)\ndf5 = pd.concat([df5, pd.get_dummies(df5['restecg'], prefix='rcg')], axis=1)\ndf5 = pd.concat([df5, pd.get_dummies(df5['slope'], prefix='slp')], axis=1)\ndf5 = pd.concat([df5, pd.get_dummies(df5['ca'], prefix='ca_')], axis=1)\ndf5 = pd.concat([df5, pd.get_dummies(df5['thal'], prefix='thl')], axis=1)","2575fd66":"df5 = df5.drop(['cp','restecg','slope','ca','thal'], axis = 1)","1c5ea235":"df5.info()","0584081b":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score, confusion_matrix","b8d97ebb":"X = df5.drop(['target'], axis=1)\ny = df5['target']\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.2, random_state=9)","77cd457a":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","c26e73ab":"y_test.value_counts()","6f3c90c4":"knn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)\nknn_acc = accuracy_score(knn_pred, y_test)\nprint(\"Nearest Neighbor Accuracy Score: \", knn_acc)","8a96f14c":"knn_conf = pd.DataFrame(data=confusion_matrix(knn_pred, y_test),\n                       columns = [['Predicted Non Diseased', 'Predicted Diseased']],\n                       index = [['Actual Non Diseased', 'Actual Diseased']]\n                       )\nfig, ax = plt.subplots(figsize = (6,6))\nax = sns.heatmap(knn_conf, annot=True)\nplt.title(\"Nearest Neighbors Confusion Matrix\")","273fdcbb":"lr = linear_model.LogisticRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)\nlr_acc = accuracy_score(lr_pred, y_test)\nprint(\"Logistic Regression Accuracy Score: \", lr_acc)","2fc935a9":"lr_conf = pd.DataFrame(data=confusion_matrix(lr_pred, y_test),\n                       columns = [['Predicted Non Diseased', 'Predicted Diseased']],\n                       index = [['Actual Non Diseased', 'Actual Diseased']]\n                       )\nfig, ax = plt.subplots(figsize = (6,6))\nax = sns.heatmap(lr_conf, annot=True)\nplt.title(\"Logistic Regression Confusion Matrix\")","0259ecf7":"rf = RandomForestClassifier(n_estimators = 900, max_features=7, random_state = 9)\nrf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)\nrf_acc = accuracy_score(rf_pred, y_test)\nprint(\"Random Forest Accuracy Score: \", rf_acc)","111e74eb":"rf_conf = pd.DataFrame(data=confusion_matrix(rf_pred, y_test),\n                       columns = [['Predicted Non Diseased', 'Predicted Diseased']],\n                       index = [['Actual Non Diseased', 'Actual Diseased']]\n                       )\nfig, ax = plt.subplots(figsize = (6,6))\nax = sns.heatmap(rf_conf, annot=True)\nplt.title(\"Random Forest Confusion Matrix\")","aa7881fd":"svc = svm.SVC(kernel='rbf', gamma=.0001, C=15, max_iter=-1)\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)\nsvc_acc = accuracy_score(svc_pred, y_test)\nprint(\"Support Vector Machine Accuracy Score: \", svc_acc)","e733e628":"svc_conf = pd.DataFrame(data=confusion_matrix(svc_pred, y_test),\n                       columns = [['Predicted Non Diseased', 'Predicted Diseased']],\n                       index = [['Actual Non Diseased', 'Actual Diseased']]\n                       )\nfig, ax = plt.subplots(figsize = (6,6))\nax = sns.heatmap(svc_conf, annot=True)\nplt.title(\"Support Vector Machine Confusion Matrix\")","456db581":"ann = MLPClassifier(hidden_layer_sizes=(20,35,3), max_iter=4000, random_state=9)\nann.fit(X_train, y_train)\nann_pred = ann.predict(X_test)\nann_acc = accuracy_score(ann_pred, y_test)\nprint(\"Artificial Neural Network Accuracy Score: \", ann_acc)","f2e5f428":"ann_conf = pd.DataFrame(data=confusion_matrix(svc_pred, y_test),\n                       columns = [['Predicted Non Diseased', 'Predicted Diseased']],\n                       index = [['Actual Non Diseased', 'Actual Diseased']]\n                       )\nfig, ax = plt.subplots(figsize = (6,6))\nax = sns.heatmap(svc_conf, annot=True)\nplt.title(\"Support Vector Machine Confusion Matrix\")","0e9f85d9":"model_results = pd.DataFrame({'Model': ['KNN',\n                                       'LR',\n                                       'RF',\n                                       'SVC',\n                                       'ANN'],\n                             'Accuracy Scores': [knn_acc,\n                                                lr_acc,\n                                                rf_acc,\n                                                svc_acc,\n                                                ann_acc]\n                             })\n\nresults = model_results.sort_values('Accuracy Scores', ascending=False).set_index('Model')","25ab78a1":"results.style.background_gradient(cmap='Blues')\n\n","164b13bc":"# Exploratory Data Analysis","1e2163a2":"# Preprocessing","5fdccd97":"# Model Results","408c47a3":"# Neural Network","b2b2b860":"# Logistic Regression","8f3d97d9":"# K-Nearest Neighbor","547a8be4":"# Support Vector Machine","d4d6ae73":"# Load and Inspect Data","17808637":"# Random Forest Classifier"}}