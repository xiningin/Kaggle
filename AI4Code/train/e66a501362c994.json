{"cell_type":{"08d6fef9":"code","5d0ab782":"code","dee23d62":"code","1f300eef":"code","5c3600e9":"code","3874eca0":"code","312afcb9":"code","077fd5af":"code","00ee2da4":"code","d4bbe763":"code","be558179":"code","224182f6":"code","5816155d":"code","c5d6e350":"code","07828ada":"code","6845f073":"code","22e37fbf":"code","0b662151":"code","e37445c0":"code","5247c2d5":"code","ba870f01":"code","a2134044":"code","7fed2e31":"code","6b006401":"code","a7fbcf05":"code","d903468f":"code","84ad4efc":"code","db37c31b":"code","08cac968":"code","4a4b78b6":"code","0cfe70f3":"code","8f16ec04":"code","00865b55":"code","a77dace9":"code","7e34e12b":"code","44308dd4":"code","85ae2f8a":"code","e960c47b":"code","8f060a07":"code","0ad38421":"code","9759b605":"code","a743750b":"code","36ce7c0b":"code","bb3bc0e4":"code","5c5e055a":"code","f84926e9":"code","1829f2f4":"code","fa9c1490":"code","ae649428":"code","26e6fab2":"code","1b054fb7":"markdown","ec4d5504":"markdown","6264c54c":"markdown","010a572a":"markdown","05cd4f05":"markdown","5d967fc8":"markdown","70ab4b32":"markdown","4f19f8b6":"markdown","0d7f72e7":"markdown","04c4e6ce":"markdown","0035c457":"markdown","6bb7bd18":"markdown","2e4f0c55":"markdown","d0fdeb64":"markdown","804fd7d9":"markdown","20e761e2":"markdown","d402c0f1":"markdown","507e5b84":"markdown","fd4b2f58":"markdown","d9054729":"markdown","29092978":"markdown","dfbb5b83":"markdown","8c52afde":"markdown","9f15f8e9":"markdown","82c7613c":"markdown"},"source":{"08d6fef9":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport copy\nimport os\nfrom IPython.display import display\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5d0ab782":"# Reading all data into the separate files (we ignore unclean data)\nfiles = os.listdir('\/kaggle\/input\/used-car-dataset-ford-and-mercedes')\ndf_dict = {}\nfor file in files:\n    if file != 'unclean cclass.csv' and file != 'unclean focus.csv':\n        df_dict[file[:-4]] = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/' + file)","dee23d62":"# Quickly check how every dataframe looks\nfor name, df in df_dict.items():\n    print('{name} df'.format(name=name))\n    display(df.head())\n    print()","1f300eef":"# Checking for missing values\nprint(\"Number of missing values in the files: {no}\".format(no=sum([df.isna().sum().sum() for df in df_dict.values()])))","5c3600e9":"print(\"Number of rows for every df\")\nfor name, df in df_dict.items():\n    print('{name} df no rows: {no_rows}'.format(name=name, no_rows=df.shape[0]))","3874eca0":"# Dealing with problem 1\ndf_dict['cclass'].insert(6, 'tax', -1)\ndf_dict['cclass'].insert(7, 'mpg', -1)\ndf_dict['focus'].insert(6, 'tax', -1)\ndf_dict['focus'].insert(7, 'mpg', -1)\ndf_dict['hyundi'].rename(columns={'tax(\u00a3)' : 'tax'}, inplace=True)","312afcb9":"df_dict['cclass'].head()","077fd5af":"# Dealing with problem 2\nfor name, df in df_dict.items():\n    df.insert(0, 'type', name)","00ee2da4":"df_dict['cclass'].head()","d4bbe763":"# Dealing with problem 3, 4 and 5\nfrom sklearn.model_selection import train_test_split","be558179":"# Used for EDA for every car separately\ndf_train_dict = {}\n# Used for model\ndf_train = pd.DataFrame()\ndf_test = pd.DataFrame()\nfor name, df in df_dict.items():\n    # (we will later separate price from the rest of the dataset)\n    train, test = train_test_split(df, test_size=0.3, random_state=42)\n    df_train = pd.concat([df_train, train])\n    df_test = pd.concat([df_test, test])\n    # Drop the type because we don't need it for EDA for every car\n    train = train.drop('type', axis=1)\n    df_train_dict[name] = train\n    \n# Reset the index of our datasets so that later they wouldn't cause trouble\ndf_train = df_train.reset_index(drop=True)\ndf_test = df_test.reset_index(drop=True)","224182f6":"len(df_train_dict)","5816155d":"df_train.head()","c5d6e350":"df_test.head()","07828ada":"print(df_train.shape)\nprint(df_test.shape)","6845f073":"df_train.describe()","22e37fbf":"df_train.dtypes","0b662151":"df_train = df_train.sample(frac=1, random_state=42).reset_index(drop=True)","e37445c0":"df_train.head()","5247c2d5":"fig, axs = plt.subplots(nrows=6, ncols=2, figsize=(24*2, 12*6))\nfig.suptitle('Histogram of the price', fontsize=40, y=1.05)\n\ni = 0\nj = 0\nfor name, df in df_train_dict.items():\n    axs[i][j].hist(df['price'], bins=40)\n    axs[i][j].set_title('Price for: ' + str(name), fontsize=36)\n    axs[i][j].set_xlabel('Price', fontsize=30)\n    axs[i][j].tick_params(axis='x', labelsize=24)\n    axs[i][j].tick_params(axis='y', labelsize=24)\n    \n    j += 1\n    if j == 2:\n        j = 0\n        i += 1\n\naxs[-1,-1].set_axis_off()\nplt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0.4, hspace=0.4)\nplt.show()","ba870f01":"def create_barplot(\n    df_dict: dict,\n    name_col: str,\n    nrows: int = 6,\n    ncols: int = 2,\n    xlabelsize: int = 24,\n    ylabelsize: int = 24\n):\n    fig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=(24*ncols, 12*nrows))\n    fig.suptitle('Average price of the car for this parameter: {parameter}'.format(parameter=name_col), fontsize=40, y=1.05)\n    \n    # Create plot for every type of car. a will be used to assign a proper plot to the proper axis\n    for a, (name, df) in enumerate(df_dict.items()):\n        i = a \/\/ 2 \n        j = a % 2\n        \n        x = sorted(df[name_col].unique())\n        y = df.groupby(name_col).mean()['price']\n        axs[i][j].bar(x, y)\n        \n        axs[i][j].set_title(name, fontsize=36)\n        axs[i][j].tick_params(axis='x', labelsize=xlabelsize)\n        axs[i][j].tick_params(axis='y', labelsize=ylabelsize)\n        axs[i][j].set_xlabel(name_col, fontsize=30)\n        axs[i][j].set_ylabel('Price', fontsize=30)\n    \n    axs[-1,-1].set_axis_off()\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0.4, hspace=0.4)\n    plt.show()","a2134044":"def create_lineplot(\n    df_dict: dict,\n    name_col: str,\n    nrows: int = 6,\n    ncols: int = 2,\n    xlabelsize: int = 24,\n    ylabelsize: int = 24\n):\n    fig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=(24*ncols, 12*nrows))\n    fig.suptitle('Average price of the car for this parameter: {parameter}'.format(parameter=name_col), fontsize=40, y=1.05)\n    \n    for a, (name, df) in enumerate(df_dict.items()):\n        i = a \/\/ 2 \n        j = a % 2\n        \n        x = sorted(df[name_col].unique())\n        y = df.groupby(name_col).mean()['price']\n        axs[i][j].plot(x, y)\n        \n        axs[i][j].set_title(name, fontsize=36)\n        axs[i][j].tick_params(axis='x', labelsize=xlabelsize)\n        axs[i][j].tick_params(axis='y', labelsize=ylabelsize)\n        axs[i][j].set_xlabel(name_col, fontsize=30)\n        axs[i][j].set_ylabel('Price', fontsize=30)\n\n    axs[-1,-1].set_axis_off()\n    plt.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0.4, hspace=0.4)\n    plt.show()","7fed2e31":"create_barplot(df_train_dict, 'model', xlabelsize=8)","6b006401":"create_lineplot(df_train_dict, 'year')","a7fbcf05":"df_dict['ford'][df_dict['ford']['year'] == 2060]","d903468f":"df_dict['merc'][df_dict['merc']['year'] < 1995]","84ad4efc":"df_dict['vauxhall'][df_dict['vauxhall']['year'] < 1995]","db37c31b":"create_barplot(df_train_dict, 'transmission')","08cac968":"create_lineplot(df_train_dict, 'mileage')","4a4b78b6":"create_barplot(df_train_dict, 'fuelType')","0cfe70f3":"create_lineplot(df_train_dict, 'tax')","8f16ec04":"create_lineplot(df_train_dict, 'mpg')","00865b55":"create_lineplot(df_train_dict, 'engineSize')","a77dace9":"fig, axs = plt.subplots(nrows=6, ncols=2, figsize=(24*2, 12*6))\nfig.suptitle('Heatmap for every type of car', fontsize=40, y=0.9)\n\nfor a, (name, df) in enumerate(copy.deepcopy(df_dict).items()):\n    i = a \/\/ 2 \n    j = a % 2\n    if name == 'cclass' or name == 'focus':\n        df.drop(['tax', 'mpg'], axis=1, inplace=True)\n        location = [0.5, 1.5, 2.5, 3.5]\n        \n    else:\n        location = [0.5, 1.5, 2.5, 3.5, 4.5, 5.5]\n        \n    heatmap = axs[i][j].pcolormesh(df.corr(method='spearman'))\n    fig.colorbar(heatmap, ax=axs[i,j])\n    axs[i][j].set_title(name, fontsize=36)\n    axs[i][j].xaxis.set_major_locator(matplotlib.ticker.FixedLocator(location))\n    axs[i][j].yaxis.set_major_locator(matplotlib.ticker.FixedLocator(location))\n    axs[i][j].set_xticklabels(df.select_dtypes(exclude='object').columns, fontsize=30)\n    axs[i][j].set_yticklabels(df.select_dtypes(exclude='object').columns, fontsize=30)\n    \naxs[-1,-1].set_axis_off()\nplt.show()","7e34e12b":"plt.figure(figsize=(24, 12))\nplt.hist(df_train['price'], bins=40)\nplt.title('Histogram of price', fontsize=36)\nplt.tick_params(axis='x', labelsize=24)\nplt.tick_params(axis='y', labelsize=24)\nplt.show()","44308dd4":"plt.figure(figsize=(24, 12))\nx = sorted(df_train['type'].unique())\ny = df_train.groupby('type').mean()['price']\nplt.bar(x, y)\nplt.title('Average price for every type of car', fontsize=36)\nplt.ylabel('Price', fontsize=30)\nplt.tick_params(axis='x', labelsize=24)\nplt.tick_params(axis='y', labelsize=24)\nplt.show()","85ae2f8a":"X_train = df_train.drop('price', axis=1)\ny_train = df_train['price']\nX_test = df_test.drop('price', axis=1)\ny_test = df_test['price']","e960c47b":"X_train.head()","8f060a07":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer","0ad38421":"# One hot encode and standarize the dataset\nclass DatasetEncoderAndStandarization:\n    def __init__(self):\n        self.preprocessor = None\n        \n    def fit(self, df):\n        self.preprocessor = ColumnTransformer(\n            transformers=[\n                ('num', StandardScaler(), df.select_dtypes(exclude='object').columns),\n                ('cat', OneHotEncoder(handle_unknown='ignore', sparse=False), df.select_dtypes(include='object').columns)\n            ]\n        )\n        \n        self.preprocessor.fit(df)\n        \n    def transform(self, df):\n        if self.preprocessor is None:\n            print(\"No preprocessor\")\n            return\n        \n        return self.preprocessor.transform(df)","9759b605":"deas = DatasetEncoderAndStandarization()\ndeas.fit(X_train)\nX_train = deas.transform(X_train)\nX_test = deas.transform(X_test)","a743750b":"X_train.shape","36ce7c0b":"X_test.shape","bb3bc0e4":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score","5c5e055a":"regr = RandomForestRegressor(n_estimators=20, max_depth=20, max_features=36, random_state=42)\nregr.fit(X_train, y_train)\nprint(\"RMSE for random forest (training set) \", mean_squared_error(y_train, regr.predict(X_train), squared=False))","f84926e9":"predictions = regr.predict(X_test)\nrmse_random_forest = mean_squared_error(y_test, predictions, squared=False)\nr2_random_forest = r2_score(y_test, predictions,)\nprint(\"RMSE for random forest (test set) \", rmse_random_forest)\nprint(\"R^2 for random forest (test set)\", r2_random_forest)","1829f2f4":"# Input every parameter of the car and get the predicted price\nclass Predictor:\n    def __init__(self, df, preprocessor, model):\n        self.df = df\n        self.preprocessor = preprocessor\n        self.model = model\n        \n        self.types = df['type'].unique()\n        self.models_car = df['model'].unique()\n        self.min_year = df['year'].min() - 5\n        self.transmissions = df['transmission'].unique()\n        self.max_mileage = df['mileage'].max() + 100000\n        self.fuel_types = df['fuelType'].unique()\n        self.max_tax = df['tax'].max() + 20\n        self.max_mpg = df['mpg'].max() + 10\n        self.max_engine_size = df['engineSize'].max() + 1\n      \n    # Input all the needed information and get the info about the price of the car\n    def give_input_and_get_predicted_price(self):\n        try:\n            type_car = input(\"Input type of car (for instance bmw): \") \n            # We put extra space because in our dataset there is always an extra space before every model\n            model_car = ' ' + input(\"Input model (for instance 1 Series): \")\n            year = int(input(\"Input year the car was registered (for instance 2001): \"))\n            transmission = input(\"Input the transmission (for instance Semi-Auto): \")\n            mileage = int(input(\"Input mileage of the car (for instance 2501): \"))\n            fuel_type = input(\"Input fuel type (for instance Petrol): \")\n            tax = int(input(\"Input tax (for instance 150). For cclass and focus input -1: \"))\n            mpg = float(input(\"Input mpg (for instance 55.5). For cclass and focus input -1: \"))\n            engine_size = float(input(\"Input engine size (for instance 1.0): \"))\n            price = int(input(\"Input the price of the car (for instance 18022)\"))\n        \n        except ValueError:\n            print(\"Incorrect type of data. Input data again\")\n            return\n        \n        print()\n        \n        df = pd.DataFrame([[type_car, model_car, year, transmission, mileage, fuel_type, tax, mpg, engine_size]], columns=self.df.columns)\n        self.check_for_correct_input(df)\n        df = self.preprocessor.transform(df)\n        predicted_price = int(self.model.predict(df))\n        \n        print()\n        \n        print('Predicted price: ', predicted_price)\n        print('Actual price: ', price)\n        print('Difference: ' + str(predicted_price-price))\n        \n    # Will only return warnings if user specifies something that deviates from what we have in our whole dataset\n    def check_for_correct_input(self, df):\n        if df['type'][0] not in self.types:\n            print('WARNING! Specified type does not exist in the dataset. You may get unusual results')\n            \n        if df['model'][0] not in self.models_car:\n            print('WARNING! Specified model does not exist in the dataset. You may get unusual results')\n            \n        if df['year'][0] > 2021 or df['year'][0] < self.min_year:\n            print('WARNING! Specified year deviates from the dataset. You may get unusual results')\n            \n        if df['transmission'][0] not in self.transmissions:\n            print('WARNING! Specified transmission does not exist in the dataset. You may get unusual results')\n            \n        if df['mileage'][0] < 0 or df['mileage'][0] > self.max_mileage:\n            print('WARNING! Specified mileage deviates from the dataset. You may get unusual results')\n            \n        if df['fuelType'][0] not in self.fuel_types:\n            print('WARNING! Specified fuel type does not exist in the dataset. You may get unusual results')\n            \n        # Because cclass and focus don't have tax and mpg column we will need to deal with them separately\n        if df['type'][0] == 'cclass' or df['type'][0] == 'focus':\n            if df['tax'][0] != -1:\n                print('WARNING! Specified tax deviates from the dataset. You may get unusual results')\n                \n            if df['mpg'][0] != -1:\n                print('WARNING! Specified mpg deviates from the dataset. You may get unusual results')\n                \n        else:\n            if df['tax'][0] < 0 or df['tax'][0] > self.max_tax:\n                print('WARNING! Specified tax deviates from the dataset. You may get unusual results')\n                \n            if df['mpg'][0] < 0 or df['mpg'][0] > self.max_mpg:\n                print('WARNING! Specified mpg deviates from the dataset. You may get unusual results')\n        \n        if df['engineSize'][0] < 0 or df['engineSize'][0] > self.max_engine_size:\n            print('WARNING! Specified engine size deviates from the dataset. You may get unusual results')","fa9c1490":"predictor = Predictor(pd.concat([df_train, df_test]).drop('price', axis=1), deas, regr)","ae649428":"df_test.iloc[20]","26e6fab2":"predictor.give_input_and_get_predicted_price()","1b054fb7":"## Final conclusion - these are the things that we can say about our data:\n## 1. Year - younger cars cost more (there are some exceptions to this rule)\n## 2. Mileage - cars with low mileage cost a lot more than cars with high milleage\n## 3. MPG \/ Engine Size - for some type of cars these are factors that heavily influence the price while for others these are not very important factors.\n## 4. Tax - this factor doesn't influence the price of the car.\n## 5. Model \/ Transmission \/ Fuel Type - Sometimes these factors heavily influence the final price of our car (for instance G Class Merc costs a lot more that other models) while in other cases it's not a very important factor (for instance fuel type is not an important factor in Merc cars)","ec4d5504":"### The straight lines in our graph are probably the result of having a very small amount of cars with a very high mpg.\n### We can see that for some type of cars, cars with high mpg cost less than cars with low mpg.","6264c54c":"### We can notice that some type of cars have much lower price than others. For instance Ford cars are a lot cheaper than Merc cars","010a572a":"### Fuel type doesn't seem to be directly correlated to the final price","05cd4f05":"### We can see that in some cases the type of car heavily influences the final price.\n### What we also can notice that info about the model is useless for cclass and focus cars because there is only one model in these cars","5d967fc8":"# 6. Preparing data for our model - OneHotEncoding and standarization\n### We will use one hot encoding on categorical variables and standarization on non-categorical variables so that our model is fed with proper data\n### But firstly we will seperate price from the rest of the dataset because we don't need to standarize the predicted values","70ab4b32":"### Most of the cars cost around 10000-20000 pounds. We can see that for some types the average price is higher than for other cars. That means that including type in our datasets was a good thing because we added an important information\n## Before we continue we will create two functions, one to create barplot, second to create a lineplot of our data. We will use a lot of these plots in our EDA so it's important to automate this whole process without copying a lot of code","4f19f8b6":"# 7. Model - random forest\n### We will use a random forest as our model. We will try to use the most optimal parameters to get the best results from our model","0d7f72e7":"### We can see two main problems\n### Problem no 1 - the number of columns doesn't match for every df. tax and mpg is not available for the first 2 dataframes. We will fix this problem by adding two missing columns to these dataframes and assigning -1 to every row in them\n### Problem no 2 - one column is misnamed (hyundi df). We will rename this column later","04c4e6ce":"### The engine size seems to be correlated to the price of the car (we can see peaks for some engine sizes) although it's not a linear correlation.","0035c457":"# 8. Input a car and get the predicted price\n## We will build a simple class that will allow the user to input parameters for his own car and get the predicted price","6bb7bd18":"### There is no visible correlation with tax and price","2e4f0c55":"# Our goal is to build a model that will allow us to predict the price of the car\n## To build our model we have access to 13 files each containing information about given type of car. In our analysis we will ignore unclean cclass.csv and unclean focus.csv - that means that we will analyse 11 different types of cars\n## We will start by performing EDA (Exploratory Data Analysis) and fixing any problems that we encounter in our data\n## After that we will perform one hot encoding and standarization on our dataset\n## We will build a model based on random forest that will predict the price of the car. We will use RMSE and R^2 to evaluate our model\n## We will end by building a class that will allow the user to input their own parameters and get the predicted price\n### This is the information that we have about the columns in our dataset:\n### 1. model - model of the car\n### 2. year - registration year\n### 3. price - price in \u00a3\n### 4. transmission - type of gearbox\n### 5. mileage - distance used\n### 6. fuelType - engine fuel\n### 7. tax - road tax\n### 8. mpg - miles per gallon\n### 9. engineSize - size in litres","d0fdeb64":"# 5. EDA - training data\n## We will perform basic EDA on our whole training data","804fd7d9":"# 2. Basic info about our data","20e761e2":"# 3. Preparing data for EDA (Exploratory Data Analysis)\n### Before EDA we will need to do several things\n### 1. Deal with all the problems mentioned earlier (missing columns and mispelled column)\n### 2. Add the model column (this info will be useful for our model later)\n### 3. Separate data into training and test set (it's the most important step, we only perform analysis on the training set)\n### 4. Concatenate the training sets into one huge training set (that will be used to train our model)\n### 5. Concatenate the test sets into one huge test set (that will be used to train our model)","d402c0f1":"### The transmission on it's own doesn't seem to be correlated to the price of the cars","507e5b84":"### Our last step will be reshufling our training data so that our model would learn better","fd4b2f58":"### We have managed to build a successful predictor that will be able to predict the price of every car specified by user","d9054729":"# 1. Importing basic libraries for data analysis and insuring if data could be read properly","29092978":"### We can see that we have a pretty good score on our test set and a good result on our training set \n### That means that we can use this model to predict the price of the new car","dfbb5b83":"### Now we will test our predictor on the 20-th car that we have in our test dataset","8c52afde":"### We can see that in most cases higher mileage means lower price","9f15f8e9":"### We can see that that younger cars have higher price (the only exception being very old exclusive cars). There are also a few anomalies that we can notice\n### Firstly Ford has a price for the car that was registered in 2060. It's probably a typo in the dataset. Luckily it doesn't look that we have many of these typos in our dataset so we don't need to worry that they will cause any problems later\n### We can also notice that for merc and vauxhall we have a straight line between the year 1970 and around year 2000. It's very unlikely that there is a linear correlation between the year and price. We will check if this straight line is the result of there being no cars registered between 1971 and around 1999","82c7613c":"# 4. EDA - every car separately\n## In this part we will analyse every car separately. That means that for every parameters that we want to analyse we will plot 11 charts\n### We will mainly try to search for answers for these questions:\n### 1. What is the distribution of price?\n### 2. What influences the price (and how much)?"}}