{"cell_type":{"3fecbd84":"code","52e5f285":"code","ba9d09ae":"code","8883210f":"code","d51118e7":"code","4e0dc6d6":"code","3d2bd5f4":"code","aae3049d":"code","13fdb836":"code","7ba2ebfc":"code","12e3888f":"code","aa2a9cd9":"code","a1d56d28":"code","5cc9f786":"code","4f6f0ee3":"code","0968d06d":"code","9df19f6c":"code","193aff8b":"code","cb953bd7":"code","32f13174":"code","44468f2b":"code","1a4e1c7f":"code","a7690fed":"code","afa1e127":"code","83042941":"code","89f6efb3":"code","ec07cb41":"code","26f46b54":"code","b6f6f8fa":"code","010576ba":"code","1b13c80e":"code","72a3845f":"code","0d6054f0":"code","33527083":"code","9d0ab9ef":"code","40cc1132":"code","666e488d":"code","fd12ad24":"markdown","cb1ef0a6":"markdown","f1645ebe":"markdown","b1d4e93f":"markdown","0bc99b88":"markdown","bea62bdf":"markdown","00dac94a":"markdown","f732e7d6":"markdown","49d2b7e5":"markdown","f6ecdbec":"markdown","dccd9c12":"markdown","3c4036c5":"markdown","86cf8f88":"markdown","e5eeaa02":"markdown","221c681f":"markdown","98008abf":"markdown","e81e3056":"markdown","99ca4107":"markdown","41b3489c":"markdown","10babded":"markdown","d41c9cbc":"markdown","e4e7e0dd":"markdown","666181f0":"markdown","7cb4197a":"markdown","46e86323":"markdown","fd59a655":"markdown","2b393fac":"markdown","e4b0182f":"markdown","356d667b":"markdown"},"source":{"3fecbd84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52e5f285":"# Import additional required libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import confusion_matrix,classification_report, accuracy_score\nfrom sklearn.model_selection import cross_val_score","ba9d09ae":"# Importing dataset\nzoo_df = pd.read_csv('..\/input\/zoo-animal-classification\/zoo.csv')\nclass_df = pd.read_csv('..\/input\/zoo-animal-classification\/class.csv')\nzoo_df.head()","8883210f":"class_df.head()","d51118e7":"# Joining datasets along the class number column present in both datasets\nanimal_df = zoo_df.merge(class_df,how='left',left_on='class_type',right_on='Class_Number')\nanimal_df.head()","4e0dc6d6":"# Dropping unwanted columns\n## I am renaming the dataframe as zoo_df because it is shorter to use\nzoo_df = animal_df.drop(['class_type','Animal_Names', 'Number_Of_Animal_Species_In_Class'], axis=1)\nzoo_df.head()","3d2bd5f4":"zoo_df.isnull().any()","aae3049d":"# Get names of columns in zoo_df\nzoo_df.info()","13fdb836":"zoo_df.describe()","7ba2ebfc":"# Set default plot grid\nsns.set_style('whitegrid')","12e3888f":"# Plot histogram of classes\nplt.rcParams['figure.figsize'] = (7,7)\nsns.countplot(zoo_df['Class_Type'], palette='YlGnBu')\nax = plt.gca()\nax.set_title(\"Histogram of Classes\")","aa2a9cd9":"zoo_df['has_legs'] = np.where(zoo_df['legs']>0,1,0)\nzoo_df = zoo_df[['animal_name','hair','feathers','eggs','milk', 'airborne', 'aquatic', 'predator', 'toothed', 'backbone', 'breathes','venomous','fins','legs','has_legs','tail','domestic','catsize','Class_Number','Class_Type']]\nzoo_df.head()","a1d56d28":"zoo_df_temp = zoo_df.drop(['has_legs','Class_Number'], axis=1)\nzoo_df_temp = zoo_df_temp.groupby(by='animal_name').mean()\nplt.rcParams['figure.figsize'] = (16,10) \nsns.heatmap(zoo_df_temp, cmap=\"inferno\")\nax = plt.gca()\nax.set_title(\"Features for the Animals\")","5cc9f786":"zoo_df_temp = zoo_df.drop(['has_legs','Class_Number'], axis=1)\nzoo_df_temp = zoo_df_temp.groupby(by='Class_Type').mean()\nplt.rcParams['figure.figsize'] = (16,10) \nsns.heatmap(zoo_df_temp, annot=True, cmap=\"inferno\")\nax = plt.gca()\nax.set_title(\"HeatMap of Features for the Classes\")","4f6f0ee3":"zoo_df_temp = zoo_df.drop(['legs','Class_Number'], axis=1)\nzoo_df_temp = zoo_df_temp.groupby(by='animal_name').mean()\nplt.rcParams['figure.figsize'] = (16,10) \nsns.heatmap(zoo_df_temp, cmap=\"inferno\")\nax = plt.gca()\nax.set_title(\"Features for the Animals\")","0968d06d":"zoo_df_temp = zoo_df.drop(['legs','Class_Number'], axis=1)\nzoo_df_temp = zoo_df_temp.groupby(by='Class_Type').mean()\nplt.rcParams['figure.figsize'] = (16,10) \nsns.heatmap(zoo_df_temp, annot=True, cmap=\"inferno\")\nax = plt.gca()\nax.set_title(\"HeatMap of Features for the Classes\")","9df19f6c":"zoo_df.head()","193aff8b":"# Select columns to add to X and y sets\nfeatures = list(zoo_df.columns.values)\nfeatures.remove('has_legs')\nfeatures.remove('Class_Type')\nfeatures.remove('Class_Number')\nfeatures.remove('animal_name')\nX = zoo_df[features]\ny = zoo_df['Class_Number']","cb953bd7":"# Split X and y into train and test\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 0)","32f13174":"# Fit k-nearest neighbors classifier with training sets for n = 5\nknn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(X_train, y_train)","44468f2b":"# Run prediction\ny_pred = knn.predict(X_test)","1a4e1c7f":"print(confusion_matrix(y_test,y_pred))","a7690fed":"print(classification_report(y_test,y_pred))","afa1e127":"plt.rcParams['figure.figsize'] = (9,9) \n_, ax = plt.subplots()\nax.hist(y_test, color = 'm', alpha = 0.5, label = 'actual', bins=7)\nax.hist(y_pred, color = 'c', alpha = 0.5, label = 'prediction', bins=7)\nax.yaxis.set_ticks(np.arange(0,11))\nax.legend(loc = 'best')\nplt.show()","83042941":"# Get score for different values of n\nk_list = np.arange(1, 50, 2)\nmean_scores = []\naccuracy_list = []\nerror_rate = []\n\nfor i in k_list:\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    score = cross_val_score(knn,X_train, y_train,cv=10)\n    mean_scores.append(np.mean(score))\n    error_rate.append(np.mean(pred_i != y_test))\n\nprint(\"Mean Scores:\")\nprint(mean_scores)\nprint(\"Error Rate:\")\nprint(error_rate)","89f6efb3":"# Plot n values and average accuracy scores\nplt.plot(k_list,mean_scores, marker='o')\n\n# Added titles and adjust dimensions\nplt.title('Accuracy of Model for Varying Values of K')\nplt.xlabel(\"Values of K\")\nplt.ylabel(\"Mean Accuracy Score\")\nplt.xticks(k_list)\nplt.rcParams['figure.figsize'] = (12,12) \n\nplt.show()","ec07cb41":"# Plot n values and average accuracy scores\nplt.plot(k_list,error_rate, color='r', marker = 'o')\n\n# Added titles and adjust dimensions\nplt.title('Error Rate for Model for Varying Values of K')\nplt.xlabel(\"Values of K\")\nplt.ylabel(\"Error Rate\")\nplt.xticks(k_list)\nplt.rcParams['figure.figsize'] = (12,12) \n\nplt.show()","26f46b54":"# Select columns to add to X and y sets\nfeatures = list(zoo_df.columns.values)\nfeatures.remove('legs')\nfeatures.remove('Class_Type')\nfeatures.remove('Class_Number')\nfeatures.remove('animal_name')\nX2 = zoo_df[features]\ny2 = zoo_df['Class_Type']","b6f6f8fa":"# Split X and y into train and test\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2,y2,random_state = 0)","010576ba":"# Fit k-nearest neighbors classifier with training sets for n = 5\nknn2 = KNeighborsClassifier(n_neighbors = 5)\nknn2.fit(X2_train, y2_train)","1b13c80e":"# Run prediction\ny2_pred = knn2.predict(X2_test)","72a3845f":"print(confusion_matrix(y2_test,y2_pred))","0d6054f0":"print(classification_report(y2_test,y2_pred))","33527083":"plt.rcParams['figure.figsize'] = (9,9) \n_, ax = plt.subplots()\nax.hist(y2_test, color = 'm', alpha = 0.5, label = 'actual', bins=7)\nax.hist(y2_pred, color = 'c', alpha = 0.5, label = 'prediction', bins=7)\nax.yaxis.set_ticks(np.arange(0,11))\nax.legend(loc = 'best')\n\nplt.show()","9d0ab9ef":"# Get score for different values of n\nk_list = np.arange(1, 50, 2)\nmean_scores2 = []\naccuracy_list2 = []\nerror_rate2 = []\n\nfor i in k_list:\n    knn2 = KNeighborsClassifier(n_neighbors=i)\n    knn2.fit(X2_train,y2_train)\n    pred_i = knn2.predict(X2_test)\n    score = cross_val_score(knn2,X2_train, y2_train,cv=10)\n    mean_scores2.append(np.mean(score))\n    error_rate2.append(np.mean(pred_i != y2_test))\n\nprint(\"Mean Scores:\")\nprint(mean_scores)\nprint(\"Error Rate:\")\nprint(error_rate)","40cc1132":"# Plot n values and average accuracy scores\nplt.plot(k_list,mean_scores, color='b',marker='o', label='Model using Number of Legs')\nplt.plot(k_list,mean_scores2, color='m',marker='x', label='Model using Presence of Legs')\n\n# Added titles and adjust dimensions\nplt.title('Accuracy of Model for Varying Values of K')\nplt.xlabel(\"Values of K\")\nplt.ylabel(\"Mean Accuracy Score\")\nplt.xticks(k_list)\nplt.legend()\nplt.rcParams['figure.figsize'] = (12,12) \n\nplt.show()","666e488d":"# Plot n values and average accuracy scores\nplt.plot(k_list,error_rate, color='r', marker = 'o', label='Model using Number of Legs')\nplt.plot(k_list,error_rate2, color='c', marker = 'x', label='Model using Presence of Legs')\n\n# Added titles and adjust dimensions\nplt.title('Error Rate for Model for Varying Values of K')\nplt.xlabel(\"Values of K\")\nplt.ylabel(\"Error Rate\")\nplt.xticks(k_list)\nplt.legend()\nplt.rcParams['figure.figsize'] = (12,12) \n\nplt.show()","fd12ad24":"## Initial Evaluation","cb1ef0a6":"We can also see if there are any trends or correlations in the data using a heatmap.\n\nAs mentioned previously, we will want to treat the `legs` columns differently as it does not present data the same way as the remaining columns. So, we will create a column `has_legs` that checks if an animal has legs (1) or not (0).","f1645ebe":"Run predicitions on the test data","b1d4e93f":"Next let's get the distribution of animal data across the types of classes.","0bc99b88":"Review data prior to implementing model using basic stats and visualizations.","bea62bdf":"## Importing and Modifying the Data","00dac94a":"This gives us a much clearer idea of what features play a more or less important role in identifying certain animals.","f732e7d6":"Reading the data using `pandas.read_csv()`.","49d2b7e5":"So, we've seen how this works when we use all the features values as given. <br>\nJust for fun, let's see how this changes if we don't use the values for `legs` and use `has_legs` instead as we did when plotting our heatmap.\n\nI'll run the exact same code as before changing nothing but using `has_legs` and not `legs`. <br>","f6ecdbec":"What this figure tells us is the total number of animals in each class according to the test data and predicted data. <br>\nWe can see that the predictions matches almost all the actual animal classifications (indicated by color overlap) except for one case where the model failed to identify an animal as belonging to class 3 (Reptile), and marked it as being in class 4 (Fish).\n\nSo we can see the level of accuracy for this particular classifier.","dccd9c12":"## Prepraring Data for Models\nWe will be removing column `animal_name` as it does not help us in classification. We will also remove `has_legs` since it is not part of the original data, and is not as insightful as it's parent feature `legs`.\n\nAfter that, we can assign the remaining relevant columns to the X and y sets.","3c4036c5":"## Test and Evaluate model","86cf8f88":"Importing subpackages from scikit-learn library","e5eeaa02":"## Out of Curiosity...","221c681f":"Now that we know what the model can do at n=5, we should run the model for multiple values of n to find optimal value of n with respect to this dataset.","98008abf":"Here we can see how `legs` having a larger range of values [0-8] than the rest of the features skews the data.\n\nNow, let's try that again but using `has_legs` instead.","e81e3056":"Since we want to use the information in both of these datasets, we can merge them along a common column, the `class_type` and `Class_Number` columns.","99ca4107":"From this we can see that all of the animal characteristics or feature values are given as binary values (1- present \/ 0-absent) except for the legs where it is given as a count of legs.\n\nWe need to keep this in mind going forward while using the data.","41b3489c":"We have no missing data so all the entries are valid for use.\n\nNow we can check the column names to get a better understanding of what features we will be basing our classification on.","10babded":"Before doing anything else with the data let's see if there are any null values (missing data) in any of the columns.","d41c9cbc":"Here I'll plot the original and new curves together so we can see and compare any differences.","e4e7e0dd":"Get the confusion matrix and classification report for model.","666181f0":"### Inference\n\nSo interestingly, <br>\nReplacing the feature `legs` with `has_legs` improved the accuracy of KNN models at every value where n >3 <br>\nThis may be due to the model taking the number of legs as a continuous, numeric data point rather than as an enumerate. <br>","7cb4197a":"Split X, y data into training set and testing set.","46e86323":"## Train model\nCreate and train knn classifier to use on zoo data","fd59a655":"## Visualization of Model Performance of Different n-Values\nCreate a plot of the average accuracy of the prediction model for different values of k between 1 to 50.\n\nThis is to help us better see which value of k works best with this model.","2b393fac":"## Importing Libraries for ML model","e4b0182f":"# K Nearest Neighbours (KNN)\nThe KNN algorithm works by storing all known classified values and makes predictions for new cases based on similarity measure.","356d667b":"Here we can remove the column `class_type` which was originally from `zoo_df` as it is now a duplicate of `Class_Number`, and also because it shares a name with `Class_Type` originally from `class_df`.\n\nWe can also remove the columns `Animal_Names` and `Number_Of_Animal_Species_In_Class` as they does not provide us with any classification insights."}}