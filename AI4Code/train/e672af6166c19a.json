{"cell_type":{"128aaf13":"code","df12cc2d":"code","3d462393":"code","b10f78c6":"code","49f1bb25":"code","81e93515":"code","4c6be2cd":"code","1e081417":"code","555d4e5b":"code","4bdadb78":"code","b88a5b21":"code","cc5c3626":"code","db2912c0":"code","da25b06f":"code","323b8e3d":"code","cec54d28":"code","034790c8":"code","33f2bbc5":"code","2a8b6dbd":"code","5ccba1a7":"code","6465f8f4":"code","c054e7bb":"code","e7add99b":"code","a9266157":"code","6a28a46b":"code","72944eb8":"code","83566aa6":"code","f791e406":"code","c9c9968a":"code","221217f5":"code","54c7a445":"code","10791df9":"markdown","aa5f33be":"markdown","eb19aba1":"markdown","3095c8a3":"markdown","3b7e80dd":"markdown","b328bd68":"markdown","c024d9da":"markdown","42e4049b":"markdown","2921c84c":"markdown","3a24dd74":"markdown","af9b9a95":"markdown","3b6d338e":"markdown","80ee542c":"markdown","1f16f5a5":"markdown","70af3014":"markdown","fb76773f":"markdown","d1361020":"markdown","dae1eb54":"markdown","67e8d8d8":"markdown","7408ceb2":"markdown","e7f5ce3c":"markdown","d2a3cd40":"markdown","0c200021":"markdown","31dccca3":"markdown"},"source":{"128aaf13":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore')\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\ncovid19 = SeqIO.read('\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\")\nrecord = SeqIO.read('\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\")\n#record = SeqIO.read(\"NC_045512.gb\", \"genbank\")","df12cc2d":"from Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\ncovid19 = SeqIO.read('\/kaggle\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\")","3d462393":"print(f'The genome of the virus causing Covid-19 (known as SARS-CoV-2) consists of {len(covid19)} genetic bases or letters.')","b10f78c6":"covid_DNA= covid19.seq\nprint( covid_DNA[:200])","49f1bb25":"#Count the nucleotides frequency in the DNA\nDNA= covid_DNA\nnucleotides={}\nfor n in DNA:\n    if n in nucleotides:\n        nucleotides[n] += 1\n    else:\n        nucleotides[n] =  1\nprint(nucleotides)\n\n#Create a dataframe\nnts= pd.DataFrame(data=nucleotides, index=[0]).T.reset_index()\nnts= nts.rename(columns={0: 'frequency', 'index': 'nucleotides'})\nnts=nts.sort_values(by=['frequency'], ascending=True)","81e93515":"#plot the nucleotides frequency\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,4))\na= nts['frequency'].plot.bar(color=sns.color_palette('icefire',4), edgecolor='black')\nplt.xticks(rotation=5)\nplt.ylabel(\"Nucleotides frequency\", weight='bold', fontsize=17)\nr=list(range(len(nts)))\nplt.xticks(r, nts.nucleotides, weight='bold', fontsize=20)\nplt.xlabel(\"Nucleotides\", weight='bold', size=20)\nplt.yticks(fontsize=16)\nplt.title(\"COVID-19: Nucleotides\", weight='bold', size=20)\nplt.savefig('covid_nucleotides.png')\nplt.show()","4c6be2cd":"covid_mRNA = covid_DNA.transcribe()\nprint(covid_mRNA[:100])","1e081417":"print(f'Covid-19 DNA: {covid_DNA[:50]}')\nprint(f'Covid-19 RNA: {covid_mRNA[:50]}')","555d4e5b":"covid_aa = covid_mRNA.translate()\nprint(covid_aa[:99])","4bdadb78":"print(f\"Covid-19's genome has {len(covid_aa)} amino acids\")","b88a5b21":"Proteins = covid_aa.split('*')\nProteins[:5]","cc5c3626":"print(f'We have {len(Proteins)} amino acid chains in the covid-19 genome')","db2912c0":"for i in Proteins[:]:\n    if len(i) < 50:\n        Proteins.remove(i)","da25b06f":"print(f'We have {len(Proteins)} proteins with  more than 50 amino acids in the covid-19 genome')","323b8e3d":"proteinas=pd.DataFrame(Proteins)\nproteinas['amino acid sequence'] = proteinas[0].apply(str)\nproteinas['Protein length'] = proteinas[0].apply(len)\nproteinas.rename(columns={0: \"sequence\"}, inplace=True)\npro=proteinas.drop('sequence', axis=1)\npro_= pro.sort_values(by=['Protein length'], ascending=False)","cec54d28":"pd.options.display.max_colwidth = 80\nimport seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ns = pro_.style.background_gradient(cmap=cm)\ns","034790c8":"pro_","33f2bbc5":"pd.options.display.max_colwidth = 2702\nd={ 'Protein length': [2701,290,123,83,63],\n   'DB:ID' : ['P0C6X7', 'Q0Q474', 'Q3I5J0', 'P59637', 'Q3I5J1']\n   ,'protein': ['Replicase polyprotein 1ab','Protein 3','Protein 7a', 'Envelope small membrane protein','Non-structural protein 6']\n   ,'organism':['Human SARS coronavirus (SARS-CoV)','Bat coronavirus 279\/2005 (BtCoV)',\n                           'Bat coronavirus Rp3\/2004', 'Human SARS coronavirus (SARS-CoV)',\n                           'Bat coronavirus Rp3\/2004']\n   ,'match': ['96%', '75%', '89%', '95%','69%']\n                          \n   , 'Function' : ['Multifunctional protein involved in the transcription and replication of viral RNAs. Contains the proteinases responsible for the cleavages of the polyprotein.',\n                'Forms homotetrameric potassium sensitive ion channels (viroporin) and may modulate virus release',\n                'Non-structural protein which is dispensable for virus replication in cell culture.',\n                'Plays a central role in virus morphogenesis and assembly. Acts as a viroporin and self-assembles in host membranes forming pentameric protein-lipid pores that allow ion transport.',\n                'Could be a determinant of virus virulence. Seems to stimulate cellular DNA synthesis in vitro (By similarity).']\n             }\n\ncovid_proteins= pd.DataFrame(data=d)\ncovid_proteins","2a8b6dbd":"pip install dna_features_viewer","5ccba1a7":"pip install bcbio-gff","6465f8f4":"import matplotlib.pyplot as plt\nfrom dna_features_viewer import BiopythonTranslator\nfrom Bio import SeqIO\nimport numpy as np\n\nfig, (ax1, ax2) = plt.subplots(\n    2, 1, figsize=(17, 9), sharex=True, gridspec_kw={\"height_ratios\": [4, 1]}\n)\nax1.set_title('COVID-19: Open Reading Frames', size=22, weight='bold')\n\n\n\n# PLOT THE RECORD MAP\nrecord = SeqIO.read(\"\/kaggle\/input\/covid19-genbank-file\/sequence.gb.txt\", \"genbank\")\ngraphic_record = BiopythonTranslator().translate_record(record)\ngraphic_record.plot(ax=ax1, with_ruler=False, strand_in_label_threshold=4)\n\n# PLOT THE LOCAL GC CONTENT (we use 50bp windows)\ngc = lambda s: 100.0 * len([c for c in s if c in \"GC\"]) \/ 50\nxx = np.arange(len(record.seq) - 50)\nyy = [gc(record.seq[x : x + 50]) for x in xx]\nax2.fill_between(xx + 25, yy, alpha=0.3)\nax2.set_ylim(bottom=0)\nax2.set_ylabel(\"GC(%)\")\nplt.savefig('orfs.png')\nplt.show()","c054e7bb":"from dna_features_viewer import BiopythonTranslator\n\nclass MyCustomTranslator(BiopythonTranslator):\n    \"\"\"Custom translator implementing the following theme:\n\n    - Color terminators in green, CDS in red, all other features in grey.\n    - Do not display features that are restriction sites unless they are BamHI\n    - Do not display labels for restriction sites\n    - For CDS labels just write \"CDS here\" instead of the name of the gene.\n\n    \"\"\"\n\n    def compute_feature_color(self, feature):\n        if feature.type == \"CDS\":\n            return \"crimson\"\n        elif feature.type == \"terminator\":\n            return \"green\"\n        else:\n            return \"gainsboro\"\n\n    def compute_feature_label(self, feature):\n        if feature.type == 'restriction_site':\n            return None\n        elif feature.type == \"CDS\":\n            return \"CDS here\"\n        else:\n            return BiopythonTranslator.compute_feature_label(self, feature)\n\n    def compute_filtered_features(self, features):\n        \"\"\"Do not display promoters. Just because.\"\"\"\n        return [\n            feature for feature in features\n            if (feature.type != \"restriction_site\")\n            or (\"BamHI\" in str(feature.qualifiers.get(\"label\", '')))\n        ]\n\n\ngraphic_record = MyCustomTranslator().translate_record(\"\/kaggle\/input\/covid19-genbank-file\/sequence.gb.txt\")\nax, _ = graphic_record.plot(figure_width=17)\nax.figure.tight_layout()\nax.figure.savefig(\"custom_bopython_translator.png\")\nax.set_title('COVID-19: Coding regions CDS', size=22, weight='bold')\nplt.show()","e7add99b":"table=11\nmin_pro_len=200\ndef find_orfs_with_trans(seq, trans_table, min_protein_length):\n    answer = []\n    seq_len = len(seq)\n    for strand, nuc in [(+1, seq), (-1, seq.reverse_complement())]:\n        for frame in range(3):\n            trans = str(nuc[frame:].translate(trans_table))\n            trans_len = len(trans)\n            aa_start = 0\n            aa_end = 0\n            while aa_start < trans_len:\n                aa_end = trans.find(\"*\", aa_start)\n                if aa_end == -1:\n                    aa_end = trans_len\n                if aa_end - aa_start >= min_protein_length:\n                    if strand == 1:\n                        start = frame + aa_start * 3\n                        end = min(seq_len, frame + aa_end * 3 + 3)\n                    else:\n                        start = seq_len - frame - aa_end * 3 - 3\n                        end = seq_len - frame - aa_start * 3\n                    answer.append((start, end, strand, trans[aa_start:aa_end]))\n                aa_start = aa_end + 1\n    answer.sort()\n    return answer","a9266157":"orf_list = find_orfs_with_trans(record.seq, table, min_pro_len)\nfor start, end, strand, pro in orf_list:\n    print(\n        \"%s...%s - length %i, strand %i, %i:%i\"\n        % (pro[:30], pro[-3:], len(pro), strand, start, end))","6a28a46b":"orf_list","72944eb8":"e={ 'ORF length': [4409,2701,1293,290,243, 433],\n   'DB:ID' : ['P0C6U8', 'P0C6X7', 'P59594', 'Q0Q474', 'Q0Q472','P59595']\n   ,'protein': ['Replicase polyprotein 1a','Replicase polyprotein 1ab','Spike glycoprotein', 'Protein 3','Membrane protein', 'Nucleoprotein N']\n   ,'organism':['Human SARS coronavirus (SARS-CoV)','Human SARS coronavirus (SARS-CoV)',\n                           'Human SARS coronavirus (SARS-CoV)', 'Bat coronavirus Rp3\/2004',\n                           'Bat coronavirus Rp3\/2004','Human SARS coronavirus (SARS-CoV)']\n   ,'match': ['80%', '96%', '76%', '95%','92%', '91%']\n                          \n   , 'Function' : ['Multifunctional protein involved in the transcription and replication of viral RNAs. Contains the proteinases responsible for the cleavages of the polyprotein.',\n                'Multifunctional protein involved in the transcription and replication of viral RNAs. Contains the proteinases responsible for the cleavages of the polyprotein',\n                'attaches the virion to the cell membrane by interacting with host receptor, initiating the infection (By similarity). Binding to human ACE2 and CLEC4M\/DC-SIGNR receptors and internalization of the virus into the endosomes of the host cell induces conformational changes in the S glycoprotein. Proteolysis by cathepsin CTSL may unmask the fusion peptide of S2 and activate membranes fusion within endosomes.',\n                'Forms homotetrameric potassium sensitive ion channels (viroporin) and may modulate virus release.',\n                'Component of the viral envelope that plays a central role in virus morphogenesis and assembly via its interactions with other viral proteins.',\n                'Packages the positive strand viral genome RNA into a helical ribonucleocapsid (RNP) and plays a fundamental role during virion assembly through its interactions with the viral genome and membrane protein M']\n             }\n\ncovid_orf=pd.DataFrame(data=e)\ncm = sns.light_palette(\"red\", as_cmap=True)\n\ncovid_orf2 = covid_orf.style.background_gradient(cmap=cm)\ncovid_orf2","83566aa6":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,3))\ncovid_orf['ORF length'].plot.bar(color=('crimson','deepskyblue'), edgecolor='black')\nplt.xticks(rotation=9)\nplt.ylabel(\"Amino acid sequence\", weight='bold', fontsize=17)\nplt.yticks(fontsize=15)\nr=list(range(len(covid_orf)))\nplt.xticks(r, covid_orf.protein, weight='bold', fontsize=13)\nplt.xlabel(\"ORFs\", weight='bold', size=20)\nplt.title(\"COVID-19's ORFs\", weight='bold', size=20)\nplt.show()","f791e406":"covid_orf.iloc[2].to_frame().T","c9c9968a":"#spike= orf_list[2]\nspike='LEKTTELLFLVMFLLTTKRTMFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTRAGCLIGAEHVNNSYECDIPIGAGICASYQTQTNSPRRARSVASQSIIAYTMSLGAENSVAYSNNSIAIPTNFTISVTTEILPVSMTKTSVDCTMYICGDSTECSNLLLQYGSFCTQLNRALTGIAVEQDKNTQEVFAQVKQIYKTPPIKDFGGFNFSQILPDPSKPSKRSFIEDLLFNKVTLADAGFIKQYGDCLGDIAARDLICAQKFNGLTVLPPLLTDEMIAQYTSALLAGTITSGWTFGAGAALQIPFAMQMAYRFNGIGVTQNVLYENQKLIANQFNSAIGKIQDSLSSTASALGKLQDVVNQNAQALNTLVKQLSSNFGAISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMSECVLGQSKRVDFCGKGYHLMSFPQSAPHGVVFLHVTYVPAQEKNFTTAPAICHDGKAHFPREGVFVSNGTHWFVTQRNFYEPQIITTDNTFVSGNCDVVIGIVNNTVYDPLQPELDSFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELGKYEQYIKWPWYIWLGFIAGLIAIVMVTIMLCCMTSCCSCLKGCCSCGSCCKFDEDDSEPVLKGVKLHYT'\n\n#Calculate amino acids frequency\ndef char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\nprint(char_frequency(spike))\namino_acids=char_frequency(spike)\n\n#Get amino acids dataset\naas= pd.DataFrame(data=amino_acids, index=[0]).T.reset_index()\naas= aas.rename(columns={0: 'frequency', 'index': 'amino_acids'})\naas=aas.sort_values(by=['frequency'], ascending=True)","221217f5":"#plot the amino acids frequency\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,4))\na= aas['frequency'].plot.bar(color=sns.color_palette('Reds',len(aas)), edgecolor='black')\nplt.xticks(rotation=0)\nplt.ylabel(\"SPIKE: Amino acids frequency\", weight='bold')\nr=list(range(len(aas)))\nplt.xticks(r, aas.amino_acids, weight='bold')\nplt.xlabel(\"Amino acids\", size=15)\nplt.title(\"Spike protein\",  size=20)\nplt.show()","54c7a445":"spike_covid= 'MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTRAGCLIGAEHVNNSYECDIPIGAGICASYQTQTNSPRRARSVASQSIIAYTMSLGAENSVAYSNNSIAIPTNFTISVTTEILPVSMTKTSVDCTMYICGDSTECSNLLLQYGSFCTQLNRALTGIAVEQDKNTQEVFAQVKQIYKTPPIKDFGGFNFSQILPDPSKPSKRSFIEDLLFNKVTLADAGFIKQYGDCLGDIAARDLICAQKFNGLTVLPPLLTDEMIAQYTSALLAGTITSGWTFGAGAALQIPFAMQMAYRFNGIGVTQNVLYENQKLIANQFNSAIGKIQDSLSSTASALGKLQDVVNQNAQALNTLVKQLSSNFGAISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMSECVLGQSKRVDFCGKGYHLMSFPQSAPHGVVFLHVTYVPAQEKNFTTAPAICHDGKAHFPREGVFVSNGTHWFVTQRNFYEPQIITTDNTFVSGNCDVVIGIVNNTVYDPLQPELDSFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELGKYEQYIKWPWYIWLGFIAGLIAIVMVTIMLCCMTSCCSCLKGCCSCGSCCKFDEDDSEPVLKGVKLHYT'\nspike_sars= 'MFIFLLFLTLTSGSDLDRCTTFDDVQAPNYTQHTSSMRGVYYPDEIFRSDTLYLTQDLFLPFYSNVTGFHTINHTFGNPVIPFKDGIYFAATEKSNVVRGWVFGSTMNNKSQSVIIINNSTNVVIRACNFELCDNPFFAVSKPMGTQTHTMIFDNAFNCTFEYISDAFSLDVSEKSGNFKHLREFVFKNKDGFLYVYKGYQPIDVVRDLPSGFNTLKPIFKLPLGINITNFRAILTAFSPAQDIWGTSAAAYFVGYLKPTTFMLKYDENGTITDAVDCSQNPLAELKCSVKSFEIDKGIYQTSNFRVVPSGDVVRFPNITNLCPFGEVFNATKFPSVYAWERKKISNCVADYSVLYNSTFFSTFKCYGVSATKLNDLCFSNVYADSFVVKGDDVRQIAPGQTGVIADYNYKLPDDFMGCVLAWNTRNIDATSTGNYNYKYRYLRHGKLRPFERDISNVPFSPDGKPCTPPALNCYWPLNDYGFYTTTGIGYQPYRVVVLSFELLNAPATVCGPKLSTDLIKNQCVNFNFNGLTGTGVLTPSSKRFQPFQQFGRDVSDFTDSVRDPKTSEILDISPCSFGGVSVITPGTNASSEVAVLYQDVNCTDVSTAIHADQLTPAWRIYSTGNNVFQTQAGCLIGAEHVDTSYECDIPIGAGICASYHTVSLLRSTSQKSIVAYTMSLGADSSIAYSNNTIAIPTNFSISITTEVMPVSMAKTSVDCNMYICGDSTECANLLLQYGSFCTQLNRALSGIAAEQDRNTREVFAQVKQMYKTPTLKYFGGFNFSQILPDPLKPTKRSFIEDLLFNKVTLADAGFMKQYGECLGDINARDLICAQKFNGLTVLPPLLTDDMIAAYTAALVSGTATAGWTFGAGAALQIPFAMQMAYRFNGIGVTQNVLYENQKQIANQFNKAISQIQESLTTTSTALGKLQDVVNQNAQALNTLVKQLSSNFGAISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMSECVLGQSKRVDFCGKGYHLMSFPQAAPHGVVFLHVTYVPSQERNFTTAPAICHEGKAYFPREGVFVFNGTSWFITQRNFFSPQIITTDNTFVSGNCDVVIGIINNTVYDPLQPELDSFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELGKYEQYIKWPWYVWLGFIAGLIAIVMVTILLCCMTSCCSCLKGACSCGSCCKFDEDDSEPVLKGVKLHYT'","10791df9":"Now that we have the protein sequences, we will use the BLAST search.\n\nBLAST (basic local alignment search tool) is an algorithm and program for comparing primary biological sequence information, such as the amino-acid sequences of proteins or the nucleotides of DNA and\/or RNA sequences. A BLAST search enables a researcher to compare a subject protein or nucleotide sequence (called a query) with a library or database of sequences, and identify library sequences that resemble the query sequence above a certain threshold.\n\nIn other words, we will try to find the protein sequences already available in the databases that are the most similar to our protein sequences. *(Hint: In this case, most probably the proteins that will have the highest similarity with our Covid-19 belong to the SARS coronavirus or Bat coronavirus).*\n\n**An example of how BLAST works:**\n- PSI-BLAST webpage: [https:\/\/www.ebi.ac.uk\/Tools\/sss\/psiblast\/](https:\/\/www.ebi.ac.uk\/Tools\/sss\/psiblast\/)\n- Copy\/Paste our 83 amino acid chain : **AQADEYELMYSFVSEETGTLIVNSVLLFLAFVVFLLVTLAILTALRLCAYCCNIVNVSLVKPSFYVYSRVKNLNSSRVPDLLV**\n- The figure below shows the result of our 83 amino acids chain: It's the ***Envelope small membrane protein!***\n\n![](https:\/\/i.ibb.co\/sCzM7J2\/Screen-Shot-2020-05-03-at-17-57-25.png)\n\n>The first result has 100% match because it belongs to the covid-19 genome, an information that we already know. In order to know which organism has the highest similarity with our protein, we go to the next result with 95% match: Human SARS coronavirus (SARS-CoV). In other words, COVID-19 has almost the same envelope small membrane protein as the SARS coronavirus.","aa5f33be":" ####  BLAST search results: COVID-19 proteins","eb19aba1":"### 2- Transcription\n***\nTranscription is the first step in gene expression. It involves copying a gene's DNA sequence to make an RNA molecule.\n- Basically the mRNA is a copy of our DNA. However, in RNA, a base called uracil (U) replaces thymine (T) as the complementary nucleotide to adenine (that's the only difference, T is replaced by U).","3095c8a3":"### 5- Spike glycoprotein analysis:\n***\nThe spike glycoprotein (or just \u201cspike protein\u201d) is the familiar spike that studs the surface of the coronavirus, giving it the appearance of a crown to electron microscopy, hence \u201ccorona\u201d (Latin: crown).\n\n![](https:\/\/resources.rndsystems.com\/images\/site\/coronavirus-LP-graphic-2.jpg)\n\nThe S protein is responsible for facilitating entry of the CoV into the target cell. It is composed of a short intracellular tail, a transmembrane anchor, and a large ectodomain that consists of a receptor binding S1 subunit and a membrane-fusing S2 subunit. In the previous section, our sequence analysis of the SARS-CoV-2 S protein genome showed that it was only 76% identical with the SARS-CoV S protein [[14]](https:\/\/www.rndsystems.com\/resources\/articles\/ace-2-sars-receptor-identified).","3b7e80dd":"#### RECAP:\n\n    1- We started our analysis with the whole genome, that has 29903 nucleotides.\n \n    2- Transcribed the DNA or copied it out to an mRNA.\n\n    3- The mRNA was translated to 9967 amino acids.\n \n    4- The amino acid sequences were split at the stop codons.\n \n    5- We ended up with 775 amino acid chains.\n \n \nIt's worth to mention that not all the amino acids sequences are proteins. Only the sequences with more than 20 amino acids code for functional proteins. The short amino acid sequences are oligopeptides and have other  functionalities. Here, we will focus on the chains with more than 20 amino acid chains: **Proteins**.\n\n*(I filter and keep just the proteins with more than 50 amino acids to have a shorter list of proteins to analyse).*","b328bd68":"Before moving forward, let's breakdown this long string to single characters and see the distribution of the nucleotides (A,T,C,G) over the Covid19's DNA.","c024d9da":"*First observation:* The frequency of the nucleotides **A** and **T** is higher than the frequency of **C** and **G**. This is due to the nucleotides pairing.\n\nThis sequence of genetic bases contain all the information encoded in the virus. Understanding this genetic information is the key to find cures and vaccines. So, the question here is: **How do we extract information from this long sequence of letters?**\n\nThis process is called **gene expression**: Gene expression is the process by which **information** from a gene is used in the synthesis of a functional gene **product**. These products are often **proteins**.\n\n- **TRANSCRIPTION**: DNA is copied out into a messenger RNA (mRNA)\n- **TRANSLATION**: mRNA is translated into amino acids\n- **AMINO ACID FOLDING**: A sequence of 20 or more amino acids *(the building blocks of proteins)* form a protein.\n\n![](https:\/\/i.ibb.co\/KjMLgdm\/Sample-Essay-on-Regulation-of-gene-expression.jpg)\n\n","42e4049b":"In order to see the difference, we align the covid-19 DNA and mRNA sequences. We can see that the mRNA is an identical copy with the **T** base replaced by **U**","2921c84c":"> #### 4.3 ORFs identification:","3a24dd74":"The information in DNA is stored as a code made up of four chemical bases: adenine **A**, guanine **G**, cytosine **C**, and thymine **T** *(figure below)*. The order, or sequence, of these bases determines the information available for building and maintaining an organism, similar to the way in which letters of the alphabet appear in a certain order to form words and sentences. \n\nConsider it, as if it was another language just like English or French, in this case, it has just 4 alphabet letters: **A T G C**, where a sequence of those letters, say **ATGCGCAAGTA**, is responsible of a functionality in your body, for example the secretion of hormones that control your mood.\n\n*(The figure below shows the sequence of **A T C G** in the DNA)*\n\n![]()\n\n<div>\n<img src=\"http:\/\/www.nature.com\/scitable\/content\/ne0000\/ne0000\/ne0000\/ne0000\/104944953\/73_1_2.jpg\" width=\"600\"\/>\n<\/div>\n\n","af9b9a95":"- We have several chains of a total of 9967 amino acids separated with stop codons * \n- The split() function splits the sequence at any stop codon and keeps the amino acids chains separated. This makes it easier for further analysis.\n","3b6d338e":"> #### 4.4 BLAST search results: COVID-19 ORFs:","80ee542c":"### 3- Translation\n***\nTranslation is the process that takes the information passed from DNA as messenger RNA and turns it into a series of **amino acids**.\n\nIt is essentially a translation from one code **(nucleotide A T C G sequence)** to another code **(amino acid sequence)**.\n\nHow does this translation happen? As in any language, we need a dictionary for translation, in this case the amino acid dictionary is the table below. The nucleotides are read in groups of three \"AUG GCC CAG UUA ...\". Each triplet is called a codon and codes for a specific amino acid.\n\n\n\n\n<div>\n<img src=\"https:\/\/www.3dmoleculardesigns.com\/3DMD-Files\/Posters\/Codon-photo-gallery\/GeneticCodonPoster.jpg?\" width=\"700\"\/>\n<\/div>\n\nThere are 61 codons for 20 amino acids, and each of them is \"read\" to specify a certain amino acid out of the \n20 commonly found in proteins. \n\nOne codon, AUG, specifies the amino acid methionine and also acts as a start codon to signal the start of protein construction.\n\nThere are three more codons that do not specify amino acids. These stop codons, UAA, UAG, and UGA, tell the cell when a polypeptide is complete. All together, this collection of codon-amino acid relationships is called the genetic code, because it lets cells \u201cdecode\u201d an mRNA into a chain of amino acids.\n\nLuckily, with the translate() function, python does translate the mRNA to amino acids chains. Chains are separated with a * which is the stop codon ( UAA, UAG and UGA) [[5]](https:\/\/www.khanacademy.org\/science\/biology\/gene-expression-central-dogma\/translation-polypeptides\/a\/translation-overview).","1f16f5a5":"\n\nThe figure above shows the ORFs in the Covid-19 genome, mainly: **ORF1ab, ORF3a, E, M, S and N.** *(We will analyze those ORFs in the next section in details to find out their functionalities.*\n\n>**GC content** (or guanine-cytosine content) is the percentage of nitrogenous bases in a DNA or RNA molecule that are either guanine (G) or cytosine (C). Evidence of GC ratio with that of length of the coding region of a gene has shown that the length of the coding sequence is directly proportional to higher G+C content.[[18]](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC2292697\/) This has been pointed to the fact that the stop codon has a bias towards A and T nucleotides, and, thus, the shorter the sequence the higher the AT bias. So, next thing to do: Find those coding regions *CDS.*\n\n> #### 4.2 Finding the coding regions CDS in the Covid-19 genome:\n\nThe identification of coding sequences (CDS) is an important step in the functional annotation of genes. CDS is a sequence of nucleotides that corresponds with the sequence of amino acids in a protein. A typical CDS starts with ATG and ends with a stop codon.\n\nThe code below highlights the coding regions CDS in red.","70af3014":"The table above shows the BLAST search results of the 5 amino acid chains obtained from the COVID-19 genome. \nAs expected, all the viral proteins have high similarities with viral proteins in SARS and Bat coronaviruses.\n\n\n## 4- Open Reading Frames:\n***\n\nAn open reading frame is a portion of a DNA molecule that, when translated into amino acids, contains no stop codons. The genetic code reads DNA sequences in groups of three base pairs, which means that a double-stranded DNA molecule can read in any of six possible reading frames--three in the forward direction and three in the reverse. A long open reading frame is likely part of a gene [[7]](https:\/\/www.genome.gov\/genetics-glossary\/Open-Reading-Frame).\n\n> ### 4.1 Covid-19 ORFs visualization:\n\nThe code below does the trancription and translation to our Covid-19 genome (Genbank format). It shows the ORFs in the genome sequence and the GC% content. \n\n\n<h4>  The graph showing the GC% is important to understand where the coding regions are in the genome. <span class=\"label label-info\">Information<\/span><\/h4>\n\n<h5>Visualization requires installing the dna-features_viewer library. <span class=\"label label-warning\">Important<\/span><\/h5>\n\n<h5>Parsing GFF files requires installing the BCBio library. <span class=\"label label-warning\">Important<\/span><\/h5>\n\n\n","fb76773f":"# References:\n***\n[1] Viral proteins https:\/\/www.nature.com\/subjects\/viral-proteins\n\n[2] A new coronavirus associated with human respiratory disease in China https:\/\/www.nature.com\/articles\/s41586-020-2008-3#rightslink\n\n[3] What is DNA? https:\/\/ghr.nlm.nih.gov\/primer\/basics\/dna\n\n[4] Gene expression figure https:\/\/astrobiochem.wordpress.com\/grade-10-biology\/ch-11-gene-expression\/\n\n[5] Overview of Translation: https:\/\/www.khanacademy.org\/science\/biology\/gene-expression-central-dogma\/translation-polypeptides\/a\/translation-overview\n\n[6] 3DMD geneti codon poster https:\/\/www.3dmoleculardesigns.com\/Education-Products\/Genetic-Codon-Poster.htm\n\n[7] NIH. Open Reading Frames https:\/\/www.genome.gov\/genetics-glossary\/Open-Reading-Frame\n\n[8] Protection from SARS coronavirus conferred by live measles vaccine expressing the spike glycoprotein. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/24606680\n\n[9] Coronavirus figure https:\/\/www.prosci-inc.com\/covid-19\/\n\n[10] Viral Protein: Definition, Components & Functions https:\/\/study.com\/academy\/lesson\/viral-protein-definition-components-functions.html\n\n[11] DNA figure 1 https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e2\/Eukaryote_DNA-en.svg\/1280px-Eukaryote_DNA-en.svg.png\n\n[12] DNA figure 2 http:\/\/www.nature.com\/scitable\/content\/ne0000\/ne0000\/ne0000\/ne0000\/104944953\/73_1_2.jpg\n\n[13] https:\/\/www.kaggle.com\/freddieta\/rna-similarity-sars-mers-cov2\n\n[14] ACE-2: The Receptor for SARS-CoV-2 https:\/\/www.rndsystems.com\/resources\/articles\/ace-2-sars-receptor-identified\n\n[15] Prabakaran P, Gan J, Feng Y, Zhu Z, Choudhry V, et al. Structure of severe acute respiratory syndrome coronavirus receptor-binding domain complexed with neutralizing antibody. J Biol Chem. 2006;281:15829\u201315836. [[PubMed]](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/16597622) \n\n[16] Hwang WC, Lin Y, Santelli E, Sui J, Jaroszewski L, et al. Structural basis of neutralization by a human anti-severe acute respiratory syndrome spike protein antibody, 80R. J Biol Chem. 2006;281:34610\u201334616. [[PubMed]](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/16954221) \n\n[17] DNA Features viewer https:\/\/github.com\/Edinburgh-Genome-Foundry\/DnaFeaturesViewer\n\n[18] Pozzoli U, Menozzi G, Fumagalli M, et al. (2008). https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC2292697\/\n\n[19] <a href='https:\/\/www.freepik.com\/photos\/background'>Background photo created by kjpargeter - www.freepik.com<\/a>","d1361020":"# COVID-19: Viral proteins identification\n\n***\n![](https:\/\/miro.medium.com\/max\/700\/1*7pJ7RB9UcKH12gGBi3MBEQ.png)<div align=\"center\"><a href=\"https:\/\/www.freepik.com\/photos\/background\"><\/div>\n\n***\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">PROJECT CONTENT<\/h3>\n    \n> ####  Introduction\n> ####  Materials and methods\n> ####  1. COVID-19: Genetic information\n> ####  2. Transcription\n> ####  3. Translation\n> ####  4. Open Reading Frames\n***\n\n## Introduction\nViral proteins are proteins generated by a virus. As viruses hijack much of their host's cellular machinery to support their life cycle, they encode very few of their own genes; viral proteins are therefore generally structural components, for the viral envelope and capsid [[1]](https:\/\/www.nature.com\/subjects\/viral-proteins).\n\n\nIn this study, we will try to identify those viral proteins in the novel COVID-19 genome, the genome was sequenced from a sample of bronchoalveolar lavage fluid from a single patient who was a worker at the market and who was admitted to the Central Hospital of Wuhan on 26 December 2019. Comparative analysis of the COVID-19 viral proteins with the SARS, MERS and other bat coronaviruses proteins will be carried in this study.\n\n\n\n## Materials and methods\n* COVID-19 coronavirus genome sequence from the paper: [A new coronavirus associated with human respiratory disease in China](https:\/\/www.nature.com\/articles\/s41586-020-2008-3#rightslink).\n\n* COVID-19 genome analysis was carried with [Biopython](https:\/\/biopython.org) and [DNA features viewer](https:\/\/github.com\/Edinburgh-Genome-Foundry\/DnaFeaturesViewer) libraries.\n\n* [PSI-BLAST](https:\/\/www.ebi.ac.uk\/Tools\/sss\/psiblast\/) search was used to compare our COVID-19 proteins with the SARS and Bat coronavirus proteins.\n","dae1eb54":"## 1- COVID-19: Genetic information\n***\n   \n   Genome sequencing has increasingly become an important tool for studying disease outbreaks. The covid-19 genome used in this study was sequenced from a sample of bronchoalveolar lavage fluid from a single patient who was a worker at the market and who was admitted to the Central Hospital of Wuhan on 26 December 2019 [[2]](https:\/\/www.nature.com\/articles\/s41586-020-2008-3#rightslink). \n\nWe start our analysis by reading the DNA sequence:","67e8d8d8":"> ### 1.1- What is DNA?\n***\n\nDNA is the hereditary material in humans and almost all other organisms. Nearly every cell in a person\u2019s body has the same DNA. Most DNA is located in the cell nucleus (where it is called nuclear DNA), but a small amount of DNA can also be found in the mitochondria (where it is called mitochondrial DNA or mtDNA) [[3]](https:\/\/ghr.nlm.nih.gov\/primer\/basics\/dna).\n\n\n\n<div>\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e2\/Eukaryote_DNA-en.svg\/1280px-Eukaryote_DNA-en.svg.png\" width=\"600\"\/>\n<\/div>\n\n","7408ceb2":"The Covid-19 genome has **6 ORFs with more than 200 amino acids.** We run a BLAST search to find out what proteins do those sequences code for. *(Find the the full length sequences in the output button below).*","e7f5ce3c":"As shown above, the covid-19 genome has 29903 genetic letters (sequence of **A T C** and **G**), to have an idea of how small it is, the human genome has more than 3 billion genetic letters. The small size of the viruses and microorganisms make them easier to study compared to the human genome.\n\nThe code below shows the Covid-19's first 200 genetic letters (out of 29903 letters).","d2a3cd40":"We did a genome analysis and managed to find the main COVID-19 viral proteins *(figure below)* **: Spike protein (S), Nucleoprotein (N), Membrane protein (M), Envelope protein (E) and the replicase polyprotein.** \n\n![](https:\/\/d1gk4lfg3bst7c.cloudfront.net\/media\/wysiwyg\/2019-nCoV-figure-ad_1.png)\n\nThe Open Coding Frames coded for the most important viral proteins in the COVID-19: Replicase polyprotein, Nucleoprotein, Membrane protein and mainly the Spike glycoprotein. The Spike glycoprotein (S) is the main protein candidate for vaccine development. In studies related to SARS-CoV, vaccine candidates were developped expressing the **membrane-anchored SARS-CoV spike (S) protein**. [[8]](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/24606680)","0c200021":"The figure above highlights in red the coding regions CDS in the Covid-19 genome. The main CDS are among the ORFs already found in the previous section, which include the ORF1ab, ORF3a, S protein, M protein and N protein. Let's dig in more and try to find out more information about those ORFs, their coding regions and the functionality of their coding proteins.\n\nThe function below finds the Open Reading Frames in the COVID-19 genome. *We set the minimum protein length to 200 amino acids*. \n\n\n\n<h6>In other words, just the ORFs with an amino acid sequence greater than 200 will be considered for further analysis <span class=\"label label-danger\">Important<\/span><\/h6>","31dccca3":"Analysis of the receptor binding motif (RBM) in the S protein showed that most of the amino acid residues essential for receptor binding were conserved between SARS-CoV and SARS-CoV-2, suggesting that the 2 CoV strains use the same host receptor for cell entry.12 The entry receptor utilized by SARS-CoV is [Angiotensin-Converting Enzyme 2](https:\/\/www.rndsystems.com\/target\/ace-2) (ACE-2) [[14]](https:\/\/www.rndsystems.com\/resources\/articles\/ace-2-sars-receptor-identified).\n\nThe key to find a vaccine or a drug to neutralize Covid-19 is the study of the structure of the spike-ACE2 complex. Studies in 2007 on the SARS-CoV have shown that two neutralizing antibodies bound to the SARS spike receptor-binding domain have been solved [[15]](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/16597622), [[16]](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/16954221) showing that blocking of the receptor binding domain, preventing attachment of virions to cell-surface ACE2, is the likely mechanism of virus neutralization by these antibodies.\n\n> #### Amino acids frequency in the spike protein:"}}