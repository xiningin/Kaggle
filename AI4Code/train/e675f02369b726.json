{"cell_type":{"0508460c":"code","2e003d52":"code","9a0a9b1d":"code","0064fe22":"code","8f56291f":"code","a6903799":"code","d2266dae":"code","0552ef40":"code","7b66f360":"code","1900761e":"code","2efcb32b":"code","02de6ef5":"code","e66795b6":"code","76766ad9":"markdown","af8dcdc6":"markdown","bff7ed52":"markdown","d93dda5f":"markdown"},"source":{"0508460c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2e003d52":"# First we create a dataframe with the raw sales data, which we'll reformat later\nDATA = '..\/input\/'\nsales = pd.read_csv(DATA+'sales_train.csv', parse_dates=['date'], infer_datetime_format=True, dayfirst=True)\nsales.head()","9a0a9b1d":"# Let's also get the test data\ntest = pd.read_csv(DATA+'test.csv')\ntest.head()","0064fe22":"# Now we convert the raw sales data to monthly sales, broken out by item & shop\n# This placeholder dataframe will be used later to create the actual training set\ndf = sales.groupby([sales.date.apply(lambda x: x.strftime('%Y-%m')),'item_id','shop_id']).sum().reset_index()\ndf = df[['date','item_id','shop_id','item_cnt_day']]\ndf = df.pivot_table(index=['item_id','shop_id'], columns='date',values='item_cnt_day',fill_value=0).reset_index()\ndf.head()","8f56291f":"# Merge the monthly sales data to the test data\n# This placeholder dataframe now looks similar in format to our training data\ndf_test = pd.merge(test, df, on=['item_id','shop_id'], how='left')\ndf_test = df_test.fillna(0)\ndf_test.head()","a6903799":"# Remove the categorical data from our test data, we're not using it\ndf_test = df_test.drop(labels=['ID', 'shop_id', 'item_id'], axis=1)\ndf_test.head()","d2266dae":"# Now we finally create the actual training set\n# Let's use the '2015-10' sales column as the target to predict\nTARGET = '2015-10'\ny_train = df_test[TARGET]\nX_train = df_test.drop(labels=[TARGET], axis=1)\n\nprint(y_train.shape)\nprint(X_train.shape)\nX_train.head()","0552ef40":"# To make the training set friendly for keras, we convert it to a numpy matrix\n# X_train = X_train.as_matrix()\n# X_train = X_train.reshape((214200, 33, 1))\n\n# y_train = y_train.as_matrix()\n# y_train = y_train.reshape(214200, 1)\n\nprint(y_train.shape)\nprint(X_train.shape)\n\n# X_train[:1]","7b66f360":"# Lastly we create the test set by converting the test data to a numpy matrix\n# We drop the first month so that our trained LSTM can output predictions beyond the known time range\nX_test = df_test.drop(labels=['2013-01'],axis=1)\n# X_test = X_test.as_matrix()\n# X_test = X_test.reshape((214200, 33, 1))\nprint(X_test.shape)","1900761e":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","2efcb32b":"# Create the model using the NestedLSTM class - two layers are a good starting point\n# Feel free to play around with the number of nodes & other model parameters\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=33, init='normal', activation='relu'))\nmodel.add(Dense(32, init='normal', activation='relu'))\nmodel.add(Dense(16, init='normal', activation='relu'))\nmodel.add(Dense(8, init='normal', activation='relu'))\nmodel.add(Dense(4, init='normal', activation='relu'))\nmodel.add(Dense(1, init='normal'))\nmodel.compile(loss='mean_squared_error', optimizer = 'adam')\n\n\n# model = Sequential()\n# model.add(NestedLSTM(64, input_shape=(33, 1), depth=3, dropout=0.2, recurrent_dropout=0.2))\n# model.add(Dense(1))\n\n# # The adam optimizer works pretty well, although you might try RMSProp as well\n# model.compile(loss='mse',\n#               optimizer='adam',\n#               metrics=['mean_squared_error'])\nmodel.summary()","02de6ef5":"# It's training time!\nBATCH = 2000\n\nprint('Training time, it is...')\nmodel.fit(X_train, y_train,\n          batch_size=BATCH,\n          epochs=10\n         )","e66795b6":"# Get the test set predictions and clip values to the specified range\ny_pred = model.predict(X_test).clip(0., 20.)\n\n# Create the submission file and submit!\npreds = pd.DataFrame(y_pred, columns=['item_cnt_month'])\npreds.to_csv('submission.csv',index_label='ID')","76766ad9":"## Build and Train the model","af8dcdc6":"# Predicting sales with a nested KerasRegressor","bff7ed52":"## Get test set predictions and Create submission","d93dda5f":"## Create training and test sets"}}