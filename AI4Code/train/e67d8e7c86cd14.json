{"cell_type":{"375decbd":"code","fd3a1a92":"code","861f695c":"code","296bdac7":"code","c819700b":"code","47c9ad45":"code","143ccb09":"code","a3c1fb9e":"code","682c47af":"code","ce664dad":"code","a568ce83":"code","06fbf679":"code","3a5d925f":"code","7b5841ef":"code","7f07c5f7":"code","4e6c7e6f":"code","ccb60f25":"code","bf70e749":"code","8e2f24de":"code","a113c866":"code","d9a2e72c":"code","e6660ef9":"code","48899c23":"code","40e3ad90":"code","c1e50001":"code","5b2def9a":"code","99ce8de2":"code","30392f3f":"code","927b23a3":"code","576a3a54":"code","c3e25445":"code","2b728679":"code","a9e32b5d":"code","221b1d6e":"code","16a976c5":"code","8946d1ce":"code","16f9fd04":"code","2a8a93c0":"code","bd587ed6":"markdown","a70d0fd5":"markdown","deefbb81":"markdown","117c8388":"markdown","82c1332d":"markdown","693ff0ef":"markdown","eda7b943":"markdown"},"source":{"375decbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fd3a1a92":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","861f695c":"train.head()","296bdac7":"train.isnull().sum()","c819700b":"train.drop(['Name','Ticket', 'Cabin'], axis = 1, inplace = True)","47c9ad45":"test.head()","143ccb09":"test.isnull().sum()","a3c1fb9e":"test.drop(['Name','Ticket', 'Cabin'], axis=1, inplace=True)","682c47af":"train.describe()","ce664dad":"test.describe()","a568ce83":"train['Age'].fillna(train['Age'].median(), inplace=True)\ntest['Age'].fillna(test['Age'].median(), inplace=True)\ntrain['Embarked'].fillna('S', inplace=True)\ntest['Fare'].fillna(test['Fare'].median(), inplace=True)","06fbf679":"train.loc[ train['Age'] <= 16, 'Age']                        = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age']                         = 4\n\ntest.loc[ test['Age'] <= 16, 'Age']                       = 0\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2\ntest.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3\ntest.loc[ test['Age'] > 64, 'Age']                        = 4","3a5d925f":"train.head()","7b5841ef":"test.head()","7f07c5f7":"train.loc[ train['Fare'] <= 7.91, 'Fare']                             = 0\ntrain.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1\ntrain.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2\ntrain.loc[ train['Fare'] > 31, 'Fare']                                = 3\ntrain['Fare'] = train['Fare'].astype(int)\n\ntest.loc[ test['Fare'] <= 7.91, 'Fare']                            = 0\ntest.loc[(test['Fare'] > 7.91) & (test['Fare'] <= 14.454), 'Fare'] = 1\ntest.loc[(test['Fare'] > 14.454) & (test['Fare'] <= 31), 'Fare']   = 2\ntest.loc[ test['Fare'] > 31, 'Fare']                               = 3\ntest['Fare'] = test['Fare'].astype(int)","4e6c7e6f":"train.loc[ train['Embarked'] == 'C', 'Embarked'] = 0\ntrain.loc[ train['Embarked'] == 'Q', 'Embarked'] = 1\ntrain.loc[ train['Embarked'] == 'S', 'Embarked'] = 3\n\ntest.loc[ test['Embarked'] == 'C', 'Embarked'] = 0\ntest.loc[ test['Embarked'] == 'Q', 'Embarked'] = 1\ntest.loc[ test['Embarked'] == 'S', 'Embarked'] = 3","ccb60f25":"train.loc[ train['Sex'] == 'Female', 'Sex'] = 0\ntrain.loc[ train['Sex'] == 'Male', 'Sex'] = 1\n\ntest.loc[ test['Sex'] == 'Female', 'Sex'] = 0\ntest.loc[ test['Sex'] == 'Male', 'Sex'] = 1","bf70e749":"train['Family'] = train['Parch'] + train['SibSp']\n\ntest['Family'] = test['Parch'] + test['SibSp']","8e2f24de":"train = pd.concat([train, pd.get_dummies(train['Pclass'], prefix='Pclass'),\n                     pd.get_dummies(train['Sex'], prefix='Sex'),\n                     pd.get_dummies(train['Family'], prefix='Family'),\n                     pd.get_dummies(train['Embarked'], prefix='Embarked'),\n                     pd.get_dummies(train['Age'], prefix='Age'),\n                     pd.get_dummies(train['Fare'], prefix='Fare')],\n                    axis=1)\ntest = pd.concat([test, pd.get_dummies(test['Pclass'], prefix='Pclass'),\n                     pd.get_dummies(test['Sex'], prefix='Sex'),\n                     pd.get_dummies(test['Family'], prefix='Family'),\n                     pd.get_dummies(test['Embarked'], prefix='Embarked'),\n                     pd.get_dummies(test['Age'], prefix='Age'),\n                     pd.get_dummies(test['Fare'], prefix='Fare')],\n                    axis=1)","a113c866":"train.drop(['Pclass',  'Sex', 'Age', 'Fare', 'SibSp','Parch', 'Embarked', 'PassengerId',  'Family'], axis=1, inplace=True)\ntest.drop(['Pclass', 'Sex', 'Age', 'Fare', 'SibSp','Parch', 'Embarked', 'PassengerId',  'Family'], axis=1, inplace=True)","d9a2e72c":"train.shape, test.shape","e6660ef9":"train.head(25)","48899c23":"train.columns, test.columns","40e3ad90":"y = train['Survived']\ntrain.drop('Survived', axis=1, inplace=True);","c1e50001":"train.shape, test.shape","5b2def9a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score","99ce8de2":"rf = RandomForestClassifier()\nrf.fit(train, y)\ny_rf = rf.predict(test)\nrf.score(train, y) ","30392f3f":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(train, y)","927b23a3":"dt_y = dt.predict(test)\ndt.score(train,y)","576a3a54":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial')\nlr.fit(train, y)","c3e25445":"lr_y = lr.predict(test)\nlr.score(train,y)","2b728679":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(train, y)","a9e32b5d":"knn_y = knn.predict(test)\nknn.score(train,y)","221b1d6e":"from sklearn.naive_bayes import MultinomialNB\n\nnb = MultinomialNB()\nnb.fit(train,y)","16a976c5":"nb_y = nb.predict(test)\nnb.score(train,y)","8946d1ce":"from sklearn.svm import SVC\nsvc = SVC(kernel='linear')\nsvc.fit(train, y)","16f9fd04":"svc_y = svc.predict(test)\nsvc.score(train,y)","2a8a93c0":"final= pd.DataFrame()\ntest2 = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nfinal['PassengerId'] = test2['PassengerId']\nfinal['Survived'] = dt_y\nfinal.to_csv('submission.csv',index=False)","bd587ed6":"Let's take a look at how many rows are null in each column. ","a70d0fd5":"Now we can start to do some feature engineering. We know that there are several ages within the Age column. In order to remedy this, we should dived the ages into buckets. The youngest person in the dataset is younger than 1 year old. The oldest person is 76 years old. We can devide the ages into buckets containing 20 years. The buckets will be 20 and younger, between 20 and 40, and 60+.","deefbb81":"Now we can add the Parch and SibSp columns together to determine if a passenger was part of a family or not. The ","117c8388":"From above, we can see that age and cabin have several null rows. We will remove the cabin and ticket columns. We cannot replace the NaN columns in the Cabin column since the values are not numeric, and we do not know what cabin each person stayed in. We will remove the ticket column due to the fact every person has a unique ticket id. We will also remove the Name column, since it is not relevant.","82c1332d":"We will now look at several different classification models to determine what model performs the best.","693ff0ef":"The same will be done for Fare.","eda7b943":"Now, we will fill the null columns for age. We can simply take the median age and use it to fill in the nulls. we will do the same for Fare. As for the null in Embark, we will use the label 'S'."}}