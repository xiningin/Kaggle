{"cell_type":{"c76e458d":"code","7869167b":"code","bd203769":"code","e9abc8bd":"code","99c9b5e4":"code","d43b0f02":"code","3aa3b001":"code","fe0b075b":"code","d35c62c4":"code","85097307":"code","e95cd32b":"code","72e0607c":"code","a0d606fd":"code","76fa213b":"code","66cd1f62":"code","4b7563cd":"code","e2e18257":"code","521beb56":"code","52f8a352":"code","b09455a1":"code","5fc1d46c":"code","1ff96128":"code","5851456a":"code","5ac6f52d":"code","e2f3f828":"markdown"},"source":{"c76e458d":"import numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","7869167b":"#load data\ntrain = pd.read_csv(\"..\/input\/knn-datasets\/hw2test.csv\")\ntest = pd.read_csv(\"..\/input\/knn-datasets\/hw2test.csv\")","bd203769":"train.rename(columns = {\"Class\": \"Target\"}) ","e9abc8bd":"train.head()","99c9b5e4":"test.head()","d43b0f02":"train.info()","3aa3b001":"test.info()","fe0b075b":"print(train.shape)\nprint(test.shape)","d35c62c4":"y_train = train.get(\"target\")\nX_train = train.drop('target',axis=1).values","85097307":"y_test = test.get(\"target\")\nX_test = test.drop('target',axis=1).values","e95cd32b":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","72e0607c":"from sklearn import preprocessing\nX_train = preprocessing.StandardScaler().fit(X_train).transform(X_train.astype(float))\nX_test = preprocessing.StandardScaler().fit(X_test).transform(X_test.astype(float))","a0d606fd":"train.info()","76fa213b":"train.head()","66cd1f62":"knn_model = KNeighborsClassifier().fit(X_train,y_train)","4b7563cd":"knn_model","e2e18257":"y_pred = knn_model.predict(X_test)","521beb56":"accuracy_score(y_test, y_pred)","52f8a352":"print(classification_report(y_test, y_pred))","b09455a1":"k_range = range(1,26,2)\nscores = []\nscores2 = []\nfor k in k_range:\n   \n        knn = KNeighborsClassifier(n_neighbors=k)\n        knn.fit(X_train, y_train)\n        y_pred = knn.predict(X_test)\n        y_pred2 = knn.predict(X_train)\n        scores.append(metrics.accuracy_score(y_test, y_pred))\n        scores2.append(metrics.accuracy_score(y_train, y_pred2))\n\nprint(scores)\nprint(scores2)","5fc1d46c":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.title('k-NN Varying number of neighbors')\nplt.plot(k_range, scores, label='Testing Accuracy')\nplt.plot(k_range, scores2, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","1ff96128":"max(enumerate(scores,1), key = lambda X_train:X_train[1])","5851456a":"max(enumerate(scores2,1), key = lambda X_test:X_test[1])","5ac6f52d":"#for k=5 best result\n#Training the model using KNN\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_train)\nprint(metrics.accuracy_score(y_train, y_pred))\n\ny_pred2 = knn.predict(X_test)\nknn.fit(X_test, y_test)\ny_pred = knn.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred2))","e2f3f828":"- load these data using\n     import pandas as pd\n     train = pd.read_csv(\"hw2train.csv\")\n     test = pd.read_csv(\"hw2test.csv\")\n- use different k values (i.e., 1, 3, 5, 7, 9, ..., 21, ...) to train kNN classifiers\n- for each k value, find the classification accuracy on train data and test data\n- display training and test classification accuracy values in a plot (x axis will show k, in y axis you will have two plots showing training and test accuracies)\n- determine best k\n- train on training data using best k, display the kNN performance on training and test data"}}