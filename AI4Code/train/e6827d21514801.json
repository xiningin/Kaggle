{"cell_type":{"eec6aa9e":"code","7d2cbf59":"code","be9b9686":"code","e2f09916":"code","86f2d5b6":"code","9c3cdb1b":"code","744cff5c":"code","039fb830":"code","9568ddbb":"code","5c55151e":"code","9f4443da":"code","b90ce2c2":"code","4eca7ba4":"code","45558ea0":"code","f2b7f0de":"code","2edfad06":"code","3b986fe8":"code","148b6c7c":"code","1164c8f2":"markdown"},"source":{"eec6aa9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d2cbf59":"# Importing Essential Libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns, pystan, statsmodels.api as sm\nfrom sklearn import linear_model","be9b9686":"# Reading the dataset\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","e2f09916":"# Understanding the training dataset\n#train_data\n#len(train_data)\n#train_data.head(2)\n#train_data.info()\n#train_data.dtypes\n#train_data.select_dtypes(include=int)\n#train_data.YearBuilt\n#train_data.select_dtypes(include=int)","86f2d5b6":"# Histogram for the Year in which the house was built\nn, bins, patches = plt.hist(x=train_data.YearBuilt, bins='auto', color='#b3b3ff', alpha=0.7, rwidth=0.85)\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('Years')\nplt.ylabel('Number of houses built')\nplt.title('Number of houses built every decade')\nmaxfreq = n.max()\nplt.ylim(ymax=np.ceil(maxfreq \/ 10) * 10 if maxfreq % 10 else maxfreq + 10) # Set a clean upper y-axis limit.","9c3cdb1b":"# Histogram for the Year in which the house was remodeled\nn, bins, patches = plt.hist(x=train_data.YearRemodAdd, bins='auto', color='#a2ffa2', alpha=0.7, rwidth=0.85)\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('Years')\nplt.ylabel('Number of houses remodelled')\nplt.title('Number of houses remodelled every decade')\nmaxfreq = n.max()\nplt.ylim(ymax=np.ceil(maxfreq \/ 10) * 10 if maxfreq % 10 else maxfreq + 10) # Set a clean upper y-axis limit.","744cff5c":"# Histogram for the Year in which the house was remodeled\nage_of_remodel = train_data.YearRemodAdd - train_data.YearBuilt\nn, bins, patches = plt.hist(x=age_of_remodel, bins=10, color = '#ffff0f', alpha=0.7, rwidth=0.85)\nplt.grid(axis='y', alpha=0.75)\nplt.xlim(5,120)\nplt.ylim(0,150)\nplt.xlabel('Years')\nplt.ylabel('Number of houses remodelled')\nplt.title('Years since the house was built to most recent remodel')\nmaxfreq = n.max()\n#plt.ylim(ymax=np.ceil(maxfreq \/ 10) * 10 if maxfreq % 10 else maxfreq + 10) # Set a clean upper y-axis limit.","039fb830":"# Correlation between lot area and sale price\nplt.scatter(train_data.LotArea,train_data.SalePrice, color = '#ffbbbb', marker = \">\")\nnp.corrcoef(train_data.LotArea,train_data.SalePrice)","9568ddbb":"# Understanding the testing dataset\ntest_data.select_dtypes(include=int)","5c55151e":"# Barplot for understnading the relationship between overall condition and sale price\nsns.barplot(x='OverallQual', y='SalePrice', data=train_data)\nnp.corrcoef(train_data.OverallQual,train_data.SalePrice)","9f4443da":"# Creating the predictor by combining a couple of variables\nplt.subplots_adjust(left=0, bottom=0, right=1.5, top=1, wspace=0.5, hspace=1)\nplt.subplot(121); sns.set_palette(\"Paired\"); sns.barplot(x='OverallQual', y='YearRemodAdd', data=train_data); plt.ylim(1940,2015); plt.title('Train Data')\nplt.subplot(122); sns.set_palette(\"pastel\"); sns.barplot(x='OverallQual', y='YearRemodAdd', data=test_data); plt.ylim(1940,2015); plt.title('Test Data')","b90ce2c2":"# Identifying the Distribution of Overall Quality \nplt.subplots_adjust(left=0, bottom=0, right=1.5, top=1, wspace=0.5, hspace=1)\nplt.subplot(121); train_data.OverallQual.apply(lambda x: np.log(x+0.1)).hist(bins=20, color = '#99ff99')\nplt.subplot(122); test_data.OverallQual.apply(lambda x: np.log(x+0.1)).hist(bins=20, color = '#ffbbbb')","4eca7ba4":"# Getting essential summaries\ntrain_data.select_dtypes(include=int).describe().loc[['min','max', 'mean','50%'],:]","45558ea0":"# Creating the model based on Id\nmodel = sm.OLS(train_data.SalePrice,train_data.Id).fit()\npredictions = model.predict(train_data.SalePrice) \nmodel.summary()","f2b7f0de":"# Comparing the predictions with the real values\nplt.scatter(train_data.SalePrice,predictions, color = '#c1fffa', marker = \"v\")\nnp.corrcoef(train_data.SalePrice,predictions)\n","2edfad06":"# Assigning the predictions to test data\ntest_data.SalePrice = predictions","3b986fe8":"# Creating the model based on Id\nmodel = sm.OLS(train_data.SalePrice,train_data.OverallQual).fit()\npredictions = model.predict(train_data.OverallQual) \nmodel.summary()","148b6c7c":"# Checking with the predictions\npredictions","1164c8f2":"**Hypothesis: ** The saleprice should be proportional to the overall quality of the property.\nResult: There was consistent increment in the sale prices which supported that the proposed hypothesis was correct with very high correlation as well."}}