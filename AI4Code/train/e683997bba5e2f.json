{"cell_type":{"0fa40b5b":"code","7c1c5197":"code","a764a169":"code","60ec8bd2":"code","4a58a467":"code","885a9cbd":"code","681d8e29":"code","39cc68df":"code","0efd61e4":"code","49461ce8":"code","5d33e7a6":"code","b10322d7":"code","088d481c":"code","0a082f4f":"code","b73d47e2":"code","73ccd2f0":"code","08dd6329":"code","f929c03e":"code","b2e35a4b":"code","286e600d":"code","ab0a9fac":"code","bf5ed6e7":"code","1d4a247e":"code","e00b5af0":"code","96127d69":"code","47f73337":"code","089feb36":"code","9e3e331c":"code","00fe4d2e":"code","114d9ac1":"code","43042367":"code","b0caac98":"code","41cbb4d8":"code","5ead3870":"code","58b8ebbd":"code","6296a174":"code","cb2582a9":"code","c479519d":"code","8b03cf72":"code","b0111ca0":"code","60223d78":"code","757e9b9b":"code","5bca0559":"code","ec5b160b":"code","3b09c548":"code","913fb418":"code","af924c87":"code","03898310":"code","25891fc8":"code","18b83626":"code","0eb71023":"code","8dcc5790":"code","34fb126f":"code","0140eb24":"code","0ddad172":"code","b3e9382e":"code","1b93732a":"code","6ec7b0e6":"code","0e5596a5":"code","4fd41662":"code","1097fe07":"code","05fae55f":"code","efcaaa70":"code","a72cc9a3":"code","5c8221ee":"code","a47b38f3":"code","18ad3dc2":"markdown","4d87d5b0":"markdown","253b4ba0":"markdown","ed4833dd":"markdown","a344775c":"markdown","c47e4d25":"markdown","7d140e95":"markdown","43f3fc1a":"markdown","9b23e406":"markdown","7acae7d4":"markdown","e11bceae":"markdown","3c036d31":"markdown","3f8fb61d":"markdown","c2b30024":"markdown","8d1e6fb3":"markdown","7667ef32":"markdown","c4da207a":"markdown","4dd07c1d":"markdown","bb67c3bf":"markdown","e06da263":"markdown","82f8a3cb":"markdown","17452e0f":"markdown","20f6520c":"markdown","9fbd4b85":"markdown","92e75799":"markdown","f9a1505d":"markdown","3c971b48":"markdown","4c08a80b":"markdown","d2f0ceec":"markdown","8b0ad816":"markdown","16108b5b":"markdown","5a685631":"markdown","99427da7":"markdown","1b7063ff":"markdown","94ec40c8":"markdown","e08a45ab":"markdown","bbb092a5":"markdown","5c036279":"markdown","2d33ecf7":"markdown","7df12351":"markdown","eafd60b0":"markdown","5b0d8c1d":"markdown","4a6983bf":"markdown","61d2737a":"markdown","fabb4b7b":"markdown","3bd7a0d9":"markdown","f053fba0":"markdown","221cd48e":"markdown","18b1a075":"markdown","2714c87a":"markdown","c57c468a":"markdown"},"source":{"0fa40b5b":"import numpy as np # NumPy is the fundamental package for scientific computing\n\nimport pandas as pd # Pandas is an easy-to-use data structures and data analysis tools\npd.set_option('display.max_columns', None) # To display all columns\n\nimport matplotlib.pyplot as plt # Matplotlib is a python 2D plotting library\n%matplotlib inline \n# A magic command that tells matplotlib to render figures as static images in the Notebook.\n\nimport seaborn as sns # Seaborn is a visualization library based on matplotlib (attractive statistical graphics).\nsns.set_style('whitegrid') # One of the five seaborn themes\nimport warnings\nwarnings.filterwarnings('ignore') # To ignore some of seaborn warning msg\n\nfrom scipy import stats, linalg\n\nfrom matplotlib import rcParams\nimport scipy.stats as st\n\nimport folium # for map visualization\nfrom folium import plugins","7c1c5197":"data = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\", parse_dates=['date'])","a764a169":"# Why are the following features converted to category type?\ndata['waterfront'] = data['waterfront'].astype('category',ordered=True)\ndata['view'] = data['view'].astype('category',ordered=True)\ndata['condition'] = data['condition'].astype('category',ordered=True)\ndata['grade'] = data['grade'].astype('category',ordered=False) # Why are these ordered 'False'?\ndata['zipcode'] = data['zipcode'].astype(str)\ndata.head(2) # Show the first 2 lines","60ec8bd2":"data = data.sort_index()\ndata.head(2)","4a58a467":"print(data.shape)\nprint(data.nunique())","885a9cbd":"print(data.info())","681d8e29":"data.head()","39cc68df":"# Knowing the Price variable\nf, ax = plt.subplots(1, 2, figsize = (12, 6))\nsns.distplot(data['price'], ax=ax[0])\nax[0].set_title('Price Distribution')\nplt.xlim()\n\nsns.scatterplot(range(data.shape[0]), data['price'].sort_values(), ax=ax[1], marker=\"x\")\nax[1].set_title('Price Curve Distribution', fontsize=15)\n\nplt.show()","0efd61e4":"data.shape","49461ce8":"data.describe(include='all')","5d33e7a6":"houses_map = folium.Map(location = [data['lat'].mean(), data['long'].mean()], zoom_start = 10)\nlat_long_data = data[['lat', 'long']].values.tolist()\nh_cluster = folium.plugins.FastMarkerCluster(lat_long_data).add_to(houses_map)\n\nhouses_map","b10322d7":"houses_heatmap = folium.Map(location = [data['lat'].mean(), data['long'].mean()], zoom_start=9)\nhouses_heatmap.add_children(plugins.HeatMap([[row['lat'], row['long']] for name, row in data.iterrows()]))\nhouses_heatmap","088d481c":"zipcode_data = data.groupby('zipcode').aggregate(np.mean)","0a082f4f":"zipcode_data.reset_index(inplace=True)","b73d47e2":"data['count'] = 1\ncount_house_zipcode = data.groupby('zipcode').sum()\ncount_house_zipcode.reset_index(inplace=True)\ncount_house_zipcode = count_house_zipcode[['zipcode', 'count']]\ndata.drop(['count'], axis = 1, inplace=True)","73ccd2f0":"zipcode_data = zipcode_data.join(count_house_zipcode.set_index('zipcode'), on='zipcode')","08dd6329":"zipcode_data.head()","f929c03e":"def show_zipcode_map(col):\n    geo_path = '..\/input\/house-prices-data\/zipcode_king_county.geojson'\n    zipcode = folium.Map(location=[data['lat'].mean(), data['long'].mean()], zoom_start=9)\n    zipcode.choropleth(\n        geo_data=geo_path, \n        data=zipcode_data, \n        columns=['zipcode', col],\n        key_on='feature.properties.ZCTA5CE10',\n        fill_color='OrRd', \n        fill_opacity=0.6, \n        line_opacity=0.2)\n#     zipcode.save(col + '.html')\n    return zipcode","b2e35a4b":"show_zipcode_map('count')","286e600d":"show_zipcode_map('price')","ab0a9fac":"show_zipcode_map('sqft_living')","bf5ed6e7":"show_zipcode_map('yr_built')","1d4a247e":"plt.figure(figsize=(12,4))\nsns.boxplot(x = 'price', data=data, orient='h', width=0.8, fliersize=3, showmeans=True)\n\nplt.show()","e00b5af0":"# A joint plot is used to visualize the bivariate distribution.\nsns.jointplot(x='sqft_living', y='price', data=data, kind='reg', size=7)\nplt.show()","96127d69":"print(\"PearsonR : \", data.corr(method='pearson')['sqft_living']['price'])","47f73337":"corr_price = data.corr(method='pearson')['price']","089feb36":"sns.jointplot(x='sqft_lot', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='sqft_above', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='sqft_basement', y='price', data=data, kind='reg', size=5)\nplt.show()\n\nprint(corr_price['sqft_lot'])\nprint(corr_price['sqft_above'])\nprint(corr_price['sqft_basement'])","9e3e331c":"sns.jointplot(x='sqft_living15', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='sqft_lot15', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='yr_built', y='price', data=data, kind='reg', size=5)\nplt.show()\n\nprint(corr_price['sqft_living15'])\nprint(corr_price['sqft_lot15'])\nprint(corr_price['yr_built'])","00fe4d2e":"sns.jointplot(x='yr_renovated', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='lat', y='price', data=data, kind='reg', size=5)\nsns.jointplot(x='long', y='price', data=data, kind='reg', size=5)\nplt.show()\n\nprint(corr_price['yr_renovated'])\nprint(corr_price['lat'])\nprint(corr_price['long'])","114d9ac1":"# Create 2 new columns for the analysis\ndata['sqft_basement2'] = data['sqft_basement'].apply(lambda x : x if x > 0 else None)\ndata['yr_renovated2'] = data['yr_renovated'].apply(lambda x : x if x > 0 else None)\n\n# Show the new plots with paerson correlation\nsns.jointplot(x=\"sqft_basement2\", y=\"price\", data=data, kind = 'reg', dropna=True, size = 5)\nsns.jointplot(x=\"yr_renovated2\", y=\"price\", data=data, kind = 'reg', dropna=True, size = 5)\nplt.show()","43042367":"data['basement_present'] = data['sqft_basement'].apply(lambda x: 1 if x > 0 else 0)\ndata['basement_present'] = data['basement_present'].astype('category', ordered = False)\n\ndata['renovated'] = data['yr_renovated'].apply(lambda x: 1 if x > 0 else 0)\ndata['renovated'] = data['renovated'].astype('category', ordered = False)","b0caac98":"# define a function to display pearson coeeficients on the lower graphs\ndef corrfunc(x, y, **kws):\n    r, _ = stats.pearsonr(x, y)\n    ax = plt.gca()\n    ax.annotate(\"Pearson R = {:.2f}\".format(r), xy=(.1, .9), xycoords=ax.transAxes)\n\ng = sns.PairGrid(data=data, vars=['sqft_living', 'sqft_living15', 'sqft_above'], size=3.5) #define pairgrid\ng.map_upper(plt.scatter)\ng.map_diag(sns.distplot)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_lower(corrfunc)\nplt.show()","41cbb4d8":"# a Function to returns the sample linear partial correlation coefficient between pairs of variables in C controlling\n# for the remaining variables in C (clone of Matlab's partial corr)\ndef partial_corr(C):\n    C = np.asarray(C)\n    p = C.shape[1]\n    P_corr = np.zeros((p, p), dtype=np.float)\n    for i in range(p):\n        P_corr[i, i] = 1\n        for j in range(i+1, p):\n            idx = np.ones(p, dtype=np.bool)\n            idx[i] = False\n            idx[j] = False\n            beta_i = linalg.lstsq(C[:, idx], C[:, j])[0]\n            beta_j = linalg.lstsq(C[:, idx], C[:, i])[0]\n            res_j = C[:, j] - C[:, idx].dot( beta_i)\n            res_i = C[:, i] - C[:, idx].dot(beta_j)            \n            corr = stats.pearsonr(res_i, res_j)[0]\n            P_corr[i, j] = corr\n            P_corr[j, i] = corr\n    return P_corr\n\n# Convert pandas dataframe to a numpy array using only three columns\npartial_corr_array = data.as_matrix(columns = ['price', 'sqft_living', 'sqft_living15'])\n\n# Calculate the partial correlation coefficients\npartial_corr(partial_corr_array)\n","5ead3870":"# Let's show bosxplot first\nplt.figure(figsize=(12,4))\nsns.boxplot(y = 'waterfront', x = 'price', data=data, width = 0.8, orient='h'\n           ,showmeans=True, fliersize=3)\nplt.show()","58b8ebbd":"# Calculate the correlation coefficient\nr, p = stats.pointbiserialr(data['waterfront'], data['price'])\nprint('point biserial correlation r is %s with p = %s'%(r, p))","6296a174":"# basement_present variable\nplt.figure(figsize=(12,4))\nsns.boxplot(y = 'basement_present', x='price', data=data, width=0.8, orient='h', \n            showmeans=True, fliersize=3)\nplt.show()\nr, p = stats.pointbiserialr(data['basement_present'], data['price'])\nprint ('point biserial correlation r between price and basement_present is %s with p = %s' %(r,p))","cb2582a9":"# renovatd variable\nplt.figure(figsize=(12,4))\nsns.boxplot(y = 'renovated', x = 'price', data = data,width = 0.8,orient = 'h', showmeans = True, fliersize = 3)\nplt.show()\nr, p = stats.pointbiserialr(data['renovated'], data['price'])\nprint('point biserial correlation r between price and renovated is %s with p = %s' %(r,p))","c479519d":"fig, ax = plt.subplots(6, figsize=(12, 40))\nsns.boxplot(y='bedrooms', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[0])\nsns.boxplot(y='bathrooms', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[1])\nsns.boxplot(y='floors', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[2])\nsns.boxplot(y='view', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[3])\nsns.boxplot(y='condition', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[4])\nsns.boxplot(y='grade', x='price', data=data, width=0.8, orient='h',\n           showmeans=True, fliersize=3, ax=ax[5])\nplt.show()","8b03cf72":"r, p = stats.spearmanr(data['bedrooms'], data['price'])\nprint ('spearman correlation r between price and bedrooms is %s with p = %s' %(r,p))\nr, p = stats.spearmanr(data['bathrooms'], data['price'])\nprint ('spearman correlation r between price and bathrooms is %s with p = %s' %(r,p))\nr, p = stats.spearmanr(data['floors'], data['price'])\nprint ('spearman correlation r between price and floors is %s with p = %s' %(r,p))\nr, p = stats.spearmanr(data['view'], data['price'])\nprint ('spearman correlation r between price and view is %s with p = %s' %(r,p))\nr, p = stats.spearmanr(data['condition'], data['price'])\nprint ('spearman correlation r between price and condition is %s with p = %s' %(r,p))\nr, p = stats.spearmanr(data['grade'], data['price'])\nprint ('spearman correlation r between price and grade is %s with p = %s' %(r,p))","b0111ca0":"# import numpy as np # NumPy is the fundamental package for scientific computing\n\n# import pandas as pd # Pandas is an easy-to-use data structures and data analysis tools\n# pd.set_option('display.max_columns', None) # To display all columns\n\n# import matplotlib.pyplot as plt # Matplotlib is a python 2D plotting library\n# %matplotlib inline \n# # A magic command that tells matplotlib to render figures as static images in the Notebook.\n\n# import seaborn as sns # Seaborn is a visualization library based on matplotlib (attractive statistical graphics).\n# sns.set_style('whitegrid') # One of the five seaborn themes\n# import warnings\n# warnings.filterwarnings('ignore') # To ignore some of seaborn warning msg\n\n# from scipy import stats\n\nfrom sklearn import linear_model # Scikit learn library that implements generalized linear models\nfrom sklearn import neighbors # provides functionality for unsupervised and supervised neighbors-based learning methods\nfrom sklearn.metrics import mean_squared_error # Mean squared error regression loss\nfrom sklearn import preprocessing # provides functions and classes to change raw feature vectors\n\nfrom math import log","60223d78":"data = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\", parse_dates = ['date']) # load the data into a pandas dataframe\ndata.head(2) # Show the first 2 lines","757e9b9b":"data.drop(['id', 'date'], axis=1, inplace=True)","5bca0559":"# Indicate whether there is a basement or not\ndata['basement_present'] = data['sqft_basement'].apply(lambda x : 1 if x > 0 else 0)\n# 1 if the house has been renovated\ndata['renovated'] = data['yr_renovated'].apply(lambda x: 1 if x > 0 else 0)","ec5b160b":"categorical_cols = ['floors', 'view', 'condition', 'grade']\n\nfor col in categorical_cols:\n    dummies = pd.get_dummies(data[col], drop_first=False)\n    dummies = dummies.add_prefix(\"{}#\".format(col))\n    data.drop(col, axis=1, inplace=True)\n    data = data.join(dummies)","3b09c548":"data.head()","913fb418":"dummies_zipcodes = pd.get_dummies(data['zipcode'], drop_first=False)\ndummies_zipcodes.reset_index(inplace=True)\ndummies_zipcodes = dummies_zipcodes.add_prefix(\"{}#\".format('zipcode'))\ndummies_zipcodes = dummies_zipcodes[['zipcode#98004','zipcode#98102','zipcode#98109','zipcode#98112','zipcode#98039','zipcode#98040']]\ndata.drop('zipcode', axis=1, inplace=True)\ndata = data.join(dummies_zipcodes)\n\ndata.dtypes","af924c87":"from sklearn.model_selection import train_test_split\n\ntrain_data, test_data = train_test_split(data, train_size=0.8, random_state=10)","03898310":"# A function that take one input of the dataset and return the RMSE (of the test data), and the intercept and coefficent\ndef simple_linear_model(train, test, input_feature):\n    regr = linear_model.LinearRegression() # Create a linear regression object\n    # Train the model\n    regr.fit(train.as_matrix(columns=[input_feature]), train.as_matrix(columns=['price']))\n    \n    RMSE = mean_squared_error(test.as_matrix(columns=['price']), \n                              regr.predict(test.as_matrix(columns=[input_feature])))**0.5\n    \n    return RMSE, regr.intercept_[0], regr.coef_[0][0]","25891fc8":"RMSE, w0, w1 = simple_linear_model(train_data, test_data, 'sqft_living')\nprint ('RMSE for sqft_living is: %s ' %RMSE)\nprint ('intercept is: %s' %w0)\nprint ('coefficient is: %s' %w1)","18b83626":"input_list = data.columns.values.tolist() # list of column name\ninput_list.remove('price')\nsimple_linear_result = pd.DataFrame(columns=['feature', 'RMSE', 'intercept', 'coefficient'])\n\n# loop that calculate the RMSE of the test data for each input\nfor col in input_list:\n    RMSE, w1, w0 = simple_linear_model(train_data, test_data, col)\n    simple_linear_result = simple_linear_result.append({'feature':col, 'RMSE':RMSE, 'intercept':w0, 'coefficient': w1}, ignore_index=True)\n    \nsimple_linear_result.sort_values('RMSE').head(10)\n    ","0eb71023":"# A function that take multiple features as input and return the RMSE (of the test data),\n# and the intercept and coefficients.\ndef multiple_regression_model(train ,test, input_features):\n    regr = linear_model.LinearRegression()\n    regr.fit(train.as_matrix(columns=input_features), train.as_matrix(columns=['price']))\n    RMSE = mean_squared_error(test.as_matrix(columns=['price']), regr.predict(test.as_matrix(columns=input_features))) ** 0.5\n    \n    return RMSE, regr.intercept_[0], regr.coef_","8dcc5790":"print ('RMSE: %s, intercept: %s, coefficients: %s' \\\n       %multiple_regression_model(train_data, test_data, ['sqft_living','bathrooms','bedrooms']))\nprint ('RMSE: %s, intercept: %s, coefficients: %s' \\\n       %multiple_regression_model(train_data, test_data, ['sqft_above','view#0','bathrooms']))\nprint ('RMSE: %s, intercept: %s, coefficients: %s' \\\n       %multiple_regression_model(train_data, test_data, ['bathrooms','bedrooms']))\nprint ('RMSE: %s, intercept: %s, coefficients: %s' \\\n       %multiple_regression_model(train_data, test_data, ['view#0','grade#12','bedrooms','sqft_basement']))\nprint ('RMSE: %s, intercept: %s, coefficients: %s' \\\n       %multiple_regression_model(train_data, test_data, ['sqft_living','bathrooms','view#0']))","34fb126f":"# create a new column in train_data\ntrain_data['sqft_living_squared'] = train_data['sqft_living'].apply(lambda x: x**2)\n# create a new column in test_data\ntest_data['sqft_living_squared'] = test_data['sqft_living'].apply(lambda x: x**2)\nprint('RMSE: %s, intercept: %s, coefficients: %s' \\\n      %multiple_regression_model(train_data, test_data, ['sqft_living', 'sqft_living_squared']))","0140eb24":"# We're first going to add more features into the dataset.\n# sqft_living cubed\ntrain_data['sqft_living_cubed'] = train_data['sqft_living'].apply(lambda x: x**3) \ntest_data['sqft_living_cubed'] = test_data['sqft_living'].apply(lambda x: x**3)\n\n# bedrooms_squared: this feature will mostly affect houses with many bedrooms.\ntrain_data['bedrooms_squared'] = train_data['bedrooms'].apply(lambda x: x**2) \ntest_data['bedrooms_squared'] = test_data['bedrooms'].apply(lambda x: x**2)\n\n# bedrooms times bathrooms gives what's called an \"interaction\" feature. It is large when both of them are large.\ntrain_data['bed_bath_rooms'] = train_data['bedrooms']*train_data['bathrooms']\ntest_data['bed_bath_rooms'] = test_data['bedrooms']*test_data['bathrooms']\n\n# Taking the log of squarefeet has the effect of bringing large values closer together and spreading out small values.\ntrain_data['log_sqft_living'] = train_data['sqft_living'].apply(lambda x: log(x))\ntest_data['log_sqft_living'] = test_data['sqft_living'].apply(lambda x: log(x))","0ddad172":"# split the train_data to include a validation set (train_data2 = 60%, validation_data = 20%, test_data = 20%)\ntrain_data_2, validation_data = train_test_split(train_data, train_size = 0.75, random_state = 50)","b3e9382e":"print(data.shape)\n# print(train_data.shape)\nprint(train_data_2.shape)\nprint(validation_data.shape)\nprint(test_data.shape)","1b93732a":"# A function that take multiple features as input and return the RMSE (of the train and validation data)\ndef RMSE(train, validation, features, new_input):\n    features_list = list(features)\n    features_list.append(new_input)\n    regr = linear_model.LinearRegression() # Create a linear regression object\n    regr.fit(train.as_matrix(columns = features_list), train.as_matrix(columns = ['price'])) # Train the model\n    RMSE_train = mean_squared_error(train.as_matrix(columns = ['price']), \n                              regr.predict(train.as_matrix(columns = features_list)))**0.5 # Calculate the RMSE on train data\n    RMSE_validation = mean_squared_error(validation.as_matrix(columns = ['price']), \n                              regr.predict(validation.as_matrix(columns = features_list)))**0.5 # Calculate the RMSE on train data\n    return RMSE_train, RMSE_validation \n","6ec7b0e6":"input_list = train_data_2.columns.values.tolist() # list of column name\ninput_list.remove('price')\n\n# list of features included in the regression model and the calculated train and validation errors (RMSE)\nregression_greedy_algorithm = pd.DataFrame(columns = ['feature', 'train_error', 'validation_error'])  \ni = 0\ntemp_list = []\n\n# a while loop going through all the features in the dataframe\nwhile i < len(train_data_2.columns)-1:\n    \n    # a temporary dataframe to select the best feature at each iteration\n    temp = pd.DataFrame(columns = ['feature', 'train_error', 'validation_error'])\n    \n    # a for loop to test all the remaining features\n    for p in input_list:\n        RMSE_train, RMSE_validation = RMSE(train_data_2, validation_data, temp_list, p)\n        temp = temp.append({'feature':p, 'train_error':RMSE_train, 'validation_error':RMSE_validation}, ignore_index=True)\n        \n    temp = temp.sort_values('train_error') # select the best feature using train error\n    best = temp.iloc[0,0]\n    temp_list.append(best)\n    regression_greedy_algorithm = regression_greedy_algorithm.append({'feature': best, 'train_error': temp.iloc[0,1], 'validation_error': temp.iloc[0,2]}, ignore_index=True) # add the feature to the dataframe\n    input_list.remove(best) # remove the best feature from the list of available features\n    i += 1","0e5596a5":"regression_greedy_algorithm['index'] = regression_greedy_algorithm.index","4fd41662":"regression_greedy_algorithm","1097fe07":"plt.figure(figsize=(8,8))\nsns.lineplot(data=regression_greedy_algorithm.loc[:, ['train_error', 'validation_error']])\n\nplt.show()","05fae55f":"greedy_algo_features_list = regression_greedy_algorithm['feature'].tolist()[:] #select the first 30 features\ntest_error, _, _ = multiple_regression_model(train_data_2, test_data, greedy_algo_features_list)\nprint ('test error (RMSE) is: %s' %test_error)","efcaaa70":"test_temp = []\nfor cnt in range(regression_greedy_algorithm.shape[0]):\n    greedy_algo_features_list = regression_greedy_algorithm['feature'].tolist()[:cnt+1] #select the first 30 features\n    test_error, _, _ = multiple_regression_model(train_data_2, test_data, greedy_algo_features_list)\n    test_temp.append(test_error)","a72cc9a3":"regression_greedy_algorithm['test_error'] = test_temp","5c8221ee":"regression_greedy_algorithm","a47b38f3":"plt.figure(figsize=(8,8))\nsns.lineplot(data=regression_greedy_algorithm.loc[:, ['train_error', 'validation_error', 'test_error']])\n\nplt.show()","18ad3dc2":"We can see that the validation error is minimum when we reach 25 features in the model (condition #4).  \nWe stop the selection here even if the training error keeps getting smaller (overfitting).\n\nLet's now calculate an estimation of the generalization error using test_data.","4d87d5b0":"There is indeed associations between these variables and the house price (except for condition).\ngrade seems to be the best indicator.","253b4ba0":"## 4. Associations and Correlations between Variables\n\nLet's analyze now the relationship between the independent variables available in the dataset and the dependent variable that we are trying to predict (i.e. price). These analysis should provide smoe interesting insights for our regression models.\n\nWe'll be using scatterplots and correlations coefficents (e.g Pearson, Spearman) to explore potential associations between the variables.","ed4833dd":"### 2.1 Simple Linear Regression\nLet's first predict house prices using simple (one input) linear regression.","a344775c":"# Part 1: Exploratory Data Analysis\nThe following notebook presents a thought process of predicting a **continuous variable** through Machine Learning methods. More specifically, we want to predict house price based on multiple features using regression analysis.\n\nAs a example, we will use a dataset of house sales in King County, where Seattle is located.\n\nIn this notebook, we will first apply some Exploratory Data Analysis (EDA) techniques to summarize the main characteristic of the dataset.","c47e4d25":"### 2.2 Multiple Regression  \nNow let's try to predict price using multiple features.  \nWe can modify the simple linear regression function above to take multiple features as input.","7d140e95":"The map is helpful but it's hard to see where the houses our dataset are located. Instead, we could make a heatmap:","43f3fc1a":"We'll now be able to plot the average value of a specific attribute for each zip code. In order to do this, we'll read data in GeoJSON format to get the shape of each zip code, then match each zip code shpe with the attribuge score. Let's first create a function.","9b23e406":"Let's summarize the main statistics of each parameters.","7acae7d4":"### 1.1 Load the libraries","e11bceae":"In this post, we analyzed the relationship between the output variable (house price) and the dependent variables in our dataset.\nMore specifically, we highlighted that:\n* sqft_living, sqft_above and sqft_basement were moderately\/strongly associated with price. Pearson r was equal to 0.70, 0.61 and 0.41, respectively. The 3 variables were also strongly related to each other as sqft_living = sqft_above and sqft_basement.\n* sqft_living15, the average house square footage of the 15 closet neighbors, was also strongly related to price(r=0.59). However, when controlling for sqft_living, the relationship disappeared(r = 0.06).\n* sqft_lot, sqft_lot15 (average lot size of the 15 closet houses) and yr_built were poorly related to price.\n* The three dichotomous variables ( waterfront, basement_present, renovated ) were associated with price. The association were small ( r < 0.3 )\n* Five of the ordinal parameters (bedrooms, bathrooms, floors, views, grade) were also moderately to strongly to strongly associated with price.\n\n\n","3c036d31":"As expeted, they all seem to be related to the house price.  \nWe can use the Spearman's rank-order correlation to measure the strength and direction of the relationship between house price and these variables.","3f8fb61d":"sqft_lot, sqft_lot15 and yr_built seem to be poorly related to price.\nWe can see that there is a lot of zeros in the sqft_basement distribution (i.e. No basement). Similarly, there is a lot of zeros in the yr_renovated variable.\n\nLet's rerun the association tests for these two variables without the zeros.","c2b30024":"Heatmaps are good for mapping out gradients, but we'll want something with more structure to plot out differences in house sale accross the county. Zip codes are a good way to visualize this information.\n\nWe could, for example, compute the mean house price by zip code, then plot this out on a maps. In the below code, we 'll\n* Group the dataframe by zipcode.\n* Compute the average price of each column\n* add a column with the total number of observations ( i.e., house sales ) per zipcode.","8d1e6fb3":"The house price is moderately correlated with the size of the basement ( if basement present ).  \nThere is also a small correlation with the yaer of the renovation(if renovated).  \n\nIt might be more interesting for our analysis to classify basement and renovation as dichotomous variables(e.g. 0 for no basement, 1 for basement present). Let's create two new columns in our dataset.","7667ef32":"## 2. Regression Models\nIn this section, we will train numerous regerssion models on the train data (e.g., simple linear regression, lasso, nearest neighbor) and evaluate their performance using Root Mean Squared Error (RMSE) on the test data.","c4da207a":"# Part 2: Regression Models","4dd07c1d":"### Data Transformation\nFollowing the correlation analysis in Part 1, let's create some new variables in our dataset.","bb67c3bf":"Similarly, we can run the same test on all the features in the dataset and assess which one would be the best estimator of house price using just a single linear regression model.","e06da263":"## 2. Descriptive statistics.\nThe initial dimension of the dataset.","82f8a3cb":"One solution would be to test multiple features combinations (all?) and keep the solution with the smallest error value calculated on the test data. However, this is overly optimistic approach, since the model complexity is selected to minimize the test error (error is biased). A more sophisticated approach is to use two sets for testing our models, a.k.a: a validation set and a test set. We select model complexity to minimize error on the validation set and approximate the generalization error based on the test set.","17452e0f":"We can see that on average, the houses on the eastern suburbs of Seattle are more expensive. They are also bigger in sqft. The houses close to the metropolitan of Seattle are relatively old compare to the houses in the rural area.","20f6520c":"Our multiple regression analysis models in Part 2 will be built on these results.","9fbd4b85":"The map helps us understand a few things about the dataset.\nFirst, we can see that we don't have data for every zip code in the county. This is especially true for the inner suburbs of Seattle.\nSecond, some zipcodes have a lot more house sales recorded than others. The number of observations range from ~50 to ~ 600. Let's show a few more maps:","92e75799":"As envisaged, there is a strong positive relationship between the 3 variables( r> 0.7).   \nIt was kind of obvious for sqft_above which is equal to sqft_living - sqft_baement. So  we know that they both have an impact on price.  \n\nFor sqft_living15 however, we are not sure if the relationship with house price is actually due to the average square footage of the 15th closest houses. This is because of the high correlation between sqft_living15 and sqft_living.  \n\nTo assess the true relationship between price and sqft_living15, we can use the Pearson Partial Correlation test. The correlation can assess the association between two continuous variables whilst controlling for the effect of other continuous variables called covariates. In our example, we will test the relationship between price and sqft_living15 using sqft_living as covariate.","f9a1505d":"The following notebook presents a thought process of predicting a continuous variable through Machine Learning methods. More specifically, we want to predict house price based on multiple featrues using regression analysis.\n\nAs an example, we will use a dataset of house sales in King County, where Seattle is located.\n\nIn the first part of the analysis, we set up the context using map visualization, and highlighted the association between the variables in our dataset.\n\nThis is, for example, a map of King County showing the average house price per zipcode. We can see the disparities between the different zipcodes. The location of houses should play an important role in our regression model.\n\nIn this second notebook we will apply multiple regression models. We will talk about model complexity and how we can select the best predictive model using a validation set or cross-validation techniques.","3c971b48":"Going through all subsets of features combinations is most often computationally infeasible. For example, having 30 features yield more than 1 billion combinations. Another approach is to use a greedy technique like a forward stepwise algorithm where the best estimator feature is added to the set of already selected features at each iteration. For example, let's pretend that the best single estimator is sqft_living. In the 2nd step of the greedy algorithm, we test all the remaining features one by one in combinations with sqft_living (e.g., sqft_living and bedrooms, sqft_living and waterfront, etc) and select the best combination using training error. At the end, we select the model complexity (number of features) using the validation error and estimate the generalization error using the test set.\n\nLet's try this method.","4c08a80b":"While we can get better performance than simple linear models, a few problems remain.\n* First, we don't know which feature to select.   \n    Obviously some combinations of features will yield smaller RMSE on the test set\n* Second, we don't know how many features to select.  \n    This is because the more features we incorporate in the train model, the more overfit we get on the train data, resulting in higher error on the test data.","d2f0ceec":"We can also try to fit a higher-order polynomial on the input.  \nFor example, we can try to fit a qudratic function on sqft_living.","8b0ad816":"https:\/\/www.kaggle.com\/harlfoxem\/house-price-prediction-part-1  \nhttps:\/\/www.kaggle.com\/kabure\/predicting-house-prices-xgb-rf-bagging-reg-pipe","16108b5b":"## 3. The Output Variable\nNow that we've set the context by plotting out where the houses in our dataset are located, we can move into exploring different angles for our regression analysis.\n\nLet's first display the distribution of the target column 'price' using a boxplot.","5a685631":"## 3. Setting the context (map visualization)\nBefore we dive into exploring the data, we'll want to set the context of the analysis. One good way to do this is with exploratory charts or maps. In this case, we'll map out the positions of the houes, which will help us understand the problem we're exploring.\n\nIn the below code, we:\n* Setup a map centered on king County.\n* Add a marker to the map for each house sold in the area.\n* Display the map.","99427da7":"Let's do the same with the 7 remaining continuous variables:\n* sqft_lot\n* sqft_above( i.e., sqft_above = sqft_living - sqft_basement)\n* sqft_basement\n* sqft_living15, the average house square footage of the 15 closest neighbors\n* sqft_lot15, the average lot square footage of the 15 closest neighbors\n* yr_built\n* yr_renovated\n* lat\n* long","1b7063ff":"### 4.2 Categorical Variables\nLet's now analyze the relationship between house price and the categorical variables.\n\nAs a first example, we will try to assess if having a waterfront is related to a higher house value. waterfront is a dichotomous variable with underlying continuous distribution (having a waterfront is better than not having a waterfront). We  can use a point-biserial correlation to highlight the relationship between the two variable.","94ec40c8":"Comments:  \n* The no waterfront boxplot is comparatively short. This suggests that overall, house prices in this group are very close to each other.\n* The waterfront boxplot is comparatively tall. This suggests that house prices differ greatly in this group.\n* There is obvious shape differences between the two distributions, Suggesting a higher sell price, in general, for houses with a waterfront. This is validated by a positive value of the point-biserial correlation.\n* The correlation if however small (r<0.3). Note that we haven't test here the 3 main assumptions of the point-biserial correlation and can't rely too much on the result.   \n    1. There should be no significant outliers in the two groups of the dichotomous variable in terms of the continuous variable\n    2. There should be homogeneity of variances.\n    3. The continuous variable should be approximately normally distributed for each group of the dichotomous variable.  \n    \nWe can run the same test on the basement_present variable and whether or not the house had been renovated in the past.","e08a45ab":"### Split the data\nWe will split the dataframe into training and testing data using a 80% \/ 20% ratio.","bbb092a5":"There is a clear linear association between the variable (r = 0.7), indicating a strong positive relatioinship.   \nsqft_living shoud be a good predicator of house price, (note: sqft_living distribution is also skewed to the right)","5c036279":"We can see now that the average house size of the surrounding houses has no effect on the sell price when controlling for the size of the house( r = 0.06 )","2d33ecf7":"### 4.1 Continuous Variables.\nFor example, let's analyze the relationship between the square footage of a house (sqft_living) and it selling price. Since the two variables are measured on a continuous scale, we can use Pearson's coefficient 'r' to measures the strength and direction of the relationship.","7df12351":"### Data Cleaning\nLet's reduce the dataset by dropping colums that won't be used during the analysis.","eafd60b0":"### 1.2 Load the dataset\nLet's load the data from CSV file using pandas and convert some columns to category type(for better summarization)","5b0d8c1d":"We will analyse these new variable as categorical ( see in few cells below ).\n\nBut first, let's go back to the plots above and the two variables: sqft_above and sqft_livint15. They seem to be strongly related to price.\nLet's anlayze their associations (along with sqft_living) using the pairgrid() function from seagborn. This function creates a matrix of axes and shows the relationship for each par of the selected variables.\n\nWe will draw the univariate distribution of each variable on the diagonal Axes, and the bivariate distributions using scatterplots on the upper diagonal and kernel density estimation on the lower diagonal. We will create a function to display the pearson coefficeint of each pair.","4a6983bf":"Associations exist but they are fairly small (0.1 < r < 0.3)\n\nLet's move on to our ordinal variables and asses their association with house price.\nWe will show the distribution of the categories of each variable using boxplots.","61d2737a":"This kernel is copy of below kernels. And I have fixed some parts which didn't operate.","fabb4b7b":"## 1. Preparation","3bd7a0d9":"When using simple linear regression, sqft_living provides the smallest test error estimate of house price for the dataset considered.","f053fba0":"# House price prediction using multiple regression analysis\n  This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015. It's great dataset for evaluating simple regression models.","221cd48e":"There seems to be a lot of outliers at the top of the distribution, with a few houses above the 5,000,000$ value.\n\nIf we ignore outliers, the range is illustrated by the distance between the opposite ends of the whiskers(1.5 IQR) - about 1,000,000$ here. \nAlso, we can see that the right whisker is slightly longer than the left whisker and that the median line is gravitating towords the left of the box. \n\n**The distribution is therefore slightly skewed to the right.**","18b1a075":"### Encode categorical variable using dummies\nA Dummy variable is an artificial variable created to represent an attribute with two or more distinct categories\/levels. In this example, we will analyze bedrooms and bathrooms as continuous and therefore will encode following:\n* floors\n* view\n* condition\n* grade","2714c87a":"## 1. Preparation\nAs in Part 1, Let's first load the libraries","c57c468a":"We saw that zipcodes are also related to price. However, encoded all zipcodes will add 70 dummies variables.  \nInstead, we will only encode the 6 most expensive zipcodes as shown in the map."}}