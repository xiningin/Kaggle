{"cell_type":{"c3475446":"code","f8133e1f":"code","fb1cbe4b":"code","0a9809bf":"code","299c3cd8":"code","faada0b5":"code","803e81aa":"code","5fa834fb":"code","92032fac":"code","bd3036b6":"code","5047a51d":"code","194303a5":"markdown","c0c412ec":"markdown","732bd27f":"markdown","2d700043":"markdown","decdcdab":"markdown","bc7b7aeb":"markdown"},"source":{"c3475446":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8133e1f":"vidObj = cv2.VideoCapture('\/kaggle\/input\/mighty-mouse-wolf-wolf\/mighty_mouse_320x240_watermarked.mp4')\n\ncount = 0\n\nwhile True: \n      \n    success, image = vidObj.read() \n    \n    if success:\n        cv2.imwrite(f\"frame{count}.jpg\", image) \n    else: \n        break\n        \n    count += 1","fb1cbe4b":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfor i in range(0, 1300, 100):\n    img = mpimg.imread(f'.\/frame{i}.jpg')\n    imgplot = plt.imshow(img)\n    plt.show()","0a9809bf":"#Detect Faces\n\n\nclass FaceDetector():\n\n    def __init__(self,faceCascadePath):\n        self.faceCascade=cv2.CascadeClassifier(faceCascadePath)\n\n\n    def detect(self, image, scaleFactor=1.1,\n               minNeighbors=5,\n               minSize=(5,5)):\n        \n        #function return rectangle coordinates of faces for given image\n        rects=self.faceCascade.detectMultiScale(image,\n                                                scaleFactor=scaleFactor,\n                                                minNeighbors=minNeighbors,\n                                                minSize=minSize)\n        return rects","299c3cd8":"#Frontal face of haar cascade loaded\nfrontal_cascade_path=\"\/kaggle\/input\/haarcascade\/haarcascade_frontalface_alt2.xml\"\n\n#Detector object created\nfd=FaceDetector(frontal_cascade_path)","faada0b5":"my_image=cv2.imread(\"frame1200.jpg\")","803e81aa":"def get_my_image():\n    return np.copy(my_image)\n\ndef show_image(image):\n    plt.figure(figsize=(18,15))\n    #Before showing image, bgr color order transformed to rgb order\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","5fa834fb":"show_image(get_my_image())","92032fac":"def detect_face(image, scaleFactor, minNeighbors, minSize):\n    # face will detected in gray image\n    image_gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    faces=fd.detect(image_gray,\n                   scaleFactor=scaleFactor,\n                   minNeighbors=minNeighbors,\n                   minSize=minSize)\n\n    for x, y, w, h in faces:\n        #detected faces shown in color image\n        cv2.rectangle(image,(x,y),(x+w, y+h),(127, 255,0),3)\n\n    show_image(image)","bd3036b6":"detect_face(image=get_my_image(), \n            scaleFactor=1.9, \n            minNeighbors=3, \n            minSize=(30,30))","5047a51d":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Jeff Herman, @jth359 for the code.' )","194303a5":"#I have an impression that all the files are quite the same.","c0c412ec":"#Original code frame was 1100. I added 100 and got the lamb image. Frame 1200. No clue about that number.","732bd27f":"#ADD Haar Cascade file. Choose on in Kaggle.\n\nhttps:\/\/www.kaggle.com\/pankaj13461\/haarcascade","2d700043":"#Code by Jeff Herman https:\/\/www.kaggle.com\/jth359\/video-to-frames-and-face-detection-using-opencv\/data","decdcdab":"#Since there is no Human face to detect. I'll save this code for next opportunity.\n\n#The Wolf from the title didn't detect any Lamb face too.","bc7b7aeb":"![](https:\/\/m.media-amazon.com\/images\/M\/MV5BOGVjZDE3NTMtZTQzZS00YjA2LWIxZGQtZmRkNTVlOTczYmQyXkEyXkFqcGdeQXVyNTU2OTQ2Njk@._V1_.jpg)imdb.com"}}