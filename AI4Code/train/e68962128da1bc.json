{"cell_type":{"87a99311":"code","721417e0":"code","df493bcf":"code","23b8166a":"code","7896b757":"code","24f4e5e6":"code","2f2138c1":"code","ee72879d":"code","c011ba55":"code","87baa855":"code","2f583c0d":"code","f36eb593":"code","eac09b3f":"code","8d6ca588":"code","ac09abc8":"code","836bfca8":"code","8538020d":"code","3a90595e":"code","cf8cf8c9":"code","e96691cc":"code","b87492d0":"code","af14c339":"code","251fa846":"code","47b49ee4":"code","2d2a34ba":"code","079dc257":"code","1644d6f3":"code","b3999a5a":"code","5a407194":"code","2d3c7483":"markdown","288033a4":"markdown"},"source":{"87a99311":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","721417e0":"df_250 = pd.read_csv('\/kaggle\/input\/restaurant-business-rankings-2020\/Top250.csv',index_col=0)\ndf_250.head()","df493bcf":"df_250.isna().sum()","23b8166a":"df_250 = df_250.drop(['Content','Headquarters'],axis=1) #since over 70% of these data pts are missing\ndf_250.head()","7896b757":"def remove_punctuation(column):  #trying to remove the % sign and dividing by 100 since it is percentage\n    no_punc = [x for x in column if x not in \"%\"]\n    no_punc = \"\".join(no_punc)\n    divide_100 = float(no_punc)\/100\n    return divide_100","24f4e5e6":"df_250['new_sales_perc'] = df_250['YOY_Sales'].apply(remove_punctuation)  #applying the function","2f2138c1":"df_250.head()","ee72879d":"df_250['new_sales'] = df_250['new_sales_perc']*df_250['Sales'] +df_250['Sales']  #adding the increased\/decreased new values \n                                                                                 ","c011ba55":"df_250.head()","87baa855":"df_250['new_units_perc'] = df_250['YOY_Units'].apply(remove_punctuation) #doing the same with units as well","2f583c0d":"df_250.head()","f36eb593":"df_250['new_units'] = df_250['new_units_perc']*df_250['Units'] +df_250['Units']","eac09b3f":"df_250['new_units'] = df_250['new_units'].astype('int') #since they are units ,convert to integer","8d6ca588":"df_250.head()","ac09abc8":"def gain_loss(column):  #calculating gain or loss using the '-' sign\n    for x in str(column):\n        if(x.startswith('-')):\n            return 0  #0 means we have incurred loss\n        else:\n            return 1  #1 means we have gains","836bfca8":"df_250['gl_sales'] = df_250['new_sales_perc'].apply(gain_loss)","8538020d":"df_250['gl_units'] = df_250['new_units_perc'].apply(gain_loss)","3a90595e":"df_250.head()","cf8cf8c9":"# time to drop the useless columns to keep our dataframe clean\ndf = df_250.drop(['YOY_Sales','YOY_Units','new_sales_perc','new_units_perc'],axis=1)\ndf.head()","e96691cc":"df['Segment_Category'].value_counts()  #getting a count of each unique food type","b87492d0":"# dividing the plots into 2 spaces and putting the plots next to each other\nplt.subplot(1,2,1)\nplt.title(\"Gain\/Loss in Sales\")\nsns.countplot(df['gl_sales'])\n\nplt.subplot(1,2,2)\nplt.title(\"Gain\/Loss in Units\")\nsns.countplot(df['gl_units'])\n\nplt.tight_layout()  #to give space between the two plots  -- feel free to run the code before and after","af14c339":"sns.lmplot(x='Sales',y='Units',data=df)  #seem to be correlated","251fa846":"#creating an interactive plot, you can hover over the plot to see the values\nplot1 = df[df[\"Restaurant\"].isin([\"McDonald's\",\"Starbucks\",\"Chick-fil-A\",\"Taco Bell\",\"Burger King\"\n                                  \"Subway\",\"Wendy's\",\"Dunkin'\",\"Domino's\",\"Panera Bread\"])]\npx.line(plot1, \n        x=\"Sales\", \n        y=\"Units\", \n        text=\"Restaurant\",\n       title=\"Sales vs Units for the top 10 Restaurants\")","47b49ee4":"px.line(plot1,                \n        x=\"new_sales\", \n        y=\"new_units\", \n        text=\"Restaurant\",\n       title=\"New Sales vs New Units after the loss\/gain for the top 10 Restaurants\")\n#trend literally remains the same. you can hover over the plot to see the new values if you want","2d2a34ba":"plot2 = df[df[\"Restaurant\"].isin([\"McDonald's\",\"Starbucks\",\"Chick-fil-A\",\"Taco Bell\",\"Burger King\"\n                                  \"Subway\",\"Wendy's\",\"Dunkin'\",\"Domino's\",\"Panera Bread\",\"Pizza Hut\",\n                                  \"Chipotle Mexican Grill\",\"Sonic Drive-In\",\"KFC\",\"Olive Garden\",\"Applebee's\",\n                                  \"Panda Express\",\"Arby's\",\"Popeyes Louisiana Kitchen\",\"Little Caesars\"])]\n# considering top 20 restaurants now","079dc257":"px.bar(plot2,\n      x='Restaurant',\n      y= 'gl_units',\n      text = 'Restaurant',\n      title = 'Gain or loss in Units sold for top 20 Restaurants')  #0 for loss --- 1 for gain\n","1644d6f3":"px.bar(plot2,\n      x='Restaurant',\n      y= 'gl_sales',\n      text = 'Restaurant',\n      title = 'Gain or loss in Sales Amount for top 20 Restaurants')","b3999a5a":"px.bar(df,  #taking a look at the most ordered food type\n      x='Segment_Category',\n      title = 'Most Ordered Type of Food')","5a407194":"#Thank you so much for stopping by . Upvote if you found this helpful :-)\n","2d3c7483":"Throughout the whole notebook , we observed how despite restaurants selling less number of units ,they still managed to pocket some money due to the relatively expensive price\n--------------------------------------\nVaried Menu seems to be the most ordered type of food item\n--------------------------------------","288033a4":"# Even though most of the restaurants sold comparitively less amount of units, they made up for the loss in sales price(particularly due to covid,things were expensive :(    "}}