{"cell_type":{"29d73c65":"code","50eb05f7":"code","e7d440ad":"code","2957a80f":"code","702a029a":"code","f946f2cb":"code","038360d0":"code","d87a5769":"code","8e2d7c3e":"code","3636c662":"code","3d738757":"code","13933f4a":"code","9b519d5a":"code","26fcb860":"code","b15b689e":"code","a1f34b8f":"code","b5c725e4":"code","13ed8f86":"code","8b8298f8":"code","a70b341a":"code","3a19e3fc":"code","17e14611":"code","e6eca85d":"code","239600fc":"code","d1051c9e":"code","3a00f643":"code","08c15988":"code","86fa5f18":"code","76fb63a6":"code","53809902":"code","9c514d80":"code","51734921":"code","3d81a748":"code","e359f3dc":"code","2dd4c3f1":"code","5f1b3241":"code","0c6fca19":"code","0e450416":"code","5659c672":"code","8ee1d74b":"markdown","a5691808":"markdown","3f25f8e2":"markdown","6680b9a5":"markdown","5a5d2d95":"markdown","702aabc0":"markdown","9ff9aafb":"markdown","32344a3b":"markdown","ab97c31e":"markdown","4d5322db":"markdown","b259643e":"markdown","75aec47f":"markdown","8aa4ab4f":"markdown","3abbacb5":"markdown"},"source":{"29d73c65":"# !pip uninstall -y lightgbm\n# !apt-get install -y libboost-all-dev\n# !git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM","50eb05f7":"# %%bash\n# cd LightGBM\n# rm -r build\n# mkdir build\n# cd build\n# cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\n# make -j$(nproc)","e7d440ad":"# !cd LightGBM\/python-package\/;python setup.py install --precompile","2957a80f":"# !mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n# !rm -r LightGBM","702a029a":"import gc\n\nimport numpy as np\nimport math\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\n\nimport shap","f946f2cb":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntrain_df.head()","038360d0":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/test.csv\")\ntest_df.head()","d87a5769":"sample_df = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")\nsample_df.head()","8e2d7c3e":"train_df.info()","3636c662":"train_df.isnull().sum()","3d738757":"train_df.describe()","13933f4a":"test_df.info()","9b519d5a":"test_df.describe()","26fcb860":"def reduce_memory_usage(df):\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    return df","b15b689e":"train_df = reduce_memory_usage(train_df)\ntest_df = reduce_memory_usage(test_df)","a1f34b8f":"train_df.info()","b5c725e4":"test_df.info()","13ed8f86":"def sturges_rule(n):\n    return round(1 + math.log2(n))","8b8298f8":"for i,colname in enumerate(train_df.columns):\n    plt.figure(\"train\" + str(i))\n    if len(train_df[colname].unique()) <= sturges_rule(len(train_df)):\n        sns.countplot(x=colname,  data=train_df)\n    else:\n        sns.histplot(train_df[colname], kde=False, bins=sturges_rule(len(train_df))) ","a70b341a":"for i,colname in enumerate(test_df.columns):\n    plt.figure(\"test\" + str(i))\n    if len(test_df[colname].unique()) <= sturges_rule(len(train_df)):\n        sns.countplot(x=colname,  data=test_df)\n    else:\n        sns.histplot(test_df[colname], kde=False, bins=sturges_rule(len(train_df))) ","3a19e3fc":"for i,colname in enumerate(train_df.columns):\n    plt.figure(\"hue\" + str(i))\n    if len(train_df[colname].unique()) <= sturges_rule(len(train_df)):\n        grid = sns.FacetGrid(train_df, col='Cover_Type', hue='Cover_Type', col_wrap=3, height=5)\n        grid.map(sns.countplot, colname)\n        plt.show()\n    else:\n        grid = sns.FacetGrid(train_df, col='Cover_Type', hue='Cover_Type', col_wrap=3, height=5)\n        grid.map(sns.histplot, colname, bins=sturges_rule(len(train_df)), kde=True)\n        plt.show()","17e14611":"corr = train_df.corr()\nplt.figure(\"corr\", figsize = [25,20])\nsns.heatmap(corr, square=True, annot=True)","e6eca85d":"feature_df = train_df.copy()\nfeature_df = feature_df.drop(\"Id\", axis=1)\nfeature_df = feature_df.drop(\"Cover_Type\", axis=1)","239600fc":"label_df = pd.DataFrame(train_df[\"Cover_Type\"])\nlabel_df = label_df - 1 #light gbm\u306f0\u304b\u3089\u306e\u30af\u30e9\u30b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","d1051c9e":"X_train, X_test, y_train, y_test = train_test_split(\n  feature_df, label_df, test_size=0.3, random_state=0\n)","3a00f643":"# params = {\n# #    'device_type': 'gpu',\n#     'boosting_type': 'gbdt',\n#     'objective': 'multiclass',\n#     'metric': 'multi_logloss',\n#     'num_class': 7, \n#     'random_state': 0,\n#     'verbose' : -1,\n#     'lambda_l1': 2, \n#     'lambda_l2': 9, \n#     'num_leaves': 93, \n#     'min_child_samples': 84\n# }\n\n# lgb_train = lgb.Dataset(X_train, y_train)\n# lgb_val = lgb.Dataset(X_test, y_test, reference=lgb_train)\n\n# gbm = lgb.train(params,\n#                 lgb_train,\n#                 valid_sets=[lgb_train, lgb_val],\n#                 num_boost_round = 1000,\n#                 early_stopping_rounds=100,\n#                 verbose_eval=100)","08c15988":"# lgb.plot_importance(gbm, figsize=(10,10), max_num_features=50, importance_type='split')","86fa5f18":"# lgb.plot_importance(gbm, figsize=(10,10), max_num_features=50, importance_type='gain')","76fb63a6":"# #notebook\u5185\u3067Javascript\u3092\u52d5\u304b\u3059\u305f\u3081\u306e\u304a\u307e\u3058\u306a\u3044\n# shap.initjs()\n\n# \"\"\"\n# shap.TreeExplainer:\u6c7a\u5b9a\u6728\u7528(XGBoost\u3001lightBGM\u7b49\u542b\u3080)\n# shap.LinearExplainer :\u7dda\u5f62\u30e2\u30c7\u30eb\u7528\n# shap.DeepExplainer :Deeplearning\u7528\n# \"\"\"\n# #TreeExplainer\u306f\u3001\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u306eSHAP\u5024\u3092\u53d6\u5f97\u3059\u308b\u3082\u306e\u3002\n# explainer = shap.TreeExplainer(model=gbm)\n# print(explainer.expected_value)","53809902":"# X_test_shap = X_test.sample(frac=0.05)\n# class_names = [0, 1, 2, 3, 4, 5, 6]\n# shap_values = explainer.shap_values(X=X_test_shap)\n# shap.summary_plot(shap_values, X_test_shap, plot_type=\"bar\", \n#                   class_names= class_names, feature_names = X_test_shap.columns)","9c514d80":"from sklearn.model_selection import StratifiedKFold\nimport optuna\nfrom sklearn.metrics import accuracy_score","51734921":"def opt_LGBM(trial):\n    lambda_l1 = trial.suggest_float('lambda_l1', 0.1, 9.9)\n    lambda_l2 = trial.suggest_float('lambda_l2', 0.1, 9.9)\n    num_leaves = trial.suggest_int('num_leaves', 10, 100)\n    min_child_samples = trial.suggest_int('min_child_samples', 10, 100)\n    num_boost_round = trial.suggest_int('num_boost_round', 1000, 5000, 1000)\n    params = {\n#        'device_type': 'gpu',\n        'boosting_type': 'gbdt',\n        'objective': 'multiclass',\n        'metric': 'multi_logloss',\n        'num_class': 7, \n        'random_state': 0,\n        'verbose' : -1,\n        'lambda_l1' : lambda_l1,\n        'lambda_l2' : lambda_l2,\n        'num_leaves' : num_leaves,\n        'min_child_samples' : min_child_samples,\n    }\n\n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_val = lgb.Dataset(X_test, y_test, reference=lgb_train)\n\n    model = lgb.train(params,\n                    lgb_train,\n                    valid_sets=[lgb_train, lgb_val],\n                    num_boost_round = num_boost_round,\n                    early_stopping_rounds=100,\n                    verbose_eval=100)\n\n    y_valid_pred = model.predict(X_test)\n    score = accuracy_score(y_test, np.argmax(y_valid_pred, axis=1))\n    print(f'ACC: {score}')\n\n    return score","3d81a748":"# def opt_LGBM(trial):\n#     lambda_l1 = trial.suggest_int('lambda_l1', 0.1, 9.9, 0.1)\n#     lambda_l2 = trial.suggest_int('lambda_l2', 0.1, 9.9, 0.1)\n#     num_leaves = trial.suggest_int('num_leaves', 1, 100)\n#     min_child_samples = trial.suggest_int('min_child_samples', 1, 100)\n#     params = {\n#         'device_type': 'gpu',\n#         'boosting_type': 'gbdt',\n#         'objective': 'multiclass',\n#         'metric': 'multi_logloss',\n#         'num_class': 7, \n#         'random_state': 0,\n#         'verbose' : -1,\n#         'lambda_l1' : lambda_l1,\n#         'lambda_l2' : lambda_l2,\n#         'num_leaves' : num_leaves,\n#         'min_child_samples' : min_child_samples,\n#     }\n\n#     valid_scores = []\n#     models = []\n#     kf = StratifiedKFold(n_splits=3)\n#     for fold, (train_indices, valid_indices) in enumerate(kf.split(X_train,y_train)):\n#         X_cv_train, X_cv_valid = X_train.iloc[train_indices], X_train.iloc[valid_indices]\n#         y_cv_train, y_cv_valid = y_train.iloc[train_indices], y_train.iloc[valid_indices]\n#         lgb_train = lgb.Dataset(X_cv_train, y_cv_train)\n#         lgb_val = lgb.Dataset(X_cv_valid, y_cv_valid)\n\n#         model = lgb.train(\n#                 params,\n#                 lgb_train,\n#                 valid_sets=[lgb_train, lgb_val],\n#                 num_boost_round = 1000,\n#                 early_stopping_rounds=100,\n#                 verbose_eval=100)\n#         y_valid_pred = model.predict(X_test)\n#         score = accuracy_score(y_test, np.argmax(y_valid_pred, axis=1))\n#         print(f'fold {fold} ACC: {score}')\n#         valid_scores.append(score)\n\n#         models.append(model)\n\n#     cv_score = np.mean(valid_scores)\n#     return cv_score","e359f3dc":"studyLGBM = optuna.create_study(direction='maximize')\nstudyLGBM.optimize(opt_LGBM, n_trials=15)\nprint(studyLGBM.best_params)\nprint(studyLGBM.best_value)\nprint(studyLGBM.best_trial)","2dd4c3f1":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'multiclass',\n    'metric': 'multi_logloss',\n    'num_class': 7, \n    'random_state': 0,\n    'verbose' : -1,\n    'lambda_l1' : studyLGBM.best_params[\"lambda_l1\"],\n    'lambda_l2' : studyLGBM.best_params[\"lambda_l2\"],\n    'num_leaves' : studyLGBM.best_params[\"num_leaves\"],\n    'min_child_samples' : studyLGBM.best_params[\"min_child_samples\"],\n}\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_val = lgb.Dataset(X_test, y_test, reference=lgb_train)\n\ngbm = lgb.train(params,\n                lgb_train,\n                valid_sets=[lgb_train, lgb_val],\n                num_boost_round = studyLGBM.best_params[\"num_boost_round\"],\n                early_stopping_rounds=100,\n                verbose_eval=100)","5f1b3241":"test_feature_df = test_df.copy()\ntest_feature_df = test_feature_df.drop(\"Id\", axis=1)","0c6fca19":"predicted = gbm.predict(test_feature_df)\npred_max = np.argmax(predicted, axis=1)","0e450416":"sample_df.drop(\"Cover_Type\", axis=1)\nsample_df[\"Cover_Type\"] = pred_max\nsample_df[\"Cover_Type\"] = sample_df[\"Cover_Type\"] + 1","5659c672":"sample_df.to_csv(\"submittion.csv\", index=False)","8ee1d74b":"## \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\n### seaborn\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\n\u68d2\u30b0\u30e9\u30d5\u306fcountplot\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306fhistplot\u3067\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002<br>\n\u9023\u7d9a\u5024\u304b\u3069\u3046\u304b\u306e\u5224\u65ad\u3092\u3001\u5404\u30ab\u30e9\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u6570\u304c\u3001\u30b9\u30bf\u30fc\u30b8\u30a7\u30b9\u306e\u516c\u5f0f\u3067\u6c42\u3081\u305f\u30d3\u30f3\u6570\u3088\u308a\u591a\u3044\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3057\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u30b0\u30e9\u30d5\u306e\u7a2e\u985e\u3092\u51fa\u3057\u5206\u3051\u3002<br>\nplt.figure\u3067\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u63cf\u753b\u57df\u3092\u5206\u3051\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u9805\u76ee\u540d\u306e\u30eb\u30fc\u30d7\u3067\u307e\u3068\u3081\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u3044\u308b\u3002<br>\n\u307e\u305f\u3001FaceTGrid\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001Cover_Type\u3054\u3068\u306e\u5206\u5e03\u3082\u78ba\u8a8d\u3002\n\n### \u30b9\u30bf\u30fc\u30b8\u30a7\u30b9\u306e\u516c\u5f0f\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u30d3\u30f3\u306e\u6570\u3092\u6c7a\u3081\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u516c\u5f0f\u3002<br>\nhttps:\/\/best-biostatistics.com\/excel\/sturges.html","a5691808":"## \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u78ba\u8a8d\n* \u6728\u306e\u5206\u5c90\u56de\u6570\u304c\u591a\u304b\u3063\u305f\u7279\u5fb4\u91cf(importance_type = 'split')\n* gini\u4fc2\u6570\u306e\u6539\u5584\u306b\u5f79\u7acb\u3063\u305f\u7279\u5fb4\u91cf(importance_type = 'gain')","3f25f8e2":"## \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3001\u78ba\u8a8d\nkaggle\u306e\u30b5\u30a4\u30c8\u306b\u3042\u308b\u3001\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u306f\u4e0b\u8a18\u306e\u901a\u308a\n```\n\u25a0\u30c7\u30fc\u30bf\u30d5\u30a3\u30fc\u30eb\u30c9\nElevation - \u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u306e\u6a19\u9ad8\nAspect - \u30a2\u30b9\u30da\u30af\u30c8\uff08\u65b9\u4f4d\u89d2\uff09\u3067\u3059\u3002\nSlope - \u50be\u659c\u306e\u5ea6\u5408\u3044\u3092\u8868\u3059\u3002\nHorizontal_Distance_To_Hydrology - \u6700\u3082\u8fd1\u3044\u5730\u8868\u6c34\u57df\u306e\u7279\u5fb4\u307e\u3067\u306e\u8ddd\u96e2\uff08Horz\nVertical_Distance_To_Hydrology - \u6700\u3082\u8fd1\u3044\u5730\u8868\u6c34\u57df\u307e\u3067\u306e\u5782\u76f4\u65b9\u5411\u306e\u8ddd\u96e2\u3002\nHorizontal_Distance_To_Roadways - \u6700\u3082\u8fd1\u3044\u9053\u8def\u307e\u3067\u306e\u8ddd\u96e2\uff08Horz\uff09\u3002\nHillshade_9am (0 to 255 index) - \u590f\u81f3\u306e\u5348\u524d9\u6642\u306e\u30d2\u30eb\u30b7\u30a7\u30fc\u30c9\u6307\u6570\nHillshade_Noon\uff080\u304b\u3089255\u307e\u3067\u306e\u5024\uff09 - \u590f\u81f3\u306e\u6b63\u5348\u306b\u304a\u3051\u308b\u65e5\u8986\u3044\u6307\u6570\nHillshade_3pm\uff080\u301c255\uff09 - \u590f\u81f3\u306e\u5348\u5f8c3\u6642\u306e\u65e5\u9670\u7387\nHorizontal_Distance_To_Fire_Points - \u6700\u3082\u8fd1\u3044\u5c71\u706b\u4e8b\u306e\u767a\u706b\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3002\nWilderness_Area (4\u3064\u306e\u30d0\u30a4\u30ca\u30ea\u5217\u30010 = \u5b58\u5728\u3057\u306a\u3044\u30011 = \u5b58\u5728\u3059\u308b) - \u539f\u751f\u5730\u57df\u306e\u6307\u5b9a\u3002\nSoil_Type (40\u500b\u306e\u30d0\u30a4\u30ca\u30ea\u5217\u30010 = \u7121\u3057\u30011 = \u6709\u308a) - \u571f\u58cc\u30bf\u30a4\u30d7\u306e\u6307\u5b9a\nCover_Type (7\u30bf\u30a4\u30d7\u30011\uff5e7\u306e\u6574\u6570) - \u68ee\u6797\u88ab\u8986\u30bf\u30a4\u30d7\u306e\u6307\u5b9a\n\n\u539f\u751f\u5730\u57df\u306f\n\n1 - \u30e9\u30ef\u30fb\u30a6\u30a3\u30eb\u30c0\u30cd\u30b9\u30fb\u30a8\u30ea\u30a2\n2 - \u30cd\u30aa\u30bf\u539f\u751f\u5730\u57df\uff08Neota Wilderness Area\n3 - \u30b3\u30de\u30f3\u30c1\u30fb\u30d4\u30fc\u30af\u30fb\u30a6\u30a3\u30eb\u30c0\u30cd\u30b9\u30fb\u30a8\u30ea\u30a2\n4 - Cache la Poudre Wilderness Area\uff08\u30ad\u30e3\u30c3\u30b7\u30e5\u30fb\u30e9\u30fb\u30d7\u30fc\u30c9\u30eb\u539f\u751f\u5730\u57df\n\n\u571f\u58cc\u306e\u7a2e\u985e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n1 \u30ab\u30c6\u30c9\u30e9\u30eb\u30fb\u30d5\u30a1\u30df\u30ea\u30fc - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n2 \u30d0\u30cd\u30c3\u30c8 - \u30e9\u30bf\u30b1\u65cf\u306e\u8907\u5408\u4f53\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n3 Haploborolis - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u3053\u308f\u308c\u3084\u3059\u3044\u3002\n4 \u30e9\u30bf\u30b1\u65cf-\u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u64e6\u308c\u3084\u3059\u3044\u3002\n5 \u30d0\u30cd\u30c3\u30c8\u30d5\u30a1\u30df\u30ea\u30fc - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u64e6\u308a\u5207\u308c\u3084\u3059\u3044\u3002\n6 \u30d0\u30cd\u30c3\u30c8-\u30a6\u30a8\u30c3\u30c8\u30e2\u30a2\u30d5\u30a1\u30df\u30ea\u30fc - \u5ca9\u77f3\u9732\u982d\u8907\u5408\u4f53\u3001\u77f3\u72b6\u3002\n7 \u30b4\u30b7\u30c3\u30af\u65cf\u3002\n8 \u30b9\u30fc\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc-\u30ea\u30f3\u30d0\u30fc\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u8907\u5408\u4f53\u3002\n9 \u30c8\u30e9\u30a6\u30c8\u30d3\u30eb\u30fb\u30d5\u30a1\u30df\u30ea\u30fc \u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n10 \u30d6\u30eb\u30ef\u30fc\u30af-\u30ad\u30e3\u30bf\u30de\u30a6\u30f3\u30c8\u30fb\u30d5\u30a1\u30df\u30ea\u30fc - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u7815\u3051\u3084\u3059\u3044\u3002\n11 \u30d6\u30eb\u30ef\u30fc\u30af-\u30ad\u30e3\u30bf\u30de\u30a6\u30f3\u30c8\u30fb\u30d5\u30a1\u30df\u30ea\u30fc-\u5ca9\u5730\u8907\u5408\u4f53\u3001\u64e6\u308a\u5207\u308c\u3084\u3059\u3044\u3002\n12 \u30ec\u30b4\u30fc\u5bb6 - \u5ca9\u5730\u8907\u5408\u4f53\u3001\u77f3\u3053\u308d\u3060\u3089\u3051\u3002\n13 \u30ab\u30bf\u30de\u30a6\u30f3\u30c8\u5bb6-\u5ca9\u5730-\u30d6\u30eb\u30a6\u30a9\u30fc\u30af\u5bb6\u306e\u8907\u5408\u4f53\u3001\u64e6\u308c\u3066\u3044\u308b\u3002\n14 \u30d1\u30af\u30c1\u30fc\u30fb\u30a2\u30eb\u30ae\u30dc\u30ea\u30b9 - \u30a2\u30af\u30aa\u30ea\u30b9\u8907\u5408\u4f53\u3002\n15 USFS\u306eSoil and ELU Survey\u3067\u306f\u7279\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n16 Cryaquolis - \u30af\u30e9\u30a4\u30aa\u30dc\u30ed\u30fc\u30ea\u30b9\u8907\u5408\u4f53\u3002\n17 \u30b2\u30fc\u30c8\u30d3\u30e5\u30fc\u30d5\u30a1\u30df\u30ea\u30fc - \u30af\u30e9\u30a4\u30a2\u30af\u30aa\u30ea\u30b9\u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u3002\n18 \u30ed\u30ac\u30fc\u30c8\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n19 \u5178\u578b\u7684\u306a\u30af\u30e9\u30a4\u30a2\u30af\u30aa\u30ea\u30b9 - \u30dc\u30ed\u30d8\u30e0\u30b9\u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u3002\n20 \u30bf\u30a4\u30d4\u30c3\u30af\u30fb\u30af\u30e9\u30a4\u30a2\u30af\u30a9\u30fc\u30c4 - \u30bf\u30a4\u30d4\u30c3\u30af\u30fb\u30af\u30e9\u30a4\u30a2\u30af\u30a9\u30fc\u30c4\u8907\u5408\u4f53\u3002\n21 \u5178\u578b\u7684\u306a\u30af\u30ea\u30e4\u30b3\u30eb\u30b9 - \u30ea\u30fc\u30ab\u30f3\u79d1\u3001\u57fa\u5e95\u819c\u307e\u3067\u306e\u8907\u5408\u4f53\u3002\n22 \u30ea\u30fc\u30ab\u30f3\u79d1\u3001\u5ca9\u5c64\u3001\u975e\u5e38\u306b\u5ca9\u77f3\u304c\u591a\u3044\u3002\n23 \u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u57fa\u5c64\u307e\u3067-\u5178\u578b\u7684\u306a\u30af\u30e9\u30a4\u30a2\u30af\u30a9\u30fc\u30eb\u30ba\u306e\u8907\u5408\u4f53\u3002\n24 \u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u6975\u3081\u3066\u77f3\u306e\u591a\u3044\u3082\u306e\u3002\n25 \u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u6696\u304b\u3044\u3001\u6975\u3081\u3066\u77f3\u306e\u591a\u3044\u3002\n26 \u30b0\u30e9\u30ca\u30a4\u30eb-\u30ab\u30bf\u30de\u30a6\u30f3\u30c8\u65cf\u8907\u5408\u4f53\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n27 \u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u6696\u304b\u3044 - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n28 \u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc - \u5ca9\u77f3\u9732\u982d\u306e\u8907\u5408\u4f53\u3001\u975e\u5e38\u306b\u77f3\u304c\u591a\u3044\u3002\n29 \u30b3\u30e2-\u30ec\u30b4\u30fc\u5bb6\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n30 \u30b3\u30e2\u30fb\u30d5\u30a1\u30df\u30ea\u30fc-\u5ca9\u5730-\u30ec\u30b4\u30fc\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n31 \u30ea\u30fc\u30ab\u30f3-\u30ab\u30bf\u30de\u30a6\u30f3\u30c8\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n32 \u30ab\u30bf\u30de\u30a6\u30f3\u30c8\u30fb\u30d5\u30a1\u30df\u30ea\u30fc-\u5ca9\u5834-\u30ea\u30fc\u30ab\u30f3\u30fb\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n33 \u30ea\u30fc\u30ab\u30f3-\u30ad\u30e3\u30bf\u30de\u30a6\u30f3\u30c8\u30fb\u30d5\u30a1\u30df\u30ea\u30fc-\u5ca9\u77f3\u9732\u982d\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n34 \u30af\u30e9\u30a4\u30aa\u30eb\u30bb\u30f3\u30c8-\u5ca9\u5730\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n35 \u30af\u30e9\u30a4\u30a2\u30f3\u30d6\u30ec\u30d7\u30c8\u65cf-\u5ca9\u77f3\u9732\u982d-\u30af\u30e9\u30a4\u30a2\u30f3\u30d6\u30ec\u30d7\u30c8\u65cf\u306e\u8907\u5408\u4f53\u3002\n36 \u30d6\u30ed\u30b9\u30fb\u30d5\u30a1\u30df\u30ea\u30fc-\u5ca9\u5730-\u30af\u30e9\u30a4\u30a2\u30f3\u30d6\u30ec\u30d7\u30c8\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n37 \u5ca9\u5834\u306e\u9732\u982d - \u30af\u30e9\u30a4\u30a2\u30f3\u30d6\u30ec\u30d7\u30c8 - \u30af\u30e9\u30a4\u30a2\u30f3\u30d6\u30ec\u30d7\u30c8\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n38 \u30ea\u30fc\u30ab\u30f3\u5bb6-\u30e2\u30e9\u30f3\u5bb6-\u30af\u30e9\u30a4\u30a2\u30af\u30aa\u30eb\u30c4\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n39 \u30e2\u30e9\u30f3\u65cf-\u30af\u30e9\u30a4\u30aa\u30eb\u30bb\u30f3\u30c8\u65cf-\u30ea\u30fc\u30ab\u30f3\u65cf\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n40 \u30e2\u30e9\u30f3\u65cf-\u30af\u30e9\u30a4\u30aa\u30bb\u30f3\u30c8\u65cf-\u30ed\u30c3\u30af\u30e9\u30f3\u30c9\u65cf\u306e\u8907\u5408\u4f53\u3001\u6975\u3081\u3066\u77f3\u304c\u591a\u3044\u3002\n```","6680b9a5":"## \u30e2\u30c7\u30eb\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u30e2\u30c7\u30eb\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3068\u3057\u3066\u3001\u4e0b\u8a18\uff12\u3064\u3092\u5b9f\u65bd\u3002\n### K-Fold\u4ea4\u5dee\u691c\u8a3c\nhttps:\/\/axa.biopapyrus.jp\/machine-learning\/model-evaluation\/k-fold-cross-validation.html\n### \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\nOptuna\u3068\u3044\u3046\u30d9\u30a4\u30ba\u6700\u9069\u5316\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u65bd\u3002<br>\n[\u30d9\u30a4\u30ba\u6700\u9069\u5316](https:\/\/book.mynavi.jp\/manatee\/detail\/id=59393)<br>\n[Oputuna](https:\/\/optuna.org\/)","5a5d2d95":"## \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u307f","702aabc0":"## Cover_Type\u3068\u306e\u76f8\u95a2\u3092\u78ba\u8a8d","9ff9aafb":"## \u5165\u529b\u30c7\u30fc\u30bf\u4f5c\u6210","32344a3b":"## \u6700\u9069\u5316\u306e\u5b9f\u884c","ab97c31e":"## lightGBM\u3092GPU\u3067\u4f7f\u7528\u3059\u308b\u6e96\u5099","4d5322db":"## \u30e1\u30e2\u30ea\u524a\u6e1b","b259643e":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","75aec47f":"## K-Fold\n\u6642\u9593\u304c\u3068\u3066\u3064\u3082\u306a\u304f\u304b\u304b\u308b\u306e\u3067\u4e00\u65e6\u3084\u3089\u306a\u3044","8aa4ab4f":"## \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\nkaggle\u3067\u3082\u3088\u304f\u4f7f\u308f\u308c\u308blight-gbm\u3092\u4f7f\u7528\u3059\u308b\u3002<br>\nCover_Type\u304c1-7\u307e\u3067\u3042\u308b\u306e\u3067\u3001multi class\u3092\u4f7f\u3046\u3002<br>\n\u5b66\u7fd2\u6642\u9593\u306e\u7bc0\u7d04\u306e\u305f\u3081\u3001\u30a2\u30fc\u30ea\u30fc\u30b9\u30c8\u30c3\u30d7\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002","3abbacb5":"## SHAP\u5024\u306e\u78ba\u8a8d"}}