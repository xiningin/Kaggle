{"cell_type":{"793b9fd7":"code","4a58e182":"code","d772d250":"code","285f0e41":"code","f0fb5951":"code","9c11f1f7":"code","8dfc6828":"code","05bce9a3":"code","1281652f":"code","4af0257f":"code","035d9648":"code","3090d8bc":"code","95e26028":"code","7b591ab4":"code","3b783c3b":"code","75da7385":"code","6dd176f5":"code","dfb72d9c":"code","7f60445d":"code","c7c781fd":"code","2fcea69d":"code","d83a5bbd":"code","4ff90c14":"code","2c307490":"code","c03a724c":"code","e9587466":"code","8ecb4c6e":"code","2f6e64ae":"code","b2e390e8":"code","03a13dac":"code","a0bdd356":"code","03263fc0":"code","d0f97f6c":"code","1be6ccb8":"code","072061ed":"code","69367885":"code","603cbff2":"code","960f8734":"code","6ec5d164":"code","85ca73f6":"code","d714ad90":"code","ce158be8":"markdown","21b48cd7":"markdown","9e94b76d":"markdown","0d89b163":"markdown","c8fb0679":"markdown","564ecdd4":"markdown","79116804":"markdown","d3afc8c9":"markdown","31bfb93f":"markdown","a4a3cbb7":"markdown","95ea0536":"markdown","8c09297b":"markdown","67580d11":"markdown","ac258628":"markdown","4b795246":"markdown","525688c4":"markdown","d932147f":"markdown","5a286a5d":"markdown","0cf35e88":"markdown","14e32093":"markdown","30158e0c":"markdown","d78561f6":"markdown","de315f7b":"markdown","cabe030a":"markdown","7105e78f":"markdown","ef0052ec":"markdown","63258f5e":"markdown","6a572e78":"markdown","435fdad1":"markdown","166d734b":"markdown","db0e2840":"markdown","c2d54b4b":"markdown","93b58ff0":"markdown","dcaac43c":"markdown","b31676c6":"markdown","c0a92498":"markdown","4bf2dc66":"markdown","94ac452b":"markdown","a3f391c1":"markdown","51af76eb":"markdown","3c90c555":"markdown","9ab94937":"markdown","89075e6b":"markdown","b0c9fd76":"markdown","d96a14e1":"markdown","0fbade08":"markdown","2a7356c6":"markdown","55a913ec":"markdown","953a658b":"markdown","3a167899":"markdown","69c33dfa":"markdown","6159508f":"markdown","58c02628":"markdown","143dcb67":"markdown","ae73fe87":"markdown","a76a5751":"markdown","b4e69689":"markdown","cc0a33f5":"markdown","7c7deddc":"markdown","d76e37b0":"markdown","e84e66f1":"markdown","1d0adc38":"markdown","8c3d5c7a":"markdown","a6e3b2a4":"markdown","45faab93":"markdown","459aad8d":"markdown","c5abaca5":"markdown","227cd0f2":"markdown","71cf4466":"markdown","41b400d6":"markdown","3d94f911":"markdown","38b48403":"markdown","4beddb81":"markdown","ba24cb5a":"markdown","c088c1da":"markdown","fc5b7d4d":"markdown","542af9c0":"markdown","01ea2dd2":"markdown","6c614bd1":"markdown","b42507dd":"markdown","ed43ef5a":"markdown","58a7eab0":"markdown","1174d3de":"markdown","c932986e":"markdown","68e22b31":"markdown","c84ef50a":"markdown","787e1925":"markdown","ab17b3d7":"markdown","11b1128d":"markdown","a2ef09ea":"markdown","f63bc092":"markdown","e95b24d5":"markdown","86a7e55e":"markdown","5d253d28":"markdown","60550c44":"markdown","96773a44":"markdown","2049c47e":"markdown","aa50475a":"markdown","715c14fe":"markdown","3d5240c4":"markdown","0f2ae42c":"markdown","0b6204e4":"markdown","f916e365":"markdown","61f34678":"markdown","0e7f35ae":"markdown","926bfde9":"markdown","72e2bbd5":"markdown","3de81a81":"markdown","e71b5a1a":"markdown","f5b84e4a":"markdown","226f77b4":"markdown","ac58bc85":"markdown","4bcd304f":"markdown","a3b60708":"markdown","1b1213b4":"markdown","623be4d9":"markdown","ad603081":"markdown","927645d5":"markdown","4f84c12e":"markdown","16376253":"markdown","abc02aa7":"markdown","ac015580":"markdown","fb1a422d":"markdown","1da6d94e":"markdown","2703ef4f":"markdown","c297a29a":"markdown","075f8bc3":"markdown","6bec4ec7":"markdown","37eb49e5":"markdown","a4d82ec4":"markdown","2b101b5c":"markdown","0d46f7fa":"markdown","498b0cda":"markdown","3d2982c3":"markdown","91996e61":"markdown","478f4c0e":"markdown","a3d81c0a":"markdown","fe39f5e4":"markdown","0586c4b1":"markdown"},"source":{"793b9fd7":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","4a58e182":"inputs = keras.Input(shape=(784,), name=\"digits\")\nx = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = layers.Dense(10, activation=\"softmax\", name=\"predictions\")(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)","d772d250":"(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n\n# \ub370\uc774\ud130\ub97c \uc804\ucc98\ub9ac\ud569\ub2c8\ub2e4 (\uc774\uac83\uc740 NumPy \ubc30\uc5f4\ub4e4\uc785\ub2c8\ub2e4)\nx_train = x_train.reshape(60000, 784).astype(\"float32\") \/ 255\nx_test = x_test.reshape(10000, 784).astype(\"float32\") \/ 255\n\ny_train = y_train.astype(\"float32\")\ny_test = y_test.astype(\"float32\")\n\n# \uac80\uc99d\uc744 \uc704\ud574 10,000\uac1c\uc758 \ud45c\ubcf8\uc744 \ub0a8\uaca8\ub461\ub2c8\ub2e4\nx_val = x_train[-10000:]\ny_val = y_train[-10000:]\nx_train = x_train[:-10000]\ny_train = y_train[:-10000]","285f0e41":"model.compile(\n    optimizer=keras.optimizers.RMSprop(), # \ucd5c\uc801\ud654\n    # \ucd5c\uc18c\ud654\ud560 \uc190\uc2e4 \ud568\uc218\n    loss=keras.losses.SparseCategoricalCrossentropy(),\n    # \uc9c0\ucf1c\ubcfc \ud3c9\uac00 \uc9c0\ud45c\uc758 \ubaa9\ub85d\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)","f0fb5951":"print(\"Fit model on training data\")\nhistory = model.fit(\n    x_train,\n    y_train,\n    batch_size=64,\n    epochs=2,\n    # \uac01 \uc138\ub300\uc758 \ub05d\uc5d0\uc11c\n    # \uac80\uc99d \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc9c0\ucf1c\ubcf4\uae30 \uc704\ud574\n    # \uba87\uac1c\uc758 \uac80\uc99d\uc744 \ub118\uaca8\uc90d\ub2c8\ub2e4\n    validation_data=(x_val, y_val),\n)","9c11f1f7":"history.history","8dfc6828":"# `evaluate`\uc744 \uc0ac\uc6a9\ud574 \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4\nprint(\"Evaluate on test data\")\nresults = model.evaluate(x_test, y_test, batch_size=128)\nprint(\"test loss, test acc:\", results)\n\n# `predict`\ub97c \uc0ac\uc6a9\ud574 \uc0c8 \ub370\uc774\ud130 \uc704\uc5d0\uc11c\n# \uc608\uce21\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4 (\ud655\ub960 -- \ub9c8\uc9c0\ub9c9 \uce35\uc758 \ucd9c\ub825)\nprint(\"Generate predictions for 3 samples\")\npredictions = model.predict(x_test[:3])\nprint(\"predictions shape:\", predictions.shape)","05bce9a3":"model.compile(\n    optimizer=keras.optimizers.RMSprop(learning_rate=1e-3),\n    loss=keras.losses.SparseCategoricalCrossentropy(),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)","1281652f":"model.compile(\n    optimizer=\"rmsprop\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"sparse_categorical_accuracy\"],\n)","4af0257f":"def get_uncompiled_model():\n    inputs = keras.Input(shape=(784,), name=\"digits\")\n    x = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\n    x = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\n    outputs = layers.Dense(10, activation=\"softmax\", name=\"predictions\")(x)\n    model = keras.Model(inputs=inputs, outputs=outputs)\n    return model\n\n\ndef get_compiled_model():\n    model = get_uncompiled_model()\n    model.compile(\n        optimizer=\"rmsprop\",\n        loss=\"sparse_categorical_crossentropy\",\n        metrics=[\"sparse_categorical_accuracy\"],\n    )\n    return model","035d9648":"def custom_mean_squared_error(y_true, y_pred):\n    return tf.math.reduce_mean(tf.square(y_true - y_pred))\n\n\nmodel = get_uncompiled_model()\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=custom_mean_squared_error)\n\n# MSE\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ub77c\ubca8\uc744 one-hot \uc778\ucf54\ub529\ud574\uc57c \ud569\ub2c8\ub2e4\ny_train_one_hot = tf.one_hot(y_train, depth=10)\nmodel.fit(x_train, y_train_one_hot, batch_size=64, epochs=1)","3090d8bc":"class CustomMSE(keras.losses.Loss):\n    def __init__(self, regularization_factor=0.1, name=\"custom_mse\"):\n        super().__init__(name=name)\n        self.regularization_factor = regularization_factor\n    \n    def call(self, y_true, y_pred):\n        mse = tf.math.reduce_mean(tf.square(y_true - y_pred))\n        reg = tf.math.reduce_mean(tf.square(0.5 - y_pred))\n        return mse + reg * self.regularization_factor\n\n\nmodel = get_uncompiled_model()\nmodel.compile(optimizer=keras.optimizers.Adam(), loss=CustomMSE())\n\ny_train_one_hot = tf.one_hot(y_train, depth=10)\nmodel.fit(x_train, y_train_one_hot, batch_size=64, epochs=1)","95e26028":"class CategoricalTruePositives(keras.metrics.Metric):\n    def __init__(self, name=\"categorical_true_positives\", **kwargs):\n        super(CategoricalTruePositives, self).__init__(name=name, **kwargs)\n        self.true_positives = self.add_weight(name=\"ctp\", initializer=\"zeros\")\n    \n    def update_state(self, y_true, y_pred, sample_weight=None):\n        y_pred = tf.reshape(tf.argmax(y_pred, axis=1), shape=(-1, 1))\n        values = tf.cast(y_true, \"int32\") == tf.cast(y_pred, \"int32\")\n        values = tf.cast(values, \"float32\")\n        if sample_weight is not None:\n            sample_weight = tf.cast(sample_weight, \"float32\")\n            values = tf.multiply(values, sample_weight)\n        self.true_positives.assign_add(tf.reduce_sum(values))\n    \n    def result(self):\n        return self.true_positives\n    \n    def reset_states(self):\n        # \ud3c9\uac00 \uc9c0\ud45c\uc758 \uc0c1\ud0dc\ub294 \uac01 \uc138\ub300\uc758 \uc2dc\uc791\uc5d0\uc11c \ucd08\uae30\ud654\ub420 \uac83\uc785\ub2c8\ub2e4.\n        self.true_positives.assign(0.0)\n\n\nmodel = get_uncompiled_model()\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(learning_rate=1e-3),\n    loss=keras.losses.SparseCategoricalCrossentropy(),\n    metrics=[CategoricalTruePositives()],\n)\nmodel.fit(x_train, y_train, batch_size=64, epochs=3)","7b591ab4":"class ActivityRegularizationLayer(layers.Layer):\n    def call(self, inputs):\n        self.add_loss(tf.reduce_sum(inputs) * 0.1)\n        return inputs # \ud1b5\uacfc \uce35.\n\n\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\n\n# \uce35\uc73c\ub85c\uc368 \ud65c\ub3d9 \uc815\uaddc\ud654\ub97c \ub123\uc2b5\ub2c8\ub2e4\nx = ActivityRegularizationLayer()(x)\n\nx = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = layers.Dense(10, name=\"predictions\")(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(learning_rate=1e-3),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n)\n\n# \uc815\uaddc\ud654 \ubd80\ubd84 \ub54c\ubb38\uc5d0\n# \ud45c\uc2dc\ub418\ub294 \uc190\uc2e4\uc740 \uc774\uc804\ubcf4\ub2e4 \ud6e8\uc52c \ub192\uc744 \uac83\uc785\ub2c8\ub2e4.\nmodel.fit(x_train, y_train, batch_size=64, epochs=1)","3b783c3b":"class MetricLoggingLayer(layers.Layer):\n    def call(self, inputs):\n        # `aggregation` \uc778\uc790\ub294\n        # \uac01 \uc138\ub300 \uc704\uc5d0\uc11c\n        # \uc5b4\ub5bb\uac8c \uc0ac\uc804 \ubb36\uc74c \uac12\uc744 \ud569\uce60\uc9c0 \uc815\uc758\ud569\ub2c8\ub2e4:\n        # \uc774 \uacbd\uc6b0\uc5d0\ub294 \uac04\ub2e8\ud558\uac8c \ud3c9\uade0\uc744 \ub0c5\ub2c8\ub2e4.\n        self.add_metric(\n            keras.backend.std(inputs), name=\"std_of_activation\", aggregation=\"mean\"\n        )\n        return inputs # \ud1b5\uacfc \uce35.\n\n\ninputs = keras.Input(shape=(784,), name=\"digits\")\nx = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\n\n# \uce35\uc73c\ub85c\uc368 \ud45c\uc900 \uae30\ub85d\uc744 \ub123\uc2b5\ub2c8\ub2e4.\nx = MetricLoggingLayer()(x)\n\nx = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = layers.Dense(10, name=\"predictions\")(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(learning_rate=1e-3),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n)\nmodel.fit(x_train, y_train, batch_size=64, epochs=1)","75da7385":"inputs = keras.Input(shape=(784,), name=\"digits\")\nx1 = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(inputs)\nx2 = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x1)\noutputs = layers.Dense(10, name=\"predictions\")(x2)\nmodel = keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.add_loss(tf.reduce_sum(x1) * 0.1)\n\nmodel.add_metric(keras.backend.std(x1), name=\"std_of_activation\", aggregation=\"mean\")\n\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n)\nmodel.fit(x_train, y_train, batch_size=64, epochs=1)","6dd176f5":"class LogisticEndpoint(keras.layers.Layer):\n    def __init__(self, name=None):\n        super(LogisticEndpoint, self).__init__(name=name)\n        self.loss_fn = keras.losses.BinaryCrossentropy(from_logits=True)\n        self.accuracy_fn = keras.metrics.BinaryAccuracy()\n    \n    def call(self, targets, logits, sample_weights=None):\n        # \ud559\uc2b5 \ub3d9\uc548\uc758 \uc190\uc2e4 \uac12\uc744 \uacc4\uc0b0\ud558\uace0\n        # `self.add_loss()`\ub97c \uc0ac\uc6a9\ud574 \uce35\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n        loss = self.loss_fn(targets, logits, sample_weights)\n        self.add_loss(loss)\n        \n        # \ud3c9\uac00 \uc9c0\ud45c\ub85c\uc368 \uc815\ud655\ub3c4\ub97c \uae30\ub85d\ud558\uace0\n        # `self.add_metric()`\uc744 \uc0ac\uc6a9\ud574 \uce35\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4.\n        acc = self.accuracy_fn(targets, logits, sample_weights)\n        self.add_metric(acc, name=\"accuracy\")\n        \n        # (`.predict()`\uc744 \uc704\ud55c) \ucd94\ub860 \ub3d9\uc548\uc758 \uc608\uce21 \ud150\uc11c\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n        return tf.nn.softmax(logits)","dfb72d9c":"import numpy as np\n\ninputs = keras.Input(shape=(3,), name=\"inputs\")\ntargets = keras.Input(shape=(10,), name=\"targets\")\nlogits = keras.layers.Dense(10)(inputs)\npredictions = LogisticEndpoint(name=\"predictions\")(logits, targets)\n\nmodel = keras.Model(inputs=[inputs, targets], outputs=predictions)\nmodel.compile(optimizer=\"adam\") # \uc190\uc2e4 \uc778\uc790\uac00 \uc5c6\uc2b5\ub2c8\ub2e4!\n\ndata = {\n    \"inputs\": np.random.random((3, 3)),\n    \"targets\": np.random.random((3, 10)),\n}\nmodel.fit(data)","7f60445d":"model = get_compiled_model()\nmodel.fit(x_train, y_train, batch_size=64, validation_split=0.2, epochs=1)","c7c781fd":"model = get_compiled_model()\n\n# \uba3c\uc800, Dataset \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\uc2dc\ub2e4.\n# \uc608\uc81c\ub97c \uc704\ud574, \uc774\uc804\uacfc \uac19\uc740 MNIST \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n# \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc11e\uace0 \ub098\ub215\ub2c8\ub2e4.\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\n# \uc774\uc81c \ud3c9\uac00 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uac00\uc838\uc635\ub2c8\ub2e4.\ntest_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test))\ntest_dataset = test_dataset.batch(64)\n\n# \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uc774\ubbf8 \ubb36\uc74c\uc744 \uace0\ub824\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0,\n# `batch_size` \uc778\uc790\ub97c \ub118\uaca8\uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nmodel.fit(train_dataset, epochs=3)\n\n# \ub370\uc774\ud130 \uc138\ud2b8 \uc704\uc5d0\uc11c \ud3c9\uac00\ud558\uac70\ub098 \uc608\uce21\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\nprint(\"Evaluate\")\nresult = model.evaluate(test_dataset)\ndict(zip(model.metrics_names, result))","2fcea69d":"model = get_compiled_model()\n\n# \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc900\ube44\ud569\ub2c8\ub2e4\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\n# \uac01 \uc138\ub300 \ub9c8\ub2e4 \uc624\uc9c1 100\uac1c\uc758 \ubb36\uc74c\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4 (\uc774\uac83\uc740 64 * 100\uac1c\uc758 \ud45c\ubcf8\uc785\ub2c8\ub2e4)\nmodel.fit(train_dataset, epochs=3, steps_per_epoch=100)","d83a5bbd":"model = get_compiled_model()\n\n# \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8 \uc900\ube44\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\n# \uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8 \uc900\ube44\nval_dataset = tf.data.Dataset.from_tensor_slices((x_val, y_val))\nval_dataset = val_dataset.batch(64)\n\nmodel.fit(train_dataset, epochs=1, validation_data=val_dataset)","4ff90c14":"model = get_compiled_model()\n\n# \ud559\uc2b5 \ub370\uc774\ud130 \uc138\ud2b8 \uc900\ube44\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\n# \uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8 \uc900\ube44\nval_dataset = tf.data.Dataset.from_tensor_slices((x_val, y_val))\nval_dataset = val_dataset.batch(64)\n\nmodel.fit(\n    train_dataset,\n    epochs=1,\n    # `validation_steps` \uc778\uc790\ub97c \uc0ac\uc6a9\ud574\n    # \ub370\uc774\ud130 \uc138\ub4dc\uc758 \uccab 10\uac1c \ubb36\uc74c \ub9cc\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac80\uc99d\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4\n    validation_data=val_dataset,\n    validation_steps=10,\n)","2c307490":"import numpy as np\n\nclass_weight = {\n    0: 1.0,\n    1: 1.0,\n    2: 1.0,\n    3: 1.0,\n    4: 1.0,\n    # \ud074\ub798\uc2a4\ub97c 2\ubc30 \ub354 \uc911\uc694\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud574,\n    # \ud074\ub798\uc2a4 \"5\"\uc5d0 \ub300\ud574 \uac00\uc911\uce58\ub97c \"2\"\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n    5: 2.0,\n    6: 1.0,\n    7: 1.0,\n    8: 1.0,\n    9: 1.0,\n}\n\nprint(\"Fit with class weight\")\nmodel = get_compiled_model()\nmodel.fit(x_train, y_train, class_weight=class_weight, batch_size=64, epochs=1)","c03a724c":"sample_weight = np.ones(shape=(len(y_train),))\nsample_weight[y_train == 5] = 2.0\n\nprint(\"Fit with sample weight\")\nmodel = get_compiled_model()\nmodel.fit(x_train, y_train, sample_weight=sample_weight, batch_size=64, epochs=1)","e9587466":"sample_weight = np.ones(shape=(len(y_train),))\nsample_weight[y_train == 5] = 2.0\n\n# (\ubc18\ud658\ub41c \uc21c\uc11c\uc30d\uc758 3\ubc88\uc9f8 \uc6d0\uc18c)\n# \ud45c\ubcf8 \uac00\uc911\uce58\ub97c \ud3ec\ud568\ud558\ub294 Dataset\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train, sample_weight))\n\n# \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc11e\uace0 \ub098\ub215\ub2c8\ub2e4.\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\nmodel = get_compiled_model()\nmodel.fit(train_dataset, epochs=1)","8ecb4c6e":"image_input = keras.Input(shape=(32, 32, 3), name=\"img_input\")\ntimeseries_input = keras.Input(shape=(None, 10), name=\"ts_input\")\n\nx1 = layers.Conv2D(3, 3)(image_input)\nx1 = layers.GlobalMaxPooling2D()(x1)\n\nx2 = layers.Conv1D(3, 3)(timeseries_input)\nx2 = layers.GlobalMaxPooling1D()(x2)\n\nx = layers.concatenate([x1, x2])\n\nscore_output = layers.Dense(1, name=\"score_output\")(x)\nclass_output = layers.Dense(5, name=\"class_output\")(x)\n\nmodel = keras.Model(\n    inputs=[image_input, timeseries_input], outputs=[score_output, class_output]\n)","2f6e64ae":"keras.utils.plot_model(model, \"multi_input_and_output_model.png\", show_shapes=True)","b2e390e8":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=[keras.losses.MeanSquaredError(), keras.losses.CategoricalCrossentropy()],\n)","03a13dac":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=[keras.losses.MeanSquaredError(), keras.losses.CategoricalCrossentropy()],\n    metrics=[\n        [\n            keras.metrics.MeanAbsolutePercentageError(),\n            keras.metrics.MeanAbsoluteError(),\n        ],\n        [keras.metrics.CategoricalAccuracy()],\n    ]\n)","a0bdd356":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss={\n        \"score_output\": keras.losses.MeanSquaredError(),\n        \"class_output\": keras.losses.CategoricalCrossentropy(),\n    },\n    metrics={\n        \"score_output\": [\n            keras.metrics.MeanAbsolutePercentageError(),\n            keras.metrics.MeanAbsoluteError(),\n        ],\n        \"class_output\": [keras.metrics.CategoricalAccuracy()],\n    },\n)","03263fc0":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss={\n        \"score_output\": keras.losses.MeanSquaredError(),\n        \"class_output\": keras.losses.CategoricalCrossentropy(),\n    },\n    metrics={\n        \"score_output\": [\n            keras.metrics.MeanAbsolutePercentageError(),\n            keras.metrics.MeanAbsoluteError(),\n        ],\n        \"class_output\": [keras.metrics.CategoricalAccuracy()],\n    },\n    loss_weights={\"score_output\": 2.0, \"class_output\": 1.0},\n)","d0f97f6c":"# \uc190\uc2e4 \ubc30\uc5f4 \ubc84\uc804\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=[None, keras.losses.CategoricalCrossentropy()],\n)\n\n# \ub610\ub294 \uc190\uc2e4 \uc0ac\uc804 \ubc84\uc804\nmodel.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss={\"class_output\": keras.losses.CategoricalCrossentropy()},\n)","1be6ccb8":"model.compile(\n    optimizer=keras.optimizers.RMSprop(1e-3),\n    loss=[keras.losses.MeanSquaredError(), keras.losses.CategoricalCrossentropy()],\n)\n\n# \ubaa8\uc870 NumPy \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4\nimg_data = np.random.random_sample(size=(100, 32, 32, 3))\nts_data = np.random.random_sample(size=(100, 20, 10))\nscore_targets = np.random.random_sample(size=(100, 1))\nclass_targets = np.random.random_sample(size=(100, 5))\n\n# \ubc30\uc5f4 \uc704\uc5d0\uc11c \ud559\uc2b5\ud569\ub2c8\ub2e4\nmodel.fit([img_data, ts_data], [score_targets, class_targets], batch_size=32, epochs=1)\n\n# \ub300\uc2e0\uc5d0, \uc0ac\uc804 \uc704\uc5d0\uc11c \ud559\uc2b5\ud569\ub2c8\ub2e4\nmodel.fit(\n    {\"img_input\": img_data, \"ts_input\": ts_data},\n    {\"score_output\": score_targets, \"class_output\": class_targets},\n    batch_size=32,\n    epochs=1,\n)","072061ed":"train_dataset = tf.data.Dataset.from_tensor_slices(\n    (\n        {\"img_input\": img_data, \"ts_input\": ts_data},\n        {\"score_output\": score_targets, \"class_output\": class_targets},\n    )\n)\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(64)\n\nmodel.fit(train_dataset, epochs=1)","69367885":"model = get_compiled_model()\n\ncallbacks = [\n    keras.callbacks.EarlyStopping(\n        # `val_loss`\uac00 \ub354 \uc774\uc0c1 \uac1c\uc120\ub418\uc9c0 \uc54a\uc744 \ub54c \ud559\uc2b5 \uc911\ub2e8\n        monitor=\"val_loss\",\n        # \"\ub354 \uc774\uc0c1 \uac1c\uc120\ub418\uc9c0 \uc54a\uc74c\"\uc740 \"1e-2 \uac10\uc18c\ubcf4\ub2e4 \uc88b\uc9c0 \ubabb\ud560 \ub54c\"\ub85c\uc368 \uc815\uc758\n        min_delta=1e-2,\n        # \"\ub354 \uc774\uc0c1 \uac1c\uc120\ub418\uc9c0 \uc54a\uc74c\"\uc740 \"\uc801\uc5b4\ub3c4 2 \uc138\ub300 \ub3d9\uc548\"\uc73c\ub85c\uc368 \ucd94\uac00 \uc815\uc758\n        patience=2,\n        verbose=1,\n    )\n]\nmodel.fit(\n    x_train,\n    y_train,\n    epochs=20,\n    batch_size=64,\n    callbacks=callbacks,\n    validation_split=0.2,\n)","603cbff2":"class LossHistory(keras.callbacks.Callback):\n    def on_train_begin(self, logs):\n        self.per_batch_losses = []\n    \n    def on_batch_end(self, batch, logs):\n        self.per_batch_losses.append(logs.get(\"loss\"))","960f8734":"model = get_compiled_model()\n\ncallbacks = [\n    keras.callbacks.ModelCheckpoint(\n        # \ubaa8\ub378\uc744 \uc800\uc7a5\ud558\ub294 \uacbd\ub85c\n        # \uc544\ub798\uc758 \ub450 \ub9e4\uac1c\ubcc0\uc218\ub294 `val_loss` \uc810\uc218\uac00 \uac1c\uc120\ub418\uc5b4\uc57c\ub9cc\n        # \ud604\uc7ac \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \ub36e\uc5b4\uc4f8 \uac83\uc774\ub77c\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.\n        # \uc800\uc7a5\ub41c \ubaa8\ub378 \uc774\ub984\uc740 \ud604\uc7ac \uc138\ub300\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4.\n        filepath=\"mymodel_{epoch}\",\n        save_best_only=True, # `val_loss`\uac00 \uac1c\uc120\ub418\uc5c8\uc744 \ub54c\uc5d0\ub9cc \ubaa8\ub378\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n        monitor=\"val_loss\",\n        verbose=1,\n    )\n]\nmodel.fit(\n    x_train, y_train, epochs=2, batch_size=64, callbacks=callbacks, validation_split=0.2\n)","6ec5d164":"import os\n\n# \ubaa8\ub4e0 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \uc800\uc7a5\ud558\ub294 \ub514\ub809\ud1a0\ub9ac\ub97c \uc900\ube44\ud569\ub2c8\ub2e4.\ncheckpoint_dir = \".\/ckpt\"\nif not os.path.exists(checkpoint_dir):\n    os.makedirs(checkpoint_dir)\n\n\ndef make_or_restore_model():\n    # \ub9c8\uc9c0\ub9c9 \ubaa8\ub378\uc744 \ubcf5\uc6d0\ud558\uac70\ub098,\n    # \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uccb4\ud06c\ud3ec\uc778\ud2b8\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc0c8\ub85c\uc6b4 \ud558\ub098\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    checkpoints = [checkpoint_dir + \"\/\" + name for name in os.listdir(checkpoint_dir)]\n    if checkpoints:\n        latest_checkpoint = max(checkpoints, key=os.path.getctime)\n        proint(\"Restoring from\", latest_checkpoint)\n        return keras.models.load_model(latest_checkpoint)\n    print(\"Creating a new model\")\n    return get_compiled_model()\n\n\nmodel = make_or_restore_model()\ncallbacks = [\n    # \uc774 \ucf5c\ubc31\uc740 \ub9e4 100 \ubb36\uc74c \ub9c8\ub2e4 SavedModel\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    # \uc800\uc7a5\ub41c \ubaa8\ub378 \uc774\ub984 \uc548\uc5d0 \ud559\uc2b5 \uc190\uc2e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4.\n    keras.callbacks.ModelCheckpoint(\n        filepath=checkpoint_dir + \"\/ckpt-loss={loss:.2f}\", save_freq=100\n    )\n]\nmodel.fit(x_train, y_train, epochs=1, callbacks=callbacks)","85ca73f6":"initial_learning_rate = 0.1\nlr_schedule = keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate, decay_steps=100000, decay_rate=0.96, staircase=True\n)\n\noptimizer = keras.optimizers.RMSprop(learning_rate=lr_schedule)","d714ad90":"keras.callbacks.TensorBoard(\n    log_dir=\"\/full_path_to_your_logs\",\n    histogram_freq=0, # \uc5bc\ub9c8\ub098 \uc790\uc8fc \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc2dc\uac01\ud654\ub97c \uae30\ub85d\ud560 \uc9c0\n    embeddings_freq=0, # \uc5bc\ub9c8\ub098 \uc790\uc8fc \uc784\ubca0\ub529 \uc2dc\uac01\ud654\ub97c \uae30\ub85d\ud560 \uc9c0\n    update_freq=\"epoch\",\n) # \uc5bc\ub9c8\ub098 \uc790\uc8fc \uae30\ub85d\uc744 \uc791\uc131\ud560 \uc9c0 (\uae30\ubcf8: \uc138\ub300 \ub2f9 \ud55c\ubc88)","ce158be8":"`Datasets` \uac1d\uccb4\ub97c `fit()`, `evaluate()`, \uadf8\ub9ac\uace0 `predict()` \uba54\uc18c\ub4dc\ub4e4\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \ub118\uae38 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","21b48cd7":"\uc774 \ub370\uc774\ud130 \uc138\ud2b8\ub85c\ubd80\ud130 \ud2b9\uc815\ud55c \uac1c\uc218\uc758 \ubb36\uc74c \uc704\uc5d0\uc11c\ub9cc \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74, \ubaa8\ub378\uc774 \ub2e4\uc74c \uc138\ub300\ub85c \uc6c0\uc9c1\uc774\uae30 \uc804\uc5d0 \uc774 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc0ac\uc6a9\ud574 \uc2e4\ud589\ud574\uc57c \ud558\ub294 \ud559\uc2b5 \ub2e8\uacc4\uc758 \uac1c\uc218\ub97c \ud2b9\uc815\ud558\ub294 `steps_per_epoch` \uc778\uc790\ub97c \ub118\uaca8\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","9e94b76d":"\ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac\ub54c \ud754\ud55c \uc591\uc2dd\uc740 \ud559\uc2b5\uc774 \uc9c4\ud589\ub418\uba74\uc11c \ud559\uc2b5\ub960\uc744 \uc810\uc9c4\uc801\uc73c\ub85c \uac10\uc18c\uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \"\ud559\uc2b5\ub960 \ubd80\ud328\"\ub77c\uace0 \uc54c\ub824\uc838\uc788\uc2b5\ub2c8\ub2e4.","0d89b163":"\ud559\uc2b5 \uc124\uc815\uac12\uc744 \ud2b9\uc815\ud569\ub2c8\ub2e4(\ucd5c\uc801\ud654, \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c):","c8fb0679":"## \ud45c\ubcf8 \uac00\uc911\uce58 \ubd80\uc5ec\uc640 \ud074\ub798\uc2a4 \uac00\uc911\uce58 \ubd80\uc5ec \uc0ac\uc6a9","564ecdd4":"\ud3c9\uac00 \uc9c0\ud45c\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc720\uc0ac\ud569\ub2c8\ub2e4:","79116804":"## API \uac1c\uc694: \uccab \uc885\ub2e8 \uac04 \uc608\uc81c","d3afc8c9":"\uc81c\uacf1 \ud3c9\uade0 \uc624\ucc28\ub97c \uc0ac\uc6a9\ud558\uae30\ub97c \uc6d0\ud558\uc9c0\ub9cc, 0.5\uac00 \uba3c \uc608\uce21 \uac12\uc744 \uc9c0\uc591\ud558\uac8c \ud558\ub294 \ud56d(\ubc94\uc8fc\ud615 \ubaa9\ud45c\ub294 one-hot \uc778\ucf54\ub529\ub418\uc5b4 \uc788\uace0 0\uc640 1 \uc0ac\uc774\uc758 \uac12\uc744 \uac00\uc9c4\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4)\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uace0 \ud569\uc2dc\ub2e4. \uc774\uac83\uc740 \ubaa8\ub378\uc774 \ub108\ubb34 \uc790\uc2e0\uac10\uc788\uc9c0 \uc54a\ub3c4\ub85d \uac00\uc0b0\uc810\uc744 \uc0dd\uc131\ud558\uba70, \uc774\uac83\uc740 \uacfc\uc801\ud569\uc744 \uc904\uc774\ub294 \ub370\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4(\uc2dc\ub3c4\ud574\ubcf4\uae30 \uc804\uae4c\uc9c0\ub294 \ubaa8\ub985\ub2c8\ub2e4!).","31bfb93f":"### \ud45c\uc900 \uc11c\uba85\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c \ub2e4\ub8e8\uae30","a4a3cbb7":"\uc555\ub3c4\uc801\uc778 \ub2e4\uc218\uc758 \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc740 `y_true`\uc640 \ubaa8\ub378\uc758 \ucd9c\ub825\uc778 `y_pred`\ub85c\ubd80\ud130 \uacc4\uc0b0\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc815\uaddc\ud654 \uc190\uc2e4\uc740 \uce35\uc758 \ud65c\uc131\ud654 \uac12\ub9cc\uc744 \uc694\uad6c\ud560 \uac83\uc774\uba70(\uc774 \uacbd\uc6b0\uc5d0\ub294 \ubaa9\ud45c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4), \uc774 \ud65c\uc131\ud654 \uac12\uc740 \ubaa8\ub378\uc758 \ucd9c\ub825\uc774 \uc544\ub2d0 \uac83\uc785\ub2c8\ub2e4.","95ea0536":"\uc774\uc804 \uba87 \ubb38\ub2e8\uc5d0\uc11c, \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c, \uadf8\ub9ac\uace0 \ucd5c\uc801\ud654\ub97c \uc5b4\ub5bb\uac8c \ub2e4\ub8e8\ub294\uc9c0 \ubcf4\uc558\uc73c\uba70, NumPy \ubc30\uc5f4\ub85c \ub370\uc774\ud130\ub97c \ub118\uaca8\uc904 \ub54c fit \uc548\uc758 `validation_data`\uc640 `validation_split` \uc778\uc790\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","8c09297b":"### TensorBoard \ucf5c\ubc31 \uc0ac\uc6a9","67580d11":"\uc774\uac83\uc744 \ud560 \uc218 \uc788\ub294 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 `ModelCheckpoint` \ucf5c\ubc31\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4:","ac258628":"\uc5ec\uae30 \uc8fc\uc5b4\uc9c4 \ud074\ub798\uc2a4\uc5d0\uc11c \uc5bc\ub9c8\ub098 \ub9ce\uc740 \ud45c\ubcf8\ub4e4\uc774 \uc633\uac8c \ubd84\ub958\ub418\uc5c8\ub294\uc9c0 \uc138\ub294 `CategoricalTruePostives` \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc5b4\ub5bb\uac8c \uad6c\ud604\ud558\ub294\uc9c0 \ubcf4\uc5ec\uc8fc\ub294 \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4:","4b795246":"[`keras.utils.Sequence`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/Sequence)\ub294 \ub450\uac00\uc9c0 \uc911\uc694\ud55c \ud2b9\uc131\uc744 \uac00\uc9c0\ub294 Python \uc0dd\uc131\uae30\ub97c \uc5bb\uae30 \uc704\ud574 \uc0c1\uc18d\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4:\n* \uba40\ud2f0 \ud504\ub85c\uc138\uc2f1\uc5d0 \uc798 \uc791\ub3d9\ud55c\ub2e4.\n* \uc11e\uc77c \uc218 \uc788\ub2e4(\uc608\ub97c \ub4e4\uc5b4, `fit()`\uc5d0\uc11c `shuffle=True`\uc744 \ub118\uae30\ub294 \uacbd\uc6b0).","525688c4":"Keras\uc5d0\uc11c \ucf5c\ubc31\uc740 \ud559\uc2b5 \ub3d9\uc548\uc5d0 \ub2e4\ub978 \uc2dc\uc810(\uc138\ub300\uc758 \uc2dc\uc791, \ubb36\uc74c\uc758 \ub05d, \uc138\ub300\uc758 \ub05d \ub4f1)\uc5d0\uc11c \ud638\ucd9c\ub418\ub294 \uac1d\uccb4\uc774\uba70 \ub2e4\uc74c\uacfc \uac19\uc740 \ud589\ub3d9\ub4e4\uc744 \uad6c\ud604\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","d932147f":"\ucd5c\uc801\ud654:\n* `SGD()` (\uc6b4\ub3d9\ub7c9 \ud3ec\ud568 \ub610\ub294 \ubbf8\ud3ec\ud568)\n* `RMSprop()`\n* `Adam()`\n* \ub4f1","5a286a5d":"Keras \ubaa8\ub378\uacfc fit \uba54\uc18c\ub4dc\ub85c TensorBoard\ub97c \uc0ac\uc6a9\ud558\ub294 \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 `TensorBoard` \ucf5c\ubc31\uc785\ub2c8\ub2e4.","0cf35e88":"\uaf2d [\ub9de\ucda4 \ucf5c\ubc31\uc744 \uc791\uc131\ud558\uae30 \uc704\ud55c \uc804\uccb4 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/custom_callback\/)\ub97c \uc77d\uc5b4\ubcf4\uc138\uc694.","14e32093":"### \uac1c\uc778\ud654\ub41c \uc190\uc2e4","30158e0c":"\uc55e\uc5d0\uc11c \ubd24\ub358 \uccab \uc885\ub2e8 \uac04 \uc608\uc81c\uc5d0\uc11c, \uac01 \uc138\ub300\uc758 \ub05d\uc5d0 \uac80\uc99d \uc190\uc2e4\uacfc \uac80\uc99d \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud3c9\uac00\ud558\uae30 \uc704\ud574 \ubaa8\ub378\uc5d0 NumPy \ubc30\uc5f4\uc758 \ud29c\ud50c `(x_val, y_val)`\uc744 \ub118\uaca8\uc8fc\uae30 \uc704\ud574 `validation_data` \uc778\uc790\ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.","d78561f6":"`ModelCheckpoint` \ucf5c\ubc31\uc740 \uace0\uc7a5 \ud5c8\uc6a9 \ubc94\uc704\ub97c \uad6c\ud604\ud558\ub294\ub370\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud559\uc2b5\uc774 \uc784\uc758\uc801\uc73c\ub85c \uc911\ub2e8\ub41c \uacbd\uc6b0\uc5d0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc800\uc7a5\ub41c \ubaa8\ub378\uc758 \uc0c1\ud0dc\ub85c\ubd80\ud130 \ud559\uc2b5\uc744 \uc7ac\uc2dc\uc791\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\uc785\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc778 \uc608\uc81c\uc785\ub2c8\ub2e4:","de315f7b":"\"\ud45c\ubcf8 \uac00\uc911\uce58\" \ubc30\uc5f4\uc740 \uc804\uccb4 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud560 \ub54c\uc5d0 \ubb36\uc74c \uc548\uc758 \uac01 \ud45c\ubcf8\uc774 \uc5bc\ub9c8\uc758 \uac00\uc911\uce58\ub97c \uac00\uc838\uc57c \ud558\ub294\uc9c0 \ud2b9\uc815\ud558\ub294 \uc22b\uc790\uc758 \ubc30\uc5f4\uc785\ub2c8\ub2e4. \ubd88\uade0\ub4f1 \ubd84\ub958 \ubb38\uc81c(\ub4dc\ubb3c\uac8c \ub098\ud0c0\ub098\ub294 \ud074\ub798\uc2a4\uc5d0 \ub354 \uac00\uc911\uce58\ub97c \uc8fc\ub294 \uac1c\ub150)\uc5d0\uc11c \ud754\ud788 \uc4f0\uc785\ub2c8\ub2e4.","cabe030a":"\uc774 \uac00\uc774\ub4dc\ub294 \ubd84\uc0b0 \ud559\uc2b5\uc744 \ub2e4\ub8e8\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubd84\uc0b0 \ud559\uc2b5\uc744 \uc704\ud574\uc11c\ub294, [\ub2e4\uc911 gpu & \ubd84\uc0b0 \ud559\uc2b5 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guides\/distributed_training)\ub97c \ubcf4\uc138\uc694.","7105e78f":"\ub3d9\uc801 \ud559\uc2b5\ub960 \uc608\uc815(\uc608\ub97c \ub4e4\uc5b4, \uac80\uc99d \uc190\uc2e4\uc774 \ub354\uc774\uc0c1 \uac1c\uc120\ub418\uc9c0 \uc54a\uc744 \ub54c \ud559\uc2b5\ub960 \uac10\uc18c)\uc740 \ucd5c\uc801\ud654\uae30\uac00 \uac80\uc99d \uc9c0\ud45c\uc5d0 \ub300\ud55c \uc811\uadfc\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc774\ub7f0 \uc608\uc815 \uac1d\uccb4\ub85c\ub294 \uc131\ucde8\ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.","ef0052ec":"`metrics` \uc778\uc790\ub294 \ubc30\uc5f4\uc774\uc5b4\uc57c \ud558\ub2c8\ub2e4 - \ubaa8\ub378\uc740 \uc5b4\ub5a4 \uac1c\uc218\uc758 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\ub3c4 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","63258f5e":"`fit()`\uc73c\ub85c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub294, \uc190\uc2e4 \ud568\uc218, \ucd5c\uc801\uacfc, \uadf8\ub9ac\uace0 \uc120\ud0dd\uc801\uc73c\ub85c, \uc9c0\ucf1c\ubcfc \uba87\uac00\uc9c0 \ud3c9\uac00 \uc9c0\ud45c\ub4e4\uc744 \ud2b9\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.","6a572e78":"### \uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8 \uc0ac\uc6a9","435fdad1":"\ub9cc\uc57d \uc790\uc2e0 \ub9cc\uc758 \ud559\uc2b5 \uacfc\uc815 \ud568\uc218\ub97c \ud2b9\uc815\ud558\uba70 `fit()`\ub97c \ud655\uc7a5\ud558\ub294\ub370\uc5d0 \uad00\uc2ec\uc774 \uc788\ub2e4\uba74, [\"`fit()`\uc5d0\uc11c \uc218\ud589\ub418\ub294 \uc791\uc5c5 \uac1c\uc778\ud654\"](https:\/\/www.tensorflow.org\/guide\/keras\/customizing_what_happens_in_fit\/) \uac00\uc774\ub4dc\ub97c \ubcf4\uc138\uc694.","166d734b":"\uc0c1\ud0dc \uac31\uc2e0\uacfc \uacb0\uacfc \uacc4\uc0b0\uc740 \uba87\uac00\uc9c0 \uacbd\uc6b0\uc5d0 \uacb0\uacfc \uacc4\uc0b0\uc740 \ub9e4\uc6b0 \ube44\uc2f8\uace0 \uc8fc\uae30\uc801\uc73c\ub85c \uc218\ud589\ub420 \uac83\uc77c \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 (\uac01\uac01 `update_state()`\uc640 `result()`\ub85c) \ubd84\ub9ac\ub429\ub2c8\ub2e4.","db0e2840":"NumPy \ub370\uc774\ud130\ub85c \ud559\uc2b5\ud560 \ub54c\uc5d0\ub9cc `validation_split`\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ub450\uc138\uc694.","c2d54b4b":"fit\uc5d0\uc11c \ub2e4\uc911 \uc785\ub825\uc774\ub098 \ub2e4\uc911 \ucd9c\ub825 \ubaa8\ub378\uc5d0 \ub370\uc774\ud130\ub97c \ub118\uae30\ub294 \uac83\uc740 \ucef4\ud30c\uc77c \uacfc\uc815\uc5d0\uc11c \uc190\uc2e4 \ud568\uc218\ub97c \ud2b9\uc815\ud558\ub294 \ubc29\ubc95\uacfc \uc720\uc0ac\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4: **NumPy \ubc30\uc5f4\uc758 \ubaa9\ub85d**(\uc190\uc2e4 \ud568\uc218\ub97c \ubc1b\ub294 \ucd9c\ub825\uc5d0 \ub300\ud55c 1:1 \ub300\uc751)\uc774\ub098 **\ucd9c\ub825 \uc774\ub984\uacfc NumPy \ubc30\uc5f4\uc744 \ub300\uc751\uc2dc\ud0a4\ub294 \uc0ac\uc804**\uc744 \ub118\uae38 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","93b58ff0":"\uc77c\ubc18\uc801\uc73c\ub85c, \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4:\n* \ub370\uc774\ud130\uac00 \uc791\uace0 \uba54\ubaa8\ub9ac\uc5d0 \ub9de\ub294\ub2e4\uba74 NumPy \uc785\ub825 \ub370\uc774\ud130\n* \ud070 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uace0 \ubd84\uc0b0 \ud559\uc2b5\uc774 \ud544\uc694\ud558\ub2e4\uba74 `Dataset` \uac1d\uccb4\n* \ud070 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uace0 TensorFlow\uc5d0\uc11c \ud560 \uc218 \uc5c6\ub294 Python \uce21\uba74\uc758 \uac1c\uc778\ud654\ub41c \ub9ce\uc740 \ucc98\ub9ac\ub97c \uc218\ud589\ud574\uc57c \ud55c\ub2e4\uba74 (\uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ub098 \uc804\ucc98\ub9ac\ub97c \uc704\ud574 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc758\uc874\ud558\ub294 \uacbd\uc6b0) `Sequence` \uac1d\uccb4","dcaac43c":"[`tf.data`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data) API\ub294 \ub370\uc774\ud130\ub97c \ube60\ub974\uace0 \ud655\uc7a5\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc73c\ub85c \ubd88\ub7ec\uc624\uace0 \uc804\ucc98\ub9ac\ud558\uae30 \uc704\ud55c TensorFlow 2.0\uc758 \ub3c4\uad6c\uc758 \ubaa8\uc74c\uc785\ub2c8\ub2e4.","b31676c6":"\uc774\ub7f0 \uacbd\uc6b0\uc5d0, \uac1c\uc778\ud654\ub41c \uce35\uc758 call \uba54\uc18c\ub4dc \uc548\uc5d0\uc11c `self.add_loss(loss_value)`\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c \ucd94\uac00\ub41c \uc190\uc2e4\ub4e4\uc740 \ud559\uc2b5 \uc911\uc5d0 (`compile()`\uc5d0 \ub118\uaca8\uc9c0\ub294) \"\uc8fc\" \uc190\uc2e4\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc5ec\uae30 \ud65c\ub3d9 \uc815\uaddc\ud654\ub97c \ucd94\uac00\ud558\ub294 \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4(\ud65c\ub3d9 \uc815\uaddc\ud654\ub294 \ubaa8\ub4e0 Keras \uce35\uc5d0 \ub0b4\uc81c\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694 - \uc774 \uce35\uc740 \uadf8\uc800 \uad6c\uccb4\uc801\uc778 \uc608\uc81c\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4):","c0a92498":"### \ub9ce\uc740 \ub0b4\uc81c\ub41c \ucd5c\uc801\ud654, \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c\uac00 \uc0ac\uc6a9\uac00\ub2a5\ud569\ub2c8\ub2e4","4bf2dc66":"### \ud074\ub798\uc2a4 \uac00\uc911\uce58","94ac452b":"* \ud559\uc2b5\uacfc \ud3c9\uac00\uc5d0 \ub300\ud55c \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\uc758 \uc2e4\uc2dc\uac04 \uadf8\ub9bc\n* (\uc120\ud0dd) \uce35 \ud65c\uc131\ud654\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc758 \uc2dc\uac01\ud654\n* (\uc120\ud0dd) `Embedding` \uce35\ub4e4\uc5d0 \uc758\ud574 \ud559\uc2b5\ub41c \uc784\ubca0\ub529 \uacf5\uac04\uc758 3D \uc2dc\uac01\ud654","a3f391c1":"[Functional API](https:\/\/www.tensorflow.org\/guide\/keras\/functional\/)\uc5d0\uc11c\ub294, `model.add_loss(loss_tensor)`\uc774\ub098 `model.add_metric(metric_tensor, name, aggregation)` \ub610\ud55c \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","51af76eb":"\uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uac01 \uc0ac\uc6a9\ub9c8\ub2e4 \ucd08\uae30\ud654\ub420 \uac83(\uadf8\ub798\uc11c \uc138\ub300\uc5d0\uc11c \uc138\ub300\ub85c \ud56d\uc0c1 \uac19\uc740 \ud45c\ubcf8 \uc704\uc5d0\uc11c \ud3c9\uac00\ud55c\ub2e4\ub294 \uac83)\uc774\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694.","3c90c555":"`y_true`\uc640 `y_pred` \uc774\uc678\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c \ubc1b\ub294 \uc190\uc2e4 \ud568\uc218\uac00 \ud544\uc694\ud558\ub2e4\uba74, [`tf.keras.losses.Loss`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/losses\/Loss) \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uace0 \ub2e4\uc74c\uc758 \ub450\uac1c\uc758 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n* `__init__(self)`: \uc190\uc2e4 \ud568\uc218\uc758 \ud638\ucd9c \uc911\uc5d0 \ub118\uae30\uae30 \uc704\ud55c \ub9e4\uac1c \ubcc0\uc218\ub97c \ubc1b\uc2b5\ub2c8\ub2e4\n* `call(self, y_true, y_pred)`: \ubaa9\ud45c(y_true)\uc640 \ubaa8\ub378 \uc608\uce21(y_pred)\ub97c \uc0ac\uc6a9\ud574 \ubaa8\ub378\uc758 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4","9ab94937":"\uc5ec\uae30 `Dataset`\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4: NumPy \ubc30\uc5f4\uc5d0 \ub300\ud574 \ud588\ub358 \uac83\uacfc \uc720\uc0ac\ud558\uac8c, `Dataset`\uc740 \uc0ac\uc804\uc758 \uc21c\uc11c\uc30d\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4.","89075e6b":"### \uac1c\uc778\ud654\ub41c \ud3c9\uac00 \uc9c0\ud45c","b0c9fd76":"\uc190\uc2e4:\n* `MeanSquaredError()`\n* `KLDivergence()`\n* `CosineSimilarity()`\n* \ub4f1","d96a14e1":"\ud559\uc2b5 \ub3d9\uc548 \ubaa8\ub378\uc5d0 \ud56d\uc0c1 \ub208\uc744 \ub458 \uc218 \uc788\ub294 \uac00\uc7a5 \uc88b\uc740 \ubc29\ubc95\uc740 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uace0 \uc544\ub798\ub97c \uc81c\uacf5\ud558\ub294 \ube0c\ub77c\uc6b0\uc800 \uae30\ubc18 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc778 [TensorBoard](https:\/\/www.tensorflow.org\/tensorboard)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4:","0fbade08":"\uc774\uac83\uacfc \uac19\uc774 `loss` \uc778\uc790 \uc5c6\uc774 \ucef4\ud30c\uc77c\ub41c \ubaa8\ub378\uc5d0\uc11c \ub450\uac1c\uc758 \uc785\ub825(\uc785\ub825 \ub370\uc774\ud130 & \ubaa9\ud45c)\uc73c\ub85c \uc774\uac83\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","2a7356c6":"API\uc5d0 \uc5c6\ub294 \ud3c9\uac00 \uc9c0\ud45c\uac00 \ud544\uc694\ud558\ub2e4\uba74, [`tf.keras.metrics.Metric`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/metrics\/Metric) \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc74c\uc73c\ub85c\uc368 \uac1c\uc778\ud654\ub41c \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc27d\uac8c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 4\uac1c\uc758 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud574\uc57c \ud560 \uac83\uc785\ub2c8\ub2e4:\n* `__init__(self)`, \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc704\ud55c \uc0c1\ud0dc \ubcc0\uc218\ub4e4\uc744 \uc0dd\uc131\ud558\ub294 \uacf3\uc785\ub2c8\ub2e4.\n* `update_state(self, y_true, y_pred, sample_weight=None)`, \uc0c1\ud0dc \ubcc0\uc218\ub4e4\uc744 \uac31\uc2e0\ud558\uae30 \uc704\ud574 \ubaa9\ud45c y_true\uc640 \ubaa8\ub378 \uc608\uce21 y_pred\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n* `result(self)`, \ucd5c\uc885 \uacb0\uacfc\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \uc0c1\ud0dc \ubcc0\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n* `reset_states(self)`, \ud3c9\uac00 \uc9c0\ud45c\uc758 \uc0c1\ud0dc\ub97c \uc7ac\ucd08\uae30\ud654\ud569\ub2c8\ub2e4.","55a913ec":"## compile() \uba54\uc18c\ub4dc: \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c, \ucd5c\uc801\ud654 \ud2b9\uc815","953a658b":"```python\nfrom skimage.io import imread\nfrom skimage.transform import resize\nimport numpy as np\n\n# \uc5ec\uae30, `filenames`\ub294 \uc774\ubbf8\uc9c0\ub85c\uc758 \uacbd\ub85c\uc758 \ubaa9\ub85d\uc774\uace0,\n# `labels`\ub294 \uc5f0\uad00\ub41c \ub77c\ubca8\uc785\ub2c8\ub2e4.\n\nclass CIFAR10Sequence(Sequence):\n    def __init__(self, filenames, labels, batch_size):\n        self.filenames, self.labels = filenames, labels\n        self.batch_size = batch_size\n    \n    def __len__(self):\n        return int(np.ceil(len(self.filenames) \/ float(self.batch_size)))\n    \n    def __getitem__(self, idx):\n        batch_x = self.filename[idx * self.batch_size:(idx + 1) * self.batch_size]\n        batch_y = self.labels[idx * self.batch_size:(idx + 1) * self.batch_size]\n        return np.array([\n            resize(imread(filename), (200, 200))\n                for filename in batch_x]), np.array(batch_y)\n\nsequence = CIFAR10Sequence(filenames, labels, batch_size)\nmodel.fit(sequence, epochs=10)\n```","3a167899":"`Sequence`\ub294 \ub450\uac00\uc9c0 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4:\n* `__getitem__`\n* `__len__`","69c33dfa":"`Dataset`\uc5d0 \ub9de\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4:","6159508f":"\uc5ec\uae30 \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4:","58c02628":"\uc774\uc81c, \uc774 \uc791\uc5c5 \ud750\ub984\uc758 \uac01 \uc870\uac01\uc744 \uc790\uc138\ud558\uac8c \ubcf5\uc2b5\ud569\uc2dc\ub2e4.","143dcb67":"\uc77c\ubc18\uc801\uc73c\ub85c, \ub0b4\uc81c\ub41c \ubc18\ubcf5\ubb38\uc774\ub358 \uc9c1\uc811 \ub9cc\ub4e0 \uac83\uc744 \uc0ac\uc6a9\ud558\ub358, \ubaa8\ub378 \ud559\uc2b5 & \ud3c9\uac00\ub294 - Sequential \ubaa8\ub378, Functional API\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ubaa8\ub378, \uc0c1\uc18d\uc744 \ud1b5\ud574 \ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 \uc791\uc131\ud55c \ubaa8\ub378 - \ubaa8\ub4e0 \uc885\ub958\uc758 Keras \ubaa8\ub378\uc5d0\uc11c \uc5c4\ubc00\ud788 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4.","ae73fe87":"\ucd5c\uc801\ud654\uae30\uc5d0 `learning_rate` \uc778\uc790\ub85c \uc608\uc815 \uac1d\uccb4\ub97c \ub118\uaca8\uc90c\uc73c\ub85c\uc368 \uc815\uc801 \ud559\uc2b5\ub960 \ubd80\ud328 \uc77c\uc815\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","a76a5751":"```bash\ntensorboard --logdir=\/full_path_to_your_logs\n```","b4e69689":"# \ub0b4\uc7ac\ub41c \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud55c \ud559\uc2b5 \ubc0f \ud3c9\uac00","cc0a33f5":"\uc608\ub97c \ub4e4\uc5b4, \ub370\uc774\ud130\uc5d0\uc11c \ud074\ub798\uc2a4 \"0\"\uc774 \ud074\ub798\uc2a4 \"1\"\uc758 \uc808\ubc18\ub9cc\ud07c \ub098\ud0c0\ub09c\ub2e4\uba74, `Model.fit(..., class_weight={0: 1., 1: 0.5})`\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7c7deddc":"\uc774\uac83\uc740 [`Model.fit()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#fit)\uc5d0 `class_weight` \uc778\uc790\ub85c \uc0ac\uc804\uc744 \ub118\uaca8\uc90c\uc73c\ub85c\uc368 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc0ac\uc804\uc740 \ud074\ub798\uc2a4 \uc0c9\uc778\ub4e4\uc5d0\uc11c \uc774 \ud074\ub798\uc2a4\uc5d0 \uc18d\ud558\ub294 \ud45c\ubcf8\uc5d0 \uc0ac\uc6a9\ub420 \uac00\uc911\uce58\ub85c \ub300\uc751\uc2dc\ud0b5\ub2c8\ub2e4.","d76e37b0":"## \ud559\uc2b5 \ub3d9\uc548 \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c \uc2dc\uac01\ud654","e84e66f1":"\uadf8\ub7ec\ub098, \ucf5c\ubc31\uc740 \uac80\uc99d \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud3ec\ud568\ud558\ub294 \ubaa8\ub4e0 \ud3c9\uac00 \uc9c0\ud45c\uc5d0 \uc811\uadfc\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4! \uadf8\ub798\uc11c \ucd5c\uc801\ud654\uae30 \uc704\uc5d0\uc11c \ud604\uc7ac \ud559\uc2b5\ub960\uc744 \uc870\uc815\ud558\ub294 \ucf5c\ubc31\uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc774 \uc591\uc2dd\uc744 \uc131\ucde8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4, \uc774\uac83\uc740 \uc2ec\uc9c0\uc5b4 `ReduceLROnPlateau` \ucf5c\ubc31\uc73c\ub85c\uc368 \ub0b4\uc81c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","1d0adc38":"(\ud559\uc2b5 \ub370\uc774\ud130\ub85c\ubd80\ud130 \ubcf4\ub958 \uc138\ud2b8\ub97c \uc0dd\uc131\ud558\ub294) `validation_split` \uc778\uc790\ub294 `Dataset` \uac1d\uccb4\ub85c\ubd80\ud130 \ud559\uc2b5\uc744 \ud560 \ub54c\uc5d0\ub294 \uc774 \uae30\ub2a5\uc774 `Dataset` API\ub85c \uc77c\ubc18\uc801\uc73c\ub85c \uac00\ub2a5\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130 \uc138\ud2b8\uc758 \ud45c\ubcf8\uc744 \uc0c9\uc778\ud560 \uc218 \uc788\ub294 \ub2a5\ub825\uc744 \ud544\uc694\ub85c \ud558\uae30\uc5d0 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","8c3d5c7a":"\uc774\uc81c [`tf.data.Dataset`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset) \uac1d\uccb4\uc758 \ud615\ud0dc\ub85c \ub370\uc774\ud130\uac00 \ubc1b\uc544\uc9c0\ub294 \uacbd\uc6b0\ub97c \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","a6e3b2a4":"## \uc124\uc815","45faab93":"\uc608\uce21\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\uace0 \ud559\uc2b5\uc5d0\uc11c\ub294 \uc544\ub2cc \ucd9c\ub825\uc774\ub77c\uba74, \ud2b9\uc815 \ucd9c\ub825\uc5d0 \ub300\ud574 \uc190\uc2e4\uc744 \uacc4\uc0b0\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc120\ud0dd\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4:","459aad8d":"\uc774 \uc608\uc81c\ub97c \uc704\ud574 MNIST \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.","c5abaca5":"\uc774\uac83\ub4e4\uc744 `compile()` \uba54\uc18c\ub4dc\uc5d0 \uc778\uc790\ub85c\uc368 \ubaa8\ub378\ub85c \ub118\uaca8\uc90d\ub2c8\ub2e4:","227cd0f2":"\uc774\uc804 \uc608\uc81c\ub4e4\uc5d0\uc11c\ub294, \ub2e8\uc77c \uc785\ub825(`(764,)` \ubaa8\uc591\uc758 \ud150\uc11c)\uacfc \ub2e8\uc77c \ucd9c\ub825(`(10,)` \ubaa8\uc591\uc758 \uc608\uce21 \ud150\uc11c)\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378\uc744 \uace0\ub824\ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc911 \uc785\ub825\uc774\ub098 \ucd9c\ub825\uc744 \uac00\uc9c0\ub294 \ubaa8\ub378\uc5d0 \ub300\ud574\uc11c\ub294 \uc5b4\ub5a8\uae4c\uc694?","71cf4466":"\uac01 \uc138\ub300\uc758 \ub05d\uc5d0, \ubaa8\ub378\uc740 \uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8 \uc704\uc5d0\uc11c \ubc18\ubcf5\ud558\uba70 \uac80\uc99d \uc190\uc2e4\uacfc \uac80\uc99d \ud3c9\uac00 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud560 \uac83\uc785\ub2c8\ub2e4.","41b400d6":"## \ud559\uc2b5\ub960 \uc608\uc815 \uc0ac\uc6a9","3d94f911":"## \uc18c\uac1c","38b48403":"`add_metric()`\uc744 \uc0ac\uc6a9\ud574 \ud3c9\uac00 \uc9c0\ud45c \uac12\uc744 \uae30\ub85d\ud558\uae30 \uc704\ud574\uc11c\ub3c4 \ub611\uac19\uc774 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","4beddb81":"`fit()`\uc5d0 `validation_data` \uc778\uc790\ub85c `Dataset` \uac1d\uccb4\ub97c \ub118\uae38 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","ba24cb5a":"\ub2e4\uc74c\uc758 `LogisticEndpoint` \uce35\uc744 \uace0\ub824\ud574\ubcf4\uc138\uc694: \uc774\uac83\uc740 \uc785\ub825\uc73c\ub85c\uc368 \ubaa9\ud45c & \ub85c\uc9d3\uc744 \ubc1b\uace0, `add_loss()`\ub97c \ud1b5\ud574 \uad50\ucc28 \uc5d4\ud2b8\ub85c\ud53c \uc190\uc2e4\uc744 \ucd94\uc801\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 `add_metric()`\uc744 \ud1b5\ud574 \ubd84\ub958 \uc815\ud655\ub3c4 \ub610\ud55c \ucd94\uc801\ud569\ub2c8\ub2e4.","c088c1da":"\uc0c1\ub300\uc801\uc73c\ub85c \ud070 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c\ub294, \ube48\ubc88\ud55c \uad6c\uac04\uc5d0\uc11c \ubaa8\ub378\uc758 \uccb4\ud06c\ud3ec\uc778\ud2b8\ub97c \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.","fc5b7d4d":"\ucf5c\ubc31\uc740 `fit()`\uc758 \ud638\ucd9c\uc5d0 \ubc30\uc5f4\ub85c\uc368 \ub118\uaca8\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","542af9c0":"\uc774 \uac00\uc774\ub4dc\ub294 \ud559\uc2b5 & \uac80\uc99d\uc744 \uc704\ud55c \ub0b4\uc7ac\ub41c API\ub4e4(`model.fit()`, `model.evaluate()`, `model.predict()` \ub4f1)\uc744 \uc0ac\uc6a9\ud560 \ub54c\uc5d0 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0, \ud3c9\uac00\ud558\uace0, \uc608\uce21(\ucd94\ub860)\ud558\ub294 \uac83\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.","01ea2dd2":"\uc774 \ubaa8\ub378\uc744 \uadf8\ub824\ubd05\uc2dc\ub2e4, \uadf8\ub7ec\uba74 \uc5ec\uae30\uc5d0\uc11c \ubb34\uc5c7\uc744 \ud558\uace0 \uc788\ub294\uc9c0 \uba85\ud655\ud558\uac8c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uadf8\ub9bc\uc5d0\uc11c \ubcf4\uc5ec\uc9c0\ub294 \ubaa8\uc591\uc740 \ubb36\uc74c \ubaa8\uc591\uc774\uc9c0, \ud45c\ubcf8\ub9c8\ub2e4\uc758 \ubaa8\uc591\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694).","6c614bd1":"\ud2b9\ubcc4\ud558\uac8c, [`keras.utils.Sequence`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/Sequence) \ud074\ub798\uc2a4\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2f1\uc744 \uc9c0\uc6d0\ud558\uace0 \uc11e\uc77c \uc218 \uc788\ub294 Python \ub370\uc774\ud130 \uc0dd\uc131\uae30\ub97c \ub9cc\ub4dc\ub294 \uac04\ub2e8\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","b42507dd":"`add_loss()`\ub97c \ud1b5\ud574 \uc190\uc2e4\uc744 \ub118\uae30\ub294 \uacbd\uc6b0, \ucd5c\uc18c\ud654\ud574\uc57c \ud560 \uc190\uc2e4\uc744 \uc774\ubbf8 \ubaa8\ub378\uc774 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc190\uc2e4 \ud568\uc218 \uc5c6\uc774 `compile()`\uc744 \ud638\ucd9c\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uac8c \ub41c\ub2e4\ub294 \uac83\uc5d0 \uc8fc\ubaa9\ud558\uc138\uc694.","ed43ef5a":"\uac80\uc99d\uc774 \uacc4\uc0b0\ub418\ub294 \ubc29\ubc95\uc740 \uc11e\uae30 \uc804\uc5d0 fit \ud638\ucd9c\uc5d0 \uc758\ud574 \ubc1b\uc544\uc9c4 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 x% \ud45c\ubcf8\uc744 \ucc59\uae30\ub294 \uac83\uc785\ub2c8\ub2e4.","58a7eab0":"* `ModelCheckpoint` : \uc8fc\uae30\uc801\uc73c\ub85c \ubaa8\ub378\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n* `EarlyStopping` : \ud559\uc2b5\uc774 \uac80\uc99d \ud3c9\uac00 \uc9c0\ud45c\ub97c \ub354 \uc774\uc0c1 \uac1c\uc120\ud558\uc9c0 \ubabb\ud560 \ub54c \ud559\uc2b5\uc744 \uc911\ub2e8\ud569\ub2c8\ub2e4.\n* `TensorBoard` : [TensorBoard](https:\/\/www.tensorflow.org\/tensorboard)(\ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \"\uc2dc\uac01\ud654\" \uc808 \ucc38\uace0)\uc5d0\uc11c \uc2dc\uac01\ud654\ub420 \uc218 \uc788\ub294 \ubaa8\ub378 \uae30\ub85d\uc744 \uc8fc\uae30\uc801\uc73c\ub85c \uc791\uc131\ud569\ub2c8\ub2e4.\n* `CSVLogger` : \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c \ub370\uc774\ud130\ub97c CSV \ud30c\uc77c\ub85c \uc791\uc131\ud569\ub2c8\ub2e4.\n* \ub4f1","1174d3de":"### \uc9c1\uc811 \ucf5c\ubc31 \uc791\uc131","c932986e":"\ub370\uc774\ud130 \uc138\ud2b8\ub294 \uac01 \uc138\ub300\uc758 \ub05d\uc5d0\uc11c \ucd08\uae30\ud654\ub418\ubbc0\ub85c, \ub2e4\uc74c \uc138\ub300\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","68e22b31":"## \uc9c0\uc6d0\ub418\ub294 \ub2e4\ub978 \uc785\ub825 \ud615\uc2dd\ub4e4","c84ef50a":"\uc544\ub798\uc758 \ubaa8\ub378\uc744 \uace0\ub824\ud574\ubd05\uc2dc\ub2e4(\uc5ec\uae30\uc11c\ub294 Functional API\ub85c \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc, Sequential \ubaa8\ub378\uc774\ub098 \uc0c1\uc18d\ub41c \ubaa8\ub378\ub3c4 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4):","787e1925":"\uc774\ud6c4\uc758 \uc7ac\uc0ac\uc6a9\uc744 \uc704\ud574, \ubaa8\ub378 \uc815\uc758\uc640 \ucef4\ud30c\uc77c \ub2e8\uacc4\ub97c \ud568\uc218\uc5d0 \ub123\uc74d\uc2dc\ub2e4; \uc774 \uac00\uc774\ub4dc \uc548\uc5d0\uc11c \ub2e4\ub978 \uc608\uc81c\ub4e4\uc744 \ud1b5\ud574 \uc774\uac83\ub4e4\uc744 \uba87\ubc88\uc529 \ud638\ucd9c\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.","ab17b3d7":"\uc9c1\ub825\ud654\uc640 \uc800\uc7a5\uc5d0 \ub300\ud55c \uc804\uccb4 \uac00\uc774\ub4dc\ub97c \uc704\ud574\uc11c\ub294, [Model \uc800\uc7a5 \ubc0f \uc9c1\ub82c\ud654 \uac00\uc774\ub4dc](https:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize\/)\ub97c \ubcf4\uc138\uc694.","11b1128d":"\uc77c\ubc18\uc801\uc73c\ub85c, \ud544\uc694\ud55c \uac83\uc740 \ub300\ubd80\ubd84 \uc774\ubbf8 Keras API\uc758 \uc77c\ubd80\uc774\uae30 \ub54c\ubb38\uc5d0 \uc790\uc2e0\ub9cc\uc758 \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c, \ucd5c\uc801\ud654\ub97c \ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 \uc0dd\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4:","a2ef09ea":"\ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, [`TensorBoard` \ucf5c\ubc31\uc5d0 \ub300\ud55c \ubb38\uc11c](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/tensorboard\/)\ub97c \ubcf4\uc138\uc694.","f63bc092":"## tf.data \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ud559\uc2b5 & \ud3c9\uac00","e95b24d5":"\ub370\uc774\ud130\ub97c \ubaa8\ub378\uc758 \ub0b4\uc81c\ub41c \ud559\uc2b5 \ubc18\ubcf5\ubb38\uc73c\ub85c \uc804\ub2ec\ud560 \ub54c\uc5d0\ub294, **NumPy \ubc30\uc5f4**(\ub370\uc774\ud130\uac00 \uc791\uace0 \uba54\ubaa8\ub9ac\uc5d0 \ub9de\ub294 \uacbd\uc6b0)\uc774\ub098 **`tf.data Dataset` \uac1d\uccb4**\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc74c \uba87 \uac1c\uc758 \ubb38\ub2e8\uc5d0\uc11c\ub294, \ucd5c\uc801\ud654, \uc190\uc2e4, \uadf8\ub9ac\uace0 \ud3c9\uac00 \uc9c0\ud45c\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc124\uba85\ud558\uae30 \uc704\ud574, MNIST \ub370\uc774\ud130 \uc138\ud2b8\ub97c NumPy \ubc30\uc5f4\ub85c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.","86a7e55e":"\uae30\ubcf8 \uc124\uc815\uc73c\ub85c\ub294 \ud45c\ubcf8\uc758 \uac00\uc911\uce58\ub294 \ub370\uc774\ud130 \uc138\ud2b8 \uc548\uc5d0\uc11c \uadf8\uac83\uc758 \ube48\ub3c4\uc5d0 \uc758\ud574 \uacb0\uc815\ub429\ub2c8\ub2e4. \ud45c\ubcf8 \ube48\ub3c4\uc5d0 \ub3c5\ub9bd\uc801\uc778 \ub370\uc774\ud130 \uac00\uc911\uce58\ub97c \ubd80\uc5ec\ud558\ub294 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:\n* \ud074\ub798\uc2a4 \uac00\uc911\uce58\n* \ud45c\ubcf8 \uac00\uc911\uce58","5d253d28":"\ub9cc\uc57d \ubaa8\ub378\uc5d0 \ud558\ub098\uc758 \uc190\uc2e4 \ud568\uc218 \ub9cc\uc744 \ub118\uaca8\uc8fc\uc5c8\ub2e4\uba74, \ub3d9\uc77c\ud55c \uc190\uc2e4 \ud568\uc218\uac00 \ubaa8\ub4e0 \ucd9c\ub825\uc5d0 \uc801\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4(\uc5ec\uae30\uc5d0\ub294 \uc5b4\uc6b8\ub9ac\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4).","60550c44":"\uc804\uccb4 \ubaa9\ub85d\uc744 \uc704\ud574\uc11c\ub294 [\ucf5c\ubc31 \ubb38\uc11c](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/)\ub97c \ubcf4\uc138\uc694.","96773a44":"### \ud45c\ubcf8 \uac00\uc911\uce58","2049c47e":"\ubaa8\ub378\uc744 \uc800\uc7a5\ud558\uace0 \ubcf5\uc6d0\ud558\ub294 \ub370\uc5d0 \uace0\uc720\uc758 \ucf5c\ubc31\uc744 \uc791\uc131\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","aa50475a":"### \uc790\ub3d9\uc801\uc73c\ub85c \uac80\uc99d \ubcf4\ub958 \uc138\ud2b8\ub97c \ub5bc\uc5b4 \ub450\uae30","715c14fe":"Keras\ub85c \uac1c\uc778\ud654\ub41c \uc190\uc2e4\uc744 \uc81c\uacf5\ud558\ub294 \uac83\uc740 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uccab\ubc88\uc9f8 \uc608\uc81c\ub294 \uc785\ub825 `y_true`\uc640 `y_pred`\ub97c \ubc1b\ub294 \ud568\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc608\uc81c\ub294 \uc2e4\uc81c \ub370\uc774\ud130\uc640 \uc608\uce21 \uc0ac\uc774\uc758 \uc81c\uacf1 \ud3c9\uade0 \uc624\ucc28\ub97c \uacc4\uc0b0\ud558\ub294 \uc190\uc2e4 \ud568\uc218\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4:","3d5240c4":"\ucd9c\ub825\uce35\uc5d0 \ub300\ud574 \uc774\ub984\uc744 \uc8fc\uc5c8\uc73c\ubbc0\ub85c, \uc0ac\uc804\uc744 \ud1b5\ud574 \ucd9c\ub825 \ub9c8\ub2e4\uc758 \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud2b9\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4:","0f2ae42c":"`Datasets`\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \uc644\uc804\ud55c \uac00\uc774\ub4dc\ub97c \uc6d0\ud55c\ub2e4\uba74, [tf.data \ubb38\uc11c](https:\/\/www.tensorflow.org\/guide\/data)\ub97c \ubcf4\uc138\uc694.","0b6204e4":"`evaluate()`\ub97c \ud1b5\ud574 \ud3c9\uac00 \ub370\uc774\ud130 \uc704\uc5d0\uc11c \ubaa8\ub378\uc744 \ud3c9\uac00\ud569\ub2c8\ub2e4:","f916e365":"\uc138\ubc00\ud55c \ud1b5\uc81c\ub97c \uc704\ud574\uc11c\uac70\ub098, \ubd84\ub958\uae30\ub97c \ub9cc\ub4dc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c\uba74, \"\ud45c\ubcf8 \uac00\uc911\uce58\"\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* NumPy \ub370\uc774\ud130\ub85c\ubd80\ud130 \ud559\uc2b5\ud560 \ub54c: [`Model.fit()`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#fit)\uc5d0 `sample_weight` \uc778\uc790\ub97c \ub118\uaca8\uc90d\ub2c8\ub2e4.\n* [`tf.data`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data)\ub098 \ub2e4\ub978 \uc885\ub958\uc758 \ubc18\ubcf5\uc790\ub85c\ubd80\ud130 \ud559\uc2b5\ud560 \ub54c: `(input_batch, label_batch, sample_weight_batch)` \uc21c\uc11c\uc30d\uc744 \uc0b0\ucd9c\ud569\ub2c8\ub2e4.","61f34678":"2\uac1c \uc774\uc0c1\uc758 \ucd9c\ub825\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74 \uba85\uc2dc\ub41c \uc774\ub984\uacfc \uc0ac\uc804\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.","0e7f35ae":"* (\ub0b4\uc81c\ub41c \uc138\ub300 \ub9c8\ub2e4\uc758 \uac80\uc99d \uc774\uc678\uc5d0) \ud559\uc2b5 \ub3d9\uc548\uc5d0 \ub2e4\ub978 \uc2dc\uc810\ub4e4\uc5d0\uc11c \uac80\uc99d\uc744 \uc218\ud589\n* \uc815\uae30\uc801\uc778 \uad6c\uac04\uc5d0\uc11c\ub098 \ud2b9\uc815 \uc815\ud655\ub3c4 \ud55c\ub3c4\ub97c \ub118\uacbc\uc744 \ub54c \ubaa8\ub378\uc758 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131\n* \ud559\uc2b5\uc774 \uc815\uccb4\ub418\uc5b4 \ubcf4\uc77c \ub54c\uc5d0 \ubaa8\ub378\uc758 \ud559\uc2b5\ub960 \ubcc0\uacbd\n* \ud559\uc2b5\uc774 \uc815\uccb4\ub418\uc5b4 \ubcf4\uc77c \ub54c\uc5d0 \ucd5c\uc0c1\ub2e8 \uce35\uc758 \ubbf8\uc138\uc870\uc815 \uc218\ud589\n* \ud559\uc2b5\uc774 \ub05d\ub098\uac70\ub098 \ud2b9\uc815 \uc131\ub2a5 \ud55c\ub3c4\ub97c \ub118\uacbc\uc744 \ub54c \uc774\uba54\uc77c\uc774\ub098 \uc989\uac01 \uba54\uc138\uc9c0 \uc54c\ub9bc \uc804\uc1a1\n* \ub4f1","926bfde9":"\ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0\uc11c, \uc190\uc2e4 \ud568\uc218\ub97c \ubaa9\ub85d\uc73c\ub85c \ub118\uaca8\uc90c\uc73c\ub85c\uc368, \ub2e4\ub978 \ucd9c\ub825\uc5d0 \ub300\ud574 \ub2e4\ub978 \uc190\uc2e4\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","72e2bbd5":"## \uc785\ub825\uc73c\ub85c [`keras.utils.Sequence`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/Sequence) \uac1d\uccb4 \uc0ac\uc6a9","3de81a81":"\uc774 \ub370\uc774\ud130 \uc138\ud2b8\ub85c\ubd80\ud130 \ud2b9\uc815\ud55c \uac1c\uc218\uc758 \ubb36\uc74c \uc704\uc5d0\uc11c\ub9cc \uac80\uc99d\uc744 \uc2e4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74, \ubaa8\ub378\uc774 \uac80\uc99d\uc744 \uc911\ub2e8\ud558\uace0 \ub2e4\uc74c \uc138\ub300\ub85c \uc774\ub3d9\ud558\uae30 \uc804\uc5d0 \uac80\uc99d \ub370\uc774\ud130 \uc138\ud2b8\ub85c \uba87\uac1c\uc758 \uac80\uc99d \ub2e8\uacc4\ub97c \uc2e4\ud589\ud574\uc57c \ud558\ub294\uc9c0 \ud2b9\uc815\ud558\ub294 `validation_steps` \uc778\uc790\ub97c \ub118\uae38 \uc218 \uc788\uc2b5\ub2c8\ub2e4:","e71b5a1a":"\uc774\uac83\uc744 \ud558\uac8c \ub418\uba74, \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uac01 \uc138\ub300\uc758 \ub05d\uc5d0\uc11c \ucd08\uae30\ud654\uac00 \ub418\uc9c0 \uc54a\uc73c\uba70, \ub300\uc2e0 \ub2e4\uc74c \ubb36\uc74c\uc744 \uadf8\ub9ac\ub294 \uac83\uc744 \uc774\uc5b4\uac11\ub2c8\ub2e4. (\ubb34\ud55c \ubc18\ubcf5\uc758 \ub370\uc774\ud130 \uc138\ud2b8\uac00 \uc544\ub2cc \uc774\uc0c1) \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uacb0\uad6d \ub370\uc774\ud130\ub97c \ub2e4 \uc4f0\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.","f5b84e4a":"## \ubaa8\ub378 \uccb4\ud06c\ud3ec\uc778\ud2b8 \uc0dd\uc131","226f77b4":"\uc5ec\uae30, \uc77c\ubc18\uc801\uc778 \uc885\ub2e8 \uac04 \uc791\uc5c5 \ud750\ub984\uc774 \ubb34\uc5c7\uc73c\ub85c \uad6c\uc131\ub418\ub294\uc9c0\uc785\ub2c8\ub2e4:\n* \ud559\uc2b5\n* \uc6d0\ubcf8 \ud559\uc2b5 \ub370\uc774\ud130\uc5d0\uc11c \uc0dd\uc131\ud55c \ub0a8\uaca8\uc9c4 \uc138\ud2b8 \uc704\uc5d0\uc11c \uac80\uc99d\n* \ud3c9\uac00 \ub370\uc774\uc11c \uc704\uc5d0\uc11c \ud3c9\uac00","ac58bc85":"\ub2e4\uc911 \uc785\ub825 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac83\uc5d0 \ub300\ud574 \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc704\ud574\uc11c\ub294, **\ub2e4\uc911 \uc785\ub825, \ub2e4\uc911 \ucd9c\ub825 \ubaa8\ub378\uc5d0 \ub370\uc774\ud130 \uc804\ub2ec** \uc808\uc744 \ubcf4\uc138\uc694.","4bcd304f":"\uc5ec\uae30 \ub2e4\ub978 \uc120\ud0dd\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4: `validation_split` \uc778\uc790\ub294 \uc790\ub3d9\uc801\uc73c\ub85c \ud559\uc2b5 \ub370\uc774\ud130\uc758 \uc77c\ubd80\ub97c \uac80\uc99d\uc744 \uc704\ud574 \ub0a8\uaca8\ub450\uac8c \ud574\uc90d\ub2c8\ub2e4. \uc774 \uc778\uc790\uac12\uc740 \uac80\uc99d\uc744 \uc704\ud574 \ub0a8\uaca8\ub450\uc5b4\uc9c8 \ub370\uc774\ud130\uc758 \ube44\uc911\uc744 \ub098\ud0c0\ub0b4\uba70, \uadf8\ub798\uc11c \uc774\uac83\uc740 0\uc774\uc0c1 1\uc774\ud558\uc758 \uc22b\uc790\ub85c \uc124\uc815\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, `validation_split=0.2`\ub294 \"\ub370\uc774\ud130\uc758 20%\ub97c \uac80\uc99d\uc744 \uc704\ud574 \uc0ac\uc6a9\"\uc744 \ub73b\ud558\uba70, `validation_split=0.6`\uc740 \"\ub370\uc774\ud130\uc758 60%\ub97c \uac80\uc99d\uc744 \uc704\ud574 \uc0ac\uc6a9\"\uc744 \ub73b\ud569\ub2c8\ub2e4.","a3b60708":"\uc5ec\uae30 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560 \uc9c0 \uc785\ub2c8\ub2e4:","1b1213b4":"`(32, 32, 3)`(`(height, width, channels)` \uc785\ub2c8\ub2e4) \ubaa8\uc591\uc758 \uc774\ubbf8\uc9c0 \uc785\ub825\uacfc `(None, 10)`(`(timesteps, features)` \uc785\ub2c8\ub2e4) \ubaa8\uc591\uc758 \uc2dc\uacc4\uc5f4 \uc785\ub825\uc744 \uac00\uc9c0\ub294 \uc544\ub798\uc758 \ubaa8\ub378\uc744 \uace0\ub824\ud574\ubd05\uc2dc\ub2e4. \ubaa8\ub378\uc740 \uc774 \uc785\ub825\ub4e4\uc758 \uc870\ud569\uc73c\ub85c\ubd80\ud130 \ub450\uac1c\uc758 \ucd9c\ub825\uc744 \uac00\uc9c0\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: (`(1,)` \ubaa8\uc591\uc758) \"\uc810\uc218\"\uc640 (`(5,)` \ubaa8\uc591\uc758) \ub2e4\uc12f \ud074\ub798\uc2a4\uc758 \ud655\ub960 \ubd84\ud3ec. ","623be4d9":"\ub9cc\uc57d pip\uc73c\ub85c TensorFlow\ub97c \uc124\uce58\ud588\ub2e4\uba74, \uba85\ub839\uc904\uc5d0\uc11c TensorBoard\ub97c \uc2e4\ud589\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4:","ad603081":"`__getitem__` \uba54\uc18c\ub4dc\ub294 \uc644\uc804\ud55c \ubb36\uc74c\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc138\ub300 \uc0ac\uc774\uc5d0 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc218\uc815\ud558\uace0 \uc2f6\ub2e4\uba74, `on_epoch_end`\ub97c \uad6c\ud604\ud560 \uac83\uc785\ub2c8\ub2e4.","927645d5":"\ud3c9\uac00 \uc9c0\ud45c:\n* `AUC()`\n* `Precision()`\n* `Recall()`\n* \ub4f1","4f84c12e":"### \ub3d9\uc801 \ud559\uc2b5\ub960 \uc608\uc815\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574 \ucf5c\ubc31 \uc0ac\uc6a9","16376253":"\ubc18\ud658\ub41c \"history\" \uac1d\uccb4\ub294 \ud559\uc2b5\ud558\ub294 \ub3d9\uc548\uc758 \uc190\uc2e4 \uac12\uacfc \ud3c9\uac00 \uc9c0\ud45c \uac12\uc758 \uae30\ub85d\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4:","abc02aa7":"\ub370\uc774\ud130\ub97c \"batch_size\" \ud06c\uae30\uc758 \"\ubb36\uc74c\"\uc73c\ub85c \ub098\ub204\uace0, \ubc18\ubcf5\uc801\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \"\uc138\ub300\" \uac1c\uc218 \ub9cc\ud07c \uc804\uccb4 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub300\ud574 \ubc18\ubcf5\ud558\uba70 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac `fit()`\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.","ac015580":"\uac00\uc7a5 \uac04\ub2e8\ud55c \uacbd\uc6b0\uc5d0\uc11c, \ucf5c\ubc31\uc774 \uc5b4\ub514\uc5d0\uc11c \uae30\ub85d\uc744 \ud558\uace0 \uc2f6\uc740 \uc9c0 \ud2b9\uc815\ud558\uae30\ub9cc \ud558\uba74, \uadf8\ub300\ub85c \uc88b\uc2b5\ub2c8\ub2e4:","fb1a422d":"\uac00\uc911\uce58\uac00 \uc77c\uc774\ub098 \uc601\uc73c\ub85c \uc0ac\uc6a9\ub420 \ub54c\uc5d0\ub294, \ubc30\uc5f4\uc740 \uc190\uc2e4 \ud568\uc218\uc5d0 \ub300\ud55c _\ub9c8\uc2a4\ud06c_ (\uc804\uccb4 \uc190\uc2e4\uc5d0 \ub300\ud55c \ud2b9\uc815 \ud45c\ubcf8\uc758 \uae30\uc5ec\ub97c \uc644\uc804\ud788 \ubb34\uc2dc)\ub85c\uc368 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1da6d94e":"## \ucf5c\ubc31 \uc0ac\uc6a9\ud558\uae30","2703ef4f":"\ud559\uc2b5\ub960 \ubd80\ud328 \uc77c\uc815\uc740 \uc815\uc801(\ud604\uc7ac \uc138\ub300\ub098 \ud604\uc7ac \ubb36\uc74c \ubc88\ud638\uc5d0 \ub300\ud55c \ud568\uc218\ub85c\uc368 \uc0ac\uc804\uc5d0 \uace0\uc815)\uc774\ub098, \ub3d9\uc801(\ubaa8\ub378\uc758 \ud604\uc7ac \ud589\ub3d9, \ud2b9\ubcc4\ud558\uac8c\ub294 \uac80\uc99d \uc190\uc2e4\uc5d0 \ub300\ud558\uc5ec)\uc774 \ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","c297a29a":"### \ucd5c\uc801\ud654\uae30\uc5d0 \uc608\uc815 \uc804\ub2ec","075f8bc3":"NumPy \ubc30\uc5f4, \uc989\uc2dc \uc2e4\ud589 \ud150\uc11c, TensorFlow `Datasets`\ub97c \uc81c\uc678\ud558\uace0\ub3c4, Keras \ubaa8\ub378\uc744 Pandas \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uc0ac\uc6a9\ud558\uac70\ub098, \ub370\uc774\ud130 & \ub77c\ubca8\uc758 \ubb36\uc74c\uc744 \ub0b4\ubcf4\ub0b4\ub294 Python \uc0dd\uc131\uae30\ub85c\ubd80\ud130 \ud559\uc2b5\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4.","6bec4ec7":"\ub9cc\uc57d \ubaa8\ub378\uc774 \uc5ec\ub7ec \ucd9c\ub825\uc744 \uac00\uc9c4\ub2e4\uba74, \uac01 \ucd9c\ub825\uc5d0 \ub300\ud574 \ub2e4\ub978 \uc190\uc2e4\uacfc \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud2b9\uc815\ud560 \uc218 \uc788\uc73c\uba70, \ubaa8\ub378\uc758 \uc804\uccb4 \uc190\uc2e4\uc5d0 \ub300\ud55c \uac01 \ucd9c\ub825\uc758 \uae30\uc5ec\ub7c9\ub97c \uc870\uc808\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **\"\uc5ec\ub7ec \uc785\ub825, \uc5ec\ub7ec \ucd9c\ub825 \ubaa8\ub378\uc5d0 \ub370\uc774\ud130 \uc804\ub2ec\"** \uc808\uc5d0\uc11c \uc774\uac83\uc5d0 \ub300\ud55c \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \ucc3e\uc744 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","37eb49e5":"### \ub9ce\uc740 \ub0b4\uc81c\ub41c \ucf5c\ubc31\uc774 \uc0ac\uc6a9\uac00\ub2a5\ud569\ub2c8\ub2e4","a4d82ec4":"\uba87\uac00\uc9c0 \ub0b4\uc81c\ub41c \uc608\uc815\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: `ExponentialDecay`, `PiecewiseConstantDecay`, `PolynomialDecay`, \uadf8\ub9ac\uace0 `InverseTimeDecay`.","2b101b5c":"[`keras.callbacks.Callback`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/Callback) \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \ud655\uc7a5\ud574 \ub9de\ucda4 \ucf5c\ubc31\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf5c\ubc31\uc740 \ud074\ub798\uc2a4 \uc18d\uc131 `self.model`\uc744 \ud1b5\ud574 \uc5f0\uad00\ub41c \ubaa8\ub378\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","0d46f7fa":"\uc5ec\uae30 \ud074\ub798\uc2a4 #5(MNIST \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \uc22b\uc790 \"5\")\uc758 \uc815\ud655\ud55c \ubd84\ub958\ub97c \uc704\ud574 \ub354 \uc911\uc694\uc131\uc744 \uc900 \ud074\ub798\uc2a4 \uac00\uc911\uce58\ub098 \ud45c\ubcf8 \uac00\uc911\uce58\ub97c \uc0ac\uc6a9\ud558\ub294 NumPy \uc608\uc81c\uc785\ub2c8\ub2e4.","498b0cda":"`loss_weights` \uc778\uc790\ub97c \uc0ac\uc6a9\ud574, \ucd9c\ub825\uc5d0 \ud2b9\uc815\ud55c \uc11c\ub85c \ub2e4\ub978 \uc190\uc2e4\ub4e4\uc5d0 \uc11c\ub85c \ub2e4\ub978 \uac00\uc911\uce58\ub97c \uc8fc\ub294 \uac83(\uc608\ub97c \ub4e4\uc5b4, \uc608\uc81c\uc5d0\uc11c \ud074\ub798\uc2a4 \uc190\uc2e4\uc758 \uc911\uc694\uc131\uc758 2\ubc30\ub97c \ubd80\uc5ec\ud574 \"\uc810\uc218\" \uc190\uc2e4\uc5d0 \ud2b9\uad8c\uc744 \uc8fc\uace0 \uc2f6\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4)\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4:","3d2982c3":"\uc5ec\uae30 \ud559\uc2b5 \ub3d9\uc548 \ubb36\uc74c \ub9c8\ub2e4\uc758 \uc190\uc2e4\uac12\uc758 \ubc30\uc5f4\uc744 \uc800\uc7a5\ud558\ub294 \uac04\ub2e8\ud55c \uc608\uc81c\uc785\ub2c8\ub2e4:","91996e61":"## \ub2e4\uc911 \uc785\ub825, \ub2e4\uc911 \ucd9c\ub825 \ubaa8\ub378\uc5d0 \ub370\uc774\ud130 \ub118\uae30\uae30","478f4c0e":"\uae30\ubcf8\uc801\uc778 \uc124\uc815\uc774 \ub9cc\uc871\uc2a4\ub7fd\ub2e4\uba74, \ub9ce\uc740 \uacbd\uc6b0\uc5d0 \ucd5c\uc801\ud654, \uc190\uc2e4, \ud3c9\uac00 \uc9c0\ud45c\ub294 \uac04\ub2e8\ud558\uac8c \ubb38\uc790\uc5f4 \uc2dd\ubcc4\uc790\ub97c \ud1b5\ud574 \ud2b9\uc815\ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694:","a3d81c0a":"\uc774\uac83\uc740 \uc7ac\ud45c\ubcf8\ucd94\ucd9c \uc5c6\uc774 \ud074\ub798\uc2a4 \uade0\ud615\uc744 \ub9de\ucd94\uac70\ub098, \ud2b9\uc815 \ud074\ub798\uc2a4\uc5d0 \ub354 \uc911\uc694\uc131\uc744 \uc8fc\ub294 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","fe39f5e4":"\ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 \uc790\uc2e0 \ub9cc\uc758 \ud559\uc2b5 & \ud3c9\uac00 \ubc18\ubcf5\ubb38\uc744 \uc801\ub294 \uac83\uc5d0 \uad00\uc2ec\uc774 \uc788\ub2e4\uba74, [\"\ubc14\ub2e5\uc5d0\uc11c\ubd80\ud130 \ud559\uc2b5 \ubc18\ubcf5\ubb38 \uc791\uc131\"](https:\/\/www.tensorflow.org\/guide\/keras\/writing_a_training_loop_from_scratch\/) \uac00\uc774\ub4dc\ub97c \ubcf4\uc138\uc694.","0586c4b1":"\uc5ec\uae30 \ube60\ub978 \uc608\uc81c\uc785\ub2c8\ub2e4:"}}