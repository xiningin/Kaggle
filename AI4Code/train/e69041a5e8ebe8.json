{"cell_type":{"9d82a19b":"code","43f904fe":"code","184253f1":"code","ad19dfa7":"code","56655271":"code","9fb7dd87":"code","4586f346":"code","5915bc11":"code","0e9bbe0a":"code","2f737f3e":"code","c64df0a1":"code","6b85e6ed":"code","ca426f90":"code","780ea02a":"code","008c2510":"code","bed6afaf":"code","fc5bdb17":"code","4bed06f7":"code","3201248f":"code","2474384b":"code","9e1bb5ae":"code","375eeb30":"code","09d42e9c":"code","7d1b8183":"code","396365a4":"code","5b7824ea":"code","c1ec2d48":"code","c1eac24c":"code","463313dd":"code","d49f7260":"code","408d858a":"code","594aabbc":"markdown","a0c806f0":"markdown","00a91f49":"markdown","d47572a5":"markdown","36df2dd4":"markdown","62e06b75":"markdown","4c9c7649":"markdown","5850f015":"markdown","4ea37010":"markdown","8e2b0612":"markdown","e2c750cc":"markdown","446bab4d":"markdown","9b15ce9f":"markdown","4e6c4132":"markdown","3f24d62c":"markdown","c147b410":"markdown","8cdb847d":"markdown","17d1dd64":"markdown","4a39b51c":"markdown","02b02d48":"markdown","069bc38e":"markdown","bd519576":"markdown","7043d2f0":"markdown","9dc455eb":"markdown","e30a6625":"markdown","3b0f50da":"markdown","a4754a2f":"markdown","7cbe962f":"markdown","a133e5e9":"markdown","75a77bdd":"markdown","aef8e203":"markdown"},"source":{"9d82a19b":"## Loading the Libraries\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#!pip3 install ipywidgets\n#!jupyter nbextension enable --py --sys-prefix widgetsnbextension\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\npd.set_option('display.max_columns', 500)\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n%matplotlib inline","43f904fe":"## Loading the Dataset\ntrain_data = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain_target_scored_data = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_non_scored_data = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")","184253f1":"## Creating the widgets for the dataset\nout1 = widgets.Output()\nout2 = widgets.Output()\nout3 = widgets.Output()\nout4 = widgets.Output()\n\nwith out1:\n    display(train_data.head(10))\nwith out2:\n    display(train_target_scored_data.head(10))\nwith out3:\n    display(train_targets_non_scored_data.head(10))\nwith out4:\n    display(test_data.head(10))\n\ntab = widgets.Tab(children = [out1, out2,out3,out4])\ntab.set_title(0, 'Train data')\ntab.set_title(1, 'Train Targets scored data')\ntab.set_title(2, 'Train Targets non-scored data')\ntab.set_title(3, 'Test data')\ndisplay(tab)","ad19dfa7":"## Creating the widgets for the dataset\nsummary1 = widgets.Output()\nsummary2 = widgets.Output()\nwith summary1:\n    print(\"Unique IDs: \",train_data.sig_id.nunique())\n    print(\"Total Rows inthe train Dataset:\",train_data.shape[0])\n    print(\"Total Columns in the Dataset :\",train_data.shape[1])\n    print(\"\\nFrequency of values in 'cp_type' are:\\n\",train_data.cp_type.value_counts())\n    print(\"\\nFrequency of values in 'cp_dose' are:\\n\",train_data.cp_dose.value_counts())\n    print(\"\\nFrequency of values in 'cp_time' are:\\n\",train_data.cp_time.value_counts())\n\n\nwith summary2:\n    print(\"Unique IDs: \",test_data.sig_id.nunique())\n    print(\"Total Rows inthe train Dataset:\",test_data.shape[0])\n    print(\"Total Columns in the Dataset :\",test_data.shape[1])\n    print(\"\\nFrequency of values in 'cp_type' are:\\n\",test_data.cp_type.value_counts())\n    print(\"\\nFrequency of values in 'cp_dose' are:\\n\",test_data.cp_dose.value_counts())\n    print(\"\\nFrequency of values in 'cp_time' are:\\n\",test_data.cp_time.value_counts())\n\ntab = widgets.Tab(children = [summary1, summary2])\ntab.set_title(0, 'Train data')\ntab.set_title(1, 'Test data')\ndisplay(tab)","56655271":"train_data['data'] = 'Train data'\ntest_data['data'] = 'Test data'\nfull_data = pd.concat([train_data,test_data])","9fb7dd87":"cp_type_data = train_data.groupby(['cp_type'])['sig_id'].count().reset_index()\ncp_type_data.columns = ['cp_type','count']\n\ncp_time_data = train_data.groupby(['cp_time'])['sig_id'].count().reset_index()\ncp_time_data.columns = ['cp_time','count']\n\ncp_dose_data = train_data.groupby(['cp_dose'])['sig_id'].count().reset_index()\ncp_dose_data.columns = ['cp_dose','count']\n\nfig = make_subplots(\n    rows=1, cols=3,\n    subplot_titles=(\"Treatment\", \"Treatment time\", \"Treatment dose\"))\n\nfig.add_trace(go.Bar(x = cp_type_data['cp_type'], y = cp_type_data['count'],\n                     text=cp_type_data['count'],\n                     textposition=\"outside\",\n                     name = 'cp_type'),\n                     row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = cp_time_data['cp_time'], y = cp_time_data['cp_time'],\n                     text=cp_time_data['count'],\n                     textposition=\"outside\",\n                     name = 'cp_time'),\n                     row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = cp_dose_data['cp_dose'], y = cp_dose_data['count'],\n                    text = cp_dose_data['count'],\n                    textposition = 'outside',\n                    name = 'cp_dose'),\n                    row = 1, col = 3)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"cp_type(Compound vs Control)\", row=1, col=1)\nfig.update_xaxes(title_text=\"cp_time(in Hrs)\", row=1, col=2)\nfig.update_xaxes(title_text=\"cp_dose(High vs Low)\", row=1, col=3)\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Total Observations in the Dataset\", row=1, col=1)\nfig.layout.template = 'plotly_dark'\nfig.update_layout(title_text = \"Train dataset Features\")\nfig.show()","4586f346":"fig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(\"Gene-0\", \"Gene-1\", \"Gene-2\",\"Gene-3\",\"Gene-55\",\n                   \"Gene-56\", \"Gene-57\", \"Gene-58\",\"Gene-88\",\"Gene-90\"))\n\nfig.add_trace(go.Histogram(x=train_data[\"g-0\"],name = 'g-0'),row = 1, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-1\"],name = 'g-1'),row = 1, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-2\"],name = 'g-2'),row = 2, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-3\"],name = 'g-3'),row = 2, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-55\"],name = 'g-55'),row = 3, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-56\"],name = 'g-56'),row = 3, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-57\"],name = 'g-57'),row = 4, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-58\"],name = 'g-58'),row = 4, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-88\"],name = 'g-88'),row = 5, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"g-90\"],name = 'g-90'),row = 5, col = 2)\nfig.layout.template = 'plotly_dark'\nfig.update_layout(showlegend=False,title_text = \"Randomly selected Gene features distribution\")\nfig.show()","5915bc11":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"gene-55 expression\", \"gene-89 expression\"))\n\n\n\ncp_types = ['trt_cp', 'ctl_vehicle']\n\nfor cp_type in cp_types:\n    fig1.add_trace(go.Violin(x=train_data['cp_type'][train_data['cp_type'] == cp_type],\n                            y=train_data['g-55'][train_data['cp_type'] == cp_type],\n                            name=cp_type,\n                            line_color = 'blue',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_type'][train_data['cp_type'] == cp_type],\n                            y=train_data['g-89'][train_data['cp_type'] == cp_type],\n                            name=cp_type,\n                            line_color = 'orange',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 2)\n\nfig1.update_xaxes(title_text=\"cp_type\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_type\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How gene-55 and gene-89 behaves differently on cp_types\")\nfig1.show()","0e9bbe0a":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"gene-55 expression\", \"gene-89 expression\"))\n\n\n\ncp_duration = [24,48,72]\n\nfor cp_time in cp_duration:\n    fig1.add_trace(go.Violin(x=train_data['cp_time'][train_data['cp_time'] == cp_time],\n                            y=train_data['g-55'][train_data['cp_time'] == cp_time],\n                            name=cp_time,\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_time'][train_data['cp_time'] == cp_time],\n                            y=train_data['g-89'][train_data['cp_time'] == cp_time],\n                            name=cp_time,\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 2)\n\nfig1.update_xaxes(title_text=\"cp_time\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_time\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How gene-55 and gene-89 behaves differently on cp_time\")\nfig1.show()","2f737f3e":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"gene-55 exp.\", \"gene-89 exp\"))\n\n\n\ncp_doses = ['D1', 'D2']\n\nfor cp_dose in cp_doses:\n    fig1.add_trace(go.Violin(x=train_data['cp_dose'][train_data['cp_dose'] == cp_dose],\n                            y=train_data['g-55'][train_data['cp_dose'] == cp_dose],\n                            name=cp_dose,\n                            line_color = 'blue',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_dose'][train_data['cp_dose'] == cp_dose],\n                            y=train_data['g-89'][train_data['cp_dose'] == cp_dose],\n                            name=cp_dose,\n                            line_color = 'orange',\n                            box_visible=True,\n                            meanline_visible=True),\n                           row = 1, col = 2)\n    \nfig1.update_xaxes(title_text=\"cp_dose\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_dose\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How gene-55 and gene-89 behaves differently on cp_types\")\nfig1.update_layout(showlegend=False)\nfig1.show()","c64df0a1":"fig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(\"Cell-0\", \"Cell-1\", \"Cell-2\",\"Cell-3\",\"Cell-55\",\n                   \"Cell-56\", \"Cell-57\", \"Cell-58\",\"Cell-88\",\"Cell-90\"))\n\nfig.add_trace(go.Histogram(x=train_data[\"c-0\"],name = 'c-0'),row = 1, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-1\"],name = 'c-1'),row = 1, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-2\"],name = 'c-2'),row = 2, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-3\"],name = 'c-3'),row = 2, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-55\"],name = 'c-55'),row = 3, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-56\"],name = 'c-56'),row = 3, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-57\"],name = 'c-57'),row = 4, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-58\"],name = 'c-58'),row = 4, col = 2)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-88\"],name = 'c-88'),row = 5, col = 1)\n\nfig.add_trace(go.Histogram(x=train_data[\"c-90\"],name = 'c-90'),row = 5, col = 2)\nfig.layout.template = 'plotly_dark'\nfig.update_layout(showlegend=False,title_text = \"Randomly selected cell-viability distribution\")\nfig.show()","6b85e6ed":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"cell-55 expression\", \"cell-89 expression\"))\n\n\n\ncp_types = ['trt_cp', 'ctl_vehicle']\n\nfor cp_type in cp_types:\n    fig1.add_trace(go.Violin(x=train_data['cp_type'][train_data['cp_type'] == cp_type],\n                            y=train_data['c-55'][train_data['cp_type'] == cp_type],\n                            name=cp_type,\n                            line_color = 'blue',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_type'][train_data['cp_type'] == cp_type],\n                            y=train_data['c-89'][train_data['cp_type'] == cp_type],\n                            name=cp_type,\n                            line_color = 'orange',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 2)\n    \nfig1.update_xaxes(title_text=\"cp_type\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_type\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How cell-55 and cell-89 behaves differently on cp_types\")\nfig1.update_layout(showlegend=False)\nfig1.show()","ca426f90":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"cell-55 expression\", \"cell-89 expression\"))\n\n\n\ncp_duration = [24,48,72]\n\nfor cp_time in cp_duration:\n    fig1.add_trace(go.Violin(x=train_data['cp_time'][train_data['cp_time'] == cp_time],\n                            y=train_data['c-55'][train_data['cp_time'] == cp_time],\n                            name=cp_time,\n                            line_color = 'blue',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_time'][train_data['cp_time'] == cp_time],\n                            y=train_data['c-89'][train_data['cp_time'] == cp_time],\n                            name=cp_time,\n                            line_color = 'orange',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 2)\n\nfig1.update_xaxes(title_text=\"cp_time\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_time\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How cell-55 and cell-89 behaves differently on cp_time\")\nfig1.update_layout(showlegend=False)\nfig1.show()","780ea02a":"fig1 = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"cell-55 expression\", \"cell-89 expression\"))\n\n\n\ncp_doses = ['D1','D2']\n\nfor cp_dose in cp_doses:\n    fig1.add_trace(go.Violin(x=train_data['cp_dose'][train_data['cp_dose'] == cp_dose],\n                            y=train_data['c-55'][train_data['cp_dose'] == cp_dose],\n                            name=cp_dose,\n                            line_color = 'blue',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 1)\n    fig1.add_trace(go.Violin(x=train_data['cp_dose'][train_data['cp_dose'] == cp_dose],\n                            y=train_data['c-89'][train_data['cp_dose'] == cp_dose],\n                            name=cp_dose,\n                            line_color = 'orange',\n                            box_visible=True,\n                            meanline_visible=True),\n                            row = 1, col = 2)\n\nfig1.update_xaxes(title_text=\"cp_dose\", row=1, col=1)\nfig1.update_xaxes(title_text=\"cp_dose\", row=1, col=2)\nfig1.layout.template = 'plotly_dark'\nfig1.update_layout(showlegend=False,title_text = \"How cell-55 and cell-89 behaves differently on cp_dose\")\nfig1.update_layout(showlegend=False)\nfig1.show()","008c2510":"cp_type_test_data = test_data.groupby(['cp_type'])['sig_id'].count().reset_index()\ncp_type_test_data.columns = ['cp_type','count']\n\ncp_time_test_data = test_data.groupby(['cp_time'])['sig_id'].count().reset_index()\ncp_time_test_data.columns = ['cp_time','count']\n\ncp_dose_test_data = test_data.groupby(['cp_dose'])['sig_id'].count().reset_index()\ncp_dose_test_data.columns = ['cp_dose','count']\n\n\nfig = make_subplots(\n    rows=1, cols=3,\n    subplot_titles=(\"Treatment\", \"Treatment time\", \"Treatment dose\"))\n\nfig.add_trace(go.Bar(x = cp_type_test_data['cp_type'], y = cp_type_test_data['count'],\n               text=cp_type_test_data['count'],\n               textposition=\"outside\",\n                name = 'cp_dose'),\n               row = 1, col = 1)\n\nfig.add_trace(go.Bar(x = cp_time_test_data['cp_time'], y = cp_time_test_data['cp_time'],\n              text=cp_time_test_data['count'],\n              textposition=\"outside\",\n               name = \"cp_time\"),\n              row = 1, col = 2)\n\nfig.add_trace(go.Bar(x = cp_dose_test_data['cp_dose'], y = cp_dose_test_data['count'],\n                    text = cp_dose_test_data['count'],\n                    textposition = 'outside',\n                    name = 'cp_dose'),\n              row = 1, col = 3)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"cp_type\", row=1, col=1)\nfig.update_xaxes(title_text=\"cp_time\", row=1, col=2)\nfig.update_xaxes(title_text=\"cp_dose\", row=1, col=3)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Total Observations in the Dataset\", row=1, col=1)\nfig.layout.template = 'plotly_dark'\nfig.update_layout(title_text =\"Test dataset Features\")\n\nfig.show()","bed6afaf":"data = full_data.groupby(['cp_type','cp_time','cp_dose','data'])['sig_id'].count().reset_index()\ndata.columns = ['cp_type','cp_time','cp_dose','data', 'count']\n\n\nfig = px.sunburst(data, path=['cp_type', 'cp_time', 'cp_dose'], values='count',\n                  color_discrete_sequence = px.colors.qualitative.G10,\n                 title ='Train and Test \"cp_type\",\"cp_dose\" and \"cp_dose\" distribution')\nfig.layout.template = 'plotly_dark'\nfig.show()","fc5bdb17":"## Checking the type gene ditribution if a inhibitor gets activated\ngene_data = train_data.set_index(\"sig_id\")\ngene_filter_col = [col for col in gene_data if col.startswith('g-')]\ngene_filtered_data = gene_data[gene_filter_col]\ngene_filtered_data.head()\n\n## Cell viability data \ncell_data = train_data.set_index(\"sig_id\")\ncell_filter_col = [col for col in cell_data if col.startswith(\"c-\")]\ncell_filtered_data = cell_data[cell_filter_col]\ncell_filtered_data.head()","4bed06f7":"dna_inhibitor1 = gene_filtered_data.loc['id_039427e27'].to_frame()\ndna_inhibitor2 = gene_filtered_data.loc['id_049604b47'].to_frame()\n\ngsk_inhibitor1 = gene_filtered_data.loc['id_000644bb2'].to_frame()\ngsk_inhibitor2 = gene_filtered_data.loc['id_001762a82'].to_frame()\n\ndna_inhibitor_cell1 = cell_filtered_data.loc['id_039427e27'].to_frame()\ndna_inhibitorcell2= cell_filtered_data.loc['id_049604b47'].to_frame()\n\ngsk_inhibitor_cell1 = cell_filtered_data.loc['id_000644bb2'].to_frame()\ngsk_inhibitor_cell2 = cell_filtered_data.loc['id_001762a82'].to_frame()\n\n\n\nfig = make_subplots(\n    rows=4, cols=2,\n    subplot_titles=(\"dna inhibitor gene exp.\", \"dna inhibitor gene exp.\", \"gsk inhibitor gene exp.\",\"gsk inhibitor gene exp.\"\n                    ,\"dna inhibitor cell exp.\",\"dna inhibitor cell exp.\",\"gsk inhibitor cell exp.\",\"gsk inhibitor cell exp.\"))\n\nfig.add_trace(go.Histogram(x = dna_inhibitor1[\"id_039427e27\"],name = 'dna inhibitor gene exp.'),row = 1, col = 1)\n\nfig.add_trace(go.Histogram(x = dna_inhibitor2[\"id_049604b47\"],name = 'dna inhibitor gene exp.'),row = 1, col = 2)\n\nfig.add_trace(go.Histogram(x=gsk_inhibitor1[\"id_000644bb2\"],name = 'gsk inhibitor gene exp.'),row = 2, col = 1)\n\nfig.add_trace(go.Histogram(x=gsk_inhibitor2[\"id_001762a82\"],name = 'gsk inhibitor gene exp.'),row = 2, col = 2)\n\n#cell_filtered_data\nfig.add_trace(go.Histogram(x = dna_inhibitor_cell1[\"id_039427e27\"],name = 'dna inhibitor cell exp.'),row = 3, col = 1)\n\nfig.add_trace(go.Histogram(x = dna_inhibitorcell2[\"id_049604b47\"],name = 'dna inhibitor cell exp.'),row = 3, col = 2)\n\nfig.add_trace(go.Histogram(x = gsk_inhibitor_cell1[\"id_000644bb2\"],name = 'gsk inhibitor cell exp.'),row = 4, col = 1)\n\nfig.add_trace(go.Histogram(x = gsk_inhibitor_cell2[\"id_001762a82\"],name = 'gsk inhibitor cell exp.'),row = 4, col = 2)\nfig.layout.template = 'plotly_dark'\nfig.update_layout(showlegend=False,title_text = \"Analysisng Randomly selected DNA Inhibitor and GSK Inhibitor\")\nfig.show()","3201248f":"gene_filtered_data_25_exp = gene_filtered_data[gene_filtered_data.columns[0:25]]\n#gene_filtered_data_20_exp.head()\nf = plt.figure(figsize=(15, 15))\nplt.matshow(gene_filtered_data_25_exp.corr(), fignum=f.number)\nplt.xticks(range(gene_filtered_data_25_exp.shape[1]), gene_filtered_data_25_exp.columns, fontsize=14, rotation=45)\nplt.yticks(range(gene_filtered_data_25_exp.shape[1]), gene_filtered_data_25_exp.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","2474384b":"def get_redundant_pairs(df):\n    '''Get diagonal and lower triangular pairs of correlation matrix'''\n    pairs_to_drop = set()\n    cols = df.columns\n    for i in range(0, df.shape[1]):\n        for j in range(0, i+1):\n            pairs_to_drop.add((cols[i], cols[j]))\n    return pairs_to_drop\n\ndef get_top_abs_correlations(df, n=5):\n    au_corr = df.corr().abs().unstack()\n    labels_to_drop = get_redundant_pairs(df)\n    au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)\n    return au_corr[0:n]\n\n#print(\"Top Absolute Correlations\")\nhigh_correlated_gene_exp = get_top_abs_correlations(gene_filtered_data, 10).to_frame()","9e1bb5ae":"high_correlated_gene_exp.reset_index(inplace=True) \nhigh_correlated_gene_exp = high_correlated_gene_exp.rename(columns={'level_0': 'Correlated_col1', 'level_1': 'Correlated_col2',0:'Correlation_value'})\nhigh_correlated_gene_exp.head(10).style.set_properties(**{'background-color': 'black',                                                   \n                                    'color': 'lawngreen',                       \n                                    'border-color': 'white'})","375eeb30":"fig = px.scatter(train_data, x = \"g-37\", y = \"g-50\",color = 'cp_type')\nfig.update_layout(title ='Correlation of g-37 and g-50 with varying CP Type')\nfig.layout.template = 'plotly_dark'\nfig.show()","09d42e9c":"fig = px.scatter(train_data, x = \"g-37\", y = \"g-50\",color = 'cp_time')\nfig.update_layout(title ='Correlation of g-37 and g-50 with varying CP Time')\nfig.layout.template = 'plotly_dark'\nfig.show()","7d1b8183":"fig = px.scatter(train_data, x = \"g-37\", y = \"g-50\",color = 'cp_dose')\nfig.update_layout(title ='Correlation of g-37 and g-50 with varying CP Dose')\nfig.layout.template = 'plotly_dark'\nfig.show()","396365a4":"cell_filtered_data_25_exp = cell_filtered_data[cell_filtered_data.columns[0:25]]\n#gene_filtered_data_20_exp.head()\nf = plt.figure(figsize=(15, 15))\nplt.matshow(cell_filtered_data_25_exp.corr(), fignum=f.number)\nplt.xticks(range(cell_filtered_data_25_exp.shape[1]), cell_filtered_data_25_exp.columns, fontsize=14, rotation=45)\nplt.yticks(range(cell_filtered_data_25_exp.shape[1]), cell_filtered_data_25_exp.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\n#plt.title('Correlation Matrix', fontsize=16)","5b7824ea":"high_correlated_cell_exp = get_top_abs_correlations(cell_filtered_data, 10).to_frame()\nhigh_correlated_cell_exp.reset_index(inplace=True) \nhigh_correlated_cell_exp = high_correlated_cell_exp.rename(columns={'level_0': 'Correlated_col1', 'level_1': 'Correlated_col2',0:'Correlation_value'})\nhigh_correlated_cell_exp.head(10).style.set_properties(**{'background-color': 'black',                                                   \n                                    'color': 'lawngreen',                       \n                                    'border-color': 'white'})","c1ec2d48":"fig = px.scatter(train_data, x = \"c-42\", y = \"c-52\",color = 'cp_type')\nfig.update_layout(title ='Correlation of c-42 and c-52 with varying CP Type')\nfig.layout.template = 'plotly_dark'\nfig.show()","c1eac24c":"fig = px.scatter(train_data, x = \"c-42\", y = \"c-52\",color = 'cp_time')\nfig.update_layout(title ='Correlation of c-42 and c-52 with varying CP Time')\nfig.layout.template = 'plotly_dark'\nfig.show()","463313dd":"fig = px.scatter(train_data, x = \"c-42\", y = \"c-52\",color = 'cp_dose')\nfig.update_layout(title ='Correlation of c-42 and c-52 with varying CP Dose')\nfig.layout.template = 'plotly_dark'\nfig.show()","d49f7260":"train_target_scored_data = train_target_scored_data.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending = False).reset_index()\ntrain_target_scored_data.columns = ['MoA annotations', 'total_counts']\ntrain_target_scored_data = train_target_scored_data.head(20)\nfig = px.bar(train_target_scored_data.sort_values('total_counts',ascending = False)\n            .sort_values('total_counts', ascending = True),\n            x = \"total_counts\",y = \"MoA annotations\",\n            color_discrete_sequence = px.colors.qualitative.Alphabet,\n            title = \"Top 20 MoA annotations\",\n            orientation = 'h')\nfig.layout.template = 'plotly_dark'\nfig.update_layout(title ='Top MoA Annotations',\n                   yaxis_title ='Mechanism of Action Classes',\n                   xaxis_title ='Counts')\nfig.show()","408d858a":"train_non_targets = train_targets_non_scored_data.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending = False).reset_index()\ntrain_non_targets.columns = ['MoA annotations', 'total_counts']\ntrain_non_targets = train_non_targets.head(20)\nfig = px.bar(train_non_targets.sort_values('total_counts',ascending = False)\n            .sort_values('total_counts', ascending = True),\n            x = \"total_counts\",y = \"MoA annotations\",\n            color_discrete_sequence = px.colors.qualitative.Dark2,\n            title = \"Top 20 MoA annotations\",\n            orientation = 'h')\nfig.layout.template = 'plotly_dark'\nfig.update_layout(title ='Top MoA Annotations',\n                   yaxis_title ='Mechanism of Action Classes',\n                   xaxis_title ='Counts')\nfig.show()","594aabbc":"<h3 align = 'center'> Highly Correlated Genes pair <\/h3>","a0c806f0":"<h2 align = 'center' style= 'background :Yellow'> 1. About the Competiton:<\/h2>\n    \n**The <a href=\"https:\/\/clue.io\">Connectivity Map<\/a>., a project within the Broad Institute of MIT and Harvard, together with the <a href=\"https:\/\/lish.harvard.edu\"><b>Laboratory for Innovation Science at Harvard (LISH)<\/b><\/a>, presents this challenge with the goal of advancing drug development through improvements to MoA prediction algorithms.**\n\n**In this competition, you will have access to a unique dataset that combines gene expression and cell viability data. The data is based on a new technology that measures simultaneously (within the same samples) human cells\u2019 responses to drugs in a pool of 100 different cell types (thus solving the problem of identifying ex-ante, \nwhich cell types are better suited for a given drug). In addition, you will have access to MoA annotations for more than 5,000 drugs in this dataset.**\n\n![moa_pic.jpg](attachment:moa_pic.jpg)\n\n**As is customary, the dataset has been split into testing and training subsets. \nHence, your task is to use the training dataset to develop an algorithm that automatically labels each case in the test set as one or more MoA classes.**\n\n**Note: - Since drugs can have multiple MoA annotations, the task is formally a multi-label classification problem.**\n","00a91f49":"<font color='blue'><h1 align = 'center' style= 'background :Yellow'>Mechanism of Action EDA<\/h1><\/font>","d47572a5":"<h3 align = 'center'>  Analysing the c-42 and c-52 correlation with other factor <\/h3>","36df2dd4":"**About the MoA Dataset**\n* **train_features.csv**- Features for the training set. Features g- signify gene expression data, and c- signify cell viability data. cp_type indicates samples treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle); control perturbations have no MoAs; cp_time and cp_dose indicate treatment duration (24, 48, 72 hours) and dose (high or low).\n\n* **train_targets_scored.csv** - The binary MoA targets that are scored.\n\n* **train_targets_nonscored.csv** - Additional (optional) binary MoA responses for the training data. These are not predicted nor scored.\n\n* **test_features.csv** - Features for the test data. You must predict the probability of each scored MoA for each row in the test data.","62e06b75":"<h3 align = 'center' style = 'background:Yellow'>Randomly selected Gene expression features in Train Dataset <\/h3>","4c9c7649":"<h3 align = 'center'>  Top 20 MoA Annotations <\/h3>","5850f015":"<h3 align = 'center' style = 'background:Yellow'> Randomly selected Cell expression features in Train Dataset <\/h3>","4ea37010":"<h2 align = 'center' style = 'background:Yellow'> 3. Data-set Overview  <\/h2>","8e2b0612":"<h2 align = 'center' style = 'background:Yellow'> 6. Analysing the Train Target scored data <\/h2>","e2c750cc":"<font color='blue'>","446bab4d":"<font color = \"red\"><h3> If you find this notebook useful, Please upvote as it will act as a motivation for me for my next kernels.<\/h3><\/font>","9b15ce9f":"<h3 align = 'center'><b> Randomly Analysing C-55 and C-98 in Train Dataset Features<\/b> <\/h3>","4e6c4132":"##### [1. Spratto, G.R.; Woods, A.L. (2010). Delmar Nurse's Drug Handbook. Cengage Learning. ISBN 978-1-4390-5616-5](#1)\n##### [2. Grant, R.L.; Combs, A.B.; Acosta, D. (2010) \"Experimental Models for the Investigation of Toxicological Mechanisms\". In McQueen, C.A. Comprehensive Toxicology (2nd ed.). Oxford: Elsevier. p. 204. ISBN 978-0-08-046884-6](#2)\n#### [3. https:\/\/en.wikipedia.org\/wiki\/Mechanism_of_action#cite_note-3](#3)\n#### [4. https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda\/report](#4)\n#### [5. https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda](#5)\n","3f24d62c":"<h3 align = 'center' style = 'background:Yellow'> Checking the correlations between the gene expression <\/h3>","c147b410":"<h3 align = 'center' style = 'background:Yellow'> Test Data Analysis <\/h3>","8cdb847d":"<h2 align = 'center' style = 'background:Yellow'> 9. References <\/h2>","17d1dd64":"<h3 align = 'center'><b>    Analysing the Train Dataset Features  <\/b><\/h2>","4a39b51c":"<h2 align = 'center' style = 'background:Yellow'> 2. What is Mechanism of Action <\/h2>\n\n**In pharmacology, the term mechanism of action (MOA) refers to the specific biochemical interaction through which a drug substance produces its pharmacological effect[2].A mechanism of action usually includes mention of the specific molecular targets to which the drug binds, such as an enzyme or receptor[3].Receptor sites have specific affinities for drugs based on the chemical structure of the drug, as well as the specific action that occurs there.**\n\n**Drugs bind to receptors that are located on the surface of cells or within the cytoplasm (a jelly-like substance inside a cell). After the receptors bind to a cell, the drug will take on one of two roles: agonist or antagonist.**\n\n**Drugs that do not bind to receptors produce their corresponding therapeutic effect by simply interacting with chemical or physical properties in the body. Common examples of drugs that work in this way are antacids and laxatives.[2]**\n\n![Mechanism_of_action_for_beta_blockers.png](attachment:Mechanism_of_action_for_beta_blockers.png)\n                                            Image Source: Wikipedia\n\n<h3> How mechanism of action is determined <\/h3>\n\n1. Computation inference methods\n2. Microscopy-based methods\n3. Direct biochemical methods\n4. Omics based methods\n\n**Our major part comes under 1st method where we can help in detreming the process through <b>Computation inference methods<\/b> from this Competition.**","02b02d48":"<h2 align = 'center' style = 'background:Yellow'> 4. Undertanding the Correlation from the data <\/h2>","069bc38e":"<font color='blue'><h2 align = 'center' style = 'background:LightGray'> Quick Navigation <\/h2><\/font>\n#### [1. About the Competition](#2)\n#### [2. What is MoA(Mechanism of Action)](#3)\n#### [3. Dataset Overview](#4)\n#### [4. Univariate and Multivariate Feature Visulaizations - To Understand the Data Better](#5)\n#### [5. Understanding the Correlation](#5)\n#### [6. Exploring \"Scored Targets\" Data](#6)\n#### [7. Exploring \"Non-Scored Targets\" Data](#7)\n#### [8. References](#8)","bd519576":"<h2 align = 'center' style = 'background:Yellow'> 8. Analyzing the Non-Scored Data <\/h2>","7043d2f0":"<h3 align = 'center'><b> Randomly Analysing G-55 and G-98 in Train Dataset Features <\/b><\/h3>","9dc455eb":"<h3 align = 'center'>  Highly Correlated Cell viability pair <\/h3>","e30a6625":"<h3 align = 'center' style = 'background:Yellow'> Data Summary <\/h3>","3b0f50da":"<h3>What is Gene Expression<\/h3>\n\nGene expression is the process by which information from a gene is used in the synthesis of a functional gene product. These products are often proteins, but in non-protein-coding genes such as transfer RNA (tRNA) or small nuclear RNA (snRNA) genes, the product is a functional RNA.\n\nRegulation of gene expression gives control over the timing, location, and amount of a given gene product (protein or ncRNA) present in a cell and can have a profound effect on the cellular structure and function.\n\n![gene%20expression%20by%20steroid%20hormone%20receptor.png](attachment:gene%20expression%20by%20steroid%20hormone%20receptor.png)\n\n \nRegulation of gene expression, or gene regulation,[1] includes a wide range of mechanisms that are used by cells to increase or decrease the production of specific gene products (protein or RNA). Sophisticated programs of gene expression are widely observed in biology, for example to trigger developmental pathways, respond to environmental stimuli, or adapt to new food sources. Virtually any step of gene expression can be modulated, from transcriptional initiation, to RNA processing, and to the post-translational modification of a protein. Often, one gene regulator controls another, and so on, in a gene regulatory network.\n\n","a4754a2f":"<h2 align = 'center' style = 'background:Yellow'> 4. Univariate and Multivariate Visulizations <\/h2>","7cbe962f":"<h3 align = 'center'>   Checking sample id wise is there any similarity between same inhibitor<\/h3>","a133e5e9":"<h3 align = 'center'> ---------- Analyzing the Train and Test data distribution from the Sunburst chart ------ <\/h3>","75a77bdd":"<h3 align = 'center' style = 'background:Yellow'>  Loading the Datasets  <\/h3>","aef8e203":"<h3 align = 'center' style = 'background:Yellow'> Correlation between cell expression <\/h3>"}}