{"cell_type":{"a8b4658e":"code","fa60929e":"code","dc96afb9":"code","345a69d8":"code","632fb32e":"code","edd46c1d":"code","f1f35bbd":"code","f559e2b4":"code","1c9a6a1a":"code","5e33cda8":"code","a62ab5fc":"code","e31c63a2":"code","35f9db30":"code","7c9848a6":"code","789d668f":"code","d049c9a7":"code","d7dc9175":"code","01c64127":"code","ac07ddc5":"markdown","acd386e1":"markdown","60cc958d":"markdown","39cf8b94":"markdown","7e7fb7e8":"markdown","a708ab40":"markdown","b757993f":"markdown","7250722b":"markdown","03b72a2d":"markdown","4953550b":"markdown","e0c10172":"markdown"},"source":{"a8b4658e":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport shap\nimport warnings\nwarnings.filterwarnings('ignore')\nimport lightgbm as lgb \nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import log_loss     \nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, roc_curve","fa60929e":"PATH_TRAIN = ('\/kaggle\/input\/1056lab-credit-risk-prediction\/train.csv')\nPATH_TEST = ('\/kaggle\/input\/1056lab-credit-risk-prediction\/test.csv')\nSUB_PATH = ('\/kaggle\/input\/1056lab-credit-risk-prediction\/sampleSubmission.csv')","dc96afb9":"train_df = pd.read_csv(PATH_TRAIN)\ntest_df = pd.read_csv(PATH_TEST)","345a69d8":"plt.figure(figsize=(10,5))\nsns.countplot(train_df['risk']).set_title('Count of risk');","632fb32e":"train_df['risk'].value_counts()","edd46c1d":"train_df.info()","f1f35bbd":"train_df = pd.read_csv('..\/input\/new-make-cr\/new_train.csv')","f559e2b4":"test_df = pd.read_csv('..\/input\/new-make-csv\/new_test.csv')","1c9a6a1a":"\"\"\"target = {\n        \"Current\":0,\n        \"Fully Paid\":0,\n        \"Charged Off\":1,\n        \"Late (31-120 days)\":0,\n        \"Issued\":0,\n        \"In Grace Period\":0,\n        \"Late (16-30 days)\":0,\n        \"Does not meet the credit policy. Status:Fully Paid\":1,\n        \"Default\":1,\n        \"Does not meet the credit policy. Status:Charged Off\":1,\n        }\n\ntrain_df[\"loan_status\"] = train_df[\"loan_status\"].replace(target).astype(float)\"\"\"","5e33cda8":"train_df = train_df.drop(columns=[\"id\",\"loan_status\",\"emp_title\"],axis=1)\ntest_df = test_df.drop(columns=[\"id\",\"emp_title\"],axis=1)","a62ab5fc":"X = train_df.drop(['risk'], axis=1).values\ny  = train_df['risk']\nX = pd.DataFrame(X)","e31c63a2":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.20, random_state=42)","35f9db30":"models = []\n\nrow_no_list = list(range(len(y_train)))\n\nK_fold = StratifiedKFold(n_splits=5, shuffle=True,  random_state=42)\n\nfor train_cv_no, eval_cv_no in K_fold.split(row_no_list, y_train):\n    X_train_cv = X_train.iloc[train_cv_no, :]\n    y_train_cv = pd.Series(y_train).iloc[train_cv_no]\n    X_eval_cv = X_train.iloc[eval_cv_no, :]\n    y_eval_cv = pd.Series(y_train).iloc[eval_cv_no]\n    \n    lgb_train = lgb.Dataset(X_train_cv, y_train_cv,\n                            free_raw_data=False)\n    lgb_eval = lgb.Dataset(X_eval_cv, y_eval_cv, reference=lgb_train,\n                           free_raw_data=False)\n    \n    # \u30d1\u30e9\u30e1\u30fc\u30bf\n    params = {'task': 'train',                \n              'boosting_type': 'gbdt',       \n              'objective': 'binary',     \n              'metric': 'auc',\n              'learning_rate': 0.05,\n              'num_leaves': 16,\n              'min_data_in_leaf': 1,\n              'num_iteration': 500,\n              'verbose': 0\n             }\n    \n    # \u5b66\u7fd2\n    evaluation_results = {}                                     \n    model = lgb.train(params,                                  \n                      lgb_train,                               \n                      num_boost_round=1000,                  \n                      valid_names=['train', 'valid'],           \n                      valid_sets=[lgb_train, lgb_eval],         \n                      evals_result=evaluation_results,         \n                      early_stopping_rounds=20,                 \n                      verbose_eval=-1)                        \n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3059\u308b\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n    \n    # \u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    models.append(model) ","7c9848a6":"plt.plot(evaluation_results['train']['auc'], label='train')\nplt.plot(evaluation_results['valid']['auc'], label='valid')\nplt.ylabel('accuracy')\nplt.xlabel('Boosting round')\nplt.title('Training performance')\nplt.legend()\nplt.show()","789d668f":"pred = model.predict(test_df, num_iteration=model.best_iteration) ","d049c9a7":"sub_df = pd.read_csv(SUB_PATH)","d7dc9175":"sub_df['risk'] = pred","01c64127":"sub_df.to_csv('submit.csv', index=False)","ac07ddc5":"object\u578b\u306e\u30ab\u30e9\u30e0\u3084\u6b20\u640d\u5024\u3092\u542b\u3080\u30ab\u30e9\u30e0\u304c\u591a\u3044\u305f\u3081\u524d\u51e6\u7406\u304c\u5927\u5909\u305d\u3046\u3002  \n\u3067\u3082\u5404\u30ab\u30e9\u30e0\u306e\u3044\u307f\u3092\u307f\u308b\u3068\u305d\u3053\u307e\u3067\u5927\u5909\u306a\u51e6\u7406\u3067\u306f\u306a\u3055\u305d\u3046\u3002","acd386e1":"\u4e0d\u5747\u8861\u30c7\u30fc\u30bf\u3063\u307d\u3044\n\u5bfe\u7b56\u65b9\u6cd5\u3068\u3057\u3066\u306fUndersampling\u3084Oversampling\u306a\u3069\u304c\u3042\u308b","60cc958d":"# \u4e88\u6e2c","39cf8b94":"# Read a processed CSV file.","7e7fb7e8":"# LightGBM\u3092\u4f7f\u3063\u3066\u5b66\u7fd2","a708ab40":"\u76ee\u7684\u5909\u6570\u30920\u30681\u306b\u5909\u63db\u3057\u3066\u307f\u308b","b757993f":"5fold\u306e\u5b66\u7fd2\u7d50\u679c  \nvalidation_score\u7d50\u69cb\u826f\u3055\u305d\u3046\uff1f","7250722b":"## target","03b72a2d":"# SimpleEDA","4953550b":"## id,emp_title\u3068trainset\u306b\u3057\u304b\u542b\u307e\u308c\u3066\u3044\u306a\u3044loan_status\u3092\u6d88\u3057\u3066\u307f\u308b","e0c10172":"# Preprocessing\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306a\u51e6\u7406\u306e\u307f\u884c\u3044\u307e\u3059"}}