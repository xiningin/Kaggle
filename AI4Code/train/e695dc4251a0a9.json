{"cell_type":{"a9f950a2":"code","f2532b65":"code","1f987a1c":"code","a1c642bb":"code","009d9f71":"code","7b6c7822":"code","f8fe63e9":"code","7fc8ed5e":"code","ee183ee5":"code","57d5fb36":"code","433569b4":"code","4b40782a":"code","028eea0e":"code","dd189b84":"code","d3cf05d6":"code","1ca0e35c":"code","2e57442c":"code","4648b1de":"code","23771099":"code","16f6aeb4":"code","39062128":"code","52a4a944":"code","e20236e4":"code","4eddc335":"code","f85296bf":"code","70a1e5d9":"code","aeba3bf3":"markdown","d62e3144":"markdown","fbddfda1":"markdown","93e3abea":"markdown","3b2fa25b":"markdown","2e1726a3":"markdown","45166940":"markdown","4e411fc9":"markdown","6797d65c":"markdown","ffc27df8":"markdown"},"source":{"a9f950a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f2532b65":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nfrom torch import nn","1f987a1c":"data = pd.read_csv('\/kaggle\/input\/380000-lyrics-from-metrolyrics\/lyrics.csv')\n#10 first rows\ndata[:10]","a1c642bb":"data.describe()","009d9f71":"#lyrics containing 'love' keyword\n#na=False to avoid errors while copping\ndata= data[data['song'].str.lower().str.contains('love',na=False)].copy()\ndata[:10]","7b6c7822":"#no ponctuation\ndata['lyrics'] = data['lyrics'].replace(to_replace=[\",\", \".\"],value=[\"\", \"\"])","f8fe63e9":"#Drop NaN values\ndata=data.dropna(subset=['lyrics'])\n\n#10 random rows\ndata.sample(n=10)","7fc8ed5e":"data.describe()","ee183ee5":"#lyrics to text\n#lyrics=''\nlyrics = ' '.join(data.lyrics)\n#lyrics=data['lyrics']\nlen(lyrics)","57d5fb36":"print('lyrics has ' + str(len(lyrics)) + ' caracter')","433569b4":"# encode the text and map each character to an integer and vice versa\n\n# we create two dictionaries:\n# 1. int2char, which maps integers to characters\n# 2. char2int, which maps characters to unique integers\nchars = tuple(set(lyrics))\nint2char = dict(enumerate(chars))\nchar2int = {ch: ii for ii, ch in int2char.items()}\n\n# encode the text\nencoded = np.array([char2int[ch] for ch in lyrics])","4b40782a":"encoded[:100]","028eea0e":"def one_hot_encode(arr, n_labels):\n    \n    # Initialize the encoded array\n    one_hot = np.zeros((arr.size, n_labels), dtype=np.float32)\n    \n    # Fill the appropriate elements with ones\n    one_hot[np.arange(one_hot.shape[0]), arr.flatten()] = 1.\n    \n    # Finally reshape it to get back to the original array\n    one_hot = one_hot.reshape((*arr.shape, n_labels))\n    \n    return one_hot","dd189b84":"# check that the function works as expected\ntest_seq = np.array([[3, 5, 1]])\none_hot = one_hot_encode(test_seq, 8)\n\nprint(one_hot)","d3cf05d6":"def get_batches(arr, batch_size, seq_length):\n    '''Create a generator that returns batches of size\n       batch_size x seq_length from arr.\n       \n       Arguments\n       ---------\n       arr: Array you want to make batches from\n       batch_size: Batch size, the number of sequences per batch\n       seq_length: Number of encoded chars in a sequence\n    '''\n    \n    batch_size_total = batch_size * seq_length\n    # total number of batches we can make\n    n_batches = len(arr)\/\/batch_size_total\n    \n    # Keep only enough characters to make full batches\n    arr = arr[:n_batches * batch_size_total]\n    # Reshape into batch_size rows\n    arr = arr.reshape((batch_size, -1))\n    \n    # iterate through the array, one sequence at a time\n    for n in range(0, arr.shape[1], seq_length):\n        # The features\n        x = arr[:, n:n+seq_length]\n        # The targets, shifted by one\n        y = np.zeros_like(x)\n        try:\n            y[:, :-1], y[:, -1] = x[:, 1:], arr[:, n+seq_length]\n        except IndexError:\n            y[:, :-1], y[:, -1] = x[:, 1:], arr[:, 0]\n        yield x, y","1ca0e35c":"batches = get_batches(encoded, 8, 50)\nx, y = next(batches)","2e57442c":"# printing out the first 10 items in a sequence\nprint('x\\n', x[:10, :10])\nprint('\\ny\\n', y[:10, :10])","4648b1de":"# check if GPU is available\ntrain_on_gpu = torch.cuda.is_available()\nif(train_on_gpu):\n    print('Training on GPU!')\nelse: \n    print('No GPU available, training on CPU; consider making n_epochs very small.')","23771099":"class CharRNN(nn.Module):\n    \n    def __init__(self, tokens, n_hidden=256, n_layers=2,\n                               drop_prob=0.5, lr=0.001):\n        super().__init__()\n        self.drop_prob = drop_prob\n        self.n_layers = n_layers\n        self.n_hidden = n_hidden\n        self.lr = lr\n        \n        # creating character dictionaries\n        self.chars = tokens\n        self.int2char = dict(enumerate(self.chars))\n        self.char2int = {ch: ii for ii, ch in self.int2char.items()}\n        \n        ## TODO: define the LSTM\n        self.lstm = nn.LSTM(len(self.chars), n_hidden, n_layers, \n                            dropout=drop_prob, batch_first=True)\n        \n        ## TODO: define a dropout layer\n        self.dropout = nn.Dropout(drop_prob)\n        \n        ## TODO: define the final, fully-connected output layer\n        self.fc = nn.Linear(n_hidden, len(self.chars))\n      \n    \n    def forward(self, x, hidden):\n        ''' Forward pass through the network. \n            These inputs are x, and the hidden\/cell state `hidden`. '''\n                \n        ## TODO: Get the outputs and the new hidden state from the lstm\n        r_output, hidden = self.lstm(x, hidden)\n        \n        ## TODO: pass through a dropout layer\n        out = self.dropout(r_output)\n        \n        # Stack up LSTM outputs using view\n        # you may need to use contiguous to reshape the output\n        out = out.contiguous().view(-1, self.n_hidden)\n        \n        ## TODO: put x through the fully-connected layer\n        out = self.fc(out)\n        \n        # return the final output and the hidden state\n        return out, hidden\n    \n    \n    def init_hidden(self, batch_size):\n        ''' Initializes hidden state '''\n        # Create two new tensors with sizes n_layers x batch_size x n_hidden,\n        # initialized to zero, for hidden state and cell state of LSTM\n        weight = next(self.parameters()).data\n        \n        if (train_on_gpu):\n            hidden = (weight.new(self.n_layers, batch_size, self.n_hidden).zero_().cuda(),\n                  weight.new(self.n_layers, batch_size, self.n_hidden).zero_().cuda())\n        else:\n            hidden = (weight.new(self.n_layers, batch_size, self.n_hidden).zero_(),\n                      weight.new(self.n_layers, batch_size, self.n_hidden).zero_())\n        \n        return hidden\n        ","16f6aeb4":"def train(net, data, epochs=10, batch_size=10, seq_length=50, lr=0.001, clip=5, val_frac=0.1, print_every=10):\n    ''' Training a network \n    \n        Arguments\n        ---------\n        \n        net: CharRNN network\n        data: text data to train the network\n        epochs: Number of epochs to train\n        batch_size: Number of mini-sequences per mini-batch, aka batch size\n        seq_length: Number of character steps per mini-batch\n        lr: learning rate\n        clip: gradient clipping\n        val_frac: Fraction of data to hold out for validation\n        print_every: Number of steps for printing training and validation loss\n    \n    '''\n    net.train()\n    \n    opt = torch.optim.Adam(net.parameters(), lr=lr)\n    criterion = nn.CrossEntropyLoss()\n    \n    # create training and validation data\n    val_idx = int(len(data)*(1-val_frac))\n    data, val_data = data[:val_idx], data[val_idx:]\n    \n    if(train_on_gpu):\n        net.cuda()\n    \n    counter = 0\n    n_chars = len(net.chars)\n    for e in range(epochs):\n        # initialize hidden state\n        h = net.init_hidden(batch_size)\n        \n        for x, y in get_batches(data, batch_size, seq_length):\n            counter += 1\n            \n            # One-hot encode our data and make them Torch tensors\n            x = one_hot_encode(x, n_chars)\n            inputs, targets = torch.from_numpy(x), torch.from_numpy(y)\n            \n            if(train_on_gpu):\n                inputs, targets = inputs.cuda(), targets.cuda()\n\n            # Creating new variables for the hidden state, otherwise\n            # we'd backprop through the entire training history\n            h = tuple([each.data for each in h])\n\n            # zero accumulated gradients\n            net.zero_grad()\n            \n            # get the output from the model\n            output, h = net(inputs, h)\n            \n            # calculate the loss and perform backprop\n            loss = criterion(output, targets.view(batch_size*seq_length).long())\n            loss.backward()\n            # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs \/ LSTMs.\n            nn.utils.clip_grad_norm_(net.parameters(), clip)\n            opt.step()\n            \n            # loss stats\n            if counter % print_every == 0:\n                # Get validation loss\n                val_h = net.init_hidden(batch_size)\n                val_losses = []\n                net.eval()\n                for x, y in get_batches(val_data, batch_size, seq_length):\n                    # One-hot encode our data and make them Torch tensors\n                    x = one_hot_encode(x, n_chars)\n                    x, y = torch.from_numpy(x), torch.from_numpy(y)\n                    \n                    # Creating new variables for the hidden state, otherwise\n                    # we'd backprop through the entire training history\n                    val_h = tuple([each.data for each in val_h])\n                    \n                    inputs, targets = x, y\n                    if(train_on_gpu):\n                        inputs, targets = inputs.cuda(), targets.cuda()\n\n                    output, val_h = net(inputs, val_h)\n                    val_loss = criterion(output, targets.view(batch_size*seq_length).long())\n                \n                    val_losses.append(val_loss.item())\n                \n                net.train() # reset to train mode after iterationg through validation data\n                \n                print(\"Epoch: {}\/{}...\".format(e+1, epochs),\n                      \"Step: {}...\".format(counter),\n                      \"Loss: {:.4f}...\".format(loss.item()),\n                      \"Val Loss: {:.4f}\".format(np.mean(val_losses)))","39062128":"# define and print the net\nn_hidden=512\nn_layers=2\n\nnet = CharRNN(chars, n_hidden, n_layers)\nprint(net)","52a4a944":"batch_size = 128\nseq_length = 100\nn_epochs = 20 # start smaller if you are just testing initial behavior\n\n# train the model\ntrain(net, encoded, epochs=n_epochs, batch_size=batch_size, seq_length=seq_length, lr=0.001, print_every=10)","e20236e4":"# change the name, for saving multiple files\nmodel_name = 'rnn_20_epoch.net'\n\ncheckpoint = {'n_hidden': net.n_hidden,\n              'n_layers': net.n_layers,\n              'state_dict': net.state_dict(),\n              'tokens': net.chars}\n\nwith open(model_name, 'wb') as f:\n    torch.save(checkpoint, f)","4eddc335":"def predict(net, char, h=None, top_k=None):\n        ''' Given a character, predict the next character.\n            Returns the predicted character and the hidden state.\n        '''\n        \n        # tensor inputs\n        x = np.array([[net.char2int[char]]])\n        x = one_hot_encode(x, len(net.chars))\n        inputs = torch.from_numpy(x)\n        \n        if(train_on_gpu):\n            inputs = inputs.cuda()\n        \n        # detach hidden state from history\n        h = tuple([each.data for each in h])\n        # get the output of the model\n        out, h = net(inputs, h)\n\n        # get the character probabilities\n        p = F.softmax(out, dim=1).data\n        if(train_on_gpu):\n            p = p.cpu() # move to cpu\n        \n        # get top characters\n        if top_k is None:\n            top_ch = np.arange(len(net.chars))\n        else:\n            p, top_ch = p.topk(top_k)\n            top_ch = top_ch.numpy().squeeze()\n        \n        # select the likely next character with some element of randomness\n        p = p.numpy().squeeze()\n        char = np.random.choice(top_ch, p=p\/p.sum())\n        \n        # return the encoded value of the predicted char and the hidden state\n        return net.int2char[char], h","f85296bf":"def sample(net, size, prime='The', top_k=None):\n        \n    if(train_on_gpu):\n        net.cuda()\n    else:\n        net.cpu()\n    \n    net.eval() # eval mode\n    \n    # First off, run through the prime characters\n    chars = [ch for ch in prime]\n    h = net.init_hidden(1)\n    for ch in prime:\n        char, h = predict(net, ch, h, top_k=top_k)\n\n    chars.append(char)\n    \n    # Now pass in the previous character and get a new one\n    for ii in range(size):\n        char, h = predict(net, chars[-1], h, top_k=top_k)\n        chars.append(char)\n\n    return ''.join(chars)","70a1e5d9":"print(sample(net, 1000, prime='sunset', top_k=5))","aeba3bf3":"---\n## Making Predictions\n\nNow that the model is trained, we'll want to sample from it and make predictions about next characters! To sample, we pass in a character and have the network predict the next character. Then we take that character, pass it back in, and get another predicted character. Just keep doing this and you'll generate a bunch of text!\n\n### A note on the `predict`  function\n\nThe output of our RNN is from a fully-connected layer and it outputs a **distribution of next-character scores**.\n\n> To actually get the next character, we apply a softmax function, which gives us a *probability* distribution that we can then sample to predict the next character.\n\n### Top K sampling\n\nOur predictions come from a categorical probability distribution over all the possible characters. We can make the sample text and make it more reasonable to handle (with less variables) by only considering some $K$ most probable characters. This will prevent the network from giving us completely absurd characters while allowing it to introduce some noise and randomness into the sampled text. Read more about [topk, here](https:\/\/pytorch.org\/docs\/stable\/torch.html#torch.topk).\n","d62e3144":"**Tokenization**\n\nIn the cells, below, I'm creating a couple dictionaries to convert the characters to and from integers. Encoding the characters as integers makes it easier to use as input in the network.","fbddfda1":"And we can see those same characters from above, encoded as integers","93e3abea":"Pre-processing the data\nAs you can see in our char-RNN image above, our LSTM expects an input that is one-hot encoded meaning that each character is converted into an integer (via our created dictionary) and then converted into a column vector where only it's corresponding integer index will have the value of 1 and the rest of the vector will be filled with 0's. Since we're one-hot encoding the data, let's make a function to do that!","3b2fa25b":"**Neural Network**","2e1726a3":"### Test Your Implementation\n\nNow I'll make some data sets and we can check out what's going on as we batch data. Here, as an example, I'm going to use a batch size of 8 and 50 sequence steps.","45166940":"## Making training mini-batches\n\n\nTo train on this data, we also want to create mini-batches for training. Remember that we want our batches to be multiple sequences of some desired number of sequence steps. Considering a simple example, our batches would look like this:\n\n<img src=\"assets\/sequence_batching@1x.png\" width=500px>\n\n\n<br>\n\nIn this example, we'll take the encoded characters (passed in as the `arr` parameter) and split them into multiple sequences, given by `batch_size`. Each of our sequences will be `seq_length` long.\n\n### Creating Batches\n\n**1. The first thing we need to do is discard some of the text so we only have completely full mini-batches. **\n\nEach batch contains $N \\times M$ characters, where $N$ is the batch size (the number of sequences in a batch) and $M$ is the seq_length or number of time steps in a sequence. Then, to get the total number of batches, $K$, that we can make from the array `arr`, you divide the length of `arr` by the number of characters per batch. Once you know the number of batches, you can get the total number of characters to keep from `arr`, $N * M * K$.\n\n**2. After that, we need to split `arr` into $N$ batches. ** \n\nYou can do this using `arr.reshape(size)` where `size` is a tuple containing the dimensions sizes of the reshaped array. We know we want $N$ sequences in a batch, so let's make that the size of the first dimension. For the second dimension, you can use `-1` as a placeholder in the size, it'll fill up the array with the appropriate data for you. After this, you should have an array that is $N \\times (M * K)$.\n\n**3. Now that we have this array, we can iterate through it to get our mini-batches. **\n\nThe idea is each batch is a $N \\times M$ window on the $N \\times (M * K)$ array. For each subsequent batch, the window moves over by `seq_length`. We also want to create both the input and target arrays. Remember that the targets are just the inputs shifted over by one character. The way I like to do this window is use `range` to take steps of size `n_steps` from $0$ to `arr.shape[1]`, the total number of tokens in each sequence. That way, the integers you get from `range` always point to the start of a batch, and each window is `seq_length` wide.\n\n> **TODO:** Write the code for creating batches in the function below. The exercises in this notebook _will not be easy_. I've provided a notebook with solutions alongside this notebook. If you get stuck, checkout the solutions. The most important thing is that you don't copy and paste the code into here, **type out the solution code yourself.**","4e411fc9":"Instantiating the model\nNow we can actually train the network. First we'll create the network itself, with some given hyperparameters. Then, define the mini-batches sizes, and start training!","6797d65c":"### Priming and generating text \n\nTypically you'll want to prime the network so you can build up a hidden state. Otherwise the network will start out generating characters at random. In general the first bunch of characters will be a little rough since it hasn't built up a long history of characters to predict from.","ffc27df8":"## Time to train\n\nThe train function gives us the ability to set the number of epochs, the learning rate, and other parameters.\n\nBelow we're using an Adam optimizer and cross entropy loss since we are looking at character class scores as output. We calculate the loss and perform backpropagation, as usual!\n\nA couple of details about training: \n>* Within the batch loop, we detach the hidden state from its history; this time setting it equal to a new *tuple* variable because an LSTM has a hidden state that is a tuple of the hidden and cell states.\n* We use [`clip_grad_norm_`](https:\/\/pytorch.org\/docs\/stable\/_modules\/torch\/nn\/utils\/clip_grad.html) to help prevent exploding gradients."}}