{"cell_type":{"bcb4cb59":"code","f837ad8b":"code","3693a043":"code","34f1df25":"code","89c7ffb5":"code","cc5353bf":"code","c7ca6ced":"code","745e5e5f":"code","083c41fa":"markdown"},"source":{"bcb4cb59":"#\n# Import packages\n#\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras import metrics\nfrom keras.optimizers import Adam, RMSprop","f837ad8b":"#\n# Load data from CSV file\n#\nkc_data_org = pd.read_csv(\"..\/input\/kc_house_data.csv\")\nkc_data_org.head(5)","3693a043":"#\n# Transform dates into year, month and day and select columns.\n#\nkc_data_org['sale_yr'] = pd.to_numeric(kc_data_org.date.str.slice(0, 4))\nkc_data_org['sale_month'] = pd.to_numeric(kc_data_org.date.str.slice(4, 6))\nkc_data_org['sale_day'] = pd.to_numeric(kc_data_org.date.str.slice(6, 8))\n\nkc_data = pd.DataFrame(kc_data_org, columns=[\n        'sale_yr','sale_month','sale_day',\n        'bedrooms','bathrooms','sqft_living','sqft_lot','floors',\n        'condition','grade','sqft_above','sqft_basement','yr_built',\n        'zipcode','lat','long','sqft_living15','sqft_lot15','price'])\nlabel_col = 'price'\n\nprint(kc_data.describe(include='all'))\nkc_data.head()","34f1df25":"#\n# Split data to train and test and normalize data\n#\ndef train_test_split(df, test_percent=.2, seed=None):\n    train_percent = 1.0 - test_percent\n    np.random.seed(seed)\n    perm = np.random.permutation(df.index)\n    m = len(df)\n    train_end = int(train_percent * m)\n    train = perm[:train_end]\n    test = perm[train_end:]\n    return train, test\n\ntrain_data, test_data = train_test_split (kc_data)\n\nx_train = np.array(kc_data.loc[train_data, :].drop(label_col, axis=1).iloc[:])\ny_train = np.array(kc_data.loc[train_data, [label_col]].iloc[:])\n\nx_test = np.array(kc_data.loc[test_data, :].drop(label_col, axis=1).iloc[:])\ny_test = np.array(kc_data.loc[test_data, [label_col]].iloc[:])\n\n# Normalize Input Data\nx_scaler = MinMaxScaler().fit(x_train)\ny_scaler = MinMaxScaler().fit(y_train)\n    \nX_train = x_scaler.transform(x_train)\nX_test = x_scaler.transform(x_test) \nY_train = y_scaler.fit_transform(y_train)\nY_test = y_scaler.fit_transform(y_test) \n\ninput_size = X_train.shape[1]\noutput_size = Y_train.shape[1]\n\nprint('X_train.shape', X_train.shape)\nprint('Y_train.shape', Y_train.shape)\n\nprint('X_test.shape', X_test.shape)\nprint('Y_test.shape', Y_test.shape)\n\nprint('Input Size', input_size)\nprint('Output Size', output_size)\n","89c7ffb5":"#\n# Build mutli layer neural network model\n#\nnetwork = Sequential()\nnetwork.add(Dense(18, activation=\"relu\", input_shape=(input_size,)))\nnetwork.add(Dropout(0.3))\nnetwork.add(Dense(9, activation=\"relu\"))\nnetwork.add(Dropout(0.1))\nnetwork.add(Dense(3, activation=\"relu\"))\nnetwork.add(Dense(output_size))\n\nnetwork.compile(loss='mean_squared_error', optimizer=Adam(), metrics=[metrics.mae])\nprint(network.summary())","cc5353bf":"#\n# Train the model\n#\nnetwork.fit(X_train, Y_train, epochs=30, batch_size = 32, shuffle=True)\n\ntrain_score = network.evaluate(X_train, Y_train, verbose=0)\nvalid_score = network.evaluate(X_test, Y_test, verbose=0)","c7ca6ced":"# \n# Evaluate the result\n#\nprint(\"----------------------------\")\nprint('Train MAE: ', round(train_score[1], 4), ', Train Loss: ', round(train_score[0], 4)) \nprint('Test MAE: ', round(valid_score[1], 4), ', Test Loss: ', round(valid_score[0], 4))\n\nprint()\n\ninv_y_train = y_scaler.inverse_transform(Y_train)\ninv_y_test = y_scaler.inverse_transform(Y_test)\n\nprint(\"Some random price preditions from training set\")\nprint(\"----------------------------\")\ny_pred = network.predict(X_train)\ninv_y_pred =  y_scaler.inverse_transform(y_pred)\nfor i in range(0, 10):\n    r = np.random.randint(0, len(X_train))\n    pred = inv_y_pred[r][0]\n    print(f'Train_Price[{r}] = {inv_y_train[r][0]}, Prediction = {pred}')\n    \nprint()\n\nprint(\"Some random price preditions from test set\")\nprint(\"----------------------------\")\ny_pred = network.predict(X_test)\ninv_y_pred =  y_scaler.inverse_transform(y_pred)\nfor i in range(0, 10):\n    r = np.random.randint(0, len(X_test))\n    pred = inv_y_pred[r][0]\n    print(f'Test_Price[{r}] = {inv_y_test[r][0]}, Prediction = {pred}')","745e5e5f":"plt.figure(figsize=(20, 10))\nplt.title('Test Data Prediction')\nplt.xlabel('Test data vectors')\nplt.ylabel('House price')\n\n\n#sub-sample each 50nth entry\ny_plot = inv_y_test[0::50]\npred_plot = inv_y_pred[0::50]\n\nplt.plot(y_plot, 'b', label=\"Actual Price\")\nplt.plot(pred_plot, 'g', label=\"Predicted Price\")\nplt.legend(loc='upper left')\n","083c41fa":"This is a **Multi-layer Neural Network** version of King County house price prediction. Neural network has been implemented by keras library.."}}