{"cell_type":{"aa964438":"code","8b9e21ce":"code","6bcc4322":"code","d1d07887":"code","ce558b73":"code","d22c2ae1":"code","5b23998c":"code","99293a55":"code","e400c7a0":"code","918b1736":"code","93f2f4e8":"code","06192e9e":"code","0e702b99":"code","7573dd37":"code","93d3ad6b":"code","ae472d66":"code","1d924102":"code","7a143254":"code","09c5aa7a":"code","982fb129":"code","de6d0a0b":"code","5cd2049e":"code","cd57fc14":"code","6212d35d":"code","90ee56c5":"code","a23d8452":"code","7ffc3209":"code","ba8875cc":"code","2501fb8f":"code","bcec0f30":"code","506ea61d":"code","06c41f29":"code","7c529e61":"code","74b33b84":"code","43f6d203":"code","a0c1becc":"code","ed3ada55":"code","ba0f16b8":"code","0969490e":"code","a73ce24e":"code","4c810074":"code","4efde940":"code","221224e4":"code","05366cf6":"code","4ebfc9ea":"code","9a903382":"code","1e27881e":"code","b100326f":"markdown","7939fe7f":"markdown","b6882205":"markdown","05358019":"markdown","01f9c857":"markdown","c81e6fb4":"markdown","ecb9c20c":"markdown","be3346e4":"markdown"},"source":{"aa964438":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b9e21ce":"traindata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntestdata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv') \n\ntestdata['SalePrice'] = np.NaN\nraw_data = pd.concat([traindata,testdata])\nraw_data = raw_data.drop('Id', axis = 1)\nraw_data.head()","6bcc4322":"raw_data.head()","d1d07887":"raw_data.describe()","ce558b73":"raw_data.shape","d22c2ae1":"#Checking null values\n\npd.set_option('display.max_rows', 82)\nraw_data.isnull().sum()","5b23998c":"#percentage of null values\npercent_missing = raw_data.isnull().sum() * 100 \/ len(raw_data)\nmissing_value_df = pd.DataFrame({'percent_missing': percent_missing})\nmissing_value_df","99293a55":"# dropping columns with null values > 90 %\n\ndata = raw_data.drop(['Alley', 'MiscFeature', 'PoolQC'], axis = 1)","e400c7a0":"#data.drop_duplicates(inplace = True)\ndata.shape","918b1736":"# Checking data types\ndata.dtypes","93f2f4e8":"cols = [i for i in data.columns ]\ncols.remove('SalePrice')","06192e9e":"#Filling missing values with mean for numerical data\n\nfor i in data[cols] :\n    if data[i].isnull().sum()>0:\n        if(data[i].dtype == 'int64' or data[i].dtype == 'float64'):\n            data[i].fillna(data[i].median(), inplace = True)","0e702b99":"#Numerical columns and categorical columns\n\nnum_cols = data.select_dtypes(['int64', 'float64']).columns\ncat_cols = data.select_dtypes(['object']).columns\n\ndata[cat_cols].isnull().sum()","7573dd37":"#filling missing values for categorical columns with the most used values\n\ndata[['MSZoning','Exterior1st', 'Exterior2nd' ,'MasVnrType','Functional', 'Utilities','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1','Electrical', 'BsmtFinType2','KitchenQual', 'FireplaceQu','GarageType', 'GarageFinish','GarageQual','GarageCond','Fence', 'SaleType']].describe()","93d3ad6b":"data.shape","ae472d66":"data['MSZoning'].fillna('RL', inplace = True)\ndata['Utilities'].fillna('AllPub', inplace = True)\ndata['BsmtQual'].fillna('TA', inplace = True)\ndata['BsmtCond'].fillna('TA', inplace = True)\ndata['BsmtExposure'].fillna('No', inplace = True)\ndata['BsmtFinType1'].fillna('Unf', inplace = True)\ndata['BsmtFinType2'].fillna('Unf', inplace = True)\ndata['Electrical'].fillna('SBrkr', inplace = True)\ndata['FireplaceQu'].fillna('Gd', inplace = True)\ndata['GarageType'].fillna('Attchd', inplace = True)\ndata['GarageFinish'].fillna('Unf', inplace = True)\ndata['GarageQual'].fillna('TA', inplace = True)\ndata['GarageCond'].fillna('TA', inplace = True)\ndata['Fence'].fillna('MnPrv', inplace = True)\ndata['KitchenQual'].fillna('TA', inplace = True)\ndata['SaleType'].fillna('WD', inplace = True)\ndata['Exterior1st'].fillna('VinlSd', inplace = True)\ndata['Exterior2nd'].fillna('VinlSd', inplace = True)\ndata['Functional'].fillna('Typ', inplace = True)\ndata['MasVnrType'].fillna('None', inplace = True)\ndata[cat_cols].isnull().sum()","1d924102":"import matplotlib.pyplot as plt\nimport seaborn as sns","7a143254":"data.hist(figsize = (20,20))","09c5aa7a":"for i in cat_cols:\n    sns.barplot(x = i, y = 'SalePrice', data = data)\n    plt.show()","982fb129":"data.MSSubClass.unique()","de6d0a0b":"#Classifying Subclass into more general groups\n\ndef values(x):\n    if x>=20 and x<=55 or x == 120 or x == 150:\n        return '1'\n    elif x>=60 and x<= 75 or x ==160 or x==190:\n        return '2'\n    else:\n        return 'other'\n    \ndata['MSClass'] = data['MSSubClass'].apply(values)\ndata['MSClass'].dtype","5cd2049e":"data['OverallCond'] = data['OverallCond'].astype('object')\ndata['OverallQual'] = data['OverallQual'].astype('object')","cd57fc14":"data['TotalOutsideSF'] = data['WoodDeckSF'] + data['OpenPorchSF'] + data['EnclosedPorch'] + data['3SsnPorch'] + data['ScreenPorch'] \n","6212d35d":"data[\"Spaciousness\"] = (data['1stFlrSF'] + data['2ndFlrSF']) \/ data['TotRmsAbvGrd']","90ee56c5":"data[\"LivLotRatio\"] = data['GrLivArea'] \/ data['LotArea']","a23d8452":"# PorchTypes that counts how many of the following are greater than 0.0:\ndata[\"PorchTypes\"] = data[['WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',  'ScreenPorch']].gt(0.0).sum(axis=1)","7ffc3209":"# an interaction between BldgType and GrLivArea \n\n# One-hot encode BldgType. Using`prefix=\"Bldg\"\ndata_one = pd.get_dummies(data.BldgType, prefix = 'Bldg') \n# Multiply\ndata_one = data_one.mul(data.GrLivArea, axis = 0)\n\ndata_one","ba8875cc":"data['Bldg_1Fam']  = data_one['Bldg_1Fam'] \ndata['Bldg_2fmCon'] = data_one['Bldg_2fmCon']\ndata['Bldg_Duplex'] = data_one['Bldg_Duplex']\ndata['Bldg_Twnhs'] = data_one['Bldg_Twnhs']\ndata['Bldg_TwnhsE'] = data_one['Bldg_TwnhsE']","2501fb8f":"data[\"MedNhbdArea\"] = data.groupby('Neighborhood')['GrLivArea'].transform('median')","bcec0f30":"data.head()","506ea61d":"cat_cols=data.select_dtypes('object').columns\nnum_cols=data.select_dtypes(['int64', 'float64']).columns","06c41f29":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in cat_cols:\n    data[col] = le.fit_transform(data[col])","7c529e61":"train = data[data.SalePrice.notna()]\ntest = data[data.SalePrice.isna()]\n\ntrain.drop_duplicates(inplace = True)\ntest.drop_duplicates(inplace = True)\ntrain.shape\ntest.shape","74b33b84":"\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n\nfrom sklearn.model_selection import train_test_split\n\nX = train\ny = train.pop('SalePrice')\nx_train, x_valid, y_train, y_valid = train_test_split(X, y ,test_size = 0.15, random_state = 67 )\n","43f6d203":"print(y)\nX.columns","a0c1becc":"from xgboost import XGBRegressor\nmodel = XGBRegressor(learning_rate = 0.095, n_estimators = 100)\n\n\nmodel.fit(x_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds =  model.predict(x_valid)\n\n\n# Evaluate the model\nfrom sklearn.metrics import explained_variance_score\nacc_training = explained_variance_score(model.predict(x_train), y_train)\nacc = explained_variance_score(preds, y_valid)\nprint(\"Training acc :\",acc_training)\nprint (\"Validation acc :\",acc)","ed3ada55":"\nfrom sklearn.model_selection import cross_val_score\n\ndef score_dataset(X, y, model=XGBRegressor(learning_rate = 0.095, n_estimators = 100)):\n    # Label encoding for categoricals\n    for colname in X.select_dtypes([\"category\", \"object\"]):\n        X[colname], _ = X[colname].factorize()\n    # Metric for Housing competition is RMSLE (Root Mean Squared Log Error)\n    score = cross_val_score(\n        model, X, y, cv=5, scoring=\"neg_mean_squared_log_error\",\n    )\n    score = -1 * score.mean()\n    score = np.sqrt(score)\n    return score","ba0f16b8":"score_dataset(X, y)","0969490e":"from sklearn.metrics import mean_absolute_error\nscore = mean_absolute_error(preds, y_valid)\nprint('MAE:', score)","a73ce24e":"sns.scatterplot(y_valid, preds)\nplt.xlabel('Actual')\nplt.ylabel('Predicted')","4c810074":"test.drop('SalePrice', axis = 1, inplace = True)\ntest.columns","4efde940":"preds_test = model.predict(test)","221224e4":"\noutput = pd.DataFrame({'Id': pd.Series(np.arange(1461,2920,1)),\n                       'SalePrice': preds_test})\n","05366cf6":"pd.Series(np.arange(1461,2920,1))","4ebfc9ea":"output.to_csv('submission.csv', index=False)","9a903382":"output","1e27881e":"sample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample","b100326f":"**Separating train and test data**","7939fe7f":"**MedNhbdArea that describes the median of GrLivArea grouped on Neighborhood.\nThe value of a home often depends on how it compares to typical homes in its neighborhood**","b6882205":"**To understand data more clearly, read data_description.txt**","05358019":"# Feature Engineering","01f9c857":"**ENCODING with LABEL ENCODER**","c81e6fb4":"**Distribution of numerical features**","ecb9c20c":"# Data Cleaning","be3346e4":"LivLotRatio: the ratio of GrLivArea to LotArea\n\nSpaciousness: the sum of 1stFlrSF and 2ndFlrSF divided by TotRmsAbvGrd\n\nTotalOutsideSF: the sum of WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, and ScreenPorch"}}