{"cell_type":{"4f84973b":"code","d63afd84":"code","4fa212a5":"code","49a13649":"code","818d0e45":"code","cf7305ed":"code","bb2d6421":"code","cbfe110a":"code","0452029a":"code","d8cfa037":"code","ecb554d5":"code","999dc1a4":"code","02f4be0c":"code","5b6df841":"code","325f1471":"code","f19a3d16":"code","fed03ead":"code","01870112":"code","43458485":"code","03fc01a6":"code","de2b77b1":"code","286233c7":"code","31e154dc":"code","5fdcdbc1":"code","527e06ff":"code","c1f18502":"code","561da000":"code","f533acb8":"code","ef9b2e71":"code","f69739fa":"code","579bf040":"code","d733d990":"code","91f54fc4":"code","7c7a3aad":"code","d3a0bfd4":"code","25d1a915":"code","f16f113d":"code","9f39dc51":"code","47659038":"code","f857bd13":"code","710e5f94":"code","fa2d623d":"code","a0bbbe12":"code","250c3380":"code","e182a1b0":"code","3e14b45b":"code","957b1d17":"code","ae4b8c8c":"code","93721150":"code","5f6b0c3d":"code","9caa7502":"code","390bfcec":"code","6ecd89ad":"markdown","e4f54513":"markdown","f579a1d0":"markdown","a5b7ffb1":"markdown","76630c7b":"markdown","401f1016":"markdown","a1a25ea2":"markdown"},"source":{"4f84973b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d63afd84":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","4fa212a5":"pd.set_option('max_colwidth', 256)\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 1000)","49a13649":"df.head()","818d0e45":"corr = df.corr()\ntop_feature = corr[abs(corr['SalePrice']>0.5)]\ntop_feature['SalePrice']","cf7305ed":"var = 'OverallQual'\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=df)","bb2d6421":"var = 'YearBuilt'\nf, ax = plt.subplots(figsize=(20,20))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=df)","cbfe110a":"print(\"Find most important features relative to target\")\ncorr = df.corr()\ncorr.sort_values(['SalePrice'], ascending=False, inplace=True)\ncorr.SalePrice","0452029a":"corr = df.corr()\nplt.subplots(figsize=(20,9))\nsns.heatmap(corr, annot=True)","d8cfa037":"top_feature = corr.index[abs(corr['SalePrice']>0.5)]\nplt.subplots(figsize=(12, 8))\ntop_corr = df[top_feature].corr()\nsns.heatmap(top_corr, annot=True)\nplt.show()","ecb554d5":"col = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nsns.set(style='ticks')\nsns.pairplot(df[col], height=3, kind='reg')","999dc1a4":"df.isnull().sum().sort_values(ascending= False)[:15]","02f4be0c":"df['LotFrontage'] =df['LotFrontage'].fillna(df['LotFrontage'].mean())","5b6df841":"df['GarageType'] = df['GarageType'].fillna(df['GarageType'].mode()[0])","325f1471":"df['GarageFinish'] = df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])","f19a3d16":"df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])","fed03ead":"df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])\ndf['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0])\ndf['BsmtFinSF1'] = df['BsmtFinSF1'].fillna(df['BsmtFinSF1'].mean())\ndf['BsmtFinSF2'] = df['BsmtFinSF2'].fillna(df['BsmtFinSF2'].mode()[0])\ndf['Utilities'] = df['Utilities'].fillna(df['Utilities'].mode()[0])\ndf['MasVnrType'] = df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0])\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['BsmtUnfSF'] = df['BsmtUnfSF'].fillna(df['BsmtUnfSF'].mode()[0])\ndf['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(df['TotalBsmtSF'].mode()[0])\ndf['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(df['BsmtHalfBath'].mode()[0])\ndf['BsmtFullBath'] = df['BsmtFullBath'].fillna(df['BsmtFullBath'].mode()[0])\ndf['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])\ndf['Functional'] = df['Functional'].fillna(df['Functional'].mode()[0])\ndf['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])\ndf['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])\ndf['GarageCars'] = df['GarageCars'].fillna(df['GarageCars'].mode()[0])\ndf['GarageArea'] = df['GarageArea'].fillna(df['GarageArea'].mean())\ndf['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])\ndf['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])","01870112":"df.drop(['Id'],inplace= True,axis=1)","43458485":"df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].mode()[0])","03fc01a6":"df.isnull().sum().sort_values(ascending= False)[:15]","de2b77b1":"cols = df.columns\nnum_cols = df._get_numeric_data().columns\nnum_cols\ncol_list = list(set(cols) - set(num_cols))\ncol_list","286233c7":"y = df.iloc[:, -1].values","31e154dc":"y","5fdcdbc1":"df1 = df.copy()","527e06ff":"df1 = pd.get_dummies(df, columns = ['GarageCond',\n 'BsmtExposure',\n 'BldgType',\n 'GarageQual',\n 'KitchenQual',\n 'Condition1',\n 'Electrical',\n 'LotShape',\n 'LandSlope',\n 'BsmtCond',\n 'LotConfig',\n 'BsmtFinType2',\n 'CentralAir',\n 'Neighborhood',\n 'HouseStyle',\n 'MasVnrType',\n 'PavedDrive',\n 'SaleType',\n 'Condition2',\n 'LandContour',\n 'ExterQual',\n 'HeatingQC',\n 'BsmtFinType1',\n 'Functional',\n 'GarageType',\n 'Utilities',\n 'GarageFinish',\n 'RoofMatl',\n 'Exterior1st',\n 'BsmtQual',\n 'RoofStyle',\n 'Heating',\n 'Street',\n 'ExterCond',\n 'Foundation',\n 'Exterior2nd',\n 'SaleCondition',\n 'MSZoning'], drop_first = True)","c1f18502":"df1.head()","561da000":"col = df1.pop(\"SalePrice\")","f533acb8":"df1","ef9b2e71":"y","f69739fa":"df2 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","579bf040":"df3 = df2.copy()","d733d990":"df2.drop(['PoolQC','Fence','MiscFeature','FireplaceQu','Alley','GarageYrBlt'],axis=1,inplace=True)","91f54fc4":"df2['LotFrontage'] = df2['LotFrontage'].fillna(df2['LotFrontage'].mean())","7c7a3aad":"df2['GarageType'] = df2['GarageType'].fillna(df2['GarageType'].mode()[0])","d3a0bfd4":"df2['GarageFinish'] = df2['GarageFinish'].fillna(df2['GarageFinish'].mode()[0])","25d1a915":"df2['MSZoning'] = df2['MSZoning'].fillna(df2['MSZoning'].mode()[0])","f16f113d":"df2['BsmtQual'] = df2['BsmtQual'].fillna(df2['BsmtQual'].mode()[0])","9f39dc51":"df2['BsmtCond'] = df2['BsmtCond'].fillna(df2['BsmtCond'].mode()[0])","47659038":"df2['BsmtExposure'] = df2['BsmtExposure'].fillna(df2['BsmtExposure'].mode()[0])","f857bd13":"df2['KitchenQual'] = df2['KitchenQual'].fillna(df2['KitchenQual'].mode()[0])\ndf2['Functional'] = df2['Functional'].fillna(df2['Functional'].mode()[0])\ndf2['GarageQual'] = df2['GarageQual'].fillna(df2['GarageQual'].mode()[0])\ndf2['GarageCond'] = df2['GarageCond'].fillna(df2['GarageCond'].mode()[0])\ndf2['GarageCars'] = df2['GarageCars'].fillna(df2['GarageCars'].mode()[0])\ndf2['GarageArea'] = df2['GarageArea'].fillna(df2['GarageArea'].mean())\ndf2['SaleType'] = df2['SaleType'].fillna(df2['SaleType'].mode()[0])","710e5f94":"df2['BsmtFinType1'] = df2['BsmtFinType1'].fillna(df2['BsmtFinType1'].mode()[0])\ndf2['BsmtFinSF1'] = df2['BsmtFinSF1'].fillna(df2['BsmtFinSF1'].mode()[0])\ndf2['BsmtFinSF2'] = df2['BsmtFinSF2'].fillna(df2['BsmtFinSF2'].mode()[0])\ndf2['BsmtFinType2'] = df2['BsmtFinType2'].fillna(df2['BsmtFinType2'].mode()[0])\ndf2['Exterior1st'] = df2['Exterior1st'].fillna(df2['Exterior1st'].mode()[0])\ndf2['Exterior2nd'] = df2['Exterior2nd'].fillna(df2['Exterior2nd'].mode()[0])\ndf2['BsmtUnfSF'] = df2['BsmtUnfSF'].fillna(df2['BsmtUnfSF'].mode()[0])\ndf2['TotalBsmtSF'] = df2['TotalBsmtSF'].fillna(df2['TotalBsmtSF'].mode()[0])\ndf2['BsmtHalfBath'] = df2['BsmtHalfBath'].fillna(df2['BsmtHalfBath'].mode()[0])\ndf2['BsmtFullBath'] = df2['BsmtFullBath'].fillna(df2['BsmtFullBath'].mode()[0])","fa2d623d":"df2['Utilities'] = df2['Utilities'].fillna(df2['Utilities'].mode()[0])\ndf2['MasVnrType'] = df2['MasVnrType'].fillna(df2['MasVnrType'].mode()[0])\ndf2['MasVnrArea'] = df2['MasVnrArea'].fillna(df2['MasVnrArea'].mode()[0])","a0bbbe12":"ID = df2['Id']\ndf2.drop(['Id'],axis=1,inplace=True)","250c3380":"df2.head()","e182a1b0":"cols = df2.columns\nnum_cols = df2._get_numeric_data().columns\nnum_cols\ncol_list1 = list(set(cols) - set(num_cols))\ncol_list1","3e14b45b":"df3 = pd.get_dummies(df2, columns = ['Street',\n 'Neighborhood',\n 'LotShape',\n 'RoofMatl',\n 'Heating',\n 'BsmtExposure',\n 'BsmtCond',\n 'ExterCond',\n 'Electrical',\n 'RoofStyle',\n 'Condition2',\n 'SaleCondition',\n 'LotConfig',\n 'KitchenQual',\n 'GarageFinish',\n 'PavedDrive',\n 'SaleType',\n 'Utilities',\n 'GarageQual',\n 'Exterior1st',\n 'GarageCond',\n 'Exterior2nd',\n 'Functional',\n 'LandSlope',\n 'BsmtFinType2',\n 'BsmtFinType1',\n 'ExterQual',\n 'BldgType',\n 'BsmtQual',\n 'CentralAir',\n 'LandContour',\n 'Condition1',\n 'MSZoning',\n 'MasVnrType',\n 'GarageType',\n 'Foundation',\n 'HeatingQC',\n 'HouseStyle']\n, drop_first = True)","957b1d17":"for i in df1.columns:\n    if i not in df3.columns:\n        df1.drop({i},axis= 1, inplace= True)\n        \nfor i in df3.columns:\n    if i not in df1.columns:\n        df3.drop({i},axis= 1, inplace= True)","ae4b8c8c":"X = df1.iloc[:].values\nX_test = df3.iloc[:].values","93721150":"X.shape","5f6b0c3d":"X_test.shape","9caa7502":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100)\nregressor.fit(X, y)","390bfcec":"predrd = regressor.predict(X_test)\npredrd","6ecd89ad":"**Data Cleaning Steps**","e4f54513":"**Visualizing the Data**","f579a1d0":"Data Preproceesing","a5b7ffb1":"**Predicting the results**","76630c7b":"importing the libraries","401f1016":"determing the correlation of SalePrice with other variables\n\n**Correlation** is a statistical technique that can show whether and how strongly pairs of variables are related","a1a25ea2":"**fitting Predicting the values of test results using Random Forest Regression Algorithm**\n\n**Random Forest algorithm**"}}