{"cell_type":{"9cb9612e":"code","e1e6d508":"code","d77f7107":"code","9666500a":"code","fbe15c52":"code","08151165":"code","39fc00c5":"code","029ff846":"code","b5e54e09":"code","efafbd81":"code","4580b827":"code","95a7fdb6":"code","7208e82c":"code","e6f98b03":"code","72cd0b1d":"code","94844c42":"code","075cad63":"code","e2c14aaa":"code","6c26aafe":"code","ea67504d":"code","2c22e8b5":"code","4837272d":"code","2936dc2a":"code","12997700":"code","cca3e13d":"code","3c6be889":"code","09cf5e61":"code","58d5eb87":"code","6f7e75a2":"code","7590758c":"code","6b0c587c":"code","5f714d06":"code","c9fe6dde":"code","906a70b8":"code","c27360a4":"code","355f51d3":"code","e7481b38":"markdown"},"source":{"9cb9612e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e1e6d508":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity='all'","d77f7107":"data= pd.read_csv('..\/input\/mtcars.csv')","9666500a":"data","fbe15c52":"data.shape","08151165":"data.info()","39fc00c5":"data.describe()","029ff846":"data.dtypes","b5e54e09":"data.isna().any()","efafbd81":"data.isna().sum()\n#No missing values","4580b827":"#univariate Analysis\ndata.hist(grid=False, figsize=(20,10), color='pink')","95a7fdb6":"#boxplot\nfor a in data:\n    if (a=='model' or a=='vs' or a=='am'):\n        continue\n    else:\n        plt.figure()\n        data.boxplot(column=[a], grid=False)\n        ","7208e82c":"data.head()","e6f98b03":"#count plot for vs\ndata['vs'].value_counts()\nsns.countplot(data['vs'])","72cd0b1d":"#count plot for vs\ndata['am'].value_counts()\nsns.countplot(data['am'])","94844c42":"#count plot for vs\ndata['gear'].value_counts()\nsns.countplot(data['gear'])","075cad63":"#count plot for vs\ndata['carb'].value_counts()\nsns.countplot(data['carb'])","e2c14aaa":"#count plot for cyl\ndata['cyl'].value_counts()\nsns.countplot(data['cyl'])","6c26aafe":"#Bivariate analysis\ndata.corr()","ea67504d":"plt.figure(figsize=(10,8))\nsns.heatmap(data.corr(), square=True, linewidths=0.2)\nplt.xticks(rotation=90)\nplt.yticks(rotation=0)","2c22e8b5":"plt.figure(figsize=(20,10))\nsns.pairplot(data, diag_kind='kde')","4837272d":"#let try to use Label Encoder first\nfrom sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()\ndata['Class']= le.fit_transform(data['model'])","2936dc2a":"data.head()","12997700":"X1= data.iloc[:,1:12]\nY1= data.iloc[:,-1]","cca3e13d":"#lets try to plot Decision tree to find the feature importance\nfrom sklearn.tree import DecisionTreeClassifier\ntree= DecisionTreeClassifier(criterion='entropy', random_state=1)\ntree.fit(X1, Y1)","3c6be889":"imp= pd.DataFrame(index=X1.columns, data=tree.feature_importances_, columns=['Imp'] )\nimp.sort_values(by='Imp', ascending=False)","09cf5e61":"sns.barplot(x=imp.index.tolist(), y=imp.values.ravel(), palette='coolwarm')\n\n#taking only two variable #disp and #qsec as these variable has high importance","58d5eb87":"X=data[['disp','qsec']]\nY= data.iloc[:,0]","6f7e75a2":"#lets try to create segments using K means clustering\nfrom sklearn.cluster import KMeans\n#using elbow method to find no of clusters\nwcss=[]\nfor i in range(1,7):\n    kmeans= KMeans(n_clusters=i, init='k-means++', random_state=1)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)","7590758c":"print(wcss)","6b0c587c":"plt.plot(range(1,7), wcss, linestyle='--', marker='o', label='WCSS value')\nplt.title('WCSS value- Elbow method')\nplt.xlabel('no of clusters- K value')\nplt.ylabel('Wcss value')\nplt.legend()\nplt.show()","5f714d06":"#Here we got no of clusters = 2 \nkmeans= KMeans(n_clusters=2, random_state=1)\nkmeans.fit(X)","c9fe6dde":"kmeans.predict(X)","906a70b8":"#Cluster Center\nkmeans.cluster_centers_","c27360a4":"data['cluster']=kmeans.predict(X)\ndata.sort_values(by='cluster').head()","355f51d3":"#plotting Cluster plot\n\nplt.scatter(data.loc[data['cluster']==0]['disp'], data.loc[data['cluster']==0]['qsec'], c='green', label='cluster1-0')\nplt.scatter(data.loc[data['cluster']==1]['disp'], data.loc[data['cluster']==1]['qsec'], c='red', label='cluster2-1')\nplt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='black', label='center')\nplt.xlabel('disp')\nplt.ylabel('qsec')\nplt.legend()\nplt.show()","e7481b38":"mpg \tMiles\/(US) gallon\ncyl \tNumber of cylinders\ndisp\tDisplacement (cu.in.)\nhp\t    Gross horsepower\ndrat\tRear axle ratio\nwt\t    Weight (1000 lbs)\nqsec\t1\/4 mile time\nvs\t    Engine (0 = V-shaped, 1 = straight)\nam\t    Transmission (0 = automatic, 1 = manual)\ngear\tNumber of forward gears\ncarb\tNumber of carburetors"}}