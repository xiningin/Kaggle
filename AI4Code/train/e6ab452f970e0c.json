{"cell_type":{"0f94273b":"code","99c306b2":"code","048c3cff":"code","0301e74d":"code","f23112c1":"code","59f81795":"code","bfef9e7f":"code","ef15a4a2":"code","5fe514f4":"code","68edc98c":"code","8dcd3882":"code","853e30c1":"code","abd6e429":"code","e0eaddef":"code","71bad54d":"code","dff42a28":"code","5c7c9d75":"code","d23ce692":"code","23e1b8a1":"code","3edd35a4":"code","d83ba2cf":"markdown","ba900cf3":"markdown","4260648d":"markdown","c3cb1750":"markdown","b95f939f":"markdown","4096772f":"markdown","bb843411":"markdown","e02b9c60":"markdown","13e2836f":"markdown","883fd95c":"markdown","a6554e30":"markdown","6d8ed830":"markdown","3ba33343":"markdown","d077704f":"markdown","17410750":"markdown","d7cbfbe6":"markdown","f5926029":"markdown","cfe162d1":"markdown","05919e63":"markdown","527785a8":"markdown","81c96720":"markdown","31f0afba":"markdown"},"source":{"0f94273b":"import numpy as np\nimport pandas as pd\nimport os\nimport sys\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport seaborn as sns\nimport math\nimport itertools\nfrom scipy.stats import pearsonr\nimport gc\npy.init_notebook_mode(connected=True)","99c306b2":"LOOK_AT = 10","048c3cff":"movies = pd.read_csv(\"..\/input\/imdb-extensive-dataset\/IMDb movies.csv\")\nratings = pd.read_csv(\"..\/input\/imdb-extensive-dataset\/IMDb ratings.csv\")","0301e74d":"drop_cols = movies.isnull().sum()\/len(movies) <= 0.08\nnew_movies = movies.loc[:, drop_cols]\n\ndrop_cols2 = ratings.isnull().sum()\/len(movies) <= 0.08\nnew_ratings = ratings.loc[:, drop_cols2]","f23112c1":"df = new_movies.set_index('imdb_title_id').join(new_ratings.set_index('imdb_title_id'))\ndf","59f81795":"for column in df.columns:\n    try:\n        df[column] = pd.to_numeric(df[column])\n    except:\n        df[column] = df[column].astype(\"string\")","bfef9e7f":"unique_cols = df.columns\nunique_cols","ef15a4a2":"fig = px.scatter(df, x=\"weighted_average_vote\", y=\"mean_vote\", trendline=\"ols\")\nfig.update_layout(title={'text': f\"Weighted Average Vote vs Mean Vote, Corr: {round(pearsonr(df['weighted_average_vote'], df['mean_vote'])[0], 3)} \", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","5fe514f4":"year_df = df[[\"year\", \"weighted_average_vote\"]].groupby('year').describe().droplevel(0, axis=1).reset_index()\nyear_df = year_df.drop(len(year_df)-1)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=year_df[\"year\"], y=year_df[\"mean\"], error_y=dict(type='data', array=2*year_df['std'])))\nfig.update_layout(title={'text': f\"Weighted Average of Movies From Different Years With 95% Confidence Interval\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","68edc98c":"fig = px.line(df.groupby('year').size().drop(\"TV Movie 2019\"))\nfig.update_layout(title={'text': f\"Total Number of Movies Per Year\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}}, showlegend=False)\nfig.show()","8dcd3882":"fig = px.line(df.groupby('year').sum().drop(\"TV Movie 2019\"), y=\"total_votes\")\nfig.update_layout(title={'text': f\"Total Number of Votes Casted For Movies From Each Year\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","853e30c1":"fig = px.scatter(df, x=\"duration\", y=\"weighted_average_vote\")\nfig.update_layout(title={'text': f\"Duration vs Average Rating\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","abd6e429":"include = df.groupby('language').size().sort_values(ascending=False) >= 500\nlang_df = df.groupby('language').mean().loc[include].sort_values(\"weighted_average_vote\", ascending=False)\nfig = px.bar(lang_df, y=\"weighted_average_vote\")\nfig.update_layout(title={'text': f\"Average Weighted Rating for Each Language (More than 500 Entries)\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","e0eaddef":"fig = go.Figure()\nfig.add_trace(go.Bar(x=lang_df.index, y=lang_df[\"us_voters_rating\"], name=\"US Voters Rating\"))\nfig.add_trace(go.Bar(x=lang_df.index, y=lang_df[\"non_us_voters_rating\"], name=\"Non-US Voters Rating\"))\nfig.update_layout(title={'text': f\"Comparison of US vs Non-US Voters Rating\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","71bad54d":"tmp_act_df = df.copy() \ntmp_act_df['actors'] = df['actors'].fillna(\"None\")\ntmp_act_df['actors'] = tmp_act_df['actors'].str.split(', ')","dff42a28":"flat = [[x, df.loc[i, \"weighted_average_vote\"]] for i, y in tmp_act_df['actors'].iteritems() for x in y]\nrating_df = pd.DataFrame(flat, columns=[\"Actor\", \"Rating\"])\nrating_df","5c7c9d75":"actor_df = pd.DataFrame(rating_df.groupby('Actor').size(), columns=[\"Movies\"])\nactor_df['Rating'] = rating_df.groupby('Actor').mean()\nactor_df","d23ce692":"fig = px.bar(actor_df.sort_values(\"Movies\", ascending=False).iloc[:LOOK_AT], y=\"Movies\", hover_data=[\"Rating\"])\nfig.update_layout(title={'text': f\"Top {LOOK_AT} Actors with the Most Movies\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","23e1b8a1":"num_movies = 10\nactor_df_split = actor_df.loc[actor_df[\"Movies\"] >= num_movies].sort_values(\"Rating\", ascending=False)\nfig = px.bar(actor_df_split.iloc[:LOOK_AT], y=\"Rating\", hover_data=[\"Movies\"])\nfig.update_layout(title={'text': f\"Top {LOOK_AT} Highest Rated Actors With More than {num_movies} Movies\", 'x': 0.5,\n                             'xanchor': 'center', 'font': {'size': 20}})\nfig.show()","3edd35a4":"total_votes = df.loc[:, df.columns.str.contains(\"votes_\")]\ncorr = total_votes.corr()\nplt.figure(figsize=(12, 9))\nsns.heatmap(corr, annot=True)\nplt.title(\"Pearson Correlation Matrix for Votes\", fontsize=20)\nplt.show()","d83ba2cf":"Do you know any of these actors?","ba900cf3":"# Years with Most Movies + Most Casted Votes","4260648d":"There is a sudden surge of movies starting from the early 2000s, and the number of total votes casted reflects that. The sudden dip at the end of the graph (around 2015 to 2020) is probably due to the fact IMDb users haven't had enough time to rate movies that have been released more recently.","c3cb1750":"# Mean Vote or Weighted Average Vote","b95f939f":"Some of these languages are more favored by US voters compared to non-US voters, but for the most part, they are roughly similar. The only quite large difference is the average rating of English, as US voters seem to rate English much more highly than non-US voters.","4096772f":"# Most Highly Rated Actors","bb843411":"# Data Preprocessing","e02b9c60":"Drop all columns with more than 8% null values.","13e2836f":"# Years With Best Reception","883fd95c":"# Correlation Between Votes","a6554e30":"Join the two DataFrames into a master DataFrame named ```df```.","6d8ed830":"Interestingly, movies in English are the worst rated compared to some other \"more likeable\" languages like Japanese and Tamil. This may be due to the sheer number of movies in English, but still, it is an interesting feature of the data worth noting.","3ba33343":"What about these actors?","d077704f":"And that's it! If you like this notebook, please <span style=\"color: green\"> upvote <\/span> this notebook! Thanks for reading :)","17410750":"There doesn't seem to be any correlation.","d7cbfbe6":"Now we need to make sure the types of the each column are correct (especially the numeric columns for when we utilize pandas' ```groupby``` method in the future).","f5926029":"# IMDb Ratings EDA \ud83c\udfac\n\nEver wondered who the highest rated actors are? Or whether newer movies are more highly rated than older ones? Well, if so (or not), you've come to the right place. In this notebook, I explore this comphrensive IMDb dataset and perform some exploratory data analysis to come up with conclusions to all those burning questions.","cfe162d1":"# Votes By Language","05919e63":"The variable below, ```LOOK_AT```, controls the visualizations done below. If you fork this notebook and would like to visualize more\/less per graph, the easiest way to do so is by changing the value of ```LOOK_AT``` below.\n\n","527785a8":"# Essential Imports","81c96720":"# Duration vs Rating\n\nAre longer movies perhaps more highly related?","31f0afba":"It is quite evident that there a quite a lot of movies that are rated highly in terms of mean vote, but are rated very, very low in terms of weighted average vote. Per <a href=\"https:\/\/help.imdb.com\/article\/imdb\/track-movies-tv\/weighted-average-ratings\/GWT2DSBYVT2F25SK#\">IMDb's website<\/a>, this is because not every vote has the same importance according to their algorithm. For the remainder of this analysis, we opt to use the weighted average vote since it's more robust."}}