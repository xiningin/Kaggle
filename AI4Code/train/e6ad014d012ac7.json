{"cell_type":{"4e1e3130":"code","aa69ce5e":"code","dab663d5":"code","065eccda":"code","ac4b3984":"code","5ffc5f20":"code","7270244b":"code","8d0d134f":"code","498557d7":"code","9856ae17":"code","3f576dce":"code","4f0c3b3d":"code","54a18e69":"code","cc46c510":"code","b6adf634":"code","39f38640":"code","edebbc8d":"code","833ed09d":"code","f06a3c56":"code","6cc76bdf":"code","d1fa95a8":"code","efe2e40c":"code","d461b756":"code","ba9ca043":"code","fbe312db":"code","11952f35":"code","ae84aa60":"code","094ea503":"code","e0b96f8b":"code","a8117546":"code","44e4da0d":"code","0d4a2cdd":"code","7aa33774":"code","36228ae4":"code","1a962b5a":"code","bbc4472f":"code","26321496":"code","6d5cefcb":"markdown","d2336c22":"markdown","e73d4e79":"markdown","f2118ebe":"markdown","4bc13f1d":"markdown","620ff212":"markdown","01de519f":"markdown","0b1b9e56":"markdown","be449537":"markdown","2bbe2615":"markdown","b76825c1":"markdown","411f8f5f":"markdown","9486937c":"markdown","a3fdb00a":"markdown","4cba29de":"markdown","036d288e":"markdown","06a6fcaa":"markdown","ffc5fa7e":"markdown","be8f0018":"markdown","05c9b048":"markdown","50473432":"markdown","efe3e9e4":"markdown","f1ea9d2b":"markdown","01676719":"markdown","bf5e39af":"markdown","754f5f86":"markdown","27a1a449":"markdown","fdc8d2e2":"markdown","e67a6878":"markdown","98858e45":"markdown","3b2d0d07":"markdown","b666a0e2":"markdown","5d97c0b2":"markdown","34c766f5":"markdown","bde8f2c2":"markdown","640e57ab":"markdown"},"source":{"4e1e3130":"# Import packages\nimport pandas as pd\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","aa69ce5e":"# Import datasets and explore sample\ndf_apple = pd.read_csv('..\/input\/applestorecsv\/AppleStore.csv')\ndf_google = pd.read_csv('..\/input\/googleplaystorecsv\/googleplaystore.csv')\ndf_apple.head(5)\ndf_google.head(5)","dab663d5":"# Show number of rows and columns in each dataset\ndf_apple.shape\ndf_google.shape","065eccda":"# Transform dataframes into lists in order to make analysis easier\napple = df_apple.values.tolist()\napple_header = df_apple.columns\ngoogle = df_google.values.tolist()\ngoogle_header = df_google.columns","ac4b3984":"print(google[10472])  # incorrect row\nprint('\\n')\nprint(google_header)  # header\nprint('\\n')\nprint(google[0])      # correct row","5ffc5f20":"del google[10472]","7270244b":"for app in google:\n    name = app[0]\n    if name == 'Instagram':\n        print (app)\n        print ('\\n')","8d0d134f":"duplicate_apps = []\nunique_apps = []\n\nfor app in google:\n    name = app[0]\n    if name in unique_apps:\n        duplicate_apps.append(name)\n    else:\n        unique_apps.append(name)\n        \nprint('Number of duplicate apps:', len(duplicate_apps))\nprint('\\n')\nprint('Examples of duplicate apps:', duplicate_apps[0:5])","498557d7":"reviews_max = {}\n\nfor app in google:\n    name = app[0]\n    n_reviews = float(app[3])\n    \n    if name in reviews_max and reviews_max[name] < n_reviews:\n        reviews_max[name] = n_reviews\n        \n    elif name not in reviews_max:\n        reviews_max[name] = n_reviews","9856ae17":"print(len(reviews_max))","3f576dce":"android_clean = []\nalready_added = []\n\nfor app in google:\n    name = app[0]\n    n_reviews = float(app[3])\n    \n    if (reviews_max[name] == n_reviews) and (name not in already_added):\n        android_clean.append(app)\n        already_added.append(name)\n","4f0c3b3d":"len(android_clean)","54a18e69":"apple_duplicate_apps = []\napple_unique_apps = []\n\nfor app in apple:\n    name = app[0]\n    if name in apple_unique_apps:\n        apple_duplicate_apps.append(name)\n    else: \n        apple_unique_apps.append(name)\n\nprint(apple_duplicate_apps)","cc46c510":"def english(string):\n    for character in string:\n        if ord(character) > 127:\n            return False\n    else:\n        return True\n            \nenglish('Instagram')\nenglish('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad')\nenglish('Docs To Go\u2122 Free Office Suite')\nenglish('Instachat \ud83d\ude1c')","b6adf634":"def english(string):\n    non_ascii = 0\n    \n    for character in string:\n        if ord(character) > 127:\n            non_ascii += 1\n    \n    if non_ascii > 3:\n        return False\n    else:\n        return True\n            \nenglish('Instagram')\nenglish('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad')\nenglish('Docs To Go\u2122 Free Office Suite')\nenglish('Instachat \ud83d\ude1c')","39f38640":"google_english = []\nfor app in android_clean:\n    name = app[0]\n    if english(name) == True:\n        google_english.append(app)\n\ngoogle_english[0:2]","edebbc8d":"apple_english = []\nfor app in apple:\n    name = app[1]\n    if english(name) == True:\n        apple_english.append(app)\n\napple_english[0:2]","833ed09d":"len(google_english)\nlen(apple_english)","f06a3c56":"apple_free = []\nfor app in apple_english:\n    price = float(app[4])\n    if price == 0.0:\n        apple_free.append(app)\n\napple_free[0:2]","6cc76bdf":"google_free = []\nfor app in google_english:\n    price = (app[7])\n    if price == '0':\n        google_free.append(app)\n        \ngoogle_free[0:2]","d1fa95a8":"len(google_free)\nlen(apple_free)","efe2e40c":"apple_header\ngoogle_header","d461b756":"def freq_table(dataset,index):\n    tables = {}\n    total = 0\n    \n    for row in dataset:\n        total += 1\n        column = row[index]\n        if column in tables:\n            tables[column] += 1\n        else:\n            tables[column] = 1\n    \n    percent_table = {}\n    for key in tables:\n        percent = (tables[key]\/total)*100\n        percent_table[key] = percent\n        \n    return percent_table\n\ndef display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n\n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])","ba9ca043":"# 'prime_genre' frequency table\ndisplay_table(apple_free,11)","fbe312db":"# 'Category' frequency table\ndisplay_table(google_free,1)","11952f35":"# 'Genres' frequency table\ndisplay_table(google_free,9)","ae84aa60":"apple_genres = freq_table(apple_free,11)\napple_genres","094ea503":"for genre in apple_genres:\n    total = 0\n    len_genre = 0\n    for app in apple_free:\n        genre_app = app[11]\n        if genre_app == genre:\n            user_ratings = float(app[5])\n            total += user_ratings\n            len_genre += 1\n    ave_user_ratings = total\/len_genre\n    print(genre,':',ave_user_ratings)","e0b96f8b":"for app in apple_free:\n    if app[11] == 'Navigation':\n        print (app[1],':',app[5])    ","a8117546":"for app in apple_free:\n    if app[11] == 'Reference':\n        print(app[1], ':', app[5])","44e4da0d":"display_table(google_free,5) # The installs column","0d4a2cdd":"google_unique = freq_table(google_free,1) ","7aa33774":"for category in google_unique:\n    total = 0 # sum of installs for each genre\n    len_category = 0 # number of apps specific to a genre\n    for app in google_free:\n        category_app = app[1]\n        if category_app == category:\n            num_installs = app[5]\n            num_installs = num_installs.replace('+','')\n            num_installs = num_installs.replace(',','')\n            num_installs = float(num_installs)\n            total += num_installs\n            len_category += 1\n    \n    ave_installs = total\/len_category\n    print(category,':',ave_installs)","36228ae4":"for app in google_free:\n    if app[1] == 'COMMUNICATION' and (app[5]=='1,000,000,000+'\n                                        or app[5]=='100,000,000+'\n                                        or app[5]=='500,000,000+'):\n        print (app[0],':',app[5])","1a962b5a":"for app in google_free:\n    if app[1] == 'BOOKS_AND_REFERENCE':\n        print(app[0],':',app[5])","bbc4472f":"for app in google_free:\n    if app[1] == 'BOOKS_AND_REFERENCE' and (app[5]=='1,000,000,000+'\n                                        or app[5]=='100,000,000+'\n                                        or app[5]=='500,000,000+'):\n        print (app[0],':',app[5])","26321496":"for app in google_free:\n    if app[1] == 'BOOKS_AND_REFERENCE' and (app[5]=='1,000,000+'\n                                        or app[5]=='10,000,000+'\n                                        or app[5]=='5,000,000+'\n                                        or app[5]=='50,000,000+'):\n        print (app[0],':',app[5])","6d5cefcb":"However, it looks like there are only a few very popular apps, so this market still shows potential. Let's try to get some app ideas based on the kind of apps that are somewhere in the middle in terms of popularity (between 1,000,000 and 100,000,000 downloads):","d2336c22":"There are 4 different entries for instagram. Let's see how many duplicate entries there are in the entire dataset. ","e73d4e79":"This niche seems to be dominated by software for processing and reading ebooks, as well as various collections of libraries and dictionaries, so it's probably not a good idea to build similar apps since there'll be some significant competition.\n\nWe also notice there are quite a few apps built around the book Quran, which suggests that building an app around a popular book can be profitable. It seems that taking a popular book (perhaps a more recent book) and turning it into an app could be profitable for both the Google Play and the App Store markets.\n\nHowever, it looks like the market is already full of libraries, so we need to add some special features besides the raw version of the book. This might include daily quotes from the book, an audio version of the book, quizzes on the book, a forum where people can discuss the book, etc.","f2118ebe":"### Removing non-english apps","4bc13f1d":"## Most Popular Apps by Genre on Google Play","620ff212":"We're only looking for the bigger picture at the moment, so we'll only work with the Category column moving forward because the Genres column has too many categories. \n\nUp to this point, we found that the App Store is dominated by apps designed for fun, while Google Play shows a more balanced landscape of both practical and for-fun apps. Now we'd like to get an idea about the kind of apps that have most users.","01de519f":"Now lets move on to the google play market. ","0b1b9e56":"On average, communication apps have the most installs: 38,456,119. This number is heavily skewed up by a few apps that have over one billion installs (WhatsApp, Facebook Messenger, Skype, Google Chrome, Gmail, and Hangouts), and a few others with over 100 and 500 million installs:","be449537":"Since the apps developed are directed towards an english speaking audience, we want to delete all apps that are non-english. One way to do this is to delete every app that contains a symbol not commonly used in the english language. \n\nEach character used in a string has a number associated with it. For example, the number for 'a' is 97. The numbers corresponding to common letters using in the english language range from 0 to 127. We can detect if a character falls in this range and if it doesn't, it probably means the app has a non-english name. ","2bbe2615":"An error was identified in a particular row and since this result won't allow the continuation of analysis, it will be deleted. The error is a value for the number of reviews of the app and it shows '3.0M' which is a much larger number of reviews than any other app. ","b76825c1":"There are no duplicates within apple dataset. ","411f8f5f":"As we are only building apps that are free, we will delete all apps where the price is above 0. ","9486937c":"### Remove duplicate entries","a3fdb00a":"Looking at the android data, some apps have more than one entry. Instagram for example:","4cba29de":"# Android and iOS mobile apps","036d288e":"This project looks at apps that are free to download and install. Revenue is generated from in-app ads. The goal for this project is to analyse apps data and help developers understand what type of apps are likely to attract more users. Revenue is driven my how many users see and engage with the ads. ","06a6fcaa":"The book and reference genre includes a variety of apps: software for processing and reading ebooks, various collections of libraries, dictionaries, tutorials on programming or languages, etc. It seems there's still a small number of extremely popular apps that skew the average:","ffc5fa7e":"## Import datasets and data preparation","be8f0018":"We don't need very precise data for our purposes \u2014 we only want to find out which app genres attract the most users. Let's assume an app with 100,000+ installs has 100,000 installs. In order to perform calculations, we need to turn install numbers from the string format to float. This means removing the commas and plus characters. \n\nFirst, lets create a frequency table for category column to get all the unique apps. ","05c9b048":"## Conclusions","50473432":"We see the same pattern for a variety of cateo\ngries. A few apps are making the market seem more popular than it actually is. \n\nAgain, the main concern is that these app genres might seem more popular than they really are. Moreover, these niches seem to be dominated by a few giants who are hard to compete against.\n\nThe game genre seems pretty popular, but previously we found out this part of the market seems a bit saturated, so we'd like to come up with a different app recommendation if possible.\n\nThe books and reference genre looks fairly popular as well, with an average number of installs of 8,767,811. It's interesting to explore this in more depth, since we found this genre has some potential to work well on the App Store, and our aim is to recommend an app genre that shows potential for being profitable on both the App Store and Google Play.\n\nLet's take a look at some of the apps from this genre and their number of installs:","efe3e9e4":"In this project, we analyzed data about the App Store and Google Play mobile apps with the goal of recommending an app profile that can be profitable for both markets.\n\nWe concluded that taking a popular book (perhaps a more recent book) and turning it into an app could be profitable for both the Google Play and the App Store markets. The markets are already full of libraries, so we need to add some special features besides the raw version of the book. This might include daily quotes from the book, an audio version of the book, quizzes on the book, a forum where people can discuss the book, etc.","f1ea9d2b":"Now we can get a new list for both datasets containing only english apps:\n","01676719":"On average, navigation apps have the highest number of user reviews, but this figure is heavily influenced by Waze and Google Maps, which have close to half a million user reviews together:","bf5e39af":"Clearly we need to use the \"prime_genre\" and \"Genres\"\/\"Category\"\ncolumns in apple and google datasets respectively, to create a frequency table to see the most common genres. ","754f5f86":"The picture looks significantly different on Google Play: there are not that many apps designed for fun, and it seems that a good number of apps are designed for practical purposes (family, tools, business, lifestyle, productivity, etc.). However, if we investigate this further, we can see that the family category (which accounts for almost 19% of the apps) means mostly games for kids.","27a1a449":"The app proportions show that more than half (58%) of all apps fall in the games genre. The runner up is entertainment with 7%. Most apps analysed seem to be designed towards categories such as games, entertainment and social network compared to categories such as education, shopping and lifestyle.\n\nThe general impression is that App Store (at least the part containing free English apps) is dominated by apps that are designed for fun (games, entertainment, photo and video, social networking, sports, music, etc.), while apps with practical purposes (education, shopping, utilities, productivity, lifestyle, etc.) are more rare. However, the fact that fun apps are the most numerous doesn't also imply that they also have the greatest number of users \u2014 the demand might not be the same as the offer.\n\nLet's continue by examining the Genres and Category columns of the Google Play data set (two columns which seem to be related).","fdc8d2e2":"Duplicates will need to be removed before data analysis but they won't be removed randomly. First thing to find out is what differentiates the duplictes and that is the number in column number 4 - the number of reviews. Since the data entry with highest number of ratings will be latest and so most accurate, all other duplicates will be deleted.  \n\nTo do this, I will:\n\n- Create a dictionary where each key is a unique app name, and the value is the highest number of reviews of that app\n\n- Use the dictionary to create a new data set, which will have only one entry per app (and we only select the apps with the highest number of reviews)\n","e67a6878":"For the google play market, we have data about the number of installs and so should be able to get a clearer picture about genre popularity. However, the install numbers don't seem precise enough \u2014 we can see that most values are open-ended (100+, 1,000+, 5,000+, etc.):","98858e45":"We can see that this works but there are some english apps that contain characters out of the range such as emojis and trade mark characters. We don't want to lose these apps by incorrectly labelling them non-english. \n\nWe have to accept a trade-off between minimising data loss but also deleting apps that are definitely non-english. For this, we will only delete apps if the app name contains more than 3 letters that fall outside the range of 0-127. This function is far from perfect but still fairly effective. ","3b2d0d07":"Reference apps have 74,942 user ratings on average, but it's actually the Bible and Dictionary.com which skew up the average rating:","b666a0e2":"However, this niche seems to show some potential. One thing we could do is take another popular book and turn it into an app where we could add different features besides the raw version of the book.\n\nThis idea seems to fit well with the fact that the App Store is dominated by for-fun apps. This suggests the market might be a bit saturated with for-fun apps, which means a practical app might have more of a chance to stand out among the huge number of apps on the App Store.\n\nOther genres that seem popular include weather, book, food and drink, or finance. The book genre seem to overlap a bit with the app idea we described above, but the other genres don't seem too interesting to us:\n\nWeather apps \u2014 people generally don't spend too much time in-app, and the chances of making profit from in-app adds are low. Also, getting reliable live weather data may require us to connect our apps to non-free APIs.\n\nFood and drink \u2014 examples here include Starbucks, Dunkin' Donuts, McDonald's, etc. So making a popular food and drink app requires actual cooking and a delivery service, which is outside the scope of our company.\n\nFinance apps \u2014 these apps involve banking, paying bills, money transfer, etc. Building a finance app requires domain knowledge, and we don't want to hire a finance expert just to build an app.","5d97c0b2":"As of September 2018, there were approximately 2 million iOS apps available on the App Store, and 2.1 million Android apps on Google Play. Since data about 4 million apps is hard to collect, 2 datasets have been identified that are suitable for the goals of this project. They provide a sample of the data. One dataset contains data about approximately 10,000 Android apps from Google Play and the other one containing data about approximately 7,000 iOS apps from the App Store. Data was collected on Aug 2018 and Jul 2017 respectivelty. \n\n","34c766f5":"The overall aim here is to determine the kinds of apps that are likely to attract more users because our revenue is highly influenced by the number of people using our apps.\n\nTo minimize risks and overhead, our validation strategy for an app idea is comprised of three steps:\n\n- Build a minimal Android version of the app, and add it to Google Play.\n- If the app has a good response from users, we develop it further.\n- If the app is profitable after six months, we build an iOS version of the app and add it to the App Store.\n\nBecause our end goal is to add the app on both Google Play and the App Store, we need to find app profiles that are successful on both markets. For instance, a profile that works well for both markets might be a productivity app that makes use of gamification.\n\nLet's begin the analysis by getting a sense of what are the most common genres for each market. For this, we'll need to build frequency tables for a few columns in our data sets.","bde8f2c2":"## Most common apps by genre","640e57ab":"The same pattern applies to social networking apps, where the average number is heavily influenced by a few giants like Facebook, Pinterest, Skype, etc. Same applies to music apps, where a few big players like Pandora, Spotify, and Shazam heavily influence the average number.\n\nOur aim is to find popular genres, but navigation, social networking or music apps might seem more popular than they really are. The average number of ratings seem to be skewed by very few apps which have hundreds of thousands of user ratings, while the other apps may struggle to get past the 10,000 threshold. We could get a better picture by removing these extremely popular apps for each genre and then rework the averages, but we'll leave this level of detail for later."}}