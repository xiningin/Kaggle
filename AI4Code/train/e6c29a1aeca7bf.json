{"cell_type":{"7c3bd2c4":"code","fbf5bedd":"code","bcb20db0":"code","965edbc9":"code","061a1fe9":"code","042b7a7b":"code","a8a8768f":"code","1e946a7a":"code","5b6730e0":"code","cb67e260":"code","cd285b23":"code","30a1bc7e":"code","7179293a":"code","8777bc14":"code","556af720":"code","f6e9b437":"markdown","473cfd3e":"markdown","9bfa571b":"markdown","579b463f":"markdown"},"source":{"7c3bd2c4":"import os\nimport glob\n\nimport pydicom\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\nfrom matplotlib import patches as patches\n\nimport pandas as pd\nimport numpy as np\n\nimport sys\nsys.path.insert(0, '..\/input')\nfrom mask_functions import rle2mask","fbf5bedd":"ls '..\/input\/sample images\/'","bcb20db0":"IMAGE_PATH = '..\/input\/sample images\/'\nIMAGE_MEDIA_TYPE = '.dcm'\nIMAGE_SIZE = 1024","965edbc9":"train_rle_sample = pd.read_csv(IMAGE_PATH + 'train-rle-sample.csv', header=None, index_col=0)\ntrain_rle_sample.head(10).reset_index()","061a1fe9":"def bounding_box(img):\n    rows = np.any(img, axis=1)\n    cols = np.any(img, axis=0)\n    rmin, rmax = np.where(rows)[0][[0, -1]]\n    cmin, cmax = np.where(cols)[0][[0, -1]]\n\n    return rmin, rmax, cmin, cmax\n\ndef show_dcm_info(dataset, image_name):\n    print(\"Image............:\", image_name)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n    print(\"View Position.......:\", dataset.ViewPosition)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)\n\ndef plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \ndef plot_with_mask_and_bbox(dataset, mask_encoded, figsize=(20,10)):\n    mask_decoded = rle2mask(mask_encoded, 1024, 1024).T\n    fig, ax = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(20,10))\n    rmin, rmax, cmin, cmax = bounding_box(mask_decoded)\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[0].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[0].imshow(mask_decoded, alpha=0.3, cmap=\"Reds\")\n    ax[0].add_patch(patch)\n    ax[0].set_title('With Mask')\n\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[1].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[1].add_patch(patch)\n    ax[1].set_title('Without Mask')\n    plt.show()\n\ndef show_image(image_name):\n    dataset = pydicom.dcmread(IMAGE_PATH + image_name + IMAGE_MEDIA_TYPE)\n    show_dcm_info(dataset, image_name)\n    \n    mask_encoded = train_rle_sample.loc[image_name].values[0]\n    if mask_encoded == '-1':    \n        plot_pixel_array(dataset)\n    else:\n        plot_with_mask_and_bbox(dataset, mask_encoded)","042b7a7b":"show_image('1.2.276.0.7230010.3.1.4.8323329.1000.1517875165.878027')","a8a8768f":"show_image('1.2.276.0.7230010.3.1.4.8323329.10000.1517875220.938530')","1e946a7a":"show_image('1.2.276.0.7230010.3.1.4.8323329.10001.1517875220.930580')","5b6730e0":"show_image('1.2.276.0.7230010.3.1.4.8323329.10002.1517875220.939397')","cb67e260":"show_image('1.2.276.0.7230010.3.1.4.8323329.10003.1517875220.942420')","cd285b23":"show_image('1.2.276.0.7230010.3.1.4.8323329.4904.1517875185.355709')","30a1bc7e":"show_image('1.2.276.0.7230010.3.1.4.8323329.1314.1517875167.222290')","7179293a":"show_image('1.2.276.0.7230010.3.1.4.8323329.4440.1517875182.865105')","8777bc14":"show_image('1.2.276.0.7230010.3.1.4.8323329.4982.1517875185.837576')","556af720":"show_image('1.2.276.0.7230010.3.1.4.8323329.12743.1517875241.599591')","f6e9b437":"Let's see the first five images - without pneumothorax.","473cfd3e":"The first five images are clean, the last five images have pneumothorax.","9bfa571b":"Many thanks to Jasper and her kernel hier: https:\/\/www.kaggle.com\/jesperdramsch\/intro-to-dicom-chest-xrays-data-viz-and-unets\nTaking a look at her kernel is worth the while. This kernel is based on Jasper's kernel with the goal to visualize all 10 images.\nI was wandering if un untrained eye can see the Pneumothorax on these sample images. I can honestly say, I can't see anything. Can you? Please leave a comment :) ","579b463f":"Not let's take a look at the images with Pneumothorax..."}}