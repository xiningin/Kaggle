{"cell_type":{"c56bdfac":"code","ffcaca73":"code","815c9192":"code","5cec93d6":"code","25a96593":"code","54520e76":"code","1b4dcd28":"code","3bc97418":"code","82dff4d4":"code","210ecedb":"code","d54d747f":"markdown","c93d2eb0":"markdown","754f1789":"markdown","ddf30931":"markdown","5ece1cf0":"markdown"},"source":{"c56bdfac":"import numpy as np \nimport pandas as pd \n\n# graphics\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# modeling\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import XGBClassifier\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ffcaca73":"mushroom = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","815c9192":"mushroom.describe()","5cec93d6":"mushroom.info()","25a96593":"mushroom.isnull().sum()","54520e76":"# count classes\n\nplt.figure(figsize=(6,6))\nsns.countplot(data=mushroom, x='class')\nplt.title('classes', size=19)\nplt.show()","1b4dcd28":"col = list(mushroom.columns)\n\nfor var in col:\n    print(mushroom[var].value_counts())\n    print('\\n')","3bc97418":"mush = mushroom.copy()\n\n# base X and y\ny = mush.iloc[:,0]\nX = mush.iloc[:,1:]\n\n# encode y\nle = LabelEncoder()\nle = le.fit(y)\nle_y = le.transform(y)\n\n# print encoded class for Edible and Poisonous\na = le.classes_\nb = le.transform(le.classes_)\n\nprint('encoded class:', dict(zip(a,b)))\nprint('\\n')\n\n# encode X\nfeatures = []\n\nfor i in range(0, X.shape[1]):\n    le = LabelEncoder()\n    feature = le.fit_transform(X.iloc[:,i])\n    features.append(feature)\n\nle_X = np.array(features)\nle_X = pd.DataFrame(le_X.T)\n\nx_train, x_test, y_train, y_test = train_test_split(le_X, le_y, test_size = 0.3, random_state=10)\n\nprint('x_train:', x_train.shape)\nprint('x_test:', x_test.shape)\nprint('y_train:', y_train.shape)\nprint('y_test:', y_test.shape)","82dff4d4":"model = XGBClassifier()\nmodel.fit(x_train, y_train)","210ecedb":"pred = model.predict(x_test)\naccuracy_score(y_test, pred)","d54d747f":"# Mushroom classification using XGBoost","c93d2eb0":"## Fit XGBClassifier","754f1789":"## Feature Engineering\n\n* Use LabelEncoder on all categorical variables","ddf30931":"# Evaluate the model","5ece1cf0":"## Import libraries"}}