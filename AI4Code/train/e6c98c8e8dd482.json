{"cell_type":{"185defa9":"code","1c6939fa":"code","a5b26326":"code","751f7cff":"code","6902ccad":"code","65237ea1":"code","6c696bd4":"code","9fe5b935":"code","bf55563f":"code","81c699bd":"code","28c6cfbf":"code","d19b9d8c":"code","676e12c0":"code","59e08870":"code","e3f7ce11":"code","322c1475":"code","d38b55e8":"code","be38c8ea":"code","5617e091":"code","00029870":"code","530b5ed1":"code","4dacd2f5":"code","2086ca53":"code","17c32d89":"code","de2edc96":"code","9bc46ebf":"code","70d4c01c":"code","4369d3c8":"code","60410691":"code","77879d90":"code","04273551":"code","2d053979":"code","7abc5496":"code","8ae8b2c7":"code","0f0d41cd":"code","8f87cae2":"code","0bdcba72":"code","62915b6d":"markdown","d00985f8":"markdown","879dd6e9":"markdown","85d4fd13":"markdown","c6dc0f61":"markdown","9f8dc953":"markdown","2cc9b248":"markdown","38953857":"markdown","fcc6faf2":"markdown","3c32de88":"markdown","b257be06":"markdown"},"source":{"185defa9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('chained_assignment',None)\n\n# Any results you write to the current directory are saved as output.","1c6939fa":"data = pd.read_csv(\"..\/input\/amazon_alexa.tsv\", sep='\\t')\nprint(\"Shape of Dataframe is {}\".format(data.shape))","a5b26326":"data.isnull().sum()","751f7cff":"data.head()","6902ccad":"test = data.copy(deep=True)\ntest.loc[test['feedback'] == 1, 'feedback'] = 'Positive'\ntest.loc[test['feedback'] == 0, 'feedback'] = 'Negative'","65237ea1":"plt.figure(figsize=(12, 7))\nsns.scatterplot(x=\"rating\", y=\"rating\", hue=\"feedback\",data=test)\nplt.title(\"Relation between Rating and Overall Feedback\");","6c696bd4":"fig, axs = plt.subplots(1, 2, figsize=(24, 10))\n\ndata.feedback.value_counts().plot.barh(ax=axs[0])\naxs[0].set_title((\"Class Distribution - Feedback {1 (positive) & 0 (negative)}\"));\n\ndata.rating.value_counts().plot.barh(ax=axs[1])\naxs[1].set_title(\"Class Distribution - Ratings\");","9fe5b935":"data.variation.value_counts().plot.barh(figsize=(12, 7))\nplt.title(\"Class Distribution - Variation\");","bf55563f":"data.groupby('variation').mean()[['rating']].plot.barh(figsize=(12, 7))\nplt.title(\"Variation wise Mean Ratings\");","81c699bd":"data['review_length'] = data.verified_reviews.str.len()","28c6cfbf":"pd.DataFrame(data.review_length.describe()).T","d19b9d8c":"data['review_length'].plot.hist(bins=200, figsize=(16, 7))\nplt.title(\"Histogram of Review Lengths\");","676e12c0":"data.groupby('rating').mean()[['review_length']].plot.barh(figsize=(12, 7))\nplt.title(\"Mean Length of Reviews - Grouped by Ratings\");","59e08870":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(stop_words='english')","e3f7ce11":"cv.fit_transform(data.verified_reviews);","322c1475":"vector = cv.fit_transform(data.verified_reviews)","d38b55e8":"sum_words = vector.sum(axis=0)","be38c8ea":"words_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)","5617e091":"freq_df = pd.DataFrame(words_freq, columns=['word', 'freq'])","00029870":"freq_df.head(15).plot(x='word', y='freq', kind='barh', figsize=(20, 12))\nplt.title(\"Most Frequently Occuring Words - Top 15\");","530b5ed1":"from wordcloud import WordCloud\nwordcloud = WordCloud(background_color='white',width=800, height=500).generate_from_frequencies(dict(words_freq))\nplt.figure(figsize=(10,8))\nplt.imshow(wordcloud)\nplt.title(\"WordCloud - Vocabulary from Reviews\", fontsize=22);","4dacd2f5":"features = pd.DataFrame(vector.toarray(), columns=list(sorted(cv.vocabulary_)))","2086ca53":"features = features.join(data[['review_length', 'variation']], rsuffix='_base')\nfeatures = pd.get_dummies(features)","17c32d89":"target = data[['feedback']].astype(int)","de2edc96":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","9bc46ebf":"x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2)","70d4c01c":"model = RandomForestClassifier()","4369d3c8":"params = {\n    'bootstrap': [True],\n    'max_depth': [80, 100],\n    'min_samples_split': [8, 12],\n    'n_estimators': [100, 300]\n}","60410691":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\ncv_object = StratifiedKFold(n_splits=5)\n\ngrid = GridSearchCV(estimator=model, param_grid=params, cv=cv_object, verbose=0, return_train_score=True)\ngrid.fit(x_train, y_train.values.ravel())","77879d90":"pd.crosstab(y_train['feedback'], grid.predict(x_train), rownames=['True'], colnames=['Predicted'], margins=True)","04273551":"print(\"Best Parameter Combination : {}\".format(grid.best_params_))","2d053979":"print(\"Mean Cross Validation Accuracy - Train Set : {}\".format(grid.cv_results_['mean_train_score'].mean()*100))\nprint(\"=\"*70)\nprint(\"Mean Cross Validation Accuracy - Validation Set : {}\".format(grid.cv_results_['mean_test_score'].mean()*100))","7abc5496":"feature_imp_df = pd.DataFrame([grid.best_estimator_.feature_importances_], columns=list(x_train.columns)).T\nfeature_imp_df.columns = ['imp']\nfeature_imp_df.sort_values('imp', ascending=False, inplace=True)","8ae8b2c7":"feature_imp_df.head(15).plot.barh(figsize=(16, 9))\nplt.title(\"15 Most Important Features\");","0f0d41cd":"y_test['pred'] = grid.predict(x_test)","8f87cae2":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy Score for Test Set : {}\".format(accuracy_score(y_test.feedback, y_test.pred)*100))","0bdcba72":"pd.crosstab(y_test['feedback'], grid.predict(x_test), rownames=['True'], colnames=['Predicted'], margins=True)","62915b6d":"> * We have a highly positive skewed distribution here in both cases, and these products have been pretty well received by the customers !\n> * Gentle Reminder : Make sure to stratify the data, to avoid class imbalance for review classification models","d00985f8":"> * We have distinct bins here, showing pattern of customer preference for various models, with Black Dot as the most popular one","879dd6e9":"# About the Data\nThis dataset consists of a nearly 3000 Amazon customer reviews (input text), star ratings, date of review, variant and feedback of various amazon Alexa products like Alexa Echo, Echo dots, Alexa Firesticks etc. for learning how to train Machine for sentiment analysis.\n\n![image.png](attachment:image.png)","85d4fd13":"> * No obvious patterns here, all the variations of the product have been equally well received","c6dc0f61":"### Features : \n>> * Vectorized Review words\n>> * Review Lengths\n>> * Product Variation\n\n### Model Config\n>> * RandomForest Classifier - Grid Search with 5 Cross Validation","9f8dc953":"> * For feedback to be positive (1), rating >= 3","2cc9b248":"> * Rating 2 : Customers tend to describe the flaws  in detail and it's natural to be vocal about something you didn't find good. \n> * Rating 5 : I guess we'll have broadly two kinds of reviews here;  people who actually describe the positives in about 100 words or so, and the ones who comment \"Awesome\", \"Loved it !\" etc. ","38953857":"> * Summary Stats reveal the overall skew in review length distribution\n> * Histogram below will confirm our findings ","fcc6faf2":"> * Review Length seems to be driving the predictions with the highest feature importance\n> * We can also see significant words like 'terrible', 'stopped', 'love' etc in the top 15. Overall pretty decent feature selection.","3c32de88":"## Classifier - Predict Feedback","b257be06":"## EDA & Visualizations"}}