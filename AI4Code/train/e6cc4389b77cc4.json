{"cell_type":{"f923219c":"code","03bc345e":"code","5c48b692":"code","9d5cd045":"code","50bc8e48":"code","47d9697d":"code","4ad2e156":"code","a71d26da":"code","f09f89e6":"code","0903b7bd":"code","e96c9a9c":"code","3b74f916":"code","e9674bce":"code","f42f49f5":"code","3cc4200c":"code","c446d8f8":"code","5c8ac6a3":"code","7f655618":"code","48d4ff89":"code","3a271770":"code","7129052c":"code","785842a5":"code","9a041b18":"code","f0133005":"code","6ec5f2f0":"code","e512fd79":"code","15d6bab4":"code","71b3c836":"code","7309d718":"code","d9a4c176":"code","9a2e4b20":"code","a49ab1bd":"code","275dc0ab":"code","4c18507c":"code","1e3f91ba":"markdown","b236d3ec":"markdown","d0e3a91d":"markdown"},"source":{"f923219c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport shap\nimport matplotlib.pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import cross_validate, train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom itertools import repeat, chain\nrevert_dict = lambda d: dict(chain(*[zip(val, repeat(key)) for key, val in d.items()]))\n        \n%matplotlib inline\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03bc345e":"def grouped_shap(shap_vals, features, groups):\n    groupmap = revert_dict(groups)\n    shap_Tdf = pd.DataFrame(shap_vals, columns=pd.Index(features, name='features')).T\n    shap_Tdf['group'] = shap_Tdf.reset_index().features.map(groupmap).values\n    shap_grouped = shap_Tdf.groupby('group').sum().T\n    return shap_grouped","5c48b692":"data=pd.read_csv('\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\nplt.figure(figsize=(10,4))\ndata.Date.value_counts(True).sort_index().cumsum().plot();","9d5cd045":"features = data.drop(['Date', 'RainTomorrow'], axis=1).columns.tolist()\ncat_features = data[features].select_dtypes('object').columns.tolist()\ndata['target'] = (data['RainTomorrow']=='Yes').astype(int)\n\ntrain = data.query(\"Date < '2015-01-01'\").dropna(subset=['RainTomorrow'])\ntest  = data.query(\"Date > '2015-01-01'\").dropna(subset=['RainTomorrow'])\n\nclf = CatBoostClassifier(iterations=30)\nclf.fit(train[features].fillna(-99), train['target'], cat_features=cat_features, verbose=False)\n\ntrain_auc = roc_auc_score(train['target'], clf.predict_proba(train[features].fillna(-99))[:,1])\ntest_auc  = roc_auc_score(test['target'],  clf.predict_proba(test[features].fillna(-99))[:,1] )\nprint(\"Train AUC: \", train_auc)\nprint(\"Out-of-time AUC: \", test_auc)","50bc8e48":"from shap import TreeExplainer\nexp = TreeExplainer(clf)\n\nshap_vals = exp.shap_values(test[features].fillna(-99))\nshap_df = pd.DataFrame(shap_vals, columns=pd.Index(features, name='features'))\nshap.summary_plot(shap_vals, test[features])","47d9697d":"preds = pd.Series(clf.predict_proba(test[features].fillna(-99))[:,1])\nquintiles = pd.qcut(preds, np.linspace(0,1,5), labels=np.arange(4))\n\nfig, ax = plt.subplots(1,4, figsize=(36, 6))\nfor q in range(4):\n    plt.sca(ax[q])\n    shap.summary_plot(shap_vals[(quintiles==q).values], \n                      test.loc[(quintiles==q).values, features], \n                      show=False, \n                      plot_size=None, \n                      color_bar=False,\n                      max_display=10)\n    plt.title(f\"Quartile {q+1} of predictions\")","4ad2e156":"years = [2015,2016,2017]\nyear = test.Date.apply(lambda s: s.split('-')[0]).astype(int)\nfig, ax = plt.subplots(1,3, figsize=(28, 6))\nfor i, b in enumerate(years):\n    plt.sca(ax[i])\n    idx = (year==b).values\n    shap.summary_plot(shap_vals[idx], \n                      test.loc[idx, features], \n                      show=False, \n                      plot_size=None, \n                      color_bar=False, max_display=10)\n    plt.title(f\"Year {b}\")","a71d26da":"rained_flag = (test.MinTemp > 25).values\nrained_shap = shap_df[rained_flag]\nrained_feats = test.loc[rained_flag, features]\n\nshap.summary_plot(rained_shap.values, rained_feats, show=False, max_display=10)\nplt.title(\"Shap for hot days (minTemp > 25 Celsius) \")","f09f89e6":"rained_flag = (test.MaxTemp < 10).values\nrained_shap = shap_df[rained_flag]\nrained_feats = test.loc[rained_flag, features]\n\nshap.summary_plot(rained_shap.values, rained_feats, show=False, max_display=10)\nplt.title(\"Shap for cold days (maxTemp < 10 Celsius)\")","0903b7bd":"flag = shap_df.Pressure3pm.apply(lambda v: v < -0.5).values\nshap_selected = shap_df[flag]\nfeats_selected = test.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","e96c9a9c":"flag = shap_df.Pressure3pm.apply(lambda v: v < -0.5).values * (test.target==1).values\nshap_selected = shap_df[flag]\nfeats_selected = test.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","3b74f916":"flag = shap_df.Humidity3pm.apply(lambda v: v > -0.1 and v < 0.1).values\nshap_selected = shap_df[flag]\nfeats_selected = test.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","e9674bce":"cas = pd.read_csv(\"\/kaggle\/input\/dft-accident-data\/Casualties0515.csv\",  delimiter=',', error_bad_lines=False, warn_bad_lines=False)\nveh = pd.read_csv(\"\/kaggle\/input\/dft-accident-data\/Vehicles0515.csv\",  delimiter=',', error_bad_lines=False, warn_bad_lines=False)\nacc = pd.read_csv(\"\/kaggle\/input\/dft-accident-data\/Accidents0515.csv\", delimiter=',', error_bad_lines=False, warn_bad_lines=False)\ncas['Accident_Index'] = cas['Accident_Index'].astype(str)+'g'\nveh['Accident_Index'] = veh['Accident_Index'].astype(str)+'g'\nacc['Accident_Index'] = acc['Accident_Index'].astype(str)+'g'\ncas = cas.set_index('Accident_Index')\nveh = veh.set_index('Accident_Index')\nacc = acc.set_index('Accident_Index')","f42f49f5":"joined = (acc\n.join(cas, on=[\"Accident_Index\"], how='inner', rsuffix='cas')\n.join(veh, on=[\"Accident_Index\"], how='inner', rsuffix='veh'))\n\nobj_cols = joined.select_dtypes('object').columns.tolist()\nfeatures = joined.columns.drop(['Vehicle_Referenceveh', 'Casualty_Severity', 'Accident_Severity']+obj_cols).tolist()\nfeatures =[f for f in features if f!= 'target']\njoined['target'] = (joined.Casualty_Severity<3).astype(int)\njoined['Date'] = pd.to_datetime(joined.Date)","3cc4200c":"train = joined.query(\"Date < '2012-01-01'\").dropna(subset=['target'])\ntest  = joined.query(\"Date > '2012-01-01'\").dropna(subset=['target'])\ntest['month'] = test.Date.dt.year.astype(str) + '-' + test.Date.dt.month.apply(lambda i: '%02d'%i)\n\nclf = CatBoostClassifier(iterations=30)\nclf.fit(train[features].fillna(-99), train['target'], verbose=False)\n\ntrain_auc = roc_auc_score(train['target'], clf.predict_proba(train[features].fillna(-99))[:,1])\ntest_auc  = roc_auc_score(test['target'],  clf.predict_proba(test[features].fillna(-99))[:,1] )\nprint(\"Train AUC: \", train_auc)\nprint(\"Out-of-time AUC: \", test_auc)","c446d8f8":"from shap import TreeExplainer\nexp = TreeExplainer(clf)\ntest_shap = test.sample(10000)\n\nshap_vals = exp.shap_values(test_shap[features].fillna(-99))\nshap_df = pd.DataFrame(shap_vals, columns=pd.Index(features, name='features'))\nshap.summary_plot(shap_vals, test_shap[features])","5c8ac6a3":"preds = pd.Series(clf.predict_proba(test_shap[features].fillna(-99))[:,1])\nquintiles = pd.qcut(preds, np.linspace(0,1,6), labels=np.arange(5))\n\nfig, ax = plt.subplots(1,5, figsize=(42, 5))\nfor q in range(5):\n    plt.sca(ax[q])\n    shap.summary_plot(shap_vals[(quintiles==q).values], \n                      test_shap.loc[(quintiles==q).values, features].values, \n                      [f[:18] for f in features],\n                      show=False, \n                      plot_size=None, \n                      color_bar=False,\n                      max_display=10)\n    plt.title(f\"Quintile {q+1} of predictions\")","7f655618":"flag = (test_shap.Casualty_Type==0).values\nshap_selected = shap_df[flag]\nfeats_selected = test_shap.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","48d4ff89":"flag = (test_shap.Casualty_Type==11).values\nshap_selected = shap_df[flag]\nfeats_selected = test_shap.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","3a271770":"flag = (test_shap.Casualty_Type==5).values\nshap_selected = shap_df[flag]\nfeats_selected = test_shap.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","7129052c":"plt.figure(dpi=150)\navg_motorcycle = shap_df.loc[(test_shap.Casualty_Type==5).values, features].mean()\navg_pedestrian = shap_df.loc[(test_shap.Casualty_Type==0).values, features].mean()\ndiff = (avg_motorcycle - avg_pedestrian)\ndiff[diff.abs().sort_values().index.drop('Casualty_Type').tolist()[-15:]].plot.barh(ax=plt.gca())\nplt.xlabel(\"More important for pedestrians | More important for motorcycle\")\nplt.xlim(-.17,.17)\nplt.hlines(np.arange(15)\/\/2*2+1, -.17,.17, alpha=.06, linewidth=13, color='b')\nsns.despine(left=True)\nplt.ylabel('')","785842a5":"flag = (shap_df.Number_of_Casualties>0.5).values\nshap_selected = shap_df[flag]\nfeats_selected = test_shap.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","9a041b18":"flag = (shap_df.Vehicle_Manoeuvre>0.3).values\nshap_selected = shap_df[flag]\nfeats_selected = test_shap.loc[flag, features]\n\nshap.summary_plot(shap_selected.values, feats_selected, show=False, max_display=10)","f0133005":"test['prediction'] = clf.predict_proba(test[features].fillna(-99))[:,1]","6ec5f2f0":"plt.figure(dpi=120)\ntest.groupby('month').prediction.mean().sort_index().plot(label='predicted deaths', color='r')\n# test.groupby('month').target.mean().sort_index().plot(label='true', color='k', linestyle='--')\nplt.legend(frameon=False)\nsns.despine()\nplt.gca().spines['left'].set_bounds(0.105, 0.135)\nplt.gca().spines['bottom'].set_bounds(0,35)\nplt.xticks(rotation=15)","e512fd79":"plt.figure(dpi=120)\nax=plt.gca()\ntest.groupby('month').prediction.mean().sort_index().plot(label='predicted deaths', color='r')\ntest.groupby('month').target.mean().sort_index().plot(label='deaths', color='k', linestyle='--', linewidth=.6)\nratio = (test.groupby('month').prediction.mean().sort_index()\/test.groupby('month').target.mean().sort_index())*100\nplt.legend(frameon=False, loc='upper left')\nax.spines['left'].set_bounds(0.105, 0.135)\nax.spines['bottom'].set_bounds(0,35)\n\ntax=plt.gca().twinx()\nratio.plot(ax=tax, label='ratio')\ntax.set_yticks([int(ratio.min()), 100, int(ratio.max())])\ntax.hlines([int(ratio.min()), 100, int(ratio.max())], 0, 35, linewidth=0.5, linestyles='dotted')\ntax.set_ylim(50, 120)\nplt.legend(frameon=False)\n\nsns.despine(right=False)\n\ntax.spines['right'].set_bounds(int(ratio.min()), int(ratio.max()))\nax.spines['right'].set_bounds(50,50)\ntax.spines['left'].set_bounds(100,100)\ntax.spines['bottom'].set_bounds(0,35)\n\nplt.xticks(rotation=15)","15d6bab4":"test.groupby('month').prediction.mean().sort_index()","71b3c836":"bef = shap_df[(test_shap[\"month\"] == '2013-04').values].mean()\nat = shap_df[(test_shap[\"month\"] == '2013-05').values].mean()\n\ndiff = at - bef","7309d718":"plt.figure(dpi=150)\ndiff[diff.abs().sort_values().index.drop('Casualty_Type').tolist()[-15:]].plot.barh(ax=plt.gca())\nplt.xlabel(\"Lesser risk at event | Higher risk at event\")\nplt.xlim(-.17,.17)\nplt.hlines(np.arange(15)\/\/2*2+1, -.17,.17, alpha=.06, linewidth=13, color='b')\nsns.despine(left=True)\nplt.ylabel('')","d9a4c176":"test.query(\"month == '2013-05'\").Number_of_Casualties.plot.hist()","9a2e4b20":"test.query(\"month == '2013-05' and Number_of_Casualties>50\")","a49ab1bd":"test_changed = test.copy()\ncas = test_changed.query(\"month == '2013-04'\").Number_of_Casualties.mean()\nveh = test_changed.query(\"month == '2013-04'\").Number_of_Vehicles.mean()\ntest_changed['Number_of_Casualties'] = test_changed.apply(lambda row: cas if row.month=='2013-05' else row.Number_of_Casualties, axis=1)\ntest_changed['Number_of_Vehicles'] = test_changed.apply(lambda row: veh if row.month=='2013-05' else row.Number_of_Vehicles, axis=1)","275dc0ab":"test_changed['prediction'] = clf.predict_proba(test_changed[features].fillna(-99))[:,1]","4c18507c":"plt.figure(dpi=120)\ntest_changed.groupby('month').prediction.mean().sort_index().plot(label='predicted deaths after fixing variables', color='purple')\ntest.groupby('month').prediction.mean().sort_index().plot(label='predicted deaths', color='r', linestyle='--', linewidth=.9)\n# test.groupby('month').target.mean().sort_index().plot(label='true', color='k', linestyle='--')\nplt.legend(frameon=False, loc='upper left')\nsns.despine()\nplt.gca().spines['left'].set_bounds(0.105, 0.135)\nplt.gca().spines['bottom'].set_bounds(0,35)\nplt.xticks(rotation=15);","1e3f91ba":"## Subpopulations","b236d3ec":"# Rain in australia","d0e3a91d":"# UK Accidents"}}