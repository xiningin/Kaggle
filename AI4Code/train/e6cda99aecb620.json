{"cell_type":{"96d0fb06":"code","1a4c2876":"code","97052e59":"code","d17aabff":"code","ae7cb265":"code","17da86c1":"code","c530c501":"code","ed02e6c2":"code","49422de2":"code","4b4f35e7":"code","47d161b2":"code","6927e6f5":"code","c20e7657":"code","03ef13ba":"code","eefe9e73":"code","942aea2a":"code","70a6f0ab":"code","c79269a7":"code","839fbc9e":"code","9c2835dd":"code","6e7f1a72":"code","6e4b457b":"code","3d8e819b":"code","158bcb36":"code","6bf6e57e":"code","10767b47":"code","69db8058":"code","59a7ae5c":"code","6d1ff66f":"markdown"},"source":{"96d0fb06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a4c2876":"df=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndf.head()\n","97052e59":"df.info()","d17aabff":"df.sex[df.target==1].value_counts()","ae7cb265":"pd.crosstab(df.target,df.sex)","17da86c1":"df.corr()","c530c501":"cor_mat=df.corr()\nfig,ax=plt.subplots(figsize=(15,10))\nsns.heatmap(cor_mat,annot=True,linewidths=0.5,fmt=\".3f\")\n","ed02e6c2":"df.isna().sum()","49422de2":"X=df.drop(\"target\",axis=1)\nY=df.target\n","4b4f35e7":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0,test_size=0.2)\n","47d161b2":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Scaling features\nscaler = MinMaxScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","6927e6f5":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train, Y_train)\nknn_predicted = knn.predict(X_test)\n\n\n\nknn_acc_score = accuracy_score(Y_test, knn_predicted)\nrcl=recall_score(Y_test,knn_predicted)\nf1=f1_score(Y_test,knn_predicted)\nauc_score=roc_auc_score(Y_test,knn_predicted)\nprec_score=precision_score(Y_test,knn_predicted)\n\n\n\nprint(\"\\n\")\nprint(\"Acc of K-NeighborsClassifier:\",knn_acc_score*100,'\\n')\nprint(\"rcl of K-NeighborsClassifier:\",rcl*100,'\\n')\nprint(\"f1 of K-NeighborsClassifier:\",f1*100,'\\n')\nprint(\"auc_score of K-NeighborsClassifier:\",auc_score*100,'\\n')\nprint(\"prec_score of K-NeighborsClassifier:\",prec_score*100,'\\n')\n\n","c20e7657":"\nprint(\"confussion matrix\")\nknn_conf_matrix = confusion_matrix(Y_test, knn_predicted)\nsns.heatmap(confusion_matrix(Y_test, knn_predicted), annot= True, cmap='YlGnBu',fmt = 'g')\nprint(classification_report(Y_test,knn_predicted))","03ef13ba":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ncp = pd.get_dummies(df['cp'], prefix = \"cp\", drop_first=True)\nthal = pd.get_dummies(df['thal'], prefix = \"thal\" , drop_first=True)\nslope = pd.get_dummies(df['slope'], prefix = \"slope\", drop_first=True)\nnew_data = pd.concat([data, cp, thal, slope], axis=1)\nnew_data.head()\n","eefe9e73":"XX=new_data.drop(\"target\",axis=1)\nYY=new_data.target","942aea2a":"from sklearn.model_selection import train_test_split\nX_train2,X_test2,Y_train2,Y_test2=train_test_split(XX,YY,random_state=0,test_size=0.2)","70a6f0ab":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Scaling features\nscaler = MinMaxScaler()\nscaler.fit(X_train2)\n\nX_train2 = scaler.transform(X_train2)\nX_test2 = scaler.transform(X_test2)\n","c79269a7":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train2, Y_train2)\nknn_predicted2 = knn.predict(X_test2)\n\n\n\nknn_acc_score = accuracy_score(Y_test2, knn_predicted2)\nrcl=recall_score(Y_test2,knn_predicted2)\nf1=f1_score(Y_test2,knn_predicted)\nauc_score=roc_auc_score(Y_test2,knn_predicted2)\nprec_score=precision_score(Y_test2,knn_predicted2)\n\n\n\nprint(\"\\n\")\nprint(\"Acc of K-NeighborsClassifier:\",knn_acc_score*100,'\\n')\nprint(\"rcl of K-NeighborsClassifier:\",rcl*100,'\\n')\nprint(\"f1 of K-NeighborsClassifier:\",f1*100,'\\n')\nprint(\"auc_score of K-NeighborsClassifier:\",auc_score*100,'\\n')\nprint(\"prec_score of K-NeighborsClassifier:\",prec_score*100,'\\n')","839fbc9e":"dc=pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndc.head()","9c2835dd":"dc.info()","6e7f1a72":"dc.isna().sum()","6e4b457b":"dc.drop(['id', 'Unnamed: 32'], axis=1, inplace=True)","3d8e819b":"dc.head()","158bcb36":"from sklearn.preprocessing import LabelEncoder\n\nlb = LabelEncoder() \ndc['diagnosis'] = lb.fit_transform(dc['diagnosis'])\ndc","6bf6e57e":"Xc=dc.drop(\"diagnosis\",axis=1)\nYc=dc.diagnosis","10767b47":"X_train,X_test,Y_train,Y_test=train_test_split(Xc,Yc,random_state=0,test_size=0.2)","69db8058":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Scaling features\nscaler = MinMaxScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","59a7ae5c":"from sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train, Y_train)\nknn_predicted = knn.predict(X_test)\n\n\n\nknn_acc_score = accuracy_score(Y_test, knn_predicted)\nrcl=recall_score(Y_test,knn_predicted)\nf1=f1_score(Y_test,knn_predicted)\nauc_score=roc_auc_score(Y_test,knn_predicted)\nprec_score=precision_score(Y_test,knn_predicted)\n\n\n\nprint(\"\\n\")\nprint(\"Acc of K-NeighborsClassifier:\",knn_acc_score*100,'\\n')\nprint(\"rcl of K-NeighborsClassifier:\",rcl*100,'\\n')\nprint(\"f1 of K-NeighborsClassifier:\",f1*100,'\\n')\nprint(\"auc_score of K-NeighborsClassifier:\",auc_score*100,'\\n')\nprint(\"prec_score of K-NeighborsClassifier:\",prec_score*100,'\\n')","6d1ff66f":"**Encoding Categorical Data**"}}