{"cell_type":{"97e16742":"code","77a79da4":"code","abc425d1":"code","fb9dc930":"code","99dd6dcd":"code","8f6d0db9":"code","4cd301ad":"code","51331a0b":"code","af08f48f":"code","4a2affe4":"code","3a4230b0":"code","32044b0c":"code","85e08213":"code","dd7d173c":"code","4eb844d5":"code","1778277b":"code","7088b215":"code","a1f75f83":"code","bfb899e1":"code","6fceddd1":"code","c81a820f":"code","7aeaa17e":"code","9f967753":"code","a522baab":"code","d484e47e":"code","50762ecb":"code","a38168d0":"code","a3be5f2c":"code","8376257f":"code","05ce4747":"code","19b336ee":"code","10be2856":"code","324ff33e":"code","494bd299":"code","78699d87":"code","9f74de2b":"code","07f28929":"code","32f91d17":"code","ba33fc08":"code","ae19bb8f":"code","4a861386":"code","65c2a80b":"code","3b93ffc7":"code","a0652795":"code","dda757c2":"code","8bbf414b":"code","0367e09b":"code","bc2f2f92":"code","e29b44c0":"code","d1addaf0":"code","11f36200":"code","4cb80622":"markdown","72f72988":"markdown","ae415d1c":"markdown","c108fd3f":"markdown","77bd5eb3":"markdown","791e8e77":"markdown","9f0ed8d9":"markdown","7a7c14e3":"markdown","6005bb38":"markdown","894cbe49":"markdown","83542126":"markdown","a17dd533":"markdown","91a72e07":"markdown","c6e05032":"markdown","d23e0bf5":"markdown","0a0b3157":"markdown","a331a74c":"markdown","33e90a37":"markdown","a8d73c2e":"markdown","58c4c019":"markdown","66c57476":"markdown","61511390":"markdown","7b2ea73c":"markdown","9e21f277":"markdown","adfceb55":"markdown","465a859e":"markdown","47a69889":"markdown"},"source":{"97e16742":"import numpy as np\nimport pandas as pd\n#set the pandas display format so it will not use scientific notation\npd.set_option('display.float_format', lambda x: '%.3f' % x)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n","77a79da4":"raw_data = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\nraw_data.head()","abc425d1":"raw_data['date'] = raw_data['date'].str.replace('T000000', '')\nraw_data['date'] = raw_data['date'].astype(float)\n","fb9dc930":"raw_data","99dd6dcd":"raw_data.isnull().sum()","8f6d0db9":"raw_data.duplicated().sum()","4cd301ad":"#Since the dataset contained no missing values or duplicated values, i change the dataset to data with no missing values.\ndata_no_mv = raw_data","51331a0b":"data_no_mv.describe()","af08f48f":"sns.distplot(data_no_mv['price'])","4a2affe4":"#using the .quantile method I the 1% of data from \"price\" variable to handle outliers and achieve a normal distrubtion for optimal regression results\nz = data_no_mv['price'].quantile(0.99)\ndata_1 = data_no_mv[data_no_mv['price']<z]\n","3a4230b0":"sns.distplot(data_1['price'])","32044b0c":"sns.distplot(data_1['bedrooms'])","85e08213":"bedrms = pd.DataFrame(raw_data['bedrooms'])\nbedrms = bedrms.dropna(axis=0)","dd7d173c":"bedrms.sort_values(by='bedrooms')","4eb844d5":"data_2 = data_1[data_1['bedrooms']<8]","1778277b":"sns.distplot(data_2['bedrooms'])","7088b215":"sns.distplot(data_2['sqft_lot'])","a1f75f83":"z = data_2['sqft_lot'].quantile(0.95)\ndata_3 = data_2[data_2['sqft_lot']<z]","bfb899e1":"sns.distplot(data_3['sqft_lot'])","6fceddd1":"sns.distplot(data_3['sqft_above'])","c81a820f":"z = data_3['sqft_above'].quantile(0.99)\ndata_4 = data_3[data_3['sqft_above']<z]","7aeaa17e":"sns.distplot(data_4['sqft_above'])","9f967753":"data_cleaned = data_3.reset_index(drop=True)","a522baab":"data_cleaned.describe()","d484e47e":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['bedrooms'],data_cleaned['price'])\nax1.set_title('price and bedrooms')\n\nax2.scatter(data_cleaned['sqft_living'],data_cleaned['price'])\nax2.set_title('price and sqft_living')\n\nax3.scatter(data_cleaned['yr_built'],data_cleaned['price'])\nax3.set_title('price and yr_built')\n\n\nplt.show()","50762ecb":"f, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['grade'],data_cleaned['price'])\nax1.set_title('price and grade')\n\nax2.scatter(data_cleaned['sqft_lot'],data_cleaned['price'])\nax2.set_title('price and sqft_lot')\n\nax3.scatter(data_cleaned['condition'],data_cleaned['price'])\nax3.set_title('price and condition')\n\n\nax4.scatter(data_cleaned['sqft_above'],data_cleaned['price'])\nax4.set_title('price and sqft_above')\n\nplt.show()","a38168d0":"log_price = np.log(data_cleaned['price'])\ndata_cleaned['Log_price'] = log_price\n","a3be5f2c":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['bedrooms'],data_cleaned['Log_price'])\nax1.set_title('price and bedrooms')\n\nax2.scatter(data_cleaned['sqft_living'],data_cleaned['Log_price'])\nax2.set_title('price and sqft_living')\n\nax3.scatter(data_cleaned['yr_built'],data_cleaned['Log_price'])\nax3.set_title('price and yr_built')\n\n\nplt.show()","8376257f":"f, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, sharey=True, figsize =(15,3))\nax1.scatter(data_cleaned['grade'],data_cleaned['Log_price'])\nax1.set_title('price and grade')\n\nax2.scatter(data_cleaned['sqft_lot'],data_cleaned['Log_price'])\nax2.set_title('price and sqft_lot')\n\nax3.scatter(data_cleaned['condition'],data_cleaned['Log_price'])\nax3.set_title('price and condition')\n\n\nax4.scatter(data_cleaned['sqft_above'],data_cleaned['Log_price'])\nax4.set_title('price and sqft_above')\n\nplt.show()","05ce4747":"data_cleaned = data_cleaned.drop(['price'], axis=1)\ndata_cleaned","19b336ee":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = data_cleaned\nvif = pd.DataFrame()\nvif[\"VIF\"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif[\"features\"] = variables.columns","10be2856":"vif","324ff33e":"#Converting data_cleaned variable to data_pre_process since the preprocessing was done\ndata_pre_proc = data_cleaned","494bd299":"inputs = data_pre_proc.drop(['Log_price'],axis=1)","78699d87":"targets = data_pre_proc['Log_price']","9f74de2b":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(inputs)","07f28929":"x_scaled = scaler.transform(inputs)","32f91d17":"x_scaled","ba33fc08":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_scaled,targets,test_size= 0.20,random_state=9)","ae19bb8f":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x_train,y_train)","4a861386":"reg.get_params()\n","65c2a80b":"y_hat = reg.predict(x_train)\ny_hat","3b93ffc7":"plt.scatter(y_train ,y_hat, alpha=0.2)\nplt.xlabel('Targets (Y_train)', size=15)\nplt.ylabel('Predictions  (Y_hat)', size=15)\nplt.xlim(11,15)\nplt.ylim(11,15)\nplt.title('Actual vs Predicted')\n","a0652795":"## Residual shows difference and mean between the targets and predictions \nsns.distplot(y_train - y_hat)\nplt.show","dda757c2":"reg.score(x_train,y_train)","8bbf414b":"reg_summary = pd.DataFrame(inputs.columns.values, columns=['Features'])\nreg_summary['weights'] = reg.coef_\nreg_summary","0367e09b":"y_hat_test = reg.predict(x_test)","bc2f2f92":"plt.scatter(y_test ,y_hat_test, alpha=0.2)\nplt.xlabel('Targets (Y_train)', size=15)\nplt.ylabel('Predictions  (Y_hat_test)', size=15)\nplt.xlim(11.5,15)\nplt.ylim(11.5,15)\nplt.title('Targets ''Y_train'' vs Predicted')\n","e29b44c0":"predv =pd.DataFrame(np.exp(y_hat_test), columns=['Predictions'])\npredv['Target'] = np.exp(y_test)\ny_test = y_test.reset_index(drop=True)","d1addaf0":"predv['Residual'] = predv['Target'] - predv['Predictions']","11f36200":"predv['Difference%'] = np.absolute(predv['Residual']\/predv['Target']*100)\npredv","4cb80622":"\n## Variables Overview <a id=\"cell1\"><\/a>\n\n**id** - Unique ID for each home sold\n\n**date** - Date of the home sale\n\n**price** - Price of each home sold\n\n**bedrooms** - Number of bedrooms\n\n**bathrooms** - Number of bathrooms, where .5 accounts for a room with a toilet but no shower\n\n**sqft_living** - Square footage of the apartments interior living space\n\n**sqft_lot** - Square footage of the land space\n\n**floors** - Number of floors\n\n**waterfront** - A dummy variable for whether the apartment was overlooking the waterfront or not\n\n**view** - An index from 0 to 4 of how good the view of the property was\n\n**condition** - An index from 1 to 5 on the condition of the apartment,\n\n**grade** - An index from 1 to 13, where 1-3 falls short of building construction and design, 7 has an average level of construction and design, and 11-13 have a high quality level of construction and design.\n\n**sqft_above** - The square footage of the interior housing space that is above ground level\n\n**sqft_basement** - The square footage of the interior housing space that is below ground level\n\n**yr_built** - The year the house was initially built\n\n**yr_renovated** - The year of the house\u2019s last renovation\n\n**zipcode** - What zipcode area the house is in\n\n**lat** - Lattitude\n\n**long** - Longitude\n\n**sqft_living15** - The square footage of interior housing living space for the nearest 15 neighbors\n\n**sqft_lot15** - The square footage of the land lots of the nearest 15 neighbors\n\n","72f72988":"## Checking Results<a id=\"cell7\"><\/a>\n\n### Scatter plot \n\nPlotting predicted values against the observed values to check the results","ae415d1c":"## Introduction\n\nIn this notebook I load and preprocess a dataset, containing house sale observations for King County, and Seattle  to train and test a multivariate log linear regregession to predict house prices. The king County dataset,was collected between May 2014 and May 2015 and Contains 21613 rows \u00d7 21 columns\n","c108fd3f":"### Checking Of Least Squared (OLS) Assumptions\nI use a scatter plot to plot possible predictors against \"price\" to check for linearity using the of least squared assumptions ","77bd5eb3":"### Checking for multicolinarity\nTo check the Multicolinarity assumption i import Variance_ inflation from stats model, None of the features break this assumption","791e8e77":"### Actual Value Predicted Value Differences chart\nThe Linear Regression model's final test is to test how good the predictions hold up to the actual data. For this, i use the NumPy method to transform the variables back to their original form. Create a prediction column using the x_test predicated data. I then take y_test and target columns by transforming the data using NumPy.exp and reset the index. I finish it off by visualizing a new dataset with new columns containing predictions, target residuals, differences in percentage to show this model's efficiency.","9f0ed8d9":" ### Train_Test_Split data \nSetting a 80\/20 split, splitting the training data into 80 and the test data to 20 with a random state of 9","7a7c14e3":"### Dealing with missing values\nisnull().sum() is used on the dataset to find all the null values and return it.","6005bb38":"using the .quantile method I use 95% of observations from \"sqft_lot\" variable to handle outliers and achieve a normal distribution for optimal regression results","894cbe49":"### Check for duplicate values \nTo check for duplicated values, i use the .duplicated function ad .sum to return the value of duplicated values","83542126":"## Linear Regression Model<a id=\"cell6\"><\/a>\n\n### Declaring depedent and indepedent Variable\nDeclaring independent and dependent variables, for independent(x) log_price was dropped since it's the dependent variable.","a17dd533":"### Exploring PDF(Probility Distribution Functions) Of features\nI take the data with no missing values and plot the PDF for variables with weird-looking descriptive values for further observation. I am looking for outliers in the features and good distribution. Outliers are observations that lay away from the vast majority of observations and can throw off the model's predictive ability. A great way to remove outliers is to eliminate a percentile or filter the data.\n        \n        ","91a72e07":"## Importing Relevant libraries<a id=\"cell2\"><\/a>\nI import pandas for data manipulation and analysis, matplotlib to visualize data in charts and graphs and seaborn for optimal visualization. I also changed the panda's display format so it will not show scientific notation when visualizing data.\n","c6e05032":"### Fitting model\nFitting the Linear regression module with training data and checking results by creating a scatter plot and plotting the predicted values against the observed values. I also create a Residual PDF using the difference between targets and predictions to visualize the error estimate.","d23e0bf5":"### Index reset \nI reset the index of the data and drop it into data_cleaned variable ","0a0b3157":"In the distribution, i noticed outliers that range from up to 35. I isolate the bedrooms feature to visualize the column.\nAfter a search of king county and Seattle houses in Zillow, i find they do not pass 20, so i remove all entries with more than 16 since after 16, it seemed not many places were available ","a331a74c":"using the .quantile method I use 99% of observations from \"sqft_above\" variable to handle outliers and achieve a normal distribution for optimal regression results","33e90a37":"## Table of Content \n    \n   \n   1. [Variables Overview](#cell1)\n   2. [Importaing relevant libraries](#cell2)\n   3. [importing dataset](#cell4)\n   4. [preprocessing dataset](#cell5)\n       - Dealing with missing values\n       - Check for duplicate values\n       - Exploring The descriptive statistics of the variables\n       - Exploring PDF(Probility Distribution Functions)\n       - Checking Of Least Squared (OLS) Assumptions\n       - Relaxing OLS assumptions(log Transformation)\n       - Relaxing assumptions\n       - checking for multicolinarity\n   5. [Linear Regression Model](#cell6)\n        - Declaring depedent and indepedent Variable\n        - Scaling data\n        - Train_Test_Split data\n        - fitting model\n   6. [Checking Results of Linear Regression model](#cell7)\n        - Scatter Plot (y_trained vs Predicted X_train)\n        - residual PDf\n        - R^2 score\n        - features and weights\n   7. [Testing](#cell8)\n         - Scatter Plot(y_test vs Predicted X_test)\n         - Actual Value,Predicted Value and Differences chart\n    \n    \n   ","a8d73c2e":"### Residual PDf","58c4c019":"### Exploring The Descriptive statistics of the variables \nUsing the pandas .describe() function to pull the statistacial values of the features in the dataset. A couple of things to take note of when obsererving the chart is huge differnces in Max, mean and the percentales. First thing I notice in respect to the statistical data is the Max of price amounting to 7700000.00 while under 75% price payed is 450000.000 with a mean of 540088.142.","66c57476":"### Scaling data\nImporting and using the standard scaler function from sklearn to scale the indepedent variables , so that all the features hold a standard weight towards the depedent variable.","61511390":"### R^2 score\nThe R2 score being 76% signifies response variable variation that the linear Regression Model explains","7b2ea73c":"## Importing Dataset<a id=\"cell4\"><\/a>\nI use the panadas method to read the csv and load it into the raw_data and visualize the first five rows and columns of the dataset; noticing 'date' had extra characters, I strip the extra letters.","9e21f277":"## Preprocessing<a id=\"cell5\"><\/a>\nWith the dataset successfully loaded, I move on to Preprocessing the dataset. ","adfceb55":"### features and weights\nChecking how much weight each feature has into predicting the price. While positive weight increases, so do price. If it is decreased, so is the price. Values are standardized. Could be used for feature selection","465a859e":"### Relaxing  assumptions\nUsng .np.log to transfrom 'price' to 'Log_price' to create better linearty against other variables and drop price. Log returns the natural logarithm of a number and relaxs assumptions fro better model fit.","47a69889":"## Testing<a id=\"cell8\"><\/a>\nPlotting the predicted and testing data in a scatter plot to show efficency of model predictions, \n\n### Scatter Plot(Trained vs Predicted X_test)"}}