{"cell_type":{"11cc77cd":"code","21481a8c":"code","af7c5c1b":"code","90edf187":"code","78c3124e":"code","216d6be3":"code","2dccd1fa":"code","49fba625":"code","6b3f46a7":"code","008a2c68":"code","89c46713":"code","5b3526b9":"code","c95097b7":"code","97076d67":"code","90ecfd38":"code","72ce59de":"code","7e139480":"code","2fc7788a":"code","83a1edd9":"code","214fd498":"code","99932d7a":"code","0460eea0":"code","28e32096":"code","ed681eb9":"code","276d503a":"code","9bf1e41e":"code","93292661":"code","08c2cdb7":"code","a4b28a9a":"code","5032c458":"markdown","29c18d5d":"markdown","dc1340bd":"markdown","2c4aeadb":"markdown","dc72046c":"markdown","75ee39a8":"markdown","ac265c37":"markdown","26da4558":"markdown","764e4a1c":"markdown","1e52201a":"markdown","f8ae2776":"markdown","deca6649":"markdown","394f219d":"markdown","fc19ee99":"markdown"},"source":{"11cc77cd":"import warnings\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks as cf\nimport plotly.graph_objs as go\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom wordcloud import WordCloud, ImageColorGenerator\n\nplt.style.use('ggplot')\n\n\n\nplt.rcParams['figure.figsize'] = (15,15)\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\n%matplotlib inline","21481a8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af7c5c1b":"food_df = pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')","90edf187":"food_df.head(5)","78c3124e":"food_df.groupby(by='state').mean()","216d6be3":"def split_labels(series):\n    series = series.split(\",\")\n    if \"Unknown\" in series:\n      series.remove(\"Unknown\")\n    return series\n\nfood_df['ingredients'] = food_df['ingredients'].map(split_labels)","2dccd1fa":"sns.displot(food_df, x = 'diet', shrink=0.8)\n","49fba625":"spec_del = np.where( (food_df['region'] == '-1') | (food_df['region'].isna()))\nregions_cleaned_df= food_df.drop(spec_del[0])\n","6b3f46a7":"figure = plt.figure(figsize=(8,8))\n\nax = figure.add_axes([0,0,0.9,0.9])\n\nsns.histplot(regions_cleaned_df, x='region', hue = 'diet', shrink=0.8, multiple='dodge',ax=ax)\nax.set_title('Diet Distribution By Region');","008a2c68":"figure = plt.figure(figsize=(12,8))\n\nax = figure.add_axes([0,0,0.9,0.9])\nsns.histplot(food_df, x= 'state', shrink=0.8, hue='diet',multiple='dodge', ax= ax)\nax.set_title('Diet Type per State')\nax.set_xlabel('State')\nax.set_xticklabels(labels=list(food_df['state'].unique()), rotation=60);","89c46713":"spec_time_del = np.where((food_df['prep_time'] == -1) | (food_df['cook_time'] == -1))","5b3526b9":"time_cleaned_df = food_df.drop(spec_time_del[0])","c95097b7":"time_cleaned_df['total_time'] = (time_cleaned_df['prep_time'] +time_cleaned_df['cook_time'])\/60","97076d67":"cat = sns.catplot(x='state', y='total_time', data=time_cleaned_df,ax=ax,height=10, jitter=False)\nplt.xticks(rotation=60);","90ecfd38":"profile_spec_delete = np.where((food_df['flavor_profile'] == '-1'))\nfalvor_profile_cleaned = food_df.drop(profile_spec_delete[0])","72ce59de":"profile_counts = []\n\nfor profile in falvor_profile_cleaned['flavor_profile'].unique():\n    \n    count = (falvor_profile_cleaned[falvor_profile_cleaned['flavor_profile'] == profile].shape[0]*100)\/falvor_profile_cleaned.shape[0]\n    profile_counts.append(count)\n\n\npie,ax = plt.subplots(figsize=(8,8))\nlabels = falvor_profile_cleaned['flavor_profile'].unique()\npatches, text = plt.pie(x=profile_counts,explode=[0.05]*4, labels=labels,pctdistance=0.5)\n\nlegend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(labels, profile_counts)]\n\nplt.title(\"Flavor Profile\", fontsize=14);\nplt.legend(patches, legend_labels, bbox_to_anchor=(-0.1, 1.), fontsize=8, loc =1)","7e139480":"food_df['course'].unique()","2fc7788a":"course_counts = []\n\nfor profile in food_df['course'].unique():\n    \n    count = (food_df[food_df['course'] == profile].shape[0]*100)\/food_df.shape[0]\n    course_counts.append(count)\n\n\npie,ax = plt.subplots(figsize=(8,8))\nlabels = food_df['course'].unique()\npatches, text = plt.pie(x=course_counts,explode=[0.05]*4, labels=labels,pctdistance=0.5)\n\nlegend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(labels, course_counts)]\n\nplt.title(\"Flavor Profile\", fontsize=14);\nplt.legend(patches, legend_labels, bbox_to_anchor=(-0.1, 1.), fontsize=8, loc =1)","83a1edd9":"states = list(food_df['state'].value_counts().keys())\ncounts = list(food_df['state'].value_counts().values)","214fd498":"data = dict(type = 'choropleth',\n            geojson=\"https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson\",\n            featureidkey = 'properties.ST_NM',\n            locationmode='geojson-id',\n            locations=states,\n            z = counts,            \n            \n            autocolorscale = False,\n            colorscale= 'purples',\n            marker_line_color = 'rgb(255,255,255)',\n            \n            colorbar = dict (\n                title={'text': \"Sweets Counts\"},\n                thickness=15,\n                len=0.35,\n                bgcolor='rgba(255,255,255,0.6)',\n\n                tick0=0,\n                dtick=20000,\n\n                xanchor='left',\n                x=0.01,\n                yanchor='bottom',\n                y=0.05            \n            )\n           )","99932d7a":"layout = dict(\n            title=dict(\n                text='Sweets Distribution By State',\n                xanchor='center',\n                x=0.5,\n                yref='paper',\n                yanchor='bottom',\n                y=1,\n                pad={'b':10}\n            ),\n            \n            geo= {\n                'visible': False,\n                'projection': dict(\n                    type = 'conic conformal',\n                    parallels=[12.472944444, 35.172805555556],\n                    rotation = {'lat':24,'lon':80}, \n                ),\n                'lonaxis': {'range':[68,98]},\n                'lataxis': {'range':[6,38]}\n            },\n            \n            margin={'r':0,'t':30,'l':0, 'b':0},\n            height=550,\n            width=550    \n)","0460eea0":"choromap = go.Figure(data=[data], layout=layout)","28e32096":"iplot(choromap,show_link = False)","ed681eb9":"ingredients_string = ''\n\nfor i in food_df['ingredients']:\n    ingredients_string += ' '.join(item.strip().replace(' ','-') for item in i)\n    ingredients_string+=' '\n\n","276d503a":"wordcloud = WordCloud(width = 400, height = 400, colormap = 'icefire'\n                      ,background_color ='black', \n                min_font_size = 8).generate(ingredients_string)                  \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis('off')\nplt.show()","9bf1e41e":"# This function takes a list of ingredients which may contain duplicate values and returns a \n# dictionary with keys as ingredients and values as the number of dishes in which this\n# ingredient is used\n\ndef get_ingredients_dict(ingredients):\n    \n    ingredient_dictionary = dict()\n    \n    for ingredient in ingredients:\n        if ingredient in ingredient_dictionary:\n            ingredient_dictionary[ingredient]+=1\n        else:\n            ingredient_dictionary[ingredient] = 1\n    return ingredient_dictionary","93292661":"state_ingredients_dict = dict()\n\nfor state, count in zip(states,counts):\n    \n    if count >= 10 and state != '-1':\n        \n        ingredients_string = ''\n       \n        state_ingredients_df = food_df[food_df['state'] == state]\n        \n        for i in state_ingredients_df['ingredients']:\n            ingredients_string += ':'.join(item.strip().replace(' ','-') for item in i)            \n            state_ingredients_dict[state] = get_ingredients_dict(ingredients_string.split(':'))","08c2cdb7":"state_ingredients_dict.keys()","a4b28a9a":"NROW=3\nNCOL=3\nfig , axes = plt.subplots(nrows=NROW,ncols=NROW, figsize=(12,12))\n\nx_axis,y_axis = 0,0\n\nfor state in state_ingredients_dict.keys():\n    \n    d = state_ingredients_dict[state]\n    \n    \n    index = 0\n    top_used_ingredients = dict()\n    top_used_ingredients['ingredient'] = []\n    top_used_ingredients['count'] = []\n    for ingredient in sorted(d, key=d.get, reverse=True):\n        if index > 5:\n            break\n        else: \n            top_used_ingredients['ingredient'].append(ingredient)\n            top_used_ingredients['count'].append(d[ingredient])\n        index+=1\n    \n    \n    \n    \n    temp = pd.DataFrame.from_dict(top_used_ingredients)\n        \n    \n    sns.barplot(x='ingredient', y='count',ax=axes[x_axis,y_axis],data=temp)\n    axes[x_axis,y_axis].set_title(state);\n    axes[x_axis,y_axis].set_xlabel('Ingredient')\n    axes[x_axis,y_axis].set_ylabel('Count of Ingredient Used')\n    axes[x_axis,y_axis].set_xticklabels(labels=temp['ingredient'],rotation=60)\n    \n        \n    y_axis+=1\n    \n    if(y_axis==NCOL):\n        y_axis = 0\n        x_axis+=1\nplt.tight_layout()","5032c458":"<a id=\"one\"><\/a>\n# Distribution of Vegetarian and Non Vegetarian Foods","29c18d5d":"<a id=\"seven\"><\/a>\n# Lets take a look at ingredients involved","dc1340bd":"Most of the Non-vegetarian food items in the dataset come from North East States.","2c4aeadb":"We do have data duplication issue here. Maybe sanitize typos ","dc72046c":"<a id=\"five\"><\/a>\n# Course Distribution","75ee39a8":"**It makes no sense to find most used ingredients for a state which has only 2 dishes, so lets only focus on states which contributed to this dataset by applying a threshold. Maybe >= 10 ?**","ac265c37":"**Table of contents**\n\n- [Distribution of Vegetarian and Non Vegetarian Foods](#one)\n- [Distribution of Diet by Region](#two)\n- [Food Preparation and Cooking Time Analysis](#three)\n- [Flavor profile distribution](#four)\n- [Course Distribution](#five)\n- [Geographical representation of state-wise distribution of sweets in India](#six)\n- [Look at ingredients involved](#seven)\n- [Most used ingredients by state](#eight)\n","26da4558":"<a id=\"four\"><\/a>\n# Flavor profile distribution","764e4a1c":"<a id=\"two\"><\/a>\n# Distribution of Diet by Region","1e52201a":"<a id=\"six\"><\/a>\n# Geographical representation of state-wise distribution of sweets in India","f8ae2776":"<a id=\"eight\"><\/a>\n# Most used ingredients by state","deca6649":"Not a lot of Non-Vegetarian items. Lets add conditioning on region.","394f219d":"[**Pipeline**](https:\/\/github.com\/SaiKrishna1908\/ML-Checklist\/blob\/main\/Pipeline.md)","fc19ee99":"<a id=\"three\"><\/a>\n# Food Preparation and Cooking Time Analysis"}}