{"cell_type":{"9eee30da":"code","16167a66":"code","a3e2c19f":"code","39663850":"code","354e7f74":"code","90cd2fc4":"code","5db64597":"code","cac43f80":"code","0591e1b1":"code","ce7bd9cc":"code","9937ba49":"code","674e8be0":"code","1bb3370a":"code","31d4be70":"code","c376d407":"code","107eb36b":"code","47f26c5c":"code","3b1097b2":"code","732c8678":"code","61e23c69":"code","1a476e85":"markdown","b95b36bd":"markdown","2c2985cc":"markdown","3f8d33d1":"markdown","4d21753c":"markdown","956a37c7":"markdown","b6ce6f89":"markdown","0c45a9ee":"markdown","7d844c12":"markdown"},"source":{"9eee30da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16167a66":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf","a3e2c19f":"#read train\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nprint(train.shape)\ntrain.head()","39663850":"#read test\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(test.shape)\ntest.head()","354e7f74":"Y_train = train[\"label\"]\n\nX_train = train.drop(labels = [\"label\"],axis = 1)","90cd2fc4":"plt.figure(figsize = (15,7))\nsns.countplot(Y_train, palette= \"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()\n","5db64597":"#plot some samples\nimg = X_train.iloc[0].values\nimg = img.reshape((28,28))\nplt.imshow(img, cmap = \"gray\")\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","cac43f80":"img = X_train.iloc[11].values\nimg = img.reshape((28,28))\nplt.imshow(img, cmap = \"gray\")\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","0591e1b1":"#normalization\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train_shape: \", X_train.shape)\nprint(\"test shape: \", test.shape)","ce7bd9cc":"#Reshape\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)\nprint(\"x_train shape : \", X_train.shape)\nprint(\"test shape: \", test.shape)","9937ba49":"#label encoding\nfrom keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 10)","674e8be0":"#Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 2)\nprint(\"x_train shape\", X_train.shape)\nprint(\"x_val shape\", X_val.shape)\nprint(\"y_train shape\", Y_train.shape)\nprint(\"y_val shape\", Y_val.shape)","1bb3370a":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\n# Convolution_1\nmodel.add(\n    Conv2D(\n        filters = 8,\n        kernel_size = (3,3),\n        padding = 'Same',\n        activation ='relu',\n        input_shape = (28,28,1)))\n\n\nmodel.add(\n    MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Dropout(0.25))\n\n# Convolution_2\nmodel.add(Conv2D(\n    filters = 16,\n    kernel_size = (3,3),\n    padding = 'Same', \n    activation ='relu'))\n\nmodel.add(Conv2D(\n    filters = 16,\n    kernel_size = (3,3),\n    padding = 'Same', \n    activation ='relu'))\n\nmodel.add(\n    MaxPool2D(\n        pool_size=(2,2),\n        strides=(2,2)))\n \nmodel.add(Dropout(0.25))\n\n# Convolution_3\nmodel.add(Conv2D(\n    filters = 64,\n    kernel_size = (3,3),\n    padding = 'Same', \n    activation ='relu'))\n\nmodel.add(\n    MaxPool2D(\n        pool_size=(2,2),\n        strides=(2,2)))\n \nmodel.add(Dropout(0.25))\n\n# fully connected\n\nmodel.add(Flatten())  \nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation = \"softmax\"))\n","31d4be70":"optimizer = Adam(lr =0.001, beta_1 = 0.9, beta_2 = 0.999)","c376d407":"model.compile(optimizer = optimizer, loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","107eb36b":"epochs = 10\nbatch_size = 250","47f26c5c":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","3b1097b2":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","732c8678":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","61e23c69":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","1a476e85":"# Create Model","b95b36bd":"# Define Optimizer","2c2985cc":"# Epochs and Batch Size","3f8d33d1":"# Loading the Data Set","4d21753c":"# Train Test Split","956a37c7":"# Compile Model","b6ce6f89":"# Normalization, Reshape and Label Encoding","0c45a9ee":"# Fit the model","7d844c12":"# Data Augmentation"}}