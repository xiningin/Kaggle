{"cell_type":{"a0c70f94":"code","f4c94abb":"code","397f636c":"code","0927c5f9":"code","63115dac":"code","808c4fab":"code","d33ccd6b":"code","20a98717":"code","d88444a5":"code","12ff73bd":"code","81197013":"code","5385419a":"code","8811a1f9":"code","38e6feb7":"code","9c5e01bc":"code","a5d1e979":"code","8920bcf5":"code","29219532":"markdown","3798b655":"markdown","6ccfbdaa":"markdown","56bc6c13":"markdown","2db17fa2":"markdown","8043e207":"markdown","66b7d5a9":"markdown","167f2c9a":"markdown","08a72768":"markdown","a2b8d0eb":"markdown"},"source":{"a0c70f94":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f4c94abb":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\n\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline \nmatplotlib.rcParams['figure.figsize'] = (12,8)\nprint('DONE')","397f636c":"from sklearn import preprocessing \nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nprint('DONE')","0927c5f9":"train = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\",index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\",index_col=0)\nprint('DONE')","63115dac":"df = train","808c4fab":"df.info()","d33ccd6b":"df.hist(figsize=(30,25),bins=10,edgecolor='black',color='lightblue')\n","20a98717":"num_data = df.select_dtypes(exclude=['object']) \nobject_data = df.select_dtypes(include=['object']) ","d88444a5":"c = num_data.corr(method='pearson')\nsns.heatmap(c, annot= True)","12ff73bd":"\nlebel = preprocessing.LabelEncoder()\nfor i in range(object_data.shape[1]) :\n    object_data.iloc[:,i]= lebel.fit_transform(object_data.iloc[:,i])\nobject_data['target']=df['target']\n","81197013":"c = object_data.corr()\nsns.heatmap(c, annot= True)","5385419a":"x= train.drop(['target'],axis =1)\n\ny=train['target']\n\nx_train, x_valid, y_train, y_valid = train_test_split(x, y, train_size=0.8, test_size=0.2,random_state=0)\nprint('DONE')","8811a1f9":"x_train.head(10)","38e6feb7":"categorical_cols =[col for col in x_train.columns if 'cat' in col]\ncategorical_transformer = Pipeline(steps=[('onehotencoder', OneHotEncoder(handle_unknown='ignore'))])\npreprocessor_one = ColumnTransformer(transformers=[('cat1', categorical_transformer,categorical_cols)])\nprint('DONE')","9c5e01bc":"model = XGBRegressor(n_estimators=5000, learning_rate=0.1,\n                     n_jobs=5)\n\nmy_pipeline = Pipeline(steps=[('preprossor1',preprocessor_one),\n                                  ('model',model)])","a5d1e979":"my_pipeline.fit(x_train, y_train)\n\npreds_one = my_pipeline.predict(x_valid)\n\nprint('result', mean_squared_error(y_valid, preds_one, squared=False))","8920bcf5":"preds_test = my_pipeline.predict(test)\noutput= pd.DataFrame({'Id':test.index,'target':preds_test})\noutput.to_csv('submission.csv', index=False)","29219532":"# Building the model","3798b655":"#                        30 Days of ML Competition","6ccfbdaa":"# Description:","56bc6c13":"# PART TWO 'ML':","2db17fa2":"### Libraries For data Anaylsis :","8043e207":"### Libraries For ML","66b7d5a9":"# Importing the data :","167f2c9a":"### This notebook is devided to two parts, the first one is data analysis part and the second is Ml part.","08a72768":"## PART ONE 'THE ANALYSIS':","a2b8d0eb":"# Prepare the data (Split):"}}