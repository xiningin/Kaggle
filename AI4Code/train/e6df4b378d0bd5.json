{"cell_type":{"bbd5b6d8":"code","a4d0c8a1":"code","9762a3ef":"code","164b6565":"code","c7c2b1fb":"code","4494c383":"code","65d1dbe4":"code","cc5a7763":"markdown","9859a860":"markdown","16a95f58":"markdown","ca25898b":"markdown","e0f7d712":"markdown","aa2dc528":"markdown","d2055c52":"markdown"},"source":{"bbd5b6d8":"import os\nimport sys\nfrom PIL import Image\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nimport pytorch_lightning as pl\nfrom pytorch_lightning.metrics import Accuracy\nfrom pytorch_lightning import loggers\nfrom pytorch_lightning import seed_everything\nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.callbacks import LearningRateMonitor, ModelCheckpoint\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import model_selection\nimport albumentations as A\nimport timm\nfrom omegaconf import OmegaConf\n\nfrom sklearn.metrics import roc_auc_score","a4d0c8a1":"def get_score(y_true, y_pred):\n    try:\n        score = roc_auc_score(y_true, y_pred)\n    except:\n        score = 0.0\n    return score\n\ndef load_pytorch_model(ckpt_name, model, ignore_suffix='model'):\n    state_dict = torch.load(ckpt_name, map_location='cpu')[\"state_dict\"]\n    new_state_dict = {}\n    for k, v in state_dict.items():\n        name = k\n        if name.startswith(str(ignore_suffix)+\".\"):\n            name = name.replace(str(ignore_suffix)+\".\", \"\", 1)  # remove `model.`\n        new_state_dict[name] = v\n    model.load_state_dict(new_state_dict, strict=False)\n    return model","9762a3ef":"conf_dict = {'batch_size': 32,#32, \n             'epoch': 20,\n             'height': 512,#640,\n             'width': 512,\n             'model_name': 'tf_efficientnet_b5_ns',\n             'lr': 0.001,\n             'fold': 0,\n             'drop_rate': 0.4,\n             'drop_path_rate': 0.2,\n             'data_dir': '..\/input\/seti-breakthrough-listen',\n             'model_path': None,\n             'output_dir': '.\/',\n             'pseudo': None,\n             'seed': 2021,\n             'trainer': {}}\nconf_base = OmegaConf.create(conf_dict)","164b6565":"class SETIDataset(Dataset):\n    def __init__(self, df, transform=None, conf=None):\n        self.df = df.reset_index(drop=True)\n        self.labels = df['target'].values\n        self.dir_names = df['dir'].values\n        self.transform = transform\n        self.conf = conf\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        img_id = self.df.loc[idx, 'id']\n        file_path = os.path.join(self.dir_names[idx],\"{}\/{}.npy\".format(img_id[0], img_id))\n        \n        image = np.load(file_path)\n        image = image.astype(np.float32)\n        image = np.vstack(image).transpose((1, 0))\n        \n        img_pl = Image.fromarray(image).resize((self.conf.height, self.conf.width), resample=Image.BICUBIC)\n        image = np.array(img_pl)\n\n        if self.transform is not None:\n            image = self.transform(image=image)['image']\n        image = torch.from_numpy(image).unsqueeze(dim=0)\n\n        label = torch.tensor([self.labels[idx]]).float()\n        return image, label","c7c2b1fb":"class SETIDataModule(pl.LightningDataModule):\n\n    def __init__(self, conf):\n        super().__init__()\n        self.conf = conf  \n\n    # OPTIONAL, called only on 1 GPU\/machine(for download or tokenize)\n    def prepare_data(self):\n        pass\n\n    # OPTIONAL, called for every GPU\/machine\n    def setup(self, stage=None):\n        if stage == 'fit':\n            df = pd.read_csv(os.path.join(self.conf.data_dir, \"train_labels.csv\"))\n            df['dir'] = os.path.join(self.conf.data_dir, \"train\")\n            \n            # cv split\n            skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=self.conf.seed)\n            for n, (train_index, val_index) in enumerate(skf.split(df, df['target'])):\n                df.loc[val_index, 'fold'] = int(n)\n            df['fold'] = df['fold'].astype(int)\n            \n            train_df = df[df['fold'] != self.conf.fold]\n            valid_df = df[df['fold'] == self.conf.fold]\n\n            if self.conf.pseudo is not None:\n                pseudo_df = pd.read_csv(self.conf.pseudo)\n\n                pseudo_df['dir'] = os.path.join(self.conf.data_dir, \"test\")\n\n                train_df = pd.concat([train_df, pseudo_df])\n            \n            train_transform = A.Compose([\n                        A.VerticalFlip(p=0.5),\n                        A.Cutout(max_h_size=int(self.conf.height * 0.1), max_w_size=int(self.conf.width * 0.1), num_holes=5, p=0.5),\n                        ])\n\n            self.train_dataset = SETIDataset(train_df, transform=train_transform,conf=self.conf)\n            self.valid_dataset = SETIDataset(valid_df, transform=None, conf=self.conf)\n            \n        elif stage == 'test':\n            test_df = pd.read_csv(os.path.join(self.conf.data_dir, \"sample_submission.csv\"))\n            test_df['dir'] = os.path.join(self.conf.data_dir, \"test\")\n            test_transform = A.Compose([\n                        A.Resize(height=self.conf.height, width=self.conf.width, interpolation=1, always_apply=False, p=1.0),\n                        ])\n            self.test_dataset = SETIDataset(test_df, transform=test_transform, conf=self.conf)\n         \n    def train_dataloader(self):\n        return DataLoader(self.train_dataset, batch_size=self.conf.batch_size, num_workers=4, shuffle=True, pin_memory=True, drop_last=True)\n\n    def val_dataloader(self):\n        return DataLoader(self.valid_dataset, batch_size=self.conf.batch_size, num_workers=4, shuffle=False, pin_memory=True, drop_last=True)\n\n    def test_dataloader(self):\n        return DataLoader(self.test_dataset, batch_size=self.conf.batch_size, num_workers=4, shuffle=False, pin_memory=True, drop_last=False)\n        ","4494c383":"class LitSystem(pl.LightningModule):\n    def __init__(self, conf):\n        super().__init__()\n        #self.conf = conf\n        self.save_hyperparameters(conf)\n        self.model = timm.create_model(model_name=self.hparams.model_name, num_classes=1, pretrained=True, in_chans=1,\n                                       drop_rate=self.hparams.drop_rate, drop_path_rate=self.hparams.drop_path_rate)\n        if self.hparams.model_path is not None:\n            print(f'load model path: {self.hparams.model_path}')\n            self.model = load_pytorch_model(self.hparams.model_path, self.model, ignore_suffix='model')\n        self.criteria = torch.nn.BCEWithLogitsLoss()\n\n    def forward(self, x):\n        # use forward for inference\/predictions\n        return self.model(x)\n\n    def configure_optimizers(self):\n\n        optimizer = torch.optim.Adam(self.model.parameters(), lr=self.hparams.lr)\n\n        scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=self.hparams.epoch)\n        \n        return [optimizer], [scheduler]\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        \n        if self.current_epoch < self.hparams.epoch*0.8:\n            # mixup\n            alpha = 1.0\n            lam = np.random.beta(alpha, alpha)\n            batch_size = x.size()[0]\n            index = torch.randperm(batch_size)\n            x = lam * x + (1 - lam) * x[index, :]\n            #y = lam * y +  (1 - lam) * y[index]\n            y = y + y[index] - (y * y[index])\n        \n        y_hat = self.model(x)\n        loss = self.criteria(y_hat, y)\n        \n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        y_hat = self.model(x)\n        loss = self.criteria(y_hat, y)\n        \n        return {\n            \"val_loss\": loss,\n            \"y\": y,\n            \"y_hat\": y_hat\n            }\n    \n    def validation_epoch_end(self, outputs):\n        avg_val_loss = torch.stack([x[\"val_loss\"] for x in outputs]).mean()\n        y = torch.cat([x[\"y\"] for x in outputs]).cpu().detach().numpy()\n        y_hat = torch.cat([x[\"y_hat\"] for x in outputs]).cpu().detach().numpy()\n\n        #preds = np.argmax(y_hat, axis=1)\n\n        val_score = get_score(y, y_hat)\n\n        self.log('avg_val_loss', avg_val_loss)\n        self.log('val_score', val_score)\n","65d1dbe4":"\n####################\n# Train\n####################  \ndef main():\n    #conf_cli = OmegaConf.from_cli()\n    #conf = OmegaConf.merge(conf_base, conf_cli)\n    conf = conf_base\n    print(OmegaConf.to_yaml(conf))\n    seed_everything(conf.seed)\n\n    tb_logger = loggers.TensorBoardLogger(save_dir=os.path.join(conf.output_dir, 'tb_log\/'))\n    csv_logger = loggers.CSVLogger(save_dir=os.path.join(conf.output_dir, 'csv_log\/'))\n\n    lr_monitor = LearningRateMonitor(logging_interval='step')\n    checkpoint_callback = ModelCheckpoint(dirpath=os.path.join(conf.output_dir, 'ckpt\/'), monitor='val_score', \n                                          save_last=True, save_top_k=5, mode='max', \n                                          save_weights_only=True, filename=f'fold{conf.fold}-'+'{epoch}-{val_score:.5f}')\n\n    data_module = SETIDataModule(conf)\n\n    lit_model = LitSystem(conf)\n\n    trainer = Trainer(\n        logger=[tb_logger, csv_logger],\n        callbacks=[lr_monitor, checkpoint_callback],\n        max_epochs=conf.epoch,\n        gpus=-1,\n        amp_backend='native',\n        amp_level='O2',\n        precision=16,\n        num_sanity_val_steps=10,\n        val_check_interval=1.0,\n        **conf.trainer\n            )\n\n    trainer.fit(lit_model, data_module)\n\nif __name__ == \"__main__\":\n    main()\n","cc5a7763":"# Train","9859a860":"# Dataset","16a95f58":"# Config","ca25898b":"# Data Module","e0f7d712":"# Utils","aa2dc528":"# Lightning Module","d2055c52":"# Import Libraries"}}