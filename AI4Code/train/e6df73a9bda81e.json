{"cell_type":{"eba2b564":"code","24db1a49":"code","784f1b07":"code","53915162":"code","74190aa9":"code","7b0e745f":"code","ca94a601":"code","ad049e4e":"code","fff3f27a":"code","a47f3967":"code","58fd15c3":"code","c53dae74":"markdown","00592111":"markdown"},"source":{"eba2b564":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nprint(os.listdir('..\/input'))\n\n# Any results you write to the current directory are saved as output.","24db1a49":"data = pd.read_csv('..\/input\/uncover\/UNCOVER\/harvard_global_health_institute\/hospital-capacity-by-state-20-population-contracted.csv')\n","784f1b07":"data.head()","53915162":"time_list=[\"1992-03-08\", \"1992-04-12\"]\nprint(type(time_list[1]))#As you can see date is string, however we want it to be datatime object.\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","74190aa9":"data.head()","7b0e745f":"import warnings \nwarnings.filterwarnings(\"ignore\")\n#In order to practice lets take head of this data and add it a time list.\ndate2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\", \"1992-03-10\", \"1993-03-15\", \"1993-03-16\"]\ndatetime_object=pd.to_datetime(date_list)\ndate2[\"date\"] = datetime_object\n#make date as index\ndate2 = date2.set_index(\"date\")\ndate2","ca94a601":"#Now we can select according to our date index\nprint(date2.loc[\"1993-03-16\"])\nprint(date2.loc[\"1992-03-10\":\"1993-03-16\"])","ad049e4e":"#We will use data2 that we create at previous part.\ndate2.resample(\"A\").mean()","fff3f27a":"#Resample with month\ndate2.resample(\"M\").mean() #There are a lot of non values because date2 does not include all months.","a47f3967":"#We can interpolate from first value.\ndate2.resample(\"M\").first().interpolate(\"linear\")","58fd15c3":"#We can interpolate with mean()\ndate2.resample(\"M\").mean().interpolate(\"linear\")","c53dae74":"* datetime = object\n* parse_dates[boolean] = Transform date to ISO 801 (yy-mm-dd- hh:mm:ss) format\n    ","00592111":"# **RESAMPLING PANDAS TIME SERIES**\n**Resampling:** statistical method over different time intervals.\n   * Needs string to specify frequeny like \"M\"=month, \"A\"=year\n\n**Downsampling:** reduce datetime rows to slower frequency like from daily to weekly.\n\n**Upsampling:** increase datetime rows to faster frequency like from daily to hourly.\n\n**Interpolate:** Interpolate values according to different methods like \"linear\", \"time\" or \"index\"."}}