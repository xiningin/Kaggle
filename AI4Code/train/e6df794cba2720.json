{"cell_type":{"f8d31764":"code","9a7cbeac":"code","30d17f1e":"code","bf928c14":"code","8fed2d78":"code","f32ed586":"code","e509c3e5":"code","81efe214":"code","08bebbfe":"code","856eeffe":"code","73779a40":"code","501838ff":"code","61704849":"code","849d4d3d":"code","b1f63a84":"code","10f3379e":"code","31e47836":"markdown","b6932f93":"markdown","c5b906fa":"markdown","7be002ac":"markdown","cb6900e4":"markdown","9c11cad8":"markdown","d11f85c3":"markdown","7f50cfc3":"markdown","26139db1":"markdown","5d9739ba":"markdown","fd469676":"markdown","ab76dea1":"markdown","904e2fdf":"markdown","cfb49bc9":"markdown","2ca4f40f":"markdown","77f27b7d":"markdown"},"source":{"f8d31764":"import warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = 12, 10\nimport pandas as pd\nfrom scipy import stats\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom itertools import product\nimport numpy as np","9a7cbeac":"deaths = pd.read_csv('..\/input\/mlcourse\/accidental-deaths-in-usa-monthly.csv',\n                   index_col=['Month'], parse_dates=['Month'])\ndeaths.rename(columns={'Accidental deaths in USA: monthly, 1973 ? 1978': 'num_deaths'}, inplace=True)\ndeaths['num_deaths'].plot()\nplt.ylabel('Accidental deaths');\ndeaths.head()","30d17f1e":"power = pd.read_csv('..\/input\/powerdata\/power_data.csv',\n                    parse_dates=['Date'])\n#deaths.rename(columns={'Accidental deaths in USA: monthly, 1973 ? 1978': 'num_deaths'}, inplace=True)\ndf = power[[\"Date\", \"Hour\", \"Toronto\"]]\ndf['DateTime'] = pd.to_datetime(df.Date) + pd.to_timedelta(df.Hour, unit='h')\ndf['TimeStamp'] = df.DateTime.values.astype(np.int64) \/\/ 10**9\ndf.drop(['Date','Hour','TimeStamp'],axis=1,inplace=True)\ndf.set_index('DateTime', inplace=True, drop=True)\ndf['Toronto'].plot()\nplt.ylabel('Demand');\ndf.head()","bf928c14":"sm.tsa.seasonal_decompose(deaths['num_deaths']).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % \n      sm.tsa.stattools.adfuller(deaths['num_deaths'])[1])","8fed2d78":"sm.tsa.seasonal_decompose(df['Toronto']).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % \n      sm.tsa.stattools.adfuller(df['Toronto'])[1])","f32ed586":"deaths['num_deaths_diff'] = deaths['num_deaths'] - \\\n                            deaths['num_deaths'].shift(12)\nsm.tsa.seasonal_decompose(deaths['num_deaths_diff'][12:]).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % \n      sm.tsa.stattools.adfuller(deaths['num_deaths_diff'][12:])[1])","e509c3e5":"deaths['num_deaths_diff2'] = deaths['num_deaths_diff'] - \\\n                             deaths['num_deaths_diff'].shift(1)\nsm.tsa.seasonal_decompose(deaths['num_deaths_diff2'][13:]).plot()\nprint(\"Dickey-Fuller criterion: p=%f\" % sm.tsa.stattools.adfuller(deaths['num_deaths_diff2'][13:])[1])","81efe214":"plt.figure(figsize=(12, 8))\nax = plt.subplot(211)\nsm.graphics.tsa.plot_acf(deaths['num_deaths_diff2'][13:].values.squeeze(), \n                         lags=30, ax=ax)\nax = plt.subplot(212)\nsm.graphics.tsa.plot_pacf(deaths['num_deaths_diff2'][13:].values.squeeze(), \n                          lags=30, ax=ax);","08bebbfe":"ps = range(0, 3)\nd=1\nqs = range(0, 1)\nPs = range(0, 3)\nD=1\nQs = range(0, 3)","856eeffe":"parameters = product(ps, qs, Ps, Qs)\nparameters_list = list(parameters)\nlen(parameters_list)","73779a40":"%%time\nresults = []\nbest_aic = float(\"inf\")\n\nwarnings.filterwarnings('ignore')\n\nfor param in parameters_list:\n    #try except is needed because some parameter combinations are not valid\n    try:\n        model=sm.tsa.statespace.SARIMAX(deaths['num_deaths'], order=(param[0], d, param[1]), \n                                        seasonal_order=(param[2], D, \n                                                        param[3], 12)).fit(disp=-1)\n    except ValueError:\n        print('wrong parameters:', param)\n        continue\n    aic = model.aic\n    # save best model, it's AIC and params\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])\n    \nwarnings.filterwarnings('default')","501838ff":"result_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint(result_table.sort_values(by = 'aic', ascending=True).head())","61704849":"print(best_model.summary())","849d4d3d":"plt.subplot(211)\nbest_model.resid[13:].plot()\nplt.ylabel(u'Residuals')\n\nax = plt.subplot(212)\nsm.graphics.tsa.plot_acf(best_model.resid[13:].values.squeeze(), lags=48, ax=ax)\n\nprint(\"Student's criterion: p=%f\" % stats.ttest_1samp(best_model.resid[13:], 0)[1])\nprint(\"Dickey-Fuller criterion: p=%f\" % sm.tsa.stattools.adfuller(best_model.resid[13:])[1])","b1f63a84":"plt.figure(figsize=(8, 6))\ndeaths['model'] = best_model.fittedvalues\ndeaths['num_deaths'].plot(label='actual')\ndeaths['model'][13:].plot(color='r', label='forecast')\nplt.ylabel('Accidental deaths')\nplt.legend();","10f3379e":"from dateutil.relativedelta import relativedelta\ndeaths2 = deaths[['num_deaths']]\ndate_list = [pd.datetime.strptime(\"1979-01-01\", \"%Y-%m-%d\") + relativedelta(months=x) for x in range(0,24)]\nfuture = pd.DataFrame(index=date_list, columns=deaths2.columns)\ndeaths2 = pd.concat([deaths2, future])\ndeaths2['forecast'] = best_model.predict(start=72, end=100)\n\ndeaths2['num_deaths'].plot(color='b', label='actual')\ndeaths2['forecast'].plot(color='r', label='forecast')\nplt.ylabel('Accidental deaths')\nplt.legend();","31e47836":"Dickey-Fuller criteriom does now rejects the non-stationarity null-hypothesis, but we still see a trend. Let's now perform one more differentiation.","b6932f93":"# <center>Topic 9. Time series analysis with Python<\/center>\n## <center>Analyzing accidental deaths in US with ARIMA<\/center>","c5b906fa":"Initial values: Q=2, q=1, P=2, p=2.\nSetting these is not obligatory, but if we do so, we'll perform less computations tuning hyperparams.","7be002ac":"### Stationarity","cb6900e4":"**Read and plot data. We can clearly notice seasonality.**","9c11cad8":"## Model selection","d11f85c3":"1. **Checking stationarity and performing STL decomposition ([Seasonal and Trend decomposition using Loess](https:\/\/otexts.org\/fpp2\/stl.html))**","7f50cfc3":"Non-stationarity hypothesis is now rejected, and graphs look all right, no trend anymore.","26139db1":"Its residuals:","5d9739ba":"Dickey-Fuller criteriom does not reject the non-stationarity null-hypothesis, but we still see a trend. Let's perform seasonal differentiation, then check again stationarity and perform STL decomposition:","fd469676":"### Forecast","ab76dea1":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n## Open Machine Learning Course\n<center>Author: [Yury Kashnitsky](http:\/\/yorko.github.io). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","904e2fdf":"Best model:","cfb49bc9":"Residuals are not biased (confirmed by the Student's criterion), are stationary (confirmed by the Dickey-Fuller criterion) and not auto-correlated (confirmed by the Ljung-Box criterion and correlogram).\nLet's see how well the model fits data:","2ca4f40f":"[Introduction to ARIMA](https:\/\/www.youtube.com\/watch?v=Y2khrpVo6qI).\n\n\nWe know monthly numbers of accidental deaths in the US from January 1973 till December 1978. Let's build predictions for next 2 years.","77f27b7d":"Let's build ACF and PACF for our time series (seems that there's a bug in PACF, it can't be >1):"}}