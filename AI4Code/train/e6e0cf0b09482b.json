{"cell_type":{"acc6e96c":"code","5576124f":"code","0342f5ad":"code","cdba6575":"code","49942a79":"code","08c89dde":"code","7b15dfcb":"code","b4d08971":"code","49738aec":"code","196493fb":"code","dd7fdbe3":"code","a25e6c97":"code","435c4983":"code","9718625a":"code","ea36a6e2":"code","43da4a4a":"markdown","c4470f0d":"markdown","590022be":"markdown"},"source":{"acc6e96c":"import cv2\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nfrom sklearn.metrics import *\n\n#To see our directory\nimport os\nimport random\n\n#Tensorflow and Keras for models and other DL tasks\nimport tensorflow as tf","5576124f":"!mkdir \/tmp\/Xray_train_data","0342f5ad":"!cp -R \"..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/Viral Pneumonia\" \"\/tmp\/Xray_train_data\/Viral Pneumonia\"","cdba6575":"!cp -R \"..\/input\/covid19-radiography-database\/COVID-19 Radiography Database\/NORMAL\" \"\/tmp\/Xray_train_data\"","49942a79":"!ls \"\/tmp\/Xray_train_data\/\"","08c89dde":"!ls -1 \"\/tmp\/Xray_train_data\/NORMAL\"| wc -l ","7b15dfcb":"!ls -1 \"\/tmp\/Xray_train_data\/Viral Pneumonia\"| wc -l ","b4d08971":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import Adam\nimport keras","49738aec":"train_data_dir= \"\/tmp\/Xray_train_data\"","196493fb":"def data_generator(img_height = 1024, img_width=1024, split = 0.3):\n\n    train_datagen = ImageDataGenerator(validation_split=split, horizontal_flip=True, rescale=1.\/255, featurewise_center=True,\n                     featurewise_std_normalization=True)\n\n    train_generator = train_datagen.flow_from_directory(\n        train_data_dir,\n        target_size=(img_height, img_width),\n        class_mode='categorical',\n        subset='training')\n    validation_generator = train_datagen.flow_from_directory(\n        train_data_dir,\n        target_size=(img_height, img_width),\n        class_mode='categorical',\n        subset='validation')\n    \n    return train_generator, validation_generator","dd7fdbe3":"def get_Sequential_Model(img_height = 1024, img_width=1024):\n    model=keras.Sequential()\n    model.add(keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(img_height, img_width, 3), padding='same'))\n    model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=None, padding=\"valid\"))\n    model.add(keras.layers.Conv2D(8, (3,3), activation='relu', padding='same'))\n    model.add(keras.layers.MaxPooling2D(pool_size=(2, 2), strides=None, padding=\"valid\"))\n    model.add(keras.layers.Flatten())\n    model.add(keras.layers.Dense(256))\n    model.add(BatchNormalization())\n    model.add(keras.layers.Dropout(.5, input_shape=(32,)))\n    model.add(keras.layers.Dense(128))\n    model.add(BatchNormalization())\n    model.add(keras.layers.Dropout(.3, input_shape=(32,)))\n    model.add(keras.layers.Dense(64))\n    model.add(BatchNormalization())\n    model.add(keras.layers.Dropout(.1, input_shape=(32,)))\n    model.add(keras.layers.Dense(2, activation='sigmoid'))\n    return model","a25e6c97":"try:\n    model = load_model('\/kaggle\/working\/PneumoniaVNormal.h5')\n    print('Model Loaded')\nexcept:\n    model = get_Sequential_Model(img_height = 224, img_width=224)\n    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics = 'accuracy')\n\n    train_generator, validation_generator = data_generator(img_height = 224, img_width=224)\n\n    trainer = model.fit(train_generator,validation_data=validation_generator,epochs=20,verbose=2)\n\n    model.save('PneumoniaVNormal.h5')\n\n    print('Model saved.')","435c4983":"from IPython.display import FileLink\nFileLink(r'PneumoniaVNormal.h5')","9718625a":"print('Testing:')\n\nmodel.evaluate_generator(validation_generator)\nvalidation_generator.reset()\npredIdx = model.predict_generator(validation_generator, len(validation_generator))\npredIdxs = np.argmax(predIdx, axis=1) \nvalidation_labels = validation_generator.classes\n\ntarget_names = ['NORMAL', 'Viral Pneumonia']\nprint('\\n')\nprint(classification_report(validation_labels, predIdxs, target_names=target_names, digits=5))","ea36a6e2":"print('Train Data metrics:')\n    \nmodel.evaluate_generator(train_generator)\n\ntrain_generator.reset()\npredIdxs = model.predict_generator(train_generator, len(train_generator))\npredIdxs = np.argmax(predIdxs, axis=1) \nlabels = train_generator.classes\n\ntarget_names = ['NORMAL', 'Viral Pneumonia']\nprint('\\n')\nprint(classification_report(labels, predIdxs, target_names=target_names, digits=5))","43da4a4a":"# Note: No Train-test Split, Just Train validation Split. In this training model, we are not concerned with testing the performance of the model, Just ensuring that the model has learned enough to discriminate between Normal V\/s Pneumatic classifications to adapt and transfer learn with an additional class [COVID in our case]","c4470f0d":"Reason for using categorical mode for datagen and using 2 neurons in final dense layer:\nhttps:\/\/datascience.stackexchange.com\/questions\/45833\/keras-model-only-predicts-one-class-for-all-the-test-images\n\n(Creates Problem with binary mode, due to the fact output layer will only give one probability, and the predictor which will take class based on max, while doing it manually, will always attribute things to class 0, Hence, the problem)","590022be":"https:\/\/stackoverflow.com\/questions\/42443936\/keras-split-train-test-set-when-using-imagedatagenerator"}}