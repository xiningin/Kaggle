{"cell_type":{"dbe99012":"code","907cfda2":"code","bc158913":"code","f51650c5":"code","113db4c6":"code","aa8b1b78":"code","84835391":"code","055035a1":"code","216d5743":"code","ec45eb66":"code","7e98a227":"code","865928e0":"code","1654b75b":"code","2109e2f4":"code","075acf6c":"code","4665003c":"code","4a6b66a0":"code","716c021a":"code","9204fb6f":"code","da408030":"code","ba51c6d8":"code","0cba0ef8":"code","a831cd12":"code","0a0357c6":"code","387e3cf3":"code","71a6100a":"code","46ad0c17":"code","c09afa36":"code","fde267de":"code","4fa4f158":"code","ed833fe1":"code","3dc69d42":"code","af23bdb7":"code","be3d5a5f":"code","421a88e8":"code","f401fc16":"code","2a156e76":"code","701dc833":"code","8423ba74":"code","5838c701":"code","b52205d7":"code","96246b30":"code","c13a627d":"code","ff03dfce":"code","a78cf9b6":"code","a2c77292":"code","cefe53a7":"code","519f6979":"code","764b92b5":"code","d36ed480":"code","b7b6f1a4":"code","f4b5efd2":"code","344e094b":"code","087b2032":"code","d738dbae":"code","ee0c9133":"code","4c0aba88":"code","3807d245":"code","43a18bba":"markdown","b28f15a7":"markdown","8a211be3":"markdown","dc4a933f":"markdown","9b850f3d":"markdown","3b62a9d5":"markdown","bbeef31b":"markdown","8948dde0":"markdown","e45455d7":"markdown","824349cc":"markdown","64274ae7":"markdown","7a1dd5cd":"markdown","cf5cd40c":"markdown","de1140f8":"markdown","ab6bfb2d":"markdown","e302ae2d":"markdown","3ab7501e":"markdown","109250f3":"markdown","80808ec4":"markdown","d1956f66":"markdown","a5d3068f":"markdown"},"source":{"dbe99012":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns","907cfda2":"df = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv', index_col=0)\nprint(\"data shape:\")\nprint(df.shape)\nprint(\"columns name:\")\nprint(list(df.columns))","bc158913":"useless_columns = ['url', 'region_url', 'VIN', 'image_url', 'description', 'state']\ndf.drop(useless_columns, axis=1, inplace=True)\nprint(\"data shape:\")\nprint(df.shape)\nprint(\"columns name:\")\nprint(list(df.columns))","f51650c5":"df.isnull().any(axis=0)","113db4c6":"temp = df.dropna(axis=0, subset=['year', 'manufacturer'])\nprint(\"\u5171\u5220\u9664\", df.shape[0]-temp.shape[0], \"\u884c\")\ndf = temp","aa8b1b78":"def count_invalid_num(series):\n    \"\"\"\n    \u67e5\u627e\u65e0\u6548\u6570\u636e\uff0c\u8fd4\u56de\u65e0\u6548\u6570\u636e\u4e2a\u6570\n    \"\"\"\n    invalid_num = series.isnull().sum()\n    if series.price <= 0:\n        invalid_num += 1\n    if series.odometer < 0:\n        invalid_num += 1\n    return invalid_num\n\ndf['invalid_num'] = df.apply(count_invalid_num, axis=1)\ndf.head()","84835391":"ori_rows = df.shape[0]\ndf.drop(df[df.invalid_num > 6].index, inplace=True)\nafter_rows = df.shape[0]\nprint(\"\u5171\u5220\u9664\", ori_rows - after_rows, \"\u884c\")","055035a1":"ori_rows = df.shape[0]\ndf.drop(df[df['price'] == 0].index, inplace = True) \nafter_rows = df.shape[0]\nprint(\"\u5171\u5220\u9664\", ori_rows - after_rows, \"\u884c\")","216d5743":"print(\"\u76ee\u524d\u6570\u636e\u5f62\u72b6\u4e3a\uff1a\", df.shape)","ec45eb66":"def fill_by_key(data:pd.DataFrame, tar_col:str, type:str, key:str, fill=False, default='GT'):\n    if type == 'median':\n        tmp = dict(data.groupby(key)[tar_col].median())\n    if type == 'mode':\n        tmp = dict(df.groupby(key)[tar_col].agg(lambda x: pd.Series.mode(x)))\n        for (k, v) in tmp.items():\n            if str(v).find('[') != -1:\n                print(k, v, '->', default)\n                tmp[k] = default\n    if type == 'mean':\n        tmp = dict(df.groupby(key)[tar_col].mean())\n    if fill:\n        df[tar_col] = df[tar_col].fillna(df[key].apply(lambda x: tmp.get(x)))\n        df.drop(df[df[tar_col].isna()].index, inplace = True)\n    else:\n        return tmp\n    \ndef fill_helper(data:pd.DataFrame, diction:dict, tar_col:str, key:str):\n    df[tar_col] = df[tar_col].fillna(df[key].apply(lambda x: diction.get(x)))\n    df.drop(df[df[tar_col].isna()].index, inplace = True)","7e98a227":"fill_by_key(df, 'odometer', 'median', 'year', True, 1000)  # \u6839\u636eyear\u7684\u4e2d\u4f4d\u6570\u8fdb\u884c\u63d2\u8865\nprint(\"\u76ee\u524d\u6570\u636e\u5f62\u72b6\u4e3a\uff1a\", df.shape)","865928e0":"df.isnull().any(axis=0)","1654b75b":"fill_ = fill_by_key(df, 'model', 'mode', 'manufacturer')\nfill_helper(df, fill_, 'model', 'manufacturer')","2109e2f4":"df[df.manufacturer=='hennessey'].model","075acf6c":"df.isnull().any(axis=0)","4665003c":"df.condition.unique()","4a6b66a0":"def condition2int(condition):\n    condition_dict = {'salvage':0, 'fair':1, 'good':2, 'excellent':3, 'like new':4, 'new':5}\n    try:\n        return condition_dict[condition]\n    except:\n        return np.nan\n\ndf['condition'] = df['condition'].apply(condition2int)","716c021a":"fill_by_key(df, 'condition', 'median', 'year', True, 2)\ndf.isnull().any(axis=0)","9204fb6f":"df.cylinders.unique()","da408030":"def cylinder2int(cylinders):\n    try:\n        return int(cylinders[0])\n    except:\n        return np.nan\ndf['cylinders'] = df['cylinders'].apply(cylinder2int)","ba51c6d8":"fill_ = fill_by_key(df, 'cylinders', 'median', 'model', default=4)","0cba0ef8":"fill_helper(df, fill_, 'cylinders', 'model')","a831cd12":"fill_mode = fill_by_key(df, 'fuel', 'mode', 'model', default='gas')","0a0357c6":"fill_helper(df, fill_mode, 'fuel', 'model')\ndf.isnull().any(axis=0)","387e3cf3":"df.title_status.unique()","71a6100a":"fill_ = fill_by_key(df, 'title_status', 'mode', 'model', default='clean')\nfill_helper(df, fill_, 'title_status', 'model')\ndf.isnull().any(axis=0)","46ad0c17":"df.transmission.unique()","c09afa36":"fill_ = fill_by_key(df, 'transmission', 'mode', 'model', default='automatic')","fde267de":"fill_helper(df, fill_, 'transmission', 'model')","4fa4f158":"df.isnull().any(axis=0)","ed833fe1":"df.drive.unique()","3dc69d42":"fill_ = fill_by_key(df, 'drive', 'mode', 'model', default='fwd')","af23bdb7":"fill_helper(df, fill_, 'drive', 'model')\ndf.isnull().any(axis=0)","be3d5a5f":"df.paint_color.unique()","421a88e8":"fill_ = fill_by_key(df, 'paint_color', 'mode', 'model', default='white')","f401fc16":"fill_helper(df, fill_, 'paint_color', 'model')\ndf.isnull().any(axis=0)","2a156e76":"df['size'].unique()","701dc833":"fill_ = fill_by_key(df, 'size', 'mode', 'model', default='mid-size')","8423ba74":"fill_helper(df, fill_, 'size', 'model')\ndf.isnull().any(axis=0)","5838c701":"df['type'].unique()","b52205d7":"fill_ = fill_by_key(df, 'type', 'mode', 'model', default='other')","96246b30":"fill_helper(df, fill_, 'type', 'model')\ndf.isnull().any(axis=0)","c13a627d":"df.long.fillna(df.long.mean(), inplace=True)\ndf.lat.fillna(df.lat.mean(), inplace=True)\ndf.isnull().any(axis=0)","ff03dfce":"df.info()","a78cf9b6":"df.condition = df.condition.apply(lambda x: int(x))\ndf.condition.unique()","a2c77292":"df.info()","cefe53a7":"df.cylinders = df.cylinders.apply(lambda x: int(x))\ndf.cylinders.unique()","519f6979":"# !pip install catboost \u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u5305\uff0c\u5219\u5b89\u88c5\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostRegressor","764b92b5":"X_train, X_val, y_train, y_val = train_test_split(df.loc[:, [x for x in list(df.columns) if x not in ['price', 'id']]], df.loc[:, 'price'], test_size=0.2 , random_state=2021)\nprint(X_train.shape, X_val.shape, y_train.shape, y_val.shape)","d36ed480":"X_train.info()","b7b6f1a4":"categorical_features_indices = np.where(X_train.dtypes != np.float)[0]\nmodel = CatBoostRegressor(iterations=1000, depth=5, cat_features=categorical_features_indices,learning_rate=0.05, logging_level='Verbose')","f4b5efd2":"model.fit(X_train, y_train, plot=True)","344e094b":"y_hat = model.predict(X_val)","087b2032":"import plotly.graph_objects as go\nimport numpy as np\nN = 50\nx = np.arange(0,N)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=np.array(y_hat[:N]),mode='lines+markers',name='y_hat'))\nfig.add_trace(go.Scatter(x=x, y=np.array(y_val[:N]),mode='lines+markers',name='y_val'))\nfig.show()","d738dbae":"y_train_log, y_val_log = np.log(y_train), np.log(y_val)","ee0c9133":"model.fit(X_train, y_train_log, plot=True)","4c0aba88":"y_hat_log = model.predict(X_val)\ny_hat = np.exp(y_hat_log)\nN = 50\nx = np.arange(0,N)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=np.array(y_hat[:N]),mode='lines+markers',name='y_hat'))\nfig.add_trace(go.Scatter(x=x, y=np.array(y_val[:N]),mode='lines+markers',name='y_val'))\nfig.show()","3807d245":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nrmse_val = np.sqrt(mean_squared_error(y_val_log, y_hat_log))\nprint(\"RMSE of Validation is: \", rmse_val)","43a18bba":"### 4.5 \u5bf9\u71c3\u6599\u5f62\u5f0f\uff08fuel\uff09\u8fdb\u884c\u63d2\u8865","b28f15a7":"### \u53d1\u73b0\u4ef7\u683c\u9884\u6d4b\u51fa\u8d1f\u6570\uff0c\u4fee\u6539\u6570\u636e\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f53\u73b0\u51fa\u91ce\u503c\u6570\u636e\u5bf9\u6a21\u578b\u7684\u5f71\u54cd","8a211be3":"## Step 6: \u9884\u6d4b","dc4a933f":"### 4.8 \u5bf9\u7ecf\u7eac\u5ea6\uff08lat long\uff09\u8fdb\u884c\u5747\u503c\u63d2\u8865","9b850f3d":"### 4.1 \u5bf9\u884c\u9a76\u516c\u91cc\u6570\uff08odometer\uff09\u8fdb\u884c\u63d2\u8865","3b62a9d5":"## Step 3: \u6570\u636e\u6e05\u6d17","bbeef31b":"## Step2: \u5bfc\u5165\u6570\u636e\u5e76\u5bf9\u6570\u636e\u505a\u7b80\u5355\u63a2\u7d22","8948dde0":"### 4.7 \u5bf9transmission\u3001drive\u3001size\u3001paint_color\u8fdb\u884c\u63d2\u8865","e45455d7":"### \u51c6\u5907\u63d2\u8865\u51fd\u6570","824349cc":"### 4.3 \u5bf9\u8f66\u51b5\uff08condition\uff09\u8fdb\u884c\u7f3a\u5931\u503c\u63d2\u8865","64274ae7":"### 4.6 \u5bf9title_status\u8fdb\u884c\u63d2\u8865","7a1dd5cd":"# \u5bf9\u4e8c\u624b\u8f66\u4ef7\u683c\u8fdb\u884c\u56de\u5f52\u9884\u6d4b","cf5cd40c":"## Step 5: \u5efa\u7acb\u56de\u5f52\u6a21\u578b","de1140f8":"### 3.4 \u5bf9price=0\u7684\u884c\u8fdb\u884c\u5220\u9664","ab6bfb2d":"### 4.2 \u5bf9\u8f66\u578b\uff08model\uff09\u7f3a\u5931\u503c\u8fdb\u884c\u63d2\u8865","e302ae2d":"### 3.3 \u5bf9\u65e0\u6548\u6570\u636e>6\u4e2a\u7684\u8fdb\u884c\u5220\u9664","3ab7501e":"### 3.2 \u67e5\u770b\u6570\u636e\u7f3a\u5931\u60c5\u51b5\uff0c\u5bf9\u5173\u952e\u6570\u636e\u7f3a\u5931\u7684\u6837\u672c\u8fdb\u884c\u5254\u9664","109250f3":"## Step1: \u5bfc\u5165\u76f8\u5173\u6a21\u5757","80808ec4":"## Step4: \u6570\u636e\u63d2\u8865","d1956f66":"### 3.1 \u5220\u9664\u6682\u65f6\u65e0\u6cd5\u5904\u7406\u7684\u5217\u6570\u636e\uff0c\u4f8b\u5982url\u5730\u5740\uff0c\u8f66\u8f86\u56fe\u50cf\uff0c\u8f66\u8f86\u63cf\u8ff0\u7b49","a5d3068f":"### 4.4 \u5bf9\u8f66\u8f6e\uff08cylinders\uff09\u8fdb\u884c\u7f3a\u5931\u503c\u63d2\u8865"}}