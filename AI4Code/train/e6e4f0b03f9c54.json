{"cell_type":{"42232a31":"code","7e9a85ef":"code","e6dc064a":"code","a8f6e7bf":"code","499e775a":"code","79f76d0e":"code","42915613":"code","6cb4d8f4":"code","40fae7c4":"code","41806e24":"code","76659402":"code","19658587":"code","f0a545a2":"code","48d19afa":"code","6a702e12":"code","a9afb633":"code","68e02777":"code","b2e382aa":"code","0eb3f257":"code","83c7f438":"code","110a5256":"code","8b5d4dd8":"markdown"},"source":{"42232a31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e9a85ef":"from sklearn.datasets import fetch_openml\nfrom sklearn import metrics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e6dc064a":"train = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/test.csv\")","a8f6e7bf":"sample=pd.read_csv(\"\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv\")","499e775a":"train.head()","79f76d0e":"test.head()","42915613":"from sklearn.model_selection import train_test_split\ntrains,tests= train_test_split(train, train_size=0.8)","6cb4d8f4":"y_train = trains[\"label\"]\nX_train = trains.drop(labels = [\"label\"],axis = 1) \ny_test = tests[\"label\"]\nX_test = tests.drop(labels = [\"label\"],axis = 1) ","40fae7c4":"X_train.info()","41806e24":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nmodel =  CatBoostClassifier(task_type=\"GPU\")\ncategorical_features_indices = np.where(X_train.dtypes != np.int)[0]\ncategorical_features_indices","76659402":"model.fit(X_train,y_train,cat_features=([]))","19658587":"from sklearn.metrics import accuracy_score\ntestaccuracy= accuracy_score(y_test,model.predict(X_test))\ntestaccuracy\nprint(\"Test Data Accuracy    :{} %\".format(round((testaccuracy*100),2)))","f0a545a2":"cm= metrics.confusion_matrix(y_test,model.predict(X_test))\ncm","48d19afa":"model.score(X_test,y_test)","6a702e12":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","a9afb633":"y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","68e02777":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nmodel =  CatBoostClassifier(task_type=\"GPU\")\ncategorical_features_indices = np.where(X_train.dtypes != np.int)[0]\ncategorical_features_indices","b2e382aa":"model.fit(X_train,y_train,cat_features=([]))","0eb3f257":"# predict result\npred = model.predict(test)\nresult=pd.DataFrame(pred)\nresult= result.rename(columns={ 0 : 'label'})\nresult.head()","83c7f438":"submission = pd.concat([pd.DataFrame(data=test.id),result],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)\n\n","110a5256":"submission.head()","8b5d4dd8":"Looks Promising !!"}}