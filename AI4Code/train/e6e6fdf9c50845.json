{"cell_type":{"d40f496c":"code","97e3414a":"code","c0992f29":"code","0d39285d":"code","4705abb4":"code","f8e31c64":"code","d7c9b8cf":"code","3bbee12f":"code","109f1b52":"code","b9207977":"code","5b130281":"code","f75123d5":"code","44ee3f99":"code","77b83d0d":"code","c98cc903":"code","7a0735d1":"code","c0f802bd":"code","43d61ef8":"code","d7e2164b":"code","07831cd3":"code","f217cc85":"code","578bdf21":"code","135f02fa":"code","315549d6":"code","dabef0e2":"code","c76f527a":"code","2a9b076b":"code","2fdefefa":"code","c5b4af77":"code","5ef0f5d7":"code","5f6cbc20":"code","99fee70d":"code","fda03058":"markdown","a29af2db":"markdown","8f2dbe64":"markdown","03116edd":"markdown","28712aaa":"markdown","f8a86c24":"markdown","34f49165":"markdown","e39e342f":"markdown","e4927126":"markdown","9c63fe62":"markdown","13ad52ca":"markdown","2a266129":"markdown","34370d6c":"markdown","13bd743f":"markdown","aecddc94":"markdown","9c4d278d":"markdown","9d4c9b0f":"markdown","9c77b5be":"markdown","647e7fe4":"markdown","5e0ff81c":"markdown","25c97ca4":"markdown","58ada824":"markdown","c3c4baaf":"markdown","337926cf":"markdown","5afceff5":"markdown","3045074c":"markdown","0d57b4da":"markdown","f72e8369":"markdown","bd72ff95":"markdown"},"source":{"d40f496c":"!pip install gdcm","97e3414a":"import numpy as np \nimport pandas as pd \nfrom pandas import DataFrame\nfrom matplotlib.lines import Line2D\nimport plotly.express as px\nimport seaborn as sns\nimport os\nimport pydicom\nimport glob\nfrom tqdm.notebook import tqdm\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\nimport cv2\nimport warnings\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nwarnings.filterwarnings('ignore')\n","c0992f29":"train_study_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ntrain_study_df = train_study_df.rename(columns = {'Negative for Pneumonia': 'Negative', 'Typical Appearance': 'Typical', 'Indeterminate Appearance': 'Indeterminate', 'Atypical Appearance': 'Atypical'}, inplace = False)\ntrain_study_df.head(6)","0d39285d":"def bar_plot(df,x,x_title,y,title,colors=None,text=None):\n    fig = px.bar(x=x,\n                 y=y,\n                 text=text,\n                 labels={x: x_title.title()},   \n                 data_frame=df,\n                 color=colors,\n                 barmode='group',\n                 template=\"simple_white\")\n    \n    texts = [df[col].values for col in y]\n    for i, t in enumerate(texts):\n        fig.data[i].text = t\n        fig.data[i].textposition = 'inside'\n        \n    fig['layout'].title=title\n\n    fig.update_layout(title_font_size=19)\n    fig.update_layout(title_font_family='Droid Serif')\n    fig.update_layout(width=800,height=500)\n        \n\n\n    for trace in fig.data:\n        trace.name = trace.name.replace('_',' ').title()\n\n    fig.update_yaxes(tickprefix=\"\", showgrid=True)\n\n    fig.show()","4705abb4":"train_study_df['label_y'] = 'Negative'\ntrain_study_df.loc[train_study_df['Typical']==1, 'label_y'] = 'Typical'\ntrain_study_df.loc[train_study_df['Indeterminate']==1, 'label_y'] = 'Indeterminate'\ntrain_study_df.loc[train_study_df['Atypical']==1, 'label_y'] = 'Atypical'\n\ntrain_study_df.head(5)","f8e31c64":"train_study_df1=train_study_df.groupby(['label_y']).size().reset_index(name='counts')\ntrain_study_df1\n\nbar_plot(train_study_df1,\n         'label_y',\n         'target',\n         ['counts'],\n         title='Target')","d7c9b8cf":"train_image_df = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\ntrain_image_df.head(2)","3bbee12f":"train_image_df['class'] = train_image_df.label.apply(lambda x: x.split()[0])\n#train_image_df['class'].hist(FaceColor=\"#0066aa\")\ntrain_study_df2=train_image_df.groupby(['class']).size().reset_index(name='counts')\nbar_plot(train_study_df2,\n         'class',\n         'class',\n         ['counts'],\n         title='Class')","109f1b52":"train_image_df['x_min'] = train_image_df.label.apply(lambda x: float(x.split()[2]))\ntrain_image_df['y_min'] = train_image_df.label.apply(lambda x: float(x.split()[3]))\ntrain_image_df['x_max'] = train_image_df.label.apply(lambda x: float(x.split()[4]))\ntrain_image_df['y_max'] = train_image_df.label.apply(lambda x: float(x.split()[5]))\ntrain_image_df.head(3).T","b9207977":"train_study_df['StudyInstanceUID'] = train_study_df['id'].apply(lambda x: x.replace('_study', ''))\ndel train_study_df['id']\ntrain_image_df = train_image_df.merge(train_study_df, on='StudyInstanceUID')\ntrain_image_df.sample(3).T","5b130281":"\ntrain_image_df['integer_label'] = train_image_df['label_y']\ntrain_image_df.head(3).T","f75123d5":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(train_image_df['integer_label'])\ntrain_image_df['integer_label']=le.transform(train_image_df['integer_label'])\ntrain_image_df.head(3).T","44ee3f99":"train_image_df['id_image'] = train_image_df['id']\ntrain_image_df['id'] = train_image_df['id'].apply(lambda x: x.replace('_image', ''))\ntrain_image_df.head(3).T","77b83d0d":"train_image_df.to_csv(\"train_image_df.csv\")\n","c98cc903":"fig, ax = plt.subplots(2,2,figsize=(18,15))\nsns.kdeplot(train_image_df[\"Negative\"], shade=True,ax=ax[0,0],color=\"#00ff00\")\nax[0,0].set_title(\"Negative for Pneumonia Distribution\",font=\"Serif\", fontsize=15)\nax[0,0].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Typical\"], shade=True,ax=ax[0,1],color=\"#4209ff\")\nax[0,1].set_title(\"Typical Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[0,1].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Indeterminate\"], shade=True,ax=ax[1,0],color=\"#f72545\")\nax[1,0].set_title(\"Indeterminate Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[1,0].set(xlabel=None)\nsns.kdeplot(train_image_df[\"Atypical\"], shade=True,ax=ax[1,1],color=\"#FFBA08\")\nax[1,1].set_title(\"Atypical Appearance Distribution\",font=\"Serif\", fontsize=15)\nax[1,1].set(xlabel=None)\nplt.show()","7a0735d1":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(5, 5), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n\n\ndef plot_imgs(imgs, cols=4, size=5, is_rgb=True, title=\"\", cmap='gray', img_size=(300,300)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","c0f802bd":"dicom_paths = get_dicom_files('..\/input\/siim-covid19-detection\/train')\nimgs = [dicom2array(path) for path in dicom_paths[-4:]]\nplot_imgs(imgs)","43d61ef8":"train_image_df = train_image_df[~train_image_df.boxes.isnull()] \nclass_names = ['Typical', 'Indeterminate', 'Atypical'] # we have 3 positive classes\nunique_classes = np.unique(train_image_df[class_names].values, axis=0)","d7e2164b":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\ndef custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.5)\n    plt.tick_params(axis='both', labelsize=0, length = 0)\n\npalette = [\"#4209ff\",\"#f72545\",\"#FFBA08\"]\ncustom_palette(palette)\n","07831cd3":"from glob import glob\nimgs = []\nlabel2color = {\n    '[1, 0, 0]': [66,9,255], # Typical Appearance\n    '[0, 1, 0]': [247,37,69], # Indeterminate Appearance\n    '[0, 0, 1]': [255,186,8], # Atypical Appearance\n}\nthickness = 3\nscale = 6\n\nfor _, row in train_image_df[train_image_df['Negative']==0].iloc[12:20].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","f217cc85":"imgs = []\n\nfor _, row in train_image_df[train_image_df['Typical'] == 1].iloc[8:12].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)\n","578bdf21":"imgs = []\n\nfor _, row in train_image_df[train_image_df['Indeterminate'] == 1].iloc[2:6].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","135f02fa":"imgs = []\n\nfor _, row in train_image_df[train_image_df['Atypical'] == 1].iloc[0:4].iterrows():\n    study_id = row['StudyInstanceUID']\n    img_path = glob(f'..\/input\/siim-covid19-detection\/train\/{study_id}\/*\/*')[0]\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    claz = row[class_names].values\n    color = label2color[str(claz.tolist())]\n\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row['label'].split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l)\/scale)\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []    \n    \n    for box in bboxes:\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (600,600))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","315549d6":"train_image_df = pd.read_csv('.\/train_image_df.csv')","dabef0e2":"train_image_df['x_mid'] = train_image_df.apply(lambda row: (row.x_max+row.x_min)\/2, axis =1)\ntrain_image_df['y_mid'] = train_image_df.apply(lambda row: (row.y_max+row.y_min)\/2, axis =1)\n\ntrain_image_df['w'] = train_image_df.apply(lambda row: (row.x_max-row.x_min), axis =1)\ntrain_image_df['h'] = train_image_df.apply(lambda row: (row.y_max-row.y_min), axis =1)\n\ntrain_image_df['area'] = train_image_df['w']*train_image_df['h']\ntrain_image_df.head()","c76f527a":"features = ['x_min', 'y_min', 'x_max', 'y_max', 'x_mid', 'y_mid', 'w', 'h', 'area']\nX = train_image_df[features]\ny = train_image_df['integer_label']\nX.shape, y.shape","2a9b076b":"class_ids, class_names = list(zip(*set(zip(train_image_df.integer_label, train_image_df.label_y))))\nclasses = list(np.array(class_names)[np.argsort(class_ids)])\nclasses = list(map(lambda x: str(x), classes))\nclasses","2fdefefa":"%%time\nfrom sklearn.manifold import TSNE\n\ntsne = TSNE(n_components = 2, perplexity = 40, random_state=1, n_iter=50000)\ndata_X = X\ndata_y = y.loc[data_X.index]\nembs = tsne.fit_transform(data_X)\n# Add to dataframe for convenience\nplot_x = embs[:, 0]\nplot_y = embs[:, 1]","c5b4af77":"import matplotlib.pyplot as plt\nplt.figure(figsize = (15, 15))\nplt.axis('off')\nscatter = plt.scatter(plot_x, plot_y, marker = 'o',s = 50, c=data_y.tolist(), alpha= 0.5,cmap='viridis')\nplt.legend(handles=scatter.legend_elements()[0], labels=classes)","5ef0f5d7":"from scipy.stats import gaussian_kde\n\n\nx_val = train_image_df.x_mid.values\ny_val = train_image_df.y_mid.values\n\n# Calculate the point density\nxy = np.vstack([x_val,y_val])\nz = gaussian_kde(xy)(xy)\n\nfig, ax = plt.subplots(figsize = (10, 10))\nax.axis('off')\nax.scatter(x_val, y_val, c=z, s=100, cmap='viridis')\n# ax.set_xlabel('x_mid')\n# ax.set_ylabel('y_mid')\nplt.show()","5f6cbc20":"x_val = train_image_df.w.values\ny_val = train_image_df.h.values\n\n# Calculate the point density\nxy = np.vstack([x_val,y_val])\nz = gaussian_kde(xy)(xy)\n\nfig, ax = plt.subplots(figsize = (10, 10))\nax.axis('off')\nax.scatter(x_val, y_val, c=z, s=100, cmap='viridis')\n# ax.set_xlabel('bbox_width')\n# ax.set_ylabel('bbox_height')\nplt.show()","99fee70d":"\ntrain_image_df1 = pd.read_csv('..\/input\/siim-covid19-resized-1024px\/meta.csv')\n\nx_val = train_image_df1.dim0.values\ny_val = train_image_df1.dim1.values\n\n# Calculate the point density\nxy = np.vstack([x_val,y_val])\nz = gaussian_kde(xy)(xy)\n\nfig, ax = plt.subplots(figsize = (10, 10))\nax.axis('off')\nax.scatter(x_val, y_val, c=z, s=100, cmap='viridis')\n# ax.set_xlabel('image_width')\n# ax.set_ylabel('image_height')\nplt.show()","fda03058":"##  train_study_level.csv","a29af2db":"# Labels distribution ","8f2dbe64":"# Introduction \n\n* Currently, COVID-19 can be diagnosed via polymerase chain reaction to detect genetic material from the virus or chest radiograph. However, it can take a few hours and sometimes days before the molecular test results are back. By contrast, chest radiographs can be obtained in minutes.\n\n* In this competition, we\u2019ll identify and localize COVID-19 abnormalities on chest radiographs. In particular, we'll categorize the radiographs as negative for pneumonia or typical, indeterminate, or atypical for COVID-19. \n\n* In this competition, we hope to develop a model to help radiologists diagnose the millions of COVID-19 patients more confidently and quickly.\n","03116edd":"\n# Columns\n### train_study_level.csv\n\n* **id**:unique study identifier\n* **Negative for Pneumonia**:1 if the study is negative for pneumonia, 0 otherwise\n* **Typical Appearance**:1 if the study has this appearance, 0 otherwise\n* **Indeterminate Appearance**:1 if the study has this appearance, 0 otherwise\n* **Atypical Appearance**:1 if the study has this appearance, 0 otherwise\n\n\n","28712aaa":"# <span style=\"color:#FFBA08\">Atypical Appearance<\/span>","f8a86c24":"## bbox_w Vs bbox_h\n","34f49165":"### train_image_level.csv\n\n* **id**:unique image identifier\n* **boxes**:bounding boxes in easily-readable dictionary format\n* **label**:the correct prediction label for the provided bounding boxes","e39e342f":"## Training and Inferance\n- [SIIM COVID-19 Detectron2 Training](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-training)\n- [SIIM COVID-19 Detectron2 Inferance](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siim-covid-19-detectron2-inferance)\n- [COVID-19 Detection YOLOv5 3Classes [Training] ](https:\/\/www.kaggle.com\/ammarnassanalhajali\/covid-19-detection-yolov5-3classes-training)\n- [COVID-19 Detection YOLOv5 3Classes [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/covid-19-detection-yolov5-3classes-inference)\n- [SIIM-COVID-19 Detection Training Labels (Dataset)](https:\/\/www.kaggle.com\/ammarnassanalhajali\/siimcovid19-detection-training-label)\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","e4927126":"1. **Normal chest X-ray(Negative)**. It is not uncommon for the chest X-ray to be normal early in the disease, so a normal X-ray does not rule out infection.\n1. **Typical** findings or findings commonly associated with COVID-19 in the scientific literature (. These include a reticular pattern, ground-glass opacities and consolidations, with rounded morphology and a confluent or patchy multifocal distribution. The distribution is usually bilateral and peripheral, with a predominance in the lower fields . The differential diagnosis includes organising pneumonia, drug toxicity and other causes of acute lung damage. Between the first and third week from the onset of symptoms, typical X-ray findings may progress to diffuse disease. This is related to a severe clinical hypoxaemia situation, and the main differential diagnosis is acute respiratory distress syndrome (ARDS).\n1. **Indeterminate** findings and findings that may present in cases of COVID-19 pneumonia can have other causes. These include consolidations and ground-glass opacities with a unilateral, central or upper-lobe distribution. The differential diagnosis includes other infections and alveolar oedema.\n1. **Atypical** findings, uncommon findings or findings not reported in COVID-19 pneumonia. These include lobar consolidation, lung nodules or masses, miliary pattern, cavitation and pleural effusion, reported in only 3% of patients and more typical of advanced disease.\n","9c63fe62":"# References\n1. https:\/\/www.kaggle.com\/tanlikesmath\/siim-covid-19-detection-a-simple-eda\n1. https:\/\/www.kaggle.com\/yujiariyasu\/plot-3positive-classes\n1. https:\/\/www.kaggle.com\/ruchi798\/siim-covid-19-detection-eda-data-augmentation\n1. Chamorro, E. Mart\u00ednez, A. D\u00edez Tasc\u00f3n, L. Ib\u00e1\u00f1ez Sanz, S. Ossaba V\u00e9lez, and S. Borruel Nacenta. \"Radiologic diagnosis of patients with COVID-19.\" Radiolog\u00eda (English Edi-tion) 63, no. 1 (2021): 56-73.\n","13ad52ca":"\n\n## train_image_level.csv","2a266129":"# More visualization","34370d6c":"# Image Aspect Ratio","13bd743f":"# <span style=\"color:#f72545\">Indeterminate Appearance<\/span>","aecddc94":"# All classes","9c4d278d":"# Data & Files\n* **Train folder**: The train dataset comprises 6,334 chest scans in DICOM format\n* All images are stored in paths with the form **study**\/**series**\/**image**\n    * **study**: The study ID here relates directly to the study-level predictions.\n    *  **image**:The image ID is the ID used for image-level predictions.\n* **Test folder**:The hidden test dataset is of roughly the same scale as the training dataset.\n    \n\n* **train_study_level.csv**: The train study-level metadata, with one row for each study, including correct labels.\n* **train_image_level.csv**: The train image-level metadata, with one row for each image, including both correct labels and any bounding boxes in a dictionary format. Some images in both test and train have multiple bounding boxes.\n* **sample_submission.csv**: A sample submission file containing all image- and study-level IDs.\n","9d4c9b0f":"### <span style=\"color:#4209ff\">Typical Appearance<\/span>\n### <span style=\"color:#f72545\">Indeterminate Appearance<\/span>\n### <span style=\"color:#FFBA08\">Atypical Appearance<\/span>","9c77b5be":"![header.jpg](attachment:fa8d9899-e4da-40eb-8a35-48d80cee351f.jpg)","647e7fe4":"### If you like my work, please upvote","5e0ff81c":"# Plot images with bounding box","25c97ca4":"# Importing libraries","58ada824":"# BBox Location\n## x_mid Vs y_mid\n","c3c4baaf":"# let's take trip around data","337926cf":"# t-SNE Visualization\nt-SNE is a tool to visualize high-dimensional data. It converts similarities between data points to joint probabilities and tries to minimize the Kullback-Leibler divergence between the joint probabilities of the low-dimensional embedding and the high-dimensional data. t-SNE has a cost function that is not convex, i.e. with different initializations we can get different results.","5afceff5":"in **Label** Column, the format is as follows: `[class ID] [confidence score] [bounding box]`\n\n* **Class ID**: Either opacity or none\n* **Confidence score**: confidence from your neural network model. If none, the confidence is 1.\n* **Bounding box**:typical xmin ymin xmax ymax format. If class ID is none, the bounding box is 1 0 0 1 1.\n\nThe bounding boxes are also provided in easily readable dictionary format in column **boxes**","3045074c":"# **SIIM COVID-19 EDA**","0d57b4da":"![download.jpg](attachment:40dd61af-b701-44ab-a881-45d89476dcf6.jpg)","f72e8369":"\n# <span style=\"color:#4209ff\">Typical Appearance<\/span>\n","bd72ff95":"# A look at the images"}}