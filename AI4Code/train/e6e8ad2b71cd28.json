{"cell_type":{"2b0bddbd":"code","b595cbc6":"code","4639984d":"code","bc651ff2":"code","33790c08":"code","e28b18f9":"code","bd68a3de":"code","5449168d":"code","9c0cb19d":"code","9d00e29b":"code","6298c342":"code","a1e4d5bc":"markdown","ab58af2b":"markdown","ab715e58":"markdown","6c6d2740":"markdown","1d3f61e3":"markdown","cb957bb7":"markdown"},"source":{"2b0bddbd":"import os\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize.minpack import curve_fit","b595cbc6":"def load_kaggle_csv(dataset: str) -> pd.DataFrame:\n    df = pd.read_csv(f\"\/kaggle\/input\/covid19-global-forecasting-week-2\/{dataset}.csv\", parse_dates=[\"Date\"])\n    df[\"Province_State\"].fillna(\"\", inplace=True)\n    df[\"DayOfYear\"] = df[\"Date\"].dt.dayofyear\n    df[\"Date\"] = df[\"Date\"].dt.date\n    return df","4639984d":"train = load_kaggle_csv(\"train\")\ntest = load_kaggle_csv(\"test\")","bc651ff2":"print(train.head())\nprint(train.describe())","33790c08":"def RMSLE(prediction, actual):\n    return np.sqrt(\n        np.mean(np.power(np.log1p(prediction) - np.log1p(actual), 2))\n    )\n\n\ndef logistic(x, x0, L, k):\n    return L \/ (1 + np.exp(-k * (x - x0)))\n\n\ndef fit(function, x, y, maxfev):\n    # Fuzzy fitter\n    p0 = [np.median(x), y[-1], 0.1]\n    pn0 = p0 * (np.random.random(len(p0)) + [0.5, 1.0, 0.5])\n    try:\n        params, pcov = curve_fit(\n            function,\n            x,\n            y,\n            p0=pn0,\n            maxfev=maxfev,\n            sigma=np.maximum(1, np.sqrt(y)) * (0.1 + 0.9 * np.random.random()),\n            bounds=([0, y[-1], 0.01], [200, 1e6, 1.5]),\n        )\n        pcov = pcov[np.triu_indices_from(pcov)]\n    except (RuntimeError, ValueError):\n        params = p0\n        pcov = np.zeros(len(p0) * (len(p0) - 1))\n    y_hat = function(x, *params)\n    rmsle = RMSLE(y_hat, y)\n    return (params, pcov, rmsle, y_hat)\n\n\ndef fit_model(df: pd.DataFrame, n_samples=2, maxfev=1000):\n    def fit_one(function, ycol):\n        best_rmsle = None\n        best_params = None\n        # best_cov = None\n        # best_y_hat = None\n        for i in range(n_samples):\n            params, cov, rmsle, y_hat = fit(\n                function,\n                df[\"DayOfYear\"].to_numpy(),\n                df[ycol].to_numpy(),\n                maxfev=maxfev,\n            )\n            if rmsle >= (best_rmsle or rmsle):\n                best_rmsle = rmsle\n                best_params = params\n        result = {f\"{ycol}_rmsle\": best_rmsle}\n        result.update({f\"{ycol}_p_{i}\": p for i, p in enumerate(best_params)})\n        return result\n\n    result = {}\n    result.update(fit_one(logistic, \"ConfirmedCases\"))\n    result.update(fit_one(logistic, \"Fatalities\"))\n    return pd.DataFrame([result])","e28b18f9":"train_fit = train.groupby(\n    [\"Country_Region\", \"Province_State\"], observed=True, sort=False\n).apply(lambda x: fit_model(x, n_samples=20, maxfev=1000))","bd68a3de":"print(train_fit.head())\nprint(train_fit.describe())","5449168d":"def predict(df):\n    def predict_one(col):\n        df[f\"predict_{col}\"] = logistic(\n            df[\"DayOfYear\"].to_numpy(),\n            df[f\"{col}_p_0\"].to_numpy(),\n            df[f\"{col}_p_1\"].to_numpy(),\n            df[f\"{col}_p_2\"].to_numpy(),\n        )\n\n    predict_one(\"ConfirmedCases\")\n    predict_one(\"Fatalities\")","9c0cb19d":"test = pd.merge(\n    test,\n    train_fit.reset_index(),\n    on=[\"Country_Region\", \"Province_State\"],\n    how=\"left\",\n)\npredict(test)","9d00e29b":"print(test.head())\nprint(test.describe())","6298c342":"submission = test[[\"ForecastId\", \"predict_ConfirmedCases\", \"predict_Fatalities\"]].rename(\n    columns={\"predict_ConfirmedCases\": \"ConfirmedCases\", \"predict_Fatalities\": \"Fatalities\"})\nsubmission[[\"ConfirmedCases\", \"Fatalities\"]] = submission[[\"ConfirmedCases\", \"Fatalities\"]].round().astype(int)\nsubmission.to_csv('submission.csv', index=False)\nprint(submission.head())\nprint(submission.describe())","a1e4d5bc":"# Predict","ab58af2b":"# Create submission","ab715e58":"## Prepare env","6c6d2740":"## Load data","1d3f61e3":"## Logistic fit\n\nThis makes a simple logistic fit several times with slight variations and selects the one with best RMSLE.","cb957bb7":"# Covid 19 global forcasting (Week 2)"}}