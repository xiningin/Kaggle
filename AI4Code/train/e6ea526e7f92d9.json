{"cell_type":{"61fcc2da":"code","c271e165":"code","4b629033":"code","ff446119":"code","98226c14":"code","20af2f92":"code","b4e66181":"code","7ce44acf":"code","a5f2c21d":"code","650cbc10":"code","4f4d2edc":"code","167694ca":"code","347f282e":"code","59d5cda5":"code","f6a4a25a":"code","eb483c06":"code","0136e244":"code","1bc3ac71":"code","d4a16527":"code","edb42315":"code","856ca668":"code","f5fcb08c":"code","79ef7363":"code","c68cb7d5":"code","3c90fd20":"code","0381829b":"code","8e3e0fb4":"code","a7aab1e9":"code","5e20e135":"code","39addf0e":"code","ff32b87a":"code","7d9c05cc":"code","f2ef7d09":"code","e176d528":"code","ef3ca7a2":"code","00aeead1":"code","da7c7351":"code","45bd23bf":"code","23486090":"code","be085749":"code","6ca001b1":"code","00448d65":"code","bf694698":"code","d500b07c":"code","85648768":"code","4111f985":"code","65bed120":"code","74c23b15":"code","4ce0765c":"code","df92ea40":"code","9fada94f":"code","f3b7feca":"code","bc010591":"code","06de0df2":"code","48fcfb3a":"code","70e8302a":"code","47a53ba8":"code","4175d9a2":"code","45897e2b":"code","31fcce9f":"code","6e479b49":"markdown","0605b82b":"markdown","83b3ed6b":"markdown","6c02ee56":"markdown","1edb6603":"markdown","65c490b6":"markdown","54025b4d":"markdown","9633b822":"markdown","94be8b9e":"markdown","ad2b5035":"markdown","543580d2":"markdown","dc013e14":"markdown","04601be5":"markdown","034fddbb":"markdown","5b96232d":"markdown","e32da90e":"markdown","daf2e5a3":"markdown","02dd08ff":"markdown","54b9231a":"markdown","14c1db6b":"markdown","2c10289a":"markdown","7622daec":"markdown","84bd98ed":"markdown","a6f054eb":"markdown","5f287e91":"markdown","3d049509":"markdown","3e66b528":"markdown","c2ea28ed":"markdown","9871c133":"markdown","96b87472":"markdown","12e13af6":"markdown","e86d0a2b":"markdown","cf56de4f":"markdown","8bb0641a":"markdown","86e93dca":"markdown","d888f40f":"markdown","021be930":"markdown","b805f83f":"markdown","a8fad16d":"markdown","0dbfa3aa":"markdown","f7df77cd":"markdown","be29076f":"markdown","050df811":"markdown"},"source":{"61fcc2da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nPATH_to_file = '\/kaggle\/input\/sf-dst-scoring\/'","c271e165":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","4b629033":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","ff446119":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, RobustScaler, PolynomialFeatures\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve, accuracy_score, recall_score, precision_score, f1_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport datetime as DT","98226c14":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u0431\u043e\u0440\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\n\n\ndef my_describe(df):\n    \"\"\"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0432 \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435\"\"\"\n    temp = {}\n    temp['\u0418\u043c\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430'] = list(df.columns)\n    temp['\u0422\u0438\u043f'] = df.dtypes\n    temp['\u0412\u0441\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439'] = df.describe(include='all').loc['count']\n    temp['\u0427\u0438\u0441\u043b\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432'] = df.isnull().sum().values \n    temp['\u041a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445'] = df.nunique().values\n    temp['\u041c\u0438\u043d\u0438\u043c\u0443\u043c'] = df.describe(include='all').loc['min']\n    temp['\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c'] = df.describe(include='all').loc['max']\n    temp['\u0421\u0440\u0435\u0434\u043d\u0435\u0435'] = df.describe(include='all').loc['mean']\n    temp['\u041c\u0435\u0434\u0438\u0430\u043d\u0430'] = df.describe(include='all').loc['50%']\n    temp = pd.DataFrame.from_dict(temp, orient='index')\n    display(temp.T)\n    return\n\n\ndef show_plot_boxplot(df, column, bins=80):\n    \"\"\"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 boxplot-\u0430\"\"\"\n    color_text = plt.get_cmap('PuBuGn')(0.9)\n    plt.style.use('seaborn')\n    plt.rcParams['figure.figsize'] = (10, 4)\n    _, axes = plt.subplots(2, 1)\n    axes[0].hist(df[column], bins=bins)\n    axes[0].set_title(\"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438 boxplot \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"+column)\n    axes[1].boxplot(df[column], vert=False, showmeans = True)\n    axes[1].set_title('')\n    return\n\n\n# \u041f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0440\u0430\u0441\u0447\u0435\u0442\u0430 IQR \u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u0435\u0439.\n\ndef IQR_perc(df,list_cols):\n    temp = {}\n    temp['\u0418\u043c\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430'] = list_cols\n    temp['IQR'] = df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25)\n    temp['perc25'] = df[list_cols].quantile(0.25)\n    temp['perc75'] = df[list_cols].quantile(0.75)\n    temp['\u041b. \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432'] = df[list_cols].quantile(0.25) - 1.5*(df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25))\n    temp['\u041f. \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432'] =df[list_cols].quantile(0.75) + 1.5*(df[list_cols].quantile(0.75) - df[list_cols].quantile(0.25))\n    temp = pd.DataFrame.from_dict(temp, orient='index')\n    display(temp.T)\n    return\n\n\n\ndef show_confusion_matrix(y_true, y_pred):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 confusion-\u043c\u0430\u0442\u0440\u0438\u0446\u0443\"\"\"\n    color_text = plt.get_cmap('GnBu')(1.0)\n    class_names = ['\u0414\u0435\u0444\u043e\u043b\u0442', '\u041d\u0415 \u0434\u0435\u0444\u043e\u043b\u0442']\n    cm = confusion_matrix(y_true, y_pred)\n    cm[0,0], cm[1,1] = cm[1,1], cm[0,0]\n    df = pd.DataFrame(cm, index=class_names, columns=class_names)\n    \n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.set(xticks=np.arange(cm.shape[1]), yticks=np.arange(cm.shape[0]), title=\"\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a\")\n    ax.title.set_fontsize(15)\n    sns.heatmap(df, square=True, annot=True, fmt=\"d\", linewidths=1, cmap=\"GnBu\")\n    plt.setp(ax.get_yticklabels(), rotation=0, ha=\"right\", rotation_mode=\"anchor\", fontsize=12)\n    plt.setp(ax.get_xticklabels(), rotation=0, ha=\"center\", rotation_mode=\"anchor\", fontsize=12)\n    ax.set_ylabel('\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f', fontsize=14, color = color_text)\n    ax.set_xlabel('\u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f', fontsize=14, color = color_text)\n    b, t = plt.ylim()\n    plt.ylim(b+0.5, t-0.5)\n    fig.tight_layout()\n    plt.show()\n    \n    \ndef all_metrics(y_true, y_pred, y_pred_prob):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\"\"\"\n    dict_metric = {}\n    P = np.sum(y_true==1)\n    N = np.sum(y_true==0)\n    TP = np.sum((y_true==1)&(y_pred==1))\n    TN = np.sum((y_true==0)&(y_pred==0))\n    FP = np.sum((y_true==0)&(y_pred==1))\n    FN = np.sum((y_true==1)&(y_pred==0))\n    \n    dict_metric['P'] = [P,'\u0414\u0435\u0444\u043e\u043b\u0442']\n    dict_metric['N'] = [N,'\u0411\u0415\u0417 \u0434\u0435\u0444\u043e\u043b\u0442\u0430']\n    dict_metric['TP'] = [TP,'\u0418\u0441\u0442\u0438\u043d\u043d\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435']\n    dict_metric['TN'] = [TN,'\u0418\u0441\u0442\u0438\u043d\u043d\u043e \u041d\u0415 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435']\n    dict_metric['FP'] = [FP,'\u041b\u043e\u0436\u043d\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435']\n    dict_metric['FN'] = [FN,'\u041b\u043e\u0436\u043d\u043e \u041d\u0415 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435']\n    dict_metric['Accuracy'] = [accuracy_score(y_true, y_pred),'Accuracy=(TP+TN)\/(P+N)']\n    dict_metric['Precision'] = [precision_score(y_true, y_pred),'\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c = TP\/(TP+FP)'] \n    dict_metric['Recall'] = [recall_score(y_true, y_pred),'\u041f\u043e\u043b\u043d\u043e\u0442\u0430 = TP\/P']\n    dict_metric['F1-score'] = [f1_score(y_true, y_pred),'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 Precision \u0438 Recall']\n    dict_metric['ROC_AUC'] = [roc_auc_score(y_true, y_pred_prob),'ROC-AUC']    \n\n    temp_df = pd.DataFrame.from_dict(dict_metric, orient='index', columns=['\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435', '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438'])\n    display(temp_df) \n\ndef show_roc_curve(y_true, y_pred_prob):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 ROC-\u043a\u0440\u0438\u0432\u0443\u044e\"\"\"\n    fpr, tpr, _ = roc_curve(y_true, y_pred_prob)\n    plt.figure()\n    plt.plot([0, 1], label='\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440', linestyle='--')\n    plt.plot(fpr, tpr, label = '\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f')\n    plt.title('\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f ROC AUC = %0.3f' % roc_auc_score(y_true, y_pred_prob))\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.legend(loc = 'lower right')\n    plt.show()","20af2f92":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\ndf_train = pd.read_csv(DATA_DIR+'\/train.csv')\ndf_test = pd.read_csv(DATA_DIR+'test.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","b4e66181":"df_train.info()","7ce44acf":"df_train.head(5)","a5f2c21d":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439  'default'  \nax = sns.countplot(x=\"default\", data=df_train)","650cbc10":"df_test.info()","4f4d2edc":"df_test.head(5)","167694ca":"sample_submission.head(5)","347f282e":"a = sample_submission.reset_index()\na","59d5cda5":"sample_submission.info()","f6a4a25a":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f default, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","eb483c06":"# \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0449\u0443\u044e \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445  \u043f\u0440\u043e\u0431\u0435\u043b \u043d\u0430 None\n\ndef clear_column(column):\n    return df[column].astype(str).apply(lambda x: None if x.strip() == '' else x)\n\nfor col in df.columns:\n    clear_column(col)","0136e244":"df.info()","1bc3ac71":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u0430\u0440\u0442\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nf, ax = plt.subplots(figsize=(12, 5))\nsns.heatmap(df.isnull(), cbar=True)\ndf.isnull().sum()","d4a16527":"\n# \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\ndf.shape[0] - df.dropna().shape[0]","edb42315":"column = 'education'\nprint(f'\u041e\u0431\u0449\u0430\u044f \u0434\u043e\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 {column}:', round((df[column].isnull().value_counts(normalize=True) * 100),2)[1], '%')\n","856ca668":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 'education'\ndf.education.value_counts().plot.barh()\nplt.show()","f5fcb08c":"#\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446 \"education\". \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 education\ndf['education_isNAN'] = pd.isna(df['education']).astype('uint8')","79ef7363":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0445\u043e\u0434\nedu_income_mean = round(df.groupby(['education']).income.mean())\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\nedu_income_mean.sort_values(inplace=True)","c68cb7d5":"edu_income_mean\n# SCH - school, ...., ACD - academic#\nplt.figure(figsize=(6, 6))\nplt.ylim(top=200_000)\nax = sns.boxplot(x=\"education\", y=\"income\", data=df)","3c90fd20":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 'education' \u0441\u043b\u043e\u0432\u043e\u043c 'Unknown'\ndf['education'] = df['education'].fillna('Unknown')\n# \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0432 data['education'] \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u0445\u043e\u0434\u0430 \u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 \u0432\u0438\u043b\u043a\u043e\u0439 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430\n# \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f c \u0443\u0447\u0435\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 edu_income_mean\n\n\ndef insert_education(row):\n    if row['education'] == 'Unknown':\n        if row['income'] >= (edu_income_mean.iloc[4]+edu_income_mean.iloc[3])\/2:\n            return edu_income_mean.index[4]\n        if (edu_income_mean.iloc[3]+edu_income_mean.iloc[2])\/2 <= row['income'] < (edu_income_mean.iloc[4]+edu_income_mean.iloc[3])\/2:\n            return edu_income_mean.index[3]\n        if (edu_income_mean.iloc[2]+edu_income_mean.iloc[1])\/2 <= row['income'] < (edu_income_mean.iloc[3]+edu_income_mean.iloc[2])\/2:\n            return edu_income_mean.index[2]\n        if (edu_income_mean.iloc[1]+edu_income_mean.iloc[0])\/2 <= row['income'] < (edu_income_mean.iloc[2]+edu_income_mean.iloc[1])\/2:\n            return edu_income_mean.index[1]\n        if row['income'] < (edu_income_mean.iloc[0]+edu_income_mean.iloc[1])\/2:\n            return edu_income_mean.index[0]\n    return row['education']\n\n\ndf['education'] = df.apply(insert_education, axis=1)","0381829b":"df.education.value_counts()","8e3e0fb4":"df.nunique(dropna=False)","a7aab1e9":"pd.set_option('display.max_columns', None)\ndf.head(2)","5e20e135":"# \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndata_cols = ['app_date']\nnum_cols = ['age', 'bki_request_cnt', 'decline_app_cnt', 'income', 'score_bki']\nbin_cols =['sex', 'car', 'car_type', 'foreign_passport', 'good_work', 'education_isNAN'] \ncat_cols =['education', 'region_rating', 'home_address','work_address', 'sna', 'first_time']","39addf0e":"column = 'app_date'\nprint(df[column].min())\nprint (df[column].max())","ff32b87a":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'app_date' \u0432 \u0434\u0430\u0442\u0443\ndf[column] = df[column].apply(lambda x: DT.datetime.strptime(x, '%d%b%Y').date())","7d9c05cc":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u0430\u0442 \u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0438\u0445, \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439)\u0434\u0430\u0442\u044b.\nprint(df[column].min())\nprint(df[column].max())\nstart_date = df[column].min()\ndf[column] = df[column].apply(lambda x: (x - start_date).days)","f2ef7d09":"show_plot_boxplot(df,column)\nnum_cols.append(column)","e176d528":"# \u0414\u043b\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0441\u043d\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 Sample\ntrain_data = df.query('sample == 1')\ntest_data = df.query('sample == 0')","ef3ca7a2":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b IQR, \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nIQR_perc(train_data, num_cols)\nfor column in num_cols:\n    show_plot_boxplot(train_data,column)","00aeead1":"# \u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 'age'\u0438 'app_date'  \u043d\u0430 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u0430\u0445 \u043d\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c  \u0434\u0440\u0443\u0433\u0438\u0435 4 \u0441\u0442\u043e\u043b\u0431\u0446\u0430  \n# \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:\n\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \"bki_request_cnt\":',\\\n        len(train_data.loc[train_data['bki_request_cnt'] > 7.5]))\nprint((len(train_data.loc[train_data['bki_request_cnt'] > 7.5]) \/train_data.shape[0])*100, '% \u043e\u0431\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430')\n\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \"decline_app_cnt\":',\\\n        len(train_data.loc[train_data['decline_app_cnt'] > 2]))\nprint((len(train_data.loc[train_data['decline_app_cnt'] > 2]) \/train_data.shape[0])*100, '% \u043e\u0431\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430')\n \nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \"income\":',\\\n        len(train_data.loc[train_data['income'] > 90_000]))\nprint((len(train_data.loc[train_data['income'] > 90_000]) \/train_data.shape[0])*100, '% \u043e\u0431\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430')\n\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \"score_bki\":',\\\n        len((train_data.loc[train_data['score_bki'] > -0.52907]) + (train_data.loc[-3.29925 > train_data['score_bki']]))) \nprint((len((train_data.loc[train_data['score_bki'] > -0.52907]) + \\\n                (train_data.loc[-3.29925 > train_data['score_bki']]))\/train_data.shape[0])*100, '% \u043e\u0431\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430')\n","da7c7351":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\ntrain_data = train_data.drop(train_data[train_data['bki_request_cnt'] > 7.5].index)\ntrain_data = train_data.drop(train_data[train_data['decline_app_cnt'] > 5].index)\ntrain_data = train_data.drop(train_data[train_data['income'] > 90_000].index)\ntrain_data = train_data.drop(train_data[train_data['score_bki'] > -0.52907].index)\ntrain_data = train_data.drop(train_data[train_data['score_bki'] < -3.29925].index)     ","45bd23bf":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b IQR, \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nIQR_perc(df, num_cols)\nfor column in num_cols:\n    show_plot_boxplot(train_data,column)","23486090":"# \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0432 \u043e\u0434\u0438\u043d\ndf = test_data.append(train_data, sort=False).reset_index(drop=True)","be085749":"## \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 'score_bki' \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\n# \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c\nnum_cols.remove('score_bki')\ndf[num_cols] = df[num_cols].apply(lambda y: np.log(y+1))\nnum_cols.append('score_bki')","6ca001b1":"for column in num_cols:\n    show_plot_boxplot(df,column)","00448d65":"fig, axes = plt.subplots(2, 3, figsize=(22, 12))\nplt.subplots_adjust(wspace = 0.2)\naxes = axes.flatten()\nfor i in range(len(num_cols)):\n    sns.boxplot(x=\"default\", y=num_cols[i], data=df, orient = 'v', ax=axes[i],  showmeans = True)","bf694698":"correlation = df[num_cols].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","d500b07c":"# \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nimp_num = pd.Series(f_classif(df[num_cols], df['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","85648768":"# \u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\n# \u0412 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: No=0, Yes=1\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    df[column] = label_encoder.fit_transform(df[column])\n    \n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndf.head()","4111f985":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430\n# \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 => education{0: 'ACD', 1: 'GRD', 2: 'PGR', 3: 'SCH', 4: 'UGR'}\nlabel_encoder = LabelEncoder()\n\nfor column in cat_cols:\n    df[column] = label_encoder.fit_transform(df[column])\ndf.head()","65bed120":"\"\"\"\u0414\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e mutual_info_classif \n\u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sklearn. \u0414\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u0435\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0435 \u044d\u043d\u0442\u0440\u043e\u043f\u0438\u0438 \n\u0432 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\"\"\"\n\nimp_cat = pd.Series(mutual_info_classif(df[bin_cols + cat_cols], df['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","74c23b15":"train_data = df.query('sample == 1').drop(['sample', 'client_id'], axis=1)\n\ntest_data = df.query('sample == 0').drop(['sample','default'], axis=1)\n# \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c ID \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u043b\u044f  \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Submission\nid_test = test_data.client_id\n# \u0423\u0434\u0430\u043b\u0438\u043c ID \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\ntest_data = test_data.drop(['client_id'], axis=1)\n\n\n# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0437 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\ntrain = pd.get_dummies(train_data, columns=cat_cols, dummy_na=False, dtype='uint8')","4ce0765c":"train.head(2)","df92ea40":"y = train.default.values            # \u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train.drop(['default'], axis=1)","9fada94f":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size=0.20, random_state=RANDOM_SEED)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","f3b7feca":"#model = LogisticRegression()\nmodel_one = LogisticRegression(random_state=RANDOM_SEED)\nmodel_one.fit(X_train, y_train)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ny_pred_prob = model_one.predict_proba(X_test)[:,1]\ny_pred = model_one.predict(X_test)\n\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nall_metrics(y_test, y_pred, y_pred_prob)\nshow_roc_curve(y_test, y_pred_prob)\nshow_confusion_matrix(y_test, y_pred)","bc010591":"# \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 RobastScaler \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \n# \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0432\u0438\u0434\u0443 2-\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\nr_scaler = RobustScaler()\n\n\nX_num = r_scaler.fit_transform(train_data[num_cols].values)\nX_num_test = r_scaler.transform(test_data[num_cols].values)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 2-\u0445 \u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u043d\u0430\u043f\u043e\u0434\u043e\u0431\u0438\u0435 get_dummies\n\"\"\"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e OneHotEncoder \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443(sparse = True), \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u043c\u044f\u0442\u044c \u043d\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \n\u043d\u0443\u043b\u0435\u0439. \u041f\u0440\u0438 (sparse = False) \u0432\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\"\"\"\nX_cat = OneHotEncoder(sparse = False).fit_transform(train_data[cat_cols].values)\nX_cat_test = OneHotEncoder(sparse = False).fit_transform(test_data[cat_cols].values)\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c (\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0435, \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435)\nX = np.hstack([X_num, train_data[bin_cols].values, X_cat])\nTest = np.hstack([X_num_test, test_data[bin_cols].values, X_cat_test])\ny = train_data['default'].values\n\n# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439, \u0432\u044b\u0434\u0435\u043b\u0438\u0432 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel_two = LogisticRegression(random_state=RANDOM_SEED)\n\nmodel_two.fit(X_train, y_train)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\ny_pred_prob = model_two.predict_proba(X_test)[:,1]\ny_pred = model_two.predict(X_test)\n\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nall_metrics(y_test, y_pred, y_pred_prob)\nshow_roc_curve(y_test, y_pred_prob)\nshow_confusion_matrix(y_test, y_pred)","06de0df2":"from sklearn.model_selection import GridSearchCV\n\nC = np.logspace(0, 4, 10)\niter_ = 50\nepsilon_stop = 1e-3\n \nhyperparameters = [\n    {'penalty': ['l1'], \n     'C': C,  \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'C': C, \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'C': C, \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\n# View best hyperparameters\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 max_iter:', best_model.best_estimator_.get_params()['max_iter'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 tol:', best_model.best_estimator_.get_params()['tol'])\n","48fcfb3a":"y = train.default.values            # \u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\nX = train.drop(['default'], axis=1)\n\n# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size=0.20, random_state=RANDOM_SEED)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n# C=166.81\nmodel_3 = LogisticRegression(penalty='l2', C=2.7825594022071245, max_iter=50, class_weight ='balanced', tol= 0.001)\nmodel_3.fit(X_train, y_train)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ny_pred_prob = model_3.predict_proba(X_test)[:,1]\ny_pred = model_3.predict(X_test)\n\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nall_metrics(y_test, y_pred, y_pred_prob)\nshow_roc_curve(y_test, y_pred_prob)\nshow_confusion_matrix(y_test, y_pred)","70e8302a":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435\npoly = PolynomialFeatures(3)\nX_num = poly.fit_transform(train_data[num_cols].values)\nX_num_test =poly.fit_transform(test_data[num_cols].values)\n# \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 RobastScaler \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \n# \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0432\u0438\u0434\u0443 2-\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\nr_scaler = RobustScaler()\n\nX_num = r_scaler.fit_transform(train_data[num_cols].values)\nX_num_test = r_scaler.transform(test_data[num_cols].values)\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 2-\u0445 \u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u043d\u0430\u043f\u043e\u0434\u043e\u0431\u0438\u0435 get_dummies\n\"\"\"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e OneHotEncoder \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443(sparse = True), \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u043c\u044f\u0442\u044c \u043d\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \n\u043d\u0443\u043b\u0435\u0439. \u041f\u0440\u0438 (sparse = False) \u0432\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\"\"\"\nX_cat = OneHotEncoder(sparse = False).fit_transform(train_data[cat_cols].values)\nX_cat_test = OneHotEncoder(sparse = False).fit_transform(test_data[cat_cols].values)\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c (\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0435, \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435)\nX = np.hstack([X_num, train_data[bin_cols].values, X_cat])\nTest = np.hstack([X_num_test, test_data[bin_cols].values, X_cat_test])\ny = train_data['default'].values\n\n# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439, \u0432\u044b\u0434\u0435\u043b\u0438\u0432 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nfrom sklearn.model_selection import GridSearchCV\n\nC = np.logspace(0, 4, 10)\niter_ = 50\nepsilon_stop = 1e-3\n \nhyperparameters = [\n    {'penalty': ['l1'], \n     'C': C,  \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'C': C, \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'C': C, \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\n# View best hyperparameters\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 max_iter:', best_model.best_estimator_.get_params()['max_iter'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 tol:', best_model.best_estimator_.get_params()['tol'])","47a53ba8":"# \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043c\u043e\u0434\u0435\u043b\u044c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0443\u043d\u043a\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n#model_4 = best_model.best_estimator_\n\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0432 'penalty' \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 'solver'\nmodel_4 = LogisticRegression(penalty='l2', C=2.7825594022071245, max_iter=50, solver='sag', class_weight ='balanced', tol= 0.001, random_state=RANDOM_SEED)\n\nmodel_4.fit(X_train, y_train)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\ny_pred_prob = model_4.predict_proba(X_test)[:,1]\ny_pred = model_4.predict(X_test)\n\n# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nall_metrics(y_test, y_pred, y_pred_prob)\nshow_roc_curve(y_test, y_pred_prob)\nshow_confusion_matrix(y_test, y_pred)\n","4175d9a2":"test_data.sample(3)\n","45897e2b":"sample_submission","31fcce9f":"# \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0432\u043e\u0439 submission\npred_prob_submission = model_4.predict_proba(Test)[:,1]\n\nsubmission = pd.DataFrame({'client_id': id_test, \n                            'default': pred_prob_submission})\nsubmission.to_csv('submission.csv', index=False)\nsubmission","6e479b49":"### 2.2. \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0605b82b":"### 4.1 \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","83b3ed6b":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","6c02ee56":"## 4. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","1edb6603":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","65c490b6":"## 1. \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043e\u0442\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","54025b4d":"## \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","9633b822":"### 5. Submission","94be8b9e":"# 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","ad2b5035":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e RobastScaler, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0438   \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u0430 \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c \u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u043b\u0443\u0447\u0448\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c.","543580d2":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0434\u043e\u0445\u043e\u0434\u0430:","dc013e14":"### DATA","04601be5":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u044f\u0432\u043b. score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418, \u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 (age)","034fddbb":"### 2.2.2 \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f","5b96232d":"\u041f\u043e \u0445\u043e\u0434\u0443 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445  train \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0441 \u043d\u0430\u0431\u043e\u0440\u043e\u043c test:\n\n- \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 test.education \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u0445\u043e\u0434\u0430;\n- \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a app_date (\u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438) \u0432 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u043e\u0439, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 app_date \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u0434\u0430\u0447\u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u0437\u0430\u044f\u0432\u043a\u0438 (01.01.2014) \u0432 \u0434\u043d\u044f\u0445;\n- \u0432\u0437\u044f\u043b\u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 age, decline_app_cnt, bki_request_cnt, incom, app_date\n- \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 LabelEncoder;\n- \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a education \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442;\n- \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438(RobustScaler), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f dummy-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","e32da90e":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0441\u043b\u0430\u0431\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 \u043c\u044b \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432\u0441\u0435. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c","daf2e5a3":"\u0413\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b:","02dd08ff":"\u0412\u042b\u0412\u041e\u0414: RobustScaler \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438","54b9231a":"#### \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0443\u0434\u0430\u043b\u043e\u0441\u044c:\n- \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c 4 \u043c\u043e\u0434\u0435\u043b\u0438\n- \u041e\u0442 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432  \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 class_weight ='balanced'\n- \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n- \u0418\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445","14c1db6b":"\u0412\u042b\u0412\u041e\u0414\u042b: \n - \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0442\u0440\u0435\u0442\u044c\u0435\u0439  \u0434\u0430\u043b\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 - recall \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0441\u044f","2c10289a":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u044f\u0432\u043b. sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430, \u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c -\u043f\u043e\u043b (sex), \u0438 \u0432\u043d\u043e\u0432\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f (\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435) \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f - \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c  \u0443 \u043f\u043e\u043b\u0443\u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430 \u043b\u044e\u0434\u0435\u0439 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","7622daec":"### 2.2.1 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","84bd98ed":"### 4.3. \u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","a6f054eb":"## 2.3. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","5f287e91":"## 2.4. \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","3d049509":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044be, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435:","3e66b528":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","c2ea28ed":"### \u041c\u043e\u0434\u0435\u043b\u044c 4. \u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, RobastScaler \u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","9871c133":"\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c \u0441\u0442\u0430\u043b\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 'age', 'decline_app_cnt', 'bki_request_cnt', 'income' \u0438\u043c\u0435\u044e\u0442 \u0442\u044f\u0436\u0451\u043b\u044b\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442 (\u0443 'app_date' - \u043b\u0435\u0432\u044b\u0439), \u043a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043a\u0440\u043e\u043c\u0435 'age' \u0438 'app_date') \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u0430 LogisticRegression.","96b87472":"\n# **\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","12e13af6":"\u0412\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u0438\u043d\u0433 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430.\n\n\n\u0434\u0430\u043d\u043d\u044b\u0435:\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n- client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n- sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n- car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n- decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n- bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n- income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n- foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n- sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n- first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n- score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n- region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n- app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","e86d0a2b":"##### \u0412\u042b\u0412\u041e\u0414\u042b: \n\u041d\u0435 \u0443\u0433\u0430\u0434\u0430\u043d\u044b \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e ROC-AUC \u0432\u044b\u0441\u043e\u043a\u0438\u0439 (\u044d\u0442\u0430 \u043a\u0440\u0438\u0432\u0430\u044f \u043f\u043b\u043e\u0445\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043d\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445). \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u043b\u043d\u043e\u0442\u044b \u0438 f1 \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u0430\u044f: \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u044b \u043f\u043e\u0447\u0442\u0438 \u043d\u0435 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (40 \u0438\u0437 1718). \u042d\u0442\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 recall = 0.023283. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0435\u043d\u044c\u0433\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0434\u0430\u043d\u044b \u043b\u044e\u0434\u044f\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0445 \u043d\u0435 \u0441\u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c","cf56de4f":"### 4.2. \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0435\u0437 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043d\u043e \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (RobastScaler)","8bb0641a":"\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!\n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","86e93dca":"#### \u0412\u044b\u0432\u043e\u0434\u044b:\n- age: \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c: \u043c\u043b\u0430\u0434\u0448\u0435,\n- 'bki_request_cnt': \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n- 'decline_app_cnt' \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n- 'income': \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434-\n- 'app_date': \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u043d\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n- 'score_bki': \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0441\u043a\u043e\u0440\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e \u0441 \u0442\u0435\u043c, \n \u0447\u0442\u043e \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0431\u0440\u0430\u043b\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u044b, \u0438 \u043a\u0430\u043a \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u043b\u0438 \u0441\u0432\u043e\u044e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e ","d888f40f":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0440\u044b \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 f-\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0427\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u044b\u0448\u0435, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f, \u0438 \u0442\u0435\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.","021be930":"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u0441\u043c\u0435\u0449\u0451\u043d\u043d\u044b\u043c\u0438.","b805f83f":"\u0412\u042b\u0412\u041e\u0414\u042b: \n - \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u0432 \u043d\u0435\u0439 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b\u0430\u0441\u044c \u043e\u0448\u0438\u0431\u043a\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0412 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0431\u0430\u043d\u043a \u0440\u0438\u0441\u043a\u0443\u0435\u0442 \u043d\u0435\u0434\u043e\u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0438\u0431\u044b\u043b\u044c. \u0423\u0434\u0430\u043b\u043e\u0441\u044c \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0438\u044f Recall.\n- \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043b\u043e\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'education_isNAN', 'age' \u0438 'sex' \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435  \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e, \u0430 \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u043e, \u0432 \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c","a8fad16d":"### 2.2.3 \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","0dbfa3aa":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438 \u044d\u0442\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u0422\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a \u0441\u0438\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f\u043c \u0432 \u0441\u0443\u043c\u043c\u0430\u0445 \u0443 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.\n\n\u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0438 boxplot-\u043e\u0432 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'score_bki' \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0442\u0430\u043a \u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0435\u0433\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0435\u043b\u044c\u0437\u044f, \u043d\u043e \u0435\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u0442\u0430\u043a \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435. \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c  'score_bki' \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","f7df77cd":"## 3. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","be29076f":"### 2.1. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u044f\u0434\u044b","050df811":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439, \u0443\u0434\u0430\u043b\u0438\u0432 \u043b\u0438\u0448\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b"}}