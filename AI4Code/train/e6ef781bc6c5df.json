{"cell_type":{"aa6a2e3f":"code","74e89a50":"code","bec3c9d6":"code","e9d531ff":"code","dbc281f8":"code","148d9641":"code","2af9221d":"code","7f2c7e6c":"code","24a1eacb":"code","72e5c1ae":"code","161df28a":"code","ba8a0d8d":"code","c1b071d9":"code","1f9e38cf":"code","9135f590":"code","d29c3d8d":"code","2f9a4a2d":"code","e6a39269":"code","26ad74a5":"code","a5842e85":"code","60cd974b":"code","a8e972d6":"code","47cc166f":"code","e89075da":"code","657d0cf0":"code","56de9617":"code","da473e74":"code","71666174":"code","4906a836":"code","a177a644":"code","51f888d9":"code","35c49d54":"code","20a66d52":"code","902f5d34":"code","97ea0cf0":"code","842c6ffd":"code","5c6cfe74":"code","777b82ff":"code","c0bef089":"code","96f324bd":"code","76658484":"code","6627966e":"code","914c83bb":"markdown","b46b83aa":"markdown","d615737d":"markdown","be97b182":"markdown","9b663c74":"markdown","9ce38502":"markdown","72b73de1":"markdown","8598224c":"markdown","30bb742f":"markdown","b5f150fa":"markdown","3a9d28f6":"markdown","a66369a2":"markdown","f4a1c295":"markdown","77f3a319":"markdown","bde2ec24":"markdown","e3eebd01":"markdown","76bcae8b":"markdown","b8e0107a":"markdown"},"source":{"aa6a2e3f":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nimport time\nfrom statsmodels.tsa.holtwinters import Holt\nfrom statsmodels.tsa.arima_model import ARIMA\n# Simple Exponential Smoothing\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom sklearn import metrics\n#pd.set_option('display.max_columns',None)\n#pd.set_option('display.max_rows',None)","74e89a50":"#Frankfurt stock exchange\ndf=pd.read_csv('\/kaggle\/input\/frankfurt-stock-exchange\/frankfurt_stock_exchange.csv',parse_dates=['Date'])#,index_col='Date')\nprint(df.info())\ndf.head()","bec3c9d6":"df.drop(columns=['Change','Last Price of the Day','Daily Traded Units','Daily Turnover','Turnover','Traded Volume'],inplace=True)\ndf.head()","e9d531ff":"data = df\nfor i in ['Open','Close','High','Low']:\n    data[i] = data[i].ffill()\ndata","dbc281f8":"data = data[169:]\ndata['year'] = pd.DatetimeIndex(data['Date']).year\ndata['month'] = [d.strftime('%b') for d in data.Date]\ndata['day'] = pd.DatetimeIndex(data['Date']).dayofweek\ndata.set_index('Date',inplace=True)","148d9641":"data","2af9221d":"# Draw Plot\nfig, axes = plt.subplots(3, 1, figsize=(20,15), dpi= 80)\nsns.boxplot(x='year', y='Close', data=data, ax=axes[0])\nsns.boxplot(x='month', y='Close', data=data,ax = axes[1])\nsns.boxplot(x='day', y='Close', data=data,ax = axes[2])\n\n# Set Title\naxes[0].set_title('Year-wise Box Plot\\n(The Trend)', fontsize=18); \n\naxes[1].set_title('Month-wise Box Plot\\n(The Seasonality)', fontsize=18)\n\naxes[2].set_title('Day-wise Box Plot\\n(The Seasonality)', fontsize=18)\nplt.show()","7f2c7e6c":"plt.plot(data['Close'])","24a1eacb":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom dateutil.parser import parse\n\n# Import Data\n# Multiplicative Decomposition \n#result_mul = seasonal_decompose(data['Total_Sunspots'], model='multiplicative', extrapolate_trend='freq')\n\n# Additive Decomposition\nresult_add = seasonal_decompose(data['Close'], model='add', extrapolate_trend='freq',freq=5)\n\n# Plot\nplt.rcParams.update({'figure.figsize': (5,5)})\n#result_mul.plot().suptitle('Multiplicative Decompose', fontsize=22)\nresult_add.plot().suptitle('Additive Decompose', fontsize=22)\nplt.show()","72e5c1ae":"data['rolling_mean'] = data['Close'].rolling(12).mean()\ndata['Detrend'] = data['Close'] - data['rolling_mean']\nplt.plot(data['rolling_mean'])\nplt.title('Trend',fontsize=16)","161df28a":"from statsmodels.tsa.seasonal import seasonal_decompose\nresult_add = seasonal_decompose(data['Close'], model='mul', extrapolate_trend='freq',freq=96)\ndeseasonalized = data.Close.values -result_add.seasonal\nplt.plot(deseasonalized)\nplt.title('Drug Sales deseasonalized by subtracting the seasonal component', fontsize=16)","ba8a0d8d":"from pandas.plotting import autocorrelation_plot\n\n\n# Draw Plot\nplt.rcParams.update({'figure.figsize':(9,5), 'figure.dpi':120})\nautocorrelation_plot(data['Close'].tolist())","c1b071d9":"from statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\n# Calculate ACF and PACF upto 50 lags\n# acf_50 = acf(df.value, nlags=50)\n# pacf_50 = pacf(df.value, nlags=50)\n\n# Draw Plot\nfig, axes = plt.subplots(1,2,figsize=(16,3), dpi= 100)\nplot_acf(data['Close'].tolist(), lags=200, ax=axes[0])\nplot_pacf(data['Close'].tolist(), lags=50, ax=axes[1])","1f9e38cf":"count = int(data.shape[0]*0.8)\nTrain = data[:count]\nTest = data[count:]\n\ny_hat_avg = Test.copy()\nfit1 = Holt(np.asarray(Train['Close'])).fit()\ny_hat_avg['Holt_Winter'] = fit1.predict(start=count+1,end=data.shape[0])\nplt.figure(figsize=(16,8))\nplt.plot(Train.index, Train['Close'], label='Train')\nplt.plot(Test.index,Test['Close'], label='Test')\nplt.plot(y_hat_avg.index,y_hat_avg['Holt_Winter'], label='Holt_Winter')\nplt.legend(loc='best')","9135f590":"new = data[['Close']]","d29c3d8d":"Train, Test = new.iloc[:count,0], new.iloc[count:,0]\nhistory = [x for x in Train]","2f9a4a2d":"predictions = []\nlower_list = []\nupper_list = []\nfor t in range(len(Test)):\n    model = ARIMA(history, order=(2,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    lower = output[2][0][0]\n    upper = output[2][0][1]\n    predictions.append(yhat)\n    lower_list.append(lower)\n    upper_list.append(upper)\n    obs = Test[t]\n    history.append(obs)\n    print('predicted=%f, expected=%f' % (yhat, obs))","e6a39269":"error = metrics.mean_squared_error(Test, predictions)\nprint('Test MSE: %.3f' % error)","26ad74a5":"# plot\nplt.plot(Test.values,color='black')\nplt.plot(lower_list,color='red')\nplt.plot(upper_list,color='green')\nplt.plot(predictions)\nplt.show()","a5842e85":"new = data[['Close']]\nnew.reset_index(inplace=True)\nnew.columns = ['ds','y']\nnew","60cd974b":"new.shape","a8e972d6":"from fbprophet import Prophet\nm = Prophet()\nmodel = m.fit(new)","47cc166f":"future = m.make_future_dataframe(periods=30)\nfuture.tail()","e89075da":"future.shape, new.shape","657d0cf0":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","56de9617":"forecast['yhat'][:2800].shape\nnew['y'].shape","da473e74":"fig1 = m.plot(forecast)","71666174":"data['HL_PCT']=(data['High']-data['Close'])\/data['Close']*100\ndata['PCT_change']=(data['Close']-data['Open'])\/data['Open']*100\ndata.drop(['year','day','rolling_mean','Detrend','Open','High','Low','month'],axis=1,inplace=True)\ndata","4906a836":"forecast_out=4\ndata['forecast_col'] = data['Close'].shift(-forecast_out)\ndata.dropna(inplace=True)\ndata","a177a644":"train_count =int(data.shape[0]*0.85)\ntest_count = data.shape[0]-train_count","51f888d9":"y_train = data.iloc[:train_count,3]\ny_test  = data.iloc[train_count:,3]\nprint(y_train.shape,y_test.shape)","35c49d54":"x_train = data.iloc[:train_count,0:-1]\nx_test = data.iloc[train_count:,0:-1]","20a66d52":"x_lately=x_train[-forecast_out:]\nx_train=x_train[:-forecast_out]\ndf.dropna(inplace=True)\ny_train=y_train[:-forecast_out]","902f5d34":"print(y_train.shape)","97ea0cf0":"x_train","842c6ffd":"x_train = np.array(x_train)\nx_test = np.array(x_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","5c6cfe74":"from sklearn.ensemble import RandomForestRegressor\nclf = RandomForestRegressor()\nclf.fit(x_train,y_train)\ny_preds = clf.predict(x_test)\ny_lately = clf.predict(x_lately)","777b82ff":"plt.plot(y_preds,color='red')\nplt.plot(y_test)\nplt.show()","c0bef089":"from sklearn import metrics\nprint(metrics.mean_squared_error(y_preds,y_test))","96f324bd":"clf = RandomForestRegressor(n_estimators = 100,min_samples_leaf = 3,min_samples_split = 8)\nclf.fit(x_train,y_train)\ny_preds = clf.predict(x_test)\ny_lately = clf.predict(x_lately)","76658484":"plt.plot(y_preds,color='red')\nplt.plot(y_test)\nplt.show()","6627966e":"from sklearn import metrics\nprint(metrics.mean_squared_error(y_preds,y_test))","914c83bb":"Performing seasonal decompose. You can see the trend in the data. It is trying to find out seasonality but since there is no seasonality in the data, it is filled with blue color. Also notice that there is no pattern in the residue.","b46b83aa":"Pandas autocorrelation plot helps to find the dependency of current value on previous values. As there are no patterns in the below plot we cannot get any intuition.","d615737d":"Let's check the plot of closing price","be97b182":"Creating separate columns for year,month and day. This helps us to check trend and seasonality in the data.","9b663c74":"## Ramdom Forest with parameter tuning","9ce38502":"I have uploaded the dataset in kaggle. You can access the dataset from here \n\nhttps:\/\/www.kaggle.com\/krishnasrujan\/frankfurt-stock-exchange\n","72b73de1":"We make a list for training data and we will be predicting next day's closing price with this data. Later the predicted value is appended to training data and next day's value is predicted again. This is repeated for all the test data.\n\n\nARIMA's forecast function gives 4 outputs.\n\npredicted value\n\nstandard error\n\nlower and upper confidance values which are very important when predicting on time series data.\n","8598224c":"Deseasonalizing the data with seasonal decompose. Since it doesn't have any seasonality, plot doesn't change much.","30bb742f":"## Prophet","b5f150fa":"Below is the plot for orginal test data values, predicted values and confidance interval.\n\nYou can see that the predicted values and original values are collinear. ","3a9d28f6":"Filling null values by forward fill method","a66369a2":"If we see the trend and seasonality plots, there is some trend in the data but there is no seasonality\n either in weekdays or in months.","f4a1c295":"## ARIMA model","77f3a319":"## Random Forest Regressor","bde2ec24":"Detrending the closing price manually.","e3eebd01":"Below plots of autocorrelation and partial autocorrelation play important role in determing the p and q values for ARIMA.","76bcae8b":"Dropping uneccessary columns","b8e0107a":"## Holt Winter's\n\nHolt Winters model doesn't work well on the data. It basically predicts according the the trend. "}}