{"cell_type":{"0c30f7ab":"code","4f18f26f":"code","d46edac5":"code","d218bf56":"code","dca9ef3e":"code","17890701":"code","290d0628":"code","a643dad6":"code","2e41d327":"code","0dceea19":"code","6f259a37":"code","93afc2c6":"code","ca1e69c8":"code","2cf25d83":"code","34484546":"code","272aaae6":"code","aa3454b5":"code","f7bfb377":"code","6c71338b":"code","f10f7a8a":"code","89a74d0f":"code","ec3b8e86":"code","f74f6370":"code","04c048d1":"code","b7fe34b7":"code","277b4145":"code","a5a1a9a2":"code","294ab6f3":"code","a08f2e69":"code","6a438c47":"code","f88258da":"code","a093a37b":"code","eb6b23e0":"code","c5fe42de":"code","dbdc8727":"code","1adc1497":"code","1da4ea55":"code","9adeae71":"code","6665cbc7":"code","9165855e":"code","2ae86675":"code","7b06d683":"code","fe367d0b":"code","9fce84f6":"code","ebcbfc60":"code","fb2e72bd":"code","0242b08b":"code","615e541b":"code","6fff5f5b":"code","4f7f0021":"code","07db6d01":"code","0b6ccc5d":"code","4d2fcbb2":"code","9667a7fb":"markdown","58663382":"markdown","a27c7bc2":"markdown","f234fac7":"markdown"},"source":{"0c30f7ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f18f26f":"from IPython.display import Image\nImage('..\/input\/minions\/minions.jpg')","d46edac5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport array\n#base map\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib import cm\nfrom matplotlib.dates import date2num","d218bf56":"def color_negative_red(val):\n    \"\"\"\n    Takes a scalar and returns a string with\n    the css property `'color: red'` for negative\n    strings, black otherwise.\n    \"\"\"\n    color = 'red' if val < 0 else 'black'\n    return 'color: %s' % color","dca9ef3e":"np.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))],\n               axis=1)\ndf.iloc[0, 2] = np.nan","17890701":"df.style","290d0628":"def color_negative_red(val):\n    \"\"\"\n    Takes a scalar and returns a string with\n    the css property `'color: red'` for negative\n    strings, black otherwise.\n    \"\"\"\n    color = 'red' if val < 0 else 'black'\n    return 'color: %s' % color","a643dad6":"s = df.style.applymap(color_negative_red)\ns","2e41d327":"def highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]","0dceea19":"df.style.apply(highlight_max)\n","6f259a37":"df.head().style","93afc2c6":"df.head().style.applymap(color_negative_red)","ca1e69c8":"df.head().style.apply(highlight_max)","2cf25d83":"def highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: green' if v else '' for v in is_max]","34484546":"df.head().style.apply(highlight_max)","272aaae6":"def highlight_min(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_min = s == s.min()\n    return ['background-color: green' if v else '' for v in is_min]","aa3454b5":"df.head().style.apply(highlight_min, axis=0)\n","f7bfb377":"df.head().style.apply(highlight_min, axis=1)","6c71338b":"df.style.apply(highlight_max, subset=['B', 'C', 'D'])\n","f10f7a8a":"df.head().style.apply(highlight_max, subset=['A', 'C', 'D'])\n","89a74d0f":"\ndf.style.\\\n    applymap(color_negative_red).\\\n    apply(highlight_max)","ec3b8e86":"\ndf.head().style.\\\n    applymap(color_negative_red).\\\n    apply(highlight_max)","f74f6370":"df.style.format(\"{:.3%}\")\n","04c048d1":"df.head().style.highlight_null(null_color='pink')\n","b7fe34b7":"import seaborn as sns\n\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ns = df.style.background_gradient(cmap=cm)\ns","277b4145":"import seaborn as sns\n\ncm = sns.light_palette(\"blue\", as_cmap=True)\n\ns = df.style.background_gradient(cmap=cm)\ns","a5a1a9a2":"import seaborn as sns\n\ncm = sns.light_palette(\"pink\", as_cmap=True)\n\ns = df.style.background_gradient(cmap=cm)\ns","294ab6f3":"df.loc[:4].style.background_gradient(cmap='viridis')\n","a08f2e69":"df.head().style.background_gradient(cmap='viridis')\n","6a438c47":"df.style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'})","f88258da":"df.head().style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'})","a093a37b":"df.style.bar(subset=['A', 'B'], color='#d65f5f')\n","eb6b23e0":"df.head().style.bar(subset=['A', 'B','C'], color='#d65f5f')\n","c5fe42de":"df.style.bar(subset=['A', 'B'], align='mid', color=['#d65f5f', '#5fba7d'])\n","dbdc8727":"df.head().style.bar(subset=['A', 'B','C','D'], align='mid', color=['#d65f5f', '#5fba7d'])\n","1adc1497":"from IPython.html import widgets\n@widgets.interact\ndef f(h_neg=(0, 359, 1), h_pos=(0, 359), s=(0., 99.9), l=(0., 99.9)):\n    return df.style.background_gradient(\n        cmap=sns.palettes.diverging_palette(h_neg=h_neg, h_pos=h_pos, s=s, l=l,\n                                            as_cmap=True)\n    )","1da4ea55":"df.describe().T.style.bar()","9adeae71":"#reading the data frame\ndf=pd.read_csv('..\/input\/ataljalyojana\/Atal Jal 31 March 2021 .xlsx - Sheet1.csv')\ndf.head()","6665cbc7":"df.head().style.apply(highlight_max)\n","9165855e":"df.head().style","2ae86675":"df.head().style.apply(highlight_min)","7b06d683":"df.head().style.apply(highlight_min, axis=0)\n","fe367d0b":"df.head().style.apply(highlight_max, subset=['State','Well Depth'])\n","9fce84f6":"df.head().style.highlight_null(null_color='pink')\n","ebcbfc60":"import seaborn as sns\n\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ns = df.head().style.background_gradient(cmap=cm)\ns","fb2e72bd":"import seaborn as sns\n\ncm = sns.light_palette(\"blue\", as_cmap=True)\n\ns = df.head().style.background_gradient(cmap=cm)\ns","0242b08b":"df.loc[:4].style.background_gradient(cmap='viridis')\n","615e541b":"df.head(10).style.background_gradient(cmap='viridis')\n","6fff5f5b":"df.head().style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'})","4f7f0021":"df.head().style.bar(subset=['Well Depth', 'Pre_2015'], color='#d65f5f')\n","07db6d01":"df.describe().T.style.bar(color=\"yellow\")","0b6ccc5d":"from IPython.html import widgets\n@widgets.interact\ndef f(h_neg=(0, 359, 1), h_pos=(0, 359), s=(0., 99.9), l=(0., 99.9)):\n    return df.head().style.background_gradient(\n        cmap=sns.palettes.diverging_palette(h_neg=h_neg, h_pos=h_pos, s=s, l=l,\n                                            as_cmap=True)\n    )","4d2fcbb2":"Image('..\/input\/thank-you\/download.jpg', width=800, height=600)","9667a7fb":"# Have you ever thought of makinf fun and interesting kernerls?\n Then have a look here , it is interesting with lost of coloring and I call this as full kernels.\n ","58663382":"# Let's color our kernels","a27c7bc2":"# Style to Atal Jal ","f234fac7":"# Thank you\n* Up-votes and comments \n* I ll keep bringing the change \n* Here it is "}}