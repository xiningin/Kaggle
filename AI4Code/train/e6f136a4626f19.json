{"cell_type":{"3ab9e5a3":"code","19c3c7c3":"code","188ac470":"code","0417c11c":"code","215696f6":"code","a2c78061":"code","8caff43e":"code","9c9301d9":"code","dcc664d6":"code","44eb12e2":"code","5c5fbcd7":"code","8442ad15":"code","8c2ac5c3":"code","58f3eb0c":"code","ea6a4423":"code","c4e5e6f7":"code","b6bbf943":"code","fbdd82e9":"code","d5eb1e9e":"code","6e265b17":"code","e2bc2ff0":"code","875fca15":"code","bfdf77c7":"code","159fd42f":"code","95fb661a":"code","a58449e1":"code","1a66ef8e":"code","024470da":"code","153c466b":"code","7b77a2cb":"code","5311c22e":"code","c0809739":"code","3341db08":"code","9c3791ce":"code","4b11b8d4":"code","14fa8d10":"code","dbea030d":"code","beef3298":"code","ff1ac681":"code","12995c0f":"code","96df8608":"code","f3925fac":"code","e91318a4":"code","c37d6262":"code","4a8822f3":"code","26e9ebeb":"code","28cf83d6":"code","2989fc0d":"code","019a70b2":"code","be13d877":"code","443302d8":"markdown","26ade190":"markdown","1c96c73c":"markdown","cd004a4c":"markdown","36500e5a":"markdown","e74d40c5":"markdown","add89dbb":"markdown","773cde34":"markdown","30580afd":"markdown","d7f14b50":"markdown","e879d558":"markdown","f122513f":"markdown","cb621637":"markdown","c704184e":"markdown","6c73756a":"markdown","26a425c4":"markdown","91aab14f":"markdown","0208eeaa":"markdown"},"source":{"3ab9e5a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV \nimport warnings\nwarnings.filterwarnings(\"ignore\") \n\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score","19c3c7c3":"#csv dataset de treinamento\ntrain_ = '..\/input\/titanic\/train.csv'\n#csv dataset para teste\ntest_ = '..\/input\/titanic\/test.csv'\n#csv do exemplo de dataset para submiss\u00e3o\nsubmission_ = '..\/input\/titanic\/gender_submission.csv'","188ac470":"#df treino\ntrain_df = pd.read_csv(train_)\n#df teste\ntest_df = pd.read_csv(test_)\n#df submiss\u00e3o\nsubmission_df = pd.read_csv(submission_)","0417c11c":"submission_df","215696f6":"train_df.head()","a2c78061":"test_df.head()","8caff43e":"train_df['Family_Size'] = train_df['SibSp']+train_df['Parch'] + 1\ntest_df['Family_Size'] = test_df['SibSp']+test_df['Parch'] + 1","9c9301d9":"i = 0\ntrain_df['Size_Family'] = train_df['Family_Size']\nfor fam in train_df['Family_Size']:\n    if fam == 1:\n        #print('Sozinho', fam)\n        train_df['Size_Family'][i] = 'singleton' \n    elif 5 > fam > 1:\n        #print('Pequena', fam)\n        train_df['Size_Family'][i] = 'small'\n    elif 5 <= fam:\n        #print('Grande',fam)\n        train_df['Size_Family'][i] = 'large'\n    i += 1 ","dcc664d6":"train_df.head()","44eb12e2":"#Correla\u00e7\u00e3o entre colunas e survived\ntrain_df.corr()[['Survived']].sort_values(by='Survived', ascending=False)","5c5fbcd7":"# taxa de sobreviventes por classe\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8442ad15":"# taxa de sobreviventes por sexo\ntrain_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","8c2ac5c3":"# taxa de sobrevivente por sexo e classe\ntrain_df[[\"Sex\", \"Survived\",'Pclass']].groupby(['Sex','Pclass']).mean().sort_values(by='Survived', ascending=False)","58f3eb0c":"# taxa de sobrevivente por embarque\ntrain_df[[\"Embarked\", \"Survived\"]].groupby(['Embarked']).mean().sort_values(by='Survived', ascending=False)","ea6a4423":"#N\u00famero de sobreviventes ou n\u00e3o por idade\ng = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","c4e5e6f7":"#N\u00famero de sobreviventes por classe\ng = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Pclass')","b6bbf943":"# Tamanho Fam\u00edlia\ntrain_df[[\"Size_Family\", \"Survived\"]].groupby(['Size_Family']).mean().sort_values(by='Size_Family', ascending=False)","fbdd82e9":"from statsmodels.graphics.mosaicplot import mosaic\nmosaic(train_df, ['Size_Family','Survived'], title = 'Taxa de sobreviv\u00eanvia por tamanho de fam\u00edlia')\nplt.show()","d5eb1e9e":"train_df.info()","6e265b17":"train_df.describe()","e2bc2ff0":"# Trocar dados nulos por 1000 na coluna Age\ntrain_df['Age'] = train_df['Age'].replace(np.nan, 1000)","875fca15":"# M\u00e9dia coluna Age\nmean_age_train = train_df['Age'].mean()\n#Trocar 1000 pela m\u00e9dia da coluna\ntrain_df['Age'] = train_df['Age'].replace(1000, mean_age_train)\n#Ver os dados da coluna\ntrain_df['Age'].unique()","bfdf77c7":"#train_df[[\"Embarked\",\"Survived\"]].groupby(['Embarked']).count()\n# Trocando Dados nulos pelo 'S'\ntrain_df['Embarked'] = train_df['Embarked'].replace(np.nan, 'S')","159fd42f":"train_df['Embarked'].unique()","95fb661a":"train_df.info()","a58449e1":"#Dados de treino sem as colunas 'Cabin', 'Name', 'PassengerId'\ntrain_df = train_df[['Pclass','Sex','SibSp','Age','Parch','Fare','Embarked','Survived','Family_Size']]","1a66ef8e":"train_df.head()","024470da":"#Tranformar colunas 'Sex', 'Embarked' e 'Title' em num\u00e9ricas\ntrain_df['Sex'], Sex_train = train_df['Sex'].factorize()\ntrain_df['Embarked'], Embarked_train = train_df['Embarked'].factorize()","153c466b":"#train_df final\ntrain_df.head()","7b77a2cb":"train_df.corr()[['Survived']]","5311c22e":"test_df.info()","c0809739":"# Trocar dados nulos da coluna Fare por 1000\ntest_df['Fare'] = test_df['Fare'].replace(np.nan, 1000)","3341db08":"#m\u00e9dia coluna Fare\nmean_fare_test = test_df['Fare'].mean()\n#Substituir '1000' pela m\u00e9dia\ntest_df['Fare'] = test_df['Fare'].replace(1000, mean_fare_test)\ntest_df['Fare'].unique()","9c3791ce":"# Trocar dados nulos da coluna Age por 1000\ntest_df['Age'] = test_df['Age'].replace(np.nan, 1000)","4b11b8d4":"#m\u00e9dia coluna Age\nmean_age_test = test_df['Age'].mean()\n#Substituir '1000' pela m\u00e9dia\ntest_df['Age'] = test_df['Age'].replace(1000, mean_age_test)\ntest_df['Age'].unique()","14fa8d10":"test_df.info()","dbea030d":"#Dados de teste sem as colunas 'Cabin', 'Name' e 'PassengerId'\ntest_df = test_df[['Pclass','Sex','SibSp','Age','Parch','Fare','Embarked','Family_Size']]\ntest_df.head()","beef3298":"#Transformando colunas 'Sex' e 'Embarked' em num\u00e9ricas\ntest_df['Sex'], Sex_test = test_df['Sex'].factorize()\ntest_df['Embarked'], Embarked_test = test_df['Embarked'].factorize()","ff1ac681":"#test_df final\ntest_df.head()","12995c0f":"#features\nX = train_df.drop('Survived',axis = 1)\n#target\ny = train_df['Survived']","96df8608":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)","f3925fac":"#X final para submiss\u00e3o da competi\u00e7\u00e3o\nX_test_final = test_df","e91318a4":"#Random Forest\nRF = RandomForestClassifier(random_state = 1)","c37d6262":"# Par\u00e2metros testados\nrf_params = {'random_state': [1],\n             'max_depth': [7, 8, 9, 10, 11, 12],\n             'max_features': [1,3,6],\n             'min_samples_leaf': [1, 2],\n             'min_samples_split': [2, 5, 10],\n             'n_estimators': [100,300]}\n\n#Grid\ngrid = GridSearchCV(RF, \n                    rf_params,\n                    cv = 10,   \n                    n_jobs = -1)\n\ngrid.fit(X_train, y_train)\n\n#Par\u00e2metros do melhor modelo\ngrid.best_params_","4a8822f3":"#melhor modelo\nmodel = RandomForestClassifier(**grid.best_params_)","26e9ebeb":"#treino\nmodel.fit(X_train, y_train)","28cf83d6":"#score\nmodel.score(X_test,y_test)","2989fc0d":"#Valida\u00e7\u00e3o Cruzada\nscores = cross_val_score(model, X, y, cv=10)\nscores.mean()","019a70b2":"#Predi\u00e7\u00e3o para submiss\u00e3o\ntree_pred = model.predict(X_test_final)","be13d877":"#Submiss\u00e3o csv\nsub_df = pd.DataFrame(columns=['PassengerId', 'Survived'])\nsub_df['PassengerId'] = submission_df['PassengerId']\nsub_df['Survived'] = tree_pred\nsub_df.to_csv('submission.csv', header=True, index=False)\nsub_df.head(10)","443302d8":"Com o info \u00e9 poss\u00edvel observar:\n\n* Coluna Age com dados nulos\n* Coluna Cabin com dados nulos\n* Coluna Fare com dados nulos","26ade190":"## An\u00e1lise Explorat\u00f3ria","1c96c73c":"Divis\u00e3o das features e target.","cd004a4c":"Nesta se\u00e7\u00e3o foi adicionado aos datasets as colunas 'Family_Size' e 'Size Family'\n\n[Material de refer\u00eancia](https:\/\/triangleinequality.wordpress.com\/2013\/09\/08\/basic-feature-engineering-with-the-titanic-data\/)","36500e5a":"### test_df","e74d40c5":"* Observe que n\u00e3o h\u00e1 dados '1000' nem nulos","add89dbb":"# Titanic com \u00c1rvore de Decis\u00e3o ","773cde34":"Divis\u00e3o dos dados de treinamento e teste, 70% treino e 30 % teste.","30580afd":"M\u00e9todo grid, para achar os melhores par\u00e2metros paro o modelo.","d7f14b50":"Datasets utilizados ","e879d558":"* Classe 1 tem uma taxa de sobreviv\u00eancia superior as demais. ","f122513f":"* Em ambos os sexos a taxa da classe 1 \u00e9 maior, apesar das mulheres de classe 1 e 2 terem uma taxa bem semelhante. Vale tamb\u00e9m destacar a diferen\u00e7a entre as mulheres de classe 3 com as demais.  ","cb621637":"## Tranformar dataset para poder treinar o modelo","c704184e":"## Modelo","6c73756a":"## Adi\u00e7\u00e3o de colunas","26a425c4":"### Train_df","91aab14f":"* Mulheres t\u00eam uma taxa de sobreviv\u00eancia bem superior aos homens.","0208eeaa":"Com o info \u00e9 poss\u00edvel observar:\n* Coluna Age com dados nulos\n* Coluna Cabin com dados nulos\n* Coluna Embarked com dados nulos"}}