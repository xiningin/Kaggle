{"cell_type":{"04bebcd2":"code","1ad4a564":"code","a133a422":"code","1167ab44":"code","4e1f8fd5":"code","5be6f9c3":"code","4674488e":"code","ce0718de":"code","36146ce0":"code","b88e0f05":"code","87333532":"code","e71f207d":"code","adaa9ea6":"code","39d14148":"code","ea8f4698":"code","b02fe14f":"markdown","3e8ece77":"markdown","0c456297":"markdown"},"source":{"04bebcd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ad4a564":"train_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain_features.head(5)","a133a422":"train_features.values.shape","1167ab44":"train_features.columns","4e1f8fd5":"# Key features\nprint(\"C-features (Cell viability features): \",len([i for i in train_features.columns if 'c-' in i]))\nprint(\"G-features (Gene expression features): \",len([i for i in train_features.columns if 'g-' in i]))\nprint(\"Key features:\")\ntrain_features[['cp_type','cp_time','cp_dose']]","5be6f9c3":"# N\/a values?\nfor column in train_features.columns:\n    if train_features[column].isna().sum() > 0: print(column)","4674488e":"# Doesn't seem like there are any.\n# Feature visualization\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport random\n\nfor index, feature in enumerate(['cp_time','cp_type','cp_dose']):\n    plt.hist(train_features[feature], color = 'bgrcmykw'[index])\n    plt.title(feature)\n    plt.show()","ce0718de":"# What do our targets look like?\ntargets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntargets_scored.drop('sig_id',axis=1, inplace=True)\ntargets_scored.head(5)","36146ce0":"d = {}\nfor moa in targets_scored.columns:\n    d[moa] = sum(targets_scored[moa])\/len(targets_scored[moa])\nsorted_d = list(reversed(sorted(d.items(), key=lambda kv: kv[1])))\nsorted_d[:20]","b88e0f05":"fig = plt.figure(figsize=(30, 10))\nplt.bar(x=[i[0] for i in sorted_d[:10]], height = [i[1] for i in sorted_d[:10]])\nplt.show()","87333532":"# Submit submission","e71f207d":"# Benchmark\nimport copy\npred_input = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\n\ntargets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nsubmission_data = np.zeros((pred_input.values.shape[0],targets_scored.values.shape[1])).astype(str)\nfor index, feature in enumerate(targets_scored.columns[1:]):\n    submission_data[:,index+1] = str(d[feature])\nsubmission_data[:,0] = pred_input['sig_id'].values","adaa9ea6":"submission_df = pd.DataFrame(data=submission_data, columns=targets_scored.columns)\nsubmission_df.head()","39d14148":"submission_df.to_csv('submission.csv',index=False)","ea8f4698":"with open('submission.csv', 'r') as reader:\n    p = reader.readlines()[:2]\np","b02fe14f":"## Let's take a look at the data.","3e8ece77":"## Benchmark Submission","0c456297":"ookay, looks like the data is very sparse."}}