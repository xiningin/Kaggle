{"cell_type":{"bbf1c66d":"code","fdcd483a":"code","58565cf8":"code","6d5dcf82":"code","15fe8b33":"code","376dfb50":"code","85dedf71":"code","4848fa6b":"code","e8bbb897":"code","da5e9a68":"code","0e1d5ae3":"code","4bf04a12":"code","9142780e":"code","7113d8d8":"code","ac15141b":"code","61f1c90e":"code","f881ac82":"markdown","e14a5439":"markdown","e7de34a6":"markdown"},"source":{"bbf1c66d":"# Thikeras.applications 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nnp.random.seed(42)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdcd483a":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nsample_sub = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","58565cf8":"test","6d5dcf82":"train.describe()","15fe8b33":"x = train.drop('label', axis=1)\ny = train['label']\n\nx = np.array(x)\nx_new = []\nfor i in x:\n    x_new.append(i.reshape(28,28, 1))\n\nx = np.array(x_new)\ny = np.array(y)","376dfb50":"#normalize data for test\nx = x \/ 255.0\ntest = test \/ 255.0","85dedf71":"from keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, BatchNormalization, Dropout\n#from keras.utils.np_utils import to_categorical\nimport keras","4848fa6b":"model = Sequential([\n    #Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1))\n    Conv2D(64, kernel_size=5, activation='relu', input_shape=(28, 28, 1)),\n    BatchNormalization(),\n    Dropout(0.25),\n    \n    Conv2D(64, kernel_size=5, activation='relu'),\n    BatchNormalization(),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n    \n    Conv2D(64, kernel_size=3, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n    \n    Conv2D(64, kernel_size=3, activation='relu'),\n    BatchNormalization(),\n    MaxPooling2D((2, 2)),\n    Dropout(0.25),\n    \n    Conv2D(32, kernel_size=3, activation='relu'),\n    BatchNormalization(),\n    \n    Flatten(),\n\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n    \n    Dense(40, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n    \n    Dense(30, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.25),\n    \n    Dense(20, activation='relu'),\n    BatchNormalization(),\n    \n    Dense(10, activation='softmax')\n])\n\nmodel.compile(\n    optimizer='rmsprop',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)","e8bbb897":"model.fit(x, y, epochs=100, batch_size=10)","da5e9a68":"test.describe()","0e1d5ae3":"test_array = np.array(test)\ntest_data = []\nfor i in test_array:\n    test_data.append(i.reshape(28,28, 1))\n\ntest_data = np.array(test_data)","4bf04a12":"p = model.predict_classes(test_data)","9142780e":"p.shape","7113d8d8":"sub = pd.Series(p, index=sample_sub['ImageId'], name='Label')","ac15141b":"os.chdir('\/kaggle\/working\/')\nsub.to_csv('setimo_teste_usando_cnn_on_keras_with_batchnorm_and_dropout.csv')","61f1c90e":"model.save(\"modelo\")\n!zip -r modelo.zip modelo","f881ac82":"from keras.applications.vgg16 import VGG16\nfrom keras import layers, models","e14a5439":"base_model = VGG16(\n    weights = 'imagenet',\n    include_top = False,\n    input_shape = (32,32,3)\n)\n\nbase_model.treinable = False\n\nflatten = layers.Flatten()\ndense_1 = layers.Dense(50, activation='relu')\ndense_2 = layers.Dense(20, activation='relu')\nprediction = layers.Dense(10, activation='softmax')\n\nmodel = models.Sequential([\n    base_model,\n    flatten,\n    dense_1,\n    dense_2,\n    prediction\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy'],\n)","e7de34a6":"## The code bellow is just for future fun"}}