{"cell_type":{"42802b10":"code","4911d87c":"code","95f92f2a":"markdown"},"source":{"42802b10":"import pandas as pd\n\n#imported pandas module\n\n\"\"\"\ni downloaded datas from kaggle as csv file and i put that file in my pycharm work project folder to read it here!\n\ni will also upload csv file here\n\n\n\n\"\"\"\n\n# HOW TO READ DATA\n\n# lets read out dataset first( you can see here \" how to read datasets\"\n\nsoccer = pd.read_csv(\"mlsSalaries.csv\")\n\nprint(soccer)\n\n\"\"\"\n    club last_name    first_name position  base_salary  guaranteed_compensation\n0    ATL   Almiron        Miguel        M    1912500.0               2297000.00\n1    ATL   Ambrose         Mikey        D      65625.0                 65625.00\n2    ATL      Asad         Yamil        M     150000.0                150000.00\n3    ATL     Bloom          Mark        D      99225.0                106573.89\n4    ATL  Carleton        Andrew        F      65000.0                 77400.00\n..   ...       ...           ...      ...          ...                      ...\n611  VAN  Tornaghi         Paolo       GK      80000.0                 80000.00\n612  VAN    Waston       Kendall        D     350000.0                368125.00\n613  VAN  Williams       Sheanon        D     175000.0                184000.00\n614  NaN   Babouli            Mo        F      54075.0                 54075.00\n615  NaN    Ramajo  David Mateos        D     420000.0                453333.33\n\n[616 rows x 6 columns]\n\nyou can see all uotputs right under the code like this\n\nthe reason im doing this make works look better and understandable \nalso you can print out this works and you can work on paper\n\n\"\"\"\n# HOW TO READ FIRST 10 DATA\n\n\n# if you wanna read first 10 data: \" head() \" function\n# if you dont give \"n=\" parameter in the head function its gonna take automatically first 5 data\n\nprint(soccer.head(n=10))\n\n\n\"\"\" club       last_name  ... base_salary guaranteed_compensation\n0  ATL         Almiron  ...   1912500.0              2297000.00\n1  ATL         Ambrose  ...     65625.0                65625.00\n2  ATL            Asad  ...    150000.0               150000.00\n3  ATL           Bloom  ...     99225.0               106573.89\n4  ATL        Carleton  ...     65000.0                77400.00\n5  ATL         Carmona  ...    675000.0               725000.00\n6  ATL           Garza  ...    150000.0               150000.00\n7  ATL  Gonzalez Pirez  ...    250008.0               285008.00\n8  ATL          Goslin  ...     70000.0                74000.00\n9  ATL         Gressel  ...     75000.0                93750.00\n\n[10 rows x 6 columns]\n\nfirst 10 datas \n\"\"\"\n\n# FINDING HOW MANY DATAS IN CSV FILE(counting index(row))\n\nprint(len(soccer.index))\n\n\"\"\"\n616 \n\nther are 616 rows in this csv file\n\n\"\"\"\n\n# FINDING AVARAGE SALARY FROM ALL TOTAL\n\n# first thing we need to take base_salary column as series and then we will use \"mean()\" function\n\nprint(soccer[\"base_salary\"].mean())\n\n\"\"\"\n296977.7368668831\n\nthis is the avarage of salaries\n\n\"\"\"\n\n# FINDING HIGEST SALARY\n\n# we need to take \"base_salary\" column again to find highest salary\n\n# we will use \"max()\" function\n\nprint(soccer[\"base_salary\"].max())\n\n\"\"\"\n6660000.0\n\nthis is the highest salary   \n\n\"\"\"\n\n# HOW TO FIND THE SURNAME WHO HAS HIGHEST GUARANTEED COMPENSATION(TAZMINAT\n\n#first step we need to take \"guaranteed_compensation\" column and then we will make filter on this\n\nprint(soccer[soccer[\"guaranteed_compensation\"] == soccer[\"guaranteed_compensation\"].max()][\"last_name\"])\n\n\"\"\"\n401    Kaka\nName: last_name, dtype: object\n\nwe found as Kaka who has the highest \"guaranteed_compensation\"\n\n\"\"\"\n\n# if you guys wanna make this look better you can take only name as \" kaka \" with \"iloc[]\" function\n\n# you can take any index with iloc[] function\n\n\nprint(soccer[soccer[\"guaranteed_compensation\"] == soccer[\"guaranteed_compensation\"].max()][\"last_name\"].iloc[0])\n\n\"\"\"\nKaka\n\nthe only output will be just  \" kaka \"\n\nwe took index \"0\" here\n\n\"\"\"\n\n\n# HOW TO FIND GONZALES PIREZ's POSITION\n\n# firs step here we need to do: filter as \"last_name\"\n\n\nprint(soccer[soccer[\"last_name\"] == \"Gonzalez Pirez\"])\n\n\"\"\"\n\nclub       last_name  first_name position   base_salary guaranteed_compensation\n7  ATL  Gonzalez Pirez  Leonardo    D     250008.0                285008.0\n\n\nwe can see information about Gonzalez Pirez here\n\n\"\"\"\n# second step here: taking \"position\" column and then taking index as \"0\" which is \"D\"\n\n\nprint(soccer[soccer[\"last_name\"] == \"Gonzalez Pirez\"][\"position\"].iloc[0])\n\n\n\"\"\"\nD\n\noutput will be \"D\" (defanse) here \n\n\"\"\"\n\n# HOW TO MAKE SOCCER PLAYERS GROUP BY POSITION AND FIND AVARAGE SALARIES WITH THIS POSITIONS]\n#we will use \"groupby\" function here\n\nprint(soccer.groupby(\"position\").mean())\n\n\"\"\"\n          base_salary  guaranteed_compensation\nposition                                        \nD         166574.093784            179533.184811\nD-M       134930.000000            154328.927857\nF         489588.598349            557437.206514\nF-M       335834.000000            367920.805000\nF\/M       125000.000000            131250.000000\nGK        146472.515538            158665.155692\nM         376106.218632            406781.788396\nM-D       219032.250000            230282.250000\nM-F       212975.604211            231104.551579\nM\/F       550000.000000            565000.000000\n\n\"\"\"\n\n# HOW TO FIND HOW MANY POSITION IN DATASET\n\n# we can use \"nunique()\" function here\n\nprint(soccer[\"position\"].nunique())\n\n\"\"\"\n\n10\noutput will be \"10\"\n\nthere are 10 different(unique) position in dataset\n\n\"\"\"\n\n# HOW TO FIND: HOW MANY SOCCER PLAYER IN EVERY SINGLE POSITION\n\n# we can use \"value_counts()\" function here:\n\nprint(soccer[\"position\"].value_counts())\n\n\"\"\"\nM      212\nD      185\nF      109\nGK      65\nM-F     19\nD-M     14\nF-M      6\nM-D      4\nF\/M      1\nM\/F      1\nName: position, dtype: int64\n\n\n\n\"\"\"\n\n\n# HOW TO FIND: HOW MANY SOCCER PLAYER PLAYING IN EVERY SINGLE TIME\n\n# we will do \"value_counts()\" here as taking \"club\" column\n\nprint(soccer[\"club\"].value_counts())\n\n\"\"\"\nVAN      32\nPHI      31\nATL      31\nORL      30\nCLB      30\nDAL      29\nSJ       29\nNYCFC    28\nHOU      28\nNYRB     28\nCHI      27\nPOR      27\nMTL      27\nMNUFC    27\nDC       27\nTOR      27\nLA       27\nRSL      27\nCOL      26\nKC       26\nSEA      25\nNE       23\nLAFC      2\nName: club, dtype: int64\n\n\"\"\"\n\n\n# HOW TO FIND: PLAYERS WHO HAS \"SON\" INSIDE OF THEIR SURNAMES\n\n#first step we need write a function here:\n\ndef son_find(last_name):\n    if \"son\" in last_name.lower():\n        return True\n    return False\n\n# we can use \"apply()\" function to use that we created function \"son_find\"\n\nprint(soccer[soccer[\"last_name\"].apply(son_find)])\n\n\n\"\"\"\n      club      last_name  ... base_salary guaranteed_compensation\n21     ATL       Peterson  ...   165300.00               165300.00\n23     ATL       Robinson  ...   125000.04               195000.04\n45     CHI        Johnson  ...    65004.00                65004.00\n48     CHI        Lampson  ...    76000.00                81375.00\n85     CLB        Swanson  ...    85000.00               105416.67\n163     DC       Robinson  ...    69996.00                69996.00\n233     LA       Jamieson  ...    66150.00                66150.00\n265  MNUFC          Ibson  ...   200004.00               210337.40\n276  MNUFC       Thiesson  ...   171000.00               210166.67\n295    MTL  Jackson-Hamel  ...    66150.00                66150.00\n327     NE         Watson  ...   150000.00               155666.67\n338  NYCFC       Harrison  ...   130000.00               165500.00\n341  NYCFC        Johnson  ...   220008.00               220008.00\n400    ORL        Johnson  ...   414000.00               450000.00\n442    PHI        Simpson  ...   465000.00               508333.33\n459    POR        Gleeson  ...   110000.00               115166.67\n522    SEA       Svensson  ...   170000.04               170000.04\n550     SJ       Thompson  ...   150000.00               155000.00\n594    VAN       Jacobson  ...   150000.00               175000.00\n\n[19 rows x 6 columns]\n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","4911d87c":"import pandas as pd\nmlsSalaries copy = pd.read_csv(\"..\/input\/mlsSalaries copy.csv\")","95f92f2a":"**I TRIED TO USE ALL USEFUL FUNCTION TO UNDERSTAND PANDAS**"}}