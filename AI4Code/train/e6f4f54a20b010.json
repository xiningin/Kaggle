{"cell_type":{"4499bfa6":"code","e531eda7":"code","f776cd14":"code","544e8aa7":"code","a26a1f09":"code","0c9fab02":"code","78b579e5":"code","0d0529d1":"code","de989200":"code","f293bf62":"code","54b0b415":"code","da320b43":"code","077fbb1d":"code","005de00d":"code","0b75bc1d":"code","bc804502":"code","73e1929c":"code","6cd60e7b":"code","28c627bc":"markdown","36af2556":"markdown"},"source":{"4499bfa6":"import numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas as pd\nimport seaborn as sns","e531eda7":"#Machinelearning_imports\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n","f776cd14":"data = pd.read_csv('..\/input\/spotifyclassification\/data.csv')","544e8aa7":"data.describe()","a26a1f09":"data.head()\n","0c9fab02":"train,test = train_test_split(data,test_size = 0.15)","78b579e5":"train.shape","0d0529d1":"pos_tempo = data[data['target']==1]['tempo']\nneg_tempo = data[data['target']==0]['tempo']\n\npos_acousticness = data[data['target']==1]['acousticness']\nneg_acousticness = data[data['target']==0]['acousticness']\n\npos_danceability = data[data['target']==1]['danceability']\nneg_danceability = data[data['target']==0]['danceability']\n\npos_duration_ms = data[data['target']==1]['duration_ms']\nneg_duration_ms = data[data['target']==0]['duration_ms']\n\npos_energy = data[data['target']==1]['energy']\nneg_energy = data[data['target']==0]['energy']\n\n\npos_instrumentalness = data[data['target']==1]['instrumentalness']\nneg_instrumentalness = data[data['target']==0]['instrumentalness']\n\npos_key = data[data['target']==1]['key']\nneg_key = data[data['target']==0]['key']\n\npos_mode = data[data['target']==1]['mode']\nneg_mode = data[data['target']==0]['mode']\n\n\npos_liveness = data[data['target']==1]['liveness']\nneg_liveness = data[data['target']==0]['liveness']\n\npos_loudness = data[data['target']==1]['loudness']\nneg_loudness = data[data['target']==0]['loudness']\n\npos_speechiness = data[data['target']==1]['speechiness']\nneg_speechiness = data[data['target']==0]['speechiness']\n\npos_time_signature = data[data['target']==1]['time_signature']\nneg_time_signature = data[data['target']==0]['time_signature']\n\npos_valence = data[data['target']==1]['valence']\nneg_valence = data[data['target']==0]['valence']\n","de989200":"red_blue = ['#FF0000',\n            '#00FFFF']\npalette = sns.color_palette(red_blue)\nsns.set_palette(palette)\nsns.set_style('white')","f293bf62":"fig = plt.figure(figsize=(12,12))\nplt.title(\"Tempo\")\n\npos_tempo.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_tempo.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n","54b0b415":"fig2 = plt.figure(figsize=(15,15))\nax1 = fig2.add_subplot(331)\nax1.set_title(\"Dance\")\npos_danceability.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_danceability.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(332)\nax1.set_title(\"Acousticness\")\npos_acousticness.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_acousticness.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(333)\nax1.set_title(\"Duration\")\npos_duration_ms.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_duration_ms.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(334)\nax1.set_title(\"Energy\")\npos_energy.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_energy.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(335)\nax1.set_title(\"instrumentalness\")\npos_instrumentalness.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_instrumentalness.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(336)\nax1.set_title(\"key\")\npos_key.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_key.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(337)\nax1.set_title(\"speechiness\")\npos_speechiness.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_speechiness.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(338)\nax1.set_title(\"Liveness\")\npos_liveness.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_liveness.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()\n\nax1 = fig2.add_subplot(339)\nax1.set_title(\"loudness\")\npos_loudness.hist(alpha = 0.7, bins = 30, label = 'positive')\nneg_loudness.hist(alpha = 0.7, bins = 30, label = 'negative')\nplt.legend()","da320b43":"train = train.drop(['Unnamed: 0','song_title','artist'], axis = 1)\ntest = test.drop(['Unnamed: 0','song_title','artist'], axis = 1)","077fbb1d":"y_train = pd.DataFrame(train['target']) \nX_train = train.drop(['target'],axis = 1)\n\ny_test = pd.DataFrame(test['target']) \nX_test = test.drop(['target'],axis = 1)\n","005de00d":"tree = DecisionTreeClassifier()\ntree.fit(X_train,y_train)","0b75bc1d":"ypred = tree.predict(X_test)\nypred","bc804502":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_test,ypred)","73e1929c":"from sklearn.ensemble import RandomForestClassifier\n\nforest = RandomForestClassifier(n_estimators=250)\nforest.fit(X_train,y_train.values.ravel())\ny_pred_forest = forest.predict(X_test)\n\naccuracyforest = accuracy_score(y_test,y_pred_forest)\n","6cd60e7b":"accuracyforest","28c627bc":"*Key* parameter in the data set corresponds to 0 = C, 1 = C\u266f\/D\u266d, 2 = D and so on according to the [Pitch Class notation](https:\/\/en.wikipedia.org\/wiki\/Pitch_class)","36af2556":"# Spotify Exploratory Data Analysis "}}