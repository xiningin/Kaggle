{"cell_type":{"0f2f3639":"code","2c050c98":"code","7072bca9":"code","b9ee3ecc":"code","dd6f1c37":"code","fc2960a7":"code","4279d527":"code","71c8c074":"code","13063b19":"code","194e2db1":"code","ae87577a":"code","71b0f71c":"code","6eeb5f8c":"code","ada8ac06":"code","33358c9d":"code","7f5b013f":"code","d3a04293":"code","151d7bf5":"code","978cffc5":"code","60457a0e":"code","9a2a8c52":"code","87771955":"code","05464891":"code","bdc7bd98":"code","7a0c98b7":"code","5ee3a4d2":"code","3e3e4df8":"code","c04030b7":"code","496076d4":"code","aae60626":"code","e68b9fbf":"code","d43ea0f5":"code","a23a7ec2":"markdown","bf9ba380":"markdown","d8feb0ca":"markdown","8dd74f3b":"markdown","5c456327":"markdown","eaf1095a":"markdown","6c1f818a":"markdown","47093ebe":"markdown","4702b71b":"markdown","726391d1":"markdown","70a5df4a":"markdown","ad50d78e":"markdown","1eff4844":"markdown","26e577bb":"markdown","77d241bf":"markdown"},"source":{"0f2f3639":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import *\nfrom sklearn import metrics","2c050c98":"salePriceDf = pd.read_csv('..\/input\/house-selling-data\/sample_submission.csv')\nsalePriceDf","7072bca9":"salePriceDf.info()","b9ee3ecc":"housingDf = pd.read_csv('..\/input\/house-selling-data\/test.csv')\nhousingDf","dd6f1c37":"housingDf.info()","fc2960a7":"housingDf[\"SalePrice\"] = salePriceDf[\"SalePrice\"]","4279d527":"housingDf = housingDf[[\"MSSubClass\", \"LotFrontage\", \"LotArea\", \"OverallQual\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\", \"MasVnrArea\", \"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"TotRmsAbvGrd\", \"Fireplaces\", \"GarageYrBlt\", \"GarageCars\", \"GarageArea\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\", \"MiscVal\", \"SalePrice\"]]","71c8c074":"housingDf = housingDf.dropna()","13063b19":"housingDf","194e2db1":"x = housingDf[[\"MSSubClass\", \"LotFrontage\", \"LotArea\", \"OverallQual\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\", \"MasVnrArea\", \"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"TotRmsAbvGrd\", \"Fireplaces\", \"GarageYrBlt\", \"GarageCars\", \"GarageArea\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\", \"MiscVal\"]]","ae87577a":"y = housingDf[\"SalePrice\"]","71b0f71c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","6eeb5f8c":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\npipeline = Pipeline([('std_scalar', StandardScaler())])\n\nx_train = pipeline.fit_transform(x_train)\nx_test = pipeline.transform(x_test)","ada8ac06":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(x_train,y_train)","33358c9d":"plt.scatter(y_test, lin_reg.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","7f5b013f":"from sklearn.svm import SVR\n\nsvm_reg = SVR(kernel='rbf', C=1000000, epsilon=0.001)\nsvm_reg.fit(x_train, y_train)","d3a04293":"plt.scatter(y_test, svm_reg.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","151d7bf5":"from sklearn.linear_model import Ridge\n\nmodel = Ridge(alpha=100, solver='cholesky', tol=0.0001, random_state=42)\nmodel.fit(x_train, y_train)","978cffc5":"plt.scatter(y_test, model.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","60457a0e":"from sklearn.linear_model import Lasso\n\nmodel = Lasso(alpha=0.1, precompute=True, positive=True, selection='random', random_state=42)\nmodel.fit(x_train, y_train)","9a2a8c52":"plt.scatter(y_test, model.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","87771955":"from sklearn.linear_model import ElasticNet\n\nmodel = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nmodel.fit(x_train, y_train)","05464891":"plt.scatter(y_test, model.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","bdc7bd98":"from sklearn.linear_model import SGDRegressor\n\nsgd_reg = SGDRegressor(alpha=0.0001, epsilon=0.01, eta0=0.1, penalty='elasticnet')\nsgd_reg.fit(x_train, y_train)","7a0c98b7":"plt.scatter(y_test, sgd_reg.predict(x_test),color='g')\nplt.xlabel(\"True Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","5ee3a4d2":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('__________________________________')","3e3e4df8":"test_pred = lin_reg.predict(x_test)\ntrain_pred = lin_reg.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","c04030b7":"\ntest_pred = svm_reg.predict(x_test)\ntrain_pred = svm_reg.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","496076d4":"test_pred = model.predict(x_test)\ntrain_pred = model.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","aae60626":"test_pred = model.predict(x_test)\ntrain_pred = model.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","e68b9fbf":"from sklearn.linear_model import ElasticNet\n\nmodel = ElasticNet(alpha=0.1, l1_ratio=0.9, selection='random', random_state=42)\nmodel.fit(x_train, y_train)\n\ntest_pred = model.predict(x_test)\ntrain_pred = model.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","d43ea0f5":"test_pred = sgd_reg.predict(x_test)\ntrain_pred = sgd_reg.predict(x_train)\n\nprint('Test set evaluation:')\nprint_evaluate(y_test, test_pred)\n\nprint('\\nTrain set evaluation:')\nprint_evaluate(y_train, train_pred)","a23a7ec2":"# Models\n# Linear Regression","bf9ba380":"# Error Comparison\n#### - Mean Absolute Error\n#### - Mean Squared Error\n#### - Root Mean Squared Error\n\n","d8feb0ca":"# Ridge","8dd74f3b":"# Lasso","5c456327":"## - Linear Regression","eaf1095a":"# SGD Regressor","6c1f818a":"# SVM","47093ebe":"# Ridge","4702b71b":"# Elastic","726391d1":"# --------------------------------------------------------------------------------","70a5df4a":"# SVM","ad50d78e":"# Lasso","1eff4844":"# Elastic","26e577bb":"# SGD Regressor","77d241bf":"# --------------------------------------------------------------------------------"}}