{"cell_type":{"8415000f":"code","37cef869":"code","f8ab3ab2":"code","16565ae4":"code","75e6ef95":"code","4bdcec83":"code","8d5cb7f2":"code","c61d94da":"code","59d8e13e":"code","4ced6782":"code","13d29a4f":"code","80a01d20":"code","f04c989e":"code","b9265d95":"code","53a40afc":"code","f0a7fa52":"markdown"},"source":{"8415000f":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","37cef869":"train = pd.read_csv(\"..\/input\/parkinsons-disease-classification\/pd_speech_features.csv\")\ntrain","f8ab3ab2":"cols=train.columns.tolist()","16565ae4":"fig, ax = plt.subplots(189,4,figsize=(16,320))\nfor i in tqdm(range(756)):\n    if i<755:\n        r=i\/\/4\n        c=i%4\n        sns.histplot(train[train['class']==0][cols[i]], label=cols[i]+' class=0', ax=ax[r,c], color='black',bins=50)\n        sns.histplot(train[train['class']==1][cols[i]], label=cols[i]+' class=1', ax=ax[r,c], color='C1',bins=50)\n        ax[r,c].legend()\n        ax[r,c].grid()\n    else:\n        r=i\/\/4\n        c=i%4\n        ax[r,c].axis(\"off\")       \nplt.show()","75e6ef95":"X=train.drop(['id','class'],axis=1)\ny=train['class']\ntarget=['class']","4bdcec83":"df_columns=X.columns.tolist()","8d5cb7f2":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","c61d94da":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","59d8e13e":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","4ced6782":"train_feat_df = to_feature(X)\n#test_feat_df = to_feature(test)","13d29a4f":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","80a01d20":"params = {'num_leaves': 87, \n          'objective': 'rmse', \n          'max_depth': 7, \n          'learning_rate': 0.09748087873412174, \n          'lambda_l1': 0.00010052517998860749, \n          'lambda_l2': 0.05579427732202242, \n          'bagging_freq': 4, \n          'bagging_fraction': 0.7343943484153586, \n          'feature_fraction': 0.7153132030101248, \n          'verbosity': 3}","f04c989e":"from sklearn.model_selection import KFold\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=y\n    yar=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, yar))\n    oof, models = fit_lgbm(train_feat_df.values, yar, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('Predicted train '+target[i],fontsize=12)\n    ax.set_ylabel('Actual train '+target[i],fontsize=12)\n    ax.scatter(oof,yar)","b9265d95":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    print()\n    print(\"Importance Top 50\")\n    print(order.tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","53a40afc":"MODELS=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=y\n    yar=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, yar))\n    oof, models = fit_lgbm(train_feat_df.values, yar, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title('Importance for '+target[i],fontsize=20)\n    MODELS+=[models]","f0a7fa52":"- param values were obtained by the optuna tuning in the following notebook.<br\/>\nhttps:\/\/www.kaggle.com\/stpeteishii\/parkinson-s-disease-lightgbm"}}