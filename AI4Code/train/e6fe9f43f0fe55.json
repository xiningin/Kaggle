{"cell_type":{"66bb922e":"code","06d7f417":"code","c360ea5c":"code","6805d14e":"code","19371da5":"code","d95ccac1":"code","fcdb06a3":"code","d1678bec":"code","44fc8a91":"code","097d77f9":"code","e9f3ecb9":"code","124df99a":"code","ac5a2554":"code","154f9ee3":"code","e5a89d5c":"code","670273fc":"code","597b03a8":"code","d25fcaaa":"code","d32c34ce":"code","84cf4033":"code","d18afc00":"code","49ccb44d":"code","8aaefc65":"markdown"},"source":{"66bb922e":"# Import Required Libraries\n\nimport os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten, BatchNormalization\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n%matplotlib inline\nsns.set_style('whitegrid')","06d7f417":"# function to read data from the directory and resize images\n\nlabels = ['NORMAL', 'PNEUMONIA']\nIMG_SIZE = 150\n\ndef get_data(img_path):\n    data = []\n    \n    for label in labels:\n        path = os.path.join(img_path, label)\n        target_label = labels.index(label)\n        \n        for img in os.listdir(path):\n            try:\n                img_file = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                img_resize = cv2.resize(img_file, (IMG_SIZE, IMG_SIZE))\n                data.append([img_resize, target_label])\n            except Exception as e:\n                print(e)\n    \n    return np.array(data)","c360ea5c":"# load train, test and validation datasets\n\ntrain_data = get_data('..\/input\/chest-xray-pneumonia\/chest_xray\/train')\ntest_data = get_data('..\/input\/chest-xray-pneumonia\/chest_xray\/test')\nval_data = get_data('..\/input\/chest-xray-pneumonia\/chest_xray\/val')\n\n# check datasets size\n\nprint(train_data.shape)\nprint(test_data.shape)\nprint(val_data.shape)","6805d14e":"# Check the number of samples in each datasets\n\ndef get_counts(data):\n    \n    lbl = []\n    for rec in data:\n        if(rec[1] == 1):\n            lbl.append('Pneumonia')\n        else:\n            lbl.append('Normal')\n    \n    return lbl\n    \n\nplt.figure(figsize=(10, 6))\nplt.subplot(1, 3, 1)\ntrain_count = get_counts(train_data)\nsns.countplot(train_count)\nplt.title('Train Data')\n\nplt.subplot(1, 3, 2)\ntest_count = get_counts(test_data)\nsns.countplot(test_count)\nplt.title('Test Data')\n\nplt.subplot(1, 3, 3)\nval_count = get_counts(val_data)\nsns.countplot(test_count)\nplt.title('Val Data')\n\nplt.show()","19371da5":"# Display few sample images from both targets\n\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.imshow(train_data[0][0], cmap='gray')\nplt.title(labels[train_data[0][1]])\n\nplt.subplot(1, 2, 2)\nplt.imshow(train_data[-1][0], cmap='gray')\nplt.title(labels[train_data[-1][1]])\n\nplt.show()","d95ccac1":"# feature and target separations\n\ndef feature_exctract(data):\n    features = []\n    targets = []\n    \n    for feature, target in data:\n        features.append(feature)\n        targets.append(target)\n        \n    return features, targets\n\nX_train, y_train = feature_exctract(train_data)\nX_test, y_test = feature_exctract(test_data)\nX_val, y_val = feature_exctract(val_data)","fcdb06a3":"# data normalization\n\nX_train = np.array(X_train) \/ 255\nX_test = np.array(X_test) \/ 255\nX_val = np.array(X_val) \/ 255\n\ny_train = np.array(y_train)\ny_test = np.array(y_test)\ny_val = np.array(y_val)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(X_val.shape)\n\nprint(len(y_train))\nprint(len(y_test))\nprint(len(y_val))","d1678bec":"# resize the data for neural network input\n\nX_train = X_train.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\nX_test =X_test.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\nX_val = X_val.reshape(-1, IMG_SIZE, IMG_SIZE, 1)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(X_val.shape)","44fc8a91":"# Data augmentation\n\ndatagen = ImageDataGenerator(featurewise_center=False,\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.22, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = True,  # randomly flip images\n        vertical_flip=False)\n\ndatagen.fit(X_train)","097d77f9":"# create model\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu', input_shape=X_train[1].shape))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel.add(Conv2D(filters=256, kernel_size=(3, 3), strides=(1, 1), padding='same', kernel_initializer='normal', activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=64, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1 , activation='sigmoid'))\n\nadam = Adam(lr=0.001)\n\nmodel.compile(optimizer=adam , loss='binary_crossentropy' , metrics=['accuracy'])\n\nmodel.summary()","e9f3ecb9":"# learning rate reduction and early stopping\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience=2, verbose=1,factor=0.3, min_lr=0.000001)\n\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=4)","124df99a":"history = model.fit(datagen.flow(X_train, y_train, batch_size=32),\n                    validation_data=datagen.flow(X_val, y_val),\n                    epochs=20,\n                   callbacks=[learning_rate_reduction, early_stop])","ac5a2554":"print('Loss of the model: ', model.evaluate(X_test, y_test)[0])\nprint('Accuracy of the model: ', model.evaluate(X_test, y_test)[1])","154f9ee3":"# save the model\n\nmodel.save('pneumonia_detection.h5')","e5a89d5c":"# plot the accuracy and loss metrics\n\nloss = pd.DataFrame(history.history)\n\nloss.plot(figsize=(10, 6))\nplt.show()","670273fc":"predictions = model.predict_classes(X_test)\npredictions = predictions.reshape(1, -1)[0]","597b03a8":"print('Classification Report \\n\\n', classification_report(y_test, predictions, target_names=['Pneumonia (Class 0)','Normal (Class 1)']))","d25fcaaa":"cm = confusion_matrix(y_test, predictions)\nprint('Confusion Metrics \\n\\n', cm)","d32c34ce":"cm = pd.DataFrame(cm , index = ['0','1'] , columns = ['0','1'])\n\nsns.heatmap(cm, annot=True, cmap= \"viridis\", fmt='', linewidths=.5, xticklabels = labels,yticklabels = labels)","84cf4033":"# Samples predictions\n\ncorrect_prediction = np.nonzero(predictions == y_test)[0]\nincorrect_prediction = np.nonzero(predictions != y_test)[0]","d18afc00":"\nplt.figure(figsize=(10, 15))\nk=0\nfor i in correct_prediction[:6]:\n    plt.subplot(3, 2, k+1)\n    plt.imshow(X_test[i].reshape(150,150), cmap='gray', interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(predictions[i], y_test[i]))\n    plt.tight_layout()\n    k += 1\n\nplt.show()","49ccb44d":"plt.figure(figsize=(10, 15))\nk=0\nfor i in incorrect_prediction[:6]:\n    plt.subplot(3, 2, k+1)\n    plt.imshow(X_test[i].reshape(150,150), cmap='gray')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(predictions[i], y_test[i]))\n    plt.tight_layout()\n    k += 1\n\n#plt.show()","8aaefc65":"## Pneumonia Detection from chest X-ray"}}