{"cell_type":{"5386f291":"code","207dd645":"code","b88c4fee":"code","985a7c24":"code","498cfce4":"code","fa94013b":"code","25379595":"code","10d2b528":"code","30d5d564":"code","5ea91b14":"code","81862e64":"code","d6dc9bff":"code","1959b3d0":"code","a090220c":"code","eeff6284":"code","6c5d3f01":"code","5ed77166":"code","2af6a300":"code","e2727d9c":"code","f6482849":"code","72cd1dfd":"code","bcca71ca":"code","f8314e4c":"code","16e435dc":"code","b50496ed":"code","70209bdb":"code","fce4feeb":"code","f2f653db":"code","a3c34e01":"code","70939f2c":"code","fdedbdc6":"code","e1153cc5":"code","bec379d9":"code","c18ba36c":"code","f110e986":"code","c5879a63":"code","bb56c115":"code","f9c02c33":"code","7678d03b":"code","3f79f86e":"code","80b293d7":"code","346b0a86":"code","d34bfe22":"code","86c6252b":"code","ae3f0da8":"code","cc0e09f6":"code","df449aa9":"code","492ce332":"code","34409f0f":"code","2fe358e7":"code","3973e9ea":"code","0271f020":"code","8c3cad8e":"code","ed7a8389":"code","3a282fae":"code","352f73ae":"code","bc3a7ba9":"code","6f2c1f07":"code","dcf4d03d":"code","e67f2d84":"code","049c1a12":"code","58b0dcf8":"code","97012040":"code","98a6a4b7":"code","40ac2744":"code","f598e06b":"code","35c7d5e7":"code","3279aef5":"code","c292133f":"code","82c088ef":"code","6af2c691":"code","5ee509eb":"markdown","7bc33812":"markdown","85324647":"markdown","faf923ca":"markdown","95093dc4":"markdown","c6735ab9":"markdown","a8d03899":"markdown","edc8eed9":"markdown","7219ed23":"markdown","a7f155c6":"markdown","be21577d":"markdown","95814502":"markdown","c2701d69":"markdown","f24b9884":"markdown","7054979e":"markdown","0a8d2e71":"markdown","74236926":"markdown","e78181bd":"markdown","c53edcb6":"markdown","8ff1cc6a":"markdown","5bc6c6e1":"markdown","c314cde7":"markdown","b28ad85d":"markdown","7bd45030":"markdown","537923d2":"markdown","6be553e4":"markdown","ad0d53e3":"markdown","9d8ff215":"markdown","1de114bf":"markdown","42e6f17e":"markdown","9ad16b00":"markdown","3ded456c":"markdown","381eb4b8":"markdown"},"source":{"5386f291":"!wget https:\/\/nlp.cs.unc.edu\/data\/lxmert_data\/vqa\/train.json -P data\/\n!wget https:\/\/nlp.cs.unc.edu\/data\/lxmert_data\/vqa\/nominival.json -P  data\/\n!wget https:\/\/nlp.cs.unc.edu\/data\/lxmert_data\/vqa\/minival.json -P data\/","207dd645":"import json\nimport numpy as np\nimport pandas as pd","b88c4fee":"f1 = open('.\/data\/minival.json')\n \n# returns JSON object as\n# a dictionary\ndata_mini = json.load(f1)\n\nf2 = open('.\/data\/nominival.json')\n \n# returns JSON object as\n# a dictionary\ndata_nomini = json.load(f2)\n\nf3 = open('.\/data\/train.json')\n \n# returns JSON object as\n# a dictionary\ndata_train = json.load(f3)","985a7c24":"from collections import Counter","498cfce4":"counter_mini = Counter(item['question_type'] for item in data_mini)\ncounter_nomini = Counter(item['question_type'] for item in data_nomini)\ncounter_train = Counter(item['question_type'] for item in data_train)\n\ncounter_mini_ans = Counter(item['answer_type'] for item in data_mini)\ncounter_nomini_ans = Counter(item['answer_type'] for item in data_nomini)\ncounter_train_ans = Counter(item['answer_type'] for item in data_train)","fa94013b":"counter_val = counter_mini + counter_nomini","25379595":"counter_val.most_common(len(counter_val))","10d2b528":"counter_train.most_common(len(counter_train))","30d5d564":"#[(i, c2[i] \/ len(data_train) * 100.0) for i in c2]","5ea91b14":"counter_val_ans = counter_mini_ans + counter_nomini_ans","81862e64":"counter_val_ans","d6dc9bff":"[(i, counter_val_ans[i] \/ (len(data_nomini)+len(data_mini)) * 100.0) for i in counter_val_ans]","1959b3d0":"counter_train_ans","a090220c":"[(i, counter_train_ans[i] \/ len(data_train) * 100.0) for i in counter_train_ans]","eeff6284":"!pip install webcolors\nimport webcolors","6c5d3f01":"len(webcolors.CSS3_NAMES_TO_HEX.keys())","5ed77166":"all_colours = list(webcolors.CSS3_NAMES_TO_HEX.keys())","2af6a300":"import re\ndef clean_text(text):\n    return re.sub(r'[^\\w\\s]', '', text)","e2727d9c":"data_val = data_mini + data_nomini","f6482849":"data_val[0]","72cd1dfd":"colours_marks = []\nfor item in data_val:\n    if any(x in clean_text(item[\"sent\"]).split() for x in all_colours):\n        colours_marks.append([item[\"question_id\"], 1])\n    else:\n        colours_marks.append([item[\"question_id\"], 0])","bcca71ca":"np.array(colours_marks)[:, 1].sum()","f8314e4c":"color_mention_marks = []\nfor item in data_val:\n    if (\n        any(\n            x in clean_text(item[\"sent\"]).split()\n            for x in [\"color\", \"colour\", \"colors\", \"colours\"]\n        )\n        and \"color\" not in item[\"question_type\"]\n        and \"colour\" not in item[\"question_type\"]\n    ):\n        color_mention_marks.append([item[\"question_id\"], 1])\n    else:\n        color_mention_marks.append([item[\"question_id\"], 0])","16e435dc":"np.array(color_mention_marks)[:, 1].sum()","b50496ed":"colours_ans = []\nfor item in data_val:\n    if any(x in list(item[\"label\"].keys()) for x in all_colours):\n        colours_ans.append([item[\"question_id\"], 1])\n    else:\n        colours_ans.append([item[\"question_id\"], 0])","70209bdb":"np.array(colours_ans)[:, 1].sum()","fce4feeb":"spatial = [\n           \"left\", \"right\", \"up\", \"down\", \"above\", \"across\", \"near\", \"around\",\n           \"behind\", \"beside\", \"down\", \"from\", \"in\", \"inside\", \"into\", \"next\",\n           \"on\", \"out\", \"outside\", \"over\", \"through\", \"under\"\n    ]","f2f653db":"spatial_marks = []\nfor item in data_val:\n    if any(x in clean_text(item[\"sent\"]).split() for x in spatial):\n        spatial_marks.append([item[\"question_id\"], 1])\n    else:\n        spatial_marks.append([item[\"question_id\"], 0])","a3c34e01":"np.array(spatial_marks)[:, 1].sum()","70939f2c":"spatial_marks_ans = []\nfor item in data_val:\n    if any(x in list(item[\"label\"].keys()) for x in spatial):\n        spatial_marks_ans.append([item[\"question_id\"], 1])\n    else:\n        spatial_marks_ans.append([item[\"question_id\"], 0])","fdedbdc6":"np.array(spatial_marks_ans)[:, 1].sum()","e1153cc5":"animals = [\n           \"animal\", \"animals\", \"cat\", \"cats\", \"dog\", \"horse\", \"duck\", \"parrot\", \n           \"bird\", \"chicken\", \"cow\", \"elephant\", \"fish\", \"fox\", \"lion\",\n           \"monkey\", \"pig\", \"penguin\", \"rabbit\", \"sheep\", \"tiger\", \"whale\", \n           \"wolf\", \"elephants\", \"giraffe\", \"giraffes\", \"dogs\", \"horses\", \n           \"ducks\", \"birds\", \"cows\", \"foxes\", \"lions\", \"monkeys\", \"pigs\", \n           \"penguins\", \"rabbits\", \"puppy\", \"tigers\", \"wolves\", \"bear\", \"bears\"\n    ]","bec379d9":"animals_marks = []\nfor item in data_val:\n    if any(x in clean_text(item[\"sent\"]).split() for x in animals):\n        animals_marks.append([item[\"question_id\"], 1])\n    else:\n        animals_marks.append([item[\"question_id\"], 0])","c18ba36c":"np.array(animals_marks)[:, 1].sum()","f110e986":"animals_marks_ans = []\nfor item in data_val:\n    if any(x in list(item[\"label\"].keys()) for x in animals):\n        animals_marks_ans.append([item[\"question_id\"], 1])\n    else:\n        animals_marks_ans.append([item[\"question_id\"], 0])","c5879a63":"np.array(animals_marks_ans)[:, 1].sum()","bb56c115":"people = [\n           \"man\", \"woman\", \"child\", \"children\", \"women\", \"men\", \"lady\", \n           \"person\", \"guy\", \"friends\", \"his\", \"her\", \"him\", \"he\", \"she\", \n           \"people\", \"crowd\", \"human\", \"folk\", \"dude\", \"dudes\", \"gentleman\",\n           \"male\", \"female\", \"staff\", \"girl\", \"boy\", \"girls\", \"boys\", \"kid\", \n           \"kids\", \"ladies\", \"guys\", \"they\", \"folks\", \"males\", \"females\",\n           \"man's\", \"woman's\"\n    ]","f9c02c33":"people_marks = []\nfor item in data_val:\n    if any(x in clean_text(item[\"sent\"]).split() for x in people):\n        people_marks.append([item[\"question_id\"], 1])\n    else:\n        people_marks.append([item[\"question_id\"], 0])","7678d03b":"np.array(people_marks)[:, 1].sum()","3f79f86e":"people_marks_ans = []\nfor item in data_val:\n    if any(x in list(item[\"label\"].keys()) for x in people):\n        people_marks_ans.append([item[\"question_id\"], 1])\n    else:\n        people_marks_ans.append([item[\"question_id\"], 0])","80b293d7":"np.array(people_marks_ans)[:, 1].sum()","346b0a86":"dataset = pd.DataFrame({'question_id': np.array(color_mention_marks)[:, 0], \n                        'color_name': np.array(colours_marks)[:, 1],\n                        'color_word': np.array(color_mention_marks)[:, 1],\n                        'colors_answer': np.array(colours_ans)[:, 1],\n                        'spatial': np.array(spatial_marks)[:, 1],\n                        'spatial_answer': np.array(spatial_marks_ans)[:, 1],\n                        'animals': np.array(animals_marks)[:, 1],\n                        'animals_answer': np.array(animals_marks_ans)[:, 1],\n                        'people': np.array(people_marks)[:, 1],\n                        'people_answer': np.array(people_marks_ans)[:, 1],\n                        })","d34bfe22":"dataset.sum().transpose()","86c6252b":"dataset.to_csv(\"questions_marks.csv\")","ae3f0da8":"dataset","cc0e09f6":"dataset = pd.read_csv(\".\/questions_marks.csv\", index_col=0)","df449aa9":"no_categories = dataset.loc[(dataset.loc[:, dataset.columns != 'question_id']==0).all(axis=1)]\nno_categories","492ce332":"questiond_id_allzeroes = no_categories[\"question_id\"].values","34409f0f":"dataset_multi = dataset[[\"question_id\"]].copy()","2fe358e7":"temp = dataset.loc[(dataset[\"color_name\"] == 1) | (dataset[\"color_word\"] == 1) | (dataset[\"colors_answer\"] == 1)][\"question_id\"].values\ndataset_multi[\"color\"] = 0\ndataset_multi.loc[dataset_multi[\"question_id\"].isin(temp), \"color\"] = 1","3973e9ea":"dataset_multi","0271f020":"temp = dataset.loc[(dataset[\"spatial\"] == 1) | (dataset[\"spatial_answer\"] == 1)][\"question_id\"].values\ndataset_multi[\"spatial\"] = 0\ndataset_multi.loc[dataset_multi[\"question_id\"].isin(temp), \"spatial\"] = 1\ndataset_multi","8c3cad8e":"temp = dataset.loc[(dataset[\"animals\"] == 1) | (dataset[\"animals_answer\"] == 1)][\"question_id\"].values\ndataset_multi[\"animals\"] = 0\ndataset_multi.loc[dataset_multi[\"question_id\"].isin(temp), \"animals\"] = 1\ndataset_multi","ed7a8389":"temp = dataset.loc[(dataset[\"people\"] == 1) | (dataset[\"people_answer\"] == 1)][\"question_id\"].values\ndataset_multi[\"people\"] = 0\ndataset_multi.loc[dataset_multi[\"question_id\"].isin(temp), \"people\"] = 1\ndataset_multi","3a282fae":"multi_list = dataset_multi.loc[(dataset_multi.loc[:, dataset_multi.columns != 'question_id']==1).sum(axis=1) >= 2][\"question_id\"].values","352f73ae":"questiond_id_allzeroes","bc3a7ba9":"multi_list","6f2c1f07":"data_val = data_mini + data_nomini","dcf4d03d":"kostyl = 0\nfrom contextlib import redirect_stdout\n\nwith open('no_categories.txt', 'w') as f:\n    with redirect_stdout(f):\n        for item in data_val:\n            if item[\"question_id\"] in questiond_id_allzeroes:\n                print(\"question \", kostyl, \":\", item[\"sent\"])\n                print(item[\"label\"])\n                print()\n                kostyl += 1\n            if kostyl == 1000:\n                break","e67f2d84":"kostyl = 0\nfrom contextlib import redirect_stdout\n\nwith open('multiple_categories.txt', 'w') as f:\n    with redirect_stdout(f):\n        for item in data_val:\n            if item[\"question_id\"] in multi_list:\n                print(\"question \", kostyl, \":\", item[\"sent\"])\n                print(item[\"label\"])\n                print()\n                kostyl += 1\n            if kostyl == 1000:\n                break","049c1a12":"import spacy\nfrom spacy.lang.en import English\nspacy.require_gpu()\nnlp = spacy.load(\"en_core_web_sm\")","58b0dcf8":"c = Counter()\nid_ents = {}\ni=0\nfor item in data_val:\n    i+=1\n    if i == 1000:\n        break\n    doc = nlp(item[\"sent\"])\n    id_ents[item[\"question_id\"]] = []\n    for ent in doc.noun_chunks:\n        c[ent.text] += 1\n        id_ents[item[\"question_id\"]].append(ent.text)","97012040":"c.most_common(40)","98a6a4b7":"import nltk\n\ndef get_nouns(text):\n    # function to test if something is a noun\n    is_noun = lambda pos: pos[:2] == 'NN'\n    # do the nlp stuff\n    tokenized = nltk.word_tokenize(text)\n    nouns = [word for (word, pos) in nltk.pos_tag(tokenized) if is_noun(pos)]\n    return nouns","40ac2744":"c_nouns = Counter()\nid_nouns = {}\n\nfor item in data_val:\n    nouns = get_nouns(item[\"sent\"])\n    id_nouns[item[\"question_id\"]] = nouns\n    for noun in nouns:\n        c_nouns[noun] += 1","f598e06b":"c_nouns.most_common(40)","35c7d5e7":"import pickle\n\ndef save_obj(obj, name ):\n    with open('.\/'+ name + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n\ndef load_obj(name ):\n    with open('obj\/' + name + '.pkl', 'rb') as f:\n        return pickle.load(f)","3279aef5":"save_obj(id_ents, \"id_noun_chunks\")","c292133f":"save_obj(id_nouns, \"id_nouns\")","82c088ef":"save_obj(c, \"counter_nc\")","6af2c691":"save_obj(c_nouns, \"counter_nouns\")","5ee509eb":"# Total Val answers","7bc33812":"## Find colour in answers","85324647":"# Preview questions","faf923ca":"## No category for a questions","95093dc4":"## Create multiple categories","c6735ab9":"## Find animals in answers","a8d03899":"## Get questions that are in several categories","edc8eed9":"## Get list of colours","7219ed23":"# Total Val questions","a7f155c6":"# Saving dictionaries with entities","be21577d":"# Train","95814502":"# People in questions","c2701d69":"# Extract nouns","f24b9884":"# Get data","7054979e":"### In this notebook questions from COCO VQA dataset are analysed. They are categorized and dataframes with these categories are created for further usage. Also noun phrases are extracted to create a top list of them.","0a8d2e71":"# Find no_categories and multi_categories in a dataset","74236926":"## Find \"color\" in questions","e78181bd":"## Find directions in answers:","c53edcb6":"## Find directions in questions","8ff1cc6a":"# Colours in questions","5bc6c6e1":"## Get questions with all zeroes","c314cde7":"## Find animals in questions","b28ad85d":"## Find people in questions","7bd45030":"# Collect dataset","537923d2":"## Get questions with multiple categories","6be553e4":"## Find people in answers","ad0d53e3":"# Spacy \/ entities","9d8ff215":"# To be done | fullfil categories","1de114bf":"# Train questions","42e6f17e":"# Directions in questions","9ad16b00":"## Create counters","3ded456c":"## Find colours in questions","381eb4b8":"# Animals in questions"}}