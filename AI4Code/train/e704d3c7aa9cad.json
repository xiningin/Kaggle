{"cell_type":{"bb94060b":"code","3594e077":"code","d391e06d":"code","ef257fa8":"code","c92d1beb":"code","6cb7dbc3":"code","b835f0ed":"code","88dce144":"code","d793c343":"code","59290c7f":"code","d0e0c736":"code","c5e24d64":"code","fd117a31":"code","dde35bef":"code","d25da563":"code","f81f43c0":"code","1bede7dc":"code","2a1a1c61":"code","10f4e9b4":"code","75ce3ac5":"code","1e8c4467":"code","48c22ad3":"code","4209549b":"code","45fbce6f":"code","e038b2c2":"markdown","1012c4c8":"markdown","fbbcf6d0":"markdown","4cf1da3c":"markdown","2ad9de54":"markdown","74aef611":"markdown","9cf543ed":"markdown","9daf45d6":"markdown","160a1cb5":"markdown","7f83e013":"markdown"},"source":{"bb94060b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3594e077":"hyundai_cars_file_path = '\/kaggle\/input\/hyundai-used-car-listing\/hyundi.csv'\nhyundai_data = pd.read_csv(hyundai_cars_file_path)\nhyundai_data.head()","d391e06d":"# Rename the tax(\u00a3) column to make it the same as similar data sets.\nhyundai_data.rename(columns={'tax(\u00a3)': 'tax'}, inplace=True)","ef257fa8":"# print a summary of the numerical Hyundai used car data\nhyundai_data.describe()","c92d1beb":"categorical_columns = ['model', 'transmission', 'fuelType']\nhyundai_data[categorical_columns].describe()","6cb7dbc3":"# see what the distinct values are for each of the categorical columns\nhyundai_data['model'].unique()","b835f0ed":"hyundai_data['transmission'].unique()","88dce144":"hyundai_data['fuelType'].unique()","d793c343":"numeric_columns = ['year', 'price', 'mileage', 'tax', 'mpg', 'engineSize']\nhyundai_num_data = hyundai_data[numeric_columns]\nhyundai_num_data.head()","59290c7f":"corr = hyundai_num_data.corr()\ncorr","d0e0c736":"plt.figure(figsize=(10, 8))\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","c5e24d64":"model_price = hyundai_data.groupby('model')['price'].mean().sort_values()\n\nplt.figure(figsize=(14, 8))\nplt.title(\"Hyundai Average Price for each Model\")\npal = sns.color_palette(\"Greens_d\", len(model_price))\n\nsns.barplot(x=model_price.index, y=model_price.values, palette=pal)\n\nplt.xlabel(\"Model\")\nplt.ylabel(\"Price (Euros)\")\nplt.tight_layout()","fd117a31":"year_price = hyundai_data.groupby('year')['price'].mean().sort_values()\n\nplt.figure(figsize=(14, 8))\nplt.title(\"Hyundai Average Price by Year\")\npal = sns.color_palette(\"Greens_d\", len(year_price))\n\nsns.barplot(x=year_price.index, y=year_price.values, palette=pal)\n\nplt.xlabel(\"Year\")\nplt.ylabel(\"Price (Euros)\")\nplt.tight_layout()","dde35bef":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=hyundai_num_data['year'], y=hyundai_num_data['price'])","d25da563":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=hyundai_num_data['engineSize'], y=hyundai_num_data['price'])","f81f43c0":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=hyundai_num_data['mileage'], y=hyundai_num_data['price'])","1bede7dc":"plt.figure(figsize=(14,8))\nsns.scatterplot(x=hyundai_num_data['mpg'], y=hyundai_num_data['price'])","2a1a1c61":"plt.figure(figsize=(14,4))\nhyundai_data.groupby('fuelType')['mpg'].mean().plot.barh()","10f4e9b4":"engine_0 = hyundai_data[hyundai_data['engineSize'] == 0.0]\nengine_0","75ce3ac5":"plt.figure(figsize=(14,4))\nhyundai_data.groupby('transmission')['mpg'].mean().plot.barh()","1e8c4467":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Apply ordinal encoder to the model category feature\nordinal_encoder = OrdinalEncoder()\nhyundai_data['model'] = ordinal_encoder.fit_transform(hyundai_data[['model']])","48c22ad3":"# Apply one-hot encoder to transmission and fuelType features\nOH_encoder = OneHotEncoder(sparse=False)\noh_cols = pd.DataFrame(OH_encoder.fit_transform(hyundai_data[['transmission', 'fuelType']]))\noh_cols.columns = ['trans_0', 'trans_1', 'trans_2', 'trans_2', 'fuel_0', 'fuel_1', 'fuel_2', 'fuel_3']\n\n# drop the original columns and add the encoded ones\nhyundai_data = hyundai_data.drop(['transmission', 'fuelType'], axis=1)\nhyundai_data = pd.concat([hyundai_data, oh_cols], axis=1)\nhyundai_data","4209549b":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Select the target variable and predictors\ny = hyundai_data['price']\nX = hyundai_data.drop(['price'], axis=1)\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=0)\n\nmodel = RandomForestRegressor(n_estimators=10, random_state=0)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nmae = mean_absolute_error(y_valid, preds)\nmae","45fbce6f":"plt.figure(figsize=(14,8))\nplot = sns.scatterplot(x=y_valid, y=preds).set(title='Price vs. Prediction', \n                                               xlabel=\"Price\", \n                                               ylabel=\"Predicted Price\")","e038b2c2":"Maybe those mpg data points aren't outliers after all. It looks like all Hyundais get very good mpg, but the Hybrid and Other models are particularly good. Now let's take a closer look at the cars whose engine size is 0.","1012c4c8":"It looks like there are no missing values in this data set. If we want to build a model using categorical features, we'll have to encode them. The `transmission` and `fuelType` features only have a few unique values, so we can use one-hot encoding. The `model` has 14 unique values though. It will probably have a lot of predictive value though, so we'll want to keep it. For that feature we'll use ordinal encoding. Before we start building models, let's see how some of the features correlate to each other, and to the price (the ultimate target variable).","fbbcf6d0":"Those plots all aggree with the correlations to price we saw. There is at least one price outlier. There appear to be a few mpg outliers, and I'm not sure what engine size 0 means, so let's take a closer look at the data for those features. We'll start by looking at the average mpg for each fuel type (a categorical variable, so we'll go back to the original data set).","4cf1da3c":"The year and engine size both look positively correlated with price, while the mileage and mpg are both fairly negatively correlated to price. This makes sense, but let's look at a few plots with these features and price, starting with model and year.","2ad9de54":"There's a lot less variation in mpg here than by fuel type, but I did expect manual transmission cars to get better mpg than the other two groups. That's not the case in this data set, so it's a bit odd. Now let's move on to encoding the categorical features before training a simple model.\n\n### Encoding categorical features","74aef611":"For an initial model, a mean absolute error of 898 Euros is not bad considering the average price is nearly 13,000 Euros. I can see from the plot of the actual prices vs. the predictions that a few very high-priced predictions are off by quite a bit, which is going to throw off the average error. Other than that, the prices vs. predictions scatterplot forms a fairly straight line, although it does have a little bit of spread.\n\nThere's a lot of room for improvement, but I'll leave it there for this notebook.","9cf543ed":"### Initial data exploration","9daf45d6":"There are many different models, years, and fuel types in this subset. There's also no fully electric model, so it looks like 0.0 was the fill value for missing values in the engine size column. That's a potential source of error in a machine learning model, but we'll leave it alone for now. One last thing I want to look at is the mpg for different types of transmissions.","160a1cb5":"### Hyundai Used Car Analysis\n\nAnalyze and predict prices for used Hyundai automobiles.\n\nAlso see these related notebooks:\n- [Audi Used Car Listings](https:\/\/www.kaggle.com\/bcruise\/audi-used-car-listings)\n- [BMW Used Car Analysis](https:\/\/www.kaggle.com\/bcruise\/bmw-used-car-analysis)\n- [Mercedes Used Car Analysis](https:\/\/www.kaggle.com\/bcruise\/mercedes-used-car-analysis)","7f83e013":"### Training a simple Random Forest model\nFinally, let's train a simple model to see how good this data set is for predicting the price of a used Hyundai."}}