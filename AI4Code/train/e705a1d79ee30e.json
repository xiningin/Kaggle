{"cell_type":{"268e90da":"code","150f0631":"code","80ef1805":"code","08623970":"code","85521480":"code","64a178cc":"code","6593f4f9":"code","a0c38b56":"code","cbedfffe":"code","4bc3bfee":"code","b279c512":"code","2b3f756a":"code","f6bfcdd7":"code","d0d269a0":"code","5148eeb6":"code","0f29fa96":"code","6efd7b4d":"code","6c2799cc":"code","1e5b0fbe":"code","1cbf6ea8":"code","8c5cf3f6":"code","7c80ed81":"code","f038972d":"code","490f4017":"code","b70dd0dd":"code","91ec5c4b":"markdown","c8a7ae49":"markdown","9e39d91c":"markdown","4debefce":"markdown","890c41a5":"markdown","1b342930":"markdown","06917072":"markdown","236f5a56":"markdown"},"source":{"268e90da":"!pip install pycountry_convert --quiet","150f0631":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom datetime import datetime as dt\nimport pycountry_convert as pc\nimport os\n%matplotlib inline\n        ","80ef1805":"raw_df = pd.read_csv('\/kaggle\/input\/impact-of-covid19-pandemic-on-the-global-economy\/raw_data.csv')\ndf = pd.read_csv('\/kaggle\/input\/impact-of-covid19-pandemic-on-the-global-economy\/transformed_data.csv')\n\nraw_df.drop('Unnamed: 9', inplace=True, axis=1)\nraw_df.drop('Unnamed: 10', inplace=True, axis=1)\nraw_df.drop('Unnamed: 11', inplace=True, axis=1)\nraw_df.drop('Unnamed: 12', inplace=True, axis=1)\nraw_df.drop('Unnamed: 13', inplace=True, axis=1)\n\n#raw_df.rename(columns={\"Unnamed: 12\": \"_population\", \"Unnamed: 13\": \"_gdp_per_capita\"}, inplace=True)\n\nraw_df.head(10)","08623970":"raw_df.describe()","85521480":"print('\\n', raw_df.isna().sum())\nprint('\\n', df.isna().sum())\n\ndf = df.replace(to_replace = np.nan, value = 0) \nraw_df = raw_df.replace(to_replace = np.nan, value = 0) ","64a178cc":"population = raw_df.population\ngdp_capita = raw_df.gdp_per_capita\np = df[\"POP\"].copy()\ng = df[\"GDPCAP\"].copy()\ndf[\"population\"] = population\ndf[\"gdp_cap\"] = gdp_capita\n\ndf[\"DATE\"] = df[\"DATE\"].map(lambda x: dt.strptime(x, '%Y-%m-%d'))\ndf[\"year\"] = df[\"DATE\"].map(lambda x: x.year)\ndf[\"month\"] = df[\"DATE\"].map(lambda x: x.month)\n\ndf = df[['CODE', 'COUNTRY', 'year', 'month', 'DATE', 'population', 'gdp_cap', 'HDI', 'TC', 'TD', 'STI']]\ndf = df.rename(columns={'CODE':'Code', 'COUNTRY':'Country', 'year':'Year', 'month':'Month', 'DATE':'Date', 'population':'Population', 'gdp_cap':'GDP_Cap', 'HDI':'HDI', 'TC':'Cases', 'TD':'Deaths', 'STI':'Stringency_Index'})\ndf.head()","6593f4f9":"df = df[df.Country != 'Kosovo']\n\ncountry = df.Country.unique().tolist()\ncountry_code = df.Code.unique().tolist()\npop_world = df.Population.unique().tolist()\nhdi_world = []\ngdp_world = []\ncases_country = []\ndeath_country = []\nstringency_index = []\n\nfor i in country:\n    hdi_world.append((df.loc[df.Country == i, 'HDI']).sum()\/294)\n    gdp_world.append(df.loc[df.Country == i, 'GDP_Cap'].sum()\/294)\n    stringency_index.append(df.loc[df.Country == i, 'Stringency_Index'].sum()\/294)\n    cases_country.append(df.loc[(df[\"Country\"] == i), \"Cases\"].sum())\n    death_country.append(df.loc[(df[\"Country\"] == i), \"Deaths\"].sum())","a0c38b56":"alpha2_code = []\nfor i in country_code:\n    alpha2_code.append(pc.country_alpha3_to_country_alpha2(i))\ncontinent_code = []\nfor i in alpha2_code:\n    try:\n        continent_code.append(pc.country_alpha2_to_continent_code(i))\n    except:\n        continent_code.append('Unknown') \n\ndata_agg = pd.DataFrame(list(zip(country_code, country, pop_world, cases_country, death_country, hdi_world, gdp_world, stringency_index, continent_code)), columns =['Code', 'Country', 'Population', 'Cases', 'Deaths', 'HDI', 'GDP_Cap','Stringency_Index', 'Continent']) \ndata_agg = data_agg.replace({'AF':'Africa', 'AN':'Antarctica', 'AS':'Asia', 'EU':'Europe', 'NA':'North America', 'OC':'Oceania', 'SA':'South America'})\ndata_agg = data_agg.round(2)\n\ndata_agg.head()","cbedfffe":"fig = px.scatter(data_agg, x=\"HDI\", y=\"GDP_Cap\", size=\"Population\", hover_name=\"Country\", color='Continent', template='simple_white', size_max=50)\nfig.update_layout(\n    height=500,\n    title_text=\"Comparison between a Country's GDP per Capita and HDI\"\n)\nfig.show()","4bc3bfee":"sns.lineplot(data=data_agg[['HDI', 'GDP_Cap']], x=\"HDI\", y=\"GDP_Cap\").set_title('Relation between HDI and GDP per capita')","b279c512":"fig = px.scatter(data_agg, x=\"GDP_Cap\", y=\"Cases\", size=\"Population\", hover_name=\"Country\", color='Continent', template='simple_white', size_max=50)\nfig.update_layout(\n    height=500,\n    title_text=\"COVID-19 Cases vs GDP per Capita (per Country)\"\n)\nfig.show()","2b3f756a":"sns.lineplot(data=data_agg[['HDI', 'Cases']], x=\"HDI\", y=\"Cases\").set_title('Relation between HDI and Covid-19 cases')","f6bfcdd7":"fig = px.scatter(data_agg, x='HDI', y='Cases', hover_name='Country', color='Continent', size='Population', template=\"simple_white\", size_max=50)\nfig.update_traces(textposition='top center')\nfig.update_layout(\n    height=500,\n    title_text='COVID-19 Cases vs HDI (per Country)'\n)\nfig.show()","d0d269a0":"fig = px.bar(data_agg, x='Continent', y='Cases', hover_name='Country', color='Continent', template=\"simple_white\")\nfig.update_layout(\n    height=500,\n    title_text='COVID-19 Cases per Continent'\n)\nfig.update_xaxes(showticklabels=False)\nfig.show()","5148eeb6":"cor = df[['Population', 'GDP_Cap', 'HDI', 'Cases', 'Deaths', 'Stringency_Index']].corr()\nsns.heatmap(cor, annot=True, linewidths=0.2, cmap=\"RdBu\", vmin=-1, vmax=1)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","0f29fa96":"raw_df[\"date\"] = raw_df[\"date\"].map(lambda x: dt.strptime(x, '%Y-%m-%d'))\nraw_df[\"year\"] = raw_df[\"date\"].map(lambda x: x.year)\nraw_df[\"month\"] = raw_df[\"date\"].map(lambda x: x.month)","6efd7b4d":"fig = px.line(raw_df, x=\"date\", y=\"total_deaths\", color=\"location\", \n              title='Total deaths till Oct 2020',\n              template=\"simple_white\")\nfig.show()","6c2799cc":"gdp = df.sort_values(by='GDP_Cap', ascending=False)[:3800]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=gdp.Country, x=gdp.GDP_Cap)\nplt.xticks()\nplt.xlabel('GDP_Cap')\nplt.ylabel('Country')\nplt.title('Countplot of country by GDPCAP')\nplt.show()","1e5b0fbe":"from sklearn.preprocessing import normalize\nfrom sklearn.model_selection import train_test_split\n\ntrain_df = df.copy()\n\ntrain_df['Date'] = train_df['Date'].map(lambda x: x.toordinal() - 737423)\n#train_df['Date'] = (train_df['Date']+1-train_df['Date'].min())\/(train_df['Date'].max()-train_df['Date'].min())\ntrain_df['Population'] = p\ntrain_df['GDP_Cap'] = g\ntrain_df['Country'] = pd.factorize(train_df['Country'])[0]\n\nX = train_df[['Country', 'Date', 'Population', 'GDP_Cap', 'HDI', 'Stringency_Index']]\ny = train_df['Cases']\n\nX.shape, y.shape","1cbf6ea8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\nprint('Train size -', X_train.shape, y_train.shape)\nprint('Test size -', X_test.shape, y_test.shape)","8c5cf3f6":"from sklearn import svm, metrics, tree, linear_model\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\n\nfrom sklearn.metrics import mean_squared_error, r2_score, max_error","7c80ed81":"svr_regressor = svm.SVR().fit(X_train, y_train)\n\npred = svr_regressor.predict(X_test)\nmse1 = mean_squared_error(y_test, pred)\nr21 = r2_score(y_test, pred)\nmax1 = max_error(y_test, pred)\n\nprint('Mean Squared Error -', mse1)\nprint('R2 Score -', r21)\nprint('Maxx Error -', max1)","f038972d":"decision_tree_regressor = tree.DecisionTreeRegressor().fit(X_train, y_train)\n\npred = decision_tree_regressor.predict(X_test)\nmse2 = mean_squared_error(y_test, pred)\nr22 = r2_score(y_test, pred)\nmax2 = max_error(y_test, pred)\n\nprint('Mean Squared Error -', mse2)\nprint('R2 Score -', r22)\nprint('Max Error -', max2)","490f4017":"logistic_regressor = LinearRegression().fit(X_train, y_train)\n\npred = logistic_regressor.predict(X_test)\nmse3 = mean_squared_error(y_test, pred)\nr23 = r2_score(y_test, pred)\nmax3 = max_error(y_test, pred)\n\nprint('Mean Squared Error -', mse3)\nprint('R2 Score -', r23)\nprint('Max Error -', max3)","b70dd0dd":"b_regressor = linear_model.BayesianRidge().fit(X_train, y_train)\n\npred = b_regressor.predict(X_test)\nmse4 = mean_squared_error(y_test, pred)\nr24 = r2_score(y_test, pred)\nmax4= max_error(y_test, pred)\n\nprint('Mean Squared Error -', mse4)\nprint('R2 Score -', r24)\nprint('Max Error -', max4)","91ec5c4b":"## Train Data","c8a7ae49":"## List Data","9e39d91c":"## Import Statements","4debefce":"### Bayesian Regression","890c41a5":"## Visualize Data","1b342930":"### Decision Tree Regressor","06917072":"### Linear Regressor","236f5a56":"### Support Vector Regression"}}