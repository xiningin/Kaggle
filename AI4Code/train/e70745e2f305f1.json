{"cell_type":{"16adb1f9":"code","fb398006":"code","13188f1c":"code","8d284197":"code","711cf8d0":"code","f48cf742":"code","04eecc7b":"code","31875a9b":"code","0b5225f9":"code","bac7a383":"code","e2ae6817":"code","fd99fe86":"code","f2b681ea":"code","ef054c1f":"code","7b5b4061":"code","40e7c28c":"code","18454863":"code","362df267":"code","36c9e6e4":"code","2f416e69":"code","46071ad6":"code","03855042":"code","bfab3a97":"code","37d1bbea":"code","bce1b5b2":"code","0d4107bb":"code","133ad10c":"code","eb91dcc1":"code","1adf3ed5":"code","864ee796":"code","3a798c87":"code","204c72a8":"code","9eb185b0":"code","0a11603e":"code","86d4c75b":"code","44aa223d":"code","919e3389":"code","245abe4c":"code","41be9191":"code","ccbfa91b":"code","ab583665":"code","7e1b2c35":"code","5b2fe860":"code","b9d82eee":"code","d687480f":"code","45955c3a":"code","3eb63b99":"code","93588603":"code","f9061620":"code","e9cc1dc3":"code","27ff1b43":"code","3b6be5a8":"code","26eab696":"code","770dc5a2":"code","786bc6c5":"code","5b1d740e":"code","1b51ad51":"code","7b717b90":"code","3aa7f2df":"code","35d95272":"code","069eb294":"code","8032abb8":"code","69eb0051":"code","402024fd":"code","45b986d9":"code","36c15c96":"code","f7f428b5":"markdown","7da6fb20":"markdown","af7d929f":"markdown","9d238233":"markdown","a7e968f0":"markdown","2c1e5bd4":"markdown","20d95d7a":"markdown","5b517baa":"markdown"},"source":{"16adb1f9":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.offline as py\npy.init_notebook_mode(connected=False)\nimport plotly.graph_objects as go \nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\n\nimport folium\nfrom folium.plugins import HeatMap\n\nplt.style.use('fivethirtyeight')","fb398006":"US_Accidents_df = pd.read_csv('..\/input\/us-accidents\/US_Accidents_Dec20_Updated.csv', parse_dates=['Start_Time','End_Time']) #, index_col='ID')","13188f1c":"US_Accidents_df['Month'] = US_Accidents_df['Start_Time'].dt.month\nUS_Accidents_df['Year'] = US_Accidents_df['Start_Time'].dt.year\nUS_Accidents_df['Hour'] = US_Accidents_df['Start_Time'].dt.hour\nUS_Accidents_df['Weekday'] = US_Accidents_df['Start_Time'].dt.weekday\nUS_Accidents_df['Impact'] = (US_Accidents_df['End_Time'] - US_Accidents_df['Start_Time']).dt.total_seconds()\/60","8d284197":"# clean the data based on the condition that the impact on traffic is between zero-one week,and drop duplicates\noneweek = 60*24*7\nUS_Accidents_df_clean = US_Accidents_df[(US_Accidents_df['Impact']>0) & (US_Accidents_df['Impact']< oneweek)].drop_duplicates(subset=['Start_Time','End_Time','City','Street','Number','Description'])","711cf8d0":"US_Accidents_df_clean.head(5)","f48cf742":"print('Rows     :', US_Accidents_df_clean.shape[0])\nprint('Columns  :', US_Accidents_df_clean.shape[1])\nprint('\\nFeatures :\\n     :', US_Accidents_df_clean.columns.tolist())\nprint('\\nMissing values    :', US_Accidents_df_clean.isnull().values.sum())\nprint('\\nUnique values :  \\n', US_Accidents_df_clean.nunique())","04eecc7b":"US_Accidents_df_clean.select_dtypes(exclude=['int','float']).columns","31875a9b":"US_Accidents_df_clean['Description'].head(5)","0b5225f9":"# print(US_Accidents_df_clean['Source'].unique())\nprint(US_Accidents_df_clean['Description'].unique())\nprint(US_Accidents_df_clean['Timezone'].unique())\nprint(US_Accidents_df_clean['Amenity'].unique())","bac7a383":"import warnings\nwarnings.filterwarnings('ignore')\nmissing_df = US_Accidents_df_clean.isnull().sum(axis=0).reset_index()\nmissing_df.columns = ['column_name','missing_count']\nmissing_df = missing_df[missing_df['missing_count']>0]\nmissing_df = missing_df.sort_values(by='missing_count')\n\nind = np.arange(missing_df.shape[0])\nwidth = 0.5\nfig,ax = plt.subplots(figsize=(12,18))\nrects = ax.barh(ind,missing_df.missing_count.values,color='blue')\nax.set_yticks(ind)\nax.set_yticklabels(missing_df.column_name.values, rotation='horizontal')\nax.set_xlabel(\"Count of missing values\")\nax.set_title(\"Number of missing values in each column\")\nplt.show()","e2ae6817":"sns.set_style('whitegrid')\nsns.set_context('paper')\nsns.set_palette('GnBu_d')\na = sns.catplot(x='Year', data=US_Accidents_df_clean[US_Accidents_df_clean['Year']<=2020], kind='count')\na.fig.suptitle('Yearly Accidents Cases(2016-2020)', y=1.03)\na.set(ylabel='Yearly Cases', xlabel='Year')\n# plt.savefig('Yearly_accidents_cases.png', dpi=1200, bbox_inches='tight')\nplt.show()\n# there is a growing trend of year accidents cases","fd99fe86":"#time series analysis\ndf1 = US_Accidents_df_clean[['Country','Start_Time','End_Time','Year','Month','Weekday','Hour','Impact','Severity']]","f2b681ea":"dfA = df1[df1['Year'] < 2020].set_index('Start_Time').resample('A').count()\ndfA['YEAR'] = np.array([2016,2017,2018,2019], dtype=np.int32)\nplt.scatter(dfA.YEAR,dfA.Country)\n#use linear regression and scatter plot to test if there exists a linear regression\nlrModel = LinearRegression()\nx = dfA['YEAR'].values.reshape(-1, 1)\ny = dfA.Country\n# r^2 = 0.915, which indicate there is a strong linear relationship between year and accident cases\n# did a regression fit test on quarterly increase, r^2 is 0.74, therefore yearly increase is a better fit\nlrModel.fit(x,y)\nprint(lrModel.score(x,y))\n# use linear regression parameter to predict the accident number in 2020\ndfA.loc['2020-12-31 00:00:00', 'Country'] = lrModel.coef_*2020+ lrModel.intercept_\ndfA.loc['2020-12-31 00:00:00', 'YEAR'] = 2020\n\n# print(dfA[['YEAR','Country']])\n\n\nplt.figure(figsize=(20, 20))\nsns.set_context('talk')\np = sns.catplot(x='YEAR', y='Country', data=dfA, kind='bar')\np.fig.suptitle('Yearly accidents cases(2016-2020)', y=1.03)\np.set(ylabel='yearly cases',xlabel='year')\nplt.show()","ef054c1f":"sns.set_context('paper')\nh = sns.catplot(x='Hour',data=US_Accidents_df_clean, kind='count', height=8.27, aspect=11.7\/8.27)\nh.fig.suptitle('Hourly Accidents Cases', y=1.03)\nh.set(ylabel='Hourly Cases', xlabel='Hour')\nplt.annotate('Morning Peak', xy=(6,330000))\nplt.annotate('Afternoon Peak', xy=(15,270000))\nplt.annotate('bottom', xy=(1,25000))\nplt.annotate('go to work', xy=(7.5,0), xytext=(1, 125000), arrowprops={'arrowstyle':'fancy'})\nplt.annotate('get off work', xy=(17.5,0), xytext=(19, 150000), arrowprops={'arrowstyle':'fancy'})\n# plt.savefig('Hourly_Accidents_Cases.png', dpi=1200, bbox_inches='tight');\nplt.show()\n# most accidents happend during the day time, and there are two peaks on 7-8 and 16-17 when people are on commute \n# between workplace and home\n# during 23 to 3 o'clock\uff0cbefore dawn.cases numbers are relatively at the bottom level as most people are in sleep","7b5b4061":"states = US_Accidents_df_clean.State.unique()\n\n# print(US_Accidents_df_clean[US_Accidents_df_clean['State']=='CA'][0])\ncount_by_state=[]\nfor state in US_Accidents_df_clean.State.unique():\n    count_by_state.append([US_Accidents_df_clean[US_Accidents_df_clean['State']==state].count()[0]])\n\ncount_by_state = np.array(count_by_state, dtype='int32').flatten()\nstates = np.array(states, dtype='str')\n\nstates_accidents_df = pd.DataFrame({'State':states, 'Accidents':count_by_state})\n\nplt.figure(figsize=(16,10))\nstates_accidents_df = states_accidents_df.sort_values(by=['Accidents'], ascending=False)\nsns.barplot(states_accidents_df['State'], states_accidents_df['Accidents']);\nplt.savefig('Accidents_Cases_bt_State.png', dpi=1200, bbox_inches='tight');\nplt.show()","40e7c28c":"#10 states with the highest accident rates\ndf_st = US_Accidents_df_clean.groupby('State').size().to_frame('Counts')\ndf_st = df_st.reset_index().sort_values('Counts', ascending = False)[:10]\n\nfig, ax = plt.subplots(figsize = (12,8))\nb = sns.barplot(y = 'State',x = 'Counts', data = df_st )\n\nb.set_title(\"10 States With The Highest Accident Rates\")\n\nplt.show()\n# these states are consistent with the states with largest population in the U.S.","18454863":"fig=sns.heatmap(US_Accidents_df_clean[['Severity','Start_Lat','End_Lat','Distance(mi)','Temperature(F)','Wind_Chill(F)','Humidity(%)','Pressure(in)','Visibility(mi)','Wind_Speed(mph)']].corr(),annot=True,cmap='RdYlGn',linewidths=0.2,annot_kws={'size':15})\nfig=plt.gcf()\nfig.set_size_inches(15,7)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","362df267":"# f,ax=plt.subplots(1,2,figsize=(18,8))\n# US_Accidents_df_clean['Source'].value_counts().plot.pie(explode=[0,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n# ax[0].set_title('Share of Sources')\n# ax[0].set_ylabel('Count')\n# sns.countplot('Source', data=US_Accidents_df_clean, ax=ax[1], order=US_Accidents_df_clean['Source'].value_counts().index)\n# ax[1].set_title('Count of Source')\n# plt.show()","36c9e6e4":"# plt.style.use('fast')\nplt.style.use('fivethirtyeight')\nf,ax = plt.subplots(3, 1,figsize=(8, 20))\nUS_Accidents_df_clean['Severity'].value_counts().plot.pie(explode=[0,0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0]) #,shadow=True)\nax[0].set_title('Percentage Severity Distribution', fontsize=15)\nax[0].set_ylabel('Severity', fontsize=13)\n# plt.savefig('Percentage_Severity_Distribution.png', dpi=1200, bbox_inches='tight');\nsns.countplot('Severity', data=US_Accidents_df_clean, ax=ax[1], order=US_Accidents_df_clean['Severity'].value_counts().index)\nax[1].set_title('Count of Severity', fontsize=15)\nax[1].set_xlabel('Severity', fontsize=12)\nax[1].set_ylabel('Count', fontsize=12)\n# plt.ticklabel_format(style='plain', axis='y')\nax[1].ticklabel_format(axis='y', style='plain')\n# ax[1].legend()\n(US_Accidents_df_clean.Severity.value_counts(normalize=True).sort_index()*100).plot.bar(ax=ax[2])\nax[2].set_title('Severity Percentage', fontsize=15)\nax[2].set_xlabel('Severity', fontsize=12)\nax[2].set_ylabel('Percentage', fontsize=12)\n# ax[2].set_ylim(0, 100)\nimport matplotlib.ticker as mtick\n\n# ax = df['myvar'].plot(kind='bar')\nax[2].yaxis.set_major_formatter(mtick.PercentFormatter())\nax[2].set_ylim(0, 100)\n#plt.grid()\nplt.savefig('Percentage_Severity_Distribution.png', dpi=1200, bbox_inches='tight');\n\nplt.tight_layout()\nplt.show();","2f416e69":"df_top_Severity_State = US_Accidents_df_clean.groupby('State').agg({'Severity': 'mean'}).sort_values('Severity').reset_index()\n\nplt.figure(figsize=(23, 8))\nsns.barplot(y=\"Severity\", x=\"State\", data=df_top_Severity_State.head(49))\nplt.title(\"Mean Severity by State\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Severity\", fontsize=12)\nplt.ioff()\n# plt.savefig('Mean_Severity_by_State.png', dpi=1200, bbox_inches='tight');\nplt.show()","46071ad6":"plt.figure(figsize=(14,8))\n# plt.style.use('fivethirtyeight')\nplt.style.use('fast')\nUS_Accidents_df_clean.groupby('Weather_Condition') \\\n        .size() \\\n        .sort_values(ascending = False) \\\n        .iloc[:10] \\\n        .plot.pie(explode=[0,0,0.1,0,0, 0, 0, 0, 0.3, 0], autopct='%1.1f%%')#,shadow=True)\nplt.ioff()\nplt.ylabel(\"\");\nplt.title(\"Weather Condition in Accidents\", fontsize=13)\n# plt.savefig('Weather_Condition_in_Accidents.png', dpi=1200, bbox_inches='tight');\nplt.show();","03855042":"counts = US_Accidents_df_clean[\"Weather_Condition\"].value_counts()[:15]\nplt.figure(figsize=(23, 8))\n\nsns.set_context('notebook')\nsns.barplot(counts.index, counts.values)\nplt.title(\"Histogram Distribution of the Top 15 Weather Conditions\")\nplt.xlabel(\"Weather Condition\")\nplt.ylabel(\"Value\")\n# plt.savefig('Histogram_weather_conditions.png', dpi=1200, bbox_inches='tight');\nplt.show()","bfab3a97":"counts = pd.to_datetime(US_Accidents_df_clean['Start_Time']).dt.day_name().value_counts()\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\nplt.figure(figsize=(20, 8))\nsns.set_context('talk')\nsns.barplot(counts.index, counts.values, order=weekdays)\nplt.title(\"Number of Accidents for each Weekday\")\nplt.xlabel(\"Weekday\")\nplt.ylabel(\"Value\")\n# plt.savefig('Number_Accidents_Weekday.png', dpi=1200, bbox_inches='tight');\nplt.show();","37d1bbea":"sns.set_context('talk')\nm = sns.catplot(x='Month', data=df1[df1['Year'] < 2020], kind='count', height=8.27, aspect=20\/8.27)\nm.fig.suptitle('Monthly Accidents Cases(2016-2019)', y=1.03)\nm.set(ylabel='Monthly Cases')\n# plt.savefig('Monthly_Accident_Cases.png', dpi=1200, bbox_inches='tight');\nplt.show()\n# there were more cases druing 8-12 compared to other months,excluding the data from 2020\n# guess there are more bad weather conditions in the winter","bce1b5b2":"def plot_map1(LatLong, city=None):\n    accident_map = folium.Map(location=LatLong, \n                           tiles = \"Stamen Toner\",\n                           zoom_start = 10)\n    if city != None:\n        data_heatmap = US_Accidents_df_clean[US_Accidents_df_clean[\"City\"] == city]\n    else:\n        data_heatmap = df.copy()\n    data_heatmap = data_heatmap[['Start_Lat','Start_Lng']]\n    data_heatmap = [[row['Start_Lat'],row['Start_Lng']] for index, row in data_heatmap.iterrows()]\n    HeatMap(data_heatmap, radius=10).add_to(accident_map)\n    return accident_map","0d4107bb":"plot_map1([40.712776,-74.005974], city='New York')","133ad10c":"def plot_map2(city):\n    data_heatmap = US_Accidents_df_clean[US_Accidents_df_clean[\"City\"] == city]\n    lat = data_heatmap['Start_Lat'].iloc[0]\n    long = data_heatmap['Start_Lng'].iloc[0]\n    LatLong = [lat, long]\n    accident_map = folium.Map(location=LatLong, \n                           tiles = \"cartodbpositron\",\n                           zoom_start = 10)\n\n    data_heatmap = data_heatmap[['Start_Lat','Start_Lng']]\n    data_heatmap = [[row['Start_Lat'],row['Start_Lng']] for index, row in data_heatmap.iterrows()]\n    HeatMap(data_heatmap, radius=10).add_to(accident_map)\n    return accident_map","eb91dcc1":"plot_map2(city = \"New York\")","1adf3ed5":"plot_map2(city = \"Los Angeles\")","864ee796":"severity_1_by_state = []\nseverity_2_by_state = []\nseverity_3_by_state = []\nseverity_4_by_state = []\nfor i in states_accidents_df['State']:\n    severity_1_by_state.append(US_Accidents_df_clean[(US_Accidents_df_clean['Severity']==1)&(US_Accidents_df_clean['State']==i)].count()[0])\n    severity_2_by_state.append(US_Accidents_df_clean[(US_Accidents_df_clean['Severity']==2)&(US_Accidents_df_clean['State']==i)].count()[0])\n    severity_3_by_state.append(US_Accidents_df_clean[(US_Accidents_df_clean['Severity']==3)&(US_Accidents_df_clean['State']==i)].count()[0])\n    severity_4_by_state.append(US_Accidents_df_clean[(US_Accidents_df_clean['Severity']==4)&(US_Accidents_df_clean['State']==i)].count()[0])","3a798c87":"plt.style.use('fast')\nplt.figure(figsize=(30, 15))\n\nplt.bar(states_accidents_df['State'], severity_2_by_state, label='Severity 2')\nplt.bar(states_accidents_df['State'], severity_3_by_state, label='Severity 3')\nplt.bar(states_accidents_df['State'], severity_4_by_state, label='Severity 4')\nplt.bar(states_accidents_df['State'], severity_1_by_state, label='Severity 1')\n# sns.barplot(states_accidents_df['State'], severity_2_by_state, label='Severity 2', palette=\"bright\")\n# sns.barplot(states_accidents_df['State'], severity_3_by_state, label='Severity 3', palette=\"bright\")\n# sns.barplot(states_accidents_df['State'], severity_4_by_state, label='Severity 4', palette=\"bright\")\n# sns.barplot(states_accidents_df['State'], severity_1_by_state, label='Severity 1', palette=\"bright\")\nplt.legend();\nplt.title(\"Total States Accidents Based on Severity\", fontsize=15)\nplt.ylabel(\"Num. Accidents\", fontsize=12)\nplt.xlabel(\"State\", fontsize=12)\nplt.grid(color='pink', linestyle='-', linewidth=.3)\n# plt.savefig('Total_States_Accidents_Based_on_Severity.png', dpi=1200, bbox_inches='tight');\nplt.show();","204c72a8":"# import dateutil.parser\n\n# US_Accidents_df_clean[\"Time_added\"] = US_Accidents_df_clean[\"Start_Time\"].apply(lambda x: dateutil.parser.parse(x))\n\n# a4_dims = (10, 7)\n# fig, ax = plt.subplots(figsize=a4_dims)\n# sns.countplot(x=US_Accidents_df_clean[\"Time_added\"].apply(lambda timestamp: timestamp.month))","9eb185b0":"#street classification\ndef str_type(text):\n    if '-' in text or 'Fwy'in text or 'Expy' in text or 'Highway'in text or 'Hwy'in text :\n        result = 'Highway'\n    else:\n        result = 'others'\n    return result\n\nUS_Accidents_df_clean['Street_Type'] = US_Accidents_df_clean['Street'].apply(str_type)","0a11603e":"# accident rates vs. street_type\nfig, ax = plt.subplots(figsize = (5, 6))\nsns.set_style('whitegrid')\ne = sns.countplot(x ='Street_Type', data = US_Accidents_df_clean)\ne.set_title('Accident Rate VS. Street Type', fontsize=14)\nplt.xticks(rotation = 90)\n\nplt.xlabel(\"Street Type\")\nplt.ylabel(\"Count\")\n# ax.ticklabel_format(useOffset=False, style='plain')\nplt.ticklabel_format(style='plain', axis='y')\n\n# plt.savefig('Accident_Rate_Street_Type.png', dpi=1200, bbox_inches='tight');\nplt.show();\n#given that the milage of highway is much less than other roads, this plot indicates that there is a higher probability of accident occurs in highway","86d4c75b":"fig, ax = plt.subplots(figsize =(8, 6))\nsns.set_style('whitegrid')\nsns.countplot(x='Street_Type', hue='Severity', data=US_Accidents_df_clean, palette=\"bright\")\nplt.legend(['Severity-1', 'Severity-2', 'Severity-3', 'Severity-4']) #(['0', '1'], loc='upper right', prop={'size': 10})\nplt.title(\"Accidents Severity by Street Type\", fontsize=14)\nplt.xlabel(\"Street Type\", fontsize=12)\nplt.ylabel(\"Count\", fontsize=12)\nplt.ticklabel_format(style='plain', axis='y')\n# plt.savefig('Accidents_Severity_by_Street_Type.png', dpi=1200, bbox_inches='tight');\nplt.show()","44aa223d":"# drop the rows with missing weather condition description\ndf_weather = US_Accidents_df_clean[['Month', 'Weather_Condition', 'Impact', 'Severity']].dropna()\ndf_weather.isna().sum()","919e3389":"weatherDict = {'Light Rain':'Rain','Rain':'Rain','Clear':'Fair','Fair':'Fair','Mostly Cloudy':'Cloudy','Overcast':'Cloudy',\n        'Partly Cloudy':'Cloudy','Cloudy':'Cloudy','Scattered Clouds':'Cloudy','Light Snow':'Ice','Haze':'Fog',\n       'Fog':'Fog','Heavy Rain':'Rain','Light Drizzle':'Rain','Fair \/ Windy':'Fair','Snow':'Ice',\n        'Light Thunderstorms and Rain':'Thunder','Thunderstorm':'Thunder','Mostly Cloudy \/ Windy':'Cloudy','Cloudy \/ Windy':'Cloudy',\n       'T-Storm':'Thunder','Smoke':'Fog','Thunder in the Vicinity':'Thunder','Light Rain with Thunder':'Thunder','Partly Cloudy \/ Windy':'Cloudy',\n      'Patches of Fog':'Fog','Drizzle':'Rain','Heavy Thunderstorms and Rain':'Thunder','Mist':'Fog','Thunder':'Thunder',\n       'Thunderstorms and Rain':'Thunder','Light Freezing Rain':'Ice','Light Rain \/ Windy':'Rain','Heavy T-Storm':'Thunder',\n       'Wintry Mix':'Ice','Heavy Snow':'Ice','Shallow Fog':'Fog','Light Snow \/ Windy ':'Ice','Light Freezing Fog':'Ice',\n       'Light Freezing Drizzle':'Ice','Rain \/ Windy':'Rain','N\/A Precipitation':'Fair','Showers in the Vicinity':'Rain',\n       'Blowing Snow':'Ice','Heavy Rain \/ Windy':'Rain','Heavy Drizzle':'Rain','Light Ice Pellets':'Ice','Heavy T-Storm \/ Windy':'Thunder',\n       'T-Storm \/ Windy':'Thunder','Haze \/ Windy':'Fog','Light Rain Showers':'Rain','Widespread Dust':'Fog','Light Rain Shower':'Rain',\n       'Drizzle and Fog':'Fog','Snow \/ Windy':'Ice','Rain Showers':'Rain','Blowing Dust \/ Windy':'Fog','Thunder \/ Windy':'Thunder',\n       'Ice Pellets':'Ice','Fog \/ Windy':'Fog','Blowing Snow \/ Windy':'Ice','Heavy Snow \/ Windy':'Ice','Wintry Mix \/ Windy':'Ice',\n       'Small Hail':'Ice','Sand \/ Dust Whirlwinds':'Fog','Squalls':'Cloudy','Light Snow Showers':'Ice','Light Thunderstorms and Snow':'Thunder',\n       'Volcanic Ash':'Fog','Partial Fog':'Fog','Freezing Rain':'Ice','Rain Shower':'Rain','Light Snow \/ Windy':'Ice',\n       'Blowing Dust':'Fog','Light Drizzle \/ Windy':'Rain','Light Snow and Sleet':'Ice','Light Sleet':'Ice','Snow and Sleet':'Ice',\n       'Funnel Cloud':'Cloudy','Smoke \/ Windy':'Fog','Light Rain Shower \/ Windy':'Rain','Squalls \/ Windy':'Cloudy','Light Haze':'Fog'}","245abe4c":"df_weather.loc[:,'Condition'] = df_weather.Weather_Condition.map(weatherDict)","41be9191":"print(df_weather.isna().sum())\ndf_weather_sort = df_weather.dropna()\nprint(df_weather_sort.isna().sum())\n\ndf_weather_sort.Condition.value_counts(normalize = True)","ccbfa91b":"sns.set_context('notebook')\n\nsns.catplot(x='Condition',y='Impact',data=df_weather_sort, kind='point', ci=None,\n                order=['Fog', 'Thunder', 'Rain', 'Fair', 'Cloudy', 'Ice'], height=6, aspect=11.7\/8.27, linestyles=[\"-\"], dodge=True,);\n\nsns.set_style('whitegrid')\n\n# plt.ylabel(\"Traffic Impact (Min)\") #,fontsize=10)\n# w.set(title='The impact time in different weather condition',\n#       xlabel= 'Weather Condition',ylabel='Traffic Impact (Min)');\nplt.title(\"The impact time in different weather condition\")\nplt.xlabel(\"Weather Condition\")\nplt.ylabel(\"Traffic Impact (Min)\")\n\n# plt.savefig('impact_time_in_different_weather_condition.png', dpi=1200, bbox_inches='tight')\n# the point plot shows that under weather condition with ice, the impact accidents have on traffic is the longest of\n# more than 100 minuts\n# impact under other weather conditions are nearly the same","ab583665":"sns.set_context('notebook')\n\ns = sns.catplot(x='Condition', y='Severity', data=df_weather_sort,kind='point', ci=None,color='c',\n                order=['Fog','Fair','Cloudy','Rain','Thunder','Ice'], height=6, aspect=11.7\/8.27)\ns.set(title='The Accident Severity in different Weather Condition',\n      xlabel='Weather Condition', ylabel='Severity')\n# under extreme weather conditions like ice and thunder, the severity is much higher\n# plt.savefig('accident_severity_in_different_weather_condition.png', dpi=1200, bbox_inches='tight')","7e1b2c35":"#report by cities\n#top 10 cities with highest severity\ndf_city = US_Accidents_df_clean.groupby('City').sum('Severity')[['Severity']]\ndf_city = df_city.reset_index().sort_values('Severity', ascending = False)[:10]\n\nsns.set_style('whitegrid')\nfig, ax = plt.subplots(figsize = (12,8))\nc = sns.barplot(x = 'Severity', y = 'City', data = df_city)\nc.set_title(\"Top 10 Cities with Highest Severity\")\n\nplt.show()\n\n#most of these cities are large cities.","5b2fe860":"df_city","b9d82eee":"#10 cities with the highest accident rates\ndf_ci_cnt = US_Accidents_df_clean.groupby('City').size().to_frame('Count_city')\ndf_ci_cnt = df_ci_cnt.reset_index().sort_values('Count_city', ascending = False)[:10]\n\nfig, ax = plt.subplots(figsize = (12,8))\nb = sns.barplot(y = 'City',x = 'Count_city', data = df_ci_cnt )\n\nb.set_title(\"Top 10 Cities With The Highest Accident Rates\")\nplt.xlabel(\"Num of Accidents\")\n# plt.savefig('Top_10_Cities_With_Highest_Accident_Rates.png', dpi=1200, bbox_inches='tight')\n\nplt.show()","d687480f":"# Map of accidents\ndef plot_map_of_accidents():\n    plt.figure(figsize=(12, 8))\n    sns.scatterplot(x='Start_Lng', y='Start_Lat', data=US_Accidents_df_clean, hue='State',s=20, legend=False)\n    plt.title(\"Accident Occurance Place Scatter Plot\")\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    # plt.savefig('Accident_Occurance_Place_Scatter_Plot.png', dpi=1200, bbox_inches='tight')\n    plt.show();\n# plot_map_of_accidents()","45955c3a":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.graph_objs import Contours, Histogram2dContour, Marker, Scatter\n\ndf_st_ct = pd.value_counts(US_Accidents_df_clean['State'])\n\ndef configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML('''\n        <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '\/static\/base',\n              plotly: 'https:\/\/cdn.plot.ly\/plotly-latest.min.js?noext',\n            },\n          });\n        <\/script>\n        '''))\n\ndef plot_num_of_accidents_by_state():\n    configure_plotly_browser_state()\n    init_notebook_mode(connected=False)\n\n    fig = go.Figure(data=go.Choropleth(\n        locations=df_st_ct.index,\n        z = df_st_ct.values.astype(float),  # Data to be color-coded\n        locationmode = 'USA-states',     # set of locations match entries in `locations`\n        colorscale = 'YlOrRd',\n        colorbar_title = \"Count\",\n    ))\n\n    fig.update_layout(\n        title_text = 'US Accidents by State',\n        geo_scope='usa', # limite map scope to USA\n    )\n\n    fig.show()","3eb63b99":"import plotly.offline as py\npy.init_notebook_mode(connected=False)\nimport plotly.graph_objects as go\n\n#average accident severity of states\n# st_sev = US_Accidents_df_clean.groupby('State').mean('Severity')[['Severity']]\n\n# configure_plotly_browser_state()\n# init_notebook_mode(connected=False)\n\n# fig = go.Figure(data=go.Choropleth( \n#     locations=list(st_sev.index),\n#     z = st_sev['Severity'].astype(float),  \n#     locationmode = 'USA-states', \n#     colorscale = 'Reds', \n#     colorbar_title = \"Average value of severity\", \n# )) \n\n# fig.update_layout( \n#     title_text = 'Accident Severity of Each State', \n#     geo_scope='usa', \n    \n# )\n\n# py.iplot(fig,filename = 'Severity_Map.html')\n\n#SD & WY have very few accident records but the average value of severity are much higher than other states; \n#it probably because the population or the number of cars are less in these two states and there are many mountains and most of the roads are highway or mountian road.\n#despite of these two states, overall, the eastern US is more serious than the western US in terms of accident severity","93588603":"# main_dataset['timestamp'] = pd.to_datetime(main_dataset['Weather_Timestamp'], errors='coerce')\n# main_dataset['Hour'] = US_Accidents_df_clean['timestamp'] .dt.hour\n# main_dataset['Minute'] = US_Accidents_df_clean['timestamp'] .dt.minute\nhours = [hour for hour, df in US_Accidents_df_clean.groupby('Hour')]\nplt.plot(hours, US_Accidents_df_clean.groupby(['Hour'])['ID'].count())\nplt.xticks(hours)\nplt.xlabel('Hour')\nplt.ylabel('Numer of accidents')\nplt.grid(True)\nplt.show()","f9061620":"US_Accidents_df_clean['time'] = pd.to_datetime(US_Accidents_df_clean.Start_Time, format='%Y-%m-%d %H:%M:%S')\n\ncolors = [\"gold\", \"gold\", \"aqua\", \"magenta\", \"darkorange\", \"springgreen\"]\n\nplt.subplots(2,2,figsize=(15,10))\ni=1\nfor s in np.arange(2017,2021):\n    plt.subplot(2,2,i)\n    plt.hist(pd.DatetimeIndex(US_Accidents_df_clean.loc[US_Accidents_df_clean[\"Year\"] == s]['time']).month, bins=[1,2,3,4,5,6,7,8,9,10,11,12,13], align='left', rwidth=0.8, color=colors[i])\n    plt.title(\"Accident Count by Each Month of Year \" + str(s), fontsize=14)\n    plt.xlabel(\"Month\", fontsize=12)\n    plt.ylabel(\"Accident Count\", fontsize=12)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    i+=1\nplt.tight_layout()\nplt.savefig('Accident_Count_by_Month_with_Severity.png', dpi=1200, bbox_inches='tight')\nplt.show()","e9cc1dc3":"US_Accidents_df_clean['DayOfWeek'] = US_Accidents_df_clean['time'].dt.dayofweek\nplt.subplots(2,2,figsize=(15,10))\nfor s in np.arange(1,5):\n    plt.subplot(2,2,s)\n    plt.hist(US_Accidents_df_clean.loc[US_Accidents_df_clean[\"Severity\"] == s]['DayOfWeek'], bins=[0,1,2,3,4,5,6,7], align='left', rwidth=0.8, color=colors[s])\n    plt.title(\"Accident Count by Day with Severity \" + str(s), fontsize=16)\n    plt.xlabel(\"Day\", fontsize=16)\n    plt.ylabel(\"Accident Count\", fontsize=16)\n    plt.xticks(fontsize=16)\n    plt.yticks(fontsize=16)\nplt.tight_layout()\nplt.savefig('Accident_Count_by_Day_with_Severity.png', dpi=1200, bbox_inches='tight')\nplt.show()","27ff1b43":"period_features = ['Sunrise_Sunset','Civil_Twilight','Nautical_Twilight','Astronomical_Twilight']\nfig, axs = plt.subplots(ncols=2, nrows=2, figsize=(22, 15))\n\nplt.subplots_adjust(wspace = 0.5)\nfor i, feature in enumerate(period_features, 1):    \n    plt.subplot(2, 2, i)\n    sns.countplot(x=feature, hue='Severity', data=US_Accidents_df_clean, palette=\"bright\")\n    \n    plt.xlabel('{}'.format(feature), size=12, labelpad=3)\n    plt.ylabel('Accident Count', size=12, labelpad=3)    \n    plt.tick_params(axis='x', labelsize=12)\n    plt.tick_params(axis='y', labelsize=12)\n    \n    plt.legend() #(['0', '1'], loc='upper right', prop={'size': 10})\n    plt.title('Count of Severity in\\n{} Feature'.format(feature), size=13)#, y=1.05)\nfig.suptitle('Count of Accidents by Period-of-Day (resampled data)', fontsize=16) #y=1.0,\n# plt.savefig('Count_of_Accidents_by_Day_Night.png', dpi=1200, bbox_inches='tight')\nplt.show()","3b6be5a8":"# Get names of indexes for which column Stock has value No\nindexNames = US_Accidents_df_clean[ US_Accidents_df_clean['Side'] == ' ' ].index\n# Delete these row indexes from dataFrame\nus_left_right = US_Accidents_df_clean.drop(indexNames , inplace=False)","26eab696":"# plt.figure(figsize=(12,8))\nfig, ax = plt.subplots(figsize=(12,8))\n# sns.color_palette(\"Spectral\", as_cmap=True)\n# sns.color_palette(\"coolwarm\", as_cmap=True)\nsns.countplot(x='Side', hue='Severity', data=us_left_right, palette=\"bright\")\n# sns.color_palette(\"icefire\", as_cmap=True)\n\nplt.title(\"Count of Accidents by Side\", size=16, y=1.03)\nplt.legend()\nax.set_xticklabels(['Right','Left'])\nplt.ticklabel_format(style='plain', axis='y')\nplt.xlabel(\"Side\", fontsize=13)\nplt.ylabel(\"Count\", fontsize=13)\n# plt.savefig('Count_of_Accidents_by_Side.png', dpi=1200, bbox_inches='tight')\nplt.show()","770dc5a2":"US_Accidents_df_clean['Severity4'] = 0\nUS_Accidents_df_clean.loc[US_Accidents_df_clean['Severity'] == 4, 'Severity4'] = 1\nUS_Accidents_df_clean.Severity4.value_counts()","786bc6c5":"def plot_level4_accidents_us_map():\n    df_4 = US_Accidents_df_clean[US_Accidents_df_clean['Severity4']==1]\n\n    plt.figure(figsize=(15,10))\n\n    plt.plot( 'Start_Lng', 'Start_Lat', data=US_Accidents_df_clean, linestyle='', marker='o', markersize=1, color=\"teal\", alpha=0.2, label='All Accidents')\n    plt.plot( 'Start_Lng', 'Start_Lat', data=df_4, linestyle='', marker='o', markersize=1, color=\"coral\", alpha=0.3, label='Accidents with Serverity Level 4')\n    plt.legend(markerscale=8)\n    plt.xlabel('Longitude', size=12, labelpad=3)\n    plt.ylabel('Latitude', size=12, labelpad=3)\n    plt.title('Map of Accidents', size=16, y=1.05)\n    # plt.savefig('Map_of_Accidents_vs_Level4_Severity.png', dpi=1200, bbox_inches='tight')\n    plt.show()","5b1d740e":"from scipy.stats import boxcox\n\n","1b51ad51":"# resample again\n# df_bl = pd.concat([df[df['Severity4']==1].sample(40000, replace = True), \n#                    df[df['Severity4']==0].sample(40000)], axis=0)\ndef plot_weather_density():\n    US_Accidents_df_clean['Pressure_bc']= boxcox(US_Accidents_df_clean['Pressure(in)'].apply(lambda x: x+1), lmbda=6)\n    US_Accidents_df_clean['Visibility_bc']= boxcox(US_Accidents_df_clean['Visibility(mi)'].apply(lambda x: x+1), lmbda = 0.1)\n    US_Accidents_df_clean['Wind_Speed_bc']= boxcox(US_Accidents_df_clean['Wind_Speed(mph)'].apply(lambda x: x+1), lmbda=-0.2)\n    US_Accidents_df_clean2 = US_Accidents_df_clean.drop(['Pressure(in)','Visibility(mi)','Wind_Speed(mph)'], axis=1)\n    US_Accidents_df_clean2['Severity'] = US_Accidents_df_clean2['Severity'].astype('category')\n    num_features = ['Temperature(F)', 'Humidity(%)', 'Pressure_bc', 'Visibility_bc', 'Wind_Speed_bc']\n    fig, axs = plt.subplots(ncols=2, nrows=3, figsize=(30, 20))\n    plt.subplots_adjust(hspace=0.4, wspace=0.2)\n    for i, feature in enumerate(num_features, 1):    \n        plt.subplot(2, 3, i)\n        sns.violinplot(x=feature, y=\"Severity\", data=US_Accidents_df_clean2, palette=\"Set3\")\n        \n        plt.xlabel('{}'.format(feature), size=12, labelpad=3)\n        plt.ylabel('Severity', size=12, labelpad=3)    \n        plt.tick_params(axis='x', labelsize=12)\n        plt.tick_params(axis='y', labelsize=12)\n\n        if i==3:\n            plt.xlim(0, 200000000)\n        \n\n        plt.title('{} Feature by Severity'.format(feature), size=14, y=1.05)\n    fig.suptitle('Density of Accidents by Weather Features (resampled data)', fontsize=18)\n    # plt.savefig('Density_of_Accidents_by_Weather_Features.png', dpi=600, bbox_inches='tight')\n    plt.show()","7b717b90":"# show distinctive weather conditions\nimport re\n\nweather ='!'.join(US_Accidents_df_clean['Weather_Condition'].dropna().unique().tolist())\nweather = np.unique(np.array(re.split(\n    \"!|\\s\/\\s|\\sand\\s|\\swith\\s|Partly\\s|Mostly\\s|Blowing\\s|Freezing\\s\", weather))).tolist()\nprint(\"Weather Conditions: \", weather)","3aa7f2df":"# US_Accidents_df_clean['Clear'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Clear', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Cloud'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Cloud|Overcast', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Rain'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Rain|storm', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Heavy_Rain'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Heavy Rain|Rain Shower|Heavy T-Storm|Heavy Thunderstorms', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Snow'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Snow|Sleet|Ice', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Heavy_Snow'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Heavy Snow|Heavy Sleet|Heavy Ice Pellets|Snow Showers|Squalls', case=False, na = False), 1, 0)\n# US_Accidents_df_clean['Fog'] = np.where(US_Accidents_df_clean['Weather_Condition'].str.contains('Fog', case=False, na = False), 1, 0)\n\n# # Assign NA to created weather features where 'Weather_Condition' is null.\n# weather = ['Clear','Cloud','Rain','Heavy_Rain','Snow','Heavy_Snow','Fog']\n# for i in weather:\n#   US_Accidents_df_clean.loc[US_Accidents_df_clean['Weather_Condition'].isnull(),i] = US_Accidents_df_clean.loc[US_Accidents_df_clean['Weather_Condition'].isnull(),'Weather_Condition']\n\n# US_Accidents_df_clean.loc[:,['Weather_Condition'] + weather]\n\n# US_Accidents_df_clean = US_Accidents_df_clean.drop(['Weather_Condition'], axis=1)","35d95272":"def plot_weather_condition_severity():\n    US_Accidents_df_clean['Severity34'] = 0\n    US_Accidents_df_clean.loc[US_Accidents_df_clean['Severity'] == 4, 'Severity34'] = 1\n    US_Accidents_df_clean.loc[US_Accidents_df_clean['Severity'] == 3, 'Severity34'] = 1\n    # US_Accidents_df_clean.Severity34.value_counts()\n    fig, axs = plt.subplots(ncols=3, nrows=3, figsize=(22, 15))\n    plt.subplots_adjust(hspace=0.4,wspace = 0.6)\n    for i, feature in enumerate(weather, 1):    \n        plt.subplot(3, 3, i)\n        sns.countplot(x=feature, hue='Severity34', data=US_Accidents_df_clean, palette=\"bright\") #, palette=\"Set2\")\n        \n        plt.xlabel('{}'.format(feature), size=12, labelpad=3)\n        plt.ylabel('Accident Count', size=12, labelpad=3)    \n        plt.tick_params(axis='x', labelsize=12)\n        plt.tick_params(axis='y', labelsize=12)\n        \n        plt.legend(['Others', 'Severity - 3 & 4'], loc='upper right', prop={'size': 10})\n        plt.title('Count of Severity in \\n {} Feature'.format(feature), size=12) #, y=1.05)\n        plt.ticklabel_format(style='plain', axis='y')\n    fig.suptitle('Count of Accidents by Weather Features (resampled data)', fontsize=15)\n    # plt.savefig('Count_of_Accidents_by_Weather_Features.png', dpi=600, bbox_inches='tight')\n    plt.show()","069eb294":"def plot_traffic_density():\n    traffic_feature = ['Amenity', 'Wind_Chill(F)', 'Crossing', 'Junction', 'Traffic_Signal']\n    fig, axs = plt.subplots(ncols=2, nrows=3, figsize=(30, 20))\n    plt.subplots_adjust(hspace=0.4, wspace=0.2)\n    for i, feature in enumerate(traffic_feature, 1):    \n        plt.subplot(2, 3, i)\n        sns.violinplot(x=\"Severity\", y=feature, data=US_Accidents_df_clean, palette=\"Set2\")\n        \n        plt.ylabel('{}'.format(feature), size=12, labelpad=3)\n        plt.xlabel('Severity', size=12, labelpad=3)    \n        # plt.tick_params(axis='x', labelsize=12)\n        # plt.tick_params(axis='y', labelsize=12)\n\n        \n\n        plt.title('{} Feature by Severity'.format(feature), size=14, y=1.03)\n    fig.suptitle('Density of Accidents by Traffic Features (resampled data)', fontsize=18)\n    # plt.savefig('Density_of_Accidents_by_Traffic_Features.png', dpi=600, bbox_inches='tight')\n    plt.show()","8032abb8":"#impact time vs. street type\n# fig, ax = plt.subplots(figsize = (5, 6))\nsns.catplot(x ='Street_Type', y ='Impact', data=US_Accidents_df_clean, kind='box', sym = '', palette='tab10')\nplt.title(\"Impact Time VS. Street Type\", y = 1.03, fontsize=15)\nplt.xticks(rotation = 90)\nplt.xlabel(\"Street Type\")\nplt.ylabel(\"Impact\")\n# plt.savefig('Impact_Time_Street_Type.png', dpi=1200, bbox_inches='tight')\nplt.show();\n\n#the impact time of accidents in highway is much longer than that in other roads.\n#related to the accident severity","69eb0051":"cases_w = US_Accidents_df_clean.groupby('Weekday')['Impact'].count()\nseverity_w = US_Accidents_df_clean.groupby('Weekday')['Severity'].mean()\nplt.style.use('fast')\nfig, ax = plt.subplots(figsize=(10, 8))\nax.plot(cases_w, color='springgreen', label='cases number', marker='o', lw=3)\nax.set_xlabel('weekday')\nax.set_ylabel('cases in a week',color='blue')\nax.legend(loc='center left')\n\nax2 = ax.twinx()\nax2.plot(severity_w, '-o', color='darkorange',label='severity', marker='o', lw=3)\n\nax2.set_ylabel('average accidents severity in a week ',color='green')\nax2.set_label('severity')\nax.set_title('Weekday Accidents Cases & Severity')\nax2.legend(loc='center right')\n\n# plt.savefig('Weekday_Accidents_Cases_Severity.png', dpi=1200, bbox_inches='tight')\nplt.show()\n#although cases dropped a lot on weekend, the average impact of cases on weekend is much higher compared to working day\n# guess the reason is that on weekend, the reaction speed of police and other department is slower","402024fd":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"aqua\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\nUS_Accidents_df_clean.State.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 Acciedent Prone States\", size=17)\nax[0].set_xlabel('States', size=18)\n\n\ncount=US_Accidents_df_clean['State'].value_counts()\ngroups=list(US_Accidents_df_clean['State'].value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','aqua','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups, colors=clr1, autopct='%1.1f%%', pctdistance=0.9, radius=1.2, ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ioff()\nplt.ylabel('')\n# plt.savefig('Top_10_Acciedent_Prone_States.png', dpi=1200, bbox_inches='tight')\nplt.show()","45b986d9":"f, ax=plt.subplots(1, 2, figsize=(18, 8))\nUS_Accidents_df_clean['Timezone'].value_counts().plot.pie(explode=[0,0,0.1,0], autopct='%1.1f%%', ax=ax[0]) #, shadow=True)\nax[0].set_title('Accidents in Different Timezone')\n#ax[0].set_ylabel('Count')\nsns.countplot(x='Timezone', data=US_Accidents_df_clean, ax=ax[1], order=US_Accidents_df_clean['Timezone'].value_counts().index)\nax[1].set_title('Accident Count Based on Timezone')\nplt.ticklabel_format(style='plain', axis='y')\n# plt.savefig('Accidents_in_Different_Timezone.png', dpi=1200, bbox_inches='tight')\nplt.show()","36c15c96":"start = pd.to_datetime(US_Accidents_df_clean.Start_Time, format='%Y-%m-%d %H:%M:%S')\nend = pd.to_datetime(US_Accidents_df_clean.End_Time, format='%Y-%m-%d %H:%M:%S')\nlaps=end-start\n\ntop_15 = laps.astype('timedelta64[m]').value_counts().nlargest(15) #Return the first n rows ordered by columns in descending order.\nprint('Top 15 longest accidents correspond to {:.1f}% of the data'.format(top_15.sum()*100\/len(laps)))\n(top_15\/top_15.sum()).plot.bar(figsize=(10,8), color = 'plum')\nplt.title('Top Accident Durations', fontsize = 24, color='indigo')\nplt.xlabel('Duration in minutes')\nplt.ylabel('% of Total Data')\nplt.grid(linestyle=':', linewidth = '0.2', color ='salmon');\n\nplt.show();","f7f428b5":"#### <font color=orange>**Display 10 first rows of Dataset:**<\/font> ####","7da6fb20":"# <font color=Green>**Start Project**<\/font> #","af7d929f":"#### <font color=orange>**Monthly Accidents:**<\/font> ####","9d238233":" import the modules that we use in the code!","a7e968f0":"#### <font color=orange>**Clean Data:**<\/font> ####","2c1e5bd4":"### **Clean Data for plot Left & Right side Accidents:**","20d95d7a":"#### <font color=orange>**Weeks Day Accidents:**<\/font> ####","5b517baa":"#### <font color=orange>**Add some New Columns:**<\/font> ####"}}