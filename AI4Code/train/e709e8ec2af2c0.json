{"cell_type":{"032bdedb":"code","6121b581":"code","1854f395":"code","76806cda":"code","5170088a":"code","9100cd48":"code","6662d88d":"code","3486f076":"markdown","9c319c58":"markdown","9d8d5805":"markdown","6e334367":"markdown"},"source":{"032bdedb":"train_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/' \ntest_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\/'\nval_path = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val\/'","6121b581":"import tensorflow as tf \nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.optimizers import RMPSprop","1854f395":"IMG_SIZE = (128, 128)\nBATCH_SIZE = 128\n\ntest_image_generator = image.ImageDataGenerator(rescale=1.\/255)\ntrain_image_generator = image.ImageDataGenerator(rescale=1.\/255)\nval_image_generator = image.ImageDataGenerator(rescale=1.\/255)\n\ntrain_data_generator = train_image_generator.flow_from_directory(\n    directory=train_path,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')\n\ntest_data_generator = test_image_generator.flow_from_directory(\n    directory=test_path,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')\n\nval_data_generator = val_image_generator.flow_from_directory(\n    directory=val_path,\n    target_size=IMG_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='binary')\n","76806cda":"print(train_data_generator.class_indices,\ntest_data_generator.class_indices,\nval_data_generator.class_indices)","5170088a":"model = models.Sequential([\n    layers.Conv2D(32, (3,3), activation='relu',\n                  padding='same',\n                  input_shape=(128,128,3)),\n    layers.MaxPooling2D(2,2),\n    layers.Conv2D(64, (3,3), activation='relu'),\n    layers.MaxPooling2D(2,2),\n    layers.Conv2D(64, (3,3), activation='relu'),\n    layers.MaxPooling2D(2,2),\n    layers.Conv2D(128, (3,3), activation='relu'),\n    layers.MaxPooling2D(2,2),\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dense(1, activation='softmax')\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.001),\n              metrics=['acc']\n)\n\nmodel.summary()","9100cd48":"history = model.fit(\n    train_data_generator,\n    epochs=15,\n    validation_data=val_data_generator,\n    verbose=1)","6662d88d":"prediction = model.evaluate(test_data_generator)","3486f076":"Using features of ImageDatagenerator that can automatically load data and determine the class based on folder name. ","9c319c58":"Specifiy train, test, val directory path","9d8d5805":"Build simple CNN model (note: it's really simple, maybe not really effective and kinda overfitt) ","6e334367":"Make sure labels for train, test, val correctly "}}