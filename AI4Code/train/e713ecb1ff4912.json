{"cell_type":{"c0bd2a58":"code","19b5b1ca":"code","3457ba55":"code","80a587e3":"code","02f02453":"code","9c43ba84":"code","bfe4bfad":"code","09f7073c":"code","58d483c7":"code","d3d59c34":"code","7ceb138b":"code","81942751":"code","4364527b":"code","63d5fc8e":"code","4a3cc136":"code","1349be2a":"code","2de2241f":"code","85da9e67":"code","c9e51511":"code","42bbdbfd":"code","8fc79fb2":"code","ff7b093b":"code","23bb3710":"code","679be644":"code","d1e01898":"code","bf4b6a6f":"code","8aeb97b7":"code","d751a5ce":"code","faf68861":"code","e155bf2e":"code","818a481f":"code","28259fb1":"code","563c12be":"code","80e488b8":"code","ad6628b1":"code","08776878":"code","b18255b8":"code","236fa915":"code","b150bb52":"code","67063367":"code","62786787":"code","d3d98896":"code","44b46915":"code","0fecef57":"markdown","79716ee0":"markdown","5f07493c":"markdown","a27986e3":"markdown","59d39a4f":"markdown","b8cb6a88":"markdown","2dd4171c":"markdown","15cf8a3f":"markdown","f1ad5136":"markdown","b58af2a1":"markdown","e1eeeaaa":"markdown","e0d321be":"markdown","dd8fd3ad":"markdown","7b5562c4":"markdown","413eec1d":"markdown","78fc1bb8":"markdown"},"source":{"c0bd2a58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","19b5b1ca":"df_train = pd.read_csv('..\/input\/train.csv', nrows=2_000_000, parse_dates=['pickup_datetime'] )","3457ba55":"# to read the first three rows of training dataset\ndf_train.head(3)","80a587e3":"#check the datatypes\ndf_train.dtypes","02f02453":"#check the statictics of the features\ndf_train.describe()","9c43ba84":"#check for missing values in train data\ndf_train.isnull().sum().sort_values(ascending=False)","bfe4bfad":"#drop the missing values\ndf_train = df_train.drop(df_train[df_train.isnull().any(1)].index, axis = 0)","09f7073c":"df_train.describe()","58d483c7":"df_train.boxplot(column='fare_amount')","d3d59c34":"df_train.boxplot(column='passenger_count')","7ceb138b":"from collections import Counter\nCounter(df_train['fare_amount']<0)","81942751":"df_train=df_train.drop(df_train[df_train['fare_amount']<0].index, axis=0)\ndf_train.shape","4364527b":"df_train=df_train.drop(df_train[df_train['passenger_count']>6].index, axis=0)\ndf_train['passenger_count'].describe()","63d5fc8e":"#checking the pickup_latitude \ndf_train['pickup_latitude'].describe()","4a3cc136":"len(df_train[df_train['pickup_latitude']<-90])","1349be2a":"len(df_train[df_train['pickup_latitude']>90])","2de2241f":"df_train['pickup_latitude'].shape","85da9e67":"df_train=df_train.drop(((df_train[df_train['pickup_latitude']<-90])|(df_train[df_train['pickup_latitude']>90])).index, axis=0)","c9e51511":"df_train['pickup_latitude'].shape","42bbdbfd":"df_train['pickup_longitude'].shape","8fc79fb2":"df_train=df_train.drop(((df_train[df_train['pickup_longitude']<-180])|(df_train[df_train['pickup_longitude']>180])).index, axis=0)","ff7b093b":"df_train['pickup_longitude'].shape","23bb3710":"df_train.describe()","679be644":"df_train=df_train.drop(((df_train[df_train['dropoff_latitude']<-90])|(df_train[df_train['dropoff_latitude']>90])).index, axis=0)","d1e01898":"df_train=df_train.drop(((df_train[df_train['dropoff_longitude']<-180])|(df_train[df_train['dropoff_longitude']>180])).index, axis=0)","bf4b6a6f":"df_train.describe()","8aeb97b7":"df_train['key']=pd.to_datetime(df_train['key'])\ndf_train['pickup_datetime']=pd.to_datetime(df_train['pickup_datetime'])","d751a5ce":"df_train.dtypes","faf68861":"data = [df_train]\nfor i in data:\n    i['year']=i['pickup_datetime'].dt.year\n    i['month']=i['pickup_datetime'].dt.month\n    i['date']=i['pickup_datetime'].dt.date\n    i['day of week']=i['pickup_datetime'].dt.dayofweek\n    i['hour']=i['pickup_datetime'].dt.hour","e155bf2e":"df_train.head(3)","818a481f":"plt.figure(figsize=(15,7))\nplt.hist(df_train['passenger_count'], bins=15)\nplt.xlabel('Number of Passengers')\nplt.title('Fare rates based on the number of passengers')\nplt.show()","28259fb1":"plt.figure(figsize=(15,7))\nplt.scatter(x=df_train['passenger_count'], y=df_train['fare_amount'], s=1.5)\nplt.xlabel('Number of Passengers')\nplt.ylabel('Fare amount')\nplt.title('Fare rates based on the number of passengers')\nplt.show()","563c12be":"plt.figure(figsize=(15,7))\nplt.scatter(x=df_train['year'], y=df_train['fare_amount'], s=1.5)\nplt.xlabel('Year')\nplt.ylabel('Fare amount')\nplt.title('Year wise taxi fares details')\nplt.show()","80e488b8":"plt.figure(figsize=(15,7))\nplt.scatter(x=df_train['month'], y=df_train['fare_amount'], s=1.5)\nplt.xlabel('Month')\nplt.ylabel('Fare amount')\nplt.title('Month wise taxi fares details')\nplt.show()","ad6628b1":"plt.figure(figsize=(15,7))\nplt.scatter(x=df_train['day of week'], y=df_train['fare_amount'], s=1.5)\nplt.xlabel('Day of week')\nplt.ylabel('Fare amount')\nplt.title('Week wise taxi fares details')\nplt.show()","08776878":"def haversine_distance(lat1, long1, lat2, long2):\n    data = [df_train]\n    for i in data:\n        R = 6371  #radius of earth in kilometers\n        #R = 3959 #radius of earth in miles\n        phi1 = np.radians(i[lat1])\n        phi2 = np.radians(i[lat2])\n    \n        delta_phi = np.radians(i[lat2]-i[lat1])\n        delta_lambda = np.radians(i[long2]-i[long1])\n    \n        #a = sin\u00b2((\u03c6B - \u03c6A)\/2) + cos \u03c6A . cos \u03c6B . sin\u00b2((\u03bbB - \u03bbA)\/2)\n        a = np.sin(delta_phi \/ 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2.0) ** 2\n    \n        #c = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n        c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    \n        #d = R*c\n        d = (R * c) #in kilometers\n        i['h_distance'] = d\n    return d","b18255b8":"haversine_distance('pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude')","236fa915":"df_train['h_distance'].describe()","b150bb52":"df_train=df_train.drop(df_train[df_train['h_distance']==0].index, axis=0)","67063367":"df_train['h_distance'].describe()","62786787":"df_train['fare_amount'].describe()","d3d98896":"df_train=df_train.drop(df_train[df_train['fare_amount']==0].index, axis=0)","44b46915":"df_train['fare_amount'].describe()","0fecef57":"Now will explore the data using the plots,cheking the demands and taxi rates on day,date,hour wise.","79716ee0":"By seeing the value first three record found that key,pickup_datetime is datetime value, so we are changin the datatype to datetime.","5f07493c":"Checking fare rates based on the number of persons in a taxi trip","a27986e3":"So in this dataset we have different columns including the target variable named as **fare_amount**.\n\nNow we will look at that data and their types","59d39a4f":"Latitude ranges from -90 to +90\nLongitude ranges from -180 to +180","b8cb6a88":"**New York City Taxi Fare Prediction Playground Competition**","2dd4171c":"Normally the rates majorly depends on the distance from  one place to another place,dataset does not have the distance instead it has pickup latitude , pickup longitude ,dropoff latitude and dropoff longitude by using the [Haversine Formula](http:\/\/https:\/\/community.esri.com\/groups\/coordinate-reference-systems\/blog\/2017\/10\/05\/haversine-formula)","15cf8a3f":"We will look at the distributions of data in each of these columns","f1ad5136":"From the above we found that trip with one passenger has the highest taxi rates.\n\nNow we will year,month,date,day,hour wise fare details ","b58af2a1":"So there are 77 negative values of fare amount present in the dataset, we will remove these negative values.","e1eeeaaa":"**More to come..**","e0d321be":"As we are going to predict the fare of taxi which depends on the location data, we will check the latitude and longitude","dd8fd3ad":"Assuming that taxi maximum seat capacity as 6 for SUV car, so we are dropping the passenger count more than 6.","7b5562c4":"From the above we found that there are 33 total outliers in pickup_latitude.So we will remove those outliers ","413eec1d":"From the above we able to find some of the outliers.\n\n1.Obvisouly Taxi fare amount cannot be negative.\n2.Passanger count max is showing 208 , so 208 passagers not able to travel in single taxi.\n\nSo we will remove the known outliers.\n","78fc1bb8":"***Haversine Formula***\n\nThe Haversine formula is perhaps the first equation to consider when understanding how to calculate distances on a sphere. The word \"Haversine\" comes from the function:\n\nhaversine(\u03b8) = sin\u00b2(\u03b8\/2)\n\n \n\nThe following equation where \u03c6 is latitude, \u03bb is longitude, R is earth\u2019s radius (mean radius = 6,371km) is how we translate the above formula to include latitude and longitude coordinates. Note that angles need to be in radians to pass to trig functions:\n\na = sin\u00b2(\u03c6B - \u03c6A\/2) + cos \u03c6A * cos \u03c6B * sin\u00b2(\u03bbB - \u03bbA\/2)\n\nc = 2 * atan2( \u221aa, \u221a(1\u2212a) )\n\nd = R \u22c5 c"}}