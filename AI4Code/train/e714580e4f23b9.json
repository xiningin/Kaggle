{"cell_type":{"6d1f121b":"code","f484c57a":"code","1a0ee0ee":"code","fba1991d":"code","7697093a":"code","4cb72bcb":"code","694af0db":"code","bbb5a0f0":"code","c02f8504":"code","23596abc":"code","443f83c7":"code","173ebd54":"code","bbcad942":"code","ba6199da":"code","725a00ae":"code","1bcb0ae9":"code","44b1afc1":"code","1ab3c442":"code","5d7bc670":"markdown","77d27438":"markdown","c4b19ffd":"markdown","6fcc9296":"markdown","bfd1612b":"markdown","699c5c65":"markdown","b0e5e56c":"markdown","413167bc":"markdown","cdc8bdc8":"markdown","ac6a4f24":"markdown","9bae64dd":"markdown","b6fea9c6":"markdown","fb1b888b":"markdown","5c4c73f0":"markdown","dc14f8ec":"markdown","211e08d4":"markdown","a2a5e8c6":"markdown","5cca8dd6":"markdown","9b845e86":"markdown","e6ca98f6":"markdown","8b82a4d4":"markdown","e5d7b13c":"markdown","1f0358cf":"markdown","e51627eb":"markdown","ced60417":"markdown","397b1ea1":"markdown","b828c652":"markdown","d0b2387e":"markdown","3fcce5cf":"markdown"},"source":{"6d1f121b":"!pip install pycaret\n\nfrom pycaret.regression import *\nimport numpy as np \nimport pandas as pd \nfrom pandas_profiling import ProfileReport \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_sample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndf_train['SalePrice'] = df_train['SalePrice'].astype(int)\n\npd.set_option('display.max_columns', 500)\nwarnings.filterwarnings('ignore')","f484c57a":"print('\\n \\n First 5 row of Train Data : ')\ndisplay(df_train.head())\n\nprint('First 5 row of Test Data : ')\ndisplay(df_test.head())","1a0ee0ee":"report_train = ProfileReport(df_train)\nreport_train","fba1991d":"report_test = ProfileReport(df_test)\nreport_test","7697093a":"index_int_float = ['MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n        'YearBuilt', 'YearRemodAdd', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n        'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n        'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n        'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars',\n        'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n        'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SalePrice',\n        'LotFrontage', 'MasVnrArea', 'GarageYrBlt']\n\nplt.figure(figsize=[20,12])\ni = 1\nfor col in index_int_float :\n    plt.subplot(4,10,i)\n    sns.violinplot(x=col, data= df_train, orient='v')\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()\n    ","4cb72bcb":"index_str = ['MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n        'YearBuilt', 'YearRemodAdd', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n        'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n        'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n        'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars',\n        'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n        'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold',\n        'LotFrontage', 'MasVnrArea', 'GarageYrBlt']\n\nplt.figure(figsize=[30,10])\ni = 1\nfor col in index_str :\n    plt.subplot(4,10,i)\n    sns.scatterplot(x=col, y = 'SalePrice' ,data= df_train)\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","694af0db":"df_test['SalePrice'] = 'test'\ndf = pd.concat([df_train, df_test])\ndf.drop(['Id'], axis=1, inplace = True)\n\ndf['PoolQC'].fillna('No Pool', inplace = True)\ndf['MiscFeature'].fillna('None', inplace = True)\ndf['Alley'].fillna('No alley access', inplace = True)\ndf['Fence'].fillna('No Fence', inplace = True)\ndf['FireplaceQu'].fillna('No Fireplace', inplace = True)\ndf['LotFrontage'].fillna(60.0, inplace = True)\ndf['GarageCond'].fillna('No Garage', inplace = True)\ndf['GarageType'].fillna('No Garage', inplace = True)\ndf['GarageYrBlt'].fillna(1890, inplace = True)\ndf['GarageFinish'].fillna('No Garage', inplace = True)\ndf['GarageQual'].fillna('No Garage', inplace = True)\ndf['BsmtExposure'].fillna('No Basement', inplace = True)\ndf['BsmtFinType2'].fillna('No Basement', inplace = True)\ndf['BsmtFinType1'].fillna('No Basement', inplace = True)\ndf['BsmtCond'].fillna('No Basement', inplace = True)\ndf['BsmtQual'].fillna('No Basement', inplace = True)\ndf['MasVnrArea'].fillna(0, inplace = True)\ndf['MasVnrType'].fillna('None', inplace = True)\n# df['Exterior2nd'].fillna('None', inplace = True)\n# df['Exterior1st'].fillna('None', inplace = True)\ndf['BsmtFullBath'].fillna(0, inplace = True) # df[df['BsmtFullBath'].isna()][['BsmtFullBath','BsmtFinType1','BsmtFinType2']]\ndf['BsmtHalfBath'].fillna(0, inplace = True) # df[df['BsmtFullBath'].isna()][['BsmtFullBath','BsmtFinType1','BsmtFinType2']]\n# df['KitchenQual'].fillna(0, inplace = True)\n  # df[(df['Neighborhood']== 'IDOTRR') | (df['Neighborhood']== 'Mitchel')]['MSZoning']\ndf.loc[(df['MSZoning'].isna()) & (df['Neighborhood'] == 'IDOTRR'), 'MSZoning'] = 'RM'\ndf.loc[(df['MSZoning'].isna()) & (df['Neighborhood'] == 'Mitchel'), 'MSZoning'] = 'RL'\ndf['Utilities'].fillna('AllPub', inplace = True) #la majorit\u00e9\n# df['BsmtHalfBath'].fillna(0.0, inplace = True) #la majorit\u00e9\n# df['BsmtFullBath'].fillna(0.0, inplace = True)\ndf['Functional'].fillna('Typ', inplace = True)\ndf['Exterior1st'].fillna('VinylSd', inplace = True)\ndf['Exterior2nd'].fillna('VinylSd', inplace = True)\ndf['TotalBsmtSF'].fillna(0, inplace = True)\ndf['BsmtUnfSF'].fillna(0, inplace = True)\ndf['BsmtFinSF2'].fillna(0, inplace = True)\ndf['GarageArea'].fillna(0, inplace = True)\ndf['GarageCars'].fillna(0, inplace = True)\ndf['KitchenQual'].fillna('TA', inplace = True)\ndf['BsmtFinSF1'].fillna(0, inplace = True)\ndf['SaleType'].fillna('WD', inplace = True)\ndf['Electrical'].fillna('SBrkr', inplace = True)\ndf['MSSubClass'] = df['MSSubClass'].astype(str)\ndf['OverallCond'] = df['OverallCond'].astype(str)\n\nprint('Filling of Missing Data, Done.')\n\ndf['BsmtExposure'] = df['BsmtExposure'].map({'No Basement' : 0 ,'No' : 1, 'Mn' : 2, 'Av' : 3, 'Gd' : 4})\ndf['KitchenQual'] = df['KitchenQual'].map({'Po' : 0 ,'Fa' : 1, 'TA' : 2, 'Gd' : 3, 'Ex' : 4})\n\ndf['GarageYrBlt_Years'] =  abs(1890.0 - df['GarageYrBlt'])\ndf['YearBuilt_Years'] = abs(1872.0 - df['YearBuilt'])\ndf['GarageYrBlt'] = df['GarageYrBlt'].astype(str)\ndf['YearBuilt'] = df['YearBuilt'].astype(str)\n\ntmp = df['MoSold'].map({ 1: 0.0833, 2: 0.1666, 3: 0.25, 4: 0.3333, 5: 0.4166, 6: 0.50, 7: 0.5833, 8: 0.6666, 9: 0.75, 10: 0.8333\n      , 11: 0.9166\n      , 12: 0.9999})\ndf['YearSold'] = abs(2006.0 - (df['YrSold'] + tmp)).astype(float)\ndf['MoSold'] = df['MoSold'].astype(str)\ndf['YrSold'] = df['YrSold'].astype(str)\n\ncriteria = [df['YearRemodAdd'] == df['YearBuilt'], df['YearRemodAdd'] != df['YearBuilt']]\nvalues = [0, 1]\n\ndf['Remod'] = np.select(criteria, values, 0)\ndf['YearRemod'] = (df['YearRemodAdd'].astype(int) - df['YearBuilt'].astype(int)).astype(int)\ndf['YearRemodAdd'] = df['YearRemodAdd'].astype(str)\ndf['YearBuilt'] = df['YearBuilt'].astype(str)\n\ndf['Street'] = df['Street'].map({'Grvl': 0, 'Pave' : 1})\ndf['Alley'] = df['Alley'].map({'Grvl': 1, 'Pave' : 2 , 'No alley access' : 0 })\ndf['LotShape'] = df['LotShape'].map({'IR3': 0, 'IR2' : 1 , 'IR1' : 2 , 'Reg' : 3})\ndf['LandContour'] = df['LandContour'].map({'Low': 0, 'HLS' : 1 , 'Bnk' : 2 , 'Lvl' : 3})\ndf['Utilities'] = df['Utilities'].map({'ELO': 0, 'NoSeWa' : 1 , 'NoSewr' : 2 , 'AllPub' : 3})\n# df['LotConfig'] = df['LotConfig'].map({'ELO': 0, 'NoSeWa' : 1 , 'NoSewr' : 2 , 'AllPub' : 3})\ndf['LandSlope'] = df['LandSlope'].map({'Gtl': 2, 'Mod' : 1 , 'Sev' : 0})\n\ncriteria = [\n#AA\n((df['Condition1'] == 'Artery') | (df['Condition1'] == 'RRAn') | (df['Condition1'] == 'PosA') | (df['Condition1'] == 'RRAe'))\n&\n((df['Condition2'] == 'Artery') | (df['Condition2'] == 'RRAn') | (df['Condition2'] == 'PosA') | (df['Condition2'] == 'RRAe'))\n,\n#AB\n((df['Condition1'] == 'Artery') | (df['Condition1'] == 'RRAn') | (df['Condition1'] == 'PosA') | (df['Condition1'] == 'RRAe'))\n&\n((df['Condition2'] == 'Feedr') | (df['Condition2'] == 'RRNn') | (df['Condition2'] == 'PosN') | (df['Condition2'] == 'RRNe'))\n,\n#BA\n((df['Condition2'] == 'Artery') | (df['Condition2'] == 'RRAn') | (df['Condition2'] == 'PosA') | (df['Condition2'] == 'RRAe'))\n&\n((df['Condition1'] == 'Feedr') | (df['Condition1'] == 'RRNn') | (df['Condition1'] == 'PosN') | (df['Condition1'] == 'RRNe'))\n,\n#BB\n((df['Condition1'] == 'Feedr') | (df['Condition1'] == 'RRNn') | (df['Condition1'] == 'PosN') | (df['Condition1'] == 'RRNe'))\n&\n((df['Condition2'] == 'Feedr') | (df['Condition2'] == 'RRNn') | (df['Condition2'] == 'PosN') | (df['Condition2'] == 'RRNe'))\n,\n#A0\n((df['Condition1'] == 'Artery') | (df['Condition1'] == 'RRAn') | (df['Condition1'] == 'PosA') | (df['Condition1'] == 'RRAe'))\n&\n(df['Condition2'] == 'Norm')\n,\n#0A\n((df['Condition2'] == 'Artery') | (df['Condition2'] == 'RRAn') | (df['Condition2'] == 'PosA') | (df['Condition2'] == 'RRAe'))\n&\n(df['Condition1'] == 'Norm' )\n,\n#B0\n((df['Condition1'] == 'Feedr') | (df['Condition1'] == 'RRNn') | (df['Condition1'] == 'PosN') | (df['Condition1'] == 'RRNe'))\n&\n(df['Condition2'] == 'Norm' )\n,\n#0B\n((df['Condition2'] == 'Feedr') | (df['Condition2'] == 'RRNn') | (df['Condition2'] == 'PosN') | (df['Condition2'] == 'RRNe'))\n&\n(df['Condition1'] == 'Norm')\n,\n#00\n(df['Condition1'] == 'Norm' )\n&\n(df['Condition2'] == 'Norm' )\n]\n\nvalues = [4,3,3,2,2,2,1,1,0]\ndf['conditions'] = np.select(criteria, values, 10)\n\ndf['Exterior2nd'] = df['Exterior2nd'].map({ 'AsbShng': 'AsbShng', 'AsphShn': 'AsphShn', 'Brk Cmn': 'BrkComm', 'BrkFace': 'BrkFace', 'CBlock': 'CBlock', 'CmentBd': 'CemntBd',\n                       'HdBoard': 'HdBoard', 'ImStucc': 'ImStucc', 'MetalSd': 'MetalSd', 'Plywood': 'Plywood'\n                      , 'Stone': 'Stone'\n                      , 'Stucco': 'Stucco'\n                      ,'VinylSd': 'VinylSd'\n                      ,'Wd Sdng': 'Wd Sdng'\n                      ,'Wd Shng': 'WdShing'\n                      , 'None'  : 'None'\n                      , 'Other' :  'Other'})\n\ncriteria = [\n# Only 1\n((df['Exterior1st'] == df['Exterior2nd']) | (df['Exterior2nd'] !=  'Other'))\n,\n# No One\n(df['Exterior1st'] == 'None') &  (df['Exterior2nd'] == 'None')\n,\n# 2\n(df['Exterior1st'] !=  df['Exterior2nd']) \n]\n\nvalues = [1,0,2]\ndf['Exterior'] = np.select(criteria, values, 10)\n\ncriteria = [\n# Have veneer \n(df['MasVnrType'] != 'None')\n,\n# Havnt veneer    \n(df['MasVnrType'] == 'None')\n]\n\nvalues = [1,0]\ndf['veneer'] = np.select(criteria, values, 10)\n\ndf['ExterQual'] = df['ExterQual'].map({'Po' : 0 ,'Fa' : 1, 'TA' : 2, 'Gd' : 3, 'Ex' : 4})\n\ndf['ExterCond'] = df['ExterCond'].map({'Po' : 0 ,'Fa' : 1, 'TA' : 2, 'Gd' : 3, 'Ex' : 4})\n\ndf['BsmtQual'] = df['BsmtQual'].map({'No Basement' : 0 ,'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4, 'Ex' : 5})\n\ndf['BsmtFinType1'] = df['BsmtFinType1'].map({'No Basement' : 0 ,'Unf' : 1, 'LwQ' : 2, 'Rec' : 3, 'BLQ' : 4, 'ALQ' : 5, 'GLQ': 6})\n\ndf['BsmtFinType2'] = df['BsmtFinType2'].map({'No Basement' : 0 ,'Unf' : 1, 'LwQ' : 2, 'Rec' : 3, 'BLQ' : 4, 'ALQ' : 5, 'GLQ': 6})\n\ncriteria = [\n# No Bsmt\n(df['BsmtFinType1'] == 0) & (df['BsmtFinType2'] == 0)\n,\n# 1 Bsmt   \n((df['BsmtFinType1'] != 0) & (df['BsmtFinType2'] != 0) & (df['BsmtFinType1'] == df['BsmtFinType2']))\n|\n((df['BsmtFinType1'] != 0) & (df['BsmtFinType2'] == 0))\n|\n((df['BsmtFinType1'] == 0) & (df['BsmtFinType2'] != 0)) \n,\n# 2 bsmnt\n(df['BsmtFinType1'] != 0) & (df['BsmtFinType2'] != 0) & (df['BsmtFinType1'] != df['BsmtFinType2'])\n]\n\nvalues = [0,1,2]\ndf['Bsmt'] = np.select(criteria, values, 10)\n\ndf['HeatingQC'] = df['HeatingQC'].map({'Po' : 0 ,'Fa' : 1, 'TA' : 2, 'Gd' : 3, 'Ex' : 4})\n\ndf['CentralAir'] = df['CentralAir'].map({'N' : 0 ,'Y' : 1})\n\ndf['FireplaceQu'] = df['FireplaceQu'].map({'No Fireplace' : 0 ,'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4 , 'Ex' : 5})\n\ndf['Functional'] = df['Functional'].map({'Sal' : 0 ,'Sev' : 1, 'Maj2' : 2, 'Maj1' : 3, 'Mod' : 4 , 'Min2' : 5, 'Min1' : 6, 'Typ' : 7})\n\ncriteria = [\n# No garage\ndf['GarageType'] == 'No Garage'\n,\n#2 garages\ndf['GarageType'] == '2Types'\n,\n# only one garage\n(df['GarageType'] != '2Types') & (df['GarageType'] != 'No Garage')\n]\n\nvalues = [0,2,1]\ndf['Garage'] = np.select(criteria, values, 10)\n\ndf['GarageFinish'] = df['GarageFinish'].map({'No Garage' : 0 ,'Unf' : 1, 'RFn' : 2, 'Fin' : 3})\n\ndf['GarageQual'] = df['GarageQual'].map({'No Garage' : 0 ,'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4 , 'Ex' :5})\n\ndf['GarageCond'] = df['GarageCond'].map({'No Garage' : 0 ,'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4 , 'Ex' :5})\n\ndf['PavedDrive'] = df['PavedDrive'].map({'N' : 0 ,'P' : 1, 'Y' : 2})\n\ndf['PoolQC'] = df['PoolQC'].map({'No Pool' : 0 ,'Fa' : 1, 'TA' : 2, 'Gd' : 3, 'Ex' : 4})\n\ndf['Fence'] = df['Fence'].map({'No Fence' : 0 ,'MnWw' : 1, 'GdWo' : 2, 'MnPrv' : 3, 'GdPrv' : 4})\n\ncriteria = [\n# No Feature\ndf['MiscFeature'] == 'None'\n,\n# with Feature\ndf['MiscFeature'] != 'None'\n]\nvalues = [0,1]\ndf['Feature'] = np.select(criteria, values, 10)\ndf['TotalArea'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'] + df['GrLivArea'] +df['GarageArea']\ndf['Bathrooms'] = df['FullBath'] + df['HalfBath']*0.5 \ndf['Year average']= (df['YearRemodAdd'].astype(int)+df['YearBuilt'].astype(int))\/2\n\ndf['HasBsmt'] = pd.Series(len(df['TotalBsmtSF']), index=df_train.index)\ndf['HasBsmt'] = 0 \ndf.loc[df['TotalBsmtSF']>0,'HasBsmt'] = 1\n\nprint('Adding New Features, Done.')\n\ndf_train = df[df['SalePrice'] != 'test']\ndf_test = df[df['SalePrice'] == 'test']\ndf_train['SalePrice'] = df_train['SalePrice'].astype(float)\n\n# to reduce the skewness of the saleprice it is necessary to apply the logarithm function on the saleprice. \n# More details are on this notebook: https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\ndf_train['SalePrice'] =  np.log(df_train['SalePrice'])\ndf_train['GrLivArea'] = np.log(df_train['GrLivArea'])\ndf_train.loc[df_train['HasBsmt']==1,'TotalBsmtSF'] = np.log(df_train['TotalBsmtSF'])\n\ndf_test['GrLivArea'] = np.log(df_test['GrLivArea'])\ndf_test.loc[df_test['HasBsmt']==1,'TotalBsmtSF'] = np.log(df_test['TotalBsmtSF'])\n\nprint('Adjustment of Skewness, Done.')","bbb5a0f0":"int_features = ['LotArea', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n        'LandSlope', 'OverallQual', 'ExterQual', 'ExterCond', 'BsmtQual',\n        'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC',\n        'CentralAir', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'FullBath',\n        'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n        'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu',\n        'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'WoodDeckSF',\n        'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n        'PoolQC', 'Fence', 'MiscVal', 'Remod', 'YearRemod',\n        'conditions', 'Exterior', 'veneer', 'Bsmt', 'Garage', 'Feature',\n        'HasBsmt']\n\nfloat_feartues = ['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n        'TotalBsmtSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',\n        'GarageCars', 'GarageArea', 'GarageYrBlt_Years', 'YearBuilt_Years',\n        'YearSold', 'TotalArea', 'Bathrooms', 'Year average']\n\nobj_features = ['MSSubClass', 'MSZoning', 'LotConfig', 'Neighborhood', 'Condition1',\n        'Condition2', 'BldgType', 'HouseStyle', 'OverallCond', 'YearBuilt',\n        'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n        'MasVnrType', 'Foundation', 'BsmtCond', 'Heating', 'Electrical',\n        'GarageType', 'GarageYrBlt', 'MiscFeature', 'MoSold', 'YrSold',\n        'SaleType', 'SaleCondition']\n\nexp_reg = setup(df_train, #Train Data\n                target = 'SalePrice',  #Target\n                categorical_features = obj_features, # Categorical Features\n                numeric_features = int_features + float_feartues, # Numeric Features\n                normalize = True, # Normalize Dataset\n                remove_outliers = True, # Remove 5% Outliers\n                remove_multicollinearity = True, # Remove Multicollinearity\n                silent = True # Process Automation\n               )","c02f8504":"compare_models(blacklist = ['tr', 'catboost'], sort = 'RMSLE')","23596abc":"model_br = create_model('br')\nmodel_lightgbm = create_model('lightgbm')\nmodel_xgboost = create_model('xgboost')\nmodel_ridge = create_model('ridge')","443f83c7":"tuned_br = tune_model('br')\ntuned_lightgbm = tune_model('lightgbm')\ntuned_xgboost = tune_model('xgboost')\ntuned_ridge = tune_model('ridge')","173ebd54":"plot_model(tuned_br, plot = 'learning')","bbcad942":"plot_model(tuned_lightgbm, plot = 'learning')","ba6199da":"plot_model(tuned_xgboost, plot = 'learning')","725a00ae":"plot_model(tuned_ridge, plot = 'learning')","1bcb0ae9":"blender = blend_models(estimator_list = [tuned_br, tuned_lightgbm, tuned_xgboost, tuned_ridge])","44b1afc1":"display(plot_model(blender, plot = 'learning'))","1ab3c442":"predictions = predict_model(blender, data = df_test)\ndf_sample_submission['SalePrice'] = np.expm1(predictions['Label'])\ndf_sample_submission.to_csv('submission.csv',index=False)","5d7bc670":"# Compare Models <a id=\"10\"><\/a>","77d27438":"## Gradient Boosting Regressor <a id=\"13.2\"><\/a>","c4b19ffd":"This notebook shows a very easy method of training, optimizing and blending models without writing too much code and without spending too much time looking for the best algorithms with the best hyper parameters.\n\nThe notebook is made up of two parts, the first is a mini data exploration in order to have an intuission on these, followed by a data engineering to eliminate null values and to add other values to make the dataset more explicit.\n\nThe second part is the moidelisation part with the PyCaret API which greatly facilitates the task.","6fcc9296":"I made another notebook using the same method for classification, it can be viewed from this link: \n<a href=\"https:\/\/www.kaggle.com\/servietsky\/easy-way-titanic-pycaret\">easy-way-titanic-pycaret<\/a>. Enjoy <3","bfd1612b":"# Categorical Features Exploration <a id=\"7\"><\/a>","699c5c65":"# Dsiplay Learning Curve for Blending <a id=\"15\"><\/a>","b0e5e56c":"PyCaret is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within seconds in your choice of notebook environment.\n\nTo discover more functionality of pycaret I invite you to consult the official site <a href=\"https:\/\/pycaret.org\/\">pycaret<\/a>.\n\nReference to this notebook on which i was inspired : <a href=\"https:\/\/www.kaggle.com\/frtgnn\/pycaret-introduction-classification-regression\">pycaret-introduction-classification-regression<\/a>. ","413167bc":"# Display Learning Curve <a id=\"13\"><\/a>","cdc8bdc8":"There is a strong positive linear relationship between GrLivArea, TotalBsmtSF, OverallQual and salePrice.\n\nThis is a good thing because at least there are features that can affect the price more or less.","ac6a4f24":"# Setting up Environment <a id=\"9\"><\/a>","9bae64dd":"<center>\n  <FONT size=\"10\" color = 'red'>Thank you, I hope you enjoyed. Upvote that helps me a lot =)<\/FONT>\n<\/center>","b6fea9c6":"# Create and Train Models <a id=\"11\"><\/a>","fb1b888b":"# Numeric Features Exploration <a id=\"6\"><\/a>","5c4c73f0":"## Ridge Regression <a id=\"13.4\"><\/a>","dc14f8ec":"# Train and Test Data Appearance <a id=\"2\"><\/a>","211e08d4":"From these violinplot we can easily deduce that there are quite a few outliers in the lotArea, bsmtHalfBath, MiscVal and others features.\n\nThese Outliers will be treated by magic later.","a2a5e8c6":"## Bayesian Ridge <a id=\"13.1\"><\/a>","5cca8dd6":"## Extreme Gradient Boosting <a id=\"13.3\"><\/a>","9b845e86":"# Predict and Submit <a id=\"16\"><\/a>","e6ca98f6":"![house-prices-on-the-rise-630x420.png](attachment:house-prices-on-the-rise-630x420.png)","8b82a4d4":"# Blend Models <a id=\"14\"><\/a>","e5d7b13c":"This data engineering I did it some time ago for an old notebook when I started on Kaggle,\n\nIt\u2019s a notebook that introduces model stacking, model blending and model voting,\n\nIt can be viewed at the following link:  <a href=\"https:\/\/www.kaggle.com\/servietsky\/house-prices-voting-stacking-and-belnding\">house-prices-voting-stacking-and-belnding\"<\/a>. ","1f0358cf":"# Library and Data <a id=\"1\"><\/a>","e51627eb":"# Data Engineering <a id=\"8\"><\/a>","ced60417":"![pycaret%20logo.png](attachment:pycaret%20logo.png)","397b1ea1":"# Test Report <a id=\"5\"><\/a>","b828c652":"# Contents\n\n* [<font size=4>Library and Data<\/font>](#1)\n* [<font size=4>Train and Test Data Appearance<\/font>](#2)\n* [<font size=4>Train Report<\/font>](#4)\n* [<font size=4>Test Report<\/font>](#5)\n* [<font size=4>Numeric Features Exploration<\/font>](#6)\n* [<font size=4>Categorical Features Exploration<\/font>](#7)\n* [<font size=4>Data Engineering<\/font>](#8)\n* [<font size=4>Setting up Environment<\/font>](#9)\n* [<font size=4>Compare Models<\/font>](#10)\n* [<font size=4>Create and Train Models<\/font>](#11)\n* [<font size=4>Models Tuning<\/font>](#12)\n* [<font size=4>Display Learning Curve<\/font>](#13)\n *     [Bayesian Ridge](#13.1)\n *     [Gradient Boosting Regressor](#13.2)\n *     [Extreme Gradient Boosting](#13.3)\n *     [Ridge Regression](#13.4)\n* [<font size=4>Blend Models<\/font>](#14)\n* [<font size=4>Dsiplay Learning Curve for Blending<\/font>](#15)\n* [<font size=4>Predict and Submit<\/font>](#16)","d0b2387e":"# Models Tuning <a id=\"12\"><\/a>","3fcce5cf":"# Train Report <a id=\"4\"><\/a>"}}