{"cell_type":{"ee3d55ee":"code","5954bd03":"code","56120268":"code","061e6298":"code","e7f9b84a":"code","e438c8ba":"code","d19b0a30":"code","32389fb8":"code","18b93289":"code","99918aaa":"code","d380c90c":"code","5c6bd68a":"code","eb04b1f4":"code","e6c0b77a":"code","9db84a98":"code","04e6a8cf":"code","52e78100":"code","4f9278f5":"code","5755af84":"code","728432ea":"code","9ed0a3d1":"code","ce9f3640":"code","e1fcfc34":"code","b32c130a":"code","80d73871":"code","c6d8937d":"markdown","a1404398":"markdown","bac9c9a8":"markdown","5bc85b0f":"markdown"},"source":{"ee3d55ee":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import PowerTransformer\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import StackingClassifier","5954bd03":"df=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndf.shape","56120268":"df.head(n=10)","061e6298":"df.info()","e7f9b84a":"df['Class'].value_counts().plot(kind='pie')","e438c8ba":"df.duplicated().sum()","d19b0a30":"df.drop_duplicates(keep=False,inplace=True)","32389fb8":"x=df.iloc[:,:-1]\ny=df.iloc[:,-1]\n\nprint(x.shape,y.shape)","18b93289":"smote=SMOTE()\nx,y=smote.fit_resample(x,y)","99918aaa":"print(x.shape,y.shape)","d380c90c":"print(y.value_counts().plot(kind='pie'))","5c6bd68a":"plt.figure(figsize=(10,10))\ndataplot=sns.heatmap(df.corr())\nplt.show()","eb04b1f4":"plt.figure(figsize=(50,90))\ni=1\nfor col in x.columns:\n    plt.subplot(15,2,i)\n    sns.histplot(x[col])\n    plt.xticks(fontsize=25)\n    plt.yticks(fontsize=25)\n    plt.xlabel(col,fontsize=25)\n    plt.ylabel(\"count\",fontsize=25)\n    i+=1\nplt.show()\n    \n    ","e6c0b77a":"def check_skewness(x):\n    skew_limit=0.75\n    skew_value=df[x.columns].skew()\n    #print(skew_value)\n    skew_col=skew_value[abs(skew_value)>skew_limit]\n    cols=skew_col.index\n    return cols","9db84a98":"skewed_col=check_skewness(x)\nprint(skewed_col)","04e6a8cf":"pt=PowerTransformer(standardize=False)\nx[skewed_col]=pt.fit_transform(x[skewed_col])","52e78100":"x.duplicated().sum()","4f9278f5":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=1)\n\nprint(xtrain.shape)\nprint(ytrain.shape)\nprint(xtest.shape)\nprint(ytest.shape)","5755af84":"sc=StandardScaler()\nxtrain=sc.fit_transform(xtrain)\nxtest=sc.transform(xtest)","728432ea":"def model_evaluate(model):\n    model.fit(xtrain,ytrain)\n    acc=model.score(xtest,ytest)\n    \n    print(\"Model Name\",model)\n    print(\"Acuuracy\",acc)","9ed0a3d1":"lr=LogisticRegression()\nsvm=SVC()\ndt=DecisionTreeClassifier(max_depth=6)\nrf=RandomForestClassifier(max_samples=0.9)\nknn=KNeighborsClassifier(n_neighbors=5)\n\nmodels=[lr,dt,rf,knn]\n\nfor model in models:\n    model_evaluate(model)","ce9f3640":"base_models=[('RF',RandomForestClassifier(max_samples=0.9)),('knn',KNeighborsClassifier(n_neighbors=5))]\nmeta_model = LogisticRegression()\nstacking_model = StackingClassifier(estimators=base_models, final_estimator=meta_model, passthrough=True, cv=3)","e1fcfc34":"stacking_model.fit(xtrain, ytrain)\nacc=stacking_model.score(xtest,ytest)","b32c130a":"from sklearn.metrics import confusion_matrix\ny_pred = stacking_model.predict(xtest)\nconf_matrix = confusion_matrix(ytest, y_pred)\nsns.heatmap(conf_matrix, annot = True, fmt='g')","80d73871":"from sklearn.metrics import classification_report\nprint(classification_report(ytest, y_pred))","c6d8937d":"### Data is highly imbalanced .We will correct it by oversamplying .After correcting we will check the skewness of the data ","a1404398":"### Checking for the Duplicate Entries after SMOTE just to be sure ","bac9c9a8":"### This saves us from Multi co-linearity","5bc85b0f":"### Checking for Duplicate Entries "}}