{"cell_type":{"738055f3":"code","8bd0106a":"code","4bdb30a7":"code","d77e263a":"code","e091ee98":"code","b3715f98":"code","09ae87c0":"code","390860b0":"code","85ea1e64":"code","aaa708aa":"code","da3e3fd7":"code","29653a5e":"code","e9aaa521":"code","2cc0e230":"code","bb0dbcf5":"code","5a6129f3":"code","b88ac9f7":"code","b348f76b":"code","32ffae91":"code","9a6fc713":"code","cc366e88":"code","03b60ebf":"code","6dd5ea3b":"code","f05c0fc8":"code","cf0d3517":"code","4c888844":"code","7ba206d6":"code","eecfa9db":"code","d982b327":"code","45039d13":"code","7f27f457":"code","156eb735":"code","6850c2b7":"code","e02149f3":"code","d56b9ee0":"markdown"},"source":{"738055f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bd0106a":"data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv')","4bdb30a7":"data.head()","d77e263a":"data.describe()","e091ee98":"data.columns","b3715f98":"#check the data type of each column\ndata.dtypes","09ae87c0":"#to check if any of the columns have null values\nnum_col = [col for col in data.columns if data[col].isnull().any() and data[col].dtype is ['int','float'] ]","390860b0":"#it seems all the columns have values for each row therefore it is empty\nnum_col","85ea1e64":"# check the unique values present in each column\nfor i in data.columns:\n    print(i,':',data[i].unique())","aaa708aa":"#from this we come to know that there are two columns that can be excluded as they have only one value : soil_type7  and soil_type15\nfinal = data.drop(['Soil_Type15','Soil_Type7'],axis=1)","da3e3fd7":"final.columns","29653a5e":"train_yy = final.Cover_Type\ntrain_yy.count()","e9aaa521":"train_Xx= final.copy()\ntrain_X1=train_Xx.drop('Cover_Type',axis =1)","2cc0e230":"y= train_yy\nX=train_X1","bb0dbcf5":"y.count()","5a6129f3":"X.count()","b88ac9f7":"from sklearn.model_selection import train_test_split\n\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,train_size =0.85,test_size =0.15,random_state=1)","b348f76b":"train_X.head()","32ffae91":"train_y.count()","9a6fc713":"train_X.count()","cc366e88":"val_X.count()","03b60ebf":"val_y.count()","6dd5ea3b":"# now let us read the test data \ntest_X1 = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv')","f05c0fc8":"test_X1.columns","cf0d3517":"final_test = test_X1.drop(['Soil_Type15','Soil_Type7'],axis=1)","4c888844":"final_test.head()","7ba206d6":"final_test.columns","eecfa9db":"from xgboost import XGBClassifier\nmodel2 = XGBClassifier(n_estimators=400,learning_rate =0.7,max_depth=7,colsample_bytree=0.7,gamma =1)\nmodel2.fit(train_X,train_y,early_stopping_rounds = 5,eval_set=[(val_X,val_y)],verbose=True)","d982b327":"model2.predict(val_X)\n\n#OUTPUT : -  array([2, 2, 1, ..., 2, 1, 3], dtype=int64)","45039d13":"model2.score(val_X,val_y)\n#OUTPUT : - 0.9610533333333333","7f27f457":"pred2=model2.predict(final_test)","156eb735":"out= pd.DataFrame({'Id':final_test.Id,'Cover_Type':pred2})","6850c2b7":"out.to_csv('submission_final.csv',index=False)","e02149f3":"out[:17]\n\n# final score in test data is (95.30)","d56b9ee0":"now we just check whether all the data that has been spilt is correct in terms of count and number of columns"}}