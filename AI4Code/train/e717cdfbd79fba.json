{"cell_type":{"be367782":"code","5f468cb5":"code","4112257a":"code","21a3cc2d":"code","0bf334a0":"code","8d3f3186":"code","cdfbb31a":"code","d94b16a4":"code","c2a0cd65":"code","c4c7db51":"code","bb7345cc":"code","5fb61eeb":"code","a46a94cf":"code","914bd73e":"code","a7a598db":"code","f427fa00":"code","da97597d":"code","be394b5f":"code","0453421f":"code","5703a852":"code","b1bc7bcb":"code","5376e629":"code","145f9d56":"code","ca627473":"code","b6dbf6f3":"code","afac5eab":"code","eca09183":"code","eaa38c4b":"code","93b3438b":"code","94af5db8":"code","66633595":"code","6e404e29":"code","eed8bf8b":"code","17d15de1":"code","7da7057f":"code","c58f8db8":"code","a001f2fc":"code","679d9470":"code","e1de6b6f":"code","026f598b":"code","1e23d7fe":"code","d97c2d9d":"code","5160d914":"code","1e1394b3":"code","dbb83176":"code","781f7a10":"code","a37528ae":"code","5194028d":"code","ccf6288a":"code","4a864ea2":"code","7fb541fd":"code","99b3bc8a":"code","5592da3f":"code","1413e6ce":"code","891a4ebe":"code","620142a2":"code","c816b05f":"code","e0f1792a":"code","e37d7268":"code","8831bfd0":"code","ff6f9926":"code","878f7a36":"code","f309d856":"code","2e15342e":"code","eede292e":"code","5806f3a3":"code","b2a43ed0":"code","4f2c1150":"code","1679eb94":"code","a69c0094":"code","7361280e":"code","dd351862":"code","6694da1b":"code","c09efc96":"code","5a97782a":"code","b45a9b1b":"code","44a3a19f":"code","59985595":"code","68bc51fe":"code","1edff6d6":"code","1debf051":"code","2e1f8f59":"code","d7a2fb05":"code","647729fc":"code","aa17344b":"code","bce23d78":"code","34957756":"code","5fdd365e":"code","cd514c4c":"code","65ddd8d5":"code","64eb52ed":"code","8d4daa17":"code","9a5a5299":"code","95aaa5ad":"code","6c410195":"code","628b9c91":"code","e49eed9e":"code","e7ce7268":"markdown","047fedcd":"markdown","f447526c":"markdown","b387432c":"markdown","bf0a31d7":"markdown","48d1e346":"markdown","9d3d9a87":"markdown","d71def07":"markdown","88150fcb":"markdown","a590bca3":"markdown","c5646289":"markdown","141c5588":"markdown","a401d38c":"markdown","70e770f2":"markdown","ab6fd10a":"markdown","ecdaff6b":"markdown","08f4a1a1":"markdown","ef83f738":"markdown","9d8ad675":"markdown","46b3b379":"markdown","9c7e5743":"markdown","dc4bc0db":"markdown","8e1b66b4":"markdown","0d9bf38f":"markdown","c389776d":"markdown"},"source":{"be367782":"import gc","5f468cb5":"import tensorflow as tf","4112257a":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier","21a3cc2d":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndf_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0)#, skiprows=lambda x: x%20!=0)\n#df_test = #test\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3092train\u3092\u53c2\u8003\u306b\u66f8\u3044\u3066\u898b\u307e\u3057\u3087\u3046\uff01\ndf_test = pd.read_csv('..\/input\/homework-for-students2\/test.csv', index_col=0)#, skiprows=lambda x: x%20!=0)","0bf334a0":"# DataFrame\u306eshape\u3067\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ndf_train.shape, df_test.shape","8d3f3186":"# \u5148\u982d5\u884c\u3092\u307f\u3066\u307f\u307e\u3059\u3002\n#df_train.head()","cdfbb31a":"#df_test.head()","d94b16a4":"#df_train[(df_train.loan_amnt>1000)&&(df_train.grade =='A')]","c2a0cd65":"#df_train[df_train.loan_condition==1]","c4c7db51":"#df_train[df_train.loan_condition==1].loan_amnt.mean()","bb7345cc":"# \u4e0a\u306e\u8cb8\u3057\u5012\u308c\u305f\u30ed\u30fc\u30f3\u306b\u5bfe\u3059\u308b\u3082\u306e\u3092\u53c2\u8003\u306b\u3001\u8cb8\u3057\u5012\u308c\u3066\u3044\u306a\u3044\u30ed\u30fc\u30f3\u306e\u5e73\u5747\u984d\u3092\u7b97\u51fa\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n#df_train[df_train.loan_condition==0].loan_amnt.mean()","5fb61eeb":"#df_train.describe()","a46a94cf":"#df_test.describe()","914bd73e":"#f = 'loan_amnt'\n\n#plt.figure(figsize=[7,7])\n#df_train[f].hist(density=True, alpha=0.5, bins=20,color='r')\n#df_test[f].hist(density=True, alpha=0.5, bins=20,color='b')\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n#plt.xlabel(f)\n#plt.ylabel('density')\n#plt.show()","a7a598db":"#len(df_test)","f427fa00":"#f = 'purpose'\n#df_train[f].value_counts()\/len(df_train)\n# value_counts\u3092\u7528\u3044\u3066train\u306epurpose\u306b\u5bfe\u3057\u3066\u96c6\u8a08\u7d50\u679c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002","da97597d":"#f = 'purpose'\n#df_test[f].value_counts()\/len(df_test)\n# \u540c\u69d8\u306btest\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066","be394b5f":"#f = 'emp_length'\n#df_train[f].value_counts()\/len(df_train)","0453421f":"y_train = df_train.loan_condition\n#loan_condition\u524a\u9664\nX_train = df_train.drop(['loan_condition'], axis =1)\n\nX_test = df_test","5703a852":"from sklearn.preprocessing import StandardScaler , MinMaxScaler","b1bc7bcb":"#scaler = StandardScaler()\nscaler = MinMaxScaler()","5376e629":"##\u5225\u3005\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\nX_train['loan_amnt'] = scaler.fit_transform(X_train[['loan_amnt']])\nX_test['loan_amnt'] = scaler.transform(X_test[['loan_amnt']])\n\n##Train \u3068\u3000Test\u3092\u4e00\u7dd2\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b \u30fc\u30fc\uff1e\u30a8\u30e9\u30fc\u3067\u8ae6\u3081\n#scaler.fit(pd.concat([X_train['loan_amnt'],X_test['loan_amnt']]))\n#train_scaled = scaler.transform(X_train[['loan_amnt']])\n#test_scaled = scaler.transform(X_test[['loan_amnt']])           ","145f9d56":"scaler2 = MinMaxScaler()\n##\u5225\u3005\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\nX_train['installment'] = scaler2.fit_transform(X_train[['installment']])\nX_test['installment'] = scaler2.transform(X_test[['installment']])","ca627473":"#f='loan_amnt'\n\n#plt.figure(figsize=[7,7])\n#df_train[f].hist(density = True,alpha=0.5,bins=20)\n#plt.xlabel(f)\n#plt.ylabel('density')\n#plt.show()","b6dbf6f3":"#f='loan_amnt'\n\n#plt.figure(figsize=[7,7])\n#df_test[f].hist(density=True, alpha=0.5,bins=20)\n#plt.xlabel(f)\n#plt.ylabel('density')\n#plt.show()","afac5eab":"#plt.figure(figsize=[7,7])\n#X_train.annual_inc.hist(bins=100)\n#X_test.annual_inc.hist(bins=20)\n#plt.show","eca09183":"#plt.figure(figsize=[7,7])\n#np.log1p(X_train.annual_inc).hist(bins=100)\n#np.log1p(X_test.annual_inc).hist(bins=10)\n#plt.show","eaa38c4b":"#plt.figure(figsize=[7,7])\n#X_train.annual_inc.apply(np.log).hist(bins=100)\n#np.log1p(X_train.annual_inc).hist(bins=100)\n#X_train.annual_inc.apply(np.log).hist(bins=100)\n#plt.show","93b3438b":"##\u7d66\u4e0e\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307e\u3059\nX_train['annual_inc'] = X_train['annual_inc'].apply(np.log1p)\nX_test['annual_inc'] = X_test['annual_inc'].apply(np.log1p)","94af5db8":"# dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","66633595":"X_train['emp_title'].head(10) # \u30ab\u30c6\u30b4\u30ea\u3088\u308a\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u6271\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044","6e404e29":"cats","eed8bf8b":"#col = 'purpose'\n\n#encoder = OneHotEncoder()\n#enc_train = encoder.fit_transform(X_train[col].values)\n#enc_test = encoder.transform(X_test[col].values)","17d15de1":"#enc_train.head()","7da7057f":"#enc_test.head()","c58f8db8":"#X_train.head()","a001f2fc":"#X_train =pd.concat([X_train, enc_train], axis=1)","679d9470":"#X_train.head()","e1de6b6f":"# Onehot\u306e\u4f8b\u3092\u53c2\u8003\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n# https:\/\/contrib.scikit-learn.org\/categorical-encoding\/ordinal.html\n#encoder = OrdinalEncoder()\n#enc_train = encoder.fit_transform(X_train[col].values)\n#enc_test = encoder.transform(X_test[col].values)\n","026f598b":"#col = 'purpose'\n#value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\n#summary = X_train[col].value_counts()\n#summary","1e23d7fe":"# map\u3059\u308b\u3002\n#enc_train = X_train[col].map(summary)\n#enc_test = X_test[col].map(summary)","d97c2d9d":"#Purpose\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'purpose'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","5160d914":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","1e1394b3":"X_train = X_train.rename(columns={0: 'purpose2'})\nX_test = X_test.rename(columns={0: 'purpose2'})","dbb83176":"X_train.head()","781f7a10":"#Grade\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'grade'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","a37528ae":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","5194028d":"X_train = X_train.rename(columns={0: 'grade2'})\nX_test = X_test.rename(columns={0: 'grade2'})","ccf6288a":"#Sub Grade\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ncol = 'sub_grade'\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nenc_test = X_test[col].map(summary) \n\n    \n# X_train\u306e\u30ab\u30c6\u30b4u8\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n\nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)","4a864ea2":"X_train = pd.concat([X_train.drop(col, axis=1), enc_train], axis = 1)\nX_test = pd.concat([X_test.drop(col, axis=1), enc_test], axis = 1)","7fb541fd":"X_train = X_train.rename(columns={0: 'sub_grade2'})\nX_test = X_test.rename(columns={0: 'sub_grade2'})","99b3bc8a":"u = X_train['emp_length'].unique()\nprint(u)\nprint(type(u))","5592da3f":"col = 'emp_length'\n# value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\nsummary = X_train[col].value_counts()\nsummary","1413e6ce":"#\u52e4\u7d9a\u5e74\u6570\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\nemp_leng_transfer = pd.DataFrame({'emp_length' : u,\n                                                                  'emp_years' : [10,2,1,3,0,7,5,6,8,0.5,4,9]})","891a4ebe":"X_train = X_train.merge(emp_leng_transfer, on='emp_length', how ='left')\nX_train = X_train.drop(['emp_length'], axis =1)\n","620142a2":"X_test = X_test.merge(emp_leng_transfer, on='emp_length', how ='left')\nX_test = X_test.drop(['emp_length'], axis =1)","c816b05f":"col = 'emp_years'\n# value_couonts\u3067\u96c6\u8a08\u3057\u305f\u7d50\u679c\u3092\u3001\nsummary = X_train[col].value_counts()\nsummary","e0f1792a":"df_statelatlong = pd.read_csv('..\/input\/homework-for-students2\/statelatlong.csv')\ndf_US_GDP_by_State = pd.read_csv('..\/input\/homework-for-students2\/US_GDP_by_State.csv')\n#\u540d\u524d\u5909\u66f4\ndf_statelatlong = df_statelatlong.rename(columns={'State': 'addr_state'})\n#\u540d\u524d\u5909\u66f4\ndf_US_GDP_by_State = df_US_GDP_by_State.rename(columns={'State': 'City'})","e37d7268":"#\u30de\u30b9\u30bf\u306e\u7d50\u5408\ndf_statelatlong = pd.concat([df_statelatlong.drop(['City'], axis=1), df_US_GDP_by_State], axis = 1,join='inner')","8831bfd0":"#statelatlong\u3092\u7d50\u5408\n#X_train = pd.concat([X_train.drop(['addr_state'], axis=1), df_statelatlong], axis = 1,join='inner')\n#X_test = pd.concat([X_test.drop(['addr_state'], axis=1), df_statelatlong], axis = 1,join='inner')\n\nX_train=pd.merge(X_train, df_statelatlong, on = 'addr_state', how ='left')\nX_test=pd.merge(X_test, df_statelatlong, on = 'addr_state', how ='left')\n\nX_train = X_train.drop(['City'], axis=1)\nX_train = X_train.drop(['year'], axis=1)\nX_train = X_train.drop(['addr_state'], axis=1)\n\nX_test = X_test.drop(['City'], axis=1)\nX_test = X_test.drop(['year'], axis=1)\nX_test = X_test.drop(['addr_state'], axis=1)\n","ff6f9926":"TXT_train = X_train.emp_title.copy()\nTXT_test = X_test.emp_title.copy()\n\ncats.remove('emp_title')","878f7a36":"#\u4e0d\u8981\u5217\u306e\u524a\u9664\u3000\n#title\u306fPurpose\u3068\u304a\u306a\u3058\u306a\u306e\u3067\u3001\u524a\u9664\n#X_train = X_train.drop(['title'],axis=1)\n#X_test = X_test.drop(['title'],axis=1)\n#zip_code\u3082\u524a\u9664\n#X_train = X_train.drop(['zip_code'],axis=1)\n#X_test = X_test.drop(['zip_code'],axis=1)\n\ncats.remove('purpose')\ncats.remove('emp_length')\ncats.remove('addr_state')\ncats.remove('grade')\ncats.remove('sub_grade')\n#cats.remove('zip_code')\n#cats.remove('title')\n","f309d856":"cats","2e15342e":" # \u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\nencoder = OrdinalEncoder(cols=cats)","eede292e":"X_train[cats]=encoder.fit_transform(X_train[cats])\nX_test[cats]=encoder.transform(X_test[cats])","5806f3a3":"#X_train['titlenull_flg']=X_train.emp_title.isnull().astype(int)\n#X_test['titlenull_flg']=X_test.emp_title.isnull().astype(int)","b2a43ed0":"#X_train['titlenull_flg'].value_counts()","4f2c1150":"##\u52e4\u7d9a\u5e74\u6570\nX_train['titlenull_flg']=X_train['emp_years'].apply(lambda x : 1 if x == 0 else 0)\nX_test['titlenull_flg']=X_test['emp_years'].apply(lambda x : 1 if x == 0 else 0)","1679eb94":"X_train['titlenull_flg'].value_counts()","a69c0094":"# \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046 \nX_train.drop(['emp_title'],axis = 1, inplace=True)\nX_test.drop(['emp_title'],axis = 1, inplace=True)\n\nX_train.fillna(-9999,inplace=True)\nX_test.fillna(-9999,inplace=True)\n\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.drop.html\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html","7361280e":"TXT_train.fillna('#', inplace=True) #inplace\u306f\u4e0a\u66f8\u304d\nTXT_test.fillna('#', inplace=True)","dd351862":"tfidf = TfidfVectorizer(max_features=1000, use_idf=True) #\u30ab\u30e9\u30e0\u65b9\u5411\u306b\u6b63\u898f\u5316\u3059\u308b","6694da1b":"tfidf","c09efc96":"TXT_train = tfidf.fit_transform(TXT_train)\nTXT_test = tfidf.transform(TXT_test)","5a97782a":"#\u758e\u884c\u5217\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\nTXT_train","b45a9b1b":"TXT_train.shape","44a3a19f":"# todense\u3067\u5bc6\u884c\u5217\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u304c\u3001\u307b\u3069\u3093\u3069\u30bc\u30ed\u3067\u3042\u308b\u3053\u3068\u304c\u307f\u3066\u53d6\u308c\u307e\u3059\u3002\nTXT_train.todense()","59985595":"TXT_train","68bc51fe":"# Return a Coordinate (coo) representation of the Compresses-Sparse-Column (csc) matrix.\n#coo_train = TXT_train.tocoo(copy=False)\n#coo_test = TXT_test.tocoo(copy=False)","1edff6d6":"#coo_train","1debf051":"#DataFrame\u5f62\u5f0f\u306b\u5024\u3092\u53d6\u308a\u51fa\u3057\n#df_txt_train=pd.DataFrame({'index': coo_train.row, 'col': coo_train.col, 'data': coo_train.data}\n                 )[['index', 'col', 'data']].sort_values(['index', 'col']\n                 ).reset_index(drop=True)\n#df_txt_test=pd.DataFrame({'index': coo_test.row, 'col': coo_test.col, 'data': coo_test.data}\n                 )[['index', 'col', 'data']].sort_values(['index', 'col']\n                 ).reset_index(drop=True)","2e1f8f59":"#df_txt_train.info()","d7a2fb05":"#df_txt_test.info()","647729fc":"#iMerge\u306e\u969b\u306b\u30ad\u30fc\u3068\u306a\u308bndex\u304c\u8907\u6570\u3042\u308b\u306e\u3067\u3001Group\u3000by\u3000\u305d\u308c\u4ee5\u5916\u306e\u5024\u306f\u5e73\u5747\u5024\u3092\u3068\u308b\u3002\u3002\u3002\u3002\u3002\u3053\u308c\u3067\u3044\u3044\u306e\u304b\uff01\uff1f\n#df_txt_train=df_txt_train.groupby(['index'], as_index=False)['col','data'].mean()\n#df_txt_test=df_txt_test.groupby(['index'], as_index=False)['col','data'].mean()","aa17344b":"X_train.fillna(-9999,inplace=True)\nX_test.fillna(-9999,inplace=True)","bce23d78":"#df_txt_train=df_txt_train.groupby(['index'], as_index=False)['col','data'].mean()","34957756":"#df_txt_train.info()","5fdd365e":"#X_train.info()","cd514c4c":"#X_train=sp.sparse.hstack([X_train.values, TXT_train])","65ddd8d5":"#X_test=sp.sparse.hstack([X_test.values, TXT_test])","64eb52ed":"#X_train=sp.sparse.hstack([X_train.values, TXT_train]).todense()\n#X_test=sp.sparse.hstack([X_test.values, TXT_test]).todense()","8d4daa17":"#X_train","9a5a5299":"# CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\u3002\u5c64\u5316\u62bd\u51fa\u3067\u826f\u3044\u304b\u306f\u5225\u9014\u3088\u304f\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    \n    clf = GradientBoostingClassifier()\n    \n    clf.fit(X_train_, y_train_)\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    \n    print('CV Score of Fold_%d is %f' % (i, score))","95aaa5ad":"print(np.mean(scores))\nprint(scores)","6c410195":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict_proba(X_test)[:,1]","628b9c91":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# \u3053\u3061\u3089\u3082\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b20\u5206\u306e\uff11\u306b\u9593\u5f15\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u756a\u3067\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u7528\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)#, skiprows=lambda x: x%20!=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","e49eed9e":"submission.head()","e7ce7268":"# \u30ed\u30fc\u30f3\u984d\u3092\u6b63\u898f\u5316","047fedcd":"## addr_state\u306e\u7d50\u5408","f447526c":"## sp.sparse.hstack\u3067\u5143\u306eX_train\u306b\u7d50\u5408\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5bc6\u884c\u5217\u306b\u5909\u63db\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u6700\u8fd1\u306f\u758e\u884c\u5217\u306e\u307e\u307e\u3067\u826f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u591a\u3044\u3067\u3059\u3002","b387432c":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf","bf0a31d7":"# \u8fd4\u6e08\u984d\u3092\u6b63\u898f\u5316\u3000installment","48d1e346":"### \u307e\u305a\u306f\u6b20\u640d\u5024\u3092\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","9d3d9a87":"# AI Academy FE\u8ab2\u984c\u63d0\u51fa 11\/20 07:00","d71def07":"## Count\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","88150fcb":"## \u30ed\u30fc\u30f3\u76ee\u7684\u306b\u3064\u3044\u3066\u3001value_counts\u3068\u898b\u3066\u307f\u308b","a590bca3":"## \u57fa\u672c\u7d71\u8a08\u91cf\u3092train\/test\u3067\u6bd4\u8f03\u3057\u3066\u307f\u3088\u3046","c5646289":"##dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u3092\u5168\u3066Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304a\u304d\u307e\u3059\u3002","141c5588":"## Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","a401d38c":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","70e770f2":"## Target\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","ab6fd10a":"## \u30e2\u30c7\u30ea\u30f3\u30b0","ecdaff6b":"### tfidf\u3067\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u5ea6\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u306a\u304a\u3001idf\u306fTree\u7cfb\u3067\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u3084NN\u3067\u306f\u6709\u7528\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u9069\u7528\u3057\u3066\u304a\u304d\u307e\u3059\u3002","08f4a1a1":"## \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8272\u3005\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046","ef83f738":"##  One-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","9d8ad675":"## X\u3068y\u306b\u5206\u5272\u3057\u307e\u3059","46b3b379":"## \u30ed\u30fc\u30f3\u984d\u306b\u3064\u3044\u3066\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u3066\u307f\u308b\u3002","9c7e5743":"## emp_title\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u898b\u3048\u308b\u306e\u3067\u4e00\u65e6\u5206\u96e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002","dc4bc0db":"\u8272\u3005\u306a\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u53ef\u8996\u5316\u3084\u96c6\u8a08\u3092\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046\u3002Kaggle\u306eKernel (notebook)\u306a\u3069\u3082\u6709\u7528\u3067\u3059\u3002\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3084\u30e2\u30c7\u30ea\u30f3\u30b0\u3060\u3051\u3067\u306a\u304f\u3001EDA\u306b\u7279\u5316\u3057\u305f\u3082\u306e\u3082\u591a\u304f\u3001\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002","8e1b66b4":"## \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u3092\u9664\u3044\u3066\u3001\u6b20\u640d\u5024\uff08\u7a7a\u6b04\uff09\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u3066\u304a\u304d\u307e\u3059\u3002","0d9bf38f":"## \u7121\u8077\u30d5\u30e9\u30b0\u8ffd\u52a0","c389776d":"## \u7d66\u4e0e\u984d\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306ftree\u7cfb\u306b\u5bfe\u3057\u3066\u306f\u307b\u307c\u52b9\u679c\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3069\u306e\u3088\u3046\u306a\u5909\u63db\u304c\u52b9\u679c\u7684\u304b\u3001\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u3080\u4e2d\u3067\u8272\u3005\u8003\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002"}}