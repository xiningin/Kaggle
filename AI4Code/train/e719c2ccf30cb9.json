{"cell_type":{"82eca0c3":"code","3bb37e7c":"code","d916878a":"code","45fc2d8b":"code","d08fad50":"code","d883610d":"code","c56370d8":"code","cb5cdeba":"code","48130113":"code","e65bec3a":"code","24e3163d":"code","ad14508d":"code","f82abdbc":"code","7d0e1709":"code","85b27795":"code","b8aadac7":"code","7783620c":"code","34fb5482":"code","31f97b95":"code","7cdeb587":"code","ebe8f890":"code","b691696d":"code","162d7231":"code","1464d520":"code","fade049f":"code","1d1a607a":"code","d7d90dd0":"code","10447830":"code","3fad39db":"code","c8c77404":"code","50843542":"markdown","94841a25":"markdown","a17d4a37":"markdown","c201f4a5":"markdown","2066edac":"markdown","8633ce79":"markdown"},"source":{"82eca0c3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport warnings\n\nfrom keras.layers import Input, Embedding, Flatten, Dot, Dense\nfrom keras.models import Model\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline","3bb37e7c":"dataset = pd.read_csv('..\/input\/ratings.csv')","d916878a":"dataset.head()","45fc2d8b":"dataset.shape","d08fad50":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(dataset, test_size=0.2, random_state=42)","d883610d":"train.head()","c56370d8":"test.head()","cb5cdeba":"n_users = len(dataset.user_id.unique())\nn_users","48130113":"n_books = len(dataset.book_id.unique())\nn_books","e65bec3a":"# creating book embedding path\nbook_input = Input(shape=[1], name=\"Book-Input\")\nbook_embedding = Embedding(n_books+1, 5, name=\"Book-Embedding\")(book_input)\nbook_vec = Flatten(name=\"Flatten-Books\")(book_embedding)\n\n# creating user embedding path\nuser_input = Input(shape=[1], name=\"User-Input\")\nuser_embedding = Embedding(n_users+1, 5, name=\"User-Embedding\")(user_input)\nuser_vec = Flatten(name=\"Flatten-Users\")(user_embedding)\n\n# performing dot product and creating model\nprod = Dot(name=\"Dot-Product\", axes=1)([book_vec, user_vec])\nmodel = Model([user_input, book_input], prod)\nmodel.compile('adam', 'mean_squared_error')","24e3163d":"from keras.models import load_model\n\nif os.path.exists('regression_model.h5'):\n    model = load_model('regression_model.h5')\nelse:\n    history = model.fit([train.user_id, train.book_id], train.rating, epochs=5, verbose=1)\n    model.save('regression_model.h5')\n    plt.plot(history.history['loss'])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Training Error\")","ad14508d":"model.evaluate([test.user_id, test.book_id], test.rating)","f82abdbc":"predictions = model.predict([test.user_id.head(10), test.book_id.head(10)])\n\n[print(predictions[i], test.rating.iloc[i]) for i in range(0,10)]","7d0e1709":"from keras.layers import Concatenate\n\n# creating book embedding path\nbook_input = Input(shape=[1], name=\"Book-Input\")\nbook_embedding = Embedding(n_books+1, 5, name=\"Book-Embedding\")(book_input)\nbook_vec = Flatten(name=\"Flatten-Books\")(book_embedding)\n\n# creating user embedding path\nuser_input = Input(shape=[1], name=\"User-Input\")\nuser_embedding = Embedding(n_users+1, 5, name=\"User-Embedding\")(user_input)\nuser_vec = Flatten(name=\"Flatten-Users\")(user_embedding)\n\n# concatenate features\nconc = Concatenate()([book_vec, user_vec])\n\n# add fully-connected-layers\nfc1 = Dense(128, activation='relu')(conc)\nfc2 = Dense(32, activation='relu')(fc1)\nout = Dense(1)(fc2)\n\n# Create model and compile it\nmodel2 = Model([user_input, book_input], out)\nmodel2.compile('adam', 'mean_squared_error')","85b27795":"from keras.models import load_model\n\nif os.path.exists('regression_model2.h5'):\n    model2 = load_model('regression_model2.h5')\nelse:\n    history = model2.fit([train.user_id, train.book_id], train.rating, epochs=5, verbose=1)\n    model2.save('regression_model2.h5')\n    plt.plot(history.history['loss'])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Training Error\")","b8aadac7":"model2.evaluate([test.user_id, test.book_id], test.rating)","7783620c":"predictions = model2.predict([test.user_id.head(10), test.book_id.head(10)])\n\n[print(predictions[i], test.rating.iloc[i]) for i in range(0,10)]","34fb5482":"# Extract embeddings\nbook_em = model.get_layer('Book-Embedding')\nbook_em_weights = book_em.get_weights()[0]","31f97b95":"book_em_weights[:5]","7cdeb587":"from sklearn.decomposition import PCA\nimport seaborn as sns\n\npca = PCA(n_components=2)\npca_result = pca.fit_transform(book_em_weights)\nsns.scatterplot(x=pca_result[:,0], y=pca_result[:,1])","ebe8f890":"book_em_weights = book_em_weights \/ np.linalg.norm(book_em_weights, axis = 1).reshape((-1, 1))\nbook_em_weights[0][:10]\nnp.sum(np.square(book_em_weights[0]))","b691696d":"pca = PCA(n_components=2)\npca_result = pca.fit_transform(book_em_weights)\nsns.scatterplot(x=pca_result[:,0], y=pca_result[:,1])","162d7231":"from sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntnse_results = tsne.fit_transform(book_em_weights)","1464d520":"sns.scatterplot(x=tnse_results[:,0], y=tnse_results[:,1])","fade049f":"# Creating dataset for making recommendations for the first user\nbook_data = np.array(list(set(dataset.book_id)))\nbook_data[:5]","1d1a607a":"user = np.array([1 for i in range(len(book_data))])\nuser[:5]","d7d90dd0":"predictions = model.predict([user, book_data])\n\npredictions = np.array([a[0] for a in predictions])\n\nrecommended_book_ids = (-predictions).argsort()[:5]\n\nrecommended_book_ids","10447830":"# print predicted scores\npredictions[recommended_book_ids]","3fad39db":"books = pd.read_csv('..\/input\/books.csv')\nbooks.head()","c8c77404":"books[books['id'].isin(recommended_book_ids)]","50843542":"<a id=\"2\"><\/a> \n## Creating dot product model\nMost recommendation systems are build using a simple dot product as shown below but newer ones are now implementing a neural network instead of the simple dot product.","94841a25":"<a id=\"3\"><\/a> \n## Creating Neural Network\nNeural Networks proved there effectivness for almost every machine learning problem as of now and they also perform exceptionally well for recommendation systems.","a17d4a37":"<a id=\"5\"><\/a> \n## Making Recommendations","c201f4a5":"<a id=\"1\"><\/a> \n## Loading in data","2066edac":"<a id=\"4\"><\/a> \n## Visualizing Embeddings\nEmbeddings are weights that are learned to represent some specific variable like books and user in our case and therefore we can not only use them to get good results on our problem but also to extract inside about our data.","8633ce79":"# Book Recommendation System using Keras\nA recommendation system seeks to predict the rating or preference a user would give to an item given his old item ratings or preferences. Recommendation systems are used by pretty much every major company in order to enhance the quality of their services.  \nContent:  \n1. [Loading in data](#1)  \n2. [Creating dot product model](#2)\n3. [Creating Neural Network](#3)\n4. [Visualizing Embeddings](#4)\n5. [Making Recommendations](#5)"}}