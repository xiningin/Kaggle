{"cell_type":{"fdf51d6a":"code","98985605":"code","1c96b444":"code","ae9c053b":"code","da79c577":"code","77b129e9":"code","fe3eccfb":"code","e18ab236":"code","0d585641":"code","15e07267":"code","286c9223":"code","c8ff5a0e":"code","88511682":"code","c535c314":"code","ebdf940a":"code","3f5f1131":"code","36d9312d":"code","1b1a7e12":"code","ddf56198":"code","f6dae1bf":"code","7456bf8a":"code","63f87840":"code","47ec86d4":"code","0d067adb":"code","700faf62":"code","3aeb0b56":"code","2323c979":"code","110c3c34":"code","32b4a901":"code","cdf14a5a":"code","15e23fb0":"code","d1d503ad":"code","c6a23666":"code","08227475":"code","907c1123":"code","6a788f78":"code","a66b2d5b":"code","11b5f86f":"code","ffd5e056":"code","596e4dcb":"markdown","bff22348":"markdown","132c7454":"markdown","c5d5c103":"markdown","e1c479d7":"markdown","ffc6cb48":"markdown","5bf21fc9":"markdown","12c30e2f":"markdown","f00a9d09":"markdown","0c45e2fa":"markdown","8e53e7f7":"markdown","e5269dda":"markdown","83b3b752":"markdown"},"source":{"fdf51d6a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","98985605":"df  = pd.read_csv(\"..\/input\/engineering-placements-prediction\/collegePlace.csv\")\ndf.head()\ndf.tail()","1c96b444":"df.info()","ae9c053b":"df.describe()","da79c577":"df['Gender'].value_counts()","77b129e9":"import plotly.express as px\nfrom plotly.subplots import make_subplots\npx.histogram(df, x = \"Gender\", title = \"<b>Total Male and Female<\/b>\")","fe3eccfb":"fig = px.pie(df, names = \"Gender\",\n             title = \"<b>Counts in Gender<\/b>\",\n             hole = 0.5)\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 1.5)))\n\n\nfig.show()","e18ab236":"df['HistoryOfBacklogs'].value_counts()\nprint(\"Number of students having backlog in past are: \",df['HistoryOfBacklogs'].value_counts()[1])","0d585641":"df['Hostel'].value_counts()\nprint(\"Number of students who stay in hostel are : \",df['Hostel'].value_counts()[1])\nprint(\"Number of students who are day scholar's : \",df['Hostel'].value_counts()[0])","15e07267":"fig = px.histogram(df, 'Age',\n                   title=\"<b>Average Age of Student<\/b>\")\n\nfig.add_vline(x=df['Age'].mean(), line_width=2, line_dash=\"dash\", line_color=\"red\")\n\nfig.show()","286c9223":"df['Stream'].unique()","c8ff5a0e":"male = df[df['Gender'] == \"Male\"]\nfemale = df[df['Gender'] == \"Female\"]\ntotal_male = male.shape[0]\ntotal_female = female.shape[0]\ntotal_male_pass = male[male['PlacedOrNot'] == 1].shape[0]\ntotal_female_pass = female[female['PlacedOrNot'] == 1].shape[0]\npass_male_percentage = np.round((total_male_pass * 100) \/ total_male,2)\npass_female_percentage = np.round((total_female_pass * 100) \/ total_female,2)\ndetails = {\"Total Male\": [total_male],\n             \"Total Female\": [total_female],\n             \"Total male pass\" : [total_male_pass],\n             \"Total female pass\" : [total_female_pass],\n             \"% of Passed Male\" : [pass_male_percentage],\n             \"% of Passed Female\" : [pass_female_percentage]}\ndetails","88511682":"gender_wise = pd.DataFrame(details, index=[\"Detail\"])\ngender_wise.T","c535c314":"fig = px.histogram(data_frame = df,\n             x = \"Stream\",\n             color=\"PlacedOrNot\", title=\"<b>Counts of Stream<\/b>\"\n             )\n\nfig.show()","ebdf940a":"backlog = df['HistoryOfBacklogs']==1\ntype(backlog)","3f5f1131":"df[backlog].groupby('Gender').count()","36d9312d":"df[backlog].groupby('PlacedOrNot').count()","1b1a7e12":"stream_wise = df.groupby('Gender').agg({'Age':'mean',\n                                          'Internships' : 'sum',                            \n                                           \"CGPA\":'mean',\n                                           'PlacedOrNot':'sum'})\n\nstream_wise.style.highlight_max()","ddf56198":"stream_wise = df.groupby('Stream').agg({'Age':'mean',\n                                          'Internships' : 'sum',                            \n                                           \"CGPA\":'mean',\n                                           'PlacedOrNot':'sum'\n                                       })\n\nstream_wise.style.highlight_max()","f6dae1bf":"no_internship = df[df['Internships'] == 0]\n\nno_internship","7456bf8a":"fig = px.histogram(data_frame = no_internship,\n                   x = \"PlacedOrNot\",\n                   color=\"PlacedOrNot\",\n                   title = \"<b>No Internship Experience Vs Placement<\/b>\")\n\nfig.update_layout(bargap=0.2)\n\nfig.show()","63f87840":"dummy_gender = pd.get_dummies(df['Gender'])\ndummy_stream = pd.get_dummies(df['Stream'])","47ec86d4":"data = pd.concat([df.drop([\"Gender\", \"Stream\"], axis = 1), dummy_gender, dummy_stream], axis = 1)\n\ndata","0d067adb":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom datetime import datetime","700faf62":"data = data[['Age', 'Male', 'Female',\n             'Electronics And Communication',\n             'Computer Science', 'Information Technology',\n             'Mechanical', 'Electrical', \"Civil\",\n             \"Internships\",\"CGPA\",'Hostel',\n             'HistoryOfBacklogs', 'PlacedOrNot']]\n\ndata","3aeb0b56":"scaler = StandardScaler()\n\nscaler.fit(data.drop('PlacedOrNot',axis=1))\n\nscaled_features = scaler.transform(data.drop('PlacedOrNot',axis=1))","2323c979":"scaled_features = pd.DataFrame(scaled_features, columns = data.columns[:-1])\nscaled_features.head()","110c3c34":"corrmat = data.corr()\n# print(corrmat)\ntop_corr_features = corrmat.index\n# print(top_corr_features)\nplt.figure(figsize=(20,15))\n\n# plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","32b4a901":"Y = data[\"PlacedOrNot\"]\nX = data.drop(\"PlacedOrNot\",axis = 1)","cdf14a5a":"X_train_full, X_valid_full, Y_train, Y_valid = train_test_split(X, Y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","15e23fb0":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_auc_score\n# Define the model\nclf = XGBClassifier(learning_rate=0.09, \n                    n_estimators=100, \n                    use_label_encoder=False,\n                    random_state=42)\n    \nclf.fit(X_train_full, Y_train, eval_metric='logloss')\npredictions = clf.predict(X_valid_full) \nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predictions)))","d1d503ad":"print(\"f1_score: \" + str(f1_score(Y_valid, predictions)))\n","c6a23666":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# lr\nlearning_rate = [ float(x) for x in [0.9, 0.1, 0.09, 0.01]]","08227475":"# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'learning_rate': learning_rate,\n               }\n\nprint(random_grid)","907c1123":"clf2 = XGBClassifier()","6a788f78":"model = RandomizedSearchCV(estimator = clf2, param_distributions = random_grid, n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","a66b2d5b":"model.fit(X_train_full, Y_train, eval_metric='logloss')","11b5f86f":"predictions2 = model.predict(X_valid_full) \nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predictions2)))","ffd5e056":"\n# print(\"Enter Age : \")\n# age=int(input())\n# print(\"\\nEnter Gender(M\/F) : \")\n# gen=input()\n# if(gen=='M'):\n#     gender=1\n#     gender=int(gender)\n# elif(gen=='F'):\n#     gender=0\n#     gender=int(gender)\n# print(\"\\nEnter Stream(ECE\/CS\/IT\/MEC\/ELE\/CIV) : \")\n# stre=input()\n# if(stre=='ECE'):\n#     stream=3\n# elif(stre=='CS'):\n#     stream=1\n# elif(stre=='IT'):\n#     stream=4\n# elif(stre=='MEC'):\n#     stream=5\n# elif(stre=='ELE'):\n#     stream=2\n# elif(stre=='CIV'):\n#     stream=0\n# stream=int(stream)\n# print(\"\\nEnter Number of Internships Done : \")\n# intern = int(input())\n# print(\"\\nEnter CGPA : \")\n# cgpa=int(input())\n# print(\"\\nEnter Hostel Accommodation : \")\n# hostel=int(input())\n# print(\"\\nEnter number of backlogs : \")\n# back=int(input())\n# pred = clf.predict(np.array([[age,gender,stream,intern,cgpa,hostel,back]]))\n# if(pred==1):\n#     print(\"\\nYou have high chances of getting placed\")\n# else:\n#     print(\"\\nYou have high chances of getting placed. Work more Hard!\")","596e4dcb":"# Making Predictions\n### The section for realtime input","bff22348":"# Number of students having backlog in past.","132c7454":"# Number of streams in the campus","c5d5c103":"# Visualize coorelation of independent feature with dependent","e1c479d7":"# One Hot Encoding","ffc6cb48":"\ud83e\uddfe Train test split","5bf21fc9":"# Ayerage age of students","12c30e2f":"# Number of students are hostlers or day scholar.","f00a9d09":"# Scaling features","0c45e2fa":"# Arranging the data","8e53e7f7":"Internship and CGPA is highly coorelated with dependent feature i.e PlacedOrNot","e5269dda":"how many male or female students have backlogs?\n\nhow many students in each stream?\n\nhow many students have gpa >8?\n\nhow many students are hostlers or dayschollers?\n\nhow many students had internships?\n\n","83b3b752":"# Importing libraries"}}