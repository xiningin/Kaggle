{"cell_type":{"bb9a29b5":"code","cc299862":"code","20418fed":"code","689be900":"code","afad17de":"code","f33696d1":"code","a0804dd4":"code","4c41738b":"code","66d1f5e6":"code","65b7f537":"code","daa06cc0":"code","827896e7":"code","411c2a51":"code","48a0b2fe":"code","d6a80a24":"code","26b8ab5c":"code","d57fd851":"code","fab46f68":"code","ebaaae1e":"code","d74d25c3":"code","9b266991":"markdown","bbb0128d":"markdown"},"source":{"bb9a29b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport nibabel as nib\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf","cc299862":"data = pd.read_csv('..\/input\/covid19-ct-scans\/metadata.csv')\ndata.head()","20418fed":"def read_nii(filepath):\n    '''\n    Reads .nii file and returns pixel array\n    '''\n    ct_scan = nib.load(filepath)\n    array   = ct_scan.get_fdata()\n    array   = np.rot90(np.array(array))\n    return(array)","689be900":"# Read sample\nsample_ct   = read_nii(data.loc[1,'ct_scan'])\nsample_lung = read_nii(data.loc[1,'lung_mask'])\nsample_infe = read_nii(data.loc[1,'infection_mask'])\nsample_all  = read_nii(data.loc[1,'lung_and_infection_mask'])","afad17de":"fig = plt.figure(figsize = (18,15))\nplt.subplot(1,4,1)\nplt.imshow(sample_ct[..., 150], cmap = 'bone')\nplt.title('Original Image')\n\nplt.subplot(1,4,2)\nplt.imshow(sample_ct[..., 150], cmap = 'bone')\nplt.imshow(sample_lung[..., 150],alpha = 0.5, cmap = 'nipy_spectral')\nplt.title('Lung Mask')\n\nplt.subplot(1,4,3)\nplt.imshow(sample_ct[..., 150], cmap = 'bone')\nplt.imshow(sample_infe[..., 150], alpha = 0.5, cmap = 'nipy_spectral')\nplt.title('Infection Mask')\n\nplt.subplot(1,4,4)\nplt.imshow(sample_ct[..., 150], cmap = 'bone')\nplt.imshow(sample_all[..., 150], alpha = 0.5, cmap = 'nipy_spectral')\nplt.title('Lung and Infection Mask')","f33696d1":"lungs = []\ninfections = []\nimg_size = 128\n\nfor i in range(len(data)):\n    ct = read_nii(data['ct_scan'][i])\n    infect = read_nii(data['infection_mask'][i])\n    \n    for ii in range(ct.shape[0]):\n        lung_img = cv2.resize(ct[ii], dsize = (img_size, img_size),interpolation = cv2.INTER_AREA).astype('uint8')\n        infec_img = cv2.resize(infect[ii],dsize=(img_size, img_size),interpolation = cv2.INTER_AREA).astype('uint8')\n        lungs.append(lung_img[..., np.newaxis])\n        infections.append(infec_img[..., np.newaxis])","a0804dd4":"lungs = np.array(lungs)\ninfections = np.array(infections)","4c41738b":"print(lungs.shape)","66d1f5e6":"print(infections.shape)","65b7f537":"from sklearn.model_selection import train_test_split\nlung_train, lung_test, infect_train, infect_test = train_test_split(lungs, infections, test_size = 0.1)","daa06cc0":"from tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\n\ndef build_model(input_layer, start_neurons):\n    # 128 -> 64\n    conv1 = Conv2D(start_neurons * 1, (3, 3), activation=\"relu\", padding=\"same\")(input_layer)\n    conv1 = Conv2D(start_neurons * 1, (3, 3), activation=\"relu\", padding=\"same\")(conv1)\n    pool1 = MaxPooling2D((2, 2))(conv1)\n    pool1 = Dropout(0.25)(pool1)\n\n    # 64 -> 32\n    conv2 = Conv2D(start_neurons * 2, (3, 3), activation=\"relu\", padding=\"same\")(pool1)\n    conv2 = Conv2D(start_neurons * 2, (3, 3), activation=\"relu\", padding=\"same\")(conv2)\n    pool2 = MaxPooling2D((2, 2))(conv2)\n    pool2 = Dropout(0.5)(pool2)\n\n    # 32 -> 16\n    conv3 = Conv2D(start_neurons * 4, (3, 3), activation=\"relu\", padding=\"same\")(pool2)\n    conv3 = Conv2D(start_neurons * 4, (3, 3), activation=\"relu\", padding=\"same\")(conv3)\n    pool3 = MaxPooling2D((2, 2))(conv3)\n    pool3 = Dropout(0.5)(pool3)\n\n    # 16 -> 8\n    conv4 = Conv2D(start_neurons * 8, (3, 3), activation=\"relu\", padding=\"same\")(pool3)\n    conv4 = Conv2D(start_neurons * 8, (3, 3), activation=\"relu\", padding=\"same\")(conv4)\n    pool4 = MaxPooling2D((2, 2))(conv4)\n    pool4 = Dropout(0.5)(pool4)\n\n    # Middle\n    convm = Conv2D(start_neurons * 16, (3, 3), activation=\"relu\", padding=\"same\")(pool4)\n    convm = Conv2D(start_neurons * 16, (3, 3), activation=\"relu\", padding=\"same\")(convm)\n\n    # 8 -> 16\n    deconv4 = Conv2DTranspose(start_neurons * 8, (3, 3), strides=(2, 2), padding=\"same\")(convm)\n    uconv4 = concatenate([deconv4, conv4])\n    uconv4 = Dropout(0.5)(uconv4)\n    uconv4 = Conv2D(start_neurons * 8, (3, 3), activation=\"relu\", padding=\"same\")(uconv4)\n    uconv4 = Conv2D(start_neurons * 8, (3, 3), activation=\"relu\", padding=\"same\")(uconv4)\n\n    # 16 -> 32\n    deconv3 = Conv2DTranspose(start_neurons * 4, (3, 3), strides=(2, 2), padding=\"same\")(uconv4)\n    uconv3 = concatenate([deconv3, conv3])\n    uconv3 = Dropout(0.5)(uconv3)\n    uconv3 = Conv2D(start_neurons * 4, (3, 3), activation=\"relu\", padding=\"same\")(uconv3)\n    uconv3 = Conv2D(start_neurons * 4, (3, 3), activation=\"relu\", padding=\"same\")(uconv3)\n\n    # 32 -> 64\n    deconv2 = Conv2DTranspose(start_neurons * 2, (3, 3), strides=(2, 2), padding=\"same\")(uconv3)\n    uconv2 = concatenate([deconv2, conv2])\n    uconv2 = Dropout(0.5)(uconv2)\n    uconv2 = Conv2D(start_neurons * 2, (3, 3), activation=\"relu\", padding=\"same\")(uconv2)\n    uconv2 = Conv2D(start_neurons * 2, (3, 3), activation=\"relu\", padding=\"same\")(uconv2)\n\n    # 64 -> 128\n    deconv1 = Conv2DTranspose(start_neurons * 1, (3, 3), strides=(2, 2), padding=\"same\")(uconv2)\n    uconv1 = concatenate([deconv1, conv1])\n    uconv1 = Dropout(0.5)(uconv1)\n    uconv1 = Conv2D(start_neurons * 1, (3, 3), activation=\"relu\", padding=\"same\")(uconv1)\n    uconv1 = Conv2D(start_neurons * 1, (3, 3), activation=\"relu\", padding=\"same\")(uconv1)\n\n    #uconv1 = Dropout(0.5)(uconv1)\n    output_layer = Conv2D(1, (1,1), padding=\"same\", activation=\"sigmoid\")(uconv1)\n    \n    return output_layer\n\ninput_layer = Input((img_size, img_size, 1))\noutput_layer = build_model(input_layer, 16)","827896e7":"output = build_model(input_layer, 16)","411c2a51":"model = Model(input_layer, output_layer)","48a0b2fe":"model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","d6a80a24":"model.summary()","26b8ab5c":"history = model.fit(lung_train, infect_train, epochs = 10, validation_data = (lung_test, infect_test))","d57fd851":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Accuracy vs Epochs')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Train', 'Val'], loc = 'upper left')\nplt.show()","fab46f68":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Loss vs Epochs')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Train', 'Val'], loc = 'upper right')\nplt.show()","ebaaae1e":"len(lung_test)","d74d25c3":"predicted = model.predict(lung_test)\nfig = plt.figure(figsize = (18,15))\n\nplt.subplot(1,3,1)\nplt.imshow(lung_test[550][...,0], cmap = 'bone')\nplt.title('original lung')\n\nplt.subplot(1,3,2)\nplt.imshow(lung_test[550][...,0], cmap = 'bone')\nplt.imshow(infect_test[550][...,0],alpha = 0.5, cmap = \"nipy_spectral\")\nplt.title('original infection mask')\n\nplt.subplot(1,3,3)\nplt.imshow(lung_test[550][...,0], cmap = 'bone')\nplt.imshow(predicted[550][...,0],alpha = 0.5,cmap = \"nipy_spectral\")\nplt.title('predicted infection mask')","9b266991":"## Load Data","bbb0128d":"predicted masks"}}