{"cell_type":{"e13cd968":"code","33fb5b2c":"code","ba7fb614":"code","3ab4ec75":"code","52ee72b1":"code","e49b259d":"code","7daabf5e":"code","0d4009ee":"code","330d25b0":"code","dfa107fe":"code","e420a2f4":"code","16e5e367":"code","2de30b01":"code","0f58b440":"code","4f0ab912":"code","eed560f9":"code","af2e2dca":"code","22adfa54":"code","71d4e7a1":"code","91e4313f":"code","ea086b90":"code","2ee27b81":"code","700c3a3f":"code","66cc70c2":"code","0c0bbf14":"code","2a326ca0":"code","2984cd42":"code","44e417d4":"code","a4d251cd":"markdown","d8669639":"markdown","e03073cb":"markdown","07c83203":"markdown","f06fe7a0":"markdown","5f89c3a2":"markdown","7834a3e2":"markdown"},"source":{"e13cd968":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33fb5b2c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nimport plotly.express as px","ba7fb614":"gender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","3ab4ec75":"train[\"Pclass\"].unique()","52ee72b1":"fig = px.sunburst(train, path=['Pclass', 'Survived'], values='PassengerId',color='Pclass',\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(train['Pclass']))\n                  \nfig.show()","e49b259d":"def family(dataFrame):\n    dataFrame[\"Family\"] = dataFrame[\"SibSp\"] + dataFrame[\"Parch\"]\n    dataFrame[\"Family\"] = dataFrame[\"Family\"].apply(lambda x: 1 if x>0 else 0)\n    return dataFrame","7daabf5e":"train = family(train)","0d4009ee":"train","330d25b0":"train =train.drop([\"SibSp\",\"Parch\"], axis = 1)","dfa107fe":"train = pd.get_dummies(train, columns=['Pclass', 'Sex', 'Embarked'])\n","e420a2f4":"train","16e5e367":"train = train.drop([\"Name\",\"Cabin\", \"Ticket\"], axis = 1)\ntrain","2de30b01":"train = train.fillna(train.Age.median())","0f58b440":"train","4f0ab912":"test.head()","eed560f9":"test = family(test)","af2e2dca":"test =test.drop([\"SibSp\",\"Parch\"], axis = 1)","22adfa54":"test","71d4e7a1":"test = pd.get_dummies(test, columns=['Pclass', 'Sex', 'Embarked'])","91e4313f":"test","ea086b90":"test = test.drop([\"Name\",\"Cabin\", \"Ticket\"], axis = 1)\ntest","2ee27b81":"test = test.fillna(test.Age.median())","700c3a3f":"test","66cc70c2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.drop(columns=[\"Survived\"]), train[\"Survived\"], random_state = 42)  ","0c0bbf14":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error, confusion_matrix, accuracy_score, classification_report\n\nfeatures = [\"Family\",\"Pclass_1\",\"Pclass_2\",\"Pclass_3\",\"Sex_female\",\"Sex_male\",\"Embarked_C\",\"Embarked_Q\",\"Embarked_S\",\"Fare\", \"Age\"]\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(f''' MAE : {mean_absolute_error(y_test, predictions)}\n Confusion Matrix: \n {confusion_matrix(y_test, predictions)}\nAccuracy:  {accuracy_score(y_test, predictions)}\nClassification report:{ classification_report(y_test, predictions)} ''')","2a326ca0":"from xgboost import XGBRegressor\nmy_model_2 = XGBRegressor(n_estimators=1000, learning_rate=0.05)\n\n# Fit the model\nmy_model_2.fit(X_train, y_train)\n\n# Get predictions\npredictions_2 = my_model_2.predict(X_test)\n\n# Calculate MAE\nmae_2 = mean_absolute_error(predictions_2, y_test)\nprint(\"Mean Absolute Error:\" , mae_2)","2984cd42":"# make predictions which we will submit. \ntest_preds = my_model_2.predict(test)","44e417d4":"# Save test predictions to file\noutput = pd.DataFrame({'PassengerId': test.PassengerId,\n                       'Survived': submit})\noutput.to_csv('submission.csv', index=False)","a4d251cd":"# Train Test Split","d8669639":"**Random Forest Classifier**","e03073cb":"**Test Prep.**","07c83203":"# **Feature Engineering**","f06fe7a0":"* passengerId:  unique id number for each passenger\n\n* survived = survive(1) or died(0)\n\n* pclass: A proxy for socio-economic status (SES)\n    1st = Upper\n    2nd = Middle\n    3rd = Lower\n    \n* name: passenger name\n\n* sex: passenger gender\n\n\n* age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n* sibsp: The dataset defines family relations in this way...\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n    \n* parch: The dataset defines family relations in this way...\n       Parent = mother, father\n       Child = daughter, son, stepdaughter, stepson\n    Some children travelled only with a nanny, therefore parch=0 for them.\n    \n* ticket: Ticket no\n\n* fare: Passenger fare\n\n* cabin: cabin number\n\n* emnarked: Port of embarkation\t\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton","5f89c3a2":"G\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere p-class'\u0131 3 olan bir yolcunun \u00f6lme olas\u0131l\u0131\u011f\u0131 di\u011ferlerine g\u00f6re daha y\u00fcksektir. Ya\u015fama \u015fans\u0131 en y\u00fcksek olan s\u0131n\u0131f birinci s\u0131n\u0131ft\u0131r.","7834a3e2":"XGB"}}