{"cell_type":{"db9034cd":"code","e7f2d115":"code","a0efa6d2":"code","bed818b2":"code","8aa6f501":"code","00d94435":"code","0f5a93bf":"code","048457cf":"markdown"},"source":{"db9034cd":"!pip install https:\/\/github.com\/scikit-learn-contrib\/scikit-learn-extra\/archive\/master.zip","e7f2d115":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom datetime import timedelta\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import KernelPCA\nfrom sklearn.decomposition import PCA\nimport plotly.figure_factory as ff\n\n\ncve = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/cve.csv', header=0, index_col=0)\nproducts = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/products.csv', header=0, index_col=0)\nvendors = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/vendors.csv', header=0, index_col=0)\nvendor_product = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/vendor_product.csv', header=0, index_col=0)\n\ncve.pub_date = pd.to_datetime(cve.pub_date)","a0efa6d2":"K = 500\nM = 100\nL = 10\nthresh = .01\n\ncwes = pd.get_dummies(cve.cwe_name)\ntop_K = products.vulnerable_product.value_counts()[:K]\ncounts = top_K.values\n\nX = products[products.vulnerable_product.isin(\n    top_K.index\n    )].join(\n        cwes\n    ).groupby(\n        'vulnerable_product'\n).sum()\n\n# Normalize\nX = X.divide(X.sum(axis=1), axis=0)\n\n# Sparsify (to prevent big products from being clustered together by virtue of being big)\nbelow_threshold = X < thresh\nX[below_threshold] = 0\n\nZ = KernelPCA(n_components=2, kernel=\"cosine\").fit_transform(X)","bed818b2":"fig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=Z[:,0][L:M],\n        y=Z[:,1][L:M],\n        mode=\"markers\",\n        text=top_K.index[L:M],\n        marker=dict(\n            size=2 * np.sqrt(counts[L:M]),\n            color='#bbbbbb',\n            showscale=False\n        )\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        x=Z[:,0][:L],\n        y=Z[:,1][:L],\n        mode=\"markers+text\",\n        text=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_K.index[:L]),\n        textposition = \"top center\",\n        marker=dict(\n            size=2 * np.sqrt(counts[:L]),\n            color='#93a1a1',\n            showscale=False,\n        )\n    )\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    title=dict(\n        text=\"Plotting products using exploit types\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.1,\n            showarrow=False,\n            text =\"All products are projected into two dimensions using KernelPCA with cosine similarity as the chosen kernel.<br>\" + \n            \"Products are sized proportionally to the how many CVE entries affect a given product. The top 10 products<br>are labelled, the top 100 are projected.\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    bargap=0\n)","8aa6f501":"fig = go.Figure()\n\nsolarized_colors = ['#dc322f', '#6c71c4', '#268bd2', '#2aa198', '#073642']\nV = vendors.vendor.value_counts()[5:0:-1].index\ntop_K_vp = top_K.reset_index().join(vendor_product.set_index('product'), on='index')\n\nndxs = top_K_vp[~top_K_vp.vendor.isin(V)].index\nfig.add_trace(\n    go.Scatter(\n        x=Z[:,0][ndxs],\n        y=Z[:,1][ndxs],\n        mode=\"markers\",\n        name='others',\n        text=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_K.index[ndxs]),\n        marker=dict(\n            size=2 * np.sqrt(counts[ndxs]),\n            color='#dddddd',\n            showscale=False,\n        )\n    )\n)\n\nfor ndx, vendor in enumerate(V):\n    ndxs = top_K_vp[top_K_vp.vendor == vendor].index\n    \n    fig.add_trace(\n        go.Scatter(\n            x=Z[:,0][ndxs],\n            y=Z[:,1][ndxs],\n            mode=\"markers\",\n            name=vendor,\n            text=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_K.index[ndxs]),\n            marker=dict(\n                size=2 * np.sqrt(counts[ndxs]),\n                color=solarized_colors[ndx],\n                showscale=False,\n            )\n        )\n    )\n    \nfig.update_layout(\n    legend=dict(x=0., y=1.),\n    height=800,\n    title=dict(\n        text=\"Visualizing vendors\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.1,\n            showarrow=False,\n            text =\"Vendors are one inherent clustering already present in the data. Here's how KernelPCA with<br>cosine similarity distributes products from the top 5 vendors.\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n    \nfig.show()","00d94435":"from sklearn_extra.cluster import KMedoids\n\ncolors = KMedoids(n_clusters=3, metric='cosine', random_state=0).fit_predict(X[:K])\nfig = go.Figure()\nL = 10\n\n\nfig.add_trace(\n     go.Scatter(\n        x=Z[:,0][L:K],\n        y=Z[:,1][L:K],\n        text=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_K.index[L:K]),\n        marker=dict(\n            size=2 * np.sqrt(counts[L:K]), # Make the area proportional\n            color=colors[L:K],\n            colorscale = [[0,'rgba(220,50,47,.2)'],[.5, 'rgba(108,113,196,.2)'],[1, 'rgba(38,139,210,.2)']]\n        ),\n        mode='markers'\n    )\n)\n\nfig.add_trace(go.Scatter(\n        x=Z[:,0][:L],\n        y=Z[:,1][:L],\n        text=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_K.index[:L]),\n        textposition='top center',\n        marker=dict(\n            size=2 * np.sqrt(counts[:L]), # Make the area proportional\n            color=colors[:L],\n            colorscale = [[0,'rgb(220,50,47)'],[.5, 'rgb(108,113,196)'],[1, 'rgb(38,139,210)']]\n        ),\n        mode='markers+text'\n    )\n)\n\nfig.update_layout(\n    showlegend=False,\n    height=800,\n    title=dict(\n        text=\"2-D Clustering, K-Medoids\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.1,\n            showarrow=False,\n            text =\"Though the data has significant overlap, it appears loosely ternary. Therefore, here is the\" +\n            \" 3-Medoids clustering<br>with cosine similarity as the similarity metric\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.show()","0f5a93bf":"H = 50\ntop_H = top_K = products.vulnerable_product.value_counts()[:H]\nfig = ff.create_dendrogram(\n    X[X.index.isin(top_H.index)].sort_index(),\n    labels=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(top_H.sort_index().index),\n    orientation='left')\n\nfig.update_layout(\n    height=1000,\n    showlegend=False,\n    title=dict(\n        text=\"An intuitive signal, Hierarchical Agglomerative Clustering\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n        showticklabels=False,\n        ticklen=0\n    ),\n    yaxis=dict(\n        showgrid=False,\n        ticklen=0\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.1,\n            showarrow=False,\n            text=\"In a complete linkage heirarchical clustering, products from the same product line<br>\" +\n            \"or vendor cluster nicely. Examples include the Windows family (top) or Debian<br>\" +\n            \"and Ubuntu (top-middle). The top 50 products are shown.\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.show()","048457cf":"# 0. Exploit Types (CWEs) and Products\n\nFirst, we'll explore the relationship between exploits and products. We'll focus on how to cluster those products according to the exploits that affect them. Each product will be represented as a vector of exploit types, normalized row-wise."}}