{"cell_type":{"ec093026":"code","a5f54d14":"code","4e2e9cbf":"code","18b47e18":"code","534078c1":"code","b2922e40":"code","021309f9":"code","38924b83":"code","ae2b11eb":"code","f157461c":"code","9f587b1e":"code","0054cbdf":"code","5a1ba169":"code","332c2e6c":"code","1234ebd0":"code","fd628ee7":"code","2b852147":"code","4c7ef0b7":"code","837f4831":"code","4250d7bd":"code","e3ffb365":"code","12b8c177":"code","06f2eea3":"code","0f80068c":"code","55e80196":"code","dc25f0dd":"code","bdbaf737":"code","19b4745c":"code","4f42e309":"code","64be1ddc":"code","9ace73b6":"code","e00a76b3":"markdown","ae7f84ca":"markdown"},"source":{"ec093026":"#importing the basic libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.express as px","a5f54d14":"#loading the dataset\ndf= pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ndf.head()","4e2e9cbf":"#Null Values in dataframe\ndf.isnull().sum()","18b47e18":"# As their are very few null values in Type,Content Rating, Current Ver and Android Ver thus we can drop the null values\ndf.dropna(subset=['Current Ver','Android Ver','Content Rating','Type'],inplace=True)","534078c1":"# In the ratings column as their are 1474 null values so we can't remove all of them or replace all of them with a single value.\ndf['Rating'].describe()\n\n\n","b2922e40":"# The average of Ratings columns is 4.2 but as the number of null values are high it won't be a good step to fill all the null values with a single value.\n# We will check the null values distribution under differnt categories of app and fill the null values with the average of the respective category.\n# We can find out distribution of null values under various categories using the excel pivot function.\nCategory              Null Values Count   Avg Rating\nBUSINESS              157                 4.1\nTOOLS                 109                 4\nPERSONALIZATION       78                  4.3\nLIFESTYLE             68                  4.1\nBOOKS_AND_REFERENCE   53                  4.3\nNEWS_AND_MAGAZINES    50                  4.1\nGAME                  47                  4.3\nHEALTH_AND_FITNESS    44                  4.3\nFINANCE               43                  4.1\nDATING                39                  4             \n# For the categories mentioned above we will fill the null values with respective categories and for others we will fill null values with the overall average i.e 4.2\n\n","021309f9":"#filling null values in rating column\n\ndf[\"Rating\"] = df[\"Rating\"].fillna(-1)     #filling null values with any random number that will be replaced by values mentioned below\nfor i in range(10829):\n    if df['Rating'].iloc[i]==-1:\n        if df['Category'].iloc[i]=='EVENTS' or df['Category'].iloc[i]=='ART_AND_DESIGN' or df['Category'].iloc[i]=='EDUCATION' :\n            df['Rating'].iloc[i]=4.4\n        elif df['Category'].iloc[i]=='PERSONALIZATION' or df['Category'].iloc[i]=='BOOKS_AND_REFERENCE' or df['Category'].iloc[i]=='GAME' :\n            df['Rating'].iloc[i]=4.3\n        elif df['Category'].iloc[i]=='BUSINESS' or df['Category'].iloc[i]=='LIFESTYLE' or df['Category'].iloc[i]=='NEWS_AND_MAGAZINES' or df['Category'].iloc[i]=='FINANCE' :\n            df['Rating'].iloc[i]=4.1\n        elif df['Category'].iloc[i]=='TOOLS' or df['Category'].iloc[i]=='DATING' :\n            df['Rating'].iloc[i]=4.0\n        else :\n            df['Rating'].iloc[i]=4.2\n        i=i+1","38924b83":"df['Reviews'] = df['Reviews'].astype(int)  #convert Reviews column to int type","ae2b11eb":"#Editing the size column\n#In size column some values are in kb and some are in kb so we can convert all values in kb\n#I have added a new column size_in_kb that will contain app size in kb\ndf['size_in_kb']=df['Rating']*0\nfor i in range(10829):\n    if df['Size'].iloc[i][-1]=='M':\n        df['size_in_kb'].iloc[i]=float(df['Size'].iloc[i][0:-1])*1024\n    elif df['Size'].iloc[i][-1]=='k':\n        df['size_in_kb'].iloc[i]=float(df['Size'].iloc[i][0:-1])\n    else :\n        df['size_in_kb'].iloc[i]=df['Size'].iloc[i]\n    i=i+1\n#We can drop the size column\ndf.drop(['Size'], axis = 1,inplace=True)","f157461c":"#Editing the Installs Column\nfor i in range(10829):\n        df['Installs'].iloc[i]=df['Installs'].iloc[i][0:-1]\n        i=i+1\n\n","9f587b1e":"df.shape","0054cbdf":"# In Installs column the values are in form of 10,000 or 500,000 so before converting it into integer we need to remove the commas in values\nfor i in range(10829):\n    df['Installs'].iloc[i] = df['Installs'].iloc[i].replace(',', '')\n    i=i+1","5a1ba169":"df['Installs'] = df['Installs'].astype(int)","332c2e6c":"#In size_in_kb column their are some rows with entry 'varies with device'. we can delete these rows\ndf1=df.copy()\ndf = df1[df1['size_in_kb'] != 'Varies with device'] \ndf['size_in_kb'].unique()   # Now we can check that all values are either int or float","1234ebd0":"# drop Current ver and Android Ver columns\ndf.drop(['Current Ver'], axis = 1,inplace=True)\ndf.drop(['Android Ver'], axis = 1,inplace=True)\n","fd628ee7":"df.shape","2b852147":"#Editing the price column.\nfor i in range(9135):\n    if df['Price'].iloc[i]!= '0':\n        df['Price'].iloc[i]=df['Price'].iloc[i][1::]\n    i=i+1\n\n","4c7ef0b7":"df.rename(columns = {'Price':'Price_in_dollar'}, inplace = True)   #Renaming the price column\ndf['Price_in_dollar'] = df['Price_in_dollar'].astype(float)  #convert price column to int type","837f4831":"# Now we have cleaned up all the data and we check how the final dataset looks like\ndf.head()","4250d7bd":"#Paid Vs Free Apps\nfig = px.histogram(df, x=\"Type\",height=400)\nfig.show()","e3ffb365":"#Distribution of Ratings in various categories\nfig = px.violin(df,x='Category', y=\"Rating\",color='Category',width=2000, height=600)\nfig.show()\nplotly.offline.plot(fig, filename='violin0.html')","12b8c177":"#Rating of Paid and free apps\ng1=df.groupby(['Type'],as_index=False)[['Rating']].mean()\ng1.rename(columns={'Rating':'Avg_rating'},inplace=True)\nfig = px.histogram(g1, x=\"Type\",y='Avg_rating',height=800)\nfig.show()\n\n#from the table we can say that paid apps have higher ratings than free apps\n","06f2eea3":"#Analysing paid apps\ndf_paid=df[df['Type']=='Paid']\ndf_paid.head()","0f80068c":"fig = px.histogram(df_paid, x=\"Category\",y=\"Installs\",labels={'Category':'Category wise paid apps', 'Installs':'Number of Installs'},height=600,width=1000)\nfig.show()","55e80196":"g4=df_paid.groupby(['Category'],as_index=False)[['Price_in_dollar']].mean()\ng4.rename(columns={'Price_in_dollar':'Avg_Price'},inplace=True)\nfig = px.bar(g4, x=\"Category\",y='Avg_Price',color='Avg_Price')\nfig.show()\n#from the barplot we can conclude that finance apps have highest average price","dc25f0dd":"\nfig = px.histogram(df, x=\"Content Rating\",color=\"Type\",height=600)\nfig.show()","bdbaf737":"#Most popular category\nfig = px.histogram(df, x=\"Category\",y=\"Installs\",color='Type',labels={'Category':'Category', 'Installs':'Number of Installs'},height=600,width=1000)\nfig.show()\n\n#From the plot we can say that Game category has highest number of installs so it is the most popular category","19b4745c":"#Largest app in terms of size\ndf1=df.copy()\ndf1.sort_values(by=['size_in_kb'], inplace=True,ascending=False)\ndf1.head()\n#from the dataset we can check that the app named 'Gangster Town: Vice District\t' is largest in terms of size.","4f42e309":"#Distribution of Ratings\nfig = px.histogram(df, x=\"Rating\",height=600,width=1000)\nfig.show()\n","64be1ddc":"#Average number of Installs in Various Categories\ng2=df.groupby(['Category'],as_index=False)[['Installs']].mean()\ng2\ng2.rename(columns={'Installs':'Avg_Installs'},inplace=True)\nfig = px.bar(g2, x=\"Category\",y='Avg_Installs',color='Avg_Installs',height=800)\nfig.show()","9ace73b6":"# From the bar plot we can say that the Average Installs for free apps is higher than that of paid apps\ng3=df.groupby(['Type'],as_index=False)[['Installs']].mean()\ng3.rename(columns={'Installs':'Avg_Installs'},inplace=True)\nfig = px.bar(g3, x=\"Type\",y='Avg_Installs',color='Avg_Installs')\nfig.show()","e00a76b3":"# Data Cleaning","ae7f84ca":"# * Data visualization using Plotly"}}