{"cell_type":{"0174722c":"code","a3bfb274":"code","ef0698c6":"code","3bd82b5a":"code","0fdb2a15":"code","66c35ee9":"code","6a4fa674":"code","7c2e8630":"code","9e5bc01c":"code","cde76ffe":"code","304b0aca":"code","5de33e5f":"code","a6ef0445":"code","baeb4698":"code","250e85ab":"code","905451ff":"code","670d8ad1":"code","9d44059b":"code","61c5acaf":"code","4fa5a041":"code","ed9e9210":"code","b9a79e17":"code","5ef2a9cf":"code","8be901b2":"code","fd8cdabf":"code","1eb05ead":"code","d9b08151":"code","56df70d0":"code","63f6193c":"code","1bb3665f":"code","725926df":"code","693d3ad4":"code","b187f0a5":"code","0a3badad":"code","21f414a4":"code","913514f7":"code","8149adae":"code","dfd85d9c":"code","9c1c863f":"code","fbdd5f17":"code","7dd4a4d2":"code","688808f5":"code","27480328":"code","7f0a54e0":"code","56bc34f5":"code","2639d062":"code","720a47b6":"code","f2d4e74e":"code","74c94a93":"markdown","ed149e8d":"markdown","dce55df6":"markdown","d6d8bab3":"markdown","6c84ad8c":"markdown"},"source":{"0174722c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3bfb274":"import pandas as pd\nimport numpy as np\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nfrom sklearn.metrics import r2_score , mean_squared_error","ef0698c6":"train_data=pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')\ntest_data=pd.read_csv('..\/input\/bigmart-sales-data\/Test.csv')","3bd82b5a":"train_data.head()","0fdb2a15":"print(\"Train Data RowsxColumns\",train_data.shape)\nprint(\"Test Data RowsxColumns\",test_data.shape)\n#shape provides rows vs columns information","66c35ee9":"#Check for duplicate records\nprint(\"Number of Dupliate Records in Train Data : \",train_data.duplicated().sum())\nprint(\"Number of Dupliate Records in Test Data : \",test_data.duplicated().sum())","6a4fa674":"#let's check if there are missing values\ntrain_data.isnull().sum()\n#Item_Weight and Outlet_Size have many missing values","7c2e8630":"train_data.isnull().sum()\/train_data.shape[0]\n#in terms of % it's 17.16 and 28.27 resepectively","9e5bc01c":"#let's check test data as well\ntest_data.isnull().sum()\/test_data.shape[0]\n#Both Test and Train datasets have similar % of missing values","cde76ffe":"#Important Point - Item_Weight can be unique per Item\n#let's check if that is the case then we can assign Item Weight if available\ntrain_df1=pd.DataFrame(train_data,columns=['Item_Identifier','Item_Weight'])\ntrain_df1=train_df1.dropna()","304b0aca":"#check=train_df1.groupby('Item_Identifier')['Item_Weight'].nunique()\ncheck.max()","5de33e5f":"train_df1=train_df1.drop_duplicates()","a6ef0445":"use_data=pd.merge(train_data,train_df1,on=\"Item_Identifier\")","baeb4698":"use_data.isnull().sum()","250e85ab":"#four records missing as they do not have any records availablem for weight\n#let's do the same treatment for test data\ntest_df1=pd.DataFrame(test_data,columns=['Item_Identifier','Item_Weight'])\ntest_df1=test_df1.dropna()","905451ff":"test_df1=test_df1.drop_duplicates()\nuse_test=pd.merge(test_data,test_df1,on=\"Item_Identifier\")","670d8ad1":"use_test.isnull().sum()","9d44059b":"#Dropping original weight column\nuse_data.drop('Item_Weight_x',axis=1,inplace=True)\nuse_test.drop('Item_Weight_x',axis=1,inplace=True)","61c5acaf":"#For Outlet Size, values missing at random and we can use mode to replace fill missing values\nuse_data['Outlet_Size']=use_data['Outlet_Size'].fillna(use_data['Outlet_Size'].mode()[0])\nuse_test['Outlet_Size']=use_test['Outlet_Size'].fillna(use_test['Outlet_Size'].mode()[0])","4fa5a041":"use_data.isnull().sum()","ed9e9210":"use_test.isnull().sum()","b9a79e17":"#start checking columns\nuse_data['Item_Fat_Content'].unique()","5ef2a9cf":"#There are only two bifurcations for fat types - Regular or Low Fat\nrep={'LF':'Low Fat','reg':'Regular','low fat':'Low Fat'}\nuse_data['Item_Fat_Content'].replace(rep,regex=True,inplace=True)\nuse_test['Item_Fat_Content'].replace(rep,regex=True,inplace=True)","8be901b2":"sn.countplot(use_data['Item_Fat_Content'])\n#Low Fat counts are more than Regular Fat Items\n#Let's check the same with sales","fd8cdabf":"#Bivariate Analysis\nplt.figure(figsize=(8,5))\nsn.barplot('Item_Fat_Content','Item_Outlet_Sales',data=use_data,palette='mako')\n#See here, Regular Fat has slighlty more sales than Low Fat, MRP can be one of the reasons","1eb05ead":"#Item Types, let's see the items under different categories\nplt.figure(figsize=(20,7))\nsn.countplot(use_data['Item_Type'])\n\n#Fruits & Vegetables , Snack Foods have highest number of counts","d9b08151":"plt.figure(figsize=(18,5))\nsn.barplot('Item_Type','Item_Outlet_Sales',data=use_data,palette='mako')\n#Sales pattern are not having that much deviation which is good","56df70d0":"sn.countplot(use_data['Outlet_Establishment_Year'])\n#year 1998 has a dip, let's compare with sales","63f6193c":"plt.figure(figsize=(10,5))\nsn.barplot('Outlet_Establishment_Year','Item_Outlet_Sales',data=use_data,palette='mako')\n#1998 year has quite low sales compare to any other year, this might be considerd as outlier ","1bb3665f":"sn.countplot(use_data['Outlet_Type'])\n#Supermarket Type is way too large and out of this patter when compared with other types","725926df":"sn.countplot(use_data['Outlet_Size'])","693d3ad4":"rep={'Small':0,'Medium':1,'High':2}\nuse_data['Outlet_Size'].replace(rep,regex=True,inplace=True)\nuse_test['Outlet_Size'].replace(rep,regex=True,inplace=True)","b187f0a5":"rep1={'Tier 1':1,'Tier 2':2,'Tier 3':3}\nuse_data['Outlet_Location_Type'].replace(rep1,regex=True,inplace=True)\nuse_test['Outlet_Location_Type'].replace(rep1,regex=True,inplace=True)","0a3badad":"#let's check out Item Visibility \n#Item Visibiity seems a distribution or presence of an item in store\nplt.figure(figsize=(8,5))\nplt.scatter('Item_Visibility','Item_Outlet_Sales',data=use_data)\n\n#It's weird that item having 0 Visibility has sales, it might be missing information\n#For now we can replace it with mean","21f414a4":"use_data['Item_Visibility']=use_data['Item_Visibility'].replace(0,use_data['Item_Visibility'].mean())\nuse_test['Item_Visibility']=use_test['Item_Visibility'].replace(0,use_test['Item_Visibility'].mean())","913514f7":"#Item MRP\nplt.figure(figsize=(8,5))\nplt.scatter(y='Item_Outlet_Sales',x='Item_MRP',data=use_data)\n#higher the MRP, higher the sales","8149adae":"#let's convert Outlet Establishment Year into numbers to be used\nuse_data['Years']=2020-use_data['Outlet_Establishment_Year']\nuse_test['Years']=2020-use_test['Outlet_Establishment_Year']","dfd85d9c":"dmy1=pd.get_dummies(use_data['Item_Fat_Content'])\nuse_data=pd.concat([use_data,dmy1],axis=1)\ndmy2=pd.get_dummies(use_test['Item_Fat_Content'])\nuse_test=pd.concat([use_test,dmy2],axis=1)","9c1c863f":"use_test=use_test.drop_duplicates()","fbdd5f17":"dmy3=pd.get_dummies(use_data['Outlet_Identifier'])\nuse_data=pd.concat([use_data,dmy3],axis=1)\ndmy4=pd.get_dummies(use_test['Outlet_Identifier'])\nuse_test=pd.concat([use_test,dmy4],axis=1)","7dd4a4d2":"dmy5=pd.get_dummies(use_data['Item_Type'])\nuse_data=pd.concat([use_data,dmy5],axis=1)\ndmy6=pd.get_dummies(use_test['Item_Type'])\nuse_test=pd.concat([use_test,dmy6],axis=1)","688808f5":"#to input in model, let's use all numeric columns including dummies we created\ninput_train=use_data.drop(['Item_Identifier','Item_Fat_Content','Item_Type','Outlet_Establishment_Year','Outlet_Type','Outlet_Identifier','Item_Outlet_Sales'],axis=1)\n#input_test=use_test.drop(['Item_Identifier','Item_Fat_Content','Item_Type','Outlet_Establishment_Year','Outlet_Type','Outlet_Identifier'],axis=1)","27480328":"y=use_data['Item_Outlet_Sales']\nx=input_train","7f0a54e0":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2)","56bc34f5":"reg.fit(x_train,y_train)","2639d062":"print(\"intercept :\", reg.intercept_ )\nprint(\"slope : \",reg.coef_)","720a47b6":"y_pred=reg.predict(x_test)","f2d4e74e":"score=r2_score(y_test,y_pred)\nprint(score)\n\n#56% of the variance is explained by this model","74c94a93":"Building A Model are training the same","ed149e8d":"Data Dictionary:\n\nItem_Identifier : Unique code for each item\nItem_Weight : Weight of an Item\nFat_Content : Low Fat or Regular Fat\nItem_Visibility : Shows percentage distribution\nItem_Type : Type of an Item based on usage\nMRP : Maximum Retail Price\nOutlet_Identifier : Outlet number\nOutlet_Establishment_Year : When outlet was started\nOutlet_Size : It should be based on number of products store keeps\nLocation:Location of Outlet that surely impact sales (demand of a product)\nOutlet Type : Type of Outlet, There has to be some relation between outlet size and type of outlet\nItem Outlet Sales : Sale of an Item in particular outlet","dce55df6":"Data Encoding - As we know that categorical variable can not work with Model, we need to encode them in a way that we can use in model for analysis or predicting dependent variable\n\nWe will do this process for Train and Test datasets to keep them aligned","d6d8bab3":"Step 1 : Data Exploring, Understanding & Cleaning","6c84ad8c":"Treatment of missing values : \nIn the next step let's apply the best treatment for missing values\nMissing Values Treatments :\nThere can be different reasons for missing values :\n--> MAR = Missing At Random - It is not that data is missing but missing of observations\n--> MCaR = Missing Completely at Random = Missing data has nothing to do with hypothetical value or with other variable values\n--> MNAR = Missing Not At Random = Missing because of some other variable's value or with any hypothetical value"}}