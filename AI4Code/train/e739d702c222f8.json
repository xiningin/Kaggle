{"cell_type":{"eeea942c":"code","00778070":"code","847bbb32":"code","a329ea75":"code","57f30a0c":"code","182333f3":"code","57fee052":"code","3982387f":"code","a7369639":"code","fce58097":"code","059c280d":"code","5e8cfa05":"markdown","8980251a":"markdown","faac1364":"markdown","eae42dab":"markdown"},"source":{"eeea942c":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom collections import Counter\n\n# load the data\ntrain_df = pd.read_csv('..\/input\/ciphertext-challenge-iii\/train.csv', index_col='plaintext_id')\ntest_df = pd.read_csv('..\/input\/ciphertext-challenge-iii\/test.csv', index_col='ciphertext_id')\nsubmission = pd.read_csv('..\/input\/ciphertext-challenge-iii\/sample_submission.csv', index_col='ciphertext_id')\n\n#  create a 'length' column\ntrain_df['length'] = train_df.text.apply(len)\ntest_df['length'] = test_df.ciphertext.apply(len)\n\n# cypher level\ntest_df_level_1 = test_df[test_df.difficulty==1].copy()\ntest_df_level_2 = test_df[test_df.difficulty==2].copy()\ntest_df_level_3 = test_df[test_df.difficulty==3].copy()\ntest_df_level_4 = test_df[test_df.difficulty==4].copy()","00778070":"# plain text\nplain_char_cntr = Counter(''.join(train_df['text'].values))\nplain_stats = pd.DataFrame([[x[0], x[1]] for x in plain_char_cntr.items()], columns=['Letter', 'Frequency'])\nplain_stats = plain_stats.sort_values(by='Frequency', ascending=False)\n\nf, ax = plt.subplots(figsize=(15, 5))\nax.title.set_text('plaintext')\nplt.bar(np.array(range(len(plain_stats))) + 0.5, plain_stats['Frequency'].values)\nplt.xticks(np.array(range(len(plain_stats))) + 0.5, plain_stats['Letter'].values)\nplt.show()\n\n# cipher text - level 1\ncipher_char_cntr = Counter(''.join(test_df_level_1['ciphertext'].values))\ncipher_stats = pd.DataFrame([[x[0], x[1]] for x in cipher_char_cntr.items()], columns=['Letter', 'Frequency'])\ncipher_stats = cipher_stats.sort_values(by='Frequency', ascending=False)\n\nf, ax = plt.subplots(figsize=(15, 5))\nax.title.set_text('ciphertext level 1')\nplt.bar(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Frequency'].values)\nplt.xticks(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Letter'].values)\nplt.show()\n\n# cipher text - level 2\ncipher_char_cntr = Counter(''.join(test_df_level_2['ciphertext'].values))\ncipher_stats = pd.DataFrame([[x[0], x[1]] for x in cipher_char_cntr.items()], columns=['Letter', 'Frequency'])\ncipher_stats = cipher_stats.sort_values(by='Frequency', ascending=False)\n\nf, ax = plt.subplots(figsize=(15, 5))\nax.title.set_text('ciphertext level 2')\nplt.bar(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Frequency'].values)\nplt.xticks(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Letter'].values)\nplt.show()\n\n# cipher text - level 3\ncipher_char_cntr = Counter(''.join(test_df_level_3['ciphertext'].values))\ncipher_stats = pd.DataFrame([[x[0], x[1]] for x in cipher_char_cntr.items()], columns=['Letter', 'Frequency'])\ncipher_stats = cipher_stats.sort_values(by='Frequency', ascending=False)\n\nf, ax = plt.subplots(figsize=(15, 5))\nax.title.set_text('ciphertext level 3')\nplt.bar(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Frequency'].values)\nplt.xticks(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Letter'].values)\nplt.show()\n\n# cipher text - level 4\ncipher_char_cntr = Counter(''.join(test_df_level_4['ciphertext'].values))\ncipher_stats = pd.DataFrame([[x[0], x[1]] for x in cipher_char_cntr.items()], columns=['Letter', 'Frequency'])\ncipher_stats = cipher_stats.sort_values(by='Frequency', ascending=False)\n\nf, ax = plt.subplots(figsize=(15, 5))\nax.title.set_text('ciphertext level 4')\nplt.bar(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Frequency'].values)\nplt.xticks(np.array(range(len(cipher_stats))) + 0.5, cipher_stats['Letter'].values)\nplt.show()","847bbb32":"# use the length of some text pieces to understand the first cypher level\ntest_df_level_1.length.sort_values(ascending=False).head()\n\n# then we look in the training data to find the passage with the corresponding length\nmatching_pieces_1 = train_df[(train_df.length>=401) & (train_df.length<=500)]\nmatching_pieces_2 = train_df[(train_df.length>=301) & (train_df.length<=400)]\n\nprint('Plain text:\\n', train_df.loc['ID_f000cad17'].text, '\\n\\nCiphered text (level 1):\\n', \n      test_df_level_1.loc['ID_6100247c5'].ciphertext)\n\nprint('\\n---------------------------------------------------------\\n')\n# Let's do the same thing for the second piece of text now\nprint('Plain text:\\n', train_df.loc['ID_ad64b5b8d'].text, '\\n\\nCiphered text (level 1):\\n', test_df_level_1.loc['ID_31bd699f6'].ciphertext)","a329ea75":"# Functions to decrypt and encrypt from\/to level 1\nKEYLEN = len('pyle')\ndef decrypt_level_1(ctext):\n    key = [ord(c) - ord('a') for c in 'pyle']\n    key_index = 0\n    plain = ''\n    for c in ctext:\n        cpos = 'abcdefghijklmnopqrstuvwxy'.find(c)\n        if cpos != -1:\n            p = (cpos - key[key_index]) % 25\n            pc = 'abcdefghijklmnopqrstuvwxy'[p]\n            key_index = (key_index + 1) % KEYLEN\n        else:\n            cpos = 'ABCDEFGHIJKLMNOPQRSTUVWXY'.find(c)\n            if cpos != -1:\n                p = (cpos - key[key_index]) % 25\n                pc = 'ABCDEFGHIJKLMNOPQRSTUVWXY'[p]\n                key_index = (key_index + 1) % KEYLEN\n            else:\n                pc = c\n        plain += pc\n    return plain\n\ndef encrypt_level_1(ptext, key_index=0):\n    key = [ord(c) - ord('a') for c in 'pyle']\n    ctext = ''\n    for c in ptext:\n        pos = 'abcdefghijklmnopqrstuvwxy'.find(c)\n        if pos != -1:\n            p = (pos + key[key_index]) % 25\n            cc = 'abcdefghijklmnopqrstuvwxy'[p]\n            key_index = (key_index + 1) % KEYLEN\n        else:\n            pos = 'ABCDEFGHIJKLMNOPQRSTUVWXY'.find(c)\n            if pos != -1:\n                p = (pos + key[key_index]) % 25\n                cc = 'ABCDEFGHIJKLMNOPQRSTUVWXY'[p]\n                key_index = (key_index + 1) % KEYLEN\n            else:\n                cc = c\n        ctext += cc\n    return ctext\n\ndef test_decrypt_level_1():\n    c_id = 'ID_4a6fc1ea9'\n    ciphertext = test_df.loc[c_id]['ciphertext']\n    print('Ciphertxt:', ciphertext)\n    decrypted = decrypt_level_1(ciphertext)\n    print('Decrypted:', decrypted)\n    encrypted = encrypt_level_1(decrypted)\n    print('Encrypted:', encrypted)\n    print(\"Encrypted == Ciphertext:\", encrypted == ciphertext)\n\ntest_decrypt_level_1()    ","57f30a0c":"import tqdm\n# Make a dictionary for fast lookup of plaintext\nplain_dict = {}\nfor p_id, row in train_df.iterrows():\n    text = row['text']\n    plain_dict[text] = p_id\nprint(len(plain_dict))\n\n# Update submission with level 1 decrypted matching texts\nmatched, unmatched = 0, 0\nfor c_id, row in tqdm.tqdm(test_df_level_1.iterrows()):\n    decrypted = decrypt_level_1(row['ciphertext'])\n    found = False\n    for pad in range(100):\n        start = pad \/\/ 2\n        end = len(decrypted) - (pad + 1) \/\/ 2\n        plain_pie = decrypted[start:end]\n        if plain_pie in plain_dict:\n            p_id = plain_dict[plain_pie]\n            row = train_df.loc[p_id]\n            submission.loc[c_id] = train_df.loc[p_id]['index']\n            matched += 1\n            found = True\n            break\n    if not found:\n        unmatched += 1\n        print(decrypted)\n            \nprint(f\"Matched {matched}   Unmatched {unmatched}\")\nsubmission.to_csv('submit-level-1.csv')","182333f3":"# Update sub with level 2 decrypted matching texts\nimport math\nfrom itertools import cycle\n\ndef rail_pattern(n):\n    r = list(range(n))\n    return cycle(r + r[-2:0:-1])\n\ndef encrypt_level_2(plaintext, rails=21):\n    p = rail_pattern(rails)\n    # this relies on key being called in order, guaranteed?\n    return ''.join(sorted(plaintext, key=lambda i: next(p)))\ndef decrypt_level_2(ciphertext, rails=21):\n    p = rail_pattern(rails)\n    indexes = sorted(range(len(ciphertext)), key=lambda i: next(p))\n    result = [''] * len(ciphertext)\n    for i, c in zip(indexes, ciphertext):\n        result[i] = c\n    return ''.join(result)\n\nmatched, unmatched = 0, 0\nfor c_id, row in tqdm.tqdm(test_df_level_2.iterrows()):\n    decrypted = decrypt_level_1(decrypt_level_2(row['ciphertext']))\n    found = False\n    for pad in range(100):\n        start = pad \/\/ 2\n        end = len(decrypted) - (pad + 1) \/\/ 2\n        plain_pie = decrypted[start:end]\n        if plain_pie in plain_dict:\n            p_id = plain_dict[plain_pie]\n            row = train_df.loc[p_id]\n            submission.loc[c_id] = train_df.loc[p_id]['index']\n            matched += 1\n            found = True\n            break\n    if not found:\n        unmatched += 1\n        print(decrypted)\n            \nprint(f\"Matched {matched}   Unmatched {unmatched}\")\nsubmission.to_csv('submit-level-2.csv')","57fee052":"level_12_train_index = list(submission[submission[\"index\"] > 0][\"index\"])\nprint(len(level_12_train_index))\ntrain_df_level_34 = train_df[~train_df[\"index\"].isin(level_12_train_index)].copy()\ntrain_df_level_34.sort_values(\"length\", ascending=False).head(5)","3982387f":"test_df_level_3[\"nb\"] = test_df_level_3[\"ciphertext\"].apply(lambda x: len(x.split(\" \")))\ntest_df_level_3.sort_values(\"length\", ascending=False).head(5)","a7369639":"# found a match for level 3\nc_id = 'ID_f0989e1c5' # length = 700\nindex = 34509 # length = 671\nsubmission.loc[c_id] = index # train_df.loc[p_id]['index']","fce58097":"# Level 4 looks like base64 encoding\nimport base64\n\ndef encode_base64(x):\n    return base64.b64encode(x.encode('ascii')).decode()\n\ndef decode_base64(x):\n    return base64.b64decode(x)\n\ntrain_df_level_34[\"nb\"] = train_df_level_34[\"length\"].apply(lambda x: math.ceil(x\/100)*100)\nratio = test_df_level_3[\"length\"].mean() \/ train_df_level_34[\"nb\"].mean()\nprint(ratio)\n\ndef get_length(x):\n    n = len(decode_base64(x))\/ratio\n    n = round(n \/ 100) * 100\n    return n\n\ntest_df_level_4[\"nb\"] = test_df_level_4[\"ciphertext\"].apply(lambda x: get_length(x)) \ntest_df_level_4.sort_values(\"nb\", ascending=False).head(5)","059c280d":"# found a match for level 4\nc_id = 'ID_0414884b0' # length = 900\nindex = 42677 # length = 842\nsubmission.loc[c_id] = index # train_df.loc[p_id]['index']\nsubmission.to_csv('submit-level-34.csv')","5e8cfa05":"**Level 3, 4**\n\nNow let's try explore Level 3 and Level 4.","8980251a":"**Observations (1st level cipher)**\n* length of the words, punctuation and the case are preserved\n* padding is done both up front and in the end. Number of padding is either equal to or at most 1 character more in the end\n* cypher key shifts every time an uppercase or lowercase character is met\n\nThe level 1 of this Cipher Challenge III is a cipher with multiple substitutions generated from a key of length 4, i.e. 4 substitutions are used for each character mapping.","faac1364":"Hello everyone! This is my first kernel to ciphering problems, which summaries my understanding and learning from many other kernels and discussions. If you Like the notebook and think that it helped you, please upvote.","eae42dab":"**Level 2 Cipher**\n\nThe level 2 of this Cipher Challenge III is a transposition cipher on top of level 1. See https:\/\/www.kaggle.com\/c\/ciphertext-challenge-iii\/discussion\/103969#latest-598262"}}