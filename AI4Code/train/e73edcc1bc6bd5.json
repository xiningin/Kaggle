{"cell_type":{"82d1196f":"code","6503ecef":"code","d958cf44":"code","213b857e":"code","81dc1d51":"code","2a32350b":"code","b9a2effe":"code","d5bc66c3":"code","b754a014":"code","18c20ec3":"code","8dd2e6a4":"code","e7292e39":"code","ffea58ac":"code","59eecb4c":"code","982dbe03":"code","9066f1df":"code","40fdf660":"code","053c494d":"code","476f7351":"code","24110147":"code","d1b0ed21":"code","b36a8d76":"code","33b2d3ff":"code","fee53ebe":"code","d4d7c60d":"code","88fc2c79":"code","b7c86d74":"code","10567acc":"code","daf42205":"code","86b5a61b":"code","d1694180":"markdown","49103796":"markdown","d58ea2b8":"markdown","74c35d1d":"markdown","815f24bd":"markdown","ee22c5a3":"markdown","c7ff76d8":"markdown","a510fb05":"markdown","c7060018":"markdown","c7211449":"markdown","fdde367b":"markdown","e3ece555":"markdown","8e02612d":"markdown","5150e054":"markdown","0f3b8cf1":"markdown","edeee794":"markdown","7074b45a":"markdown","717f9d7e":"markdown","4d95dfee":"markdown","a9a18829":"markdown"},"source":{"82d1196f":"#Basic Libraries\nimport pandas as pd\nimport numpy as np \nimport math \nimport re \n\n#Visualization \nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport cufflinks as cf\n%matplotlib inline \nsns.set_style(\"whitegrid\")\nimport folium\ncf.go_offline()\n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","6503ecef":"#Reading Data\ndf = pd.read_csv('..\/input\/covid_19_clean_complete.csv')\ndf1 = pd.read_csv('..\/input\/tests.csv')\ndf2 =  pd.read_csv('..\/input\/usa_county_wise.csv')","d958cf44":"df.tail(5) ","213b857e":"fig, (ax1,ax2,ax3) = plt.subplots(1,3, figsize = (20,5))\nsns.heatmap(data = df.isna() ,yticklabels=False , cmap =\"plasma\", ax= ax1)\nsns.heatmap(data = df1.isna() ,yticklabels=False ,cmap =\"plasma\", ax= ax2)\nsns.heatmap(data = df2.isna() ,yticklabels=False ,cmap =\"plasma\", ax= ax3)\nprint(\"Missing Data\")","81dc1d51":"wd = df   # wd = World\nwd.info()","2a32350b":"wd['Date_c'] = pd.to_datetime(wd['Date'])  #wd World \nUptoDate =wd[wd['Date_c'] == max(wd['Date_c'])] # max because it will filter and show the latest day so It would be updated\n\n#Create canvas map \nWorld = folium.Map(location = [0,0], tiles='OpenStreetMap', #tite = typed of map https:\/\/python-visualization.github.io\/folium\/quickstart.html\n               min_zoom=2, max_zoom=5, zoom_start=2)\n\n#Adding points and Circle \nfor date in range (0 , len(UptoDate)):# the len od UptoDate is 265\n    folium.Circle(\n        radius=int(UptoDate.iloc[date]['Confirmed'])*0.5, # Go to the most updated case and them bring the Confirmed case \n        location=[UptoDate.iloc[date]['Lat'],UptoDate.iloc[date]['Long']], # provide the lat and long of the most updated value\n        popup='The Waterfront',color='crimson',\n        tooltip=    # her Will show the Legend of all Data \n        '<li><bold>Country : ' + str(UptoDate.iloc[date]['Country\/Region'])+  # Podes ponerlos en etiqueta HTML \n        '<li><bold>Confirmed : ' + str(UptoDate.iloc[date]['Confirmed'])+\n        '<li><bold>Deaths : ' + str(UptoDate.iloc[date]['Deaths'])+\n        '<li><bold>Recovered : ' + str(UptoDate.iloc[date]['Recovered']) + \n         str(\" Country :\" + str(UptoDate.iloc[date]['Country\/Region'])),  # str in python \n        fill=True,fill_color='#3186cc').add_to(World)","b9a2effe":"World","d5bc66c3":"# Create a New Columns to Show Active cases arround the world \nwd['Active Cases'] = wd['Confirmed'] - wd['Recovered'] - wd['Deaths']\n\n#Analazing Total Confirmed , Recovered, Active cases and Deaths (CRAD)\nCRAD = wd[wd['Date_c'] == max(wd['Date_c'])][['Confirmed','Deaths','Recovered','Active Cases']].sum()\n\n#plotting the CRAD\nCRAD.iplot(kind= 'barh', color= \"turquoise\", title = 'COVID-19 Arround the World by Million Cases')","b754a014":"#Tracking the Spread Per day (SPD)\n\nSPD = wd[['Date_c','Confirmed','Deaths','Recovered','Active Cases']].groupby('Date_c').sum()\nSPD.iplot(kind= 'scatter', colors=['blue','Darkred','green','Purple'], title = 'COVID-19 Arround the World by Million Cases', xTitle = 'Date' , yTitle = 'People per Million')","18c20ec3":"import plotly.express as px\nfig = px.choropleth(df, locations=\"Country\/Region\", locationmode='country names', color=np.log(df[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\", animation_frame=df[\"Date_c\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Viridis)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","8dd2e6a4":"#Recovery Rate UpToDate = (Confirmed - (Infected + Deaths) \/ Confimed ) * 100\nwd['RecRate']= round((((wd['Confirmed'] - (wd['Deaths']+wd['Active Cases'])) \/ (wd['Confirmed']))*100).fillna(0),2)\nwd.tail(5)","e7292e39":"NRR = wd[(wd['Date_c'] == max(wd['Date_c'])) & (wd['RecRate'] >= 0 )][['Country\/Region','RecRate']].groupby('Country\/Region').max().sort_values('RecRate')\nNRR.iplot(kind= 'barh', xTitle = ' Recovery Rate 0- 100 %' , yTitle = 'Countries')","ffea58ac":"#Top Countries Confirmed cases\nCases_confirmed = wd.groupby('Country\/Region',as_index= False)[['Confirmed']].max().sort_values('Confirmed')\nCC = px.bar(Cases_confirmed.tail(7), x=\"Confirmed\", y=\"Country\/Region\",  text='Confirmed', orientation='h', color_discrete_sequence = ['Green'])\n#Top Countries Deaths reported\nDeaths = wd.groupby('Country\/Region',as_index= False)[['Deaths']].max().sort_values('Deaths')\nD = px.bar(Deaths.tail(7), x=\"Deaths\", y=\"Country\/Region\",  text='Deaths', orientation='h', color_discrete_sequence = ['Darkred'])\n#Top Countries Recovered\nRecovered = wd.groupby('Country\/Region',as_index= False)[['Recovered']].max().sort_values('Recovered')\nR = px.bar(Recovered.tail(7), x=\"Recovered\", y=\"Country\/Region\",  text='Recovered', orientation='h', color_discrete_sequence = ['Orange'])\n#Top Countries Active Cases\nActive_cases = wd.groupby('Country\/Region',as_index= False)[['Active Cases']].max().sort_values('Active Cases')\nAC = px.bar(Active_cases.tail(7), x=\"Active Cases\", y=\"Country\/Region\",  text='Active Cases', orientation='h', color_discrete_sequence = ['Skyblue'])\n\n\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Top Countries Confirmed cases', 'Top Countries Deaths reported' , 'Top Countries Recovered','Top Countries Active Cases'  ))\n\nfig.add_trace(CC['data'][0], row=1, col=1) #Remember hacerlo a un lista para que lo pueda leer\n\nfig.add_trace(D['data'][0], row=1, col=2)\nfig.add_trace(R['data'][0], row=2, col=1)\nfig.add_trace(AC['data'][0], row=2, col=2)\n\n\nfig.update_layout(height=700)","59eecb4c":"#Extracting Nic Information\nnic = df[df[\"Country\/Region\"] == \"Nicaragua\"].reset_index()\nnic.head(2)","982dbe03":"#Cleaning Data\ndf_nic= nic.drop(['index','Province\/State'], axis = 1) \ndf_nic.head()","9066f1df":"df_nic.tail(5)","40fdf660":"# Spread COVD- 19 per Day \nNICSPREAD = df_nic[['Date_c','Confirmed','Deaths','Recovered','Active Cases']].groupby('Date_c').sum()\nNICSPREAD.iplot(kind='scatter', title = 'Cases in Nicaragua', xTitle = 'Date' , yTitle = 'Verified Cases')","053c494d":"#CRAD_NIC (Confirmed, Recovered, Actived, Death)\nCRAD_NIC = df_nic[df_nic['Date_c'] == max(df_nic['Date_c'])][['Confirmed','Deaths','Recovered','Active Cases']].sum() # max or Sum will give the same value\nCRAD_NIC.iplot(kind= 'barh', color= \"Green\", title = 'COVID-19 in Nicaragua')","476f7351":"#COvid 19 - Spread Distribution \nfig,(ax1) = plt.subplots(1,1 , figsize = (35,15))\nn = sns.scatterplot(x= 'Date' , y = 'Confirmed', data = df_nic, ax=ax1)\nn.set_xticklabels(n.get_xticklabels(), rotation=45)\nn.set_title('CoronaVirus in Nic')","24110147":"# Adding Long and long\nnic_dep = pd.read_excel('..\/input\/lat_long_nic.xlsx')\n#nic_dep = Nicaragua + Departments\nnic_dep['Lat']= nic_dep['Lat'].apply(lambda x : round(x,4))\nnic_dep['Long']= nic_dep['Long'].apply(lambda x : round(x,4))\nnic_dep['Date'] = df_nic ['Date_c']  # Date Extracted From the Orginal Data\nnic_dep.tail(2)","d1b0ed21":"# Nicaragua map\nNIC = folium.Map(location = [12.8654, -85.2072], tiles='OpenStreetMap', \n               min_zoom=7, max_zoom=8, zoom_start=7)\n  \nfor (index,row) in nic_dep.iterrows():\n    folium.Circle(\n        radius=int(row.loc['Cases'])**7, # Go to the Row case and them bring the Confirmed case \n        location=[row.loc['Lat'], row.loc['Long']], # provide the lat and long according to index\n        popup='The Waterfront',color='crimson',\n        tooltip=    # this Will show the Legend of the markets \n        '<li><bold>Deparment : ' + str(row.loc['Deparments'])+  # HTML  <li><> is a bullet point\n        '<li><bold>Confirmed : ' + str(row.loc['Cases']),   \n        fill=True,fill_color='#ccfa00').add_to(NIC)\nNIC","b36a8d76":"usa = df2.drop(['UID','iso2','iso3','Admin2','code3','FIPS','Combined_Key'], axis = 1)\n# converting date into time format \nusa['Date'] =pd.to_datetime(usa['Date'])\n\n# Grouping by State #The United States of America has 50 states, 1 Federal District, 5 Territories.\n#District of Columbia(D.C) is a Federal District, not a state\nSBD = usa[['Date','Confirmed','Deaths']].groupby('Date').sum()  #SD = Spread by Day\n\n#Spread by day \nSBD.iplot(kind = 'spread', title = 'COVID-19 in USA')","33b2d3ff":"CD = usa.groupby('Province_State')[['Confirmed','Deaths']].max()\nCD.iplot(kind = 'barh', title = 'Confirmed \/ Death by State')","fee53ebe":"#Top 10 State Confirmed cases\nUSA_CONFIRMED = usa.groupby('Province_State',as_index= False)[['Confirmed']].max().sort_values('Confirmed') # USACC = USA CASE CONFIRMED\nUSA_CC = px.bar(USA_CONFIRMED.tail(15), x=\"Confirmed\", y=\"Province_State\",  text='Confirmed', orientation='h', color_discrete_sequence = ['Green'])\n\n#Top 10 State Death \nUSA_DEATH = usa.groupby('Province_State',as_index= False)[['Deaths']].max().sort_values('Deaths') # USACC = USA CASE CONFIRMED\nUSA_D = px.bar(USA_DEATH.tail(15), x=\"Deaths\", y=\"Province_State\",  text='Deaths', orientation='h', color_discrete_sequence = ['Blue'])\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('USA COVID - 19 Confirmed Cases ', 'USA COVID - 19 Deaths'))\n\nfig.add_trace(USA_CC['data'][0], row=1, col=1) #Remember hacerlo a un lista para que lo pueda leer\nfig.add_trace(USA_D['data'][0], row=1, col=2)\nfig.update_layout(height=700)","d4d7c60d":"import datetime as dt\nusa['Date_ordinal'] = usa['Date'].map(dt.datetime.toordinal) #changing Datetime to ordinal (I am not sure if it is the best way, but i couldnt find any other solution)\ndata = usa.drop(['Province_State','Lat','Long_','Date','Deaths','Country_Region'],axis = 1)\npolydata = data.groupby('Date_ordinal',as_index = False).sum()\npolydata.tail(5)","88fc2c79":"# importing Data Set  \ny = polydata.iloc[:,1].values\nX = polydata.iloc[:,0:1].values\n#plotting for better understanding \nplt.scatter(X, y)\nprint('Cases per day')","b7c86d74":"#Splitting Data   \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=42)\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n#Transforming to degree 2 \npoly_reg = PolynomialFeatures(degree = 2)   #because polynomial 2nd degree\nX_train_poly = poly_reg.fit_transform(X_train)  # transform the data according to the degree selected\nX_test_poly = poly_reg.fit_transform(X_test)\n\n#Predicting \nPL =LinearRegression()\nPL.fit(X_train_poly,y_train)\ny_pred = PL.predict(X_test_poly)\ny_pred","10567acc":"print(\"r2=\" ,r2_score(y_test, y_pred))\nprint(\"Coef=\", PL.coef_)","daf42205":"X1 = np.arange (737570 , 737587) # arrange of numbers to pass to datetime\nX1_pol = poly_reg.fit_transform(X1.reshape(-1, 1))\nPredictions =PL.predict(X1_pol)\n\n\nTill_Jun = pd.DataFrame(data = X1 , columns = ['Day'])\nPrediction_jun = pd.DataFrame(Predictions , columns = ['Deaths'])\nJun = pd.concat([Till_Jun,Prediction_jun], axis = 1)\nJun ['Date'] = Jun['Day'].map(dt.datetime.fromordinal)\nJun.tail(3)","86b5a61b":"Jun.iplot(kind = 'bar' , x = 'Date' , y ='Deaths', title = 'Cases till Jun 10th')","d1694180":"**Polynomial Regresion using USA data set**","49103796":"This is the first analysis I did about the COVID-19 , I am trying to used polynomial regression to predict future cases, \"This data isnt mine\" however I could not upload it from Kaggell\n\n1. In the First stage I will try to have some insight from the Data\n2. I will try to have same insight from Nicaragua - Central America\n3. Use polynomial Regression to predict cases using USA Data","d58ea2b8":"**Conclusions**\n1. The Given Data cannot be used to Create a Polinomial Regresion","74c35d1d":"**COVID-19 World Wide**","815f24bd":"****Confirmed \/ Deaths  by State****","ee22c5a3":"**Recovery Rate**","c7ff76d8":"The recovery rate was Calculated based on number of confirmed vs Active cases and Death , please keep on Mind the following\n\n1. Specials thanks to #Devakumar kp for collecting the Data\n2. Some countries like Canada, Mozambique and other just reported Confirmed and deaths so it is hard to stimate a Recovery Rate\n3. Recovery Rate formula might not be the best one ( as far as I know they use Sigma to stimate some number)\n4. ** This is for study\/Practicce purpose, this might not be taken as official reports\n","a510fb05":"**it might looks that the numbers are wrong or something wrong but NO check this out **https:\/\/www.bbc.com\/mundo\/noticias-america-latina-52716064\n\n1. it means \"goverment tries to hide the covid-19 impact\" ** I post this for references for you to know what happened with the data trend","c7060018":"**Creating Nic Maps With Covid-19 Cases**\n1. The Following Data was recollected and created by me to pratice Choropleth plots\n2. The Data it is not correct (covid-19 cases)\n3. The total Covid - 19 cases (From the originall Data Set) was distributed randomly among the 17 departments\/states","c7211449":"**The accurancy of the model it is up to .98 % this could be because :**\n1. The data follow and ascendent trend\n2. This is the beggining so the curve is growing \n3. The distance between the data is not that significant (It is not disperse\/shattered )","fdde367b":"**COVID - 19 in USA Spread**","e3ece555":"**COVID-  19 in Nicaragua**","8e02612d":"**Conclusions**:\n\n1. US is top in All Categories \n2. Today is 6\/9\/2020 and top 5 Countries are US, Germany, Brazil , spain , Italy ,turkey \n3. Germany is doing awesome After US it has the 2nd position on Recovery Cases , Following by Brazil and Spain\n4. In term of death UK is in Second position but up to today They have less Active Cases - considering they were addected before USA(graph #4)\n5. Data might not be accurate because WHO reported some countries are not reporting all cases ***For study Purpose******","5150e054":"**I create new Data to predict the new cases of COVID-19 until Jun 10**","0f3b8cf1":"**Mapa Mundi (COVID-19)**","edeee794":"**Data for Polynomial Regresion** \n1. in this section im trying to use polinomial regression why (because Im new in Machine learning and i Want to try) so any feedback it is more than welcome ","7074b45a":"**COVID-19 SPREAD**","717f9d7e":"> \"Checking df1 = Covid_all Arround the World","4d95dfee":"****Conclusion** the model predict pretty well the new cases, the **https:\/\/www.worldometers.info\/coronavirus\/?utm_campaign=homeAdvegas1?\n1. Showed  USA\t2,026,597 total Cases\n2. The Model Forcasts 2,514,077 total cases (+400K)\n3. Thank you very much, I learn a lot with this Data set, Please provide any feddback or if i did something wrong please let me know. ","a9a18829":"**In this point I will add the state(called apartments in Nic) randomly,**\n\n1. It will add some noise and the data will not be accurate in the map * but it is only for educational purpose*\n2. Because I want to learn how to plot a map with full information\n3. It will be a great way to develope my skills\n4. * Under any circustances this could be take it as real information *\n5. Yes I know Nicaragua"}}