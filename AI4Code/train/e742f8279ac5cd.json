{"cell_type":{"680d2771":"code","1e4bbf9e":"code","11a5fb87":"code","c99c2ec4":"code","24c3e3ab":"code","c5c67e6b":"code","5daf4d50":"code","15ac04f0":"code","a5c3bf5d":"code","bd7b2c19":"code","d242caf9":"code","012627c7":"code","dbd696e1":"code","9619aab5":"code","a3891c33":"code","5c595118":"code","5ee55529":"code","6fe4f4e9":"code","423dcc59":"code","6a8239ae":"code","546384a2":"code","a0997b64":"code","6899b91f":"code","f20eace2":"code","9e450bf7":"code","ee7267bf":"code","afc6a052":"code","f897fa02":"code","bdc30d42":"code","91e779b7":"code","45a8c402":"code","a2ca7b0e":"code","09fb6eb8":"code","28031989":"code","4ab77e4f":"code","50e9de07":"code","9cbc59c0":"code","897f73db":"code","258cf809":"code","f0f3c923":"code","c875aca4":"code","1eadc82b":"code","1375a86a":"code","2cc05f2f":"code","d7f1d77d":"code","66870c85":"code","1e2c01a6":"code","2100edae":"code","f5f91596":"markdown","113071ac":"markdown","01ee4e03":"markdown","72aa42d5":"markdown","6ffe7a2f":"markdown","5d0ffe4c":"markdown","55f06845":"markdown","743cf3f0":"markdown","efdd8322":"markdown","55d7e161":"markdown"},"source":{"680d2771":"import numpy as np\nimport pandas as pd\npd.set_option(\"max_colwidth\", 80)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport copy\nimport csv","1e4bbf9e":"def encode_symbols(data, symbols):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series) and isinstance(symbols, dict):\n\n        data = data.copy()\n\n        for key, value in symbols.items():\n            data = data.str.replace(value, str(key), regex=True)    \n\n    return data\n\n\ndef decode_symbols(data, symbols):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series) and isinstance(symbols, dict):\n\n        data = data.copy()\n\n        for key, value in symbols.items():\n            data = data.str.replace(str(key), value, regex=True)    \n\n    return data\n\n\ndef data_info(data, n_samples=None):\n    \"\"\" \\o\/ \"\"\"\n    if not isinstance(data, pd.Series):\n        return False\n    \n    print(\"\\n ***** Info about data *****\\n\")\n\n    if data.any():\n        sum_len = len(data.sum())\n    else:\n        sum_len = 0\n    print(\"size:    \", data.size)\n    print(\"sum+len: \", sum_len)\n    \n    result = data.str.len().value_counts()\n    print(\"\\nlen + value_counts:\")\n    print(result.to_string())\n\n    print()\n    \n    if n_samples and isinstance(n_samples, int) and n_samples > 0:\n        print(\"=== samples({}) ===\".format(n_samples))\n        result = data.sample(n_samples, random_state=42)\n    else:\n        print(\"=== head()+tail() ===\")\n        result = data.head().append(data.tail())\n\n    print(\"index - value\")\n    print(result.to_string())\n    print()","11a5fb87":"path_to_sample = \"..\/input\/santa-2021\/sample_submission.csv\"\npath_to_distance = \"..\/input\/santa-2021\/distance_matrix.csv\"\npath_to_wildcards = \"..\/input\/santa-2021\/wildcards.csv\"\npath_to_permutations = \"..\/input\/santa-2021\/permutations.csv\"\n\npermutations_data = pd.read_csv(path_to_permutations)\npermutations_data.head()","c99c2ec4":"symbols = {\n    0: '\ud83c\udf1f',  # wildcard\n    1: '\ud83c\udf85',  # first start combination\n    2: '\ud83e\udd36',  # second start combination\n    3: '\ud83e\udd8c',\n    4: '\ud83e\udddd',\n    5: '\ud83c\udf84',\n    6: '\ud83c\udf81',\n    7: '\ud83c\udf80',\n}","24c3e3ab":"all_combinations = encode_symbols(permutations_data['Permutation'], symbols)\nall_combinations.head()","c5c67e6b":"def _join_by_slice_len(data, value, slice_len):\n    \"\"\" \\o\/ \"\"\"\n    result = value\n\n    while data.str.startswith(result[-slice_len:]).any():\n        \n        check_slice = data.str.startswith(result[-slice_len:])\n        indices_list = data[check_slice].index.to_list()\n\n        cutted_value = data.pop(indices_list[0])\n        result = result[:-slice_len] + cutted_value\n\n    return result\n\n\ndef join_by_one(value, data, is_copy=True, search_type='contains'):\n    \"\"\" \\o\/ \"\"\"\n    if not isinstance(value, str):\n        return False\n\n    if not isinstance(data, pd.Series):\n        return False\n    \n    if is_copy == True:\n        data = data.copy()\n    \n    if search_type == \"contains\":\n        found_mask = data.str.contains(value)\n    elif search_type == \"startswith\":\n        found_mask = data.str.startswith(value)\n    else:\n        return False\n    \n    if not found_mask.any():\n        return None\n    else:\n        indices_list = data[found_mask].index.to_list()\n        result = data.pop(indices_list[0])\n\n    if not data.any():\n        return result\n    \n    slice_len = len(result) - 1\n    \n    if data.str.startswith(result[-slice_len:]).any():\n        result = _join_by_slice_len(data, result, slice_len)\n\n    return result\n","5daf4d50":"pattern_start = \"12\"\nmask_start = all_combinations.str.startswith(pattern_start)\ncombs_start = all_combinations[mask_start].copy().reset_index(drop=True)","15ac04f0":"data_info(combs_start)","a5c3bf5d":"pattern_middle = r\"\\d*12\\d*|^2[3-7]\\d{4}1\"\nmask_middle = all_combinations.str.match(pattern_middle)\n\ncombs_middle = all_combinations[mask_middle].copy().reset_index(drop=True)","bd7b2c19":"data_info(combs_middle)","d242caf9":"%%time\nslice_len = 4\njoined_combs_data = []\n\nfor x in combs_start:\n    joined_combs_data.append(join_by_one(x[-slice_len:],\n                                         combs_middle.copy(),\n                                         is_copy=False,\n                                         search_type='startswith'))\n\njoined_combs_middle = pd.Series(joined_combs_data) ","012627c7":"data_info(joined_combs_middle)","dbd696e1":"combs_end = all_combinations[~mask_middle].copy().reset_index(drop=True)","9619aab5":"data_info(combs_end)","a3891c33":"%%time\njoin_combs_end = combs_end.copy()\n\nslice_len = 5\njoined_combs_data = []\n\nfor value in combs_start:\n\n    # First step\n    if not join_combs_end.any():\n        continue        \n        \n    combs = join_by_one(value[-slice_len:],\n                        join_combs_end,\n                        is_copy=False,\n                        search_type='startswith')\n    \n    if not combs:\n        continue        \n        \n    # Second step \/ 7-step loop \/\n    for _ in range(7):\n        if join_combs_end.any():\n            result = join_by_one(combs[-slice_len:],\n                                 join_combs_end,\n                                 is_copy=False,\n                                 search_type='startswith')\n            if result:\n                combs = combs[:-slice_len] + result\n        else:\n            break\n            \n    joined_combs_data.append(combs)\n\nprint(\"Size 'join_combs_end' after: {}\\n\".format(join_combs_end.size))\n\njoined_combs_end = pd.Series(joined_combs_data)","5c595118":"data_info(joined_combs_end)","5ee55529":"def get_table_data(data):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series):\n        \n        max_len = data.str.len().max()\n        concat_columns = []\n\n        for x in range(max_len):\n            x_data = data.str.get(x).copy()\n            x_data.name = \"P\" + str(x)\n            concat_columns.append(x_data)\n\n        data = pd.concat(concat_columns, axis=1)\n        \n    return data\n\n\ndef get_melt_data(data):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series):\n        \n        melt_value = \"Value\"\n        melt_index = \"Position\"\n        \n        max_len = data.str.len().max()\n        concat_index = []\n\n        for x in range(max_len):\n            x_data = data.str.get(x).copy()\n            x_data.name = melt_value\n\n            x_df = pd.DataFrame(x_data)\n            x_df[melt_index] = \"P\" + str(x)\n\n            concat_index.append(x_df)\n\n        data = pd.concat(concat_index, axis=0) \\\n                        .reset_index(drop=True)\n        \n    return data\n\n\ndef plot_melt_data(data, figsize=(12, 8), orient='h'):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.DataFrame) and (len(data.columns) == 2):\n        cols_list = data.columns.to_list()\n        \n        orient_list = ['h', 'v']\n        if orient not in orient_list:\n            return \"orient={}\".format(orient_list)\n        \n        plt.figure(figsize=figsize)\n        \n        if orient == 'h':\n            sns.histplot(y=cols_list[1], hue=cols_list[0], data=data,\n                         multiple='stack', shrink=.75)\n            plt.xlabel(\"\")\n\n        if orient == 'v':\n            sns.histplot(x=cols_list[1], hue=cols_list[0], data=data,\n                         multiple='stack', shrink=.75)\n            plt.ylabel(\"\")\n            \n        plt.show()","6fe4f4e9":"joined_data = {'Start': combs_start,\n               'Middle': joined_combs_middle,\n               'End': joined_combs_end}\n\ndata = pd.DataFrame(joined_data)","423dcc59":"data","6a8239ae":"middle_table = get_table_data(data['Middle'])\nmiddle_table.head()","546384a2":"middle_melt_data = get_melt_data(data['Middle'])\nplot_melt_data(middle_melt_data, orient='v')","a0997b64":"end_melt_data = get_melt_data(data['End'])\nplot_melt_data(end_melt_data, orient='v')","6899b91f":"def join_left(first_combs, second_combs, slice_len, is_copy=False, specific_len=None):\n    \"\"\" \\o\/ \"\"\"\n    if not isinstance(first_combs, pd.Series):\n        return False\n\n    if not isinstance(second_combs, pd.Series):\n        return False\n    \n    if is_copy == True:\n        first_combs = first_combs.copy()\n        second_combs = second_combs.copy()\n    \n    for lft, lft_value in first_combs.items():\n        \n        for rgt, rgt_value in second_combs.items():\n            \n            if specific_len and len(rgt_value) != specific_len:\n                continue\n                \n            if lft_value[-slice_len:] == rgt_value[:slice_len]:\n                cutted_value = second_combs.pop(rgt)\n                first_combs[lft] = lft_value[:-slice_len] + cutted_value\n                break\n    \n    return True","f20eace2":"%%time\nx_end = joined_combs_end.copy()\nx_middle = joined_combs_middle.copy()\njoin_left(x_end, x_middle, 4)","9e450bf7":"x_end = \"12\" + x_end","ee7267bf":"data_info(x_end)","afc6a052":"slice_len = 4\ndata_result = []\nfrom_combs = data['Middle']\ncheck_combs = data['End']\n\nfor value in check_combs.values:\n    indices_list = from_combs[from_combs.str.startswith(value[-slice_len:])].index.to_list()\n    if indices_list:\n        result = indices_list[0]\n    else:\n        result = None\n        \n    data_result.append(result)\n    \nintersection_info = pd.Series(data_result, name='middle').reset_index()\nintersection_info = intersection_info.rename(columns={'index': 'end'})\n\nintersection_info.head(5)","f897fa02":"inter_data = intersection_info.copy()\ninter_info = []\ninter_info_sorted = []\nfor i, value in inter_data['end'].items():\n    i_result = [value]\n    x = value\n    while True:\n        found_value = inter_data.loc[value, 'middle']\n        if found_value == x:\n            break\n        else:\n            i_result.append(found_value)            \n            value = inter_data.loc[found_value , 'end']\n    \n    inter_info.append(i_result)\n    inter_info_sorted.append(sorted(i_result))","bdc30d42":"inter_info_unique = []\ninter_info_unique_sorted = []\nfor i, x_inter in enumerate(inter_info_sorted):\n    if x_inter not in inter_info_unique_sorted:\n        inter_info_unique_sorted.append(x_inter)\n        inter_info_unique.append(inter_info[i])\n        \nlen(inter_info_unique)","91e779b7":"intersection_position = []\nfor x_inices in inter_info_unique:\n    intersection_position.extend(x_inices)\n    \nlen(intersection_position)","45a8c402":"n_line = 3\nlines_list = [x for x in range(n_line)]\n\nlines_frequency = len(intersection_position) \/ n_line   # 120 \/ 3 * 40\nintersection_lines = lines_list * int(lines_frequency)  # [0, 1, 2] * 40\n\nlen(intersection_lines)","a2ca7b0e":"marked_position = pd.DataFrame({'Lines': intersection_lines,\n                                'Indices': intersection_position})\n\nmarked_position[marked_position['Lines'] == 0].head()","09fb6eb8":"data_dict = {}\nn_line = 3\nlines = [x for x in range(n_line)]\nchoise_data = x_end.copy()\nstart_data = combs_start.copy()\n\nfor x_line in lines:\n    x_indices = marked_position.loc[marked_position['Lines'] == x_line, 'Indices'].to_list()\n    x_data = choise_data[x_indices].copy().reset_index(drop=True)\n    x_main_combs = start_data\n\n    selected_main_combs = []\n    for value in x_main_combs.values:\n        if not x_data.str.contains(value).any():\n            selected_main_combs.append(value)\n\n    data_dict[x_line] = {\n        'main': pd.Series(selected_main_combs),\n        'choise': x_data\n    }\n\nmax_len = max([data_dict.get(x_line).get('main').size for x_line in lines])\n[data_dict.get(x_line).get('main').size for x_line in lines]","28031989":"data_dict.keys()","4ab77e4f":"data_info(data_dict.get(0).get('main'))","50e9de07":"data_info(data_dict.get(0).get('choise'))","9cbc59c0":"data_dict_copy = copy.deepcopy(data_dict)","897f73db":"%%time\n\nslice_len = 2\n\nfor x_line in data_dict.keys():\n    x_start = data_dict.get(x_line).get('main')\n    x_end = data_dict.get(x_line).get('choise')\n    \n    join_left(x_end, x_start, slice_len)","258cf809":"data_info(data_dict.get(0).get('main'))","f0f3c923":"data_info(data_dict.get(0).get('choise'))","c875aca4":"def get_result(data_dict):\n    \"\"\" \\o\/ \"\"\"\n    key_name = \"choise\"\n    \n    result = {key: value.get(key_name).sum() for key, value in data_dict.items()}\n\n    return pd.Series(result, name='schedule')\n\n\ndef base_combinations_correct(combs, result):\n    \"\"\" \\o\/ \"\"\"\n    check_result = []\n    \n    for x_combination in combs:\n        check_result.append(result.str.contains(x_combination).all())\n        \n    return pd.Series(check_result).all()\n\n\ndef other_combinations_correct(combs, result):\n    \"\"\" \\o\/ \"\"\"\n    check_result = []\n    \n    for x_combination in combs:\n        check_result.append(result.str.contains(x_combination).any())\n        \n    return pd.Series(check_result).all()","1eadc82b":"result = get_result(data_dict)\nresult","1375a86a":"other_combinations_correct(all_combinations, result)","2cc05f2f":"base_combinations_correct(combs_start, result)","d7f1d77d":"result.str.len()","66870c85":"all_lines_data = []\nfor x_line in data_dict_copy.keys():\n    x_cols_data = data_dict_copy.get(x_line).get('choise')\n    x_col_1 = x_cols_data.str.slice(stop=7)\n    x_col_2 = x_cols_data.str.slice(start=2)\n    x_col_3 = data_dict_copy.get(x_line).get('main')\n    x_line_data = pd.DataFrame({'line': x_line + 1,\n                                'head': x_col_1,\n                                'body': x_col_2,\n                                'tail': x_col_3})\n    \n    all_lines_data.append(x_line_data)\n    \ndataset = pd.concat(all_lines_data, axis=0, ignore_index=True)\ndataset","1e2c01a6":"save_dataset = True\n\nif save_dataset:\n    dataset_symbols = dataset.copy()\n\n    for col_name in dataset_symbols.columns:\n        if col_name == 'line':\n            continue\n        \n        dataset_symbols[col_name] = decode_symbols(dataset_symbols[col_name],\n                                                   symbols)\n        \n    dataset_symbols.to_csv('combinations.csv', index=False)\n    \nprint(save_dataset)","2100edae":"save_submission = True\n\nif save_submission:\n    submission = result.copy()\n    \n    submission = decode_symbols(submission, symbols)\n    \n    submission.to_csv('submission.csv', index=False)\n    \nprint(save_submission)","f5f91596":"## 2.4 EDA","113071ac":"# 2. Solution","01ee4e03":"## 2.1 Combinations start","72aa42d5":"## Solution 2440","6ffe7a2f":"# 1. Import & Load & Extract","5d0ffe4c":"# 4. Save submission","55f06845":"# 3. Save combinations","743cf3f0":"## 2.6 Check solution","efdd8322":"## 2.3 Combinations end","55d7e161":"## 2.2 Combinations middle"}}