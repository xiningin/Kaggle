{"cell_type":{"56028319":"code","7f54bd28":"code","3ef621eb":"code","c6c168ec":"code","be9e11f4":"code","145e4b91":"code","a692e58f":"code","f338728a":"code","f11d13e7":"code","4a19f44f":"code","9c50ea59":"code","d146c542":"code","08b7b784":"code","731be473":"code","5ba01594":"code","e5b39dc8":"code","1b1a6fb7":"code","8b85b7e3":"code","97595fb0":"code","cf6b912c":"code","17560f68":"code","669a5f8e":"code","3eea0c8d":"markdown","319dfacf":"markdown","5f373e94":"markdown","075834cf":"markdown","f252ddbd":"markdown","f28146c3":"markdown","4819c088":"markdown","e15cd85d":"markdown","7bf4ddfa":"markdown","096572aa":"markdown","eb734e8b":"markdown","c8363f68":"markdown"},"source":{"56028319":"import numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline","7f54bd28":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv').drop_duplicates()\ndf","3ef621eb":"import seaborn as sns\nfrom matplotlib.pyplot import figure\n\nfigure(figsize = (10, 15))\nsns.heatmap(df.isnull(), cbar=False)","c6c168ec":"df.describe()","be9e11f4":"df.info()","145e4b91":"df.hist(figsize=(16,8))","a692e58f":"import seaborn as sns\n\nplt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(), square=True, annot=True, fmt='.2f')\nplt.show()","f338728a":"df.plot(subplots=True, figsize = (10, 20))\nplt.show()","f11d13e7":"X = df.drop('output', axis = 1)\ny = df['output']","4a19f44f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","9c50ea59":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nfrom sklearn.model_selection import GridSearchCV\nknn_grid = {'n_neighbors': np.array(np.linspace(15, 35, 20), dtype='int')}\ngs = GridSearchCV(knn, knn_grid, cv=5, n_jobs = -1)\ngs.fit(X, y)\ngs.best_params_, gs.best_score_","d146c542":"def grid_plot(x, y, x_label, title, y_label='cross_val'):\n    plt.figure(figsize=(12, 6))\n    plt.grid(True)\n    plt.plot(x, y, 'go-')\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(title)","08b7b784":"grid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","731be473":"knn = KNeighborsClassifier(n_neighbors=27, n_jobs=4)\nknn.fit(X_train, y_train)","5ba01594":"y_knn = knn.predict(X_test)","e5b39dc8":"from sklearn import metrics\nprint(metrics.classification_report(y_test, y_knn))","1b1a6fb7":"from sklearn.linear_model import LogisticRegression\nalg = LogisticRegression()\n\ngrid = {'penalty': ['l1', 'l2', 'elasticnet'],\n        'C': np.array(np.logspace(-5, 5, num = 2), dtype='float'),\n        }\n\ngs = GridSearchCV(alg, grid, verbose=2, n_jobs = -1)\ngs.fit(X_train, y_train)\ngs.best_params_, gs.best_score_","8b85b7e3":"logreg = LogisticRegression(penalty='l2', C = 100000.0)\n\nlogreg.fit(X_train, y_train)\n\npreds = logreg.predict(X_test)\n\nprint(metrics.classification_report(y_test, preds))","97595fb0":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rf = RandomForestClassifier(n_estimators=1000)\nmodel_rf.fit(X_train, y_train)\n\n# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\npredictions_rf = model_rf.predict(X_test)\nprint(predictions_rf[:100])\npredictions_rf.shape","cf6b912c":"print(metrics.classification_report(y_test, predictions_rf))","17560f68":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train, y_train)\npreds = clf.predict(X_test)","669a5f8e":"print(metrics.classification_report(y_test, preds))","3eea0c8d":"Import Libraries","319dfacf":"Naive Bayes","5f373e94":"Random Forest","075834cf":"Dataset","f252ddbd":"Conclusion","f28146c3":"\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u044b \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 (\u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 Features plots (overall), \u0442\u043e \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 Accuracy. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c - \u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \"\u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u0411\u0430\u0439\u0435\u0441\".","4819c088":"Logistic Regression","e15cd85d":"Models","7bf4ddfa":"Features plots (overall)","096572aa":"Correlation matrix (heatmap)","eb734e8b":"KNN","c8363f68":"Histograms to evaluate features' correlation"}}