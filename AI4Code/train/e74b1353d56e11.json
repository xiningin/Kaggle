{"cell_type":{"f87b76de":"code","48a0eb8c":"code","7a3e13b4":"code","5db07bd5":"code","660dcc62":"code","61461b2b":"code","efdb6cd2":"code","8e475892":"code","0e77d7fd":"code","44f34511":"code","e8a9b1be":"code","ba0e01f2":"code","8a28dfd8":"code","8cfafc83":"code","c589cb9f":"code","9cb2040f":"code","75c73b59":"code","6213a618":"code","c864de94":"code","83ca0a83":"code","d6cb926e":"code","1655b9ba":"code","72ae9048":"code","53baff32":"code","23a83608":"code","e257dfdd":"code","52b9e757":"code","9bb36b4d":"code","c072d7ec":"code","74ecf988":"code","77760e03":"code","d79271e8":"markdown","3cb18bdd":"markdown","a4c8f50e":"markdown","3dd38d5a":"markdown","d08bd628":"markdown","9a285d44":"markdown","c3743caa":"markdown","4a5ad8b9":"markdown","d5cfdde2":"markdown"},"source":{"f87b76de":"import plotly.express as px\nimport matplotlib.pyplot as plt\nimport tifffile\nimport os\nimport shapely.geometry as sg\nimport shapely.ops as so\nimport json","48a0eb8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a3e13b4":"TRAIN_PATH = '\/kaggle\/input\/hubmap-kidney-segmentation\/train\/'\nsorted(os.listdir(TRAIN_PATH))","5db07bd5":"TEST_PATH = '\/kaggle\/input\/hubmap-kidney-segmentation\/test\/'\nos.listdir(TEST_PATH)","660dcc62":"hubmap = pd.read_csv('\/kaggle\/input\/hubmap-kidney-segmentation\/HuBMAP-20-dataset_information.csv')\nhubmap.shape","61461b2b":"hubmap #2f6ecfcdf","efdb6cd2":"hubmap.image_file.nunique()","8e475892":"df = hubmap.groupby('race')['race'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='race', title='Patient Race Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","0e77d7fd":"df = hubmap.groupby('sex')['sex'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='sex', title='Patient Gender Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","44f34511":"df = hubmap.groupby('age')['age'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='age', y='counts', color = 'age')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","e8a9b1be":"df = hubmap.groupby('laterality')['laterality'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='laterality', title='Patient Laterality Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","ba0e01f2":"df = hubmap.groupby('percent_cortex')['percent_cortex'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='percent_cortex', y='counts', color = 'percent_cortex')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","8a28dfd8":"df = hubmap.groupby('bmi_kg\/m^2')['bmi_kg\/m^2'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='bmi_kg\/m^2', y='counts', color = 'bmi_kg\/m^2')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","8cfafc83":"df = hubmap.groupby('weight_kilograms')['weight_kilograms'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='weight_kilograms', y='counts', color = 'weight_kilograms')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","c589cb9f":"df = hubmap.groupby('height_centimeters')['height_centimeters'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='height_centimeters', y='counts', color = 'height_centimeters')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","9cb2040f":"df = hubmap.groupby(['sex','race'])['race'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='sex', y='counts', color = 'race', barmode=\"group\")\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","75c73b59":"df = hubmap.groupby(['sex','laterality'])['laterality'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='sex', y='counts', color = 'laterality', barmode=\"group\")\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","6213a618":"im = tifffile.imread(\"\/kaggle\/input\/hubmap-kidney-segmentation\/train\/0486052bb.tiff\")\nplt.figure(figsize=(16, 16))\nplt.imshow(im)\nplt.axis(\"off\");","c864de94":"TRAIN_PATH = '\/kaggle\/input\/hubmap-kidney-segmentation\/train\/'\nsorted(os.listdir(TRAIN_PATH))","83ca0a83":"with open(TRAIN_PATH+'0486052bb-anatomical-structure.json') as f:\n    data = json.load(f)\n\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","d6cb926e":"with open(TRAIN_PATH+'095bf7a1f-anatomical-structure.json') as f:\n    data = json.load(f)\n\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","1655b9ba":"with open(TRAIN_PATH+'1e2425f28-anatomical-structure.json') as f:\n    data = json.load(f)\n\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","72ae9048":"with open(TRAIN_PATH+'0486052bb.json') as f:\n    data = json.load(f)\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","53baff32":"with open(TRAIN_PATH+'1e2425f28.json') as f:\n    data = json.load(f)\n\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","23a83608":"with open(TRAIN_PATH+'095bf7a1f.json') as f:\n    data = json.load(f)\nr1 = sg.Polygon([tuple(i) for i in data[0]['geometry']['coordinates'][0]])\nr2 = sg.box(0.5,0.5,1.5,1.5)\nr3 = sg.box(4,4,5,5)\n\nnew_shape = so.cascaded_union([r1, r2, r3])\nfig, axs = plt.subplots()\naxs.set_aspect('equal', 'datalim')\n\nfor geom in new_shape.geoms:    \n    xs, ys = geom.exterior.xy    \n    axs.fill(xs, ys, alpha=0.5, fc='r', ec='none')\n\nplt.show()","e257dfdd":"TRAIN_PATH = '\/kaggle\/input\/hubmap-kidney-segmentation\/train\/'\nimport glob, os\nfrom skimage import io\nos.chdir(TRAIN_PATH)\nfor file in glob.glob(\"*.tiff\"):\n    im = io.imread(TRAIN_PATH+file)\n    print(file)\n    print(im.shape)","52b9e757":"train = pd.read_csv('\/kaggle\/input\/hubmap-kidney-segmentation\/train.csv')\ntrain.head()","9bb36b4d":"rlestr1 = train[train['id']=='2f6ecfcdf']['encoding'][0]\nrlestr2 = train[train['id']=='aaa6a05cc']['encoding'][1]","c072d7ec":"import numpy as np # linear algebra\n\ndef rleToMask(rleString,height,width):\n    rows,cols = height,width\n    rleNumbers = [int(numstring) for numstring in rleString.split(' ')]\n    rlePairs = np.array(rleNumbers).reshape(-1,2)\n    img = np.zeros(rows*cols,dtype=np.uint8)\n    for index,length in rlePairs:\n        index -= 1\n        img[index:index+length] = 255\n    img = img.reshape(cols,rows)\n    img = img.T\n    return img","74ecf988":"img = rleToMask(rlestr1, 31278, 25794)\nplt.imshow(img)","77760e03":"img = rleToMask(rlestr2, 18000, 13000)\nplt.imshow(img)","d79271e8":"Thanks to @ihelon","3cb18bdd":"### Sample Cell image","a4c8f50e":"There are 8 Train images and 5 Test images.","3dd38d5a":"There is average distribution from 30 to 75. Also high number of patients in the range of 50 to 60","d08bd628":"This competition, \u201c**Hacking the Kidney**,\" starts by mapping the human kidney at single cell resolution.\n\nYour challenge is to detect functional tissue units (FTUs) across different tissue preparation pipelines. An FTU is defined as a \u201cthree-dimensional block of cells centered around a capillary, such that each cell in this block is within diffusion distance from any other cell in the same block\u201d (de Bono, 2013). The goal of this competition is the implementation of a successful and robust glomeruli **FTU detector**.","9a285d44":"![image.png](attachment:image.png)","c3743caa":"If you <font color = 'orange'>like<\/font> this kernel and want to <font color = 'orange'>fork<\/font> plz <font color = 'red'><b>UPVOTE.<\/b><\/font>\n\nIf you have suggestions to improve this kernel plz <font color = 'red'>COMMENT.<\/font>\n\n<font color = 'Orange'><b>************************ Notebook is under construction ************************<\/b><\/font>","4a5ad8b9":"## Libraries","d5cfdde2":"### Number of patients"}}