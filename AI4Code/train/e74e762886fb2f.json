{"cell_type":{"7ffca788":"code","f97710a3":"code","225fc794":"code","db5026d5":"code","939e64ee":"code","ca5a72e6":"code","0c4dcf61":"code","ea8502b2":"code","159347b5":"code","15486637":"code","c208c024":"code","cb579cc2":"code","6f0c0cd3":"code","41d30e01":"code","76cea385":"code","40d135e3":"code","bd19b10f":"code","172033f6":"code","1a1a869a":"code","7f11be33":"markdown","58a18690":"markdown","1f87ffd2":"markdown","37308706":"markdown","a748cb13":"markdown","662fd7e9":"markdown","fd219bbe":"markdown","d821a85a":"markdown","b084e645":"markdown","02ea5e40":"markdown","94aaa677":"markdown","7acad96f":"markdown","ff014106":"markdown","b2ea7e6a":"markdown","ef5fd69f":"markdown","5149036c":"markdown","08eaf3c0":"markdown","56b0c0f4":"markdown"},"source":{"7ffca788":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler, RobustScaler, StandardScaler, MinMaxScaler, PowerTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.metrics import plot_confusion_matrix, classification_report, accuracy_score\nfrom category_encoders.woe import WOEEncoder\nfrom category_encoders.cat_boost import CatBoostEncoder\nfrom category_encoders.target_encoder import TargetEncoder\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.figure(figsize = (10,6))\nsns.set(rc={'figure.figsize':(16,8)})\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f97710a3":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntestdf = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf.head()","225fc794":"df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\\.')\ndf['TotalFamilyMembers'] = df['SibSp'] + df['Parch']\n\ntestdf['Title'] = testdf['Name'].str.extract(' ([A-Za-z]+)\\.')\ntestdf['TotalFamilyMembers'] = testdf['SibSp'] + testdf['Parch']\n\ndf.groupby(['Title'])['Survived'].mean().plot.barh(title='Survival by \"Title\"')","db5026d5":"df['Title'] = df['Title'].replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].replace('Ms', 'Miss')\ndf['Title'] = df['Title'].replace('Mme', 'Mrs')\ndf['Title'] = df['Title'].replace(['Lady', 'Countess', 'Sir'], 'OthersSurvived')\ndf['Title'] = df['Title'].replace(['Capt', 'Don', 'Jonkheer'], 'OthersDied')\n#df['Title'] = df['Title'].replace(['Lady', 'Countess', 'Sir', 'Dona','Capt', 'Don', 'Jonkheer'], 'Others')\n\ntestdf['Title'] = testdf['Title'].replace('Mlle', 'Miss')\ntestdf['Title'] = testdf['Title'].replace('Ms', 'Miss')\ntestdf['Title'] = testdf['Title'].replace('Mme', 'Mrs')\ntestdf['Title'] = testdf['Title'].replace(['Lady', 'Countess', 'Sir'], 'OthersSurvived')\ntestdf['Title'] = testdf['Title'].replace(['Capt', 'Don', 'Jonkheer'], 'OthersDied')\n#testdf['Title'] = testdf['Title'].replace(['Lady', 'Countess', 'Sir', 'Dona','Capt', 'Don', 'Jonkheer'], 'Others')\n\ndf['Title'].value_counts()","939e64ee":"print('*** Main ***:')\nprint(df.isna().sum())\nprint('*** Test ***:')\nprint(testdf.isna().sum())","ca5a72e6":"GroupedByTitle = df.groupby(['Title','Pclass'])\ndf['Age'] = GroupedByTitle['Age'].apply(lambda x:x.fillna(x.median()))\ntestdf['Age'] = GroupedByTitle['Age'].apply(lambda x:x.fillna(x.median()))\n\n### Needs >=Seaborn 11 for displot. Can't get it to upgrade permanently\n#sns.displot(x='Age', hue='Survived', data=df,multiple=\"stack\")\nsns.distplot(df['Age'])","0c4dcf61":"testdf['Fare'].fillna((testdf['Fare'].median()), inplace=True)","ea8502b2":"df['Cabin'] = df['Cabin'].fillna('Unknown')\ndf['Cabin'] = df['Cabin'].apply(lambda x: x[0])\n\ntestdf['Cabin'] = testdf['Cabin'].fillna('Unknown')\ntestdf['Cabin'] = testdf['Cabin'].apply(lambda x: x[0])","159347b5":"CommonEmbarked = df['Embarked'].value_counts().index[0]\nprint('Most common Embarked:',CommonEmbarked)\ndf['Embarked'] = df['Embarked'].fillna(CommonEmbarked)\ntestdf['Embarked'] = testdf['Embarked'].fillna(CommonEmbarked)\ndf.isna().sum()","15486637":"### Binning ###\ndf['AgeBin'] = pd.qcut(df['Age'].rank(method='first'), 5).astype(str)\ntestdf['AgeBin'] = pd.qcut(testdf['Age'].rank(method='first'), 5).astype(str)\ndf['FareBin'] = pd.qcut(df['Fare'].rank(method='first'), 10).astype(str)\ntestdf['FareBin'] = pd.qcut(testdf['Fare'].rank(method='first'), 10).astype(str)\n\n### Features ###\ndf['AgePclass'] = df['Age'] * df['Pclass']\ntestdf['AgePclass'] = testdf['Age'] * testdf['Pclass']\n\ndf['TicketPre'] = df['Ticket'].apply(lambda x:x[0:3])\ntestdf['TicketPre'] = testdf['Ticket'].apply(lambda x:x[0:3])\n\ndf['NameWordsCount'] = df['Name'].apply(lambda x: len(x.split()))\ntestdf['NameWordsCount'] = testdf['Name'].apply(lambda x: len(x.split()))\n\ndf['Sex'] = df['Sex'].apply(lambda x: 1 if x=='male' else 0)\ndf['SexPclass'] = (df['Sex'] * 10) + df['Pclass']\ntestdf['Sex'] = testdf['Sex'].apply(lambda x: 1 if x=='male' else 0)\ntestdf['SexPclass'] = (testdf['Sex'] * 10) + testdf['Pclass']\n\n# df['AgeSex'] = (df['Age'] * 1000) + df['Sex']\n# testdf['AgeSex'] = (testdf['Age'] * 1000) + testdf['Sex']\n\n# df['FareByPclass'] = df['Fare'] * (4-df['Pclass'])\n# testdf['FareByPclass'] = testdf['Fare'] * (4-testdf['Pclass'])\n\n# df['FamPclass'] = df['TotalFamilyMembers'] * df['Pclass']\n# testdf['FamPclass'] = testdf['TotalFamilyMembers'] * testdf['Pclass']","c208c024":"CategoryColumns = ['Title','Embarked','Cabin','SibSp','Parch','SexPclass','TicketPre','NameWordsCount','AgeBin','FareBin']\n\n#df = pd.get_dummies(df, columns=CategoryColumns, prefix=CategoryColumns)\n#testdf = pd.get_dummies(testdf, columns=CategoryColumns, prefix=CategoryColumns)\n\nX = df.drop(['Survived','Name','Ticket'],axis=1, inplace=False)\nXSub = testdf.drop(['Name','Ticket'],axis=1, inplace=False)\ny = df['Survived']\n\nwoe_encoder = WOEEncoder(cols=CategoryColumns).fit(X,y)\nX = woe_encoder.transform(X)\nXSub = woe_encoder.transform(XSub)\n\nX.drop(['PassengerId'],axis=1,inplace=True)\n\ncorr_numeric = sns.heatmap(df.corr(), annot=True, fmt = \".2f\", cmap = \"summer\")","cb579cc2":"sns.pairplot(df,vars=['Age','Fare','Sex','SibSp','Parch','Pclass'], hue='Survived', height=3, diag_kws={'bw': 0.25})","6f0c0cd3":"Xtrain,Xtest,ytrain,ytest = train_test_split(X, y, test_size=0.1, random_state=42)","41d30e01":"ColsToScale = ['Age','Fare','Pclass','Embarked','SibSp','Parch','Cabin','TotalFamilyMembers','Title']\npt = PowerTransformer().fit(Xtrain[ColsToScale])\nptfull = PowerTransformer().fit(X[ColsToScale])\n\nX[ColsToScale]=ptfull.transform(X[ColsToScale])\nXSub[ColsToScale] = ptfull.transform(XSub[ColsToScale])\nXtrain[ColsToScale] = pt.transform(Xtrain[ColsToScale])\nXtest[ColsToScale] = pt.transform(Xtest[ColsToScale])","76cea385":"LRmodel = LogisticRegression(C=1,max_iter=1000,tol=0.0001).fit(Xtrain,ytrain)\n\nLRscores = cross_val_score(LRmodel, X, y, cv=10)\nLRmodel=LRmodel.fit(Xtrain,ytrain)\nprint('---Cross Validation---\\n')\nprint(\"CV:\",LRscores)\nprint(\"Accuracy:\",LRscores.mean(),'\\n')\n\nprint('---Train Test Split---\\n')\nyprime = LRmodel.predict(Xtest)\nLRTestAcc = accuracy_score(ytest, yprime)\ndisp = plot_confusion_matrix(LRmodel, Xtest, ytest)\nplt.show()\nprint(classification_report(ytest,yprime))\nprint('Test Accuracy:', LRTestAcc)","40d135e3":"CBmodel = CatBoostClassifier(verbose=False).fit(Xtrain,ytrain)\n\nCBscores = cross_val_score(CBmodel, X, y, cv=10)\nCBmodel=CBmodel.fit(Xtrain,ytrain)\nprint('---Cross Validation---\\n')\nprint(\"CV:\",CBscores)\nprint(\"Accuracy:\",CBscores.mean(),'\\n')\n\nprint('---Train Test Split---\\n')\nyprime = CBmodel.predict(Xtest)\nCBTestAcc = accuracy_score(ytest, yprime)\ndisp = plot_confusion_matrix(CBmodel, Xtest, ytest)\nplt.show()\nprint(classification_report(ytest,yprime))\nprint('Test Accuracy:', CBTestAcc)","bd19b10f":"DTmodel = DecisionTreeClassifier().fit(Xtrain,ytrain)\n\nDTscores = cross_val_score(DTmodel, X, y, cv=10)\nprint('---Cross Validation---\\n')\nprint(\"CV:\",DTscores)\nprint(\"Accuracy:\",DTscores.mean(),'\\n')\n\nprint('---Train Test Split---\\n')\nyprime = DTmodel.predict(Xtest)\nDTTestAcc = accuracy_score(ytest, yprime)\ndisp = plot_confusion_matrix(DTmodel, Xtest, ytest)\nplt.show()\nprint(classification_report(ytest,yprime))\nprint('Test Accuracy:', DTTestAcc)\n\n#Just because I wanted to see it XD\n#tree.plot_tree(DTmodel)","172033f6":"#RFmodel = RandomForestClassifier(n_estimators=600,criterion='entropy')\nRFmodel = RandomForestClassifier(criterion='gini', \n                n_estimators=1200,\n                max_depth=5,\n                min_samples_split=4,\n                min_samples_leaf=5,\n                max_features='auto',\n                oob_score=True,\n                n_jobs=-1)\nRFscores = cross_val_score(RFmodel, X, y, cv=10)\nRFmodel = RFmodel.fit(Xtrain,ytrain)\nprint('---Cross Validation---\\n')\nprint(\"CV:\",RFscores)\nprint(\"Accuracy:\",RFscores.mean(),'\\n')\n\nprint('---Train Test Split---\\n')\nyprime = RFmodel.predict(Xtest)\nRFTestAcc = accuracy_score(ytest, yprime)\ndisp = plot_confusion_matrix(RFmodel, Xtest, ytest)\nplt.show()\nprint(classification_report(ytest,yprime))\nprint('Test Accuracy:', RFTestAcc)","1a1a869a":"predictions = LRmodel.predict(XSub.drop(['PassengerId'],inplace=False, axis=1))\nsubmission = pd.DataFrame({'PassengerId':XSub['PassengerId'],'Survived':predictions})\nfilename = 'Titanic Predictions 1.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","7f11be33":"### Fill NA Fare in TEST DF","58a18690":"## Pair Plot Analysis","1f87ffd2":"## Test Train Split","37308706":"### Fill NA Embarked with most common Embarked value","a748cb13":"## Make prediction","662fd7e9":"## Add Features: ('Title', 'TotalFamilyMembers')","fd219bbe":"## Logistic Regression","d821a85a":"## NaNs Exploration","b084e645":"### Fill NA Age with median o Age by Title and Pclass","02ea5e40":"### Fill NA Cabin with word 'Unknown' but then only leave 1st letter and drop number","94aaa677":"## Encode Categories","7acad96f":"## Scaling \/ Transforming \/ Normalizing","ff014106":"## Run Models","b2ea7e6a":"## **Load Data**","ef5fd69f":"### Add more features","5149036c":"## RandomForestClassifier","08eaf3c0":"## CatBoostClassifier","56b0c0f4":"## DecisionTreeClassifier"}}