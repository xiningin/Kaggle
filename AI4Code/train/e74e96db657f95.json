{"cell_type":{"669e9204":"code","f62680d3":"code","511e1c27":"code","4c13a922":"code","679e638f":"code","61261ee1":"code","37013433":"code","cf52ca50":"code","31568927":"code","d461b6a3":"code","c3f9416d":"code","9ae07c64":"markdown","e831b544":"markdown"},"source":{"669e9204":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f62680d3":"import matplotlib.pyplot as plt\nimport cv2\nimport random\nimport scipy\nfrom scipy import signal\nfrom scipy.stats import rayleigh,erlang,uniform,exponweib,gamma","511e1c27":"X = np.arange(-50,50)","4c13a922":"X_Gaussian = signal.gaussian(100,std=7)\nX_Rayleigh = rayleigh.pdf(X)\nX_Uniform = uniform.pdf(X,-20,20)\nX_Gamma = gamma.pdf(X,3,2)\nX_Expomential = exponweib.pdf(X,10,1)","679e638f":"fig = plt.figure(figsize=(12, 40))\nfig1 = fig.add_subplot(10, 3, 1)\nfig2 = fig.add_subplot(10, 3, 2)\nfig3 = fig.add_subplot(10, 3, 3)\nfig4 = fig.add_subplot(10, 3, 4)\nfig5 = fig.add_subplot(10, 3, 5)\nfig6 = fig.add_subplot(10, 3, 6)\n\nfig1.title.set_text('Origin')\nfig1.plot(X)\nfig2.title.set_text('Gaussian')\nfig2.plot(X_Gaussian)\nfig3.title.set_text('Rayleigh')\nfig3.plot(X_Rayleigh)\nfig4.title.set_text('Uniform')\nfig4.plot(X_Uniform)\nfig5.title.set_text('Gamma')\nfig5.plot(X_Gamma)\nfig6.title.set_text('Expomential')\nfig6.plot(X_Expomential)\n\nplt.show()","61261ee1":"img = cv2.imread('\/kaggle\/input\/cameraman.tif')\/255\nplt.imshow(img)\nplt.show()","37013433":"# from skimage import color\n# row, col, ch = img.shape\n# mean = 0\n# var = 0.1\n# sigma = var**0.5\n\n# X_Gaussian = np.random.normal(mean,sigma,(row,col,ch)).reshape(row,col,ch)\n# X_Rayleigh = rayleigh.pdf(img).reshape(row,col,ch)\n# X_Uniform = np.random.uniform(img).reshape(row,col,ch)\n# X_Gamma = np.random.gamma(img).reshape(row,col,ch)\n# X_Expomential = np.random.exponential(img).reshape(row,col,ch)\n\n# figs = []\n# names = ['Origin', 'Gaussian', 'Rayleigh', 'Uniform', 'Gamma', 'Expomential']\n# noises = [np.zeros(img.shape),X_Gaussian,X_Rayleigh,X_Uniform,X_Gamma,X_Expomential]\n# fig = plt.figure(figsize=(12, 40))\n    \n# for (index,noise) in zip(range(6),noises):\n#     figs.append(fig.add_subplot(10, 2, index*2+1))\n#     figs[index*2].title.set_text(names[index])\n#     figs[index*2].imshow(img + noise)\n#     figs.append(fig.add_subplot(10, 2, index*2+2))\n#     figs[index*2+1].title.set_text(names[index])\n\n# plt.show()","cf52ca50":"from skimage import color\nrow, col, ch = img.shape\nmean = 0\nvar = 0.1\nsigma = var**0.5\n\nX_Gaussian = np.random.normal(mean,sigma,(row,col,ch)).reshape(row,col,ch)\nX_Rayleigh = rayleigh.pdf(img).reshape(row,col,ch)\nX_Uniform = np.random.uniform(img).reshape(row,col,ch)\nX_Gamma = np.random.gamma(img).reshape(row,col,ch)\nX_Expomential = np.random.exponential(img).reshape(row,col,ch)\n\nfigs = []\nnames = ['Origin', 'Gaussian', 'Rayleigh', 'Uniform', 'Gamma', 'Expomential']\nnoises = [np.zeros(img.shape),X_Gaussian,X_Rayleigh,X_Uniform,X_Gamma,X_Expomential]\n# img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nnoise_img = img + noise[2]\nplt.imshow(img)\nplt.show()\nplt.imshow(noise_img)\nplt.show()","31568927":"# median_img = cv2.medianBlur(np.float32(noise_img), 3)\n# plt.imshow(median_img)\n# plt.show()\n\nfor i in range(1,5,2):\n    img1Fix = cv2.medianBlur(np.float32(noise_img),i)\n    plt.imshow(img1Fix)\n    plt.show()\n    print(\"Applied filter %i\" %i)","d461b6a3":"from scipy.signal import convolve2d\nfrom skimage import color, data, restoration\n\ndef rgb2gray(rgb):\n    return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])\n\nnoise_gray_img = rgb2gray(noise_img)\nplt.imshow(noise_gray_img)\nplt.show()\nprint(\"noise imgae in gray\")","c3f9416d":"psf = np.ones((5, 5)) \/ 25\nnew_img = convolve2d(noise_gray_img, psf, 'same')\nplt.imshow(new_img)\nplt.show()\nnew_img += 0.1 * new_img.std() * np.random.standard_normal(new_img.shape)\nfor i in range(100,1101,100):\n    deconvolved_img = restoration.wiener(new_img, psf, i)\n    plt.imshow(deconvolved_img)\n    plt.show()","9ae07c64":"**Create sample image and plot the 1D graph of 5 types of noise **","e831b544":"* **Load the sample image (cameraman.tif or else) as original.**\n* **Generate the noise images by adding original image to generated noise images (use the above noises). Called the mixed images.**\n* **Display the histogram of the mixed images.**"}}