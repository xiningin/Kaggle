{"cell_type":{"6589a484":"code","2ca5d147":"code","0acab010":"code","e819e63a":"code","a1f359cd":"code","41cc3757":"code","e3686abb":"code","0ec26a7c":"code","0e38d849":"code","f27d787b":"code","cd776fcd":"code","1a84ffb1":"code","bb72eca4":"code","31bee043":"code","07169910":"code","adb09b86":"code","4663484b":"code","c72cc494":"code","a2fed410":"code","be39e3b5":"code","c2913f56":"code","4573a9a7":"code","a4c5e5e6":"code","6ad81047":"code","b2295edb":"code","cc84c34b":"code","96cc3321":"code","3c4cb00e":"code","49c09689":"code","999c9224":"code","ef5ff15d":"code","bc59f094":"code","43b2c294":"code","f4431670":"code","070de588":"code","dd9733d5":"code","fce28633":"code","fe59cfbf":"code","fc61e539":"code","64c9ec7c":"code","55dbf2d7":"code","66d45e08":"code","3cbfb580":"code","9a564e04":"code","c3933e43":"code","8aa8fb31":"code","b8d015c1":"code","9992554d":"code","7b060238":"code","c3fbbdaa":"code","4a7a7614":"code","5cfb19df":"code","cba423a5":"code","41b11106":"code","4b767471":"code","201e56c2":"code","558b1af7":"code","acb73d41":"code","7a70e05c":"code","06d1f687":"code","50b91c92":"code","40357de2":"code","2bbba634":"markdown","802bd306":"markdown","5be15621":"markdown","355cfd6a":"markdown","a72d0097":"markdown","a63b5837":"markdown","4b1e750b":"markdown","f9c76c4e":"markdown","973a5f96":"markdown","9809753b":"markdown","88e129cb":"markdown","1935a02c":"markdown","f908f653":"markdown","a41dec19":"markdown","1a919993":"markdown","4d823671":"markdown"},"source":{"6589a484":"## Import the libraries which would be used\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n","2ca5d147":"## Adding this code to scroll through the entire data \npd.options.display.max_rows = None\npd.options.display.max_columns = None","0acab010":"## read the file and load to dataframe\nbike= pd.read_csv(\"..\/input\/boombikes\/day.csv\")","e819e63a":"bike.shape","a1f359cd":"bike.info()","41cc3757":"print(\"Temp max:\" ,bike.temp.max())\nprint(\"Temp min:\" ,bike.temp.min())\nprint(\"Wind Speed max:\" ,bike.windspeed.max())\nprint(\"Wind Speed min:\" ,bike.windspeed.min())","e3686abb":"bin1 = [0, 10, 20, 30,40]\ntemp_grp = {1: 'Low_Temp', 2:  'Medium_Temp', 3: 'High_Temp', 4: 'Very_High_Temp'}\nwind_grp = {1: 'Low_Wind', 2:  'Medium_Wind', 3: 'High_Wind', 4: 'Very_High_Wind'}\n","0ec26a7c":"bike['Wind_range'] = pd.cut(bike['windspeed'], bin1, labels=wind_grp.keys())\nbike['Temp_range'] = pd.cut(bike['temp'], bin1, labels=temp_grp.keys())","0e38d849":"bike.head()","f27d787b":"plt.figure(figsize=(5,5))\nsns.distplot(bike.cnt)","cd776fcd":"plt.figure(figsize=(15,15))\nplt.subplot(3,3,1)\nsns.boxplot(x=\"yr\",y=\"cnt\",data=bike)\nplt.subplot(3,3,2)\nsns.boxplot(x=\"mnth\",y=\"cnt\",data=bike)\nplt.subplot(3,3,3)\nsns.boxplot(x=\"holiday\",y=\"cnt\",data=bike)\nplt.subplot(3,3,4)\nsns.boxplot(x=\"weekday\",y=\"cnt\",data=bike)\nplt.subplot(3,3,5)\nsns.boxplot(x=\"workingday\",y=\"cnt\",data=bike)\nplt.subplot(3,3,6)\nsns.boxplot(x=\"weathersit\",y=\"cnt\",data=bike)\nplt.subplot(3,3,7)\nsns.boxplot(x=\"Wind_range\",y=\"cnt\",data=bike)\nplt.subplot(3,3,8)\nsns.boxplot(x=\"Temp_range\",y=\"cnt\",data=bike)\nplt.subplot(3,3,9)\nsns.boxplot(x=\"season\",y=\"cnt\",data=bike)\nplt.show()","1a84ffb1":"plt.figure(figsize=(15,5))\nplt.subplot(1,3,1)\nplt1=bike.Wind_range.value_counts().plot(kind='bar')\nplt1.set(xlabel=\"Wind Range\",ylabel=\"Frequency\")\n\nplt.subplot(1,3,2)\nplt2=bike.Temp_range.value_counts().plot(kind='bar')\nplt2.set(xlabel =\"Temp Range\",ylabel=\"Frequency\")\n\nplt.subplot(1,3,3)\nplt3=bike.weathersit.value_counts().plot(kind='bar')\nplt3.set(xlabel=\"Weatersit\", ylabel=\"Frequency\")\nplt.show()\n\n","bb72eca4":"## bike demant over year\nplt.figure(figsize=(15,8))\nsns.barplot(x=\"mnth\",y=\"cnt\",data=bike,hue=\"yr\",ci=None)\nplt.show()","31bee043":"## bike demant over months at different temp range\nplt.figure(figsize=(20,8))\nsns.boxplot(x=\"mnth\",y=\"cnt\",data=bike,hue=\"Temp_range\")\nplt.show()","07169910":"## bike demant over months at different weathersit\nplt.figure(figsize=(20,8))\nsns.boxplot(x=\"mnth\",y=\"cnt\",data=bike,hue=\"weathersit\")\nplt.show()","adb09b86":"## Dropping the below variable as removing these will not affect any way in the outcomes\nbike=bike.drop(['instant', 'dteday','casual', 'registered','atemp'],axis=1)","4663484b":"bike.head()","c72cc494":"plt.figure(figsize=(15,15))\nsns.heatmap(bike.corr(),annot=True,cmap=\"YlGnBu\")\nplt.show()","a2fed410":"sns.pairplot(bike,y_vars='cnt')\nplt.show()","be39e3b5":"sns.pairplot(bike)\nplt.show()","c2913f56":"temp_grp.values()","4573a9a7":"bike_ohe = OneHotEncoder()\n\nbike_season_arr= bike_ohe.fit_transform(bike[['season']]).toarray()\nbike_season=pd.DataFrame(bike_season_arr,columns=['fall', 'spring', 'summer', 'winter'])\nbike_season=bike_season.drop('fall',axis=1)\n\nbike_weathersit_arr= bike_ohe.fit_transform(bike[['weathersit']]).toarray()\nbike_weathersit=pd.DataFrame(bike_weathersit_arr,columns=['clear', 'misty', 'light_snow'])\nbike_weathersit=bike_weathersit.drop('clear',axis=1)\n\nbike_month_arr=bike_ohe.fit_transform(bike[['mnth']]).toarray()\nbike_month=pd.DataFrame(bike_month_arr,columns=['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec'])\nbike_month=bike_month.drop('Jan',axis=1)\n\nbike_weekday_arr=bike_ohe.fit_transform(bike[['weekday']]).toarray()\nbike_weekday=pd.DataFrame(bike_weekday_arr,columns=['Tue','Wed','Thr','Fri','Sat','Sun','Mon'])\nbike_weekday=bike_weekday.drop('Tue',axis=1)\n\n# bike_Wind_range_arr = bike_ohe.fit_transform(bike[['Wind_range']]).toarray()\n# bike_Wind_range = pd.DataFrame(bike_Wind_range_arr,columns=wind_grp.values())\n# bike_Wind_range=bike_Wind_range.drop('Low_Wind',axis=1)\n\n# bike_Temp_range_arr = bike_ohe.fit_transform(bike[['Temp_range']]).toarray()\n# bike_Temp_range = pd.DataFrame(bike_Temp_range_arr,columns=temp_grp.values())\n# bike_Temp_range=bike_Temp_range.drop('Low_Temp',axis=1)\n","a4c5e5e6":"#  bike=pd.concat([bike,bike_season,bike_weathersit,bike_month,bike_weekday,bike_Wind_range,bike_Temp_range],axis=1)\nbike=pd.concat([bike,bike_season,bike_weathersit,bike_month,bike_weekday],axis=1)","6ad81047":"bike=bike.drop(['season','weathersit','mnth','weekday','Wind_range','Temp_range'],axis=1)","b2295edb":"bike.head()","cc84c34b":"bike.iloc[:,7:]=bike.iloc[:,7:].astype('int')","96cc3321":"bike.head()","3c4cb00e":"df_train,df_test=train_test_split(bike,train_size=0.70,random_state=100)\nprint(df_train.shape)\nprint(df_test.shape)","49c09689":"df_train.head()","999c9224":"df_train.describe()","ef5ff15d":"scalar=MinMaxScaler()\ncolumns=['temp','hum','windspeed','cnt']\ndf_train[columns]=scalar.fit_transform(df_train[columns])\ndf_train.head()","bc59f094":"df_train.describe()","43b2c294":"y_train=df_train.pop('cnt')\nX_train=df_train","f4431670":"lm=LinearRegression()\nlm.fit(X_train,y_train)\n\nrfe=RFE(lm,15)\nrfe=rfe.fit(X_train,y_train)","070de588":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","dd9733d5":"X_train.columns[rfe.support_]","fce28633":"col = X_train.columns[rfe.support_]","fe59cfbf":"X_train_lm=X_train[col]\n\nX_train_lm = sm.add_constant(X_train_lm)\nlm = sm.OLS(y_train,X_train_lm).fit()\n\nlm.summary()","fc61e539":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","64c9ec7c":"X_train_lm=X_train[col]\nX_train_lm=X_train_lm.drop('summer',axis=1)\n\nX_train_lm=sm.add_constant(X_train_lm)\nlm=sm.OLS(y_train,X_train_lm).fit()","55dbf2d7":"lm.summary()","66d45e08":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3cbfb580":"X_train_lm=X_train[col]\nX_train_lm= X_train_lm.drop(['summer','hum'],axis=1)\n\nX_train_lm=sm.add_constant(X_train_lm)\nlm=sm.OLS(y_train,X_train_lm).fit()\nlm.summary()","9a564e04":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c3933e43":"X_train_lm=X_train[col]\nX_train_lm= X_train_lm.drop(['summer','hum','Oct'],axis=1)\n\nX_train_lm=sm.add_constant(X_train_lm)\nlm=sm.OLS(y_train,X_train_lm).fit()\nlm.summary()","8aa8fb31":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","b8d015c1":"X_train_lm=X_train[col]\nX_train_lm= X_train_lm.drop(['summer','hum','Oct','holiday'],axis=1)\n\nX_train_lm=sm.add_constant(X_train_lm)\nlm=sm.OLS(y_train,X_train_lm).fit()\nlm.summary()","9992554d":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","7b060238":"X_train_lm=X_train[col]\nX_train_lm= X_train_lm.drop(['summer','hum','Oct','holiday','Aug'],axis=1)\n\nX_train_lm=sm.add_constant(X_train_lm)\nlm=sm.OLS(y_train,X_train_lm).fit()\nlm.summary()","c3fbbdaa":"vif=pd.DataFrame()\nX=X_train_lm.drop('const',axis=1)\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4a7a7614":"lm.params","5cfb19df":"y_train_demand = lm.predict(X_train_lm)","cba423a5":"# Plot the histogram of the error terms\nfig = plt.figure(figsize=(8,5))\nsns.distplot((y_train - y_train_demand), bins = 20)\nplt.xlabel('Errors')  \nplt.show()","41b11106":"residual = y_train - y_train_demand\nsns.scatterplot(y_train,residual)\nplt.plot(y_train,(y_train - y_train), '-r')\nplt.show()","4b767471":"columns=['temp','hum','windspeed','cnt']\ndf_test[columns]=scalar.transform(df_test[columns])","201e56c2":"df_test.describe()","558b1af7":"y_test = df_test.pop('cnt')\nX_test = df_test","acb73d41":"X_test_lm = sm.add_constant(X_test[col])","7a70e05c":"X_test_lm = X_test_lm.drop(['summer','hum','Oct','holiday','Aug'],axis=1)","06d1f687":"y_pred_demand = lm.predict(X_test_lm)","50b91c92":"# Plotting y_test and y_pred to understand the spread\n\nfig = plt.figure()\nplt.scatter(y_test, y_pred_demand)\nfig.suptitle('y_test vs y_pred', fontsize = 20)             \nplt.xlabel('y_test', fontsize = 18)\nplt.ylabel('y_pred', fontsize = 16)  ","40357de2":"r2 = round(r2_score(y_test, y_pred_demand),4)\nr2","2bbba634":"As part of Binvary encoding converting the Categorical variables yes\/no to binary values 0\/1 and multi level categorical variables to dummy variable","802bd306":"P-Value of summer is greater than 0.05 hence the variable is insignificant hence will drop the variable and check the model","5be15621":"# Bike Sharing Assignment\n### A US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues due to the ongoing Corona pandemic. So, it has decided to come up with a mindful business plan to be able to accelerate its revenue as soon as the ongoing lockdown comes to an end, and the economy restores to a healthy state. \n## Problem Statement\n\nThe company wants to know:\n\n* Which variables are significant in predicting the demand for shared bikes.\n* How well those variables describe the bike demands","355cfd6a":"# Residual Analysis of the train data","a72d0097":"# Modeling the data\n\n* Create the Xtrain and Ytrain data\n* Follow Automated RFE method and manual method to create linear model","a63b5837":"## Splitting Test train ","4b1e750b":"We have high p-Value for Oct Variable and High VIF for temp variable. Always first try droping the variable with high p-value.\n","f9c76c4e":"## Visualization of Categorical Variable","973a5f96":"# Visualize the data","9809753b":"# y= 0.075+0.233 yr +0.056 workingday + 0.550 temp -0.155 windspeed + 0.088 spring + 0.131 winter -0.080 misty -0.287 light_snow + 0.097 Sep +0.067 Mon","88e129cb":"Normalize the data marking variable of similar scale will help coefficients comparable","1935a02c":"This plot give scatter plot ant againts other variables. And its looks them there is a linear relation between temp and demand","f908f653":"VIF value should not considerred more than 5 and as we need to drop one variable at a time hence will drop hum variable","a41dec19":"From the above graph getting insights \n* As the year increases the Demand Increases a huge\n* The demand for bikes are high in mid year between months 5 to 10\n* Demand is more when the weather is Clear, Few clouds, Partly cloudy, Partly cloudy\n* As the Wind speed increases the demand decreases\n* Demand increas as Temperature increases except for very high temperature\n* It looks to be the demand is high during summer and fall seasons.","1a919993":"# Predict on the test data","4d823671":"From the Heatmap we are getting insight that season, year and temp are highly correlated with demand. Wind speed is negatively correlated to the Demand"}}