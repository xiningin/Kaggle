{"cell_type":{"e80d6755":"code","71d9b52c":"code","7914b4c0":"code","4fbb1f30":"code","e264cc2c":"code","c9757ef8":"code","76590f4d":"code","691f8855":"code","f26dedc4":"code","20df0333":"code","15008e7c":"code","138f9bf9":"code","1e4e3e8a":"code","fca2b868":"code","d3c9faff":"code","2c89d1be":"code","8224bdfa":"code","511029af":"code","545c35a7":"code","aaeac2bb":"code","c07265b2":"code","6c879cda":"markdown","bc477367":"markdown","24a19319":"markdown","7c22080d":"markdown","7149909f":"markdown","3ff73459":"markdown","68373daa":"markdown"},"source":{"e80d6755":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71d9b52c":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n!pip install scanpy\n#!pip install scvelo\n#!pip install git+https:\/\/github.com\/csgroen\/scycle.git#egg=scycle\n#!pip install  --no-dependencies  git+https:\/\/github.com\/j-bac\/elpigraph-python.git\n# from elpigraph_ps_tools import *\n#import elpigraph\nimport scanpy as sc\nimport anndata\n\n\n\nimport importlib\n\nimport pandas as pd\nimport numpy as np\n#import scanpy as sc\n#import scycle as cc\n# import scvelo as sv\n#import anndata\nfrom sklearn.decomposition import PCA\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import NearestNeighbors\n\nmpl.rcParams['figure.dpi'] = 70\n\nimport os\n\nimport sys\n#DATA_PATH = '\/mnt\/c\/Datas\/SingleCellTranscriptomics\/sciPlex\/'\n#sys.path.append(DATA_PATH)\nplt.style.use('dark_background')\n\n\n\n","7914b4c0":"fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_zero_dose.h5ad'\nstr_data_inf = ' MCF7dose0 '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_zero_dose.h5ad'\nstr_data_inf = ' K562dose0 '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_zero_dose.h5ad'\nstr_data_inf = ' A549dose0 '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_HDACs.h5ad'\nstr_data_inf = ' MCF7_HDACs '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_HDACs.h5ad'\nstr_data_inf = ' A549_HDACs '\n#fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_HDACs.h5ad'\n#str_data_inf = ' K562_HDACs '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' K562_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' A549_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' MCF7_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_not_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' K562_not_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' K562_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' A549_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' MCF7_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex2_A549_all4_drugs_and_doses.h5ad'\nstr_data_inf = ' sciPlex2_A549 '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_JAK_Aurora Kinase_PARP_Histone Methyltransferase_and_vehicle.h5ad'\nstr_data_inf = ' sciPlex3_A549_JAK_AuroraKinase_PARP_Histone Methyltransferase '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex1_HEK293T.h5ad'\nstr_data_inf = ' sciPlex1_HEK293T '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_JAK_Aurora Kinase_PARP_Histone Methyltransferase_and_vehicle.h5ad'\nstr_data_inf = ' sciPlex3_MCF7_JAK_AuroraKinase_PARP_Histone Methyltransferase '\n","4fbb1f30":"fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_JAK_Aurora Kinase_PARP_Histone Methyltransferase_and_vehicle.h5ad'\nstr_data_inf = ' sciPlex3_MCF7_JAK_AuroraKinase_PARP_Histone Methyltransferase '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' MCF7_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' K562_HDACs+vehicle '\nfn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' A549_HDACs+vehicle '\n\nadata_orig = sc.read_h5ad(fn)\nadata_orig","e264cc2c":"adata_orig = adata_orig[:,:58347] # Cut some strange presence of mouse genes \nprint(adata_orig)\n","c9757ef8":"print(adata_orig)\nprint(adata_orig.var[:10])\n","76590f4d":"adata_orig.var_names_make_unique()\nadata_orig.var_names_make_unique()","691f8855":"vec_count_sum_orig = adata_orig.X.sum(axis = 1)\nvec_count_sum_orig = np.asarray(vec_count_sum_orig).ravel() \nprint(type(vec_count_sum_orig), vec_count_sum_orig.shape)\nplt.plot( np.sort(vec_count_sum_orig  ) )\nplt.xlabel('cell sorted')\nplt.ylabel('counts per cell')\nplt.title('Counts per cell')\nadata_orig.obs.count_orig = vec_count_sum_orig","f26dedc4":"adata = adata_orig\nprint(adata.shape)\nfor col in ['time_point', 'dose', 'vehicle', ]: # 'product_name', \n    print( col,  adata.obs[col].isnull().sum() )#  adata.obs[col].value_counts() )\n    print( adata.obs[col].value_counts() )\n\nprint()\nprint('On vehicle:')\nmask =     adata.obs['vehicle'] == True\nfor col in ['time_point', 'dose', ]: # 'product_name', \n    print( col,  adata[mask].obs[col].isnull().sum() )#  adata.obs[col].value_counts() )\n    print( adata[mask].obs[col].value_counts() )\nprint()\n\ns0 = adata.obs['product_name'].value_counts()\ns0 = s0.to_frame()\nmask = adata.obs['time_point'] == 24# .obs[col]\ns = adata[mask].obs['product_name'].value_counts()\ns.name = 'time_point 24'\ns0 = s0.join(s)\nmask = adata.obs['time_point'] == 72# .obs[col]\ns = adata[mask].obs['product_name'].value_counts()\ns.name = 'time_point 72'\ns0 = s0.join(s)\nfor dose in [10,100,1000,10000]:\n    mask = adata.obs['dose'] == dose# .obs[col]\n    s = adata[mask].obs['product_name'].value_counts()\n    s.name = 'dose '+str(dose)\n    s0 = s0.join(s)\nfor dose in [10,100,1000,10000]:\n    mask = adata.obs['time_point'] == 72# .obs[col]\n    #print(mask.sum())\n    mask = mask & (adata.obs['dose'] == dose)# .obs[col]\n    #print(mask.sum())\n    s = adata[mask].obs['product_name'].value_counts()\n    s.name = 'time_point 72 ' + 'dose '+str(dose)\n    s0 = s0.join(s)\nfor dose in [10,100,1000,10000]:\n    mask = adata.obs['time_point'] == 24# .obs[col]\n    #print(mask.sum())\n    mask = mask & (adata.obs['dose'] == dose)# .obs[col]\n    #print(mask.sum())\n    s = adata[mask].obs['product_name'].value_counts()\n    s.name = 'time_point 24 ' + 'dose '+str(dose)\n    s0 = s0.join(s)\n    \ns0","20df0333":"# standard preprocessing\n\nadata = adata_orig\n\nadata.var['mt'] = adata.var_names.str.startswith('MT-')  # annotate the group of mitochondrial genes as 'mt'\n\n#sv.pp.remove_duplicate_cells(adata)\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\nsc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'],\n             jitter=0.4, multi_panel=True)\n\nmedian_count = np.median(adata.obs['total_counts'])\nprint('Median total counts =',median_count)\nmin_count = np.max((median_count\/2,5000))\n\nmin_count = 500\nmax_count = 12000\n\nprint('min_count=',min_count,'max_count=',max_count)\n\nsc.pl.scatter(adata, x='total_counts', y='pct_counts_mt')\ninds1 = np.where((adata.obs['total_counts']>min_count) & (adata.obs['total_counts']<max_count))\ninds2 = np.where(adata.obs['pct_counts_mt']<50)\nprint(len(inds1[0]),'samples pass the count filter')\nprint(len(inds2[0]),' samples pass the mt filter')\nind_samples = np.intersect1d(inds1[0],inds2[0])\nprint('Samples selected',len(ind_samples))\nadata.uns['ind_samples'] = ind_samples\n\n# Here we cut cells. Filtering out those with counts too low or too big\nadata = adata[ind_samples,:]\n\nif False:\n    X = adata.X.T\n    with open(dataset_name+'_umi.txt','w') as f:\n        sample_names = list(adata.obs_names)\n        f.write('GENE\\t'+'\\t'.join(sample_names)+'\\n')\n        print('Number of genes = ',adata.X.shape[1])\n        for i in range(adata.X.shape[1]):\n            vals = [str(X[i,k]).replace('.0','') for k in range(X.shape[1])]\n            f.write(adata.var_names[i]+'\\t'+'\\t'.join(vals)+'\\n')\n    print('Saved.')\n    \n    \nsc.pp.normalize_total(adata, target_sum=np.median(adata.obs[\"total_counts\"]))\nsc.pp.log1p(adata)\nsc.pp.highly_variable_genes(adata,n_top_genes=10001,n_bins=20)\nind_genes = np.where(adata.var['highly_variable'])[0]\n\nadata = adata[:,ind_genes]\nsc.tl.pca(adata,n_comps=30)\nX_pca = adata.obsm['X_pca']\n\nadata_orig[ind_samples,ind_genes].var.shape\nXX2 = adata_orig[ind_samples,ind_genes].X.toarray()\nadata =  anndata.AnnData(XX2,  obs=adata_orig[ind_samples,ind_genes].obs.copy(), \n                     var=adata_orig[ind_samples,ind_genes].var.copy() ) #\nadata\n\n\nX_pca1 = X_pca.copy()\nX_pca.shape","15008e7c":"print(adata.X[:5,:5])","138f9bf9":"sc.pp.normalize_total(adata, target_sum=np.median(adata.obs[\"total_counts\"]))\nsc.pp.log1p(adata)\n","1e4e3e8a":"print(adata.X[:5,:5])","fca2b868":"sc.tl.pca(adata,n_comps=30)\nsc.pl.pca(adata)","d3c9faff":"sc.pl.pca(adata,color='dose')\nsc.pl.pca(adata,color='n.umi')\n","2c89d1be":"sc.pl.pca(adata,color = 'pct_counts_mt' )","8224bdfa":"import time\nt0=time.time()\ndrug = 'Vehicle'\nmask = adata.obs['product_name'] == drug\nadata_m = adata[mask]\nsc.pp.neighbors(adata_m)\nsc.tl.umap(adata_m)#,color='n.umi')\nsc.pl.umap(adata_m, color='n.umi')\nprint(time.time()-t0,'seconds passed')\n","511029af":"sc.pl.umap(adata_m, color='pct_counts_mt' )\n","545c35a7":"print(adata_m.obsm['X_umap'].shape)\nadata_m","aaeac2bb":"list_drugs = list(adata.obs['product_name'].value_counts().index)\ndrug = 'Vehicle'\n\ncol =  'n.umi' # 'dose'#  'n.umi' #\n\nn_subplots_x = 4\nfor drug in list_drugs:# [:2]:\n    mask = adata.obs['product_name'] == drug\n    mask = mask & ( adata.obs['time_point'] == 24) # .obs[col]\n    X = adata.obsm['X_pca'][mask.values,:]# adata.obsm.X_pca[mask.values,:]\n    \n    fig = plt.figure(figsize = (20,5) ); c = 0      \n    plt.suptitle( drug + ' ' +str( mask.sum() ) )\n    \n    for (i,j) in [(0,1),(1,2),(0,4),(2,3)]:\n        c += 1; fig.add_subplot(1,n_subplots_x,c)\n        sns.scatterplot(x = X[:,i], y = X[:,j], hue = np.log10(adata.obs[col][mask]) )\n        plt.xlabel('PCA'+str(i))\n        plt.ylabel('PCA'+str(j))\n    \n","c07265b2":"list_drugs = list(adata.obs['product_name'].value_counts().index)\ndrug = 'Vehicle'\n\ncol =  'n.umi' # 'dose'#  'n.umi' #\n\n#n_subplots_x = 4\nfor drug in list_drugs:# [:2]:\n    mask = adata.obs['product_name'] == drug\n    mask = mask & ( adata.obs['time_point'] == 24) # .obs[col]\n    #X = adata.obsm['X_pca'][mask.values,:]# adata.obsm.X_pca[mask.values,:]\n    adata_m = adata[mask]\n    sc.pp.neighbors(adata_m)\n    sc.tl.umap(adata_m)#,color='n.umi')\n    sc.pl.umap(adata_m, color='n.umi', title = drug+' '+'color by n.umi')\n    sc.pl.umap(adata_m, color='dose', title = drug+' '+'color by dose' )\n\n    \n","6c879cda":"# Statistics on loaded data","bc477367":"# Preprocessing and conversion from sparse adata.X to dense adata.X using only 10 000 top expressed genes ","24a19319":"# Load","7c22080d":"# ","7149909f":"# Drugs plots\n","3ff73459":"# Show some statistics ","68373daa":"# What is about ?\n\nData - single RNA-seq genes expressions data. \nMainly subparts extracted from very huge https:\/\/www.ncbi.nlm.nih.gov\/geo\/query\/acc.cgi?acc=GSE139944\nwhich does not fit into 16G memory.\n\nMain part of files stored in h5ad files and contain \"adata\" files from scanpy anndata. \nHere we give examples how to load these files. \nAnd show how to do some simple manipulations. \n\nIt is quite simple: \n\nadata.X - count matrix (might be sparse), where column names - genes names, rows - cells\n\nadata.obs - information on cells (same size as X.shape[0] ) - it is dataframe\n\nadata.var - information on genes (same size as X.shape[1] )  - it is dataframe\n\n---------------------------------\n\nK562,MCF7, A549 - names of well-known cell-lines \n\nHDACs - drugs of type \"Histone deacetalise inhibitors\" \n\n\nVersions:\n\n5: fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_A549_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' A549_HDACs+vehicle '\n\nVersion 4: same for fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_K562_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' K562_HDACs+vehicle '\n\nVersion 3: same for other data: fn = '\/kaggle\/input\/scrnaseq-exposed-to-multiple-compounds\/sciPlex3_MCF7_HDACs_and_vehicle.h5ad'\nstr_data_inf = ' MCF7_HDACs+vehicle '\n\nVersion 2: added umap plots by drugs\n\nVersion 1: load and some plot "}}