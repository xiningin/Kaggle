{"cell_type":{"fe429a6f":"code","d58bfd37":"code","14e2004e":"code","6691d385":"code","b248ac1b":"code","b7c60282":"code","01c01f61":"code","ee6fcdc8":"code","d9b5b832":"code","614b959a":"code","45f3ff3d":"code","1404fb17":"code","ff36e8db":"code","e14f3be2":"code","129a4f38":"code","56b9703a":"code","d0cae8df":"code","cfc324a1":"code","d4d039c6":"code","533a0b75":"code","052740c9":"code","6f7d8e06":"code","206d17a2":"code","1926261b":"code","87e5b0e1":"code","402b6e79":"code","aa5c7042":"markdown","21c7efcc":"markdown","c1f88569":"markdown","2d3bdbcc":"markdown","32601fa4":"markdown","64da87b0":"markdown","f0129a9e":"markdown","8aae7a11":"markdown","ed75ec33":"markdown","0ada9f80":"markdown","36a78b37":"markdown","8f9c7db4":"markdown","180a2500":"markdown","c8aeae58":"markdown","b8c19aeb":"markdown","723b9009":"markdown","c539d068":"markdown","21456330":"markdown"},"source":{"fe429a6f":"import random\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d58bfd37":"folder = '\/kaggle\/input\/m5-forecasting-uncertainty\/'\ncalendar = pd.read_csv(folder+'calendar.csv')\nprice = pd.read_csv(folder+'sell_prices.csv')\nvalidation = pd.read_csv(folder+'sales_train_validation.csv')","14e2004e":"d_cols = [col for col in validation.columns if col.startswith('d_')]\ncc = validation[d_cols].stack().reset_index(level=1)\ncc.columns = ['d','sales']\ncc['day_int'] = cc.d.apply(lambda day:day.split('_')[1]).astype('int')\ncc.sales = cc.sales.astype('int')\nvalidation = validation.drop(d_cols, axis=1).join(cc)","6691d385":"#le = preprocessing.LabelEncoder()\n\nprice.store_id = price.store_id.astype('category')\nprice.item_id = price.item_id.astype('category')\nprice.wm_yr_wk = pd.to_numeric(price.wm_yr_wk, downcast='unsigned')\nprice.sell_price = pd.to_numeric(price.sell_price, downcast='float')\nprice.info()","b248ac1b":"calendar = calendar.fillna('NotEvent')\n\ncalendar.date = calendar.date.astype('datetime64')\n\ncalendar.wm_yr_wk = pd.to_numeric(calendar.wm_yr_wk, downcast='unsigned')\ncalendar.weekday = calendar.weekday.astype('category')\ncalendar.wday = pd.to_numeric(calendar.wday, downcast='unsigned')\ncalendar.month = pd.to_numeric(calendar.month, downcast='unsigned')\ncalendar.year = pd.to_numeric(calendar.year, downcast='unsigned')\ncalendar.d = calendar.d.astype('category')\n\ncalendar.event_name_1 = calendar.event_name_1.astype('category')\ncalendar.event_type_1 = calendar.event_type_1.astype('category')\ncalendar.event_name_2 = calendar.event_name_2.astype('category')\ncalendar.event_type_2 = calendar.event_type_2.astype('category')\n\ncalendar.snap_CA = calendar.snap_CA.astype('bool')\ncalendar.snap_TX = calendar.snap_TX.astype('bool')\ncalendar.snap_WI = calendar.snap_WI.astype('bool')\n\ncalendar.info()","b7c60282":"validation.id = validation.id.astype('category')\nvalidation.item_id = validation.item_id.astype('category')\nvalidation.dept_id = validation.dept_id.astype('category')\nvalidation.cat_id = validation.cat_id.astype('category')\nvalidation.store_id = validation.store_id.astype('category')\nvalidation.state_id = validation.state_id.astype('category')\nvalidation.d = validation.d.astype('category')\n\nvalidation.sales = pd.to_numeric(validation.sales, downcast='unsigned')\nvalidation.day_int = pd.to_numeric(validation.day_int, downcast='unsigned')\n\nvalidation.info()","01c01f61":"validation = validation.merge(calendar, on='d', how='left').merge(price, on=['store_id','item_id','wm_yr_wk'], how='left')\ndel calendar, price\nvalidation.info()","ee6fcdc8":"meta_df = pd.DataFrame({})\n\nmeta_df = meta_df.append([['item_id','id for item(\u5546\u54c1id)','categorical(\u7c7b\u522b)','product(\u5546\u54c1\u4fe1\u606f)','high(\u9ad8)','']])\nmeta_df = meta_df.append([['dept_id','id for item dept(\u5546\u54c1\u90e8id)','categorical(\u7c7b\u522b)','product(\u5546\u54c1\u4fe1\u606f)','middle(\u4e2d)','']])\nmeta_df = meta_df.append([['cat_id','id for item category(\u5546\u54c1\u7c7b\u522bid)','categorical(\u7c7b\u522b)','product(\u5546\u54c1\u4fe1\u606f)','middle(\u4e2d)','']])\nmeta_df = meta_df.append([['sell_price','sell price for item(\u5546\u54c1\u552e\u4ef7)','numerical(\u6570\u503c)','product(\u5546\u54c1\u4fe1\u606f)','middle(\u4e2d)','']])\n\nmeta_df = meta_df.append([['store_id','id for store(\u95e8\u5e97id)','categorical(\u7c7b\u522b)','store(\u95e8\u5e97\u4fe1\u606f)','middle(\u4e2d)','']])\nmeta_df = meta_df.append([['state_id','id for state(\u95e8\u5e97\u6240\u5728\u5ddeid)','categorical(\u7c7b\u522b)','store(\u95e8\u5e97\u4fe1\u606f)','middle(\u4e2d)','']])\n\nmeta_df = meta_df.append([['weekday','day of week(\u661f\u671f\u51e0)','categorical(\u7c7b\u522b)','context(\u4e0a\u4e0b\u6587\u4fe1\u606f)','low(\u4f4e)','']])\nmeta_df = meta_df.append([['wday','day of week in number(\u661f\u671f\u51e0\uff0c\u6570\u5b57\u5f62\u5f0f)','categorical(\u7c7b\u522b)','context(\u4e0a\u4e0b\u6587\u4fe1\u606f)','middle(\u4e2d)','']])\nmeta_df = meta_df.append([['month','month(\u6708\u4efd)','categorical(\u7c7b\u522b)','context(\u4e0a\u4e0b\u6587\u4fe1\u606f)','middle(\u4e2d)','']])\nmeta_df = meta_df.append([['year','year(\u5e74\u4efd)','categorical(\u7c7b\u522b)','context(\u4e0a\u4e0b\u6587\u4fe1\u606f)','low(\u4f4e)','']])\n\nmeta_df.columns = ['name','desc','type','segment','expectation','conclusion']\nmeta_df.sort_values(by='expectation')","d9b5b832":"validation.sales.describe()","614b959a":"sns.distplot(validation.query('sales < 10').sales)","45f3ff3d":"print(\"Skewness: %f\" % validation.sales.skew())\nprint(\"Kurtosis: %f\" % validation.sales.kurt())","1404fb17":"plt.subplots(figsize=(25, 15))\n\n\nvar = 'sell_price'\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,1)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,2)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,3)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,4)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,5)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,6)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,7)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,8)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])\n\nitem_rand = random.choice(validation.item_id.unique().tolist())\nax = plt.subplot(3,3,9)\nax.set_title(item_rand)\nax.set_xlabel('sell price')\nax.set_ylabel('sales')\ntmp = validation.query('item_id == \"'+item_rand+'\"')\ndata = pd.concat([tmp.sales, tmp[var]], axis=1)\nplt.scatter(x=data[var], y=data['sales'])","ff36e8db":"store_rand = random.choice(validation.store_id.unique().tolist())\ntmp = validation.query('store_id == \"'+store_rand+'\"')\nf, ax = plt.subplots(figsize=(25, 6))\ntmp.groupby('item_id').mean()['sales'].sample(50).plot(kind='bar')\nax.set_title('item vs sales')\nax.set_xlabel('item')\nax.set_ylabel('sales')","e14f3be2":"store_rand = random.choice(validation.store_id.unique().tolist())\ntmp = validation.query('store_id == \"'+store_rand+'\"')\nf, ax = plt.subplots(figsize=(25, 6))\ntmp.groupby('month').mean()['sales'].plot(kind='bar')\nax.set_title('month vs sales')\nax.set_xlabel('month')\nax.set_ylabel('sales')","129a4f38":"store_rand = random.choice(validation.store_id.unique().tolist())\ntmp = validation.query('store_id == \"'+store_rand+'\"')\nf, ax = plt.subplots(figsize=(25, 6))\ntmp.groupby('weekday').mean()['sales'].plot(kind='bar')\nax.set_title('weekday vs sales')\nax.set_xlabel('weekday')\nax.set_ylabel('sales')","56b9703a":"tmp = validation.sample(100000)\nf, ax = plt.subplots(figsize=(12, 6))\ntmp.groupby('state_id').mean()['sales'].plot(kind='bar')\nax.set_title('state vs sales')\nax.set_xlabel('state')\nax.set_ylabel('sales')","d0cae8df":"for col in validation.columns:\n    if str(validation[col].dtype) == 'category':\n        validation[col] = validation[col].cat.codes\n\nvalidation.info()","cfc324a1":"corrmat = validation.sample(100000).corr()\nf, ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(corrmat, vmax=.8, square=True)","d4d039c6":"print('Top 5:', corrmat.nlargest(5, 'sales')['sales'].index.tolist())","533a0b75":"sample = validation.query('store_id==0 and item_id==0')[['date','sales']]\nsample = sample.set_index('date')","052740c9":"plt.subplots(figsize=(25, 5))\nplt.plot(sample.asfreq('w').index, sample.asfreq('w').values)\nplt.title('store_id==0 & item_id==0')","6f7d8e06":"plt.subplots(figsize=(25, 5))\nplt.plot(sample.asfreq('M').index, sample.asfreq('M').values)\nplt.plot(sample.asfreq('M').shift(7).index, sample.shift(7).asfreq('M').values)\nplt.legend(['sales','sales with lag 7'])\nplt.title('shift and lag')\nplt.show()","206d17a2":"plt.subplots(figsize=(25, 5))\n(sample.asfreq('M').sales - sample.asfreq('M').sales.shift()).plot()\n(sample.asfreq('M').sales - sample.asfreq('M').sales.shift(3)).plot()\n(sample.asfreq('M').sales - sample.asfreq('M').sales.shift(6)).plot()\nplt.legend(['Change with 1 month','Change with 3 month','Change with 6 month'])\nplt.title('change')\nplt.show()","1926261b":"plt.subplots(figsize=(25, 10))\nplt.title('rolling window')\n\nax = plt.subplot(3,1,1)\nrolling_sample = sample.sales.rolling('7D').mean()\nsample.sales.plot()\nrolling_sample.plot()\nplt.legend(['sales','sales with rolling 7 day'])\n\nax = plt.subplot(3,1,2)\nrolling_sample = sample.sales.rolling('30D').mean()\nsample.sales.plot()\nrolling_sample.plot()\nplt.legend(['sales','sales with rolling 30 day'])\n\nax = plt.subplot(3,1,3)\nrolling_sample = sample.sales.rolling('90D').mean()\nsample.sales.plot()\nrolling_sample.plot()\nplt.legend(['sales','sales with rolling 90 day'])","87e5b0e1":"plt.subplots(figsize=(15, 5))\nax = plt.subplot(1,1,1)\nplot_acf(sample.sales,lags=25,title=\"Autocorrelation\", ax=ax).show()","402b6e79":"plt.subplots(figsize=(15, 5))\nax = plt.subplot(1,1,1)\nplot_pacf(sample.sales,lags=25,title=\"Partial Autocorrelation\", ax=ax).show()","aa5c7042":"We see(\u53ef\u4ee5\u770b\u5230)\uff1a\n- min of sales is 0, that mean that there is no abnormal data.(\u6700\u5c0f\u503c\u4e3a0\uff0c\u610f\u5473\u7740\u6ca1\u6709\u5f02\u5e38\u7684\u8d1f\u503c)\n- max of sales is 763 and mean is 1.126.(\u5e73\u5747\u503c\u4e3a1.126\uff0c\u6700\u5927\u503c\u4e3a763\uff0c\u8bf4\u660e\u5b58\u5728\u6781\u503c\uff0c\u8fd9\u5728\u9500\u552e\u4e2d\u4e5f\u8f83\u4e3a\u5e38\u89c1)","21c7efcc":"## Data structure arrangement(\u6570\u636e\u7ed3\u6784\u6574\u7406)","c1f88569":"### Autocorrelation(\u81ea\u76f8\u5173)","2d3bdbcc":"### Other kernel abount this competition\n\n- [M5 Forecasting - Accuracy Simple Baseline with Prophet, LB:0.87287](https:\/\/www.kaggle.com\/holoong9291\/simple-baseline-with-prophet-0-87287-en)\n- [M5 Forecasting - Accuracy EDA](https:\/\/www.kaggle.com\/holoong9291\/eda-for-m5-en)\n\nPlease upvote me, I am really need a bronze, thanks guys, have a nice day.","32601fa4":"See something weird here, there seems to be no obvious trend showing that the lower the price, the more the sales. Instead, it can be seen that some of the prices are higher and the sales are also higher. Therefore, there may be market supply-demand relationship regulating the price here, just guess, what do you think?(\u53ef\u4ee5\u770b\u5230\uff0c\u8ddf\u60f3\u8c61\u4e2d\u4e0d\u540c\u7684\u662f\uff0c\u4f3c\u4e4e\u6ca1\u6709\u660e\u663e\u7684\u8d8b\u52bf\u663e\u793a\u51fa\u4ef7\u683c\u8d8a\u4f4e\u9500\u91cf\u8d8a\u591a\uff0c\u53cd\u5012\u662f\u80fd\u770b\u5230\u90e8\u5206\u4ef7\u683c\u9ad8\u4e86\u9500\u552e\u4e5f\u9ad8\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ef\u80fd\u5b58\u5728\u5e02\u573a\u7684\u4f9b\u9700\u5173\u7cfb\u5bf9\u4ef7\u683c\u7684\u8c03\u8282)","64da87b0":"We see(\u53ef\u4ee5\u770b\u5230)\uff1a\n- item_id - (\u5546\u54c1\u4e0e\u9500\u552e\u7684\u5173\u7cfb\u662f\u660e\u663e\u7684\uff0c\u8fd9\u4e5f\u7b26\u5408\u4e1a\u52a1\u5e38\u8bc6)\n- month - (\u6708\u4efd\u4e0e\u9500\u91cf\u7684\u5f71\u54cd\u63a5\u8fd1\u4e8e0)\n- wday - (\u661f\u671f\u51e0\u4e0e\u9500\u91cf\u7684\u5f71\u54cd\u5927\u4e8e\u6708\u4efd)\n- state_id - (\u5dde\u4e0e\u9500\u91cf\u4e4b\u95f4\u4e5f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd)\n\n### So...\n\nitem_id >> wday > state_id > item_id\n\n## Objective analysis(\u5ba2\u89c2\u5206\u6790)","f0129a9e":"### Partial Autocorrelation(\u504f\u81ea\u76f8\u5173)","8aae7a11":"## Relation between top 5 and sales(Top5\u4e0e\u76ee\u6807\u7684\u5173\u7cfb)\n\n### Numerical in top 5","ed75ec33":"### Shift and lag(\u5ef6\u8fdf\u6570\u636e\u5bf9\u6bd4)","0ada9f80":"### Change(\u9500\u552e\u989d\u7684\u53d8\u5316)","36a78b37":"## TODO\n\n1. White noise.(\u767d\u566a\u58f0\u5904\u7406)\n\n## The End\n\nIf you like it, please upvote me, and I really need a bronze, and please comment if you have some advise or find my error in this kernel. Let's have fun.(\u5982\u679c\u4f60\u559c\u6b22\uff0c\u8bf7upvote\uff0c\u5982\u679c\u4f60\u6709\u4efb\u4f55\u5efa\u8bae\u6216\u8005\u53d1\u73b0\u9519\u8bef\uff0c\u9ebb\u70e6\u518d\u8bc4\u8bba\u533a\u6307\u6b63\uff0c\u6211\u4f1a\u5c3d\u5feb\u5b8c\u5584\u548c\u4fee\u590d\uff0c\u8c22\u8c22)","8f9c7db4":"## Dig from time-series(\u6316\u6398\u65f6\u5e8f\u7279\u5f81)","180a2500":"\n### Categorical in top 5","c8aeae58":"Top 5 in subjective analysis(\u4e3b\u89c2\u5206\u6790\u7684\u6700\u91cd\u8981\u7279\u5f81Top5):\n- item_id\n- sell_price\n- month\n- wday\n- state_id","b8c19aeb":"### Rolling window(\u6ed1\u7a97\u6570\u636e)","723b9009":"## Subjective analysis(\u4e3b\u89c2\u5206\u6790)","c539d068":"# EDA(\u6570\u636e\u63a2\u7d22\u6027\u5206\u6790)\n\nCompetition data files introduction(\u7ade\u8d5b\u6570\u636e\u6587\u4ef6\u4ecb\u7ecd)\uff1a\n- calendar.csv - Contains information about the dates on which the products are sold.(\u63d0\u4f9b\u5546\u54c1\u9500\u552e\u7684\u65e5\u671f\u4fe1\u606f)\n- sales_train_validation.csv - Contains the historical daily unit sales data per product and store \\[d_1 - d_1913\\](\u9a8c\u8bc1\u6570\u636e\u96c6\uff0c\u5305\u542b\u5546\u54c1\u4fe1\u606f\u3001\u95e8\u5e97\u4fe1\u606f\u3001\u5bf9\u5e94\u6bcf\u5929\u7684\u9500\u552e\u989d)\n- sample_submission.csv - The correct format for submissions. Reference the Evaluation tab for more info.(\u63d0\u4ea4\u6587\u4ef6\u6837\u672c\u6587\u4ef6)\n- sell_prices.csv - Contains information about the price of the products sold per store and date.(\u95e8\u5e97\u7684\u5546\u54c1\u5728\u67d0\u4e00\u5929\u7684\u4ef7\u683c\u4fe1\u606f)\n- sales_train_evaluation.csv - Available once month before competition deadline. Will include sales \\[d_1 - d_1941\\](\u8bc4\u4ef7\u6570\u636e\u96c6\uff0c\u5728\u7ade\u8d5b\u7ed3\u675f\u524d\u4e00\u4e2a\u6708\u63d0\u4f9b\uff0c\u683c\u5f0f\u4e0e\u9a8c\u8bc1\u6570\u636e\u96c6\u4e00\u81f4)\n\nTarget(\u7ade\u8d5b\u76ee\u6807)\uff1a predicting item sales at stores in various locations for two 28-day time periods.(\u5bf9\u4e24\u4e2a28\u5929\u7684\u65f6\u95f4\u6bb5\u5185\u7684\u95e8\u5e97&\u5546\u54c1\u7684\u9500\u552e\u989d\u8fdb\u884c\u9884\u6d4b)\n\nEvaluation(\u8bc4\u4ef7\u6307\u6807)\uff1aRMSSE.(\u52a0\u6743\u7684\u5747\u65b9\u6839\u6807\u51c6\u8bef\u5dee)\n\nIf you like it, please upvote me, and I really need a bronze, and please comment if you have some advise or find my error in this kernel. Let's have fun.(\u5982\u679c\u4f60\u559c\u6b22\uff0c\u8bf7upvote\uff0c\u5982\u679c\u4f60\u6709\u4efb\u4f55\u5efa\u8bae\u6216\u8005\u53d1\u73b0\u9519\u8bef\uff0c\u9ebb\u70e6\u518d\u8bc4\u8bba\u533a\u6307\u6b63\uff0c\u6211\u4f1a\u5c3d\u5feb\u5b8c\u5584\u548c\u4fee\u590d\uff0c\u8c22\u8c22)","21456330":"## From the target - sales(\u4ece\u76ee\u6807\u7279\u5f81\u5f00\u59cb\u5206\u6790)"}}