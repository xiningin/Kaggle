{"cell_type":{"68afd6e8":"code","d9e367ab":"code","60f4a441":"code","85d0d8ea":"code","9cbf1850":"code","b736d435":"code","b65f77f5":"code","0f8cd31c":"code","6f9c81db":"code","8c34b915":"code","1139b4f6":"code","1a11a0e3":"code","d5dbe27c":"code","f7506e07":"code","236bdc2c":"code","a2b7c603":"code","851e957a":"code","1fd515f8":"code","6a4c155c":"code","20f69449":"code","f85da7a2":"code","beaa35f1":"markdown"},"source":{"68afd6e8":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","d9e367ab":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")","60f4a441":"train.head()","85d0d8ea":"Name0=train['target'].unique()\nName=sorted(Name0)\nprint(Name)","9cbf1850":"N=[]\nfor i in range(9):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","b736d435":"target = train['target'].map(normal_mapping)\ndata = train.drop(['target','id'],axis=1)","b65f77f5":"columns=data.columns.to_list()\nprint(columns)","0f8cd31c":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n\n        'lambda': trial.suggest_uniform('lambda',0.001,0.1),\n        'alpha': trial.suggest_uniform('alpha',0.1,0.2),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.3,1.0),\n        'subsample': trial.suggest_uniform('subsample', 0.4,0.8),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.05,0.08),\n        'n_estimators': trial.suggest_int('n_estimators', 1000,4000),\n        'max_depth': trial.suggest_int('max_depth', 3,6),\n        'random_state': trial.suggest_int('random_state', 400,1000),\n        'min_child_weight': trial.suggest_int('min_child_weight', 10,100),\n        \n        'objective': trial.suggest_categorical('objective',['reg:logistic']), \n        'tree_method': trial.suggest_categorical('tree_method',['hist']),  # 'gpu_hist','hist'       \n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","6f9c81db":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=8)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","8c34b915":"study.trials_dataframe()","1139b4f6":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","1a11a0e3":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","d5dbe27c":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","f7506e07":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['lambda','learning_rate'])","236bdc2c":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","a2b7c603":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","851e957a":"Best_trial= study.best_trial.params","1fd515f8":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")\nprint(sample.shape)","6a4c155c":"preds = np.zeros((sample.shape[0],sample.shape[1]-1))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = xgb.XGBClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict_proba(test[columns])\/kf.n_splits\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","20f69449":"print(preds.shape)\nprint(preds[0])","f85da7a2":"subm = sample\nsubm[ Name ] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","beaa35f1":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna\n* thanks to: \nhttps:\/\/www.kaggle.com\/miklgr500\/optuna-xgbclassifier-parameters-optimize\n"}}