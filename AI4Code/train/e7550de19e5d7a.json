{"cell_type":{"cc1064fc":"code","c514e4c2":"code","18e5139f":"code","1c30ce74":"code","4b94f48b":"code","89a31180":"code","ad6b1310":"code","fa25e135":"code","c1dba53b":"code","2ec9c763":"code","07731d1a":"code","03f822aa":"code","66ed6e8c":"code","88ec34e3":"code","7fb87f63":"code","d1fdfc3e":"code","93b17030":"code","51d13624":"code","f318037c":"code","f9fe688b":"code","2b075bcb":"code","6e4723be":"code","626f1721":"code","d1257ebb":"code","0dc5fc91":"code","e8eee1d9":"code","66ab665f":"code","c238c0fb":"code","fa3954be":"code","4f7a844c":"code","faff7b13":"code","e3aea655":"code","7834c7d1":"code","ab7de23b":"code","2fa6423c":"code","998a3f6a":"code","7fcddcac":"code","8aade57f":"code","86e93020":"code","df9d0e24":"code","5c33ebb6":"code","5bf8577d":"code","26591dcb":"code","73c39b60":"code","f45867f2":"code","451af3b1":"code","26225c1c":"code","aad3aace":"code","19af0668":"code","fc2b2a55":"code","c5f6953c":"code","e79fb011":"code","7adfff2c":"code","3ded688b":"code","c34aeb2c":"code","0b10fab0":"code","5d4eef0d":"code","052f25a2":"code","6fa0adb2":"code","d2b54dee":"code","5e21369e":"code","99aea6b1":"code","479288ac":"code","03bd8e54":"code","09ff705a":"code","92911851":"code","27ebcf31":"code","4be8f76c":"code","f9c96279":"code","4682fe0d":"code","afc78dce":"code","a70c26de":"code","d5350714":"code","1528aa67":"code","936cddb3":"code","92d03435":"code","3da3c93f":"code","79551eb2":"code","a5b48ceb":"code","c48f7115":"code","0b3d1de8":"code","f50accdf":"markdown","829f2610":"markdown","f0484031":"markdown","b38cce19":"markdown","2a7e5888":"markdown","35b98f93":"markdown","329c0a9a":"markdown","4549640b":"markdown","920678aa":"markdown","7626a98f":"markdown","2a66b68b":"markdown","3169a103":"markdown","d069af1d":"markdown","cbf60c73":"markdown"},"source":{"cc1064fc":"from IPython.display import Image\nImage(filename='..\/input\/heart-image\/images.jpg', height='100',width='700')","c514e4c2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as mn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport pandas_profiling\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score,f1_score, accuracy_score,classification_report \nfrom sklearn.feature_selection import RFE\nimport warnings\nwarnings.filterwarnings('ignore')","18e5139f":"data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","1c30ce74":"data.head()","4b94f48b":"data.shape","89a31180":"data.info()","ad6b1310":"data.describe()","fa25e135":"mn.matrix(data)","c1dba53b":"100*(data.isnull().sum()\/(len(data)))","2ec9c763":"data.info()","07731d1a":"data.head()","03f822aa":"data.profile_report()","66ed6e8c":"data.head()","88ec34e3":"data['age'] = data['age'].astype('int64')\ndata['platelets'] = data['platelets'].astype('int64')","7fb87f63":"data.diabetes.value_counts()","d1fdfc3e":"sns.heatmap(data.corr(),cmap='Wistia',annot=True)","93b17030":"scaler = StandardScaler()\nvar1 = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_sodium','time']\ndata[var1] = scaler.fit_transform(data[var1])","51d13624":"data.head()","f318037c":"X = data.iloc[:,:-1]\ny = data.iloc[:,-1]","f9fe688b":"X_train,X_test,y_train,y_test = train_test_split(X,y,train_size = 0.7,random_state = 20)","2b075bcb":"X_train.head()","6e4723be":"X_train.shape","626f1721":"X_test.shape","d1257ebb":"log_reg1 = LogisticRegression()\nlog_reg1.fit(X_train,y_train)","0dc5fc91":"prediction1 = log_reg1.predict(X_test)","e8eee1d9":"prediction1","66ab665f":"confusion_matrix(y_test,prediction1)","c238c0fb":"recall_score(y_test,prediction1)","fa3954be":"precision_score(y_test,prediction1)","4f7a844c":"accuracy_score(y_test,prediction1)","faff7b13":"X_train_lm = sm.add_constant(X_train)","e3aea655":"log_reg2 = sm.GLM(y_train,X_train_lm).fit()","7834c7d1":"log_reg2.summary()","ab7de23b":"# Dropping 'smoking' as it has a very high p value\nX_train_drop_smoking = X_train.drop(['smoking'], axis = 1)","2fa6423c":"X_train_lm = sm.add_constant(X_train_drop_smoking)","998a3f6a":"log_reg3 = sm.GLM(y_train,X_train_lm).fit()","7fcddcac":"log_reg3.summary()","8aade57f":"rfe = RFE(log_reg1, 10)             # running RFE with 13 variables as output\nrfe = rfe.fit(X_train, y_train)","86e93020":"rfe.support_","df9d0e24":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","5c33ebb6":"col = X_train.columns[rfe.support_]","5bf8577d":"X_train_2 = X_train.drop(['creatinine_phosphokinase','smoking'],1)","26591dcb":"X_train_lm = sm.add_constant(X_train_2)","73c39b60":"log_reg4 = sm.GLM(y_train,X_train_2).fit()","f45867f2":"log_reg4.summary()","451af3b1":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","26225c1c":"# Model 5\nlog_reg5 = LogisticRegression()","aad3aace":"log_reg5.fit(X_train_2,y_train)","19af0668":"# Dropping 'creatinine_phosphokinase' and 'smoking' from X_test as per RFE\nX_test_1 = X_test.drop(['creatinine_phosphokinase','smoking'],1)\nprediction2 = log_reg5.predict(X_test_1)","fc2b2a55":"# Precision score \nprecision_score(y_test,prediction2)","c5f6953c":"# Recall score\nrecall_score(y_test,prediction2)","e79fb011":"# F1 score\nf1_score(y_test,prediction2)","7adfff2c":"#------------Importing the Decision Tree Library---------------------\nfrom sklearn.tree import DecisionTreeClassifier","3ded688b":"# Lets fit the decision tree\ndt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","c34aeb2c":"# Importing required packages for visualization\nfrom IPython.display import Image  \nfrom six import StringIO  \nfrom sklearn.tree import export_graphviz\n!pip install pydotplus\nimport pydotplus, graphviz\n\n","0b10fab0":"# plotting tree with max_depth=3\ndot_data = StringIO()  \n\nexport_graphviz(dt, out_file=dot_data, filled=True, rounded=True,\n                feature_names=X.columns, \n                class_names=['No Death', \"Death\"])\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","5d4eef0d":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","052f25a2":"print(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","6fa0adb2":"print(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","d2b54dee":"print(precision_score(y_train, y_train_pred))","5e21369e":"print(precision_score(y_test, y_test_pred))","99aea6b1":"print(f1_score(y_train, y_train_pred))","479288ac":"print(f1_score(y_test, y_test_pred))","03bd8e54":"print(recall_score(y_train, y_train_pred))","09ff705a":"print(recall_score(y_test, y_test_pred))","92911851":"# Function to plot the decision tree\ndef get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True,rounded=True,\n                    feature_names=X.columns, \n                    class_names=['Death', \"No Death\"])\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    return graph","27ebcf31":"# Function to evaluate the model\ndef evaluate_model(dt_classifier):\n    print(\"Train Accuracy :\", accuracy_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train Confusion Matrix:\")\n    print(confusion_matrix(y_train, dt_classifier.predict(X_train)))\n    print(\"-\"*50)\n    print(\"Test Accuracy :\", accuracy_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Test Confusion Matrix:\")\n    print(confusion_matrix(y_test, dt_classifier.predict(X_test)))","4be8f76c":"dt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","f9c96279":"gph = get_dt_graph(dt_default)\nImage(gph.create_png())","4682fe0d":"evaluate_model(dt_default)","afc78dce":"dt = DecisionTreeClassifier(random_state=42)","a70c26de":"from sklearn.model_selection import GridSearchCV","d5350714":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [2, 3, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'criterion': [\"gini\", \"entropy\"]\n}","1528aa67":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","936cddb3":"%%time\ngrid_search.fit(X_train, y_train)","92d03435":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","3da3c93f":"grid_search.best_estimator_","79551eb2":"dt_best = grid_search.best_estimator_","a5b48ceb":"evaluate_model(dt_best)","c48f7115":"print(classification_report(y_test, dt_best.predict(X_test)))","0b3d1de8":"gph = get_dt_graph(dt_best)\nImage(gph.create_png())","f50accdf":"### Model Building","829f2610":"# Contents\n- Data Preperation\n- EDA\n- Data Scaling\n- Spliting the data into train and test\n- Modelling\n- Prediction\n- Evaluation\n- Submission","f0484031":"### Spliting the data into train and test datasets","b38cce19":"### Hyper-parameter tuning","2a7e5888":"### We can see that the decisionn tree model has overfitted the data as it is not performing well for the test dataset","35b98f93":"# Cardio Vescular Disease Prediction","329c0a9a":"### Lets use Decision Trees to predict the class","4549640b":"### After evaluating the metrics we can see that decision trees were better then Logistic regression","920678aa":"### Fortunately this dataset has no NAN values","7626a98f":"### Standardizing some of the features","2a66b68b":"### Without setting any hyperparameter","3169a103":"#### The above is a fully grown tree when max-depth is not defined","d069af1d":"### Evaluating the model performance","cbf60c73":"### We can see that all metrics have dropped after dropping 'creatinine_phosphokinase' and 'smoking' feature"}}