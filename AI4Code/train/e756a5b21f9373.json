{"cell_type":{"4f230121":"code","fd03477e":"code","184453fd":"code","35ea51dd":"code","0354c9ed":"code","e31ad19f":"code","d8ee9e3a":"code","f99baa2e":"code","44f5a64a":"code","77f2a5ca":"code","cff59fab":"code","ca879bfa":"code","a11da6f5":"code","3d930f6e":"code","1e201656":"code","ea62b60f":"code","cdaff1a9":"code","ba50fc31":"code","d839e03b":"code","d1dc6aa7":"code","cfd84097":"code","38260781":"code","98a69374":"code","3aec4963":"code","fc5799b1":"code","7c0b4963":"code","65ab301b":"code","9aaaced5":"code","058cf6cc":"code","43132db3":"code","1980655b":"code","0db787a3":"code","7be88352":"code","12bb9c89":"code","cb9084ae":"code","3696c2aa":"code","fe19e130":"code","d7af6d9e":"code","d6bf2462":"code","bc72c4c1":"code","2615033e":"code","4d8b25fe":"code","6d31f58f":"code","912768d5":"code","b523fc53":"code","e80a76ae":"code","1736b0a9":"code","064ce93a":"code","a1c47623":"code","14d71e49":"code","9d995ebf":"code","085cabf3":"code","3499f0c6":"code","c2a7daae":"code","64eb7637":"code","8ce5aa37":"code","3a750e51":"code","d743b005":"code","3001631b":"code","b3a79389":"code","e476b6c7":"code","12990070":"code","b41365fd":"code","5536f802":"code","09d70780":"code","cf426ab9":"code","5d2550c5":"code","b3c7f59a":"code","677c5ddd":"code","21c81d69":"code","74cfbeaa":"code","cbd970db":"code","6b5bc595":"code","714fa380":"code","9ef7bfa7":"code","c245d3fe":"code","47caae38":"code","357d5d9e":"code","dc306a23":"code","9d1a95e1":"code","23ae74dd":"code","33858a7f":"code","62935987":"code","b3f12ca4":"code","52af8761":"code","2eeb007a":"markdown","9852b57d":"markdown","e33db400":"markdown","1ab13297":"markdown","ae1d84fc":"markdown","a30f5949":"markdown","ac79f74a":"markdown","b199a2e8":"markdown","8cf25846":"markdown","f4ef6ade":"markdown","3f1ae2f1":"markdown","57c86c2f":"markdown","0e1f3113":"markdown","5b154fc9":"markdown","28f8bc2b":"markdown","625a8cf9":"markdown","e725dfe6":"markdown","117731db":"markdown","d60c4219":"markdown","5bbc3fd8":"markdown","6271fc86":"markdown","a27e98a1":"markdown"},"source":{"4f230121":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport ast\nfrom collections import defaultdict\n\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set() # Use seaborn default style\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fd03477e":"ranking_df = pd.read_csv('..\/input\/boardgamegeek-reviews\/2019-05-02.csv')\nranking_df.head()","184453fd":"review_df = pd.read_csv('..\/input\/boardgamegeek-reviews\/bgg-13m-reviews.csv', index_col=0)\nreview_df.head()","35ea51dd":"detail_df = pd.read_csv('\/kaggle\/input\/boardgamegeek-reviews\/games_detailed_info.csv', index_col=0)\ndetail_df.iloc[:, :20].head()","0354c9ed":"detail_df.iloc[:, 20:40].head()","e31ad19f":"detail_df.iloc[:, 40:].head()","d8ee9e3a":"ranking_df.shape","f99baa2e":"ranking_df.dtypes","44f5a64a":"ranking_df.describe()","77f2a5ca":"ranking_df.isna().sum()","cff59fab":"ranking_df['ID'].value_counts().head()","ca879bfa":"ranking_df['Year'].plot(kind='hist')\nplt.show()","a11da6f5":"ranking_df['Average'].plot(kind='hist')\nplt.show()","3d930f6e":"ranking_df['Bayes average'].plot(kind='hist')\nplt.show()","1e201656":"ranking_df['Users rated'].plot(kind='hist')\nplt.show()","ea62b60f":"review_df.shape","cdaff1a9":"review_df.dtypes","ba50fc31":"review_df.describe()","d839e03b":"review_df.isna().sum()","d1dc6aa7":"review_df['rating'].plot(kind='hist')\nplt.show()","cfd84097":"review_df['ID'].value_counts().head()","38260781":"review_df['comment'].isna().sum() \/ review_df.shape[0] * 100","98a69374":"detail_df.shape","3aec4963":"detail_df.dtypes","fc5799b1":"# Describe category features\ndetail_df.iloc[:, :16].describe()","7c0b4963":"# Describe all other features\ndetail_df.iloc[:, 16:].describe()","65ab301b":"detail_df.isna().sum()","9aaaced5":"detail_df['Board Game Rank'].value_counts().head()","058cf6cc":"# not_ranked_ids = detail_df[detail_df['Board Game Rank'] == 'Not Ranked']['id']\n# ranking_df.loc[ranking_df['ID'].isin(not_ranked_ids)]","43132db3":"detail_df['Board Game Rank'] = detail_df['Board Game Rank'].replace('Not Ranked', np.nan) \\\n                                                            .astype('float')","1980655b":"categories = detail_df.columns[:16]\n\nfor category in categories:\n    num_unique = detail_df[category].nunique()\n    count = detail_df[category].count()\n    print('Category:', category, '\\n',\n          'Number of games:', count, '\\n',\n          'Has all unique values?', num_unique == count, '\\n',\n          'First game id:', detail_df.loc[detail_df[category] > 0]['id'].min())","0db787a3":"detail_df['average'].plot(kind='hist')\nplt.show()","7be88352":"detail_df['averageweight'].plot(kind='hist')\nplt.show()","12bb9c89":"detail_df['bayesaverage'].plot(kind='hist')\nplt.show()","cb9084ae":"detail_df['id'].plot(kind='hist')\nplt.show()","3696c2aa":"for col in detail_df.columns[33:43]:\n    detail_df[col].plot(kind='hist')\n    plt.title(col)\n    plt.show()","fe19e130":"detail_df['stddev'].plot(kind='hist')\nplt.show()","d7af6d9e":"detail_df['trading'].plot(kind='hist')\nplt.show()","d6bf2462":"for col in detail_df.columns[-4:]:\n    detail_df[col].plot(kind='hist')\n    plt.title(col)\n    plt.show()","bc72c4c1":"ranking_sub_df = ranking_df[['ID', 'Year', 'Rank', 'Average', 'Bayes average', 'Users rated', 'Thumbnail']]\nranking_sub_df.head()","2615033e":"detail_sub_df = detail_df[['id', 'yearpublished', 'Board Game Rank', 'average', 'bayesaverage', 'usersrated', 'thumbnail']]\ndetail_sub_df.head()","4d8b25fe":"joined_df = ranking_sub_df.merge(detail_sub_df, left_on='ID', right_on='id', how='left')\njoined_df.head(20)","6d31f58f":"detail_df['suggested_language_dependence'].iloc[1]","912768d5":"detail_df['suggested_num_players'].iloc[1]","b523fc53":"detail_df['suggested_playerage'].sample(1).iloc[0]","e80a76ae":"# keys = set()\n\n# for string in detail_df['suggested_language_dependence']:\n#     if not type(string) is float:\n#         lst = ast.literal_eval(string.replace('OrderedDict', ''))\n#         for nested_lst in lst:\n            \n#             for key, value in nested_lst:\n#                 keys.add(key)\n#     elif not np.isnan(string):\n#         # Not null, print value\n#         print(string)\n        \n# keys","1736b0a9":"# import ast\n# import collections\n# import re\n\n# str_list_SLD = detail_df['suggested_language_dependence'].iloc[1]\n# #values = re.search(r\"OrderedDict\\((.*)\\)\",str_list_SLD).group(1)\n# #mydict = collections.OrderedDict(ast.literal_eval(values))\n# def convert_ordered_dict(str_list):\n#     str_list = str_list.replace(\"OrderedDict\",\"\")\n#     return ast.literal_eval(str_list)\n\n# list_SLD = convert_ordered_dict(str_list_SLD)\n\n# for list_of_tup in list_SLD:\n#     for tup in list_of_tup:\n#         print(tup)","064ce93a":"# 1 : No necessary in-game text\n# 2 : Some necessary text - easily memorized or small crib sheet\n# 3 : Moderate in-game text - needs crib sheet or paste ups\n# 4 : Extensive use of text - massive conversion needed to be playable\n# 5 : Unplayable in another language\n\n# sld_df = pd.DataFrame()\n\n# sld_df[\"id\"] = detail_df[\"id\"]\n\n# str_list_SLD = detail_df['suggested_language_dependence']\n\n# def convert_ordered_dict(str_list):\n#     str_list = str_list.replace(\"OrderedDict\",\"\")\n#     return ast.literal_eval(str_list)\n\n# def get_suggested_language_dependence_df(str_list_SLD):\n#     ratings_df = pd.DataFrame(columns=[\"1\",\"2\",\"3\",\"4\",\"5\"])\n#     for items in str_list_SLD:\n#         if isinstance(items,str):\n#             list_items = convert_ordered_dict(items)\n#             new_dict = {}\n#             for i,lists in enumerate(list_items):\n#                 new_dict[str(i+1)] = lists[2][1] \n#             ratings_df = ratings_df.append(new_dict, ignore_index=True)\n#         else:\n#             none_dict = {\"1\":None,\"2\":None,\"3\":None,\"4\":None,\"5\":None}\n#             ratings_df = ratings_df.append(none_dict, ignore_index=True)\n    \n#     return ratings_df\n\n# ratings_df = get_suggested_language_dependence_df(detail_df['suggested_language_dependence'])","a1c47623":"# sld_df = sld_df.merge(ratings_df,left_index=True,right_index=True)\n# sld_df","14d71e49":"# str_list_SNP = detail_df['suggested_num_players']\n\n# def get_suggested_num_players(str_list_SNP):\n#     iter_count = 0\n#     snp_df = pd.DataFrame()\n    \n#     for items in str_list_SNP:\n#         list_SNP = convert_ordered_dict(items)\n#         if isinstance(list_SNP[0],list):\n#             for tup in list_SNP:\n#                 new_dict = {}\n#                 num_players = tup[0][1]\n#                 result_list = tup[1][1]\n#                 best_votes = result_list[0][1][1]\n#                 rec_votes = result_list[1][1][1]\n#                 not_rec_votes = result_list[2][1][1]\n#                 new_dict[\"id\"] = detail_df.iloc[iter_count][\"id\"]\n#                 new_dict[\"num_players\"] = num_players\n#                 new_dict[\"best_votes\"] = best_votes\n#                 new_dict[\"recommended_votes\"] = rec_votes\n#                 new_dict[\"not_recommended_votes\"]= not_rec_votes\n#                 snp_df = snp_df.append(new_dict, ignore_index=True)\n#         else:\n#             if len(list_SNP)==2:\n#                 new_dict = {}\n#                 new_dict[\"id\"] = detail_df.iloc[iter_count][\"id\"]\n#                 new_dict[\"num_players\"] = list_SNP[0][1]\n#                 new_dict[\"best_votes\"] = list_SNP[1][1][0][1][1]\n#                 new_dict[\"recommended_votes\"] = list_SNP[1][1][1][1][1]\n#                 new_dict[\"not_recommended_votes\"]= list_SNP[1][1][2][1][1]\n#                 snp_df = snp_df.append(new_dict, ignore_index=True)\n#             else:\n#                 new_dict = {}\n#                 new_dict[\"id\"] = detail_df.iloc[iter_count][\"id\"]\n#                 new_dict[\"num_players\"] = list_SNP[0][1]\n#                 new_dict[\"best_votes\"] = None\n#                 new_dict[\"recommended_votes\"] = None\n#                 new_dict[\"not_recommended_votes\"]= None\n#                 snp_df = snp_df.append(new_dict, ignore_index=True)\n#         break\n#         iter_count += 1\n#     return snp_df\n            \n# snp_df = get_suggested_num_players(str_list_SNP)","9d995ebf":"# str_list = detail_df[detail_df[\"id\"]==13][\"suggested_num_players\"]\n\n# print(type(str_list))\n\n# snp_df[snp_df[\"id\"]==13], l_list","085cabf3":"# detail_df.iloc[0][\"suggested_num_players\"],detail_df.iloc[0][\"id\"],","3499f0c6":"# test2 = detail_df.iloc[5038][\"suggested_num_players\"]\n# list_test = convert_ordered_dict(test2)\n# list_test","c2a7daae":"# detail_df.iloc[5038]","64eb7637":"# detail_df['suggested_playerage'].iloc[1]","8ce5aa37":"# Flatten ordered dictionaries into dataframe","3a750e51":"corr = detail_df.iloc[:, 16:].corr()\ncorr = corr.dropna(how='all', axis=1).dropna(how='all', axis=0).round(2)\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nplt.subplots(figsize=(20,20))\nsns.heatmap(corr, cmap='RdYlGn', annot=True, linewidths=.5)\nplt.title('Correlation plot without genre variables')\nplt.show()","d743b005":"corr = detail_df[detail_df.columns.difference(['Accessory Rank', \"Amiga Rank\", \"Arcade Rank\", \"Atari ST Rank\",\"Commodore 64 Rank\",\n                                               \"RPG Item Rank\", \"Video Game Rank\", \"median\", \"thumbnail\", \"id\", \n                                               \"image\"])] \\\n       .corr()\nplt.figure(figsize=(30,20))\nsns.heatmap(corr, annot=True, cmap='RdYlGn')\nplt.title('Correlation plot with genre variables that has >1 board game (excluding median, thumbnail, id and image)')\nplt.show()","3001631b":"sns.pairplot(data=detail_df, vars=['averageweight', 'bayesaverage', 'maxplayers', 'maxplaytime', 'minage', \n                                   'minplayers', 'minplaytime','playingtime'])\nplt.title('Correlation plot of selected features for modelling')\nplt.show()","b3a79389":"plt.figure(figsize=(20, 5))\ndetail_df['yearpublished'].value_counts().sort_index().plot()\nplt.xlabel('Year')\nplt.ylabel('Board Games Published')\nplt.title('Number of Board Games Published over Time')\nplt.show()","e476b6c7":"detail_df['yearpublished'].plot(kind='box')\nplt.show()","12990070":"detail_df['yearpublished'].loc[(detail_df['yearpublished'] >= -500) & (detail_df['yearpublished'] <= 1000)].value_counts().sort_index().plot(kind='bar')\nplt.xlabel('Year')\nplt.ylabel('Board Games Published')\nplt.title('Number of Board Games Published over Time (500BC to 1000)')\nplt.show()","b41365fd":"detail_df.merge(ranking_df[['ID', 'Name']], how='left', left_on='id', right_on='ID').loc[detail_df['yearpublished'] == 0]['Name'].to_list()","5536f802":"detail_df['yearpublished'].loc[(detail_df['yearpublished'] >= 1900) & (detail_df['yearpublished'] < 2019)].value_counts().sort_index().plot()\nplt.xlabel('Year')\nplt.ylabel('Board Games Published')\nplt.title('Number of Board Games Published over Time (1900 to 2018)')\nplt.show()","09d70780":"for year in range(1950, 2011, 10):\n    detail_df[(detail_df['yearpublished'] >= year) & (detail_df['yearpublished'] < (year + 10))]['bayesaverage'] \\\n        .hist(bins=np.arange(0, 10, 0.5))\n    plt.xlabel('Bayes Average')\n    plt.ylabel('Board Games Count')\n    plt.title('Distribution of Bayes Average for board games published between ' + str(year) + ' and ' + str(year + 10))\n    plt.show()","cf426ab9":"detail_df[[\"averageweight\", 'bayesaverage']].plot(kind='scatter', x='averageweight', y='bayesaverage')\nplt.title('Correlation between Average Weight and Bayesian Average')\nplt.show()","5d2550c5":"detail_df[[\"averageweight\", 'bayesaverage']].corr()","b3c7f59a":"plt.figure(figsize=(20, 7))\nboard_game_artists = detail_df['boardgameartist'].map(lambda artist: ast.literal_eval(artist) if type(artist) != float else artist) \\\n                                                 .dropna() \\\n                                                 .sum()\npd.Series(board_game_artists).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Artist')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Artists')\nplt.show()","677c5ddd":"plt.figure(figsize=(20, 7))\nboard_game_artists = detail_df.loc[detail_df['bayesaverage'] >= detail_df['bayesaverage'].median()]['boardgameartist'] \\\n                              .map(lambda artist: ast.literal_eval(artist) if type(artist) != float else artist) \\\n                              .dropna() \\\n                              .sum()\npd.Series(board_game_artists).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Artist')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Artists for Top 50% Board Game Titles based on Bayesian Average')\nplt.show()","21c81d69":"plt.figure(figsize=(20, 7))\nboard_game_designer = detail_df['boardgamedesigner'].map(lambda artist: ast.literal_eval(artist) if type(artist) != float else artist) \\\n                                                 .dropna() \\\n                                                 .sum()\npd.Series(board_game_designer).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Designer')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Designers')\nplt.show()","74cfbeaa":"plt.figure(figsize=(20, 7))\nboard_game_designer = detail_df.loc[detail_df['bayesaverage'] >= detail_df['bayesaverage'].median()]['boardgamedesigner'] \\\n                               .map(lambda artist: ast.literal_eval(artist) if type(artist) != float else artist) \\\n                               .dropna() \\\n                               .sum()\npd.Series(board_game_designer).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Designer')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Designers for Top 50% Board Game Titles based on Bayesian Average')\nplt.show()","cbd970db":"plt.figure(figsize=(20, 7))\nboard_game_category = detail_df['boardgamecategory'].map(lambda artist: ast.literal_eval(artist) if type(artist) != float else artist) \\\n                                                 .dropna() \\\n                                                 .sum()\npd.Series(board_game_category).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Category')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Categories')\nplt.show()","6b5bc595":"sub_df = detail_df.merge(ranking_df[['Name', 'ID']], how='left', left_on='id', right_on='ID')[['Name', 'boardgameexpansion', 'bayesaverage']]\nsub_df['numexpansions'] = sub_df['boardgameexpansion'].map(lambda x: len(ast.literal_eval(x)) if not type(x) == float else x)\nsub_df.head()","714fa380":"plt.figure(figsize=(20, 7))\nsub_df.set_index('Name')['numexpansions'].sort_values(ascending=False)[:100].plot(kind='bar')\nplt.xlabel('Board Game Name')\nplt.ylabel('Count')\nplt.title('Top 100 Board Games with the Most Expansions')\nplt.show()","9ef7bfa7":"sub_df = detail_df[['boardgameexpansion', 'bayesaverage']].copy()\nsub_df['numexpansions'] = sub_df['boardgameexpansion'].map(lambda x: len(ast.literal_eval(x)) if not type(x) == float else x)\nsub_df.head()","c245d3fe":"sub_df.plot(kind='scatter', x='numexpansions', y='bayesaverage')\nplt.show()","47caae38":"sub_df.loc[sub_df['numexpansions'] < 100].plot(kind='scatter', x='numexpansions', y='bayesaverage')\nplt.show()","357d5d9e":"sub_df[['numexpansions', 'bayesaverage']].corr()","dc306a23":"sub_df = detail_df[['boardgameexpansion', 'yearpublished']].copy()\nsub_df['numexpansions'] = sub_df['boardgameexpansion'].map(lambda x: len(ast.literal_eval(x)) if not type(x) == float else x)\nsub_df.head()","9d1a95e1":"sub_df.plot(kind='scatter', x='yearpublished', y='numexpansions')\nplt.show()","23ae74dd":"sub_df.loc[sub_df['yearpublished'] > 1900].plot(kind='scatter', x='yearpublished', y='numexpansions')\nplt.show()","33858a7f":"mechanics = detail_df['boardgamemechanic'].map(lambda x: ast.literal_eval(x) if not type(x) == float else x) \\\n                                          .dropna() \\\n                                          .sum()\nplt.figure(figsize=(20, 7))\npd.Series(mechanics).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Mechanic')\nplt.ylabel('Count')\nplt.title('Top 50 Board Game Mechanics')\nplt.show()","62935987":"publishers = detail_df['boardgamepublisher'].map(lambda x: ast.literal_eval(x) if not type(x) == float else x) \\\n                                            .dropna() \\\n                                            .sum()\nplt.figure(figsize=(20, 7))\npd.Series(publishers).value_counts()[:50].plot(kind='bar')\nplt.xlabel('Publisher Name')\nplt.ylabel('Board Game Count')\nplt.title('Top 50 Board Game Publishers')\nplt.show()","b3f12ca4":"plt.figure(figsize=(20, 7))\nreview_df['name'].value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Name')\nplt.ylabel('Rating Count')\nplt.title('Top 50 Most Rated Board Games')\nplt.show()","52af8761":"plt.figure(figsize=(20, 7))\nreview_df.loc[review_df['comment'].notna()]['name'].value_counts()[:50].plot(kind='bar')\nplt.xlabel('Board Game Name')\nplt.ylabel('Review Count')\nplt.title('Top 50 Most Reviewed Board Games')\nplt.show()","2eeb007a":"# Correlation Plots","9852b57d":"# EDA Ranking Data\n\n- No null values in all variables except thumbnail\n- No duplicate ids\n","e33db400":"## Which are the most rated board games?","1ab13297":"## Is there a correlation between the number of board game expansions and the Bayesian average?","ae1d84fc":"## Which are the most reviewed board games?","a30f5949":"## What are the popular board game mechanics among board games?","ac79f74a":"## Is there a correlation between the number of board game expansions and the year published?","b199a2e8":"## Is there any relation between the difficulty of board games and their Bayesian averages?\n\n- Marginally positive correlation","8cf25846":"# Repeated Columns Analysis\n\n- IDs are present for every table (join condition)\n- Ranking and game detail tables have published year, rank, average, bayes average, users rated and thumbnail columns\n- Looking at Kaggle, the dataset was last updated on 2nd June, and looking at the number of users rated, the game detailed info table looks more updated\n- Should drop ranking data's repeated columns and join the rest (BGG URL and Name) with game detail dataset","f4ef6ade":"## What are the board games with the most expansions?","3f1ae2f1":"## How many board games are there in each category?","57c86c2f":"# EDA Reviews Data\n\n- All variables do not have null values except comments\n- Left skewed distribution for ratings\n- About 80% of ratings have no comments","0e1f3113":"## Which are the major board game publishers?","5b154fc9":"## What is the trend of board game publishes?\n\n- Two spikes, one in year 0 and another starting from 20th century (1900~)","28f8bc2b":"# Descriptive Analytics","625a8cf9":"## Who are the board game artists that has the most board games published?","e725dfe6":"## Who are the board game designers with the most board games published?","117731db":"## What are the Bayesian average distributions for board games published in the recent decades?","d60c4219":"# Import Datasets","5bbc3fd8":"# Ordered Dictionaries in Game Detail\n\n- Might be useful as additional features","6271fc86":"## What are the trends during periods of high volume board game publishes?\n\n- Board games with no published year for year 0 publishes\n- Exponential increase in board games since the 20th century, with a dip in board game publishes in the last few years","a27e98a1":"# EDA Game Details\n\n- All categories have unique ranks for each game, except the main board game ranking\n- Majority of the 15 categories only have 1 board game, except abstract, children, customisable, family, party, strategy, thematic and war (categories exclude main board game rating)\n- All numerical variables excluding categories have no null values"}}