{"cell_type":{"2029be57":"code","32b9568c":"code","81001b02":"code","67af8e6e":"code","e6403087":"code","29f1a0d1":"code","d8c55565":"code","4d4027d8":"code","0e3e77cf":"code","2a5567ee":"code","18e72636":"code","6e8cda65":"code","17801f91":"code","cee13440":"code","93ed9d83":"code","cabdefdd":"code","e94cf859":"code","9e572247":"code","49d4d029":"code","b387fd9a":"code","59f7ad37":"code","8b0744b0":"markdown","152dd470":"markdown","a7e037b2":"markdown","96ae3994":"markdown","d90654b4":"markdown","51642bb0":"markdown","19dce6bd":"markdown"},"source":{"2029be57":"from PIL import Image\nimport os\nroot=\"..\/input\/img_align_celeba\/img_align_celeba\/\"\nallim=os.listdir(\"..\/input\/img_align_celeba\/img_align_celeba\")\nallim[:10]\nprint(len(allim))\n#get a small sample\nallim=allim[:20000]\nprint(len(allim))","32b9568c":"#visualize data\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(20,10))\nfor i in range (30):\n    impath=root+allim[i]\n    im=Image.open(impath)\n    plt.subplot(3,10,i+1)\n    plt.imshow(im)","81001b02":"# transfer image to numpy array, resize 3d to 1d\nimport numpy as np\ndef getImage(id,w=30,h=36):\n    path=root+id\n    im=Image.open(path)\n    im=im.resize([w,h],Image.NEAREST)\n    im=np.array(im)\n    im=im.reshape(w*h*3)\n    return im\n\n\nfor i in range(len(allim)):\n    allim[i]=getImage(allim[i])\n\n\nprint(allim[3].shape)\nprint(len(allim))\n    \n","67af8e6e":"#visualize resized images\nplt.figure(figsize=(12,6))\nfor i in range (30):\n    plt.subplot(3,10,i+1)\n    plt.imshow(allim[i].reshape(36,30,3))","e6403087":"#normalize data for tanh(GAN generation function)\nallim=np.array(allim)\nallim=allim\/255*2-1\nallim.shape","29f1a0d1":"#input real image and noise\nimport tensorflow as tf\ndef inputs(dim_real,dim_noise):\n    input_reals=tf.placeholder(tf.float32, [None, dim_real], name='input_reals')\n    input_noises=tf.placeholder(tf.float32, [None, dim_noise], name='input_noises')\n    return input_reals, input_noises\n","d8c55565":"#generator\ndef generator(noises,nn_units,out_dimension,alpha=0.01,reuse=False):\n    \n    with tf.variable_scope(\"generator\", reuse=reuse):\n        hidden1=tf.layers.dense(input_noises,nn_units)\n        #leaky relu\n        hidden1=tf.maximum(alpha*hidden1, hidden1)\n        hidden1=tf.layers.dropout(hidden1,rate=0.2)\n\n        logits=tf.layers.dense(hidden1, out_dimension)\n        outputs=tf.tanh(logits)\n\n        return logits,outputs","4d4027d8":"#discriminator\ndef discriminator(image,nn_units,alpha=0.01,reuse=False):\n    with tf.variable_scope(\"discriminator\", reuse=reuse):\n        hidden1=tf.layers.dense(image,nn_units)\n        #leaky relu\n        hidden1=tf.maximum(alpha*hidden1, hidden1)\n\n        logits=tf.layers.dense(hidden1, 1)\n        outputs=tf.sigmoid(logits)\n\n        return logits,outputs","0e3e77cf":"dim_real=allim[0].shape[0]\nprint(dim_real)\ndim_noise=100\ngen_units=128\ndis_units=128\nLR=0.001\nalpha=0.01","2a5567ee":"\ntf.reset_default_graph()\ninput_reals, input_noises=inputs(dim_real,dim_noise)\ngen_logits, gen_outputs=generator(input_noises,gen_units, dim_real)\ndis_real_logits, dis_real_outputs=discriminator(input_reals,dis_units)\ndis_fake_logits, dis_fake_outputs=discriminator(gen_outputs,dis_units, reuse=True)\n","18e72636":"dis_real_cost=tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=dis_real_logits,\n                                                                     labels=tf.ones_like(dis_real_logits)))\ndis_fake_cost=tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=dis_fake_logits,\n                                                                     labels=tf.zeros_like(dis_fake_logits)))\ndis_total_cost=tf.add(dis_real_cost, dis_fake_cost)\n\ngen_cost=tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=dis_fake_logits,\n                                                                labels=tf.ones_like(dis_fake_logits)))","6e8cda65":"train_vars=tf.trainable_variables()\ngen_vars=[var for var in train_vars if var.name.startswith('generator')]\ndis_vars=[var for var in train_vars if var.name.startswith('discriminator')]\ngen_optimizer=tf.train.AdamOptimizer(LR).minimize(gen_cost,var_list=gen_vars)\ndis_optimizer=tf.train.AdamOptimizer(LR).minimize(dis_total_cost,var_list=dis_vars)","17801f91":"init=tf.global_variables_initializer()\nsess=tf.Session()\nsess.run(init)\n\nbatch_size=64\ncount=0\ng_cost=0\nd_cost=0\nsamples=[]\nfor i in range(40000):\n    startindex=(i*batch_size)%(len(allim)-batch_size)\n    endindex=startindex+batch_size\n    batch_real=allim[startindex:endindex] #shape is (64,3240)\n    batch_noise=np.random.uniform(-1,1,size=(batch_size, dim_noise))\n    sess.run(dis_optimizer,feed_dict={input_reals:batch_real,input_noises:batch_noise})\n    sess.run(gen_optimizer, feed_dict={input_noises:batch_noise})\n    g_cost+=(sess.run(gen_cost, feed_dict={input_noises:batch_noise}))\n    d_cost+=(sess.run(dis_total_cost, feed_dict={input_reals:batch_real,input_noises:batch_noise}))\n    \n    if (i+1)%1000==0:\n        count+=1\n        print(\"ITER:\",count,\"| GEN COST:\",g_cost\/(1000),\"DIS COST:\",d_cost\/(1000))\n        g_cost=0\n        d_cost=0\n        gen_samples=sess.run(generator(input_noises,gen_units,dim_real, reuse=True),\n                            feed_dict={input_noises:batch_noise})\n        samples.append(gen_samples)","cee13440":"sess.close()","93ed9d83":"print(len(samples))\nprint(len(samples[1]))\nprint((samples[0][0].shape))","cabdefdd":"#generated logits\nsamples[0][0][0]","e94cf859":"#generated outputs\nsamples[0][1][0]","9e572247":"plt.figure(figsize=(10,10))\nfor i in range(64):\n    plt.subplot(8,8,i+1)\n    img=((samples[0][1][i]+1)*255\/2).astype(np.uint8)\n    plt.imshow(img.reshape(36,30,3))","49d4d029":"plt.figure(figsize=(10,10))\nfor i in range(64):\n    plt.subplot(8,8,i+1)\n    img=((samples[9][1][i]+1)*255\/2).astype(np.uint8)\n    plt.imshow(img.reshape(36,30,3))","b387fd9a":"plt.figure(figsize=(10,10))\nfor i in range(64):\n    plt.subplot(8,8,i+1)\n    img=((samples[39][1][i]+1)*255\/2).astype(np.uint8)\n    plt.imshow(img.reshape(36,30,3))","59f7ad37":"c=0\nfor i in range(64):\n    path='img'+str(c)+'.jpg'\n    img=((samples[39][1][i]+1)*255\/2).astype(np.uint8)\n    img=img.reshape(36,30,3)\n    plt.imsave(path,img)\n    c+=1","8b0744b0":"#### Data Cleaning ","152dd470":"#### GAN network setup","a7e037b2":"### WorkFlow\n- Data Exploration\n- Data Cleaning\n- GAN variables setup\n- GAN network setup\n- GAN Cost and Optimizer\n- GAN iteration\n- View outputs","96ae3994":"#### Gan iteration","d90654b4":"#### View output","51642bb0":"#### GAN variables setup","19dce6bd":"#### Data Exploration"}}