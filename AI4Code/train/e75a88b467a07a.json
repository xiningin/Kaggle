{"cell_type":{"d2c87444":"code","f3a9051d":"code","0dc29551":"code","4f68b598":"code","97faf00b":"code","3b48df3d":"code","f633b7dd":"code","32a9bb12":"markdown","39dc9714":"markdown","7d91750c":"markdown","23da9d3e":"markdown","061218a7":"markdown"},"source":{"d2c87444":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport lightgbm as lgb\nimport os, datetime, time, shutil, os, traceback, gc\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\n\n\n# Any results you write to the current directory are saved as output.","f3a9051d":"train = pd.read_csv(\"..\/input\/murcia-beer-challenge\/beer_train.csv\")\ntest = pd.read_csv(\"..\/input\/murcia-beer-challenge\/beer_test.csv\")","0dc29551":"\nle = preprocessing.LabelEncoder()\ntrain['Style'] = le.fit_transform(train['Style']) \ntarget = train['Style']","4f68b598":"train.drop(['Id','Style'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","97faf00b":"train['tipo'] = 0\ntest['tipo'] = 1\nall = pd.concat ([train,test])\ndel train, test\ngc.collect()\n\ncategorical_columns = [col for col in all.columns if all[col].dtype == 'object']\nfor col in categorical_columns:\n\tall = pd.concat([all, pd.get_dummies(all[col], prefix=col, dummy_na= True)],axis=1)\n\tall.drop([col], axis=1, inplace=True)\n\tgc.collect()\n\ntrain = all[all['tipo'] == 0]\ntest = all[all['tipo'] == 1]\ndel all\ngc.collect()\n\ntrain.drop(['tipo'], axis=1, inplace=True)\ntest.drop(['tipo'], axis=1, inplace=True)","3b48df3d":"params = {'objective': 'multiclass', \"num_class\" : 11, 'metric': 'multi_logloss', \"bagging_seed\" : 2020, 'verbose': -1}#\nmetricas = []\nfolds = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=3246584)\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train,target)):\n\tprint(\"fold {}\".format(fold_))\n\ttrn_data = lgb.Dataset(train.iloc[trn_idx], label=target.iloc[trn_idx])\n\tval_data = lgb.Dataset(train.iloc[val_idx], label=target.iloc[val_idx])\n\n\tnum_round = 10000\n\tclf = lgb.train(params, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=False, early_stopping_rounds = 100)\n\n\tval_aux_prob = clf.predict(train.iloc[val_idx], num_iteration=clf.best_iteration)\t\n\tval_aux =  [np.argmax(line) for line in val_aux_prob]\n\tauxScore = accuracy_score(target.iloc[val_idx], val_aux)\n\tmetricas.append(auxScore)\n\tprint (auxScore)\n\n\tpred_aux_prob = clf.predict(test, num_iteration=clf.best_iteration)\n\tif (fold_ == 0):\n\t\tpredictions_prob = pred_aux_prob\n\telse:\t\t\t\n\t\tpredictions_prob += pred_aux_prob","f633b7dd":"print ('final')\nprint ('mean: ' + str(np.mean(metricas)))\nprint ('std: ' + str(np.std(metricas)))\nprint ('max: ' + str(np.max(metricas)))\nprint ('min: ' + str(np.min(metricas)))  \n\nsubmit_num = [np.argmax(line) for line in predictions_prob]\nsubmit = le.inverse_transform(submit_num)\n\nSubmission=pd.read_csv(\"..\/input\/murcia-beer-challenge\/beer_sampleSubmission.csv\")\nSubmission['Style']=submit.copy()\nSubmission.to_csv(\"bestPS.csv\", index=False) ","32a9bb12":"Submit - Private Score 0.65138 - Public Score 0.64964 - RepeatedStratifiedKFold 0.6420678407764042","39dc9714":"One Hot Encoder","7d91750c":"RepeatedStratifiedKFold - LightGBM","23da9d3e":"Delete Columns","061218a7":"Label Encoder Target"}}