{"cell_type":{"7e900f21":"code","0c3f92cc":"code","a937f307":"code","8d52aa71":"code","b24a75ed":"code","20118b15":"code","d47e85e5":"code","107a83cf":"code","7ab07f18":"code","037ed606":"code","0b33ec3f":"code","58fa9c3d":"code","5f1e0feb":"code","3d7d6ae9":"code","b9262315":"code","2bf8c2e9":"code","10de3ed7":"code","dc76a012":"code","de2a6f54":"code","d400e8e8":"code","7ddb4c33":"code","cd99aaff":"code","86f27ed4":"code","30da2d4c":"code","38a1baa2":"code","fc6c8025":"code","f0a5cff8":"code","8a173b87":"code","763bcd18":"code","1a9351f6":"code","fdc02b83":"code","403f9555":"code","196d1dfc":"code","4ca30f44":"code","4dc293bb":"code","ae1f014b":"code","8a87a8c1":"code","33f4877d":"code","e0b21ccc":"code","22365083":"code","75ea5a38":"code","5704d963":"code","6f915962":"code","2ec90788":"code","30ddcd3a":"code","0c2f2fd5":"code","8cf35bbb":"code","31a0414c":"code","95d928f0":"code","5cd8d911":"code","02b2ef89":"code","0e07907b":"code","88d36be8":"code","8744207f":"code","e4da8ff1":"code","9f2273f1":"code","5434f990":"code","d2ed6d36":"code","1bfd9c2f":"code","c4f1bd24":"code","9e5c320a":"code","7e59e1a3":"code","81b8fe8f":"code","51b52246":"code","07a8187f":"code","3ba8aec3":"code","c1bfcab8":"code","e8b0e533":"code","d730e293":"code","4bbd3cf7":"code","474e8686":"code","9bd3dad3":"code","debba2f2":"code","5eb58e4f":"code","1cd8be57":"code","ada42fb0":"code","96bd7f9c":"code","1ff53cc6":"code","55d15816":"code","50ffefcf":"code","4d78954a":"code","78f699b7":"code","4a87972e":"code","7a3a7503":"code","b44f6f59":"code","c52fcdd1":"code","0129d4f3":"code","78e49e84":"code","7a5f13d1":"code","9fb2b714":"code","d58542e3":"code","21d9f762":"code","4c1eed25":"code","23669538":"code","5c4a8724":"code","13d57d66":"code","6b316562":"code","2587646e":"code","2497043e":"code","b9fb6dbf":"code","d304f775":"code","607cc545":"code","68cacdde":"code","1d5e3a42":"code","362cfee0":"code","f67160d2":"code","38760953":"code","b30dae5f":"code","475c15f2":"code","b559ef94":"code","ebac05cc":"code","5ba4b7d8":"code","87a5fdde":"code","373dfb42":"code","1745753b":"code","827f72a6":"code","4d026d31":"code","2164861c":"code","a5bb5b74":"code","246d11b1":"code","bdc3d5bd":"code","2db95d6f":"code","a34606ab":"code","d823e308":"code","7a86b2ee":"code","5e96f33e":"code","ec39ce7e":"code","9cf7a282":"code","2fab800e":"code","168b0dd5":"code","b59d8475":"code","431c73da":"code","c249031a":"code","fd887a5c":"code","7d826eb7":"code","c5edaa2d":"code","f5ca989d":"markdown","fd04ddf9":"markdown","d0cf0058":"markdown","2e0feb33":"markdown","bf99d4f7":"markdown","540f615e":"markdown","3e8e6964":"markdown","11a028f5":"markdown","f6bf6ba8":"markdown","ed825360":"markdown","c18886fa":"markdown","c3e91ffc":"markdown","0a9d4144":"markdown","b458d66e":"markdown","07f44bb2":"markdown","16edbee1":"markdown","761c6d39":"markdown","bf98423e":"markdown","a45b3dca":"markdown","52218e28":"markdown","fbf9fdfb":"markdown","32ce2e68":"markdown","5ea99a5e":"markdown","5c035e0c":"markdown","2bbf7805":"markdown","9c32e416":"markdown","fe23b0c9":"markdown","2dc77253":"markdown","77d806b7":"markdown","4d5ba318":"markdown","50f907bd":"markdown","ba21e72c":"markdown","1e8b93d2":"markdown","42894a38":"markdown","2a9cf13f":"markdown","86fa86e6":"markdown","fc1c25dd":"markdown","4bdcc239":"markdown","e464ae22":"markdown","e994f729":"markdown","88e0e3f1":"markdown","03542d92":"markdown","d78f3a49":"markdown","81cfad0a":"markdown","b3aa9a6f":"markdown","9c9a987f":"markdown","b8e0c1f6":"markdown","427b6e9f":"markdown","b902f169":"markdown","8e939cb8":"markdown","a487675b":"markdown","896b3f52":"markdown","3cb2b959":"markdown","fbf99892":"markdown","a0863928":"markdown"},"source":{"7e900f21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0c3f92cc":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport scipy.stats as stats\nfrom scipy.special import boxcox1p\n\nimport statsmodels.api as sm\n\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import (LinearRegression, Lasso, Ridge, ElasticNet,\n                                  LassoCV, RidgeCV, ElasticNetCV)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.feature_selection import RFECV\n\nfrom xgboost import XGBRegressor\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","a937f307":"folder = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/'\ntrain = pd.read_csv(folder+'train.csv')\ntest = pd.read_csv(folder+'test.csv')\nprint(train.shape)\nprint(test.shape)","8d52aa71":"train_ids = train['Id'].tolist()\ntest_ids = test['Id'].tolist()\ndata = pd.concat([train, test])\ndata = data.set_index('Id')\ndata.shape","b24a75ed":"fig, ax = plt.subplots(ncols=2, figsize=(16, 6))\nsns.distplot(data['SalePrice'], ax=ax[0]).set_title('Skew: {}'.format(round(data['SalePrice'].skew(),3)))\nsns.distplot(np.log(data['SalePrice']), ax=ax[1]).set_title('Skew: {}'.format(round(np.log(data['SalePrice']).skew(),3)));","20118b15":"data['SalePrice_log'] = np.log(data['SalePrice'])\ndata = data.drop(columns=['SalePrice'])","d47e85e5":"corr_price = abs(data.corr()['SalePrice_log']).sort_values(ascending=False)\nhigh_corr_price = corr_price[corr_price > 0.5].index\nplt.figure(figsize=(15,10))\nsns.heatmap(data[high_corr_price].corr(), annot=True)","107a83cf":"plt.figure(figsize=(15, 6))\nsns.boxplot(x='OverallQual', y='SalePrice_log', data=data)","7ab07f18":"sns.scatterplot(x='GrLivArea', y='SalePrice_log', data=data)","037ed606":"cat_vars = []\nord_vars = []\nnum_vars = []\nqualities_map = {'NA': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\n\ndef get_map_to_ordinal(ordered_categories):\n    return dict(zip(ordered_categories, range(len(ordered_categories))))","0b33ec3f":"data.loc[:,data.isna().any()].isna().sum()","58fa9c3d":"miss_many_vars = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']\nmiss_5_idx = data.index[data[miss_many_vars].isna().all(axis=1)]\nzero_sf_idx = data.index[(data['TotalBsmtSF'] == 0) | (data['TotalBsmtSF'].isna())]\nset(miss_5_idx) == set(zero_sf_idx)","5f1e0feb":"miss_few_vars = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']\ndata[miss_few_vars].dtypes","3d7d6ae9":"data[miss_few_vars] = data[miss_few_vars].fillna(0)\nnum_vars.extend(miss_few_vars)","b9262315":"for var in miss_many_vars:\n    print(var, data[var].unique())","2bf8c2e9":"for var in miss_many_vars:\n    data.loc[miss_5_idx, var] = data.loc[miss_5_idx, var].fillna('NA')","10de3ed7":"data[miss_many_vars] = data[miss_many_vars].fillna(data.mode().iloc[0])\nfor var in miss_many_vars:\n    print(var, data[var].unique())","dc76a012":"data = data.replace({'BsmtQual': qualities_map, 'BsmtCond': qualities_map})\ndata['BsmtExposure'] = data['BsmtExposure'].map(get_map_to_ordinal(['NA', 'No', 'Mn', 'Av', 'Gd']))\norder = ['NA', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ']\ndata['BsmtFinType1'] = data['BsmtFinType1'].map(get_map_to_ordinal(order))\ndata['BsmtFinType2'] = data['BsmtFinType2'].map(get_map_to_ordinal(order))\nord_vars.extend(miss_many_vars)","de2a6f54":"data[miss_many_vars + miss_few_vars].isna().sum()","d400e8e8":"data.loc[:,data.isna().any()].isna().sum()","7ddb4c33":"data[['GarageCars', 'GarageArea']] = data[['GarageCars', 'GarageArea']].fillna(0)","cd99aaff":"miss_vars = ['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond']\nmiss_5_idx = data.index[data[miss_vars].isna().all(axis=1)]\nprint((data.loc[miss_5_idx,'GarageArea'] == 0).sum())","86f27ed4":"for var in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    data[var] = data[var].fillna('NA')\ndata['GarageYrBlt'] = data['GarageYrBlt'].fillna(data['YearBuilt'])","30da2d4c":"data['GarageFinish'] = data['GarageFinish'].map(get_map_to_ordinal(['NA', 'Unf', 'RFn', 'Fin']))\ndata['GarageQual'] = data['GarageQual'].map({'NA': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5})\ndata['GarageCond'] = data['GarageCond'].map({'NA': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5})","38a1baa2":"data['GarageFinish'].unique()","fc6c8025":"sns.boxplot(x='GarageType', y='SalePrice_log', data=data, \n            order=['NA', 'Detchd', 'CarPort', 'BuiltIn', 'Basment', 'Attchd', '2Types']);","f0a5cff8":"cat_vars.append('GarageType')\nord_vars.extend(['GarageFinish', 'GarageQual', 'GarageCond'])\nnum_vars.extend(['GarageYrBlt', 'GarageArea', 'GarageCars'])","8a173b87":"data.loc[:, data.isna().any()].isna().sum()","763bcd18":"mason_vars = ['MasVnrArea', 'MasVnrType']\ndata.loc[data[mason_vars].isna().sum(axis=1) == 1, mason_vars]","1a9351f6":"data.loc[2611, 'MasVnrType'] = data['MasVnrType'].mode().iloc[0]\ndata[mason_vars] = data[mason_vars].fillna({'MasVnrArea': 0, 'MasVnrType': 'None'})","fdc02b83":"ax = sns.boxplot(x='MasVnrType', y='SalePrice_log', data=data,\n                 order=['None', 'BrkCmn', 'BrkFace', 'Stone'])\ndata['MasVnrType'].value_counts()","403f9555":"data['MasVnrType'] = data['MasVnrType'].map({'None': 0, 'BrkCmn': 0, 'BrkFace': 1, 'Stone': 2})\nord_vars.append('MasVnrType')\nnum_vars.append('MasVnrArea')","196d1dfc":"data.loc[:, data.isna().any() > 0].isna().sum()","4ca30f44":"ext_vars = ['Exterior1st', 'Exterior2nd', 'ExterQual', 'ExterCond']\ndata.loc[data[ext_vars].isna().any(axis=1), ext_vars]","4dc293bb":"data[ext_vars] = data[ext_vars].fillna(data[ext_vars].mode().iloc[0])","ae1f014b":"ax = sns.boxplot(x='Exterior2nd', y='SalePrice_log', data=data);\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right');","8a87a8c1":"data['ExterQual'] = data['ExterQual'].map(qualities_map)\ndata['ExterCond'] = data['ExterCond'].map(qualities_map)\ncat_vars.extend(['Exterior1st', 'Exterior2nd'])\nord_vars.extend(['ExterQual', 'ExterCond'])","33f4877d":"data.loc[:, data.isna().any()].isna().sum()","e0b21ccc":"len(data[(data['FireplaceQu'].isna()) & (data['Fireplaces'] == 0)])","22365083":"data['FireplaceQu'] = data['FireplaceQu'].fillna('NA')\ndata['FireplaceQu'].unique()","75ea5a38":"data['FireplaceQu'] = data['FireplaceQu'].map(qualities_map)\ndata['FireplaceQu'].unique()","5704d963":"num_vars.append('Fireplaces')\nord_vars.append('FireplaceQu')","6f915962":"data.loc[:, data.isna().any()].isna().sum()","2ec90788":"data['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode().iloc[0])\ndata['Electrical'].value_counts()","30ddcd3a":"order = ['Mix', 'FuseP', 'FuseF', 'FuseA', 'SBrkr']\nsns.boxplot(x= 'Electrical', y='SalePrice_log', data=data, \n           order=order)","0c2f2fd5":"data['Electrical'] = data['Electrical'].map(get_map_to_ordinal(order))\nsorted(data['Electrical'].unique())\nord_vars.append('Electrical')","8cf35bbb":"data.loc[:, data.isna().any()].isna().sum()","31a0414c":"data['Functional'] = data['Functional'].fillna(data['Functional'].mode().iloc[0])","95d928f0":"order = 'Sal Sev Maj2 Maj1 Mod Min1 Min2 Typ'.split()\ndata['Functional'] = data['Functional'].map(get_map_to_ordinal(order))\ndata['Functional'].unique()\nord_vars.append('Functional')","5cd8d911":"kitchen_vars = ['KitchenAbvGr', 'KitchenQual']\ndata.loc[data[kitchen_vars].isna().any(axis=1), kitchen_vars]","02b2ef89":"data['KitchenQual'] = data['KitchenQual'].fillna(\n    data['KitchenQual'].mode().iloc[0]).map(qualities_map)\nnum_vars.append('KitchenAbvGr')\nord_vars.append('KitchenQual')","0e07907b":"data['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode().iloc[0])\ncat_vars.extend(['SaleType', 'SaleCondition'])","88d36be8":"data['Utilities'].value_counts()","8744207f":"data = data.drop(columns=['Utilities'])","e4da8ff1":"data['Alley'].value_counts(dropna=False)","9f2273f1":"data['Alley'] = data['Alley'].fillna('NA')\nsns.violinplot(x='Alley', y='SalePrice_log', data=data)","5434f990":"cat_vars.append('Alley')","d2ed6d36":"data['Fence'] = data['Fence'].fillna('NA')\nsns.boxplot(x='Fence', y='SalePrice_log', data=data)","1bfd9c2f":"cat_vars.append('Fence')","c4f1bd24":"data.loc[:, data.isna().any()].isna().sum()","9e5c320a":"both_idx = data.index[(data['PoolArea'] == 0) & (data['PoolQC'].isna())]\ndata.loc[both_idx, 'PoolQC'] = data.loc[both_idx, 'PoolQC'].fillna('NA')\ndata[data['PoolQC'].isna()]['OverallQual'] # below average, above average, fair","7e59e1a3":"data.loc[2421, 'PoolQC'] = 'TA'\ndata.loc[2504, 'PoolQC'] = 'Gd'\ndata.loc[2600, 'PoolQC'] = 'Fa'","81b8fe8f":"data['PoolQC'] = data['PoolQC'].map(qualities_map)","51b52246":"ord_vars.append('PoolQC')\nnum_vars.append('PoolArea')","07a8187f":"neigh_meds = data.groupby('Neighborhood')['LotFrontage'].median()\ndata['LotFrontage'] = data.apply(\n    lambda row: neigh_meds[row['Neighborhood']] if pd.isna(row['LotFrontage']) else row['LotFrontage'], axis=1)","3ba8aec3":"num_vars.extend(['LotFrontage', 'LotArea'])","c1bfcab8":"sns.boxplot(x='LotShape', y='SalePrice_log', data=data);","e8b0e533":"sns.boxplot(x='LotConfig', y='SalePrice_log', data=data);","d730e293":"cat_vars.extend(['LotShape', 'LotConfig'])","4bbd3cf7":"data['MSZoning'].value_counts(dropna=False)","474e8686":"neigh_modes = data.groupby('Neighborhood')['MSZoning'].agg(lambda x: x.value_counts().index[0])\ndata['MSZoning'] = data.apply(\n    lambda row: neigh_modes[row['Neighborhood']] if pd.isna(row['MSZoning']) else row['MSZoning'], axis=1)","9bd3dad3":"sns.boxplot(x='MSZoning', y='SalePrice_log', data=data);","debba2f2":"cat_vars.append('MSZoning')","5eb58e4f":"data['MiscFeature'] = data['MiscFeature'].fillna('NA')","1cd8be57":"cat_vars.append('MiscFeature')\nnum_vars.append('MiscVal')","ada42fb0":"print([var for var in data.select_dtypes(include=np.number).columns if var not in cat_vars+num_vars+ord_vars])","96bd7f9c":"num_vars.extend(['1stFlrSF', '2ndFlrSF', '3SsnPorch', 'BedroomAbvGr', 'EnclosedPorch', \n                 'FullBath', 'GrLivArea', 'HalfBath', 'LowQualFinSF', \n                 'OpenPorchSF', 'ScreenPorch', \n                 'TotRmsAbvGrd', 'WoodDeckSF', 'YearBuilt', 'YearRemodAdd'])","1ff53cc6":"print([var for var in data.select_dtypes(include=np.number).columns if var not in cat_vars+num_vars+ord_vars])","55d15816":"ord_vars.extend(['OverallCond', 'OverallQual'])","50ffefcf":"fig, ax = plt.subplots(ncols=2, nrows=2, figsize=(16,6))\nsns.boxplot(x='MSSubClass', y='SalePrice_log', data=data, ax=ax[0,0]);\nsns.boxplot(x='MoSold', y='SalePrice_log', data=data, ax=ax[0,1]);\nsns.boxplot(x='YrSold', y='SalePrice_log', data=data, ax=ax[1,0]);","4d78954a":"cat_vars.extend(['MSSubClass','MoSold', 'YrSold'])","78f699b7":"print([var for var in data.select_dtypes(exclude=np.number).columns if var not in cat_vars+num_vars+ord_vars])","4a87972e":"data['CentralAir'] = data['CentralAir'].map({'Y': True, 'N': False})\ndata['HeatingQC'] = data['HeatingQC'].map(qualities_map)\ncat_vars.extend(['CentralAir', 'Street'])\nord_vars.append('HeatingQC')","7a3a7503":"variables = [var for var in data.select_dtypes(exclude=np.number).columns \n             if var not in cat_vars+num_vars+ord_vars]\nnrows = int(np.ceil(len(variables) \/ 3))\nfig, ax = plt.subplots(nrows=nrows, ncols=3, figsize=(16,24))\nfor i, var in enumerate(variables):\n    row, col = divmod(i, 3)\n    sns.boxplot(x=var, y='SalePrice_log', data=data, ax=ax[row, col])","b44f6f59":"data['LandSlope'] = data['LandSlope'].map({'Sev': 0, 'Mod': 1, 'Gtl': 2})\ndata['PavedDrive'] = data['PavedDrive'].map({'N': 0, 'P': 1, 'Y': 2})","c52fcdd1":"cat_vars.extend(['BldgType', 'Condition1', 'Condition2', 'Foundation', 'Heating', \n                 'HouseStyle', 'LandContour', 'Neighborhood', 'RoofMatl', 'RoofStyle'])\nord_vars.extend(['LandSlope', 'PavedDrive'])","0129d4f3":"print([var for var in data.columns if var not in num_vars+cat_vars+ord_vars])","78e49e84":"corr_price = abs(data.corr()['SalePrice_log']).sort_values(ascending=False) > 0.5\ncorr_price = corr_price[corr_price].index\nplt.figure(figsize=(16,10))\nsns.heatmap(data[corr_price].corr(), annot=True);","7a5f13d1":"sf_vars = [var for var in data.columns if 'SF' in var] + ['GrLivArea', 'SalePrice_log']\nsf_corr_order = data[sf_vars].corr()['SalePrice_log'].sort_values(ascending=False).index\nplt.figure(figsize=(16,10))\nsns.heatmap(data[sf_corr_order].corr(), annot=True);","9fb2b714":"indoor_sf = data[['TotalBsmtSF', 'GrLivArea']].sum(axis=1)\ndata['SalePrice_log'].corr(indoor_sf)","d58542e3":"to_drop = ['1stFlrSF', '2ndFlrSF', 'TotalBsmtSF', 'GrLivArea']\ndata = data.drop(columns=to_drop)\nnum_vars = [var for var in num_vars if var not in to_drop]\ndata['TotSF'] = indoor_sf\nnum_vars.append('TotSF')","21d9f762":"sns.regplot(x='TotSF', y='SalePrice_log', data=data);","4c1eed25":"print(data[(data.index.isin(train_ids)) & (data['TotSF'] >= 7750)][['TotSF', 'SalePrice_log']])","23669538":"num_baths = data['BsmtFullBath'] + data['FullBath'] + data['BsmtHalfBath']\/2 + data['HalfBath']\/2\ndata['SalePrice_log'].corr(num_baths)","5c4a8724":"data = data.drop(columns=['BsmtFullBath', 'FullBath', 'BsmtHalfBath', 'HalfBath'])\nnum_vars = [var for var in num_vars if var not in \n            ['BsmtFullBath', 'FullBath', 'BsmtHalfBath', 'HalfBath']]\ndata['Bath'] = num_baths\nnum_vars.append('Bath')","13d57d66":"neigh_order = data.groupby('Neighborhood')['SalePrice_log'].median().sort_values().index\nfig, ax = plt.subplots(figsize=(16,6))\nsns.barplot(x='Neighborhood', y='SalePrice_log', data=data, order=neigh_order, estimator=np.median, ax=ax);\nplt.ylim(11,13);\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right');","6b316562":"rich = ['StoneBr', 'NoRidge', 'NridgHt']\npoor = ['MeadowV', 'IDOTRR', 'BrDale']\ndef get_wealth(neigh):\n    if neigh in rich:\n        return 2\n    if neigh in poor:\n        return 0\n    return 1\ndata['NeighWealth'] = data['Neighborhood'].apply(get_wealth)\nord_vars.append('NeighWealth')","2587646e":"enc_porch_vars = ['EnclosedPorch', '3SsnPorch', 'ScreenPorch']\ndata['EncPorch'] = data[enc_porch_vars].sum(axis=1)\ndata = data.drop(columns=enc_porch_vars)\n\nop_porch_vars = ['WoodDeckSF', 'OpenPorchSF']\ndata['OpPorch'] = data[op_porch_vars].sum(axis=1)\ndata = data.drop(columns=op_porch_vars)\n\nnum_vars = [var for var in num_vars if var not in enc_porch_vars + op_porch_vars] + ['OpPorch', 'EncPorch']","2497043e":"data['IsRemodeled'] = data['YearBuilt'] == data['YearRemodAdd']\ndata['IsNew'] = data['YearBuilt'] == data['YrSold']\ndata['Age'] = data['YrSold'] - data['YearBuilt']\nplt.figure(figsize=(16,6))\nsns.regplot(data['Age'], data['SalePrice_log']);","b9fb6dbf":"to_drop = ['YearRemodAdd', 'YrSold', 'YearBuilt']\ndata = data.drop(columns=to_drop)\nnum_vars = [var for var in num_vars if var not in to_drop] + ['Age']\ncat_vars.remove('YrSold')\ncat_vars.extend(['IsRemodeled', 'IsNew'])","d304f775":"all_vars = num_vars + ord_vars + cat_vars\ndf_vars = data.columns.values\nprint(set(df_vars) - set(all_vars))","607cc545":"for var in cat_vars:\n    if (data[var].value_counts() < 10).any():\n        print(data[var].value_counts())\n        print()","68cacdde":"def bin_to_other(s, other, thresh=10):\n    low_counts = s.value_counts() < thresh\n    variables = low_counts.index[low_counts].values\n    return s.apply(lambda val: other if val in variables else val)","1d5e3a42":"data['Exterior1st'] = bin_to_other(data['Exterior1st'], 'Other')\ndata['Exterior2nd'] = bin_to_other(data['Exterior2nd'], 'Other')\ndata['SaleType'] = bin_to_other(data['SaleType'], 'Oth')\ndata['MSSubClass'] = bin_to_other(data['MSSubClass'], 'Other')\ndata['Condition1'] = bin_to_other(data['Condition1'], 'Other')\ndata['Condition2'] = bin_to_other(data['Condition2'], 'Other')\ndata['Heating'] = bin_to_other(data['Heating'], 'Other')\ndata['RoofMatl'] = bin_to_other(data['RoofMatl'], 'Other')","362cfee0":"data['HasShed'] = data['MiscFeature'] == 'Shed'\ncat_vars.append('HasShed')\ndata = data.drop(columns=['MiscFeature'])\ncat_vars.remove('MiscFeature')","f67160d2":"high_corr = data.corr()['SalePrice_log'].sort_values(ascending=False) > 0.5\nvar_high_corr = high_corr.index[high_corr]\nplt.figure(figsize=(16, 10))\nsns.heatmap(data[var_high_corr].corr(), annot=True);","38760953":"data = data.drop(columns=['GarageArea'])\nnum_vars.remove('GarageArea')","b30dae5f":"to_plot = []\nfor var in num_vars:\n    if abs(data[var].skew()) > 0.8:\n        to_plot.append(var)\nfig, ax = plt.subplots(nrows=len(to_plot), ncols=2, figsize=(16,6*len(to_plot)))\nfor row, var in enumerate(to_plot):\n    skew = data[var].skew()\n    log_skew = np.log1p(data[var]).skew()\n    sns.distplot(data[var], kde=False, ax=ax[row,0]).set_title('Skew: {}'.format(round(skew,3)))\n    sns.distplot(np.log1p(data[var]), kde=False, ax=ax[row,1]).set_title('Skew: {}'.format(round(log_skew,3)))","475c15f2":"to_log = ['BsmtFinSF1', 'BsmtUnfSF', 'MasVnrArea', 'LotFrontage', 'LotArea', 'TotSF', 'OpPorch']\nfor var in to_log:\n    new_var = var+'_log'\n    data[new_var] = np.log1p(data[var])\n    data = data.drop(columns=[var])\n    num_vars.remove(var)\n    num_vars.append(new_var)","b559ef94":"data.to_csv('processed_not_scaled_no_dummies.csv')","ebac05cc":"data.shape","5ba4b7d8":"dummy_data = pd.get_dummies(data[cat_vars], drop_first=True)","87a5fdde":"dummy_data.columns[dummy_data.loc[test_ids].astype(bool).sum(axis=0) == 0]","373dfb42":"dummy_data = dummy_data.drop(columns=['HouseStyle_2.5Fin'])","1745753b":"dummy_data.columns[dummy_data.loc[train_ids].astype(bool).sum(axis=0) < 10]","827f72a6":"dummy_data = dummy_data.drop(columns=dummy_data.columns[dummy_data.loc[train_ids].astype(bool).sum(axis=0) < 10])","4d026d31":"data = data.drop(columns=cat_vars).merge(dummy_data, left_index=True, right_index=True)\ndata.shape","2164861c":"data.to_csv('processed_has_dummies_not_scaled.csv')","a5bb5b74":"train = data.loc[train_ids]\ntest = data.loc[test_ids].drop(columns=['SalePrice_log'])\nprint(train.shape)\nprint(test.shape)","246d11b1":"train = train.drop(index=[524, 1299])","bdc3d5bd":"scaler = RobustScaler()\ntrain[num_vars+ord_vars] = scaler.fit_transform(train[num_vars+ord_vars])\ntest[num_vars+ord_vars] = scaler.transform(test[num_vars+ord_vars])\nX = train.drop(columns=['SalePrice_log'])\ny = train['SalePrice_log']","2db95d6f":"lasso_cv = LassoCV().fit(X, y)\nalpha_lasso = lasso_cv.alpha_","a34606ab":"rmse_list = []\nfor state in range(10):\n    lasso = Lasso(alpha_lasso)\n    k_fold = KFold(shuffle=True, random_state=state)\n    rmse_list.append(np.sqrt(-1*cross_val_score(lasso, X, y, cv=k_fold, scoring='neg_mean_squared_error')).mean())\nrmse_list = np.array(rmse_list)\nprint(rmse_list.mean(), rmse_list.std())","d823e308":"ridge_cv = RidgeCV().fit(X, y)\nalpha_ridge = ridge_cv.alpha_","7a86b2ee":"rmse_list = []\nfor state in range(10):\n    ridge = Ridge(alpha_ridge)\n    k_fold = KFold(shuffle=True, random_state=state)\n    rmse_list.append(np.sqrt(-1*cross_val_score(ridge, X, y, cv=k_fold, scoring='neg_mean_squared_error')).mean())\nrmse_list = np.array(rmse_list)\nprint(rmse_list.mean(), rmse_list.std())","5e96f33e":"elnet_cv = ElasticNetCV().fit(X, y)\nalpha_elnet = elnet_cv.alpha_","ec39ce7e":"rmse_list = []\nfor state in range(10):\n    elnet = ElasticNet(alpha_elnet)\n    k_fold = KFold(shuffle=True, random_state=state)\n    rmse_list.append(np.sqrt(-1*cross_val_score(elnet, X, y, cv=k_fold, scoring='neg_mean_squared_error')).mean())\nrmse_list = np.array(rmse_list)\nprint(rmse_list.mean(), rmse_list.std())","9cf7a282":"X = train.drop(columns=['SalePrice_log'])\ny = train['SalePrice_log']","2fab800e":"xgb = XGBRegressor(objective='reg:squarederror')\nk_fold = KFold(shuffle=True, random_state=0)\nprint(np.sqrt(-1*cross_val_score(xgb, X, y, cv=k_fold, scoring='neg_mean_squared_error')).mean())","168b0dd5":"rmse_list = []\nfor state in range(10):\n    xgb = XGBRegressor(objective='reg:squarederror')\n    k_fold = KFold(shuffle=True, random_state=state)\n    rmse_list.append(np.sqrt(-1*cross_val_score(xgb, X, y, cv=k_fold, scoring='neg_mean_squared_error')).mean())\nrmse_list = np.array(rmse_list)\nprint(rmse_list.mean(), rmse_list.std())","b59d8475":"ridge = Ridge(alpha_ridge).fit(X, y)\ntrain_pred = ridge.predict(X)\ntest_pred = ridge.predict(test)","431c73da":"sns.distplot(train_pred - y);","c249031a":"sm.qqplot(train_pred - y, fit=True, line='45');","fd887a5c":"real_scale = np.exp(test_pred) - 1\nreport = pd.DataFrame({'Id': test.index, 'SalePrice': real_scale})","7d826eb7":"sns.distplot(np.exp(train_pred)+1, kde=False);\nsns.distplot(np.exp(test_pred)+1, kde=False);","c5edaa2d":"report.to_csv('submission.csv', index=False)","f5ca989d":"Each of these variables are ordinal, so we'll convert them to ordered integers.","fd04ddf9":"## Bathrooms","d0cf0058":"## Fence","2e0feb33":"We see that this is an apporximately linear relationship (medians are in increasing order). There are no severe outliers.","bf99d4f7":"## Age","540f615e":"# Transforming Data\nSkewness","3e8e6964":"## MSZoning","11a028f5":"Let's add a new category that represents 'no basement'.","f6bf6ba8":"No clear ordinality. We'll leave these as categories but convert the quality variables to ordinal.","ed825360":"Make separate is_new flag variable since we can expect a disontinuity in the above linear relationship between 'lived-in' houses and entirely new houses.","c18886fa":"## Pool Variables","c3e91ffc":"## Neighborhood","0a9d4144":"## Exterior Variables","b458d66e":"## Split","07f44bb2":"## Scaling","16edbee1":"## Lot Variables","761c6d39":"## Porch","bf98423e":"## Functional","a45b3dca":"# Preparing Data for Modeling","52218e28":"Now let's replace the remaining nulls with the modes.","fbf9fdfb":"# Variable Groups With Missing Values\nLet's have a look at the variables with missing data. Many variables fall neatly into groups, so when possible we'll look at each group as a whole. We'll also compile a list of each type of variable (categorical, ordinal, numerical), and we'll convert categorical variables to ordinal when necessary.","32ce2e68":"Expected this to be ordinal with Reg having the highest median saleprice. We'll leave these as categorical.","5ea99a5e":"## Fireplace Variables","5c035e0c":"# Feature Engineering","2bbf7805":"Again we see a linear relationship. Note that there are two possible outliers: those with SalePrice_log less than 12.5 and GrLivArea greater than 4000.","9c32e416":"Ridge regression with parameter alpha_ridge has the best rmse, averaged over 30 splits of 5-fold cross validation. ","fe23b0c9":"## Square Footage Variables","2dc77253":"These missing variables are all numerical, and we can reason that a null indicates 0.","77d806b7":"## Electrical","4d5ba318":"## Kitchen Variables","50f907bd":"### OverallQual","ba21e72c":"## Utilities","1e8b93d2":"## Masonry Variables","42894a38":"## Alley","2a9cf13f":"So each of the 157 entries that miss all five of these variables have no garage. For 4 of these variables we can replace with 'NA'. We'll replace missing GarageYrBlt with YearBuilt.","86fa86e6":"# Converting Other Categories to Ordinal","fc1c25dd":"## Garage Variables\nGarageType: Garage location (157)  \nGarageYrBlt: Year garage was built (159)  \nGarageFinish: Interior finish of the garage (159)  \nGarageCars: Size of garage in car capacity (1)  \nGarageArea: Size of garage in square feet (1)  \nGarageQual: Garage quality (159)  \nGarageCond: Garage condition (159)","4bdcc239":"## Remove Outliers from Training Set","e464ae22":"# Variable Groups Without Missing Values","e994f729":"## Miscellaneous","88e0e3f1":"Now convert to ordinal where necessary.","03542d92":"## Sale Variables","d78f3a49":"## Basement Variables\nDescription from Kaggle. All 11 basement variables have missing numbers. The number of missing values is in brackets:  \nBsmtQual: Height of the basement (81)  \nBsmtCond: General condition of the basement (82)  \nBsmtExposure: Walkout or garden level basement walls (82)  \nBsmtFinType1: Quality of basement finished area (79)  \nBsmtFinSF1: Type 1 finished square feet (1)  \nBsmtFinType2: Quality of second finished area (if present) (80)  \nBsmtFinSF2: Type 2 finished square feet (1)  \nBsmtUnfSF: Unfinished square feet of basement area (1)  \nTotalBsmtSF: Total square feet of basement area (1)  \nBsmtFullBath: Basement full bathrooms (2)  \nBsmtHalfBath: Basement half bathrooms (2)","81cfad0a":"## Re-Binning Categorical Values with Fewer Than 10 Counts","b3aa9a6f":"Once we merge None and BrkCmn, the variable appears ordinal.","9c9a987f":"Doesn't appear to be ordinal, so I'll add it to the list of categorical variables.","b8e0c1f6":"Therefore all 79 rows are missing all five of the above variables do not have a basement. Let's have a look at the variables one by one, starting with those missing only a few columns.","427b6e9f":"## Variables Highly Correlated with SalePrice_log","b902f169":"We can see why the competition asks us to predict log(SalePrice): SalePrice follows a log-normal distribution, so we convert it to log scale.","8e939cb8":"## One-Hot Encode","a487675b":"# Feature Selection","896b3f52":"# Modeling (Finally)","3cb2b959":"## Dependent Variable","fbf99892":"# First Impression of Important Variables","a0863928":"## GrLivArea"}}