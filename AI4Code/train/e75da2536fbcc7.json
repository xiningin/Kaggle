{"cell_type":{"71b2c45c":"code","4dfc1b26":"code","0f8ba109":"code","7a5a5b23":"code","d5beddb9":"code","4f4d5ef9":"code","8a735951":"code","83d9e354":"code","5085b408":"code","5c7ce8ee":"code","1a5a7c7c":"code","ceb0b4b5":"code","43529573":"code","ba7c61e4":"code","f18f2bf3":"code","09376e8d":"code","f3ceed9b":"code","cdd1967b":"code","be6b129a":"code","2ca19456":"code","11bb104d":"code","f18ae06d":"code","cc3a5d7c":"markdown","33451881":"markdown","bffc70b0":"markdown","df02f98f":"markdown","7c8f93b9":"markdown"},"source":{"71b2c45c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # data visualization\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4dfc1b26":"villagers = pd.read_csv(\"\/kaggle\/input\/animal-crossing-new-horizons-nookplaza-dataset\/villagers.csv\")\nwish = pd.read_table(\"\/kaggle\/input\/scraped-ac-wish-rankings\/ac_vil_ranking.txt\", header=None, names=[\"Name\"])","0f8ba109":"villagers.head()","7a5a5b23":"wish.head()\n","d5beddb9":"# DO NOT RUN #\n### r code for creating the rank lookup\n#rank_lookup <- raw %>%  # raw is the equivalent of wish\n  #as_tibble() %>%  # creates a tibble \n  #mutate(value = str_squish(value)) %>%  # removes whitespace from a string \n  #filter(value %in% vil$name) %>%  # pulls value for villagers in villagers df \n  #distinct(value) %>%  # remove duplicates \n  #mutate(wish_score = rev(1:nrow(.))) %>%  # creates a wish score based on rank \n  #rename(name = value)  # renames value (villager name) to name ","4f4d5ef9":"wish['Name'] = wish['Name'].str.strip().drop_duplicates()\nwish[0:10]\n\n#df1['State'] = df1['State'].str.strip()\n#print (df1)\n\n#.drop_duplicates(keep=False,inplace=True)","8a735951":"wish = wish.dropna()\nwish[0:10]","83d9e354":"# OK now we need to merge with villagers.\n# OR remove more rows and reset index?\n# could do by removing \"Not in stock\" and anything that doesn't start with title case\n#df = df[df['EntityName'].str[0].str.isupper()]\nwish = wish[wish['Name'].str[0].str.isupper()]\nwish[0:10]","5085b408":"# gotta remove \"Not in stock\"\n#df[df.name != 'Tina']\nwish = wish[wish.Name != 'Not in stock']\nwish[0:10]","5c7ce8ee":"wish_rank = wish.reset_index()\nwish_rank[0:10]","1a5a7c7c":"# df.drop('reports', axis=1)\nwish_rank_01 = wish_rank.drop('index', axis=1)\nwish_rank_01[0:10]","ceb0b4b5":"wish_rank_02 = wish_rank_01.reset_index()\nwish_rank_02[\"index\"] = wish_rank_02[\"index\"].values[::-1]\nwish_rank_02[0:10]","43529573":"# df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\nwish_rank_03 = wish_rank_02.rename(columns={\"index\": \"wish_rank\"})\nwish_rank_03[0:10]","ba7c61e4":"#merged_left = pd.merge(left=survey_sub, right=species_sub, how='left', left_on='species_id', right_on='species_id')\nmerged_wish = pd.merge(left=villagers, right=wish_rank_03, how='left', left_on='Name', right_on='Name')\nmerged_wish[0:10]","f18f2bf3":"# df1 = df[['a','b']]\nvil_ranks = merged_wish[['Name', 'Species', 'Personality', 'wish_rank', 'Gender', 'Hobby']]\nvil_ranks[0:10]","09376e8d":"# Sort based on wish ranking (ranking as of May 24, 2020)\n# df.sort_values(by=['col1'])\n## Most wished for Villagers\nvil_ranks.sort_values(ascending=False, by=['wish_rank'])[0:10]\n\n# 4\/10 cats\n# 6\/10 female\n# 4\/10 music","f3ceed9b":"# visualization: wish score and personality\n# steps: group by personality, calculate mean wish_rank, plot\n# separate steps? rather than tidyverse piping\n\n# R code\n# villagers %>% \n#   group_by(personality) %>% \n#   summarize(mean_wish = mean(wish_score), n = n()) %>%  \n#   ggplot(data = ., \n#          aes(x = reorder(personality, mean_wish), y = mean_wish, size = n)) +\n#   geom_point(color = \"#1c7c24\", alpha = .75) + \n#   labs(title = \"Mean wish scores across villager personalities\", \n#        subtitle = \"Villager rankings from Nook Market on May 24, 2020\",\n#        x = \"\", \n#        y = \"Wish score\", \n#        caption = \"data: Nook Plaza and Nook Market\") +\n#   coord_flip() ","cdd1967b":"# data.groupby('month')['duration'].sum()\nsp_mean_rank = vil_ranks.groupby('Species')['wish_rank'].mean().to_frame().reset_index().sort_values(by=['wish_rank'])\nsp_mean_rank.head()","be6b129a":"# ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips)\n# for axes in chart.axes.flat:\n#     axes.set_xticklabels(axes.get_xticklabels(), rotation=65, horizontalalignment='right')\nfig = plt.gcf()\nfig.set_size_inches(12, 8)\nplot_01 = sns.scatterplot(x=\"Species\", y=\"wish_rank\", data=sp_mean_rank)\nfor item in plot_01.get_xticklabels():\n    item.set_rotation(45)\n#plot_01.set_xticklabels(rotation=45, horizontalalignment='right')","2ca19456":"# make it prettier\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\nplot_02 = sns.scatterplot(x=\"Species\", y=\"wish_rank\", \n                          hue=\"Species\", size=\"wish_rank\",\n                          sizes=(40, 800), alpha=0.75, palette=\"BrBG\", legend=False,\n                          data=sp_mean_rank)\nfor item in plot_02.get_xticklabels():\n    item.set_rotation(45)","11bb104d":"# Now do it for personalities\npers_mean_rank = vil_ranks.groupby('Personality')['wish_rank'].mean().to_frame().reset_index().sort_values(by=['wish_rank'])\npers_mean_rank.head()","f18ae06d":"fig = plt.gcf()\nfig.set_size_inches(10, 10)\nplot_02 = sns.scatterplot(x=\"Personality\", y=\"wish_rank\", \n                          hue=\"Personality\", size=\"wish_rank\",\n                          sizes=(40, 1000), alpha=0.75, palette=\"cubehelix\", legend=False,\n                          data=pers_mean_rank)\nfor item in plot_02.get_xticklabels():\n    item.set_rotation(45)","cc3a5d7c":"variables from Ryan: name, species, personality, wish score\nadded: gender, hobby","33451881":"### Data import","bffc70b0":"### Data wrangling","df02f98f":"### Data visualization","7c8f93b9":"### Environment set-up"}}