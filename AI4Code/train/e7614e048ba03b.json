{"cell_type":{"4495d8bb":"code","b1d42195":"code","7af49f33":"code","5ee29594":"code","dc83b62a":"code","2e80b740":"code","0151298c":"code","20c71d7d":"code","0f7dbfda":"code","c75783be":"code","4c996398":"code","11a43623":"code","59ec5313":"code","3d8cabe3":"code","11291812":"code","35fda8f1":"code","fa8b5ef7":"code","c5954808":"code","686245e6":"code","401072ac":"code","8183ae6b":"code","5bd8cdd2":"code","999e4942":"code","f524cf00":"code","2d099504":"code","ab47a99c":"code","4596f805":"code","6a67849f":"code","2ed725cb":"code","07cce92e":"code","ef2c6bcc":"code","4f30c689":"code","6ec3bba3":"code","cabf6e35":"code","2e60ef05":"code","18d7d7c0":"code","176253ac":"code","93a9dd4e":"code","75477e1c":"code","8cc23894":"code","1742ae5e":"code","14dc3c3e":"code","fdd1cd5b":"code","d74d3cd7":"code","2eb1ebb4":"code","6c4448ea":"code","d6d71792":"code","83fbc25e":"code","b64cef88":"code","7758bbeb":"code","4d1e9f18":"code","bef3f8b0":"code","c57bd9f0":"code","2f5c8c62":"code","811d0a2b":"code","d2e14153":"code","f7068243":"code","2b8b39c2":"code","3c2803a7":"code","18c943fe":"code","f321bcba":"code","06e5b7cf":"code","ebeacb4e":"code","0282ead2":"code","9bcba055":"code","596a3684":"code","84177d79":"code","0c3ca030":"code","1d9d795a":"code","f354c9b6":"markdown","d1adefb9":"markdown","a3f6cd58":"markdown","49c0c814":"markdown","e9100c2d":"markdown","3bef2986":"markdown","fab8d011":"markdown","3b573b2f":"markdown","74eb80e6":"markdown","34696c07":"markdown","620d43b7":"markdown","42e4f0aa":"markdown"},"source":{"4495d8bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1d42195":"df=pd.read_csv(\"..\/input\/donorsprediction\/Raw_Data_for_train_test.csv\")","7af49f33":"df","5ee29594":"df.head()","dc83b62a":"df.columns","2e80b740":"df.describe()","0151298c":"df.isnull().sum()","20c71d7d":"df.columns[df.isnull().any()]","0f7dbfda":"df.isnull().sum()","c75783be":"df['TARGET_D']=df['TARGET_D'].fillna(df['TARGET_D'].mean())","4c996398":"# create a list of our conditions\nconditions = [\n    (df['TARGET_D'] >= 50),\n    (df['TARGET_D'] >= 20) & (df['TARGET_D'] < 50),\n    (df['TARGET_D'] >= 13) & (df['TARGET_D'] < 20),\n    (df['TARGET_D'] >= 10) & (df['TARGET_D'] < 13),\n    (df['TARGET_D'] < 10)\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = ['A', 'B', 'C', 'D','E']\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['DONATION_TYPE'] = np.select(conditions, values)\n\n# display updated DataFrame\ndf.head()","11a43623":"df.isnull().sum()","59ec5313":"#target d contains a lot of null values ,so delete this column\ndf=df.drop(['TARGET_D'],axis=1)","3d8cabe3":"df=df.drop(['PUBLISHED_PHONE'],axis=1)","11291812":"df['DONOR_AGE']=df['DONOR_AGE'].fillna(df['DONOR_AGE'].mean())","35fda8f1":"df['DONOR_AGE']=df['DONOR_AGE'].astype('int64')","fa8b5ef7":"df['INCOME_GROUP']=df['INCOME_GROUP'].fillna(df['INCOME_GROUP'].mode()[0])","c5954808":"df['INCOME_GROUP']=df['INCOME_GROUP'].astype('int64')","686245e6":"df['WEALTH_RATING']=df['WEALTH_RATING'].fillna(df['WEALTH_RATING'].mode()[0])","401072ac":"df['WEALTH_RATING']=df['WEALTH_RATING'].astype('int64')","8183ae6b":"df=df.dropna()","5bd8cdd2":"df.columns[df.isnull().any()]","999e4942":"df","f524cf00":"df['SES'].value_counts()","2d099504":"df['SES']=df['SES'].str.replace('?','2')\ndf['SES']=df['SES'].astype('int64')","ab47a99c":"df['URBANICITY'].value_counts()","4596f805":"df['URBANICITY']=df['URBANICITY'].str.replace('?','S')","6a67849f":"df['CLUSTER_CODE'].value_counts()","2ed725cb":"df['CLUSTER_CODE']=df['CLUSTER_CODE'].str.replace('.','40')\ndf['CLUSTER_CODE']=df['CLUSTER_CODE'].astype('int64')","07cce92e":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.barplot(x=df['TARGET_B'],y=df['IN_HOUSE'],data=df)","ef2c6bcc":"sns.barplot(x=df['TARGET_B'],y=df['URBANICITY'],data=df)","4f30c689":"sns.countplot(x=df['TARGET_B'],\n              hue=df['SES'],data=df)","6ec3bba3":"sns.countplot(x=df['TARGET_B'],hue=df['HOME_OWNER'],data=df)","cabf6e35":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","2e60ef05":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(df.columns):\n    if df[i].dtype=='object':\n        df[i]=le.fit_transform(df[i])","18d7d7c0":"df.dtypes","176253ac":"y=df['TARGET_B']\nX=df.drop(['TARGET_B'],axis=1)","93a9dd4e":"X","75477e1c":"y","8cc23894":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)","1742ae5e":"X_train","14dc3c3e":"X_train.dtypes","fdd1cd5b":"para = list(range(100, 1001, 100))\nprint(para)","d74d3cd7":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\nresults = {}\nfor n in para:\n    print('para=', n)\n    model = RandomForestClassifier(n_estimators=n)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    accu = accuracy_score(y_true=y_test, y_pred=preds)\n    f1 = f1_score(y_true=y_test, y_pred=preds, average='micro')\n    print(classification_report(y_true=y_test, y_pred=preds))\n    print('--------------------------')\n    results[n] = f1","2eb1ebb4":"import matplotlib.pylab as plt\n# sorted by key, return a list of tuples\nlists = sorted(results.items()) \np, a = zip(*lists) # unpack a list of pairs into two tuples\nplt.plot(p, a)\nplt.show()","6c4448ea":"best_para = max(results, key=results.get)\nprint('best para', best_para)\nprint('value', results[best_para])","d6d71792":"test_df = pd.read_csv('..\/input\/donorsprediction\/Predict_donor.csv')\ntest_df.head()","83fbc25e":"test_df.dtypes","b64cef88":"test_df.columns[test_df.isnull().any()]","7758bbeb":"test_df['DONOR_AGE']=test_df['DONOR_AGE'].fillna(test_df['DONOR_AGE'].mean())","4d1e9f18":"test_df['DONOR_AGE']=test_df['DONOR_AGE'].astype('int64')","bef3f8b0":"test_df['INCOME_GROUP']=test_df['INCOME_GROUP'].fillna(test_df['INCOME_GROUP'].mode()[0])","c57bd9f0":"test_df['INCOME_GROUP']=test_df['INCOME_GROUP'].astype('int64')","2f5c8c62":"test_df['WEALTH_RATING']=test_df['WEALTH_RATING'].fillna(test_df['WEALTH_RATING'].mode()[0])","811d0a2b":"test_df['WEALTH_RATING']=test_df['WEALTH_RATING'].astype('int64')","d2e14153":"test_df=test_df.dropna()","f7068243":"test_df.columns[test_df.isnull().any()]","2b8b39c2":"test_df","3c2803a7":"test_df.dtypes","18c943fe":"test_df['SES']=test_df['SES'].str.replace('?','2')\ntest_df['SES']=test_df['SES'].astype('int64')","f321bcba":"test_df['URBANICITY']=test_df['URBANICITY'].str.replace('?','S')","06e5b7cf":"test_df['CLUSTER_CODE']=test_df['CLUSTER_CODE'].str.replace('.','40')\ntest_df['CLUSTER_CODE']=test_df['CLUSTER_CODE'].astype('int64')","ebeacb4e":"# Get list of categorical variables\ns = (test_df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","0282ead2":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nfor i in list(test_df.columns):\n    if test_df[i].dtype=='object':\n        test_df[i]=le.fit_transform(test_df[i])","9bcba055":"test_df.dtypes","596a3684":"Target = model.predict(test_df)\nTarget","84177d79":"PREDICTED_df = pd.DataFrame()\nPREDICTED_df['TARGET_B'] = Target\nPREDICTED_df['CONTROL_NUMBER'] = test_df['CONTROL_NUMBER']\nPREDICTED_df.head()","0c3ca030":"PREDICTED_df","1d9d795a":"PREDICTED_df.tail()","f354c9b6":"# Random Forest classifier","d1adefb9":"# Missing values","a3f6cd58":"# Find missing values","49c0c814":"# Data Visulization","e9100c2d":"# make label encoder to categorical coulmns","3bef2986":"# create a new column(DONATION_TYPE)","fab8d011":"Spilt data into train and test","3b573b2f":"# Read Data","74eb80e6":"# Predict the test data","34696c07":"# Define X and y","620d43b7":"# Build model","42e4f0aa":"#  Hypter-parameter tuning"}}