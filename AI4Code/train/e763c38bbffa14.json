{"cell_type":{"bd100777":"code","082efe76":"code","0a6f90d5":"code","48308333":"code","49d2d5ba":"code","213c2682":"code","88587270":"code","15a8d724":"code","7119e544":"code","40b91ea0":"code","3b9b27c5":"code","8f14552b":"code","63671b03":"code","88c2989b":"markdown","190c22bf":"markdown","8a4c4531":"markdown"},"source":{"bd100777":"import numpy as np\nimport pandas as pd\nimport getpass\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes\nfrom mpl_toolkits.axes_grid1.inset_locator import mark_inset\n\n# ==== Setup =======================================================================================\n\nnp.set_printoptions(suppress=True)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 0)\n\n# if getpass.getuser() in ['Ben']:\n#     input_file = 'input\/train.csv'\n# else:\n#     from kaggle.competitions import nflrush\n#     env = nflrush.make_env()\ninput_file = '\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv'\n\n# read train\ntrain = pd.read_csv(filepath_or_buffer = input_file, low_memory = False)","082efe76":"def plot_play(playId, arrows_as = 'Dir'):\n    \"\"\"\n    Plot a single play\n    :param playId: id of the play \n    :param arrows_as: should be either 'Dir' or 'Orientation'\n    :return: plot of players with arrows\n    \"\"\"\n\n    # Get 'play players' and 'play' from train\n    play_players = train.loc[train.PlayId == playId].copy()\n    play = play_players.iloc[[0]]\n\n   # Determine which players are on offense by identifying which team the rusher is on\n    rusher = play_players.loc[play_players.NflId == play_players.NflIdRusher]\n    play_players.loc[:, 'PlayerOnOffense'] = play_players.Team.values == rusher.Team.values\n\n    # Create field 'ArrowAngle'\n    play_players['ArrowAngle'] = play_players['Dir'] if arrows_as == 'Dir' else play_players['Orientation']\n    if (play.Season.values[0] == 2017 and arrows_as == 'Orientation'):\n        play_players['ArrowAngle'] = (360 - play_players.ArrowAngle).mod(360)\n    else:\n        play_players['ArrowAngle'] = (360 - play_players.ArrowAngle + 90).mod(360)\n    play_players['AbsoluteYardLine'] = play_players[['YardLine','PlayDirection','HomeTeamAbbr','PossessionTeam','FieldPosition']].apply(lambda x: 100-x['YardLine'] if x['PossessionTeam'] != x['FieldPosition'] else x['YardLine'],axis=1)\n\n    # Create fields Arrow_dx, Arrow_dy\n    play_players['X'] = play_players[['X','PlayDirection']].apply(lambda x: x['X'] if x['PlayDirection'] == 'right' else 120 - x['X'],axis=1)\n    direction = 1 if play['PlayDirection'].values[0] == 'right' else -1\n    play_players['Arrow_dx'] = np.cos(play_players.ArrowAngle * (np.pi\/180))  * direction \n    play_players['Arrow_dy'] = np.sin(play_players.ArrowAngle * (np.pi\/180))  * direction\n    totalYards  = int(play['Yards']) \n    Z = totalYards + play_players['AbsoluteYardLine'].values[0] - (int(play_players.loc[play_players.NflId == play_players.NflIdRusher]['X'])-10)\n    totalYards = Z\n\n\n\n\n    # Split offense and defense players\n    play_players_offense = play_players.loc[play_players.PlayerOnOffense].copy()\n    play_players_rusher = play_players.loc[play_players.NflId == play_players.NflIdRusher].copy()\n   # print(play_players_offense)\n    play_players_defense = play_players.loc[~play_players.PlayerOnOffense].copy()\n\n    # Plot\n    #print(playId)\n    fig, ax = plt.subplots(figsize=(20, 10))\n    anchor = (0,0)\n    loc = 1\n    if  play_players_defense.X.min() > 60: loc =2\n    axins = zoomed_inset_axes(ax, 2, loc=loc,borderpad=1) # zoom-factor: 2.5, location: upper-left\n\n\n    ax.axvline(x=10, linewidth=1)\n    ax.axvline(x=110, linewidth=1)\n    axins.axvline(x=10, linewidth=1)\n    axins.axvline(x=110, linewidth=1)\n    \n    # TEST \n    #ax.add_artist(w1)\n\n\n    for i in range (11,110,1):\n        w = 1 if i % 10 == 0 else .1\n        if i==60: w = 2\n        ax.axvline(x=i, linewidth=w,ls='--',c='red')\n        axins.axvline(x=i, linewidth=w,ls='--',c='red')\n\n        \n    ax.axhline(y=0, linewidth=1)\n    ax.axhline(y=53.5, linewidth=1)\n    \n    axins.axhline(y=0, linewidth=1)\n    axins.axhline(y=53.5, linewidth=1)\n    ax.scatter(play_players_offense.X, play_players_offense.Y, color=\"blue\", label=\"offense\", s = 30)\n    ax.scatter(play_players_rusher.X, play_players_rusher.Y, color=\"yellow\", label=\"rusher\", s = 30  )\n    ax.scatter(play_players_defense.X, play_players_defense.Y, color=\"red\", label=\"defense\", s = 30)\n\n    for i in range(0, play_players.shape[0]):\n     #   print play_players.NflId.values[i] , play_players.NflIdRusher, play_players.NflId.values[i] == play_players.NflIdRusher.values[i]\n        ax.arrow(\n            x = play_players.X.values[i],\n            y = play_players.Y.values[i],\n            dx = play_players.Arrow_dx.values[i],\n            dy = play_players.Arrow_dy.values[i],\n            head_width = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n            head_length = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n            fc= 'blue' if play_players['Team'].values[i] == 'home' else 'red',\n            ec='blue' if play_players['Team'].values[i] == 'home' else 'red'\n            \n        )\n        axins.arrow(\n            x = play_players.X.values[i],\n            y = play_players.Y.values[i],\n            dx = play_players.Arrow_dx.values[i],\n            dy = play_players.Arrow_dy.values[i],\n            head_width = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n            head_length = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n            fc= 'blue' if play_players['Team'].values[i] == 'home' else 'red',\n            ec='blue' if play_players['Team'].values[i] == 'home' else 'red'\n            \n        )\n        \n        \n        if play_players.NflId.values[i] == play_players.NflIdRusher.values[i]:\n            play_players.loc[play_players.NflId == play_players.NflIdRusher,'Arrow_dx'] = np.cos(play_players.ArrowAngle * (np.pi\/180)) * totalYards * direction \n            play_players.loc[play_players.NflId == play_players.NflIdRusher,'Arrow_dy'] = np.sin(play_players.ArrowAngle * (np.pi\/180)) * totalYards *  direction  * 0\n\n            ax.arrow(\n                x =  play_players['AbsoluteYardLine'].values[0] + 10 , \n                y = play_players.Y.values[i] ,\n                dx = play_players.Arrow_dx.values[i] - play_players['AbsoluteYardLine'].values[0] - 10 - (int(play_players.loc[play_players.NflId == play_players.NflIdRusher]['X'])-10),\n                dy = play_players.Arrow_dy.values[i]  ,\n                head_width = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n                head_length = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n                fc= 'yellow' if play_players.NflId.values[i] == play_players.NflIdRusher.values[i] else  'black',\n                ec='yellow' if play_players.NflId.values[i] == play_players.NflIdRusher.values[i] else ('blue' if play_players['Team'].values[i] != 'home' else 'red'))\n            axins.arrow(\n                x =  play_players['AbsoluteYardLine'].values[0] + 10 , \n                y = play_players.Y.values[i] ,\n                dx = play_players.Arrow_dx.values[i] - play_players['AbsoluteYardLine'].values[0] - 10 - (int(play_players.loc[play_players.NflId == play_players.NflIdRusher]['X'])-10),\n                dy = play_players.Arrow_dy.values[i]  ,\n                head_width = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n                head_length = 1 if (play_players.NflId.values[i] == play_players.NflIdRusher.values[i]) else .5,\n                fc= 'yellow' if play_players.NflId.values[i] == play_players.NflIdRusher.values[i] else  'black',\n                ec='yellow' if play_players.NflId.values[i] == play_players.NflIdRusher.values[i] else ('blue' if play_players['Team'].values[i] != 'home' else 'red'))\n\n            \n    ax.text(60, 0 - 10, 'Home Sideline', horizontalalignment='center', verticalalignment='bottom')\n    ax.text(60, 53.5 + 10, 'Away Sideline', horizontalalignment='center', verticalalignment='top', rotation=180)\n    ax.set_xlim(0, 120)\n    ax.set_ylim(0 - 5, 53.5 + 5)\n    \n    x1, x2, y1, y2 = 10, 20, 1, 30 # specify the limits\n    axins.scatter(play_players_offense.X, play_players_offense.Y, color=\"blue\", s = play_players_offense.PlayerWeight-150)\n    axins.scatter(play_players_rusher.X, play_players_rusher.Y, color=\"yellow\", label=\"rusher\", s = play_players_rusher.PlayerWeight-150  )\n    axins.scatter(play_players_defense.X, play_players_defense.Y, color=\"red\", label=\"defense\", s = play_players_defense.PlayerWeight-150 )\n\n    axins.set_xlim(play_players_offense.X.min()-3, play_players_defense.X.max()+4) # apply the x-limits\n    axins.set_ylim(play_players_offense.Y.min()-3, play_players_defense.Y.max()+4) # apply the x-limits\n    mark_inset(ax, axins, loc1=1, loc2=1, fc='white', ec=\"0.5\")\n\n\n\n    #ax.set_title(\"PlayId: {play.PlayId.values[0]} (moving {play.PlayDirection.values[0]})\\n{arrows_as}\")\n    ax.set_title( \"Total Yards\"+str(int(play['Yards']) ))\n    fig.legend()\n    fig.show()\n    \n\n\n","0a6f90d5":"# Derrick Henry, 2018, moving right, https:\/\/www.youtube.com\/watch?v=tlZvgdcIXvI\nplot_play(20181206001238, 'Orientation')","48308333":"# Lamar Miller, 2018, moving left, https:\/\/www.youtube.com\/watch?v=p-ptA3nQxCA\nplot_play(20181126001222, 'Orientation')","49d2d5ba":"# Nick Chubb, 2018, moving left, https:\/\/www.youtube.com\/watch?v=NvQiykZIBNA\nplot_play(20181111022155, 'Orientation')","213c2682":"# Adrian Peterson, 2018, moving left, https:\/\/www.youtube.com\/watch?v=AMLKvNs2Ec8\nplot_play(20181203001224, 'Orientation')","88587270":"# Leonard Fournette, 2017, moving right, https:\/\/youtu.be\/Dp3zkB3NRDA?t=114\nplot_play(20171008074020, 'Orientation')","15a8d724":"# Melvin Gordon, 2017, moving right, https:\/\/www.youtube.com\/watch?v=oUHaQKmyn7U\nplot_play(20171029030426, 'Orientation')","7119e544":"# Bilal Powell, 2017, moving left, https:\/\/www.youtube.com\/watch?v=zDtDanILhAc\nplot_play(20171001080397, 'Orientation')","40b91ea0":"# Saquon Barkley, 2018, moving left, https:\/\/www.youtube.com\/watch?v=E4IesbDwpq4\nplot_play(20181209081494, 'Orientation')","3b9b27c5":"# Kerryon Johnson, 2018, moving right, https:\/\/youtu.be\/cgZnUFAtd0c?t=27\nplot_play(20181021060782, 'Orientation')","8f14552b":"# Alvin Kamara, 2017, moving right, https:\/\/www.youtube.com\/watch?v=4XAYJKiT2rc\nplot_play(20171126070740, 'Orientation')","63671b03":"train","88c2989b":"## using the original Understanding X Y Dir Orientation \n### added colors of the rusher, bigger arrow\n### and rushing yards yellow arrow (corrected arrow direction) \n### added S = Weight of player\n### added Inset of the play zoomed x2 \n\n","190c22bf":"![](https:\/\/www.kaggleusercontent.com\/kf\/22897395\/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..3__gWnURfFhtMJOVl-WLeA.FLYaLXCwrfg60Pq06X1Nb5dL2tUiaRNh6p9KEKUAcqnodte__bchGsGl5MZdsc3jpO8sK5MbDFvBTlXclhWRu6HyOrBAE7cpY54kCtrmQEGvP4pG7pwjm513GKMes3bsoXruN1cnbNLGzgOetsiX5Krlt7ycMSGElm0j4IwBFvwHZLxrIWenjKsI4vAfEGlk5hBk7Je5dDwQ7AI0RgZsQ0D6DFgTp0zbyqizWhLZPzjcMjT6Na6_rIsExza96Som9I1k5vwZpOc65Y9y-j0IVKo2_ArG4YtymD-WkqYBFEMx5-W23E9eCvEKr0Dz_dc9PnoAwdmv59u0l083lzaEgWkLsF8ZFeGnraS9GhbbxWj4hNNDO-KQqcv0kdtYum2rSLhpDn3kRia6PapiQQ5zyq6JFMXr9SWwwhlD82kY71SSg3XdDfb0-SmvMHtjCaS2YcT9BUiYfLWtDEMUYlwpNMUS_vq8-fisyY-mNeB75TDgzXq6xkTEXZAyC4atfwxaVoLjM9SfX4tfwFvhkO0dLr1Xfwnsmbkeu95u1oebskW1vkZaqAIIv9dZzlWq0pzk73Gzci1Ov2QfE8QQkBD9kDOYA3dq8B0nge6YDYmiQxYQp8MpoBcHVhB43CyMGVIancrvqftApZ0DO6p1-sBAAg.GYr7J89H1F4aYwcMSPQgQg\/__results___files\/__results___2_0.png)","8a4c4531":"![image.png](attachment:image.png)"}}