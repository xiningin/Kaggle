{"cell_type":{"8aeef707":"code","75de4e92":"code","d63ee7fc":"code","eef7cedf":"code","495f694e":"code","d5f72b6e":"code","86309ced":"code","e4eb3cc3":"code","d5d4c2ec":"code","56a7b537":"code","5ec526e2":"code","6ddaee6d":"code","03cf2dcf":"code","ea4b395e":"code","bec26820":"code","a4005d45":"code","9cb5bf63":"code","70e7d801":"code","b0f30ee4":"code","dd08acd2":"markdown","38ee4423":"markdown","2a62f346":"markdown","7ee1e086":"markdown","1dc7fb58":"markdown"},"source":{"8aeef707":"import pandas as pd\nimport os\nfrom skimage.transform import resize\nfrom skimage.io import imread\nimport numpy as np\nimport matplotlib.pyplot as plt","75de4e92":"Train_path='..\/input\/chest-xray-pneumonia\/chest_xray\/train' \nTest_path='..\/input\/chest-xray-pneumonia\/chest_xray\/test' ","d63ee7fc":"def load_Data(dir):\n    Categories=['NORMAL','PNEUMONIA']\n    X_arr=[]#input array\n    Y_arr=[] #output array\n    for i in Categories:\n        dem=0\n        print(f'loading... category : {i}')\n        path=os.path.join(dir,i)\n        for img in os.listdir(path):\n            img_array=imread(os.path.join(path,img))\n            img_resized=resize(img_array,(100,100,3))\n            X_arr.append(img_resized.flatten()\/255)\n            Y_arr.append(Categories.index(i))\n            if dem==1341:break \n            else :dem+=1\n        print(f'loaded category:{i} successfully')\n    print(\"Completed!\")\n    return X_arr,Y_arr","eef7cedf":"X_train,y_train=load_Data(Train_path)","495f694e":"X_test,y_test=load_Data(Test_path)","d5f72b6e":"from collections import Counter\nd=Counter(y_train)               \nplt.bar(['NORMAL','PNEUMONIA'], d.values(),width=0.5)","86309ced":"\nfrom sklearn.decomposition import PCA\npca = PCA()\nX_new = pca.fit_transform(X_train)","e4eb3cc3":"explained_variance=pca.explained_variance_ratio_\nlen(explained_variance[explained_variance>0.0001])","d5d4c2ec":"from sklearn.decomposition import PCA\npca=PCA(n_components=373)\nX_train=pca.fit_transform(X_train)","56a7b537":"X_test=pca.transform(X_test)","5ec526e2":"# from sklearn.svm import SVC\n# from sklearn.model_selection import  GridSearchCV\n# parameters={'C':[0.01,0.1,1,10],\n#            'gamma': [1,0.1,0.001,0.0001]}\n# clf = GridSearchCV(SVC(kernel='rbf' ), parameters)\n# clf.fit(X_new,y_train)\n# SVM_model = clf.best_estimator_\n# print (clf.best_score_, clf.best_params_)","6ddaee6d":"from sklearn.svm import SVC\nclf_SVM=SVC(C=0.1,kernel='rbf' )\nclf_SVM.fit(X_train,y_train)\n","03cf2dcf":"from sklearn.linear_model import LogisticRegression\nLGR = LogisticRegression(solver='liblinear',C=1)\nLGR.fit(X_train,y_train)","ea4b395e":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier \nABR= AdaBoostClassifier()\nABR.fit(X_train,y_train)","bec26820":"test_path='..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nfrom tensorflow.keras import models\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \nmodel = models.load_model('..\/input\/models\/Diagnose_Pneumoinia.h5')\ntest_datagen=ImageDataGenerator(rescale = 1.\/255.0)\ntest_generator=test_datagen.flow_from_directory(\n        test_path,\n        target_size=(116,82),\n        class_mode='binary',\n        batch_size=32,\n        shuffle=False)\ny_pred = np.round(model.predict(test_generator))\ny_true = test_generator.classes\ny_labels = list(test_generator.class_indices.keys())","a4005d45":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(y_train,clf_SVM.predict(X_train)))\nprint (classification_report(y_train,LGR.predict(X_train)))\nprint (classification_report(y_train,ABR.predict(X_train)))","9cb5bf63":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve, accuracy_score,ConfusionMatrixDisplay\nprint (classification_report(y_test,clf_SVM.predict(X_test)))\nprint (classification_report(y_test,LGR.predict(X_test)))\nprint (classification_report(y_test,ABR.predict(X_test)))\nprint(classification_report(y_true, y_pred, target_names=y_labels))\n","70e7d801":"plot_confusion_matrix(clf_SVM,X_test,y_test)\nplot_confusion_matrix(LGR,X_test,y_test)\nplot_confusion_matrix(ABR,X_test,y_test)\ndisplay(ConfusionMatrixDisplay(confusion_matrix(y_true, y_pred), display_labels=['Normal', 'Pneumonia']).plot())","b0f30ee4":"from sklearn.metrics import roc_auc_score,roc_curve\nfpr, tpr, thresholds=metrics.roc_curve(y_true,y_pred)\nauc_score=roc_auc_score(y_true,y_pred)\nfig=plot_roc_curve(clf_SVM,X_test,y_test)\nfig=plot_roc_curve(LGR,X_test,y_test,color='r',ax = fig.ax_)\nfig=plot_roc_curve(ABR,X_test,y_test,color='black',ax = fig.ax_)\nplt.plot(fpr, tpr, label='CNN (AUC='+str(round(auc_score,2))+\")\")\nplt.legend()\nplt.title(\"ROC CURVE\")\nplt.show()","dd08acd2":"\n# Extract image attributes","38ee4423":"## SVM Model","2a62f346":"# Evaluate Model","7ee1e086":"# Traing Model","1dc7fb58":"## Logistic Regression Model "}}