{"cell_type":{"f68ac253":"code","2cb01ed3":"code","d0b54dea":"code","343a0c07":"code","d89cad95":"code","3e9ec599":"code","4c7e2fdc":"code","0366d444":"code","751a9f8f":"code","2bf8eb38":"code","29fd74d4":"code","c4c77156":"code","053e429e":"code","b8c3b5a9":"code","16a7fb13":"code","1b8cfbd5":"code","f51901e1":"code","89f5c61e":"code","4c3ef721":"code","89dfc40a":"markdown","43fa991f":"markdown","ef8208f7":"markdown","0a7affe2":"markdown","b7ff3090":"markdown","d02d55d5":"markdown","b8040186":"markdown","1b9f5bbe":"markdown","e56c5bb8":"markdown","ebd025ae":"markdown","e073c86c":"markdown","fe85d0b4":"markdown","40fd7110":"markdown","6bd97f0b":"markdown"},"source":{"f68ac253":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cb01ed3":"!pip install tensorflow \n!pip install matplotlib \n","d0b54dea":"import tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.optimizers import RMSprop","343a0c07":"train_dir='..\/input\/cotton-disease-dataset\/Cotton Disease\/train' #The directoery path of train dataset\ntrain_ds=tf.keras.preprocessing.image_dataset_from_directory(train_dir,image_size=(224,224))\n","d89cad95":"val_dir='..\/input\/cotton-disease-dataset\/Cotton Disease\/val' #The directoery path of val dataset\nval_ds=tf.keras.preprocessing.image_dataset_from_directory(val_dir,image_size=(224,224))\n","3e9ec599":"class_names=train_ds.class_names\nprint('There are total {} classes are as below'.format(len(class_names)))\nprint(class_names)","4c7e2fdc":"plt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[labels[i]])\n    plt.axis(\"off\")","0366d444":"def preprocess_image_input(input_images):\n  input_images = input_images.astype('float32')\n  output_ims = tf.keras.applications.resnet50.preprocess_input(input_images)\n  return output_ims\n","751a9f8f":"'''\nFeature Extraction is performed by ResNet50 pretrained on imagenet weights. \nInput size is 224 x 224.\n'''\ndef feature_extractor(inputs):\n\n  feature_extractor = tf.keras.applications.resnet.ResNet50(input_shape=(224, 224, 3),\n                                               include_top=False,\n                                               weights='imagenet')(inputs)\n  return feature_extractor\n","2bf8eb38":"'''\nDefines final dense layers and subsequent softmax layer for classification.\n'''\ndef classifier(inputs):\n    x = tf.keras.layers.GlobalAveragePooling2D()(inputs)\n    x = tf.keras.layers.Flatten()(x)\n    x = tf.keras.layers.Dense(1024, activation=\"relu\")(x)\n    x = tf.keras.layers.Dense(512, activation=\"relu\")(x)\n    x = tf.keras.layers.Dense(10, activation=\"softmax\", name=\"classification\")(x)\n    return x","29fd74d4":"def final_model(inputs):\n\n    #resize = tf.keras.layers.UpSampling2D(size=(7,7))(inputs)\n\n    resnet_feature_extractor = feature_extractor(inputs)\n    classification_output = classifier(resnet_feature_extractor)\n\n    return classification_output","c4c77156":"def define_compile_model():\n  inputs = tf.keras.layers.Input(shape=(224,224,3))\n  \n  classification_output = final_model(inputs) \n  model = tf.keras.Model(inputs=inputs, outputs = classification_output)\n \n  model.compile(optimizer='SGD', \n                loss='sparse_categorical_crossentropy',\n                metrics = ['accuracy'])\n  \n  return model","053e429e":"model = define_compile_model()\n","b8c3b5a9":"model.summary()","16a7fb13":"history=model.fit(train_ds,validation_data=val_ds,epochs=30)","1b8cfbd5":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","f51901e1":"test_dir='..\/input\/cotton-disease-dataset\/Cotton Disease\/test' #The directoery path of train dataset\ntest_ds=tf.keras.preprocessing.image_dataset_from_directory(test_dir,image_size=(224,224))\n","89f5c61e":"model.evaluate(test_ds)","4c3ef721":"predictions=model.predict(test_ds)","89dfc40a":"<h3>The list and their usage of libraies <\/h3>\n<ul>\n    <li>Tensorflow:- For using data flow graphs to build models and transfer learning <\/li>\n    <li> Os:- For using the files and interect with os <\/li>\n    <li>Matplotlib :- For Displaying images and plottings<\/li>\n    <li>Keras :- For  for creating deep models  and Keras is also used for distributed training of deep learning models <\/li>\n   \n<\/ul>","43fa991f":"## Define the Network\nI shall be performing transfer learning on **ResNet50** available in Keras.\n- I shall load pre-trained **imagenet weights** to the model.\n- I shall choose to retain all layers of **ResNet50** along with the final classification layers.","ef8208f7":"### Preprocess Dataset\nHere, I'll perform normalization on images in training and validation set. \n- I'll use the function [preprocess_input](https:\/\/github.com\/keras-team\/keras-applications\/blob\/master\/keras_applications\/resnet50.py) from the ResNet50 model in Keras.","0a7affe2":"<ul>\n    <li> Here I am using the concept of transer learning <\/li>\n    <li> Here I am using <a herf='https:\/\/keras.io\/api\/applications\/resnet\/'>Resnet50 model<\/a> and the weights of ImageNet Model  \n        <li> Here I am using functional API from tensorflow , You can also use Sequnaital API to make model<\/li>\n<\/ul>","b7ff3090":"# Seeing images of dataset","d02d55d5":"## let's evaluate model on test set ","b8040186":"<h3> Seeing the all the class names of Dataset <\/h3>","1b9f5bbe":"<font size=60px color='red'>Importing images and creating dataset <\/font>","e56c5bb8":"# Seeing Model Summary :)","ebd025ae":"## It gives <b> 100% <\/b> Accuracy on test set","e073c86c":"<h2> Importing Libaries <\/h3>","fe85d0b4":"## Now train and validate model on training and validation dataset","40fd7110":"<font size=50px > here we Go for Model Creation <\/font>","6bd97f0b":"## Installing some important libaries "}}