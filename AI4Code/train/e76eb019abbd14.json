{"cell_type":{"7a3116fb":"code","94ed4545":"code","d66604ee":"code","c992bd19":"code","107d8214":"code","d9cf1e2d":"code","62127739":"code","1fc61b65":"code","801556e9":"code","ff6937b9":"code","cbc17915":"code","8f86f5de":"code","a86bc7b8":"code","ba0c608a":"code","4091a4b0":"code","9c37b353":"code","4b1010af":"code","8e52ee85":"code","092a5005":"code","c05a4045":"code","1c3645f6":"code","396189ac":"code","ceabb400":"code","2e5e45cc":"code","f0c46937":"code","7236effd":"code","2a680574":"code","2e7e3b23":"code","cc32322d":"code","17bd3d4b":"code","879719d0":"code","69e5b2c4":"code","07c597c0":"code","aa0fe973":"code","a85baf5a":"code","9bb01756":"code","9bfee6e8":"code","7e7cb3b2":"code","8d761d8b":"code","aa3d664e":"code","9dc2bd0d":"code","592a1d79":"code","206084a1":"code","65277be5":"code","285eaa0d":"code","4f78483f":"code","c3323f3c":"code","b5fff487":"code","8aa5f3cf":"code","796b9087":"code","7dc14a03":"code","0e94cdde":"code","4c17c7b1":"code","04291524":"code","7d420200":"code","1199c3ec":"markdown","73a2a0cf":"markdown","49cdfcb7":"markdown","ef42e692":"markdown","5048bdc0":"markdown","8ce82fb8":"markdown","e7d525fd":"markdown","537ee35f":"markdown","031b1918":"markdown","80cb7cc6":"markdown","2bf26de0":"markdown","687f7a8c":"markdown","e0cf1efd":"markdown"},"source":{"7a3116fb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport shap\nfrom sklearn.datasets import load_boston, load_diabetes\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error","94ed4545":"pd.options.display.max_columns = None","d66604ee":"sns.set(font_scale=1.4)\nsns.set_style({'font.family': 'serif',\n               'fontname': 'Times New Roman'})","c992bd19":"boston_data = load_boston()","107d8214":"boston_df = pd.DataFrame(boston_data['data'], \n                         columns=boston_data['feature_names'])","d9cf1e2d":"boston_df.head()","62127739":"boston_df['PRICES'] =  boston_data['target']\nboston_df.head()","1fc61b65":"boston_df.shape","801556e9":"plt.figure(figsize = (15,8))\n\nax = sns.scatterplot(data=boston_df, \n                     x='PRICES', \n                     y='RM')\n\nax.set_xlabel('Valor da casa por 10.000 d\u00f3lares')\nax.set_ylabel('Qtd. de quartos')\n\nplt.show()","ff6937b9":"plt.figure(figsize = (15,8))\n\nax = sns.scatterplot(data=boston_df, \n                     x='PRICES', \n                     y='RM',\n                     hue='AGE',\n                     size='AGE', \n                     sizes=(20, 200))\n\nax.set_xlabel('Valor da casa por 10.000 d\u00f3lares')\nax.set_ylabel('Qtd. de quartos')\n\nplt.legend(title='Idade', loc='upper left')\n\nplt.show()","cbc17915":"X = boston_df['RM'].values.reshape(-1, 1)\ny = boston_df['PRICES'].values","8f86f5de":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.25,\n                                                    random_state=0)","a86bc7b8":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","ba0c608a":"linreg_model = SGDRegressor(loss='squared_loss',\n                            learning_rate='constant',\n                            max_iter=10,\n                            eta0=0.01,\n                            verbose=1,\n                            tol=None,\n                            random_state=0)","4091a4b0":"linreg_model.fit(X_train, y_train)","9c37b353":"print(f'RM = {int(linreg_model.coef_)}')\nprint(f'CONST = {int(linreg_model.intercept_)}')","4b1010af":"y_pred = linreg_model.predict(X_test)","8e52ee85":"print(f'MSE = {mean_squared_error(y_test, y_pred)}')","092a5005":"plt.figure(figsize = (15,8))\n\nplt.scatter(boston_df['PRICES'], boston_df['RM'])\nplt.plot(y_pred, X_test, color='r')\n\nplt.xlabel('Valor da casa por 10.000 d\u00f3lares')\nplt.ylabel('Qtd. de quartos')\n\nplt.show()","c05a4045":"boston_df","1c3645f6":"X = boston_df.loc[:,'CRIM':'LSTAT'].values\ny = boston_df['PRICES'].values","396189ac":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.25,\n                                                    random_state=0)","ceabb400":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","2e5e45cc":"linreg_model = SGDRegressor(loss='squared_loss',\n                            learning_rate='constant',\n                            max_iter=10,\n                            eta0=0.01,\n                            verbose=1,\n                            tol=None,\n                            random_state=0)","f0c46937":"linreg_model.fit(X_train, y_train)","7236effd":"for f, c in zip(boston_df.columns[:-1], linreg_model.coef_.tolist()):\n    print(f'{f} = {int(c)}')\n\nprint(f'CONST = {int(linreg_model.intercept_)}')","2a680574":"y_pred = linreg_model.predict(X_test)","2e7e3b23":"print(f'MSE = {mean_squared_error(y_test, y_pred)}')","cc32322d":"explainer = shap.Explainer(linreg_model.predict, X_test)\nshap_values = explainer(X_train)","17bd3d4b":"plt.figure(figsize = (15,8))\nax = shap.summary_plot(shap_values, \n                       boston_df.columns,\n                       plot_type='bar')\nplt.show()","879719d0":"diabetes_data = load_diabetes()","69e5b2c4":"diabetes_df = pd.DataFrame(diabetes_data['data'], \n                           columns=diabetes_data['feature_names'])","07c597c0":"diabetes_df.head()","aa0fe973":"diabetes_df['PROGRESSION'] = diabetes_data['target']\ndiabetes_df.head()","a85baf5a":"diabetes_df.shape","9bb01756":"X = diabetes_df.loc[:,'age':'s6'].values\ny = diabetes_df['PROGRESSION'].values","9bfee6e8":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.25,\n                                                    random_state=0)","7e7cb3b2":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","8d761d8b":"linreg_model = LinearRegression()","aa3d664e":"linreg_model.fit(X_train, y_train)","9dc2bd0d":"for f, c in zip(diabetes_df.columns[:-1], linreg_model.coef_.tolist()):\n    print(f'{f} = {int(c)}')\n\nprint(f'CONST = {int(linreg_model.intercept_)}')","592a1d79":"y_pred = linreg_model.predict(X_test)","206084a1":"print(f'MSE = {mean_squared_error(y_test, y_pred)}')","65277be5":"explainer = shap.Explainer(linreg_model.predict, X_test)\nshap_values = explainer(X_train)","285eaa0d":"plt.figure(figsize = (15,8))\nax = shap.summary_plot(shap_values, \n                       diabetes_df.columns,\n                       plot_type='bar')\nplt.show()","4f78483f":"expec_vida_df = pd.read_csv('..\/input\/lifeexpectancy\/life-expectancy.csv')","c3323f3c":"expec_vida_df.head()","b5fff487":"expec_vida_EUA_df = expec_vida_df[expec_vida_df['Code'] == 'USA']\nexpec_vida_EUA_df.head()","8aa5f3cf":"plt.figure(figsize = (10,6))\n\nax = sns.scatterplot(data=expec_vida_EUA_df, \n                     x='Year', \n                     y='Life expectancy (years)')\n\nax.set_xlabel('Anos')\nax.set_ylabel('Expectativa de vida (idade)')\n\nplt.show()","796b9087":"X = expec_vida_EUA_df['Life expectancy (years)'].values.reshape(-1, 1)\ny = expec_vida_EUA_df['Year'].values","7dc14a03":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.25,\n                                                    random_state=0)","0e94cdde":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","4c17c7b1":"linreg_model = LinearRegression()\nlinreg_model.fit(X, y)\ny_pred_lin = linreg_model.predict(X)","04291524":"polyreg_model = PolynomialFeatures(degree=3)\nX_poly = polyreg_model.fit_transform(X)\nlinreg_model = LinearRegression()\nlinreg_model.fit(X_poly, y)\ny_pred_log = linreg_model.predict(polyreg_model.fit_transform(X))","7d420200":"plt.figure(figsize = (10,6))\n\nplt.scatter(y, X)\nplt.plot(y_pred_lin, X, color='g')\nplt.plot(y_pred_log, X, color='r')\n\nax.set_xlabel('Anos')\nax.set_ylabel('Expectativa de vida (idade)')\n\nplt.show()","1199c3ec":"### 1.1) Primeiros passos","73a2a0cf":"### 2.2) Atividade pr\u00e1tica: \n\n* Verifique os resultados que podem ser obtidos ao se analisar o Brasil e o Canad\u00e1.\n    * Filtre os dados, gerando um novo DataFrame;\n    * Verifique as diferen\u00e7as entre a regress\u00e3o linear e polinomial\n    * Que valor foi escolido para o par\u00e2metro `degree`?","49cdfcb7":"### 2.1) Atividade pr\u00e1tica: \n\n* Altere o par\u00e2metro `degree` para mais e para menos. \n    * O que voc\u00ea percebe?","ef42e692":"## 1) Regress\u00e3o Linear","5048bdc0":"#### 1.1.2) Atividade pr\u00e1tica: \n\n* Altere o par\u00e2metro `max_iter` para mais e para menos. \n    * O que voc\u00ea percebe? \n    * O que acontece com o valor da m\u00e9trica de avalia\u00e7\u00e3o do modelo?","8ce82fb8":"---","e7d525fd":"#### 2.2.1) Brasil","537ee35f":"#### 2.2.2) Canad\u00e1","031b1918":"#### 1.1.3) Criando um modelo a partir de m\u00faltiplas features","80cb7cc6":"# Regress\u00e3o Linear e Polinomial\n\n* T\u00f3picos abordados:\n    * Apresenta\u00e7\u00e3o da biblioteca Scikit Learn;\n    * Problemas de regress\u00e3o em aprendizagem de m\u00e1quina;\n    * Regress\u00e3o linar;\n    * Regress\u00e3o log\u00edstica;\n    * Mean Squared Error (MSE) - Erro Quadr\u00e1tico M\u00e9dio;\n    * Stochastic gradient descent (SGD) - M\u00e9todo do Gradiente Estoc\u00e1stico.","2bf26de0":"## 2) Regress\u00e3o polinomial","687f7a8c":"#### 1.1.4) Atividade pr\u00e1tica:\n\n* Crie o seu modelo de regress\u00e3o linear por meio de m\u00faltiplas features.\n* Qual foi o valor do par\u00e2metro `max_iter`? \n* Qual foi o valor da sua m\u00e9trica de avalia\u00e7\u00e3o do modelo?","e0cf1efd":"#### 1.1.1) Criando um modelo a partir de uma \u00fanica feature"}}