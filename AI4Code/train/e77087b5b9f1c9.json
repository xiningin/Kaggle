{"cell_type":{"3ef249d0":"code","8fc27196":"code","b21191b5":"code","1644a9b5":"code","c6d64b62":"code","78a999eb":"code","5b9cac6b":"code","47e7d9e4":"code","5f00c655":"code","1d75aea6":"code","eb1bf87c":"code","fd7fb757":"code","1266555e":"code","fceff42e":"code","ea70c29a":"code","33b68a48":"code","3873afac":"code","51563d79":"code","5caf0337":"code","0ea2ac52":"code","e56790d4":"code","f297f201":"code","a3c28abc":"code","14de342b":"code","d70cc4db":"code","d6281c29":"code","660fdd08":"code","fb13e1af":"code","4d2778b3":"code","6c0eb4be":"code","31e31a64":"code","bd5e4c71":"code","82c45487":"code","1d081dee":"code","1f508654":"code","c252cb54":"code","650f8f14":"code","29ba243c":"code","8f49bd00":"code","112b4abe":"code","316fa3dc":"code","feebfbb9":"code","f5d3fbc0":"code","91140636":"code","00bbdce1":"code","530b8bc4":"code","8e918f6b":"code","08be8328":"code","0b875995":"code","ffd88a0a":"code","f9663988":"markdown","d1e3b4cb":"markdown","6a0a1736":"markdown","2bcd7181":"markdown","9648ae5c":"markdown","e8c8b234":"markdown","b247cf29":"markdown","e4260064":"markdown","3cc05c88":"markdown","01e6aedb":"markdown","ee9690c3":"markdown","6a9cb285":"markdown","05190ec1":"markdown","ac5d12f6":"markdown","b22c84bd":"markdown","b5dec9f2":"markdown","875987ac":"markdown","1f5e7b29":"markdown","11371546":"markdown","aebfa018":"markdown","b398ebb6":"markdown","d8e62bf0":"markdown","9e8b5202":"markdown","c6222c36":"markdown","38307c33":"markdown","7eb50208":"markdown","1ea5602f":"markdown","4869d207":"markdown","35827c83":"markdown","9c4e0256":"markdown","3d8a15d5":"markdown","e27501ba":"markdown","e5549521":"markdown","30ebf59c":"markdown","21d26c01":"markdown","3a4cc978":"markdown","d47fe452":"markdown","a30ebbaf":"markdown","cfc34404":"markdown","b2d33db6":"markdown","9acf1ab2":"markdown","ce949de5":"markdown","bbce3863":"markdown","3fcad747":"markdown","27a33d80":"markdown","5055964d":"markdown","9fb82bee":"markdown","92c3ddae":"markdown","29759b56":"markdown","81a54ca1":"markdown","c49dc29f":"markdown","4173812e":"markdown","ca6160d2":"markdown","b65bac24":"markdown"},"source":{"3ef249d0":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 8)\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport collections\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom ipywidgets import Image\nfrom io import StringIO\nimport pydotplus #pip install pydotplus","8fc27196":"# Create dataframe with dummy variables\ndef create_df(dic, feature_list):\n    out = pd.DataFrame(dic)\n    out = pd.concat([out, pd.get_dummies(out[feature_list])], axis = 1)\n    out.drop(feature_list, axis = 1, inplace = True)\n    return out\n\n# Some feature values are present in train and absent in test and vice-versa.\ndef intersect_features(train, test):\n    common_feat = list( set(train.keys()) & set(test.keys()))\n    return train[common_feat], test[common_feat]","b21191b5":"features = ['Looks', 'Alcoholic_beverage','Eloquence','Money_spent']","1644a9b5":"df_train = {}\ndf_train['Looks'] = ['handsome', 'handsome', 'handsome', 'repulsive',\n                         'repulsive', 'repulsive', 'handsome'] \ndf_train['Alcoholic_beverage'] = ['yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes']\ndf_train['Eloquence'] = ['high', 'low', 'average', 'average', 'low',\n                                   'high', 'average']\ndf_train['Money_spent'] = ['lots', 'little', 'lots', 'little', 'lots',\n                                  'lots', 'lots']\ndf_train['Will_go'] = LabelEncoder().fit_transform(['+', '-', '+', '-', '-', '+', '+'])\n\ndf_train = create_df(df_train, features)\ndf_train","c6d64b62":"df_test = {}\ndf_test['Looks'] = ['handsome', 'handsome', 'repulsive'] \ndf_test['Alcoholic_beverage'] = ['no', 'yes', 'yes']\ndf_test['Eloquence'] = ['average', 'high', 'average']\ndf_test['Money_spent'] = ['lots', 'little', 'lots']\ndf_test = create_df(df_test, features)\ndf_test","78a999eb":"# Some feature values are present in train and absent in test and vice-versa.\ny = df_train['Will_go']\ndf_train, df_test = intersect_features(train=df_train, test=df_test)\ndf_train","5b9cac6b":"df_test","47e7d9e4":"# you code here","5f00c655":"# you code here","1d75aea6":"# you code here","eb1bf87c":"# you code here","fd7fb757":"balls = [1 for i in range(9)] + [0 for i in range(11)]","1266555e":"# two groups\nballs_left  = [1 for i in range(8)] + [0 for i in range(5)] # 8 blue and 5 yellow\nballs_right = [1 for i in range(1)] + [0 for i in range(6)] # 1 blue and 6 yellow","fceff42e":"def entropy(a_list):\n    # you code here\n    pass","ea70c29a":"print(entropy(balls)) # 9 blue \u0438 11 yellow\nprint(entropy(balls_left)) # 8 blue \u0438 5 yellow\nprint(entropy(balls_right)) # 1 blue \u0438 6 yellow\nprint(entropy([1,2,3,4,5,6])) # entropy of a fair 6-sided die","33b68a48":"# information gain calculation\ndef information_gain(root, left, right):\n    ''' root - initial data, left and right - two partitions of initial data'''\n    \n    # you code here\n    pass","3873afac":"def best_feature_to_split(X, y):\n    '''Outputs information gain when splitting on best feature'''\n    \n    # you code here\n    pass","51563d79":"data_train = pd.read_csv('..\/input\/adult_train.csv')","5caf0337":"data_train.tail()","0ea2ac52":"data_test = pd.read_csv('..\/input\/adult_test.csv')","e56790d4":"data_test.tail()","f297f201":"# necessary to remove rows with incorrect labels in test dataset\ndata_test = data_test[(data_test['Target'] == ' >50K.') | (data_test['Target']==' <=50K.')]\n\n# encode target variable as integer\ndata_train.loc[data_train['Target']==' <=50K', 'Target'] = 0\ndata_train.loc[data_train['Target']==' >50K', 'Target'] = 1\n\ndata_test.loc[data_test['Target']==' <=50K.', 'Target'] = 0\ndata_test.loc[data_test['Target']==' >50K.', 'Target'] = 1","a3c28abc":"data_test.describe(include='all').T","14de342b":"data_train['Target'].value_counts()","d70cc4db":"fig = plt.figure(figsize=(25, 15))\ncols = 5\nrows = np.ceil(float(data_train.shape[1]) \/ cols)\nfor i, column in enumerate(data_train.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if data_train.dtypes[column] == np.object:\n        data_train[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        data_train[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","d6281c29":"data_train.dtypes","660fdd08":"data_test.dtypes","fb13e1af":"data_test['Age'] = data_test['Age'].astype(int)","4d2778b3":"data_test['fnlwgt'] = data_test['fnlwgt'].astype(int)\ndata_test['Education_Num'] = data_test['Education_Num'].astype(int)\ndata_test['Capital_Gain'] = data_test['Capital_Gain'].astype(int)\ndata_test['Capital_Loss'] = data_test['Capital_Loss'].astype(int)\ndata_test['Hours_per_week'] = data_test['Hours_per_week'].astype(int)","6c0eb4be":"# choose categorical and continuous features from data\n\ncategorical_columns = [c for c in data_train.columns \n                       if data_train[c].dtype.name == 'object']\nnumerical_columns = [c for c in data_train.columns \n                     if data_train[c].dtype.name != 'object']\n\nprint('categorical_columns:', categorical_columns)\nprint('numerical_columns:', numerical_columns)","31e31a64":"# we see some missing values\ndata_train.info()","bd5e4c71":"# fill missing data\n\nfor c in categorical_columns:\n    data_train[c].fillna(data_train[c].mode()[0], inplace=True)\n    data_test[c].fillna(data_train[c].mode()[0], inplace=True)\n    \nfor c in numerical_columns:\n    data_train[c].fillna(data_train[c].median(), inplace=True)\n    data_test[c].fillna(data_train[c].median(), inplace=True)","82c45487":"# no more missing values\ndata_train.info()","1d081dee":"data_train = pd.concat([data_train[numerical_columns],\n    pd.get_dummies(data_train[categorical_columns])], axis=1)\n\ndata_test = pd.concat([data_test[numerical_columns],\n    pd.get_dummies(data_test[categorical_columns])], axis=1)","1f508654":"set(data_train.columns) - set(data_test.columns)","c252cb54":"data_train.shape, data_test.shape","650f8f14":"data_test['Country_ Holand-Netherlands'] = 0","29ba243c":"set(data_train.columns) - set(data_test.columns)","8f49bd00":"data_train.head(2)","112b4abe":"data_test.head(2)","316fa3dc":"X_train = data_train.drop(['Target'], axis=1)\ny_train = data_train['Target']\n\nX_test = data_test.drop(['Target'], axis=1)\ny_test = data_test['Target']","feebfbb9":"# you code here\n# tree = \n# tree.fit","f5d3fbc0":"# you code here\n# tree_predictions = tree.predict ","91140636":"# you code here\n# accuracy_score ","00bbdce1":"tree_params = {'max_depth': range(2,11)}\n\nlocally_best_tree = GridSearchCV # you code here                     \n\nlocally_best_tree.fit; # you code here ","530b8bc4":"# you code here \n# tuned_tree = \n# tuned_tree.fit \n# tuned_tree_predictions = tuned_tree.predict\n# accuracy_score","8e918f6b":"# you code here \n# rf = \n# rf.fit # you code here ","08be8328":"# you code here ","0b875995":"# forest_params = {'max_depth': range(10, 21),\n#                 'max_features': range(5, 105, 20)}\n\n# locally_best_forest = GridSearchCV # you code here \n\n# locally_best_forest.fit # you code here ","ffd88a0a":"# you code here ","f9663988":"#### Test data","d1e3b4cb":"1\\. What is the entropy $S_0$ of the initial system? By system states, we mean values of the binary feature \"Will_go\" - 0 or 1 - two states in total.","6a0a1736":"We'll dummy code some categorical features: **Workclass**, **Education**, **Martial_Status**, **Occupation**, **Relationship**, **Race**, **Sex**, **Country**. It can be done via pandas method **get_dummies**","2bcd7181":"Tests","9648ae5c":"#### Draw a decision tree (by hand or in any graphics editor) for this dataset. Optionally you can also implement tree construction and draw it here.","e8c8b234":"6\\. What is the test set accuracy of a decision tree with maximum tree depth of 3 and **random_state = 17**?","b247cf29":"Make a prediction with the trained model on the test data.","e4260064":"### 3.4 (Optional) Random forest with parameter tuning","3cc05c88":"#### Additional: display the resulting tree using graphviz. You can use pydot or [web-service](https:\/\/www.coolutils.com\/ru\/online\/DOT-to-PNG) dot2png.","01e6aedb":"### Part 3. The \"Adult\" dataset","ee9690c3":"As we see, in the test data, age is treated as type **object**. We need to fix this.","6a9cb285":"Let's start by loading all necessary libraries:","05190ec1":"### 3.1 Decision tree without parameter tuning","ac5d12f6":"### 3.3 (Optional) Random forest without parameter tuning","b22c84bd":"Train a decision tree with maximum depth of 9 (it is the best **max_depth** in my case), and compute the test set accuracy. Use parameter **random_state = 17** for reproducibility.","b5dec9f2":"#### Implement a function to calculate the Shannon Entropy","875987ac":"<img src='https:\/\/habrastorage.org\/webt\/bd\/aq\/5w\/bdaq5wi3c4feezaexponvin8wmo.png'>","1f5e7b29":"#### Training data","11371546":"[Dataset](http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult) UCI Adult (no need to download it, we have a copy in the course repository): classify people using demographical data - whether they earn more than \\$50,000 per year or not.","aebfa018":"<img src = 'https:\/\/habrastorage.org\/webt\/mu\/vl\/mt\/muvlmtd2njeqf18trbldenpqvnm.png'>","b398ebb6":"Your goal is to figure out how decision trees work by walking through a toy problem. While a single decision tree does not yield outstanding results, other performant algorithms like gradient boosting and random forests are based on the same idea. That is why knowing how decision trees work might be useful.","d8e62bf0":"#### Reading train and test data","9e8b5202":"Make predictions for the test data and assess accuracy.","c6222c36":"5\\. What is the information gain from splitting the initial dataset into **balls_left** and **balls_right** ?","38307c33":"#### Checking data types","7eb50208":"#### Primary data analysis","1ea5602f":"Also we'll cast all **float** features to **int** type to keep types consistent between our train and test data.","4869d207":"Feature descriptions:","35827c83":"Make predictions for the test data and assess accuracy.","9c4e0256":"2\\. Let's split the data by the feature \"Looks_handsome\". What is the entropy $S_1$ of the left group - the one with \"Looks_handsome\". What is the entropy $S_2$ in the opposite group? What is the information gain (IG) if we consider such a split?","3d8a15d5":"#### Dataset description:","e27501ba":"#### There is no Holland in the test data. Create new zero-valued feature.","e5549521":"- **Age** \u2013 continuous feature\n- **Workclass** \u2013  continuous feature\n- **fnlwgt** \u2013 final weight of object, continuous feature\n- **Education** \u2013  categorical feature\n- **Education_Num** \u2013 number of years of education, continuous feature\n- **Martial_Status** \u2013  categorical feature\n- **Occupation** \u2013  categorical feature\n- **Relationship** \u2013 categorical feature\n- **Race** \u2013 categorical feature\n- **Sex** \u2013 categorical feature\n- **Capital_Gain** \u2013 continuous feature\n- **Capital_Loss** \u2013 continuous feature\n- **Hours_per_week** \u2013 continuous feature\n- **Country** \u2013 categorical feature","30ebf59c":"We'll go through a toy example of binary classification - Person A is deciding whether they will go on a second date with Person B. It will depend on their looks, eloquence, alcohol consumption (only for example), and how much money was spent on the first date.","21d26c01":"#### Optional:\n- Implement a decision tree building algorithm by calling **best_feature_to_split** recursively\n- Plot the resulting tree","3a4cc978":"#### Creating the dataset","d47fe452":"Train a random forest **(RandomForestClassifier)**. Tune the maximum depth and maximum number of features for each tree using **GridSearchCV**. ","a30ebbaf":"# <center> Assignment #3 (demo)\n## <center>  Decision trees with a toy task and the UCI Adult dataset \n\nSame assignment as a [Kaggle Kernel](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees) + [solution](https:\/\/www.kaggle.com\/kashnitsky\/a3-demo-decision-trees-solution). Fill in the answers in the [web-form](https:\/\/docs.google.com\/forms\/d\/1wfWYYoqXTkZNOPy1wpewACXaj2MZjBdLOL58htGWYBA\/edit).","cfc34404":"### 3.2 Decision tree with parameter tuning","b2d33db6":"4\\. What is the entropy of a fair dice? (where we look at a dice as a system with 6 equally probable states)?","9acf1ab2":"**Target** \u2013 earnings level, categorical (binary) feature.","ce949de5":"3\\. What is the entropy of the state given by the list **balls_left**?","bbce3863":"Train a decision tree **(DecisionTreeClassifier, random_state = 17).** Find the optimal maximum depth using 5-fold cross-validation **(GridSearchCV)**.","3fcad747":"Next split the balls into two groups:","27a33d80":"### Part 1. Toy dataset \"Will They? Won't They?\"","5055964d":"#### Fill in missing data for continuous features with their median values, for categorical features with their mode.","9fb82bee":"Let's take a sneak peek of upcoming lectures and try to use a random forest for our task. For now, you can imagine a random forest as a bunch of decision trees, trained on slightly different subsets of the training data.","92c3ddae":"### Part 2. Functions for calculating entropy and information gain.","29759b56":"Consider the following warm-up example: we have 9 blue balls and 11 yellow balls. Let ball have label **1** if it is blue, **0** otherwise.","81a54ca1":"7\\. What is the test set accuracy of a decision tree with maximum depth of 9 and **random_state = 17**?","c49dc29f":"Train a random forest **(RandomForestClassifier)**. Set the number of trees to 100 and use **random_state = 17**.","4173812e":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## [mlcourse.ai](https:\/\/mlcourse.ai) - Open Machine Learning Course\n\nAuthors: [Maria Sumarokova](https:\/\/www.linkedin.com\/in\/mariya-sumarokova-230b4054\/), and [Yury Kashnitsky](https:\/\/www.linkedin.com\/in\/festline\/). Translated and edited by Gleb Filatov, Aleksey Kiselev, [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina\/), [Egor Polusmak](https:\/\/www.linkedin.com\/in\/egor-polusmak\/), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","ca6160d2":"#### Train a decision tree using sklearn on the training data. You may choose any depth for the tree.","b65bac24":"Train a decision tree **(DecisionTreeClassifier)** with a maximum depth of 3, and evaluate the accuracy metric on the test data. Use parameter **random_state = 17** for results reproducibility."}}