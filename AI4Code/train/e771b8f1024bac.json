{"cell_type":{"e1bfc6d7":"code","12864025":"code","a6318e47":"code","73e4106c":"code","7d95973a":"code","ffaf89f2":"code","422b173e":"code","0a202a06":"code","0f38f81b":"code","028e086a":"code","0a64b223":"code","f73d06b4":"code","584c8657":"code","523c1816":"code","f91e1d25":"code","19241d9e":"code","10cee985":"code","a1a5a682":"code","22272040":"code","dc9fab48":"code","315edf9f":"code","1cee19b3":"code","615ac1b1":"code","a1d01774":"code","dd75e5cd":"markdown","ac83da86":"markdown","21fa3807":"markdown","cb79ebdc":"markdown","433f8c5c":"markdown","82b797c1":"markdown","790d9058":"markdown","6c589b8d":"markdown","4a27b939":"markdown","891dbab3":"markdown","8f9526a6":"markdown","602a7e2d":"markdown","83186849":"markdown","4447c420":"markdown","aba08a29":"markdown","c9866c9e":"markdown"},"source":{"e1bfc6d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12864025":"train=pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\")\ntrain.head()","a6318e47":"test=pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_test.csv\")\n\ntest.head()","73e4106c":"print(train.iloc[15][0]) #this is for seeing which number we are picturing.\nimg=train.iloc[15][1:].to_numpy() #you can also use as_matrix(), but the last time that I wanted to use it I've got a problem. Because of that, I used to_numpy(). \n                                  #I didn't get rid of the label part yet. Fot just using pixels we started from the 2nd([1]) element of one column.\nimg=np.reshape(img,(28,28))\nplt.imshow(img,cmap=\"gray\")\nplt.axis(\"off\")\nplt.show()","7d95973a":"X_train=train.drop(\"label\",axis=1)\nX_train.head()","ffaf89f2":"Y_train=train.label\nY_train.head()","422b173e":"plt.figure(figsize=(15,8))\nsns.countplot(Y_train,palette=\"rocket\")\nplt.title(\"Count of Numbers\")\nplt.show()\n","0a202a06":"X_train=X_train\/255.0\nX_train.shape","0f38f81b":"Y_train.shape","028e086a":"X_train=X_train.values.reshape(-1,28,28,1)\nX_train.shape","0a64b223":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(Y_train,num_classes=10)\nY_train.shape","f73d06b4":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(X_train,Y_train,test_size=0.15,random_state=42)\n\nprint(\"x train shape: \",x_train.shape)\nprint(\"x val shape: \",x_val.shape)\nprint(\"y train shape: \",y_train.shape)\nprint(\"y val shape: \",y_val.shape)","584c8657":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D,Activation\nfrom keras.optimizers import RMSprop, Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","523c1816":"model=Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape=(28,28,1)))\nmodel.add(Activation(\"tanh\"))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation(\"tanh\"))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"tanh\"))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation=\"tanh\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation=\"softmax\"))","f91e1d25":"model.compile(loss=\"categorical_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","19241d9e":"datagen=ImageDataGenerator(rotation_range=0.5,zoom_range=0.5,horizontal_flip=True)\ndatagen.fit(x_train)","10cee985":"history=model.fit_generator(datagen.flow(x_train,y_train,batch_size=32),epochs=50,validation_data=(x_val,y_val), steps_per_epoch=x_train.shape[0] \/\/ 32)","a1a5a682":"plt.subplot(1,2,1)\nplt.plot(history.history[\"val_loss\"],color=\"r\",label=\"validation loss\")\nplt.xlabel(\"number of ephocs\")\nplt.ylabel(\"val_loss\")\n\nplt.subplot(1,2,2)\nplt.plot(history.history[\"val_accuracy\"],color=\"r\",label=\"validation accuracy\")\nplt.xlabel(\"number of ephocs\")\nplt.ylabel(\"val_accuracy\")\n\nplt.show()\n\nplt.subplot(1,2,1)\nplt.plot(history.history[\"loss\"],color=\"r\",label=\"loss\")\nplt.xlabel(\"number of ephocs\")\nplt.ylabel(\"loss\")\n\nplt.subplot(1,2,2)\nplt.plot(history.history[\"accuracy\"],color=\"r\",label=\"accuracy\")\nplt.xlabel(\"number of ephocs\")\nplt.ylabel(\"accuracy\")\n\nplt.show()","22272040":"Y_pred = model.predict(x_val)\n\nY_pred_classes = np.argmax(Y_pred,axis = 1) \n\nY_true = np.argmax(y_val,axis = 1) \n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","dc9fab48":"x_test=test.drop(\"label\",axis=1)\n\nx_test.head()","315edf9f":"y_test=test.label\n\ny_test.head()","1cee19b3":"x_test=x_test\/255.0\nx_test=x_test.values.reshape(-1,28,28,1)\n\nx_test.shape","615ac1b1":"y_test=to_categorical(y_test,num_classes=10)\n\ny_test.shape","a1d01774":"Y_pred = model.predict(x_test)\n \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n\nY_true = np.argmax(y_test,axis = 1) \n\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","dd75e5cd":"For making our train frames work with keras, we need to reshape them.","ac83da86":"<a id=\"5\"><br><\/a>\n## Arranging Test Data","21fa3807":"<a id=\"4\"><br><\/a>\n## Fitting Model on Train Data","cb79ebdc":"From now on we are starting to train model.","433f8c5c":"Now for seeing a sample inside the train we are going to make one of the pics as a matrix. After that reshape it and print it.","82b797c1":"<a id=\"6\"><br><\/a>\n## Fitting Model on Test","790d9058":"Now we can easily see how many samples do we have from each number.","6c589b8d":"According to our expectations we have same condition like in the train data frame.","4a27b939":"<a id=\"1\"><br><\/a>\n## Loading Train and Test Data","891dbab3":"# Introduction\nIn this kernelI tried to train my model and get the best accuracy as I can. I tried different ephocs and different activation styles, after that I ended up with this values below.\n\n1. [Loading Train and Test Data](#1)\n1. [Arranging Train Data](#2)\n1. [Traning Model](#3)\n1. [Fitting Model on Train Data](#4)\n1. [Arranging Test Data](#5)\n1. [Fitting Model on Test Data](#6)","8f9526a6":"Now we are going to initialize our pixel values","602a7e2d":"Now we are going to seperate our labels from pixels.","83186849":"<a id=\"2\"><br><\/a>\n## Arranging Train Data","4447c420":"After reshaping train data frames, now we can seperate them as train and validation.","aba08a29":"<a id=\"3\"><br><\/a>\n## Training Model","c9866c9e":"As we can see from the table above, we can easily say that every photo of digits made from 28x28 pixels and the first column of the data is represents the digit."}}