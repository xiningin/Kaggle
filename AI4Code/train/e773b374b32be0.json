{"cell_type":{"9f41e16c":"code","9f40179e":"code","7e1d95a2":"code","22129dfc":"code","2ba6349a":"code","5b8a5eac":"code","29966d14":"code","a584bb6b":"code","6d92d661":"code","aea7a45a":"code","2f0435ea":"code","92d63201":"code","fe5f501e":"code","9a99be6f":"code","f6d4842d":"code","a51e2b3f":"code","6e07c92b":"code","ea137828":"code","6664cb40":"code","764347e1":"code","2e970ef0":"code","8e96c1e8":"code","b3dd6545":"code","0881dff3":"code","05499fd1":"code","a6532dd6":"code","24861b29":"code","e5d4eda1":"code","0584358e":"code","f500fef1":"code","2b829443":"code","f153f4ab":"code","0d14d9da":"code","c77c03f0":"code","a1764a83":"code","b8026abc":"code","235f6cd3":"code","6a61f25e":"code","13e3be5d":"code","81095916":"code","99b696a7":"code","2c78ee16":"code","443170dc":"code","894cf0c1":"code","f03644d9":"code","cd12953d":"code","871168da":"code","f3e174a1":"code","e69db0fc":"code","b49f9514":"code","471d477c":"code","5d24c8d2":"code","9b8a32bd":"code","3f57848b":"code","b3a4da43":"code","e8c6bf9f":"code","618ec633":"code","bdd6e642":"code","a7c319c8":"code","f74d89de":"code","cc31f77d":"code","ac344959":"code","c4a39e71":"code","a0b0a5f1":"code","d0231d34":"code","56ea1090":"code","f2c16cce":"code","b93be0d5":"code","a7045e23":"code","c13ae616":"code","db1dd7ca":"code","13de1991":"code","9ea1d57a":"code","86006477":"code","189dc319":"markdown","6545d229":"markdown","1a276d55":"markdown","84938274":"markdown","9d1d0254":"markdown","1d2d1e9c":"markdown","1f85148f":"markdown","2f08a054":"markdown","0f37a0ea":"markdown","1fd86d72":"markdown","1e932333":"markdown","6adf6fbd":"markdown"},"source":{"9f41e16c":"import os # for working with files\nimport torch # Pytorch module \nimport matplotlib.pyplot as plt # for plotting informations on graph and images using tensors\nimport torch.nn as nn # for creating  neural networks\nfrom torch.utils.data import DataLoader # for dataloaders \nfrom PIL import Image # for checking images\nimport torch.nn.functional as F # for functions for calculating loss\nimport torchvision.transforms as transforms # for transforming images into tensors \nfrom torchvision.utils import make_grid # for data checking\nfrom torchvision.datasets import ImageFolder # for working with classes and images\n%matplotlib inline","9f40179e":"project_name = \"Plant-Disease-Classification\" # used by jovian","7e1d95a2":"Data_Dir = \"..\/input\/new-plant-diseases-dataset\/New Plant Diseases Dataset(Augmented)\/New Plant Diseases Dataset(Augmented)\"\nTrain_Dir = Data_Dir + \"\/train\"\nValid_Dir = Data_Dir + \"\/valid\"\nDiseases = os.listdir(Train_Dir)\nprint(Diseases)\nprint(len(Diseases))","22129dfc":"plants = []\nNumberOfDiseases = 0\nfor plant in Diseases:\n    if plant.split('___')[0] not in plants:\n        plants.append(plant.split('___')[0])\n    if plant.split('___')[1] != 'healthy':\n        NumberOfDiseases += 1\nprint(plants)\nprint(len(plants))\nprint(NumberOfDiseases)","2ba6349a":"# Number of images for each disease\nnums = {}\nfor disease in Diseases:\n    nums[disease] = len(os.listdir(Train_Dir + '\/' + disease))\nprint(nums)","5b8a5eac":"index = [n for n in range(38)]\nplt.bar(index, [n for n in nums.values()], width=0.3)\nplt.xlabel('Plants\/Diseases', fontsize=10)\nplt.ylabel('No of images available', fontsize=10)\nplt.xticks(index, Diseases, fontsize=5, rotation=90)\nplt.title('Images per each class of plant disease')","29966d14":"add = 0\nfor val in nums.values():\n    add += val\nprint(add)","a584bb6b":"# datasets for validation and training\ntrain_ds = ImageFolder(Train_Dir, transform=transforms.ToTensor())\nval_ds = ImageFolder(Valid_Dir, transform=transforms.ToTensor()) ","6d92d661":"img, label = train_ds[0]\nprint(img.shape, label)","aea7a45a":"train_ds.classes\n","2f0435ea":"# for checking some images from training dataset\ndef show_image(image, label):\n    print(\"Label :\" + train_ds.classes[label] + \"(\" + str(label) + \")\")\n    plt.imshow(image.permute(1, 2, 0))","92d63201":"show_image(*train_ds[0])","fe5f501e":"show_image(*train_ds[70000])","9a99be6f":"show_image(*train_ds[30000])","f6d4842d":"random_seed = 7\ntorch.manual_seed(random_seed)","a51e2b3f":"batch_size = 32","6e07c92b":"# DataLoaders for training and validation\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=2, pin_memory=True)","ea137828":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(30, 30))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=8).permute(1, 2, 0))\n        break","6664cb40":"show_batch(train_dl) # Images for first batch of training","764347e1":"# for moving data into GPU\ndef get_default_device():\n    if torch.cuda.is_available:\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n\nclass DeviceDataLoader:\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for b in self.dl:\n            yield to_device(b, self.device)\n        \n    def __len__(self):\n        return len(self.dl)","2e970ef0":"device = get_default_device()\ndevice","8e96c1e8":"# Moving data into GPU\ntrain_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","b3dd6545":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n    \n\nclass DiseaseClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        accur = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_accuracy\": accur}\n    \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x[\"val_loss\"] for x in outputs]\n        batch_accuracy = [x[\"val_accuracy\"] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()\n        epoch_accuracy = torch.stack(batch_accuracy).mean()\n        return {\"val_loss\": epoch_loss, \"val_accuracy\": epoch_accuracy}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_accuracy']))\n        ","0881dff3":"# Architecture for training\ndef ConvBlock(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),\n             nn.BatchNorm2d(out_channels),\n             nn.ReLU(inplace=True)]\n    if pool:\n        layers.append(nn.MaxPool2d(4))\n    return nn.Sequential(*layers)\n\n\nclass ResNet9(DiseaseClassificationBase):\n    def __init__(self, in_channels, num_diseases):\n        super().__init__()\n        \n        self.conv1 = ConvBlock(in_channels, 64)\n        self.conv2 = ConvBlock(64, 128, pool=True) # out_dim : 128 x 64 x 64 \n        self.res1 = nn.Sequential(ConvBlock(128, 128), ConvBlock(128, 128))\n        \n        self.conv3 = ConvBlock(128, 256, pool=True) # out_dim : 256 x 16 x 16\n        self.conv4 = ConvBlock(256, 512, pool=True) # out_dim : 512 x 4 x 44\n        self.res2 = nn.Sequential(ConvBlock(512, 512), ConvBlock(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4),\n                                       nn.Flatten(),\n                                       nn.Linear(512, num_diseases))\n        \n    def forward(self, xb): # xb is the loaded batch\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out\n            \n        ","05499fd1":"model = to_device(ResNet9(3, len(train_ds.classes)), device) # defining the model and moving it to the GPU\nmodel","a6532dd6":"# for training\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n    \n\ndef fit_OneCycle(epochs, max_lr, model, train_loader, val_loader, weight_decay=0,\n                grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # scheduler for one cycle learniing rate\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))\n    \n    \n    for epoch in range(epochs):\n        # Training\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # recording and updating learning rates\n            lrs.append(get_lr(optimizer))\n            sched.step()\n            \n    \n        # validation\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n        \n    return history\n    ","24861b29":"%%time\nhistory = [evaluate(model, val_dl)]\nhistory","e5d4eda1":"epochs = 1 #2\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","0584358e":"%%time\nhistory += fit_OneCycle(epochs, max_lr, model, train_dl, val_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=1e-4, \n                             opt_func=opt_func)","f500fef1":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return train_ds.classes[preds[0].item()]","2b829443":"test_dir = \"..\/input\/new-plant-diseases-dataset\/test\"\ntest_ds = ImageFolder(test_dir, transform=transforms.ToTensor())","f153f4ab":"test_ds.classes","0d14d9da":"test_images = sorted(os.listdir(test_dir + '\/test')) # since images in test folder are in alphabetical order\ntest_images","c77c03f0":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return train_ds.classes[preds[0].item()]","a1764a83":"Image.open('..\/input\/new-plant-diseases-dataset\/test\/test\/AppleCedarRust1.JPG')","b8026abc":"img, label = test_ds[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[0], ', Predicted:', predict_image(img, model))","235f6cd3":"img, label = test_ds[1]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[1], ', Predicted:', predict_image(img, model))","6a61f25e":"img, label = test_ds[2]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[2], ', Predicted:', predict_image(img, model))","13e3be5d":"img, label = test_ds[3]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[3], ', Predicted:', predict_image(img, model))","81095916":"img, label = test_ds[4]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[4], ', Predicted:', predict_image(img, model))","99b696a7":"img, label = test_ds[5]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[5], ', Predicted:', predict_image(img, model))","2c78ee16":"img, label = test_ds[6]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[6], ', Predicted:', predict_image(img, model))","443170dc":"img, label = test_ds[7]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[7], ', Predicted:', predict_image(img, model))","894cf0c1":"img, label = test_ds[8]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[8], ', Predicted:', predict_image(img, model))","f03644d9":"img, label = test_ds[9]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[9], ', Predicted:', predict_image(img, model))","cd12953d":"img, label = test_ds[10]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[10], ', Predicted:', predict_image(img, model))","871168da":"img, label = test_ds[11]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[11], ', Predicted:', predict_image(img, model))","f3e174a1":"img, label = test_ds[12]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[12], ', Predicted:', predict_image(img, model))","e69db0fc":"img, label = test_ds[13]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[13], ', Predicted:', predict_image(img, model))","b49f9514":"img, label = test_ds[14]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[14], ', Predicted:', predict_image(img, model))","471d477c":"img, label = test_ds[15]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[15], ', Predicted:', predict_image(img, model))","5d24c8d2":"img, label = test_ds[16]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[16], ', Predicted:', predict_image(img, model))","9b8a32bd":"img, label = test_ds[17]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[17], ', Predicted:', predict_image(img, model))","3f57848b":"img, label = test_ds[18]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[18], ', Predicted:', predict_image(img, model))","b3a4da43":"img, label = test_ds[19]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[19], ', Predicted:', predict_image(img, model))","e8c6bf9f":"img, label = test_ds[20]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[20], ', Predicted:', predict_image(img, model))","618ec633":"img, label = test_ds[21]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[21], ', Predicted:', predict_image(img, model))","bdd6e642":"img, label = test_ds[22]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[22], ', Predicted:', predict_image(img, model))","a7c319c8":"img, label = test_ds[23]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[23], ', Predicted:', predict_image(img, model))","f74d89de":"img, label = test_ds[24]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[24], ', Predicted:', predict_image(img, model))","cc31f77d":"img, label = test_ds[25]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[25], ', Predicted:', predict_image(img, model))","ac344959":"img, label = test_ds[26]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[26], ', Predicted:', predict_image(img, model))","c4a39e71":"img, label = test_ds[27]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[27], ', Predicted:', predict_image(img, model))","a0b0a5f1":"img, label = test_ds[28]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[28], ', Predicted:', predict_image(img, model))","d0231d34":"img, label = test_ds[29]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[29], ', Predicted:', predict_image(img, model))","56ea1090":"img, label = test_ds[30]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[30], ', Predicted:', predict_image(img, model))","f2c16cce":"img, label = test_ds[31]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[31], ', Predicted:', predict_image(img, model))","b93be0d5":"img, label = test_ds[32]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', test_images[32], ', Predicted:', predict_image(img, model))","a7045e23":"torch.save(model.state_dict(), 'plantdiseaseclassification.pth')","c13ae616":"# init the name mapping between test filenames and class names\nname_mappings = {\n    \"AppleCedarRust\":\"Apple___Cedar_apple_rust\",\n    \"AppleScab\":\"Apple___Apple_scab\",\n    \"CornCommonRust\":\"Corn_(maize)___Common_rust_\",\n    \"PotatoEarlyBlight\":\"Potato___Early_blight\",\n    \"PotatoHealthy\":\"Potato___healthy\",\n    \"TomatoEarlyBlight\":\"Tomato___Early_blight\",\n    \"TomatoHealthy\":\"Tomato___healthy\",\n    \"TomatoYellowCurlVirus\":\"Tomato___Tomato_Yellow_Leaf_Curl_Virus\",\n}","db1dd7ca":"import numpy as np\nx=[]\ny=[]\n\n# start to predict looping in test_ds\nfor i in range(len(test_ds)):\n    # store the image data and label name\n    img, label = test_ds[i]\n    # get the label name of the test image\n    label1=name_mappings[test_images[i][:(len(test_images[i])-5)]]\n    # predict according to the test data using model\n    label2=predict_image(img, model)\n    # append the label and the prediction result for furture use\n    x.append(label1)\n    y.append(label2)\n    # show the expect label name and predicted label name\n    print('Label:', label1, ', Predicted:', label2)\n\n# generate the xn, yn from x, y (from label name to label index for confusion generating)\nxn=[]\nyn=[]\nkeys=list(set(x))\nkeys.sort()\nfor i in range(len(test_ds)):\n    xn.append(keys.index(x[i]))\n    try:\n        yn.append(keys.index(y[i]))\n    except:\n        yn.append(0)\n        pass\nxn=np.transpose(xn)\nyn=np.transpose(yn)\nkeys=np.transpose(keys)","13de1991":"import tensorflow as tf\nimport pandas as pd\n\n# use the confusion_matrix function provided by tensorflow to generate confusion matrix\ncon_mat_1 = tf.math.confusion_matrix(labels=xn, predictions=yn).numpy()\n\n# normalize the confusion matrix\ncon_mat_norm_1 = np.around(con_mat_1.astype('float') \/ con_mat_1.sum(axis=1)[:, np.newaxis], decimals=2)\n\n# convert the nomalized confusion matrix for better view\ncon_mat_df_1 = pd.DataFrame(con_mat_norm_1,\n                     index = keys, \n                     columns = keys)\n\n# show the nomalized confusion matrix\ncon_mat_df_1","9ea1d57a":"# convert the original confusion matrix for better view (using the case numbers)\ncon_mat_df_1_explain = pd.DataFrame(con_mat_1,\n                     index = keys, \n                     columns = keys)\n\n# show the unnomalized confusion matrix\ncon_mat_df_1_explain","86006477":"import sklearn.metrics\n\n# generate the clasification report by using the classification_report of sklearn package\nreport_1 = sklearn.metrics.classification_report(yn, xn,target_names=keys)\n\n# print the report\nprint(report_1)","189dc319":"## Classification Repot","6545d229":"## So it says, we got 99.21% accuracy. Let's test it.","1a276d55":"Let's import required modules","84938274":"So there are 70295 images available for training.","9d1d0254":"## Explain","1d2d1e9c":"### Images from training dataset","1f85148f":"SO it is able to predict every image from the test data correctly","2f08a054":"# We will use resnet9 architecture to design and train a model for the prediction of disease in plants.\n","0f37a0ea":"So we have images of leaves of 14 plants and while excluding healthy leaves, we have 26 types of images that show a particular disease in a particular plant.","1fd86d72":"## Confusion Matrix","1e932333":"While visualizing above information on graph","6adf6fbd":"## Predicting"}}