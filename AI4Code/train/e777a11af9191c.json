{"cell_type":{"ef66c0b9":"code","2e63f6d9":"code","1a20c490":"code","cc624669":"code","9d2ed1c9":"code","535bfebe":"code","b4cd699a":"code","e4c297f5":"code","346c6654":"code","462fe37a":"code","5ac77258":"markdown","275b5caa":"markdown","1b9d64f6":"markdown","9716f1e3":"markdown"},"source":{"ef66c0b9":"# %% libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nheart_data=pd.read_csv('..\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')\n\nheart_data.drop([\"education\"],axis=1,inplace = True)\n\nheart_data.dropna(axis=0,inplace=True)\n\ny = heart_data.TenYearCHD.values\nx_data = heart_data.drop([\"TenYearCHD\"],axis=1)\n","2e63f6d9":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","1a20c490":"# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n","cc624669":"def initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n","9d2ed1c9":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head\n","535bfebe":"def forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients\n","b4cd699a":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n","e4c297f5":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","346c6654":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n","462fe37a":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)\n","5ac77258":"Hello everyone,\n\nI began Machine Learning education, so I apologize for wrong things :)\n\nFirstly, \n\nimport libraries, and read data, I choose (heart-disease-prediction-using-logistic-regression : framingham.csv)","275b5caa":"After we need normalization.","1b9d64f6":":)","9716f1e3":"And we need to split our data and use sklearn.train_test_split, train_data is %80, test_data is %20\n\nyou can look computation graph of logistic regression from this link : https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners (thank you DATAI)\n\nOrderly ;\n\n-initialize weight (w), bias (b)\n-definition sigmoid (z)\n-forward and backward propagation\n-update find w for best result\n-predict\n-logistic regression\n-run model\n"}}