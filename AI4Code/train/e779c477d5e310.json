{"cell_type":{"f84d99fa":"code","46d9f829":"code","0e367459":"code","c1661a7e":"code","5c8247a6":"code","3ba65e17":"code","0a179f82":"code","0090b783":"code","f3b41e55":"code","be213a15":"code","96056e92":"code","d153f4c2":"code","aa37467c":"code","1abd3976":"code","fd1320b6":"code","4110c2ee":"code","20243611":"code","54d85438":"code","b6b5016b":"code","ffe62df1":"code","1505c94f":"code","fef8e7b5":"code","77698091":"code","cb8d1f73":"code","7e154905":"markdown","4950cfde":"markdown","3ea8e4e6":"markdown","3405cce0":"markdown","46f3b072":"markdown","07acbef0":"markdown","5de9b3e6":"markdown","43c2f96b":"markdown","73c99eee":"markdown"},"source":{"f84d99fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46d9f829":"!pip install evalml","0e367459":"df = pd.read_csv(\"\/kaggle\/input\/dogecoin\/DOGE-USD.csv\")\ndf.head()","c1661a7e":"#We use only Close column to predict the price ,So lets use only Close value \n#lets define a variable to store number of days to predict\nno_of_days=1 #for example\n#create a new column prediction\ndf['prediction']=df[['Close']].shift(-no_of_days)","5c8247a6":"X=np.array(df.drop(['prediction'],axis=1))\n#we have to remove n+1 of data where n is the no_of_days\nX=X[:len(df)-no_of_days-1]\n","3ba65e17":"y=np.array(df['prediction'])\n#We have to get all the values of y execpt last n+1\ny=y[:len(df) -no_of_days -1]","0a179f82":"import evalml\n#X, y = evalml.demos.load_breast_cancer()\nX_train, X_test, y_train, y_test = evalml.preprocessing.split_data(X, y, problem_type='regression')\n# Here we'll split the data table using evalml's preprocessing \"split_data\" library","0090b783":"X_train.head()","f3b41e55":"import evalml\nevalml.problem_types.ProblemTypes.all_problem_types","be213a15":"from evalml.automl import AutoMLSearch\nautoml = AutoMLSearch(X_train=X_train, y_train=y_train, problem_type='regression')","96056e92":"automl.search()","d153f4c2":"automl.rankings","aa37467c":"automl.best_pipeline","1abd3976":"best_pipeline = automl.best_pipeline","fd1320b6":"automl.describe_pipeline(automl.rankings.iloc[0][\"id\"])","4110c2ee":"### Evaluate on hold out data\nbest_pipeline.score(X_test, y_test, objectives=[\"r2\",\"MSE\",\"MAE\",\"Root Mean Squared Error\"])","20243611":"automl_r2 = AutoMLSearch(X_train=X_train, y_train=y_train,\n                          problem_type='regression',\n                          objective='r2',\n                          additional_objectives=[\"MSE\",\"MAE\",\"Root Mean Squared Error\"],\n                          max_batches=1,\n                          optimize_thresholds=True)\n\nautoml_r2.search()","54d85438":"automl_r2.rankings","b6b5016b":"automl_r2.describe_pipeline(automl_r2.rankings.iloc[0][\"id\"])","ffe62df1":"best_pipeline_r2 = automl_r2.best_pipeline","1505c94f":"best_pipeline_r2.predict(X_test)","fef8e7b5":"# get the score on holdout data\nbest_pipeline_r2.score(X_test, y_test,  objectives=[\"r2\"])","77698091":"output = pd.DataFrame({'Date':df['Date'],'StockPrice': pred})\noutput.to_csv('result.csv', index=False)","cb8d1f73":"import plotly.graph_objects as go\nt= df.tail(n=20)\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=t[\"Date\"],\n            open=t[\"Open\"],\n            high=t[\"High\"],\n            low=t[\"Low\"],\n            close=t[\"Close\"],\n        )\n    ]\n)\nfig.show()","7e154905":"# Comparing Models","4950cfde":"# Dogecoin Stock Price Prediction","3ea8e4e6":"Cryptocurrency - is it the precious metals of this millenium, or just another passing fad, to be traded, hoarded, and then sold off at yard sales for $1 a piece, like the beanie babies once Y2K passed?\n\nMaybe I'm late to the game, but I've heard an increasing number of people talking about Dogecoin. Let's take a look at this data, graciously available on Kaggle (thank you to Dhruvil Dave), and see how Dogecoin has evolved.","3405cce0":"# Model Description","46f3b072":"# Check the head of X_train","07acbef0":"# Running AutoML search","5de9b3e6":" ![image.png](attachment:83f8fa4d-9d29-4f6e-bf83-5719d30686e9.png)","43c2f96b":"# Current Trend from Past 50 Days","73c99eee":"## Submitting the predicted output"}}