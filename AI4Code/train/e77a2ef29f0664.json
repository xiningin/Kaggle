{"cell_type":{"c4dbb6ba":"code","b0055825":"code","eeaf4b80":"code","90062876":"code","6d3017ff":"code","c9c351ff":"code","7afe817a":"code","e873e919":"code","1beeb9f8":"code","fca29c8a":"code","121b1c78":"code","e3a4f320":"code","16386674":"code","6cef99df":"code","7962d2a7":"code","5145d89f":"code","3119f5fd":"code","d77b9b44":"code","76395cb6":"code","d6df88c6":"code","342c41a9":"code","22f49cb2":"code","5921afa9":"code","0d828397":"code","987a2428":"code","4929f77b":"code","ee841590":"code","78ed4b43":"markdown","ea0b5d0f":"markdown","961e0779":"markdown","58f5933b":"markdown","787002b2":"markdown"},"source":{"c4dbb6ba":"import pandas as pd","b0055825":"#\u0414\u043e\u0440\u043e\u0433\u0430 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u043c\ndf_train = pd.read_csv('..\/input\/wsrj-ykt2021-day1-3kd9r4d\/train.csv')\ndf_test = pd.read_csv('..\/input\/wsrj-ykt2021-day1-3kd9r4d\/test.csv')","eeaf4b80":"df_train.head()","90062876":"df_train.info()","6d3017ff":"#\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nval3_mean = df_train['val3'].mean()\ndf_train['val3'] = df_train['val3'].fillna(val3_mean)","c9c351ff":"#\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u0432 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c (\u043e\u0431\u043e\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a)\ncombine = [df_train, df_test]\nfor dataset in combine:\n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <=32), 'Age'] = 1      \n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <=48), 'Age'] = 2  \n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <=64), 'Age'] = 3\n    dataset.loc[dataset['Age'] > 64, 'Age'] = 4","7afe817a":"#\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u043b\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\nfrom sklearn.preprocessing import LabelEncoder\nlenc = LabelEncoder()\n\nlenc.fit(df_train['Gender'])\ndf_train['Gender'] = lenc.transform(df_train['Gender'])\n\ndf_train['Gender']","e873e919":"#\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 ans1 - ans17 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c (\u043e\u0431\u043e\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a)\ncombine = [df_train, df_test]\n\nfor dataset in combine:\n    dataset.loc[dataset['ans1'] == 0, 'ans1'] = 0\n    dataset.loc[dataset['ans1'] == 5, 'ans1'] = 1\n    \nfor dataset in combine:\n    dataset.loc[dataset['ans2'] == 0, 'ans2'] = 0\n    dataset.loc[dataset['ans2'] == 5, 'ans2'] = 1\n    \nfor dataset in combine:\n    dataset.loc[dataset['ans3'] == 0, 'ans3'] = 0\n    dataset.loc[dataset['ans3'] == 5, 'ans3'] = 1\n    dataset.loc[dataset['ans3'] == 3, 'ans3'] = 2","1beeb9f8":"df_train.head()","fca29c8a":"df_train.columns","121b1c78":"import seaborn as sns\nsns.heatmap(df_train.corr())","e3a4f320":"not_corr_cols = ['CustomerId', 'Age', 'Gender', 'ans1', 'ans2', 'ans3', 'ans4', 'ans5',\n       'ans6', 'ans7', 'ans8', 'ans9', 'ans10', 'ans11', 'ans12', 'ans13',\n       'ans14', 'ans15', 'ans16', 'ans17', 'val1', 'val2', 'val3']","16386674":"#\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntarget = df_train['Happy']\ngg = df_train[not_corr_cols]\ntrain_data = gg","6cef99df":"train_data.head()","7962d2a7":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split","5145d89f":"X_train, X_test, y_train, y_test = train_test_split(train_data, target, test_size = 0.2)","3119f5fd":"model = XGBClassifier(random_state = 42, max_depth = 4, n_estimators = 500)","d77b9b44":"model.fit(X_train,y_train)\npredicts = model.predict(X_test)","76395cb6":"#\u0421\u0432\u0435\u0440\u043a\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nfrom sklearn.metrics import accuracy_score\nprint(\"acc_score = \",accuracy_score(predicts,y_test))\n\nfrom sklearn.metrics import mean_absolute_error\nprint(\"mae = \",mean_absolute_error(predicts,y_test))","d6df88c6":"df_test.head()","342c41a9":"df_test.info()","22f49cb2":"###\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\n#\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nval3_mean = df_test['val3'].mean()\ndf_test['val3'] = df_test['val3'].fillna(val3_mean)\n\n#\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u043b\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\nfrom sklearn.preprocessing import LabelEncoder\nlenc = LabelEncoder()\n\nlenc.fit(df_test['Gender'])\ndf_test['Gender'] = lenc.transform(df_test['Gender'])","5921afa9":"answers = model.predict(df_test)","0d828397":"answers","987a2428":"subm = pd.DataFrame()\nsubm['CustomerId'] = df_test['CustomerId']\nsubm['Happy'] = answers","4929f77b":"subm.head()","ee841590":"subm.to_csv('last.csv',index = False)","78ed4b43":"**\u041f\u043b\u0430\u043d \u0440\u0430\u0431\u043e\u0442\u044b**\n- \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u043a \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u043c\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n- \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0440\u0438\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b (\u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0445)\n- \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u044b \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c (\u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c)\n- \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433 \u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u0445 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u043e\u043c\n\n- \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n- \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n- \u0418\u0441\u043f\u044b\u0442\u0430\u0442\u044c \u0435\u0433\u043e\n- \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n\n- \u041d\u0430 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u044b\u0442\u044b\u0432\u0430\u0442\u044c cross_val_score","ea0b5d0f":"# \u0412\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430","961e0779":"# Preprocessing","58f5933b":"- 5 500 0.9516666666666667 \n- 5 300 0.9530555555555555\n- 3 300 0.9492777777777778\n- 3 600 0.9506111111111111","787002b2":"# Model"}}