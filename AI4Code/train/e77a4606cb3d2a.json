{"cell_type":{"ff2d5b9f":"code","a25a1a55":"code","a7ae5d31":"code","bbd449e6":"code","ce1e0ec8":"code","abc87865":"code","3a9e4a10":"code","d9eb96d2":"code","b390b01d":"code","f4b00988":"code","8fc184ac":"code","a15ba84d":"code","2121e7e4":"code","5adbf89f":"code","12ad1ca3":"code","d7dc450c":"code","da2ff4a3":"code","d04c3803":"code","0f028db7":"code","a1b40507":"code","b9968e54":"code","9d2a4af2":"code","b48f92db":"code","81ba0f79":"code","95d6f167":"code","8b2c4393":"code","1a9f6db6":"code","a3485811":"code","ff8cd689":"code","3da1cef8":"code","b6efd403":"code","d6ffd978":"code","6da8ad02":"code","4981bbac":"code","40335c47":"code","b0ae65d2":"code","d0d8422b":"code","043b3333":"code","cb6dc3a8":"code","d1fffc11":"code","8f62c21b":"code","c3d26f4f":"code","c92f9661":"code","4b2a57d4":"code","472a9f60":"code","798e527e":"code","eea17c64":"code","830bdde2":"code","17eda323":"code","8b249e5d":"code","9b54a4ea":"markdown","4c6fe806":"markdown","2b673f8d":"markdown","93065d59":"markdown","57c13b28":"markdown","d4bfab85":"markdown","0010ead0":"markdown","d48573b0":"markdown","5246e8e8":"markdown","891b168a":"markdown","f2949888":"markdown","0ffb37a5":"markdown","e0a23a21":"markdown","0d23168d":"markdown","504ed216":"markdown","984f52ad":"markdown","cc088758":"markdown","c4be26e2":"markdown","6ef06486":"markdown","07095d9f":"markdown","b7a22edd":"markdown","c15761ba":"markdown","2593bf0d":"markdown","926a0b28":"markdown","f7e130c2":"markdown","1a999637":"markdown","c41a2c22":"markdown","8dd373d4":"markdown","1eabedc7":"markdown"},"source":{"ff2d5b9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a25a1a55":"# Importing the necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","a7ae5d31":"import plotly.express as px \nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n","bbd449e6":"df = pd.read_csv(\"\/kaggle\/input\/car-evaluation-data-set\/car_evaluation.csv\")\ndf.head()","ce1e0ec8":"# Total number of the columns in the Dataset\ndf.columns","abc87865":"df.shape","3a9e4a10":"# Getting more information about the dataset\ndf.info()","d9eb96d2":"# Describing the Dataset\ndf.describe()","b390b01d":"# Checking whether there is any null values in the Dataset\ndf.isnull().sum()","f4b00988":"# Since with the given name we are unable to judge what the data is indicating \n# Lets rename the columns name to understand the dataset more easily\n\ndf.columns = ['Price', 'Maintenance Cost', 'Number of Doors', 'Capacity', 'Size of Luggage Boot', 'safety', 'Decision']","8fc184ac":"# Lets read the data one more times to see how the data looks now\ndf.head()","a15ba84d":"# Visualizing the price Dataset\n\nlabels = df['Price'].value_counts().index\nvalues = df['Price'].value_counts().values\n\ncolors = df['Price']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","2121e7e4":"# Visualizing the maintenance cost\n\n\nlabels = df['Maintenance Cost'].value_counts().index\nvalues = df['Maintenance Cost'].value_counts().values\n\ncolors = df['Maintenance Cost']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","5adbf89f":"# Visualizing the distribution of number of Doors\n\n\nlabels = df['Number of Doors'].value_counts().index\nvalues = df['Number of Doors'].value_counts().values\n\ncolors = df['Number of Doors']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","12ad1ca3":"# Visualizing the distribution of number of Persons who can accomodate in the Car\n\n\nlabels = df['Capacity'].value_counts().index\nvalues = df['Capacity'].value_counts().values\n\ncolors = df['Capacity']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","d7dc450c":"# Visualizing the dataset for Size of Luggage Boot\n\n\nlabels = df['Size of Luggage Boot'].value_counts().index\nvalues = df['Size of Luggage Boot'].value_counts().values\n\ncolors = df['Size of Luggage Boot']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","da2ff4a3":"# Visualizing the dataset for Size of Luggage Boot\n\n\nlabels = df['safety'].value_counts().index\nvalues = df['safety'].value_counts().values\n\ncolors = df['safety']\n\nfig = go.Figure(data = [go.Pie(labels=labels, values=values, textinfo=\"label+percent\",\n                              insidetextorientation = \"radial\", marker=dict(colors=colors))])\n\nfig.show()","d04c3803":"X = df.drop(['Decision'], axis = 1)\ny = df['Decision']","0f028db7":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","a1b40507":"print(\"The size of training input is\", X_train.shape)\nprint(\"The size of training output is\", y_train.shape)\nprint(\"The size of testing input is\", X_test.shape)\nprint(\"The size of testing output is\", y_test.shape)","b9968e54":"# Importing the category Encoders\n\nimport category_encoders as ce","9d2a4af2":"# Encoding the variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['Price', 'Maintenance Cost', 'Number of Doors', 'Capacity', 'Size of Luggage Boot', 'safety'])\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)\n","b48f92db":"# Now lets see how the Data looks like after doing the one-hot encoding\n\nX_train.head()","81ba0f79":"X_test.head()","95d6f167":"y_train.head()","8b2c4393":"y_test.head()","1a9f6db6":"# Importing DecisionTreeClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3, random_state=0)\n\n# Fitting\/Training the Model\nclf.fit(X_train, y_train)","a3485811":"# Predicting Test set results using the Criterion Gini Index\ny_pred = clf.predict(X_test)","ff8cd689":"# finding the training and testing accuracy\nprint(\"Training Accuracy: \",clf.score(X_train, y_train))\nprint(\"Testing Accuracy: \", clf.score(X_test, y_test))","3da1cef8":"from sklearn.metrics import confusion_matrix\n\n# printing the confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","b6efd403":"# Printing the scores on training and test set\n\nprint('Training set Score: {:.4f}'.format(clf.score(X_train, y_train)))\n\nprint('Test set Score: {:.4f}'.format(clf.score(X_test, y_test)))","d6ffd978":"plt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf.fit(X_train, y_train))","6da8ad02":"import graphviz\ndot_data = tree.export_graphviz(clf, out_file=None, feature_names = X_train.columns,\n                               class_names = y_train, filled = True, rounded = True, \n                               special_characters = True)\n\ngraph = graphviz.Source(dot_data)\n\ngraph","4981bbac":"clf2 = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\n\n# Fitting the model\nclf2.fit(X_train, y_train)","40335c47":"y_pred = clf2.predict(X_test)","b0ae65d2":"# finding the training and testing accuracy\nprint(\"Training Accuracy: \",clf2.score(X_train, y_train))\nprint(\"Testing Accuracy: \", clf2.score(X_test, y_test))","d0d8422b":"from sklearn.metrics import confusion_matrix\n\n# printing the confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","043b3333":"# Printing the scores on training and test set\n\nprint('Training set Score: {:.4f}'.format(clf2.score(X_train, y_train)))\n\nprint('Test set Score: {:.4f}'.format(clf2.score(X_test, y_test)))","cb6dc3a8":"plt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf2.fit(X_train, y_train))","d1fffc11":"import graphviz \ndot_data = tree.export_graphviz(clf2, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \n\ngraph ","8f62c21b":"# Standardization\n\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c3d26f4f":"# Importing the required Libraries\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\n\n# Defining model\n\nmodel = LogisticRegression()\n\nmodel.fit(X_train, y_train)\n\n# Predicting the values for x-test\ny_pred = model.predict(X_test)","c92f9661":"# finding the training and testing accuracy\nprint(\"Training Accuracy: \",model.score(X_train, y_train))\nprint(\"Testing Accuracy: \", model.score(X_test, y_test))","4b2a57d4":"# printing the confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","472a9f60":"# importing the Libraris\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\n\n# Creating a model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Predicting the value for X_test\ny_pred = model.predict(X_test)\n\n","798e527e":"# finding the training and testing accuracy\nprint(\"Training Accuracy: \",model.score(X_train, y_train))\nprint(\"Testing Accuracy: \", model.score(X_test, y_test))","eea17c64":"# printing the confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","830bdde2":"from sklearn.neighbors import KNeighborsClassifier\n\n# creating a model\nmodel = KNeighborsClassifier(n_neighbors = 5)\n\n# feeding the training data into the model\nmodel.fit(X_train, y_train)\n\n# predicting the values for x-test\ny_pred = model.predict(X_test)\n\n","17eda323":"# finding the training and testing accuracy\nprint(\"Training Accuracy: \",model.score(X_train, y_train))\nprint(\"Testing Accuracy: \", model.score(X_test, y_test))","8b249e5d":"# printing the confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","9b54a4ea":"Decision Tree with Criterion Entropy","4c6fe806":"Now the data is more clear to understand","2b673f8d":"There is 1727 rows and 7 columns in the dataset","93065d59":"### Decision Tree Classifier","57c13b28":"So there is no null values in the above dataset","d4bfab85":"Visualizing the decision tree with graphviz","0010ead0":"# Feature Engineering","d48573b0":"#### Visualizing Decision Tree","5246e8e8":"When it comes to pricing the dataset seems to well distributed with each segement covering equal parts","891b168a":"From the dataset its visible that in the market car with all types of Safety level are available equi-proportionally","f2949888":"Logistic regression","0ffb37a5":"All the above datasets are of the object type","e0a23a21":"Random Forest\n","0d23168d":"# Exploratory Data Analysis (EDA)","504ed216":"Checking for the overfitting","984f52ad":"#### Visualizing the Decision Trees with GraphViz","cc088758":"KNeighborsClassifier\n","c4be26e2":"It seems the data has car ranging from having 2 doors to more than 5 doors","6ef06486":"# Reading the Data from the CSV file","07095d9f":"From the dataset its visible that in the market car with all types of Luggage Boot Size are available equi-proportionally","b7a22edd":"When it comes to maintenance cost the dataset seems to well distributed with each segement covering equal parts","c15761ba":"Checking for the overfitting \n","2593bf0d":"## Splitting the Data into Train and Test Set","926a0b28":"From the dataset its visible that in the market car with all types of Capacity are available equi-proportionally","f7e130c2":"# Model Building\n","1a999637":"Decision Tree With Criterion Gini Index","c41a2c22":" Visualizing the Decision Tree","8dd373d4":"# Data Visualization","1eabedc7":"From the above output we can see that there is huge variation in the train set and test accuracy"}}