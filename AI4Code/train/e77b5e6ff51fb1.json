{"cell_type":{"29a6e1dc":"code","f9a59364":"code","7f58ddb7":"code","c0527b5d":"code","6cd6e100":"code","58e883a2":"code","f0c7dddc":"code","f26b3926":"code","c9c1d9e8":"code","aa86e59d":"markdown","e393f49b":"markdown","43b6b303":"markdown","7e53abe9":"markdown","5e525355":"markdown","d9d15f25":"markdown","55fad963":"markdown"},"source":{"29a6e1dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n#GEM MIXTURE GENERATOR\n\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import ModelCheckpoint\n\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import array_to_img\nimport matplotlib.pyplot as plt\n","f9a59364":"#%% Data receive functions\n\ndef getData(pathd,shape):\n    os.chdir(pathd)\n    Alldatas=[]\n    img_data=[]\n    img_data=os.listdir(\".\")\n    for folder in img_data:\n        os.chdir(pathd+\"\/\"+folder)\n        for image in os.listdir(\".\"):\n            _,extension = os.path.splitext(image)\n            if(extension==\".jpg\" or extension==\".jpeg\" or extension==\".png\"):\n                img=load_img(image)\n                img=img.resize((shape[0],shape[1]))\n                x=img_to_array(img)\n                Alldatas.append(x)\n        os.chdir(pathd)      \n    return Alldatas\nSCALE=30 #RESIZE ALL IMAGES TO 30X30\nall_img=getData(\"\/kaggle\/input\/gemstones-images\/train\",(SCALE,SCALE))\nall_img_test=getData(\"\/kaggle\/input\/gemstones-images\/test\",(SCALE,SCALE))\n","7f58ddb7":"all_img=np.asarray(all_img,dtype=\"float\")\nall_img_test=np.asarray(all_img_test,dtype=\"float\")\n\ntrain=all_img\/255-0.5\ntest=all_img_test\/255-0.5\n\ntrainCount=train.shape[0]\ntestCount=test.shape[0]\n\ntrain,test=train.flatten(),test.flatten()\ntrainShape=int(train.shape[0]\/trainCount)\ntestShape=int(test.shape[0]\/testCount)\n\ntrain,test=train.reshape(trainCount,trainShape),test.reshape(testCount,testShape)","c0527b5d":"from keras.engine.input_layer import Input \n\n\nmodel = Sequential()\n\nfeatureSize=15\nmodel.add(Dense(input_dim=train.shape[1],output_dim=train.shape[1],init='uniform'))\nmodel.add(Dense(256, kernel_initializer='uniform'))\n\nmodel.add(Dense(featureSize, kernel_initializer='uniform',activation=\"sigmoid\")) #SIGMOID TO EASILY GENERATE IMAGES IN WIDE RANGE\n\nmodel.add(Dense(256, kernel_initializer='uniform'))\nmodel.add(Dense(train.shape[1],init='uniform'))\n\nprint(model.summary())\nmodel.compile(loss=\"mean_squared_error\",optimizer=\"adamax\")\n\n    \nmodel.fit(train,\n          train,\n          epochs = 300,\n          batch_size = 1024,\n          validation_data = (test,test),\n          verbose=1)\n","6cd6e100":"check=test[3]\ndecoded=model.predict(check.reshape((1,)+check.shape))\ndecoded=(decoded+0.5)\nmatrix=decoded.reshape(SCALE,SCALE,3)\n\n#Show real image and compressed image from autoencoder\nplt.figure(figsize=(30,30))\nplt.subplot(20,20,1)\nplt.imshow(array_to_img(((check+0.5)).reshape(SCALE,SCALE,3)))\nplt.subplot(20,20,2)\nplt.imshow(array_to_img(matrix))","58e883a2":"from keras.models import Model\nGEM_input=Input(model.layers[3].input_shape[1:])\nGEM_model=GEM_input\nfor layer in model.layers[3:]:\n    GEM_model= layer(GEM_model)\nGEM_model = Model(inputs=GEM_input, outputs=GEM_model)","f0c7dddc":"np.random.seed(seed=42)\n","f26b3926":"plt.figure(figsize=(10,10))\nfor i in range(0,40):\n    plt.subplot(8,8,i+1)\n    random_features=np.random.randn(1,featureSize) # GENERATE RANDOM NUMBERS BETWEEN 0 AND 1 BECAUSE WE USED SIGMOID\n    new_Img=GEM_model.predict(random_features)\n    new_Img=(new_Img+0.5)\n    matrix=new_Img.reshape(SCALE,SCALE,3)\n    Gimage=array_to_img(matrix)\n    plt.imshow(Gimage)\n    plt.axis(\"off\")\nplt.tight_layout(pad=0.1)","c9c1d9e8":"plt.figure(figsize=(10,10))\n\nplt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n","aa86e59d":"**GET DATA**","e393f49b":"**PLOT MODEL LOSS**","43b6b303":"**CREATE AUTOENCODER**","7e53abe9":"**CREATE GENERATING MODEL**","5e525355":"**GENERATE AND SHOW NEW IMAGES**","d9d15f25":"**EDIT AND RESHAPE DATASET**","55fad963":"**COMPARE REAL AND COMPRESSED IMAGE**"}}