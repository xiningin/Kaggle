{"cell_type":{"464c55d0":"code","9f8831f3":"code","1b5d46ba":"code","d87d7821":"code","e4781b60":"code","adeeec9f":"code","f57109c5":"code","0f2a057e":"markdown","c898f3d3":"markdown","858668a5":"markdown","afb13736":"markdown","c1f6d2e8":"markdown"},"source":{"464c55d0":"from glob import glob\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom skimage.io import imread\nimport matplotlib.pyplot as plt\n%matplotlib inline","9f8831f3":"src_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/'\ntrain_dir = os.path.join(src_dir, 'train')\ntest_dir = os.path.join(src_dir, 'test')\nnormal_dir = os.path.join(train_dir, \"NORMAL\")\npneumonia_dir = os.path.join(train_dir, \"PNEUMONIA\")\n\nlen_normal_samples = len(os.listdir(normal_dir))\nlen_pneumonia_samples = len(os.listdir(pneumonia_dir))\nlen_train_samples = len_normal_samples + len_pneumonia_samples\n\nprint(f\"Our training dataset contains {len_train_samples} images including:\")\nprint(f\"      {len_normal_samples} images of healthy patients\")\nprint(f\"      {len_pneumonia_samples} images of patients with pneumonia\")","1b5d46ba":"def plot(samples):\n    f, ax = plt.subplots(2,5, figsize=(30,10))\n    for i in range(10):\n        img = imread(samples[i])\n        ax[i\/\/5, i%5].imshow(img, cmap='gray')\n        if i<5:\n            ax[i\/\/5, i%5].set_title(\"Pneumonia\", fontsize=20)\n        else:\n            ax[i\/\/5, i%5].set_title(\"Normal\", fontsize=20)\n        ax[i\/\/5, i%5].axis('off')\n        ax[i\/\/5, i%5].set_aspect('auto')\n    plt.show()","d87d7821":"pneumonia_samples = glob(pneumonia_dir+'\/*.jpeg')[:5]\nnormal_samples = glob(normal_dir+'\/*.jpeg')[:5]\nplot([*pneumonia_samples, *normal_samples])","e4781b60":"def compile_model():    \n    model = tf.keras.Sequential([\n        tf.keras.applications.resnet50.ResNet50(include_top=False,\n                                                    weights='imagenet',\n                                                    pooling='avg'),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n    \n    model.layers[0].trainable = False\n    \n    model.compile(\n        optimizer='adam',\n        loss='binary_crossentropy',\n        metrics='binary_accuracy'\n    )\n    \n    return model","adeeec9f":"image_size = 150\nbatch_size = 32\n\nEPOCHS = 1\n            \ntrain_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                        preprocessing_function=tf.keras.applications.resnet50.preprocess_input,\n                        validation_split=0.2)\n\ntrain_generator = train_data_generator.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/',\n       target_size = (image_size, image_size),\n       batch_size = batch_size,\n       class_mode = 'binary',\n       subset = 'training')\n\nvalidation_generator = train_data_generator.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/',\n       target_size = (image_size, image_size),\n       batch_size = batch_size,\n       class_mode = 'binary',\n       subset = 'validation')\n\ntest_generator = train_data_generator.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/',\n       target_size = (image_size, image_size),\n       batch_size = batch_size,\n       class_mode = 'binary')\n\nclass_weight = {train_generator.class_indices['NORMAL']: len_pneumonia_samples\/len_train_samples,\n               train_generator.class_indices['PNEUMONIA']: len_normal_samples\/len_train_samples}\n\nmodel = compile_model()\nmodel.fit(\n       train_generator,\n       epochs = EPOCHS,\n       validation_data = validation_generator,\n       class_weight = class_weight)\n\nmodel.save('xray_model.h5')","f57109c5":"model = tf.python.keras.models.load_model('xray_model.h5')\n\nscores = model.evaluate(test_generator)\nprint(f\"\\n{model.metrics_names[1]}: {scores[1]*100:.2f}%\")","0f2a057e":"# Resnet-50 for Pneumonia Detection","c898f3d3":"## Analyze the dataset","858668a5":"## Visualize the dataset","afb13736":"## Test the model\n","c1f6d2e8":"## Define and train the model"}}