{"cell_type":{"d743ebf3":"code","7fae657e":"code","d8cb00b2":"code","aefcd8c2":"code","00f5fba4":"code","4a1be1ed":"code","d5fcbe4f":"code","819e0d26":"code","82f94667":"code","1333a012":"code","00f1d62b":"code","00b17e6f":"code","e79b489c":"code","f48887a1":"code","ec4eca5a":"code","58bfc4f7":"code","dee1476f":"code","3da06a78":"code","7a9a5163":"code","8483e486":"code","f5d9d1c8":"code","f35bcc57":"code","5efaf7af":"code","abe47005":"code","a6deeb6c":"code","9ccf01a5":"code","5382275a":"code","c7665b3f":"code","e987fc38":"code","9693d48d":"code","4bf3cc80":"code","6b89e418":"code","c0f8274a":"code","47deddf6":"code","07d707b3":"code","1d150a3e":"code","09e4de0e":"code","4f34b9f9":"code","b8aa9361":"code","3f911ce2":"code","a8be4719":"code","6962f156":"code","acb22a68":"code","4551c6c5":"code","ed22a67f":"code","bf3b73d8":"code","61342978":"code","1c7f7f76":"markdown"},"source":{"d743ebf3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fae657e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","d8cb00b2":"data = pd.read_csv(\"..\/input\/ckdprediction\/kidney_disease.csv\")\ndata.head()","aefcd8c2":"data.info()","00f5fba4":"categorial_cols = [col for col in data.columns if data[col].dtype==\"object\"]\ncategorial_cols","4a1be1ed":"numerical_cols = [x for x in data.columns if not x in categorial_cols]\nnumerical_cols","d5fcbe4f":"for i in ['rc','wc','pcv']:\n    data[i] = data[i].str.extract('(\\d+)').astype(float)","819e0d26":"for i in ['age','bp','sg','al','su','bgr','bu','sc','sod','pot','hemo','rc','wc','pcv']:\n    data[i].fillna(data[i].mean(),inplace=True)","82f94667":"rbc = pd.get_dummies(data[[\"rbc\"]],drop_first=True)\nrbc.head()","1333a012":"pc = pd.get_dummies(data[[\"pc\"]],drop_first=True)\npc.head()","00f1d62b":"pcc = pd.get_dummies(data[[\"pcc\"]],drop_first=True)\npcc.head()","00b17e6f":"ba = pd.get_dummies(data[[\"ba\"]],drop_first=True)\nba.head()","e79b489c":"data.head()","f48887a1":"data = pd.concat([data,rbc,pc,pcc,ba],axis=1)","ec4eca5a":"data.head()","58bfc4f7":"data.info()","dee1476f":"#converting the age Data column into list\nk=data[\"age\"].apply(lambda x : int(x)\/\/10).to_list()","3da06a78":"a=[0]*10\nfor i in range(len(k)):\n    a[k[i]]+=1\na","7a9a5163":"plt.figure(figsize= (7,7))\nx_labels = ['0-9','10-19','20-29','30-39','40-49','50-59','60-69','70-79','80-89','90-99']\ny_labels = np.array(a)\nplt.pie(y_labels, labels = x_labels)\nplt.show() ","8483e486":"data[\"classification\"].value_counts()","f5d9d1c8":"data.replace({\"notckd\":0,\"ckd\":1,\"ckd\\t\":1},inplace=True)\nplt.figure(figsize=(25,10))\nsns.barplot(x =data['bp'],y =data['classification'],data=data)\nplt.show()","f35bcc57":"plt.figure(figsize=(10,10))\nsns.swarmplot(y=data[\"age\"], x = data[\"classification\"])","5efaf7af":"data[\"appet\"].value_counts()","abe47005":"plt.figure(figsize=(7,7))\nsns.barplot(x =data['appet'],y =data['classification'],data=data)\nplt.show()","a6deeb6c":"data.replace({\"good\":1,\"poor\":0},inplace=True)\ndata[\"ane\"].value_counts()","9ccf01a5":"data.replace({\"no\":0,\"yes\":1,\"\\tno\":0,\"\\tyes\":1,\" yes\":1},inplace=True)\ndata.info()","5382275a":"data=data.apply(lambda x:x.fillna(x.value_counts().index[0]))\ndata.info()","c7665b3f":"data.columns","e987fc38":"#getting the columns in the dataset\ndata.columns\n","9693d48d":"X = data.loc[:,['age', 'bp', 'rc','wc','appet','htn','hemo','bgr','dm','ane']]\ny = data[\"classification\"]","4bf3cc80":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state = 0)\nX_train.head()","6b89e418":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state = 0)\nX_train.head()","c0f8274a":"model = RandomForestClassifier()\nmodel.fit(X_train,y_train)","47deddf6":"#getting the predictions using the trained model\npredictions = model.predict(X_test)","07d707b3":"#checking the mean absolute error between the predicted values and test data\nprint(\"the mean absolute error by using the RandomForest is\",mean_absolute_error(y_test,predictions))","1d150a3e":"#printing the accuracy of the train data\nprint(\"the accuracy of the train data is \",model.score(X_train,y_train)*100)","09e4de0e":"#printing the accuracy of the test data\nprint(\"the accuracy of the test data is\",model.score(X_test,y_test)*100)","4f34b9f9":"#using the XGradient Boosting algorithm\nmod = XGBClassifier()\nmod.fit(X_train,y_train)","b8aa9361":"#checking the mean absolute error between the predicted values and test data\nprint(mean_absolute_error(y_test,mod.predict(X_test)))","3f911ce2":"#printing the accuracy of the train data\nprint(\"the accuracy of the train data is \",mod.score(X_train,y_train)*100)","a8be4719":"#printing the accuracy of the test data\nprint(\"the accuracy of the test data is\",mod.score(X_test,y_test)*100)","6962f156":"model2 = SVC()\nmodel2.fit(X_train,y_train)","acb22a68":"print(\"the mean absolute error is\",mean_absolute_error(y_test,model2.predict(X_test)))","4551c6c5":"#printing the accuracy of the train data\nprint(\"the accuracy of the train data is \",model2.score(X_train,y_train)*100)","ed22a67f":"#printing the accuracy of the test data\nprint(\"the accuracy of the test data is\",model2.score(X_test,y_test)*100)","bf3b73d8":"#import pickle\n#file = open(\"mainBookpickle.pkl\",\"wb\")\n#pickle.dump(model,file)","61342978":"#checking the test accuracy with the model in the pickle file\n#mod1 = pickle.load(open(\"mainBookpickle.pkl\",\"rb\"))\n#print(mod1.score(X_test,y_test)*100)","1c7f7f76":"Dumping the best model into the pickle\n        from the above three models we get to know that Random Forest gives the best accuracy as compared with remaining two models. So, we use Random Forest for this project."}}