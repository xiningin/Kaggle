{"cell_type":{"8121fac6":"code","5ff58e21":"code","73f386eb":"code","d9665f50":"code","d179e5d3":"code","3d3b5c31":"code","5499340e":"code","78a01b1c":"code","aef1f160":"code","9c1d9dcb":"code","fa2f178f":"code","45481144":"code","a5688d1e":"code","2bddc151":"code","44e7e124":"code","c96555e1":"code","5c2505f3":"code","8c08cd4e":"code","dc671376":"code","7206469e":"code","88d82f47":"code","efbc4bb2":"code","60f9ba92":"code","6ca098b1":"code","a0e81dff":"code","e80d228d":"code","bbf8e19f":"code","9f28d97c":"code","eefea6d3":"code","a38375ef":"code","32284f52":"code","af888fb5":"code","8570b33f":"code","9f2a293a":"code","09a221b9":"code","0de4ae41":"code","1a8c0a21":"code","abba5c2f":"code","ddc8ebfc":"code","d28c1d61":"code","57836390":"code","1658698a":"code","4a5f435d":"code","b6e3274a":"code","c53fd360":"code","266da99f":"code","a83c38fb":"code","c98a1886":"code","7fdd5e1b":"code","4071ca02":"code","4d9fdddd":"markdown","22178bb8":"markdown","2915440d":"markdown","d5b840d5":"markdown","22dd2426":"markdown","4520ceb6":"markdown","38d73133":"markdown","3abd263d":"markdown","6dd8597b":"markdown","dcc1af15":"markdown","e97ac696":"markdown"},"source":{"8121fac6":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nfrom matplotlib.colors import ListedColormap\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score, auc, roc_curve, precision_recall_curve, classification_report, accuracy_score,log_loss, confusion_matrix\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)\nimport numpy as np\n","5ff58e21":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv') \n","73f386eb":"sns.countplot(x=\"Outcome\", data=df)\nplt.show()","d9665f50":"df.corr()","d179e5d3":"plt.figure(figsize=(10,12))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","3d3b5c31":"sns.pairplot(data=df, hue='Outcome')\nplt.show()","5499340e":" df.columns","78a01b1c":" sns.countplot(x=df['Pregnancies'] )","aef1f160":"sns.distplot(df[\"Glucose\"])","9c1d9dcb":"sns.distplot(df[\"BloodPressure\"])","fa2f178f":"sns.distplot(df[\"SkinThickness\"])","45481144":"assert pd.notnull(df).all().all()\n","a5688d1e":"x=df.drop(columns='Outcome')\ny=df['Outcome']\n ","2bddc151":"from sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","44e7e124":"x_train.shape, x_test.shape","c96555e1":"y_train.shape, y_test.shape","5c2505f3":"logreg=LogisticRegression()","8c08cd4e":"logreg.fit(x_train, y_train)","dc671376":"y_pred=logreg.predict_proba(x_test)[:,1]","7206469e":"roc_auc_score(y_train, logreg.predict_proba(x_train)[:,1])","88d82f47":"roc_auc_score(y_test, logreg.predict_proba(x_test)[:,1])","efbc4bb2":"print(f'accuracy of model is:{accuracy_score(y_test, logreg.predict(x_test))}')\nprint(f\"classification report is:{classification_report(y_test, logreg.predict(x_test))}\")\nprint(f\"confusion matrix is :{confusion_matrix(y_test, logreg.predict(x_test))}\")\nprint(f'log loss is:{log_loss(y_test, y_pred)}')","60f9ba92":"fpr, tpr, _=roc_curve(y_test, logreg.predict_proba(x_test)[:,1])\nroc_auc=auc(fpr, tpr)\nfpr_tr, tpr_tr, thresholds_roc = roc_curve(y_train, logreg.predict_proba(x_train)[:, 1])\nroc_auc_tr = auc(fpr_tr, tpr_tr)","6ca098b1":"import matplotlib.pyplot as plt\nplt.plot(fpr, tpr, color=\"red\")\nplt.plot(fpr_tr,\n    tpr_tr,\n    color=\"green\")\nplt.plot([0, 1], [0, 1], color=\"navy\", lw=2, linestyle=\"--\")\n\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Receiver operating characteristic\")\n \nplt.show()","a0e81dff":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier()\nrf.fit(x_train,y_train)","e80d228d":"rf.fit(x_train, y_train)","bbf8e19f":" y_pred=rf.predict(x_test)","9f28d97c":"print(f'accuracy of model is:{accuracy_score(y_test,rf.predict(x_test))}')\nprint(f'classification report is:{classification_report(y_test, rf.predict(x_test))}')\nprint(f'Confusion matrix is:{confusion_matrix(y_test, rf.predict(x_test))}')\nprint(f\"log loss of model is:{log_loss(y_test, rf.predict(x_test))}\")","eefea6d3":"from xgboost import XGBClassifier\n","a38375ef":"xgb= XGBClassifier()","32284f52":"xgb.fit(x_train, y_train)","af888fb5":"y_pred1=xgb.predict(x_test)","8570b33f":"print(f'accuracy of model is:{accuracy_score(y_test,y_pred1)}')\nprint(f'Classification report is:{classification_report(y_test,y_pred1)}')\nprint(f'Confusion matrix is:{confusion_matrix(y_test, y_pred1)}')\nprint(f\"log loss of model is:{log_loss(y_test, y_pred1)}\")\n","9f2a293a":"from sklearn.tree import DecisionTreeClassifier\n","09a221b9":"dtree = DecisionTreeClassifier()","0de4ae41":"dtree.fit(x_train, y_train)","1a8c0a21":"y_pred2=dtree.predict(x_test)","abba5c2f":"print(f'accuracy of model is:{accuracy_score(y_test, y_pred2)}')\nprint(f'classification report is:{classification_report(y_test, y_pred2)}')\nprint(f'confusion matrix is:{confusion_matrix(y_test, y_pred2)}')\nprint(f\"log loss of model is:{log_loss(y_test, y_pred2)}\")","ddc8ebfc":"from sklearn.ensemble import GradientBoostingClassifier\ngbdt=GradientBoostingClassifier()\ngbdt.fit(x_train,y_train)","d28c1d61":"gbdt.fit(x_train, y_train)","57836390":"y_pred=gbdt.predict(x_test)","1658698a":"print(f\"accuarcy of model is:{accuracy_score(y_test, y_pred)}\")\nprint(f'classification report is:{classification_report(y_test, y_pred)}')\nprint(f'confusion matrix is:{confusion_matrix(y_test, y_pred)}')\nprint(f\"log loss of model is:{log_loss(y_test, y_pred)}\")","4a5f435d":"from sklearn.ensemble import AdaBoostClassifier","b6e3274a":"adb=AdaBoostClassifier()","c53fd360":"adb.fit(x_train, y_train)","266da99f":"print(f\"accuracy of model is:{accuracy_score(y_test, adb.predict(x_test))}\")\nprint(f\"confusion matrix is:{confusion_matrix(y_test, adb.predict(x_test))}\")\nprint(f\"classification report is:{classification_report(y_test, adb.predict(x_test))}\")\nprint(f\"log loss of model is:{log_loss(y_test, adb.predict(x_test))}\")","a83c38fb":"from sklearn.neighbors import KNeighborsClassifier","c98a1886":"knn=KNeighborsClassifier()","7fdd5e1b":"knn.fit(x_train, y_train)","4071ca02":"print(f\"the accuracy of model is:{accuracy_score(y_test, knn.predict(x_test))}\")\nprint(f\"confusion matrix is:{confusion_matrix(y_test, knn.predict(x_test))}\")\nprint(f\"classification report is:{classification_report(y_test, knn.predict(x_test))}\")\nprint(f\"log loss of model is:{log_loss(y_test, knn.predict(x_test))}\")","4d9fdddd":"# Random Forest","22178bb8":"# KNN","2915440d":"# Loading the dataset","d5b840d5":"# Exploratory Data Analysis","22dd2426":"# Decision Tree Classifier","4520ceb6":"# gradient boosting classifier","38d73133":"# Importing Libraries","3abd263d":"# Logistic Regression","6dd8597b":"Count of peoples not having diabetes has high count as compared to have diabetes","dcc1af15":"# Adaboost","e97ac696":"# XGboost"}}