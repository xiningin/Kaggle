{"cell_type":{"ae95c394":"code","f9781715":"code","124e8d57":"code","d615a4cd":"code","6e834a9c":"code","35c4475b":"code","31dd802b":"code","a2bc2864":"code","a933a441":"code","0c37234a":"code","d12741ad":"code","70d247f3":"code","7c8730c2":"code","50343538":"code","e850a5f1":"markdown"},"source":{"ae95c394":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9781715":"response = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nresponse = response.drop(response.index[0], axis = 0)","124e8d57":"response.head()","d615a4cd":"response.describe()","6e834a9c":"response.shape","35c4475b":"# Viz Library\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import show","31dd802b":"data = response['Q1'].sort_values(ascending=True)","a2bc2864":"sns.set(font_scale=1.4)\nsns.color_palette(\"tab10\")\nplt.figure(figsize=(15,10))\n\ntotal = float(len(response)) # one person per row \n\nax = sns.countplot(x = data, data = response)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.1f}%'.format((height\/total)*100),\n            ha=\"center\") \n\nplt.title('Age Distribution',\n         fontsize =30)\n\nplt.xlabel('Age', fontsize = 24)\nplt.ylabel('Percentage', fontsize = 24)","a933a441":"'''\nPlotting Top 5 Countries which has More Number of Responses\n'''\n\nsns.set(font_scale=1.4)\nplt.figure(figsize=(15,10))\n\nsns.countplot(y = response['Q3'], palette = 'pastel', data = response, order=['India', 'United States of America', 'Brazil',\n                                                                                       'Japan', 'Russia'])\n\nplt.title('Top 5 Country Per Responses',\n         fontsize =30)\n\nplt.xlabel('Frequency', fontsize = 24)\nplt.ylabel('Country', fontsize = 24)\n\nplt.show()","0c37234a":"sns.set(font_scale=1.4)\nplt.figure(figsize=(15,10))\n\ndata = response['Q4'].sort_values(ascending=True)\n#Should be done by values instead \nax = sns.countplot(y = data, data = response, palette = \"rainbow\")\n\ntotal = len(response['Q4'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\n\nplt.title('Formal Education',\n         fontsize =30)\n\nplt.xlabel('Frequency', fontsize = 24)\nplt.ylabel('Education', fontsize = 24)\n\nplt.show()","d12741ad":"sns.set(font_scale=1.4)\nplt.figure(figsize=(17,10))\n\ndata = response['Q5'].sort_values(ascending=True)\n\nax = sns.countplot(y = data, data = response, palette = \"spring\")\n\ntotal = len(response['Q5'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\n\nplt.title('Job Title',\n         fontsize =30)\n\nplt.xlabel('Frequency', fontsize = 24)\nplt.ylabel('Job', fontsize = 24)\n\nplt.show()","70d247f3":"sns.set(font_scale=1.4)\nplt.figure(figsize=(17,10))\n\nax = sns.countplot(y = 'Q6', data = response, palette = \"spring\")\n\ntotal = len(response['Q6'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\n\nplt.title('Years of Programming Experience',\n         fontsize =30)\n\nplt.xlabel('Frequency', fontsize = 24)\nplt.ylabel('Code', fontsize = 24)\n\nplt.show()","7c8730c2":"\nquestion_9 = np.concatenate([response.Q9_Part_1,\n                             response.Q9_Part_2,\n                             response.Q9_Part_3,\n                             response.Q9_Part_4,\n                             response.Q9_Part_5,\n                             response.Q9_Part_6,\n                             response.Q9_Part_7,\n                             response.Q9_Part_8,\n                             response.Q9_Part_9,\n                             response.Q9_Part_10,\n                             response.Q9_Part_11,\n                             response.Q9_OTHER\n])\n\nques_9 = pd.concat([response, pd.DataFrame(question_9)], ignore_index = True, axis = 1)\n\nques_9.columns = np.append(response.columns.values, 'Q9')","50343538":"sns.set(font_scale=1.4)\nplt.figure(figsize=(17,10))\n\nax = sns.countplot(y = ques_9.Q9, data = response, palette = \"rainbow\")\n\ntotal = len(response['Q9_Part_1'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\n\nplt.title('IDE\\'s Used Most Often',\n         fontsize =30)\n\nplt.xlabel('Frequency', fontsize = 24)\nplt.ylabel('IDE\\'s', fontsize = 24)\n\nplt.show()","e850a5f1":"Thanks [Saurabh Joshi](https:\/\/www.kaggle.com\/saurabhjoshi24) for the notebook."}}