{"cell_type":{"838217c3":"code","ade218a9":"code","7cdc7ef8":"code","faadd40a":"code","555fdd3c":"code","26c77e11":"code","fe6f8afc":"code","d4438fd8":"code","51b3a507":"code","f415d3d0":"code","2b70a8d0":"code","3f9d2bcd":"code","717c8422":"code","b051854c":"code","3c8b78d5":"code","7ae55c02":"code","ec9680e9":"code","348b217e":"code","cf58a485":"code","20a420be":"code","323c6b88":"code","8c5a037b":"code","00e3bf06":"code","651eced6":"code","18f9b540":"code","9970fecb":"code","8f4dac3f":"code","fdb45d1a":"code","93478962":"code","48fd0d9c":"code","0ccb3910":"code","e45d6f6c":"code","79f62378":"markdown","88f6ead1":"markdown","c3daf6c5":"markdown","1cdafa0a":"markdown","03155f64":"markdown","0a1018f4":"markdown","7d8fc90d":"markdown","fbdbebb0":"markdown","72c10d08":"markdown","fdfedf83":"markdown","1aa705bf":"markdown","7256e46f":"markdown","8e6c6559":"markdown","7b57f652":"markdown","fbb12e1c":"markdown","60d67aea":"markdown","0c273151":"markdown","257ea699":"markdown","7d381958":"markdown","81d077dc":"markdown","f0c27469":"markdown","df682bbf":"markdown","b9064a00":"markdown","6cbfcaec":"markdown","df61e849":"markdown","341e4888":"markdown","fbdb8285":"markdown","896c09fe":"markdown","6f882fb4":"markdown","f88edcc8":"markdown","655c99c3":"markdown","e2906096":"markdown","19d2dfca":"markdown","17efc3ed":"markdown","63876efb":"markdown","3e8b0e48":"markdown"},"source":{"838217c3":"import pandas as pd\npd.set_option(\"display.max_colwidth\", -1)\nimport numpy as np\n\nimport spacy\nnlp = spacy.load('en_core_web_sm')\nfrom spacy import displacy\nfrom textblob import TextBlob\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport re\n\nimport seaborn as sns\nimport matplotlib.style as style \nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport scattertext as st\nfrom IPython.display import IFrame\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report\n\nimport eli5\n\n\n\n\n","ade218a9":"df = pd.read_csv('\/kaggle\/input\/feedback-prize-2021\/train.csv')","7cdc7ef8":"df.head()","faadd40a":"df.isnull().sum().head()","555fdd3c":"print(f\"We have {df['id'].nunique()} essays\")","26c77e11":"sns.set_theme(style=\"darkgrid\")\nsns.set_palette('rainbow')\nplt.figure(figsize=(8,6))\nsns.barplot(y=df['discourse_type'].unique(),\n            x=df['discourse_type'].value_counts())\nplt.xlabel('Count of Discourse Type')\nplt.title('Target Distribution')\nplt.show()","fe6f8afc":"def clean_text(sentence):\n    sentence = sentence.lower()\n    sentence = ' '.join(re.sub(\"(nan)|(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)\",\" \", sentence).split())\n    return sentence\n\ndf['discourse_text'] = df['discourse_text'].map(clean_text)","d4438fd8":"df_claim['discourse_text_len'] = df_claim['discourse_text'].apply(lambda x: len(x))\ndf_evidence['discourse_text_len'] = df_evidence['discourse_text'].apply(lambda x: len(x))\ndf_position['discourse_text_len'] = df_position['discourse_text'].apply(lambda x: len(x))\ndf_concluding_statement['discourse_text_len'] = df_concluding_statement['discourse_text'].apply(lambda x: len(x))\ndf_lead['discourse_text_len'] = df_lead['discourse_text'].apply(lambda x: len(x))\ndf_counterclaim['discourse_text_len'] = df_counterclaim['discourse_text'].apply(lambda x: len(x))\ndf_rebuttal['discourse_text_len'] = df_rebuttal['discourse_text'].apply(lambda x: len(x))\n\nclaim_avg = df_claim['discourse_text_len'].sum()\/len(df_claim['discourse_text'])\nevidence_avg = df_evidence['discourse_text_len'].sum()\/len(df_evidence['discourse_text'])\nposition_avg = df_position['discourse_text_len'].sum()\/len(df_position['discourse_text'])\nconcluding_statement_avg = df_concluding_statement['discourse_text_len'].sum()\/len(df_concluding_statement['discourse_text'])\nlead_avg = df_lead['discourse_text_len'].sum()\/len(df_lead['discourse_text'])\ncounterclaim_avg = df_counterclaim['discourse_text_len'].sum()\/len(df_counterclaim['discourse_text'])\nrebuttal_avg = df_rebuttal['discourse_text_len'].sum()\/len(df_counterclaim['discourse_text'])\n\nsent_list = [claim_avg,evidence_avg,position_avg,concluding_statement_avg,lead_avg,counterclaim_avg,rebuttal_avg]\n\nsent_df = {'Classes':['Claim', 'Evidence', 'Position', 'Concluding Statement','Lead','Counterclaim','Rebuttal'],\n        'Length': sent_list}\nsent_df = pd.DataFrame(sent_df)\n\n\nsns.set_style('darkgrid')\nstyle.use('seaborn-pastel')\n\nplot = sns.catplot(\n    data=sent_df, kind=\"bar\",\n    x=\"Classes\", y=\"Length\",height = 8, aspect=9.7\/6.27,\n    legend=False\n)\n\nplot.fig.suptitle(\"Average Sentence Length\");\n","51b3a507":"def get_subjectivity(text):\n    return TextBlob(text).sentiment.subjectivity\n\ndf_claim = df.loc[df['discourse_type'] == 'Claim']\nclaim_score = df_claim['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\ndf_evidence = df.loc[df['discourse_type'] == 'Evidence']\nevidence_score = df_evidence['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\ndf_position  = df.loc[df['discourse_type'] == \"Position\"]\nposition_score = df_position['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\n\ndf_concluding_statement = df.loc[df['discourse_type'] == 'Concluding Statement']\nconcluding_statement_score = df_concluding_statement['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\ndf_lead = df.loc[df['discourse_type'] == \"Lead\"]\nlead_score = df_lead['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\ndf_counterclaim = df.loc[df['discourse_type'] == 'Counterclaim']\ncounterclaim_score = df_counterclaim['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\ndf_rebuttal = df.loc[df['discourse_type'] == 'Rebuttal']\nrebuttal_score = df_rebuttal['discourse_text'].astype(str).apply(get_subjectivity).sum()\n\nscores_list = [claim_score,evidence_score,position_score,concluding_statement_score,lead_score,counterclaim_score,rebuttal_score]\n\nscores_df = {'Classes':['Claim', 'Evidence', 'Position', 'Concluding Statement','Lead','Counterclaim','Rebuttal'],\n        'Count':scores_list}\nscores_df = pd.DataFrame(scores_df)\n\n\nsns.set_style('darkgrid')\nstyle.use('seaborn-pastel')\n\n\nplot = sns.catplot(\n    data=scores_df, kind=\"bar\",\n    x=\"Classes\", y=\"Count\",height = 8, aspect=9.7\/6.27,\n    legend=False\n)\n\nplot.fig.suptitle(\"Subjectivity Score\");\n\n","f415d3d0":"wc_claim = WordCloud(max_font_size=50, max_words=100, background_color=\"white\", collocation_threshold = 3).generate(claim_corpus)\nwc_evidence = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(evidence_corpus)\nwc_position = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(position_corpus)\nwc_lead = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(lead_corpus)\nwc_concluding_statement = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(concluding_statement_corpus)\nwc_counterclaim = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(counterclaim_corpus)\nwc_rebuttal = WordCloud(max_font_size=50, max_words=100, background_color=\"white\",collocation_threshold = 3).generate(rebuttal_corpus)\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nax1 = plt.imshow(wc_claim,interpolation=\"bilinear\")\nax1 = plt.title(\"Claim\", fontsize=20)\n\nax2 = fig.add_subplot(122)\nax2 = plt.imshow(wc_evidence,interpolation=\"bilinear\")\nax2 = plt.title(\"Evidence\", fontsize=20)\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nax1 = plt.imshow(wc_position,interpolation=\"bilinear\")\nax1 = plt.title(\"Position\", fontsize=20)\n\nax2 = fig.add_subplot(122)\nax2 = plt.imshow(wc_lead,interpolation=\"bilinear\")\nax2 = plt.title(\"Lead\", fontsize=20)\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nax1 = plt.imshow(wc_concluding_statement,interpolation=\"bilinear\")\nax1 = plt.title(\"Concluding Statement\", fontsize=20)\n\nax2 = fig.add_subplot(122)\nax2 = plt.imshow(wc_counterclaim,interpolation=\"bilinear\")\nax2 = plt.title(\"Counterclaim\", fontsize=20)\n\n\nfig = plt.figure(figsize=(12,6))\n\nax1 = fig.add_subplot(121)\nax1 = plt.imshow(wc_rebuttal,interpolation=\"bilinear\")\nax1 = plt.title(\"Rebuttal\", fontsize=20)\n\nplt.show()\n\n","2b70a8d0":"!pip install rake-nltk\nfrom rake_nltk import Rake\nr = Rake()","3f9d2bcd":"claim_corpus = df_claim['discourse_text'].tolist()\nclaim_corpus = \" \".join(claim_corpus)\nr.extract_keywords_from_text(claim_corpus)\ntop_claims = r.get_ranked_phrases()[0:100]\ntop_claims = \" \".join(top_claims)\ndisplacy.render(nlp(top_claims),style='ent',jupyter=True)","717c8422":"evidence_corpus = df_evidence['discourse_text'].tolist()\nevidence_corpus = \" \".join(evidence_corpus)\nr.extract_keywords_from_text(evidence_corpus)\ntop_evidence = r.get_ranked_phrases()[0:100]\ntop_evidence = \" \".join(top_evidence)\ndisplacy.render(nlp(top_evidence),style='ent')","b051854c":"position_corpus = df_position['discourse_text'].tolist()\nposition_corpus = \" \".join(position_corpus)\nr.extract_keywords_from_text(position_corpus)\ntop_position = r.get_ranked_phrases()[0:100]\ntop_position = \" \".join(top_position)\ndisplacy.render(nlp(top_position),style='ent')","3c8b78d5":"concluding_statement_corpus = df_concluding_statement['discourse_text'].tolist()\nconcluding_statement_corpus = \" \".join(concluding_statement_corpus)\nr.extract_keywords_from_text(concluding_statement_corpus)\ntop_concluding_statement = r.get_ranked_phrases()[0:100]\ntop_concluding_statement = \" \".join(top_concluding_statement)\ndisplacy.render(nlp(top_concluding_statement),style='ent')","7ae55c02":"lead_corpus = df_lead['discourse_text'].tolist()\nlead_corpus = \" \".join(lead_corpus)\nr.extract_keywords_from_text(lead_corpus)\ntop_lead = r.get_ranked_phrases()[0:100]\ntop_lead = \" \".join(top_lead)\ndisplacy.render(nlp(top_lead),style='ent')","ec9680e9":"counterclaim_corpus = df_counterclaim['discourse_text'].tolist()\ncounterclaim_corpus = \" \".join(counterclaim_corpus)\nr.extract_keywords_from_text(counterclaim_corpus)\ntop_counterclaim = r.get_ranked_phrases()[0:100]\ntop_counterclaim = \" \".join(top_counterclaim)\ndisplacy.render(nlp(top_counterclaim),style='ent')","348b217e":"rebuttal_corpus = df_rebuttal['discourse_text'].tolist()\nrebuttal_corpus = \" \".join(rebuttal_corpus)\nr.extract_keywords_from_text(rebuttal_corpus)\ntop_rebuttal = r.get_ranked_phrases()[0:100]\ntop_rebuttal = \" \".join(top_rebuttal)\ndisplacy.render(nlp(top_rebuttal),style='ent')","cf58a485":"def stopword_counter(corpus):\n    count = 0  \n    stop_words = set(stopwords.words('english'))\n    word_tokens = word_tokenize(corpus)\n    for w in word_tokens:\n        if w in stop_words:\n            count = count+1\n \n    return count\n\nclaim_count = stopword_counter(claim_corpus)\nevidence_count = stopword_counter(evidence_corpus)\nposition_count = stopword_counter(position_corpus)\nconcluding_satement_count = stopword_counter(concluding_statement_corpus)\nlead_count = stopword_counter(lead_corpus)\ncounterclaim_count = stopword_counter(counterclaim_corpus)\nrebuttal_count = stopword_counter(rebuttal_corpus)\nstopwords_count = [claim_count,evidence_count,position_count,concluding_satement_count,lead_count,counterclaim_count,rebuttal_count]\n\nstopwords_df = {'Classes':['Claim', 'Evidence', 'Position', 'Concluding_Statement','Lead','Counterclaim','Rebuttal'],\n        'Stopword Count':stopwords_count}\nstopwords_df = pd.DataFrame(stopwords_df)\nstopwords_df\n","20a420be":"def getPolarity(text):\n    return TextBlob(text).sentiment.polarity\n\ndf_claim = df.loc[df['discourse_type'] == 'Claim']\nclaim_score = df_claim['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_evidence = df.loc[df['discourse_type'] == 'Evidence']\nevidence_score = df_evidence['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_position  = df.loc[df['discourse_type'] == \"Position\"]\nposition_score = df_position['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_concluding_statement = df.loc[df['discourse_type'] == 'Concluding Statement']\nconcluding_statement_score = df_concluding_statement['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_lead = df.loc[df['discourse_type'] == \"Lead\"]\nlead_score = df_lead['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_counterclaim = df.loc[df['discourse_type'] == 'Counterclaim']\ncounterclaim_score = df_counterclaim['discourse_text'].astype(str).apply(getPolarity).sum()\n\ndf_rebuttal = df.loc[df['discourse_type'] == 'Rebuttal']\nrebuttal_score = df_rebuttal['discourse_text'].astype(str).apply(getPolarity).sum()\n\nsentiment_list = [claim_score,evidence_score,position_score,concluding_statement_score,lead_score,counterclaim_score,rebuttal_score]\n\nsentiment_df = {'Classes':['Claim', 'Evidence', 'Position', 'Concluding Statement','Lead','Counterclaim','Rebuttal'],\n        'Score':sentiment_list}\nsentiment_df = pd.DataFrame(sentiment_df)\n\n\nsns.set_style('darkgrid')\nstyle.use('seaborn-pastel')\n\nplot = sns.catplot(\n    data=sentiment_df, kind=\"bar\",\n    x=\"Classes\", y=\"Score\",\n    height=8, aspect=9.7\/6.27, legend=False\n)\n\nplot.fig.suptitle(\"Sentiment Score\")","323c6b88":"df_claim_list = df_claim['discourse_text'].tolist()\ndf_claim_list_label = df_claim['discourse_type'].tolist()\ndf_empty = pd.DataFrame()\ndf_empty.insert(0,'txt',df_claim_list,True)\ndf_empty.insert(1,'label',df_claim_list_label)\ndf_empty_1 = pd.DataFrame()\ndf_position_list = df_position['discourse_text'].tolist()\ndf_position_list_label = df_position['discourse_type'].tolist()\ndf_empty_1.insert(0,'txt',df_position_list,True)\ndf_empty_1.insert(1,'label',df_position_list_label,True)\ndf_train = df_empty.append(df_empty_1)\n","8c5a037b":"X_train,X_test,y_train,y_test = train_test_split(df_train['txt'],df_train['label'])","00e3bf06":"SD_clf = Pipeline([('tfidf', TfidfVectorizer(ngram_range=(1,2))),('clf',  SGDClassifier())])\n\nSD_clf.fit(X_train,y_train)","651eced6":"SD_clf.score(X_test,y_test)","18f9b540":"pred_sd = SD_clf.predict(X_test)\npd.DataFrame(classification_report(pred_sd,y_test,output_dict=True)).T\n","9970fecb":"eli5.show_weights(SD_clf)","8f4dac3f":"df_empty_3 = pd.DataFrame()\ndf_counterclaim_list = df_counterclaim['discourse_text'].tolist()\ndf_counterclaim_label = df_counterclaim['discourse_type'].tolist()\ndf_empty_3.insert(0,'txt',df_counterclaim_list,True)\ndf_empty_3.insert(1,'label',df_counterclaim_label,True)\ndf_empty_4 = pd.DataFrame()\ndf_rebuttal_list = df_rebuttal['discourse_text'].tolist()\ndf_rebuttal_label = df_rebuttal['discourse_type'].tolist()\ndf_empty_4.insert(0,'txt',df_rebuttal_list,True)\ndf_empty_4.insert(1,'label',df_rebuttal_label,True)\ndf_train_2 = df_empty_3.append(df_empty_4)\n","fdb45d1a":"X_train_2,X_test_2,y_train_2,y_test_2 = train_test_split(df_train_2['txt'],df_train_2['label'])","93478962":"SD_clf_2 = Pipeline([('tfidf', TfidfVectorizer(ngram_range=(1,2))),('clf',  SGDClassifier())])\n\nSD_clf_2.fit(X_train_2,y_train_2)","48fd0d9c":"SD_clf_2.score(X_test_2,y_test_2)","0ccb3910":"pred_sd_2 = SD_clf_2.predict(X_test_2)\npd.DataFrame(classification_report(pred_sd_2,y_test_2,output_dict=True)).T","e45d6f6c":"eli5.show_weights(SD_clf_2)","79f62378":"### Distribution of target","88f6ead1":"# __EDA__ \ud83d\udcca","c3daf6c5":"The dataset contains argumentative essays written by U.S students in grades 6-12. The essays were annotated by expert raters for elements commonly found in argumentative writing.\n\nThe goal of this competition is to come up with a model that can accurately segment according to the categories listed below. \n\n* Lead - an introduction that begins with a statistic, a quotation, a description, or some other device to grab the reader\u2019s attention and point toward the thesis\n* Position - an opinion or conclusion on the main question\n* Claim - a claim that supports the position\n* Counterclaim - a claim that refutes another claim or gives an opposing reason to the position\n* Rebuttal - a claim that refutes a counterclaim\n* Evidence - ideas or examples that support claims, counterclaims, or rebuttals.\n* Concluding Statement - a concluding statement that restates the claims\n\nThis Notebook contains **Comprehensive EDA** in a bid to surface any linguistic patterns that might occur class-wise; that could be leveraged for segmentation","1cdafa0a":"### Let's first take a look at average sentence lengths of each class","03155f64":"### Basic text cleaning for removing stopwords, punctuation and any non-alphanumeric characters","0a1018f4":"### Number of unqiue essays to work with","7d8fc90d":"### ---> Only about 80 percent of accuracy here, could be because the data points to work with are much lesser than the previous case and the thematic overlap.\n\n","fbdbebb0":"### The column descriptions are:\n\n* id - ID code for essay response\n* discourse_id - ID code for discourse element\n* discourse_start - character position where discourse element begins in the essay response\n* discourse_end - character position where discourse element ends in the essay response\n* discourse_text - text of discourse element\n* discourse_type - classification of discourse element\n* discourse_type_num - enumerated class label of discourse element\n* predictionstring - the word indices of the training sample, as required for predictions","72c10d08":"### Top Phrases for Lead Statement","fdfedf83":"### The RAKE a.k.a Rapid Automatic Keyword Extraction algorithm does a decent job of extracting top phrases from a corpus, we use the RAKE-NLTK library to perform this task for each of the classes and spaCy to highlight the type of entities present in the **top 100** phrases.","1aa705bf":"### Top Phrases for Counterclaim ","7256e46f":"### Wordcloud sorted by class to get the most frequent words","8e6c6559":"### Overview of the dataset","7b57f652":"### Importing required libraries \ud83d\udcda","fbb12e1c":"# __Introduction__","60d67aea":"### Top phrases for Evidence","0c273151":"### ---> Sentiment is directly proportional to the number of data points, suggesting that most essays are bereft of words that carry strong sentiments.\n\n### ---> Essays are written in a passive voice with facts used more to justify their position than personal preferences, this could be why here sentiment only correlates with the length and not the semantic meaning. ","257ea699":"### Top Phrases for Claim","7d381958":"<img src=\"https:\/\/i2.wp.com\/www.iedunote.com\/img\/20535\/essay-writing-made-easy.jpg?fit=1920%2C1280&quality=100&ssl=1\" style=\"width:500px;height:500px;img-align:center;\">","81d077dc":"### Loading in the dataset","f0c27469":"### Check for null values","df682bbf":"### ---> Commonly used words like 'people', 'think', 'student' are the most frequent, although the frequency of the word, 'Electoral' across multiple classes is a bit surprising. \n\n### ---> This suggests the variance in the topic of essay's isn't much and despite containing essays by students ranging from 6th grade to 12th grade, the vocabulary level is pretty consistent at middle-school level.","b9064a00":"### Sentiment score sorted by class. Higher score indicates a more positive statement","6cbfcaec":"### ---> Evidence has around 5k data points less than Claims but still outscores it substantially when it comes to subjectivity. Ironically evidential statements should be less subjective than mere claims\n\n### ---> Same case with the Position and Concluding Statement pair; a concluding statement should have *less* subjectivity than a position statment, where mostly factual statements are recanted.\n\n### ---> Both Counterclaim and Rebuttal are essentially contradicting an opposing statement with fact, maybe why they have almost the same subjectivity score(accounting for the difference in data points)\n\n### ---> Lead's relatively low subjectivity score can be explained by the fact that a lot opening's start with a fact, a statistic or paraphrasing a quote","df61e849":"### Top phrases for Position","341e4888":"The notebook is a work in progress and will be updated with more EDA and Modelling content","fbdb8285":"### Top Phrases for Concluding Statement","896c09fe":"### ---> Verbs like 'should', believe, 'think' are generally used to express normative sentences, which tracks because the student is writing about their *opinion*\n\n### ---> 'reason', 'because', 'also' are words usually used when elaborating on a Claim, so that tracks too. \n\n### ---> There is a clear pattern of words\/phrases for both the classes, with Position sentences usually expressing normative sentiments and Claims sentences justifying the rationale behind the claim","6f882fb4":"### ","f88edcc8":"### 88 % accuracy, suggesting that these both have sufficiently unique features to distinguish between them.  ","655c99c3":"### ---> Very uneven distribution, Evidence has a substantially higher average sentence length than the other classes, followed by Concluding Statement and Lead. \n\n### ---> Lead corresponds to the introduction, Concluding Statement is the ending and Evidence is the crux of an argumentative essay, so it stands to reason why they would be the top 3 longest classes.\n\n### ---> Classes similar to each other, Claim\/Position and Counterclaim\/Rebuttal are around the same vicinity ","e2906096":"### Stopword count by Class","19d2dfca":"### Top Phrases for Rebuttal ","17efc3ed":"### Textblob library let's us compute the subjectivity of a sentence, taking this measure class-wise might shed some insights. Higher the score, higher the subjectivity ","63876efb":"An interesting approach to EDA would be to group similar classes and see if we can train a classifier to discriminate between them with enough accuracy\nDistinguishing between them could assist in text segmentation which could then be used as a intermediate step for making the argumentative\/non-argumentative classification. Here we try out 2 pairs, the first one is (Claim, Position) and the second one is (Counterclaim, Rebuttal). ","3e8b0e48":"### ---> Thematically, Counterclaim and Rebuttal are very similar as they are both refuting a statement, so the words used as features to detect them are too. \n\n### ---> Many words that are used for negation have shown up in both the classes as expected; \"no\", \"however\", \"although\" etc. \n\n### ---> It's difficult to find much semantic\/linguistic difference bwetween these 2 classes"}}