{"cell_type":{"cdebcacc":"code","f78a1980":"code","7f227ba3":"code","23f37a06":"code","19ed2f09":"code","872bf9a7":"code","445b51da":"code","fdcd4ab7":"code","a7421449":"code","40f32454":"code","b74860b7":"code","64ac7ba9":"code","3fe97e69":"code","e786ef4f":"code","20f2f3aa":"code","d575bf71":"code","50b67001":"code","05898e58":"code","692b22c4":"code","3c34e23b":"code","a896b375":"code","c6c6122e":"code","b891a4b2":"code","cb011a32":"code","3c4f00ce":"code","83209ca8":"code","919c8bd5":"code","ec1d7f30":"code","424ac7e5":"code","84a2d38c":"code","8ce3fff8":"code","f009e349":"code","f214cfe3":"code","9d52f9d2":"code","3d825bc4":"code","36444d9c":"code","b170867a":"markdown","dc07ac9f":"markdown","666e188c":"markdown","da7739ad":"markdown","8df25cf3":"markdown","8543e6bb":"markdown","aec2b965":"markdown","50b5ed02":"markdown","a7e23b14":"markdown","99dd706f":"markdown","cf5588b2":"markdown","d73b48de":"markdown","690a4f3f":"markdown","09604385":"markdown"},"source":{"cdebcacc":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","f78a1980":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine=[train_df,test_df]","7f227ba3":"train_df.columns","23f37a06":"train_df.head()","19ed2f09":"sns.heatmap(train_df.isnull(),cbar=False,yticklabels=False)","872bf9a7":"train_df.info()\nprint('-'*50)\ntest_df.info()","445b51da":"train_df.describe()\n","fdcd4ab7":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","a7421449":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","40f32454":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b74860b7":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","64ac7ba9":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","3fe97e69":"sns.countplot(x='Survived',data=train_df,hue='Pclass')","e786ef4f":"sns.countplot(x='SibSp',data=train_df)","20f2f3aa":"plt.figure(figsize=(10,7))\nsns.boxplot(x='Pclass',y='Age',data=train_df)","d575bf71":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","50b67001":"guess_ages = np.zeros((2,3))\nguess_ages","05898e58":"for dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                        'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","692b22c4":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","3c34e23b":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","a896b375":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head()","c6c6122e":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b891a4b2":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()\n","cb011a32":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()","3c4f00ce":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","83209ca8":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","919c8bd5":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","ec1d7f30":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","424ac7e5":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","84a2d38c":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(5)","8ce3fff8":"train_df = train_df.drop(['Ticket', 'Cabin','Name'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin','Name'], axis=1)\ncombine = [train_df, test_df]","f009e349":"train_df = train_df.drop(['PassengerId'], axis=1)","f214cfe3":"from sklearn.ensemble import RandomForestClassifier","9d52f9d2":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape\n","3d825bc4":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","36444d9c":"my_submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nmy_submission.to_csv('submission.csv', index=False)\nY_pred","b170867a":"Importing our random classifier and predicting the new labels.","dc07ac9f":"Our main goal is to identify the relationship between our output(Survived) using features(Gender, Age, Port...)","666e188c":"**Here we can see that class 1 passengers had the highest survival rate where as lowest class had the lowest survival rate**","da7739ad":"# Analyzing the data\ngetting all the features names","8df25cf3":"**Creating new features from the existing features**","8543e6bb":"Now we iterating sex(0,1) and pclass(1,2,3) to find the missing the data of the age .","aec2b965":"# Analyzing by visualizing data\nWe can confirm some of our assumptions using visualization.\n","50b5ed02":"**Analyzing which features have the most effect on survival rate**","a7e23b14":"Importing all the major libraries which are required for data visualization and analysis as well as for linear algebra.","99dd706f":"**Which features contain blank or null values**","cf5588b2":"Exploring the  data types","d73b48de":"**Converting into categorical features**","690a4f3f":"**Exploring the categorical as well as numerical features and distinguishing between them**","09604385":"**Most of the survivors were female**"}}