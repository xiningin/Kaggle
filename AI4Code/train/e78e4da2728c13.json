{"cell_type":{"5839f3f3":"code","d6a14aec":"code","2a046b3c":"code","dd9af25c":"code","89794cda":"code","033456fa":"code","3aafd54b":"code","57eebf6b":"code","055437e7":"code","82463718":"code","1f82dcc2":"code","6385fb09":"code","56b9576c":"code","7d54e61d":"code","85c8bfb9":"code","64fdaad3":"code","5ebb93c5":"code","6e67aeaa":"code","14e2349d":"code","c3036339":"code","a984c797":"code","8a3e66d2":"code","6dd55d41":"code","16a2df25":"code","ed3e09b1":"code","6339db0c":"code","90d0253f":"code","dbda89a4":"code","474888a3":"markdown","9b15aa0d":"markdown"},"source":{"5839f3f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6a14aec":"# Importando as bibliotecas necess\u00e1rias:\n%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport nltk\nfrom nltk.corpus import stopwords\nimport gensim\nfrom gensim.models import LdaModel\nfrom gensim import models, corpora, similarities\nimport re\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import RSLPStemmer\nimport time\nfrom nltk import FreqDist\nfrom scipy.stats import entropy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport os # accessing directory structure\nfrom wordcloud import WordCloud, STOPWORDS\nimport pandas as pd\nimport tensorflow as tf\nimport os\nimport re\nimport numpy as np\nimport string\nfrom string import punctuation\nfrom zipfile import ZipFile\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n# Importando as bibliotecas necess\u00e1rias:\n%matplotlib inline\nimport nltk\nfrom nltk.corpus import stopwords\nimport gensim\nfrom gensim.models import LdaModel\nfrom gensim import models, corpora, similarities\nimport re\nfrom nltk.stem import PorterStemmer,WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nimport time\nfrom nltk import FreqDist\nfrom scipy.stats import entropy\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport os # accessing directory structure\nfrom wordcloud import WordCloud, STOPWORDS\nimport pyLDAvis.gensim\nfrom collections import defaultdict, Counter\nfrom sklearn.feature_extraction.text import CountVectorizer","2a046b3c":"# importing neural network libraries\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Embedding, GRU, LSTM, RNN, SpatialDropout1D","dd9af25c":"train = pd.read_csv('..\/input\/fake-news\/train.csv')\ntest = pd.read_csv('..\/input\/fake-news\/test.csv')\ntrain_data = train.copy()\ntest_data = test.copy()","89794cda":"train_data = train_data.set_index('id', drop = True)\nprint(train_data.shape)\ntrain_data.head()","033456fa":"# checking for missing values\ntrain_data.isnull().sum()","3aafd54b":"# dropping missing values from text columns alone. \ntrain_data[['title', 'author']] = train_data[['title', 'author']].fillna(value = 'Missing')\ntrain_data = train_data.dropna()\ntrain_data.isnull().sum()","57eebf6b":"# incluindo uma coluna com a 'length' do campo texto:\nlength = []\n[length.append(len(str(text))) for text in train_data['text']]\ntrain_data['length'] = length\ntrain_data.head()","055437e7":"#verificando o balanceamento da vari\u00e1vel resposta:\ntrain_data['label'].value_counts().plot.bar()","82463718":"# nuvem de palavras dos t\u00edtulos dos artigos confi\u00e1veis\nreal=' '.join(list(train_data[train_data['label']==0]['title']))\nreal=WordCloud(width=512, height=512).generate(real)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(real)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","1f82dcc2":"# nuvem de palavras dos t\u00edtulos dos artigos \"fake\"\nreal=' '.join(list(train_data[train_data['label']==1]['title']))\nreal=WordCloud(width=512, height=512).generate(real)\nplt.figure(figsize=(5,5),facecolor='k')\nplt.imshow(real)\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","6385fb09":"# Remove stopwords from title and text by label\nmsg_fake=train_data[train_data.label==1].copy()\nmsg_not_fake=train_data[train_data.label==0].copy()","56b9576c":"msg_fake.head()","7d54e61d":"# Corpus analysis_T\u00cdTULO FAKE\nstop=set(stopwords.words('english'))\nmsg_fake['title'] = msg_fake['title'].str.lower()\nmsg_fake['title'] = msg_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_fake['title'].str.split()\nnew=new.values.tolist()\ncorpus_title_fake=[word for i in new for word in i]\n\ncounter=Counter(corpus_title_fake)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:25]:\n    if (word not in stop):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","85c8bfb9":"# Corpus analysis corpus_TEXTO_FAKE\nstop=set(stopwords.words('english'))\nmsg_fake['text'] = msg_fake['text'].str.lower()\nmsg_fake['text'] = msg_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_fake['text'].str.split()\nnew=new.values.tolist()\ncorpus_text_fake=[word for i in new for word in i]\n\ncounter=Counter(corpus_text_fake)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:50]:\n    if (word not in stop):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","64fdaad3":"# Corpus analysis T\u00cdTULO N\u00c3O FAKE\nstop=set(stopwords.words('english'))\nmsg_not_fake['title'] = msg_not_fake['title'].str.lower()\nmsg_not_fake['title'] = msg_not_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_not_fake['title'].str.split()\nnew=new.values.tolist()\ncorpus_title_not_fake=[word for i in new for word in i]\n\ncounter=Counter(corpus_title_not_fake)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:50]:\n    if (word not in stop):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","5ebb93c5":"# Corpus analysis TEXTO N\u00c3O FAKE\nstop=set(stopwords.words('english'))\nmsg_not_fake['text'] = msg_not_fake['text'].str.lower()\nmsg_not_fake['text'] = msg_not_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nnew = msg_not_fake['text'].str.split()\nnew=new.values.tolist()\ncorpus_text_not_fake=[word for i in new for word in i]\n\ncounter=Counter(corpus_text_not_fake)\nmost=counter.most_common()\nx, y= [], []\nfor word,count in most[:50]:\n    if (word not in stop):\n        x.append(word)\n        y.append(count)\n        \nsns.barplot(x=y,y=x)","6e67aeaa":"# Ngram analysis function\n\ndef get_top_ngram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(n, n)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) \n                  for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:10]","14e2349d":"# Ngram analysis corpus_title_fake\n\nmsg_fake['title'] = msg_fake['title'].str.lower()\nmsg_fake['title'] = msg_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_fake['title'] = msg_fake['title'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n\ntop_n_bigrams=get_top_ngram(msg_fake['title'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","c3036339":"# Ngram analysis corpus_text_fake\n\nmsg_fake['text'] = msg_fake['text'].str.lower()\nmsg_fake['text'] = msg_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_fake['text'] = msg_fake['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n\ntop_n_bigrams=get_top_ngram(msg_fake['text'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","a984c797":"# Ngram analysis corpus_title_not_fake\n\nmsg_not_fake['title'] = msg_not_fake['title'].str.lower()\nmsg_not_fake['title'] = msg_not_fake.title.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_not_fake['title'] = msg_not_fake['title'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n\ntop_n_bigrams=get_top_ngram(msg_not_fake['title'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","8a3e66d2":"# Ngram analysis corpus_text_not_fake\n\nmsg_not_fake['text'] = msg_not_fake['text'].str.lower()\nmsg_not_fake['text'] = msg_not_fake.text.apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))\nmsg_not_fake['text'] = msg_not_fake['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n\ntop_n_bigrams=get_top_ngram(msg_not_fake['text'],2)[:10]\nx,y=map(list,zip(*top_n_bigrams))\nsns.barplot(x=y,y=x)","6dd55d41":"#  Preprocess function for LDA\nnltk.download('punkt')\nnltk.download('wordnet')\n\ndef preprocess_news(df,column):\n    corpus=[]\n    stem=PorterStemmer()\n    lem=WordNetLemmatizer()\n    for news in df[column]:\n        words=[w for w in word_tokenize(news) if (w not in stop)]\n        \n        words=[lem.lemmatize(w) for w in words if len(w)>2]\n        \n        corpus.append(words)\n    return corpus","16a2df25":"#LDA for corpus_title_fake\ncorpus = preprocess_news(msg_fake,'title')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 4, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)\nlda_model.show_topics()","ed3e09b1":"#Vizual for corpus_title_fake\npyLDAvis.enable_notebook()\nvis = pyLDAvis.gensim.prepare(lda_model, bow_corpus, dic)\npyLDAvis.save_html(vis, 'lda_fake_title.html')","6339db0c":"#LDA for corpus_title_not_fake\ncorpus = preprocess_news(msg_not_fake,'title')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 4, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)","90d0253f":"#LDA for corpus_text_fake\ncorpus = preprocess_news(msg_fake,'text')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 4, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)","dbda89a4":"#LDA for corpus_text_not_fake\ncorpus = preprocess_news(msg_not_fake,'text')\ndic=gensim.corpora.Dictionary(corpus)\nbow_corpus = [dic.doc2bow(doc) for doc in corpus]\nlda_model = gensim.models.LdaMulticore(bow_corpus, \n                                   num_topics = 4, \n                                   id2word = dic,                                    \n                                   passes = 10,\n                                   workers = 2)","474888a3":"LDA\n","9b15aa0d":"Ngram analysis\n\nThe next step is the Ngram analysis. Ngrams are simply contiguous sequences of n words. For example \u201criverbank\u201d,\u201d The three musketeers\u201d etc. If the number of words is two, it is called bigram. For 3 words it is called a trigram and so on.\nLooking at most frequent n-grams can give you a better understanding of the context in which the word was used. To build a representation of our vocabulary we will use Countvectorizer. Countvectorizer is a simple method used to tokenize, vectorized, and represent the corpus in an appropriate form."}}