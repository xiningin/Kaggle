{"cell_type":{"83fe63e1":"code","d72a1078":"code","a9bdde60":"code","aa72b8a5":"code","32db42d8":"code","dc5015ad":"code","8bb41b33":"code","f81bc464":"code","288471b4":"code","f6ba3612":"code","31d14b2a":"code","f508e53a":"code","0857974c":"code","712662fc":"code","4dc022a0":"code","e045fdff":"code","546af4e5":"code","9629913a":"code","240d2bea":"code","ec4926c7":"code","46f013f7":"code","521016fd":"code","141fe4fa":"code","a4374ae4":"code","83db8c5a":"code","f4b158f3":"code","618e5157":"code","2ab1cf3f":"code","2b084586":"code","1016e4c5":"code","9801cd96":"code","7cfec52b":"code","d081441a":"code","5780a80c":"code","8a07b1ca":"code","c0e14f58":"code","f5346e82":"code","f15bfb07":"code","bfd4e02c":"code","fefe9c86":"code","2769c362":"code","e5c4f9f9":"code","e78527e7":"markdown","21cc69d5":"markdown","9ed4af7b":"markdown","142e00d4":"markdown","30ee283d":"markdown","9c571857":"markdown","6fb4e800":"markdown","6e12c09f":"markdown","65d375bf":"markdown","b92b88dc":"markdown","a8611f5f":"markdown","e8ca208d":"markdown","ac5cd8ca":"markdown","9c6ffbf6":"markdown","421a5fa2":"markdown","be021021":"markdown","affa83e5":"markdown","bd28556b":"markdown","081218a5":"markdown","50d5678f":"markdown","ee18947a":"markdown"},"source":{"83fe63e1":"#Import packages\nimport numpy as np\nimport pandas as pd \n\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","d72a1078":"train = pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')\ntrain.head(5)","a9bdde60":"train.head(10)","aa72b8a5":"print(train.shape)\nprint(test.shape)","32db42d8":"#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n#drop \"id\" axis=1 means drop column, axis=0 means drop label\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\nprint(train.shape)\nprint(test.shape)","dc5015ad":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","8bb41b33":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","f81bc464":"#Combine two dataset into one\n#c.shape(0)\u7b2c\u4e00\u7ef4\u5ea6\u7684\u957f\u5ea6\nntrain = train.shape[0]\nntest = test.shape[0]\nprint(ntrain)\nprint(ntest)\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","288471b4":"#find out missing data\nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","f6ba3612":"corrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","31d14b2a":"g = sns.FacetGrid(train,col=\"Street\")\ng.map(plt.hist, \"SalePrice\", color=\"red\");","f508e53a":"g = sns.FacetGrid(train, col=\"LotShape\")\ng.map(sns.barplot, \"YearBuilt\", \"SalePrice\");","0857974c":"g = sns.FacetGrid(train, col=\"SaleCondition\", hue=\"HouseStyle\",col_wrap=4)\ng.map(plt.scatter, \"BedroomAbvGr\", \"SalePrice\", alpha=.7)\ng.add_legend();","712662fc":"# 1.PoolQC\nall_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\n# 2.MiscFeature\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\n# 3.Alley\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\n# 4.Fence \nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\n# 5.FireplaceQu\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n","4dc022a0":"# 6.LotFrontage: \n#Since the area of each street connected to the house property most likely \n#have a similar area to other houses in its neighborhood , \n#we can fill in missing values by the median LotFrontage of the neighborhood.\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","e045fdff":"# 7. GarageType, GarageFinish, GarageQual and GarageCond : \n#Replacing missing data with None\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","546af4e5":"#8. GarageYrBlt, GarageArea and GarageCars : \n# Replacing missing data with 0 (Since No garage = no cars in such garage.)\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","9629913a":"#9. BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : \n# missing values are likely zero for having no basement\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","240d2bea":"#10. BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : \n# For all these categorical basement-related features, NaN means that there is no basement.\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","ec4926c7":"#11. MasVnrArea and MasVnrType : NA most likely means no masonry veneer for these houses. \n# We can fill 0 for the area and None for the type.\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","46f013f7":"#12. MSZoning (The general zoning classification) : \n#'RL' is by far the most common value. So we can fill in missing values with 'RL'\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","521016fd":"#13. Utilities : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA .\n# Since the house with 'NoSewa' is in the training set, this feature won't help in predictive modelling. We can then safely remove it.\nall_data = all_data.drop(['Utilities'], axis=1)","141fe4fa":"#14. Functional : data description says NA means typical\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","a4374ae4":"#15. Electrical : It has one NA value. \n# Since this feature has mostly 'SBrkr', we can set that for the missing value.\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","83db8c5a":"#16. KitchenQual: Only one NA value, and same as Electrical, \n# we set 'TA' (which is the most frequent) for the missing value in KitchenQual.\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","f4b158f3":"#17. Exterior1st and Exterior2nd : Again Both Exterior 1 & 2 have only one missing value. \n# We will just substitute in the most common string\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","618e5157":"#18. SaleType : Fill in again with most frequent which is \"WD\"\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","2ab1cf3f":"#19. MSSubClass : Na most likely means No building class. \n# We can replace missing values with None\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","2b084586":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","1016e4c5":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","9801cd96":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","7cfec52b":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","d081441a":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","5780a80c":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","8a07b1ca":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","c0e14f58":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","f5346e82":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","f15bfb07":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","bfd4e02c":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","fefe9c86":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","2769c362":"lasso.fit(train.values, y_train)\nlasso_train_pred = lasso.predict(train.values)\nlasso_pred = np.expm1(lasso.predict(test.values))","e5c4f9f9":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = lasso_pred\nsub.to_csv('submission.csv',index=False)","e78527e7":"### Variables correlation with \"salesprice\"","21cc69d5":"## 3. Feature Engineering ","9ed4af7b":"### Transforming some numerical variables that are really categorical","142e00d4":"**Log-transformation of the target variable**","30ee283d":"# Exploratory Visualization","9c571857":"he skew seems now corrected and the data appears more normally distributed.","6fb4e800":"### Define a cross validation strategy\n\nWe use the cross_val_score function of Sklearn. However this function has not a shuffle attribut, we add then one line of code, in order to shuffle the dataset prior to cross-validation","6e12c09f":"We use the scipy function boxcox1p which computes the Box-Cox transformation of  1+x .\n\nNote that setting  \u03bb=0  is equivalent to log1p used above for the target variable.","65d375bf":"### Box Cox Transformation of (highly) skewed features","b92b88dc":"### The target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.","a8611f5f":"### LASSO Regression :\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's Robustscaler() method on pipeline","e8ca208d":"## By observating all the variables, we can seperate the variables into two category---numerical variables and feature variables.","ac5cd8ca":"### Skewed features","9c6ffbf6":"## 5. Modelling ","421a5fa2":"### Getting new dataset","be021021":"### Label Encoding some categorical variables that may contain information in their ordering set","affa83e5":"### Getting dummy categorical features","bd28556b":"## 2. Analyze target variables--- \"Sales Price\"","081218a5":"## 4. Visualization","50d5678f":"## 1. Import dataset","ee18947a":"### Imputing missing values"}}