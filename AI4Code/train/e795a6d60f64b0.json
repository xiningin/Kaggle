{"cell_type":{"e613d8ae":"code","96b6bee5":"code","77ee1f06":"code","0db5c89c":"code","2b7aeeee":"code","2a436a8a":"code","ff30f827":"code","03816a37":"code","79c9f78f":"code","a63a1488":"code","917e62a4":"code","64620959":"code","22086b5e":"code","95120a30":"code","d4771319":"code","d3593bd3":"code","aac66ff9":"markdown","7d4652b4":"markdown","cf778f2b":"markdown","f99ebaca":"markdown","7d74db5a":"markdown","3848185a":"markdown","07e28513":"markdown","12c2efc7":"markdown","0f349791":"markdown","f56c0ae1":"markdown","4f06eff6":"markdown","1883e2b1":"markdown"},"source":{"e613d8ae":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport torch\nimport importlib\nimport cv2 \nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport pandas as pd\nfrom PIL import Image\nfrom IPython.display import display","96b6bee5":"%cp -r \/kaggle\/input\/yolox-models \/kaggle\/working\/\n%cd \/kaggle\/working\/yolox-models\/yolox-lab","77ee1f06":"!pip install pip-21.3.1-py3-none-any.whl -f .\/ --no-index\n!pip install loguru-0.5.3-py3-none-any.whl -f .\/ --no-index\n!pip install ninja-1.10.2.3-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl -f .\/ --no-index\n!pip install onnx-1.8.1-cp37-cp37m-manylinux2010_x86_64.whl -f .\/ --no-index\n!pip install onnxruntime-1.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl -f .\/ --no-index\n!pip install onnxoptimizer-0.2.6-cp37-cp37m-manylinux2014_x86_64.whl -f .\/ --no-index\n!pip install thop-0.0.31.post2005241907-py3-none-any.whl -f .\/ --no-index\n!pip install tabulate-0.8.9-py3-none-any.whl -f .\/ --no-index","0db5c89c":"%cd \/kaggle\/working\/yolox-models\/YOLOX\n!pip install -r requirements.txt\n!pip install -v -e . ","2b7aeeee":"%cd \/kaggle\/working\/yolox-models\/yolox-lab\/cocoapi\/PythonAPI\n\n!make\n!make install\n!python setup.py install\n\nimport pycocotools","2a436a8a":"def yolox_inference(img, model, test_size): \n    bboxes = []\n    bbclasses = []\n    scores = []\n    \n    preproc = ValTransform(legacy = False)\n\n    tensor_img, _ = preproc(img, None, test_size)\n    tensor_img = torch.from_numpy(tensor_img).unsqueeze(0)\n    tensor_img = tensor_img.float()\n    tensor_img = tensor_img.cuda()\n\n    with torch.no_grad():\n        outputs = model(tensor_img)\n        outputs = postprocess(\n                    outputs, num_classes, confthre,\n                    nmsthre, class_agnostic=True\n                )\n\n    if outputs[0] is None:\n        return [], [], []\n    \n    outputs = outputs[0].cpu()\n    bboxes = outputs[:, 0:4]\n\n    bboxes \/= min(test_size[0] \/ img.shape[0], test_size[1] \/ img.shape[1])\n    bbclasses = outputs[:, 6]\n    scores = outputs[:, 4] * outputs[:, 5]\n    \n    return bboxes, bbclasses, scores","ff30f827":"def draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, classes_dict):\n    for i in range(len(bboxes)):\n            box = bboxes[i]\n            cls_id = int(bbclasses[i])\n            score = scores[i]\n            if score < confthre:\n                continue\n            x0 = int(box[0])\n            y0 = int(box[1])\n            x1 = int(box[2])\n            y1 = int(box[3])\n            \n            cv2.rectangle(img, (x0, y0), (x1, y1), (255, 0, 255), 1)\n            cv2.putText(img, '{}:{:.1f}%'.format(classes_dict[cls_id], score * 100), (x0, y0 - 1), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(255,0,255), thickness = 2)\n    return img","03816a37":"def format_prediction(bboxes, confs,confthre):\n    annot = ''\n    if len(bboxes)>0:\n        for idx in range(len(bboxes)):\n            box = bboxes[idx]\n            x_min = int(box[0])\n            y_min = int(box[1])\n            x_max = int(box[2])\n            y_max = int(box[3])\n\n            w=x_max-x_min\n            h=y_max-y_min\n            \n            conf = confs[idx]\n            if conf < confthre:\n                continue\n            annot += '{:.3f} {} {} {} {}'.format(conf, x_min, y_min, w, h)\n            annot +=' '\n        annot = annot.strip(' ')\n    return annot","79c9f78f":"%cd \/kaggle\/working\/yolox-models\/YOLOX\n#CHECKPOINT_FILE = '\/kaggle\/input\/barrier-reef-yolox\/Am_Fold2_v5_Ys.pth'\nCHECKPOINT_FILE = '\/kaggle\/input\/barrier-reef-yolox-ln\/la_Fold1_v12_Yl.pth'","a63a1488":"config_file_template = '''\n\n#!\/usr\/bin\/env python3\n# -*- coding:utf-8 -*-\n# Copyright (c) Megvii, Inc. and its affiliates.\n\nimport os\n\nfrom yolox.exp import Exp as MyExp\n\n\nclass Exp(MyExp):\n    def __init__(self):\n        super(Exp, self).__init__()\n        self.depth = 1\n        self.width = 1\n        self.exp_name = os.path.split(os.path.realpath(__file__))[1].split(\".\")[0]\n        self.num_classes = 1\n\n'''\n\nwith open('cots_config.py', 'w') as f:\n    f.write(config_file_template)","917e62a4":"from yolox.utils import postprocess\nfrom yolox.data.data_augment import ValTransform\n\nCOCO_CLASSES = (\n  \"starfish\",\n)\n\n# get YOLOX experiment\ncurrent_exp = importlib.import_module('cots_config')\nexp = current_exp.Exp()\n\n# set inference parameters\n\n\ntest_size = (800, 1280)\nnum_classes = 1\nconfthre = 0.2\nnmsthre = 0.4\n\n# get YOLOX model\nmodel = exp.get_model()\nmodel.cuda()\nmodel.eval()\n\n# get custom trained checkpoint\nckpt_file = CHECKPOINT_FILE\nckpt = torch.load(ckpt_file, map_location=\"cpu\")\nmodel.load_state_dict(ckpt[\"model\"])","64620959":"TEST_IMAGE_PATH = \"\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_2\/5745.jpg\"\nimg = cv2.imread(TEST_IMAGE_PATH)\n\n# Get predictions\nbboxes, bbclasses, scores = yolox_inference(img, model, test_size)\n\n# Draw predictions\nout_image = draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, COCO_CLASSES)\n\n# Since we load image using OpenCV we have to convert it \nout_image = cv2.cvtColor(out_image, cv2.COLOR_BGR2RGB)\ndisplay(Image.fromarray(out_image))","22086b5e":"%cd \/kaggle\/working\/","95120a30":"import greatbarrierreef\nenv = greatbarrierreef.make_env()# initialize the environment\niter_test = env.iter_test()      # an iterator which loops over the test set and sample submission","d4771319":"for idx, (img, pred_df) in enumerate(tqdm(iter_test)):\n    bboxes, bbclasses, scores = yolox_inference(img[:,:,::-1], model, test_size)\n    annot = format_prediction(bboxes, scores,confthre)\n    pred_df['annotations'] = annot\n    env.predict(pred_df)\n    if idx<3:\n        out_image = draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, COCO_CLASSES)\n        display(Image.fromarray(out_image))    ","d3593bd3":"sub_df = pd.read_csv('submission.csv')\nsub_df.head()","aac66ff9":"### Hi kagglers, This is `Inference` notebook using `YOLOX`.\n\n## This notebook based completely on great notebooks from [Remek Kinas](https:\/\/www.kaggle.com\/remekkinas)\n\n* [YoloX training pipeline COTS dataset [LB 0.507] !!](https:\/\/www.kaggle.com\/remekkinas\/yolox-training-pipeline-cots-dataset-lb-0-507)\n* [YoloX inference on Kaggle for COTS [LB 0.507] !!!](https:\/\/www.kaggle.com\/remekkinas\/yolox-inference-on-kaggle-for-cots-lb-0-507)\n\nI ONLY rearranged the notebook and changed The threshold and confidence\n#### <font color='red'>Thanks Remek<\/font>\n\n\n\n\n\n\n### Other notebooks in the competition\n* [Barrier Reef Detectron2 [training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-detectron2-training)\n* [Barrier Reef Detecrton2 [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-detectron2-inference)\n\n\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","7d4652b4":"### Install YOLOX required modules","cf778f2b":"# Barrier Reef YOLOX [Inference]","f99ebaca":"# \ud83d\udd28 Functions","7d74db5a":"# \u2b07\ufe0f Install YOLOX\n","3848185a":"# Preparing  The Model","07e28513":"### Install CocoAPI tool","12c2efc7":"# \u2600\ufe0f Importing Libraries","0f349791":"### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","f56c0ae1":"#  Inference","4f06eff6":"![download.jpg](attachment:07de9c65-7c16-40e7-a821-d5354296394c.jpg)","1883e2b1":"# Inference on a image from the Validation set"}}