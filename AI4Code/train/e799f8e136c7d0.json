{"cell_type":{"c33eac8e":"code","55977f1f":"code","1be64f24":"code","f0ffe6f4":"code","e6eb18e0":"code","80b6a36f":"code","8af0f820":"code","98587605":"code","8e8b1cfb":"code","9d93933d":"code","4c1b4ac6":"code","bb08e745":"code","ae02ed96":"code","3f3e6ec7":"code","cbd32cf0":"code","3e636012":"code","cf53cfa0":"code","b2d61194":"code","c998f636":"code","e828bbeb":"code","32ff46bb":"code","940a48cd":"code","0e76e26e":"code","8ef7bdcb":"code","7c6a6544":"code","1d84e17f":"code","0abb62c6":"code","1b5fe6cf":"code","6e11eeb7":"code","f1952dd8":"code","eb5e0b27":"code","668cb56c":"code","78812588":"code","8433f71d":"code","e717f830":"code","81a54bcb":"code","b2a811b1":"code","839267f1":"code","4c029897":"code","6e4ef4d3":"code","0642bfea":"code","7f2cc4fc":"code","69937c00":"code","583a57e4":"code","a5f357f2":"code","210115c4":"code","d65ba07f":"code","bad1f069":"code","647f2c53":"code","07a25b8d":"code","37efbe49":"code","d52184c2":"code","2fbe17b7":"code","5cdc2eaf":"code","3413f7cd":"code","27733020":"code","3e420e57":"code","f8c90b8c":"code","292f68e1":"code","f8b898da":"code","839afcb2":"code","d0fe3346":"code","8bcf8977":"code","9238b5c2":"code","969cc494":"code","88315b45":"code","a41370c7":"code","4c7ac24f":"code","9622440c":"code","89c75939":"code","b37640f4":"code","f6f7109d":"code","cf817112":"code","1d3389fc":"code","eaf54cb6":"code","4bd59790":"code","6464645b":"code","6f41ce55":"markdown","9640d123":"markdown","4805c9d7":"markdown","970f1dfd":"markdown","c3730453":"markdown","6f3ed3db":"markdown","1168f261":"markdown","d3d872df":"markdown","dbfd8a03":"markdown","f92e2888":"markdown","20eb2b7b":"markdown"},"source":{"c33eac8e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","55977f1f":"train = pd.read_csv(\"..\/input\/customer-churn-prediction-2020\/train.csv\")","1be64f24":"test = pd.read_csv(\"..\/input\/customer-churn-prediction-2020\/test.csv\")","f0ffe6f4":"train.head()","e6eb18e0":"train.describe()","80b6a36f":"train.isnull().sum()","8af0f820":"train.info()","98587605":"train.select_dtypes(include = 'object').columns","8e8b1cfb":"train.select_dtypes(include = 'object').head()","9d93933d":"train.area_code.unique()","4c1b4ac6":"test.area_code.unique()","bb08e745":"train.area_code = train.area_code.map({'area_code_415':415,'area_code_408':408,'area_code_510':510})\ntest.area_code = test.area_code.map({'area_code_415':415,'area_code_408':408,'area_code_510':510})","ae02ed96":"train = train.replace({'voice_mail_plan':{'yes':1,'no':0}})\ntest = test.replace({'voice_mail_plan':{'yes':1,'no':0}})","3f3e6ec7":"train = train.replace({'international_plan':{'yes':1,'no':0}})\ntest = test.replace({'international_plan':{'yes':1,'no':0}})","cbd32cf0":"train = train.replace({'churn':{'yes':1,\"no\":0}})\ntest = test.replace({'churn':{'yes':1,\"no\":0}})","3e636012":"train.state = train.state.astype('category')\ntest.state = test.state.astype('category')","cf53cfa0":"train.info()","b2d61194":"train.head()","c998f636":"sns.countplot(x = 'churn',data = train)","e828bbeb":"fig,ax = plt.subplots(figsize = (18,10)) \nx = train.groupby('state')[['churn']].size()\nx.plot.bar()","32ff46bb":"train.groupby('churn')['number_customer_service_calls'].count()","940a48cd":"def facet(data,y):\n    g = sns.FacetGrid(data,col = 'churn',size = 5)\n    g.map(plt.hist,y,alpha = 0.5)\n    g.add_legend()\n    plt.show()","0e76e26e":"facet(train,'number_customer_service_calls')","8ef7bdcb":"facet(train,'total_day_calls')","7c6a6544":"facet(train,'total_eve_calls')","1d84e17f":"facet(train,'number_vmail_messages')","0abb62c6":"facet(train,'voice_mail_plan')","1b5fe6cf":"corr_matrix = train.corr()\ncorr_matrix","6e11eeb7":"plt.figure(figsize = (10,10))\nsns.heatmap(corr_matrix,data = train)","f1952dd8":"col_drop = ['total_day_minutes','total_night_minutes','total_eve_minutes','total_intl_minutes']\n","eb5e0b27":"train = train.drop(columns = col_drop,axis = 1)\ntest = test.drop(columns = col_drop,axis = 1)","668cb56c":"train.head()","78812588":"corr_matrix = train.corr()\ncorr_matrix\nplt.figure(figsize = (10,10))\nsns.heatmap(corr_matrix,data = train)","8433f71d":"X = train.drop(['state','churn'],axis = 1)\ny = train['churn']","e717f830":"X.columns","81a54bcb":"train.columns","b2a811b1":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","839267f1":"X_std = scaler.fit_transform(X)","4c029897":"type(X_std)","6e4ef4d3":"df = pd.DataFrame(X_std, index = train.index, columns = train.columns[1:15])","0642bfea":"df['state'] = train['state']\ndf['churn'] = train['churn']","7f2cc4fc":"df.head()","69937c00":"X_new = df.drop(['state','churn'],axis = 1)\ny_new = df['churn']","583a57e4":"from sklearn.model_selection import train_test_split","a5f357f2":"X_train,X_test,y_train,y_test = train_test_split(X_new,y_new,test_size = 0.3,random_state = 42)","210115c4":"X_train.shape","d65ba07f":"y_train.shape","bad1f069":"from sklearn.ensemble import RandomForestRegressor\nfor_reg = RandomForestRegressor(random_state = 42)\nfor_reg.fit(X_train,y_train)","647f2c53":"predict = for_reg.predict(X_test)","07a25b8d":"from sklearn.metrics import mean_squared_error,accuracy_score","37efbe49":"predict","d52184c2":"accuracy_score(predict.round(),y_test)","2fbe17b7":"mse = mean_squared_error(predict.round(),y_test)","5cdc2eaf":"rmse = np.sqrt(mse)\nrmse","3413f7cd":"from sklearn.model_selection import GridSearchCV","27733020":"param_grid = [{'n_estimators':[10,100,1000] ,'max_features':[2,4,6,8,16]}]              ","3e420e57":"param_grid","f8c90b8c":"grid_search = GridSearchCV(for_reg,param_grid,cv = 3,scoring = 'neg_mean_squared_error',return_train_score = True,n_jobs = 3)","292f68e1":"grid_search.fit(X_train,y_train)","f8b898da":"grid_search.best_params_","839afcb2":"grid_search.best_estimator_","d0fe3346":"y_pred = grid_search.predict(X_test)","8bcf8977":"y_pred = y_pred.round()","9238b5c2":"score = accuracy_score(y_pred,y_test)","969cc494":"print( \"Accuracys is\"+\" \"+ str(score*100),\"%\")","88315b45":"test","a41370c7":"X_new_test = test.drop(['id','state'],axis = 1)","4c7ac24f":"X_test_std = scaler.fit_transform(X_new_test)","9622440c":"df_test = pd.DataFrame(X_test_std,columns = test.columns[2:])","89c75939":"df_test","b37640f4":"predict_test = grid_search.predict(df_test)","f6f7109d":"pred_value_1 = predict_test.round()","cf817112":"pred_value_1 = np.where(pred_value_1 == 0,'no','yes')","1d3389fc":"pred_value_1","eaf54cb6":"result = pd.DataFrame({'id':test.id,\"churn\":pred_value_1})","4bd59790":"result","6464645b":"#result.to_csv('F:\/Pred_churn_1.csv',index = False)","6f41ce55":"HANDLING CATEGORICAL VARIABLES","9640d123":"## Importing train and test dataset","4805c9d7":"## Fine-Tune Model","970f1dfd":"## Feature Scaling","c3730453":"## Checking Correlation between different variables","6f3ed3db":"## Building a churn prediction model","1168f261":"GRAPHICAL ANALYSIS","d3d872df":"## Creating Test Dataset","dbfd8a03":"## Deleting the variables which has high correlation with other variables","f92e2888":"# LOADING NECESSARY LIBRARIES","20eb2b7b":"### Random Forest Regressor Model"}}