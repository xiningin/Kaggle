{"cell_type":{"668afe85":"code","cb55c6e7":"code","079614e6":"code","813b4a2e":"code","981a6763":"code","e1072e87":"code","8fdbbd46":"code","a7c30cf5":"code","acca3d90":"code","33fc76c8":"code","37d9dd1e":"code","a1446e4b":"code","fd527782":"code","19a5422c":"code","f710308e":"code","833dbbfe":"code","6bd01fb2":"code","6a6429e6":"code","cebf3570":"code","a213eedd":"code","688c9181":"code","d62166fd":"code","2b793336":"code","954d6673":"code","6fbc4c86":"code","e4322399":"code","20ef96f3":"markdown"},"source":{"668afe85":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model\nfrom fastai.vision.all import *","cb55c6e7":"set_seed(999, reproducible=True)\nBATCH_SIZE = 32\ndataset_path = Path('..\/input\/petfinder-pawpularity-score\/')\ndataset_path.ls()\ntrain_df = pd.read_csv(dataset_path\/'train.csv')\ntrain_df.head()","079614e6":"train_df['path'] = train_df['Id'].map(lambda x:str(dataset_path\/'train'\/x)+'.jpg')\ntrain_df = train_df.drop(columns=['Id'])\ntrain_df = train_df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\ntrain_df.head()","813b4a2e":"len_df = len(train_df)\nprint(f\"There are {len_df} images\")","981a6763":"train_df['Pawpularity'].hist(figsize = (10, 5))\nprint(f\"The mean Pawpularity score is {train_df['Pawpularity'].mean()}\")\nprint(f\"The median Pawpularity score is {train_df['Pawpularity'].median()}\")\nprint(f\"The standard deviation of the Pawpularity score is {train_df['Pawpularity'].std()}\")\nprint(f\"There are {len(train_df['Pawpularity'].unique())} unique values of Pawpularity score\")","e1072e87":"train_df['norm_score'] = train_df['Pawpularity']\/100\ntrain_df['norm_score']","8fdbbd46":"im = Image.open(train_df['path'][1])\nwidth, height = im.size\nprint(width,height)","a7c30cf5":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'\n!cp '..\/input\/efficientnetb4\/efficientnet_b4_ra2_320-7eb33cd5.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/efficientnet_b4_ra2_320-7eb33cd5.pth'","acca3d90":"seed=999\nset_seed(seed, reproducible=True)\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.backends.cudnn.deterministic = True\ntorch.use_deterministic_algorithms = True","33fc76c8":"#Sturges' rule\nnum_bins = int(np.floor(1+(3.3)*(np.log2(len(train_df)))))\n# num_bins","37d9dd1e":"train_df['bins'] = pd.cut(train_df['norm_score'], bins=num_bins, labels=False)\ntrain_df['bins'].hist()","a1446e4b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\n\ntrain_df['fold'] = -1\n\n\nN_FOLDS = 5\nstrat_kfold = StratifiedKFold(n_splits=N_FOLDS, random_state=seed, shuffle=True)\nfor i, (_, train_index) in enumerate(strat_kfold.split(train_df.index, train_df['bins'])):\n    train_df.iloc[train_index, -1] = i\n    \ntrain_df['fold'] = train_df['fold'].astype('int')\n\ntrain_df.fold.value_counts().plot.bar()","fd527782":"train_df[train_df['fold']==0].head()\ntrain_df[train_df['fold']==0]['bins'].value_counts()\ntrain_df[train_df['fold']==1]['bins'].value_counts()","19a5422c":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(F.sigmoid(input.flatten()), target))","f710308e":"def get_data(fold):\n#     train_df_no_val = train_df.query(f'fold != {fold}')\n#     train_df_val = train_df.query(f'fold == {fold}')\n    \n#     train_df_bal = pd.concat([train_df_no_val,train_df_val.sample(frac=1).reset_index(drop=True)])\n    train_df_f = train_df.copy()\n    # add is_valid for validation fold\n    train_df_f['is_valid'] = (train_df_f['fold'] == fold)\n    \n    dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n#                                valid_pct=0.2, #80-20 train-validation random split\n                               valid_col='is_valid', #\n                               seed=999, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=8,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n    \n    return dls","833dbbfe":"#Valid Kfolder size\nthe_data = get_data(0)\nassert (len(the_data.train) + len(the_data.valid)) == (len(train_df)\/\/BATCH_SIZE)","6bd01fb2":"def get_learner1(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model('efficientnet_b4', pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp32()\n    return learn","6a6429e6":"test_df = pd.read_csv(dataset_path\/'test.csv')\ntest_df.head()","cebf3570":"test_df['Pawpularity'] = [1]*len(test_df)\ntest_df['path'] = test_df['Id'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\ntest_df = test_df.drop(columns=['Id'])\ntrain_df['norm_score'] = train_df['Pawpularity']\/100\nget_learner1(fold_num=0).lr_find(end_lr=3e-1)","a213eedd":"import gc\n\nall_preds = []\n\nfor i in range(N_FOLDS):\n\n    print(f'Fold {i} results')\n    \n    learn = get_learner1(fold_num=i)\n    #AccumulateScheduler(learn,32)\n    learn.fit_one_cycle(5, 4e-3, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=2)]) \n    \n    learn.recorder.plot_loss()\n\n    learn = learn.to_fp32()\n    \n    learn.save(f'.\/effb4\/model_fold_{i}.pkl')\n    #learn.save('..\/input\/swin-transformer\/model_fold_{i}.pkl')\n    \n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n                               valid_pct=0.2, #80-20 train-validation random split\n                               seed=999, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=8,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    \n    test_dl = dls.test_dl(test_df)\n    \n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    \n    all_preds.append(preds)\n    \n    del learn\n\n    torch.cuda.empty_cache()\n\n    gc.collect()","688c9181":"def get_learner(fold_num):\n    data = get_data(fold_num)\n    \n    model = create_model('swin_large_patch4_window7_224', pretrained=True, num_classes=data.c)\n\n    learn = Learner(data, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp32()\n    return learn","d62166fd":"test_df = pd.read_csv(dataset_path\/'test.csv')\ntest_df.head()","2b793336":"test_df['Pawpularity'] = [1]*len(test_df)\ntest_df['path'] = test_df['Id'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\ntest_df = test_df.drop(columns=['Id'])\ntrain_df['norm_score'] = train_df['Pawpularity']\/100\n#get_learner(fold_num=0).lr_find(end_lr=3e-2)","954d6673":"import gc\n\n\nfor i in range(N_FOLDS):\n\n    print(f'Fold {i} results')\n    \n    learn = get_learner(fold_num=i)\n    #AccumulateScheduler(learn,32)\n    learn.fit_one_cycle(5, 2e-5, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=2)]) \n    \n    learn.recorder.plot_loss()\n\n    learn = learn.to_fp32()\n    \n    learn.save(f'.\/swint\/model_fold_{i}.pkl')\n    #learn.save('..\/input\/swin-transformer\/model_fold_{i}.pkl')\n    \n    dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n                               valid_pct=0.2, #80-20 train-validation random split\n                               seed=999, #seed\n                               fn_col='path', #filename\/path is in the second column of the DataFrame\n                               label_col='norm_score', #label is in the first column of the DataFrame\n                               y_block=RegressionBlock, #The type of target\n                               bs=BATCH_SIZE, #pass in batch size\n                               num_workers=8,\n                               item_tfms=Resize(224), #pass in item_tfms\n                               batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    \n    test_dl = dls.test_dl(test_df)\n    \n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    \n    all_preds.append(preds)\n    \n    del learn\n\n    torch.cuda.empty_cache()\n\n    gc.collect()","6fbc4c86":"np.mean(np.stack(all_preds*100))","e4322399":"sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\npreds = np.mean(np.stack(all_preds), axis=0)\nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)","20ef96f3":"# eff"}}