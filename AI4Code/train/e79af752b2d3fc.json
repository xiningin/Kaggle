{"cell_type":{"bc98385d":"code","e741c745":"code","e95a231c":"code","807b6eda":"code","2e9a3d55":"code","2a3bfc22":"code","668fe1fa":"code","3408d24e":"code","7bd4ce2a":"code","090cf12b":"code","33cb65c5":"code","ac0b52bd":"code","df93541f":"code","ad5a46a7":"code","0feeb1f6":"code","e5b9e2a0":"code","0760e5f4":"code","a698cc9d":"code","5f10477c":"markdown","41adfde6":"markdown","9297e742":"markdown","a68600fb":"markdown","e7d366b1":"markdown","fe16b9e2":"markdown","1a24640b":"markdown","f352d482":"markdown","909e1ec4":"markdown","439cbfcf":"markdown"},"source":{"bc98385d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e741c745":"import os\nimport warnings\nimport numpy as np \nimport pandas as pd \nimport pandas_profiling as pp\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nprint(os.listdir(\"..\/input\/house-prices-advanced-regression-techniques\"))\n%matplotlib inline","e95a231c":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","807b6eda":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","2e9a3d55":"y     = train[['Id','SalePrice']]\ntrain = train.drop('SalePrice',axis=1)","2a3bfc22":"all_dfs = [train,test]\nall_df = pd.concat(all_dfs).reset_index(drop=True);","668fe1fa":"display_all(all_df.isnull().sum()\/all_df.shape[0])","3408d24e":"all_df.drop(['Alley','PoolQC','MiscFeature','Fence','FireplaceQu','Utilities'],axis=1,inplace=True)","7bd4ce2a":"all_df['LotFrontage'].fillna(value=all_df['LotFrontage'].median(),inplace=True)\nall_df['MasVnrType'].fillna(value='None',inplace=True)\nall_df['MasVnrArea'].fillna(0,inplace=True)\nall_df['BsmtCond'].fillna(value='TA',inplace=True)\nall_df['BsmtExposure'].fillna(value='No',inplace=True)\nall_df['Electrical'].fillna(value='SBrkr',inplace=True)\nall_df['BsmtFinType2'].fillna(value='Unf',inplace=True)\nall_df['GarageType'].fillna(value='Attchd',inplace=True)\nall_df['GarageYrBlt'].fillna(value=all_df['GarageYrBlt'].median(),inplace=True)\nall_df['GarageFinish'].fillna(value='Unf',inplace=True)\nall_df['GarageQual'].fillna(value='TA',inplace=True)\nall_df['GarageCond'].fillna(value='TA',inplace=True)\nall_df['BsmtFinType1'].fillna(value='NO',inplace=True)\nall_df['BsmtQual'].fillna(value='No',inplace=True)\nall_df['BsmtFullBath'].fillna(value=all_df['BsmtFullBath'].median(),inplace=True)\nall_df['BsmtFinSF1'].fillna(value=all_df['BsmtFinSF1'].median(),inplace=True)\nall_df['BsmtFinSF2'].fillna(value=0,inplace=True)\nall_df['BsmtUnfSF'].fillna(value=0,inplace=True)\nall_df['TotalBsmtSF'].fillna(value=all_df['TotalBsmtSF'].median(),inplace=True)\nall_df['BsmtHalfBath'].fillna(value=0,inplace=True)\nall_df['GarageCars'].fillna(value=all_df['GarageCars'].median(),inplace=True)\nall_df['GarageArea'].fillna(value=all_df['GarageArea'].median(),inplace=True)","090cf12b":"labelencoder=LabelEncoder()\nall_df['MSZoning']      = labelencoder.fit_transform(all_df['MSZoning'].astype(str))\nall_df['Exterior1st']   = labelencoder.fit_transform(all_df['Exterior1st'].astype(str))\nall_df['Exterior2nd']   = labelencoder.fit_transform(all_df['Exterior2nd'].astype(str))\nall_df['KitchenQual']   = labelencoder.fit_transform(all_df['KitchenQual'].astype(str))\nall_df['Functional']    = labelencoder.fit_transform(all_df['Functional'].astype(str))\nall_df['SaleType']      = labelencoder.fit_transform(all_df['SaleType'].astype(str))\nall_df['Street']        = labelencoder.fit_transform(all_df['Street'])   \nall_df['LotShape']      = labelencoder.fit_transform(all_df['LotShape'])   \nall_df['LandContour']   = labelencoder.fit_transform(all_df['LandContour'])   \nall_df['LotConfig']     = labelencoder.fit_transform(all_df['LotConfig'])   \nall_df['LandSlope']     = labelencoder.fit_transform(all_df['LandSlope'])   \nall_df['Neighborhood']  = labelencoder.fit_transform(all_df['Neighborhood'])   \nall_df['Condition1']    = labelencoder.fit_transform(all_df['Condition1'])   \nall_df['Condition2']    = labelencoder.fit_transform(all_df['Condition2'])   \nall_df['BldgType']      = labelencoder.fit_transform(all_df['BldgType'])   \nall_df['HouseStyle']    = labelencoder.fit_transform(all_df['HouseStyle'])   \nall_df['RoofStyle']     = labelencoder.fit_transform(all_df['RoofStyle'])   \nall_df['RoofMatl']      = labelencoder.fit_transform(all_df['RoofMatl'])    \nall_df['MasVnrType']    = labelencoder.fit_transform(all_df['MasVnrType'])   \nall_df['ExterQual']     = labelencoder.fit_transform(all_df['ExterQual'])  \nall_df['ExterCond']     = labelencoder.fit_transform(all_df['ExterCond'])   \nall_df['Foundation']    = labelencoder.fit_transform(all_df['Foundation'])   \nall_df['BsmtQual']      = labelencoder.fit_transform(all_df['BsmtQual'])   \nall_df['BsmtCond']      = labelencoder.fit_transform(all_df['BsmtCond'])   \nall_df['BsmtExposure']  = labelencoder.fit_transform(all_df['BsmtExposure'])   \nall_df['BsmtFinType1']  = labelencoder.fit_transform(all_df['BsmtFinType1'])   \nall_df['BsmtFinType2']  = labelencoder.fit_transform(all_df['BsmtFinType2'])   \nall_df['Heating']       = labelencoder.fit_transform(all_df['Heating'])   \nall_df['HeatingQC']     = labelencoder.fit_transform(all_df['HeatingQC'])   \nall_df['CentralAir']    = labelencoder.fit_transform(all_df['CentralAir'])   \nall_df['Electrical']    = labelencoder.fit_transform(all_df['Electrical'])    \nall_df['GarageType']    = labelencoder.fit_transform(all_df['GarageType'])  \nall_df['GarageFinish']  = labelencoder.fit_transform(all_df['GarageFinish'])   \nall_df['GarageQual']    = labelencoder.fit_transform(all_df['GarageQual'])  \nall_df['GarageCond']    = labelencoder.fit_transform(all_df['GarageCond'])   \nall_df['PavedDrive']    = labelencoder.fit_transform(all_df['PavedDrive'])  \nall_df['SaleCondition'] = labelencoder.fit_transform(all_df['SaleCondition'])  ","33cb65c5":"Scaler = StandardScaler()\nall_scaled = pd.DataFrame(Scaler.fit_transform(all_df))\n\ntrain_scaled = pd.DataFrame(all_scaled[:1460])\ntest_scaled = pd.DataFrame(all_scaled[1460:2920])","ac0b52bd":"X = train_scaled\nX_train, X_test, y_train, y_test = train_test_split(X, y['SalePrice'], test_size=0.1, random_state=42)\n","df93541f":"from xgboost import XGBRegressor\nXGB = XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nXGB.fit(X_train,y_train)","ad5a46a7":"from lightgbm import LGBMRegressor\nLGBM = LGBMRegressor(n_estimators = 1000)\nLGBM.fit(X_train,y_train)","0feeb1f6":"print (\"Training score:\",XGB.score(X_train,y_train),\"Test Score:\",XGB.score(X_test,y_test))\nprint (\"Training score:\",LGBM.score(X_train,y_train),\"Test Score:\",LGBM.score(X_test,y_test))","e5b9e2a0":"y_pred_xgb  = pd.DataFrame(XGB.predict(test_scaled))\ny_pred_lgbm = pd.DataFrame(LGBM.predict(test_scaled))\n\ny_pred=pd.DataFrame()\ny_pred['SalePrice'] = 0.5 * y_pred_xgb[0] + 0.5 * y_pred_lgbm[0]\ny_pred['Id'] = test['Id']","0760e5f4":"y_pred.to_csv('housing.csv',index=False)","a698cc9d":"y_pred.head(10)","5f10477c":"*** XGBoost Regression**","41adfde6":"**Output**","9297e742":"# **Regression Techniques for Predicion**","a68600fb":"**Missing values imputation**","e7d366b1":"**Encode categorical variables**","fe16b9e2":"**Blending the result**","1a24640b":"****Scale the features****","f352d482":"# **House Price Prediction using Advanced Regression Techniques**","909e1ec4":"**Drop unnecessary columns**","439cbfcf":"**LightBGM Regression **"}}