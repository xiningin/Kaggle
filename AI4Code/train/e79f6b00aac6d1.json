{"cell_type":{"e90dca74":"code","9aeeaa9f":"code","01a6e82e":"code","f179ad8e":"code","5685c7da":"code","4b9e7d71":"code","73d850ae":"code","95eaf835":"code","5b3a79fa":"code","ae09781b":"code","aaeeb9e1":"code","65379287":"code","62565e35":"code","b383f022":"code","bc1f0e12":"code","72e665bc":"code","a607edec":"code","fcd5297f":"code","7f2e9cb4":"code","365047e2":"code","f8c2ee78":"code","1fe67b14":"code","0a0cf699":"code","a403a666":"code","65fbf352":"code","a9e20c0b":"markdown"},"source":{"e90dca74":"import os\nimport sys\n# Repository source: https:\/\/github.com\/qubvel\/efficientnet\nsys.path.append(os.path.abspath('..\/input\/efficientnet\/efficientnet-master\/efficientnet-master\/'))","9aeeaa9f":"from efficientnet import EfficientNetB3\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten \nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.utils import np_utils\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pathlib import Path\n%matplotlib inline","01a6e82e":"%ls ..\/input\/Kannada-MNIST\/","f179ad8e":"root_path = Path(\"..\/input\/Kannada-MNIST\/\")","5685c7da":"# Load the data\ntrain = pd.read_csv(root_path \/ \"train.csv\")\ntest = pd.read_csv(root_path \/ \"test.csv\")","4b9e7d71":"train.head()","73d850ae":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\ntest.drop('id', axis=1, inplace=True)","95eaf835":"# Normilize data\nX_train = X_train.astype('float32')\ntest = test.astype('float32')\nX_train \/= 255\ntest \/= 255","5b3a79fa":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","ae09781b":"X_train3 = np.full((X_train.shape[0], 28, 28, 3), 0.0)\n\nfor i, s in enumerate(X_train):\n    X_train3[i] = cv2.cvtColor(s, cv2.COLOR_GRAY2RGB) ","aaeeb9e1":"test3 = np.full((test.shape[0], 28, 28, 3), 0.0)\n\nfor i, s in enumerate(test):\n    test3[i] = cv2.cvtColor(s, cv2.COLOR_GRAY2RGB) ","65379287":"X_train3.shape, test3.shape","62565e35":"Y_train = np_utils.to_categorical(Y_train, 10)","b383f022":"%ls ..\/input\/efficientnet-keras-weights-b0b5\/","bc1f0e12":"# Load in EfficientNetB3\nmodel = EfficientNetB3(weights=None,\n                        include_top=False,\n                        input_shape=(28, 28, 3))\nmodel.load_weights('..\/input\/efficientnet-keras-weights-b0b5\/efficientnet-b3_imagenet_1000_notop.h5')","72e665bc":"model.trainable = False","a607edec":"x = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(units = 10, activation=\"softmax\")(x)\nmodel_f = Model(input = model.input, output = predictions)\nmodel_f.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),\n                loss='categorical_crossentropy',\n                metrics=['accuracy'])","fcd5297f":"datagen = ImageDataGenerator(\n        rotation_range= 8,  \n        zoom_range = 0.15,  \n        width_shift_range=0.2, \n        height_shift_range=0.2)\ndatagen.fit(X_train3)","7f2e9cb4":"from sklearn.model_selection import train_test_split\nX_train, X_val1, y_train, y_val1 = train_test_split(\n    X_train3, Y_train, test_size=0.05, random_state=42)","365047e2":"from keras.callbacks import ModelCheckpoint\nsize_batch = 60\ncheckpoint = ModelCheckpoint('BWeight.md5',monitor='val_loss',\n                            save_best_only=True)","f8c2ee78":"history = model_f.fit_generator(datagen.flow(X_train,y_train, batch_size=size_batch),\n                              epochs = 50,\n                              validation_data = (X_val1,y_val1),\n                              verbose = 2,\n                              steps_per_epoch = X_train.shape[0] \/\/ size_batch,\n                              callbacks=[checkpoint])","1fe67b14":"import json\n\nwith open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","0a0cf699":"%%time\n# Prediction\ntest_predictions = model_f.predict(test3)","a403a666":"# select the index with the maximum probability\nresults = np.argmax(test_predictions,axis = 1)","65fbf352":"submission = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission['label'] = results\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","a9e20c0b":"https:\/\/www.kaggle.com\/ateplyuk\/mnist-efficientnet"}}