{"cell_type":{"573c59ea":"code","a0e04d98":"code","5a964b96":"code","553c433a":"code","131c09d2":"code","24e3eda1":"code","1c527584":"code","b8299e6f":"code","ebbcbc65":"code","78e3a432":"code","aadc5255":"code","8f9a5697":"code","1f9ccba9":"code","2ef052f6":"code","e168abbd":"code","ca42e079":"code","d428f9ce":"code","3bfc2272":"markdown","d7f8725c":"markdown"},"source":{"573c59ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a0e04d98":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5a964b96":"import pandas as pd\nworld = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\nworld['Date'] = pd.to_datetime(world['Date'])","553c433a":"# number of days after the initial spread\ndays=20\n# cutoff is number of cases we considerd the spread start growing exponentially\ncutoff=50","131c09d2":"world['Country\/Region'].unique()","24e3eda1":"countries = ['Italy', 'Spain', 'France', 'Germany', 'US', 'Hubei', 'Netherlands']","1c527584":"df = pd.DataFrame()\npops = {'Italy': 60480, 'Spain': 46660,'France': 66990, \n        'Germany': 82790, 'UK': 66440, 'US': 327200, \n        'Hubei': 58500,\n       'Netherlands': 17180}\ndf = world[world['Country\/Region']=='United Kingdom']\ndf.reset_index(inplace=True)\ndf = df[df['Confirmed']>cutoff][['Date','Confirmed','Deaths']]\ndf['Confirmed'] = df['Confirmed']\/pops['UK']\ndf['Deaths'] = df['Deaths']\/pops['UK']\ndf['Mortality_Rate'] = df['Deaths']\/df['Confirmed']\ndf=df[:days+1]\nc='United Kingdom'\ndf.columns=[c + '_Date', c + '_Confirmed', c + '_Deaths', c + '_Mortality_Rate']\ndf['id'] = [i for i in range(len(df))]\ndf.set_index('id', inplace=True)\n\nfor c in countries:\n    if c == 'France':\n        cf = world[world['Province\/State']=='France']\n    elif c=='US':\n        cf = world[world['Country\/Region'] == 'US']\n        cf = cf.groupby('Date').sum()\n    elif c == 'Hubei':\n        cf = world[world['Province\/State'] == 'Hubei']\n        cf = cf.groupby('Date').sum()\n    else:\n        cf = world[world['Country\/Region']==c]\n        \n    cf.reset_index(inplace=True)\n    cf = cf[cf['Confirmed']>cutoff][['Date','Confirmed','Deaths']]\n    cf['Confirmed'] = cf['Confirmed']\/pops[c]\n    cf['Deaths'] = cf['Deaths']\/pops[c]\n    cf['Mortality_Rate'] = cf['Deaths']\/cf['Confirmed']\n    \n\n    cf.columns=[c + '_Date', c + '_Confirmed', c + '_Deaths', c + '_Mortality_Rate']\n    cf = cf[:days+1]\n    cf['id'] = [i for i in range(len(cf))]\n    cf.set_index('id', inplace=True)\n    df = df.merge(cf, how='outer', on='id')\ncountries.append('United Kingdom')","b8299e6f":"t = [i for i in range(days+1)]\n\ncolumns = [c + '_Confirmed' for c in countries]\n# plt.title('Confirmed Positive Cases x 1000 people since at least 20 cases registerd in country')\n# plt.xlabel('Day')\n# plt.ylabel('Confirmed case x 1000 people')\nax = df[columns].plot(figsize=(16,8),\n                 title= 'Confirmed Positive Covid-19 Cases x 1000 people since at least 20 cases registerd in country')\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Confirmed case x 1000 people\")\nax.legend(countries);\n","ebbcbc65":"counries = countries.remove('Hubei')\nt = [i for i in range(days+1)]\n\ncolumns = [c + '_Confirmed' for c in countries]\n# plt.title('Confirmed Positive Cases x 1000 people since at least 20 cases registerd in country')\n# plt.xlabel('Day')\n# plt.ylabel('Confirmed case x 1000 people')\nax = df[columns].plot(figsize=(16,8),\n                 title= 'Confirmed Positive Covid-19 Cases x 1000 people since at least 20 cases registerd in country without Hubei')\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Confirmed case x 1000 people\")\nax.legend(countries);\n","78e3a432":"countries.append('Hubei')","aadc5255":"t = [i for i in range(days+1)]\n\ncolumns = [c + '_Deaths' for c in countries]\n# plt.title('Confirmed Positive Cases x 1000 people since at least 20 cases registerd in country')\n# plt.xlabel('Day')\n# plt.ylabel('Confirmed case x 1000 people')\nax = df[columns].plot(figsize=(16,8),\n                 title= 'Deaths for Covid-19 Cases x 1000 people since at least 20 positive cases registerd in country')\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Deaths x 1000 people\")\nax.legend(countries);","8f9a5697":"countries.remove('Hubei')\nt = [i for i in range(days+1)]\n\ncolumns = [c + '_Deaths' for c in countries]\n# plt.title('Confirmed Positive Cases x 1000 people since at least 20 cases registerd in country')\n# plt.xlabel('Day')\n# plt.ylabel('Confirmed case x 1000 people')\nax = df[columns].plot(figsize=(16,8),\n         title= 'Deaths for Covid-19 Cases x 1000 people since at least 20 positive cases registerd in country without Hubei')\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Deaths x 1000 people\")\nax.legend(countries);","1f9ccba9":"countries.append('Hubei')","2ef052f6":"t = [i for i in range(days+1)]\n\ncolumns = [c + '_Mortality_Rate' for c in countries]\n# plt.title('Confirmed Positive Cases x 1000 people since at least 20 cases registerd in country')\n# plt.xlabel('Day')\n# plt.ylabel('Confirmed case x 1000 people')\nax = df[columns].plot(figsize=(16,8),\n                 title= 'Mortality rate for Covid-19 Cases x 1000 people since at least 20 positive cases registerd in country')\nax.set_xlabel(\"Days\")\nax.set_ylabel(\"Mortality Rate\")\nax.legend(countries);","e168abbd":"world[world['Country\/Region'] == 'Germany'].groupby('Date').sum()","ca42e079":"world[world['Country\/Region'] == 'Germany']","d428f9ce":"df[['Germany_Confirmed', 'Italy_Confirmed']].plot()","3bfc2272":"### Situation is very uncertain for most of the countries and i guess is normal as most of people infected are unknown.\n### Italy is way over what the mortality rate should be and in Germany instead is basically 0\n### US might have a lot more people infected then they think","d7f8725c":"### It seems Spain is heading towards a disaster similar the one that struck Italy while other countries seems be able, for the moment, to containt the outbreaks better"}}