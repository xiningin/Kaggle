{"cell_type":{"947b52c3":"code","731faff1":"code","e56cb8c0":"code","6d324744":"code","cef3cb6c":"code","7bfcb4c0":"code","2b1249da":"code","89cacb76":"code","55882cd2":"code","4d37f53b":"code","e4d1fe3d":"code","8367c711":"code","660c9d95":"code","65744fee":"code","5b3dd7fe":"code","3f6fddea":"code","920897a0":"code","ede6161c":"code","f0d214f5":"code","4d98226f":"code","637a2b37":"code","7ce7586e":"code","2aba9424":"code","79e7cd68":"code","503b92f6":"code","1a7b81ef":"code","ce681b26":"code","9efcea08":"code","4bba0c33":"code","edbaef51":"code","73baf56e":"code","1d1d37db":"code","5aca9c71":"code","355ebd32":"code","d7a6fa12":"code","ee5bc975":"code","741d1aa5":"code","d7c05691":"code","707c6cd7":"code","640dff89":"code","fd403623":"code","89c8acb5":"code","74c4297d":"code","aed99ed8":"code","c28b79fe":"code","2f401cf7":"code","40fdaecd":"code","fbaf2fec":"code","ccd99f3b":"code","0f9834a9":"code","6931016b":"code","ef79ec7d":"code","042309c3":"code","a84d4963":"code","474857ea":"code","6cd48ca7":"code","71386d22":"code","a897d6e4":"code","5df222c0":"code","15749f9c":"code","feca24db":"code","22b9c3e1":"code","fda808ae":"code","c4cb6640":"code","40a15904":"code","ba57e2bc":"code","b1ebd0cc":"code","e48ba482":"code","937a4477":"code","92c80c03":"code","40938ced":"code","45e56dbb":"code","e3408733":"markdown","aeb7453d":"markdown","f8b19c11":"markdown","d8735d75":"markdown","96aca226":"markdown","5aceef86":"markdown","22da3e86":"markdown","17486c99":"markdown","9688ef79":"markdown","5df15abb":"markdown","88e055f2":"markdown","a27dc914":"markdown","56d72103":"markdown","c7af52ae":"markdown","02d9a82a":"markdown","cbb4f426":"markdown","4e10b86a":"markdown","501a8eb5":"markdown","48c98f6d":"markdown","f3fdbc0d":"markdown","a01b4855":"markdown","8c4d5037":"markdown","1e30e59a":"markdown","1e9d84c6":"markdown","a5ce6e96":"markdown","71ce818b":"markdown"},"source":{"947b52c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","731faff1":"file = open('\/kaggle\/input\/assessment-2-ict-data-science\/files\/adult.data', 'r')","e56cb8c0":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","6d324744":"print (data)","cef3cb6c":"print (data[1:2])","7bfcb4c0":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","2b1249da":"df.tail()","89cacb76":"df.shape","55882cd2":"counts = df.groupby('country').size()\n\nprint (counts) ","4d37f53b":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","e4d1fe3d":"max(counts)\n","8367c711":"counts[0:20]","660c9d95":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","65744fee":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","5b3dd7fe":"fm =df[(df.sex == 'Female')]\nfm.shape","3f6fddea":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","920897a0":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","ede6161c":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","f0d214f5":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","4d98226f":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","637a2b37":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","7ce7586e":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","2aba9424":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","79e7cd68":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","503b92f6":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","1a7b81ef":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist( histtype='stepfilled', bins=20)","ce681b26":"fm_age=fm['age']\nfm_age.hist(histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","9efcea08":"import seaborn as sns\nfm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","4bba0c33":"fm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","edbaef51":"ml_age.hist(histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","73baf56e":"fm_age.hist(histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","1d1d37db":"ml_age.hist(histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","5aca9c71":"fm_age.hist(histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","355ebd32":"ml_age.hist(bins=10, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","d7a6fa12":"ml_age.hist( histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist( histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","ee5bc975":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","741d1aa5":"df['age'].median()","d7c05691":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","707c6cd7":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","640dff89":"df.shape","fd403623":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","89c8acb5":"ml1_age=ml1['age']\nfm1_age=fm1['age']","74c4297d":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","aed99ed8":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","c28b79fe":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","2f401cf7":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","40fdaecd":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","fbaf2fec":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","ccd99f3b":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","0f9834a9":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","6931016b":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","ef79ec7d":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","042309c3":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)\n\nprint (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")\n\nprint (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","a84d4963":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())\n\nml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))\n\nml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","474857ea":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","6cd48ca7":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","71386d22":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","a897d6e4":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","5df222c0":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","15749f9c":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","feca24db":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28)\nplt.plot(xgrid, density(xgrid), 'r-')","22b9c3e1":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18)","fda808ae":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18)\nplt.plot(xgrid, density(xgrid), 'r-')","c4cb6640":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50)","40a15904":"print ('The empirical mean of the sample is ', x.mean())","ba57e2bc":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","b1ebd0cc":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","e48ba482":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))\n\nX=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","937a4477":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","92c80c03":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","40938ced":"\n\nX=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])\n\n\nplt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\nplt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\nplt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))\n\n","45e56dbb":"import seaborn as sn\n\n############ MOYENNE ET VARIANCE ############\n\nprint(\"Moyenne du premier quartet: %.2f \"% ((X[:,0].mean() + X[:,1].mean())\/2 ))   \n      \nprint(\"Variance du premier quartet: %.2f\" % ((X[:,0].var() + X[:,1].var())\/2))\n\nprint(\"Moyenne du deuxi\u00e8me quartet: %.2f \"% ((X[:,2].mean() + X[:,3].mean())\/2 )) \n\nprint(\"Variance du deuxi\u00e8me quartet: %.2f\" % ((X[:,2].var() + X[:,3].var())\/2)) \n\nprint(\"Moyenne du troisi\u00e8me quartet: %.2f \"% ((X[:,4].mean() + X[:,5].mean())\/2 ))\n\nprint(\"Variance du troisi\u00e8me quartet: %.2f\" % ((X[:,4].var() + X[:,5].var())\/2)) \n\nprint(\"Moyenne du quatri\u00e8me quartet: %.2f \"% ((X[:,6].mean() + X[:,7].mean())\/2 )) \n\nprint(\"Variance du quatri\u00e8me quartet: %.2f\" % ((X[:,6].var() + X[:,7].var())\/2))\n\n############ COVARIANCE ############\n\nprint('Matrice de covariance 0 et 1:')\ndata = np.array([X[:,0],X[:,1]])\ncovMatrix = np.cov(data,bias=True)\nsn.heatmap(covMatrix, annot=True, fmt='g')\nplt.show()\n\nprint('Matrice de covariance 2 et 3:')\ndata = np.array([X[:,2],X[:,3]])\ncovMatrix = np.cov(data,bias=True)\nsn.heatmap(covMatrix, annot=True, fmt='g')\nplt.show()\n\nprint('Matrice de covariance 4 et 5:')\ndata = np.array([X[:,4],X[:,5]])\ncovMatrix = np.cov(data,bias=True)\nsn.heatmap(covMatrix, annot=True, fmt='g')\nplt.show()\n\nprint('Matrice de covariance 6 et 7:')\ndata = np.array([X[:,6],X[:,7]])\ncovMatrix = np.cov(data,bias=True)\nsn.heatmap(covMatrix, annot=True, fmt='g')\nplt.show()\n\ndef list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    return Corr(list2rank(X), list2rank(Y))\n\n############ PEARSON AND SPEARMAN COEFFICIENTS ############\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,0], X[:,1]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,0], X[:,1]))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,2], X[:,3]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,2], X[:,3]))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,4], X[:,5]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,4], X[:,5]))\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X[:,6], X[:,7]))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X[:,6], X[:,7]))\n\n\n","e3408733":"**2-Describe an explain the result.**\nOn obtient dans un tableau les 5 premi\u00e8res premi\u00e8res personnes du fichier data et leurs caract\u00e9ristiques. Gr\u00e2ce \u00e0 DataFrame on obtient un tableau lisible avec une mise en forme correcte.","aeb7453d":"**12- Show the graphics and an explain the result.**\n    Histogramme qui combine nombre d'hommes ET de femmes par cat\u00e9gorie d'\u00e2ge sur le m\u00eame graphique. La couleur a \u00e9galement \u00e9t\u00e9 modifi\u00e9e. Le nombre d'intervalles n'est pas le m\u00eame pour hommes et femmes, dans le premier cas on a \"bins=10\" et dans le deuxi\u00e8me cas on a \"bins=20\".","f8b19c11":"**10bis -Show the graphics and an explain the result.**\nIl s'agit d'un histogramme qui donne le nombre d'hommes par cat\u00e9gorie d'\u00e2ge.","d8735d75":"**Question 23** What do you obtained as result?\nWe obtain: 0.0009527853481980511","96aca226":"**21-Explain the result**\nDans un premier temps, on regroupe les donn\u00e9es:\n- des hommes ayant un haut revenu ayant l'\u00e2ge median + 35 ans et les hommes \u00e0 hauts revenus ayant l'\u00e2ge median -15 ans\n- de m\u00eame pour les femmes\n\nPuis \u00e0 l'aide de la fonction \"drop\" de Python, on enl\u00e8ve ces donn\u00e9es de notre dataframe \"df\" pour obtenir \"df2\".\nOn compare ensuite sur un graphique les deux df et df2.\nFinalement, on met en \u00e9vidence l'asym\u00e9trie de l'\u00e2ge pour fm2 et ml2 gr\u00e2ce \u00e0 une fonction qui utilise la moyenne et l'\u00e9cart-type d'un ensemble de donn\u00e9es x.\n\n","5aceef86":"**6-What is the age of the most represented people?**\n36 ans","22da3e86":"**10- Describe an explain the result.**\nIci on calcule la mediane pour l'\u00e2ge des femmes et des hommes. De m\u00eame pour hommes et femmes \u00e0 hauts revenus. Idem pour pour le temps de travail par semaine des hommes et des femmes.","17486c99":"**19-Show the graphics and an explain the result.**\nIl s'agit de la superposition des deux graphiques concern\u00e9s par les questions 16 et 17. Cf question n\u00b016 pour les explications.","9688ef79":"**17-Show the graphics and an explain the result.**\nM\u00eame chose que le graphique pr\u00e9c\u00e9dent mais on s'int\u00e9resse aux femmes ici.","5df15abb":"**Question 22** What does the figure show?\nSur la figure, on a repr\u00e9sent\u00e9 la distribution de l'ensemble de donn\u00e9es sous forme de courbe (en rouge), c'est plut\u00f4t une estimation de celle-ci car en r\u00e9alit\u00e9 nous ne la connaissons pas.","88e055f2":"**1-What is the obtained result? What did you ask for in the previous command? Explain.**\n\nLe fichier data est un tableau qui r\u00e9pertorie par ligne toutes les caract\u00e9ristiques d'une personne.\n","a27dc914":"**16-Show the graphics and an explain the result.**\nCDF= Cumulative distribution function, elle est repr\u00e9sent\u00e9e ici sur le graphique gr\u00e2ce \u00e0 \"step\" et \"cumulative = true\" car ceci permet d'avoir non pas des barres mais des lignes et comme le nom de la fonction l'indique, le nombre de personnes est cumul\u00e9 \u00e0 chaque fois, c'est pourquoi on a une graduation des axes qui va jusqu'\u00e0 20 000.. Avec toujours l'\u00e2ge ici des hommes qui est repr\u00e9sent\u00e9 en abscisses.\n","56d72103":"**9-Describe an explain the result.**\nOn calcule la moyenne, la variance et l'\u00e9cart-type pour les \u00e2ges des hommes puis des femmes.\nEnsuite on fait de m\u00eame pour le temps de travail par semaine des hommes et des femmes.","c7af52ae":"**4- Describe an explain the result.**\nRenvoie le nombre de lignes et le nombre de colonnes du tableau data.","02d9a82a":"**5-How many items are there for USA? and for Mexico?**\nUSA: 29170,\nMexico:643.\n","cbb4f426":"**20-Explain the result.**\nCe r\u00e9sultat donne la diff\u00e9rence entre la moyenne d'\u00e2ge des hommes et celle des femmes.\n","4e10b86a":"On constate que les 4 quartets ont m\u00eame variance, m\u00eame moyenne et quasiment la m\u00eame matrice de covariance. Cependant on se rend compte que des indicateurs diff\u00e8rent \u00e0 l'image de celui de Spearman.","501a8eb5":"**7- Describe an explain the result.**\nOn regroupe dans un premier temps tous les hommes dans \"ml\" et on compte leur nombre, on renvoie \u00e0 l'aide de \"shape\" le nombre de lignes et de colonnes correspondantes. De m\u00eame pour les hommes gagnant plus de 50K\/an, on les regroupe dans \"ml1\". On refait la m\u00eame chose pour les femmes dans \"fm\" puis \"fm1\". Finalement, on calcule des pourcentages de personnes ayant un haut revenu, puis d'hommes puis de femmes.","48c98f6d":"**13-Show the graphics and an explain the result.**\nM\u00eame graphique que pr\u00e9cedemment excpet\u00e9 le fait qu'on a chang\u00e9 le nom de l'axe des ordonn\u00e9es ainsi que les graduations ce celui-ci.","f3fdbc0d":"**14-Show the graphics and an explain the result.** Donne le nombre d'hommes par tranche d'\u00e2ge.\n","a01b4855":"**3- Describe and explain the result. Compare with the previous one.**\nRenvoie les 5 derni\u00e8res personnes du fichier data et leurs caract\u00e9ristiques.","8c4d5037":"**11-Show the graphics and an explain the result.**\n    Il s'agit de la m\u00eame chose que la question 10bis avec les femmes. On a ajout\u00e9 la l\u00e9gende des axes en plus et on a repr\u00e9sent\u00e9 10 intervalles au lieu de 20 pr\u00e9c\u00e9demment avec \"bins\".","1e30e59a":"**15-Show the graphics and an explain the result.** Donne le nombre de femmes par tranche d'\u00e2ge.\n","1e9d84c6":"**Exercise:** Obtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.","a5ce6e96":"**8-Describe an explain the result.**\nDans ces deux parties de code on calcule la moyenne d'\u00e2ge des hommes avec ml puis des femmes avec fm. Ensuite, on fait de m\u00eame pour les hommes \u00e0 hauts revenus et femmes \u00e0 revenus gr\u00e2ce aux tableaux ml1 et fm1.","71ce818b":"**18-Show the graphics and an explain the result.**\nIl s'agit du nombre d'hommes et de femmes par cat\u00e9gorie d'\u00e2ge.\n"}}