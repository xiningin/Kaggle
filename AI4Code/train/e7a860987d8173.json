{"cell_type":{"0dd0fd7c":"code","e69f1025":"code","49803fbf":"code","5836c164":"code","ccd4489f":"code","242e8431":"code","8e2b14fc":"code","6ea45c7d":"code","eb36195d":"code","818cbe2d":"code","8bf4e957":"code","f9684757":"code","b72fd0e9":"code","ad3636f5":"code","5ef506dc":"code","d31314ea":"code","c0ac6c06":"code","831afd12":"code","176c09e0":"code","880e9204":"code","342f0bd8":"code","51dcf5b4":"code","1a8eb8d4":"code","ee022741":"code","a4b49087":"code","3ea1d110":"code","571366a8":"code","eaf33ba8":"code","b3199f79":"code","1c26aad9":"code","e4173147":"code","93d32412":"code","112097df":"code","8bfd08ca":"code","1eac24dd":"code","26993aa6":"code","9dc34249":"code","4d5f401e":"code","d628776e":"code","1984a8a0":"code","ba73c1e7":"code","0520ae1e":"code","f7a429c0":"code","541b3dca":"code","7d3a6e1e":"code","59f3c3b7":"code","8cf987df":"code","5e7eed8e":"code","28b88792":"code","724df72f":"markdown"},"source":{"0dd0fd7c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nfull = train.append(test,ignore_index=True)\nfull.head()","e69f1025":"#\u52a0\u8f7d\u5fc5\u8981\u7684\u5e93\n\nimport pandas as pd \nimport numpy as np\nimport sklearn\nimport random \nimport time\n\nfrom sklearn import ensemble\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","49803fbf":"full.isnull().sum()","5836c164":"full.isnull().sum()","ccd4489f":"full.info()","242e8431":"#\u586b\u8865\u7f3a\u5931\u503c\nfull['Age'] = full['Age'].fillna(full['Age'].median())\nfull['Fare'] = full['Fare'].fillna(full['Fare'].mean())\nfull['Embarked'] = full['Embarked'].fillna('S')\nfull['Cabin']=full['Cabin'].fillna('U')","8e2b14fc":"full.info()\n#\u7f3a\u5931\u503c\u786e\u8ba4\u5b8c\u6bd5","6ea45c7d":"def getTitle(name):\n    str = name.split(',')[1]\n    str = str.split('.')[0].strip()\n    return str\nTitle=full['Name'].map(getTitle)\nTitle.head()","eb36195d":"Title.value_counts()","818cbe2d":"title_mapDict={\n'Dr':\"power1\",'Col':\"power1\",'Major':\"power1\",'Sir':\"power1\",'Capt':\"power1\",\n'Mr':\"power2\",'Rev':\"power2\",'Don':\"power2\",'Jonkheer':\"power2\",\n'Miss':\"power3\",'Mrs':\"power3\",'Master':\"power3\",'Mlle':\"power3\",'Ms':\"power3\",'Dona':\"power3\",'theCountess':\"power3\",'Mme':\"power3\",'Lady':\"power3\"}\nTitle=Title.map(title_mapDict)\nTitle.value_counts()","8bf4e957":"titleDf = pd.get_dummies(Title)\ntitleDf.head()","f9684757":"full = pd.concat([full,titleDf],axis=1)\nfull.drop('Name',axis=1,inplace=True)\nfull.shape","b72fd0e9":"pclassDf=pd.get_dummies(full['Pclass'],prefix='Pclass')\npclassDf","ad3636f5":"full = pd.concat([full,pclassDf],axis=1)\nfull.drop('Pclass',axis=1,inplace=True)\nfull.shape","5ef506dc":"sex_mapDict={'male':1,'female':0}\nfull['Sex']=full['Sex'].map(sex_mapDict)\nfull['Sex'].head()","d31314ea":"ageDf=pd.DataFrame()","c0ac6c06":"ageDf['Age_Young']=full['Age'].map(lambda s:1 if s<=16 else 0)\nageDf['Age_Adult']=full['Age'].map(lambda s:1 if 17<=s<=54 else 0)\nageDf['Age_Old']=full['Age'].map(lambda s:1 if s>=55 else 0)","831afd12":"full = pd.concat([full,ageDf],axis=1)\nfull.shape","176c09e0":"embarkedDf=pd.get_dummies(full['Embarked'],prefix='Embarked')\nembarkedDf","880e9204":"full = pd.concat([full,embarkedDf],axis=1)\nfull.drop('Embarked',axis=1,inplace=True)\nfull.shape","342f0bd8":"full['Cabin']=full['Cabin'].map(lambda c:c[0])\nfull['Cabin'].value_counts()","51dcf5b4":"cabinDf=pd.get_dummies(full['Cabin'],prefix='Cabin')\ncabinDf","1a8eb8d4":"full = pd.concat([full,cabinDf],axis=1)\nfull.drop('Cabin',axis=1,inplace=True)\nfull.shape","ee022741":"familyDf=pd.DataFrame()\nfamilyDf['Family size'] = full['SibSp']+full['Parch']+1","a4b49087":"familyDf['Family_Only']=familyDf['Family size'].map(lambda s:1 if s==1 else 0)\nfamilyDf['Family_Double']=familyDf['Family size'].map(lambda s:1 if s==2 else 0)\nfamilyDf['Family_Large']=familyDf['Family size'].map(lambda s:1 if s>=3 else 0)","3ea1d110":"full = pd.concat([full,familyDf],axis=1)\nfull.shape","571366a8":"fareDf=pd.DataFrame()\nfareDf['Fare_low']=full['Fare'].map(lambda s:1 if s<7.89 else 0)\nfareDf['Fare_cheap']=full['Fare'].map(lambda s:1 if 7.89<=s<14.45 else 0)\nfareDf['Fare_business']=full['Fare'].map(lambda s:1 if 14.45<=s<31.27 else 0)\nfareDf['Fare_firstclass']=full['Fare'].map(lambda s:1 if 31.27<=s else 0)","eaf33ba8":"full = pd.concat([full,fareDf],axis=1)\nfull.shape","b3199f79":"full_X=pd.concat([titleDf,\n                  pclassDf,\n                  fareDf,\n                  cabinDf,\n                  full['Sex'],\n                  embarkedDf,\n                  ageDf,\n                  familyDf],axis=1)\nfull_X.head()","1c26aad9":"#\u9009\u53d6train\u7684\u6570\u636e\nsourceRow=891\n#\u4ecefull_X\u4e2d\u9009\u53d6\u524d891\u884c\u4e3a\u7279\u5f81\u6570\u636e\nsource_X=full_X.loc[0:sourceRow-1,:]\n\n#\u9009\u53d6\u6807\u7b7e\u6570\u636e:survived\u53ea\u5b58\u5728\u4e8efull\nsource_y=full.loc[0:sourceRow-1,'Survived']\n\n#\u51c6\u5907\u9884\u6d4b\u6570\u636e\u96c6\u7279\u5f81\npre_X=full_X.loc[sourceRow:,:]\n\n#\u8f93\u51fa\u6570\u636e\u5927\u5c0f\nprint('\u6837\u672c\u7279\u5f81\u6570\u636e:',source_X.shape)\nprint('\u6837\u672c\u6807\u7b7e\u6570\u636e:',source_y.shape)\nprint('\u9884\u6d4b\u7279\u5f81\u6570\u636e:',pre_X.shape)","e4173147":"from sklearn.datasets import load_breast_cancer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nloaded_data = load_breast_cancer()\nX_train, X_test, y_train, y_test = train_test_split(\n    source_X, source_y, random_state=0)\n\nmodels = {\n    'not bagging': DecisionTreeClassifier(random_state=0),\n    'bagging': BaggingClassifier(DecisionTreeClassifier(random_state=0), n_estimators=100, random_state=10) \n}\n\nscores = {}\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    scores[(model_name, 'train_score')] = model.score(X_train, y_train)\n    scores[(model_name, 'test_score')] = model.score(X_test, y_test)\n\npd.Series(scores).unstack()","93d32412":"rf0=RandomForestClassifier(oob_score=True,random_state=10)\nrf0.fit(source_X,source_y)\nrf0.oob_score_\n","112097df":"from sklearn.model_selection import GridSearchCV\nparam_test1={'n_estimators':range(10,71,10)}\ngs1 = GridSearchCV(estimator=RandomForestClassifier(min_samples_split=100,\n                                                      min_samples_leaf=20,max_depth=8,max_features='sqrt',random_state=10),\n                     param_grid = param_test1,scoring = 'roc_auc',cv=5)\ngs1 = gs1.fit(source_X,source_y)\ngs1.cv_results_, gs1.best_params_, gs1.best_score_","8bfd08ca":"param_test2={'max_depth':range(3,14,2),'min_samples_split':range(50,201,20)}\ngs2 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=70,min_samples_leaf=20,max_features='sqrt',oob_score=True,random_state=10),\n                     param_grid = param_test2,scoring = 'roc_auc',iid=False,cv=5)\n\ngs2 = gs2.fit(source_X,source_y)\ngs2.cv_results_, gs2.best_params_, gs2.best_score_","1eac24dd":"rf1 = RandomForestClassifier(n_estimators=70,max_depth=5,min_samples_split=70,\n                            min_samples_leaf=20,max_features='sqrt',oob_score=True,random_state=10)\nrf1.fit(source_X,source_y)\nrf1.oob_score_\n","26993aa6":"garam_test3 ={'min_samples_split':range(80,150,20),'min_samples_leaf':range(10,60,10)}\ngs3 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=70,max_depth=5,\n                                                   max_features='sqrt',oob_score=True,random_state=10),\n                   param_grid = garam_test3,scoring = 'roc_auc',iid=False,cv=5)\n\ngs3 = gs3.fit(source_X,source_y)\ngs3.cv_results_, gs3.best_params_, gs3.best_score_\n    ","9dc34249":"garam_test4 ={'max_features':range(3,7,2)}\ngs4 = GridSearchCV(estimator=RandomForestClassifier(n_estimators=70,max_depth=5,min_samples_leaf=10,min_samples_split=80,\n                                                   oob_score=True,random_state=10),\n                   param_grid = garam_test4,scoring = 'roc_auc',iid=False,cv=5)\n\ngs4 = gs4.fit(source_X,source_y)\ngs4.cv_results_, gs4.best_params_, gs4.best_score_","4d5f401e":"from sklearn.ensemble import BaggingClassifier\ngaram_test5 ={'n_estimators':range(10,71,10)}\ngs5 = GridSearchCV(estimator=BaggingClassifier(max_samples=200,bootstrap=True,random_state=10),\n                   param_grid = garam_test5,scoring = 'roc_auc',iid=False,cv=5)\n\ngs5 = gs5.fit(source_X,source_y)\ngs5.cv_results_, gs5.best_params_, gs5.best_score_","d628776e":"garam_test6 ={'max_samples':range(80,150,20)}\ngs6 = GridSearchCV(estimator=BaggingClassifier(n_estimators=30,bootstrap=True,random_state=10),\n                   param_grid = garam_test6,scoring = 'roc_auc',iid=False,cv=5)\n\ngs6 = gs6.fit(source_X,source_y)\ngs6.cv_results_, gs6.best_params_, gs6.best_score_","1984a8a0":"garam_test7 ={'max_features':range(3,7,2)}\ngs7 = GridSearchCV(estimator=BaggingClassifier(n_estimators=30,max_samples=100,bootstrap=True,random_state=10),\n                   param_grid = garam_test7,scoring = 'roc_auc',iid=False,cv=5)\n\ngs7 = gs7.fit(source_X,source_y)\ngs7.cv_results_, gs7.best_params_, gs7.best_score_","ba73c1e7":"from sklearn.tree import DecisionTreeClassifier\ngaram_test8 =[{'criterion':['gini'],'max_depth':[30,50,60,100],'min_samples_leaf':[2,3,5,10],'min_impurity_decrease':[0,1,0,2,0,5]},\n             {'criterion':['gini','entropy']},\n              {'max_depth':[30,60,100],'min_impurity_decrease':[0,1,0,2,0,5]}]\n\ngs8 = GridSearchCV(estimator=DecisionTreeClassifier(random_state=10),\n                   param_grid = garam_test8,scoring = 'roc_auc',iid=False,cv=5)\n\ngs8 = gs8.fit(source_X,source_y)\ngs8.cv_results_, gs8.best_params_, gs8.best_score_","0520ae1e":"rf2 = RandomForestClassifier(n_estimators=79,max_depth=5,min_samples_leaf=10,min_samples_split=80,max_features=5,oob_score=True,random_state=10)\nrf2.fit(source_X,source_y)\nrf2.oob_score_","f7a429c0":"from sklearn.datasets import load_boston\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nmodels = {\n    'tree': DecisionTreeClassifier(max_depth=30,min_impurity_decrease=0,min_samples_leaf=5,random_state=10),\n    'Bagging': BaggingClassifier(DecisionTreeClassifier(max_depth=30,min_impurity_decrease=0,min_samples_leaf=5,random_state=10),n_estimators=30,max_samples=100,max_features=5,bootstrap=True,random_state=10),\n    'RandomForest': RandomForestClassifier(n_estimators=70,max_depth=5,min_samples_leaf=10,min_samples_split=80,max_features=5,oob_score=True,random_state=10)\n}\n\n\nscores = {}\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    scores[(model_name, 'train_score')] = model.score(X_train, y_train)\n    scores[(model_name, 'test_score')] = model.score(X_test, y_test)\n\npd.Series(scores).unstack()\n","541b3dca":"model.oob_score_","7d3a6e1e":"###\u5728test\u4e0a\u8fdb\u884c\u9884\u6d4b","59f3c3b7":"pred = model.predict(pre_X)","8cf987df":"pred_y = pd.DataFrame(pred,columns=['Survived'])","5e7eed8e":"pre_y=model.predict(pre_X)\npre_y=pre_y.astype(int)\npre_y","28b88792":"reslut = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nreslut.Survived = pre_y\nreslut.to_csv('reslut.csv', index=False)","724df72f":"\u5bfc\u5165\u6570\u636e"}}