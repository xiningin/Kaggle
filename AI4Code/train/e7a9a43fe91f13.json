{"cell_type":{"509284df":"code","bbb52f10":"code","4dba062b":"code","c4282de6":"code","76202be3":"code","d83d5655":"code","d9107443":"code","32258e26":"code","a006c5e7":"code","84e5576e":"code","f3f5a7f7":"code","c6e20f92":"code","0359c03f":"code","e5ac1e1e":"code","b62796c7":"code","06c5c997":"code","2f8fa687":"code","8c5cc594":"code","2f4be6c9":"code","aaa447d9":"code","5d46f15d":"code","897e9e2e":"code","78a70ac4":"code","266ff3a8":"code","60243c19":"code","33d8f005":"code","81b5c101":"code","9e02f914":"code","c4efb8d2":"code","7e312ecd":"markdown","f205ebf3":"markdown","3edaa2e7":"markdown","0dd5629b":"markdown","54ae351c":"markdown","b9f8c4d4":"markdown","89c8fa24":"markdown","0b95bbe5":"markdown","ae4fe4ea":"markdown","16a9d6f1":"markdown","2df119f1":"markdown","678c7e33":"markdown","7e289385":"markdown"},"source":{"509284df":"class Computer:\n    def config(self):\n        print(\"i5, 1Tb computer\")\n\n\ncomp1 = Computer()\ncomp2 = Computer()\n\nComputer.config(comp1)\nComputer.config(comp2)\n\ncomp1.config()\ncomp2.config()","bbb52f10":"class Computer:\n    def __init__(self):\n        print(\"I am init method\")\n\n    def config(self):\n        print(\"i5, 1Tb computer\")\n\n\ncomp1 = Computer()\ncomp2 = Computer()\n\ncomp1.config()\ncomp2.config()","4dba062b":"class Computer:\n    def __init__(self, cpu, ram):\n        self.cpu = cpu\n        self.ram = ram\n\n    def config(self):\n        print(\"Config is :\", self.cpu, self.ram)\n\n\nc1 = Computer('i5', '4gb')\nc2 = Computer('Ryzen', '8gb')\n\nc1.config()\nc2.config()","c4282de6":"class Person:\n    def __init__(self): # this method is known as constructor\n        self.name = \"Navin\"\n        self.age = 28\n\n    def update(self):\n        self.age = 35\n\n    def compare(self, other):\n        if self.age == other.age:\n            return True\n        else:\n            return False\n\n\np1 = Person()\np2 = Person()\n\np1.name = \"Happy\"\np1.age = 30\n\np1.update()\n\nprint(\"Name : \", p1.name)  # Return the address of Computer\nprint(\"Age: \", p1.age)  # Return the address of Computer\nprint(\"Name : \", p2.name)  # Return the address of Computer","76202be3":"if p1.compare(p2):\n    print(\"They are same\")\nelse:\n    print(\"They are not same\")","d83d5655":"class Car:\n    \"\"\"\n    Variable define outside the init method is called Class variable or Static Variable\n    \"\"\"\n    wheels = 4\n\n    def __init__(self):\n        \"\"\"\n        Varible define in the init mathod is called instance varible\n        \"\"\"\n        self.mil = 10\n        self.com = \"BMW\"\n\n\nc1 = Car()\nc2 = Car()\n\nc1.mil = 8\n\nCar.wheels = 6\n\nprint(c1.mil, c1.wheels)\nprint(c2.mil, c2.wheels)","d9107443":"class Student:\n\n    school = \"Telusko\" # class variable\n\n    def __init__(self, m1, m2, m3):\n        self.m1 = m1\n        self.m2 = m2\n        self.m3 = m3\n\n    def avg(self):\n        \"\"\"\n        This is intance method because its work with object like self method\n        \"\"\"\n        return (self.m1 + self.m2 + self.m3) \/ 3\n\n    def getm1(self):\n        \"\"\"\n        Accessor : It's used to access the value or variable or method\n        Mutators : It's used to change the value of variable or method\n        \"\"\"\n        return self.m1\n\n    def setm1(self, value):\n        self.m1 = value\n\n    @classmethod\n    def getschoolname(cls):\n        return cls.school\n\n    @staticmethod\n    def info():\n        print(\"This is static method\")\n\n\ns1 = Student(25, 40, 55)\ns2 = Student(50, 60, 70)","32258e26":"s1.avg(), s2.avg()","a006c5e7":"s1.getschoolname()","84e5576e":"print(Student.getschoolname())","f3f5a7f7":"s1.info()\nStudent.info()","c6e20f92":"class student:  ## Outer Class\n    def __init__(self, name, rollno):\n        self.name = name\n        self.rollno = rollno\n        self.lap = self.Laptop(\n        )  #we can create this object inside the class and also outside the class\n\n    def show(self):\n        print(self.name, self.rollno)\n        self.lap.show()\n\n    class Laptop:  ## Inner Class\n        def __init__(self):\n            self.brand = \"HP\"\n            self.cpu = \"i5\"\n            self.ram = 8\n\n        def show(self):\n            print(self.brand, self.cpu, self.ram)\n\n\ns1 = student(\"Navin\", 2)\ns2 = student(\"Ashish\", 3)\n\nprint(s1.name, s1.rollno)\n\ns1.show()","0359c03f":"s1.lap.brand\n\nlap1 = s1.lap\nlap2 = s2.lap","e5ac1e1e":"print(id(lap1))\nprint(id(lap2))","b62796c7":"# create Laptop object outside the class\n\nlaptop1 = student.Laptop()\nprint(laptop1)","06c5c997":"class A:\n    def feature1(self):\n        print(\"feature1 is working\")\n\n    def feature2(self):\n        print(\"feature2 is working\")\n        \nclass B: ## single level inheritance\n    def feature3(self):\n        print(\"feature3 is working\")\n\n    def feature4(self):\n        print(\"feature4 is working\")\n    \nclass C(B): #hierarchical inheritance\n    def feature5(self):\n        print(\"feature5 is working\")\n\nclass D(A,B): #multiple inheritance\n    def feature6(self):\n        print(\"feature6 is working\")\n    \na1 = A()\nb1 = B()\na1.feature1()\na1.feature2()\nb1.feature3()\nb1.feature4()","2f8fa687":"c1 = C()\nd1 = D()","8c5cc594":"c1.feature3()\nd1.feature6()","2f4be6c9":"class A:\n    def __init__(Self):\n        print(\"It's A init\")\n\n    def feature1(self):\n        print(\"feature1 is working\")\n\n    def feature2(self):\n        print(\"feature2 is working\")\n\n\nclass B(A):  ## single level inheritance\n    def __init__(self):\n        super().__init__()\n        print(\"It's B init\")\n\n    def feature3(self):\n        print(\"feature3 is working\")\n\n    def feature4(self):\n        print(\"feature4 is working\")","aaa447d9":"a2 = A()\na3 = B()","5d46f15d":"class A:\n    def __init__(Self):\n        print(\"It's A init\")\n\n    def feature1(self):\n        print(\"feature1-A is working\")\n\n    def feature2(self):\n        print(\"feature2 is working\")\n\n\nclass B:  ## single level inheritance\n    def __init__(self):\n        print(\"It's B init\")\n\n    def feature1(self):\n        print(\"feature1-B is working\")\n\n    def feature4(self):\n        print(\"feature4 is working\")\n\n\nclass C(A, B):\n    def __init__(self):\n        super().__init__()\n        print(\"It's C init\")\n        \n    def feat(self):\n        super().feature2()\n\n\ncam = C()","897e9e2e":"cam.feat()","78a70ac4":"class IDE:\n    def execute(self):\n        print(\"Compiling\")\n        print(\"Running\")\n        \n\nclass Laptop:\n    def code(self,ide):\n        ide.execute()\n        \n        \nclass Editor:\n    def execute(self):\n        print(\"Spell Check\")\n        print(\"Compiling\")\n        print(\"Running\")\n        \n        \n    ","266ff3a8":"ide = Editor()\nlap1 = Laptop()\nlap1.code(ide)","60243c19":"class Student:\n    def __init__(self, m1, m2, m3):\n        self.m1 = m1\n        self.m2 = m2\n        self.m3 = m3\n\n    def __add__(self, other):\n        m1 = self.m1 + other.m1\n        m2 = self.m2 + other.m2\n        m3 = self.m3 + other.m3\n        s3 = Student(m1, m2, m3)\n        return s3\n    \n    def __gt__(self, other):\n        r1 = self.m1 + self.m2\n        r2 = other.m1 + self.m2\n        if r1 > r2:\n            return True\n        else:\n            return False\n        \n    def __str__(self):\n        return '{} {}'.format(self.m1, self.m2)\n        \n\n\ns1 = Student(50, 50, 25)\ns2 = Student(40, 70, 20)\ns3 = Student(25, 40, 20)\n\ns4 = s1 + s2 + s3\n\nprint(s4.m1)\n\nif s1 > s2:\n    print(\"s1 wins\")\nelse:\n    print(\"s2 wins\")","33d8f005":"print(s4.__str__())","81b5c101":"# this is example of method overloading\nclass Student:\n    def __init__(self, m1, m2):\n        self.m1 = m1\n        self.m2 = m2\n    \n    def sum(self, a =None,b = None, c = None):\n        s = 0\n        if a!=None and b!=None and c!=None:\n            s = a + b + c \n        elif a!=None and b!=None:\n            s = a + b\n        else: \n            s = a\n        return s\n\ns1 = Student(50, 50)\n\ns1.sum(1)","9e02f914":"# this is example of method overriding\n\nclass A:\n    def show(self):\n        print(\"I have nokia 1100 phone\")\n        \nclass B(A):\n    def show(self):\n        print(\"I have MotoG3\")\n\n\nabc = B()","c4efb8d2":"abc.show()","7e312ecd":"#### Method Overloading and Method Overriding","f205ebf3":"### This notebook is for learning purpose correct me if I did mistake anywhere comment...Below!!!","3edaa2e7":"### Types of Variable used in python ( Instance Variable  and Class variable(Static Variable))","0dd5629b":"### Init method with Class(Special Class Method)","54ae351c":"### Normal Class define","b9f8c4d4":"### Inner Class(Class inside a class)","89c8fa24":"### Constructor and Self Keyword and comparing object in Class","0b95bbe5":"#### Operator Overloading in python","ae4fe4ea":"#### Duck Typing","16a9d6f1":"### Class Methods(Instance, Class, Static Methods)","2df119f1":"### Method Resolution Order(MRO) and Constructor","678c7e33":"### Inheritance(One class Access the property of other Class)","7e289385":"### Polymorphrism\n\n* One things take many form\n* Four way to implement this methods\n    * Duck Typing\n    * Operator Overloading\n    * Method Overloading\n    * Method Overriding"}}