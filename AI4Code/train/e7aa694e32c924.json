{"cell_type":{"34896d5b":"code","4086bba7":"code","b3bd8756":"code","0fe48df2":"code","13b0c16e":"code","ad0849ff":"code","f1345efd":"code","4ec8b39f":"code","3717c4b4":"code","632ddaea":"code","4152f456":"code","8462d8a6":"code","8118876a":"code","8a2bba91":"code","32562036":"code","411b8d96":"code","7349af74":"code","5e7abfa6":"code","70c39e28":"code","6ec64284":"code","a06de8bd":"code","cdc81083":"code","7dec6883":"code","52dcd107":"code","ee961e88":"code","1115d16d":"code","49d76eaf":"code","f389d677":"code","5a38ee29":"code","4695a504":"code","383c8d92":"code","0c972157":"code","f5526505":"code","838f65b2":"code","d4e6006d":"code","5ad569a4":"code","5b2f5f61":"code","1cd4cdc7":"code","de9f07b8":"markdown","a9b5ffdb":"markdown","795e409a":"markdown","17700157":"markdown","a447334c":"markdown","1066b3c2":"markdown","be7fa179":"markdown","9ce8f2ed":"markdown","783c895e":"markdown","d9887353":"markdown","37c3909a":"markdown","6a6ce1d5":"markdown"},"source":{"34896d5b":"import pandas as pd\npd.set_option('display.max_columns', 500)\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","4086bba7":"df = pd.read_csv('..\/input\/otomobil.csv'\n                     , names=['symboling','normalized-losses','make','fuel-type'\n                              ,'aspiration','num-of-doors','body-style','drive-wheels'\n                              ,'engine-location','wheel-base','length','width','height'\n                              ,'curb-weight','engine-type','num-of-cylinders','engine-size'\n                              ,'fuel-system','bore','stroke','compression-ratio','horsepower'\n                              ,'peak-rpm','city-mpg','highway-mpg','price'])","b3bd8756":"df.head()","0fe48df2":"df.tail()","13b0c16e":"df.info() #Veriler hakk\u0131nda genel bir bilgi [veri tipi, eksik de\u011fer say\u0131s\u0131, sat\u0131r say\u0131s\u0131]","ad0849ff":"df.shape #rows and columns of data set \/ Data setimizin sat\u0131r ve s\u00fctun say\u0131s\u0131","f1345efd":"df.describe(include='all')\nx=df\ny=df.iloc[:,0]  \n#sembol s\u00fctununu y de\u011fi\u015fkenine at\u0131yoruz.","4ec8b39f":"y[:].value_counts()\n#Sembollerin temsil ettikleri araba say\u0131s\u0131.","3717c4b4":"y[:].astype(int).plot.hist();\n##Sembollerin temsil ettikleri araba say\u0131s\u0131 histogram g\u00f6sterimi. [0 ve 1 yo\u011funlukta]","632ddaea":"x=x.replace('?', np.nan)\n#Bo\u015f h\u00fccrelerin de\u011ferini global bir de\u011ferle dolduruyoruz.[NaN]","4152f456":"a=df[['symboling','height','wheel-base','length','price']]\nsns.pairplot(a, hue='symboling', size=2.5);\n#\u00d6zniteliklerin semboller cinsinden yo\u011funluklar\u0131n\u0131n pairplot g\u00f6sterimi.","8462d8a6":"data_corr=df.corr() #Korelasyon de\u011ferlerini data_corr de\u011fi\u015fkenine atad\u0131k.\ndata_corr #korelasyonlar\u0131 g\u00f6r\u00fcyoruz. semboling ve height de\u011ferleri k\u0131smende olsa korele diyebiliriz.\n#Daha g\u00fc\u00e7l\u00fc korelasyon de\u011ferleri var ancak bizim ilgilendi\u011fimiz k\u0131s\u0131m symboling.\n#daha ayr\u0131nt\u0131l\u0131 g\u00f6relim.","8118876a":"data_corr['symboling'].sort_values(ascending=False)\n#Semboling s\u00fctunu ile di\u011fer \u00f6zniteliklerin korelasyonlar\u0131n\u0131 g\u00f6r\u00fcyoruz. \n#En \u00e7ok korele olanlar wheel-base ve height \u00f6znitelikleri bizim i\u015fimize yarayacak","8a2bba91":"df['body-style'].value_counts().plot(kind='bar',color='r')\nplt.style.use('dark_background')\nplt.title(\"Car Type Density Chart\")\nplt.ylabel('Number of Vehicles')\nplt.style.use('dark_background')\nplt.xlabel('Car Types')\n#Araba tipi yo\u011funluklar\u0131n\u0131n g\u00f6sterimini yapt\u0131k. Sedan ve hatchback yo\u011funlukta.","32562036":"plt.figure(figsize=(10, 5))\nplt.style.use('dark_background')\nsns.countplot(x='make', data=df)\nplt.xticks(rotation='vertical')\nplt.title('Manufacturer')\nplt.show()\n#En \u00e7ok hangi arabalar sat\u0131l\u0131yor? sorusunun yan\u0131t\u0131 olan g\u00f6sterim. Toyota di\u011fer markalara g\u00f6re a\u00e7\u0131k\u00e7a daha \u00e7ok tercih ediliyor","411b8d96":"#Kay\u0131p de\u011ferlerin s\u00fctunun y\u00fczde ka\u00e7\u0131n\u0131 olu\u015fturdu\u011funu bulmak i\u00e7in tablo olu\u015fturduk.\ndef missing_values_table(df):\n        # Toplam kay\u0131p veri\n        mis_val = df.isnull().sum()\n        \n        # Eksik de\u011ferlerin y\u00fczdesini hesaplad\u0131k.\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Bu verileri bir tabloda g\u00f6stermek istiyoruz.\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Tablonun kolon isimlerini d\u00fczenleyelim.\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # B\u00fcy\u00fckten k\u00fc\u00e7\u00fc\u011fe y\u00fczdeleri s\u0131ralayarak yazd\u0131rmak istiyoruz.\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Kay\u0131p verilerle ilgili baz\u0131 verileri not olarak yazd\u0131r\u0131yoruz.[ka\u00e7 kolonda ka\u00e7 kay\u0131p veri var?]\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Tabloyu d\u00f6nd\u00fcr\u00fcyoruz.\n        return mis_val_table_ren_columns","7349af74":"missing_values = missing_values_table(x)\nmissing_values.head()#ilk 5 de\u011feri g\u00f6r\u00fcyoruz tabloda.","5e7abfa6":"Q1 = x.quantile(0.25)\nQ3 = x.quantile(0.75)\nIQR = Q3-Q1\nprint(1.5*IQR)\n#\u00c7eyrekler \u00fczerinden IQR yi buduk. ","70c39e28":"print(\"Upper Limit\")\nprint(\"------------------------\")\nprint(Q1-IQR)\nprint(\"------------------------\")\nprint(\"Lower Limit\")\nprint(\"------------------------\")\nprint(Q3+IQR)\nprint(\"------------------------\")\n#Upper ve Lower de\u011ferleri aras\u0131nda de\u011filse veriyi u\u00e7 de\u011fer olarak kabul ediyoruz.","6ec64284":"x = x[(x.price >= 0 ) & (x.price <=25212.0)]\nx.shape\n#U\u00e7 olan price de\u011ferlerini verilerimizden \u00e7\u0131kartt\u0131k.\n#205 ten 188 sat\u0131ra d\u00fc\u015ft\u00fc.","a06de8bd":"#Verilerimizin tip d\u00f6n\u00fc\u015f\u00fcm\u00fcn\u00fc yap\u0131yoruz.\nx['normalized-losses']=x['normalized-losses'].astype(str).astype(float)\nx['bore']=x['bore'].astype(str).astype(float)\nx['stroke']=x['stroke'].astype(str).astype(float)\nx['price']=x['price'].astype(str).astype(float)\nx['horsepower']=x['horsepower'].astype(str).astype(float)\nx['peak-rpm']=x['peak-rpm'].astype(str).astype(float)\n#bo\u015f de\u011ferleri ortalama de\u011ferlerle dolduruyoruz.\nx=x.fillna(x.mean())\n#Kap\u0131 say\u0131s\u0131 belli olmayan ara\u00e7lar\u0131 en \u00e7ok tekrar eden de\u011ferle dolduruyor.[4 kap\u0131l\u0131 olarak varsayd\u0131k.]\nx = x.fillna(df['num-of-doors'].value_counts().index[0])","cdc81083":"missing_values = missing_values_table(x)\nmissing_values.head()\n#Bo\u015f de\u011fer kontrol\u00fcn\u00fc tekrar yap\u0131yoruz metodumuzu kullanarak.","7dec6883":"x.dtypes.value_counts()\n#data type say\u0131lar\u0131n\u0131 g\u00f6rd\u00fck.","52dcd107":"make_symboling_table = pd.crosstab(index=x[\"make\"], \n                          columns=x[\"symboling\"])\n\n\nmake_symboling_table .plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)\n#Burada markalar\u0131n hangi sembol s\u0131n\u0131flar\u0131na dahil olduklar\u0131n\u0131[fiyat s\u0131n\u0131f\u0131] daha net g\u00f6r\u00fcyoruz.\n#Sembol tahmini yapaca\u011f\u0131m\u0131z i\u00e7in hangi arabalar\u0131n y\u00fcksek ba\u015far\u0131 ile s\u0131n\u0131fland\u0131r\u0131laca\u011f\u0131n\u0131 kestirebiliriz.\n#Bu bak\u0131mdan jaguar, porche, peugeot, volvo, saab,alfa-romero iyi bir se\u00e7enek olacakt\u0131r.","ee961e88":"make_symboling_table = pd.crosstab(index=x[\"drive-wheels\"], \n                          columns=x[\"symboling\"])\nmake_symboling_table .plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)\n\n#Arabalar\u0131n \u00e7eki\u015f tipine g\u00f6re hangi s\u0131n\u0131fa dahil oldukar\u0131n\u0131 g\u00f6r\u00fcyoruz. 4\u00e7eker arabalar\u0131n azl\u0131\u011f\u0131 dikkat \u00e7ekiyor.","1115d16d":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle_count = 0\n\n# S\u00fctunlar\u0131n \u00fczerinde geziyoruz.\nfor col in x:\n    if x[col].dtype == 'object':\n        # 2 veya daha az benzersiz kategori varsa\n        if len(list(x[col].unique())) <= 2:\n            # E\u011fitim verilerinin e\u011fitilmesi\n            le.fit(x[col])\n            # Hem e\u011fitim hem de test verilerini d\u00f6n\u00fc\u015ft\u00fcr\u00fcyoruz.\n            x[col] = le.transform(x[col])\n            # Ka\u00e7 s\u00fctunda d\u00f6n\u00fc\u015f\u00fcm yap\u0131ld\u0131\u011f\u0131n\u0131 tutuyoruz.\n            le_count += 1\n            \nprint('%d columns were label encoded.' % le_count)\n","49d76eaf":"x = pd.get_dummies(x)\n#D\u00f6n\u00fc\u015ft\u00fcr\u00fclen h\u00fccreleri 0-1(dummies) de\u011ferlerle dolduruyoruz.\nprint('Training Features shape: ', x.shape)\n#s\u00fctun say\u0131m\u0131z 26 dan 72ye \u00e7\u0131kt\u0131 d\u00f6n\u00fc\u015f\u00fcm i\u015fleminden sonra.","f389d677":"x.columns\ny=x.iloc[:,0] ","5a38ee29":"#Verilerimizi i\u015fleme haz\u0131r hale getirdikten sonra train ve test olarak ay\u0131r\u0131yoruz.\nfrom sklearn.model_selection import train_test_split  \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)","4695a504":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski')  \n#Dikkate al\u0131nacak kom\u015fu say\u0131s\u0131n\u0131 5 ve uzakl\u0131k metri\u011fi olarak minkowski'yi kulland\u0131k.\nclassifier.fit(x_train, y_train)","383c8d92":"y_pred = classifier.predict(x_test)  \n#x_test de\u011ferlerinin s\u0131n\u0131flar\u0131n\u0131 tahmin ettik.","0c972157":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score ","f5526505":"cm = confusion_matrix(y_test, y_pred)\nax= plt.subplot()\nsns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['-2','-1', '0','1','2','3']); ax.yaxis.set_ticklabels(['-2','-1', '0','1','2','3']);\n","838f65b2":"#S\u0131n\u0131fland\u0131rma ba\u015far\u0131s\u0131 d\u00fc\u015f\u00fck \u00e7\u0131kt\u0131. Bir \u00e7ok sebeple olabilir.\n#\u0130lk akla gelen sorun \u00e7o\u011fu araban\u0131n fiyat skalas\u0131n\u0131n geni\u015f olmas\u0131 ve buna ba\u011fl\u0131 olarak bir \u00e7ok s\u0131n\u0131fa dahil oldu\u011fu i\u00e7in \n#bir tahminde bulunmam\u0131z g\u00fc\u00e7le\u015fiyor.\n#Bir di\u011fer fakt\u00f6r dikkate alaca\u011f\u0131m\u0131z kom\u015fu say\u0131s\u0131n\u0131 yanl\u0131\u015f se\u00e7mi\u015f olma ihtimalimiz(5 tane olarak belirledik). Deneme yan\u0131lma \n#yaparak tahmin ba\u015far\u0131s\u0131n\u0131 g\u00f6zlemleyebilir ve se\u00e7imimizin ne derece do\u011fru oldu\u011funu bulabiliriz.\n#ACC kesin olarak y\u00fcksek \u00e7\u0131kmas\u0131n\u0131 istiyorsak b\u00fct\u00fcn arabalar\u0131 tahminlemek yerine dahil olduklar\u0131 s\u0131n\u0131f say\u0131s\u0131 daha az olan\n#spesifik markalar\u0131 se\u00e7ip onlar aras\u0131nda bir tahmin yapabiliriz. Sonu\u00e7lar daha iyi olacakt\u0131r.\nprint(\"ACC: \",accuracy_score(y_pred,y_test))","d4e6006d":"print(classification_report(y_test, y_pred)) ","5ad569a4":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier = KNeighborsClassifier(n_neighbors=2)  #kom\u015fu say\u0131s\u0131n\u0131 3 yapt\u0131k.\nclassifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)  \nfrom sklearn.metrics import classification_report, confusion_matrix  \ncm=confusion_matrix(y_test, y_pred)\nprint(classification_report(y_test, y_pred)) \n#Az da olsa kom\u015fu say\u0131s\u0131 ile oynay\u0131p tahmin ba\u015far\u0131s\u0131n\u0131 y\u00fckselttik. Yinede yetersiz.","5b2f5f61":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nx2=x[['price','height','make_peugot','make_volvo','make_subaru','make_alfa-romero','normalized-losses','wheel-base']]\nfrom sklearn.preprocessing import MinMaxScaler \nfrom sklearn.metrics import precision_score\n\nPS=0\nfor w in range (0,20):\n    x2_train, x2_test, y_train, y_test = train_test_split(x2, y, test_size=0.20)\n    scaler = MinMaxScaler()  \n    scaler.fit(x2)\n    x2_train = scaler.transform(x2_train)  \n    x2_test = scaler.transform(x2_test) \n\n    clf = KNeighborsClassifier(n_neighbors = 3)\n    cm=confusion_matrix(y_test, y_pred)\n    classifier.fit(x2_train, y_train)\n    y_pred = classifier.predict(x2_test)\n    PS=precision_score(y_test, y_pred, average='macro')+PS\n    \n    \nPS=PS\/20\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(cm)  \nprint ('Average precision: %0.2f' % PS)\nprint(classification_report(y_test, y_pred)) \n#Burada modelimizi 20 kere \u00e7al\u0131\u015ft\u0131r\u0131p farkl\u0131 e\u011fitim ve test verileriyle elde etti\u011fi accuracy de\u011ferlerini toplay\u0131p ortalamas\u0131n\u0131\n#ald\u0131k. K katmanl\u0131 \u00e7apraz do\u011frulama da kullan\u0131labilirdi bunun i\u00e7in. ","1cd4cdc7":"#G\u00f6r\u00fcl\u00fcyor ki ilk sonu\u00e7lardan sonra belirtti\u011fimiz gibi bir markan\u0131n fiyat skalas\u0131n\u0131nn geni\u015f olmas\u0131 onun tahmin edilebilirli\u011fini\n#d\u00fc\u015f\u00fcr\u00fcyor. Spesifik markalarla denedi\u011fimiz algoritmam\u0131z ba\u015far\u0131l\u0131 say\u0131labilecek sonu\u00e7lara ula\u015fmay\u0131 ba\u015fard\u0131.","de9f07b8":"![image.png](attachment:image.png)","a9b5ffdb":"![image.png](attachment:image.png)","795e409a":"#Ayr\u0131lan verileri normalle\u015ftiriyoruz.\n#veriler aras\u0131nda farkl\u0131l\u0131klar oldu\u011fu i\u00e7in, verileri tek bir d\u00fczen i\u00e7erisinde ele almak istiyoruz.\nfrom sklearn.preprocessing import MinMaxScaler  \nscaler = MinMaxScaler()  \nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)  \nx_test = scaler.transform(x_test)\nprint(x_test)","17700157":"**Sonu\u00e7lar\u0131 iyile\u015ftirmeye \u00e7al\u0131\u015fal\u0131m. \u0130lk olarak dikkate al\u0131nan kom\u015fu say\u0131s\u0131 ile oynayal\u0131m.**","a447334c":"**LabelEncoder** kategorik de\u011fi\u015fkenlerin tahminlerde kullan\u0131labilmesi i\u00e7in makine \u00f6\u011frenmesi algoritmalar\u0131na uygun bir forma\nd\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc\u011f\u00fc bir s\u00fcre\u00e7te kullan\u0131lmaktad\u0131r.\nVeriyi birebir say\u0131salla\u015ft\u0131rmaya yarar. \nYani kategorik her veriye unique say\u0131sal bir de\u011fer atar.","1066b3c2":"S\u0131n\u0131fland\u0131rmada (classification) kullan\u0131lan bu algoritmaya g\u00f6re s\u0131n\u0131fland\u0131rma s\u0131ras\u0131nda \u00e7\u0131kar\u0131lan \n\u00f6zelliklerden (feature extraction), s\u0131n\u0131fland\u0131r\u0131lmak istenen yeni bireyin daha  \u00f6nceki bireylerden k tanesine yak\u0131nl\u0131\u011f\u0131na \nbak\u0131lmas\u0131d\u0131r. Bu yak\u0131nl\u0131\u011fa g\u00f6re bir s\u0131n\u0131fa atanmas\u0131 i\u015flemidir.\nK: Dikkate al\u0131nacak kom\u015fu say\u0131s\u0131, \nDistance: Kom\u015fular uzakla\u015ft\u0131k\u00e7a s\u0131n\u0131fland\u0131rmaya etkilerinin de azalt\u0131lmas\u0131 amac\u0131yla uygulanan bir yakla\u015f\u0131m, \nkom\u015fular\u0131n etkilerinin uzakl\u0131klar\u0131na g\u00f6re a\u011f\u0131rl\u0131kland\u0131r\u0131lmas\u0131d\u0131r.","be7fa179":"![image.png](attachment:image.png)","9ce8f2ed":"1. **symboling**: -3, -2, -1, 0, 1, 2, 3. #Markalar\u0131 Fiyatlar\u0131na G\u00f6re S\u0131n\u0131fland\u0131r\u0131lmas\u0131\n1. **normalized-losses:** continuous from 65 to 256. #Sigorta \u00d6demelerinin Kabul Edilebilir De\u011ferleri\n1. **make**: alfa-romero, audi, bmw, chevrolet, dodge, honda, #Markalar\u0131m\u0131z\n                        * isuzu, jaguar, mazda, mercedes-benz, mercury,\n                        * mitsubishi, nissan, peugot, plymouth, porsche,\n                        * renault, saab, subaru, toyota, volkswagen, volvo\n1. **fuel-type**: diesel, gas. #Ara\u00e7 Yak\u0131t T\u00fcr\u00fc\n1. **aspiration:** std, turbo. #Enjeksiyon t\u00fcr\u00fc\n1. **num-of-doors:** four, two. #Kap\u0131 Say\u0131m\u0131z\n1. **body-style:** hardtop, wagon, sedan, hatchback, convertible. # Ara\u00e7 Tipi\n1. **drive-wheels**: 4wd, fwd, rwd. # 4 \u00c7eker \u00d6nden 2 \u00c7eki\u015fli Ve Arkadan \u0130ti\u015fli Kategorisi\n1. **engine-location**: front, rear. #Motor Konumu\n1. **wheel-base**: continuous from 86.6 120.9.\n1. **length**: continuous from 141.1 to 208.1. #Uzunluk\n1. **width**: continuous from 60.3 to 72.3. #Geni\u015flik\n1. **height**: continuous from 47.8 to 59.8. #Y\u00fckseklik\n1. **curb-weight**: continuous from 1488 to 4066. #Ara\u00e7 Bo\u015f A\u011f\u0131rl\u0131\u011f\u0131\n1. **engine-type**: dohc, dohcv, l, ohc, ohcf, ohcv, rotor. #Motor T\u00fcrleri\n1. **num-of-cylinders**: eight, five, four, six, three, twelve, two. #Ara\u00e7 Silindir Say\u0131s\u0131\n1. **engine-size**: continuous from 61 to 326. #Motor Hacmi\n1. **fuel-system**: 1bbl, 2bbl, 4bbl, idi, mfi, mpfi, spdi, spfi. #Yak\u0131t Sistemi\n1. **bore**: continuous from 2.54 to 3.94. #Silindir \u00c7ap\n1. **stroke**: continuous from 2.07 to 4.17. #Silindir Derinlik\n1. **compression-ratio**: continuous from 7 to 23. #Yak\u0131t S\u0131k\u0131\u015ft\u0131rma Oran\u0131\n1. **horsepower**: continuous from 48 to 288. #Beygir G\u00fcc\u00fc\n1. **peak-rpm:** continuous from 4150 to 6600. #Motor Devir Say\u0131s\u0131 Max\n1. **city-mpg:** continuous from 13 to 49. #Miles Per Galon \u015eehir \u0130\u00e7inde Mil Ba\u015f\u0131na Yak\u0131lan Yak\u0131t Galon Say\u0131s\u0131\n1. **highway-mpg**: continuous from 16 to 54. #Uzun Yol Yak\u0131t T\u00fcketimi\n1. **price**: continuous from 5118 to 45400. # Ve Fiyat\u0131m\u0131z.","783c895e":"Uzakl\u0131k \u00f6l\u00e7\u00fctleri olarak, Minkowski, \u00d6klid, Manhattan, Chebyschev ve Dilca uzakl\u0131\u011f\u0131 kullan\u0131lmaktad\u0131r.Minkowski uzakl\u0131\u011f\u0131, \n\u00d6klid uzay\u0131nda tan\u0131ml\u0131 bir dizidir. S\u0131n\u0131fland\u0131rma, k\u00fcmeleme gibi makine \u00f6\u011frenmesi, veri madencili\u011fi uygulamalar\u0131nda s\u0131kl\u0131kla \nkullan\u0131lan \u00d6klid uzakl\u0131\u011f\u0131, Manhattan uzakl\u0131\u011f\u0131 gibi uzakl\u0131k \u00f6l\u00e7\u00fctlerinin genelle\u015ftirilmi\u015f halidir. ","d9887353":"![image.png](attachment:image.png)","37c3909a":"Accuracy = TP+TN\/TP+FP+FN+TN\n\nPrecision (PPV) -precision , do\u011fru tahmin edilen pozitif g\u00f6zlemlerin toplam tahmini pozitif g\u00f6zlemlere oran\u0131d\u0131r.. \nPrecision = TP\/TP+FP\n\nRecall (Sensitivity) - Recall, do\u011fru tahmin edilen pozitif g\u00f6zlemlerin ger\u00e7ek s\u0131n\u0131ftaki t\u00fcm g\u00f6zlemlere oran\u0131d\u0131r \nRecall = TP\/TP+FN\n\nF1 score - Yukar\u0131daki bu tan\u0131mlar \u0131\u015f\u0131\u011f\u0131nda, F1 skoru, bu de\u011ferlerin harmonik ortalamas\u0131d\u0131r.\nF1 Score = 2(Recall Precision) \/ (Recall + Precision)","6a6ce1d5":"![image.png](attachment:image.png)"}}