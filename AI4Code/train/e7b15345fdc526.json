{"cell_type":{"d8a77f60":"code","95a545b9":"code","9ad0858d":"code","46474821":"code","c7199d0d":"code","26195a35":"code","47dac664":"code","f74008e2":"code","92f48cf7":"code","367fc7ff":"code","c10ae1f8":"code","707dafc4":"code","9faf8368":"code","ea54809f":"code","95e5eae2":"code","70dfb38c":"code","638a4590":"code","39281091":"code","c3153e2c":"code","db7b3041":"code","2cf4f708":"code","5e41c31a":"code","e39c863b":"code","2fd5c834":"code","5046d4db":"code","863d119e":"code","78748bc7":"code","b0d43c67":"code","0781d985":"code","df0958f8":"code","a716a9b3":"code","1e22e964":"code","58258ebe":"code","c23a491c":"code","7b3fd408":"code","d77dffa7":"code","d354cda5":"code","5a56daaa":"code","e7611db1":"code","a296b57d":"code","0e71b98a":"code","73a6797f":"code","1c5d1dd7":"code","b30471f5":"code","0a7eca08":"markdown","6e159757":"markdown","17507ac1":"markdown","ac3c4913":"markdown","d563a6ed":"markdown","c28a0f21":"markdown","83e8b4a0":"markdown","2793f67b":"markdown","622b503e":"markdown","4c64fcc6":"markdown","3120133a":"markdown","8c0fd945":"markdown","60b05b90":"markdown","e96e3122":"markdown","9938ed5c":"markdown","db1286eb":"markdown","b9b3a374":"markdown"},"source":{"d8a77f60":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","95a545b9":"DATASET_PATH  = '..\/input\/ashrae-energy-prediction\/'","9ad0858d":"data = pd.read_csv(DATASET_PATH+'train.csv')\n","46474821":"buildingData = pd.read_csv(DATASET_PATH+'building_metadata.csv')","c7199d0d":"buildingData.isnull().sum()","26195a35":"data = data.merge(buildingData,on = 'building_id',how = 'left')","47dac664":"data = data.drop(['year_built','floor_count'],axis = 1)","f74008e2":"#DATA_PATH = \"D:Study\/Machine Learning\/ML Project\/\"\nweather_train = pd.read_csv(DATASET_PATH + 'weather_train.csv')\nweather_test  = pd.read_csv(DATASET_PATH + 'weather_test.csv')","92f48cf7":"import datetime as dt\nframes = [weather_train,weather_test]\nweather_data = pd.concat(frames)\ndel weather_train\ndel weather_test","367fc7ff":"data = data.merge(weather_data, on=['site_id', 'timestamp'], how='left')\n","c10ae1f8":"data[\"timestamp\"] = pd.to_datetime(data[\"timestamp\"])\ndata[\"day\"]       = data[\"timestamp\"].dt.day\ndata[\"hour\"]      = data[\"timestamp\"].dt.hour\ndata[\"week\"]      = data[\"timestamp\"].dt.weekday\ndata[\"month\"]     = data[\"timestamp\"].dt.month\ndata[\"year\"]      = data[\"timestamp\"].dt.year\n#data              = data.drop(\"timestamp\", axis = 1)\n#del weather_data","707dafc4":"del frames","9faf8368":"data.isnull().sum()","ea54809f":"data = data.drop(['cloud_coverage','wind_direction','sea_level_pressure'],axis=1)\ndata","95e5eae2":"data['air_temperature'] = data['air_temperature'].fillna(data['air_temperature'].mean())\ndata['wind_speed'] = data['wind_speed'].fillna(data['wind_speed'].mean())\ndata['dew_temperature'] = data['dew_temperature'].fillna(data['dew_temperature'].mean())\ndata['precip_depth_1_hr'] = data['precip_depth_1_hr'].fillna(data['precip_depth_1_hr'].mean())","70dfb38c":"data.describe()","638a4590":"data['meter_reading'] = [j*0.2931 if i == 0 else j for i,j in zip(data['site_id'],data['meter_reading'])]\ndata","39281091":"mask1 = data[\"meter\"] == 0\nmask2 = data[\"meter_reading\"] > 40000\nmask = np.logical_and(mask1, mask2)\nprint(data.shape)\ndata[mask][\"meter_reading\"] = data[mask1][\"meter_reading\"].mean()","c3153e2c":"mask1 = data[\"meter\"] == 0\nmask2 = data[\"meter_reading\"] > 40000\nmask = np.logical_and(mask1, mask2)\nprint(data.shape)\ndata[mask][\"meter_reading\"] = data[mask1][\"meter_reading\"].mean()","db7b3041":"mask1 = data[\"meter\"] == 3\nmask2 = data[\"meter_reading\"] > 140000\nmask = np.logical_and(mask1, mask2)\nprint(data.shape)\ndata[mask][\"meter_reading\"] = data[mask1][\"meter_reading\"].mean()\nprint(data.shape)\ndel mask1\ndel mask2","2cf4f708":"from sklearn.preprocessing import LabelEncoder","5e41c31a":"le = LabelEncoder()\ndata['primary_use'] = le.fit_transform(data['primary_use'])","e39c863b":"data = data.drop('timestamp',axis = 1)","2fd5c834":"testData = pd.read_csv(DATASET_PATH+'test.csv')","5046d4db":"\ntestData = testData.merge(buildingData, on='building_id', how='left')\ntestData = testData.merge(weather_data, on=['site_id', 'timestamp'], how='left')\ntestData","863d119e":"testData = testData.drop(['row_id','year_built','floor_count','cloud_coverage','sea_level_pressure','wind_direction'],axis=1)","78748bc7":"del weather_data\ndel buildingData","b0d43c67":"testData[\"timestamp\"] = pd.to_datetime(testData[\"timestamp\"])\ntestData[\"day\"]       = testData[\"timestamp\"].dt.day\ntestData[\"hour\"]      = testData[\"timestamp\"].dt.hour\ntestData[\"week\"]      = testData[\"timestamp\"].dt.weekday\ntestData[\"month\"]     = testData[\"timestamp\"].dt.month\ntestData[\"year\"]      = testData[\"timestamp\"].dt.year\ntestData              = testData.drop(\"timestamp\", axis = 1)\n","0781d985":"testData['air_temperature'] = testData['air_temperature'].fillna(testData['air_temperature'].mean())\ntestData['wind_speed'] = testData['wind_speed'].fillna(testData['wind_speed'].mean())\ntestData['dew_temperature'] = testData['dew_temperature'].fillna(testData['dew_temperature'].mean())\ntestData['precip_depth_1_hr'] = testData['precip_depth_1_hr'].fillna(testData['precip_depth_1_hr'].mean())","df0958f8":"testData","a716a9b3":"testData['primary_use'] = le.fit_transform(testData['primary_use'])","1e22e964":"from sklearn.linear_model import LinearRegression","58258ebe":"x_train = data[['building_id','meter','primary_use','square_feet','air_temperature','dew_temperature','precip_depth_1_hr','wind_speed','day','hour','week','month','year']]\ny_train = data['meter_reading']\n#x_test = testData\nx_train","c23a491c":"y_train","7b3fd408":"model = LinearRegression()","d77dffa7":"model.fit(x_train.values,y_train.values)","d354cda5":"from sklearn.svm import SVR","5a56daaa":"svrModel = SVR(C = 5)\nsvrModel.fit(x_train.values,y_train.values)","e7611db1":"from sklearn.linear_model import SGDRegressor\n","a296b57d":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\n","0e71b98a":"reg = make_pipeline(StandardScaler(),\n                     SGDRegressor(max_iter=1000, tol=1e-3))\nreg.fit(x_train.values, y_train.values)","73a6797f":"reg.score(x_train.values, y_train.values)","1c5d1dd7":"from sklearn.linear_model import Ridge\nclf = Ridge(alpha=1.0)\nclf.fit(x_train.values, y_train.values)\n","b30471f5":"clf.score(x_train.values, y_train.values)","0a7eca08":"# Fixing the site_id 0 error","6e159757":"# Algorithms Section","17507ac1":"# Deleting useless variables to reduce memory usage","ac3c4913":"# Removing timestamp to reduce features size","d563a6ed":"# Merging building data with training data","c28a0f21":"# Merging data with weather data","83e8b4a0":"# Preparing X train and Y train for pridection","2793f67b":"# Filling nulls","622b503e":"# Removing Outliers","4c64fcc6":"> **we will do the same operations that we did on training data**","3120133a":"# Test data section","8c0fd945":"# Removing unimportant features","60b05b90":"# **We could not use test data because of memory leak**> > ","e96e3122":"# Converting primary use to numiric","9938ed5c":"# Concatenating weather train and test data","db1286eb":"**Removing features having a lot of nulls**","b9b3a374":"# Converting timestamp feature to datetime to extract another features like day,month,hour,and year"}}