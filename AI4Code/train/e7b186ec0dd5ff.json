{"cell_type":{"f459baa2":"code","31f4a221":"code","8529871a":"code","60faae85":"code","d98a6728":"code","7f204758":"code","fc5bbbaf":"code","6f7daa9f":"code","72fd3dc8":"code","24d6a87f":"code","695e90d0":"code","6942f5db":"code","3febfbcc":"code","27ee4335":"code","495ac296":"code","2fc0fd7e":"code","cf206523":"code","8531ee57":"code","35f1a659":"code","8445adec":"code","34f8fbb6":"code","c796ebbb":"code","fe28fa84":"code","70b8d043":"code","fb5a1f5e":"code","f4d4ea41":"code","0ef414d6":"code","7af20d0a":"code","3a1157c5":"code","dc8ee2d2":"code","95a816ba":"code","989541b7":"code","0fc314dc":"code","7b8098c1":"code","4b9b853c":"code","e84b3237":"code","b0a9b940":"code","a561f433":"code","b8f02eef":"code","b6e6d8b6":"code","abad56da":"code","7c2a7620":"code","af7d3e0b":"code","79b9bf56":"code","3dc8e02e":"code","f38b8063":"code","054209c1":"code","f5b705a5":"code","c353f0ab":"code","97503801":"code","e9861d14":"code","cd77d31d":"code","5d05ca21":"code","e09adce2":"code","7dde1fd9":"code","c91b18dc":"code","d753f682":"markdown","0593d14b":"markdown","51715c63":"markdown","f4bb41ae":"markdown","86fa8983":"markdown","91dba3fe":"markdown","5eabf96b":"markdown","8683e41c":"markdown","d48d8aeb":"markdown","01d2720d":"markdown","83aa47df":"markdown","c27746d0":"markdown","c764bdfd":"markdown","750564f8":"markdown","fbfa1f3a":"markdown","c51125e0":"markdown","adb8e20f":"markdown","afc93451":"markdown","8e3242ac":"markdown","04827f2e":"markdown","f5bf4647":"markdown","bcfe0cfa":"markdown","f2282e79":"markdown","9c0ca693":"markdown","87bc2e57":"markdown","332ae0d1":"markdown","2bc5d820":"markdown","1a7d75cd":"markdown","c8ab6bc9":"markdown","6e2cbbdd":"markdown","52d7db28":"markdown","ef72c5f3":"markdown","faa57c01":"markdown","32e7862a":"markdown","9b57774a":"markdown","503445af":"markdown","c1e94bc8":"markdown","1762aaf4":"markdown","bfdc52c7":"markdown","7edb4b31":"markdown","61bfdc96":"markdown"},"source":{"f459baa2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\ndatabase = \"..\/input\/database.sqlite\"  #Insert path here\n","31f4a221":"conn = sqlite3.connect(database)\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table'\n                     \"\"\", conn)\ntables","8529871a":"leagues = pd.read_sql(''' SELECT * \n                          FROM League\n                      ''', conn)\nleagues","60faae85":"players = pd.read_sql(''' SELECT * \n                          FROM Player\n                      ''', conn)\nplayers.head(10)","d98a6728":"teams = pd.read_sql(''' SELECT * \n                        FROM Team\n                        WHERE team_fifa_api_id < 20\n                        ORDER BY team_fifa_api_id\n                    ''', conn)\nteams","7f204758":"p_league = pd.read_sql(''' WITH premier_league AS \n                        (\n                        SELECT * \n                        FROM Team\n                        WHERE team_fifa_api_id < 20\n                        )\n                        \n                        SELECT *\n                        FROM premier_league\n                        ORDER BY team_fifa_api_id\n                    ''', conn)\np_league","fc5bbbaf":"exclude_specific_teams = pd.read_sql(''' WITH premier_league AS \n                        (\n                        SELECT * \n                        FROM Team\n                        WHERE team_fifa_api_id < 20\n                        )\n                        \n                        SELECT *\n                        FROM premier_league\n                        WHERE team_long_name NOT IN ('Arsenal', 'Liverpool', 'Chelsea')\n                    ''', conn)\nexclude_specific_teams","6f7daa9f":"one_word_teams = pd.read_sql(''' WITH premier_league AS \n                        (\n                        SELECT * \n                        FROM Team\n                        WHERE team_fifa_api_id < 20\n                        )\n                        \n                        SELECT *\n                        FROM premier_league\n                        WHERE team_long_name NOT LIKE '% %'\n                    ''', conn)\none_word_teams","72fd3dc8":"not_united_teams = pd.read_sql(''' WITH premier_league AS \n                        (\n                        SELECT * \n                        FROM Team\n                        WHERE team_fifa_api_id < 20\n                        )\n                        \n                        SELECT *\n                        FROM premier_league\n                        WHERE team_long_name NOT LIKE '%united%'\n                    ''', conn)\nnot_united_teams","24d6a87f":"players = pd.read_sql(''' SELECT * \n                          FROM Player\n                      ''', conn)\nplayers.head()","695e90d0":"tall_and_short_players = pd.read_sql(''' SELECT * \n                                         FROM Player\n                                         WHERE height > 200 OR height < 170\n                                     ''', conn)\ntall_and_short_players.head()","6942f5db":"tall_or_young_and_short_players = pd.read_sql(''' SELECT player_name, birthday, height   \n                                                  FROM Player\n                                                  WHERE height > 200 OR (height < 170 AND birthday > '1996')\n                                              ''', conn)\ntall_or_young_and_short_players","3febfbcc":"one_plus_two = pd.read_sql (''' SELECT 1+2 ''', conn)\none_plus_two","27ee4335":"one_plus_two = pd.read_sql (''' SELECT 1+2 AS Addition''', conn)\none_plus_two","495ac296":"five_minus_2 = pd.read_sql (''' SELECT 5 - 2 AS Substraction''', conn)\nfive_minus_2","2fc0fd7e":"five_times_2 = pd.read_sql (''' SELECT 5 * 2 AS Multiplication''', conn)\nfive_times_2","cf206523":"five_divide_by_2 = pd.read_sql (''' SELECT 5 \/ 2 AS Division''', conn)\nfive_divide_by_2","8531ee57":"five_divide_by_2_point_zero = pd.read_sql (''' SELECT 5 \/ 2.0 AS Division''', conn)\nfive_divide_by_2_point_zero","35f1a659":"five_modulo_2 = pd.read_sql (''' SELECT 5 % 2 AS Modulo''', conn)\nfive_modulo_2","8445adec":"players_power = pd.read_sql(''' SELECT player_name, height, weight, height + weight AS power  \n                                FROM Player\n                            ''', conn)\nplayers_power.head()","34f8fbb6":"players_power = pd.read_sql(''' SELECT player_name, height, weight, (0.7 * height) + (0.3 * weight) AS power  \n                                FROM Player\n                                ORDER BY power DESC\n                            ''', conn)\nplayers_power.head()","c796ebbb":"hello_world = pd.read_sql(''' SELECT 'Hello ' || 'World' AS expression\n                          ''', conn)\nhello_world","fe28fa84":"team_attributes = pd.read_sql(''' SELECT * \n                                  FROM Team_Attributes\n                              ''', conn)\nteam_attributes.head()","70b8d043":"string_concat = pd.read_sql(''' SELECT team_fifa_api_id, buildUpPlaySpeedClass || ' ' || buildUpPlayDribblingClass || ' ' || buildUpPlayPassingClass\n                                AS Speed_Dripling_Passing  \n                                FROM Team_Attributes\n                            ''', conn)\nstring_concat.head()","fb5a1f5e":"string_int_concat = pd.read_sql(''' SELECT team_fifa_api_id, buildUpPlaySpeedClass || ' ' || buildUpPlaySpeed\n                                    AS Speed_Class_and_Values  \n                                    FROM Team_Attributes\n                                ''', conn)\nstring_int_concat.head()","f4d4ea41":"string_int_concat = pd.read_sql(''' SELECT team_fifa_api_id, buildUpPlaySpeedClass || ' ' || buildUpPlaySpeed\n                                    AS Speed_Class_and_Values  \n                                    FROM Team_Attributes\n                                    ORDER BY team_fifa_api_id, Speed_Class_and_Values \n                                ''', conn)\nstring_int_concat.head(10)","0ef414d6":"distinct_speed_classes = pd.read_sql(''' SELECT DISTINCT buildUpPlaySpeedClass\n                                         FROM Team_Attributes\n                                     ''', conn)\ndistinct_speed_classes","7af20d0a":"distinct_speed_classes_and_team_id = pd.read_sql(''' SELECT DISTINCT buildUpPlaySpeedClass, team_fifa_api_id\n                                                     FROM Team_Attributes\n                                                 ''', conn)\ndistinct_speed_classes_and_team_id.head(10)","3a1157c5":"group_by_speed_classes = pd.read_sql(''' SELECT buildUpPlaySpeedClass, COUNT(buildUpPlaySpeed) AS count\n                                         FROM Team_Attributes\n                                         GROUP BY buildUpPlaySpeedClass\n                                     ''', conn)\ngroup_by_speed_classes","dc8ee2d2":"null_dribling = pd.read_sql(''' SELECT DISTINCT team_fifa_api_id, buildUpPlayDribblingClass, buildUpPlayDribbling\n                                FROM Team_Attributes\n                                WHERE buildUpPlayDribbling IS NULL\n                            ''', conn)\nnull_dribling.head(10)","95a816ba":"not_null_dribling = pd.read_sql(''' SELECT DISTINCT team_fifa_api_id, buildUpPlayDribblingClass, buildUpPlayDribbling\n                                    FROM Team_Attributes\n                                    WHERE buildUpPlayDribbling IS NOT NULL\n                                ''', conn)\nnot_null_dribling.head(10)","989541b7":"empty_dribling = pd.read_sql(''' SELECT DISTINCT team_fifa_api_id, buildUpPlayDribblingClass, buildUpPlayDribbling\n                                 FROM Team_Attributes\n                                 WHERE buildUpPlayDribbling = ' '\n                             ''', conn)\nempty_dribling.head(10)","0fc314dc":"empty_null_dribling = pd.read_sql(''' SELECT DISTINCT team_fifa_api_id, buildUpPlayDribblingClass, buildUpPlayDribbling\n                                      FROM Team_Attributes\n                                      WHERE buildUpPlayDribbling = ' ' OR buildUpPlayDribbling IS NULL\n                                  ''', conn)\nempty_null_dribling.head(10)","7b8098c1":"team_attributes = pd.read_sql(''' SELECT *\n                                  FROM Team_Attributes\n                              ''', conn)\nteam_attributes.head()","4b9b853c":"case_ = pd.read_sql(''' SELECT team_api_id, buildUpPlayDribbling, buildUpPlayDribblingClass, \n                                     CASE buildUpPlayDribblingClass\n                                         WHEN 'Little' THEN 'L'\n                                         WHEN 'Normal' THEN 'N'\n                                         ELSE 'O'\n                                     END AS class_name_that_I_created\n                        FROM Team_Attributes\n                     ''', conn)\ncase_.head()","e84b3237":"players = pd.read_sql(''' SELECT * \n                          FROM Player\n                      ''', conn)\nplayers.head()","b0a9b940":"players_height_class = pd.read_sql(''' SELECT player_name, height,\n                                            CASE\n                                                WHEN height < 170.00 THEN 'Short'\n                                                WHEN height BETWEEN 170.00 AND 185.00 THEN 'Medium'\n                                                WHEN height > 185.00 THEN 'Tall'    \n                                            END AS height_class\n                                       FROM Player\n                                   ''', conn)\nplayers_height_class.head(10)","a561f433":"sum_weight = pd.read_sql(''' SELECT SUM(weight) AS total_weight\n                             FROM Player\n                         ''', conn)\nsum_weight.head()","b8f02eef":"young_weight = pd.read_sql(''' SELECT SUM(weight) AS young_weight\n                               FROM Player\n                               WHERE birthday > 1996\n                           ''', conn)\nyoung_weight.head()","b6e6d8b6":"young_AVG_weight = pd.read_sql(''' SELECT AVG(weight) AS young_avg_weight\n                                   FROM Player\n                                   WHERE birthday > 1996\n                               ''', conn)\nyoung_AVG_weight.head()","abad56da":"count_young = pd.read_sql(''' SELECT COUNT(id) AS Count_Youngs\n                                     FROM Player\n                                     WHERE birthday > 1996\n                                 ''', conn)\ncount_young.head()","7c2a7620":"count_all = pd.read_sql(''' SELECT COUNT(*) AS Count_All\n                              FROM Player\n                         ''', conn)\ncount_all.head()","af7d3e0b":"Shortest_player = pd.read_sql(''' SELECT MIN(height) AS shortest_player\n                                  FROM Player\n                              ''', conn)\nShortest_player.head()","79b9bf56":"Tallest_player = pd.read_sql(''' SELECT MAX(height) AS tallest_player\n                                 FROM Player\n                             ''', conn)\nTallest_player.head()","3dc8e02e":"rank_heights = pd.read_sql(''' SELECT id, height AS rank_heights\n                               FROM Player\n                               ORDER BY height DESC\n                             ''', conn)\nrank_heights.head()","f38b8063":"Tallest_and_Shortest_player = pd.read_sql(''' SELECT MAX(height) AS tallest_player, \n                                                     MIN(height) AS shortest_player\n                                              FROM Player\n                                          ''', conn)\nTallest_and_Shortest_player.head()","054209c1":"count_distinct_speed_classes = pd.read_sql(''' SELECT COUNT(DISTINCT buildUpPlaySpeedClass) \n                                               AS count_distint_classes\n                                               FROM Team_Attributes\n                                           ''', conn)\ncount_distinct_speed_classes","f5b705a5":"players = pd.read_sql(''' SELECT * \n                          FROM Player\n                      ''', conn)\nplayers.head()","c353f0ab":"player_attributes = pd.read_sql(''' SELECT * \n                                    FROM Player_Attributes\n                                ''', conn)\nplayer_attributes.head(3)","97503801":"join_player_and_player_attributes_tables = pd.read_sql(''' SELECT \n                                                                p.player_name, \n                                                                p.birthday, \n                                                                pa.overall_rating, \n                                                                pa.potential\n                                                            FROM Player AS p\n                                                            INNER JOIN Player_Attributes AS pa \n                                                            ON p.player_api_id = pa.player_api_id\n                                                       ''', conn)\njoin_player_and_player_attributes_tables.head()","e9861d14":"count_players_with_the_same_bitrhday = pd.read_sql(''' SELECT \n                                                            COUNT(p.player_name) AS number_of_players, \n                                                            strftime('%Y',p.birthday) AS \"year_born\"\n                                                        FROM Player AS p\n                                                        INNER JOIN Player_Attributes AS pa \n                                                        ON p.player_api_id = pa.player_api_id\n                                                        GROUP BY year_born\n                                                   ''', conn)\ncount_players_with_the_same_bitrhday.head(8)","cd77d31d":"count_players_with_the_same_bitrhday_and = pd.read_sql('''SELECT \n                                                            COUNT(p.player_name) AS number_of_players, \n                                                            strftime('%Y',p.birthday) AS \"year_born\",\n                                                            MIN(pa.overall_rating) AS min_overall_rating,\n                                                            MAX(pa.overall_rating) AS max_overall_rating, \n                                                            AVG(pa.overall_rating) AS average_overall_rating\n                                                        FROM Player AS p\n                                                        INNER JOIN Player_Attributes AS pa \n                                                        ON p.player_api_id = pa.player_api_id\n                                                        GROUP BY year_born\n                                                   ''', conn)\ncount_players_with_the_same_bitrhday_and.head()","5d05ca21":"num_of_players_same_year_min_overall_rating = pd.read_sql('''SELECT \n                                                                COUNT(p.player_name) AS number_of_players, \n                                                                strftime('%Y',p.birthday) AS \"year_born\"\n                                                            FROM Player AS p\n                                                            INNER JOIN Player_Attributes AS pa \n                                                            ON p.player_api_id = pa.player_api_id\n                                                            WHERE pa.overall_rating > 90\n                                                            GROUP BY year_born\n                                                       ''', conn)\nnum_of_players_same_year_min_overall_rating.head()","e09adce2":"count_young_players_with_the_same_bitrhday = pd.read_sql(''' SELECT \n                                                                COUNT(p.player_name) AS number_of_players, \n                                                                strftime('%Y',p.birthday) AS \"year_born\"\n                                                             FROM Player AS p\n                                                             INNER JOIN Player_Attributes AS pa \n                                                             ON p.player_api_id = pa.player_api_id\n                                                             GROUP BY year_born\n                                                             HAVING year_born > '1990'\n                                                          ''', conn)\ncount_young_players_with_the_same_bitrhday.head()","7dde1fd9":"import matplotlib.pyplot as plt\nx = count_players_with_the_same_bitrhday.year_born\ny = count_players_with_the_same_bitrhday.number_of_players\nplt.figure(figsize = (12,7))\nplt.plot(x,y)\nplt.xlabel('birthyear')\nplt.ylabel('number of players')\nplt.title('number of players born in the same year')\nplt.xticks(rotation = 90)\nplt.grid()\nplt.show()","c91b18dc":"x1 = count_players_with_the_same_bitrhday_and.year_born\ny1 = count_players_with_the_same_bitrhday_and.average_overall_rating\nplt.figure(figsize = (12,7))\nplt.plot(x1,y1)\nplt.xlabel('birthyear')\nplt.ylabel('average overall rating')\nplt.title('average overall rating of players born in the same year')\nplt.xticks(rotation = 90)\nplt.grid()\nplt.show()","d753f682":"**23. plot average overall rating of players born in the same year**","0593d14b":"**2. select 'League' and 'Player' tables**","51715c63":"EMPTY together with NULL values","f4bb41ae":"- Calculate players power = 0.7 x height + 0.3 x weight\n    \n    and sort them in descending order ","86fa8983":"**12.2**","91dba3fe":"4.3 team_long_name that does not contain the word 'united'","5eabf96b":"## ORDER BY\n\n**3. ORDER BY team_fifa_api_id**\n\n    Select (* namely everything)\n\n    From (Table_Name)\n\n    Where (give a condition)\n\n    Order by (order by the given feature)\n   ","8683e41c":"8.1 **concatenate** buildUpPlaySpeedClass, buildUpPlayDribblingClass, buildUpPlayPassingClass","d48d8aeb":"## WITH...AS\n\n**4. Create a new table called *premier_league*:** When the query is too long, we can create sub tables in order for decreasing the complexity of the query. Here it is not necessary, but just to show how it works\n\n   premier_league is a new table (so I can use it in SQL code)\n\n   p_league is a new dataframe","01d2720d":"**16. MIN and MAX**","83aa47df":"**19. Question : How many players do we have that were born in the same years **\n- **strftime() **\n\n    - start_date,strftime('%Y',start_date) as \"Year\",\n    - strftime('%m',start_date) as \"Month\",\n    - strftime('%d',start_date) as \"Day\"","c27746d0":"**9 Distinct or unique values in a column**","c764bdfd":"**22. plot number of players born in the same year**","750564f8":"**21. Same question in 19. But this time, what if we would like to select players born after 1990**\n- use **HAVING** ","fbfa1f3a":"**12. CASE**","c51125e0":"9..1  **DISTINCT: ** it finds distinct rows chosen by select keyword\n    \n   for example there is only one column with buildUpPlaySpeedClass = Balanced **AND** team_fifa_api_id = 434 ","adb8e20f":"**5. tall AND short players **","afc93451":"4.1. premier_league except Arsenal, Liverpool and Chelsea","8e3242ac":"**17. COUNT DISTINCT values**","04827f2e":"**Write your queries in this order **\n\n- SELECT *column1, column2, ...*\n- FROM *table name 1*\n- INNER JOIN *table name 2* ON *equation*\n- WHERE *condition*\n- GROUP BY *column1, column2,...*\n- HAVING *condition*\n- ORDER BY  *column1, column2, ...*  \n- LIMIT *n*","f5bf4647":"**7.2**. **give a name to a new column**\n\n   using AS ","bcfe0cfa":"## 24. SUMMARY","f2282e79":"**IS NOT NULL**","9c0ca693":"check also whether we have **EMPTY** places\n\nin this case we do not have any","87bc2e57":"**18. INNER JOIN (SECOND TABLE NAME) ON**\n\n   - it is used to join two tables by utilizing the same column in the two tables\n   - for example, both 'Player' table and 'Player_Attributes' table have 'player_api_id' column\n   - we can use this column to find the name of the player depicted in the 'Player_Attributes' table by joining the two table","332ae0d1":"**14. AVERAGE: AVG**","2bc5d820":"8.3 Order by using more than 1 feature","1a7d75cd":"4.2 in premier_league, find team_long_name without space charecter","c8ab6bc9":"- Calculate players power: height + weight","6e2cbbdd":"**8. String concatenating**","52d7db28":"**11. TO FIND NULL VALUES**\n\n   when we want to seach null values, we use **IS NULL** \n   \n   do not use:  = NULL ","ef72c5f3":"**15. COUNT**","faa57c01":"8.2 concatenating string and number","32e7862a":"**1. show tables**","9b57774a":"**20. Question: Number of players born in the same year, which have overall_rating greater than 80**","503445af":"## 7. Math in SQL","c1e94bc8":"**6. tall OR short and young players **","1762aaf4":"**12.1**","bfdc52c7":"**10 GROUP BY**","7edb4b31":"7.1. simple math operations","61bfdc96":"**13. SUM**"}}