{"cell_type":{"29056cf8":"code","7d3acbf5":"code","689551fb":"code","e75da9e3":"code","d5bb8660":"code","1fa3f171":"code","286ef8f1":"code","adb81e06":"code","e1498637":"code","c4dae574":"code","04e9cf22":"code","ae7b8079":"code","7e09c7d9":"code","29fa4f9e":"code","8ecf572c":"code","8f7b3a70":"code","9e93f962":"code","dd5d266a":"code","3b1f692f":"code","bfaa6a05":"code","cb1ee03b":"code","1130c124":"code","9e5cf65b":"code","0b8656d8":"code","cbfd35b7":"code","5dd280bf":"code","fa3e0b14":"code","1cc515b6":"code","c771a73f":"code","753e032d":"code","4afca1cb":"code","bfc37484":"code","de0b26a3":"code","50e1cf92":"code","fe3ed10b":"code","bb0b186e":"code","a7e2e025":"code","dd71cb19":"code","d0cd3c82":"code","df80b87e":"code","61fbf94e":"code","3b409a7d":"code","d71cac8a":"code","9f552e70":"code","90b9f8d5":"code","985f2a41":"markdown","8bfda64b":"markdown","db83a781":"markdown","b1327933":"markdown","f1af0bb6":"markdown","a80601e8":"markdown","c1498655":"markdown","8d65896c":"markdown","770c8a1d":"markdown","08baf2c2":"markdown","532758ef":"markdown","e5561002":"markdown","62e72b3c":"markdown","1d44b797":"markdown","7f29c4be":"markdown","68bd9777":"markdown","5d3f24fa":"markdown","3e357fd8":"markdown","cb46c459":"markdown","3d8344af":"markdown","2353da9e":"markdown","408e968b":"markdown","87e6d232":"markdown","bd329757":"markdown","087e4274":"markdown","2811936e":"markdown","2823def2":"markdown","de7886d8":"markdown","50e811a2":"markdown","42bd5e35":"markdown","215aec99":"markdown","e093d09e":"markdown"},"source":{"29056cf8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7d3acbf5":"df = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')","689551fb":"df","e75da9e3":"df.shape","d5bb8660":"df.info()","1fa3f171":"df.describe()","286ef8f1":"plt.figure(figsize=(18, 11))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(),center= 0, annot=True, linewidth=0.8, mask=matrix)\n\nplt.title('Features Correlation Heatmap', fontsize = 25)","adb81e06":"fig, axes = plt.subplots(2,2, figsize = (15,8))\nfig.suptitle('Useful Histograms', fontsize = 18)\n\nsns.histplot(data = df, x = 'Age', kde= True, bins = 25, ax = axes[0,0])\nsns.histplot(data = df, x = 'RestingBP', kde= True, bins = 25, ax = axes[0,1])\nsns.histplot(data = df, x = 'Oldpeak', kde= True, bins = 25, ax = axes[1,0])\nsns.histplot(data = df, x = 'Cholesterol', kde= True, bins = 25, ax = axes[1,1])","e1498637":"fig, axes = plt.subplots(3,2, figsize = (15,15))\nfig.suptitle('Useful Countplots', fontsize = 18)\n\nsns.countplot(data = df, x = 'HeartDisease', ax = axes[0,0])\nsns.countplot(data = df, x = 'Sex', ax = axes[0,1])\nsns.countplot(data = df, x = 'RestingECG', ax = axes[1,0])\nsns.countplot(data = df, x = 'ChestPainType', ax = axes[1,1])\nsns.countplot(data = df, x = 'ExerciseAngina', ax = axes[2,0])\nsns.countplot(data = df, x = 'FastingBS', ax = axes[2,1])","c4dae574":"fig, axes = plt.subplots(2,2, figsize = (16,10))\nfig.suptitle('Useful Boxplots', fontsize = 18)\n\nsns.boxplot(data = df, x = 'HeartDisease', y = 'Age', ax = axes[0,0])\nsns.boxplot(data = df, x = 'Sex', y = 'Age', ax = axes[0,1])\nsns.boxplot(data = df, x = 'HeartDisease', y = 'MaxHR', ax = axes[1,0])\nsns.boxplot(data = df, x = 'FastingBS', y = 'Cholesterol', ax = axes[1,1])","04e9cf22":"df.isnull().sum()","ae7b8079":"df[df['Oldpeak']<0]","7e09c7d9":"df.loc[df['Oldpeak']<0,'Oldpeak'] = df[df['Oldpeak']<0]['Oldpeak']*(-1)","29fa4f9e":"df[df['Oldpeak']<0]","8ecf572c":"len(df[df['Cholesterol'] == 0].index)\/len(df.index)","8f7b3a70":"for i in range(2):\n    \n    df.loc[(df['Cholesterol'] == 0) & (df.FastingBS == i), 'Cholesterol'] = df[(df['FastingBS'] == i) & (df['Cholesterol'] != 0)]['Cholesterol'].median()","9e93f962":"df[df['RestingBP'] == 0]","dd5d266a":"df.loc[df['RestingBP'] == 0, 'RestingBP'] = df['RestingBP'].median()","3b1f692f":"df = pd.get_dummies(df, drop_first=True)","bfaa6a05":"df.head()","cb1ee03b":"X = df.drop('HeartDisease', axis = 1)\ny = df['HeartDisease']","1130c124":"#libraries\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, plot_confusion_matrix\nfrom sklearn.metrics import plot_precision_recall_curve, plot_roc_curve","9e5cf65b":"def Eval_Report(model, y_pred):\n    \n    print('********* EVALUATION REPORT ********* \\n')\n    print('CONFUSION MATRIX: \\n')\n    print(confusion_matrix(y_test, y_pred))\n    print('\\nCLASSIFICATION REPORT: \\n')\n    print(classification_report(y_test, y_pred))\n    print('\\nPLOTS:\\n')\n    \n    plot_confusion_matrix(model, X_test, y_test)\n    plot_precision_recall_curve(model, X_test, y_test)\n    plot_roc_curve(model, X_test, y_test)","0b8656d8":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","cbfd35b7":"# libraries\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV","5dd280bf":"svm_pipe = Pipeline([('scaler', StandardScaler()), ('svm', SVC(random_state = 101))])","fa3e0b14":"param_grid = {'svm__C':[0.01,0.1,1, 10, 100, 1000],\n              'svm__gamma':['auto', 'scale', 1, 0.1, 0.01, 0.001, 0.0001],\n              'svm__kernel': ['rbf', 'poly'],\n              'svm__shrinking': [True, False]}\n\nsvm_grid = GridSearchCV(svm_pipe,param_grid, cv=5)","1cc515b6":"svm_grid.fit(X_train, y_train)","c771a73f":"svm_grid.best_params_","753e032d":"ypred_svm_grid= svm_grid.predict(X_test)","4afca1cb":"Eval_Report(svm_grid, ypred_svm_grid)","bfc37484":"from sklearn.tree import DecisionTreeClassifier","de0b26a3":"DT_pipe = Pipeline([('scaler', StandardScaler()), ('DT', DecisionTreeClassifier(random_state=101))])","50e1cf92":"param_grid= {'DT__max_features': ['auto','sqrt','log2'],\n            'DT__criterion': ['gini','entropy']}\n\nDT_grid=GridSearchCV(DT_pipe, param_grid, cv=5)","fe3ed10b":"DT_grid.fit(X_train,y_train)","bb0b186e":"DT_grid.best_params_","a7e2e025":"ypred_DT_grid = DT_grid.predict(X_test)","dd71cb19":"Eval_Report(DT_grid, ypred_DT_grid)","d0cd3c82":"from sklearn.ensemble import RandomForestClassifier","df80b87e":"RF_pipe = Pipeline([('scaler', StandardScaler()), ('RF', RandomForestClassifier(random_state=101))])","61fbf94e":"param_grid= {'RF__n_estimators':[64,70, 78, 88, 95, 100, 120],\n            'RF__bootstrap':[True, False],\n            'RF__max_features': ['auto','sqrt','log2']}\n\nRF_grid=GridSearchCV(RF_pipe, param_grid, cv=5)","3b409a7d":"RF_grid.fit(X_train, y_train)","d71cac8a":"RF_grid.best_params_","9f552e70":"ypred_RF_grid= RF_grid.predict(X_test)","90b9f8d5":"Eval_Report(RF_grid, ypred_RF_grid)","985f2a41":"so same as previous feature we are going to fill the zero values of resting blood pressure...","8bfda64b":"# 1) SVM","db83a781":"# Model Building","b1327933":"# Split the Dataset to Train and Test","f1af0bb6":"Next feature that need to be cleaned is **RestingBP**...\naccording to the histogram it has some zero values. we know that blood pressure can not possibly be zero...\nand according to the heatmap **RestingBP** is highly correlated with **Age**","a80601e8":"### Predict","c1498655":"no missing data","8d65896c":" %18.7 of our dataset have zero cholesterol.","770c8a1d":"### Evaluation","08baf2c2":"### Pipeline","532758ef":"# EDA (Exploratory Data Analysis)","e5561002":"### Predict","62e72b3c":"Ready to build some models","1d44b797":"# Import the Dataset","7f29c4be":"# Dataset Overview","68bd9777":"# Conclusion","5d3f24fa":"### Pipeline","3e357fd8":"**cholesterol** is highly correlated with **FastingBS** So it's better to guess the **cholesterol** of the patients according to their **FastingBS**...\n\nIn this section we use the **median** to keep the cholesterol distribution in each fasting blood sugar class unchanged. ","cb46c459":"# Necessary Libaries","3d8344af":"# 3) Random Forest","2353da9e":"### defining an evaluation function","408e968b":"| Variable | Definition | Guide |\n| --- | --- | --- |\n| Age | age of the patient | years |\n| Sex | sex of the patient | M: Male, F: Female |\n| ChestPainType | chest pain type | <br>TA: Typical Angina<br><br>ATA: Atypical Angina<br><br>NAP: Non-Anginal Pain<br><br>ASY: Asymptomatic<br> |\n| RestingBP | resting blood pressure | mm Hg |\n| Cholesterol | serum cholesterol | mm\/dl |\n| FastingBS | fasting blood sugar | 1: if FastingBS > 120 mg\/dl<br><br>0: otherwise |\n| RestingECG | resting electrocardiogram results | Normal: Normal<br><br>ST: having ST-T wave abnormality<br><br>LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria |\n| MaxHR | maximum heart rate achieved | Numeric value between 60 and 202 |\n| ExerciseAngina | exercise-induced angina | Y: Yes, N: No |\n| Oldpeak | oldpeak = ST | Numeric value measured in depression |\n| ST_Slope | the slope of the peak exercise ST segment | Up: upsloping, Flat: flat, Down: downsloping |\n| HeartDisease | output class | 1: heart disease, 0: Normal |","87e6d232":"according to Oldpeak histogram there are some negative data in the dataset... we need to deal with them cause oldpeak can not be negative...","bd329757":"### Evaluation","087e4274":"# 2) Decision Tree","2811936e":"### Pipeline","2823def2":"### Evaluation","de7886d8":"### Predict","50e811a2":"# Data Cleaning","42bd5e35":"# Categorical Features (Dummy variables)","215aec99":"Our SVM model is the best because with the same accuracy as Random Forest it has more AP and AUC...\n\nDecision Tree is the worst by far :)","e093d09e":"also in cholesterol histogram we can see there are some zero values that we want to deal with them."}}