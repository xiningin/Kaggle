{"cell_type":{"cc4650da":"code","a9e1e0a3":"code","43365b87":"code","e7b54b1e":"code","ecab7708":"code","77421570":"markdown","03d0692d":"markdown","39c4304e":"markdown"},"source":{"cc4650da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9e1e0a3":"indians = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes\/pima-indians-diabetes.data.csv\")\n\nindians.head(5)","43365b87":"#Column name based\nindians[\"triceps_sf_thickness\"]\n\n#Using .loc\nindians.loc[3]\nindians.loc[1,[\"bmi\",\"diabetes\"]]\n\n#Using .iloc\nindians.iloc[-2]\nindians.iloc[:,3]","e7b54b1e":"example_one = indians.drop(columns = [\"diastolic_blood_pressure\", \"bmi\", \"years_of_age\"])\nexample_one = indians.drop([2])\nexample_one.head(3)","ecab7708":"#Creating a new dataframe. Disregard unless you would like to know how to build your own dataframe, \n#for which you may contact one of the directors\nnew_data = {\"tribe\": [\"Pima Indian\",\"Pima Indian\", \"Pima Indian\"], \n            \"gender\": [\"Unknown\", \"Unknown\", \"Unknown\"]}\nframe_data = pd.DataFrame(new_data)\n\ndata = [indians, frame_data]\n\nappended_data = pd.concat(data, axis = 1)\n\nappended_data.head(5)","77421570":"### Reading and Visualizing a Dataset\n\nA dataset can be in either *xlsx (excel file)*, *csv (comma separated values)*, or *json (JavaScript object notation)*. We can read the data using pd.read_(\"filetype\").\n\n### Showing Dataset\nAfter importation, just write df.head(n) for first n rows or df.tail(n) for last n rows.","03d0692d":"### Adding\/Deleting Rows\/Columns\naxis =\n- 0 - add elements vertically\n- 1 - add elements horizontally\n\nDropping rows\/columns: \n- df.drop([\"row\"])\n- df.drop(columns = [\"column\"])\n\nAppending rows\/columns:\n- df.append(df2)\n    - If you get a TypeError, make sure to set ignoreIndex = False\n- df.concat(objs, axis = n)","39c4304e":"### Finding certain elements in Dataframe\nWe have two basic tools to select rows and columns from a dataframe\n- loc\n    - selects rows by label\/index\n    - selects rows with boolean\/conditional lookup\n- iloc\n    - integer-location based indexing (selection by position or index value)"}}