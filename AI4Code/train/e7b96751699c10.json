{"cell_type":{"dc49eee3":"code","c557a822":"code","3c566a05":"code","dcf3315b":"code","53c60e77":"code","4dd93829":"code","28b91bbc":"code","ddd9fe8e":"code","13a52668":"code","534020d1":"code","9bfe9779":"code","801fda53":"code","e3e32c3f":"code","40f88aa3":"code","4c080089":"code","845866ea":"code","831d1108":"code","ce92777d":"code","6ad236b0":"code","657be56e":"code","e1148df8":"code","b7e196e5":"code","66be3d48":"code","95b77309":"code","3b67762d":"code","d2d07952":"code","97efcaf1":"code","10e70df9":"code","2e923733":"code","fa39cea2":"code","78526bf7":"code","6acdf5e9":"code","9aeab45a":"code","fc62cb3e":"code","a7c89311":"code","934a31e0":"code","aa9ba30b":"code","7870b34e":"code","9c179adf":"code","fd098536":"code","a76fc394":"code","42f81a49":"code","42425979":"code","d838c6ef":"code","ee78f42e":"code","80c98308":"code","de9c7dab":"code","272fe8a4":"code","63176744":"code","321dbc49":"code","f7c9e2b1":"code","01ad19c9":"code","e802b838":"code","4d29cd99":"code","1445dee9":"code","702b2e75":"code","246ee068":"code","534e9668":"code","7a8bcc41":"code","f1be128e":"code","f43e5686":"code","6bb81c03":"code","8a8f1e18":"code","de6cd312":"code","6f9e3570":"code","df2529dc":"code","13685a9b":"code","b1affd21":"code","d5de4098":"code","59cedf68":"code","e43cb091":"code","d8c3afd6":"code","0919c249":"code","eb432aac":"code","64dca85d":"code","f949930f":"code","fbcd9e93":"code","683dcea3":"code","9e5f8534":"code","7646ccf7":"code","827809e6":"code","a3ee4fa5":"code","4ca7ec7f":"code","02917ba4":"code","60c1ed9b":"code","bb19817b":"code","246178d7":"code","988fd3d5":"code","aa463431":"code","1891c956":"code","6ddde8e0":"code","3dd8f7ff":"code","53e6ed03":"markdown","ba6e29b8":"markdown","c6707e16":"markdown","15f18a48":"markdown","0e433c15":"markdown","722252eb":"markdown","38ecbef9":"markdown","fdfd71e1":"markdown","91503a8f":"markdown","5570b0f5":"markdown","71f91fcd":"markdown","d56a59d1":"markdown","2fdd5bd6":"markdown","33a3b295":"markdown","007c604d":"markdown","7e127fa6":"markdown","65b997a1":"markdown","a324e8f3":"markdown","fd4af887":"markdown","9b7f0e49":"markdown","a871dcf6":"markdown","116974d3":"markdown","f4625af7":"markdown","2268c7ff":"markdown","c869672d":"markdown","b4c0adff":"markdown","b3871d5f":"markdown","6cc28069":"markdown","daea83df":"markdown","d20505aa":"markdown","aa1a9d23":"markdown","d49217dd":"markdown","18c773c4":"markdown","fb49d8d5":"markdown","60e4b7da":"markdown","ac7fb594":"markdown","7caadef7":"markdown","1f10232c":"markdown","dcfdfab1":"markdown","45feb0f4":"markdown","1800cdcf":"markdown","e6d16b82":"markdown","beed08d1":"markdown","71ad9d62":"markdown","8849cc7c":"markdown","8a597070":"markdown","8eaaef96":"markdown","f44b731f":"markdown","f90d5704":"markdown","86382745":"markdown","c85cee09":"markdown","3f3d8d27":"markdown","964a14d7":"markdown","79fa86a7":"markdown","570186ab":"markdown","91b3f97f":"markdown","36974257":"markdown","4a52c598":"markdown","52d7f219":"markdown","c72cf7a2":"markdown","08446a35":"markdown","ff167031":"markdown","b04fe451":"markdown","bf8ae44b":"markdown","f80556a9":"markdown","9e15eba2":"markdown","63e5270e":"markdown","8853b13d":"markdown","7cff6854":"markdown"},"source":{"dc49eee3":"pip install dnspython","c557a822":"import pandas as pd\nimport json\nimport pymongo\nfrom pymongo import MongoClient\n\nimport pprint\nimport urllib.parse\n\nimport timeit \nimport ipywidgets as widgets\nimport threading \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3c566a05":"client = MongoClient(\"mongodb+srv:\/\/geuser:melq.5491@bdegi.3pkrh.gcp.mongodb.net\/gre_EMD?retryWrites=true&w=majority\")\ndb = client.test","dcf3315b":"db = client['gre_EMD'] \ncollection = db['gre10_depl']\ncollection1=db['gre10_mng']\ncollection2=db['gre10_pers']\ncollection3=db['gre10_traj']\ndb.list_collection_names()","53c60e77":"collection.count_documents({})","4dd93829":"collection.find_one()","28b91bbc":"depl = pd.DataFrame(list(db.gre10_depl.find()))","ddd9fe8e":"depl.shape","13a52668":"print(depl)","534020d1":"depl['duree'] = depl['duree'].astype(int)\n","9bfe9779":"depl['NO_PERS'] = depl['NO_PERS'].astype(int)","801fda53":"depl['NO_DEPL'] = depl['NO_DEPL'].astype(int)","e3e32c3f":"# View the number of traveller for the less crowed trip and the most crowded trip\nprint('There are',min(depl['NO_PERS']), 'travellers in the less crowded trip.')\nprint('There are',max(depl['NO_PERS']), 'traveller in the most crowded trip.')","40f88aa3":"print ('The average number of travaller is: ', depl['NO_PERS'].mean(), '.' )\nprint ('The median number of travaller is: ', depl['NO_PERS'].median(), '.' )","4c080089":"# Groupe by number of travallers in a trip\nnbPers=depl.groupby('NO_PERS').size()\nprint (nbPers)","845866ea":"# Delivery the data nbPers in table form\ndfPers=pd.DataFrame(nbPers,columns=['counts'])\n\n# Set the width and height of the figure \nplt.figure(figsize=(8,6))\n\n# Bar chart showing number of residents having stayed in each zone\nsns.barplot(x=dfPers.index, y=dfPers['counts'])\n\n# Add title\nplt.title(\"Number of trips taken by various numbers of individuals\")\n\n# Add label for vertical axis\nplt.xlabel(\"Number of individuqls on a trip\")\n\n# Add label for vertical axis\nplt.ylabel(\"Number of trips \")","831d1108":"# Compute the rates\nlonelyTrip =depl[(depl.NO_PERS >= 1)&(depl.NO_PERS <= 2)]\ngroupTrip =depl[(depl.NO_PERS >= 5)]\nprint ('The rate of individuals traveling alone or in pairs ', int(len(lonelyTrip)\/float(len(depl))*100), '%.' )\nprint ('The rate of group trip: ', int(len(groupTrip)\/float(len(depl))*100), '%.' )","ce92777d":"print('The minimum number of deplacement in our database is', min(depl['NO_DEPL']), '.')\nprint('The maximum number of deplacement in our database is', max(depl['NO_DEPL']), '.')","6ad236b0":"print ('The average of the number of deplacement is: ', depl['NO_DEPL'].mean(), '.' )\nprint ('The median of the number of deplacement is: ', depl['NO_DEPL'].median(), '.' )","657be56e":"# Group by each number of deplacement\nnbDepl=depl.groupby('NO_DEPL').size()\nprint (nbDepl)","e1148df8":"# Show nbDepl in table form\ndfNoDepl=pd.DataFrame(nbDepl,columns=['counts'])\n\n# Sort by 'counts' in descending order \nprint(dfNoDepl.sort_values(by = 'counts',ascending = False, inplace = False))","b7e196e5":"noDpl1 =depl[(depl.NO_DEPL == 1)]\nnoDpl1.shape # return a tuple showing the dimensionality of the dataframe NoDpl1\nnoDpl2 =depl[(depl.NO_DEPL == 2)]\nnoDpl2.shape # return a tuple showing the dimensionality of the dataframe NoDpl2\nnoDpl3 =depl[(depl.NO_DEPL == 3)]\nnoDpl3.shape # return a tuple showing the dimensionality of the dataframe NoDpl3\nnoDpl7 =depl[(depl.NO_DEPL == 7)]\nnoDpl7.shape # return a tuple showing the dimensionality of the dataframe NoDpl7\nnoDpl10 =depl[(depl.NO_DEPL == 10)]\nnoDpl10.shape # return a tuple showing the dimensionality of the dataframe NoDpl10\nprint ('The rate of trips having 1 deplacement: ', int(len(noDpl1)\/float(len(depl))*100), '%.' )\nprint ('The rate of people having 2 deplacements: ', int(len(noDpl2)\/float(len(depl))*100), '%.' )\nprint ('The rate of people having 3 deplacements: ', int(len(noDpl3)\/float(len(depl))*100), '%.' )\nprint ('The rate of people having 7 deplacements: ', int(len(noDpl7)\/float(len(depl))*100), '%.' )\nprint ('The rate of people having 10 deplacements: ', int(len(noDpl10)\/float(len(depl))*100), '%.' )\n","66be3d48":"# Set the width and height of the figure \nplt.figure(figsize=(14,6))\n\n# Bar chart showing the number of trips according to the number of deplacement \nsns.barplot(x=dfNoDepl.index, y=dfNoDepl['counts'])\n\n# Add title\nplt.title(\"Numbers of trips having x deplacements\")\n\n# Add label for vertical axis\nplt.xlabel(\"Number of deplacements\")\n\n# Add label for vertical axis\nplt.ylabel(\"Number of trips\")\n","95b77309":"groupZoneOrig = depl[[\"zoneorig\", \"NO_DEPL\"]].groupby('zoneorig').mean()\ngroupZoneOrig","3b67762d":"print('The maximum mean of number of deplacement in trips from origine zone is', groupZoneOrig.max(), '.')\nprint('The minimum mean of number of deplacement in trips from origine zones is', groupZoneOrig.min(), '.')","d2d07952":"groupZoneOrig[groupZoneOrig['NO_DEPL'] == 13.0]","97efcaf1":"groupZoneOrig[groupZoneOrig['NO_DEPL'] == 1.0]","10e70df9":"groupZoneDest = depl[[\"zonedest\", \"NO_DEPL\"]].groupby('zonedest').mean()\ngroupZoneDest","2e923733":"print('The maximum mean of number of deplacement in trips to destination zones is', groupZoneDest.max(), '.')\nprint('The minimum mean of number of deplacement in trips to destination zones is', groupZoneDest.min(), '.')","fa39cea2":"groupZoneDest[groupZoneDest['NO_DEPL'] == 12.0]","78526bf7":"groupZoneDest[groupZoneDest['NO_DEPL'] == 1.0]","6acdf5e9":"# Statistics of trip duration\ndur_mean = depl['duree'].mean()\ndur_median = depl['duree'].median()\ndur_var = dur_mean = depl['duree'].var()\ndur_std = dur_mean = depl['duree'].std()\n\nprint ('Statistics of trip duration: mu:',dur_mean,', median:',dur_median,', var:',dur_var,', std:',dur_std)","9aeab45a":"# Duration distinction between lonely trips and group trips\ndur_lonelyTrip_mean = lonelyTrip['duree'].mean()\ndur_groupTrip_mean = groupTrip['duree'].mean()\n\nprint ('The average duration of lonely trip is: ', dur_lonelyTrip_mean, '.' )\nprint ('The average duration of group trip is: ', dur_groupTrip_mean, '.' )","fc62cb3e":"# The longest road\n\ns = depl[[\"duree\",\"zoneorig\",\"zonedest\"]]\nindexmax = depl[\"duree\"].idxmax()\nprint(s.loc[[indexmax]])","a7c89311":"# The shortest road\n\nindexmin = depl[\"duree\"].idxmin()\nprint(s.loc[[indexmin]])","934a31e0":"# Groupe by resident zone \nnbZoneRes=depl.groupby('zoneres').size()\nprint (nbZoneRes)","aa9ba30b":"# show total nomber of resident zone \nprint('Totally, there are', nbZoneRes.size, 'resident zones where the trips passed through.')","7870b34e":"# View nbZoneRes in table form\ndfZoneRes=pd.DataFrame(nbZoneRes,columns=['counts'])\n\n# Sorting in descending order by 'counts' \nprint(dfZoneRes.sort_values(by = 'counts',ascending = False, inplace = False))","9c179adf":"zoneRes1 =depl[(depl.zoneres == '1')]\nzoneRes1.shape # return a tuple showing the dimensionality of the dataframe zoneRes1\nzoneRes2 =depl[(depl.zoneres == '2')]\nzoneRes2.shape # return a tuple showing the dimensionality of the dataframe zoneRes2\nzoneRes3 =depl[(depl.zoneres == '3')]\nzoneRes3.shape # return a tuple showing the dimensionality of the dataframe zoneRes3\nprint ('The rate of trips passing through the zone 1: ', int(len(zoneRes1)\/float(len(depl))*100), '%.' )\nprint ('The rate of trips  passing through the zone 2: ', int(len(zoneRes2)\/float(len(depl))*100), '%.' )\nprint ('The rate of trips  passing through the zone 3: ', int(len(zoneRes3)\/float(len(depl))*100), '%.' )","fd098536":"# Set the width and height of the figure \nplt.figure(figsize=(14,6))\n\n# Bar chart showing number of trips passing through the x zone\nsns.barplot(x=dfZoneRes.index, y=dfZoneRes['counts'])\n\n# Add title\nplt.title(\"Numbers of trips passing through the x zone\")\n\n# Add label for vertical axis\nplt.xlabel(\"Resident Zone\")\n\n# Add label for vertical axis\nplt.ylabel(\"Number of trips\")","a76fc394":"# Groupe by destination zone\nnbZoneDest=zoneRes1.groupby('zonedest').size()\n\n# View nbZoneDest data in table form\ndfZoneDest=pd.DataFrame(nbZoneDest,columns=['counts'])\n\n# Sorting in descending order by 'counts'\nprint(dfZoneDest.sort_values(by = 'counts',ascending = False, inplace = False).head())","42f81a49":"group = depl[[\"zonedest\",\"NO_PERS\"]].groupby('zonedest')['NO_PERS'].sum()\ngroup","42425979":"group2 = depl[[\"zoneorig\",\"zonedest\",\"duree\"]].groupby(['zoneorig', 'zonedest'])['duree'].min()\ngroup2.head()","d838c6ef":"start_time = timeit.default_timer()\n# Creates a client for the primary sandbox from cluster host cluster0-nlbcx.mongodb.net\nclient = MongoClient(\"mongodb:\/\/adminUser:xpass@cluster0-shard-00-00-nlbcx.mongodb.net:27017\/?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\")\n\ndb = client.test \ndb = client['stackoverflow-dump-view']\ncollection = db['viewModel-view']\n\nview = collection.find_one() # json file, can be browsed as a dictionary\n\n#print (view['releaseViewList'][0].keys())\nviewRel0=view['releaseViewList'][0]\nviewRel1=view['releaseViewList'][1]\nviewRel2=view['releaseViewList'][2]","ee78f42e":"viewRel0","80c98308":"viewRel1","de9c7dab":"viewRel2","272fe8a4":"minValue0=viewRel0['attributeDescList'][0]['minValue'];print(minValue0)\nmaxValue0=viewRel0['attributeDescList'][0]['maxValue'];print(maxValue0)\nmean0=viewRel0['attributeDescList'][0]['mean'];print(mean0)\nmedian0=viewRel0['attributeDescList'][0]['median'];print(median0)\nnullValue0=viewRel0['attributeDescList'][0]['nullValue'];print(nullValue0)\nname0=viewRel0['attributeDescList'][0]['name'];print(name0)\ncount0=viewRel0['attributeDescList'][0]['count'];print(count0)","63176744":"nullsRel0=[]\nfor i in viewRel0['attributeDescList']:\n    nullsRel0.append(sum(i['nullValue']))\n\nnullsRel1=[]\nfor i in viewRel1['attributeDescList']:\n    nullsRel1.append(sum(i['nullValue']))\n\nnullsRel2=[]\nfor i in viewRel2['attributeDescList']:\n    nullsRel2.append(sum(i['nullValue']))","321dbc49":"import matplotlib.pyplot as plt \n\n# line 1 points \nx = ['Votes','Posts','Comments','Badges','Users']\ny1 = nullsRel0\n# plotting the line 1 points \nplt.plot(x, y1, label = \"Jan01-18\")\n\n# line 2 points \ny2 = nullsRel1\n# plotting the line 1 points \nplt.plot(x, y2, label = \"Jan02-18\")\n\n# line 3 points \ny3 = nullsRel2\n# plotting the line 1 points \nplt.plot(x, y3, label = \"Jan03-18\")\n\n# naming the x axis \nplt.xlabel('dataset') \n# naming the y axis \nplt.ylabel('null values') \n# giving a title to my graph \nplt.title('Number of null values per release') \n\n# show a legend on the plot \nplt.legend() \n\n# function to show the plot \nplt.show() ","f7c9e2b1":"countRel0=[]\nfor i in viewRel0['attributeDescList']:\n    countRel0.append(i['count'])\n\ncountRel1=[]\nfor i in viewRel1['attributeDescList']:\n    countRel1.append(i['count'])\n\ncountRel2=[]\nfor i in viewRel2['attributeDescList']:\n    countRel2.append(i['count'])","01ad19c9":"import matplotlib.pyplot as plt \n\n# line 1 points \nx = ['Votes','Posts','Comments','Badges','Users']\ny1 = countRel0\n# plotting the line 1 points \nplt.plot(x, y1, label = \"Jan01-18\")\n\n# line 2 points \ny2 = countRel1\n# plotting the line 1 points \nplt.plot(x, y2, label = \"Jan02-18\")\n\n# line 3 points \ny3 = countRel2\n# plotting the line 1 points \nplt.plot(x, y3, label = \"Jan03-18\")\n\n# naming the x axis \nplt.xlabel('dataset') \n# naming the y axis \nplt.ylabel('count') \n# giving a title to my graph \nplt.title('Count of items per release') \n\n# show a legend on the plot \nplt.legend() \n\n# function to show the plot \nplt.show() ","e802b838":"elapsed = timeit.default_timer() - start_time","4d29cd99":"print (\"execution time: \" + str(elapsed) + \" s\")","1445dee9":"#------------------------------------------------------------------ Q1 --------------------------------------------------------------------#\nbtn1=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl1=widgets.Text(value='0',description='',disabled=True)\nq1 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q2 --------------------------------------------------------------------#\nbtn2=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl2=widgets.Text(value='0',description='',disabled=True)\nq2 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q3 --------------------------------------------------------------------#\nbtn3=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl3=widgets.Text(value='0',description='',disabled=True)\nq3 = widgets.RadioButtons(options=['January 1rst 2018', 'January 2nd 2018', 'January 3rd 2018'],value=None,description='Release:',disabled=True)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q4 --------------------------------------------------------------------#\nbtn4=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl4=widgets.Text(value='0',description='',disabled=True)\nq4 = widgets.Dropdown(options=['Id','PostTypeId','AcceptedAnswerId','ParentId','CreationDate','DeletionDate','Score','ViewCount','Body','OwnerUserId','OwnerDisplayName','LastEditorUserId','LastEditorDisplayName','LastEditDate','LastActivityDate','Title','Tags','AnswerCount','CommentCount','FavoriteCount','ClosedDate','CommunityOwnedDate'],\n    value=None,description='Attribute:',disabled=True,)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q5 --------------------------------------------------------------------#\nbtn5=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl5=widgets.Text(value='0',description='',disabled=True)\ndrop_options = [['--','Id','UserId','Name','Date','Class','TagBased'],\n                ['--','Id','PostId','Score','Text','CreationDate','UserDisplayName','UserId'],\n               ['--','Id','PostTypeId','AcceptedAnswerId','ParentId','CreationDate','DeletionDate','Score','ViewCount','Body','OwnerUserId','OwnerDisplayName','LastEditorUserId','LastEditorDisplayName','LastEditDate','LastActivityDate','Title','Tags','AnswerCount','CommentCount','FavoriteCount','ClosedDate','CommunityOwnedDate'],\n               ['--','Id','Reputation','CreationDate','DisplayName','LastAccessDate','WebsiteUrl','Location','AboutMe','Views','UpVotes','DownVotes','ProfileImageUrl','EmailHash','AccountId'],\n               ['--','Id','PostId','VoteTypeId','UserId','CreationDate','BountyAmount']]\nchildren = [widgets.Dropdown(options=name,description='',value=None) for name in drop_options]\ntab = widgets.Tab()\ntab.children = children\nitems=['Badges', 'Comments', 'Posts', 'Users', 'Votes']\nfor i in range(len(items)):\n    tab.set_title(i, items[i])\nq5=tab\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q6 --------------------------------------------------------------------#\nbtn6=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl6=widgets.Text(value='0',description='',disabled=True)\nq6= widgets.RadioButtons(options=['Yes', 'No'],value=None,description='',disabled=False)\n#------------------------------------------------------------------------------------------------------------------------------------------#\n#------------------------------------------------------------------ Q7 --------------------------------------------------------------------#\nbtn7=widgets.ToggleButton(value=False,description='Activate',disabled=False,button_style='info',tooltip='',icon='',visibility = 'visible')\n#timeLbl7=widgets.Text(value='0',description='',disabled=True)\nchildren2 = [widgets.Dropdown(options=name,value=None) for name in drop_options]\ntab2 = widgets.Tab()\ntab2.children = children2\nfor i in range(len(items)):\n    tab2.set_title(i, items[i])\nq7=tab2\n#------------------------------------------------------------------------------------------------------------------------------------------#\n\n#------------------------------------------------------- Effort questions -----------------------------------------------------------------#\neffortW = []\nfor e in range(7):\n    effortW.append(widgets.ToggleButtons(options=['Low', 'Regular', 'High'],description='Select Effort:',disabled=False,value=None))  \n\ntimeLblW = []\nfor t in range(7):\n    timeLblW.append(widgets.Text(value='0',description='',disabled=True))  \n    \n# Timer function    \n# btn - receive a button object\n# lbl - receive a label object\n#    we use lbl.value to get timer value\n# q - receive a multiple option object\n#    we use q.value to get answered value\ndef timer(btn,lbl,q):        \n\n    cnt =int(lbl.value)   \n    on=btn.value \n    desc=q.description\n\n    if desc!='Submitted':\n        if on==True:      \n            threading.Timer(1, timer, [btn,lbl,q]).start()\n            cnt = cnt+1                        \n            lbl.value = str(cnt)\n            btn.description='Submit answer'\n            q.disabled=False\n\n        elif on==False:\n            threading.Timer(1, timer, [btn,lbl,q]).start()\n            btn.description='Activate'\n            q.disabled=True\n\n        else:\n            None\n\n    if cnt!=0 and btn.description=='Activate':\n        threading.Timer(1, timer, [btn,lbl,q]).start()\n        q.description='Submitted'\n        btn.visibility='hidden'\n        btn.description='--'\n        btn.disbled=True  \n\ndef timerTab(btn,lbl,q):        \n\n    cnt=int(lbl.value)   \n    on=btn.value \n    desc=q.children[0].description\n\n    if desc!='Submitted':\n        if on==True:      \n            threading.Timer(1, timerTab, [btn,lbl,q]).start()\n            cnt = cnt+1                        \n            lbl.value = str(cnt)\n            btn.description='Submit answer'\n            for i in range(len(q.children)):\n                q.children[i].disabled=False\n\n        elif on==False:\n            threading.Timer(1, timerTab, [btn,lbl,q]).start()\n            btn.description='Activate'\n            for i in range(len(q.children)):\n                q.children[i].disabled=True\n\n        else:\n            None\n\n    if cnt!=0 and btn.description=='Activate':\n        threading.Timer(1, timerTab, [btn,lbl,q]).start()\n        for i in range(len(q.children)):\n            q.children[i].description='Submitted'\n        btn.visibility='hidden'\n        btn.description='--'\n        btn.disbled=True                        ","702b2e75":"timeLblW[0]","246ee068":"btn1","534e9668":"q1","7a8bcc41":"timer(btn1,timeLblW[0],q1)","f1be128e":"effortW[0]","f43e5686":"timeLblW[1]","6bb81c03":"btn2","8a8f1e18":"q2","de6cd312":"timer(btn2,timeLblW[1],q2)","6f9e3570":"effortW[1]","df2529dc":"timeLblW[2]","13685a9b":"btn3","b1affd21":"q3","d5de4098":"timer(btn3,timeLblW[2],q3)","59cedf68":"effortW[2]","e43cb091":"timeLblW[3]","d8c3afd6":"btn4","0919c249":"q4","eb432aac":"timer(btn4,timeLblW[3],q4)","64dca85d":"effortW[3]","f949930f":"timeLblW[4]","fbcd9e93":"btn5","683dcea3":"q5","9e5f8534":"timerTab(btn5,timeLblW[4],q5)","7646ccf7":"effortW[4]","827809e6":"timeLblW[5]","a3ee4fa5":"btn6","4ca7ec7f":"q6","02917ba4":"timer(btn6,timeLblW[5],q6)","60c1ed9b":"effortW[5]","bb19817b":"timeLblW[6]","246178d7":"btn7","988fd3d5":"timerTab(btn7,timeLblW[6],q7)","aa463431":"q7","1891c956":"effortW[6]","6ddde8e0":"# collect user effort \nuserEffortL = []\nfor e in effortW:\n    userEffortL.append(e.value) \n        \n# collect time from answers\nqtimeL=[]\nfor t in timeLblW:\n    qtimeL.append(int(t.value))\n\n# tuple for answers\nqans1=q1.options[2]\nqans2=q2.options[0]\nqans3=q3.options[1]\nqans4=q4.options[3]\nqans5=[q5.children[0].options[3],q5.children[1].options[0],q5.children[2].options[5],q5.children[3].options[5],q5.children[4].options[0]]\nqans6=q6.options[0]\nqans7=[q7.children[0].options[3],q7.children[1].options[0],q7.children[2].options[5],q7.children[3].options[5],q7.children[4].options[0]]\nqans = [qans1,qans2,qans3,qans4,qans5,qans6,qans7]\n\nscoreL = [0.0]*7\n\nif q1.value == qans1: scoreL[0]=1 \nif q2.value == qans2: scoreL[1]=1 \nif q3.value == qans3: scoreL[2]=1 \nif q4.value == qans4: scoreL[3]=1 \n\nif qans5[0] == q5.children[0].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[1] == q5.children[1].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[2] == q5.children[2].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[3] == q5.children[3].value: scoreL[4]=scoreL[4] + 0.2\nif qans5[4] == q5.children[4].value: scoreL[4]=scoreL[4] + 0.2\n\nif q6.value ==qans6: scoreL[5]=1\n\nif qans7[0] == q7.children[0].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[1] == q7.children[1].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[2] == q7.children[2].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[3] == q7.children[3].value: scoreL[6]=scoreL[6] + 0.2\nif qans7[4] == q7.children[4].value: scoreL[6]=scoreL[6] + 0.2\n        \n# calculated effort\ncalcEffortL = []\nmaxcEffort = 100\nfor i in range(0,len(scoreL)):\n    if scoreL[i] == 0: \n        calcEffortL.append(maxcEffort)\n    else:\n        if int(qtimeL[i]) > 300: qtimeL[i] = 300 # 5 min limit\n        tmp=int(qtimeL[i])\/scoreL[i]\n        calcEffortL.append((tmp*100)\/1800)            ","3dd8f7ff":"import csv\n# qid | time | score | user_effort | calculated_effort | execution_time (cpu)\nheader=['qid', 'score', 'time', 'user_effort', 'calculated_effort', 'execution_time'] \nqid=list(range(1,8))\nelapsedL = [elapsed]*7\n\nrows = zip(qid,scoreL,qtimeL,userEffortL,calcEffortL,elapsedL)\n\nwith open(\"..\/results\/match2.csv\", mode=\"w\") as f:\n    #writer = csv.writer(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n    writer = csv.writer(f, delimiter=',')\n    writer.writerow(header)\n    for row in rows:\n        writer.writerow(row)","53e6ed03":"# Resident zone\n","ba6e29b8":"We do the same thing with \"NO_PERS\"","c6707e16":"We will examine the number of travallers in the trip in the follwong part. We call \"group tours\" if there are more than 5 (including 5) individuals on a journey.","15f18a48":"We can notice that the more the number of deplacement increases, the less the number of trips composed of these deplacements decreases. For example, only 2 trips have 22 deplacements whereas 14831 trips have one deplacement","0e433c15":"- What does it mean exploring views???? The notion of view was shown in the example code but had nothing to do with the wrap up exercice.\n- Name of the group participants missing\n- THE LAST \"FIGURE WITH THE \"ARCHITECTURE\" THAT IS NOT AN ARCHITECTURE IT IS THE PIPELINE IMPLEMENTED TO RUN THE EXPERIMENT\n- You had to clean the pieces of code that had nothing to do with the experiment\n","722252eb":"### Number of Null Values per release","38ecbef9":"Effort : regular","fdfd71e1":"# Introduction \nIn this hands on, we used the collection **gre10_depl** of database gre_EMD. We focused on issues relating to the number of travellers, the number of deplacements, the trip duration and the areas travalled through (the resident zones). \n\nIn this study, we used the following attributes : \n- NO_PERS : number of travellers in a trip \n- NO_DEPL: number of shifting in a trip \n- zoneorig : the zone where the trip began from  \n- zoneres : the zone where the trip passed through\n- zonedest : the destination of the trip \n- duree : trip duration  \n","91503a8f":"## Q2. Which release has the most number of records?","5570b0f5":"So there is in average 12 deplacements to the destination zone 128051","71f91fcd":"On this graph, we can see indeed that the number of deplacement 1 has the highest number of trips. And step by step, it decreases.","d56a59d1":"# Lonely trip or group trip ?\n","2fdd5bd6":"With this table, we can see what is for each origine zone, the mean of the number of deplacement of trips. To see which origine zones have the maximum or the minimum mean, we filter data by the values found before.","33a3b295":"We can convert our entire collection of data into a pandas DataFrame with the comand below","007c604d":"Effort : low","7e127fa6":"t","65b997a1":"We can use command shape to the number of data samples in rows and in columns:","a324e8f3":"Yes\n","fd4af887":"ViewCount \n","9b7f0e49":"### Execution time","a871dcf6":"January 3rd 2018 ","116974d3":"### Second Release View","f4625af7":"### Q2.1 Effort to answer the question","2268c7ff":"# Destination","c869672d":"we will study in the following section the destination zone for people having stayed in zone 1. Have people staying in zone 1 gone to the same destination or not? Is it possible that the resident zone 1 is a must-see location for certain given destination?","b4c0adff":"Effort : regular\n","b3871d5f":"Much of trips traveled through these 3 zones : zone 1, zone2 and zone 3. From the calculation above, we found that there are 20735 items for zone 1, 17799 items for zone 2 and 10845 items for zone3. The fewest trips passing through the zone 54 (only 2 trips).","6cc28069":"# Duration","daea83df":"## Q5. Which is\/are the attribute(s) that can be used to identify the most trendy topic addressed in the release?","d20505aa":"From the above data, the top 5 zones where people having stayed in zone 1 are : 101001, 131001, 137001, 128001, 140001.","aa1a9d23":"## Q7. Choose the attributes that can be used as sharging keys to fragment the release using a hash based and an interval based strategy","d49217dd":"### Q5.1 Effort to answer the question","18c773c4":"## Get Match Results","fb49d8d5":"January 2nd 2018","60e4b7da":"January 3rd 2018 \n","ac7fb594":"**Longest trip and shortest trip**","7caadef7":"Effort : low","1f10232c":"# Exploring Views","dcfdfab1":"### Number of Items per release","45feb0f4":"Effort : low\n","1800cdcf":"We use print(depl) to see our data","e6d16b82":"# Tasks","beed08d1":"On average, people traveled in pairs. The median here means that half of the people traveled alone or in pairs and more than 3 people traveled in the other half.","71ad9d62":"### Q6.1 Effort to answer the question","8849cc7c":"## Releases","8a597070":"Here, for each zone origin we can know all the reachable zone destinations and the duration between 2 zones","8eaaef96":"### Q1.1 Effort to answer the question","f44b731f":"# Number of deplacement","f90d5704":"We do the same thing with \"NO_DEPL\"","86382745":"## Q6 Will missing, null, and default values bias observation of trends?","c85cee09":"## Q1. Which is the release with best quality? (less missing, nulls and default values)","3f3d8d27":"Here we can notice that it is the trips from the zone 128051 which have the most deplacements, in average 13 deplacements. Maybe, this zone is far enough from destination zones, that\u2019s why the trips from there have more deplacements. On the contrary, trips from the zones 601005, 601016, 603006, 801002, 804051 and 806003 make only on average 1 deplacement. We can assume that these zones are near destination zones.","964a14d7":"We can notice that on average, the trips in the database are composed of 3.2 deplacements.","79fa86a7":"### Q4.1 Effort to answer the question","570186ab":"As noticed before, the rates of trips which have done one or two deplacements are the highest, 23%. From 10 deplacements, the rate is only 0%.","91b3f97f":"### Third Release View","36974257":"In our database the duree has format string so we change it into integer\n","4a52c598":"## Q4. Which attribute from _Posts_ item can be used to compute answers' popularity and author's reputation (started answered and authors)","52d7f219":"In next part we want to know how many people will go to the same destination, so we group by zone destination and calcul the sum of the people in each zone destination","c72cf7a2":"Effort : high","08446a35":"### First Release View","ff167031":"![Wrap-up.png](attachment:Wrap-up.png)","b04fe451":"So there are on average 12 deplacements in the trips to the destination zone 128051. We can notice that it is the same zone which has the maximum mean of number of deplacements of trips from origine zones. We can conclude that this zone is far away from the other zones, that\u2019s why there are many deplacements to do in trips from this zone or to this zone.","bf8ae44b":"* Badges : TagBased \n* Comments : Score \n* Posts : ViewCount \n* Users : Views \n* Votes : BountyAmount\n","f80556a9":"### Q3.1 Effort to answer the question","9e15eba2":"Effort : low","63e5270e":"## Q3. Which is the release where _UpVote_ attribute from _Users_ item is more spread?","8853b13d":"* Badges : TagBased\n* Comments : Score \n* Posts : View count \n* Users : Views\n* Votes : BountyAmount\n","7cff6854":"### Q7.1 Effort to answer the question"}}