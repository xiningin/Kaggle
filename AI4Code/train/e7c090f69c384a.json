{"cell_type":{"b9a31b8b":"code","fb7a979e":"code","20399737":"code","7c6bd197":"code","14248ee9":"code","2c080faa":"markdown","5f7fb07c":"markdown","b14bcfee":"markdown","de9ee591":"markdown"},"source":{"b9a31b8b":"import numpy as np\nimport pandas as pd\npath = \"..\/input\/comprehensive-database-of-minerals\/Minerals_Database.csv\"\nminerals_df = pd.read_csv(path)","fb7a979e":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.utils import to_categorical\nfrom sklearn.utils.class_weight import compute_class_weight\n\nclass MineralsDatasets:\n    def __init__(self, X_train_scaled, X_test_scaled, y_train_categorical, y_test_categorical, sample_weights):\n        self.X_train = X_train_scaled\n        self.X_test = X_test_scaled\n        self.y_train = y_train_categorical\n        self.y_test = y_test_categorical\n        self.sample_weights = sample_weights\n        \ndef getFeaturesAndTargetData(minerals_df, columns_to_ignore, target_column):\n#     minerals_df = minerals_df.drop(minerals_df.query('`{col}` == {triclinic}'.format(col=target_column, triclinic=0)).sample(frac=.3).index)\n    X = minerals_df.drop(columns=columns_to_ignore+[target_column])\n    y = minerals_df[target_column]\n    return X, y\n\ndef scaleFeatures(train_data, test_data):\n    scaler = StandardScaler()\n    scaler.fit(train_data)\n    train_data_scaled = scaler.transform(train_data, copy=True)\n    test_data_scaled = scaler.transform(test_data, copy=True)\n    return train_data_scaled, test_data_scaled\n\ndef categorizeTargets(train_targets, test_targets):\n    y_train_categorical = to_categorical(train_targets)\n    y_test_categorical = to_categorical(test_targets)\n    return y_train_categorical, y_test_categorical\n\ndef getWeights(y_categorical):\n    class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(y_categorical), y=y_categorical)\n    sample_weights = np.array([class_weights[np.argmax(y)] for y in y_categorical])\n    return sample_weights\n    \ndef getSplittedAndNormalizedData(minerals_df):\n    NON_CHEMICAL_FEATURES = ['Unnamed: 0', 'Name', 'Crystal Structure', 'Mohs Hardness',\n       'Diaphaneity', 'Specific Gravity', 'Optical', 'Refractive Index',\n       'Dispersion', 'count', 'Molar Mass', 'Molar Volume',\n       'Calculated Density']\n    TARGET = \"Crystal Structure\"\n    X, y = getFeaturesAndTargetData(minerals_df, NON_CHEMICAL_FEATURES, TARGET)\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    X_train_scaled, X_test_scaled = scaleFeatures(X_train, X_test)\n    y_train_categorical, y_test_categorical = categorizeTargets(y_train, y_test)\n    sample_weights = getWeights(y_train.to_numpy())\n    return MineralsDatasets(X_train_scaled, X_test_scaled, y_train_categorical, y_test_categorical, sample_weights)","20399737":"from keras import Sequential\nfrom keras.layers import Input, Dense, Dropout\n\n\nclass HiddenLayerSpecification:\n    def __init__(self, size, activationFunction):\n        self.size = size\n        self.activationFunction = activationFunction\n\nclass ModelSpecification:\n    def __init__(self, inputLength, numOfClasses, hiddenLayersSpecifications, optimizer, lossFunction, outputActivation, metrics, dropout):\n        self.inputLength = inputLength\n        self.numOfClasses = numOfClasses\n        self.hiddenLayersSpecifications = hiddenLayersSpecifications\n        self.optimizer = optimizer\n        self.lossFunction = lossFunction\n        self.outputActivation = outputActivation\n        self.metrics = metrics\n        self.dropout = dropout\n\ndef buildModel(spec):\n    model = Sequential()\n    model.add(Input(spec.inputLength,))\n    for hiddenLayerSpec in spec.hiddenLayersSpecifications:\n        model.add(Dense(hiddenLayerSpec.size, activation=hiddenLayerSpec.activationFunction))\n        model.add(Dropout(spec.dropout))\n    model.add(Dense(spec.numOfClasses, activation=spec.outputActivation))\n    model.compile(optimizer=spec.optimizer, \n                  loss=spec.lossFunction, \n                  metrics=spec.metrics)\n    return model","7c6bd197":"import tensorflow as tf\nfrom keras.metrics import Precision, Recall, TopKCategoricalAccuracy\nfrom collections import Counter\n\nclass Result:\n    def __init__(self, data, model, score):\n        self.data = data\n        self.model = model\n        self.score = score\n\ndef getSpecification():\n    hiddenLayersSpecifications = [HiddenLayerSpecification(data.X_train.shape[1], \"relu\"),\n                                  HiddenLayerSpecification(1000, \"relu\"),\n                                  HiddenLayerSpecification(100, \"relu\"),#rem\n                                  HiddenLayerSpecification(100, \"relu\")]\n    return ModelSpecification(inputLength = data.X_train.shape[1],\n                               numOfClasses = data.y_test.shape[1],\n                               hiddenLayersSpecifications = hiddenLayersSpecifications, \n                               optimizer = \"adam\",\n                               lossFunction = \"categorical_crossentropy\",\n                               outputActivation = \"softmax\",\n                               metrics = [\"accuracy\", # how often predictions equal labels, \n                                          Recall(), # true_positives \/ (true_positives + false_negatives)\n                                          Precision()], # true_positives \/ (true_positives + false_positives)],\n                               dropout=0.7)\n\ndef fitOnNewModelAndData(minerals_df, modelSpecification, epochs):\n    data = getSplittedAndNormalizedData(minerals_df)\n    model = buildModel(modelSpecification)\n    model.fit(data.X_train, data.y_train, epochs=epochs, verbose=0, sample_weight=data.sample_weights)\n    score = model.evaluate(data.X_test, data.y_test, return_dict=True)\n    return Result(data, model, score)","14248ee9":"def get_avg_metric(results, metricName):\n    return np.mean([r.score[metricName] for r in results])\n\nms = getSpecification()\nresults = [fitOnNewModelAndData(minerals_df, ms, 10) for i in range(10)]\navg_accuracy = get_avg_metric(results, \"accuracy\")\nprint('Avg accuracy: {}.'.format(avg_accuracy))","2c080faa":"Define neural network builder","5f7fb07c":"Fit and evaluate model.","b14bcfee":"Import data","de9ee591":"Preprocess data:\n1. Extract features and target.\n2. Scale features.\n3. Categorize target classes.\n4. Get class weights and convert to sample weights."}}