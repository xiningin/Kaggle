{"cell_type":{"9286fe9e":"code","01d53a66":"code","6558fade":"code","48776e98":"code","2c43a9e5":"markdown","0ac7c8d6":"markdown","0923e9b9":"markdown"},"source":{"9286fe9e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math as mt\n\nesp = 0.05\ncolor = np.array([255,0,0])\n\ndef f(x):\n    return (x**4)+(x**3)+4*mt.cos(x)-1\n\ndef grad(x):\n    return 4*(x**3)+3*(x**2)-4*mt.sin(x)\n\ndef stop(x):\n    return abs(grad(x))<esp\n\ndef test(init_x,alpha,gamma=0,nesterov=False,verbose=True,plot=False):\n    x = [init_x]\n    v = [0]\n\n    epoch = 0\n    while not(stop(x[-1])):\n        epoch += 1\n        if (verbose==True):\n            print(\" === Iteration %d === \"%(epoch))\n            print(\"v=%.3f;x=%.3f\"%(v[-1],x[-1]))\n\n        if (plot==True):\n            tx = np.linspace(-2.2,1.5,100)\n            ty = [f(i) for i in tx]\n            plt.plot(tx,ty,label=\"y=f(x)\")\n            plt.plot(x[-1],f(x[-1]),'o',color=color\/255,label=\"A(x,y)\")\n            plt.xlabel(\"x\")\n            plt.ylabel(\"y\")\n            plt.legend()\n            plt.show()\n\n        if (nesterov==True):\n            v.append(gamma*v[-1]+alpha*grad(x[-1]-gamma*v[-1]))\n        else:\n            v.append(gamma*v[-1]+alpha*grad(x[-1]))\n        x.append(x[-1]-v[-1])","01d53a66":"test(init_x=1.29, alpha=0.1, plot=True)","6558fade":"test(init_x=1.29, alpha=0.05, gamma=0.9, plot=True)","48776e98":"test(init_x=1.29, alpha=0.05, gamma=0.9, nesterov=True, plot=True)","2c43a9e5":"# Gradient descent\n- Learning rate: 0.05","0ac7c8d6":"# Momentum\n- Learning rate: 0.01\n- Momentum: 0.9","0923e9b9":"# Nesterov\n- Learning rate: 0.01\n- Momentum: 0.9\n- Use nesterov"}}