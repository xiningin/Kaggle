{"cell_type":{"b8c52ecb":"code","45bfcc7f":"code","fcd01915":"code","7e5c1fac":"code","34492c85":"code","59b9da8e":"code","60e4ac77":"code","a5343c39":"code","1cf4430e":"code","ecea2831":"code","52552b20":"code","383173c1":"code","a2726a7c":"code","b74e2b3c":"code","63de61a0":"code","2e3e709f":"code","a3745edb":"code","33a785c8":"code","1f635de1":"code","28df5385":"code","6252325f":"code","4fcc666c":"code","f985e578":"code","d510df0f":"code","7f65257c":"markdown","e10f1dc3":"markdown","b81d7e45":"markdown","16b82871":"markdown","9bde9869":"markdown","af7605fe":"markdown","d6292d31":"markdown","0a301699":"markdown","1e4f94ce":"markdown","066d68bd":"markdown","0c268824":"markdown","0af2415c":"markdown","a47fa20d":"markdown","7beeaaa5":"markdown","7c575782":"markdown","e1369859":"markdown","f417c3b2":"markdown","1c47f209":"markdown"},"source":{"b8c52ecb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45bfcc7f":"import warnings; warnings.simplefilter('ignore')\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\n\nimport collections\nfrom wordcloud import WordCloud\n\nfrom sklearn.cluster import KMeans\n\n!pip install --q fuzzywuzzy\nfrom fuzzywuzzy import fuzz","fcd01915":"food = pd.read_csv('..\/input\/indian-food-101\/indian_food.csv').set_index('name')\nfood.shape","7e5c1fac":"food.head()","34492c85":"fig, ax = plt.subplots(2, 2, sharey=True,figsize=(12,8))\nplt.subplots_adjust(hspace=0.6)\nfor i, f in enumerate(['diet', 'flavor_profile','course', 'region']):\n    axy, axx = divmod(i,2)\n    sns.countplot(food[f], ax=ax[axy, axx])\n    ax[axy,axx].tick_params(axis='x', labelrotation=45)","59b9da8e":"fig, ax = plt.subplots(figsize=(12,3))\nsns.countplot(food['state'], ax=ax)\nax.tick_params(axis='x', labelrotation=90)","60e4ac77":"ing_dic = collections.defaultdict(int)\n\nfor f in food.index:\n    ing_list = food.at[f, 'ingredients'].split(', ')\n    for i in ing_list:\n        i = i.lower().strip()\n        ing_dic[i] += 1\n\ning_df = pd.DataFrame.from_dict(ing_dic, orient='index')\\\n    .rename(columns={0:'count'})","a5343c39":"ing_df.sort_index().loc['red': 'red0'].T","1cf4430e":"ing_list = ing_df.sort_values('count').index.to_list()\n\nn = 0\n\nfor i in range(len(ing_list)-1):\n    for j in range(i+1, len(ing_list)):\n        ratio = fuzz.ratio(ing_list[i], ing_list[j])\n        if n == 30:\n            break\n        if ratio > 70:\n            print(ing_list[i], ', ', ing_list[j], '\\t', ratio)\n            n += 1","ecea2831":"for i in range(len(ing_list)-1):\n    for j in range(i+1, len(ing_list)):\n        ratio = fuzz.ratio(ing_list[i], ing_list[j])\n        if ratio > 80:\n            print('\"', ing_list[i], '\": \"',ing_list[j], '\"\\t', ratio)","52552b20":"similar_ing_dic = {\n    \"red chili\": \"red chilli\",\n    \"greens\":\"green\",\n    \"drumstick\":\"drumsticks\",\n    \"thin rice flakes\":\"beaten rice flakes\",\n    \"chana daal\":\"chana da \",\n    \"whole urad dal\":\"white urad dal\",\n    \"bell pepper\":\"bell peppers\",\n    \"frozen green peas\":\"green peas\" ,\n    \"fresh green peas\":\"green peas\",\n    \"chilli\": \"chillies\",\n    \"fish fillets\": \"fish fillet\",\n    \"mustard seed\": \"mustard seeds\",\n    \"peanut\":\"peanuts\",\n    \"red chillies\":\"red chilli\",\n    \"dried fruits\":\"dry fruits\",\n    \"almond\":\"almonds\",\n    \"carrots\":\"carrot\",\n    \"yoghurt\":\"yogurt\",\n    \"chenna\":\"chhena\",\n    \"green chillies\":\"green chilies\",\n    \"green chilli\":\"green chilies\",\n    \"green chili\":\"green chilies\",\n    \"potatoes\":\"potato\",\n    \"tomatoes\":\"tomato\"\n}","383173c1":"new_ing_dic = collections.defaultdict(int)\n\nfor f in food.index:\n    tmp_list = food.at[f, 'ingredients'].split(', ')\n    for i in tmp_list:\n        i = i.lower().strip()\n        if i in similar_ing_dic:\n            i = similar_ing_dic[i]\n        new_ing_dic[i] += 1\n            \nnew_ing_df = pd.DataFrame.from_dict(new_ing_dic, orient='index')\\\n    .rename(columns={0:'count'})\nnew_ing_df.sort_index().loc['red':'red0'].T","a2726a7c":"BoI_df = pd.DataFrame(\n    np.zeros(len(food)*len(new_ing_dic)).reshape(len(food),len(new_ing_dic))\\\n    .astype(int),index=food.index, columns=new_ing_df.index)\n\nfor f in food.index:\n    tmp_list = food.at[f, 'ingredients'].split(', ')\n    for i in tmp_list:\n        i = i.lower()\n        if i[0] == ' ':\n            i = i[1:]\n        if i[-1] ==' ':\n            i = i[:-1]\n        if i in similar_ing_dic:\n            i = similar_ing_dic[i]\n        BoI_df.at[f, i]=1\n\nBoI_df.head()","b74e2b3c":"km = KMeans(n_clusters=5,random_state=0)\nclust5 = pd.DataFrame(\n    km.fit(BoI_df).labels_, index=BoI_df.index).rename(columns={0:'grp'})","63de61a0":"sns.countplot(y=clust5['grp'], orient='h');","2e3e709f":"fig,ax = plt.subplots(4,figsize=(12,16))\nfor i, f in enumerate(['flavor_profile','course','region','diet']):\n    pd.crosstab(clust5['grp'],food[f],normalize='index')[::-1]\\\n    .plot.barh(stacked=True,ax=ax[i])\n    ax[i].set_title(f)","a3745edb":"freq_ing = BoI_df.sum().sort_values(ascending=False)[:10].index.to_list()\nfreq_ing_df = pd.merge(clust5, BoI_df[freq_ing],\n                       how='inner', left_index=True, right_index=True)\\\n                    .groupby('grp').sum()\ntot_ing_df = pd.DataFrame(BoI_df.sum()).rename(columns={0:'total'})\n\nfor c in freq_ing_df.columns:\n    freq_ing_df[c] = freq_ing_df[c]\/tot_ing_df.at[c, 'total']\n\nfreq_ing_df.T[::-1].plot.barh(stacked=True, figsize=(12,8),\n                              title='Share of frequently used ingredient');","33a785c8":"fig, ax = plt.subplots(1, 2, sharey=True, figsize=(14,4))\nsns.boxplot(y=clust5['grp'], x=food['prep_time'], orient='h', ax=ax[0])\nax[0].set_xscale('log')\nsns.boxplot(y=clust5['grp'], x=food['cook_time'], orient='h', ax=ax[1])\nax[1].set_xscale('log');","1f635de1":"wc_df = pd.merge(clust5, BoI_df, how='inner', left_index=True, right_index=True)\n\ndef wc():\n    for i in range(5):\n        tmp_df = wc_df[wc_df['grp']==i]\n        tmp_list = []\n        for f in tmp_df.index:\n            for c in tmp_df.columns[1:]:\n                if tmp_df.at[f, c]==1:\n                    tmp_list.append(c.replace(' ', '_'))\n        words = ' '.join([word for word in tmp_list])\n        wordcloud =WordCloud(\n            width=700, height=300, collocations=False, background_color='white',\n            max_font_size=100).generate(words)\n        plt.figure(figsize=(14, 6))\n        plt.title('Group '+str(i), fontsize=32)\n        plt.imshow(wordcloud, interpolation=\"bilinear\")\n        plt.axis('off')\n\nwc()","28df5385":"print(clust5[clust5['grp']==0].index.to_list())","6252325f":"print(clust5[clust5['grp']==1].index.to_list())","4fcc666c":"print(clust5[clust5['grp']==2].index.to_list())","f985e578":"print(clust5[clust5['grp']==3].index.to_list())","d510df0f":"print(clust5[clust5['grp']==4].index.to_list())","7f65257c":"### Contents  \n#### * Load Data and Libraries  \n#### * Data Visualization  \n#### * Cleaning Data - arrange Ingredients  \n#### * Clustering  \n#### * appendix","e10f1dc3":"> Setting a 'Bag-of=Ingredient'","b81d7e45":"> all combination with ratio>80 shown in hidden cell","16b82871":"#### * Clustering","9bde9869":"> Combinations with FuzzyWuzzy.ratio>70","af7605fe":"Ingredient WordCloud by Cluster","d6292d31":"I think I've made a reasonably meaningful classification for myself. What do you think?","0a301699":"When the ratio is greater than 80, the two expressions appear to refer to the same content in many cases","1e4f94ce":"#### * Load Data and Libraries\n  \nTo help unify the wording of Ingredients, I use FuzzyWuzzy  \n[FuzzyWuzzy -GitHub](https:\/\/github.com\/seatgeek\/fuzzywuzzy)","066d68bd":"> Run KMeans","0c268824":"> 0: main course, South region  \n1: main course, North region  \n2: rice flour and jaggery  \n3: Desert  \n4: Spicy, main course and snack, south region","0af2415c":"#### * Cleaning Data - arrange Ingredients","a47fa20d":"Let's check components of Ingredients, start with 'red'","7beeaaa5":"#### * Data Visualization","7c575782":"Check for similarity in the expression of the ingredients by FuzzyWuzzy  ","e1369859":"Features by Cluster","f417c3b2":"#### * appendix","1c47f209":"> There exists red chili, red chilli and red chillies in components of Ingredients!"}}