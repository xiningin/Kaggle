{"cell_type":{"4c82bd2f":"code","f0380d41":"code","b6bfc0bd":"code","71697e18":"code","19ab042b":"code","e2bd197e":"code","2362f759":"code","6839093f":"code","438ac020":"code","2ed85012":"code","1bc85a38":"code","b3db616a":"code","2df4c88f":"code","53b2a1cd":"code","7e4b2074":"code","44a05c4d":"code","1e199022":"code","90292dc1":"code","c537ced4":"code","f54c5556":"code","5fd3e823":"code","6d47932d":"code","545d450a":"code","68e623f8":"code","0a0152cd":"code","17ae5a93":"code","fafbaf21":"code","c4f321f7":"code","df22cf3f":"code","556592cd":"code","dbcfd5f4":"code","a65638f7":"code","6835de0d":"code","cd21bcb6":"code","031925b5":"code","5e56d7ad":"code","921ca4bc":"code","f489d7ef":"code","d211b187":"code","83d1a264":"code","33f1bfd3":"code","1eabb570":"code","2c652a9b":"code","5d39e257":"code","41930342":"code","60deaa1a":"code","b3e120ec":"code","b80310f0":"code","f351e344":"code","cb465950":"code","cd3ae852":"code","0137bb82":"code","66d5f606":"code","d7cc550b":"code","f72c3a72":"code","45981493":"code","dd2d218a":"code","3afb2220":"code","e880b076":"code","c1b8d927":"code","84c7bdfc":"code","342dd09c":"code","c4723904":"code","c122ae59":"code","3ce24ebe":"code","c2a435ed":"code","6cbfca66":"code","6fe51cdf":"code","90c03e0f":"code","c18bec89":"code","46623b81":"code","d8cb3f8d":"code","b02414cf":"code","55871aa3":"code","609f262d":"code","56307e1d":"code","31466af5":"code","baf2ef39":"code","e5f8a8b3":"code","41bb1e56":"code","b8e6795b":"code","b8d3a79b":"code","cb6eef9d":"code","015c8279":"code","beca246b":"code","785c5525":"code","6d203ecc":"code","a24a5a7e":"code","11852f5b":"code","b952ca9e":"code","4a9c6cb1":"code","bc4b6c3b":"code","d06d870b":"code","a1bd131b":"code","9f86eb38":"code","c904f46b":"code","6ad77bb2":"markdown"},"source":{"4c82bd2f":"import os\nfrom typing import List\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom gensim.models import Word2Vec\n\nfrom tqdm import tqdm\n\n#\u4ee5\u4e0b\u306fStarter\u306b\u8ffd\u52a0\npd.set_option(\"display.max_columns\", 800)\npd.set_option(\"display.max_rows\", 300)\nimport seaborn as sns\nimport re\n\nfrom category_encoders import CountEncoder\n\nfrom sklearn.model_selection import KFold\nfrom scipy import stats\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\nfrom functools import partial\n\nimport warnings\nwarnings.simplefilter('ignore')","f0380d41":"#Sterter\u306e\u307e\u307e\ntrain = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')","b6bfc0bd":"#\u3000\u8a08\u7b97\u6e08\u307f\u306esubmission\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u78ba\u8a8d\u3059\u308b\n#!cd \/kaggle\/input\/&& ls","71697e18":"train2 = pd.read_csv('..\/input\/stacking1sttrain2\/y_train_stacking2.csv')\ntest2 = pd.read_csv('..\/input\/stacking1sttest2\/y_test_stacking2.csv')","19ab042b":"train2.head(2)","e2bd197e":"test2.head(2)","2362f759":"#EDA\u3067Starter\u306etext_svd_df\u3068tags_df\ntext_svd_df = pd.read_csv('..\/input\/eda-starter-01\/text_svd_df.csv')\ntags_df = pd.read_csv('..\/input\/edastarterbest91\/best_tags_df.csv')","6839093f":"#EDA\u3067Original\u306etfid\ndeveloper_ = pd.read_csv('..\/input\/eda-original-tfid-dev\/developer.csv')\ncategories_ = pd.read_csv('..\/input\/eda-original-tfid-cat\/categories.csv')\nminimum_requirements_ = pd.read_csv('..\/input\/eda-original-tfid-min\/min_requirements.csv')","438ac020":"#TFID\u306e\u30ab\u30e9\u30e0\u3092\u96c6\u7d04\ndf_tfid = pd.concat([developer_,categories_,minimum_requirements_],axis=1)","2ed85012":"#EDA\u3067Original\u306ebow\ncategories_bow = pd.read_csv('..\/input\/eda-original-bow-cat\/categories_bow.csv')\ndeveloper_bow = pd.read_csv('..\/input\/eda-original-bow-dev\/developer_bow.csv')\nminimum_requirements_bow = pd.read_csv('..\/input\/eda-original-bow-min\/min_requirements_bow.csv')\npopular_tags_bow = pd.read_csv('..\/input\/eda-original-bow-pop\/popular_tags_bow.csv')\nrec_requirements_bow = pd.read_csv('..\/input\/eda-original-bow-rec\/rec_requirements_bow.csv')\nmonth_bow = pd.read_csv('..\/input\/eda-original-bow-month\/release_date_bow_month.csv')","1bc85a38":"#BOW\u306e\u30ab\u30e9\u30e0\u3092\u96c6\u7d04\ndf_bow = pd.concat([categories_bow,month_bow,rec_requirements_bow,developer_bow,minimum_requirements_bow,popular_tags_bow],axis=1)\n\n#,developer_bow,minimum_requirements_bow,popular_tags_bow","b3db616a":"#EDA\u3067Original\u306ebert\u3092\u8ffd\u52a0\ndescription_bert4 = pd.read_csv('..\/input\/eda-description-bert4\/description_bert_4.csv')","2df4c88f":"train_imgPCA = pd.read_csv('..\/input\/train-imgpca7\/train_imgPCA7.csv')\ntest_imgPCA = pd.read_csv('..\/input\/test-imgpca7\/test_imgPCA7.csv')","53b2a1cd":"#Image\u306e\u30ab\u30e9\u30e0\u3092\u96c6\u7d04\ndf_imgPCA = pd.concat([train_imgPCA,test_imgPCA],axis=0).reset_index(drop=True)","7e4b2074":"# 0\u306fc0\u3068c1\u30011\u306fc2\n\ntest_reviews = test2.rename(columns={'0': 'separete'})","44a05c4d":"test_reviews","1e199022":"train_reviews = train['user_reviews']","90292dc1":"train_reviews","c537ced4":"train_reviews = train_reviews.map({'c0':0, 'c1':0, 'c2':1})\ntrain_reviews = pd.DataFrame(train_reviews)\ntrain_reviews = train_reviews.rename(columns={'user_reviews': 'fake_reviews'})","f54c5556":"train = pd.concat([train,train_reviews],axis=1)","5fd3e823":"test = pd.concat([test,test2],axis=1)","6d47932d":"test = test.rename(columns={'0': 'fake_reviews'})","545d450a":"train['is_train'] = True\ntest['user_reviews'] = np.nan\ntest['is_train'] = False\n\ndf = pd.concat([train, test], axis=0).reset_index(drop=True)\n\ndf_separeter = df['is_train']\ndf_reviews = df['user_reviews']\ndf_fake = df['fake_reviews']","68e623f8":"df_after = pd.concat([tags_df,df_bow,description_bert4,df_imgPCA,df_separeter,df_reviews,df_fake], axis=1)\ndf = pd.concat([df,text_svd_df,df_tfid], axis=1)","0a0152cd":"train_c0c1 =  df[df['is_train']==True].reset_index(drop=True)\ntrain_c0c1 =  train_c0c1[train_c0c1['fake_reviews']==0].reset_index(drop=True)\ntrain_c2 = df[df['is_train']==True].reset_index(drop=True)\ntrain_c2 = train_c2[train_c2['fake_reviews']==1].reset_index(drop=True)\ntest_c0c1 =  df[df['is_train']==False].reset_index(drop=True)\ntest_c0c1 =  test_c0c1[test_c0c1['fake_reviews']==0].reset_index(drop=True)\ntest_c2 = df[df['is_train']==False].reset_index(drop=True)\ntest_c2 = test_c2[test_c2['fake_reviews']==1].reset_index(drop=True)","17ae5a93":"train_after_c0c1 =  df_after[df_after['is_train']==True].reset_index(drop=True)\ntrain_after_c0c1 =  train_after_c0c1[train_after_c0c1['fake_reviews']==0].reset_index(drop=True)\ntrain_after_c2 = df_after[df_after['is_train']==True].reset_index(drop=True)\ntrain_after_c2 = train_after_c2[train_after_c2['fake_reviews']==1].reset_index(drop=True)\ntest_after_c0c1 =  df_after[df_after['is_train']==False].reset_index(drop=True)\ntest_after_c0c1 =  test_after_c0c1[test_after_c0c1['fake_reviews']==0].reset_index(drop=True)\ntest_after_c2 = df_after[df_after['is_train']==False].reset_index(drop=True)\ntest_after_c2 = test_after_c2[test_after_c2['fake_reviews']==1].reset_index(drop=True)","fafbaf21":"train_c0c1['number'] = train_c0c1.index\ntrain_c2['number'] = train_c2.index\ntest_c0c1['number'] = test_c0c1.index\n#test_c2['number'] = test_c2.index","c4f321f7":"train_c0c1_number = train_c0c1['number']\ntrain_c2_number = train_c2['number']\ntest_c0c1_number = test_c0c1['number']\ntest_c2_name = test_c2['name']","df22cf3f":"train_c0c1 = train_c0c1.drop(columns=['fake_reviews'])\ntrain_c2 = train_c2.drop(columns=['fake_reviews'])\ntest_c0c1 = test_c0c1.drop(columns=['fake_reviews'])\n#test_c2 = test_c2.drop(columns=['fake_reviews'])","556592cd":"#\u3000\u8a08\u7b97\u6e08\u307f\u306esubmission\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u3092\u78ba\u8a8d\u3059\u308b\n#!cd \/kaggle\/input\/train-albert-pca0126\/&& ls","dbcfd5f4":"df_c0c1 = pd.concat([train_c0c1,test_c0c1], axis=0).reset_index(drop=True)\ndf_after_c0c1 = pd.concat([train_after_c0c1,test_after_c0c1], axis=0).reset_index(drop=True)","a65638f7":"#recommended,minimum_requirements\u306e{}\u3092NaN\u306b\u5909\u66f4\ndf_c0c1['recommended_requirements'] = df_c0c1['recommended_requirements'].replace('{}', np.nan)\ndf_c0c1['minimum_requirements'] = df_c0c1['minimum_requirements'].replace('{}', np.nan)","6835de0d":"#starter\u304b\u3089'categories'\u3001'minimum_requirements'\u3092\u5916\u3059\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u307e\u307eCatboost\u306b\u6e21\u3059\u305f\u3081\uff09\ndef eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n\nfor column in ['popular_tags', 'recommended_requirements']:\n    df_c0c1[column] = df_c0c1[column].apply(eval_data)","cd21bcb6":"#starter\u306e\u307e\u307e\ndf_c0c1['user_reviews'].hist()","031925b5":"df_c0c1.tail(1)","5e56d7ad":"#Catboost\u306b\u6e21\u3059T\u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u3066\u304a\u304f\ntrain_dummy1= train_c0c1['developer'].copy()\ntrain_dummy2= train_c0c1['categories'].copy()\ntrain_dummy3= train_c0c1['minimum_requirements'].copy()\ntrain_dummy4= train_c0c1['price'].copy()\ntrain_dummy5= train_c0c1['release_date'].copy()\ntrain_dummy = pd.concat([train_dummy1,train_dummy2,train_dummy3,train_dummy4,train_dummy5], axis=1)\n\ntest_dummy1= test_c0c1['developer'].copy()\ntest_dummy2= test_c0c1['categories'].copy()\ntest_dummy3= test_c0c1['minimum_requirements'].copy()\ntest_dummy4= test_c0c1['price'].copy()\ntest_dummy5= test_c0c1['release_date'].copy()\n\ntest_dummy = pd.concat([test_dummy1,test_dummy2,test_dummy3,test_dummy4,test_dummy5], axis=1)","921ca4bc":"# 'developer'\u3001'categories'\u3001'minimum_requirements'\u306e\u30c7\u30fc\u30bf\u3092str\u578b\u306b\u5909\u63db\ntrain_dummy['developer'] = train_dummy['developer'].astype(str)\ntest_dummy['developer'] = test_dummy['developer'].astype(str)\ntrain_dummy['categories'] = train_dummy['categories'].astype(str)\ntest_dummy['categories'] = test_dummy['categories'].astype(str)\ntrain_dummy['minimum_requirements'] = train_dummy['minimum_requirements'].astype(str)\ntest_dummy['minimum_requirements'] = test_dummy['minimum_requirements'].astype(str)\ntrain_dummy['price'] = train_dummy['price'].astype(str)\ntest_dummy['price'] = test_dummy['price'].astype(str)\ntrain_dummy['release_date'] = train_dummy['release_date'].astype(str)\ntest_dummy['release_date'] = test_dummy['release_date'].astype(str)","f489d7ef":"\ntrain_dummy.rename(columns={'developer': 'developer_str'}, inplace=True)\ntest_dummy.rename(columns={'developer': 'developer_str'}, inplace=True)\ntrain_dummy.rename(columns={'categories': 'categories_str'}, inplace=True)\ntest_dummy.rename(columns={'categories': 'categories_str'}, inplace=True)\ntrain_dummy.rename(columns={'minimum_requirements': 'minimum_requirements_str'}, inplace=True)\ntest_dummy.rename(columns={'minimum_requirements': 'minimum_requirements_str'}, inplace=True)\ntrain_dummy.rename(columns={'price': 'price_str'}, inplace=True)\ntest_dummy.rename(columns={'price': 'price_str'}, inplace=True)\ntrain_dummy.rename(columns={'release_date': 'release_date_str'}, inplace=True)\ntest_dummy.rename(columns={'release_date': 'release_date_str'}, inplace=True)","d211b187":"#dummy\u306e\u30ab\u30e9\u30e0\u3092\u96c6\u7d04\ndf_dummy = pd.concat([train_dummy,test_dummy],axis=0).reset_index(drop=True)","83d1a264":"df2 = df_c0c1.copy()\ndf3 = df_c0c1.copy()","33f1bfd3":"df3['publisher'] = df3['publisher'].astype(str)\ndf3['minimum_requirements'] = df3['minimum_requirements'].astype(str)\ndf3['recommended_requirements'] = df3['recommended_requirements'].astype(str)","1eabb570":"#'publisher','minimum_requirements','recommended_requirements'\u306eNaN\u306e\u6709\u7121\u3067\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u3059\u308b\nconditions = [(df3['publisher'] == 'nan') & (df3['minimum_requirements'] == 'nan')& (df3['recommended_requirements'] == 'nan'),\n             (df3['publisher'] == 'nan') & (df3['minimum_requirements'] == 'nan')& (df3['recommended_requirements'] != 'nan'),\n             (df3['publisher'] == 'nan') & (df3['minimum_requirements'] != 'nan')& (df3['recommended_requirements'] == 'nan'),\n             (df3['publisher'] != 'nan') & (df3['minimum_requirements'] == 'nan')& (df3['recommended_requirements'] == 'nan'),\n             (df3['publisher'] != 'nan') & (df3['minimum_requirements'] != 'nan')& (df3['recommended_requirements'] == 'nan'),\n             (df3['publisher'] != 'nan') & (df3['minimum_requirements'] == 'nan')& (df3['recommended_requirements'] != 'nan'),\n             (df3['publisher'] == 'nan') & (df3['minimum_requirements'] != 'nan')& (df3['recommended_requirements'] != 'nan')]\nchoices = ['0','1','2','3','4','5','6']\ndf3['Unkown'] = np.select(conditions, choices, default = '9999')\n\nUnkown = df3['Unkown']","2c652a9b":"#starter\u306e\u307e\u307e\ndef category_numeric_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    # \u30bf\u30b0\u306e\u6570\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df['popular_tags_len'] = df['popular_tags'].fillna(\"\").apply(len)\n    df['categories_len'] = df['categories'].fillna(\"\").apply(len)\n    \n    # \u5024\u6bb5\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df = price_preprocess(df)\n    \n    # developer\u3068publisher\u3092label encode\u3059\u308b\u3002\n    for column in ['developer', 'publisher']:\n        df = apply_label_encode(df, column)\n    \n    # \u5e74\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    # \u6b63\u898f\u8868\u73fe\u3067\u5e74\u3092\u62bd\u51fa\u3059\u308b\u3002\n    df['year'] = df['release_date'].str.extract(r'(\\d{4})')\n    df['year'] = df['year'].astype(float)\n    return df\n\ndef price_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['price'] = df['price'].replace({'free':0})\n    price_null_index = df[df['price']==''].index\n    df.loc[price_null_index, 'price'] = -1\n    df['price'] = df['price'].astype(float)\n    return df\n\ndef apply_label_encode(df:pd.DataFrame, column:str)-> pd.DataFrame:\n    label_df = df[~df[column].isnull()]\n    le = LabelEncoder()\n    le_data = le.fit_transform(label_df[column])\n    label_df_index = label_df.index\n    df.loc[label_df_index, f'{column}_label_encoding'] = le_data\n    return df\n","5d39e257":"#starter\u306e\u307e\u307e\ndf = category_numeric_preprocess(df_c0c1)","41930342":"#starter\u306e\u307e\u307e\n#nlp_df = pd.concat([text_svd_df], axis=1)","60deaa1a":"#starter\u306e\u307e\u307e\nuse_df = df_c0c1.copy()\n#use_columns_common = ['price', 'popular_tags_len', 'categories_len',\n#               'year', 'user_reviews',\n#               'is_train']\n#use_df_common = use_df[use_columns_common]","b3e120ec":"#starter\u306e\u307e\u307e\nuse_df = pd.concat([use_df], axis=1)","b80310f0":"use_df.head(2)","f351e344":"#starter\u306e\u307e\u307e\nuse_df_ = use_df.drop(columns=['is_train','user_reviews','year','price','name','release_date','developer','publisher',\n                              'popular_tags','categories','description','minimum_requirements','recommended_requirements',\n                              'img_path','number','developer_label_encoding','publisher_label_encoding'])","cb465950":"use_df_.head(2)","cd3ae852":"#TFID\u304b\u3089\u306eDrop\nuse_df2_ = use_df_.drop(columns=['inc_tfid_dev','llc_tfid_dev','ltd_tfid_dev','aaa_tfid_min'])","0137bb82":"use_df2_.isnull().sum() ","66d5f606":"#K-means\u3067\u306e\u5165\u529b\u7279\u5fb4\u91cf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u6a19\u6e96\u5316\u5b9f\u65bd\nfrom sklearn.preprocessing import StandardScaler\n\n# \u6a19\u6e96\u5316\nstandard = StandardScaler()\nuse_df_std = pd.DataFrame(standard.fit_transform(use_df2_))","d7cc550b":"#k-meand\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fcNo\u3068\u5404row\u306e\u8ddd\u96e2\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\u3059\u308b\n\nfrom sklearn.cluster import KMeans\n\nnum_cluster=3 # cluster\u6570\n \nclusters = KMeans(n_clusters = num_cluster, random_state = 71,\n                  init='k-means++', n_init=10, max_iter=300,\n                  tol=0.0001,precompute_distances='auto',\n                  verbose=0,copy_x=True, n_jobs=1)\nclusters.fit(use_df_std)\ncenters = clusters.cluster_centers_\n\nclusters.fit_predict(use_df_std)\nnumbers = clusters.predict(use_df_std)\nnumbers_features = pd.DataFrame(numbers, index = use_df_std.index)\n\ncolumns = use_df_std.columns\nclust_features = pd.DataFrame(index = use_df_std.index)\nfor i in range(len(centers)):\n    clust_features[str(num_cluster)+'_clust_dist_'+ str(i + 1)] = (use_df_std- centers[i]).applymap(abs).apply(sum, axis = 1)\n\nuse_df = pd.concat([use_df,clust_features,numbers_features],axis=1)\nuse_df = use_df.rename(columns={0: 'K_number'})","f72c3a72":"#\u30af\u30e9\u30b9\u30bf\u30fcNo\u306e\u7279\u5fb4\u91cf\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306b\u5909\u63db\uff08groupby\u3059\u308b\u305f\u3081\uff09\nuse_df['K_number'] = use_df['K_number'].astype(str)\n\n#\u5e74\u306e\u7279\u5fb4\u91cf\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306b\u5909\u63db\uff08groupby\u3059\u308b\u305f\u3081\uff09\nuse_df['year'] = use_df['year'].astype(str)","45981493":"#Year\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceMean'] = use_df.groupby(\"year\")[\"price\"].transform('mean')\n#Year\u6bce\u306e\u30e1\u30c7\u30a3\u30a2\u30f3\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceMedian'] = use_df.groupby(\"year\")[\"price\"].transform('median')\n#Year\u6bce\u306e\u6700\u9ad8\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceMax'] = use_df.groupby(\"year\")[\"price\"].transform('max')\n#Year\u6bce\u306e\u5408\u8a08\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceSum'] = use_df.groupby(\"year\")[\"price\"].transform('sum')\n#Year\u6bce\u306e\u4fa1\u683c\u306e\u6a19\u6e96\u504f\u5dee\u3092\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceStd'] = use_df.groupby(\"year\")[\"price\"].transform('std')\n#year\u6bce\u306e\u4fa1\u683c\u306e\u5206\u6563\u3092\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['YearPriceVar'] = use_df.groupby(\"year\")[\"price\"].transform('var')","dd2d218a":"#year\u6bce\u306e\u4fa1\u683c\u306e\u5e73\u5747\u304b\u3089\u306e\u4e0a\u4e0b\u3092\u5272\u5408\u3067\u7b97\u51fa\nuse_df['YearPriceRatio1'] = use_df['price'] \/ use_df['YearPriceMean']\nuse_df['YearPriceRatio2'] = use_df['price'] \/ use_df['YearPriceMedian']\nuse_df['YearPriceRatio3'] = use_df['price'] \/ use_df['YearPriceMax']\nuse_df['YearPriceRatio4'] = use_df['price'] \/ use_df['YearPriceSum']\nuse_df['YearPriceRatio5'] = use_df['price'] \/ use_df['YearPriceStd']","3afb2220":"#k-means\u30af\u30e9\u30b9\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceMean'] = use_df.groupby([\"K_number\"])[\"price\"].transform('mean')\n#k-means\u30af\u30e9\u30b9\u6bce\u306e\u30e1\u30c7\u30a3\u30a2\u30f3\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceMedian'] = use_df.groupby([\"K_number\"])[\"price\"].transform('median')\n#k-means\u30af\u30e9\u30b9\u6bce\u306e\u6700\u5927\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceMax'] = use_df.groupby([\"K_number\"])[\"price\"].transform('max')\n#k-means\u30af\u30e9\u30b9\u6bce\u306e\u5408\u8a08\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceSum'] = use_df.groupby([\"K_number\"])[\"price\"].transform('sum')\n#k-means\u30af\u30e9\u30b9\u6bce\u306e\u4fa1\u683c\u306e\u6a19\u6e96\u504f\u5dee\u3092\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceStd'] = use_df.groupby([\"K_number\"])[\"price\"].transform('std')\n#k-means\u30af\u30e9\u30b9\u6bce\u306e\u4fa1\u683c\u306e\u5206\u6563\u3092\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['KmeanPriceVar'] = use_df.groupby([\"K_number\"])[\"price\"].transform('var')","e880b076":"use_df['KmeanPriceRatio1'] = use_df['price'] \/ use_df['KmeanPriceMean']\nuse_df['KmeanPriceRatio2'] = use_df['price'] \/ use_df['KmeanPriceMedian']\nuse_df['KmeanPriceRatio3'] = use_df['price'] \/ use_df['KmeanPriceMax']\nuse_df['KmeanPriceRatio4'] = use_df['price'] \/ use_df['KmeanPriceSum']\nuse_df['KmeanPriceRatio5'] = use_df['price'] \/ use_df['KmeanPriceStd']","c1b8d927":"df3['price'] = df3['price'].replace({'free':0})\ndf3['price'] = df3['price'].astype(float)","84c7bdfc":"#release_date\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['release_datePriceMean'] = df3.groupby([\"release_date\"])[\"price\"].transform('mean')\n#release_date\u6bce\u306e\u30e1\u30c7\u30a3\u30a2\u30f3\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\nuse_df['release_datePriceMedian'] = df3.groupby([\"release_date\"])[\"price\"].transform('median')","342dd09c":"use_df['release_datePriceRatio1'] = use_df['price'] \/ use_df['release_datePriceMean']\nuse_df['release_datePriceRatio2'] = use_df['price'] \/ use_df['release_datePriceMedian']","c4723904":"#use_df = use_df.drop(columns=['is_train','user_reviews'])","c122ae59":"use_df_fin = pd.concat([use_df,df_dummy,Unkown,df_after_c0c1], axis=1)","3ce24ebe":"use_df_fin = use_df_fin.loc[:,~use_df_fin.columns.duplicated()]","c2a435ed":"use_df_fin.head(1)","6cbfca66":"use_df_fin = use_df_fin.drop(columns=['fake_reviews','number','release_date','developer','publisher','popular_tags',\n                                     'categories','description','minimum_requirements','recommended_requirements',\n                                     'img_path','price'])","6fe51cdf":"#starter\u306e\u307e\u307e\ntrain_c0c1_fin = use_df_fin[use_df_fin['is_train']==True].reset_index(drop=True)\ntest_c0c1_fin =  use_df_fin[use_df_fin['is_train']!=True].reset_index(drop=True)","90c03e0f":"train_c0c1_fin_name = train_c0c1_fin['name']\ntest_c0c1_fin_name = test_c0c1_fin['name']","c18bec89":"#starter\u306e\u307e\u307e\ntrain = train_c0c1_fin.drop(columns=['is_train','name'])\ntest = test_c0c1_fin.drop(columns=['is_train','name'])","46623b81":"#starter\u306e\u307e\u307e\ntrain.shape, test.shape","d8cb3f8d":"#Catboost\u306b\u6e21\u3059\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5b9a\u7fa9\ncategorical_features = ['developer_str','minimum_requirements_str','categories_str','Unkown','Month','price_str','release_date_str']","b02414cf":"#'user_reviews'\u3092Drop\u3059\u308b\nX_train = train.copy().drop(['user_reviews'], axis=1)\ny_train = train['user_reviews']\nX_test = test.copy().drop(['user_reviews'], axis=1)","55871aa3":"X_train.head(1)","609f262d":"y_train.head(1)","56307e1d":"X_test.head(1)","31466af5":"#starter\u306e\u307e\u307e\ny_train = y_train.map({'c0':0, 'c1':1})","baf2ef39":"# \uff15\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u4e88\u6e2c\u30b9\u30b3\u30a2\u3092\u898b\u7a4d\u3082\u308b\uff08\u30e2\u30c7\u30eb\u306fCatboost\u3001scv\u306fStratifiedKFold\u306f\u30b9\u30b3\u30a2\u304c\u843d\u3061\u308b\u306e\u3067\u4fdd\u7559\uff09\nfrom catboost import CatBoost, CatBoostRegressor, CatBoostClassifier\nfrom catboost import Pool\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\n\naccs = []\n\ncv = KFold(n_splits=5, random_state=71, shuffle=True)\n#scv = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train,y_train))):\n    X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]   \n\n    train_pool = Pool(X_train_, label=y_train_,cat_features=categorical_features)  \n    test_pool = Pool(X_val, y_val,cat_features=categorical_features)\n    \n    params = {'loss_function':'MultiClass','num_boost_round': 9999,'depth':8,\n             'learning_rate':0.01,'od_type':'Iter','od_wait':20,'eval_metric':'AUC',\n             'one_hot_max_size':5}\n    \n    model = CatBoost(params)\n    model.fit(train_pool, eval_set=[test_pool])\n   \n    y_pred = model.predict(test_pool,prediction_type='Class')\n    \n    acc = accuracy_score(y_val, y_pred)\n    accs.append(acc)\n    print('CV Score of Fold_%d is %f' % (i, acc))\n    \nprint(accs)\n\n#CV\u5f8c\u306e\u5206\u5e03\u3092\u307f\u3066\u307f\u307e\u3059\ny_pred = pd.DataFrame(y_pred)\nn=1.0\ny_pred_chk = pow(y_pred,n)\nsns.histplot(y_pred_chk)","e5f8a8b3":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\ny_pred_train = np.array(accs).mean()\ny_pred_train","41bb1e56":"#Catboost\u3067\u5168\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\uff08best_iter\u304c\u8a2d\u5b9a\u3067\u304d\u306a\u3044\uff09\n#best_iter = model.best_iteration_\nparams2 = {'loss_function':'MultiClass','num_boost_round': 800,'depth':8,\n          'learning_rate':0.01,'od_type':'Iter','od_wait':20,'eval_metric':'AUC',\n          'one_hot_max_size':5}\nmodel = CatBoost(params2)\nmodel.fit(X_train, y_train,cat_features=categorical_features)","b8e6795b":"# \u3044\u3088\u3044\u3088\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u307e\u3059\ny_pred_test = model.predict(X_test)\ny_pred_test","b8d3a79b":"y_pred_test","cb6eef9d":"#starter\u306e\u307e\u307e\ntest_prediction = np.argmax(y_pred_test, axis=1)\npred_df = pd.DataFrame(test_prediction)","015c8279":"pred_df","beca246b":"pred_df_c0c1 = pred_df[0].map({0:'c0', 1:'c1'})\npred_df_c0c1 = pd.concat([pred_df_c0c1, test_c0c1_fin_name], axis=1)","785c5525":"pred_df_c0c1","6d203ecc":"pred_df_c2 = test_c2['fake_reviews']\ntest_c2_fin_name = test_c2['name']","a24a5a7e":"pred_df_c2 = pd.DataFrame(pred_df_c2)\npred_df_c2 = pred_df_c2.rename(columns={'fake_reviews': 0})","11852f5b":"pred_df_c2 = pred_df_c2[0].map({1:'c2'})\npred_df_c2 = pd.concat([pred_df_c2, test_c2_fin_name], axis=1)","b952ca9e":"pred_df_c2","4a9c6cb1":"pred_df_fin = pd.concat([pred_df_c0c1, pred_df_c2], axis=0)\npred_df_fin = pred_df_fin.rename(columns={'name': 'fake_name'})\npred_df_fin = pred_df_fin.rename(columns={0: 'user_reviews'})\npred_df_fin = pred_df_fin.reset_index(drop=True)\npred_df_fin = pred_df_fin.sort_values(by=['fake_name'], ascending=[False])\npred_df_fin = pred_df_fin.reset_index(drop=True)\npred_df_fin","bc4b6c3b":"#starter\u306e\u307e\u307e\nsub = pd.read_csv('..\/input\/data-science-winter-osaka2\/sample_submission.csv')\nsub['number'] = sub.index\nsub = sub.sort_values(by=['name'], ascending=[False])\nsub = sub.drop(columns=['user_reviews'])\nsub = sub.reset_index(drop=True)\nsub","d06d870b":"sub_fin = pd.concat([sub,pred_df_fin], axis=1)\nsub_fin","a1bd131b":"sub_fin = sub_fin.sort_values(by=['number'], ascending=[True])\nsub_fin = sub_fin.reset_index(drop=True)\nsub_fin = sub_fin.drop(columns=['number','fake_name'])\nsub_fin","9f86eb38":"#starter\u306e\u307e\u307e\nsub_fin.to_csv('submission.csv', index=False)","c904f46b":"# feature importance \u306e\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(20, 250))\nsns.set(font_scale = 2.2)\nimportances = pd.Series(model.feature_importances_, index = X_train.columns)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\")\nplt.title(\"imporance in the catboost Model\")\nplt.show()","6ad77bb2":"# Submisson file\u3092\u4f5c\u308b"}}