{"cell_type":{"e851ab0d":"code","87fb3820":"code","d70df121":"code","a5a28a6c":"code","aa3334b6":"code","843aa17f":"code","786d92ff":"code","a12a2510":"code","590cfc30":"code","2a607e52":"code","6508a3d5":"code","c398447b":"code","f1138fa7":"code","6bd840eb":"code","477385fc":"code","f78c7af6":"code","b24f0588":"code","c5144911":"code","186d715a":"code","6da09191":"code","72e7befd":"code","88f9db30":"code","ec6d30a9":"code","5e413fc2":"code","d54b6d1b":"code","585ac8bc":"code","ac987f63":"code","c73d945e":"code","10b5d61d":"code","05f3cdc6":"code","cc0f5d1d":"markdown"},"source":{"e851ab0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87fb3820":"# Load the training data\nimport pandas as pd\nmy_data = pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv\")","d70df121":"my_data.head()","a5a28a6c":"# Combine all textual data into a single column\nmy_data['total_text'] = my_data['TITLE'] + my_data['ABSTRACT']","aa3334b6":"my_data.set_index('ID', inplace = True)\nmy_data.head()","843aa17f":"my_data = my_data[['total_text', 'Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']]","786d92ff":"my_data.head()","a12a2510":"# Clean the textual column\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\ndef word_lemmatizer(text):\n    lem_text = [WordNetLemmatizer().lemmatize(i) for i in text]\n    return lem_text","590cfc30":"import re\ndef  clean_text(df, text_field, new_text_field_name):\n    df[new_text_field_name] = df[text_field].str.lower()\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"\\d+\", \"\", elem))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: word_tokenize(x))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: word_lemmatizer(x))\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda x: ' '.join(x))\n    return df","2a607e52":"train_clean_df = clean_text(my_data, 'total_text', 'total_text_clean')","6508a3d5":"final_df = train_clean_df[['total_text_clean', 'Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']]\nfinal_df.head(5)","c398447b":"final_df['labels'] = final_df.apply(lambda x: list([x['Computer Science'], x['Physics'], x['Mathematics'], x['Statistics'], x['Quantitative Biology'], x['Quantitative Finance']]),axis=1) \nfinal_df.head()","f1138fa7":"train_df = final_df[['total_text_clean','labels']]\ntrain_df.columns = ['text','labels']\ntrain_df.head()","6bd840eb":"!pip install simpletransformers","477385fc":"from simpletransformers.classification import MultiLabelClassificationModel","f78c7af6":"# Create a MultiLabelClassificationModel\nmodel = MultiLabelClassificationModel(\n    \"roberta\",\n    \"roberta-base\",\n    num_labels=6,\n    args={\"reprocess_input_data\": True, \"overwrite_output_dir\": True, \"num_train_epochs\": 5},\n)","b24f0588":"model.train_model(train_df)","c5144911":"test_df = pd.read_csv(\"\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv\")\ntest_df['total_text'] = test_df['TITLE'] + test_df['ABSTRACT']","186d715a":"test_df.set_index('ID', inplace = True)\ntest_df.head()","6da09191":"test_clean_df = clean_text(test_df, 'total_text', 'total_text_clean')","72e7befd":"test_clean_df = test_clean_df[['total_text_clean']]\ntest_clean_df.head()","88f9db30":"test_clean_df.shape","ec6d30a9":"prediction_list = test_clean_df.total_text_clean.tolist()","5e413fc2":"predictions, raw_outputs = model.predict(prediction_list)","d54b6d1b":"test_clean_df['predictions'] = predictions","585ac8bc":"test_clean_df[['Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']] = pd.DataFrame(test_clean_df['predictions'].tolist(), index= test_clean_df.index)","ac987f63":"test_clean_df.head()","c73d945e":"submission_df = test_clean_df[['Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']]","10b5d61d":"submission_df.head()","05f3cdc6":"submission_df.to_csv(\"submission_df.csv\")","cc0f5d1d":"https:\/\/www.kaggle.com\/vetrirah\/janatahack-independence-day-2020-ml-hackathon\/code"}}