{"cell_type":{"6e841723":"code","96f4ee2a":"code","323bd1e5":"code","aff27a64":"code","a2954324":"code","7ce674af":"code","cee17bd0":"code","ac0503ba":"code","3b5c1904":"code","887b1584":"code","1c02f0bf":"code","11dc713b":"code","325b23d1":"code","ea1c7c8b":"code","cb017b75":"code","04e8ecd8":"code","93df1dc7":"code","70731667":"code","77066d01":"code","e9be7b05":"code","38032b3f":"code","3f024bf9":"code","ac00bb4a":"code","18139535":"code","873a6a43":"code","e34a5161":"code","665b5b79":"code","37d13f7a":"code","bddec99e":"code","006c20da":"code","50e397f4":"markdown","e4c01590":"markdown","2a065911":"markdown","d7a6c262":"markdown","0fc82e11":"markdown","99fdf3aa":"markdown","d8e7eea6":"markdown","d5153b50":"markdown","484784c2":"markdown","406b1f38":"markdown","7a3679d0":"markdown","4bbf0ed4":"markdown","8fd6169c":"markdown","dfc71955":"markdown","935ccfa0":"markdown","552a4bcf":"markdown","d6b8ec08":"markdown","c1182477":"markdown","28dc6914":"markdown","3de84b35":"markdown","138fab98":"markdown","c80a98e9":"markdown","9db4d156":"markdown"},"source":{"6e841723":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","96f4ee2a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import class_weight\nimport warnings\nwarnings.filterwarnings('ignore')\n","323bd1e5":"train_df=pd.read_csv('\/kaggle\/input\/heartbeat\/mitbih_train.csv',header=None)\ntest_df=pd.read_csv('\/kaggle\/input\/heartbeat\/mitbih_test.csv',header=None)","aff27a64":"train_df[187]=train_df[187].astype(int)\nequilibre=train_df[187].value_counts()\nprint(equilibre)\n\n","a2954324":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['n','q','v','s','f'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","7ce674af":"from sklearn.utils import resample\ndf_1=train_df[train_df[187]==1]\ndf_2=train_df[train_df[187]==2]\ndf_3=train_df[train_df[187]==3]\ndf_4=train_df[train_df[187]==4]\ndf_0=(train_df[train_df[187]==0]).sample(n=20000,random_state=42)\n\ndf_1_upsample=resample(df_1,replace=True,n_samples=20000,random_state=123)\ndf_2_upsample=resample(df_2,replace=True,n_samples=20000,random_state=124)\ndf_3_upsample=resample(df_3,replace=True,n_samples=20000,random_state=125)\ndf_4_upsample=resample(df_4,replace=True,n_samples=20000,random_state=126)\n\ntrain_df=pd.concat([df_0,df_1_upsample,df_2_upsample,df_3_upsample,df_4_upsample])","cee17bd0":"equilibre=train_df[187].value_counts()\nprint(equilibre)\n","ac0503ba":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['n','q','v','s','f'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","3b5c1904":"c=train_df.groupby(187,group_keys=False).apply(lambda train_df : train_df.sample(1))","887b1584":"c","1c02f0bf":" plt.plot(c.iloc[0,:186])","11dc713b":"def plot_hist(class_number,size,min_):\n    img=train_df.loc[train_df[187]==class_number].values\n    img=img[:,min_:size]\n    img_flatten=img.flatten()\n\n    final1=np.arange(min_,size)\n    for i in range (img.shape[0]-1):\n        tempo1=np.arange(min_,size)\n        final1=np.concatenate((final1, tempo1), axis=None)\n    print(len(final1))\n    print(len(img_flatten))\n    plt.hist2d(final1,img_flatten, bins=(80,80),cmap=plt.cm.jet)\n    plt.show()","325b23d1":"plot_hist(0,70,5)","ea1c7c8b":" plt.plot(c.iloc[1,:186])","cb017b75":"plot_hist(1,50,5)","04e8ecd8":" plt.plot(c.iloc[2,:186])","93df1dc7":"plot_hist(2,60,30)","70731667":"plt.plot(c.iloc[3,:186])","77066d01":"plot_hist(3,60,25)","e9be7b05":"plt.plot(c.iloc[4,:186])","38032b3f":"plot_hist(4,50,18)","3f024bf9":"def add_gaussian_noise(signal):\n    noise=np.random.normal(0,0.05,186)\n    return (signal+noise)\n","ac00bb4a":"tempo=c.iloc[0,:186]\nbruiter=add_gaussian_noise(tempo)\n\nplt.subplot(2,1,1)\nplt.plot(c.iloc[0,:186])\n\nplt.subplot(2,1,2)\nplt.plot(bruiter)\n\nplt.show()\n\n","18139535":"target_train=train_df[187]\ntarget_test=test_df[187]\ny_train=to_categorical(target_train)\ny_test=to_categorical(target_test)","873a6a43":"X_train=train_df.iloc[:,:186].values\nX_test=test_df.iloc[:,:186].values\n#for i in range(len(X_train)):\n#    X_train[i,:186]= add_gaussian_noise(X_train[i,:186])\nX_train = X_train.reshape(len(X_train), X_train.shape[1],1)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],1)","e34a5161":"def network(X_train,y_train,X_test,y_test):\n    \n\n    im_shape=(X_train.shape[1],1)\n    inputs_cnn=Input(shape=(im_shape), name='inputs_cnn')\n    conv1_1=Convolution1D(128, (50), activation='relu', input_shape=im_shape)(inputs_cnn)\n    conv1_1=BatchNormalization()(conv1_1)\n    pool1=MaxPool1D(pool_size=(2), strides=(1), padding=\"same\")(conv1_1)\n    conv2_1=Convolution1D(32, (7), activation='relu', input_shape=im_shape)(pool1)\n    conv2_1=BatchNormalization()(conv2_1)\n    pool2=MaxPool1D(pool_size=(2), strides=(1), padding=\"same\")(conv2_1)\n    conv3_1=Convolution1D(32, (10), activation='relu', input_shape=im_shape)(pool2)\n    conv4_1=Convolution1D(128, (5), activation='relu', input_shape=im_shape)(conv3_1)\n    #conv3_1=BatchNormalization()(conv3_1)\n    pool3=MaxPool1D(pool_size=(2), strides=(1), padding=\"same\")(conv4_1)\n    conv5_1=Convolution1D(128, (5), activation='relu', input_shape=im_shape)(pool3)\n    pool4=MaxPool1D(pool_size=(2), strides=(1), padding=\"same\")(conv5_1)\n    conv6_1=Convolution1D(512, (5), activation='relu', input_shape=im_shape)(pool4)\n    conv7_1=Convolution1D(128, (3), activation='relu', input_shape=im_shape)(conv6_1)\n    \n    flatten=Flatten()(conv7_1)\n    dense_end1 = Dense(512, activation='relu')(flatten)\n    #dense_end2 = Dense(32, activation='relu')(dense_end1)\n    main_output = Dense(5, activation='softmax', name='main_output')(dense_end1)\n    \n    \n    model = Model(inputs= inputs_cnn, outputs=main_output)\n    model.compile(optimizer='adam', loss='categorical_crossentropy',metrics = ['accuracy'])\n    \n    \n    callbacks = [EarlyStopping(monitor='val_loss', patience=8),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n\n    history=model.fit(X_train, y_train,epochs=40,callbacks=callbacks, batch_size=32,validation_data=(X_test,y_test))\n    model.load_weights('best_model.h5')\n    return(model,history)","665b5b79":"def evaluate_model(history,X_test,y_test,model):\n    scores = model.evaluate((X_test),y_test, verbose=0)\n    print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n    \n    print(history)\n    fig1, ax_acc = plt.subplots()\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Model - Accuracy')\n    plt.legend(['Training', 'Validation'], loc='lower right')\n    plt.show()\n    \n    fig2, ax_loss = plt.subplots()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model- Loss')\n    plt.legend(['Training', 'Validation'], loc='upper right')\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.show()\n    target_names=['0','1','2','3','4']\n    \n    y_true=[]\n    for element in y_test:\n        y_true.append(np.argmax(element))\n    prediction_proba=model.predict(X_test)\n    prediction=np.argmax(prediction_proba,axis=1)\n    cnf_matrix = confusion_matrix(y_true, prediction)\n    ","37d13f7a":"from keras.layers import Dense, Convolution1D, MaxPool1D, Flatten, Dropout\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers.normalization import BatchNormalization\nimport keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel,history=network(X_train,y_train,X_test,y_test)\n\n","bddec99e":"evaluate_model(history,X_test,y_test,model)\ny_pred=model.predict(X_test)\n","006c20da":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(10, 10))\nplot_confusion_matrix(cnf_matrix, classes=['N', 'S', 'V', 'F', 'Q'],normalize=True,\n                      title='Confusion matrix, with normalization')\nplt.show()\n\n","50e397f4":"**Balance of dataset**","e4c01590":"**What is an ecg? **","2a065911":"Here is a representation for all the class. We take all the signal and map them. Like that we have an estimation what the signal can look like.","d7a6c262":"**Classes**","0fc82e11":"In this notebook i want to predict different arrhytmia on ECG. We have two different dataset, but i will consider at start only one : mitbih.\nThe MIT-BIH Arrhythmia Database contains 48 half-hour excerpts of two-channel ambulatory ECG recordings, obtained from 47 subjects studied by the BIH Arrhythmia Laboratory between 1975 and 1979. Twenty-three recordings were chosen at random from a set of 4000 24-hour ambulatory ECG recordings collected from a mixed population of inpatients (about 60%) and outpatients (about 40%) at Boston's Beth Israel Hospital; the remaining 25 recordings were selected from the same set to include less common but clinically significant arrhythmias that would not be well-represented in a small random sample.\nsouces : https:\/\/physionet.org\/content\/mitdb\/1.0.0\/\n\n\nArrhythmia Dataset\n\n    Number of Samples: 109446\n    Number of Categories: 5\n    Sampling Frequency: 125Hz\n    Data Source: Physionet's MIT-BIH Arrhythmia Dataset\n    Classes: ['N': 0, 'S': 1, 'V': 2, 'F': 3, 'Q': 4]\n\n\n-N : Non-ecotic beats (normal beat)\n-S : Supraventricular ectopic beats\n-V : Ventricular ectopic beats\n-F : Fusion Beats\n-Q : Unknown Beats","99fdf3aa":"Resample works perfectly we can go on. ","d8e7eea6":"**Network**","d5153b50":"**Load Data**","484784c2":"In this part i will speak o n what i do to transform data. ","406b1f38":"Here is a normal beat. I don't have something particular to say on that class.  ","7a3679d0":"![image.png](attachment:image.png)\n","4bbf0ed4":"**INTRODUCTION**","8fd6169c":"**Pretreat**","dfc71955":"I use a fonction ( will depend of the version) where i add a noise to the data to generilize my train.","935ccfa0":"We can underligned a huge difference in the balanced of the classes. After some try i have decided to  choose the resample technique more than the class weights for the algorithms. ","552a4bcf":"Fusion beat :\n![3-s2.0-B9780124159365000098-f09-10-9780124159365.jpg](attachment:3-s2.0-B9780124159365000098-f09-10-9780124159365.jpg)\n\nDon't really see the difference with the previous one but i'm not an expert of ECG!","d6b8ec08":"We underlign that two class(supraventricular and fusion) is weeker than the other. maybe due to less exemple in the starter dataset. I will try to improve in the next version.","c1182477":"i take the next function from : https:\/\/www.kaggle.com\/coni57\/model-from-arxiv-1805-00794","28dc6914":"I take one sample per class and i store it in a datafrmae in order to have an exmeple. ","3de84b35":"I will not comment a lot this one because it correspond to other class. ","138fab98":"In this part i want to study the differente classes. ","c80a98e9":"An electrocardiogram (ECG) is a simple test that can be used to check your heart's rhythm and electrical activity.\n\nSensors attached to the skin are used to detect the electrical signals produced by your heart each time it beats.\n\nThese signals are recorded by a machine and are looked at by a doctor to see if they're unusual.\n\nAn ECG may be requested by a heart specialist (cardiologist) or any doctor who thinks you might have a problem with your heart, including your GP.\nThat's the result of this test we will analyze. ","9db4d156":"Here is an exemple of the two classes :\n\n![4-Figure2-1.png](attachment:4-Figure2-1.png)\n\nin the second and third line you have the 2 et 3 class."}}