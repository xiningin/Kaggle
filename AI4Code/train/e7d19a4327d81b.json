{"cell_type":{"b17008bc":"code","e46e596f":"code","8dd00c66":"code","ae8ed1ed":"code","b30e68e4":"code","60fa36b1":"code","e1e1ae4d":"code","8c32eb70":"code","6403ba49":"code","aa09bd77":"code","79fca974":"code","23cb2d45":"code","bfc04b76":"code","037094d2":"code","bc99c4ad":"code","f1683f2f":"code","754d0ecd":"code","c3d78071":"markdown","cbb5d79e":"markdown","c0a97cd2":"markdown","abafd9b2":"markdown","805ee9ed":"markdown","12b7bbb4":"markdown"},"source":{"b17008bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e46e596f":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","8dd00c66":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.head()","ae8ed1ed":"df.shape","b30e68e4":"df = df.drop('id',axis=1)\ndf","60fa36b1":"df = df.drop('Unnamed: 32',axis=1)\ndf","e1e1ae4d":"df.diagnosis.unique()","8c32eb70":"df['diagnosis'] = df['diagnosis'].map({'M':1,'B':0})\ndf.head()","6403ba49":"df.describe()","aa09bd77":"plt.figure(figsize=(20,20))\np = sns.heatmap(df.corr(),annot=True, square=True)\nplt.show()","79fca974":"print(df.diagnosis.value_counts())\np = df.diagnosis.value_counts().plot(kind='bar')\nplt.legend(labels=['B=0,M=1'],loc='best')\nplt.show()","23cb2d45":"x_data = df.drop(['diagnosis'],axis=1)\ny_data = df['diagnosis']","bfc04b76":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_data,y_data,test_size=0.3,stratify=y_data)","037094d2":"from sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    LogisticRegression(),\n    MLPClassifier(hidden_layer_sizes=(20,50),max_iter=10000),\n    RandomForestClassifier(max_depth=9,min_samples_split=3),\n    AdaBoostClassifier(),\n    BaggingClassifier(),\n    ]\n\nlog = []\nfor clf in classifiers:\n    clf.fit(x_train,y_train)\n    name = clf.__class__.__name__\n    \n    print('='*30)\n    print(name)\n    \n    print('****Results****')\n    test_predictions = clf.predict(x_test)\n    acc = accuracy_score(y_test, test_predictions)\n    print('Accuracy:{:.4%}'.format(acc))\n    log.append([name,acc*100])\n\nprint('='*30)\n    ","bc99c4ad":"log = pd.DataFrame(log)\nlog","f1683f2f":"log.rename(columns={0:'Classifier',1:'Accuracy'},inplace=True)\nlog","754d0ecd":"sns.barplot(x='Accuracy',y='Classifier',data=log,color='r')\n\nplt.xlabel('Accuracy %')\nplt.title('Classifier Accuracy')\nplt.show()\nprint('The best model is :',log.max())","c3d78071":"### \u89c2\u5bdf\u8bca\u65ad\uff0c\u53d1\u73b0\u764c\u75c7\u7684\u7c7b\u578b\u53ea\u67092\u79cd\n - \u5b9a\u4e49\uff1aM\u79cd\u7c7b\u7684\u764c\u75c7=1\uff0cB\u79cd\u7c7b\u7684\u764c\u75c7=0","cbb5d79e":"### \u83b7\u53d6\u8bad\u7ec3\u96c6=\u7279\u5f81\uff0c\u6807\u7b7e=\u8bca\u65ad","c0a97cd2":"- \u7ed8\u5236\u70ed\u529b\u56fe\uff0c\u67e5\u770b\u6837\u672c\u4e2d\u5143\u7d20\u7684\u76f8\u5173\u6027\n- \u4f8b\u5982\uff1aradius_mean\u548cdiagnosis\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u4e3a0.73\uff0c\u5c5e\u4e8e\u6bd4\u8f83\u9ad8\n- \u4f8b\u5982\uff1asmoothness\u548cdiagnosis\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u4e3a0.36\uff0c\u5c5e\u4e8e\u6bd4\u8f83\u4f4e","abafd9b2":"### \u5bfc\u5165\u6570\u636e\n - \u53d1\u73b0\u6570\u636eid\u548cUnamed\uff1a32\u6ca1\u6709\u4f5c\u7528\n - \u4f7f\u7528drop\u547d\u4ee4\u5220\u9664","805ee9ed":"### \u67e5\u770b\u764c\u75c7\u7c7b\u578b\u7684\u5206\u5e03\u5e76\u7528\u76f4\u65b9\u56fe\u663e\u793a","12b7bbb4":"#### diagnosis :\u764c\u75c7\u7684\u7c7b\u578b\uff1bradius\uff1a\u534a\u5f84\uff0ctexture\uff1a\u7ec4\u7ec7\u7ed3\u6784\uff0cperimeter\uff1a\u5468\u957f\uff0carea\uff1a\u7279\u5b9a\u533a\u57df\uff0csmoothness\uff1a\u5e73\u6ed1\u6027\uff0ccompactness\uff1a\u7d27\u5bc6\u6027\uff1bconcavity\uff1a\u51f9\u9762\uff1bconcave points\uff1a\u51f9\u70b9\uff1bsymmetry\uff1a\u5bf9\u79f0\uff1bfractal_dimension:\u5206\u5f62\u7ef4\u5ea6"}}