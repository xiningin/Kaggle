{"cell_type":{"9a3efab0":"code","456d9c43":"code","8c0f505a":"code","86c1cd40":"code","39944dc3":"code","c76a91b6":"code","44d36ecf":"code","52846ddd":"code","340d4f3e":"code","e5a57735":"code","c634fc5f":"code","69d5a900":"code","17c1e975":"code","6bcf8b04":"code","2bdaf8f7":"code","fced9d13":"code","c622d112":"code","d018e16d":"code","0f5afaff":"code","46e145a8":"code","f196772f":"code","bc068deb":"code","9bf7c43c":"markdown","39fe71c5":"markdown","6f2cae26":"markdown","aee95586":"markdown","f1fac311":"markdown"},"source":{"9a3efab0":"# Create 'RetinaNet' dir for zip extraction\n%mkdir RetinaNet","456d9c43":"%%capture\n!unzip ..\/input\/vinbigdata-zip-data\/Keras-Retinanet.zip -d .\/RetinaNet","8c0f505a":"%%capture\n\n%cd RetinaNet\/\n!pip install ..\/..\/input\/creating-whl-file-retinanet\/whlfiles\/keras_resnet-0.2.0-py2.py3-none-any.whl","86c1cd40":"import pandas as pd\nimport numpy as np\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport cv2\n\n\nfrom keras_retinanet import models\nfrom keras_retinanet.utils.image import read_image_bgr ,preprocess_image, resize_image\nfrom keras_retinanet.utils.visualization import draw_box, draw_caption\nfrom keras_retinanet.utils.colors import label_color\n\npath= '..\/..\/input\/retinanet-50-th-epoch-model\/resnet50_csv_50.h5'","39944dc3":"!python setup.py build_ext --inplace","c76a91b6":"# Inference model\nmodel = models.load_model(path, backbone_name='resnet101')\nmodel = models.convert_model(model)","44d36ecf":"df_valid= pd.read_csv('annotations_test.csv', header=None)\ndf_valid.head()","52846ddd":"n_classes= pd.read_csv('classes.csv', header=None)\n\nclasses= {}\nclasses_r= {}\nfor name, roll in zip(n_classes[0], n_classes[1]):\n    classes[name]= roll\n    classes_r[roll]=name","340d4f3e":"uniq= df_valid[0].unique().shape[0]\nclasses","e5a57735":"def predict(path, th=0.3, draw=True, show_time=True):\n    \n    # load image\n    image = read_image_bgr(path)\n    # copy to draw on\n    image2 = image.copy()\n    #image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)\n    # preprocess image for network\n    image = preprocess_image(image)\n    image, scale = resize_image(image)\n    \n    # process image\n    start = time.time()\n    boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))\n    if show_time:\n        print(\"processing time: \", time.time() - start)\n    # correct for image scale\n    boxes \/= scale\n    \n    if draw:\n        for box, score, label in zip(boxes[0], scores[0], labels[0]):\n        # scores are sorted \n            if score < th:\n                break\n            color = label_color(label)\n            b = box.astype(int)\n            draw_box(image2, box, color=color)\n            draw_caption(image2, box, classes_r[label])\n        return image2\n    else:\n        return boxes[0], scores[0], labels[0]","c634fc5f":"def grd_vs_pred(i, th= 0.3):\n    path= df_valid[0].unique()[i]\n    grd_img= read_image_bgr(path)\n\n    for r, row in df_valid[df_valid[0]==df_valid[0][i]].iterrows():\n        color= label_color(classes[row[5]])\n        grd_img= cv2.rectangle(np.array(grd_img), (row[1], row[2]), (row[3], row[4]), color, 2)\n        draw_caption(grd_img, row[1:5].values, row[5])\n    pred_img= predict(path, th=th)\n    \n    return grd_img, pred_img","69d5a900":"# f, ax= plt.subplots(2, 4, figsize=(24, 10))\n\n# for i in range(4):\n#     np.random.seed(i*49)\n#     grd, pred= grd_vs_pred(np.random.randint(uniq), th= 0.4)\n#     ax[0][i%4].imshow(grd); ax[1][i%4].imshow(pred)\n#     ax[0][i%4].set_title('Grd Truth')\n#     ax[1][i%4].set_title('Predicted')\n# plt.show()","17c1e975":"%cd ..","6bcf8b04":"# https:\/\/www.kaggle.com\/awsaf49\nclass_2= pd.read_csv('..\/input\/vinbigdata-2class-prediction\/2-cls test pred.csv')\nclass_2.head()","2bdaf8f7":"sub_512=pd.read_csv('..\/input\/vinbigdata-512-image-dataset\/vinbigdata\/test.csv')\nsub_ex=pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/sample_submission.csv')\nsub_ex.head()","fced9d13":"sub=pd.DataFrame.merge(sub_ex,sub_512,on='image_id')\nsub['extra']= sub.image_id +'--'+ sub.width.astype(str) +'--'+ sub.height.astype(str)\nsub.head()","c622d112":"def perdict_string(label_id, th=0.5):\n    string= ''\n    label_id, w, h= label_id.split('--')\n    xfac= int(w)\/512\n    yfac= int(h)\/512\n    path='..\/input\/vinbigdata-512-image-dataset\/vinbigdata\/test\/'\n    path= path + label_id + '.png'\n    boxes, score, label= predict(path, th=0.2, draw=False, show_time=False)\n    \n    for l, s, b in zip(label, score, boxes):\n        if s <th:\n            break\n        string+= '{} {:.2f} {} {} {} {} '.format(l ,s , int(b[0]*xfac), int(b[1]*yfac),\n                                                 int((b[2])*xfac), int((b[3])*yfac))\n        \n    return string if len(string) else \"14 1 0 0 1 1\"","d018e16d":"sub['PredictionString']= sub.extra.apply(perdict_string)\nsub= sub[['image_id', 'PredictionString']]\nsub.head()","0f5afaff":"pred = pd.merge(sub, class_2, on = 'image_id', how = 'left')\npred.head()","46e145a8":"def filter_2cls(row, thr=0.1):\n    if row['target']<thr:\n        row['PredictionString'] = '14 1 0 0 1 1'\n    return row","f196772f":"sub2 = pred.apply(filter_2cls, axis=1)\nsub2= sub2[['image_id', 'PredictionString']]\nsub2.head()","bc068deb":"sub.to_csv('\/kaggle\/working\/submission.csv',index = False)","9bf7c43c":"<h1 style=\"font-family:verdana;\"> <center>Model Validation<\/center> <\/h1>","39fe71c5":"<h1 style=\"font-family:verdana;\"> <center>Result Submission<\/center> <\/h1>\n","6f2cae26":"<h1 style=\"font-family:verdana;\"> <center>Offline RetinaNet installation<\/center> <\/h1>\n\n#### 2. Check out for .WHL processing [Notebook](https:\/\/www.kaggle.com\/akhileshdkapse\/creating-whl-file-retinanet)","aee95586":"<h1 style=\"font-family:verdana;\"> <center>RetinaNet\ud83c\udf96 <\/center> <\/h1>\n\n<h3><center style=\"color:#159364; font-family:cursive;\">Validation and Submission Notebook<\/center><\/h3>\n\n\n#### 1. Check out Training [Notebook](https:\/\/www.kaggle.com\/akhileshdkapse\/vinbigdata-retinanet-detection-training)\n","f1fac311":"\n\n## \ud83c\udf04 Thanks for Reading\n\n![](https:\/\/i.gifer.com\/7ImI.gif)\n\n\n\n<div class=\"alert alert-block alert-info\" style=\"font-size:20px; font-family:verdana;\">\n <a target=\"_blank\" style=\"color:orange;\">Do UPVOTE for more Motivation\ud83e\udd1e<\/a>\n<\/div>\n\n\n\n<hr><hr><hr>\n\n<hr>"}}