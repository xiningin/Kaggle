{"cell_type":{"9299a094":"code","00d60622":"code","01c17334":"code","0d0dd595":"code","7cb5e423":"code","f78b5359":"code","15bed872":"code","67d5ced4":"code","998aa1ec":"code","b649afd2":"code","1e5e8e96":"code","cd7d925f":"code","61f5e4da":"code","4dce43e7":"code","d00c8b1d":"code","62d429bf":"code","19eb6623":"code","248e928d":"code","97922c47":"code","2a2a194d":"code","bf2ec57f":"code","a664b70b":"code","d6af7a6d":"code","0b2b855a":"code","02231822":"code","5a6b4be3":"code","afa0a6ed":"code","e0c6768f":"code","7ef47b08":"code","fa14c09a":"code","5e55c3a6":"code","24dc0b2a":"code","6e850553":"code","9c83200d":"code","98c96f89":"code","e9b41c4c":"code","12aa6981":"code","37bf9497":"code","2ba07f1a":"code","e9301a42":"code","cf9316bf":"code","68ca311c":"code","7475456e":"code","f76db3ef":"code","f775f846":"code","f1fc876b":"code","5190f1b9":"code","01fbeed8":"code","c5f79b95":"code","ca973f6d":"code","12844bd3":"code","696ed1d0":"code","ed1a465f":"code","5f517563":"code","3b6a4a08":"code","3d6fc57b":"code","0b511f47":"code","07ca05b7":"code","d5394036":"code","85bedc5d":"code","bdcbcbff":"code","bdd0f94a":"code","be844a66":"code","9c60827e":"code","955b3562":"code","c88a0a24":"code","d7745239":"code","96400135":"code","689fe569":"code","edcc5061":"code","f0e00a7d":"code","cabd8d6a":"code","fb609120":"code","6ebec8b8":"code","23fbe601":"code","1791492e":"code","a950e1a7":"code","e7ca57a2":"code","ac7327a4":"code","2e338f41":"code","cab27179":"code","6f047de9":"code","dce16ae6":"code","15fd6321":"code","dea2ac17":"code","e4d9b621":"code","8d66fa64":"code","5f4b15e4":"code","a84ac023":"code","524dc632":"code","3211e39d":"code","3338e44d":"code","9eb204ec":"code","efeb5f30":"code","f1d86c4e":"code","058bfeb1":"code","417193d3":"code","6040efbe":"code","edafe942":"code","3ad015d5":"code","800fb4da":"code","6505c39b":"code","d2d03aa0":"code","52ff5b15":"code","12351dcc":"code","24d8bfed":"code","39ce43d8":"code","cd814344":"code","b4302009":"code","ab7a8c90":"code","1bb46a88":"code","8931802b":"code","6ece2d08":"code","e5ad7332":"code","6af95c0d":"code","35367bac":"code","e10fed17":"code","e35ab262":"code","d2901e57":"code","76676e3d":"code","8120c11b":"code","222eda72":"code","801bdcd0":"code","0bd15d38":"code","b2c4ad2a":"code","6e864aef":"code","b0974614":"code","9b092b8e":"code","8c5f414f":"code","47fed9b6":"code","099a72d9":"code","4f6ae001":"code","0e2554d4":"markdown","62afd344":"markdown","64460382":"markdown","a57fb2cf":"markdown","d2adcce3":"markdown","926252ff":"markdown","b56376b9":"markdown"},"source":{"9299a094":"grades = [76,23,5,6,78]","00d60622":"grades","01c17334":"type(grades)","0d0dd595":"grades[0]","7cb5e423":"grades[1]","f78b5359":"type(grades[2]) #Type of list is list but type of element can be different","15bed872":"confused = list([3,52,\"a\",\"name\",3.45])","67d5ced4":"confused","998aa1ec":"confused[2]","b649afd2":"len(confused)","1e5e8e96":"grades= [[36,23,90],[56,44,42],\"grades\"]   # We can define list in list","cd7d925f":"grades","61f5e4da":"len(grades)","4dce43e7":"grades[0]","d00c8b1d":"grades[0][0] # Element of list in list","62d429bf":"type(grades[0][0])","19eb6623":"a = [1,2,4,5]\nb = [2,3,4,5,[2,4,5,6,]]","248e928d":"all= list([a,b]) #Merging lists","97922c47":"all","2a2a194d":"del a # Deleting a list","bf2ec57f":"new_list = list([1,2,3,4,5])","a664b70b":"new_list","d6af7a6d":"new_list[:2]","0b2b855a":"new_list[3:]","02231822":"new_list[::2]","5a6b4be3":"names = [\"Josh\",\"Amanda\",\"Kobe\",\"Monish\"]","afa0a6ed":"names[0]= \"Berkay\" #Changing element of list","e0c6768f":"names","7ef47b08":"names[1:] = \"Jone\",\"Michael\",\"Hoke\"","fa14c09a":"names","5e55c3a6":"names = names + [\"Caren\"] #Adding element to a list\nnames","24dc0b2a":"names.append(\"Dave\") #Adding element to a list with append() method\nnames","6e850553":"del names[2] #Deleting an element by index\nnames","9c83200d":"dir(names)","98c96f89":"names.remove(\"Jone\") #Deleting an element by element with remove() method\nnames","e9b41c4c":"names.insert(1,\"Jashua\")# Adding an element by index with insert() Method\nnames","12aa6981":"names.insert(len(names),\"Barrel\")\nnames","37bf9497":"names.pop(0) #Deleting an element by index\nnames","2ba07f1a":"names.count(\"Hoke\") # Count an element with count() method","e9301a42":"names_copy = names.copy() # Makes copy of a list","cf9316bf":"names.extend([\"Harrel\",\"Katy\"]) # Merging 2 list\nnames","68ca311c":"names.index(\"Caren\") #Index of an element","7475456e":"names.reverse() #Reverse of a list\nnames","f76db3ef":"names.sort() #Sorts elements in the list\nnames","f775f846":"names.clear() #Clears the list\nnames","f1fc876b":"t = (\"John\",\"Maria\",1,23,5.6,[2,45,6]) # Tuples can be created with brackets","5190f1b9":"t","01fbeed8":"type(t)","c5f79b95":"tup = tuple([1,2,4,\"Mike\"]) # Tuples can be created with tuple() function, but don't forget square brackets inside function","ca973f6d":"tup","12844bd3":"type(tup)","696ed1d0":"one_tuple = (\"Names\",) # Add a comma at the end for one-element tuples","ed1a465f":"one_tuple","5f517563":"type(one_tuple)","3b6a4a08":"t","3d6fc57b":"t[0]","0b511f47":"t[2:]","07ca05b7":"# t[2] = 99 > It gives error, tuples can't be changes","d5394036":"from collections import namedtuple","85bedc5d":"incomes = (10000,5500,7000,9200)","bdcbcbff":"jobs = namedtuple(\"Job\", [\"JR_Data_Scientist\",\"Senior_Software_Engineer\",\"Big_Data_Developer\",\"ML_Engineer\"])","bdd0f94a":"incomes= jobs(10000,5500,7000,9200)","be844a66":"incomes.Big_Data_Developer","9c60827e":"incomes.ML_Engineer","955b3562":"incomes[0]","c88a0a24":"dic = {\"Name\": \"Josh\",\"Age\":24, \"Job\":\"ML Developer\",\"Income\":9200} # Dictionaries can be created with {} brackets","d7745239":"dic","96400135":"type(dic)","689fe569":"len(dic)","edcc5061":"dic.keys() # Keys can be seen with keys() functions","f0e00a7d":"dic.values() # Values can be seen with values() functions","cabd8d6a":"dic[\"Name\"]","fb609120":"dic[\"Age\"]","6ebec8b8":"dic = {\"Name\":\"Josh\",\n        \"Age\":24, \n        \"Job\":\"ML Developer\",\n        \"Income\":9200,\n        \"Location\":\"Ohio\",\n        \"Languages\": [\"Python\",\"Scala\",\"Julia\"]}","23fbe601":"dic","1791492e":"len(dic)","a950e1a7":"dic[\"Location\"]","e7ca57a2":"# Josh moved to San Francisco - Change the location\ndic[\"Location\"] = \"San Francisco\"","ac7327a4":"dic","2e338f41":"dic[\"Languages\"]","cab27179":"dic[\"Languages\"][0]","6f047de9":"d = {\"Apartment_1\":{\"Peoples\": [\"Josh\",\"Kennedy\"], \"Income\": 15000},\n     \"Apartment_2\":{\"Peoples\": [\"Harry\",\"Mike\",\"James\"], \"Income\": 19000},\n     \"Apartment_3\":{\"Peoples\": [\"Berry\",\"Julia\"], \"Income\": 21000}} # Dictionary can contain a dictionary","dce16ae6":"d","15fd6321":"type(d)","dea2ac17":"d[\"Apartment_1\"]","e4d9b621":"d[\"Apartment_1\"][\"Peoples\"]","8d66fa64":"d[\"Apartment_1\"][\"Peoples\"][0]","5f4b15e4":"d[\"Apartment_4\"] = {\"Peoples\": [\"Hans\",\"Flurry\"], \"Income\": 16000} # We can directly add an element with a new key","a84ac023":"d","524dc632":"d[\"Apartment_3\"] = {\"Peoples\": [\"Michael\",\"Kevin\"], \"Income\": 26000} # We can change values with same way","3211e39d":"d","3338e44d":"del d[\"Apartment_4\"] # We can directly delete an element with del","9eb204ec":"d","efeb5f30":"d[1] = {\"Peoples\": [\"Hans\",\"Flurry\"], \"Income\": 16000} # Keys can also be a integer","f1d86c4e":"d","058bfeb1":"d[1]","417193d3":"s = set([1,2,3,4]) # sets can be created with set() function","6040efbe":"s","edafe942":"type(s)","3ad015d5":"s2 = set([1,2,2,2,3,4,5,4,4,5,4,2])","800fb4da":"s2 # It gets just unique values","6505c39b":"l = [\"Jonh\",1,\"Jonh\",1,\"Katy\",2,2,3]","d2d03aa0":"s3 = set(l)","52ff5b15":"s3","12351dcc":"sentence = \"Look at the course!\"","24d8bfed":"s4 = set(sentence)","39ce43d8":"s4 # It gets just unique values","cd814344":"print(\"Lenght of Sentence: \", len(sentence))\nprint(\"Lenght of S4: \",len(s4))","b4302009":"s5 = set([\"I\",\"learn\",\"data\",\"science\"])","ab7a8c90":"s5","1bb46a88":"s5.add(\"on my own\") # Add() helps to add new value","8931802b":"s5","6ece2d08":"s5.remove(\"on my own\") # remove() helps to remove a value","e5ad7332":"s5","6af95c0d":"s5.discard(5) # discard() function helps to prevent producing error","35367bac":"s5","e10fed17":"set1 = set([1,2,3,4,5])\nset2 = set([2,4,5,6,8])","e35ab262":"set1.difference(set2) # difference() function helps to get difference of 2 set","d2901e57":"set1-set2 # - helps to get difference of 2 set","76676e3d":"set2-set1","8120c11b":"set1.symmetric_difference(set2) # symmetric_difference() function helps to get values in not both of them","222eda72":"set1.intersection(set2) # intersection() function helps to get intersection of 2 set","801bdcd0":"set1&set2 # & helps to get intersection of 2 set","0bd15d38":"set2.intersection(set1)","b2c4ad2a":"set2","6e864aef":"set1.union(set2) # union() function helps to get union of 2 set","b0974614":"set2.intersection_update(set1) # intersection_update() function helps to get intersection of 2 set and assign it to first variable","9b092b8e":"set2","8c5f414f":"set3 = set([1,2,3,4,5,6,7,8])\nset4 = set([4,5,6,7,8])","47fed9b6":"set3.isdisjoint(set4) # We query if intersection of two set is blank with isdisjoint() function","099a72d9":"set3.issubset(set4) # We query if set 3 is a subset of set4 with issubset() function","4f6ae001":"set3.issuperset(set4) # We query if set 3 contains set4 with issuperset() function","0e2554d4":"## Content\n\n- Lists\n- Tuples\n- Dictionaries\n- Sets","62afd344":"## Tuples\n\n- Can't be changed\n- Able to be indexed\n- Can take different data types","64460382":"## Sets\n\n- Changeable\n- Not able to be indexed\n- Hold unique values","a57fb2cf":"## List - List Comprehension\n\n- Updateable\n- Can take different data types\n- Define with list() function or [] square brackets","d2adcce3":"## Dictionaries\n\n- Mutable\n- There is no index\n- Can take multiple data types","926252ff":"### NamedTuple\n\nPython supports a type of container like dictionaries called \u201cnamedtuple()\u201d present in module, \u201ccollections\u201c. Like dictionaries they contain keys that are hashed to a particular value. But on contrary, it supports both access from key value and iteration, the functionality that dictionaries lack.","b56376b9":"**Created by Berkay Alan**\n\n**Data Structures**\n\n**15 of November, 2020**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**"}}