{"cell_type":{"d5d040cc":"code","50eb3e25":"code","27ca1e32":"code","7978d748":"code","08065ff6":"code","758d8b65":"code","75c5a74a":"code","0009ba1e":"code","94d1d08e":"code","a0618ee6":"code","4b85dff7":"code","04ed2c59":"code","ef02751e":"code","ca1705e2":"code","1c591085":"code","2507535f":"code","dbebf7d5":"code","70891477":"code","d5b56999":"code","2a1ed812":"code","2259d50e":"code","299cf02f":"code","a7da0751":"code","25d9a422":"code","48c4e2b9":"code","e6f6957d":"code","46fe5875":"code","93660c2b":"code","f74b20a7":"code","a3986025":"code","b86a5eef":"code","a9e023fb":"code","13be0839":"code","c2de6e96":"code","f5efac43":"code","63e7f746":"code","416b83f3":"code","c039d20c":"code","1460bbd9":"code","a3878952":"code","db08fd46":"code","6be39ec7":"code","1b2e913a":"code","7e0ffc2d":"code","2d1d07fc":"code","d28e59ab":"code","abbe37eb":"code","caea0611":"code","91278219":"code","2f4d234c":"code","d34d5dc4":"code","75a890c8":"code","6020bb11":"code","5f8baa47":"code","af38889f":"code","dc81d3b6":"code","ff1d8fe2":"code","45fa5a67":"code","c836d496":"code","83b29208":"code","40a696b4":"code","b2b15793":"markdown","2166d281":"markdown","e07780e2":"markdown","94742270":"markdown","fb1c0f2c":"markdown","27eca1b9":"markdown","f6b89103":"markdown","69c75c5c":"markdown","816c52be":"markdown","904712e0":"markdown","3cb00d76":"markdown","77c11dec":"markdown","aab4173b":"markdown","27bdf8a0":"markdown","5f51befa":"markdown","d751b6a1":"markdown","88cf9f10":"markdown","15cb9081":"markdown","531b6b23":"markdown","91df14a9":"markdown","835180ee":"markdown","519319e5":"markdown","40457e68":"markdown","44861739":"markdown","f72078c3":"markdown","f6829578":"markdown","ee0b9190":"markdown","b5d1ccdf":"markdown","6343094c":"markdown","53260669":"markdown","86dcbf32":"markdown","0ea9c518":"markdown","e643c58f":"markdown","8fe34d35":"markdown","8b9d3105":"markdown","ca6185c4":"markdown","2556d0f8":"markdown","69d05968":"markdown","af3843d0":"markdown","f6f1cb3c":"markdown","4dda1cd3":"markdown","d14534a7":"markdown","5057e9f7":"markdown","356181aa":"markdown","5335826b":"markdown","4b8955c5":"markdown","78783b73":"markdown","41de58e2":"markdown","c92ad8e1":"markdown","8414974b":"markdown","1e833a68":"markdown","31e3acf7":"markdown","9ba0ade4":"markdown","a30916e3":"markdown","b17ce129":"markdown","40eb44ad":"markdown","a176edfd":"markdown","40b83532":"markdown","b65c282c":"markdown","01b0d030":"markdown","65de9dff":"markdown","7b3ddde4":"markdown","24f6ce1f":"markdown","945a0afa":"markdown","8f84c463":"markdown","d7c1f891":"markdown","0d2e68bb":"markdown","4d741fe1":"markdown","30affc61":"markdown","14c9d4dd":"markdown","345fddd7":"markdown","f44e5d1e":"markdown","d909c09e":"markdown","066f0718":"markdown","77e1159a":"markdown","43298ab3":"markdown","db4c0adb":"markdown","6cf2c6c8":"markdown","46d412f6":"markdown","8f637485":"markdown","0b159f54":"markdown","368a6aa7":"markdown","d8a148c7":"markdown","1b7c4e07":"markdown","c488c191":"markdown","79caa995":"markdown","45f799c1":"markdown","6a30f496":"markdown","8b940d9c":"markdown","62a60236":"markdown"},"source":{"d5d040cc":"# Download das p\u00e1ginas utilizadas para raspagem\nimport requests\n\n# Respons\u00e1vel por nos mostrar o conte\u00fado HTML\nfrom bs4 import BeautifulSoup\n\n# Respons\u00e1vel por ler o arquivo .csv e nos fornecer determinados tipos de an\u00e1lise\nimport pandas as pd\n\n# Express\u00f5es regulares necess\u00e1rias para tratamento dos dados\nimport re\n\n# Biblioteca que compreende a constru\u00e7\u00e3o de gr\u00e1ficos\nimport matplotlib.pyplot as plt\n\n# Biblioteca respons\u00e1vel por nos auxiliar nos mapas\nimport folium","50eb3e25":"# URL detentora dos dados de EBOLA\nlocal = 'https:\/\/github.com\/imdevskp\/ebola_outbreak_dataset\/blob\/master\/ebola_2014_2016_clean.csv'\n\n# A biblioteca requests realiza o download\nhtml_pagina = requests.get(local)","27ca1e32":"# soup nos disponiliza a obten\u00e7\u00e3o do conte\u00fado HTML\nsoup = BeautifulSoup(html_pagina.content, 'html.parser')","7978d748":"# Com a inspe\u00e7\u00e3o dos elementos da p\u00e1gina, a classe que cont\u00e9m a tabela \u00e9 encontrada pelo soup\ntabela = soup.find_all(class_='js-csv-data csv-data js-file-line-container')\n\n# O comprimento da lista nos confirma que h\u00e1 s\u00f3 um elemento, ou seja, a tabela preterida deve ter sido corretamente fornecida\nlen(tabela)","08065ff6":"# Como h\u00e1 uma lista, precisamos confirmar qual elemento ser\u00e1 usado. Neste caso, como s\u00f3 h\u00e1 um, utilizaremos o elemento [0]\ntabela = tabela[0]","758d8b65":"# Procurando as tags 'tr' na tabela, achamos cada linha da tabela\nlinhas = tabela.find_all('tr')\n\n# O comprimento de 2485 nos confirma o sucesso\nlen(linhas)","75c5a74a":"linha = linhas[7].text.strip('\\n')\nlinha = linha.replace('\\n', '\\t')\nlinha\n","0009ba1e":"type(linha)","94d1d08e":"\ndef prep_linha(linha):\n    linha = linha.get_text()\n    linha = linha.strip('\\n')\n    linha = linha.replace('\\n', '\\t')\n    return linha","a0618ee6":"tabela_final = 'Pa\u00eds ou regi\u00e3o\\tData\\tTotal de casos\\tTotal de mortes\\n'\nfor i in range(1,len(linhas)-1):\n    linha = prep_linha(linhas[i])\n    tabela_final += linha\n    tabela_final += '\\n'","4b85dff7":"arquivo = open('Lista Ebola.csv', 'w')\narquivo.write(tabela_final)\narquivo.close()","04ed2c59":"ebola_df = pd.read_csv('Lista Ebola.csv', sep = '\\t')\nebola_df.head()","ef02751e":"# URL detentora dos dados de H1N1\nlocal_h1n1 = \"https:\/\/en.wikipedia.org\/wiki\/2009_swine_flu_pandemic_by_country\"\n\n# A biblioteca requests realiza o download\nhtml_h1n1 = requests.get(local_h1n1)","ca1705e2":"# soup_h1n1 nos disponiliza a obten\u00e7\u00e3o do conte\u00fado HTML\nsoup_h1n1 =  BeautifulSoup(html_h1n1.content, 'html.parser')","1c591085":"# Com a inspe\u00e7\u00e3o dos elementos da p\u00e1gina, a classe que cont\u00e9m a tabela \u00e9 encontrada pelo soup_h1n1\ntabela_h1n1 = soup_h1n1.find_all(class_=\"navbox\")\n\n# O comprimento da lista nos traz 3, j\u00e1 que h\u00e1 tr\u00eas tabelas na p\u00e1gina com esta identifica\u00e7\u00e3o.\nlen(tabela_h1n1)","2507535f":"# Analisando os tr\u00eas elementos atrav\u00e9s da inspe\u00e7\u00e3o, vemos que a primeira tabela demonstrada \u00e9 a que utilizaremos\ntabela_h1n1 = tabela_h1n1[0]","dbebf7d5":"# Procurando as tags 'tr' na tabela, achamos cada linha da tabela\nlinhas_h1n1 = tabela_h1n1.find_all('tr')\n\n# O comprimento de 223 nos confirma o sucesso\nlen(linhas_h1n1)","70891477":"def prep_linha_h1n1(linha_h1n1):\n    linha_h1n1 = linha_h1n1.get_text()\n    linha_h1n1 = linha_h1n1.strip('\\n')\n    linha_h1n1 = linha_h1n1.replace('\\n', '\\t')\n    linha_h1n1 = linha_h1n1.replace(',', '')\n    linha_h1n1 = linha_h1n1.replace('(', '').replace(')', '')\n    linha_h1n1 = linha_h1n1.replace('\\tR', '').replace('\\tW', '').replace('\\tS', '').replace('\\tL', '').replace('\\tN', '')\n    linha_h1n1 = linha_h1n1.replace('\\t***', '').replace('\\t**', '').replace('\\t*', '')\n    linha_h1n1 = linha_h1n1.replace('\\tlow2','').replace('\\tlow', '').replace('\\tmod','')\n    linha_h1n1 = linha_h1n1.replace('\\t=','').replace('\\t-','').replace('\\t+', \"\")\n    linha_h1n1 = linha_h1n1.replace('~','').replace('^','').replace('#','').replace('+','')\n    linha_h1n1 = linha_h1n1.replace('\\t'*8, '\\t').replace('\\t'*7, '\\t').replace('\\t'*6, '\\t').replace('\\t'*5,'\\t').replace('\\t'*4, '\\t').replace('\\t'*3,'\\t').replace('\\t'*2, '\\t')\n    linha_h1n1 = re.sub(r'\\[...\\]', '', linha_h1n1)\n    linha_h1n1 = re.sub(r'\\[..\\]', '', linha_h1n1)\n    linha_h1n1 = re.sub(r'\\[.\\]', '', linha_h1n1)\n    linha_h1n1 = linha_h1n1.replace('\\t\\t', '\\t')\n\n    return linha_h1n1\nprep_linha_h1n1(linhas_h1n1[61])","d5b56999":"tabela_final_h1n1 = 'Pa\u00eds ou regi\u00e3o\\tCasos\\tMortes\\n'\nfor i in range(4,62):\n    linha_h1n1 = prep_linha_h1n1(linhas_h1n1[i])\n    tabela_final_h1n1 += linha_h1n1\n    tabela_final_h1n1 += '\\n'","2a1ed812":"arquivo_h1n1 = open('Lista H1N1.csv', 'w')\narquivo_h1n1.write(tabela_final_h1n1)\narquivo_h1n1.close()","2259d50e":"h1n1_df = pd.read_csv('Lista H1N1.csv', sep = '\\t')\nh1n1_df.head()","299cf02f":"# URL detentora dos dados de SARS\nlocal_sars = 'https:\/\/en.wikipedia.org\/wiki\/2002%E2%80%932004_SARS_outbreak'\n\n# A biblioteca requests realiza o download\nhtml_sars = requests.get(local_sars)","a7da0751":"# soup_sars nos disponiliza a obten\u00e7\u00e3o do conte\u00fado HTML\nsoup_sars = BeautifulSoup(html_sars.content, 'html.parser')","25d9a422":"# Com a inspe\u00e7\u00e3o dos elementos da p\u00e1gina, a classe que cont\u00e9m a tabela \u00e9 encontrada pelo soup_sars\ntabela_sars = soup_sars.find_all(class_=\"wikitable sortable\")\n\n# O comprimento da lista nos confirma que h\u00e1 s\u00f3 um elemento, ou seja, a tabela preterida deve ter sido corretamente fornecida\nlen(tabela_sars)","48c4e2b9":"# Como h\u00e1 uma lista, precisamos confirmar qual elemento ser\u00e1 usado. Neste caso, como s\u00f3 h\u00e1 um, utilizaremos o elemento [0]\ntabela_sars = tabela_sars[0]","e6f6957d":"# Procurando as tags 'tr' na tabela, achamos cada linha da tabela\nlinhas_sars = tabela_sars.find_all('tr')\n\n# O comprimento de 35 nos confirma o sucesso\nlen(linhas_sars)","46fe5875":"lin = linhas_sars[1].text\nlin = lin.strip('\\n').strip('\\xa0')\nlin = lin.replace('\\n', '\\t')\nlin = re.sub(r'\\[.*\\]', '', lin)\nlin = lin.replace(',', '')\nlin","93660c2b":"def prep_linha_sars(linha_sars):\n    linha_sars = linha_sars.text\n    linha_sars = linha_sars.strip('\\n').strip('\\xa0')\n    linha_sars = linha_sars.replace('\\n', '\\t')\n    linha_sars = re.sub(r'\\[.*\\]', '', linha_sars)\n    linha_sars = linha_sars.replace(',', '')\n    return linha_sars\nprep_linha_sars(linhas_sars[3])","f74b20a7":"tabela_final_sars = 'Pa\u00eds\\tCasos\\tMortes\\tCurados\\n'\nfor i in range(1,len(linhas_sars)-3):\n    linha_sars = prep_linha_sars(linhas_sars[i])\n    tabela_final_sars += linha_sars\n    tabela_final_sars += '\\n'","a3986025":"arquivo_sars = open('Lista SARS.csv', 'w')\narquivo_sars.write(tabela_final_sars)\narquivo_sars.close()","b86a5eef":"sars_df = pd.read_csv('Lista SARS.csv', '\\t')\nsars_df = sars_df.drop(columns=['Curados'])\nsars_df.head()","a9e023fb":"# URL detentora dos dados de COVID-19\nlocal_covid = 'https:\/\/github.com\/datasets\/covid-19\/blob\/master\/data\/countries-aggregated.csv'\n\n# A biblioteca requests realiza o download\nhtml_covid = requests.get(local_covid)","13be0839":"# soup_covid nos disponiliza a obten\u00e7\u00e3o do conte\u00fado HTML\nsoup =  BeautifulSoup(html_covid.content, 'html.parser')","c2de6e96":"# Com a inspe\u00e7\u00e3o dos elementos da p\u00e1gina, a classe que cont\u00e9m a tabela \u00e9 encontrada pelo soup\ntabela_covid = soup.find_all(class_='highlight tab-size js-file-line-container')\n\n# O comprimento da lista nos confirma que h\u00e1 s\u00f3 um elemento, ou seja, a tabela preterida deve ter sido corretamente fornecida\nlen(tabela_covid)","f5efac43":"# Como h\u00e1 uma lista, precisamos confirmar qual elemento ser\u00e1 usado. Neste caso, como s\u00f3 h\u00e1 um, utilizaremos o elemento [0]\ntabela_covid = tabela_covid[0]","63e7f746":"# Procurando as tags 'tr' na tabela, achamos cada linha da tabela\nlinhas = tabela_covid.find_all('tr')\n\n# O comprimento de 25381 nos confirma o sucesso\nlen(linhas)","416b83f3":"linha = linhas[6].text.strip('\\n')\nlinha = linha.replace('\\n', '\\t')\nlinha","c039d20c":"def prep_linha(linha):\n    linha = linha.get_text()\n    linha = linha.strip('\\n')\n    linha = linha.replace('\\n', '\\t')\n    return linha","1460bbd9":"tabela_final = 'Data,Pa\u00eds,Confirmados,Recuperados,Mortos\\n'\nfor i in range(1,len(linhas)):\n    linha = prep_linha(linhas[i])\n    tabela_final += linha\n    tabela_final += '\\n'","a3878952":"arquivo = open('lista-covid.csv', 'w')\narquivo.write(tabela_final)\narquivo.close()","db08fd46":"covid_df = pd.read_csv('lista-covid.csv', sep = ',')\ncovid_df.head()","6be39ec7":"# Localizando os dados do \u00faltimo dia em que foram coletados\nebola_final = ebola_df.loc[ebola_df['Data'] == '2016-03-23']\n\n# Somando os totais de casos e mortes e criando uma vari\u00e1vel para armazen\u00e1-los\ntotalcasos_ebola = int(ebola_final['Total de casos'].sum())\ntotalmortes_ebola = int(ebola_final['Total de mortes'].sum())\n\n# Dividindo mortes por casos, para retornar a letalidade e armazenando-a tamb\u00e9m em uma vari\u00e1vel\nletalidade_ebola = float(totalmortes_ebola\/totalcasos_ebola)","1b2e913a":"# Somando os totais de casos e mortes e criando uma vari\u00e1vel para armazen\u00e1-los\ntotalcasos_h1n1 = h1n1_df['Casos'].sum()\ntotalmortes_h1n1 = h1n1_df['Mortes'].sum()\n\n# Dividindo mortes por casos, para retornar a letalidade e armazenando-a tamb\u00e9m em uma vari\u00e1vel\nletalidade_h1n1 = float(totalmortes_h1n1\/totalcasos_h1n1)","7e0ffc2d":"# Somando os totais de casos e mortes e criando uma vari\u00e1vel para armazen\u00e1-los\ntotalcasos_sars = sars_df['Casos'].sum()\ntotalmortes_sars = sars_df['Mortes'].sum()\n\n# Dividindo mortes por casos, para retornar a letalidade e armazenando-a tamb\u00e9m em uma vari\u00e1vel\nletalidade_sars = float(totalmortes_sars\/totalcasos_sars)","2d1d07fc":"# Localizando os dados do \u00faltimo dia em que foram coletados\ncovid_final = covid_df.loc[covid_df['Data'] == '2020-06-07']\n\n# Somando os totais de casos e mortes e criando uma vari\u00e1vel para armazen\u00e1-los\ntotalcasos_covid = covid_final['Confirmados'].sum()\ntotalmortes_covid = covid_final['Mortos'].sum()\n\n# Dividindo mortes por casos, para retornar a letalidade e armazenando-a tamb\u00e9m em uma vari\u00e1vel\nletalidade_covid = float(totalmortes_covid\/totalcasos_covid)","d28e59ab":"tabela_epidemias = pd.DataFrame({\n    'Epidemia': ['COVID-19', 'H1N1', 'Ebola', 'SARS-Cov-1'],\n    'Total de casos': [totalcasos_covid, totalcasos_h1n1, totalcasos_ebola, totalcasos_sars],\n    'Total de mortes': [totalmortes_covid, totalmortes_h1n1, totalmortes_ebola, totalmortes_sars],\n    'Letalidade': [letalidade_covid, letalidade_h1n1, letalidade_ebola, letalidade_sars]\n})\n    \ntabela_epidemias","abbe37eb":"# Esta tabela incluir\u00e1 somente a letalidade das epidemias\ntabela_letalidade = pd.DataFrame({\n    'Epidemia': ['COVID-19', 'H1N1', 'Ebola', 'SARS-Cov-1'],\n    'Letalidade': [letalidade_covid, letalidade_h1n1, letalidade_ebola, letalidade_sars]\n})\n    \ntabela_letalidade","caea0611":"# Estilo do gr\u00e1fico\nplt.style.use('ggplot')\n# Tamanho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (8,5)\n\n# Utilizamos .set_index() para inverter linha e coluna do DataFrame original\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'bar' traz um gr\u00e1fico de barras\n# logy = True coloca o eixo y em escala logar\u00edtmica\n# title = <input> aplica o t\u00edtulo ao gr\u00e1fico\ntabela_epidemias.set_index('Epidemia').T.plot(kind = 'bar', logy = True, title = 'Casos, mortes e letalidade em escala logar\u00edtmica')","91278219":"# Estilo do gr\u00e1fico\nplt.style.use('ggplot')\n# Tamanho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (8,5)\n\n# Utilizamos .set_index() para inverter linha e coluna do DataFrame original\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'bar' traz um gr\u00e1fico de barras\n# logy = True coloca o eixo y em escala logar\u00edtmica\n# title = <input> aplica o t\u00edtulo ao gr\u00e1fico\ntabela_letalidade.set_index('Epidemia').T.plot(kind = 'bar', title = 'Taxa de letalidade')","2f4d234c":"# Tamanho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (5,3)\n\n# Determinando o DataFrame para mostrar apenas os dados do \u00faltimo dia de coleta\nebola_mortes = ebola_df.loc[ebola_df['Data'] == '2016-03-23']\n# Removendo colunas desnecess\u00e1rias para esta an\u00e1lise\nebola_mortes = ebola_mortes.drop('Data', inplace = False, axis = 1)\nebola_mortes = ebola_mortes.drop('Total de casos', inplace = False, axis = 1)\n# Filtrando o DataFrame com a condi\u00e7\u00e3o de haver mais de 1000 mortes\nebola_mortes = ebola_mortes.loc[ebola_mortes['Total de mortes'] >= 1000]\n# Ordenando para que mostre de maneira crescente o total de mortes\nebola_mortes = ebola_mortes.sort_values(by = 'Total de mortes')\n\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'barh' nos traz um gr\u00e1fico de barras horizontais\n# Determinamos quais ser\u00e3o os eixos x e y\n# legend = False remove a legenda\n# title = <input> determina o t\u00edtulo do gr\u00e1fico\nebola_mortes.plot(kind = 'barh', x = 'Pa\u00eds ou regi\u00e3o', y = 'Total de mortes', legend = False, title = 'Pa\u00edses mais atingidos: Mortes por EBOLA')\n\n# Determinando os nomes dos eixos\nplt.xlabel('Mortes')\nplt.ylabel('Pa\u00eds')\n\n# Execu\u00e7\u00e3o do gr\u00e1fico\nplt.show()","d34d5dc4":"# Tamanho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (11,8)\n\n# Removendo colunas desnecess\u00e1rias para esta an\u00e1lise\nh1n1_mortes = h1n1_df.drop('Casos', inplace = False, axis = 1)\n# Filtrando o DataFrame com a condi\u00e7\u00e3o de haver mais de 200 mortes\nh1n1_mortes = h1n1_mortes.loc[h1n1_mortes['Mortes'] >= 200]\n# Ordenando para que mostre de maneira crescente o total de mortes\nh1n1_mortes = h1n1_mortes.sort_values(by = 'Mortes')\n\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'barh' nos traz um gr\u00e1fico de barras horizontais\n# Determinamos quais ser\u00e3o os eixos x e y\n# legend = False remove a legenda\n# title = <input> determina o t\u00edtulo do gr\u00e1fico\nh1n1_mortes.plot(kind = 'barh', legend = False, x = 'Pa\u00eds ou regi\u00e3o', y = 'Mortes', title = 'Pa\u00edses mais atingidos: Mortes por H1N1')\n\n# Determinando os nomes dos eixos\nplt.xlabel('Mortes')\nplt.ylabel('Pa\u00eds')\n\n# Executando o gr\u00e1fico\nplt.show()","75a890c8":"# Tamamho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (7,4)\n\n# Removendo colunas desnecess\u00e1rias para esta an\u00e1lise\nsars_mortes = sars_df.drop('Casos', inplace = False, axis = 1)\n# Filtrando o DataFrame com a condi\u00e7\u00e3o de haver mais de 20 mortes\nsars_mortes = sars_mortes.loc[sars_mortes['Mortes'] >= 20]\n# Ordenando para que mostre de maneira crescente o total de mortes\nsars_mortes = sars_mortes.sort_values(by = 'Mortes', ascending = True)\n\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'barh' nos traz um gr\u00e1fico de barras horizontais\n# Determinamos quais ser\u00e3o os eixos x e y\n# legend = False remove a legenda\n# title = <input> determina o t\u00edtulo do gr\u00e1fico\nsars_mortes.plot(kind = 'barh', title = 'Pa\u00edses mais afetados: Mortes por SARS-CoV-1', legend = False, x = 'Pa\u00eds', y = 'Mortes')\n\n# Determinando os nomes dos eixos\nplt.xlabel('Mortes')\nplt.ylabel('Pa\u00eds')\n\n# Executando o gr\u00e1fico\nplt.show()","6020bb11":"# Tamanho do gr\u00e1fico\nplt.rcParams['figure.figsize'] = (15,8)\n\n# Removendo colunas desnecess\u00e1rias para esta an\u00e1lise\ncovid_mortes = covid_df.drop('Confirmados', inplace = False, axis = 1)\ncovid_mortes = covid_df.drop('Recuperados', inplace = False, axis = 1)\n# Filtrando o DataFrame com a condi\u00e7\u00e3o de haver mais de 200 mortes\ncovid_mortes = covid_mortes.loc[covid_mortes['Data'] == '2020-06-08']\ncovid_mortes = covid_mortes.loc[covid_mortes['Mortos'] >= 5000]\n# Ordenando para que mostre de maneira crescente o total de mortes\ncovid_mortes = covid_mortes.sort_values(by = 'Mortos')\n\n# Utilizamos .plot() para que plt encontre os valores e os coloque em gr\u00e1fico\n# kind = 'barh' nos traz um gr\u00e1fico de barras horizontais\n# Determinamos quais ser\u00e3o os eixos x e y\n# legend = False remove a legenda\n# title = <input> determina o t\u00edtulo do gr\u00e1fico\ncovid_mortes.plot(kind = 'barh', legend = False, x = 'Pa\u00eds', y = 'Mortos', title = 'Pa\u00edses mais atingidos: Mortes por COVID')\n\n# Determinando os nomes dos eixos\nplt.xlabel('Mortes')\nplt.ylabel('Pa\u00eds')\n\n# Executando o gr\u00e1fico\nplt.show()","5f8baa47":"# Lendo o csv com as Latitudes de Longitudes dos pa\u00edses\ncsv_latlog_ebola = pd.read_csv('..\/input\/latlongmapa\/LatLog Ebola.csv')","af38889f":"# Criando o mapa para ser usado\nworld_map_ebola = folium.Map(location=[14.497401, -14.452362], zoom_start=2, max_zoom = 10, min_zoom = 2)\n\n# Criando repeti\u00e7\u00e3o para incluir informa\u00e7\u00f5es no mapa\nfor i in range(0,len(csv_latlog_ebola)):\n    \n    # Marcador do mapa\n    folium.Marker(\n        \n        # Atribuindo as latitudes e longitudes de acordo com as colunas do csv\n        location=[csv_latlog_ebola.iloc[i]['Latitude'], csv_latlog_ebola.iloc[i]['Longitude']],\n        # Adicionando informa\u00e7\u00e3o do pais ao marker\n        popup = csv_latlog_ebola.iloc[i]['Pais'],\n        # Atribuindo t\u00ectulo ao marker\n        title = 'Pais com casos de Ebola',\n        # Definindo cor do marcador\n        icon = folium.Icon(color='green')\n    \n    # Tudo isso adicionado ao mapa\n    ).add_to(world_map_ebola)\n\n# Execu\u00e7\u00e3o do mapa\nworld_map_ebola","dc81d3b6":"# Lendo o csv com as Latitudes de Longitudes dos pa\u00edses\ncsv_latlog_h1n1 = pd.read_csv('..\/input\/maploglath1n1\/LatLog H1N1.csv')","ff1d8fe2":"# Criando o mapa para ser usado\nworld_map_h1n1 = folium.Map(location=[14.497401, -14.452362], zoom_start=2, max_zoom = 10, min_zoom = 2)\n\n# Criando repeti\u00e7\u00e3o para incluir informa\u00e7\u00f5es no mapa\nfor i in range(0,len(csv_latlog_h1n1)):\n    \n    # Marcador do mapa\n    folium.Marker(\n        \n        # Atribuindo as latitudes e longitudes de acordo com as colunas do csv\n        location=[csv_latlog_h1n1.iloc[i]['Latitude'], csv_latlog_h1n1.iloc[i]['Longitude']],\n        # Adicionando informa\u00e7\u00e3o do pais ao marker\n        popup = csv_latlog_h1n1.iloc[i]['Pais'],\n        # Atribuindo t\u00ectulo ao marker\n        title = 'Pais com casos de H1N1',\n        # Definindo cor do marcador\n        icon = folium.Icon(color='purple')\n    \n    # Tudo isso adicionado ao mapa\n    ).add_to(world_map_h1n1)\n    \n# Execu\u00e7\u00e3o do mapa\nworld_map_h1n1","45fa5a67":"# Lendo o csv com as Latitudes de Longitudes dos pa\u00edses\ncsv_latlog_sars = pd.read_csv('..\/input\/mapa-log-lat-sars\/LatLog SARS.csv')","c836d496":"# Criando o mapa para ser usado\nworld_map_sars = folium.Map(location=[35.86166, 104.195397], zoom_start=2, max_zoom = 10, min_zoom = 2)\n\n# Criando repeti\u00e7\u00e3o para incluir informa\u00e7\u00f5es no mapa\nfor i in range(0,len(csv_latlog_sars)):\n    \n    # Marcador do mapa\n    folium.Marker(\n        \n        # Atribuindo as latitudes e longitudes de acordo com as colunas do csv\n        location=[csv_latlog_sars.iloc[i]['Latitude'], csv_latlog_sars.iloc[i]['Longitude']],\n        # Adicionando informa\u00e7\u00e3o do pais ao marker\n        popup = csv_latlog_sars.iloc[i]['Pais'],\n        # Atribuindo t\u00ectulo ao marker\n        title = 'Pais com casos de SARS',\n        # Definindo cor do marcador\n        icon = folium.Icon(color='blue')\n     \n    # Tudo isso adicionado ao mapa\n    ).add_to(world_map_sars)\n    \n# Execu\u00e7\u00e3o do mapa\nworld_map_sars","83b29208":"# Lendo o csv com as Latitudes de Longitudes dos pa\u00edses\ncsv_latlog_covid = pd.read_csv(\"..\/input\/mapa-log-lat-covid\/LatLog COVID-19.csv\")","40a696b4":"# Criando o mapa para ser usado \nworld_map_covid = folium.Map(location=[-16.1237611, -59.9219642], zoom_start=2, max_zoom = 10, min_zoom = 2)\n\n# Criando repeti\u00e7\u00e3o para incluir informa\u00e7\u00f5es no mapa \nfor i in range(0,len(csv_latlog_covid)):\n    \n    # Marcador do mapa\n    folium.Marker(\n        \n        # Atribuindo as latitudes e longitudes de acordo com as colunas do csv\n        location=[csv_latlog_covid.iloc[i]['Latitude'], csv_latlog_covid.iloc[i]['Longitude']],\n        \n        # Adicionando informa\u00e7\u00e3o do pais ao marker \n        popup = csv_latlog_covid.iloc[i]['Pais'],\n        \n        # Atribuindo t\u00ectulo ao marker\n        title = 'Pa\u00eds com caso de COVID-19',\n        \n        # Definindo cor do marcador \n        icon = folium.Icon(color='red')\n        \n    # Tudo isso adicionado ao mapa\n    ).add_to(world_map_covid)\n\n# Execu\u00e7\u00e3o do mapa\nworld_map_covid","b2b15793":"Perceba que o *dataset* ser\u00e1 constru\u00eddo por tabula\u00e7\u00f5es, nos trazendo strings alinhadas, mas ainda n\u00e3o manipul\u00e1veis.\nEsta tabela ser\u00e1 armazenada na vari\u00e1vel ``tabela_final``, na qual adicionamos os nomes das colunas desejadas, com tabula\u00e7\u00f5es, e um caractere de ENTER ao final.","2166d281":"Perceba que o *dataset* ser\u00e1 constru\u00eddo por tabula\u00e7\u00f5es, nos trazendo strings alinhadas, mas ainda n\u00e3o manipul\u00e1veis.\nEsta tabela ser\u00e1 armazenada na vari\u00e1vel ``tabela_final_sars``, na qual adicionamos os nomes das colunas desejadas, com tabula\u00e7\u00f5es, e um caractere de ENTER ao final.","e07780e2":"Analisaremos uma linha qualquer para manipular estes dados de maneira que a an\u00e1lise seja corretamente aplicada. O m\u00e9todo ``.text`` nos trar\u00e1 somente o texto do c\u00f3digo e ```.strip('\\n')``` remover\u00e1 caracteres indesejados das pontas da string. ``.replace('\\n', '\\t')`` substituir\u00e1 caracteres de ENTER por caracteres de tabula\u00e7\u00e3o","94742270":"##### *Defini\u00e7\u00e3o da fun\u00e7\u00e3o de prepara\u00e7\u00e3o de linhas*","fb1c0f2c":"*COVID-19*","27eca1b9":"*COVID-19*","f6b89103":"##### *Grava\u00e7\u00e3o do dataset como arquivo .csv*","69c75c5c":"Perceba que o dataset ser\u00e1 constru\u00eddo por tabula\u00e7\u00f5es, nos trazendo strings alinhadas, mas ainda n\u00e3o manipul\u00e1veis. Esta tabela ser\u00e1 armazenada na vari\u00e1vel ``tabela_final_h1n1``, na qual adicionamos os nomes das colunas desejadas, com tabula\u00e7\u00f5es, e um caractere de ENTER ao final.","816c52be":"##### *Tratamento dos dados*\n","904712e0":"Utilizaremos a fun\u00e7\u00e3o ``prep_linha(linha)``. Note que os met\u00f3dos aplicados ao tratamento, acima, ser\u00e3o aplicados na fun\u00e7\u00e3o e a vari\u00e1vel linha ser\u00e1 retornada.","3cb00d76":"##### *Constru\u00e7\u00e3o do dataset*","77c11dec":"A biblioteca pandas nos traz o dataset gravado no formato de DataFrame, possibilitando an\u00e1lises estat\u00edsticas. Note que \u00e9 crucial indicar o separador de cada coluna: sep = ','","aab4173b":"*SARS-CoV-1*","27bdf8a0":"``.head()`` executar\u00e1 apenas as cinco primeiras linhas do *DataFrame*","5f51befa":"***Defini\u00e7\u00e3o da prepara\u00e7\u00e3o de linhas***","d751b6a1":"#### Pa\u00edses mais afetados pelas epidemias","88cf9f10":"*SARS-CoV-1*","15cb9081":" ``.head()`` executar\u00e1 apenas as cinco primeiras linhas do *DataFrame*","531b6b23":"***Constru\u00e7\u00e3o do dataset***","91df14a9":"Analisaremos uma linha qualquer para manipular estes dados de maneira que a an\u00e1lise seja corretamente aplicada.","835180ee":"##### *Tratamento dos dados*","519319e5":"Ser\u00e1 produzida uma tabela que contenha o total de cada um desses fatores relativo \u00e0 cada pandemia, para que possamos analisar, de maneira proporcional, o quanto cada epidemia afetou o mundo e qu\u00e3o letal ela foi para com os pacientes.","40457e68":"*H1N1*","44861739":"Utilizaremos a fun\u00e7\u00e3o ``prep_linha(linha)``. Note que os met\u00f3dos aplicados ao tratamento, acima, ser\u00e3o aplicados na fun\u00e7\u00e3o e a vari\u00e1vel linha ser\u00e1 retornada.","f72078c3":"*Criando os DataFrames*","f6829578":"***Grava\u00e7\u00e3o do dataset como arquivo .csv***","ee0b9190":"Utilizaremos a fun\u00e7\u00e3o ``prep_linha_sars(linha_sars)``. Note que usaremos c\u00f3digos de substitui\u00e7\u00e3o, essenciais para o tratamentos dos dados\n","b5d1ccdf":"##### *Grava\u00e7\u00e3o do dataset como arquivo .csv*","6343094c":"Analisaremos uma linha qualquer para manipular estes dados de maneira que a an\u00e1lise seja corretamente aplicada. O m\u00e9todo ``.text`` nos trar\u00e1 somente o texto do c\u00f3digo e ```.strip('\\n')``` remover\u00e1 caracteres indesejados das pontas da string. ``.replace('\\n', '\\t')`` substituir\u00e1 caracteres de ENTER por caracteres de tabula\u00e7\u00e3o","53260669":"***Constru\u00e7\u00e3o do dataset***","86dcbf32":"##### *Defini\u00e7\u00e3o da fun\u00e7\u00e3o de prepara\u00e7\u00e3o de linhas*","0ea9c518":"### Conclus\u00e3o","e643c58f":"``.head()`` executar\u00e1 apenas as cinco primeiras linhas do *DataFrame*","8fe34d35":"*H1N1*","8b9d3105":"### Raspagem de dados das epidemias","ca6185c4":"A COVID-19, com 5,7% de mortes entre os casos sintom\u00e1ticos confirmados at\u00e9 o presente momento, apresenta uma taxa de letalidade menor do ponto de vista relativo em compara\u00e7\u00e3o com o EBOLA e a SARS, que apresentaram taxas de letalidade de 37,2% e 10%, respectivamente.\n\nNo entanto, estas duas supracitadas n\u00e3o possuem a mesma capacidade de cont\u00e1gio, o que \u00e9 not\u00f3rio pela quantidade de casos confirmados: EBOLA e SARS-CoV-1 n\u00e3o chegaram \u00e0 casa das centenas de milhares, enquanto a COVID-19, ainda em andamento, j\u00e1 conta com mais de 7 milh\u00f5es de casos. E o que a diferencia da pandemia de H1N1, com mais de 6 milh\u00f5es de ind\u00edviduos que foram infectados? A letalidade \u00e9 19 vezes maior: H1N1 apresentou uma taxa de letalidade em aproximadamente 0,3% dos casos.\n\nAdemais, \u00e9 importante ressaltar a diferen\u00e7a da escala de impacto de cada fen\u00f4meno epidemiol\u00f3gico e as regi\u00f5es mais afetadas: COVID-19 e H1N1 tornaram-se pandemias (ou seja, dissemina\u00e7\u00e3o do v\u00edrus entre diversos pa\u00edses de diferentes continentes) como se pode observar nos mapas acima, enquanto as epidemias de EBOLA e SARS-CoV-1 permaneceram fortes em escala regional na \u00c1frica e na \u00c1sia, respectivamente, sem grande cont\u00e1gio ao redor do mundo.","2556d0f8":"Perceba que o *dataset* ser\u00e1 constru\u00eddo por tabula\u00e7\u00f5es, nos trazendo strings alinhadas, mas ainda n\u00e3o manipul\u00e1veis.\nEsta tabela ser\u00e1 armazenada na vari\u00e1vel ``tabela_final``, na qual adicionamos os nomes das colunas desejadas, com tabula\u00e7\u00f5es, e um caractere de ENTER ao final.","69d05968":"##### *Abertura do dataset com pandas*","af3843d0":"*SARS-CoV-1*","f6f1cb3c":"##### *Abertura do dataset com pandas*","4dda1cd3":"Com os somat\u00f3rios ``tabela_final += linha`` e ``tabela_final += '\\n'``, a tabela ser\u00e1 constru\u00edda com cada linha da tabela original j\u00e1 preparada e com caracteres que pulem linhas, para a visualiza\u00e7\u00e3o ser perfeita.","d14534a7":"Dados da SARS","5057e9f7":"Visualiza\u00e7\u00e3o em mapa dos pa\u00edses com registro das doen\u00e7as","356181aa":"### An\u00e1lises estat\u00edsticas","5335826b":"*Constru\u00e7\u00e3o de gr\u00e1ficos*","4b8955c5":"*EBOLA*","78783b73":"#### Dados do EBOLA","41de58e2":"*Ebola*","c92ad8e1":"***Abertura do dataset com pandas***","8414974b":"Usaremos a estrutura de repeti\u00e7\u00e3o ``for``, de ``1``(a primeira linha) at\u00e9 ``len(linhas)-3``(que indica que ser\u00e3o extra\u00eddas todas as linhas, com exce\u00e7\u00e3o das tr\u00eas \u00faltimas, que n\u00e3o nos s\u00e3o \u00fateis nesta an\u00e1lise) ","1e833a68":"``.replace('\\n', '\\t')`` substituir\u00e1 caracteres de ENTER por caracteres de tabula\u00e7\u00e3o.","31e3acf7":"##### *Constru\u00e7\u00e3o do dataset*","9ba0ade4":"A biblioteca pandas nos traz o *dataset* gravado no formato de *DataFrame*, possibilitando an\u00e1lises estat\u00edsticas. Note que \u00e9 crucial indicar o separador de cada coluna: ``sep = '\\t\\`` ","a30916e3":"# CDIA20 | Projeto final de disciplina","b17ce129":"Utilizaremos a fun\u00e7\u00e3o ``prep_linha_h1n1(linha_h1n1)``. Note que usaremos c\u00f3digos de substitui\u00e7\u00e3o, essenciais para o tratamentos dos dados","40eb44ad":"A biblioteca *pandas* nos traz o *dataset* gravado no formato de *DataFrame*, possibilitando an\u00e1lises estat\u00edsticas. Note que \u00e9 crucial indicar o separador de cada coluna: ``sep = '\\t\\`` ","a176edfd":"Cada linha ser\u00e1 executada em fun\u00e7\u00e3o de ``prep_linha(linhas[i])``, uma vez que a vari\u00e1vel ``linhas`` compreende a lista com todas as linhas.","40b83532":"O m\u00e9todo ``.text`` nos trar\u00e1 somente o texto do c\u00f3digo.","b65c282c":"### Importa\u00e7\u00e3o de bibliotecas","01b0d030":"Cada linha ser\u00e1 executada em fun\u00e7\u00e3o de ``prep_linha_h1n1(linhas_h1n1[i])``, uma vez que a vari\u00e1vel ``linhas_h1n1`` compreende a lista com todas as linhas.","65de9dff":"Neste caso, foram aplicados os m\u00e9todos de remo\u00e7\u00e3o de extremidades comuns: ``.strip()`` e de substitui\u00e7\u00e3o: ``.replace()``","7b3ddde4":"Ao final, retorna-se a vari\u00e1vel ``linha_h1n1``","24f6ce1f":"***Tratamento dos dados***","945a0afa":"#### Mapas","8f84c463":"Cada linha ser\u00e1 executada em fun\u00e7\u00e3o de ``prep_linha_sars(linhas_sars[i])``, uma vez que a vari\u00e1vel ``linhas_sars`` compreende a lista com todas as linhas.","d7c1f891":"Com os somat\u00f3rios tabela_final += linha e tabela_final += '\\n', a tabela ser\u00e1 constru\u00edda com cada linha da tabela original j\u00e1 preparada e com caracteres que pulem linhas, para a visualiza\u00e7\u00e3o ser perfeita.","0d2e68bb":"*H1N1*","4d741fe1":"##### *Abertura do dataset com pandas*","30affc61":"Cada linha ser\u00e1 executada em fun\u00e7\u00e3o de ``prep_linha(linhas[i])``, uma vez que a vari\u00e1vel ``linhas`` compreende a lista com todas as linhas.","14c9d4dd":"Ao final, retorna-se a vari\u00e1vel ``linha_sars``","345fddd7":"*COVID-19*","f44e5d1e":"Com os somat\u00f3rios ``tabela_final_h1n1 += linha`` e ``tabela_final_h1n1 += '\\n'``, a tabela ser\u00e1 constru\u00edda com cada linha da tabela original j\u00e1 preparada e com caracteres que pulem linhas, para a visualiza\u00e7\u00e3o ser perfeita.","d909c09e":"Dados de COVID-19","066f0718":"``.strip('\\n')`` e ``.strip('\\xa0')`` remover\u00e3o caracteres indesejados das pontas da string.","77e1159a":"## Desenvolvimento do projeto","43298ab3":"A biblioteca *pandas* nos traz o *dataset* gravado no formato de *DataFrame*, possibilitando an\u00e1lises estat\u00edsticas. Note que \u00e9 crucial indicar o separador de cada coluna: ``sep = '\\t\\`` .","db4c0adb":"#### Total de casos, mortes e letalidade","6cf2c6c8":"*EBOLA*","46d412f6":"A COVID-19 tem maior incid\u00eancia letal que SARS-CoV-1, EBOLA e H1N1?\n","8f637485":"Com os somat\u00f3rios ``tabela_final_sars += linha`` e ``tabela_final_sars += '\\n'``, a tabela ser\u00e1 constru\u00edda com cada linha da tabela original j\u00e1 preparada e com caracteres que pulem linhas, para a visualiza\u00e7\u00e3o ser perfeita.","0b159f54":"``re.sub(r'\\[.*\\]', '')`` remover\u00e1, a partir da express\u00e3o regular, a notas entre colchetes, indesejadas.","368a6aa7":"Usaremos a estrutura de repeti\u00e7\u00e3o ``for``, de ``1``(a primeira linha) at\u00e9 ``len(linhas)-1``(que indica que ser\u00e3o extra\u00eddas todas as linhas, com exce\u00e7\u00e3o da \u00faltima, que n\u00e3o nos \u00e9 \u00fatil nesta an\u00e1lise) ","d8a148c7":"Neste caso, foram aplicados os m\u00e9todos de remo\u00e7\u00e3o de extremidades comuns: ``.strip()``, de substitui\u00e7\u00e3o de caracteres espec\u00edficos: ``.replace()`` e de substitui\u00e7\u00e3o de express\u00f5es regulares: ``re.sub()``","1b7c4e07":"##### *Defini\u00e7\u00e3o da fun\u00e7\u00e3o de prepara\u00e7\u00e3o de linhas*","c488c191":"Usaremos a estrutura de repeti\u00e7\u00e3o ``for``, de ``4``(a primeira linha desej\u00e1vel) at\u00e9 ``62``(\u00faltima linha desej\u00e1vel)","79caa995":"#### Dados da H1N1","45f799c1":"***Grava\u00e7\u00e3o do dataset como arquivo .csv***","6a30f496":"Usaremos a estrutura de repeti\u00e7\u00e3o for a partir da primeira linha que indica que ser\u00e3o extra\u00eddas todas as linhas","8b940d9c":"Ser\u00e3o produzidos gr\u00e1ficos que ilustram os pa\u00edses com maiores n\u00fameros de mortes por cada epidemia, para que possamos estabelecer se tal doen\u00e7a afetou o planeta como um todo, um continente, uma regi\u00e3o etc.","62a60236":"## Quest\u00e3o dirigida"}}