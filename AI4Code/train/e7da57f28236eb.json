{"cell_type":{"c5f09bc3":"code","aff515ca":"code","268a1e07":"code","45fd67e6":"code","d59ad25a":"code","cf181715":"code","49e2c523":"code","769ecebb":"markdown","c0ed729b":"markdown","0a324b25":"markdown","63ae21a1":"markdown"},"source":{"c5f09bc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aff515ca":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv',nrows=30000)\n","268a1e07":"features = [col for col in list(train.columns) if 'feature' in col]\ntrain = train[train['weight'] != 0]\ntrain['action'] = (train['resp'].values > 0).astype(int)\nf_mean = train.mean()\ntrain = train.fillna(f_mean)\nX = train.loc[:, features]\ny = train.loc[:, 'action']\ndel train\nX = np.array(X)\ny = np.array(y)","45fd67e6":"import lightgbm as lgb\nimport optuna\nfrom sklearn.model_selection import train_test_split\nimport sklearn","d59ad25a":"import optuna\ndef objective(trial):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)\n    dtrain = lgb.Dataset(X_train, label=y_train)\n\n    param = {\n        \"objective\": \"binary\",\n        \"metric\": \"binary_logloss\",\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",\n        \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n        \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n        \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n    }\n\n    gbm = lgb.train(param, dtrain)\n    preds = gbm.predict(X_test)\n    pred_labels = np.rint(preds)\n    accuracy = sklearn.metrics.accuracy_score(y_test, pred_labels)\n    return accuracy","cf181715":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=100)","49e2c523":"print(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","769ecebb":"### This notebook is for beginners who want to know about hyperparameter optimization","c0ed729b":"We are going to use [lightGBM](https:\/\/lightgbm.readthedocs.io\/en\/latest\/) as a machine learning model. And we are going to use [Optuna](https:\/\/optuna.readthedocs.io\/en\/stable\/) which is auto hyperparameter tuner to tune the parameters of LGBM.","0a324b25":"### So these are the best parameters for your models.","63ae21a1":"### What is hyperparameter tuning\nHyperparameter tuning or optimization is the method to find optimal parameters to your machine learning model"}}