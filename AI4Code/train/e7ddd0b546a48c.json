{"cell_type":{"2176baab":"code","c938c6f8":"code","8ae53bc9":"code","9c802d9b":"code","aabf3f66":"code","3455c1bf":"code","ae2a3cfe":"code","ac0930ba":"code","861ce568":"code","2cd5643d":"code","c141750c":"code","c725ef2f":"code","836006ef":"code","0d2e2a60":"code","e3512bc2":"code","c4d831c0":"code","5e64cdfe":"code","3d0d1c82":"code","25c81b7e":"code","6c2bb8d1":"markdown","7c8b86d0":"markdown","114a7227":"markdown","c75e966f":"markdown"},"source":{"2176baab":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics","c938c6f8":"df = pd.read_csv('..\/input\/experimental-power-and-thrust-coefficients\/thrust.csv')","8ae53bc9":"df.shape","9c802d9b":"df.head()","aabf3f66":"df.describe()","3455c1bf":"df.info()","ae2a3cfe":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(df.corr(), annot = True, cmap = 'OrRd')\nplt.title(\"Pearson Correlation\")\nplt.show()","ac0930ba":"#split data\nX = df.drop('Type', axis = 1) \ny = df['Type']\nfeature = ['V', 'Gamma', 'TSR', 'CT']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","861ce568":"#build model\ndtc = DecisionTreeClassifier(max_depth = 3)\n%time dtc.fit(X_train, y_train)","2cd5643d":"#prediction\ny_pred = dtc.predict(X_test)\nprint(y_pred)","c141750c":"#accuracy score\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(accuracy)","c725ef2f":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, cmap = 'Blues')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","836006ef":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","0d2e2a60":"#visualize model\nfig = plt.figure(figsize = (15,10))\n_= tree.plot_tree(dtc, feature_names = feature, class_names = y, filled = True, rounded = True)","e3512bc2":"#visualize type ~ yaw angle\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'Type', y = 'Gamma', palette = 'Set1')\nplt.title(\"Type ~ Yaw Angle\")\nplt.show()","c4d831c0":"#visualize type ~ tip speed ratio\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'Type', y = 'TSR', palette = 'Set2')\nplt.title(\"Type ~ Tip Speed Ratio\")\nplt.show()","5e64cdfe":"#visualize type ~ thrust coefficient\nplt.figure(figsize = (10,6))\nsns.boxplot(data = df, x = 'Type', y = 'CT')\nplt.title(\"Type ~ Thrust Coefficient\")\nplt.show()","3d0d1c82":"#visualize tip speed ratio ~ thrust coefficient\nsns.lmplot(data = df, x = 'CT', y = 'TSR', hue = 'Type', palette = 'Set2')\nplt.title(\"Tip Speed Ratio ~ Thrust Coefficient\")\nplt.show()","25c81b7e":"#visualize Type\nplt.figure(figsize = (10,6))\nx = [np.count_nonzero(df['Type'] == 'Blade'),\n    np.count_nonzero(df['Type'] == 'Diffuser'),\n    np.count_nonzero(df['Type'] == 'Shroud')]\nactivities = ['Blade', 'Diffuser', 'Shroud']\nplt.pie(x, labels = activities, startangle = 50, autopct = '%.1f%%', shadow = True)\nplt.title(\"Component Type\")\nplt.show()","6c2bb8d1":"## Decision Tree Model","7c8b86d0":"## Data Extraction","114a7227":"## Visualization","c75e966f":"# Turbin Performance Prediction"}}