{"cell_type":{"37692225":"code","e53339c5":"code","51a93bd5":"code","df3497b4":"code","7f93cb69":"code","f929d6b8":"code","b1f4c18d":"code","a58d15f6":"code","2565088e":"code","e1e1d440":"code","9cc66be7":"code","e276e040":"code","e0ad8590":"code","75864bfd":"code","ce0ba475":"code","672f3550":"code","5ebd6d10":"code","9ffa389e":"code","f5ca746a":"code","2eefb9f9":"code","3d06d7d0":"code","b9f13d8f":"code","05810c5b":"code","51f5e136":"code","b67baaad":"code","3966ec99":"code","f467f469":"code","3fd51765":"markdown","f526d5df":"markdown","fbcc6266":"markdown","b7c6545d":"markdown","842c8ab5":"markdown","57604e28":"markdown","aaf1c238":"markdown","6427ad1f":"markdown","56b2146c":"markdown","367f14bc":"markdown","e45730d8":"markdown","1ebc9ae6":"markdown","535c2b25":"markdown"},"source":{"37692225":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","e53339c5":"df = pd.read_csv('..\/input\/chess\/games.csv')","51a93bd5":"df.head()","df3497b4":"df.winner.value_counts()","7f93cb69":"print('White appears to win', round(10001 \/ 20058, 2) * 100, '% of the games')\nprint('while Black wins', round(9107 \/ 20058, 2) * 100, '% of the games')\nprint('and', round(950 \/ 20058, 2) * 100, '% of the games are a draw')","f929d6b8":"#This cell creates a dataframe where openings are aggregated by the number of wins for each side\nopen_df = df.groupby(by='opening_name').winner.value_counts()\nopen_df = open_df.reset_index(name='wins')\nopen_df = open_df.sort_values(by='wins', ascending=False)","b1f4c18d":"#The dataframes are splits by whether black or white won\nblack_wins = open_df[open_df['winner'] == 'black']\nwhite_wins = open_df[open_df['winner'] == 'white']","a58d15f6":"black_wins.head()","2565088e":"white_wins.head()","e1e1d440":"#This cell takes the top 5 openings for each side and gets the amount of wins as a percentage\nblack_winner = list(black_wins.head().opening_name)\nwhite_winner = list(white_wins.head().opening_name)\nwinner = black_winner + white_winner\ndataframes = []\nfor x in winner:\n    temp = open_df[open_df['opening_name'] == x]\n    temp['sum'] = temp.wins.sum().astype(int)\n    temp['percentage'] = temp['wins'] \/ temp['sum']\n    dataframes.append(temp)\nwin_prob = dataframes[0]\nfor x in dataframes[1:]:\n    win_prob = pd.concat([win_prob, x])","9cc66be7":"x = win_prob[win_prob['winner'] == 'black'].opening_name\ny = win_prob[win_prob['winner'] == 'black'].percentage\nplt.figure(dpi=100)\nplt.bar(x, height=y, edgecolor='black')\nplt.xticks(rotation='vertical')\nplt.title('Win percentage by opening for black')\nplt.xlabel('Opening')\nplt.ylabel('Percentage(Out of 1)')","e276e040":"x = win_prob[win_prob['winner'] == 'white'].opening_name\ny = win_prob[win_prob['winner'] == 'white'].percentage\nplt.figure(dpi=100)\nplt.bar(x, height=y, edgecolor='black')\nplt.xticks(rotation='vertical')\nplt.title('Win percentage by opening for white')\nplt.xlabel('Opening')\nplt.ylabel('Percentage(Out of 1)')","e0ad8590":"#This cell puts white id and black id under a common column and puts them into one dataframe\nmask = ['white_id', 'white_rating']\nwhite_player_df = df[mask]\nwhite_player_df.columns = ['player_id', 'player_rating']\nmask = ['black_id', 'black_rating']\nblack_player_df = df[mask]\nblack_player_df = black_player_df[mask]\nblack_player_df.columns = ['player_id', 'player_rating']\nplayer_df = pd.concat([white_player_df, black_player_df])","75864bfd":"#This cell takes the max rating for each id\nID = []\nrating = []\nfor x in player_df.player_id.unique():\n    ID.append(x)\n    temp = player_df[player_df['player_id'] == x]\n    rating.append(temp.player_rating.max())\nplayer_df = pd.DataFrame()\nplayer_df['player_id'] = np.array(ID)\nplayer_df['player_rating'] = np.array(rating)","ce0ba475":"top_10 = player_df.sort_values(by='player_rating', ascending=False).head(10)\nplt.figure(dpi=100)\nplt.barh(y=top_10.player_id, width=top_10.player_rating, edgecolor='black')\n\nplt.title('Top 10 players by rating')\nplt.xlabel('Player Rating')\nplt.ylabel('Player ID')","672f3550":"top_20 = player_df.sort_values(by='player_rating', ascending=False).head(20)\nplt.figure(dpi=450)\nplt.barh(y=top_20.player_id, width=top_20.player_rating, edgecolor='black')\n\nplt.title('Top 20 players by rating')\nplt.xlabel('Player Rating')\nplt.ylabel('Player ID')","5ebd6d10":"#This cell turns value counts into a dataframe\nresolve = pd.DataFrame(df.victory_status.value_counts())\nresolve = resolve.reset_index()","9ffa389e":"plt.figure(dpi=100)\nplt.bar(x=resolve['index'], height=resolve.victory_status, edgecolor='black')\nplt.title('Victory Status')\nplt.xlabel('Status')\nplt.ylabel('Number of occurances')","f5ca746a":"turn_df = df.groupby(by='victory_status').turns.mean().reset_index()\nplt.figure(dpi=100)\nplt.bar(x=turn_df.victory_status, height=turn_df.turns, edgecolor='black')\nplt.title('Victory Status by average number of turns')\nplt.xlabel('Status')\nplt.ylabel('Number of turns')","2eefb9f9":"#For each game, it takes the difference between the winner and the loser\ndifference = []\nfor x in range(df.shape[0]):\n    temp = df.iloc[x]\n    if temp['winner'] == 'white':\n        diff = temp.white_rating - temp.black_rating\n        difference.append(diff)\n    elif temp['winner'] == 'black':\n        diff = temp.black_rating - temp.white_rating\n        difference.append(diff)\n    else:\n        ratings = [temp.black_rating, temp.white_rating]\n        diff = max(ratings) - min(ratings)\n        difference.append(diff)\ndf['Difference'] = np.array(difference)","3d06d7d0":"mean_df = df.groupby(by='winner').Difference.mean().reset_index()\nplt.figure(dpi=100)\nplt.bar(x=mean_df['winner'], height=mean_df.Difference, edgecolor='black')\nplt.title('Mean difference in ratings')\nplt.xlabel('Winner')\nplt.ylabel('Difference in rating')","b9f13d8f":"mean_df = df.groupby(by='winner').Difference.std().reset_index()\nplt.figure(dpi=100)\nplt.bar(x=mean_df['winner'], height=mean_df.Difference, edgecolor='black')\nplt.title('Standard deviation of difference in ratings')\nplt.xlabel('Winner')\nplt.ylabel('Difference in rating')","05810c5b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\ncols = ['white_rating', 'black_rating']\nX = df[cols]\ny = df['winner']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)","51f5e136":"lr = LogisticRegression()\nlr.fit(X_train, y_train)","b67baaad":"lr.score(X_test, y_test)","3966ec99":"#Let's test this with a hypothetical match up with white rated 1463 and black rated 1500\ntest = np.array([1463, 1500])\ntest = test.reshape(1, -1)\nprint(lr.predict(test))\nprint(max(lr.predict_proba(test)[0]))\nprint((lr.predict_proba(test)[0]))","f467f469":"#Let's test this again with a far more distant rating\ntest = np.array([1686, 1523])\ntest = test.reshape(1, -1)\nprint(lr.predict(test))\nprint(max(lr.predict_proba(test)[0]))\nprint((lr.predict_proba(test)[0]))","3fd51765":"# Data","f526d5df":"# Machine Learning","fbcc6266":"We see that the model predicts that black will win but it is only 48% certain(remember that there is around a 6% chance that this game could end in a draw)","b7c6545d":"It's not groundbreaking but 62% accuracy based purely on ratings isn't bad.","842c8ab5":"# Libraries","57604e28":"## Logistic Regression","aaf1c238":"## How are most games resolved?","6427ad1f":"Now we see that the model predicts white will win with 64% certainty.","56b2146c":"## Who wins more?","367f14bc":"# EDA","e45730d8":"## Which openings have the most wins?","1ebc9ae6":"## What role does rating play in victory?","535c2b25":"## Who are the top players?"}}