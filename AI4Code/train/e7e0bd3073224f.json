{"cell_type":{"732cb4fa":"code","5ba938d0":"code","f7d59f97":"code","8801c60d":"code","196673e0":"code","348770b0":"code","f02f04d5":"code","b76344a0":"code","d7c5b2db":"code","afb7c0d1":"code","77fd3757":"code","90d725b3":"code","1da947c9":"code","e262f15a":"code","fc34ab9f":"markdown","1220b875":"markdown","83b2e60e":"markdown","ad98d222":"markdown","206bfe0b":"markdown","ffc373bf":"markdown","2fb73ef0":"markdown","8a066dea":"markdown"},"source":{"732cb4fa":"import numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split","5ba938d0":"(train_input, train_target), (test_input, test_target) = \\\n    keras.datasets.fashion_mnist.load_data()","f7d59f97":"train_scaled = train_input.reshape(-1, 28, 28, 1) \/ 255.0","8801c60d":"train_scaled, val_scaled, train_target, val_target = train_test_split(\n    train_scaled, train_target, test_size=0.2, random_state=42)","196673e0":"class CNNMaker:\n    def __init__(self):\n        self.model = keras.Sequential()\n        self.history = []\n        self.class_labels = ['T-shirt\/top','Trouser','Pullover','Dress','Coat',\n               'Sandal','Shirt','Sneakers','Bag','Ankle boot']\n        \n    def initCNN(self,imageSize,filterNum,filterSize,isMaxPooling2D):\n        self.model.add(keras.layers.Conv2D(filterNum,kernel_size=filterSize,activation='relu',\n                                      padding='same',input_shape=(imageSize,imageSize,1)))\n        if isMaxPooling2D == True:\n            self.model.add(keras.layers.MaxPooling2D(2))\n        \n    def addCNN(self,filterNum,filterSize,isMaxPooling2D):\n        self.model.add(keras.layers.Conv2D(filterNum, kernel_size=filterSize, activation='relu',padding='same'))\n\n        if isMaxPooling2D == True:\n            self.model.add(keras.layers.MaxPooling2D(2))\n\n    def flatten(self):\n        self.model.add(keras.layers.Flatten())\n\n    def addDense(self,denseUnits):\n        self.model.add(keras.layers.Dense(denseUnits, activation='relu'))\n\n    def dropOut(self,ratio):\n        self.model.add(keras.layers.Dropout(ratio))\n\n    def addSoftmaxDense(self,denseUnits):\n        self.model.add(keras.layers.Dense(denseUnits, activation='softmax'))\n\n\n    def trainModel(self,X,y,X_val,y_val,epochs):\n        display(self.model.summary())\n\n        display(keras.utils.plot_model(self.model, show_shapes=True, to_file='model001.png', dpi=100))\n\n        self.model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', \n                      metrics='accuracy')\n\n        checkpoint_cb = keras.callbacks.ModelCheckpoint('best-cnn-model.h5', \n                                                        save_best_only=True)\n        early_stopping_cb = keras.callbacks.EarlyStopping(patience=2,\n                                                          restore_best_weights=True)\n\n        self.history = self.model.fit(X, y, epochs=epochs,\n                            validation_data=(X_val, y_val),\n                            callbacks=[checkpoint_cb, early_stopping_cb])\n        \n    def getModel(self):\n        return self.model\n    \n    def getModelHistory(self):\n        return self.history\n    \n    def showHistoryPlot(self):\n        plt.plot(self.history.history['loss'])\n        plt.plot(self.history.history['val_loss'])\n        plt.xlabel('epoch')\n        plt.ylabel('loss')\n        plt.legend(['train', 'val'])\n        plt.show()\n        \n    def evaluate(self,X_val,y_val):\n        self.model.evaluate(X_val, y_val)\n        \n    def predict(self,X):\n        preds = self.model.predict(X)\n        return preds\n    \n    def getClassLabel(self,preds):\n        return self.class_labels[np.argmax(preds)]\n    \n    def predictLabel(self,X):\n        preds = self.model.predict(X)\n        return self.class_labels[np.argmax(preds)]\n        \n    def plotClassLabel(self,pred):\n        plt.bar(range(1, 11), pred)\n        plt.xlabel('class')\n        plt.ylabel('prob.')\n        plt.show()\n        \n    def drawImage(self,X):\n        plt.imshow(X.reshape(28, 28), cmap='gray_r')\n        plt.show()","348770b0":"cnnMaker = CNNMaker()\ncnnMaker.initCNN(28,32,3,True)\ncnnMaker.addCNN(64,3,True)\ncnnMaker.flatten()\ncnnMaker.addDense(100)\ncnnMaker.dropOut(0.4)\ncnnMaker.addSoftmaxDense(10)\ncnnMaker.trainModel(train_scaled,train_target,val_scaled,val_target,20)\nmodel = cnnMaker.getModel()\nhistory = cnnMaker.getModelHistory()","f02f04d5":"cnnMaker.showHistoryPlot()","b76344a0":"cnnMaker.evaluate(val_scaled, val_target)","d7c5b2db":"cnnMaker.drawImage(val_scaled[0])","afb7c0d1":"preds = cnnMaker.predict(val_scaled[0:1])\nprint(preds)","77fd3757":"cnnMaker.plotClassLabel(preds[0])","90d725b3":"cnnMaker.predictLabel(val_scaled[0:1])","1da947c9":"test_scaled = test_input.reshape(-1, 28, 28, 1) \/ 255.0","e262f15a":"cnnMaker.evaluate(test_scaled, test_target)","fc34ab9f":"# build model(CNN)","1220b875":"# evaluate model(with test set)","83b2e60e":"# split data ","ad98d222":"# evaluate model with test data ","206bfe0b":"# predict test data using model","ffc373bf":"# evaluate model(with validation set)","2fb73ef0":"# load data ","8a066dea":"# preprocess data "}}