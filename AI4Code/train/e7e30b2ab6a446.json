{"cell_type":{"c728dca8":"code","f1cd8275":"code","bc9863e7":"code","e59ac755":"code","a18442a9":"code","bd781432":"code","f8159ab5":"code","ef85591d":"code","47ccf88a":"code","30a1c82f":"code","9c2fc8e6":"code","3f6fb4cd":"code","2177ce6c":"code","cfcf3b9f":"code","3f80fd2e":"code","867d0c42":"code","e60fa1e1":"code","b6b2d33e":"code","e0dabd24":"code","f2e90a89":"code","38281a38":"markdown","1b866211":"markdown","96b4b846":"markdown","9311072f":"markdown","356fd22e":"markdown"},"source":{"c728dca8":"# IMport Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2 as cv\n\nimport os\n\n\nimport PIL\nimport tensorflow as tf\nimport matplotlib.image as image\nimport seaborn as sns\nimport pickle \n\nfrom matplotlib.pyplot import figure, imshow, axis\nfrom matplotlib.image import imread\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPool2D, Dropout, Dense, BatchNormalization\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nimport random\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.preprocessing import image\nfrom keras.utils.np_utils import to_categorical\n\nimport warnings\nwarnings.filterwarnings('ignore')","f1cd8275":"dir_path = '..\/input\/license-plate-digits-classification-dataset\/CNN letter Dataset'\ndigits = sorted(os.listdir(dir_path))\nNUM_CLASSES = len(digits)\nprint(digits)\nprint('Number of classes (letters and digits): ', NUM_CLASSES)","bc9863e7":"digits_counter = {}\nNUM_IMAGES = 0\n\nfor digit in digits:\n    path = os.path.join(dir_path, digit)\n    digits_counter[digit] = len(os.listdir(path))\n    NUM_IMAGES += len(os.listdir(path))\n\nprint(digits_counter)\nprint('Number of all images: ', NUM_IMAGES)","e59ac755":"rows, columns = 7, 5\n\nk = 0\nfig, axes = plt.subplots(rows, columns, figsize=(30, 30))\nfor row in range(rows):\n    for column in range(columns):\n        rand_num = np.random.randint(0, digits_counter[digits[k]])\n        class_path = dir_path + '\/' + str(digits[k])\n        image_path = class_path + '\/' + str(os.listdir(class_path)[rand_num])\n        ax = axes[row, column]\n        ax.set_title(digits[k], loc='center', fontsize=16)\n        ax.imshow(imread(image_path), cmap='gray')\n        k += 1\nplt.show()","a18442a9":"data = []\nlabels = []\nMAX_NUM = None   # maximum number of digits images per class\nIMG_WIDTH, IMG_HEIGHT = 32, 40\n\n# images of digits '6' in folder with '2'\nincorrect_img = [\n    'aug20121_0.jpg',\n    'aug20122_1.jpg',\n    'aug20123_2.jpg',\n    'aug20124_3.jpg',\n    'aug20125_4.jpg',\n    'aug20126_5.jpg',\n    'aug20127_6.jpg',\n    'aug20128_7.jpg',\n    'aug20129_8.jpg',\n    'aug20130_9.jpg'\n]\n\nfor digit in digits:\n    path = os.path.join(dir_path, digit)\n    label = digits.index(digit)\n    for img in os.listdir(path):\n        if img in incorrect_img:\n            continue\n        img_path = os.path.join(path, img)\n        img_array = cv.imread(img_path)\n        resized = cv.resize(img_array, (IMG_WIDTH, IMG_HEIGHT), interpolation = cv.INTER_AREA)\n        gray = cv.cvtColor(resized, cv.COLOR_RGB2GRAY)        \n        data.append(gray)\n        labels.append(label)\n        if MAX_NUM is not None:\n            if labels.count(label) == MAX_NUM:\n                break\n\ndata = np.array(data, dtype='float32')\nlabels = np.array(labels, dtype='int8')","bd781432":"print(data.shape)","f8159ab5":"data = data \/ 255.0\ndata = data.reshape(*data.shape, 1)\nlabels = to_categorical(labels, num_classes=NUM_CLASSES)","ef85591d":"X_train, X_test, y_train, y_test = train_test_split(data, labels, shuffle=True, test_size=.3)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, shuffle=True, test_size=.3)\n\nprint(\"Training dataset shape: \", X_train.shape, y_train.shape)\nprint(\"Validation dataset shape: \", X_val.shape, y_val.shape)\nprint(\"Testing dataset shape: \", X_test.shape, y_test.shape)","47ccf88a":"model = tf.keras.Sequential([\n    Flatten(input_shape=(40, 32, 1)),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dense(128, activation='relu'),\n    BatchNormalization(),\n    Dense(64, activation='relu'),\n    Dense(35,activation='softmax')\n])","30a1c82f":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","9c2fc8e6":"history = model.fit(X_train, y_train,\n                    epochs=15, batch_size=256,\n                    validation_data=(X_val, y_val))","3f6fb4cd":"hist=history.history\nplt.plot(hist[\"accuracy\"],color=\"b\",label=\"train_accuracy\")\nplt.plot(hist[\"val_accuracy\"],color=\"g\",label=\"val_accuracy\")\nplt.legend(loc=\"lower right\")\nplt.show()","2177ce6c":"model.evaluate(X_val,y_val)","cfcf3b9f":"model.evaluate(X_test,y_test)","3f80fd2e":"input_layer=Input(shape=(40,32,1))\nlayer=Conv2D(filters=32,kernel_size=(3,3),activation=\"relu\",padding=\"valid\")(input_layer)\nlayer=MaxPool2D(pool_size=(2,2),strides=(1,1))(layer)\nlayer=BatchNormalization()(layer)\n\nlayer=Conv2D(filters=16,kernel_size=(3,3),activation=\"relu\",padding=\"valid\")(input_layer)\nlayer=MaxPool2D(pool_size=(2,2),strides=(1,1))(layer)\nlayer=BatchNormalization()(layer)\n\nlayer=Flatten()(layer)\n\nlayer=Dense(64,activation=\"relu\")(layer)\nlayer=BatchNormalization()(layer)\n\nlayer=Dense(32,activation=\"relu\")(layer)\noutput_layer=Dense(35,activation=\"softmax\")(layer)\nmodel2=Model(inputs=input_layer,outputs=output_layer)\nmodel2.summary()","867d0c42":"model2.compile(loss='categorical_crossentropy',\n       optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),\n       metrics=['accuracy'])","e60fa1e1":"history2 = model2.fit(X_train, y_train,\n                    epochs=15, batch_size=256,\n                    validation_data=(X_val, y_val))","b6b2d33e":"hist=history2.history\nplt.plot(hist[\"accuracy\"],color=\"b\",label=\"train_accuracy\")\nplt.plot(hist[\"val_accuracy\"],color=\"g\",label=\"val_accuracy\")\nplt.legend(loc=\"lower right\")\nplt.show()","e0dabd24":"model2.evaluate(X_val,y_val)","f2e90a89":"model2.evaluate(X_test,y_test)","38281a38":"# Training Neural Network","1b866211":"# Loading data into numpy arrays","96b4b846":"# Training curve for CNN","9311072f":"# Convolution Neural Nets","356fd22e":"# Training Curve for NN"}}