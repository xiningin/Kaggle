{"cell_type":{"2eaaf667":"code","7ae8ee3d":"code","8f63d5fa":"code","d9311c93":"code","9b991e7d":"code","21107a8c":"code","fe8b0a23":"code","006552b4":"code","4fe02e96":"code","76884464":"code","fc40c9d7":"code","c15b9357":"code","a01e708f":"code","6d342855":"code","c2f8cba8":"code","36178e4d":"code","6f9fc06c":"code","0265bb4e":"code","59267073":"code","7468c9f2":"code","82352db0":"code","a80227b3":"code","3baf2abd":"code","ed681ed7":"code","b0626d14":"code","64a12506":"code","50416906":"code","a4e0829e":"code","8f112566":"code","efc19774":"code","f449156f":"code","0426670c":"code","96d8db91":"code","5773d90a":"code","b65d0653":"code","29c21a72":"code","989e874b":"code","17eaf374":"code","992e9adb":"code","6cd5ea77":"code","68febe62":"code","f49f448f":"code","87704f70":"markdown","c7cff9ec":"markdown","ac3837d3":"markdown","5503a3f9":"markdown","e0000e3b":"markdown","5b3a1a32":"markdown","8646397d":"markdown","b5522665":"markdown","0ed42f47":"markdown","1b9b35ec":"markdown","3d1fec1a":"markdown","cb2c946e":"markdown","7ecb660a":"markdown","afbc1685":"markdown","935799c5":"markdown","ba29c648":"markdown","0d980e60":"markdown","9ba839b4":"markdown","c5184b16":"markdown","d7a9b22f":"markdown","6e433153":"markdown","955bd0f3":"markdown","246d8b9a":"markdown"},"source":{"2eaaf667":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd, datetime\nimport seaborn as sns\nfrom math import sqrt\nfrom sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom pandas import DataFrame\nimport xgboost as xgb\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","7ae8ee3d":"pip install openpyxl","8f63d5fa":"data = pd.read_excel('..\/input\/sales-forcasting\/MC.xlsx')","d9311c93":"df = data.loc[:]","9b991e7d":"df.head()","21107a8c":"df.columns","fe8b0a23":"our_data = df[[\"ACCDAT_0\",\"QTY_0\"]]","006552b4":"our_data.head()","4fe02e96":"our_data['date'] = our_data['ACCDAT_0'].dt.year.astype('str') + '-' + our_data['ACCDAT_0'].dt.month.astype('str') + '-01'\nour_data['date'] = pd.to_datetime(our_data['date'])\nour_data = our_data.drop(['ACCDAT_0'],axis=1)","76884464":"our_data.head()","fc40c9d7":"dd = our_data[['date','QTY_0']]\ndf_sales = dd.groupby('date').QTY_0.sum().reset_index()","c15b9357":"df_sales.head(10)","a01e708f":"df_tr = df_sales.loc[df_sales.date < '2021-01-01'].copy()","6d342855":"df_tr = df_tr.append(pd.DataFrame(np.array([[pd.to_datetime('2021-01-01'), np.nan]]), columns=['date', 'QTY_0']), ignore_index=True)\ndf_tr","c2f8cba8":"df_diff = df_tr.copy()\ndf_diff['QTY_0'] = df_diff['QTY_0']\n#add previous sales to the next row\ndf_diff['prev_sales'] = df_diff['QTY_0'].shift(1)\n#drop the null values and calculate the difference\ndf_diff\n","36178e4d":"for inc in range(1,13):\n    field_name = 'lag_' + str(inc)\n    df_diff[field_name] = df_diff['prev_sales'].shift(inc)\ndf_diff.head()","6f9fc06c":"df_diff['date'] = df_diff['date'].apply(lambda x : pd.to_datetime(x))\ndf_diff['year'] = df_diff['date'].dt.year\ndf_diff['month'] = df_diff['date'].dt.month","0265bb4e":"df_diff = df_diff.drop(['date'] , axis=1)","59267073":"df_diff.head()","7468c9f2":"data = df_diff.loc[df_diff.year <= 2020 ][df_diff.year > 2013 ].copy()\ndata = data.fillna(data.mean())\n","82352db0":"data","a80227b3":"validation = df_diff.loc[df_diff.year > 2020 ].copy()\nvalidation","3baf2abd":"df_test = data.loc[data.year >= 2020 ].copy()\ndf_test","ed681ed7":"df_train = data.loc[data.year < 2020 ].copy()\ndf_train","b0626d14":"y_train = df_train['QTY_0']\nX_train = df_train.drop('QTY_0',axis=1)\ny_test = df_test['QTY_0']\nX_test = df_test.drop('QTY_0',axis=1)","64a12506":"xgbm =xgb.XGBRegressor(base_score=0.4, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, monotone_constraints='()',\n             n_estimators=4000, n_jobs=6, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)\n","50416906":"xgbm.fit(X_train, y_train) ","a4e0829e":"pred=xgbm.predict(X_test)","8f112566":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","efc19774":"mean_absolute_percentage_error(y_test,pred)","f449156f":"important_columns = plot_importance(xgbm, height=0.9)\n","0426670c":"a=pd.DataFrame()\na['pred']=pred\na['test']=y_test.values\n","96d8db91":"mean_absolute_error(y_true=a['test'],\n                   y_pred=a['pred'])","5773d90a":"plot_test_train = a[['test','pred']].plot(figsize=(15, 5))\n","b65d0653":"validation = validation.drop('QTY_0',axis=1)\n","29c21a72":"pred_x=xgbm.predict(validation)","989e874b":"pred_x","17eaf374":"import pickle\n","992e9adb":"saved_model = pickle.dumps(xgbm)","6cd5ea77":"filename = 'model_xgb.sav'\npickle.dump(reg, open(filename, 'wb'))\n ","68febe62":"loaded_model = pickle.load(open(\".\/model_xgb.sav\", 'rb'))\n","f49f448f":"result = loaded_model.predict(validation)\nprint(result)","87704f70":"#  <font color='black'> Monthly Sales Forcasting using XGBoost & Save Model Usuing Pickle  <\/font>","c7cff9ec":"**Group By Month (Sum)**","ac3837d3":"**Split train and test data**","5503a3f9":"**Validation using the saved model**","e0000e3b":"**Copy validation data**","5b3a1a32":"**Install openpyxl:**\nopenpyxl is a Python library to read\/write Excel 2010 xlsx\/xlsm\/xltx\/xltm files.","8646397d":"**Validation**","b5522665":"<font color='black'>  **Importing the dataset** <\/font>","0ed42f47":"**Making a copy of our data**","1b9b35ec":"**Add previous sales column**","3d1fec1a":"**Copy Test data**","cb2c946e":"**Save model with PICKLE**","7ecb660a":"Train Data","afbc1685":"**Create Year and Month columns**","935799c5":"**Drop date column**","ba29c648":"**Add lag columns**","0d980e60":"**Add validation date 2021-01-01**","9ba839b4":"**Delete data when year is 2013 and Fill Nan values with mean**","c5184b16":"**XGBoost Model**","d7a9b22f":"**Create a function to calculate MAPE with y_true and y_pred.**\n**MAPE: mean absolute percentage error**","6e433153":"**We will use the date and quantity columns**","955bd0f3":"**load the model**","246d8b9a":"**Calculate MAE**"}}