{"cell_type":{"88450239":"code","e8a96e6b":"code","d5777803":"code","a2d3665c":"code","f3498ae9":"code","2cd02115":"code","7c736094":"code","1a00158d":"code","2c704659":"code","c5d62bcb":"code","c5199c1a":"code","44d6460a":"code","47d3a1a5":"code","cbf11564":"code","f686a809":"code","3a11bf46":"code","5e4cc700":"code","83c1208d":"code","285d5aed":"code","ccbd19ad":"code","7dc4f574":"code","990d6619":"code","3118b5fa":"code","d58bfcf8":"code","c4da3f9d":"code","34510485":"code","d87ffc94":"code","809c7210":"code","3b586134":"code","6a158e17":"code","dea2fb29":"code","ae3bb1cc":"code","b01d62d3":"code","f0de2166":"code","8a4842b9":"code","44bef6f1":"code","5d0cdaaf":"code","1617ea1d":"code","0d1958a0":"code","00340934":"code","0ba83b77":"code","1cd54e76":"code","fed24360":"code","279e29dd":"code","1ade08a3":"code","9dbfd563":"code","3cf0312b":"markdown","ab352b87":"markdown","811fb5c4":"markdown","57809bb1":"markdown","c15b5714":"markdown","4ef24fda":"markdown","fa96f9c8":"markdown","5aab1bb4":"markdown","0f3b7d23":"markdown","8640da91":"markdown","f2bbccbc":"markdown","cb9c0d55":"markdown","411ade1b":"markdown"},"source":{"88450239":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8a96e6b":"#import numpy library\nimport numpy as np\n","d5777803":"# Create a length-7 integer array filled with ones\nx= np.zeros(7, dtype=int)\n# Create a 3x3 array filled with 0 values\ny= np.zeros((3,3),dtype =float)\nprint(x)\nprint(y)","a2d3665c":"# Now Create a 5x4 array filled with 'a'\nnp.full((5, 4), 'a', dtype= str)\n","f3498ae9":"# Now Create a 5x4 array filled with 3\nnp.full((5,4),3,dtype= int)","2cd02115":"#Generate samples from the uniform distribution on [0, 1).\na= np.random.random((5, ))\n# we also can create the same array using random.rand command\nb= np.random.rand(5, )\nprint(a)\nprint(b)","7c736094":"# Create a 5x3 array of uniformly distributed on [0,1]\nc=np.random.random((5, 3))\nd= np.random.rand(5,3)\nprint(c)\nprint(d)","1a00158d":"# Create a 5x3 array of random integers in the interval [0, 3)\nnp.random.randint(0,3,(5,3))\n","2c704659":"# Create a 3x3 array of normally distributed random values\n# with mean 0 and standard deviation 1\nnp.random.normal(0, 1, (3, 3))","c5d62bcb":"# Create an empty array with 5 elements\nnp.empty(5,dtype='int16')","c5199c1a":"# You can create an array with a range of 5 elements:\nnp.arange(5,dtype= 'int16')","44d6460a":"#create arrange by clarify the first number, the last number, and the step size.\nnp.arange(1, 7, 2)\n","47d3a1a5":"# Create an array of  7 values between 0 and 1\nnp.linspace(0, 1, 7)","cbf11564":"#Create one-dimension array\nx1 =np.arange(1,8,2)\nx1","f686a809":"x1[0]","3a11bf46":"x1[3]","5e4cc700":"# use negative indices to find the index\nx1[-1]","83c1208d":"x2= np.random.randint(1,7,(3,4))\nx2","285d5aed":"# first number is row-index, seconf number is column-index\nx2[0,0]","ccbd19ad":"x2[2,1]","7dc4f574":"# we also can you the negative indices to index the array\nx2[-1,-1]","990d6619":"#x[start:stop:step]\nx = np.arange(10)\nx","3118b5fa":"x[:5]","d58bfcf8":"x[4:7]","c4da3f9d":"# First create a one-dimension array \nx=np.arange(10)\nx","34510485":"# to access a slice of an array x, follow the trick: x[start:stop:step]\nx[2:7] # start at index 2, stop before index 7","d87ffc94":"x[:3]# start at index 0, stop before index 3 (index 3 is not included)","809c7210":"x[3:] # start at index 3 until the end of the array ","3b586134":"x[1:7:1] # start at index 1, stop before index 7, step =1","6a158e17":"x[::2] # start at index 0 until the end of the array, step =2","dea2fb29":"# step can receive the negative value\nx[7::-2]  # start at index 7 reversely, step =2","ae3bb1cc":"x3=np.random.randint(1,9,(4,5))\nx3\n ","b01d62d3":"# to access a slice of an array x, follow the trick: x[start:stop:step] with multiple slices separated by commas\nx3[:3,:2] #  stop before the row has index 3, stop before the column has index 2","f0de2166":"x3[:,:2:1]# select all row, stop before the column has index 2, strep =1","8a4842b9":"x3[1:3,::-1] \n# start the row at index 1,stop before the row has index 2\n# select all columns reversely with the step =1","44bef6f1":"# create one-dimension array\na= np.arange(10)\na","5d0cdaaf":"#reshape the array to 2x5 shape \nb=a.reshape(2,5)\n#reshape the array to 5x2 shape\nc=a.reshape(5,2)\nprint(b)\nprint(c)","1617ea1d":"print(b.transpose())\nprint(c.transpose())\n","0d1958a0":"# you can combine multi-dimension array to one-dimension array\nprint(b)\nb.flatten()","00340934":"d=np.random.randint(1,5,(2,3))\ne=np.random.randint(2,7,(2,3))\nprint (d)\nprint(e)\n# using concatenate to merge the array in the same shape\nnp.concatenate([d,e],axis=0) # clarify axis=0 to merge the array vertically","0ba83b77":"# to merge the aray horizontally, use axis =1\nnp.concatenate([d,e],axis=1)","1cd54e76":"# when merging array with different dimension, use np.vstack and np.hstack functions:\nf=np.array([1,2,3])\nk= np.array([[1],\n            [2]])\nprint(f)\nprint(k)\nprint (d)\n# merge d and f\nprint(np.vstack([f,d]))\n#merge d and k\nprint(np.hstack([d,k]))","fed24360":"#create one-dimension array\ns=np.arange(6)\nprint(s)\n#split s into 2 one-dimension arrays\nb=np.array_split(s,2)\nprint(b)","279e29dd":"#create multiple-dimension array\nm= np.random.randint(1,7,(3,5))\nprint(m)\n# split m into 3 arrays horizontally (axis=0)\nprint(np.array_split(m,3,axis=0))\n#plit m into 3 arrays vertically(axis=1)\nprint(np.array_split(m,3,axis=1))","1ade08a3":"L = np.random.random(10)\nL","9dbfd563":"# importing pandas and numpy\nimport pandas as pd\nimport numpy as np\n\n# crete a sample dataframe\ndata = pd.DataFrame({\n    'age' :     [ 10, 22, 13, 21, 12, 11, 17],\n    'section' : [ 'A', 'B', 'C', 'B', 'B', 'A', 'A'],\n    'city' :    [ 'Gurgaon', 'Delhi', 'Mumbai', 'Delhi', 'Mumbai', 'Delhi', 'Mumbai'],\n    'gender' :  [ 'M', 'F', 'F', 'M', 'M', 'M', 'F'],\n    'favourite_color' : [ 'red', np.NAN, 'yellow', np.NAN, 'black', 'green', 'red']\n})\n","3cf0312b":"### One dimension array","ab352b87":"### two dimension array","811fb5c4":"### Reshape Array","57809bb1":"* # Array Slicing","c15b5714":"### Concate Array","4ef24fda":"* # Array Indexing","fa96f9c8":"### Split array","5aab1bb4":"* # Reshape, Transpose, Concate, and Split Array\n","0f3b7d23":"### Multi-dimension","8640da91":"# Create an array from beginning ","f2bbccbc":"# Reference\nhttps:\/\/github.com\/jakevdp\/PythonDataScienceHandbook\/blob\/master\/notebooks\/02.02-The-Basics-Of-NumPy-Arrays.ipynb\n\n\nhttps:\/\/numpy.org\/doc\/stable\/user\/absolute_beginners.html","cb9c0d55":"### Transpose Array","411ade1b":"### One array dimension"}}