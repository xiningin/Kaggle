{"cell_type":{"6912fb65":"code","da18a224":"code","3cc3492d":"code","d2ab8de6":"code","a4c270d9":"code","33cbc494":"code","3fb46312":"code","ac2d48ac":"code","32193fd5":"code","e51c3c35":"code","78d0cbe1":"code","1c385e90":"code","4944de9a":"code","bcdd90fd":"code","6bdc01e0":"code","aca7541a":"code","ed34c0c8":"code","7e1a41ab":"code","3ad57c3f":"code","c8b299ec":"code","e91b4457":"code","5c03c411":"code","f0e96adb":"code","a3d692e8":"code","6415a0eb":"code","c8c9b84e":"code","7652c844":"code","b245e268":"code","ab037ba0":"code","f6130393":"code","acf21bd6":"code","206cd08c":"code","15d1e3c2":"code","351e0d20":"code","67d2e4b6":"code","c5771f54":"code","61ed9b34":"code","e4b45842":"code","dbe024eb":"code","15c35f4a":"code","afba515f":"code","81e0af0c":"code","6384a119":"code","99d44f20":"code","0230041a":"code","1ca14712":"code","eb781b9f":"code","a59da011":"code","811f6fe7":"code","9e5106e1":"code","5063a87d":"markdown","9e428ee6":"markdown","400d1870":"markdown","bf458abb":"markdown","a4a1c5d9":"markdown","f362afb0":"markdown","4311b452":"markdown","ccd2fa8b":"markdown","f114a053":"markdown","32988d11":"markdown","848ef9d5":"markdown","933a26b2":"markdown","fb019c02":"markdown","89e9699b":"markdown","fcef7ae1":"markdown"},"source":{"6912fb65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da18a224":"x = pd.read_csv(\"\/kaggle\/input\/loan-eligible-dataset\/loan-train.csv\")\ny = pd.read_csv(\"\/kaggle\/input\/loan-eligible-dataset\/loan-test.csv\")","3cc3492d":"x.head()","d2ab8de6":"x.describe()","a4c270d9":"%matplotlib inline \nimport matplotlib.pyplot as plt\nx.hist(bins=25, figsize=(15,15))\nplt.show()\n","33cbc494":"# creating a dict file \nLoan_Status = {'Y': 1,'N': 0}\n\n# traversing through dataframe\n# Gender column and writing\n# values where key matches\nx.Loan_Status = [Loan_Status[item] for item in x.Loan_Status]\n\nx.head()","3fb46312":"Education = {\"Graduate\" : 1,\"Not Graduate\":0}\nx.Education = [Education[item] for item in x.Education]\n\nx.head()","ac2d48ac":"Education = {\"Graduate\" : 1,\"Not Graduate\":0}\ny.Education = [Education[item] for item in y.Education]\ny.head()","32193fd5":"x.Property_Area.value_counts()","e51c3c35":"x.plot(kind = \"scatter\" , x = \"Loan_Status\" , y = \"ApplicantIncome\" )","78d0cbe1":"corr_matrix =x.corr()\ncorr_matrix[\"Loan_Status\"].sort_values(ascending=False)","1c385e90":"\nx.plot(kind=\"scatter\", x=\"Loan_Status\", y=\"ApplicantIncome\", alpha=0.4,\n             s=x[\"LoanAmount\"]\/100, label=\"LoanAmount\", figsize=(15,13),\n             c=\"Loan_Amount_Term\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n             sharex=False)\nplt.legend()\n","4944de9a":"from pandas.plotting import scatter_matrix\n\nattributes = [\"Loan_Status\",         \n\"Credit_History\",      \n\"ApplicantIncome\",     \n\"Loan_Amount_Term\",   \n\"LoanAmount\"]\nscatter_matrix(x[attributes], figsize=(15, 10))\n","bcdd90fd":"x.isna().sum()","6bdc01e0":"import seaborn as sns\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.heatmap(x.isnull(), cbar=False)","aca7541a":"x.Gender = x.Gender.replace({\"Male\": 1, \"Female\" : 0})\ny.Gender = y.Gender.replace({\"Male\": 1, \"Female\" : 0})\n\nx.Married = x.Married.replace({\"Yes\": 1, \"No\" : 0})\ny.Married = y.Married.replace({\"Yes\": 1, \"No\" : 0})\n\nx.Self_Employed = x.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})\ny.Self_Employed = y.Self_Employed.replace({\"Yes\": 1, \"No\" : 0})","ed34c0c8":"x.Dependents.value_counts()","7e1a41ab":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy=\"median\")","3ad57c3f":"df = x.drop([\"Property_Area\",\"Loan_ID\",\"Dependents\",\"CoapplicantIncome\"], axis=1)","c8b299ec":"y_df = y.drop([\"Property_Area\",\"Loan_ID\",\"Dependents\"], axis=1)","e91b4457":"y_df","5c03c411":"df","f0e96adb":"imputer.fit(df)","a3d692e8":"imputer.fit(y_df)","6415a0eb":"imputer.statistics_\n","c8c9b84e":"X = imputer.transform(df)\nX","7652c844":"Y = imputer.transform(y_df)\nY","b245e268":"df1 = pd.DataFrame(X, columns=df.columns)\ndf1","ab037ba0":"y_df1 =  pd.DataFrame(Y, columns=y_df.columns)\ny_df1","f6130393":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(x.Property_Area)\nle.fit(y.Property_Area)","acf21bd6":"df1 = df1.join([x.Property_Area,x.Dependents])","206cd08c":"df1","15d1e3c2":"y_df1 = y_df1.join([y.Property_Area,y.Dependents])","351e0d20":"y_df1","67d2e4b6":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nls_with_se =df1.groupby(by =['Loan_Status','Self_Employed'])['Dependents'].count().to_frame().reset_index().rename(columns={'Loan_Status':'Loan_Status','Self_Employed':'Self_Employed','Dependents': \"counts\"})\n\n","c5771f54":"ls_with_se","61ed9b34":"fig = px.bar(ls_with_se, x=\"Loan_Status\", y=\"counts\", color=\"Self_Employed\")\n\nfig.update_layout(title_text='Self Employed Count With loan_status',title_x=0.5,\n                  hoverlabel=dict(\n                  bgcolor=\"Red\",\n                  font_size=16,\n                  font_family=\"TimesNewRoman\",\n                                \n     )\n  )\nfig.show()","e4b45842":"fig = px.scatter(df1, x='ApplicantIncome', y='LoanAmount',color=\"Loan_Status\")\nfig.update_layout(title='Applicant Income Vs Loan Amount With Loan Status ',\n                  xaxis_title=\"Applicant Income\",yaxis_title=\"Loan Amount \",title_x=0.5)\nfig.show()","dbe024eb":"df_M_and_G_and_E=df1.groupby(by =['Loan_Status','Education'])['Dependents'].count().to_frame().reset_index().rename(columns={'Education':'Education','Loan_Status':'Loan_Status','Dependents':'count'})\n\nfig = px.bar(df_M_and_G_and_E, x=\"Loan_Status\", y=\"count\", color=\"Education\", barmode=\"group\")\n\nfig.update_layout(xaxis_title=\"Education\",yaxis_title=\"Count\")\nfig.show()","15c35f4a":"groups = ['Gender','Married','Education','Self_Employed','Dependents','Property_Area']\nfig, ax = plt.subplots(3,2, figsize = (12,12))\naxs=ax.ravel()\nfor i, group in enumerate(groups):\n    sns.countplot(x = group, hue = 'Loan_Status',ax=axs[i], data=df1,palette=\"husl\")","afba515f":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()","81e0af0c":"tf = ['Credit_History', 'Education','Self_Employed','ApplicantIncome']","6384a119":"x_train = df1[tf].values\ny_train = df1['Loan_Status'].values\n\nx_test = y_df1[tf].values","99d44f20":"lin_reg.fit(x_train,y_train)","0230041a":"predicted = lin_reg.predict(x_test)","1ca14712":"print('Coefficient of model :', lin_reg.coef_)\nprint('\\nIntercept of model',lin_reg.intercept_)","eb781b9f":"# accuracy_train = accuracy_score(x_test, predicted)\nscore = lin_reg.score(x_train, y_train)\nprint('accuracy_score overall :', score)\nprint('accuracy_score percent :', round(score*100,2))","a59da011":"from sklearn.ensemble import RandomForestClassifier\nrc = RandomForestClassifier()","811f6fe7":"rc.fit(x_train,y_train)\npredicted_rc = rc.predict(x_test)","9e5106e1":"score = rc.score(x_train, y_train)\nprint('accuracy_score overall :', score)\nprint('accuracy_score percent :', round(score*100,2))","5063a87d":"*When it is close to 1, it means that\nthere is a strong positive correlation; for example, the loan status value tends to go\nup when the credit history goes up. When the coefficient is close to \u20131, it means\nthat there is a strong negative correlation*","9e428ee6":"## Looking for Correlations","400d1870":"***As we can see if a person is employed the percentage of getting loan is high !!!***","bf458abb":"*Random Forest classifier has done a good job with **97.39%** accuracy.*","a4a1c5d9":"*Now all numerical attributes in the training set and test set has been handled*","f362afb0":"*A histogram shows the number of instances\n(on the vertical axis) that have a given value range (on the horizontal axis)*","4311b452":"*Let's get a idea of what actually the data is !!!*","ccd2fa8b":"*Vizualizing missing data*","f114a053":"### Applying Machine Learning","32988d11":" *As we can see the probability of getting loan  accepted has higher income.*","848ef9d5":"*Since the median can only be computed on numerical attributes, we need to create a\ncopy of the data without the text attribute*","933a26b2":"### Data Vizualisation ","fb019c02":"## **Data Cleaning** ","89e9699b":"### *Thanks for vieweing this far Kindly Share your thoughts and upvote \u263a*","fcef7ae1":"*It looks like linear model done pretty bad performance*"}}