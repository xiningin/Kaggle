{"cell_type":{"ed46b6b4":"code","5b71b602":"code","be2ac670":"code","20c51db6":"code","1529a30a":"code","4ebfffe7":"code","80ea5c2a":"code","9082eab4":"code","f3a0d1ff":"code","1cb1cc98":"code","40064661":"code","89b1e60e":"code","5a4f52c4":"code","29099a66":"code","9f360bcf":"code","15324940":"code","6f8f82cb":"code","d90fc855":"code","8b7bcff9":"code","c20ae5fb":"code","30e8dfad":"code","06dd6eec":"code","e8789120":"code","9fcc7662":"code","2ff5834f":"code","efaa3909":"markdown","ebde5f63":"markdown","e233dad5":"markdown","bb2de848":"markdown","9b21e256":"markdown","2eee5d1f":"markdown","c9280da5":"markdown","fca6478a":"markdown","4fc4c276":"markdown","093fa595":"markdown","3f876b62":"markdown","bfadec34":"markdown"},"source":{"ed46b6b4":"!git clone https:\/\/github.com\/tensorflow\/models.git","5b71b602":"!cd models\/research\/ && protoc object_detection\/protos\/*.proto --python_out=.","be2ac670":"\n!cd models\/research && \\\n    cp object_detection\/packages\/tf2\/setup.py . && \\\n    python -m pip install  .","20c51db6":"import os\nimport imageio\nimport pathlib\nimport tensorflow as tf\n\nimport time\nfrom object_detection.utils import label_map_util\nfrom object_detection.utils import visualization_utils as viz_utils\n\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","1529a30a":"pip install imageio-ffmpeg","4ebfffe7":"# Enable GPU dynamic memory allocation\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n    tf.config.experimental.set_memory_growth(gpu, True)","80ea5c2a":"!wget -nc https:\/\/lazyprogrammer.me\/cnn_class2_videos.zip","9082eab4":"!unzip cnn_class2_videos.zip","f3a0d1ff":"!ls ","1cb1cc98":"INPUT_VIDEOS = ['catdog', 'safari', 'traffic']","40064661":"url = 'http:\/\/download.tensorflow.org\/models\/object_detection\/tf2\/20200711\/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz'\n\nPATH_TO_MODEL_DIR = tf.keras.utils.get_file(\n    fname='ssd_resnet101_v1_fpn_640x640_coco17_tpu-8',\n    origin=url,\n    untar=True)","89b1e60e":"PATH_TO_MODEL_DIR","5a4f52c4":"url = 'https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/research\/object_detection\/data\/mscoco_label_map.pbtxt'\n\nPATH_TO_LABELS = tf.keras.utils.get_file(\n    fname='mscoco_label_map.pbtxt',\n    origin=url,\n    untar=False)","29099a66":"PATH_TO_LABELS","9f360bcf":"!head {PATH_TO_LABELS}","15324940":"PATH_TO_SAVED_MODEL = PATH_TO_MODEL_DIR + \"\/saved_model\"\n\nprint('Loading model...', end='')\nstart_time = time.time()\n\n# Load saved model and build the detection function\ndetect_fn = tf.saved_model.load(PATH_TO_SAVED_MODEL)\n\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint('Done! Took {} seconds'.format(elapsed_time))","6f8f82cb":"category_index = label_map_util.create_category_index_from_labelmap(\n    PATH_TO_LABELS,\n    use_display_name=True)","d90fc855":"category_index","8b7bcff9":"def detect_objects_in_image(image_np):\n    # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.\n    input_tensor = tf.convert_to_tensor(image_np)\n\n    # The model expects a batch of images, so add an axis with `tf.newaxis`.\n    input_tensor = input_tensor[tf.newaxis, ...]\n\n    # input_tensor = np.expand_dims(image_np, 0)\n    detections = detect_fn(input_tensor)\n\n    # All outputs are batches tensors.\n    # Convert to numpy arrays, and take index [0] to remove the batch dimension.\n    # We're only interested in the first num_detections.\n    num_detections = int(detections.pop('num_detections'))\n    detections = {key: value[0, :num_detections].numpy()\n                   for key, value in detections.items()}\n    detections['num_detections'] = num_detections\n\n    # detection_classes should be ints.\n    detections['detection_classes'] = detections['detection_classes'].astype(np.int64)\n\n    image_np_with_detections = image_np.copy()\n\n    viz_utils.visualize_boxes_and_labels_on_image_array(\n          image_np_with_detections,\n          detections['detection_boxes'],\n          detections['detection_classes'],\n          detections['detection_scores'],\n          category_index,\n          use_normalized_coordinates=True,\n          max_boxes_to_draw=200,\n          min_score_thresh=.30,\n          agnostic_mode=False)\n    return image_np_with_detections\n\n\ndef detect_objects_in_video(input_video):\n    print(f'Running inference for {input_video}.mp4... ', end='')\n\n    video_reader = imageio.get_reader(f'{input_video}.mp4')\n    video_writer = imageio.get_writer(f'{input_video}_annotated.mp4', fps=10)\n\n    # loop through and process each frame\n    t0 = time.time()\n    n_frames = 0\n    for frame in video_reader:\n        n_frames += 1\n        new_frame = detect_objects_in_image(frame)\n\n        # instead of plotting image, we write the frame to video\n        video_writer.append_data(new_frame)\n    \n    fps = n_frames \/ (time.time() - t0)\n    print(\"Frames processed: %s, Speed: %s fps\" % (n_frames, fps))\n\n    # clean up\n    video_writer.close()","c20ae5fb":"detect_objects_in_video(INPUT_VIDEOS[0])","30e8dfad":"detect_objects_in_video(INPUT_VIDEOS[1])","06dd6eec":"detect_objects_in_video(INPUT_VIDEOS[2])","e8789120":"from IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video\/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video\/mp4\"><\/video>' % src \n    return HTML(html)\n\nplay('traffic_annotated.mp4')","9fcc7662":"play('catdog_annotated.mp4')","2ff5834f":"play('safari_annotated.mp4')","efaa3909":"## Clone Tensorflow Models Repository","ebde5f63":"## Download and extract model files\n\nGet URLs from the \"Object Detection Zoo\": https:\/\/github.com\/tensorflow\/models\/blob\/master\/research\/object_detection\/g3doc\/tf2_detection_zoo.md","e233dad5":"# Introduction","bb2de848":"We see that the model does not correctly identify the lion, probably because it does not appear in the category index.\nThe dog is also not correctly identified and confused with a cat. I will try to improve it in the following lectures\n","9b21e256":"## Load in the labels","2eee5d1f":"## Download Labels File\n\nLabel files can be found here: https:\/\/github.com\/tensorflow\/models\/tree\/master\/research\/object_detection\/data\n\nYou probably won't need these since Object Detection Zoo contains only models trained on COCO.","c9280da5":"The following notebook shows how to identify objects in a video using SSD. The technique I used here is the same as the technique [I used in working on object recognition in a simple image](https:\/\/www.kaggle.com\/yvtsanlevy\/ssd-object-detection) I went over each frame and frame in the video, identified existing objects in it, and created a new video based on it.","fca6478a":"## Load in the model","4fc4c276":"## Import Libraries","093fa595":"## Do some object detection","3f876b62":"## Install the object detection API","bfadec34":"## Download Videos"}}