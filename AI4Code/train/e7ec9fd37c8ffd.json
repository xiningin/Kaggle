{"cell_type":{"fd0c1b26":"code","d5319c72":"code","41636113":"code","9aac4c81":"code","12b0f4d4":"code","1d0f234e":"code","5b3aa9ba":"code","c403f126":"code","03323450":"code","bf6092f0":"code","17c8fe2a":"code","f9810896":"code","ac56f120":"code","cfbc71bb":"code","93753c85":"code","af39fac7":"code","9c7f2468":"code","dcecbc73":"code","873971c9":"code","014187f4":"code","79a37ffa":"code","bdde2d84":"markdown","c75ed874":"markdown","00e4487f":"markdown","3b1d05c9":"markdown"},"source":{"fd0c1b26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5319c72":"# Prepare your file\nparent_dir: str = os.path.join('\/kaggle', 'input', 'twitter-bots-accounts')\ndataset_name: str = \"twitter_human_bots_dataset.csv\"\ndataset_path: str = os.path.join(parent_dir, dataset_name)\nprint(f\"Dataset directory: {dataset_path}\")","41636113":"# Generate a Pandas DataFrame\ntwitter_accounts_df: pd.DataFrame = pd.read_csv(dataset_path, index_col=0)\nprint(f\"Dataset shape {twitter_accounts_df.shape}\")","9aac4c81":"# Take a look to the Data\nprint(f\"Dataset columns: {twitter_accounts_df.columns}\")\ntwitter_accounts_df.head()","12b0f4d4":"# Functions to preprocess the DataFrame\ndef convert_bool_to_int(data: pd.DataFrame, boolean_cols: list):\n    try:\n        for col in boolean_cols:\n            data[col] = data[col].astype(int)\n    except Exception as e:\n        print(e)\n    return data\n\ndef popularity_metric(friends_count: int, followers_count: int):\n    return np.round(np.log(1+friends_count) * np.log(1+followers_count), 3)\n\n\ndef compute_popularity_metric(row):\n    return popularity_metric(friends_count=row[\"friends_count\"],\n                             followers_count=row[\"followers_count\"])","1d0f234e":"# Preprocess boolean columns\nboolean_cols: list = [\"default_profile\", \"default_profile_image\",\n                      \"geo_enabled\", \"verified\"]\ntwitter_accounts_df = convert_bool_to_int(data=twitter_accounts_df, boolean_cols=boolean_cols)\ntwitter_accounts_df.head()","5b3aa9ba":"# Create a custom metric to measure the popularity of an input account\ntwitter_accounts_df[\"popularity\"] = twitter_accounts_df.apply(compute_popularity_metric, axis=1)\n\n# Let's show some examples of such value\ntwitter_accounts_df[['popularity']]","c403f126":"import matplotlib as mpl\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom collections import OrderedDict\n\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['figure.figsize'] = 12, 8\nmpl.rcParams['font.sans-serif'] = ['Tahoma']\nsns.set(font_scale=1.5)\nsns.set_style(\"whitegrid\")","03323450":"# Set up some parameters for EDA\npalette: str = \"husl\"\ngrouped: str = \"account_type\"\ndefault_value: str = \"unknown\"","bf6092f0":"def get_labels_colors_from_pandas_column(df: pd.DataFrame, column: str, palette: str):\n    data_labels: dict = dict()\n    try:\n        labels: list = df[column].unique().tolist()\n        colors: list = sns.color_palette(palette, len(labels))\n        data_labels: dict = dict(zip(labels, colors))\n    except Exception as e:\n        logger.error(e)\n    return data_labels\n\n# Retrieve labels and additional parameters to plot figures\ndata_labels: dict = get_labels_colors_from_pandas_column(\n    df=twitter_accounts_df, column=grouped, palette=palette)\n","17c8fe2a":"# Show labels\nprint(f\"Unique Target values: {data_labels.keys()}\")","f9810896":"# Functions to plot data distributions\ndef plot_multiple_histograms(data: pd.DataFrame,\n                             grouped_col: str,\n                             target_col: str,\n                             data_labels: dict):\n    # Plot\n    plt.figure(figsize=(12, 10))\n    title = \"\\n\"\n    labels: list = list(data_labels.keys())\n    for j, i in enumerate(labels):\n        x = data.loc[data[grouped_col] == i, target_col]\n        mu_x = round(float(np.mean(x)), 3)\n        sigma_x = round(float(np.std(x)), 3)\n        ax = sns.distplot(x, color=data_labels.get(i), label=i, hist_kws=dict(alpha=.1),\n                          kde_kws={'linewidth': 2})\n        ax.axvline(mu_x, color=data_labels.get(i), linestyle='--')\n        ax.set(xlabel=f\"{target_col.title()}\", ylabel='Density')\n        title += f\"Parameters {str(i)}: $G(\\mu=$ {mu_x}, $\\sigma=$ {sigma_x} \\n\"\n        ax.set_title(title)\n    plt.legend(title=\"Account Type\")\n    plt.grid()\n    plt.tight_layout()\n    plt.show()\n\n\ndef plot_multiple_boxplots(data: pd.DataFrame, grouped_col: str, target_col: str,\n                           palette: str = \"husl\"):\n    plt.figure(figsize=(12, 10))\n\n    means: dict = data.groupby([grouped_col])[target_col].mean().to_dict(OrderedDict)\n    counter: int = 0\n\n    bp = sns.boxplot(x=grouped_col, y=target_col, data=data, palette=palette, order=list(means.keys()))\n    bp.set(xlabel='', ylabel=f\"{target_col.title()}\")\n    ax = bp.axes\n\n    for k, v in means.items():\n        # every 4th line at the interval of 6 is median line\n        # 0 -> p25 1 -> p75 2 -> lower whisker 3 -> upper whisker 4 -> p50 5 -> upper extreme value\n        mean = round(v, 2)\n        ax.text(\n            counter,\n            mean,\n            f'{mean}',\n            ha='center',\n            va='center',\n            fontweight='bold',\n            size=10,\n            color='white',\n            bbox=dict(facecolor='#445A64'))\n        counter += 1\n    bp.figure.tight_layout()\n    plt.grid()\n    plt.show()","ac56f120":"target: str = \"popularity\"  \n# Extract histograms\nplot_multiple_histograms(data=twitter_accounts_df, \n                         grouped_col=grouped,\n                         data_labels=data_labels,\n                         target_col=target)\n# Extract Box-plots\nplot_multiple_boxplots(data=twitter_accounts_df,\n                       grouped_col=grouped,\n                       target_col=target,\n                       palette=palette)\n","cfbc71bb":"target: str = \"average_tweets_per_day\"  \n# Extract histograms\nplot_multiple_histograms(data=twitter_accounts_df, \n                         grouped_col=grouped,\n                         data_labels=data_labels,\n                         target_col=target)\n# Extract Box-plots\nplot_multiple_boxplots(data=twitter_accounts_df,\n                       grouped_col=grouped,\n                       target_col=target,\n                       palette=palette)","93753c85":"target_col: str = \"verified\"\ntwitter_accounts_df2 = twitter_accounts_df.groupby([grouped, target_col])[grouped].count().unstack(target_col)\ntwitter_accounts_df2.plot(kind='bar', stacked=True)","af39fac7":"target: str = \"statuses_count\"  \n# Extract histograms\nplot_multiple_histograms(data=twitter_accounts_df, \n                         grouped_col=grouped,\n                         data_labels=data_labels,\n                         target_col=target)\n# Extract Box-plots\nplot_multiple_boxplots(data=twitter_accounts_df,\n                       grouped_col=grouped,\n                       target_col=target,\n                       palette=palette)","9c7f2468":"# Preprocess Response variable (account type)\ntwitter_accounts_df[grouped] = twitter_accounts_df[grouped].astype('category')\ntwitter_accounts_df.dtypes","dcecbc73":"twitter_accounts_df[grouped] = twitter_accounts_df[grouped].cat.codes\ntwitter_accounts_df.head()\n","873971c9":"twitter_accounts_df_num: pd.DataFrame = twitter_accounts_df.copy()\ntwitter_accounts_df_num: pd.DataFrame = twitter_accounts_df_num._get_numeric_data()\ntwitter_accounts_df_num.head()\n","014187f4":"# Remove columns\ndrop_cols: list = [\"id\"]\ntwitter_accounts_df_num.drop(drop_cols, axis=1,inplace=True)\ntwitter_accounts_df_num.head()","79a37ffa":"# Compute correlation among the features and the response variable\ncorr: pd.DataFrame = twitter_accounts_df_num.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,\n            annot = True, fmt='.1g', cmap= 'coolwarm')","bdde2d84":"# Set up the environment","c75ed874":"Let's analyse the average tweets per day","00e4487f":"# Read and prepare the data","3b1d05c9":"# EDA"}}