{"cell_type":{"0f19f363":"code","d34879ef":"code","0a2c5fa8":"code","4103c1a6":"code","2bff293f":"code","f9f9b3e1":"code","d3336b0f":"code","3a3f7b13":"code","75b3bbe3":"code","8f29c6bf":"code","a4d1fba6":"code","4b74c82d":"code","0e19c19d":"code","a3ccd245":"code","5f3c0327":"code","a7446b3d":"code","6941fd64":"code","281e20d6":"code","52888765":"code","99d2be4f":"code","e1ce4363":"code","9ba54280":"code","02c7747d":"code","6b91a4ab":"code","390f23e3":"code","01af471a":"code","fe9dddd3":"code","9b98d072":"code","2409aa46":"code","95969d6f":"code","c90468d7":"code","3e2f86fd":"code","9cb2c495":"code","33034578":"code","7d7c5616":"code","b2343dbb":"code","66057ab9":"markdown","177e07b9":"markdown","37a75f2d":"markdown","ab58014a":"markdown","a9c916f0":"markdown","5329131a":"markdown","0755a606":"markdown","8e999842":"markdown","21964498":"markdown","f37b0ed9":"markdown","9004d9a5":"markdown","978f5568":"markdown","3cbe40ca":"markdown","d3585994":"markdown","9ee02994":"markdown","bfac0383":"markdown","6b6f307c":"markdown","8c859f87":"markdown","0d58af63":"markdown","68db2b13":"markdown","e160e92d":"markdown","0417a4a6":"markdown","6b828ffd":"markdown","53cd1711":"markdown","25e33498":"markdown","ffd22d37":"markdown","7a4d92aa":"markdown","d5087753":"markdown","2413ddf2":"markdown","7e82c047":"markdown"},"source":{"0f19f363":"# Imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score, train_test_split # \u4ea4\u53c9\u9a8c\u8bc1 \u4e0e\u5c06\u6570\u636e\u968f\u673a\u7684\u5206\u4e3a\u8bad\u7ec3\u96c6\u4e0e\u6570\u636e\u96c6\n                                                                      # \u4ea4\u53c9\u9a8c\u8bc1 \u4e00\u822c\u88ab\u7528\u4e8e\u8bc4\u4f30\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u8868\u73b0 https:\/\/zhuanlan.zhihu.com\/p\/32627500\nfrom sklearn.preprocessing import StandardScaler #\u5f52\u4e00\u5316\u6570\u636e  \u901a\u8fc7\u53bb\u9664\u5747\u503c\u5e76\u7f29\u653e\u5230\u5355\u4f4d\u65b9\u5dee\u6765\u6807\u51c6\u5316\u7279\u5f81\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\n     # RidgeCV \u5e26\u6709\u5185\u7f6e\u4ea4\u53c9\u9a8c\u8bc1\u7684\u5cad\u56de\u5f52\u3002\nfrom sklearn.metrics import mean_squared_error, make_scorer\n     # mean_squared_error   \u5747\u65b9\u8bef\u5dee\u635f\u5931\u51fd\u6570\nfrom scipy.stats import skew #\u51fd\u6570\u8ba1\u7b97\u6570\u636e\u96c6\u7684\u504f\u5ea6\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Definitions\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n%matplotlib inline\n#njobs = 4","d34879ef":"import os\nprint(os.listdir(\"..\/input\"))","0a2c5fa8":"# Get data\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"train : \" + str(train.shape))\n","4103c1a6":"# Check for duplicates\n# \u68c0\u67e5\u91cd\u590d\u9879\nidsUnique = len(set(train.Id))\nidsTotal = train.shape[0]\nidsDupli = idsTotal - idsUnique\nprint(\"There are \" + str(idsDupli) + \" \u91cd\u590d IDs for \" + str(idsTotal) + \" total entries\")\n\n# Drop Id column\ntrain.drop(\"Id\", axis = 1, inplace = True)","2bff293f":"# Looking for outliers, as indicated in https:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/decock.pdf\n# \u5bfb\u627e\u5f02\u5e38\u503c\n# matplotlib\u4f5c\u53ef\u89c6\u5316\nplt.scatter(train.GrLivArea, train.SalePrice, c = \"blue\", marker = \"s\")\nplt.title(\"Looking for outliers\")\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")\nplt.show()\n\ntrain = train[train.GrLivArea < 4000] #\u53bb\u9664\u8d85\u8fc74000\u5e73\u7684\u623f\u5b50","f9f9b3e1":"# Log transform the target for official scoring\n# \u5bf9\u504f\u5ea6\u6bd4\u8f83\u5927\u7684\u6570\u636e\u7528log1p\u51fd\u6570\u8fdb\u884c\u8f6c\u5316\uff0c\u4f7f\u5176\u66f4\u52a0\u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff0c\u6b64\u6b65\u5904\u7406\u53ef\u80fd\u4f1a\u4f7f\u6211\u4eec\u540e\u7eed\u7684\u5206\u7c7b\u7ed3\u679c\u5f97\u5230\u4e00\u4e2a\u66f4\u597d\u7684\u7ed3\u679c\uff1b\ntrain.SalePrice = np.log1p(train.SalePrice)\ny = train.SalePrice\nall_feature = pd.concat((train.iloc[:, :-1], test.iloc[:, 1:]))","d3336b0f":"all_feature","3a3f7b13":"# Handle missing values for features where median\/mean or most common value doesn't make sense\n# \u5904\u7406\u90a3\u4e9b\u4f7f\u7528\u4e2d\u4f4d\u503c\u548c\u5e73\u5747\u503c\u586b\u5145\u6ca1\u6709\u610f\u4e49\u7684\u7f3a\u5931\u503c\n\n# Alley : data description says NA means \"no alley access\"\nall_feature.loc[:, \"Alley\"] = all_feature.loc[:, \"Alley\"].fillna(\"None\") # NA \u66ff\u6362\u6210 None\n# BedroomAbvGr : NA = 0\nall_feature.loc[:, \"BedroomAbvGr\"] = all_feature.loc[:, \"BedroomAbvGr\"].fillna(0)\n# BsmtQual etc : data description says NA for basement features is \"no basement\"\n# BsmtQual \u5730\u4e0b\u5ba4\u9ad8\u5ea6\nall_feature.loc[:, \"BsmtQual\"] = all_feature.loc[:, \"BsmtQual\"].fillna(\"No\")\n# BsmtCond \u5730\u4e0b\u5ba4\u7684\u4e00\u822c\u60c5\u51b5\nall_feature.loc[:, \"BsmtCond\"] = all_feature.loc[:, \"BsmtCond\"].fillna(\"No\")\n# BsmtExposure \u5730\u4e0b\u5ba4\u5899\nall_feature.loc[:, \"BsmtExposure\"] = all_feature.loc[:, \"BsmtExposure\"].fillna(\"No\")\n# BsmtFinType1 \u5730\u4e0b\u5ba4\u8d28\u91cf\nall_feature.loc[:, \"BsmtFinType1\"] = all_feature.loc[:, \"BsmtFinType1\"].fillna(\"No\")\n# BsmtFinType2 \u7b2c\u4e8c\u52a0\u5de5\u533a\u7684\u8d28\u91cf\uff08\u5982\u679c\u5b58\u5728\uff09\nall_feature.loc[:, \"BsmtFinType2\"] = all_feature.loc[:, \"BsmtFinType2\"].fillna(\"No\")\n# BsmtFullBath \u5730\u4e0b\u5ba4\u5168\u6d74\u5ba4\nall_feature.loc[:, \"BsmtFullBath\"] = all_feature.loc[:, \"BsmtFullBath\"].fillna(0)\n# BsmtHalfBath \u5730\u4e0b\u5ba4\u534a\u6d74\u5ba4\nall_feature.loc[:, \"BsmtHalfBath\"] = all_feature.loc[:, \"BsmtHalfBath\"].fillna(0)\n# BsmtUnfSF \u5730\u4e0b\u5ba4\u672a\u5b8c\u6210\u7684\u5e73\u65b9\u82f1\u5c3a\nall_feature.loc[:, \"BsmtUnfSF\"] = all_feature.loc[:, \"BsmtUnfSF\"].fillna(0)\n# CentralAir : NA most likely means No \u4e2d\u592e\u7a7a\u8c03\nall_feature.loc[:, \"CentralAir\"] = all_feature.loc[:, \"CentralAir\"].fillna(\"N\")\n# Condition : NA most likely means Normal\n# \u9760\u8fd1\u4e3b\u8981\u516c\u8def\u6216\u94c1\u8def\nall_feature.loc[:, \"Condition1\"] = all_feature.loc[:, \"Condition1\"].fillna(\"Norm\")\nall_feature.loc[:, \"Condition2\"] = all_feature.loc[:, \"Condition2\"].fillna(\"Norm\")\n# EnclosedPorch : NA most likely means no enclosed porch\n# \u5c01\u95ed\u7684\u95e8\u5eca\u9762\u79ef\uff08\u5e73\u65b9\u82f1\u5c3a\uff09\nall_feature.loc[:, \"EnclosedPorch\"] = all_feature.loc[:, \"EnclosedPorch\"].fillna(0)\n# External stuff : NA most likely means average\n# ExterQual\uff1a\u5916\u90e8\u6750\u6599\u8d28\u91cf\n# ExterCond\uff1a\u5916\u90e8\u6750\u6599\u7684\u5f53\u524d\u72b6\u6001\nall_feature.loc[:, \"ExterCond\"] = all_feature.loc[:, \"ExterCond\"].fillna(\"TA\")\nall_feature.loc[:, \"ExterQual\"] = all_feature.loc[:, \"ExterQual\"].fillna(\"TA\")\n# Fence : data description says NA means \"no fence\"\n# \u56f4\u680f\u8d28\u91cf\nall_feature.loc[:, \"Fence\"] = all_feature.loc[:, \"Fence\"].fillna(\"No\")\n# FireplaceQu : data description says NA means \"no fireplace\"\n# \u58c1\u7089\u6570\u91cf FireplaceQu\uff1a\u58c1\u7089\u8d28\u91cf\nall_feature.loc[:, \"FireplaceQu\"] = all_feature.loc[:, \"FireplaceQu\"].fillna(\"No\")\nall_feature.loc[:, \"Fireplaces\"] = all_feature.loc[:, \"Fireplaces\"].fillna(0)\n# Functional : data description says NA means typical\n# \u5bb6\u5ead\u529f\u80fd\u7b49\u7ea7\nall_feature.loc[:, \"Functional\"] = all_feature.loc[:, \"Functional\"].fillna(\"Typ\")\n# GarageType etc : data description says NA for garage features is \"no garage\"\n# \u8f66\u5e93\u4f4d\u7f6e\nall_feature.loc[:, \"GarageType\"] = all_feature.loc[:, \"GarageType\"].fillna(\"No\")\n# \u8f66\u5e93\u5185\u90e8\u88c5\u4fee\nall_feature.loc[:, \"GarageFinish\"] = all_feature.loc[:, \"GarageFinish\"].fillna(\"No\")\n# \u8f66\u5e93\u8d28\u91cf\nall_feature.loc[:, \"GarageQual\"] = all_feature.loc[:, \"GarageQual\"].fillna(\"No\")\n# \u8f66\u5e93\u6761\u4ef6\nall_feature.loc[:, \"GarageCond\"] = all_feature.loc[:, \"GarageCond\"].fillna(\"No\")\nall_feature.loc[:, \"GarageArea\"] = all_feature.loc[:, \"GarageArea\"].fillna(0)\n# Size of garage in car capacity\nall_feature.loc[:, \"GarageCars\"] = all_feature.loc[:, \"GarageCars\"].fillna(0)\n# HalfBath : NA most likely means no half baths above grade\nall_feature.loc[:, \"HalfBath\"] = all_feature.loc[:, \"HalfBath\"].fillna(0)\n\n# HeatingQC : NA most likely means typical\n# \u52a0\u70ed\u8d28\u91cf\u548c\u6761\u4ef6\nall_feature.loc[:, \"HeatingQC\"] = all_feature.loc[:, \"HeatingQC\"].fillna(\"TA\")\n\n# KitchenAbvGr : NA most likely means 0\n# \u5ba2\u623f\u603b\u6570\uff08\u4e0d\u5305\u62ec\u6d74\u5ba4\uff09\nall_feature.loc[:, \"KitchenAbvGr\"] = all_feature.loc[:, \"KitchenAbvGr\"].fillna(0)\n\n# KitchenQual : NA most likely means typical\n# Kitchen quality\nall_feature.loc[:, \"KitchenQual\"] = all_feature.loc[:, \"KitchenQual\"].fillna(\"TA\")\n\n# LotFrontage : NA most likely means no lot frontage\n# \u8fde\u63a5\u5230\u7269\u4e1a\u7684\u8857\u9053\u7684\u7ebf\u6027\u82f1\u5c3a\nall_feature.loc[:, \"LotFrontage\"] = all_feature.loc[:, \"LotFrontage\"].fillna(0)\n\n# LotShape : NA most likely means regular\n# \u8d22\u4ea7\u7684\u603b\u4f53\u5f62\u6001\ntrain.loc[:, \"LotShape\"] = train.loc[:, \"LotShape\"].fillna(\"Reg\")\n\n# MasVnrType : NA most likely means no veneer\n# \u7816\u77f3\u9970\u9762\u7c7b\u578b\n# \u7816\u77f3\u9970\u9762\u9762\u79ef\uff08\u5e73\u65b9\u82f1\u5c3a\uff09\nall_feature.loc[:, \"MasVnrType\"] = all_feature.loc[:, \"MasVnrType\"].fillna(\"None\")\nall_feature.loc[:, \"MasVnrArea\"] = all_feature.loc[:, \"MasVnrArea\"].fillna(0)\n\n# MiscFeature : data description says NA means \"no misc feature\"\n# \u5176\u4ed6\u7c7b\u522b\u672a\u6db5\u76d6\u7684\u6742\u9879\u529f\u80fd\n# $\u5176\u4ed6\u529f\u80fd\u7684\u4ef7\u503c\nall_feature.loc[:, \"MiscFeature\"] = all_feature.loc[:, \"MiscFeature\"].fillna(\"No\")\nall_feature.loc[:, \"MiscVal\"] = all_feature.loc[:, \"MiscVal\"].fillna(0)\n\n# OpenPorchSF : NA most likely means no open porch\n# \u5f00\u653e\u5f0f\u9633\u53f0\u9762\u79ef\uff08\u5e73\u65b9\u82f1\u5c3a\uff09\nall_feature.loc[:, \"OpenPorchSF\"] = all_feature.loc[:, \"OpenPorchSF\"].fillna(0)\n\n# PavedDrive : NA most likely means not paved\n# \u94fa\u597d\u7684\u8f66\u9053\nall_feature.loc[:, \"PavedDrive\"] = all_feature.loc[:, \"PavedDrive\"].fillna(\"N\")\n\n# PoolQC : data description says NA means \"no pool\"\n# \u6cf3\u6c60\u54c1\u8d28\n# \u6cf3\u6c60\u5927\u5c0f\nall_feature.loc[:, \"PoolQC\"] = all_feature.loc[:, \"PoolQC\"].fillna(\"No\")\nall_feature.loc[:, \"PoolArea\"] = all_feature.loc[:, \"PoolArea\"].fillna(0)\n\n# SaleCondition : NA most likely means normal sale\n# \u9500\u552e\u6761\u4ef6\nall_feature.loc[:, \"SaleCondition\"] = all_feature.loc[:, \"SaleCondition\"].fillna(\"Normal\")\n\n# ScreenPorch : NA most likely means no screen porch\n# \u5c4f\u5e55\u95e8\u5eca\u9762\u79ef\uff08\u4ee5\u5e73\u65b9\u82f1\u5c3a\u4e3a\u5355\u4f4d\uff09\nall_feature.loc[:, \"ScreenPorch\"] = all_feature.loc[:, \"ScreenPorch\"].fillna(0)\n\n# TotRmsAbvGrd : NA most likely means 0\n# \u5ba2\u623f\u603b\u6570\uff08\u4e0d\u5305\u62ec\u6d74\u5ba4\uff09\nall_feature.loc[:, \"TotRmsAbvGrd\"] = all_feature.loc[:, \"TotRmsAbvGrd\"].fillna(0)\n\n# Utilities : NA most likely means all public utilities\n# \u53ef\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u578b\nall_feature.loc[:, \"Utilities\"] = all_feature.loc[:, \"Utilities\"].fillna(\"AllPub\")\n\n# WoodDeckSF : NA most likely means no wood deck\n# \u6728\u5236\u7532\u677f\u9762\u79ef\uff08\u5e73\u65b9\u82f1\u5c3a\uff09\nall_feature.loc[:, \"WoodDeckSF\"] = all_feature.loc[:, \"WoodDeckSF\"].fillna(0)","75b3bbe3":"# Some numerical features are actually really categories\nall_feature = all_feature.replace({\"MSSubClass\" : {20 : \"SC20\", 30 : \"SC30\", 40 : \"SC40\", 45 : \"SC45\", \n                                       50 : \"SC50\", 60 : \"SC60\", 70 : \"SC70\", 75 : \"SC75\", \n                                       80 : \"SC80\", 85 : \"SC85\", 90 : \"SC90\", 120 : \"SC120\", \n                                       150 : \"SC150\", 160 : \"SC160\", 180 : \"SC180\", 190 : \"SC190\"},\n                       \"MoSold\" : {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5 : \"May\", 6 : \"Jun\",\n                                   7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"}\n                      })","8f29c6bf":"# Encode some categorical features as ordered numbers when there is information in the order\nall_feature = all_feature.replace({\"Alley\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"BsmtCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\" : {\"No\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                       \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                     )","a4d1fba6":"# Create new features\n# 1* Simplifications of existing features\nall_feature[\"SimplOverallQual\"] = all_feature.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\nall_feature[\"SimplOverallCond\"] = all_feature.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\nall_feature[\"SimplPoolQC\"] = all_feature.PoolQC.replace({1 : 1, 2 : 1, # average\n                                             3 : 2, 4 : 2 # good\n                                            })\nall_feature[\"SimplGarageCond\"] = all_feature.GarageCond.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\nall_feature[\"SimplGarageQual\"] = all_feature.GarageQual.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\nall_feature[\"SimplFireplaceQu\"] = all_feature.FireplaceQu.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\nall_feature[\"SimplFireplaceQu\"] = all_feature.FireplaceQu.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\nall_feature[\"SimplFunctional\"] = all_feature.Functional.replace({1 : 1, 2 : 1, # bad\n                                                     3 : 2, 4 : 2, # major\n                                                     5 : 3, 6 : 3, 7 : 3, # minor\n                                                     8 : 4 # typical\n                                                    })\nall_feature[\"SimplKitchenQual\"] = all_feature.KitchenQual.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\nall_feature[\"SimplHeatingQC\"] = all_feature.HeatingQC.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\nall_feature[\"SimplBsmtFinType1\"] = all_feature.BsmtFinType1.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\nall_feature[\"SimplBsmtFinType2\"] = all_feature.BsmtFinType2.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\nall_feature[\"SimplBsmtCond\"] = all_feature.BsmtCond.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\nall_feature[\"SimplBsmtQual\"] = all_feature.BsmtQual.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\nall_feature[\"SimplExterCond\"] = all_feature.ExterCond.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\nall_feature[\"SimplExterQual\"] = all_feature.ExterQual.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\n\n# 2* Combinations of existing features\n# Overall quality of the house\nall_feature[\"OverallGrade\"] = all_feature[\"OverallQual\"] * all_feature[\"OverallCond\"]\n# Overall quality of the garage\nall_feature[\"GarageGrade\"] = all_feature[\"GarageQual\"] * all_feature[\"GarageCond\"]\n# Overall quality of the exterior\nall_feature[\"ExterGrade\"] = all_feature[\"ExterQual\"] * all_feature[\"ExterCond\"]\n# Overall kitchen score\nall_feature[\"KitchenScore\"] = all_feature[\"KitchenAbvGr\"] * all_feature[\"KitchenQual\"]\n# Overall fireplace score\nall_feature[\"FireplaceScore\"] = all_feature[\"Fireplaces\"] * all_feature[\"FireplaceQu\"]\n# Overall garage score\nall_feature[\"GarageScore\"] = all_feature[\"GarageArea\"] * all_feature[\"GarageQual\"]\n# Overall pool score\nall_feature[\"PoolScore\"] = all_feature[\"PoolArea\"] * all_feature[\"PoolQC\"]\n# Simplified overall quality of the house\nall_feature[\"SimplOverallGrade\"] = all_feature[\"SimplOverallQual\"] * all_feature[\"SimplOverallCond\"]\n# Simplified overall quality of the exterior\nall_feature[\"SimplExterGrade\"] = all_feature[\"SimplExterQual\"] * all_feature[\"SimplExterCond\"]\n# Simplified overall pool score\nall_feature[\"SimplPoolScore\"] = all_feature[\"PoolArea\"] * all_feature[\"SimplPoolQC\"]\n# Simplified overall garage score\nall_feature[\"SimplGarageScore\"] = all_feature[\"GarageArea\"] * all_feature[\"SimplGarageQual\"]\n# Simplified overall fireplace score\nall_feature[\"SimplFireplaceScore\"] = all_feature[\"Fireplaces\"] * all_feature[\"SimplFireplaceQu\"]\n# Simplified overall kitchen score\nall_feature[\"SimplKitchenScore\"] = all_feature[\"KitchenAbvGr\"] * all_feature[\"SimplKitchenQual\"]\n# Total number of bathrooms\nall_feature[\"TotalBath\"] = all_feature[\"BsmtFullBath\"] + (0.5 * all_feature[\"BsmtHalfBath\"]) + \\\nall_feature[\"FullBath\"] + (0.5 * all_feature[\"HalfBath\"])\n# Total SF for house (incl. basement)\nall_feature[\"AllSF\"] = all_feature[\"GrLivArea\"] + all_feature[\"TotalBsmtSF\"]\n# Total SF for 1st + 2nd floors\nall_feature[\"AllFlrsSF\"] = all_feature[\"1stFlrSF\"] + all_feature[\"2ndFlrSF\"]\n# Total SF for porch\nall_feature[\"AllPorchSF\"] = all_feature[\"OpenPorchSF\"] + all_feature[\"EnclosedPorch\"] + \\\nall_feature[\"3SsnPorch\"] + all_feature[\"ScreenPorch\"]\n# Has masonry veneer or not\nall_feature[\"HasMasVnr\"] = all_feature.MasVnrType.replace({\"BrkCmn\" : 1, \"BrkFace\" : 1, \"CBlock\" : 1, \n                                               \"Stone\" : 1, \"None\" : 0})\n# House completed before sale or not\nall_feature[\"BoughtOffPlan\"] = all_feature.SaleCondition.replace({\"Abnorml\" : 0, \"Alloca\" : 0, \"AdjLand\" : 0, \n                                                      \"Family\" : 0, \"Normal\" : 0, \"Partial\" : 1})","4b74c82d":"# Find most important features relative to target\nprint(\"Find most important features relative to target\")\ncorr = train.corr()\ncorr.sort_values([\"SalePrice\"], ascending = False, inplace = True)\nprint(corr.SalePrice)","0e19c19d":"# Create new features\n# 3* Polynomials on the top 10 existing features\nall_feature[\"OverallQual-s2\"] = all_feature[\"OverallQual\"] ** 2\nall_feature[\"OverallQual-s3\"] = all_feature[\"OverallQual\"] ** 3\nall_feature[\"OverallQual-Sq\"] = np.sqrt(all_feature[\"OverallQual\"])\nall_feature[\"AllSF-2\"] = all_feature[\"AllSF\"] ** 2\nall_feature[\"AllSF-3\"] = all_feature[\"AllSF\"] ** 3\nall_feature[\"AllSF-Sq\"] = np.sqrt(all_feature[\"AllSF\"])\nall_feature[\"AllFlrsSF-2\"] = all_feature[\"AllFlrsSF\"] ** 2\nall_feature[\"AllFlrsSF-3\"] = all_feature[\"AllFlrsSF\"] ** 3\nall_feature[\"AllFlrsSF-Sq\"] = np.sqrt(all_feature[\"AllFlrsSF\"])\nall_feature[\"GrLivArea-2\"] = all_feature[\"GrLivArea\"] ** 2\nall_feature[\"GrLivArea-3\"] = all_feature[\"GrLivArea\"] ** 3\nall_feature[\"GrLivArea-Sq\"] = np.sqrt(all_feature[\"GrLivArea\"])\nall_feature[\"SimplOverallQual-s2\"] = all_feature[\"SimplOverallQual\"] ** 2\nall_feature[\"SimplOverallQual-s3\"] = all_feature[\"SimplOverallQual\"] ** 3\nall_feature[\"SimplOverallQual-Sq\"] = np.sqrt(all_feature[\"SimplOverallQual\"])\nall_feature[\"ExterQual-2\"] = all_feature[\"ExterQual\"] ** 2\nall_feature[\"ExterQual-3\"] = all_feature[\"ExterQual\"] ** 3\nall_feature[\"ExterQual-Sq\"] = np.sqrt(all_feature[\"ExterQual\"])\nall_feature[\"GarageCars-2\"] = all_feature[\"GarageCars\"] ** 2\nall_feature[\"GarageCars-3\"] = all_feature[\"GarageCars\"] ** 3\nall_feature[\"GarageCars-Sq\"] = np.sqrt(all_feature[\"GarageCars\"])\nall_feature[\"TotalBath-2\"] = all_feature[\"TotalBath\"] ** 2\nall_feature[\"TotalBath-3\"] = all_feature[\"TotalBath\"] ** 3\nall_feature[\"TotalBath-Sq\"] = np.sqrt(all_feature[\"TotalBath\"])\nall_feature[\"KitchenQual-2\"] = all_feature[\"KitchenQual\"] ** 2\nall_feature[\"KitchenQual-3\"] = all_feature[\"KitchenQual\"] ** 3\nall_feature[\"KitchenQual-Sq\"] = np.sqrt(all_feature[\"KitchenQual\"])\nall_feature[\"GarageScore-2\"] = all_feature[\"GarageScore\"] ** 2\nall_feature[\"GarageScore-3\"] = all_feature[\"GarageScore\"] ** 3\nall_feature[\"GarageScore-Sq\"] = np.sqrt(all_feature[\"GarageScore\"])","a3ccd245":"# Differentiate numerical features (minus the target) and categorical features\ncategorical_features = all_feature.select_dtypes(include = [\"object\"]).columns\nnumerical_features = all_feature.select_dtypes(exclude = [\"object\"]).columns\n# numerical_features = numerical_features.drop(\"SalePrice\")\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))\ntrain_num = all_feature[numerical_features]\ntrain_cat = all_feature[categorical_features]","5f3c0327":"# Handle remaining missing values for numerical features by using median as replacement\n# \u5904\u7406\u6570\u5b57\u7279\u5f81\u7f3a\u5931\u503c\nprint(\"NAs for numerical features in train : \" + str(train_num.isnull().values.sum()))\ntrain_num = train_num.fillna(train_num.median())\nprint(\"Remaining NAs for numerical features in train : \" + str(train_num.isnull().values.sum()))","a7446b3d":"# \u5bf9\u504f\u7684\u6570\u503c\u7279\u5f81\u8fdb\u884c\u5bf9\u6570\u53d8\u6362\u4ee5\u51cf\u5c11\u79bb\u7fa4\u503c\u7684\u5f71\u54cd\n# Inspired by Alexandru Papiu's script : https:\/\/www.kaggle.com\/apapiu\/house-prices-advanced-regression-techniques\/regularized-linear-models\n# As a general rule of thumb, a skewness with an absolute value > 0.5 is considered at least moderately skewed\n# \u6839\u636e\u4e00\u822c\u7ecf\u9a8c\uff0c\u7edd\u5bf9\u503c\u5927\u4e8e0.5\u7684\u504f\u659c\u81f3\u5c11\u88ab\u8ba4\u4e3a\u662f\u4e2d\u7b49\u504f\u659c\nskewness = train_num.apply(lambda x: skew(x)) # \u8ba1\u7b97\u6570\u5b57\u7279\u5f81\u7684\u504f\u659c\nskewness = skewness[abs(skewness) > 0.5] #\u53d6\u7edd\u5bf9\u503c\u5927\u4e8e0.5\u7684\u504f\u659c\u6570\u636e\nprint(str(skewness.shape[0]) + \" skewed numerical features to log transform\")\nskewed_features = skewness.index #\u53d6\u7edd\u5bf9\u503c\u5927\u4e8e0.5\u7684\u504f\u659c\u6570\u636eindex\ntrain_num[skewed_features] = np.log1p(train_num[skewed_features]) #\u5bf9\u7edd\u5bf9\u503c\u5927\u4e8e0.5\u7684\u504f\u659c\u7684\u6570\u636e\u8fdb\u884clog1p\u53d8\u5e7b","6941fd64":"# Create dummy features for categorical values via one-hot encoding\n# \u5206\u7c7b\u7279\u5f81\u8f6c\u5316\u4e3aone-hot\u5411\u91cf\nprint(\"NAs for categorical features in train : \" + str(train_cat.isnull().values.sum()))\ntrain_cat = pd.get_dummies(train_cat) #one-hot\u7f16\u7801\nprint(\"Remaining NAs for categorical features in train : \" + str(train_cat.isnull().values.sum()))","281e20d6":"# Join categorical and numerical features\nall_feature = pd.concat([train_num, train_cat], axis = 1) #\u6309\u5217\u5408\u5e76\u6570\u5b57\u7279\u5f81\u548c\u5206\u7c7b\u7279\u5f81\n\n# Standardize numerical features\n# \u6807\u51c6\u5316\u6570\u5b57\u7279\u5f81\nstdSc = StandardScaler()\nall_feature.loc[:, numerical_features] = stdSc.fit_transform(all_feature.loc[:, numerical_features])","52888765":"n_train = train.shape[0]\ntrain = all_feature[:n_train]\ntest_feature = all_feature[n_train:]\nprint(\"New number of features : \" + str(train.shape[1]))","99d2be4f":"# Partition the dataset in train + validation sets\n# \u5206\u79bb\u6570\u636e\u96c6\u4e0e\u9a8c\u8bc1\u96c6\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size = 0.3, random_state = 0)\nprint(\"X_train : \" + str(X_train.shape))\nprint(\"X_test : \" + str(X_test.shape))\nprint(\"y_train : \" + str(y_train.shape))\nprint(\"y_test : \" + str(y_test.shape))","e1ce4363":"X_train.isnull().values.sum()","9ba54280":"import torch\nfrom torch import nn\nfrom torch.nn import init","02c7747d":"num_inputs, num_outputs, num_hiddens_1,num_hiddens_2,num_hiddens_3,num_hiddens_4 = 324, 1, 256,170,85,18\nlr=0.5\ndecay=1e-3\nnet = nn.Sequential(\n        nn.Linear(num_inputs, num_hiddens_1),# \u9690\u85cf\u5c42\n        nn.Tanh(),                         # \u6fc0\u6d3b\u51fd\u6570\n#        nn.ReLU(),\n#       nn.Sigmoid(),\n        nn.Linear(num_hiddens_1, num_hiddens_2),\n        nn.Tanh(),\n#       nn.ReLU(),\n#       nn.Sigmoid(),\n        nn.Linear(num_hiddens_2, num_hiddens_3),\n        nn.Tanh(),\n#       nn.ReLU(),\n#       nn.Sigmoid(),    \n        nn.Linear(num_hiddens_3, num_hiddens_4),\n        nn.Tanh(),\n        nn.Linear(num_hiddens_4, num_outputs), # \u8f93\u51fa\u5c42\n        )","6b91a4ab":"for params in net.parameters():\n    init.normal_(params, mean=0, std=0.01)\nbatch_size = 85\n\nX_tr = X_train.values\nX_te = X_test.values\ny_tr = y_train.values\ny_te = y_test.values\nX_tr_torch = torch.utils.data.TensorDataset(torch.tensor(X_tr, dtype=torch.float).view(-1,324),torch.tensor(y_tr, dtype=torch.float).view(-1,1))\nX_te_torch = torch.utils.data.TensorDataset(torch.tensor(X_te, dtype=torch.float).view(-1,324),torch.tensor(y_te, dtype=torch.float).view(-1,1))\n# pytorch \u8bfb\u53d6pandas\u7684\u65b9\u6cd5\ntrain_iter = torch.utils.data.DataLoader(X_tr_torch, batch_size=batch_size, shuffle=True )\ntest_iter = torch.utils.data.DataLoader(X_te_torch, batch_size=batch_size, shuffle=False)","390f23e3":"loss = torch.nn.MSELoss()\n\noptimizer = torch.optim.Adam(net.parameters(), lr=lr,weight_decay=decay)","01af471a":"def train_net(net, train_iter,loss, num_epochs, batch_size, lr, optimizer):\n    for epochs in range(num_epochs):\n        for x,y in train_iter:\n            y_hat=net(x) #\u6a21\u578b\u8ba1\u7b97\n            l=loss(y_hat,y).sum() #\u635f\u5931\u8ba1\u7b97\n            optimizer.zero_grad() #\u68af\u5ea6\u6e050\n            l.backward() #\u53cd\u5411\u4f20\u64ad\n            optimizer.step()\n        print('epochs:'+str(epochs)+'loss:'+str(l))","fe9dddd3":"lr=0.001\nnum_epochs = 500\n\nfor params in net.parameters():\n    init.normal_(params, mean=0, std=0.01)\n    \ntrain_net(net, train_iter,loss, num_epochs, batch_size, lr, optimizer)","9b98d072":"torch.cuda.is_available()","2409aa46":"def log_rmse(net, features, labels):\n    with torch.no_grad():\n        # \u5c06\u5c0f\u4e8e1\u7684\u503c\u8bbe\u62101\uff0c\u4f7f\u5f97\u53d6\u5bf9\u6570\u65f6\u6570\u503c\u66f4\u7a33\u5b9a\n        clipped_preds = torch.max(net(features), torch.tensor(1.0))\n        rmse = torch.sqrt(loss(clipped_preds.log(), labels.log()))\n    return rmse.item()","95969d6f":"log_rmse(net,torch.tensor(X_te, dtype=torch.float).view(-1,324),torch.tensor(y_te, dtype=torch.float).view(-1,1))","c90468d7":"print(os.listdir(\"..\/\"))","3e2f86fd":"test_feature = torch.tensor(test_feature.values, dtype=torch.float)","9cb2c495":"preds = net(test_feature).detach().numpy()","33034578":"test['SalePrice'] = pd.Series(preds.reshape(1, -1)[0])\nsubmission = pd.concat([test['Id'], test['SalePrice']], axis=1)\nsubmission.SalePrice=np.expm1(submission.SalePrice)","7d7c5616":"submission.to_csv('submission.csv', index=False)","b2343dbb":"submission","66057ab9":"There seems to be 2 extreme outliers on the bottom right, really large houses that sold for really cheap. More generally, the author of the dataset recommends removing 'any houses with more than 4000 square feet' from the dataset.  \nReference : https:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/decock.pdf","177e07b9":"\u521d\u59cb\u5316\u53c2\u6570\uff0c\u8bfb\u53d6\u6570\u636e","37a75f2d":"\u589e\u6dfb\u65b0\u7279\u5f81, in 3 ways : \n\n 1. Simplifications of existing features\n 2. Combinations of existing features\n 3. Polynomials on the top 10 existing features","ab58014a":"\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u76f8\u6bd4\u5355\u4fa7\u7684\u7ebf\u6027\u6a21\u578b\uff0c\u5728\u8fd9\u4e2anotebook\u4e2d\u8868\u73b0\u7684\u66f4\u7a33\u5b9a\u3002\u672c\u6587\u4f7f\u7528\u591a\u5c42\u611f\u77e5\u673a\uff0c\u6700\u7ec8\u63d0\u4ea4\u5f97\u5230\u7684\u5206\u6570\u5927\u81f4\u57280.3+,","a9c916f0":"### \u9884\u5904\u7406\u603b\u7ed3","5329131a":"skew \u504f\u5ea6\uff08skewness\uff09\uff0c\u662f\u7edf\u8ba1\u6570\u636e\u5206\u5e03\u504f\u659c\u65b9\u5411\u548c\u7a0b\u5ea6\u7684\u5ea6\u91cf\uff0c\u662f\u7edf\u8ba1\u6570\u636e\u5206\u5e03\u975e\u5bf9\u79f0\u7a0b\u5ea6\u7684\u6570\u5b57\u7279\u5f81\u3002\u504f\u5ea6(Skewness)\u4ea6\u79f0\u504f\u6001\u3001\u504f\u6001\u7cfb\u6570\u3002\n\u8868\u5f81\u6982\u7387\u5206\u5e03\u5bc6\u5ea6\u66f2\u7ebf\u76f8\u5bf9\u4e8e\u5e73\u5747\u503c\u4e0d\u5bf9\u79f0\u7a0b\u5ea6\u7684\u7279\u5f81\u6570\u3002\u76f4\u89c2\u770b\u6765\u5c31\u662f\u5bc6\u5ea6\u51fd\u6570\u66f2\u7ebf\u5c3e\u90e8\u7684\u76f8\u5bf9\u957f\u5ea6","0755a606":"Standardization cannot be done before  the partitioning, as we don't want to fit the StandardScaler on some observations that will later be used in the test set.","8e999842":"**Modeling**","21964498":"### \u4f7f\u7528pytorch\u5efa\u7acb\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc","f37b0ed9":"\u9884\u5904\u7406\u51fd\u6570","9004d9a5":"### \u6a21\u578b","978f5568":"\u8c03\u53c2\u5f88\u7d2f\u3002\u8bd5\u4e86\u5f88\u591a\u53c2\u6570\uff0c\u6a21\u578b\u3002\u6fc0\u6d3b\u51fd\u6570\u4e2dTanh\u8868\u73b0\u6700\u597d\uff0cReLu\u9700\u8981\u66f4\u5927\u7684epochs,Tanh\u5728\u9a8c\u8bc1\u96c6\u7a33\u5b9a\u80fd\u5f97\u52300.02\u7684\u5206\u6570","3cbe40ca":"\u5c06\u6570\u5b57\u7c7b\u522b\u8f6c\u6362\u6210\u6587\u672c\u7c7b\u522b","d3585994":"\u5408\u5e76\u8bad\u7ec3\u96c6\u548c\u6570\u636e\u96c6\uff0c\u4e00\u8d77\u505a\u6570\u636e\u9884\u5904\u7406\n- 1\uff0c\u9605\u8bfb\u6570\u636e\u63cf\u8ff0\uff0c\u7406\u89e3\u7279\u5f81\u610f\u4e49\n- 2\uff0c\u68c0\u67e5\u6570\u636e\u6b63\u786e\u6027 \u662f\u5426\u6709\u91cd\u590d\u548c\u7f3a\u5931\n- 3\uff0c\u53ef\u89c6\u5316\u63a2\u7d22\uff0c\u53bb\u9664\u5f02\u5e38\u503c\n- 4\uff0c\u7f3a\u5931\u503c\u5904\u7406\uff0c1\u3001\u4e2d\u4f4d\u6570\u5e73\u5747\u503c\u586b\u5145\u65e0\u610f\u4e49\u7684\u7f3a\u5931\n- 5\uff0c\u7f3a\u5931\u503c\u5904\u7406\uff0c2\u3001\u6570\u5b57\u7279\u5f81\u7528\u4e2d\u4f4d\u6570\uff0c\u5e73\u5747\u503c\u6216\u4f17\u6570\u586b\u5145\n- 6\uff0c\u5904\u7406\u6ca1\u6709\u987a\u5e8f\u610f\u4e49\u7684\u6570\u5b57\u5f62\u5f0f\u7684\u5206\u7c7b\u7279\u5f81\uff0c\u8f6c\u5316\u4e3a\u5b57\u7b26\n- 7\uff0c\u5904\u7406\u6709\u987a\u5e8f\u610f\u4e49\u7684\u5b57\u7b26\u5f62\u5f0f\u5206\u7c7b\u7279\u5f81\uff0c\u8f6c\u5316\u4e3a\u6709\u987a\u5e8f\u7684\u6570\u5b57\u53d8\u91cf\n- 8\uff0c\u5904\u7406\u7279\u5f81\uff0c\u5305\u62ec\u964d\u4f4e\u7279\u5f81\u590d\u6742\u5ea6\uff0c\u5408\u5e76\u7279\u5f81\u5efa\u7acb\u65b0\u7684\u7279\u5f81\uff0c\u5220\u9664\u65e0\u7528\u7279\u5f81\uff0c\u5bf9\u76f8\u5173\u5ea6\u524d10\u7684\u7279\u5f81\u8fdb\u884c\u591a\u9879\u5f0f\u5904\u7406\n- 9\uff0c\u5206\u79bb\u6570\u5b57\u7279\u5f81\u548c\u5206\u7c7b\u7279\u5f81\n- 10\uff0c\u5206\u7c7b\u7279\u5f81\u8fdb\u884cone-hot\u7f16\u7801\n- 11\uff0c\u53bb\u9664\u6570\u5b57\u7279\u5f81\u504f\u79bb\u7edd\u5bf9\u503c>0.5\u7684\u6570\u636e\uff0c\u5e76\u8fdb\u884clog1p\u8f6c\u6362\n- 12\uff0c\u5408\u5e76\u6570\u5b57\u4e0e\u5206\u7c7b\n- 13\uff0c\u5206\u79bb\u6807\u7b7e\u3002","9ee02994":"### \u6d4b\u8bd5\u96c6\u68c0\u6d4b","bfac0383":"\u5efa\u7acb\u6a21\u578b","6b6f307c":"\u5f97\u5230\u7684\u6700\u9ad8\u5206\u65700.34 \u662f\u7531\u7ebf\u6027\u6a21\u578b\u5f97\u51fa\u7684\uff0c\u4f46\u5728\u540e\u671f\u518d\u8bad\u7ec3\u65f6\u5374\u5f97\u4e0d\u5230\u8fd9\u6837\u7684\u5206\u6570\u4e86\u3002","8c859f87":"Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.","0d58af63":"\u7c7b\u522b\u53d8\u91cf\u4e2d\u5b58\u5728\u987a\u5e8f\u578b\u53d8\u91cf(\u4fe1\u606f\u5177\u6709\u987a\u5e8f\u6027\uff0c\u5982\u4f4e\uff0c\u4e2d\uff0c\u9ad8\uff0c\u75bc\u75db\u6307\u6570\u7b49\u7b49\u3002) \u8f6c\u5316\u4e3a\u6709\u987a\u5e8f\u7684\u6570\u5b57\u578b\u53d8\u91cf","68db2b13":"*  \u4f7f\u7528ReLU\u6548\u679c\u6781\u5dee,Tanh\u548cSigmoid \u6548\u679c\u4e0d\u9519","e160e92d":"## using pytorch linear model  Score 0.34509 ","0417a4a6":"\u53f3\u4e0b\u89d2\u6709\u4e24\u4e2a\u5f02\u5e38\u503c\uff0c\u5373\u5927\u578b\u623f\u5b50\u51fa\u552e\u7684\u4ef7\u683c\u975e\u5e38\u4fbf\u5b9c\u3002\u5e94\u8be5\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u201c\u4efb\u4f55\u9762\u79ef\u8d85\u8fc74000\u5e73\u65b9\u82f1\u5c3a\u7684\u623f\u5c4b\u201d\u3002","6b828ffd":"### \u8f93\u51fa\u6d4b\u8bd5\u7ed3\u679c","53cd1711":"**\u9884\u5904\u7406**","25e33498":"\u5b9a\u4e49\u635f\u5931\u4e0e\u4f18\u5316\u51fd\u6570","ffd22d37":"**Introduction**\n\n\u672c\u6587\u5229\u7528\u4e66\u4e2d\u7684\u6240\u6709\u6280\u5de7\u6765\u91ca\u653e\u7ebf\u6027\u56de\u5f52\u7684\u5168\u90e8\u529f\u80fd\uff0c\u5176\u4e2d\u5305\u62ec\u5927\u91cf\u9884\u5904\u7406\u548c\u4e00\u4e9b\u6b63\u5219\u5316\u7b97\u6cd5\u3002","7a4d92aa":"\u6a21\u578b\u8bad\u7ec3","d5087753":"\u53c2\u8003\u4e86\u5176\u4ed6\u4eba\u7684\u6570\u636e\u5904\u7406","2413ddf2":"\u5efa\u7acb\u6a21\u578b","7e82c047":"\u8c8c\u4f3c\u8fd8\u86ee\u9ad8\u7684\uff0c\u540e\u671f\u66f4\u65b0"}}