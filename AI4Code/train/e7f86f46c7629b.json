{"cell_type":{"4589d973":"code","a9f13a73":"code","8ffa6076":"code","d56d9bc5":"code","82c9e0d8":"code","80584dca":"code","1bc736b3":"code","96c699ca":"code","ed242ffc":"code","c383e467":"code","e4711754":"code","330366ab":"code","97d45d8d":"code","13d8843a":"code","a965c8b0":"code","c31369a6":"code","21e540e6":"code","c31c73ba":"code","96b630c0":"code","2bbd96d4":"code","6dd48305":"code","9c9e951a":"markdown","92bd1a3b":"markdown","8763b104":"markdown","af71ba6f":"markdown","41f6c99f":"markdown","724a60e3":"markdown","b40b3d35":"markdown"},"source":{"4589d973":"!wget https:\/\/dl.dropbox.com\/s\/0htmeoie69q650p\/miml_dataset.zip?dl=1 -O dataset.zip\n!unzip -q dataset.zip \n!rm dataset.zip","a9f13a73":"from keras.models import Sequential\n\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import regularizers, optimizers\nimport pandas as pd\nimport numpy as np","8ffa6076":"df = pd.read_csv(\".\/miml_dataset\/miml_labels_1.csv\")\n\ncolumns = list(df.columns[1:])\ncolumns","d56d9bc5":"datagen = ImageDataGenerator(rescale = 1.\/255.)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255.)\n\ntrain_generator=datagen.flow_from_dataframe(\ndataframe=df[:1800],\ndirectory=\".\/miml_dataset\/images\",\nx_col=\"Filenames\",\ny_col=columns,\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"raw\",\ntarget_size=(100,100))\nvalid_generator=test_datagen.flow_from_dataframe(\ndataframe=df[1800:1900],\ndirectory=\".\/miml_dataset\/images\",\nx_col=\"Filenames\",\ny_col=columns,\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"raw\",\ntarget_size=(100,100))\ntest_generator=test_datagen.flow_from_dataframe(\ndataframe=df[1900:],\ndirectory=\".\/miml_dataset\/images\",\nx_col=\"Filenames\",\nbatch_size=1,\nseed=42,\nshuffle=False,\nclass_mode=None,\ntarget_size=(100,100))","82c9e0d8":"df","80584dca":"model = Sequential()\nmodel.add(Conv2D(32, (3,3), padding = 'same', input_shape = (100,100,3)))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(32, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(5, activation='sigmoid'))\nmodel.compile(optimizers.RMSprop(lr=0.0001, decay=1e-6),loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","1bc736b3":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST=test_generator.n\/\/test_generator.batch_size\nmodel.fit(train_generator,\n                    steps_per_epoch=STEP_SIZE_TRAIN,\n                    validation_data=valid_generator,\n                    validation_steps=STEP_SIZE_VALID,\n                    epochs=30\n)","96c699ca":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"wandb_login\")","ed242ffc":"%%capture\n!pip install wandb","c383e467":"%%capture\n\nimport wandb\nfrom wandb.keras import WandbCallback \n\n\nwandb.login(key = secret_value_0)","e4711754":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport tensorflow as tf\nfrom tqdm.auto import tqdm\n\nsns.set_style('darkgrid')","330366ab":"train = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\nprint(train.shape)\ntrain.head()","97d45d8d":"from sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer().fit(train.labels.apply(lambda x : x.split()))\nlabels = pd.DataFrame(mlb.transform(train.labels.apply(lambda x : x.split())), columns = mlb.classes_)\n\nfig, ax = plt.subplots(figsize = (20, 6))\nlabels.sum().plot.bar(title = 'Target Class Distribution')","13d8843a":"fig, ax = plt.subplots(figsize=(20, 6))\nlabels.sum(axis=1).value_counts().plot.bar(title='Distribution of Number of Labels per Image');","a965c8b0":"labels = pd.concat([train['image'], labels], axis=1)\nlabels.head()","c31369a6":"image_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255, validation_split=0.1)\n\ntrain_generator = image_data_generator.flow_from_dataframe(\n    dataframe=labels,\n    directory='..\/input\/plant-pathology-2021-fgvc8\/train_images',\n    x_col='image',\n    y_col=labels.columns.tolist()[1:],\n    class_mode='raw',\n    color_mode=\"rgb\",\n    target_size=(224, 224),\n    batch_size=64,\n    subset='training'\n)\n\nvalid_generator = image_data_generator.flow_from_dataframe(\n    dataframe=labels,\n    directory='..\/input\/plant-pathology-2021-fgvc8\/train_images',\n    x_col='image',\n    y_col=labels.columns.tolist()[1:],\n    class_mode='raw',\n    color_mode=\"rgb\",\n    target_size=(224, 224),\n    batch_size=64,\n    subset='validation'\n)","21e540e6":"# inputs = tf.keras.Input(shape = (224,224,3))\n\n# x = tf.keras.applications.MobileNetV2(include_top = False)(inputs)\n# x = tf.keras.layers.GlobalAveragePooling2D()(x)\n# outputs = tf.keras.layers.Dense(6, activation = 'sigmoid')(x)\n\n# model = tf.keras.Model(inputs, outputs)\n# model.compile(loss = 'binary_crossentropy', optimizer = tf.keras.optimizers.Adam(lr = 1e-4))\n\n# model.summary()\n\n# tf.keras.utils.plot_model(model, show_shapes = True)","c31c73ba":"def Model():\n    inputs = tf.keras.Input(shape = (224,224,3))\n\n    x = tf.keras.applications.MobileNetV2(include_top = False)(inputs)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    outputs = tf.keras.layers.Dense(6, activation = 'sigmoid')(x)\n\n    model = tf.keras.Model(inputs, outputs)\n    return model\n    ","96b630c0":"tf.test.is_gpu_available()\n","2bbd96d4":"if tf.test.is_gpu_available():\n    configs = {\n\n        \"learning_rate\" : 0.0001, \n        \"loss_function\" : 'binary_crossentropy',\n        \"epochs\" : 10, \n        \"batch_size\" : 64,\n        \"log_step\" : 200,\n        \"val_log_step\" : 50,\n        \"architecture\" : \"MobileNetV2\",\n        \"dataset\" : \"Plant Pathology FGVC8\"\n    }\n\n    run = wandb.init(project = \"Plant Pathology FGVC8\", config = configs)\n\n    config = wandb.config\n\n    model = Model()\n    model.summary()\n\n    optimizer = tf.keras.optimizers.Adam(config.learning_rate)\n    model.compile(optimizer, config.loss_function, metrics = ['acc'])\n\n    rlp = tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss', patience = 2, verbose = 1, factor = 0.01)\n\n    es = tf.keras.callbacks.EarlyStopping(monitor = 'val_loss', patience = 3, verbose = 1, restore_best_weights = True)\n\n\n\n    model.fit(train_generator, validation_data = valid_generator, epochs = 20, callbacks = [WandbCallback(), rlp, es])\n    \n    fig, ax = plt.subplots(figsize = (20, 6))\n    pd.DataFrame(history.history)[['loss', 'val_loss']].plot(ax = ax, title = 'Model Loss Curve')\n    \n    submissions = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\n    \n    test_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255)\n    test_generator = test_data_generator.flow_from_dataframe( \n    submissions, \n    directory = '..\/input\/plant-pathology-2021-fgvc8\/test_images',\n    x_col = \"image\",\n    y_col = None,\n    target_size = (224,224),\n    color_mode = \"rgb\",\n    classes = None,\n    class_mode = None,\n    shuffle = False, \n    batch_size = 1\n    )\n","6dd48305":"# rlp = tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss', patience = 2, verbose = 1, factor = 0.01)\n\n# es = tf.keras.callbacks.EarlyStopping(monitor = 'val_loss', patience = 3, verbose = 1, restore_best_weights = True)\n\n# history = model.fit(train_generator, validation_data = valid_generator, epochs = 10, callbacks = [rlp, es])","9c9e951a":"#### Quick Introductory Example","92bd1a3b":"#### Plant Pathology 2021 - FGVC8","8763b104":"## Multi-Label Image Classification","af71ba6f":"## Notebook in Making","41f6c99f":"TF TPU Training","724a60e3":"https:\/\/www.kaggle.com\/nickuzmenkov\/pp2021-tpu-tf-training\/data <br>\nhttps:\/\/www.kaggle.com\/nickuzmenkov\/pp2021-tpu-tf-inference","b40b3d35":"Making Data Generators for Augmentation"}}