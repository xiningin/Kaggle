{"cell_type":{"d4bc9fa5":"code","f5301740":"code","bf9fdd02":"code","95765801":"code","d03a67cf":"code","04eacc55":"code","e3671692":"code","3d89c796":"code","0ba99f0c":"code","4865384c":"code","4f46566c":"code","4f7fa1cd":"code","81a314a2":"code","4db01fde":"code","3a481161":"code","5d41f700":"code","6d3fb927":"code","ac51d02b":"code","37d5ac77":"code","4c85fae9":"markdown","ed542069":"markdown","1e7b937a":"markdown","9ae956f8":"markdown","a52dc162":"markdown","79407a80":"markdown","8c3c128c":"markdown","2c52b866":"markdown"},"source":{"d4bc9fa5":"import warnings\n\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline \nimport matplotlib.pyplot as plt ","f5301740":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler","bf9fdd02":"np.random.seed(42)\nimport random\nrandom.seed(3)","95765801":"data_path = '..\/input\/bbdcay\/'\npca_num=12","d03a67cf":"# Read train data\ndata_train = pd.read_csv(f'{data_path}data_train.csv')\nlabels_train = pd.read_csv(f'{data_path}labels_train.csv')\n# Read test data\ndata_test = pd.read_csv(f'{data_path}data_test.csv')","04eacc55":"data_train.head()","e3671692":"labels_train.head()","3d89c796":"def create_images(data, n_theta_bins=10, n_phi_bins=20, n_time_bins=6):\n    images = []\n    event_indexes = {}\n    event_ids = np.unique(data['EventID'].values)\n\n    # collect event indexes\n    data_event_ids = data['EventID'].values\n    for i in range(len(data)):\n        i_event = data_event_ids[i]\n        if i_event in event_indexes:\n            event_indexes[i_event].append(i)\n        else:\n            event_indexes[i_event] = [i]\n\n    # create images\n    for i_event in event_ids:\n        event = data.iloc[event_indexes[i_event]]\n        X = event[['Theta', 'Phi', 'Time']].values\n        one_image, edges = np.histogramdd(X, bins=(n_theta_bins, n_phi_bins, n_time_bins))\n        images.append(one_image)\n\n    return np.array(images)","0ba99f0c":"%%time\nX_train = create_images(data_train, n_theta_bins=10, n_phi_bins=20, n_time_bins=6)\nprint('train images created', X_train.shape)","4865384c":"%%time\nX_test = create_images(data_test, n_theta_bins=10, n_phi_bins=20, n_time_bins=6)\nprint('test images created', X_test.shape)","4f46566c":"y = labels_train['Label'].values","4f7fa1cd":"width, height = 3, 2\n\nplt.figure(figsize=(9, 6))\nfor i in range(6):\n    img = X_train[100][:, :, i]\n    plt.subplot(height, width, i+1)\n    plt.title(f't={i} y={y[100]}')\n    plt.imshow(img)\n    plt.colorbar()","81a314a2":"width, height = 3, 2\n\nplt.figure(figsize=(9, 6))\nfor i in range(6):\n    img = X_train[79999][:, :, i]\n    plt.subplot(height, width, i+1)\n    plt.title(f't={i} y={y[79999]}')\n    plt.imshow(img)\n    plt.colorbar()","4db01fde":"d=np.concatenate((X_train,X_test))\n\nscaler = StandardScaler()\nscaler.fit(d.reshape(len(d), -1, ))\nX_train=scaler.transform(X_train.reshape(len(X_train), -1, ))\nX_test=scaler.transform(X_test.reshape(len(X_test), -1, ))","3a481161":"d_scal=np.concatenate((X_train,X_test))\n\npca = PCA(n_components=pca_num)\npca.fit(d_scal.reshape(len(d_scal), -1, ))","5d41f700":"folds = StratifiedKFold(n_splits=6, shuffle=True, random_state=1)","6d3fb927":"def do_train():\n    oof_preds = np.zeros((len(X_train), ))\n    preds = None\n\n    for fold_, (trn_, val_) in enumerate(folds.split(y, y)):\n        train_objects = X_train[trn_]\n        valid_objects = X_train[val_]\n        y_train = y[trn_]\n        y_valid = y[val_]\n        print('train len', len(train_objects))\n        print('valid len', len(valid_objects))\n        \n        trainX_pca = pca.transform(train_objects.reshape(len(train_objects), -1, ))\n        validX_pca = pca.transform(valid_objects.reshape(len(valid_objects), -1, ))\n\n        model = ExtraTreesClassifier(n_estimators=1000, max_depth=None, random_state=55)\n        model.fit(trainX_pca, y_train)\n\n        y_pred = model.predict_proba(validX_pca)[:, 1]\n        print(y_valid.shape)\n        print(y_pred.shape)\n        current_loss = roc_auc_score(y_valid, y_pred)\n        print(current_loss)\n        oof_preds[val_] = y_pred\n\n        X_test_pca = pca.transform(X_test.reshape(len(X_test), -1, ))\n        test_pred = model.predict_proba(X_test_pca)[:, 1]\n        if preds is None:\n            preds = test_pred\n        else:\n            preds += test_pred\n        del model\n\n    cv_loss = roc_auc_score(y, oof_preds)\n    print('ALL FOLDS AUC: %.5f ' % cv_loss)\n    oof_preds_df = pd.DataFrame()\n    oof_preds_df['EventID'] = np.unique(data_train['EventID'].values)\n    oof_preds_df['Proba'] = oof_preds\n    oof_preds_df.to_csv('oof_preds.csv', index=False)\n    return cv_loss, preds \/ folds.n_splits","ac51d02b":"best_loss, preds = do_train()\nprint('CV:', best_loss)","37d5ac77":"submission = pd.DataFrame()\nsubmission['EventID'] = np.unique(data_test['EventID'].values)\nsubmission['Proba'] = preds\nsubmission.to_csv(f's_pca{pca_num}.csv', index=False, float_format='%.6f')","4c85fae9":"## PCA ","ed542069":"Originally from @sergeyzlobin","1e7b937a":"> # Start **KFold**","9ae956f8":"## min-max scaling","a52dc162":"## Cherenkov photons","79407a80":"# Create images\n\nFor each event create an image in ($\\theta$, $\\phi$) coordinates with several time channels.","8c3c128c":"# Load data\n\nThe data sample contains coordinates and time of photons reqistered in a Kiloton-Scale Liquid Scintillator Detector. There are two classes of events. The signal class contains double beta decay ($\\beta\\beta$-decay) events. The background class contains events of neutrino interactions due to $^{8}B$ decays in the sun. \n\nThe detector has spherical form and registers photons on its surface. Each event is described by coordinates and time of registered photons. There are two types of photons in an event. Cherenkov photons fly in a cone and are produced by a particle due to Cherenkov effect. Scintillation photons fly in all directions and are produced due to interactions of photons and electrons with scintillator of the detector. \n\nExample of ideal (without scattering) signal (left) and background (right) events is shown in the following figure:\n\n![sig_bkg.png](attachment:sig_bkg.png)\n\nRed and blue triangles correspond to Cherenkov photons, cyan dots - scintillation photons.","2c52b866":"## Scintillation photons"}}