{"cell_type":{"14961661":"code","ffbfe71e":"code","2094a592":"code","57986228":"code","1342e3e4":"code","d681f8fa":"code","68660c79":"code","ea39a746":"code","f55dd32b":"code","4eacaec5":"code","cdc4800f":"code","fbdf1323":"code","7caef12d":"code","21aa146f":"code","3a6f3eb0":"code","f4150ec2":"code","d1c72e29":"code","629e6125":"code","62770583":"code","15a1e901":"code","4691d19c":"code","b0bf07c6":"code","cec8dbb0":"code","b3f53764":"code","6ccea5ef":"markdown","f5dd7205":"markdown","2054eb9a":"markdown","c1085597":"markdown","0710b96d":"markdown"},"source":{"14961661":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ffbfe71e":"raw = pd.read_csv('..\/input\/hmeq-data\/hmeq.csv')\nraw.sample(8)","2094a592":"raw.describe()","57986228":"raw.shape","1342e3e4":"raw.info()","d681f8fa":"#Persentase data missing tiap kolom \nraw.isna().mean()*100","68660c79":"cols=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG','DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC']\nmissres={'col1':[],\n         'col2':[],\n         'count':[]}\nfor col1 in cols:\n    cols.remove(col1)\n    for col2 in cols:\n        miss=raw.loc[raw[col1].isna() & raw[col2].isna()].shape[0]\n        missres['col1'].append(col1)\n        missres['col2'].append(col2)\n        missres['count'].append(miss)\npd.DataFrame(missres).groupby('col1').max()","ea39a746":"#Drop row dengan 5 data missing atau lebih\nmisscols = ['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG','DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC']\ndf = raw.dropna(subset=misscols, thresh=5, axis='rows')\ndf.isna().sum()","f55dd32b":"df.describe()","4eacaec5":"#Imputasi data dengan median dan modus\nnumcols=['LOAN','MORTDUE', 'VALUE', 'YOJ', 'DELINQ','DEROG','CLAGE', 'NINQ','CLNO','DEBTINC']\nfor col in numcols:\n    df[col].fillna(df[col].median(),inplace=True)\n    \ncatcols= ['REASON','JOB']\nfor col in catcols:\n    df[col].fillna(df[col].mode()[0],inplace=True)\n\ndf.isna().sum()","cdc4800f":"#Pemeriksaan data duplikat\ndf.duplicated().sum()","fbdf1323":"#handle outlier menggunakan zscore\nfrom scipy import stats\n\nprint(f\"jumlah baris sebelum difilter: {len(df)}\")\n\nfiltered_entries = np.array([True] * len(df))\nfor col in numcols:\n  zscore = abs(stats.zscore(df[col]))\n  filtered_entries = (zscore < 3) & filtered_entries\ndf1 = df[filtered_entries]\n\n\nprint(f\"jumlah baris setelah difilter: {len(df1)}\")","7caef12d":"data=pd.get_dummies(df1)\ndata","21aa146f":"plt.figure(figsize=(20,6))\n\ni=1\nfor col in numcols:\n    plt.subplot(1,len(numcols),i)\n    sns.violinplot(y=data[col])\n    i+=1\nplt.show()","3a6f3eb0":"sns.pairplot(df.sample(frac=0.01))","f4150ec2":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(),annot=True)","d1c72e29":"x=data.drop('BAD',axis='columns')\ny=data['BAD']\nprint(x.shape, y.shape)","629e6125":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n#from sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","62770583":"param=dict(model__C=[0.01,0.1,1.0,10.0,100.0])\n\ngrid_search=GridSearchCV(estimator=pipe,\n                         param_grid=param,\n                         scoring='accuracy',\n                         cv=5,\n                         error_score=0)\ngrid_search.fit(x, y)","15a1e901":"pd.DataFrame(grid_search.cv_results_)","4691d19c":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\n\n\ndef get_score(y_test,y_pred):\n    cm=confusion_matrix(y_test,y_pred)\n    cm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'], \n                                 index=['Predict Positive:1', 'Predict Negative:0'])\n    sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')\n    plt.show()\n    print('accuracy_score',accuracy_score(y_test, y_pred))\n    print('recall_score',recall_score(y_test, y_pred))\n    print('precision_score',precision_score(y_test, y_pred),'\\n')","b0bf07c6":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)\ndef pipeline(x,y,models):\n    x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)\n    oversample = SMOTE()\n    x_train, y_train = oversample.fit_resample(x_train, y_train)\n    \n    for model in models:\n        pipe= Pipeline([\n            ('scale', StandardScaler()),\n            ('model', model())\n        ])\n        pipe.fit(x_train,y_train)\n        y_pred=pipe.predict(x_test)\n        print(model)\n        get_score(y_test,y_pred)","cec8dbb0":"pipeline(x,y,[LogisticRegression,DecisionTreeClassifier, RandomForestClassifier, AdaBoostClassifier, KNeighborsClassifier])","b3f53764":"RF= RandomForestClassifier()\npipe= Pipeline([\n            ('sample',SMOTE()),\n            ('scale', StandardScaler()),\n            ('model', RF)\n        ])\nparam=dict(model__n_estimators=[10,50,100,500,1000])\ngrid=GridSearchCV(estimator=pipe,\n                    param_grid=param,\n                    scoring='accuracy',\n                    cv=10)\n\ngrid.fit(x,y)\npd.DataFrame(grid.cv_results_)","6ccea5ef":"## Importing Library","f5dd7205":"HMEQ Data\n\nThe data set HMEQ reports characteristics and delinquency information for 5,960 home equity loans. A home equity loan is a loan where the obligor uses the equity of his or her home as the underlying collateral. The data set has the following characteristics:\n\n\u25a0 BAD: 1 = applicant defaulted on loan or seriously delinquent; 0= applicant paid loan (Target Variable){Assymetric Binnary Nominal}\n\n\u25a0 LOAN: Amount of the loan request{Ratio-Scaled Numeric}\n\n\u25a0 MORTDUE: Amount due on existing mortgage{Ratio-Scaled Numeric}\n\n\u25a0 VALUE: Value of current property{Ratio-Scaled Numeric}\n\n\u25a0 REASON: DebtCon = debt consolidation; Homelmp home improvement{Nominal}\n\n\u25a0 JOB: Occupational categories{Nominal}\n\n\u25a0 YOJ: Years at present job\n\n\u25a0 DEROG: Number of major derogatory reports\n\n\u25a0 DELINQ: Number of delinquent credit lines\n\n\u25a0 CLAGE: Age of oldest credit line in months\n\n\u25a0 NINQ: Number of recent credit inquiries\n\n\u25a0 CLNO: Number of credit lines\n\n\u25a0 DEBTINC: Debt-to-income ratio{Ratio-Scaled Numeric}","2054eb9a":"## EDA","c1085597":"## ML Preparation","0710b96d":"## Read Data"}}