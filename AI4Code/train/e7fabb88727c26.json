{"cell_type":{"16c8ed19":"code","6c4ba949":"code","6702f480":"code","7f27d32d":"code","4c088365":"code","08193e8b":"code","01edc3c1":"code","8f079a76":"code","1b36db1f":"code","ce82b5e6":"code","af717931":"code","ad55f988":"code","ca878354":"code","1d9febde":"code","40726182":"code","47ef814f":"code","6e8fe94e":"code","bfb401df":"code","022a77e1":"code","8f77bd62":"code","9bb2b673":"code","c686393c":"code","abaade50":"code","23374341":"code","9a8e42eb":"code","5c167731":"code","95029048":"markdown","afedb24a":"markdown","a8508e30":"markdown"},"source":{"16c8ed19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # Easy plotting\nimport matplotlib.pyplot as plt # Base plotting \nimport pandasql as pdsql #To run SQL quries on pandas DataFrame\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c4ba949":"ramen_data = pd.read_csv('\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv')","6702f480":"ramen_data.head()","7f27d32d":"#As Review# is more like a serial number we will drop it \nramen_data.drop(columns = 'Review #',inplace = True)","4c088365":"ramen_data.shape","08193e8b":"ramen_data['Top Ten'].isnull().value_counts()","01edc3c1":"#In Top ten column there is position along with year.We can use that.\nramen_data['Top Ten'].value_counts().head()","8f079a76":"top10_data = ramen_data[ramen_data['Top Ten'].notna()]\nramen_data.drop(columns = 'Top Ten',inplace = True)","1b36db1f":"#As we can see in top10_data that we have extracted previously\n#have some typing mistakes\ntop10_data[top10_data['Top Ten'] == '\\n']","ce82b5e6":"top10_data =top10_data[top10_data['Top Ten'] != '\\n']","af717931":"#Now lets check for the null values\nramen_data.isnull().sum()","ad55f988":"#Lets drop thes 2 value records\nramen_data.dropna(inplace = True)\nramen_data.isnull().sum()","ca878354":"ramen_data.shape","1d9febde":"#Lets covert the datatype of Stars column to integer \nramen_data.dtypes","40726182":"ramen_data['Stars'].value_counts()","47ef814f":"#There are 3 unrated ramen types so we have handle these\n#before we change the data type of column Stars to flaot\nramen_data['Stars'].value_counts()['Unrated']\nramen_data = ramen_data[ramen_data['Stars'] != 'Unrated']","6e8fe94e":"#Here we are converting the data type of Stars column from Object to Float\nramen_data['Stars'] = ramen_data['Stars'].astype(float)\nramen_data.dtypes","bfb401df":"#Here there are two records for one for USA and another for United States\n#which are same\nramen_data.Country.value_counts()","022a77e1":"ramen_data[(ramen_data['Country'] =='United States') | (ramen_data['Country'] =='USA')]['Country'].value_counts()","8f77bd62":"#We will be adding the United States record to USA by chnaging the country name\nramen_data['Country'].replace('United States','USA',inplace =True)","9bb2b673":"ramen_data[(ramen_data['Country'] =='United States') | (ramen_data['Country'] =='USA')]['Country'].value_counts()","c686393c":"#Lets do some visualization\nramen_data.head()","abaade50":"#Lets see which country has given most ramen reviews\nreview_data = ramen_data.groupby(by = 'Country').count().sort_values(by = 'Stars',ascending =False)\nplt.figure(figsize = (10,10))\nsns.barplot(data = review_data,y=review_data.index ,x= 'Stars',orient='h' )\nplt.xlabel('Number of reviews')\nplt.title('Country Vs No. of reviews')\n#Most number of reviews were given by Japan followed by South Koera and USA\n#and it also shows were ramen is most popular JAPAN","23374341":"#Lets check top 10 brand which has most number variety in ramen\nvairety_data = pdsql.sqldf(\"SELECT Brand,count(Variety) as Number_Of_Variety FROM ramen_data GROUP BY Brand \")\nvairety_data.sort_values(by = 'Number_Of_Variety',ascending =False,inplace =True)","9a8e42eb":"#Using bar plot and pie chart\nfig = plt.figure(figsize = (14,6))\nfig.suptitle('Brand Vs Number Of Variety')\n\n#Using barplot from seaborn\nax1 = fig.add_subplot(121)\nsns.barplot(data = vairety_data.head(10),y='Brand' ,x= 'Number_Of_Variety',orient='h',ax =ax1)\nplt.xlabel('Number Of Variety')\n\n#Using pie chart from matplotlib\nax2 = fig.add_subplot(122)\nplt.pie(vairety_data.head(10)['Number_Of_Variety'],\n        explode = (0.1,0,0,0,0,0,0,0,0,0),labels =vairety_data.head(10)['Brand'],\n        autopct='%1.1f%%',\n        shadow =True)\n# Nissin has the most number of variety around 400","5c167731":"#Prima Taste was in 1st position 5 times\nfig = plt.figure(figsize = (14,5))\ndata =pd.DataFrame(top10_data.groupby(by='Brand')['Top Ten'].count())\ndata.sort_values(by = 'Top Ten',ascending =False,inplace = True)\nsns.barplot(data=data, y='Top Ten', x=data.index,orient ='v')\nplt.xticks(rotation=45)","95029048":"# Data Visualization","afedb24a":"# Hope you enjoyed my notebook.Thank You.\n# [Sayonara !](https:\/\/www.google.com\/search?q=sayonara&oq=sayonara&aqs=chrome..69i57j46j0l6.4966j1j7&sourceid=chrome&ie=UTF-8)","a8508e30":"# Data Preprocessing"}}