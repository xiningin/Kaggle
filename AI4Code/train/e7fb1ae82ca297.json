{"cell_type":{"8754ae21":"code","688cb7b0":"code","dbb19bc4":"code","94238068":"code","7040adae":"code","76e47f6a":"code","70d49030":"code","eb67237a":"code","dcb35192":"code","6cab46ba":"code","c7b885b0":"code","19c737f1":"code","cbfce54c":"code","4e03be21":"code","6912eca6":"code","8d9a71a6":"code","0068685b":"code","e2a72681":"code","bde56711":"code","1642f602":"code","fc3f9a28":"code","0f0ba169":"code","bd4490b7":"code","f6fc7deb":"code","10d8a2bd":"code","2bbc6b20":"code","d350c611":"code","24b9bd83":"code","3e8131ed":"code","0029ddf7":"code","9181c79d":"markdown","15b85774":"markdown","89a0f8f6":"markdown","177a0a52":"markdown","2051f040":"markdown","cd970239":"markdown","ba6b2eb9":"markdown","0859638f":"markdown","16c5dd47":"markdown","3043248a":"markdown","be9025d2":"markdown","166883b5":"markdown","14d5ea34":"markdown","288e16fd":"markdown","44856ae3":"markdown","64517506":"markdown","8cb4f78a":"markdown","6cf37d54":"markdown","aeb9eea2":"markdown","3672a55d":"markdown","9224a100":"markdown","4f2caacc":"markdown","4755fe13":"markdown","7900440a":"markdown","9dc30aba":"markdown","4d69e862":"markdown","1d852f4d":"markdown"},"source":{"8754ae21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","688cb7b0":"from IPython.display import clear_output\n!pip3 install -U lazypredict\nclear_output()","dbb19bc4":"!pip3 install -U pandas==1.2.3 #Upgrading pandas\nimport numpy as np\nimport pandas as pd \n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\nimport matplotlib.dates as mdates\nimport matplotlib.colors as mcolors\nfrom matplotlib import style\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\nfrom sklearn.metrics import mean_absolute_error,explained_variance_score,max_error\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,mean_squared_log_error\nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.metrics import r2_score,mean_poisson_deviance\nfrom sklearn.metrics import mean_gamma_deviance,mean_tweedie_deviance\n\nimport lazypredict\nfrom lazypredict import Supervised\nfrom lazypredict.Supervised import LazyRegressor, LazyClassifier\nclear_output()\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","94238068":"# import required modules\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nimport datetime\n\ntrain = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")","7040adae":"print('Rows and Columns in train dataset:', train.shape)\nprint('Rows and Columns in test dataset:', test.shape)","76e47f6a":"print('Missing values in train dataset:', sum(train.isnull().sum()))\nprint('Missing values in test dataset:', sum(test.isnull().sum()))","70d49030":"print('Missing values per columns in train dataset')\nfor col in train.columns:\n    temp_col = train[col].isnull().sum()\n    print(f'{col}: {temp_col}')","eb67237a":"print('Missing values per columns in test dataset')\nfor col in test.columns:\n    temp_col = test[col].isnull().sum()\n    print(f'{col}: {temp_col}')","dcb35192":"train.head()","6cab46ba":"test.head()","c7b885b0":"print(train.kurt())\nprint(train.skew())\n\n","19c737f1":"print(test.kurt())\nprint(test.skew())\n\n","cbfce54c":"import seaborn as sns\n\ncorr=train.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr,annot=True,cmap=plt.cm.tab20b)\n\ncorr=test.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr,annot=True,cmap=plt.cm.tab20b)","4e03be21":"try:\n    import sweetviz\nexcept:\n    !pip install sweetviz\n    import sweetviz","6912eca6":"\n\nimport pandas as pd\ndf = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\nmy_report  = sweetviz.analyze([df,'Train'], target_feat='pressure')\nmy_report.show_html('FinalReport.html')","8d9a71a6":"my_report.show_notebook()","0068685b":"!pip install xlrd autoviz\ntry:\n    from autoviz.AutoViz_Class import AutoViz_Class\nexcept:\n    !pip install  statsmodel xlrd autoviz  \n    from autoviz.AutoViz_Class import AutoViz_Class","e2a72681":"\n\nAV = AutoViz_Class()\ndf = AV.AutoViz('..\/input\/ventilator-pressure-prediction\/train.csv')","bde56711":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(2, 4)\ngs.update(wspace=0.3, hspace=0.3)\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1  \n\nfeatures = list(train.columns[0:7])\nprint(features)\n\n\nrun_no = 0\nfor col in features:\n    sns.kdeplot(ax=locals()[\"ax\"+str(run_no)], x=train[col], zorder=2, alpha=1, linewidth=1, color='#ffd514')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5)\n    locals()[\"ax\"+str(run_no)].xaxis.offsetText.set_fontsize(4)\n    locals()[\"ax\"+str(run_no)].yaxis.offsetText.set_fontsize(4)\n    run_no += 1\n\nrun_no = 0\nfor col in features:\n    sns.kdeplot(ax=locals()[\"ax\"+str(run_no)], x=test[col], zorder=2, alpha=1, linewidth=1, color='#ff355d')\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5)\n    locals()[\"ax\"+str(run_no)].xaxis.offsetText.set_fontsize(4)\n    locals()[\"ax\"+str(run_no)].yaxis.offsetText.set_fontsize(4)\n    run_no += 1\n\nplt.show()","1642f602":"import random\n\ndef random_color():\n        rand = lambda: random.randint(1, 255)\n        return '#%02X%02X%02X' % (rand(), rand(), rand())\n    \ndef plot_feature_distributions(figrows,figcols,colstart,colend,collist,df_to_plot):\n    plt.figure(1)\n    plt.subplots(figrows,figcols, figsize=(4,3))\n    for i, item in enumerate(collist[colstart:colend]):\n        plt.subplot(figrows,figcols,i+1)\n        plt.hist(x=df_to_plot[item],color=random_color(),alpha=0.75)\n        plt.title(item)\n        plt.grid(True)\n        plt.subplots_adjust(top=1.5, bottom=0.2, left=0.10, right=0.95, hspace=0.3,\n        wspace=0.35)","fc3f9a28":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs.update(wspace=0.3, hspace=0.3)\nbackground_color = \"#f6f5f5\"\n\nplot_feature_distributions(2,3,0,5,features,train)","0f0ba169":"X = train.drop(['id','breath_id','pressure'], axis=1)\ny = train['pressure']\n# #Spliting into training and validation set\nX_train, X_valid, y_train, y_valid = train_test_split(X, y,test_size=.2,random_state =1)","bd4490b7":"skip_list = [8,9,10,11,12,15, 16,17,18,26,27,28,29,30,31,33, 37]\n#skip_list = [0,1,2,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]\n\nregs_name =[]\nregs = []\n\nfor i in range(42):\n    if i in skip_list:\n        print('Skipping', i, \" ->\", lazypredict.Supervised.REGRESSORS[i][0])\n    else:\n        regs_name.append(lazypredict.Supervised.REGRESSORS[i][0])\n        regs.append(lazypredict.Supervised.REGRESSORS[i][1])\n#        print(i, \" ->\", lazypredict.Supervised.REGRESSORS[i][0])\n\n#print(regs_name)","f6fc7deb":"\noffset = int(X.shape[0] * 0.9)\n#Let\u2019s split the dataset into the training and testing part:\n\n### splitting dataset into training and testing part.\nX_train, y_train = X[:offset], y[:offset]\nX_test, y_test = X[offset:], y[offset:]\n#Let\u2019s create an object of LazyRegressor class:\n\n### fitting data in LazyRegressor because here we are solving Regression use case. \nnum_models = 42 - len(skip_list)\nmod_idx = [m for m in range(num_models)]\nresults = pd.DataFrame()\nfor i in range(0,num_models):\n    print(i,regs_name[i])\n    reg = LazyRegressor(verbose=0, \n                    ignore_warnings=True,\n                    predictions=True,\n                    custom_metric=  r2_score,\n                    regressors = [regs[i]])\n    models, predictions = reg.fit(X_train, X_valid, y_train, y_valid)\n    models.index = [regs_name[i]]\n    results = results.append(models)\n\nclear_output()\nprint(results)\n\n### fitting data in LazyClassifier\nmodels, predictions = reg.fit(X_train, X_test, y_train, y_test)","10d8a2bd":"results = results.sort_values(by = \"r2_score\")\nresults.style.background_gradient(cmap ='viridis')\n    ","2bbc6b20":"#for i in range(0,num_models):\n#    results['Model'][i] = regs_name[i]\n\nresults['Model'] = regs_name\n#print(results.columns)\n","d350c611":"x_len = 10 + (2 * (num_models\/10))\ny_len = 2.25 *  num_models\n\n# Font\nplt.rcParams['font.family'] = 'Cursive'\n\n# Visualization\nax=results.plot(x=\"Model\", y=[\"Adjusted R-Squared\",\"R-Squared\", \"r2_score\"], kind=\"barh\",figsize=(x_len,y_len))\nax.patch.set_facecolor('#e4f2f7')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Annotate values\n#for p in ax.patches:\n#    ax.annotate(str(p.get_width()), (p.get_y() * 1.005, p.get_width() * 1.005))\n    \n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nax.grid(b=None)\n\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n\n# Labels titles\nax.set_ylabel('Regression Algorithm', fontsize=8)\nax.set_xlabel('Value', fontsize=8, labelpad=20)\n\n\n# Title\nax.set_title('Performance of various LazyPredict Regression Algorithms', fontsize=15)\n\nplt.show()\n","24b9bd83":"fig, ax = plt.subplots(1,1)\nax=results[\"RMSE\"].plot(kind='line', \n                              linewidth=4,\n                              marker='h', \n                              markerfacecolor='skyblue', \n                              markeredgewidth=2,\n                              markersize=12, \n                              markevery=1, \n                              figsize=(10,5))\nax.set_title('Performance of various LazyPredict Regression Algorithms', fontsize=15)\nax.set_xlabel('Regression Algorithm', fontsize=12)\nax.set_ylabel('RMSE Value', fontsize=12)\nax.patch.set_facecolor('#f4e2f7')\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\nplt.show()\n","3e8131ed":"fig, ax = plt.subplots(1,1)\nax=results[\"Time Taken\"].plot(kind='line', \n                              linewidth=4,\n                              marker='h', \n                              markerfacecolor='lightgreen', \n                              markeredgewidth=2,\n                              markersize=12, \n                              markevery=1, \n                              figsize=(10,5))\nax.set_title('Performance of various LazyPredict Regression Algorithms', fontsize=15)\nax.set_xlabel('Regression Algorithm', fontsize=12)\nax.set_ylabel('Time Taken', fontsize=12)\nax.patch.set_facecolor('#e4f2f7')\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\nplt.show()\n","0029ddf7":"import shap  # pip install shap\nimport xgboost as xgb\n\n# Load and train a model\nclf = xgb.XGBRegressor().fit(X[0:10000], y[0:10000])\n\n# Explain model's predictions with SHAP\nexplainer = shap.Explainer(clf)\nshap_values = explainer(X[0:10000])\n\n# Visualize the predictions' explanation\nshap.plots.beeswarm(shap_values)","9181c79d":"# [\u00b6](#4.3)\n\n<h2 style='background:#B2FF33; border:0;'><center>4.3 Try SHAP and XGB to plot the values as a Bee Swarm<\/center><\/h2> ","15b85774":"## Plot the Histogram distributions","89a0f8f6":"###### [back to top](#table-of-contents)\n# [\u00b6](#2.4)\n<h3 style='background:#B2FF33; border:0;'><center>2.4. Automated EDA using SweetViz and AutoViz <\/center><\/h3>","177a0a52":"###### [back to top](#table-of-contents)\n# [\u00b6](#2.1)\n<h3 style='background:#B2FF33; border:0;'><center>2.1. Numbers of rows and columns<\/center><\/h3>","2051f040":"###### [back to top](#table-of-contents)\n<a id=\"999\"><\/a>\n# Work in Progress More to come","cd970239":"###### [back to top](#table-of-contents)\n# [\u00b6](#1.1)\n<h3 style='background:#B2FF33; border:0;'><center>1.1. Loading of Libraries<\/center><\/h3>","ba6b2eb9":"- Run the model","0859638f":"## Google \ud83e\udde0 Ventilator Lazy Prediction & EDA \ud83d\udd2e\n\n###### An article extract from Wikipedia - https:\/\/en.wikipedia.org\/wiki\/Mechanical_ventilation\n\n![Mechanical Ventilation](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/a7\/Respiratory_therapist.jpg\/440px-Respiratory_therapist.jpg)\n![A Ventilator](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/94\/VIP_Bird2.jpg\/440px-VIP_Bird2.jpg)\n![Display](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/59\/PIA23775-NASA-VITAL-Ventilator-20200430.jpg\/490px-PIA23775-NASA-VITAL-Ventilator-20200430.jpg)\n\n### History of Ventilators\nThe history of mechanical ventilation begins with various versions of what was eventually called the iron lung, a form of noninvasive negative-pressure ventilator widely used during the polio epidemics of the twentieth century after the introduction of the \"Drinker respirator\" in 1928, improvements introduced by John Haven Emerson in 1931, and the Both respirator in 1937. Other forms of noninvasive ventilators, also used widely for polio patients, include Biphasic Cuirass Ventilation, the rocking bed, and rather primitive positive pressure machines.\n\n### Mechanical ventilation\nMechanical ventilation is indicated when the patient's spontaneous breathing is inadequate to maintain life. It is also indicated as prophylaxis for imminent collapse of other physiologic functions, or ineffective gas exchange in the lungs. Because mechanical ventilation serves only to provide assistance for breathing and does not cure a disease, the patient's underlying condition should be identified and treated in order to resolve over time. In addition, other factors must be taken into consideration because mechanical ventilation is not without its complications One of the main reasons why a patient is admitted to an ICU is for delivery of mechanical ventilation. Monitoring a patient in mechanical ventilation has many clinical applications: Enhance understanding of pathophysiology, aid with diagnosis, guide patient management, avoid complications and assessment of trends. In general, mechanical ventilation is initiated to protect the airway\/reduce work of breathing and\/or correct blood gases.\n\n### Common Uses\nCommon specific medical indications for use include:\n* Acute lung injury, including acute respiratory distress syndrome (ARDS) and trauma\n* Apnea with respiratory arrest, including cases from intoxication\n* Acute severe asthma requiring intubation\n* Acute or chronic respiratory acidosis, most commonly with chronic obstructive pulmonary disease (COPD) and obesity hypoventilation syndrome * Acute respiratory acidosis with partial pressure of carbon dioxide (pCO 2) > 50 mmHg and pH < 7.25, which may be due to paralysis of the diaphragm due to Guillain\u2013Barr\u00e9 syndrome, myasthenia gravis, motor neuron disease, spinal cord injury, or the effect of anaesthetics and muscle relaxants\n* Increased work of breathing as evidenced by significant tachypnea, retractions, and other physical signs of respiratory distress\n* Hypoxemia with arterial partial pressure of oxygen (PaO 2) < 55 mm Hg with supplemental fraction of inspired oxygen (FiO 2) = 1.0\n* Hypotension including sepsis, shock, congestive heart failure\n* Neurological diseases such as muscular dystrophy and amyotrophic lateral sclerosis (ALS)\n* Newborn infants with breathing problems may require mechanical ventilation.\nMechanical ventilation can be used as a short-term measure, for example during an operation or critical illness (often in the setting of an intensive-care unit). It may be used at home or in a nursing or rehabilitation institution if patients have chronic illnesses that require long-term ventilatory assistance.\n\n### Positive pressure\n\n>> Carl Gunnar Engstr\u00f6m invented in 1950 one of the first intermittent positive pressure ventilator, which delivers air straight into the lungs using an endotracheal tube placed into the windpipe.\n\n>>> ***Neonatal mechanical ventilator***\n>>>> The design of the modern positive-pressure ventilators were based mainly on technical developments by the military during World War II to supply oxygen to fighter pilots in high altitude. Such ventilators replaced the iron lungs as safe endotracheal tubes with high-volume\/low-pressure cuffs were developed.\n>>>> Positive-pressure ventilators work by increasing the patient's airway pressure through an endotracheal or tracheostomy tube. The positive pressure allows air to flow into the airway until the ventilator breath is terminated. Then, the airway pressure drops to zero, and the elastic recoil of the chest wall and lungs push the tidal volume \u2014 the breath-out through passive exhalation.\n\n### Negative pressure machines\n\n>> Negative pressure mechanical ventilators are produced in small, field-type and larger formats. The prominent design of the smaller devices is known as the cuirass, a shell-like unit used to create negative pressure only to the chest using a combination of a fitting shell and a soft bladder\n\n### Intermittent abdominal pressure ventilator\n>> Another type is the intermittent abdominal pressure ventilator that applies pressure externally via an inflated bladder, forcing exhalation, sometimes termed exsufflation.\n\n### Monitoring\n>> In ventilated patients, pulse oximetry it is commonly used when titrating FIO2. A reliable target of Spo2 is greater than 95%.\n\n>> Different strategies exist to find the level of PEEP in these patients with ARDS guided by esophageal pressure, Stress Index, static airway pressure-volume curve. In such patients, some experts recommend limiting PEEP to low levels (~10cmH2O). In patients who have diffused loss of aeration, PEEP can be used provided it does not cause the plateau pressure to rise above the upper inflection point.\n\n\n### Breath delivery mechanisms\n#### Trigger\n>> The trigger is what causes a breath to be delivered by a mechanical ventilator. Breaths may be triggered by a patient taking their own breath, a ventilator operator pressing a manual breath button, or by the ventilator based on the set breath rate and mode of ventilation.\n\n#### Cycle\n>> The cycle is what causes the breath to transition from the inspiratory phase to the exhalation phase. Breaths may be cycled by a mechanical ventilator when a set time has been reached, or when a preset flow or percentage of the maximum flow delivered during a breath is reached depending on the breath type and the settings. Breaths can also be cycled when an alarm condition such as a high pressure limit has been reached, which is a primary strategy in pressure regulated volume control.\n\n#### Limit\n>> Limit is how the breath is controlled. Breaths may be limited to a set maximum circuit pressure or a set maximum flow.\n\n#### Breath exhalation\n>> Exhalation in mechanical ventilation is almost always completely passive. The ventilator's expiratory valve is opened, and expiratory flow is allowed until the baseline pressure (PEEP) is reached. Expiratory flow is determined by patient factors such as compliance and resistance.","16c5dd47":"## Training dataset tells us that ***u_in*** and ***pressure*** are ***skewed*** distribution with a ***kurtosis***!\n- In statistics, *skewness is a measure of the asymmetry of the probability distribution of a random variable* about its mean. ... If skewness is less than -1 or greater than 1, the distribution is highly skewed. If skewness is between -1 and -0.5 or between 0.5 and 1, the distribution is moderately skewed.\n- Kurtosis is a *statistical measure that defines how heavily the tails of a distribution differ from the tails of a normal distribution*. In other words, kurtosis identifies whether the tails of a given distribution contain extreme values.\n> Source : Google Search","3043248a":"# [\u00b6](#4.2)\n<h2 style='background:#B2FF33; border:0;'><center>4.2 Plot the outcomes<\/center><\/h2> ","be9025d2":"- *plot the time taken*","166883b5":"# [\u00b6](#4.1)\n<h2 style='background:#B2FF33; border:0;'><center>4.1 Build and run the regression models<\/center><\/h2> ","14d5ea34":"###### [back to top](#table-of-contents)\n# [\u00b6](#3)\n<h1 style='background:#B2FF33; border:0;'><center>3. Features<\/center><\/h1>","288e16fd":"- *plot the RMSE Value","44856ae3":"###### [back to top](#table-of-contents)\n# [\u00b6](#2.2)\n<h3 style='background:#B2FF33; border:0;'><center>2.2. Missing Values Data<\/center><\/h3>","64517506":"###### [back to top](#table-of-contents)\n# [\u00b6](#1.2)\n<h3 style='background:#B2FF33; border:0;'><center>1.2. Data Loading<\/center><\/h3>","8cb4f78a":"###### [back to top](#table-of-contents)\n# [\u00b6](#2)\n<h1 style='background:#B2FF33; border:0;'><center>2. Data Exploration<\/center><\/h1>","6cf37d54":"* create the test and training , validation datasets ","aeb9eea2":"<a id=\"table-of-contents\"><\/a>\n<h1 style='background:#B2FF33; border:0;'><center>Table of Contents<\/center><\/h1>\n\n## [1. Introduction](#1)\n### [1.1 Loading of Libraries](#1.1)\n### [1.2 Data Loading](#1.2)\n## [2. Data Exploration](#2)\n### [2.1 Number of Rows and columns](#2.1)\n### [2.2 Missing Data Information](#2.2)\n### [2.3 Header Rows](#2.3)\n### [2.4 Automated EDA](#2.4)\n## [3. Features Analysis](#3)\n## [4. Use of LazyPredict](#4)\n## [Work In Progress](#999)\n\n","3672a55d":"###### [back to top](#table-of-contents)\n# [\u00b6](#1)\n<h1 style='background:#B2FF33; border:0;'><center>1. Introduction<\/center><\/h1>","9224a100":"## Testing dataset tells us that ***u_in*** and ***pressure*** are skewed distribution with a kurtosis!","4f2caacc":"## Build a KDEplot for all the key columns \n\n\n###### Source code credit to a kernel https:\/\/www.kaggle.com\/dwin183287\/tps-september-2021-eda or the grandmaster SHARLTO COPE","4755fe13":"- Generate a heatmap summary on r2_score","7900440a":"## This competition is about prediction of ventilator usage data for use in a pandemic\/epidemic disaster type situation such as *COVID-19*\n\n***Some nice papers to read*** \n\n- [Improving Mechanical Ventilator Clinical Decision Support Systems with A Machine Learning Classifier for Determining Ventilator Mode <== ***by*** ==> Gregory B. Rehm , Brooks T. Kuhn, Jimmy Nguyen, Nicholas R. Andersonb, Chen-Nee Chuah , Jason Y. Adams](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/1904\/1904.12969.pdf)\n- [Machine learning methods to predict mechanical ventilation and mortality in patients with COVID-19 <== ***by*** ==>  Limin Yu ,Alexandra Halalau,Bhavinkumar Dalal,Amr E. Abbas,Felicia Ivascu,Mitual Amin,Girish B. Nair](https:\/\/journals.plos.org\/plosone\/article?id=10.1371\/journal.pone.0249285)\n- [Second Link for the above](https:\/\/pubmed.ncbi.nlm.nih.gov\/33793600\/)\n- [Artificial Intelligence in the Intensive Care Unit <== ***by*** ==> Guillermo Gutierrez](https:\/\/ccforum.biomedcentral.com\/track\/pdf\/10.1186\/s13054-020-2785-y.pdf)\n- [Development and validation of a reinforcement learning algorithm to dynamically optimize mechanical ventilation in critical care <== ***by*** ==>\nArne Peine, Ahmed Hallawa, Johannes Bickenbach, Guido Dartmann, Lejla Begic Fazlic, Anke Schmeink, Gerd Ascheid, Christoph Thiemermann, Andreas Schuppert, Ryan Kindle, Leo Celi, Gernot Marx & Lukas Martin ](https:\/\/www.nature.com\/articles\/s41746-021-00388-6)\n","9dc30aba":"###### [back to top](#table-of-contents)\n# [\u00b6](#4)\n<h1 style='background:#B2FF33; border:0;'><center>4. Use Of LazyPredict Library for Regression<\/center><\/h1> ","4d69e862":"###### [back to top](#table-of-contents)\n# [\u00b6](#2.3)\n<h3 style='background:#B2FF33; border:0;'><center>2.3. Header Rows , Skewness and Kurtosis <\/center><\/h3>","1d852f4d":"- *Plot the key parameters for the regression*  - ***Adjusted R-Squared\",\"R-Squared\", \"RMSE\", \"r2_score***"}}