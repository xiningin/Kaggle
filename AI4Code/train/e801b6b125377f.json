{"cell_type":{"d432c616":"code","8c72b757":"code","cb03840a":"code","3816ee7d":"code","59608b68":"code","fc325d4c":"code","0f1a5489":"code","ca2aff63":"code","1ff9aab5":"code","a78204e5":"code","1cddf26b":"code","3fe27fab":"code","6078e693":"code","2a7b5c62":"code","7f4c9e9f":"code","6147b140":"code","d23846e1":"code","bae953bf":"code","696c0665":"code","30c688e5":"code","89b9a9be":"code","cdc4387c":"code","4b9e75e1":"code","85d2b178":"code","627917a8":"code","c5084915":"code","066caeee":"code","6ee467f7":"code","752f2827":"markdown","c23a07e2":"markdown","49a0df4d":"markdown","8ae2e039":"markdown","260cc600":"markdown","0cc1d6bb":"markdown","f8642071":"markdown"},"source":{"d432c616":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\nfrom sklearn.preprocessing import OrdinalEncoder, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestRegressor","8c72b757":"train = pd.read_csv('..\/input\/machine-hack\/train.csv')\ntest = pd.read_csv('..\/input\/machine-hack\/test.csv')\nsample_submission = pd.read_csv('..\/input\/machine-hack\/submission.csv')","cb03840a":"train.head()","3816ee7d":"print(f'Train shape: {train.shape}')\nprint(f'Test shape: {test.shape}')","59608b68":"train.describe().T","fc325d4c":"train.info()","0f1a5489":"f = plt.figure(figsize=(15, 8))\n\nax = f.add_subplot(121)\nstats.probplot(train['Price'], plot=ax)\nax.set_title('Price prob distribution')\n\nax = f.add_subplot(122)\nplt.hist(train['Price'])\n\nplt.show()","ca2aff63":"f, ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(train.corr(), annot=True, linewidths=0.5, fmt='0.3f', ax=ax)\nplt.show()","1ff9aab5":"train = train[train['Price'] < 600000].reset_index()\ntrain = train[train['Price'] > 10].reset_index()","a78204e5":"def prepare_df(df, levy_median = 781):\n    df['Turbo'] = df['Engine volume'].str.contains(' Turbo').astype(int) # Adding extra feature\n    \n    df['Leather interior'] = (df['Leather interior'] == 'Yes').astype(int) #category to numeric\n    \n    df['Levy'] = df['Levy'].replace({'-': np.nan}).astype(float)\n    df['Levy'] = df['Levy'].fillna(levy_median) #replace with median\n    \n    df['Mileage'] = df['Mileage'].str.replace('km','').astype(float) # Separating text\n    \n    df['Engine volume'] = df['Engine volume'].str.replace(' Turbo', '').astype(float)\n    \n    df = df.drop(['Manufacturer', 'Model','Doors'], axis=1)\n    \n    return df","1cddf26b":"train_prepared = prepare_df(train)\ntest_prepared = prepare_df(test)","3fe27fab":"f, ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(train.corr(), annot=True, linewidths=0.5, fmt='0.3f', ax=ax)\nplt.show()","6078e693":"train_prepared_numeric = train_prepared.select_dtypes(np.number)\ntrain_prepared_categorical = train_prepared.select_dtypes(object)","2a7b5c62":"encoder = OrdinalEncoder()\ntrain_cat_encoded = encoder.fit_transform(train_prepared_categorical)","7f4c9e9f":"cat_df=pd.DataFrame(train_cat_encoded, columns=train_prepared_categorical.columns)\ncat_df.head()","6147b140":"concat=pd.concat([train_prepared_numeric,cat_df],axis=1)","d23846e1":"X = concat.drop(['Price','level_0','index'], axis=1).copy()\ny = concat['Price'].values","bae953bf":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=3)","696c0665":"model = RandomForestRegressor(random_state=3)","30c688e5":"model.fit(X_train, y_train)\nprint(f'Train RMSLE: {np.sqrt(mean_squared_log_error(model.predict(X_train), y_train))}')\nprint(f'Val RMSLE: {np.sqrt(mean_squared_log_error(model.predict(X_val), y_val))}')","89b9a9be":"test_prep_num = test_prepared.select_dtypes(np.number)\ntest_cat = test_prepared.select_dtypes(object)","cdc4387c":"test_enc_cat = encoder.transform(test_cat)","4b9e75e1":"test_cat_df=pd.DataFrame(test_enc_cat, columns=test_cat.columns)\ntest_cat_df.head()","85d2b178":"concat_test = pd.concat([test_prep_num, test_cat_df], axis=1)","627917a8":"X_test = concat_test.drop(['Price'], axis=1).copy()","c5084915":"sample_submission['Price'] = model.predict(X_test)","066caeee":"sample_submission.head()","6ee467f7":"sample_submission.to_csv('submission.csv', index=None)","752f2827":"# Feature engineering","c23a07e2":"# \ud83d\udcdaLoading libraries\ud83d\udcda","49a0df4d":"There is one outlier in the data","8ae2e039":"# Model","260cc600":"\ud83d\udccc Engine vol. and Cylinders are highly correlated which is expected.\n\n\ud83d\udccc Levy is also correleted with EV and Cylinders.\n\n\ud83d\udccc There is no direct correlation with target 'Price' variable.\n","0cc1d6bb":"# Pre-processing \u2699\ud83d\udee0","f8642071":"# EDA\ud83d\udcca"}}