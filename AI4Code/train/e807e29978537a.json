{"cell_type":{"f6180894":"code","fb39cffe":"code","735fd2a1":"code","c6d97d05":"code","9e12b15f":"code","d3c63975":"code","870d5a3d":"code","da95243b":"code","1f7ec2d2":"code","5cc9a855":"code","a4826222":"code","5360024b":"code","c798adfb":"code","657a2009":"code","e7d053aa":"code","0c8f1fb3":"code","04d37129":"code","d445bdc3":"markdown","0b9bad97":"markdown","9fed1c7b":"markdown","099c978f":"markdown"},"source":{"f6180894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb39cffe":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use('fivethirtyeight')","735fd2a1":"data = pd.read_csv('..\/input\/sales-prediction\/train.csv')","c6d97d05":"plt.figure(figsize = (15,12))\nx = data['Item_Type'].value_counts().index\ny = data['Item_Type'].value_counts().values\nsns.barplot(x = y , y = x , palette= 'gray')\nplt.xlabel('Count')\nplt.ylabel('Item Type')\nplt.show()","9e12b15f":"plt.figure(figsize = (15,12))\nx = data['Outlet_Year'].value_counts().index\ny = data['Outlet_Year'].value_counts().values\nx = x.sort_values()\nsns.barplot(x = x , y = y , palette= 'gray')\nplt.xlabel('Outlet Years')\nplt.ylabel('Count')\nplt.show()","d3c63975":"labels = data['Outlet_Size'].value_counts().index\ncolors = ['#696969' , '#909090' , '#B0B0B0']\nexplode = (0,0.1,0.2)\nplt.figure(figsize = (15,12))\nplt.pie(x = data['Outlet_Size'].value_counts() ,labels = labels, \n        colors = colors,\n        shadow =True,\n        explode = explode,\n        autopct='%1.1f%%' \n       )\ncentre_circle = plt.Circle((0, 0), 0.75, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('Outlet Size Count')\nplt.show()","870d5a3d":"labels = data['Outlet_Location_Type'].value_counts().index\ncolors = ['#696969' , '#909090' , '#B0B0B0']\nexplode = (0,0.1,0.2)\nplt.figure(figsize = (15,12))\nplt.pie(x = data['Outlet_Location_Type'].value_counts() ,labels = labels, \n        colors = colors,\n        shadow =True,\n        explode = explode,\n        autopct='%1.1f%%' \n       )\ncentre_circle = plt.Circle((0, 0), 0.75, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('Outlet Location Tier Count')\nplt.show()","da95243b":"plt.figure(figsize = (15,12))\nsns.histplot(x = data['Item_W'],color = 'black',kde = True,edgecolor = 'black')\nplt.title('Distriibution of Item Weight')\nplt.xlabel('Item Weight')\nplt.show()","1f7ec2d2":"plt.figure(figsize = (15,12))\nsns.histplot(x = data['Item_MRP'],color = 'black',kde = True,edgecolor = 'black')\nplt.title('Distriibution of Item Price')\nplt.xlabel('Item Price')\nplt.show()","5cc9a855":"plt.figure(figsize = (15,12))\nsns.histplot(x = data['Sales'],color = 'black',kde = True,edgecolor = 'black')\nplt.title('Distriibution of Sales')\nplt.xlabel('Sales')\nplt.show()","a4826222":"plt.figure(figsize = (15,12))\nplt.scatter(data['Item_W'] , data['Sales'] , color = 'k')\nplt.title('Sales with respect to Item weight')\nplt.xlabel('Item Weight')\nplt.ylabel('Sales')\nplt.show()","5360024b":"plt.figure(figsize = (15,12))\nplt.scatter(data['Item_MRP'] , data['Sales'] , color = 'k')\nplt.title('Sales with respect to Item MRP')\nplt.xlabel('Item MRP')\nplt.ylabel('Sales')\nplt.show()","c798adfb":"plt.figure(figsize = (15,12))\nsns.barplot(y = data['Item_Type'] , x = data['Sales'],palette='gray')\nplt.title('Sales with respect to item type')\nplt.show()","657a2009":"plt.figure(figsize = (15,12))\nsns.barplot(x = data['Outlet_Location_Type'] , y = data['Sales'],palette='gray')\nplt.title('Sales with respect to Outlet Location Type')\nplt.show()","e7d053aa":"plt.figure(figsize = (15,12))\nsns.barplot(x = data['Outlet_Size'] , y = data['Sales'],palette='gray')\nplt.title('Sales with respect to Outlet size')\nplt.show()","0c8f1fb3":"plt.figure(figsize = (15,12))\nsns.lineplot(x = data['Outlet_Year'] , y = data['Sales'],color = 'k' , marker = 'o')\nplt.title('Sales with respect to Year')\nplt.show()","04d37129":"plt.figure(figsize = (15,12))\nsns.heatmap(data.corr() , cmap = 'gray_r' , annot = True)\nplt.title('Data correlation')\nplt.show()","d445bdc3":"<h1 style=\"color: #111; font-family: 'Open Sans Condensed', sans-serif; font-size: 48px; font-weight: 700; line-height: 48px; margin: 0 0 24px; padding: 0 30px; text-align: center; text-transform: uppercase;\">A picture is worth a thousand words<\/h1>","0b9bad97":"<h1 style=\"color: #111; font-family: 'Open Sans Condensed', sans-serif; font-size: 64px; font-weight: 700; line-height: 64px; margin: 0 0 0; padding: 20px 30px; text-align: center; text-transform: uppercase;\">Mega Mart Sales Analysis <\/h1>","9fed1c7b":"<h1 style=\"color: #111; font-family: 'Open Sans Condensed', sans-serif; font-size: 48px; font-weight: 700; line-height: 48px; margin: 0 0 24px; padding: 0 30px; text-align: center; text-transform: uppercase;\">So No words.. Only Pictures<\/h1>","099c978f":"<p style=\" font-size: 26px; line-height: 36px; margin: 0 0 28px;\">I tried to make different models to predict sales, but the test results were unacceptable.Root mean squared error was 189213.0232\ud83d\ude22. Can someone explain me why? <\/p>"}}