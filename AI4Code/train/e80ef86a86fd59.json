{"cell_type":{"dcdbe08f":"code","cfff6a0b":"code","d0e54108":"code","fc93dc4f":"code","253a66b0":"code","a34b6331":"code","751a9d61":"markdown","ee790c61":"markdown","ea8db91c":"markdown","6132d1cb":"markdown","abd43ba2":"markdown","5212c07f":"markdown","9eb8e493":"markdown","8d876634":"markdown"},"source":{"dcdbe08f":"import os\nimport gc\nimport cv2\nimport csv\nimport json\nimport time\nimport copy\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom pathlib import Path\n\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\n\n%matplotlib inline\n%load_ext autoreload\n%autoreload 2\n","cfff6a0b":"for dirname, _, filenames in os.walk('\/kaggle\/input\/abstraction-and-reasoning-challenge\/'):\n    print(dirname)\n    \ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\nworking_path = Path('\/kaggle\/working\/')\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\n\nprint()\nprint(training_tasks[:5])\nprint(evaluation_tasks[:5])\nprint(test_tasks[:5])      \n    ","d0e54108":"EM_PATH = test_path\n\nem_task_files = sorted(os.listdir(EM_PATH))\nem_tasks = []\n\nfor task_file in em_task_files:\n    with open(str(EM_PATH \/ task_file), 'r') as f:\n        task = json.load(f)\n        em_tasks.append(task)\n\nEM_LEN = len(em_tasks)\nstr_tasks_prdn = []\nstr_tasks = []\nprdn = []\n\nprint(EM_LEN)\nprint(task.keys())\nprint(em_task_files[:5])\nprint()\nprint(em_tasks[0])\n","fc93dc4f":"for i in range(5):    \n    emi = em_tasks[i]\n    \n    contains_train = len(emi['train'])\n    contains_test = len(emi['test'])\n    \n    print(f'i = {i} >>> task contains: {contains_train} training pairs')\n    print(f'i = {i} >>> task contains: {contains_test} test pairs')\n    \n#   ######################################################################\n#   ######################################################################\n\n#   Data Augmentation - for mlp\n#   train_input & train_output\n\n    train_input0 = np.array(emi['train'][0]['input'])           \n    train_input0_fllr = np.fliplr(train_input0) # Flip array in the left\/right direction.\n    train_input0_flud = np.flipud(train_input0) # Flip array in the up\/down direction.\n    train_input0_r180 = np.rot90(train_input0, 2) # Rotation direction (180 deg.) is from the first towards the second axis.\n    matrix_train_input = np.vstack((train_input0, train_input0_fllr, train_input0_flud, train_input0_r180)) \n\n        \n    train_output0 = np.array(emi['train'][0]['output'])           \n    train_output0_fllr = np.fliplr(train_output0) # Flip array in the left\/right direction.\n    train_output0_flud = np.flipud(train_output0) # Flip array in the up\/down direction.\n    train_output0_r180 = np.rot90(train_output0, 2) # Rotation direction (180 deg.) is from the first towards the second axis.\n    matrix_train_output = np.vstack((train_output0, train_output0_fllr, train_output0_flud, train_output0_r180)) \n    \n                \n    for j in range(contains_train):\n        train_inputj = np.array(emi['train'][j]['input'])\n        train_outputj = np.array(emi['train'][j]['output'])\n        \n        if train_inputj.shape[1] == train_input0.shape[1]: \n            if train_outputj.shape[1] == train_output0.shape[1]:   \n                if j > 0:                    \n                    train_inputj_fllr = np.fliplr(train_inputj) \n                    train_inputj_flud = np.flipud(train_inputj) \n                    train_inputj_r180 = np.rot90(train_inputj, 2)\n                    matrix_train_input = np.vstack((matrix_train_input, train_inputj, train_inputj_fllr, \n                                                    train_inputj_flud, train_inputj_r180))    \n                    \n                    train_outputj_fllr = np.fliplr(train_outputj) \n                    train_outputj_flud = np.flipud(train_outputj) \n                    train_outputj_r180 = np.rot90(train_outputj, 2)\n                    matrix_train_output = np.vstack((matrix_train_output, train_outputj, train_outputj_fllr, \n                                                     train_outputj_flud, train_outputj_r180))    \n            \n    flattrainin = matrix_train_input.flatten()\n    flattrainout = matrix_train_output.flatten()\n    \n#   ######################################################################\n    \n#   test_input & test_output\n\n    test_input0 = np.array(emi['test'][0]['input'])    \n    test_input = test_input0\n    flattestin = test_input.flatten()\n         \n    # test_output0 = np.array(emi['test'][0]['output'])           \n    # test_output = test_output0\n    # flattestout = test_output.flatten()                \n            \n#   ######################################################################\n#   ######################################################################\n\n#   Categorical Data - for mlp\n\n    flatdata = np.hstack((flattrainin, flattrainout, flattestin)) \n    \n    lb = LabelBinarizer()\n    zipBinar = lb.fit(flatdata)\n    zipdata = zipBinar.transform(flatdata)\n            \n    dim = zipdata.shape[1]\n    df = set(flatdata)\n    \n    ziptrainin = zipBinar.transform(flattrainin)\n    flatziptrainin = ziptrainin.flatten()\n    \n    ziptrainout = zipBinar.transform(flattrainout)\n    flatziptrainout = ziptrainout.flatten()\n    \n    ziptestin = zipBinar.transform(flattestin)\n    flatziptestin = ziptestin.flatten()\n    \n    # ziptestout = zipBinar.transform(flattestout)\n    # flatziptestout = ziptestout.flatten()\n\n    print(f'i = {i} for mlp >>> ziptrainin.shape: {ziptrainin.shape}')\n    print(f'i = {i} for mlp >>> flatziptrainin.shape: {flatziptrainin.shape}')    \n    print(f'i = {i} for mlp >>> ziptrainout.shape: {ziptrainout.shape}')\n    print(f'i = {i} for mlp >>> flatziptrainout.shape: {flatziptrainout.shape}')    \n    print(f'i = {i} for mlp >>> ziptestin.shape: {ziptestin.shape}')\n    print(f'i = {i} for mlp >>> flatziptestin.shape: {flatziptestin.shape}')    \n    # print(f'i = {i} for mlp >>> ziptestout.shape: {ziptestout.shape}')\n    # print(f'i = {i} for mlp >>> flatziptestout.shape: {flatziptestout.shape}')\n    print(f'colors: {df}')\n    print()\n\n#   ######################################################################\n#   ######################################################################\n\n#   Data Augmentation - for cnn\n#   train_input & train_output\n       \n    train_input = []\n    ztrain_input = []\n    \n    flattrainin01 = train_input0.flatten()\n    ziptrainin01 = zipBinar.transform(flattrainin01) \n    trainin = np.reshape(ziptrainin01, (train_input0.shape[0], train_input0.shape[1], dim))\n    ztrainin = ziptrainin01.flatten()    \n    train_input += [trainin]\n    ztrain_input += [ztrainin]\n    \n    flattrainin02 = train_input0_fllr.flatten()\n    ziptrainin02 = zipBinar.transform(flattrainin02)\n    trainin = np.reshape(ziptrainin02, (train_input0.shape[0], train_input0.shape[1], dim)) \n    ztrainin = ziptrainin02.flatten()\n    train_input += [trainin]\n    ztrain_input += [ztrainin]\n    \n    flattrainin03 = train_input0_flud.flatten()\n    ziptrainin03 = zipBinar.transform(flattrainin03)\n    trainin = np.reshape(ziptrainin03, (train_input0.shape[0], train_input0.shape[1], dim))   \n    ztrainin = ziptrainin03.flatten()\n    train_input += [trainin]\n    ztrain_input += [ztrainin]\n       \n    flattrainin04 = train_input0_r180.flatten()\n    ziptrainin04 = zipBinar.transform(flattrainin04)\n    trainin = np.reshape(ziptrainin04, (train_input0.shape[0], train_input0.shape[1], dim)) \n    ztrainin = ziptrainin04.flatten()\n    train_input += [trainin]\n    ztrain_input += [ztrainin]\n    \n    \n    \n    train_output = []\n    ztrain_output = []\n    \n    flattrainout01 = train_output0.flatten()\n    ziptrainout01 = zipBinar.transform(flattrainout01) \n    trainout = np.reshape(ziptrainout01, (train_output0.shape[0], train_output0.shape[1], dim))\n    ztrainout = ziptrainout01.flatten()\n    # ztrainout =np.reshape(ziptrainout01, (-1, dim))     \n    train_output += [trainout]\n    ztrain_output += [ztrainout]\n    \n    flattrainout02 = train_output0_fllr.flatten()\n    ziptrainout02 = zipBinar.transform(flattrainout02)\n    trainout = np.reshape(ziptrainout02, (train_output0.shape[0], train_output0.shape[1], dim))\n    ztrainout = ziptrainout02.flatten()\n    # ztrainout =np.reshape(ziptrainout02, (-1, dim))\n    train_output += [trainout]\n    ztrain_output += [ztrainout]\n    \n    flattrainout03 = train_output0_flud.flatten()\n    ziptrainout03 = zipBinar.transform(flattrainout03)\n    trainout = np.reshape(ziptrainout03, (train_output0.shape[0], train_output0.shape[1], dim))\n    ztrainout = ziptrainout03.flatten()\n    # ztrainout =np.reshape(ziptrainout03, (-1, dim))\n    train_output += [trainout]\n    ztrain_output += [ztrainout]\n        \n    flattrainout04 = train_output0_r180.flatten()\n    ziptrainout04 = zipBinar.transform(flattrainout04)\n    trainout = np.reshape(ziptrainout04, (train_output0.shape[0], train_output0.shape[1], dim))\n    ztrainout = ziptrainout04.flatten()\n    # ztrainout =np.reshape(ziptrainout04, (-1, dim))\n    train_output += [trainout]\n    ztrain_output += [ztrainout]\n                \n          \n    for j in range(contains_train):        \n        train_inputj = np.array(emi['train'][j]['input']) \n        train_outputj = np.array(emi['train'][j]['output']) \n        \n        if train_inputj.shape == train_input0.shape: \n            if train_outputj.shape == train_output0.shape:\n                if j > 0:                    \n                    flattraininj1 = train_inputj.flatten()\n                    ziptraininj1 = zipBinar.transform(flattraininj1) \n                    trainin = np.reshape(ziptraininj1, (train_input0.shape[0], train_input0.shape[1], dim))  \n                    ztrainin = ziptraininj1.flatten()\n                    train_input += [trainin]\n                    ztrain_input += [ztrainin]\n    \n                    train_inputj_fllr = np.fliplr(train_inputj) \n                    flattraininj2 = train_inputj_fllr.flatten()\n                    ziptraininj2 = zipBinar.transform(flattraininj2)            \n                    trainin = np.reshape(ziptraininj2, (train_input0.shape[0], train_input0.shape[1], dim)) \n                    ztrainin = ziptraininj2.flatten()\n                    train_input += [trainin]\n                    ztrain_input += [ztrainin]\n    \n                    train_inputj_flud = np.flipud(train_inputj) \n                    flattraininj3 = train_inputj_flud.flatten()\n                    ziptraininj3 = zipBinar.transform(flattraininj3)\n                    trainin = np.reshape(ziptraininj3, (train_input0.shape[0], train_input0.shape[1], dim))\n                    ztrainin = ziptrainin03.flatten()\n                    train_input += [trainin]\n                    ztrain_input += [ztrainin]\n    \n                    train_inputj_r180 = np.rot90(train_inputj, 2)    \n                    flattraininj4 = train_inputj_r180.flatten()\n                    ziptraininj4 = zipBinar.transform(flattraininj4)\n                    trainin = np.reshape(ziptraininj4, (train_input0.shape[0], train_input0.shape[1], dim))\n                    ztrainin = ziptraininj4.flatten()\n                    train_input += [trainin]\n                    ztrain_input += [ztrainin]\n                    \n                        \n      \n                    flattrainoutj1 = train_outputj.flatten()\n                    ziptrainoutj1 = zipBinar.transform(flattrainoutj1) \n                    trainout = np.reshape(ziptrainoutj1, (train_output0.shape[0], train_output0.shape[1], dim))\n                    ztrainout = ziptrainoutj1.flatten()\n                    # ztrainout =np.reshape(ziptrainoutj1, (-1, dim))\n                    train_output += [trainout]\n                    ztrain_output += [ztrainout]\n    \n                    train_outputj_fllr = np.fliplr(train_outputj) \n                    flattrainoutj2 = train_outputj_fllr.flatten()\n                    ziptrainoutj2 = zipBinar.transform(flattrainoutj2)                  \n                    trainout = np.reshape(ziptrainoutj2, (train_output0.shape[0], train_output0.shape[1], dim)) \n                    ztrainout = ziptrainoutj2.flatten()\n                    # ztrainout =np.reshape(ziptrainoutj2, (-1, dim))\n                    train_output += [trainout]\n                    ztrain_output += [ztrainout]\n    \n                    train_outputj_flud = np.flipud(train_outputj) \n                    flattrainoutj3 = train_outputj_flud.flatten()\n                    ziptrainoutj3 = zipBinar.transform(flattrainoutj3)\n                    trainout = np.reshape(ziptrainoutj3, (train_output0.shape[0], train_output0.shape[1], dim))\n                    ztrainout = ziptrainoutj3.flatten()\n                    # ztrainout =np.reshape(ziptrainoutj3, (-1, dim))\n                    train_output += [trainout]\n                    ztrain_output += [ztrainout]\n    \n                    train_outputj_r180 = np.rot90(train_outputj, 2) \n                    flattrainoutj4 = train_outputj_r180.flatten()\n                    ziptrainoutj4 = zipBinar.transform(flattrainoutj4)\n                    trainout = np.reshape(ziptrainoutj4, (train_output0.shape[0], train_output0.shape[1], dim))\n                    ztrainout = ziptrainoutj4.flatten()\n                    # ztrainout =np.reshape(ziptrainoutj4, (-1, dim))\n                    train_output += [trainout]\n                    ztrain_output += [ztrainout]\n                    \n    ntrain_input=np.array(train_input)\n    nztrain_input=np.array(ztrain_input)\n    \n    ntrain_output=np.array(train_output)    \n    nztrain_output=np.array(ztrain_output)\n                          \n#   ######################################################################\n\n#   test_input & test_output  \n\n    flattestin = test_input.flatten()\n    ziptestin = zipBinar.transform(flattestin)\n    testin = np.reshape(ziptestin, (test_input.shape[0], test_input.shape[1], dim))    \n    ntestin = np.reshape(testin, (-1, test_input.shape[0], test_input.shape[1], dim))\n    \n    ztestin = ziptestin.flatten()    \n    nztestin = np.array(ztestin)\n    nztestin = ztestin[None, :]\n    \n    # flattestout = test_output.flatten()\n    # ziptestout = zipBinar.transform(flattestout)\n    # testout = np.reshape(ziptestout, (test_output.shape[0], test_output.shape[1], dim))\n    \n    # ntestout = testout.reshape(-1, dimin0, dimin1, dim)\n    \n#   ######################################################################    \n                    \n    print(f'i = {i} for cnn >>> len(train_input): {len(train_input)}')\n    print(f'i = {i} for cnn >>> ntrain_input.shape: {ntrain_input.shape}')\n    print()    \n    print(f'i = {i} for cnn >>> len(ztrain_input): {len(ztrain_input)}')\n    print(f'i = {i} for cnn >>> nztrain_input.shape: {nztrain_input.shape}')\n    print()      \n    print(f'i = {i} for cnn >>> len(train_output): {len(train_output)}')\n    print(f'i = {i} for cnn >>> ntrain_output.shape: {ntrain_output.shape}')    \n    print()        \n    print(f'i = {i} for cnn >>> len(ztrain_output): {len(ztrain_output)}')\n    print(f'i = {i} for cnn >>> nztrain_output.shape: {nztrain_output.shape}')    \n    print()    \n    print(f'i = {i} for cnn >>> testin.shape: {testin.shape}')\n    print(f'i = {i} for cnn >>> ntestin.shape: {ntestin.shape}')  \n    print()\n    print(f'i = {i} for cnn >>> ztestin.shape: {ztestin.shape}')\n    print(f'i = {i} for cnn >>> nztestin.shape: {nztestin.shape}')\n    print()\n    # print(f'i = {i} for cnn >>> testout.shape: {testout.shape}')\n    # print(f'i = {i} for cnn >>> ntestout.shape: {ntestout.shape}')    \n    # print() \n    print()\n    print()\n#   ######################################################################\n","253a66b0":"submission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')\ndisplay(submission.head())\n","a34b6331":"for i in range(EM_LEN):    \n    emi = em_tasks[i]\n    aaa = 777\n    \n    contains_train = len(emi['train'])\n    contains_test = len(emi['test'])\n    \n    print(f'i = {i} >>> task contains {contains_train} training pairs')\n    print(f'i = {i} >>> task contains {contains_test} test pairs')    \n    \n#   ########################################################################################################  \n#   ########################################################################################################  \n\n#   Data Augmentation\n#   train_input & train_output\n\n    train_input0 = np.array(emi['train'][0]['input'])           \n    train_input0_fllr = np.fliplr(train_input0) # Flip array in the left\/right direction.\n    train_input0_flud = np.flipud(train_input0) # Flip array in the up\/down direction.\n    train_input0_r180 = np.rot90(train_input0, 2) # Rotation direction (180 deg.) is from the first towards the second axis.\n    train_input0_r270 = np.rot90(train_input0, 3) # Rotation direction (270 deg.) is from the first towards the second axis.\n    train_input0_r90 = np.rot90(train_input0, 1) # Rotation direction (90 deg.) is from the first towards the second axis.\n    \n    flattrainin0 = train_input0.flatten()\n    flattrainin0_fllr = train_input0_fllr.flatten() \n    flattrainin0_flud = train_input0_flud.flatten() \n    flattrainin0_r180 = train_input0_r180.flatten()\n    flattrainin0_r270 = train_input0_r270.flatten()\n    flattrainin0_r90 = train_input0_r90.flatten()    \n    flattraininx = flattrainin0\n    flattraininxx =np.hstack((flattrainin0, flattrainin0_fllr, flattrainin0_flud, flattrainin0_r180))\n    flattrainin = np.hstack((flattrainin0, flattrainin0_fllr, flattrainin0_flud, flattrainin0_r180, \n                             flattrainin0_r270, flattrainin0_r90))\n    \n    train_output0 = np.array(emi['train'][0]['output'])           \n    train_output0_fllr = np.fliplr(train_output0) # Flip array in the left\/right direction.\n    train_output0_flud = np.flipud(train_output0) # Flip array in the up\/down direction.\n    train_output0_r180 = np.rot90(train_output0, 2) # Rotation direction (180 deg.) is from the first towards the second axis.\n    train_output0_r270 = np.rot90(train_output0, 3) # Rotation direction (270 deg.) is from the first towards the second axis.\n    train_output0_r90 = np.rot90(train_output0, 1) # Rotation direction (90 deg.) is from the first towards the second axis.\n    \n    flattrainout0 = train_output0.flatten()\n    flattrainout0_fllr = train_output0_fllr.flatten() \n    flattrainout0_flud = train_output0_flud.flatten() \n    flattrainout0_r180 = train_output0_r180.flatten()\n    flattrainout0_r270 = train_output0_r270.flatten()\n    flattrainout0_r90 = train_output0_r90.flatten() \n    flattrainoutx = flattrainout0\n    flattrainoutxx = np.hstack((flattrainout0, flattrainout0_fllr, flattrainout0_flud, flattrainout0_r180))    \n    flattrainout = np.hstack((flattrainout0, flattrainout0_fllr, flattrainout0_flud, flattrainout0_r180, \n                              flattrainout0_r270, flattrainout0_r90))\n                \n    for j in range(contains_train):                                 \n        if j > 0:\n            train_inputj = np.array(emi['train'][j]['input']) \n            train_inputj_fllr = np.fliplr(train_inputj) \n            train_inputj_flud = np.flipud(train_inputj) \n            train_inputj_r180 = np.rot90(train_inputj, 2)\n            train_inputj_r270 = np.rot90(train_inputj, 3)\n            train_inputj_r90 = np.rot90(train_inputj, 1)\n            \n            flattraininj = train_inputj.flatten()\n            flattraininj_fllr = train_inputj_fllr.flatten() \n            flattraininj_flud = train_inputj_flud.flatten() \n            flattraininj_r180 = train_inputj_r180.flatten()\n            flattraininj_r270 = train_inputj_r270.flatten()\n            flattraininj_r90 = train_inputj_r90.flatten()            \n            flattraininx = np.hstack((flattraininx, flattraininj))\n            flattraininxx = np.hstack((flattraininxx, flattraininj, flattraininj_fllr, flattraininj_flud, flattraininj_r180))            \n            flattrainin = np.hstack((flattrainin, flattraininj, flattraininj_fllr, flattraininj_flud, flattraininj_r180, \n                                     flattraininj_r270, flattraininj_r90))          \n            \n            train_outputj = np.array(emi['train'][j]['output']) \n            train_outputj_fllr = np.fliplr(train_outputj) \n            train_outputj_flud = np.flipud(train_outputj) \n            train_outputj_r180 = np.rot90(train_outputj, 2)\n            train_outputj_r270 = np.rot90(train_outputj, 3)\n            train_outputj_r90 = np.rot90(train_outputj, 1)\n            \n            flattrainoutj = train_outputj.flatten()\n            flattrainoutj_fllr = train_outputj_fllr.flatten() \n            flattrainoutj_flud = train_outputj_flud.flatten() \n            flattrainoutj_r180 = train_outputj_r180.flatten()\n            flattrainoutj_r270 = train_outputj_r270.flatten()\n            flattrainoutj_r90 = train_outputj_r90.flatten() \n            flattrainoutx = np.hstack((flattrainoutx, flattrainoutj))\n            flattrainoutxx = np.hstack((flattrainoutxx, flattrainoutj, flattrainoutj_fllr, flattrainoutj_flud, flattrainoutj_r180))       \n            flattrainout = np.hstack((flattrainout, flattrainoutj, flattrainoutj_fllr, flattrainoutj_flud, flattrainoutj_r180, \n                                      flattrainoutj_r270, flattrainoutj_r90))\n\n#   ########################################################################################################     \n    \n#   test_input & test_output\n                        \n    test_input0 = np.array(emi['test'][0]['input'])    \n    test_input = test_input0\n    flattestin = test_input.flatten()\n    \n    # test_output0 = np.array(emi['test'][0]['output'])           \n    # test_output = test_output0\n    # flattestout = test_output.flatten()                \n            \n#   ######################################################################################################## \n#   ######################################################################################################## \n\n#   Categorical Data\n\n    flatdata = np.hstack((flattrainin, flattrainout, flattestin))\n    \n    lb = LabelBinarizer()\n    zipBinar = lb.fit(flatdata)\n    zipdata = zipBinar.transform(flatdata)\n    \n    dim = zipdata.shape[1]\n    df = set(flatdata)\n        \n    ziptraininx = zipBinar.transform(flattraininx)\n    ziptrainoutx = zipBinar.transform(flattrainoutx)\n    \n    ziptraininxx = zipBinar.transform(flattraininxx)\n    ziptrainoutxx = zipBinar.transform(flattrainoutxx)\n    \n    ziptrainin = zipBinar.transform(flattrainin)\n    ziptrainout = zipBinar.transform(flattrainout)\n    \n    ziptestin = zipBinar.transform(flattestin)\n    # ziptestout = zipBinar.transform(flattestout)\n    \n    \n    print(f'i = {i} >>> ziptraininx.shape: {ziptraininx.shape} ... ziptrainoutx.shape: {ziptrainoutx.shape}')\n    print(f'i = {i} >>> ziptraininxx.shape: {ziptraininxx.shape} ... ziptrainoutxx.shape: {ziptrainoutxx.shape}')\n    print(f'i = {i} >>> ziptrainin.shape: {ziptrainin.shape} ... ziptrainout.shape: {ziptrainout.shape}')\n    print(f'i = {i} >>> ziptestin.shape: {ziptestin.shape}')\n    print(f'colors: {df}')\n    print()\n    \n#   ######################################################################################################## \n#   ######################################################################################################## \n\n#   Limitations and Exceptions\n\n    dimtrainin = flattrainin.shape[0]\n    dimtrainout = flattrainout.shape[0]\n    \n    if dimtrainin < dimtrainout:\n        aaa = 0\n        \n    if dimtrainin > 1.5 * dimtrainout:\n        aaa = 0\n        \n    if np.sum(train_input0) == 0:\n        aaa = 0\n            \n    dimin0 = test_input.shape[0]\n    dimin1 = test_input.shape[1]\n\n    dim1 = dim * dimin1\n    dim2 = dim * dimin0 * dimin1\n    dim3 = dimin0 * dimin1\n                 \n#   ########################################################################################################\n#   ######################################################################################################## \n\n#   K-Nearest Neighbor classification >>> For predicted-1\n\n    neigh1 = KNeighborsClassifier(n_neighbors=3)\n    \n    if aaa == 777:\n        neigh1.fit(ziptrainin, ziptrainout)  \n        pred1_classes = neigh1.predict(ziptestin)\n        pred1_classes = zipBinar.inverse_transform(pred1_classes) \n\n        if test_input0.shape == train_input0.shape :\n            pr1 = pred1_classes.reshape(-1, train_output0.shape[1])\n            \n        if test_input0.shape != train_input0.shape :\n            pr1 = pred1_classes.reshape(-1, test_input0.shape[1])\n \n#   ########################################################################################################\n\n#   K-Nearest Neighbor classification >>> For predicted-2\n\n    neigh2 = KNeighborsClassifier(n_neighbors=dim)\n    \n    if aaa == 777:\n        neigh2.fit(ziptraininxx, ziptrainoutxx)  \n        pred2_classes = neigh2.predict(ziptestin)\n        pred2_classes = zipBinar.inverse_transform(pred2_classes) \n\n        if test_input0.shape == train_input0.shape :\n            pr2 = pred2_classes.reshape(-1, train_output0.shape[1])\n            \n        if test_input0.shape != train_input0.shape :\n            pr2 = pred2_classes.reshape(-1, test_input0.shape[1])\n \n#   ########################################################################################################  \n\n#   Sequential model >>> For predicted-3\n\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(dim2, activation='relu', input_dim=dim))\n    model.add(layers.Dense(dim1, activation='relu'))\n    model.add(layers.Dense(dim, activation='softmax'))    \n    model.summary()\n\n    if aaa == 777:\n        model.compile(loss='binary_crossentropy',\n                      optimizer= 'adam',\n                      metrics=['accuracy'])\n    \n        model.fit(ziptrainin, ziptrainout,\n                  epochs=5,\n                  batch_size=dim, verbose=0)    \n        \n        predicted_classes = model.predict_classes(ziptestin)\n    \n        if test_input0.shape == train_input0.shape :\n            pr3 = predicted_classes.reshape(-1, train_output0.shape[1])\n            \n        if test_input0.shape != train_input0.shape :\n            pr3 = predicted_classes.reshape(-1, test_input0.shape[1])\n       \n#   ########################################################################################################  \n\n    if aaa != 777:    \n        if contains_train == 2:            \n            pr1 = train_output0\n            pr2 = np.array(emi['train'][1]['output']) \n            pr3 = test_input0\n            \n        if contains_train != 2:            \n            pr1 = train_output0\n            pr2 = np.array(emi['train'][1]['output'])\n            pr3 = np.array(emi['train'][2]['output'])    \n            \n#   ######################################################################################################## \n\n    if train_output0.shape == (1,1): \n        if dim > 4:\n            dflist = list(df)             \n            pr1 = np.array([[dflist[2]]])\n            pr2 = np.array([[dflist[3]]])            \n            pr3 = np.array([[dflist[4]]]) \n\n#   ########################################################################################################\n#   ######################################################################################################## \n\n    def plot_task(task):\n\n        cmap = colors.ListedColormap(\n            ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n             '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n        norm = colors.Normalize(vmin=0, vmax=9)\n        fig, axs = plt.subplots(1, 8, figsize=(15,15))\n        axs[0].imshow(emi['train'][0]['input'], cmap=cmap, norm=norm)\n        axs[0].axis('off')\n        axs[0].set_title('Train Input')\n        axs[1].imshow(emi['train'][0]['output'], cmap=cmap, norm=norm)\n        axs[1].axis('off')\n        axs[1].set_title('Train Output')    \n        axs[2].imshow(emi['train'][1]['input'], cmap=cmap, norm=norm)\n        axs[2].axis('off')\n        axs[2].set_title('Train Input')\n        axs[3].imshow(emi['train'][1]['output'], cmap=cmap, norm=norm)\n        axs[3].axis('off')\n        axs[3].set_title('Train Output')   \n        axs[4].imshow(emi['test'][0]['input'], cmap=cmap, norm=norm)\n        axs[4].axis('off')\n        axs[4].set_title('Test Input')\n        axs[5].imshow(pr1, cmap=cmap, norm=norm)\n        axs[5].axis('off')\n        axs[5].set_title('predicted-1')        \n        axs[6].imshow(pr2, cmap=cmap, norm=norm)\n        axs[6].axis('off')\n        axs[6].set_title('predicted-2')                \n        axs[7].imshow(pr3, cmap=cmap, norm=norm)\n        axs[7].axis('off')\n        axs[7].set_title('predicted-3')                \n        plt.tight_layout()\n        plt.show()\n    \n    plot_task(task)\n    \n#   ########################################################################################################\n#   ######################################################################################################## \n\n    def flattener(pred):\n        str_pred = str([row for row in pred])\n        str_pred = str_pred.replace(', ', '')\n        str_pred = str_pred.replace('[[', '|')\n        str_pred = str_pred.replace('][', '|')\n        str_pred = str_pred.replace(']]', '|')\n        return str_pred    \n        \n    prd1 = pr1.tolist()\n    prd1 = flattener(prd1)\n\n    prd2 = pr2.tolist()\n    prd2 = flattener(prd2)\n\n    prd3 = pr3.tolist()\n    prd3 = flattener(prd3)\n    \n    prd = prd1 + ' ' + prd2 + ' ' + prd3 + ' '\n    prdn.append(prd)    \n        \n    s_tasks = test_tasks[i]    \n    s_tasks = s_tasks.replace('.json', '_0')\n    str_tasks.append(s_tasks)\n\n#   ######################################################################################################## \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) \n\n    for output_id in submission.index:\n        if s_tasks == output_id :         \n            task_id = output_id.split('_')[0]\n            f = str(test_path \/ str(task_id + '.json'))\n            with open(f, 'r') as read_file:\n                task = json.load(read_file)\n            \n            submission.loc[output_id, 'output'] = prd   \n                        \n            submission.to_csv(working_path \/ 'submission.csv')\n            \n            submission = pd.read_csv(working_path \/ 'submission.csv', index_col= 'output_id')\n\n#   ######################################################################################################## \n#   ######################################################################################################## \n\nsubmission.to_csv('submission.csv')\n","751a9d61":"## Binary Images - For Convolutional Neural Network","ee790c61":"<div>\n    <h1 align=\"center\">\"Abstraction and Reasoning Challenge\"<\/h1>\n    <h1 align=\"center\">Binary Images and Data Augmentation<\/h1>\n<\/div>","ea8db91c":"### The data for this interesting challenge has two important features:\n\n### First of all, the total number of images in this challenge is ten, and the number of colors in each task is even less than ten. So all the image pixels that need to be guessed (test output) will be selected from a small set (less than ten number). \n\n### The second feature is that each task in the test set is a unique question. So to find the answer to each task(test output), the images of the same task are of primary importance. It should be noticed that many of the training and evaluation sets are related to other topics, and these types of irrelevant and dissimilar tasks will not help to find the answer in practice.\n\n### To make the most of the first feature, we first calculated the number of all colors in a task (defined as 'dim') and then converted all images of that task to new images binary(with the number of 'dim' channels). For the second feature, using Data Augmentation, we created more pairs (input, output) for each task in the test set to allow a more comprehensive review. In other words (in mathematical terms) we increased the number of practicable normal equations.\n\n### After completing preliminaries, we used basic methods such as K-Nearest Neighbor classification or a few simple Layers-Dense tests, to show that even without the use of the training set or the evaluation set and only with applying the available data in the test set, there is the possibility of minimal training for some simple questions, which is certainly insufficient.\n\n### Unfortunately, we informed about this interesting challenge late, but to get better results in the next few days, we will try to use Keras Functional API to combine a strong Convolutional Neural Network with a few simple Layers-Dense. The final step is to identify and categorize the tasks in the training set and evaluation set to add only akin tasks to each task in the test set.","6132d1cb":"## Predict - For each task\n> ### predicted-1 >>> K-Nearest Neighbor classification\n> ### predicted-2 >>> K-Nearest Neighbor classification\n> ### predicted-3 >>> Sequential model","abd43ba2":"## Binary Images and Data Augmentation","5212c07f":"<div class=\"alert alert-success\">  \n<\/div>","9eb8e493":"<div class=\"alert alert-success\">  \n<\/div>","8d876634":"## For now, we're just using test_path"}}