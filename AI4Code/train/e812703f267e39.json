{"cell_type":{"c16e81da":"code","5b3e5867":"code","0409d153":"code","f96caeda":"code","485a2e10":"code","3e1bc9bc":"code","857acc20":"code","354d1475":"code","21cecdbd":"code","21d05b4f":"code","f6afed82":"code","40e707ab":"code","d299a739":"code","f2d6e3a3":"code","47d60455":"code","5e39673e":"code","c0da9f3e":"code","ab1d3dd9":"code","a9068216":"code","1fcb9e2d":"code","8ee3a749":"code","03fdc3e1":"code","57f51605":"code","ce4d7314":"code","df42010f":"code","294e7e47":"code","dea346bb":"code","a9ecc76e":"code","434b2220":"code","d75d9483":"code","5c24b950":"code","85189264":"code","0154abe5":"code","13235d0b":"code","5f64f0a7":"code","7a2d75fc":"code","67aa5159":"code","db6f2346":"code","ebe5c185":"markdown","090e4fd5":"markdown","959dd03c":"markdown","3553541d":"markdown","7e982759":"markdown"},"source":{"c16e81da":"#essential library\nimport numpy as np\nimport pandas as pd \n\n# for eda & visualizations\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas_profiling import ProfileReport\nsns.set(style='white', context='notebook', palette='deep')\n\n#algoritms\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler\n#evaluation\n\nfrom sklearn.metrics import accuracy_score\n\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","5b3e5867":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nPAS = list(test_df.PassengerId)","0409d153":"train_df.info()","f96caeda":"train_df.describe().T","485a2e10":"train_df.head(10)","3e1bc9bc":"train_df.info()\nprint('_'*40)\ntest_df.info()","857acc20":"report = ProfileReport(test_df)\nreport","354d1475":"sns.pairplot(train_df,hue='Survived',palette='Paired');","21cecdbd":"sns.heatmap(train_df.corr(),annot=True, cmap=\"YlGnBu\", linewidths=1)","21d05b4f":"# some information about SEX\nsns.countplot(x = train_df['Sex'],hue=train_df['Survived'])","f6afed82":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index= False).mean().sort_values(by='Survived', ascending = False)","40e707ab":"sns.countplot(x= train_df['Parch'],hue=train_df['Survived'])","d299a739":"sns.countplot(x= train_df['SibSp'],hue=train_df['Survived'])","f2d6e3a3":"# Explore Age distibution \ng = sns.kdeplot(train_df[\"Age\"][(train_df[\"Survived\"] == 0) & (train_df[\"Age\"].notnull())], color=\"Red\", shade = True)\ng = sns.kdeplot(train_df[\"Age\"][(train_df[\"Survived\"] == 1) & (train_df[\"Age\"].notnull())], ax =g, color=\"Blue\", shade= True)\ng.set_xlabel(\"Age\")\ng.set_ylabel(\"Frequency\")\ng = g.legend([\"Not Survived\",\"Survived\"])","47d60455":"train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","5e39673e":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Embarked',data=train_df,palette='rainbow')","c0da9f3e":"train_df['Cabin'] = train_df['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'Z')\ntest_df['Cabin'] = test_df['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'Z')","ab1d3dd9":"print(train_df['Cabin'].value_counts(),\"\\n--------\\n\",test_df['Cabin'].value_counts())","a9068216":"train_df.loc[339, 'Cabin'] = 'A'\ntrain_df['Cabin'].unique()","1fcb9e2d":"train_df[train_df['Cabin']=='T'].index.values","8ee3a749":"train_df['Cabin'] = train_df['Cabin'].replace(['A', 'B', 'C'], 'ABC')\ntrain_df['Cabin'] = train_df['Cabin'].replace(['D', 'E'], 'DE')\ntrain_df['Cabin'] = train_df['Cabin'].replace(['F', 'G'], 'FG')\n\ntest_df['Cabin'] = test_df['Cabin'].replace(['A', 'B', 'C'], 'ABC')\ntest_df['Cabin'] = test_df['Cabin'].replace(['D', 'E'], 'DE')\ntest_df['Cabin'] = test_df['Cabin'].replace(['F', 'G'], 'FG')\ntrain_df[\"Cabin\"].unique()\n","03fdc3e1":"train_df.head()","57f51605":"train_df.drop([\"Ticket\", \"Name\", \"PassengerId\"], axis=1, inplace=True)\ntest_df.drop([\"Ticket\", \"Name\",'PassengerId'], axis=1, inplace=True)\n\ntrain_df[\"Age\"].fillna(train_df[\"Age\"].median(skipna=True), inplace=True)\ntest_df[\"Age\"].fillna(test_df[\"Age\"].median(skipna=True), inplace=True)\n\n\ntest_df[\"Fare\"].fillna(test_df[\"Fare\"].median(skipna=True), inplace=True)\n\ntrain_df[\"Embarked\"].fillna('S', inplace=True) #mode\ntest_df[\"Embarked\"].fillna('S', inplace=True)","ce4d7314":"train_df.groupby(\"Embarked\").mean()","df42010f":"train_df.groupby(\"Cabin\").mean()","294e7e47":"gender = {'male': 0, 'female': 1}\ntrain_df.Sex = [gender[item] for item in train_df.Sex] \ntest_df.Sex = [gender[item] for item in test_df.Sex] \n\nembarked = {'S': 0, 'Q':1, 'C': 2}\ntrain_df.Embarked = [embarked[item] for item in train_df.Embarked] \ntest_df.Embarked = [embarked[item] for item in test_df.Embarked] \n\nCabins = {'Z': 0, 'FG':1, \"ABC\":2, 'DE': 3}\ntrain_df.Cabin = [Cabins[item] for item in train_df.Cabin] \ntest_df.Cabin = [Cabins[item] for item in test_df.Cabin] ","dea346bb":"mask = np.triu(np.ones_like(train_df.corr(), dtype=bool))\nfig, ax = plt.subplots(figsize=(16,10),dpi=80, facecolor='w', edgecolor='k')\nsns.heatmap(train_df.corr(), mask=mask, cmap=\"YlGnBu\", vmax=.3, center=0,annot = True,\n            square=True)\n","a9ecc76e":"expected_values = train_df[\"Survived\"]\ntrain_df.drop(\"Survived\", axis=1, inplace=True)\ntrain_df.drop(\"Cabin\", axis=1, inplace=True)\ntest_df.drop(\"Cabin\", axis=1, inplace=True)\n\n","434b2220":"minmax = MinMaxScaler()\nminmax.fit(train_df)\ntrain_data = minmax.transform(train_df)\ntest_data = minmax.transform(test_df)","d75d9483":"X = train_df\ny = expected_values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)","5c24b950":"model = RandomForestClassifier(criterion='gini',\n                                           n_estimators=1500,\n                                           max_depth=7,\n                                           min_samples_split=6,\n                                           min_samples_leaf=6,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1,\n                                           verbose=1) \n\nmodel.fit(X_train, y_train)\n\ny_pred_train = model.predict(X_train)\ny_pred_test = model.predict(X_test)","85189264":"print(\"Training accuracy: \", accuracy_score(y_train, y_pred_train))\nprint(\"Testing accuracy: \", accuracy_score(y_test, y_pred_test))","0154abe5":"from sklearn.ensemble import GradientBoostingClassifier\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\ny_pred_train = gbk.predict(X_train)\ny_pred_test = gbk.predict(X_test)","13235d0b":"print(\"Training accuracy: \", accuracy_score(y_train, y_pred_train))\nprint(\"Testing accuracy: \", accuracy_score(y_test, y_pred_test))","5f64f0a7":"rf = RandomForestClassifier(n_estimators=1000)\nrf.fit(X_train,y_train)\ny_pred_train = rf.predict(X_train)\ny_pred_test = rf.predict(X_test)","7a2d75fc":"print(\"Training accuracy: \", accuracy_score(y_train, y_pred_train))\nprint(\"Testing accuracy: \", accuracy_score(y_test, y_pred_test))","67aa5159":"output = pd.DataFrame()\noutput[\"PassengerId\"] = PAS\noutput[\"Survived\"] = gbk.predict(test_df)\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","db6f2346":"output","ebe5c185":"# Preparing Data to Create Model","090e4fd5":"# Create model","959dd03c":"# Scaling Data with Minmax scaler","3553541d":"# import data","7e982759":"# EDA"}}