{"cell_type":{"c47c9989":"code","977dfbdd":"code","9a24a809":"code","a18386ec":"code","502afa2f":"code","3c749483":"code","d85c59f2":"code","30fc2103":"code","82f2f0e6":"code","ddfaf866":"code","52dfa02b":"code","d0b258e7":"code","437c78c9":"code","57fb7d51":"code","d169be7f":"code","7b5432cd":"code","21ac1cd4":"code","adf001c6":"code","66599992":"code","425eef1f":"code","cb06d51b":"markdown","287bc70f":"markdown","a8cd9e3d":"markdown","f16f8f73":"markdown","2fb4bc96":"markdown","02cecb63":"markdown","0129abfd":"markdown","42c94047":"markdown","58495113":"markdown"},"source":{"c47c9989":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","977dfbdd":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","9a24a809":"df.info()\ndf.describe()","a18386ec":"df.head()","502afa2f":"y = df.sex.values\nx = df.drop([\"sex\"], axis=1)","3c749483":"y\n","d85c59f2":"x.head()","30fc2103":"x = (x-np.min(x))\/(np.max(x)-np.min(x)).values","82f2f0e6":"x.head()","ddfaf866":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","52dfa02b":"x_train.head()\nx_train.shape","d0b258e7":"def weight_bias(dimension):            # our dimension is 13\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n# sigmoid function is  1\/(1+e^(-x))\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head","437c78c9":"sigmoid(0)","57fb7d51":"# i will write forward and backward propagation\n\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward\n    \n    z = np.dot(w.T,x_train)+b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]   \n    # backward\n    \n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","d169be7f":"# updating\ndef update(w,b,learning_rate,iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    #learning\n    \n    for i in range(iteration):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivative_bias\"]\n        if i%10 == 0: \n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # visualization\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, cost_list, gradients\n#parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate = 0.009,number_of_iterarion = 200)","7b5432cd":"# prediction\n\ndef prediction(w,b,x_test):\n    #parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate = 0.009,number_of_iterarion = 200)\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(x_test.shape[1]):\n        if z[0,i]<= 0.5:\n              Y_prediction[0,i] = 0\n        else:\n              Y_prediction[0,i] = 1\n            \n    return Y_prediction","21ac1cd4":"# finally\n\ndef logical_regression(x_train,x_test,y_train,y_test, learning_rate,iteration):\n    dimension =x_train.shape[0]\n    w,b = weight_bias(dimension)\n    \n    parameters, cost_list, gradient = update(w,b,learning_rate,iteration)\n    \n    y_prediction = prediction(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction - y_test)) * 100))","adf001c6":"logical_regression(x_train, x_test, y_train, y_test, learning_rate = 1, iteration = 150)","66599992":"logical_regression(x_train, x_test, y_train, y_test, learning_rate = 0.1, iteration = 150)","425eef1f":"logical_regression(x_train, x_test, y_train, y_test, learning_rate = 0.01, iteration = 150)","cb06d51b":"let's check raw data","287bc70f":"# My First Deep Learning Sheet","a8cd9e3d":"##### we make normalize","f16f8f73":"Let's try it","2fb4bc96":"### I will split data for x_training,x_testing and y_training,y_testing","02cecb63":"First we need initialize weight,bias and sigmoid function","0129abfd":"#### As you can see my labels are male and female , first i need to split my features and label then encode ","42c94047":"Let's check  our data ","58495113":"### import data"}}