{"cell_type":{"c3688273":"code","2ed99643":"code","7c33b9f1":"code","75a52fd3":"code","15a01875":"code","f474879d":"code","54268ead":"code","68f746e5":"code","1b80a1c2":"code","d21209d9":"code","8f5bd95d":"code","439308f5":"code","007f7e86":"code","5e2e237d":"code","907465bf":"code","37915271":"code","0d9a0b81":"code","56e7d2c6":"code","0ed87a00":"code","3949c5f9":"markdown","4929c855":"markdown","c941d8aa":"markdown"},"source":{"c3688273":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2ed99643":"import networkx as nx\nimport pandas as pd\nimport numpy as np\nimport random\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","7c33b9f1":"df = pd.read_csv('..\/input\/seealsology-life-insurance-dataset\/seealsology-data.tsv', sep = \"\\t\")\ndf.head()","75a52fd3":"G = nx.from_pandas_edgelist(df, \"source\", \"target\", edge_attr=True, create_using=nx.Graph())","15a01875":"len(G)","f474879d":"def get_randomwalk(node, path_length):\n    \n    random_walk = [node]\n    \n    for i in range(path_length-1):\n        temp = list(G.neighbors(node))\n        temp = list(set(temp) - set(random_walk))    \n        if len(temp) == 0:\n            break\n\n        random_node = random.choice(temp)\n        random_walk.append(random_node)\n        node = random_node\n        \n    return random_walk","54268ead":"get_randomwalk('pension', 10)","68f746e5":"# get list of all nodes from the graph\nall_nodes = list(G.nodes())\n\nrandom_walks = []\nfor n in tqdm(all_nodes):\n    for i in range(5):\n        random_walks.append(get_randomwalk(n,10))\n        \n# count of sequences\nlen(random_walks)","1b80a1c2":"from gensim.models import Word2Vec\n\nimport warnings\nwarnings.filterwarnings('ignore')","d21209d9":"# train skip-gram (word2vec) model\nmodel = Word2Vec(window = 4, sg = 1, hs = 0,\n                 negative = 10, # for negative sampling\n                 alpha=0.03, min_alpha=0.0007,\n                 seed = 14)\n\nmodel.build_vocab(random_walks, progress_per=2)\n\nmodel.train(random_walks, total_examples = model.corpus_count, epochs=20, report_delay=1)","8f5bd95d":"model.similar_by_word('critical illness insurance')","439308f5":"G_new =nx.from_pandas_edgelist(df[df['source']==\"critical illness insurance\"],  \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())","007f7e86":"plt.figure(figsize=(12,12))\npos = nx.spring_layout(G_new, k = 0.1) # k regulates the distance between nodes\nnx.draw(G_new, with_labels=True, node_color='skyblue', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos)\nplt.show()","5e2e237d":"G_new =nx.from_pandas_edgelist(df[df['source']==\"life insurance\"],  \"target\", \n                          edge_attr=True, create_using=nx.MultiDiGraph())","907465bf":"plt.figure(figsize=(12,12))\npos = nx.spring_layout(G_new, k = 0.1) # k regulates the distance between nodes\nnx.draw(G_new, with_labels=True, node_color='skyblue', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos)\nplt.show()","37915271":"X = model[model.wv.vocab]","0d9a0b81":"pca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n# create a scatter plot of the projection\nplt.figure(figsize=(15,15))\nplt.scatter(result[:, 0], result[:, 1])\nwords = list(model.wv.vocab)\nfor i, word in enumerate(words):\n    plt.annotate(word, xy=(result[i, 0], result[i, 1]))\nplt.show()","56e7d2c6":"X = model[model.wv.index2entity[:50]]","0ed87a00":"pca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n# create a scatter plot of the projection\nplt.figure(figsize=(15,15))\nplt.scatter(result[:, 0], result[:, 1])\nwords = list(model.wv.index2entity[:50])\nfor i, word in enumerate(words):\n    plt.annotate(word, xy=(result[i, 0], result[i, 1]))\nplt.show()","3949c5f9":"# Skip Gram Model on Random Walk","4929c855":"## Random Walk","c941d8aa":"This kernel is inspired by the article:\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2019\/11\/graph-feature-extraction-deepwalk\/\n"}}