{"cell_type":{"44ce790e":"code","ba74045c":"code","e2045390":"code","fcd39042":"code","69d2b03b":"code","f8948d57":"code","a8c0a366":"code","e2ca9fba":"code","a3777e05":"code","08254c07":"code","d09d3710":"code","4ceb175f":"code","62ddbf80":"code","39b9702d":"code","b7457f81":"code","39b37cf6":"code","b23abd35":"code","efd16a81":"code","00fbc172":"code","370bd472":"code","899dd9cd":"code","4c12d427":"code","61c75740":"code","0b649d69":"code","72324a3c":"code","df8ee085":"code","9b1e8118":"code","420f1118":"code","79455f1a":"code","b75db8da":"code","f586e0ee":"markdown","150a913b":"markdown","c2b8e1dd":"markdown","4a7b4b92":"markdown","21c0758b":"markdown","bcbf0e6b":"markdown","7cc3f187":"markdown","5ce80ae6":"markdown","d0b92ba7":"markdown","76c38a0b":"markdown","59486df0":"markdown","050b9aae":"markdown","c7d294fa":"markdown","6225ffab":"markdown","f971f7b0":"markdown","d2a558e8":"markdown","d14a7dd5":"markdown","e057e772":"markdown","0b04b15e":"markdown","d06b6eab":"markdown","63b1df31":"markdown","439e8b2f":"markdown","ad32ecf2":"markdown","50cb2c1b":"markdown","934bcac4":"markdown","5342ff34":"markdown","25d3a5b0":"markdown","4c69c4cf":"markdown","5f291b19":"markdown","5133206a":"markdown","66757a67":"markdown","4ab6a8cf":"markdown","fec14047":"markdown","8ceb2245":"markdown"},"source":{"44ce790e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","ba74045c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e2045390":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.head(10)","fcd39042":"df.info()","69d2b03b":"df['total'] = 1\ndf_survived = df.groupby(['Survived', 'total'], as_index = False)['total'].count()\ndf_survived['total'] = round(100 * df_survived['total'] \/ df.shape[0], 1)\ndf_survived","f8948d57":"df_sex = df.groupby(['Sex', 'total'], as_index = False)['total'].count()\ndf_sex['total'] = round(100 * df_sex['total'] \/ df.shape[0], 1)\ndf_sex","a8c0a366":"df_class = df.groupby(['Pclass', 'total'], as_index = False)['total'].count()\ndf_class['total'] = round(100 * df_class['total'] \/ df.shape[0], 1)\ndf_class","e2ca9fba":"fig, axd = plt.subplot_mosaic([['upper left', 'right'],\n                               ['lower left', 'right']],  figsize=(9, 7))\n\nsns.barplot(data = df_survived, \n            x = 'Survived', \n            y = 'total', \n            palette=\"mako\", \n            ax = axd['upper left'])\naxd['upper left'].set_ylabel('Total passengers  (%)')\naxd['upper left'].set_xticklabels(['No', 'Yes'])\n\nsns.barplot(data = df_sex, \n            x = 'Sex', \n            y = 'total', \n            palette=\"mako\", \n            ax = axd['lower left'])\naxd['lower left'].set_ylabel('Total passengers  (%)')\naxd['lower left'].set_xticklabels(['Female', 'Male'])\n\nsns.barplot(data = df_class, \n            x = 'Pclass', \n            y = 'total', \n            palette=\"mako\", \n            ax = axd['right'])\naxd['right'].set_ylabel('Total passengers  (%)')\naxd['right'].set_xlabel('Ticket class')\naxd['right'].set_xticklabels(['1st', '2nd', '3nd'])","a3777e05":"male = df.loc[df.Sex == 'male']['Survived']\nmale_percent = round(100 * male.sum() \/ len(male), 1)\nprint('% of men that survived:', male_percent)","08254c07":"women = df.loc[df.Sex == 'female']['Survived']\nwomen_percent = round(100 * women.sum() \/ len(women), 1)\nprint('% of women that survived:', women_percent)","d09d3710":"df_sex_survived = pd.DataFrame({\n    'Sex': ['female', 'male'],\n    'Percentage': [women_percent, male_percent]\n})\ndf_sex_survived","4ceb175f":"first = df.loc[df.Pclass == 1]['Survived']\nfirst_percent = round(100 * first.sum() \/ len(first), 1)\nprint('% of people in the 1st class that survived:', first_percent)","62ddbf80":"second = df.loc[df.Pclass == 2]['Survived']\nsecond_percent = round(100 * second.sum() \/ len(second), 1)\nprint('% of people in the 2nd class that survived:', second_percent)","39b9702d":"third = df.loc[df.Pclass == 3]['Survived']\nthird_percent = round(100 * third.sum() \/ len(third), 1)\nprint('% of people in the 3nd class that survived:', third_percent)","b7457f81":"df_class_survived = pd.DataFrame({\n    'Pclass': ['1st', '2nd', '3nd'],\n    'Percentage': [first_percent, second_percent, third_percent]\n})\ndf_class_survived","39b37cf6":"fig, ax = plt.subplots(ncols = 2, figsize = (10, 5))\nsns.barplot(data = df_sex_survived, \n            x = 'Sex', \n            y = 'Percentage', \n            palette = 'mako', \n            ax = ax[0])\nax[0].set_ylabel('Total passangers that survived (%)')\n\nsns.barplot(data = df_class_survived, \n            x = 'Pclass', \n            y = 'Percentage', \n            palette = 'mako', \n            ax = ax[1])\nax[1].set_ylabel('Total passangers that survived (%)')\nax[1].set_xlabel('Ticket class')","b23abd35":"fig = plt.subplots(figsize = (10, 6))\nsns.histplot(data = df, \n             x = 'Age', \n             bins = 20, \n             color = \"teal\", \n             edgecolor = 'white')\nplt.axvline(x = df.Age.median(),\n            color = 'orangered',\n            ls = '--', \n            lw = 3.5)\nplt.axvline(x = df.Age.quantile(0.25),\n            color = 'orangered',\n            ls = '--', \n            lw = 3.5)\nplt.axvline(x = df.Age.quantile(0.75),\n            color = 'orangered',\n            ls = '--', \n            lw = 3.5)","efd16a81":"df['Age_cat'] = ''\ndf.loc[(df['Age'] > 0) & (df['Age'] <= 15), 'Age_cat'] = '0-15'\ndf.loc[(df['Age'] > 15) & (df['Age'] <= 30), 'Age_cat'] = '15-30'\ndf.loc[(df['Age'] > 30) & (df['Age'] <= 55), 'Age_cat'] = '30-55'\ndf.loc[(df['Age'] > 55), 'Age_cat'] = '55+'\ndf.loc[df.Age.isnull(), 'Age_cat'] = 'NA'","00fbc172":"df_age = df.groupby(['Age_cat', 'total'], as_index = False)['total'].count()\ndf_age['total'] = round(100 * df_age['total'] \/ df.shape[0], 1)\ndf_age","370bd472":"fig, ax = plt.subplots(figsize = (10, 6))\nsns.barplot(data = df_age, x = 'Age_cat', y = 'total', palette=\"mako\")\nax.set_ylabel('Total passengers  (%)')\nax.set_xlabel('Age categories')","899dd9cd":"features = df[['Pclass', 'Sex', 'Age_cat']]\ny = df['Survived']\nX_train, X_test, y_train, y_test = train_test_split(features, y, test_size = 0.2, random_state = 42)","4c12d427":"X_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)","61c75740":"model = RandomForestClassifier(n_estimators = 200, max_depth = 10, random_state = 42)","0b649d69":"model.fit(X_train, y_train)","72324a3c":"y_pred = model.predict(X_test)\ny_pred","df8ee085":"acc_model = metrics.accuracy_score(y_test, y_pred)\npre_model = metrics.precision_score(y_test, y_pred)\nrec_model = metrics.recall_score(y_test, y_pred)\n\nprint('Accuracy: ', round(acc_model, 1) * 100, '%')\nprint('Precision: ', round(pre_model, 1) * 100, '%')\nprint('Recall: ', round(rec_model, 1) * 100, '%')","9b1e8118":"performance = pd.DataFrame({\n    'metric': ['accuracy', 'precision', 'recall'],\n    'score': [acc_model, pre_model, rec_model]\n})","420f1118":"fig, ax = plt.subplots(figsize = (6, 5))\nsns.barplot(data = performance, \n            x = 'metric', \n            y = 'score', \n            palette=\"mako\")\nax.set_ylabel('Metric score')\nax.set_xlabel('Performance metrics')\nax.set_xticklabels(['Accuracy', 'Precision', 'Recall'])","79455f1a":"metrics.plot_confusion_matrix(model, \n                              X_test, \n                              y_test, \n                              cmap = 'mako')","b75db8da":"# Reading the 'test.csv'\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Adding the 'Age_cat' column\ndf_test['Age_cat'] = ''\ndf_test.loc[(df_test['Age'] > 0) & (df_test['Age'] <= 15), 'Age_cat'] = '0-15'\ndf_test.loc[(df_test['Age'] > 15) & (df_test['Age'] <= 30), 'Age_cat'] = '15-30'\ndf_test.loc[(df_test['Age'] > 30) & (df_test['Age'] <= 55), 'Age_cat'] = '30-55'\ndf_test.loc[(df_test['Age'] > 55), 'Age_cat'] = '55+'\ndf_test.loc[df_test.Age.isnull(), 'Age_cat'] = 'NA'\n\n# features from the df_test\ndf_test_features = ['Pclass', 'Sex', 'Age_cat']\n\n# dummy data\nX_df_test = pd.get_dummies(df_test[df_test_features])\n\n# Getting the predictions for the new dataset\nnew_y_pred = model.predict(X_df_test)\n\n# Doing a dataframe with the passenger id and the predictions\noutput = pd.DataFrame({\n    'PassengerId': df_test.PassengerId,\n    'Survived': new_y_pred\n})\n\n# Exporting the dataframe as .csv\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f586e0ee":"### Looking at the input files in the directory","150a913b":"### Feature engineering the column \"Age\" to a new feature \"Age_cat\" that will receive a categorical value according to the actual age","c2b8e1dd":"### 6) What percentage of people in the 1st class that survived?","4a7b4b92":"### Looking to some infos about the dataset","21c0758b":"### Doing a dataframe with these percentages","bcbf0e6b":"### Spliting the dataframe","7cc3f187":"### 7) What percentage of people in the 2nd class that survived?","5ce80ae6":"### 4) What percentage of men survived?","d0b92ba7":"### Working with the age of the passangers. Ploting the \"age\" column to see how the data is distributed (along with the 25th, 50th and 75th percentile)","76c38a0b":"### Dataframe with performance metrics","59486df0":"## Exploratory data analysis (EDA)","050b9aae":"### Training the model with the training sets","c7d294fa":"### Doing some plots to visualize these explorations","6225ffab":"## First look on the dataset","f971f7b0":"### Reading the data and looking to the first 10 records","d2a558e8":"## Importing modules","d14a7dd5":"### 1) How many people survived? How many did not survive?","e057e772":"### 3) How many passengers were in 1st 2nd and 3rd class?","0b04b15e":"### Creating random forest classifier object","d06b6eab":"### Given a trained model ('model'), predict the label from a new dataset. The method 'predict' accepts one argument, the new data X_test, and returns the learned label for each object in the array","63b1df31":"## Applying the trained model to the 'test.csv' and submitting the predictions ","439e8b2f":"## Training a random forest classifier","ad32ecf2":"### Plotting the distribution","50cb2c1b":"### 2) How many passengers were women? And how many were men?","934bcac4":"### Doing barplots to see the percentages","5342ff34":"## Assesing the performance of the trained model","25d3a5b0":"### Plotting the confusion matrix","4c69c4cf":"### Getting the proportion of passangers in each age category","5f291b19":"### Doing a dataframe with these percentages","5133206a":"### 5) What percentage of women survived?","66757a67":"### Geting dummy data","4ab6a8cf":"### Barplot with the performance metrics","fec14047":"### 8) What percentage of people in the 3nd class that survived?","8ceb2245":"### Accuracy, precision and recall:"}}