{"cell_type":{"e6ef44c7":"code","c33f834d":"code","7a75a32c":"code","7a27434d":"code","8f524071":"code","e5a3ee52":"code","7112076d":"code","fec23994":"code","7e07c37c":"code","394c6625":"code","62b341a2":"code","793ec437":"code","f94410c8":"code","6882db26":"code","e4312650":"code","fcca6dbb":"markdown"},"source":{"e6ef44c7":"from keras.models import Sequential\nimport os\nfrom keras import layers\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n  \nfrom keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nimport tensorflow as tf\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nimport numpy as np\nfrom glob import glob\ntrain_path = '..\/input\/aug-data\/aug_Train'\nvalid_path = '..\/input\/aug-data\/aug_test'","c33f834d":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.0,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(train_path,\n                                                 target_size = (80, 80),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory(valid_path,\n                                            target_size = (80, 80),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')\n","7a75a32c":"model=Sequential()\nmodel.add(layers.InputLayer(input_shape=(80,80,3)))\nmodel.add(layers.Conv2D(128,(5,5),activation='relu',input_shape=(80,80,3)))\nmodel.add(layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(layers.Dropout(0.0025))\nmodel.add(layers.Conv2D(64,(4,4),activation='relu'))\n\nmodel.summary()\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dense(128,activation='relu'))\nmodel.add(layers.Dense(53,activation='softmax'))\nmodel.summary()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n","7a27434d":"hist=model.fit_generator(\n     training_set,\n    validation_data=test_set,\n    steps_per_epoch=45,\n      epochs=40)","8f524071":"# plot the loss\nplt.plot(hist.history['loss'], label='train loss')\nplt.plot(hist.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(hist.history['accuracy'], label='train acc')\nplt.plot(hist.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","e5a3ee52":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing import image\n","7112076d":"p=os.listdir('..\/input\/aug-data\/test')\nq='..\/input\/aug-data\/test'\nlen(p)","fec23994":"def gettingImages(l,path):\n    sample_array=[]\n    for i in range(len(l)):\n        img_path=path+\"\/\"+l[i]\n        img=load_img(img_path,target_size=(80,80))\n        \n        sample_array.append(image.img_to_array(img))\n    return sample_array","7e07c37c":"test_features=gettingImages(p,q)\ntest_features=np.array(test_features)\ntest_features=test_features\/255\n#test_features","394c6625":"predict=model.predict_classes(test_features)\nprint(predict)\n'''\ny_classes = predict.argmax(axis=0)\nprint(y_classes)\n\npredict_probabilities=model.predict_proba(test_features)\npredict_probabilities\n'''","62b341a2":"prob=[]\nprobabilities = model.predict_proba(test_features)\nfor i in range(len(probabilities)):\n    m=max(probabilities[i])\n    r=round(m,2)\n    prob.append(r)\nprob","793ec437":"a=os.listdir('..\/input\/aug-data\/aug_Train')\nprint(a)\nfrom sklearn import preprocessing\nlb = preprocessing.LabelEncoder()\nlb.fit(a)","f94410c8":"lb.classes_\nanswers=lb.inverse_transform(predict)\nanswers","6882db26":"import pandas as pd\ndf1=pd.DataFrame(p,columns=['imageFileName'])\ndf2=pd.DataFrame(answers,columns=['predictedLable'])\ndf3=pd.DataFrame(prob,columns=['predictedProb'])\noutput=pd.concat([df1,df2,df3],axis=1)\n\noutput","e4312650":"output.to_csv('submission.csv')","fcca6dbb":"from keras.models import load_model\nmodel.save('my_model.h5')"}}