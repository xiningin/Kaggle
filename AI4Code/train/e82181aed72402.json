{"cell_type":{"2a2caa41":"code","c08850b9":"code","4dc2d9a2":"code","9a881f65":"code","2f7b58b7":"code","7825980f":"code","a8db04b9":"code","ac1aea4b":"code","94165a7a":"code","524910ef":"code","36128492":"code","cea13fb1":"code","6b4df8cc":"code","f89a78e8":"code","8e5681f6":"code","1afb2941":"code","493308f5":"code","93b74cec":"code","fec3bf00":"code","22e2d50e":"code","56db4345":"code","154368d9":"code","3c7d8ab3":"code","d6e3b9bc":"code","32627f68":"code","20deb3cd":"code","ac611b42":"code","05540862":"markdown","a4f1cd26":"markdown","b6d3896d":"markdown","cd84bab6":"markdown","cf7778b3":"markdown","a29b3e3a":"markdown","882182d8":"markdown","0629fd50":"markdown","106741a0":"markdown","91e20c1f":"markdown","a1c7279f":"markdown","c5192065":"markdown","757ea267":"markdown","ec913d84":"markdown","1a465acd":"markdown","755a1e72":"markdown","5eccded9":"markdown","c5393c06":"markdown","a87283e7":"markdown","d98a1653":"markdown","122d5a53":"markdown","005bf03d":"markdown","24002604":"markdown","06c30834":"markdown","065f2195":"markdown","5310ee06":"markdown","57e4af09":"markdown","bb3931fd":"markdown","ef4954aa":"markdown","51ff9ac3":"markdown","c4e508b5":"markdown","b06bcb7e":"markdown","d03313e8":"markdown","4097a180":"markdown","da9b1c22":"markdown","0a018efe":"markdown","45c74f7d":"markdown","04fa6881":"markdown","73eaeeed":"markdown","04d5e1c5":"markdown","ad55956f":"markdown","ecd7fe85":"markdown","f437ba40":"markdown","0ae199a5":"markdown"},"source":{"2a2caa41":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c08850b9":"df = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","4dc2d9a2":"print(\"The shape of the dataset is : \", df.shape)","9a881f65":"df.head()","2f7b58b7":"dict = {}\nfor i in list(df.columns):\n    dict[i] = df[i].value_counts().shape[0]\n\npd.DataFrame(dict,index=[\"unique count\"]).transpose()","7825980f":"cat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\ntarget_col = [\"output\"]\nprint(\"The categorial cols are : \", cat_cols)\nprint(\"The continuous cols are : \", con_cols)\nprint(\"The target variable is :  \", target_col)","a8db04b9":"df[con_cols].describe().transpose()","ac1aea4b":"df.isnull().sum()","94165a7a":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color) \n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Count plot for various\\n categorical features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Sex count\nax1.text(0.3, 220, 'Sex', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax1,data=df,x='sex',palette=color_palette)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Exng count\nax2.text(0.3, 220, 'Exng', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax2,data=df,x='exng',palette=color_palette)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# Caa count\nax3.text(1.5, 200, 'Caa', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax3,data=df,x='caa',palette=color_palette)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Cp count\nax4.text(1.5, 162, 'Cp', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax4,data=df,x='cp',palette=color_palette)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Fbs count\nax5.text(0.5, 290, 'Fbs', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax5,data=df,x='fbs',palette=color_palette)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# Restecg count\nax6.text(0.75, 165, 'Restecg', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax6,data=df,x='restecg',palette=color_palette)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# Slp count\nax7.text(0.85, 155, 'Slp', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax7,data=df,x='slp',palette=color_palette)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Thall count\nax8.text(1.2, 180, 'Thall', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax8,data=df,x='thall',palette=color_palette)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","524910ef":"fig = plt.figure(figsize=(18,16))\ngs = fig.add_gridspec(2,3)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxen plot for various\\n continuous features\\n_________________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Age \nax1.text(-0.05, 81, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['age'],palette=[\"#800000\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Trtbps \nax2.text(-0.05, 208, 'Trtbps', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['trtbps'],palette=[\"#8000ff\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# Chol \nax3.text(-0.05, 600, 'Chol', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['chol'],palette=[\"#6aac90\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Thalachh \nax4.text(-0.09, 210, 'Thalachh', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['thalachh'],palette=[\"#5833ff\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# oldpeak \nax5.text(-0.1, 6.6, 'Oldpeak', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['oldpeak'],palette=[\"#da8829\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)","36128492":"fig = plt.figure(figsize=(18,7))\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \n\n# Title of the plot\nax0.text(0.5,0.5,\"Count of the target\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\n\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\n\n# Target Count\nax1.text(0.35,177,\"Output\",fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax1, data=df, x = 'output',palette = color_palette)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\nax1.set_xticklabels([\"Low chances of attack(0)\",\"High chances of attack(1)\"])\n\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax1.spines[\"top\"].set_visible(False)\nax1.spines[\"left\"].set_visible(False)\nax1.spines[\"right\"].set_visible(False)","cea13fb1":"df_corr = df[con_cols].corr().transpose()\ndf_corr","6b4df8cc":"fig = plt.figure(figsize=(10,10))\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\n\ncolor_palette = [\"#5833ff\",\"#da8829\"]\nmask = np.triu(np.ones_like(df_corr))\nax0.text(1.5,-0.1,\"Correlation Matrix\",fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\ndf_corr = df[con_cols].corr().transpose()\nsns.heatmap(df_corr,mask=mask,fmt=\".1f\",annot=True,cmap='YlGnBu')\nplt.show()","f89a78e8":"fig = plt.figure(figsize=(12,12))\ncorr_mat = df.corr().stack().reset_index(name=\"correlation\")\ng = sns.relplot(\n    data=corr_mat,\n    x=\"level_0\", y=\"level_1\", hue=\"correlation\", size=\"correlation\",\n    palette=\"YlGnBu\", hue_norm=(-1, 1), edgecolor=\".7\",\n    height=10, sizes=(50, 250), size_norm=(-.2, .8),\n)\ng.set(xlabel=\"features on X\", ylabel=\"featurs on Y\", aspect=\"equal\")\ng.fig.suptitle('Scatterplot heatmap',fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\ng.despine(left=True, bottom=True)\ng.ax.margins(.02)\nfor label in g.ax.get_xticklabels():\n    label.set_rotation(90)\nfor artist in g.legend.legendHandles:\n    artist.set_edgecolor(\".7\")\nplt.show()","8e5681f6":"fig = plt.figure(figsize=(18,18))\ngs = fig.add_gridspec(5,2)\ngs.update(wspace=0.5, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\nax9.set_facecolor(background_color)\n\n# Age title\nax0.text(0.5,0.5,\"Distribution of age\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax0.spines[\"bottom\"].set_visible(False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\n\n# Age\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax1, data=df, x='age',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# TrTbps title\nax2.text(0.5,0.5,\"Distribution of trtbps\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax2.spines[\"bottom\"].set_visible(False)\nax2.set_xticklabels([])\nax2.set_yticklabels([])\nax2.tick_params(left=False, bottom=False)\n\n# TrTbps\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax3, data=df, x='trtbps',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Chol title\nax4.text(0.5,0.5,\"Distribution of chol\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax4.spines[\"bottom\"].set_visible(False)\nax4.set_xticklabels([])\nax4.set_yticklabels([])\nax4.tick_params(left=False, bottom=False)\n\n# Chol\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax5, data=df, x='chol',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# Thalachh title\nax6.text(0.5,0.5,\"Distribution of thalachh\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax6.spines[\"bottom\"].set_visible(False)\nax6.set_xticklabels([])\nax6.set_yticklabels([])\nax6.tick_params(left=False, bottom=False)\n\n# Thalachh\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax7, data=df, x='thalachh',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Oldpeak title\nax8.text(0.5,0.5,\"Distribution of oldpeak\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax8.spines[\"bottom\"].set_visible(False)\nax8.set_xticklabels([])\nax8.set_yticklabels([])\nax8.tick_params(left=False, bottom=False)\n\n# Oldpeak\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax9, data=df, x='oldpeak',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\nfor i in [\"top\",\"left\",\"right\"]:\n    ax0.spines[i].set_visible(False)\n    ax1.spines[i].set_visible(False)\n    ax2.spines[i].set_visible(False)\n    ax3.spines[i].set_visible(False)\n    ax4.spines[i].set_visible(False)\n    ax5.spines[i].set_visible(False)\n    ax6.spines[i].set_visible(False)\n    ax7.spines[i].set_visible(False)\n    ax8.spines[i].set_visible(False)\n    ax9.spines[i].set_visible(False)","1afb2941":"fig = plt.figure(figsize=(18,20))\ngs = fig.add_gridspec(6,2)\ngs.update(wspace=0.5, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\nax10 = fig.add_subplot(gs[5,0])\nax11 = fig.add_subplot(gs[5,1])\n\nbackground_color = \"#ffe6e6\"\ncolor_palette = [\"#800000\",\"#8000ff\",\"#6aac90\",\"#5833ff\",\"#da8829\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\nax9.set_facecolor(background_color)\nax10.set_facecolor(background_color)\nax11.set_facecolor(background_color)\n\n# Cp title\n# 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\nax0.text(0.5,0.5,\"Chest pain\\ndistribution\\n__________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax0.spines[\"bottom\"].set_visible(False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.text(1,.5,\"0 - Typical Angina\\n1 - Atypical Angina\\n2 - Non-anginal Pain\\n3 - Asymptomatic\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\n\n# Cp\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax1, data=df, x='cp',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Caa title\nax2.text(0.5,0.5,\"Number of\\nmajor vessels\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax2.text(1,.5,\"0 vessels\\n1 vessel\\n2 vessels\\n3 vessels\\n4vessels\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\n\nax2.spines[\"bottom\"].set_visible(False)\nax2.set_xticklabels([])\nax2.set_yticklabels([])\nax2.tick_params(left=False, bottom=False)\n\n# Caa\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax3, data=df, x='caa',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# Sex title\nax4.text(0.5,0.5,\"Heart Attack\\naccording to\\nsex\\n______\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax4.text(1,.5,\"0 - Female\\n1 - Male\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\nax4.spines[\"bottom\"].set_visible(False)\nax4.set_xticklabels([])\nax4.set_yticklabels([])\nax4.tick_params(left=False, bottom=False)\n\n# Sex\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.countplot(ax=ax5,data=df,x='sex',palette=[\"#8000ff\",\"#da8829\"], hue='output')\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# Thall title\nax6.text(0.5,0.5,\"Distribution of thall\\naccording to\\n target variable\\n___________\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax6.text(1,.5,\"Thalium Stress\\nTest Result\\n0, 1, 2, 3\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\nax6.spines[\"bottom\"].set_visible(False)\nax6.set_xticklabels([])\nax6.set_yticklabels([])\nax6.tick_params(left=False, bottom=False)\n\n# Thall\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.kdeplot(ax=ax7, data=df, x='thall',hue=\"output\", fill=True,palette=[\"#8000ff\",\"#da8829\"], alpha=.5, linewidth=0)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Thalachh title\nax8.text(0.5,0.5,\"Boxen plot of\\nthalachh wrt\\noutcome\\n_______\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax8.text(1,.5,\"Maximum heart\\nrate achieved\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\n\nax8.spines[\"bottom\"].set_visible(False)\nax8.set_xticklabels([])\nax8.set_yticklabels([])\nax8.tick_params(left=False, bottom=False)\n\n# Thalachh\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax9, data=df,x='output',y='thalachh',palette=[\"#8000ff\",\"#da8829\"])\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\n\n\n# Exng title\nax10.text(0.5,0.5,\"Strip Plot of\\nexng vs age\\n______\",\n        horizontalalignment = 'center',\n        verticalalignment = 'center',\n        fontsize = 18,\n        fontweight='bold',\n        fontfamily='serif',\n        color='#000000')\nax10.text(1,.5,\"Exercise induced\\nangina\\n0 - No\\n1 - Yes\",\n        horizontalalignment = 'center',\n         verticalalignment = 'center',\n        fontsize = 14\n        )\nax10.spines[\"bottom\"].set_visible(False)\nax10.set_xticklabels([])\nax10.set_yticklabels([])\nax10.tick_params(left=False, bottom=False)\n\n\n# Exng\nax11.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.stripplot(ax=ax11, data=df,x='exng',y='age',hue='output',palette=[\"#8000ff\",\"#da8829\"])\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\nfor i in [\"top\",\"left\",\"right\"]:\n    ax0.spines[i].set_visible(False)\n    ax1.spines[i].set_visible(False)\n    ax2.spines[i].set_visible(False)\n    ax3.spines[i].set_visible(False)\n    ax4.spines[i].set_visible(False)\n    ax5.spines[i].set_visible(False)\n    ax6.spines[i].set_visible(False)\n    ax7.spines[i].set_visible(False)\n    ax8.spines[i].set_visible(False)\n    ax9.spines[i].set_visible(False)\n    ax10.spines[i].set_visible(False)\n    ax11.spines[i].set_visible(False)","493308f5":"sns.pairplot(df,hue='output',palette = [\"#8000ff\",\"#da8829\"])\nplt.show()","93b74cec":"# Scaling\nfrom sklearn.preprocessing import RobustScaler\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\n# Models\nimport torch\nimport torch.nn as nn\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve\n\n# Cross Validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nprint('Packages imported...')","fec3bf00":"# creating a copy of df\ndf1 = df\n\n# define the columns to be encoded and scaled\ncat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\n\n# encoding the categorical columns\ndf1 = pd.get_dummies(df1, columns = cat_cols, drop_first = True)\n\n# defining the features and target\nX = df1.drop(['output'],axis=1)\ny = df1[['output']]\n\n# instantiating the scaler\nscaler = RobustScaler()\n\n# scaling the continuous featuree\nX[con_cols] = scaler.fit_transform(X[con_cols])\nprint(\"The first 5 rows of X are\")\nX.head()","22e2d50e":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)\nprint(\"The shape of X_train is      \", X_train.shape)\nprint(\"The shape of X_test is       \",X_test.shape)\nprint(\"The shape of y_train is      \",y_train.shape)\nprint(\"The shape of y_test is       \",y_test.shape)","56db4345":"# instantiating the object and fitting\nclf = SVC(kernel='linear', C=1, random_state=42).fit(X_train,y_train)\n\n# predicting the values\ny_pred = clf.predict(X_test)\n\n# printing the test accuracy\nprint(\"The test accuracy score of SVM is \", accuracy_score(y_test, y_pred))","154368d9":"# instantiating the object\nsvm = SVC()\n\n# setting a grid - not so extensive\nparameters = {\"C\":np.arange(1,10,1),'gamma':[0.00001,0.00005, 0.0001,0.0005,0.001,0.005,0.01,0.05,0.1,0.5,1,5]}\n\n# instantiating the GridSearchCV object\nsearcher = GridSearchCV(svm, parameters)\n\n# fitting the object\nsearcher.fit(X_train, y_train)\n\n# the scores\nprint(\"The best params are :\", searcher.best_params_)\nprint(\"The best score is   :\", searcher.best_score_)\n\n# predicting the values\ny_pred = searcher.predict(X_test)\n\n# printing the test accuracy\nprint(\"The test accuracy score of SVM after hyper-parameter tuning is \", accuracy_score(y_test, y_pred))","3c7d8ab3":"# instantiating the object\nlogreg = LogisticRegression()\n\n# fitting the object\nlogreg.fit(X_train, y_train)\n\n# calculating the probabilities\ny_pred_proba = logreg.predict_proba(X_test)\n\n# finding the predicted valued\ny_pred = np.argmax(y_pred_proba,axis=1)\n\n# printing the test accuracy\nprint(\"The test accuracy score of Logistric Regression is \", accuracy_score(y_test, y_pred))","d6e3b9bc":"# calculating the probabilities\ny_pred_prob = logreg.predict_proba(X_test)[:,1]\n\n# instantiating the roc_cruve\nfpr,tpr,threshols=roc_curve(y_test,y_pred_prob)\n\n# plotting the curve\nplt.plot([0,1],[0,1],\"k--\",'r+')\nplt.plot(fpr,tpr,label='Logistic Regression')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Logistric Regression ROC Curve\")\nplt.show()","32627f68":"# instantiating the object\ndt = DecisionTreeClassifier(random_state = 42)\n\n# fitting the model\ndt.fit(X_train, y_train)\n\n# calculating the predictions\ny_pred = dt.predict(X_test)\n\n# printing the test accuracy\nprint(\"The test accuracy score of Decision Tree is \", accuracy_score(y_test, y_pred))","20deb3cd":"# instantiating the object\nrf = RandomForestClassifier()\n\n# fitting the model\nrf.fit(X_train, y_train)\n\n# calculating the predictions\ny_pred = dt.predict(X_test)\n\n# printing the test accuracy\nprint(\"The test accuracy score of Random Forest is \", accuracy_score(y_test, y_pred))","ac611b42":"# instantiate the classifier\ngbt = GradientBoostingClassifier(n_estimators = 300,max_depth=1,subsample=0.8,max_features=0.2,random_state=42)\n\n# fitting the model\ngbt.fit(X_train,y_train)\n\n# predicting values\ny_pred = gbt.predict(X_test)\nprint(\"The test accuracy score of Gradient Boosting Classifier is \", accuracy_score(y_test, y_pred))","05540862":"##### 2.3.6 Missing values","a4f1cd26":"##### 5.1.1 Support Vector Machines","b6d3896d":"### 4. Data Preprocessing <a id=11><\/a>\n[back to top](#18)","cd84bab6":"### 3. Exploratory Data Analysis <a id=8><\/a>\n[back to top](#18)","cf7778b3":"##### 5.2.2 Random Forest","a29b3e3a":"##### 2.3.1 The shape of the data","882182d8":"#### 1.2 Task <a id=3><\/a>\nTo perform EDA and predict if a person is prone to a heart attack or not.","0629fd50":"#### 4.2 Packages <a id=13><\/a>","106741a0":"#### 2.3 Understanding Data <a id=7><\/a>","91e20c1f":"#### 2.2 Data <a id=6><\/a>","a1c7279f":"##### 5.1.3 Logistic Regression","c5192065":"#### 1.1 Data Dictionary <a id=2><\/a>\n`age` - Age of the patient\n\n`sex` - Sex of the patient\n\n`cp` - Chest pain type ~ 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\n`trtbps` - Resting blood pressure (in mm Hg)\n\n`chol` - Cholestoral in mg\/dl fetched via BMI sensor\n\n`fbs` - (fasting blood sugar > 120 mg\/dl) ~ 1 = True, 0 = False\n\n`restecg` - Resting electrocardiographic results ~ 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n\n`thalachh`  - Maximum heart rate achieved\n\n`oldpeak` - Previous peak\n\n`slp` - Slope\n\n`caa` - Number of major vessels \n\n`thall` - Thalium Stress Test result ~ (0,3)\n\n`exng` - Exercise induced angina ~ 1 = Yes, 0 = No\n\n`output` - Target variable","757ea267":"##### 3.2.1 Correlation matrix of continuous features","ec913d84":"#### 5.2 Tree Models <a id=17><\/a>","1a465acd":"##### 3.1.2 Boxen plot of continuous features","755a1e72":"##### 3.1.1 Count plot of categorical features","5eccded9":"##### 2.3.3 Checking the number of unique values in each column","c5393c06":"### If you like the notebook, consider giving an upvote.\nCheck my other notebooks \n\n1. https:\/\/www.kaggle.com\/namanmanchanda\/cat-vs-dog-classifier-10-lines-of-code-fast-ai\n2. https:\/\/www.kaggle.com\/namanmanchanda\/star-wars-classifier\n3. https:\/\/www.kaggle.com\/namanmanchanda\/pima-indian-diabetes-eda-and-prediction\n4. https:\/\/www.kaggle.com\/namanmanchanda\/asl-detection-99-accuracy\n5. https:\/\/www.kaggle.com\/namanmanchanda\/pytorch-101","a87283e7":"<h1 align=\"center\">Heart Attack - EDA<\/h1>","d98a1653":"##### 3.2.2 Scatterplot heatmap of dataframe","122d5a53":"##### 4.3.2 Train and test split","005bf03d":"#### 2.1 Packages <a id=5><\/a>","24002604":"##### 3.2.4 Some other relations that seemed intuitive","06c30834":"1. [Introduction](#1) <a id=18><\/a>\n    - 1.1 [Data Dictionary](#2)\n    - 1.2 [Task](#3)\n2. [Preparation](#4)\n    - 2.1 [Packages](#5)\n    - 2.2 [Data](#6)\n    - 2.3 [Understanding Data](#7)\n3. [Exploratory Data Analysis](#8)\n    - 3.1 [Univariate Analysis](#9)\n    - 3.2 [Bivariate Analysis](#10)\n4. [Data Preprocessing](#11)\n    - 4.1 [Conclusions from the EDA](#12)\n    - 4.2 [Packages](#13)\n    - 4.3 [Making features model ready](#14)\n5. [Modeling](#15)\n    - 5.1 [Linear Classifiers](#16)\n    - 5.2 [Tree Models](#17)","065f2195":"##### 3.2.3 Distribution of continuous features according to target variable","5310ee06":"##### 2.3.4 Separating the columns in categorical and continuous","57e4af09":"##### 5.1.2 Hyperparameter tuning of SVC","bb3931fd":"##### 2.3.2 Preview of the first 5 rows of the data","ef4954aa":"##### 3.1.2 Count plot of target","51ff9ac3":"##### 2.3.5 Summary statistics","c4e508b5":"##### 3.2.5 Pairplot according to target variable - one plot to rule them all","b06bcb7e":"\n#### 4.3 Making features model ready <a id=14><\/a>","d03313e8":"[back to top](#18)","4097a180":"### 5. Modeling <a id=15><\/a>\n[back to top](#18)","da9b1c22":"### 1. Introduction <a id=1><\/a>\n[back to top](#18)","0a018efe":"##### 4.3.1 Scaling and Encoding features","45c74f7d":"### 2. Preparation <a id=4><\/a>\n[back to top](#18)","04fa6881":"#### 4.1 Conclusions from the EDA <a id=12><\/a>\n\n1. There are no NaN values in the data.\n2. There are certain outliers in all the continuous features.\n3. The data consists of more than twice the number of people with `sex` = 1 than `sex` = 0.\n4. There is no apparent linear correlation between continuous variable according to the heatmap.\n5. The scatterplot heatmap matrix suggests that there might be some correlation between `output` and `cp`, `thalachh` and `slp`.\n6. It is intuitive that elder people might have higher chances of heart attack but according to the distribution plot of `age` wrt `output`, it is evident that this isn't the case.\n7. According to the distribution plot of `thalachh` wrt `output`, people with higher maximum heart rate achieved have higher chances of heart attack.\n8. According to the distribution plot of `oldpeak` wrt `output`, people with lower pevious peak achieved have higher chances of heart attack.\n9. The plot *3.2.4* tells about the following -\n    - People with Non-Anginal chest pain, that is with `cp` = 2 have higher chances of heart attack.\n    - People with 0 major vessels, that is with `caa` = 0 have high chance of heart attack.\n    - People with `sex` = 1 have higher chance of heart attack.\n    - People with `thall` = 2 have much higher chance of heart attack.\n    - People with no exercise induced angina, that is with `exng` = 0 have higher chance of heart attack.","73eaeeed":"##### 5.2.1 Decision Tree","04d5e1c5":"#### 3.1 Univariate Analysis <a id=9><\/a>","ad55956f":"##### 5.2.3 Gradient Boosting Classifier - without tuning","ecd7fe85":"#### 3.2 Bivariate Analysis <a id=10><\/a>","f437ba40":"##### 5.1.4 ROC Curve","0ae199a5":"#### 5.1 Linear Classifiers <a id=16><\/a>"}}