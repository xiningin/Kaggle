{"cell_type":{"bc3b0423":"code","3f14b3f4":"code","d2ba3661":"code","e470807b":"code","0c64048a":"code","86e021e3":"code","f57209c1":"code","3ccd272f":"code","efead084":"code","1ac56f14":"code","750bbd04":"code","79a87d62":"code","14682736":"code","d28e1bd9":"code","272d1b2f":"code","3625b382":"code","612bae36":"code","437c7f3c":"code","8d65acff":"code","615d1d99":"code","dbfb572d":"markdown","50ea0275":"markdown","ffdef74c":"markdown","acebf2b4":"markdown","041217e3":"markdown"},"source":{"bc3b0423":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\n\n%matplotlib inline\n\nall_stock = pd.read_csv(\"..\/input\/all_stocks_5yr.csv\")\n\nall_stock.head(10)","3f14b3f4":"aapl = all_stock[all_stock.Name == 'AAPL']\naapl = aapl.close.values.astype('float32')\naapl = aapl.reshape(len(aapl), 1)\n\naapl.shape","d2ba3661":"fig=plt.figure(figsize=(18, 8), dpi= 80, facecolor='w', edgecolor='k')\n\nscaler = MinMaxScaler(feature_range=(0,1))\naapl = scaler.fit_transform(aapl)\n\nplt.plot(aapl)\nplt.show()","e470807b":"train_size = int(len(aapl) * 0.80)\ntest_size = len(aapl) - train_size\ntrain_set = aapl[0:train_size, :]\ntest_set = aapl[train_size:len(aapl), :]\n\nprint(len(train_set), len(test_set))","0c64048a":"def create_dataset(dataset, look_back = 1):\n    dataX, dataY = [], []\n    for i in range(len(dataset) - look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i+look_back, 0])\n        \n    return np.array(dataX), np.array(dataY)","86e021e3":"look_back = 1\ntrainX, trainY = create_dataset(train_set, look_back)\ntestX, testY = create_dataset(test_set, look_back)","f57209c1":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","3ccd272f":"trainY = np.reshape(trainY, (trainY.shape[0], 1))\ntestY = np.reshape(testY, (testY.shape[0], 1))","efead084":"testX.shape","1ac56f14":"input_size = 1\nnum_steps = 1\nlstm_size = 128 # number of LSTM hidden unit\nnum_layers = 2 # number of LSTM cell\nmax_epoch = 200\n","750bbd04":"inputs = tf.placeholder(tf.float32, [None, num_steps, input_size])\ntargets = tf.placeholder(tf.float32, [None, input_size])\nlearning_rate = tf.placeholder(tf.float32, None)","79a87d62":"cell = tf.contrib.rnn.MultiRNNCell(\n    [tf.contrib.rnn.LSTMCell(lstm_size, state_is_tuple=True) for _ in range(num_layers)], \n    state_is_tuple=True\n) if num_layers > 1 else tf.contrib.rnn.LSTMCell(lstm_size, state_is_tuple=True)","14682736":"val, _ = tf.nn.dynamic_rnn(cell, inputs, dtype=tf.float32)","d28e1bd9":"val = tf.transpose(val, [1, 0, 2])\nlast = tf.gather(val, int(val.get_shape()[0]) - 1, name=\"last_lstm_output\")\n","272d1b2f":"weight = tf.Variable(tf.truncated_normal([lstm_size, input_size]))\nbias = tf.Variable(tf.constant(0.1, shape=[input_size]))\nprediction = tf.matmul(last, weight) + bias","3625b382":"loss = tf.reduce_mean(tf.square(prediction - targets))\noptimizer = tf.train.AdamOptimizer(learning_rate=0.001)\nminimize = optimizer.minimize(loss)","612bae36":"with tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    train_result = np.zeros((199, 1))\n    test_result = np.zeros((50, 1))\n    for epoch in range(max_epoch):\n        train_loss, predicted, _ = sess.run([loss, prediction, minimize], \n                                            feed_dict={inputs: trainX, targets: trainY})\n        if epoch % 20 == 0:\n            print(\"Loss: \", train_loss)\n        train_result = predicted\n    predicted = sess.run([prediction], feed_dict={inputs: testX})\n    test_result = predicted[0]\n    ","437c7f3c":"fig=plt.figure(figsize=(12, 8), dpi= 80, facecolor='w', edgecolor='k')\n\nresult = np.append(train_result, test_result)\n\nresult = np.reshape(result, (len(result), 1))\n\nplt.plot(scaler.inverse_transform(aapl))\nplt.plot(scaler.inverse_transform(result))\nplt.legend([\"Truth\", \"Predicted\"], loc=\"upper left\")\nplt.show()\n","8d65acff":"fig=plt.figure(figsize=(12, 8), dpi= 80, facecolor='w', edgecolor='k')\n\nplt.plot(testY)\nplt.plot(test_result)\nplt.legend([\"Target Truth\", \"Predicted\"], loc=\"upper left\")\nplt.show()","615d1d99":"for i in range(10):\n    print(\"Target: \", testY[i], \"Predicted: \", test_result[i])","dbfb572d":"### Pick One Stock Prices\n\nLet's took Apple (AAPL) stock prices and reshape it into 2D list","50ea0275":"### Import Modules and Read Data","ffdef74c":"### Model Configuration","acebf2b4":"And now, normalize the data so","041217e3":"## Predict Stock Prices Using LSTM\n\nHi, everyone! I'm just trying to predict stock prices using LSTM. I write the model using TensorFlow.\n\nThis notebook based on Lilian Weng tutorial on [how to build RNN using TensorFlow to predict stock prices](https:\/\/lilianweng.github.io\/lil-log\/2017\/07\/08\/predict-stock-prices-using-RNN-part-1.html) and this [nice tutorial](https:\/\/machinelearningmastery.com\/time-series-prediction-lstm-recurrent-neural-networks-python-keras\/) by Jason Brownlee\n\nI still learn about LSTM, so I hope everyone can give a comment about it :)"}}