{"cell_type":{"4fbe7cfd":"code","847051eb":"code","bb034356":"code","297aa3cd":"code","eec94496":"code","922ba383":"code","038c65e2":"code","321bceb1":"code","0e4a20f9":"code","06f8f404":"code","b13922c0":"code","8f71ee21":"code","26170a3d":"code","6e69a4b3":"code","89143f01":"code","96130683":"code","3999375f":"code","7f53f111":"code","297d20f0":"code","53341007":"code","fa0c181e":"code","67796fa4":"code","d1625451":"code","d6cbd4f6":"code","5a574a4f":"code","1f96fea7":"code","0d98566e":"code","b0c91b5e":"code","7b558db8":"code","ecdbeb2a":"code","73406b5f":"code","8e9e9dc5":"code","b9a1285f":"code","1a3a69a7":"code","64920924":"code","42f04bc1":"code","d332e5b4":"code","894e0181":"code","2fc9472a":"code","34abbcc9":"code","2da6ed5b":"code","222a159a":"code","fed909f5":"code","e1803a8b":"code","55d585f3":"markdown","ebc540f6":"markdown","5d7e7bef":"markdown","ec2eecc5":"markdown","91b17d79":"markdown","1267e82e":"markdown","8a80a6f5":"markdown","ff4d0b6c":"markdown","d43a425d":"markdown","da39fb40":"markdown","802a0819":"markdown","286756dc":"markdown","0ffbf9d1":"markdown","374c979e":"markdown","0bdc068f":"markdown","2728408a":"markdown","cce42602":"markdown","ff1c2e35":"markdown","6c7029e9":"markdown","45c2e2ad":"markdown","969c38a7":"markdown","d88c1cc9":"markdown","ba41681f":"markdown","04ec2f81":"markdown","25f956ed":"markdown","bce4a01b":"markdown","a4eadb58":"markdown"},"source":{"4fbe7cfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","847051eb":"df=pd.read_csv('\/kaggle\/input\/kc-housesales-data\/kc_house_data.csv')","bb034356":"df.head()","297aa3cd":"df.info()","eec94496":"df['price'].describe()","922ba383":"plt.figure(figsize=(12,6))\nsns.distplot(df['price'])","038c65e2":"df.corr()['price'].sort_values(ascending=False).drop('price').plot(kind='bar')","321bceb1":"sns.scatterplot(y='price',x='sqft_living',data=df)","0e4a20f9":"sns.countplot('bedrooms',data=df)","06f8f404":"plt.figure(figsize=(10,12))\nsns.boxplot(x='bedrooms',y='price',data=df)","b13922c0":"plt.figure(figsize=(10,9))\nsns.boxplot(x=df['grade'],y='price',data=df)","8f71ee21":"sns.scatterplot(y='lat',x='price',data=df)","26170a3d":"sns.scatterplot(y='long',x='price',data=df)","6e69a4b3":"plt.figure(figsize=(12,10))\nsns.scatterplot(y='lat',x='long',data=df,hue='price',edgecolor=None,alpha=0.4,palette='RdYlGn')","89143f01":"0.05*len(df)","96130683":"new_99_df=df.sort_values('price',ascending=False).iloc[1080:]","3999375f":"len(new_99_df)","7f53f111":"plt.figure(figsize=(12,10))\nsns.scatterplot(y='lat',x='long',data=new_99_df,hue='price',edgecolor=None,alpha=0.9,palette='RdYlGn')","297d20f0":"sns.boxplot(x='waterfront',y='price',data=new_99_df)","53341007":"sns.countplot(df['view'])","fa0c181e":"df.info()","67796fa4":"df['date'].head()","d1625451":"df['date']=pd.to_datetime(df['date'])","d6cbd4f6":"df['date'].head()","5a574a4f":"df.columns","1f96fea7":"df['month_sold']=df['date'].apply(lambda date: date.month)\ndf['year_sold']=df['date'].apply(lambda date: date.year)","0d98566e":"df['month_sold'].head()","b0c91b5e":"df['year_sold']","7b558db8":"sns.countplot(df['month_sold'])","ecdbeb2a":"sns.countplot(df['year_sold'])","73406b5f":"df['zipcode'].value_counts()","8e9e9dc5":"df=df.drop(['date','id','zipcode'],axis=1)","b9a1285f":"df.columns","1a3a69a7":"X=df.drop('price',axis=1).values\ny=df['price'].values","64920924":"type(X)","42f04bc1":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=100)","d332e5b4":"x_train.shape","894e0181":"from sklearn.preprocessing import MinMaxScaler\n\nscaler=MinMaxScaler()\nx_train=scaler.fit_transform(x_train)\nx_test=scaler.transform(x_test)","2fc9472a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nmodel=Sequential()\n\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dense(19,activation='relu'))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam',loss='mse')\n\nmodel.fit(x=x_train,y=y_train,validation_data=(x_test,y_test),batch_size=128,epochs=400)","34abbcc9":"loss=pd.DataFrame(model.history.history)","2da6ed5b":"loss.plot()","222a159a":"from sklearn.metrics import mean_absolute_error,mean_squared_error,explained_variance_score\n\npredictions=model.predict(x_test)\n\nprint(\"MAE:\",mean_absolute_error(y_test,predictions))\nprint(\"MSE:\",mean_squared_error(y_test,predictions))\nprint(\"RMSE:\",np.sqrt(mean_squared_error(y_test,predictions)))","fed909f5":"explained_variance_score(y_test,predictions)","e1803a8b":"plt.figure(figsize=(10,5))\nplt.scatter(y_test,predictions)\nplt.plot(y_test,y_test,'r')","55d585f3":"There are 70 different zipcodes :( which we can't categorize into 70 diff columns. Therefore, for the time being we'll drop it out, with other columns not in use.","ebc540f6":"Let's evaluate how model performs.. on test set","5d7e7bef":"Let's split our dataset into training and test set.","ec2eecc5":"Woah !! Our model didn't overfit..so this works well for our model ;)","91b17d79":"## EDA\nLet's analyse our datset a bit to get a wider insight into it.","1267e82e":"#### This shows that price of the house in King County is highly correlated with the sqft_living and least with zip_code","8a80a6f5":"This shows that the houses mostly range between  0-2 lacs.\n\nNow let's find correlation of other features with our target feauture 'price'","ff4d0b6c":"#### Yipee!! No Missing Data :D\n#### Let's see how our target label looks like","d43a425d":"Let's create new columns of month and year sold in our dataset.","da39fb40":"This shows that most houses have 3 bedrooms.","802a0819":"Let's build our Neural Network","286756dc":"Though sales is not much affected by month but the month of May incurred most house sales.","0ffbf9d1":"Here we can observe some outliers affecting the price for houses despite of having same no. of bedrooms thus, other factor also affect our house price. Let's explore that. ","374c979e":"Let's preprocess our data because it's always a good practice ;)","0bdc068f":"## Feature Engineering","2728408a":"[ jom lmlnU","cce42602":"let's try to visulise as a map of KC !!","ff1c2e35":"There's just one objct dtype feature i.e date. Let's convert it into datetime object.","6c7029e9":"To get better scale let's alter our dataset for higher ranging houses. Let's remove 1% of lower ranging houses from our dataset or say create a new df consisting 99% of dataset removing those low ranging houses","45c2e2ad":"Let's analyse zipcode feature too, is it of any benefit for us in dataset to predict price of house?","969c38a7":"Above shows analysis of houses shows that houses range higher on waterfronts ,i.e lying on the waterside we have houses with price > 450k (approx.)\n\nLet's analyse waterfront and price","d88c1cc9":"## Conclusion\nModel with 5 layers consisting of 19 neurons each in 4 layers and 1 in output, gives a accuracy of 80% to predict the price of a house in King County.","ba41681f":"## Model Creation","04ec2f81":"Here we can see a linear relation between the two, which is affected by some outliers with higher price or sqft_living.","25f956ed":"Let's explore latitude and longitude","bce4a01b":"Date column converted !","a4eadb58":"Red line shows ideal model "}}