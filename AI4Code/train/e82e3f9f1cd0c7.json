{"cell_type":{"11c7bf8c":"code","217c502e":"code","070a4266":"code","6bed0129":"code","430fe8e4":"code","74401998":"code","46a1b162":"code","7cd2ec7c":"code","904145c0":"code","d2647fbb":"code","e7afb2a9":"code","81be525d":"code","562399c3":"code","015771cc":"code","6d9a7dfe":"code","3a106740":"code","6fa4f551":"code","01aedfec":"code","ac11ca47":"code","73781c43":"code","1e03a81d":"code","d0b7d981":"code","05cf1381":"code","c7e174b2":"code","8e394d7d":"code","6db1c2e4":"code","98dc4a0b":"code","e0525568":"code","41d26e77":"code","afc2a54f":"code","a1f58bd4":"code","a42752f5":"code","02ddfaf8":"code","25611112":"code","c9d010bd":"code","84de9902":"code","f47c6f43":"code","d3e4bc20":"code","596c1d30":"code","a585595b":"code","abb618bf":"code","e2de3988":"code","82501a34":"code","f80299b9":"code","31bff3c1":"code","6de51d4b":"code","8a62dc13":"code","eb0cc33e":"code","2411c41d":"code","87cba3cc":"code","68cc29a9":"code","fa2f5258":"code","20299b80":"code","5052f05a":"code","94e3cc8b":"code","58587a5a":"code","9993dd22":"code","0181b8d0":"code","6cb13b62":"code","5a83d430":"code","a1810ea6":"code","9798bd22":"code","99c4b01e":"code","dd0a072b":"code","8f9cdc82":"code","ebc11bd9":"code","ff3e4358":"code","a1f1d8e3":"code","3fc43647":"code","54840de7":"code","c6efb2ec":"code","cd748a19":"code","a0b32179":"code","6c0a4882":"code","ff60b7a9":"code","a7e99842":"code","e8f5639a":"code","4b6ac1ac":"code","e439be02":"code","09b10ed6":"code","967717c5":"markdown","5e4cd6e6":"markdown","c1de54f8":"markdown","30b5ce7a":"markdown","614caa66":"markdown","e8d244fd":"markdown","eaae2550":"markdown","2b805407":"markdown","f05f58b5":"markdown"},"source":{"11c7bf8c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nimport statsmodels.formula.api as smf","217c502e":"Data=pd.read_csv('..\/input\/housing (1).csv',index_col=0)","070a4266":"Data.head()","6bed0129":"corr=Data.corr()","430fe8e4":"plt.figure(figsize=(10,5))\nsns.heatmap(corr,annot=True)","74401998":"import statsmodels.formula.api as smf","46a1b162":"Data.columns","7cd2ec7c":"m1=smf.ols('medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat',Data).fit()","904145c0":"m1.summary()","d2647fbb":"m2=smf.ols('medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat',Data).fit()","e7afb2a9":"m2.summary()","81be525d":"#sns.pairplot(Data)","562399c3":"sns.pairplot(Data[['indus','age','medv']])","015771cc":"from sklearn.preprocessing import PolynomialFeatures","6d9a7dfe":"from sklearn.model_selection import train_test_split","3a106740":"x=Data.drop(['medv','age','indus'],axis=1)\ny=Data[['medv']]","6fa4f551":"X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.3,random_state=1)","01aedfec":"x_train=X_train[['lstat','rm']]","ac11ca47":"qr=PolynomialFeatures(degree=2,include_bias=False)","73781c43":"x_qr=qr.fit_transform(x_train)\nx_qr","1e03a81d":"x_qr_df=pd.DataFrame(x_qr)","d0b7d981":"x_qr_df.shape","05cf1381":"Y_train.shape","c7e174b2":"idx=np.arange(len(Y_train))","8e394d7d":"Y_train.index=idx","6db1c2e4":"x_qr_df=pd.concat([x_qr_df,Y_train],axis=1)","98dc4a0b":"x_qr_df.shape","e0525568":"x_qr_df.columns=['lstat','rm','lstat2','lstatXrm','rm2','medv']","41d26e77":"x_qr_df.head()","afc2a54f":"m2=smf.ols('medv~rm+lstat2+lstatXrm+rm2',x_qr_df).fit()","a1f58bd4":"m2.summary()","a42752f5":"x_test=X_test[['lstat','rm']]","02ddfaf8":"xtest_qr=qr.fit_transform(x_test)\n","25611112":"xtest_qr_df=pd.DataFrame(xtest_qr)","c9d010bd":"xtest_qr_df.columns=['lstat','rm','lstat2','lstatXrm','rm2']","84de9902":"xtest_qr_df.head()","f47c6f43":"QR_pred=m2.predict(xtest_qr_df)","d3e4bc20":"plt.plot(QR_pred,Y_test,'*')","596c1d30":"from sklearn import metrics","a585595b":"MSE=metrics.mean_squared_error(QR_pred,Y_test)","abb618bf":"QR_RMSE=np.sqrt(np.mean(MSE))\nQR_RMSE","e2de3988":"from sklearn.linear_model import LinearRegression","82501a34":"model=LinearRegression().fit(x_train,Y_train)","f80299b9":"li_pred=model.predict(x_test)","31bff3c1":"plt.plot(li_pred,Y_test,'*')","6de51d4b":"MSE=metrics.mean_squared_error(li_pred,Y_test)","8a62dc13":"li_RMSE=np.sqrt(np.mean(MSE))\nli_RMSE","eb0cc33e":"R2=model.score(x_test,Y_test)\nR2","2411c41d":"pr=PolynomialFeatures(degree=3,include_bias=False)","87cba3cc":"x_pr=pr.fit_transform(x_train)\nx_pr","68cc29a9":"x_pr_df=pd.DataFrame(x_pr)","fa2f5258":"x_pr_df.head()","20299b80":"x_pr_df.columns=['lstat','rm','lstat2','lstatXrm','rm2','lstat3','lstat2Xrm','lstatXrm2','rm3']","5052f05a":"x_pr_df.head()","94e3cc8b":"x_pr_df=pd.concat([x_pr_df,Y_train],axis=1)","58587a5a":"x_pr_df.head()","9993dd22":"x_pr_df.columns","0181b8d0":"mp1=smf.ols('medv~lstat+rm+lstatXrm+rm2+lstatXrm2+rm3',x_pr_df).fit() # from summarey we drop lstat2 lastat3 lsatat2rm\nmp1.summary()","6cb13b62":"xtest_pr=pr.fit_transform(x_test)","5a83d430":"xtest_pr_df=pd.DataFrame(xtest_pr)","a1810ea6":"xtest_pr_df.columns=['lstat','rm','lstat2','lstatXrm','rm2','lstat3','lstat2Xrm','lstatXrm2','rm3']","9798bd22":"xtest_pr_df.head()","99c4b01e":"PR_pred=mp1.predict(xtest_pr_df)","dd0a072b":"plt.plot(PR_pred,Y_test,'*')","8f9cdc82":"MSE=metrics.mean_squared_error(PR_pred,Y_test)","ebc11bd9":"PR_RMSE=np.sqrt(np.mean(MSE))\nPR_RMSE","ff3e4358":"from sklearn.linear_model import Ridge,Lasso","a1f1d8e3":"rd=Ridge(alpha=0.5,normalize=True)\nrd.fit(X_train,Y_train)","3fc43647":"rd_pred=rd.predict(X_test)","54840de7":"ls=Lasso(alpha=0.05,normalize=True)\nls.fit(X_train,Y_train)","c6efb2ec":"ls_pred=ls.predict(X_test)","cd748a19":"rd.coef_","a0b32179":"ls.coef_","6c0a4882":"Variable=X_test.columns\nVariable","ff60b7a9":"ridge=pd.Series(rd.coef_,Variable).sort_values()","a7e99842":"ridge.plot(kind='bar')","e8f5639a":"lasso=pd.Series(ls.coef_,Variable).sort_values()","4b6ac1ac":"lasso.plot(kind='bar')","e439be02":"from sklearn import metrics\nfrom sklearn.model_selection import KFold\nLR=LinearRegression(normalize=True)\nridge_R=Ridge(alpha=0.5,normalize=True)\nlasso_L=Lasso(alpha=0.1,normalize=True)","09b10ed6":"kf=KFold (n_splits=3, shuffle=True, random_state=2)\nfor model, name in zip([LR,ridge_R,lasso_L],['MVLR','RIDGE','LASSO']):\n    rmse=[]\n    for train,test in kf.split(x,y):\n        X_train,X_test=x.iloc[train,:],x.iloc[test,:]\n        Y_train,Y_test=y[train],y[test]\n        model.fit(X_train,Y_train)\n        Y_pred=model.predict(X_test)\n        rmse.append(np.sqrt(metrics.mean_squared_error(Y_test,Y_pred)))\n    print(rmse)\n    print(\"cross VALIDATE RMSE score %0.03f (+\/-%0.05f)[%s]\"% (np.mean(rmse),np.var(rmse,ddof=1),name))","967717c5":"## polinomial model","5e4cd6e6":"## linear model","c1de54f8":"## compairing the model with K- fold Crosss validation method","30b5ce7a":"## RDGE and LASSO punishment for regression ","614caa66":"## quadritic (non linear form)","e8d244fd":"trying with ptratio inplace of rm hence rmse is more rm has high significance compared to ptratio","eaae2550":"there is no significance for age and indus  hence we can drope the variables in our model","2b805407":"Validate the polinomial model X_test ","f05f58b5":"lstat in not pass the test so lstat is removed from the model"}}