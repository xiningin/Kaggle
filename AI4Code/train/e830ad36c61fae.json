{"cell_type":{"61d4d2ed":"code","622d5d96":"code","7236766c":"code","f2167ff0":"code","0606df33":"code","d7ae1066":"code","8f1cfb34":"code","7dc63339":"code","aa299ebe":"code","70bb3707":"code","af31cb57":"code","b989c7a9":"code","cd72918e":"code","746ba540":"code","afc8d519":"code","99c664c9":"code","9274635f":"code","de9d96e4":"code","d9ea7c56":"code","a5ef2308":"code","050527cf":"code","3320cfa4":"code","2c8f8001":"code","ce4bf45b":"code","d0407143":"code","7a136fc7":"code","3ec73a59":"code","2cf8ab01":"code","4d64df3c":"code","d80b86d4":"code","9f51008a":"code","66c2e046":"code","76a7ef28":"code","af11f56f":"code","d3b11f26":"code","e17938c5":"code","d0f60e37":"code","5809e9b9":"code","a9a4f1a0":"code","dc8acba2":"code","04638511":"code","59a23966":"code","facd4b7e":"code","5de0e2da":"code","3328dfde":"code","d57a1cb4":"code","fbfc9e58":"code","75178f1e":"code","a18aef23":"code","846faa29":"code","a24c132c":"code","c4e9411d":"code","1ffd525f":"code","635a191e":"code","5511fd1d":"code","e90ce15b":"code","313182f7":"code","3c9a13c9":"code","bff7d68d":"code","d1f46cf7":"code","4feda1a9":"markdown","edc86b33":"markdown","e8e09db4":"markdown","2360ef46":"markdown","afbf7103":"markdown","70b1eed3":"markdown","678c39ff":"markdown","77f0ef90":"markdown","aca3b42f":"markdown","89db2184":"markdown","4134eb70":"markdown","7a71a303":"markdown","3823c7ee":"markdown","70e53dfc":"markdown","885e079c":"markdown","f42ec988":"markdown","da2ebd0a":"markdown","9e3d24d4":"markdown","e2b925ea":"markdown","f69b7e98":"markdown","da1746e3":"markdown","4bf97ea1":"markdown","078283fa":"markdown","cb5cb8d8":"markdown","eb31bdd6":"markdown","3b1199b0":"markdown","e42a8bef":"markdown","b5f4e5e7":"markdown","d82f6353":"markdown","42048bdf":"markdown","e89b4cb7":"markdown","52d34ae0":"markdown","85b764d1":"markdown","bae1eccb":"markdown","4bf06ea5":"markdown"},"source":{"61d4d2ed":"import os\nrunning_in_kaggle = os.getenv('KAGGLE_WORKING_DIR') is not None","622d5d96":"import pandas as pd\nimport numpy as np\nfrom pathlib import Path\nfrom datetime import datetime\nimport re\nimport json\nimport requests\n\nimport folium\nimport seaborn as sns\n\n%matplotlib inline\nimport matplotlib.pyplot as plt","7236766c":"# Data manipulation\n# Options for pandas\npd.options.display.max_columns = 50\npd.options.display.max_rows = 30\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom IPython import get_ipython\nipython = get_ipython()\n\n# autoreload extension\nif 'autoreload' not in ipython.extension_manager.loaded:\n    get_ipython().magic(u'load_ext autoreload')\n\nget_ipython().magic(u'autoreload 2')","f2167ff0":"# https:\/\/medium.com\/@rrfd\/cookiecutter-data-science-organize-your-projects-atom-and-jupyter-2be7862f487e\n# Base Path\nbase_path = Path.cwd()\n\n# Data paths\ndata_path = Path('..\/input') if running_in_kaggle else base_path \/ 'data'\nraw_data_path =  data_path \/ 'walmart-supply-chain-data'  if running_in_kaggle else data_path \/ 'raw'\ninterim_data_path = data_path \/ 'interim'\nprocessed_data_path = data_path \/ 'processed'\nexternal_data_path = data_path \/ 'external'\n\nsupply_chain_data_raw_fname = 'walmart-import-data-full.csv'\nsupply_chain_data_raw_path = raw_data_path \/ supply_chain_data_raw_fname\n\nkaggle_data_home = 'https:\/\/www.kaggle.com\/sunilp\/walmart-supply-chain-data\/downloads\/supply-chain-data.zip\/1'\n\n# Reports paths\nreports_path = base_path \/ 'reports'\nfigures_path = reports_path \/ 'figures'\n\n# Input paths\n\n# Folium Geojson Data\nfolium_world_countries_fname = 'world-countries.json'\nfolium_example_data_url = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\nfolium_world_countries_url = f'{folium_example_data_url}\/{folium_world_countries_fname}'\n# Local paths for Folium data\nfolium_world_countries_path = data_path \/ 'world-countries' \/ folium_world_countries_fname\n\nfolium_world_data = external_data_path \/ folium_world_countries_fname","0606df33":"# Constants and Globals\n\n# Source: http:\/\/www.dsv.com\/sea-freight\/sea-container-description\/dry-container\nTW_KG_DRY_CONTAINER_20FT = 2300 # Tare weight, i.e. weight of the container itself\nTW_KG_DRY_CONTAINER_40FT = 3750\n\nNW_KG_DRY_CONTAINER_20FT = 25000 # Net weight, i.e. weight of the payload in the container\nNW_KG_DRY_CONTAINER_40FT = 27600\n\nGW_KG_DRY_CONTAINER_20FT = (TW_KG_DRY_CONTAINER_20FT + NW_KG_DRY_CONTAINER_20FT)\nGW_KG_DRY_CONTAINER_40FT = (TW_KG_DRY_CONTAINER_40FT + NW_KG_DRY_CONTAINER_40FT)\n\nCAPACITY_CONTAINER_40FT = 67.7 # cubic capacity, in m^3\n\nUS_STD_GALLONS_PER_BBL = 42\nLITERS_PER_US_STD_GALLON = 3.785411784 # https:\/\/en.wikipedia.org\/wiki\/Gallon\nLITERS_PER_BBL = (US_STD_GALLONS_PER_BBL * LITERS_PER_US_STD_GALLON)\n\n# http:\/\/www.etc-cte.ec.gc.ca\/databases\/oilproperties\/pdf\/WEB_Gasoline_Blending_Stocks_(Alkylates).pdf\nALKYLATE_DENSITY_15C = 0.7090 # g\/mL or Kg\/L\nALKYLATE_DENSITY_38C = 0.6890 # g\/mL or Kg\/L","d7ae1066":"def coo_freq(xdata):\n    total = sum(xdata['COUNTRY OF ORIGIN'].value_counts())\n    coo_dict = xdata['COUNTRY OF ORIGIN'].value_counts().to_dict()\n    return xdata['COUNTRY OF ORIGIN'].apply(lambda cn: 100*coo_dict.get(cn,0)\/total)\n\n# See https:\/\/github.com\/python-visualization\/folium\/blob\/master\/examples\/GeoJSON_and_choropleth.ipynb\n# We don't need the GeoJSON data locally, we can just provide a URL\ndef get_folium_map_data():\n    if running_in_kaggle:\n        with open(folium_world_countries_path) as fh:\n            folium_world_data = json.load(fh)\n    else:\n        folium_world_data = json.loads(requests.get(folium_world_countries_url).text)\n    return folium_world_data\n\ndef calc_kg_per_container(row):\n    # If container count is 0, use quantity instead\n    # alternative would be to ignore these\n    cc = row['CONTAINER COUNT']\n    if cc == 0:\n        cc = row['QUANTITY']\n    return row['WEIGHT (KG)']\/max(1, row['CONTAINER COUNT'])","8f1cfb34":"folium_world_data = get_folium_map_data()\n\nif not running_in_kaggle and not supply_chain_data_raw_path.exists():\n    # Make sure the raw Kaggle data exists locally\n    print('Download the data from Kaggle here: {}'.format(kaggle_data_home))\n    print('After downloading, move the file {}\\nhere: {}'.format(supply_chain_data_raw_fname, raw_data_path))\n\nif supply_chain_data_raw_path.exists():\n    xdata = pd.read_csv(supply_chain_data_raw_path, low_memory=False)\n    # About 9% of the rows are all NA; drop them\n    xdata.dropna(axis=0, how='all', inplace=True)\nelse:\n    print('Failed to load data')\n    assert False","7dc63339":"xdata.head()","aa299ebe":"xdata.shape","70bb3707":"xdata.columns","af31cb57":"xdata['COUNTRY OF ORIGIN'].describe().to_dict()","b989c7a9":"countries_of_origin = xdata.groupby('COUNTRY OF ORIGIN').describe().xs('WEIGHT (KG)', axis=1).copy()\ncountries_of_origin.reset_index(level=0, inplace=True)","cd72918e":"coo_record_count = sum(countries_of_origin['count'])\ncountries_of_origin['pct'] = countries_of_origin['count'].apply(lambda cnt: 100*cnt\/coo_record_count)\ncountries_of_origin['logpct'] = countries_of_origin['count'].apply(lambda cnt: np.log(100*cnt\/coo_record_count))\n# We will use the sorting later\ncountries_of_origin.sort_values(by=['count', 'max'], ascending=False)","746ba540":"# Initialize the map:\nm = folium.Map(location=[30, 0], zoom_start=2, no_wrap=True)\n\n# geo_data is the map data\n\n# Add the color for the chloropleth:\n_ = folium.Choropleth(\n    geo_data=folium_world_data,\n    name='Choropleth',\n    data=countries_of_origin,\n    columns=['COUNTRY OF ORIGIN', 'pct'],\n    key_on='feature.properties.name',\n    fill_color='YlGn',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    nan_fill_color='white',\n    legend_name='Country of Origin (%)'\n).add_to(m)\n \nif not running_in_kaggle:\n    # Save to html\n    map_path = reports_path \/ 'walmart_folium_chloropleth_pct.html'\n    m.save(map_path.as_posix())\n    \nm","afc8d519":"# Initialize the map:\nm = folium.Map(location=[30, 0], zoom_start=2, no_wrap=True)\n\n# geo_data is the map data\n\n# Add the color for the chloropleth:\n_ = folium.Choropleth(\n    geo_data=folium_world_data,\n    name='Choropleth',\n    data=countries_of_origin,\n    columns=['COUNTRY OF ORIGIN', 'logpct'],\n    key_on='feature.properties.name',\n    fill_color='YlGn',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    nan_fill_color='white',\n    legend_name='Country of Origin (log %)'\n).add_to(m)\n \nif not running_in_kaggle:\n    # Save to html\n    map_path = reports_path \/ 'walmart_folium_chloropleth_logpct.html'\n    m.save(map_path.as_posix())\n    \nm","99c664c9":"xdata[xdata['COUNTRY OF ORIGIN']=='Saudi Arabia']['PRODUCT DETAILS'].describe().to_dict()","9274635f":"countries_of_origin.sort_values(by=['count'], axis=0, ascending=False).tail(4)","de9d96e4":"top_by_weight = countries_of_origin.sort_values(by=['max'], axis=0, \n                                                ascending=False)[0:10]['COUNTRY OF ORIGIN'].values\n\n# See: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/cookbook.html#cookbook-grouping\n\ntw3 = xdata.groupby(['COUNTRY OF ORIGIN']).apply(\n    lambda subf: \n        subf.sort_values('WEIGHT (KG)', \n                         ascending=False).head(3))\n\ncols_of_interest = ['COUNTRY OF ORIGIN', 'WEIGHT (KG)', 'PRODUCT DETAILS', 'ARRIVAL DATE']\n# https:\/\/www.wolframalpha.com\/input\/?i=3.75e%2B05+kg\n#  3.75e+05 kg \u2248 1.001 \u00d7 maximum takeoff mass of a Boeing 747 aircraft ( 412.8 sh tn )\nmax_takeoff_wt_747 = 3.75e+05 #kg\n\n# https:\/\/www.wolframalpha.com\/input\/?i=3e%2B07+kg\n#  \u2248 (0.7 to 1) \u00d7 mass of a Handy size cargo ship ( 28000 to 40000 lg tn )\n\nmass_handy_size = 3.0e+07 #kg\ntw3.loc[(tw3['COUNTRY OF ORIGIN'].isin(top_by_weight)) & (tw3['WEIGHT (KG)']>mass_handy_size)][cols_of_interest]","d9ea7c56":"# Because the dataframe display truncates the 'PRODUCT DETAILS' column, lets make sure we are not talking about olive oil here...\nlist(xdata[xdata['WEIGHT (KG)']>1e+09]['PRODUCT DETAILS'])[0]\n# Petroleum naphtha is an intermediate hydrocarbon liquid stream derived from the refining of crude oil","a5ef2308":"# NB 4.340600e+07 => 43406 t (metric tons)\n#  \u2248 (1.1 to 1.5) \u00d7 mass of a Handy size cargo ship ( 28000 to 40000 lg tn )\n# https:\/\/www.wolframalpha.com\/input\/?i=4.340600e%2B07+kg\n# Kuwait\t187193\tKuwait\t4.340600e+07\tGRANULAR UREA IN BULK\n\n# https:\/\/en.wikipedia.org\/wiki\/Handysize\n# Handysize is a naval architecture term for smaller bulk carriers or oil tanker with deadweight of up to 50,000 tonnes\n\n# Heaviest item\n# https:\/\/www.wolframalpha.com\/input\/?i=5.550023e%2B09+kg\n# 5.550023e+09 kg \u2248 0.93 \u00d7 mass of the Great Pyramid of Giza (\u2248 6\u00d710^9 kg )","050527cf":"xdata['log_weight_kg'] = xdata['WEIGHT (KG)'].apply(lambda x: np.log(max(1, x)))","3320cfa4":"xdata['WEIGHT (KG)'].describe()","2c8f8001":"num_bins = 25 \nn, bins, patches = plt.hist(list(xdata['log_weight_kg']), num_bins, facecolor='blue', alpha=0.5)\n_ = plt.xlabel('log(weight (Kg)) of shipment');\n_ = plt.ylabel('Count');\n_ = plt.title('Distribution of Weights of Shipments');\n_ = plt.axvline(x=xdata['log_weight_kg'].median(), color='r', linestyle='--')\n\nif running_in_kaggle:\n    plt.show();\nelse:\n    plt_path = figures_path \/ 'log_weight_kg.png'\n    plt.savefig(plt_path.as_posix(), format='png')","ce4bf45b":"xdata['kg_per_container'] = xdata.apply(calc_kg_per_container, axis = 1)","d0407143":"containerizable = xdata[xdata['kg_per_container'] <= NW_KG_DRY_CONTAINER_40FT]\ncontainerizable.shape","7a136fc7":"containerizable_pct = 100*containerizable.shape[0]\/xdata.shape[0]\nprint('Percent of shipments meet weight requirements for a 40 ft container: {:0.2f} %'.format(containerizable_pct))","3ec73a59":"num_bins = 100\nxs = containerizable['kg_per_container']\nn, bins, patches = plt.hist(xs, num_bins, facecolor='blue', alpha=0.5, density=False)\n_ = plt.xlabel('Kg Per Container');\n_ = plt.ylabel('Count');\n_ = plt.title('Containerizable Shipments');\n\nif running_in_kaggle:\n    plt.show();\nelse:\n    plt_path = figures_path \/ 'containerizable.png'\n    plt.savefig(plt_path.as_posix(), format='png')","2cf8ab01":"xdata['M.UNIT'].value_counts().to_dict()","4d64df3c":"low_units = ['F', 'CC', 'MM', 'SS', 'XX', 'FF']\ncols_of_interest = ['COUNTRY OF ORIGIN', 'WEIGHT (KG)', 'QUANTITY', 'CONTAINER COUNT',\n                    'MEASUREMENT', 'M.UNIT', 'PRODUCT DETAILS'] # , 'ARRIVAL DATE'\npd.set_option('display.max_colwidth', 125)\npd.set_option('display.max_rows', 50)\nxdata[xdata['M.UNIT'].isin(low_units)][cols_of_interest]","d80b86d4":"xic = xdata[(xdata['CONTAINER COUNT']>0) & (xdata['WEIGHT (KG)']>0) & \n            (xdata['kg_per_container']<=NW_KG_DRY_CONTAINER_40FT)]","9f51008a":"# N.B. A similar plot with swarmplot ran for over an hour without completing, see\n# https:\/\/github.com\/mwaskom\/seaborn\/issues\/1176\ng = sns.stripplot(x='MEASUREMENT', y='M.UNIT', data=xic, jitter=True)\nsns.despine() # remove the top and right line in graph\ng.figure.set_size_inches(8,6)\n\nif running_in_kaggle:\n    plt.show();\nelse:\n    plt_path = figures_path \/ 'measure_stripplot.png'\n    plt.savefig(plt_path.as_posix(), format='png')","66c2e046":"xdata_cm = xdata[(xdata['M.UNIT'] == 'CM') & (xdata['MEASUREMENT'] > 0.0)].copy()\nxdata_cm['logmeasure'] = xdata_cm['MEASUREMENT'].apply(lambda mm: np.log10(mm))","76a7ef28":"xdata_cm['MEASUREMENT'].describe()","af11f56f":"max_logmeasure = xdata_cm.logmeasure.max()\nmax_logmeasure_shipment_id = xdata_cm['logmeasure'].idxmax()\n\ng = sns.boxplot(x = xdata_cm['logmeasure'])\n# remove the top and right line in graph\nsns.despine()\n\n_ = plt.annotate(s = max_logmeasure_shipment_id,\n             xy = (max_logmeasure,0),\n             xytext=(0.85, 0.65), textcoords='axes fraction', # bottom, left\n             # Shrink the arrow to avoid occlusion\n             arrowprops = {'facecolor':'gray', 'width': 1, 'shrink': 0.09, 'headlength':9},\n             backgroundcolor = 'white')\n\n# g.figure.set_size_inches(6,4)\ng.figure.set_size_inches(8,6)\nif running_in_kaggle:\n    plt.show();\nelse:\n    plt_path = figures_path \/ 'logmeasure_box.png'\n    plt.savefig(plt_path.as_posix(), format='png')","d3b11f26":"num_bins = 25 \nn, bins, patches = plt.hist(list(xdata_cm['logmeasure']), num_bins, facecolor='blue', alpha=0.5)\n_ = plt.xlabel('log10(measurement)');\n_ = plt.ylabel('Count');\n_ = plt.title('Distribution of log10(measurement)');\n_ = plt.axvline(x=xdata_cm['logmeasure'].median(), color='r', linestyle='--')\n\nif running_in_kaggle:\n    plt.show();\nelse:\n    plt_path = figures_path \/ 'logmeasure.png'\n    plt.savefig(plt_path.as_posix(), format='png')","e17938c5":"cols_of_interest = ['SHIPPER', 'WEIGHT (KG)', 'QUANTITY', 'MEASUREMENT', 'CONTAINER COUNT', 'PRODUCT DETAILS']\nxdata_cm.sort_values(by='logmeasure', ascending=False)[cols_of_interest].head(10)","d0f60e37":"xdata_cm_sm = xdata_cm[xdata_cm['MEASUREMENT'] < CAPACITY_CONTAINER_40FT]\nxdata_cm_sm.sort_values(by='logmeasure', ascending=False)[cols_of_interest].head(10)","5809e9b9":"xdata['WEIGHT (KG)'].max()","a9a4f1a0":"xdata['ARRIVAL DATE'].describe()","dc8acba2":"alkylate = xdata[xdata['WEIGHT (KG)']>1e+09] #['PRODUCT DETAILS']\nalkylate","04638511":"# 42 U.S. standard gallons to liters => 4672 L (liters)","59a23966":"bahamian_entries = xdata[xdata['COUNTRY OF ORIGIN']=='Bahamas']\n_ = bahamian_entries.sort_values('WEIGHT (LB)', ascending=False)['PRODUCT DETAILS']\nbahamian_entries.shape","facd4b7e":"bahamian_entries.columns","5de0e2da":"bahamian_entries[bahamian_entries['WEIGHT (KG)'] > 2*max_takeoff_wt_747]","3328dfde":"bah_187736 = bahamian_entries.loc[187736].to_dict()","d57a1cb4":"bah_187736['PRODUCT DETAILS']","fbfc9e58":"import re\nrex = re.compile('([0-9]*\\.[0-9]*)')\nbbls = float(rex.search(bah_187736['PRODUCT DETAILS'])[0])\nbbls","75178f1e":"US_STD_GALLONS_PER_BBL = 42\nLITERS_PER_US_STD_GALLON = 3.785411784 # \nLITERS_PER_BBL = (US_STD_GALLONS_PER_BBL * LITERS_PER_US_STD_GALLON)\nbah_187736_liters = (bbls * LITERS_PER_BBL)\n\n# http:\/\/www.etc-cte.ec.gc.ca\/databases\/oilproperties\/pdf\/WEB_Gasoline_Blending_Stocks_(Alkylates).pdf\nALKYLATE_DENSITY_15C = 0.7090 # g\/mL or Kg\/L\nALKYLATE_DENSITY_38C = 0.6890 # g\/mL or Kg\/L\n\nprint(bah_187736_liters, bah_187736_liters * pd.Series([ALKYLATE_DENSITY_15C, ALKYLATE_DENSITY_38C]))","a18aef23":"bah_187736['WEIGHT (KG)']","846faa29":"# Assume linearity in range between 15C and 38C\n# x axis is temperature (C), y axis is density (Kg\/L)\nslope = (ALKYLATE_DENSITY_38C - ALKYLATE_DENSITY_15C)\/(38-15)\nintercept = -38*slope + ALKYLATE_DENSITY_38C","a24c132c":"xs = range(14, 39, 1)\nys = slope*pd.Series(xs) + intercept\nplt.plot(xs, ys);","c4e9411d":"weight = bah_187736['WEIGHT (KG)']\ndensity = weight \/ bah_187736_liters","1ffd525f":"bah_187736_temp = (density - intercept)\/slope\nbah_187736_temp","635a191e":"# mean temperature bahamas\n# bahamas historical temperatures\n\n# https:\/\/www.timeanddate.com\/weather\/bahamas\/nassau\/historic?month=1&year=2013\n# ship transit time bahamas to new york\n# http:\/\/ports.com\/sea-route\/port-of-new-york,united-states\/port-of-nassau,bahamas\/\n\n# We have the date the shipment arrived in NY\nbah_187736['FOREIGN PORT'], bah_187736['US PORT']","5511fd1d":"# http:\/\/www.worldportsource.com\/ports\/BHS_Port_of_South_Riding_Point_1322.php\n# Freeport, Grand Bahama, Bahamas\n\n# http:\/\/ports.com\/sea-route\/port-of-new-york,united-states\/port-of-nassau,bahamas\/#\/?a=0&b=1855&c=Port%20of%20New%20York,%20United%20States&d=Port%20of%20South%20Riding%20Point,%20Bahamas\n# http:\/\/ports.com\/sea-route\/\n# Port of South Riding Point\n\n# give time at sea of 4.4 days at 10 knots\n# 3.2 days at 14 knots\n# https:\/\/en.wikipedia.org\/wiki\/Bulk_carrier\n\nbah_187736['ARRIVAL DATE']","e90ce15b":"# looking back 4 days from the arrival date, we see the temperature in Nassau, Bahamas \n# has a low of 21C and a high of 27C, so this seems plausible\n# Since density declines with increasing temperature, a measurement at a higher \n# temperature would show a lower weight, so it is unlikely that the shipment is short.","313182f7":"weight\/ALKYLATE_DENSITY_15C","3c9a13c9":"bah_187736_liters","bff7d68d":"(weight\/ALKYLATE_DENSITY_15C)\/bah_187736_liters","d1f46cf7":"bah_187736_liters\/(weight\/ALKYLATE_DENSITY_15C)","4feda1a9":"## Weighty Matters","edc86b33":"With xdata['WEIGHT (KG)'].describe(), we see that the mean weight of a shipment is 48815.86 Kg, which Wolfram Alpha helpfully says is about half of the cargo mass capacity of a Boeing 747\u2013200F aircraft. Plotting a histogram of the 'log_weight_kg' column gives us:","e8e09db4":"# Functions","2360ef46":"Companion notebook for my Medium.com article \"Uncover hidden gems with Exploratory Data\u00a0Analysis\". The original data set is here: https:\/\/www.kaggle.com\/sunilp\/walmart-supply-chain-data\n\nThe initial notebook was created from a template. See my article \"Create a template for your Jupyter Notebooks\" here: https:\/\/medium.com\/@jhurley_97842\/create-a-template-for-your-jupyter-notebooks-80352d265cd4.","afbf7103":"Now that we have identified which countries ship the largest number of items, let's look at the countries that ship the heaviest items. The Pandas Grouping Cookbook was very helpful in figuring out the expressions below.","70b1eed3":"# Description","678c39ff":"Now let us turn to the most common 'M.UNIT', 'CM'. Using describe(), we know that there are very large values and zero values for 'MEASUREMENT' if 'M.UNIT' == 'CM', so we take a subset:","77f0ef90":"We see that the top country of origin is China, accounting for 72% of the shipments (by number).\nHowever, there are 71 unique countries, so who else is selling to Walmart? We could look at\na histogram, but it would have more visual impact to see it on a map.\n\nTo do this, we can make a choropleth map, where different shades of colors for each country will\nshow the percentage of shipments. We can use\n[Folium](https:\/\/pypi.org\/project\/folium\/) which uses Python and the Leaflet.js library to create\ninteractive maps for data visualization.\n\nA Folium Choropleth map needs a data frame and two columns, one that is used to index into\nthe JSON mapping data and the other that contains a value that is used to pick a shading color \non the map.\n\nAlthough I'm sure there are many more efficient ways of doing this, since this is \n_exploratory_ data analysis, and the data set is not that large, we can use _groupby_, _describe_ \nand _xs_ to quickly make a dataframe with the columns needed to make a Folium map. If you are\nhaving difficulty seeing how I ended up with that expression, break it into parts and display it. I\ndon't really care about the 'WEIGHT (KG)' column right now, just that we can use its 'count' field.","aca3b42f":"The annotation we added shows the row id of this extreme outlier. We can also see from the plot and describe() that the interquartile range is 58 (from 7 to 65), there are a bunch of outliers from roughly 2000\u201350000, then a few above that.","89db2184":"We can take a guess that 'CM' means cubic meters, 'CF' is cubic feet, but what about the rest? To harp on my original point, we should not have to guess; these should be given in the data dictionary. Since it appears we must guess, let us start out with the less common measurements.","4134eb70":"Aha, it seems to be coffee transshipped from Ethiopia. A glance at the other two items shows granite slabs and personal effects, not the expected pertroleum products. One other thing of note is that the 'PRODUCT DETAILS' entry has some weird word break issues (which is not limited to this entry).\nLooking at the tail end of the sorted dataframe, I see Korea, which I would imagine should have more than one shipment given how big they are in the electronics space.","7a71a303":"This is more instructive, since it shows relative positioning amongst the runners-up. Looking at this map made me curious about the countries that were almost zero but not quite. Visually, _Saudia Arabia_ stands out as a curiosity. Looking at the tail end of the sorted dataframe, I see _Korea_, which I would imagine should have more than one shipment given how big they are in the electronics space.","3823c7ee":"For the six less common 'M.UNIT' values in low_units, the only pattern I could readily discern is that if 'M.UNIT' is either 'F', 'FF or 'MM'', then 'MEASUREMENT' is zero, so perhaps these are ignorable. The others will have to remain a mystery until we can talk with the data owners.\n\nWe can get a quick overview of the distribution over all the units using seaborn to make a stripplot. We limit ourselves to a subset of the data that might fit in a 40 ft container.","70e53dfc":"Petroleum naphtha is an intermediate hydrocarbon liquid stream derived from the refining of crude oil. Looking through the product details, we see that the heaviest shipments are petroleum products (ALKYLATE, GASOLINE, NAPTHA), building materials (ROCK and CEMENT), and GRANULAR UREA (!?). Beats the piss out of me what they do with that\u2026\n\nThe hidden gems here for me were the various unexpected countries that supplied petroleum products, and that one of the expected oil exporters\u00a0\n(Kuwait) shipped UREA instead. One other interesting factoid, courtesy of Wolfram Alpha, is that the NAPHTHA shipment from Venezuela weighs almost as much as the Great Pyramid of Giza.","885e079c":"This isn't very useful, because China dominates so thoroughly that everything else is close to zero. The white areas are countries that are not shipping to Walmart (at least in this data). The yellow areas ship to Walmart, but in single digit percentages.\n\nThere was a reason that I added two columns to countries_of_origin above. Let's plot the map again, but this time use the log of shipment percentage.","f42ec988":"To highlight the importance of creating a data dictionary for each dataset, we now consider the 'M.UNIT' column. I am assuming that 'M.UNIT' is the units for the 'MEASUREMENT' column (if so, this relationship should be recorded in the data dictionary).","da2ebd0a":"## Another Dimension","9e3d24d4":"By sheer coincidence, the top item in this list is also cookware, with a weight per carton of 13.2 Kg, the same as above. A quick check for an 18 piece cookware set on Amazon gives us one with product dimensions of 11.5 x 22.8 x 13 inches (3409 in\u00b3 or 0.05586 m\u00b3) and a shipping weight of 21.9 pounds. This is a bit lighter than the cookware in the shipment here, and if we scale up the volume by the ratio of the weight differences, we get 0.074225 m\u00b3. All 942 sets, perfectly packed, would then need a volume of about 69.92 m\u00b3, which is in the ballpark (4.3% over) of the 'MEASUREMENT' value of 67.\n\nWe could look at some more examples, but there is some evidence that 'CM' means cubic meters. A more important take-away from this section is that this data set appears to need a lot of cleaning up before it could be used for predictions.\n\n## Fraud check\n\nIn our exploration of the heaviest shipments, the items from the Bahamas surprised me\u200a-\u200aI think of blue water and sandy beaches when I think of the Bahamas, not oil exports. The description for the heaviest Bahamian export is \"1 BULK 277328.140 BARRELS ALKYLATE\". Alkylate is a high-octane blending component for motor gasoline. For the sake of argument, let's suppose that the auditing team wanted to check up on this for possible fraud. It might not seem like there enough data to be useful, but let's see if we can help the audit team change this from a yellow flag (questionable) to either a red flag (fraud) or green flag (normal transaction.)\n\nWe will leave fields like SHIPPER and CONSIGNEE ADDRESS to our crack team of private investigators while we look at something a bit more esoteric. One important thing to point out: I am not a subject matter expert on petroleum shipments, so I am making assumptions here.\n\nAs a side note, I became interesting in this entry when I was looking at weight per container; 'CONTAINER COUNT' is 1 but the weight is massive so it messed up my nice histograms.\n\nFrom PRODUCT DETAILS we have the quantity: 277328.140 BARRELS. The density of alkylate depends on temperature. If we assume that density varies linearly in the 15\u201338 \u00b0C range, we can derive a formula for the temperature given weight and density.\n\nWe have the number of barrels, and the fact that a barrel is 42 U.S. standard gallons which after conversions gives us the number of liters. We get the weight from the 'WEIGHT (KG)' column and dividing gives us the density. Plugging that into our linear formula, we find the temperature was 21.24 \u00b0C. (These calculations are spelled out in the Jupyter notebook).\n\nThe 'ARRIVAL DATE' was 01\/31\/2013. A Handysize ship travels at about 14 knots; using this site we see that travel time is 3.2 days from Nassau, Bahamas to New York, and the weather on 01\/27\/2013 had a low of 21\u00b0C and a high of 27 \u00b0C in Nassau. So the weight and product details seem plausible.\n\nTo finalize this, one would have to look at the contract. One agreement (not involving Walmart) that I found in SEC archives has this clause:\n\n```\"Barrel\" - 42 U.S. standard gallons measured at 60 degrees Fahrenheit [15.556 \u00b0C].```\n\nIf we suppose that this same temperature applied here, how far off would we be? Simple algebra shows us that they shipped 0.7% more than necessary if this were the case. I think we can tell the auditors to mark this with a green flag.\n","e2b925ea":"Since we have the fields 'WEIGHT (KG)' and 'CONTAINER COUNT' we can figure out what percentage of shipments would fit in standard shipping containers.\n\nGiven that the 'WEIGHT (KG)' covers almost 10 orders of magnitude, and also includes some zero values, \nwe will find it useful to add a column, 'log_weight_kg'.","f69b7e98":"How about looking at 'COUNTRY OF ORIGIN'? It might be interesting to see where Walmart's goods\nare coming from.","da1746e3":"The weight per container basically steadily declines, apart from a hill at around 19000 Kg\/container. This might be an interesting area for further research.","4bf97ea1":"where the red dashed line is the median.\u00a0\nNext, let us look at shipments that could potentially be shipped in a standard 20 or 40 foot shipping container, by weight. Here I am going to make the assumption that 'WEIGHT (KG)' is the net weight of the shipment.\n\nAdd a 'kg_per_container' to the dataset, where we normalize missing values so that we have at least one container for each shipment.","078283fa":"# Main","cb5cb8d8":"## Pack It\u00a0In","eb31bdd6":"We consider it 'containerizable' if it meets the weight requirement for a 40 ft container, and a simple calculation shows that this is true for 99.6% of the shipments. By narrowing our attention to this vast majority of shipments, setting aside the bulky outliers, we can get a more fine-grained picture of these smaller shipments.","3b1199b0":"We can use the seaborn package on this subset to give us a nice boxplot, which is a different view from what we saw with stripplot above.","e42a8bef":"## Jupyter-specific Imports and Settings","b5f4e5e7":"Recall that countries_of_origin was constructed using groupby and 'WEIGHT (KG)', so max here refers to the weight. I have to admit that I was quite surprised at the countries that showed up at the top, but even more surprised when I saw what those products were.\n\nThe shipment from Venezuela was the heaviest, by two orders of magnitude. Because the dataframe display truncates the 'PRODUCT DETAILS' column, lets make sure we are not talking about olive oil here\u2026","d82f6353":"# Analysis of Walmart Supply Chain Data from Kaggle","42048bdf":"## Library Imports","e89b4cb7":"# Environment","52d34ae0":"## File Paths","85b764d1":"---\n\nThe top entry, our extreme outlier, is very suspicious looking. If 'MEASUREMENT' is in cubic meters, this would be a volume equivalent to about 10% of annual global oil shipments. Even more unbelievable is the 'QUANTITY' field. If correct, this shipment alone would supply a 40' [sic] HD LCD TV to one out of three people on Earth. I just don't believe it.\n\n\n---\n\nMoving down the table to 'Meyer Industries', we come up with a weight\/unit of 13.2 Kg, which is plausible for a set of aluminum cookware. I still can't make the 'MEASUREMENT' field work however. From a weight perspective, this could have been shipped in as few as six 40 ft containers, less than the 16 reported. However, sixteen 40 ft containers only have a capacity of 1083 cubic meters, far less than the 29K m\u00b3 in the 'MEASUREMENT' field.\nIs there any hope that our guess is correct that 'M.UNIT' of 'CM' is cubic meters? Let's take a look at some values from the third quantile.","bae1eccb":"## Constants and Globals","4bf06ea5":"Sure enough, South Korea is number three by count, which we see if we replace tail(4) with head(3) above, which means that the lone shipment for Korea is a data entry error. See also China Taiwan and Taiwan. Some feedback to the owners of this data would be to require standard country names when inputting data.\n\nBefore we move away from the mapping section, I wanted to point out one oddity of Folium that took me a bit of time to figure out. To set the key_on parameter of the choropleth function correctly, I looked at the Folium data file folium\/examples\/data\/world-countries.json to find the names in the data structure, giving me key_on='feature.properties.name'."}}