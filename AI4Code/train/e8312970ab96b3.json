{"cell_type":{"32f95c2c":"code","55eed66d":"code","b98aa9d0":"code","cafee54f":"code","57279a69":"code","8c477632":"code","7320e2b9":"code","1d05abc4":"code","87ba8dc3":"code","f769f0fa":"code","605231d5":"code","3a7b16c0":"code","67adea1a":"code","7f8916c8":"code","ddbeb740":"code","7c439754":"code","93775a4f":"code","a5fda53d":"code","7106fc78":"code","9b41c89c":"code","7ca558da":"code","ca5b160f":"code","f85ed55a":"code","249c3a78":"code","90e1f846":"code","1205fa0b":"code","8cf315c2":"code","5a425b21":"code","3d2f3534":"code","bdc9b077":"code","29576426":"code","571e54d9":"code","9f761d4b":"code","6552c89c":"code","6cbffba0":"code","6994d5b9":"code","561519c3":"code","2c84b4cf":"code","cebd2088":"code","b3d672de":"code","68aa2c01":"code","54d92e01":"code","85e3b294":"code","26d03d72":"code","ce23bec3":"code","c24babb2":"code","e18aa0c5":"code","741c1080":"code","7af67f02":"code","89585106":"code","10c360db":"code","143d35ca":"code","00651085":"code","624960dd":"code","6a56bf26":"code","13d16f4e":"code","5d662550":"code","46973be6":"code","d779206a":"code","972e7a30":"code","22616df9":"markdown","b45d366a":"markdown","af0a7ee1":"markdown","02844d2d":"markdown","8267e515":"markdown","5191c3de":"markdown","ed57e5ce":"markdown","4f50573c":"markdown","e1f362c4":"markdown","04a6de3d":"markdown","d5bf6a65":"markdown","d653283d":"markdown","c735de5d":"markdown","bdf7298f":"markdown","3821da82":"markdown","f53ea98b":"markdown","c318160c":"markdown","3bf52d3b":"markdown","5d4ee457":"markdown","8f6ab189":"markdown","8ab8f912":"markdown","114678cd":"markdown","a87addb2":"markdown","4f702202":"markdown","a438acb9":"markdown","3bb0d97a":"markdown","b086f370":"markdown","809c1d5c":"markdown","b2d83b07":"markdown","7bf0cf4a":"markdown","7cce3cb6":"markdown"},"source":{"32f95c2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","55eed66d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","b98aa9d0":"import warnings\nwarnings.filterwarnings(\"ignore\")","cafee54f":"data=pd.read_csv('\/kaggle\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\ndata.head()","57279a69":"data.drop('EmployeeNumber',axis=1,inplace=True)","8c477632":"for i in data.columns:\n    if data[i].nunique()==1:\n        data.drop(i,axis=1,inplace=True)","7320e2b9":"data.info()","1d05abc4":"for i in data.columns:\n    if data[i].dtype=='O':\n        print(i)\n        print(data[i].unique())\n        print()","87ba8dc3":"for col in data.columns:\n    if data[col].dtype=='O':\n        un = data[col].unique()\n        var=0\n        for i in un:\n            data[col].replace(i,var,inplace=True)\n            var+=1","f769f0fa":"data.head()","605231d5":"cat=['Attrition','BusinessTravel','Department','Education','EducationField','EnvironmentSatisfaction',\n     'Gender','JobInvolvement','JobLevel','JobRole','JobSatisfaction','MaritalStatus','OverTime','WorkLifeBalance',\n     'StockOptionLevel','RelationshipSatisfaction','PerformanceRating'] ","3a7b16c0":"cat_data= data[cat]\ncat_data.head()","67adea1a":"fig_dims = (20,15)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#mask=np.triu(np.ones_like(cat_data.corr(),dtype=bool))\n\ncmap=sns.diverging_palette(h_neg=15,h_pos=240,as_cmap=True)\nsns.heatmap(cat_data.corr(),center=0,cmap=cmap,linewidths=1,annot=True,fmt='.2f',ax=ax);","7f8916c8":"for a in cat_data.columns:\n    sns.countplot(cat_data[a])\n    plt.show()","ddbeb740":"quan=data.columns.to_list()\nfor i in cat:\n    quan.remove(i)","7c439754":"quan_data=data[quan]\nquan_data.head()","93775a4f":"fig_dims = (20,15)\nfig, ax = plt.subplots(figsize=fig_dims)\n\n#mask=np.triu(np.ones_like(quan_data.corr(),dtype=bool))\n\ncmap=sns.diverging_palette(h_neg=15,h_pos=240,as_cmap=True)\nsns.heatmap(quan_data.corr(),center=0,cmap=cmap,linewidths=1,annot=True,fmt='.2f',ax=ax);","a5fda53d":"sns.pairplot(quan_data);","7106fc78":"for a in quan_data.columns:\n    sns.distplot(quan_data[a])\n    plt.show()","9b41c89c":"def ecdf(data):\n    n = len(data)\n    x = np.sort(data)\n    y = np.arange(1, n+1) \/ n\n    return x, y","7ca558da":"for a in quan_data.columns:\n    x1,y1=ecdf(quan_data[a])\n    x2,y2=ecdf(np.random.normal(np.mean(quan_data[a]),np.std(quan_data[a]),size=10000))\n    plt.plot(x1,y1,marker='.',linestyle=None)\n   \n    plt.xlabel(a)\n    plt.plot(x2,y2)\n    plt.legend(['Real', 'Theory'])\n    plt.show()","ca5b160f":"MonthlyIncome=quan_data['MonthlyIncome']\nquan_data.drop('MonthlyIncome',axis=1,inplace=True)","f85ed55a":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler().fit(quan_data)\n\nquan_data_col_name=quan_data.columns\nquan_data_col_name","249c3a78":"quan_pre_data=pd.DataFrame(ss.transform(quan_data),columns=quan_data_col_name)","90e1f846":"for a in quan_pre_data.columns:\n    sns.distplot(quan_pre_data[a])\n    plt.show()","1205fa0b":"quan_pre_data.head()","8cf315c2":"cat_data.head()","5a425b21":"MonthlyIncome.head()","3d2f3534":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt","bdc9b077":"y=MonthlyIncome\nx=pd.concat([quan_pre_data,cat_data],axis=1)\n\nX_train,X_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=12)\nX_train.iloc[:,:13]","29576426":"lcv=LassoCV().fit(X_train,y_train)\nlcv.alpha_","571e54d9":"print(lcv.score(X_train,y_train))\nprint(lcv.score(X_test,y_test))","9f761d4b":"lcv_mask=lcv.coef_!=0\nlcv_mask","6552c89c":"rfr=RandomForestRegressor().fit(X_train,y_train)\ngbr=GradientBoostingRegressor().fit(X_train,y_train)","6cbffba0":"print(rfr.score(X_train,y_train))\nprint(rfr.score(X_test,y_test))\nprint()\nprint(gbr.score(X_train,y_train))\nprint(gbr.score(X_test,y_test))","6994d5b9":"rfr.feature_importances_","561519c3":"importances_rf=pd.Series(rfr.feature_importances_,index=X_train.columns)\nimportances_rf_sort=importances_rf.sort_values()\nimportances_rf_sort.plot(kind='barh',figsize=(10,10));","2c84b4cf":"importances_gbr=pd.Series(gbr.feature_importances_,index=X_train.columns)\nimportances_gbr_sort=importances_gbr.sort_values()\nimportances_gbr_sort.plot(kind='barh',figsize=(10,10),color='red');","cebd2088":"importances_lcv=pd.Series(lcv.coef_,index=X_train.columns)\nimportances_lcv_sort=importances_lcv.sort_values()\nimportances_lcv_sort.plot(kind='barh',figsize=(10,10),color='green');","b3d672de":"rfe_rfr=RFE(estimator=RandomForestRegressor(), n_features_to_select=15, step=3, verbose=1).fit(X_train,y_train)","68aa2c01":"print(rfe_rfr.score(X_train,y_train))\nprint(rfe_rfr.score(X_test,y_test))","54d92e01":"sqrt(mean_squared_error(y_test,rfe_rfr.predict(X_test)))","85e3b294":"rfr_mask=rfe_rfr.support_","26d03d72":"rfe_gbr=RFE(estimator=GradientBoostingRegressor(), n_features_to_select=15, step=3, verbose=1)\nrfe_gbr.fit(X_train,y_train)","ce23bec3":"print(rfe_gbr.score(X_train,y_train))\nprint(rfe_gbr.score(X_test,y_test))","c24babb2":"gbr_mask=rfe_gbr.support_\nvotes=np.sum([lcv_mask,gbr_mask,rfr_mask],axis=0)\nvotes","e18aa0c5":"mask = votes>=2\nmask","741c1080":"mask_data=X_train.loc[:,mask]\nmask_data.head()","7af67f02":"from sklearn.decomposition import PCA\npca=PCA().fit(mask_data)","89585106":"pca=PCA().fit(mask_data)\n\nprint(pca.explained_variance_ratio_)\nprint()\nprint(print(pca.explained_variance_ratio_.cumsum()))","10c360db":"len(pca.components_)","143d35ca":"plt.plot(pca.explained_variance_ratio_)","00651085":"del data,quan_data,cat_data,quan_pre_data","624960dd":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_dist={'loss':['ls', 'lad', 'huber', 'quantile'],\n           'n_estimators':randint(100,200),\n           'max_depth':randint(1,5)\n           }\ncv=GradientBoostingRegressor()\n\nfinal_modelCV=RandomizedSearchCV(cv,param_dist,cv=10,verbose=True,n_jobs=-1)","6a56bf26":"final_modelCV.fit(mask_data,y_train)","13d16f4e":"final_modelCV.score(mask_data,y_train)","5d662550":"final_modelCV.best_params_","46973be6":"final_modelCV.score(mask_data,y_train)","d779206a":"final_modelCV.score(X_test.loc[:,mask],y_test)","972e7a30":"sqrt(mean_squared_error(y_train,final_modelCV.predict(X_train.loc[:,mask])))","22616df9":"# Ploting countplot for Qualitative Data\nTo visualise distribution  ","b45d366a":"# Plotting for Important feature by GradientBoostingRegressor ","af0a7ee1":"# Pairplot for Quantitative Data\n* For understanding correlation of quantitative data visually ","02844d2d":"***As we can observe we need all columns to cover the full variability of our data***\nif we okay to remove few columns to make our model less complex, we can remove them but it may lead to a bit less accuracy (this is generally used to a data set which has too many columns)\nBut in our data we have very less no. of columns and we want all feature for full variblity in this case. so, we'll be not Using PCA","8267e515":"# Plotting for Important feature by Lasso ","5191c3de":"# StandardScaler\n* With StandardScaler we'll be bringing all feature on the same scale\n* Scalling data always result in better Score","ed57e5ce":"# Checking data Distrubution of Quantitative Data by ploting distplot and ECDF\n* we will check for normal distrubution using this plot \n* If continues data is not in the normal form we'll try to make it normal by necessary transformation\n* Only if we are getting low Accuracy\/Score","4f50573c":"# Heatmap for Qualitative Data\n1. * For checking of highly correlated columns.\n1. * we'll drop one of two highly correlated columns(90%) which will help us to reduce the dimensionality of data ","e1f362c4":"# Applying PCA for feature extraction\nLet's apply Principal component analysis and let's try to reduce more complexcity of our data\nPCA help our model to not get overfit\nNote:- Before applying PCA make sure you data is Scaled otherwise our model will underfit","04a6de3d":"# Heatmap for Quantitative Data\n* For checking of highly correlated columns.\n* we'll drop one of two highly correlated columns(90%) which will help us to reduce the dimensionality of data ","d5bf6a65":"\nhere elbow point comes on 3 that means for maximum variability by least no.of feature is 3+1=4. plus 1 because of plot stats from 0 which means 0 is also considered as column similar to indexing","d653283d":"**Bring Quantitative and Qualitative data together for Preparing the ML model**\n* and diving data into training and testing","c735de5d":" # Identifying as well as Separating Quantitative and Qualitative data\n*  cat contains the name of column which have name of ***Qualitative(categorical)*** data","bdf7298f":"# Selecting top 15 feature from RandomFroestRegressor and GradientBoostingRegressor with RFE\nwe are using RFE (Recursive feature elimination) for more control on feture elimination","3821da82":"**We can observe that after scaling our distribution remain the same because scaling never change the distribution**","f53ea98b":"# Plotting for elbow\nPlotting for elbow point which determine no. of column of PCA which can be used for maximum variance in data\nThis is genrally used for Data set which have too many columns like more then 100.","c318160c":"# Trainng RandomForestRegressor, GradientBoostingRegressor for feature Selection \nFor creating a mask of important feature by both algorithm","3bf52d3b":"# Observation from ECDF and Distplot\n* Most of columns are discrete in nature and very few columns are continues\n* As of know we'll not be making our continues data Normal\n* If the features or columns are selected during the Feature selection with that our accuracy\/score is less then we'll go for making our data normal","5d4ee457":"# Feture Selection for reducing complexcity of our ML model\n\n* As we know Lasso, RandomForestRegressor, GradientBoostingRegressor work on by the principal of features selection or features importance. \n* We can use this information for selecting important columns for the prediction.\n\n* We have used LassoCV which Lassos regressor with the implementation ofgrid search for Hypertuning well know as L2 regularization","8f6ab189":"**Removing columns which have only one value**","8ab8f912":"* We can covert categorical data into a suitable data format( integer ) for fitting the ML model. For this, we can use the pandas ***get_dummies* **Function. I'll prefer to use ***LabelEncoder*** because it does not increase the dimensionality of data but get_dummies do increase the dimensionality of data which may lead to a complex ML model.\n* Here I have not used LabelEncoder instead i have written a code that is doing the same as LabelEncoder.","114678cd":"Removing EmployeeNumber column as it's ID\/ we can also set it as index","a87addb2":"*Fitting data to L2 regularization *","4f702202":"# Data Processing\n","a438acb9":"# Preparing Quantitative data","3bb0d97a":"**Let's print details of columns which have Cataorical Data**","b086f370":"Masking mask of columns that have coefficients more than Zero. ie, Important features","809c1d5c":"# Plotting for Important feature by RandomForestRegressor ","b2d83b07":"# Importing Data","7bf0cf4a":"# Voting for Feature selection by all three algorithm","7cce3cb6":"# Fitting Final ML model and Hyper parameter tuning Using **RandomizedSearchCV**\nHere we'll be fitting the ML model which contains only important data. ie, mask_data(data from feature Selection)"}}