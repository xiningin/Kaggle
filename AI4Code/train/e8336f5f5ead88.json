{"cell_type":{"27116609":"code","8c65eaa4":"code","c34ea676":"code","a0d3499b":"code","5744e913":"code","5c9f9c2e":"code","f50e3186":"code","8e2221dd":"code","75f35e14":"code","443ed52c":"code","c2755bbc":"code","0c6c80cb":"code","91f2c7b2":"code","e6d048cb":"code","bbf100f4":"code","0f2f333e":"code","5461eea7":"code","c443adfd":"code","42139071":"code","0f251f4d":"code","a5ce5c62":"code","f16d7d1c":"code","1a9d7d28":"code","5c9bfd53":"code","85900f6b":"code","031c39c7":"code","71196e6c":"code","0eedd2bb":"code","02955262":"code","350a024b":"code","0becf48d":"code","d4ff545e":"code","e619be4f":"code","d6e8234e":"code","9cb9a2b0":"code","ef50dea7":"code","20005367":"code","a238f2f2":"code","61032c4e":"code","7bb29da6":"code","303a0932":"code","3f9e8787":"code","740445df":"code","a164f8f1":"code","25fe4acc":"code","e3242cae":"code","dea77272":"code","bd36cde8":"code","9571373e":"code","0d33e4ff":"code","8e8b1a6e":"code","eeba8e10":"code","19a54de0":"code","d61276c4":"code","390e6810":"code","b18eabd7":"code","2401ce16":"code","e599d5ee":"code","a648a960":"code","07ee644a":"code","4474f2df":"code","cdb4d07f":"code","79a23b90":"code","f947b340":"code","493e6d2d":"code","22ba8acb":"code","aaa31b63":"code","165fe6ab":"code","952ade77":"code","aa22eb55":"code","dd48ced8":"code","e69a3c04":"code","9b588ffe":"code","23354292":"code","4373164c":"code","f3d68983":"code","78165248":"code","470bc7ac":"code","0db5480c":"code","9242bde0":"code","a8d149a0":"code","32914685":"code","e1876ff1":"code","309c00d2":"code","f90bd140":"code","91dcd0e6":"code","8e7d672f":"code","2f26fc67":"code","6e50e7fd":"code","bdc9e665":"code","f8304940":"markdown","e53bdfb1":"markdown","8f4f14bd":"markdown","59bfc7ae":"markdown","a2a22d9d":"markdown","ab85d3eb":"markdown","82075dc6":"markdown","f0f8cc7b":"markdown","f60f922b":"markdown","d6666db7":"markdown","a6f77eb5":"markdown","94499961":"markdown","7097ceb1":"markdown","5394dcd6":"markdown","a1935dab":"markdown","95d17fe2":"markdown","b1dfa430":"markdown","d231e422":"markdown","05451994":"markdown","82cd1159":"markdown","6b08b541":"markdown","36b08b0d":"markdown","61d433c3":"markdown","29b0215d":"markdown","a1567eee":"markdown","6db7db5d":"markdown","93367ab5":"markdown","dd58db50":"markdown","0935a317":"markdown","65f25c16":"markdown","2e68794f":"markdown","3ad8377b":"markdown","12922c4d":"markdown","0590aad3":"markdown","6692c83b":"markdown","d6d5416a":"markdown","51b54ae7":"markdown","d5677de8":"markdown","f03b9775":"markdown","9a0bfd8c":"markdown","0d6daedb":"markdown","46aed96c":"markdown","fc42b077":"markdown","6f604a9e":"markdown","b073c4cd":"markdown","be6c249d":"markdown","25b21262":"markdown","667042b4":"markdown"},"source":{"27116609":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns  # visualization tool\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c65eaa4":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","c34ea676":"test_df.head()","a0d3499b":"train_df.columns #Showing features\n","5744e913":"train_df.head() #First 5 rows","5c9f9c2e":"train_df.corr()","f50e3186":"train_df.describe() #Statistical info","8e2221dd":"train_df.info()","75f35e14":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \n    \"\"\"\n    var = train_df[variable] #get feature\n    \n    varValue = var.value_counts() #count number of categorical\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","443ed52c":"category1 = [\"Survived\", \"Embarked\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)\n","c2755bbc":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","0c6c80cb":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","91f2c7b2":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","e6d048cb":"#Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","bbf100f4":"#Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","0f2f333e":"#SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","5461eea7":"#Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","c443adfd":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        \n        Q1 = np.percentile(df[c],25) # 1st quartile\n        Q3 = np.percentile(df[c],75) # 3rd quartile\n        \n        IQR = Q3 - Q1 #IQR\n        \n        outlier_step = IQR * 1.5 # outlier step\n        \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index # detect outliers and their indices\n        \n        outlier_indices.extend(outlier_list_col) # store indices\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v >2)\n    \n    return multiple_outliers","42139071":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","0f251f4d":"train_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","a5ce5c62":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","f16d7d1c":"train_df.head()","1a9d7d28":"train_df.columns[train_df.isnull().any()] # Finding features which include null","5c9bfd53":"train_df.isnull().sum()","85900f6b":"train_df[train_df[\"Embarked\"].isnull()]","031c39c7":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","71196e6c":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","0eedd2bb":"train_df[train_df[\"Fare\"].isnull()] # to fill  Fare on this ","02955262":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","350a024b":"train_df[train_df[\"Fare\"].isnull()]","0becf48d":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot=True, fmt = \".2f\")\nplt.show()","d4ff545e":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e619be4f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","d6e8234e":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9cb9a2b0":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","ef50dea7":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","20005367":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\", bins = 25)\ng.add_legend()\nplt.show()","a238f2f2":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","61032c4e":"train_df[train_df[\"Age\"].isnull()]","7bb29da6":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","303a0932":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","3f9e8787":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","740445df":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","a164f8f1":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","25fe4acc":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","e3242cae":"train_df[train_df[\"Age\"].isnull()]","dea77272":"train_df[\"Name\"].head(10)","bd36cde8":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","9571373e":"train_df[\"Title\"].head(10)","0d33e4ff":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8e8b1a6e":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","eeba8e10":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","19a54de0":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","d61276c4":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","390e6810":"train_df.head()","b18eabd7":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","2401ce16":"train_df.head()","e599d5ee":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","a648a960":"train_df.head()","07ee644a":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","4474f2df":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","cdb4d07f":"train_df.head(10)","79a23b90":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","f947b340":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","493e6d2d":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","22ba8acb":"train_df[\"Embarked\"].head()","aaa31b63":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","165fe6ab":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","952ade77":"train_df[\"Ticket\"].head(20)","aa22eb55":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","dd48ced8":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","e69a3c04":"train_df[\"Ticket\"].head(20)","9b588ffe":"train_df.head()","23354292":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","4373164c":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","f3d68983":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","78165248":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","470bc7ac":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","0db5480c":"train_df.columns","9242bde0":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","a8d149a0":"train_df_len","32914685":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","e1876ff1":"test.head()","309c00d2":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","f90bd140":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","91dcd0e6":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","8e7d672f":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","2f26fc67":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","6e50e7fd":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","bdc9e665":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanicEDA.csv\", index = False)","f8304940":"<a id = '10'><a\/>\n## Fill Missing Value\n* Embarked has 2 missing values\n* Fare has only 1","e53bdfb1":"* SibSp and Parch can be used for a new feature extraction with th = 3\n* Small families have more chance to survive\n* There is a std in the survival of passenger with Parch = 3","8f4f14bd":"<a id = '19'><a\/>\n\n## Embarked - Sex - Fare - Survived","59bfc7ae":"* Small familes have more chance to survive than large families","a2a22d9d":"<a id = '17'><a\/>\n## Pclass - Age - Survived","ab85d3eb":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning - Grid Search - Cross Validation\n\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","82075dc6":"<a id = '14'><a\/>\n## Parch - Survived","f0f8cc7b":"<a id = '18'><a\/>\n\n## Embarked - Sex - Pclass - Survived","f60f922b":"<a id = '15'><a\/>\n## Pclass - Survived","d6666db7":"<a id = '12'><a\/>\n## Correlation Between SibSp - Parch - Age - Fare - Survived","a6f77eb5":"* Passengers who paid higher fare have a better survival rate\n* Fare can be used as a categorical for the training","94499961":"<a id = '13'><a\/>\n## Sibsp - Survived","7097ceb1":"<a id = '3'><a\/>\n    \n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and ParCh\n\n* Numerical Variable: Age, PassengerId and Fare","5394dcd6":"<a id = '6'><a\/>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Age - Survived","a1935dab":"* It shows that having less siblings gives more chance to survive\n* We need to consider a new feature describing these categories","95d17fe2":"<a id = '26'><a\/>\n\n## Pclass","b1dfa430":"<a id = '9'><a\/>\n## Find Missing Value","d231e422":"<a id = '23'><a\/>\n## Family Size","05451994":"* Age <= 10 has a high survival rate\n* Around 20 year-old people could not survive\n* Most passengers are between 15-35 ages\n* Use Age feature in training\n* Use Age distribution for missing values of age","82cd1159":"<a id = \"2\"><a\/>\n# Variable Description\n    \n1. PassengerId: Unique id number for each passenger\n2. Survived: Passenger survived(1) or died(0) \n3. Pclass: Passenger class\n4. Name: Name of passenger\n5. Sex: Gender of passenger\n6. Age: Age of passenger\n7. SibSp: Number of siblings\/spouses\n8. Parch: Numbers of parents\/children \n9. Ticket: Ticket number\n10. Fare: Price of ticket\n11. Cabin: Cabin category\n12. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southhampton)\n   ","6b08b541":"<a id = '29'><a\/>\n# Modeling","36b08b0d":"<a id = '27'><a\/>\n \n## Sex","61d433c3":"<a id = '21'><a\/>\n# Feature Engineering","29b0215d":"* First class passengers are older than 2nd, and 2nd is older than 3rd class","a1567eee":"<a id = '20'><a\/>\n\n## Fill Missing : Age Feature","6db7db5d":"<a id = '28'><a\/>\n\n## Drop Passenger ID and Cabin","93367ab5":"* Pclass is an important feature for the model training.","dd58db50":"<a id = '4'><a\/>\n## Categorical Variable","0935a317":"* float64(2): Age and Fare\n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch.\n* object(5): Name, Sex, Ticket, Cabin and Embarked","65f25c16":"<a id = '25'><a\/>\n\n## Ticket","2e68794f":"<a id = '30'><a\/>\n\n## Train - Test Split","3ad8377b":"<a id = '34'><a\/>\n\n## Prediction and Submission","12922c4d":"<a id = '22'><a\/>\n## Name - Title","0590aad3":"* Age is not correlated with sex but it is correlated with Parch, Pclass and SibSp","6692c83b":"<a id = '31'><a\/>\n\n## Simple Logistic Regression","d6d5416a":"It shows that there is a correlation between \"Fare\" and \"Survived\" which is valued as 0.26","51b54ae7":"<a id = '24'><a\/>\n## Embarked","d5677de8":"<a id = '5'><a\/>\n## Numerical Variable","f03b9775":"<a id = '7'><a\/>\n# Outlier Detection","9a0bfd8c":"### He is in 3rd class and embarked from S which means he is not rich as the others. So, we will use S domain in boxplot","0d6daedb":"# Introduction\n\nOne of the biggest well-known crashes is the sinking of Titanic in the history. In 1912, during the voyage,\nTitanic sank after colliding an iceberg and 1502 people who are passangers and the crew out of 2224 died.\n\n\n<font color = 'blue'>\n    \nContent:\n        \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n8. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n11. [Visualization](#11)\n    * [Correlation Between Sibsp - Parch - Pclass - Age - Embarked - Sex - Fare - Survived](#12)\n    * [Sibsp - Survived](#13)\n    * [Parch - Survived](#14)\n    * [Pclass - Survived](#15)\n    * [Age - Survived](#16)\n    * [Pclass - Age - Survived](#17)\n    * [Embarked - Sex - Pclass - Survived](#18)\n    * [Embarked - Sex - Fare - Survived](#19)\n    * [Fill Missing : Age Feature](#20)\n12. [Feature Engineering](#21)\n    * [Name - Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n13. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning - Grid Search - Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","46aed96c":"<a id = '8'><a\/>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","fc42b077":"* Sex is not an informative for the age prediction, age distribution seems to be same","6f604a9e":"<a id = '1'><a\/>\n# Load and Check Data","b073c4cd":"* Female passengers have better survival rate than male passengers\n* Male passenger have better survival rate in Pclass 3 in C\n* Embarked and Sex features can be used for training","be6c249d":"<a id = '33'><a\/>\n\n## Ensemble Modeling","25b21262":"<a id = '11'><a\/>\n# Visualization","667042b4":"<a id = '16'><a\/>\n\n## Age - Survived"}}