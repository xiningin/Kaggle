{"cell_type":{"131b0215":"code","2e0a20b2":"code","984d5357":"code","8115c40e":"code","66723d1d":"code","79174a60":"code","46386fb5":"code","4b59d0e4":"code","d3955ff3":"code","8883acfa":"code","f08f3ab8":"code","8a79fd61":"code","e71706c2":"code","0c5a4da7":"code","4509a7c7":"code","4b23eea5":"code","a30e1269":"code","ca91fbce":"code","b912cd3f":"code","6b9cfd46":"code","a185698b":"markdown","72fc63e4":"markdown","0bf418b6":"markdown","2c0919ca":"markdown","dc630978":"markdown","686c6746":"markdown","ac829a57":"markdown","97a6e793":"markdown","fa3590ed":"markdown","a71a3d2e":"markdown","ce44ba7a":"markdown","3341f1a6":"markdown","b01c28eb":"markdown","b1f7933f":"markdown","0a752337":"markdown","3a292b64":"markdown","269f938f":"markdown","99b3ab42":"markdown","51609799":"markdown"},"source":{"131b0215":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","2e0a20b2":"#loading data to pandas dataframe\ndata = pd.read_csv('\/content\/haberman.csv')\n\n#printing first 10 rows\nprint(data.head(10)) \nprint('\\n')\nprint(data.columns, end = '\\n\\n')\nprint(data.shape, end = '\\n\\n')\n\n#renaming columns\n#data.columns({'Age', 'Oper_year', 'Axil_nodes', 'Survival_status'}, inplace = True)\ndata = data.rename(columns={'30': \"Age\", '64': \"Oper_year\", '1': \"Axil_nodes\", '1.1': \"Survival_status\"}) #https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.rename.html\nprint(data.head(10))","984d5357":"#unique values and its count of Survival_status column\ndata['Survival_status'].value_counts()\n# 1 = the patient survived 5 years or longer\n# 2 = the patient died within 5 year","8115c40e":"survived = data.loc[data['Survival_status'] == 1]\nnot_survived = data.loc[data['Survival_status'] == 2]\n\nprint(type(survived))\nprint(survived.head(10))\n\nprint(type(not_survived))\nprint(not_survived.head(10))","66723d1d":"plt.plot(survived[\"Age\"], np.zeros_like(survived['Age']), 'o', label = 'Survived') # https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.zeros_like.html\nplt.plot(not_survived[\"Age\"], np.zeros_like(not_survived['Age']), 'o', label = 'Not_survived') \n#plt.legend('Survived', 'Not_survived')\n\n#adding axis label and display label \nplt.xlabel('Age') \nplt.ylabel('Array with zeros') \nplt.legend()  #https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.legend.html\n\nplt.grid() #to display grids in the output\nplt.show() #to display plot(output)","79174a60":"plt.plot(survived['Oper_year'], np.zeros_like(survived['Oper_year']), '*', label = 'Survived') \nplt.plot(not_survived['Oper_year'], np.zeros_like(not_survived['Oper_year']), '^', label = 'Not_survived') \n\n\n#adding axis label and display label \nplt.xlabel('Year of operation') \nplt.ylabel('Array with zeros') \nplt.legend()  \n\nplt.grid()\nplt.show() ","46386fb5":"plt.plot(survived['Axil_nodes'], np.zeros_like(survived['Axil_nodes']), '*', label = 'Survived') \nplt.plot(not_survived['Axil_nodes'], np.zeros_like(not_survived['Axil_nodes']), '^', label = 'Not_survived') \n\n\n#adding axis label and display label \nplt.xlabel('Number of auxiliary nodes') \nplt.ylabel('Array with zeros') \nplt.legend()  \n\nplt.grid()\nplt.show() ","4b59d0e4":"plt.hist(survived[\"Age\"], bins = 100, label = 'Survived')\n#plt.hist(survived[\"Age\"],  label = 'Not_survived')\nplt.legend()  \nplt.show()","d3955ff3":"#data.plot(survived['Age'], survived['Oper_year'], 'rs', not_survived['Age'], not_survived['Oper_year'], 'b*')\nprint('Plot with age and oper_year')\ndata.plot(kind='scatter', x='Age', y='Oper_year')\nplt.grid()\nplt.show()\n\nprint('Plot with age and auxiliary node')\ndata.plot(kind='scatter', x='Age', y='Axil_nodes')\nplt.grid()\nplt.show()\n\nprint('Plot with auxiliary nodes and oper_year')\ndata.plot(kind='scatter', x='Axil_nodes', y='Oper_year')\nplt.grid()\nplt.show()","8883acfa":"#plotting two attributes in a graph by differtiating survival_status; survived = red, not_survived = blue\n\nprint('Plot with age and oper_year')\nfor n in range(0, 305):\n  if data['Survival_status'][n] == 1:\n    line1 = plt.scatter(data['Age'][n], data['Oper_year'][n], color = 'red')\n  else:\n    line2 = plt.scatter(data['Age'][n], data['Oper_year'][n], color = 'blue')\nplt.xlabel('Age')\nplt.ylabel('Oper_year')  \nplt.legend((line1, line2), ('survived', 'not_survived'))\n#plt.legend()\nplt.grid()\nplt.show()\n\n\nprint('Plot with age and auxiliary node')\nfor n in range(0, 305):\n  if data['Survival_status'][n] == 1:\n    line1 = plt.scatter(data['Age'][n], data['Axil_nodes'][n], color = 'red')\n  else:\n    line2 = plt.scatter(data['Age'][n], data['Axil_nodes'][n], color = 'blue')\nplt.xlabel('Age')\nplt.ylabel('Axil_nodes')  \nplt.legend((line1, line2), ('survived', 'not_survived'))\n#plt.legend()\nplt.grid()\nplt.show()\n\n\nprint('Plot with auxiliary nodes and oper_year')\nfor n in range(0, 305):\n  if data['Survival_status'][n] == 1:\n    line1 = plt.scatter(data['Axil_nodes'][n], data['Oper_year'][n], color = 'red')\n  else:\n    line2 = plt.scatter(data['Axil_nodes'][n], data['Oper_year'][n], color = 'blue')\nplt.xlabel('Axil_nodes')\nplt.ylabel('Oper_year')  \nplt.legend((line1, line2), ('survived', 'not_survived'))\n#plt.legend()\nplt.grid()\nplt.show()","f08f3ab8":"#mean\nprint('Mean age of survived patients: ', np.mean(survived['Age']))\nprint('Mean of operation year survived patients: ', np.mean(survived['Oper_year']))\nprint('Mean affected nodes of survived patients: ', np.mean(survived['Axil_nodes']))\n\nprint('Mean age of not survived patients: ', np.mean(not_survived['Age']))\nprint('Mean of operation year not survived patients: ', np.mean(not_survived['Oper_year']))\nprint('Mean affected nodes of not survived patients: ', np.mean(not_survived['Axil_nodes']))","8a79fd61":"#standard deviation\nprint('SD age of survived patients: ', np.std(survived['Age']))\nprint('SD of operation year survived patients: ', np.std(survived['Oper_year']))\nprint('SD affected nodes of survived patients: ', np.std(survived['Axil_nodes']))\n\nprint('SD age of not survived patients: ', np.std(not_survived['Age']))\nprint('SD of operation year not survived patients: ', np.std(not_survived['Oper_year']))\nprint('SD affected nodes of not survived patients: ', np.std(not_survived['Axil_nodes']))","e71706c2":"#Median\nprint('Median age of survived patients: ', np.median(survived['Age']))\nprint('Median of operation year survived patients: ', np.median(survived['Oper_year']))\nprint('Median affected nodes of survived patients: ', np.median(survived['Axil_nodes']))\n\nprint('Median age of not survived patients: ', np.median(not_survived['Age']))\nprint('Median of operation year not survived patients: ', np.median(not_survived['Oper_year']))\nprint('Median affected nodes of not survived patients: ', np.median(not_survived['Axil_nodes']))\n\n","0c5a4da7":"#Quantiles \nprint('Quantiles of age of survived patients: ', np.percentile(survived['Age'], np.arange(1, 101, 25)))\nprint('Quantiles of operation year survived patients: ', np.percentile(survived['Oper_year'], np.arange(1, 101, 25)))\nprint('Quantiles of affected nodes of survived patients: ', np.percentile(survived['Axil_nodes'], np.arange(1, 101, 25)))\n\nprint('Quantiles of age of not survived patients: ', np.percentile(not_survived['Age'], np.arange(1, 101, 25)))\nprint('Quantiles of operation year not survived patients: ', np.percentile(not_survived['Oper_year'], np.arange(1, 101, 25)))\nprint('Quantiles of affected nodes of not survived patients: ', np.percentile(not_survived['Axil_nodes'], np.arange(1, 101, 25)))\n\n\n","4509a7c7":"#Percentiles \nprint('90th %tile of age for survived patients: ', np.percentile(survived['Age'], 90))\nprint('90th %tile of operation year for survived patients: ', np.percentile(survived['Oper_year'], 90))\nprint('90th %tile of affected nodes for survived patients: ', np.percentile(survived['Axil_nodes'], 90))\n\nprint('90th %tile of age for survived patients: ', np.percentile(not_survived['Age'], 90))\nprint('90th %tile of operation year not survived patients: ', np.percentile(not_survived['Oper_year'], 90))\nprint('90th %tile of affected nodes for not survived patients: ', np.percentile(not_survived['Axil_nodes'], 90))\n","4b23eea5":"#whisker plot\nsns.boxplot(x = 'Survival_status', y = 'Age', data = data)\nplt.show()\nsns.boxplot(x = 'Survival_status', y = 'Oper_year', data = data)\nplt.show()\nsns.boxplot(x = 'Survival_status', y = 'Axil_nodes', data = data)\nplt.show()\n\n#violin plot\nsns.violinplot(x = \"Survival_status\", y = \"Age\", data = data, size = 90)\nplt.show()\nsns.violinplot(x = \"Survival_status\", y = \"Oper_year\", data = data, size = 90)\nplt.show()\nsns.violinplot(x = \"Survival_status\", y = \"Axil_nodes\", data = data, size = 90)\nplt.show()","a30e1269":"sns.FacetGrid(data, hue = \"Survival_status\", height = 5).map(sns.distplot, \"Age\").add_legend()\nplt.ylabel('Variance')\nsns.FacetGrid(data, hue = \"Survival_status\", height = 5).map(sns.distplot, \"Oper_year\").add_legend()\nplt.ylabel('Variance')\nsns.FacetGrid(data, hue = \"Survival_status\", height = 5).map(sns.distplot, \"Axil_nodes\").add_legend()\nplt.ylabel('Variance')\nplt.show()","ca91fbce":"# plotting cdf and pdf by age feature and survival status\ncounts, bin_edges = np.histogram(survived['Age'], bins=10, density = True)                               \npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.xlabel('Age')\nplt.plot(bin_edges[1:],pdf, label = 'survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'survived_cdf')\n\n# plotting cdf and pdf by age feature and non survival status\ncounts, bin_edges = np.histogram(not_survived['Age'], bins=10, density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf, label = 'non_survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'non_survived_cdf')\nplt.legend()\n\nplt.show();","b912cd3f":"# plotting cdf and pdf by year of operation feature and survival status\ncounts, bin_edges = np.histogram(survived['Oper_year'], bins=10, density = True)                               \npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.xlabel('Oper_year')\nplt.plot(bin_edges[1:],pdf, label = 'survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'survived_cdf')\n\n# plotting cdf and pdf by year of operation feature and non survival status\ncounts, bin_edges = np.histogram(not_survived['Oper_year'], bins=10, density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf, label = 'non_survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'non_survived_cdf')\nplt.legend()\n\nplt.show();","6b9cfd46":"# plotting cdf and pdf by auxiliary nodes feature and survival status\ncounts, bin_edges = np.histogram(survived['Axil_nodes'], bins=10, density = True)                               \npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.xlabel('Axil_nodes')\nplt.plot(bin_edges[1:],pdf, label = 'survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'survived_cdf')\n\n# plotting cdf and pdf by auxiliary nodes feature and non survival status\ncounts, bin_edges = np.histogram(not_survived['Axil_nodes'], bins=10, density = True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf, label = 'non_survived_pdf')\nplt.plot(bin_edges[1:], cdf, label = 'non_survived_cdf')\nplt.legend()\n\nplt.show();","a185698b":"**<h1>Using some statistical concepts:**","72fc63e4":"**Goal : To predict that a person would survive or not from surgery**","0bf418b6":"**<h1>Univariate plotting<\/h1>**","2c0919ca":"**Observation:** \n\n1. As number of affected nodes increases, there are more likely chances of non-survival\n","dc630978":"**Observation:**\n\n1. Unable to identify survival and non-survival class as all look same with any of the combinations.","686c6746":"**Observation:**\n\n1. Dots of survived values are overwritten by not survived values- so it impossible to recognize survival status ","ac829a57":"**<h1>Histogram, PDF, CDF**\n\n","97a6e793":"**Observation:**\n\n1. Not useful wrt to the goal","fa3590ed":"**CDF & PDF feature-wise**\n","a71a3d2e":"**<h1>Bi-variate Plotting \/ Pair-plots**","ce44ba7a":"**Observations:**\n\n1. Both classes overlap each other and so age attribute should not be given much importance for survival rate or non_survival rate\n2. Dataset contains age ranging from 58 to 70 ","3341f1a6":"**Observations:**\n\n1. Survival status of surgery success(1) is almost 2.5 times compare to failure(2) \n2. Data is not uniformly distributed ","b01c28eb":"**<h1>Whisker & Violin plots<\/h1>**","b1f7933f":"**Observation:**\n\n1. Both classes are overlapping; unable to indentify. ","0a752337":"**Observation:** \n\n1. Not necessarily, as number of affected nodes increases, there are more likely chances of non-survival.","3a292b64":"**Observations:**\n1. It is impossible to differentiate either of the survival state with decision boundary as all are scattered in the whole graph.\n\n2. In the graph, age vs auxiliary node as the value of age and number of nodes increases - the chances of survival state decreases is observed with minimal exceptions.","269f938f":"**<h1>Observations:<\/h1>**\n\n1. It is tough to interpret one state of patient and the data is non-uniformly distributed.\n2. Somehow, it can be possible that as number of auxiliary nodes and age increases, the rate to survival decreases.","99b3ab42":"**<h1>Exploratory Data Analysis - Haberman's Survival dataset**\n\n\n\n\n\n\nDataset: https:\/\/www.kaggle.com\/gilsousa\/habermans-survival-data-set","51609799":"**Observations:**\n\n1. Most of the values of both classes are overlapped, so we cannot predict anything only on the basis of auxiliary\n2. Most of the survival cases and non-survival cases range between 0 to 25 "}}