{"cell_type":{"31851ede":"code","d9231935":"code","333c6af7":"code","9c84f10a":"code","94daef8c":"code","076f44b4":"code","76e8b4af":"code","47dce271":"code","1af88b68":"code","85d741d2":"code","95e0270e":"code","9e3be49b":"code","3c35ba23":"code","05f57cc7":"code","69e3d822":"code","357b7110":"code","e25fb64d":"code","5f131d46":"code","7b10f6d2":"code","7fd165ee":"code","7f8d227f":"markdown","a2e44e2c":"markdown","2d873b85":"markdown","56dc08f2":"markdown","0a9f3d4b":"markdown","9dd03752":"markdown","100223ef":"markdown","2acdfd92":"markdown","e3d5d8d1":"markdown","ec7ac932":"markdown","0033df83":"markdown","8b4f2f56":"markdown","dba1e171":"markdown","fe40dfab":"markdown","e891f185":"markdown","a752e02f":"markdown","7447db49":"markdown","0c8eb45e":"markdown","135305aa":"markdown","ce8b1f21":"markdown"},"source":{"31851ede":"import numpy as np\nimport pandas as pd\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n        \nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn import preprocessing\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.base import TransformerMixin, BaseEstimator\n\nfrom keras import models, Model\n\nfrom scipy.optimize import curve_fit\nfrom tqdm import tqdm_notebook\n\nimport ipywidgets as widgets\nfrom ipywidgets import interact\nfrom IPython.display import Image\n\nfrom sklearn.decomposition import PCA\nimport dill as pickle\nimport pickle as pk\n\n%autosave 60","d9231935":"df = pd.read_csv('\/kaggle\/input\/nasa-cmaps\/CMaps\/train_FD003.txt', \n                 names=['unit number', 'time, in cycles'] + [f'operational setting {i}' for i in range(1, 4)] + \\\n                 [f'sensor measurement {i}' for i in range(1, 22)], index_col=0, delimiter=r\"\\s+\")\ndf","333c6af7":"df2 = df.copy()\n\ndef plot_sensor(unit_number, sensor_number):\n    plt.subplots(figsize=(14, 6))\n    \n    plt.plot(df2.loc[unit_number, 'time, in cycles'],\n            df2.loc[unit_number, f'sensor measurement {sensor_number}'], 'ro-', label=f'Sensor = {sensor_number}, Unit = {unit_number}')\n    plt.legend(loc='best', fontsize=14)\n    plt.grid()\n    \n\nslider1 = widgets.IntSlider(min=min(df.index), max=max(df.index), step=1, value=1, description=r'$Number\\;of\\;machine$',\n                                                  style={'description_width': 'initial'}, \n                                                  layout=dict(width='30%'))\n\nslider2 = widgets.IntSlider(min=1, max=21, step=1, value=1, description=r'$Number\\;of\\;sensor$',\n                                                  style={'description_width': 'initial'}, \n                                                  layout=dict(width='30%'))\n\n\n\nui = widgets.HBox([slider1, slider2])\n\nout = widgets.interactive_output(plot_sensor, {'unit_number': slider1, 'sensor_number': slider2})\n\ndisplay(ui, out)","9c84f10a":"with open('..\/input\/keras-encoder\/pipeline.pk', 'rb') as f:\n    pipe = pickle.load(f)","94daef8c":"fun_expon = lambda t, a, b: a * (np.exp(b * t) - 1)\nremaining_time = lambda level, a, b: np.log(level \/ a + 1) \/ b","076f44b4":"Image(filename=\"..\/input\/keras-encoder\/Model.png\", width=400, height=300)","76e8b4af":"Image(filename=\"..\/input\/keras-encoder\/History.jpg\", width=1000, height=600)","47dce271":"Image(filename=\"..\/input\/keras-encoder\/Error.jpg\", width=800, height=500)","1af88b68":"Image(filename=\"..\/input\/keras-encoder\/Train.jpg\", width=1100, height=600)","85d741d2":"a, b, hline = 0.004424052639005973, 0.007114853302835571, 1.2063515603542327","95e0270e":"Image(filename=\"..\/input\/keras-encoder\/Test.jpg\", width=1100, height=600)","9e3be49b":"def EncoderKeras(data, autocoder=None):\n    if autocoder == None:\n        autocoder = models.load_model('.\/bestmodel.hdf5')\n        \n    intermediate_layer_model = Model(inputs=autocoder.input, outputs=autocoder.get_layer('encoder').output)\n    intermediate_output = intermediate_layer_model.predict(data)\n    # intermediate_output.reshape((1, len(intermediate_output)))[0]\n    return intermediate_output","3c35ba23":"def predict_time_keras(machine, min_par1, min_par2, level, path_model='..\/input\/keras-encoder\/model 15.hdf5'):\n    time = np.arange(machine.shape[0]) + 1\n    \n    machine = pipe.transform(machine)\n    machine = EncoderKeras(machine, autocoder=models.load_model(path_model))\n    machine -= machine[0]\n    machine = np.abs(machine)\n    \n    params = curve_fit(\n        fun_expon, time, machine.reshape(1, -1)[0], \n        p0=(1e-1, 1e-1), \n        maxfev=1000, ftol=1e-3, xtol=1e-3,\n        bounds = ((min_par1, min_par2), (100, 100))\n    )\n    \n    time_predict = int(remaining_time(level, *params[0]))\n#     print(time[-1])\n    return max(time_predict, time[-1])","05f57cc7":"last_values = 50\nlist_result = []\n\nfor i, number_machine in enumerate(df.index.unique()):\n    machine = df[df.index == number_machine]\n    predict = predict_time_keras(machine.iloc[:-last_values, :], a, b, hline)\n    list_result.append((machine.shape[0], predict))\n    \ny_true = list(zip(*list_result))[0]\ny_pred = list(zip(*list_result))[1]\nmae = mean_absolute_error(y_true=y_true, y_pred=y_pred)\nmse = mean_squared_error(y_true=y_true, y_pred=y_pred)\n\nprint(f\"MAE = {mae}\")\nprint(f\"MSE = {mse}\")\nprint(f\"RMSE = {np.sqrt(mse)}\")","69e3d822":"Image(filename=\"..\/input\/keras-encoder\/Error - PCA.jpg\", width=800, height=500)","357b7110":"Image(filename=\"..\/input\/keras-encoder\/Train - PCA.jpg\", width=1000, height=600)","e25fb64d":"a, b, hline = 0.007197992669507834, 0.006503380780337302, 1.498078889206682","5f131d46":"Image(filename=\"..\/input\/keras-encoder\/Test - PCA.jpg\", width=1000, height=600)","7b10f6d2":"def predict_time_pca(machine, min_par1, min_par2, level, path_model='..\/input\/keras-encoder\/pca.pkl'):\n    time = np.arange(machine.shape[0]) + 1\n    \n    machine = pipe.transform(machine)\n    pca_reload = pk.load(open(\"..\/input\/keras-encoder\/pca.pkl\", 'rb'))\n    machine = pca_reload.transform(machine)\n    machine -= machine[0]\n#     machine = np.abs(machine)\n    \n    params = curve_fit(\n        fun_expon, time, machine.reshape(1, -1)[0], \n        p0=(1e-1, 1e-1), \n        maxfev=1000, ftol=1e-3, xtol=1e-3,\n        bounds = ((min_par1, min_par2), (100, 100))\n    )\n    \n    time_predict = int(remaining_time(level, *params[0]))\n    \n#     plt.plot(time, machine)\n    \n    return max(time_predict, time[-1])","7fd165ee":"last_values = 50\nlist_result = []\n\nfor i, number_machine in enumerate(df.index.unique()):\n    machine = df[df.index == number_machine]\n    predict = predict_time_pca(machine.iloc[:-last_values, :], a, b, hline)\n    list_result.append((machine.shape[0], predict))\n    \ny_true = list(zip(*list_result))[0]\ny_pred = list(zip(*list_result))[1]\nmae = mean_absolute_error(y_true=y_true, y_pred=y_pred)\nmse = mean_squared_error(y_true=y_true, y_pred=y_pred)\n\nprint(f\"MAE = {mae}\")\nprint(f\"MSE = {mse}\")\nprint(f\"RMSE = {np.sqrt(mse)}\")","7f8d227f":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441\u043b\u043e\u044f encoder \u0434\u043b\u044f data","a2e44e2c":"X - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0446\u0438\u043a\u043b\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\n\nY - \u043e\u0448\u0438\u0431\u043a\u0430\n\n\u041e\u0442\u043e\u0431\u0440\u0430\u043d\u044b \u043b\u0443\u0447\u0448\u0438\u0435:","2d873b85":"8 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 PCA","56dc08f2":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437 encoder-\u043e\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f machine","0a9f3d4b":"# PCA","9dd03752":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f 100 \u043c\u0430\u0448\u0438\u043d train_FD003.txt \u0431\u0435\u0437 50 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","100223ef":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437 PCA \u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f machine","2acdfd92":"Wow!!! PCA $\\rightarrow$ 206 vs 30 $\\leftarrow$ Keras","e3d5d8d1":"\u041d\u0430 \u043f\u0435\u0440\u0432\u044b\u0445 70 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 train_FD001.txt","ec7ac932":"## \u0411\u044b\u043b\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043e 200+ \u0430\u0432\u0442\u043e\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u043e\u0432","0033df83":"# Autoencoder = $\\underline{Encoder}$ + Decoder","8b4f2f56":"Health Index = $a \\cdot (\\exp^{ b \\cdot t} - 1)$\n\n$\\hat t = \\frac {\\log_2 (\\frac{level}{\\hat a} + 1)}{\\hat b}$","dba1e171":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437 PCA \u0434\u043b\u044f train_FD003.txt \u0434\u043b\u044f 100 \u043c\u0430\u0448\u0438\u043d \u0431\u0435\u0437 50 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","fe40dfab":"## Training","e891f185":"## \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 $\\leftarrow \\hat a, \\hat b, \\hat {hline}$ = \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","a752e02f":"# \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 (\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)","7447db49":"# \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 Pipeline","0c8eb45e":"# Health Index","135305aa":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437 encoder\n\nAutocoder \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f 71-100 \u043c\u0430\u0448\u0438\u043d \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 train_FD001.txt","ce8b1f21":"\u041d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 30 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 train_FD001.txt"}}