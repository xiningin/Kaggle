{"cell_type":{"204f9bfa":"code","593c6f33":"code","eddeafde":"code","93407ea9":"code","901df1cf":"code","4d79027c":"code","4ef5ae2d":"code","f1117ed5":"code","75cccfd0":"code","dc7720d7":"code","53f253ee":"code","d6fb7fde":"code","6eda7efb":"code","8847fa6c":"code","6cded0dd":"code","8a78915a":"code","aeb3c9c7":"code","0bb521cd":"code","9fb46903":"code","62ced5ac":"code","9802f5d9":"code","8c055f65":"code","c2372bd3":"code","43289cd7":"code","db71941b":"code","f4ae0719":"code","4cb63ada":"code","f64e7fd9":"code","dee13f1c":"code","f103a1b8":"code","8b23468c":"code","691ea609":"code","d37aff56":"code","96cd7eae":"code","0defb53a":"code","99c5be5e":"code","84126de2":"code","b4851725":"code","8295eac4":"code","4bb93f10":"code","a0a2fb7b":"code","dc3689db":"code","f4457879":"code","cb0934be":"code","3c71e62d":"code","2ecf47b6":"code","6cf73185":"code","578a0c6f":"code","0e4a7cd4":"code","351422ba":"code","cc3a8d06":"code","038fb920":"code","0aeedfc9":"code","b610f300":"code","c3a5724e":"code","79e644ad":"code","10f0d173":"code","3c3a29ae":"code","689ed974":"code","641a5453":"code","e5d1439f":"code","91415b09":"code","2ccceff0":"code","6aae251c":"code","5d5ac3b5":"code","274be3c3":"code","f445e229":"code","f39e5696":"code","ffe33dd5":"code","b390ae5f":"code","04129aea":"code","b026d36b":"code","e5bbf7b5":"code","8058a693":"code","2e23ad40":"code","1b76ba77":"code","d6951813":"code","a1347984":"code","cc2337dc":"code","4a308d60":"code","5c641b8b":"code","df267989":"code","d1ed800c":"code","ea620ddd":"code","3af48692":"code","36e901d8":"code","9e29e90d":"code","cd5f069f":"code","16470b59":"code","5c3127d7":"code","16caf92c":"code","03ae2c95":"code","e421c953":"code","74fcc60f":"code","06585af9":"code","84d78bad":"code","03d53fb1":"code","bebbb558":"code","adf4c8f0":"code","77d08fac":"code","1d7b633f":"code","99020c86":"code","b43080c3":"code","447d657b":"code","3bd4d13b":"code","ae127c4b":"code","8c2c9e91":"code","b79939dc":"code","523a98d6":"code","52a1059f":"code","507b5aa9":"code","4a94080b":"code","2419c52e":"code","c66b5bcd":"code","17595a5e":"code","045ba2a9":"code","6986ccd3":"code","61dc8d3d":"code","865ae788":"code","79bfd5e5":"code","285c130c":"code","d972cf65":"code","4fe1553a":"code","4d9946ab":"code","3fadad7b":"code","d906a4bd":"code","d543d3ab":"code","b7a01a8f":"code","a9fbc546":"code","eda082ea":"code","29ae8c1b":"code","def79543":"code","ca87e404":"code","b146607a":"code","9fbc6e95":"code","0b238f28":"code","fda73b36":"code","b168c23d":"code","68f006dd":"code","b38372c4":"code","2dfda9cd":"code","104889dd":"code","1aa952ea":"code","c1de8a8c":"code","77362a5b":"code","5d8ad954":"code","42db60f8":"code","1e5aade6":"code","89571899":"code","f76ee71b":"code","1dd2bfe8":"code","c8f9bcc1":"code","657746ad":"code","f2707ed9":"code","18a41758":"code","8db200c0":"code","e48e1cee":"code","f018cb0c":"code","ffa5eacb":"code","3c072cbd":"code","ceeca10c":"code","918fdb21":"code","761bcb72":"code","ec1424b0":"code","921b78b7":"code","f1f6b52c":"code","c2b7f72a":"code","93e00cc2":"code","86f5d179":"code","305a3b14":"code","fb602701":"code","594cc4c7":"code","8f76c4d5":"code","00365452":"code","e356331c":"code","27e20f29":"code","b81be356":"code","3f15f6aa":"code","9bc4bdf6":"code","73013d46":"code","8de32fce":"code","1eb31263":"code","8ef4cd97":"code","3ab910d9":"code","42f62fd9":"code","5ed10ab1":"code","cbd5e03a":"code","bd014cae":"code","7acd6cc9":"code","7cefa322":"code","422af5cf":"code","79f633d9":"code","aae7242b":"code","b2539e6a":"code","6ee3f773":"code","d98e7fb9":"code","353fb4c6":"code","3ba56882":"code","1a61aa87":"code","d2fbb7ca":"code","f8a4bd81":"code","b281040c":"code","19a1bdfd":"code","6a27cfbf":"code","6dd5794b":"markdown","e952e9e2":"markdown","1653238b":"markdown","d3448a91":"markdown","58039e79":"markdown","93c81c7e":"markdown","b5d91b55":"markdown","ee284c16":"markdown","1b88d4d4":"markdown","e343ab34":"markdown","0795e537":"markdown","1100b34a":"markdown","5ddcd675":"markdown","61aa5ff0":"markdown","1bea2b57":"markdown","20e54dfa":"markdown","9ed301e9":"markdown","f50807fd":"markdown","c3a0f985":"markdown","723b5d4d":"markdown","e251bdd1":"markdown","d9205566":"markdown","a7b3d8d5":"markdown"},"source":{"204f9bfa":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\n\n# The number of numbers to show after the comma.\npd.set_option('display.float_format', lambda x: '%.0f' % x)\nimport matplotlib.pyplot as plt","593c6f33":"df = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\",sheet_name = \"Year 2010-2011\")","eddeafde":"df.head()","93407ea9":"retail = df.copy()","901df1cf":"retail.head()","4d79027c":"df1 = df[~df[\"Invoice\"].astype(str).str.startswith(\"C\")]","4ef5ae2d":"df2= df1[~df1[\"Description\"].astype(str).str.startswith(\"wrong\")]","f1117ed5":"df.shape","75cccfd0":"df1.shape","dc7720d7":"df2.shape","53f253ee":"df2.isnull().sum()","d6fb7fde":"# we know stock code = description\n# also customer id is important \n\ndf2.dropna(inplace = True)","6eda7efb":"df2.isnull().sum()","8847fa6c":"df2.shape","6cded0dd":"#number of product\ndf2[\"Description\"].nunique()","8a78915a":"# How many products are there?\ndf[\"Description\"].value_counts().head(10)","aeb3c9c7":"# Which is the most ordered product?\ndf2.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = False).head(10)","0bb521cd":"#Total how many bills were issued?\ndf2[\"Invoice\"].nunique()","9fb46903":"# How much money has been earned per invoice? (It is necessary to create a new variable by multiplying two variables)\ndf2[\"TotalPrice\"] = df2[\"Quantity\"]*df[\"Price\"]","62ced5ac":"df2.head()","9802f5d9":"df2.groupby(\"Invoice\").agg({\"TotalPrice\":\"sum\"}).sort_values(\"TotalPrice\", ascending = False).head()","8c055f65":"# Which are the most expensive products?\ndf2.sort_values(\"Price\", ascending = True).head()","c2372bd3":"# How many orders came from which country?\ndf[\"Country\"].value_counts()","43289cd7":"# How much money did we make from which country?\ndf2.groupby(\"Country\").agg({\"TotalPrice\":\"sum\"}).sort_values(\"TotalPrice\", ascending = False).head()","db71941b":"# Which is the most returned product?","f4ae0719":"df3 =df[df[\"Invoice\"].str.contains(\"C\",na=False)]","4cb63ada":"df3.groupby(\"StockCode\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = True).head(10)","f64e7fd9":"df3.groupby(\"Description\").agg({\"Quantity\":\"sum\"}).sort_values(\"Quantity\", ascending = True).head(10)","dee13f1c":"df2.describe([0.01,0.05,0.10,0.25,0.50,0.75,0.90,0.95, 0.99]).T","f103a1b8":"for feature in [\"Quantity\",\"Price\",\"TotalPrice\"]:\n\n    Q1 = df2[feature].quantile(0.01)\n    Q3 = df2[feature].quantile(0.99)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if df2[(df2[feature] > upper) | (df2[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(df2[(df2[feature] > upper) | (df2[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","8b23468c":"df2[\"InvoiceDate\"].min()","691ea609":"df2[\"InvoiceDate\"].max()","d37aff56":"import datetime as dt\ntoday_date = dt.datetime(2011,12,9)","96cd7eae":"import pandas as pd\ndf2['InvoiceDate'] = pd.to_datetime(df2['InvoiceDate'])\ndf2 = df2.set_index(df2['InvoiceDate'])\ndf2 = df2.sort_index()","0defb53a":"# create train test partition\nQ12 = df2['2010-12-01':'2011-06-01']\nQ34  = df2['2011-06-02':]\nprint('Train Dataset:',Q12.shape)\nprint('Test Dataset:',Q34.shape)","99c5be5e":"Q12.head()","84126de2":"Q12.tail()","b4851725":"Q34.head()","8295eac4":"today_date","4bb93f10":"Q12.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","a0a2fb7b":"Q12[\"Customer ID\"] = Q12[\"Customer ID\"].astype(int)","dc3689db":"(today_date - Q12.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head()","f4457879":"temp_Q12df = (today_date - Q12.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))","cb0934be":"temp_Q12df.rename(columns={\"InvoiceDate\": \"RecencyQ12\"}, inplace = True)","3c71e62d":"temp_Q12df.head()","2ecf47b6":"recency_Q12df = temp_Q12df[\"RecencyQ12\"].apply(lambda x: x.days)","6cf73185":"recency_Q12df.head()","578a0c6f":"Q12.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda x: (today_date - x.max()).days}).head()","0e4a7cd4":"temp_Q12df = Q12.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","351422ba":"temp_Q12df.head()","cc3a8d06":"temp_Q12df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"}).head()","038fb920":"freq_Q12df = temp_Q12df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_Q12df.rename(columns={\"Invoice\": \"FrequencyQ12\"}, inplace = True)\nfreq_Q12df.head()","0aeedfc9":"monetary_Q12df = Q12.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})","b610f300":"monetary_Q12df.head()","c3a5724e":"monetary_Q12df.rename(columns={\"TotalPrice\": \"MonetaryQ12\"}, inplace = True)","79e644ad":"print(recency_Q12df.shape,freq_Q12df.shape,monetary_Q12df.shape)","10f0d173":"rfmQ12 = pd.concat([recency_Q12df, freq_Q12df, monetary_Q12df],  axis=1)","3c3a29ae":"rfmQ12.head()","689ed974":"rfmQ12[\"RecencyScoreQ12\"] = pd.qcut(rfmQ12['RecencyQ12'], 5, labels = [5, 4, 3, 2, 1])","641a5453":"rfmQ12[\"FrequencyScoreQ12\"] = pd.qcut(rfmQ12['FrequencyQ12'], 5, labels = [1, 2, 3, 4, 5])","e5d1439f":"rfmQ12[\"MonetaryScoreQ12\"] = pd.qcut(rfmQ12['MonetaryQ12'], 5, labels = [1, 2, 3, 4, 5])","91415b09":"rfmQ12.head()","2ccceff0":"(rfmQ12['RecencyScoreQ12'].astype(str) + \n rfmQ12['FrequencyScoreQ12'].astype(str) + \n rfmQ12['MonetaryScoreQ12'].astype(str)).head()","6aae251c":"rfmQ12[\"RFM_SCOREQ12\"] = rfmQ12['RecencyScoreQ12'].astype(str) + rfmQ12['FrequencyScoreQ12'].astype(str) + rfmQ12['MonetaryScoreQ12'].astype(str)","5d5ac3b5":"rfmQ12.head()","274be3c3":"seg_mapQ12 = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","f445e229":"rfmQ12['SegmentQ12'] = rfmQ12['RecencyScoreQ12'].astype(str) + rfmQ12['FrequencyScoreQ12'].astype(str)\nrfmQ12['SegmentQ12'] = rfmQ12['SegmentQ12'].replace(seg_mapQ12, regex=True)\nrfmQ12.head(5)","f39e5696":"Q34.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","ffe33dd5":"Q34[\"Customer ID\"] = Q34[\"Customer ID\"].astype(int)","b390ae5f":"(today_date - Q34.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head()","04129aea":"temp_Q34df = (today_date - Q34.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))","b026d36b":"temp_Q34df.rename(columns={\"InvoiceDate\": \"RecencyQ34\"}, inplace = True)","e5bbf7b5":"temp_Q34df.head()","8058a693":"recency_Q34df = temp_Q34df[\"RecencyQ34\"].apply(lambda x: x.days)","2e23ad40":"recency_Q34df.head()","1b76ba77":"Q34.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda x: (today_date - x.max()).days}).head()","d6951813":"temp_Q34df = Q34.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","a1347984":"temp_Q12df.head()","cc2337dc":"temp_Q34df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"}).head()","4a308d60":"freq_Q34df = temp_Q34df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_Q34df.rename(columns={\"Invoice\": \"FrequencyQ34\"}, inplace = True)\nfreq_Q34df.head()","5c641b8b":"monetary_Q34df = Q34.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})","df267989":"monetary_Q34df.head()","d1ed800c":"monetary_Q34df.rename(columns={\"TotalPrice\": \"MonetaryQ34\"}, inplace = True)","ea620ddd":"print(recency_Q34df.shape,freq_Q34df.shape,monetary_Q34df.shape)","3af48692":"rfmQ34 = pd.concat([recency_Q34df, freq_Q34df, monetary_Q34df],  axis=1)","36e901d8":"rfmQ34.head()","9e29e90d":"rfmQ34[\"RecencyScoreQ34\"] = pd.qcut(rfmQ34['RecencyQ34'], 5, labels = [5, 4, 3, 2, 1])","cd5f069f":"rfmQ34[\"FrequencyScoreQ34\"] = pd.qcut(rfmQ34['FrequencyQ34'], 5, labels = [1, 2, 3, 4, 5])","16470b59":"rfmQ34[\"MonetaryScoreQ34\"] = pd.qcut(rfmQ34['MonetaryQ34'], 5, labels = [1, 2, 3, 4, 5])","5c3127d7":"rfmQ34.head()","16caf92c":"(rfmQ34['RecencyScoreQ34'].astype(str) + \n rfmQ34['FrequencyScoreQ34'].astype(str) + \n rfmQ34['MonetaryScoreQ34'].astype(str)).head()","03ae2c95":"rfmQ34[\"RFM_SCOREQ34\"] = rfmQ34['RecencyScoreQ34'].astype(str) + rfmQ34['FrequencyScoreQ34'].astype(str) + rfmQ34['MonetaryScoreQ34'].astype(str)","e421c953":"rfmQ34.head()","74fcc60f":"seg_mapQ34 = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","06585af9":"rfmQ34['SegmentQ34'] = rfmQ34['RecencyScoreQ34'].astype(str) + rfmQ34['FrequencyScoreQ34'].astype(str)\nrfmQ34['SegmentQ34'] = rfmQ34['SegmentQ34'].replace(seg_mapQ34, regex=True)\nrfmQ34.head(20)","84d78bad":"rfmQ12.head(10)","03d53fb1":"rfmQ34.head(10)","bebbb558":"a = pd.concat([rfmQ12, rfmQ34], axis=1)","adf4c8f0":"a.head(5)","77d08fac":"a.isnull().sum()","1d7b633f":"a.shape","99020c86":"a.dropna(inplace = True)","b43080c3":"a.isnull().sum()","447d657b":"a.shape","3bd4d13b":"a.head(5)","ae127c4b":"m = a['SegmentQ12'].unique()","8c2c9e91":"o= pd.DataFrame(m)","b79939dc":"o","523a98d6":"o['index'] = o.index","52a1059f":"o.values","507b5aa9":"sq12 = a['SegmentQ12'].values","4a94080b":"sq12","2419c52e":"sq34 = a['SegmentQ34'].values","c66b5bcd":"sq34","17595a5e":"b= a['SegmentQ12'] + ','+a['SegmentQ34']","045ba2a9":"b.head()","6986ccd3":"from collections import Counter\n\n\nCounter(b).keys() # equals to list(set(words))\ng = Counter(b).values() # counts the elements' frequency","61dc8d3d":"f = pd.DataFrame.from_dict(g)","865ae788":"f.values","79bfd5e5":"c = b.unique()","285c130c":"c","d972cf65":"c = pd.DataFrame(c)","4fe1553a":"c.to_csv('c.csv')","4d9946ab":"c.head()","3fadad7b":"print(pd.DataFrame(df.Name.str.split(',',1).tolist(), \n                         columns = ['first','Last']))","d906a4bd":"c = c.values","d543d3ab":"c = pd.DataFrame([c.split(\",\") for sub in c])\nprint(c)","b7a01a8f":"d = pd.DataFrame(c)\nd.head()","a9fbc546":"k = pd.concat([d, f,o], axis=1)","eda082ea":"k.head()","29ae8c1b":"k.to_csv('k.csv')","def79543":"colnames=['data']","ca87e404":"user1 = pd.read_csv('.\/c.csv', names=colnames)","b146607a":"user1.head()","9fbc6e95":"k = user1.drop(user1.index[0])","0b238f28":"k.head()","fda73b36":"o","b168c23d":"o.to_csv('o.csv')","68f006dd":"colnames2=['From', 'Value']","b38372c4":"user2 = pd.read_csv('.\/o.csv', names=colnames2)","2dfda9cd":"user2","104889dd":"o = user2.drop(user2.index[0])","1aa952ea":"o","c1de8a8c":"k.head()","77362a5b":"# create a list of our conditions\nconditions = [\n    (k['From'] == \"Loyal Customers\"),\n    (k['From'] == \"Need Attention\"),\n    (k['From'] == \"At Risk\"), \n    (k['From'] == \"Can't Loose\"),\n    (k['From'] == \"Champions\"),\n    (k['From'] == \"About to Sleep\"),\n    (k['From'] == \"Potential Loyalists\"),\n    (k['From'] == \"Hibernating\"),\n    (k['From'] == \"Promising\"),\n    (k['From'] == \"New Customers\"),\n    \n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"K\",\"L\"]\n\n# create a new column and use np.select to assign values to it using our lists as arguments\nk['va1'] = np.select(conditions, values)\n\n# display updated DataFrame\nk.head()","5d8ad954":"# create a list of our conditions\nconditions = [\n    (k['To'] == \"Loyal Customers\"),\n    (k['To'] == \"Need Attention\"),\n    (k['To'] == \"At Risk\"), \n    (k['To'] == \"Can't Loose\"),\n    (k['To'] == \"Champions\"),\n    (k['To'] == \"About to Sleep\"),\n    (k['To'] == \"Potential Loyalists\"),\n    (k['To'] == \"Hibernating\"),\n    (k['To'] == \"Promising\"),\n    (k['To'] == \"New Customers\"),\n    \n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"K\",\"L\"]\n\n# create a new column and use np.select to assign values to it using our lists as arguments\nk['va2'] = np.select(conditions, values)\n\n# display updated DataFrame\nk.head()","42db60f8":"k.head()","1e5aade6":"z= \"'\" +  k.va1.map(str)  + \"'\" +', ' + \"'\" + k.va2.map(str) + \"'\"+', ' + \"'\"+ k.Values.map(str) +\"'\" ","89571899":"z = pd.DataFrame(z)","f76ee71b":"z.values","1dd2bfe8":"z.to_csv('z.csv')","c8f9bcc1":"colnames3=['val']","657746ad":"z = pd.read_csv(\".\/z.csv\",names=colnames3)","f2707ed9":"z = z.drop(user2.index[0])","18a41758":"z.shape","8db200c0":"import holoviews as hv\nfrom holoviews import opts, dim\nhv.extension('bokeh')","e48e1cee":"sankey = hv.Sankey([\n    ['A', 'E', 131],\n    ['B', 'H', 25],\n    ['C', 'B', 12],\n    ['A', 'K', 2],\n    ['D', 'D', 6]]\n)\nsankey.opts(width=600, height=400)","f018cb0c":"sankey = hv.Sankey([\n    ['A', 'B', 131],\n    ['A', 'B', 25],\n    ['A', 'B', 12],\n    ['A', 'C', 2],\n    ['A', 'C', 6],\n    ['A', 'C', 28],\n    ['A', 'H', 44],\n    ['A', 'C', 11],\n    ['A', 'H', 78],\n    ['A', 'H', 31],\n    ['A', 'B', 62]]\n)\nsankey.opts(width=600, height=400,node_color=dim('green'))","ffa5eacb":"    (k['To'] == \"Loyal Customers\"),\n    (k['To'] == \"Need Attention\"),\n    (k['To'] == \"At Risk\"), \n    (k['To'] == \"Can't Loose\"),\n    (k['To'] == \"Champions\"),\n    (k['To'] == \"About to Sleep\"),\n    (k['To'] == \"Potential Loyalists\"),\n    (k['To'] == \"Hibernating\"),\n    (k['To'] == \"Promising\"),\n    (k['To'] == \"New Customers\"),","3c072cbd":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 1),\n      label = [\"Loyal Customers\", \"Need Attention\", \"At Risk\", \"Can't Loose\", \"Champions\", \"About to Sleep\",\"Potential Loyalists\",\"Hibernating\",\"Promising\",\"New Customers\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0,0,0,0,0,0,0,0,0,0], # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = [4,8,7,0,2,3,6,1,5,9],\n      value = [131,2,31,140,72,16,23,10,7,2]\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()","ceeca10c":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 1),\n      label = [\"Loyal Customers\", \"Need Attention\", \"At Risk\", \"Can't Loose\", \"Champions\", \"About to Sleep\",\"Potential Loyalists\",\"Hibernating\",\"Promising\",\"New Customers\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0,1,2,3,4,5,6,7], # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = [0,0,0,0,0,0,0,0],\n      value = [140,16,62,22,100,12,41,26]\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()","918fdb21":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 15,\n      line = dict(color = \"black\", width = 1),\n      label = [\"Loyal Customers\", \"Need Attention\", \"At Risk\", \"Can't Loose\", \"Champions\", \"About to Sleep\",\"Potential Loyalists\",\"Hibernating\",\"Promising\",\"New Customers\"],\n      color = \"blue\"\n    ),\n    link = dict(\n      source = [0,0,4,7,4,6,0,2,6,2,7,5,6,7,7,6,0,2,6,4,2,7,1,2,5,4,0,7,3,4], # indices correspond to labels, eg A1, A2, A2, B1, ...\n      target = [0,4,4,7,0,7,2,0,6,2,6,7,0,5,2,2,7,4,4,2,7,0,7,6,6,7,6,4,0,6],\n      value = [140,131,125,120,100,78,72,62,53,50,47,44,41,36,35,34,31,30,28,28,27,26,25,24,24,23,23,22,22,21]\n  ))])\n\nfig.update_layout(title_text=\"Basic Sankey Diagram\", font_size=10)\nfig.show()","761bcb72":"import plotly.plotly as py\nfrom plotly.graph_objs import *\npy.sign_in('ramazan676', 'ILQOZY9rGOStqH2qGxpk')\ntrace1 = {\n  \"link\": {\n    \"color\": [\"rgba(253, 227, 212, 0.5)\", \"rgba(242, 116, 32, 1)\", \"rgba(253, 227, 212, 0.5)\", \"rgba(219, 233, 246, 0.5)\", \"rgba(73, 148, 206, 1)\", \"rgba(219, 233, 246,0.5)\", \"rgba(250, 188, 19, 1)\", \"rgba(250, 188, 19, 0.5)\", \"rgba(250, 188, 19, 0.5)\", \"rgba(127, 194, 65, 1)\", \"rgba(127, 194, 65, 0.5)\", \"rgba(127, 194, 65, 0.5)\", \"rgba(211, 211, 211, 0.5)\", \"rgba(211, 211, 211, 0.5)\", \"rgba(211, 211, 211, 0.5)\"], \n    \"value\": [140,131,125,120,100,78,72,62,53,50,47,44,41,36,35,34,31,30,28,28,27,26,25,24,24,23,23,22,22,21], \n    \"source\": [0,0,4,7,4,6,0,2,6,2,7,5,6,7,7,6,0,2,6,4,2,7,1,2,5,4,0,7,3,4], \n    \"target\": [0,4,4,7,0,7,2,0,6,2,6,7,0,5,2,2,7,4,4,2,7,0,7,6,6,7,6,4,0,6]\n  }, \n  \"node\": {\n    \"pad\": 10, \n    \"line\": {\n      \"color\": \"black\", \n      \"width\": 0\n    }, \n    \"color\": [\"#F27420\", \"#4994CE\", \"#FABC13\", \"#7FC241\", \"#D3D3D3\", \"#8A5988\", \"#449E9E\", \"#D3D3D3\", None, None, None, None, None, None, None], \n    \"label\": [\"Loyal Customers\", \"Need Attention\", \"At Risk\", \"Can't Loose\", \"Champions\", \"About to Sleep\",\"Potential Loyalists\",\"Hibernating\",\"Promising\",\"New Customers\"], \n    \"thickness\": 30\n  }, \n  \"type\": \"sankey\", \n  \"domain\": {\n    \"x\": [0, 1], \n    \"y\": [0, 1]\n  }, \n  \"orientation\": \"h\", \n  \"valueformat\": \".0f\"\n}\ndata = Data([trace1])\nlayout = {\n  \"font\": {\"size\": 10}, \n  \"title\": \"RFM Analysis\", \n  \"height\": 772\n}\nfig = Figure(data=data, layout=layout)\nplot_url = py.plot(fig)","ec1424b0":"pip install \"notebook>=5.3\" \"ipywidgets>=7.2\"","921b78b7":"[ [0, 4, 131],\n       [1, 7, 25],\n       [2, 1, 12],\n       [0, 8, 2],\n       [3, 3, 6],\n       [4, 2, 28],\n       [5, 7, 44],\n       [3, 2, 11],\n       [6, 7, 78],\n       [0, 7, 31],\n       [2, 0, 62],\n       [0, 0, 140],\n       [1, 0, 16],\n       [4, 0, 100],\n       [7, 6, 47],\n       [7, 7, 120],\n       [4, 6, 21],\n       [3, 4, 10],\n       [7, 2, 35],\n       [4, 4, 125],\n       [2, 2, 50],\n       [1, 2, 13],\n       [2, 6, 24],\n       [6, 2, 34],\n       [6, 6, 53],\n       [3, 0, 22],\n       [6, 0, 41],\n       [0, 2, 72],\n       [2, 7, 27],\n       [3, 6, 5],\n       [7, 1, 11],\n       [5, 6, 24],\n       [6, 4, 28],\n       [7, 4, 22],\n       [8, 7, 14],\n       [4, 1, 14],\n       [6, 1, 18],\n       [5, 0, 12],\n       [0, 3, 16],\n       [4, 7, 23],\n       [7, 5, 36],\n       [8, 6, 6],\n       [5, 2, 10],\n       [0, 6, 23],\n       [9, 9, 4],\n       [2, 5, 10],\n       [4, 5, 8],\n       [1, 1, 5],\n       [7, 0, 26],\n       [1, 6, 11],\n       [7, 9, 15],\n       [2, 4, 30],\n       [6, 8, 1],\n       [6, 3, 1],\n       [6, 9, 6],\n       [3, 7, 6],\n       [1, 4, 8],\n       [2, 3, 10],\n       [8, 9, 1],\n       [9, 6, 6],\n       [2, 9, 1],\n       [7, 8, 14],\n       [4, 3, 5],\n       [8, 5, 5],\n       [5, 8, 9],\n       [9, 7, 16],\n       [0, 1, 10],\n       [6, 5, 18],\n       [0, 5, 7],\n       [1, 5, 2],\n       [8, 0, 2],\n       [5, 5, 7],\n       [1, 3, 2],\n       [9, 5, 3],\n       [2, 8, 3],\n       [7, 3, 3],\n       [8, 1, 1],\n       [5, 4, 3],\n       [9, 8, 4],\n       [9, 0, 2],\n       [8, 8, 4],\n       [8, 4, 1],\n       [1, 8, 1],\n       [5, 1, 4],\n       [5, 3, 1],\n       [0, 9, 2],\n       [8, 2, 2],\n       [5, 9, 2],\n       [9, 1, 1],\n       [3, 5, 1],\n       [3, 1, 1],\n       [9, 2, 1]],\n","f1f6b52c":"df2.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","c2b7f72a":"df2[\"Customer ID\"] = df2[\"Customer ID\"].astype(int)","93e00cc2":"(today_date - df2.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head()","86f5d179":"temp_df = (today_date - df2.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))","305a3b14":"temp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)","fb602701":"temp_df.head()","594cc4c7":"recency_df = temp_df[\"Recency\"].apply(lambda x: x.days)","8f76c4d5":"recency_df.head()","00365452":"df2.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda x: (today_date - x.max()).days}).head()","e356331c":"temp_df = df2.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","27e20f29":"temp_df.head()","b81be356":"temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"}).head()","3f15f6aa":"freq_df = temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head()","9bc4bdf6":"monetary_df = df2.groupby(\"Customer ID\").agg({\"TotalPrice\":\"sum\"})","73013d46":"monetary_df.head()","8de32fce":"monetary_df.rename(columns={\"TotalPrice\": \"Monetary\"}, inplace = True)","1eb31263":"print(recency_df.shape,freq_df.shape,monetary_df.shape)","8ef4cd97":"rfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1)","3ab910d9":"rfm.head()","42f62fd9":"rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels = [5, 4, 3, 2, 1])","5ed10ab1":"rfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'], 5, labels = [1, 2, 3, 4, 5])","cbd5e03a":"rfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])","bd014cae":"rfm.head()","7acd6cc9":"(rfm['RecencyScore'].astype(str) + \n rfm['FrequencyScore'].astype(str) + \n rfm['MonetaryScore'].astype(str)).head()","7cefa322":"rfm[\"RFM_SCORE\"] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str) + rfm['MonetaryScore'].astype(str)","422af5cf":"rfm.head()","79f633d9":"rfm.describe().T","aae7242b":"rfm[rfm[\"RFM_SCORE\"] == \"555\"].head()","b2539e6a":"rfm[rfm[\"RFM_SCORE\"] == \"111\"].head()","6ee3f773":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","d98e7fb9":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head(20)","353fb4c6":"rfm[rfm[\"Segment\"] == \"Need Attention\"].head(20)","3ba56882":"rfm[rfm[\"Segment\"] == \"New Customers\"].index","1a61aa87":"new_df = pd.DataFrame()\nnew_df[\"NewCustomerID\"] = rfm[rfm[\"Segment\"] == \"New Customers\"].index","d2fbb7ca":"new_df.head(20)","f8a4bd81":"pip install squarify","b281040c":"import pandas as pd\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\nimport squarify","19a1bdfd":"# Calculate average values for each RFM_Level, and return a size of each segment \nrfm_level_agg = rfm.groupby('Segment').agg({\n    'Recency': 'mean',\n    'Frequency': 'mean',\n    'Monetary': ['mean', 'count']\n}).round(1)\n# Print the aggregated dataset\nprint(rfm_level_agg)","6a27cfbf":"rfm_level_agg.columns = ['Recencymean','Frequencymean', 'Monetarymean','Count']\n#Create our plot and resize it.\nfig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(16, 9)\nsquarify.plot(sizes=rfm_level_agg['Count'], \n              label=['Hibernating',\n                     'At Risk',\n                     'Can\\'t Loose',\n                     'About to Sleep',\n                     'Need Attention', \n                     'Loyal Customers',\n                     'Promising',\n                     'Potential Loyalists',\n                     'New Customers',\n                     'Champions',], alpha=.6 )\nplt.title(\"RFM Segments\",fontsize=22,fontweight=\"bold\")\nax.set_xlabel('Recency',fontsize=12)\nax.set_ylabel('Frequency',fontsize=12)\nplt.axis('on')\nplt.show()","6dd5794b":"# Q12 Monetary","e952e9e2":"# Recency","1653238b":"# Q12 RFM","d3448a91":"# COMPARE Q12 with Q34","58039e79":"# Monetary","93c81c7e":"# Clean dataset","b5d91b55":"# Data Preparation","ee284c16":"# Business Problem \n\n\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments.\n\nFor this purpose, we will define the behavior of customers and we will form groups according to clustering.\n\nIn other words, we will take those who exhibit common behaviors into the same groups and we will try to develop sales and marketing techniques specific to these groups.\n\n**Data Set**\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II\n\n- This Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n**Variables**\n\n- InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation. \n- StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product. \n- Description: Product (item) name. Nominal. \n- Quantity: The quantities of each product (item) per transaction. Numeric. \n- InvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated. \n- UnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3). \n- CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer. \n- Country: Country name. Nominal. The name of the country where a customer resides.","1b88d4d4":"# Data Understanding ","e343ab34":"# Q12 Monetary","0795e537":"# Q34 RFM","1100b34a":"# Q12 Frequency","5ddcd675":"# VALUE Q12","61aa5ff0":"# RFM GENERAL","1bea2b57":"# Value Q34","20e54dfa":"# Customer Segmentation with RFM Scores\n\nConsists of initials of Recency, Frequency, Monetary expressions.\n\nIt is a technique that helps determine marketing and sales strategies based on customers' buying habits.\n\n- Recency (innovation): The period since the last purchase of the customer,\n\n     -- In other words, it is the \u201ctime since the last contact of the customer\u201d.\n\n     -- Today's date - Last purchase,\n\n     -- To give an example, if we are doing this analysis today, today's date is the last product purchase date.\n\n     -- This can be 20, for example, 100. We know that 20 customers are hotter. He has been in contact with us recently.\n\n- Frequency: Total number of purchases.\n\n- Monetary (Monetary Value): Total spending by the customer.","9ed301e9":"# Q12 Recency","f50807fd":"# Frequency","c3a0f985":"# Q34 Recency","723b5d4d":"##","e251bdd1":"# questions","d9205566":"# Q34 Frequency","a7b3d8d5":"Split the data into 2 pieces."}}