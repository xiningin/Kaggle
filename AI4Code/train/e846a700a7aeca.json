{"cell_type":{"c62d07c0":"code","24caa113":"code","a1fd1eb7":"code","f80050fc":"code","5b6cd791":"code","84303bfd":"code","395183e3":"code","9d381a12":"code","91b618f6":"code","1dc262f7":"code","0303d3b2":"code","ea05180f":"code","72489094":"code","627cd4dc":"code","4bee16fa":"markdown","4fc9a517":"markdown","b974e04f":"markdown","c44919d0":"markdown","b3eb5277":"markdown","8246992c":"markdown","6490bd49":"markdown","0cf19557":"markdown"},"source":{"c62d07c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24caa113":"import matplotlib.pyplot as plt\nfrom sklearn.datasets import load_digits\ndigits=load_digits()\n","a1fd1eb7":"import pylab as pl\npl.gray()\npl.matshow(digits.images[0])\npl.show()","f80050fc":"digits.images[0]","5b6cd791":"images_and_labels=list(zip(digits.images,digits.target))\nplt.figure(figsize=(5,5))\nfor index,(image,label) in enumerate(images_and_labels[:15]):\n    plt.subplot(3,5,index+1)\n    plt.axis('off')\n    plt.imshow(image,cmap=plt.cm.gray_r,interpolation='nearest')\n    plt.title('%i'% label)","84303bfd":"import random\nfrom sklearn import ensemble","395183e3":"#define variables \nn_samples=len(digits.images)\nx=digits.images.reshape((n_samples,-1))\ny=digits.target\n","9d381a12":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=0)","91b618f6":"\nclassifier=ensemble.RandomForestClassifier()","1dc262f7":"classifier.fit(X_train,y_train)","0303d3b2":"score=classifier.score(X_test,y_test)\nprint(score)\ny_pred=classifier.predict(X_test)","ea05180f":"i=9\npl.gray() \npl.matshow(digits.images[i]) \npl.show() \nprint(classifier.predict(x[i].reshape(1,-1)))","72489094":"i=3\npl.gray() \npl.matshow(digits.images[i]) \npl.show() \nprint(classifier.predict(x[i].reshape(1,-1)))","627cd4dc":"i=2\npl.gray() \npl.matshow(digits.images[i]) \npl.show() \nprint(classifier.predict(x[i].reshape(1,-1)))","4bee16fa":"## _Fit model with sample data_","4fc9a517":"# Import libraries and dataset from scikitlearn\n","b974e04f":"# Visualize first 15 images","c44919d0":"## _Using random forest classifier_","b3eb5277":"# **Training the dataset**","8246992c":"## _Attempt to predict validation data_","6490bd49":"# Analyze a sample image","0cf19557":"## _Splitting dataset into train and test set_"}}