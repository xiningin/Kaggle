{"cell_type":{"bbd64e07":"code","3782e1b7":"code","0fc2c915":"code","97f0e357":"code","97f7c8a2":"code","24a76b4b":"code","fac4d4bb":"code","f080c329":"code","18d16f7c":"markdown","de61f29a":"markdown","98b56686":"markdown","c1743964":"markdown","e9effc21":"markdown"},"source":{"bbd64e07":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","3782e1b7":"def heightConv(height):\n    feet=height.split(\"\\'\")[0]\n    inch=height.split(\"\\'\")[1]\n    return((float(feet)*12)+float(inch))","0fc2c915":"df=pd.read_csv('.\/fifadata.csv')\ndf.drop(columns=['Unnamed: 0'],inplace=True)","97f0e357":"poslst=['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\n# We do not consider position list for predicting another position attribute, we need to consider physical and other atrributes","97f7c8a2":"# Function for correlation and linear regression analysis for any position","24a76b4b":"def GetAttributeWeights(dframe,position, testsize):\n    dframe=dframe.drop(columns=poslst)\n    \n    #print(len(dframe.columns))\n    # Finding best position attributes by taking players of only that position\n    dframe=dframe[dframe.Position==position].reset_index(drop=True)\n    len(dframe)\n\n    dframe.columns=dframe.columns.str.replace(' ','')\n    dframe_attr=dframe[[\"Age\",\"Overall\",\"Potential\",\"Special\",\"InternationalReputation\",\"WeakFoot\",\"SkillMoves\",\"WorkRate\",\"Height\",\"Weight\",\n           \"Crossing\",\"Finishing\",\"HeadingAccuracy\",\"ShortPassing\",\"Volleys\",\"Dribbling\",\"Curve\",\"FKAccuracy\",\"LongPassing\",\n           \"BallControl\",\"Acceleration\",\"SprintSpeed\",\"Agility\",\"Reactions\",\"Balance\",\"ShotPower\",\"Jumping\",\"Stamina\",\"Strength\",\"LongShots\",\"Aggression\",\"Interceptions\",\"Positioning\",\"Vision\",\"Penalties\",\"Composure\",\"Marking\",\"StandingTackle\",\"SlidingTackle\",\"GKDiving\",\"GKHandling\",\"GKKicking\",\"GKPositioning\",\"GKReflexes\"]]\n\n    # Convert height to inches (numerical) and weight (numerical)\n    dframe_attr.Height=dframe_attr.Height.apply(lambda x : heightConv(x))\n    dframe_attr.Weight=dframe_attr.Weight.apply(lambda x : float(str(x).replace('lbs','')))\n    #print(dframe_attr.WorkRate.unique())\n    #print(dframe_attr.SkillMoves.unique())\n    # No unique work rate for players which can be dropped\n    dframe_attr=dframe_attr.drop(columns=['WorkRate','SkillMoves'])\n    for col in dframe_attr:\n        dframe_attr[col]=dframe_attr[col].astype('float')\n    #print(len(dframe_attr.columns))\n    \n    dframe_attr_corr=dframe_attr.corr()[['Overall']].reset_index().rename(columns={'index':'Attribute'}).sort_values('Overall',ascending=False).reset_index(drop=True)\n    dframe_attr_corr=dframe_attr_corr[dframe_attr_corr.Attribute!='Overall']\n    \n    # Get regression weights\n    X=dframe_attr.drop(columns=['Overall']).values\n    y=dframe_attr[['Overall']].values\n\n    X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=testsize, random_state=18)\n    lr=LinearRegression()\n    lr.fit(X_train,y_train)\n    print(\"Train accuracy\", lr.score(X_train,y_train))\n    print(\"Test accuracy\", lr.score(X_test,y_test))\n\n    # 99% accuracy even we decrease the train size which is highly linealy distributed data\n    # Let us check weights of attributes\n    dframe_attr_lr=pd.DataFrame(list(dframe_attr.drop(columns=['Overall']).columns),[lr.coef_[0]]).reset_index().rename(columns={'level_0':'Weight',0:'Attribute'})[['Attribute','Weight']].sort_values('Weight',ascending=False).reset_index(drop=True)\n    return(dframe_attr_corr,dframe_attr_lr)","fac4d4bb":"gk_cor,gk_lr=GetAttributeWeights(df,'GK',0.3)\nprint('Linear Regression')\nprint(gk_lr[:5])\nprint('\\n')\nprint('Correlation')\nprint(gk_cor[:5])","f080c329":"st_cor,st_lr=GetAttributeWeights(df,'ST',0.3)\nprint('Linear Regression')\nprint(st_lr[:7])\nprint('\\n')\nprint('Correlation')\nprint(st_cor[:7])","18d16f7c":"#### Let us check goatkeeper attributes","de61f29a":"#### We give preference to linear regression again over correlation\n#### Hence top physical attributes include following:\n    1-Finishing \n    2-Positioning\n    3-BallControl\n    4-ShotPower\n    5-HeadingAccuracy\n##### Note: InternationalReputation and Special are non physical attribute but are in top 5 of overall attributes","98b56686":"#### What can be personal (Physical and Non Physical) attribute data\n     Age, Overall, Potential, Special, International Reputation, Weak Foot, Skill Moves, Work Rate, Height, Weight, Crossing, Finishing, HeadingAccuracy, ShortPassing, Volleys, Dribbling, Curve, FKAccuracy, LongPassing, BallControl, Acceleration, SprintSpeed, Agility, Reactions, Balance, ShotPower, Jumping, Stamina, Strength, LongShots, Aggression, Interceptions, Positioning, Vision, Penalties, Composure, Marking, StandingTackle, SlidingTackle, GKDiving, GKHandling, GKKicking, GKPositioning, GKReflexes","c1743964":"#### Let us check Striker attributes","e9effc21":"#### We give preference to linear regression as multi collinearity problem is addressed there\n#### Hence top attributes include following:\n    GKReflexes\n    GKHandling\n    GKDiving\n    GKPositioning \n##### Note: InternationalReputation is a non physical attribute which is in top 4 of overall attributes"}}