{"cell_type":{"3a18b6ea":"code","3ea85c7e":"code","59aa1fe5":"code","76832390":"code","c6f7915f":"code","0b3e3545":"code","f8d49f2f":"code","f946cb43":"code","ca916a56":"code","fb3c68a7":"code","8cf1fcf7":"code","f780a8bb":"code","6cbf7a48":"code","f295014e":"code","b36c6481":"code","8fe715f0":"code","372ec80c":"code","06c642a8":"markdown","7d0fc740":"markdown","0da78aef":"markdown"},"source":{"3a18b6ea":"# Set-up libraries\nimport os\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report","3ea85c7e":"# Check input data source\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59aa1fe5":"# Read-in data\ndf = pd.read_csv('..\/input\/paysim1\/PS_20174392719_1491204439457_log.csv')","76832390":"# Look at some details\ndf.info()","c6f7915f":"# Look at some records\ndf.head()","0b3e3545":"# Check for missing values\ndf.isna().sum()","f8d49f2f":"# Look at breakdown of label\ndf.isFlaggedFraud.value_counts()\nsns.countplot(df.isFlaggedFraud)","f946cb43":"# Look at breakdown of categorical feature(s)\ndf.type.value_counts()\nsns.countplot(df.type)","ca916a56":"# Summarise\ndf.describe()","fb3c68a7":"# Transform categorical feature(s) to numeric\nle = LabelEncoder()\ndf.type = le.fit_transform(df.type)","8cf1fcf7":"# Explore correlations to label\ndf.corr().isFlaggedFraud.sort_values(ascending=False)","f780a8bb":"# Explore correlations visually\nf, ax = plt.subplots(figsize=(12,6))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')","6cbf7a48":"# Split data into 80% train and 20% test\nX = df.drop(columns=['isFlaggedFraud', 'nameDest', 'nameOrig'], axis=1)\ny = df['isFlaggedFraud']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)","f295014e":"# Build and train model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)","b36c6481":"# Apply model to validation data\ny_predict = model.predict(X_val)","8fe715f0":"# Compare actual and predicted values\nactual_vs_predict = pd.DataFrame({'Actual': y_val,\n                                'Prediction': y_predict})\nactual_vs_predict.sample(12)","372ec80c":"# Evaluate model\nprint('Classification metrics: \\n', classification_report(y_val, y_predict))","06c642a8":"## Step 3: Model and evaluate\nThis last step is three-fold.\n\nWe create the model and fit the model to the data we prepared for training.\n\t\nWe then proceed to classifying with the data we prepared for validation.\n\t\nLastly, we evaluate the model's performance with mainstream classification metrics. ","7d0fc740":"## Step 2: Preprocess data and understand some more\nThis step typically takes the most time in the cycle but for our purposes, the dataset we have chosen is somewhat clean.\n\t\nReal-world datasets are noisy and incomplete. The choices we make in this step to address data issues can impact downstream steps and the result itself. For example, it can be tricky to address missing data when we don't know why it's missing. Is it missing completely at random? It can also be tricky to address outliers if we do not understand the domain and problem context enough.","0da78aef":"Nalanda Academy Invitation to data science problem set 2\n\nIn this lesson we will use the decision tree classifier to try and predict if a transaction is fraudulent or not.\n\n\nAs a step 1 let's take a look at the data."}}