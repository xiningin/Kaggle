{"cell_type":{"e573dff6":"code","90ed18b6":"code","8ba0dde6":"code","f7ffe665":"code","da4b5514":"code","11d675ed":"code","e0d5d39c":"code","49297d5d":"code","72d41087":"code","1fc4f9c7":"code","e80c1a26":"code","97e17193":"code","179e6a4a":"code","327dfd52":"code","181115d4":"code","fa5b5deb":"code","d160b3ba":"code","617fe448":"code","64720eda":"code","670f5f30":"code","c8413b80":"code","bf4e3f6d":"code","0e75f935":"code","45df1dd4":"code","801ca97d":"code","a4dd86ac":"code","01fd41a6":"code","fc7e7595":"code","d8274e52":"code","42d9599c":"code","b3d26749":"code","9f6a1fb7":"code","f37e59a4":"code","55292adf":"code","25bc745e":"code","244ea131":"code","255516cb":"code","d2429c33":"code","09c9e1a8":"code","04eeda02":"code","a6b85125":"code","1245928c":"markdown","4e5a2f04":"markdown","f75f2798":"markdown","d4ea8e70":"markdown","3700847c":"markdown","ae852347":"markdown","d884f62d":"markdown","bb880efb":"markdown","515f621b":"markdown","373a9cc8":"markdown","48cea02b":"markdown","fb5a0db9":"markdown","0b112002":"markdown"},"source":{"e573dff6":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport glob\nimport pydicom","90ed18b6":"siim_covid19_dir = os.path.join(\n    '..', 'input', 'siim-covid19-detection')","8ba0dde6":"def read_csv(file_name):\n    file_path = os.path.join(siim_covid19_dir, file_name)\n    df = pd.read_csv(file_path)\n    return df","f7ffe665":"study_level_df = read_csv('train_study_level.csv')\n\nstudy_level_df","da4b5514":"# How many rows?\nstudy_level_num_rows = len(study_level_df)\n\nstudy_level_num_rows","11d675ed":"# Are unique? Any duplicates?\nstudy_level_num_unique_ids = len(pd.unique(study_level_df['id']))\n\nif study_level_num_unique_ids == study_level_num_rows:\n    print(\"Unique and no duplicates\")\nelse:\n    print(\"Some duplicates\")","e0d5d39c":"# What are the unique value combinations? How many of them?\nstudy_level_label_colums = [\n    'Negative for Pneumonia', 'Typical Appearance',\n    'Indeterminate Appearance', 'Atypical Appearance' ]\nstudy_level_labels_df = study_level_df[study_level_label_colums]\nstudy_level_label_values = study_level_labels_df.values\n\nstudy_level_unique_label_combinations, \\\nstudy_level_unique_label_counts = \\\n    np.unique(\n        study_level_label_values, return_counts=True, axis=0)\n\nprint(\"Unique Combinations:\\n\", study_level_unique_label_combinations)\nprint(\"Unique Counts:\\n\", study_level_unique_label_counts)","49297d5d":"image_level_df = read_csv('train_image_level.csv')\n\nimage_level_df","72d41087":"# How many rows?\nimage_level_num_rows = len(image_level_df)\n\nimage_level_num_rows","1fc4f9c7":"# Are unique? Any duplicates?\nimage_level_num_unique_ids = len(pd.unique(image_level_df['id']))\n\nif image_level_num_unique_ids == image_level_num_rows:\n    print(\"Unique and no duplicates\")\nelse:\n    print(\"Some duplicates\")","e80c1a26":"# How does it look like?\nfor i in range(5):\n    boxes = image_level_df.loc[i, 'boxes']\n    print(\"{0}: {1}\".format(i, boxes))","97e17193":"# How does it look like?\nfor i in range(5):\n    label = image_level_df.loc[ i, 'label']\n    print(\"{0}: {1}\".format(i, label))","179e6a4a":"# How many rows have how many fields?\n# 3013 rows have 6 fileds, ..., 1 row has 48 fields.\nimage_level_label_field_counts = \\\n    image_level_df['label'] \\\n        .apply(lambda label: len(label.split())) \\\n        .value_counts() \\\n        .sort_index()\n\nprint(image_level_label_field_counts)\nassert sum(image_level_label_field_counts) == image_level_num_rows","327dfd52":"def make_image_level_label_df(label):\n    '''Make a DataFrame from a label string.'''\n    fields_list = label.split()\n    num_fields = len(fields_list)\n    # https:\/\/note.nkmk.me\/python-list-ndarray-1d-to-2d\/\n    fields_2d_list = [\n        fields_list[ i:i+6 ] for i in range(0, num_fields, 6)]\n    columns = [\n        'prediction', 'confidence',\n        'left', 'top', 'right', 'bottom']\n    label_df = pd.DataFrame(fields_2d_list, columns=columns)\n    label_df = label_df.astype({\n        'confidence': np.float32,\n        'left': np.float32, 'top': np.float32,\n        'right': np.float32, 'bottom': np.float32 })\n    return label_df","181115d4":"# For each labels, what predictions and how many?\nimage_level_label_pred_count_dict_list = []\nfor idx, (image_id, label) in image_level_df[['id', 'label']].iterrows():\n    label_df = make_image_level_label_df(label)\n    pred_count_dict = label_df['prediction'].value_counts().to_dict()\n    image_level_label_pred_count_dict_list.append(pred_count_dict)\n    \nimage_level_label_pred_df = pd.DataFrame(\n    image_level_label_pred_count_dict_list)\nimage_level_label_pred_df = image_level_label_pred_df.fillna(0)\n\nimage_level_label_pred_df","fa5b5deb":"# How many for each predictions?\nimage_level_label_pred_df.sum()","d160b3ba":"# How many for each prediction combinations?\nimage_level_label_pred_df.value_counts().sort_index()","617fe448":"# How many images for each StudyInstanceUID?\nimage_level_study_id_value_counts = \\\n    image_level_df['StudyInstanceUID'].value_counts()\n\nimage_level_study_id_value_counts.value_counts().sort_index()","64720eda":"# Append StudyInstanceUID to image level predictions.\nlabel_pred_study_id_df = \\\n    pd.concat([\n        image_level_label_pred_df,\n        image_level_df['StudyInstanceUID']],\n        axis=1)\n\nlabel_pred_study_id_df","670f5f30":"def get_0_or_ge_1(value):\n    return \"0\" if value == 0 else \">= 1\"","c8413b80":"# For each study, check image prediction sum is \"0\" or \">= 1\".\ndef get_prediction_counts_for(study_id):\n    study_uid = study_id.replace(\"_study\", \"\")\n    study_uid_mask = \\\n        (label_pred_study_id_df['StudyInstanceUID'] == study_uid)\n    label_pred_for_study_df = \\\n        label_pred_study_id_df[ study_uid_mask ]\n    image_pred_count_for_study_df = \\\n        label_pred_for_study_df[ ['opacity', 'none'] ].sum()\n    opacity_value = get_0_or_ge_1(\n        image_pred_count_for_study_df['opacity'])\n    none_value = get_0_or_ge_1(\n        image_pred_count_for_study_df['none'])\n    return pd.Series({\n        'opacity': opacity_value, 'none' : none_value})\n\nstudy_level_image_pred_count_df = study_level_df['id'].apply(\n    lambda study_id: get_prediction_counts_for(study_id))\n\nstudy_level_image_pred_count_df","bf4e3f6d":"# How many for image predictions and study labels?\nstudy_level_labels_df.columns = [\n    'Negative', 'Typical', 'Indeterminate', 'Atypical' ]\nimage_pred_count_study_labels_pd = pd.concat(\n    [study_level_image_pred_count_df, study_level_labels_df],\n    axis=1)\n\nimage_pred_count_study_labels_pd.value_counts().sort_index()","0e75f935":"def get_image_path(image_level_row):\n    image_id = image_level_row['id'].replace('_image', '')\n    study_id = image_level_row['StudyInstanceUID']\n    image_path_pattern = os.path.join(\n        siim_covid19_dir, 'train', study_id, '*', image_id + \".dcm\")\n    image_path_list = glob.glob(image_path_pattern)\n    assert len(image_path_list) == 1\n    return image_path_list[0]","45df1dd4":"def get_series_number(image_level_row):\n    image_path = get_image_path(image_level_row)\n    # https:\/\/pydicom.github.io\/pydicom\/stable\/reference\/generated\/pydicom.filereader.dcmread.html#pydicom.filereader.dcmread\n    # stop_before_pixels=True: to read element information only.\n    dicom = pydicom.filereader.dcmread(\n        image_path, stop_before_pixels=True)\n    if dicom.SeriesNumber is None:\n        series_number = -1   # Some DICOM file doesn't have the number...\n    else:\n        series_number = int(dicom.SeriesNumber)\n    return series_number","801ca97d":"def make_series_number_row(image_level_row):\n    series_number = get_series_number(image_level_row)\n    return pd.Series({\n        \"id\": image_level_row['id'],\n        'StudyInstanceUID': image_level_row['StudyInstanceUID'],\n        'SeriesNumber': series_number,\n    })","a4dd86ac":"series_number_df = image_level_df.apply(make_series_number_row, axis=1)\nseries_number_df = pd.concat([\n    series_number_df, image_level_label_pred_df], axis=1)\n\nseries_number_df","01fd41a6":"# Show the study id and number of images for the study\nseries_number_grp = series_number_df.groupby(['StudyInstanceUID'])\nseries_number_grp_size = series_number_grp.size()\n\nseries_number_grp_size.sort_values(ascending=False)","fc7e7595":"# For the study '0fd2db233deb', which has 9 images,\n# an image with lowest Series Number of '1' has an opacity bbox.\n# No opacity bboxes for the other images.\nseries_number_grp.get_group('0fd2db233deb').sort_values('SeriesNumber')","d8274e52":"# The same for the study 'a7335b2f9815'.\nseries_number_grp.get_group('a7335b2f9815').sort_values('SeriesNumber')","42d9599c":"def process_series_number_group(ser_num_grp_df):\n    ser_num_grp_df = ser_num_grp_df.sort_values('SeriesNumber')\n    lowest = ser_num_grp_df.iloc[ 0, : ]\n    other = ser_num_grp_df.iloc[ 1: , : ]\n    return pd.Series({\n        'lowest_opacity': get_0_or_ge_1(lowest['opacity']),\n        'lowest_none': get_0_or_ge_1(lowest['none']),\n        'other_opacity': get_0_or_ge_1(other['opacity'].sum()),\n        'other_none': get_0_or_ge_1(other['none'].sum()) })","b3d26749":"series_number_pred_count_df = \\\n    series_number_grp.apply(process_series_number_group)\n\nseries_number_pred_count_df","9f6a1fb7":"series_number_pred_count_df.value_counts().sort_index()","f37e59a4":"ser_num_pred_count_other_opacity_ge_1_df = \\\n    series_number_pred_count_df[\n        series_number_pred_count_df['other_opacity'] == \">= 1\" ]\n\nser_num_pred_count_other_opacity_ge_1_df","55292adf":"for study_id in ser_num_pred_count_other_opacity_ge_1_df.index:\n    other_opacity_ge_1_study_df = series_number_grp.get_group(study_id)\n    print(other_opacity_ge_1_study_df)","25bc745e":"def get_xray_size(image_level_row):\n    image_path = get_image_path(image_level_row)\n    dicom = pydicom.filereader.dcmread(\n        image_path, stop_before_pixels=True)\n    return int(dicom.Rows), int(dicom.Columns)","244ea131":"def get_opacity_count(image_level_row):\n    label_df = make_image_level_label_df(image_level_row['label'])\n    opacity_mask = label_df['prediction'] == \"opacity\"\n    opacity_count = sum(opacity_mask)\n    return opacity_count","255516cb":"def make_image_level_bbox_row(image_level_row):\n    opacity_count = get_opacity_count(image_level_row)\n    height, width = get_xray_size(image_level_row)\n    return pd.Series({\n        'opacity_count': opacity_count,\n        'label': image_level_row['label'],\n        'height': height,\n        'width': width })\n\nimage_level_bbox_df = \\\n    image_level_df.apply(make_image_level_bbox_row, axis=1)\n\nimage_level_bbox_df","d2429c33":"opacity_mask = image_level_bbox_df['opacity_count'] > 0\nopacity_count = image_level_bbox_df.loc[opacity_mask, 'opacity_count'] \\\n    .value_counts() \\\n    .sort_index()\n\nopacity_count","09c9e1a8":"plt.bar(opacity_count.index, opacity_count.values)\nplt.title('Opacity Counts for Each Image')\nplt.show()","04eeda02":"lefts = []\ntops = []\nrights = []\nbottoms = []\nfor _, bbox_row in image_level_bbox_df.iterrows():\n    label = bbox_row['label']\n    label_df = make_image_level_label_df(label)\n    for _, bbox in label_df.iterrows():\n        if bbox['prediction'] == 'none':\n            continue\n        left, top, right, bottom = \\\n            bbox[['left', 'top', 'right', 'bottom']]\n        image_width = bbox_row['width']\n        image_height = bbox_row['height']\n        lefts.append(left \/ image_width)\n        tops.append(top \/ image_height)\n        rights.append(right \/ image_width)\n        bottoms.append(bottom \/ image_height)\n\nlen(lefts)","a6b85125":"plt.figure(figsize=(12, 9))\nplt.scatter(lefts, tops, alpha=0.4, label=\"top-left\")\nplt.scatter(rights, bottoms, alpha=0.4, label=\"bottom-right\")\nplt.title(\"Opacity BBox Positions\")\nplt.gca().invert_yaxis()\nplt.legend()\nplt.show()","1245928c":"### Image Level: StudyInstanceUID\n\n* For each StudyInstanceUID, number of images are from 1 to 9.","4e5a2f04":"### Image Level: Label\n\n* Format: \"prediction, confidence, left, top, right, bottom\", ...\n* Number of fields is multiple of 6, maximum is 48.\n* Maximum number of bboxes for a image is 8 (= 48 \/ 6).","f75f2798":"----\n## train_image_level.csv\n\n* 6334 rows x 4 columns\n* Columns: 'id', 'boxes', 'label', and 'StudyInstanceUID'","d4ea8e70":"----\n## DICOM Series Number\n\nMake sure the topic regarding Series Number described [here](https:\/\/www.kaggle.com\/c\/siim-covid19-detection\/discussion\/243273).\n\nIn this discussion:\n> **Whichever image has the lowest SeriesNumber in the study is the one that you will need to predict bounding boxes on**.\n\nIf the lowest SerialNumber image has:\n* NO opacity,\n    * most of the other images have NO opacity.\n    * 8 images have opacity.\n* one or more opacity, ALL the other images have NO opacity.\n\n| lowest SeriesNumber opacity | the other SeriesNumber opacity | count |\n|:---------------------------:|:------------------------------:|:-----:|\n|                0            |                0               |  1760 |\n|                             |               >= 1             |     8 |\n|               >= 1          |                0               |  4286 |\n|                             |               >= 1             |     0 |\n","3700847c":"----\n## train_study_level.csv\n\n* 6054 rows x 5 columns\n* Columns: 'id' and 4 labels","ae852347":"### Study Level: id\n\n* Unique and no duplicates.","d884f62d":"#### Image Level: Label: Prediction\n\n* The prediction for each bbox is either 'opacity' or 'none'.\n* Number of 'opacity' is 7853, and 'none' is 2040.\n* For each image, prediction is either:\n    * 'none', or\n    * one or more 'opacity'.","bb880efb":"Yet another EDA for train CSV files...\n\n## Preparations","515f621b":"### Study Level: Labels\n\n* Only one of four label values is 1 in training data.\n* For test data, maybe multiple 1's ([Overview -- Evaluation](https:\/\/www.kaggle.com\/c\/siim-covid19-detection\/overview\/evaluation)).","373a9cc8":"----\n## Image Predictions and Study Labels\n\nFor each study:\n\n* No 'opacity' and only 'none':\n    * Almost 'Negative'\n\n| 'opacity' | 'none' | Negative | Typical | Indeterminate | Atypical |\n|:---------:|:------:|:--------:|:-------:|:-------------:|:--------:|\n|     0     |  >= 1  |   1676   |    1    |       0       |    83    |\n\n* Some 'opacity' and zero or more 'none':\n    * NO 'Negative'\n\n| 'opacity' | 'none' | Negative | Typical | Indeterminate | Atypical |\n|:---------:|:------:|:--------:|:-------:|:-------------:|:--------:|\n|    >= 1   |   0    |    0     |  2724   |    1007       |    386   |\n|    >= 1   |  >= 1  |    0     |   130   |      42       |      5   |","48cea02b":"----\n## BBoxes\n\nMajority pattern is 2 opacity bboxes for each lung.","fb5a0db9":"### Image Level: Boxes\n\n* A list of dictionaries. Each dictionary holds bbox information.\n* NaN for no bbox, empty list is easier to handle...","0b112002":"### Image Level: id\n\n* Unique and no dupulicates"}}