{"cell_type":{"390af538":"code","7955aeba":"code","3e8741dc":"code","4eaae678":"code","cd7076a6":"code","b0ff0f38":"code","27c0563d":"code","d3bc69c6":"code","756954a1":"code","ce610a02":"code","ffb9773b":"code","6c624219":"code","d19809e3":"markdown"},"source":{"390af538":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import gridspec","7955aeba":"\ndf = pd.read_csv(\"..\/input\/creditcard\/creditcard.csv\")\ndf.head()","3e8741dc":"print(df.shape)\nprint(df.describe())","4eaae678":"fraud = df[df['Class']==1]\nvalid = df[df['Class']==0]\noutlierfraction=len(fraud)\/float(len(valid))\nprint(outlierfraction)\nprint(\"Fraud cases: {}\".format(len(df[df['Class']==1])))\nprint('Valid Transacions: {}'.format(len(df[df['Class']==0])))","cd7076a6":"print('Amount details of the fraudulent transaction') \nfraud.Amount.describe() ","b0ff0f38":"print('details of valid transaction') \nvalid.Amount.describe() ","27c0563d":"corrmat=df.corr()\nfig=plt.figure(figsize=(13,8))\nsns.heatmap(corrmat,vmax = .8, square =True)\nplt.show()","d3bc69c6":"X=df.drop(['Class'], axis=1)\nY=df['Class']\nprint(X.shape)\nprint(Y.shape)\nxData = X.values\nyData = Y.values","756954a1":"from sklearn.model_selection import train_test_split\nxTrain,xTest, yTrain,yTest=train_test_split(xData,yData,test_size=0.2,random_state=42)","ce610a02":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(xTrain,yTrain)\nyPred=rfc.predict(xTest)\nyPred","ffb9773b":"from sklearn.metrics import classification_report, accuracy_score  \nfrom sklearn.metrics import precision_score, recall_score \nfrom sklearn.metrics import f1_score, matthews_corrcoef \nfrom sklearn.metrics import confusion_matrix \n  \nn_outliers = len(fraud) \nn_errors = (yPred != yTest).sum() \nprint(\"The model used is Random Forest classifier\") \n  \nacc = accuracy_score(yTest, yPred) \nprint(\"The accuracy is {}\".format(acc)) \n  \nprec = precision_score(yTest, yPred) \nprint(\"The precision is {}\".format(prec)) \n  \nrec = recall_score(yTest, yPred) \nprint(\"The recall is {}\".format(rec)) \n  \nf1 = f1_score(yTest, yPred) \nprint(\"The F1-Score is {}\".format(f1)) \n  \nMCC = matthews_corrcoef(yTest, yPred) \nprint(\"The Matthews correlation coefficient is{}\".format(MCC)) ","6c624219":"LABELS = ['Normal', 'Fraud'] \nconf_matrix = confusion_matrix(yTest, yPred) \nplt.figure(figsize =(10, 10)) \nsns.heatmap(conf_matrix, xticklabels = LABELS,  \n            yticklabels = LABELS, annot = True, fmt =\"d\"); \nplt.title(\"Confusion matrix\") \nplt.ylabel('True class') \nplt.xlabel('Predicted class') \nplt.show() ","d19809e3":"ConfusionMatrix"}}