{"cell_type":{"ca5efa20":"code","520e555f":"code","b55708f8":"code","f2d287b0":"code","5f54c888":"code","e8027e40":"code","ed06730a":"markdown","05d60499":"markdown","82292cc9":"markdown","919c0421":"markdown","583cda93":"markdown"},"source":{"ca5efa20":"!apt-get update\n!apt-get install libturbojpeg\n!pip install -qU git+git:\/\/github.com\/lilohuang\/PyTurboJPEG.git\n    \n!pip install -q guppy3","520e555f":"import gc\n\nimport pandas as pd\nfrom tqdm.auto import tqdm\nfrom turbojpeg import TurboJPEG\nimport cv2\n\nJPEG = TurboJPEG()\n\ntrain_df = pd.read_csv('..\/input\/pe-train-csv\/train.csv')\n\nfor path in tqdm(train_df.image_path):\n    # choose whether to try with cv2 or TurboJPEG()\n#     img = cv2.imread(path)\n    with open(path, 'rb') as f:\n        img = JPEG.decode(f.read())","b55708f8":"h = hpy()\nprint(h.heap())","f2d287b0":"import pandas as pd\nfrom tqdm.auto import tqdm\nfrom turbojpeg import TurboJPEG\nimport cv2\n\nJPEG = TurboJPEG()\n\ntrain_df = pd.read_csv('..\/input\/pe-train-csv\/train.csv')\n\nfor path in tqdm(train_df.image_path):\n    # choose whether to try with cv2 or TurboJPEG()\n#     img = cv2.imread(path)\n    with open('..\/input\/pe-train-512x512-fold-1-batch-5\/000233653a7b.jpg', 'rb') as f:\n        img = JPEG.decode(f.read())","5f54c888":"import gc\n\nimport pandas as pd\nfrom tqdm.auto import tqdm\nfrom turbojpeg import TurboJPEG\nimport cv2\n\nJPEG = TurboJPEG()\n\ntrain_df = pd.read_csv('..\/input\/pe-train-csv\/train.csv')\n\nfor i, path in enumerate(tqdm(train_df.image_path)):\n    # choose whether to try with cv2 or TurboJPEG()\n#     img = cv2.imread(path)\n    with open(path, 'rb') as f:\n        img = JPEG.decode(f.read())\n    del img\n    if i%1000 == 0:\n        gc.collect()","e8027e40":"import pandas as pd\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom turbojpeg import TurboJPEG\nimport cv2\n\nJPEG = TurboJPEG()\n\ntrain_df = pd.read_csv('..\/input\/pe-train-csv\/train.csv')\n\nimg = np.zeros(shape=(512, 512, 3)).astype(np.uint8)\n\nfor path in tqdm(train_df.image_path):\n    img *= 0\n    # choose whether to try with cv2 or TurboJPEG()\n#     img += cv2.imread(path)\n    with open(path, 'rb') as f:\n        img += JPEG.decode(f.read())","ed06730a":"### Time to get creative? Nope, there's still a memory leak","05d60499":"### Going back to loading different files... Okay so what if I try some variations of `del` and `gc.collect()`\n\nPutting in a `del img` doesn't help. And I can't tell if I add a `gc.collect()` on top of that because the loop takes 20x longer. So I settle for `gc.collect()` every 1000 iterations. Seems the problem is still there.","82292cc9":"### BUT, try the same again but this time loading the same file each loop. No leak.","919c0421":"I'm no expert at memory profiling but what's even more confusing is that I can't see where the memory went. The `Total size` is still around 1.5 GB.","583cda93":"### Just run through all the data using open. Looks like a memory leak.\n\nNote this is not a tqdm issue. You can check by removing it.\n\nYou can also try any of these with `cv2` instead of `TurboJPEG` and the effect should be the same."}}