{"cell_type":{"9d4566c4":"code","0117dda1":"code","35f4f910":"code","ca542589":"code","876a52e3":"code","f2ef5647":"code","77d0401f":"code","897ec8e9":"code","0986b465":"code","298c1474":"code","c3b7fcb8":"code","34d9122e":"code","271594f6":"code","3ff0adc5":"code","c0396ab0":"code","f10042b5":"code","50aff358":"code","ff226e5d":"code","b5ccadb2":"code","deefa23a":"code","328cd544":"code","090bb652":"code","dfd99c40":"code","7735082c":"code","da4ae6cf":"code","f2e94c68":"code","29d91dc2":"code","76e39907":"code","ab2f4b14":"code","e6733da5":"code","fcf4e2e3":"code","a9aca21d":"code","8920bbd6":"code","03f768ed":"code","21798ff2":"code","1bdcc6fa":"code","321984cd":"code","4c1d46cc":"code","3111f5ed":"code","1cb51eaa":"code","fb0b64eb":"code","e43e1816":"code","4637489c":"code","51889ef6":"code","8806fb05":"code","df7188cf":"code","12c51aba":"code","7cfee44a":"code","ef5cd2ec":"code","72b4c49d":"code","fc90931d":"code","1cdec064":"code","1f07a49a":"code","6a04daea":"code","2dcc53b0":"code","5bd24de3":"code","20eeab77":"code","f2234c31":"code","12e28c9c":"code","54989b30":"code","f338f359":"code","e05c6d6c":"code","16d8b8da":"code","d8198d0d":"code","9710e957":"code","052fec8b":"code","d4f5c167":"code","9abcc12f":"code","9dd97b09":"code","6c74ebe3":"code","65be4020":"markdown","28c61b75":"markdown","6a28f26f":"markdown"},"source":{"9d4566c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0117dda1":"import pandas as pd\n\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","35f4f910":"train.head(10)","ca542589":"train.shape","876a52e3":"test.shape","f2ef5647":"test.info()","77d0401f":"train.info()","897ec8e9":"train.isnull().sum()","0986b465":"test.isnull().sum()","298c1474":"import matplotlib.pyplot as plt\n%matplotlib inline\n#%matplotlib inline \uc758 \uc5ed\ud560\uc740 notebook\uc744 \uc2e4\ud589\ud55c \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ubc14\ub85c \uadf8\ub9bc\uc744 \ubcfc \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uac83\n\nimport seaborn as sns\nsns.set()","c3b7fcb8":"def bar_chart(feature):\n    import pandas as pd\n    survived = train[train['Survived']==1][feature].value_counts()\n    #train \ub370\uc774\ud130\uc911 \uc911 Survived\uac00 1\uc778 feature\uc758 \uac2f\uc218\ud569\n    dead = train[train[\"Survived\"]==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar', stacked=True, figsize=(10,5))","34d9122e":"bar_chart(\"Pclass\")","271594f6":"bar_chart(\"SibSp\")\n#\uac00\uc871, \ud615\uc81c\ub4f1 \ub3d9\ud589\uc218\uc5d0 \ub530\ub77c","3ff0adc5":"bar_chart(\"Parch\")\n\n#\uac00\uc871\ub4e4 \uba87\uba85","c0396ab0":"bar_chart(\"Embarked\")\n#\uc5b4\ub290 \uc120\ucc29\uc7a5\uc5d0\uc11c \ud0d4\ub098","f10042b5":"train.head()","50aff358":"#Feature Engineering\n\n\ntrain_test_data = [train, test] #\ub370\uc774\ud130 \ud569\uce58\uae30\n\nfor dataset in train_test_data:\n    dataset[\"Title\"] = dataset['Name'].str.extract(\"([A-Za-z]+)\\.\", expand=False)\n","ff226e5d":"train['Title'].value_counts()","b5ccadb2":"title_mapping = {\"Mr\":0, \"Miss\":1, \"Mrs\":2, \"Master\":3, \"Dr\":3, \"Major\":3, \"Mile\":3, \"Countess\":3, \"Ms\":3, \"Lady\":3, \"Jonkheer\":3, \"Don\":3, \"Dona\":3, \"Mme\":3, \"Capt\":3, \"Sir\":3}\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","deefa23a":"train.head()","328cd544":"test.head()","090bb652":"bar_chart(\"Sex\")","dfd99c40":"train.head()","7735082c":"bar_chart(\"Title\")","da4ae6cf":"train.drop('Name', axis=1, inplace=True)\n#axis=1\uc740 \uac01 \ud589\uc758 \ubaa8\ub4e0 \uc5f4\uc5d0 \ub300\ud574\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. => \uc5f4\uc5d0\uc11c Name\uc744 \ucc3e\uc544\uc11c \uc0ad\uc81c\ntest.drop(\"Name\", axis=1, inplace=True)","f2e94c68":"train.head()","29d91dc2":"sex_mapping = {'male':0, 'female':1}\nfor dataset in train_test_data:\n    dataset[\"Sex\"] = dataset['Sex'].map(sex_mapping)\n    \n#\uba38\uc2e0\ub7ec\ub2dd \uad6c\ud604\uc744 \uc704\ud574 \ub0a8\uc790\ub97c 0, \uc5ec\uc790\ub97c 1\ub85c \uc218\uc815\ud568","76e39907":"bar_chart(\"Sex\")","ab2f4b14":"train.head(100)","e6733da5":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","fcf4e2e3":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\n#FacetGrid => \uae30\uc900\uc5d0 \ub530\ub77c \uadf8\ub798\ud504\ub97c \ub098\ub220 \uadf8\ub9bc\nfacet.map(sns.kdeplot, \"Age\", shade=True)\nfacet.set(xlim=(0, train[\"Age\"].max()))\nfacet.add_legend()\n\nplt.show()\n\n","a9aca21d":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, \"Age\", shade=True)\nfacet.set(xlim=(0, train[\"Age\"].max()))\nfacet.add_legend()\nplt.xlim(0,20)\n#20\uc0b4\uae4c\uc9c0","8920bbd6":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, \"Age\", shade=True)\nfacet.set(xlim=(0, train[\"Age\"].max()))\nfacet.add_legend()\nplt.xlim(20,40)","03f768ed":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, \"Age\", shade=True)\nfacet.set(xlim=(0, train[\"Age\"].max()))\nfacet.add_legend()\nplt.xlim(40,60)","21798ff2":"train_test_data","1bdcc6fa":"for dataset in train_test_data:\n    dataset.loc[dataset[\"Age\"]<=16, \"Age\"] = 0\n    #\ub370\ub370\uc774\uc774\ud130\ud130\uc14b\uc14b\uc5d0\uc11c Age\uac00 16\uc774\ud558\uc778 \ud589\uc5d0\uc11c Age\uc5f4\ub9cc \ucd94\ucd9c\n    dataset.loc[(dataset[\"Age\"]>16) & (dataset[\"Age\"]<=26), 'Age'] = 1\n    dataset.loc[(dataset[\"Age\"]>26) & (dataset[\"Age\"]<=36), \"Age\"] = 2\n    dataset.loc[(dataset[\"Age\"]>36) & (dataset[\"Age\"]<=62), \"Age\"] = 3\n    dataset.loc[dataset[\"Age\"]>62, 'Age'] = 4","321984cd":"bar_chart(\"Age\")","4c1d46cc":"Pclass1 = train[train['Pclass']==1][\"Embarked\"].value_counts()\nPclass2 = train[train[\"Pclass\"]==2][\"Embarked\"].value_counts()\nPclass3 = train[train[\"Pclass\"]==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index=['lst class', '2nd class', '3rd class']\ndf.plot(kind='bar', stacked=True,figsize=(10,5))","3111f5ed":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","1cb51eaa":"train.head()","fb0b64eb":"embarked_mapping = {\"S\":0, \"C\":1, \"Q\":2}\nfor dataset in train_test_data:\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].map(embarked_mapping)","e43e1816":"train_test_data","4637489c":"train[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\n#Pclass\ubcc4 \uc911\uac04\uac12\uc73c\ub85c \uacf5\ubc31\uc744 \ucc44\uc6b0\uae30 \uc704\ud574 Pclass\ub85c \uadf8\ub8f9\ud654\ub97c \ud568\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","51889ef6":"facet = sns.FacetGrid(train, hue='Survived', aspect=4)\nfacet.map(sns.kdeplot, \"Fare\", shade=True)\nfacet.set(xlim=(0,train[\"Fare\"].max()))\nfacet.add_legend()\n\nplt.show()","8806fb05":"for dataset in train_test_data:\n    dataset.loc[dataset['Fare'] <=17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] >17) & (dataset['Fare'] <=30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] >30) & (dataset['Fare'] <=100), 'Fare'] = 2\n    dataset.loc[dataset['Fare'] >100, 'Fare'] = 4","df7188cf":"train.head()","12c51aba":"train.Cabin.value_counts()","7cfee44a":"for dataset in train_test_data:\n    dataset[\"Cabin\"] = dataset['Cabin'].str[:1]","ef5cd2ec":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train[\"Pclass\"]==2]['Cabin'].value_counts()\nPclass3 = train[train[\"Pclass\"]==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class', '2nd class', '3rd class']\ndf.plot(kind='bar', stacked=True, figsize=(10,5))","72b4c49d":"cabin_mapping = {\"A\":0, \"B\":0.4, \"C\":0.8, \"D\":1.2, \"E\":1.6, \"F\":2, \"G\":2.4, \"T\":2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset[\"Cabin\"].map(cabin_mapping)","fc90931d":"train[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","1cdec064":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] +1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] +1","1f07a49a":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, \"FamilySize\", shade= True)\nfacet.set(xlim=(0, train[\"FamilySize\"].max()))\nfacet.add_legend()\nplt.xlim(0)","6a04daea":"family_mapping = {1:0,2:0.4, 3:0.8, 4:1.2, 5:1.6, 6:2, 7:2.4, 8:2.8, 9:3.2, 10:3.6, 11:4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","2dcc53b0":"train.head()","5bd24de3":"#\ud544\uc694\uc5c6\ub294 \ub370\uc774\ud130 \uc0ad\uc81c\nfeatures_drop = [\"Ticket\", \"SibSp\", \"Parch\"]\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop([\"PassengerId\"], axis=1)\ntrain = train.drop([\"Title\"], axis=1)\ntest = test.drop([\"Title\"], axis=1)\n","20eeab77":"target = train[\"Survived\"]\ntrain_data = train.drop('Survived', axis=1)\ntrain_data.shape, target.shape","f2234c31":"train_data.head(10)","12e28c9c":"target.head(10)","54989b30":"#importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np ","f338f359":"train.info()","e05c6d6c":"#Cross Validation(K-fold)\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nK_fold = KFold(n_splits=10, shuffle=True, random_state=0)","16d8b8da":"#kNN\nclf = KNeighborsClassifier(n_neighbors=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","d8198d0d":"#decision Tree\nclf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100, 2)","9710e957":"#Random Forest\nclf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","052fec8b":"#Naive Bayes\nclf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","d4f5c167":"#SVM\nclf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=K_fold, n_jobs=1, scoring=scoring)\nprint(score)\nround(np.mean(score)*100,2)","9abcc12f":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)\n","9dd97b09":"#\uc81c\ucd9c\nsubmission = pd.DataFrame({\"PassengerID\": test[\"PassengerId\"], \"Survived\":prediction})\n\nsubmission.to_csv('submission.csv', index=False)\n","6c74ebe3":"submission = pd.read_csv('submission.csv')\nsubmission.head()","65be4020":"Feature engineering(Binning)\n\n=> \ub2e4\ub7c9\uc758 \ubc94\uc8fc\ubcc0\uc218\ub97c \uce74\ud14c\uace0\ub9ac\ud654\ub97c \ud1b5\ud574 \uadf8 \uc218\ub97c \uc904\uc784\n\nfeature vector map:\n\nchild:0 \n\nyoung:1\n\nadult:2\n\nmid=age:3\n\nsenior:4","28c61b75":"5. Modelling","6a28f26f":"7. Testing"}}