{"cell_type":{"ded6bdf3":"code","6172e3c0":"code","51fc9ca5":"code","07944663":"code","239eb3d9":"code","858ca9cf":"code","6d30d8a0":"code","81189aa1":"code","268c5714":"code","e2f155af":"code","3ffd9b4f":"code","d372372f":"code","0ebaf280":"code","791aac89":"code","96f7cf8d":"code","abc574f2":"code","830ee60f":"code","f896dfca":"code","38786f81":"code","6954846c":"code","3cb91acc":"code","532bcdf3":"code","1b0de512":"code","99a042c2":"code","7ff1baba":"code","69a89d6c":"code","0b8aeb71":"code","28ad019e":"code","518589a4":"code","5c6d3213":"code","cabf5d51":"code","297cf8a8":"code","bf3a0f50":"code","72a783b6":"code","585e79cc":"code","bab3e2aa":"code","c32d5e10":"code","4b38ad3e":"code","189b334d":"code","d1a5285a":"code","6a733c0d":"code","3172cf06":"code","21e3cdd1":"code","7086668f":"code","3fd01681":"code","18bca457":"code","d07e595d":"code","e5a6b067":"code","b74ecb6e":"markdown","67813253":"markdown","bfa5da07":"markdown","bad613d1":"markdown"},"source":{"ded6bdf3":"import pandas as pd\nimport numpy as np\nimport pandas_profiling as pdp\nfrom sklearn.linear_model import LogisticRegression\npd.set_option('max_rows',1200)\npd.set_option('max_columns',1000)","6172e3c0":"cr=pd.read_csv(\"..\/input\/Loan payments data.csv\")","51fc9ca5":"cr.head()","07944663":"# EDA using pandas profiling\ncr.profile_report(style={'full_width':True})","239eb3d9":"cr.fillna('0',axis=1,inplace=True)","858ca9cf":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ncorr=cr.corr()\nsns.heatmap(corr,annot=True)","6d30d8a0":"cr.sample(10)","81189aa1":"# Printing no of records for different columns\nprint(cr['Gender'].value_counts())\nprint(cr['education'].value_counts())\nprint(cr['Principal'].value_counts())\nprint(cr['loan_status'].value_counts())\nprint(cr['terms'].value_counts())","268c5714":"# Boxplot to show loan status based on gender\nplt.figure(figsize=(10,7))\nsns.boxplot(data=cr,x='loan_status',y='age',hue='Gender',linewidth=2,order=['PAIDOFF','COLLECTION_PAIDOFF','COLLECTION'])\nplt.show()","e2f155af":"# Boxplot to show loan status based on education\nplt.figure(figsize=(15,10))\nsns.boxplot(data=cr,x='loan_status',y='age',hue='education',linewidth=2\n            ,order=['PAIDOFF','COLLECTION_PAIDOFF','COLLECTION'])\n#           ,order=['High School or Below','college','Bechalor','Master or Above'])\nplt.show()","3ffd9b4f":"# Only male has 'master' degree and paidoff loan on time\nplt.figure(figsize=(60,20))\nsns.factorplot(data=cr,x='loan_status',y='age',hue='education',col='Gender',kind='box'\n               ,order=['PAIDOFF','COLLECTION_PAIDOFF','COLLECTION'],aspect= 1.5)\nplt.show()","d372372f":"plt.figure(figsize=(60,20))\nsns.factorplot(data=cr,x='loan_status',y='age',hue='Gender',col='education',kind='box'\n               ,order=['PAIDOFF','COLLECTION_PAIDOFF','COLLECTION'],aspect=1.5)\nplt.show()","0ebaf280":"#Count of males\/females paying loan after due dates(1,2,3,4.....etc)\n# Maximum count is '59' days after due date for both male and female\npd.crosstab(cr['Gender'],cr['past_due_days'],rownames=['gender'], colnames=['Loan paidafter due date'])","791aac89":"# Loan status and count based on gender\n# Close to 90% defaulters are 'MALE'; naturally because male comprise '85%' of total loan records\npd.crosstab(cr['Gender'],cr['loan_status'],rownames=['gender'], colnames=['loan status'])","96f7cf8d":"# Less people took 7 days loan, and hence less defaulters, most defaulters have '30' day loan term\npd.crosstab(cr['terms'],cr['loan_status'],rownames=['terms'], colnames=['loan status'])","abc574f2":"# Mostly people took '1000' principal\/amount of loan and as below data shows most defaulters for this\npd.crosstab(cr['Principal'],cr['loan_status'],rownames=['principal'],colnames=['loan status'])","830ee60f":"# High school and college ones are among most defaulters\npd.crosstab(cr['education'],cr['loan_status'],rownames=['education'],colnames=['loan status'])","f896dfca":"# Various education levels for the loan takers based on gender\npd.crosstab(cr['education'],cr['Gender'],rownames=['education'],colnames=['gender'])","38786f81":"# Below tab shows in which age(26-30 for men; 26-35 for women) maximum loans are taken\npd.crosstab(cr['Gender'],cr['age'],rownames=['gender'],colnames=['age'])","6954846c":"cr.head().append(cr.tail()).append(cr.sample(10))","3cb91acc":"\n# DummyCoding : Replacing 'loan status' with numerical values\ncr['loan_status'].replace('PAIDOFF',0,inplace=True)\ncr['loan_status'].replace('COLLECTION_PAIDOFF',1,inplace=True)\ncr['loan_status'].replace('COLLECTION',2,inplace=True)\ncr.sample(20)","532bcdf3":"\neducation_dummies=pd.get_dummies(cr.education,prefix='education')\neducation_dummies.sample(4)","1b0de512":"education_dummies.drop(education_dummies.columns[0],axis=1,inplace=True)","99a042c2":"education_dummies.head(5)","7ff1baba":"cr=pd.concat([cr,education_dummies],axis=1)\ncr.head(5)","69a89d6c":"cr.drop(cr.columns[9],axis=1,inplace=True)\ncr.sample(15)","0b8aeb71":"# Dummification for gender column\ngender_dummies=pd.get_dummies(cr['Gender'],prefix='gender')\ngender_dummies.drop(gender_dummies.columns[0],axis=1,inplace=True)\ngender_dummies.head()","28ad019e":"\ncr=pd.concat([cr,gender_dummies],axis=1)\ncr.sample(10)","518589a4":"cr.sample(10)","5c6d3213":"\n# Assigning target variable to y\ny=cr['loan_status']","cabf5d51":"# Assigning input variables to X\ncols=['Principal','terms','past_due_days','age','education_Master or Above'\n         ,'education_college','gender_male']\nx=cr[list(cols)].values\nx\n","297cf8a8":"#splitting the data into train and test with 70:30 ratio\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(x, y, test_size=0.30)","bf3a0f50":"#calling logistic regression\nfrom sklearn import metrics\nlogreg = LogisticRegression()","72a783b6":"logreg.fit(X_train,y_train)","585e79cc":"y_pred=logreg.predict(X_test)","bab3e2aa":"# Accuracy score for Logistic regression\nprint(metrics.accuracy_score(y_pred,y_test))","c32d5e10":"#creating a confusion matrix to understand the classification\nconf = metrics.confusion_matrix(y_pred,y_test)\nconf","4b38ad3e":"# invoking Support Vector machines(svm)\nfrom sklearn import svm\nclf = svm.SVC()\nsvc_model = clf.fit(X_train,y_train)","189b334d":"print(svc_model)","d1a5285a":"target_names=['paidoff','collection_paidoff','collection']\nprint(metrics.classification_report(y_pred,y_test,target_names=target_names))","6a733c0d":"sv_pred=svc_model.predict(X_test)\nprint(accuracy_score(sv_pred,y_test))\nprint(confusion_matrix(sv_pred,y_test))\nprint(classification_report(sv_pred,y_test))","3172cf06":"# Applying decision tree algo\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\ntree1=tree.DecisionTreeClassifier()\ndt_model=tree1.fit(X_train,y_train)","21e3cdd1":"print(dt_model)","7086668f":"print(dt_model.feature_importances_)\nprint(dt_model.score(X_train,y_train))","3fd01681":"# Accuracy score for Decision tree algo\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\npred=dt_model.predict(X_test)\nprint(accuracy_score(pred,y_test))\nprint(confusion_matrix(pred,y_test))\nprint(classification_report(pred,y_test))","18bca457":"# Grid Search on DT\nfrom sklearn.model_selection import GridSearchCV\ndt_params={'criterion':['gini','entropy'],'max_depth':range(3,8),'min_samples_split':range(2,6), 'min_samples_leaf':range(1,3)}\ntree2=tree.DecisionTreeClassifier()\ndt_grid=GridSearchCV(tree2,dt_params,cv=5)\ndec_tree=dt_grid.fit(X_train,y_train)","d07e595d":"dt_grid.best_params_","e5a6b067":"pred=dec_tree.predict(X_test)\nprint(accuracy_score(pred,y_test))\nprint(confusion_matrix(pred,y_test))\nprint(classification_report(pred,y_test))","b74ecb6e":"Modeling","67813253":"Model Optimisation","bfa5da07":"**Model: Random Forest Classifier**","bad613d1":"# It seems Decision Tree is giving better results when compared to Logistic Regression and SVM"}}