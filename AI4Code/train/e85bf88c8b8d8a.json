{"cell_type":{"596fd7af":"code","85f53921":"code","0562d98f":"code","cecc61a1":"code","a5baf195":"code","61c87136":"code","34457c87":"code","4b11e4d9":"code","8b192dce":"code","a55db44f":"code","05fc6828":"code","22b08634":"code","dee54f16":"code","024b19c4":"code","75096bf6":"code","4b08490b":"code","3b618665":"code","c968c8e9":"code","c2287c31":"code","6a026894":"code","64dd36b1":"code","7dc04e06":"code","a18e9a89":"code","e4ef4ec1":"code","ec49dc92":"code","656aaab5":"code","0b97cde7":"code","f976d9c1":"code","936027b4":"code","cc03556f":"code","e1f74757":"code","d49cd87e":"code","442ad226":"code","438ad7bb":"code","176875fc":"code","6bd506ac":"code","c00eec73":"code","c10a0556":"code","cc7e418e":"code","d29fba37":"code","2e2d8659":"code","6a867857":"markdown","5dad3b68":"markdown","ca70be90":"markdown","af659e8b":"markdown","8cae0e15":"markdown","fead0a55":"markdown","1a769330":"markdown","2725016d":"markdown","560d04a5":"markdown","9301afa3":"markdown","719d0388":"markdown","2c22bf89":"markdown","b6d2446f":"markdown","c255bc8e":"markdown","4915b043":"markdown","d280d25b":"markdown","f5c5f57a":"markdown","893873e7":"markdown","bed10109":"markdown","41e319e9":"markdown","87c65769":"markdown","5947ba8a":"markdown","e9a84dd3":"markdown","d011d78b":"markdown","2e87c2e5":"markdown","a84e02cd":"markdown","dc994c79":"markdown","925f1ca5":"markdown","e200914f":"markdown","4e87a9a4":"markdown","bfc5099f":"markdown"},"source":{"596fd7af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots\n\n\nimport folium \nfrom folium import plugins\nfrom tqdm.notebook import tqdm as tqdm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","85f53921":"cleaned_data=pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ncleaned_data.head(15)","0562d98f":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\ncleaned_data['Active'] = cleaned_data['Confirmed'] - cleaned_data['Deaths'] - cleaned_data['Recovered']\n\n# filling missing values \ncleaned_data[['Province\/State']] = cleaned_data[['Province\/State']].fillna('')\ncleaned_data[cases] = cleaned_data[cases].fillna(0)\n\ncleaned_data.head()","cecc61a1":"Date_df=cleaned_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nDate_df=Date_df.sort_values(by=['Confirmed'])\nDate_df.head(40)","a5baf195":"temp = Date_df.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='case', value_name='count')\nfig = px.area(temp, x=\"Date\", y=\"count\", color='case',\n             title='Cases over time: Area Plot', color_discrete_sequence = ['cyan', 'red', 'orange'])\nfig.update_xaxes(tick0=4, dtick=4)\n\nfig.show()","61c87136":"for column in Date_df[['Confirmed']]:\n   # Select column contents by column name using [] operator\n   columnSeriesObj = Date_df[column]\n#    print('Colunm Name : ', column)\n#    print('Column Contents : ', columnSeriesObj.values)\n   new_cases=columnSeriesObj.values\nmy_list=[]\nfor i in range(0,len(new_cases)-1):\n    new_value=new_cases[i+1]-new_cases[i]\n    my_list.append(new_value)\nmy_list.insert(0,0)\n\nprint(len(my_list))\nprint(Date_df.shape)\nDate_df['New_cases'] = np.array(my_list)\n","34457c87":"import plotly.express as px\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=Date_df['Date'],\n    y=Date_df['New_cases'],\n    name='New_cases',\n    marker_color='grey'\n))\nfig.show()","4b11e4d9":"for column in Date_df[['Recovered']]:\n   # Select column contents by column name using [] operator\n   columnSeriesObj = Date_df[column]\n#    print('Colunm Name : ', column)\n#    print('Column Contents : ', columnSeriesObj.values)\n   new_recover=columnSeriesObj.values\nmy_list1=[]\nfor i in range(0,len(new_recover)-1):\n    new_value=new_recover[i+1]-new_recover[i]\n    my_list1.append(new_value)\nmy_list1.insert(0,0)\nprint(len(my_list1))\nprint(Date_df.shape)\nDate_df['New_recover'] = np.array(my_list1)\nDate_df.head(5)","8b192dce":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=Date_df['Date'], y=Date_df['New_cases'],\n                    mode='lines+markers',\n                    name='New_cases'))\nfig.add_trace(go.Scatter(x=Date_df['Date'], y=Date_df['New_recover'],\n                    mode='lines+markers',\n                    name='New_recover'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","a55db44f":"Date_df['Closed_cases']=Date_df['Recovered']+Date_df['Deaths']","05fc6828":"Date_df['Recover_percent']=(Date_df['Recovered']\/Date_df['Closed_cases'])*100\nDate_df['Death_percent']=(Date_df['Deaths']\/Date_df['Closed_cases'])*100\nDate_df\n","22b08634":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=Date_df['Date'], y=Date_df['Recover_percent'],\n                    mode='lines+markers',\n                    name='Recover %',line=dict(color='green')))\nfig.add_trace(go.Scatter(x=Date_df['Date'], y=Date_df['Death_percent'],\n                    mode='lines+markers',\n                    name='Death %',line=dict(color='red')))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.update_layout(title='Output of Closed Cases(Recovery OR Death)',\n                   xaxis_title='Date',\n                   yaxis_title='Percentage')\nfig.show()","dee54f16":"new_df=cleaned_data.loc[cleaned_data['Country\/Region'] == 'China'] \n# v=cleaned_data.groupby('Country\/Region')['Active'].sum().reset_index()\n# v = v.melt(id_vars=\"Country\/Region\", value_vars=['Active'],\n#                  var_name='case', value_name='count')\nnew_df1=cleaned_data.loc[cleaned_data['Date'] == '4\/7\/20'] \nres_df=new_df1.groupby('Country\/Region')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nfig = px.pie(res_df, values='Confirmed', names='Country\/Region', title='Countries Cases Distribution')\nfig.show()","024b19c4":"top_10=res_df.sort_values(by=['Confirmed'],ascending=False)[0:10]","75096bf6":"import plotly.express as px\nfig = px.bar(top_10, x='Country\/Region', y='Confirmed')\nfig.show()\n","4b08490b":"top_10_death=res_df.sort_values(by=['Deaths'],ascending=False)[0:10]\ntop_10_death.head(5)\nimport plotly.express as px\nfig = px.bar(top_10_death, x='Country\/Region', y='Deaths')\nfig.show()","3b618665":"us_data=cleaned_data.loc[cleaned_data['Country\/Region']=='US']\nus_data=us_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nus_data=us_data.sort_values(by=['Confirmed'])\n\n\nSpain_data=cleaned_data.loc[cleaned_data['Country\/Region']=='Spain']\nSpain_data=Spain_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nSpain_data=Spain_data.sort_values(by=['Confirmed'])\n\n\n\nItaly_data=cleaned_data.loc[cleaned_data['Country\/Region']=='Italy']\nItaly_data=Italy_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nItaly_data=Italy_data.sort_values(by=['Confirmed'])\n\n\n\nFrance_data=cleaned_data.loc[cleaned_data['Country\/Region']=='France']\nFrance_data=France_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nFrance_data=France_data.sort_values(by=['Confirmed'])\n\n\n\nGermany_data=cleaned_data.loc[cleaned_data['Country\/Region']=='Germany']\nGermany_data=Germany_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nGermany_data=Germany_data.sort_values(by=['Confirmed'])\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=us_data['Confirmed'][30:],\n                    mode='markers',\n                    name='US'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Spain_data['Confirmed'][30:],\n                    mode='markers',\n                    name='Spain'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Italy_data['Confirmed'][30:],\n                    mode='markers',\n                    name='Italy'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=France_data['Confirmed'][30:],\n                    mode='markers',\n                    name='France'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Germany_data['Confirmed'][30:],\n                    mode='markers',\n                    name='Germany'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","c968c8e9":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=us_data['Deaths'][30:],\n                    mode='markers',\n                    name='US'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Spain_data['Deaths'][30:],\n                    mode='markers',\n                    name='Spain'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Italy_data['Deaths'][30:],\n                    mode='markers',\n                    name='Italy'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=France_data['Deaths'][30:],\n                    mode='markers',\n                    name='France'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Germany_data['Deaths'][30:],\n                    mode='markers',\n                    name='Germany'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","c2287c31":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=us_data['Active'][30:],\n                    mode='markers',\n                    name='US'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Spain_data['Active'][30:],\n                    mode='markers',\n                    name='Spain'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Italy_data['Active'][30:],\n                    mode='markers',\n                    name='Italy'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=France_data['Active'][30:],\n                    mode='markers',\n                    name='France'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Germany_data['Active'][30:],\n                    mode='markers',\n                    name='Germany'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","6a026894":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=us_data['Recovered'][30:],\n                    mode='markers',\n                    name='US'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Spain_data['Recovered'][30:],\n                    mode='markers',\n                    name='Spain'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Italy_data['Recovered'][30:],\n                    mode='markers',\n                    name='Italy'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=France_data['Recovered'][30:],\n                    mode='markers',\n                    name='France'))\nfig.add_trace(go.Scatter(x=us_data['Date'][30:], y=Germany_data['Recovered'][30:],\n                    mode='markers',\n                    name='Germany'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","64dd36b1":"train_dataset = pd.read_csv('..\/input\/time-covid19\/time_series_covid_19_confirmed.csv')\ndrop_clo = ['Province\/State','Country\/Region','Lat','Long']\ntrain_dataset=train_dataset.drop(drop_clo,axis=1)\ndatewise= list(train_dataset.columns)\nval_dataset = train_dataset[datewise[-15:]]","7dc04e06":"date_array=np.asarray(Date_df['Date'])\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[0].values[:-15], marker=dict(color=\"dodgerblue\"), showlegend=False,),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[0].values, mode='lines+markers', marker=dict(color=\"darkorange\"), showlegend=False,),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[1].values[:-15], marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[1].values, mode='lines+markers', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[2].values[:-15], marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[2].values, mode='lines+markers', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Train (blue) vs. Validation (orange) sales\")\nfig.show()","a18e9a89":"predictions = []\nfor i in range(len(val_dataset.columns)):\n    if i == 0:\n        predictions.append(train_dataset[train_dataset.columns[-16]].values)\n    else:\n        predictions.append(val_dataset[val_dataset.columns[i-1]].values)\n    \npredictions = np.transpose(np.array([row.tolist() for row in predictions]))\nerror_naive = np.linalg.norm(predictions[:] - val_dataset.values[:])\/len(predictions[:])","e4ef4ec1":"pred_1 = predictions[0]\npred_2 = predictions[1]\npred_3 = predictions[2]\n\nfig = make_subplots(rows=3, cols=1)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[0].values[:-15], marker=dict(color=\"dodgerblue\"),name=\"Train\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[0].values, mode='lines+markers', marker=dict(color=\"darkorange\"), name=\"Validation\"),\n    row=1, col=1,\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=pred_1, mode='lines', marker=dict(color=\"seagreen\"),\n               name=\"Pred\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[1].values[:-15], marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[1].values, mode='lines+markers', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=2, col=1\n)\n\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=pred_2, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[:-15], mode='lines+markers', y=train_dataset.loc[2].values[:-15], marker=dict(color=\"dodgerblue\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=val_dataset.loc[2].values, mode='lines+markers', marker=dict(color=\"darkorange\"), showlegend=False),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=date_array[-15:], y=pred_3, mode='lines', marker=dict(color=\"seagreen\"), showlegend=False,\n               name=\"Denoised signal\"),\n    row=3, col=1\n)\n\nfig.update_layout(height=1200, width=800, title_text=\"Naive approach\")\nfig.show()","ec49dc92":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nrms = sqrt(mean_squared_error(predictions[:3] ,val_dataset.values[:3]))\nprint(rms)","656aaab5":"model_train=Date_df.iloc[:int(Date_df.shape[0]*0.90)]\nvalid=Date_df.iloc[int(Date_df.shape[0]*0.90):]","0b97cde7":"import statsmodels.api as sm\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nholt=Holt(np.asarray(model_train[\"Active\"])).fit(smoothing_level=0.2, smoothing_slope=0.8)\ny_pred=valid.copy()","f976d9c1":"valid.tail(5)\n","936027b4":"import matplotlib.pyplot as plt\ny_pred[\"Holt\"]=holt.forecast(len(valid))\n#model_scores.append(np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])))\nprint(\"Root Mean Square Error Holt's Linear Model: \",np.sqrt(mean_squared_error(y_pred[\"Confirmed\"],y_pred[\"Holt\"])))","cc03556f":"ls=list(valid['Date'])","e1f74757":"ls.extend(['4\/10\/20','4\/11\/20','4\/12\/20','4\/13\/20','4\/14\/20','4\/15\/20','4\/16\/20','4\/17\/20','4\/18\/20'])","d49cd87e":"x=holt.forecast(len(valid)+len(ls))\nx","442ad226":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=model_train['Date'], y=model_train['Active'],\n                    mode='lines+markers',\n                    name='Train ',line=dict(color='green')))\nfig.add_trace(go.Scatter(x=ls, y=valid['Active'],\n                    mode='lines+markers',\n                    name='validation ',line=dict(color='red')))\nfig.add_trace(go.Scatter(x=ls, y=x,\n                    mode='lines+markers',\n                    name='predicted ',line=dict(color='white')))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.update_layout(title='Active cases',\n                   xaxis_title='Date',\n                   yaxis_title='Count')\nfig.show()","438ad7bb":"us_data=cleaned_data.loc[cleaned_data['Country\/Region']=='US']\nus_data=us_data.groupby('Date')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()\nus_data=us_data.sort_values(by=['Confirmed'])\n","176875fc":"state_data=cleaned_data.loc[cleaned_data['Country\/Region']=='US']\nstate_data.head(5)","6bd506ac":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=us_data['Date'], y=us_data['Active'],\n                    mode='lines+markers',\n                    name='Active'))\nfig.add_trace(go.Scatter(x=us_data['Date'], y=us_data['Deaths'],\n                    mode='lines+markers',\n                    name='Deaths'))\nfig.update_xaxes(tick0=4, dtick=4)\nfig.show()","c00eec73":"new_df=cleaned_data.loc[cleaned_data['Country\/Region'] == 'China'] \n# v=cleaned_data.groupby('Country\/Region')['Active'].sum().reset_index()\n# v = v.melt(id_vars=\"Country\/Region\", value_vars=['Active'],\n#                  var_name='case', value_name='count')\nnew_df1=cleaned_data.loc[cleaned_data['Date'] == '4\/7\/20'] \nres_df=new_df1.groupby('Country\/Region')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()","c10a0556":"new_df1=cleaned_data.loc[cleaned_data['Date'] == '4\/7\/20'] ","cc7e418e":"res_df=new_df1.groupby('Country\/Region')['Confirmed','Recovered', 'Deaths', 'Active'].sum().reset_index()","d29fba37":"\nimport plotly.graph_objects as go\n\n\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=top_10['Country\/Region'],\n    y=top_10['Confirmed'],\n    name='Confirmed',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=top_10['Country\/Region'],\n    y=top_10['Active'],\n    name='Active',\n    marker_color='lightsalmon'\n))\n\nfig.add_trace(go.Bar(\n    x=top_10['Country\/Region'],\n    y=top_10['Deaths'],\n    name='Deaths',\n    marker_color='red'\n))\nfig.add_trace(go.Bar(\n    x=top_10['Country\/Region'],\n    y=top_10['Recovered'],\n    name='Recovered',\n    marker_color='green'\n))\n\n# Here we modify the tickangle of the xaxis, resulting in rotated labels.\nfig.update_layout(barmode='group', xaxis_tickangle=-45)\nfig.show()","2e2d8659":"import plotly.express as px\nfig = px.bar(top_10, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\",\n             facet_row=\"time\", facet_col=\"day\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"time\": [\"Lunch\", \"Dinner\"]})\nfig.show()","6a867857":"# Moving on to Top 5 Countries","5dad3b68":"<img align=\"left\" src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcS7ovkoWSZdub9adLaiuFEdXYUzjZ6bSSNXPA6vT3z3gmCccuMr\"><\/img>\n\n\n\n\n# Corona Virus\n\n   * Coronaviruses are **zoonotic** viruses (means transmitted between animals and people).  \n   * Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties. \n   * In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n   * Coronaviruses are also **asymptomatic**, means a person can be a carrier for the infection but experiences no symptoms\n\n# Novel coronavirus (nCoV)\n* A **novel coronavirus (nCoV)** is a new strain that has not been previously identified in humans.\n\n# COVID-19 (Corona Virus Disease 2019)\n* Caused by a **SARS-COV-2** corona virus.  \n* First identified in **Wuhan, Hubei, China**. Earliest reported symptoms reported in **November 2019**. \n* First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals. \n* On **30 January** the WHO declared the outbreak to be a **Public Health Emergency of International Concern** ","ca70be90":"In this graph less of variation can be seen in case of newly recovered cases and high rate of variation in new cases as new one were being added to the list on daily basis worldwide.\nfirst rise of new cases was between 12th and 15th feburary,2020 and since after 8th of march it kept rising at a normal rate.","af659e8b":"\n# World Stats","8cae0e15":"# Naive approach\nThe first approach is the very simple naive approach. It simply forecasts the next day's cases as the current day's cases. The model can be summarized as:\n\n<img src=\"https:\/\/i.imgur.com\/r8wjrzk.png\" width=\"120px\">\n\nIn the above equation, yt+1 is the predicted value for the next day's cases and yt is today's cases. The model predicts tomorrow's cases as today's sales. Now let us see how this simple model performs on our miniature dataset. The training data is in blue, validation data in orange, and predictions in green.","fead0a55":"data in variables like Recovered , Active , Deaths and Confirmed were the cumulative one adding old one too . in order to get the bew cases count in confirmed and recovered new variabled were formed to avoid duplicacy.","1a769330":"**Case Progression of top 5 countries**","2725016d":"Top 10 countries with most death cases","560d04a5":"**Preprocessing**","9301afa3":"**Total Cases**","719d0388":"Demographics, social behavior and lower testing capacity are just some of the reasons why Italy and Spain have the highest number of deaths in the world from the coronavirus, health experts told CNBC. \nreasons maybe like \n1- Slow response - there were a lot of spread before people realized\n2- testing capacity - as how many people are being tested for virus.In places where many people are being tested, and quickly, such as China, the number of deaths is not as high as those seen in Italy and Spain, where only citizens showing symptoms of the coronavirus are being tested rest didn't bothered to.\n3- population (elderly) - There was a \u201cdouble combination of risk factors\u201d in Italy .The first group of people to get hit by the virus in the country were the elderly.\n\nOECD data shows that Italy has the second oldest population in the world, after Japan. Those aged above 60 are believed to be at a higher risk of having severe symptoms from the virus.","2c22bf89":"**Outcome of Cases (Recovery or Death)**","b6d2446f":"maximum of people found infected with COVID-19 was in US followed by the countries like Spain , Italy , France and Germany.\nwhy US is on top of the list despite the fact disease was born in china \n1- US lacks enough testing capacity\n2- emerged as 'hotspots' for exhibiting growth\n3-US social distancing ,easure remain less strict that of those other countries.","c255bc8e":"**Countries Cases Distribution**","4915b043":"spain is on the top of the list to get recovered as extention of state of alarm was announced that could keep citizens at home until at least 26th april.\nSpanish Prime Minister Pedro S\u00e1nchez announced on Saturday the total lockdown of all 47 million Spaniards apart from those who are working in essential sectors, in a bid to halt the spread of the coronavirus and to reduce the congestion of the country\u2019s intensive care units (ICUs). ","d280d25b":"**TOP 10 Countries with most confirmed cases**","f5c5f57a":"death pole is topped by Italy due to same reasons mentioned above - slow response , testing capacity and more of elderly population in the country.","893873e7":"#  Train\/Val split \n\n> First, we need to create miniature training and validation sets to train and validate our models. I will take the last 15 days as the validation data and the 55 days before that as the training data. We need to predict the Cases in the validation data using the Cases in the training data.**","bed10109":"Graph shows the current status of total number of cases been increased or decreased on daily basis. \nas per it we could see the first rise was on 13th feburary,2020 upto 13,639 cases , whereas second rise could be seen exact after a month on 13th march,2020 upto 16,853. Highest peek was on 4th april,2020 upto 1,01,488.Since 13th march storm didn't ended it began to rise as per the date in worldwide.","41e319e9":"**1. US**","87c65769":"since 24th march maximum of active cases are in US due to US social distancing measure remian less strict that those of other countries.\nAnd it emerged as on of the ehibiting hotspots for the corona's growth rate there.","5947ba8a":"Going with the maximum contribution in this panedemic disease order remains the same for maximum number of confirmed cases too.","e9a84dd3":"**Newly Infected vs. Newly Recovered**","d011d78b":"As per the graph we could analysis that Active cases were on a constant growth between 11th februrary,2020 and 12th march,2020 but eventually started growing at an increasing rate since 14th march,2020 till date as per data.","2e87c2e5":"**Daily new cases**","a84e02cd":"Percentage is a better way to represent the recoverd cases and deaths during COVID-19 as it gives a bet=ter visualization of the situation.\n\nthere was time betwwen 22nd january and 31st january,2020 when percentage of people recovered and persons who dierd were 50%. Fortunately the percebtage of recovered people rised as on 6th of march,2020 people who recovered were 94.167% whereas the people who died were just 5.832%.\nLately it reduced but at a decreasing rate as percentage of people recoverd was 78.34% as to 21.65% of people who died as on 7th april,2020.\n","dc994c79":"### Forecast, level, and trend equations respectively\n<img src=\"https:\/\/i.imgur.com\/MHgcgGo.png\" width=\"180px\">\n<img src=\"https:\/\/i.imgur.com\/3ImRHEO.png\" width=\"300px\">\n<img src=\"https:\/\/i.imgur.com\/XExnvMX.png\" width=\"300px\">\n","925f1ca5":"cases progression for confirmed cases in our top 5 countries\nus ,spain , italy , france and germany\ntop of the list is owned by US for having maximum number of confirmed cases , followed by Spain and Italy being on almost same number of cases. and lst of the top 5 list is france.","e200914f":"**Death progression of top countries**","4e87a9a4":"# Holt's Linear model","bfc5099f":"# **Modeling**"}}