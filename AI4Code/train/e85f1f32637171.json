{"cell_type":{"04e7972b":"code","524aff4d":"code","1c6babe6":"code","a87b4ec2":"code","c16c09ff":"code","8fa684e4":"code","ad9899c2":"code","eb2a0a1a":"code","4bb6cdd3":"code","e3708ca2":"code","4352c2bb":"code","ae62de74":"code","6c2481ec":"code","eea3d626":"code","f045ac67":"code","56f10531":"code","d95231bf":"code","e96b1f89":"code","4af320b9":"code","d831ee76":"code","2717e798":"code","52e62940":"code","a107c35d":"code","5c7b02d2":"markdown"},"source":{"04e7972b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","524aff4d":"train = pd.read_csv('\/kaggle\/input\/bengali-news-dataset\/train.csv')\ntrain.head()","1c6babe6":"train.describe()","a87b4ec2":"test = pd.read_csv('\/kaggle\/input\/bengali-news-dataset\/valid.csv')\ntest.head()","c16c09ff":"# fix random seed for reproducibility\nnp.random.seed(7)\ntrain = train.drop_duplicates().reset_index(drop=True)\ntest = test.drop_duplicates().reset_index(drop=True)","8fa684e4":"train.label.unique()","ad9899c2":"train.label = train.label.replace('entertainment', 1)\ntrain.label = train.label.replace('national', 2)\ntrain.label = train.label.replace('sports', 3)\ntrain.label = train.label.replace('kolkata', 4)\ntrain.label = train.label.replace('state', 5)\ntrain.label = train.label.replace('international', 6)\ntrain.label = train.label.replace('sport', 7)\ntrain.label = train.label.replace('nation', 8)\ntrain.label = train.label.replace('world', 9)\ntrain.label = train.label.replace('travel', 10)\n","eb2a0a1a":"train.label.head()","4bb6cdd3":"test.label.unique()","e3708ca2":"test.label = test.label.replace('entertainment', 1)\ntest.label = test.label.replace('national', 2)\ntest.label = test.label.replace('sports', 3)\ntest.label = test.label.replace('kolkata', 4)\ntest.label = test.label.replace('state', 5)\ntest.label = test.label.replace('international', 6)\ntest.label = test.label.replace('sport', 7)\ntest.label = test.label.replace('nation', 8)\ntest.label = test.label.replace('world', 9)\ntest.label = test.label.replace('travel', 10)\n","4352c2bb":"train.label.head()","ae62de74":"train = train.append(test)\ndf = train\ndf.head()","6c2481ec":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom keras.layers import SpatialDropout1D\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.feature_selection import RFE\nimport re","eea3d626":"# The maximum number of words to be used. (most frequent)\nMAX_NB_WORDS = 50000\n# Max number of words in each complaint.\nMAX_SEQUENCE_LENGTH = 250\n# This is fixed.\nEMBEDDING_DIM = 100\ntokenizer = Tokenizer(num_words=MAX_NB_WORDS, filters='!\"#$%&()*+,-.\/:;<=>?@[\\]^_`{|}~\u0964', lower=False)\ntokenizer.fit_on_texts(df.article.values)\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))","f045ac67":"X = tokenizer.texts_to_sequences(df.article.values)\nX = pad_sequences(X, maxlen=MAX_SEQUENCE_LENGTH)\nprint('Shape of data tensor:', X.shape)","56f10531":"Y = pd.get_dummies(df.label).values\nprint('Shape of label tensor:', Y.shape)","d95231bf":"train_features, test_features, train_labels, test_labels = train_test_split(X, Y, test_size=.10)","e96b1f89":"\nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","4af320b9":"epochs = 5\nbatch_size = 32\n\nhistory = model.fit(train_features, train_labels, epochs=epochs, batch_size=batch_size,validation_split=0.1,callbacks=[EarlyStopping(monitor='val_loss', patience=3, min_delta=0.0001)])","d831ee76":"accr = model.evaluate(test_features,test_labels)\nprint('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))","2717e798":"from matplotlib import pyplot as plt\nplt.title('Loss')\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()\nplt.title('Accuracy')\nplt.plot(history.history['accuracy'], label='train')\nplt.plot(history.history['val_accuracy'], label='test')\nplt.legend()\nplt.show()","52e62940":"model.save_weights('bengali_news_model.h5')","a107c35d":"news = [\"\"\"\u2018\u09ac\u09a8\u09cd\u09a7\u09c1\u09a4\u09cd\u09ac\u2019 \u0995\u09b0\u09bf\u09df\u09c7 \u09a6\u09c7\u0993\u09df\u09be\u09b0 \u099f\u09cb\u09aa \u09a6\u09bf\u09df\u09c7 \u099f\u09be\u0995\u09be \u09b9\u09be\u09a4\u09be\u09a8\u09cb\u09b0 \u0985\u09ad\u09bf\u09af\u09cb\u0997\u09c7 \u09e7\u09ec \u099c\u09a8\u0995\u09c7 \u0997\u09cd\u09b0\u09c7\u09ab\u09a4\u09be\u09b0 \u0995\u09b0\u09b2 \u0995\u09b2\u0995\u09be\u09a4\u09be \u09aa\u09c1\u09b2\u09bf\u09b6\u09c7\u09b0 \u09b8\u09be\u0987\u09ac\u09be\u09b0 \u0995\u09cd\u09b0\u09be\u0987\u09ae \u09a5\u09be\u09a8\u09be\u0964 \u09a7\u09c3\u09a4\u09a6\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09a8\u2019\u099c\u09a8 \u09aa\u09c1\u09b0\u09c1\u09b7 \u098f\u09ac\u0982 \u09b8\u09be\u09a4\u099c\u09a8 \u09ae\u09b9\u09bf\u09b2\u09be\u0964 \u09a4\u09be\u09a6\u09c7\u09b0 \u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0 \u09ac\u09cd\u09af\u09be\u0999\u09cd\u0995\u09b6\u09be\u09b2 \u0986\u09a6\u09be\u09b2\u09a4\u09c7 \u09a4\u09cb\u09b2\u09be \u09b9\u09b2\u09c7 \u09ac\u09bf\u099a\u09be\u09b0\u0995 \u09e7\u09eb \u09ae\u09c7 \u09aa\u09b0\u09cd\u09af\u09a8\u09cd\u09a4 \u09aa\u09c1\u09b2\u09bf\u09b6\u09bf \u09b9\u09c7\u09ab\u09be\u099c\u09a4\u09c7\u09b0 \u09a8\u09bf\u09b0\u09cd\u09a6\u09c7\u09b6 \u09a6\u09bf\u09df\u09c7\u099b\u09c7\u09a8\u0964\\\n    \u09aa\u09c1\u09b2\u09bf\u09b6 \u099c\u09be\u09a8\u09bf\u09df\u09c7\u099b\u09c7, \u0985\u09ad\u09bf\u09af\u09c1\u0995\u09cd\u09a4\u09c7\u09b0\u09be \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u09b8\u0982\u09ac\u09be\u09a6\u09aa\u09a4\u09cd\u09b0\u09c7 \u2018\u098f\u09b8\u0995\u09b0\u09cd\u099f \u09b8\u09be\u09b0\u09cd\u09ad\u09bf\u09b8\u09c7\u2019\u09b0 \u09ac\u09bf\u099c\u09cd\u099e\u09be\u09aa\u09a8 \u09a6\u09bf\u09a4\u0964 \u09ae\u09b9\u09bf\u09b2\u09be\u09a6\u09c7\u09b0 \u09b8\u0999\u09cd\u0997\u09c7 \u2018\u09ac\u09a8\u09cd\u09a7\u09c1\u09a4\u09cd\u09ac\u2019 \u0995\u09b0\u09c7 \u09b2\u09cb\u09ad\u09a8\u09c0\u09df \u0989\u09aa\u09be\u09b0\u09cd\u099c\u09a8\u09c7\u09b0 \u09b9\u09be\u09a4\u099b\u09be\u09a8\u09bf \u09a5\u09be\u0995\u09a4 \u09b8\u09c7\u0987\u09b8\u09ac \u09ac\u09bf\u099c\u09cd\u099e\u09be\u09aa\u09a8\u09c7\u0964 \u098f\u0987 \u0995\u09be\u099c\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u0997\u09be\u09a1\u09bc\u09bf \u0995\u09b0\u09c7 \u09a8\u09bf\u09df\u09c7 \u09af\u09be\u0993\u09df\u09be \u098f\u09ac\u0982 \u09ac\u09be\u09a1\u09bc\u09bf\u09a4\u09c7 \u09aa\u09cc\u0981\u099b\u09c7 \u09a6\u09c7\u0993\u09df\u09be\u09b0 \u09ac\u09cd\u09af\u09ac\u09b8\u09cd\u09a5\u09be\u0993 \u0986\u099b\u09c7 \u09ac\u09b2\u09c7 \u09b2\u09c7\u0996\u09be \u09a5\u09be\u0995\u09a4 \u09b8\u09c7\u0996\u09be\u09a8\u09c7\u0964 \u09af\u09cb\u0997\u09be\u09af\u09cb\u0997\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09a6\u09c1\u2019\u099f\u09bf \u09ae\u09cb\u09ac\u09be\u0987\u09b2 \u09a8\u09ae\u09cd\u09ac\u09b0\u0993 \u09a6\u09c7\u0993\u09df\u09be \u09a5\u09be\u0995\u09a4\u0964 \u0993\u0987 \u09a8\u09ae\u09cd\u09ac\u09b0\u09c7 \u09af\u09cb\u0997\u09be\u09af\u09cb\u0997 \u0995\u09b0\u09b2\u09c7 \u09ac\u09cd\u09af\u09be\u0999\u09cd\u0995 \u0985\u09cd\u09af\u09be\u0995\u09be\u0989\u09a8\u09cd\u099f\u09c7 \u098f\u0995\u09be\u09a7\u09bf\u0995\u09ac\u09be\u09b0 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0996\u09be\u09a4\u09c7 \u099f\u09be\u0995\u09be \u099c\u09ae\u09be \u09a6\u09bf\u09a4\u09c7 \u09ac\u09b2\u09be \u09b9\u09a4\u09cb\u0964\n    \u0985\u09cd\u09af\u09be\u0995\u09be\u0989\u09a8\u09cd\u099f\u09c7 \u099f\u09be\u0995\u09be \u09aa\u09cc\u0981\u099b\u09c7 \u0997\u09c7\u09b2\u09c7\u0987 \u09b8\u09be\u0987\u09ac\u09be\u09b0 \u0995\u09cd\u09b0\u09be\u0987\u09ae \u09a5\u09be\u09a8\u09be\u09b0 \u09aa\u09c1\u09b2\u09bf\u09b6 \u0986\u09a7\u09bf\u0995\u09be\u09b0\u09bf\u0995 \u09aa\u09b0\u09bf\u099a\u09df \u09a6\u09bf\u09df\u09c7 \u09aa\u09cd\u09b0\u09a4\u09be\u09b0\u09a3\u09be\u099a\u0995\u09cd\u09b0\u09c7\u09b0 \u098f\u0995 \u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf \u09ab\u09cb\u09a8 \u0995\u09b0\u09a4 \u09b8\u0982\u09b6\u09cd\u09b2\u09bf\u09b7\u09cd\u099f \u0986\u09ac\u09c7\u09a6\u09a8\u0995\u09be\u09b0\u09c0\u0995\u09c7\u0964 \u09ab\u09cb\u09a8\u09c7 \u0997\u09cd\u09b0\u09c7\u09ab\u09a4\u09be\u09b0\u09bf\u09b0 \u09b9\u09c1\u09ae\u0995\u09bf\u09b0 \u09aa\u09be\u09b6\u09be\u09aa\u09be\u09b6\u09bf, \u09e8\u09e6 \u09b9\u09be\u099c\u09be\u09b0 \u099f\u09be\u0995\u09be \u09a6\u09be\u09ac\u09bf \u0995\u09b0\u09be \u09b9\u09a4\u09cb \u09ac\u09b2\u09c7 \u0985\u09ad\u09bf\u09af\u09cb\u0997\u0964\u00a0\\\n    \u098f\u0987 \u09aa\u09cd\u09b0\u09a4\u09be\u09b0\u09a3\u09be\u099a\u0995\u09cd\u09b0\u09c7\u09b0 \u0996\u09aa\u09cd\u09aa\u09b0\u09c7 \u09aa\u09a1\u09bc\u09be \u09ae\u09c1\u099a\u09bf\u09aa\u09be\u09a1\u09bc\u09be \u098f\u09b2\u09be\u0995\u09be\u09b0 \u098f\u0995 \u09ac\u09be\u09b8\u09bf\u09a8\u09cd\u09a6\u09be \u098f\u09aa\u09cd\u09b0\u09bf\u09b2 \u09ae\u09be\u09b8\u09c7 \u09aa\u09c1\u09b2\u09bf\u09b6\u09c7\u09b0 \u0995\u09be\u099b\u09c7 \u0985\u09ad\u09bf\u09af\u09cb\u0997 \u09a6\u09be\u09df\u09c7\u09b0 \u0995\u09b0\u09c7\u099b\u09bf\u09b2\u09c7\u09a8\u0964 \u0985\u09ad\u09bf\u09af\u09cb\u0997\u09c7\u09b0 \u09ad\u09bf\u09a4\u09cd\u09a4\u09bf\u09a4\u09c7 \u09a4\u09a6\u09a8\u09cd\u09a4 \u0995\u09b0\u09a4\u09c7 \u0997\u09bf\u09df\u09c7 \u0995\u09b8\u09ac\u09be\u09b0 \u09b0\u09be\u099c\u09a1\u09be\u0999\u09be\u09df \u098f\u0995\u099f\u09bf \u09ab\u09cd\u09b2\u09cd\u09af\u09be\u099f\u09c7\u09b0 \u09b8\u09a8\u09cd\u09a7\u09be\u09a8 \u09ae\u09c7\u09b2\u09c7\u0964 \u09b8\u09cb\u09ae\u09ac\u09be\u09b0 \u09b0\u09be\u09a4\u09c7 \u09b8\u09c7\u0996\u09be\u09a8\u09c7 \u09b9\u09be\u09a8\u09be \u09a6\u09bf\u09df\u09c7 \u0985\u09ad\u09bf\u09af\u09c1\u0995\u09cd\u09a4\u09a6\u09c7\u09b0 \u0997\u09cd\u09b0\u09c7\u09ab\u09a4\u09be\u09b0 \u0995\u09b0\u09be \u09b9\u09df\u0964 \u09a7\u09c3\u09a4\u09a6\u09c7\u09b0 \u0995\u09be\u099b \u09a5\u09c7\u0995\u09c7 \u09eb\u09e9\u099f\u09bf \u09ae\u09cb\u09ac\u09be\u0987\u09b2 \u09ab\u09cb\u09a8, \u09ed\u09eb\u099f\u09bf \u09b8\u09bf\u09ae \u0995\u09be\u09b0\u09cd\u09a1, \u09a6\u09c1\u2019\u099f\u09bf \u0995\u09b0\u09cd\u09a1\u09b2\u09c7\u09b8 \u09ab\u09cb\u09a8, \u098f\u0995\u09be\u09a7\u09bf\u0995 \u09b0\u09be\u09ac\u09be\u09b0 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u09ae\u09cd\u09aa \u098f\u09ac\u0982 \u098f\u0995\u099f\u09bf \u0997\u09be\u09a1\u09bc\u09bf \u09ac\u09be\u099c\u09c7\u09df\u09be\u09aa\u09cd\u09a4 \u0995\u09b0\u09c7\u099b\u09c7 \u09aa\u09c1\u09b2\u09bf\u09b6\u0964  \n       \"\"\"]\nseq = tokenizer.texts_to_sequences(news)\npadded = pad_sequences(seq, maxlen=MAX_SEQUENCE_LENGTH)\npred = model.predict(padded)\nlabels = ['entertainment', 'national', 'sports', 'kolkata', 'state','international', 'sport', 'nation', 'world', 'travel']\nlabel = pred, labels[np.argmax(pred)]\nprint(\"News Label Is: \")\nprint(label[1])","5c7b02d2":"# Bengali News Classification Using RNN\nThis kernel is a keras implementation of RNN for bengali news classification. \nThis kernel code mostly copied from [github\/susanli2016](https:\/\/github.com\/susanli2016\/NLP-with-Python\/blob\/master\/Multi-Class%20Text%20Classification%20LSTM%20Consumer%20complaints.ipynb)\n\n"}}