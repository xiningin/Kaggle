{"cell_type":{"90e668d8":"code","dd528a26":"code","613f936b":"code","7c68ca53":"code","2b703657":"code","f94fdc25":"code","b22ff506":"code","41cd0764":"code","992891aa":"code","f29d961f":"code","dd1b6ec9":"code","d46d7605":"code","c8402fdf":"code","8cd0ac6f":"code","a092528a":"code","bea86b35":"code","70a1434e":"code","30d1389f":"code","c9b0a234":"code","8c1aa134":"code","7852328f":"code","c24dbd1b":"code","2787a17e":"code","0a1aaed1":"code","c5ff06b2":"code","46be5b70":"code","29d8381c":"code","5849dcab":"code","15b20e69":"code","921aa6cf":"code","9c2d66fa":"code","661c2945":"code","d0f9e546":"code","1916d020":"code","9986e4ec":"code","a0135a43":"code","a18e01b0":"code","c46cdd47":"code","c32358f1":"code","123ce793":"code","868a3526":"code","f8321c43":"code","46b8a010":"code","bdfd2c8e":"code","b7c79398":"code","424dc170":"code","f40f293d":"code","e687885b":"code","ac9686cc":"code","d8a2c9f5":"code","eeacc9fb":"code","99fa7e04":"code","9691eecd":"code","dd397629":"code","ce6fe7f7":"code","919b7faa":"code","8fda0737":"code","17fc2d6d":"code","6f52ba1d":"code","89b35b72":"code","ed656bc1":"code","8063fefd":"code","465afd9e":"code","4d25d005":"code","b3283c8b":"code","4aabe019":"code","d44cc7b0":"code","66fda154":"code","1071bf5d":"code","b2a2f4b5":"code","16444eb7":"code","d28457d1":"code","a22c6000":"code","ca7eaf35":"code","c8ebce3b":"code","17f801b6":"code","f9714ed9":"code","c26eae62":"code","a46d62b9":"code","56ed2b29":"code","17426270":"code","8dec7538":"code","db6d80d7":"code","5436e2b1":"code","7f2b7c21":"code","c9d6b912":"code","af11e2e1":"code","fa7599d3":"code","ed5799ce":"code","7f125d52":"code","01d31c63":"code","e604a243":"code","64d5a1a4":"code","da8d424a":"code","dac6e9e5":"code","b4a6b044":"code","4ab8fc34":"code","d33dec6d":"code","0c201910":"code","38a788ae":"code","d2ea12ee":"code","f32f9c37":"code","1e2d8c0a":"code","921dbe6a":"code","73284786":"code","b3ed3fdc":"code","d59d9b68":"code","130de82b":"code","8d79dc4b":"code","587ae0e7":"code","66b91933":"code","1389241d":"code","a23062ba":"code","7b4ed443":"code","67862407":"code","5cc0fe3c":"code","b214b322":"code","f6cfe1cb":"code","7dbefed9":"code","f6e8bdc5":"code","5ed70d13":"code","bef6b578":"markdown","6561be24":"markdown","b2538fce":"markdown","db2429ae":"markdown","3eaf4ca8":"markdown","5671552a":"markdown","d989f18d":"markdown","fcaebb8f":"markdown","61fd3a77":"markdown","f69292e1":"markdown","0480741b":"markdown","9306b5da":"markdown","f649df16":"markdown","7cf6f745":"markdown","b833865f":"markdown","8c822ace":"markdown","c9aa8866":"markdown","e686c6c5":"markdown","d7473a06":"markdown","4a410704":"markdown","4d35dd9d":"markdown","eb4ac991":"markdown","5685f356":"markdown","44bc813b":"markdown","ba4c71bc":"markdown","25c0119b":"markdown","fc18c6d5":"markdown","64da74ae":"markdown","b37f8f07":"markdown","9c6a35aa":"markdown","fad5aef5":"markdown","a2717309":"markdown","ba88ef26":"markdown","5645838c":"markdown","97ac1f36":"markdown","4bb7b325":"markdown","f3acbf14":"markdown","7172b177":"markdown","29772aca":"markdown","a026c3fd":"markdown","fb178676":"markdown","e13decad":"markdown","c9b1cd18":"markdown","46397388":"markdown","396a1a76":"markdown","bf351c26":"markdown","abd0092f":"markdown"},"source":{"90e668d8":"import os\nimport pandas as pd","dd528a26":"path = \"..\/input\/mobile-price-classification\/\"","613f936b":"df_train = pd.read_csv(os.path.join(path,'train.csv'))\ndf_test = pd.read_csv(os.path.join(path,'test.csv'))","7c68ca53":"df_train.head()","2b703657":"df_test.head()","f94fdc25":"df_train.info()","b22ff506":"df_train.describe()","41cd0764":"df_test.shape","992891aa":"df_train.describe()","f29d961f":"import matplotlib.pyplot as plt\nimport seaborn as sns","dd1b6ec9":"plt.figure(figsize = (12,10));\nsns.displot(x = df_train['px_height'], kind= 'kde');","d46d7605":"df_train.info()","c8402fdf":"corr = df_train.corr()","8cd0ac6f":"fig, ax = plt.subplots(figsize = (10,10))\nsns.heatmap(corr, ax = ax, cmap = 'viridis',linewidth = 0.1);","a092528a":"df_train['blue'].value_counts()","bea86b35":"df_train.isnull().sum()","70a1434e":"df_test.isnull().sum()","30d1389f":"fig, ax = plt.subplots(figsize = (12,10))\nsns.heatmap(corr, ax = ax, cmap = 'viridis');","c9b0a234":"df_train['price_range'].value_counts()","8c1aa134":"sns.displot( x = 'ram', data = df_train, kind = 'kde', height = 7, aspect = 1);","7852328f":"sns.catplot(y = 'ram',x = 'price_range',data = df_train, height = 7, aspect = 1);","c24dbd1b":"sns.displot(x = 'battery_power', data = df_train, kind = 'kde', height = 7, aspect = 1);","2787a17e":"sns.catplot(y = 'battery_power', x = 'price_range', data = df_train, aspect = 1, height = 7);","0a1aaed1":"sns.displot(df_train['touch_screen'], kind = 'kde', aspect = 1, height = 7);","c5ff06b2":"df_train['touch_screen'].value_counts()","46be5b70":"sns.catplot(y = 'battery_power', x = 'price_range', hue = 'touch_screen', data = df_train, aspect = 1, height = 7);","29d8381c":"sns.catplot(y = 'ram',x = 'price_range', hue = 'touch_screen',data = df_train, height = 7, aspect = 1);","5849dcab":"df_train['four_g'].value_counts()","15b20e69":"sns.catplot(y = 'battery_power', x = 'price_range', hue = 'four_g', data = df_train, aspect = 1, height = 7);","921aa6cf":"sns.catplot(y = 'ram',x = 'price_range', hue = 'four_g',data = df_train, height = 7, aspect = 1);","9c2d66fa":"labels = [\"4G-supported\", \"Not supported\"]\nvalues = df_train['four_g'].value_counts().values","661c2945":"fig1, ax1 = plt.subplots()\nax1.pie(values, labels = labels, autopct = '%1.1f%%', shadow = True, startangle = 90)\nplt.show()","d0f9e546":"sns.catplot(y = 'ram',x = 'price_range', hue = 'three_g',data = df_train, height = 7, aspect = 1);","1916d020":"sns.catplot(y = 'battery_power', x = 'price_range', hue = 'three_g', data = df_train, aspect = 1, height = 7);","9986e4ec":"labels3g = [\"3G-supported\",\"Not supported\"]\nvalues3g = df_train['three_g'].value_counts().values\nfig1,ax1 = plt.subplots()\nax1.pie(values3g, labels = labels3g, autopct = '%1.1f%%', shadow = True, startangle = 90)\nplt.show()","a0135a43":"sns.catplot(x = 'price_range', y = 'px_height', data = df_train, aspect = 1, height = 7);","a18e01b0":"sns.catplot(x = 'price_range', y = 'px_width', data = df_train, aspect = 1, height = 7);","c46cdd47":"ax = plt.figure(figsize = (8,10))\nsns.violinplot(x = 'price_range', y = 'fc', data = df_train);","c32358f1":"sns.catplot(x = 'price_range', y = 'fc',hue = 'four_g', data = df_train, aspect = 1, height = 7);","123ce793":"sns.catplot(x = 'price_range', y ='int_memory', data = df_train, aspect = 1, height = 7);","868a3526":"sns.catplot(y = 'ram',x = 'price_range', hue = 'wifi',data = df_train, height = 7, aspect = 1);","f8321c43":"fig = plt.figure(figsize = (10,8))\nsns.pointplot(y = \"talk_time\", x = \"price_range\", data = df_train);","46b8a010":"df_train.info()","bdfd2c8e":"df_train.describe()","b7c79398":"dfx_train = df_train.copy()","424dc170":"from sklearn.preprocessing import StandardScaler, RobustScaler","f40f293d":"std_scaler = StandardScaler()\n\nfor column in ['battery_power','int_memory','mobile_wt','px_height','px_width','ram']:\n    df_train[column] = std_scaler.fit_transform(df_train[column].values.reshape(-1,1))","e687885b":"df_train.head()","ac9686cc":"from sklearn.model_selection import train_test_split","d8a2c9f5":"## Split training and testing\n\nX_train, X_test, y_train, y_test = train_test_split(df_train.drop('price_range', axis = 1), df_train['price_range'], test_size = 0.30, random_state = 141)","eeacc9fb":"X2_train,X2_test, y2_train, y2_test = train_test_split(dfx_train.drop('price_range',axis = 1), dfx_train['price_range'], test_size = 0.30, random_state = 141)","99fa7e04":"model_score = pd.DataFrame(columns = ('Accuracy', 'rmse'))","9691eecd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics \nimport math","dd397629":"lrmodel = LogisticRegression()","ce6fe7f7":"lrmodel.fit(X_train, y_train)","919b7faa":"lrmodel.score(X_test,y_test)","8fda0737":"## Without normalization","17fc2d6d":"lrmodel2 = LogisticRegression()","6f52ba1d":"lrmodel2.fit(X2_train, y2_train)","89b35b72":"lrmodel2.score(X2_test, y2_test)","ed656bc1":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix","8063fefd":"naiveb = GaussianNB()","465afd9e":"naiveb.fit(X_train, y_train)","4d25d005":"naiveb.score(X_test, y_test)","b3283c8b":"from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np","4aabe019":"knn = KNeighborsClassifier(n_neighbors = 7)\nknn2 = KNeighborsClassifier(n_neighbors = 7)","d44cc7b0":"knn.fit(X_train, y_train)","66fda154":"knn.score(X_test, y_test)","1071bf5d":"## Without normalization\nknn2.fit(X2_train, y2_train)","b2a2f4b5":"knn2.score(X2_test, y2_test)","16444eb7":"### Elbow Method for optimum values of K","d28457d1":"error_rate = []\n\nfor i in range(1,20):\n    knnx = KNeighborsClassifier(n_neighbors = i)\n    knnx.fit(X2_train, y2_train)\n    pred_i = knnx.predict(X2_test)\n    error_rate.append(np.mean(pred_i != y_test))","a22c6000":"plt.figure(figsize = (10,6))\nplt.plot(range(1,20), error_rate, color = 'blue', linestyle = 'dashed', marker = 'o',\n        markerfacecolor = 'red', markersize = 5);\nplt.title(\"Error Rate vs K Value\")\nplt.xlabel(\"K\")\nplt.ylabel(\"Error Rate\")","ca7eaf35":"from sklearn.tree import DecisionTreeClassifier","c8ebce3b":"dt = DecisionTreeClassifier()","17f801b6":"dt = dt.fit(X_train, y_train)","f9714ed9":"y_pred = dt.predict(X_test)","c26eae62":"print(\"Accuracy\", metrics.accuracy_score(y_test, y_pred))","a46d62b9":"dt.score(X_test, y_test)","56ed2b29":"## Without normalization","17426270":"dt.fit(X2_train,y2_train)","8dec7538":"dt.score(X2_test, y2_test)","db6d80d7":"from sklearn.ensemble import RandomForestClassifier","5436e2b1":"rfclf = RandomForestClassifier(n_estimators = 100)\n","7f2b7c21":"rfclf.fit(X_train, y_train)","c9d6b912":"rfclf.score(X_test, y_test)","af11e2e1":"y_pred = rfclf.predict(X_test)","fa7599d3":"print(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))","ed5799ce":"# Without normalization","7f125d52":"rfclf.fit(X2_train, y2_train)","01d31c63":"rfclf.score(X2_test, y2_test)","e604a243":"rfclf.score(X_test,y_test)","64d5a1a4":"from sklearn import svm","da8d424a":"clf  = svm.SVC(kernel='linear')\n","dac6e9e5":"clf.fit(X_train, y_train)","b4a6b044":"clf.score(X_test, y_test)","4ab8fc34":"## Without normalization","d33dec6d":"clf2 = svm.SVC(kernel='linear')","0c201910":"clf2.fit(X2_train, y2_train)","38a788ae":"clf.score(X2_test, y2_test)","d2ea12ee":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm2 = LinearRegression()","f32f9c37":"lm.fit(X_train, y_train)","1e2d8c0a":"lm.score(X_test, y_test)","921dbe6a":"### Without normalization","73284786":"lm2.fit(X2_train, y2_train)","b3ed3fdc":"lm2.score(X2_test, y2_test)","d59d9b68":"y_pred = lm.predict(X_test)","130de82b":"plt.scatter(y_test, y_pred);","8d79dc4b":"plt.plot(y_test, y_pred);","587ae0e7":"from sklearn.metrics import classification_report, confusion_matrix","66b91933":"pred = knn2.predict(X2_test)","1389241d":"print(classification_report(y2_test, pred))","a23062ba":"matrix = confusion_matrix(y2_test, pred)\nprint(matrix)","7b4ed443":"plt.figure(figsize = (10,7))\nsns.heatmap(matrix, annot = True);","67862407":"df_test.head()","5cc0fe3c":"df_test = df_test.drop('id', axis = 1)","b214b322":"df_test.head()","f6cfe1cb":"predicted_price = knn2.predict(df_test)","7dbefed9":"predicted_price","f6e8bdc5":"df_test['price_range'] = predicted_price","5ed70d13":"df_test","bef6b578":"## Adding Predicted price to test.csv","6561be24":"### Encoding categorical variables","b2538fce":"### four_g","db2429ae":"## 1. Read Dataset","3eaf4ca8":"### wifi","5671552a":"We can see almost all the features are perfect.","d989f18d":"### 2.3 Filling null values","fcaebb8f":"As we don't see anything interesting, we will prepare for Modeling","61fd3a77":"### Ram","f69292e1":"### Decision Tree","0480741b":"# Model Preparation\n- Encoding categorical variables\n- Normalization\n- Split training and testing","9306b5da":"## 3. Data Visualization\n","f649df16":"### Split training and testing","7cf6f745":"### px_height and px_weight","b833865f":"### K-Nearest Neighbour","8c822ace":"Let's analyze the prediction of the alogritm with and without Normalization","c9aa8866":"From the figure, we can say that:\n- The <b> blue plots i.e or lower price range <\/b> has more number of data distributed on <b> battery_power 600-1000 <\/b> \n- Whereas, <b> the red points or higher price range <\/b> has more datas distributed on <b> battery_power 1400-2000 <\/b>","e686c6c5":"### Naive Bayes","d7473a06":"##### Linear Regression","4a410704":"As we can see, there are no any string values which need to be converted on numeric.","4d35dd9d":"### Conclusion: KNN & Linear Regression performed the best","eb4ac991":"### Random Forest","5685f356":"### Outline\n\n- <b> Read Dataset <\/b>\n- <b> Data Cleaning <\/b>\n    - Outliers\n    - Uncorrelated columns\n    - Filling null values\n    \n- <b> Data Visulaization <\/b>\n\n- <b> Model Preparation <\/b>\n    - Encoding categorical variables\n    - Normalization \n    - Split Training and testing\n    \n- <b> Models and Tuning <\/b>\n    - Logistic Regression\n    - Naive Bayes\n    - K-Nearest Neighbor\n    - Decision Tree\n    - Random Forest\n    - Support Vector Machine\n  \n- <b> Model Evaluation <\/b>\n    - Confusion Matrix\n    - Precision\n    - Recall\n    - F1 Score\n","44bc813b":"As we can see there are no<b>    'nan' <\/b>values","ba4c71bc":"<b> touch_screen <\/b> is equally distributed on all price range. We don't see anything here.","25c0119b":"## Result: KNN\n\nSince KNN result much better without normalizing so we are doing all with <b> X2 or Y2 test and train <\/b>","fc18c6d5":"### three_g","64da74ae":".","b37f8f07":"### Support Vector Machine","9c6a35aa":"### Logistic Regression","fad5aef5":"Offcourse, lower the ram lower the price. Higher the ram higher the price.","a2717309":"## 2. Data Cleaning\n- Outliers\n- Uncorrelated columns\n- Filling null values","ba88ef26":"From the above figure, we can observe that, \n- <b> ram <\/b> has higher correlation with <b>  price_range   <\/b> which is obviously true. \n- <b>   pc_width  <\/b> & <b>  pc_height   <\/b> is also correlated with price_range, surprisingly.\n- <b>    battery_power <\/b> \n- However, <b> four_g <\/b>, <b> touch_screen <\/b> and <b> int_memory <\/b> has lower correlation.","5645838c":"### fc (front_camera)","97ac1f36":"### battery_power","4bb7b325":"### Normalization","f3acbf14":"There is no such outliers, it seems","7172b177":"# Price prediction of Test.csv Using KNN for Prediction","29772aca":"## Models and tuning\n\nSince it is classification problem, we will test it with following algorithms:\n- <b> Logistic Regression <\/b>\n- <b> Naive Bayes\n- K-Nearest Neighbour\n- Decision Tree\n- Random Forest\n- Support Vector Machine <\/b>\n\nWe are going to create and train several machine learning models to see their performance in this used dataset for price prediction\n\nWe use <b> F1 Score, Precision, Recall, ROC Curve, Confusion Matrix <\/b> and <b> PR Curve <\/b> as the way to evaluate our models","a026c3fd":"### Model","fb178676":".","e13decad":"### Linear Regression","c9b1cd18":"### 2.1 Outliers","46397388":"### touch_screen","396a1a76":"\n- <b>  price_range   <\/b>\n- <b>  ram   <\/b>\n- <b>  battery_power   <\/b>\n- <b> touch_screen <\/b>\n- <b>    four_g <\/b>\n- <b>   three_g  <\/b>\n- <b>   px_height  <\/b>\n- <b> px_weight <\/b>\n- <b> wifi <\/b>\n\nChecking on these features","bf351c26":"### int_memory","abd0092f":"###  2.2 Uncorrelated Columns"}}