{"cell_type":{"609b7933":"code","6b2654e9":"code","15c14bdf":"code","1ea42a4a":"code","e2bfcf55":"code","58decf65":"code","b4768dde":"code","6d0ef87d":"code","003b4957":"code","04d1b1dc":"markdown"},"source":{"609b7933":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b2654e9":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\ndf = pd.read_csv('..\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv')","15c14bdf":"print(df.nunique())\ncategory_var = [i for i in df.columns if (df[i].nunique()<10)&(i!='target')]\ncontinuous_var = [i for i in df.columns if df[i].nunique()>10]\nprint('category_var',category_var)\nprint('continuous_var',continuous_var)","1ea42a4a":"print(df.head())\nprint('-'*10)\nprint(df.target.value_counts()) #data is balance\n#df.isna().sum() # no NaN\nsns.pairplot(df[continuous_var])","e2bfcf55":"fig = plt.figure(figsize=(16,8))\nfor index,item in enumerate(category_var):\n    ax = plt.subplot(2,4,index+1)\n    sns.barplot(x=df[item].unique(),y=df[item].value_counts(),ax=ax)\nplt.show()","58decf65":"from sklearn.preprocessing import StandardScaler\ny=df.target\nscaler = StandardScaler()\nscaler.fit(df[continuous_var])\ndf[continuous_var]=scaler.transform(df[continuous_var])\ndf = df.drop('target',axis=1)\nprint(df.head())","b4768dde":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df,y,test_size=.2)\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","6d0ef87d":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nsvc = SVC(probability =True)\nsvc.fit(X_train,y_train)\ncv_score = cross_val_score(svc,X_test,y_test,cv=7,scoring='accuracy')\ny_pred = svc.predict(X_test)\nprint('accuracy:{:.4}'.format(accuracy_score(y_test,y_pred)))\nprint(f'mean_of_accuracy:{cv_score.mean()}')","003b4957":"from sklearn.metrics import auc,roc_curve\ny_proba = svc.predict_proba(X_test)\nproba_answer = {'proba':y_proba[:,1],\n        'answer':y_test}\nproba_answer = pd.DataFrame(proba_answer).sort_values(by='proba',ascending=False).reset_index(drop=True)\n#print(proba_answer)\ny_scale = 1\/len(proba_answer[proba_answer['answer']==1])\nx_scale = 1\/len(proba_answer[proba_answer['answer']==0])\nposition_x,position_y = 0,0\nx_list = [0]\ny_list = [0]\nfor i in range(len(proba_answer)):\n    if (proba_answer['answer'][i]==1):       \n        position_y += y_scale\n    else:\n        position_x +=x_scale\n    x_list.append(position_x)\n    y_list.append(position_y)\n    \n#print(x_list)\n#print(y_list)\nfpr,tpr,thresholds = roc_curve(proba_answer['answer'],proba_answer['proba'])\narea_of_curve = auc(fpr,tpr)\n#print(fpr,tpr,thresholds)\n#print(area_of_curve)\nplt.title('ROC_AUC_curve')\nplt.ylabel('True positive rate')\nplt.xlabel('False positive rate')\nplt.plot(x_list,y_list,color='y',label='%.2f'%area_of_curve)\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.plot([0,1],[0,1],'r--',label=0.5)\nplt.legend()\nplt.show()","04d1b1dc":"Attribute Information\n    + age\n    + sex\n    + chest pain type (4 values)\n    + resting blood pressure\n    + serum cholestoral in mg\/dl\n    + fasting blood sugar > 120 mg\/dl\n    + resting electrocardiographic results (values 0,1,2)\n    + maximum heart rate achieved\n    + exercise induced angina\n    + oldpeak = ST depression induced by exercise relative to rest\n    + the slope of the peak exercise ST segment\n    + number of major vessels (0-3) colored by flourosopy\n    + thal: 0 = normal; 1 = fixed defect; 2 = reversable defect\n    + target: 0= less chance of heart attack 1= more chance of heart attack\n    \nThe \"target\" field refers to the presence of heart disease in the patient. It is integer valued 0 = no\/less chance of heart attack and 1 = more chance of heart attack"}}