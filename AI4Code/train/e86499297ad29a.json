{"cell_type":{"3d07ae16":"code","ae4cd415":"code","9117c35c":"code","59b6998f":"code","11999d6e":"code","676d4db4":"code","1ab5cad0":"code","1ce28b93":"code","c483d310":"code","b2c08b82":"code","414f1c5e":"code","b2879bc3":"code","d48b192b":"code","7a64ea6e":"code","b2616474":"code","be539e88":"code","c4ef98fe":"code","63d1e267":"code","93c30cf0":"code","67ce4c91":"code","ff94801e":"code","b4b48940":"code","9992115a":"code","fd5cf6f8":"code","58de3468":"code","361e203b":"code","caacbead":"code","70fa2551":"code","f6556196":"code","3b879071":"markdown","a10f5919":"markdown","b1d0443a":"markdown","cb14f6e3":"markdown"},"source":{"3d07ae16":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom keras.models import Model\nfrom keras.layers import Dense,Dropout,Input,concatenate,BatchNormalization\nfrom keras.callbacks import ReduceLROnPlateau\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ae4cd415":"data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","9117c35c":"data","59b6998f":"test","11999d6e":"pId = test['Id']","676d4db4":"print(\"Missing value count in Training data\")\nmissing_data = data.isnull()\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print(\"\")","1ab5cad0":"print(\"Missing value count in Test data\")\nmissing_data1 = test.isnull()\nfor column in missing_data1.columns.values.tolist():\n    print(column)\n    print(missing_data1[column].value_counts())\n    print(\"\")","1ce28b93":"data['LotFrontage'] = data['LotFrontage'].replace(np.nan, data['LotFrontage'].mean())\ntest['LotFrontage'] = test['LotFrontage'].replace(np.nan, test['LotFrontage'].mean())\ndata['Alley'] = data['Alley'].replace(np.nan,'Grvl')\ntest['Alley'] = test['Alley'].replace(np.nan,'Grvl')\ndata['MasVnrArea'] = data['MasVnrArea'].replace(np.nan,data['MasVnrArea'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].replace(np.nan,test['MasVnrArea'].mean())\ndata['MasVnrType'] = data['MasVnrType'].fillna('none')\ntest['MasVnrType'] = test['MasVnrType'].fillna('none')\ndata['BsmtQual'] =  data['BsmtQual'].replace(np.nan,'TA')\ntest['BsmtQual'] =  test['BsmtQual'].replace(np.nan,'TA')\ndata['BsmtCond'] =  data['BsmtCond'].replace(np.nan,'TA')\ntest['BsmtCond'] =  data['BsmtCond'].replace(np.nan,'TA')\ndata['BsmtExposure'] = data['BsmtExposure'].replace(np.nan,'No')\ntest['BsmtExposure'] = test['BsmtExposure'].replace(np.nan,'No')\ndata['BsmtFinType1'] = data['BsmtFinType1'].replace(np.nan,'Unf')\ntest['BsmtFinType1'] = test['BsmtFinType1'].replace(np.nan,'Unf')\ndata['BsmtFinType2'] = data['BsmtFinType2'].replace(np.nan,'Unf')\ntest['BsmtFinType2'] = test['BsmtFinType2'].replace(np.nan,'Unf')\ndata['Electrical'] = data['Electrical'].replace(np.nan,'SBrkr')\ndata['GarageType'] = data['GarageType'].replace(np.nan,'Attchd')\ntest['GarageType'] = test['GarageType'].replace(np.nan,'Attchd')\ndata['GarageFinish'] = data['GarageFinish'].replace(np.nan,'Unf')\ntest['GarageFinish'] = test['GarageFinish'].replace(np.nan,'Unf')\ndata['GarageQual'] = data['GarageQual'].replace(np.nan,'TA')\ntest['GarageQual'] = test['GarageQual'].replace(np.nan,'TA')\ndata['GarageCond'] = data['GarageCond'].replace(np.nan,'TA')\ntest['GarageCond'] = test['GarageCond'].replace(np.nan,'TA')\ndata['PoolQC'] = data['PoolQC'].replace(np.nan,'Gd')\ntest['PoolQC'] = test['PoolQC'].replace(np.nan,'Gd')\ndata['Fence'] = data['Fence'].replace(np.nan,'MnPrv')\ntest['Fence'] = test['Fence'].replace(np.nan,'MnPrv')\ndata['MiscFeature'] = data['MiscFeature'].replace(np.nan,'Shed')\ntest['MiscFeature'] = test['MiscFeature'].replace(np.nan,'Shed')\ntest['MSZoning'] = test['MSZoning'].fillna('RL')\ntest['Utilities'] =  test['Utilities'].fillna('ALLPub')\ntest['Exterior1st'] =  test['Exterior1st'].fillna('VinylSd')\ntest['Exterior2nd'] =  test['Exterior2nd'].fillna('VinylSd')\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].median()) \ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].median()) \ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].median())\ntest ['BsmtFullBath'] = test ['BsmtFullBath'].fillna('0')\ntest ['HalfBath'] = test ['HalfBath'].fillna('0')\ntest ['KitchenQual'] = test ['KitchenQual'].fillna('TA')\ntest ['Functional'] = test ['Functional'].fillna('TA')\ntest ['GarageCars'] = test ['GarageCars'].fillna(2.0)\ntest ['GarageArea'] = test ['GarageArea'].fillna(test ['GarageArea'].median())\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].value_counts().idxmax())\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].value_counts().idxmax())\ntest['BsmtFullBath'] = test['BsmtFullBath'].astype('int64')\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())","c483d310":"data.drop(['Id','FireplaceQu','GarageYrBlt','YearBuilt', 'YearRemodAdd'],1,inplace = True)\ntest.drop(['Id','FireplaceQu','GarageYrBlt','YearBuilt', 'YearRemodAdd'],1,inplace = True)\n","b2c08b82":"data.columns","414f1c5e":"X = data.iloc[:,:75]\ny = data['SalePrice']","b2879bc3":"X","d48b192b":"from sklearn.preprocessing import StandardScaler,LabelEncoder\nsc = StandardScaler()\nle = LabelEncoder()\nfor i in X.select_dtypes(['int64']).columns:\n    X[i] = sc.fit_transform(X[i].values.reshape(-1,1))\nfor i in test.select_dtypes(['int64']).columns:\n    test[i] = sc.fit_transform(test[i].values.reshape(-1,1))\nfor i in X.select_dtypes(['float']).columns:\n    X[i] = sc.fit_transform(X[i].values.reshape(-1,1))\nfor i in test.select_dtypes(['float']).columns:\n    test[i] = sc.fit_transform(test[i].values.reshape(-1,1))","7a64ea6e":"X","b2616474":"for i in X.select_dtypes(['object']).columns:\n    X[i] = le.fit_transform(X[i])\nfor i in test.select_dtypes(['object']).columns:\n    test[i] = le.fit_transform(test[i])","be539e88":"X","c4ef98fe":"X.shape","63d1e267":"input_shape = X.shape[1]\n","93c30cf0":"inputs = Input(shape = input_shape)\nx = inputs\n\nx = Dense(16,activation = 'relu')(x)\nx = Dropout(0.24)(x)\nx = Dense(32,activation = 'relu')(x)\nx = Dense(64,activation = 'relu')(x)\nx = Dense(128,activation = 'relu')(x)\nx = Dropout(0.24)(x)\nx = Dense(256,activation = 'relu')(x)\nx = Dropout(0.24)(x)\nx = Dense(256,activation = 'relu')(x)\nx = Dense(256,activation = 'relu')(x)\nx = Dropout(0.24)(x)\nx = Dense(512,activation = 'relu')(x)\nx = Dropout(0.24)(x)\noutputs = Dense(1)(x)\nmodel = Model(inputs,outputs)\nmodel.summary()","67ce4c91":"lr_reducer = ReduceLROnPlateau(factor = np.sqrt(0.1),cooldown = 0,patience = 2,min_lr = 0.5e-5)","ff94801e":"model.compile(optimizer = 'adam',loss = 'mean_squared_error')\ncallbacks = lr_reducer","b4b48940":"model.fit(X,y,epochs = 1000,batch_size = 5,callbacks = callbacks)","9992115a":"results = model.predict(test)","fd5cf6f8":"results","58de3468":"results.shape","361e203b":"result = results.flatten()","caacbead":"result","70fa2551":"output = pd.DataFrame({'Id':pId,'SalePrice': result})\noutput.to_csv('my_submission.csv', index=False)","f6556196":"output","3b879071":"# **Loading Required Libraries**","a10f5919":"# **Loading and Exploring Data**","b1d0443a":"# **Model Development**","cb14f6e3":"# **Data Cleaning and Preprocessing**"}}