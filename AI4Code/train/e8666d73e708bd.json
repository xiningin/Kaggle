{"cell_type":{"8097df01":"code","80dfd3a7":"code","6fb4caff":"code","15a2b7b6":"code","1aa0f8ee":"code","c4b62ba4":"code","20c5b515":"code","b2861ab7":"code","a6cd85a1":"code","5ffe593f":"markdown","1ff72405":"markdown","b82e3b1a":"markdown","20e2cb91":"markdown","8877abd9":"markdown","84acd28c":"markdown","c9833875":"markdown","f0a26840":"markdown","5410df3a":"markdown","3b033d1c":"markdown"},"source":{"8097df01":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# Halite environment was defined in v0.2.1\n!pip install 'kaggle-environments>=0.2.1'","80dfd3a7":"from kaggle_environments import evaluate, make\n\nenv = make(\"halite\", debug=True)\nenv.render()","6fb4caff":"#%%writefile submission.py\n# for Debug and Evolutionary Algorithm previous line (%%writefile submission.py) should be commented out,\n# uncomment to write submission.py\n\n#FUNCTIONS###################################################\ndef get_map_and_average_halite(obs):\n    \"\"\"\n        get average amount of halite per halite source\n        and map as two dimensional array of objects and set amounts of halite in each cell\n    \"\"\"\n    game_map = []\n    halite_sources_amount = 0\n    halite_total_amount = 0\n    for x in range(conf.size):\n        game_map.append([])\n        for y in range(conf.size):\n            game_map[x].append({\n                # value will be ID of owner\n                \"shipyard\": None,\n                # value will be ID of owner\n                \"ship\": None,\n                # value will be amount of halite\n                \"ship_cargo\": None,\n                # amount of halite\n                \"halite\": obs.halite[conf.size * y + x]\n            })\n            if game_map[x][y][\"halite\"] > 0:\n                halite_total_amount += game_map[x][y][\"halite\"]\n                halite_sources_amount += 1\n    average_halite = halite_total_amount \/ halite_sources_amount\n    return game_map, average_halite\n\ndef get_swarm_units_coords_and_update_map(s_env):\n    \"\"\" get lists of coords of Swarm's units and update locations of ships and shipyards on the map \"\"\"\n    # arrays of (x, y) coords\n    swarm_shipyards_coords = []\n    swarm_ships_coords = []\n    # place on the map locations of units of every player\n    for player in range(len(s_env[\"obs\"].players)):\n        # place on the map locations of every shipyard of the player\n        shipyards = list(s_env[\"obs\"].players[player][1].values())\n        for shipyard in shipyards:\n            x = shipyard % conf.size\n            y = shipyard \/\/ conf.size\n            # place shipyard on the map\n            s_env[\"map\"][x][y][\"shipyard\"] = player\n            if player == s_env[\"obs\"].player:\n                swarm_shipyards_coords.append((x, y))\n        # place on the map locations of every ship of the player\n        ships = list(s_env[\"obs\"].players[player][2].values())\n        for ship in ships:\n            x = ship[0] % conf.size\n            y = ship[0] \/\/ conf.size\n            # place ship on the map\n            s_env[\"map\"][x][y][\"ship\"] = player\n            s_env[\"map\"][x][y][\"ship_cargo\"] = ship[1]\n            if player == s_env[\"obs\"].player:\n                swarm_ships_coords.append((x, y))\n    return swarm_shipyards_coords, swarm_ships_coords\n\ndef get_c(c):\n    \"\"\" get coordinate, considering donut type of the map \"\"\"\n    return c % conf.size\n\ndef clear(x, y, player, game_map):\n    \"\"\" check if cell is safe to move in \"\"\"\n    # if there is no shipyard, or there is player's shipyard\n    # and there is no ship\n    if ((game_map[x][y][\"shipyard\"] == player or game_map[x][y][\"shipyard\"] == None) and\n            game_map[x][y][\"ship\"] == None):\n        return True\n    return False\n\ndef move_ship(actions, s_env, ship):\n    \"\"\" move ship in the direction \"\"\"\n    # if ship has to move out from current position\n    if ships_data[ship[\"key\"]][\"direction_to_move\"] != \"HERE\":\n        actions[ship[\"key\"]] = ships_data[ship[\"key\"]][\"direction_to_move\"]\n        for d in directions_list:\n            if d[\"direction\"] == ships_data[ship[\"key\"]][\"direction_to_move\"]:\n                x = d[\"x\"](ship[\"x\"])\n                y = d[\"y\"](ship[\"y\"])\n        ships_data[ship[\"key\"]][\"direction_to_move\"] = \"HERE\"\n        # apply changes to game_map, to avoid collisions of player's ships next turn\n        s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"ship\"] = None\n        s_env[\"map\"][x][y][\"ship\"] = s_env[\"obs\"].player\n    return actions, s_env\n\ndef go_for_halite(s_env, ship):\n    \"\"\" ship will go to safe cell with enough halite, if it is found \"\"\"\n    # if current cell has enough halite\n    if (s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"halite\"] > s_env[\"low_amount_of_halite\"] and\n            not hostile_ship_near(ship[\"x\"], ship[\"y\"], s_env[\"obs\"].player, s_env[\"map\"], ship[\"cargo\"])):\n        most_halite = s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"halite\"]\n    else:\n        # biggest amount of halite among scanned cells\n        most_halite = s_env[\"low_amount_of_halite\"]\n    direction = None\n    for d in range(len(directions_list)):\n        x = directions_list[d][\"x\"](ship[\"x\"])\n        y = directions_list[d][\"y\"](ship[\"y\"])\n        # if cell is safe to move in\n        if (clear(x, y, s_env[\"obs\"].player, s_env[\"map\"]) and\n                not hostile_ship_near(x, y, s_env[\"obs\"].player, s_env[\"map\"], ship[\"cargo\"])):\n            # if current cell has more than biggest amount of halite\n            if s_env[\"map\"][x][y][\"halite\"] > most_halite:\n                most_halite = s_env[\"map\"][x][y][\"halite\"]\n                direction = directions_list[d][\"direction\"]\n                direction_x = x\n                direction_y = y\n    # if cell is safe to move in and has substantial amount of halite\n    if most_halite > s_env[\"low_amount_of_halite\"] and direction != None:\n        ships_data[ship[\"key\"]][\"direction_to_move\"] = direction\n        return True\n    # if current cell has biggest amount of halite\n    elif most_halite == s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"halite\"]:\n        ships_data[ship[\"key\"]][\"direction_to_move\"] = \"HERE\"\n        return True\n    return \"\"\n\ndef standard_patrol(s_env, ship):\n    \"\"\" \n        ship will move in expanding circles clockwise or counterclockwise\n        until reaching maximum radius, then radius will be minimal again\n    \"\"\"\n    directions = ships_data[ship[\"key\"]][\"directions\"]\n    # set index of direction\n    i = ships_data[ship[\"key\"]][\"directions_index\"]\n    direction_found = False\n    for j in range(len(directions)):\n        x = directions[i][\"x\"](ship[\"x\"])\n        y = directions[i][\"y\"](ship[\"y\"])\n        # if cell is ok to move in\n        if (clear(x, y, s_env[\"obs\"].player, s_env[\"map\"]) and\n                (s_env[\"map\"][x][y][\"shipyard\"] == s_env[\"obs\"].player or\n                not hostile_ship_near(x, y, s_env[\"obs\"].player, s_env[\"map\"], ship[\"cargo\"]))):\n            ships_data[ship[\"key\"]][\"moves_done\"] += 1\n            # if it was last move in this direction\n            if ships_data[ship[\"key\"]][\"moves_done\"] >= ships_data[ship[\"key\"]][\"ship_max_moves\"]:\n                ships_data[ship[\"key\"]][\"moves_done\"] = 0\n                ships_data[ship[\"key\"]][\"directions_index\"] += 1\n                # if it is last direction in a list\n                if ships_data[ship[\"key\"]][\"directions_index\"] >= len(directions):\n                    ships_data[ship[\"key\"]][\"directions_index\"] = 0\n                    ships_data[ship[\"key\"]][\"ship_max_moves\"] += 1\n                    # if ship_max_moves reached maximum radius expansion\n                    if ships_data[ship[\"key\"]][\"ship_max_moves\"] > max_moves_amount:\n                        ships_data[ship[\"key\"]][\"ship_max_moves\"] = 1\n            ships_data[ship[\"key\"]][\"direction_to_move\"] = directions[i][\"direction\"]\n            direction_found = True\n            break\n        else:\n            # loop through directions\n            i += 1\n            if i >= len(directions):\n                i = 0\n    # if ship is not on shipyard and hostile ship is near\n    if (not direction_found and s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"shipyard\"] == None and\n            hostile_ship_near(ship[\"x\"], ship[\"y\"], s_env[\"obs\"].player, s_env[\"map\"], ship[\"cargo\"])):\n        # if there is enough halite to convert\n        if ship[\"cargo\"] >= conf.convertCost:\n            return \"conv\"\n        else:\n            for i in range(len(directions)):\n                x = directions[i][\"x\"](ship[\"x\"])\n                y = directions[i][\"y\"](ship[\"y\"])\n                # if it is opponent's shipyard\n                if s_env[\"map\"][x][y][\"shipyard\"] != None:\n                    ships_data[ship[\"key\"]][\"direction_to_move\"] = directions[i][\"direction\"]\n                    return True\n            for i in range(len(directions)):\n                x = directions[i][\"x\"](ship[\"x\"])\n                y = directions[i][\"y\"](ship[\"y\"])\n                # if it is empty place\n                if s_env[\"map\"][x][y][\"ship\"] == None:\n                    ships_data[ship[\"key\"]][\"direction_to_move\"] = directions[i][\"direction\"]\n                    return True\n    return True\n\ndef get_directions(i0, i1, i2, i3):\n    \"\"\" get list of directions in a certain sequence \"\"\"\n    return [directions_list[i0], directions_list[i1], directions_list[i2], directions_list[i3]]\n\ndef hostile_ship_near(x, y, player, m, cargo):\n    \"\"\" check if hostile ship is in one move away from game_map[x][y] and has less or equal halite \"\"\"\n    # m = game map\n    n = get_c(y - 1)\n    e = get_c(x + 1)\n    s = get_c(y + 1)\n    w = get_c(x - 1)\n    if (\n            (m[x][n][\"ship\"] != player and m[x][n][\"ship\"] != None and m[x][n][\"ship_cargo\"] <= cargo) or\n            (m[x][s][\"ship\"] != player and m[x][s][\"ship\"] != None and m[x][s][\"ship_cargo\"] <= cargo) or\n            (m[e][y][\"ship\"] != player and m[e][y][\"ship\"] != None and m[e][y][\"ship_cargo\"] <= cargo) or\n            (m[w][y][\"ship\"] != player and m[w][y][\"ship\"] != None and m[w][y][\"ship_cargo\"] <= cargo)\n        ):\n        return True\n    return False\n\ndef spawn_ship(actions, s_env, shipyard):\n    \"\"\" spawn ship \"\"\"\n    s_env[\"swarm_halite\"] -= conf.spawnCost\n    actions[shipyard[\"key\"]] = \"SPAWN\"\n    s_env[\"map\"][shipyard[\"x\"]][shipyard[\"y\"]][\"ship\"] = s_env[\"obs\"].player\n    s_env[\"ships_amount\"] += 1\n    return actions, s_env\n\ndef sd_swarm_halite_amount(s_env, shipyard):\n    \"\"\" evaluate amount of Swarm's halite \"\"\"\n    if s_env[\"swarm_halite\"] >= conf.spawnCost:\n        return \">=snc\"\n    return \"\"\n\ndef sd_ships_amount(s_env, shipyard):\n    \"\"\" evaluate amount of ships in the Swarm \"\"\"\n    if s_env[\"ships_amount\"] < s_env[\"ships_max_amount\"]:\n        return \"<spma\"\n    return \"\"\n\ndef shipyard_clear(s_env, shipyard):\n    \"\"\" check if this shipyard is clear \"\"\"\n    if clear(shipyard[\"x\"], shipyard[\"y\"], s_env[\"obs\"].player, s_env[\"map\"]):\n        return True\n    return \"\"\n\ndef record_found(s_env, unit, patterns):\n    \"\"\" check if every pattern's result matches data returned from that pattern's function \"\"\"\n    for pattern in patterns:\n        if pattern[\"fun\"](s_env, unit) != pattern[\"result\"]:\n            return False\n    return True\n\ndef this_is_new_ship(s_env, i):\n    \"\"\" add this ship to ships_data \"\"\"\n    global movement_tactics_index\n    ships_data[s_env[\"ships_keys\"][i]] = {\n        \"moves_done\": 0,\n        \"ship_max_moves\": 1,\n        \"directions\": movement_tactics[movement_tactics_index][\"directions\"],\n        \"directions_index\": 0,\n        \"direction_to_move\": \"HERE\"\n    }\n    movement_tactics_index += 1\n    if movement_tactics_index >= movement_tactics_amount:\n        movement_tactics_index = 0\n    return s_env\n\ndef this_is_last_step(s_env, ship):\n    \"\"\" check if it is last step \"\"\"\n    if s_env[\"obs\"].step == (conf.episodeSteps - 2) and ship[\"cargo\"] >= conf.convertCost:\n        return True\n    return \"\"\n\ndef convert_ship(actions, s_env, ship):\n    \"\"\" convert ship into shipyard \"\"\"\n    actions[ship[\"key\"]] = \"CONVERT\"\n    s_env[\"map\"][ship[\"x\"]][ship[\"y\"]][\"ship\"] = None\n    s_env[\"shipyards_amount\"] += 1\n    s_env[\"swarm_halite\"] = s_env[\"swarm_halite\"] + ship[\"cargo\"] - conf.convertCost\n    return actions, s_env\n\ndef no_shipyards(s_env, ship):\n    \"\"\" check if there is no shipyard and conversion of ship is possible \"\"\"\n    shipyards_amount = len(s_env[\"shipyards_keys\"])\n    if (s_env[\"shipyards_amount\"] == 0 and\n            not hostile_ship_near(ship[\"x\"], ship[\"y\"], s_env[\"obs\"].player, s_env[\"map\"], ship[\"cargo\"]) and\n            (s_env[\"swarm_halite\"] + ship[\"cargo\"]) >= convert_threshold):\n        return True\n    return \"\"\n\ndef to_spawn_or_not_to_spawn(s_env):\n    \"\"\" to spawn, or not to spawn, that is the question \"\"\"\n    # get ships_max_amount to decide whether to spawn new ships or not\n    ships_max_amount = 9\n    # if ships_max_amount is less than minimal allowed amount of ships in the Swarm\n    if ships_max_amount < ships_min_amount or s_env[\"obs\"].step >= spawn_stop_step:\n        ships_max_amount = ships_min_amount\n    return ships_max_amount\n\ndef define_some_globals(configuration):\n    \"\"\" define some of the global variables \"\"\"\n    global conf\n    global convert_threshold\n    global max_moves_amount\n    global spawn_stop_step\n    global globals_not_defined\n    conf = configuration\n    convert_threshold = conf.convertCost + conf.spawnCost * 2\n    max_moves_amount = 3\n    spawn_stop_step = conf.episodeSteps - 150\n    globals_not_defined = False\n\ndef adapt_environment(observation, configuration):\n    \"\"\" adapt environment for the Swarm \"\"\"\n    s_env = {}\n    s_env[\"obs\"] = observation\n    if globals_not_defined:\n        define_some_globals(configuration)\n    s_env[\"map\"], s_env[\"average_halite\"] = get_map_and_average_halite(s_env[\"obs\"])\n    s_env[\"low_amount_of_halite\"] = s_env[\"average_halite\"] * 0.75\n    s_env[\"swarm_halite\"] = s_env[\"obs\"].players[s_env[\"obs\"].player][0]\n    s_env[\"swarm_shipyards_coords\"], s_env[\"swarm_ships_coords\"] = get_swarm_units_coords_and_update_map(s_env)\n    s_env[\"ships_keys\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][2].keys())\n    s_env[\"ships_values\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][2].values())\n    s_env[\"shipyards_keys\"] = list(s_env[\"obs\"].players[s_env[\"obs\"].player][1].keys())\n    s_env[\"ships_max_amount\"] = to_spawn_or_not_to_spawn(s_env)\n    s_env[\"ships_amount\"] = len(s_env[\"ships_keys\"])\n    s_env[\"shipyards_amount\"] = len(s_env[\"shipyards_keys\"])\n    return s_env\n    \ndef actions_of_ships(s_env):\n    \"\"\" actions of every ship of the Swarm \"\"\"\n    actions = {}\n    for i in range(len(s_env[\"ships_keys\"])):\n        # if this is a new ship\n        if s_env[\"ships_keys\"][i] not in ships_data:\n            s_env = this_is_new_ship(s_env, i)\n        ship = {\n            \"x\": s_env[\"swarm_ships_coords\"][i][0],\n            \"y\": s_env[\"swarm_ships_coords\"][i][1],\n            \"key\": s_env[\"ships_keys\"][i],\n            \"cargo\": s_env[\"ships_values\"][i][1]\n        }\n        # find first suitable record in memory\n        for record in memory[\"ships\"]:\n            if record_found(s_env, ship, record[\"patterns\"]):\n                # perform action of suitable record\n                actions, s_env = record[\"action\"](actions, s_env, ship)\n                break\n    return actions\n     \ndef actions_of_shipyards(actions, s_env):\n    \"\"\" actions of every shipyard of the Swarm \"\"\"\n    # spawn ships from every shipyard, if possible\n    for i in range(len(s_env[\"shipyards_keys\"])):\n        shipyard = {\n            \"x\": s_env[\"swarm_shipyards_coords\"][i][0],\n            \"y\": s_env[\"swarm_shipyards_coords\"][i][1],\n            \"key\": s_env[\"shipyards_keys\"][i]\n        }\n        # find first suitable record in memory\n        for record in memory[\"shipyards\"]:\n            if record_found(s_env, shipyard, record[\"patterns\"]):\n                # perform action of suitable record\n                actions, s_env = record[\"action\"](actions, s_env, shipyard)\n                break\n    return actions\n\n\n#GLOBAL_VARIABLES#############################################\nconf = None\n# max amount of moves in one direction before turning\nmax_moves_amount = None\n# threshold of harvested by a ship halite to convert\nconvert_threshold = None\n# no ship spawning above ships_min_amount after this step\nspawn_stop_step = None\n# object with ship ids and their data\nships_data = {}\n# initial movement_tactics index\nmovement_tactics_index = 0\n# minimum amount of ships that should be in the Swarm at any time\nships_min_amount = 3\n# not all global variables are defined\nglobals_not_defined = True\n\n# list of directions\ndirections_list = [\n    {\n        \"direction\": \"NORTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z - 1)\n    },\n    {\n        \"direction\": \"EAST\",\n        \"x\": lambda z: get_c(z + 1),\n        \"y\": lambda z: z\n    },\n    {\n        \"direction\": \"SOUTH\",\n        \"x\": lambda z: z,\n        \"y\": lambda z: get_c(z + 1)\n    },\n    {\n        \"direction\": \"WEST\",\n        \"x\": lambda z: get_c(z - 1),\n        \"y\": lambda z: z\n    }\n]\n\n# list of movement tactics\nmovement_tactics = [\n    # N -> E -> S -> W\n    {\"directions\": get_directions(0, 1, 2, 3)},\n    # S -> E -> N -> W\n    {\"directions\": get_directions(2, 1, 0, 3)},\n    # N -> W -> S -> E\n    {\"directions\": get_directions(0, 3, 2, 1)},\n    # S -> W -> N -> E\n    {\"directions\": get_directions(2, 3, 0, 1)},\n    # E -> N -> W -> S\n    {\"directions\": get_directions(1, 0, 3, 2)},\n    # W -> S -> E -> N\n    {\"directions\": get_directions(3, 2, 1, 0)},\n    # E -> S -> W -> N\n    {\"directions\": get_directions(1, 2, 3, 0)},\n    # W -> N -> E -> S\n    {\"directions\": get_directions(3, 0, 1, 2)},\n]\nmovement_tactics_amount = len(movement_tactics)\n\n# list of ships functions and lists of possible results\nsp_funs_and_results = [\n    {\n        \"key\": \"this_is_last_step\",\n        \"fun\": this_is_last_step,\n        \"results\": [\n            True\n        ]\n    },\n    {\n        \"key\": \"no_shipyards\",\n        \"fun\": no_shipyards,\n        \"results\": [\n            True\n        ]\n    },\n    {\n        \"key\": \"go_for_halite\",\n        \"fun\": go_for_halite,\n        \"results\": [\n            True\n        ]\n    },\n    {\n        \"key\": \"standard_patrol\",\n        \"fun\": standard_patrol,\n        \"results\": [\n            True,\n            # conv -> CONVERT\n            \"conv\"\n        ]\n    }\n]\n\n# list of possible actions of ships\nsp_actions = [\n    {\n        \"key\": \"convert_ship\",\n        \"action\": convert_ship\n    },\n    {\n        \"key\": \"move_ship\",\n        \"action\": move_ship\n    }\n]\n\n# list of shipyards functions and lists of possible results\nsd_funs_and_results = [\n    {\n        \"key\": \"sd_swarm_halite_amount\",\n        \"fun\": sd_swarm_halite_amount,\n        \"results\": [\n            # snc -> spawn cost\n            \">=snc\"\n        ]\n    },\n    {\n        \"key\": \"sd_ships_amount\",\n        \"fun\": sd_ships_amount,\n        \"results\": [\n            # spma -> ships max amount\n            \"<spma\"\n        ]\n    },\n    {\n        \"key\": \"shipyard_clear\",\n        \"fun\": shipyard_clear,\n        \"results\": [\n            True\n        ]\n    }\n]\n\n# list of possible actions of shipyards\nsd_actions = [\n    {\n        \"key\": \"spawn_ship\",\n        \"action\": spawn_ship\n    }\n]\n\n# memory of units\nmemory = {\n    # ships list of memory records\n    \"ships\": [\n        {\n            \"patterns\": [\n                {\n                    \"key\": sp_funs_and_results[0][\"key\"],\n                    \"fun\": sp_funs_and_results[0][\"fun\"],\n                    \"result\": sp_funs_and_results[0][\"results\"][0]\n                }\n            ],\n            \"action_key\": sp_actions[0][\"key\"],\n            \"action\": sp_actions[0][\"action\"]\n        },\n        {\n            \"patterns\": [\n                {\n                    \"key\": sp_funs_and_results[1][\"key\"],\n                    \"fun\": sp_funs_and_results[1][\"fun\"],\n                    \"result\": sp_funs_and_results[1][\"results\"][0]\n                }\n            ],\n            \"action_key\": sp_actions[0][\"key\"],\n            \"action\": sp_actions[0][\"action\"]\n        },\n        {\n            \"patterns\": [\n                {\n                    \"key\": sp_funs_and_results[3][\"key\"],\n                    \"fun\": sp_funs_and_results[3][\"fun\"],\n                    \"result\": sp_funs_and_results[3][\"results\"][1]\n                }\n            ],\n            \"action_key\": sp_actions[0][\"key\"],\n            \"action\": sp_actions[0][\"action\"]\n        },\n        {\n            \"patterns\": [\n                {\n                    \"key\": sp_funs_and_results[2][\"key\"],\n                    \"fun\": sp_funs_and_results[2][\"fun\"],\n                    \"result\": sp_funs_and_results[2][\"results\"][0]\n                }\n            ],\n            \"action_key\": sp_actions[1][\"key\"],\n            \"action\": sp_actions[1][\"action\"]\n        },\n        {\n            \"patterns\": [\n                {\n                    \"key\": sp_funs_and_results[3][\"key\"],\n                    \"fun\": sp_funs_and_results[3][\"fun\"],\n                    \"result\": sp_funs_and_results[3][\"results\"][0]\n                }\n            ],\n            \"action_key\": sp_actions[1][\"key\"],\n            \"action\": sp_actions[1][\"action\"]\n        }\n    ],\n    # shipyards list of memory records\n    \"shipyards\": [\n        {\n            \"patterns\": [\n                {\n                    \"key\": sd_funs_and_results[0][\"key\"],\n                    \"fun\": sd_funs_and_results[0][\"fun\"],\n                    \"result\": sd_funs_and_results[0][\"results\"][0]\n                },\n                {\n                    \"key\": sd_funs_and_results[1][\"key\"],\n                    \"fun\": sd_funs_and_results[1][\"fun\"],\n                    \"result\": sd_funs_and_results[1][\"results\"][0]\n                },\n                {\n                    \"key\": sd_funs_and_results[2][\"key\"],\n                    \"fun\": sd_funs_and_results[2][\"fun\"],\n                    \"result\": sd_funs_and_results[2][\"results\"][0]\n                }\n            ],\n            \"action_key\": sd_actions[0][\"key\"],\n            \"action\": sd_actions[0][\"action\"]\n        }\n    ]\n}\n\n\n#THE_SWARM####################################################\ndef swarm_agent(observation, configuration):\n    \"\"\" RELEASE THE SWARM!!! \"\"\"\n    s_env = adapt_environment(observation, configuration)\n    actions = actions_of_ships(s_env)\n    actions = actions_of_shipyards(actions, s_env)\n    return actions","15a2b7b6":"if \"swarm_agent\" in globals():\n    # reset variables\n    ships_data = {}\n    movement_tactics_index = 0\n\n    # Play as first position against random agent.\n    trainer = env.train([None, \"random\"])\n\n    observation = trainer.reset()\n\n    while not env.done:\n        my_action = swarm_agent(observation, env.configuration)\n        print(\"Step: {0}, My Action: {1}\".format(observation.step, my_action))\n        observation, reward, done, info = trainer.step(my_action)\n        # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\n    env.render()","1aa0f8ee":"import random\nimport copy\n\ndef get_average_halite(results):\n    \"\"\" get average halite of agent from results of evaluated episodes \"\"\"\n    halite_sum = 0\n    for r in results:\n        halite_sum += r[0]\n    return halite_sum \/ len(results)\n\ndef set_possible_records_and_patterns_amounts():\n    \"\"\" set maximum possible amounts of memory records and patterns in those records \"\"\"\n    global possible_records_amount\n    global possible_patterns_amount\n    possible_records_amount = len(ea_actions) * len(ea_funs_and_results)\n    possible_patterns_amount = len(ea_funs_and_results)\n    for fun in ea_funs_and_results:\n        possible_records_amount *= len(fun[\"results\"])\n        possible_patterns_amount *= len(fun[\"results\"])\n    possible_records_amount -= 1\n    possible_patterns_amount -= 1\n\ndef mutations():\n    \"\"\" mutate each specimen of the population \"\"\"\n    for specimen in population:\n        # remove some records from specimen\n        records_to_remove = random.randint(0, len(specimen) - 1)\n        for i in range(records_to_remove):\n            specimen.pop(random.randint(0, len(specimen) - 1))\n        # clone some records within specimen\n        records_to_clone = random.randint(0, len(specimen))\n        for i in range(records_to_clone):\n            specimen.append(copy.deepcopy(specimen[random.randint(0, len(specimen) - 1)]))\n        # mutate some actions in existing records\n        actions_to_mutate = random.randint(0, len(specimen))\n        for i in range(actions_to_mutate):\n            record_index = random.randint(0, len(specimen) - 1)\n            new_action_index = random.randint(0, len(ea_actions) - 1)\n            specimen[record_index][\"action_key\"] = ea_actions[new_action_index][\"key\"]\n            specimen[record_index][\"action\"] = ea_actions[new_action_index][\"action\"]\n        # mutate some lists of patterns in existing records\n        patterns_lists_to_mutate = random.randint(0, len(specimen) - 1)\n        for i in range(patterns_lists_to_mutate):\n            # remove some patterns from a record's list of patterns\n            patterns_to_remove = random.randint(0, len(specimen[i][\"patterns\"]) - 1)\n            for j in range(patterns_to_remove):\n                specimen[i][\"patterns\"].pop(random.randint(0, len(specimen[i][\"patterns\"]) - 1))\n            # clone some patterns within record\n            patterns_to_clone = random.randint(0, len(specimen[i][\"patterns\"]))\n            for j in range(patterns_to_clone):\n                specimen[i][\"patterns\"].append(\n                    copy.deepcopy(specimen[i][\"patterns\"][random.randint(0, len(specimen[i][\"patterns\"]) - 1)]))\n            # mutate some patterns in a record's list of patterns\n            patterns_to_mutate = random.randint(0, len(specimen[i][\"patterns\"]))\n            for j in range(patterns_to_mutate):\n                # p_i -> pattern index\n                p_i = random.randint(0, len(specimen[i][\"patterns\"]) - 1)\n                # n_p_i -> new pattern index\n                n_p_i = random.randint(0, len(ea_funs_and_results) - 1)\n                specimen[i][\"patterns\"][p_i][\"key\"] = ea_funs_and_results[n_p_i][\"key\"]\n                specimen[i][\"patterns\"][p_i][\"fun\"] = ea_funs_and_results[n_p_i][\"fun\"]\n                results_index = random.randint(0, len(ea_funs_and_results[n_p_i][\"results\"]) - 1)\n                specimen[i][\"patterns\"][p_i][\"result\"] = ea_funs_and_results[n_p_i][\"results\"][results_index]\n\ndef fitness(memory_key):\n    \"\"\" evaluate each specimen's fitness \"\"\"\n    global best_specimen\n    global best_specimen_fitness\n    for specimen in population:\n        # replace memory of unit with specimen\n        memory[memory_key] = specimen\n        specimen_fitness = get_average_halite(evaluate(\"halite\", [swarm_agent],\n                                num_episodes=episodes, configuration={\"agentExec\": \"LOCAL\"}\n                           ))\n        if specimen_fitness > best_specimen_fitness:\n            best_specimen_fitness = specimen_fitness\n            best_specimen = copy.deepcopy(specimen)\n    \ndef selection():\n    \"\"\" select specimens for next generation \"\"\"\n    global population\n    population = []\n    for i in range(population_size):\n        population.append(copy.deepcopy(best_specimen))","c4b62ba4":"# amount of generations\ngenerations_amount = 10\n# size of the population\npopulation_size = 5\n# list of specimens\npopulation = []\n# maximum possible amount of memory records\npossible_records_amount = 0\n# maximum possible amount of patterns in a record\npossible_patterns_amount = 0\n# number of episodes for fitness evaluation\nepisodes = 1\n# list of possible actions\nea_actions = sp_actions\n# list of functions and lists of possible results\nea_funs_and_results = sp_funs_and_results\n# best specimen\nbest_specimen = copy.deepcopy(memory[\"ships\"])\n# best specimen fitness\nbest_specimen_fitness = get_average_halite(evaluate(\"halite\", [swarm_agent],\n                            num_episodes=episodes, configuration={\"agentExec\": \"LOCAL\"}\n                        ))\n\n# create initial population\nselection()\n\n# evolve memory of ships with evolutionary algorithm\nfor i in range(generations_amount):\n    mutations()\n    fitness(\"ships\")\n    selection()\n\n# replace memory of ships with best specimen\nmemory[\"ships\"] = copy.deepcopy(best_specimen)\nprint(\"Best specimen fitness: {0}, best specimen: {1}\".format(best_specimen_fitness, best_specimen))","20c5b515":"# amount of generations\ngenerations_amount = 10\n# size of the population\npopulation_size = 5\n# list of specimens\npopulation = []\n# maximum possible amount of memory records\npossible_records_amount = 0\n# maximum possible amount of patterns in a record\npossible_patterns_amount = 0\n# number of episodes for fitness evaluation\nepisodes = 1\n# list of possible actions\nea_actions = sd_actions\n# list of functions and lists of possible results\nea_funs_and_results = sd_funs_and_results\n# best specimen\nbest_specimen = copy.deepcopy(memory[\"shipyards\"])\n# best specimen fitness\nbest_specimen_fitness = get_average_halite(evaluate(\"halite\", [swarm_agent],\n                            num_episodes=episodes, configuration={\"agentExec\": \"LOCAL\"}\n                        ))\n\n# create initial population\nselection()\n\n# evolve memory of shipyards with evolutionary algorithm\nfor i in range(generations_amount):\n    mutations()\n    fitness(\"shipyards\")\n    selection()\n\n# replace memory of shipyards with best specimen\nmemory[\"shipyards\"] = copy.deepcopy(best_specimen)\nprint(\"Best specimen fitness: {0}, best specimen: {1}\".format(best_specimen_fitness, best_specimen))","b2861ab7":"def mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n    for r in rewards:\n        r0 = 0 if r[0] is None else r[0]\n        r1 = 0 if r[1] is None else r[1]\n        if r0 > r1:\n            wins += 1\n        elif r1 > r0:\n            loses += 1\n        else:\n            ties += 1\n    return f'wins={wins\/len(rewards)}, ties={ties\/len(rewards)}, loses={loses\/len(rewards)}'\n\n# Run multiple episodes to estimate its performance.\n# Setup agentExec as LOCAL to run in memory (runs faster) without process isolation.\nprint(\"Swarm Agent vs Random Agent:\", mean_reward(evaluate(\n    \"halite\",\n    [swarm_agent, \"random\", \"random\", \"random\"],\n    num_episodes=10, configuration={\"agentExec\": \"LOCAL\"}\n)))","a6cd85a1":"#env.run([\"submission.py\", \"submission.py\", \"submission.py\", \"submission.py\"])\n#env.run([\"submission.py\", \"random\", \"random\", \"random\"])\n#env.run([swarm_agent, swarm_agent, swarm_agent, swarm_agent])\n#env.run([swarm_agent, \"random\", \"random\", \"random\"])\nenv.run([swarm_agent])\nenv.render(mode=\"ipython\", width=800, height=600)","5ffe593f":"# Evolve memory of Ships with Evolutionary Algorithm","1ff72405":"# Create a Submission (agent)","b82e3b1a":"# Debug your Agent","20e2cb91":"# Prepare to evolve memory of Ships and Shipyards","8877abd9":"# Create Halite Environment","84acd28c":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/halite\/submissions) to view your score and episodes being played.","c9833875":"# Install kaggle-environments","f0a26840":"# Test your Agent","5410df3a":"# Evaluate your Agent","3b033d1c":"# Evolve memory of Shipyards with Evolutionary Algorithm"}}