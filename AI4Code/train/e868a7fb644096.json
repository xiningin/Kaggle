{"cell_type":{"5bcffeca":"code","c785afc2":"code","d27379bf":"code","34ccb600":"code","cb2a4d99":"code","a2a10345":"code","b8671653":"code","5db87ad1":"code","4853fb06":"code","d9d08dcc":"code","36a62082":"code","ab6938b0":"code","014a13bb":"code","23006cf8":"code","3846984a":"code","fd148cb4":"code","95a2711f":"code","81161e10":"code","23c56be0":"code","8613295b":"code","13da7500":"code","19c08405":"code","174209b9":"code","e54006cf":"code","8a8f3a6a":"code","02b37adc":"code","41d89154":"code","6aa5775d":"markdown","2b732bb4":"markdown","a8cb6550":"markdown","819c2547":"markdown","ed576526":"markdown","a7b0e8a7":"markdown","135d04ff":"markdown","ed73d152":"markdown","89f05ba2":"markdown","5e4bb06a":"markdown","4f838c26":"markdown","ada69865":"markdown","28a7e8f3":"markdown","75e24ce2":"markdown","b5d2303c":"markdown","c26d740d":"markdown","8ab9dc8f":"markdown","73170d61":"markdown","47f5f7b5":"markdown","704124bc":"markdown","2036f151":"markdown","260e3eaa":"markdown","d1cefdc5":"markdown","f3eb0560":"markdown"},"source":{"5bcffeca":"# Downloading the necesary libraries\n!pip install proplot\n\n# Importing the necesary libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport proplot as pplt                       # Fonts \nfrom scipy import stats                      # Remove outliers\nimport matplotlib.ticker as ticker           # Modify axis\nfrom sklearn.preprocessing import MinMaxScaler\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore') ","c785afc2":"# Importing data\ntrain = pd.read_csv('..\/input\/supplement-sales-prediction\/TRAIN.csv')\ntest = pd.read_csv('..\/input\/supplement-sales-prediction\/TEST_FINAL.csv')\ntrain.head()","d27379bf":"# Rename the values on \"Discount\" \ntrain['Discount'] = train['Discount'].map({'Yes': 1, 'No': 0})","34ccb600":"# Data types\nprint('Data type per variable:')\nprint(train.dtypes)","cb2a4d99":"# Changing data types\ntrain[['Store_id', 'Holiday', 'Discount']] = train[['Store_id', 'Holiday', 'Discount']].astype(object)\ntrain['Date'] = pd.to_datetime(train.Date)","a2a10345":"# Do we have duplicates?\nprint('Number of duplicates:', len(train[train.duplicated()]))\n\n# Do we have missing values?\nprint('Number of missing values:', train.isnull().sum().sum())","b8671653":"# Which are the best stores (by number of sells)?\nbest_stores = train.groupby(['Store_id'], as_index=False)['Sales'].sum()        # sum sales from same store\nbest_stores = best_stores.sort_values('Sales', ascending = False)                # sort data\nbest_stores = best_stores.head(20)                                               # select top 20\nbest_stores['Store_id'] = best_stores['Store_id'].astype(str)\n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\n# For changing colors\ncol1 = best_stores.head(1)\ncol2 = best_stores.tail(19)\n\nax.bar(col1.Store_id, col1.Sales, color = '#d4728c')\nax.bar(col2.Store_id, col2.Sales, color = 'grey')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.xlabel('Stores Id', fontsize=11)\nplt.ylabel('Number of Sales', fontsize=11, labelpad=20)\n\n# Title\nplt.text(4.1, 56000000, \"Best\", size=22, color=\"grey\", fontweight=\"bold\")\nplt.text(6.2, 56000000, \"Stores\", size=22, color=\"#d4728c\", fontweight=\"bold\")\nplt.text(9.1, 56000000, \"by\", size=22, color=\"grey\")\nplt.text(10.3, 56000000,\"Total Sales\", size=22, color=\"grey\", fontweight=\"bold\")\n\n# Author\nplt.text(22.5, -5000000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","5db87ad1":"# Which are the best store types (by number of sales)?\nbest_store_type = train.groupby(['Store_Type'], as_index=False)['Sales'].sum()    \nbest_store_type = best_store_type.sort_values('Sales', ascending = False)                  \nbest_store_type['Store_Type'] = best_store_type['Store_Type'].astype(str)\n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\n# For changing colors\ncol1 = best_store_type.head(1)\ncol2 = best_store_type.tail(3)\n\nax.bar(col1.Store_Type, col1.Sales, color = '#72d489')\nax.bar(col2.Store_Type, col2.Sales, color = 'grey')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.xlabel('Store Types', fontsize=11)\nplt.ylabel('Number of Sales', fontsize=11, labelpad=20)\n\n# Title\nplt.text(0.25, 3555000000, \"Best\", size=22, color=\"grey\", fontweight=\"bold\")\nplt.text(0.65, 3555000000, \"Store Type\", size=22, color=\"#72d489\", fontweight=\"bold\")\nplt.text(1.6, 3555000000, \"by\", size=22, color=\"grey\")\nplt.text(1.82, 3555000000,\"Total Sales\", size=22, color=\"grey\", fontweight=\"bold\")\n\n# Author\nplt.text(22.5, -5000000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","4853fb06":"# Best months by sells\nbest_month = train.copy()\nbest_month['Month'] = best_month['Date'].apply(lambda x: x.strftime('%b-%Y')) \nbest_month = best_month.groupby(['Month'], as_index=False)['Sales'].sum()  \n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\nbest_month_1 = best_month.sort_values('Sales', ascending = False).head(1)\n\nax.plot(best_month.Month, best_month.Sales, marker='o', markerfacecolor='grey', color = 'gray', markersize=9)\nax.plot(best_month_1.Month, best_month_1.Sales, marker='o', markerfacecolor='#5495c9', color = '#5495c9', markersize=16)\n\nplt.xticks(rotation=30)\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.ylabel('Number of Sales', fontsize=11, labelpad=20)\n\n# Annotations\nplt.text(13.4, 573000000, \"May 2019 has been\", size=10)\nplt.text(13.4, 566000000, \"the best month so far!\", size=10)\n\n\n# Title\nplt.text(3.45, 582000000, \"Best\", size=22, color=\"grey\", fontweight=\"bold\")\nplt.text(5.1, 582000000, \"Months\", size=22, color=\"#5495c9\", fontweight=\"bold\")\nplt.text(7.8, 582000000, \"by\", size=22, color=\"grey\")\nplt.text(8.8, 582000000,\"Total Sales\", size=22, color=\"grey\", fontweight=\"bold\")\n\n# Author\nplt.text(38, 43000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","d9d08dcc":"# Which are the best locations (by number of sales)?\nbest_location = train.groupby(['Location_Type'], as_index=False)['Sales'].sum()    \nbest_location['Location_Type'] = best_location['Location_Type'].astype(str)\n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\n# For changing colors\ncol1 = best_location.head(1)\ncol2 = best_location.tail(4)\n\nax.bar(col1.Location_Type, col1.Sales, color = '#ab90ff')\nax.bar(col2.Location_Type, col2.Sales, color = 'grey')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.xlabel('Location Types', fontsize=11)\nplt.ylabel('Number of Sales', fontsize=11, labelpad=20)\n\n# Title\nplt.text(0.26, 3750000000, \"Best\", size=22, color=\"grey\", fontweight=\"bold\")\nplt.text(0.79, 3750000000, \"Location Type\", size=22, color=\"#ab90ff\", fontweight=\"bold\")\nplt.text(2.3, 3750000000, \"by\", size=22, color=\"grey\")\nplt.text(2.6, 3750000000,\"Total Sales\", size=22, color=\"grey\", fontweight=\"bold\")\n\n# Author\nplt.text(22.5, -5000000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","36a62082":"# Which are the best regions (by number of sales)?\nbest_region = train.groupby(['Region_Code'], as_index=False)['Sales'].sum()    \nbest_region['Region_Code'] = best_region['Region_Code'].astype(str)\n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\n# For changing colors\ncol1 = best_region.head(1)\ncol2 = best_region.tail(3)\n\nax.bar(col1.Region_Code, col1.Sales, color = '#ffab90')\nax.bar(col2.Region_Code, col2.Sales, color = 'grey')\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.xlabel('Region Codes', fontsize=11)\nplt.ylabel('Number of Sales', fontsize=11, labelpad=20)\n\n# Title\nplt.text(0.4, 3200000000, \"Best\", size=22, color=\"grey\", fontweight=\"bold\")\nplt.text(0.79, 3200000000, \"Regions\", size=22, color=\"#ffab90\", fontweight=\"bold\")\nplt.text(1.47, 3200000000, \"by\", size=22, color=\"grey\")\nplt.text(1.71, 3200000000,\"Total Sales\", size=22, color=\"grey\", fontweight=\"bold\")\n\n# Author\nplt.text(22.5, -5000000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","ab6938b0":"# Holidays Distribution\nholiday = train.groupby(['Holiday'], as_index=False)['Sales'].sum()    \nholiday['Holiday'] = holiday['Holiday'].astype(str)\n\n# Visualization\nfig = plt.figure(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\n\nmpl.rcParams['font.size'] = 14\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\nplt.pie(holiday['Sales'], \n        explode=(0.2, 0), \n        labels=['Not Holidays', 'Holidays'], \n        colors= ['lightskyblue', 'lightcoral'],\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=200)\n        \nplt.axis('equal')\n\nplt.text(-1.17, 1.15, \"Holiday\", size=30, color=\"lightcoral\", fontweight=\"bold\")\nplt.text(-0.45, 1.15, \"Distribution\", size=30, color=\"grey\", fontweight=\"bold\")\nplt.text(0.65, 1.15, \"by\", size=30, color=\"grey\")\nplt.text(0.9, 1.15, \"Sales\", size=30, color=\"grey\", fontweight=\"bold\")\n\nplt.show()","014a13bb":"# Discount distribution\ndiscount = train.groupby(['Discount'], as_index=False)['Sales'].sum()    \ndiscount['Discount'] = discount['Discount'].astype(str)\ndiscount.head()\n\n# Visualization\nfig = plt.figure(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\n\nmpl.rcParams['font.size'] = 14\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\nplt.pie(discount['Sales'], \n        labels=['No Discount', 'Discount'], \n        explode=(0.05, 0),\n        colors= ['#e4ff90', '#ff90e4'],\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=270)\n        \nplt.axis('equal')\n\nplt.text(-1.29, 1.15, \"Discount\", size=30, color=\"#ff90e4\", fontweight=\"bold\")\nplt.text(-0.48, 1.15, \"Distribution\", size=30, color=\"grey\", fontweight=\"bold\")\nplt.text(0.63, 1.15, \"by\", size=30, color=\"grey\")\nplt.text(0.87, 1.15, \"Sales\", size=30, color=\"grey\", fontweight=\"bold\")\n\nplt.show()\n","23006cf8":"# Let's check the data again\ntrain.head()","3846984a":"# Remove \"ID\" \ntrain = train.drop('ID', 1)","fd148cb4":"# Data types\nprint('Data type per variable:')\nprint(train.dtypes)","95a2711f":"train[['Store_id','Holiday', 'Discount']] = train[['Store_id', 'Holiday', 'Discount']].astype(int)","81161e10":"categ_cols = train.dtypes[train.dtypes == np.object]  # filtering by categorical variables\ncateg_cols = categ_cols.index.tolist()     # list of categorical fields\ntrain = pd.get_dummies(train, columns=categ_cols, drop_first=True)   # One hot encoding","23c56be0":"train['Year'] = train['Date'].dt.year\ntrain['Month'] = train['Date'].dt.month\ntrain['Day_of_week'] = train['Date'].dt.dayofweek\ntrain['Weekday'] = train['Date'].dt.weekday\ntrain['Quarter'] = train['Date'].dt.quarter\n\ntrain = train.drop(['Date'], axis = 1) \n\ntrain = pd.get_dummies(train, columns=['Year'], drop_first=True, prefix='Year')\ntrain = pd.get_dummies(train, columns=['Month'], drop_first=True, prefix='Month')\ntrain = pd.get_dummies(train, columns=['Day_of_week'], drop_first=True, prefix='Day_of_week')\ntrain = pd.get_dummies(train, columns=['Weekday'], drop_first=True, prefix='Weekday')\ntrain = pd.get_dummies(train, columns=['Quarter'], drop_first=True, prefix='Quarter')\n\ntrain.head()","8613295b":"corr = train[train.columns].corr()['Sales'][:].sort_values(ascending=True).to_frame()\ncorr = corr.drop(corr[corr.Sales > 0.90].index)\n\n# Visualization\nfig, ax = plt.subplots(figsize =(9, 10))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\nax.barh(corr.index, corr.Sales, align='center', color = np.where(corr['Sales'] < 0, 'crimson', '#89CFF0'))\n\nax.tick_params(axis='both', which='major', labelsize=8)\nax.yaxis.set_label_coords(0, 0)\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\nplt.text(-0.295, 43, \"Correlation\", size=24, color=\"grey\", fontweight=\"bold\");\nplt.text(-0.055, 43, \"of\", size=24, color=\"grey\");\nplt.text(0, 43, \"Sales\", size=24, color=\"crimson\", fontweight=\"bold\");\nplt.text(0.12, 43, \"to\", size=24, color=\"grey\");\nplt.text(0.17, 43, \"Other Features\", size=24, color=\"grey\", fontweight=\"bold\");\n\n# Author\nplt.text(0.6, -7, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","13da7500":"del train['Store_id']\ndel train['Year_2019']","19c08405":"train['holiday_and_discount'] = train['Holiday'] * train['Discount']","174209b9":"# Visualization\nfig, ax = plt.subplots(figsize =(9, 4))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\nsns.boxplot(train.Sales);\n\nax.tick_params(axis='both', which='major', labelsize=11)\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\nax.xaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\nplt.xlabel('Sales', fontsize=11);\n\nplt.title('Sales Outliers (before)', size=22, fontweight=\"bold\");","e54006cf":"# Dealing with the outliers\nq1 = train['Sales'].quantile(0.25)\nq3 = train['Sales'].quantile(0.75)\niqr = q3-q1\nLower_tail = q1 - 1.5 * iqr\nUpper_tail = q3 + 1.5 * iqr\nmed = np.median(train['Sales'])\nfor i in train['Sales']:\n    if i > Upper_tail or i < Lower_tail:\n            train['Sales'] = train['Sales'].replace(i, med)\n\n# I took the code from this notebook -> https:\/\/www.kaggle.com\/nareshbhat\/outlier-the-silent-killer","8a8f3a6a":"# Visualization\nfig, ax = plt.subplots(figsize =(9, 4))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\nsns.boxplot(train['Sales']);\n\nax.tick_params(axis='both', which='major', labelsize=11)\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Setting thousands with k\nax.yaxis.set_major_formatter(ticker.EngFormatter())\nax.xaxis.set_major_formatter(ticker.EngFormatter())\n\n# Y axis position\nax.spines['left'].set_position(('data', -0.5))\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\nplt.xlabel('Sales', fontsize=11);\n\nplt.title('Sales Outliers (after)', size=22, fontweight=\"bold\");","02b37adc":"# Normalization on Sales\ntrain['Sales'] = MinMaxScaler().fit_transform(np.array(train['Sales']).reshape(-1,1))","41d89154":"# Visualization\nfig, ax = plt.subplots(figsize =(9, 6))\nfig.patch.set_facecolor('#e4f2f7')\nax.patch.set_facecolor('#e4f2f7')\n\nsns.distplot(train['Sales'], color=\"#35a79c\");\n\nax.tick_params(axis='both', which='major', labelsize=11)\n\n# Remove ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Remove axes splines\nfor i in ['top', 'bottom', 'left', 'right']:\n    ax.spines[i].set_visible(False)\n\n# Remove grid\nplt.grid(b=None)\n\n# Y axis position\n\n# Font\nmpl.rcParams['font.family'] = 'Source Sans Pro'\n\n# Labels titles\nplt.xlabel('Sales', fontsize=11)\nplt.ylabel('Frequency', fontsize=11, labelpad=20);\n\nplt.text(0.27, 4, \"Sales\", size=24, color=\"#35a79c\", fontweight=\"bold\");\nplt.text(0.42, 4, \"Distribution\", size=24, color=\"grey\", fontweight=\"bold\");\n\n# Author\nplt.text(285000, -3000, \"@miguelfzzz\", fontsize=11, ha=\"right\", color='grey');","6aa5775d":"![sales](https:\/\/cdn.dribbble.com\/users\/1503100\/screenshots\/4115965\/untitled-3.gif)","2b732bb4":"# <p style=\"font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">6. PREDICTION MODEL<\/p>\n\n<p style=\"font-family: verdana;font-size: 24px\">Work in progress... If you liked it so far, please don't forget to comment and upvote. Thank you!<\/p>\n","a8cb6550":"<p style=\"font-family: verdana;font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">TABLE OF CONTENT<\/p>\n    \n\n* [<p style=\"font-family: verdana;font-size: 18px;font-style: bold; line-height:1.0\">1. Introduction<\/p>](#index1)\n* [<p style=\"font-family: verdana;font-size: 18px;font-style: bold; line-height:1.0\">2. Importing libraries and datasets<\/p>](#index2)\n* [<p style=\"font-family: verdana;font-size: 18px;font-style: bold; line-height:1.0\">3. Data preprocessing<\/p>](#index3)\n* [<p style=\"font-family: verdana;font-size: 18px;font-style: bold; line-height:1.0\">4. EDA<\/p>](#index4)\n* [<p style=\"font-family: verdana;font-size: 18px;font-style: bold; line-height:1.0\">5. Feature Engineering<\/p>](#index5)\n\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">\n","819c2547":"<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">","ed576526":"<a id=\"index3\"><\/a>\n# <p style=\"font-family: verdana;font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">3. DATA PREPROCESSING<\/p>","a7b0e8a7":"<a id=\"index1\"><\/a>\n# <p style=\"font-family: verdana;font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">1. INTRODUCTION<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">For this project, I'll be working with \"Womart,\" leading nutrition and supplement retail chain that offers a comprehensive range of products for wellness and fitness needs.<\/p> \n\n<p style=\"font-family: verdana;font-size: 18px\">The purpose of this notebook will be to predict the number of sales for each store to provide the stores with essential insights into the upcoming inventory and cash flow for the following months. <\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">The dataset that they provided contains the information of sales of the past 18 months along with:<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">ID:<\/span> Unique identifier for a row<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Store id:<\/span> Unique id for each store<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Store type:<\/span> Type of the store<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Location type:<\/span> Type of the location where the store is located<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Region Code:<\/span> Code of the region where the store is located<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Date:<\/span> Information about the date<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Holiday:<\/span> If there is a holiday on the given date<\/p>\n\n* <p style=\"font-family: verdana;font-size: 18px\"><span style=\"color:crimson;\">Discount:<\/span> If the store offers a discount on the given date<\/p>\n\n<p style=\"font-family: verdana;font-style: bold;font-size: 18px\">NOTE: Work in progress. Notebook not finished.<\/p>\n\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">","135d04ff":"<a id=\"index5\"><\/a>\n# <p style=\"font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5. FEATURE ENGINEERING<\/p>","ed73d152":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.3 Categorical variables<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">For the categorical variables, I'm going to transform them into dummies variables. This process is known as \"One-Hot Encoding.\"<\/p>","89f05ba2":"<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">","5e4bb06a":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.7 Sales<\/p>","4f838c26":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.1 ID<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">The \"ID\" column will be useless for our prediction, so I'll drop it.<\/p>","ada69865":"<a id=\"index2\"><\/a>\n# <p style=\"font-family: verdana;font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">2. IMPORTING LIBRARIES AND DATASETS<\/p>","28a7e8f3":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.4 Date<\/p>","75e24ce2":"### <p style=\"font-family: verdana;font-size: 20px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">Scaling target variable<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">In my case, I'll scale my target variable to perform better in the predictive model.<\/p>\n\n<p style=\"text-align: center;font-family: verdana;font-size:18px;font-style: italic\">\"A target variable with a large spread of values, in turn, may result in large error gradient values causing weight values to change dramatically, making the learning process unstable.\"<\/p>","b5d2303c":"### <p style=\"font-family: verdana;font-size: 20px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">Outliers<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">Outliers are a silent killer in the prediction models. In this section, I follow the advice of this \n    <a href=\"https:\/\/www.kaggle.com\/nareshbhat\/outlier-the-silent-killer\" target=\"_blank\">kernel<\/a> to use the median imputation to work the outliers.<\/p>","c26d740d":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">3.1 Rename Values<\/p>","8ab9dc8f":"<a id=\"index4\"><\/a>\n# <p style=\"font-family: verdana;font-size: 28px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">4. EDA<\/p>","73170d61":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.2 Changing data types for the model<\/p>","47f5f7b5":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">3.3 Duplicates and Missing Values<\/p>","704124bc":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.6 Creating interesting features<\/p>","2036f151":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">3.2 Data Types<\/p>","260e3eaa":"<p style=\"font-family: verdana;font-size: 18px\">Sales are now normally distributed, great!<\/p>\n\n<hr style=\"height: 0.5px; border: 0; background-color: 'Black'\">","d1cefdc5":"## <p style=\"font-family: verdana;font-size: 23px;font-style: bold; letter-spacing: 2px; color: grey; line-height:1.0\">5.5 Target's correlations<\/p>\n\n<p style=\"font-family: verdana;font-size: 18px\">Checking the target's correlation with other variables will be helpful to determine with features are not crucial for the prediction.<\/p>","f3eb0560":"* <p style=\"font-family: verdana;font-size: 18px\">In my case, I'm going to remove the <span style=\"color:crimson;\">year<\/span> and <span style=\"color:crimson;\">store id<\/span>.<\/p>"}}