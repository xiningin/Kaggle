{"cell_type":{"f9605b8d":"code","28e1df6f":"code","b780a061":"code","44f84b6f":"code","af248d15":"code","47955b3e":"code","424cdbd1":"code","617de209":"code","6de904f5":"code","6b9d9cec":"code","9d13f4fc":"code","223e39ef":"code","cb1f00ff":"code","e72c5392":"code","393c2daa":"code","4c6d8032":"code","982baaa9":"code","0310b4ca":"code","5ea91d4b":"markdown","f5682c54":"markdown","da9018bd":"markdown","e0d8a33b":"markdown","7e2af3b9":"markdown","db23a1d8":"markdown","77386151":"markdown","67c39732":"markdown","5f5551c7":"markdown"},"source":{"f9605b8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","28e1df6f":"import cv2\nimport matplotlib.pyplot as plt","b780a061":"img1 = cv2.imread('\/kaggle\/input\/hw4_radiograph_1.jpg')\nimg2 = cv2.imread('\/kaggle\/input\/hw4_radiograph_2.jpg')","44f84b6f":"plt.imshow(img1)\nplt.show()\nprint(\"imgae 1\")\nplt.imshow(img2)\nplt.show()\nprint(\"imgae 2\")","af248d15":"# Trying with image 1\nplt.imshow(img1)\nplt.show()\nprint(\"imgae 1 (original)\")\nfor i in range(1,21,2):\n    img1Fix = cv2.medianBlur(img1,i)\n    plt.imshow(img1Fix)\n    plt.show()\n    print(\"Applied filter %i\" %i)","47955b3e":"# Trying with image 2\nplt.imshow(img2)\nplt.show()\nprint(\"imgae 2 (original)\")\nfor i in range(1,21,2):\n    img2Fix = cv2.medianBlur(img2,i)\n    plt.imshow(img2Fix)\n    plt.show()\n    print(\"Applied filter %i\" %i)","424cdbd1":"img1Fix = cv2.medianBlur(img1,7)\nfig = plt.figure(num=None, figsize=(80, 80), dpi=80, facecolor='w', edgecolor='k')\nfig1 = fig.add_subplot(10, 10, 1)\nfig2 = fig.add_subplot(10, 10, 2)\nfig1.title.set_text('Orignal image')\nfig1.imshow(img1)\nfig2.title.set_text('Applied filter 7x7')\nfig2.imshow(img1Fix)\nplt.show()","617de209":"img2Fix = cv2.medianBlur(img2,13)\nfig = plt.figure(num=None, figsize=(80, 80), dpi=80, facecolor='w', edgecolor='k')\nfig1 = fig.add_subplot(10, 20, 1)\nfig2 = fig.add_subplot(10, 20, 2)\nfig1.title.set_text('Orignal image')\nfig1.imshow(img2)\nfig2.title.set_text('Applied filter 13x13')\nfig2.imshow(img2Fix)\nplt.show()","6de904f5":"img = cv2.imread('\/kaggle\/input\/hw4_radiograph_1.jpg',0)\ndft = cv2.dft(np.float32(img),flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nmagnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()","6b9d9cec":"rows, cols = img.shape\ncrow,ccol = rows\/\/2 , cols\/\/2\n# create a mask first, center square is 1, remaining all zeros\nmask = np.zeros((rows,cols,2),np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 1\n# apply mask and inverse DFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()","9d13f4fc":"f = np.fft.fft2(img)\nfshift = np.fft.fftshift(f)\nmagnitude_spectrum = 20*np.log(np.abs(fshift))\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\n\nrows, cols = img.shape\ncrow,ccol = rows\/\/2 , cols\/\/2\nfshift[crow-30:crow+31, ccol-30:ccol+31] = 0\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = np.fft.ifft2(f_ishift)\nimg_back = np.real(img_back)\nplt.subplot(131),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(132),plt.imshow(img_back, cmap = 'gray')\nplt.title('Image after HPF'), plt.xticks([]), plt.yticks([])\nplt.subplot(133),plt.imshow(img_back)\nplt.title('Result in JET'), plt.xticks([]), plt.yticks([])\nplt.show()","223e39ef":"img = cv2.imread('\/kaggle\/input\/hw4_radiograph_2.jpg',0)\ndft = cv2.dft(np.float32(img),flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nmagnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()","cb1f00ff":"rows, cols = img.shape\ncrow,ccol = rows\/\/2 , cols\/\/2\n# create a mask first, center square is 1, remaining all zeros\nmask = np.zeros((rows,cols,2),np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 1\n# apply mask and inverse DFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()","e72c5392":"# https:\/\/github.com\/glasgio\/homomorphic-filter\n# High-frequency filters implemented\n# + butterworth\n# + gaussian\n\nclass HomomorphicFilter:\n\n    def __init__(self, a = 0.5, b = 1.5):\n        self.a = float(a)\n        self.b = float(b)\n\n    # Filters\n    def __butterworth_filter(self, I_shape, filter_params):\n        P = I_shape[0]\/2\n        Q = I_shape[1]\/2\n        U, V = np.meshgrid(range(I_shape[0]), range(I_shape[1]), sparse=False, indexing='ij')\n        Duv = (((U-P)**2+(V-Q)**2)).astype(float)\n        H = 1\/(1+(Duv\/filter_params[0]**2)**filter_params[1])\n        return (1 - H)\n\n    def __gaussian_filter(self, I_shape, filter_params):\n        P = I_shape[0]\/2\n        Q = I_shape[1]\/2\n        H = np.zeros(I_shape)\n        U, V = np.meshgrid(range(I_shape[0]), range(I_shape[1]), sparse=False, indexing='ij')\n        Duv = (((U-P)**2+(V-Q)**2)).astype(float)\n        H = np.exp((-Duv\/(2*(filter_params[0])**2)))\n        return (1 - H)\n\n    # Methods\n    def __apply_filter(self, I, H):\n        H = np.fft.fftshift(H)\n        I_filtered = (self.a + self.b*H)*I\n        return I_filtered\n\n    def filter(self, I, filter_params, filter='butterworth', H = None):\n        #  Validating image\n        if len(I.shape) is not 2:\n            raise Exception('Improper image')\n\n        # Take the image to log domain and then to frequency domain \n        I_log = np.log1p(np.array(I, dtype=\"float\"))\n        I_fft = np.fft.fft2(I_log)\n\n        # Filters\n        if filter=='butterworth':\n            H = self.__butterworth_filter(I_shape = I_fft.shape, filter_params = filter_params)\n        elif filter=='gaussian':\n            H = self.__gaussian_filter(I_shape = I_fft.shape, filter_params = filter_params)\n        elif filter=='external':\n            print('external')\n            if len(H.shape) is not 2:\n                raise Exception('Invalid external filter')\n        else:\n            raise Exception('Selected filter not implemented')\n        \n        # Apply filter on frequency domain then take the image back to spatial domain\n        I_fft_filt = self.__apply_filter(I = I_fft, H = H)\n        I_filt = np.fft.ifft2(I_fft_filt)\n        I = np.exp(np.real(I_filt))-1\n        return np.uint8(I)\n# End of class HomomorphicFilter","393c2daa":"img = cv2.imread('\/kaggle\/input\/hw4_radiograph_1.jpg',0)\nimg = cv2.medianBlur(img,7)                                             # -> remove moire (1)\nhomo_filter = HomomorphicFilter(a = 0.75, b = 1.25)\nimg_filtered = homo_filter.filter(I=img, filter_params=[30,2])\nplt.imshow(img_filtered)\nplt.show()","4c6d8032":"img = cv2.imread('\/kaggle\/input\/hw4_radiograph_2.jpg',0)\nimg = cv2.medianBlur(img,13)                                            # -> remove moire (1)\nhomo_filter = HomomorphicFilter(a = 0.75, b = 1.25)\nimg_filtered = homo_filter.filter(I=img, filter_params=[30,2])\nplt.imshow(img_filtered)\nplt.show()","982baaa9":"from scipy import fftpack\nim = cv2.imread('\/kaggle\/input\/hw4_radiograph_1.jpg',0)\nim = cv2.medianBlur(im,7)                             \nF1 = fftpack.fft2((im).astype(float))\nF2 = fftpack.fftshift(F1)\nw,h = im.shape\nfor i in range(60, w, 135):\n    for j in range(100, h, 200):\n        if not (i == 330 and j == 500):\n            F2[i-10:i+10, j-10:j+10] = 0\nfor i in range(0, w, 135):\n    for j in range(200, h, 200):\n        if not (i == 330 and j == 500):\n            F2[max(0,i-15):min(w,i+15), max(0,j-15):min(h,j+15)] = 0\nplt.figure(figsize=(6.66,10))\nplt.imshow( (20*np.log10( 0.1 + F2)).astype(int), cmap=plt.cm.gray)\nplt.show()\nim1 = fftpack.ifft2(fftpack.ifftshift(F2)).real\nplt.figure(figsize=(10,10))\nplt.imshow(im1, cmap='gray')\nplt.axis('off')\nplt.show()","0310b4ca":"from scipy import fftpack\nim = cv2.imread('\/kaggle\/input\/hw4_radiograph_2.jpg',0)\nim = cv2.medianBlur(im,7)                             \nF1 = fftpack.fft2((im).astype(float))\nF2 = fftpack.fftshift(F1)\nw,h = im.shape\nfor i in range(60, w, 135):\n    for j in range(100, h, 200):\n        if not (i == 330 and j == 500):\n            F2[i-10:i+10, j-10:j+10] = 0\nfor i in range(0, w, 135):\n    for j in range(200, h, 200):\n        if not (i == 330 and j == 500):\n            F2[max(0,i-15):min(w,i+15), max(0,j-15):min(h,j+15)] = 0\nplt.figure(figsize=(6.66,10))\nplt.imshow( (20*np.log10( 0.1 + F2)).astype(int), cmap=plt.cm.gray)\nplt.show()\nim1 = fftpack.ifft2(fftpack.ifftshift(F2)).real\nplt.figure(figsize=(10,10))\nplt.imshow(im1, cmap='gray')\nplt.axis('off')\nplt.show()","5ea91d4b":"Butterworth ","f5682c54":"Notch ","da9018bd":"**2. Display DFT2D of these images**","e0d8a33b":"now is next imgae\n","7e2af3b9":"**fun with FFT :D **","db23a1d8":"**1. Apply an N\u00d7N median filter to theses images. Adjust the window size N so that the Moire\npattern is removed as much as possible while salient features are properly preserved.\n**","77386151":"**3. Apply Butterworth and Notch filter to 2 attached images.**","67c39732":"with image 2 is filter 13","5f5551c7":"-> filter 7 look well..."}}