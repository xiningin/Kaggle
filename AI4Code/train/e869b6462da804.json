{"cell_type":{"d3e88a67":"code","f5b31a1a":"code","f4ff746d":"code","b9aadf82":"code","06052d76":"code","6f797e74":"code","a43f7277":"code","9c277ebe":"code","14707f4a":"code","d813d41a":"code","5103d807":"markdown","ab1dcebc":"markdown"},"source":{"d3e88a67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5b31a1a":"!pip install dataprep","f4ff746d":"import pandas as pd\nfrom dataprep.clean import clean_text\nfrom dataprep.eda import plot, plot_diff, plot_correlation, create_report","b9aadf82":"train_full = pd.read_csv(\"\/kaggle\/input\/g-research-crypto-forecasting\/train.csv\")\n\n\nprint('Training Set Shape = {}'.format(train_full.shape))\nprint('Training Set Memory Usage = {:.2f}MB'.format(train_full.memory_usage().sum()\/2**20))","06052d76":"train_full.head()","6f797e74":"plot(train_full)","a43f7277":"asset_df = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset_df","9c277ebe":"etc = train_full[train_full[\"Asset_ID\"]==7].set_index(\"timestamp\") # Asset_ID = 7 for Ethereum Classic\netc_slice = etc[:200]\netc_slice","14707f4a":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Candlestick(x=etc_slice.index, \n                                     open=etc_slice['Open'], \n                                     high=etc_slice['High'], \n                                     low=etc_slice['Low'], \n                                     close=etc_slice['Close'])])\nfig.show()","d813d41a":"create_report(etc)","5103d807":"# If you find this notebook useful, support with an upvote\ud83d\udc4d","ab1dcebc":"# Visualiztion of a slice of Ethinium Classic Price (CandleStick)"}}