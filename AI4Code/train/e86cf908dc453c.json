{"cell_type":{"28daf52e":"code","58e5620d":"code","58357938":"code","1cbde547":"code","e1abc128":"code","120456bb":"code","5d63f580":"code","4604e8ff":"code","cac36ba9":"code","e984fdb8":"code","129e17f0":"markdown"},"source":{"28daf52e":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.patches as patches\nimport pylab as pl\nfrom PIL import Image\nimport cv2 as cv\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.model_selection import train_test_split","58e5620d":"directory = '..\/input\/enfermedades-cacao-yolov4\/Enfermedades Cacao\/'","58357938":"Name=[]\nfor file in os.listdir(directory):\n    Name+=[file]\nprint(Name)\nprint(len(Name))","1cbde547":"N=[]\nfor i in range(len(Name)):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N))     \nreverse_mapping=dict(zip(N,Name)) \n\ndef mapper(value):\n    return reverse_mapping[value]","e1abc128":"dataset=[]\ndatafile=[]\ndatapath=[]\nboxset=[]\nboxfile=[]\nboxpath=[]\n\ncount=0\nfor file in os.listdir(directory):\n    path=os.path.join(directory,file)\n    for im in os.listdir(path):\n        if im[-4:]=='.jpg':\n            image=load_img(os.path.join(path,im), grayscale=False, color_mode='rgb', target_size=(100,100))\n            image=img_to_array(image)\n            image=image\/255.0\n            dataset.append([image,count])\n            datafile.append(im)\n            bx=im[0:-4]+'.txt'\n            boxfile.append(bx)\n            dtpath=os.path.join(path,im)\n            datapath.append(dtpath)\n            bxpath=os.path.join(path,bx)\n            bxdata=np.loadtxt(bxpath)            \n            boxpath.append(bxpath)\n            boxset.append(bxdata)\n    count=count+1","120456bb":"n_sana=0\nn_monilia=0\nn_fito=0\nfor i in range(len(dataset)):\n    sp=dataset[i][1]\n    if sp==0:\n        n_sana+=1\n    elif sp==1:\n        n_monilia+=1\n    elif sp==2:\n        n_fito+=1\n        \nprint(n_fito,n_monilia,n_sana)\nprint(len(dataset))","5d63f580":"def draw_bbox2(num0):\n    img0=datapath[num0]\n    box0=boxset[num0]\n    count=dataset[num0][1]\n    name=mapper(count)\n    im=Image.open(img0)\n    W,H=im.size\n    print(box0)\n    _ = plt.figure(figsize = (10,10))\n    _ = plt.axis('on')\n    _ = plt.imshow(mpimg.imread(img0))\n    ax=plt.gca()\n    ax.text(W*0.05,H*0.05,f'{name}',fontsize=30,color='yellow')\n    ax.text(W*0.05,H*0.10,f'#0',fontsize=20,color='red')\n    ax.text(W*0.05,H*0.15,f'#1',fontsize=20,color='blue')\n    ax.text(W*0.05,H*0.20,f'#2',fontsize=20,color='yellow')\n    \n    if type(box0[0])==np.float64:\n        mk,x0,y0,w0,h0=box0\n        x=(x0-w0\/2)*W\n        y=(y0-h0\/2)*H\n        w=w0*W\n        h=h0*H\n        if mk==0:\n            rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='red',fill = False)\n        elif mk==1:\n            rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='blue',fill = False)        \n        elif mk>1:\n            rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='yellow',fill = False)               \n        ax.add_patch(rect)\n        plt.show    \n    else:\n        for item in box0:\n            mk,x0,y0,w0,h0=item\n            x=(x0-w0\/2)*W\n            y=(y0-h0\/2)*H\n            w=w0*W\n            h=h0*H\n            if mk==0:\n                rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='red',fill = False)\n            elif mk==1:\n                rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='blue',fill = False)        \n            elif mk>1:\n                rect=patches.Rectangle((x,y),w,h,linewidth=2,edgecolor='yellow',fill = False)               \n            ax.add_patch(rect)\n            plt.show","4604e8ff":"draw_bbox2(48)","cac36ba9":"draw_bbox2(146)","e984fdb8":"draw_bbox2(240)","129e17f0":"# Yolo Data Viewing\n"}}