{"cell_type":{"42f768f6":"code","ecfb1833":"code","eb297363":"code","c6cf2648":"code","170b867d":"code","2ffb6322":"code","4b302b4b":"code","e886f3a0":"code","a820947a":"code","51a3d907":"code","6c120ee8":"code","08a3bd82":"code","97ec5d9f":"code","9ecfb5f5":"code","212a1c62":"code","9d03f9a6":"code","718bd557":"code","0efaaae1":"code","22bf3653":"code","6b344299":"code","5a43adbb":"code","902635c6":"code","624a1b54":"code","a0e0c2ec":"code","f5a7293a":"code","f13bdaf1":"code","f2c4578f":"code","073ec98f":"code","49be1cdd":"code","5cfafd3d":"code","77f27884":"code","0abb4577":"code","0bee9223":"code","99c9207b":"code","f6828cc3":"code","f070a29a":"code","5bbb4cb9":"code","88b5de6b":"code","16960245":"code","446d6447":"code","857c369a":"markdown","b1c4d243":"markdown","c9382b73":"markdown","3588bc13":"markdown","f06b81e3":"markdown","f234504e":"markdown","172e6f76":"markdown","597a410b":"markdown","9585776b":"markdown","6207c804":"markdown","d52f76c3":"markdown","e88da645":"markdown","2bd6a2af":"markdown","093aa85d":"markdown","6e8519fd":"markdown","cbc10a86":"markdown","96fab38f":"markdown","be28f60d":"markdown","20fc629e":"markdown","a3bc373f":"markdown","66545d2b":"markdown","51fe4739":"markdown","77309461":"markdown","b3bc7b5f":"markdown"},"source":{"42f768f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecfb1833":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","eb297363":"pd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',100)","c6cf2648":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","170b867d":"print(train.head())\nprint(train.shape)","2ffb6322":"print(test.head())\nprint(test.shape)","4b302b4b":"print(\"Checking null values for train datasets\")\nprint(train.isnull().sum())\nprint(\"\\n \\n \\n \\n \\n\")\nprint(\"Checking null values for test datasets\")\nprint(test.isnull().sum())","e886f3a0":"print(\"Checking null values in train datasets using heatmap\")\nsns.heatmap(train.isnull(), yticklabels=False, cbar=False)","a820947a":"print(\"Checking null values in test datasets using heatmap\")\nsns.heatmap(test.isnull(), yticklabels=False, cbar=False)","51a3d907":"print(train.dtypes)","6c120ee8":"test.dtypes","08a3bd82":"train.info()","97ec5d9f":"test.info()","9ecfb5f5":"print(\"Replacing null values and removing some feature with more than 50% null values from Train Datasets\")\ntrain[\"LotFrontage\"] = train[\"LotFrontage\"].fillna(method = 'ffill')\ntrain.drop(['Alley'], axis=1, inplace=True)\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(train['MasVnrType'].mode()[0])\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(method = 'ffill')\ntrain[\"BsmtQual\"] = train[\"BsmtQual\"].fillna(train['BsmtQual'].mode()[0])\ntrain[\"BsmtCond\"] = train[\"BsmtCond\"].fillna(train['BsmtCond'].mode()[0])\ntrain[\"BsmtExposure\"] = train[\"BsmtExposure\"].fillna(train['BsmtExposure'].mode()[0])\ntrain[\"BsmtFinType1\"] = train[\"BsmtFinType1\"].fillna(train['BsmtFinType1'].mode()[0])\ntrain[\"BsmtFinType2\"] = train[\"BsmtFinType2\"].fillna(train['BsmtFinType2'].mode()[0])\ntrain[\"Electrical\"] = train[\"Electrical\"].fillna(train['Electrical'].mode()[0])\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna(train['FireplaceQu'].mode()[0])\ntrain[\"GarageType\"] = train[\"GarageType\"].fillna(train['GarageType'].mode()[0])\ntrain[\"GarageFinish\"] = train[\"GarageFinish\"].fillna(train['GarageFinish'].mode()[0])\ntrain.drop([\"GarageYrBlt\"], axis=1, inplace=True)\ntrain[\"GarageQual\"] = train[\"GarageQual\"].fillna(train['GarageQual'].mode()[0])\ntrain[\"GarageCond\"] = train[\"GarageCond\"].fillna(train['GarageCond'].mode()[0])\ntrain.drop(['PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","212a1c62":"print(\"Replacing null values and removing some feature with more than 50% null values from Test Datasets\")\ntest[\"LotFrontage\"] = test[\"LotFrontage\"].fillna(method = 'ffill')\ntest[\"MSZoning\"] = test[\"MSZoning\"].fillna(test['MSZoning'].mode()[0])\ntest.drop(['Alley'], axis=1, inplace=True)\ntest[\"Utilities\"] = test[\"Utilities\"].fillna(test['Utilities'].mode()[0])\ntest[\"Exterior1st\"] = test[\"Exterior1st\"].fillna(test['Exterior1st'].mode()[0])\ntest[\"Exterior2nd\"] = test[\"Exterior2nd\"].fillna(test['Exterior2nd'].mode()[0])\ntest[\"MasVnrType\"] = test[\"MasVnrType\"].fillna(test['MasVnrType'].mode()[0])\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].fillna(method = 'ffill')\ntest[\"BsmtQual\"] = test[\"BsmtQual\"].fillna(test['BsmtQual'].mode()[0])\ntest[\"BsmtCond\"] = test[\"BsmtCond\"].fillna(test['BsmtCond'].mode()[0])\ntest[\"BsmtExposure\"] = test[\"BsmtExposure\"].fillna(test['BsmtExposure'].mode()[0])\ntest[\"BsmtFinType1\"] = test[\"BsmtFinType1\"].fillna(test['BsmtFinType1'].mode()[0])\ntest[\"BsmtFinSF1\"] = test[\"BsmtFinSF1\"].fillna(method = 'ffill')\ntest[\"BsmtFinType2\"] = test[\"BsmtFinType2\"].fillna(test['BsmtFinType2'].mode()[0])\ntest[\"BsmtFinSF2\"] = test[\"BsmtFinSF2\"].fillna(method = 'ffill')\ntest[\"BsmtUnfSF\"] = test[\"BsmtUnfSF\"].fillna(method = 'ffill')\ntest[\"TotalBsmtSF\"] = test[\"TotalBsmtSF\"].fillna(method = 'ffill')\ntest[\"BsmtFullBath\"] = test[\"BsmtFullBath\"].fillna(method = 'ffill')\ntest[\"BsmtHalfBath\"] = test[\"BsmtHalfBath\"].fillna(method = 'ffill')\ntest[\"KitchenQual\"] = test[\"KitchenQual\"].fillna(test['KitchenQual'].mode()[0])\ntest[\"Functional\"] = test[\"Functional\"].fillna(test['Functional'].mode()[0])\ntest[\"FireplaceQu\"] = test[\"FireplaceQu\"].fillna(test['FireplaceQu'].mode()[0])\ntest[\"GarageType\"] = test[\"GarageType\"].fillna(test['GarageType'].mode()[0])\ntest[\"GarageFinish\"] = test[\"GarageFinish\"].fillna(test['GarageFinish'].mode()[0])\ntest.drop([\"GarageYrBlt\"], axis=1, inplace=True)\ntest[\"GarageCars\"] = test[\"GarageCars\"].fillna(method = 'ffill')\ntest[\"GarageArea\"] = test[\"GarageArea\"].fillna(method = 'ffill')\ntest[\"GarageQual\"] = test[\"GarageQual\"].fillna(test['GarageQual'].mode()[0])\ntest[\"GarageCond\"] = test[\"GarageCond\"].fillna(test['GarageCond'].mode()[0])\ntest[\"SaleType\"] = test[\"SaleType\"].fillna(test['SaleType'].mode()[0])\ntest.drop(['PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","9d03f9a6":"train.drop(['Id'], axis = 1, inplace=True)\ntest.drop(['Id'], axis = 1, inplace=True)","718bd557":"print(\"Checking null values for train datasets\")\nprint(train.isnull().sum())\nprint(\"\\n \\n \\n \\n \\n\")\nprint(\"Checking null values for test datasets\")\nprint(test.isnull().sum())","0efaaae1":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False)","22bf3653":"sns.heatmap(test.isnull(), yticklabels=False, cbar=False)","6b344299":"print(train.shape)\nprint(test.shape)","5a43adbb":"print(train.dtypes)\nprint(\"\\n \\n \\n \\n \\n \\n\")\nprint(test.dtypes)","902635c6":"col = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', \n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', \n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', \n       'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n       'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', \n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', \n       'PavedDrive', 'SaleType', 'SaleCondition']\n\nlen(col)","624a1b54":"final = pd.concat([train, test], axis = 0)","a0e0c2ec":"final","f5a7293a":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\nfor i in col:\n    final[i] = encoder.fit_transform(final[i])\n    \nprint(final.shape)\nprint(final.columns)","f13bdaf1":"df_train=final.iloc[:1460,:]\ndf_test=final.iloc[1460:,:]","f2c4578f":"df_test.drop(['SalePrice'],axis=1,inplace=True)\nprint(df_test.columns)","073ec98f":"df_train","49be1cdd":"df_test","5cfafd3d":"x_train=df_train.drop(['SalePrice'],axis=1)\ny_train=df_train['SalePrice']","77f27884":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(x_train, y_train)\n\ny_pred = regressor.predict(df_test)\n\nfrom sklearn.metrics import r2_score\nregressor.score(x_train,y_train)","0abb4577":"ss = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","0bee9223":"sp = pd.DataFrame(y_pred, columns=['SalePrice1'])","99c9207b":"ss1 = pd.concat([ss,sp], axis=1)","f6828cc3":"ss1","f070a29a":"ss1.drop(['SalePrice'],axis=1,inplace=True)","5bbb4cb9":"ss1","88b5de6b":"ss1 = ss1.rename(columns={'SalePrice1': 'SalePrice'})","16960245":"ss1","446d6447":"ss1.to_csv(\"sample_submission.csv\")","857c369a":"### Let's first replace all null values from train datasets.\n### We will simply take mode for categorical feature and for numerical, we will use ffill method.\n### Also we will drop all features have more than 50% null values.\n### Dealing with null values is necessary as this can lower performance and accuracy.","b1c4d243":"### I am getting r2 score of approximately 0.98.\n# Importing final predicted data in .csv files","c9382b73":"### I handled null values feeature-by-feature but we can make a defined function and by using if, else and loop, we can do this all in one shorter code only.","3588bc13":"## Now let's check is there any null values exist now.","f06b81e3":"# Label Encoding","f234504e":"### Visualizing not-null values in form of bar plot for each columns \n### For this we can use missingo libraries. \n### import missingno as msno\n### msno.bar(test)\n### msno.bar(train)\n### Above mentioned are two codes for bar plotting not null values. This codes can be easily use in any IDE without any error.\n### I am not using this in this notebook as it showing error but there will be no error in any IDE.","172e6f76":"### Let's fix the size of columns and rows visible(shown) if we called some dataframe","597a410b":"### We are making a list columns having categorical features so we can easily apply label encoder. It will simply convert all category to numeric category.","9585776b":"### First concatenate both datasets. Benefit of doing this is that, after applying label encoder, if there any extra category in test then it will be managed easily in concatenate datasets. For ex. if there are 2 category in some features of train and 3 category in same feature of test datasets then concatenation and then label encoder will categorized in three category and won't raise any problem further.","6207c804":"### Now let's import required .csv files","d52f76c3":"### So we can clearly see that there was no null values now. We can proceed further now.","e88da645":"### As we can observe, train dataset have 1460 rows and 81 columns while test datasets have 1459 and 80 columns. Test dataset have one less column named 'SalePrice' as our aim is to predict that only.","2bd6a2af":"### Now visualize this null values in form of heatmap","093aa85d":"## Null values","6e8519fd":"# Data cleaning\n## Removing Null values","cbc10a86":"### I am using here Random Forest regressor model to predict.","96fab38f":"# Exploring data","be28f60d":"### Now we will remove Id columns from both train and test datasets as it is not required","20fc629e":"# Importing Libraries and input files(.csv files)","a3bc373f":"### White bars in above two heatmaps indicating null values","66545d2b":"## Please do upvote if you found this code helpful and don't forget to comment. Please comment if there any suggestion or compliments.\n## Thank you","51fe4739":"### Now let's check is there any null (or NaN) values in our data.","77309461":"### Now our data is ready for prediction.\n# Let's Predict","b3bc7b5f":"### Now let's drop Saleprice columns from df_test datasets as it contains only null values and also we have to predict that only."}}