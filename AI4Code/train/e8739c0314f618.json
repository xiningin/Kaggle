{"cell_type":{"1ee947b1":"code","c06d8273":"code","c87fdc71":"code","07356bdb":"code","4c1d6c70":"code","ac408d74":"code","9e5a8a9a":"code","37f7016a":"code","5ef699cd":"code","2ff19382":"code","8a489664":"code","7076c64d":"code","dc8b41ae":"code","ac6b8d4b":"code","221d63b0":"code","4e7f882b":"code","af77cb1c":"code","ca4b7e47":"markdown","31c22321":"markdown","b5b1aef7":"markdown","bd7a3a56":"markdown"},"source":{"1ee947b1":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","c06d8273":"# Create a list with the filepaths for training and testing\ndir_ = Path('..\/input\/dogs-cats-images\/dataset\/training_set')\ntrain_filepaths = list(dir_.glob(r'**\/*.jpg'))\n\ndir_ = Path('..\/input\/dogs-cats-images\/dataset\/test_set')\ntest_filepaths = list(dir_.glob(r'**\/*.jpg'))","c87fdc71":"def proc_img(filepath):\n    \"\"\" Create a DataFrame with the filepath and the labels of the pictures\n    \"\"\"\n\n    labels = [str(filepath[i]).split(\"\/\")[-2] \\\n              for i in range(len(filepath))]\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1,random_state=0).reset_index(drop = True)\n    \n    return df\ntrain = proc_img(train_filepaths)\ntest = proc_img(test_filepaths)\n\nprint(f'Number of pictures in the training dataset: {train.shape[0]}\\n')\nprint(f'Number of pictures in the test dataset: {test.shape[0]}\\n')\nprint(f'Number of different labels: {len(train.Label.unique())}\\n')\nprint(f'Labels: {train.Label.unique()}')\n\n","07356bdb":"pd.set_option('display.max_colwidth',200)","4c1d6c70":"train.head()","ac408d74":"train.shape, test.shape","9e5a8a9a":"CLASSES = train['Label'].unique().tolist()","37f7016a":"# Display some pictures of the dataset\nfig, axes = plt.subplots(nrows=4, ncols=6, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(train.Filepath[i]))\n    ax.set_title(train.Label[i], fontsize = 15)\nplt.tight_layout(pad=0.5)\nplt.show()","5ef699cd":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Preprocessing the Training set\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   validation_split=0.25)\n\ntraining_set = train_datagen.flow_from_dataframe(dataframe=train,\n                                                 x_col='Filepath',\n                                                 y_col='Label',\n                                                 subset='training')\n\n \nval_set = train_datagen.flow_from_dataframe(dataframe=train,\n                                             x_col='Filepath',\n                                              y_col='Label',\n                                            subset='validation')\n\n# Preprocessing the Test set\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_dataframe(dataframe=test,\n                                            x_col='Filepath',\n                                            y_col='Label')","2ff19382":"from keras import Sequential\nfrom keras.applications import MobileNet\nfrom tensorflow.keras.layers import Dense","8a489664":"base_Net = MobileNet(include_top = False, \n                         weights = '..\/input\/keras-pretrained-models\/MobileNet_NoTop_ImageNet.h5', \n                         input_shape = training_set.image_shape, \n                         pooling='avg',\n                         classes = CLASSES)","7076c64d":"#Adding the final layers to the above base models where the actual classification is done in the dense layers\nmodel_Net = Sequential()\nmodel_Net.add(base_Net)\nmodel_Net.add(Dense(2, activation=('sigmoid')))\n\nmodel_Net.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel_Net.summary()","dc8b41ae":"r=model_Net.fit(x = training_set, validation_data = val_set, epochs = 5,batch_size=128)","ac6b8d4b":"# plot the loss\nimport matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend()\nplt.show()\n","221d63b0":"# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend()\nplt.show()","4e7f882b":"pred = model_Net.predict(test_set)","af77cb1c":"model_Net.save('dogs_cat.h5')","ca4b7e47":"### MobileNet","31c22321":"#### if you like this notebook plz upvote it :)\n#### Thank you","b5b1aef7":"### Data Preprocessing","bd7a3a56":"* Training model on the Training_set and evaluating it on the val_set"}}