{"cell_type":{"02085704":"code","7c931e34":"code","03f68ba1":"code","efcdf8de":"code","1d2118ad":"code","137bb378":"code","472e5091":"code","cb518b9b":"code","18f0f65b":"code","5b565abd":"code","4fb69c24":"code","e84684ce":"code","2551bc8b":"code","1e6ff505":"code","98a55c6c":"code","921c87f2":"code","ed6e2412":"code","c728d4f0":"code","c1fa6af8":"code","43d835fc":"code","5f4630f8":"code","bd713553":"code","543d0fb7":"code","dcf83c2f":"code","225d23c9":"code","1c089988":"code","8d44a5fe":"code","f3536b01":"code","4112329b":"code","a1df8d55":"code","93a7a13c":"code","7cd6463b":"code","d8dc8997":"code","5e7b2217":"code","67a128b4":"code","b13ae6be":"code","0829d61a":"code","47fe01c6":"code","3c82c96d":"code","0c5d26be":"code","c6b31acb":"code","58b374dc":"code","4de97796":"code","34e20eea":"code","8fb87fdc":"code","cb06320e":"code","ea7a9874":"code","08d4d037":"code","44edbd50":"code","ada68aac":"code","0baafa22":"code","d1101f41":"code","6962ffc9":"code","2fc8b276":"code","08b7c0aa":"code","29a3454e":"code","fa7f600e":"code","bc532de4":"code","c937c73b":"code","4cd5d575":"code","0d0df917":"code","e3199191":"code","0b7cfec1":"code","9fff3a10":"code","c2442232":"code","219604b7":"code","9e19c975":"code","d42ec2aa":"code","35b10aeb":"code","143f8b27":"code","4245a071":"code","fca0d92a":"code","62d2959f":"code","cbd72326":"code","a0b56b32":"code","c9b0568f":"code","073574fb":"code","fef250fe":"code","a8da3809":"code","e8d6a37a":"code","27eb0a30":"code","588e13b5":"code","f8c36fd6":"code","b5196e99":"code","df969415":"code","781c21e5":"code","fd6001f3":"code","a7c3ff47":"code","e44ebc79":"code","1db04b81":"code","c6f8e766":"code","bdef7c23":"code","444308b3":"markdown"},"source":{"02085704":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7c931e34":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/5095eabce4b06cb305058603\/5095eabce4b02d37bef4c24c\/1352002236895\/100_anniversary_titanic_sinking_by_esai8mellows-d4xbme8.jpg\")","03f68ba1":"Image(url=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAw1BMVEUMC4v\/\/\/8AAIkAAIYAAIIAAIHc4PvY3Pje4vwJCIvW2vcFA4r8\/P75+fzb4Prm5vHy8vgvL5bX1+jR1fTr6\/Rqa7PLy+HS0uW1tdTBwdqSksG6utfe3uzj4+94eLShocl5e7ysrM\/Jze9sbK6EhLqxtN9fX6hycrGamsWipdWkpMu\/wuhAQJyBgbiMjL4cHJCSlctUVKNJSqI8PJo0NJetsNydoNIVFI6AgLhjY6onJ5RRUaJISaKMjsd1dbIxMJYAAHZZJXK8AAAgAElEQVR4nMVdh3YqO6\/GZTqECRB6CL1veugk5\/2f6sqewvQC5L\/aa+2VEKZ8tqxmSc6gPye9We6M+6PLZj6\/zhnB\/5vLqD\/ulJv63z8+85c3z9fGp93u1J\/WKnkvFj1fqU377M\/jWv4vX+KvEJYax+281ankjF\/1ZqVR\/RrX64vFol4ff1UbFWv+cpVOa749Nkp\/9CZ\/gTA\/He5GnU\/2o16p1ntbTIGIm9hHeNurVysc6WdntBtO\/2IyX40w1\/jZ\/dTYS+er\/Q0WABjGSiaYFIwBqoA3iyrDptdGvz+N3Ivf6KUIc9XL5ou9a+FrSBi2MGheoIATD78KcGX+63qpvhTkCxFWN5tqFlZg5wToEoJzwaTk1IHVmOvAjV73Wq9CWBhtOzD0zfpZSI\/OgVJ4rzcZyN2o8KI3ewnC7Ne5D8zZXCgwecEvj7l4wVosSpjKzAJAfh7PX9lXvNwLEJaOW2Cq3PRMSSgAfL3dbsf2eklDRsBJGszkFBii+n58gQp5GmFhvQZ+Kp9CZ48T+ZBFIFmerYn3T0HXwUz2KghVLuunmfVJhIV5D4Z5Gjs15ONN6s66qizJH26I5Hhl7Ou7QsH03AFmPc2fxPgUwuZmpKPcIugF\/QjlnUDpvCsVXQgVRZbVQXsrEOKTT7B261lU6m2a\/08IS5eejvR\/gv\/VghFeYRzIWpR\/neOB16LK2Ff9bi\/991EIXeSQfro8sR4fRphtrUso94\/aM8L0WSxCfJblnRMhuYniaiAxkErQSBkY85vWw3L1UYRfOxAEC2rOH1PX29tsFQrRRrgVxYwTCRlIEtis1+PgO+RiBXgVRNl5+j9FWGBCYGotHWZy7buy+FakUQjnYKEKK7Hr+hJVpRnldls4AygEs8ctHxM5jyDM9nowqEtr\/ZH2QHoTVak46YVKHEAonrbX9USU204o+F2W9uHYLNLIuYJyw97\/CGEDBlM\/CTYaMpFlqSh1\/4uYBkCogjYE2lP356I4okFmnuIW0Fjo5VBFafwPEGYvR+AYp\/7Dl\/0auE88R+gMhrDYnX3ftm5GJntJ+m5vsM8cUpTVxi2lCQHLaXRJLXHSIiwfCqg0p65Bx7DANqLYjuA2xqVt7iy6P6czCZSFLHa\/z26I5CjL3baLKxS60VEZl\/8WYesEYlQImCxalAahcsZE6B8BhUhqdya+SaLs1qoKKQLyt+LQdU9MOwitW3+IUF82kH6lQXqLTCQxwmsKQcimfiUo69tg4LHl2qJ4nMDsupetQi851DmkitClQVhb6qgRYqFhEBkf4QsxBCEDMsR+XaHQrqRSeljJskfHYlJDeVz7G4QL4NCeEDJPChalSaQsDUQ4keRDgMvFXBGApgltUd66x00RQNKtF3+BcN5BpXdi4fG9FB3AqEcglMWWHyFMVTdwVXclw7gTuqLPUCLbHBrPX45QByVYtjgURKfvtRjDXULZFJ+KRf8cagdRmvV2PhGLh7I648NFB6KfMzCBd9GSLsaECJuwBMcWh+JtV8p4eQufRf9wO\/5MA+xyfJIlEKPF77abFYWZJPbY3GJNlQJuqgkdWIwJfapkCGs7ULY2D+IPWRoI3seCauv6PowmvL0NVFmUJNll7+GLrAKyORHOM0n2swsbgz7KLZPJm0QIO0OENo6hpHuPeckI\/CD5PUEUxgURPK5r+7souxQNTKFaVCVZ7YrS23fw4iZDLhlehHA8QvrZAIQ5BIV0VdGLBs\/lSLMmhHg42HUvfJXVYhtMeeY07t2WgGavWLLNouH4NQgXfVQykGXIu8Ez4OZJXa\/mp0Vxlh6hAcp1H3CIbxdRGtxW7bPH1MFdO5KFQTT0EmiNeIStBWqaI0eGUlHjP4LZ+Lby8A+ZqBEaMTnanayKmSVb6j4zlrkxH9ZjMS6hn3gTLhZhq44KpiehYEmSDCnO5IpXBiiHCPfJ+k48QvItgctIilKAP63gGUgAS55hkketWIhxCBcLAGhpBjwXVdGYOryUpKLHEI1\/fRwQUfN951uSfzEbwQA7F5OBJK9stUU+0SiOUWMQjv85ADK1LqtmwJNZKSFyLpTIOtuID3oTPCTMceSBHS8Je3C3JtSGmEe9GHETjXDaQ03q1O3CBGbRCJbBj97obgwJbLjzARafh9g3mInUCzDzbrJUFN8G2IZYQpfoGFUkwsYa5d3ON+gJSepyVgMXTpKi\/HofwA6\/ae43ybDgbdHrVmQ448DauMl3CwFjHe0iVX8UwuYW6dir9c7AJYZBA85dkEkVCtCOsewSQaTDo8+oAGNH2mHantyXBz5k0TLKgItAqJ8RWvotbLCK5Rt7AjjoYoI4mQ8gQEw089h7b7yTVPlCWMjG+ekWZXGEGR6B8KyjawAAuhJVGfQui31GOb0egB3HnXOZlNadAeVQ9O3rMAIDLn94BOG1gAKWesYwG9WzsJzI5opMQOTounc+6XUO0kAEGMzju\/kCla\/pES46aGzezjPgGi6C6Q9WsaQmYzemSD13r6X0QlhgYyCKk+DLgEHqoWoxDGF5hMrG7RTi3dQEGxuMG0nsJnUlFOJbJwEOfzQJkzdxEBgEY5GNArqERRlDEOq\/qGTcTqETn6dELpNud\/ARv21oErVTK6Y2VC3dUmSKMHxNYJxDYdImBCFIGUPVgZn0JvsMavDraAIDzPq2vUhqwtb+MZU9REagCA\/hgwLL4HOZBuGxZkoZDKaudEy9aNwkWOpKpwrpW88I9N1DEcKy\/426AKTN9BiIJRAhLMKqYV+fu5IqXZ7zifDQui+LVAnWHlklzSQqZBDzFkIZXSpJEWbP5iIE0wkAquLmKYjUejAXXdjm06SC2IQY820N57I4KcJ103i6tpTF4vsHt5QeB4jP1n0NNqOWFdl5gbucYbtU5nPWqLxOhrCxQHXj4eSjuwQrUJbUNBa2h4jl3ZhsiTfm77knlzcjjVDFSrSiHdQL2F8MQPiOmtazeRgBBLVafMjOMh5syZmReQvBSqwIDyAnI5Doh\/ZAnlnJBFRHAXzqR9hrIo8mF\/agi7xORlJS7Ifau+KWPzd+hk0B3rk9k0UQEzPTW8QXVPNvhPsQVlr+J4M9Ic3Ck9ai38SSpAU7gnQyPyk\/jNBI\/QB4olxUJTvCB5bF2idPfQjfUcm3v8RtwjCTKYZsBWgLFk0xP9FTBkHMlwF4m1WXGY5yd7VZSaItBxWSzfm8DC\/CcSNIFStkJonfD0kG8mXeuW7PmODl21T3I+t9kTGnOrttKf2VnbslZITG3rCNB2FuHmxOMddF3D8CkXTMWy\/uCC0L8oFUW7JX+W6OKM0EEIN0JhWd4wT2RMaTQ+1BOGqiYKmJFfDOUsQs\/goh3gK62e26E1kshXzI8tDj8NdGUQg\/T6ECDi+LcvKYxZ0CJOdzXHo5YUowOcnAU6QoejbBQNjs3DUNboQbPRfuoWxvD3Gp5ZpWbUljPTP3kKQxixvoSpbbN18Wj4ZR8xqOsHBEvviW49YPCXdbNzR92qL5EEKLhIEIC\/Lmi8eNkTuv2IVwky29wJJyk2aLb5\/Grz5lmGrYDt06CTRGaR6GsNBHPXN\/8DVGMSfbSDtZVtun+UHqSIab6E2UAww\/UkfDQgjCTTbPp1DB3Y+gDInHyBamNXOT9d16XoLahAjCIE4nAXyuUPckOhDaU0i+3+TB4VXTCNaii01tJk3lAvuJBTV9+RL8Ae5JdCAc6rqxCslIBZOo\/apptNmUa0RYJ+avo6fuT44BuQScFIKa6yCEpR76Z15BDt+yJM\/Or5lGW1\/ozLK9\/\/aUUGP77LMQJgBDcV4KQHj8zNq2tUaHKhju7SQVLrGkEMuOgkl0\/fIE4d+iNx\/MJtCJ5aMfYfbiMmcInrBpfE\/3Ghrm5JHg9rRliWavQt3jqig48NpQwmefKrw\/sIGWfoTTmlu2aXRdhGm8JZtGnjNCKZ6vgeYsAcoROVKoxTMNYWc9z7EnovHw6\/kCl17OPBKbxN2OMEDAOp1OfQj9TgUh4NuLs12c9cgrB4eLRvNu1Gc\/a\/XLvUwP2wt\/Y+nCyj3dQMj8dAqOgHWpPP359edhpCGhiez4l4WwUPeHTRS66YqqfIuCqAG6XucTBVFtZL0m9VVMmvFrIuy+Ai\/OlRc7ISVIxU5TJS3UsxSGhfBHDzLYMFnJEU6TginuR+Zdd86cy1mQyEU\/RrYD\/YnavS11NilAwjr5mJneDyiMwo8H4drhgzsx0HnXm1RyvyftxaeVNw6MBfDO9WGVx4aFVmwGpT4+JLILgJWueyb+l4YsIVVb1pgIqw0UaB+woQkTyriXrCJ5zKaROINgTSZH6TWYt71Ui09DwnR57PLIxpspYPEVjasuhOtwGyo0O0Rb3msf9EKtOh2Px1\/Taq3inZk8y76g9\/iJDqyHhS\/Pt9BnudH54vdolB3gv2IQMu4csCS\/2bcqdS1+E0qlixNh9vSIoW9HrxEq\/+foJSCQS91do9Sijp383BIAaq4FqFdHZ8HRk+CuVKx92rDhJ8Kcc6f8vcGqejcCwE18zzoQVmuPRRTulkPHGYJk+gMvnDWDX0JG+c9gmywoMvLrZPAaUyyukr2zzR2lyPdSDkcWVpSLtwMFS9xhqIIH81V1IFyj8kOGPr2zWtVjqMPo\/nPA6Ag2m35eBad3UztT75VXG2BM1oZCWNR0dqJEoyvRFe8U8qX1HWF2GBW9iCJHlsznzmv+EOLYKOk4prRzh54bel0YIjginnGbXmQv7vlz8UV2ZxKC+W1wAkdYq1oWm5LSlFAEh76oHjxVaIrgzY30is+CJ5oAFs7IMRSxG5fau5E1rOGiJJqZfuYmxhzVazbCVs4KCtHuIN2OkAsiqp0Mq1JTNN7UA4\/ckGqCp\/ZsuuXfxwozvEHCnMfO1RuUsOSFaOARBpJ4NNxPejA\/yjVbNsK15VbguRwU+oiG6N6zK3T+rXcaPmyHx6rXYKkLCjl4OrTo5XHvcsZ4uemNa66C5uw28cohbaN6AAapNzMrBiwHgyHML9DcNBNXYnilaxgJSfLJ2RvzQjRMExYt6RGpFx7CvyIsQozpeQWaQzZS0fAInfImwmklawohoQvyKLVRT3\/i3paT6U44tGjkt5O\/BisdkDeUDgeyCAj3xnSBH9yZmgiHdhhsJ6tScX9J3FnGJLJLVC+\/NjJvExUsj4XkgTi6F2ER3oqsNKXbxtbQUENfMIQXK6JAbiybCxTofp0OJC99jJ8Wbm9f4r+ISvMUyousZbULICVRHKzp3UIA6\/tgILwvQzoTJ+2ZyMZCnQzTgARXMtyOLvX+GT+wx1BD9uo4osnOOE18SDurQJIqqiu37QALcZjnCMFkM7MkzrK8sbbHpTd1ckoR+8YuReacuZ5AqKHia9ROp1kQspwG+yZVLZUFqZ1FACjPer4KuCU33ABhSze32MlNZpLUSHEQ3yQpshrNR0Q4+dzFwpi3PbEyTs7YNHOyAAK0+6nh9UNKY5w2YYB+y+LkGtCeQ8gVWhzhBk1NzzgzNHN+waHEH99SWMw1jDAlP9WCzqdGb9bGQ2p2rdHMhIwOsX8wLgAdf+xUSvyKXL5W\/xXSJ0Tgyy04Y4qUWbQGEJ7s6LPisPAVBnKQNlOIeRW8NRv\/\/76OzdWXE8zA4t3exMR1RbrHWbcIHhXgHI7ws+7Nn3G87mPxLsXXpgSbLv7VUBVNr9Pnv+IFhE+o9wkIG5ag+UtSqGGPmlHMwJjQywmfWWpJBi3yn3+PMEMMW820u\/1FDn9CFNXqgHCYINbzPGFnhsRz29vJiTZLQ0B4eS6\/zCbD\/zHasgXkHDlz6gKCS5rj4qc2Tp0EjLPkc\/jzLEKNCUSyW4\/646+v+qI1\/KW+voLUYY56sq6YY4ivvX8LdnXrND8IyXsuRhL4+QeU0Y\/pMq69pMHrHXpfZY9B0+z0iMuGIo7ooeC6XtjVy27FnytUFxsS3QEuCZEWuuiZwhgF9W1IRsz8aYX2Vi07YzD33Rln1AsMtHHY5ZXx5oEOk67XG6JRM1NrPBRI5G9H38fRZf\/5k+0EKcT+9L7uSZT9zSazEdPLLwbhGdVrmU7lwe1mjBcJuhqUbalj5wqbfiL7KEHjp1x187DkBfHW6WTq+cdkt6+UKewNrWgLsafLylp21bNF0OPaDBTiOHPMPZiqm8xXR3ZIkJhOIsqbIyok7TKzTsSniqVw6F3C0VLhX2aEGo8htAsn9PJX\/3RdLneb0yJwr9Qwe+34jDklQsASzJXHrfX8vHxfj+p2pC62fggbsM7bYe+2mgy6kt2wCFT+KHNy1j1YpjbfWI8bOWNjt4IpV9OcWIi05cu01o26YUvnG4LmXh5kw5vO3bciRopfXMwNzwHWrMiaTIj8vzc7DYVW9HWmdxdtCr0MuG4k2\/1sto9LpzETRzxlmCBhf73s1zB6zZhqgSde3XO\/LHx975gqhmyKtdLxkPdGBWQsdbg4G0zsLA0wauaZoX0LhXzL8toosJDYaJxi7k0MW9NXkISFi8d151FmqzrIaB7kWcUd6tVZisC\/n4+V9Hgud2ffk1v7Y71b8lSOuzZqoDMgtFJ3yESUpDlmwQyxOGA5CmG7vxaZEX3\/7gIm7ngG9wctYcp3vU9ugCdfIYC1XRD3DhnONtSwaLHmvg08kiFsWTmDsjRju7NXll9MhbYY2YGNX2IuLV\/n3IzmkSNDzDPqGHH1K7hUadZfv47NGY\/bAY4mMgWEa2tjjfTeRPaqrFcQG1HhWxLj7DmTTx39h2wSXJ0OmKFmOlBM\/bqDpjl\/rASbPZLyYb3FEiIco9\/MBvVNhCNR\/IUpXMrGLg4JTlD14DCFypc\/RO2exYxmwWLKgrh2c\/xBFLI1F\/IzRXMZzjbbzNxah3gnizfwWybG1Ckwh4G9N1xkJ+IFbDMITrUBD8FG\/gcoJyumYZBPUvGWbNZVzyFcgCy1ETL2FIszSXrb87YFN9FdrBFMNr\/l1l5hoTkruCvUsr1BOWFnnWDfX2RsaZvoLIWkCK82QrxkexsSr3YjK9AXchJzyZQfbHK8sXiX6Qo3NSLfsASIY416K\/MVurZC4fqDxWSul5vDOrRVKsarwWzywfNcB7LcTbAFm3Eyo77xYCSOnUVY0kbqFyh8h7\/vre8gdwPd2k15DuEGEN7dNYVYjjVp364Jt0eczFg7uF9YuJupwCmU\/waKwy6agd9co4iFn\/texpOp\/BzGGBDOrZi+528pUubO9xeG4XJivJc1s+IKY+ou2HGBi0excHWoyekLAnKwHK4wh88VdrD7OAVHrk4cy+eedgmixjB0rvhevo4cKWWAz2kIpZAy4asVWH4DGv9B78l5I1etf\/YL2wyu2UFE8AoNGbnDtqd4FwEaEVxlIOgzeT2ntgwV+aB3L5nRox6wk2gduag2tBKEbVGbo6aeP2NbAJm53uxIC088qpSi7JiIt7AlRcq5XuZf6RURaF8+hl5lqTUYK+bmKNsxNKpnlvds9iNh+eHCe90bLvA1b4og7SyL3XVwcQh4wP8y9ULpFTH2oJSTwtdpKVj7achCiBWrTqj0n0Cu\/Zo\/jTbNDGaU5UyW5ME5iFWpXqlnOi\/aeqLBLXCyeUtdUmzMHUyriTBfCM4R\/kwXQNRom3XLWQVsyVNU62Rq00eKVYMgxmTVtA4CX5MC3QR26LApRSaNSWQ5kFWx+OHV4JqCprVMc\/GsAW8\/ZxOTFZ3n2q4c01W984DDhIW2xLIVtp5W6lu0aGb0nl0Y+Cxh\/IITjHoPrRnSFrtdsKT3rjoTDNj0DNo+7aPc7yik6EIdSJUHiwLJXp4I4A2JqrNWC1TVDjGEL2qjwu8ZsxERTc4TF9IRHYBSJOcBSFWHwwAmDUO4zj6WAR1MGj0\/cEIDp9Lx8YpHWmR9JLEwLEpWbiL7tJJbA8J6IWprJn1LE0zfH8GYP0YcUxNHiiK\/bVg4et5W1Te7L58A6pDlYnRC1AXb2SW\/w\/TPxQSPUx6\/WQEz71F0GKy+q\/y2bk9mEs\/Js+aQbT2xXIzPgE1gXmy3HN4GRVnWHtCWGqH+DLBQKo0THVYWBnD7cZt02TEZjNTZvm0dlYEv6MjyadDVHSrhmw+X43eXxcphzh\/oYJ1JUvRlwetc0ufsOp9jhvRluft9G55ZbNjypliUhmd9bV0eIt629zO2AcDqbAaSKj9Yp2CEotdj7wa\/g3KFamv5DLyM0a1LlmDi2EkuniQQ8GV2Rm5iyZEyhHss8xLGZLYakq2qBnebTEqKcQpn4FxeSMCpLKlJe1+d3mlw7gYtfRq5idWqYycf\/8ocHYwIvbLyyhe0kaBctl5GiwZfdP0N94QjW+glJy20pJYJGiO\/NN9y7rJijg5GhFwZi75CVRrhszMhLLpYFoiRrf94BkhCYpkYRo4wLER3FbfhnM9fBdDsG\/GO+S5wmZjRjNd4NFGPnbJlaOTq5wo+JBxg+zXGjhG1AIRsDmsWwj9PpqMF3crVn4IT7C2h374OoBmrAYRbJ8KX94nxkEJQzaq3gIU49ASrt2AacIB8P\/3JZxkdBwDhzoHwFT0FIwmf+DI06p62nqgwqAkGkBs2H\/vuI+2hXLc7mgjfHQhfEh2KfGqHL0MD4U\/JtVtOdio754W+9yZddp5W8UmERgr0uxHrthDm\/xqhUMr\/2AiBXx1Zu\/hXlaTbx6Rr6f794TmxZ2zamwgbJsK\/TkxmZbL3+sPsxeHnK1iVVJhEFr9iuv\/gy5JI\/bChiXDpQOgX3+kp6r3Yxtq9hhStnQ+krMhGAqt0NczQJMcwx5GRDeVB+AK3G9ymcIy0mXPUATPD7Y6EpdUAOuUl6PibvBsIedsvC+HzyeX4XV6FYsQHbrLZCLNrhweFhyf8ZOqqm4yGZi9HyA5plW4hGNneqLMeH12yjt2L5G1wkpGR0eZB+PSeHigh1kBHPQY2Fhc+c66eCqjaQU+0Co4hI0XBgzBwXzYdEdLrAsZi248RjIupuy8GOMPPZR9FUSDCVzxOIXQ4kw2M7r+Auv9FboSj0nO9tyKJ77CZCKsmwtcUeWQwvXCMPZdtqdDc58iDsLDw2qYvpCCErwu00\/m3LL11PxzqB6yof94eQzCprwwMu4lnlnoQPhz+cZCR90yF\/3Yzngd0f2DF3ycKfTX+rt6KMhv\/F2tLB8KfJzPWWMblcj5s3yazrvQGVpij3hUUcOfLhzA7j9u\/eLwhJumPx19LBZsI8Q\/8+lw6EGkzYDyMyA8TYdHE+yYhqVrNaZwIUasZWVqC6UdcumnECxEm0C2rjaeePwWQ5cIyy1Jk52XPBpNV++Nyz3AE\/VsJ6LmHSqeI1a\/R+UyWw7vcJXsv07d4nsg3q99efQyvZ2znB9\/\/OkbroL6JaK2H+t1EmbAO4c8ifH8ZwluRQZz8BlRws9zOfGDvS1RohaSSYdoG60iePNvSlEcxXoIQ2L7N2ycNrv4dObK4t6NzI0TzXJDWB53K9o9nc\/qsp2HF2l5BYM58zBjGmTeVBrS9vkXBCGF5+iZRIedvZjP48hweeavlcDh8PqXSIkLXBsahy0cnfTQK6yPMJpF60z1vYkiuik2B5fCaUYPk9jB5B0\/PB4aYCBDiCZprY3qF4VfF7sf9BgrJ6aG9oNlKdG20afQDHJSQfCP7Mb0jdu2M8O2YzLq1qNcX3I8OuZB9bzuq1+v93pa43G2250mvSbwPTHcTUXRsbDPH8BTezxtd9awDDM+nEruXaAZlhRGf1X9Xs6yDvVvdkcmV\/\/J2KzNvTmivdk+taXZGinEDSunhNC7nEtasYbpciar91hpG+Yie7Cg\/dPltZCZKcZ1277WheqFc7XRq\/rLLsj+vTiF47MsvKlXg+kYlb+FO6EJicriPBe2gTVRffbZGnXHFzSR2NXjrewKpeXFhVAjxdU0MoMQBx\/sJZ\/gXVSLPRkC5rSs5N0EnFZIsgaaytXkB+LMek\/llUvJeWBYJBXSOPt+C9cRMVrJp3zNp1kVty7JqmYztJ73kX1rdSXpoGnNGCQK\/yqsxIsnTejWSCv\/eCV53ks0fo7TZy6Apcj5A\/rOCeqlCKCRhs7bHKGW0HcTMMP6sIGbTpUjHxKdqUEJirlSolMuVz7guZ7m88b0gvi3Vxuk2TPAGlROc94TQMkHdpuO2hArLU71TLpT0HMrpn+Xpz5YI1CThPKqGsGWhfuHfYxpQEJbDRbVQyqGsrn9WGtPjlQjJT1jkxM\/s8j8r6Ny1ftpAmBEuMYm4Mz+YfeIragaq7ATv9+xbeO+RjIBHR8nOXWNn573OPs4wAZDxFbH3X3eAhkl4jSoJz87j5x8+u6PmeTr1JA09kA8YQxrJBR9XGXaGZeO18WHFVVGaom9nYhLKAXI0FCE6NtDoxS\/hKMjQ\/2CLBLzCTopzSPlZskkP+01KdiOT9NUG8YTnKJ\/qLFl26njpsbPywoks2WLUj8+VZwcSW4RauvOA2VGJT1fhegmD47d5OjsniMDgXod1Sgk9l7t\/P5f7daQ9ehJmNAnwrkE6Nxoh2hZeLm3+iEDKlLehOMIRooMe30+b018nGcYQGaJ84EnAsQj1JUq09Y2XfyAckxPeomzYqeMxCFFhm6TUUcHSYPn\/x874kEXLqJZcUQhRA+Y\/vtXQnp0M9WIVoOGEMgnD9M0jK1giEaKvH9SMCebjucy6hE9eqD0VVuvxMU8SZcekhIbTSAzRCFF9gQrREGlXUs\/fshx0jN1jhNmOBFA3vvkOJnk0qkdDiEGI+vVoiKT9JveIsBLj+6AkI4UOu7KszmaiJMUZjph8olZcQWAcQtRiEEOfhA8SO+BN00TxsdoaH0B2qJ10w1TYqeIg+pZsBlve8yXSI2SD1AwVN\/RbEs8kQ65v4sdL5pDlfhZ5rhrbE4p09DEuoZ9YgAkQokU\/tHycNXwXB1e6nEnivXmD9sw+PWN73tqIfLzJUcYEXuqol6BmNQFCVB+BrxHEMAopStJEliX5TbaL\/jBdfsdbjIEAAAXaSURBVNxuH8H7MYGv6orKsHvy81NBC0WlX5NtFg2ThDKTIETTYfCBKGQliithU5QGK7vVP9kOeM96eZbM5CP02r4dh\/f9A9IWxRtR6EV8i8gbAFMNzaPVRBqEqDEP6ueFd7zRElmq6r2HZ5vlgYgiKx73FYUp3n5qrFsArwKUpb3V5oQzxpKyJk6hy1AR+iibsBw3GULUBKd\/7LVb6MxotET3dh4KabPS\/327t+Kn7jkhsk7270v3AtXwTGbjwQakOLfvIaqzoqgWM2FTqIG7lMcJuqemQAhmeAGV3UuL9GSJn7BEJ9aJ3ewIEHlibJSu4EdHNzSSuYGegys21LHmZjAOg\/bwY88ym8xQO0wiO+lVlQbb4LWMCbyLknR7JylC4PoOKrnkDZEkcUMxJkvJUoZ0IIkTY6oVVh5\/PwuVfvDsf8a83\/clt3pTVVZCSshhdj+gGSZRmrEEHnkS1HqGzHOonrA\/bCqEaNFDqOfgVLxRQdBc5u2ipBorRlvKqt0BTQF7zu68yLhXEruDgSqqooUEn+EXs6EgJl3JKshlkyjv5izRQlx5FYYm\/EPokqKzQQqEqPauo6pjHeHMRGQGpCibjRPxhyjdMwTJ0Z5bzPXmmRLKFpn0bZ2nId0TCvHmPuV8EgWeTOI9sZ71nCwpyauo0yEErVhzHQGjkWX7ezZbWY0dGaZ7O1M8tE4AYYf5vK14HF8hcxgVI1mXDCT5XkkqwJSbwpMf\/nPBLFnQfeAMb+ZWXaYqhU+FEEy4H3aMz30aNVbaZk8rOYriPbaD16JkzAD+kGFOrKPVt+u1YaUDG0t3AAQMQJupR8aEeo6f4Af2DOMNtWcQovK5ifLbkF0N4FJHHivjNSMTmPVivOdY22lDHOH9aJ\/JHSFMor9pIxgBOipraTj0EYQoe+mzXmqBYtwladjR4LLRy4ApTsaA9yMcbS7dBXEpm8Sit+Mf78bXuyTfI38UIRg4oBp136F+GRMKmHHmz2DddKn1scyaMU4GFvH54ZLG0idOSWNMtOvOWBhlURk\/0HHjAYQo2xsBux4CWBVfQWbeWI8vIoB+MCUKn6wzZg1IzLxlY+qYtnjb3rWFy8V03VyjuwLKrXupJ\/BBhAhVlh1WE+LHSG6y+tY9rtdtMMfkvSX9V9xBJqs9J0k1s7TIXjQ1PvO\/QpuJKrzrzZcS3V7qtQhBoMKgZhf+TQjWR5pnlsNE7S37DG\/Y+sTGOvwPbJ2JpdrBahNn7WFvAtaOGByXUQjL9ygfHk36eBQhyvWGOttI8mJkepoBlJ0lHrAQpQGfciyAyrflC75b3qIa2ExUIXSRRfl5wrOHX4kQoc95K8cxunkL0\/lxtbq5NpnwO1gy3Q8ssIRQ1ZERD96TuTj3QSleDB8847RNdjjyqxHCcpz34fm+ZuqY+KIY5MKmSS6CIwjOh+DCcDmubh9BGXRwn3EW6aPtYwvwFQgZxiOYUNNDbMiC7FjmOdCb5G1kgANzSxRM30G+5HvP4XsaIWBc98AVLceeJYLpetItdgftBNnNPA+JJWtX1pcn8b0AIUKlFts40L+WNDpXE96aGbHx0X9QpjuW39c5txKdjfnnCFlP1vc+vEuhj58\/34fpxjoIlmZr+fWIgvfRSxACFUZzNuyFxVl4vEhaYbPHDufRp++jF3Qo5PQqhEDVzYWlBZU6Q\/95VonQUdKrgtzKdeabZzr3eeiFCNm5PpfLlC2dynhNkp+7xRvR4tOUBc8+x9tL9WHtHkQvRYjYCU2jXavGXvGz2r9i3uwqFKhxtLWALwt+Kpbe6J1HjZfCQ69HyOjza737qfKaAL3Sqfd22MyodBL7SJv36tUCh9Ts9M7r6ROmSyj9BUJG+erofdM3Xx8WZ7PS6HyN6wugen38Va3ZecEwCMft2RyRP6C\/Qsgo26wuLufdadGpFUpeyZ8rFWrT\/vC8vCyqzZeohRD6S4Qm6c1yZ9z\/WV82m818C\/+u181l\/dMfd8rNlA0kH6H\/A7pq9FUoBiKbAAAAAElFTkSuQmCC\")","efcdf8de":"import pandas as pd\n\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","1d2118ad":"train.head()","137bb378":"train.tail()","472e5091":"train.shape\n","cb518b9b":"train.info()","18f0f65b":"train.describe()","5b565abd":"train.isnull().sum()","4fb69c24":"test.isnull().sum()","e84684ce":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","2551bc8b":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","1e6ff505":"bar_chart('Sex')","98a55c6c":"bar_chart('Pclass')","921c87f2":"bar_chart('SibSp')","ed6e2412":"bar_chart('Parch')","c728d4f0":"bar_chart('Embarked')","c1fa6af8":"Image(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/t\/5090b249e4b047ba54dfd258\/1351660113175\/TItanic-Survival-Infographic.jpg?format=1500w\")","43d835fc":"train.head(10)","5f4630f8":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","bd713553":"test['Title'].value_counts()","543d0fb7":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","dcf83c2f":"train.head()","225d23c9":"test.head()","1c089988":"bar_chart('Title')","8d44a5fe":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","f3536b01":"train.head()","4112329b":"test.head()","a1df8d55":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","93a7a13c":"bar_chart('Sex')","7cd6463b":"train.head(100)","d8dc8997":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\n\n# ini nge fill berdasrakan median tiap tiap mr, mrs , miss\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","5e7b2217":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","67a128b4":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show() ","b13ae6be":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","0829d61a":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","47fe01c6":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","3c82c96d":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","0c5d26be":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","c6b31acb":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","58b374dc":"train.info()","4de97796":"test.info()","34e20eea":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","8fb87fdc":"train.head()","cb06320e":"bar_chart('Age')","ea7a9874":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","08d4d037":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","44edbd50":"train.head()","ada68aac":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","0baafa22":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","d1101f41":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()  ","6962ffc9":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","2fc8b276":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","08b7c0aa":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","29a3454e":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","fa7f600e":"train.head()","bc532de4":"train.Cabin.value_counts()","c937c73b":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","4cd5d575":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","0d0df917":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","e3199191":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","0b7cfec1":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","9fff3a10":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","c2442232":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","219604b7":"train.head()","9e19c975":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\n\n\ntrain = train.drop(['PassengerId'], axis=1)","d42ec2aa":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","35b10aeb":"test.shape","143f8b27":"test_data.shape","4245a071":"train_data.head()","fca0d92a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","62d2959f":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","cbd72326":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","a0b56b32":"# kNN Score\nround(np.mean(score)*100, 2)","c9b0568f":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","073574fb":"\nround(np.mean(score)*100, 2)","fef250fe":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","a8da3809":"# Random Forest Score\nround(np.mean(score)*100, 2)","e8d6a37a":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","27eb0a30":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","588e13b5":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","f8c36fd6":"round(np.mean(score)*100,2)","b5196e99":"train_data.","df969415":"train_data.shape","781c21e5":"test_data.shape","fd6001f3":"train_data.head()","a7c3ff47":"test_data.head()","e44ebc79":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop([\"Survived\",\"PassengerId\"], axis=1).copy()\nprediction = clf.predict(test_data)","1db04b81":"prediction","c6f8e766":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","bdef7c23":"submission = pd.read_csv('submission.csv')\nsubmission.head()","444308b3":"## Feature Enginering"}}