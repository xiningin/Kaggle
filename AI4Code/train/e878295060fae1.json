{"cell_type":{"bb2ecac7":"code","bebbf6d6":"code","f67c3ce8":"code","2a1c289f":"code","1ae2534c":"code","dd903784":"code","086c7f44":"code","b7588634":"code","cabd07b4":"code","3fbe7637":"markdown","f6bc63ee":"markdown","2973d389":"markdown"},"source":{"bb2ecac7":"%matplotlib inline\nimport os\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost as xgb","bebbf6d6":"plt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\npd.set_option('display.max_columns', 99)\nstart = dt.datetime.now()","f67c3ce8":"full = pd.read_csv('..\/input\/feature-extraction\/features_v3.csv.gz')\nfull.shape","2a1c289f":"TRAIN_SAMPLE_SIZE = 0.5","1ae2534c":"full['random'] = np.random.rand(len(full))\n\ntrain = full[full.IsTrain == 1]\ntest = full[full.IsTrain == 0]\n\ncolumn_stats = pd.concat([\n    pd.DataFrame(full.count()).rename(columns={0: 'cnt'}),\n    pd.DataFrame(full.nunique()).rename(columns={0: 'unique'}),\n], sort=True, axis=1)\ncolumn_stats.sort_values(by='unique')\n\ntrain_columns = list(column_stats[column_stats.cnt < 10 ** 6].index)\nprint(train_columns)\n\ntarget_columns = [\n    'TotalTimeStopped_p20',\n    'TotalTimeStopped_p50',\n    'TotalTimeStopped_p80',\n    'DistanceToFirstStop_p20',\n    'DistanceToFirstStop_p50',\n    'DistanceToFirstStop_p80',\n]\n\ndo_not_use = train_columns + ['IsTrain', 'Path', 'RowId', 'IntersectionId',\n                              'random', 'intersection_random', 'ValidationGroup']\n\nfeature_columns = [c for c in full.columns if c not in do_not_use]\nprint(len(feature_columns))\nprint(feature_columns)","dd903784":"fix = {\n    'lambda': 1., 'nthread': 4, 'booster': 'gbtree',\n    'silent': 1, 'eval_metric': 'rmse',\n    'objective': 'reg:squarederror'}\nconfig = dict(min_child_weight=20,\n              eta=0.05, colsample_bytree=0.6,\n              max_depth=20, subsample=0.8)\nconfig.update(fix)\nnround = 200","086c7f44":"total_mse = 0.0\nsubmission_parts = []\nfor i, target in enumerate(target_columns):\n    print(f'Training and predicting for target {target}')\n    train_idx = train.random < TRAIN_SAMPLE_SIZE\n    valid_idx = train.random >= TRAIN_SAMPLE_SIZE\n\n    Xtr = train[train_idx][feature_columns]\n    Xv = train[valid_idx][feature_columns]\n    ytr = train[train_idx][target].values\n    yv = train[valid_idx][target].values\n    print(Xtr.shape, ytr.shape, Xv.shape, yv.shape)\n\n    dtrain = xgb.DMatrix(Xtr, label=ytr)\n    dvalid = xgb.DMatrix(Xv, label=yv)\n\n    watchlist = [(dtrain, 'train'), (dvalid, 'valid')]\n    model = xgb.train(config, dtrain, nround, evals=watchlist,\n                      verbose_eval=50, early_stopping_rounds=50)\n\n    pv = model.predict(dvalid)\n    mse = np.mean((yv - pv) ** 2)\n    total_mse += mse \/ 6\n    print(target, 'rmse', np.sqrt(mse))\n\n    df = pd.DataFrame({\n        'TargetId': test.RowId.astype(str) + '_' + str(i),\n        'Target': model.predict(xgb.DMatrix(test[feature_columns]))})\n    submission_parts.append(df)","b7588634":"rmse = np.sqrt(total_mse)\nprint('Total rmse', rmse)\nsubmission = pd.concat(submission_parts, sort=True)\nsubmission.to_csv('submission.csv', index=False)","cabd07b4":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","3fbe7637":"### Set xgboost learning parameters","f6bc63ee":"### Train models for each target","2973d389":"### Collect train features and target columns"}}