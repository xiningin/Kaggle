{"cell_type":{"8299db09":"code","b808afcd":"code","dbf6cbce":"code","9e9cb6f0":"code","e0c46ed6":"code","12c1fba7":"code","2787fee5":"code","e5d8b4ab":"code","338b0cb3":"code","640a870c":"code","5d1d323b":"code","3b8b026e":"code","e1d6dfae":"code","07e4b430":"code","64bc5bd6":"code","7ee92cb8":"code","56032f31":"code","772c8391":"code","419ea1b4":"code","5b5c8a5a":"code","d90a42e6":"code","8b9fca3f":"markdown","f462f192":"markdown","3b8a4eb9":"markdown","9b6151f7":"markdown","e37443a3":"markdown","9719f41c":"markdown","79f32c87":"markdown","cdf7b1f4":"markdown","b625bde4":"markdown","35be90ba":"markdown","655f168a":"markdown","a15ed1b1":"markdown","2f276df3":"markdown","7d434a3f":"markdown"},"source":{"8299db09":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cartopy.crs as ccrs\nimport cartopy.feature as cf\n","b808afcd":"#load data\ndata = pd.read_csv('..\/input\/aviation-accident-database-synopses\/AviationData.csv',  engine = 'python')\ndata.head(10)","dbf6cbce":"# no impute, visualize available data\n\n#SOME IDEAS:\n# event ID dupes remove\n# accident number remove\n# feature engineer event date\n# feature engineer LOC (state?) (show map?)\n# Lat Long\n# injury severity pretty straightforward          \n# format 'Make', some CESSNA, some Cessna*\n# model related to format, check most frequent values\n# drop sched 70k unknown\n# drop air carrier 80k unkown\n# search report status meaning","9e9cb6f0":"#feature engineer 'Make'\n#data['Make'].str.lower().capitalize()\ndata['Make'] = data['Make'].apply(lambda x: x.lower().capitalize() if type(x) == str else x)","e0c46ed6":"#feature engineer 'Injury.Severity', all fatal accidents into one feature regardless of count,  convert unavailable values to NaN\ndata['Injury.Severity']= data['Injury.Severity'].apply(lambda x: x[:5] if  '(' in x else x)\ndata['Injury.Severity'].loc[data['Injury.Severity'] == 'Unavailable'] = np.nan","12c1fba7":"#internal relationship visualization ideas:\n\n# -date (monthly\/day  of week\/yearly histogram) lineplot\n# -location (definitely a heat map on a literal map of sorts\/ country) lineplot\n# -heatmap worldmap\n# -heatmap available lat longs\n# -histogram injury severity\n# -histo aircraft damage\n# -histo aircraft cat  available\n# -histo make get top 10 \n# -histo amateur built\n# -histo number  of engines\n# -histo engine type\n# -histo  far desc\n# -histo purpose\n# -histo weather condition\n# -histo broad phase of flight\n\n\n#list of histograms\nhisto_features = ['Injury.Severity','Aircraft.Damage','Aircraft.Category', 'Make','Amateur.Built','Number.of.Engines','Engine.Type','FAR.Description','Purpose.of.Flight','Weather.Condition','Broad.Phase.of.Flight']\nhisto_obj =[x  for x in histo_features if data[x].dtypes == 'object']\nhisto_num =[x  for x in histo_features if data[x].dtypes != 'object']","2787fee5":"#histograms\nfig  = plt.figure(figsize = (12,34))\nfor x in  histo_features:\n    fig.add_subplot(6,2, histo_features.index(x)+1)\n    if len(data[x].value_counts()) >10:\n        sns.countplot(x = data[x].dropna(), \n                      data  =  data, \n                      order = data[x].value_counts()[0:9].index).set(xlabel= x, \n                                                                     ylabel = \"Accident Count 1940 - 2020\")\n        plt.xticks(rotation=90)\n    else:\n        sns.countplot(x = data[x].dropna(), \n                      data  =  data).set(xlabel= x, \n                                         ylabel = \"Accident Count 1940 - 2020\")\n        plt.xticks(rotation=90)\nplt.tight_layout()\nplt.show()","e5d8b4ab":"#create df of existing coordinates\ncoordinatesdf =  data[['Latitude', 'Longitude','Injury.Severity']]\ncoordinatesdf = coordinatesdf.dropna(axis = 0, \n                                     subset = ['Longitude','Latitude'])","338b0cb3":"#lat long projection of aircraft  crash\n'''fig = plt.figure(figsize =  (30,19))\nax = fig.add_subplot(1,1,1, \n                     projection = ccrs.PlateCarree())\nax.add_feature(cf.LAND)\nax.add_feature(cf.OCEAN)\nax.add_feature(cf.COASTLINE)\nax.add_feature(cf.BORDERS, linestyle=':')\nax.add_feature(cf.LAKES, alpha=0.5)\nax.add_feature(cf.RIVERS)\nax.set_title(\"Aircraft Accidents\", fontsize =  50)\nsns.scatterplot(x = 'Longitude', y  = 'Latitude', data= coordinatesdf,\n                hue =  'Injury.Severity',\n                alpha  =  0.5,\n                marker  = 'o',\n                s = 100,\n                color ='red',\n                transform=ccrs.PlateCarree())\nplt.show()\n'''","640a870c":"#feature engineer Dates  for visualization\ndata['parsedate'] = pd.to_datetime(data['Event.Date'])\ndata['Day.Of.Week'] = data['parsedate'].dt.day_name()\ndata['Month.Name'] = data['parsedate'].dt.month_name()\ndata['year'] = data['Event.Date'].str[0:4].astype(int)","5d1d323b":"#year histogram\nsns.distplot(a =  data['year'], \n             bins  = 72,\n             kde= True)\nplt.xticks(rotation = 90)","3b8b026e":"fig = plt.figure(figsize = (18,7))\n\n\n\n\nfig.add_subplot(1,2,1)\nsns.countplot(x = 'Month.Name', \n              data = data, \n              order  =  ['January', 'February','March', 'April','May',  \n                         'June','July', 'August', 'September', 'October','November','December']).set(xlabel= 'Month Name', \n                                                                                                     ylabel = \"Accident Count 1940 - 2020\")\nplt.xticks(rotation = 90)\n\nfig.add_subplot(1,2,2)\nsns.countplot(x = 'Month.Name', \n              data = data,  \n              order = data['Month.Name'].value_counts()[:].index).set(xlabel= 'Month Name (Greatest  to Least)', \n                                                                      ylabel = \"Accident Count 1940 - 2020\")\nplt.xticks(rotation = 90)","e1d6dfae":"sns.countplot(x = 'Day.Of.Week', data = data, \n              order  =  ['Sunday', 'Monday','Tuesday', 'Wednesday','Thursday','Friday','Saturday']).set(xlabel = 'Day of Week',\n                                                                                                        ylabel = 'Accident Count 1940 - 2020')\nplt.xticks(rotation = 90)","07e4b430":"#relationship between features:\n\n# -amateur built\/broad phase of flight\n# -aircraft damage\/phase of flight (mirror bar graph?) modify yticks maybe*\n# -weather condition\/phase of flight (mirror bar graph?)*\n# -(make\/4 types of engine) count of accidents\n# - injury severity(AVERAGE fatalities)\/engine type bar graph","64bc5bd6":"# amateur built\/broad phase of flight\nfig = plt.figure(figsize = (18,7))\nfig.add_subplot(1,2,1)\ndata[['Amateur.Built','Broad.Phase.of.Flight']]\nsns.countplot(x = 'Broad.Phase.of.Flight', \n              hue  = 'Amateur.Built', \n              data =data[~data['Broad.Phase.of.Flight'].isin(['UNKNOWN', 'OTHER'])].dropna(subset = ['Broad.Phase.of.Flight'])).set(xlabel= 'Broad Phase of Flight', \n                                                                                                                                    ylabel = \"Accident Count 1940 - 2020\")\nplt.legend(title='Amateur Built', loc='upper right', labels=['No', 'Yes'])\nplt.xticks(rotation  =  90)\nfig.add_subplot(1,2,2)\nsns.countplot(x = data['Amateur.Built'].dropna(), \n                      data  =  data, \n                      order = data['Amateur.Built'].value_counts()[0:9].index).set(xlabel= 'Amateur Built', \n                                                                                   ylabel = \"Accident Count 1940 - 2020\")","7ee92cb8":"# aircraft damage\/phase of flight\nfig = plt.figure(figsize = (18,7))\nfig.add_subplot(1,2,1)\nsns.countplot(x = 'Broad.Phase.of.Flight', \n              hue  = 'Aircraft.Damage', \n              data =data[~data['Broad.Phase.of.Flight'].isin(['UNKNOWN', 'OTHER'])].dropna(subset = ['Broad.Phase.of.Flight'])).set(xlabel= 'Broad Phase of Flight', \n                                                                                                                                    ylabel = \"Accident Count 1940 - 2020\")\nplt.xticks(rotation  =  90)\nplt.legend(title='Aircraft Damage', loc='upper right', labels=['Substantial', 'Destroyed','Minor'])\nfig.add_subplot(1,2,2)\nsns.countplot(x = data['Aircraft.Damage'].dropna(), \n                      data  =  data, \n                      order = data['Aircraft.Damage'].value_counts()[0:9].index).set(xlabel= 'Aircraft Damage', \n                                                                                   ylabel = \"Accident Count 1940 - 2020\")\n\n","56032f31":"# weather condition\/phase of flight (mirror bar graph?)\nfig = plt.figure(figsize = (18,7))\nfig.add_subplot(1,2,1)\nsns.countplot(x = 'Broad.Phase.of.Flight', \n              hue  = 'Weather.Condition', \n              data =data[~data['Broad.Phase.of.Flight'].isin(['UNKNOWN', 'OTHER'])].dropna(subset = ['Broad.Phase.of.Flight'])).set(xlabel= 'Broad Phase of Flight', \n                                                                                                                                    ylabel = \"Accident Count 1940 - 2020\") \nplt.xticks(rotation  =  90)\nplt.legend(title='Weather Condition')\nfig.add_subplot(1,2,2)\nsns.countplot(x = data['Weather.Condition'].dropna(), \n                      data  =  data, \n                      order = data['Weather.Condition'].value_counts()[0:9].index).set(xlabel= 'Weather Condition', \n                                                                                       ylabel = \"Accident Count 1940 - 2020\")","772c8391":"sns.violinplot(x = 'Weather.Condition', \n               y = 'year',\n               hue = 'Injury.Severity',\n               split  =  True,\n               data = data[data['Injury.Severity'] != 'Incident'].dropna(subset  = ['Weather.Condition','year','Injury.Severity'], axis = 0))","419ea1b4":"# (make\/4 types of engine) count of accidents\nfig = plt.figure(figsize = (18,7))\n\nfig.add_subplot(1,2,1)\nsns.countplot(x = 'Make', \n              data  =  data.dropna(subset = ['Number.of.Engines']), \n              hue = 'Number.of.Engines',\n              order = data['Make'].value_counts()[0:9].index)\nplt.xticks(rotation  =  90)\nplt.xlabel('Make')\nplt.ylabel(\"Accident Count 1940 - 2020\")\nplt.legend(title='Number of Engines',   loc = 'upper right')\n\nfig.add_subplot(1,2,2)\nsns.distplot(a = data['Number.of.Engines'].dropna(), kde=False).set(ylabel = \"Accident Count 1940 - 2020\")","5b5c8a5a":"# number of engines\/ engine  type\nviolindf = data[data['Engine.Type'].isin(['Reciprocating','Turbo Prop', 'Turbo Shaft', 'Turbo Fan','Turbo Jet'])]\n\nfig = plt.figure(figsize = (20,20))\n\nfig.add_subplot(2,1,1)\nsns.countplot(x = 'Engine.Type', \n              data  =  data.dropna(subset = ['Number.of.Engines']), \n              hue = 'Number.of.Engines')\nplt.xticks(rotation  =  90)\nplt.xlabel('Engine Type')\nplt.ylabel('Accident Count 1940 - 2020')\nplt.legend(title='Number of Engines',   loc = 'upper right')\n\nfig.add_subplot(2,1,2)\nsns.countplot(x = 'Engine.Type',\n              hue = data['Aircraft.Category'].apply(lambda x: x if x in ['Airplane', 'Helicopter', 'Glider'] else np.nan), #for simplicity\n              data  =  data.dropna(subset = ['Aircraft.Category']))\nplt.xticks(rotation  =  90)\nplt.xlabel('Engine Type')\nplt.ylabel('Accident Count 1940 - 2020')\nplt.legend(title='Aircraft Category',   loc = 'upper right')","d90a42e6":"# injury severity(Total.Fatal.Injuries)\/engine type violin plot\n# For engine type, I will be using the 5 main types of engine as it is  more  convenient, and it makes up 77 921 (97.4%) of non-null data.\n\nviolindf = data[data['Engine.Type'].isin(['Reciprocating','Turbo Prop', 'Turbo Shaft', 'Turbo Fan','Turbo Jet'])]\nfig = plt.figure(figsize = (20,12))\nfig.add_subplot(1,2,2)\nsns.violinplot(x = 'Engine.Type', \n               y = 'Total.Fatal.Injuries',\n               data = violindf)\nplt.grid(b =True,  axis  = 'y',   linewidth = 1)\nfig.add_subplot(1,2,1)\nsns.regplot(x = 'Number.of.Engines', \n               y = 'Total.Fatal.Injuries',\n               data = violindf)","8b9fca3f":"These are my preliminary ideas. I tried mirrored bar graphs as well but they didnt turn out to my liking. Kept it simple with just good ol' fashioned bars.","f462f192":"Majority of our data has an accident occuring at VMC (Visual Meteorological Conditions) which is weird, considering VMC means the weather is good enough for visual flight rules (without using instruments).\n\nLets check out a violinplot of VMC and IMC weather conditions vs year with Injury Severity as Hue to inspect if:\n1. Weather conditions accident is related to year of occurence.\n2. If Fatal\/Non fatal accident counts fluctuate depending on weather conditions and year.","3b8a4eb9":"It's interesting to me how much over the water accidents are non fatal, but then again most of the accidents only  sustained substantial damage.\nUnfortunately the dataset does not discuss the nature of each accident, would  be cool to  explore it.\nMajority of the data is concentrated in the USA!","9b6151f7":"Will add more visualizations of ideas I come up with! Thank you for reading","e37443a3":"1. For our question 1, we can see a decrease in accident occurence  as  time goes by, evident in our previous histogram as well.\n2. Fatal\/ Non Fatal occurences are almost mirrored, although the non fatal incidents in IMC conditions are noticeably thinner than the fatal incidents.\n3. We can also notice a more prominent dip in the number of accidents for IMC weather conditions, I assume, because only Instrument Rated Aircraft are allowed to take on IMC weather.","9719f41c":"Cessna single engine planes (usually Reciprocating engines, and 1-4 seater) are responsible for 30% of all the accidents","79f32c87":"Peaking at weekends but a rather normal  distribution.","cdf7b1f4":"I wish we had a number of seats feature or some sort to show the correlation of population and total fatal  injuries.\nAlas, we'll  make do with fatal  injuries - number  of engines. Surprisingly low correlation given that more engines is usually supplied to larger aircraft.\n\n1. The scatterplot pinpoints the outliers more clearly than the violinplot.  Although we can see the distribution more clearly at the latter.\n2. Reciprocating engines are usually small planes  (cessnas)  with 1 engine, which might cause smaller fatalities.\n3. Turboprops are usually on medium sized carriers (20-80 people) with mostly 2 engines as seen from the histogram above.\n4. Turboshafts usually  have a single engine as most  turboshafts are helicopters as seen from the histogram above.\n5. Most turbofan and turbojets have 2 or more engines, and are used in the airline industry. More passengers = more injuries.\n6. The outlier values for double and quadruple engines are very high! These planes commonly has a lot of passengers, which might cause the high outlier values.","b625bde4":"1. The month with maximum accident occurence (July) is twice the month with minimum occurence (January).\n2. Top 3 months and bottom 3 months are consecutive to each other. Seasonal pattern? \n","35be90ba":"Interesting, but take note: correlation != causation. Obvious sample bias in here as most planes are not amateur built anymore.","655f168a":"1. Landing is the mode, the most common occurence of accidents, mostly substantial damage.\n2. Maneuvering and Cruising phases of flight has a *relatively* larger portion of destroyed damages than other phases of flight.","a15ed1b1":"**The features arent downloading! Couldnt bother making it work XD. Feel free to try the code in your personal notebook! Here's an  image of the supposed output instead:**","2f276df3":"![cartopy.jpg](attachment:cartopy.jpg)","7d434a3f":"Interesting downward trend as aviation evolves through time."}}