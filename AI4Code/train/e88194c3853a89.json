{"cell_type":{"cafcbc89":"code","bb45c51e":"code","76d20812":"code","3fd49c9d":"code","886fd1a3":"code","c7d35dd9":"code","3877c403":"code","d5a30f75":"code","cd611edc":"code","b2757cd8":"code","75c33a01":"code","8ad25938":"code","fadb473d":"code","8ce9cfbe":"code","0aed4f62":"code","b921ffd5":"code","615c075a":"code","99f41acf":"code","97869801":"code","0d89a651":"code","8e1f6f05":"code","fdd67870":"code","4fd9b81b":"code","8493f191":"code","14625a59":"markdown","fcbde450":"markdown","bedb0cde":"markdown","b73bbbed":"markdown","7d7adeeb":"markdown","9ba35153":"markdown","97dfd1fa":"markdown","c570f530":"markdown"},"source":{"cafcbc89":"import fastai\nfrom fastai.vision import *\nfastai.__version__","bb45c51e":"BATCH  = 126\nSIZE   = 250\npath = Path('..\/input\/imet-2019-fgvc6\/') # iMet data path","76d20812":"!ls ..\/input\/resnet50\/","3fd49c9d":"# Making pretrained weights work without needing to find the default filename\nfrom torch.utils import model_zoo\nPath('models').mkdir(exist_ok=True)\n!cp '..\/input\/resnet50\/resnet50.pth' 'models\/'\ndef load_url(*args, **kwargs):\n    model_dir = Path('models')\n    filename  = 'resnet50.pth'\n    if not (model_dir\/filename).is_file(): raise FileNotFoundError\n    return torch.load(model_dir\/filename)\nmodel_zoo.load_url = load_url","886fd1a3":"# Load train dataframe\ntrain_df = pd.read_csv(path\/'train.csv')\ntrain_df.head()","c7d35dd9":"# Load labels dataframe\nlabels_df = pd.read_csv(path\/'labels.csv')\nlabels_df.head()","3877c403":"# Load sample submission\ntest_df = pd.read_csv(path\/'sample_submission.csv')\ntest_df.head()","d5a30f75":"tfms = get_transforms(do_flip=True, flip_vert=False, max_rotate=0.10, max_zoom=1.5, max_warp=0.2, max_lighting=0.2,\n                     xtra_tfms=[(symmetric_warp(magnitude=(-0,0), p=0)),])","cd611edc":"train, test = [ImageList.from_df(df, path=path, cols='id', folder=folder, suffix='.png') \n               for df, folder in zip([train_df, test_df], ['train', 'test'])]\ndata = (train.split_by_rand_pct(0.1, seed=42)\n        .label_from_df(cols='attribute_ids', label_delim=' ')\n        .add_test(test)\n        .transform(tfms, size=SIZE, resize_method=ResizeMethod.PAD, padding_mode='border',)\n        .databunch(path=Path('.'), bs=BATCH).normalize(imagenet_stats))","b2757cd8":"data","75c33a01":"data.show_batch()","8ad25938":"# Source: https:\/\/www.kaggle.com\/c\/human-protein-atlas-image-classification\/discussion\/78109\nclass FocalLoss(nn.Module):\n    def __init__(self, gamma=2):\n        super().__init__()\n        self.gamma = gamma\n\n    def forward(self, logit, target):\n        target = target.float()\n        max_val = (-logit).clamp(min=0)\n        loss = logit - logit * target + max_val + \\\n               ((-max_val).exp() + (-logit - max_val).exp()).log()\n\n        invprobs = F.logsigmoid(-logit * (target * 2.0 - 1.0))\n        loss = (invprobs * self.gamma).exp() * loss\n        if len(loss.size())==2:\n            loss = loss.sum(dim=1)\n        return loss.mean()","fadb473d":"learn = cnn_learner(data, base_arch=models.resnet50, loss_func=FocalLoss(), metrics=fbeta)","8ce9cfbe":"# Find a good learning rate\nlearn.lr_find()\nlearn.recorder.plot()","0aed4f62":"learn.unfreeze()\nlearn.fit_one_cycle(22, slice(1e-5,1e-2))\nlearn.freeze()\nlearn.save('stage-1', return_path=True)","b921ffd5":"learn.recorder.plot()\nlearn.recorder.plot_losses()\nlearn.recorder.plot_metrics()","615c075a":"learn.export()","99f41acf":"def find_best_fixed_threshold(preds, targs, do_plot=True):\n    score = []\n    thrs = np.arange(0, 0.5, 0.01)\n    for thr in progress_bar(thrs):\n        score.append(fbeta(valid_preds[0],valid_preds[1], thresh=thr))\n    score = np.array(score)\n    pm = score.argmax()\n    best_thr, best_score = thrs[pm], score[pm].item()\n    print(f'thr={best_thr:.3f}', f'F2={best_score:.3f}')\n    if do_plot:\n        plt.plot(thrs, score)\n        plt.vlines(x=best_thr, ymin=score.min(), ymax=score.max())\n        plt.text(best_thr+0.03, best_score-0.01, f'$F_{2}=${best_score:.3f}', fontsize=14);\n        plt.show()\n    return best_thr\n\ni2c = np.array([[i, c] for c, i in learn.data.train_ds.y.c2i.items()]).astype(int) # indices to class number correspondence\n\ndef join_preds(preds, thr):\n    return [' '.join(i2c[np.where(t==1)[0],1].astype(str)) for t in (preds[0].sigmoid()>thr).long()]","97869801":"# Validation predictions\nvalid_preds = learn.get_preds(DatasetType.Valid)\nbest_thr = find_best_fixed_threshold(*valid_preds)","0d89a651":"# Test predictions\n#test_preds = learn.get_preds(DatasetType.Test)\n#test_df.attribute_ids = join_preds(test_preds, best_thr)\n#test_df.head()","8e1f6f05":"#test_df.to_csv('submission.csv', index=False)","fdd67870":"# Validation predictions with TTA\n#valid_preds = learn.TTA(ds_type=DatasetType.Valid)\n#best_thr = find_best_fixed_threshold(*valid_preds)","4fd9b81b":"# Test predictions with TTA\ntest_preds = learn.TTA(ds_type=DatasetType.Test)\ntest_df.attribute_ids = join_preds(test_preds, best_thr)\ntest_df.head()","8493f191":"test_df.to_csv('submission.csv', index=False) ","14625a59":"# Train the model","fcbde450":"# Setup","bedb0cde":"## TTA","b73bbbed":"# Create data object using datablock API","7d7adeeb":"# Create learner with pretrenet model and FocalLoss\nFor problems with high class imbalance Focal Loss is usually a better choice than the usual Cross Entropy Loss.","9ba35153":"# iMet Collection 2019 - FGVC6\n**Simple baseline for iMet Collection 2019 competition using fastai v1**","97dfd1fa":"# Data","c570f530":"# Get predictions"}}