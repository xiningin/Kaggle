{"cell_type":{"c6626e01":"code","b5b32600":"code","a5496c48":"code","5112e198":"code","d9a5486b":"code","b25cd1cf":"code","d90b28e2":"code","7aceba7f":"code","c41cb9a2":"code","97af1275":"code","7ac59a26":"code","cfc70ca3":"code","e4db038c":"code","ff038df8":"code","1b5751e4":"code","1f81c3da":"code","a8af7aec":"code","03fb3316":"code","162e37eb":"code","636b6b5b":"code","9241e4b8":"code","c5a8fc81":"code","3091efd3":"code","15853eea":"code","a6d18c43":"code","0b05afe7":"code","ffc4e665":"code","7c8c8be1":"code","c4614dce":"code","04f46a62":"code","34da26f1":"code","f7d0c9ed":"code","2cc594b6":"code","a573905b":"code","539a042f":"code","235d1069":"code","154ef4e1":"code","8c644001":"code","4ea43e4c":"code","ab1481cb":"code","6e7fa052":"code","b1041460":"code","8e4769ce":"code","bb0540f7":"code","49735894":"code","482dcf89":"code","d6607e45":"code","9613067a":"code","fcee6b3c":"code","a6732611":"code","2af24ebd":"code","48423d3a":"code","fd992534":"code","9b2ec991":"code","eeb42066":"code","5387e979":"code","5205163d":"code","2a7b6429":"code","ab4eb699":"code","8b0a8087":"code","f20608b0":"code","22df4ed4":"code","ce28eaba":"code","b8535acc":"code","9b399756":"code","eef869f4":"code","386f6461":"code","2f519581":"code","d0ade6ec":"code","18fedbbb":"code","71fb4cd9":"code","0973a757":"code","5b0a2925":"code","875f4e22":"code","db870a9e":"code","c83bb510":"code","48507fd3":"code","3a5cf909":"code","f2058a5b":"code","217c8853":"code","a3c8b782":"code","f4347650":"code","7dde3b2e":"code","8dbf1ff1":"code","9ebb5906":"markdown","c5631e04":"markdown","7f985641":"markdown","bc87b7b8":"markdown","aa031e90":"markdown","2b207a1c":"markdown","0e41b34a":"markdown","3ef8dc8d":"markdown","51de7b13":"markdown","cac95c45":"markdown","8ae32a38":"markdown","4b24475e":"markdown","1cb82d63":"markdown","1c0189c2":"markdown","7251c5c7":"markdown"},"source":{"c6626e01":"!pip install scikit-learn --upgrade --quiet","b5b32600":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nplt.style.use('dark_background')\n","a5496c48":"train_df=pd.read_csv(\"..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv\")\ntrain_df","5112e198":"test_df=pd.read_csv(\"..\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv\")\ntest_df","d9a5486b":"train_df.columns","b25cd1cf":"train_df.info()","d90b28e2":"train_df.isnull().sum()","7aceba7f":"train_df.describe()","c41cb9a2":"plt.figure(figsize=(20,14))\nsns.barplot(data=train_df,x='Married\/Single',y='Income');\nplt.style.use('ggplot')\nplt.xlabel('Married\/Single',fontsize=25);\nplt.ylabel('Income',fontsize=25);\nplt.tick_params(which='major',axis='x',labelsize=15)\nplt.tick_params(which='major',axis='y',labelsize=15)","97af1275":"plt.figure(figsize=(20,12))\nsns.pairplot(train_df);","7ac59a26":"plt.figure(figsize=(20,12))\nsns.barplot(data=train_df,x='Experience',y='Income')\nplt.style.use('ggplot')\nplt.xlabel('Experience',fontsize=25);\nplt.ylabel('Income',fontsize=25);\nplt.tick_params(which='major',axis='x',labelsize=15)\nplt.tick_params(which='major',axis='y',labelsize=15)","cfc70ca3":"plt.figure(figsize=(20,12))\nsns.pointplot(data=train_df,x='Age',y='Income');\nplt.xlabel('Age',fontsize=25);\nplt.ylabel('Income',fontsize=25);\nplt.tick_params(which='major',axis='x',labelsize=15)\nplt.tick_params(which='major',axis='y',labelsize=15)\n","e4db038c":"plt.figure(figsize=(20,12))\nsns.pointplot(data=train_df,x='Profession',y='Income',color='green');\nplt.tick_params(which='major',rotation=90,axis='x',labelsize=15)\nplt.tick_params(which='major',axis='y',labelsize=15)\nplt.xlabel('Profession',fontsize=25);\nplt.ylabel('Income',fontsize=25);","ff038df8":"plt.figure(figsize=(20,12))\nsns.barplot(data=train_df,x='Profession',y='Experience');\nplt.tick_params(which='major',rotation=90,axis='x',labelsize=20)\nplt.tick_params(which='major',axis='y',labelsize=15)\nplt.xlabel('Profession',fontsize=25);\nplt.ylabel('Experience',fontsize=25);","1b5751e4":"plt.figure(figsize=(20,12))\nsns.pointplot(data=train_df,x='Age',y='Experience');\nplt.xlabel('Age',fontsize=25);\nplt.ylabel('Experience',fontsize=25);\nplt.tick_params(which='major',axis='x',labelsize=15)\nplt.tick_params(which='major',axis='y',labelsize=15)\n","1f81c3da":"## input columns\ninput_cols=train_df.columns[1:-1]\nlist((input_cols))","a8af7aec":"## target Columns\ntarget_col=\"Risk_Flag\"\nprint(target_col)","03fb3316":"## Input df\ninput_df=train_df[input_cols].copy()\ninput_df","162e37eb":"## target df\ntarget=train_df[target_col].copy()\ntarget","636b6b5b":"train_df[\"CITY\"].nunique()","9241e4b8":"train_df[\"Profession\"].nunique()","c5a8fc81":"train_df.STATE.nunique()","3091efd3":"input_df=input_df.drop(columns=['CITY','STATE'],axis=1)\ninput_df","15853eea":"test_df=test_df.drop(columns=['ID'],axis=1)\ntest_df","a6d18c43":"target","0b05afe7":"input_df.info()","ffc4e665":"numeric_cols=input_df.select_dtypes(include=['int64']).columns.tolist()\nnumeric_cols","7c8c8be1":"categorical_cols=input_df.select_dtypes('object').columns.tolist()\ncategorical_cols","c4614dce":"input_df['House_Ownership'].unique()","04f46a62":"input_df['Car_Ownership'].unique()","34da26f1":"input_df['Married\/Single'].unique()","f7d0c9ed":"from sklearn.preprocessing import MinMaxScaler","2cc594b6":"scaler=MinMaxScaler()","a573905b":"scaler.fit(input_df[numeric_cols])","539a042f":"input_df[numeric_cols]=scaler.transform(input_df[numeric_cols])","235d1069":"input_df[numeric_cols].describe()","154ef4e1":"input_df[categorical_cols]","8c644001":"from sklearn.preprocessing import OneHotEncoder","4ea43e4c":"encoder=OneHotEncoder(sparse=False, handle_unknown='ignore')","ab1481cb":"encoder.fit(input_df[categorical_cols])","6e7fa052":"encoded_cols=list(encoder.get_feature_names(categorical_cols))\nlen(encoded_cols)","b1041460":"input_df[encoded_cols]=encoder.transform(input_df[categorical_cols])","8e4769ce":"input_df[encoded_cols]","bb0540f7":"input_df","49735894":"input_df.shape","482dcf89":"from sklearn.model_selection import train_test_split","d6607e45":"train_inputs,val_inputs,train_target,val_target=train_test_split(input_df[numeric_cols+encoded_cols],\n                                                                       target,\n                                                                     test_size=0.25,\n                                                                       random_state=20)","9613067a":"train_inputs.shape","fcee6b3c":"val_inputs","a6732611":"train_target.shape","2af24ebd":"val_target.shape","48423d3a":"test_df","fd992534":"from sklearn.linear_model import LogisticRegression","9b2ec991":"model=LogisticRegression(solver='liblinear',random_state=25,max_iter=150)","eeb42066":"model.fit(train_inputs[numeric_cols+encoded_cols],train_target)","5387e979":"model.coef_.tolist()","5205163d":"model.intercept_","2a7b6429":"train_preds=model.predict(train_inputs[numeric_cols+encoded_cols])","ab4eb699":"train_preds","8b0a8087":"pd.value_counts(train_preds)","f20608b0":"train_target","22df4ed4":"train_probs=model.predict_proba(input_df[numeric_cols+encoded_cols])\ntrain_probs","ce28eaba":"from sklearn.metrics import accuracy_score","b8535acc":"accuracy_score(train_target,train_preds)","9b399756":"val_preds=model.predict(val_inputs[numeric_cols+encoded_cols])","eef869f4":"val_preds","386f6461":"accuracy_score(val_target,val_preds)","2f519581":"def predict_input(single_input):\n    input_df =test_df\n    \n    input_df[numeric_cols] = scaler.transform(input_df[numeric_cols])\n    input_df[encoded_cols] = encoder.transform(input_df[categorical_cols])\n    X_input = input_df[numeric_cols + encoded_cols]\n    pred = model.predict(X_input)[0]\n    prob = model.predict_proba(X_input)[0][list(model.classes_).index(pred)]\n    return pred, prob\n\n\npredict_input(test_df)","d0ade6ec":"from sklearn.tree import DecisionTreeClassifier","18fedbbb":"model=DecisionTreeClassifier(random_state=25,max_depth=5)","71fb4cd9":"model.fit(train_inputs[numeric_cols+encoded_cols],train_target)","0973a757":"model.score(train_inputs[numeric_cols+encoded_cols],train_target)","5b0a2925":"train_preds = model.predict(train_inputs[numeric_cols+encoded_cols])","875f4e22":"train_preds","db870a9e":"pd.value_counts(train_preds)","c83bb510":"accuracy_score(train_preds,train_target)","48507fd3":"model.score(val_inputs[numeric_cols+encoded_cols], val_target)","3a5cf909":"from sklearn.tree import plot_tree, export_text","f2058a5b":"plt.figure(figsize=(80,20))\nplot_tree(model, feature_names=train_inputs[numeric_cols+encoded_cols].columns, max_depth=2, filled=True);","217c8853":"tree_text = export_text(model, max_depth=10, feature_names=list(train_inputs[numeric_cols+encoded_cols].columns))\nprint(tree_text[:5000])","a3c8b782":"importance_df = pd.DataFrame({\n    'feature': train_inputs[numeric_cols+encoded_cols].columns,\n    'importance': model.feature_importances_\n}).sort_values('importance', ascending=False)","f4347650":"importance_df.head(10)","7dde3b2e":"plt.title('Feature Importance')\nsns.barplot(data=importance_df.head(10), x='importance', y='feature');","8dbf1ff1":"def predict_input(single_input):\n    input_df =test_df\n    \n    input_df[numeric_cols] = scaler.transform(input_df[numeric_cols])\n    input_df[encoded_cols] = encoder.transform(input_df[categorical_cols])\n    X_input = input_df[numeric_cols + encoded_cols]\n    pred = model.predict(X_input)[0]\n    prob = model.predict_proba(X_input)[0][list(model.classes_).index(pred)]\n    return pred, prob\n\n\npredict_input(test_df)","9ebb5906":"## Scaling Numeric Columns","c5631e04":"## Making Prediction On Test Data","7f985641":"## Problem Statement:\n   \n   \n   **An organization wants to predict who possible defaulters are for the consumer loans product.\n   They have data about historic customer behavior based on what they have observed. \n   Hence when they acquire new customers they want to predict who is riskier and who is not.**","bc87b7b8":"## Training Logistic Regression model","aa031e90":"##  Downloading and Exploring the  Data","2b207a1c":"## Step 2: Preparing the Data for training","0e41b34a":"## Training Decision Tree Model","3ef8dc8d":"## Spliting Data","51de7b13":"## Data Visulization","cac95c45":"# Loan Defaulters Prediction\n\n","8ae32a38":"## While Using Logistic Regression accuracy score on validation data is 0.8775 while using DecisionTreeClassifier it increase to 0.8780","4b24475e":"## Identifying Numeric and Categorical Columns","1cb82d63":"## Making Prediction and Evaluating the model \n","1c0189c2":"#### There is no null values in our dataset","7251c5c7":"## Encode Categorical Columns"}}