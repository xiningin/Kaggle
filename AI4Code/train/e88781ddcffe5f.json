{"cell_type":{"e10d4602":"code","fb8666e8":"code","dfcb75cf":"code","2e99c798":"code","c53a4fe6":"code","c212bca4":"code","e4f92807":"code","b43a17c4":"code","6dcdeb7b":"markdown","bec1ba0a":"markdown","9c932389":"markdown","9dfb35de":"markdown","205a1ab9":"markdown","a3c894ed":"markdown","ce77e5c0":"markdown"},"source":{"e10d4602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb8666e8":"# Library imports\n\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline","dfcb75cf":"iris = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\niris.head()","2e99c798":"# We will create a pairplot with hue as species\nsns.pairplot(iris, hue='Species', palette='Dark2')","c53a4fe6":"from sklearn.model_selection import train_test_split\n\nfeatures = iris.drop('Species', axis=1)\ntarget = iris['Species']\n\nfeatures_train, features_test, target_train, target_test = train_test_split(features, target, \n                                                                           test_size=0.3, random_state=101)","c212bca4":"from sklearn.svm import SVC\n\nmodel = SVC(gamma='auto')\nmodel.fit(features_train, target_train)","e4f92807":"predictions = model.predict(features_test)\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(target_test, predictions))","b43a17c4":"print(classification_report(target_test, predictions))","6dcdeb7b":"### Train-Test split","bec1ba0a":"Setosa seems to be the most separable class","9c932389":"### Train the Model","9dfb35de":"### Model Evaluation","205a1ab9":"### Library imports","a3c894ed":"### Load the data and validate","ce77e5c0":"### Basic Exploration"}}