{"cell_type":{"16402fe1":"code","f90a70c2":"code","483df6cc":"code","6c9a80eb":"code","1ce92aa9":"code","8123681c":"code","3b154381":"code","926cddb2":"code","e0a2d221":"code","1b31928a":"code","c755aea5":"code","9e76c7d6":"code","4200e98b":"code","a12a534c":"code","08b7731c":"code","1a4f310f":"code","f3a5ec3c":"code","d1ba4146":"code","8b84aed4":"code","030c0a7a":"code","0152345c":"code","2d768091":"code","21358699":"code","f8d2462b":"markdown","40716a00":"markdown","72838c26":"markdown","546c10de":"markdown","c0318af1":"markdown","b293d40d":"markdown","a663249c":"markdown","6029c904":"markdown","03480b09":"markdown","379a288d":"markdown","3a7b0fbd":"markdown","0aa7ae99":"markdown","5b1780a9":"markdown","e39e7cd2":"markdown"},"source":{"16402fe1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f90a70c2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\nimport itertools\nimport tensorflow as tf\n\nnp.random.seed(2)\n#sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n#keras\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n","483df6cc":"#load data\ntrainv = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntestv = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","6c9a80eb":"trainv.head()","1ce92aa9":"Y_train = trainv[\"label\"] #target \n\n# Drop 'label' column\nX_train = trainv.drop(labels = [\"label\"],axis = 1) \n","8123681c":"\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","3b154381":"X_train.isnull().any().describe()","926cddb2":"testv.isnull().any().describe()","e0a2d221":"# Normalize the data\nX_train = X_train \/ 255.0\ntestv = testv \/ 255.0","1b31928a":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntestv = testv.values.reshape(-1,28,28,1)","c755aea5":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","9e76c7d6":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=3)","4200e98b":"g = plt.imshow(X_train[0][:,:,0])","a12a534c":"# CNN architechture  -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","08b7731c":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","1a4f310f":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nepochs = 25\nbatch_size = 86","f3a5ec3c":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","d1ba4146":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","8b84aed4":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","030c0a7a":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","0152345c":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","2d768091":"# predict results\nresults = model.predict(testv)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\n\n","21358699":"sample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample_submission[\"Label\"]=results\nsample_submission.to_csv(\"submission.csv\", index=False)","f8d2462b":" **Setting up the Optimizer and Annealer**\n \nOnce the layers are added to the model,we need to set up a score function,an optimization algo and a loss function.\n\nThe loss function is defined to measure how poorly the model performs on images with known labels. It is the error rate between the observed labels and the predicted ones.\n\nThe optimizer function will iteratively improve parameters inorder to minimize loss.We use RMSprop(with default values).It's a very good optimizer .\nThe RMSprop method adjusts the adagard method in a very simple way in an attempt to reduuce it's aggresive, monotonically,decreasing learning rate.","40716a00":"**One Hot Encoding**","72838c26":"**Spliting the Data into Train Set and Validation Set**","546c10de":"# Beginners's Guide to CNN\nMy first project involving Neural Net.The data is MNIST's famous dataset of handwritten digits.The goal is to correctly identify digits from a dataset of tens of thousands of handwritten images.\n","c0318af1":"**Visualizing on of the Digits**","b293d40d":"**Creating a Confusion Matrix**","a663249c":"**Reshaping the Imgae**\n\n784px=28px * 28px","6029c904":"# 1.Setting Up Kernel","03480b09":"# 3.Convolutional Neural Network\n\nHere we use the Keras Sequential API, where we add one layer at a time.\nThe first two conolutional layer we use 32 filters and 64 filters for the last two.\nEach filter transforms the image using the kernel filter.The Kernel filter matrix is applied on the whole image.\n\nThe second important layer in CNN is pooling,which acts as a down-sampling filter.\nThat is it looks at the two neighbouring pixels and picks the maximal value.\n\nThe Flaten layer is used to convert the final feature maps into a single 1D vector.This flatening step is needed so that we can mmake use of fully connected layers after some convolutional\/pooling layers.\n\nDropout is a regularization method,where a portion of the nodes in the layeers are rando,ly ignored(weights are set to zero)\n'relu' is the rectifier (activation function max(0,x) which brings non linearity to the network.\n\nCNN architecture[[Conv2D->relu]* 2->MaxPool2D->Dropout]* 2-> Flaten -> Dense -> Dropout -> Out","379a288d":"# 2.Preparing The Data","3a7b0fbd":"**Checking for Null Values**","0aa7ae99":"**Normalization of Data**\n\nWe perform a grayscale normalization to reduce the effect of illumination's differences.\n\nMoreover the CNN will converg faster on [0..1] data than on [0..255].","5b1780a9":"**Data Augmentation**\n\nIn order to avoid overfitting, we need to artificially expand the hand written dataset. The idea is to alter the training data with small transformations to reproduce the variations occuring when someone is writing a digit.","e39e7cd2":"# 4.Model Evaluation"}}