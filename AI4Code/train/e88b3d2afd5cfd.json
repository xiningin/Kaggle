{"cell_type":{"5aed7ddf":"code","88fa2c9c":"code","94d6a67d":"code","f5dca9ee":"code","514204e1":"code","b1359343":"code","5015d563":"code","da0c08d1":"code","ee67eeb5":"code","6d622f66":"code","d74a0bdf":"code","f140b788":"code","bc23e349":"code","32710204":"code","5978b719":"code","f5958b35":"code","7dfc2b22":"code","a1e1e140":"code","ff864665":"code","e026c34a":"code","5f1dcaab":"code","effa4684":"code","bcc4f0af":"code","fd995a7f":"code","47a6ef0b":"code","18efb131":"code","f079288d":"code","4638ac9a":"code","397feef8":"code","60d252a3":"code","70a63d68":"code","7fc969fc":"code","6bfe26f0":"code","9f7cb836":"code","a1e02599":"markdown","f77e1bfc":"markdown","db6051e5":"markdown","76d8fc00":"markdown","de976654":"markdown","5462295b":"markdown","5bb68952":"markdown","5b308eee":"markdown","92350ffb":"markdown","801dee3d":"markdown","46e58b0f":"markdown","1e0eec38":"markdown"},"source":{"5aed7ddf":"from keras.datasets import mnist","88fa2c9c":"(X_train, y_train), (X_test, y_test) = mnist.load_data()","94d6a67d":"X_train.shape","f5dca9ee":"y_train.shape","514204e1":"import matplotlib.pyplot as plt","b1359343":"plt.imshow(X_train[0])","5015d563":"plt.imshow(X_train[1])","da0c08d1":"for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_train[i])\n    plt.title(\"Class {}\".format(y_train[i]))","ee67eeb5":"X_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)","6d622f66":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","d74a0bdf":"X_train \/= 255\nX_test \/= 255","f140b788":"print(\"Training matrix shape\", X_train.shape)\nprint(\"Testing matrix shape\", X_test.shape)","bc23e349":"from keras.utils import np_utils","32710204":"import numpy as np","5978b719":"classes = 10","f5958b35":"Y_train = np_utils.to_categorical(y_train, classes)\nY_test = np_utils.to_categorical(y_test, classes)","7dfc2b22":"Y_train.shape","a1e1e140":"Y_test.shape","ff864665":"Y_train.shape[1]","e026c34a":"from keras.models import Sequential","5f1dcaab":"model_krs = Sequential()","effa4684":"from keras import layers\nfrom keras.layers.core import Dropout","bcc4f0af":"model_krs.add(layers.Dense(512, input_shape=(784,), activation='relu'))\n              \n#### Dropout for not memorize or overfitting the train data\nmodel_krs.add(Dropout(0.2)) ","fd995a7f":"model_krs.add(layers.Dense(512, activation='relu'))\nmodel_krs.add(Dropout(0.2)) ","47a6ef0b":"model_krs.add(layers.Dense(10, activation='softmax'))","18efb131":"model_krs.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","f079288d":"model_krs.summary()","4638ac9a":"history = model_krs.fit(X_train, Y_train,\n          epochs=10,\n          verbose=1,\n          validation_data=(X_test, Y_test),\n          batch_size=128)","397feef8":"accuracy = model_krs.evaluate(X_train, Y_train, verbose=False)\nprint(\"Training Score: {:.4f}\".format(accuracy[0]))\nprint(\"Training Accuracy: {:.4f}\".format(accuracy[1]))","60d252a3":"accuracy = model_krs.evaluate(X_test, Y_test, verbose=False)\nprint(\"Testing Accuracy: {:.4f}\".format(accuracy[0]))\nprint(\"Testing Accuracy: {:.4f}\".format(accuracy[1]))","70a63d68":"Predict = model_krs.predict_classes(X_test)","7fc969fc":"Right_predict = np.nonzero(Predict == y_test)[0]\nWrong_predict = np.nonzero(Predict != y_test)[0]","6bfe26f0":"plt.figure()\nfor i, correct in enumerate(Right_predict[:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[correct].reshape(28,28))\n    plt.title(\"Predicted {}, Class {}\".format(Predict[correct], y_test[correct]))","9f7cb836":"plt.figure()\nfor i, incorrect in enumerate(Wrong_predict[:9]):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[incorrect].reshape(28,28))\n    plt.title(\"Predicted {}, Class {}\".format(Predict[incorrect], y_test[incorrect]))","a1e02599":"**Converting our train data : 1-dimensional class arrays to 10-dimensional class matrices **","f77e1bfc":"**NN model is sequential**","db6051e5":"**Compiling the model**","76d8fc00":"**Traing the model**","de976654":"**2nd layer**","5462295b":"## Build the neural network","5bb68952":"### Output Inspection","5b308eee":"**Final layer**","92350ffb":"### Performance Evaluating","801dee3d":"**Predict classes function**","46e58b0f":"**Adding layers**","1e0eec38":"**1st layer**"}}