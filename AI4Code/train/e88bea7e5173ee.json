{"cell_type":{"38fa6dac":"code","81fd0512":"code","4edcf191":"code","9dc828cc":"code","abd2b0bb":"code","71453aba":"code","ad0ac4e5":"code","7b4dcec4":"code","8782b18f":"code","84a8a2da":"code","c65c7742":"code","03e0b56e":"code","68555e02":"code","cc178e5c":"code","b272d45b":"code","c78ca123":"code","24bd83e8":"code","3363846e":"code","4c9c668f":"code","0a0d862c":"code","0b234fe9":"code","57a57ac7":"code","932e18b6":"code","fd9a1b96":"code","1f2fd3af":"code","0d43f2af":"code","c968af23":"code","7b9b260d":"code","82c9a3ba":"code","32a81e15":"code","f217a700":"code","34eb9404":"code","cf1aa702":"code","34e776b4":"code","2b07f24e":"code","32fcd646":"code","34c012f0":"code","e06c9d0c":"code","caafb1f5":"code","857b7adc":"code","b90c0f86":"code","00879903":"code","4d82c78a":"code","c6edb8d9":"code","10e49fa3":"code","dc98d97a":"code","bcef1ba3":"code","da8149a4":"code","c5ab31a3":"code","b02f45b1":"code","cde37404":"code","b199102d":"code","cc1acbdb":"code","37d948a1":"code","140377b5":"code","1da57403":"code","d7b98ef6":"code","f8fa5e1c":"code","027ab961":"code","ae65252a":"code","ae58ed87":"code","bbd24fa7":"markdown","3467ef9e":"markdown","cd280702":"markdown"},"source":{"38fa6dac":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns","81fd0512":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","4edcf191":"df_train.shape","9dc828cc":"df_test.shape","abd2b0bb":"df = pd.concat([df_train,df_test])","71453aba":"df.shape","ad0ac4e5":"df.head()","7b4dcec4":"df.info()","8782b18f":"df.describe()","84a8a2da":"df['Marital_Status'].unique()","c65c7742":"a = df.groupby('Marital_Status')['Purchase'].mean()\na.plot.bar()","03e0b56e":"df['Occupation'].unique()","68555e02":"a = df.groupby('Occupation')['Purchase'].mean()\na.plot.bar()","cc178e5c":"df['Gender'].unique()","b272d45b":"a = df.groupby('Gender')['Purchase'].mean()\na.plot.bar()","c78ca123":"df['Product_Category_1'].unique()","24bd83e8":"a = df.groupby('Product_Category_1')['Purchase'].count()\na.plot.bar()","3363846e":"df['Product_Category_2'].unique()","4c9c668f":"a = df.groupby('Product_Category_2')['Purchase'].count()\na.plot.bar()","0a0d862c":"df['Product_Category_3'].unique()","0b234fe9":"a = df.groupby('Product_Category_3')['Purchase'].count()\na.plot.bar()","57a57ac7":"df['Age'].unique()","932e18b6":"a=df.groupby('Age')['Purchase'].mean()\na.plot.bar()","fd9a1b96":"df['City_Category'].unique()","1f2fd3af":"a=df.groupby('City_Category')['Purchase'].mean()\na.plot.bar()","0d43f2af":"df['Stay_In_Current_City_Years'].unique()","c968af23":"a = df.groupby('Stay_In_Current_City_Years')['Purchase'].mean()\na.plot.bar()","7b9b260d":"#df['Product_Category_1'] = df['Product_Category_1'].astype(\"O\")\ndf['Product_Category_2'] = df['Product_Category_2'].astype(\"O\")\ndf['Product_Category_3'] = df['Product_Category_3'].astype(\"O\")","82c9a3ba":"#df['Product_Category_1'] = df['Product_Category_1'].fillna(df['Product_Category_1'].mode()[0])\ndf['Product_Category_2'] = df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])\ndf['Product_Category_3'] = df['Product_Category_3'].fillna(df['Product_Category_3'].mode()[0])","32a81e15":"df['Product_Category_2'] = df['Product_Category_2'].astype(\"int\")\ndf['Product_Category_3'] = df['Product_Category_3'].astype(\"int\")","f217a700":"df.info()","34eb9404":"df['Gender'] = df['Gender'].map({'F':0,'M':1})\ndf['City_Category'] = df['City_Category'].map({'A':0,'B':1,'C':2})\ndf['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].map({'0':0,'1':1,'2':2,'3':3,'4+':4})\ndf['Age'] = df['Age'].map({'0-17':0,'18-25':0,'26-35':1,'36-45':1,'46-50':1,'51-55':2,'55+':2})","cf1aa702":"df.head()","34e776b4":"df_train = df[:550068]\ndf_test = df[550068:]","2b07f24e":"df_train.drop(['User_ID','Product_ID'],axis=1,inplace=True)","32fcd646":"from scipy import stats\nz = np.abs(stats.zscore(df_train['Purchase']))\n\nthreshold = 2.33\nnp.where(z > 2.33)\n\ndf_train = df_train[(z<2.33)]","34c012f0":"df_train.head()","e06c9d0c":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel","caafb1f5":"X = df_train.drop('Purchase',axis=1)\ny = df_train['Purchase']","857b7adc":"#from sklearn.model_selection import train_test_split\n#X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)","b90c0f86":"model = SelectFromModel(Lasso(alpha=0.005,random_state=0))","00879903":"model.fit(X,y)","4d82c78a":"model.get_support()","c6edb8d9":"from sklearn.model_selection import RandomizedSearchCV","10e49fa3":"# number of trees\nn_estimators = [int(x) for x in np.linspace(start=100,stop=200,num=5)]\n# number of fetaures to consider at every split\nmax_features = ['sqrt']\n# max level in tree\nmax_depth = [int(x) for x in np.linspace(5,10,num=5)]\n# min sample required for split\nmin_samples_split = [10,15,100]\n# min samples at each leaf node\nmin_samples_leaf = [5,10]","dc98d97a":"# create a random grid\nrandom_grid = {'n_estimators': n_estimators}\n#               'max_features': max_features}\n#               'max_depth': max_depth}\n#               'min_samples_split': min_samples_split,\n#                'min_samples_leaf': min_samples_leaf}\nprint(random_grid)","bcef1ba3":"# use the random search to find best hyper parameters\n# first create a base model to tune\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","da8149a4":"# search of parameters\nrf_random = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,scoring='neg_mean_squared_error',n_iter=1,cv=5,verbose=2,random_state=42,n_jobs=1)","c5ab31a3":"rf_random.fit(X,y)","b02f45b1":"df_1 = df_test.copy()","cde37404":"df_test.drop(['User_ID','Product_ID'],axis=1,inplace=True)","b199102d":"df_test.drop(['Purchase'],axis=1,inplace=True)","cc1acbdb":"y_pred = rf_random.predict(df_test)","37d948a1":"submission = pd.DataFrame({\n        \"Purchase\":y_pred,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission.to_csv('Black_Friday_Sales_submission.csv', index=False)","140377b5":"import xgboost as xgb\n\nxg_reg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bytree = 0.3, learning_rate = 0.2,\n                max_depth = 10, alpha = 15, n_estimators = 1000)\n\nxg_reg.fit(X,y)\n\ny_pred_XGB = xg_reg.predict(df_test)\n","1da57403":"submission_XGB = pd.DataFrame({\n        \"Purchase\":y_pred_XGB,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission_XGB.to_csv('Black_Friday_Sales_submission_XGB.csv', index=False)","d7b98ef6":"import lightgbm as lgb\ntrain_data=lgb.Dataset(X,label=y)\n#define parameters\nparams = {'learning_rate':0.2,'max_depth': 10,'num_leaves':200,'min_data_in_leaf':10,'max_bin':200}\nmodel= lgb.train(params, train_data, 200) \ny_pred_LGB=model.predict(df_test)","f8fa5e1c":"submission_LGB = pd.DataFrame({\n        \"Purchase\":y_pred_LGB,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission_LGB.to_csv('Black_Friday_Sales_submission_LGB.csv', index=False)","027ab961":"#from sklearn import metrics\n#print('MAE:', metrics.mean_absolute_error(y_test, y_pred))\n#print('MSE:', metrics.mean_squared_error(y_test, y_pred))\n#print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n#print(\"R2 Score:\", metrics.r2_score(y_test, y_pred))","ae65252a":"# ensembled prediction over splitted test data\nensembled_prediction = (0.33*(y_pred)+0.33*(y_pred_LGB)+0.33*(y_pred_XGB))","ae58ed87":"submission_MIX = pd.DataFrame({\n        \"Purchase\":ensembled_prediction,\n        \"User_ID\": df_1[\"User_ID\"],\n        \"Product_ID\": df_1[\"Product_ID\"]\n        \n    })\n\nsubmission_MIX.to_csv('Black_Friday_Sales_submission_MIX.csv', index=False)","bbd24fa7":"### Stacked Ensemble\nHere we are going to taked weighted average (as per mean squared error score) of XGBoost and LGBM.\n","3467ef9e":"### Feature Selection","cd280702":"### Random Forest Regressor - all variables are important"}}