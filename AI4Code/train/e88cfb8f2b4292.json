{"cell_type":{"ccd8f0ad":"code","a4ab4fe0":"code","ec467ba3":"code","107b7645":"code","97739836":"code","08f1df4b":"code","21462915":"code","e8c4f42f":"code","d9a5b3b8":"code","62c9045e":"markdown","499fa0b4":"markdown","5bcfab54":"markdown","0f7ff9a4":"markdown","89079601":"markdown","3990060b":"markdown"},"source":{"ccd8f0ad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndf = pd.read_csv('..\/input\/persona-data\/persona.csv')\n\ndef check_df(dataframe, head=5, tail=5, quan=False):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(tail))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n\n    if quan:\n        print(\"##################### Quantiles #####################\")\n        print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\n\n","a4ab4fe0":"check_df(df) # Dataframe cheacked ","ec467ba3":"check_df(df, quan=True) # Dataframe cheacked ","107b7645":"\"\"\"\nLet's examine the dataset from some aspects...\n\"\"\"\nprint(f\"\\n\\nUnique Source :{df.SOURCE.unique()},\\n\\nFrequency :\\n{df.SOURCE.value_counts()}\\n\")  \nprint(f\"Unique Price :{df.PRICE.unique()},\\n\\nFrequency :\\n{df.PRICE.value_counts()}\\n\") \nprint(f\"Sales by Country :{df.groupby('COUNTRY')['PRICE'].count()}\\n\")  \nprint(f\"Total Sales by Country :{df.groupby('COUNTRY')['PRICE'].sum()}\\n\") \nprint(f\"According to source total income :{df.groupby('SOURCE')['PRICE'].count()}\\n\")  \nprint(f\"According to country mean income :{df.groupby('COUNTRY')['PRICE'].mean()}\\n\") \nprint(f\"According to source mean income  :{df.groupby('SOURCE')['PRICE'].mean()}\\n\") \nprint(\n    f\"According to country and source mean income :{df.groupby(['COUNTRY', 'SOURCE'])['PRICE'].mean()}\\n\") \nprint(\n    f\"According to country, source, sex and age mean income :\\n{df.groupby(['COUNTRY', 'SOURCE', 'SEX', 'AGE']).agg('mean')}\\n\") \nprint(\n    f\"According to country, source, sex and age mean income and sorting :\\n{df.groupby(['COUNTRY', 'SOURCE', 'SEX', 'AGE']).agg('mean').sort_values(by='PRICE', ascending=False)}\\n\") \nprint(\n    f\"Edit index :\\n{df.groupby(['COUNTRY', 'SOURCE', 'SEX', 'AGE']).agg('mean').sort_values(by='PRICE', ascending=False).reset_index()}\")  \n","97739836":"labels = ['Z', 'Y', 'X', 'BabyBoomer']\n# (14.999, 17.0](Z) < (17.0, 21.0](Y) < (21.0, 27.0](X) < (27.0, 66.0](BabyBoomer)]\ndf['AGE_CAT'] = pd.qcut(df['AGE'], q=4, labels=labels)\n\nprint(f\"\\nAGE_CAT unique variables: {df.AGE_CAT.unique()}\\n\")","08f1df4b":"col_list = ['COUNTRY', 'SOURCE', 'SEX', 'AGE_CAT']\ntemp_agg_df = df.groupby(col_list).agg({\"PRICE\": \"mean\"}).reset_index()\n\ndict_agg_df = {\"_\".join(row[:4]).upper(): row[-1] for row in temp_agg_df.values}\nagg_df = pd.DataFrame()\nagg_df[\"CUSTOMER_LEVEL_BASED\"] = dict_agg_df.keys()\nagg_df[\"PRICE\"] = dict_agg_df.values()\n\nprint(f\"Result :\\n{agg_df.head(4)}\")\nprint(f\"Result count: {len(agg_df)}\")\nprint(f\"Result value_count :\\n{agg_df['CUSTOMER_LEVEL_BASED'].value_counts()}\")","21462915":"agg_df['SEGMENT'] = pd.cut(agg_df[\"PRICE\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\n\ninfo = agg_df.groupby('SEGMENT').agg({'PRICE': ['mean', 'max', 'sum']})\n\nprint(agg_df.head())\nprint(f\"\\nReview by price according to segment :\\n{info}\")\nSEGMENT_C = agg_df.loc[agg_df['SEGMENT'] == 'C']\nprint(f\"only SEGMENT_C :\\n{SEGMENT_C}\")","e8c4f42f":"\ndef earnings(user):\n    \"\"\"\n    Tasks\n    ----------\n    It is function that measures the amount the new user will earn.\n\n    Parameters\n    ----------\n    user: The user whose earning rate is to be estimated. user format --> 'COUNTRY_SOURCE_SEX_AGE_CAT'\n\n    Returns\n    -------\n    return None\n    \"\"\"\n    new_user_categories = agg_df[agg_df[\"CUSTOMER_LEVEL_BASED\"] == user]\n    print(f\"\\nfor {user} --> The price for new user : {new_user_categories['PRICE']}\\n\")\n    print(f\"{user} Segment : {new_user_categories['SEGMENT']}\")\n","d9a5b3b8":"# Try func.\n\nnew_user = \"TUR_ANDROID_FEMALE_BABYBOOMER\"\nother_new_user = \"FRA_IOS_FEMALE_Y\"\n\nearnings(new_user)\nearnings(other_new_user)","62c9045e":"# **GAME INDUSTRY LEVEL BASED CUSTOMER SEGMENTATION\n**A game company wants to create level-based new customer definitions (personas) by using some features of its customers, and to create segments according to these new customer definitions and to estimate how much the new customers can earn on average according to these segments.\n\n* MISSION 1 - Please provide necessary answers for 10 questions below..\n\nQuestion 1: read persona.csv and show the general view of the dataset","499fa0b4":"**preference 1 --> pd.cut**\n* Step1: Check AGE.min, Age.max, Age.std, Age.median and Age.mean\n* Step2: Set ranges between min and max\n* Step3: dataframe cut according to ranges  --> Quantile Rank (pd.cut(bla, bla...))\n\n*or *\n\n**preference 2 --> pd.qcut**\n* Step 1st and last : Use pd.qcut and its thought of everything :-D\n\nmy preferance is 2nd. Of course! :-P","5bcfab54":"**Mission 3**\n* To better see the output from the previous mission, use the sort_values method in descending order. Apply according to PRICE.\n* Save the output as agg_df\n* Please change the indexes (Because the column name referred as index for the output of the misson 3 except PRICE column)\n","0f7ff9a4":"**Mission 6\n\nIdentify new level-based customers (personas).\n\u25aa Define new level-based customers (personas) and add them as column to the dataset.\n\n\u25aa Name of the new variable needs to be added like customers_level_based\n\n\u25aa You need to create the customers_level_based variable by combining the observations from the output from the previous mission.","89079601":"* Question 2 - How many UNIQUE SOURCE do we have ? And, what is the frequency of the SOURCE ?\n* Question 3 - How many UNIQUE PRICE do we have ?\n* Question 4 - How many sales were made for each PRICE ?\u00b6\n* Question 5 - How many sales were made each PRICE for each COUNTRY ?\u00b6\n* Question 6 - How many profit were made for each COUNTRY ?\u00b6\n* Question 7 - What is the sales numbers for each SOURCE type ?\u00b6\n* Question 8 - What is the PRICE means for each COUNTRY ?\u00b6\n* Question 9 - What is the PRICE means for each SOURCE ?\u00b6\n* Question 10 - What is the PRICE means for COUNTRY-SOURCE breakdown ?\u00b6\n* Question 11 - What is the avereage profit for COUNTRY, SOURCE, SEX, AGE breakdown ?\n\n","3990060b":"\n# Please change the data type of AGE column and add as new column for agg_df dataframe\n\n\u25aa Age numerical column needs to change categorical column\n\n\u25aa Please provide interval for new age column\n\n\u25aa Like instance: \u20180_18', \u201819_23', '24_30', '31_40', '41_70'"}}