{"cell_type":{"e4a38da7":"code","1f89ef2c":"code","cbbd637e":"code","cd6cee54":"code","e97aec6b":"code","5ca8db85":"code","44323306":"code","68c5c61a":"code","89891f48":"code","fb2c24b9":"code","55082209":"code","24949614":"code","83885d2f":"code","81b138af":"code","74c1f392":"code","cdf56870":"code","964721c1":"code","1f4d36ed":"code","a40d7c0e":"code","2d2e6e74":"code","75d7808b":"code","4a687dce":"code","88234cb5":"code","f3b95e4d":"code","9bc90156":"code","98c7034f":"code","a62d481f":"markdown","1e1e42b0":"markdown","ca3a15fa":"markdown","fe5bd6e3":"markdown","7243671a":"markdown","03fb1705":"markdown","80cd7f50":"markdown","ef4e19e8":"markdown"},"source":{"e4a38da7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tqdm import tqdm\nimport os\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom PIL import Image\nfrom IPython.display import display, clear_output\nimport ipywidgets as widgets\nimport io","1f89ef2c":"labels = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']\nX_train = []\nY_train  = []\nX_test = []\nY_test = []\nimage_size=150\nfor label in labels:\n    trainPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Training',label)\n    for file in tqdm(os.listdir(trainPath)):\n        image = cv2.imread(os.path.join(trainPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_train.append(image)\n        Y_train.append(label)\n    \nX_train = np.array(X_train)","cbbd637e":"for label in labels:\n  \n    testPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Testing',label)\n    for file in tqdm(os.listdir(testPath)):\n        image = cv2.imread(os.path.join(testPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_test.append(image)\n        Y_test.append(label)\n    \nX_test = np.array(X_test)","cd6cee54":"fig, ax = plt.subplots(1,4, figsize=(20,20))\nk = 0\nfor i in range(0,4):\n    if i==0: idx=0\n    elif i==1: idx=827\n    elif i==2: idx=1649\n    else: idx=2045\n    ax[k].imshow(X_train[idx])\n    ax[k].set_title(Y_train[idx])\n    ax[k].axis('off')\n    k+=1","e97aec6b":"X_train, Y_train = shuffle(X_train, Y_train, random_state=28)","5ca8db85":"X_train.shape","44323306":"sns.countplot(Y_test)","68c5c61a":"sns.countplot(Y_train)","89891f48":"y_train_ = []\nfor i in Y_train:\n    y_train_.append(labels.index(i))\nY_train = y_train_\n\nY_train = tf.keras.utils.to_categorical(Y_train)\n\ny_test_ = []\nfor i in Y_test:\n    y_test_.append(labels.index(i))\nY_test = y_test_\n\nY_test = tf.keras.utils.to_categorical(Y_test)","fb2c24b9":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=28)","55082209":"base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(image_size, image_size, 3))","24949614":"from keras.layers import GlobalAveragePooling2D, Dropout, Dense\nfrom keras.models import Model","83885d2f":"model = base_model.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dense(4, activation='softmax')(model)\nmodel = Model(inputs = base_model.input, outputs=model)","81b138af":"model.summary()","74c1f392":"model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","cdf56870":"reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.3, patience=2, min_denta=0.0001, mode='auto', verbose=1)\ntensorboard = TensorBoard(log_dir='logs')\ncheckpoint = ModelCheckpoint(\"brain_tumor_classification.h5\", monitor='val_accuracy', save_best_only=True, mode='auto', verbose=1)","964721c1":"datagen = ImageDataGenerator(\nfeaturewise_center=False,\nsamplewise_center=False,\nfeaturewise_std_normalization=False,\nsamplewise_std_normalization=False,\nzca_whitening=False,\nrotation_range=10,\nzoom_range=0.1,\nwidth_shift_range=0.1,\nhorizontal_flip=False,\nvertical_flip=False)\n\ndatagen.fit(X_train)","1f4d36ed":"history = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=32),\n                              validation_data=(X_val, Y_val), \n                              epochs=30, \n                              verbose=1,\n                            callbacks=[tensorboard, checkpoint, reduce_lr])","a40d7c0e":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","2d2e6e74":"pred = model.predict(X_test)\npred = np.argmax(pred,axis=1)\ny_test_new = np.argmax(Y_test,axis=1)","75d7808b":"accuracy = np.sum(pred==y_test_new)\/len(pred)\nprint(\"Accuracy on testing dataset: {:.2f}%\".format(accuracy*100))","4a687dce":"def img_pred(upload):\n    for name, file_info in uploader.value.items():\n        img = Image.open(io.BytesIO(file_info['content']))\n    opencvImage = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\n    img = cv2.resize(opencvImage,(150,150))\n    img = img.reshape(1,150,150,3)\n    p = model.predict(img)\n    p = np.argmax(p,axis=1)[0]\n\n    if p==0:\n        p='Glioma Tumor'\n    elif p==1:\n        p='Meningioma Tumor'\n    elif p==2:\n        print('The model predicts that there is no tumor')\n    else:\n        p='Pituitary Tumor'\n\n    if p!=2:\n        print(f'The Model predicts that it is a {p}')","88234cb5":"uploader = widgets.FileUpload()\ndisplay(uploader)\nbutton = widgets.Button(description='Predict')\nout = widgets.Output()\ndef on_button_clicked(_):\n    with out:\n        clear_output()\n        try:\n            img_pred(uploader)\n        except:\n            print('No Image Uploaded\/Invalid Image File')\nbutton.on_click(on_button_clicked)\nwidgets.VBox([button,out])","f3b95e4d":"new_model = tf.keras.models.load_model('.\/brain_tumor_classification.h5')","9bc90156":"test_pred = new_model.predict(X_test)\ntest_pred = np.argmax(test_pred, axis=1)\nY_test_ = np.argmax(Y_test, axis=1)\nprint(\"Accuracy on testing set: {:.2f}%\".format(np.sum(test_pred==Y_test_)\/len(Y_test_)*100))","98c7034f":"train_pred = new_model.predict(X_train)\ntrain_pred = np.argmax(train_pred, axis=1)\nY_train_ = np.argmax(Y_train, axis=1)\nprint(\"Accuracy on training set: {:.2f}%\".format(np.sum(train_pred==Y_train_)\/len(Y_train_)*100))","a62d481f":"## Train Model","1e1e42b0":"## Transfer Learning","ca3a15fa":"## Import Necessarcy Libraries","fe5bd6e3":"## One-Hot encoding","7243671a":"## Show sample images from each label","03fb1705":"## Shuffle the train set","80cd7f50":"## Data Preparation","ef4e19e8":"## Data Augmentation"}}