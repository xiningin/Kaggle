{"cell_type":{"5dc412fb":"code","1297505f":"code","635b6285":"code","d0f9bedc":"code","55f5bddc":"code","87bc94eb":"code","b66784f4":"code","cad185fa":"code","0f6a16b1":"code","e801599a":"code","6f632522":"code","60098a5d":"code","feb8cf60":"code","8605834c":"code","6f03371a":"code","8fa7b37e":"code","04b3938b":"code","82d9627f":"code","37b42e66":"code","a561f31e":"code","0cedfa11":"code","ba9e6566":"code","602a0816":"code","03f943be":"code","9bfaf574":"code","cd0d0255":"code","4cf944c6":"code","c9133f45":"code","7a4fa811":"code","286a1195":"code","fc01e9a5":"code","4e517112":"code","a2745778":"code","0ef4d661":"code","f9701237":"code","fc8ca076":"code","3cef9c35":"code","664b25b7":"code","63cbc16a":"code","89e4b031":"code","b277b91d":"code","342f19e7":"code","f7ceaca4":"code","3857f977":"code","e248a2dc":"code","08b770fb":"code","518a9eea":"code","3dbeb8a2":"code","46a2bfc1":"code","a7a4db68":"code","e3333e7c":"code","f9165fe5":"code","bb388c1e":"code","d0991ea3":"code","d469fe09":"code","a6bd79ab":"code","0179dc39":"code","c61feb33":"code","6aa7fc34":"code","db591871":"code","4cb4691d":"code","f8b68b83":"code","be4f43ee":"code","adc6f9c9":"code","71e18d1d":"code","008f22d6":"code","ebae148b":"code","632e3592":"code","fb5b2351":"code","d968d2d8":"code","2941c114":"code","35780f14":"code","92f87453":"code","29499831":"markdown","7d7a5130":"markdown","763c2187":"markdown","bb2da455":"markdown","b297b2e7":"markdown","a3925fd0":"markdown","c30aff97":"markdown","e93c5384":"markdown","3055b62c":"markdown","5756a9d5":"markdown","a5f25b4e":"markdown","1d364b39":"markdown","62593831":"markdown","4e59076a":"markdown","267ef660":"markdown","b4ccc9f4":"markdown","00d31f0d":"markdown","ce46c168":"markdown","32d5edbb":"markdown","496b0871":"markdown","af04656a":"markdown","f55c30d0":"markdown","03d64456":"markdown","5a296058":"markdown","6895df9d":"markdown","421620bf":"markdown","b83502fa":"markdown","f966521e":"markdown","791626b2":"markdown","015da295":"markdown","d549d88c":"markdown","a6f2aa37":"markdown","497ebda4":"markdown","b272b528":"markdown","cdb232e3":"markdown","79737d96":"markdown","0ac53820":"markdown","c59231b6":"markdown","f4143bdf":"markdown","939b0cf8":"markdown","cafb02ef":"markdown"},"source":{"5dc412fb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport inspect\n\n## pre process \nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Selection And Cross Validation \nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split , GridSearchCV\n\n#Modles\nfrom sklearn.linear_model import Ridge\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\nfrom scipy.special import boxcox1p\nfrom scipy.stats import norm, skew\n# scoring \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n","1297505f":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n","635b6285":"pd.set_option('max_rows',50)\npd.set_option('max_columns',100)","d0f9bedc":"train.head(1)","55f5bddc":"train.columns.size","87bc94eb":"train.info()","b66784f4":"train.describe()","cad185fa":"numarics = train.select_dtypes(include=['int16', 'int32', 'int64', 'float16', 'float32', 'float64'])","0f6a16b1":"numarics","e801599a":"na = numarics.isna().sum().sort_values(ascending =False)\nnumaricNA = na[na>0].to_frame()\nnumaricNA","6f632522":"sns.distplot(numarics['LotFrontage']);","60098a5d":"sns.regplot(data=numarics,x = 'LotFrontage' , y = 'LotArea');","feb8cf60":"train.describe().columns.size","8605834c":"sns.distplot(numarics['GarageYrBlt']);\n#YearBuilt ??","6f03371a":"sns.regplot(data=numarics,x = 'GarageYrBlt' , y = 'YearBuilt');","8fa7b37e":"print(train[['GarageYrBlt','GarageType','GarageArea']][train.GarageYrBlt.isnull()].shape)\ntrain[['GarageYrBlt','GarageType','GarageArea']][train.GarageYrBlt.isnull()]","04b3938b":"train[['GarageYrBlt','GarageType','GarageArea']][train.GarageArea == 0].shape ==\\\ntrain[['GarageYrBlt','GarageType','GarageArea']][train.GarageYrBlt.isnull()].shape","82d9627f":"sns.distplot(numarics['MasVnrArea']);\n#it's aroung 0 wiht cerinity","37b42e66":"nuniqueVals = numarics.nunique(axis=0).sort_values().to_frame()\nsortedDist = nuniqueVals.index\n#see all numaric dist \nfor i in sortedDist:\n    print(f'{i} Distripution')\n    sns.distplot(numarics[i])\n    plt.title(f'No of unique Values for {i} is {nuniqueVals.loc[i].values[0]}')\n    plt.show()\n    print('------------------------------------------------------')","a561f31e":"#show only sale price \nsns.distplot(train['SalePrice']);","0cedfa11":"#lets see what about correlation\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(numarics.corr());","ba9e6566":"numarics.corr()","602a0816":"obj = train.select_dtypes(include=['object'])\nobj","03f943be":"na = obj.isna().sum().sort_values(ascending =False)\nobjNA = na[na>0].to_frame()\nobjNA","9bfaf574":"## check \ntrain[['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt']]\\\n[train.GarageYrBlt.isnull()].isna().sum()\n## fill them all with 0","cd0d0255":"train[train.Electrical.isnull()]\n#the only Value with 0 and it's just missing ","4cf944c6":"sns.countplot(train['Electrical']);\n# i will fill it with mode","c9133f45":"obj = train.select_dtypes(include=['object'])\nnuniqueVals = obj.nunique(axis=0).sort_values().to_frame()\nsortedDist = nuniqueVals.index\nfor i in sortedDist:\n    print(f'{i} Distripution')\n    sns.countplot(obj[i])\n    plt.title(f'No of unique Values for {i} is {nuniqueVals.loc[i].values[0]}')\n    plt.show()\n    print('------------------------------------------------------')","7a4fa811":"#Make sure all there \nassert obj.shape[1] + numarics.shape[1] == train.shape[1]","286a1195":"train.shape","fc01e9a5":"train['SalePrice']","4e517112":"df = pd.concat((train, test)).reset_index(drop=True)\n# df.drop(['SalePrice'], axis=1, inplace=True)\ndf.shape","a2745778":"df['Utilities'].value_counts()","0ef4d661":"df.drop(['Utilities'],axis = 1,inplace=True)","f9701237":"df.drop(df[(df['GrLivArea']>4000) & (df['SalePrice']<300000)].index, inplace=True)","fc8ca076":"NAS = df.isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","3cef9c35":"numarics_col = df.select_dtypes(include=['int16', 'int32', 'int64', 'float16', 'float32', 'float64']).columns\ncategorical_col =  df.select_dtypes(include=['object']).columns","664b25b7":"NAS = df[numarics_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","63cbc16a":"for col in ['MasVnrArea' , 'GarageYrBlt' , 'GarageArea' , 'GarageCars']:\n    df[col].fillna(0, inplace = True)","89e4b031":"NAS = df[numarics_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","b277b91d":"Mod_cols = ['BsmtHalfBath', 'BsmtFullBath', 'BsmtFinSF2', 'BsmtUnfSF',\n       'TotalBsmtSF', 'BsmtFinSF1']\nfor col in Mod_cols:\n    df[col].fillna(train[col].mode()[0] , inplace = True)","342f19e7":"NAS = df[numarics_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","f7ceaca4":"df[\"LotFrontage\"] \\\n    = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","3857f977":"NAS = df[numarics_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","e248a2dc":"NAS = df[categorical_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","08b770fb":"NAS[NAS>0].to_frame().index","518a9eea":"Fill_with_None = [\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\", \"FireplaceQu\"\n                  , 'GarageCond','GarageQual', 'GarageFinish', 'GarageType'\n                  , 'BsmtCond', 'BsmtExposure','BsmtQual', 'BsmtFinType2', 'BsmtFinType1'\n                  , 'MasVnrType']\nfor col in Fill_with_None:\n    df[col].fillna(\"No\" , inplace = True)","3dbeb8a2":"NAS = df[categorical_col].isna().sum().sort_values(ascending = False)\nNAS[NAS>0].to_frame()","46a2bfc1":"NAS[NAS>0].to_frame().index","a7a4db68":"df['Functional'].fillna('Typ', inplace = True)","e3333e7c":"Mod_cols = ['MSZoning', 'Functional', 'Electrical', 'SaleType'\n            , 'Exterior2nd', 'Exterior1st', 'KitchenQual' ]\nfor col in Mod_cols:\n    df[col].fillna(train[col].mode()[0] , inplace = True)","f9165fe5":"numarics_col","bb388c1e":"categorical_col","d0991ea3":"quality = ['FireplaceQu', 'BsmtQual', 'GarageQual', 'ExterQual', 'HeatingQC', 'PoolQC', 'KitchenQual'\n           , 'Fence','Street', 'Alley']\ncond  = [ 'BsmtCond','GarageCond', 'GarageFinish', 'LandSlope', 'LotShape', 'PavedDrive'\n         , 'YrSold', 'MoSold','ExterCond','Functional','BsmtExposure','CentralAir','MSSubClass'\n         , 'OverallCond']\nrating = ['BsmtFinType1','BsmtFinType2']\n\nfor c in quality+cond+rating:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))","d469fe09":"df.drop([\"Id\"], axis=1, inplace=True)","a6bd79ab":"df = pd.get_dummies(df)","0179dc39":"new_numarics = df.select_dtypes(include=['int64','float64']).columns.to_list()\nnew_numarics.remove('SalePrice')","c61feb33":"TrainDF = df[df['SalePrice'].notnull()]\nTestDF = df[df['SalePrice'].isnull()]\n","6aa7fc34":"scaler = StandardScaler()\nTrainDF[new_numarics] = scaler.fit_transform(TrainDF[new_numarics])\nTestDF[new_numarics] = scaler.transform(TestDF[new_numarics])","db591871":"df[df.duplicated()]","4cb4691d":"TrainDF['SalePrice']","f8b68b83":"X = TrainDF.drop(['SalePrice'] , axis = 1)\ny = np.log1p(TrainDF['SalePrice'].copy())  ##--- someone explain why this works better than +1\n\nX_train, X_test, y_train, y_test\\\n= train_test_split(X, y, test_size=0.2, random_state=911)","be4f43ee":"y","adc6f9c9":"new_numarics = df.select_dtypes(include=['float64']).columns\nnew_numarics","71e18d1d":"params = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n                 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n                 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100]\n         }\n\n\nridge = Ridge()\n\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)    \n\nmodel_cv.fit(X_train, y_train) ","008f22d6":"ridge = model_cv.best_estimator_\nridge","ebae148b":"y_train_pred_ridge = ridge.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_ridge))","632e3592":"y_test_pred_ridge = ridge.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_ridge))","fb5b2351":"TestDF.drop(['SalePrice'],axis = 1 , inplace = True)","d968d2d8":"preds = np.exp(ridge.predict(TestDF))","2941c114":"predictions = pd.DataFrame({'Id': test['Id'] ,'SalePrice': preds })","35780f14":"predictions.to_csv(\"preds.csv\",index=False)","92f87453":"predictions.SalePrice","29499831":"##### Note\nthe sale price is some how skwed but that is predictable <br>\nthere will be some Houses with an over price and some will very low un salable prices \n\n37 col is alot to see whole distription for them all but i wanted to see how it's distriputed with each of there unique values if they were low ","7d7a5130":"#### GarageYrBlt: Year garage was built","763c2187":"Merge The 2 Dataframes to have save transformation on them ","bb2da455":"### Note  \nfor the LotFrontage and as student i dont have yet convidnce enough to just do that to fill with na or mean  **i will try some them and see** ","b297b2e7":"##### Note\nI have to put is Zero as the Building has no garage there \n\nalso all years must not be numaric","a3925fd0":"## DataPreProcessing  <a id=\"preprocess\" ><\/a>\n##### [Content](#Jump)","c30aff97":"#### One-Hot Encoding Encoding <a id='One-Hot'><\/a>\n##### [Contnet](#Jump)\nAll others","e93c5384":"### Covert Some Numaric into Cat  <a id='NumCAT'><\/a>\n##### [Contnet](#Jump)","3055b62c":"### Clean Duplication <a id='Duplication'><\/a>\n##### [Contnet](#Jump)","5756a9d5":"No Duplication here \n","a5f25b4e":"# Contnet <a id='Jump'><\/a>\n\n## 1.[Import Section](#imports)  <br>\n\n_________________\n\n## 2.[Exploration](#EDA)<br>\n### 2.1.[Numarical EDA](#NEDA) \n### 2.2.[Categorical EDA](#QEDA) <br>\n_________________\n\n## 3.[DataPreprocess](#preprocess)<br>\n### 3.1.[Clean NA values](#NA)\n#### 3.1.1.[Numarics Na Valus](#NNA) \n#### 3.1.2.[NON Numarics Na Valus](#NONNA) <br>\n\n### 3.2.[Remove Out liers and irelevent Data](#outliers)<br>\n### 3.3.[Covert Some Numaric into Categorical ](#NumCAT)<br>\n### 3.4.[Encoding And Scalling](#Encoding)<br>\n#### 3.4.1.[ordinal Encoding](#ordinal)\n#### 3.4.2.[One-Hot Encoding](#One-Hot)\n#### 3.4.3.[Data Scaling ](#scaling)<br>\n### 3.5.[Clean Duplication](#Duplication)\n\n<br>","1d364b39":"#### Explore All numaric vars distripution","62593831":"#### Numarics Na Valus <a id='NNA'><\/a>\n##### [Contnet](#Jump)","4e59076a":"numeric_feats = df.dtypes[df.dtypes != \"object\"].index\nskewed_feats = df[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' : skewed_feats})\nskewness.head(10)\nskewed_features = skewness.index.to_list()\nskewed_features.remove('SalePrice')\nlam = 0.15\nfor col in skewed_features:\n    df[col] = boxcox1p(df[col], lam)\n","267ef660":"#### import Model ","b4ccc9f4":"    Functional: Home functionality (Assume typical unless deductions are warranted)\n\n\n    MSZoning: Identifies the general zoning classification of the sale.\n    Electrical: Electrical system\n    SaleType: Type of sal\n    KitchenQual: Kitchen quality\n    Exterior1st: Exterior covering on house\n    Exterior2nd: Exterior covering on house (if more than one material)","00d31f0d":"#### MasVnrArea: Masonry veneer area in square feet\n","ce46c168":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"]) #log +1 had give me better results in the last compitaion","32d5edbb":"#### LotFrontage: Linear feet of street connected to property","496b0871":"###### PoolQC \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n fill the NA with None\n\n","af04656a":"train['SalePrice']","f55c30d0":"#### ordinal Encoding <a id='ordinal'><\/a>\n##### [Contnet](#Jump)\nQulaity and cond and rating","03d64456":"#### NON Numarics Na Values <a id='NONNA'><\/a>\n##### [Contnet](#Jump)","5a296058":"any thing with year or month or cond or quality ","6895df9d":"### Preparing submission:","421620bf":"#### Na To none based on the docs \n    PoolQC      NA\tNo Pool\n    MiscFeature: Miscellaneous feature not covered in other categories\n    alley       NA \tNo alley access\n    Fence       NA\tNo Fence\n    FireplaceQu No Fireplace\n    'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond' No Garage\n    BsmtCond , BsmtQual, BsmtExposure,BsmtFinType1,BsmtFinType2   No Basement\n    MasVnrType None = None","b83502fa":"### Lests start woth numaric Vars <a id='NEDA'><\/a>\n##### [Contnet](#Jump)","f966521e":"###### MiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n###### MiscVal: $Value of miscellaneous feature\n","791626b2":"## Imports <a id='imports'><\/a>\n##### [Contnet](#Jump)","015da295":"### Note\n- ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond') are All Have the same missing Data and like the Year there ","d549d88c":"##### Note\nI have to put is Zero as the Building has no garage there \n\nalso all years must not be numaric","a6f2aa37":"### Non Numaric Features <a id='QEDA'><\/a>\n##### [Contnet](#Jump)","497ebda4":"----","b272b528":"#### See All count Plots \n","cdb232e3":"### Remove Out liers and irelevent Data <a id='outliers'><\/a>\n##### [Contnet](#Jump)","79737d96":"#### Data Scaling <a id='scaling'><\/a>\n##### [Contnet](#Jump)","0ac53820":"for col in [\"MSSubClass\", 'OverallQual' ,\"OverallCond\"\n            , 'YearBuilt', \"YrSold\", 'GarageYrBlt', \"MoSold\"]: #this should not be int or floats \n    df[col] = df[col].apply(str)","c59231b6":"\n## EDA  <a id='EDA'><\/a>","f4143bdf":"#### Alley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access","939b0cf8":"### Encoding And Scalling <a id='Encoding'><\/a>\n##### [Contnet](#Jump)","cafb02ef":"\n### Clean NA values <a id='NA'><\/a>\n##### [Contnet](#Jump)"}}