{"cell_type":{"22be5afb":"code","ad13dba8":"code","a4d485ed":"code","127ffdb1":"code","c44b1f15":"code","e0101b18":"code","a371153c":"code","a9d57ed5":"code","37b90199":"code","cd766d5d":"code","dba259df":"code","9d055b27":"code","00b77234":"code","70793536":"code","6e719d5e":"markdown","ab8dd5cb":"markdown"},"source":{"22be5afb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad13dba8":"df = pd.read_csv('\/kaggle\/input\/order_brush_order.csv')\ndf.head()","a4d485ed":"df.index","127ffdb1":"df.columns","c44b1f15":"df.info()\ndf.describe()","e0101b18":"sum(df.duplicated())","a371153c":"# Take a sample shop for the test\nshopid = df['shopid'][0]\nshopid","a9d57ed5":"shop_1 = df.loc[ df['shopid'] == 93950878 ]\nshop_1","37b90199":"# Sort by event_time in ascending order\nshop_1 = shop_1.sort_values(by=['event_time'])\nshop_1","cd766d5d":"(shop_1['event_time'].min(), shop_1['event_time'].max())","dba259df":"from datetime import datetime, date\n\n# Convert date string to datetime object\n# Ref: https:\/\/www.programiz.com\/python-programming\/datetime\/strptime\n#\n# %Y - Year in four digits.\n# %m - Month as a zero-padded decimal number.\n# %d - Day of the month as a zero-padded decimal.\n# \n# %H - Hour (24-hour clock) as a zero-padded decimal number.\n# %M - Minute as a zero-padded decimal number.\n# %S - Second as a zero-padded decimal number.\ntime_1 = datetime.strptime(shop_1['event_time'].iloc[0], \"%Y-%m-%d %H:%M:%S\")\ntime_2 = datetime.strptime(shop_1['event_time'].iloc[1], \"%Y-%m-%d %H:%M:%S\")\n\n(time_1, time_2)","9d055b27":"# Difference between two dates and times\ntime_2 - time_1","00b77234":"# Try to resampling to 1 hour\n# Ref:\n#      - https:\/\/riptutorial.com\/pandas\/example\/7083\/downsampling-and-upsampling\n#      - https:\/\/machinelearningmastery.com\/resample-interpolate-time-series-data-python\/\n# NOTE: Resampling issue cannot resolve\nshop_1.resample('60min')","70793536":"prev_time = ''\n\nfor curr_time in shop_1['event_time']:\n    if (prev_time == ''):\n        prev_time = curr_time\n        continue\n        \n    t1 = datetime.strptime(prev_time, \"%Y-%m-%d %H:%M:%S\")\n    t2 = datetime.strptime(curr_time, \"%Y-%m-%d %H:%M:%S\")\n    \n    print(t2 - t1)","6e719d5e":"## Conc. Rate Test","ab8dd5cb":"## Explore the data"}}