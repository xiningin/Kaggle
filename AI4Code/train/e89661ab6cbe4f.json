{"cell_type":{"3e00cccc":"code","c5bcc8c1":"code","cffb2674":"code","7d857b37":"code","150ed71e":"code","22d29309":"code","6f6758a5":"code","3fdd6ec5":"code","c4a19a1e":"code","778561d3":"code","031c4241":"code","7da45ec4":"code","b594aece":"code","b4dc14f4":"code","a3228f74":"code","bf05daec":"code","7ead8bf0":"code","59b60e24":"code","cb89e6d5":"code","cbb776d0":"code","ba0e974f":"code","fac22f8a":"code","46030a68":"code","4c487b2f":"code","ea55ccc7":"code","623daad9":"code","8be0167a":"code","e94c668a":"code","2b2632f4":"code","5a14767d":"code","bcf1ba0b":"code","86f24323":"code","a24dbf1a":"code","7e086072":"code","e6effa58":"code","d1b571e7":"markdown","034c2805":"markdown","d13bc461":"markdown","6e62faaa":"markdown","606d663c":"markdown","a1117f74":"markdown","f3e795d7":"markdown","6073450d":"markdown","e8c097e7":"markdown","ace6a81a":"markdown","70a09715":"markdown","1aca3f5a":"markdown","ab447c8f":"markdown"},"source":{"3e00cccc":"import numpy as np\nimport pandas as pd \nfrom pathlib import Path\nimport tensorflow as tf\nfrom keras.preprocessing import image\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Input,Dropout,Flatten,concatenate,AveragePooling2D\nfrom keras.utils import to_categorical,plot_model\nfrom keras.models import Model\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","c5bcc8c1":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.png'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_train_png = np.array(image_data)\ny_train_png = np.array(labels)","cffb2674":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_train_jpg = np.array(image_data)\ny_train_jpg = np.array(labels)","7d857b37":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpeg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_train_jpeg = np.array(image_data)\ny_train_jpeg = np.array(labels)","150ed71e":"x_train = np.concatenate((x_train_png,x_train_jpg,x_train_jpeg))\ny_train = np.concatenate((y_train_png,y_train_jpg,y_train_jpeg))","22d29309":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.png'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_valid_png = np.array(image_data)\ny_valid_png = np.array(labels)","6f6758a5":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_valid_jpg = np.array(image_data)\ny_valid_jpg = np.array(labels)","3fdd6ec5":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpeg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_valid_jpeg = np.array(image_data)\ny_valid_jpeg = np.array(labels)","c4a19a1e":"x_valid = np.concatenate((x_valid_png,x_valid_jpg,x_valid_jpeg))\ny_valid = np.concatenate((y_valid_png,y_valid_jpg,y_valid_jpeg))","778561d3":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Test')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.png'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_test_png = np.array(image_data)\ny_test_png = np.array(labels)","031c4241":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Test')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_test_jpg = np.array(image_data)\ny_test_jpg = np.array(labels)","7da45ec4":"p = Path('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Test')\ndirs = p.glob('*')\nlabels = []\nimage_data = []\nlabel_dict = {'Non Mask':0 , 'Mask':1}\nfor folder in dirs:\n    label = str(folder).split('\/')[-1]\n    print(label)\n    for image_path in folder.glob('*.jpeg'):\n        img = image.load_img(image_path,target_size = (128,128))\n        img_array =image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[label])\nx_test_jpeg = np.array(image_data)\ny_test_jpeg = np.array(labels)","b594aece":"x_test = np.concatenate((x_test_png,x_test_jpg,x_test_jpeg))\ny_test = np.concatenate((y_test_png,y_test_jpg,y_test_jpeg))","b4dc14f4":"print(\"Train Data:\",x_train.shape,y_train.shape)\nprint('Test Data',x_test.shape,y_test.shape)\nprint('Validation Data',x_valid.shape,y_valid.shape)","a3228f74":"image_size = x_train.shape[1]\nx_train = np.reshape(x_train,[-1,image_size,image_size,3])\nx_test = np.reshape(x_test,[-1,image_size,image_size,3])\nx_valid = np.reshape(x_valid,[-1,image_size,image_size,3])\nx_train_mean = np.mean(x_train, axis=0)\nx_train -= x_train_mean\/10\nx_test -= x_train_mean\/10\nx_valid-=x_train_mean\/10\n","bf05daec":"num_labels = len(np.unique(y_train))\ny_train = to_categorical(y_train)\nY_test = y_test\ny_test = to_categorical(y_test)\ny_valid = to_categorical(y_valid)","7ead8bf0":"def plot_function(history):\n    fig,ax = plt.subplots(1,2,figsize = (25,5))\n    ax[0].plot(history.history['loss'],color = 'red',label = 'train_loss')\n    ax[0].set_title('Loss and val_loss')\n    ax[0].plot(history.history['val_loss'],color = 'green',label = 'val_loss')\n    ax[0].legend()\n    ax[1].plot(history.history['accuracy'],color = 'orange',label = 'train_accuracy')\n    ax[1].set_title('accuracy and val_accuracy')\n    ax[1].plot(history.history['val_accuracy'],color = 'black',label = 'val_accuarcy')\n    ax[1].legend()","59b60e24":"def LeNet(input_shape,num_labels):\n    Inputs = Input(shape = input_shape)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(Inputs)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = AveragePooling2D(pool_size = (2,2),strides = 1)(x)\n    x = AveragePooling2D(pool_size = (2,2),strides = 2)(x)\n    x = Flatten()(x)\n    x = Dense(120,activation = 'relu')(x)\n    x = Dense(84,activation = 'relu')(x)\n    Outputs = Dense(num_labels,activation = 'softmax')(x)\n    LeNet_model = Model(Inputs,Outputs)\n    return LeNet_model","cb89e6d5":"input_shape = (image_size,image_size,3)\nmodel = LeNet(input_shape = input_shape,num_labels = num_labels)\noptimizer = tf.keras.optimizers.Adam(learning_rate = 0.001,decay = 6e-5)\nmodel.compile(loss = 'binary_crossentropy',optimizer = optimizer,metrics = ['accuracy'])\nmodel.summary()","cbb776d0":"history1 = model.fit(x_train,y_train,batch_size = 10,epochs = 100,validation_data = (x_valid,y_valid))","ba0e974f":"plot_function(history1)","fac22f8a":"loss,acc = model.evaluate(x_test,y_test,batch_size = 10)\nprint('Loss:',loss,'Accuracy: ',acc)","46030a68":"def LeNet1(input_shape,num_labels):\n    Inputs = Input(shape = input_shape)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(Inputs)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n    x = Conv2D(filters = 32,kernel_size = (5,5),strides = 1,padding = 'same',activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n    x = AveragePooling2D(pool_size = (2,2),strides = 1)(x)\n    x = Dropout(0.3)(x)\n    x = AveragePooling2D(pool_size = (2,2),strides = 2)(x)\n    x = Flatten()(x)\n    x = Dense(120,activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n    x = Dense(84,activation = 'relu')(x)\n    Outputs = Dense(num_labels,activation = 'softmax')(x)\n    LeNet_model1 = Model(Inputs,Outputs)\n    return LeNet_model1","4c487b2f":"input_shape = (image_size,image_size,3)\nmodel1 = LeNet1(input_shape = input_shape,num_labels = num_labels)\noptimizer = tf.keras.optimizers.Adam(learning_rate = 0.001,decay = 6e-5)\nmodel1.compile(loss = 'binary_crossentropy',optimizer = optimizer,metrics = ['accuracy'])\nmodel1.summary()","ea55ccc7":"history2 = model1.fit(x_train,y_train,batch_size = 10,epochs = 100,validation_data = (x_valid,y_valid))","623daad9":"loss,acc = model1.evaluate(x_test,y_test,batch_size = 10)\nprint('loss:',loss,'Accuracy:',acc)","8be0167a":"plot_function(history2)","e94c668a":"def ynetwork(input_shape,num_labels):\n    input1 = Input(shape = input_shape)\n    x = input1\n    x = Conv2D(32,kernel_size = (2,2),padding = 'same',activation = 'relu')(x)\n    x = MaxPooling2D(pool_size = (2,2))(x)\n    x = Dropout(0.3)(x)\n    x = Conv2D(64,kernel_size = (2,2),padding = 'same',activation = 'relu')(x)\n    x = MaxPooling2D(pool_size = (2,2))(x)\n    x = Dropout(0.3)(x)\n    x = Conv2D(64,kernel_size = (2,2),padding = 'same',activation = 'relu')(x)\n    x = MaxPooling2D(pool_size = (2,2))(x)\n    x = Dropout(0.4)(x)\n    x = Conv2D(128,kernel_size = (2,2),padding = 'same',activation = 'relu')(x)\n    x = Dropout(0.3)(x)\n \n\n    input2 = Input(shape = input_shape)\n    y = input2\n    y = Conv2D(32,kernel_size = (2,2),padding = 'same',activation = 'relu')(y)\n    y = MaxPooling2D(pool_size = (2,2))(y)\n    y = Dropout(0.3)(y)\n    y = Conv2D(64,kernel_size = (2,2),padding = 'same',activation = 'relu')(y)\n    y = MaxPooling2D(pool_size = (2,2))(y)\n    y = Dropout(0.3)(y)\n    y = Conv2D(64,kernel_size = (2,2),padding = 'same',activation = 'relu')(y)\n    y = MaxPooling2D(pool_size = (2,2))(y)\n    y = Dropout(0.3)(y)\n    y = Conv2D(128,kernel_size = (2,2),padding = 'same',activation = 'relu')(y)\n    y = Dropout(0.3)(y)\n    \n    z = concatenate([x,y])\n    z = Flatten()(z)\n    z = Dense(256,activation = 'relu')(z)\n    z = Dense(64,activation = 'relu')(z)\n    outputs = Dense(num_labels,activation = 'sigmoid')(z)\n    y_net = Model([input1,input2],outputs)\n    return y_net\n","2b2632f4":"model2 = ynetwork(input_shape = input_shape,num_labels = num_labels)\nmodel2.compile(loss = 'binary_crossentropy',optimizer = 'adam',metrics = ['accuracy'])","5a14767d":"history3 = model2.fit([x_train,x_train],y_train,batch_size =10,epochs = 100,validation_data = ([x_valid,x_valid],y_valid))","bcf1ba0b":"model2.evaluate([x_test,x_test],y_test,batch_size = 10)","86f24323":"plot_function(history3)","a24dbf1a":"prediction = model2.predict([x_test,x_test])","7e086072":"prediction = np.argmax(prediction,axis = 1)","e6effa58":"c = 4\nfig,ax = plt.subplots(1,c,figsize = (25,10))\nfor i in range(0,c):\n    rand_index = np.random.randint(1,99)\n    ax[i].imshow(x_test[rand_index]\/255)\n    ax[i].set_title(f\"Predicted:{prediction[rand_index]},Actual:{Y_test[rand_index]}\")\n    ","d1b571e7":"# Loading Images","034c2805":"<b>The Y Network performs very well on the dataset","d13bc461":"# Data PreProcessing","6e62faaa":"# Trying out different Neural Network Architectures","606d663c":"# Plot Function to see Model Performance","a1117f74":"3. Y Network","f3e795d7":"3. Test Images","6073450d":"1. Train Images","e8c097e7":"2. Adding Dropout to the same model","ace6a81a":"# Using model on test data","70a09715":"2. Validation Images","1aca3f5a":"# Importing Required Libraries","ab447c8f":"1. LeNet5 inspired model"}}