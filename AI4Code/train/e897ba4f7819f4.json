{"cell_type":{"69b8f9ed":"code","2268349a":"code","3f77886b":"code","be8380e3":"code","d30474e9":"code","491e1ced":"code","2eeb290b":"code","f966aae6":"code","aa8144e2":"code","dcb707c8":"code","30ec424f":"code","434ade72":"code","4a0c17fc":"code","689be952":"code","61b6c665":"code","3efd03da":"code","dde1a70c":"code","6530a696":"code","e7c3ea1a":"code","53a41ec6":"code","c8e7b0e5":"code","d1c05f0b":"code","01f3ac8e":"code","827e0aa9":"code","1caa47d6":"code","c9524bf4":"code","7ec66cd5":"code","419b6485":"code","830bd2f9":"code","922eccbd":"code","e65901af":"code","679431fb":"code","8103987b":"code","181c2589":"code","bb997cff":"code","9c02d523":"code","a3a194d2":"code","0bbedb2a":"code","f226a4d6":"code","f7db9d76":"code","366952b6":"code","28a3fbeb":"code","9694d801":"code","d75bda19":"markdown","7eb5388f":"markdown","0f45a494":"markdown","12ad30e1":"markdown","0bf3c356":"markdown","8976a571":"markdown","f78616b1":"markdown","e0262541":"markdown","4e03b1cd":"markdown","bf9b3171":"markdown","095575cf":"markdown","34dbf8b7":"markdown","25fb08be":"markdown","a5736f6a":"markdown","5fe66329":"markdown"},"source":{"69b8f9ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2268349a":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nimport seaborn as sns\nimport datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport random\nfrom datetime import datetime\nimport matplotlib.dates as mdates\nimport json\n\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport geopandas as gpd\nimport geoplot\nfrom fbprophet import Prophet","3f77886b":"slo = pd.read_excel(\"..\/input\/last-data\/stevilo_potrjenih_primerov_slo.xlsx\")\ngostota = pd.read_excel(\"..\/\/input\/cov-slo\/gostota1.xlsx\")\npeople_world = pd.read_excel(\"..\/\/input\/owidcoviddata1xlsx\/owid-covid-data.xlsx\")\ncov= pd.read_csv(\"..\/\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nsr= pd.read_excel(\"..\/\/input\/last-data\/statistine_regije.xlsx\")\ncov19 = pd.read_csv(\"..\/\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nage= pd.read_excel(\"..\/\/input\/last-data\/age.xlsx\")\nslovsi = pd.read_excel(\"..\/\/input\/slo-vsi\/COVID-19-vsi-podatki.xlsx\")\nsrgeo= gpd.read_file('..\/\/input\/sr-geojson\/SR.geojson')","be8380e3":"new_header = slo.iloc[0] #grab the first row for the header\nslo = slo[1:] #take the data less the header row\nslo.columns = new_header","d30474e9":"slo.columns=['Datum prijave', 'Dnevno \u0161tevilo testiranj', 'Skupno \u0161tevilo testiranj',\n       'Dnevno \u0161tevilo testiranj', 'Skupno \u0161tevilo testiranj', 'Mo\u0161ki',\n       '\u017denske', 'Skupaj', 'Mo\u0161ki', '\u017denske', 'Skupaj ALL']","491e1ced":"people_world= people_world.loc[:16813,:]","2eeb290b":"cov.isnull().sum()","f966aae6":"sns.boxplot(x=\"gender\", y = \"age\", data = cov)","aa8144e2":"cov[\"gender\"].fillna(\"bla\", inplace = True)\ncov[\"gender\"] = cov[\"gender\"].map(lambda i: np.random.randint(2) if i ==\"bla\" else i )\ncov[\"gender\"] = cov[\"gender\"].replace({\"male\" : 0 , \"female\" : 1})\ncov[\"age\"].fillna(\"bla\", inplace = True)\ncov[\"age\"] = cov[\"age\"].map(lambda i: np.random.randint(45,56) if i ==  \"bla\" else i )","dcb707c8":"age_female_world = cov[cov[\"gender\"]==1][\"age\"]\nage_male_world = cov[cov[\"gender\"]==0][\"age\"]","30ec424f":"group1=[]\ngroup2=[]\ngroup3=[]\ngroup4=[]\ngroup5=[]\ngroup6=[]\ngroup7=[]\ngroup8=[]\ngroup9=[]\ngroup10=[]\nfor i in age_male_world:\n    if 0<i<4: \n        group1.append(i),\n    elif 5<i<14: \n        group2.append(i),\n    elif 15<i<24: \n        group3.append(i),\n    elif 25<i<34:\n        group4.append(i),\n    elif 35<i<44: \n        group5.append(i),\n    elif 45<i<54:\n        group6.append(i),\n    elif 55<i<64:\n        group7.append(i),\n    elif 65<i<74:\n        group8.append(i),\n    elif 75<i<84: \n        group9.append(i),\n    else:\n        group10.append(i)\n","434ade72":"group1= len(group1)\ngroup2=len(group2)\ngroup3=len(group3)\ngroup4=len(group4)\ngroup5=len(group5)\ngroup6=len(group6)\ngroup7=len(group7)\ngroup8=len(group8)\ngroup9=len(group9)\ngroup10=len(group10)\nprint(group10,group9,group8,group7,group6,group5,group4,group3,group2,group1)","4a0c17fc":"groupf1=[]\ngroupf2=[]\ngroupf3=[]\ngroupf4=[]\ngroupf5=[]\ngroupf6=[]\ngroupf7=[]\ngroupf8=[]\ngroupf9=[]\ngroupf10=[]\nfor i in age_female_world:\n    if 0<i<4: \n        groupf1.append(i),\n    elif 5<i<14: \n        groupf2.append(i),\n    elif 15<i<24: \n        groupf3.append(i),\n    elif 25<i<34:\n        groupf4.append(i),\n    elif 35<i<44: \n        groupf5.append(i),\n    elif 45<i<54:\n        groupf6.append(i),\n    elif 55<i<64:\n        groupf7.append(i),\n    elif 65<i<74:\n        groupf8.append(i),\n    elif 75<i<84: \n        groupf9.append(i),\n    else:\n        groupf10.append(i)","689be952":"groupf1= len(groupf1)\ngroupf2= len(groupf2)\ngroupf3=len(groupf3)\ngroupf4=len(groupf4)\ngroupf5=len(groupf5)\ngroupf6=len(groupf6)\ngroupf7=len(groupf7)\ngroupf8=len(groupf8)\ngroupf9=len(groupf9)\ngroupf10=len(groupf10)\nprint(groupf10,groupf9,groupf8,groupf7,groupf6,groupf5,groupf4,groupf3,groupf2,groupf1)","61b6c665":"df = {'age group': ['85+','75-84',\"65-74\",'55-64','45-54','35-44','25-34','15-24','5-14','0-4'],\n  'female': [162,11,31,54,31,38,36,15,2,2]} \nd = {'age group': ['85+','75-84',\"65-74\",'55-64','45-54','35-44','25-34','15-24','5-14','0-4'],\n  'male': [251,12,35,49,51,57,48,9,5,3]}\nworld_male_age = pd.DataFrame(d)\nworld_female_age = pd.DataFrame(df)","3efd03da":"fig, axarr  = plt.subplots(1,2,figsize = (18,5))\nplt.subplots_adjust(wspace=0.08)\nplt.suptitle(\"Number of infected people by age until 29.5.2020: Slovenia\", size=16)\nAgeClass = ['85+','75-84',\"65-74\",'55-64','45-54','35-44','25-34','15-24','5-14','0-4']\n\nplotf = sns.barplot(x=age[\"\u017denske\"], y=age[\"Starostne skupine\"],data = age, label = \"Female\",color = \"r\", alpha = .5,order=AgeClass,ax=axarr[1])\nfor i in plotf .patches:\n    plotf .text(i.get_width()+1, i.get_y()+.55, s=format(int(i.get_width())),fontsize=12,color='black')\nplotf.set_ylabel(\" \")\nplotf.set_xlabel(\"Female\",fontsize=16)\n\nplotm =  sns.barplot(x=age[\"Mo\u0161ki\"], y=\"Starostne skupine\",data = age,label = \"Male\", color = \"b\",order=AgeClass, alpha = .5, ax=axarr[0])\n  \n\nfor i in plotm.patches:\n    plotm.text(i.get_width()+5, i.get_y()+.55, s=format(int(i.get_width())),\n             fontsize=12,color='black')\nplotm.set_yticklabels([])   # Hide the left y-axis tick-labels\nplotm.set_ylabel(\" \")\nplotm.set_xlabel(\"Male\",fontsize=16)\nplotm.invert_xaxis()   # labels read left to right\n\n","dde1a70c":"fig, axarr  = plt.subplots(1,2,figsize = (18,5))\nplt.subplots_adjust(wspace=0.08)\nplt.suptitle(\"Number of infected people by age: World*\", size=16)\nAgeClass = ['85+','75-84',\"65-74\",'55-64','45-54','35-44','25-34','15-24','5-14','0-4']\n\nplotf = sns.barplot(x=\"female\", y=\"age group\",data = world_female_age, label = \"female\",color = \"r\", alpha = .5,ax=axarr[1])\nfor i in plotf .patches:\n    plotf .text(i.get_width()+1, i.get_y()+.55, s=format(int(i.get_width())),fontsize=12,color='black')\nplotf.set_ylabel(\" \")\nplotf.set_xlabel(\"Female\",fontsize=16)\n\nplotm =  sns.barplot(x=\"male\", y=\"age group\",data = world_male_age,label = \"male\", color = \"b\", alpha = .5, ax=axarr[0])\n  \n\nfor i in plotm.patches:\n    plotm.text(i.get_width()+12, i.get_y()+.55, s=format(int(i.get_width())),\n             fontsize=12,color='black')\nplotm.set_yticklabels([])   # Hide the left y-axis tick-labels\nplotm.set_ylabel(\" \")\nplotm.set_xlabel(\"Male\",fontsize=16)\nplotm.invert_xaxis()   # labels read left to right","6530a696":"slovsi1 = slovsi.copy()\nslovsi1[\"Datum\"] = slovsi1[\"Datum\"].dt.strftime(\"%d-%b\")","e7c3ea1a":"\nplt.figure(figsize= (14,10))\npositiveslo = sns.barplot(x= \"Datum\", y = \"Dnevno \u0161tevilo pozitivnih oseb\", data = slovsi1, color =  \"Green\", alpha = .5)\nplt.xticks(rotation=90)\nfor p in positiveslo.patches:\n    positiveslo.annotate(int(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nplt.title(\"New cases per day: Slovenia\")","53a41ec6":"total_cases_world = pd.DataFrame( people_world.groupby(\"date\")[\"new_cases\"].sum().reset_index())\ntotal_cases_world[\"date\"] = pd.to_datetime(total_cases_world[\"date\"])\ntotal_cases_world[\"date\"] = total_cases_world[\"date\"].dt.strftime(\"%d-%b\")","c8e7b0e5":"plt.figure(figsize= (18,14))\npositive_world = sns.barplot(x=total_cases_world.iloc[24:,0], y = \"new_cases\", data = total_cases_world, color =  \"Green\", alpha = .5)\nplt.xticks(rotation=90, fontsize=8)\npositive_world .set_ylabel(\"Positive (daily)\")\npositive_world .set_xlabel(\"Date\")\nplt.title(\"New cases per day: World\",fontsize = 18)","d1c05f0b":"plt.figure(figsize= (14,10))\nhospitalized  = sns.barplot(x= \"Datum\", y = \"Skupno \u0161tevilo hospitaliziranih oseb na posamezni dan\",label = \"All hospitalized\", data = slovsi1, color =  \"r\", alpha = .5)\nfor p in hospitalized.patches:\n    hospitalized.annotate(int(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 11),fontsize = 9, textcoords = 'offset points')\nintensive = sns.barplot(x= \"Datum\", y = \"Skupno \u0161tevilo oseb na intenzivni negi na posamezni dan\",label = \"All persons in intensive care\", data = slovsi1, color =  \"Green\", alpha = .5)\nfor p in intensive.patches:\n    intensive.annotate(int(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 11),fontsize = 9, textcoords = 'offset points')\nplt.title(\"Hospitalized\/intensive care : Slovenia\", fontsize = 18)\nplt.xticks(rotation=90)\nplt.legend()","01f3ac8e":"plt.figure(figsize= (14,10))\ntested_daily= sns.barplot(x= \"Datum\", y = \"Dnevno \u0161tevilo testiranj\",label = \"Tested (daily)\", data = slovsi1, color =  \"r\", alpha = .5)\nfor p in tested_daily.patches:\n    tested_daily.annotate(int(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10),fontsize = 8, textcoords = 'offset points')\npositive_daily= sns.barplot(x= \"Datum\", y = \"Dnevno \u0161tevilo pozitivnih oseb\",label = \"Positive (daily)\",data = slovsi1, color =  \"Green\", alpha = .5)\nfor p in positive_daily.patches:\n    positive_daily.annotate(int(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), fontsize = 8,textcoords = 'offset points')\n\nplt.title(\"Daily tested\/positive : Slovenia\", fontsize = 18)    \nplt.xticks(rotation=90)\nplt.legend()","827e0aa9":"plt.figure(figsize=(18,12))\nsns.set_style(\"darkgrid\")\npositive_slo = sns.lineplot(x= \"Datum\",y= \"Skupno \u0161tevilo pozitivnih oseb\",data=slovsi, color = \"r\",label = \" Total positive\")\ndeaths_slo = sns.lineplot(x= \"Datum\",y= \"Skupno \u0161tevilo umrlih\",data=slovsi, color = \"black\",label = \"Total deaths\")\n\n\nplt.ylabel(\"Total cases\")\nplt.xlabel(\"Date\")\nplt.legend()\nplt.title(\"Slovenia\", fontsize = 16)\nplt.xticks(rotation=45,horizontalalignment='right',fontsize = 9)\ndeaths_slo.set(xticks=slovsi.Datum.values)   \ndeaths_slo.xaxis.set_major_formatter(mdates.DateFormatter('%d.%b'))","1caa47d6":"total_deaths_world = pd.DataFrame(people_world.groupby([\"date\"])[\"total_deaths\"].sum().reset_index())\ntotal_deaths_world[\"date\"] = pd.to_datetime(total_deaths_world[\"date\"])\ntotal_cases_world1 = pd.DataFrame( people_world.groupby(\"date\")[\"total_cases\"].sum().reset_index())\ntotal_cases_world1[\"date\"] = pd.to_datetime(total_cases_world1[\"date\"])","c9524bf4":"plt.figure(figsize=(18,14))\npositive_world= sns.lineplot(x= \"date\",y= \"total_cases\",data=total_cases_world1, color = \"r\", label = \"Total positive\")\ndeaths_world = sns.lineplot(x= \"date\",y= \"total_deaths\",data=total_deaths_world, color = \"black\", label = \"Total deaths\")\n\n\nplt.xticks(rotation=45,horizontalalignment='right')\npositive_world.set_ylabel(\"Total cases in milions\")\npositive_world.set_xlabel(\"Date\")\nplt.legend()\nplt.title(\"World\", fontsize = 18)\npositive_world.set(xticks=total_deaths_world.date.values)\npositive_world.xaxis.set_major_formatter(mdates.DateFormatter('%d.%b')) \npositive_world.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","7ec66cd5":"plt.figure(figsize=(18,10))\ntested_slo = sns.lineplot(x= \"Datum\",y= \"Skupno \u0161tevilo testiranj\",data=slovsi, color = \"b\",label = \"Tested\")\nplt.xticks(rotation=45,horizontalalignment='right', fontsize =9)\nplt.title(\"Slovenia\", fontsize = 16)\nplt.legend(loc=2)\ntested_slo.set(xticks=slovsi.Datum.values)\ntested_slo.xaxis.set_major_formatter(mdates.DateFormatter('%d.%b')) ","419b6485":"total_tests_world = pd.DataFrame( people_world.groupby(\"date\")[\"total_tests\"].sum().reset_index())\ntotal_tests_world[\"date\"] = pd.to_datetime(total_tests_world[\"date\"])","830bd2f9":"plt.figure(figsize=(14,8))\ntested_world = sns.lineplot(x=total_tests_world[\"date\"][:-2],y = \"total_tests\", data = total_tests_world,color = \"b\",label = \"Tested\")\nplt.xticks(rotation=45, horizontalalignment='right')\nplt.title(\"World\", fontsize=16)\ntested_world.set_ylabel(\"Tested(All) in milions\")\ntested_world.set_xlabel(\"Date\")\ntested_world.set(xticks= total_tests_world.date.values)\ntested_world.xaxis.set_major_formatter(mdates.DateFormatter('%d.%b')) \ntested_world.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))","922eccbd":"plt.figure(figsize=(12,10))\ng = sns.barplot(x=\"\u0161t. Do 28.4\", y=\"name\",data = sr.sort_values(\"\u0161t. Do 28.4\", ascending = False),color = \"g\", alpha =.5)\ng.set_ylabel(\"The name of the statistical region\")\ng.set_xlabel(\"Number of infected\")\nfor i in g.patches:\n    g.text(i.get_width()+6, i.get_y()+.55, s=format(round(i.get_width())),\n             fontsize=12,color='black')\ng.set_title (\"Infected by statistical regions until 29.5.2020\", fontsize =12)\n","e65901af":"srgeo['coords'] = srgeo['geometry'].apply(lambda x: x.representative_point().coords[:])\nsrgeo['coords'] = [coords[0] for coords in srgeo['coords']]\nsr = pd.concat([sr, srgeo['coords'] ], axis = 1)","679431fb":"\nsr_plot= geoplot.choropleth(srgeo,figsize=(16,8),hue = sr[\"\u0161t. Do 28.4\"],  cmap='Pastel2', legend=True)\nplt.title(\"Infected by statistical regions until 29.5.2020\", fontsize=12)\nfor idx, row in sr[:12].iterrows():\n        plt.annotate(s=row['\u0161t. Do 28.4'],xy=row['coords'],horizontalalignment='center', fontsize=16, color = \"black\" )","8103987b":"\npopulation_density= pd.concat([gostota, srgeo['coords'] ], axis = 1)\npopulation_density_plot = geoplot.choropleth(srgeo,figsize=(16,8),hue = gostota[\"dnsty_p\"],  cmap='Pastel2', legend=True)\nplt.title(\"Population density of Slovenia per km\u00b2\")\nfor idx, row in population_density.iterrows():\n        plt.annotate(s=row[\"dnsty_p\"],xy=row['coords'],horizontalalignment='center', fontsize=16, color = \"black\" )","181c2589":"world = cov19.groupby(\"Country\/Region\")[[\"Confirmed\",\"Deaths\",\"Recovered\"]].max().reset_index()","bb997cff":"init_notebook_mode(connected=True) ","9c02d523":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n      \n        reversescale = True,\n        locations = world['Country\/Region'],\n        locationmode = \"country names\",\n        z = world['Confirmed'],\n        text = world['Country\/Region'],\n        colorbar = {'title' : \"Confirmed\"},\n      ) \n\nlayout = dict(title = \"Total infected until 13.5.2020\",\n                geo = dict(showframe = False,projection = {'type':'mercator'}))\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","a3a194d2":"case_per_milion = pd.DataFrame(people_world.groupby(\"location\")[\"total_cases_per_million\"].max().reset_index())\ndata = dict(\n        type = 'choropleth',\n        colorscale =\"Reds\",\n        zmax =300,\n        zmin = 0,\n        zsrc =\"europe\",\n       \n        locations = people_world['location'],\n        locationmode = \"country names\",\n        z = people_world['population_density'],\n        marker = go.choropleth.Marker(line = go.choropleth.marker.Line(color = 'rgb(180,180,180)', width = 0.5) ),\n        colorbar = {'title' : \"population density per km\u00b2\"},\n      ) \n\nlayout = dict(title = \"Population density per km\u00b2\",\n                geo = dict(showframe = False,projection = {'type':'mercator'})\n             )\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","0bbedb2a":"data = dict(\n        type = 'choropleth',\n        colorscale =\"Rainbow\",\n        zmax =5000,\n        zmin = 0,\n        zsrc =\"europe\",\n       \n        locations = case_per_milion['location'],\n        locationmode = \"country names\",\n        z = case_per_milion[\"total_cases_per_million\"],\n        marker = go.choropleth.Marker(line = go.choropleth.marker.Line(color = 'rgb(180,180,180)', width = 0.5) ),\n        colorbar = {'title' : \"Total infected per million\"},\n      ) \n\nlayout = dict(title = \"Total infected cases per million population\",\n                geo = dict(showframe = False,projection = {'type':'mercator'})\n             )\n\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","f226a4d6":"slovsi = slovsi.copy()\nslovsi = slovsi.rename(columns = {\"Datum\":\"ds\",\"Skupno \u0161tevilo pozitivnih oseb\":\"y\"}) ","f7db9d76":"pred = slovsi[[\"ds\",\"y\"]]\npred.tail()","366952b6":"model = Prophet(interval_width=0.95)\nmodel_positive = model.fit(pred)\nfuture = model_positive.make_future_dataframe(periods=14)\nfuture.tail()","28a3fbeb":"forecast = model_positive.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","9694d801":"fig = model.plot(forecast, xlabel='Date', ylabel='Value')\nax = fig.gca()\nax.set_title(\"Forecast of infected in Slovenia\", size=20)\n\n\n","d75bda19":"Next I created 10 age groups from column Age for male and female.\nThere is probably a better and easier solution for this.","7eb5388f":"**Hospitalized\/intensive care : Slovenia**","0f45a494":"**All Deaths\/Positive: Slovenia vs. World**","12ad30e1":"I replaced the missing data. For the Age column, I took the age between 45 and 56 years.","0bf3c356":"**Positive: Slovenia vs. World**","8976a571":"Hello!\n\nFirst I would like to say that this is my first project as programer or data scientist.\nBefore I have done only one lesson about Python on Udemy.com.\nI am a pure beginner in programming and so please comment and give me some tips. \nBe gentle.\n\nThanks\n\nThis is analysis, visualization and forecasting with FB Prophet for small country Slovenia\nwith only 2 millions population.","f78616b1":"**Forecasting with FB Prophet**","e0262541":"**Age plots**\n","4e03b1cd":"Data preprocesing","bf9b3171":"*The numbers of infected people are only for people from data COVID19_line_list_data.csv data not the whole World","095575cf":"**Analysis of statistical regions of Slovenia**","34dbf8b7":"**Daily tested\/positive : Slovenia**","25fb08be":"**Tested: Slovenia vs. World**","a5736f6a":"**Population density per km\u00b2 and infected per milion inhabitants.**","5fe66329":"Plot is imperfect because there are a lot of missing data in total tests column."}}