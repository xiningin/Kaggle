{"cell_type":{"0585ebaf":"code","a82ef8fc":"code","a6b3cc8a":"code","4d8c94cb":"code","d8662611":"code","d5676edb":"code","4879f155":"code","62860451":"code","4b41c75f":"code","61ee8413":"code","eae2c774":"code","2b36bbca":"code","e51cd6d2":"code","41c8af32":"code","5cb4042b":"markdown","bbbb4764":"markdown"},"source":{"0585ebaf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfruits = pd.read_table('..\/input\/IPythonData_04042018.txt')\nX_fruits = fruits[['mass','width','height', 'color_score']]\ny_fruits = fruits['fruit_name']","a82ef8fc":"from sklearn.preprocessing import StandardScaler\nX_std = StandardScaler().fit(X_fruits).transform(X_fruits)  ","a6b3cc8a":"mean_vec = np.mean(X_std, axis=0)\ncov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) \/ (X_std.shape[0]-1)\nprint('Covariance matrix \\n%s' %cov_mat)\nprint('NumPy covariance matrix: \\n%s' %np.cov(X_std.T))","4d8c94cb":"eig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)","d8662611":"cor_mat1 = np.corrcoef(X_std.T)\neig_vals, eig_vecs = np.linalg.eig(cor_mat1)\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)","d5676edb":"cor_mat2 = np.corrcoef(X.T)\neig_vals, eig_vecs = np.linalg.eig(cor_mat2)\nprint('Eigenvectors \\n%s' %eig_vecs)\nprint('\\nEigenvalues \\n%s' %eig_vals)","4879f155":"u,s,v = np.linalg.svd(X_std.T)\nu\nfor ev in eig_vecs.T:\n    np.testing.assert_array_almost_equal(1.0, np.linalg.norm(ev))\nprint('Everything ok!')","62860451":"eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\neig_pairs.sort(key=lambda x: x[0], reverse=True)\nprint('Eigenvalues in descending order:')\nfor i in eig_pairs:\n    print(i[0])","4b41c75f":"tot = sum(eig_vals)\nvar_exp = [(i \/ tot)*100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\nwith plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(6, 4))\n\n    plt.bar(range(4), var_exp, alpha=0.5, align='center',\n            label='individual explained variance')\n    plt.step(range(4), cum_var_exp, where='mid',\n             label='cumulative explained variance')\n    plt.ylabel('Explained variance ratio')\n    plt.xlabel('Principal components')\n    plt.legend(loc='best')\n    plt.tight_layout()","61ee8413":"matrix_w = np.hstack((eig_pairs[0][1].reshape(4,1),\n                      eig_pairs[1][1].reshape(4,1)))\nprint('Matrix W:\\n', matrix_w)","eae2c774":"Y = X_std.dot(matrix_w)","2b36bbca":"Y.shape","e51cd6d2":"\nwith plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(6, 4))\n    for lab, col in zip(('apple', 'mandarin', 'orange', 'lemon'),\n                        ('blue', 'red', 'green', 'pink')):\n        plt.scatter(Y[y_fruits==lab, 0],\n                    Y[y_fruits==lab, 1],\n                    label=lab,\n                    c=col)\n    plt.xlabel('Principal Component 1')\n    plt.ylabel('Principal Component 2')\n    plt.legend(loc='lower right')\n    plt.tight_layout()\n    plt.show()","41c8af32":"from sklearn.decomposition import PCA as sklearnPCA\nsklearn_pca = sklearnPCA(n_components=2)\nY_sklearn = sklearn_pca.fit_transform(X_std)\n\nwith plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(6, 4))\n    for lab, col in zip(('apple', 'mandarin', 'orange', 'lemon'),\n                        ('blue', 'red', 'green', 'pink')):\n        plt.scatter(Y[y_fruits==lab, 0],\n                    Y[y_fruits==lab, 1],\n                    label=lab,\n                    c=col)\n    plt.xlabel('Principal Component 1')\n    plt.ylabel('Principal Component 2')\n    plt.legend(loc='lower right')\n    plt.tight_layout()\n    plt.show()","5cb4042b":"# Now (so called) Black Box PCA!","bbbb4764":"### Show PCA results"}}