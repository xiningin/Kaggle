{"cell_type":{"4decc5ca":"code","facf6196":"code","24237461":"code","8a52bdb7":"code","c0575790":"code","c5b6d922":"code","afc211cc":"code","1a08b41c":"code","5f4b273c":"code","70fb9198":"code","c2fe9d46":"code","126e6f0d":"code","8933c10d":"code","ebb178fa":"code","bbe2f56b":"code","5ec48c38":"code","af73f402":"code","3118cd02":"code","5f5839fe":"code","95edf0bd":"markdown","b2ad3d9d":"markdown","ee278b04":"markdown","7a888198":"markdown","bd682c19":"markdown","1458aaaf":"markdown"},"source":{"4decc5ca":"import numpy as np \nimport pandas as pd \nimport os\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Dense, MaxPooling2D, Conv2D, Input, UpSampling2D, Flatten\nfrom tensorflow.keras.layers import BatchNormalization, Dropout\nfrom keras.callbacks import EarlyStopping\n\n\nfrom sklearn.metrics import f1_score, classification_report\n\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom tqdm import tqdm\nimport random\n# to ignore displaying warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","facf6196":"train_path = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\"\ntest_path = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\"\nval_path = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val\"","24237461":"dsize =(64, 64)\n\nlabels = {\"NORMAL\":0, \"PNEUMONIA\":1}","8a52bdb7":"def load_images(dir_path, labels, dsize = (32, 32)):\n    \"\"\"loading images\"\"\"\n    X_image, y_image = [], []\n    for label_name, Id in labels.items():\n        for jpeg in tqdm(os.listdir(os.path.join(dir_path, label_name))):\n            path = os.path.join(dir_path, label_name, jpeg)\n            image = load_img(path, target_size=dsize)\n            X_image.append(image)\n            #self.X_image.append(img_to_array(image)\/255.0)\n            y_image.append(Id)\n    return X_image, y_image\n\ndef display_images(X, y, figure_row=4, figure_cols=4):\n    \"\"\"Display images \"\"\"\n    f, ax = plt.subplots(nrows= figure_row, ncols=figure_cols, \n                         figsize=(figure_row*figure_cols, figure_row*figure_cols)) \n    number_of_images = figure_row * figure_cols\n    img = []\n    for i in range(figure_row):\n        for j in range(figure_cols):\n            while True:\n                rand = np.random.randint(0, len(X)-1)\n                if rand not in img:\n                    img.append(rand)\n                    break\n            image=X[rand]#cv2.imread(self.path_lsts[rand])\n            ax[i, j].imshow(image, resample=True, cmap='gray')\n            ax[i, j].set_title(\"Class-\"+ str(y[rand]), fontsize=16)\n    plt.tight_layout()\n    plt.show()\n    print","c0575790":"X_train_org, y_train = load_images(train_path, labels, dsize = dsize)\n\nX_test_org, y_test = load_images(test_path, labels, dsize = dsize)\n\nX_val_org, y_val = load_images(val_path, labels, dsize = dsize)\n\ndisplay_images(X_train_org, y_train, figure_row=2, figure_cols=4)","c5b6d922":"def preprocess_images(images, y, normalize = True):\n    X = []\n    for i in tqdm(range(len(images))):\n        img = img_to_array(images[i]).astype('float32')\n        if normalize:\n            img = img\/255.0\n        X.append(img)\n    #Shuffle data\n    dataset = list(zip(X, y))\n    random.shuffle(dataset)\n\n    X, y = zip(*dataset)\n    return np.array(X), np.array(y)","afc211cc":"normalize = True\n\nX_train, y_train =preprocess_images(X_train_org, y_train, normalize=normalize)\nprint(\"Shape of X_train:\", X_train.shape)\n\nX_val, y_val =preprocess_images(X_val_org, y_val, normalize=normalize)\nprint(\"Shape of X_val:\", X_val.shape)\n\nX_test, y_test =preprocess_images(X_test_org, y_test, normalize=normalize)\nprint(\"Shape of X_test:\", X_test.shape)","1a08b41c":"def CNN(num_classes=2, input_shape=(64,64,3)):\n    model = Sequential()\n    model.add(Conv2D(16, (8, 8),padding='valid', activation='relu', input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(4, 4), padding='same'))\n    \n    model.add(Conv2D(32, (8, 8), padding='same', activation='relu'))\n    model.add(MaxPooling2D(pool_size=(3, 3), padding='same'))\n    \n    model.add(Conv2D(64, (8, 8), padding='same',activation='relu'))\n    model.add(MaxPooling2D(pool_size=(3, 3), padding='same'))\n    \n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    \n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=['accuracy'])\n    return model","5f4b273c":"model = CNN()\n\nmodel.build(input_shape=(X_train[0].shape))\n\nmodel.summary()","70fb9198":"model.fit(X_train,  y_train, validation_data=(X_val, y_val), \n          epochs=50, batch_size=32)","c2fe9d46":"loss, acc = model.evaluate(X_train, y_train)\nprint(\"Train loss:{}, Train Accuracy:{}\".format(loss, acc))\n\nloss, acc = model.evaluate(X_val, y_val)\nprint(\"Val loss:{}, Val Accuracy:{}\".format(loss, acc))\n\nloss, acc = model.evaluate(X_test, y_test)\nprint(\"Test loss:{}, Test Accuracy:{}\".format(loss, acc))","126e6f0d":"def CNNAE(input_shape):\n    input_img = Input(shape=input_shape)\n\n    x = Conv2D(32, (8, 8), activation='relu', padding='same')(input_img)\n    x = BatchNormalization()(x)\n    x = MaxPooling2D((2, 2), padding='same')(x)\n    \n    x = Conv2D(16, (8, 8), activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    x = MaxPooling2D((2, 2), padding='same')(x)\n    \n    x = Conv2D(8, (8, 8), activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    encoded = MaxPooling2D((2, 2), padding='same')(x)\n    \n    x = Conv2D(8, (8, 8), activation='relu', padding='same')(encoded)\n    x = BatchNormalization()(x)\n    x = UpSampling2D((2, 2))(x)\n    \n    x = Conv2D(16, (8, 8), activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    x = UpSampling2D((2, 2))(x)\n    \n    x = Conv2D(32, (8, 8), activation='relu', padding='same')(x)\n    x = BatchNormalization()(x)\n    x = UpSampling2D((2, 2))(x)\n    \n    decoded = Conv2D(3, (8, 8), activation='sigmoid', padding='same')(x)\n\n    autoencoder = Model(input_img, decoded)\n    autoencoder.compile(optimizer='adam', loss='mean_squared_error')\n    return autoencoder","8933c10d":"cnn_autoencoder = CNNAE(X_train[0].shape)\n\ncnn_autoencoder.summary()","ebb178fa":"cnn_autoencoder.fit(X_train, X_train, epochs=5, batch_size=64,\n                    shuffle=True, validation_data=(X_val, X_val))","bbe2f56b":"X_train_cnnae = cnn_autoencoder.predict(X_train)\nprint(\"Shape of X_train_cnnae:\", X_train_cnnae.shape)\n\nX_val_cnnae = cnn_autoencoder.predict(X_val)\nprint(\"Shape of X_val_cnnae:\", X_val_cnnae.shape)\n\nX_test_cnnae = cnn_autoencoder.predict(X_test)\nprint(\"Shape of X_test_cnnae:\", X_test_cnnae.shape)","5ec48c38":"n = 10\nplt.figure(figsize=(20, 4))\nfor i in range(1, n + 1):\n    # Display original\n    ax = plt.subplot(2, n, i)\n    plt.imshow(X_train[i].reshape(64, 64, 3))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n    # Display reconstruction\n    ax = plt.subplot(2, n, i + n)\n    plt.imshow(X_train_cnnae[i].reshape(64, 64,3))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","af73f402":"model = CNN()\n\nmodel.build(input_shape=(X_train_cnnae[0].shape))\n\n#model.summary()","3118cd02":"model.fit(X_train_cnnae,  y_train, validation_data=(X_val_cnnae, y_val), epochs=50, batch_size=32)","5f5839fe":"loss, acc = model.evaluate(X_train_cnnae, y_train)\nprint(\"Train loss:{}, Train Accuracy:{}\".format(loss, acc))\n\nloss, acc = model.evaluate(X_val_cnnae, y_val)\nprint(\"Val loss:{}, Val Accuracy:{}\".format(loss, acc))\n\nloss, acc = model.evaluate(X_test_cnnae, y_test)\nprint(\"Test loss:{}, Test Accuracy:{}\".format(loss, acc))","95edf0bd":"# 2. Load Datasets","b2ad3d9d":"# 5. CNN Autoencoders ","ee278b04":"# 1. Data Stats\n**Chest xray pneumonia**\n\n**labels: `NORMAL = 0,  PNEUMONIA = 1`**\n\n|Data | NORMAL | PNEUMONIA |\n|:---:|:---:|:---:|\n|Train-set|1341|3875|\n|Val-set|8 | 8 |\n|Test-set|234|390|\n\n","7a888198":"# 6. CNN Autoencoders and CCN Classifier","bd682c19":"# 3. Preprocessing Images","1458aaaf":"# 4. CNN and FC Classifier"}}