{"cell_type":{"4e562c5e":"code","2524142c":"code","4fd563bc":"code","5d3e2978":"code","74ceff4d":"code","911b0b82":"code","75f8b194":"code","340a4d4e":"code","75741771":"code","201a48bf":"code","00cb25b2":"code","c507d6bf":"code","07b6789f":"code","d96ce976":"code","47872ee3":"code","5d1444f7":"code","a0b775df":"code","3f216ba7":"code","5be46a5d":"code","5a830e9d":"code","5d05aa82":"markdown","f2c66069":"markdown","90d44cb0":"markdown","59505191":"markdown","da0a5556":"markdown","6ae98c39":"markdown","5ce43a57":"markdown","d80f87ee":"markdown","def8e917":"markdown","5bdf2528":"markdown","03d2491c":"markdown","928d6b47":"markdown","fb817258":"markdown","0c3f3a1c":"markdown","b0a05889":"markdown","06bbc961":"markdown"},"source":{"4e562c5e":"import numpy as np\nimport pandas as pd\nimport json","2524142c":"csv_df = pd.read_csv(\"..\/input\/understanding-different-file-formats\/datafile.csv\")\nprint(type(csv_df))","4fd563bc":"csv_df.head(3)","5d3e2978":"tsv_df = pd.read_csv(\"..\/input\/understanding-different-file-formats\/datafile.tsv\", delimiter=\"\\t\")  # you can remove delimiter part to see how our output chages\nprint(type(tsv_df))","74ceff4d":"tsv_df.head(3)","911b0b82":"f = open(\"..\/input\/understanding-different-file-formats\/datafile.json\")\nB = json.load(f)\nprint(type(B))","75f8b194":"print(B.keys())","340a4d4e":"Field_df = pd.DataFrame(B['fields'])\nField_df.head(3)","75741771":"Data_df = pd.DataFrame(B['data'])\nData_df.head(3)","201a48bf":"Field_df.label.tolist() # this is list of all the field names","00cb25b2":"json_df = pd.DataFrame(B['data'],columns = Field_df.label.tolist())\njson_df.head(3)","c507d6bf":"ods_df = pd.read_excel(\"..\/input\/understanding-different-file-formats\/datafile.ods\", engine='odf')\nprint(type(ods_df))","07b6789f":"ods_df.head(3)","d96ce976":"!pip install xlrd  # install the dependency","47872ee3":"D = pd.read_excel(\"..\/input\/understanding-different-file-formats\/datafile.xls\", sheet_name = None)\nprint(type(D))","5d1444f7":"D.keys() ","a0b775df":"xls_df = D['Worksheet']  # it is a DataFrame\nprint(type(xls_df))  ","3f216ba7":"xls_df.head(3)","5be46a5d":"def func(row):\n    xml = ['<item>']\n    for field in row.index:\n        xml.append('  <field name=\"{0}\">{1}<\/field>'.format(field, row[field]))\n    xml.append('<\/item>')\n    return '\\n'.join(xml)","5a830e9d":"t= \"\\n\".join(csv_df.apply(func, axis=1)) # converts dataframe to xml","5d05aa82":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">DIFFERENT FILE FORMATS<\/p>\n<img src=\"https:\/\/fiverr-res.cloudinary.com\/images\/q_auto,f_auto\/gigs\/167661619\/original\/a0f482c0fbcef87db57a1e47976c5fbd3c255041\/split-or-break-join-or-combine-csv-json-xml-xlsx-files.png\">","f2c66069":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">CSV<\/p>","90d44cb0":"<a id=\"6\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">XLS<\/p>","59505191":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">So it has two keys 'fields' which contain the information about the fields\/columns and 'data' which is the actual data.\nLet's look at individual keys<\/p>","da0a5556":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">INTRODUCTION<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">In this notebook, We will learn to work with different file formats like csv, json, xml, ods and many more. I will keep updating this notebook as well as the Dataset used, by adding new file formats. My goal is to make this notebook a one-stop shop for all kinds of information concerning file formats so that we don't have to go though multiple sources on internet to understand it. <\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">If you like my effort please <b>UPVOTE<\/b>, it really motivates me. <\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">Dataset used:- <a href=\"https:\/\/www.kaggle.com\/raj401\/understanding-different-file-formats\" id=\"idoflink\">https:\/\/www.kaggle.com\/raj401\/understanding-different-file-formats<\/a> <\/p>","6ae98c39":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">Here doing <b><i>pd.DataFrame(B)<\/i><\/b> will give error because the keys of this dictionary don't contain same no of elements. Let's us find what are it's keys.<\/p>","5ce43a57":"<a id=\"3\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">TSV<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">TSV is Tab separated value file. It is very similar to csv. So we read it by pd.read_csv() by just passing an extra delimiter=\"\\t\" to make it aware that it is tab separated and not a csv. <\/p>","d80f87ee":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">So we need to create dataframe using 'data' and give name of features\/columns using 'fields'.<\/p>","def8e917":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">Let's convert the csv_df dataframe to xml.<\/p>","5bdf2528":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">It has only one key which means it has only one sheet. We can now acces this sheet directly by the key. <\/p>","03d2491c":"<a id=\"8\"><\/a>\n## <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">CONCLUSION<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">That is all for now. I will be adding more file formats in the collection. If you have any doubt or suggestion feel free to ask below. <\/p>\n\n**<span style=\"color:#444160;\"> Thanks!<\/span>**\n<a id=\"9\"><\/a>\n## <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">END<\/p>","928d6b47":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">TABLE OF CONTENTS<\/p>   \n    \n* [1. IMPORTING LIBRARIES](#1)\n    \n* [2. CSV](#2)\n\n* [3. TSV](#3)\n    \n* [4. JSON](#4)  \n    \n* [5. ODS](#5)  \n    \n* [6. XLS](#6) \n      \n* [7. XML](#7)\n    \n* [8. CONCLUSION](#8)\n    \n* [9. END](#9)\n\n\n<a id=\"1\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">IMPORTING LIBRARIES<\/p>","fb817258":"<a id=\"7\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">XML<\/p>","0c3f3a1c":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">ODS<\/p>","b0a05889":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">It is a dictionary because it assumes multiple sheet and it stores each sheet by a key. Each sheet is stored as a DataFrame inside the dictionary. Let's look at it's keys to understand more.<\/p>","06bbc961":"<a id=\"4\"><\/a>\n# <p style=\"background-color:#FBAB7E;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">JSON<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\"> <i>note:- When reading <b>json<\/b> file on your local machine, specify the full path(starting from root directory), as using relative path may give error. <\/p>"}}