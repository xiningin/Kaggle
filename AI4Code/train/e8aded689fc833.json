{"cell_type":{"cc93c7a0":"code","444a31ed":"code","cbbff264":"code","d0b5bdeb":"code","ea5e3e99":"code","58464cf2":"code","cd853c23":"code","3756a475":"code","a17449f8":"code","046aa74e":"code","741f83a0":"code","462e8306":"code","b2cc59c7":"code","01abd09c":"code","2f58a0cb":"code","ab5720cc":"code","57f52a07":"code","93ff4b78":"code","25babeea":"code","511acf3e":"code","9ee74285":"code","86adde22":"code","3e52046e":"code","529f6880":"code","b99f3b06":"code","dff81265":"code","f38028c4":"code","9b64a194":"code","a9efec29":"code","1c96d16f":"code","c927b132":"code","7ff7d409":"code","8da57fd0":"code","53d05673":"code","9e49c399":"code","7f19f5df":"code","5d1aa6f1":"code","5e9b96a6":"code","48c2e19f":"code","91bf3b41":"code","9d0101f5":"code","0295e679":"code","8d999c09":"code","441bdea7":"code","1a0e6f4e":"code","a17da4f6":"code","f59ff4bd":"code","8933dccb":"code","b77dc984":"code","f67b3a37":"code","96d4b64c":"code","3438c385":"code","690a0623":"code","90af7ee6":"code","6216030e":"code","c40f099a":"code","7e4a6f2a":"code","4b19c6da":"code","e391225d":"code","410d47d7":"code","0f445efd":"code","e69f74ae":"code","bc3f399d":"code","c68d525d":"code","90130939":"code","9eb70e4f":"code","6ca9a57e":"code","0ae80b7d":"code","40405d6b":"code","2132e895":"code","f0976f68":"code","e9cf1b38":"code","386518d8":"code","d5748d91":"code","701d71dc":"code","7c4cbf9b":"code","31cb5e64":"code","09c93dc3":"code","cb8551e5":"markdown","b60f31f7":"markdown","52391817":"markdown","a05258db":"markdown","bf898316":"markdown","9aba4543":"markdown","59b5e453":"markdown","711b207f":"markdown","742202b2":"markdown","c8d7e77b":"markdown","2a13842a":"markdown","78a83c70":"markdown","975afe76":"markdown","21e0d472":"markdown","6eb66d36":"markdown","6ee59cae":"markdown","e484c6ea":"markdown","4410ca82":"markdown","40282669":"markdown","4b632263":"markdown","9553752a":"markdown"},"source":{"cc93c7a0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 25, 10\nwarnings.filterwarnings(\"ignore\")","444a31ed":"train=pd.read_csv('..\/input\/train_V2.csv')","cbbff264":"test=pd.read_csv('..\/input\/test_V2.csv')","d0b5bdeb":"train.head()","ea5e3e99":"test.head()","58464cf2":"print(\"Shape of train dataset {}; Shape of test dataset {}, number of columns: {}\".format(train.shape[0],test.shape[0], len(test.columns)))","cd853c23":"train[train.winPlacePerc.isnull()]","3756a475":"train.drop(train[train.winPlacePerc.isnull()].index,inplace=True)","a17449f8":"train.info()","046aa74e":"train_floats=train.select_dtypes(include=['float64']).drop(axis=1,labels='winPlacePerc')\ntest_floats=test.select_dtypes(include=['float64'])\n\ntrain_int=train.select_dtypes(include=['int64'])\ntest_int=test.select_dtypes(include=['int64'])\n","741f83a0":"train_int.head()","462e8306":"plt.figure(figsize=(12,8))\nsns.lineplot(data=test_int.rankPoints.value_counts())","b2cc59c7":"# Correlation heatmap\ncorr = train.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Create heatmap\nheatmap = sns.heatmap(corr)","01abd09c":"corr_columns=corr[abs(corr.winPlacePerc)>0.3].winPlacePerc.index","2f58a0cb":"train[corr_columns].head()","ab5720cc":"train[train.groupId==train.groupId.unique()[0]].matchId.shape[0]>4","57f52a07":"print('Uniqie Ids: ',len(train['Id'].unique()),' Unique groups: ',len(train['groupId'].unique()),' matchs: ',len(train['matchId'].unique()))","93ff4b78":"plt.figure(figsize=(12,8))\nsns.distplot(test['longestKill'],bins=10)\nplt.show()","25babeea":"train.head()","511acf3e":"plt.figure(figsize=(12,4))\nsns.distplot(train.walkDistance,bins=100)\nplt.show()","9ee74285":"train=train.drop(train[(train.walkDistance==0) & (train.kills>0)].index)","86adde22":"train.head()","3e52046e":"train['assists'].value_counts()","529f6880":"train[train.assists.isin([12,13,14,15,17,20,21,22])]","b99f3b06":"train.matchType.value_counts()","dff81265":"train[\"assists_and_boosts\"]=train.assists+train.boosts\ntest[\"assists_and_boosts\"]=test.assists+test.boosts","f38028c4":"plt.figure(figsize=(12,8))\nsns.distplot(train.swimDistance,bins=10)\nplt.show()","9b64a194":"plt.figure(figsize=(12,8))\nsns.distplot(train[train['rideDistance']>20000].rideDistance,bins=10)\nplt.show()","a9efec29":"train['fullDistance']=train['swimDistance']+train['walkDistance']+train['rideDistance']\ntest['fullDistance']=test['swimDistance']+test['walkDistance']+test['rideDistance']\n","1c96d16f":"print(\"The average person uses {:.1f} boost items, 99% of people use {} or less, while the doctor used {}.\".format(train['fullDistance'].mean(), train['fullDistance'].quantile(0.99), train['fullDistance'].max()))","c927b132":"plt.figure(figsize=(12,8))\nsns.distplot(train.weaponsAcquired,bins=100)\nplt.show()","7ff7d409":"print(\"The average person uses {:.1f} boost items, 99% of people use {} or less, while the doctor used {}.\".format(train['weaponsAcquired'].mean(), train['weaponsAcquired'].quantile(0.99), train['weaponsAcquired'].max()))","8da57fd0":"plt.figure(figsize=(12,8))\nsns.distplot(train.kills,bins=100)\nplt.show()","53d05673":"print(\"The average person uses {:.1f} boost items, 99% of people use {} or less, while the killer used {}.\".format(train['kills'].mean(), train['kills'].quantile(0.99), train['kills'].max()))","9e49c399":"plt.figure(figsize=(12,8))\nsns.distplot(train.headshotKills,bins=100)\nplt.show()","7f19f5df":"train[[\"headshotKills\",\"kills\"]].head()","5d1aa6f1":"train['headkill_ratio']=(train.headshotKills\/train.kills).fillna(0)\ntest['headkill_ratio']=(test.headshotKills\/test.kills).fillna(0)\n","5e9b96a6":"train_ratio_pie=train['headkill_ratio'].value_counts()[1:]\ntest_ratio_pie=test['headkill_ratio'].value_counts()[1:]","48c2e19f":"train_ratio_pie.quantile(.75),train_ratio_pie.quantile(.95)","91bf3b41":"train_ratio_pie95=train_ratio_pie[train_ratio_pie>train_ratio_pie.quantile(.95)]\ntest_ratio_pie95=test_ratio_pie[test_ratio_pie>test_ratio_pie.quantile(.95)]","9d0101f5":"train_ratio_pie95labels=['1','1\/2','1\/3','1\/4','2\/3','1\/5','2\/5','1\/6','3\/4','3\/5','1\/7','2\/7','3\/7']\ntest_ratio_pie95labels=['1','1\/2','1\/3','1\/4','2\/3','1\/5','2\/5','1\/6']\nplt.figure(figsize=[25,15])\nplt.subplot(221)\n\nplt.title(\"popular headkill_ratios: \")\nplt.pie(x=train_ratio_pie95,labels=train_ratio_pie95labels)\n\nplt.subplot(222)\n\nplt.title(\"popular headkill_ratios: \")\nplt.pie(x=test_ratio_pie95,labels=test_ratio_pie95labels)\nplt.show()\n","0295e679":"print('quantile 85% headkill ratio : {}, 99% {:.1f}, headshot killer:{:.1f}'.format(train['headkill_ratio'].quantile(.85),train['headkill_ratio'].quantile(0.99),train['headkill_ratio'].max()))","8d999c09":"print('quantile 85% headkill ratio : {}, 99% {:.1f}, headshot killer:{:.1f}'.format(test['headkill_ratio'].quantile(.85),test['headkill_ratio'].quantile(0.99),test['headkill_ratio'].max()))","441bdea7":"train['distance_to_kill']=(train[\"rideDistance\"]\/train[\"roadKills\"]).fillna(0.0).replace(np.inf,0)\ntest['distance_to_kill']=(test[\"rideDistance\"]\/test[\"roadKills\"]).fillna(0.0).replace(np.inf,0)\ntrain['road_killer']=(train['roadKills']>0).astype(int)\ntest['road_killer']=(test['roadKills']>0).astype(int)","1a0e6f4e":"train_roadkiller=train.road_killer.value_counts()\ntest_roadkiller=test.road_killer.value_counts()\n\nplt.figure(figsize=[25,10])\n\nplt.subplot(2,2,1)\nplt.title(\"train road killer ratio: \")\nplt.pie(x=train_roadkiller,labels=['not','road killer'])\n\nplt.subplot(2,2,2)\nplt.title(\"test road killer ratio: \")\nplt.pie(x=test_roadkiller,labels=['not','road killer'])\nplt.show()","a17da4f6":"# Correlation heatmap\ncorr = train.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Create heatmap\nheatmap = sns.heatmap(corr)","f59ff4bd":"new_corr_columns=corr[abs(corr.winPlacePerc)>0.1].winPlacePerc.index","8933dccb":"new_corr_columns","b77dc984":"train[new_corr_columns].info()","f67b3a37":"new_corr_columns.drop(['winPlacePerc'])","96d4b64c":"corr_train=train[new_corr_columns]\ncorr_test=test[new_corr_columns.drop(['winPlacePerc'])]","3438c385":"corr_train.head()","690a0623":"Y_trainingData=corr_train.winPlacePerc\ncorr_train=corr_train.drop('winPlacePerc',axis=1)","90af7ee6":"Y_trainingData.hist()","6216030e":"corr_train.head()","c40f099a":"ids=['Id','groupId','matchId']\nmatchType=['matchType']\n","7e4a6f2a":"from sklearn.preprocessing import normalize\nnorm_corr_train=pd.DataFrame(normalize(corr_train),columns=new_corr_columns.drop(['winPlacePerc']))\nnorm_corr_test=pd.DataFrame(normalize(corr_test),columns=new_corr_columns.drop(['winPlacePerc']))","4b19c6da":"norm_corr_train.head()","e391225d":"norm_corr_test.head()","410d47d7":"matchType_train=pd.get_dummies(train['matchType'])\nmatchType_test=pd.get_dummies(test['matchType'])","0f445efd":"X_train=norm_corr_train.join(matchType_train)\nX_test=norm_corr_test.join(matchType_test)","e69f74ae":"X_train=X_train.fillna(0)\nX_test=X_test.fillna(0)","bc3f399d":"from sklearn import utils\nfrom sklearn import preprocessing","c68d525d":"lab_enc = preprocessing.LabelEncoder()\ntraining_scores_encoded = lab_enc.fit_transform(Y_trainingData)\nprint(training_scores_encoded)\nprint(utils.multiclass.type_of_target(Y_trainingData))\nprint(utils.multiclass.type_of_target(Y_trainingData.astype('float64')))\nprint(utils.multiclass.type_of_target(training_scores_encoded))","90130939":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X_train, training_scores_encoded, train_size=0.6, random_state=42)\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.63, random_state=1)","9eb70e4f":"print(\"X shape: \",X_train.shape,\"train shape: \",x_train.shape,\"train answers shape: \",y_train.shape,\"x_val.shape: \",x_val.shape,\"y_val.shape: \",y_val.shape)","6ca9a57e":"x_test.shape,y_test.shape","0ae80b7d":"import xgboost as xgb","40405d6b":"reg_boost=xgb.XGBRegressor(objective='reg:linear',colsample_bytree=0.3,learning_rate=0.1,max_depth=5,alpha=10,n_estimators=100)","2132e895":"%timeit\nreg_boost.fit(x_train,y_train)","f0976f68":"%timeit\ntrain_predict = reg_boost.predict(x_train)","e9cf1b38":"%timeit\ntest_predict = reg_boost.predict(x_test)","386518d8":"X_trainDF=pd.DataFrame({\"Predict\":train_predict,\"True\":y_train})\nX_testDF=pd.DataFrame({\"Predict\":test_predict,\"True\":y_test})","d5748d91":"plt.figure(figsize=[25,10])\nplt.subplot(211)\nplt.title('train model')\nplt.plot(X_trainDF[100000:100100])\n\n\nplt.subplot(212)\nplt.title('test model')\nplt.plot(X_testDF[100000:100100])\nplt.show()","701d71dc":"from sklearn.metrics import mean_squared_error\ntrain_rmse=np.sqrt(mean_squared_error(y_train,train_predict ))\ntest_rmse = np.sqrt(mean_squared_error(y_test,test_predict ))\n\nprint(\"train RMSE: {}, test RMSE:{}\".format(train_rmse,test_rmse))\n\n","7c4cbf9b":"from sklearn.metrics import mean_absolute_error\nprint(\"train mean absolute error {}, test mean absolute error {}\".format(mean_absolute_error(y_train,train_predict),mean_absolute_error(y_test,test_predict)))","31cb5e64":"submit_test_predict=reg_boost.predict(X_test)","09c93dc3":"submission=pd.DataFrame({'Id':test['Id'],'winPlacePerc':submit_test_predict})\nsubmission.to_csv('submission.csv', index=False)","cb8551e5":"## XGBoost","b60f31f7":"## Walk Distance = 0 and Kills>0 ","52391817":"## Normalize some features","a05258db":"We can filtred some other records(over 9000 kills, headshots and etc.), but I don't think that's good idea ","bf898316":"## Kills","9aba4543":"## Road kills","59b5e453":"NaN data in target column.","711b207f":"## Weapons Acquired","742202b2":"## Sumup feature","c8d7e77b":"### Lets create new feature!!!\nroadKills\/rideDistance\t","2a13842a":"# get Dummies from 'matchType'","78a83c70":"Add new feature:","975afe76":"## Ride Distance","21e0d472":"## Let's see corr again!","6eb66d36":"# headshot features","6ee59cae":"## boosts and assits","e484c6ea":"# See some data","4410ca82":"fit the model","40282669":"## Swim Distance","4b632263":"Drop this record","9553752a":"## Walk Distance"}}