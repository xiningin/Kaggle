{"cell_type":{"da4eeb09":"code","01c457cb":"code","b9532050":"code","6193848a":"code","00b44c6d":"code","805380b6":"code","56c68456":"code","1c4caf6f":"code","ae0c042c":"code","015add76":"code","2bc678c8":"code","352527bb":"code","8ac81f3c":"code","f738dbf0":"code","7179e2c0":"code","8ada70f1":"code","a7719388":"code","56edb820":"code","bf756c97":"code","9e2b2cd6":"code","71bcb7ef":"code","ebb8a133":"code","23d6f45c":"code","9a12d84b":"code","d5bc1412":"code","78f703b5":"code","c325b51d":"code","94b0c26a":"code","7212720e":"code","265c86da":"code","249b9d39":"code","1b862da3":"code","a0fbc62f":"code","9319fd5a":"code","5e0aedd9":"code","f5f38a08":"code","06aee233":"code","0e196375":"code","d42ba8d5":"markdown"},"source":{"da4eeb09":"!pip install -q chitra","01c457cb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nfrom glob import glob\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom IPython.display import display\nimport random\n\nimport tensorflow as tf","b9532050":"from chitra.datagenerator import Dataset\nfrom chitra.trainer import create_cnn, Trainer\nfrom chitra.dataloader import Clf\n\nfrom chitra.core import IMAGENET_LABELS","6193848a":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n\n@tf.function\ndef rescale(image, label):\n    image = image \/ 127.5 - 1.0\n    return image, label\n\n\ndef tensor_to_image(tensor):\n    return Image.fromarray(tensor.numpy().astype('uint8'))","00b44c6d":"SPLIT_PCT = 0.9\nCAT_SPLIT = 0.05\nSHUFFLE_SPLIT = True\n\nIMG_SIZE = (224, 224)\nBS = 8","805380b6":"tf.keras.backend.clear_session()\ntf.config.optimizer.set_jit(True)","56c68456":"train_dir = '\/kaggle\/input\/Imagenette-comp\/train'\nlen(glob(f'{train_dir}\/*\/*'))","1c4caf6f":"CLASS_MAP = {'c1d6f6c4': 0, 'c1d6fa84': 1, 'c1d6fc6e': 2, 'c1d6fd90': 3, 'c1d6fe94': 4, 'c1d6ff98': 5, 'c1d70092': 6, 'c1d70196': 7, 'c1d702ae': 8, 'c1d70420': 9}\n\nlabels = [e[0] for e in sorted(CLASS_MAP.items(), key=lambda x: x[1])]\n\n\ntensor_dict = {}\nfor k,v in CLASS_MAP.items():\n    key = tf.constant(k)\n    tensor_dict[key.ref()] = v","ae0c042c":"folders = glob(f'{train_dir}\/*');print('total folders:', len(folders))\ntrain_files, val_files = [], []\nfor folder in tqdm(folders):\n    filenames = glob(f'{folder}\/*')\n    idx = int(len(filenames) * CAT_SPLIT)\n    if SHUFFLE_SPLIT: random.shuffle(filenames)\n    \n    train_files.extend(filenames[idx:])\n    val_files.extend(filenames[:idx])","015add76":"len(train_files), len(val_files)","2bc678c8":"val_files_set = set(val_files)\nfor train_file in train_files:\n    if train_file in val_files_set:\n        print('problem!')\n        raise Exception('duplicate')\n\ndel val_files_set","352527bb":"keys = list(CLASS_MAP.keys())\nvals = list(CLASS_MAP.values())\n\nkeys_tensor = keys  #tf.constant(keys)\nvals_tensor = vals  #tf.constant(vals)\n\ntable_init = tf.lookup.KeyValueTensorInitializer(\n                    keys_tensor, vals_tensor)\n\nlookup_class_to_idx = tf.lookup.StaticHashTable(table_init, -1)","8ac81f3c":"@tf.function\ndef encode_label(filename):\n    label = tf.strings.split(filename, '\/')[-2]\n    \n    label = lookup_class_to_idx.lookup(\n                    label) if lookup_class_to_idx else label\n    return label","f738dbf0":"@tf.function\ndef load_data(filename):\n    image = tf.image.decode_jpeg(tf.io.read_file(filename), channels=3)\n    image = tf.image.resize(image, IMG_SIZE)\n    return image, encode_label(filename)","7179e2c0":"@tf.function\ndef rescale(image, label):\n    return (image\/127.5-1.0), label\n\n\n@tf.function\ndef augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_hue(image, 0.1)\n    \n    return image, label","8ada70f1":"train_dl = tf.data.Dataset.from_tensor_slices(train_files).shuffle(2048*2).map(load_data, AUTOTUNE).map(augment, AUTOTUNE)\nval_dl = tf.data.Dataset.from_tensor_slices(val_files).map(load_data, AUTOTUNE)","a7719388":"for i in range(8):\n    image, label = next(iter(train_dl))\n    display(tensor_to_image(image))\n    print(label.numpy())","56edb820":"train_dl = train_dl.map(rescale, AUTOTUNE).batch(BS).prefetch(AUTOTUNE)\nval_dl = val_dl.map(rescale, AUTOTUNE).batch(BS).prefetch(AUTOTUNE)","bf756c97":"model = create_cnn('xception', 10, 0.3, weights=None)","9e2b2cd6":"model.summary()","71bcb7ef":"# trainer = Trainer(train_ds, model)\n# trainer.compile2(BS, tf.keras.optimizers.SGD(1, momentum=0.9,nesterov=True), lr_range=(1e-4, 1),\n#                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n#                  metrics=['accuracy'])","ebb8a133":"model.compile(tf.keras.optimizers.SGD(momentum=0.9, nesterov=True),\n              tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","23d6f45c":"model.fit(train_dl,\n          epochs=50,\n          validation_data = val_dl,\n          callbacks=[tf.keras.callbacks.EarlyStopping(patience=4)])","9a12d84b":"?tf.keras.callbacks.EarlyStopping","d5bc1412":"import pandas as pd","78f703b5":"df = pd.read_csv('..\/input\/Imagenette-comp\/sample_submission.csv');df","c325b51d":"test_files = tf.data.Dataset.from_tensor_slices(glob('\/kaggle\/input\/Imagenette-comp\/test\/*'))","94b0c26a":"@tf.function\ndef load_image(filename):\n    image = tf.image.decode_jpeg(tf.io.read_file(filename), channels=3)\n    image = tf.image.resize(image, (224,224))\n    image = image\/127.5 - 1.0\n    return filename, image","7212720e":"next(iter(test_files.batch(2))).numpy().tolist()","265c86da":"test_dl = test_files.map(load_image, AUTOTUNE)","249b9d39":"def predict_classes(images):\n    preds = model.predict(images)\n    preds = tf.math.softmax(preds)\n    classes = tf.math.argmax(preds, axis=1).numpy()\n    return classes","1b862da3":"for filename, img in test_dl.batch(4).take(1):\n    print(filename.numpy())\n    classes = predict_classes(img)\n    \n    print(classes)","a0fbc62f":"TEST_BS = 32\nsteps = len(glob('\/kaggle\/input\/Imagenette-comp\/test\/*'))\/\/TEST_BS","9319fd5a":"result = []\nresult_files = []\nfor data in tqdm(test_dl.batch(TEST_BS), total=steps):\n    images = data[1]\n    filenames = data[0].numpy().tolist()\n    classes = predict_classes(images)\n    \n    result.extend(classes.tolist())\n    result_files.extend(filenames)","5e0aedd9":"predlist = []\nfor e in result:\n    class_name = labels[e]\n    predlist.append(class_name)","f5f38a08":"basename = os.path.basename\ndf['Id'] = list(map(lambda x: basename(x.decode()).split('.')[0] ,result_files))\ndf['Category'] = predlist","06aee233":"df","0e196375":"df.to_csv('submission.csv', index=False)\ndf","d42ba8d5":"# Submission"}}