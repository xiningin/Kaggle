{"cell_type":{"4ae9fd5d":"code","3fa639e8":"code","4b490217":"code","f1a87776":"code","7e537582":"code","3ccb668a":"code","98ecfcfe":"code","6dfd6f36":"code","5c4a9809":"code","3f15d0f9":"code","e26a6a62":"code","f8ac85f0":"code","42685bdc":"code","a3c0b959":"code","ef78956d":"code","4efe1d1d":"code","ba4df041":"code","4982f1d0":"code","913cb972":"code","a41e2e2f":"code","8052b9b7":"code","fcc3ad9d":"code","920173f9":"code","a33d61d4":"code","71af5d9e":"code","91ecdc48":"code","9a8935de":"code","5ace242a":"code","4bc7cc9d":"markdown","9ceefa3d":"markdown","f576fba0":"markdown","66390c4d":"markdown","e8cc71b0":"markdown","cb141f60":"markdown","27dc3160":"markdown","50be052a":"markdown","3dd451d9":"markdown","61e68905":"markdown","38a7d4ea":"markdown","3c864d91":"markdown","f7e1f63e":"markdown","62fa077c":"markdown","e4be148b":"markdown","6f9c470d":"markdown","339cd310":"markdown","02c825a5":"markdown"},"source":{"4ae9fd5d":"from IPython.display import Image\nimport os\n!ls ..\/input\/\nImage(\"..\/input\/fasta-dna-sequence-formate\/2020-08-what-is-next-generation-sequencing.jpg\")","3fa639e8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline  ","4b490217":"human = pd.read_table('..\/input\/dna-sequence-dataset\/human.txt')\nhuman.head()","f1a87776":"chimp = pd.read_table('..\/input\/dna-sequence-dataset\/chimpanzee.txt')\ndog = pd.read_table('..\/input\/dna-sequence-dataset\/dog.txt')\nchimp.head()\ndog.head()","7e537582":"human.shape\n","3ccb668a":"human[\"sequence\"][0]\n","98ecfcfe":"Image(\"..\/input\/gene-family\/__results___8_0.png\")\n","6dfd6f36":"# function to convert sequence strings into k-mer words, default size = 6 (hexamer words)\ndef getKmers(sequence, size=6):\n    return [sequence[x:x+size].lower() for x in range(len(sequence) - size + 1)]","5c4a9809":"human[\"words\"]=human.apply(lambda x: getKmers(x[\"sequence\"]),axis=1)\nhuman.head()\nchimp['words'] = chimp.apply(lambda x: getKmers(x['sequence']), axis=1)\nchimp = chimp.drop('sequence', axis=1)\ndog['words'] = dog.apply(lambda x: getKmers(x['sequence']), axis=1)\ndog = dog.drop('sequence', axis=1)","3f15d0f9":"human=human.drop(\"sequence\",axis=1)\n#human[\"words\"][0]\nhuman.head()\n","e26a6a62":"#human[\"words\"][2]\n","f8ac85f0":"human_texts=list(human[\"words\"])\nfor item in range(len(human_texts)):\n    human_texts[item] = ' '.join(human_texts[item])\ny_h = human.iloc[:, 0].values  ","42685bdc":"human_texts[2]","a3c0b959":"y_h","ef78956d":"chimp_texts = list(chimp['words'])\nfor item in range(len(chimp_texts)):\n    chimp_texts[item] = ' '.join(chimp_texts[item])\ny_c = chimp.iloc[:, 0].values                       # y_c for chimp\n\ndog_texts = list(dog['words'])\nfor item in range(len(dog_texts)):\n    dog_texts[item] = ' '.join(dog_texts[item])\ny_d = dog.iloc[:, 0].values       ","4efe1d1d":"# Creating the Bag of Words model using CountVectorizer()\n# This is equivalent to k-mer counting\n# The n-gram size of 4 was previously determined by testing\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(ngram_range=(4,4))\nX = cv.fit_transform(human_texts)\nX_chimp = cv.transform(chimp_texts)\nX_dog = cv.transform(dog_texts)","ba4df041":"print(X.shape)\nprint(X_chimp.shape)\nprint(X_dog.shape)","4982f1d0":"human[\"class\"].value_counts().sort_index().plot.bar()","913cb972":"chimp['class'].value_counts().sort_index().plot.bar()","a41e2e2f":"dog['class'].value_counts().sort_index().plot.bar()","8052b9b7":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y_h,test_size=0.2,random_state=42)","fcc3ad9d":"print(x_train.shape)\nprint(x_test.shape)","920173f9":"### Multinomial Naive Bayes Classifier ###\n# The alpha parameter was determined by grid search previously\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB(alpha=0.1)\nclassifier.fit(x_train, y_train)","a33d61d4":"y_pred = classifier.predict(x_test)","71af5d9e":"from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_test, name='Actual'), pd.Series(y_pred, name='Predicted')))\ndef get_metrics(y_test, y_predicted):\n    accuracy = accuracy_score(y_test, y_predicted)\n    precision = precision_score(y_test, y_predicted, average='weighted')\n    recall = recall_score(y_test, y_predicted, average='weighted')\n    f1 = f1_score(y_test, y_predicted, average='weighted')\n    return accuracy, precision, recall, f1\naccuracy, precision, recall, f1 = get_metrics(y_test, y_pred)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","91ecdc48":"# Predicting the chimp, dog and worm sequences\ny_pred_chimp = classifier.predict(X_chimp)\ny_pred_dog = classifier.predict(X_dog)","9a8935de":"# performance on chimp genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_c, name='Actual'), pd.Series(y_pred_chimp, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_c, y_pred_chimp)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","5ace242a":"# performance on dog genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_d, name='Actual'), pd.Series(y_pred_dog, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_d, y_pred_dog)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","4bc7cc9d":"### We have some data for human DNA sequence coding regions and a class label. We also have data for Chimpanzee and a more divergent species, the dog. Let's get that.","9ceefa3d":"**The model seems to perform well on human data. It also does on Chimpanzee. That might not be a surprize since the chimp and human are so similar genetically. The performance on dog is not quite as good. We would expect this since the dog is more divergent from human than the chimpanze.\u00b6**","f576fba0":"### Make predictions for the Chimp and dog sequences\u00b6","66390c4d":"### Since we are going to use scikit-learn natural language processing tools to do the k-mer counting, we need to now convert the lists of k-mers for each gene into string sentences of words that the count vectorizer can use. We can also make a y variable to hold the class labels. Let's do that now.","e8cc71b0":"### Now, let's examine the typical performace metrics for each species.","cb141f60":"## Let's define a function to collect all possible overlapping k-mers of a specified length from any sequence string.","27dc3160":"### Now we can convert our training data sequences into short overlapping k-mers of legth 6. Lets do that for each species of data we have using our getKmers function.","50be052a":"## Now let's review how to use sklearn's \"Natural Language\" Processing tools to convert our k-mer words into uniform length numerical vectors that represent counts for every k-mer in the vocabulary.","3dd451d9":"#### So now that we know how to transform our DNA sequences into uniform length numerical vectors in the form of k-mer counts and ngrams, we can now go ahead and build a classification model that can predict the DNA sequence function based only on the sequence itself.\n\n#### Here I will use the human data to train the model, holding out 20% of the human data to test the model. Then we can really challenge the model's generalizability by trying to predict sequence function in other species (the chimpanzee and dog).\n\n#### So below we will - 1: train\/test spit. 2: Build simple multinomial naive Bayes classifier and 3: test the model performance.","61e68905":"# What is Gene?\n\n**Genes are a set of instructions that determine what the organism is like, its appearance, how it survives, and how it behaves in its environment.**\n\n**A gene consists of a long combination of four different nucleotide bases, or chemicals. There are many possible combinations.**\n\n**The four nucleotides are:**\n\n**A (adenine)\nC (cytosine)\nG (guanine)\nT (thymine)\nDifferent combinations of the letters ACGT give people different characteristics. For example, a person with the combination ATCGTT may have blue eyes, while somebody with the combination ATCGCT may have brown eyes.**","38a7d4ea":"### Now let's make predictions on the human hold out test set and see how it performes on unseen data.","3c864d91":"# Working with DNA sequence data for machine learning","f7e1f63e":"# Treating DNA Sequence as a \"Language\" ,otherwise Known as K-Mer Counting\n\n**In bioinformatics, k-mers are substrings of length k contained within a biological sequence. Primarily used within the context of computational genomics and sequence analysis, in which k-mers are composed of nucleotides (i.e. A, T, G, and C), k-mers are capitalized upon to assemble DNA sequences,improve heterologous gene expression, identify species in metagenomic samples, and create attenuated vaccines.**\n\nk-mers are simply length k subsequences. For example, all the possible k-mers of a DNA sequence are shown below:\n\n   **k-mers for GTAGAGCTGT**\n  \n\n\nk-->k-mers\n\n\n1-->G, T, A, G, A, G, C, T, G, T\n\n\n2-->GT, TA, AG, GA, AG, GC, CT, TG, GT\n\n\n3-->GTA, TAG, AGA, GAG, AGC, GCT, CTG, TGT\n\n\n4-->GTAG, TAGA, AGAG, GAGC, AGCT, GCTG, CTGT\n\n\n5-->GTAGA, TAGAG, AGAGC, GAGCT, AGCTG, GCTGT\n\n\n6-->GTAGAG, TAGAGC, AGAGCT, GAGCTG, AGCTGT\n\n\n7-->GTAGAGC, TAGAGCT, AGAGCTG, GAGCTGT\n\n\n8-->GTAGAGCT, TAGAGCTG, AGAGCTGT\n\n\n9-->GTAGAGCTG, TAGAGCTGT\n\n\n10-->GTAGAGCTGT","62fa077c":"# Project introduction\n**In biological computing, working with DNA sequence data is common place. Becomming familiar with the Python package Biopython will really help you when dealing with biological sequence data in Python. DNA sequence data frequently are contained in a file format called \"fasta\" format.**\n ###  What is FASTA formate?\n \n**In bioinformatics, FASTA format is a text-based format for representing  nucleotide sequences or amino acid (protein) sequences, in which nucleotides or amino acids are represented using single-letter codes [A,C,G,T,N] where A=Adenosine, C=Cytosine, G=Guanine, T=Thymidine and N= any of A,C,G,T. The format also allows for sequence names and comments to precede the sequences.**\n\n**Example\n#### >BTBSCRYR\ntgcaccaaacatgtctaaagctggaaccaaaattactttctttgaagacaaaaactttca\naggccgccactatgacagcgattgcgactgtgcagatttccacatgtacctgagccgctg\ncaactccatcagagtggaaggaggcacctgggctgtgtatgaaaggcccaattttgctgg\ngtacatgtacatcctaccccggggcgagtatcctgagtaccagcactggatgggcctcaa\ncgaccgcctcagctcctgcagggctgttcacctgtctagtggaggccagtataagcttca\ngatctttgagaaaggggattttaatggtcagatgcatgagaccacggaagactgcccttc\ncatcatggagcagttccacatgcgggaggtccactcctgtaaggtgctggagggcgcctg\ngatcttctatgagctgcccaactaccgaggcaggcagtacctgctggacaagaaggagta\nccggaagcccgtcgactggggtgcagcttccccagctgtccagtctttccgccgcattgt\nggagtgatgatacagatgcggccaaacgctggctggccttgtcatccaaataagcattat\naaataaaacaattggcatgc","e4be148b":"### Open the data for human and see what we have.","6f9c470d":"## What is DNA Sequencing?\n**DNA sequencing is a laboratory technique used to determine the exact sequence of bases (A, C, G, and T) in a DNA molecule.*DNA sequence information is important to scientists investigating the functions of genes*. The technology of DNA sequencing was made faster and less expensive as a part of the Human Genome Project.**","339cd310":"### Okay, so let's look at some model performce metrics like the confusion matrix, accuracy, precision, recall and f1 score. We are getting really good results on our unseen data, so it looks like our model did not overfit to the training data. In a real project I would go back and sample many more train test splits since we have a relatively small data set.","02c825a5":"## Let's see what we have... for human we have 4380 genes converted into uniform length feature vectors of 4-gram k-mer (length 6) counts."}}