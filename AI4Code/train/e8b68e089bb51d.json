{"cell_type":{"a6593721":"code","de734d1f":"code","c74d13c6":"code","13a2f6eb":"code","a1fd5dc7":"code","69618d67":"code","b6bfaf91":"code","df8a820b":"code","06c49251":"code","5acdb183":"markdown","7bed25a7":"markdown","ce87cfd5":"markdown","053d109f":"markdown","955ce68d":"markdown","80c75a11":"markdown","d718f9d4":"markdown","74ba08d1":"markdown","bbbcdda6":"markdown","c5bd12bf":"markdown","a6a2e744":"markdown"},"source":{"a6593721":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de734d1f":"df2015 = pd.read_csv('\/kaggle\/input\/world-happiness\/2015.csv')\n\n#Presense of missing values\nmissing = df2015.isnull().sum().sort_values(ascending=False)\nprint(missing)","c74d13c6":"import seaborn as sns\ncor_matrix = df2015.corr()\nk = 10 # the number off variables in the matrix\ncols = cor_matrix.nlargest(k, 'Happiness Score')['Happiness Score'].index\ncm = np.corrcoef(df2015[cols].values.T)\nsns.set(font_scale=1)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, yticklabels=cols.values, xticklabels=cols.values)\n","13a2f6eb":"features = ['Economy (GDP per Capita)','Family','Health (Life Expectancy)','Freedom', 'Dystopia Residual']\nx = df2015[features]\ny = df2015['Happiness Score']","a1fd5dc7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.3, random_state=1)","69618d67":"print(x_train.shape)\nprint(x_test.shape)","b6bfaf91":"from sklearn.linear_model import HuberRegressor\nclf = HuberRegressor()\nclf.fit(x_train, y_train) # training the model\n","df8a820b":"clf.predict(x_test)\nmy_score = clf.score(x_test, y_test)\nprint(my_score)","06c49251":"df2016 = pd.read_csv('\/kaggle\/input\/world-happiness\/2016.csv')\nsns.kdeplot(df2015['Economy (GDP per Capita)'], color='red')\nsns.kdeplot(df2016['Economy (GDP per Capita)'], color= 'blue')\n\n","5acdb183":".","7bed25a7":"Making a correlation matrix.\nI create one to enable me to see which features have more weight in our happiness score. If i am using it wrong you can inform me in the comments.","ce87cfd5":"Hey. I am a new machine learning student and i am simply using this dataset to get the hang of it.\nI used the \"2015 world-happiness\" dataset.","053d109f":"With our model trained next is to test the model and get its accuracy.","955ce68d":"Finished. Like i said, am still learning, hope this helped in anyway and if messed up a bit. You could share your insight. Thank you and Happy coding!! :)","80c75a11":"The data has been split.Lets take a look at their shape(number of rows and columns).\n","d718f9d4":"With our features in place. Time to split the data into train and test","74ba08d1":"Awesome! we have no missing values in our dataset.","bbbcdda6":"The Gdp, Family and health have a higher percentage hence, they are features that are a must for our predictions. However despite freedom and Dystopia residual having less weight than the three they are still an important feature for better predictions.","c5bd12bf":"98% accuracy. 2% off but not bad, still usable.With the model done. I got curious and wondered about the GDP over the years and made a small graph to see them.","a6a2e744":"Time to fit the data in a classifier. I had looked at various regression models and HuberRegressor gave the highest score."}}