{"cell_type":{"a55e3893":"code","c98d388f":"code","522ff74d":"code","2147637f":"code","a9edf6b3":"code","7da5f4fa":"code","280ac458":"code","b8a51eb5":"code","e6a4f409":"code","b4be69b1":"code","50b8116f":"code","4364bb35":"code","5b1156a4":"code","da7de1c8":"code","1075e105":"code","4fa23cee":"code","5be930a5":"code","67f50aa2":"code","8c215973":"code","569fcb9e":"markdown"},"source":{"a55e3893":"package_path = '..\/input\/pytorch-image-models\/pytorch-image-models-master' #'..\/input\/efficientnet-pytorch-07\/efficientnet_pytorch-0.7.0'\nimport sys; sys.path.append(package_path)","c98d388f":"from glob import glob\nfrom sklearn.model_selection import GroupKFold, StratifiedKFold\nimport cv2\nfrom skimage import io\nimport torch\nfrom torch import nn\nimport os\nfrom datetime import datetime\nimport time\nimport random\nimport cv2\nimport torchvision\nfrom torchvision import transforms\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.utils.data.sampler import SequentialSampler, RandomSampler\nfrom  torch.cuda.amp import autocast, GradScaler\n\nimport sklearn\nimport warnings\nimport joblib\nfrom sklearn.metrics import roc_auc_score, log_loss\nfrom sklearn import metrics\nimport warnings\nimport cv2\nimport pydicom\nimport timm #from efficientnet_pytorch import EfficientNet\nfrom scipy.ndimage.interpolation import zoom\nfrom sklearn.metrics import log_loss","522ff74d":"CFG = {\n    'fold_num': 5,\n    'seed': 719,\n    'model_arch': 'tf_efficientnet_b4_ns',\n    'img_size': 512,\n    'epochs': 10,\n    'train_bs': 32,\n    'valid_bs': 32,\n    'lr': 1e-4,\n    'num_workers': 4,\n    'accum_iter': 1, # suppoprt to do batch accumulation for backprop with effectively larger batch size\n    'verbose_step': 1,\n    'device': 'cuda:0',\n    'tta': 3,\n    'used_epochs': [9,1,5],\n    'weights': [1,1,1]\n}","2147637f":"train = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntrain.head()","a9edf6b3":"train.label.value_counts()","7da5f4fa":"submission = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\nsubmission.head()","280ac458":"def get_img(path):\n    im_bgr = cv2.imread(path)\n    im_rgb = im_bgr[:, :, ::-1]\n    #print(im_rgb)\n    return im_rgb\n\nimg = get_img('..\/input\/cassava-leaf-disease-classification\/train_images\/1000015157.jpg')\nplt.imshow(img)\nplt.show()","b8a51eb5":"class CassavaDataset(Dataset):\n    def __init__(\n        self, df, data_root, transforms=None, output_label=True\n    ):\n        \n        super().__init__()\n        self.df = df.reset_index(drop=True).copy() # \u91cd\u65b0\u751f\u6210\u7d22\u5f15\n        self.transforms = transforms\n        self.data_root = data_root\n        self.output_label = output_label\n    \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, index: int):\n        \n        # get labels\n        if self.output_label:\n            target = self.df.iloc[index]['label']\n          \n        path = \"{}\/{}\".format(self.data_root, self.df.iloc[index]['image_id'])\n        \n        img  = get_img(path)\n        \n        if self.transforms:\n            img = self.transforms(image=img)['image']\n            \n        # do label smoothing\n        if self.output_label == True:\n            return img, target\n        else:\n            return img","e6a4f409":"from albumentations import (\n    HorizontalFlip, VerticalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, IAAPiecewiseAffine, RandomResizedCrop,\n    IAASharpen, IAAEmboss, RandomBrightnessContrast, Flip, OneOf, Compose, Normalize, Cutout, CoarseDropout, ShiftScaleRotate, CenterCrop, Resize\n)\n\nfrom albumentations.pytorch import ToTensorV2\n\n        \ndef get_valid_transforms():\n    return Compose([\n            RandomResizedCrop(CFG['img_size'], CFG['img_size']),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n            RandomBrightenessContrast(brightness_limit=(-0.1, 0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.)\n\ndef get_inference_transforms():\n    return Compose([\n            RandomResizedCrop(CFG['img_size'], CFG['img_size']),\n#             Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n#             HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n#             RandomBrightnessContrast(brightness_limit=(-0.1,0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.)\n","b4be69b1":"class CassvaImgClassifier(nn.Module):\n    def __init__(self, model_arch, n_class, pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_arch, pretrained=pretrained)\n        n_features = self.model.classifier.in_features\n        self.model.classifier = nn.Linear(n_features, n_class)\n        \n    def forward(self, x):\n        x = self.model(x)\n        return x","50b8116f":"# class CassvaImgClassifier(nn.Module):\n#     def __init__(self, model_arch, n_class, pretrained=False):\n#         super().__init__()\n#         backbone = timm.create_model(model_arch, pretrained=pretrained)\n#         n_features = backbone.classifier.in_features\n#         self.backbone = nn.Sequential(*backbone.children())[:-2]\n#         self.classifier = nn.Sequential(nn.Linear(n_features, 800),\n#                                         nn.ReLU(inplace=True),\n#                                         nn.Dropout(p=0.5),\n#                                         nn.Linear(800,n_class)\n#                                         )\n#         self.pool = nn.AdaptiveAvgPool2d((1, 1))\n\n#     def forward_features(self, x):\n#         x = self.backbone(x)\n#         return x\n\n#     def forward(self, x):\n#         feats = self.forward_features(x)\n#         x = self.pool(feats).view(x.size(0), -1)\n#         x = self.classifier(x)\n#         return x, feats","4364bb35":"def inference_one_epoch(model, data_loader, device):\n    model.eval()\n\n    image_preds_all = []\n    \n    pbar = tqdm(enumerate(data_loader), total=len(data_loader))\n    for step, (imgs) in pbar:\n        imgs = imgs.to(device).float()\n        \n        image_preds = model(imgs)   #output = model(input)\n        image_preds_all += [torch.softmax(image_preds, 1).detach().cpu().numpy()]\n        \n    \n    image_preds_all = np.concatenate(image_preds_all, axis=0)\n    return image_preds_all","5b1156a4":"test = pd.DataFrame()\ntest['image_id'] = list(os.listdir('..\/input\/cassava-leaf-disease-classification\/test_images\/'))\ntest_ds = CassavaDataset(test, '..\/input\/cassava-leaf-disease-classification\/test_images\/', transforms=get_inference_transforms(), output_label=False)\n\ntst_loader = torch.utils.data.DataLoader(\n              test_ds,\n              batch_size=CFG['valid_bs'],\n              num_workers=CFG['num_workers'],\n              shuffle=False,\n              pin_memory=False,)\ndevice = torch.device(CFG['device'])\nmodel = CassvaImgClassifier(CFG['model_arch'], 5 ).to(device)","da7de1c8":"# model ensemble\n# tst_preds = []\n\n# for epoch in range(CFG['epochs']-3):\n#     for i, epoch in enumerate(CFG['used_epochs']):    \n#         model.load_state_dict(torch.load('..\/input\/models\/tf_efficientnet_b4_ns_fold_{}_{}'.format(i,epoch)))\n\n#         with torch.no_grad():\n#             for _ in range(CFG['tta']):\n#                 tst_preds += [CFG['weights'][i]\/sum(CFG['weights'])\/CFG['tta']*inference_one_epoch(model, tst_loader, device)]\n\n# tst_preds = np.mean(tst_preds, axis=0) \n\n\n# del model\n# torch.cuda.empty_cache()","1075e105":"# model ensembel my model\ntst_preds = []\nmodel_name = ['net1_fold0_epoch0','tf_efficientnet_b4_ns_fold_0_4','tf_efficientnet_b4_ns_fold_3_5']\n\nfor i in range(len(model_name)):\n    model.load_state_dict(torch.load('..\/input\/model903\/{}'.format(model_name[i])))\n    with torch.no_grad():\n        for _ in range(CFG['tta']):\n            tst_preds += [CFG['weights'][i]\/sum(CFG['weights'])\/CFG['tta']*inference_one_epoch(model, tst_loader, device)]\n\ntst_preds = np.mean(tst_preds, axis=0) \n\n\ndel model\ntorch.cuda.empty_cache()","4fa23cee":"#single model\n# tst_preds = []\n\n# model.load_state_dict(torch.load('..\/input\/model-08ce-02rce\/tf_efficientnet_b4_ns_fold_2_5.pth'),False)\n\n# with torch.no_grad():\n#     for _ in range(CFG['tta']):\n#         tst_preds += [inference_one_epoch(model, tst_loader, device)]\n\n# tst_preds = np.mean(tst_preds, axis=0) \n\n\n# del model\n# torch.cuda.empty_cache()","5be930a5":"test['label'] = np.argmax(tst_preds, axis=1)\ntest.head()","67f50aa2":"test['label'] = np.argmax(tst_preds, axis=1)\ntest.head()","8c215973":"test.to_csv('submission.csv', index=False)","569fcb9e":"dd"}}