{"cell_type":{"fb1ca647":"code","146691a3":"code","85e1bf6d":"code","0eb3898c":"code","b1442ed2":"code","87f39cf2":"code","c051732c":"code","fa207d14":"code","b5b0183e":"code","4a024f6e":"code","5eadb3b4":"code","c50bf569":"code","fc0e7a74":"code","d4ffe839":"code","3e289345":"code","40610d9c":"code","38332331":"code","09bead2b":"code","8b46f656":"code","6a141faf":"code","ae6302b8":"code","52b978c4":"code","8ea0b7fa":"code","75436963":"code","393b41e5":"code","628458ec":"code","3aa2b506":"code","203606e3":"code","a0fd13f7":"code","08362c63":"code","9d3931b4":"code","e61c48a0":"code","b08f0773":"code","96b65103":"code","d6711702":"code","4d1c4868":"code","f79486ab":"code","92330ae6":"code","4fd4bcb3":"code","5cfd8aed":"code","457e3fd8":"code","136b066e":"code","e0026ef4":"code","1070e710":"code","e024998b":"code","6607a308":"code","eb4e84f2":"code","e09b4d20":"code","eff505a7":"code","708291ab":"code","bfbeb5ee":"code","01ec799f":"code","a80f3cd5":"code","747401ee":"code","3323b978":"code","0844437d":"code","37fcb1f4":"code","fcc43932":"code","87a1e0ae":"code","7040f153":"code","a2f3acf0":"code","5199bb5f":"code","b996fa2c":"code","cb4aa392":"code","39c78d5d":"markdown","0d4c0831":"markdown","7b09b354":"markdown","7590c435":"markdown","9ccc2fd4":"markdown","254422b3":"markdown","c17e2b8a":"markdown","359e2afe":"markdown"},"source":{"fb1ca647":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndf = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\n\ndf.rename(columns={\"race\/ethnicity\":\"race\", \"parental level of education\":\"PLE\", \"test preparation course\":\"TPC\",\"math score\":\"math\",\n                   \"reading score\":\"reading\",\"writing score\":\"writing\"}, inplace=True)","146691a3":"df.info()","85e1bf6d":"df.describe()","0eb3898c":"df.isnull().sum()","b1442ed2":"import missingno as msno\nmsno.matrix(df)","87f39cf2":"plt.figure(figsize=(30,10))\nsns.countplot(x=\"math\", data = df, palette=\"muted\")","c051732c":"plt.figure(figsize=(26,8))\n\nplt.subplot(1, 3, 1)\nsns.histplot(df, x=\"math\",multiple=\"stack\", hue=\"gender\")\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.histplot(df, x=\"reading\",multiple=\"stack\", hue=\"gender\")\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.histplot(df, x=\"writing\",multiple=\"stack\", hue=\"gender\")\nplt.title('WRITING SCORES')\n\nplt.show()","fa207d14":"df","b5b0183e":"plt.figure(figsize=(26,8))\n\nplt.subplot(1, 3, 1)\nsns.histplot(df, x=\"math\",multiple=\"stack\", hue=\"PLE\")\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.histplot(df, x=\"reading\",multiple=\"stack\", hue=\"PLE\")\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.histplot(df, x=\"writing\",multiple=\"stack\", hue=\"PLE\")\nplt.title('WRITING SCORES')\n\nplt.show()","4a024f6e":"plt.figure(figsize=(26,8))\n\nplt.subplot(1, 3, 1)\nsns.histplot(df, x=\"math\",multiple=\"stack\", hue=\"TPC\")\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.histplot(df, x=\"reading\",multiple=\"stack\", hue=\"TPC\")\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.histplot(df, x=\"writing\",multiple=\"stack\", hue=\"TPC\")\nplt.title('WRITING SCORES')\n\nplt.show()","5eadb3b4":"plt.figure(figsize=(26,8))\n\nplt.subplot(1, 3, 1)\nsns.histplot(df, x=\"math\",multiple=\"stack\", hue=\"lunch\")\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.histplot(df, x=\"reading\",multiple=\"stack\", hue=\"lunch\")\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.histplot(df, x=\"writing\",multiple=\"stack\", hue=\"lunch\")\nplt.title('WRITING SCORES')\n\nplt.show()","c50bf569":"plt.figure(figsize=(14,8))\n\nplt.subplot(1, 3, 1)\nsns.barplot(x='TPC',y='math',data=df,hue='gender')\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.barplot(x='TPC',y='reading',data=df,hue='gender')\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.barplot(x='TPC',y='writing',data=df,hue='gender')\nplt.title('WRITING SCORES')\n\nplt.show()","fc0e7a74":"# Now lets see how lunch affects the scores\n\nplt.figure(figsize=(14,8))\n\nplt.subplot(1, 3, 1)\nsns.barplot(x='TPC',y='math',data=df,hue='lunch')\nplt.title('MATH SCORES')\n\nplt.subplot(1, 3, 2)\nsns.barplot(x='TPC',y='reading',data=df,hue='lunch')\nplt.title('READING SCORES')\n\nplt.subplot(1, 3, 3)\nsns.barplot(x='TPC',y='writing',data=df,hue='lunch')\nplt.title('WRITING SCORES')\n\nplt.show()","d4ffe839":"plt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nplt.title('MATH SCORES')\nsns.barplot(x='race',y='math',data=df,hue='gender')\n\nplt.rcParams['axes.facecolor'] = \"#ccffcc\"\nplt.subplot(1, 3, 2)\nplt.title('READING SCORES')\nsns.barplot(x='race',y='reading',data=df,hue='gender')\n\nplt.rcParams['axes.facecolor'] = \"#e6e6ff\"\nplt.subplot(1, 3, 3)\nplt.title('WRITING SCORES')\nsns.barplot(x='race',y='writing',data=df,hue='gender')\nplt.show()","3e289345":"plt.figure(figsize=(12,6))\nplt.title('PARENTS LEVEL OF EDUCATION')\nsns.countplot(x='PLE',data=df)\n","40610d9c":"plt.figure(figsize=(30,6))\n\nplt.subplot(1, 3, 1)\nplt.title('PARENTS LEVEL OF EDUCATION vs CHILDREN\\'s Math SCORE')\nsns.barplot(x=df['PLE'],y='math',data=df)\n\nplt.subplot(1, 3, 2)\nplt.title('PARENTS LEVEL OF EDUCATION vs CHILDREN\\'s Math SCORE')\nsns.barplot(x=df['PLE'],y='reading',data=df)\n\nplt.subplot(1, 3, 3)\nplt.title('PARENTS LEVEL OF EDUCATION vs CHILDREN\\'s Math SCORE')\nsns.barplot(x=df['PLE'],y='writing',data=df)","38332331":"total_scores = df[[\"PLE\",\"math\",\"reading\",\"writing\"]].groupby(\"PLE\").sum().reset_index()\nmean_scores = df[[\"PLE\",\"math\",\"reading\",\"writing\"]].groupby(\"PLE\").mean().reset_index()\nplt.figure(figsize=(25,6))\n\nplt.subplot(1, 2, 1)\nplt.title('PARENTS LEVEL OF EDUCATION vs CHILDREN\\'s Math SCORE')\nsns.barplot(x=total_scores['PLE'],y=\"math\",data=total_scores, order=total_scores.sort_values(\"math\")[\"PLE\"])\n\nplt.subplot(1, 2, 2)\nplt.title('PARENTS LEVEL OF EDUCATION vs CHILDREN\\'s Math SCORE')\nsns.barplot(x=mean_scores['PLE'],y=\"math\",data=mean_scores, order=mean_scores.sort_values(\"math\")[\"PLE\"])","09bead2b":"mean = df[[\"lunch\",\"math\",\"reading\",\"writing\"]].groupby(\"lunch\").mean().reset_index()\n\nplt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nplt.title('MATH SCORES')\nsns.barplot(x='lunch',y='math',data=mean)\n\nplt.subplot(1, 3, 2)\nplt.title('READING SCORES')\nsns.barplot(x='lunch',y='reading',data=mean)\n\nplt.subplot(1, 3, 3)\nplt.title('WRITING SCORES')\nsns.barplot(x='lunch',y='writing',data=mean)\nplt.show()","8b46f656":"mean = df[[\"race\",\"math\",\"reading\",\"writing\"]].groupby(\"race\").mean().reset_index()\n\nplt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nplt.title('MATH SCORES')\nsns.barplot(x='race',y='math',data=mean)\n\nplt.subplot(1, 3, 2)\nplt.title('READING SCORES')\nsns.barplot(x='race',y='reading',data=mean)\n\nplt.subplot(1, 3, 3)\nplt.title('WRITING SCORES')\nsns.barplot(x='race',y='writing',data=mean)\nplt.show()","6a141faf":"sns.pairplot(data=df,hue='gender')","ae6302b8":"passmark = 50\n\ndf['math_pass'] = np.where(df['math']<passmark, False, True)\n\ndf['reading_pass'] = np.where(df['reading']<passmark, False, True)\n\ndf['writing_pass'] = np.where(df['writing']<passmark, False, True)\n","52b978c4":"df['allexam_pass'] = df.apply(lambda x : False if x['math_pass'] == False or \n                                    x['reading_pass'] == False or x['writing_pass'] == False else True, axis =1)\n","8ea0b7fa":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='PLE', data = df, hue='math_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=45)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='PLE', data = df, hue='reading_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=45)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='PLE', data = df, hue='writing_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=45)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='PLE', data = df, hue='allexam_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=45)\nplt.title('READING SCORES')","75436963":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='TPC', data = df, hue='math_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='TPC', data = df, hue='reading_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='TPC', data = df, hue='writing_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='TPC', data = df, hue='allexam_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","393b41e5":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='lunch', data = df, hue='math_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='lunch', data = df, hue='reading_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='lunch', data = df, hue='writing_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='lunch', data = df, hue='allexam_pass', palette='bright')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","628458ec":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='race', data = df, hue='math_pass')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='race', data = df, hue='reading_pass')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='race', data = df, hue='writing_pass')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='race', data = df, hue='allexam_pass')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","3aa2b506":"df[(df['math'] > 90) & (df['reading'] > 90) & (df['writing']>90)].sort_values(by=['math','reading',\"writing\"],ascending=False)","203606e3":"print('Maximum score in Maths is: ',max(df['math']))\nprint('Having maximum score in math: ', len(df[df['math'] == max(df['math']) ]))\n\nprint('Minimum score in Maths is: ',min(df['math']))\nprint('Having minimum score in math: ', len(df[df['math'] == min(df['math']) ]))\n\nprint('Maximum score in reading is: ',max(df['reading']))\nprint('Having maximum score in reading: ', len(df[df['reading'] == max(df['reading']) ]))\n\nprint('Minimum score in reading is: ',min(df['reading']))\nprint('Having minimum score in reading: ', len(df[df['reading'] == min(df['reading']) ]))\n\nprint('Maximum score in writing is: ',max(df['writing']))\nprint('Having maximum score in writing: ', len(df[df['writing'] == max(df['writing']) ]))\n\nprint('Minimum score in writing is: ',min(df['writing']))\nprint('Having minimum score in writing: ', len(df[df['writing'] == min(df['writing']) ]))","a0fd13f7":"maximum_math = df['math'] == max(df[\"math\"])\nmaximum_reading = df['reading'] == max(df[\"reading\"])\nmaximum_writing = df['writing'] == max(df[\"writing\"])\n\nmaximum_score = df[(maximum_math) & (maximum_reading) & (maximum_writing)]\nmaximum_score ","08362c63":"minimum_math = df['math'] == min(df[\"math\"])\nminimum_reading = df['reading'] == min(df[\"reading\"])\nminimum_writing = df['writing'] == min(df[\"writing\"])\n\nminimum_score = df[(minimum_math) & (minimum_reading) & (minimum_writing)]","9d3931b4":"def get_grade_for_exam(marks):\n    if marks >= 85:\n        return 'A'\n    elif marks >= 70 and marks < 85:\n        return 'B'\n    elif marks >= 55 and marks < 70:\n        return 'C'\n    elif marks >= 40 and marks < 55:\n        return 'D'\n    elif marks < 40:\n        return 'E'\n    \ndf['reading_grade'] = df['reading'].apply(get_grade_for_exam)\ndf['writing_grade'] = df['writing'].apply(get_grade_for_exam)\ndf['math_grade'] = df['math'].apply(get_grade_for_exam)\ndf[\"allexam_mean_grade\"] = df[[\"math\",\"reading\",\"writing\"]].mean(axis=1).apply(get_grade_for_exam)","e61c48a0":"df['allexam_pass'] = df.apply(lambda x : False if x['math_grade'] == False or \n                                    x['reading_pass'] == False or x['writing_pass'] == False else True, axis =1)","b08f0773":"plt.figure(figsize=(16,5))\norder = df[\"math_grade\"].sort_values().unique()\nplt.subplot(1,3,1)\nsns.countplot(x ='math_grade', data = df, order = order )\nplt.title('Grade Count in Math')\n\n\nplt.subplot(1,3,2)\nsns.countplot(x ='reading_grade', data = df,order = order)\nplt.title('Grade Count in Reading')\n\nplt.subplot(1,3,3)\nsns.countplot(x ='writing_grade', data = df,order = order)\nplt.title('Grade Count in Writing')\n\nplt.tight_layout()","96b65103":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='race', data = df, hue='math_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='race', data = df, hue='reading_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='race', data = df, hue='writing_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='race', data = df, hue='allexam_mean_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","d6711702":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='TPC', data = df, hue='math_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='TPC', data = df, hue='reading_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='TPC', data = df, hue='writing_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='TPC', data = df, hue='allexam_mean_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","4d1c4868":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='PLE', data = df, hue='math_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='PLE', data = df, hue='reading_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='PLE', data = df, hue='writing_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='PLE', data = df, hue='allexam_mean_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","f79486ab":"plt.figure(figsize=(30,6))\n\nplt.subplot(1,4,1)\np = sns.countplot(x='lunch', data = df, hue='math_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,2)\np = sns.countplot(x='lunch', data = df, hue='reading_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,3)\np = sns.countplot(x='lunch', data = df, hue='writing_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')\n\nplt.subplot(1,4,4)\np = sns.countplot(x='lunch', data = df, hue='allexam_mean_grade')\n_ = plt.setp(p.get_xticklabels(), rotation=90)\nplt.title('READING SCORES')","92330ae6":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nsns.boxplot(x = 'gender', y = 'math', data = df)\n\nplt.subplot(1,3,2)\nsns.boxplot(x = 'gender', y = 'reading', data = df)\n\nplt.subplot(1,3,3)\nsns.boxplot(x = 'gender', y = 'writing', data = df)\n\n","4fd4bcb3":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nsns.boxplot(x = 'lunch', y = 'math', data = df)\n\nplt.subplot(1,3,2)\nsns.boxplot(x = 'lunch', y = 'reading', data = df)\n\nplt.subplot(1,3,3)\nsns.boxplot(x = 'lunch', y = 'writing', data = df)\n\n","5cfd8aed":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nsns.boxplot(x = 'PLE', y = 'math', data = df)\n\nplt.subplot(1,3,2)\nsns.boxplot(x = 'PLE', y = 'reading', data = df)\n\nplt.subplot(1,3,3)\nsns.boxplot(x = 'PLE', y = 'writing', data = df)\n\n","457e3fd8":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nsns.boxplot(x = 'TPC', y = 'math', data = df)\n\nplt.subplot(1,3,2)\nsns.boxplot(x = 'TPC', y = 'reading', data = df)\n\nplt.subplot(1,3,3)\nsns.boxplot(x = 'TPC', y = 'writing', data = df)\n\n","136b066e":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,3,1)\nsns.boxplot(x = 'race', y = 'math', data = df)\n\nplt.subplot(1,3,2)\nsns.boxplot(x = 'race', y = 'reading', data = df)\n\nplt.subplot(1,3,3)\nsns.boxplot(x = 'race', y = 'writing', data = df)\n\n","e0026ef4":"sns.pairplot(data=df,hue='gender',plot_kws={'alpha':0.3})","1070e710":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(8, 8))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"autumn\",annot=True)","e024998b":"df.corr().abs()[\"math\"].sort_values(ascending=False)","6607a308":"from sklearn.model_selection import RepeatedKFold,cross_validate, train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_squared_log_error\nimport re\n","eb4e84f2":"\n\ndef evaluateRegressor(y, y_pred):\n    \n    MSE = mean_squared_error(y, y_pred)\n    MAE = mean_absolute_error(y, y_pred )\n    RMSE = mean_squared_error(y, y_pred, squared = False)\n    MSLE = mean_squared_log_error(y, y_pred)\n    R_squared = r2_score(y, y_pred )\n    \n    print(\"MSE:\", MSE)\n    print(\"MAE:\", MAE)\n    print(\"RMSE:\", RMSE)\n    print(\"MSLE:\", MSLE)\n    print(\"R-squared:\", R_squared)","e09b4d20":"\n\ndf_train = df[[\"gender\",\"race\",\"PLE\",\"lunch\",\"TPC\",\"math\"]].copy()\ndf_train = pd.get_dummies(df_train)\n\n# Baz\u0131 modellerde kolon isimleri ile alakal\u0131 hatalar ortaya \u00e7\u0131kabiliyor. Bunu engelemek i\u00e7in kolon isimlerine regex uygulayarak uygun hale getiriyoruz.\ndf_train = df_train.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\n\nX = df_train.drop([\"math\"], axis=1)\n\nY = df_train[\"math\"]\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = .2)","eff505a7":"from xgboost import XGBRegressor\n\nregressor = XGBRegressor()\n\nregressor.fit(x_train,y_train)\n\nevaluateRegressor(y_test, regressor.predict(x_test))","708291ab":"scoring=['r2','neg_root_mean_squared_error',\"neg_mean_squared_error\",'neg_mean_absolute_error']\ncv = RepeatedKFold(n_splits=5, n_repeats=5)\nscores = cross_validate(regressor,X,Y,cv=cv, scoring=scoring)","bfbeb5ee":"print(\"R2: \",scores[\"test_r2\"].mean())\nprint(\"MSE: \",(scores[\"test_neg_mean_squared_error\"]* -1).mean())\nprint(\"RMSE: \",(scores[\"test_neg_root_mean_squared_error\"]* -1).mean() )\nprint(\"MAE: \",(scores[\"test_neg_mean_absolute_error\"] * -1).mean() )","01ec799f":"from sklearn.model_selection import RandomizedSearchCV\nparams = { 'max_depth': [3, 5, 6, 10, 15, 20],\n           'learning_rate': [00.1,0.01, 0.1, 0.2, 0.3],\n           'subsample': np.arange(0.5, 1.0, 0.1),\n           'colsample_bytree': np.arange(0.4, 1.0, 0.1),\n           'colsample_bylevel': np.arange(0.4, 1.0, 0.1),\n           'n_estimators': [100, 500, 1000]}\nxgbr = XGBRegressor(seed = 20, objective=\"reg:squarederror\")\nclf = RandomizedSearchCV(estimator=xgbr,\n                         param_distributions=params,\n                         scoring='neg_mean_squared_error',\n                         n_iter=25,\n                         verbose=1)\nclf.fit(X, Y)\nprint(\"Best parameters:\", clf.best_params_)\nprint(\"Lowest MSE: \", (-clf.best_score_))","a80f3cd5":"print(\"Best parameters:\", clf.best_params_)\nprint(\"Lowest MSE: \", (-clf.best_score_))","747401ee":"df.info()","3323b978":"\ndf_clss = df[[\"gender\",\"race\",\"PLE\",\"lunch\",\"TPC\",\"math_pass\"]]\ndf_clss = pd.get_dummies(df_clss)\n\n# Baz\u0131 modellerde kolon isimleri ile alakal\u0131 hatalar ortaya \u00e7\u0131kabiliyor. Bunu engelemek i\u00e7in kolon isimlerine regex uygulayarak uygun hale getiriyoruz.\ndf_clss = df_clss.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\n\nX = df_clss.drop([\"math_pass\"], axis=1)\n\nY = df_clss[\"math_pass\"]\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = .2)","0844437d":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, plot_confusion_matrix,roc_auc_score,plot_roc_curve\n\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","37fcb1f4":"plot_confusion_matrix(model, x_test, y_test)","fcc43932":"plot_roc_curve(model, x_test, y_test)","87a1e0ae":"print(\"Precision: \",precision_score(y_test, y_pred))\nprint(\"Recall: \",recall_score(y_test, y_pred))\nprint(\"F1 Score: \",f1_score(y_test, y_pred))\nprint(\"ROC_AUC :\", roc_auc_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","7040f153":"from sklearn.model_selection import RandomizedSearchCV\nparams = { 'max_depth': [3, 5, 6, 10, 15, 20],\n           'learning_rate': [00.1,0.01, 0.1, 0.2, 0.3],\n           'subsample': np.arange(0.5, 1.0, 0.1),\n           'colsample_bytree': np.arange(0.4, 1.0, 0.1),\n           'colsample_bylevel': np.arange(0.4, 1.0, 0.1),\n           'n_estimators': [100, 500, 1000]}\n\nxgbr = XGBClassifier(seed = 20, objective=\"reg:squarederror\")\nclf = RandomizedSearchCV(estimator=xgbr,\n                         param_distributions=params,\n                         scoring='accuracy',\n                         n_iter=50,\n                         verbose=1)\nclf.fit(X, Y)\n\nprint(\"Best parameters:\", clf.best_params_)\nprint(\"Highest Accuracy: \", (clf.best_score_))","a2f3acf0":"y_pred = clf.predict(x_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","5199bb5f":"print(\"Precision: \",precision_score(y_test, y_pred))\nprint(\"Recall: \",recall_score(y_test, y_pred))\nprint(\"F1 Score: \",f1_score(y_test, y_pred))\nprint(roc_auc_score(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","b996fa2c":"plot_roc_curve(clf, x_test, y_test)","cb4aa392":"plot_confusion_matrix(clf, x_test, y_test)","39c78d5d":"## Math Pass Classification ","0d4c0831":"# EDA ","7b09b354":"## MATH Score Prediction","7590c435":"# Correlation","9ccc2fd4":"# Train","254422b3":"# To Do\n- Data Load ve Missing Value\n- EDA\n- Feature Extraction\n- Train\n    - Classification\n        - [x] What will student's math grade be\n    - Regression\n        - [x] How many will student math score be","c17e2b8a":"# Feature Extraction\n","359e2afe":"# Feature Extraction\n"}}