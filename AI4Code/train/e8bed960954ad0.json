{"cell_type":{"529655e1":"code","ceee2856":"code","c6c334bd":"code","03f0fc16":"code","576a8bb8":"code","c82d3c74":"code","9c45bb1f":"code","9304df13":"code","0f04d8cd":"code","37616c72":"code","84be07a3":"code","5d795e9f":"code","ab1fd9f9":"code","dacf8782":"code","f25d3b83":"code","8844aae0":"code","d5aeb252":"code","3ffce445":"code","df228091":"code","31dcb056":"code","fa360e2b":"code","57b3de5c":"code","5adbacb2":"code","d4824537":"code","517c818d":"code","e29ab4c8":"code","5967800b":"markdown","831e9179":"markdown","75f3002d":"markdown","27690fac":"markdown","a9cadc2d":"markdown","415ab3c0":"markdown"},"source":{"529655e1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\n","ceee2856":"df_raw = pd.read_csv(\"..\/input\/clothessizeprediction\/final_test.csv\")\ndf_raw.head()","c6c334bd":"df_raw.describe()","03f0fc16":"df_raw.isna().sum()","576a8bb8":"df_raw['age'] = df_raw['age'].fillna(df_raw['age'].median())\ndf_raw['height'] = df_raw['height'].fillna(df_raw['height'].mean())","c82d3c74":"df_raw['size'].value_counts()","9c45bb1f":"plt.hist(df_raw[\"age\"], color=\"b\", alpha=0.5, rwidth=.9);","9304df13":"plt.hist(df_raw[\"height\"], color=\"g\", alpha=0.5,rwidth=.9);","0f04d8cd":"plt.hist(df_raw['size'], color ='r', alpha = 0.4, rwidth=.9)","37616c72":"dfs = []\nsizes = []\nfor size_type in df_raw['size'].unique():\n    sizes.append(size_type)\n    ndf = df_raw[['age','height','weight']][df_raw['size'] == size_type]\n    zscore = ((ndf - ndf.mean())\/ndf.std())\n    dfs.append(zscore)","84be07a3":"for i in range(len(dfs)):\n    dfs[i]['age'] = dfs[i]['age'][(dfs[i]['age']>-3) & (dfs[i]['age']<3)]\n    dfs[i]['height'] = dfs[i]['height'][(dfs[i]['height']>-3) & (dfs[i]['height']<3)]\n    dfs[i]['weight'] = dfs[i]['weight'][(dfs[i]['weight']>-3) & (dfs[i]['weight']<3)]","5d795e9f":"for i in range(len(sizes)):\n    dfs[i]['size'] = sizes[i]\ndf = pd.concat(dfs)\ndf.head()","ab1fd9f9":"df['size'] = df['size'].map({'XXS': 1, 'S': 2, \"M\" : 3, \"L\" : 4, \"XL\" : 5, \"XXL\" : 6, \"XXXL\" : 7})","dacf8782":"df.describe()","f25d3b83":"df[\"height\"].fillna(df[\"height\"].mean(),inplace=True)\ndf[\"age\"].fillna(df[\"age\"].median(),inplace=True)\ndf[\"weight\"].fillna(df[\"weight\"].mean(),inplace=True)","8844aae0":"df[\"bmi\"] = df[\"height\"]\/df[\"weight\"]\ndf[\"weight_sq\"] = df[\"weight\"]*df[\"weight\"]","d5aeb252":"ax = sns.heatmap(df.corr(), annot=True)","3ffce445":"#df.drop(\"age\", axis=1, inplace=True)\n#df.drop(\"height\", axis=1, inplace=True)\n#df.drop(\"bmi\", axis=1, inplace=True)\n#df.drop(\"weight_sq\", axis=1, inplace=True)","df228091":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(df.drop('size', axis=1),df['size'],test_size=0.001)","31dcb056":"# transfer = StandardScaler()\n# X_train = transfer.fit_transform(X_train)\n# X_test = transfer.transform(X_test)","fa360e2b":"lr = LinearRegression()\nlr.fit(X_train,Y_train)\nlr_score = lr.score(X_test,Y_test)","57b3de5c":"from sklearn.metrics import accuracy_score\nxgb = XGBRegressor()\nxgb.fit(X_train, Y_train)\ny_pred = xgb.predict(X_test)\npredictions = [round(value) for value in y_pred]\nxgb_score = accuracy_score(Y_test, predictions)","5adbacb2":"knn = KNeighborsClassifier(n_neighbors=7, metric='manhattan', weights='distance')\nknn.fit(X_train,Y_train)\nknn_score = knn.score(X_test,Y_test)","d4824537":"dt = DecisionTreeClassifier()\ndt.fit(X_train,Y_train)\ndt_score = dt.score(X_test,Y_test)","517c818d":"scores=[lr_score,xgb_score,knn_score,dt_score]\nlabels=[\"LinearRegression\",\"XGB\",\"KNN\",\"DecisionTree\"]\nprint(scores)","e29ab4c8":"sns.barplot(labels,scores, orient=\"v\");\nplt.ylabel(\"Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model\");","5967800b":"# Loading Dataset","831e9179":"# Splitting into training and test set","75f3002d":"# Outlier Removal","27690fac":"# Training Model","a9cadc2d":"# Understanding and Visualizing Data","415ab3c0":"# Feature Engineering"}}