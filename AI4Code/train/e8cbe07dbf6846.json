{"cell_type":{"db44ca33":"code","e5841120":"code","dc3cc5a0":"code","3f50be22":"code","07d99311":"code","f773c524":"code","21ea7b77":"code","0b713777":"code","9f401489":"code","2c00e901":"code","14b1a949":"code","1d6ff369":"code","8b6bec2a":"code","4e928abd":"code","280f48ea":"code","47483f07":"code","ab51243b":"code","d038f9e2":"code","fd151906":"code","74d30704":"code","5c576792":"code","96b20f4e":"code","2a695f57":"code","144bb9f1":"code","b499761c":"code","8b974df0":"code","a6f99e6d":"code","72a5ba26":"code","3aa1a4d0":"code","cb87b217":"code","c4e77f5f":"code","e5f238d7":"markdown","caac3b52":"markdown","6f1fe2f2":"markdown","57a0e0da":"markdown","b593194b":"markdown","600b06a5":"markdown","d4e5a931":"markdown","41b3a724":"markdown","3ca434de":"markdown","22fe60b7":"markdown"},"source":{"db44ca33":"import scipy.stats as stats\nimport numpy as np    \nimport pandas as pd   \nfrom matplotlib import pyplot as plt \nimport seaborn as sns  \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","e5841120":"imdb = pd.read_csv(\"..\/input\/imdb.csv\", encoding=\"ISO-8859-1\")","dc3cc5a0":"print(imdb.shape)\nimdb.columns = imdb.columns.str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\n#Replaced spaces with underscores\nimdb.head()","3f50be22":"#This is a small correlation heatmap to exclude some numerical variables\nnumeric_variables_names = [imdb.columns[i] for i,x in enumerate(imdb.dtypes) if str(x) in ['float64','int64']]\n\nres = imdb[numeric_variables_names].corr()\n\nC = np.matrix(res)\nprint(type(C), C.shape)\nprint(C.min(),C.max())","07d99311":"sns.heatmap(C, center=0, annot=False, xticklabels=numeric_variables_names, yticklabels=numeric_variables_names)","f773c524":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"Year\",\"IMDb_Rating\"]]","21ea7b77":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)","0b713777":"X_test.shape\n","9f401489":"model = LinearRegression()\nmodel.fit(X_train, y_train)","2c00e901":"ynew = model.predict(X_test)","14b1a949":"val_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this first model is\")\nprint(abs((1-(val_mae\/10))*100),\"%\")\n","1d6ff369":"imdb.Genres.value_counts()\n#Genres are: Drama, Comedy, Romance, Mystery, Thriller, Horror, Music, Fantasy, Sci_Fi, Documentary, Action, Crime, War, \n#Biography, Western, History\n","8b6bec2a":"L=imdb.Genres.tolist()","4e928abd":"m=imdb.shape[0]\nGenre_list=[[0 for j in range(m)] for i in range(6)]\n#Genres are: Drama, Comedy, Romance, Mystery, Thriller, Horror, Music, Fantasy, Sci_Fi, Documentary, Action, Crime, War, \n#Biography, Western, History, Adventure\nd={'Drama':10, 'Comedy':20, 'Romance':30, 'Mystery':40, 'Thriller':50, 'Horror':60, 'Music':70, 'Musical':70, 'Fantasy':80, 'Sci-Fi':90, 'Documentary':100, 'Action':110, 'Crime':120, 'War':130, 'Biography':140, 'Western':150, 'History':160,'Adventure':180,'Animation':190,'Family':200,'Talk-Show':0,'News':0}\nfor i in range(len(L)):\n    ch=L[i]\n    ch.replace(\" \",\"\")\n    chl=ch.split(\", \")\n    for j in range(len(chl)):\n        val=chl[j]\n        Genre_list[j][i]=d[val]\n","280f48ea":"#Creating new columns for genre classification and numerisation, each column has a number that corresponds to a genre\n#If there are less than 6 genres, the empty columns take 0 as a value\nGenre1=np.array(Genre_list[0])\nGenre2=np.array(Genre_list[1])\nGenre3=np.array(Genre_list[2])\nGenre4=np.array(Genre_list[3])\nGenre5=np.array(Genre_list[4])\nGenre6=np.array(Genre_list[5])\nimdb['Genre1']=Genre1\nimdb['Genre2']=Genre2\nimdb['Genre3']=Genre3\nimdb['Genre4']=Genre4\nimdb['Genre5']=Genre5\nimdb['Genre6']=Genre6","47483f07":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"Year\",\"IMDb_Rating\",\"Genre1\",\"Genre2\",\"Genre3\",\"Genre4\",\"Genre5\",\"Genre6\",]]","ab51243b":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nynew = model.predict(X_test)","d038f9e2":"val_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this second model is\")\nprint(abs((1-(val_mae\/10))*100),\"%\")\n","fd151906":"\nGenre_list=[[0 for j in range(206)] for i in range(6)]\n#Genres are: Drama, Comedy, Romance, Mystery, Thriller, Horror, Music, Fantasy, Sci_Fi, Documentary, Action, Crime, War, \n#Biography, Western, History, Adventure\nd={'Drama':1, 'Comedy':3, 'Romance':1, 'Mystery':2, 'Thriller':2, 'Horror':2, 'Music':8, 'Musical':8, 'Fantasy':4, 'Sci-Fi':4, 'Documentary':5, 'Action':6, 'Crime':6, 'War':6, 'Biography':5, 'Western':7, 'History':7,'Adventure':2,'Animation':8,'Family':8,'Talk-Show':0,'News':0}\nfor i in range(len(L)):\n    ch=L[i]\n    ch.replace(\" \",\"\")\n    chl=ch.split(\", \")\n    for j in range(len(chl)):\n        val=chl[j]\n        Genre_list[j][i]=d[val]\n","74d30704":"Genre1=np.array(Genre_list[0])\nGenre2=np.array(Genre_list[1])\nGenre3=np.array(Genre_list[2])\nGenre4=np.array(Genre_list[3])\nGenre5=np.array(Genre_list[4])\nGenre6=np.array(Genre_list[5])\nimdb['Genre1']=Genre1\nimdb['Genre2']=Genre2\nimdb['Genre3']=Genre3\nimdb['Genre4']=Genre4\nimdb['Genre5']=Genre5\nimdb['Genre6']=Genre6","5c576792":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"Year\",\"IMDb_Rating\",\"Genre1\",\"Genre2\",\"Genre3\",\"Genre4\",\"Genre5\",\"Genre6\",]]","96b20f4e":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","2a695f57":"val_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this third model is\")\nprint(abs((1-(val_mae\/10))*100),\"% which is was less\")\nprint(\"However, In a previous version where there were different and more clusters it was less\")\nprint(\"I think this significant drop is because of the way I classified the Genres\")","144bb9f1":"imdb.drop(imdb.index[[0,7,37,38,48,56,57,63,70,96,105,125,146,162,173,192,197,201,203]], inplace=True)\nimdb[imdb.Directors.isna()]","b499761c":"director_list=imdb.Directors.tolist()\ndirector_list","8b974df0":"m=imdb.shape[0]\nDir_list=[0 for j in range(m)]\nRated_directors={'Stanley Kubrick':10,'Quentin Tarantino':10,'Yorgos Lanthimos':9,'Gaspar No\u00e9':8,'Lars Von Trier':8,'Martin Scorsese':8,'Denis Villeneuve':8,'David Fincher':7,'Edgar Wright':9}\nfor i in range(len(director_list)):\n    ch=director_list[i]\n    if ch in Rated_directors:\n        Dir_list[i]=d[val]\nDir_list\nDir_rating=np.array(Dir_list)\nimdb['Dir_rating']=Dir_rating\n","a6f99e6d":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"Year\",\"IMDb_Rating\",\"Genre1\",\"Genre2\",\"Genre3\",\"Genre4\",\"Genre5\",\"Genre6\",\"Dir_rating\"]]\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nynew = model.predict(X_test)\nynew","72a5ba26":"val_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this model is\")\nprint(abs((1-(val_mae\/10))*100),\"%\")\nprint(\"Adding my favourite directors increased the accuracy\")","3aa1a4d0":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"IMDb_Rating\",\"Genre1\",\"Genre2\",\"Genre3\",\"Genre4\",\"Genre5\",\"Genre6\",\"Dir_rating\"]]\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nynew = model.predict(X_test)\n\nval_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this model is\")\nprint(abs((1-(val_mae\/10))*100),\"%\")","cb87b217":"target=imdb[\"Your_Rating\"]\nfeatures=imdb[[\"IMDb_Rating\",\"Genre1\",\"Genre2\",\"Genre3\",\"Genre4\",\"Genre5\",\"Genre6\",\"Dir_rating\"]]\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)\nmodel = LogisticRegression(solver='lbfgs',multi_class='multinomial')\nmodel.fit(X_train, y_train)\nynew = model.predict(X_test)\nynew\n\nval_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this Logistic Regression model is\")\nprint(abs((1-(val_mae\/10))*100),\"%\")","c4e77f5f":"from sklearn import svm\nclf = svm.SVC(gamma='scale')\nclf.fit(X_train, y_train)\nynew=clf.predict(X_test)\nval_mae = mean_absolute_error(ynew, y_test)\nprint(\"The accuracy of this SVM model is\")\nprint(abs((1-(val_mae\/10))*100), \"%\")\n","e5f238d7":"Now I'm going to turn the Genres feature into a numerical variable and add it to my model","caac3b52":"I like some directors' work more than others. So I'm going to rate these directors","6f1fe2f2":"As it appears the feature I'm gonna use are Year, IMDb_Rating, Genres, Directors. The target is Your_Rating","57a0e0da":"Now I'm going to group Genres in clusters.","b593194b":"I'll try dropping the year","600b06a5":"Calculating the error and then the accuracy\n","d4e5a931":"Can I approach it as a classification model ?","41b3a724":"I will start with a linear regression model, starting with just two variables","3ca434de":"This is my first machine learning model. I extracted my imdb ratings dataset which is really is really small to be significant, but I'll try to just play around with a few variables and see what happens. The goal of this Notebook is to get used to Pandas and SkLearn.","22fe60b7":"I dropped the entries with non_assigned directors"}}