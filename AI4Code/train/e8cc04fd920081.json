{"cell_type":{"3890aae8":"code","d456bb8e":"code","5ef02f4c":"code","f4bf2220":"code","f95b99c1":"code","39cbf01e":"code","4a461496":"code","7862c586":"code","a501e507":"code","e28c1ee9":"code","79798c42":"code","740f1580":"code","5569328e":"code","60fddeb6":"code","c0ae7c5c":"code","c74c569a":"code","e7999322":"code","1e81248e":"code","284d41d3":"code","f96fd566":"code","f3b83a85":"code","1b795aae":"code","8ef0be8f":"code","138c7cbc":"code","4be8f805":"code","e8638852":"code","8dd58cff":"code","9fba8d58":"code","75f18760":"code","93df876c":"code","8f34dba3":"code","2e0ccf6b":"code","f120600b":"code","6f428a9d":"markdown","8aea9bfc":"markdown","d9473396":"markdown","df13fde1":"markdown","57391bea":"markdown","f31f2f09":"markdown","2c18546d":"markdown","8c26085b":"markdown","ecf52055":"markdown","6026a770":"markdown","99aa6145":"markdown","0d247ac4":"markdown","dbd1ef02":"markdown","ce7648c9":"markdown","9cd215e2":"markdown","816dadeb":"markdown","aa33f925":"markdown","26317f1a":"markdown","61304667":"markdown","b1a56b79":"markdown","94006bd2":"markdown","4a19d4fb":"markdown","a2922347":"markdown","6113cb51":"markdown","26daa6c3":"markdown","c5421ff8":"markdown","3c650211":"markdown","72d204f2":"markdown","d8132299":"markdown","9e7c9c7e":"markdown","9c0ed9d8":"markdown","88cc114f":"markdown","ece43132":"markdown","d0c3f1b5":"markdown","08838515":"markdown","7dc80915":"markdown","0f6af7a8":"markdown","3bc8834f":"markdown","0b98610a":"markdown","a0d711fa":"markdown","07471cde":"markdown","6248d22d":"markdown","519bcbf6":"markdown","ef87cce5":"markdown","62f3d603":"markdown","17bd01e4":"markdown","c1bd0c39":"markdown"},"source":{"3890aae8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # statistical data visualization\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","d456bb8e":"import warnings\n\nwarnings.filterwarnings('ignore')","5ef02f4c":"data = '..\/input\/penn-start-up-data\/cleaned_data15.csv'\n\ndf = pd.read_csv(data, header=None)","f4bf2220":"# view dimensions of dataset\n\ndf.shape","f95b99c1":"# preview the dataset\n\ndf.head()","39cbf01e":"col_names = ['name','state_code','founded_at','closed_at','first_funding_at','last_funding_at','age_first_funding_year','city','age_first_milestone_year',\n             'age_last_funding_year','age_last_milestone_year','relationships','num_funding_rounds','total_funding_amount','milestones','category',\n             'is_otherstate','is_CA','is_NY','is_MA','is_TX','is_enterprise','is_software','is_web','is_advertising','is_ecommerce','is_gamesvideo','is_mobile','is_biotech','is_consulting','is_othercategory'\n             ,'has_VC','has_angel','has_roundA','has_roundB','has_roundC','has_roundD','avg_participants','is_top500','success']\n\n\ndf.columns = col_names\n\ncol_names","4a461496":"# let's again preview the dataset\n\ndf.head()","7862c586":"df.info()","a501e507":"col_names = ['name','state_code','founded_at','closed_at','first_funding_at','last_funding_at','age_first_funding_year','city','age_first_milestone_year',\n             'age_last_funding_year','age_last_milestone_year','relationships','num_funding_rounds','total_funding_amount','milestones','category',\n             'is_otherstate','is_CA','is_NY','is_MA','is_TX','is_enterprise','is_software','is_web','is_advertising','is_ecommerce','is_gamesvideo','is_mobile','is_biotech','is_consulting','is_othercategory'\n             ,'has_VC','has_angel','has_roundA','has_roundB','has_roundC','has_roundD','avg_participants','is_top500','success']\n\n\nfor col in col_names:\n    \n    print(df[col].value_counts())   \n","e28c1ee9":"df['success'].value_counts()","79798c42":"# check missing values in variables\n\ndf.isnull().sum()","740f1580":"X = df.drop(['success'], axis=1)\n\ny = df['success']","5569328e":"# split data into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n","60fddeb6":"# check the shape of X_train and X_test\n\nX_train.shape, X_test.shape","c0ae7c5c":"# check data types in X_train\n\nX_train.dtypes","c74c569a":"X_train.head()","e7999322":"# import category encoders\n\nimport category_encoders as ce","1e81248e":"# encode categorical variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['name','state_code','founded_at','closed_at','first_funding_at','last_funding_at','age_first_funding_year','city','age_first_milestone_year',\n             'age_last_funding_year','age_last_milestone_year','relationships','num_funding_rounds','total_funding_amount','milestones','category',\n             'is_otherstate','is_CA','is_NY','is_MA','is_TX','is_enterprise','is_software','is_web','is_advertising','is_ecommerce','is_gamesvideo','is_mobile','is_biotech','is_consulting','is_othercategory'\n             ,'has_VC','has_angel','has_roundA','has_roundB','has_roundC','has_roundD','avg_participants','is_top500'])\n\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)","284d41d3":"X_train.head()","f96fd566":"X_test.head()","f3b83a85":"# import Random Forest classifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# instantiate the classifier \nrfc = RandomForestClassifier(random_state=0)\n\n# fit the model\nrfc.fit(X_train, y_train)\n\n# Predict the Test set results\ny_pred = rfc.predict(X_test)\n\n# Check accuracy score \nfrom sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with 10 decision-trees : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","1b795aae":"# instantiate the classifier with n_estimators = 100\n\nrfc_100 = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# fit the model to the training set\nrfc_100.fit(X_train, y_train)\n\n# Predict on the test set results\ny_pred_100 = rfc_100.predict(X_test)\n\n# Check accuracy score \nprint('Model accuracy score with 100 decision-trees : {0:0.4f}'. format(accuracy_score(y_test, y_pred_100)))","8ef0be8f":"# create the classifier with n_estimators = 100\n\nclf = RandomForestClassifier(n_estimators=100, random_state=0)\n\n\n\n# fit the model to the training set\n\nclf.fit(X_train, y_train)\n","138c7cbc":"# view the feature scores\n\nfeature_scores = pd.Series(clf.feature_importances_, index=X_train.columns).sort_values(ascending=False)\n\nfeature_scores","4be8f805":"# Creating a seaborn bar plot\nfig, ax = plt.subplots(figsize=(40,40))\nsns.barplot(x=feature_scores, y=feature_scores.index,ax=ax)\n\n# Add labels to the graph\n\nplt.xlabel('Feature Importance Score')\n\nplt.ylabel('Features')\n\n\n\n# Add title to the graph\n\nplt.title(\"Visualizing Important Features\")\n\n\n\n# Visualize the graph\n\nplt.show()","e8638852":"# declare feature vector and target variable\n\nX_new = df.drop(['success','is_ecommerce','is_gamesvideo','is_mobile','is_biotech','is_consulting','is_othercategory'], axis=1)\n\ny_new = df['success']","8dd58cff":"# split data into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_new, y_new, test_size = 0.33, random_state = 42)\n","9fba8d58":"# encode categorical variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['name','state_code','founded_at','closed_at','first_funding_at','last_funding_at','age_first_funding_year','city','age_first_milestone_year',\n             'age_last_funding_year','age_last_milestone_year','relationships','num_funding_rounds','total_funding_amount','milestones','category',\n             'is_otherstate','is_CA','is_NY','is_MA','is_TX','is_enterprise','is_software','is_web','is_advertising'\n             ,'has_VC','has_angel','has_roundA','has_roundB','has_roundC','has_roundD','is_top500','avg_participants'])\n\n\nX_train = encoder.fit_transform(X_train)\n\nX_test = encoder.transform(X_test)","75f18760":"# instantiate the classifier with n_estimators = 100\nclf = RandomForestClassifier(random_state=0)\n\n# fit the model to the training set\nclf.fit(X_train, y_train)\n\n# Predict on the test set results\n\ny_pred = clf.predict(X_test)\n\n# Check accuracy score \nprint('Model accuracy score with doors variable removed : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","93df876c":"# Print the Confusion Matrix and slice it into four pieces\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\n\nprint('Confusion matrix\\n\\n', cm)","8f34dba3":"sns.heatmap(cm,annot=True)","2e0ccf6b":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred))","f120600b":"#now we try some different methods to predict the outcome...\n","6f428a9d":"# **10. Declare feature vector and target variable** <a class=\"anchor\" id=\"10\"><\/a>\n\n[Table of Contents](#0.1)","8aea9bfc":"We can see that the `doors` and `persons` are categorical in nature. So, I will treat them as categorical variables.","d9473396":"# **19. Classification Report** <a class=\"anchor\" id=\"19\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n**Classification report** is another way to evaluate the classification model performance. It displays the  **precision**, **recall**, **f1** and **support** scores for the model. I have described these terms in later.\n\nWe can print a classification report as follows:-","df13fde1":"# **4. Feature selection with Random Forests** <a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n\nRandom forests algorithm can be used for feature selection process. This algorithm can be used to rank the importance of variables in a regression or classification problem. \n\n\nWe measure the variable importance in a dataset by fitting the random forest algorithm to the data. During the fitting process, the out-of-bag error for each data point is recorded and averaged over the forest. \n\n\nThe importance of the j-th feature was measured after training. The values of the j-th feature were permuted among the training data and the out-of-bag error was again computed on this perturbed dataset. The importance score for the j-th feature is computed by averaging the difference in out-of-bag error before and after the permutation over all trees. The score is normalized by the standard deviation of these differences.\n\n\nFeatures which produce large values for this score are ranked as more important than features which produce small values. Based on this score, we will choose the most important features and drop the least important ones for model building. \n","57391bea":"### Explore `class` variable","f31f2f09":"The model accuracy score with **10** decision-trees is **0.9351** but the same with **100** decision-trees is **0.9405**. So, as expected accuracy increases with number of decision-trees in the model.","2c18546d":"# **6. Relationship to nearest neighbours** <a class=\"anchor\" id=\"6\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nA relationship between random forests and the k-nearest neighbours algorithm was pointed out by Lin and Jeon in 2002. It turns out that both can be viewed as so-called weighted neighbourhoods schemes. These are models built from a training set that make predictions for new points by looking at the neighbourhood of the point, formalized by a weight function.","8c26085b":"# **2. Random Forest algorithm intuition** <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nRandom forest algorithm intuition can be divided into two stages. \n\n\nIn the first stage, we randomly select \u201ck\u201d features out of total `m` features and build the random forest. In the first stage, we proceed as follows:-\n\n1.\tRandomly select `k` features from a total of `m` features where `k < m`.\n2.\tAmong the `k` features, calculate the node `d` using the best split point.\n3.\tSplit the node into daughter nodes using the best split.\n4.\tRepeat 1 to 3 steps until `l` number of nodes has been reached.\n5.\tBuild forest by repeating steps 1 to 4 for `n` number of times to create `n` number of trees.\n\n\nIn the second stage, we make predictions using the trained random forest algorithm. \n\n1.\tWe take the test features and use the rules of each randomly created decision tree to predict the outcome and stores the predicted outcome.\n2.\tThen, we calculate the votes for each predicted target.\n3.\tFinally, we consider the high voted predicted target as the final prediction from the random forest algorithm.\n","ecf52055":"# **16. Visualize feature scores of the features** <a class=\"anchor\" id=\"16\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nNow, I will visualize the feature scores with matplotlib and seaborn.","6026a770":"# **7. Import libraries** <a class=\"anchor\" id=\"7\"><\/a>\n\n[Table of Contents](#0.1)","99aa6145":"The `succes` target variable is ordinal in nature.","0d247ac4":"We now have training and test set ready for model building. ","dbd1ef02":"# **11. Split data into separate training and test set** <a class=\"anchor\" id=\"11\"><\/a>\n\n[Table of Contents](#0.1)","ce7648c9":"### Encode categorical variables\n\n\nNow, I will encode the categorical variables.","9cd215e2":"# **8. Import dataset** <a class=\"anchor\" id=\"8\"><\/a>\n\n[Table of Contents](#0.1)","816dadeb":"### Summary of variables\n\n\n- There are 7 variables in the dataset. All the variables are of categorical data type.\n\n\n- These are given by `buying`, `maint`, `doors`, `persons`, `lug_boot`, `safety` and `class`.\n\n\n- `class` is the target variable.","aa33f925":"# **5. Difference between Random Forests and Decision Trees** <a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nI will compare random forests with decision-trees. Some salient features of comparison are as follows:-\n\n1. Random forests is a set of multiple decision-trees.\n\n2. Decision-trees are computationally faster as compared to random forests.\n\n3. Deep decision-trees may suffer from overfitting. Random forest prevents overfitting by creating trees on random forests.\n\n4. Random forest is difficult to interpret. But, a decision-tree is easily interpretable and can be converted to rules.","26317f1a":"# **12. Feature Engineering** <a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n**Feature Engineering** is the process of transforming raw data into useful features that help us to understand our model better and increase its predictive power. I will carry out feature engineering on different types of variables.\n\n\nFirst, I will check the data types of variables again.","61304667":"We can see that the column names are renamed. Now, the columns have meaningful names.","b1a56b79":"# **15. Find important features with Random Forest model** <a class=\"anchor\" id=\"15\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nUntil now, I have used all the features given in the model. Now, I will select only the important features, build the model using these features and see its effect on accuracy. \n\n\nFirst, I will create the Random Forest model as follows:-","94006bd2":"Now, I will build the random forest model and check accuracy.","4a19d4fb":"# **18. Confusion matrix** <a class=\"anchor\" id=\"18\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n\nA confusion matrix is a tool for summarizing the performance of a classification algorithm. A confusion matrix will give us a clear picture of classification model performance and the types of errors produced by the model. It gives us a summary of correct and incorrect predictions broken down by each category. The summary is represented in a tabular form.\n\n\nFour types of outcomes are possible while evaluating a classification model performance. These four outcomes are described below:-\n\n\n**True Positives (TP)** \u2013 True Positives occur when we predict an observation belongs to a certain class and the observation actually belongs to that class.\n\n\n**True Negatives (TN)** \u2013 True Negatives occur when we predict an observation does not belong to a certain class and the observation actually does not belong to that class.\n\n\n**False Positives (FP)** \u2013 False Positives occur when we predict an observation belongs to a    certain class but the observation actually does not belong to that class. This type of error is called **Type I error.**\n\n\n\n**False Negatives (FN)** \u2013 False Negatives occur when we predict an observation does not belong to a certain class but the observation actually belongs to that class. This is a very serious error and it is called **Type II error.**\n\n\n\nThese four outcomes are summarized in a confusion matrix given below.\n","a2922347":"### View top 5 rows of dataset","6113cb51":"# **20. Results and conclusion** <a class=\"anchor\" id=\"20\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n1.\tIn this project, I build a Random Forest Classifier to predict the success of the start-up. I build two models, one with 10 decision-trees and another one with 100 decision-trees. \n2.\tThe model accuracy score with 10 decision-trees is 0.7622 but the same with 100 decision-trees is 0.7784. So, as expected accuracy increases with number of decision-trees in the model.\n3.\tI have used the Random Forest model to find only the important features, build the model using these features and see its effect on accuracy. The most important feature is `first funding at` and least important feature is `is_counslting`.\n4.\tI have removed the `is_counslting` variable from the model, rebuild it and checked its accuracy. The accuracy of the model with `is_counslting` variable removed is 0.9264. The accuracy of the model with all the variables taken into account is 0.9247. So, we can see that the model accuracy has been improved with `doors` variable removed from the model.\n5.\tThe second least important model is `lug_boot`. If I remove it from the model and rebuild the model, then the accuracy was found to be 0.8546. It is a significant drop in the accuracy. So, I will not drop it from the model.\n6.\tConfusion matrix and classification report are another tool to visualize the model performance. They yield good performance.\n\n","26daa6c3":"# **1. Introduction to Random Forest algorithm** <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nRandom forest is a supervised learning algorithm. It has two variations \u2013 one is used for classification problems and other is used for regression problems. It is one of the most flexible and easy to use algorithm. It creates decision trees on the given data samples, gets prediction from each tree and selects the best solution by means of voting. It is also a pretty good indicator of feature importance.\n\n\nRandom forest algorithm combines multiple decision-trees, resulting in a forest of trees, hence the name `Random Forest`. In the random forest classifier, the higher the number of trees in the forest results in higher accuracy.\n\n","c5421ff8":"We can see that there are no missing values in the dataset. I have checked the frequency distribution of values previously. It also confirms that there are no missing values in the dataset.","3c650211":"We can see that the most important feature is `is_top500` and least important feature is `is_Consulting`.","72d204f2":"I have removed the `doors` variable from the model, rebuild it and checked its accuracy. The accuracy of the model with `doors` variable removed is 0.9264. The accuracy of the model with all the variables taken into account is 0.9247. So, we can see that the model accuracy has been improved with `doors` variable removed from the model.\n\nFurthermore, the second least important model is `lug_boot`. If I remove it from the model and rebuild the model, then the accuracy was found to be 0.8546. It is a significant drop in the accuracy. So, I will not drop it from the model.","d8132299":"Here, I have build the Random Forest Classifier model with default parameter of `n_estimators = 10`. So, I have used 10 decision-trees to build the model. Now, I will increase the number of decision-trees and see its effect on accuracy.","9e7c9c7e":"# **14. Random Forest Classifier model with parameter n_estimators=100** <a class=\"anchor\" id=\"14\"><\/a>\n\n[Table of Contents](#0.1)","9c0ed9d8":"# **9. Exploratory data analysis** <a class=\"anchor\" id=\"9\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nNow, I will explore the data to gain insights about the data. ","88cc114f":"# **3. Advantages and disadvantages of Random Forest algorithm** <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nThe advantages of Random forest algorithm are as follows:-\n\n\n1.\tRandom forest algorithm can be used to solve both classification and regression problems.\n2.\tIt is considered as very accurate and robust model because it uses large number of decision-trees to make predictions.\n3.\tRandom forests takes the average of all the predictions made by the decision-trees, which cancels out the biases. So, it does not suffer from the overfitting problem. \n4.\tRandom forest classifier can handle the missing values. There are two ways to handle the missing values. First is to use median values to replace continuous variables and second is to compute the proximity-weighted average of missing values.\n5.\tRandom forest classifier can be used for feature selection. It means selecting the most important features out of the available features from the training dataset.\n\n\nThe disadvantages of Random Forest algorithm are listed below:-\n\n\n1.\tThe biggest disadvantage of random forests is its computational complexity. Random forests is very slow in making predictions because large number of decision-trees are used to make predictions. All the trees in the forest have to make a prediction for the same input and then perform voting on it. So, it is a time-consuming process.\n2.\tThe model is difficult to interpret as compared to a decision-tree, where we can easily make a prediction as compared to a decision-tree.\n","ece43132":"Now, I will use the feature importance variable to see feature importance scores.","d0c3f1b5":"### Random Forest algorithm intuition\n\n![Random Forest](https:\/\/i.ytimg.com\/vi\/goPiwckWE9M\/maxresdefault.jpg)","08838515":"# **17. Build Random Forest model on selected features** <a class=\"anchor\" id=\"17\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nNow, I will drop the least important feature `doors` from the model, rebuild the model and check its effect on accuracy.","7dc80915":"We can see that all  the variables are ordinal categorical data type.","0f6af7a8":"We can see that there are 1728 instances and 7 variables in the data set.","3bc8834f":"[Go to Top](#0)","0b98610a":"### Missing values in variables","a0d711fa":"### View summary of dataset","07471cde":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n\n1.\t[Introduction to Random Forest algorithm](#1)\n2.\t[Random Forest algorithm intuition](#2)\n3.\t[Advantages and disadvantages of Random Forest algorithm](#3)\n4.\t[Feature selection with Random Forests](#4)\n5.\t[Difference between Random Forests and Decision-Trees](#5)\n6.\t[Relationship to nearest neighbours](#6)\n7.\t[Import libraries](#7)\n8.\t[Import dataset](#8)\n9.\t[Exploratory data analysis](#9)\n10.\t[Declare feature vector and target variable](#10)\n11.\t[Split data into separate training and test set](#11)\n12.\t[Feature engineering](#12)\n13.\t[Random Forest Classifier model with default parameters](#13)\n14.\t[Random Forest Classifier model with parameter n_estimators=100](#14)\n15.\t[Find important features with Random Forest model](#15)\n16.\t[Visualize the feature scores of the features](#16)\n17.\t[Build the Random Forest model on selected features](#17)\n18.\t[Confusion matrix](#18)\n19.\t[Classification report](#19)\n20.\t[Results and conclusion](#20)\n21. [References](#21)","6248d22d":"# **13. Random Forest Classifier model with default parameters** <a class=\"anchor\" id=\"13\"><\/a>\n\n[Table of Contents](#0.1)","519bcbf6":"<a class=\"anchor\" id=\"0\"><\/a>\n# **Random Forest Classifier Tutorial with Python**\n\nHello friends,\n\nRandom Forest is a supervised machine learning algorithm which is based on ensemble learning. In this kernel, I build two Random Forest Classifier models to predict the safety of the car, one with 10 decision-trees and another one with 100 decision-trees. The expected accuracy increases with number of decision-trees in the model. I have demonstrated the **feature selection process** using the Random Forest model to find only the important features, rebuild the model using these features and see its effect on accuracy. \n","ef87cce5":"Here, **y_test** are the true class labels and **y_pred** are the predicted class labels in the test-set.","62f3d603":"### Rename column names\n\nWe can see that the dataset does not have proper column names. The columns are merely labelled as 0,1,2.... and so on. We should give proper names to the columns. I will do it as follows:-","17bd01e4":"Now, based on the above analysis we can conclude that our classification model accuracy is very good. Our model is doing a very good job in terms of predicting the class labels.\n\n\nBut, it does not give the underlying distribution of values. Also, it does not tell anything about the type of errors our classifer is making. \n\n\nWe have another tool called `Confusion matrix` that comes to our rescue.","c1bd0c39":"### Frequency distribution of values in variables\n\nNow, I will check the frequency counts of categorical variables."}}