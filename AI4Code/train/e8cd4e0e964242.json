{"cell_type":{"56969a5f":"code","bfeadf27":"code","b3b63f4e":"code","622e1c8d":"code","093e29bc":"code","89f8070a":"code","3e425d10":"code","9d82c24b":"code","3bc72508":"code","4054d02a":"code","69c18679":"code","43aa62de":"code","1386a364":"code","faff065b":"code","7e8b2f6f":"code","5df4176a":"code","2f55c67b":"code","fd607b37":"code","2b1e11ba":"code","ba7b9971":"code","cfde6cb2":"code","7bdd2696":"code","4fc17b05":"code","26a9d32d":"code","c57040a1":"code","572c36a8":"code","ee5658d4":"code","71ee3c7f":"code","d5ceec11":"code","1ec29318":"code","f80b1a2a":"code","01d93516":"code","7a8088e4":"code","7a67dfda":"code","bea4f332":"code","364e2493":"code","8d76fd93":"code","de4fb868":"code","32ee01aa":"code","9a2e9494":"code","904ff1aa":"code","7b6ea461":"code","6264ca93":"code","20792222":"code","3d8a9ecc":"code","03450f20":"code","0b9bfd08":"code","8384fbbb":"code","f99e6df1":"code","a11728ce":"code","c5d7f196":"code","c262cf20":"code","d186aca0":"code","86aa2731":"code","bae0721b":"code","5a5bce59":"code","ea8129db":"code","16d137e2":"code","850d0bea":"code","c69d41a1":"code","3f7287a9":"code","94075285":"code","cd269da9":"code","e6a2ba12":"code","906622d7":"code","637ffbf3":"code","70ba280d":"markdown","ba545f4b":"markdown","91451dc6":"markdown","4dbfc500":"markdown","cb3a46fc":"markdown","774ade6b":"markdown","ddbdb5cd":"markdown","188de78c":"markdown","9c79f193":"markdown","0fa72baa":"markdown","64d83a0b":"markdown"},"source":{"56969a5f":"import os\nimport json\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom termcolor import colored\n\nfrom pathlib import Path\nfrom tqdm.auto import tqdm\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","bfeadf27":"!ls ..\/input\/chaii-hindi-and-tamil-question-answering","b3b63f4e":"root = Path(\"..\/input\/chaii-hindi-and-tamil-question-answering\/\")\n\ntrain_df = pd.read_csv(root \/ \"train.csv\", encoding=\"utf8\")\ntest_df = pd.read_csv(root \/ \"test.csv\", encoding=\"utf8\")\nprint(\"Total training data: \", len(train_df))\nprint(\"Total test data: \", len(test_df))","622e1c8d":"train_df","093e29bc":"test_df","89f8070a":"value_counts = train_df['language'].value_counts()\nlabels = value_counts.index.tolist()\nplt.pie(value_counts, labels = labels,autopct='%1.2f%%')\nplt.show()","3e425d10":"train_df['answer_end'] = [row['answer_start'] + len(row['answer_text']) for index, row in train_df.iterrows()]\ntrain_df","9d82c24b":"len(train_df.question.unique())","3bc72508":"len(train_df.context.unique())","4054d02a":"def color_answer(question):\n    answer_start, answer_end = question[\"answer_start\"], question[\"answer_end\"]\n    context = question[\"context\"]\n    return colored(context[:answer_start], \"white\") + \\\n    colored(context[answer_start:answer_end + 1],  'white', 'on_red') + \\\n    colored(context[answer_end + 1:], \"white\")","69c18679":"tamil_df = train_df[train_df.language == 'tamil']\ntamil_df['con_len'] = [len(row['context']) for index,row in tamil_df.iterrows()]\nhindi_df = train_df[train_df.language == 'hindi']\nhindi_df['con_len'] = [len(row['context']) for index,row in hindi_df.iterrows()]\nprint(\"The context with minimum length in Tamil Language is:\",min(tamil_df.con_len))\nprint(\"The context with minimum length in Hindi Language is:\",min(hindi_df.con_len))","43aa62de":"tamil_df[tamil_df.con_len==446]","1386a364":"hindi_df[hindi_df.con_len==176]","faff065b":"sample_qa_pair = train_df.iloc[321]\nprint(sample_qa_pair[\"question\"])\nprint(\"Answer\", sample_qa_pair[\"answer_text\"])\nprint(\"Context:\")\nprint(color_answer(sample_qa_pair))","7e8b2f6f":"sample_qa_pair = train_df.iloc[678]\nprint(sample_qa_pair[\"question\"])\nprint(\"Answer\", sample_qa_pair[\"answer_text\"])\nprint(\"Context:\")\nprint(color_answer(sample_qa_pair))","5df4176a":"#pip install transformers==4.11.3","2f55c67b":"import transformers\nfrom transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline\n\nprint(transformers.__version__)","fd607b37":"model_name = '..\/input\/chaii-pretrained-models\/models\/deepset\/xlm-roberta-large-squad2'\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_name)\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\nquestion, text = 'Why is model conversion important?', 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\nencoding = tokenizer(question, text, return_tensors='pt')\n\nprint(encoding)\n","2b1e11ba":"input_ids = encoding['input_ids']\nattention_mask = encoding['attention_mask']\n\nstart_scores, end_scores = model(input_ids, attention_mask=attention_mask, output_attentions=False)[:2] \nall_tokens = tokenizer.convert_ids_to_tokens(input_ids[0])\nanswer = ' '.join(all_tokens[np.argmax(start_scores.detach()): np.argmax(end_scores.detach())+1])\nanswer = tokenizer.convert_tokens_to_ids(answer.split())\nanswer = tokenizer.decode(answer)\nanswer","ba7b9971":"tokenizer","cfde6cb2":"with open(\"vocabulary.txt\", 'w') as f:\n    \n    # For each token...\n    for token in tokenizer.vocab.keys():\n        \n        # Write it out and escape any unicode characters.            \n        f.write(token + '\\n')","7bdd2696":"#tokenizer.save_pretrained(\"\/kaggle\/working\/\")","4fc17b05":"#tokenizer.vocab","26a9d32d":"max_length = 384 # The maximum length of a feature (question and context)\ndoc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.","c57040a1":"example=train_df.iloc[42]\nprint(example)\nprint(\"The length of tokenized data is :\",len(tokenizer(example[\"question\"], example[\"context\"])[\"input_ids\"]))","572c36a8":"print(\"The length of truncated tokenized data is :\",len(tokenizer(example[\"question\"], example[\"context\"], max_length=max_length, truncation=\"only_second\")[\"input_ids\"]))","ee5658d4":"pad_on_right=tokenizer.padding_side=='right'","71ee3c7f":"# Tokenize our examples with truncation and padding, but keep the overflows using a stride.\ntokenized_example=tokenizer(\n    example[\"question\" if pad_on_right else \"context\"],\n    example[\"context\" if pad_on_right else \"question\"],\n    truncation=\"only_second\" if pad_on_right else \"only_first\",\n    max_length=max_length,\n    stride=doc_stride,\n    return_overflowing_tokens=True,\n    return_offsets_mapping=True,\n    padding=\"max_length\",\n    )\nprint(tokenized_example)","d5ceec11":"[len(x) for x in tokenized_example[\"input_ids\"]]","1ec29318":"sequence_ids = tokenized_example.sequence_ids()\nprint(sequence_ids)","f80b1a2a":"def convert_answers(df):\n    sample = df\n    return {\n        'answer_start':[sample['answer_start']],\n        'text':[sample['answer_text']]\n    }","01d93516":"train_df=train_df.sample(frac=1,random_state=42)     #shuffling the dataset\ntrain_df['answers']=train_df.apply(convert_answers,axis=1)","7a8088e4":"train_df","7a67dfda":"df_train=train_df[:-512].reset_index(drop=True)\ndf_valid=train_df[-512:].reset_index(drop=True)","bea4f332":"#pip install datasets","364e2493":"from datasets import Dataset  \n\ntrain_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)","8d76fd93":"train_dataset[0]","de4fb868":"def prepare_train_features(examples):\n    # Removing the whitespaces present in the left portion of text\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","32ee01aa":"train_dataset","9a2e9494":"features = prepare_train_features(train_dataset[:5])","904ff1aa":"tokenized_train_ds=train_dataset.map(prepare_train_features,batched=True,remove_columns=train_dataset.column_names)\ntokenized_valid_ds=valid_dataset.map(prepare_train_features,batched=True,remove_columns=valid_dataset.column_names)","7b6ea461":"tokenized_train_ds","6264ca93":"from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer,default_data_collator\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_name)","20792222":"%env WANDB_DISABLED=True","3d8a9ecc":"batch_size=4\n\nargs = TrainingArguments(\n    f\"chaii-qa\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=3e-5,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=1,\n    weight_decay=0.01,\n    warmup_ratio=0.1,\n    gradient_accumulation_steps=8,)","03450f20":"from transformers import default_data_collator\n\ntrainer=Trainer(model,\n                args,\n                train_dataset=tokenized_train_ds,\n                eval_dataset=tokenized_valid_ds,\n                data_collator=default_data_collator,\n                tokenizer=tokenizer,\n               )","0b9bfd08":"trainer.train()\ntrainer.save_model(\"chaii_baseline\")","8384fbbb":"def prepare_validation_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples\n","f99e6df1":"validation_features = valid_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=train_dataset.column_names\n)\nvalid_dataset\n","a11728ce":"valid_feats_small = validation_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nvalid_feats_small\n","c5d7f196":"raw_predictions = trainer.predict(valid_feats_small)","c262cf20":"max_answer_length = 30\n\nimport collections\n\nexamples = valid_dataset\nfeatures = validation_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)","d186aca0":"from tqdm.auto import tqdm\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        predictions[example[\"id\"]] = best_answer[\"text\"]\n\n    return predictions\n","86aa2731":"final_predictions = postprocess_qa_predictions(valid_dataset, validation_features, raw_predictions.predictions)","bae0721b":"references = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]\nresult = pd.DataFrame(references)","5a5bce59":"def jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","ea8129db":"result['prediction'] = result['id'].apply(lambda r: final_predictions[r])\nresult['jaccard'] = result[['answer', 'prediction']].apply(jaccard, axis=1)\nresult","16d137e2":"result.jaccard.mean()","850d0bea":"test_dataset = Dataset.from_pandas(test_df)","c69d41a1":"test_features = test_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=test_dataset.column_names\n)\n\ntest_feats_small = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\ntest_feats_small","3f7287a9":"test_predictions = trainer.predict(test_feats_small)","94075285":"test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))","cd269da9":"final_test_predictions = postprocess_qa_predictions(test_dataset, test_features, test_predictions.predictions)","e6a2ba12":"sub_df = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv')\nsub_df.head(1)","906622d7":"sub_df['PredictionString'] = sub_df['id'].apply(lambda r: final_test_predictions[r])\nsub_df.head()","637ffbf3":"sub_df.to_csv('submission.csv', index=False)","70ba280d":"## Building Baseline XLM-Roberta model","ba545f4b":"## Model Evaluation","91451dc6":"It returns None for the special tokens, then 0 or 1 depending on whether the corresponding token comes from the first sentence past (the question) or the second (the context). Now with all of this, we can find the first and last token of the answer in one of our input feature (or if the answer is not in this feature):","4dbfc500":"> ##  Understanding the Tokenizer","cb3a46fc":"This is a Tokenized dataset containing features\n\nattention_mask\nend_positions\ninput_ids\nstart_positions\nEven better, the results are automatically cached by the \ud83e\udd17 Datasets library to avoid spending time on this step the next time you run your notebook. The \ud83e\udd17 Datasets library is normally smart enough to detect when the function you pass to map has changed (and thus requires to not use the cache data). For instance, it will properly detect if you change the task in the first cell and rerun the notebook. \ud83e\udd17 Datasets warns you when it uses cached files, you can pass load_from_cache_file=False in the call to map to not use the cached files and force the preprocessing to be applied again.\n\nNote that we passed batched=True to encode the texts by batches together. This is to leverage the full benefit of the fast tokenizer we loaded earlier, which will use multi-threading to treat the texts in a batch concurrently.","774ade6b":"## Visualising Question and answers","ddbdb5cd":"## Model Training","188de78c":"## Dataset preparation","9c79f193":" > #### Now that we have understood how the tokenizer works, let's prepare our dataset so that it is in the right format for our model to process","0fa72baa":"## Postprocessing\nPostprocessing converts the predictions of a question-answering model to answers that are substrings of the original contexts. The Postprocessing code consists of nested loops over the examples. It collects the indices of the features of ongoing examples in the loop and also the context. Furthermore, it loops over each of the features in the continuing example and collects predictions on the same features from the model consisting of two arrays containing the start logits and the end logits, respectively. The min_null_score is None which has to use during training on squad v2 data. The null answer is scored as the sum of the start_logit and end_logit associated with the [CLS] token that is our minimum null score. Any sensible combination of start and end logits, i.e. start_logit + end_logit can be considered a possible answer. Higher the combination score higher is the confidence of getting the best answer. If the End token falls before the start token, in this case, it should be excluded. Answers in which the start or end tokens are associated with question tokens are also excluded, as we know the answer to the question will not be obvious in the question. The number of best predictions for each example can be adjusted with the \u2014 n_best_size argument; the code goes through all possibilities to get the best answer. Answers with a length that is either less than 0 or greater than the max_answer_length are not included; neither answer out of scope is considered.","64d83a0b":"### Reading the data"}}