{"cell_type":{"00e0452b":"code","ba81d7fb":"code","96cb8f49":"code","37dc99a2":"code","22e705a0":"code","9c7403be":"code","6a5bb30d":"code","632323ec":"code","61228bcb":"code","ee5e132c":"code","9591d9f1":"code","13b1f5bf":"code","70f4c8d9":"code","2c39dc8a":"code","36de690d":"code","b8ecc53c":"code","2ec63840":"code","de8c516e":"code","e1baea05":"code","ac561d3f":"code","cf826f84":"code","4b05caf0":"code","061d682d":"code","2d46b81e":"code","63496cd8":"markdown","3c1772ed":"markdown","723d9593":"markdown","ccaa1f81":"markdown","3da84a49":"markdown","502f7336":"markdown","8e9e4129":"markdown","7e00ee6e":"markdown","e28891a1":"markdown","973171e0":"markdown","4377169a":"markdown","bd828d8b":"markdown","62099e53":"markdown","22025aec":"markdown","9ae3ef46":"markdown","37dbd357":"markdown","8c4fa35f":"markdown","6775d23f":"markdown","8488c17d":"markdown"},"source":{"00e0452b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba81d7fb":"data=pd.read_csv('\/kaggle\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')\ndata.head()","96cb8f49":"data.describe()","37dc99a2":"data.info()","22e705a0":"\nX = data.drop(['TenYearCHD'], axis=1, inplace=False)\nprint('X Data is \\n' , X.head())\nprint('X shape is ' , X.shape)\n","9c7403be":"\ny = data['TenYearCHD']\nprint('y Data is \\n' , y.head())\nprint('y shape is ' , y.shape)","6a5bb30d":"X = X.apply(lambda x: x.fillna(x.mean()),axis=0)\nX.isnull().sum(axis = 0)","632323ec":"from sklearn.model_selection import train_test_split\n\n#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","61228bcb":"from sklearn.linear_model import LogisticRegression\nLogisticRegressionModel = LogisticRegression(penalty='l2',solver='sag',C=1.0,random_state=33)\nLogisticRegressionModel.fit(X_train, y_train)\ny_pred = LogisticRegressionModel.predict(X_test)","ee5e132c":"print('LogisticRegressionModel Train Score is : ' , LogisticRegressionModel.score(X_train, y_train))\nprint('LogisticRegressionModel Test Score is : ' , LogisticRegressionModel.score(X_test, y_test))","9591d9f1":"from sklearn.metrics import classification_report\n\n\nClassificationReport = classification_report(y_test,y_pred)\nprint('Classification Report is : ', ClassificationReport )","13b1f5bf":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n","70f4c8d9":"sns.heatmap(CM, center = True)\nplt.show()","2c39dc8a":"from sklearn.svm import SVC\n\n\n\nSVCModel = SVC(kernel= 'rbf',# it can be also linear,poly,sigmoid,precomputed\n               max_iter=100,C=1.0,gamma='auto')\nSVCModel.fit(X_train, y_train)\n","36de690d":"\nprint('SVCModel Train Score is : ' , SVCModel.score(X_train, y_train))\nprint('SVCModel Test Score is : ' , SVCModel.score(X_test, y_test))\ny_pred = SVCModel.predict(X_test)\n","b8ecc53c":"\n\nClassificationReport = classification_report(y_test,y_pred)\nprint('Classification Report is : ', ClassificationReport )","2ec63840":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n","de8c516e":"sns.heatmap(CM,center = True)\nplt.show()","e1baea05":"from sklearn.tree import DecisionTreeClassifier\n\nDecisionTreeClassifierModel = DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=33) #criterion can be entropy\nDecisionTreeClassifierModel.fit(X_train, y_train)\ny_pred = DecisionTreeClassifierModel.predict(X_test)\n","ac561d3f":"print('DecisionTreeClassifierModel Train Score is : ' , DecisionTreeClassifierModel.score(X_train, y_train))\nprint('DecisionTreeClassifierModel Test Score is : ' , DecisionTreeClassifierModel.score(X_test, y_test))","cf826f84":"print('DecisionTreeClassifierModel feature importances are : ' , DecisionTreeClassifierModel.feature_importances_)","4b05caf0":"ClassificationReport = classification_report(y_test,y_pred)\nprint('Classification Report is : ', ClassificationReport )","061d682d":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n","2d46b81e":"sns.heatmap(CM,center = True)\nplt.show()","63496cd8":"calculating classification report","3c1772ed":"splitting the data into training and testing groups","723d9593":"Applying SVC Model ","ccaa1f81":"calculating confusion matrix","3da84a49":"Calculating train and test scores","502f7336":"Calculating Details","8e9e4129":"#Calculating Details\n","7e00ee6e":"#y Data","e28891a1":"Applying DecisionTreeClassifier Model ","973171e0":"drawing confusion matrix\n","4377169a":"calculating classification report","bd828d8b":"#X Data","62099e53":"Applying LogisticRegression Model ","22025aec":"drawing confusion matrix","9ae3ef46":"calculating confusion matrix","37dbd357":"Calculating Confusion Matrix","8c4fa35f":"calculating feature importance","6775d23f":"drawing confusion matrix","8488c17d":"calculating classification report"}}