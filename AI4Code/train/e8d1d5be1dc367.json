{"cell_type":{"86343ab5":"code","005c9977":"code","c947f027":"code","e56c1340":"code","1ad88141":"code","390702b3":"code","4ac71f37":"code","af6454e2":"code","bb6543fb":"code","9354df0b":"code","a7594366":"code","892b549f":"code","aafd14e3":"code","5dd5ccaf":"code","80ef153f":"code","436dfa7a":"code","67898aa7":"code","766a6f6c":"code","1a760e6a":"code","c974ba62":"code","c6be5568":"code","10c1f156":"code","34f3a0a2":"code","90c51ef7":"code","f0a5ece2":"code","79f9d810":"code","b73465ab":"code","a070bc77":"code","0c797ec9":"code","0ed40b7a":"code","a7bfbe9f":"code","ab8f1027":"code","b007089d":"markdown","dc023a6f":"markdown","7c6e4c84":"markdown","37dc5961":"markdown","33e822f9":"markdown","fa430e59":"markdown","54aa261a":"markdown","cd267eb8":"markdown","98f35aba":"markdown","89b067ec":"markdown"},"source":{"86343ab5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","005c9977":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","c947f027":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split","e56c1340":"# For Implementing KNN\nfrom sklearn.neighbors import KNeighborsClassifier","1ad88141":"# For ROC Curve\nfrom sklearn.metrics import roc_curve","390702b3":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score","4ac71f37":"from sklearn.model_selection import GridSearchCV","af6454e2":"Dataset = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","bb6543fb":"Dataset.head()","9354df0b":"Dataset.shape  # Shape of the Dataset","a7594366":"Dataset.info()","892b549f":"Dataset.isnull()","aafd14e3":"Dataset.isnull().sum()","5dd5ccaf":"X = Dataset.drop('Outcome',axis=1).values       # Input\ny = Dataset['Outcome'].values                   # Target","80ef153f":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42, stratify=y)  # Splitting by 70:30 ratio","436dfa7a":"neighbors = np.arange(1,9)\ntrain_accuracy =np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))","67898aa7":"for i,k in enumerate(neighbors):\n    #Setup a knn classifier with k neighbors\n    knn = KNeighborsClassifier(n_neighbors=k)\n    \n    #Fit the model\n    knn.fit(X_train, y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n    \n    #Compute accuracy on the test set\n    test_accuracy[i] = knn.score(X_test, y_test) ","766a6f6c":"#Generate plot\nplt.title('k-NN Varying number of neighbors')\nplt.plot(neighbors, test_accuracy, label='Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","1a760e6a":"#Setup a knn classifier with k neighbors\nModel = KNeighborsClassifier(n_neighbors=7)","c974ba62":"#Fit the model\nModel.fit(X_train,y_train)","c6be5568":"Model.score(X_test,y_test) # Accuracy of the model","10c1f156":"y_pred = Model.predict(X_test) # Performing predictions","34f3a0a2":"confusion_matrix(y_test,y_pred) # Confusion Matrix","90c51ef7":"print(classification_report(y_test,y_pred))","f0a5ece2":"y_pred_proba = Model.predict_proba(X_test)[:,1]","79f9d810":"fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","b73465ab":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=7) ROC curve')\nplt.show()","a070bc77":"roc_auc_score(y_test,y_pred_proba)","0c797ec9":"param_grid = {'n_neighbors':np.arange(1,50)}","0ed40b7a":"knn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X,y)","a7bfbe9f":"knn_cv.best_score_    # Best score of KNN model","ab8f1027":"knn_cv.best_params_    # Best parameters for the Model","b007089d":"NO MISSING VALUES","dc023a6f":"## Implementing ROC","7c6e4c84":"## Importing Libraries","37dc5961":"## Splitting Train\/Test Split","33e822f9":"## Result Analysis","fa430e59":"## Implementing KNN Classifier","54aa261a":"## Checking Missing Values","cd267eb8":"## Loading Dataset","98f35aba":"## Splitting Input and Targets","89b067ec":"## Dataset Analysis"}}