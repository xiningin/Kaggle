{"cell_type":{"e8ad36d4":"code","726384d0":"code","ffeed7bc":"code","bacf71f5":"code","af1d4cc1":"code","ededcfdb":"code","ed4320be":"code","9778e998":"code","1a857db1":"code","ef60d9ef":"code","09747019":"code","e34287e5":"code","4a71bbb8":"code","53898832":"code","2a9f161d":"code","66e117d4":"code","bdca0c38":"code","2a973142":"code","3162bb78":"code","676dd230":"code","bf255af5":"code","c85ea34e":"code","b0a5a12f":"code","0e8ec305":"code","7e23a5e7":"code","92bd0d93":"code","6d092535":"code","4117598f":"code","459200de":"code","450f8652":"code","c850623f":"code","b096be0f":"code","ecac47d6":"code","b23ed7dc":"code","5a7aa7fb":"code","e80a5daf":"code","0ca2c6a2":"code","3bc4bcab":"code","5c42ba12":"code","ddf56976":"code","7fbe6f7d":"code","017016a3":"markdown","1add7c92":"markdown","231048b6":"markdown","6bd20085":"markdown","27580f75":"markdown","ccdfa8d7":"markdown","fc3eafc6":"markdown","d87e8bb0":"markdown"},"source":{"e8ad36d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","726384d0":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport missingno\nsns.set_style('whitegrid')\nsns.set_palette(\"deep\")","ffeed7bc":"gender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","bacf71f5":"train.head()","af1d4cc1":"test.head()","ededcfdb":"#Types of data in each column\ntrain.info()","ed4320be":"#Overview of missing data within datasets\nmissingno.matrix(test,figsize = (10,3))\nmissingno.matrix(train,figsize = (10,3))\n","9778e998":"#Number of missing data\n#Missing data exists in Age, Cabin and Embarked\n#This will be dealt with in Section 2\ntrain.isnull().sum()","1a857db1":"plt.figure(figsize=(10,2))\nax = sns.countplot(y= 'Survived', data =train)\nax.set(xlabel = 'Count')\n","ef60d9ef":"train['Survived'].value_counts()\npd.DataFrame(index=['Survived','Died'],data = [\n    [342,\"{0:.0f}%\".format(342*100\/891)],\n    [549,\"{0:.0f}%\".format(549*100\/891)]],\n             columns=['Count','Percentage'])\n\n#There more people who died than people who survived","09747019":"sns.countplot(x='Survived',hue='Sex',data=train,palette = 'RdBu_r')\nplt.title('Amount of Survivors by Gender')\n\n#Relationship Detected\n#Most of the goners where male while most of the survivors were female","e34287e5":"sns.countplot(x='Survived',hue='Pclass',data=train)\nplt.title(\"Amount of Survivors by Passenger Class\")\n#Relationship Detected\n#3rd class passengers were most prevalent on the ship, and were also the class that perished the most\n","4a71bbb8":"gr =train.groupby('Pclass')\nfor i in np.arange(1,4):\n    globals()[\"c\"+str(i)] = gr.get_group(i)\n\n#c1 c2 c3 contain dataframes of Pclass 1 2 3 respectively\n\n#There must be a better way to do this?\nc1total = len(c1)\nc2total = len(c2)\nc3total = len(c3)\n\nc1s = round(sum(c1['Survived']==1)*100\/c1total,2)\nc2s = round(sum(c2['Survived']==1)*100\/c2total,2)\nc3s = round(sum(c3['Survived']==1)*100\/c3total,2)\n\nsurvived_pclass =pd.DataFrame(data=[[100-c1s,100-c2s,100-c3s],[c1s,c2s,c3s]],index=['Dead','Survived'],columns=['Class 1','Class 2','Class 3'])\n\n","53898832":"survived_pclass.plot(kind='bar')\nplt.title(\"Percentage of Survivors per Passenger Class\")\n","2a9f161d":"sns.countplot(hue='Survived',x='Pclass',data=train,palette = 'prism_r')\n#Another viewing of the same data\n#Colours accentuate death and survival","66e117d4":"sns.distplot(train['Age'].dropna(),kde = False,hist_kws=dict(alpha=1))\nplt.title(\"Age distribution of Titanic Passengers\")","bdca0c38":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nax = sns.distplot(train[train['Survived']==1]['Age'].dropna(),hist_kws=dict(alpha=0.7),color = 'green',bins = 30)\nplt.title(\"Age Distribution of Survivors\")\nax.set(xlabel='Age')\n\n\nplt.subplot(1,2,2)\nax = sns.distplot(train[train['Survived']==0]['Age'].dropna(),hist_kws=dict(alpha=0.7),color = 'darkred',bins = 30)\nplt.title(\"Age Distribution of Goners\")\nax.set(xlabel='Age')","2a973142":"sns.scatterplot(y='Fare',x='Age',data=train,hue ='Survived',palette='prism_r')\nplt.title(\"Fare and Age of passengers vs Survived\")\n\n#Most passengers with lower fare died, with the exception of younger passengers","3162bb78":"plt.figure(figsize=(15,5))\n#sns.countplot(x='Survived',hue='SibSp',data= train)\nsns.countplot(hue='Survived',x='SibSp',data= train)","676dd230":"plt.figure(figsize=(15,5))\nsns.countplot(x='Survived',hue='Parch',data= train)","bf255af5":"#Filling missing data for Age\n\nplt.figure(figsize=(12,7))\nsns.boxplot(x='Pclass',y='Age',hue = 'Sex',data=train)","c85ea34e":"def age_imputer(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    Sex = cols[2]\n    \n    if pd.isnull(Age):\n        if Pclass ==1:\n            if Sex == 'male':\n                return train.groupby(['Sex','Pclass']).mean().loc['male']['Age'][1]\n            elif Sex == 'female':\n                return train.groupby(['Sex','Pclass']).mean().loc['female']['Age'][1]\n        elif Pclass ==2:\n            if Sex == 'male':\n                return train.groupby(['Sex','Pclass']).mean().loc['male']['Age'][2]\n            elif Sex == 'female':\n                return train.groupby(['Sex','Pclass']).mean().loc['female']['Age'][2]\n        elif Pclass ==3:\n            if Sex == 'male':\n                return train.groupby(['Sex','Pclass']).mean().loc['male']['Age'][3]\n            elif Sex == 'female':\n                return train.groupby(['Sex','Pclass']).mean().loc['female']['Age'][3]\n            \n    else:\n        return Age","b0a5a12f":"train['Age']=train[['Age','Pclass','Sex']].apply(age_imputer,axis = 1)\ntest['Age']=test[['Age','Pclass','Sex']].apply(age_imputer,axis = 1)","0e8ec305":"#Dealing with missing Embarked\ntrain[train['Embarked'].isnull() == True]\n\n#The passengers with missing Embarked boarded without any family\n#Imputing values with the mode of Embarked.\n\ntrain['Embarked'].fillna(train['Embarked'].mode()[0],inplace=True) #Embarked = S\n","7e23a5e7":"#test has a missing value in Fare\ntest[test['Fare'].isnull()]\n#Passenger is in the 3rd class and has no family boarded\n#The imputed fare will be the average of the third class fare\n","92bd0d93":"test.isnull().sum()","6d092535":"\ntest['Fare'].fillna(train[train['Pclass'] ==3]['Fare'].mean(),inplace = True)","4117598f":"print(\"\\nTraining Set:\\n\")\nprint(train.isnull().sum())\nprint(\"\\nTest Set:\\n\")\nprint(test.isnull().sum())\n#Only missing value is Cabin, which might not be used","459200de":"sex = pd.get_dummies(train['Sex'],drop_first=True) #Female is dropped (Baseline)\nembark = pd.get_dummies(train['Embarked'],drop_first=True) #C is dropped (Baseline)\ntrain = pd.concat([train,sex,embark],axis = 1)\n\nsex = pd.get_dummies(test['Sex'],drop_first=True) #Female is dropped (Baseline)\nembark = pd.get_dummies(test['Embarked'],drop_first=True) #C is dropped (Baseline)\ntest = pd.concat([test,sex,embark],axis = 1)","450f8652":"train.drop(['PassengerId','Name','Ticket','Cabin','Sex','Embarked'],axis=1,inplace = True)\ntest.drop(['PassengerId','Name','Ticket','Cabin','Sex','Embarked'],axis=1,inplace =True)","c850623f":"train.head()\n","b096be0f":"test.head()","ecac47d6":"X_train = train.drop(['Survived'],axis = 1)\ny_train = train['Survived']\n","b23ed7dc":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","5a7aa7fb":"log_model = LogisticRegression()","e80a5daf":"log_model.fit(X_train,y_train)","0ca2c6a2":"predictions = log_model.predict(test)","3bc4bcab":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\npredictions_df = pd.DataFrame(predictions,columns=['Survived'])\n","5c42ba12":"predictions_df.set_index(test['PassengerId'],inplace=True)","ddf56976":"predictions_df","7fbe6f7d":"predictions_df.to_csv(r'predictions.csv')\n\n\n","017016a3":"### From the above boxplot, the average age of each passenger class is different\n#### With first class having the greatest average age and third class having the lowest average age\nPossibly because older people are more likely to be able to afford more expensive tickets?\n\nThere is also a slight difference in average age between the genders\nThe missing fields in Age will be imputed with consideration of the passenger's class and gender","1add7c92":"# 3. Prediction","231048b6":"# Building Logistic Regression Model","6bd20085":"## Creating Dummy Variables","27580f75":"# Titanic Dataset\n\nThe goal of this notebook is try to predict the survival of passengers aboard the Titanic from their attributes.","ccdfa8d7":"## Justifying Predictors to be used","fc3eafc6":"# Section 1. Exploratory Data Analysis\n\nHow each person's attributes affect their survival rate will be explored.\n\nAnalysis will rely on the training dataset.","d87e8bb0":"# 2. Data Cleaning"}}