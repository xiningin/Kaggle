{"cell_type":{"68ad9572":"code","5a13d76c":"code","fda93ae5":"code","665f2503":"code","26a27349":"code","9fb27230":"code","8089aafe":"code","2092baf4":"code","0e3be2a4":"code","27c9271a":"code","a1bc9dde":"code","5afa6080":"code","b09d9885":"code","e180cbf0":"code","14f26bca":"code","05e6f48b":"code","daae6f8d":"code","8eebf3ff":"code","7a42a4ac":"code","e7a63099":"code","8fdac850":"code","756e9d2c":"code","97145880":"code","3b91e9ed":"code","df2cf40e":"code","686178c5":"code","5ed6c11b":"code","46b3faca":"code","5f66b6a4":"code","f089487b":"code","6fbac4a4":"code","fba52386":"code","c69a5b88":"code","f0689fd1":"code","6f841232":"code","68e2138b":"code","b837061e":"code","9940b0f9":"code","df65ac91":"code","16f57678":"code","009a0bb2":"code","1fec453b":"code","3bbbf0cb":"code","01193356":"code","d57efb5e":"code","94594645":"code","f1b469cb":"code","f2b58602":"code","dc69c89b":"code","adcc437c":"code","002f0f54":"code","a39e6e8a":"code","80e83cc5":"code","d278b716":"code","75e6c579":"code","aa35eccc":"code","8b2094f2":"code","e5b016e6":"code","03a155b9":"code","1ae98642":"code","7c6ac2d0":"markdown","3ab0b5fe":"markdown","ad9e1773":"markdown","1b683773":"markdown","02815ffb":"markdown","bce3665b":"markdown","4e1c96ef":"markdown","b24bc8b5":"markdown","4585f740":"markdown","3cd09412":"markdown","70a64d31":"markdown","e1eb1043":"markdown","f75afc46":"markdown","4681ac7b":"markdown"},"source":{"68ad9572":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a13d76c":"# Importing all the important libraries first\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.gofplots import qqplot\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","fda93ae5":"# Reading dataset and making a copy of it\n\nmain_df = pd.read_csv(\"\/kaggle\/input\/pizza-price-prediction\/pizza_v2.csv\")\ndf = main_df.copy()\ndf.head()","665f2503":"# Checking the shape of the dataset\n\ndf.shape","26a27349":"# Checking the basic information about the dataset.\n\ndf.info()","9fb27230":"# Number of unique values present in each feature column\n\ndf.nunique()","8089aafe":"df.isna().any()","2092baf4":"# No Null values are present\n\nsns.heatmap(df.isnull())","0e3be2a4":"# Remving \"Rp\" and \"inch\" from rows and changing datatype\n\ndf['diameter'] = df['diameter'].str.replace('inch', '').str.replace(',', '').astype('float64') # Removing Inch\ndf['price_rupiah'] = df['price_rupiah'].str.replace('Rp', '').str.replace(',', '').astype('float64') # Removing Rp \n\ndf.loc[:, ['price_rupiah', 'diameter']]","27c9271a":"df.head()","a1bc9dde":"# Statistical Measure of the dataset\n\ndf.describe()","5afa6080":"# Correlation matrix\n\nplt.figure(figsize=(6,5))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","b09d9885":"# Checking and visualizing the type of distribution of a feature column\n\nfig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(15,4))\nsns.distplot(df['price_rupiah'], ax=ax1 , color ='red')\nax1.set(title='price_rupiah distribution')\nqqplot(df['price_rupiah'], ax=ax2, line='s')\nax2.set(title='Quantile quantile plot')","e180cbf0":"# Checking and visualizing the type of distribution of a feature column\n\nfig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(15,4))\nsns.distplot(df['diameter'], ax=ax1 , color ='red')\nax1.set(title='diameter distribution')\nqqplot(df['diameter'], ax=ax2, line='s')\nax2.set(title='Quantile quantile plot')","14f26bca":"# Checking skewness value \n# If value lies between -0.5 to 0.5  then it is normal otherwise skewed\n\nskew_val = df.skew().sort_values(ascending=False)\nskew_val","05e6f48b":"fig = px.bar(df, x='diameter', y='price_rupiah', color=\"size\")\nfig.show()","daae6f8d":"df.info()","8eebf3ff":"fig = px.bar(df, x='diameter', y='price_rupiah', color=\"variant\")\nfig.show()","7a42a4ac":"fig = px.bar(df, x='diameter', y='price_rupiah', color=\"company\")\nfig.show()","e7a63099":"fig = px.bar(df, x='diameter', y='price_rupiah', color=\"topping\")\nfig.show()","8fdac850":"sns.barplot(x = 'size', y = 'price_rupiah', data = df,  saturation=0.90)","756e9d2c":"sns.barplot(x = 'company', y = 'price_rupiah', data = df,  saturation=0.90)","97145880":"fig = px.histogram (df, x = \"price_rupiah\",  facet_row = \"company\",  template = 'plotly_dark')\nfig.show ()","3b91e9ed":"fig =  px.pie (df, names = \"size\", hole = 0.4, template = \"gridon\")\nfig.show ()","df2cf40e":"fig =  px.pie (df, names = \"company\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","686178c5":"fig =  px.pie (df, names = \"variant\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","5ed6c11b":"fig =  px.pie (df, names = \"topping\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","46b3faca":"fig =  px.pie (df, names = \"extra_sauce\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()\n\n# variant          129 non-null    object \n#  5   size             129 non-null    object \n#  6   extra_sauce      129 non-null    object \n#  7   extra_cheese     129 non-null    object \n#  8   extra_mushrooms","5f66b6a4":"fig =  px.pie (df, names = \"extra_cheese\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","f089487b":"fig =  px.pie (df, names = \"extra_mushrooms\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","6fbac4a4":"df.info()","fba52386":"fig = px.scatter (df, y = \"diameter\", x = \"price_rupiah\", color = \"extra_mushrooms\", template = \"plotly_dark\",  trendline=\"ols\")\nfig.show ()","c69a5b88":"fig = px.scatter (df, y = \"diameter\", x = \"price_rupiah\", color = \"extra_sauce\", template = \"plotly_dark\",  trendline=\"lowess\")\nfig.show ()","f0689fd1":"sns.pairplot(data=df, vars=['diameter', 'price_rupiah'], \\\n             hue='size', kind='reg', diag_kind='kde', size=5, palette='husl')","6f841232":"sns.pairplot(df)","68e2138b":"df.info()","b837061e":"# Label Encoding\n\nfrom sklearn.preprocessing import LabelEncoder \n\nencoder = LabelEncoder() ","9940b0f9":"for i in df.columns:\n    if df[i].dtype == 'object': \n        encoder.fit_transform(list(df[i].values))\n        df[i] = encoder.transform(df[i].values) \n         \n        for j in df.columns:\n            if df[j].dtype == 'int':\n                df[j] = df[j].astype('float64') ","df65ac91":"df.info()","16f57678":"df.head()","009a0bb2":"X = df.drop(['price_rupiah'], axis=1)\ny = df['price_rupiah']\n\nX.shape, y.shape","1fec453b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error\nfrom sklearn.ensemble import  RandomForestRegressor","3bbbf0cb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","01193356":"model_rf = RandomForestRegressor(random_state=42)\nmodel_rf.fit(X_train, y_train)\npred_rf = model_rf.predict(X_test)","d57efb5e":"print('Testing R2 Score: ', r2_score(y_test, pred_rf)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_rf)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_rf))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_rf))","94594645":"pred_rf_trn = model_rf.predict(X_train)","f1b469cb":"print('Training R2 Score: ', r2_score(y_train, pred_rf_trn)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, pred_rf_trn)))\nprint('Training MAE: ', mean_absolute_error(y_train, pred_rf_trn))\nprint('Training MSE: ', mean_squared_error(y_train, pred_rf_trn))","f2b58602":"feat_importances_rf = pd.Series(model_rf.feature_importances_, index=X.columns)\nfeat_importances_rf.nlargest(10).plot(kind='barh')\nplt.show()","dc69c89b":"from xgboost import XGBRFRegressor","adcc437c":"# creating object of XGBoost\nmodel_xgb = XGBRFRegressor(max_depth=8, n_estimators = 10)\nmodel_xgb.fit(X_train, y_train)\npred_xgb = model_xgb.predict(X_test)","002f0f54":"print('Testing R2 Score: ', r2_score(y_test, pred_xgb)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_xgb)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_xgb))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_xgb))","a39e6e8a":"pred_xgb_trn = model_xgb.predict(X_train)","80e83cc5":"print('Training R2 Score: ', r2_score(y_train, pred_xgb_trn)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, pred_xgb_trn)))\nprint('Training MAE: ', mean_absolute_error(y_train, pred_xgb_trn))\nprint('Training MSE: ', mean_squared_error(y_train, pred_xgb_trn))","d278b716":"feat_importances_xbg = pd.Series(model_xgb.feature_importances_, index=X.columns)\nfeat_importances_xbg.nlargest(10).plot(kind='barh')\nplt.show()","75e6c579":"from sklearn.tree import DecisionTreeRegressor","aa35eccc":"# creating object of Decision Tree Regressor\nmodel_dt = DecisionTreeRegressor()\nmodel_dt.fit(X_train, y_train)\npred_dt = model_dt.predict(X_test)","8b2094f2":"print('Testing R2 Score: ', r2_score(y_test, pred_dt)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_dt)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_dt))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_dt))","e5b016e6":"pred_dt_trn = model_dt.predict(X_train)","03a155b9":"print('Training R2 Score: ', r2_score(y_train, pred_dt_trn)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, pred_dt_trn)))\nprint('Training MAE: ', mean_absolute_error(y_train, pred_dt_trn))\nprint('Training MSE: ', mean_squared_error(y_train, pred_dt_trn))","1ae98642":"feat_importances_dt = pd.Series(model_dt.feature_importances_, index=X.columns)\nfeat_importances_dt.nlargest(10).plot(kind='barh')\nplt.show()","7c6ac2d0":"## Encoding","3ab0b5fe":"## Bivariate Analysis","ad9e1773":"### Random Forest Regressor ","1b683773":"## Model Building ","02815ffb":"* Decision tree and Random Forest are giving almost same feature importance value","bce3665b":"## Multivariate Analysis","4e1c96ef":"* Diameter and Size have maximum feature importance in this case","b24bc8b5":"### XGBoost Regressor","4585f740":"## Thank you for reading this notebook. Please do like \ud83d\udc4d if you find it useful and also check my other notebook.\ud83d\ude00","3cd09412":"<center> <img src=\"https:\/\/cdn.britannica.com\/q:60\/08\/177308-050-94D9D6BE\/Food-Pizza-Basil-Tomato.jpg\" width=\"50%\" height=\"50%\"> <\/center>","70a64d31":"## Splitting data","e1eb1043":"* Here diameter is having highest feature importance","f75afc46":"### Decision Tree Regressor","4681ac7b":"## Univariate Analysis"}}