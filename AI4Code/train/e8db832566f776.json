{"cell_type":{"8d03c19d":"code","ca1b382a":"code","e558f35b":"code","c168508a":"code","6bea7c63":"code","3c566bbf":"code","9151b9cc":"code","3fcd7b9f":"code","105582be":"code","00932654":"code","17a298e2":"code","3061b32b":"code","e7e99605":"code","7bd0068d":"code","542f0b33":"code","8919ebbb":"code","5bbeb7d1":"code","19be5544":"code","bccefd2a":"code","b142e4af":"code","94e12650":"code","a32ddf63":"code","55c5c79b":"code","23813d75":"code","47c85dd2":"markdown"},"source":{"8d03c19d":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils.vis_utils import plot_model\n\n# specifically for cnn\nfrom keras.applications.resnet50 import ResNet50 ,preprocess_input\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization,GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler\n    \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\n\nprint(os.listdir(\"..\/input\"))","ca1b382a":"X=[]\nZ=[]\nIMG_SIZE=150\nTRAIN_DIR='..\/input\/aptos2019-blindness-detection\/train_images'","e558f35b":"def make_train_data(label,path):\n    img = cv2.imread(path,cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n\n    X.append(np.array(img))\n    Z.append(str(label))","c168508a":"df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ndf.head()","6bea7c63":"x = df['id_code']\ny = df['diagnosis']","3c566bbf":"for id_code,diagnosis in tqdm(zip(x,y)):\n    path = os.path.join(TRAIN_DIR,'{}.png'.format(id_code))\n    make_train_data(diagnosis,path)","9151b9cc":"# check some image\nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title(Z[l])\n        \nplt.tight_layout()","3fcd7b9f":"Y=to_categorical(Z)\nX=np.array(X)\nX=X\/255","105582be":"x_train,x_valid,y_train,y_valid = train_test_split(X,Y,test_size=0.2,random_state=42)\ndel X\ndel Y\ndel Z","00932654":"augs_gen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=10,  \n        zoom_range = 0.1, \n        width_shift_range=0.2,  \n        height_shift_range=0.2, \n        horizontal_flip=True,  \n        vertical_flip=False) \n\naugs_gen.fit(x_train)","17a298e2":"# # modelling starts using a ResNet50.\n\nbase_model = ResNet50(include_top=False,\n                      input_shape = (IMG_SIZE,IMG_SIZE,3),\n                      weights = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n    \nfor layer in base_model.layers:\n    print(layer,layer.trainable)\n\nmodel = Sequential()\nmodel.add(base_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(5,activation='softmax'))\nmodel.summary()","3061b32b":"# set callbacks\ncheckpoint = ModelCheckpoint(\n    '.\/base.model',\n    monitor='val_loss',\n    verbose=1,\n    save_best_only=True,\n    mode='min',\n    save_weights_only=False,\n    period=1\n)\nearlystop = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001,\n    patience=30,\n    verbose=1,\n    mode='auto'\n)\ntensorboard = TensorBoard(\n    log_dir = '.\/logs',\n    histogram_freq=0,\n    batch_size=16,\n    write_graph=True,\n    write_grads=True,\n    write_images=False,\n)\n\ncsvlogger = CSVLogger(\n    filename= \"training_csv.log\",\n    separator = \",\",\n    append = False\n)\n\nreduce = ReduceLROnPlateau(\n    monitor='val_loss',\n    factor=0.1,\n    patience=5,\n    min_lr=1e-6,\n    verbose=1, \n    mode='auto'\n)\n\ncallbacks = [checkpoint,tensorboard,csvlogger,reduce]","e7e99605":"batch_size=64\nepochs=50","7bd0068d":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","542f0b33":"History = model.fit_generator(augs_gen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_valid,y_valid),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size,\n                              callbacks=callbacks)","8919ebbb":"test_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\ntest_df.head()","5bbeb7d1":"x = test_df['id_code']","19be5544":"TEST_X = []\ndef make_test_data(path):\n    img = cv2.imread(path,cv2.IMREAD_COLOR)\n    img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n\n    TEST_X.append(np.array(img))","bccefd2a":"TEST_DIR='..\/input\/aptos2019-blindness-detection\/test_images'\nfor id_code in tqdm(x):\n    path = os.path.join(TEST_DIR,'{}.png'.format(id_code))\n    make_test_data(path)","b142e4af":"TEST_X=np.array(TEST_X)\nTEST_X=TEST_X\/255\npred=model.predict(TEST_X)","94e12650":"pred=np.argmax(pred,axis=1)\npred","a32ddf63":"sub_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\nsub_df.head()","55c5c79b":"sub_df.diagnosis = pred\nsub_df.head()","23813d75":"sub_df.to_csv(\"submission.csv\",index=False)","47c85dd2":"**If you like it , please upvote :)**"}}