{"cell_type":{"2dc81ff5":"code","21a8faf8":"code","6fed55cd":"code","9ff69457":"code","86b81a9e":"code","f800f348":"code","a7958eb9":"code","2f6a8b7d":"code","01f1c6bf":"code","89af6967":"code","acfad044":"code","ccec48d3":"code","91990c3e":"code","aeae31c0":"code","7fd9dfad":"code","6ad763e1":"code","44cf231d":"code","077b5f7f":"code","c98a865a":"code","032db410":"code","f590c5ab":"code","b5f93a8e":"code","b9e54de6":"code","354b5da6":"code","174e71e2":"code","2bccecf5":"code","c49ea6c8":"code","430db3ec":"code","2be914fa":"code","f39db44b":"code","047a25cc":"code","17f01bd5":"code","0fd38a8b":"code","0c77e837":"code","6cb88a47":"code","a6409b40":"code","36e615bf":"code","d58e97ec":"code","104874cd":"code","bbc5130f":"code","853b19d7":"code","b0d30bb1":"code","01aab1a9":"code","a4752817":"code","06b3e051":"code","f63a9574":"code","2aaaa693":"code","54b62c38":"code","3e807fd6":"code","20a985fe":"code","eb181276":"code","90998b9f":"code","36364dc4":"code","3128b50b":"code","156014a2":"code","5047da64":"code","ca0dbfb4":"code","5d7c1315":"code","4fd802b6":"code","c9d26176":"markdown","c685d7ce":"markdown","737cd6f0":"markdown","f70a034c":"markdown","22f3581a":"markdown","c42f8668":"markdown","88375c88":"markdown","68ac0175":"markdown"},"source":{"2dc81ff5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\nimport io\nimport requests\n\n","21a8faf8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6fed55cd":"train=pd.read_csv('..\/input\/titanic\/train.csv',na_values=['?'])","9ff69457":"test=pd.read_csv('..\/input\/titanic\/test.csv',na_values=['?'])","86b81a9e":"train.shape","f800f348":"\n\ntest.shape\n\n","a7958eb9":"train.head()\ntest.head()","2f6a8b7d":"train.nunique()","01f1c6bf":"test.nunique()\n","89af6967":"\ntrain.describe()","acfad044":"\ntest.describe()","ccec48d3":"train.columns\ntest.columns","91990c3e":"train.info()\ntest.info()","aeae31c0":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","7fd9dfad":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","6ad763e1":"# More female survived\nbar_chart('Sex')","44cf231d":"bar_chart('Pclass')","077b5f7f":"train.head()","c98a865a":"train.head(10)","032db410":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","f590c5ab":"train['Title'].value_counts()","b5f93a8e":"test['Title'].value_counts()","b9e54de6":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","354b5da6":"# drop unnecessary columns from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","174e71e2":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","2bccecf5":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","c49ea6c8":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","430db3ec":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()\n","2be914fa":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","f39db44b":"\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","047a25cc":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)\n","17f01bd5":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","0fd38a8b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","0c77e837":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(70)","6cb88a47":"train.info()\ntest.info()","a6409b40":"mean = (train[\"Age\"].mean()*train.shape[0])\/train.shape[0]\ntrain[\"Age\"] = train[\"Age\"].fillna(int(float(mean)))\ntrain.isnull().sum()\n","36e615bf":"\n\nPclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))\n\n","d58e97ec":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n","104874cd":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)\n","bbc5130f":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)\n","853b19d7":"train.Cabin.value_counts()\n","b0d30bb1":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]\n","01aab1a9":"\n\nPclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))\n\n","a4752817":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","06b3e051":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\n","f63a9574":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","2aaaa693":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)\n","54b62c38":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)\n\nfeatures_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)\n\ntrain_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape\n\n","3e807fd6":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)\n\nclf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\n","20a985fe":"round(np.mean(score)*100, 2)","eb181276":"\n\nclf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\n","90998b9f":"\nround(np.mean(score)*100, 2)\n","36364dc4":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","3128b50b":"\nround(np.mean(score)*100, 2)","156014a2":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n","5047da64":"\nround(np.mean(score)*100, 2)","ca0dbfb4":"\n\nclf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)\n\n","5d7c1315":"round(np.mean(score)*100,2)","4fd802b6":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission = pd.read_csv('submission.csv')\nsubmission.head()\n\n","c9d26176":"### Decision Tree Score","c685d7ce":"### Random Forest Score","737cd6f0":"### Final Result","f70a034c":"# Model","22f3581a":"### KNN SCORE","c42f8668":"## Dataset","88375c88":"## Modules","68ac0175":"### Naive Bayes Score"}}