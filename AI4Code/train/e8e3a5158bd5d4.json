{"cell_type":{"0ed3b127":"code","7b28d093":"code","162e7803":"code","a7e40f2f":"code","42cf2b88":"code","80747387":"code","977f9dde":"code","7c69cc74":"code","b84f0525":"code","63a9b288":"code","2b917171":"code","c8621407":"code","e2b699b8":"code","9aaf7edf":"code","a50747e8":"code","cdf0c8f3":"code","0f67db09":"code","eafec505":"code","63e1a0f3":"code","c829d8b6":"code","c7707580":"code","50da1388":"code","14666622":"code","c816fd1f":"code","3b91693d":"code","eace3c10":"markdown","c462d415":"markdown","5e232e4b":"markdown","2ec891f3":"markdown"},"source":{"0ed3b127":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score,roc_auc_score,roc_curve, auc\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import preprocessing, metrics\nimport lightgbm as lgb\nimport gc\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\ngc.enable()\nimport matplotlib.pyplot as plt\nimport datetime\nfrom sklearn import preprocessing\nimport re\nfrom sklearn.model_selection import StratifiedKFold, KFold\nprint('Libraries Imported')","7b28d093":"import os \nos.listdir('..\/input\/iit_traffic_data\/iit_traffic_data\/')\npath = '..\/input\/iit_traffic_data\/iit_traffic_data\/'","162e7803":"train = pd.read_csv(path + 'train.csv')","a7e40f2f":"test = pd.read_csv(path + 'test.csv')","42cf2b88":"train.head()","80747387":"test.head()","977f9dde":"ax = sns.countplot(x='is_holiday', data=train)\nax.set_xlabel('is_holiday')\nax.set_ylabel(\"count\")  \n","7c69cc74":"ax = sns.countplot(x='weather_type', data=train)\nax.set_xlabel('weather_type')\nax.set_ylabel(\"count\")  \n","b84f0525":"ax = sns.countplot(x='weather_type', data=train)\nax.set_xlabel('weather_type')\nax.set_ylabel(\"count\")  \n\n\n","63a9b288":"train.describe()","2b917171":"# count the number of NaN values in each column\nprint(train.isnull().sum())","c8621407":"train.shape\nlen(train.columns)","e2b699b8":"i = 0\nwhile i < len(train.columns):    \n\n    train[train.columns[i:i+10]].hist()\n\n    i += 10","9aaf7edf":"i = 0\nwhile i < len(train.columns):    \n    plt.figure(figsize=(10,10))\n    ax = sns.boxplot(data=train[train.columns[i:i+10]],  palette=\"Set2\")\n    plt.title('Box Plot')\n    plt.show()\n    i += 10","a50747e8":"plt.figure(figsize=(10,10))\nsns.heatmap(train.corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between columns')\nplt.show()","cdf0c8f3":"def run_lgbm(train_X, train_y):\n    params = {  \n        'num_leaves':30,\n            'objective':'regression',\n            \"metric\" : \"rmse\",\n            'max_depth':7,\n            'learning_rate':.001,\n            'max_bin':100,\n            \"bagging_fraction\" : 0.7,\n            \"feature_fraction\" : 0.5,\n            \"bagging_frequency\" : 6,\n            \"bagging_seed\" : 42,\n            \"verbosity\" : 1,\n#           \"boosting\": ['rf'],\n           \"reg_alpha\" : 0,\n           'reg_lambda' :10\n             }\n\n    lgbm_train = lgb.Dataset(train_X, label=train_y)\n\n\n    model = lgb.train(params, lgbm_train,num_boost_round=150)\n\n    print(datetime.datetime.now())\n    return model","0f67db09":"train.head()","eafec505":"cat_cols = ['is_holiday','weather_type']\nohe = pd.get_dummies(train[cat_cols],  drop_first=False)\nohe.columns\ntrain.drop(cat_cols, axis=1,inplace=True)\ntrain= pd.concat([train, ohe], axis=1)\nprint(train.head())","63e1a0f3":"features = [c for c in train.columns if c not in ['date_time', 'traffic_volume','weather_description',\n                                                 ]]\ntarget = ['traffic_volume']\n","c829d8b6":"X = train[features].values\ny = train[target]","c7707580":"train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.20, random_state=1234)\nprint(\"Training, validation split  done\")","50da1388":"#predicting on test set\nmodel = run_lgbm(train_X, train_y)\n\n\nval_y_pred=model.predict(val_X)\n\n\nfig, ax = plt.subplots(figsize=(12,10))\nlgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()\n\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\n\n# print('Intercept: \\n', regressor.intercept_)\n# print('Coefficients: \\n', regressor.coef_)\n\nprint('R Square value', r2_score(val_y,val_y_pred))\nprint('mean absolute error', metrics.mean_absolute_error(val_y,val_y_pred))\nprint('root mean_squared_error', np.sqrt(metrics.mean_squared_error(val_y,val_y_pred)))","14666622":"from keras.layers.core import Activation\n\n# from resnets_utils import *\n\nfrom keras.models import load_model\n\nfrom keras.utils import np_utils\n\nfrom keras import applications\n\nfrom keras import optimizers\nfrom keras.models import Sequential,Model,load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,GlobalAveragePooling2D\nfrom keras.callbacks import TensorBoard,ReduceLROnPlateau,ModelCheckpoint","c816fd1f":"NN_model = Sequential()\n\n# The Input Layer :\nNN_model.add(Dense(128, kernel_initializer='normal',input_dim = train_X.shape[1], activation='relu'))\n\n# The Hidden Layers :\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\n\n# The Output Layer :\nNN_model.add(Dense(1, kernel_initializer='normal',activation='linear'))\n\n# Compile the network :\nNN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])\nNN_model.summary()\n\n\nNN_model.fit(train_X, train_y, epochs=50, batch_size=32)\n\n","3b91693d":"pred_val_y = NN_model.predict(val_X)\nprint('R Square value', r2_score(val_y,pred_val_y))\nprint('mean absolute error', metrics.mean_absolute_error(val_y,pred_val_y))\nprint('root mean_squared_error', np.sqrt(metrics.mean_squared_error(val_y,pred_val_y)))","eace3c10":"Univariate Analysis","c462d415":"Neural Network","5e232e4b":"Metrics","2ec891f3":"Light GBM"}}