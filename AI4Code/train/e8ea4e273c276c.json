{"cell_type":{"9ca1574c":"code","c642bb19":"code","30054f27":"code","2dc97093":"code","7f525cd1":"code","e6dee444":"code","2bfb4ec4":"code","20d68584":"code","a26121bb":"code","60f37d28":"code","be1c447e":"code","3d379089":"code","be15ef1a":"code","3eaf361b":"code","5ce4911f":"code","137bc4c6":"code","123d4354":"markdown","96f60b0a":"markdown","612768e0":"markdown","b53e271c":"markdown","0ab42552":"markdown","42b5d0d6":"markdown","ea1cdac8":"markdown","34d91964":"markdown","d3c44e59":"markdown"},"source":{"9ca1574c":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # visuals \nimport seaborn as sns # visuals\nfrom keras.utils.np_utils import to_categorical # to categorical\nfrom sklearn.model_selection import train_test_split # train test split \n\n\n# Model\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n\nfrom tensorflow.keras.callbacks import EarlyStopping # Early Stopping\n\nfrom sklearn.metrics import classification_report, confusion_matrix # Evaluation\n\nfrom keras.preprocessing.image import ImageDataGenerator # Image Data Generator","c642bb19":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","30054f27":"# Seprate X from y\ny_train = train[\"label\"]\nX_train = train.drop(\"label\",axis = 1)\n\n# Normalize the data \nX_train = X_train \/ 255.0\nX_test = test \/ 255.0\n\n# Reshape the data \nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\n\n# Convert y to categorical \ny_train = to_categorical(y_train, num_classes = 10)","2dc97093":"single_img = X_train[10]\nplt.imshow(single_img, cmap=plt.cm.binary)\nplt.axis('off')\nplt.show()","7f525cd1":"plt.figure(figsize=(15,5))\nfor i in range(30):  \n    plt.subplot(3, 10, i+1)\n    plt.imshow(X_train[i],cmap=plt.cm.binary)\n    plt.axis('off')\nplt.show()","e6dee444":" X_train2, X_val2, y_train2, y_val2 = train_test_split(X_train, y_train, test_size = 0.2)","2bfb4ec4":"# Create more images \ndatagen = ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)","20d68584":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = 3, input_shape = (28,28,1), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(filters = 64, kernel_size = 3, activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(filters = 128, kernel_size = 3, padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dense(10, activation = 'softmax'))\n\nmodel.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]);","a26121bb":"model.summary()","60f37d28":"early_stop = EarlyStopping(monitor = 'val_loss', patience = 2)\nmodel.fit(datagen.flow(X_train2, y_train2, batch_size=64), epochs = 20, validation_data = (X_val2,y_val2), callbacks = [early_stop]);","be1c447e":"metrics = pd.DataFrame(model.history.history)","3d379089":"metrics[['loss', 'val_loss']].plot();","be15ef1a":"metrics[['accuracy', 'val_accuracy']].plot();","3eaf361b":"y_pred = model.predict(X_val2)\npredictions = np.round(y_pred).astype(int)\nprint(classification_report(y_val2, predictions));","5ce4911f":"preds = model.predict(X_test)\npreds = np.argmax(preds,axis = 1)\n\noutput = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\noutput['Label'] = preds\noutput.to_csv('submission.csv',index=False)","137bc4c6":"output.head(20)","123d4354":"# Train Validation Split ","96f60b0a":"# Data Augmentation ","612768e0":"# Submit the results","b53e271c":"# Print some Images ","0ab42552":"# Train the Model","42b5d0d6":"# Model Evaluation","ea1cdac8":"# Load the Data ","34d91964":"# Imports ","d3c44e59":"# Prepare the data "}}