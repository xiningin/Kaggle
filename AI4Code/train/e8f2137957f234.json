{"cell_type":{"2cce2f12":"code","cb7f4d6c":"code","8412a14d":"code","7412d3d5":"code","01703879":"markdown","9b1aa445":"markdown","83494e9a":"markdown","6bf07699":"markdown"},"source":{"2cce2f12":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.preprocessing.image import ImageDataGenerator\nimport os\nfrom keras.metrics import top_k_categorical_accuracy\nfrom keras.utils import to_categorical\nfrom keras.applications.nasnet import NASNetMobile","cb7f4d6c":"from os import listdir\nfrom PIL import Image as PImage\nfrom random import shuffle\nimport gc\nfrom keras.preprocessing.image import img_to_array, array_to_img\n\nfiles = list()\n\nfor num, a in enumerate(os.listdir('..\/input\/fruits-360_dataset\/fruits-360\/Training\/')):\n    path = '..\/input\/fruits-360_dataset\/fruits-360\/Training\/' + a + '\/'\n    for file in os.listdir(path):\n        files.append([path + file, num])\n\ndef loadImages(path, num):\n    # return array of images\n    y = list()\n    imagesList = listdir(path)\n    loadedImages = []\n    for image in imagesList:\n        img = PImage.open(path + image)\n        img = img.resize((224,224))\n        loadedImages.append(img)\n        y.append(num)\n        \n    return loadedImages, y\n\nshuffle(files)\ngc.collect()\n\ndef generator(bs = 64):\n    for num, path in enumerate(files):\n        if num % bs == 0:\n            y = list()\n            loadedImages = list()\n        img = PImage.open(path[0])\n        img = img.resize((224,224))\n        loadedImages.append(img)\n        y.append(path[1])\n        if num % bs == bs-1:\n            loadedImages = np.asarray([img_to_array(a) for a in loadedImages])\n            y = np.asarray([a for a in y]).reshape(-1,1)\n            yield (loadedImages, to_categorical(y, num_classes = 81))\n           \nfiles_valid = list()\n\nfor num, a in enumerate(os.listdir('..\/input\/fruits-360_dataset\/fruits-360\/Test\/')):\n    path = '..\/input\/fruits-360_dataset\/fruits-360\/Test\/' + a + '\/'\n    for file in os.listdir(path):\n        files_valid.append([path + file, num])\n\nshuffle(files_valid)\n        \ndef validation_generator(bs = 64):\n    for num, path in enumerate(files_valid):\n        if num % bs == 0:\n            y = list()\n            loadedImages = list()\n        img = PImage.open(path[0])\n        img = img.resize((224,224))\n        loadedImages.append(img)\n        y.append(path[1])\n        if num % bs == bs-1:\n            loadedImages = np.asarray([img_to_array(a) for a in loadedImages])\n            y = np.asarray([a for a in y]).reshape(-1,1)\n            yield (loadedImages, to_categorical(y, num_classes = 81))\n","8412a14d":"import keras\nfrom keras.models import Model\nfrom keras.layers import Dropout, Input, Dense, Activation\nmodel2 = keras.applications.nasnet.NASNetMobile(input_shape=(224, 224, 3), include_top=False, weights = 'imagenet', input_tensor = None, pooling='max')\ninp = Input((224,224,3))\nx = model2(inp)\nx = Dense(81)(x)\nx = Activation('softmax')(x)\nmodel = Model(inp, x)\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'Adam', metrics = ['accuracy'])\nmodel.fit_generator(generator(bs=128), steps_per_epoch = 100, verbose = 1, epochs = 1)","7412d3d5":"res = model.evaluate_generator(validation_generator(), steps = 100, verbose=1)\nprint('Validaion Loss:', res[0], '. Accuracy:', res[1])","01703879":"# Model by itself","9b1aa445":"# All dependencies","83494e9a":"# Data generators","6bf07699":"# Let's test it!"}}