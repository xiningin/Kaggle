{"cell_type":{"b793dc77":"code","783a3eb4":"code","8627af97":"code","389cd20d":"code","52b1c419":"code","267f6973":"code","4946f58e":"code","67041968":"code","fb2d067e":"code","e9e0a510":"code","1c3c5d93":"markdown","4d2c53dd":"markdown","7f751a9f":"markdown","98c335e8":"markdown"},"source":{"b793dc77":"import os\nimport datetime\n\nimport numpy as np \nimport pandas as pd \n\nimport plotly.offline as po\nimport plotly.graph_objs as go\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","783a3eb4":"def integer_encoder(team_dataframe, team):\n    FTR_encoded = []\n    for date in team_dataframe[\"Date\"]:\n        team_dataframe_2 = team_dataframe[team_dataframe[\"Date\"] == date]\n        if (((team_dataframe_2[\"HomeTeam\"].values == team) & (team_dataframe_2[\"FTR\"].values == \"H\")) | ((team_dataframe_2[\"AwayTeam\"].values == team) & (team_dataframe_2[\"FTR\"].values == \"A\"))):\n            FTR_encoded.append(int(1))\n        elif (((team_dataframe_2[\"HomeTeam\"].values == team) & (team_dataframe_2[\"FTR\"].values == \"A\")) | ((team_dataframe_2[\"AwayTeam\"].values == team) & (team_dataframe_2[\"FTR\"].values == \"H\"))):\n            FTR_encoded.append(int(-1))\n        elif team_dataframe_2[\"FTR\"].values == \"D\":\n            FTR_encoded.append(int(0))\n\n    return FTR_encoded","8627af97":"def syncing_FTR(main_dates, team_dates, team_FTR):\n    synced_FTR = []\n    for main_date in main_dates:\n        if main_date in team_dates:\n            for i, team_date in enumerate(team_dates):\n                if main_date == team_date:\n                    synced_FTR.append(team_FTR[i])\n        else:\n            synced_FTR.append(None)\n\n    return synced_FTR","389cd20d":"data_path = \"\/kaggle\/input\/english-premier-league-season-1819\/season-1819_csv.csv\"\ndf = pd.read_csv(data_path)\ndf.head()","52b1c419":"df.columns","267f6973":"pl_teams = list(df[\"HomeTeam\"].unique())\npl_teams","4946f58e":"teams_df = []\nFTRs_encoded = []\nfor team in pl_teams:\n    team_df = df[(df[\"HomeTeam\"] == team) | (df[\"AwayTeam\"] == team)]\n    teams_df.append(team_df)\n    FTR_encoded = integer_encoder(team_df, team)\n    FTRs_encoded.append(FTR_encoded)","67041968":"main_dates = sorted(df[\"Date\"].unique(), key=lambda date: datetime.datetime.strptime(date, \"%d\/%m\/%Y\"))\nmain_dates","fb2d067e":"teams_synced_FTR = []\nfor i in range(len(teams_df)):\n    teams_synced_FTR.append(syncing_FTR(main_dates, teams_df[i][\"Date\"].to_list(), FTRs_encoded[i]))","e9e0a510":"fig = go.Figure()\nfor i, team in enumerate(pl_teams):\n    fig.add_trace(go.Scatter(\n        x = main_dates,\n        y = teams_synced_FTR[i],\n        name = team,\n        mode = 'lines+markers',\n        connectgaps=True\n    ))\n\nfig.show()","1c3c5d93":"The charts of each team show the status of their games throughout history.","4d2c53dd":"And This function arranges the FTR lists for each team according to the overall list of dates\n* main_dates :: List all dates on which the game was played.\n* team_dates :: A list of dates a particular team played.\n* team_FTR :: List of results that the team has achieved.","7f751a9f":"I use integer_encoder function to convert win and lose status(FTR) from letters to numbers.\n* team_dataframe   :: All games a team has played in a season.\n* team             :: The name of each team we give the data to.","98c335e8":"**Basic Visualization with Plotly**\n"}}