{"cell_type":{"0e4343b1":"code","9c17d843":"code","0c823da5":"code","40375ede":"code","dc939ab1":"code","51995743":"code","b21ec56e":"code","05019512":"code","0c937f49":"code","79cc480f":"code","6bbd2079":"code","f9da588b":"code","59856194":"code","6724f21e":"code","dfb4b30e":"code","4d0f0d4f":"code","0900a557":"code","b248b703":"code","223ce23b":"code","284e527f":"code","23939f99":"code","7cdde3ad":"code","107f29a4":"code","cae53d43":"code","a27a3a6d":"code","ea2b0853":"code","57fd6973":"code","c29c11c2":"code","deeb0d0c":"markdown","a1ab6858":"markdown","7d6bf785":"markdown","c29d81da":"markdown","3d3f4f03":"markdown","8c3c4ccd":"markdown","44c7da7a":"markdown","a2de3617":"markdown","aa7f7123":"markdown"},"source":{"0e4343b1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB","9c17d843":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","0c823da5":"df.head(10)","40375ede":"df.info()","dc939ab1":"df.shape","51995743":"df.describe().T","b21ec56e":"df.isnull().sum()","05019512":"df.duplicated().sum()","0c937f49":"df.drop_duplicates(inplace=True)","79cc480f":"cat_cols = [\"sex\",\"cp\",\"fbs\",\"restecg\",\"exang\",\"slope\",\"ca\",\"thal\"]\nfor col in cat_cols:\n    df[col] = df[col].astype(\"object\")","6bbd2079":"print(df[\"target\"].value_counts())\n\nplt.figure(figsize=(10,6))\nsns.countplot(df[\"target\"])\nplt.title(\"Heart Disease Numbers\", size=15)\nplt.show()","f9da588b":"plt.figure(figsize=(10,6))\nsns.distplot(df[\"age\"])\nplt.title(\"Age\", size=15)\nplt.show()","59856194":"plt.figure(figsize=(10,6))\nsns.barplot(x = df[\"target\"], y=df[\"age\"])\nplt.title(\"Age vs Heart Disease\", size=15)\nplt.show()","6724f21e":"plt.figure(figsize=(10,6))\nsns.barplot(x = df[\"sex\"], y=df[\"target\"])\nplt.title(\"Sex vs Heart Disease\", size=15)\nplt.show()","dfb4b30e":"X = df.drop(\"target\", axis=1)\ny = df[\"target\"]","4d0f0d4f":"X = pd.get_dummies(X, columns=cat_cols)","0900a557":"num_cols = X.select_dtypes([\"int64\",\"float64\"]).columns\nnum_cols","b248b703":"std_scale = StandardScaler()\nX[num_cols] = std_scale.fit_transform(X[num_cols])","223ce23b":"X.head()","284e527f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","23939f99":"models = pd.DataFrame(columns=[\"Model\",\"Accuracy Score\"])","7cdde3ad":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\npredictions = log_reg.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"LogisticRegression\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","107f29a4":"GNB = GaussianNB()\nGNB.fit(X_train, y_train)\npredictions = GNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"GaussianNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","cae53d43":"BNB = BernoulliNB()\nBNB.fit(X_train, y_train)\npredictions = BNB.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"BernoulliNB\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","a27a3a6d":"svm = SVC()\nsvm.fit(X_train, y_train)\npredictions = svm.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"SVC\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","ea2b0853":"random_forest = RandomForestClassifier(n_estimators=1000, random_state=42)\nrandom_forest.fit(X_train, y_train)\npredictions = random_forest.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"RandomForestClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","57fd6973":"xgb = XGBClassifier(use_label_encoder=False)\nxgb.fit(X_train, y_train)\npredictions = xgb.predict(X_test)\nscore = accuracy_score(predictions, y_test)\nprint(f\"Accuracy Score: {score}\")\nnew_row = {\"Model\": \"XGBClassifier\", \"Accuracy Score\": score}\nmodels = models.append(new_row, ignore_index=True)","c29c11c2":"models.sort_values(by=\"Accuracy Score\", ascending=False)","deeb0d0c":"# One Hot Encoding","a1ab6858":"# Exploratory Data Analysis","7d6bf785":"# Standardization of Data","c29d81da":"# Data Visualization","3d3f4f03":"# Splitting the Data","8c3c4ccd":"# Comparison of Machine Learning Algorithms' Accuracy Scores","44c7da7a":"# Machine Learning Algorithms","a2de3617":"# Data Cleaning","aa7f7123":"**MALE = 1, FEMALE = 0**"}}