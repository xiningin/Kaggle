{"cell_type":{"6cdef28c":"code","cc104b18":"code","2ffd9c1e":"code","a130b9db":"code","c15d7ba1":"code","d67701e9":"code","2067740c":"code","68fd2def":"code","f2d20bf1":"code","4372ab13":"code","37aa383d":"code","38ca880f":"code","76474d47":"code","a84a39fc":"code","44113540":"code","e980e9e7":"code","b3220679":"code","a0fb4aab":"code","f2c54cca":"code","c7cdb8dd":"code","3c6d7660":"code","9b80ddfe":"code","5f5b38ad":"code","217ca28e":"code","f077e1c0":"code","8267e888":"code","15c7acb3":"code","edbace28":"code","2bc609d7":"code","6544931d":"code","af4e73a2":"code","01e7d846":"code","ae2e803d":"code","62fc2e63":"code","61f6dba5":"code","d206e4d4":"code","5ca91b6f":"markdown","38360d67":"markdown","e29b2a84":"markdown","296781dd":"markdown","5fa213ac":"markdown","8d2d563d":"markdown","a1a931f8":"markdown"},"source":{"6cdef28c":"\nimport numpy as np \nimport pandas as pd \npd.set_option('display.max_columns', 5)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","cc104b18":"def create_user_movie_df():\n    movie = pd.read_csv('..\/input\/movielense20m\/movie.csv').head(20000)\n    rating = pd.read_csv('..\/input\/movielense20m\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df","2ffd9c1e":"user_movie_df = create_user_movie_df()","a130b9db":"user_movie_df.head()","c15d7ba1":"random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)","d67701e9":"# movies watched by random user\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]","2067740c":"# random_userin-> names of all movies\n# notna().any() -> any value without na\n# tolist() -> convert to list\n# movies watched by random user\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\nmovies_watched","68fd2def":"perc = len(movies_watched) * 0.6","f2d20bf1":"# dataset has been reduced according to the movies the person has watched\nmovies_watched_df = user_movie_df[movies_watched]\nmovies_watched_df.head()\nmovies_watched_df.shape","4372ab13":"# get the non-null sum for each user\nuser_movie_count = movies_watched_df.T.notnull().sum()","37aa383d":"# index names can be changed\nuser_movie_count = user_movie_count.reset_index()","38ca880f":"# how many movies each user watched from this movie set\nuser_movie_count.columns = [\"userId\",\"movie_count\"]","76474d47":"# The id of people who watched 60% of the same movies as the random user\nuser_movie_count[user_movie_count[\"movie_count\"]>perc].sort_values(\"movie_count\", ascending = False)","a84a39fc":"users_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies","44113540":"users_same_movies.count()","e980e9e7":"# random_user and others\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies.index)],\n                      random_user_df[movies_watched]])","b3220679":"final_df.shape\n# 4140 movie\n# 33 user","a0fb4aab":"final_df.T.corr()","f2c54cca":"corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()","c7cdb8dd":"# dataframe translated\ncorr_df = pd.DataFrame(corr_df, columns = [\"corr\"])\ncorr_df.index.names = ['user_id_1','user_id_2']\ncorr_df = corr_df.reset_index()","3c6d7660":"# corr values greater than 0.65\n# user_id1 -> random_user\n# user_id2 -> others\n# Users correlated with random_user.\ntop_users = corr_df[(corr_df[\"user_id_1\"] ==  random_user) & (corr_df[\"corr\"]>= 0.65)][\n    [\"user_id_2\",\"corr\"]].reset_index(drop = True)\ntop_users","9b80ddfe":"top_users.rename(columns = {\"user_id_2\": \"userId\"}, inplace = True)","5f5b38ad":"# It goes to the information of how many values the users who have these user ids give to which movie.\nrating = pd.read_csv(\"..\/input\/movielense20m\/rating.csv\")","217ca28e":"# of people with the highest correlation with random_user: their correlation, how many points they gave which movie\ntop_users_ratings= top_users.merge(rating[[\"userId\",\"movieId\",\"rating\"]], how = \"inner\")","f077e1c0":"top_users_ratings","8267e888":"# calculation of weighted_rating\ntop_users_ratings[\"weighted_rating\"] = top_users_ratings[\"corr\"] * top_users_ratings[\"rating\"]\ntop_users_ratings.head()\n","15c7acb3":"top_users_ratings.groupby(\"movieId\").agg({\"weighted_rating\":\"mean\"})","edbace28":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\":\"mean\"})","2bc609d7":"recommendation_df = recommendation_df.reset_index()","6544931d":"recommendation_df[[\"movieId\"]].nunique()","af4e73a2":"recommendation_df[recommendation_df[\"weighted_rating\"] >4]","01e7d846":"# recommended movies\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"]>4].head(5)","ae2e803d":"# Movies that will be recommended to random_user\nmovie = pd.read_csv(\"..\/input\/movielense20m\/movie.csv\")\nmovies_to_be_recommend.merge(movie[[\"movieId\",\"title\"]])","62fc2e63":"movie_id = rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] == 5.0)]. \\\n    sort_values(by = \"timestamp\", ascending = False)[\"movieId\"][0:1].values[0]","61f6dba5":"# Suggestion using User-Based\nmovies_to_be_recommend.merge(movie[[\"movieId\",\"title\"]])[\"title\"]","d206e4d4":"# Suggestion Item-Based \nmovie_name = movie[movie['movieId'] == movie_id][\"title\"].values[0]\nmovie_name = user_movie_df[movie_name]\nmovie_from_item_based = user_movie_df.corrwith(movie_name).sort_values(ascending = False)\nmovie_from_item_based[1:6].index.to_list()","5ca91b6f":"# HYBRID RECOMMENDER","38360d67":"- An arrangement should be made so that the effect of rating and correlation can be kept at the same rate.\n- Let there be such a score that the high correlation is taken into account, also take into account the high rating\n- corr*rating-> we can create a single score that we can sort by considering the effects of the most similar users and the points given at the same time.","e29b2a84":"<center><h1><strong><\/strong><\/h1>\n<img\nsrc=\"https:\/\/miro.medium.com\/max\/1312\/1*70hEtObAo19n-1tA8t9xMQ.png\" width =\"700\">\n<\/center>","296781dd":"Identify users who are similar to the user to be suggested.\n\n\nThis process is performed in 3 steps.\n1. Gathering data of random_user and other users\n2. Creating the correlation df.\n3. The most similar users (Top Users) will be found.\n","5fa213ac":"### Determine the movies watched by the user to be suggested.","8d2d563d":"### Item-based suggestion based on the name of the movie that the user gave the highest score to from the movies watched","a1a931f8":"###  Calculating Weighted Average Recommendation Score and keeping the first 5 movies"}}