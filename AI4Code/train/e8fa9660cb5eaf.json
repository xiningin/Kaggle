{"cell_type":{"6c416407":"code","61488253":"code","5e9cd658":"code","ab0eea15":"code","de9c80b1":"code","bcf24c89":"code","35ee268d":"code","2b2d8123":"code","2ebdb41c":"code","93da3d2b":"code","b267e006":"code","ddcf9d16":"code","19456487":"code","88c05c05":"code","c15f3032":"code","8b6498e3":"code","ffa873d4":"markdown","4aea51cc":"markdown","ba98c98b":"markdown","24b94e8e":"markdown","6d2f2739":"markdown","61468141":"markdown"},"source":{"6c416407":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#sns.set_style(\"dark\")\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\n\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split, GridSearchCV\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_curve, log_loss, accuracy_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","61488253":"train = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","5e9cd658":"train.head()","ab0eea15":"train.info()","de9c80b1":"# Encoder of Class\nle = LabelEncoder()\nencoder = le.fit_transform(train.target)\ntrain = train.assign(target=encoder)","bcf24c89":"plt.figure(figsize=(12,6))\ncontagem = train['target'].value_counts()\n\nax = sns.countplot(data=train, x='target')\n\nfor c in ax.patches:\n    ax.text(c.get_x() + c.get_width() \/ 2, c.get_height() + 0.9, c.get_height(), fontsize='16')\n    \nax.set_xlabel('N\u00b0 of Class', fontsize = 15)\nax.set_ylabel('Count', fontsize = 15);","35ee268d":"train.describe().T","2b2d8123":"columns = test.iloc[:,1:51].columns\nplt.subplots(figsize=(18,120))\nlength = len(columns)\n\nfor i,j in zip(columns, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.5)\n    sns.kdeplot(train[i])\n\nplt.show()","2ebdb41c":"test.describe().T","93da3d2b":"columns = test.iloc[:,1:51].columns\nplt.subplots(figsize=(18,120))\nlength = len(columns)\n\nfor i,j in zip(columns, range(length)):\n    plt.subplot((length\/2), 2, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.5)\n    sns.kdeplot(test[i])\n\nplt.show()","b267e006":"x = train.drop(['target'], axis=1)\ny = train['target']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.2, stratify=y)","ddcf9d16":"colunas = ['Modelo','Probability']\nresultado = pd.DataFrame(columns=colunas)\n\n\nmodels = []\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\nmodels.append(('AdaBoostClassifier', AdaBoostClassifier()))\nmodels.append(('ExtraTreesClassifier', ExtraTreesClassifier()))\nmodels.append(('BaggingClassifier', BaggingClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('ExtraTreeClassifier', ExtraTreeClassifier()))\nmodels.append((\"XGBClassifier\", XGBClassifier()))\nmodels.append((\"LGBMClassifier\", LGBMClassifier()))\n\nfor name, model in models:\n    model.fit(x_train,y_train)\n    y_pred=model.predict_proba(x_test)\n    lost = log_loss(y_test, y_pred)\n    resultado = resultado.append(pd.DataFrame([[name, lost]], columns=colunas))\n    \nresultado.sort_values(by=['Probability'], ascending=True, inplace=True)\nresultado","19456487":"model = LGBMClassifier()\nmodel.fit(x_train, y_train)\npred = model.predict_proba(x_test)","88c05c05":"result = model.predict_proba(test)","c15f3032":"submission = pd.DataFrame({'id': sub['id'],\n                           'Class_1': result[:, 0],\n                           'Class_2': result[:, 1],\n                           'Class_3': result[:, 2],\n                           'Class_4': result[:, 3],})","8b6498e3":"submission.to_csv('submission.csv', index=False)","ffa873d4":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Preprocess<\/p>","4aea51cc":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Tabular Playground Series - May 2021<\/p>","ba98c98b":"The algorithms used are:\n\n* GradientBoostingClassifier\n* AdaBoostClassifier\n* ExtraTreesClassifier\n* ElasticNet\n* BaggingClassifier\n* DecisionTreeClassifier\n* ExtraTreeClassifier\n* XGBClassifier\n* LGBMClassifier","24b94e8e":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Submission<\/p>","6d2f2739":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Model<\/p>","61468141":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 15px;\">Input<\/p>"}}