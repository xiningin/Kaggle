{"cell_type":{"b4468a9d":"code","6e7f71d1":"code","8a7dece7":"code","ac9036a0":"code","a50f070d":"code","86b575b9":"code","a63d9fdc":"code","13fe6254":"code","b435991a":"code","02c728dc":"code","72496a9a":"code","a679ded3":"code","e4024df4":"markdown","7b5ad464":"markdown","89963465":"markdown","1f5464cc":"markdown"},"source":{"b4468a9d":"# Import ML libraries.\nimport csv as csv\nimport os as os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.callbacks import Callback\nfrom keras.models import Sequential\nfrom numpy.random import seed\nfrom tensorflow import set_random_seed\nfrom IPython.display import clear_output","6e7f71d1":"# Stablize our result by setting fixed seed.\nseed(1)\nset_random_seed(2)","8a7dece7":"train_df =  pd.read_csv(\"..\/input\/train.csv\", nrows = 50000, parse_dates=[\"pickup_datetime\"])\ntrain_df.dtypes","ac9036a0":"# Credit: dimitreoliveira\n# https:\/\/www.kaggle.com\/dimitreoliveira\/tensorflow-dnn-coursera-ml-course-tutorial\ndef clean(df):\n    # Drop null values.\n    df = df.dropna(how = 'any', axis = 'rows')\n    \n    # Delimiter lats and lons to NY only\n    df = df[(-76 <= df['pickup_longitude']) & (df['pickup_longitude'] <= -72)]\n    df = df[(-76 <= df['dropoff_longitude']) & (df['dropoff_longitude'] <= -72)]\n    df = df[(38 <= df['pickup_latitude']) & (df['pickup_latitude'] <= 42)]\n    df = df[(38 <= df['dropoff_latitude']) & (df['dropoff_latitude'] <= 42)]\n    # Remove possible outliers\n    df = df[(0 < df['fare_amount']) & (df['fare_amount'] <= 250)]\n    # Remove inconsistent values\n    df = df[(df['dropoff_longitude'] != df['pickup_longitude'])]\n    df = df[(df['dropoff_latitude'] != df['pickup_latitude'])]\n    return df\n\n# Process data frame.\ndef process_df(df):\n    # Squared distance between pickup and dropoff location.\n    df[\"sq_distance\"] = (df.pickup_longitude - df.dropoff_longitude) ** 2 + (df.pickup_latitude - df.dropoff_latitude) ** 2\n    \n    # Month of pickup date. We think there should be busy season.\n    df[\"month\"] = df.pickup_datetime.apply(lambda t: t.month)\n    \n    # Hour of pickup date. We thinks there should be busy time. eg) Commute time.\n    df[\"hour\"] = df.pickup_datetime.apply(lambda t: t.hour)\n    \n    # Weekday of pickup date. eg) Weekend may be busy.\n    df[\"weekday\"] = df.pickup_datetime.apply(lambda t: t.weekday())\n    return df\n\ntrain_df = clean(train_df)\ntrain_df = process_df(train_df)\ntrain_df.head()","a50f070d":"# Modified https:\/\/gist.github.com\/stared\/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\nclass PlotLosses(Callback):\n    def on_train_begin(self, logs={}):\n        self.i = 0\n        self.x = []\n        self.losses = []\n        self.val_losses = []\n\n        self.acc = []\n        self.val_acc = []\n\n        self.fig = plt.figure()\n        \n        self.logs = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        self.logs.append(logs)\n        self.x.append(self.i)\n        self.losses.append(logs.get('loss'))\n        self.val_losses.append(logs.get('val_loss'))\n        self.acc.append(logs.get('acc'))\n        self.val_acc.append(logs.get('val_acc'))\n        \n        self.i += 1\n        \n        clear_output(wait=True)\n        plt.subplot(1, 2, 2)\n        plt.plot(self.x, self.losses, label=\"loss\")\n        plt.plot(self.x, self.val_losses, label=\"val_loss\")\n        plt.legend()\n        plt.subplot(1, 2, 1)\n        plt.plot(self.x, self.acc, label=\"acc\")\n        plt.plot(self.x, self.val_acc, label=\"val_acc\")\n        plt.legend()\n        \n        plt.show();\n        \nplot_losses = PlotLosses()","86b575b9":"# Make a simple 4 layer NN.\n#features = [\"sq_distance\", \"month\", \"hour\", \"passenger_count\", \"weekday\"]\nfeatures = [\"sq_distance\"]\n\n\nmodel = Sequential()\nmodel.add(Dense(units=32, input_dim=len(features)))\nmodel.add(Dense(units=24, activation='relu'))\nmodel.add(Dense(units=16, activation='relu'))\nmodel.add(Dense(units=1, activation='linear'))","a63d9fdc":"model.compile(loss=\"mse\",  optimizer=\"adam\",  metrics=[\"accuracy\"])","13fe6254":"x_train = train_df[features].values\ny_train = train_df.fare_amount.values\n\ntrain_df[features].head()","b435991a":"# Training\nmodel.fit(x_train, y_train, epochs=200, batch_size=512, validation_split=0.1, callbacks=[plot_losses], verbose=0)","02c728dc":"# Load and process the test data\ntest_df =  pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"pickup_datetime\"])\ntest_df = process_df(test_df)\nx_test = test_df[features].values\nkey = test_df[\"key\"].values","72496a9a":"# Prediction\ntarget = np.round(model.predict(x_test, batch_size=32))","a679ded3":"submission = pd.DataFrame(\n    {'key': key, 'fare_amount': target[:, 0]},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission.csv', index = False)\nprint(os.listdir('.'))","e4024df4":"### Create Keras model","7b5ad464":"## Keras Starter Kernel for the New York City Taxi Fare Prediction Playground Competition\n\nMy focus here is making very simple end-to-end notebook even though it doesn't perform well.\nYou can use this notebook as starter and iterate very quickly various ideas you may have.\n\n\nI'm Kaggle beginer so I'd apprecaite your feedback :)","89963465":"## Ideas for Improvement\n- Training with all the data\n- Clean up data more.\n- Use geo region instead of distance\n- Tweak model size and hyper parameters","1f5464cc":"### Load train data\nWe don't load all data here because it's too big when iterating.\nWe parse date string as date object so that we can process them easily."}}