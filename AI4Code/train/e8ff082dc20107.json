{"cell_type":{"4a307658":"code","0404cc4a":"code","180822f4":"code","452aabb8":"code","5b1c30e6":"code","9fc934e9":"code","fb70eaae":"code","0cb6d6c8":"code","fcf425cc":"code","a3e47331":"code","a1446609":"code","e8399739":"code","b7943725":"code","4ca5bd7e":"code","ce197b98":"code","6bb63879":"code","94e2c9ee":"code","5098d444":"code","99c5299d":"code","5123f962":"code","b378c0a9":"markdown","7e8e09b3":"markdown","ce2afdb5":"markdown","9d69a599":"markdown","829ec394":"markdown","21a2bacb":"markdown","dbf83f90":"markdown","7d0c0db6":"markdown","a582dece":"markdown","fbb0d82a":"markdown","3d05955a":"markdown","ecc85d2d":"markdown","aed6fd09":"markdown"},"source":{"4a307658":"# \u041f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\ndata = pd.read_csv('..\/input\/advanced-dls-spring-2021\/train.csv')\ndata.head(10)","0404cc4a":"data = data.replace(' ', np.nan)#\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 nan\ndata = data.replace('?', np.nan)#\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 nan\ndata['TotalSpent'] = data['TotalSpent'].astype(float)#\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0441 object \u043d\u0430 float\ndata.info()\ndata.isnull().sum()","180822f4":"#\u0423\u0434\u0430\u043b\u044f\u0435\u043c NaN\u044b\ndata = data.dropna()\ndata.isnull().sum()","452aabb8":"# \u0414\u043b\u044f  \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'\ncategorical_indices=[data.columns.get_loc(c) for c in cat_cols if c in data]\ncategorical_indices","5b1c30e6":"fig = plt.figure(figsize =(15, 15))\nplt.subplot(2, 3, 1)\nplt.title('Histogram of ClientPeriod')\nplt.xlabel('ClientPeriod')\nplt.ylabel('quantity')\nplt.hist(data['ClientPeriod'], color = 'blue', edgecolor = 'black',\n         bins = 72)\nplt.subplot(2, 3, 3)\nplt.title('Histogram of Monthly Spending')\nplt.xlabel('MonthlySpending')\nplt.ylabel('quantity')\nplt.hist(data['MonthlySpending'], color = 'red', edgecolor = 'black',\n         bins = 20)\nplt.subplot(2, 3, 5)\nplt.title('Histogram of TotalSpent')\nplt.xlabel('TotalSpent')\nplt.ylabel('quantity')\nplt.hist(data['TotalSpent'], color = 'green', edgecolor = 'black',\n         bins = 10)\nplt.show()","9fc934e9":"fig = plt.figure(figsize =(7, 7))\nfor i in range(len(num_cols)):\n  plt.subplot(1, 3, i+1)\n  plt.boxplot(data[num_cols[i]], notch=True, patch_artist=True )\n  plt.xlabel(num_cols[i])\n  plt.ylabel('quantity')","fb70eaae":"fig = plt.figure(figsize =(10, 7))\nfor i in range(len(num_cols)):\n  plt.subplot(1, 3, i+1)\n  sns.boxplot(data=data[num_cols[i]])\n  plt.xlabel(num_cols[i])\n  plt.ylabel('quantity')","0cb6d6c8":"fig = plt.figure(figsize =(20, 20))\nfor i in range(len(cat_cols)):\n  data_i=data[cat_cols[i]].value_counts()\n  plt.subplot(4,4,i+1)\n  plt.pie(data_i, labels = data_i.index, autopct='%1.1f%%')\n  plt.axis('equal')\n  plt.title(cat_cols[i])\n  plt.legend()","fcf425cc":"y_count=data['Churn'].value_counts()\nplt.pie(y_count, labels = y_count.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f Churn')\nplt.legend()\nplt.show()","a3e47331":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import roc_auc_score, make_scorer,roc_curve\nfrom sklearn.model_selection import cross_validate","a1446609":"numeric_data = data[num_cols]#\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncategorial_data = data[cat_cols]#\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndummy_features = pd.get_dummies(categorial_data)#one-hot-encoding\nX = pd.concat([numeric_data, dummy_features], axis=1)#\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 one-hot-encoding\nX_origin = data.iloc[:, :-1]#\u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0440\u0438\u0433\u0430\u043d\u0430\u043b\u044c\u043d\u0430\u044f\ny = data[target_col]#\u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nX_train, X_test, y_train, y_test = train_test_split(X.values, y.values, \n                                                    train_size=0.8,\n                                                    random_state=42)#\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 test\/train\n\ncls = make_pipeline(StandardScaler(),LogisticRegression())#\u043c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \nparam_grid = {'logisticregression__C': np.array([100, 10, 1, 0.1, 0.01, 0.001])}\nsearch = GridSearchCV(cls, param_grid, n_jobs=-1, cv=5, refit=True, scoring='roc_auc')\nsearch.fit(X_train, y_train)\nprint(search.best_params_)\nprint(search.best_score_)\nprint(search.best_estimator_)","e8399739":"!pip install catboost\nimport catboost \nfrom catboost import CatBoostClassifier","b7943725":"X_train_origin, X_test_origin, y_train, y_test= train_test_split(X_origin.values, y.values, \n                                                       train_size=0.8, \n                                                       random_state=42)#\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 test & train\nboosting_model =catboost.CatBoostClassifier(cat_features=categorical_indices, \n                                            random_seed=42, verbose=False)\ngrid={'learning_rate': np.arange(0.01, 0.2, 0.01),\n      'depth': [2, 4, 6, 8, 10],\n      'l2_leaf_reg': [1, 3, 5, 7, 9],\n      'iterations' : [100, 200, 300]} #\u0421\u0435\u0442\u043a\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \ngrid_search_result = boosting_model.grid_search(grid, \n                           X_train_origin, \n                           y_train, \n                           plot=True, refit=True);#\u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 learning_rate, depth, l2_leaf_reg, iterations(\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432)","4ca5bd7e":"grid_search_result['params']","ce197b98":"best_boosting_model = catboost.CatBoostClassifier(iterations = 200, learning_rate = 0.1, depth = 2, l2_leaf_reg = 9, cat_features=categorical_indices)\nbest_boosting_model.fit(X_train_origin, y_train)\ny_train_predicted = best_boosting_model.predict_proba(X_train_origin)[:, 1]\ny_test_predicted = best_boosting_model.predict_proba(X_test_origin)[:, 1]","6bb63879":"print(\"\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e: \", 'train auc = ', roc_auc_score(y_train, y_train_predicted), ',',\n      'test auc = ', roc_auc_score(y_test, y_test_predicted))\nprint('\u041f\u0440\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445:', grid_search_result['params'])","94e2c9ee":"best_model =best_boosting_model\nbest_model.fit(X_train_origin, y_train)\ny_train_predicted = best_model.predict_proba(X_train_origin)[:, 1]\ny_test_predicted = best_model.predict_proba(X_test_origin)[:, 1]\n","5098d444":"train_auc = roc_auc_score(y_train, y_train_predicted)\ntest_auc = roc_auc_score(y_test, y_test_predicted)\n\nplt.figure(figsize=(10,7))\nplt.plot(*roc_curve(y_train, y_train_predicted)[:2], label='train AUC={:.4f}'.format(train_auc))\nplt.plot(*roc_curve(y_test, y_test_predicted)[:2], label='test AUC={:.4f}'.format(test_auc))\nlegend_box = plt.legend(fontsize='large', framealpha=1).get_frame()\nplt.plot(np.linspace(0,1,100), np.linspace(0,1,100))\nplt.show()","99c5299d":"X_test = pd.read_csv('..\/input\/advanced-dls-spring-2021\/test.csv')\n\n#X_test = X_test.replace(' ', float('0'))\nX_test = X_test.replace(' ', float('0'))#\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 0\nX_test = X_test.replace('?', float('0'))#\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 0\nX_test['TotalSpent'] = X_test['TotalSpent'].astype(float)#\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0441 object \u043d\u0430 float\n","5123f962":"submission = pd.read_csv('..\/input\/advanced-dls-spring-2021\/submission.csv')\n\nsubmission[target_col] = best_model.predict_proba(X_test)[:, 1]\nsubmission.to_csv('.\/my_submission.csv', index=False)","b378c0a9":"boxplot in sns","7e8e09b3":"\u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c  \u0438\u043b\u0438 \u043a\u0440\u0443\u0433\u043e\u0432\u044b\u0435 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b plt.pie(...) ","ce2afdb5":"1. \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 boxplot \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\n\u0412\u0431\u0440\u043e\u0441\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u043e. \n","9d69a599":"**\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a AUC**","829ec394":"Boxplot","21a2bacb":"**\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0435\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u041a\u0430\u0433\u043b\u0430**","dbf83f90":"\u041b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e 0.8447388460416845 \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0441=10","7d0c0db6":"**\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:**","a582dece":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \n\n1) \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043a \u043d\u0438\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c LogisticRegression. \u0422.\u0435. \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0439\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e one-hot-encoding'\u0430. \n\n2) \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 C \u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 ROC-AUC. \n\n\u0422.\u043a. \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0442\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 LogisticRegression \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u0438\u043d Pipeline \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e make_pipeline. \u041f\u043e\u0442\u043e\u043c pipeline \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 GridSearchCV.","fbb0d82a":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 \n\n\u0421\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433. \u0427\u0430\u0441\u0442\u043e \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0434\u0430\u0441\u0442 \u0432\u0430\u043c 80% \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430 0% \u0443\u0441\u0438\u043b\u0438\u0439.\n\n\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c catboost, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043d\u0435 \u043d\u0430\u0434\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. catboost \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e \u0441\u0430\u043c (\u0432 .fit() \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c cat_features=cat_cols). \u0410 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.\n\n1) \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 train\/valid. \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c catboost c\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.\n\n2) \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u0430\u043d\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0438 learning_rate'\u0430 \u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 ROC-AUC \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e. ","3d05955a":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b, \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e 3:1, \u043e\u0434\u043d\u0430\u043a\u043e \u044d\u0442\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u043b\u043e \u043e\u0436\u0438\u0434\u0430\u0442\u044c: \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e 1\/4 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0443\u0441\u043b\u0443\u0433. ","ecc85d2d":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\n","aed6fd09":"**2. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u041e\u0442\u0442\u043e\u043a\u0430.**"}}