{"cell_type":{"49b43ff9":"code","31cf43b9":"code","f18d2119":"code","be766084":"code","c163e463":"code","c1e2921b":"code","b456aa14":"code","b480c6a8":"code","c68be372":"code","b45aa909":"code","1c7a70de":"code","55a8be07":"code","d33a3590":"code","afbe807c":"code","9253a51d":"code","a5221a18":"code","2475aa4c":"code","3c8a3fbc":"code","451cc5a5":"code","1b5d5fb1":"code","4dfc3dec":"code","592b9880":"code","3e1fab26":"code","82173b4c":"code","6d83e053":"code","fdbbc4b1":"code","aee97b1e":"code","e8f29075":"code","890ee09e":"code","9b558604":"code","b97e9ede":"code","5d98188b":"code","514ee3c7":"code","efd9a69d":"code","832f741e":"code","35211502":"code","23a3889a":"code","8ed947a2":"code","68340ad5":"code","1a914ff6":"code","43193ad9":"code","bb0a66f2":"code","641a285b":"code","4524d6d3":"code","07add914":"code","5c19051b":"code","2a998c22":"code","665ebdd9":"code","8290a3b3":"code","307a1bc2":"markdown","dc2d08fa":"markdown","bc5e2fdb":"markdown","d5a441c3":"markdown","3a21e86f":"markdown","186ab933":"markdown","a75d1ba0":"markdown","5faa0181":"markdown","1d5905e8":"markdown","a70369f0":"markdown","af91c9a1":"markdown","9e5583ff":"markdown","f0a8af5e":"markdown","015cb2ae":"markdown","bc6844f7":"markdown","391d6e65":"markdown","b6b6b514":"markdown"},"source":{"49b43ff9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom pathlib import Path\nimport os\nimport glob\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.io.json import json_normalize\nimport json\n\nimport pprint\nimport string\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# for dirname, _, filenames in os.walk('C:\/Users\/trivikram.cheedella\/OneDrive - JD Power\/Data Science Data\/CORD-19-research-challenge'):\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        # print(os.path.join(dirname, filename))\n        pass\n\n# Any results you write to the current directory are saved as output.","31cf43b9":"input = Path('\/kaggle\/input\/CORD-19-research-challenge')\noutput = Path('\/kaggle\/output')\nbiorxiv_medrxiv = Path('\/kaggle\/input\/CORD-19-research-challenge\/biorxiv_medrxiv\/biorxiv_medrxiv')","f18d2119":"df_all_sources_metadata = pd.read_csv(input \/ 'metadata.csv')","be766084":"print(df_all_sources_metadata.shape)\ndf_all_sources_metadata.info()","c163e463":"df_all_sources_metadata.head(3)","c1e2921b":"pd.pivot_table(df_all_sources_metadata, \n               index='full_text_file', \n               values=['cord_uid','sha', 'source_x', 'has_pdf_parse', 'has_pmc_xml_parse'], \n               aggfunc={'cord_uid': 'count','sha': 'count', 'source_x': 'count', 'has_pdf_parse': np.sum, 'has_pmc_xml_parse': np.sum}, \n               margins=True)","b456aa14":"%%time\nall_json = glob.glob(f'{biorxiv_medrxiv}\/**\/*.json', recursive=True)\nlen(all_json)","b480c6a8":"class FileReader:\n    def __init__(self, file_path):\n        with open(file_path) as file:\n            content = json.load(file)\n            self.paper_id = content['paper_id']\n            self.abstract = []\n            self.body_text = []\n            # Abstract\n            for entry in content['abstract']:\n                self.abstract.append(entry['text'])\n            # Body text\n            for entry in content['body_text']:\n                self.body_text.append(entry['text'])\n            self.abstract = '\\n'.join(self.abstract)\n            self.body_text = '\\n'.join(self.body_text)\n            # Extend Here\n            #\n            #\n    def __repr__(self):\n        return f'{self.paper_id}: {self.abstract[:200]}... {self.body_text[:200]}...'\nfirst_row = FileReader(all_json[0])\nprint(first_row)","c68be372":"%%time\ndict_ = {'paper_id': [], 'abstract': [], 'body_text': []}\nfor idx, entry in enumerate(all_json):\n    if idx % (len(all_json) \/\/ 10) == 0:\n        print(f'Processing index: {idx} of {len(all_json)}')\n    content = FileReader(entry)\n    dict_['paper_id'].append(content.paper_id)\n    dict_['abstract'].append(content.abstract)\n    dict_['body_text'].append(content.body_text)\ndf_covid = pd.DataFrame(dict_, columns=['paper_id', 'abstract', 'body_text'])\ndf_covid.head()","b45aa909":"dict_ = None","1c7a70de":"%%time\ndf_covid['abstract_word_count'] = df_covid['abstract'].apply(lambda x: len(x.strip().split()))\ndf_covid['body_word_count'] = df_covid['body_text'].apply(lambda x: len(x.strip().split()))\ndf_covid.head()","55a8be07":"df_covid.describe(include='all').T","d33a3590":"df_covid.drop_duplicates(['body_text'], inplace=True)\ndf_covid.describe(include='all').T","afbe807c":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.probability import FreqDist\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nfrom wordcloud import STOPWORDS","9253a51d":"lemmatizer = WordNetLemmatizer()\n\nprint(\"Number of stopwrods from STOPWORDS: \", len(STOPWORDS))\nprint(\"Number of stopwrods from stopwords.words('english'): \", len(stopwords.words('english')))\nother_stopwords = ['q', 'license', 'preprint', 'copyright', 'http', 'doi', 'preprint', 'copyright', \n                   'peer', 'reviewed', 'org', 'https', 'et', 'al', 'author', 'figure', 'rights', \n                   'reserved', 'permission', 'used', 'using', 'biorxiv', 'fig', 'fig.', 'al.', \n                   'di', 'la', 'il', 'del', 'le', 'della', 'dei', 'delle', 'una', 'da',  'dell',  \n                   'non', 'si', 'cc']\n\ncustom_stopwords = []\ncustom_stopwords = list(set(stopwords.words('english') + list(STOPWORDS))) + other_stopwords\n\nprint(\"Number of stopwrods from custom_stopwords: \", len(custom_stopwords))\nprint(custom_stopwords[-25:])","a5221a18":"def clean_the_text(text):\n        text = re.sub('[^a-zA-Z0-9-]', ' ', text)\n        tokens = word_tokenize(text)\n        # remove_punc = [word for word in tokens if word not in string.punctuation]\n        remove_stopwords = [word.lower() for word in tokens if word.lower() not in custom_stopwords]\n        more_than_three = [w for w in remove_stopwords if len(w)>3]\n        lem = [lemmatizer.lemmatize(w) for w in more_than_three]\n        return ' '.join(lem)\n","2475aa4c":"df_covid_for_nlp = df_covid.copy()\ndf_covid = None","3c8a3fbc":"%%time\ndf_covid_for_nlp['cleaned_text'] = df_covid_for_nlp['body_text'].apply(lambda x: clean_the_text(x))","451cc5a5":"df_covid_for_nlp['cleaned_text'].head()","1b5d5fb1":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import LatentDirichletAllocation","4dfc3dec":"%%time \n\ntfidf_vect = TfidfVectorizer(max_df=0.8, min_df=2, stop_words='english')\ndoc_term_matrix_Tfidf = tfidf_vect.fit_transform(df_covid_for_nlp['cleaned_text'].values.astype('U'))","592b9880":"doc_term_matrix_Tfidf","3e1fab26":"%%time\n# Define Search Param\nsearch_params = {'n_components': [10, 15, 20, 25, 30, 50], 'learning_decay': [.5, .7, .9]}\n\n# Init the Model\nlda = LatentDirichletAllocation()\n\n# Init Grid Search Class\ngrid_search_model = GridSearchCV(lda, param_grid=search_params, n_jobs=-1)\n\n# Do the Grid Search\ngrid_search_model.fit(doc_term_matrix_Tfidf)","82173b4c":"# Best Model\nbest_lda_model = grid_search_model.best_estimator_\n\n# Model Parameters\nprint(\"Best Model's Params: \", grid_search_model.best_params_)\n\n# Log Likelihood Score\nprint(\"Best Log Likelihood Score: \", grid_search_model.best_score_)\n\n# Perplexity\nprint(\"Model Perplexity: \", best_lda_model.perplexity(doc_term_matrix_Tfidf))","6d83e053":"df_results = pd.DataFrame(grid_search_model.cv_results_)\n\ncurrent_palette = sns.color_palette(\"Set2\", 3)\n\nplt.figure(figsize=(12,8))\n\nsns.lineplot(data=df_results,\n             x='param_n_components',\n             y='mean_test_score',\n             hue='param_learning_decay',\n             palette=current_palette,\n             marker='o')\n\nplt.show()","fdbbc4b1":"import random\n\nfor i in range(10):\n    random_id = random.randint(0,len(tfidf_vect.get_feature_names()))\n    print(tfidf_vect.get_feature_names()[random_id])","aee97b1e":"first_topic = best_lda_model.components_[0]","e8f29075":"top_topic_words = first_topic.argsort()[-10:]\ntop_topic_words","890ee09e":"for i in top_topic_words:\n    print(tfidf_vect.get_feature_names()[i])","9b558604":"for i,topic in enumerate(best_lda_model.components_):\n    print(f'Top 10 words for topic #{i}:')\n    print([tfidf_vect.get_feature_names()[i] for i in topic.argsort()[-10:]])\n    print('\\n')","b97e9ede":"topic_values_tfidf = best_lda_model.transform(doc_term_matrix_Tfidf)\ntopic_values_tfidf.shape","5d98188b":"topicnames = [\"Topic\" + str(i) for i in range(best_lda_model.n_components)]\n\nrows = df_covid_for_nlp['paper_id']","514ee3c7":"df_topic_values_tfidf = pd.DataFrame(topic_values_tfidf, columns=topicnames, index=rows)","efd9a69d":"df_topic_values_tfidf['topic_number_tfidf'] = topic_values_tfidf.argmax(axis=1)","832f741e":"# Styling\ndef color_green(val):\n    color = 'green' if val > .1 else 'black'\n    return 'color: {col}'.format(col=color)\n\ndef make_bold(val):\n    weight = 700 if val > .1 else 400\n    return 'font-weight: {weight}'.format(weight=weight)","35211502":"df_topic_values_tfidf.head(10).style.applymap(color_green).applymap(make_bold)","23a3889a":"dict_topic = {'topic_number_tfidf': [], 'topic_words_tfidf': []}\n\nfor i,topic in enumerate(best_lda_model.components_):\n    dict_topic['topic_number_tfidf'].append(i)\n    dict_topic['topic_words_tfidf'].append([tfidf_vect.get_feature_names()[i] for i in topic.argsort()[-10:]])\n\ndf_covid_topics_tfidf = pd.DataFrame(dict_topic, columns=['topic_number_tfidf', 'topic_words_tfidf'])\ndf_covid_topics_tfidf.head(10)","8ed947a2":"import pyLDAvis\nimport pyLDAvis.sklearn","68340ad5":"%%time\n\npyLDAvis.enable_notebook()\npanel = pyLDAvis.sklearn.prepare(best_lda_model, doc_term_matrix_Tfidf, tfidf_vect, mds='tsne', sort_topics=False)\npanel","1a914ff6":"df_covid_for_nlp['topic_number_tfidf'] = topic_values_tfidf.argmax(axis=1)","43193ad9":"df_covid_for_nlp.head(3)","bb0a66f2":"df_covid_for_nlp['topic_number_tfidf'].value_counts()","641a285b":"df_covid_for_nlp = df_covid_for_nlp.merge(df_covid_topics_tfidf,\n                                          how='left', \n                                          left_on='topic_number_tfidf', \n                                          right_on='topic_number_tfidf')","4524d6d3":"df_covid_for_nlp.head(3)","07add914":"df_covid_for_nlp.columns","5c19051b":"df_all_sources_metadata_with_topics = df_all_sources_metadata.copy()\ndf_all_sources_metadata_with_topics.shape","2a998c22":"df_all_sources_metadata_with_topics = df_all_sources_metadata.merge(\n    df_covid_for_nlp[['paper_id', 'abstract_word_count', 'body_word_count', 'cleaned_text', 'topic_number_tfidf', 'topic_words_tfidf']], \n    how='left', \n    left_on='sha', \n    right_on='paper_id')","665ebdd9":"print(df_all_sources_metadata_with_topics.columns)\nprint(df_all_sources_metadata_with_topics.shape)\ndf_all_sources_metadata_with_topics.head()","8290a3b3":"# We can export the data for further analysis by executing the following code.\n# df_all_sources_metadata_with_topics.to_csv(output \/ 'df_all_sources_metadata_with_topics_biorxiv.csv', index = False)","307a1bc2":"## Visualization using pyLDAvis","dc2d08fa":"### Print the top 10 words from the first topic","bc5e2fdb":"## Clean up the text","d5a441c3":"## ReadIn the JSON Files","3a21e86f":"### Getting 10 random features","186ab933":"### Merge the Topic numbers and top 10 words of each topic to the Meta Data for further analysis","a75d1ba0":"### Convert the text data to Term frequency - Inverse Document frequency","5faa0181":"### Find the most dominant topic in each document","1d5905e8":"### Create a dataframe for the 10 topics","a70369f0":"## Load the meta data file","af91c9a1":"The following code for reading in the JSON file is taken from the notebook <b>COVID EDA: Initial Exploration Tool<\/b> by <i><b>Ivan Ega Pratama<\/b><\/i>\n\nhttps:\/\/www.kaggle.com\/ivanegapratama\/covid-eda-initial-exploration-tool","9e5583ff":"### Print the top 10 words topic wise","f0a8af5e":"### Use GridSearchCV to find the best parameters for LDA","015cb2ae":"In the above visualization one has to make a note that the topic numbering starts from 1 while the sklearn LatentDirichletAllocation generates the topic starting with 0","bc6844f7":"## Topic Modeling with Latent Dirichlet Allocation","391d6e65":"The visualization is a learning from the following source\n\nhttps:\/\/www.machinelearningplus.com\/nlp\/topic-modeling-python-sklearn-examples\/","b6b6b514":"# Topic Modeling using Latent Dirichlet Allocation (LDA)"}}