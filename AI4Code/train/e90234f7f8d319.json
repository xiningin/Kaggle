{"cell_type":{"54e0f906":"code","c79d5fcf":"code","1d05a077":"code","2c1b9ef9":"code","27fc292a":"code","3bc140a3":"code","15874f48":"code","9b8856d5":"code","73698fb0":"code","be6e9bdc":"code","97c81436":"code","07721b0a":"code","71b0809a":"code","ed217974":"code","0fc399ad":"code","949a8daa":"code","3870d0dc":"code","16969aa4":"code","14bef9e8":"code","4ec34c27":"code","41cef212":"code","48a2a604":"code","0856be51":"code","1ce9c5ff":"code","d5543ebc":"code","6f6be87e":"code","d1a4a458":"code","9f7243f7":"code","8f10bdd5":"code","3a3afc46":"code","67b3011d":"code","911e2229":"code","dd11daf8":"code","e5c60ecf":"code","17ae48b6":"code","d4f827d4":"code","4e5bb560":"code","2ceac4e6":"code","32e2b301":"code","bdc03c39":"code","cc4187fd":"code","ca363d15":"code","dbf2b4b2":"code","5e5d1e77":"code","a6f6d982":"code","ca95ede6":"code","0063fed4":"code","ec2978c7":"code","69abf699":"code","2829148a":"code","506a6369":"code","19301f14":"code","f0dbf0f4":"code","267d3955":"code","9920167d":"code","81f8d6e2":"code","fadc1921":"code","58d32e88":"code","f10df89b":"code","73719b8c":"code","5327f4e5":"code","5efc3e25":"code","41908b3c":"code","91876bee":"code","22e4bddc":"code","cb4ade94":"code","91532afc":"code","c9642c3e":"code","768d78ba":"code","4de860ec":"code","aaf818a7":"code","d85ad5b1":"code","a16ff164":"code","2e49c49b":"code","8da5e147":"code","bb2e0a61":"code","a8f31991":"code","5ca7e9d2":"code","58ef67c1":"code","aeb1a2d1":"code","666dc024":"code","e788ee8e":"code","83b02d8b":"code","de5d433e":"code","4e9b5aa1":"code","0cd1b067":"code","51188d76":"code","8d50230c":"code","669899a3":"code","840889f9":"code","c71c46cc":"code","cb28c2f5":"code","469d2bac":"code","9bac1510":"code","3256f4aa":"code","ecd8f6c6":"code","09ba76d1":"code","186f467c":"code","d37acd8f":"code","ecfba143":"code","53c30006":"code","a4f8fe19":"code","9e589b34":"code","6a04fa93":"code","127e096d":"code","6729dcc4":"code","40828644":"code","1e5b546e":"code","090cdb20":"code","ee2f510d":"code","a98bb68c":"code","7709695f":"code","5f180481":"code","b32c7dbf":"code","04537b85":"code","e95b2261":"code","5699bd91":"code","c1145b4c":"code","36082973":"code","03572572":"code","f7dab64c":"code","2478731f":"code","912d5439":"code","92c918cf":"code","b983176f":"code","f0f95c31":"code","4fe5a795":"code","2dcb71ef":"code","1ae0a9bb":"code","625acfa7":"code","e736a3a9":"code","a4756399":"code","dbc1b4ff":"code","d7899037":"code","f3025ef4":"code","a8d2fe0e":"code","bf301d1d":"code","a2609269":"code","af8b731c":"code","72b1540f":"code","7dad0808":"code","e0209fe1":"code","b6725d33":"code","1e0465a1":"code","ea3c42db":"code","fe165091":"code","5eca970e":"code","4f9218d3":"code","53de7fe1":"code","9a1e9a28":"code","02457d75":"code","0187fa1f":"code","01c392ec":"code","cc1a7fe5":"code","5c4e01b4":"code","70af5381":"code","b0bf5c6c":"code","9b795792":"code","a365c23c":"code","686c7f8f":"code","711ba815":"code","f1f0b201":"code","bd438489":"code","6fff0322":"code","062f5422":"code","a6615575":"code","d56c9e45":"code","480a2540":"code","2f8c16db":"code","ab8a4149":"code","1e582b76":"code","c924f4c4":"code","73a4eec1":"code","917417c3":"code","9508b5a3":"code","698e8ab6":"code","76ae0b7c":"code","f6361166":"code","91ee01cf":"code","8ecdee6f":"markdown","d5b7a061":"markdown","f2ad5324":"markdown","c49953fe":"markdown","fe3dfadd":"markdown","39939ee7":"markdown","34d51e7e":"markdown","53de30f4":"markdown","f340667a":"markdown","d896bd1b":"markdown","4e494db3":"markdown","a1353203":"markdown","800ed8a1":"markdown","a4eb5174":"markdown","8176b6d9":"markdown","053d691b":"markdown","cb171627":"markdown","bad04fef":"markdown","b74f7730":"markdown","f96ca70d":"markdown","256a3874":"markdown","a1cbd5c0":"markdown","1e298d82":"markdown","9260019c":"markdown","2dd83408":"markdown","705d3b59":"markdown","b9615002":"markdown","44365363":"markdown"},"source":{"54e0f906":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nfrom datetime import datetime\nimport re\n\nfrom sklearn import metrics","c79d5fcf":"pd.set_option('display.max_rows',500)\npd.set_option('display.max_columns',500)\npd.set_option('display.width',1000)","1d05a077":"data_dictionary=pd.read_csv('..\/input\/lt-vehicle-loan-default-prediction\/data_dictionary.csv')\ndata_dictionary","2c1b9ef9":"df=pd.read_csv('..\/input\/lt-vehicle-loan-default-prediction\/train.csv')\ndf.head()","27fc292a":"df.dtypes","3bc140a3":"df.nunique()","15874f48":"df.describe()","9b8856d5":"import missingno","73698fb0":"missingno.matrix(df,figsize=(40,15))","be6e9bdc":"df.nunique()","97c81436":"df.shape","07721b0a":"plt.figure(figsize=(30,20))\nsns.heatmap(df.corr())\nplt.show()","71b0809a":"plt.figure(figsize=(40,30))\nsns.heatmap(df.corr(),linewidths=0.05,annot=True)\nplt.show()","ed217974":"df['disbursed_amount'].corr(df['ltv'])","0fc399ad":"np.corrcoef(df['disbursed_amount'],df['ltv'])","949a8daa":"df.corr()","3870d0dc":"df.drop(['MobileNo_Avl_Flag','UniqueID'],axis=1,inplace=True)","16969aa4":"df1=df[df['loan_default']==1]\ndf0=df[df['loan_default']==0]","14bef9e8":"sns.boxplot(df['disbursed_amount'])","4ec34c27":"plt.figure(figsize=(10,4))\nsns.distplot(df0['disbursed_amount'],kde=False)\nsns.distplot(df1['disbursed_amount'],kde=False)\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","41cef212":"sns.distplot(df['disbursed_amount'])","48a2a604":"sns.distplot(df['disbursed_amount'].apply(lambda x:np.log(x)))","0856be51":"df['disbursed_amount']=df['disbursed_amount'].apply(lambda x:np.log(x))","1ce9c5ff":"df","d5543ebc":"plt.figure(figsize=(10,4))\nsns.distplot(df0['asset_cost'],kde=False)\nsns.distplot(df1['asset_cost'],kde=False)\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","6f6be87e":"sns.distplot(df['asset_cost'])","d1a4a458":"sns.distplot(df['asset_cost'].apply(lambda x:np.log(x)))","9f7243f7":"df['asset_cost']=df['asset_cost'].apply(lambda x:np.log(x))","8f10bdd5":" sns.boxplot(df['ltv'])","3a3afc46":"sns.distplot(df['ltv'])","67b3011d":"plt.figure(figsize=(10,4))\nsns.distplot(df0['ltv'],kde=False)\nsns.distplot(df1['ltv'],kde=False)\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","911e2229":"df['supplier_id'].value_counts()","dd11daf8":"supplier_loan=pd.crosstab(df['supplier_id'],df['loan_default'])","e5c60ecf":"plt.figure(figsize=(30,5))\nsns.countplot(df['supplier_id'])","17ae48b6":"pd.crosstab(df['supplier_id'],df['loan_default']).plot(kind='bar',figsize=(30,5))","d4f827d4":"import  scipy.stats                     as  stats","4e5bb560":"chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(supplier_loan)\nprint('Chi Square Statistics',chi_sq)\nprint('p-value',p_value)\nprint('Degree of freedom',deg_freedom)\np_value","2ceac4e6":"df['branch_id'].value_counts()","32e2b301":"plt.figure(figsize=(30,5))\nsns.countplot(df['branch_id'])\nplt.show()","bdc03c39":"pd.crosstab(df['branch_id'],df['loan_default'])","cc4187fd":"chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(supplier_loan)\nprint('Chi Square Statistics',chi_sq)\nprint('p-value',p_value)\nprint('Degree of freedom',deg_freedom)","ca363d15":"df['manufacturer_id'].value_counts()","dbf2b4b2":"plt.figure(figsize=(30,7))\nsns.countplot(df0['manufacturer_id'],color='blue')\nsns.countplot(df1['manufacturer_id'],color='orange')\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","5e5d1e77":"plt.figure(figsize=(30,7))\nsns.countplot(x='manufacturer_id',hue='loan_default',data=df)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","a6f6d982":"manu_loan=pd.crosstab(df['manufacturer_id'],df['loan_default'])\nprint(manu_loan)","ca95ede6":"chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(manu_loan)\nprint('Chi Square Statistics',chi_sq)\nprint('p-value',p_value)\nprint('Degree of freedom',deg_freedom)","0063fed4":"pres_date='01-01-20' # Present date\n\ndef days_between(d1,d2):\n    d1=datetime.strptime(d1,'%d-%m-%y')\n    d2=datetime.strptime(d2,'%d-%m-%y')\n    return abs((d2-d1).days)","ec2978c7":"df['Date.of.Birth']=df['Date.of.Birth'].apply(lambda x:days_between(x,pres_date)\/365) # converting date of birth in years\ndf['DisbursalDate']=df['DisbursalDate'].apply(lambda x:days_between(x,pres_date)\/365) # converting disbursed date to the present date","69abf699":"df.head()","2829148a":"df[df['loan_default']==0]['DisbursalDate']","506a6369":"plt.figure(figsize=(40,20))\nsns.distplot(df[df['loan_default']==0]['DisbursalDate'],color='b')\nsns.distplot(df[df['loan_default']==1]['DisbursalDate'],color='r')\nplt.legend(labels=['Not-Defaulted','Defaulted'],prop={'size': 25})\nplt.show()","19301f14":"plt.figure(figsize=(30,20))\nsns.distplot(df[df['loan_default']==0]['Date.of.Birth'],color='b',kde=True)\nsns.distplot(df[df['loan_default']==1]['Date.of.Birth'],color='r',kde=True)\nplt.legend(labels=['Not-Defaulted','Defaulted'],prop={'size': 25})\nplt.show()","f0dbf0f4":"df['Employment.Type'].value_counts()","267d3955":"df['Employment.Type']=df['Employment.Type'].fillna('unknown')","9920167d":"sns.countplot(y='Employment.Type',data=df,hue='loan_default')\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","81f8d6e2":"ct=pd.crosstab(df['Employment.Type'], df['loan_default'])\nct.plot.bar(stacked=True,figsize=(12,5))\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","fadc1921":"df['Employment.Type'].value_counts().plot(kind='bar')","58d32e88":"df['Employment.Type'].value_counts(normalize=True)","f10df89b":"emp_loan=pd.crosstab(df['Employment.Type'],df['loan_default'])\nprint(emp_loan)","73719b8c":"chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(emp_loan)\nprint('Chi Square Statistics',chi_sq)\nprint('p-value',p_value)\nprint('Degree of freedom',deg_freedom)","5327f4e5":"plt.figure(figsize=(30,7))\nsns.countplot(x='State_ID',hue='loan_default',data=df)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","5efc3e25":"'''plt.figure(figsize=(7,20))\nsns.countplot(y='Employee_code_ID',hue='loan_default',data=df)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()'''","41908b3c":"df.loc[:,'Aadhar_flag':'Passport_flag']","91876bee":"temp=df.loc[:,'Aadhar_flag':'Passport_flag'].columns\nprint(temp)","22e4bddc":"df['Aadhar_flag']+df['PAN_flag']+df['VoterID_flag']+df['Driving_flag']+df['Passport_flag']","cb4ade94":"df['Flag']=df['Aadhar_flag'].astype('object')+df['PAN_flag'].astype('object')+df['VoterID_flag'].astype('object')+df['Driving_flag'].astype('object')+df['Passport_flag'].astype('object')","91532afc":"df['Flag'].value_counts()","c9642c3e":"df['Flag']=df['Flag'].astype('int32')","768d78ba":"sns.countplot(x='Flag',hue='loan_default',data=df)","4de860ec":"for i in ['State_ID', 'Employee_code_ID','Aadhar_flag', 'PAN_flag', 'VoterID_flag', 'Driving_flag', 'Passport_flag']:\n    ct=pd.crosstab(df[i], df['loan_default'])\n    ct.plot.bar(stacked=True,figsize=(12,5))\n    plt.legend(labels=['Not Defaulted','Defaulted'])\n    plt.show()","aaf818a7":"for i in temp:\n    print('Feature:',i)\n    chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(pd.crosstab(df[i],df['loan_default']))\n    print('Chi Square Statistics',chi_sq)\n    print('p-value',p_value)\n    print('Degree of freedom',deg_freedom)\n    print()","d85ad5b1":"df=df.drop(['State_ID', 'Employee_code_ID','Aadhar_flag', 'PAN_flag', 'VoterID_flag', 'Driving_flag', 'Passport_flag'],axis=1)","a16ff164":"\ndf[['PERFORM_CNS.SCORE', 'PERFORM_CNS.SCORE.DESCRIPTION']]","2e49c49b":"plt.figure(figsize=(20,10))\nsns.countplot(y='PERFORM_CNS.SCORE.DESCRIPTION',hue='loan_default',data=df)\nplt.legend(labels=['Not Defalted','Defaulted'])\nplt.show()","8da5e147":"plt.figure(figsize=(30,5))\nsns.distplot(df['PERFORM_CNS.SCORE'])\nplt.show()","bb2e0a61":"def cns_score(score):\n    if score<100:\n        return 0\n    elif (score>=100) & (score<200):\n        return 1\n    elif (score>=200) & (score<300):\n        return 2\n    elif (score>=300) & (score<400):\n        return 3\n    elif (score>=400) & (score<500):\n        return 4\n    elif (score>=500) & (score<600):\n        return 5\n    elif (score>=600) & (score <700):\n        return 6\n    elif (score>=700) & (score <800):\n        return 7\n    elif (score>=800) & (score <900):\n        return 8\n    elif (score>=900) & (score <1000):\n        return 9\n    else:\n        return 10","a8f31991":"\n\ncns_score(1004)","5ca7e9d2":"df['PERFORM_CNS.SCORE'].map(lambda x:cns_score(x)).value_counts()","58ef67c1":"df['PERFORM_CNS.SCORE']=df['PERFORM_CNS.SCORE'].map(lambda x:cns_score(x))","aeb1a2d1":"df[ 'PERFORM_CNS.SCORE.DESCRIPTION'].value_counts()","666dc024":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","e788ee8e":"df['PERFORM_CNS.SCORE.DESCRIPTION']=le.fit_transform(df['PERFORM_CNS.SCORE.DESCRIPTION'])","83b02d8b":"df['PERFORM_CNS.SCORE.DESCRIPTION'].value_counts()","de5d433e":"count=1\nfor i in ['PERFORM_CNS.SCORE', 'PERFORM_CNS.SCORE.DESCRIPTION']:\n    plt.subplot(2,1,count)\n    ct=pd.crosstab(df[i], df['loan_default'])\n    ct.plot.bar(stacked=True,figsize=(12,5))\n    plt.legend(labels=['Not Defaulted','Defaulted'])\n    plt.show()\n    count+=1","4e9b5aa1":"for i in ['PERFORM_CNS.SCORE', 'PERFORM_CNS.SCORE.DESCRIPTION']:\n    print('Feature:',i)\n    chi_sq, p_value, deg_freedom, exp_freq = stats.chi2_contingency(pd.crosstab(df[i],df['loan_default']))\n    print('Chi Square Statistics',chi_sq)\n    print('p-value',p_value)\n    print('Degree of freedom',deg_freedom)\n    print()","0cd1b067":"df.loc[:,[ 'PRI.NO.OF.ACCTS', 'PRI.ACTIVE.ACCTS', 'PRI.OVERDUE.ACCTS', 'PRI.CURRENT.BALANCE','PRI.SANCTIONED.AMOUNT', 'PRI.DISBURSED.AMOUNT']]","51188d76":"primary=df.loc[:,[ 'PRI.NO.OF.ACCTS', 'PRI.ACTIVE.ACCTS', 'PRI.OVERDUE.ACCTS', 'PRI.CURRENT.BALANCE','PRI.SANCTIONED.AMOUNT', 'PRI.DISBURSED.AMOUNT']]","8d50230c":"primary.describe()","669899a3":"primary['PRI.NO.OF.ACCTS'].value_counts()","840889f9":"pri_col=['PRI.CURRENT.BALANCE','PRI.SANCTIONED.AMOUNT', 'PRI.DISBURSED.AMOUNT']","c71c46cc":"count=1\nplt.figure(figsize=(25,10))\nfor i in pri_col:\n    plt.subplot(2,2,count)\n    sns.distplot(df[i])\n    count+=1\nplt.tight_layout()","cb28c2f5":"df.loc[:,pri_col].corr()","469d2bac":"sns.heatmap(df.loc[:,pri_col].corr(),annot=True)","9bac1510":"#sns.distplot(df['disbursed_amount'].apply(lambda x:np.log1p(x)))","3256f4aa":"np.log(0+1)","ecd8f6c6":"df[['SEC.NO.OF.ACCTS',\n       'SEC.ACTIVE.ACCTS', 'SEC.OVERDUE.ACCTS', 'SEC.CURRENT.BALANCE',\n       'SEC.SANCTIONED.AMOUNT', 'SEC.DISBURSED.AMOUNT']]","09ba76d1":"secondary=df[['SEC.NO.OF.ACCTS',\n       'SEC.ACTIVE.ACCTS', 'SEC.OVERDUE.ACCTS', 'SEC.CURRENT.BALANCE',\n       'SEC.SANCTIONED.AMOUNT', 'SEC.DISBURSED.AMOUNT']]","186f467c":"secondary['SEC.NO.OF.ACCTS'].value_counts()","d37acd8f":"secondary.describe()","ecfba143":"df","53c30006":"df.loc[:,'total.no.of.accts']=df['PRI.NO.OF.ACCTS']+df['SEC.NO.OF.ACCTS']\ndf.loc[:,'pri.inactive.accts']=df['PRI.NO.OF.ACCTS']-df['PRI.ACTIVE.ACCTS']\ndf.loc[:,'sec.inactive.accts']=df['SEC.NO.OF.ACCTS']-df['SEC.ACTIVE.ACCTS']\ndf.loc[:,'total.inactive.accts']=df['pri.inactive.accts']-df['sec.inactive.accts']\ndf.loc[:,'total.overdue.accts']=df['PRI.OVERDUE.ACCTS']+df['SEC.OVERDUE.ACCTS']\ndf.loc[:,'total.current.balance']=df['PRI.CURRENT.BALANCE']+df['SEC.CURRENT.BALANCE']\ndf.loc[:,'total.disbursed.amount']=df['PRI.DISBURSED.AMOUNT']+df['SEC.CURRENT.BALANCE']\ndf.loc[:,'total.sanctioned.amount']=df['PRI.SANCTIONED.AMOUNT']+df['SEC.SANCTIONED.AMOUNT']\ndf.loc[:,'total.installment']=df['PRIMARY.INSTAL.AMT']+df['SEC.SANCTIONED.AMOUNT']\n# df.loc[:,'bal.to.disburse']=np.round((1+df['total.disbursed.amount'])\/(1+df['total.current.balance']),2) # balance to disbursed anount ratio\ndf.loc[:,'pri.tenure']=(df['PRI.DISBURSED.AMOUNT']\/(df['PRIMARY.INSTAL.AMT']+1)).astype(int)\ndf.loc[:,'sec.tenure']=(df['SEC.DISBURSED.AMOUNT']\/(df['SEC.INSTAL.AMT']+1)).astype(int)\ndf.loc[:,'disburse.to.sanctioned']=np.round((1+df['total.disbursed.amount'])\/(1+df['total.sanctioned.amount']),2)","a4f8fe19":"df=df.drop(['PRI.NO.OF.ACCTS', 'PRI.ACTIVE.ACCTS', 'PRI.OVERDUE.ACCTS', 'PRI.CURRENT.BALANCE', 'PRI.SANCTIONED.AMOUNT', 'PRI.DISBURSED.AMOUNT','SEC.NO.OF.ACCTS', 'SEC.ACTIVE.ACCTS', 'SEC.OVERDUE.ACCTS', 'SEC.CURRENT.BALANCE', 'SEC.SANCTIONED.AMOUNT', 'SEC.DISBURSED.AMOUNT', 'PRIMARY.INSTAL.AMT', 'SEC.INSTAL.AMT'],axis=1)","9e589b34":"df.columns","6a04fa93":"df['NEW.ACCTS.IN.LAST.SIX.MONTHS']","127e096d":"df['NEW.ACCTS.IN.LAST.SIX.MONTHS'].value_counts()","6729dcc4":"df['NEW.ACCTS.IN.LAST.SIX.MONTHS'].value_counts()","40828644":"ct=pd.crosstab(df['NEW.ACCTS.IN.LAST.SIX.MONTHS'], df['loan_default'])\nct.plot.bar(stacked=True,figsize=(12,5))\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","1e5b546e":"df['DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS']","090cdb20":"df['DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS'].value_counts().plot(kind='bar')","ee2f510d":"ct=pd.crosstab(df['DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS'], df['loan_default'])\nct.plot.bar(stacked=True,figsize=(12,5))\nplt.legend(labels=['Not Defaulted','Defaulted'])\nplt.show()","a98bb68c":"df['AVERAGE.ACCT.AGE']","7709695f":"df['AVERAGE.ACCT.AGE']=df['AVERAGE.ACCT.AGE'].apply(lambda x:(re.sub('[a-z]','',x)).split())\ndf['AVERAGE.ACCT.AGE']=df['AVERAGE.ACCT.AGE'].apply(lambda x:int(x[0])*12+int(x[1]))","5f180481":"df['AVERAGE.ACCT.AGE']","b32c7dbf":"plt.figure(figsize=(20,7))\nsns.distplot(df[df['loan_default']==0]['AVERAGE.ACCT.AGE'],kde=False)\nsns.distplot(df[df['loan_default']==1]['AVERAGE.ACCT.AGE'],kde=False)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","04537b85":"df['CREDIT.HISTORY.LENGTH']","e95b2261":"df['CREDIT.HISTORY.LENGTH']=df['CREDIT.HISTORY.LENGTH'].apply(lambda x:\n                                                                   (re.sub('[a-z]','',x)).split())\ndf['CREDIT.HISTORY.LENGTH']=df['CREDIT.HISTORY.LENGTH'].apply(lambda x:\n                                                                   int(x[0])*12+int(x[1]))","5699bd91":"df['CREDIT.HISTORY.LENGTH']","c1145b4c":"plt.figure(figsize=(20,7))\nsns.distplot(df[df['loan_default']==0]['CREDIT.HISTORY.LENGTH'],kde=False)\nsns.distplot(df[df['loan_default']==1]['CREDIT.HISTORY.LENGTH'],kde=False)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","36082973":"df['NO.OF_INQUIRIES'].value_counts()","03572572":"df['NO.OF_INQUIRIES'].value_counts().plot(kind='bar')","f7dab64c":"df['NO.OF_INQUIRIES'].describe()","2478731f":"plt.figure(figsize=(20,7))\nsns.distplot(df[df['loan_default']==0]['NO.OF_INQUIRIES'],kde=False)\nsns.distplot(df[df['loan_default']==1]['NO.OF_INQUIRIES'],kde=False)\nplt.legend(labels=['Not-Defaulted','Defaulted'])\nplt.show()","912d5439":"df.corr()","92c918cf":"print(df['loan_default'].value_counts())\nsns.countplot(df['loan_default'])\nplt.show()","b983176f":"df['loan_default'].value_counts(normalize=True)","f0f95c31":"df","4fe5a795":"plt.figure(figsize=(20,10))\nsns.scatterplot(x='CREDIT.HISTORY.LENGTH',y='disbursed_amount',style='loan_default',hue='loan_default',alpha=0.6,data=df)\nplt.show()","2dcb71ef":"plt.figure(figsize=(50,50))\nsns.heatmap(df.corr(),linewidths=0.05,annot=True)\nplt.show()","1ae0a9bb":"sns.scatterplot(x='CREDIT.HISTORY.LENGTH',y='disbursed_amount',hue='loan_default',data=df)","625acfa7":"df=df.drop(['supplier_id','branch_id','Current_pincode_ID'],axis=1)","e736a3a9":"from sklearn.preprocessing import OneHotEncoder\nohe=OneHotEncoder(sparse=False)","a4756399":"ohe.fit_transform(df[['Employment.Type']])","dbc1b4ff":"print(ohe.categories_)","d7899037":"temp=pd.DataFrame(ohe.fit_transform(df[['Employment.Type']]),columns=ohe.categories_[0])","f3025ef4":"manu =pd.get_dummies(df['manufacturer_id'], columns=['manufacturer_id'], drop_first=False)\nprint(manu)","a8d2fe0e":"df=df.drop(['Employment.Type','manufacturer_id'],axis=1)","bf301d1d":"df=pd.concat([df,manu],axis=1)","a2609269":"df=pd.concat([df,temp],axis=1)","af8b731c":"df.head()","72b1540f":"df.describe()","7dad0808":"y=df['loan_default']\nX=df.drop(['loan_default'],axis=1)","e0209fe1":"X.shape","b6725d33":"y.shape","1e0465a1":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=0)","ea3c42db":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,BaggingClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report","fe165091":"classifiers = [\n    LogisticRegression(),\n    DecisionTreeClassifier(criterion='entropy',random_state=0),\n    DecisionTreeClassifier(criterion='gini',random_state=0),\n    RandomForestClassifier(n_estimators=100),\n    GaussianNB(),\n    BaggingClassifier(random_state=0),\n    AdaBoostClassifier(),\n    XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1,\n                  n_estimators=100, max_depth=3)\n]","5eca970e":"results = []\nfor item in classifiers:\n    print(item,\"\\n\")\n    clf = item\n    clf.fit(X_train, y_train)\n    y_pred=clf.predict(X_test)\n    print(confusion_matrix(y_test,y_pred))\n    #print(y_pred)\n    #results.append(accuracy_score(y_test,y_pred))\n    results.append(y_pred)\n    print(\"accuracy train:\",clf.score(X_train,y_train),\"\\n\")\n    print(\"accuracy test:\",clf.score(X_test,y_test),\"\\n\")\n    print(\"precision :\",precision_score(y_test,y_pred),\"\\n\")\n    print('Recall score:',recall_score(y_test,y_pred),'\\n')\n    print(\"f1 score:\",f1_score(y_test,y_pred),\"\\n\")\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test,y_pred))\n    print(\"-------------------------------------------------------------------------------------------------------\")","4f9218d3":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","53de7fe1":"X_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","9a1e9a28":"classifiers = [\n    LogisticRegression(),\n    DecisionTreeClassifier(criterion='entropy',random_state=0),\n    DecisionTreeClassifier(criterion='gini',random_state=0),\n    RandomForestClassifier(n_estimators=100),\n    GaussianNB(),\n    BaggingClassifier(random_state=0),\n    AdaBoostClassifier(),\n    XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1,\n                  n_estimators=100, max_depth=3)\n]","02457d75":"results = []\nfor item in classifiers:\n    print(item,\"\\n\")\n    clf = item\n    clf.fit(X_train, y_train)\n    y_pred=clf.predict(X_test)\n    print(confusion_matrix(y_test,y_pred))\n    #print(y_pred)\n    #results.append(accuracy_score(y_test,y_pred))\n    results.append(y_pred)\n    print(\"accuracy train:\",clf.score(X_train,y_train),\"\\n\")\n    print(\"accuracy test:\",clf.score(X_test,y_test),\"\\n\")\n    print(\"precision :\",precision_score(y_test,y_pred),\"\\n\")\n    print('Recall score:',recall_score(y_test,y_pred),'\\n')\n    print(\"f1 score:\",f1_score(y_test,y_pred),\"\\n\")\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test,y_pred))\n    print(\"-------------------------------------------------------------------------------------------------------\")","0187fa1f":"!pip install scikit-learn --upgrade","01c392ec":"from sklearn.utils import resample\nfrom imblearn.over_sampling import SMOTE","cc1a7fe5":"y=df['loan_default']\nX=df.drop(['loan_default'],axis=1)","5c4e01b4":"print(\"X shape\",X.shape)\nprint('y shape',y.shape)","70af5381":"sm = SMOTE(random_state=0)\nX_smote,y_smote = sm.fit_sample(X,y)","b0bf5c6c":"print(\"X shape\",X_smote.shape)\nprint('y shape',y_smote.shape)","9b795792":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_smote,y_smote,test_size=0.30,random_state=0)","a365c23c":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","686c7f8f":"X_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","711ba815":"classifiers = [\n    LogisticRegression(),\n    DecisionTreeClassifier(criterion='entropy',random_state=0),\n    DecisionTreeClassifier(criterion='gini',random_state=0),\n    RandomForestClassifier(n_estimators=100),\n    GaussianNB(),\n    BaggingClassifier(random_state=0),\n    AdaBoostClassifier(),\n    XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1,\n                  n_estimators=100, max_depth=3)\n]","f1f0b201":"results = []\nfor item in classifiers:\n    print(item,\"\\n\")\n    clf = item\n    clf.fit(X_train, y_train)\n    y_pred=clf.predict(X_test)\n    print(confusion_matrix(y_test,y_pred))\n    #print(y_pred)\n    #results.append(accuracy_score(y_test,y_pred))\n    results.append(y_pred)\n    print(\"accuracy train:\",clf.score(X_train,y_train),\"\\n\")\n    print(\"accuracy test:\",clf.score(X_test,y_test),\"\\n\")\n    print(\"precision :\",precision_score(y_test,y_pred),\"\\n\")\n    print('Recall score:',recall_score(y_test,y_pred),'\\n')\n    print(\"f1 score:\",f1_score(y_test,y_pred),\"\\n\")\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test,y_pred))\n    print(\"-------------------------------------------------------------------------------------------------------\")","bd438489":"from sklearn.decomposition import PCA\npca=PCA(32)","6fff0322":"X_train=pca.fit_transform(X_train)\nX_test=pca.transform(X_test)","062f5422":"plt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.show()","a6615575":"X_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","d56c9e45":"classifiers = [\n    LogisticRegression(),\n    DecisionTreeClassifier(criterion='entropy',random_state=0),\n    DecisionTreeClassifier(criterion='gini',random_state=0),\n    RandomForestClassifier(n_estimators=100),\n    GaussianNB(),\n    BaggingClassifier(random_state=0),\n    AdaBoostClassifier(),\n    XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1,\n                  n_estimators=100, max_depth=3)\n]","480a2540":"results = []\nfor item in classifiers:\n    print(item,\"\\n\")\n    clf = item\n    clf.fit(X_train, y_train)\n    y_pred=clf.predict(X_test)\n    print(confusion_matrix(y_test,y_pred))\n    #print(y_pred)\n    #results.append(accuracy_score(y_test,y_pred))\n    results.append(y_pred)\n    print(\"accuracy train:\",clf.score(X_train,y_train),\"\\n\")\n    print(\"accuracy test:\",clf.score(X_test,y_test),\"\\n\")\n    print(\"precision :\",precision_score(y_test,y_pred),\"\\n\")\n    print('Recall score:',recall_score(y_test,y_pred),'\\n')\n    print(\"f1 score:\",f1_score(y_test,y_pred),\"\\n\")\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test,y_pred))\n    print(\"-------------------------------------------------------------------------------------------------------\")","2f8c16db":"not_default = df[df.loan_default==0]\ndefault = df[df.loan_default==1]","ab8a4149":"not_default_downsampled = resample(not_default,\n                                replace = True, # sample without replacement\n                                n_samples = len(default), # match minority n\n                                random_state = 0) ","1e582b76":"downsampled = pd.concat([not_default_downsampled, default])","c924f4c4":"downsampled","73a4eec1":"downsampled['loan_default'].value_counts()","917417c3":"y=downsampled['loan_default']\nX=downsampled.drop(['loan_default'],axis=1)","9508b5a3":"X.shape","698e8ab6":"y.shape","76ae0b7c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_smote,y_smote,test_size=0.30,random_state=0)","f6361166":"X_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","91ee01cf":"results = []\nfor item in classifiers:\n    print(item,\"\\n\")\n    clf = item\n    clf.fit(X_train, y_train)\n    y_pred=clf.predict(X_test)\n    print(confusion_matrix(y_test,y_pred))\n    #print(y_pred)\n    #results.append(accuracy_score(y_test,y_pred))\n    results.append(y_pred)\n    print(\"accuracy train:\",clf.score(X_train,y_train),\"\\n\")\n    print(\"accuracy test:\",clf.score(X_test,y_test),\"\\n\")\n    print(\"precision :\",precision_score(y_test,y_pred),\"\\n\")\n    print('Recall score:',recall_score(y_test,y_pred),'\\n')\n    print(\"f1 score:\",f1_score(y_test,y_pred),\"\\n\")\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test,y_pred))\n    print(\"-------------------------------------------------------------------------------------------------------\")","8ecdee6f":"## Employee ID","d5b7a061":"### disbursed_amount","f2ad5324":"### CREDIT.HISTORY.LENGTH","c49953fe":"## Totals COMBINING PRIMARY AND SECONDARY TO ONE","fe3dfadd":"### 'SEC.NO.OF.ACCTS','SEC.ACTIVE.ACCTS', 'SEC.OVERDUE.ACCTS', 'SEC.CURRENT.BALANCE','SEC.SANCTIONED.AMOUNT', 'SEC.DISBURSED.AMOUNT'","39939ee7":"## SMOTE","34d51e7e":"## pca","53de30f4":"### NO.OF_INQUIRIES","f340667a":"**SMOTE not working in Kaggle Notebook , ill find an alternate soon.**","d896bd1b":"### manufacture_id","4e494db3":"### ltv","a1353203":"### 'PERFORM_CNS.SCORE', 'PERFORM_CNS.SCORE.DESCRIPTION'","800ed8a1":"### NEW.ACCTS.IN.LAST.SIX.MONTHS","a4eb5174":"## State ID","8176b6d9":"### DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS","053d691b":"From this matrix we find that Employment Type has missing values","cb171627":"### NEW.ACCTS.IN.LAST.SIX.MONTHS","bad04fef":"### age of disbursal\nChanged to **Age**","b74f7730":"### asset_cost","f96ca70d":"## Base Model","256a3874":"### loan_default (Target\/Dependent Variable)","a1cbd5c0":"### supplier_id","1e298d82":"### branch_id","9260019c":"### Employment Type","2dd83408":"### AVERAGE.ACCT.AGE","705d3b59":"## TRYING DOWN SAMPLING\/UNDERSAMPLING","b9615002":"### 'PRI.NO.OF.ACCTS', 'PRI.ACTIVE.ACCTS', 'PRI.OVERDUE.ACCTS', 'PRI.CURRENT.BALANCE','PRI.SANCTIONED.AMOUNT', 'PRI.DISBURSED.AMOUNT'","44365363":"### State_ID: Passport_flag"}}