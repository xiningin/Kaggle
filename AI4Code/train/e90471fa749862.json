{"cell_type":{"1ca6a899":"code","cbc6214d":"code","f52f8fa1":"code","958777ac":"code","6d6870c8":"code","df0ce305":"code","682a1c6e":"code","e30a2d90":"code","5b8f01dc":"code","a9578f43":"code","b707a3cc":"code","684cdc6e":"code","b93488b0":"code","78cb597d":"code","ea999dee":"code","c3e2f526":"code","9a9d310e":"code","2e0eaefb":"code","e08fc57b":"code","910cde24":"code","f773649a":"code","ab880931":"code","5d0c1736":"code","62988524":"code","1cb75799":"code","f8b6dac1":"code","f1620b39":"code","da27b842":"code","0c20216e":"code","498f375c":"code","c54f3743":"code","a09f7b63":"code","de1247d7":"code","6fc9a464":"code","37d7dfaf":"code","de00ae69":"code","6df4495e":"code","0ba8ea74":"code","e3997f8b":"markdown","f2b16c91":"markdown","ecd28eba":"markdown","98a02b2e":"markdown"},"source":{"1ca6a899":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","cbc6214d":"df = pd.read_csv('..\/input\/magic-gamma-telescope-dataset\/telescope_data.csv')","f52f8fa1":"df.head()","958777ac":"df.info()","6d6870c8":"df.describe()","df0ce305":"# Missing Value\ndf.isnull().sum()","682a1c6e":"# Target Class\nsns.catplot(x = 'class', kind='count', data = df)\nplt.title('Class Counts')","e30a2d90":"sns.pairplot(df, hue='class')","5b8f01dc":"sns.pairplot(df[['fLength', 'fWidth', 'fSize', 'fConc', 'fConc1', 'fAlpha','fDist']], diag_kind='hist')","a9578f43":"df[df['class']=='g'].head()","b707a3cc":"df[df['class']=='h'].head()","684cdc6e":"df_g = df[df['class']=='g']","b93488b0":"df_h = df[df['class']=='h']","78cb597d":"df_g.hist(bins=50, figsize=(20,15))","ea999dee":"df_h.hist(bins=50, figsize=(20,15))","c3e2f526":"fig = plt.figure()\nfig,ax=plt.subplots(3,3, figsize=(16.0, 10.0))\nax[0][0].hist(df_g['fLength'], bins=50, alpha=0.5 ,label='g')\nax[0][0].hist(df_h['fLength'], bins=50, alpha=0.5 ,label='h')\nax[0][0].set_xlabel('fLength')\nax[0][0].legend()\n\nax[0][1].hist(df_g['fWidth'], bins=50, alpha=0.5 ,label='g')\nax[0][1].hist(df_h['fWidth'], bins=50, alpha=0.5 ,label='h')\nax[0][1].set_xlabel('fWidth')\nax[0][1].legend()\n\nax[0][2].hist(df_g['fSize'], bins=50, alpha=0.5 ,label='g')\nax[0][2].hist(df_h['fSize'], bins=50, alpha=0.5 ,label='h')\nax[0][2].set_xlabel('fSize')\nax[0][2].legend()\n\nax[1][0].hist(df_g['fConc'], bins=50, alpha=0.5 ,label='g')\nax[1][0].hist(df_h['fConc'], bins=50, alpha=0.5 ,label='h')\nax[1][0].set_xlabel('fConc')\nax[1][0].legend()\n\nax[1][1].hist(df_g['fConc1'], bins=50, alpha=0.5 ,label='g')\nax[1][1].hist(df_h['fConc1'], bins=50, alpha=0.5 ,label='h')\nax[1][1].set_xlabel('fConc1')\nax[1][1].legend()\n\nax[1][2].hist(df_g['fAsym'], bins=50, alpha=0.5 ,label='g')\nax[1][2].hist(df_h['fAsym'], bins=50, alpha=0.5 ,label='h')\nax[1][2].set_xlabel('fAsym')\nax[1][2].legend()\n\nax[2][0].hist(df_g['fM3Trans'], bins=50, alpha=0.5 ,label='g')\nax[2][0].hist(df_h['fM3Trans'], bins=50, alpha=0.5 ,label='h')\nax[2][0].set_xlabel('fM3Trans')\nax[2][0].legend()\n\nax[2][1].hist(df_g['fAlpha'], bins=50, alpha=0.5 ,label='g')\nax[2][1].hist(df_h['fAlpha'], bins=50, alpha=0.5 ,label='h')\nax[2][1].set_xlabel('fAlpha')\nax[2][1].legend()\n\nax[2][2].hist(df_g['fDist'], bins=50, alpha=0.5 ,label='g')\nax[2][2].hist(df_h['fDist'], bins=50, alpha=0.5 ,label='h')\nax[2][2].set_xlabel('fDist')\nax[2][2].legend()\nplt.show()","9a9d310e":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier","2e0eaefb":"x = df.drop(['class'], axis=1)\ny = df['class']","e08fc57b":"# Label Encording\nle = LabelEncoder()\ny = le.fit_transform(y)","910cde24":"y","f773649a":"# Train-Test Split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","ab880931":"# GBDT Model Training\nmodel = XGBClassifier(n_estimators=10, random_state=42)","5d0c1736":"model.fit(x_train, y_train)","62988524":"# Prediction\ny_pred = model.predict(x_test)","1cb75799":"from sklearn.metrics import confusion_matrix, accuracy_score","f8b6dac1":"# Confusion Matrix\nconfusion_matrix(y_test, y_pred)","f1620b39":"cm = confusion_matrix(y_test, y_pred)","da27b842":"sns.heatmap(cm, square=True, cbar=True, annot=True, cmap='YlGnBu', fmt=\"d\")\nplt.show()","0c20216e":"# Accuracy\naccuracy_score(y_test, y_pred)","498f375c":"x2 = x.drop(['Unnamed: 0'], axis=1)","c54f3743":"x2_train, x2_test, y_train, y_test = train_test_split(x2, y, test_size=0.2, random_state=42)","a09f7b63":"# GBDT Model Training\nmodel2 = XGBClassifier(n_estimators=10, random_state=42)","de1247d7":"model2.fit(x2_train, y_train)","6fc9a464":"# Prediction\ny2_pred = model2.predict(x2_test)","37d7dfaf":"# Confusion Matrix\nconfusion_matrix(y_test, y2_pred)","de00ae69":"cm2 = confusion_matrix(y_test, y2_pred)","6df4495e":"sns.heatmap(cm2, square=True, cbar=True, annot=True, cmap='YlGnBu', fmt=\"d\")\nplt.show()","0ba8ea74":"# Accuracy\naccuracy_score(y_test, y2_pred)","e3997f8b":"# MAGIC Gamma Telescope Dataset - EDA and GBDT","f2b16c91":"# 1. EDA","ecd28eba":"# 2. GBDT Model","98a02b2e":"#### I recieved a comment: Actually, the way in which you are considering the columns introduces a bias. The reason why you have such bias is that the 0th column (the one with the indexes) is very discriminative.Thank you, Nicol\u00f2."}}