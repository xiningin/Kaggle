{"cell_type":{"f8a57fc5":"code","8f44efa4":"code","f22ada81":"code","c5eb5e9a":"code","674f785a":"code","8bc0473b":"code","dceaf412":"code","659c2af4":"code","8ccab3c6":"code","f0ba4868":"code","9ddac851":"markdown","458ef6f3":"markdown","03a38b02":"markdown","ec8a4d71":"markdown","568d0f3d":"markdown","2ffec2ed":"markdown","a7cfaaa7":"markdown","026af166":"markdown","3b6509a2":"markdown"},"source":{"f8a57fc5":"!pip install sweetviz\n!pip install pycaret","8f44efa4":"import sweetviz\nimport pandas as pd\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","f22ada81":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))\n\ntrain.head()","c5eb5e9a":"my_report = sweetviz.compare([train, \"Train\"], [test, \"Test\"], \"SalePrice\")","674f785a":"#it will create a html file in your working folder\nmy_report.show_html(\"my_report.html\") # Not providing a filename will default to SWEETVIZ_REPORT.html","8bc0473b":"import numpy as np\nnp.seterr(divide='ignore', invalid='ignore')\n\nfrom pycaret.regression import *\n\n#intialize the setup\nregression =  setup(data = train, target = 'SalePrice')","dceaf412":"'''et = create_model('et')\ncatboost = create_model('catboost')\nada = create_model('ada')\nridge = create_model('ridge')\nlightgbm = create_model('lightgbm')\n\n# stack trained models\nstacked_models = stack_models(estimator_list=[et,catboost,ada,ridge,lightgbm])\n\ncompare_models()'''","659c2af4":"blend_models = blend_models(estimator_list = 'All',  fold = 10,  round = 4,  turbo = True, verbose = True)","8ccab3c6":"final_model = finalize_model(blend_models)\npred = predict_model(final_model, data=test)","f0ba4868":"submission = pd.DataFrame({'Id': test_ID, 'SalePrice': pred['Label']})\nsubmission.to_csv('submission.csv', index = False)","9ddac851":"# Prediction ","458ef6f3":"# This Notebook explores how to do auto ml and automated EDA for non-tech guys, and for quick analysis\/submission !\n\n\nI would use two libraries for this task - \n\n1. Sweetviz -Exploratory Data Analysis is a process where we analyze the dataset and summarize the principal characteristics of the dataset, often using visual methods. EDA is important because if you are not familiar with the dataset you are working on, then you won\u2019t be able to infer something from that data. However, EDA takes a lot of time. But what if I told you that python can automate the process of EDA with the help of some libraries? Won\u2019t it make your work easier? So let\u2019s learn about Automated EDA.\n\n2. Pycaret - PyCaret is an open-source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within seconds in your choice of notebook environment. Pycaret has wonderful documentation, please refer to it\u00a0for further details.\n\n\nPlease refer the below articles or futher details\n\nhttps:\/\/towardsdatascience.com\/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34\n\nhttps:\/\/pycaret.org\/guide\/\n\n\n\n# Please upvote and leave comment, if you find it helpful\/ or any pointers suggestion for improvement !\n","03a38b02":"# Submission","ec8a4d71":"***Automated EDA***","568d0f3d":"![](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets%2F765830%2F1320868%2FSample.png?GoogleAccessId=databundle-worker-v2@kaggle-161607.iam.gserviceaccount.com&Expires=1594472967&Signature=eEy1Laknay1c2veNv4t6sE6t3I9HgSS7jO00fMvpSAqlCvWO9aYyDcRi9OfO0pybobyrlA48%2BYxcvQEvgtMPTUkz7rfpqTOfsQT08sDqb7LmC5A7RhCVZo99kZE0nMSZ2TB%2FQVE878Imf3MkMeeKuHhwf5H3sY%2BAYCX6vTVYyqMC9fiUaT%2BdgLN9LEPlY9rNijbDHFFihehkJqdZfEyg1qwWGhvvbdDRNM1DiZkw%2BwL82GeX0VLOfw9baH5RYWL2L9TMRe9N%2BxHVqQPH%2Fh1CAnIgpDgJOOJMxc0DIaw92vY0cm5WZRXBLhbPhcq7EI2oQ91QG4G69PXROT4ix3s%2Bmw%3D%3D)","2ffec2ed":"### If you like my effort !! Please upvote and don't forget to leave comment\/suggestion :) \n\n#### P.S - Notebook clean up pending !!!","a7cfaaa7":"## Check the report html for detail view in kaggle working folder (..\/input\/output\/)","026af166":"# Stacking Models","3b6509a2":"### **Perform EDA In Seconds With Visualization Using SweetViz Library**\n\n<p><iframe width=\"650\" height=\"360\" src=\"https:\/\/www.youtube.com\/embed\/D4fHn4lHCmI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>"}}