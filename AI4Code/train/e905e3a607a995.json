{"cell_type":{"5c2acb5c":"code","073fdf39":"code","16c4631e":"code","2fdbdfa4":"code","ea291437":"code","dbd77670":"code","1d808620":"code","05195d2a":"code","cdf63fc7":"code","434ab51c":"code","c66099e4":"code","ed7c2490":"code","c1a5942d":"code","c56465cd":"code","404f9999":"code","d6876f85":"code","5c524dd8":"code","9114f722":"code","4cb82bf4":"code","8b22d289":"code","e6717141":"code","2b4f766b":"code","fddff766":"code","6b189bcd":"markdown","713f4642":"markdown","8c7ee282":"markdown","f827fdcd":"markdown","947cb86d":"markdown","328dfc62":"markdown","08718b38":"markdown","44a1d997":"markdown","21f5d328":"markdown","f5614300":"markdown","1e4e86c3":"markdown"},"source":{"5c2acb5c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score,precision_score,confusion_matrix,f1_score,classification_report\nimport os\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.naive_bayes import GaussianNB\nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\n\nsns.set_style(\"darkgrid\")","073fdf39":"df=pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\ndf.head()","16c4631e":"df.isnull().sum()","2fdbdfa4":"df = df.fillna(df.groupby('Potability').transform('median'))","ea291437":"sns.regplot(x=\"ph\", y=\"Potability\", data=df)\nplt.ylim(0,)","dbd77670":"sns.regplot(x=\"Solids\", y=\"Potability\", data=df)\nplt.ylim(0,)","1d808620":"df.corr()","05195d2a":"plt.pcolor(df, cmap='RdBu')\nplt.colorbar()\nplt.show()","cdf63fc7":"\nfor i,j  in enumerate(df.columns):\n    pearson_coefficient, p_val = stats.pearsonr(df[str(j)], df['Potability'])\n    print(str(j),\":\",\"Pearson:\",pearson_coefficient,'p_value: ',p_val)\n","434ab51c":"df.describe()","c66099e4":"fig, axes = plt.subplots(3,4, figsize = (14,8), sharex=False, sharey=False)\naxes = axes.ravel()\ncols = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity', 'Organic_carbon', 'Trihalomethanes','Turbidity']\nfor i in range(len(cols)):\n    sns.boxplot(y=cols[i],data=df, ax=axes[i], palette=\"Set2\")\nplt.tight_layout()","ed7c2490":"Q1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","c1a5942d":"df.shape","c56465cd":"df = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]\n","404f9999":"X=np.asarray(df.drop(['Potability'],axis=1))\ny=np.asarray(df['Potability'])","d6876f85":"\nle = preprocessing.LabelEncoder()\nX = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\n\ny=le.fit_transform(y)","5c524dd8":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=42)","9114f722":"\nclassifier=tree.DecisionTreeClassifier()\nclassifier.fit(X_train,y_train)\npredictions=classifier.predict(X_test)\nprint(accuracy_score(y_test,predictions))\nprint(precision_score(y_test,predictions))","4cb82bf4":"\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\npredicted = model.predict(X_test)\nprint(accuracy_score(y_test, predicted))\nprint(precision_score(y_test, predicted,average='micro'))","8b22d289":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\npred = logreg.predict(X_test)\nprint(\"Accuracy score: \",accuracy_score(y_test, pred))","e6717141":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier(n_estimators=30,max_depth=2,random_state=0)\ngb.fit(X_train, y_train)\npredicted = gb.predict(X_test)\nprint(\"Accuracy score: \",accuracy_score(y_test, predicted))\nprint(\"Precision score: \",precision_score(y_test, predicted))","2b4f766b":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(n_estimators=100,max_depth=3,random_state=0)\n\nrandom_forest.fit(X_train, y_train)\nprediction=random_forest.predict(X_test)\nprint(\"Accuracy  score: \",accuracy_score(y_test, prediction))\nprint(\"Precision score: \",precision_score(y_test, prediction))","fddff766":"feature_imp = pd.Series(random_forest.feature_importances_,index=df.columns[0:9]).sort_values(ascending=False)\nfeature_imp","6b189bcd":"***Decision Tree Classifier***","713f4642":"***Random Forest***","8c7ee282":"***Naive Bayes Classifier***","f827fdcd":"***Logistic Regression***","947cb86d":"# **Data Analysis**\n\n* In order to find relationship type(weak,moderate,strong), for each column pearson_coefficient and p_values were calculated.\n* Threshold value for determining significance is 0.05.\n\n***If p_value<0.05 there is a linear relationship between two varaiables (statistically significant)***\n\n***If p_value>0.05 there is no linear relationship between two varaiables (not statistically significant)***\n![image.png](attachment:3d22b4ae-8c9f-477e-8d85-b24cf5623196.png)\n","328dfc62":"***Gradient Boosting***","08718b38":"# **Missing Value Analysis**\n\n\n ***The missing values count of each column in the data frame is shown below.***\n \n ***Missing values are replaced for each column by the mean of the class to which that sample belongs.***","44a1d997":"**Outlier Detection**","21f5d328":"# Classifier Evaluation\n\n* **Decision Tree**: *Accuracy:* 73.47, *Precision:* 64.7\n* **Naive Bayes**: *Accuracy:* 63.1, *Precision:* 63.1\n* **Logistic Regression**: *Accuracy:* 62.8\n* **Gradient Boosting**: *Accuracy:* 76.5, *Precision:* 94.1\n* **Random Forest**: *Accuracy:* 81.09, *Precision:* 82.25","f5614300":"# Classification\n\n**Classifiers:**\n* Decision Tree\n* Naive Bayes\n* Logistic Regression\n* GradientBoosting\n* Random Forest","1e4e86c3":"**Visualization of relationship between variables**\n\nRegplot function that is inside the seaborn library is used for the visualization of relationships.\n![image.png](attachment:50fe421b-7904-43b8-9e35-43ce22d7dbf9.png)\n\n*According to this image we can say there is no linear relationship between Solids feature and Potability.*"}}