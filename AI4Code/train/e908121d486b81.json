{"cell_type":{"eb1c6dc1":"code","7a45016f":"code","5ed7563b":"code","f8e4fcbf":"code","67876696":"code","fe2662f0":"code","bf6997d5":"code","ca76baab":"code","bb99644c":"code","7aa3a779":"code","a157cfec":"markdown","8d4ab63e":"markdown","18043f40":"markdown"},"source":{"eb1c6dc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import DistanceMetric\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a45016f":"df = pd.DataFrame([[1,'code A', 'excellent', 45],[2,'code B', 'fair', 22],[3,'code C', 'good', 64],[4,'code A', 'excellent', 28]])\ndf.columns = ['index','t1','t2','t3']\ndf","5ed7563b":"def matrix_calc(df,col,typ='Nom'):# for one columns only\n    if typ == 'Nom':\n        mat = np.zeros([df[col].shape[0],df[col].shape[0]])\n        p = 1\n        for i in range(0,df[col].shape[0]):\n            for j in range(i,df[col].shape[0]): \n                if(df[col][i]!=df[col][j]):\n                    mat[j][i]=1\n        for i in range(0,df[col].shape[0]):\n            for j in range(i,df[col].shape[0]): \n                if i != j:\n                    mat[i][j]=np.NaN\n        print(mat)\n    elif typ == 'Ord':\n        l = LabelEncoder()\n        df[col]= l.fit_transform(df[col])\n        s1 = DistanceMetric.get_metric('manhattan').pairwise(df[[col]])\n        s1 = s1\/max(np.ptp(df[col]),1)\n        for i in range(0,df[col].shape[0]):\n            for j in range(i,df[col].shape[0]): \n                if i != j:\n                    s1[i][j]=np.NaN\n        print(s1)\n    elif typ == 'Num':\n        s1 = DistanceMetric.get_metric('manhattan').pairwise(df[[col]])\n        s1 = s1\/max(np.ptp(df[col]),1)\n        for i in range(0,df[col].shape[0]):\n            for j in range(i,df[col].shape[0]): \n                if i != j:\n                    s1[i][j]=np.NaN\n        s1=np.round(s1,decimals = 2)\n        print(s1)\n\n","f8e4fcbf":"#nominal\nprint(\"Nominal\")\nmatrix_calc(df,'t1','Nom')\nprint('--------------------------------')\n#ordinal\nprint(\"Ordinal\")\nmatrix_calc(df,'t2','Ord')\nprint('--------------------------------')\n#numeric\nprint(\"Numeric\")\nmatrix_calc(df,'t3','Num')","67876696":"df = pd.DataFrame([[1,'code A', 'excellent', 45],[2,'code B', 'fair', 22],[3,'code C', 'good', 64],[4,'code D', 'excellent', 59],[5,'code A', 'fair', 84],[6,'code C', 'good', 36],[7,'code D', 'fair', 43],[8,'code A', 'excellent', 29]])\ndf.columns = ['index','t1','t2','t3']\ndf","fe2662f0":"#nominal\nprint(\"Nominal\")\nmatrix_calc(df,'t1','Nom')\nprint('--------------------------------')\n#ordinal\nprint(\"Ordinal\")\nmatrix_calc(df,'t2','Ord')\nprint('--------------------------------')\n#numeric\nprint(\"Numeric\")\nmatrix_calc(df,'t3','Num')","bf6997d5":"df = pd.read_csv('..\/input\/nflplaybyplay2009to2016\/NFL Play by Play 2009-2018 (v5).csv')","ca76baab":"df2 = df\ndf2","bb99644c":"columns = ['play_type','posteam_type','yardline_100']\ndf = df2[columns]\ndf.dropna()\ndf = df.head(8)\ndf","7aa3a779":"#nominal\nprint(\"Nominal\")\nmatrix_calc(df,'posteam_type','Nom')\nprint('--------------------------------')\n#ordinal\nprint(\"Ordinal\")\nmatrix_calc(df,'play_type','Ord')\nprint('--------------------------------')\n#numeric\nprint(\"Numeric\")\nmatrix_calc(df,'yardline_100','Num')","a157cfec":"# For Small Data","8d4ab63e":"## taking yardline_100(numeric) , posteam_type(nominal) , play_type(ordinal)","18043f40":"# Big Data"}}