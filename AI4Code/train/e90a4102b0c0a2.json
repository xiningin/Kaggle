{"cell_type":{"09d626c4":"code","0b01c112":"code","557170c7":"code","7793c4de":"code","e5b8201d":"code","92b2ff49":"code","172a5373":"code","b4ed8548":"code","d03e4a9d":"code","43948860":"code","891aed4f":"code","6f293707":"code","4785a069":"markdown","63af7724":"markdown","81a0d7f0":"markdown","ec632f09":"markdown","c45b63bc":"markdown","ca225ad1":"markdown","eca50255":"markdown","02861ac8":"markdown","0af8c6d2":"markdown","a7449d8c":"markdown"},"source":{"09d626c4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as tick\nimport seaborn as sns\nfrom dask import dataframe as dd\n\ncolors_dark = [\"#313131\", '#484848', '#AEAEAE'] ","0b01c112":"df = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")","557170c7":"def reformat_large_tick_values(tick_val, pos):\n    if tick_val >= 1000000000:\n        val = round(tick_val\/1000000000, 1)\n        new_tick_format = '{:}B'.format(val)\n    elif tick_val >= 1000000:\n        val = round(tick_val\/1000000, 1)\n        new_tick_format = '{:}M'.format(val)\n    elif tick_val >= 1000:\n        val = round(tick_val\/1000, 1)\n        new_tick_format = '{:}K'.format(val)\n    elif tick_val < 1000:\n        new_tick_format = round(tick_val, 1)\n    else:\n        new_tick_format = tick_val\n\n    new_tick_format = str(new_tick_format)\n    \n    index_of_decimal = new_tick_format.find(\".\")\n    \n    if index_of_decimal != -1:\n        value_after_decimal = new_tick_format[index_of_decimal+1]\n        if value_after_decimal == \"0\":\n            new_tick_format = new_tick_format[0:index_of_decimal] + new_tick_format[index_of_decimal+2:]\n            \n    return new_tick_format","7793c4de":"dfs =  df.R.value_counts().to_frame()\n\nfig, ax = plt.subplots(figsize=(18, 8))\n\nbars = ax.bar(dfs.index.astype(str), dfs.R, alpha=0.3, color=\"#8E9798\")\n\nax.set_xticks(dfs.index.astype(str))\nax.set_xticklabels(dfs.index.astype(str))\nax.grid(axis=\"y\", alpha=0.5)\nax.set_axisbelow(True)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_xlabel(\"R\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"R Count\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.tick_params(labelsize=14)\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nfont = {\n    'color':  'white',\n    'weight': 'bold',\n    'size': 24,\n}\n\nax.text(\n    x=bars[0].get_x()+0.25, y=bars[0].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[0].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[1].get_x()+0.25, y=bars[1].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[1].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[2].get_x()+0.25, y=bars[2].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[2].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nbars[0].set_color('#83C8CC')\nbars[0].set_alpha(1)\nbars[0].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D61')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D64')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nplt.suptitle(\"C value counts\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"No significant changes were seen.\", loc='center', x=0.50, y=1.03, fontsize=14, color=colors_dark[1])\nplt.tight_layout()\nplt.show()","e5b8201d":"dfs =  df.C.value_counts().to_frame()\n\nfig, ax = plt.subplots(figsize=(18, 8))\n\nbars = ax.bar(dfs.index.astype(str), dfs.C, alpha=0.3, color=\"#8E9798\")\n\nax.set_xticks(dfs.index.astype(str))\nax.set_xticklabels(dfs.index.astype(str))\nax.grid(axis=\"y\", alpha=0.5)\nax.set_axisbelow(True)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_xlabel(\"C\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"C Count\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.tick_params(labelsize=14)\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nfont = {\n    'color':  'white',\n    'weight': 'bold',\n    'size': 24,\n}\n\nax.text(\n    x=bars[0].get_x()+0.25, y=bars[0].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[0].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[1].get_x()+0.25, y=bars[1].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[1].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[2].get_x()+0.25, y=bars[2].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[2].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nbars[0].set_color('#83C8CC')\nbars[0].set_alpha(1)\nbars[0].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D61')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D64')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nplt.suptitle(\"C value counts\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"No significant changes were seen.\", loc='center', x=0.50, y=1.03, fontsize=14, color=colors_dark[1])\nplt.tight_layout()\nplt.show()","92b2ff49":"df[\"R_C\"] = df.R.astype(str) + \"_\" + df.C.astype(str)\ndfs = df.R_C.value_counts().to_frame()\n\nfig, ax = plt.subplots(figsize=(18, 8))\n\nbars = ax.bar(dfs.index.astype(str), dfs.R_C, alpha=0.3, color=\"#8E9798\")\n\nax.set_xticks(dfs.index.astype(str))\nax.set_xticklabels(dfs.index.astype(str))\nax.grid(axis=\"y\", alpha=0.5)\nax.set_axisbelow(True)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_xlabel(\"R and C\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"R and C Count\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.tick_params(labelsize=14)\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nfont = {\n    'color':  'white',\n    'weight': 'bold',\n    'size': 24,\n}\n\nax.text(\n    x=bars[0].get_x()+0.21, y=bars[0].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[0].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[1].get_x()+0.21, y=bars[1].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[1].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\n\nbars[0].set_color('#83C8CC')\nbars[0].set_alpha(1)\nbars[0].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D61')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nplt.suptitle(\"R_C value counts\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.title(\"Read the count value from the data that combines each category.\", loc='center', x=0.52, y=1.03, fontsize=14, color=colors_dark[1])\nplt.tight_layout()\nplt.show()","172a5373":"dfs = df.groupby(\"R_C\").mean().loc[:, [\"u_in\"]].sort_values(\"u_in\", ascending=False)\nmean_u_in = df.u_in.mean()\n\n\nfig, ax = plt.subplots(figsize=(18, 8))\n\nbars = ax.bar(dfs.index, dfs.u_in, alpha=0.3, color=\"#8E9798\")\n\nax.set_xticks(dfs.index)\nax.set_xticklabels(dfs.index)\nax.grid(axis=\"y\", alpha=0.5)\nax.set_axisbelow(True)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_xlabel(\"R_C\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"u_in values\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.tick_params(labelsize=14)\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nfont = {\n    'color':  'white',\n    'weight': 'bold',\n    'size': 24,\n}\n\nax.text(\n    x=bars[0].get_x()+0.19, y=bars[0].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[0].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nax.text(\n    x=bars[1].get_x()+0.19, y=bars[1].get_height() \/ 2,\n    s=reformat_large_tick_values(bars[1].get_height(), 0),\n    fontdict=font,\n    va=\"center\",\n)\n\nline1 = ax.axhline(y=mean_u_in, linestyle=\"--\", color=\"#8E9798\")\n\nax.text(\n    x=8.7, \n    y=mean_u_in,\n    s=\"Average \\n u_in\",\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=14\n)\n\nbars[0].set_color('#83C8CC')\nbars[0].set_alpha(1)\nbars[0].set_edgecolor(colors_dark[0])\n\nbars[1].set_color('#2A5D61')\nbars[1].set_alpha(1)\nbars[1].set_edgecolor(colors_dark[0])\n\nplt.suptitle(\"Average value of u_in from each category\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","b4ed8548":"df1 = df[df.R_C == \"5_50\"].groupby(\"breath_id\").mean().loc[:, [\"u_in\"]].sort_values(\"u_in\", ascending=False)[:20].sort_values(\"u_in\")\ndf2 = df[df.R_C == \"50_10\"].groupby(\"breath_id\").mean().loc[:, [\"u_in\"]].sort_values(\"u_in\", ascending=False)[:20].sort_values(\"u_in\")\n\nfig, ax = plt.subplots(1, 2, figsize=(18, 14))\n\nbars1 = ax[0].barh(y=df1.index.astype(str), width=df1.u_in, edgecolor=colors_dark[0], color=\"#83C8CC\")\nbars2 = ax[1].barh(y=df2.index.astype(str), width=df2.u_in, edgecolor=colors_dark[0], color=\"#2A5D61\")\n\nax[0].grid(axis=\"x\", alpha=0.5)\nax[0].xaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[0].set_axisbelow(True)\nax[0].tick_params(labelsize=12)\nax[0].set_title(\"The magnitude relationship of the average value \\n of breath_id u_in in which r_c belongs to 5_50\", loc='center', fontsize=14)\nax[0].set_xlabel(\"u_in\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax[0].set_ylabel(\"breath_id\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax[0].legend([\"group breath id by u_in\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False)\n\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n\n\nax[1].grid(axis=\"x\", alpha=0.5)\nax[1].xaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax[1].set_axisbelow(True)\nax[1].tick_params(labelsize=12)\nax[1].set_title(\"The magnitude relation of the average value \\n in u_in of breath_id in which r_c belongs to 20_10\", loc='center', fontsize=14, color=colors_dark[0])\nax[1].set_xlabel(\"u_in\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax[1].legend([\"group breath_id by u_in\"], loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=1, frameon=False)\n\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['top'].set_visible(False)\n\nplt.suptitle(\"Top 10 : Visible u_in from top and bottom classifications\", fontsize=18, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","d03e4a9d":"a = pd.cut(df.u_in, bins=6).unique()\npd.DataFrame({\"u_in Amounts\": a, \"color\": [\"Blue\", \"Light Blue\", \"Green\", 'Yellow', 'Orange', \"Magenta\"]})","43948860":"def split_time(x):\n    if x < 1.0:\n        return 0\n    elif x < 1.5:\n        return 1\n    else:\n        return 2 \n    \nu_in_color = [\"#3442C1\", '#33955A', '#49C8DA', '#CE6CB9', '#CEA76C', '#CE6C6C']\n\ndf[\"timestamp\"] = df.time_step.apply(split_time)\ndf[\"u_in_classes\"] = pd.cut(df.u_in, bins=6, labels=False)\ndfs = pd.crosstab(df.timestamp, df.u_in_classes)\nmean_u_in = dfs.mean().mean()\n\n\nfig, ax = plt.subplots(figsize=(14, 8))\n\nbar = dfs.plot(kind='bar', ax=ax, stacked=True, color=u_in_color, rot=0, edgecolor=colors_dark[0], alpha=0.8)\nline1 = ax.axhline(y=mean_u_in, linestyle=\"--\", color=\"#8E9798\")\n\nax.text(\n    x=2.3, \n    y=mean_u_in,\n    s=\"Average \\nu_in counts\",\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=14\n)\n\nax.grid(axis=\"y\", alpha=0.5)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_axisbelow(True)\nax.tick_params(labelsize=14)\nax.set_xlabel(\"Time Step\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"u_in classes counts\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=2, frameon=False, fontsize=12)\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n\nplt.annotate(f'*time step from {df.time_step.min()} to {df.time_step.max()}', (0,0), (650,-80), fontsize=11,xycoords='axes fraction', textcoords='offset points')\nplt.suptitle(\"How does it change over time? \", fontsize=18, fontweight='bold', color=colors_dark[1])\nplt.title(\"In the initial stage, it takes various values, \\nlarge and small, but the range of values becomes smaller with the passage of time.\", loc='center', x=0.59, y=1.03, fontsize=14, color=colors_dark[0])\nplt.tight_layout()\nplt.show()","891aed4f":"a = pd.cut(df.pressure, bins=6).unique()\npd.DataFrame({\"u_in Amounts\": a, \"color\": [\"Blue\", \"Light Blue\", \"Green\", 'Yellow', 'Orange', \"Magenta\"]})","6f293707":"df[\"pressure_classes\"] = pd.cut(df.pressure, bins=6, labels=False)\ndfs = pd.crosstab(df.timestamp, df.pressure_classes)\nmean_pressure = dfs.mean().mean()\n\n\nfig, ax = plt.subplots(figsize=(14, 8))\n\nbar = dfs.plot(kind='bar', ax=ax, stacked=True, color=u_in_color, rot=0, edgecolor=colors_dark[0], alpha=0.8)\nline1 = ax.axhline(y=mean_pressure, linestyle=\"--\", color=\"#8E9798\")\n\nax.text(\n    x=2.4, \n    y=mean_u_in,\n    s=\"Average \\npressure counts\",\n    backgroundcolor=\"#2A5D61\",\n    color=\"white\",\n    fontweight='bold',\n    fontsize=14\n)\n\nax.grid(axis=\"y\", alpha=0.5)\nax.yaxis.set_major_formatter(tick.FuncFormatter(reformat_large_tick_values))\nax.set_axisbelow(True)\nax.tick_params(labelsize=14)\nax.set_xlabel(\"Time Step\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"pressure classes counts\", fontsize=14, fontweight='bold', color=colors_dark[0])\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=5, borderpad=2, frameon=False, fontsize=12)\n\n\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nplt.annotate(f'*time step from {df.time_step.min()} to {df.time_step.max()}', (0,0), (650,-80), fontsize=11,xycoords='axes fraction', textcoords='offset points')\nplt.suptitle(\"How does it change over time? \", fontsize=18, fontweight='bold', color=colors_dark[1])\nplt.title(\"Like u_in,\\n it initially detects a wide range of values, and the range of values gradually narrows.\", loc='center', x=0.59, y=1.03, fontsize=14, color=colors_dark[0])\nplt.tight_layout()\nplt.show()","4785a069":"# R ","63af7724":"As we have seen, there is a big difference between the two unique breath_ids, but the value taken by u_in is also small.","81a0d7f0":"# What is the u_in relationship between r_c?","ec632f09":"# Let's look at the width of u_in by dividing it from the time axis.","c45b63bc":"# Let's look at the objective variable in the same way.","ca225ad1":"# R and C ","eca50255":"Shows each color when separated","02861ac8":"# What is the difference between top and bottom ? ","0af8c6d2":"# C ","a7449d8c":"In contrast to the graphs we've seen so far, the differences between categories are clear.  \nSeems to be separated by peculiarities in some examples"}}