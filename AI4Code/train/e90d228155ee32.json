{"cell_type":{"e1e6331a":"code","10fa51ca":"code","c336f61a":"code","1364fb20":"code","5785f465":"code","5c86a9e3":"code","d7e922b5":"code","105c573c":"code","24c5f13a":"code","ce323cdb":"code","07d4e2a6":"code","3d994c3c":"code","d96a9ea0":"code","30bf1069":"code","baed0eb2":"code","f5ffe182":"code","02a5107d":"code","e8c81e00":"code","9807941a":"code","a95135b7":"code","6540b0f0":"code","88b32819":"code","832acf7d":"code","da4feb62":"code","5e9fca8a":"code","68707cc8":"code","d95833e6":"markdown"},"source":{"e1e6331a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10fa51ca":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\ndf_train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","c336f61a":"display(df_train.head())\ndisplay(df_train.columns)","1364fb20":"display(df_test.head())\n\ndisplay(df_test.columns)","5785f465":"display(df_test.info())","5c86a9e3":"fig,ax=plt.subplots(figsize=(30,15))\n\nsns.heatmap(df_train.isnull(),ax=ax)\n","d7e922b5":"fig,ax2=plt.subplots(figsize=(30,15))\nsns.heatmap(df_test.isnull(),ax=ax2)\n","105c573c":"numeric_train = df_train.select_dtypes(exclude=['object']).drop([\"SalePrice\",'Id'], axis = 1)\ndisplay(numeric_train.head())\n\nid_test = df_test[\"Id\"]\ny_train = df_train[\"SalePrice\"]\n\nnumeric_test = df_test.select_dtypes(exclude=['object']).drop('Id', axis = 1)\ndisplay(numeric_test.head())\n\n\n","24c5f13a":"display(numeric_train.shape)\ndisplay(numeric_test.shape)","ce323cdb":"numeric_train.isnull().sum()","07d4e2a6":"numeric_test.isnull().sum()","3d994c3c":"object_train = df_train.select_dtypes(include=['object'])\nobject_test = df_test.select_dtypes(include=['object'])\n\ndisplay(object_train.shape)\ndisplay(object_test.shape)\nunique_1=[]\nfor col in object_train:\n    unique_1.append(object_train[col].nunique())\n    \nprint(unique_1)","d96a9ea0":"unique_2=[]\nfor col in object_test:\n    unique_2.append(object_test[col].nunique())\n    \nprint(unique_2)","30bf1069":"object_index_list = np.array(object_train.columns)[np.array(unique_1) == np.array(unique_2)]\n\n\n\nobject_train = object_train[object_index_list]\nobject_test = object_test[object_index_list]\n\n","baed0eb2":"object_train.isnull().sum()","f5ffe182":"object_dummies_train = pd.get_dummies(object_train)\n\nobject_dummies_test = pd.get_dummies(object_test)\n\ndisplay(object_dummies_train.shape)\ndisplay(object_dummies_test.shape)","02a5107d":"#imputer\n\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\n\nimp_mean = SimpleImputer(strategy=\"mean\")\nimp_median = SimpleImputer(strategy=\"median\")\nimp_mode = SimpleImputer(strategy=\"most_frequent\")\n\nimp_mean.fit(numeric_train)\nnumeric_train = imp_mean.transform(numeric_train)\n\nimp_mean.fit(numeric_test)\nnumeric_test = imp_mean.transform(numeric_test)\n\nnumeric_train = pd.DataFrame(numeric_train)\nnumeric_test = pd.DataFrame(numeric_test)\n\n","e8c81e00":"X_train = pd.concat([numeric_train,object_dummies_train],axis=1)\n\ndisplay(X_train)\n\nX_test = pd.concat([numeric_test,object_dummies_test],axis=1)\n\ndisplay(X_test)","9807941a":"X_train.columns","a95135b7":"\ndisplay(X_train.shape)\ndisplay(y_train.shape)\ndisplay(X_test.shape)\n\n\n","6540b0f0":"from sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor \nfrom xgboost import XGBRegressor\n\nlin_reg = LinearRegression()\nlasso_reg = Lasso(alpha=30,max_iter=10000,random_state=9,normalize=True)\nridge_reg = Ridge(alpha=30,max_iter=10000,random_state=9,fit_intercept=False,normalize=True)\ncatboost = CatBoostRegressor() \nxg_reg = XGBRegressor(colsample_bytree=0.4, gamma=0,\nlearning_rate=0.07, max_depth=3, min_child_weight=1.5, n_estimators=10000,\nreg_alpha=0.75, reg_lambda=0.45, subsample=0.6, seed=42)\nlgbr = LGBMRegressor()\n\n\nlgbr.fit(X_train,y_train)\nlin_reg.fit(X_train,y_train)\nlasso_reg.fit(X_train,y_train)\nridge_reg.fit(X_train,y_train)\ncatboost.fit(X_train,y_train)\nxg_reg.fit(X_train,y_train)\n\nprint(model_selection.cross_val_score(lin_reg,X_train,y_train,cv=5,scoring=\"neg_mean_squared_log_error\").mean())\nprint(model_selection.cross_val_score(lin_reg,X_train,y_train,cv=5).mean())\nprint(model_selection.cross_val_score(lasso_reg,X_train,y_train,cv=5,scoring=\"neg_mean_squared_log_error\").mean())\nprint(model_selection.cross_val_score(lasso_reg,X_train,y_train,cv=5).mean())\nprint(model_selection.cross_val_score(ridge_reg,X_train,y_train,cv=5,scoring=\"neg_mean_squared_log_error\").mean())\nprint(model_selection.cross_val_score(ridge_reg,X_train,y_train,cv=5).mean())\nprint(model_selection.cross_val_score(lgbr,X_train,y_train,cv=5,scoring=\"neg_mean_squared_log_error\").mean())\nprint(model_selection.cross_val_score(lgbr,X_train,y_train,cv=5).mean())\n#print(model_selection.cross_val_score(xg_reg,X_train,y_train,cv=5,scoring=\"neg_mean_squared_log_error\").mean())\n#print(model_selection.cross_val_score(xg_reg,X_train,y_train,cv=5).mean())","88b32819":"y_predict_lin = lin_reg.predict(X_test)\ny_predict_lasso = lasso_reg.predict(X_test)\n\ny_predict_ridge = ridge_reg.predict(X_test)\n\ny_predict_cat = catboost.predict(X_test)\n\ny_predict_xg = xg_reg.predict(X_test)\n\ny_predict_lgbr = lgbr.predict(X_test)\n\n\n\n","832acf7d":"y_predict = (y_predict_xg + y_predict_cat + y_predict_lgbr+y_predict_lasso)\/4\ny_predict","da4feb62":"output = pd.DataFrame({\"Id\":id_test,\"SalePrice\":y_predict})","5e9fca8a":"output.head()","68707cc8":"output.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","d95833e6":"from sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2)\n\nnumeric_train = poly.fit_transform(numeric_train)\nnumeric_test = poly.fit_transform(numeric_test)"}}