{"cell_type":{"da43ec27":"code","c7d15f55":"code","b6fc4378":"code","09c33e93":"code","e3373c0a":"code","f0d3c696":"code","3d3d95a9":"code","0eaa5e2d":"code","1dbc0f7f":"code","54dafac2":"code","ebe37bb8":"code","d567f038":"markdown","d6005e4e":"markdown","429fdfc0":"markdown","52219978":"markdown","b4d10dea":"markdown","fdac666f":"markdown","553c0428":"markdown","f61dbd5f":"markdown","1f13233b":"markdown","6b423e52":"markdown"},"source":{"da43ec27":"from torch.utils.data import DataLoader, Dataset\nimport torchvision.transforms as T\nimport torch\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nfrom torchvision.utils import save_image\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n%matplotlib inline","c7d15f55":"image_size = 64\nDATA_DIR = '..\/input\/vaporarray\/test.out.npy'\nX_train = np.load(DATA_DIR)\nprint(f\"Shape of training data: {X_train.shape}\")\nprint(f\"Data type: {type(X_train)}\")","b6fc4378":"print(type(X_train[0][0][0][0]))","09c33e93":"data = X_train.astype(np.float64)\ndata = 255 * data\nimg = data.astype(np.uint8)\nX_train = img","e3373c0a":"print(type(X_train[0][0][0][0]))","f0d3c696":"random_image = random.randint(0, len(X_train))\nplt.imshow(X_train[random_image])\nplt.title(f\"Training example #{random_image}\")\nplt.axis('off')\nplt.show()","3d3d95a9":"class vaporwaveDataset(Dataset):\n    'Characterizes a dataset for PyTorch'\n    def __init__(self, X):\n        'Initialization'\n        self.X = X\n\n    def __len__(self):\n        'Denotes the total number of samples'\n        return len(self.X)\n\n    def __getitem__(self, index):\n        'Generates one sample of data'\n        # Select sample\n        image = self.X[index]\n        X = self.transform(image)\n        return X\n        \n    transform = T.Compose([\n        T.ToPILImage(),\n        T.Resize(image_size),\n        T.ToTensor()])","0eaa5e2d":"batch_size = 64\ntransformed_dataset = vaporwaveDataset(X=X_train)\ntrain_dl = DataLoader(transformed_dataset, batch_size, shuffle=True, num_workers=3, pin_memory=True)","1dbc0f7f":"def show_images(images, nmax=64):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(make_grid((images.detach()[:nmax]), nrow=8).permute(1, 2, 0))\n\ndef show_batch(dl, nmax=64):\n    for images in dl:\n        show_images(images, nmax)\n        break","54dafac2":"show_batch(train_dl)","ebe37bb8":"class croppedDataset(Dataset):\n    'Characterizes a dataset for PyTorch'\n    def __init__(self, ims):\n        'Initialization'\n        self.ims = ims\n\n    def __len__(self):\n        'Denotes the total number of samples'\n        return len(self.ims)\n\n    def __getitem__(self, index):\n        'Generates one sample of data'\n        # Select sample\n        image = self.ims[index]\n        X = self.transform(image)\n        return X\n        \n    transform = T.Compose([\n        T.ToPILImage(),\n        T.CenterCrop(0.75 * 64),\n        T.Resize(image_size),\n        #T.RandomResizedCrop(image_size),\n        T.RandomHorizontalFlip(),\n        T.ToTensor()])\n    \nbatch_size = 64\ncropped_dataset = croppedDataset(ims=X_train)\ntrain_dl = DataLoader(cropped_dataset, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nshow_batch(train_dl)","d567f038":"### Create Custom Dataset","d6005e4e":"### Visualize Images","429fdfc0":"### Load in the Data","52219978":"### Create a DataLoader","b4d10dea":"### Visualize One Example","fdac666f":"# Implementing Custom PyTorch Dataset\n## By Sergei Issaev","553c0428":"Welcome to my notebook introducing the use of custom PyTorch Datasets. This notebook is the source code to an article published on Medium, at https:\/\/medium.com\/@sergei740. Thank you for reading, and don't forget to leave an upvote if you appreciate this content!","f61dbd5f":"### Compare with Different Data Augmentations","1f13233b":"### Import Libraries","6b423e52":"### Convert Data to uint8"}}