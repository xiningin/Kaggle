{"cell_type":{"1903cefa":"code","8d0dddcd":"code","33a77d2d":"code","7fef6f9d":"code","e5586b97":"code","9c199169":"code","04c82e8b":"code","98bf688b":"code","6edbc4b7":"code","4cc4a5dc":"code","c79b0d7b":"code","bdd8f9b2":"code","b5b094bf":"code","80c932a1":"code","290b5231":"code","e2a8d594":"code","9d05a2fd":"code","8642583e":"code","9e14ce51":"code","4959ee5c":"code","08a5772a":"code","4031ae3b":"code","e23f42f3":"code","387d187b":"code","dce1116c":"code","2b74c2e4":"code","97777a8a":"code","ff364067":"code","ef903b23":"code","bf115db5":"code","d7c61b16":"code","f54853e4":"code","a7364c82":"markdown","c42182b5":"markdown","8942f3f5":"markdown","ba434fdb":"markdown","0152113b":"markdown","5367a350":"markdown","774c6d0c":"markdown","ce061715":"markdown","0f9c6a67":"markdown","a20ccc7a":"markdown","deb366d9":"markdown","97fcd336":"markdown"},"source":{"1903cefa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8d0dddcd":"import fastai\nprint(fastai.version.__version__)\nfrom fastai.tabular import * \n\nfrom pathlib import Path\nimport seaborn as sns\n\nfrom IPython.display import display\nfrom IPython.display import HTML\nimport altair as alt\nfrom altair.vega import v3","33a77d2d":"##-----------------------------------------------------------\n# This whole section \nvega_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega@' + v3.SCHEMA_VERSION\nvega_lib_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lib'\nvega_lite_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lite@' + alt.SCHEMA_VERSION\nvega_embed_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-embed@3'\nnoext = \"?noext\"\n\npaths = {\n    'vega': vega_url + noext,\n    'vega-lib': vega_lib_url + noext,\n    'vega-lite': vega_lite_url + noext,\n    'vega-embed': vega_embed_url + noext\n}\n\nworkaround = \"\"\"\nrequirejs.config({{\n    baseUrl: 'https:\/\/cdn.jsdelivr.net\/npm\/',\n    paths: {}\n}});\n\"\"\"\n\n#------------------------------------------------ Defs for future rendering\ndef add_autoincrement(render_func):\n    # Keep track of unique <div\/> IDs\n    cache = {}\n    def wrapped(chart, id=\"vega-chart\", autoincrement=True):\n        if autoincrement:\n            if id in cache:\n                counter = 1 + cache[id]\n                cache[id] = counter\n            else:\n                cache[id] = 0\n            actual_id = id if cache[id] == 0 else id + '-' + str(cache[id])\n        else:\n            if id not in cache:\n                cache[id] = 0\n            actual_id = id\n        return render_func(chart, id=actual_id)\n    # Cache will stay outside and \n    return wrapped\n            \n@add_autoincrement\ndef render(chart, id=\"vega-chart\"):\n    chart_str = \"\"\"\n    <div id=\"{id}\"><\/div><script>\n    require([\"vega-embed\"], function(vg_embed) {{\n        const spec = {chart};     \n        vg_embed(\"#{id}\", spec, {{defaultStyle: true}}).catch(console.warn);\n        console.log(\"anything?\");\n    }});\n    console.log(\"really...anything?\");\n    <\/script>\n    \"\"\"\n    return HTML(\n        chart_str.format(\n            id=id,\n            chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None)\n        )\n    )\n\nHTML(\"\".join((\n    \"<script>\",\n    workaround.format(json.dumps(paths)),\n    \"<\/script>\",\n    \"This code block sets up embedded rendering in HTML output and<br\/>\",\n    \"provides the function `render(chart, id='vega-chart')` for use below.\"\n)))","7fef6f9d":"admission = Path('..\/input')\nadmission.ls()","e5586b97":"df = pd.read_csv(admission \/ 'Admission_Predict_Ver1.1.csv')\nprint('Original columns: ', df.columns)\ncol_name_map = {}\nfor col in df.columns:\n    col_name_map[col] = col.rstrip()\ndf.rename(columns=col_name_map, inplace=True)\nprint('Cleaned columns: ', df.columns)\nprint('Shape of data: ', df.shape)\ndisplay(df.head())\nprint('Are there any missing data?')\ndisplay(df.isna().any())","9c199169":"g = sns.PairGrid(df[df.columns[1:]], diag_sharey=False)\ng.map_lower(sns.kdeplot)\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.kdeplot, lw=3)","04c82e8b":"dep_var = 'Chance of Admit'\ncont_names = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR', 'CGPA']\ncat_names = ['Research']\nprocs = [Categorify, Normalize]","98bf688b":"data = (\n    TabularList.from_df(df, cat_names=cat_names, cont_names=cont_names, procs=procs)\n               .split_by_idx(valid_idx=range(400,500))\n               .label_from_df(cols=dep_var)\n               .databunch()\n)","6edbc4b7":"data.show_batch()","4cc4a5dc":"# data.train_ds.to_df() is giving error \"AttributeError: 'int' object has no attribute 'relative_to'\"","c79b0d7b":"import numpy as np\nfrom typing import List, Tuple","bdd8f9b2":"def convert_ddl_to_df(ddl:fastai.basic_data.DeviceDataLoader, \n                      cat_names:list, \n                      cont_names:list)->Tuple[pd.DataFrame, pd.DataFrame]:\n    ''' Convert a `fastai.basic_data.DeviceDataLoader` instance into \n        two `pandas.DataFrame`s: the features and the target.\n    '''\n    list_data_array = list()\n    for (x_cat, x_cont),y in ddl:\n        tmp_array = np.concatenate((np.array(x_cat),np.array(x_cont),np.array(y).reshape(-1,1)), axis=1)\n        list_data_array.append(tmp_array)\n    data_array = np.concatenate(list_data_array, axis=0)\n    \n    columns = []\n    for names in (cat_names, cont_names, ['target',]):\n        columns.extend(names)\n    \n    df = pd.DataFrame(data_array, columns=columns)\n    return df[columns[:-1]], df[['target']]\n","b5b094bf":"dataloader_train = data.dl(DatasetType.Train)\ndataloader_valid = data.dl(DatasetType.Valid)\nX_train, Y_train = convert_ddl_to_df(dataloader_train, cat_names=cat_names, cont_names=cont_names)\nX_valid, Y_valid = convert_ddl_to_df(dataloader_valid, cat_names=cat_names, cont_names=cont_names)","80c932a1":"learn = tabular_learner(data, layers=[100,100,], metrics=[root_mean_squared_error, mean_squared_logarithmic_error, r2_score])","290b5231":"learn.fit_one_cycle(30, 1e-2)","e2a8d594":"learn.save('stage-1')","9d05a2fd":"learn.recorder.plot_metrics()","8642583e":"print(learn.summary())","9e14ce51":"row = df.iloc[-10]\nrow['Chance of Admit']","4959ee5c":"learn.predict(row)","08a5772a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error, r2_score","4031ae3b":"doe_RF = []\nfor n in range(10,200,20):\n    RFR_model = RandomForestRegressor(n_jobs=-1)\n    RFR_model.set_params(n_estimators=n)\n    RFR_model.fit(X_train, Y_train)\n    doe_RF.append(\n        (n, mean_squared_log_error(Y_valid, RFR_model.predict(X_valid)), r2_score(Y_valid, RFR_model.predict(X_valid)))\n    )\ndf_doe_RF = pd.DataFrame(doe_RF, columns=['n_estimator','msle','r2_score'])","e23f42f3":"base=alt.Chart(df_doe_RF).encode(\n    alt.X('n_estimator:Q')\n)\nmsle = base.mark_line(color='red').encode(\n    alt.Y('msle:Q'),\n)\nr2 = base.mark_line(color='green').encode(\n    alt.Y('r2_score:Q')\n)\nrender(alt.layer(msle,r2).resolve_scale(y='independent'))\ndisplay(df_doe_RF)","387d187b":"df_nn_record = pd.DataFrame(np.array(learn.recorder.metrics), columns=['root_mean_squared_error','mean_squared_logarithmic_error','r2_score'])\nprint(df_nn_record.max().r2_score, df_nn_record.min().mean_squared_logarithmic_error)","dce1116c":"print(df_doe_RF.max().r2_score, df_doe_RF.min().msle)","2b74c2e4":"df = pd.DataFrame({'FN':X_train.columns, \n                   'FI':RFR_model.feature_importances_})","97777a8a":"def plot_fi(df, f_name, f_imp):\n    chart = alt.Chart(df).mark_bar().encode(\n        alt.X(f'{f_imp}:Q'),\n        alt.Y(f'{f_name}:N', sort=alt.EncodingSortField(\n                field=f\"{f_imp}\",  # The field to use for the sort\n                op=\"sum\",  # The operation to run on the field prior to sorting\n                order=\"descending\"  # The order to sort in\n            ))\n    )\n    return chart","ff364067":"render(plot_fi(df, 'FN', 'FI'))","ef903b23":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.metrics.scorer import make_scorer","bf115db5":"perm_importance = PermutationImportance(RFR_model, scoring=make_scorer(r2_score),\n                                   n_iter=50, random_state=42, cv=\"prefit\")\nperm_importance.fit(X_valid, Y_valid)\n","d7c61b16":"df_imp = eli5.explain_weights_df(perm_importance)\ndf_label = pd.DataFrame({'feature': [ \"x\" + str(i) for i in range(len(X_valid.columns))], 'feature_name': X_valid.columns.values})\ndf_imp = pd.merge(df_label, df_imp, on='feature', how='inner', validate=\"one_to_one\")","f54853e4":"render(plot_fi(df_imp, 'feature_name', 'weight'))","a7364c82":"## Basic Data Housekeeping\n    1. Columns name cleanup\n    2. Check if missing data exists (na)","c42182b5":"### Train with RF","8942f3f5":"2. permutation feature importance (__model-agnostic__)\n\n> For each column, permute all the values (in that column), and train a new model with the modified dataset and see how the model performs (wrt the metric of interest)\n\n> Get the average decrease of performace for each column (feature), which indicates the importance","ba434fdb":"## Library Import","0152113b":"### Get processed data as `DataFrame` from `DataLoader` so that `sklearn` can access\n> This is a workaround as `data.train_ds.to_df()` is not working","5367a350":"> **side question**: how to get the whole dataframe for training and validation? `data.train_ds.to_df()` doesn't seem to work ...","774c6d0c":"## Try Interpreting Feature Importance (from the RF model)\n1. tree-specific feature importance from `RandomForestRegresser` build-in attribute","ce061715":"### Train with NN","0f9c6a67":"## Compare Neutral Network result with RandomForest result\n> it seems that the performance are comparable, while RF is doing a little bit better","a20ccc7a":"## ML with `fastai`\n> Using Neutral Network\n### Create tabular `DataBunch`","deb366d9":"## Data Visualization\n### [Observation] **Strong linear correlation between `Chance of Admit` and : **\n1. `GRE Score`\n2. `TOEFL Score`\n3. `SOP`\n4. `CGPA`\n","97fcd336":"## Inference"}}