{"cell_type":{"a785300a":"code","defe42f8":"code","2817e15a":"code","ac792190":"code","ea74d42f":"code","3969428f":"code","b8de2bd6":"code","d6f6f4aa":"code","568bbe36":"code","f5d60688":"code","c8f85e8c":"code","4eec3cfd":"markdown"},"source":{"a785300a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","defe42f8":"import matplotlib.pyplot as plt\nimport seaborn as sn\nsn.set()","2817e15a":"import pandas as pd\ncars = pd.read_csv(\"..\/input\/carsdata\/cars.csv\", na_values= ' ')","ac792190":"cars.head()\ncars.dropna()","ea74d42f":"cars.columns","3969428f":"cars.columns=['mpg', 'cylinders', 'cubicinches', 'hp', 'weightlbs', 'time-to-60','year', 'brand']","b8de2bd6":"cars = cars.dropna()\nX = cars.iloc[:,:6]\nX.head()\nX.describe()","d6f6f4aa":"X_array = X.values\nX_array\n\nX['cubicinches'] = X['cubicinches'].astype(str)\nX['cubicinches'] = X['cubicinches'].astype(int)\n\nX['weightlbs'] = X['weightlbs'].astype(str)\nX['weightlbs'] = X['weightlbs'].astype(int)","568bbe36":"from sklearn.impute import SimpleImputer\nSI = SimpleImputer()\nXSI = SI.fit_transform(X)","f5d60688":"# M\u00e9todo cotovelo (elbow method) para encontrar o n\u00famero de clusters \u00f3timo\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i,init='k-means++',max_iter=300,n_init=10,random_state=0)\n    kmeans.fit(X_array)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1,11),wcss)\nplt.title('M\u00e9todo cotovelo - Elbow Method')\nplt.xlabel('N\u00famero de Clusters')\nplt.ylabel('WCSS')\nplt.show()","c8f85e8c":"kmeans = KMeans(n_clusters=4,init='k-means++',max_iter=300,n_init=10,random_state=0)\ncars['clusters'] = kmeans.fit_predict(X_array)\ncars.head()\ncars.groupby(\"clusters\").agg('mean').plot.bar(figsize=(10,7.5))\nplt.title(\"Gastos por cluster\")","4eec3cfd":"## Importe o dataset cars data do Kaggle em um novo notebook , em seguida, crie um modelo para execu\u00e7\u00e3o do algoritmo K-means, treine, teste e apresente o gr\u00e1ficos:\n\n# 1) M\u00e9todo Cotovelo\n# 2) Agrega\u00e7\u00e3o dos clusters por m\u00e9dia\n"}}