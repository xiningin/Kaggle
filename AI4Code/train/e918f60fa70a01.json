{"cell_type":{"fb1a8b60":"code","24adb34b":"code","7631f46c":"code","49a3f326":"code","9c4b3f2a":"code","d012fb42":"code","0b9a52df":"code","93dda7a8":"code","f2d14a79":"code","b4d43f59":"code","075f9730":"code","3cb3f3be":"markdown"},"source":{"fb1a8b60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24adb34b":"import sqlite3\nimport pandas as pd\n# Create your connection.\ncnx = sqlite3.connect('..\/input\/reviews-glassdoor\/reviews_train.db')\n\ndf_train = pd.read_sql_query(\"SELECT * FROM reviews\", cnx)\n\n","7631f46c":"df_train","49a3f326":"df_train.info()","9c4b3f2a":"df_train['rating_diversity'].value_counts()","d012fb42":"import numpy as np\nimport pandas as pd\nimport os\nimport sys\n\nimport matplotlib.pyplot as plt\nimport math\nimport itertools\n\nimport random\nimport seaborn as sns\nLOOK_AT = 10\nSEED = 42\nnp.random.seed(SEED)\nrandom.seed(SEED)","0b9a52df":"df_train.dropna()","93dda7a8":"import pandas as pd\nfrom sklearn import preprocessing\nparameter_columns = ['rating_overall','rating_balance', 'rating_culture', 'rating_career','rating_comp','rating_mgmt','years_at_company','helpful']\n\n\n\nmin_max_scaler = preprocessing.MinMaxScaler()\nscaled = min_max_scaler.fit_transform(df_train[parameter_columns])\ndf_train[[parameter for parameter in parameter_columns]] = scaled","f2d14a79":"X =df_train[['rating_overall','rating_balance', 'rating_culture', 'rating_career','rating_comp','rating_mgmt','years_at_company','helpful']]\nY =df_train['rating_diversity']","b4d43f59":"from xgboost import XGBClassifier \nfrom matplotlib import pyplot as plt \nfrom matplotlib.pyplot import figure\n\nclassifier = XGBClassifier() ","075f9730":"classifier.fit(X, Y) \nprint(classifier.feature_importances_)\nfigure(figsize=(15, 4.5), dpi=80,)\nplt.bar(X.columns,classifier.feature_importances_)\nplt.show()","3cb3f3be":"# 1. Feature importance "}}