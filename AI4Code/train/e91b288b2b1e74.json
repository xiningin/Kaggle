{"cell_type":{"6071b2ee":"code","7627004a":"code","8a4d2857":"code","6037ba79":"code","2b4204a7":"code","03d03df0":"code","29706b00":"code","d641632f":"code","4c716788":"code","6e892598":"code","4db47b09":"code","2d7069df":"code","f8862362":"code","fd9a0c92":"code","c99775fa":"code","edc78a58":"code","068bb117":"code","1685de7d":"code","9815b698":"code","dd60fdc4":"code","0f1b1a7a":"code","3c93d299":"code","07fefd46":"markdown","8f5a8a01":"markdown","78d9f42d":"markdown","cac40192":"markdown","a6d8e948":"markdown","fd8ac00a":"markdown","1558ca0e":"markdown","e8a4e178":"markdown","2a54e215":"markdown","9beeb32d":"markdown","ee50e0b4":"markdown","8b661620":"markdown"},"source":{"6071b2ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv) \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7627004a":"train_df  = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nprint (\"*\"*10, \"Dataset information\", \"*\"*10)\nprint (train_df.info())","8a4d2857":"print (\"*\"*10, \"First 5 Train File Rows\", \"*\"*10)\ntrain_df.head(5)","6037ba79":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nprint(test_df.info())","2b4204a7":"train_df.info()","03d03df0":"train_df.Cabin.value_counts()","29706b00":"train_df.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin'], inplace= True, axis = 1)\ntest_df.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin'], inplace= True, axis = 1)","d641632f":"print(train_df.info(), test_df.info())","4c716788":"train_df.Embarked.value_counts()","6e892598":"#Embarked null fix\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset.Embarked = dataset.Embarked.fillna('S')","4db47b09":"train_df.info()","2d7069df":"train_df['Sex'].value_counts()","f8862362":"genderMap = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df] \n\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genderMap)","fd9a0c92":"train_df['Embarked'].value_counts()","c99775fa":"embarkedMap = {\"S\": 0, \"C\": 1, \"Q\":2}\ndata = [train_df, test_df] \n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarkedMap)","edc78a58":"print(train_df.info(), test_df.info())","068bb117":"X_train = train_df.drop(['Survived', 'PassengerId'], axis=1)\nY_train = train_df['Survived']","1685de7d":"X_test = test_df.drop(\"PassengerId\", axis=1)","9815b698":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state = 0) \nclf.fit(X_train, Y_train)\n\nY_pred  = clf.predict(X_test)","dd60fdc4":"print(Y_pred)","0f1b1a7a":"acc_logistic = round(clf.score(X_train, Y_train)*100, 2)\n\nprint (acc_logistic)","3c93d299":"output = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': Y_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","07fefd46":"### Score submission for the Baseline","8f5a8a01":"Null values for:\n* Train_df = Embarked","78d9f42d":"### Basic Level 1.0 - The Titanic Dataset","cac40192":"### Identify columns with datatype other than int or float","a6d8e948":"### Model Evaluation","fd8ac00a":"If you have reached till here, share your experience in the comments section. \n\nNext, I will be creating an intermediate version of this where we will add few features, do some data cleaning and feature engineering. Also, I will show how to use few other models and see compare the scores. \n\n## If you like the notebook please upvote for it!\n\nStay tuned!","1558ca0e":"### Separating X's and Y's i.e. features and labels","e8a4e178":"### Identify Features with NULL values, Fix the NULL values","2a54e215":"This notebook is created in for the Youtube Channel Video.\n\nChannel Link:https:\/\/bit.ly\/2NdLnbg\n\nVideo Link:https:\/\/youtu.be\/ZtMz0bFTdXg\n\n\n![Titanic%20wall%20paper.png](attachment:Titanic%20wall%20paper.png)","9beeb32d":"### Read the Data, describe rows and columns","ee50e0b4":"### Deleting features that we are not using for the BASELINE","8b661620":"### Select a model and train it."}}