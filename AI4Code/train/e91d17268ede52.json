{"cell_type":{"86101896":"code","81f70907":"code","963deaa7":"code","b4262ec7":"code","113fef36":"code","24e64af2":"code","6174726c":"code","647f4b1a":"code","3e8c28c8":"code","aaeb8f28":"code","8d5ea47d":"code","4f839908":"code","3b12e917":"code","7e3ba2bf":"code","e3ed2b00":"code","899cb3fa":"code","727e6821":"code","4c683eff":"code","057d6d94":"code","2c912b9a":"code","e0bf3c75":"code","37b72bd2":"code","18b6bf90":"code","dad09f50":"code","4a488093":"code","e3e43d3b":"code","868e24a2":"code","21296e62":"code","5ac9511e":"code","852872da":"code","4a387477":"code","092e2cb2":"code","2df09279":"code","21be3984":"code","420cef6e":"code","14d70eab":"code","4f71b019":"code","14b43dd3":"code","be4fe9c8":"markdown","09b85877":"markdown","7e9ace35":"markdown","97709997":"markdown","1635b02b":"markdown","e04324d9":"markdown","c8752155":"markdown","4cab7e9e":"markdown","f3ea2b02":"markdown","2eec300d":"markdown","1f427380":"markdown","35d328d1":"markdown","962d8229":"markdown","e391a8f6":"markdown","5676f483":"markdown","108225a6":"markdown","51318014":"markdown","4fc20690":"markdown","bea16d42":"markdown","07d69467":"markdown","02230afd":"markdown","362eeac1":"markdown","122a255e":"markdown","8d4bf510":"markdown","e89161ab":"markdown","d3c85e3b":"markdown","da9451c8":"markdown","26f46e58":"markdown","19fa36c3":"markdown","6ab0167f":"markdown","6c6fe3e8":"markdown","7e6c0c3c":"markdown","389e0e6a":"markdown","a7d6d4b1":"markdown","637cfcb8":"markdown","1f8fd77e":"markdown","f7064227":"markdown","eaf7ce4a":"markdown","5c6d9959":"markdown","4f0223ac":"markdown","c57b032e":"markdown","01bb1431":"markdown","173d4b16":"markdown","c3cdc32d":"markdown","66a26768":"markdown","34d4221c":"markdown","221cdf0e":"markdown","5e51b1de":"markdown"},"source":{"86101896":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","81f70907":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndata.head()","963deaa7":"df=data.drop([\"Id\"], axis=1)  # dropping column \"Id\"\ndf.plot()\nplt.show()","b4262ec7":"df.plot(x=\"SepalLengthCm\",\n         y=\"PetalLengthCm\")\nplt.show()","113fef36":"df.iloc[:20,1].plot(kind=\"bar\")  # getting first 20 rows of column \"SepalWidthCm\"\nplt.show()\n","24e64af2":"df.iloc[:20].plot.bar()  # getting first 20 rows of all columns\nplt.show()","6174726c":"df.iloc[:20].plot.bar(stacked=True)  # getting first 20 rows of all columns\nplt.show()","647f4b1a":"df.iloc[:20].plot.barh(stacked=True)  # getting first 20 rows of all columns\nplt.show()","3e8c28c8":"df.plot.hist(figsize=(10,4),\n              alpha=0.5)\nplt.show()","aaeb8f28":"df.plot.hist(figsize=(10,4),\n              alpha=0.5,\n              stacked=True,\n              bins=25)\nplt.show()","8d5ea47d":"df.iloc[:,0].plot.hist(cumulative=True) # getting all rows and first column\nplt.show()","4f839908":"df.hist()\nplt.show()","3b12e917":"df.hist(color='r', alpha=0.5, bins=50, figsize=(7,5))\nplt.show()","7e3ba2bf":"df.hist(by=\"Species\",\n         bins=5,\n         alpha=0.8,\n         figsize=(7,5))\nplt.show()","e3ed2b00":"df.plot.box()\nplt.show()","899cb3fa":"color = {'boxes': 'DarkGreen', 'whiskers': 'DarkOrange',\n         'medians': 'DarkBlue', 'caps': 'Gray'}\ndf.plot.box(color=color, sym=\"b.\")\nplt.show()","727e6821":"df.plot.box(vert=False,\n             positions=[1, 4, 5, 6])\nplt.show()","4c683eff":"df.boxplot()\nplt.show()","057d6d94":"df.boxplot(by=\"Species\",\n            figsize=(10,5))\nplt.show()","2c912b9a":"df.groupby(\"Species\").boxplot(figsize=(15,8))\nplt.show()","e0bf3c75":"df.boxplot(column=[\"SepalLengthCm\", \"PetalLengthCm\"],\n            by=\"Species\",\n            figsize=(10,5))\nplt.show()","37b72bd2":"df.plot.area()\nplt.show()","18b6bf90":"df.plot.area(stacked=False) \nplt.show()","dad09f50":"df.plot.scatter(x=\"SepalLengthCm\",\n                 y=\"SepalWidthCm\")\nplt.show()","4a488093":"ax=df.plot.scatter(x=\"SepalLengthCm\",\n                     y=\"SepalWidthCm\",\n                     color=\"b\",\n                    label=\"Sepals\")\ndf.plot.scatter(x=\"PetalLengthCm\",\n                 y=\"PetalWidthCm\",\n                 color=\"r\",\n                 label=\"Petals\",\n                 ax=ax)\nplt.xlabel(\"LenghtCm\")  # changing label of x axis\nplt.ylabel(\"WidthCm\")   # changing label of y axis\nplt.show()","e3e43d3b":"ax=data.plot.scatter(x=\"Id\",\n                     y=\"SepalLengthCm\",\n                     color=\"b\",\n                     label=\"SepalLengthCm\",\n                     alpha=0.5)\n\ndata.plot.scatter(x=\"Id\",\n                  y=\"SepalWidthCm\",\n                  color=\"r\",\n                  label=\"SepalWidthCm\",\n                  alpha=0.5,\n                  ax=ax)\n\ndata.plot.scatter(x=\"Id\",\n                  y=\"PetalLengthCm\",\n                  color=\"g\",\n                  label=\"PetalLengthCm\",\n                  alpha=0.5,\n                  ax=ax)\n\ndata.plot.scatter(x=\"Id\",\n                  y=\"PetalWidthCm\",\n                  color=\"y\",\n                  label=\"PetalWidthCm\",\n                  alpha=0.5,\n                  ax=ax)\nplt.ylabel(\"Length & Width\")\nplt.show()","868e24a2":"data.plot.scatter(x=\"Id\",\n                  y=\"SepalWidthCm\", \n                  c=\"PetalLengthCm\",\n                  s=100)     # s --> scatter size\nplt.show()","21296e62":"data.plot.scatter(x=\"Id\",\n                  y=\"SepalWidthCm\", \n                  s=data[\"PetalWidthCm\"]*100)     \nplt.show()","5ac9511e":"data.plot.hexbin(x=\"PetalLengthCm\",\n                y=\"PetalWidthCm\",\n                gridsize=20)\nplt.show()","852872da":"data.plot.hexbin(x=\"PetalLengthCm\",\n                y=\"PetalWidthCm\",\n                C=\"SepalLengthCm\",\n                gridsize=20)\nplt.show()\n\n# In plot : color density shows the Sepal Lengths of at each Petal Lenght and Petal Width cross.\n# We can say that: sepal lenght ranges from 4 to 8 cm.","4a387477":"data.plot.hexbin(x=\"PetalLengthCm\",\n                y=\"PetalWidthCm\",\n                C=\"SepalLengthCm\",\n                reduce_C_function=np.sum,\n                gridsize=20)\nplt.show()\n\n# In this plot: color density shows the sum of Sepal Length values at each x and y cros.\n# For example: samples that having petal length around 1.5 cm and petal width of around 0.25 cm; sum of Sepal Length \u0131f those samples is around 85. ","092e2cb2":"# getting species by groupby and sum method\ndf.groupby(\"Species\").sum().plot.pie(subplots=True, \n                                     figsize=(20,20),\n                                     legend=False)\n\nplt.show()","2df09279":"df.Species.value_counts().plot.pie()   # getting species count by value_counts() method\nplt.show()","21be3984":"df.Species.value_counts().plot.pie(legend=True,\n                                  labels=[\"Virginica\",\"Versicolor\",\"Setosa\"],\n                                  colors=[\"red\",\"blue\",\"orange\"],\n                                  autopct=\"%.2f\",\n                                  fontsize=10,\n                                  figsize=(5,5),\n                                  rotatelabels=True,\n                                  labeldistance=0.1,\n                                  pctdistance=0.8)   \nplt.show()","420cef6e":"from pandas.plotting import scatter_matrix","14d70eab":"scatter_matrix(df, alpha=0.2, figsize=(10, 10), diagonal='hist')\nplt.show()","4f71b019":"from pandas.plotting import radviz","14b43dd3":"radviz(df,\"Species\")\nplt.show()","be4fe9c8":"<a id=\"1\"><\/a>\n## 1.Basic plotting: plot() method","09b85877":"<a id=\"B\"><\/a>\n## ii.\u0130mporting data","7e9ace35":"* ### To get horizontal bar plots, use the barh method:","97709997":"## Table of Contents\n* [i. Loading Libraries](#A) <br>\n* [ii. Importing data](#B) <br>\n* [1. Basic plotting: plot() method](#1) <br>\n* [2. Bar plot: plot(kind=\"bar\") method](#2) <br>\n* [3. Stacked Bar plot: plot.bar(stacked=True) method](#3) <br>\n* [4. Histograms: DataFrame.plot.hist() method](#4) <br>\n* [5. Histograms: DataFrame.hist() method](#5) <br>\n* [6. Box Plot: DataFrame.plot.box() method](#6) <br>\n* [7. Box Plot: DataFrame.boxplot() method](#7) <br>\n* [8. Area Plot: DataFrame.plot.area() method](#8) <br>\n* [9. Scatter: DataFrame.plot.scatter() method](#9) <br>\n    * [9.1. Repeat plot method specifying target ax](#9.1) <br>\n    * [9.2. Keyword color as name of a column](#9.2) <br>\n    * [9.3. Bubble size as name of a column](#9.3) <br>\n* [10. Hexagonal Bin Plot: DataFrame.plot.hexbin() method](#10) <br>   \n* [11. Pie Plot: DataFrame.plot.pie() method](#11) <br>   \n* [12. Scatter Matrix Plot](#12) <br>   \n* [13. Radviz Plot](#13) <br>   ","1635b02b":"<a id=\"10\"><\/a>\n## 10.Hexagonal Bin Plot: DataFrame.plot.hexbin() ","e04324d9":"<a id=\"9.3\"><\/a>\n* You can set to bubble size to value of a column of dataframe:","c8752155":"* Changing bin numbers, color, opacity and figure size:","4cab7e9e":"* You can create a stratified boxplot using the by keyword argument to create groupings. For instance,","f3ea2b02":"<a id=\"9.2\"><\/a>\n* The keyword c may be given as the name of a column to provide colors for each point:","2eec300d":"* A histogram can be stacked using stacked=True. Bin size can be changed using the bins keyword.","1f427380":"* Also, you can pass other keywords supported by matplotlib boxplot. \n* For example, horizontal and custom-positioned boxplot can be drawn by *vert=False* and *positions* keywords.","35d328d1":"<a id=\"11\"><\/a>\n## 11.Pie Plot: DataFrame.plot.pie() ","962d8229":"* To produce an unstacked plot, pass *stacked=False*. Alpha value is set to 0.5 unless otherwise specified:","e391a8f6":"<a id=\"9.1\"><\/a>\n* To plot multiple column groups in a single axes: repeat plot method specifying target ax. \n* It is recommended to specify *color* and *label* keywords to distinguish each groups.","5676f483":"<a id=\"A\"><\/a>\n## i.Loading Libraries","108225a6":"<a id=\"2\"><\/a>\n## 2.Bar plot: plot(kind=\"bar\") method","51318014":"* Grouping data by \"Species\" first and then boxplot:","4fc20690":"* ### On DataFrame, plot() is a convenience to plot all of the columns with labels:","bea16d42":"* Scatter plot can be drawn by using the *DataFrame.plot.scatter()* method. \n* Scatter plot requires numeric columns for the x and y axes. \n* These can be specified by the x and y keywords.","07d69467":"<a id=\"5\"><\/a>\n## 5.Histograms : DataFrame.hist() method","02230afd":"* By default, a histogram of the counts around each (x, y) point is computed. \n* You can specify alternative aggregations by passing values to the `C` and `reduce_C_function` arguments. \n* C specifies the value at each (x, y) point.\n* And `reduce_C_function` is a function of one argument that reduces all the values in a bin to a single number (e.g. mean, max, sum, std). \n* In this example the positions are given by columns PetalLengthCm and PetalWidthCm, while the value is given by column SepalLengthCm. \n* The bins are aggregated with NumPy\u2019s sum function.","362eeac1":"* ###  You can plot one column versus another using the x and y keywords in plot():","122a255e":"<a id=\"9\"><\/a>\n## 9.Scatter Plot: DataFrame.plot.scatter() ","8d4bf510":"* A useful keyword argument is gridsize; \n* it controls the number of hexagons in the x-direction, and defaults to 100. \n* A larger gridsize means more, smaller bins.","e89161ab":"* Boxplot can be colorized by passing \"*color*\" keyword. \n* You can pass a dict whose keys are \"*boxes*\", \"*whiskers*\", \"*median*\" and \"*caps*\". \n* If some keys are missing in the dict, default colors are used for the corresponding artists. \n* Also, boxplot has \"*sym*\" keyword to specify fliers style.\n\n* When you pass other type of arguments via color keyword, \n* it will be directly passed to matplotlib for all the boxes, whiskers, medians and caps colorization.","d3c85e3b":"<a id=\"3\"><\/a>\n## 3.Stacked Bar plot: plot.bar(stacked=True) method","da9451c8":"* You can pass other keywords supported by matplotlib hist. \n* For example, horizontal and cumulative histograms can be drawn by orientation='horizontal' and cumulative=True.","26f46e58":"You can pass other keywords supported by matplotlib scatter.\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter","19fa36c3":"### The \"by\" keyword can be specified to plot grouped histograms:","6ab0167f":"* You can create a pie plot with `DataFrame.plot.pie()` or `Series.plot.pie()`. \n* If your data includes any NaN, they will be automatically filled with 0. \n* A ValueError will be raised if there are any negative values in your data.\n* Note that pie plot with DataFrame requires that you either specify a target column by the `y` argument or `subplots=True`.\n* When `y` is specified, pie plot of selected column will be drawn.\n* If `subplots=True` is specified, pie plots for each column are drawn as subplots. \n* A legend will be drawn in each pie plots by default; specify `legend=False` to hide it.","6c6fe3e8":"<a id=\"7\"><\/a>\n## 7.Box Plot: DataFrame.boxplot() ","7e6c0c3c":"<a id=\"13\"><\/a>\n## 13.Radviz","389e0e6a":"* You can create a scatter plot matrix using the `scatter_matrix` method in pandas.plotting:","a7d6d4b1":"* Histograms can be drawn by using the DataFrame.plot.hist() and Series.plot.hist() methods.","637cfcb8":"* You can use the `labels` and `colors` keywords to specify the labels and colors of each wedge.\n* Most pandas plots use the label and color arguments (note the lack of \u201cs\u201d on those). \n* To be consistent with matplotlib.pyplot.pie() you must use labels and colors.\n* If you want to hide wedge labels, specify `labels=None`. \n* If `fontsize` is specified, the value will be applied to wedge labels. \n* Also, other keywords supported by `matplotlib.pyplot.pie()` can be used:\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie","1f8fd77e":"* ### To produce a stacked bar plot, pass stacked=True:","f7064227":"* You can create area plots with *Series.plot.area()* and *DataFrame.plot.area()*. \n* Area plots are stacked by default. \n* To produce stacked area plot, each column must be either all positive or all negative values.\n* When input data contains NaN, it will be automatically filled by 0. \n* If you want to drop or fill by different values, use *dataframe.dropna()* or *dataframe.fillna() *before calling plot.","eaf7ce4a":"* You can create hexagonal bin plots with DataFrame.plot.hexbin(). \n* Hexbin plots can be a useful alternative to scatter plots if your data are too dense to plot each point individually.","5c6d9959":"* The existing interface DataFrame.hist to plot histogram still can be used.\n* DataFrame.hist() plots the histograms of the columns on multiple subplots:","4f0223ac":"<a id=\"6\"><\/a>\n## 6.Box Plot: DataFrame.plot.box()","c57b032e":"Boxplot can be drawn calling :\n* Series.plot.box() and \n* DataFrame.plot.box(), or \n* DataFrame.boxplot() to visualize the distribution of values within each column.","01bb1431":"![image.png](attachment:image.png)","173d4b16":"* ### Plotting methods allow for a handful of plot styles other than the default line plot. \n* ### These methods can be provided as the kind keyword argument to plot(), and include:","c3cdc32d":"<a id=\"12\"><\/a>\n## 12.Scatter Matrix Plot","66a26768":"<a id=\"8\"><\/a>\n## 8.Area Plot: DataFrame.plot.area() ","34d4221c":"* You can also pass a subset of columns to plot, as well as group by multiple columns:","221cdf0e":"See the boxplot method and the matplotlib boxplot documentation for more:\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot","5e51b1de":"<a id=\"4\"><\/a>\n## 4.Histograms: DataFrame.plot.hist()"}}