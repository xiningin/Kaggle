{"cell_type":{"f69bac89":"code","7152ec03":"code","646cbfc8":"code","9ac4ea1d":"code","43790d9c":"code","87f25cc6":"code","9f734fac":"code","6e4d932a":"code","4eaf946f":"code","97d5b06e":"code","3a6fe36f":"code","38bf3b4c":"code","36b37a64":"code","55ef41c5":"code","09829b4b":"code","595265ea":"code","90e36b99":"code","2a8cfcf4":"markdown","a7d91748":"markdown","de6579c9":"markdown","1172476f":"markdown"},"source":{"f69bac89":"import warnings; warnings.filterwarnings('ignore')\nimport numpy as np,pandas as pd,pylab as pl\nimport glob\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential,Model\nfrom keras.optimizers import SGD,RMSprop,Adam,Nadam\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense,Dropout,LSTM\nfrom keras.layers import Activation,Flatten,Input,BatchNormalization\nfrom keras.layers import Conv1D,MaxPooling1D,Conv2D,MaxPooling2D\nfrom keras.layers import GlobalAveragePooling2D,GlobalMaxPooling2D","7152ec03":"path='..\/input\/svhn-preproccessed-fragments\/'\nfw='weights.housenumbers.hdf5'\nglob.glob(path+'*')","646cbfc8":"import cv2\nimport numpy as np\ntrain_images=pd.read_csv(path+'train_images.csv')\ntrain_labels=pd.read_csv(path+'train_labels.csv')\ntest_images=pd.read_csv(path+'test_images.csv')\ntest_labels=pd.read_csv(path+'test_labels.csv')\nextra_images=pd.read_csv(path+'extra_images.csv')\nextra_labels=pd.read_csv(path+'extra_labels.csv')\n\ntrain_images=train_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\ntrain_labels=train_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\ntest_images=test_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\ntest_labels=test_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\nextra_images=extra_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\nextra_labels=extra_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\n\n\nn=np.random.randint(1,2000,1)[0]\nprint('Label: ',train_labels[n])\n#print(ctrain_labels[n])\npl.imshow(train_images[n].reshape(32,32),\n          cmap=pl.cm.bone);\n\n'''\ntrain_images_t=train_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\ntrain_labels=train_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\ntest_images_t=test_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\ntest_labels=test_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\nextra_images_t=extra_images.iloc[:,1:]\\\n.as_matrix().astype('float32').reshape(-1,32,32,1)\nextra_labels=extra_labels.iloc[:,1:]\\\n.as_matrix().astype('int16')\ntrain_images= []\nfor img in train_images_t:\n    img= cv2.resize(img, (50, 50), interpolation= cv2.INTER_CUBIC)\n    train_images.append(img)\n    \ntrain_images= np.asarray(train_images)\n\ntest_images= []\nfor img in test_images_t:\n    img= cv2.resize(img, (50, 50), interpolation= cv2.INTER_CUBIC)\n    test_images.append(img)\n\ntrain_images= np.asarray(test_images)\n\nextra_images= []\nfor img in extra_images_t:\n    img= cv2.resize(img, (50, 50), interpolation= cv2.INTER_CUBIC)\n    extra_images.append(img)\nextra_images= np.asarray(extra_images)\n\nn=np.random.randint(1,2000,1)[0]\nprint('Label: ',train_labels[n])\n#print(ctrain_labels[n])\npl.imshow(train_images[n].reshape(50,50),\n          cmap=pl.cm.bone);\n'''","9ac4ea1d":"n=np.random.randint(1,2000,1)[0]\nprint('Label: ',train_labels[n])\n#print(ctrain_labels[n])\npl.imshow(train_images[n].reshape(32,32),\n          cmap=pl.cm.bone);","43790d9c":"import random\nprint(train_labels.shape)\nprint(train_images.shape)\nprint(test_labels.shape)\nprint(test_images.shape)\nprint(extra_labels.shape)\nprint(extra_images.shape)\n\ndef reducesize(orglabel,orgimgs):\n    first = True\n\n    newlabel= []\n    newimgs= []\n    \n    for x, label in enumerate(orglabel):\n        idx= 0\n        cnt= 0\n        #if x >= 7000:\n            #return newlabel, newimgs\n        for chk in label:\n            if chk == 10 and idx < 2:\n                cnt = cnt+1 #check if the first two numbers are null\n            idx=idx+1\n        if cnt >= 2:\n            label= np.delete(label, [0, 1])\n            label= np.expand_dims(label, axis= 0)\n            \n            Ydim,Xdim,chan= orgimgs[x].shape\n            orgX= Xdim\n            orgY= Ydim\n            num1= random.randint(round(Xdim*0.6), round(Xdim*0.9))\n            #print(\"Shape: \"+ str(orgimgs[x].shape))\n            Xcolour= random.randint(60, 128) #color of padding\n            x_add= np.full((Ydim,num1), Xcolour\/255.0,dtype= float)\n            x_add= np.expand_dims(x_add, axis= 2)\n            #print(\"Shape: \"+ str(x_add.shape))\n            img= np.append(x_add,orgimgs[x],axis= 1)\n            img= np.append(img,x_add,axis= 1)\n            #padding Y\n            Ydim, Xdim, chan= img.shape\n            num2= random.randint(round(Ydim*0.6), round(Ydim*0.9))\n            Ycolour= random.randint(10, 100)\n            y_add= np.full((num2,Xdim), Ycolour\/255.0,dtype=float)\n            y_add= np.expand_dims(y_add, axis= 2)\n            img= np.append(y_add, img,axis= 0)\n            img= np.append(img, y_add,axis= 0)\n            img= cv2.resize(img, (32,32))\n            img= np.expand_dims(img, axis= 0)\n            img= np.expand_dims(img, axis= 3)\n\n            #data aug end\n            \n            if first:\n                newlabel= label\n                newimgs= img\n                #print(img.shape)\n                #print(label.shape)\n                first = False\n                print(\"Shape aft padding: \"+ str(img.shape))\n                #print(label)\n            else:\n                newlabel= np.append(newlabel, label, axis= 0)\n                newimgs= np.append(newimgs, img, axis= 0)\n                \n                #print(label)\n    return newlabel, newimgs\n\nnewtest_labels, newtest_imgs= reducesize(orglabel= test_labels, orgimgs= test_images)\nprint(\"NewTest_labels\"+str(newtest_labels.shape))\nprint(\"NewTest_imgs\"+str(newtest_imgs.shape))\nnewtrain_labels, newtrain_imgs= reducesize(orglabel= train_labels, orgimgs= train_images)\nprint(\"NewTrain_labels\"+str(newtrain_labels.shape))\nprint(newtrain_imgs.shape)\nnewextra_labels, newextra_imgs= reducesize(orglabel= extra_labels, orgimgs= extra_images)\nprint(newextra_labels.shape)\nprint(newextra_imgs.shape)","87f25cc6":"print(newtest_imgs)","9f734fac":"n=np.random.randint(1,len(newtrain_labels),1)[0]\nprint('Label: ',newtrain_labels[n])\n#print(ctrain_labels3[n])\npl.imshow(newtrain_imgs[n].reshape(32,32),\n          cmap=pl.cm.bone);","6e4d932a":"ctrain_labels=to_categorical(newtrain_labels,num_classes=11)\\\n.astype('int16')\nctest_labels=to_categorical(newtest_labels,num_classes=11)\\\n.astype('int16')\ncextra_labels=to_categorical(newextra_labels,num_classes=11)\\\n.astype('int16')","4eaf946f":"train_images= newtrain_imgs\ntest_images= newtest_imgs\nextra_images= newextra_imgs","97d5b06e":"n=np.random.randint(1,len(train_labels),1)[0]\nprint('Label\\n',ctrain_labels[n])\n#print(ctrain_labels[n])\npl.imshow(train_images[n].reshape(32,32),\n          cmap=pl.cm.bone);","3a6fe36f":"Nums= 3\n\nX=np.concatenate((train_images,\n                        test_images),axis=0)\nX=np.concatenate((X,extra_images),axis=0)\ny=np.concatenate((ctrain_labels,\n                  ctest_labels),axis=0)\ny=np.concatenate((y,cextra_labels),axis=0)\ndef tts(X,y): \n    x_train,x_test,y_train,y_test=\\\n    train_test_split(X,y,test_size=.2,random_state=1)\n    n=int(len(x_test)\/2)\n    x_valid,y_valid=x_test[:n],y_test[:n]\n    x_test,y_test=x_test[n:],y_test[n:]\n    return x_train,x_valid,x_test,y_train,y_valid,y_test\nx_train,x_valid,x_test,\\\ny_train,y_valid,y_test=tts(X,y)\ny_train_list=[y_train[:,i] for i in range(Nums)]\ny_test_list=[y_test[:,i] for i in range(Nums)]\ny_valid_list=[y_valid[:,i] for i in range(Nums)]\nfor el in [x_train,x_valid,x_test,\n           y_train,y_valid,y_test]:\n    print(el.shape)","38bf3b4c":"print(y_train.shape)","36b37a64":"print('Label\\n',y_train_list[0][0])\nprint('Label\\n',y_train_list[0][1])\nprint('Label\\n',y_train_list[0][2])\n#print(ctrain_labels[n])\npl.imshow(x_train[0].reshape(32,32),\n          cmap=pl.cm.bone);","55ef41c5":"def cnn_model():    \n    model_input=Input(shape=(32,32,1))\n    x=BatchNormalization()(model_input)        \n    x=Conv2D(32,(3,3),activation='relu',\n             padding='same')(model_input)\n    x=MaxPooling2D(pool_size=(2,2))(x)     \n    x=Conv2D(32,(3,3),activation='relu')(x)\n    x=MaxPooling2D(pool_size=(2,2))(x)    \n    x=Dropout(.25)(x)    \n    x=Conv2D(64,(3,3),activation='relu')(x)       \n    x=Conv2D(64,(3,3),activation='relu')(x)    \n    x=Dropout(.25)(x)    \n    x=Conv2D(196,(3,3),activation='relu')(x)    \n    x=Dropout(.25)(x)              \n    x=Flatten()(x)    \n    x=Dense(512,activation='relu')(x)    \n    x=Dropout(.5)(x)    \n    y=[Dense(11,activation='softmax')(x)\n       for i in range(Nums)]    \n    model=Model(input=model_input,output=y)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer='adam',metrics=['accuracy'])\n    return model\ncnn_model=cnn_model()","09829b4b":"checkpointer=ModelCheckpoint(filepath=fw,verbose=2,\n                             save_best_only=True)\nlr_reduction=ReduceLROnPlateau(monitor='val_loss',patience=10,\n                               verbose=2,factor=.75)\nestopping=EarlyStopping(monitor='val_loss',patience=16,verbose=2)\nhistory=cnn_model.fit(x_train,y_train_list,\n                      validation_data=(x_valid,y_valid_list), \n                      epochs=250,batch_size=128,verbose=2, \n                      callbacks=[checkpointer,lr_reduction,estopping])","595265ea":"cnn_model.load_weights(fw)\ncnn_scores=cnn_model.evaluate(x_test,y_test_list,verbose=0)\nprint(\"CNN. Scores: \\n\" ,(cnn_scores))","90e36b99":"cnn_model.save('.\/numfinder')","2a8cfcf4":"<h1 class='font-effect-3d' style='font-family:Akronim; color:#ff55ee'>Build the Model<\/h1>","a7d91748":"End of added in stuff","de6579c9":"<h1 class='font-effect-3d' style='font-family:Akronim; color:#ff55ee'> Data Loading & Preprocessing<\/h1>","1172476f":"Add in. Take only the numbers 3 and above"}}