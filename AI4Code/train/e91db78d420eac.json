{"cell_type":{"d9b571bc":"code","3115f9a6":"code","4cc39a02":"code","2a37d797":"code","0f663399":"code","7f82f1ae":"code","bea39b4a":"code","338cc991":"code","86628070":"code","e588f62b":"code","0cf52888":"code","dcabdae3":"code","2735bfd9":"code","04f72940":"code","b0f1dadf":"code","9749a46d":"code","4b2ad16f":"code","56a7d44d":"code","2cda2899":"code","5df556a8":"code","bc9d325a":"code","ebf93133":"code","ac108b60":"code","9f82f604":"code","dba835dd":"code","8375f294":"code","70e14f0d":"code","1d2ce018":"code","2cabd298":"code","1d0d14fb":"code","c637dda8":"code","42a8495e":"code","8a61916f":"markdown","91d46e95":"markdown","ba83e359":"markdown","e9cb80c8":"markdown","f73fb049":"markdown","30b2064a":"markdown","21192e32":"markdown","55588bcd":"markdown","f1616016":"markdown"},"source":{"d9b571bc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS","3115f9a6":"data = pd.read_csv('\/kaggle\/input\/deepn\/Train_Data.csv')\ndata.head()","4cc39a02":"data.info()","2a37d797":"import re\ndef data_clean(df):\n    for ind,row in df.iterrows():\n        while((row['text'].split(\" \")[-1]=='&amp') | (row['text'].split(\" \")[-1]=='&gt')):\n            flag=1\n            row.iloc[1]+=row.iloc[2]\n            for i in range(2,len(df.columns)-1):\n                row.iloc[i]=row.iloc[i+1]\n  \n        df.iloc[ind]=row\n    df['text']=df['text'].replace(r'&amp','',regex=True).replace(r'http\\S+', '',regex=True)\n    df['text']=df['text'].replace(r'&gt','',regex=True)\n    \n    df['screen_and_username']=df['screen_and_username'].apply(lambda x: re.sub(r'\\\/(.+)',\"\",x))\n   \n    return df","0f663399":"data = data_clean(data)\ndata = data.drop(columns=[col for col in data.columns if \"Unnamed\" in col])\ndata.info()","7f82f1ae":"# Converting column types\ncols = ['type_of_tweet', 'num_followers', 'num_friends', 'num_retweets', 'rumour_identification']\ndata[cols] = data[cols].apply(pd.to_numeric, errors='coerce')","bea39b4a":"data['rumour_identification'].value_counts(dropna=False)","338cc991":"drop_row = []\nfor row in data.iterrows():\n    if row[1]['rumour_identification'] not in [0, 1]:\n        drop_row.append(row[0])\ndata = data.drop(drop_row)","86628070":"data['rumour_identification'].value_counts(dropna=False)","e588f62b":"data.info()","0cf52888":"# we can see that the classes are immbalanced\nplt.bar(['Rumour', 'Not Rumour'], data.iloc[:, -1].value_counts().values)\nplt.show()","dcabdae3":"# This code will show you the wordcloud of non-rumour tweets text\nnon_rumour_text = data[data.rumour_identification == 0]['text'].tolist()\nwords = ' '.join(non_rumour_text)\nprocessed_words = ''.join(word for word in words.split())\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=640, width=800).generate(processed_words)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.subplots()\nax.imshow(wordcloud, interpolation='bilinear')\nax.axis('off')\nplt.show()","2735bfd9":"# This code will show you the wordcloud of non-rumour tweets header\nnon_rumour_header = data[data.rumour_identification == 0]['header'].tolist()\nwords = ' '.join(non_rumour_header)\nprocessed_words = ''.join(word for word in words.split())\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=640, width=800).generate(processed_words)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.subplots()\nax.imshow(wordcloud, interpolation='bilinear')\nax.axis('off')\nplt.show()","04f72940":"# This code will show you the wordcloud of rumour tweets text\nrumour_text = data[data.rumour_identification == 1]['text'].tolist()\nwords = ' '.join(rumour_text)\nprocessed_words = ''.join(word for word in words.split())\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=640, width=800).generate(processed_words)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.subplots()\nax.imshow(wordcloud, interpolation='bilinear')\nax.axis('off')\nplt.show()","b0f1dadf":"# This code will show you the wordcloud of rumour tweets header\nrumour_header = data[data.rumour_identification == 1]['header'].tolist()\nwords = ' '.join(rumour_header)\nprocessed_words = ''.join(word for word in words.split())\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', height=640, width=800).generate(processed_words)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.subplots()\nax.imshow(wordcloud, interpolation='bilinear')\nax.axis('off')\nplt.show()","9749a46d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import auc, roc_curve, confusion_matrix\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.ensemble import RandomForestClassifier","4b2ad16f":"x_train, x_test, y_train, y_test = train_test_split(data[['Identity', 'type_of_tweet', 'num_followers', 'num_friends', 'num_retweets']], data['rumour_identification'], test_size = 0.3, random_state = 0)","56a7d44d":"print('rows in test set: ' + str(x_test.shape))\nprint('rows in train set: ' + str(x_train.shape))","2cda2899":"# Used only when \"text\" is taken as a feature\n\n# lst = x_train.tolist()\n# vectorizer = TfidfVectorizer(\n# input= lst ,  # input is the actual text\n# lowercase=True,      # convert to lowercase before tokenizing\n# stop_words='english' # remove stop words\n# )\n# features_train_transformed = vectorizer.fit_transform(lst) #gives tf idf vector for x_train\n# features_test_transformed  = vectorizer.transform(x_test) #gives tf idf vector for x_test","5df556a8":"# train the model\n# Naive Bayes AUC_Score=0.801 using \"text\" as a feature\n\n# classifier = MultinomialNB()\n# classifier.fit(features_train_transformed, y_train)\n# y_pred = classifier.predict(features_test_transformed)\n\n# RandomForest Classifier AUC_Score=0.8128 using \"text\" as a feature\n\n# classifier = RandomForestClassifier()\n# classifier.fit(features_train_transformed, y_train)\n# y_pred = classifier.predict(features_test_transformed)\n\n# RandomForest Classifier\nclassifier = RandomForestClassifier()\nclassifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)","bc9d325a":"print(\"classifier accuracy {:.2f}%\".format(classifier.score(x_test, y_test) * 100))","ebf93133":"# AUC score\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nprint('AUC Score:',auc(fpr, tpr))","ac108b60":"# Plotting confusion matrix\ncf_matrix = confusion_matrix(y_test, y_pred)\nsns.heatmap(cf_matrix, annot=True)","9f82f604":"ground_test = pd.read_csv('\/kaggle\/input\/deepn\/Test_Data.csv')\nground_test.info()","dba835dd":"ground_test = data_clean(ground_test)\nground_test.info()","8375f294":"# Droping Unnamed columns\nground_test = ground_test.drop(columns=[col for col in ground_test.columns if 'Unnamed' in col])\nground_test.info()","70e14f0d":"# Convert column types\ncols = ['Identity', 'type_of_tweet', 'num_followers', 'num_friends', 'num_retweets']\nground_test[cols] = ground_test[cols].apply(pd.to_numeric, errors='coerce')\nground_test.info()","1d2ce018":"ground_test = ground_test.fillna(0)","2cabd298":"# features_ground_test_transformed  = vectorizer.transform(ground_test['text'])\npred = classifier.predict(ground_test[['Identity', 'type_of_tweet', 'num_followers', 'num_friends', 'num_retweets']])","1d0d14fb":"submissions = pd.DataFrame()\nsubmissions['Identity'] = ground_test.Identity.copy(deep=True)\nsubmissions['rumour_identification'] = pd.Series(pred)","c637dda8":"submissions.info()","42a8495e":"# submissions.to_csv('Submit3_rrc_float_features.csv', index=False)","8a61916f":"# [DeepN - Rumour Identification on Tweets](https:\/\/www.kaggle.com\/c\/deepn\/data) ","91d46e95":"## Data Cleaning","ba83e359":"## Rumour","e9cb80c8":"## Data Visualization","f73fb049":"## Model Building","30b2064a":"Dataset Information: Training Data consist of the following information about many different tweets, and is stored in Tabular data. Following are features describing the tweet:\n\n- `Identity`: a number assigned to each tweet\n- `Text`: Main body of the tweet.\n- `Header`: title\/Header of a tweet\n- `Type_of_tweet` : (1 if is from source tweet, 0 is from branch tweet of source tweet)\n- `Screen_and_username`: Displayed name of the account holder, who tweeted.\n- `Num_followers`: number of followers of the account holder.\n- `Num_friends`: number of friends of the account holder.\n- `Num_retweets`: number of retweets of the tweet involved.\n- `tweet_language`: the language of tweet involved.\n- `Rumour_identification`: (1 if it is rumour, 0 if not a rumour) (Needed to be predicted for Test_Data.csv)","21192e32":"## Test Data Prediction","55588bcd":"![header.png](attachment:header.png)","f1616016":"## Non-Rumour"}}