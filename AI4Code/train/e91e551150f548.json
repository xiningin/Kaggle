{"cell_type":{"3d4f71ad":"code","071c0cb6":"code","cf43f58e":"code","a5db968f":"code","f01e671a":"code","003d0328":"code","e7dbe3c2":"code","2a6e94c6":"code","0911d592":"code","fd86f698":"code","70935612":"code","8e25fb4e":"code","90433f00":"code","61a79acd":"code","9ad3fef8":"code","9e970ae5":"code","0f572057":"code","39efdb31":"code","9cf252d5":"code","e8ce15a4":"code","ac46c67b":"code","d61e7f86":"code","1b29e07e":"code","59bda5e5":"code","952145ee":"code","74b35fe7":"code","8d775e35":"code","cfcd744a":"code","dbe88d5c":"code","4f1c0c6f":"code","50838e88":"code","46f606e7":"code","b4bf86d5":"code","9dcb5202":"code","aae14062":"code","eb184034":"code","79cf886f":"code","f39ab76a":"code","d6bc2548":"markdown","0cc2a739":"markdown","c5e2a330":"markdown","74714ca0":"markdown","5e8dba5f":"markdown","92e820f0":"markdown","c8ac3225":"markdown"},"source":{"3d4f71ad":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","071c0cb6":"data = pd.read_csv('..\/input\/loan-predication\/train_u6lujuX_CVtuZ9i (1).csv')\ndata.head()","cf43f58e":"data.set_index('Loan_ID', inplace=True)\ndata.head()","a5db968f":"print(\"Data Numerical Columns Description\")\ndata.describe()","f01e671a":"print('Data All Columns Description')\ndata.describe(include='all')","003d0328":"print(\"Check Missing Value:\")\ndata.isna().sum()","e7dbe3c2":"print('Data Information:')\ndata.info()","2a6e94c6":"print(\"To Check Numbers of Unique Value each Column Contains:\")\ndata.nunique()","0911d592":"data.boxplot(figsize=(16, 10))\nplt.show()","fd86f698":"print(\"Probability of getting the loan on checking the credit history\")\ndata.groupby('Loan_Status')['Credit_History'].mean()","70935612":"print(\"Checking the Cross Tab:\")\npd.crosstab(data['Credit_History'], data['Loan_Status'])","8e25fb4e":"print('Filling the missing values in Loan Amount with the mean of Loan Amount:')\ndata.LoanAmount.fillna(data.LoanAmount.mean(), inplace=True)\nprint(\"To check is there any missing value left in Loan Amount\")\ndata.LoanAmount.isna().sum()","90433f00":"print(\"Checking missing values in Self Employed Column:\", data.Self_Employed.isna().sum())\nprint(\"Unique Values Count:\")\nprint(data.Self_Employed.value_counts())","61a79acd":"# so we can fill with No\ndata.Self_Employed.fillna('No', inplace=True)\nprint(\"Checking missing values in Self Employed Column:\", data.Self_Employed.isna().sum())","9ad3fef8":"print(\"Self Employed person with its Education asking for a loan which we have taken an average of:\")\ndata.pivot_table(index='Self_Employed', values='LoanAmount', columns='Education', aggfunc=np.median)","9e970ae5":"print(\"Filling the categorical values with mode function:\")\nmodeList = ['Gender', 'Married', 'Dependents', 'Loan_Amount_Term', 'Credit_History']\nfor mCol in modeList:\n    data[mCol].fillna(data[mCol].mode()[0], inplace=True)\n    \nprint(\"Now Checking the missing values of the columns define in the list:\")\nprint(data[modeList].isna().sum())","0f572057":"from sklearn.preprocessing import LabelEncoder\nvar = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status']\nlE = LabelEncoder()\nfor v in var:\n    data[v] = lE.fit_transform(data[v])","39efdb31":"print(\"Now checking the data information\")\nprint(data.info())\nprint(\"Data Columns Data Type:\")\nprint(data.dtypes)\n# so now all values are numeric","9cf252d5":"print(\"Checking the Correlation of Columns\")\ndata[['Gender', 'Education', 'Credit_History', 'Self_Employed', 'Married', 'Property_Area', 'ApplicantIncome', 'Loan_Status']].corr()","e8ce15a4":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier","ac46c67b":"def Custom_Model(X, y, model, model_name):\n    train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.3, random_state=42)\n    model.fit(train_X, train_y)\n    pred_y = model.predict(test_X)\n    print(\"Accuracy of the \" + model_name + \": \", model.score(test_X, test_y))","d61e7f86":"y = data['Loan_Status']","1b29e07e":"# with only one feature\n# as we can see from correlation table credit history is highly correlated to loan status\nX = data[['Credit_History']]\nlr = LogisticRegression()\nCustom_Model(X, y, lr, \"Logistic Regression\")","59bda5e5":"data.columns","952145ee":"# with more predictor with no checking\nX = data[['Gender', 'Education', 'Credit_History', 'Self_Employed', 'Married', 'ApplicantIncome', 'Property_Area']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, lr, \"Logistic Regression\")","74b35fe7":"# with Correlation near 1\nX = data[['Property_Area', 'Credit_History']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, lr, \"Logistic Regression\")","8d775e35":"X = data[['Credit_History','Education','Married','Self_Employed','Property_Area']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, lr, \"Logistic Regression\")","cfcd744a":"X = data[['Gender', 'Education', 'Credit_History', 'Self_Employed', 'Married', 'ApplicantIncome', 'Property_Area']]\ndt = DecisionTreeClassifier()\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, dt, \"Decision Tree\")","dbe88d5c":"X = data[['Property_Area', 'Credit_History']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, dt, \"Decision Tree\")","4f1c0c6f":"X = data[['Credit_History']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, dt, \"Decision Tree\")","50838e88":"X = data[['Gender', 'Education', 'Credit_History', 'Self_Employed', 'Married', 'ApplicantIncome', 'Property_Area']]\nrfc = RandomForestClassifier()\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, rfc, \"Random Forest\")","46f606e7":"X = data[['Property_Area', 'Credit_History']]\nrfc = RandomForestClassifier()\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, rfc, \"Random Forest\")","b4bf86d5":"X = data[['Credit_History']]\nrfc = RandomForestClassifier()\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, rfc, \"Random Forest\")","9dcb5202":"sgd = SGDClassifier()\nX = data[['Gender', 'Education', 'Credit_History', 'Self_Employed', 'Married', 'ApplicantIncome', 'Property_Area']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, sgd, \"Stochastic Gradient Descent\")","aae14062":"X = data[['Property_Area', 'Credit_History']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, sgd, \"Stochastic Gradient Descent\")","eb184034":"X = data[['Credit_History']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, sgd, \"Stochastic Gradient Descent\")","79cf886f":"X = data[['ApplicantIncome']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, sgd, \"Stochastic Gradient Descent\")","f39ab76a":"X = data[['Self_Employed']]\nprint(\"With the predictors:\", X.columns)\nprint()\nCustom_Model(X, y, sgd, \"Stochastic Gradient Descent\")","d6bc2548":"## Random Forest Classifier","0cc2a739":"## Importing other libraries","c5e2a330":"## Decision Tree","74714ca0":"#### Import Dataset","5e8dba5f":"## Stochastic Gradient Descent","92e820f0":"## Logistic Regression","c8ac3225":"### Now Encoding"}}