{"cell_type":{"53fde54b":"code","5cef73c3":"code","85261f4c":"code","f9c8e88f":"code","9c890f1c":"code","ee37fcac":"code","d5bb62d8":"code","43678da6":"code","67c59879":"code","340aeb38":"code","fbc377f0":"code","200cd70f":"code","f1189c9a":"code","a46dd4d7":"code","553902d9":"code","915af761":"code","854feef4":"code","19ccff82":"code","0a0547fd":"code","cb1e6090":"code","9c2e99de":"code","089e8af3":"code","8b3774d3":"code","ffce9064":"code","c3382650":"code","19e19dbc":"code","1f455ff3":"code","9bcc3c93":"code","36d4e154":"code","411e4ee7":"code","7edf77de":"code","965b7f28":"code","f3beb7d0":"code","f54a3025":"code","d4ce8808":"code","9ffc823d":"code","0010683a":"code","7902bedc":"code","842aa0af":"code","410d826f":"code","16ccd441":"markdown","9c7afb99":"markdown","1ede8a2a":"markdown","a8d594a6":"markdown","a0a140c0":"markdown","d4240828":"markdown","56a4d178":"markdown","c751c076":"markdown","b031908b":"markdown","164aca82":"markdown","c370d6ee":"markdown","04034ee4":"markdown","9f82f87f":"markdown","c956d114":"markdown","f8f96d5b":"markdown","b4ed64a4":"markdown","ab9d6052":"markdown"},"source":{"53fde54b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns\nfrom matplotlib.ticker import NullFormatter\nfrom matplotlib.dates import MonthLocator, DateFormatter\n\nraw_data = pd.read_csv( \"..\/input\/coronavirusdataset-france\/chiffres-cles.csv\", parse_dates=['date']) # raw dataframe\ndf_china = pd.read_csv( \"..\/input\/coronavirusdataset-france\/china.csv\", parse_dates=['date'])\ndf_italy = pd.read_csv( \"..\/input\/coronavirusdataset-france\/contagioitalia.csv\", parse_dates=['date'])\ndf_korea = pd.read_csv( \"..\/input\/coronavirusdataset\/Case.csv\")\ndf_korea_trend = pd.read_csv( \"..\/input\/coronavirusdataset\/SearchTrend.csv\", parse_dates=['date'])\ndf_korea_time = pd.read_csv( \"..\/input\/coronavirusdataset\/Time.csv\", parse_dates=['date'])\ndf_korea_patient = pd.read_csv( \"..\/input\/coronavirusdataset\/PatientInfo.csv\")","5cef73c3":"df_italy.tail()","85261f4c":"raw_data.rename(columns={'cas_confirmes':'cases', 'deces':'deaths'},inplace=True) #important variable names in English\nraw_data","f9c8e88f":"# here I check that stats are updated to the latest governamental info\nlatest_date = max(raw_data['date'])\nprint(\"Stats updated to:\",latest_date)\nnational_latest = raw_data[raw_data['date'] == latest_date]\n\n","9c890f1c":"df_national = raw_data[raw_data.maille_nom =='France']\ndf_national = df_national.iloc[:-1]\n\ndf_national.tail()","ee37fcac":"\n\ndf_national.reset_index(inplace = True, drop=True)\ndf_national = df_national[['date','cases','deaths', 'nouvelles_hospitalisations', 'nouvelles_reanimations']]\ndf_national = df_national.groupby(['date']).mean().reset_index() # get cases each day\n","d5bb62d8":"df_national = df_national[df_national['date'] > '2020-03-01']\ndf_national = df_national.drop([56, 57, 234])\ndf_national = df_national.dropna()\n\ndf_national.reset_index(inplace = True, drop=True)","43678da6":"df_national= df_national.drop(df_national[df_national.date == '2020-11_11'].index)\ndf_national.date = pd.to_datetime(df_national.date)\n\ndf_national.reset_index(inplace = True, drop=True)\ndf_national.tail()","67c59879":"df_national['%mortality'] = (df_national['deaths']\/df_national['cases'])","340aeb38":"y = df_national['cases'].values # transform the column to differentiate into a numpy array\n\nderiv_y = np.gradient(y) # now we can get the derivative as a new numpy array\n\noutput = np.transpose(deriv_y)\n#now add the numpy array to our dataframe\ndf_national['ContagionRate'] = pd.Series(output)\ndf_national.to_csv('contagiofrancia.csv')","fbc377f0":"periods = 115\n\ntimerange = pd.date_range(start='3\/1\/2020', periods=periods)\n","200cd70f":"dummy = np.zeros(periods)\nplt.figure(figsize= (6,12))\nplt.subplot(211)\nplt.plot(df_national['date'],df_national['cases'], color = 'g') #trend cases\nplt.plot(timerange,dummy, ':', color = 'w') \nplt.title('Cases over time')\nplt.ylabel('number of cases')\nplt.xticks(df_national['date'],\" \")\nplt.subplot(212)\nplt.plot(df_national['date'],df_national['ContagionRate'], color = 'r', label = 'new cases') #trend daily cases\n\nplt.title('Spread rate over time')\nplt.ylabel('Rate (new cases per day)')\nplt.legend()\nplt.xticks(rotation=90)\n\nplt.suptitle('Virus spread over time - France', fontsize=16)\nplt.show()","f1189c9a":"dummy = np.zeros(periods)\nplt.figure(figsize= (6,12))\nplt.subplot(211)\nplt.plot(df_national['date'],df_national['nouvelles_hospitalisations'], color = 'k', label = 'new cases') #trend cases\nplt.plot(timerange,dummy, ':', color = 'w') \nplt.title('Hospital cases')\nplt.ylabel('new patients in hospital')\nplt.xticks(df_national['date'],\" \")\nplt.subplot(212)\nplt.plot(df_national['date'],df_national['nouvelles_reanimations'], color = 'r', label = 'new cases') #trend daily cases\n \nplt.title('Intensive care')\nplt.ylabel('new patients in intensive care')\nplt.legend()\nplt.xticks(rotation=90)\n\nplt.suptitle('Virus spread over time - France', fontsize=16)\nplt.show()","a46dd4d7":"yc = df_china['Number of cases'].values # transform the column to differentiate into a numpy array\n\nderiv_yc = np.diff(yc) # now we can get the derivative as a new numpy array\noutput_c = np.transpose(deriv_yc)\n\ndf_china['ContagionRate'] = pd.Series(output_c) # \n\ndf_china = df_china[df_china['ContagionRate'] < 4500] # clean the chinese data from the suspicious \"spike\" of 12\/2","553902d9":"y_it = df_italy['TotalPositiveCases'].values # transform the column to differentiate into a numpy array\n\nderiv_y_it = np.gradient(y_it) # now we can get the derivative as a new numpy array\n#np.savetxt(\"contagioitalia.csv\", deriv_y, delimiter=\",\")\noutput_it = np.transpose(deriv_y_it)\n#now add the numpy array to our dataframe\ndf_italy['ContagionRate'] = pd.Series(output_it)","915af761":"y_kr = df_korea_time['confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_kr = np.gradient(y_kr) # now we can get the derivative as a new numpy array\n#np.savetxt(\"contagioitalia.csv\", deriv_y, delimiter=\",\")\noutput_kr = np.transpose(deriv_y_kr)\n#now add the numpy array to our dataframe\ndf_korea_time['ContagionRate'] = pd.Series(output_kr)","854feef4":"X_ch = df_china.index.values\n\ny_ch = df_china['ContagionRate'].values\n\n#print(len(X_ch), len(y_ch))","19ccff82":"population_china = 1427647786 \npopulation_italy = 60488373\npopulation_france = 65241316","0a0547fd":"plt.figure(figsize=(12, 10))\nplt.subplot(221)\nplt.plot(df_national.index,df_national['cases'], label = 'France') #trend cases\nplt.plot(df_italy.index,df_italy['TotalPositiveCases'], label = 'Italy') #trend cases\nplt.plot(df_china.index, df_china['Number of cases'], label = 'China') #trend cases\nplt.title('International comparison of cases growth', fontsize = 20)\nplt.xlabel('Days', fontsize=14)\nplt.ylabel('Num. cases', fontsize=14)\n\nplt.subplot(222)\nplt.plot(df_national.index,(df_national['cases']\/population_france)*100, label = 'France') #trend cases\nplt.plot(df_italy.index,(df_italy['TotalPositiveCases']\/population_italy)*100, label = 'Italy') #trend cases\nplt.plot(df_china.index, (df_china['Number of cases']\/population_china)*100, label = 'China') #trend cases\nplt.xlabel('Days', fontsize=14)\nplt.yscale('log')\nplt.ylabel('Log %cases over population total', fontsize=14)\n\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)","cb1e6090":"plt.figure(figsize= (6,6))\n#plot the fit results\n#plt.plot(X_ch,gauss_function(X_ch, *popt), ':', label = 'China-modelled gaussian')\n#plt.plot(X1,y1, ':', label = 'Italy-modelled gaussian')\n#plt.plot(X,gauss_function(X, *popt2), '--', label = 'France-modelled gaussian')\n#confront with the given data\nplt.plot(df_national.index,df_national['ContagionRate'], label = 'France') #trend cases\nplt.plot(df_italy.index,df_italy['nuovi_positivi'], label = 'Italy') #trend cases\nplt.plot(df_china.index, df_china['ContagionRate'], label = 'China') #trend cases\nplt.axvline(x=33 , color='k', linewidth = 0.5)\nplt.axvline(x=59, ymin=0.05, ymax=0.4, color='k', linewidth = 0.5)\nplt.text(35, 6000, ' Italy: 2020-03-28\\n France: 2020-04-04')\nplt.text(59, 3000, ' Italy: 2020-04-24\\n France: 2020-05-01')\nplt.title('Cases over time')\nplt.ylabel('Spread rate')\n\nplt.xticks(rotation=90)\nplt.xlim(0,450)\nplt.ylabel('Contagion rate (daily new infections)', fontsize=14)\nplt.xlabel('Days', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of spread rate', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)","9c2e99de":"# clean up noise from low values\ndf_italy_clean = df_italy[df_italy['ContagionRate'] > 100] \ndf_france_clean = df_national[df_national['ContagionRate'] > 100] \ndf_china_clean = df_china[df_china['ContagionRate'] > 100] \ndf_korea_clean = df_korea_time[df_korea_time['ContagionRate'] > 100]","089e8af3":"plt.figure(figsize=(6, 6))\n\nplt.plot(df_france_clean['cases'], df_france_clean['ContagionRate'], label ='France')\nplt.plot(df_italy_clean['TotalPositiveCases'], df_italy_clean['ContagionRate'], label = 'Italy')\nplt.plot(df_china_clean['Number of cases'], df_china_clean['ContagionRate'], label = 'China')\nplt.plot(df_korea_clean['confirmed'], df_korea_clean['ContagionRate'], label = 'Korea')\n\nplt.xscale('log')\nplt.yscale('log')\nplt.ylabel('Daily new cases', fontsize=14)\nplt.xlabel('Total cases', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of contagion rates', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n\nplt.show()","8b3774d3":"df_departement =  raw_data[raw_data.granularite =='departement']\ndf_departement.rename(columns={'maille_nom':'district'},inplace=True) \ndf_departement.tail()","ffce9064":"gb_departement =   df_departement[df_departement['date'] == df_departement['date'].max()].reset_index() # get sum of cases by district\ngb_departement.rename(columns={'cases':'TotalPositiveCases'},inplace=True) \n\ngb_departement['mortality'] = (gb_departement['deaths']\/gb_departement['hospitalises'])*100\ngb_departement['recovered'] = (gb_departement['gueris']\/gb_departement['hospitalises'])*100\n\ngb_departement = gb_departement.sort_values(by=['hospitalises'], ascending=False).reset_index() # sort descending\ngb_departement.head()","c3382650":"plt.figure(figsize=(12, 12))\n\nplt.subplot(313)\nplt.bar(gb_departement.district.iloc[0:35],gb_departement.hospitalises.iloc[0:35], color = 'tomato') #cases by region\nplt.title('Hospitalized by district', fontsize = 14)\nplt.ylabel('People in hospital')\nplt.xticks(rotation=90)\n\nplt.subplot(312)\nplt.bar(gb_departement.district.iloc[0:35],gb_departement['gueris'].iloc[0:35], color = 'g') # % deaths by region\nplt.title('Recovered by district', fontsize = 14)\nplt.ylabel('Recovered')\nplt.xticks(gb_departement['district'].iloc[0:35],\" \")\n\n\nplt.subplot(311)\nplt.bar(gb_departement.district.iloc[0:35],gb_departement['deaths'].iloc[0:35], color = 'k') # % deaths by region\n\nplt.ylabel('Deaths')\nplt.xticks(gb_departement['district'].iloc[0:35],\" \")\nplt.title('Mortality by district', fontsize = 14)\n\nplt.suptitle('Overall departemental stats', fontsize = 20)\nplt.show()","19e19dbc":"df_region = raw_data[raw_data.granularite == 'region']\ndf_region = df_region.replace('Grand Est', 'Grand-Est')\ndf_region = df_region.replace('\u00cele-de-France', 'Ile-de-France')\ndf_region = df_region.replace('Provence-Alpes-C\u00f4te d\u2019Azur', \"Provence-Alpes-C\u00f4te d'Azur\")\ndf_region['maille_nom'].unique()\n","1f455ff3":"gb_region = df_region.groupby(['maille_nom']).max().reset_index() # get sum of cases by district\ngb_region.rename(columns={'maille_nom':'region'},inplace=True) \ngb_region = gb_region.sort_values(by=['cases'], ascending=False) # sort descending\n\ngb_region[:2]","9bcc3c93":"plt.figure(figsize=(12, 12))\n\nplt.subplot(311)\nplt.bar(gb_region.region,gb_region['deaths'], color = 'k') # deaths by region\nplt.ylabel('Current total deaths')\nplt.xticks(rotation=90)\nplt.xticks(gb_region['region'],\" \")\nplt.title('Deaths by region', fontsize = 14)\n\nplt.subplot(312)\nplt.bar(gb_region.region,gb_region.hospitalises, color = 'tomato') #in hospital by region\nplt.title('Total people hospitalized so far', fontsize = 14)\nplt.ylabel('Hospitalized so far')\nplt.xticks(gb_region['region'],\" \")\n\nplt.subplot(313)\nplt.bar(gb_region.region,gb_region['cases'], color = 'b') # cases by region\nplt.ylabel('cases')\nplt.xticks(rotation=90)\nplt.title('Cases by region', fontsize = 14)\n\nplt.suptitle('Overall regional stats', fontsize = 20)\nplt.show()","36d4e154":"reg_features = ['date','reanimation','hospitalises','gueris'] # list relevant features","411e4ee7":"population13 = 1966005 \npopulation75 = 2187526","7edf77de":"dep75 = gb_departement.iloc[0]\ndeaths_75 = dep75['deaths']\nmortality_75 = (deaths_75\/population75)*100","965b7f28":"dep13 = gb_departement.iloc[2]\ndeaths_13 = dep13['deaths']\nmortality_13 = (deaths_13\/population13)*100\n\nprint('% mortality Bouches de Rh\u00f4ne = ', round(mortality_13, 2),'%')\nprint('% mortality Paris = ', round(mortality_75, 2),'%')","f3beb7d0":"# data for Marseille and Paris\ndf_13 = raw_data[raw_data.maille_code == 'DEP-13'] \ndf_13 = df_13[df_13['date'] > '2020-09-01']\ndf_13.date = pd.to_datetime(df_13.date)\ndf_13 = df_13[reg_features].dropna() # select relevant features\ndf_75 = raw_data[raw_data.maille_code == 'DEP-75'] \ndf_75 = df_75[df_75['date'] > '2020-09-01']\ndf_75.date = pd.to_datetime(df_75.date)\ndf_75 = df_75[reg_features].dropna() # select relevant features\ndf_13.head()","f54a3025":"plt.figure(figsize=(6,12))\nplt.subplot(211)\nplt.plot(df_75.date,(df_75['reanimation']\/population75)*100, color = 'k', label =  'Paris')\nplt.plot(df_13.date,(df_13['reanimation']\/population13)*100, color = 'r', label =  'Bouches de Rhone') \nplt.ylabel('% population intensive care')\nplt.xticks(df_13['date'],\" \")\n#plt.xlim('2020-03-02', max(df_national.date))\nplt.legend()\nplt.title('% Population intensive care over time', fontsize = 14)\n\nplt.subplot(212)\nplt.plot(df_75.date,(df_75['hospitalises']\/population75)*100, color = 'k', label =  'Paris')\nplt.plot(df_13.date,(df_13['hospitalises']\/population13)*100, color = 'r', label =  'Bouches de Rhone')\nplt.ylabel('% population hospitalized')\n#plt.xlim('2020-03-02', max(df_national.date)) \n\nplt.legend()\nplt.xticks(rotation=90)\n\n\n\nplt.title('% Population hospitalized over time', fontsize = 14)\n\nplt.suptitle('Paris (75) et Bouche des Rhone (13) districts', fontsize = 20)\nplt.show()","d4ce8808":"# data for Ile de France (region around Paris)\n\ndf_IDF = raw_data[raw_data.maille_code == 'REG-11']\n#df_IDF = df_IDF.dropna(subset=['cases']) # drop empty cells\ndf_IDF = df_IDF[reg_features] # select relevant features\ndf_IDF.date = pd.to_datetime(df_IDF.date)","9ffc823d":"# data for Provence (region around Marseille)\ndf_PACA = raw_data[raw_data.maille_code == 'REG-93'] \n#df_PACA = df_PACA.dropna(subset=['cases'])# drop empty cells\ndf_PACA = df_PACA[reg_features] # select relevant features\ndf_PACA.date = pd.to_datetime(df_PACA.date)\ndf_IDF","0010683a":"IDFpopulation = 12174880\nPACApopulation = 5030890","7902bedc":"plt.figure(figsize=(6, 12))\n\nplt.subplot(211)\nplt.plot(df_IDF.date,(df_IDF['reanimation']\/IDFpopulation)*100, color = 'k', label =  'Ile de France') \nplt.plot(df_PACA.date,(df_PACA['reanimation']\/PACApopulation)*100, color = 'r', label =  'PACA') \n#plt.xlim('2020-03-15', max(df_PACA.date))   # set the xlim to left, right\nplt.ylabel('% Population intensive care')\n\nplt.legend()\nplt.title('Intensive care over time', fontsize = 14)\n\nplt.subplot(212)\nplt.plot(df_IDF.date,(df_IDF['hospitalises']\/IDFpopulation)*100, color = 'k', label =  'Ile de France') # % in hospital of total Ile de France population\nplt.plot(df_PACA.date,(df_PACA['hospitalises']\/PACApopulation)*100, color = 'r', label =  'PACA') # % in hospital of total PACA population\nplt.ylabel('% population hospitalized')\n#plt.xlim('2020-03-22', max(df_PACA.date)) \nplt.xticks(rotation=90)\nplt.legend()\nplt.title('% Population in hospital', fontsize = 14)\n\nplt.suptitle('Ile de France et PACA', fontsize = 20)\nplt.show()","842aa0af":"plt.figure(figsize=(6, 6))\n\n#plt.subplot(211)\nplt.plot(df_IDF.date,(df_IDF['gueris']\/IDFpopulation)*100, color = 'k', label =  'Ile de France') # % recovered of total Ile de France population\nplt.plot(df_PACA.date,(df_PACA['gueris']\/PACApopulation)*100, color = 'r', label =  'PACA') # % recovered of total PACA population\nplt.ylabel('% population recovered from COVID-19')\nplt.xlim('2020-03-22', max(df_PACA.date)) \nplt.xticks(rotation=90)\nplt.legend()\nplt.title('% Population recovered over time', fontsize = 14)\n\n#plt.subplot(212)\n#plt.plot(df_IDF.date,(df_IDF['deaths']\/IDFpopulation)*100, color = 'k', label =  'Ile de France') # % deaths of total Ile de France population\n#plt.plot(df_PACA.date,(df_PACA['deaths']\/PACApopulation)*100, color = 'r', label =  'PACA') # % deaths of total PACA population\n#plt.ylabel('% population deceased from COVID-19')\n#plt.xlim('2020-03-22', max(df_PACA.date)) \n\n#plt.title('% Population dead over time', fontsize = 14)\n\nplt.suptitle('Ile de France et PACA', fontsize = 20)\nplt.show()","410d826f":"daterange = pd.date_range(start=df_IDF['date'].iloc[0], end=df_IDF['date'].iloc[-1])","16ccd441":" ### 3.2 Stats by region","9c7afb99":"Notice that estimations above are for the whole population, and not just limited to the reported cases. For this mortality should be higher, from \nhttps:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\/question-and-answers-hub\/q-a-detail\/coronavirus-disease-covid-19-similarities-and-differences-with-influenza\n\n\"Mortality for COVID-19 appears higher than for influenza, especially seasonal influenza. While the true mortality of COVID-19 will take some time to fully understand, the data we have so far indicate that the crude mortality ratio (the number of reported deaths divided by the reported cases) is between 3-4%, the infection mortality rate (the number of reported deaths divided by the number of infections) will be lower. For seasonal influenza, mortality is usually well below 0.1%. However, mortality is to a large extent determined by access to and quality of health care. \"\n\nLocally for France and Belgium we can get to similar conclusions\n\n https:\/\/www.cdc.gov\/nchs\/fastats\/flu.htm\n \n https:\/\/www.levif.be\/actualite\/sante\/le-coronavirus-cinq-a-dix-fois-plus-mortel-que-la-grippe\/article-normal-1304007.html?cookie_check=1617819198","1ede8a2a":"Importance of new cases relative to the total cases is well explained in this video\n\nhttps:\/\/www.youtube.com\/watch?v=54XLXg4fYsc","a8d594a6":"### 3.3 Paris vs. Marseille","a0a140c0":"### Gaussian model: international rates comparison","d4240828":"### Rate calculated by differentiation","56a4d178":"The most complete dataset at the time Covid-19 started to spread in Europe is that of China. We fit a model to this data, that closely resemble a bell curve","c751c076":"### Get the rate for China","b031908b":"# 2. Model for virus spread based on data from Italy and China \n","164aca82":"### 3.1 Stats by district","c370d6ee":"### Plot of the rate of increase fitted by the gaussian model above","04034ee4":"# 1. Virus spread at a national level","9f82f87f":"## 4. Forecast for the region Provence Alps Cote d'Azur (PACA)","c956d114":"# 3. Local statistics","f8f96d5b":"### Increase as days passed for all the countries","b4ed64a4":"Big difference between Europe and Asia!!!!","ab9d6052":"<h1>Tracking the spread of 2019 Coronavirus in France<\/h1>\n\n## Introduction\n\nThis are statistics for the spread in France of 2019-nCoV, a highly contagious coronavirus that originated from Wuhan (Hubei province), Mainland China. \nFrance is a neighbouring country of the second mainly infected at the time this database has been created, Italy\n\n\n"}}