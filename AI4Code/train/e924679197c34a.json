{"cell_type":{"24c12a69":"code","fc5d4fcd":"code","c9636650":"code","4849fc58":"code","f1cb0b59":"code","32c786ed":"code","6a7fdd10":"code","74f1aafd":"code","987308c4":"markdown","11e3a229":"markdown","32f5735a":"markdown","9c4ede05":"markdown","024e5944":"markdown","db965ead":"markdown"},"source":{"24c12a69":"# Necessary libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder\nimport statsmodels.api as sm\nfrom tqdm.notebook import tqdm\nfrom scipy import stats","fc5d4fcd":"# Import dataframes\ndf_train = pd.read_csv(\"\/kaggle\/input\/widsdatathon2020\/training_v2.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/widsdatathon2020\/unlabeled.csv\")","c9636650":"# Convert categorical labels into numerical values\ncategorical_columns = ['gender', 'apache_2_bodysystem', 'ethnicity', 'apache_3j_bodysystem', \n    'icu_admit_source', 'icu_stay_type', 'apache_2_diagnosis', 'apache_3j_diagnosis', 'icu_type']\n\ncat_labenc_mapping = {\n    col: LabelEncoder()\n    for col in categorical_columns\n}\n\nfor col in tqdm(categorical_columns):\n    df_train[col] = df_train[col].astype('str')\n    cat_labenc_mapping[col] = cat_labenc_mapping[col].fit(\n        np.unique(df_train[col].unique().tolist() + df_test[col].unique().tolist())\n    )\n    df_train[col] = cat_labenc_mapping[col].transform(df_train[col])\n    \n    df_test[col] = df_test[col].astype('str')\n    df_test[col] = cat_labenc_mapping[col].transform(df_test[col])","4849fc58":"predictives = ['height','diabetes_mellitus']\ndependents = ['weight']\n\n#Load in the data columns we need and drop NA rows\ntest = df_train[(predictives+dependents)].dropna()\n\n#Add the intercept to the model\nX2 = sm.add_constant(test[predictives])\n\n#create regression object and fit it\nestWeight = sm.OLS(test[dependents], X2).fit()\nprint(estWeight.summary())","f1cb0b59":"cw = estWeight.params[0] # constant\nh = estWeight.params[1] # height\ndb = estWeight.params[2] # diabetes mellitus\n\nindex = df_train['weight'].isna() & ~df_train['height'].isna() & ~df_train['diabetes_mellitus'].isna()\nn = 0\nfor idx,row in df_train[index].iterrows():\n    df_train.loc[idx,'weight'] = cw + df_train.loc[idx,'height'] * h + df_train.loc[idx,'diabetes_mellitus'] * db\n    n+=1\nprint('Filled up '+str(n)+' weight values')","32c786ed":"predictives = ['weight','gender','ethnicity']\ndependents = ['height']\n\n#Load in the data columns we need and drop NA rows\ntest = df_train[(predictives+dependents)].dropna()\n\n#Add the intercept to the model\nX2 = sm.add_constant(test[predictives])\n\n#create regression object and fit it\nestHeight = sm.OLS(test[dependents], X2).fit()\nprint(estHeight.summary())","6a7fdd10":"ch = estHeight.params[0] # constant\nw = estHeight.params[1] # weight\ng = estHeight.params[2] # gender\ne = estHeight.params[3] # ethnicity\n\nindex = df_train['height'].isna() & ~df_train['weight'].isna() & ~df_train['gender'].isna() & ~df_train['ethnicity'].isna()\nn = 0\nfor idx,row in df_train[index].iterrows():\n    df_train.loc[idx,'height'] = ch + df_train.loc[idx,'weight'] * w + df_train.loc[idx,'gender'] * g + df_train.loc[idx,'ethnicity'] * e\n    n+=1\nprint('Filled up '+str(n)+' height values')","74f1aafd":"index = df_train['bmi'].isna()\nfor idx,row in df_train[index].iterrows():\n    df_train.loc[idx,'bmi'] = df_train.loc[idx,'weight'] \/ (df_train.loc[idx,'height']\/100)**2\n\nprint('Calculated '+str(len(df_train[index]))+' bmi values')","987308c4":"Fill in the missing **height** values","11e3a229":"Calculate the BMI for the values that are missing.","32f5735a":"We're gonna put in some missing values **height** and **weight** based on the other variables.\nFirst, find the variables by which we can predict **weight** by using a multivariable linear regression. After some searching, we found that weight is best predicted by **height** and whether patients have **diabetes** or not.","9c4ede05":"Now fill up **weight** using the other variables. This is a very noobie and simplistic way, but for some reason I could not get est.predict() to work...","024e5944":"Instead of filling missing values with median \/ mean \/ mode, here we show a way to fill missing values using other, related variables. In this notebook we will fill up 'height' and 'weight' (and calculate 'bmi'). ","db965ead":"Find the variables by which we can predict **height** by using a multivariable linear regression. After some searching we found that **height** is best predicted by **weight**, **gender**, and **ethnicity**"}}