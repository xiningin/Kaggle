{"cell_type":{"40474199":"code","2c69dfee":"code","2c6199b8":"code","122e401b":"code","c550a95f":"code","95dda6f3":"code","c31fedd5":"code","5274b96b":"code","ad797baa":"code","06ea1816":"code","27ef2894":"markdown","dbcaf223":"markdown","b44f3250":"markdown","40bb2b21":"markdown"},"source":{"40474199":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport seaborn as sns\nimport sklearn\nimport matplotlib.pyplot as plt\nimport keras\nfrom sklearn.model_selection import train_test_split\nfrom kaggle_datasets import KaggleDatasets\nimport cv2\nimport os","2c69dfee":"PATH_DIR =\"..\/input\/plant-pathology-2021-fgvc8\"\n\nTRAIN_DIR = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\/\"\n\nTEST_DIR = \"..\/input\/plant-pathology-2021-fgvc8\/test_images\/\"\n\n\ntrain_label =pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\n","2c6199b8":"train_label","122e401b":"train_label['labels'].unique()","c550a95f":"train_label['labels'].value_counts()","95dda6f3":"def plot_examples(label):\n    fig, ax = plt.subplots(1, 6, figsize=(25, 12))\n    ax = ax.ravel()\n    for i in range(6):\n        idx = train_label[train_label['labels']==label].index[i]\n        image = cv2.imread(TRAIN_DIR+train_label.loc[idx, 'image'])\n        \n        image =cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        ax[i].imshow(image)\n        ax[i].set_title(label)\n        ax[i].set_xticklabels([])\n        ax[i].set_yticklabels([])","c31fedd5":"for labels in list(train_label['labels'].unique()):\n    plot_examples(labels)","5274b96b":"def plot_canny(label):\n    fig, ax = plt.subplots(3,2, figsize=(20, 15))\n    ax = ax.ravel()\n    for i in range(6):\n        amount=1.0; threshold=0.4\n        alpha =1.0;\n        beta= 0.6\n        idx = train_label[train_label['labels']==label].index[i]\n        image = cv2.imread(TRAIN_DIR+train_label.loc[idx, 'image'])\n        \n        image =cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        \n        blurred = cv2.GaussianBlur(image, (5,5), sigmaX=1.0)\n        sharpened = float(amount + 1) * image - float(amount) * blurred\n        sharpened = np.maximum(sharpened, np.zeros(sharpened.shape))\n        sharpened = np.minimum(sharpened, 255 * np.ones(sharpened.shape))\n        sharpened = sharpened.round().astype(np.uint8)\n        if threshold > 0:\n            low_contrast_mask = np.absolute(image - blurred) < threshold\n            np.copyto(sharpened, image, where=low_contrast_mask)\n        ax[i].imshow(sharpened)\n        ax[i].set_title(label)\n        ax[i].set_xticklabels([])\n        ax[i].set_yticklabels([])\n        \nplot_canny(label=\"complex\")","ad797baa":"def plot_contour(label):\n    fig, ax = plt.subplots(3,2, figsize=(20, 15))\n    ax = ax.ravel()\n    for i in range(6):\n        amount=1.0; threshold=0.4\n        alpha =1.0;\n        beta= 0.6\n        idx = train_label[train_label['labels']==label].index[i]\n        image = cv2.imread(TRAIN_DIR+train_label.loc[idx, 'image'])\n        #increase brighness\n        \n        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n        h, s, v = cv2.split(hsv)\n\n        lim = 255 - 20\n        v[v > lim] = 255\n        v[v <= lim] += 20\n\n        final_hsv = cv2.merge((h, s, v))\n        image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)\n        \n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        img_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n        ret, thresh = cv2.threshold(img_gray, 200, 255, 1)\n        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n        \n        \n        image= cv2.drawContours(image, contours, -1, (0,0,0), 2)\n        image = cv2.Canny(image, 100, 200)\n        \n        ax[i].imshow(image)\n        ax[i].set_title(label)\n        ax[i].set_xticklabels([])\n        ax[i].set_yticklabels([])\n        \nplot_contour(label=\"scab frog_eye_leaf_spot complex\")","06ea1816":"def plot_contour(label):\n    fig, ax = plt.subplots(1,4, figsize=(20, 15))\n    ax = ax.ravel()\n    for i in range(6):\n        amount=1.0; threshold=0.4\n        alpha =1.0;\n        beta= 0.6\n        idx = train_label[train_label['labels']==label].index[i]\n        image = cv2.imread(TRAIN_DIR+train_label.loc[idx, 'image'])\n        \n        image =cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        \n        blurred = cv2.GaussianBlur(image, (5,5), sigmaX=1.0)\n        sharpened = float(amount + 1) * image - float(amount) * blurred\n        sharpened = np.maximum(sharpened, np.zeros(sharpened.shape))\n        sharpened = np.minimum(sharpened, 255 * np.ones(sharpened.shape))\n        sharpened = sharpened.round().astype(np.uint8)\n        if threshold > 0:\n            low_contrast_mask = np.absolute(image - blurred) < threshold\n            np.copyto(sharpened, image, where=low_contrast_mask)\n            \n            \n        img_gray = cv2.cvtColor(sharpened, cv2.COLOR_RGB2GRAY)\n        ret, thresh = cv2.threshold(img_gray, 200, 255, 1)\n        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n        \n        \n        image= cv2.drawContours(sharpened, contours, -1, (255,0,0), 2)\n        \n        ax[i].imshow(image)\n        ax[i].set_title(label)\n        ax[i].set_xticklabels([])\n        ax[i].set_yticklabels([])\n        \nfor label in list(train_label['labels'].unique()):        \n    plot_contour(label )","27ef2894":"### **Canny Edge**","dbcaf223":"# **Play With OpenCV**","b44f3250":"### **Sharpen image**","40bb2b21":"### **Contour**"}}