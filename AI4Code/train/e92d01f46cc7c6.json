{"cell_type":{"25ecf32e":"code","b1296c60":"code","f0fcb16a":"code","917b8de8":"code","bf3d0f0c":"code","7125981c":"code","d7490deb":"code","65655500":"code","c088956c":"code","e40d47e0":"code","cbfffe92":"code","e9865be2":"code","451814cc":"code","0c5bc61b":"code","5fe290d3":"code","fae6353b":"code","f975cc3b":"code","8f5591d8":"code","e6c90ebb":"markdown","fe340f0f":"markdown","bd094520":"markdown","2a8db1ca":"markdown","54e6f30b":"markdown","62597673":"markdown","92759f8f":"markdown","eb5eb29a":"markdown","592fa133":"markdown","25a7f222":"markdown","ae737901":"markdown","5e7f0c9d":"markdown","1a17a05c":"markdown","7e8681b8":"markdown","a1ad5206":"markdown","e4d6b017":"markdown","9d3a8aaf":"markdown","d548e0aa":"markdown","e033d598":"markdown","6ac4647e":"markdown","9a209b16":"markdown","377dfbbd":"markdown","2a5836eb":"markdown","f312db5c":"markdown","773a34de":"markdown","6db6074b":"markdown","9c22b402":"markdown"},"source":{"25ecf32e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1296c60":"test = pd.read_csv(\"..\/input\/tweet-sentiment-extraction\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/\/tweet-sentiment-extraction\/train.csv\")","f0fcb16a":"test.head()","917b8de8":"train.head()","bf3d0f0c":"neutral = train[train['sentiment']==\"neutral\"]","7125981c":"print(neutral.shape[0]\/train.shape[0]*100,\"% of the data is neutral\")","d7490deb":"neutral = neutral.drop(['sentiment','textID'],axis=1).reset_index(drop= True)","65655500":"same = neutral[neutral['text'] == neutral ['selected_text']].reset_index(drop= True)","c088956c":"print(same.shape)\nprint(neutral.shape)","e40d47e0":"same.shape[0]\/neutral.shape[0]","cbfffe92":"diff = neutral[neutral['text'] != neutral ['selected_text']].reset_index(drop= True)","e9865be2":"diff.head(20)","451814cc":"print(diff.loc[0,'text'],\"**\", diff.loc[0,'selected_text'])","0c5bc61b":"print(len(diff.loc[0,'text']),\"**\", len(diff.loc[0,'selected_text']))","5fe290d3":"def compare(a, b):\n    for x, y in zip(a, b):\n        if x != y:\n            print(\"Should be \",x,\" But is \", y)","fae6353b":"compare(diff.loc[0,'text'], diff.loc[0,'selected_text'])","f975cc3b":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","8f5591d8":"jaccard(diff.loc[0,'text'], diff.loc[0,'selected_text'])","e6c90ebb":"# **So, this notebook will show you why people are doing this technique ( if you're a beginner and don't quite undersatand why ) and also alert people who use advanced architectures about S\u0332O\u0332M\u0332E\u0332T\u0332H\u0332I\u0332N\u0332G\u0332 \u0332T\u0332R\u0332I\u0332P\u0332P\u0332Y\u0332 I found in this data!!**","fe340f0f":"**Visualizing the test data**","bd094520":"# **Oh.. So obviously there is a \" \" at the start of the original tweet that does not exist in the selected_text and is messing it all up**","2a8db1ca":"# **But, people should be careful!!**","54e6f30b":"# **Please make sure to comment below if I have any mistakes or if I said something unaccurate. I hope my notebook helped some of you :) **","62597673":"**Just loading the data, nothing to see here**","92759f8f":"# **Hello guys I hope you're all safe and sound all along with your families**","eb5eb29a":"**Visualizing the train data**","592fa133":"**Alright let's compare'em**","25a7f222":"# **O.O**","ae737901":"# **Looks like its just half of the neutral data. So why are people assuming that when sentiment is neutral, selected_text = text**","5e7f0c9d":"# **So why a lot of people are still using the selected_text = text when sentiment is neutral?**","1a17a05c":"# **Seems the same to me.. What about we print the number of characters**","7e8681b8":"# **So as you see the jaccard stays completely untouched and is always 1 ( same phrase ), you can check why by searching more about the jaccard score, but nonetheless now we understand why its ( probably ) safe to assume that selected_text is the same as text when the sentiment is neutral**","a1ad5206":"# **Some advanced models might detect this \" \" that might ruin their predictions. For me this didn't happen but nonetheless I wanted to share this with people so it might be helpful**","e4d6b017":"# **Ahaaa !! There we go, we have an extra character in the original tweet. So, what is it?**","9d3a8aaf":"**This is just a simple function that compares two strings characterwise**","d548e0aa":"**Now we're gonna take just the neutral sentiment part of the train dataset**","e033d598":"# **Well, I don't know about you but it looks the same to me... So, let's see why its showing it as different**","6ac4647e":"# **This notebook is supposed to explore the neutral data especially that many people are just applying selected_text = text for tweets with neutral emotions**","9a209b16":"# **Let's take the first example**","377dfbbd":"We're just gonna drop sentiment and textID","2a5836eb":"# **Alright let's take a look at these buggers**","f312db5c":"# **Well, the metric in this competition is the jaccard score, so, let's see if that's changing**","773a34de":"# **Now here is the tricky part, we take the neutral data where selected_text is the same as the original text**","6db6074b":"# **Let's take a look at the other neutral data ( where selected_text is different from the original tweet )**","9c22b402":"**Alright let's test it out**"}}