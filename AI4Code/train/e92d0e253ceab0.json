{"cell_type":{"3c482892":"code","eb1be922":"code","2b4276c1":"code","2cdef1b5":"code","2d8fd11e":"code","70d797c3":"code","5a5c3568":"code","f1eae8b6":"code","d4a0c8f7":"code","115a4148":"code","374c8977":"code","2337da16":"code","5c513aee":"code","a3fd3243":"code","a142dfc1":"code","b87000b5":"code","4a260adb":"code","1c8f3803":"code","43184288":"code","4ff5e652":"code","dcb6ff0e":"code","9c4123b7":"code","9471d450":"code","7fd58d88":"code","854cbf64":"code","33ae2860":"code","8f0a3097":"code","80814a91":"code","0b4d9a4e":"code","0e8c1657":"code","47c48c0e":"code","7df4b8cc":"code","e9370730":"code","965c56e8":"code","280b2ef9":"code","7efb21e5":"code","ab623585":"code","95709b63":"code","6740bc1b":"code","9a4a898b":"code","be4eb817":"code","5fc4a077":"code","9b47d72a":"code","ef28dbcf":"code","b189155b":"code","0ed2d68c":"code","e780f3c0":"markdown","99ac8406":"markdown","0689b795":"markdown","599071ae":"markdown","b388356e":"markdown","238e582b":"markdown","c250f511":"markdown","2a57a813":"markdown","149180d2":"markdown","a9c1887e":"markdown","d293843a":"markdown","6d3110b7":"markdown","1f2d6ef9":"markdown","498c27dd":"markdown","a88c8769":"markdown","e99a28cd":"markdown","6ca38128":"markdown","33d56a5d":"markdown","553fa113":"markdown","a3c7e4f1":"markdown","d7c69401":"markdown","a631a750":"markdown","f69539c3":"markdown","07b1b3b0":"markdown","2ddd509a":"markdown"},"source":{"3c482892":"pip install openpyxl","eb1be922":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler","2b4276c1":"athletes = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx', engine = 'openpyxl')\nathletes.head()","2cdef1b5":"athletes['Name'].unique().size","2d8fd11e":"athletes['NOC'].unique().size","70d797c3":"athletes['Discipline'].unique().size","5a5c3568":"num_of_athletes = athletes.groupby(by = 'NOC').count()['Name']\n\nplt.figure(figsize = (15,15), dpi = 200)\nsns.barplot(y = num_of_athletes.sort_values(ascending = False).head(80).index, \n            x = num_of_athletes.sort_values(ascending = False).head(80), orient = \"h\")\nplt.title('Number of athletes')\nplt.grid(color = 'b', linestyle = '--')","f1eae8b6":"a = num_of_athletes.apply(pd.Series)\na['rank'] = a[0].rank(ascending = False)\na[a.index == 'Poland']['rank']","d4a0c8f7":"plt.figure(figsize = (15,15), dpi = 200)\nplt.pie(num_of_athletes.sort_values(ascending = False), labels = num_of_athletes.sort_values(ascending = False).index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9)\nplt.title('Participation of athletes in each national team')\nplt.show()\nplt.clf()","115a4148":"num_of_disciplines = athletes.groupby(by = 'Discipline').count()['Name']\nnum_of_disciplines.sort_values(ascending = False)","374c8977":"plt.figure(figsize = (15,15), dpi = 200)\nplt.pie(num_of_disciplines.sort_values(ascending = False), labels = num_of_disciplines.sort_values(ascending = False).index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9)\nplt.title('Participation of athletes in each discipline')\nplt.show()\nplt.clf()","2337da16":"medals = pd.read_csv('..\/input\/olympic-games-2021-medals\/Tokyo 2021 dataset.csv')\nmedals.head(10)","5c513aee":"medals[medals['Team\/NOC'] == 'Poland']['Rank']","a3fd3243":"plt.figure(figsize = (15,15), dpi = 200)\nplt.pie(medals['Total'].sort_values(ascending = False), labels = medals.sort_values(by = 'Total', ascending = False)['Team\/NOC'], \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9)\nplt.title('Distribution of total medals won in terms of each national team')\nplt.show()\nplt.clf()","a142dfc1":"medals[medals['Team\/NOC'] == 'Poland']['Rank by Total']","b87000b5":"for i in num_of_athletes.index:\n    medals.loc[medals['Team\/NOC'] == i, 'points'] = medals['Gold Medal'] * 3 + medals['Silver Medal'] * 2 + medals['Bronze Medal']\n    medals.loc[medals['Team\/NOC'] == i, 'num_of_athletes'] = num_of_athletes[i]","4a260adb":"medals['potential'] = medals['points'] \/ medals['num_of_athletes']\n\nscaler = MinMaxScaler()\nX = np.array(medals['potential']).reshape(-1, 1)\nscaler.fit(X)\nX_scaled = scaler.transform(X)\nmedals['normalized_potential'] = X_scaled.reshape(1,-1)[0]","1c8f3803":"medals.sort_values(by = 'normalized_potential', ascending = False)[['Team\/NOC', 'normalized_potential', 'Gold Medal', 'Silver Medal', 'Bronze Medal', 'num_of_athletes']]","43184288":"plt.figure(figsize = (15,15), dpi = 200)\nsns.barplot(y = medals.sort_values(by = 'normalized_potential', ascending = False)['Team\/NOC'], \n            x = medals.sort_values(by = 'normalized_potential', ascending = False)['normalized_potential'], orient = \"h\")\nplt.title('Potential of athletes of national teams')\nplt.grid(color = 'b', linestyle = '--')","4ff5e652":"medals['rank_potential'] = medals['normalized_potential'].rank(ascending = False)\nmedals[medals['Team\/NOC'] == 'Poland']['rank_potential']","dcb6ff0e":"countries_without_medal = [i for i in athletes['NOC'].unique() if i not in medals['Team\/NOC'].unique()]","9c4123b7":"max(dict(num_of_athletes[countries_without_medal]), \n    key = lambda k: dict(num_of_athletes[countries_without_medal])[k]), max(num_of_athletes[countries_without_medal])","9471d450":"countries = pd.read_csv('..\/input\/countries-of-the-world\/countries of the world.csv')","7fd58d88":"countries['Country'] = countries['Country'].map(lambda x: x.strip())","854cbf64":"noa = num_of_athletes.apply(pd.Series)\nnoa = noa.rename(columns = {0: 'num_of_athletes'})","33ae2860":"cc = [i for i in num_of_athletes.index if i in list(countries['Country'])]\nfor i in cc:\n    noa.loc[noa.index == i, 'population'] = int(countries[countries['Country'] == i]['Population'])","8f0a3097":"noa.loc[noa.index == 'Antigua and Barbuda', 'population'] = int(countries[countries['Country'] == 'Antigua & Barbuda']['Population']) \nnoa.loc[noa.index == 'Bahamas', 'population'] = int(countries[countries['Country'] == 'Bahamas, The']['Population'])\nnoa.loc[noa.index == 'Bosnia and Herzegovina', 'population'] = int(countries[countries['Country'] == 'Bosnia & Herzegovina']['Population'])\nnoa.loc[noa.index == 'Brunei Darussalam', 'population'] = int(countries[countries['Country'] == 'Brunei']['Population'])\nnoa.loc[noa.index == 'Central African Republic', 'population'] = int(countries[countries['Country'] == 'Central African Rep.']['Population'])\nnoa.loc[noa.index == 'Chinese Taipei', 'population'] = int(countries[countries['Country'] == 'Taiwan']['Population'])\nnoa.loc[noa.index == 'Congo', 'population'] = int(countries[countries['Country'] == 'Congo, Repub. of the']['Population'])\nnoa.loc[noa.index == \"C\u00f4te d'Ivoire\", 'population'] = int(countries[countries['Country'] == \"Cote d'Ivoire\"]['Population'])\nnoa.loc[noa.index == 'Democratic Republic of Timor-Leste', 'population'] = int(countries[countries['Country'] == 'East Timor']['Population'])\nnoa.loc[noa.index == 'Democratic Republic of the Congo', 'population'] = int(countries[countries['Country'] == 'Congo, Dem. Rep.']['Population'])\nnoa.loc[noa.index == 'Eswatini', 'population'] = 1467152\nnoa.loc[noa.index == 'Federated States of Micronesia', 'population'] = int(countries[countries['Country'] == 'Micronesia, Fed. St.']['Population'])\nnoa.loc[noa.index == 'Gambia', 'population'] = int(countries[countries['Country'] == 'Gambia, The']['Population'])\nnoa.loc[noa.index == 'Great Britain', 'population'] = int(countries[countries['Country'] == 'United Kingdom']['Population'])\nnoa.loc[noa.index == 'Hong Kong, China', 'population'] = int(countries[countries['Country'] == 'Hong Kong']['Population'])\nnoa.loc[noa.index == 'Islamic Republic of Iran', 'population'] = int(countries[countries['Country'] == 'Iran']['Population'])\nnoa.loc[noa.index == 'Kosovo', 'population'] = 1920079\nnoa.loc[noa.index == \"Lao People's Democratic Republic\", 'population'] = int(countries[countries['Country'] == 'Laos']['Population'])\nnoa.loc[noa.index == 'Montenegro', 'population'] = 623000\nnoa.loc[noa.index == 'Myanmar', 'population'] = int(countries[countries['Country'] == 'Burma']['Population'])\nnoa.loc[noa.index == 'North Macedonia', 'population'] = int(countries[countries['Country'] == 'Macedonia']['Population']) \nnoa.loc[noa.index == 'Palestine', 'population'] = 5159076\nnoa.loc[noa.index == \"People's Republic of China\", 'population'] = int(countries[countries['Country'] == 'China']['Population'])\nnoa.loc[noa.index == 'ROC', 'population'] = int(countries[countries['Country'] == 'Russia']['Population'])\nnoa.loc[noa.index == 'Refugee Olympic Team', 'population'] = 82400000\nnoa.loc[noa.index == 'Republic of Korea', 'population'] = int(countries[countries['Country'] == 'Korea, South']['Population']) \nnoa.loc[noa.index == 'Republic of Moldova', 'population'] = int(countries[countries['Country'] == 'Moldova']['Population'])\nnoa.loc[noa.index == 'Saint Kitts and Nevis', 'population'] = int(countries[countries['Country'] == 'Saint Kitts & Nevis']['Population']) \nnoa.loc[noa.index == 'Sao Tome and Principe', 'population'] = int(countries[countries['Country'] == 'Sao Tome & Principe']['Population']) \nnoa.loc[noa.index == 'South Sudan', 'population'] = 13026129\nnoa.loc[noa.index == 'St Vincent and the Grenadines', 'population'] = int(countries[countries['Country'] == 'Saint Vincent and the Grenadines']['Population']) \nnoa.loc[noa.index == 'Syrian Arab Republic', 'population'] = int(countries[countries['Country'] == 'Syria']['Population']) \nnoa.loc[noa.index == 'Trinidad and Tobago', 'population'] = int(countries[countries['Country'] == 'Trinidad & Tobago']['Population']) \nnoa.loc[noa.index == 'United Republic of Tanzania', 'population'] = int(countries[countries['Country'] == 'Tanzania']['Population']) \nnoa.loc[noa.index == 'United States of America', 'population'] = int(countries[countries['Country'] == 'United States']['Population']) \nnoa.loc[noa.index == 'Virgin Islands, British', 'population'] = int(countries[countries['Country'] == 'British Virgin Is.']['Population']) \nnoa.loc[noa.index == 'Virgin Islands, US', 'population'] = int(countries[countries['Country'] == 'Virgin Islands']['Population'])                                                                    ","80814a91":"noa['sportiness'] = np.log(noa['num_of_athletes']) \/ np.log(noa['population'])","0b4d9a4e":"X = np.array(noa['sportiness']).reshape(-1, 1)\nscaler.fit(X)\nX_scaled = scaler.transform(X)\nnoa['normalized_sportiness'] = X_scaled.reshape(1,-1)[0]","0e8c1657":"noa.sort_values(by = 'normalized_sportiness', ascending = False)[['normalized_sportiness', 'num_of_athletes', 'population']]","47c48c0e":"noa['rank_sportiness'] = noa['normalized_sportiness'].rank(ascending = False)\nnoa[noa.index == 'Poland']['rank_sportiness']","7df4b8cc":"cc2 = [i for i in num_of_athletes.index if i in list(medals['Team\/NOC'])]\nfor i in cc2:\n    noa.loc[noa.index == i, 'points'] = int(medals[medals['Team\/NOC'] == i]['points'])","e9370730":"noa['points'].fillna(0.55, inplace = True)","965c56e8":"noa['hapiness'] = np.log(2 * noa['points']) \/ np.log(noa['population'])","280b2ef9":"X = np.array(noa['hapiness']).reshape(-1, 1)\nscaler.fit(X)\nX_scaled = scaler.transform(X)\nnoa['normalized_hapiness'] = X_scaled.reshape(1,-1)[0]","7efb21e5":"noa.sort_values(by = 'normalized_hapiness', ascending = False)[['normalized_hapiness', 'points', 'population']]","ab623585":"noa['rank_hapiness'] = noa['normalized_hapiness'].rank(ascending = False)\nnoa[noa.index == 'Poland']['rank_hapiness']","95709b63":"countries['Region'] = countries['Region'].map(lambda x: x.strip())","6740bc1b":"for i in cc:\n    noa.loc[noa.index == i, 'region'] = countries[countries['Country'] == i]['Region'].values","9a4a898b":"noa.loc[noa.index == 'Antigua and Barbuda', 'region'] = countries[countries['Country'] == 'Antigua & Barbuda']['Region'].values\nnoa.loc[noa.index == 'Bahamas', 'region'] = countries[countries['Country'] == 'Bahamas, The']['Region'].values\nnoa.loc[noa.index == 'Bosnia and Herzegovina', 'region'] = countries[countries['Country'] == 'Bosnia & Herzegovina']['Region'].values\nnoa.loc[noa.index == 'Brunei Darussalam', 'region'] = countries[countries['Country'] == 'Brunei']['Region'].values\nnoa.loc[noa.index == 'Central African Republic', 'region'] = countries[countries['Country'] == 'Central African Rep.']['Region'].values\nnoa.loc[noa.index == 'Chinese Taipei', 'region'] = countries[countries['Country'] == 'Taiwan']['Region'].values\nnoa.loc[noa.index == 'Congo', 'region'] = countries[countries['Country'] == 'Congo, Repub. of the']['Region'].values\nnoa.loc[noa.index == \"C\u00f4te d'Ivoire\", 'region'] = countries[countries['Country'] == \"Cote d'Ivoire\"]['Region'].values\nnoa.loc[noa.index == 'Democratic Republic of Timor-Leste', 'region'] = countries[countries['Country'] == 'East Timor']['Region'].values\nnoa.loc[noa.index == 'Democratic Republic of the Congo', 'region'] = countries[countries['Country'] == 'Congo, Dem. Rep.']['Region'].values\nnoa.loc[noa.index == 'Eswatini', 'region'] = 'SUB-SAHARAN AFRICA'\nnoa.loc[noa.index == 'Federated States of Micronesia', 'region'] = countries[countries['Country'] == 'Micronesia, Fed. St.']['Region'].values\nnoa.loc[noa.index == 'Gambia', 'region'] = countries[countries['Country'] == 'Gambia, The']['Region'].values\nnoa.loc[noa.index == 'Great Britain', 'region'] = countries[countries['Country'] == 'United Kingdom']['Region'].values\nnoa.loc[noa.index == 'Hong Kong, China', 'region'] = countries[countries['Country'] == 'Hong Kong']['Region'].values\nnoa.loc[noa.index == 'Islamic Republic of Iran', 'region'] = countries[countries['Country'] == 'Iran']['Region'].values\nnoa.loc[noa.index == 'Kosovo', 'region'] = 'EASTERN EUROPE'\nnoa.loc[noa.index == \"Lao People's Democratic Republic\", 'region'] = countries[countries['Country'] == 'Laos']['Region'].values\nnoa.loc[noa.index == 'Montenegro', 'region'] = 'EASTERN EUROPE'\nnoa.loc[noa.index == 'Myanmar', 'region'] = countries[countries['Country'] == 'Burma']['Region'].values\nnoa.loc[noa.index == 'North Macedonia', 'region'] = countries[countries['Country'] == 'Macedonia']['Region'].values\nnoa.loc[noa.index == 'Palestine', 'region'] = 'NEAR EAST'\nnoa.loc[noa.index == \"People's Republic of China\", 'region'] = countries[countries['Country'] == 'China']['Region'].values\nnoa.loc[noa.index == 'ROC', 'region'] = countries[countries['Country'] == 'Russia']['Region'].values\nnoa.loc[noa.index == 'Refugee Olympic Team', 'region'] = 'REFUGEE'\nnoa.loc[noa.index == 'Republic of Korea', 'region'] = countries[countries['Country'] == 'Korea, South']['Region'].values \nnoa.loc[noa.index == 'Republic of Moldova', 'region'] = countries[countries['Country'] == 'Moldova']['Region'].values\nnoa.loc[noa.index == 'Saint Kitts and Nevis', 'region'] = countries[countries['Country'] == 'Saint Kitts & Nevis']['Region'].values \nnoa.loc[noa.index == 'Sao Tome and Principe', 'region'] = countries[countries['Country'] == 'Sao Tome & Principe']['Region'].values \nnoa.loc[noa.index == 'South Sudan', 'region'] = 'SUB-SAHARAN AFRICA'\nnoa.loc[noa.index == 'St Vincent and the Grenadines', 'region'] = countries[countries['Country'] == 'Saint Vincent and the Grenadines']['Region'].values\nnoa.loc[noa.index == 'Syrian Arab Republic', 'region'] = countries[countries['Country'] == 'Syria']['Region'].values\nnoa.loc[noa.index == 'Trinidad and Tobago', 'region'] = countries[countries['Country'] == 'Trinidad & Tobago']['Region'].values\nnoa.loc[noa.index == 'United Republic of Tanzania', 'region'] = countries[countries['Country'] == 'Tanzania']['Region'].values \nnoa.loc[noa.index == 'United States of America', 'region'] = countries[countries['Country'] == 'United States']['Region'].values \nnoa.loc[noa.index == 'Virgin Islands, British', 'region'] = countries[countries['Country'] == 'British Virgin Is.']['Region'].values \nnoa.loc[noa.index == 'Virgin Islands, US', 'region'] = countries[countries['Country'] == 'Virgin Islands']['Region'].values                                                                    ","be4eb817":"noa.groupby(by = 'region').sum()['num_of_athletes']","5fc4a077":"plt.figure(figsize = (10,10))\nplt.pie(x = noa.groupby(by = 'region').sum()['num_of_athletes'], \n        labels = noa.groupby(by = 'region').sum()['num_of_athletes'].index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9, explode = (0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04))\nplt.title('Athletes in regions')\nplt.show()\nplt.clf()","9b47d72a":"for i in cc2:\n    noa.loc[noa.index == i, 'total_medals'] = medals[medals['Team\/NOC'] == i]['Total'].values\n    noa.loc[noa.index == i, 'gold_medals'] = medals[medals['Team\/NOC'] == i]['Gold Medal'].values\n    noa.loc[noa.index == i, 'silver_medals'] = medals[medals['Team\/NOC'] == i]['Silver Medal'].values\n    noa.loc[noa.index == i, 'bronze_medals'] = medals[medals['Team\/NOC'] == i]['Bronze Medal'].values","ef28dbcf":"noa['total_medals'].fillna(0, inplace = True)\nnoa['gold_medals'].fillna(0, inplace = True)\nnoa['silver_medals'].fillna(0, inplace = True)\nnoa['bronze_medals'].fillna(0, inplace = True)","b189155b":"noa.groupby(by = 'region').sum()[['total_medals', 'gold_medals', 'silver_medals', 'bronze_medals']]","0ed2d68c":"plt.figure(figsize = (20,15))\n\nplt.subplot(2,2,1)\nplt.pie(x = noa.groupby(by = 'region').sum()['total_medals'], \n        labels = noa.groupby(by = 'region').sum()['total_medals'].index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9, explode = (0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04))\nplt.title('Total medals')\n\nplt.subplot(2,2,2)\nplt.pie(noa.groupby(by = 'region').sum()['gold_medals'], \n        labels = noa.groupby(by = 'region').sum()['gold_medals'].index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9, explode = (0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04))\nplt.title('Gold medals')\n\nplt.subplot(2,2,3)\nplt.pie(noa.groupby(by = 'region').sum()['silver_medals'], \n        labels = noa.groupby(by = 'region').sum()['silver_medals'].index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9, explode = (0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04))\nplt.title('SIlver medals')\n\nplt.subplot(2,2,4)\nplt.pie(noa.groupby(by = 'region').sum()['bronze_medals'], labels = noa.groupby(by = 'region').sum()['bronze_medals'].index, \n        startangle = 90, autopct = '%1.2f%%', pctdistance = 0.9, explode = (0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04))\nplt.title('Bronze medals')\n\nplt.show()\nplt.clf()","e780f3c0":"### `In terms of medals won Poland took 19th place out of 206. It won 1,3% of all medals.`","99ac8406":"#### Among the countries that did not win a medal, the most disappointing was **_Chile_**, which had the most athletes - 56.","0689b795":"### **How many athletes took part in Olympic Games in Tokio 2020?**","599071ae":"### `Poland took 17th place out of 206 in sporiness ranking.`","b388356e":"#### The most satisfied with Olympic Games can be **_Americans_**, which got the highest number of points taking into account the number of inhabitants. The most unsatisfied should be citizens of **_Pakistan_**. There are as many as almost 166 000 000 and they did not get any medal.","238e582b":"### `1,76% of all athletes are from Poland.`","c250f511":"#### **_Bermuda_** sent only 2 athletes to olympic games, one of them won a gold medal. On the other hand, **_Argentina_** disappointed the most, because as many as 180 athletes got only 3 medals (including no gold medal).","2a57a813":"### **What is the ratio of the each national team's athletes to the number of all athletes?**","149180d2":"### **What is the distribution of medals in terms of region?**","a9c1887e":"### **How many athletes were in each discipline?**","d293843a":"### **What is the distribution of disciplines in terms of the number of participants?**","6d3110b7":"### **What is the level of satisfaction with Olympic Games in each country?**","1f2d6ef9":"### `Poland took 17th place out of 206 in medal table.`","498c27dd":"### **What is the distribution of the number of total medals won in terms of countries?**","a88c8769":"### **What is the distribution of athletes in terms of region?**","e99a28cd":"### **How many countries participated in Games?**","6ca38128":"### `In satisfaction ranking Poland took 26th place out of 206.`","33d56a5d":"### **What was the potential of athletes of each national team?**","553fa113":"### `Poland took 16th place out of all 206 in terms of number of athletes.`","a3c7e4f1":"### **What is the level of sportiness of each countries?**","d7c69401":"### **How many difference sports disciplines were there?**","a631a750":"### `In terms of potential of athletes Poland took 59th place.`","f69539c3":"### **Which national teams did take first 10 places in medal table?** ","07b1b3b0":"### **How many athletes did each national team consist of?**","2ddd509a":"#### The most sportiness country is **_Australia_**, which sent as many as 470 athletes from among only 20 000 000 inhabitants. On the other hand, the least sportiness country is **_Myanmar_**. It had only 2 athletes from among as many as above 47 000 000 inhabitants."}}