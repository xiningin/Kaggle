{"cell_type":{"494cd70e":"code","e25bcd9f":"code","96746430":"code","32b7e8de":"code","352dc4da":"code","bcfce960":"code","b9638ffd":"code","1246c73a":"code","41bfbe43":"code","8a704efe":"code","8a22f654":"code","54b1f351":"code","4a784a89":"code","39843487":"code","02d0d1b9":"code","90a742a7":"code","4423ad24":"code","511a2921":"code","8ad9bf1f":"code","dba8411b":"code","f89cb8a9":"code","7a6faa52":"code","3ce43b32":"code","ef3674d5":"markdown","cc0507f3":"markdown","c7302d9c":"markdown","69c0f873":"markdown","cba82250":"markdown","c63a1d4b":"markdown","52dc2074":"markdown","0203b2fe":"markdown","ea947385":"markdown","b2c59593":"markdown","20f94121":"markdown","ae10edc9":"markdown","624278e1":"markdown"},"source":{"494cd70e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e25bcd9f":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")","96746430":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","32b7e8de":"for df in [train, test]:\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True, drop=False)","352dc4da":"train","bcfce960":"# for every store, country and product combination (18 in total), we have data for 1461 days\ntrain.groupby(['country', 'store', 'product']).count()","b9638ffd":"print(\"Training:\")\nprint(f\"First day: {train.date.min()}\")\nprint(f\"Last day: {train.date.max()}\")","1246c73a":"print(\"Predictions:\")\nprint(f\"First day: {test.date.min()}\")\nprint(f\"Last day: {test.date.max()}\")","41bfbe43":"# num_sold is never zero, every product is always sold every day in every store\ntrain.groupby(['country', 'store', 'product']).num_sold.agg(['min', 'max', 'mean'])","8a704efe":"# On average, KaggleRama sells more of every product in every country in every year\ntrain.groupby(['country', 'store', 'product', train.date.dt.year]).num_sold.mean().unstack('store')","8a22f654":"# group products by year\ngrp = train.groupby(['country', 'store', 'product', train.date.dt.year]).num_sold.mean().unstack(level='product')\ngrp['Hat\/Mug'] = grp['Kaggle Hat'] \/ grp['Kaggle Mug']\ngrp['Mug\/Sticker'] = grp['Kaggle Mug'] \/ grp['Kaggle Sticker']","54b1f351":"# ratios remain about constant, the ratio of Hat:Mug ~ 1.77 and Mug\/Sticker ~ 1.98\ngrp","4a784a89":"# group products by month\ngrp = train.groupby(['product', train.date.dt.month]).num_sold.mean().unstack(level='product')\ngrp['Hat\/Mug'] = grp['Kaggle Hat'] \/ grp['Kaggle Mug']\ngrp['Mug\/Sticker'] = grp['Kaggle Mug'] \/ grp['Kaggle Sticker']","39843487":"# the ratio doesn't remain the same for months, so seasonality is there for products\ngrp","02d0d1b9":"# Sale is higher on weekdays, (here, 0=Monday and 6=Sunday)\ntrain.groupby(['country', 'store', 'product', train.date.dt.weekday]).num_sold.mean().unstack('product')","90a742a7":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.hist(df.num_sold, bins=50, color='blue')\n    ax.set_title(combi)\n    \nplt.suptitle('Histograms of number of products sold', y=1.0)\nplt.tight_layout(h_pad=0.3)\nplt.show()","4423ad24":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store','product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.plot(df.num_sold)\n    ax.set_title(combi)\n    \nplt.tight_layout(h_pad=3.0)\nplt.suptitle('Daily sales for 2015-18', y=1.03)\nplt.show()","511a2921":"# for December\nplt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.bar(range(1, 32), df.num_sold[df.date.dt.month==12].groupby(df.date.dt.day).mean(), color = ['r']*25 + ['orange']*6)\n    ax.set_title(combi)\n    ax.set_xticks(ticks=range(5, 31, 5))\nplt.tight_layout(h_pad=3.0)\nplt.suptitle('Daily sales of December', y=1.03)\nplt.show()","8ad9bf1f":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.resample('MS').num_sold.sum()\n    ax.bar(range(len(resampled)), resampled)\n    ax.set_title(combi)\n    ax.set_ylim(resampled.min(), resampled.max())\n    ax.set_xticks(range(0, 48, 12), [f\"Jan{y}\" for y in range(2015, 2019)])\nplt.suptitle('Monthly sales for 2015-2018', y=1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","dba8411b":"# seeing the seasonality more clearly by averaging over month\nplt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.resample('MS').sum()\n    resampled = resampled.groupby(resampled.index.month).mean()\n    ax.bar(range(1, 13), resampled.num_sold)\n    ax.set_xticks(ticks=range(1, 13), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n    ax.set_title(combi)\n    ax.set_ylim(resampled.num_sold.min(), resampled.num_sold.max())\nplt.suptitle('Monthly sales for 2015-2018', y=1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","f89cb8a9":"# weekly variation\nplt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.bar(range(1, 8), df.num_sold.groupby(df.date.dt.weekday).mean(), color=['r']*5+ ['orange']*2)\n    ax.set_title(combi)\n    ax.set_xticks(ticks=range(1, 8), labels=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\nplt.suptitle('Weeky average')\nplt.tight_layout(h_pad=3.0)\nplt.show()","7a6faa52":"import dateutil.easter as easter","3ce43b32":"plt.figure(figsize=(12, 8))\nfor i, (year, df) in enumerate(train.groupby(train.date.dt.year)):\n    df = df.reset_index(drop=True)\n    ax = plt.subplot(4, 1, i+1, ymargin=0.5)\n    april = df.num_sold[(df.date.dt.month==4)].groupby(df.date.dt.day).mean()\n    date_range = pd.date_range(start=f'{year}-04-01', end=f'{year}-04-30', freq='D')\n    easter_date = easter.easter(year)\n    color = ['r' if d == easter_date else 'lightblue' if (d.date() - easter_date).days in range(6) else 'b' if d.dayofweek < 5 else 'orange' for d in date_range]\n    ax.bar(range(1, 31),\n           april,\n           color=color)\n    ax.set_title(str(year))\n    ax.set_xticks(ticks=range(5, 31, 5))\nplt.tight_layout(h_pad=3.0)\nplt.suptitle('Daily sales for April', y=1.03)\nplt.show()","ef3674d5":"The diagram shows daily sales for April of the four years and we find that during the week after Easter, sales are higher than normal. Weekends are colored orange, Easter Sunday is marked red, the week after Easter is colored light blue.","cc0507f3":"Resume reading from here:https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense\/notebook?scriptVersionId=84561837&cellId=17 ","c7302d9c":"### Easter holiday","69c0f873":"Inference:\n\n* Saturday and Sundays experience higher sales\n* Fri also has larger sales compared to other working days","cba82250":"Credits: https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense","c63a1d4b":"Inference:\n\n* Kaggle Hat: max in Apr, min in Sep\n* Kaggle Mug: max in Dec, min in Jun,Jul\n* Kaggle Sticker: max in Dec, min in Feb","52dc2074":"## Time Series","0203b2fe":"Refer: [this nb cell](https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense\/notebook?scriptVersionId=84561837&cellId=15)\n\nInference:\n\nThe histograms for every country-store-product combination show that all histograms are skewed. For every product, there are some days with sales far above the mean. For these outliers, predictions will be much less accurate than for the regular days. This is why the competition is scored by Symmetric mean absolute percentage error (SMAPE) rather than MAE or MSE.\nThe histograms of the Kaggle Hat looks wider than the histograms of the other two products.","ea947385":"### Trend and Seasonality","b2c59593":"Inference:\n\n* We can see an upward trend\n* There is seasonal variation for every product","20f94121":"We zoom in on the end of year, particularly December and plot sales average for these 31 days:","ae10edc9":"### Histograms","624278e1":"Inference: \n* 1st column: Kaggle Hats sell more in the first half of every year \n* 2nd column: Kaggle mugs sell more at the end of every year (during winters)\n* 3rd column: Kaggle stickers sale remains constant throughout the year"}}