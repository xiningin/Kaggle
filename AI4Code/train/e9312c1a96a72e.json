{"cell_type":{"2a4adc78":"code","886ee870":"code","260bcede":"code","dd88a36e":"code","dfc5e8ad":"code","150bf449":"code","1d155088":"code","5c051910":"code","d59b022a":"code","8a681865":"code","2b0494ac":"code","c9d27446":"code","527d4e0c":"code","4c59b701":"code","49ba51f9":"markdown","b521b0c1":"markdown"},"source":{"2a4adc78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n!pip install -q -U keras-tuner\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf # deep learning\nfrom keras_tuner import RandomSearch # hyperparameter tuning\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","886ee870":"fashion_mnist = tf.keras.datasets.fashion_mnist","260bcede":"(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","dd88a36e":"train_images = train_images\/255.0\ntest_images = test_images\/255.0","dfc5e8ad":"train_images = train_images.reshape(len(train_images), 28, 28, 1)\ntest_images = test_images.reshape(len(test_images), 28, 28, 1)","150bf449":"train_images.shape","1d155088":"def build_model(hp):\n    model = tf.keras.Sequential([\n        # first CNN layer\n        tf.keras.layers.Conv2D(\n        filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step = 16),\n        kernel_size = hp.Choice('conv_1_kernel', values=[3,5]),\n        activation='relu',\n        input_shape=(28,28,1)),\n        \n        # second CNN layer\n        tf.keras.layers.Conv2D(\n        filters=hp.Int('conv_2_filter', min_value=32, max_value=128, step = 16),\n        kernel_size = hp.Choice('conv_2_kernel', values=[3,5]),\n        activation='relu',\n        input_shape=(28,28,1)),\n        \n        # flattening layer\n        tf.keras.layers.Flatten(),\n        \n        # first hidden layer\n        tf.keras.layers.Dense(\n        units = hp.Int('dense_1_units', min_value=32, max_value=128, step=16),\n        activation='relu'),\n        \n        # output layer\n        tf.keras.layers.Dense(\n        units=10,\n        activation='softmax')\n    ])\n    \n    model.compile(optimizer=tf.keras.optimizers.Adam(hp.Choice('learning_rate', values=[1e-2, 1e-3])),\n                 loss='sparse_categorical_crossentropy',\n                 metrics=['accuracy'])\n    \n    return model","5c051910":"tuner_search = RandomSearch(build_model, objective='val_accuracy', max_trials=5, directory='output', project_name='MNIST Fashion')","d59b022a":"tuner_search.search(train_images, train_labels, epochs=3, validation_split=0.1)","8a681865":"model = tuner_search.get_best_models(num_models=1)[0]","2b0494ac":"model.summary()","c9d27446":"model.fit(train_images, train_labels, epochs=10, validation_split=0.1, initial_epoch=3)","527d4e0c":"pred_y = np.argmax(model.predict(test_images), axis=-1)","4c59b701":"from sklearn.metrics import accuracy_score\n\naccuracy_score(test_labels, pred_y)","49ba51f9":"### **Downloading MNIST fashion Dataset**","b521b0c1":"#### **Min Max Scalling** "}}