{"cell_type":{"522341d2":"code","50577148":"code","55edc2a0":"code","9c27e5db":"code","c448abdc":"code","5aab9754":"code","2cb235f3":"code","a20b1717":"code","8e915d60":"code","7317dbf2":"code","58ddeb46":"code","ac4e1683":"code","22af3688":"code","e3153c97":"code","7029a262":"code","160fb48e":"code","1b8452ee":"code","73dc52bd":"code","9fa051e0":"code","974bb5fa":"code","c0cc8d1f":"code","c8dbe767":"code","4615bd8b":"code","d4b396fb":"code","a657fcc3":"code","a5d3a929":"code","1abc433d":"code","4fe1b4c3":"code","7dc0ba78":"code","241de196":"code","96708158":"code","326192b2":"code","2b398e3c":"code","22884a87":"code","668acaf9":"code","a104d06e":"code","1dc78d57":"code","dc572022":"code","d5511800":"code","5cbb0978":"code","e4d7429e":"code","c1e9a499":"markdown","e3a2b34b":"markdown","cf390ab1":"markdown","35a1b590":"markdown","49b5fe9e":"markdown","ca0d51dc":"markdown","8870c894":"markdown","791f58e0":"markdown","46591bfa":"markdown","14b23180":"markdown","69acd619":"markdown","e5ba28ea":"markdown","9c4bec2b":"markdown","d48ca4d4":"markdown","76501700":"markdown","1ce429c6":"markdown","2296003a":"markdown","83bcb50c":"markdown","e78c7877":"markdown","af77ff5b":"markdown","298c5e31":"markdown","c691ea4a":"markdown","c019e6ea":"markdown","5bebec78":"markdown","69c8c7fc":"markdown","3f960f1b":"markdown","2a90b4e2":"markdown"},"source":{"522341d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50577148":"df = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndf.head()","55edc2a0":"df.shape","9c27e5db":"X = df.iloc[:,3:13]\ny = df.iloc[:, 13]","c448abdc":"X.shape, y.shape","5aab9754":"X.Geography.unique()","2cb235f3":"X['Gender'].unique()","a20b1717":"geo_cat = pd.get_dummies(X[\"Geography\"], drop_first = True)\ngender_cat = pd.get_dummies(X['Gender'], drop_first = True)","8e915d60":"geo_cat.head()","7317dbf2":"# merge geo_cat and gender_cat into our X.\n\nX = pd.concat([X, geo_cat, gender_cat], axis = 1)","58ddeb46":"X.head()","ac4e1683":"X = X.drop(['Geography',\"Gender\"], axis = 1)","22af3688":"X.head()","e3153c97":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 9)","7029a262":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","160fb48e":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)\n","1b8452ee":"X.head()","73dc52bd":"X_train","9fa051e0":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n# from keras.layers import LeakyReLU, PReLU, ELU\n# from keras.layers import Dropout","974bb5fa":"# Initializing the ANN\nclf = Sequential()","c0cc8d1f":"# Adding the Input layer and the first hidden layer.\nclf.add(Dense(units = 6, kernel_initializer = 'he_uniform', activation = 'relu', input_dim = 11 ))\n# clf.add(Dense(output_dim = 6, init = 'he_uniform', activation = 'relu', input_dim = 11 )) # Parameter name chaned refer to https:\/\/keras.io\/api\/layers\/core_layers\/dense\/","c8dbe767":"# Adding the second hidden layer\nclf.add(Dense(units = 6, kernel_initializer = 'he_uniform', activation = 'relu' ))","4615bd8b":"# Adding Output Layer\nclf.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))","d4b396fb":"# Classifier or Model Summary.\nclf.summary()","a657fcc3":"# Compiling the model\nclf.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","a5d3a929":"# Fit the model.\nclf_history = clf.fit(X_train, y_train, validation_split = 0.33, batch_size = 10, epochs = 100)","1abc433d":"clf_history","4fe1b4c3":"clf_history.history.keys()","7dc0ba78":"import matplotlib.pyplot as plt","241de196":"plt.plot(clf_history.history['accuracy'])\nplt.plot(clf_history.history['val_accuracy'])\n\nplt.title('Model Accuracy')\n\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\n\nplt.legend(['Train', 'Validation'], loc = 'best')\n\nplt.show()","96708158":"plt.plot(clf_history.history['loss'])\nplt.plot(clf_history.history['val_loss'])\n\nplt.title('Model Loss')\n\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n\nplt.legend(['Train', 'Validation'], loc = 'best')\n\nplt.show()","326192b2":"y_pred = clf.predict(X_test)","2b398e3c":"y_pred","22884a87":"# Lets set the threshold... if less than 0.5 than set it to false.\ny_pred = (y_pred > 0.5)\ny_pred","668acaf9":"# Lets see the accuracy of our Test Dataset.\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","a104d06e":"cm","1dc78d57":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(y_pred, y_test)\n\nscore","dc572022":"clf2 = Sequential()\n\n# Adding the Input layer and the first hidden layer.\nclf2.add(Dense(units = 10, kernel_initializer = 'he_normal', activation = 'relu', input_dim = 11 ))\n\n\n# Adding the second hidden layer\nclf2.add(Dense(units = 20, kernel_initializer = 'he_normal', activation = 'relu' ))\n\n# Adding the third hidden layer\nclf2.add(Dense(units = 15, kernel_initializer = 'he_normal', activation = 'relu' ))\n\n\n# Adding Output Layer\nclf2.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))\n\n# Compiling the model\nclf2.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fit the model.\nclf2_history = clf2.fit(X_train, y_train, validation_split = 0.33, batch_size = 10, epochs = 100)\n\n","d5511800":"y_pred = clf2.predict(X_test)\ny_pred = (y_pred > 0.5)\nscore = accuracy_score(y_pred, y_test)\nscore","5cbb0978":"from keras.layers import Dropout","e4d7429e":"clf3 = Sequential()\n\n# Adding the Input layer and the first hidden layer.\nclf3.add(Dense(units = 10, kernel_initializer = 'he_normal', activation = 'relu', input_dim = 11 ))\n\n# Add dropout layer\nclf3.add(Dropout(0.3)) # This is just a random threshold as of now\n\n# Adding the second hidden layer\nclf3.add(Dense(units = 20, kernel_initializer = 'he_normal', activation = 'relu' ))\n\n# Add dropout layer\nclf3.add(Dropout(0.4)) # This is just a random threshold as of now\n\n# Adding the third hidden layer\nclf3.add(Dense(units = 15, kernel_initializer = 'he_normal', activation = 'relu' ))\n\n# Add dropout layer\nclf3.add(Dropout(0.2)) # This is just a random threshold as of now\n\n# Adding Output Layer\nclf3.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))\n\n# Compiling the model\nclf3.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fit the model.\nclf3_history = clf3.fit(X_train, y_train, validation_split = 0.33, batch_size = 10, epochs = 100)\n","c1e9a499":"Now have to drop original features, we now we have numerical format for those.\n","e3a2b34b":"Similar to Accuracy.. we can visualize for Loss.","cf390ab1":"So to compile as well we have to set some parameters such as \n* `optimizer` - adam is one of the most popular one so using it. Other optimizer can be found at https:\/\/keras.io\/api\/optimizers\/\n* `loss` - The purpose of loss functions is to compute the quantity that a model should seek to minimize during training. Based on the problem we are solving there are various loss functions. Here we are using binary_crossentropy. Use this cross-entropy loss when there are only two label classes (assumed to be 0 and 1). For each example, there should be a single floating-point value per prediction. Refer site for more details https:\/\/keras.io\/api\/losses\/ \n* `metrics` - The compile() method takes a metrics argument, which is a list of metrics. A metric is a function that is used to judge the performance of your model. Metric functions are similar to loss functions, except that the results from evaluating a metric are not used when training the model. Note that you may use any loss function as a metric. Various metrics are available, out of which we are using accuracy.Refer https:\/\/keras.io\/api\/metrics\/","35a1b590":"Now splitting the dataset into the training and test split using sklearn","49b5fe9e":"Lets see what our clf_history is hodling..","ca0d51dc":"As we are defining the second layer we will not require the `input_dim`.","8870c894":"With the change of parameters, we observe that the accuracy has changed.\n\n* Train Dataset was = 0.8690 --> 0.8750\n* Validation Dataset = 0.8614 --> 0.8504 (seems gone down.. but a very small difference.)\n* Test Dataset = 0.859 --> 0.845  (seems gone down.. but a very small difference.)","791f58e0":"# Step 2: Working on DL","46591bfa":"So till here we had made a model with 1 Input Layer; 2 Hidden Layers; and 1 Output Layer.\nIn Input Layer we have 11 Neurons (which are my features); and first Dense Layer we do have 6 Neurons; and in 2nd hidden layer as well we do have 6 neurons; finally in the output layer we have just one neuron.","14b23180":"This looks something familiar... its a dictionary.\nand it has the same values which we were seeing loss, accuracy, val_loss, val_accuracy during rum-time.\nLets use it to plot a visualization graph.","69acd619":"We also observed that Geography and Gender are Categorical features, so we have to make it Numerical using dummies method.","e5ba28ea":"Besure not to add to many hidden layers.. as it will lead to overfitting of the data.","9c4bec2b":"In the `model.fit()` method we do have some parameters which we are going to use.\n   \n* X : our training data. Can be Vector, array or matrix      \n* Y : our training labels. Can be Vector, array or matrix   \n* validation_split : to split the provided dataset into 2 sets one for training and another for validation.    \n* Batch_size : it can take any integer value or NULL and by default, it will be set to 32. It specifies no. of samples per gradient.      \n* Epochs : an integer and number of epochs we want to train our model for.      \n* Verbose : specifies verbosity mode(0 = silent, 1= progress bar, 2 = one line per epoch).      \n* Shuffle : whether we want to shuffle our training data before each epoch.      \n* steps_per_epoch : it specifies the total number of steps taken before one epoch has finished and started the next epoch. By default it values is set to NULL.","d48ca4d4":"We can play around with the parameters in the model.","76501700":"for `tf.keras.callbacks.History` refer https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/History ","1ce429c6":"From above output we can see that the model is getting trained and also displaying the validation accuray `val_accuracy` after each epoch.\nAlso we have `loss` and `accuracy` calculated on train dataset, and on the validation dataset as `val_loss` and `val_accuracy`.\nOn comparing the two accuracy we can say that the model was doing pretty good.. and both are nearby.. and not huge difference. If having huge difference then some issue can be considered.","2296003a":"Feature Scaling: ","83bcb50c":"From visualization we can see that it was increasing...","e78c7877":"We can also try using the dropout layer after each hidden layer.. so as to drop some neuorns based on some thereshold.","af77ff5b":"From above it is clear that RowNumber; CustomerID, Surname are not required for training the model, and will not play any role. Also these are just a unique for a Customer.\nSo will ignore them, and consider rest of the features.","298c5e31":"Other options for loc in legend:\n    best\n\tupper right\n\tupper left\n\tlower left\n\tlower right\n\tright\n\tcenter left\n\tcenter right\n\tlower center\n\tupper center\n\tcenter","c691ea4a":"So we have seen that the accuracy on\n\n* Train Dataset was = 0.8690 \n* Validation Dataset = 0.8614\n* Test Dataset = 0.859\n\nand all are approx nearby... which is the best way to see if model is doing good.. or if not then there is ovefit issue.","c019e6ea":"While defining Dense layer we have to pass some parameters \/ arguments such as\n* `units` which is to define how many neurons we need in the hidden layer. So here we are taking it as 6. This is just a randon guess. But using Hyper Optimization we may get to the exact count of neurons required.\n* `kernel_initializer` - Initializer for the kernel weights matrix. Here we are going with `he_uniform` as this works well with relu activation function.\n* `activation` - using relu. Generally for hidden layer relu or leaky relu is uased.. and in the output layer we may use sigmoid or softmax. As relu helps in Vanishing Gradient Problem.\n* `input_dim` - Here we have taken it as 11, and this is the count of features which we are passing to the model. Check X_train.shape","5bebec78":"Calculate the accuracy on test dataset","69c8c7fc":"# Using Test Dataset to predict\nNow lets test the model with our test dataset.","3f960f1b":"This time lets take 3 hidden layes and change the number of neurons in each hidden layer.\nAlso changing the kernel_initializer.","2a90b4e2":"Once the model is created, you can config the model with losses and metrics with `model.compile()`, train the model with `model.fit()`, or use the model to do prediction with `model.predict()`.\nRefer https:\/\/keras.io\/api\/models\/model\/"}}