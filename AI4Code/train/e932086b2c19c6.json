{"cell_type":{"af14e654":"code","3644186d":"code","adb954bc":"code","d9055063":"code","d20e5acd":"code","af2adfc2":"code","d6c2a1b1":"code","52512170":"code","b5bb2fe7":"code","bc9fb59f":"code","182bb54f":"code","ea24af76":"code","79fdac99":"code","ec8362b5":"code","b196c1b2":"code","02a5dd50":"code","5a416744":"code","f55c379a":"code","9ff783cc":"code","cc50a0bb":"markdown","6c5675d0":"markdown","9d16ff89":"markdown","265b0fce":"markdown","33b16b3f":"markdown"},"source":{"af14e654":"# Importing Required Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3644186d":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\ntrain_data.head()","adb954bc":"X_train = train_data.iloc[:, 1:]\ny_train=train_data[[\"label\"]]\n\nprint(\"X_train shape: \\t{} \\ny_train shape: \\t{}\".format(X_train.shape, y_train.shape))","d9055063":"X_train = X_train.values\/255.0","d20e5acd":"X_train = X_train.reshape(X_train.shape[0],28,28)\nX_train.shape","af2adfc2":"plt.imshow(X_train[42])\nplt.grid(False)\nplt.gray()\n# plt.axis('off')\nplt.show()","d6c2a1b1":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n    ])","52512170":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","b5bb2fe7":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('accuracy')>0.999):\n      print(\"\\nStopping training with accuracy: {}\".format(logs.get('accuracy')))\n      self.model.stop_training = True\n        \ncallbacks = myCallback()","bc9fb59f":"# Reshaping into 4dim before feeding the model\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_train.shape","182bb54f":"print(model.summary)\nhistory = model.fit(X_train, y_train,epochs=100, callbacks=[callbacks])","ea24af76":"metrics = pd.DataFrame(model.history.history)\n\nmetrics[['accuracy','loss']].plot(figsize=(10, 5))","79fdac99":"X_test = test_data.copy()\nX_test.shape","ec8362b5":"# Normalizing\nX_test = X_test.values\/255.0\n\n# Reshaping\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_test.shape","b196c1b2":"# prediction\nprediction = model.predict(X_test)","02a5dd50":"sample_submisison = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nsample_submisison.head()","5a416744":"# Rounding\nprediction = np.array(np.round(prediction), dtype='int64')\n\n# Converting multiple(10) columns into one\nprediction = (np.argmax(prediction, axis=1))\n\n# Creating dataframe\nprediction = pd.DataFrame({'ImageId': range(1,len(prediction)+1), 'Label': prediction})","f55c379a":"prediction.head()","9ff783cc":"prediction.to_csv('submission.csv',index=False)","cc50a0bb":"## Plotting an image","6c5675d0":"## Normalizing","9d16ff89":"## Prediction with test data","265b0fce":"## Reshaping","33b16b3f":"## Model Building and Training"}}