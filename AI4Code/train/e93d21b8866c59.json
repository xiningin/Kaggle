{"cell_type":{"73019de8":"code","1b9afea1":"code","b6763bd8":"code","b11f20a8":"code","86d559e7":"code","324b1975":"code","c32fef75":"code","00480930":"code","b718fe0e":"code","1ddab5b3":"code","e118597b":"code","3e854f3c":"code","1107b19a":"code","6846af4a":"code","0358abe5":"code","2ff39c86":"code","e4ff91c5":"code","1232fe97":"code","6bb0fbcb":"code","04265dc2":"code","a01469a0":"code","4fa47c03":"code","0186aa1a":"code","748d20fb":"code","d70cee6c":"code","f531b444":"code","22ad8cef":"code","140c56ba":"code","ac10f5b9":"code","0ec2c3db":"code","a12531bd":"code","fb59491e":"code","57fe596c":"code","1a534ccf":"code","86109879":"code","416ab20d":"code","b8e37530":"code","e52b5ee8":"code","8b58b8b9":"code","0e4acf8d":"code","8a0a3246":"code","08fe2973":"code","cac82f2e":"code","be152d46":"code","b969ed5b":"code","ff563689":"code","d826ec59":"markdown","130d6b61":"markdown","56a93af4":"markdown","bb8d3ba9":"markdown","3c533846":"markdown"},"source":{"73019de8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1b9afea1":"pip install pygal","b6763bd8":"pip install squarify","b11f20a8":"import plotly as plot\nimport pygal as py\nimport squarify as sq\nimport matplotlib \nplt.rcParams[\"figure.figsize\"] = (20,15)\nmatplotlib.rc('xtick', labelsize=7) \nmatplotlib.rc('ytick', labelsize=7) \n\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 5}\n\nmatplotlib.rc('font', **font)","86d559e7":"%%time\nfrom IPython.display import Image\nImage(filename='..\/input\/photofiles\/motogp.png', width=800, height=600)","324b1975":"mt=pd.read_csv(\"..\/input\/motogp-all-time-riders\/motogp_allriders.csv\",engine=\"python\",encoding='latin-1')","c32fef75":"%%time \nmt\n\nmt.style.highlight_null(null_color=\"red\")","00480930":"mt1=mt.fillna(0)","b718fe0e":"from PIL import Image,ImageFont,ImageDraw\n\nim1 = Image.open(\"..\/input\/photofiles\/valentio.jpg\")\nim2 = Image.open(\"..\/input\/photo2\/AGOSTINI-Giacomo.jpg\")\nim3 = Image.open(\"..\/input\/photofiles\/MARQUEZ-Marc.jpg\")\nim4 = Image.open(\"..\/input\/photofiles\/Mick-Doohan (1).jpg\")\nim5 = Image.open(\"..\/input\/photofiles\/LORENZO-JorgE.jpg\")\n\n\ndef get_concat_h_cut(im1,im2,img3,im4,im5):\n    dst = Image.new('RGB', (im1.width + im2.width + im3.width + im4.width + im5.width, min(im1.height, im2.height,im3.height,im4.height+im5.height)))\n    dst.paste(im1, (0, 0))\n    dst.paste(im2, (im1.width, 0))\n    dst.paste(im3,(im1.width+im2.width,0))\n    dst.paste(im4,(im1.width+im2.width+im3.width,0))\n    dst.paste(im5,(im1.width+im2.width+im3.width+im4.width,0))\n    return dst\n\ndef get_concat_v_cut(im1,im2,img3,im4,im5):\n    dst = Image.new('RGB', (min(im1.width, im2.width), im1.height + im2.height))\n    dst.paste(im1, (0, 0))\n    dst.paste(im2, (0, im1.height))\n    return dst\n\nNEW_img=get_concat_h_cut(im1,im2,im3,im4,im5)\nNEW_img.save('pillow_concat_h_cut.jpg')","1ddab5b3":"img = Image.open(\"..\/input\/photo2\/pillow_concat_h_cut.jpg\")\ndraw = ImageDraw.Draw(img)\n#font = ImageFont.truetype(\"..\/input\/fontsttf\/AlfaSlabOne-Regular.ttf\", 10)\ndraw.text((450, 0),\"Top 5 Players in Moto gp's history\",(0,0,0)) # this will draw text with Blackcolor and 16 size\nimg","e118597b":"from wordcloud import WordCloud, STOPWORDS\ncomment_words = ''\nstopwords = set(STOPWORDS)\n \n# iterate through the csv file\nfor val in mt.Name:\n     \n    # typecaste each val to string\n    val = str(val)\n \n    # split the value\n    tokens = val.split()\n     \n    # Converts each token into lowercase\n    for i in range(len(tokens)):\n        tokens[i] = tokens[i].lower()\n     \n    comment_words += \" \".join(tokens)+\" \"\n \nwordcloud = WordCloud(width = 800, height = 800,\n                background_color ='white',\n                stopwords = stopwords,\n                min_font_size = 10).generate(comment_words)\n \n# plot the WordCloud image                      \nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.tight_layout(pad = 0)\n \nplt.show()","3e854f3c":"mt.shape","1107b19a":"mt.describe().transpose()","6846af4a":"mt.info()","0358abe5":"mt.dtypes","2ff39c86":"mt.plot.box()","e4ff91c5":"mt.plot.barh(x=\"Name\",y=\"victories\",color=\"red\",alpha=0.80);plt.xlabel(\"victories\");plt.ylabel(\"Name of Players\");\nplt.title(\"Victories by Players\");plt.show()","1232fe97":"mt[mt[\"World Championships\"]>0].plot(x=\"Name\",y=\"World Championships\",kind=\"bar\",color=\"green\")\nplt.xlabel(\"Player name\")\nplt.ylabel(\"No . of world campionships\")\nplt.title(\"No. of world title won by players\",fontsize=10,pad=5)\nplt.show()","6bb0fbcb":"w_c = mt[mt[\"World Championships\"]>0]\n\n#Utilise matplotlib to scale our goal numbers between the min and max, then assign this scale to our values.\nnorm = matplotlib.colors.Normalize(vmin=min(w_c[\"World Championships\"]), vmax=max(w_c[\"World Championships\"]))\ncolors = [matplotlib.cm.Blues(norm(value)) for value in w_c[\"World Championships\"]]\n\n#Create our plot and resize it.\nfig = plt.gcf()\nax = fig.add_subplot()\n\n#Use squarify to plot our data, label it and add colours. We add an alpha layer to ensure black labels show through\nsq.plot(label=w_c.Name,sizes=w_c.victories, color = colors, alpha=.6,pad = True)\nplt.title(\"Moto gp championships winner with thier sizes showing victories\",fontsize=23,fontweight=\"bold\")\n#Remove our axes and display the plot\nplt.axis('off')\nplt.show()","04265dc2":"df_mt=mt.drop(columns=[\"pole positions from '74 to 2021\",\"race fastest lap to 2021\",\"World Championships\"])\n\ndf_mt.plot(x='Name', kind='bar', stacked=True,\n        title='Stacked Bar Graph by dataframe')\n\nplt.xlabel(\"Name of moto gp players\");plt.ylabel(\"WINNERS in 1 st,2nd,3rd position\")\nplt.show()","a01469a0":"line_chart = py.StackedBar()\nline_chart.title = 'Browser usage evolution (in %)'\nline_chart.add('victories', mt1[\"victories\"].to_list())\nline_chart.add('Championships',mt1[\"World Championships\"].to_list())\nline_chart.render_in_browser()","4fa47c03":"total = sum(mt1[\"victories\"])\ndata = [sum(mt1[\"victories\"].head(10)),sum(mt1[\"victories\"])-sum(mt1[\"victories\"].head(10))]\n\n\n# Setting size in Chart based on\n# given values\nsizes = data\n\n# Setting labels for items in Chart\nlabels = ['top 10 player victories', 'Other players victories']\n\n# colors\ncolors = ['green', 'yellow']\n\n# explosion\nexplode = (0.05, 0.05)\n\n# Pie Chart\nplt.pie(sizes, colors=colors, labels=labels,autopct='%1.1f%%', pctdistance=0.85,explode=explode)\n\n# draw circle\ncentre_circle = plt.Circle((0, 0), 0.70, fc='white')\nfig = plt.gcf()\n\n# Adding Circle in Pie chart\nfig.gca().add_artist(centre_circle)\n\n# Adding Title of chart\nplt.title('Victories of top 10 players vs other players')\n\n# Add Legends\nplt.legend(labels, loc=\"upper left\", title=\"Comparision of top players vs others\")\n\n# Displaing Chart\nplt.show()\n","0186aa1a":"mt1.iloc[:,0:4].style.bar(subset=['victories', '2nd places',\"3rd places\"], color='#d65f5f')\n","748d20fb":"corr=mt.corr()\ncorr.style.highlight_max(color=\"red\",axis=1)","d70cee6c":"sns.heatmap(corr)","f531b444":"pip install klib","22ad8cef":"import klib","140c56ba":"klib.corr_plot(mt, split='pos') # displaying only positive correlations, other settings include threshold, cmap...","ac10f5b9":"klib.dist_plot(mt) # default representation of a distribution plot, other settings include fill_range, histogram, ...\nplt.show()","0ec2c3db":"klib.cat_plot(mt, top=4, bottom=4) # representation of the 4 most & least common values in each categorical column ;\nplt.show()","a12531bd":"plt.figure(facecolor=\"olive\",edgecolor=\"green\")\nsns.set_palette( 'inferno_r')\nsns.set_style(\"darkgrid\")\nmt2=mt1.sort_values(by=\"victories\",ascending=False).head(10)\nmt3=mt1.sort_values(by=\"2nd places\",ascending=False).head(10)\nmt4=mt1.sort_values(by=\"3rd places\",ascending=False).head(10)\nmt5=mt1.sort_values(by=\"World Championships\",ascending=False).head(10)\nfig, axes = plt.subplots(4,1)\nfig.suptitle('Players top in their positions')\n\n\nsns.barplot(ax=axes[0], x=mt2.Name, y=mt2.victories)\naxes[0].set_title(\"players with highest victories\")\n\n\nsns.barplot(ax=axes[1], x=mt3.Name, y=mt3[\"2nd places\"])\naxes[1].set_title(\"Players with most no. of 2 nd positions\")\n\n\nsns.barplot(ax=axes[2], x=mt4.Name, y=mt4[\"3rd places\"])\naxes[2].set_title(\"Players with most no. of 3rd positions\")\n\nsns.barplot(ax=axes[3], x=mt5.Name, y=mt5[\"World Championships\"])\naxes[3].set_title(\"Players with most no. of World Campionships\")\n\nplt.xticks(rotation=90)\nplt.show()","fb59491e":"sns.pairplot(mt1,palette=\"rainbow\",corner=True,plot_kws=dict(marker=\"+\", linewidth=1),\n    diag_kws=dict(fill=False));plt.show()","57fe596c":"import plotly.graph_objects as go\n\ncategories = list(mt1[\"Name\"])\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n      r=mt1[\"victories\"].tolist(),\n      theta=categories,\n      fill='toself',\n      name='1st place'\n))\nfig.add_trace(go.Scatterpolar(\n      r=mt1[\"2nd places\"].tolist(),\n      theta=categories,\n      fill='toself',\n      name='2nd place'\n))\n\nfig.add_trace(go.Scatterpolar(\n      r=mt1[\"3rd places\"].tolist(),\n      theta=categories,\n      fill='toself',\n      name='3rd Place'\n))\n\nfig.add_trace(go.Scatterpolar(\n      r=mt1[\"World Championships\"].tolist(),\n      theta=categories,\n      fill='toself',\n      name='World champoionships'\n))\n\nfig.update_layout(\n     font=dict(\n        family=\"Courier New, monospace\",\n        size=6,\n        color=\"RebeccaPurple\"\n    ),\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 90],\n     \n    )),\n  showlegend=True\n)\n\nfig.show()\n","1a534ccf":"import plotly.express as px\nfig = px.box(mt1, y=\"race fastest lap to 2021\", points=\"all\",notched=True)\nfig.show()","86109879":"fig = go.Figure()\n# Use x instead of y argument for horizontal plot\nfig.add_trace(go.Box(x=mt1[\"victories\"],name='1st places'))\nfig.add_trace(go.Box(x=mt1[\"2nd places\"],name=\"2nd places\"))\nfig.add_trace(go.Box(x=mt1[\"3rd places\"],name=\"3rd place\"))\nfig.add_trace(go.Box(x=mt1[\"World Championships\"],name=\"World Championships\"))\n\nfig.update_layout(title_text=\"Box ploting players position in given data\")\nfig.update_traces(orientation='h')\nfig.show()","416ab20d":"fig = px.pie(mt1[mt1[\"World Championships\"]>0], values='World Championships', names='Name', title='championships won the players')\nfig.show()","b8e37530":"fig = px.scatter(mt1, x=\"pole positions from '74 to 2021\", y=\"World Championships\", size='victories',color=\"race fastest lap to 2021\")\nfig.show()","e52b5ee8":"sns.lmplot(data=mt1, x=\"pole positions from '74 to 2021\", y=\"World Championships\",markers=[\"*\"],palette=\"Set1\")","8b58b8b9":"fig2= px.treemap(data_frame=mt1, path=[\"Name\",\"victories\",\"2nd places\",\"3rd places\"],\n                values='victories',color='World Championships', hover_data=[\"race fastest lap to 2021\"],color_continuous_scale='RdBu',\n                color_continuous_midpoint=np.average(mt1[\"World Championships\"], weights=mt1['victories']))\nfig2.update_traces(root_color=\"cyan\")\nfig2.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig2.show()","0e4acf8d":"w_v_m=mt1.drop(columns=[\"2nd places\",\"3rd places\",\"race fastest lap to 2021\",\"Name\"])  \nw_v_m.loc[w_v_m['World Championships'] <= 0, 'Won Championship or not?'] = 'False' \nw_v_m.loc[w_v_m['World Championships'] > 0, 'Won Championship or not?'] = 'True' \n# Using 'Address' as the column name\n# and equating it to the list\nw_v_m","8a0a3246":"X=w_v_m.iloc[:,:2]\ny=w_v_m[\"Won Championship or not?\"]","08fe2973":"# splitting X and y into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n  \n# training the model on training set\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\n  \n# making predictions on the testing set\ny_pred = gnb.predict(X_test)\n  \n# comparing actual response values (y_test) with predicted response values (y_pred)\nfrom sklearn import metrics\nprint(\"Gaussian Naive Bayes model accuracy(in %):\", metrics.accuracy_score(y_test, y_pred)*100)","cac82f2e":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, fbeta_score\n\n# Accuracy\naccuracy_score(y_test, y_pred)","be152d46":"from sklearn.metrics import confusion_matrix\n \nexpected = y_test\npredicted = y_pred\nresults = confusion_matrix(expected, predicted)\nprint(results)","b969ed5b":"plt.figure(figsize=[8,8]);sns.heatmap(results,annot=True);plt.show()","ff563689":"y_pred = gnb.predict([[5,10]]) #example of one prediction example\ny_pred","d826ec59":"#### Using Naive Bayes algorithm for finding the championship won or not using no.of pole positions and victories.","130d6b61":"1.ROSSI Valentino has most no. of victories on 1st,2nd ,3rd positions.\n\n2.But ROSSI Valentino didn't won most no. championships.AGOSTINI Giacomo is the one that won most of the world championships.\n\n3.Top 5 players are :\n    a. ROSSI Valentino\tb.AGOSTINI Giacomo\tc.MARQUEZ Marc\td. DOOHAN Mick\te.LORENZO Jorge\n\n4.Approx 40% of championships were win by these top seeded players.\n\n5.More than 50% victories were clinched by top 10 players.\n\n6.winning the championship is much more difficult than getting a victories,2nd place or the 3rd place.\n\n7.as no.of pole positions increased chances of winning the world championships and getting victories also increased.\n\n8.Only 27 out of 115 players won all world championships.\n\n9.Race 's fastest lap comes early at the start of the race.\n\n10.World championships depend upon no.of pole positions and victories. \n\n11.Rossi valentino and Jorge Lorenzo are among the consistent players for top 5 players.","56a93af4":"# ABOUT MOTOGP","bb8d3ba9":"Grand Prix motorcycle racing is the premier class of motorcycle road racing events held on road circuits sanctioned by the F\u00e9d\u00e9ration Internationale de Motocyclisme (FIM). Independent motorcycle racing events have been held since the start of the twentieth century and large national events were often given the title Grand Prix.  The foundation of the F\u00e9d\u00e9ration Internationale de Motocyclisme as the international governing body for motorcycle sport in 1949 provided the opportunity to coordinate rules and regulations in order that selected events could count towards official World Championships. It is the oldest established motorsport world championship. \n\n\nGrand Prix motorcycles are purpose-built racing machines that are unavailable for purchase by the general public and unable to be ridden legally on public roads. This contrasts with the various production-based categories of racing, such as the Superbike World Championship and the Isle of Man TT Races that feature modified versions of road-going motorcycles available to the public. The current top division is known as MotoGP since 2002","3c533846":"# Conclusions:"}}