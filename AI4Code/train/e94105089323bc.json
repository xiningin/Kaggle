{"cell_type":{"b93b02c0":"code","8c8a46e4":"code","fe6dabc1":"code","3ebed977":"code","3d9eada0":"code","f3eb8776":"code","1508cf84":"code","57bff530":"code","03afa9bc":"code","80f7c26a":"code","b8cd7b2e":"code","5eebbd53":"code","addbece2":"code","b643e757":"code","0ddb6ac2":"code","375b991e":"code","d3108696":"code","733fa1bd":"code","1b7a16f1":"code","d0fbb584":"code","90385741":"code","c714a403":"code","056fc9c9":"code","291a4f0e":"code","ab5dbfc7":"code","0f7eef60":"code","29c817b3":"code","e16f95c8":"code","ef0f98f3":"code","3c5806f8":"code","d987d1a1":"code","77db8d32":"code","8daadd77":"code","854c4b3f":"code","395c5ef1":"code","ed43e11f":"code","7880394e":"code","a8e102af":"code","959e1f14":"code","2a2d8a72":"code","ef62ab7e":"code","9d7f309f":"code","059bdf14":"code","8de2bfa4":"code","5e49e945":"code","1ccca3b9":"code","0822dcc0":"code","8cbac67f":"code","9a20338e":"code","f12e644c":"code","61e10776":"code","dd07a60b":"code","d4611cd1":"code","7a14e323":"code","d3ffbaec":"code","af381d51":"code","ac46f112":"code","3f0ef531":"code","e6ebeb6b":"code","43159fba":"code","48bd0ea2":"code","e92b8e7f":"code","8bfb7945":"code","c850b183":"code","5cb0a67b":"code","2f27cf9f":"code","e239cdf6":"markdown","936b2380":"markdown","7dcfe858":"markdown","d2d21d41":"markdown","8859c2fa":"markdown"},"source":{"b93b02c0":"pip install pyspark","8c8a46e4":"import pandas as pd \nimport numpy as np\nimport pyspark","fe6dabc1":"from pyspark.sql import SparkSession","3ebed977":"spark = SparkSession.builder.appName(\"CarPrediction\").getOrCreate()","3d9eada0":"# Using read.csv to read the dataset\ndf = spark.read.csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\", inferSchema=True, header=True)","f3eb8776":"# Checks if there are any null values in the column\nfor col in df.columns:\n  print(col, \"\\t\", \"with null values: \", df.filter(df[col].isNull()).count())","1508cf84":"# Checks if there are any values with '?'\nfor col in df.columns:\n  print(col, \"\\t\", \"with ? values: \", df.filter(df[col]==\"?\").count())","57bff530":"df.printSchema() # outputs the schema types which are automatically determined by spark","03afa9bc":"df.show()","80f7c26a":"# Checking the columns of the dataframe \ndf.columns","b8cd7b2e":"# Checking the type of each column in the dataframe\ndf.describe()","5eebbd53":"# taking the cars whose price is less than 15000 and the transmission is Manual\ndf.filter((df[\"transmission\"] == \"Manual\") & (df[\"price\"]<15000)).show()","addbece2":"df.groupBy(\"model\")","b643e757":"df.groupBy(\"model\").count().show()","0ddb6ac2":"df.groupby(\"model\").mean()[[\"model\",\"avg(price)\"]].show()","375b991e":"df.groupBy(\"year\").mean()[[\"year\",\"avg(tax)\"]].show()","d3108696":"df.take(10)","733fa1bd":"# Performing data visualization\nimport matplotlib.pyplot as plt\n","1b7a16f1":"# Relationship between year and price\nx1 = df.toPandas()[\"year\"].values.tolist()\ny1 = df.toPandas()[\"price\"].values.tolist()\nplt.scatter(x1,y1)\n","d0fbb584":"# Relationship between model and price\nx2 = df.toPandas()[\"model\"].values.tolist()\ny2 = df.toPandas()[\"price\"].values.tolist()\nax = plt.subplot()\nax.barh(x2,y2)\nax.set_xlabel(\"Price\")\nax.set_ylabel(\"Model\")","90385741":"# Relationship between mileage and price\ny3 = df.toPandas()[\"mileage\"]\nplt.figure(figsize=(10,8))\nplt.bar(x2,y3)\nplt.xlabel(\"Model\")\nplt.ylabel(\"Mileage\")\nplt.title(label=\"Mileage Per Model\")","c714a403":"# Relationship between price and engine size\nx12 = df.toPandas()[\"mileage\"].values.tolist()\ny12 = df.toPandas()[\"price\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.scatter(x12,y12)\nplt.xlabel(\"Mileage of Car\")\nplt.ylabel(\"Price of Car\")\nplt.title(\"Relationship between price and mileage\")\n","056fc9c9":"# Relationship between model and average tax per model\nx4 = df.groupBy(\"model\").mean()[[\"model\",\"avg(tax)\"]].toPandas()[\"model\"].values.tolist()\ny4 = df.groupBy(\"model\").mean()[[\"model\",\"avg(tax)\"]].toPandas()[\"avg(tax)\"].values.tolist()\nplt.figure(figsize=(10,8))\nplt.bar(x4, y4)\nplt.xlabel(\"model\")\nplt.ylabel(\"Average Tax\")\nplt.title(\"Average Tax Per Model\")\n","291a4f0e":"# Classifying the cars based on transmission\nx5 = df.groupBy(\"transmission\").count().toPandas()[\"transmission\"].values.tolist()\ny5 = df.groupBy(\"transmission\").count().toPandas()[\"count\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.bar(x5, y5)\nplt.xlabel(\"Transmission Type\")\nplt.ylabel(\"Count\")\nplt.title(\"Types of Transmission\")\n","ab5dbfc7":"# Relationship between transmission and price\nx6 = df.groupBy(\"transmission\").count().toPandas()[\"transmission\"].values.tolist()\ny6 = df.groupBy(\"transmission\").mean().toPandas()[\"avg(price)\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.bar(x6, y6)\nplt.xlabel(\"Transmission Type\")\nplt.ylabel(\"Average Price\")\nplt.title(\"Average Price of each transmission\")\n","0f7eef60":"# Classification of cars based on their fuel type\nx7 = df.groupBy(\"fuelType\").count().toPandas()[\"fuelType\"].values.tolist()\ny7 = df.groupBy(\"fuelType\").count().toPandas()[\"count\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.bar(x7, y7)\nplt.xlabel(\"Fuel Type\")\nplt.ylabel(\"Number of Cars\")\nplt.title(\"Number of car available based on Fuel Type\")\n","29c817b3":"# Relationship between fuel type and price\nx8 = df.groupBy(\"fuelType\").count().toPandas()[\"fuelType\"].values.tolist()\ny8 = df.groupBy(\"fuelType\").mean().toPandas()[\"avg(price)\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.bar(x8, y8)\nplt.xlabel(\"Fuel Type\")\nplt.ylabel(\"Average Price of Cars\")\nplt.title(\"Average Price of car based on Fuel Type\")\n","e16f95c8":"# Relationship between price and engine size\nx9 = df.groupBy(\"engineSize\").mean().toPandas()[\"engineSize\"].values.tolist()\ny9 = df.groupBy(\"engineSize\").mean().toPandas()[\"avg(price)\"].values.tolist()\nplt.figure(figsize=(5,5))\nplt.bar(x9,y9,width=0.05)\nplt.xlabel(\"Engine Size\")\nplt.ylabel(\"Average Price\")\nplt.title(\"Average Price based on Size of Engine\")\n","ef0f98f3":"# Relationship between price and miles per gallon (mpg)\nx10 = df.groupBy(\"mpg\").mean().toPandas()[\"mpg\"].values.tolist()\ny10 = df.groupBy(\"mpg\").mean().toPandas()[\"avg(price)\"].values.tolist()\nplt.figure(figsize=(10,10))\nplt.bar(x10,y10,width=0.5)\nplt.xlabel(\"Mpg(Miles-Per-Gallon)\")\nplt.ylabel(\"Average Price\")\nplt.title(\"Average Price based on MPG(Miles-Per-Gallon)\")\n","3c5806f8":"# converting categorical data in model column using the one hot encoder \nfrom pyspark.ml.feature import (VectorAssembler, VectorIndexer,OneHotEncoder,StringIndexer)","d987d1a1":"# Performing one-hot-encoding on model column\nmodel_indexer = StringIndexer(inputCol='model', outputCol='modelIndex')\nmodel_encoder = OneHotEncoder(inputCol='modelIndex', outputCol='modelVector')","77db8d32":"# Performing one-hot-encoding on transmission column\ntransmission_indexer = StringIndexer(inputCol='transmission', outputCol='transmissionIndex')\ntransmission_encoder = OneHotEncoder(inputCol='transmissionIndex', outputCol='transmissionVec')","8daadd77":"# Performing one-hot-encoding on fuel column\nfuel_type_indexer = StringIndexer(inputCol='fuelType', outputCol='fuelTypeIndex')\nfuel_type_encoder = OneHotEncoder(inputCol='fuelTypeIndex', outputCol='fuelTypeVector')","854c4b3f":"# Performing VectorAssembling on all columns except our target column\nassembler = VectorAssembler(inputCols=['modelVector', 'year', 'transmissionVec'\n            ,'mileage','fuelTypeVector','tax','mpg','engineSize'],outputCol='features')","395c5ef1":"from pyspark.ml.regression import LinearRegression","ed43e11f":"linear_reg = LinearRegression(featuresCol='features',labelCol='price', maxIter=10)","7880394e":"from pyspark.ml.regression import LinearRegressionModel\nlinear_reg_model = LinearRegressionModel()","a8e102af":"# Splitting the dataset into train and test \ntrainData, testData = df.randomSplit([0.7,.03])","959e1f14":"# Creating the pipeline for the model with linear regression algorithm\nfrom pyspark.ml import Pipeline\npipeline = Pipeline(stages=[model_indexer,transmission_indexer,fuel_type_indexer,\n                            model_encoder,transmission_encoder,fuel_type_encoder,\n                            assembler,linear_reg])\n","2a2d8a72":"linear_fit = pipeline.fit(trainData)","ef62ab7e":"results = linear_fit.transform(testData)\n# linear_fit.predict(testData)","9d7f309f":"results.head(5)","059bdf14":"# Checking out a binaryclassification evalutor\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\nmy_eval = BinaryClassificationEvaluator(rawPredictionCol='prediction',\n                                       labelCol='price')","8de2bfa4":"results.select('price','prediction').show()","5e49e945":"# Plotting the predicted value by linear regression against the original value\ngraph_res = results.select('price', 'prediction').toPandas()\nx13 = graph_res[\"price\"]\nx14 = graph_res[\"prediction\"]\nplt.figure(figsize=(10,10))\nplt.scatter(np.arange(0,len(x13),1),x13,label='Original Price')\nplt.scatter(np.arange(0,len(x14),1),x14, label=\"Predicted Price\")\nplt.legend(loc=\"upper left\")","1ccca3b9":"my_eval.evaluate(results)","0822dcc0":"# Analyzing the performance of linear regression using RegressionEvaluator\nfrom pyspark.ml.evaluation import RegressionEvaluator\nmy_ref_eval = RegressionEvaluator(predictionCol='prediction',labelCol='price')","8cbac67f":"my_ref_eval.evaluate(results)","9a20338e":"# R2 score\nmy_ref_eval.evaluate(results, {my_ref_eval.metricName:\"r2\"})","f12e644c":"# RMSE score\nmy_ref_eval.evaluate(results, {my_ref_eval.metricName:\"rmse\"})","61e10776":"# MSE value\nmy_ref_eval.evaluate(results, {my_ref_eval.metricName:\"mse\"})","dd07a60b":"from pyspark.ml.regression import RandomForestRegressor","d4611cd1":"randomforest = RandomForestRegressor(featuresCol='features',labelCol='price')","7a14e323":"# Creating a new pipeline with random Forest Regressor \nfrom pyspark.ml import Pipeline\npipeline1 = Pipeline(stages=[model_indexer,transmission_indexer,fuel_type_indexer,\n                            model_encoder,transmission_encoder,fuel_type_encoder,\n                            assembler,randomforest])\n# df.na.drop()","d3ffbaec":"# Executing the random forest regression algorithm\nrandomforestresult = pipeline1.fit(trainData)\nrandomFResult = randomforestresult.transform(testData)","af381d51":"print(randomFResult.head(5))","ac46f112":"# Plotting the predicted price value by random forest regressor against the original price\ngraph_random = randomFResult.select('price', 'prediction').toPandas()\nx15 = graph_random[\"price\"]\nx16 = graph_random[\"prediction\"]\nplt.figure(figsize=(10,10))\nplt.scatter(np.arange(0,len(x15),1),x15,marker='x',label='Original Price')\nplt.xlabel(\"Index\/Each entry in the dataset\")\nplt.ylabel(\"Price\")\nplt.scatter(np.arange(0,len(x16),1),x16,marker='s', label=\"Predicted Price\")\nplt.legend(loc=\"upper left\")","3f0ef531":"# Evaluating the performance of the random forest regressor using RegressionEvaluator \nfrom pyspark.ml.evaluation import RegressionEvaluator\nmy_ref_eval1 = RegressionEvaluator(predictionCol='prediction',labelCol='price')","e6ebeb6b":"my_ref_eval1.evaluate(randomFResult)","43159fba":"# R2 Score\nmy_ref_eval.evaluate(randomFResult, {my_ref_eval.metricName:\"r2\"})","48bd0ea2":"# RMSE value\nmy_ref_eval.evaluate(randomFResult, {my_ref_eval.metricName:\"rmse\"})","e92b8e7f":"# MSE value\nmy_ref_eval.evaluate(randomFResult, {my_ref_eval.metricName:\"mse\"})","8bfb7945":"from pyspark.ml import Pipeline\nfrom pyspark.ml.regression import GBTRegressor\nfrom pyspark.ml.feature import VectorIndexer\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\n\n# Train a GBT model.\ngbt = GBTRegressor(featuresCol=\"features\",labelCol=\"price\", maxIter=10)\n\n# Chain indexer and GBT in a Pipeline\npipeline_gbt = Pipeline(stages=[model_indexer,transmission_indexer,fuel_type_indexer,\n                            model_encoder,transmission_encoder,fuel_type_encoder,\n                            assembler, gbt])\n\n# Train model.  This also runs the indexer.\nmodel = pipeline.fit(trainData)\n\n# Make predictions.\npredictions = model.transform(testData)\n\n# Select example rows to display.\npredictions.select(\"prediction\", \"price\", \"features\").show(5)\n","c850b183":"# Plotting the predicted price value by GBT against the original price\ngraph_gbt = predictions.select(\"prediction\", \"price\").toPandas()\nx17 = graph_gbt[\"price\"]\nx18 = graph_gbt[\"prediction\"]\nplt.figure(figsize=(10,10))\nplt.scatter(np.arange(0,len(x17),1),x17,marker='x',label='Original Price')\nplt.xlabel(\"Index\/Each entry in the dataset\")\nplt.ylabel(\"Price\")\nplt.scatter(np.arange(0,len(x18),1),x18,marker='s', label=\"Predicted Price\")\nplt.legend(loc=\"upper left\")","5cb0a67b":"\n# Select (prediction, true label) and compute test error\nevaluator = RegressionEvaluator(\n    labelCol=\"price\", predictionCol=\"prediction\", metricName=\"rmse\")\nrmse = evaluator.evaluate(predictions)\nprint(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)\n","2f27cf9f":"evaluatorR2 = RegressionEvaluator(\n    labelCol=\"price\", predictionCol=\"prediction\", metricName=\"r2\")\nr2 = evaluatorR2.evaluate(predictions)\nprint(\"R2 Score on test data= %g\" % r2)\ngbtModel = model.stages[1]\nprint(gbtModel)  # summary only\n","e239cdf6":"**RandomForest Regression Algorithm**","936b2380":"**Feature Engineering(DataTransformation)**\n* Performing oneHotEncoder","7dcfe858":"**Building Regression Model**\n* Using multiple regression algorithms","d2d21d41":"**Gradient Boosting Regression**","8859c2fa":"**Performing Data Visualization**\n* Here we perform data visualization using matplotlib plotting functions"}}