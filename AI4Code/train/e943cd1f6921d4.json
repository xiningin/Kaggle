{"cell_type":{"b6641024":"code","892d0b12":"code","8cc79168":"code","61b3d7f2":"code","62fb88cf":"code","c7a42fc3":"code","1f50cb01":"code","aaf180f8":"code","7b5bc6fd":"code","a5b8490c":"code","382a7d56":"code","bdb8c18c":"code","8c3b7597":"code","5447ca22":"code","48836807":"code","d83d9e7b":"code","85deb3c3":"code","090d765e":"code","8b28eb76":"code","8e7e21f7":"code","dec8bb55":"markdown","08724d44":"markdown","d2835e20":"markdown","12ec5f05":"markdown","395b25c6":"markdown","3b1db852":"markdown","09495722":"markdown","43dd9137":"markdown","e25279e3":"markdown","52cd4ee9":"markdown","b80d5186":"markdown","ccf44325":"markdown","e0942187":"markdown","1e85c60e":"markdown"},"source":{"b6641024":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","892d0b12":"dfs = {file.split('.')[0] : pd.read_csv(\"..\/input\/\"+file) for file in os.listdir(\"..\/input\")}\nfor name, df in dfs.items():\n    print(name)\n    print(df.head(1))\n    print(df.info())","8cc79168":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nimport logging\nlogging.getLogger('sklearn').setLevel(logging.ERROR) # Ex: module_name = seaborn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom dask.distributed import Client\nclient = Client(n_workers=4, threads_per_worker=1)\nclient\n","61b3d7f2":"categorial_column_types = ['object','datetime']\nintervals = df.select_dtypes(exclude=categorial_column_types).columns.values.tolist()\ncategorials = df.select_dtypes(include=categorial_column_types).columns.values.tolist()\nintervals, categorials","62fb88cf":"le = preprocessing.LabelEncoder()","c7a42fc3":"df = dfs['train']\ntest = dfs['test']\n# df, test = df.dropna(), test.dropna()\ndf, test = df.interpolate(method='linear'), test.interpolate(method='linear')","1f50cb01":"features = ['Pclass', 'Age']\ntarget = ['Survived']\nx_train, x_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.33, random_state=42)\n","aaf180f8":"from sklearn import svm\n\nmodel1 = svm.OneClassSVM()","7b5bc6fd":"from tpot import TPOTClassifier\n\nmodel2 = TPOTClassifier(\n    generations=1,\n    population_size=10,\n    cv=2,\n    n_jobs=-1,\n    random_state=0,\n    verbosity=0,\n    use_dask=True\n)","a5b8490c":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel3 = AdaBoostClassifier(DecisionTreeClassifier(max_depth=4),\n                          n_estimators=300, random_state=7)","382a7d56":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\n\nclf1 = DecisionTreeClassifier(max_depth=4)\nclf2 = KNeighborsClassifier(n_neighbors=7)\nclf3 = SVC(gamma=.1, kernel='rbf', probability=True)\nmodel4 = VotingClassifier(estimators=[('dt', clf1), ('knn', clf2),\n                                    ('svc', clf3)],\n                        voting='soft', weights=[2, 1, 2])","bdb8c18c":"from sklearn.neural_network import MLPClassifier\n\nmodel5 = MLPClassifier(hidden_layer_sizes=(50,), max_iter=20, alpha=1e-4,\n                    solver='sgd', verbose=10, tol=1e-4, random_state=1,\n                    learning_rate_init=.1)","8c3b7597":"model = model5","5447ca22":"model.fit(x_train, y_train)","48836807":"y_true = model.predict(x_test)","d83d9e7b":"def transform_classes(raw_classes : 'np.array') -> 'np.array':\n    transform_classes = {-1:0}\n    func = np.vectorize(lambda x: transform_classes.get(x, x))\n    return func(raw_classes)","85deb3c3":"str(accuracy_score(y_true, transform_classes(y_test)) * 100.0) + '%'","090d765e":"predictions = model.predict(test[features])\npredictions","8b28eb76":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived': transform_classes(predictions)})\nsubmission.head()","8e7e21f7":"filename = 'Titanic Predictions 5.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","dec8bb55":"## Lure the target","08724d44":"### MLP Neural Network","d2835e20":"## Prepare weapons","12ec5f05":"### TPOT","395b25c6":"## Results","3b1db852":"### VotingClassifier","09495722":"## Fire!!","43dd9137":"### Common","e25279e3":"### Scale output to expected classes [0,1] from actual classes [-1,1]","52cd4ee9":"### SCIKIT-learn","b80d5186":"### Decision Tree Classifier with AdaBoost","ccf44325":"## Submission","e0942187":"## Load them","1e85c60e":"### Categorical columns"}}