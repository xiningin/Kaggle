{"cell_type":{"7c764097":"code","d132819a":"code","25b60903":"code","fa90fbb0":"code","d84aaa88":"code","948f2983":"code","a5812629":"code","82d41f56":"code","67832f6a":"code","ceb8cc3f":"code","e1030804":"code","ea8f7cf4":"code","ecb30b90":"code","428599bf":"code","2d09d9b1":"markdown","3d688ea2":"markdown","40e34941":"markdown"},"source":{"7c764097":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# settings\nplt.style.use('seaborn')\nplt.rcParams[\"figure.figsize\"] = (16, 8)\npd.set_option('display.max_columns', 64)\npd.set_option('display.max_rows', 64)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d132819a":"df = pd.read_csv('\/kaggle\/input\/commerceiq\/ecom-elasticity-data1.tsv', delimiter=\"\\t\", header=None)\ndf.columns = ['asin', 'category', 'date', 'price', 'unit_sold']\n# df.index = df['date']\n# df = df.drop(columns = ['date'], axis =1)\ndf.shape, df.drop_duplicates().shape, df.isna().sum()","25b60903":"df.head()","fa90fbb0":"df['category'].value_counts()","d84aaa88":"crl = df[df['category']=='Cereals']\nhp = df[df['category']=='Headphones']\ndp = df[df['category']=='Diapers']","948f2983":"hp = hp.groupby(\"date\").sum()\ndp = dp.groupby(\"date\").sum()\ncrl = crl.groupby(\"date\").sum()","a5812629":"dp['price'].plot(kind = 'line')\ncrl['price'].plot(kind = 'line')\nhp['price'].plot(kind = 'line')\nplt.show()","82d41f56":"# checking if the data is stationary \nfrom statsmodels.tsa.stattools import adfuller\n\ndef AD_fuller_test(data):\n    result = adfuller(data)\n    print('Test Statistic : ',result[0])\n    print('P-value : ',np.round(result[1],decimals=15))\n    return result[0], np.round(result[1],decimals=15)\n\nAD_fuller_test(hp['unit_sold']), AD_fuller_test(dp['unit_sold']), AD_fuller_test(crl['unit_sold'])","67832f6a":"dp['unit_sold'].plot(kind = 'line', label = 'dp')\ncrl['unit_sold'].plot(kind = 'line', label = 'crl')\nhp['unit_sold'].plot(kind = 'line', label = 'hp')","ceb8cc3f":"from fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nddf = crl[['unit_sold']].reset_index()\nc = ['2017-07-17',\n '2017-07-18',\n '2017-12-02',\n '2017-12-03',\n '2018-07-16',\n '2018-07-17',\n '2018-12-01',\n '2018-12-02',\n '2019-01-05',\n '2019-01-06',\n '2019-07-15',\n '2019-07-16']\n# prepare expected column names\nddf.columns = ['ds', 'y']\nddf['ds']= pd.to_datetime(ddf['ds'])\n\n# define the model\nmodel = Prophet(\n            daily_seasonality=True,\n            weekly_seasonality=True,\n            holidays_prior_scale = 20,\n            interval_width=0.95,changepoint_prior_scale = 0.1\n                )\nmodel.add_country_holidays(country_name='US')\nmodel.add_seasonality(fourier_order=105, name = \"yearly\", period = 365.25)\n# fit the model\nn = int(len(ddf)*0.75)\nmodel.fit(ddf[:n])\n# define the period for which we want a prediction\nfuture = ddf[n:]\n# use the model to make a forecast\nforecast = model.predict(future)\n# summarize the forecast\n#print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())\n# plot forecast\n#model.plot(forecast)\n#plt.show()\n\ny_true = ddf['y'][n:].values\ny_pred = forecast['yhat'].values\nmae = mean_absolute_error(y_true, y_pred)\nprint('MAE: %.3f' % mae)\n# plot expected vs actual\nplt.plot(y_true, label='Actual')\nplt.plot(y_pred, label='Predicted')\nplt.legend()\nplt.show()","e1030804":"ddf = dp[['unit_sold']].reset_index()\nddf[ddf['unit_sold']>3300]","ea8f7cf4":"ddf = hp[['unit_sold']].reset_index()\nddf[ddf['unit_sold']>5400]","ecb30b90":"ddf = crl[['unit_sold']].reset_index()\nddf[ddf['unit_sold']>8500]","428599bf":"ddf[ddf['unit_sold']>8500]['date'].tolist()","2d09d9b1":"Case Study: \n\nConglomerate Inc operates multiple brands under its umbrella that ranges from servicing Baby, Food & Beverages and Electronics items. They are looking to run promotional campaigns on Amazon and want to understand the effect of price elasticity for their categories. They have decided to run a pilot with CommerceIQ for three categories, diapers, breakfast cereals and headphones to understand their promotional strategy better.\n\n\nYou have been given the data across three different categories (Diapers, Headphones and Breakfast Cereals) from 2017 to 2019. The data set contains information about daily price and sales on Amazon at Item level (ASIN, Category, Date, Price, Units Sold). \nASIn -> ASIN stands for Amazon Standard Identification Number. It's a unique identifier of 10 letters and\/or numbers for a product that's assigned by Amazon.com.\n\nConglomerate Inc is looking to understand the following things as an outcome of this pilot.\n\n\nQuantify the impact of price on product demand for different products and product categories. Also, Identify and quantify the factors other than price that have an impact on product demand?\n\nSuggest a promotional strategy for each of three categories across the year (including the holiday season like ThanksGiving Weekend, Christmas, New Years, and Prime Day in July) to Conglomerate Inc based on the price elasticity.\n\nInterpret the data and present a consumer behaviour reasoning behind the patterns that you are seeing.","3d688ea2":"hanksGiving Weekend - 25 nov, Christmas - 25 dec , New Years - 1 jan, and Prime Day in July - July 11th, july 16th, july 15\n","40e34941":"price is constant through out in all the product. hence we need to analyze the sales data tp formulate our strategy  for our products"}}