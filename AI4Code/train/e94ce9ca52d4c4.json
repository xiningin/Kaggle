{"cell_type":{"14a8c5e8":"code","d04567c4":"code","6a8cea25":"code","10195ae0":"code","5e5f844c":"code","e9f5878b":"code","7e049d80":"code","1b6c845e":"code","c8c9372a":"code","d39af4f2":"code","9ade1610":"code","32df218b":"code","e09da8fa":"code","1a940bdd":"code","fefc751e":"code","19be4bde":"code","50305247":"code","1719aa2d":"code","b8957cc7":"code","1bac4ff1":"code","07b7ddcc":"code","b136b557":"code","ce7b9e85":"code","828641dd":"code","6f4bcf64":"code","a7dfe2db":"code","cfc8da19":"code","eebd1d26":"code","b429a379":"code","b81bfbf0":"code","c18807a8":"code","c0b304cc":"code","fe6ad937":"code","7446a555":"code","71bfa4a7":"markdown","0ae02856":"markdown","82c0a6f4":"markdown","a32dd6d7":"markdown","c89db353":"markdown","cce1ece4":"markdown","e3dd17d8":"markdown","7f66e4b1":"markdown","8636560c":"markdown","a87fd033":"markdown","f65f534b":"markdown","c3c84eb4":"markdown","16f81d0e":"markdown","1b86ef68":"markdown"},"source":{"14a8c5e8":"\"\"\"Pandas is a Python package designed to do work with \u201clabeled\u201d and \u201crelational\u201d data simple and intuitive.\n   Pandas is a perfect tool for data wrangling.\n   It designed for quick and easy data manipulation, aggregation, and visualization.\n\"\"\"\nimport pandas as pd\n\"\"\"The most fundamental package, around which the scientific computation stack is built, is NumPy \n   (stands for Numerical Python).\n   It provides an abundance of useful features for operations on n-arrays and matrices in Python.\n\"\"\"\nimport numpy as np\n\"\"\"\nPython Library that is tailored for the generation of simple and powerful visualizations with ease is Matplotlib.\n\"\"\"\nimport matplotlib.pyplot as plt\n\"\"\"\nSeaborn is mostly focused on the visualization of statistical models;\nsuch visualizations include heat maps,\nthose that summarize the data but still depict the overall distributions.\n\"\"\"\nimport seaborn as sns\n%matplotlib inline","d04567c4":"data = pd.read_csv(\"..\/input\/googleplaystore.csv\")#for loding .csv data we use read_csv\ndata.dropna(inplace=True)#removes all the rows with atleast one null value,inplace is like conformation\n","6a8cea25":"\"\"\"\ndata of Reviews has string M in it i stands for million\nwe have to remove the string \"M\" and \",\" from values and \nmiltiply with 1000000 if the values has 'M' in it\nfinaly convert to int\n\nthis method can clean the Reviewa column \n\"\"\"\ndef filter(per):\n    if \"M\" in str(per) and \",\" in str(per):\n        per = str(per).replace(\"M\",\"\")\n        per = per.replace(\",\",\"\")\n        return int(per)*1000000\n    elif \"M\" in str(per):\n        per = int(str(per).replace(\"M\",\"\"))\n        return per*1000000\n    elif \",\" in str(per):\n        per = str(per).replace(\",\",\"\")\n        return int(per)\n    \n    else:  \n        return int(per)","10195ae0":"data[\"Reviews\"] =data[\"Reviews\"].apply(filter) # all the values of column 'Reviews' are passed to filter method","5e5f844c":"\"\"\"\nthis methd is used to clean \"size\" column\nsize column contains the strings like \n'M' stands for megabyte\n\"Varies with device\"\n\"k\" stands for kilobyte\nwe convert every app size to megabytes and return as float type\n\"\"\"\ndef filter1(per):\n    per = str(per)\n    if \"M\" in per:\n        per = per.replace(\"M\",\"\")\n        return float(per)\n    elif per == \"Varies with device\":\n        return np.NaN\n    elif \"k\" in per:\n        return float(per.replace(\"k\",\"\"))\/1000\n    else:\n        return float(per)\n","e9f5878b":"data[\"Size\"]=data[\"Size\"].apply(filter1) #used to apply filter1 function ","7e049d80":"\"\"\"\nthid function is used to clean instals column\nit remones i]the string \"+\" and \",\"\nand returns as intiger\n\"\"\"\ndef filter2(per):\n    per = str(per)\n    if \"+\" in per:\n        per = per.replace(\"+\",\"\")\n    if \",\" in per:\n        per = per.replace(\",\",\"\")\n        \n    return int(per)","1b6c845e":"data[\"Installs\"]=data[\"Installs\"].apply(filter2)# used to apply filter2 function\"","c8c9372a":"\"\"\"\nused to remove the string \"$\"\nand convert thr price to rupies as floats\n\"\"\"\ndef filter3(per):\n    per = str(per)\n    if \"$\" in per:\n        per=per.split(\"$\")[1]\n    return (float(per)*69.44)","d39af4f2":"data[\"Price\"]=data[\"Price\"].apply(filter3)# used to apply filter 3 function","9ade1610":"import plotly\nprint(plotly.__version__)\n%matplotlib inline\n\n\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n","32df218b":"sns.pairplot(pd.DataFrame(list(zip(data[\"Rating\"],data[\"Size\"], np.log(data[\"Installs\"]), np.log10(data[\"Reviews\"]),data[\"Type\"], data[\"Price\"])), \n                        columns=['Rating','Size', 'Installs', 'Reviews', 'Type', 'Price']), hue='Type')","e09da8fa":"sns.heatmap(data.corr(),cmap='coolwarm')","1a940bdd":"number_of_apps_in_category = data['Category'].value_counts().sort_values(ascending=True)\n\ndf = [go.Pie(labels = number_of_apps_in_category.index,values = number_of_apps_in_category.values,hoverinfo = 'label+value')]\n\nplotly.offline.iplot(df, filename='active_category')\n","fefc751e":"df = [go.Histogram(\n        x = data.Rating,\n        xbins = {'start': 1, 'size': 0.1, 'end' :5}\n)]\n\nprint('Average app rating = ', np.mean(data['Rating']))\nplotly.offline.iplot(df, filename='overall_rating_distribution')","19be4bde":"#print('Junk apps priced above 350$')\ndata[['Category', 'App',\"Price\"]][data.Price > 200*64]","50305247":"temp=pd.DataFrame(data[\"Content Rating\"].value_counts()).reset_index()\n\ntemp.columns=['user', 'Content Rating']","1719aa2d":"plt.figure(figsize=(12,6))\nsns.barplot(data=temp,x=\"user\",y=\"Content Rating\")","b8957cc7":"#most reviewed app rating\nplt.figure(figsize=(12,6))\nsns.distplot(data[\"Rating\"],bins=10,color=\"red\")","1bac4ff1":"sns.kdeplot(data=data[\"Size\"])\nplt.title(\"size vs count\")\nplt.xlabel(\"\")","07b7ddcc":"plt.figure(figsize=(12,6))\n\nsns.scatterplot(x = data.groupby('Category')['Rating'].mean().index, y = data.groupby('Category')['Rating'].mean().values)\nplt.xlabel('Category', fontsize=13)\nplt.ylabel('Rating', fontsize=13)\nplt.xticks(rotation=90)\nplt.title(\"avg rating table based on category\")","b136b557":"most_popular_apps = data[(data[\"Reviews\"]>10000000) ][ (data[\"Rating\"]>=4.5)]\nsns.countplot(most_popular_apps[\"Category\"])\nplt.xticks(rotation=90)","ce7b9e85":"sns.set_context('talk',font_scale=1)\nplt.figure(figsize=(17,13))\nsns.countplot(data=data,y=\"Category\",hue=\"Type\")\n","828641dd":"plt.figure(figsize=(16,12))\nsns.boxplot(data=data,x=\"Size\",y=\"Category\",palette='rainbow')","6f4bcf64":"sns.countplot(x=data[\"Type\"])","a7dfe2db":"plt.figure(figsize=(17,13))\nsns.countplot(data=data[data[\"Reviews\"]>1000000],y=\"Category\",hue=\"Type\")\nplt.title(\"most popular apps with 1000000+ reviews\")\nplt.xlabel(\"no of apps\")","cfc8da19":"#most reviewed app rating\nplt.figure(figsize=(12,6))\nsns.distplot(data[data[\"Reviews\"]>10000][\"Rating\"],bins=10,color=\"red\")","eebd1d26":"sns.pairplot(pd.DataFrame(list(zip(most_popular_apps[\"Rating\"],most_popular_apps[\"Size\"], np.log(most_popular_apps[\"Installs\"]), np.log10(most_popular_apps[\"Reviews\"]),most_popular_apps[\"Type\"], most_popular_apps[\"Price\"])), \n                        columns=['Rating','Size', 'Installs', 'Reviews', 'Type', 'Price']), hue='Type')\n","b429a379":"plt.figure(figsize=(16,6))\nsns.scatterplot(data=data[data[\"Reviews\"]>100000],x=\"Size\",y=\"Rating\",hue=\"Type\")\nplt.title(\"apps with reviews graterthan 100000\")","b81bfbf0":"x=np.log(data[\"Installs\"])\ny=np.log(data[\"Reviews\"])","c18807a8":"popular_apps = data[(data[\"Installs\"]>10000000) & (data[\"Rating\"]>=4.7)]\n#the most popular paid apps with decent reviews and ratings\npd.DataFrame(popular_apps[popular_apps[\"Type\"]==\"Free\"][[\"App\"]])","c0b304cc":"popular_apps = data[(data[\"Installs\"]>100000) & (data[\"Rating\"]>4.5)]\n#the most popular paid apps with decent reviews and ratings\npd.DataFrame(popular_apps[popular_apps[\"Type\"]==\"Paid\"][[\"App\",\"Price\"]])","fe6ad937":"mldata = data[[\"Reviews\",\"Size\",\"Installs\",\"Price\",\"Rating\"]]\nmldata.dropna(inplace=True)\n\nX=mldata.iloc[:,0:-1].values\ny = mldata.iloc[:,-1].values\n\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,y)\n\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators=300)","7446a555":"rfr.fit(xtrain,ytrain)\nypre = rfr.predict(xtest)\n\ndf=pd.DataFrame()\n\ndf[\"ytest\"]=pd.Series(ytest)\n\ndf[\"ypre\"] =pd.Series(ypre)\ndf.sample(10)","71bfa4a7":"# Data Science Project \n","0ae02856":"\n### importing data","82c0a6f4":"most popular paid apps","a32dd6d7":"most popular free apps","c89db353":"### importing modules","cce1ece4":"### cleaning Reviews column","e3dd17d8":"# Most popular apps analysis","7f66e4b1":"# cleaning data","8636560c":"# cleaning price column","a87fd033":"# MACHINE LEARNING TO PRIDICT RATING\nRandom Forest REgrassion","f65f534b":"# data visuvalizations","c3c84eb4":"# cleaning Size column","16f81d0e":"# cleaning installs column","1b86ef68":"# Analysis Of Play Store Data"}}