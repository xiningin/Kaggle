{"cell_type":{"70e4d05e":"code","720b012d":"code","4b83b350":"code","4ffeb2ab":"code","31bb1955":"code","8402d48f":"code","8b43d7f3":"code","68e8d7f5":"code","714759aa":"code","f1b838ae":"code","7cf950cf":"code","c151ec11":"code","e6b812f4":"code","ca812197":"code","92c12c76":"code","bb15cb54":"code","f8737af3":"markdown","4477c2d4":"markdown","3d240882":"markdown","ffad4392":"markdown","c24bf6ee":"markdown","4a936b11":"markdown"},"source":{"70e4d05e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","720b012d":"import pandas as pd                # pandas is a data frame library\nimport keras\nfrom keras.models import Sequential\nimport matplotlib.pyplot as plt    # matplot.pyplot plots data\nfrom keras.layers import LSTM, Dense, Dropout, Masking, Flatten\nimport numpy","4b83b350":"df = pd.read_csv(\"\/kaggle\/input\/cardiovascular-disease-dataset\/cardio_train.csv\", sep=';')","4ffeb2ab":"df.shape","31bb1955":"df.head()","8402d48f":"del df['id']\ndf.head()","8b43d7f3":"df['age'] = df['age'].map(lambda x : x \/\/ 365)\ndf.head(5)","68e8d7f5":"df.isnull().values.any()","714759aa":"df.hist(figsize=(10,12))\nplt.show()","f1b838ae":"# Visualizing the data\ndataset_plot = df\ndataset_plot[['active','age','alco','ap_hi','ap_lo','cholesterol','gender','gluc','height','smoke','weight']].head(100).plot(style=['o','x','r--','g^'])\nplt.legend(bbox_to_anchor=(0.,1.02,1., .102), loc=3,ncol=2, mode=\"expand\", fontsize=\"x-large\", borderaxespad=0.)\nplt.show()","7cf950cf":"df.shape","c151ec11":"# numpyMatrix=numpy.array(df.values, dtype = numpy.float64)\n# X_input = numpyMatrix[:,0:11]\n# X=X_input\n# Y = numpyMatrix[:,8]\n# As Cardio is the output that we want to predict, we will seperate it out \nX = df.drop(['cardio'], axis=1)\nY = df['cardio']\n\n# create model\nmodel = Sequential()\n\nmodel.add(Dense(32, input_dim=11, activation='relu'))\n# model.add(Dense(32, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\ntbCallBack = keras.callbacks.TensorBoard(log_dir='.\/diabetes\/logs', histogram_freq=0, write_graph=True, write_images=True)\n\nmodel.summary()\n","e6b812f4":"# Fit the model\nhistory = model.fit(X, Y,validation_split=0.20, epochs=10, batch_size=16,callbacks=[tbCallBack])\n\n# evaluate the model\nscores = model.evaluate(X, Y)\n\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","ca812197":"model.predict(X)","92c12c76":"# Comparing Validation and training results\nprint(history.history.keys())\n# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","bb15cb54":"myX_false = [[47,1,156,56.0,100,60,1,1,0,0,0]]\nmyX_true = [[48,2,169,82.0,150,100,1,1,0,0,1]]\nmatrixX=numpy.array(myX_false, dtype = numpy.float64)\nX_input = matrixX[:,0:11]\nmodel.predict(X_input)","f8737af3":"**Check for NULL values**","4477c2d4":"**Load the data**","3d240882":"**Check the distribution**","ffad4392":"**Visuzlizing the data values range**","c24bf6ee":"* **Change the age from days to years**","4a936b11":"**Delete the ID column, since it doesn't matter for the prediction**"}}