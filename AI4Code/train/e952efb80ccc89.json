{"cell_type":{"61ede94f":"code","dedaa139":"code","b66505f2":"code","09b237be":"code","8f7749f2":"code","3e0c6db5":"code","d4ebc695":"code","ab956c12":"code","978f6dd8":"code","69ac9690":"code","e233d7bf":"code","81e85d42":"code","d5c60867":"code","59e6c2ca":"code","200dbd61":"code","56fb7b38":"code","a21ed8cd":"code","7448e5bc":"code","5f9c0ebe":"code","14b82a0b":"code","03257f4c":"code","b0f0d9a3":"code","48f06b04":"markdown","e6c38361":"markdown","75bfa4bf":"markdown","c406d705":"markdown","b0d2314b":"markdown","0c619a62":"markdown","60b01779":"markdown","57cb3190":"markdown","a9d826ed":"markdown"},"source":{"61ede94f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dedaa139":"\nimport tensorflow as tf\nimport datetime\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import regularizers\nimport matplotlib.pyplot as plt\n","b66505f2":"### defining some function to make our work easier\nimport matplotlib.pyplot as plt\n\n# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.\ndef plot_images(images_arr, imageWidth, imageHeight):\n    fig, axes = plt.subplots(1, 5, figsize=(20, 20))\n    axes = axes.flatten()\n    for img, ax in zip(images_arr, axes):\n        ax.imshow(img.reshape(imageWidth, imageHeight), cmap=\"gray\")\n        ax.axis(\"off\")\n    plt.tight_layout()\n    plt.show()\n","09b237be":"batch_size = 32\nepochs = 100\nIMG_HEIGHT = 28\nIMG_WIDTH = 28","8f7749f2":"augmented_image_gen = ImageDataGenerator(\n    rotation_range=2,\n    width_shift_range=.1,\n    height_shift_range=.1,\n    zoom_range=0.1,\n    shear_range=2,\n    brightness_range=[0.9, 1.1],\n    validation_split=0.2,\n    samplewise_center=True,\n    samplewise_std_normalization=True)\n\nnormal_image_gen = ImageDataGenerator(\n    validation_split=0.2,\n    samplewise_center=True,\n    samplewise_std_normalization=True\n)","3e0c6db5":"train_data_gen = augmented_image_gen.flow_from_directory(batch_size=batch_size,\n                                                     directory=\"..\/input\/standard-fonts-digit-dataset-09\/data\/training_data\",\n                                                     color_mode=\"grayscale\",\n                                                     shuffle=True,\n                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                     class_mode=\"categorical\",\n                                                     seed=65657867,\n                                                     subset='training')\nval_data_gen = normal_image_gen.flow_from_directory(batch_size=batch_size,\n                                                     directory=\"..\/input\/standard-fonts-digit-dataset-09\/data\/training_data\",\n                                                     color_mode=\"grayscale\",\n                                                     shuffle=True,\n                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                     class_mode=\"categorical\",\n                                                     seed=65657867,\n                                                     subset='validation')\n","d4ebc695":"sample_training_images, _ = next(train_data_gen)\nplot_images(sample_training_images[:5], IMG_WIDTH, IMG_HEIGHT)","ab956c12":"model = Sequential([\n    Conv2D(16, 3, \n           padding='same',\n           activation='relu',\n           kernel_regularizer=regularizers.l2(0.0001),\n           input_shape=(IMG_HEIGHT, IMG_WIDTH , 1)),\n    MaxPooling2D(),\n    Dropout(0.2),\n    Flatten(),\n    Dense(\n        50,\n        activation='relu',\n        kernel_regularizer=regularizers.l2(0.0001)\n    ),\n    Dropout(0.2),\n    Dense(10, activation='softmax')\n])\n","978f6dd8":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])\n\nhistory = model.fit_generator(\n    train_data_gen,\n    steps_per_epoch=train_data_gen.samples \/\/ batch_size,\n    epochs=50,\n    validation_data=val_data_gen,\n    validation_steps=val_data_gen.samples \/\/ batch_size)","69ac9690":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(50)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","e233d7bf":"normal_image_gen = ImageDataGenerator(\n    samplewise_center=True,\n    samplewise_std_normalization=True\n)\ntest_data_gen = normal_image_gen.flow_from_directory(batch_size=5193,\n                                                     directory=\"..\/input\/standard-fonts-digit-dataset-09\/data\/testing_data\",\n                                                     color_mode=\"grayscale\",\n                                                     shuffle=True,\n                                                     target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                     class_mode=\"categorical\")","81e85d42":"test_images, test_labels = next(test_data_gen)\nfilenames = test_data_gen.filenames\ntest_pred = model.predict(test_images)","d5c60867":"true_labels = tf.argmax(test_labels,1)","59e6c2ca":"predicted_labels = tf.argmax(test_pred,1)","200dbd61":"import sklearn\nfrom sklearn.metrics import confusion_matrix","56fb7b38":"confusion_matrix(true_labels, predicted_labels)","a21ed8cd":"import cv2\nimg = cv2.imread('..\/input\/standard-fonts-digit-dataset-09\/data\/training_data\/8\/10006.png',0)","7448e5bc":"plt.imshow(img)","5f9c0ebe":"img = cv2.resize(img, (28,28))\nimg = img.reshape(1,28,28,1)","14b82a0b":"model.predict(img)","03257f4c":"model.save_weights('digitRecognition.h5')\n# to save only weights ","b0f0d9a3":"model.save('model.h5')\n# to save the whole model with weights ","48f06b04":"### Defining a funtion to plot images easily","e6c38361":"#### saving the model","75bfa4bf":"### Result","c406d705":"## plotting result","b0d2314b":"#### Constant values ","0c619a62":"### Import libraries","60b01779":"### Model architecture","57cb3190":"# Data Generators\nWe defined two data generators, one that augments the data to make our training more general and one that just scales and centers the data.","a9d826ed":"#### Do Actual Training"}}