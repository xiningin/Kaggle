{"cell_type":{"234029b5":"code","a5787314":"code","95825964":"code","8714406b":"code","b31e607a":"code","073ed365":"code","99541299":"code","173a1eaa":"code","0f9501f2":"code","8e8d8e6b":"code","4e63af8f":"code","2878024e":"code","5dbbc870":"code","59370100":"code","d98e1b37":"code","2af35af9":"code","69b65adb":"code","22ac09fb":"code","b614d2af":"code","06724949":"code","3995dde9":"code","85e93eec":"markdown","ef8ef08a":"markdown"},"source":{"234029b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5787314":"import matplotlib.pyplot as plt\nfrom tensorflow import keras","95825964":"X_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nX_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(X_train.head())","8714406b":"y_train = X_train.pop('label')\nprint(type(y_train))","b31e607a":"X_train = (X_train\/255).to_numpy()\nX_test = (X_test\/255).to_numpy()\ny_train = y_train.to_numpy()","073ed365":"print(type(X_train))\nprint(X_test.shape)","99541299":"X_train = X_train.reshape(42000,28,28)","173a1eaa":"X_test = X_test.reshape(28000,28,28)","0f9501f2":"print(X_train.shape)","8e8d8e6b":"print(X_train[0].shape)\nX_trainExample = X_train[0].reshape(28,28)\nprint(X_trainExample.shape)","4e63af8f":"plt.figure()\nplt.imshow(X_trainExample,cmap=plt.cm.binary)\nplt.show()","2878024e":"X_train = keras.utils.normalize(X_train, axis=1)\nX_test = keras.utils.normalize(X_test, axis=1)\nprint(X_train)","5dbbc870":"print(y_train)","59370100":"import tensorflow as tf","d98e1b37":"X_train = np.expand_dims(X_train, -1)\nX_test = np.expand_dims(X_test, -1)","2af35af9":"input_shape = (28,28,1)","69b65adb":"model = keras.models.Sequential()\nmodel.add(keras.layers.Conv2D(32, kernel_size=(3,3), input_shape=input_shape, activation=tf.nn.relu))\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2,2)))\nmodel.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation=tf.nn.relu))\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2,2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(10, activation=tf.nn.softmax))\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","22ac09fb":"early_stopping = keras.callbacks.EarlyStopping()\nmodel.fit(X_train, y_train, epochs=5, callbacks=[early_stopping])\npred = model.predict(X_test)","b614d2af":"print(np.argmax(pred[4]))\nX_test0 = X_test[4].reshape(28,28)\nplt.imshow(X_test0)\nplt.show()\nprint(pred.shape)","06724949":"print(np.argmax(pred, axis=1))","3995dde9":"subm = pd.DataFrame({'ImageId': np.arange(1, 28001), 'Label':np.argmax(pred, axis=1)})\nsubm.to_csv('submission.csv',index=False)\nprint(subm)","85e93eec":"**Normalizing**","ef8ef08a":"Extend dims of numpy arrays, so they can be used in model"}}