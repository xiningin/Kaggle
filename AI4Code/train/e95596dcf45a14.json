{"cell_type":{"fb9260cc":"code","1f46d361":"code","cf66e2cd":"code","0d0d37b4":"code","26c2630c":"code","be087379":"code","50533433":"code","588dcd5a":"code","eafdfa7f":"code","534a808f":"code","a5074474":"code","3295f9b3":"code","3e0eeccc":"code","b48df42f":"code","74ed3a26":"code","64966b8d":"code","cc641f20":"code","007db270":"code","c741808e":"code","697769d2":"code","6e356143":"code","09d702f6":"code","559244f8":"code","e92ab649":"code","46b18748":"markdown","7eb437ad":"markdown","00a17a8b":"markdown","535e141d":"markdown","40f3cd76":"markdown","71646d52":"markdown","107416c2":"markdown","7351ee49":"markdown"},"source":{"fb9260cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f46d361":"df = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\ndf.head()","cf66e2cd":"df.info()","0d0d37b4":"df.isnull().sum()","26c2630c":"df = df.drop('CLIENTNUM', axis=1)","be087379":"import seaborn as sns\n\n# target is Attrition_Flag\nprint(df['Attrition_Flag'].value_counts())\nsns.countplot(x=\"Attrition_Flag\", data=df)","50533433":"pt = df[['Gender','Attrition_Flag']].pivot_table(index='Gender', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()","588dcd5a":"df['bin_age'] = pd.cut(df.Customer_Age, [0,30,40,50,60,70,90])\n\npt = df[['bin_age','Attrition_Flag']].pivot_table(index='bin_age', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()\ndf = df.drop('bin_age', axis=1)","eafdfa7f":"pt = df[['Income_Category','Attrition_Flag']].pivot_table(index='Income_Category', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()","534a808f":"pt = df[['Card_Category','Attrition_Flag']].pivot_table(index='Card_Category', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()","a5074474":"df['bin_Credit_Limit'] = pd.cut(df.Credit_Limit, [0,5000,10000,20000,30000,40000])\n\npt = df[['bin_Credit_Limit','Attrition_Flag']].pivot_table(index='bin_Credit_Limit', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()\ndf = df.drop('bin_Credit_Limit', axis=1)","3295f9b3":"pt = df[['Total_Relationship_Count','Attrition_Flag']].pivot_table(index='Total_Relationship_Count', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()","3e0eeccc":"pt = df[['Months_Inactive_12_mon','Attrition_Flag']].pivot_table(index='Months_Inactive_12_mon', columns='Attrition_Flag', aggfunc=len, fill_value=0)\npt.plot.bar()","b48df42f":"df['Attrition_Flag'] = df['Attrition_Flag'].replace({'Existing Customer': 0, 'Attrited Customer': 1})\ndf['Attrition_Flag'].value_counts()","74ed3a26":"df['Gender'] = df['Gender'].replace({'F': 0, 'M': 1})\ndf['Gender'].value_counts()","64966b8d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nnumerical_features = df.select_dtypes(exclude=['object'])\nnumerical_features = numerical_features.drop(['Attrition_Flag', 'Gender'], axis=1)\ndf[numerical_features.columns] = sc.fit_transform(numerical_features)","cc641f20":"categorical_features = df.select_dtypes(include=['object']).columns.values.tolist()\ndf = pd.get_dummies(df, columns=categorical_features)\ndf.head()","007db270":"df.shape","c741808e":"y = df['Attrition_Flag']\nX = df.drop('Attrition_Flag', axis=1)","697769d2":"from sklearn.decomposition import PCA\npca = PCA(0.95) \npca.fit(X)\nX_pca = pca.transform(X)\n\nprint(f'Shape of X before PCA: {X.shape}')\nprint(f'Shape of X after PCA: {X_pca.shape}')\n","6e356143":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=0)\n","09d702f6":"import xgboost as xgb\ngbm = xgb.XGBClassifier(max_depth=3, n_estimators=10, learning_rate=0.05, use_label_encoder=False)\ngbm = gbm.fit(X_train, y_train)","559244f8":"print(\"Accuracy on training set: {:.3f}\".format(gbm.score(X_train, y_train))) \nprint(\"Accuracy on test set: {:.3f}\".format(gbm.score(X_test, y_test)))","e92ab649":"y_pred=gbm.predict(X_test)\n\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\ncm=confusion_matrix(y_test,y_pred)\n\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")","46b18748":"### Build the model","7eb437ad":"### Exploratory Data Analysis","00a17a8b":"### Check null values","535e141d":"### Dimensional Reduction","40f3cd76":"### Explore Data","71646d52":"### Preprocess the data","107416c2":"### Drop non-informative columns","7351ee49":"### Evaluate the Model"}}