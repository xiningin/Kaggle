{"cell_type":{"9785702c":"code","65721a51":"code","05cfdd44":"code","d8465931":"code","ffd84b15":"code","cf3e3c2b":"code","ad8a5b53":"code","17dcd92a":"code","cdd61574":"code","226cf734":"code","c539da6b":"code","232e4ca7":"code","4e060f95":"code","c1ca1e0a":"code","7a592c45":"code","c72e7ef3":"code","be62e4de":"code","98ec3fa3":"code","ce5c0948":"code","a6e697b9":"code","9523e4d7":"code","f8aa1bb0":"code","9d34e43a":"markdown","60c4c548":"markdown","9f5f6d74":"markdown"},"source":{"9785702c":"# Importing Imagedatagenerator from tensorflow for data augmentation techniques.\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","65721a51":"# Preprocessing the train dataset\n# Applying some data augmentation again\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)","05cfdd44":"#Read the data from the dataset\ntrain_generator = train_datagen.flow_from_directory(\n    '\/kaggle\/input\/horses-or-humans-dataset\/horse-or-human\/train\/',\n    target_size= (300, 300),\n    batch_size=32,\n    class_mode='binary'\n)","d8465931":"# Preprocessing the test dataset\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    '\/kaggle\/input\/horses-or-humans-dataset\/horse-or-human\/validation\/',\n    target_size= (300, 300),\n    batch_size=32,\n    class_mode='binary'\n)","ffd84b15":"# Importing Con2D and Dense, con2D is for convolutional operation and Dense is for add the nodes with respect to the hidden layers.\nfrom tensorflow.keras.layers import Conv2D,Dense,MaxPool2D,Activation","cf3e3c2b":"from tensorflow.keras.regularizers import l2","ad8a5b53":"# Initialising the CNN\nfrom tensorflow.keras.models import Sequential\nmodel=Sequential()","17dcd92a":"# Convolution\nmodel.add(Conv2D(64, (3,3),strides=2,padding='same', input_shape=(300, 300, 3)))\nmodel.add(Activation('relu'))\n\n#Pooling\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n# Adding second convolutional layer\nmodel.add(Conv2D(32, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n","cdd61574":"# Flattening \nfrom tensorflow.keras.layers import Flatten\nmodel.add(Flatten())\n\n#Full connection\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n\n#Output layer\n# Using activation function as linear, because for binary classification we use linear svm.Linear svm means we try to draw a line between the particular classes.\nmodel.add(Dense(1,kernel_regularizer=tf.keras.regularizers.l2(0.01),activation='linear'))","226cf734":"model.summary()","c539da6b":"#Compiling the model\n\nmodel.compile (\n    loss = 'hinge',\n    optimizer = 'adam',\n    metrics=['accuracy']\n)","232e4ca7":"# Training the model on training dataset and evaluating it on the test\nresult=model.fit(x=train_generator, validation_data=test_generator,epochs=12)","4e060f95":"import matplotlib.pyplot as plt\nplt.plot(result.history['loss'],label='train loss')\nplt.plot(result.history['val_loss'],label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('Loss_val loss')\n\nplt.plot(result.history['accuracy'],label='train acc')\nplt.plot(result.history['val_accuracy'],label='val acc')\nplt.legend()\nplt.savefig('accVal_acc')\n","c1ca1e0a":"# saving the model as a h5 file\n\nmodel.save_weights('My_model.h5')\nmodel.load_weights('My_model.h5')","7a592c45":"#Checking with the images in the test dataset\n#Checking with a human image from test dataset.\n\nimage_name = 'valhuman02-14.png'","c72e7ef3":"from tensorflow.keras.preprocessing.image import load_img, img_to_array\n\nimg = load_img(image_name)\n\nx = img_to_array(img.resize([300,300]))\n\nx = x.reshape((1,) + x.shape)\n","be62e4de":"img","98ec3fa3":"if (model.predict_classes(x) == 0):\n  print ('horse')\nelse:\n  print ('human')","ce5c0948":"#Checking with a horse image in test dataset\nimage_name = 'horse1-436.png'","a6e697b9":"from tensorflow.keras.preprocessing.image import load_img, img_to_array\n\nimg = load_img(image_name)\n\nx = img_to_array(img.resize([300,300]))\n\nx = x.reshape((1,) + x.shape)\n","9523e4d7":"img","f8aa1bb0":"if (model.predict_classes(x) == 0):\n  print ('horse')\nelse:\n  print ('human')","9d34e43a":"- ### *There are 1027 images in train dataset and 256 images in test dataset.class mode is binary because we have two classification,i.e, horse and human.*","60c4c548":"- ### *Got accuracy 82%, and images are correctly predicted.*","9f5f6d74":"## *Horse\/Human Classification Using SVM*"}}