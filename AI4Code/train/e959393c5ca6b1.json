{"cell_type":{"68af04f0":"code","e1b3a300":"code","28afd73e":"code","e8f30179":"code","2a091664":"code","2778cc16":"code","7ba91268":"code","5828be9e":"code","062f7d4e":"code","8e217627":"code","cd6ae909":"code","65bff5d2":"code","fd34f311":"code","a6256bdb":"code","8e1219b9":"code","6c66deab":"code","3890c476":"code","dd770d60":"code","33a60d61":"code","de6efddb":"code","d3d4fd85":"code","db037758":"code","1f1b944e":"code","60b86f0c":"code","a2a7175e":"code","b8f5d2c6":"code","ef471180":"code","1d7dc202":"code","505ce1a4":"code","a6a7f55d":"code","861b9bc5":"code","d98c0cde":"code","7edad75e":"code","25018a35":"code","4d1b531a":"code","be357d08":"code","d4736faa":"code","9724d131":"code","8e7f0d64":"code","60ca6281":"code","680665c3":"code","b29c044e":"code","8ab127e9":"code","da5e3b9e":"code","1cf0b7eb":"code","63a64150":"code","8841b5b0":"code","08261aba":"code","955a4ce2":"markdown","890ed092":"markdown","52d47afa":"markdown","51dd05eb":"markdown","25a3f078":"markdown","0d1ac018":"markdown","0ef27548":"markdown","3c06a63b":"markdown","816aaff8":"markdown","6387b80d":"markdown","d5df427a":"markdown","87ca2f85":"markdown","d7faef54":"markdown","2d1af98d":"markdown","3fede833":"markdown","7e442a75":"markdown","66fe9a73":"markdown","9074d6bb":"markdown","a2aa1925":"markdown","69ab9076":"markdown","364f1160":"markdown","b89f5096":"markdown","81a6915a":"markdown","c382f710":"markdown","c5698786":"markdown","a99990f8":"markdown","dd92bdf2":"markdown","e932efcc":"markdown","d8aea93e":"markdown","6f6b97c5":"markdown","cd9171d5":"markdown","e4b243c6":"markdown","8ff7c538":"markdown","81c31c08":"markdown","2b595616":"markdown","ad5198c2":"markdown","36d54380":"markdown","4f27a2dc":"markdown","e021d976":"markdown","ccf6e5d1":"markdown"},"source":{"68af04f0":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score","e1b3a300":"zomato_orgnl=pd.read_csv(\"..\/input\/zomato.csv\")","28afd73e":"zomato_orgnl.head()","e8f30179":"zomato_orgnl.isnull().sum()","2a091664":"zomato=zomato_orgnl.drop(['url','dish_liked','phone'],axis=1)\nzomato.columns","2778cc16":"zomato.rename({'approx_cost(for two people)': 'approx_cost_for_2_people',\n               'listed_in(type)':'listed_in_type',\n               'listed_in(city)':'listed_in_city'\n              }, axis=1, inplace=True)\nzomato.columns","7ba91268":"remove_comma = lambda x: int(x.replace(',', '')) if type(x) == np.str and x != np.nan else x \nzomato.votes = zomato.votes.astype('int')\nzomato['approx_cost_for_2_people'] = zomato['approx_cost_for_2_people'].apply(remove_comma)","5828be9e":"zomato.info()","062f7d4e":"zomato['rate'].unique()","8e217627":"zomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)","cd6ae909":"remove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')","65bff5d2":"zomato['rate'].head()","fd34f311":"zomato.info()","a6256bdb":"def Encode(zomato):\n    for column in zomato.columns[~zomato.columns.isin(['rate', 'approx_cost_for_2_people', 'votes'])]:\n        zomato[column] = zomato[column].factorize()[0]\n    return zomato\n\nzomato_en = Encode(zomato.copy())","8e1219b9":"zomato_en['rate'] = zomato_en['rate'].fillna(zomato_en['rate'].mean())\nzomato_en['approx_cost_for_2_people'] = zomato_en['approx_cost_for_2_people'].fillna(zomato_en['approx_cost_for_2_people'].mean())","6c66deab":"zomato_en.isna().sum()","3890c476":"corr = zomato_en.corr(method='kendall')","dd770d60":"plt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)","33a60d61":"zomato_en.columns","de6efddb":"x = zomato_en.iloc[:,[2,3,5,6,7,8,9,11]]\ny = zomato_en['rate']","d3d4fd85":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=353)","db037758":"x_train.head()","1f1b944e":"y_train.head()","60b86f0c":"reg=LinearRegression()\nreg.fit(x_train,y_train)","a2a7175e":"y_pred=reg.predict(x_test)\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","b8f5d2c6":"'''reg_score=[]\nimport numpy as np\nfor j in range(1000):\n    x_train,x_test,y_train,y_test =train_test_split(x,y,random_state=j,test_size=0.1)\n    lr=LinearRegression().fit(x_train,y_train)\n    reg_score.append(lr.score(x_test,y_test))\nK=reg_score.index(np.max(reg_score))\n#Random state = K=353'''","ef471180":"from sklearn.tree import DecisionTreeRegressor","1d7dc202":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=105)","505ce1a4":"DTree=DecisionTreeRegressor(min_samples_leaf=.0001)","a6a7f55d":"DTree.fit(x_train,y_train)\ny_predict=DTree.predict(x_test)","861b9bc5":"from sklearn.metrics import r2_score","d98c0cde":"r2_score(y_test,y_predict)","7edad75e":"'''from sklearn.tree import DecisionTreeRegressor\nts_score=[]\nfor j in range(1000):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1,random_state=j)\n    dc=DecisionTreeRegressor().fit(x_train,y_train)\n    ts_score.append(dc.score(x_test,y_test))\nJ= ts_score.index(np.max(ts_score))\n\nJ\n#J=105'''","25018a35":"from sklearn.ensemble import RandomForestRegressor\nRForest=RandomForestRegressor(n_estimators=5,random_state=329,min_samples_leaf=.0001)","4d1b531a":"RForest.fit(x_train,y_train)\ny_predict=RForest.predict(x_test)","be357d08":"from sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","d4736faa":"'''rf_score=[]\nfor k in range(500):\n    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.01,random_state=k)\n    dtc=RandomForestRegressor().fit(x_train,y_train)\n    rf_score.append(dtc.score(x_test,y_test))\nK= rf_score.index(np.max(rf_score))\nK=329'''","9724d131":"fig = plt.figure(figsize=(20,7))\nloc = sns.countplot(x=\"location\",data=zomato_orgnl, palette = \"Set1\")\nloc.set_xticklabels(loc.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Location\",size=18)\nloc\nplt.title('NO. of restaurants in a Location',size = 20,pad=20)","8e7f0d64":"fig = plt.figure(figsize=(17,5))\nrest = sns.countplot(x=\"rest_type\",data=zomato_orgnl, palette = \"Set1\")\nrest.set_xticklabels(rest.get_xticklabels(), rotation=90, ha=\"right\")\nplt.ylabel(\"Frequency\",size=15)\nplt.xlabel(\"Restaurant type\",size=15)\nrest \nplt.title('Restaurant types',fontsize = 20 ,pad=20)","60ca6281":"plt.figure(figsize=(15,7))\nchains=zomato_orgnl['name'].value_counts()[:20]\nsns.barplot(x=chains,y=chains.index,palette='Set1')\nplt.title(\"Most famous restaurant chains in Bangaluru\",size=20,pad=20)\nplt.xlabel(\"Number of outlets\",size=15)","680665c3":"plt.figure(figsize=(15,7))\nzomato_orgnl['online_order'].value_counts().plot.bar()\nplt.title('Online orders', fontsize = 20)\nplt.ylabel('Frequency',size = 15)","b29c044e":"plt.figure(figsize=(15,7))\nzomato_orgnl['book_table'].value_counts().plot.bar()\nplt.title('Booking Table', fontsize = 20,pad=15)\nplt.ylabel('Frequency', fontsize = 15)","8ab127e9":"plt.figure(figsize=(10,10))\nrestaurantTypeCount=zomato_orgnl['rest_type'].value_counts().sort_values(ascending=True)\nslices=[restaurantTypeCount[0],\n        restaurantTypeCount[1],\n        restaurantTypeCount[2],\n        restaurantTypeCount[3],\n        restaurantTypeCount[4],\n        restaurantTypeCount[5],\n        restaurantTypeCount[6],\n        restaurantTypeCount[7],\n        restaurantTypeCount[8]]\nlabels=['Pubs and bars','Buffet','Drinks & nightlife','Cafes','Desserts','Dine-out','Delivery ','Quick Bites','Bakery']\ncolors = ['#3333cc','#ffff1a','#ff3333','#c2c2d6','#6699ff','#c4ff4d','#339933','black','orange']\nplt.pie(slices,colors=colors, labels=labels, autopct='%1.0f%%', pctdistance=.5, labeldistance=1.2,shadow=True)\nfig = plt.gcf()\nplt.title(\"Percentage of Restaurants according to their type\", bbox={'facecolor':'2', 'pad':2})","da5e3b9e":"fig, ax = plt.subplots(figsize=[15,7])\nsns.distplot(zomato_en['approx_cost_for_2_people'],color=\"magenta\")\nax.set_title('Approx cost for two people distribution',size=20,pad=15)\nplt.xlabel('Approx cost for two people',size = 15)\nplt.ylabel('Percentage of restaurants',size = 15)","1cf0b7eb":"plt.figure(figsize=(12,7))\npreds_rf = RForest.predict(x_test)\nplt.scatter(y_test,x_test.iloc[:,2],color=\"red\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(preds_rf,x_test.iloc[:,2],color=\"green\")","63a64150":"plt.figure(figsize=(15,8))\nrating = zomato['rate']\nplt.hist(rating,bins=20,color=\"red\")\nplt.title('Restaurant rating distribution', size = 20, pad = 15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('No. of restaurants',size = 15)","8841b5b0":"plt.figure(figsize=(15,8))\nsns.violinplot(zomato.approx_cost_for_2_people)\nplt.title('Approx cost for 2 people distribution', size = 20, pad = 15)\nplt.xlabel('Approx cost for 2 people',size = 15)\nplt.ylabel('Density',size = 15)","08261aba":"plt.figure(figsize=(15,8))\ncuisines=zomato['cuisines'].value_counts()[:15]\nsns.barplot(cuisines,cuisines.index)\nplt.title('Most popular cuisines of Bangalore', size = 20, pad = 15)\nplt.xlabel('No. of restaurants',size = 15)","955a4ce2":"__Converting \"votes\" and  \"approx_cost_for_2_people\" into numeric(int)__","890ed092":"**The approx cost for 2 people is around 300-400 INR**","52d47afa":"__Now we will Label Encode the input variable columns into 0,1,2...__","51dd05eb":"__Counting missing values for different columns__","25a3f078":"## Applying DECISION TREE REGRESSION","0d1ac018":"## ix) Restaurant rating distribution","0ef27548":"# 5.DATA VISUALIZATION","3c06a63b":"# 2.Reading dataset","816aaff8":"**Showing 5 restaurant datas using head() function**","6387b80d":"__Checking unique values of \"rate\"__","d5df427a":"## vii) Distribution of  restaurants according to approx cost for two people ","87ca2f85":"__We remove the restaurent datas which has rate='NEW'__","d7faef54":"## vi) Percentage of  restaurants according to their types","2d1af98d":"__Checking for correlation among all the x(inputs)__","3fede833":" __From above, it is found that the column \"dish_liked\" has more than 50% values missing__","7e442a75":"## iv) Number of restaurants taking online order or not","66fe9a73":"__Renaming \"approx_cost(for two people)\" ,listed_in(type) and listed_in(city) as they have multiple data-types__","9074d6bb":"__\"votes\" and  \"approx_cost_for_2_people\" have values like 1,000. \nSo we will change them into pure numeric values.\n<br>For this, we will use the lambda function__","a2aa1925":"__Dropping the column \"dish_liked\", \"phone\", \"url\"  and saving the new dataset as \"zomato\"__","69ab9076":"__Now we see that 'rate' column has converted to float datatype__","364f1160":"__With LINEAR REGRESSION, we are getting an  accuracy of  30 %__","b89f5096":"__The highest correlation is between name and address which is 0.63 which is not of very much concern__ \n<br> __Splitting dataset into train & test__ ","81a6915a":"__Now we will convert \"rate\" into float__","c382f710":"# 3.Data pre-processing","c5698786":"__With DECISION TREE REGRESSION, we are getting an  accuracy of  83 %__","a99990f8":"# 4.STARTING REGRESSION PART<br>(PREDICTION)","dd92bdf2":"## viii) Showing True rate vs Predicted rate","e932efcc":"# 1.Loading Packages","d8aea93e":"__With RANDOM FOREST REGRESSION, we are getting an  accuracy of  84 % which is better than all three__","6f6b97c5":"## ii) Frequency of different types of restaurants","cd9171d5":"__Now we will remove '\/5'__","e4b243c6":"__Information on original zomato dataset__","8ff7c538":"## Applying LINEAR REGRESSION","81c31c08":"__Confirming the data-types of \"votes\" and \"approx_cost_for_2_people\"__","2b595616":"## i) No. of restaurants in a particular location","ad5198c2":"## x) Approx cost for 2 people distribution","36d54380":"**The following loop will find the best random state which will give the best accuracy in the range. Uncomment and run to see the random state.\nP.S.- Random state might change as train_test_split splits the dataset randomly[](http:\/\/)**","4f27a2dc":"## Applying RANDOM FOREST REGRESSION ","e021d976":" ## v) Frequency of  restaurants allowing booking table or not","ccf6e5d1":"## iii) Most famous restaurant chains in Bengaluru"}}