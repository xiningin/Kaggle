{"cell_type":{"ae5d9139":"code","bbad58f8":"markdown"},"source":{"ae5d9139":"##About the data:\n\n##The data contains 700,000 records of Uber and Lyft data. We try to fit a linear regression model to know the effect of predictors on the price. \n\n## \n \n#Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n##Importing the csv file\ndf=pd.read_csv(\"C:\/Users\/DEEXITH REDDY\/Desktop\/Projects\/Uber Lyft Linear Regression\/rideshare_kaggle.csv\")\n\ndf=df.drop('timezone', axis=1)  ##Since it contains the same value\ndf=df.drop('datetime', axis=1)  ##Since this information is stored\n\ndf.isnull().sum().sum()\/(df.count())*100 ##Since the percentage of na values is less, 7, we can drop without loss of information.\n\ndf=df.dropna() ##Dropping na values\n\n##Most picked up and most destinations:\n\ndf['source'].describe()         ##Financial district\ndf['destination'].describe()     ##Financial district\n\n\n##Since product_id and name give the same information and also name is better described, we drop product_id\ndf=df.drop('product_id', axis=1)\n\n##Plotting price\nplt.hist(df['price'])\n##Price is left skewed, but since it is dependent variable, we do not mind. Also, it is continuos.\n\n\n##Plotting type of taxi\nplt.figure(figsize=(10,5))\nchart = sns.countplot(\n    data=df,\n    x='name',\n    palette='Set1'\n)\nchart.set_xticklabels(rotation=45)\n\n##The type of taxi used is more or less the same for each type. Hence, they are equally represented.\n\n##Plotting different type of weather\nchart=sns.countplot(x='short_summary',data=df)        \nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\n\n##Plotting greater weather analysis\n\nchart1=sns.countplot(x='long_summary',data=df)        \nchart1.set_xticklabels(chart1.get_xticklabels(), rotation=45)\n\n##Plotting source and destination, they were all equal\nchart0=sns.countplot(x='source',data=df)        \nchart0.set_xticklabels(chart0.get_xticklabels(), rotation=45)\nchart2=sns.countplot(x='destination',data=df)        \nchart2.set_xticklabels(chart2.get_xticklabels(), rotation=45)\n\n##Plotting time of the day\nplt.hist(df['hour'])          ##Spikes at night 00:00, morning 10:00, Afternoon 15:00, night 22:00\n\n##Plotting taxi wise\nsns.countplot(x='hour',hue=\"cab_type\",data=df)  ##Not many changes to the hourwise splits for Uber and Lyft\n\n\n##Plotting daywise\nsns.countplot(x='day',hue=\"cab_type\",data=df) ##Less on 9th and 10th of the month\n\n##Plotting month wise\nsns.countplot(x='day',hue=\"month\",data=df)  ##End of November to mid of December\n\n\n##There is a discrepancy between both ICON and SHORT_SUMMARY. We will be deleting the ICON.\n##ALso, we will be using long summary, so we will drop even short summary\ndf=df.drop('icon', axis=1)\ndf=df.drop('short_summary', axis=1)\n\n\n##Price is spread out across all times\nchart3=sns.scatterplot(x='hour',y='price',data=df)\n\n##We proceed to keep catagorical variables for the source and destination. Hence, we can eliminate the latitude and longitude\n\ndf=df.drop('latitude', axis=1)\ndf=df.drop('longitude', axis=1)\n\n\n##Separating the price to variable y and dropping of the dataframe\n\ny=df['price']\ndf=df.drop('price', axis=1)\n\n##Since the timestamp provides all information related to the hour, day and month, we can delete hour, day and month.\n\ndf=df.drop(['hour','day','month'], axis=1)\n\n##Setting first column as index:\n\ndf=df.set_index(df.columns[0])\n\n##Getting object data type into a single data frame.\nobj_df = df.select_dtypes(include=['object']).copy()\nobj_df.head()\n\n##Creating dummy variables:\n\ndummy=pd.get_dummies(obj_df, columns=[\"source\", \"destination\",\"cab_type\",\"name\",\"long_summary\"], prefix=[\"start\", \"end\",\"cab\",\"type\",\"weather\"])\n\n##Storing the the dataframe so as to first know the effect of non-weather variables and on the price except for weather summary and temperature.\n\ndf1=df\ndf.drop(df.iloc[:, 10:44], inplace = True, axis = 1)\ndf1=df1.drop('apparentTemperatureMaxTime', axis=1)\n\n##Deleting the object variables since categorical variables have been created.\n\n\ndf1=df1.drop([\"source\", \"destination\",\"cab_type\",\"name\",\"long_summary\"], axis=1)\n\n\n##Making a single dataframe with dummy variables and selected variables\n\ndf=pd.concat([df1,dummy], axis=1)\n\n##Splitting into train and test\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df,y,test_size=0.2,random_state=42)\n\n##Checking the mean to compare with MSE value\n\ny.mean()  ##16.54\n\n##Changing all y_train and y_test into lists, to avoid exog, endog error\n\ny_train = list(y_train)\ny_test = list(y_test)\n\n\n##Null Hypothesis: The coefficients are equal to zero\n##Alternate Hypothesis: The coefficients are not equal to zero\n##Using simple linear regression:\n\nimport statsmodels.api as sm\nfrom statsmodels.api import OLS\n\nmodel = sm.OLS(y_train,x_train).fit()\npredictions = model.predict(x_test)\n\n##Evaluating the model\nmodel.summary()\n\n##Model summary:\n\n##As we can see timestamp has high p-value. \n##Distance, surge multiplier, temperature, apparent temperature have low p-values. (Significant)\n##Locations start and stop have high p-values and hence are insignificant\n##Type of cab also have low value, indicating significance except for Lux SUV\n##Cab name also has high p-value, indicating no difference between Uber and Lyft\n##All weather variables have high p-values.\n\n##Changes: We remove all the high p-values and use the hour, day, month instead of timestamp\n##We recreate the data frame with important variables and add needed dummy variables to the dataframe\n\n\ndf=pd.read_csv(\"C:\/Users\/DEEXITH REDDY\/Desktop\/Projects\/Uber Lyft Linear Regression\/rideshare_kaggle.csv\")\ndf=df.set_index(df.columns[0])\n\ndf.drop(df.iloc[:, 18:55], inplace = True, axis = 1)\ndf=df.drop(['price','latitude','longitude','apparentTemperatureMaxTime','timestamp','datetime','timezone','source','destination','cab_type','product_id','name'],axis=1)\n\n##Adding the dummy variables created before:\n\ndf=pd.concat([df,dummy], axis=1)\ndf.drop(df.iloc[:, 7:33], inplace = True, axis = 1)\ndf.drop(df.iloc[:, 19:30], inplace = True, axis = 1)\n\n\n##Creating training and test sets with the new variables\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df,y,test_size=0.2,random_state=42)\n\ny_train = list(y_train)\ny_test = list(y_test)\n\nmodel = sm.OLS(y_train,x_train).fit()\npredictions = model.predict(x_test)\n\nmodel.summary()\n\n##We come to know that the hour, day and time do not have an effect on the equation\n##Now, the temperature and apparent temperature also do not have an effect. \n##So the fare only depends on distance, surge_multiplier and type of cab.\n\n##Deleting the hour, day, month, temperature and apparent temperature\ndf.drop(df.iloc[:, 0:3], inplace = True, axis = 1)\ndf=df.drop(['apparentTemperatureMax','temperature '],axis = 1)\n\n##Re-running the model:\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df,y,test_size=0.2,random_state=42)\n\ny_train = list(y_train)\ny_test = list(y_test)\n\nmodel = sm.OLS(y_train,x_train).fit()\npredictions = model.predict(x_test)\n\nmodel.summary()\n\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_test, predictions)) ##6.32\nnp.sqrt(mean_squared_error(y_test, predictions)) ##2.515\n\n##Now we explore different types of linear regression:\n\n##Stochastic Gradient:\n\nfrom sklearn.linear_model import SGDRegressor\nsgd_reg = SGDRegressor(n_iter=50, penalty=None, eta0=0.1)\nsgd_reg.fit(x_train, y_train)\n\npredictions = sgd_reg.predict(x_test)\n\nprint(mean_squared_error(y_test, predictions))  ##6.41\nnp.sqrt(mean_squared_error(y_test, predictions)) ##2.53\n\n##The SGD regressor has increase the MSE and RMSE.\n\n\n##Conclusion:\n\n## With the each increase in unit distance, the price increases by 2.7957, in general\n##With each surge multiplier increase, price increases by 18.3234\n##The most expensive type is LUX black XL, increasing price by 7.1995\n##The least expensive is Uber Pool, decreasing price by -15.6908\n\n##Price does not depend on weather, start and drop off locations or even time\n##It only depends on the distance and type of vehicle\n","bbad58f8":"![Price.png](attachment:Price.png)\n![Uber%20and%20Lyft.png](attachment:Uber%20and%20Lyft.png)\n![Type.png](attachment:Type.png)\n![Surgemultiplier.png](attachment:Surgemultiplier.png)\n![Source.png](attachment:Source.png)\n![Uber%20Lyft%20Count.png](attachment:Uber%20Lyft%20Count.png)\n![Weather.png](attachment:Weather.png)\n![Price%20vs%20time.png](attachment:Price%20vs%20time.png)\n![Weather%201.png](attachment:Weather%201.png)"}}