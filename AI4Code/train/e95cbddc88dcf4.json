{"cell_type":{"136a629b":"code","2e67bd0e":"code","dbb6712a":"code","c9d3bc3d":"markdown","5835da18":"markdown","f8d9bdb5":"markdown"},"source":{"136a629b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2e67bd0e":"# load data\n# train_df = pd.read_csv('..\/input\/train.csv')\npotential_energy_df = pd.read_csv('..\/input\/potential_energy.csv')\nmulliken_charges_df = pd.read_csv('..\/input\/mulliken_charges.csv')\nscalar_coupling_contributions_df = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')\nmagnetic_shielding_tensors_df = pd.read_csv('..\/input\/magnetic_shielding_tensors.csv')\ndipole_moments_df = pd.read_csv('..\/input\/dipole_moments.csv')\n# structure_df = pd.read_csv('..\/input\/structures.csv')\n# test_df = pd.read_csv('..\/input\/test.csv')\n\nprint(\"All the additional data were loaded.\")","dbb6712a":"# combine \"dipole_moments_df\" and \"potential_energy_df\" (The both have 85003 rows)\nDM_PE_df = pd.merge(dipole_moments_df, potential_energy_df, on='molecule_name')\n\n# combine \"magnetic_shielding_tensors_df\" and \"mulliken_charges_df\" (The both have 1533537 rows)\nMST_MC_df = pd.merge(magnetic_shielding_tensors_df, mulliken_charges_df, on=['molecule_name', 'atom_index'])\n\n# combine these two\nMST_MC_DM_PE_df = pd.merge(MST_MC_df, DM_PE_df, on='molecule_name', how='left')\n\n# combine it with \"scaler_coupling_contributions_df\" \ncombined_df = pd.merge(scalar_coupling_contributions_df, MST_MC_DM_PE_df, \n                           left_on=['molecule_name','atom_index_0'], right_on=['molecule_name','atom_index'], how='left')\ncombined_df1 = pd.merge(scalar_coupling_contributions_df, MST_MC_DM_PE_df, \n                           left_on=['molecule_name','atom_index_1'], right_on=['molecule_name','atom_index'], how='left')\n\n# average values between atom_index_0 and atom_index_1\nfor c in list(MST_MC_DM_PE_df.columns.values)[2:]:\n    combined_df[c] = (combined_df[c] + combined_df1[c]) \/ 2\n\ncombined_df = combined_df.drop(['atom_index'], axis=1)\nprint('Combined DF has {} rows and {} columns'.format(combined_df.shape[0], combined_df.shape[1]))\n\n# save as csv\ncombined_df.to_csv('combined_additional_data.csv',index=False)\n\n# head of the file\ncombined_df.head(12)","c9d3bc3d":"## Load data","5835da18":"Here you are.","f8d9bdb5":"## Merge files"}}