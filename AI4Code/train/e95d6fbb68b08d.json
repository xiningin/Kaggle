{"cell_type":{"63636120":"code","bf39704b":"code","017124c3":"code","cbc8f1f2":"code","75d3c2ca":"code","21a99200":"code","c8c616b1":"code","8446e20e":"markdown","af357ec0":"markdown","cf8b015d":"markdown","91a22311":"markdown","0c5fe1e7":"markdown","7605f17b":"markdown","68b3912c":"markdown","f7f17535":"markdown"},"source":{"63636120":"# Perform imports:\nimport numpy as np\nimport pandas as pd\nimport os","bf39704b":"gen =os.walk('..\/input\/d\/gauravduttakiit\/movie-reviews\/moviereviews')\nnext(gen)","017124c3":"next(gen)","cbc8f1f2":"next(gen)","75d3c2ca":"row_list = []\n\nfor subdir in ['neg','pos']:\n    for folder, subfolders, filenames in os.walk('..\/input\/d\/gauravduttakiit\/movie-reviews\/moviereviews\/'+subdir):\n        for file in filenames:\n            d = {'label':subdir}  # assign the name of the subdirectory to the label field\n            with open('..\/input\/d\/gauravduttakiit\/movie-reviews\/moviereviews\/'+subdir+'\/'+file) as f:\n                if f.read():      # handles the case of empty files, which become NaN on import\n                    f.seek(0)\n                    d['review'] = f.read()  # assign the contents of the file to the review field\n            row_list.append(d)\n        break","21a99200":"df = pd.DataFrame(row_list)","c8c616b1":"df.head()","8446e20e":"## Using Python's `os` module to build a DataFrame","af357ec0":"### Use os.walk() to build a DataFrame\n\nThe most efficient way to build a DataFrame from individual text files is to first build a list of dictionaries, then cast the list as a DataFrame all at once.<br>We'll take the following steps to build our list:\n1. Start with a list of subdirectory names ('neg' and 'pos')\n2. Walk each subdirectory\n3. Create a dictionary object for every file in a subdirectory where `label` is either 'neg' or 'pos', and `review` is the text of the file.\n4. We need to handle cases where files have no text - perhaps a reviewer ranked a movie without commenting on it - so that records are given NaN values.","cf8b015d":"next(gen) # this walks the \/pos\/ subfolder\nnext(gen)\n\n\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\n<ipython-input-51-e2a758a6db89> in <module>\n----> 1 next(gen) # this walks the \/pos\/ subfolder\n      2 next(gen)\n\nStopIteration: \n","91a22311":"### Let's look at what os.walk() does:","0c5fe1e7":"`os.walk()` stopped once it had walked all subfolders.","7605f17b":"# Building a corpus from individual files\nUntil now we've used single comma-delimited and tab-delimited files as our source of data. For this project we'll look at 2,000 individual files where each file contains the text of a review. The labels are determined by the subdirectory that holds the file; that is, positive reviews are stored in a `\\pos\\` directory while negative reviews live under `\\neg\\`. Refer to [moviereviesREADME.txt](..\/moviereviews\/moviereviewsREADME.txt) for more information about the files.\n\nWe'll show two different methods to extract the text of each file in each directory, and build our labeled corpus:\n* using Python's **os module** to build a pandas DataFrame\n* using an **nltk** tool called `CategorizedPlaintextCorpusReader` ","68b3912c":"The subfolder `..\/moviereviews\/neg` contains 1000 text files. ","f7f17535":"`os.walk()` is a generator that returns a tuple with three items:\n1. the name of the current folder\n2. a list of names of any subfolders\n3. a list of names of any files in the current folder"}}