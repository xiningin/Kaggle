{"cell_type":{"a8c5547e":"code","b8e17ab7":"code","d53353ca":"code","03edd09c":"code","99c6849e":"code","91ffd7bc":"code","f5f7b7e5":"code","e7d90a6c":"code","af669976":"code","c5d3165c":"code","a4a04297":"code","c9d3ff2d":"code","fe526bbd":"code","a6774745":"code","df3253d3":"code","ca8d6ab4":"code","627aa376":"code","b2f13d3f":"code","5666c6e5":"markdown","f26ff3fb":"markdown","4d28a992":"markdown","68b16b97":"markdown","533012b0":"markdown","1a78bcf1":"markdown","211bcc9d":"markdown","3e34d287":"markdown","3d089876":"markdown","d4642fa1":"markdown","dd221aa1":"markdown","27c6e6bd":"markdown"},"source":{"a8c5547e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8e17ab7":"data = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')","d53353ca":"data.head()","03edd09c":"data = data.replace(to_replace='Rising Pune Supergiant',value='Rising Pune Supergiants')","99c6849e":"data.isnull().sum()","91ffd7bc":"data = data.drop(columns=['method'])","f5f7b7e5":"import seaborn as sns\nimport matplotlib.pyplot as plt","e7d90a6c":"data","af669976":"temp = pd.DataFrame({'Winner':data['winner']})\ncount_wins = temp.value_counts()\nprint(count_wins.values)\nlabels = [x[0] for x in count_wins.keys()]\n\nbar,ax = plt.subplots(figsize=(20,12))\nax = plt.pie(x= count_wins,autopct=\"%.1f%%\",labels=labels)\nplt.title('Most Wins in History of IPL',fontsize=16)","c5d3165c":"sns.countplot(data['winner'][data['eliminator']=='Y'], data=data)\nplt.title('Most Wins in eliminator')\nplt.xticks(rotation=90)","a4a04297":"teams = data['toss_winner'].unique()\ndecision_making = pd.DataFrame([],columns=['Toss Winner','Decision','Times'])\nfor id, element in enumerate(teams):\n    temp_bat = data[(data['toss_winner']==element) & (data['toss_decision']=='bat')]\n    temp_field = data[(data['toss_winner']==element) & (data['toss_decision']=='field')]\n    decision_making = decision_making.append({'Toss Winner':element, 'Decision':'bat','Times':temp_bat['toss_winner'].count()}, ignore_index=True)\n    decision_making = decision_making.append({'Toss Winner':element, 'Decision':'field', 'Times':temp_field['toss_winner'].count()}, ignore_index=True)\ndecision_making","c9d3ff2d":"sns.catplot(x='Toss Winner',y='Times',hue='Decision',data=decision_making, kind='bar', height=5, aspect=2)\nplt.xticks(rotation=90)\nplt.xlabel('IPL Teams')\nplt.ylabel('Toss Decision')\nplt.title('Toss Decision per Team')","fe526bbd":"sns.barplot(x = data['venue'].value_counts().head(8).values, y=data['venue'].value_counts().head(8).index , data = data)\nplt.title('Most Famous Venues')\nplt.xlabel('Venue Count')\nplt.ylabel('Venue')","a6774745":"toss_losses=0\ntoss_wins=0\nfor element in data.values:\n    toss_winner = element[8]\n    match_winner = element[10]\n    if toss_winner != match_winner:\n        toss_losses+=1\n    else:\n        toss_wins+=1\nresult = pd.DataFrame({'Result':[toss_losses, toss_wins],'type':['Toss Wins Match losses','Toss Wins Match Wins']})\ntemp =  result.set_index('type')\nbar,ax = plt.subplots(figsize=(20,12))\nlabels = [x for x in temp.index]\nprint(labels)\nax = plt.pie(x= temp,autopct=\"%.1f%%\",labels=labels)\nplt.title('Impact of Toss Wins on Match Wins')    \n","df3253d3":"data['year'] = [x[:4] for x in data['date']]\nyears = data.year.unique()\nprint(years)\nman_of_match = pd.DataFrame([],columns=['Year','Man of Match','Times'])\nfor id, year in enumerate(years):\n    player_of_match = data['player_of_match'][data['year']==year]\n    man_of_match.loc[id] = [year, player_of_match.value_counts().index[0], player_of_match.value_counts()[0]]\nman_of_match\n  \n    ","ca8d6ab4":"sns.barplot(x='Man of Match',y = 'Times', data= man_of_match)\nplt.xticks(rotation=90)\nplt.title('Most Man of Match Year-Wise (2008-2020)')","627aa376":"sns.barplot(x = data['umpire1'].value_counts().head().index, y = data['umpire1'].value_counts().head().values, data=data)\nplt.xticks(rotation=45)\nplt.xlabel('Umpire 1')\nplt.ylabel('Match Count')\nplt.title('Top 5 Umpire_1')","b2f13d3f":"sns.barplot(x = data['umpire2'].value_counts().head().values, y = data['umpire2'].value_counts().head().index, data= data)\nplt.xlabel('Match Count')\nplt.ylabel('Umpire 2')\nplt.title('Top 5 Umpire_2')","5666c6e5":"# Top 5 Umpire_2","f26ff3fb":"# Exploratory Data Analysis (EDA)","4d28a992":"# Impact of Toss Result","68b16b97":"# Most Wins in IPL","533012b0":"# Famous Venue","1a78bcf1":"# Toss Decisions","211bcc9d":"# Top 5 Umpire_1","3e34d287":"# Dealing with Null values","3d089876":"# Get Data","d4642fa1":"# Most Man of Match","dd221aa1":"# Data Pre-Processing","27c6e6bd":"# Most Wins in Eliminator"}}