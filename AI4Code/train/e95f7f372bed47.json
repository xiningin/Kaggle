{"cell_type":{"d9e7b53a":"code","57163c4a":"code","07d7b87f":"code","f6f28f52":"code","c545831d":"code","15ef25b0":"code","f106a781":"code","82bc74c5":"code","7b5b22b1":"code","151e1233":"code","2c70620d":"code","b6352745":"code","5817ca90":"code","10886f6d":"code","4c7381f9":"code","2a8d3868":"code","750164e0":"code","87dd2c8c":"code","f8f70b7a":"code","689dd2c2":"code","2a513ce0":"code","7a71adbd":"code","a321186e":"code","1d988bb2":"code","1e0041e3":"code","93d2dfe3":"code","98e0d1ba":"code","1f6c66c4":"code","1a939c26":"code","d37f6b6c":"code","6703f9ee":"markdown","30c43e53":"markdown","1946c0a3":"markdown","94749fc5":"markdown","719f72ae":"markdown","cb4e18d5":"markdown"},"source":{"d9e7b53a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras","57163c4a":"df=pd.read_csv('\/kaggle\/input\/bank-customer-churn-modeling\/Churn_Modelling.csv')\ndf.head(5)","07d7b87f":"df.drop(['RowNumber','CustomerId','Surname'],axis='columns',inplace=True)","f6f28f52":"df.head()","c545831d":"df.shape","15ef25b0":"df['Exited'].value_counts()","f106a781":"df.isnull().sum()","82bc74c5":"df['Geography'].unique()","7b5b22b1":"df['Tenure'].unique()","151e1233":"df['NumOfProducts'].unique()","2c70620d":"df.dtypes","b6352745":"df=pd.get_dummies(df,columns=['Gender','Geography'],drop_first=True)","5817ca90":"df.head()","10886f6d":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\ncols=['CreditScore','Age','Balance','EstimatedSalary']\ndf[cols]=scaler.fit_transform(df[cols])","4c7381f9":"df.head()","2a8d3868":"x=df[['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard','IsActiveMember', 'EstimatedSalary', 'Gender_Male','Geography_Germany', 'Geography_Spain']]\ny=df['Exited']","750164e0":"from imblearn.over_sampling import SMOTE\nsmote=SMOTE(sampling_strategy='minority')\nx_sm,y_sm=smote.fit_resample(x,y)","87dd2c8c":"y_sm.value_counts()","f8f70b7a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_sm,y_sm,test_size=0.3,random_state=0,stratify=y_sm)","689dd2c2":"x_train.shape","2a513ce0":"y_train.value_counts()","7a71adbd":"model = keras.Sequential([\n    keras.layers.Dense(60, input_dim=x_train.shape[1], activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(30, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(15, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=100, batch_size=8)","a321186e":"model.evaluate(x_test,y_test)","1d988bb2":"yp=model.predict(x_test)","1e0041e3":"yp[:5]","93d2dfe3":"y_pred=[]\nfor i in yp:\n    if i>0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)","98e0d1ba":"y_pred[:5]","1f6c66c4":"y_test[:5]","1a939c26":"import seaborn as sns\ncm=tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\nsns.heatmap(cm,annot=True,fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","d37f6b6c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","6703f9ee":"## Predictions","30c43e53":"### Since we see here that our dataset is imbalanced so we have to do sampling using SMOTE","1946c0a3":"## Neural Network Model Training","94749fc5":"### Removing those columns which are not helpful in predictions","719f72ae":"## PreProcessing the dataset","cb4e18d5":"### Visualizing Predictions"}}