{"cell_type":{"f1400dfc":"code","40bc998f":"code","c53d7ffe":"code","b863d8a1":"code","01522149":"code","e7eef676":"code","79d9279a":"code","afe99d01":"code","c4324266":"code","42b96cfd":"code","70f1e141":"code","9323e7c9":"code","1e6018e3":"code","d1a5ef12":"code","03fe08aa":"code","edbadcb2":"code","18375faa":"code","ea52bd3f":"code","a10e5909":"code","5fbe7e5f":"code","827232e8":"code","5e8a0e55":"code","5458b176":"code","6137750d":"code","474e2e69":"code","53a41d9d":"code","4dda66cf":"code","c6b9b464":"code","f1cdca18":"code","e0fbc440":"code","a4fa3c86":"markdown","99c0736d":"markdown"},"source":{"f1400dfc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40bc998f":"!pip install kats","c53d7ffe":"from sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom kats.detectors.bocpd import BOCPDetector, BOCPDModelType, TrendChangeParameters, NormalKnownParameters\nfrom kats.detectors.robust_stat_detection import RobustStatDetector\nfrom kats.consts import TimeSeriesData\nimport plotly.express as px\nfrom datetime import datetime\nimport warnings","b863d8a1":"data = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv')\nasset_id = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')\nasset = asset_id.set_index('Asset_ID').sort_index()","01522149":"def changepoint_auto(data, asset_id, prior, feature, confidence = 0.75, scaling=True):\n    asset_name = asset.loc[asset_id]['Asset_Name']\n    asset_data = data[data['Asset_ID'] == asset_id].set_index(\"timestamp\")\n    tdf = pd.DataFrame()\n    tdf['time'] = pd.to_datetime(asset_data.index*1000000000)\n    tdf['value'] = asset_data[feature].values\n    if feature == 'Close':\n        th = tdf.resample('D', on='time').value.mean().to_frame()\n    else:\n        th = tdf.resample('D', on='time').value.sum().to_frame()\n    th['time'] = th.index\n    if scaling:\n        sc = StandardScaler()\n        cols_to_scale = ['value']\n        th['value'] = sc.fit_transform(th[cols_to_scale].values)\n    ts = TimeSeriesData(th)    \n    bocpd_detector = BOCPDetector(ts)\n    changepoints = bocpd_detector.detector(\n        model=BOCPDModelType.NORMAL_KNOWN_MODEL,\n        model_parameters = NormalKnownParameters(\n                #cp_prior=0.01, \n                #search_method= 'random',  \n                #known_prec_multiplier = 1.0,\n                empirical=True\n            ),\n        threshold = confidence,\n        changepoint_prior=prior,\n        choose_priors = True,\n        agg_cp = True\n    )   \n    \n    fig = px.line(th.value, title='Daily {0} graph for {1} with changepoints, value standard scaling: {2}'.format(feature, asset_name, scaling))\n    \n    #filetered_cahngepoints = []\n    i = 1\n    for changepoint in changepoints:\n        if i%2==0:\n            color = \"red\"\n        else:\n            color = \"green\"\n        if i==1:\n            point = datetime.strptime(str(changepoint[0].start_time).split('T')[0], \"%Y-%m-%d\")\n        elif i>2:\n            point_p = point\n            point = datetime.strptime(str(changepoint[0].start_time).split('T')[0], \"%Y-%m-%d\")\n            fig.add_vrect(\n                x0 = point_p,\n                x1 = point,\n              fillcolor=color, opacity=0.05, line_width=0)\n        i+=1\n        \n    #print(asset_name, len(changepoints), filetered_cahngepoints)\n    #bocpd_detector.plot(changepoints)\n    fig.show()","e7eef676":"\nchangepoint_auto(data, 0, 5e-3, 'Volume', 0.7, False)","79d9279a":"changepoint_auto(data, 0, 5e-3, 'Close', 0.75, False)","afe99d01":"changepoint_auto(data, 1, 5e-3, 'Volume', 0.6, False)","c4324266":"changepoint_auto(data, 1, 5e-5, 'Close', 0.8, False)","42b96cfd":"changepoint_auto(data, 2, 5e-4, 'Volume', 0.65, False)","70f1e141":"changepoint_auto(data, 2, 5e-5, 'Close', 0.77, False)","9323e7c9":"changepoint_auto(data, 3, 5e-3, 'Volume', 0.7, False)","1e6018e3":"changepoint_auto(data, 3, 5e-5, 'Close', 0.7, False)","d1a5ef12":"changepoint_auto(data, 4, 5e-3, 'Volume', 0.65, False)","03fe08aa":"changepoint_auto(data, 4, 5e-3, 'Close', 0.7, False)","edbadcb2":"changepoint_auto(data, 5, 5e-4, 'Volume', 0.7, False)","18375faa":"changepoint_auto(data, 5, 5e-3, 'Close', 0.75, False)","ea52bd3f":"changepoint_auto(data, 6, 5e-3, 'Volume', 0.75, False)","a10e5909":"changepoint_auto(data, 6, 5e-3, 'Close', 0.72, False)","5fbe7e5f":"changepoint_auto(data, 7, 5e-3, 'Volume', 0.75, False)","827232e8":"changepoint_auto(data, 7, 5e-3, 'Close',0.75, False)","5e8a0e55":"changepoint_auto(data, 8, 5e-3, 'Volume', 0.6, False)","5458b176":"changepoint_auto(data, 8, 5e-3, 'Close',0.75, False)","6137750d":"changepoint_auto(data, 9, 5e-3, 'Volume',0.65, False)","474e2e69":"changepoint_auto(data, 9, 5e-3, 'Close',0.75, False)","53a41d9d":"changepoint_auto(data, 10, 5e-3, 'Volume',0.75, False)","4dda66cf":"changepoint_auto(data, 11, 5e-3, 'Volume',0.6, False)","c6b9b464":"changepoint_auto(data, 11, 5e-3, 'Close',0.75, False)","f1cdca18":"changepoint_auto(data, 12, 5e-3, 'Volume',0.75, False)","e0fbc440":"changepoint_auto(data, 12, 5e-4, 'Close',0.7, False)","a4fa3c86":"**TO Do:**\n* cut maker dataset\n* deal with the warnings\n\n**Possible usage in competition:**\n* OOF in line with periods between changepoints\n* categorical features\n* basis for numerical features reflecting trend momentum","99c0736d":"**The function below does cp detection with kats library**\n## *Parameters:*\n* *data* - data \n* *asset_id* - coin id \n* *prior* - as I use Bayesian online detection method with an assumed nornmal distribution of changepoints prior stands for share of cp among datapoints\n* *feature* - 'Close' or 'Volume\n* *confidence* - filtering cps only with confidence greater than it\n* *scaling* - if True standard sacaling of values, I sometimes prefer to use it for Volume"}}