{"cell_type":{"d7487201":"code","ec34c30d":"code","6bb1f233":"code","25c76bd8":"code","3c15d286":"code","adddd1b4":"code","66a535e3":"code","16ca93c9":"code","f2b3f61f":"code","eaf5f687":"code","fbe709d5":"code","09e09669":"code","edb75e12":"code","bd6c212e":"code","b9f3612e":"code","a39c14b4":"code","f30fbd82":"code","c2f3e1f1":"code","f1c546ae":"code","be13832b":"code","0c5c14e7":"code","5b2df8ea":"code","15e353d5":"code","2bf009a6":"code","8891142e":"code","a6899546":"code","6bea7e33":"code","9cdd0d9e":"code","e76916ca":"code","59513058":"code","264f162d":"code","200442c3":"code","c2ab48f7":"code","3fab34af":"code","94703f0a":"code","e40e09f7":"code","c07dd4aa":"code","59a8952c":"code","0440edab":"code","e0f86d16":"code","2a697ea9":"code","5bc8363d":"code","a03fa957":"code","bffd5dad":"markdown","b5845eae":"markdown","52b02983":"markdown","6651bd68":"markdown","18b78777":"markdown","f02c8052":"markdown","588017b6":"markdown","a28ffadc":"markdown","560529c5":"markdown","6cd0ab41":"markdown","c0ceba51":"markdown","d78e7a05":"markdown","ac848a1e":"markdown","62742d0b":"markdown","150de683":"markdown","f164e61d":"markdown","a38a90ba":"markdown","c45bf0e5":"markdown","c3b5d76d":"markdown","5bbd7ad4":"markdown"},"source":{"d7487201":"import torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm","ec34c30d":"df = pd.read_csv('..\/input\/smile-twitter-emotion-dataset\/smile-annotations-final.csv',\n                names=['id', 'text','category'])\ndf.set_index('id', inplace=True)","6bb1f233":"df.head()","25c76bd8":"df.text.iloc[0]","3c15d286":"df.category.value_counts()","adddd1b4":"df1 = df[~df.category.str.contains('\\|')]","66a535e3":"df1 = df1[df1.category != 'nocode']","16ca93c9":"df1.category.value_counts()","f2b3f61f":"possible_labels = df1.category.unique()","eaf5f687":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","fbe709d5":"label_dict","09e09669":"df1['label'] = df1.category.replace(label_dict)\ndf1.head(10)","edb75e12":"from sklearn.model_selection import train_test_split","bd6c212e":"X_train, X_val, y_train, y_val = train_test_split(\n    df1.index.values,\n    df1.label.values,\n    test_size = 0.15,\n    random_state=17,\n    stratify=df1.label.values\n)","b9f3612e":"df1['data_type'] = ['not_set']*df1.shape[0]\ndf1.head()","a39c14b4":"df1.loc[X_train, 'data_type'] = 'train'\ndf1.loc[X_val, 'data_type'] = 'val'","f30fbd82":"df1.groupby(['category', 'label', 'data_type']).count()","c2f3e1f1":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","f1c546ae":"tokenizer = BertTokenizer.from_pretrained(\n    'bert-base-uncased',\n    do_lower_case=True\n)","be13832b":"encoded_data_train = tokenizer.batch_encode_plus(\n    df1[df1.data_type == 'train'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df1[df1.data_type == 'val'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensors='pt'\n)\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df1[df1.data_type == 'train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df1[df1.data_type == 'val'].label.values)","0c5c14e7":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","5b2df8ea":"len(dataset_train)","15e353d5":"len(dataset_val)","2bf009a6":"from transformers import BertForSequenceClassification","8891142e":"model = BertForSequenceClassification.from_pretrained(\n    'bert-base-uncased', \n    num_labels = len(label_dict),\n    output_attentions=False,\n    output_hidden_states=False\n)","a6899546":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","6bea7e33":"batch_size = 4\n\ndataloader_train = DataLoader(\n    dataset_train,\n    sampler = RandomSampler(dataset_train),\n    batch_size = batch_size\n)\n\ndataloader_val = DataLoader(\n    dataset_val,\n    sampler = RandomSampler(dataset_val),\n    batch_size = 32\n)","9cdd0d9e":"from transformers import AdamW, get_linear_schedule_with_warmup","e76916ca":"optimizer = AdamW(\n    model.parameters(),\n    lr=1e-5,# 2e-5 ... 5e-5\n    eps=1e-8\n)","59513058":"epochs = 10\n\nscheduler = get_linear_schedule_with_warmup(\n    optimizer,\n    num_warmup_steps=0,\n    num_training_steps = len(dataloader_train)*epochs\n)","264f162d":"import numpy as np","200442c3":"from sklearn.metrics import f1_score","c2ab48f7":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis = 1). flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average = 'weighted')","3fab34af":"def accuracy_per_class(preds, labels):\n    labels_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis = 1). flatten()\n    labels_flat = labels.flatten()\n    \n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat == label]\n        y_true = labels_flat[labels_flat == label]\n        print(f'Class: {labels_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds == label])\/len(y_true)}')","94703f0a":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","e40e09f7":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","c07dd4aa":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in tqdm(dataloader_val):\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals\n","59a8952c":"for epoch in tqdm(range(1, epochs+1)):\n    model.train()\n    \n    loss_train_total = 0\n    \n    progress_bar = tqdm(dataloader_train, \n                        desc='Epoch {:1d}'.format(epoch),\n                       leave=False,\n                       disable=False)\n    \n    for batch in progress_bar:\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {\n            'input_ids': batch[0],\n            'attention_mask': batch[1],\n            'labels': batch[2]\n        }\n        \n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n        \n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n        \n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n        \n    torch.save(model.state_dict(), f'.\/BERT_ft_epoch{epoch}.model')\n    \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)\n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_val)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (weighted): {val_f1}')","0440edab":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)","e0f86d16":"model.to(device)\npass","2a697ea9":"model.load_state_dict(\n    torch.load('Models\/finetuned_bert_epoch_1_gpu_trained.model', \n               map_location=torch.device('cpu')))","5bc8363d":"_, predictions, true_vals = evaluate(dataloader_val)","a03fa957":"accuracy_per_class(predictions, true_vals)","bffd5dad":"## Task 3: Training\/Validation Split","b5845eae":"## Task 2: Exploratory Data Analysis and Preprocessing","52b02983":"### What is BERT\n\nBERT is a large-scale transformer-based Language Model that can be finetuned for a variety of tasks.\n\nFor more information, the original paper can be found [here](https:\/\/arxiv.org\/abs\/1810.04805). \n\n[HuggingFace documentation](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)\n\n[Bert documentation](https:\/\/characters.fandom.com\/wiki\/Bert_(Sesame_Street) ;)","6651bd68":"### Prerequisites","18b78777":"## Task 6: Creating Data Loaders","f02c8052":"## Task 7: Setting Up Optimizer and Scheduler","588017b6":"# Sentiment Analysis with Deep Learning using BERT","a28ffadc":"Accuracy metric approach originally used in accuracy function in [this tutorial](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/#41-bertforsequenceclassification).","560529c5":"### Project Outline","6cd0ab41":"## Task 10: Loading and Evaluating our Model","c0ceba51":"## Task 4: Loading Tokenizer and Encoding our Data","d78e7a05":"Approach adapted from an older version of HuggingFace's `run_glue.py` script. Accessible [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128).","ac848a1e":"- Intermediate-level knowledge of Python 3 (NumPy and Pandas preferably, but not required)\n- Exposure to PyTorch usage\n- Basic understanding of Deep Learning and Language Models (BERT specifically)","62742d0b":"We want to convert \npred = [0.95 0.5 0.05 0 0 0] to \npreds = [1 0 0 0 0 0 ]","150de683":"## Task 1: Introduction","f164e61d":"## Task 9: Creating our Training Loop","a38a90ba":"We will use the SMILE Twitter dataset.\n\n_Wang, Bo; Tsakalidis, Adam; Liakata, Maria; Zubiaga, Arkaitz; Procter, Rob; Jensen, Eric (2016): SMILE Twitter Emotion dataset. figshare. Dataset. https:\/\/doi.org\/10.6084\/m9.figshare.3187909.v2_","c45bf0e5":"**Task 1**: Introduction (this section)\n\n**Task 2**: Exploratory Data Analysis and Preprocessing\n\n**Task 3**: Training\/Validation Split\n\n**Task 4**: Loading Tokenizer and Encoding our Data\n\n**Task 5**: Setting up BERT Pretrained Model\n\n**Task 6**: Creating Data Loaders\n\n**Task 7**: Setting Up Optimizer and Scheduler\n\n**Task 8**: Defining our Performance Metrics\n\n**Task 9**: Creating our Training Loop\n\n**Task 10**: Loading and Evaluating our Model","c3b5d76d":"## Task 5: Setting up BERT Pretrained Model","5bbd7ad4":"## Task 8: Defining our Performance Metrics"}}