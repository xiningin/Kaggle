{"cell_type":{"47072648":"code","8c2c4209":"code","f2efed76":"code","81eaf2c9":"code","3c783c53":"code","232e80c0":"code","567e761b":"code","07acbafa":"code","34d954d3":"code","26f70f75":"code","3f163999":"code","0fcf7883":"code","2d658b49":"code","79257a49":"code","a8b24d8c":"code","8b8e421e":"code","7924fe95":"code","29d26e8a":"code","0909b29e":"code","46a06798":"code","ed540f9f":"code","555e0323":"code","0f5f58a4":"code","79f3fdba":"code","3c5f6bf4":"code","179eac9c":"code","c081dd19":"code","e0e15965":"code","889bf7b2":"code","59fe9da1":"code","c1b5450e":"markdown","745be1bb":"markdown","e7572e6c":"markdown","f2c45544":"markdown","3996e175":"markdown","abf75451":"markdown","226a3a22":"markdown","fecd9d35":"markdown","914f6081":"markdown","9756e4fd":"markdown","5ab134cd":"markdown","cd444ed1":"markdown","51be0fc3":"markdown","5603be82":"markdown","b952a6a7":"markdown","648f74b6":"markdown","d7ae9810":"markdown","e86efec1":"markdown","ca980ae8":"markdown","6e882ede":"markdown","b58d2ed2":"markdown","f59fcf2a":"markdown","d5afc2e1":"markdown","c4e11f25":"markdown","402cc737":"markdown","88cbbf82":"markdown","3aaa54ea":"markdown"},"source":{"47072648":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nprint(mpl.__version__)\nprint(sns.__version__)","8c2c4209":"# Matplotlib Configuration\nmpl.rcParams['figure.dpi'] = 150\n\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False","f2efed76":"from matplotlib.collections import PatchCollection\nfrom matplotlib.patches import Rectangle\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 5))\n\nax.scatter([2], [1.5], color='black' )\nax.plot([4, 4.5, 5, 5.5], [1, 2, 1, 2], color='black')\nrect = Rectangle((7, 1), 1, 1, color='black')\nax.add_patch(rect)\n\nax.annotate(f\"Point\", \n            xy=(2, 0.7),\n            va = 'center', ha='center',fontsize=10, fontweight='bold',\n            color='black')\n\nax.annotate(f\"Line\", \n            xy=(4.75, 0.7),\n            va = 'center', ha='center',fontsize=10, fontweight='bold',\n            color='black')\n\nax.annotate(f\"Area\", \n            xy=(7.5, 0.7),\n            va = 'center', ha='center',fontsize=10, fontweight='bold',\n            color='black')\n\nax.set_aspect(1)\nax.set_ylim(0, 3)\nax.set_xlim(0, 10)\nax.axis('off')\nplt.show()","81eaf2c9":"fig = plt.figure(figsize=(15, 7))\n\naxes = [0, 0]\naxes[0] = fig.add_subplot(1,2,1,aspect=1)\naxes[1] = fig.add_subplot(1,2,2, aspect=1)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\naxes[0].bar(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,)\n\n\naxes[1].barh(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       height=width,\n)\n\n\nfor idx, ax in enumerate(axes, 0):\n    \n    if idx==0:\n        ax.set_xticks(x)\n        ax.set_xticklabels(labels, fontsize=12)\n        ax.tick_params(axis='y', which='major', labelsize=13)\n    else:\n        ax.set_yticks(x)\n        ax.set_yticklabels(labels, fontsize=12)\n        ax.tick_params(axis='x', which='major', labelsize=13)\n        \n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_linewidth(2)\n    ax.spines['left'].set_linewidth(2)\n\n\naxes[0].set_title(f\"Bar Plot (vertical)\", fontsize=20, fontweight='semibold')    \naxes[1].set_title(f\"Bar Plot (horizontal)\", fontsize=20, fontweight='semibold')    \n    \n\nplt.subplots_adjust(wspace=0.2)\nplt.show()","3c783c53":"fig, axes = plt.subplots(1, 2, figsize=(20, 7))\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\n# Default\naxes[0].bar(x, y1, \n       color='#1ABDE9',\n)\n\n# Original\naxes[1].bar(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,)\n\n\n# Spine\nfor idx, ax in enumerate(axes, 1):\n    ax.set_title(f\"Bar Plot {idx}\", fontsize=20, fontweight='semibold')\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels, fontsize=12)\n    ax.tick_params(axis='y', which='major', labelsize=13)\n\naxes[0].spines['top'].set_visible(True)\naxes[0].spines['right'].set_visible(True)    \naxes[1].margins(0.05,0.2)    \naxes[1].spines['bottom'].set_linewidth(2)\naxes[1].spines['left'].set_linewidth(2)    \n\nplt.subplots_adjust(wspace=0.2)\nplt.show()","232e80c0":"fig, axes = plt.subplots(1, 2, figsize=(15, 7), sharey=True)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\n# Sky Bar Plot\naxes[0].bar(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='sky'\n      )\n\n# Pink Bar Plot\naxes[1].bar(x, y2, \n       color='#F36E8E',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='pink'\n      )\n\n\nfor idx, ax in enumerate(axes, 1):\n\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_linewidth(2)\n    ax.spines['left'].set_linewidth(2)\n\n    # Title\n    ax.set_title(f\"Bar Plot {idx}\", fontsize=20, fontweight='semibold')\n\n    # Label\n    ax.set_xlabel(\"X axis label\", fontsize=15, fontweight='medium')\n    if idx==1 : ax.set_ylabel(\"Y axis label\", fontsize=15, fontweight='medium')\n\n    # Ticklabels\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels, fontsize=12)\n    ax.tick_params(axis='y', which='major', labelsize=13)\n\n    # Legend \n    ax.legend(fontsize=13)\n\nplt.tight_layout()\nplt.show()","567e761b":"fig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\n# Sky Bar Plot\nax.bar(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='sky'\n      )\n\n# Pink Bar Plot\nax.bar(x, y2, bottom=y1, \n       color='#F36E8E',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='pink'\n      )\n\n\n# Spine\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n#### Text #### \n\n# Title\nax.set_title(\"Stacked Bar Plot\", fontsize=20, fontweight='semibold')\n\n# Label\nax.set_xlabel(\"X axis label\", fontsize=15, fontweight='medium')\nax.set_ylabel(\"Y axis label\", fontsize=15, fontweight='medium')\n\n# Ticklabels\nax.set_xticks(x)\nax.set_xticklabels(labels, fontsize=12)\nax.tick_params(axis='y', which='major', labelsize=13)\n\n# Legend \nax.legend(fontsize=13)\n\nplt.tight_layout()\nplt.show()","07acbafa":"fig = plt.figure(figsize=(10, 5), dpi=150)\nax = fig.add_subplot(111)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\n# Sky Bar Plot\nax.barh(x, y1\/(y1+y2), \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       label='sky'\n      )\n\n# Pink Bar Plot\nax.barh(x, y2\/(y1+y2), left=y1\/(y1+y2), \n       color='#F36E8E',\n       edgecolor='black',\n       linewidth=2,\n       label='pink'\n      )\n\n\n# Spine\nfor s in ['top', 'bottom', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n\n#### Text #### \n\n# Title\nax.set_title(\"Percentage Stacked Bar Chart\", fontsize=15, fontweight='semibold')\n\nfor xx, yy1, yy2 in zip(x, y1, y2):\n    ax.annotate(f\"{100*yy1\/(yy1+yy2):.4}%\", \n                   xy=(yy1\/(yy1+yy2)\/2, xx),\n                   va = 'center', ha='center',fontsize=10, fontweight='bold',\n                   color='white')\n\n    ax.annotate(f\"{100*yy2\/(yy1+yy2):.4}%\", \n               xy=((1+(yy1)\/(yy1+yy2))\/2, xx),\n               va = 'center', ha='center',fontsize=10, fontweight='bold',\n               color='white')\n    \n# Ticklabels\nax.set_xticks([])\nax.set_yticks(x)\nax.set_yticklabels(labels, fontsize=12)\nax.tick_params(axis='y', which='major', labelsize=13)\n\n# Legend \nax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\nplt.tight_layout()\nplt.show()","34d954d3":"fig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.5\n\n# Sky Bar Plot\nax.bar(x, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='sky',\n       alpha=0.8\n      )\n\n# Pink Bar Plot\nax.bar(x, y2,\n       color='#F36E8E',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='pink',\n       alpha=0.8\n      )\n\n\n# Spine\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n#### Text #### \n\n# Title\nax.set_title(\"Overlapped Bar Plot\", fontsize=20, fontweight='semibold')\n\n# Label\nax.set_xlabel(\"X axis label\", fontsize=15, fontweight='medium')\nax.set_ylabel(\"Y axis label\", fontsize=15, fontweight='medium')\n\n# Ticklabels\nax.set_xticks(x)\nax.set_xticklabels(labels, fontsize=12)\nax.tick_params(axis='y', which='major', labelsize=13)\n\n# Legend \nax.legend(fontsize=13)\n\nplt.tight_layout()\nplt.show()","26f70f75":"fig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111)\n\nlabels = list('ABCDE')\nx = np.arange(len(labels)) \ny1 = np.array([1, 2, 3, 4, 3])\ny2 = np.array([4, 3, 2, 5, 1])\nwidth=0.3\n\n# Sky Bar Plot\nax.bar(x-width\/2, y1, \n       color='#1ABDE9',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='sky'\n      \n      )\n\n# Pink Bar Plot\nax.bar(x+width\/2, y2, \n       color='#F36E8E',\n       edgecolor='black',\n       linewidth=2,\n       width=width,\n       label='pink'\n      )\n\n\n# Spine\nax.spines['bottom'].set_linewidth(2)\nax.spines['left'].set_linewidth(2)\n\n#### Text #### \n\n# Title\nax.set_title(\"Grouped Bar Plot\", fontsize=20, fontweight='semibold')\n\n# Label\nax.set_xlabel(\"X axis label\", fontsize=15, fontweight='medium')\nax.set_ylabel(\"Y axis label\", fontsize=15, fontweight='medium')\n\n# Ticklabels\nax.set_xticks(x)\nax.set_xticklabels(labels, fontsize=12)\nax.tick_params(axis='y', which='major', labelsize=13)\n\n# Legend \nax.legend(fontsize=13)\n\nplt.tight_layout()\nplt.show()","3f163999":"from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,\n                               AutoMinorLocator)\n\nfig = plt.figure(figsize=(7, 5), dpi=150)\n\n\n\n\nnp.random.seed(970725)\n\nx = np.arange(20)\ny = np.random.rand(20)\n\n# Ax2\nax2 = fig.add_subplot(111)\nax2.plot(x, y,\n        marker='o',\n       color='#1ABDE9',\n       linewidth=2,)\n\nax2.spines['bottom'].set_linewidth(1.5)\nax2.spines['left'].set_linewidth(1.5)\nax2.set_title(f\"Line Plot\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","0fcf7883":"from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,\n                               AutoMinorLocator)\n\nfig = plt.figure(figsize=(12, 5), dpi=150)\n\n\n\n\nnp.random.seed(970725)\n\nx = np.arange(20)\ny = np.random.rand(20)\n\n\n# Ax1\nax1 = fig.add_subplot(121)\nax1.plot(x, y,\n       color='#1ABDE9',\n         marker='o',\n       linewidth=2, label='sin')\n\n# Ax2\nax2 = fig.add_subplot(122)\nax2.plot(x, y,\n       color='#1ABDE9',\n       linewidth=2,)\n\nax2.spines['bottom'].set_linewidth(1.5)\nax2.spines['left'].set_linewidth(1.5)\n\nax1.yaxis.set_major_locator(MultipleLocator(0.05))    \nax1.xaxis.set_major_locator(MultipleLocator(1))    \nax1.grid(linewidth=0.3)    \nax1.set_title(f\"Line Plot (information)\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\nax2.set_title(f\"Line Plot (clean)\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","2d658b49":"fig = plt.figure(figsize=(10, 8), dpi=150)\n\n\nx = np.linspace(0, 2*np.pi, 1000)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Ax1\nax1 = fig.add_subplot(211, aspect=1)\nax1.plot(x, y1,\n       color='#1ABDE9',\n       linewidth=2, label='sin')\n\nax1.plot(x, y2,\n       color='#F36E8E',\n       linewidth=2, label='cos')\n\n# Ax2\nax2 = fig.add_subplot(212, aspect=1)\nax2.plot(x, y1,\n       color='#1ABDE9',\n       linewidth=2,)\n\nax2.plot(x, y2,\n       color='#F36E8E',\n       linewidth=2,)\n\nax2.text(x[-1]+0.1, y1[-1], s='sin', fontweight='bold',\n         va='center', ha='left', \n         bbox=dict(boxstyle='round,pad=0.3', fc='#1ABDE9', ec='black', alpha=0.3))\n\nax2.text(x[-1]+0.1, y2[-1], s='cos', fontweight='bold',\n         va='center', ha='left', \n         bbox=dict(boxstyle='round,pad=0.3', fc='#F36E8E', ec='black', alpha=0.3))\n\n\n\nfor ax in [ax1, ax2]:\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\n    \n    \nax1.legend(loc='upper center')\nax1.set_title(f\"Line Plot (Legend)\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\nax2.set_title(f\"Line Plot (Label w\/o Legend)\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","79257a49":"from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,\n                               AutoMinorLocator)\n\nfig = plt.figure(figsize=(12, 5), dpi=150)\n\n\n\n\nnp.random.seed(970725)\n\nx = np.arange(20)\ny = np.random.rand(20)\n\n\n# Ax1\nax1 = fig.add_subplot(121)\nax1.plot(x, y,\n       color='#1ABDE9',\n       linewidth=2, label='sin')\n\n\n# Ax2\nax2 = fig.add_subplot(122)\nax2.plot(x, y,\n       color='lightgray',\n       linewidth=2,)\n\nax2.scatter(x[np.argmax(y)], np.max(y), \n            c='#F36E8E',s=50, zorder=20)\n\nax2.scatter(x[np.argmin(y)], np.min(y), \n            c='#1ABDE9',s=50, zorder=20)\n\nfor ax in [ax1, ax2]:\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\nax2.set_ylim(-0.1, 1.1)\nax2.set_xlim(-1, 20)\n\nax2.text(x[np.argmax(y)], np.max(y)+0.04, s=f'{np.max(y):.3}', fontweight='bold',\n         va='bottom', ha='center', \n         bbox=dict(boxstyle='round,pad=0.3', fc='#F36E8E', ec='black', alpha=0.3))\n\nax2.text(x[np.argmin(y)], np.min(y)-0.04, s=f'{np.min(y):.3}', fontweight='bold',\n         va='top', ha='center', \n         bbox=dict(boxstyle='round,pad=0.3', fc='#1ABDE9', ec='black', alpha=0.3))\n\n\nax2.margins(0)\nplt.hlines(np.max(y), xmin=-1, xmax=x[np.argmax(y)], linestyle='--', color='#F36E8E')\nplt.hlines(np.min(y), xmin=-1, xmax=x[np.argmin(y)], linestyle='--', color='#1ABDE9')\n\nax1.set_title(f\"Default\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\nax2.set_title(f\"Add Min\/Max Info\", loc='left', fontsize=12, va= 'bottom', fontweight='semibold')\n\n\nplt.tight_layout()\nplt.show()","a8b24d8c":"fig = plt.figure(figsize=(7, 7), dpi=150)\nax = fig.add_subplot(111, aspect=1)\n\nnp.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\nax.scatter(x, y, s=150, \n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black')\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\nax.set_title(f\"Basic Scatter Plot\", fontsize=15,va= 'center', fontweight='semibold')\n\n\nplt.tight_layout()\nplt.show()","8b8e421e":"fig = plt.figure(figsize=(16, 7), dpi=150)\nnp.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\naxes = []\nfor i in range(1, 3):\n    ax = fig.add_subplot(1, 2, i, aspect=1)\n    axes.append(ax)\n    ax.scatter(x, y, s=150, \n               c='#1ABDE9',\n               linewidth=1.5,\n               edgecolor='black', zorder=10)\n\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\n    ax.set_xlim(0, 1.1)\n    ax.set_ylim(0, 1.1)\n\n    \naxes[0].grid(zorder=0)    \naxes[0].set_title(f\"Scatter Plot w Grid\", fontsize=15,va= 'center', fontweight='semibold')\naxes[1].set_title(f\"Scatter Plot w\/o Grid\", fontsize=15,va= 'center', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","7924fe95":"fig = plt.figure(figsize=(7, 7), dpi=150)\nax = fig.add_subplot(111, aspect=1)\n\nax.scatter([1, 2, 3], [3, 3, 3], \n           color=['#1ABDE9', '#F36E8E', '#00BE6C'],\n           s=300,\n           linewidth=1.5,\n           edgecolor='black'\n          )\n\nfor idx, marker in enumerate(['o', '^', 's'], 1):\n    ax.scatter(idx, 2,\n           color='lightgray',\n           marker=marker,\n           s=300,\n           linewidth=1.5,\n           edgecolor='black'\n          )\n\n    \nfor idx, s in enumerate([300, 1200, 2700], 1):\n    ax.scatter(idx, 1,\n           color='lightgray',\n           s=s,\n           linewidth=1.5,\n           edgecolor='black'\n          )    \n    \nfor s in ['top', 'bottom', 'left', 'right']:\n    ax.spines[s].set_visible(False)\n\nax.set_xlim(0, 4)\nax.set_ylim(0, 3.5)\nax.set_xticks([])\nax.set_yticks([])\nax.set_title(f\"Scatter Components\", fontsize=15,va= 'center', fontweight='semibold')\n\n\nplt.tight_layout()\nplt.show()","29d26e8a":"fig = plt.figure(figsize=(23, 7), dpi=150)\n\nnp.random.seed(970725)\nx1 = np.random.rand(10)\ny1 = np.random.rand(10)\n\nx2 = np.random.rand(10)\ny2 = np.random.rand(10)\n\n\n# Ax1\nax1 = fig.add_subplot(131, aspect=1)\nax1.scatter(x1, y1, s=150, \n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black',\n           label='A'\n          )\n\nax1.scatter(x2, y2, s=150, \n           c='#F36E8E',\n           linewidth=1.5,\n           edgecolor='black',\n           label='B')\n\n# Ax2\nax2 = fig.add_subplot(132, aspect=1)\nax2.scatter(x1, y1, s=150, \n           marker='o',\n            c='black',\n           linewidth=1.5,\n           edgecolor='black',\n           label='A'\n          )\n\nax2.scatter(x2, y2, s=150, \n           marker='^',\n            c='black',\n           linewidth=1.5,\n           edgecolor='black',\n           label='B')\n\n# Ax3\nax3 = fig.add_subplot(133, aspect=1)\nax3.scatter(x1[:3], y1[:3], s=100, \n           marker='o',\n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black',\n           label='100'\n          )\n\nax3.scatter(x1[3:6], y[3:6], s=200, \n           marker='o',\n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black',\n           label='200'\n          )\n\nax3.scatter(x[6:], y[6:], s=300, \n           marker='o',\n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black',\n           label='300'\n          )\n\n\n# Setting\nfor ax in [ax1, ax2, ax3]:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\n    ax.set_xlim(0, 1.1)\n    ax.set_ylim(0, 1.1)\n    ax.legend(fontsize=10)\n\nax1.set_title(f\"Scatter Plot [Color]\", fontsize=15,va= 'center', fontweight='semibold')    \nax2.set_title(f\"Scatter Plot [Marker]\", fontsize=15,va= 'center', fontweight='semibold')    \nax3.set_title(f\"Scatter Plot [Size]\", fontsize=15,va= 'center', fontweight='semibold')    \n    \nplt.tight_layout()\nplt.show()","0909b29e":"fig = plt.figure(figsize=(23, 7), dpi=150)\n\nnp.random.seed(19970725)\nn = 200\n\nx = np.random.normal(0, 0.2, n)\ny = np.random.normal(0, 0.2, n)\n\n# Ax1\nax1 = fig.add_subplot(131, aspect=1)\nax1.scatter(x+np.arange(n)\/n, y+np.arange(n)\/n, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n           label='A'\n          )\n\n# Ax2\nax2 = fig.add_subplot(132, aspect=1)\nax2.scatter(x+np.arange(n)\/n, y+(n-np.arange(n)-1)\/n, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n           label='A'\n          )\n\n# Ax3\nax3 = fig.add_subplot(133, aspect=1)\nax3.scatter(x*1.5+0.6, y*1.5+0.6, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n           label='A'\n          )\n\n# Setting\nfor ax in [ax1, ax2, ax3]:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\n    ax.set_xlim(-0.5, 1.5)\n    ax.set_ylim(-0.5, 1.5)\n\nax1.set_title(f\"Positive Correlation\", fontsize=15,va= 'center', fontweight='semibold')    \nax2.set_title(f\"Negative Correlation\", fontsize=15,va= 'center', fontweight='semibold')    \nax3.set_title(f\"No Correlation\", fontsize=15,va= 'center', fontweight='semibold')    \n    \nplt.tight_layout()\nplt.show()","46a06798":"fig = plt.figure(figsize=(23, 7), dpi=150)\n\nnp.random.seed(19970725)\nn = 200\n\n\n# Ax1\nx = np.random.normal(0, 0.1, n)\ny = np.random.normal(0, 0.2, n)\n\nax1 = fig.add_subplot(131, aspect=1)\nax1.scatter(0.2+x, 1+y, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n           label='A'\n          )\n\nx = np.random.normal(0, 0.15, n)\ny = np.random.normal(0, 0.15, n)\n\nax1.scatter(1+x, 0+y, s=100, \n           color='#F36E8E',\n           linewidth=1.1,\n           edgecolor='black',\n           label='B'\n          )\n\nx = np.random.normal(0, 0.25, n)\ny = np.random.normal(0, 0.25, n)\n\nax1.scatter(x, y, s=100, \n           color='#00BE6C',\n           linewidth=1.1,\n           edgecolor='black',\n           label='C'\n          )\n\n# Ax2\nax2 = fig.add_subplot(132)\n\nx = np.random.normal(0, 0.06, n)\ny = np.random.normal(0, 0.3, n)\n\n\nax2.scatter(x, y, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n          )\n\n\nx = np.random.normal(0, 0.06, n)\ny = np.random.normal(0, 0.3, n)\n\nax2.scatter(x+1, y, s=100, \n           c='#1ABDE9',\n           linewidth=1.1,\n           edgecolor='black',\n          )\n\nax2.axvspan(0.25, 0.8, alpha=0.2, color='#1ABDE9')\n\n# Ax3\nax3 = fig.add_subplot(133, aspect=1)\n\nx = np.random.normal(0, 0.2, n)\ny = np.random.normal(0, 0.2, n)\n\nax3.scatter(x, y, s=100, \n           c='lightgray',\n           linewidth=1.1,\n           edgecolor='black',\n          )\n\nax3.scatter([-0.8, 0.75, 0.8], [-0.7, 0.8, 0.7], s=100,\n            c='#F36E8E',\n            linewidth=1.1,\n            edgecolor='black',\n           )\n\n# Setting\nfor ax in [ax1, ax2, ax3]:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nax3.set_xlim(-1, 1)    \nax3.set_ylim(-1, 1)\n    \nax1.set_title(f\"Cluster\", fontsize=15,va= 'center', fontweight='semibold')    \nax2.set_title(f\"Gap in Values\", fontsize=15,va= 'center', fontweight='semibold')    \nax3.set_title(f\"Outliers\", fontsize=15,va= 'center', fontweight='semibold')    \n    \nplt.tight_layout()\nplt.show()","ed540f9f":"from matplotlib.colors import ListedColormap\nfig = plt.figure(figsize=(23, 7), dpi=150)\n\nnp.random.seed(19970725)\nn = 2000\n\nx = np.arange(n)\/n+np.random.normal(0, 0.2, n)\ny = np.arange(n)\/n+np.random.normal(0, 0.2, n)\n\n# Ax1\nax1 = fig.add_subplot(131, aspect=1)\nax1.scatter(x, y, s=50, \n           c='#1ABDE9', \n            alpha=0.3,\n            linewidth=0\n          )\n\n# Ax2\nN = 256\nvals = np.ones((N, 4))\nvals[:, 0] = np.linspace(1, 26\/256, N)\nvals[:, 1] = np.linspace(1, 189\/256, N)\nvals[:, 2] = np.linspace(1, 233\/256, N)\nnewcmp = ListedColormap(vals)\n\nax2 = fig.add_subplot(132, aspect=1)\nax2.hist2d(x, y, bins=(20, 20), \n           cmap=newcmp)\n\n# Ax3\n\nax3 = fig.add_subplot(133, aspect=1)\nsns.kdeplot(x=x, y=y, ax=ax3, fill=True, cmap=newcmp);\n\n# Setting\nfor ax in [ax1, ax2, ax3]:\n    ax.spines['bottom'].set_linewidth(1.5)\n    ax.spines['left'].set_linewidth(1.5)\n\n    ax.set_xticks([])\n    ax.set_yticks([])\n    \n    ax.set_xlim(-0.5, 1.5)\n    ax.set_ylim(-0.5, 1.5)\n\nax1.set_title(f\"Transparency\", fontsize=15,va= 'center', fontweight='semibold')    \nax2.set_title(f\"2D Histogram\", fontsize=15,va= 'center', fontweight='semibold')    \nax3.set_title(f\"Contour Plot\", fontsize=15,va= 'center', fontweight='semibold')    \n    \nplt.tight_layout()\nplt.show()","555e0323":"fig = plt.figure(figsize=(7, 7), dpi=150)\nax = fig.add_subplot(111, aspect=1)\n\nnp.random.seed(970725)\n\nmean, cov = [4, 6], [(1.5, .7), (.7, 1)]\nx, y = np.random.multivariate_normal(mean, cov, 100).T\n\nsns.regplot(x=x, y=y,  \n            color='#1ABDE9',\n            logx=True,\n            ax=ax)\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\n\nax.set_title(f\"Scatter with Trend Line\", fontsize=15,va= 'center', fontweight='semibold')\n\n\nplt.tight_layout()\nplt.show()","0f5f58a4":"fig = plt.figure(figsize=(12, 5),dpi=150)\n\n\nfor i in range(2):\n    color='#004731'\n    ax = fig.add_subplot(1, 2, i+1, projection='polar')\n\n\n\n    angles = [np.deg2rad((90+n*60)%360) for n in range(6)]\n    angles += angles[:1]\n\n    values=np.array([20, 240, 90, 200, 30, 180])\n    labels=np.array(list('ABCDEF'))\n    \n    if i == 1 :\n        labels = labels[np.argsort(values)]\n        values.sort()\n        \n    values = values.tolist()\n    values += values[:1]\n\n    \n\n    ax.set_thetagrids([(90+n*60)%360 for n in range(6)], labels, fontweight='bold')\n    \n    ax.set_rgrids(range(50, 260, 50), range(50, 260, 50), color=\"gray\", size=8)\n    ax.set_ylim(0,260)\n\n\n    ax.plot(angles, values, color= color, linewidth=2, linestyle='solid')\n    ax.fill(angles, values, color=color, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n","79f3fdba":"import string\nfig = plt.figure(figsize=(12, 5),dpi=150)\n\n\nnp.random.seed(970725)\ncolor='#912cee'\nax = fig.add_subplot(1, 1, 1, projection='polar')\n\n\n\nangles = [np.deg2rad((90+n*360\/26)%360) for n in range(26)]\nangles += angles[:1]\n\nvalues=np.arange(10, 270, 10)\nnp.random.shuffle(values)\nlabels=np.array(list(string.ascii_lowercase))\n\n\n\nvalues = values.tolist()\nvalues += values[:1]\n\n\n\nax.set_thetagrids([(90+n*360\/26)%360 for n in range(26)], labels, fontweight='bold')\n\nax.set_rgrids(range(50, 260, 50), range(50, 260, 50), color=\"gray\", size=8)\nax.set_ylim(0,260)\n\n\nax.plot(angles, values, color= color, linewidth=2, linestyle='solid')\nax.fill(angles, values, color=color, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n","3c5f6bf4":"import seaborn as sns\n\nnp.random.seed(97)\nX = np.arange(31)\nY = np.random.rand(31)\n\n\nfig, axes = plt.subplots(1, 2, figsize=(25, 7))\naxes[0].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color=sns.color_palette(\"hls\", 31))\n\ncolors = ['#a4a4a4'] * len(X)\ncolors[np.argmax(Y)] = '#D45555'\ncolors[np.argmin(Y)] = '#5555D4'\n\naxes[1].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color=colors)\n\nfor ax in axes:\n    ax.set_yticks([])\n    ax.spines['top'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n\nplt.show()","179eac9c":"import seaborn as sns\n\nnp.random.seed(97)\n\nnum = 7\n\nX = np.arange(num)\nY = np.random.rand(num)\n\n\nfig, axes = plt.subplots(1, 4, figsize=(25, 7))\n\naxes[0].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color='gray')\n\naxes[1].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color=sns.color_palette(\"Set2\", num))\n\n\naxes[2].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color=sns.color_palette(\"coolwarm\", num))\n\naxes[3].bar(X, Y, \n       linewidth=1,\n       edgecolor='black',\n       color=sns.color_palette(\"flare\", num))\n\n\nfor ax in axes:\n    ax.set_yticks([])\n    ax.spines['top'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\naxes[0].set_title('One Color', loc='left', va='bottom', fontsize=12, fontweight='bold')\naxes[1].set_title('Categorical', loc='left', va='bottom', fontsize=12, fontweight='bold')    \naxes[2].set_title('Diverge', loc='left', va='bottom', fontsize=12, fontweight='bold')    \naxes[3].set_title('Sequential', loc='left', va='bottom', fontsize=12, fontweight='bold')        \n\nplt.show()","c081dd19":"np.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n\nfig = plt.figure(figsize=(16, 7), dpi=150)\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\nax.scatter(x, y, s=150, \n           c='#1ABDE9',\n           linewidth=1.5,\n           edgecolor='black', zorder=10)\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\n    \nax.grid(zorder=0, linestyle='--')    \nax.set_title(f\"Default Grid\", fontsize=15,va= 'center', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","e0e15965":"np.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n\nfig = plt.figure(figsize=(16, 7), dpi=150)\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\nax.scatter(x, y, s=150, \n           c=['#1ABDE9' if xx+yy < 1.0 else 'darkgray' for xx, yy in zip(x, y)],\n           linewidth=1.5,\n           edgecolor='black', zorder=10)\n\nx_start = np.linspace(0, 2.2, 12, endpoint=True)\nslope = 2\n\nfor xs in x_start:\n    ax.plot([xs, 0], [0, xs], linestyle='--', color='gray', alpha=0.5, linewidth=1)\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\nax.set_title(f\"Grid (x+y=c)\", fontsize=15,va= 'center', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","889bf7b2":"np.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n\nfig = plt.figure(figsize=(16, 7), dpi=150)\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\nax.scatter(x, y, s=150, \n           c=['#1ABDE9' if yy\/xx >= 1.0 else 'darkgray' for xx, yy in zip(x, y)],\n           linewidth=1.5,\n           edgecolor='black', zorder=10)\n\nradian = np.linspace(0, np.pi\/2, 10, endpoint=True)\n\nfor rad in radian:\n    ax.plot([0,1], [0, np.tan(rad)], linestyle='--', color='gray', alpha=0.5, linewidth=1)\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\nax.set_title(f\"Grid (y=cx)\", fontsize=15,va= 'center', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","59fe9da1":"np.random.seed(970725)\n\nx = np.random.rand(20)\ny = np.random.rand(20)\n\n\nfig = plt.figure(figsize=(16, 7), dpi=150)\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\nax.scatter(x, y, s=150, \n           c=['darkgray' if i!=2 else '#1ABDE9'  for i in range(20)] ,\n           linewidth=1.5,\n           edgecolor='black', zorder=10)\n\nrs = np.linspace(0, 2, 21, endpoint=True)\n\nfor r in rs:\n    xx = r*np.cos(np.linspace(0, 2*np.pi, 100))\n    yy = r*np.sin(np.linspace(0, 2*np.pi, 100))\n    ax.plot(xx+x[2], yy+y[2], linestyle='--', color='gray', alpha=0.5, linewidth=1)\n\n\nax.spines['bottom'].set_linewidth(1.5)\nax.spines['left'].set_linewidth(1.5)\n\nax.set_xlim(0, 1.1)\nax.set_ylim(0, 1.1)\n\nax.set_title(f\"Grid ((x-x')^2+(y-y')^2=c)\", fontsize=15,va= 'center', fontweight='semibold')\n\nplt.tight_layout()\nplt.show()","c1b5450e":"## Stop Use Rainbow Colormap","745be1bb":"## Bar (Horizontal & Vertical)\n\nBar graphs are visualizations that show numerical values by category.\nBy default, the bar uses a rectangular shape.\n\nThere are basically two types of bar graphs. Horizontal and vertical version.\n\nThe horizontal version is used when there are too many categories.","e7572e6c":"## Color Palette for Discrete Data","f2c45544":"## Stacked, Overlapped, Grouped Barplot\n\nThere are three ways to show more than one feature on a plot:\n\n- Stacked\n- Overlapped\n- Grouped\n\n### Stacked\n\nAs a way to express it in a stack, you need to pay attention to the following factors.\n\n- Are all the bars in the same order?\n- Is it appropriate to see the distribution of the bars other than the bottom?\n- What are the advantages over overlapping","3996e175":"### Overlapped \n\nIt is suitable for comparison, which was a disadvantage in a stacked bar chart.","abf75451":"## Scatter with\/without Grid\n\nWhen the points are small, the grid may not be useful, so be careful.","226a3a22":"## Scatter Plot\n\nThe scatterplot can display X-axis\/Y-axis data simultaneously in a Cartesian coordinate system. In other words, it basically visualizes two-dimensional data.\n\nSince one point represents one data, it is possible to express the data quantitatively and the distribution.","fecd9d35":"## Ovecome Overplotting in Scatter\n\nThe points on the scatterplot easily overlap. If these points overlap, it is difficult to know the actual distribution, so the following technique can be used.\n\n- Transparency\n- Jittering\n- 2D Histogram\n- Contour plot","914f6081":"## Multiple Bar Plot\n\nOne way to show various features is to draw two or more plots in succession.","9756e4fd":"## Components","5ab134cd":"## Radar Plot with Many Categories (not recommended)\n\nNot recommended if there are too many categories appearing on the radar plot.","cd444ed1":"## Scatter Components (2)\n\nUsing these elements to separate content is called a visual popout. As you can see, you can see the difference in the order of color> shape> size.","51be0fc3":"### Percentage Staked Bar Chart\n\nTo see the total percentage, you can also draw a bar graph with the total as 1 as follows.","5603be82":"## Grid\n\n> motivate from https:\/\/medium.com\/nightingale\/gotta-gridem-all-2f768048f934","b952a6a7":"## Library Check","648f74b6":"## Line Plot\n\nLine plots are visualized with points on the data and the lines connecting those points.","d7ae9810":"## Scater Plot's 3 view point \n\nIn addition, you can look at a total of three things.\n\n- **Clusters** : Can the data be divided into similar categories?\n- **Gap in Values** : Is there a big gap between the data?\n- **Outlier** : Are there any values in the data that are considered odd?","e86efec1":"## Simple is Better (Line Ver.)\n\n\nIf you want to see a lot of information, it is better to draw it complex, and if you want to know trends rather than information, it is better to draw simple.\n\nAlways consider the difference between EDA and Presentation.","ca980ae8":"## Area can change in Radar Plot\n\nThe area of the radar plot does not mean the quality of the actual data.","6e882ede":"## Conceptual Figure - Basic Viz\n\n![](https:\/\/matplotlib.org\/_static\/logo2_compressed.svg)\n\n\nLearn the basic theory of visualization through the use of basic charts.\n\n### Related Work\n\n- [[All About Vis] How to Make the Right Barplot?](https:\/\/www.kaggle.com\/subinium\/all-about-vis-how-to-make-the-right-barplot)\n- [[All About Vis] How to Make the Right Lineplot?](https:\/\/www.kaggle.com\/subinium\/all-about-vis-how-to-make-the-right-lineplot)\n- [Tips for making the Informative Visualization](https:\/\/www.kaggle.com\/subinium\/tips-for-making-the-informative-visualization)\n- [\nSimple Matplotlib & Visualization Tips \ud83d\udca1](https:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips)\n- [\n\ud83d\udc40 Subin's Visualization Notebooks List](https:\/\/www.kaggle.com\/subinium\/subin-s-visualization-notebooks-list)","b58d2ed2":"## Bar Plot (Space setting)\n\nYou can improve the readability of the bar graph by adjusting the spacing and space of the bar.","f59fcf2a":"## Trend Line in Scatter\n\nAdding a regression line can help you further identify trends. However, putting more than one regression line can be misleading.","d5afc2e1":"### Grouped\n\nThis is the best way to look at a variety of features. It is characterized by being adjacent to each other and is best when the number of colors is 5-7.","c4e11f25":"## Correlation in Scatter Plot\n\nThe scatterplot is basically used to look for correlations.\n\nCorrelation is divided into positive correlation, negative correlation, and no relationship.","402cc737":"## Scatter Components\n\nThe elements of a point have color, marker, and size, and color is best for discrete comparisons.","88cbbf82":"## Line Plot (add Max, Minor)\n\nAdd information through various elements for necessary content.","3aaa54ea":"## Line Plot (Label & Legend)\n\nIt is better to use labels instead of legends."}}