{"cell_type":{"9873ed40":"code","da164b96":"code","4e5a9b9f":"code","8aa4662f":"code","1ed59549":"code","9a4415a2":"code","2ea62e42":"code","89d6e360":"code","6e745281":"code","3a04d175":"code","b4052daa":"code","cf998157":"code","922c4c02":"code","448daee3":"code","55299c86":"code","572e4f4a":"code","709c49fb":"code","99fae530":"code","d78cdabc":"code","6df4280e":"code","1d296496":"code","797822b6":"code","a4e6a9da":"code","76e69d55":"code","dc82f0c2":"code","62b4b19c":"code","c4e4cbfa":"code","3a6a4e83":"code","d344c06a":"code","10551a19":"code","0448a86b":"code","f29c81b7":"code","da9a1772":"code","fc9d4835":"code","57dd19ab":"markdown","91f02c2f":"markdown","538f6014":"markdown","c045d427":"markdown"},"source":{"9873ed40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","da164b96":"!cp -r \/kaggle\/input\/covid19-detection-xray-dataset \/kaggle\/working\/","4e5a9b9f":"!rm -rf \/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/OversampledAugmentedCOVID-19","8aa4662f":"#!rm -rf \/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/COVID-19\/COVID-19","1ed59549":"import os\nimport subprocess as sbp\nS_dir = \"\/kaggle\/input\/covid19-detection-xray-dataset\/TrainData\/OversampledAugmentedCOVID-19\/COVID-19\"\nD_dir = \"\/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/COVID-19\"\nfor file in os.listdir(S_dir):\n    path = os.path.join(S_dir, file)\n    p3 = \"cp -r \" + path +\" \" + D_dir+\"\/\"\n    sbp.Popen(p3,shell=True)\n    ","9a4415a2":"!cd \/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/COVID-19&& ls","2ea62e42":"import shutil\nS_dir = \"\/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/COVID-19\"\nfor file in os.listdir(S_dir):\n    shutil.copy2(os.path.join(S_dir,file),os.path.join(S_dir,file.split('.')[0]+\"_1\"+file.split('.')[1]))\n    shutil.copy2(os.path.join(S_dir,file),os.path.join(S_dir,file.split('.')[0]+\"_2\"+file.split('.')[1]))\n    shutil.copy2(os.path.join(S_dir,file),os.path.join(S_dir,file.split('.')[0]+\"_3\"+file.split('.')[1]))\n    shutil.copy2(os.path.join(S_dir,file),os.path.join(S_dir,file.split('.')[0]+\"_4\"+file.split('.')[1]))\n        ","89d6e360":"import random\nS_dir = \"\/kaggle\/working\/covid19-detection-xray-dataset\/TrainData\/Normal\"\nfile_Normal = list(os.listdir(S_dir))\nrandom.shuffle(file_Normal)\nfor i in file_Normal[0:300]:\n    os.remove(S_dir + '\/' + i)","6e745281":"import os\nimport seaborn as sns\ncounts = []\ndir = '\/kaggle\/working\/covid19-detection-xray-dataset\/TrainData'\nprint(\"Total No of data present in each folder of TrainData\\n\")\nfor filename in os.listdir(dir):\n        path = os.path.join(dir, filename)\n        list1 = os.listdir(path) \n        number_files = len(list1)\n        counts = counts + [filename]*number_files\n        print (filename + \":\"+ str(number_files))\n\nsns.countplot(counts)\n       ","3a04d175":"counts_val = []\ndir = '\/kaggle\/working\/covid19-detection-xray-dataset\/ValData'\nprint(\"Total No of data present in each folder of ValData\\n\")\nfor filename in os.listdir(dir):\n        path = os.path.join(dir, filename)\n        list1 = os.listdir(path) \n        number_files = len(list1)\n        counts_val = counts_val + [filename]*number_files\n        print (filename + \":\"+ str(number_files))\n        \nsns.countplot(counts_val)","b4052daa":"!cd \/kaggle\/input\/covid19-radiography-database&& ls","cf998157":"import tensorflow as tf","922c4c02":"tf.test.is_gpu_available()","448daee3":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)","55299c86":"test_datagen = ImageDataGenerator(rescale=1.\/255)","572e4f4a":"train_generator = train_datagen.flow_from_directory(\n        '\/kaggle\/working\/covid19-detection-xray-dataset\/TrainData',\n        target_size=(224, 224),\n        batch_size=32,\n        class_mode='categorical')","709c49fb":"test_generator = test_datagen.flow_from_directory(\n        '\/kaggle\/working\/covid19-detection-xray-dataset\/ValData',\n        target_size=(224, 224),\n        batch_size=32,\n        class_mode='categorical')","99fae530":"import matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport cv2\n#covid = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/NonAugmentedTrain\/COVID-19\/0.jpeg\")\n#viral = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/NonAugmentedTrain\/ViralPneumonia\/0.jpeg\")\n#Normal = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/NonAugmentedTrain\/Normal\/0.jpeg\")\n#bacterial = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/NonAugmentedTrain\/BacterialPneumonia\/0.jpeg\")\n\ncovid = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/TrainData\/COVID-19\/_0_1465610.jpeg\")\nviral = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/TrainData\/ViralPneumonia\/_0_9503218.jpeg\")\nNormal = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/TrainData\/Normal\/_0_6256933.jpeg\")\nbacterial = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/TrainData\/BacterialPneumonia\/_0_4754176.jpeg\")\nplt.imshow(covid)\n\n","d78cdabc":"plt.imshow(Normal)","6df4280e":"plt.imshow(viral)","1d296496":"plt.imshow(bacterial)","797822b6":"model = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image 224x224 with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.5),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dense(4, activation='softmax')\n])","a4e6a9da":"model.summary()","76e69d55":"model.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n","dc82f0c2":"history = model.fit_generator(train_generator, validation_data = test_generator, steps_per_epoch=64,epochs = 40,  verbose = 1)","62b4b19c":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\n\nplt.show()","c4e4cbfa":"history.history","3a6a4e83":"model.save(\"covid-19.h5\")","d344c06a":"train_generator.class_indices","10551a19":"img = cv2.imread(\"\/kaggle\/input\/covid19-detection-xray-dataset\/NonAugmentedTrain\/Normal\/111.jpeg\")\n\nimg = cv2.resize(img,(224,224))\n\nimg = np.reshape(img,[1,224,224,3])\n\nclasses = model.predict_classes(img)\n\nprint (classes)","0448a86b":"count1,count2,count3,count4 = 0,0,0,0\ndir  = '\/kaggle\/input\/normal'\nfor file in os.listdir(dir):\n    path = os.path.join(dir,file)\n    #list = os.listdir(path) \n    #number_files = len(list)\n    img = cv2.imread(path)\n    img = cv2.resize(img,(224,224))\n    img = np.reshape(img,[1,224,224,3])\n    classes = model.predict_classes(img)\n    if(classes[0]==0):\n        count1 = count1 + 1\n    elif(classes[0]==1):\n        count2 = count2 + 1\n    elif(classes[0]==2):\n        count3 = count3 + 1\n    else:\n        count4 = count4 + 1\n        \n    #print (classes)\nsum1 = count1 + count2+ count3+ count4 \nprint (\"BacterialPneumonia : \" + str(count1) + \"\\nCOVID-19 : \" + str(count2) + \"\\nNormal : \" + str(count3) + \"\\nViralPneumonia : \"+ str(count4) + \"\\nTotal : \" + str(sum1))\n","f29c81b7":"\ndir = '\/kaggle\/input\/covid19-detection-xray-dataset\/ValData'\nprint(\"Total No of data present in each folder of NonAugmented\\n\")\nfor filename in os.listdir(dir):\n        path = os.path.join(dir, filename)\n        list = os.listdir(path) \n        number_files = len(list)\n        #counts_val = counts_val + [filename]*number_files\n        print (filename + \":\"+ str(number_files))","da9a1772":"import seaborn as sn\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report, confusion_matrix\nY_preds=model.predict_generator(test_generator)\ny_pred = np.argmax(Y_preds, axis=1)\nMatrix = confusion_matrix(test_generator.classes, y_pred)\nprint('Confusion Matrix')\nprint(Matrix)\nprint('Classification Report')\ntarget_names = ['BN', 'COVID-19', 'Normal', 'VN']\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))\n\n\n","fc9d4835":"df_cm = pd.DataFrame(Matrix, target_names, target_names)\nsn.set(font_scale=1.4) # for label size\nsn.heatmap(df_cm, annot=True, annot_kws={\"size\": 16}) # font size\n\nplt.show()","57dd19ab":"Import tensorflow","91f02c2f":"***Copy Files in Kaggle working directory***","538f6014":"Count No of images present in each folder","c045d427":"Remove Unused folder"}}