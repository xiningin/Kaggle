{"cell_type":{"41e84fe3":"code","71c3fc16":"code","3de825aa":"code","2156d03f":"code","0a31a653":"code","8ee80036":"code","aeec66ff":"code","dbc5f946":"code","421abef6":"code","2f3cfac4":"code","354d9717":"code","a1173ac3":"code","c2871972":"code","e1898ad9":"code","7d317e03":"code","0a640920":"code","9c14b28a":"code","e41b726d":"code","6a8f1bec":"code","5955e7ce":"code","6f665441":"code","5a22af88":"code","b70ae7e2":"code","487e50a6":"code","32d9e370":"code","f25e29b7":"code","c27a0315":"code","7bcfaed3":"code","e9cd0465":"code","8137f90d":"code","8314cd3a":"code","af23ba35":"code","b801a5d2":"code","f33d520b":"code","7e556bf9":"code","170bc696":"code","72ab6f23":"code","f0ee4db6":"code","2074de0e":"code","8ef8aeb6":"code","280cb18f":"code","195b82e8":"code","bd92f131":"code","561d017d":"code","388ba6b2":"code","906fe88a":"code","68eb3b4a":"code","4b1c963d":"code","35a415de":"code","cd8b9ec5":"code","ec9ed9ae":"code","7c65e068":"code","6295786a":"code","63c0cdf8":"code","31691188":"code","9ea76fc7":"code","11e09a11":"code","d14f2995":"code","7d81e0ce":"code","950d5b7f":"code","65c2d287":"code","ad1c1f19":"code","72926b4b":"code","d9646f8a":"code","113c5179":"code","4afc959c":"code","c74e9da9":"code","1cffdd04":"code","aaad2022":"code","48747de4":"code","4281c44e":"code","97439665":"code","f1c47878":"code","2285f120":"code","b9e2f41b":"code","83d58515":"code","743eabbe":"code","bac89dc5":"code","9b579144":"code","fba9b411":"code","b00c13ff":"markdown","2aa63f33":"markdown","532257b2":"markdown","ea1c5dec":"markdown","c836a9fe":"markdown","428ed2eb":"markdown","a72f9d32":"markdown","9f99cf59":"markdown","f6a0eb8a":"markdown","ac86a272":"markdown","94bec35a":"markdown","03422d6d":"markdown","3dfee4da":"markdown","1acdc1a6":"markdown","43155426":"markdown","4cd3c20a":"markdown","bb76ab24":"markdown","78eff95e":"markdown","256ff144":"markdown","00b03e48":"markdown","4f1474f7":"markdown","f10ecb21":"markdown","46374c6b":"markdown","c38273eb":"markdown","5c7dbe94":"markdown","b490df82":"markdown","7ae92008":"markdown","7279947e":"markdown","f5da7827":"markdown","55c727d3":"markdown","f7f5c6be":"markdown","bcf0f95d":"markdown","62418d0d":"markdown","eb1eb01d":"markdown","54ffa68e":"markdown","266125c3":"markdown","a151a14a":"markdown","57c890e1":"markdown","8f043d5b":"markdown","45cf74dc":"markdown","7c9fde2c":"markdown","c840767f":"markdown","891ff32b":"markdown","55aa512a":"markdown"},"source":{"41e84fe3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","71c3fc16":"import warnings\nwarnings.filterwarnings(\"ignore\")","3de825aa":"# how many missing values in train\ndef show_missing(column):\n    print('Column name: ',column)\n    print('Number of values: {}'.format(train[column].count()))\n    print('Number of missing values: {}'.format(train.shape[0] - train[column].count()))","2156d03f":"train = pd.read_csv(r'..\/input\/titanic\/train.csv')","0a31a653":"train.head()","8ee80036":"train.shape","aeec66ff":"train.info()","dbc5f946":"# columns with gaps\nempty_columns_train = train.columns[[ind for ind,x in enumerate(train.isnull().any()) if x]]","421abef6":"count_empty_columns_train = np.sum(train[empty_columns_train].isnull())","2f3cfac4":"plt.figure(figsize=(15,10))\nploting = sns.barplot(x = empty_columns_train, y=count_empty_columns_train.values)\nplt.xticks(rotation=30)","354d9717":"sns.pairplot(train, hue = 'Survived')","a1173ac3":"test = pd.read_csv(r'..\/input\/titanic\/test.csv')","c2871972":"test.head()","e1898ad9":"test.shape","7d317e03":"test.info()","0a640920":"empty_columns_test = test.columns[[ind for ind,x in enumerate(test.isnull().any()) if x]]","9c14b28a":"count_empty_columns_test = np.sum(test[empty_columns_test].isnull())","e41b726d":"plt.figure(figsize=(15,10))\nploting = sns.barplot(x = empty_columns_test, y = count_empty_columns_test.values)\nplt.xticks(rotation=30)","6a8f1bec":"y_train = train[['Survived']] # Labels\nX_train_num = train.select_dtypes(include=np.number) # Numerical data\nX_train_num = X_train_num.drop('Survived',axis = 1)\nX_train_cat = train.select_dtypes(exclude=np.number) # Categories data","5955e7ce":"X_train_num.describe()","6f665441":"sns.heatmap(X_train_num.corr(), annot=True)","5a22af88":"X_train_cat.describe()","b70ae7e2":"sns.countplot(x='Survived', data=y_train)\n\ny_train.value_counts(normalize=True)*100","487e50a6":"X_train_num.head()","32d9e370":"sns.countplot(x='Pclass',hue='Survived', data=train)","f25e29b7":"show_missing('Pclass')","c27a0315":"plt.figure(figsize=(15,7))\nplt.subplot(2,2,1)\nsns.distplot(train[train['Survived']==0]['Age'])\nplt.title('Not survived distibution')\n\nplt.subplot(2,2,2)\nsns.distplot(train[train['Survived']==1]['Age'])\nplt.title('Survived distibution')\n\nplt.subplot(2,2,3)\nsns.distplot(train[train['Survived']==0]['Age'], label ='Not survived')\nsns.distplot(train[train['Survived']==1]['Age'], label ='Survived')\nplt.legend()\nplt.title('Survived distibution')","7bcfaed3":"show_missing('Age')","e9cd0465":"sns.countplot(x='SibSp',hue='Survived', data=train)\nplt.legend(loc='upper right')","8137f90d":"show_missing('SibSp')","8314cd3a":"sns.countplot(x='Parch',hue='Survived', data=train)\nplt.legend(loc='upper right')","af23ba35":"show_missing('Parch')","b801a5d2":"sns.distplot(train[train['Survived'] == 0]['Fare'], label=0)\nsns.distplot(train[train['Survived'] == 1]['Fare'], label=1)\nplt.legend()","f33d520b":"show_missing('Fare')","7e556bf9":"X_train_cat.head()","170bc696":"show_missing('Name')","72ab6f23":"sns.countplot(x='Sex',hue='Survived', data=train)","f0ee4db6":"show_missing('Sex')","2074de0e":"show_missing('Ticket')","8ef8aeb6":"train['Cabin'].head()","280cb18f":"show_missing('Cabin')","195b82e8":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=train)","bd92f131":"show_missing('Embarked')","561d017d":"train = pd.read_csv(r'..\/input\/titanic\/train.csv')\ntest = pd.read_csv(r'..\/input\/titanic\/test.csv')","388ba6b2":"y = train['Survived']\ntrain = train.drop('Survived', axis = 1)","906fe88a":"test.shape","68eb3b4a":"test.describe()","4b1c963d":"train.describe()","35a415de":"# Fare\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())","cd8b9ec5":"# Age\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())","ec9ed9ae":"train = train.drop('PassengerId', axis = 1)\ntest_pass_id = test['PassengerId']\ntest = test.drop('PassengerId', axis = 1)","7c65e068":"def family_size(size):\n    if size == 0:\n        return \"Has_not_family\"\n    elif size <= 3:\n        return \"Has_family\"\n    else:\n        return \"Has_big_family\"","6295786a":"train['SibSp&Parch'] = train['SibSp']+train['Parch']\ntrain = train.drop('SibSp', axis = 1)\ntrain = train.drop('Parch', axis = 1)","63c0cdf8":"test['SibSp&Parch'] = test['SibSp']+test['Parch']\ntest = test.drop('SibSp', axis = 1)\ntest = test.drop('Parch', axis = 1)","31691188":"train[\"SibSp&Parch\"] = train[\"SibSp&Parch\"].apply(family_size)\ntest[\"SibSp&Parch\"] = test[\"SibSp&Parch\"].apply(family_size)","9ea76fc7":"cat_columns = train.select_dtypes(exclude=np.number).columns","11e09a11":"cat_columns","d14f2995":"train[cat_columns].describe()","7d81e0ce":"test[cat_columns].describe()","950d5b7f":"# Del column Cabin\ntrain = train.drop('Cabin', axis = 1)\ntest = test.drop('Cabin',axis = 1)","65c2d287":"# Del column Name\ntrain = train.drop('Name', axis = 1)\ntest = test.drop('Name',axis = 1)","ad1c1f19":"# Del column Ticket\ntrain = train.drop('Ticket',axis = 1)\ntest = test.drop('Ticket',axis = 1)","72926b4b":"# Del rows where column Embarked is empty\ny = y.drop(train.loc[train['Embarked'].isnull()].index, axis = 0)\ntrain = train.drop(train.loc[train['Embarked'].isnull()].index, axis = 0)","d9646f8a":"# Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntrain[\"Sex\"] = le.fit_transform(train[[\"Sex\"]].values.ravel()) # ['female', 'male'] -> [0, 1]\ntest[\"Sex\"] = le.transform(test[[\"Sex\"]].values.ravel())","113c5179":"# Encoding\ntrain = pd.get_dummies(columns=[\"Embarked\",\"SibSp&Parch\"], data=train, drop_first=True)\ntest = pd.get_dummies(columns=[\"Embarked\",\"SibSp&Parch\"], data=test, drop_first=True)","4afc959c":"train.head()","c74e9da9":"test.head()","1cffdd04":"temp_train = train.copy()\ntemp_train['Survived'] = y","aaad2022":"sns.pairplot(temp_train)","48747de4":"from sklearn.model_selection import cross_val_score, GridSearchCV, StratifiedShuffleSplit\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score","4281c44e":"rf = RandomForestClassifier()\n\nparams = {'n_estimators': [300, 350, 400],\n          'max_depth': [3,4,5,7,10],\n          'criterion':['gini'],\n          'min_samples_leaf' : [1, 3, 5],\n          'max_features':['auto'],\n          'min_samples_split': [5, 10, 15],\n          'max_leaf_nodes':[3,5],\n          }\n\nclf = GridSearchCV(estimator=rf ,param_grid=params, cv=10, n_jobs=-1)","97439665":"clf.fit(train, y)","f1c47878":"print(clf.best_estimator_)\nprint(clf.best_score_)","2285f120":"rf_best = clf.best_estimator_\n\ny_pred = clf.predict(test)","b9e2f41b":"importance = pd.Series(rf_best.feature_importances_,index=train.columns).sort_values(ascending=False)\n\nsns.barplot(x=importance, y=importance.index)\nplt.xlabel('Importance')\nplt.ylabel('Feature')\nplt.title(\"Important Features\")\nplt.show()","83d58515":"rf_clf = RandomForestClassifier(max_depth=3, max_leaf_nodes=5, min_samples_split=15,\n                       n_estimators=350, random_state=34)","743eabbe":"rf_clf.fit(train, y)","bac89dc5":"ans = rf_clf.predict(test)","9b579144":"def save_ans(ans, pasanger_id, name_alg):\n    submission = pd.DataFrame({'PassengerId':pasanger_id,'Survived':ans})\n    submission.Survived = submission.Survived.astype(int) # \u043d\u0435 \u043d\u0430\u0434\u043e, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435\n    print(submission.shape) \n    filename = r'.\/{}.csv'.format(name_alg)\n    submission.to_csv(filename,index=False)\n    print('Saved file: ' + filename)","fba9b411":"save_ans(ans, test_pass_id, 'submission')","b00c13ff":"## 2.1 Numerical feature in groups","2aa63f33":"### 2.2.4 Cabin","532257b2":"+ There are no missing values.","ea1c5dec":"+ There no missing values.\n+ Difficult to interpret.","c836a9fe":"## 2.2 Categorical features","428ed2eb":"## 3.2 Categorical features","a72f9d32":"### 2.1.4 Parch","9f99cf59":"# 2. Data analysis of missing values","f6a0eb8a":"+ The relationship between Sex and Survived is clearly visible.\n+ There are no missing values.","ac86a272":"### 2.1.1 Pclass","94bec35a":"# 4. Model","03422d6d":"## 1.1 Numerical features","3dfee4da":"+ Since the distributions have a different form and may belong to different distribution families, this feature should be left.\n+ The missing 177 values.","1acdc1a6":"## 1.2 Categorical features","43155426":"## 3.1 Numerical features","4cd3c20a":"# 1. Downloading and exploring data","bb76ab24":"# 0. Functions","78eff95e":"+ There are no missing values.","256ff144":"### 2.1.2 Age","00b03e48":"### 2.2.5 Embarked","4f1474f7":"# 3. Processing of missing values","f10ecb21":"+ The presented features are very mixed and it will be difficult to use them for the model","46374c6b":"+ There are no highly correlated features","c38273eb":"### 2.1.5 Fare","5c7dbe94":"## What are the most important features\n\nThis can be useful when further improving the model.","b490df82":"*Hi, everybody.*\n\nThis is my implementation for predicting survival in titanic challenge. With using random forest.\n\nI would like to know your opinion on this notebook. How i can improve it or fix some bugs?\n\nP.S. I am not a native English speaker. If you see an error or something is not clear, write in the comments, it will help me a lot.\n\nThank you in advance.","7ae92008":"## Create the model with parametrs, get from GridSearchCV","7279947e":"+ Too many missing values","f5da7827":"+ As expected, the 1st class is more likely to survive, while the 3rd has a significantly lower probability.\n+ There are no missing values.","55c727d3":"+ If look at the Survived column, it will become clear that linear models will not be effective. Because I will use a random forest","f7f5c6be":"### 2.2.2 Sex","bcf0f95d":"### 2.1.3 SibSp","62418d0d":"## 3.4 Visualization","eb1eb01d":"## 1.3 Class balance (Survived)\n\nBased on the logical meaning of the task, just let's see. We will not perform balancing.","54ffa68e":"## 4.1 Random forest","266125c3":"### 2.2.3 Ticket","a151a14a":"The number of family members affects the target attribute. In the future, it is worth combining SibSp and Parch into one attribute and breaking it into groups:\n1. has big family(3+)\n1. has family(1-3)\n1. no family(0)","57c890e1":"+ Since the port of departure with the C, Survived is higher, leave this sign","8f043d5b":"![image.png](attachment:image.png)","45cf74dc":"+ There are missing only in Age","7c9fde2c":"### 2.2.1 Name","c840767f":"+ This feature is unlikely to affect the target\n+ There are no missing values.","891ff32b":"The attribute will not be considered:\n+ PassangerId -it can not affect the target attribute, it will be useful only for predicting.","55aa512a":"+ Many values are missing in the Cabin feature. Most likely it should be excluded.\n+ The Embedded attribute is missing 2 values.Will exclude rows with a missing value, or declare the omission as another attribute value."}}