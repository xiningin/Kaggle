{"cell_type":{"d7174bbb":"code","ff2f2948":"code","dc7a63e8":"code","708c959b":"code","07efac22":"code","2dee09a8":"code","b8b3deac":"code","c0c164d1":"code","05480e75":"code","4b6897cb":"code","dbe0c652":"code","80f03ddb":"code","bb8c2530":"code","0da26b7d":"code","b18109dd":"code","7ea3232a":"code","36bb717b":"code","e6628eee":"code","3b30be18":"code","88bbb542":"code","b65b064e":"code","6e00a719":"code","747a286d":"code","0cec55ed":"code","ae3026c6":"code","89041369":"code","454f6707":"code","bcd6df44":"code","deab89f1":"code","1bd3a50e":"code","36f8e744":"code","78c07386":"code","88846503":"code","3cc15fa7":"code","8062d1cf":"code","1dbfedc9":"code","d1058c16":"code","cea2e7cd":"code","c2d23948":"code","d63c51de":"code","b9607d8d":"code","04bb0050":"code","8ef83a2e":"code","343f48f0":"code","84efb35d":"code","e83bcaf9":"code","9524d9b0":"code","d696a353":"code","b16d0977":"code","29706ca8":"code","4b93ff2f":"code","9b407dfc":"code","e7fe6798":"code","0e0d025f":"code","cba1e7f3":"code","d96eff16":"code","65803b07":"code","17f5da04":"code","6e39f2c8":"code","13f5d4cb":"code","6fc8dc61":"code","43dc4f9a":"code","a347740f":"code","b7fbaf7d":"code","9555b5b6":"code","ca23d1db":"code","b8ed57d0":"code","7e2de6fb":"code","ab51b58d":"code","6815e500":"code","4633a809":"code","263639e0":"code","6423cc8c":"code","21269fa3":"code","506e931c":"code","bf514447":"code","3ec0b739":"code","a2f394c2":"code","01cee3a0":"code","ce0a514f":"code","01708720":"code","208c3458":"markdown","9e163485":"markdown","0f9dc9df":"markdown","d40a5b2c":"markdown","9bf44a73":"markdown","26d8b3db":"markdown","e173a5de":"markdown","65399677":"markdown","acca970f":"markdown","9121c601":"markdown","6a6dee92":"markdown","f0b867e2":"markdown","fe72dac6":"markdown","0908b0d0":"markdown","c711b3d5":"markdown","907102d8":"markdown","8e1d71ae":"markdown","84df3f6f":"markdown","69e7e9eb":"markdown","3507d86d":"markdown","c548c13e":"markdown","01f01228":"markdown","059175ee":"markdown","2049fa6b":"markdown","6c45fa19":"markdown","fa471e81":"markdown","0df81694":"markdown","0ca62249":"markdown","26b4c6a8":"markdown","a81c8cb1":"markdown","8f4e2cf9":"markdown","043bd7e4":"markdown","77f99ed8":"markdown","1300a5cd":"markdown","0ddf0d77":"markdown","e10a0543":"markdown"},"source":{"d7174bbb":"import pandas as pd\nimport numpy as np\nimport time\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2)\n\nimport warnings \nwarnings.filterwarnings('ignore')\nimport os","ff2f2948":"from kaggle.competitions import twosigmanews\n# You can only call make_env() once, so don't lose it!\nenv = twosigmanews.make_env()\nprint('Done!')","dc7a63e8":"(market_train_df, news_train_df) = env.get_training_data()","708c959b":"print(\"In total: \", market_train_df.shape)","07efac22":"market_train_df.head()","2dee09a8":"print(\"In total: \", news_train_df.shape)","b8b3deac":"news_train_df.head()","c0c164d1":"days = env.get_prediction_days()\n(market_obs_df, news_obs_df, predictions_template_df) = next(days)","05480e75":"print(\"In total: \", market_obs_df.shape)","4b6897cb":"market_obs_df.head()","dbe0c652":"print(\"In total: \", news_obs_df.shape)","80f03ddb":"news_obs_df.head()","bb8c2530":"predictions_template_df.head()","0da26b7d":"print(\"In market_train_df: \", market_train_df.shape);print(\"In market_obs_df: \", market_obs_df.shape);\nprint(\"In news_train_df: \", news_train_df.shape);print(\"In news_obs_df: \", news_obs_df.shape)","b18109dd":"percent = (100 * market_train_df.isnull().sum() \/ market_train_df.shape[0]).sort_values(ascending=False)\npercent.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Value Percent(%)\", fontsize = 20)\nplt.title(\"Total Missing Value by market_obs_df\", fontsize = 20)","7ea3232a":"percent1 = (100 * market_obs_df.isnull().sum() \/ market_obs_df.shape[0]).sort_values(ascending=False)\npercent1.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Value Percent(%)\", fontsize = 20)\nplt.title(\"Total Missing Value by market_obs_df\", fontsize = 20)","36bb717b":"news_train_df['headlineTag'].unique()[0:5]","e6628eee":"# '' convert to NA\nfor i in news_train_df.columns.values.tolist():\n    # Does NaN means no numbers, can '' be replaced with nan? I do not know this part.\n    news_train_df[i] = news_train_df[i].replace('', np.nan)  \nnews_train_df['headlineTag'].unique()[0:5]\n# I think it would be faster if you just replace object and categorical variables(not int,float). How do I fix the code?","3b30be18":"percent = (100 * news_train_df.isnull().sum() \/ news_train_df.shape[0]).sort_values(ascending=False)\npercent.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Value Percent(%)\", fontsize = 20)\nplt.title(\"Total Missing Value by news_train_df\", fontsize = 20)","88bbb542":"# '' convert to NA\nfor i in news_obs_df.columns.values.tolist():\n    # Does NaN means no numbers, can '' be replaced with nan? I do not know this part.\n    news_obs_df[i] = news_obs_df[i].replace('', np.nan)","b65b064e":"percent1 = (100 * news_obs_df.isnull().sum() \/ news_obs_df.shape[0]).sort_values(ascending=False)\npercent1.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Value Percent(%)\", fontsize = 20)\nplt.title(\"Total Missing Value by news_obs_df\", fontsize = 20)","6e00a719":"percent2 = (market_train_df.nunique()).sort_values(ascending=False)\npercent2.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Unique Number\", fontsize = 20)\nplt.title(\"Unique Number by market_train_df\", fontsize = 20)","747a286d":"market_train_df.nunique()","0cec55ed":"percent2 = (market_obs_df.nunique()).sort_values(ascending=False)\npercent2.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Unique Number\", fontsize = 20)\nplt.title(\"Unique Number by market_obs_df\", fontsize = 20)","ae3026c6":"market_obs_df.nunique()","89041369":"percent2 = (news_train_df.nunique()).sort_values(ascending=False)\npercent2.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Unique Number\", fontsize = 20)\nplt.title(\"Unique Number by news_train_df\", fontsize = 20)","454f6707":"news_train_df.nunique()","bcd6df44":"percent2 = (news_obs_df.nunique()).sort_values(ascending=False)\npercent2.plot(kind=\"bar\", figsize = (20,10), fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Unique Number\", fontsize = 20)\nplt.title(\"Unique Number by news_obs_df\", fontsize = 20)","deab89f1":"news_obs_df.nunique()","1bd3a50e":"features_object = [col for col in market_train_df.columns if market_train_df[col].dtype == 'object']\nfeatures_object","36f8e744":"market_train_df['assetCode'].value_counts()","78c07386":"features_object = [col for col in news_train_df.columns if news_train_df[col].dtype == 'object']\nfeatures_object","88846503":"news_train_df['sourceId'].value_counts()","3cc15fa7":"news_train_df['headline'].value_counts()","8062d1cf":"news_train_df['headlineTag'].value_counts()","1dbfedc9":"news_train_df['provider'].value_counts()","d1058c16":"news_train_df['subjects'].value_counts()","cea2e7cd":"news_train_df['audiences'].value_counts()","c2d23948":"(market_train_df['universe']).describe()","d63c51de":"market_train_df['universe'].plot.hist(title = 'universe Histogram');\nplt.xlabel('universe');","b9607d8d":"from sklearn.feature_extraction.text import CountVectorizer\n\nnews_train_df.head()","04bb0050":"list(news_train_df['headline'])[0:5]","8ef83a2e":"# CountVectorizer() env\nnews_train_df['headline'] = news_train_df['headline'].replace(np.nan, '')\nnews_train_df['headlineTag'] = news_train_df['headlineTag'].replace(np.nan, '')","343f48f0":"vect = CountVectorizer()\nvect.fit(list(news_train_df['headline']))","84efb35d":"list((vect.vocabulary_).items())[0:10]","e83bcaf9":"vect.vocabulary_ = sorted(vect.vocabulary_.items(), key=lambda x: x[1], reverse=True)","9524d9b0":"(vect.vocabulary_)[0:10]","d696a353":"vect1 = CountVectorizer(ngram_range=(2, 2))\nvect1.fit(list(news_train_df['headline']))","b16d0977":"list((vect1.vocabulary_).items())[0:10]","29706ca8":"vect1.vocabulary_ = sorted(vect1.vocabulary_.items(), key=lambda x: x[1], reverse=True)","4b93ff2f":"(vect1.vocabulary_)[0:10]","9b407dfc":"market_train_df.time.head()","e7fe6798":"market_train_df.time.tail()","0e0d025f":"market_obs_df.time.head()","cba1e7f3":"market_obs_df.time.tail()","d96eff16":"def change_date_to_datetime(x):\n    str_time = str(x)\n    date = '{}-{}-{}'.format(str_time[:4], str_time[5:7], str_time[8:10])\n    return date\n\nmarket_train_df['date'] = market_train_df['time'].apply(change_date_to_datetime)","65803b07":"def add_time_feature(data):\n    data['date'] = pd.to_datetime(data['date'])\n    data['Year'] = data.date.dt.year\n    data['Month'] = data.date.dt.month\n    data['Day'] = data.date.dt.day\n    data['WeekOfYear'] = data.date.dt.weekofyear\n    return data\n\nmarket_train_df = add_time_feature(market_train_df)","17f5da04":"best_asset_open = market_train_df.groupby(\"assetCode\")[\"open\"].count().to_frame().sort_values(by=['open'],ascending= False)\nbest_asset_open = best_asset_open.sort_values(by=['open'])\nlargest_by_open = list(best_asset_open.nlargest(10, ['open']).index)\n\nbest_asset_close = market_train_df.groupby(\"assetCode\")[\"close\"].count().to_frame().sort_values(by=['close'],ascending= False)\nbest_asset_close = best_asset_close.sort_values(by=['close'])\nlargest_by_close = list(best_asset_close.nlargest(10, ['close']).index)\n\nbest_asset_volume = market_train_df.groupby(\"assetCode\")[\"volume\"].count().to_frame().sort_values(by=['volume'],ascending= False)\nbest_asset_volume = best_asset_volume.sort_values(by=['volume'])\nlargest_by_volume = list(best_asset_volume.nlargest(10, ['volume']).index)","6e39f2c8":"print(largest_by_open)\nprint(largest_by_close)\nprint(largest_by_volume)","13f5d4cb":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls","6fc8dc61":"asset1Code = 'CAH.N'\nasset1_df = market_train_df[(market_train_df['assetCode'] == asset1Code) & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n\nasset1_df['high'] = asset1_df['open']\nasset1_df['low'] = asset1_df['close']\n\nfor ind, row in asset1_df.iterrows():\n    if row['close'] > row['open']:\n        asset1_df.loc[ind, 'high'] = row['close']\n        asset1_df.loc[ind, 'low'] = row['open']\n\ntrace1 = go.Candlestick(\n    x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n    open = asset1_df['open'].values,\n    low = asset1_df['low'].values,\n    high = asset1_df['high'].values,\n    close = asset1_df['close'].values\n)\n\nlayout = dict(title = \"Candlestick chart for {}\".format(asset1Code),\n              xaxis = dict(\n                  title = 'Month',\n                  rangeslider = dict(visible = False)\n              ),\n              yaxis = dict(title = 'Price (USD)')\n             )\ndata = [trace1]\n\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","43dc4f9a":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'CAH.N') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['open'].values\n    )\n\nlayout = dict(title = \"Open prices of CAH.N\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","a347740f":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'CAH.N') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['close'].values\n    )\n\nlayout = dict(title = \"Closing prices of CAH.N\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","b7fbaf7d":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'CAH.N') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['volume'].values\n    )\n\nlayout = dict(title = \"Volume of CAH.N\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","9555b5b6":"asset1Code = 'AAPL.O'\nasset1_df = market_train_df[(market_train_df['assetCode'] == asset1Code) & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n\nasset1_df['high'] = asset1_df['open']\nasset1_df['low'] = asset1_df['close']\n\nfor ind, row in asset1_df.iterrows():\n    if row['close'] > row['open']:\n        asset1_df.loc[ind, 'high'] = row['close']\n        asset1_df.loc[ind, 'low'] = row['open']\n\ntrace1 = go.Candlestick(\n    x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n    open = asset1_df['open'].values,\n    low = asset1_df['low'].values,\n    high = asset1_df['high'].values,\n    close = asset1_df['close'].values\n)\n\nlayout = dict(title = \"Candlestick chart for {}\".format(asset1Code),\n              xaxis = dict(\n                  title = 'Month',\n                  rangeslider = dict(visible = False)\n              ),\n              yaxis = dict(title = 'Price (USD)')\n             )\ndata = [trace1]\n\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","ca23d1db":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'AAPL.O') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['open'].values\n    )\n\nlayout = dict(title = \"Open prices of AAPL.O\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","b8ed57d0":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'AAPL.O') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['close'].values\n    )\n\nlayout = dict(title = \"Closing prices of AAPL.O\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","7e2de6fb":"asset1_df = market_train_df[(market_train_df['assetCode'] == 'AAPL.O') & (market_train_df['time'] > '2015-01-01') & (market_train_df['time'] < '2017-01-01')]\n    # Create a trace\ntrace1 = go.Scatter(\n        x = asset1_df['time'].dt.strftime(date_format='%Y-%m-%d').values,\n        y = asset1_df['volume'].values\n    )\n\nlayout = dict(title = \"Volume of AAPL.O\",\n                  xaxis = dict(title = 'Month'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  )\ndata = [trace1]\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","ab51b58d":"# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns # advanced vizs\n%matplotlib inline\n\n# statistics\nfrom statsmodels.distributions.empirical_distribution import ECDF\n\n# time series analysis\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\n# prophet by Facebook\nfrom fbprophet import Prophet","6815e500":"sns.set(style = \"ticks\")# to format into seaborn \nc = '#386B7F' # basic color for plots\nplt.figure(figsize = (12, 6))\n\nplt.subplot(311)\ncdf = ECDF(market_train_df['volume'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel(''); plt.ylabel('ECDF');\n\n# plot second ECDF  \nplt.subplot(312)\ncdf = ECDF(market_train_df['open'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel('');plt.ylabel('ECDF');\n\n# plot second ECDF  \nplt.subplot(313)\ncdf = ECDF(market_train_df['close'])\nplt.plot(cdf.x, cdf.y, label = \"statmodels\", color = c);\nplt.xlabel('');plt.ylabel('ECDF');","4633a809":"market_train_df[(market_train_df.assetCode=='A.N')].head()","263639e0":"voluem_an = np.transpose(pd.DataFrame([(market_train_df[(market_train_df.assetCode=='A.N')]).set_index('date')['volume']]))","6423cc8c":"voluem_an = np.transpose(pd.DataFrame([(market_train_df[(market_train_df.assetCode=='A.N')]).set_index('date')['volume']]))\nopen_an = np.transpose(pd.DataFrame([(market_train_df[(market_train_df.assetCode=='A.N')]).set_index('date')['open']]))\nclose_an = np.transpose(pd.DataFrame([(market_train_df[(market_train_df.assetCode=='A.N')]).set_index('date')['close']]))\n\nf, (ax1, ax2, ax3) = plt.subplots(3, figsize = (12, 13))\n\n# store types\nvoluem_an.resample('W').sum().plot(color = c, ax = ax1)\nopen_an.resample('W').sum().plot(color = c, ax = ax2)\nclose_an.resample('W').sum().plot(color = c, ax = ax3)","21269fa3":"f, (ax1, ax2, ax3) = plt.subplots(3, figsize = (12, 13))\n\n# monthly\ndecomposition_a = seasonal_decompose(voluem_an, model = 'additive', freq = 365)\ndecomposition_a.trend.plot(color = c, ax = ax1)\n\ndecomposition_b = seasonal_decompose(open_an, model = 'additive', freq = 365)\ndecomposition_b.trend.plot(color = c, ax = ax2)\n\ndecomposition_c = seasonal_decompose(close_an, model = 'additive', freq = 365)\ndecomposition_c.trend.plot(color = c, ax = ax3)","506e931c":"# figure for subplots\nplt.figure(figsize = (12, 8))\n\n# acf and pacf for volume\nplt.subplot(321); plot_acf(voluem_an, lags = 50, ax = plt.gca(), color = c)\nplt.subplot(322); plot_pacf(voluem_an, lags = 50, ax = plt.gca(), color = c)\n\n# acf and pacf for open\nplt.subplot(323); plot_acf(open_an, lags = 50, ax = plt.gca(), color = c)\nplt.subplot(324); plot_pacf(open_an, lags = 50, ax = plt.gca(), color = c)\n\n# acf and pacf for close\nplt.subplot(325); plot_acf(close_an, lags = 50, ax = plt.gca(), color = c)\nplt.subplot(326); plot_pacf(close_an, lags = 50, ax = plt.gca(), color = c)\n\nplt.show()","bf514447":"df = market_train_df[(market_train_df[\"assetCode\"] == 'A.N')]\n\nvolume = df.loc[:, ['date', 'volume']]\n\n# reverse to the order: from 2013 to 2015\nvolume = volume.sort_index(ascending = True)\n\n# to datetime64\nvolume['date'] = pd.DatetimeIndex(volume['date'])\nvolume.dtypes\n\n# from the prophet documentation every variables should have specific names\nvolume = volume.rename(columns = {'date': 'ds',\n                                'volume': 'y'})\nvolume.head()","3ec0b739":"# plot daily sales\nax = volume.set_index('ds').plot(figsize = (12, 4), color = c)\nax.set_ylabel('Daily volume of A.N')\nax.set_xlabel('Date')\nplt.show()","a2f394c2":"# set the uncertainty interval to 95% (the Prophet default is 80%)\nmy_model = Prophet(interval_width = 0.95)\nmy_model.fit(volume)\n\n# dataframe that extends into future 6 weeks \nfuture_dates = my_model.make_future_dataframe(periods = 1)\n\nprint(\"First day to forecast.\")\nfuture_dates\n\n# predictions\nforecast = my_model.predict(future_dates)\n\n# preditions for last week\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]","01cee3a0":"fc = forecast[['ds', 'yhat']].rename(columns = {'Date': 'ds', 'Forecast': 'yhat'})","ce0a514f":"my_model.plot(forecast);","01708720":"my_model.plot_components(forecast);","208c3458":"# 4. Time-Series Analysis some Stock","9e163485":"![](https:\/\/choco9966.github.io\/Team-EDA\/image\/TwoSigma_Logo_RGB.jpg)","0f9dc9df":"## 2.2 Load train_data","d40a5b2c":"The types of missing values are the same, but the percentage is slightly different.\n- **market_train_df** : { returnsOpenPrevMktres10 : 2.284680 , returnsClosePrevMktres10 : 2.283599, returnsOpenPrevMktres1 : 0.392540 , returnsClosePrevMktres1 : 0.392344 }\n\n- **market_obs_df** : { returnsClosePrevMktres10 : 2.029622, returnsOpenPrevMktres10 : 2.029622, returnsOpenPrevMktres1 : 0.658256, returnsClosePrevMktres1 : 0.658256 }","9bf44a73":"- `headlineTag`, both the train and the test are close to 70% missing. \n- `headline` has some missing values, but not the test.","26d8b3db":"## 2.3 Load test_data","e173a5de":"## headline\n- ### CountVectorizer","65399677":"## 3.3 Object features","acca970f":"# 1. Introduction\n\nHere is an Exploratory Data Analysis for the Two Sigma: Using News to Predict Stock Movements \nwithin the Python environment. In this competition, you must predict a signed confidence value, y^ti\u2208[\u22121,1] , which is multiplied by the market-adjusted return of a given `assetCode` over a ten day window. If you expect a stock to have a large positive return--compared to the broad market--over the next ten days, you might assign it a large, positive `confidenceValue` (near 1.0). If you expect a stock to have a negative return, you might assign it a large, negative `confidenceValue` (near -1.0). If unsure, you might assign it a value near zero.\n\nFor each day in the evaluation time period, we calculate:\n\n$$x_{t} = \\sum_{i}\\hat y_{ti}r_{ti}u_{ti}$$\n\nwhere rti is the 10-day market-adjusted leading return for day t for instrument i, and uti is a 0\/1 `universe` variable (see the data description for details) that controls whether a particular asset is included in scoring on a particular day.\n\nYour submission score is then calculated as the mean divided by the standard deviation of your daily xt values:\n\n$$score = \\frac{\\bar x_{t}}{\\sigma(x_{t})}.$$\n\nIf the standard deviation of predictions is 0, the score is defined as 0.\n\n**Note :** According to the discussion below, it seems that R does not work yet.   \nhttps:\/\/www.kaggle.com\/c\/two-sigma-financial-news\/discussion\/66831","9121c601":"## 3.5 Numeric features\n### Market\n- universe(float64) - a boolean indicating whether or not the instrument on that day will be included in scoring. This value is not provided outside of the training data time period. The trading universe on a given date is the set of instruments that are avilable for trading (the scoring function will not consider instruments that are not in the trading universe). The trading universe changes daily.\n- volume(float64) - trading volume in shares for the day\n- close(float64) - the close price for the day (not adjusted for splits or dividends)\n- open(float64) - the open price for the day (not adjusted for splits or dividends)\n- returnsClosePrevRaw1(float64) - see returns explanation above\n- returnsOpenPrevRaw1(float64) - see returns explanation above\n- returnsClosePrevMktres1(float64) - see returns explanation above\n- returnsOpenPrevMktres1(float64) - see returns explanation above\n- returnsClosePrevRaw10(float64) - see returns explanation above\n- returnsOpenPrevRaw10(float64) - see returns explanation above\n- returnsClosePrevMktres10(float64) - see returns explanation above\n- returnsOpenPrevMktres10(float64) - see returns explanation above\n- returnsOpenNextMktres10(float64) - 10 day, market-residualized return. This is the target variable used in competition scoring. The market data has been filtered such that returnsOpenNextMktres10 is always not null.\n\n\n### News\n- urgency(int8) - differentiates story types (1: alert, 3: article)\n- takeSequence(int16) - the take sequence number of the news item, starting at 1. For a given story, alerts and articles have separate sequences.\n- bodySize(int32) - the size of the current version of the story body in characters\n- companyCount(int8) - the number of companies explicitly listed in the news item in the subjects field\n- sentenceCount(int16) - the total number of sentences in the news item. Can be used in conjunction with firstMentionSentence to determine the relative position of the first mention in the item.\n- wordCount(int32) - the total number of lexical tokens (words and punctuation) in the news item\n- firstMentionSentence(int16) - the first sentence, starting with the headline, in which the scored asset is mentioned.\n    -  1: headline\n    - 2: first sentence of the story body\n    - 3: second sentence of the body, etc\n    - 0: the asset being scored was not found in the news item's headline or body text. As a result, the entire news item's text (headline + body) will be used to determine the sentiment score.\n- relevance(float32) - a decimal number indicating the relevance of the news item to the asset. It ranges from 0 to 1. If the asset is mentioned in the headline, the relevance is set to 1. When the item is an alert (urgency == 1), relevance should be gauged by firstMentionSentence instead.\n- sentimentClass(int8) - indicates the predominant sentiment class for this news item with respect to the asset. The indicated class is the one with the highest probability.\n- sentimentNegative(float32) - probability that the sentiment of the news item was negative for the asset\n- sentimentNeutral(float32) - probability that the sentiment of the news item was neutral for the asset\n- sentimentPositive(float32) - probability that the sentiment of the news item was positive for the asset\n- sentimentWordCount(int32) - the number of lexical tokens in the sections of the item text that are deemed relevant to the asset. This can be used in conjunction with wordCount to determine the proportion of the news item discussing the asset.\n- noveltyCount12H(int16) - The 12 hour novelty of the content within a news item on a particular asset. It is calculated by comparing it with the asset-specific text over a cache of previous news items that contain the asset.\n- noveltyCount24H(int16) - same as above, but for 24 hours\n- noveltyCount3D(int16) - same as above, but for 3 days\n- noveltyCount5D(int16) - same as above, but for 5 days\n- noveltyCount7D(int16) - same as above, but for 7 days\n- volumeCounts12H(int16) - the 12 hour volume of news for each asset. A cache of previous news items is maintained and the number of news items that mention the asset within each of five historical periods is calculated.\n- volumeCounts24H(int16) - same as above, but for 24 hours\n- volumeCounts3D(int16) - same as above, but for 3 days\n- volumeCounts5D(int16) - same as above, but for 5 days\n- volumeCounts7D(int16) - same as above, but for 7 days","6a6dee92":"- headline(object) - the item's headline","f0b867e2":"- Top 10 open, close, volume same.\n- Top 10 assetName : \n*Cardinal Health Inc, Conagra Brands Inc, UnitedHealth Group Inc, Unilever PLC, Cameco Corp, Tim Participacoes SA, Universal Health Services Inc, \tTyson Foods Inc, CMS Energy Corp*\n","fe72dac6":"### Asset - Conagra Brands Inc, Apple Inc\nThe code that implements the candle chart refers to this kernel. (https:\/\/www.kaggle.com\/pestipeti\/simple-eda-two-sigma)","0908b0d0":"- ### n-gram","c711b3d5":"- NLP is the first time I'll study a little more and upload the kernel.","907102d8":"**Note :** I am still a student and there are many deficiencies. If there is a part that you think is insufficient or you think that you want to add, please give advice. Note that I will update the kernel. If this kernel is helpful, please upvote.\n","8e1d71ae":"# 2. Preparations\n## 2.1 Load libraries","84df3f6f":"### ECDF: empirical cumulative distribution function\n\nTo get the first impression about continious variables in the data we can plot ECDF.","69e7e9eb":"**train_df :** 2007-02-01 ~ 2016-12-30\n\n**test_df:** 2017-01-03","3507d86d":"### Top 10 Largest Assets code by Open, Close, Volume value","c548c13e":"- ### news","01f01228":"- assetCode(object) - a unique id of an asset","059175ee":"## 3.4 Categorical features\n### Market\n- assetName(category) - the name that corresponds to a group of assetCodes. These may be \"Unknown\" if the corresponding assetCode does not have any rows in the news data.\n\n### News\n- provider(category) - identifier for the organization which provided the news item (e.g. RTRS for Reuters News, BSW for Business Wire)\n- subjects(category) - topic codes and company identifiers that relate to this news item. Topic codes describe the news item's subject matter. These can cover asset classes, geographies, events, industries\/sectors, and other types.\n- audiences(category) - identifies which desktop news product(s) the news item belongs to. They are typically tailored to specific audiences. (e.g. \"M\" for Money International News Service and \"FB\" for French General News Service)\n- assetCodes(category) - list of assets mentioned in the item\n- assetName(category) - name of the asset","2049fa6b":"In the data file description,\n`About this file This is just a sample of the market data. You should not use this data directly.\nInstead, call env.get_training_data() from the twosigmanews package to get the full training sets in your Kernel.`\n\n**So you download directly below**. I using DJ sterling kernel(https:\/\/www.kaggle.com\/dster\/two-sigma-news-official-getting-started-kernel) thnaks ","6c45fa19":"### Autocorrelaion","fa471e81":"### Time Series Analysis and Forecasting with Prophet\n\nThe Core Data Science team at Facebook recently published a new procedure for forecasting time series data called Prophet. It is based on an additive model where non-linear trends are fit with yearly and weekly seasonality, plus holidays. It enables performing automated forecasting which are already implemented in R at scale in Python 3.","0df81694":"# 3. Simple Exploration\n## 3.1 Check null data\n- ### Market","0ca62249":"## 2.4 Data Description\n### Market data\nMarket data\nThe data includes a subset of US-listed instruments. The set of included instruments changes daily and is determined based on the amount traded and the availability of information. This means that there may be instruments that enter and leave this subset of data. There may therefore be gaps in the data provided, and this does not necessarily imply that that data does not exist (those rows are likely not included due to the selection criteria).\n\nThe marketdata contains a variety of returns calculated over different timespans. All of the returns in this set of marketdata have these properties:\n\n- Returns are always calculated either open-to-open (from the opening time of one trading day to the open of another) or close-to-close (from the closing time of one trading day to the open of another).\n- Returns are either raw, meaning that the data is not adjusted against any benchmark, or market-residualized (Mktres), meaning that the movement of the market as a whole has been accounted for, leaving only movements inherent to the instrument.\n- Returns can be calculated over any arbitrary interval. Provided here are 1 day and 10 day horizons.\n- Returns are tagged with 'Prev' if they are backwards looking in time, or 'Next' if forwards looking.\n\nWithin the marketdata, you will find the following columns:\n\n- time(datetime64[ns, UTC]) - the current time (in marketdata, all rows are taken at 22:00 UTC)\n- assetCode(object) - a unique id of an asset\n- assetName(category) - the name that corresponds to a group of assetCodes. These may be \"Unknown\" if the corresponding assetCode does not have any rows in the news data.\n- universe(float64) - a boolean indicating whether or not the instrument on that day will be included in scoring. This value is not provided outside of the training data time period. The trading universe on a given date is the set of instruments that are avilable for trading (the scoring function will not consider instruments that are not in the trading universe). The trading universe changes daily.\n- volume(float64) - trading volume in shares for the day\n- close(float64) - the close price for the day (not adjusted for splits or dividends)\n- open(float64) - the open price for the day (not adjusted for splits or dividends)\n- returnsClosePrevRaw1(float64) - see returns explanation above\n- returnsOpenPrevRaw1(float64) - see returns explanation above\n- returnsClosePrevMktres1(float64) - see returns explanation above\n- returnsOpenPrevMktres1(float64) - see returns explanation above\n- returnsClosePrevRaw10(float64) - see returns explanation above\n- returnsOpenPrevRaw10(float64) - see returns explanation above\n- returnsClosePrevMktres10(float64) - see returns explanation above\n- returnsOpenPrevMktres10(float64) - see returns explanation above\n- returnsOpenNextMktres10(float64) - 10 day, market-residualized return. This is the target variable used in competition scoring. The market data has been filtered such that returnsOpenNextMktres10 is always not null.\n\n### News data\nThe news data contains information at both the news article level and asset level (in other words, the table is intentionally not normalized).\n\n- time(datetime64[ns, UTC]) - UTC timestamp showing when the data was available on the feed (second precision)\n- sourceTimestamp(datetime64[ns, UTC]) - UTC timestamp of this news item when it was created\n- firstCreated(datetime64[ns, UTC]) - UTC timestamp for the first version of the item\n- sourceId(object) - an Id for each news item\n- headline(object) - the item's headline\n- urgency(int8) - differentiates story types (1: alert, 3: article)\n- takeSequence(int16) - the take sequence number of the news item, starting at 1. For a given story, alerts and articles have separate sequences.\n- provider(category) - identifier for the organization which provided the news item (e.g. RTRS for Reuters News, BSW for Business Wire)\n- subjects(category) - topic codes and company identifiers that relate to this news item. Topic codes describe the news item's subject matter. These can cover asset classes, geographies, events, industries\/sectors, and other types.\n- audiences(category) - identifies which desktop news product(s) the news item belongs to. They are typically tailored to specific audiences. (e.g. \"M\" for Money International News Service and \"FB\" for French General News Service)\n- bodySize(int32) - the size of the current version of the story body in characters\n- companyCount(int8) - the number of companies explicitly listed in the news item in the subjects field\n- headlineTag(object) - the Thomson Reuters headline tag for the news item\n- marketCommentary(bool) - boolean indicator that the item is discussing general market conditions, such as \"After the Bell\" summaries\n- sentenceCount(int16) - the total number of sentences in the news item. Can be used in conjunction with firstMentionSentence to determine the relative position of the first mention in the item.\n- wordCount(int32) - the total number of lexical tokens (words and punctuation) in the news item\n- assetCodes(category) - list of assets mentioned in the item\n- assetName(category) - name of the asset\n- firstMentionSentence(int16) - the first sentence, starting with the headline, in which the scored asset is mentioned.\n    -  1: headline\n    - 2: first sentence of the story body\n    - 3: second sentence of the body, etc\n    - 0: the asset being scored was not found in the news item's headline or body text. As a result, the entire news item's text (headline + body) will be used to determine the sentiment score.\n- relevance(float32) - a decimal number indicating the relevance of the news item to the asset. It ranges from 0 to 1. If the asset is mentioned in the headline, the relevance is set to 1. When the item is an alert (urgency == 1), relevance should be gauged by firstMentionSentence instead.\n- sentimentClass(int8) - indicates the predominant sentiment class for this news item with respect to the asset. The indicated class is the one with the highest probability.\n- sentimentNegative(float32) - probability that the sentiment of the news item was negative for the asset\n- sentimentNeutral(float32) - probability that the sentiment of the news item was neutral for the asset\n- sentimentPositive(float32) - probability that the sentiment of the news item was positive for the asset\n- sentimentWordCount(int32) - the number of lexical tokens in the sections of the item text that are deemed relevant to the asset. This can be used in conjunction with wordCount to determine the proportion of the news item discussing the asset.\n- noveltyCount12H(int16) - The 12 hour novelty of the content within a news item on a particular asset. It is calculated by comparing it with the asset-specific text over a cache of previous news items that contain the asset.\n- noveltyCount24H(int16) - same as above, but for 24 hours\n- noveltyCount3D(int16) - same as above, but for 3 days\n- noveltyCount5D(int16) - same as above, but for 5 days\n- noveltyCount7D(int16) - same as above, but for 7 days\n- volumeCounts12H(int16) - the 12 hour volume of news for each asset. A cache of previous news items is maintained and the number of news items that mention the asset within each of five historical periods is calculated.\n- volumeCounts24H(int16) - same as above, but for 24 hours\n- volumeCounts3D(int16) - same as above, but for 3 days\n- volumeCounts5D(int16) - same as above, but for 5 days\n- volumeCounts7D(int16) - same as above, but for 7 days","26b4c6a8":"## 3.2 Number of unique values","a81c8cb1":"As shown above,, **`''`** is recognized as object. So we have to change  these values as missing.","8f4e2cf9":"- headlineTag(object) - the Thomson Reuters headline tag for the news item","043bd7e4":"- `market_train data` is about **40.7 million( 2007-02-01 ~ 2016-12-30 )** , `market_test` is about **1800  ( 2017-01-03 )**. Similarly, news is similar.  \n- The other two variables above are missing `assetName` and` universe`.","77f99ed8":"### Seasonality","1300a5cd":"- sourceId(object) - an Id for each news item","0ddf0d77":"### Yearly","e10a0543":"## 3.6 Simple NLP"}}