{"cell_type":{"da9832a9":"code","d0a907ee":"code","59ac87c4":"code","e9a32f77":"code","a7c42cab":"code","b16b4c39":"code","bd3c116d":"code","7b01609f":"code","02fa48bf":"code","4b97de5e":"code","e96999dd":"code","26997fee":"code","c6ccf71a":"code","102c7798":"code","dd614f3a":"code","cd3213ad":"code","bbdc40ad":"code","f5b10e3f":"code","3c273127":"code","9a7f06c5":"code","bb0c30c3":"code","3c510cf1":"code","dbc24ac4":"code","6ebb5ee1":"code","b4728f53":"code","8334b66c":"code","a5007c0f":"code","42c28b49":"code","5c193cdf":"code","2465eecf":"code","c40da53a":"code","fc5dfea2":"code","3f9994af":"code","dc2daa54":"code","c5937ba8":"markdown","a7c84f63":"markdown","174bb5b1":"markdown","99d2a9b0":"markdown","41211927":"markdown"},"source":{"da9832a9":"# Fungsi Import Library\nimport warnings \nwarnings.filterwarnings(\"ignore\") \n\nimport pandas as pd\nimport numpy  as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.metrics import accuracy_score","d0a907ee":"df = pd.read_csv(\"..\/input\/real-estate-dataset\/data.csv\")\ndata = df","59ac87c4":"df.head()","e9a32f77":"plt.figure(figsize=(18,16))\ncor = df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.YlGnBu)\nplt.show()","a7c42cab":"corr_matrix = df.corr()\ncorr_matrix['MEDV'].sort_values(ascending=True)","b16b4c39":"df.info()\ndf.describe()","bd3c116d":"sns.pairplot(data);","7b01609f":"%matplotlib inline\nimport matplotlib.pyplot as plt\ndf.hist(bins=50,figsize=(20,15))\nplt.show()","02fa48bf":"df.plot(kind=\"scatter\",x=\"RM\",y=\"MEDV\")","4b97de5e":"df.plot(kind=\"scatter\",x=\"DIS\",y=\"MEDV\")","e96999dd":"df.plot(kind=\"scatter\",x=\"LSTAT\",y=\"MEDV\")","26997fee":"df.plot(kind=\"kde\",x=\"ZN\",y=\"MEDV\")","c6ccf71a":"data.head()","102c7798":"display(data[['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','PTRATIO']].groupby(['AGE']).agg([\"max\",'mean',\"min\"]).style.background_gradient(cmap=\"Oranges\"))","dd614f3a":"f, axes = plt.subplots(1,1, figsize = (16, 5))\ng1 = sns.distplot(data[\"INDUS\"], color=\"red\",ax = axes)\nplt.title(\"Distribusi daerah Industrial\")","cd3213ad":"#Representasi Visual Missing Value pada Dataset\n# Merah = Data error\/hilang, Biru = Data aman\ncols = df.columns[:50] \ncolours = ['#000099', '#FF0000'] \nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df[cols].isnull(), cmap=sns.color_palette(colours),ax=ax)\nplt.title(\"Check Missing Value pada Dataset\")","bbdc40ad":"print('PERSENTASE MISSING VALUE PADA DATASET')\nfor col in df.columns:\n    pct_missing = np.mean(df[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","f5b10e3f":"df.describe()","3c273127":"print(\"Data info = \\n\",data.info())\ndata = data.drop([\"CRIM\",\"NOX\",\"PTRATIO\",\"B\",\"LSTAT\",\"MEDV\",\"AGE\"], axis=1)\nprint(\"\")\nprint(\"Head of Data = \\n\",data.head())\nprint(\" \")\nprint(\"Unique values = \\n\",data.nunique())\nprint(\"\")\n\nprint(\"Null values = \\n\",data.isnull().sum())\nprint(\"\")\n#Mengisi Missing Value dengan Nilai Rata - rata\ndata = data.fillna(data.mean())\nprint(\"Checking null values again = \\n\",data.isnull().sum())\nprint(\"\")\n","9a7f06c5":"def clean_dataset(df):\n    assert isinstance(df, pd.DataFrame)\n    df.dropna(inplace=True)\n    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df[indices_to_keep].astype(np.float64)\n\nclean_dataset(df)","bb0c30c3":"data.info()","3c510cf1":"from sklearn.model_selection import train_test_split\n\nx = data.drop(\"TAX\", axis = 1)\ny = data[\"TAX\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y,train_size = 0.6, test_size = 0.4)\nprint (x_train)\nprint (y_train)","dbc24ac4":"from sklearn.linear_model import LinearRegression\nlr= LinearRegression()\nlr.fit(x_train, y_train)\ny_pred = lr.predict(x_test)","6ebb5ee1":"from sklearn import metrics\nprint(\"MAE = \",metrics.mean_absolute_error(y_test,y_pred))\nprint(\"MSE = \",metrics.mean_squared_error(y_test,y_pred))\nprint(\"SMSE = \",np.sqrt(metrics.mean_squared_error(y_test,y_pred)))","b4728f53":"accuracy = lr.score(x_test, y_test)\n\"Akurasi dari model Linear Regression: {}%\".format(int(round(accuracy * 100)))","8334b66c":"print (data)","a5007c0f":"print (\"Nilai real pada data \\n\")\nprint (data.iloc[467],\"\\n\",\n       data.iloc[11],\"\\n\",\n       data.iloc[5],\"\\n\",\n       data.iloc[383])","42c28b49":"print(\"Making predictions for the following 5 houses\")\nprint(x_train.head())\nprint(\"The predicted values are\")\nprint(lr.predict(x_train.head()))","5c193cdf":"#Menguji hasil inputan\n    #1 ZN \n    #2 INDUS \n    #3 CHAS \n    #4 RM \n    #5 DIS \n    #6 RAD \nprint(\"Prediksi Linear Regression = \",lr.predict([[5, 3, 1, 6, 5, 3]]))","2465eecf":"from sklearn.preprocessing import StandardScaler\nscaled = pd.DataFrame(StandardScaler().fit_transform(x_train))","c40da53a":"from sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(x_train,y_train)\naccs = accuracy_score(y_test,model.predict(x_test))\nprint(\"Akurasi dari model menggunakan Algoritma Native Bayes : {}%\".format(100*accs))","fc5dfea2":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(x_train, y_train)","3f9994af":"print (data.iloc[207],data.iloc[421],data.iloc[179])","dc2daa54":"print(\"Making predictions for the following 5 houses\")\nprint(x_train.head())\nprint(\"The predicted values are\")\nprint(model.predict(x_train.head()))","c5937ba8":"# Desicion Tree","a7c84f63":"# Linear Regression","174bb5b1":"# **CEK MISSING VALUE**","99d2a9b0":"# Normalisasi \/ Cleaning pada Dataset","41211927":"# Gaussian Naive Bayes Classifier Model"}}