{"cell_type":{"ec372d78":"code","7bb646c3":"code","f7db64b9":"code","0470c2f7":"code","594fa8f4":"code","6778ffac":"code","c7db8a20":"code","62a37a41":"code","4ec0f13d":"code","c31611f6":"code","d70798f4":"code","f4e286ed":"code","2a4e78d7":"code","ce59b0ef":"code","46c78986":"code","c552edc1":"code","5cfc4881":"code","5c80e563":"code","36bbbf99":"markdown","51ade806":"markdown","745401f4":"markdown","ff8a30df":"markdown"},"source":{"ec372d78":"#importering libaries \nimport numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7bb646c3":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","f7db64b9":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","0470c2f7":"train_data.info()","594fa8f4":"train_data = train_data.drop(['Name','PassengerId', 'Cabin', 'Ticket'], axis=1)\n\n#To make it more manageable, I have chosen to remove unnessesary columns from the data. \n#The column is too unique to compare it to anything, compared to forexample Survive, PassengerID makes no difference \n#if you survice or not, Cabin has too many missing values and Ticket has too many unique numbers \n#to make any difference in the survival rate.","6778ffac":"#I now want to replace the missing values in the Age column. First I am going to define what the missing values \n#should be replaced with, which is why I will find the mean age and replace the missing values with this. \n#I'll use the .isnull and .sum function in the end to check if the result will come back as 0. \n#If it does I have succesfully replaced the missing values with the mean age.\n\ndata = [train_data, test_data]\n\nfor dataset in data:\n    mean = train_data['Age'].mean()\n    new_age = np.random.randint(mean)\n    \n    age_slice=dataset['Age'].copy()\n    age_slice[np.isnan(age_slice)] = new_age\n    dataset['Age'] = age_slice\n    dataset['Age'] = train_data['Age'].astype(int)\n    \ntrain_data['Age'].isnull().sum()","c7db8a20":"#The Embarked column is only missing two values and I will replace those two with the most common value, \n#which I find using the describe function. The result is the most common value is S.\n\ntrain_data['Embarked'].describe()","62a37a41":"#The two values will now be replaced with S and then I'll again check with the .isnull and .sum to sum up \n#if there are any missing values left, if not I have again succesfully replaced the missing values with S.\n\ncommon_value = 'S'\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)\n    \ntrain_data['Embarked'].isnull().sum()","4ec0f13d":"train_data.info()","c31611f6":"#I am now going to start with transforming the different datatypes to integer. I will start with the Fare column. \n#I will use the .info function to verify if the change has been succesfull.\n\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Fare'] = dataset ['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \ntrain_data.info()","d70798f4":"#The Sex column is changing from object to integer (male = 0 og female = 1).\n\ngender = {\"male\": 0, \"female\": 1}\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Sex']= dataset['Sex'].map(gender)\n    \ntrain_data.info()","f4e286ed":"#The Embarked column is going to be changed from object to integer (S = 0, C= 1 og Q = 2)\n\nports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)\n    \ntrain_data.info()","2a4e78d7":"#The next thing I want to do is making a new column for Age making it possible to look into which agegroup \n#is most likely to survive. I will be making 5 different categories:\n\n#Age 0-12 (children)\n#Age 12-18 (teens)\n#Age 18-30 (young adults)\n#Age 30-60 (adults)\n#Age 60+ (seniors)\n\n#I will use the .loc method to make these categories.\n\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    \n    dataset.loc[ dataset['Age'] <= 12, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 12 ) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 30), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 30) & (dataset['Age'] <= 60), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 60, 'Age'] = 4\n\ntrain_data['Age'].value_counts()","ce59b0ef":"#I now want to do the same with the Fare column. I am going to categories for different fareprices \n#to see if you are most likely to survive if you are rich or poor (or inbetween)\n\n#The categories will be:\n\n#Lower pricepoint:\n #from 0 to 7.91 \n #from 7.91 to 14.454\n\n#Middle pricepoint:\n #from 14.454 to 31\n #from 31 to 99\n\n#Higher pricepoint:\n #from 99 to 250\n #from 250+\n\n#The Fare column is being split into categories like I did with the Age coloumn\n\ndata = [train_data, test_data]\n\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3\n    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4\n    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \ntrain_data['Fare'].value_counts()","46c78986":"#I will now add a new feature comparing the ages with the classes. I will use a For loop for this. A for loop is made \n#to iterate over a sequence of example a list, dictionary, string etc. Instead of doing things manually over \n#every data (comparing every age with every class) it will loop the same statement on all the data.\n\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Age_Class'] = dataset['Age']* dataset ['Pclass']\n    \ntrain_data.head(10)","c552edc1":"#I am now ready to compare the data with Machine Learning. I am using the sklearn liberary and using the \n#LogisticRegression method to find out my score. Scikit-learn is a liberay made for Python when doing \n#machine learning and Logistic Regression is a classification algorithm used in Machine Learning to predict the \n#probability of specific variables.\n\nX = train_data.drop('Survived', axis=1)\ny = train_data['Survived']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.53, random_state=123)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogmodel=LogisticRegression()\nlogmodel.fit(X_train, y_train)\npredictions= logmodel.predict(X_test)\nlogmodel.score(X_test, y_test)\npd.crosstab(y_test, predictions)\n\nprint (\"My score is: {}\".format(round(accuracy_score(predictions, y_test),4)))","5cfc4881":"predictions = logmodel.predict(X_train)\npredictions\n\nsubmission = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':predictions})\nsubmission.head(10)","5c80e563":"#Submitting the predictions to the Kaggle competition\n\nfilename = 'Titanic Predictions 1.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","36bbbf99":"This shows that the most ticket sold for the titanic was the lower end and after this the middle end. They didn't sell a lot of the high end tickets. Which may conclude that most of the passengers was either lowerclass or middleclass citizens instead of the higher class.  ","51ade806":"This code shows that: \n\n* 69 is from the age of 0-12 (children)\n* 70 is from the age 12-18 (teens) \n* 449 is from the age 18-30 (young adults)\n* 281 is from the age of 30-60 (adults) \n* 22 is from the age of 60+ (seniors) \n\nI can then determine that the most prominant group on the ship was in the agerange from 18-30, also classified as young adults and the group after this is adults. ","745401f4":"Using the .info function I am able to see the different datatypes in my data. I want to change some of the datatypes: \n\n* The Fare column is going to be changed from float to integer\n* The Sex column will be changed from object to integer (0 will be representing the males and 1 will be representing the female)\n* The Embarked column I will change from object to integer. S = 0, C = 1 and Q = 2\n\nI am changing those columns to integer as it will make it easier to measure different statistical data and figure out the survivalrate. ","ff8a30df":"> **Look at the data - is there any missing values?**"}}