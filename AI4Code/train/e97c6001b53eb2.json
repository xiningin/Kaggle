{"cell_type":{"71bf684b":"code","a5f92d57":"code","237105e8":"code","af46d246":"code","3d7fd002":"code","81a750ff":"code","171a8ad5":"code","78958b4d":"code","5207b81e":"code","6e9a3ff5":"code","5ece211a":"code","4d934a01":"code","46eaf736":"code","e56b9e1f":"code","44b31f1f":"code","027fd80f":"code","95155d63":"markdown","aaf74c28":"markdown","0ccd26f0":"markdown"},"source":{"71bf684b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a5f92d57":"dataset_train = pd.read_csv(\"\/kaggle\/input\/gooogle-stock-price\/Google_Stock_Price_Train.csv\")","237105e8":"dataset_train.head()","af46d246":"train = dataset_train.loc[:,[\"Open\"]].values\ntrain","3d7fd002":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled","81a750ff":"plt.plot(train_scaled)\nplt.show()","171a8ad5":"X_train = []\ny_train = []\ntimesteps = 50\nfor i in range(timesteps, 1258):\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","78958b4d":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train.shape","5207b81e":"y_train = y_train.reshape(-1,1)\ny_train.shape","6e9a3ff5":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import SimpleRNN\nfrom keras.layers import Dropout","5ece211a":"regressor = Sequential()\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True,return_sequences = True))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45,activation='tanh',recurrent_dropout=True,return_sequences = True))\nregressor.add(Dropout(0.15))\n\nregressor.add(SimpleRNN(units = 45))\nregressor.add(Dropout(0.15))\n\nregressor.add(Dense(units = 1))\n\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\nregressor.fit(X_train, y_train, epochs = 30, batch_size = 32)","4d934a01":"dataset_test = pd.read_csv(\"\/kaggle\/input\/gooogle-stock-price\/Google_Stock_Price_Test.csv\")\ndataset_test.head()","46eaf736":"real_stock_price = dataset_test.loc[:, [\"Open\"]].values\nreal_stock_price.shape","e56b9e1f":"dataset_total = pd.concat((dataset_train[\"Open\"], dataset_test[\"Open\"]),axis = 0)\ninputs = dataset_total[len(dataset_train)-len(dataset_test)- timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs)\ninputs.shape","44b31f1f":"X_test = []\nfor i in range(timesteps, 70):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","027fd80f":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","95155d63":"# Predictions and Visualising","aaf74c28":"# Preprocessing","0ccd26f0":"# Create Model"}}