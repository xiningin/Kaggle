{"cell_type":{"352cd44c":"code","f905a15a":"code","ac226f7f":"code","85690934":"code","c6407025":"code","b9fd4ce7":"code","ee7ee1e2":"code","4ecb159b":"code","99f7ca4b":"code","8b4c37d0":"code","7ff460b5":"code","0d204fa0":"code","067ab3a1":"code","f3d16ac5":"code","02ff0884":"markdown","d0a8d819":"markdown","8c37211b":"markdown","53aa2ea1":"markdown","a3fa8ac4":"markdown","4c635410":"markdown","61ececec":"markdown","21913135":"markdown"},"source":{"352cd44c":"import pandas as pd\nimport numpy as np","f905a15a":"ls ..\/input","ac226f7f":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')","85690934":"train.head()","c6407025":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train, columns=['Sex', 'Embarked'])\ntest = pd.get_dummies(test, columns=['Sex', 'Embarked'])\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n\n# train\u306e\u8868\u793a\ndisplay(train.head())","b9fd4ce7":"X_train = train.drop(['Survived'], axis=1)  # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\nY_train = train['Survived']  # Y_train\u306ftrain\u306eSurvived\u5217","ee7ee1e2":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# X_train\u3068Y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,  # 20\u56de\u9023\u7d9a\u3067loss\u304c\u4e0b\u304c\u3089\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86\n            verbose=10  # 10round\u6bce\u306b\u3001loss\u3092\u8868\u793a\n) ;","4ecb159b":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2)) \n","99f7ca4b":"test_pred = gbm.predict(test, num_iteration=gbm.best_iteration_)\nsample_submission['Survived'] = test_pred\nsample_submission.to_csv('train_test_split.csv', index=False) ","8b4c37d0":"# 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u6307\u5b9a\u3057\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=3)\n\n# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\nmodels = []\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = Y_train[train_index]\n    valid_y = Y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n\n    gbm = lgb.LGBMClassifier(objective='binary')\n    gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n                early_stopping_rounds=20,\n                verbose= -1) # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    models.append(gbm)  # \u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))","7ff460b5":"# test\u306e\u4e88\u6e2c\ntest_pred = np.zeros((len(test), 3))\n\nfor fold_, gbm in enumerate(models):\n    pred_ = gbm.predict(test, num_iteration=gbm.best_iteration_)\n    test_pred[:, fold_] = pred_\n\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('3-fold_cross-validation.csv',index = False)","0d204fa0":"gbm.get_params()","067ab3a1":"# GridSearchCV\u3092import\nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b\nparams = {\n    'max_depth': [2, 3, 4, 5],\n    'reg_alpha': [0, 1, 10, 100],\n    'reg_lambda': [0, 1, 10, 100],\n}\n\ngrid_search = GridSearchCV(\n                           gbm,  # \u5206\u985e\u5668\u3092\u6e21\u3059\n                           param_grid=params,  # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n                           cv=3,  # 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n                          )\n\ngrid_search.fit(X_train, Y_train)  # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a","f3d16ac5":"# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\ntest_pred = np.zeros((len(test), 3))\n\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = Y_train[train_index]\n    valid_y = Y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n\n    gbm = lgb.LGBMClassifier(objective='binary', max_depth=3, reg_alpha=1,\n                             reg_lambda=0)\n    gbm.fit(train_x, train_y,\n            eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1)\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    test_pred[:, fold_] = gbm.predict(test, num_iteration=gbm.best_iteration_)\n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('glid_search.csv', index=False)  # score\u306f0.77511","02ff0884":"## 5.1 \u524d\u51e6\u7406\n### 5.1.1 \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5909\u63db","d0a8d819":"## 5.4 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","8c37211b":"# \u6b21\u306eNotebook\nhttps:\/\/www.kaggle.com\/currypurin\/tutorial-of-kaggle-ver3-hurokub","53aa2ea1":"## 5.2 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3067\u306e\u5b66\u7fd2\u30fb\u63a8\u8ad6","a3fa8ac4":"## 5.3 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u306e\u5b66\u7fd2","4c635410":"![](https:\/\/cdn.discordapp.com\/attachments\/507208726864855060\/577789809330880532\/20190514_.012.jpeg)","61ececec":"![](https:\/\/cdn.discordapp.com\/attachments\/507208726864855060\/577789829518065675\/20190514_.014.jpeg)","21913135":"# \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u30c7\u30fc\u30bf\u3067\u8a66\u3059"}}