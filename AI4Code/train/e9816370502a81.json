{"cell_type":{"7644d72d":"code","4e0784ae":"code","6d2ea16a":"code","55fc325c":"code","437f910f":"code","24eceecf":"code","12a127e0":"code","ebb3e702":"code","7944005c":"code","855ac1f5":"code","c805be6a":"code","54874da9":"code","f76dc010":"code","3695329f":"code","67cdec90":"code","dd7ff1b7":"code","00a07126":"code","9510af4f":"code","8583dd91":"code","78448aac":"code","42b4e5ba":"markdown","b5fcf887":"markdown","6d7737ad":"markdown","d4d847f8":"markdown","bf1c9846":"markdown","6b68aed9":"markdown","fc46b33c":"markdown","0d960f63":"markdown","a7f1d057":"markdown","ab197df7":"markdown"},"source":{"7644d72d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n","4e0784ae":"train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\n\nprint('Train: ', train.shape)\nprint('Test: ', test.shape)","6d2ea16a":"train.sample(5)","55fc325c":"test.sample(5)","437f910f":"\nfig = px.histogram(train, 'target', histnorm='probability', height=400, width=600)\nfig.update_layout(\n        xaxis=dict(\n            tickmode='array',\n            tickvals=[0,1]\n        ),\n        yaxis_title = '% Images',\n        xaxis_title = 'Target',\n\n        bargap=0.7)\nfig.show()","24eceecf":"train['has_cancer'] = train.groupby('patient_id')['target'].transform('max')\npatient_data = train[['patient_id', 'has_cancer']].drop_duplicates()\nfig = px.histogram(patient_data, 'has_cancer', height=400, width=600)\nfig.update_layout(\n        xaxis=dict(\n            tickmode='array',\n            tickvals=[0,1]\n        ),\n        yaxis_title = '# Patients',\n        xaxis_title = 'Has Cancer',\n\n        bargap=0.7)","12a127e0":"patient_image_cnt = train.groupby(['patient_id'])['image_name'].count().reset_index().rename(columns={'image_name': 'num_images'})\nfig = go.Figure()\ntrace0 = go.Histogram(\n    x=patient_image_cnt['num_images'],    \n    autobinx=True\n)\n\nfig.add_trace(trace0)\n\nfig.update_layout(\n        yaxis_title = '<b># Patients<\/b>',\n        xaxis_title = '<b># Images<\/b>',\n        title='Train Data',\n    height=400,\n    )\n\nfig.show()","ebb3e702":"patient_image_cnt = test.groupby(['patient_id'])['image_name'].count().reset_index().rename(columns={'image_name': 'num_images'})\nfig = go.Figure()\ntrace0 = go.Histogram(\n    x=patient_image_cnt['num_images'],    \n    autobinx=True\n)\n\nfig.add_trace(trace0)\n\nfig.update_layout(\n        yaxis_title = '<b># Patients<\/b>',\n        xaxis_title = '<b># Images<\/b>',\n    height=400,\n    title = 'Test Data'\n\n    )\n\nfig.show()","7944005c":"patient_image_cnt = train.groupby(['patient_id', 'has_cancer'])['image_name'].count().reset_index().rename(columns={'image_name': 'num_images'})\npatient_image_cnt.groupby('has_cancer')['num_images'].mean()","855ac1f5":"train_demo = train[['patient_id', 'sex', 'age_approx']].drop_duplicates()\ntest_demo = test[['patient_id', 'sex', 'age_approx']].drop_duplicates()","c805be6a":"fig = go.Figure()\n\ntrace0 = go.Histogram(\n    x=train_demo['sex'],    \n    autobinx=True,\n    name='Train'\n)\ntrace1 = go.Histogram(\n    x=test_demo['sex'],    \n    autobinx=True,\n    name='Test'\n)\n\nfig.add_trace(trace0)\nfig.add_trace(trace1)\n\nfig.update_layout(\n        yaxis_title = 'Count',\n        xaxis_title = 'Sex',\n    barmode='group',\n    bargap=0.5,\n    height=400, width=600\n    )\n\nfig.show()","54874da9":"fig = go.Figure()\n\ntrace0 = go.Histogram(\n    x=train_demo['age_approx'],    \n    autobinx=True,\n    name='Train'\n)\ntrace1 = go.Histogram(\n    x=test_demo['age_approx'],    \n    autobinx=True,\n    name='Test'\n)\n\nfig.add_trace(trace0)\nfig.add_trace(trace1)\n\nfig.update_layout(\n        yaxis_title = 'Count',\n        xaxis_title = 'Age',\n    barmode='group',\n    )\n\nfig.show()","f76dc010":"fig = go.Figure()\n\ntrace0 = go.Histogram(\n    x=train['anatom_site_general_challenge'],    \n    autobinx=True,\n    name='Train'\n)\ntrace1 = go.Histogram(\n    x=test['anatom_site_general_challenge'],    \n    autobinx=True,\n    name='Test'\n)\n\nfig.add_trace(trace0)\nfig.add_trace(trace1)\n\nfig.update_layout(\n        yaxis_title = 'Count',\n        xaxis_title = 'anatom_site_general_challenge',\n    barmode='group',\n    )\n\nfig.show()","3695329f":"train_anatom = train.groupby('anatom_site_general_challenge')['target'].mean().reset_index()\npx.bar(train_anatom, 'anatom_site_general_challenge', 'target')","67cdec90":"train_demo = train[['patient_id', 'sex', 'has_cancer']].drop_duplicates().groupby('sex')['has_cancer'].mean().reset_index()\npx.bar(train_demo, 'sex', 'has_cancer')","dd7ff1b7":"train_demo = train[['patient_id', 'age_approx', 'has_cancer']].drop_duplicates().groupby('age_approx')['has_cancer'].mean().reset_index()\npx.bar(train_demo, 'age_approx', 'has_cancer')","00a07126":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image \n\ndef show_images(images, cols = 1, titles = None):\n    # https:\/\/gist.github.com\/soply\/f3eec2e79c165e39c9d540e916142ae1\n    \"\"\"Display a list of images in a single figure with matplotlib.\n    \n    Parameters\n    ---------\n    images: List of np.arrays compatible with plt.imshow.\n    \n    cols (Default = 1): Number of columns in figure (number of rows is \n                        set to np.ceil(n_images\/float(cols))).\n    \n    titles: List of titles corresponding to each image. Must have\n            the same length as titles.\n    \"\"\"\n    assert((titles is None)or (len(images) == len(titles)))\n    n_images = len(images)\n    if titles is None: titles = ['Image (%d)' % i for i in range(1,n_images + 1)]\n    fig = plt.figure()\n    for n, (image, title) in enumerate(zip(images, titles)):\n        a = fig.add_subplot(cols, np.ceil(n_images\/float(cols)), n + 1)\n        #if image.ndim == 2:\n        #    plt.gray()\n        plt.imshow(image)\n        a.set_title(title)\n    fig.set_size_inches(np.array(fig.get_size_inches()) * n_images)\n    plt.show()","9510af4f":"image_list = train[train['target'] == 0].sample(4)['image_name']\nimage_all=[]\nfor image_id in image_list:\n    image_file = f'\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+image_id+'.jpg' \n    img = np.array(Image.open(image_file))\n    image_all.append(img)\nshow_images(image_all, cols=1)","8583dd91":"image_list = train[train['target'] == 1].sample(4)['image_name']\nimage_all=[]\nfor image_id in image_list:\n    image_file = f'\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'+image_id+'.jpg' \n    img = np.array(Image.open(image_file))\n    image_all.append(img)\nshow_images(image_all, cols=1)","78448aac":"image_list = test.sample(4)['image_name']\nimage_all=[]\nfor image_id in image_list:\n    image_file = f'\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/'+image_id+'.jpg' \n    img = np.array(Image.open(image_file))\n    image_all.append(img)\nshow_images(image_all, cols=1)","42b4e5ba":"## Section 1: Train \/ Test Sample\n- Train set is roughly 3 times test set \n- \"Benign_malignant\" and \"diagnosis\" columns are present in Train data only, so likely not useful","b5fcf887":"# Introduction \n\n\n### Competition Objective\n\n> In this competition, you\u2019ll identify melanoma in images of skin lesions. In particular, you\u2019ll use images within the same patient and determine which are likely to represent a melanoma. Using patient-level contextual information may help the development of image analysis tools, which could better support clinical dermatologists.\n\nYou need to predict the probability of Melanoma given an iamge and a few other tabular fields. THe evaluation metric is ROC AUC\n\n \n### What is Melanoma?\n\n> Melanoma, also known as malignant melanoma, is a type of skin cancer that develops from the pigment-producing cells known as melanocytes. Melanomas typically occur in the skin but may rarely occur in the mouth, intestines or eye (uveal melanoma). In women, they most commonly occur on the legs, while in men they most commonly occur on the back. About 25% of melanomas develop from moles.Changes in a mole that can indicate melanoma include an increase in size, irregular edges, change in color, itchiness or skin breakdown.\n> \n\n### How is Melanoma typically diagnosed?\n- Looking at the area in question is the most common method of suspecting a melanoma.\n- Moles that are irregular in color or shape are typically treated as candidates. \n- ABCDE Rule is commonly used in assessment\n\n![image.png](attachment:image.png)\n\nSource: https:\/\/en.wikipedia.org\/wiki\/Melanoma#Diagnosis \n","6d7737ad":"## Section 4: Sex, Age, Anatomy Site - Frequency Distribution \n- Roughly similar distribution of Sex and Age in train \/ test\n- Slighty Higher % of males in both Train \/ Test\n","d4d847f8":"> ## Section 2: Target Distribution\n- ~98% images have target =0 (read heavy class imbalance)\n- Target is not at the patient level, but at the image level (Same patient can have some images with target=0 and some with target=1)","bf1c9846":"## Section 3: Patient - target and # image Stats\n- Train set contains data of about 2K patients. Roughly 1\/5th of them have cancer and rest do not\n- Test data has ~700 unique patients\n- All the patients have 2+ images\n- Majority of the patients have <10 images, but there are quite a few who have a lot more\n- No appreciable difference in Avg. # of images for patients with and without the cancer \n- No appreciable difference in Avg. # of images in Train data vs Test data ","6b68aed9":"### Train Images Target = 0","fc46b33c":"## Section 6 - Image Visualization ","0d960f63":"### Test Images","a7f1d057":"### Train Images Target =1","ab197df7":"## Section 5: Sex, Age, Anatomy Site - Relationship with Target\n- There is decent variation in probability of patient having cancer by sex, age and anatomy\n- Wonder if image level prediction should be influenced by these patient level stats"}}