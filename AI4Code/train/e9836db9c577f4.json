{"cell_type":{"8170f026":"code","e723535d":"code","bb123c8c":"code","3a4eede1":"code","868f15ab":"code","439419cc":"code","3feda78f":"code","b50254ee":"code","058cfa5d":"code","1cc46382":"code","a95476b0":"code","ed41a7e0":"code","088f4ae5":"code","18b7b1e5":"markdown","0d237e37":"markdown","b2a59e09":"markdown","b8682e0d":"markdown","7a70c7ec":"markdown","d6c69e7f":"markdown","f0f9e704":"markdown","4e2a3538":"markdown","539c953c":"markdown","af421fad":"markdown","dd27e18a":"markdown","95a4a64b":"markdown"},"source":{"8170f026":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","e723535d":"#checking for missing data\ndf.isna().sum()","bb123c8c":"#correcting all the missing data, with the mean() values of each column,inplace \ndf['ph']=df['ph'].fillna(df['ph'].mean())\ndf['Sulfate']=df['Sulfate'].fillna(df['Sulfate'].mean())\ndf['Trihalomethanes']=df['Trihalomethanes'].fillna(df['Trihalomethanes'].mean())\ndf.isna().sum()","3a4eede1":"import plotly.express as px\n#creating a scatter_matrix to search any outliers\nplot = px.scatter_matrix(df,dimensions=['ph','Sulfate','Trihalomethanes','Turbidity'],color='Potability')\nplot.show()","868f15ab":"df['Potability'].hist()","439419cc":"#checking for correlation between the predictors, important for modell selection\nimport matplotlib.pyplot as plt\n\ndf.corr(method='pearson')","3feda78f":"\ny_water = df.iloc[:,9].values\nx_water = df.iloc[:,:-1].values\n","b50254ee":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler  \nx_waterTrain,x_waterTest,y_waterTrain,y_waterTest = train_test_split(x_water,y_water,test_size=0.20,random_state=0)\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(x_waterTrain)\nX_test = scaler.transform(x_waterTest)","058cfa5d":"#testing GaussianNB() method. Due to naive independence of predictors assumption\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report\n\nnaive_water_quality = GaussianNB()\n\nnaive_water_quality.fit(X_train,y_waterTrain)\nnaive_prediction = naive_water_quality.predict(X_test)\n\nprint(classification_report(naive_prediction,y_waterTest))","1cc46382":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\n\ndecision_tree_model = DecisionTreeClassifier(criterion='entropy',random_state=0)\ndecision_tree_model.fit(x_waterTrain,y_waterTrain)\ndecision_prediction = decision_tree_model.predict(x_waterTest)\nprint(classification_report(decision_prediction,y_waterTest))","a95476b0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n#54 (empirically) was the most efficient estimator quantity\nrandom_forest_model = RandomForestClassifier(n_estimators=54,criterion='entropy',random_state=0)\nrandom_forest_model.fit(X_train,y_waterTrain)\nr_forest_prediction = random_forest_model.predict(X_test)\nprint(classification_report(r_forest_prediction,y_waterTest))","ed41a7e0":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\n\nmd2 = KNeighborsClassifier(n_neighbors=30)\nmd2.fit(X_train,y_waterTrain)\np = md2.predict(X_test)\nprint(classification_report(p,y_waterTest))","088f4ae5":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\nmodel = SVC(kernel = 'poly')\nmodel.fit(x_waterTrain,y_waterTrain)\n\nsvm_prediction = model.predict(x_waterTest)\n\nprint(classification_report(p,y_waterTest))","18b7b1e5":"# Scatter Matrix","0d237e37":"# RandomForest Classifier\n","b2a59e09":"# Calculating correlations","b8682e0d":"# Support Vector Machine Classifier\n*kernel = 'polynomial'\n","7a70c7ec":"# Creating a Class and its Predictors\n","d6c69e7f":"# Correcting missing data","f0f9e704":"# Decision Tree Classifier","4e2a3538":"# Downloading data","539c953c":"# Checking the distribution between diferent water qualities in DataFrame","af421fad":"# KNearestNeighbours Classifier\n\n","dd27e18a":"# Naive Bayes Classifier","95a4a64b":"# Checking for missing data\n"}}