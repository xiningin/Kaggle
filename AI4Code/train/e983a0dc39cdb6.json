{"cell_type":{"01dc1509":"code","e03e3e81":"code","839420a4":"code","34ed1cfc":"code","e2981b90":"code","d066e1ad":"code","50609be2":"code","2063eebe":"code","2b4b3045":"code","5af9773e":"code","32bf0122":"code","52863308":"code","7be880f4":"code","dc70c337":"code","3f63a0dd":"code","9c6df19b":"code","0fe46728":"code","084ace3b":"code","bac4ef4e":"markdown","5d793237":"markdown","95ad97a4":"markdown"},"source":{"01dc1509":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\n# SeaBorn : librairie de graphiques avanc\u00e9s\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets\n\nfrom tensorflow.keras.preprocessing import sequence\nfrom sklearn.datasets import fetch_20newsgroups\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Input, Dense, Embedding, Conv1D, MaxPool1D, Dropout, SimpleRNN, LSTM\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.preprocessing import sequence\nimport numpy as np\nimport string\nimport re","e03e3e81":"df = pd.read_csv('..\/input\/epileptic-seizure-recognition\/Epileptic Seizure Recognition.csv')","839420a4":"y = df['y']\ndf = df.drop(['Unnamed'], axis=1)","34ed1cfc":"df = df.drop(['y'], axis=1)\nX = []\nfor i, row in df.iterrows():\n    tmp_x = []\n    for elem in row.tolist():\n         tmp_x.append([elem])\n    X.append(tmp_x)","e2981b90":"for i in range(y.shape[0]):\n    if y[i]!=1:\n        y[i]=0","d066e1ad":"X = np.array(X)","50609be2":"X.shape","2063eebe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","2b4b3045":"model = Sequential()\nmodel.add(Conv1D(256, 3, activation='relu', input_shape=(178,1), padding='same'))\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(128, 3, activation='relu', padding='same'))\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(250, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","5af9773e":"model.summary()","32bf0122":"model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=100, batch_size=128, verbose=2)","52863308":"model = Sequential()\nmodel.add(LSTM(64, input_shape=(178,1), return_sequences=True))\nmodel.add(LSTM(32))\nmodel.add(Flatten())\nmodel.add(Dense(250, activation='relu'))\n\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","7be880f4":"model.summary()","dc70c337":"model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=100, batch_size=128, verbose=2)","3f63a0dd":"model = Sequential()\nmodel.add(Conv1D(256, 3, activation='relu', input_shape=(178, 1), padding='same'))\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(128, 3, activation='relu', padding='same'))\nmodel.add(MaxPool1D(2))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(64, return_sequences=True))\nmodel.add(LSTM(32))\nmodel.add(Flatten())\nmodel.add(Dense(250, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","9c6df19b":"model.summary()","0fe46728":"model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=100, batch_size=128, verbose=2)","084ace3b":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit_transform(X)\nX","bac4ef4e":"## LSTM","5d793237":"## MinMaxScaler","95ad97a4":"## Conv1D et LSTM"}}