{"cell_type":{"406650fa":"code","171ac396":"code","111ddb7e":"code","da744c95":"code","fa0cc976":"code","cc4300f3":"code","1b902adf":"code","6dbdb0ee":"code","014ea366":"code","ac5e2eb6":"code","340535f1":"code","1baa8fef":"code","665640cd":"code","7f15ee1a":"code","d98650d6":"code","e345fb6c":"code","9ea58bd6":"code","0aedb70e":"code","deb46996":"code","02ec3b38":"code","0f207939":"code","2ae707dc":"code","9099e239":"code","b9dc25fd":"code","bd29685a":"code","a60d78c3":"code","bfb39f06":"code","6712193e":"code","14fb2672":"code","fd4f9a6f":"code","3e3c3c93":"code","20ed1d07":"code","ac4947e8":"code","b18b2d05":"code","caf504d5":"code","f39ef5fb":"code","9b6889bf":"code","6b10bdac":"code","c225885b":"code","a2f438d8":"code","e0cbf16e":"code","785c4a75":"code","d3d17804":"code","7df29515":"code","32efbb90":"code","9b443862":"code","78c27615":"code","b9e566c5":"code","af5a5e61":"code","cd00a4fe":"code","79f4dac8":"code","304904ce":"code","a203e0a8":"code","de45b1ed":"code","d82d5f60":"code","e7f7ef65":"code","0c5ec3c3":"code","843237e6":"code","22205fce":"code","979ce0d9":"code","520b009d":"code","307417d6":"code","81b61195":"markdown","2a2ecf62":"markdown","c6304293":"markdown","16dc5282":"markdown","779a5a44":"markdown","a5f798b0":"markdown","e32fde39":"markdown","edb808a2":"markdown"},"source":{"406650fa":"import os\nimport pickle\nimport re\nimport json\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n","171ac396":"import os\nprint(os.listdir(\"..\/input\/stanford-covid-vaccine\/\"))\nos.chdir(\"..\/input\/stanford-covid-vaccine\/\")","111ddb7e":"with open('train.json') as f:\n    data = json.loads(\"[\" + \n        f.read().replace(\"}\\n{\", \"},\\n{\") + \"]\")","da744c95":"structure_list=[]\nfor i in range(len(data)):\n    structure_list.append(data[i]['structure'][0:68])\n    \nloop_type_list=[]\nfor i in range(len(data)):\n    loop_type_list.append(data[i]['predicted_loop_type'][0:68])\n    \nsequence_list=[]\nfor i in range(len(data)):\n    sequence_list.append(data[i]['sequence'][0:68]) \n\ndeg50_Mg_list=[]\nfor i in range(len(data)):\n    deg50_Mg_list.append(data[i]['deg_Mg_50C'][0:68]) \n    \nreactivity_list=[]\nfor i in range(len(data)):\n    reactivity_list.append(data[i]['reactivity'][0:68]) \n\ndeg50_pH10_list=[]\nfor i in range(len(data)):\n    deg50_pH10_list.append(data[i]['deg_Mg_pH10'][0:68]) \n\ndeg50_pH10_error_list=[]\nfor i in range(len(data)):\n    deg50_pH10_error_list.append(data[i]['deg_error_Mg_pH10'][0:68]) \n\nreactivity_error_list=[]\nfor i in range(len(data)):\n    reactivity_error_list.append(data[i]['reactivity_error'][0:68]) \n    \ndeg50_Mg_error_list=[]\nfor i in range(len(data)):\n    deg50_Mg_error_list.append(data[i]['deg_error_Mg_50C'][0:68]) \n    \nseq_length_list=[]\nfor i in range(len(data)):\n    seq_length_list.append([data[i]['seq_length']]*68)\n\n# New feature - next base    \nnext_base_list=[]\nfor i in range(len(data)):\n    next_base_list.append(sequence_list[i][1:]+'N')\n\n# New feature - previous base\nprevious_base_list=[]\nfor i in range(len(data)):\n    previous_base_list.append('N' + sequence_list[i][:-1])\n    \n# New feature - loop type at next base\nnext_loop_type_list=[]\nfor i in range(len(data)):\n    next_loop_type_list.append(loop_type_list[i][1:]+'N')\n    \n# New feature - loop type at previous base\nprevious_loop_type_list=[]\nfor i in range(len(data)):\n    previous_loop_type_list.append('N' + loop_type_list[i][:-1])\n\n# New feature - total number of loop structures\nloop_total_list=[]\nfor i in range(len(data)):\n    loop_total_list.append([len(re.findall('\\([.(]*\\)', structure_list[i]))]*68)\n\n# New feature - percent GC of sequence\ntotal_GC_list=[]\nfor i in range(len(data)):\n    total_GC_list.append([(sequence_list[i].count('G')+sequence_list[i].count('C'))\/len(sequence_list[i])]*68)\n    ","fa0cc976":"def base_pairing_2(structure, sequence):\n    '''\n    finds the base paired to each base in a '(' or ')' structure\n    creates a string the length of the sequence with the paired bases or 'N' for no pair\n    '''\n    base_pairing_list = ['N'] * len(sequence)\n    open_counts=0\n    close_counts=0\n    open_positions=[]\n    close_positions=[]\n    open_positions_temp=[]\n    close_positions_temp=[]\n    for i , j in enumerate(structure):  \n        if j == \"(\":\n            open_counts += 1\n            open_positions_temp.append(i)\n        elif j == \")\":\n            close_counts += 1\n            close_positions_temp.append(i)\n        else:\n            continue\n        if open_counts == close_counts:\n            open_positions.append(open_positions_temp)\n            close_positions.append(close_positions_temp)\n            open_positions_temp=[]\n            close_positions_temp=[]\n    for i in range(len(open_positions)):\n        for j , k in zip(open_positions[i], close_positions[i][::-1]):\n            base_pairing_list[k] = sequence[j]\n            base_pairing_list[j] = sequence[k]\n    return base_pairing_list\n","cc4300f3":"base_pairing_list = []\nfor i in range(len(data)):\n    base_pairing_list.append(base_pairing_2(structure_list[i],sequence_list[i]))","1b902adf":"def structure_type_length(structure):\n    '''\n    finds the length of each loop structure from opening '(' to closing ')'\n    makes a string the length of the sequence with numbers representing the length of the current loop \n    '''\n    structure=structure\n    structure_length_list=[]\n    prev_char=None\n    length=None\n    count=1\n    for i in structure:\n        if i != prev_char:\n            if prev_char != None:\n                length=count\n                structure_length_list.extend([length] * length)\n            count = 1\n            prev_char= i\n        else:\n            count += 1\n    if length:\n        length=count\n        structure_length_list.extend([length] * length)\n    if not length:\n        structure_length_list.extend([len(structure)]*len(structure))\n    return structure_length_list\n        ","6dbdb0ee":"structure_type_length_list = []\nfor i in range(len(data)):\n    structure_type_length_list.append(structure_type_length(structure_list[i]))","014ea366":"def splitintochars(a_list_of_lists):\n    'splits lists of strings into lists of individual elements'\n    final=[]\n    for i in a_list_of_lists:\n        final=final+[char for char in i]\n    return final\n    \n\ndef long_form(a_list_of_lists):\n    'takes a list of sequences and converts it into a 1-dimensional array'\n    temp=splitintochars(a_list_of_lists)\n    temp=np.array(temp)\n    temp = np.reshape(temp,[-1,1])\n    temp = temp.flatten()\n    return temp\n\n\ndef long_form2(a_list_of_lists):\n    'takes a list of elements and converts it into a 1-dimensional array'\n    long_list=[]\n    for i in a_list_of_lists:\n        for j in range(len(i)):\n            long_list.append(i[j])\n    temp=np.array(long_list)\n    temp = np.reshape(temp,[-1,1])\n    temp = temp.flatten()\n    return temp\n","ac5e2eb6":"sequence_list=long_form(sequence_list)\n\nstructure_list=long_form(structure_list)\n\nloop_total_list=long_form2(loop_total_list)\n\nloop_type_list=long_form(loop_type_list)\n\nseq_length_list=long_form2(seq_length_list)\n\nnext_base_list=long_form(next_base_list)\n\nprevious_base_list=long_form(previous_base_list)\n\ndeg50_Mg_error_list=long_form2(deg50_Mg_error_list)\n\ndeg50_pH10_list=long_form2(deg50_pH10_list)\n\nreactivity_list=long_form2(reactivity_list)\n\ndeg50_pH10_error_list=long_form2(deg50_pH10_error_list)\n\nreactivity_error_list=long_form2(reactivity_error_list)\n\ndeg50_Mg_list=long_form2(deg50_Mg_list)\n\nnext_loop_type_list=long_form(next_loop_type_list)\n\nprevious_loop_type_list=long_form(previous_loop_type_list)\n   \ntotal_GC_list=long_form2(total_GC_list)\n\nbase_pairing_list=long_form(base_pairing_list)\n\nstructure_type_length_list=long_form2(structure_type_length_list)       ","340535f1":"len(sequence_list)","1baa8fef":"final_df=pd.DataFrame(data=({'base':sequence_list,'structure':structure_list,'total_loop':loop_total_list,'loop_type':loop_type_list \\\n                             ,'length':seq_length_list,'next_base':next_base_list,'previous_base':previous_base_list, \\\n                                 'deg50_Mg_error':deg50_Mg_error_list, 'deg50_Mg':deg50_Mg_list}), \\\n                          index=np.arange(len(sequence_list)))\n\nfinal_df['position']=list(np.arange(1,69))*2400\nfinal_df['structure_type_length']=structure_type_length_list\nfinal_df['total_GC']=total_GC_list\nfinal_df['base_pairing']=base_pairing_list\nfinal_df['next_loop_type']=next_loop_type_list\nfinal_df['previous_loop_type']=previous_loop_type_list    \nfinal_df['reactivity']=reactivity_list\nfinal_df['reactivity_error']=reactivity_error_list                         \nfinal_df['deg50_pH10_error']=deg50_pH10_error_list\nfinal_df['deg50_pH10']=deg50_pH10_list               ","665640cd":"df=final_df\ndel final_df","7f15ee1a":"df.columns","d98650d6":"df.head()","e345fb6c":"df.groupby(['base','base_pairing'])['base'].count()","9ea58bd6":"sns.distplot(df[df['deg50_Mg_error']<1]['deg50_Mg_error']);","0aedb70e":"df['base_context'] = df['previous_base'] + df['base'] + df['next_base']\ndf['loop_context'] = df['previous_loop_type'] + df['loop_type'] + df['next_loop_type']","deb46996":"df.drop(['base','next_base','previous_base','loop_type','next_loop_type','previous_loop_type'], axis=1, inplace=True)","02ec3b38":"df['structure']=df['structure'].astype('category')\ndf['base_pairing']=df['base_pairing'].astype('category')\ndf['base_context']=df['base_context'].astype('category')\ndf['loop_context']=df['loop_context'].astype('category')","0f207939":"plot_df=df[df['deg50_Mg_error']<1]","2ae707dc":"import seaborn as sns\nmean_order = list(plot_df.groupby(['loop_context'])['deg50_Mg'].mean().sort_values().reset_index()['loop_context'])\n\nplt.figure(figsize=(20,5))\n\nsns.boxplot(x=plot_df['loop_context'],y=plot_df['deg50_Mg'],order=mean_order)\n\nplt.xticks(rotation=90);","9099e239":"mean_order = list(plot_df.groupby(['base_context'])['deg50_Mg'].mean().sort_values().reset_index()['base_context'])\n\nplt.figure(figsize=(20,5))\n\nsns.boxplot(x=plot_df['base_context'],y=plot_df['deg50_Mg'],order=mean_order)\n\nplt.xticks(rotation=90);","b9dc25fd":"mean_order = list(plot_df.groupby(['base_pairing'])['deg50_Mg'].mean().sort_values().reset_index()['base_pairing'])\n\nplt.figure(figsize=(20,5))\n\nsns.boxplot(x=plot_df['base_pairing'],y=plot_df['deg50_Mg'],order=mean_order)\n\nplt.xticks(rotation=90);","bd29685a":"plt.figure(figsize=(20,5))\n\nsns.boxplot(x=plot_df['structure'],y=plot_df['deg50_Mg']);","a60d78c3":"plt.figure(figsize=(20,5))\n\nplt.scatter(plot_df['position'],plot_df['deg50_Mg']);","bfb39f06":"plt.figure(figsize=(20,5))\n\nplt.scatter(x=plot_df['total_GC'],y=plot_df['deg50_Mg']);","6712193e":"df=pd.concat([df, pd.get_dummies(df['structure']), pd.get_dummies(df['base_pairing']), pd.get_dummies(df['loop_context']), pd.get_dummies(df['base_context'])],axis=1)\ndf=df.drop(['structure','base_pairing','loop_context','base_context'],axis=1)","14fb2672":"df.head()","fd4f9a6f":"with open('test.json') as f:\n    data = json.loads(\"[\" + \n        f.read().replace(\"}\\n{\", \"},\\n{\") + \n    \"]\")","3e3c3c93":"id_list=[]\nfor i in range(len(data)):\n    id_list.append([data[i]['id']]*len(data[i]['sequence']))\n\nstructure_list=[]\nfor i in range(len(data)):\n    structure_list.append(data[i]['structure'][0:len(data[i]['sequence'])])\n    \nloop_type_list=[]\nfor i in range(len(data)):\n    loop_type_list.append(data[i]['predicted_loop_type'][0:len(data[i]['sequence'])])\n    \nsequence_list=[]\nfor i in range(len(data)):\n    sequence_list.append(data[i]['sequence'][0:len(data[i]['sequence'])])\n\nseq_length_list=[]\nfor i in range(len(data)):\n    seq_length_list.append([data[i]['seq_length']]*len(data[i]['sequence']))\n    \nnext_base_list=[]\nfor i in range(len(data)):\n    next_base_list.append(sequence_list[i][1:]+'N')\n    \nprevious_base_list=[]\nfor i in range(len(data)):\n    previous_base_list.append('N' + sequence_list[i][:-1])\n    \nloop_total_list=[]\nfor i in range(len(data)):\n    loop_total_list.append([len(re.findall('\\([.(]*\\)', structure_list[i]))]*len(data[i]['sequence']))\n    \nposition_list=[]\nfor i in range(len(data)):\n    position_list.append([i for i in list(np.arange(1,len(data[i]['sequence'])+1))])\n    \nnext_loop_type_list=[]\nfor i in range(len(data)):\n    next_loop_type_list.append(loop_type_list[i][1:]+'N')\n    \nprevious_loop_type_list=[]\nfor i in range(len(data)):\n    previous_loop_type_list.append('N' + loop_type_list[i][:-1])\n    \ntotal_GC_list=[]\nfor i in range(len(data)):\n    total_GC_list.append([(sequence_list[i].count('G')+sequence_list[i].count('C'))\/len(sequence_list[i])]*len(data[i]['sequence']))\n\nbase_pairing_list = []\nfor i in range(len(data)):\n    base_pairing_list.append(base_pairing_2(structure_list[i],sequence_list[i]))\n\nstructure_type_length_list = []\nfor i in range(len(data)):\n    structure_type_length_list.append(structure_type_length(structure_list[i]))\n","20ed1d07":"sequence_list=long_form(sequence_list)\nstructure_list=long_form(structure_list)\nloop_total_list=long_form2(loop_total_list)\nloop_type_list=long_form(loop_type_list)\nseq_length_list=long_form2(seq_length_list)\nid_list=long_form(id_list)\nnext_base_list=long_form(next_base_list)\nprevious_base_list=long_form(previous_base_list)\nnext_loop_type_list=long_form(next_loop_type_list)\nprevious_loop_type_list=long_form(previous_loop_type_list)\ntotal_GC_list=long_form(total_GC_list)\nbase_pairing_list=long_form(base_pairing_list)\nstructure_type_length_list=long_form2(structure_type_length_list)   \nposition_list=long_form2(position_list)","ac4947e8":"final_df=pd.DataFrame(data=({'base':sequence_list,'structure':structure_list,'total_loop':loop_total_list,'loop_type':loop_type_list \\\n                             ,'length':seq_length_list,'next_base':next_base_list,'previous_base':previous_base_list, 'id':id_list}), \\\n                          index=np.arange(len(sequence_list)))\n\nfinal_df['structure_type_length']=structure_type_length_list\nfinal_df['total_GC']=total_GC_list\nfinal_df['base_pairing']=base_pairing_list\nfinal_df['next_loop_type']=next_loop_type_list\nfinal_df['previous_loop_type']=previous_loop_type_list    \nfinal_df['position']=position_list ","b18b2d05":"test_df = final_df\ndel final_df","caf504d5":"test_df.head()","f39ef5fb":"test_df['base_context'] = test_df['previous_base'] + test_df['base'] + test_df['next_base']\n\ntest_df['loop_context'] = test_df['previous_loop_type'] + test_df['loop_type'] + test_df['next_loop_type']\n\ntest_df.drop(['base','next_base','previous_base','loop_type','next_loop_type','previous_loop_type'], axis=1, inplace=True)","9b6889bf":"test_df['structure']=test_df['structure'].astype('category')\n\ntest_df['base_pairing']=test_df['base_pairing'].astype('category')\n\ntest_df['base_context']=test_df['base_context'].astype('category')\n\ntest_df['loop_context']=test_df['loop_context'].astype('category')\n\ntest_df=pd.concat([test_df, pd.get_dummies(test_df['structure']), pd.get_dummies(test_df['base_pairing']), pd.get_dummies(test_df['loop_context']), pd.get_dummies(test_df['base_context'])],axis=1)\n\ntest_df=test_df.drop(['structure','base_pairing','loop_context','base_context'],axis=1)","6b10bdac":"test_id=test_df['id']\n\ntest_df=test_df.drop(['id'],axis=1)","c225885b":"extra_col_in_df=[i for i in list(df.columns) if i not in list(test_df.columns)]\nextra_col_in_df","a2f438d8":"df = df.drop(extra_col_in_df[7:], axis=1)","e0cbf16e":"test_df = test_df.drop(['length'], axis=1)\n\ndf = df.drop(['length'], axis=1)","785c4a75":"[i for i in list(test_df.columns) if i not in list(df.columns)]\n\ntest_df = test_df.drop(['SEE', 'SSE'],axis=1)","d3d17804":"test_df.shape\n\ndf.shape\n\n[i for i in list(df.columns) if i not in list(test_df.columns)]","7df29515":"df=df.drop(['ISN'],axis=1)","32efbb90":"from sklearn.experimental import enable_hist_gradient_boosting \nfrom sklearn.ensemble import HistGradientBoostingRegressor","9b443862":"df_deg50_Mg=df[df['deg50_Mg_error']<1]","78c27615":"df_deg50_Mg.columns","b9e566c5":"Y= df_deg50_Mg['deg50_Mg']","af5a5e61":"X = df_deg50_Mg.drop(['deg50_Mg', 'deg50_Mg_error', 'reactivity', 'reactivity_error', 'deg50_pH10', 'deg50_pH10_error' ],axis=1)","cd00a4fe":"deg_50_Mg_tree=HistGradientBoostingRegressor()","79f4dac8":"deg_50_Mg_tree.fit(X, Y)","304904ce":"test_deg50_Mg = deg_50_Mg_tree.predict(test_df)","a203e0a8":"df_reactivity=df[df['reactivity_error']<1]\n\nY= df_reactivity['reactivity']\n\nX = df_reactivity.drop(['deg50_Mg', 'deg50_Mg_error', 'reactivity', 'reactivity_error', 'deg50_pH10', 'deg50_pH10_error' ],axis=1)\n\ndeg_reactivity_tree=HistGradientBoostingRegressor()\n\ndeg_reactivity_tree.fit(X, Y)\n\ntest_reactivity = deg_reactivity_tree.predict(test_df)","de45b1ed":"df_deg50_pH10=df[df['deg50_pH10_error']<1]\n\nY= df_deg50_pH10['deg50_pH10']\n\nX = df_deg50_pH10.drop(['deg50_Mg', 'deg50_Mg_error', 'reactivity', 'reactivity_error', 'deg50_pH10', 'deg50_pH10_error' ],axis=1)\n\ndeg_deg50_pH10_tree=HistGradientBoostingRegressor()\n\ndeg_deg50_pH10_tree.fit(X, Y)\n\ntest_deg50_pH10 = deg_deg50_pH10_tree.predict(test_df)","d82d5f60":"id_seqpos = [test_id[i] + '_' + str(test_df['position'][i]-1) for i in range(457953)]","e7f7ef65":"len(id_seqpos)","0c5ec3c3":"id_seqpos[0]","843237e6":"deg_pH10 = np.random.rand(457953)","22205fce":"deg_50C = np.random.rand(457953)","979ce0d9":"final=pd.DataFrame({'id_seqpos':id_seqpos,'reactivity':test_reactivity, 'deg_Mg_pH10': test_deg50_pH10,'deg_pH10':deg_pH10, 'deg_Mg_50C':test_deg50_Mg, 'deg_50C':deg_50C})","520b009d":"final.head()","307417d6":"final.to_csv(\"beth_openvaccine_submission.csv\", index=False)","81b61195":"reactivity_tree","2a2ecf62":"Load in test data","c6304293":"deg50_Mg_tree","16dc5282":"### Regression Trees ","779a5a44":"Load in train data","a5f798b0":"Remove the high error values for plots","e32fde39":"Making submission dataframe ","edb808a2":"deg50_pH10 tree"}}