{"cell_type":{"db692603":"code","b269066a":"code","625c2ee8":"code","9e96f79b":"code","24e1aa33":"code","404a5922":"code","3bd6b5ad":"code","516e9d86":"code","24f26bf1":"code","c24d6cdd":"code","80a5fdaa":"code","cd5d7010":"code","95ebec33":"code","bdfcd02f":"code","e7011b20":"code","e68865c4":"code","6e398d25":"code","6f162b55":"code","a29bd7bf":"code","8f708342":"code","26dcdc19":"code","e9629800":"code","9656e84f":"code","55b80da5":"code","a62c5bf3":"code","880def08":"code","e9052f2a":"code","926bda0c":"code","ea73dab1":"code","c8e4243f":"code","6a38772a":"code","8ca8b65d":"code","e2c65019":"markdown","8ccb597e":"markdown","0f1cd626":"markdown","31843ed2":"markdown","3dfd82f0":"markdown","5734a9c6":"markdown","5605db22":"markdown","3ac31e82":"markdown","2f8c39fa":"markdown","cab7bc01":"markdown"},"source":{"db692603":"from IPython.display import Image\nImage(\"..\/input\/sign-language-mnist\/amer_sign2.png\")","b269066a":"%pylab inline\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# from matplotlib.pyplot import imread\n# import imageio\nfrom matplotlib import image\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score\n\n# import tensorflow as tf\nimport tensorflow.keras as keras\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, Convolution2D, Flatten, MaxPooling2D, Reshape, InputLayer\nfrom tensorflow.keras.preprocessing.image import load_img","625c2ee8":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9e96f79b":"train = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntest = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")\n","24e1aa33":"train.head(10)","404a5922":"train.describe()","3bd6b5ad":"X=train.iloc[:,1:]\ny=train.iloc[:,:1]\n","516e9d86":"labels = train['label'].values","24f26bf1":"train['label'].value_counts()","c24d6cdd":"plt.figure(figsize = (18,8))\nsns.countplot(x =labels)","80a5fdaa":"y=keras.utils.to_categorical(train['label'].values)\n","cd5d7010":"pd.DataFrame(y)\n","95ebec33":"from sklearn.model_selection import cross_val_score, train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3)","bdfcd02f":"# Normalize the data\nX_train = X_train \/ 255\nX_val = X_val \/ 255","e7011b20":"y_train.shape","e68865c4":"X_train = X_train.values\nX_val = X_val.values","6e398d25":"# Reshaping the data from 1-D to 3-D \nX_train = X_train.reshape(-1,28,28,1)\nX_val = X_val.reshape(-1,28,28,1)","6f162b55":"plt.imshow(X_train[0].reshape(28,28))","a29bd7bf":"X_train.shape","8f708342":"X_val.shape","26dcdc19":"y_val.shape","e9629800":"y_train.shape","9656e84f":"%time\n# # reshape data\n\n# train_x_temp = train_x.reshape(-1, 28, 28, 1)\n# val_x_temp = val_x.reshape(-1, 28, 28, 1)\n\n# define vars\ninput_shape = (784,)\ninput_reshape = (28, 28, 1)\n\n# conv_num_filters = 5\n# conv_filter_size = 5\n\npool_size = (2, 2)\n\nhidden_num_units = 265\noutput_num_units = 25\n\nepochs = 10\nbatch_size = 128\n\nmodel = Sequential([\n\nConvolution2D(75,(2,2), activation='relu',input_shape=input_reshape),\nMaxPooling2D((2,2)),\n\nConvolution2D(50,(2,2), activation='relu'),\nMaxPooling2D((2,2)),\n\nConvolution2D(25,(2,2), activation='relu'),\n\nFlatten(),\n\nDense(hidden_num_units, 'relu'),\n\nDense(output_num_units,'softmax'),\n ])\n","55b80da5":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\ntrained_model_conv = model.fit(X_train, y_train, epochs =epochs, batch_size=batch_size, validation_data=(X_val, y_val))\n","a62c5bf3":"plt.plot(trained_model_conv.history['loss'],label='Train Loss')\nplt.plot(trained_model_conv.history['val_loss'],label='Val Loss')\nplt.legend()\nplt.show()","880def08":"X_test=test.iloc[:,1:]\ny_test=test.iloc[:,:1]\n\n\ny_test=keras.utils.to_categorical(test['label'].values)\n\n\n# Normalize the data\nX_test = X_test \/ 255\n\nX_test = X_test.values\n\n# Reshaping the data from 1-D to 3-D \nX_test = X_test.reshape(-1,28,28,1)","e9052f2a":"test_images = X_test.reshape(X_test.shape[0], 28, 28, 1)","926bda0c":"test_images.shape\n","ea73dab1":"y_pred = model.predict(test_images)","c8e4243f":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred.round())","6a38772a":"\ntested_model_conv = model.fit(X_test, y_test, epochs =epochs, batch_size=batch_size, validation_data=(X_test, y_test))\n","8ca8b65d":"plt.plot(tested_model_conv.history['loss'],label='Test Loss')\nplt.legend()\nplt.show()","e2c65019":"## Sign Language : ","8ccb597e":"As you can see, the number of epochs increase the accuracy also increases.\n\nLet's validate with the test data","0f1cd626":"## Exploratory Analysis of Training Data","31843ed2":"## Importing Packages","3dfd82f0":"Each letter indicates a sign produced by our fingers. We will apply deep learning to these images to make sure our model can understand what sign indicated what letter","5734a9c6":"### Predecting with test images","5605db22":"# Now Using CNN Model: ","3ac31e82":"pandas.dataframe doesn't have a built-in reshape method, but you can use .values to access the underlying numpy array object and call reshape on it","2f8c39fa":"#### Visualizing the image after normalizing","cab7bc01":"### Let's validate with the test data"}}