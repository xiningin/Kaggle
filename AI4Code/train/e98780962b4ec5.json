{"cell_type":{"c241e19d":"code","2475dbfc":"code","e9136b63":"code","6a4acb54":"code","f7130d13":"code","3f25e6cf":"code","9beb68ea":"code","457ab31c":"code","4fa902e6":"code","69b0d804":"code","87b32daf":"code","da4dc9ec":"code","b615a0c1":"code","409e6ed7":"code","eca9a308":"code","2ce01d83":"code","af729204":"code","b926b78e":"code","c8bf589c":"code","fbf0d425":"code","2a124ca1":"code","102775b9":"code","f594f811":"code","73877bc3":"code","fcf1e9a4":"code","29e0f89c":"code","41ecd377":"code","c432a747":"code","89312a08":"code","ca708dcb":"code","82ce1c6c":"code","286fa5ba":"code","be78e673":"code","e81ecfab":"code","29563bc4":"code","5887d4f7":"code","98c4cec6":"code","9d0fa75c":"code","8d601083":"code","74e43141":"code","5f29ed4b":"code","be616a00":"code","b7470521":"code","739a4c08":"code","b319a23f":"code","8e658adb":"code","9f387631":"code","96c172bb":"code","1ac63b05":"code","eac3eb40":"code","027507ef":"code","b41af938":"code","254c5610":"code","1407c082":"code","14b72ad6":"code","ec16bb65":"code","3c1ee884":"code","e6990ec2":"code","4e2888a6":"code","01e7fb88":"code","c732acbf":"code","66dd2b56":"code","eed2b9af":"code","9e1f8f10":"code","16b13257":"code","fbe32b34":"code","94c4d51b":"code","dd7c5751":"markdown","fd0dd21d":"markdown","e6d653c2":"markdown","517fa99c":"markdown","ef481137":"markdown","f05930ce":"markdown","b947a15e":"markdown","41dd4924":"markdown","23a5f243":"markdown","c596bf9e":"markdown","603c94bf":"markdown","58b1e146":"markdown","8c2a51db":"markdown","024bba94":"markdown","76ed7c80":"markdown","2439fdd4":"markdown","38d4dfbd":"markdown","01bbabe7":"markdown","4276e1db":"markdown","fcb73858":"markdown","0aef239c":"markdown","4f893824":"markdown","7eb2c2bf":"markdown","b496f128":"markdown","4e13ea3e":"markdown","a9bc4fd6":"markdown","cce00207":"markdown","39b27535":"markdown","8f4ab55b":"markdown","9726710c":"markdown","3dec40a9":"markdown","798e6aa6":"markdown","14ed9046":"markdown"},"source":{"c241e19d":"from datetime import datetime, timedelta\nfrom dateutil.relativedelta import relativedelta\nimport os\nfrom pprint import pprint\nimport warnings\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib\nfrom matplotlib.ticker import ScalarFormatter\n%matplotlib inline\nimport numpy as np\nimport optuna\noptuna.logging.disable_default_handler()\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport seaborn as sns\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import curve_fit","2475dbfc":"plt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"xtick.direction\"] = \"in\"\nplt.rcParams[\"ytick.direction\"] = \"in\"\nplt.rcParams[\"font.size\"] = 11.0\nplt.rcParams[\"figure.figsize\"] = (9, 6)","e9136b63":"def line_plot(df, title, ylabel=\"Cases\", h=None, v=None,\n              xlim=(None, None), ylim=(0, None), math_scale=True, y_logscale=False, y_integer=False):\n    \"\"\"\n    Show chlonological change of the data.\n    \"\"\"\n    ax = df.plot()\n    if math_scale:\n        ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n        ax.ticklabel_format(style=\"sci\",  axis=\"y\",scilimits=(0, 0))\n    if y_logscale:\n        ax.set_yscale(\"log\")\n    if y_integer:\n        fmt = matplotlib.ticker.ScalarFormatter(useOffset=False)\n        fmt.set_scientific(False)\n        ax.yaxis.set_major_formatter(fmt)\n    ax.set_title(title)\n    ax.set_xlabel(None)\n    ax.set_ylabel(ylabel)\n    ax.set_xlim(*xlim)\n    ax.set_ylim(*ylim)\n    ax.legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\n    if h is not None:\n        ax.axhline(y=h, color=\"black\", linestyle=\"--\")\n    if v is not None:\n        if not isinstance(v, list):\n            v = [v]\n        for value in v:\n            ax.axvline(x=value, color=\"black\", linestyle=\"--\")\n    plt.tight_layout()\n    plt.show()","6a4acb54":"for dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f7130d13":"train_raw = pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv\")\ntest_raw = pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv\")\nsubmission_sample_raw = pd.read_csv(\"\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_submission.csv\")","3f25e6cf":"submission_sample_raw.head()","9beb68ea":"df = pd.DataFrame(\n    {\n        \"Nunique_train\": train_raw.nunique(),\n        \"Nunique_test\": test_raw.nunique(),\n        \"Null_Train\": train_raw.isnull().sum(),\n        \"Null_Test\": test_raw.isnull().sum(),\n    }\n)\ndf.fillna(\"-\").T","457ab31c":"train_raw.head()","4fa902e6":"df = train_raw.copy()\n# Delete columns we will not use\ndf = df.drop([\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\", \"Id\"], axis=1)\n# Type change\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ndf[[\"ConfirmedCases\", \"Fatalities\"]] = df[[\"ConfirmedCases\", \"Fatalities\"]].astype(np.int64)\n# Only use confirmed > 0\ndf = df.loc[df[\"ConfirmedCases\"] > 0, :]\ndf = df.groupby(\"Date\").last().fillna(method=\"bfill\").reset_index()\n# Show data\ntrain_df = df.copy()\ntrain_df.head()","69b0d804":"test_raw.head()","87b32daf":"df = test_raw.drop([\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\"], axis=1)\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ntest_df = df.copy()\ntest_df.head()","da4dc9ec":"train_df.describe(include=\"all\").fillna(\"-\").T","b615a0c1":"line_plot(train_df.set_index(\"Date\"), \"Cases over time\", y_integer=True)","409e6ed7":"line_plot(train_df.set_index(\"Date\").drop(\"ConfirmedCases\", axis=1), \"Cases over time\", y_integer=True)","eca9a308":"def show_trend(train_df, variable, n_changepoints=2):\n    \"\"\"\n    Show trend of log10(@variable) using fbprophet package.\n    @train_df <pd.DataFrame>: the cleaned train data\n    @variable <str>: ConfirmedCases or Fatalities\n    @n_changepoints <int>: max number of change points\n    \"\"\"\n    # Data arrangement\n    df = train_df.loc[:, [\"Date\", variable]]\n    df.columns = [\"ds\", \"y\"]\n    # Log10(x)\n    warnings.resetwarnings()\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        df[\"y\"] = np.log10(df[\"y\"]).replace([np.inf, -np.inf], 0)\n    # fbprophet\n    model = Prophet(growth=\"linear\", daily_seasonality=False, n_changepoints=n_changepoints)\n    model.fit(df)\n    future = model.make_future_dataframe(periods=0)\n    forecast = model.predict(future)\n    # Create figure\n    fig = model.plot(forecast)\n    _ = add_changepoints_to_plot(fig.gca(), model, forecast)\n    plt.title(f\"log10({variable}) over time and chainge points\")\n    plt.ylabel(f\"log10(the number of cases)\")\n    plt.xlabel(\"\")","2ce01d83":"show_trend(train_df, \"ConfirmedCases\")","af729204":"show_trend(train_df, \"Fatalities\")","b926b78e":"# From Wikipedia, https:\/\/en.wikipedia.org\/wiki\/California\n# In 2019\ntotal_population = int(\"39,512,223\".replace(\",\", \"\"))\ntotal_population","c8bf589c":"def create_target_df(ncov_df, total_population, start_date=None, date_format=\"%d%b%Y\"):\n    \"\"\"\n    Calculate the number of susceptible people,\n     and calculate the elapsed time [day] from the start date of the target dataframe.\n    @noc_df <pd.DataFrame>: the cleaned training data\n    @total_population <int>: total population\n    @start_date <str>: the start date or None\n    @date_format <str>: format of @start_date\n    @return <tuple(2 objects)>:\n        - 1. start_date <pd.Timestamp>: the start date of the selected records\n        - 2. target_df <pd.DataFrame>:\n            - column T: elapsed time [min] from the start date of the dataset\n            - column Susceptible: the number of patients who are in the palces but not infected\/recovered\/fatal\n            - column Deaths: the number of death cases\n    \"\"\"\n    df = ncov_df.copy()\n    if start_date is not None:\n        df = df.loc[df[\"Date\"] > datetime.strptime(start_date, date_format), :]\n    start_date = df.loc[df.index[0], \"Date\"]\n    # column T\n    df[\"T\"] = ((df[\"Date\"] - start_date).dt.total_seconds() \/ 60).astype(int)\n    # coluns except T\n    response_variables = [\"Susceptible\", \"Infected\", \"Recovered\", \"Fatal\"]\n    df[\"Susceptible\"] = total_population - df[\"ConfirmedCases\"]\n    df[\"Infected\"] = 0\n    df.loc[df.index[0], \"Infected\"] = df.loc[df.index[0], \"ConfirmedCases\"] - df.loc[df.index[0], \"Fatalities\"]\n    df[\"Recovered\"] = 0\n    df[\"Fatal\"] = df[\"Fatalities\"]\n    # Return\n    target_df = df.loc[:, [\"T\", *response_variables]]\n    return (start_date, target_df)","fbf0d425":"class ModelBase(object):\n    NAME = \"Model\"\n    VARIABLES = [\"x\"]\n    PRIORITIES = np.array([1])\n\n    @classmethod\n    def param_dict(cls, train_df_divided=None, q_range=None):\n        \"\"\"\n        Define parameters without tau. This function should be overwritten.\n        @train_df_divided <pd.DataFrame>:\n            - column: t and non-dimensional variables\n        @q_range <list[float, float]>: quantile rage of the parameters calculated by the data\n        @return <dict[name]=(type, min, max):\n            @type <str>: \"float\" or \"int\"\n            @min <float\/int>: min value\n            @max <float\/int>: max value\n        \"\"\"\n        param_dict = dict()\n        return param_dict\n\n    @staticmethod\n    def calc_variables(df):\n        \"\"\"\n        Calculate the variables of the model.\n        This function should be overwritten.\n        @df <pd.DataFrame>\n        @return <pd.DataFrame>\n        \"\"\"\n        return df\n\n    @staticmethod\n    def calc_variables_reverse(df):\n        \"\"\"\n        Calculate measurable variables using the variables of the model.\n        This function should be overwritten.\n        @df <pd.DataFrame>\n        @return <pd.DataFrame>\n        \"\"\"\n        return df\n\n    @classmethod\n    def create_dataset(cls, ncov_df, total_population, start_date=None, date_format=\"%d%b%Y\"):\n        \"\"\"\n        Create dataset with the model-specific varibles.\n        The variables will be divided by total population.\n        The column names (not include T) will be lower letters.\n        @params: See the function named create_target_df()\n        @return <tuple(objects)>:\n            - start_date <pd.Timestamp>\n            - initials <tuple(float)>: the initial values\n            - Tend <int>: the last value of T\n            - df <pd.DataFrame>: the dataset\n        \"\"\"\n        start_date, target_df = create_target_df(\n            ncov_df, total_population, start_date=start_date, date_format=date_format\n        )\n        df = cls.calc_variables(target_df).set_index(\"T\") \/ total_population\n        df.columns = [n.lower() for n in df.columns]\n        initials = df.iloc[0, :].values\n        df = df.reset_index()\n        Tend = df.iloc[-1, 0]\n        return (start_date, initials, Tend, df)\n\n    def calc_r0(self):\n        \"\"\"\n        Calculate R0. This function should be overwritten.\n        \"\"\"\n        return None\n\n    def calc_days_dict(self, tau):\n        \"\"\"\n        Calculate 1\/beta [day] etc.\n        This function should be overwritten.\n        @param tau <int>: tau value [hour]\n        \"\"\"\n        return dict()","2a124ca1":"class SIRF(ModelBase):\n    NAME = \"SIR-F\"\n    VARIABLES = [\"x\", \"y\", \"z\", \"w\"]\n    PRIORITIES = np.array([10, 0, 0, 1])\n\n    def __init__(self, theta, kappa, rho, sigma):\n        super().__init__()\n        self.theta = float(theta)\n        self.kappa = float(kappa)\n        self.rho = float(rho)\n        self.sigma = float(sigma)\n\n    def __call__(self, t, X):\n        # x, y, z, w = [X[i] for i in range(len(self.VARIABLES))]\n        # dxdt = - self.rho * x * y\n        # dydt = self.rho * (1 - self.theta) * x * y - (self.sigma + self.kappa) * y\n        # dzdt = self.sigma * y\n        # dwdt = self.rho * self.theta * x * y + self.kappa * y\n        dxdt = - self.rho * X[0] * X[1]\n        dydt = self.rho * (1 - self.theta) * X[0] * X[1] - (self.sigma + self.kappa) * X[1]\n        dzdt = self.sigma * X[1]\n        dwdt = self.rho * self.theta * X[0] * X[1] + self.kappa * X[1]\n        return np.array([dxdt, dydt, dzdt, dwdt])\n\n    @classmethod\n    def param_dict(cls, train_df_divided=None, q_range=None):\n        param_dict = super().param_dict()\n        param_dict[\"theta\"] = (\"float\", 0, 1)\n        param_dict[\"kappa\"] = (\"float\", 0, 1)\n        param_dict[\"rho\"] = (\"float\", 0, 1)\n        param_dict[\"sigma\"] = (\"float\", 0, 1)\n        return param_dict\n\n    @staticmethod\n    def calc_variables(df):\n        df[\"X\"] = df[\"Susceptible\"]\n        df[\"Y\"] = df[\"Infected\"]\n        df[\"Z\"] = df[\"Recovered\"]\n        df[\"W\"] = df[\"Fatal\"]\n        return df.loc[:, [\"T\", \"X\", \"Y\", \"Z\", \"W\"]]\n\n    @staticmethod\n    def calc_variables_reverse(df):\n        df[\"Susceptible\"] = df[\"X\"]\n        df[\"Infected\"] = df[\"Y\"]\n        df[\"Recovered\"] = df[\"Z\"]\n        df[\"Fatal\"] = df[\"W\"]\n        return df\n\n    def calc_r0(self):\n        try:\n            r0 = self.rho * (1 - self.theta) \/ (self.sigma + self.kappa)\n        except ZeroDivisionError:\n            return np.nan\n        return round(r0, 2)\n\n    def calc_days_dict(self, tau):\n        _dict = dict()\n        _dict[\"alpha1 [-]\"] = round(self.theta, 3)\n        if self.kappa == 0:\n            _dict[\"1\/alpha2 [day]\"] = 0\n        else:\n            _dict[\"1\/alpha2 [day]\"] = int(tau \/ 24 \/ 60 \/ self.kappa)\n        _dict[\"1\/beta [day]\"] = int(tau \/ 24 \/ 60 \/ self.rho)\n        if self.sigma == 0:\n            _dict[\"1\/gamma [day]\"] = 0\n        else:\n            _dict[\"1\/gamma [day]\"] = int(tau \/ 24 \/ 60 \/ self.sigma)\n        return _dict","102775b9":"def simulation(model, initials, step_n, **params):\n    \"\"\"\n    Solve ODE of the model.\n    @model <ModelBase>: the model\n    @initials <tuple[float]>: the initial values\n    @step_n <int>: the number of steps\n    \"\"\"\n    tstart, dt, tend = 0, 1, step_n\n    sol = solve_ivp(\n        fun=model(**params),\n        t_span=[tstart, tend],\n        y0=np.array(initials, dtype=np.float64),\n        t_eval=np.arange(tstart, tend + dt, dt),\n        dense_output=True\n    )\n    t_df = pd.Series(data=sol[\"t\"], name=\"t\")\n    y_df = pd.DataFrame(data=sol[\"y\"].T.copy(), columns=model.VARIABLES)\n    sim_df = pd.concat([t_df, y_df], axis=1)\n    return sim_df","f594f811":"eg_initials = np.array([1, 0.0001, 0, 0])\neg_param_dict = {\"theta\": 0.08, \"kappa\": 0.0001, \"sigma\": 0.02, \"rho\": 0.2}\neg_df = simulation(SIRF, eg_initials, step_n=300, **eg_param_dict)\neg_df.tail()","73877bc3":"line_plot(\n    eg_df.set_index(\"t\"),\n    title=r\"Example of SIR-F model: $R_0$={0}\".format(SIRF(**eg_param_dict).calc_r0()),\n    ylabel=\"\",\n    h=1\n)","fcf1e9a4":"train_df.shape","29e0f89c":"df = train_df.copy()\n_start_date = df[\"Date\"].min()\ndf[\"Elapsed\"] = (df[\"Date\"] - _start_date).dt.total_seconds() \/ 60\n_many_train_df = df.copy()\n_many_train_df.head()","41ecd377":"exp_f = lambda x, a, b: a * np.exp(b * x \/ 60 \/ 24)","c432a747":"x = _many_train_df[\"Elapsed\"]\ny1, y2 = _many_train_df[\"ConfirmedCases\"], _many_train_df[\"Fatalities\"]\nt = np.arange(0, x.max(), 1)\nparam_c, _ = curve_fit(exp_f, x, y1)\nparam_f, _ = curve_fit(exp_f, x, y2)\ndf = pd.DataFrame(\n    {\n        \"Elapsed\": t,\n        \"ConfirmedCases\": np.vectorize(exp_f)(t, a=param_c[0], b=param_c[1]),\n        \"Fatalities\": np.vectorize(exp_f)(t, a=param_f[0], b=param_f[1])\n    }\n)\ndf[\"Date\"] = _start_date + df[\"Elapsed\"].apply(lambda x: timedelta(minutes=x))\nmany_train_df = df.loc[:, [\"Date\", \"ConfirmedCases\", \"Fatalities\"]]\nmany_train_df","89312a08":"many_train_df.shape","ca708dcb":"train_dataset = SIRF.create_dataset(many_train_df, total_population)\ntrain_start_date, train_initials, train_Tend, transformed_train_df = train_dataset\npprint([train_start_date.strftime(\"%d%b%Y\"), train_initials, train_Tend])","82ce1c6c":"transformed_train_df.tail()","286fa5ba":"class Estimator(object):\n    def __init__(self, model, ncov_df, total_population,\n                 name=None, start_date=None, date_format=\"%d%b%Y\", param_fold_range=(1, 1), **kwargs):\n        \"\"\"\n        Set training data.\n        @model <ModelBase>: the model\n        @name <str>: name of the area\n        @param_fold_range <tuple(float, float)>:\n            if we have fixed parameters (as kwargs), paramater range will be\n            from param_fold_range[0] * (fixed) to param_fold_range[1] * (fixed)\n        @kwargs: fixed parameter of the model\n        @the other params: See the function named create_target_df()\n        \"\"\"\n        if param_fold_range == (1, 1):\n            self.fixed_param_dict = kwargs.copy()\n            self.range_param_dict = dict()\n        else:\n            self.fixed_param_dict = dict()\n            fold_min, fold_max = param_fold_range\n            self.range_param_dict = {\n                name: (value * fold_min, value * fold_max)\n                for (name, value) in kwargs.items()\n            }\n        dataset = model.create_dataset(\n            ncov_df, total_population, start_date=start_date, date_format=date_format\n        )\n        self.start_time, self.initials, self.Tend, self.train_df = dataset\n        self.total_population = total_population\n        self.name = name\n        self.model = model\n        self.param_dict = dict()\n        self.study = None\n        self.optimize_df = None\n\n    def run(self, n_trials=500):\n        \"\"\"\n        Try estimation (optimization of parameters and tau).\n        @n_trials <int>: the number of trials\n        \"\"\"\n        if self.study is None:\n            self.study = optuna.create_study(direction=\"minimize\")\n        self.study.optimize(\n            lambda x: self.objective(x),\n            n_trials=n_trials,\n            n_jobs=-1\n        )\n        param_dict = self.study.best_params.copy()\n        param_dict.update(self.fixed_param_dict)\n        param_dict[\"R0\"] = self.calc_r0()\n        param_dict[\"score\"] = self.score()\n        param_dict.update(self.calc_days_dict())\n        self.param_dict = param_dict.copy()\n        return param_dict\n\n    def history_df(self):\n        \"\"\"\n        Return the hsitory of optimization.\n        @return <pd.DataFrame>\n        \"\"\"\n        optimize_df = self.study.trials_dataframe()\n        optimize_df[\"time[s]\"] = optimize_df[\"datetime_complete\"] - optimize_df[\"datetime_start\"]\n        optimize_df[\"time[s]\"] = optimize_df[\"time[s]\"].dt.total_seconds()\n        self.optimize_df = optimize_df.drop([\"datetime_complete\", \"datetime_start\"], axis=1)\n        return self.optimize_df.sort_values(\"value\", ascending=True)\n\n    def history_graph(self):\n        \"\"\"\n        Show the history of parameter search using pair-plot.\n        \"\"\"\n        if self.optimize_df is None:\n            self.history_df()\n        df = self.optimize_df.copy()\n        sns.pairplot(df.loc[:, df.columns.str.startswith(\"params_\")], diag_kind=\"kde\", markers=\"+\")\n        plt.show()\n\n    def objective(self, trial):\n        # Time\n        if \"tau\" in self.fixed_param_dict.keys():\n            tau = self.fixed_param_dict[\"tau\"]\n        else:\n            tau = trial.suggest_int(\"tau\", 1, 1440)\n        train_df_divided = self.train_df.copy()\n        train_df_divided[\"t\"] = (train_df_divided[\"T\"] \/ tau).astype(np.int64)\n        # Parameters\n        p_dict = dict()\n        for (name, info) in self.model.param_dict(train_df_divided).items():\n            if name in self.fixed_param_dict.keys():\n                param = self.fixed_param_dict[name]\n            else:\n                value_min, value_max = info[1:]\n                if name in self.range_param_dict.keys():\n                    range_min, range_max = self.range_param_dict[name]\n                    value_min = max(range_min, value_min)\n                    value_max = min(range_max, value_max)\n                if info[0] == \"float\":\n                    param = trial.suggest_uniform(name, value_min, value_max)\n                else:\n                    param = trial.suggest_int(name, value_min, value_max)\n            p_dict[name] = param\n        # Simulation\n        t_end = train_df_divided.loc[train_df_divided.index[-1], \"t\"]\n        sim_df = simulation(self.model, self.initials, step_n=t_end, **p_dict)\n        return self.error_f(train_df_divided, sim_df)\n\n    def error_f(self, train_df_divided, sim_df):\n        \"\"\"\n        We need to minimize the difference of the observed values and estimated values.\n        This function calculate the difference of the estimated value and obsereved value.\n        \"\"\"\n        df = pd.merge(train_df_divided, sim_df, on=\"t\", suffixes=(\"_observed\", \"_estimated\"))\n        diffs = [\n            # Weighted Average: the recent data is more important\n            p * np.average(\n                abs(df[f\"{v}_observed\"] - df[f\"{v}_estimated\"]) \/ (df[f\"{v}_observed\"] * self.total_population + 1),\n                weights=df[\"t\"]\n            )\n            for (p, v) in zip(self.model.PRIORITIES, self.model.VARIABLES)\n            if p != 0\n        ]\n        return sum(diffs) * (self.total_population ** 2)\n\n    def compare_df(self):\n        \"\"\"\n        Show the taining data and simulated data in one dataframe.\n        \n        \"\"\"\n        est_dict = self.study.best_params.copy()\n        est_dict.update(self.fixed_param_dict)\n        tau = est_dict[\"tau\"]\n        est_dict.pop(\"tau\")\n        observed_df = self.train_df.drop(\"T\", axis=1)\n        observed_df[\"t\"] = (self.train_df[\"T\"] \/ tau).astype(int)\n        t_end = observed_df.loc[observed_df.index[-1], \"t\"]\n        sim_df = simulation(self.model, self.initials, step_n=t_end, **est_dict)\n        df = pd.merge(observed_df, sim_df, on=\"t\", suffixes=(\"_observed\", \"_estimated\"))\n        df = df.set_index(\"t\")\n        return df\n\n    def compare_graph(self):\n        \"\"\"\n        Compare obsereved and estimated values in graphs.\n        \"\"\"\n        df = self.compare_df()\n        use_variables = [\n            v for (i, (p, v)) in enumerate(zip(self.model.PRIORITIES, self.model.VARIABLES))\n            if p != 0\n        ]\n        val_len = len(use_variables) + 1\n        fig, axes = plt.subplots(ncols=1, nrows=val_len, figsize=(9, 6 * val_len \/ 2))\n        for (ax, v) in zip(axes.ravel()[1:],use_variables):\n            df[[f\"{v}_observed\", f\"{v}_estimated\"]].plot.line(\n                ax=ax, ylim=(None, None), sharex=True,\n                title=f\"{self.model.NAME}: Comparison of observed\/estimated {v}(t)\"\n            )\n            ax.yaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n            ax.ticklabel_format(style=\"sci\",  axis=\"y\",scilimits=(0, 0))\n            ax.legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\n        for v in use_variables:\n            df[f\"{v}_diff\"] = df[f\"{v}_observed\"] - df[f\"{v}_estimated\"]\n            df[f\"{v}_diff\"].plot.line(\n                ax=axes.ravel()[0], sharex=True,\n                title=f\"{self.model.NAME}: observed - estimated\"\n            )\n        axes.ravel()[0].axhline(y=0, color=\"black\", linestyle=\"--\")\n        axes.ravel()[0].yaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n        axes.ravel()[0].ticklabel_format(style=\"sci\",  axis=\"y\",scilimits=(0, 0))\n        axes.ravel()[0].legend(bbox_to_anchor=(1.02, 0), loc=\"lower left\", borderaxespad=0)\n        fig.tight_layout()\n        fig.show()\n    \n    def calc_r0(self):\n        \"\"\"\n        Calculate R0.\n        \"\"\"\n        est_dict = self.study.best_params.copy()\n        est_dict.update(self.fixed_param_dict)\n        est_dict.pop(\"tau\")\n        model_instance = self.model(**est_dict)\n        return model_instance.calc_r0()\n\n    def calc_days_dict(self):\n        \"\"\"\n        Calculate 1\/beta etc.\n        \"\"\"\n        est_dict = self.study.best_params.copy()\n        est_dict.update(self.fixed_param_dict)\n        tau = est_dict[\"tau\"]\n        est_dict.pop(\"tau\")\n        model_instance = self.model(**est_dict)\n        return model_instance.calc_days_dict(tau)\n\n    def predict_df(self, step_n):\n        \"\"\"\n        Predict the values in the future.\n        @step_n <int>: the number of steps\n        @return <pd.DataFrame>: predicted data for measurable variables.\n        \"\"\"\n        est_dict = self.study.best_params.copy()\n        est_dict.update(self.fixed_param_dict)\n        tau = est_dict[\"tau\"]\n        est_dict.pop(\"tau\")\n        df = simulation(self.model, self.initials, step_n=step_n, **est_dict)\n        df[\"Time\"] = (df[\"t\"] * tau).apply(lambda x: timedelta(minutes=x)) + self.start_time\n        df = df.set_index(\"Time\").drop(\"t\", axis=1)\n        df = (df * self.total_population).astype(np.int64)\n        upper_cols = [n.upper() for n in df.columns]\n        df.columns = upper_cols\n        df = self.model.calc_variables_reverse(df).drop(upper_cols, axis=1)\n        return df\n\n    def predict_graph(self, step_n, name=None, excluded_cols=None):\n        \"\"\"\n        Predict the values in the future and create a figure.\n        @step_n <int>: the number of steps\n        @name <str>: name of the area\n        @excluded_cols <list[str]>: the excluded columns in the figure\n        \"\"\"\n        if self.name is not None:\n            name = self.name\n        else:\n            name = str() if name is None else name\n        df = self.predict_df(step_n=step_n)\n        if excluded_cols is not None:\n            df = df.drop(excluded_cols, axis=1)\n        r0 = self.param_dict[\"R0\"]\n        title = f\"Prediction in {name} with {self.model.NAME} model: R0 = {r0}\"\n        line_plot(df, title, v= datetime.today(), h=self.total_population)\n\n    def rmsle(self, compare_df):\n        \"\"\"\n        Return the value of RMSLE.\n        @param compare_df <pd.DataFrame>\n        \"\"\"\n        df = compare_df.set_index(\"t\") * self.total_population\n        score = 0\n        for (priority, v) in zip(self.model.PRIORITIES, self.model.VARIABLES):\n            if priority == 0:\n                continue\n            observed, estimated = df[f\"{v}_observed\"], df[f\"{v}_estimated\"]\n            diff = (np.log(observed + 1) - np.log(estimated + 1))\n            score += (diff ** 2).sum()\n        rmsle = np.sqrt(score \/ len(df))\n        return rmsle\n\n    def score(self):\n        \"\"\"\n        Return the value of RMSLE.\n        \"\"\"\n        rmsle = self.rmsle(self.compare_df().reset_index(\"t\"))\n        return rmsle\n\n    def info(self):\n        \"\"\"\n        Return Estimater information.\n        @return <tupple[object]>:\n            - <ModelBase>: model\n            - <dict[str]=str>: name, total_population, start_time, tau\n            - <dict[str]=float>: values of parameters of model\n        \"\"\"\n        param_dict = self.study.best_params.copy()\n        param_dict.update(self.fixed_param_dict)\n        info_dict = {\n            \"name\": self.name,\n            \"total_population\": self.total_population,\n            \"start_time\": self.start_time,\n            \"tau\": param_dict[\"tau\"],\n            \"initials\": self.initials\n        }\n        param_dict.pop(\"tau\")\n        return (self.model, info_dict, param_dict)","be78e673":"%%time\nfirst_estimator = Estimator(SIRF, many_train_df, total_population, name=\"California\", theta=0, sigma=0)\nfirst_dict = first_estimator.run()","e81ecfab":"first_estimator.history_df().head()","29563bc4":"first_estimator.history_graph()","5887d4f7":"first_estimator.compare_df()","98c4cec6":"first_estimator.compare_graph()","9d0fa75c":"pd.DataFrame.from_dict({\"First\": first_dict}, orient=\"index\")","8d601083":"_, info_dict, param_dict = first_estimator.info()\nparam_dict.pop(\"theta\")\nparam_dict.pop(\"sigma\")\nparam_dict[\"tau\"] = info_dict[\"tau\"]\npd.DataFrame.from_dict({\"For second\": param_dict}, orient=\"index\")","74e43141":"%%time\nsecond_estimator = Estimator(SIRF, many_train_df, total_population, name=\"California\", **param_dict)\nsecond_dict = second_estimator.run()","5f29ed4b":"second_estimator.history_graph()","be616a00":"second_estimator.compare_graph()","b7470521":"pd.DataFrame.from_dict({\"First\": first_dict, \"Second\": second_dict}, orient=\"index\")","739a4c08":"_, info_dict, param_dict = second_estimator.info()\nparam_dict[\"tau\"] = info_dict[\"tau\"]\npd.DataFrame.from_dict({\"For third\": param_dict}, orient=\"index\")","b319a23f":"%%time\nthird_estimator = Estimator(\n    SIRF, many_train_df, total_population, name=\"California\", param_fold_range=(0.5, 1.5), **param_dict\n)\nthird_dict = third_estimator.run()","8e658adb":"third_estimator.history_graph()","9f387631":"third_estimator.compare_graph()","96c172bb":"pd.DataFrame.from_dict({\"First\": first_dict, \"Second\": second_dict, \"Third\": third_dict}, orient=\"index\")","1ac63b05":"first_score = first_dict[\"score\"]\nsecond_score = second_dict[\"score\"]\nthird_score = third_dict[\"score\"]\nmin_score = min(first_score, second_score, third_score)","eac3eb40":"if min_score == first_score:\n    last_model, last_info_dict, last_param_dict = first_estimator.info()\nif min_score == second_score:\n    last_model, last_info_dict, last_param_dict = second_estimator.info()\nelse:\n    last_model, last_info_dict, last_param_dict = third_estimator.info()","027507ef":"last_model.NAME","b41af938":"last_info_dict","254c5610":"pd.DataFrame.from_dict({\"Info\": last_param_dict}, orient=\"index\")","1407c082":"class Predicter(object):\n    \"\"\"\n    Predict the future using models.\n    \"\"\"\n    def __init__(self, name, total_population, start_time, tau, initials, date_format=\"%d%b%Y\"):\n        \"\"\"\n        @name <str>: place name\n        @total_population <int>: total population\n        @start_time <datatime>: the start time\n        @tau <int>: tau value (time step)\n        @initials <list\/tupple\/np.array[float]>: initial values of the first model\n        @date_format <str>: date format to display in figures\n        \"\"\"\n        self.name = name\n        self.total_population = total_population\n        self.start_time = start_time\n        self.tau = tau\n        self.date_format = date_format\n        # Un-fixed\n        self.last_time = start_time\n        self.axvlines = list()\n        self.initials = initials\n        self.df = pd.DataFrame()\n        self.title_list = list()\n        self.reverse_f = lambda x: x\n\n    def add(self, model, end_day_n=None, count_from_last=False, vline=True, **param_dict):\n        \"\"\"\n        @model <ModelBase>: the epidemic model\n        @end_day_n <int\/None>: day number of the end date (0, 1, 2,...), or None (now)\n            - if @count_from_last <bool> is True, start point will be the last date registered to Predicter\n        @vline <bool>: if True, vertical line will be shown at the end date\n        @**param_dict <dict>: keyword arguments of the model\n        \"\"\"\n        # Validate day nubber, and calculate step number\n        if end_day_n is None:\n            end_time = datetime.now()\n        else:\n            if count_from_last:\n                end_time = self.last_time + timedelta(days=end_day_n)\n            else:\n                end_time = self.start_time + timedelta(days=end_day_n)\n        if end_time <= self.last_time:\n            raise Exception(f\"Model on {end_time.strftime(self.date_format)} has been registered!\")\n        step_n = int((end_time - self.last_time).total_seconds() \/ 60 \/ self.tau)\n        self.last_time = end_time\n        # Perform simulation\n        new_df = simulation(model, self.initials, step_n=step_n, **param_dict)\n        new_df[\"t\"] = new_df[\"t\"] + len(self.df)\n        self.df = pd.concat([self.df, new_df], axis=0).fillna(0)\n        self.initials = new_df.set_index(\"t\").iloc[-1, :]\n        # For title\n        if vline:\n            self.axvlines.append(end_time)\n            r0 = model(**param_dict).calc_r0()\n            self.title_list.append(\n                f\"{model.NAME}({r0}, -{end_time.strftime(self.date_format)})\"\n            )\n        # Update reverse function (X, Y,.. to Susceptible, Infected,...)\n        self.reverse_f = model.calc_variables_reverse\n        return self\n\n    def restore_df(self):\n        \"\"\"\n        Return the dimentional simulated data.\n        @return <pd.DataFrame>\n        \"\"\"\n        df = self.df.copy()\n        df[\"Time\"] = self.start_time + df[\"t\"].apply(lambda x: timedelta(minutes=x * self.tau))\n        df = df.drop(\"t\", axis=1).set_index(\"Time\") * self.total_population\n        df = df.astype(np.int64)\n        upper_cols = [n.upper() for n in df.columns]\n        df.columns = upper_cols\n        df = self.reverse_f(df).drop(upper_cols, axis=1)\n        return df\n\n    def restore_graph(self, drop_cols=None, **kwargs):\n        \"\"\"\n        Show the dimentional simulate data as a figure.\n        @drop_cols <list[str]>: the columns not to be shown\n        @kwargs: keyword arguments of line_plot() function\n        \"\"\"\n        df = self.restore_df()\n        if drop_cols is not None:\n            df = df.drop(drop_cols, axis=1)\n        axvlines = [datetime.now(), *self.axvlines] if len(self.axvlines) == 1 else self.axvlines[:]\n        line_plot(\n            df,\n            title=f\"{self.name}: {', '.join(self.title_list)}\",\n            v=axvlines[:-1],\n            h=self.total_population,\n            **kwargs\n        )","14b72ad6":"predicter_today = Predicter(**last_info_dict)\npredicter_today.add(SIRF, end_day_n=None, count_from_last=False, vline=False, **last_param_dict)\npredicter_today.restore_graph(drop_cols=[\"Susceptible\"])","ec16bb65":"df = predicter_today.restore_df().reset_index()\ndf[\"Date\"] = df[\"Time\"].dt.date\ndf = df.drop(\"Time\", axis=1).groupby(\"Date\").last().reset_index()\ndf[\"Confirmed\"] = df[\"Infected\"] + df[\"Recovered\"] + df[\"Fatal\"]\ndf = pd.concat([train_df.drop(\"Date\", axis=1), df], axis=1)\ndf.loc[:, [\"Date\", \"ConfirmedCases\", \"Fatalities\", \"Confirmed\", \"Fatal\"]]","3c1ee884":"days_to_predict = int((test_df[\"Date\"].max() - datetime.today()).total_seconds() \/ 3600 \/ 24 + 1)\ndays_to_predict","e6990ec2":"predicter = Predicter(**last_info_dict)\npredicter.add(SIRF, end_day_n=None, count_from_last=False, vline=False, **last_param_dict)\npredicter.add(SIRF, end_day_n=days_to_predict, count_from_last=True, **last_param_dict)\npredicter.restore_graph(drop_cols=[\"Susceptible\"])","4e2888a6":"predicted_df = predicter.restore_df()\npredicted_df.tail()","01e7fb88":"test_df.tail()","c732acbf":"submission_sample_raw.head()","66dd2b56":"submission_sample_raw.tail()","eed2b9af":"submission_sample_raw.shape","9e1f8f10":"# Predicted data\ndf = predicted_df.reset_index()\ndf[\"Date\"] = df[\"Time\"].dt.date.astype(str)\ndf[\"ConfirmedCases\"] = df[\"Infected\"] + df[\"Recovered\"] + df[\"Fatal\"]\ndf = df.rename({\"Fatal\": \"Fatalities\"}, axis=1)\ndf = df.loc[:, [\"Date\", \"ConfirmedCases\", \"Fatalities\"]]\ndf = df.groupby(\"Date\").last().reset_index()\n# Merge with test dataframe\n_test_df = test_df.copy()\n_test_df[\"Date\"] = _test_df[\"Date\"].astype(str)\ndf = pd.merge(_test_df, df, on=\"Date\").drop(\"Date\", axis=1)\nsubmission_df = df.copy()\nsubmission_df.head()","16b13257":"submission_df.tail()","fbe32b34":"submission_df.shape","94c4d51b":"submission_df.to_csv(\"submission.csv\", index=False)","dd7c5751":"## Non-dimensional SIR-F model\n\nTo simplify the model, we will remove the units of the variables from ODE.\n\nSet $(S, I, R, F) = N \\times (x, y, z, w)$ and $(T, \\alpha_1, \\alpha_2, \\beta, \\gamma) = (\\tau t, \\theta, \\tau^{-1} \\kappa, \\tau^{-1} \\rho, \\tau^{-1} \\sigma)$.  \nThis results in the ODE  \n$\\frac{\\mathrm{d}x}{\\mathrm{d}t}= - \\rho x y$  \n$\\frac{\\mathrm{d}y}{\\mathrm{d}t}= \\rho (1-\\theta) x y - (\\sigma + \\kappa) y$  \n$\\frac{\\mathrm{d}z}{\\mathrm{d}t}= \\sigma y$  \n$\\frac{\\mathrm{d}w}{\\mathrm{d}t}= \\rho \\theta x y + \\kappa y$  \n\nWhere $N$ is the total population and $\\tau$ is a coefficient ([min], is an integer to simplify).  \n\nThe range of variables and parameters:  \n$0 < (x, y, z, w, \\theta, \\kappa, \\rho, \\sigma) < 1$  \n$1 \\leq \\tau \\leq 1440$  \n\nReproduction number can be defined as  \n$R_0 = \\rho (1 - \\theta) (\\sigma + \\kappa)^{-1} = \\beta (1 - \\alpha_1) (\\gamma + \\alpha_2)^{-1}$\n\nWhen $x=\\frac{1}{R_0}$, $\\frac{\\mathrm{d}y}{\\mathrm{d}t}=0$. This means that the max value of confirmed ($=y+z+w$) is $1-\\frac{1}{R_0}$.","fd0dd21d":"# Prediction and data submission\nWe will predict the future with the estimated parameters.","e6d653c2":"### Replace R with (R, F)\nR in SIR model is \"Recovered and have immunity\", but mortality rate cannot be ignored in the real COVID-19 data. Furthermore, with this dataset, we know only the number of confirmed cases and fatal cases.","517fa99c":"# Parameter estimaition of the model\nIn this section, we will estimate the non-dimensional model using training data.","ef481137":"## Data cleaning of training data","f05930ce":"## Plotting function","b947a15e":"## What is SIR model?\nSIR model is a simple mathematical model to understand outbreak of infectious diseases.  \n[The SIR epidemic model - Learning Scientific Programming with Python](https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/)\n\n * S: Susceptible (=Total population - Confirmed)\n * I: Infected\n * R: Recovered\n\nModel:  \nS + I $\\overset{\\beta}{\\longrightarrow}$ 2I  \nI $\\overset{\\gamma}{\\longrightarrow}$ R\n\n$\\beta$: Effective contact rate [1\/min]  \n$\\gamma$: Recovery rate [1\/min]  \n\nOrdinary Differential Equation (ODE):   \n$\\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta S I$  \n$\\frac{\\mathrm{d}I}{\\mathrm{d}T}= N^{-1}\\beta S I - \\gamma I$  \n$\\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I$  \n\nWhere $N=S+I+R$ is the total population, $T$ is the elapsed time from the start date.","41dd4924":"### 1st step: with fixed $\\theta$ and $\\sigma$\nWe need to estimate five parameters $(\\theta, \\kappa, \\sigma, \\rho, \\tau)$, but we have only two observed variables (Susceptible, Fatal) with T. To improve arcuracy of parameter optimization, we try to estimate $(\\kappa, \\rho, \\tau)$ with the assumption that $\\theta=0$ and $\\sigma=0$.","23a5f243":"## Predict the future","c596bf9e":"## EDA of training data","603c94bf":"### Add \"S + I $\\to$ F + I formula\nSome cases are reported as fatal cases before clinical diagnosis of COVID-19. To consider this issue, \"S + I $\\to$ Fatal + I\" will be added to the model.","58b1e146":"### Result of parameter optimization\nWe select the best estimator.","8c2a51db":"## Estimate data until today","024bba94":"# Explanation of SIR-F model\nIn this section, we will create a mathematical model named SIR-F model. This model is derived from SIR model.","76ed7c80":"## Example of non-dimensional SIR-F model\nNumerical simulation will be performed with scipy.integrate.solve_ivp function.  \nFor example, set $(\\theta, \\kappa, \\sigma, \\rho)=(0.08, 0.0001, 0.02, 0.2)$, initial values $(S_0, I_0, R_0, F_0)=(1, 0.0001, 0, 0)$.","2439fdd4":"## Trend analysis\nHere, we will check the trend of the variables. If the trend was changed drastically, we will use only the last trend to predict the future.","38d4dfbd":"## Why we need SIR-F model?","01bbabe7":"## Data cleaning of test data","4276e1db":"## 2nd step: estimate $\\theta$ and $\\sigma$\nWith fixed $(\\kappa, \\rho, \\tau)$, we will estimate $\\theta$ and $\\sigma$ here.","fcb73858":"# Introduction\nUsing SIR-F model, we will predict the number of confirmed cases and fatal cases with COVID-19 in CA, USA. SIR-F model was created in another notebook of mine. Please refer to the following notebook.  \n\nContents:\n* Arrangement of dataset\n* Explanation of SIR-F model\n* Parameter estimaition of the model\n* Prediction and data submission\n\nReferences:\n* [COVID-19 - Growth of Virus in Specific Countries](https:\/\/www.kaggle.com\/wjholst\/covid-19-growth-of-virus-in-specific-countries)\n* [COVID-19 data with SIR model](https:\/\/www.kaggle.com\/lisphilar\/covid-19-data-with-sir-model)","0aef239c":"## Hyper parameter optimization\nUsing Optuna package, $(\\theta, \\kappa, \\sigma, \\rho, \\tau)$ will be estimated by model fitting.","4f893824":"## External data: total population\nTo calculate the number of susceptible cases (explained later), it is necessary to know total population in CA, USA.","7eb2c2bf":"Confirmed cases: Trend was changed on 16Mar2020, but this change is not significant. We will use all data.","b496f128":"# Arrangement of dataset\nData acquisition and EDA will be done in this section.","4e13ea3e":"**Note: We cannot convert T to t because $\\tau$ has not been determined yet.**","a9bc4fd6":"## Create data every one minute by curve fitting\nBecause we have few records, it is difficult to estimate parameters of SIR-F model with Califolnia data. We will try to increase the number of records by curve fitting of exponential function. With this method, we can create a dataset which frequency is one minute.","cce00207":"### 3rd step: Adjust paramerters\nHere we will adjust the paramers, changing them slightly.","39b27535":"## What is SIR-F model?\n* S: Susceptible\n* S$^\\ast$: Confirmed and un-categorized\n* I: Confirmed and categorized as I\n* R: Recovered\n* F: Fatal with confirmation\n\nMeasurable variables:  \nConfirmed = $I+R+F$  \nRecovered = $R$  \nDeaths = $F$  \n\nModel:  \nS $\\overset{\\beta \\mathrm{I}}{\\longrightarrow}$ S$^\\ast$ $\\overset{\\alpha_1}{\\longrightarrow}$ F  \nS $\\overset{\\beta \\mathrm{I}}{\\longrightarrow}$ S$^\\ast$ $\\overset{1 - \\alpha_1}{\\longrightarrow}$ I  \nI $\\overset{\\gamma}{\\longrightarrow}$ R  \nI $\\overset{\\alpha_2}{\\longrightarrow}$ F  \n\n$\\alpha_1$: Mortality rate of S$^\\ast$ cases [-]  \n$\\alpha_2$: Mortality rate of I cases [1\/min]  \n$\\beta$: Effective contact rate [1\/min]  \n$\\gamma$: Recovery rate [1\/min]  \n\nOrdinary Differential Equation (ODE):   \n$\\frac{\\mathrm{d}S}{\\mathrm{d}T}= - N^{-1}\\beta S I$  \n$\\frac{\\mathrm{d}I}{\\mathrm{d}T}= N^{-1}(1 - \\alpha_1) \\beta S I - (\\gamma + \\alpha_2) I$  \n$\\frac{\\mathrm{d}R}{\\mathrm{d}T}= \\gamma I$  \n$\\frac{\\mathrm{d}F}{\\mathrm{d}T}= N^{-1}\\alpha_1 \\beta S I + \\alpha_2 I$  \n\nWhere $N=S+I+R+F$ is the total population, $T$ is the elapsed time from the start date.","8f4ab55b":"Fatalities: No change points were found.","9726710c":"## Raw data","3dec40a9":"## Submit data","798e6aa6":"## Transform training data\n* T means elapsed time [min] from the start date.\n* The number of cases will be divided by total population.","14ed9046":"## Packages"}}