{"cell_type":{"762cd689":"code","65a5165b":"code","700de050":"code","25255be2":"code","a946e4c1":"code","c8f79a5e":"code","793d4711":"code","043145e1":"code","c74176d1":"code","a9455181":"code","25ceae68":"code","ef5d95ef":"code","d778c0ea":"code","18e53596":"code","f60b49be":"code","9f144e67":"code","d3d8e14a":"code","17a8737a":"code","64c5dcee":"markdown","43228559":"markdown","29537571":"markdown","bf9ad4d8":"markdown"},"source":{"762cd689":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport os\nimport torch\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\n\nimport torchvision.transforms as transforms\n\nfrom torch.utils.data import Dataset, DataLoader\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport random\nimport numpy as np\nimport pandas as pd\nimport tqdm\n# \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c random seed'\u044b \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\nrandom.seed(0)\nnp.random.seed(0)\ntorch.manual_seed(0)\ntorch.cuda.manual_seed(0)\ntorch.backends.cudnn.deterministic = True","65a5165b":"# \u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 MNIST (\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0443\u043a\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u043e\u0442 0 \u0434\u043e 9 )\nsample = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv') # \u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u043f\u043e\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 kaggle\ntrain_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv') # \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')  # \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043d\u0430 kaggle\n\nprint(f\"Number of training samples: {len(train_df)}\")\nprint(\"Any missing data? \", train_df.isnull().values.any())\nprint(f\"Dataframe shape: {train_df.shape}\")","700de050":"X, y = train_df.drop(labels = 'label', axis=1), train_df['label']","25255be2":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","a946e4c1":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c DataFrame \u0432 Tensor\nX_train = torch.tensor(X_train.values)\nX_test = torch.tensor(X_test.values)\ny_train = torch.tensor(y_train.values)\ny_test = torch.tensor(y_test.values)\ntest_df = torch.tensor(test_df.values)","c8f79a5e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0438\u043f \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nX_train.dtype, y_train.dtype","793d4711":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\nX_train = X_train.float()\nX_test = X_test.float()\ntest_df = test_df.float()","043145e1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, 2-\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439(28\u044528=784)\nX_train.shape, X_test.shape","c74176d1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 matplotlib\nimport matplotlib.pyplot as plt\nplt.imshow(X_train.reshape(-1, 28, 28)[4,:,:])\nplt.show()\nprint(y_train[4])\n","a9455181":"X_train.shape","25ceae68":"# \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0435\u0440\u0435\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u043e 1x28x28, u \u0433\u0434\u0435 1 - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\nX_train = X_train.reshape(-1, 1, 28, 28)\nX_test = X_test.reshape(-1, 1, 28, 28)\ntest_df = test_df.reshape(-1, 1, 28, 28)","ef5d95ef":"X_train.shape","d778c0ea":"X_train.size(0)","18e53596":"# \u041d\u0430\u0437\u043e\u0432\u0435\u043c \u043d\u0430\u0448\u0443 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c LeNet5, \u0442.\u043a. \u0432 \u043d\u0435\u0439 5 \u0441\u043b\u043e\u0435\u0432 (2 \u0441\u0432\u0435\u0440\u0442\u043a\u0438 \u0438 3 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u044f)\nclass LeNet5(torch.nn.Module):\n    def __init__(self):\n        super(LeNet5, self).__init__()\n        \n        self.conv1 = torch.nn.Conv2d(\n            in_channels=1, out_channels=6, kernel_size=5, padding=2) # \u0421\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 1\n        self.act1  = torch.nn.Tanh() # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438 1 - \u0433\u0438\u043f\u0435\u0440\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0430\u043d\u0433\u0435\u043d\u0441\n        self.pool1 = torch.nn.AvgPool2d(kernel_size=2, stride=2) # \u041f\u0443\u043b\u0438\u043d\u0433 1\n       \n        self.conv2 = torch.nn.Conv2d(\n            in_channels=6, out_channels=16, kernel_size=5, padding=0) # \u0421\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 2\n        self.act2  = torch.nn.Tanh() # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438 2\n        self.pool2 = torch.nn.AvgPool2d(kernel_size=2, stride=2) # \u041f\u0443\u043b\u0438\u043d\u0433 2\n    \n        self.fc1   = torch.nn.Linear(5 * 5 * 16, 120) # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 1\n        self.act3  = torch.nn.Tanh()  # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438 3\n        \n        self.fc2   = torch.nn.Linear(120, 84) # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 2\n        self.act4  = torch.nn.Tanh() # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438 3\n        \n        self.fc3   = torch.nn.Linear(84, 10) # \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 3\n        # \u041f\u043e\u0441\u043b\u0435 fc3 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 softmax, \u043d\u043e \u0437\u0434\u0435\u0441\u044c \u0435\u0435 \u043d\u0435 \u043f\u0438\u0448\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0436\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043b\u043e\u0441\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    def forward(self, x): # \u0417\u0434\u0435\u0441\u044c \u0433\u0440\u0443\u0431\u043e \u0433\u043e\u0432\u043e\u0440\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e \u043d\u0438\u043c \n        \n        x = self.conv1(x)\n        x = self.act1(x)\n        x = self.pool1(x)\n        \n        x = self.conv2(x)\n        x = self.act2(x)\n        x = self.pool2(x)\n        \n        x = x.view(x.size(0), x.size(1) * x.size(2) * x.size(3))\n\n        x = self.fc1(x)\n        x = self.act3(x)\n        x = self.fc2(x)\n        x = self.act4(x)\n        x = self.fc3(x)\n        \n        return x\n    \nlenet5 = LeNet5()","f60b49be":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0443\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nlenet5 = lenet5.to(device)","9f144e67":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043b\u043e\u0441\u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044e - \u043a\u0440\u043e\u0441\u0441\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044f (\u0441\u043e\u0444\u0442\u043c\u0430\u043a\u0441 \u0443\u0436\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d \u0432 \u043d\u0435\u0435)\nloss = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(lenet5.parameters(), lr=1.0e-3) # \u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 loss \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 Adam","d3d8e14a":"# \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u043e\u0431\u0430\u0442\u0447\u0435\u0432\u044b\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a\nbatch_size = 100 # \u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430\n\n#test_accuracy_history = [] # \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043b\u043e\u0441\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \n#test_loss_history = []\n\nX_test = X_test.to(device) # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0443\ny_test = y_test.to(device)\n\nfor epoch in range(20): # \u041a\u0430\u0436\u0434\u0430\u044f \u044d\u043f\u043e\u0445\u0430 - \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u043d\u0430\u0448\u0435\u043c\u0443 \u0442\u0435\u043d\u0437\u043e\u0440\u0443, \u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u044c\u043c\u0443 20, \u043d\u043e \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435, \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \n    order = np.random.permutation(len(X_train)) # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n    for start_index in range(0, len(X_train), batch_size): # \u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0431\u0430\u0442\u0447\u0443\n        optimizer.zero_grad() # \u041e\u0431\u043d\u0443\u043b\u044f\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0435\u0446, \u0442.\u043a. \u0432 pytorch \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f\n        \n        batch_indexes = order[start_index:start_index+batch_size] # \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0431\u0430\u0442\u0447\u0430, \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0435\n        \n        X_batch = X_train[batch_indexes].to(device) # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0443\n        y_batch = y_train[batch_indexes].to(device)\n        \n        preds = lenet5.forward(X_batch) # \u041f\u0440\u043e\u0433\u043e\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n        \n        loss_value = loss(preds, y_batch) # \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043b\u043e\u0441\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        loss_value.backward() # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0442\u0435\u043d\u0437\u043e\u0440\u0435\n        \n        optimizer.step() #\u0434\u0435\u043b\u0430\u0435\u043c \u0448\u0430\u0433 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043f\u0443\u0441\u043a\u0430\n        \n    test_preds = lenet5.forward(X_test)\n   # test_loss_history.append(loss(test_preds, y_test).data.cpu())\n    \n    accuracy = (test_preds.argmax(dim=1) == y_test).float().mean().data.cpu()\n   # test_accuracy_history.append(accuracy)\n    \n    print(accuracy)","17a8737a":"#C\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u043f\u043e\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f kaggle:\npreds = lenet5.forward(test_df.to(device))\npreds = preds.argmax(dim=1).cpu().numpy()\nsample['Label'] = pd.DataFrame(preds)\nsample.to_csv('submission.csv',index=False)\n# \u041c\u043e\u0439 \u043b\u0443\u0447\u0448\u0438\u0439 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle - 0.98771(\u0432 \u043a\u0435\u0440\u043d\u0435\u043b\u0435 accuracy 0.98628, \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435\u0433\u043e 20 \u044d\u043f\u043e\u0445)\n","64c5dcee":"# \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0440\u0443\u043a\u043e\u0438\u0441\u043d\u044b\u0445 \u0446\u0438\u0444\u0440 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438(CNN) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 Lenet","43228559":"![image.png](attachment:image.png)","29537571":"![image.png](attachment:image.png)","bf9ad4d8":"\u0417\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u0435\u0440\u043d\u0435\u043b\u0430 \u0432\u0437\u044f\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u0435\u043c\u0438\u043d\u0430\u0440\u043e\u0432 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u043c\u0443 \u0437\u0440\u0435\u043d\u0438\u044e \u043e\u0442 Samsung \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Stepik.org \u0421\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u0435\u0440\u0435\u0434 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u043c\u0443 \u0437\u0440\u0435\u043d\u0438\u044e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c, \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e(\u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e) \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044e\u0442 \u0440\u0435\u0431\u044f\u0442\u0430: https:\/\/stepik.org\/course\/50352\/info"}}