{"cell_type":{"bbb16487":"code","64f83b01":"code","f0d2dd4b":"code","9d2952fe":"code","78a5b204":"code","25d86633":"code","27111422":"code","7e2885e8":"code","99ac3be5":"code","274b8409":"code","26d99039":"code","34fb85ad":"code","8db5f841":"code","40d3a0be":"markdown"},"source":{"bbb16487":"# L\u0130BRARY ADD \nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport os\nprint(os.listdir(\"..\/input\"))\n","64f83b01":"# We are reading our data\ndata = pd.read_csv('..\/input\/cardio_train.csv' , sep = ';' )\ndata.head()\n","f0d2dd4b":"# id  unnecessary \n# id is drop \ndata.drop(['id'] ,axis = 1 ,inplace = True)\n\ny = data.cardio.values\n# CARD\u0130O out of Data \nx_data = data.drop(['cardio'],axis = 1 )\nx_data.head()","9d2952fe":"# normalization \nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))\nx.head()\n\n","78a5b204":"from sklearn.model_selection import train_test_split \nx_train , x_test ,y_train , y_test =train_test_split(x , y  , test_size = 0.2 , random_state = 42 )\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","25d86633":"# weigh and bias function \n#parameter initialize and sigmoid function \n#dimension  = 11 :) \ndef initialize_weights_and_bias(dimension):\n    w = np.full((dimension , 1 ) , 0.01)\n    b = 0.0\n    return w,b \n\n# example \n#print(initialize_weight_and_bias(11))\n\ndef sigmoid(z):\n    y_head = 1 \/ (1 + np.exp(-z))\n    return y_head \n\n\n\n","27111422":"def forward_backward_propagation(w,b,x_train,y_train):\n    #forward propagation\n    z = np.dot(w.T ,x_train) + b \n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/ x_train.shape[1]\n    \n    #backward propagations\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients\n    \n\n    ","7e2885e8":"#updating \ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","99ac3be5":"#predict \ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","274b8409":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 100)    \n","26d99039":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))\n\n","34fb85ad":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} NN Score: {:.2f}%\".format(3, knn.score(x_test.T, y_test.T)*100))\n","8db5f841":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train.T, y_train.T)\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(nb.score(x_test.T,y_test.T)*100))","40d3a0be":"# Cardiovascular Disease \n\nWe have a data which classified if patients have Cardiovascular  disease or not according to features in it. We will try to use this data to create a model which tries predict if a patient has this disease or not. We will use logistic regression (classification) algorithm.\n\nCardiovascular Disease dataset\nThe dataset consists of 70 000 records of patients data, 11 features + target.   \n\nidID number\nagein days\ngender1 - women, 2 - men\nheightcm\nweightkg\nap_hiSystolic blood pressure\nap_loDiastolic blood pressure\ncholesterol1: normal, 2: above normal, 3: well above normal\ngluc1: normal, 2: above normal, 3: well above normal\nsmokewhether patient smokes or not\nalcoBinary feature\nactiveBinary feature\ncardioTarget variable\n\n\n\n\n"}}