{"cell_type":{"a324877d":"code","4d48b716":"code","7e7063ea":"code","84700e46":"code","a834d7b9":"code","c9b213e2":"code","2ab3a944":"code","4b166a51":"code","fb19d5c3":"code","701844f7":"code","aefe88bb":"code","80fe9470":"code","734dcaa8":"code","2fe799c9":"code","6ed9083a":"code","7617a5d9":"code","5ab8da0b":"code","671e9d92":"code","8da5b5d6":"code","33b2032d":"code","fcadebcb":"code","2620b6b9":"code","7014f966":"code","3558cabd":"code","19673ff0":"code","ae655525":"code","4f099deb":"code","497c535c":"code","6e4c24e3":"code","40eb1d4f":"code","7b6ffbe3":"code","e214c61f":"code","a7c16d80":"code","9c366af4":"code","605f86cf":"code","c4e01593":"code","4a0cdb0b":"code","64bc162e":"code","1cdc029a":"code","5fa9f03a":"code","b430d92e":"code","a6b0bdbd":"code","5b04498a":"code","8096b0b9":"code","9075c930":"code","99b0f329":"code","39e63f80":"code","3902b92f":"code","229ca916":"code","1e1403d9":"code","cb3b25a0":"code","7fc8b8a3":"code","5a7f1635":"code","3e777c3b":"code","a93c1791":"code","2d7adbfa":"code","f10d0717":"code","bb0e1dfc":"code","bdc01060":"code","631ba1e6":"code","30c0e156":"code","2aa5fa97":"code","778ff41c":"code","f92278f0":"code","006aa450":"code","3e8509e1":"code","2d08fc5a":"code","5c2df084":"code","0531fdcd":"markdown","56fb3b57":"markdown","826ef27b":"markdown","6fd9791b":"markdown","2ad95efb":"markdown","1da40e63":"markdown","dbfcce7d":"markdown","cc67ae4a":"markdown","9e5d1f1c":"markdown","f0ad74c4":"markdown","f6944ef0":"markdown","1607e648":"markdown","080c6999":"markdown","d51a9406":"markdown","22c767d0":"markdown","b28110e3":"markdown","d302b9a0":"markdown","5eccdce7":"markdown","70f28c02":"markdown","90919590":"markdown","7eefbfa2":"markdown","dd04ba13":"markdown","9d765254":"markdown","79fb0966":"markdown","14f79d3a":"markdown","cbd5791d":"markdown","321c38c8":"markdown","5e50448a":"markdown","fccd9a29":"markdown","59152df5":"markdown","a33b8d0d":"markdown","87226a9b":"markdown","c41229bd":"markdown","479f5ac9":"markdown","96ec48be":"markdown","f9d4c354":"markdown","0d34679f":"markdown","21a41aaa":"markdown","5fff0df6":"markdown","30cd50ee":"markdown","2d8f83c0":"markdown","0b31011e":"markdown","be788eb9":"markdown","a5e84170":"markdown","2c3a1096":"markdown","2e96667a":"markdown","956b3c40":"markdown","6687c754":"markdown","775bd51a":"markdown","ac93511a":"markdown","74391ee0":"markdown","65f5d8ac":"markdown"},"source":{"a324877d":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from jupyterthemes import jtplot\n#jtplot.style(theme='chesterish')\n\nfrom scipy.spatial.distance import euclidean #used for fdt\nimport fastdtw as fdt #fast dynamic time warping\nfrom statsmodels.tsa.seasonal import seasonal_decompose #decompose seasonality\nfrom statsmodels.tsa.stattools import adfuller #test if series is stationary (then can perform ARIMA)\n\n\"\"\"from pyramid.arima import auto_arima #auto ARIMA model (pip install pyramid-arima)\"\"\"\nimport xgboost as xgb #xgboost model\nimport tensorflow as tf #DNN estimator model\n\npath = '..\/input\/'","4d48b716":"plt.rcParams[\"figure.figsize\"] = [16,9]","7e7063ea":"def SMAPE (forecast, actual):\n    \"\"\"Returns the Symmetric Mean Absolute Percentage Error between two Series\"\"\"\n    masked_arr = ~((forecast==0)&(actual==0))\n    diff = abs(forecast[masked_arr] - actual[masked_arr])\n    avg = (abs(forecast[masked_arr]) + abs(actual[masked_arr]))\/2\n    \n    print('SMAPE Error Score: ' + str(round(sum(diff\/avg)\/len(forecast) * 100, 2)) + ' %')","84700e46":"def Fuller(TimeSeries):\n    \"\"\"Provides Fuller test results for TimeSeries\"\"\"\n    stationary_test = adfuller(TimeSeries)\n    print('ADF Statistic: %f' % stationary_test[0])\n    print('p-value: %f' % stationary_test[1])\n    print('Critical Values:')\n    for key, value in stationary_test[4].items():\n        print('\\t%s: %.3f' % (key, value))","a834d7b9":"\"\"\"def ARIMA(TimeSeries, maxP, maxQ, maxD):\"\"\"\n    \"\"\"Returns ARIMA model (not fitted)\"\"\"\n    \"\"\"stepwise_model = auto_arima(TimeSeries, start_p=1, start_q=1,\n                           max_p=maxP, max_q=maxQ,\n                           start_P=0, seasonal=True,\n                           d=1, max_d=maxD, D=1, trace=False,\n                           error_action='ignore',\n                           suppress_warnings=True,\n                           stepwise=True,\n                           maxiter=500)\n    print(stepwise_model.aic())\n    return stepwise_model\"\"\"","c9b213e2":"def xboost(x_train, y_train, x_test):\n    \"\"\"Trains xgboost model and returns Series of predictions for x_test\"\"\"\n    dtrain = xgb.DMatrix(x_train, label=y_train, feature_names=list(x_train.columns))\n    dtest = xgb.DMatrix(x_test, feature_names=list(x_test.columns))\n\n    params = {'max_depth':3,\n              'eta':0.2,\n              'silent':1,\n              'subsample':1}\n    num_rounds = 1500\n\n    bst = xgb.train(params, dtrain, num_rounds)\n    \n    return pd.Series(bst.predict(dtest))","2ab3a944":"df = pd.read_csv(path +'train.csv', index_col=0)\ndf.index = pd.to_datetime(df.index)\ndf.tail()","4b166a51":"df.info()","fb19d5c3":"stores = pd.DataFrame(df.groupby(['date','store']).sum()['sales']).unstack()\nstores = stores.resample('7D',label='left').sum()\nstores.sort_index(inplace = True)","701844f7":"stores.plot(figsize=(16,9), title='Weekly Store Sales', legend=None)\nplt.show()","aefe88bb":"store_qtr = pd.DataFrame(stores.quantile([0.0,0.25,0.5,0.75,1.0],axis=1)).transpose()\nstore_qtr.sort_index(inplace = True)\nstore_qtr.columns = ['Min','25%','50%','75%','Max']\nstore_qtr.plot(figsize=(16,9), title='Weekly Quartile Sales')\nplt.show()","80fe9470":"seasonal = seasonal_decompose(pd.DataFrame(store_qtr['50%']).diff(1).iloc[1:,0],model='additive')\nseasonal.plot()\nplt.suptitle = 'Additive Seasonal Decomposition of Average Store Week-to-Week Sales'\nplt.show()","734dcaa8":"Fuller(pd.DataFrame(store_qtr['50%']).diff(1).iloc[1:,0])","2fe799c9":"items = pd.DataFrame(df.groupby(['date','item']).sum()['sales']).unstack()\nitems = items.resample('7D',label='left').sum()\nitems.sort_index(inplace = True)\n\nitems.tail(13)","6ed9083a":"items.plot(figsize=(16,9), title='Weekly Item Sales', legend=None)\nplt.show()","7617a5d9":"item_WK_qtr = pd.DataFrame(items.quantile([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],axis=1)).transpose()\nitem_WK_qtr.sort_index(inplace = True)\nitem_WK_qtr.columns = ['Min','10%','20%','30%','40%','50%','60%','70%','80%','90%','Max']\nitem_WK_qtr.plot(figsize=(16,9), title='Weekly Quartile Sales')\nplt.show()","5ab8da0b":"seasonal = seasonal_decompose(pd.DataFrame(item_WK_qtr['50%']).diff(1).iloc[1:,0],model='additive')\nseasonal.plot()\nplt.title = 'Additive Seasonal Decomposition of Average Item Week-to-Week Sales'\nplt.show()","671e9d92":"Fuller(pd.DataFrame(item_WK_qtr['50%']).diff(1).iloc[1:,0])","8da5b5d6":"store_item = df.groupby(by=['item','store']).sum()['sales'].groupby(level=0).apply(\n    lambda x: 100* x\/ x.sum()).unstack()\nsns.heatmap(store_item, cmap='Blues', linewidths=0.01, linecolor='gray').set_title(\n    'Store % of Total Sales by Item')\nplt.show()","33b2032d":"item_store = df.groupby(by=['store','item']).sum()['sales'].groupby(level=0).apply(\n    lambda x: 100* x\/ x.sum()).unstack()\nsns.heatmap(item_store , cmap='Blues', linewidths=0.01, linecolor='gray').set_title(\n    'Item % of Total Sales by Store')\nplt.show()","fcadebcb":"df['Day'] = df.index.weekday_name\ndf.head()","2620b6b9":"dow_store = df.groupby(['store','Day']).sum()['sales'].groupby(level=0).apply(\n    lambda x: 100* x\/ x.sum()).unstack().loc[:,['Monday',\n                                                'Tuesday',\n                                                'Wednesday',\n                                                'Thursday',\n                                                'Friday',\n                                                'Saturday',\n                                                'Sunday']]\nsns.heatmap(dow_store, cmap='Blues', linewidths=0.01, linecolor='gray').set_title(\n    'Day % of Total Sales by Store')\nplt.show()","7014f966":"dow_item = df.groupby(['item','Day']).sum()['sales'].groupby(level=0).apply(\n    lambda x: 100* x\/ x.sum()).unstack().loc[:,['Monday',\n                                                'Tuesday',\n                                                'Wednesday',\n                                                'Thursday',\n                                                'Friday',\n                                                'Saturday',\n                                                'Sunday']]\nsns.heatmap(dow_item, cmap='Blues', linewidths=0.01, linecolor='gray').set_title(\n    'Day % of Total Sales by Item')\nplt.show()","3558cabd":"dow = pd.DataFrame(df.groupby(['date','Day']).sum()['sales']).unstack()['sales'].loc[:,\n                                                                                ['Monday',\n                                                                               'Tuesday',\n                                                                               'Wednesday',\n                                                                               'Thursday',\n                                                                               'Friday',\n                                                                               'Saturday',\n                                                                               'Sunday']]\ndow = dow.resample('7D',label='left').sum()\ndow.sort_index(inplace = True)","19673ff0":"dow.plot(figsize=(16,9), title='Sales by Day of Week')\nplt.show()","ae655525":"train = item_WK_qtr[:-13]\ntest = df.loc[df.index >= pd.to_datetime('October 3, 2017')] # last 13 weeks of data","4f099deb":"store_pct = store_item.transpose()\nstore_pct","497c535c":"fitted_items_WK = []\nqtr_list = [0] *11\n\nfor column in items:\n    for c in range(11):\n        qtr_list[c] = [fdt.fastdtw(items[column],item_WK_qtr.iloc[:,c], dist= euclidean)[0], c]\n    qtr_list.sort()\n    fitted_items_WK.append([column[1], qtr_list[0][1], qtr_list[0][0]])","6e4c24e3":"\"\"\"ARIMA_predictions = pd.DataFrame()\n\nfor column in item_WK_qtr:\n    model = ARIMA(item_WK_qtr[column], 52, 52, 52)\n    model.fit(train[column])\n    ARIMA_predictions[column] = model.predict(n_periods=13)\"\"\"","40eb1d4f":"\"\"\"item_WK_predictions = pd.DataFrame()\n\nfor i in range(50):\n    item_WK_predictions[fitted_items_WK[i][0]] = ARIMA_predictions.iloc[:,fitted_items_WK[i][1]]\n\nitem_WK_predictions.head()\"\"\"","7b6ffbe3":"\"\"\"item_Day_pred = []\n\nfor column in item_WK_predictions:\n    for i, row in item_WK_predictions.iterrows():\n        for col in range(7):\n            item_Day_pred.append([i, dow_item.columns[col], column, dow_item.iloc[int(column)-1,col]\n                                 * item_WK_predictions[column][i]\/100])\n            \nitem_Day_fcst = pd.DataFrame(item_Day_pred, columns=['Week #','Day','item','Prediction'])\n\nitem_Day_fcst.head()\"\"\"","e214c61f":"\"\"\"store_item = pd.DataFrame(store_item.stack()).reset_index()\nstore_item.columns = ['item','store','pct']\n\nitem_Day_fcst = item_Day_fcst.merge(store_item, on= 'item')\n\nitem_Day_fcst['sales'] = item_Day_fcst['Prediction'] * item_Day_fcst['pct']\/100\"\"\"","a7c16d80":"\"\"\"item_Day_fcst = item_Day_fcst.loc[:,['Week #','Day','store','item','sales']]\n\nitem_Day_fcst.head()\"\"\"","9c366af4":"\"\"\"def str_to_date(row):\"\"\"\n    \"\"\"Takes day of week string and week offset to calculate date\"\"\"\n    \"\"\"switcher = {\n        'Tuesday': 0, #data starts on a Tuesday, so 0 offset\n        'Wednesday': 1,\n        'Thursday': 2,\n        'Friday': 3,\n        'Saturday': 4,\n        'Sunday': 5,\n        'Monday': 6\n    }\n    weeks = pd.to_timedelta(7* row['Week #'], unit='D')\n    days = pd.to_timedelta(switcher.get(row['Day']), unit='D')\n    \n    return pd.to_datetime('October 3, 2017') + weeks + days\n\n\nitem_Day_fcst['Date'] = item_Day_fcst.apply(lambda row: str_to_date(row), axis=1)\nitem_Day_fcst.index = item_Day_fcst['Date']\"\"\"","605f86cf":"\"\"\"item_Day_fcst.sort_values(['item','store','Date'], inplace=True)\nitem_Day_fcst['sales']= round(item_Day_fcst['sales'], 0)\n\nitem_Day_fcst = item_Day_fcst[['store','item','sales']].loc[\n    item_Day_fcst.index < pd.to_datetime('January 1, 2018')]\"\"\"","c4e01593":"\"\"\"SMAPE(item_Day_fcst['sales'], test['sales'])\"\"\"","4a0cdb0b":"train = items['sales'][:-13]","64bc162e":"\"\"\"item_WK_predictions = pd.DataFrame()\n\nfor column in items['sales']:\n    model = ARIMA(items['sales'][column], 52, 52, 52)\n    model.fit(train[column])\n    item_WK_predictions[column] = model.predict(n_periods=13)\"\"\"","1cdc029a":"\"\"\"item_Day_pred = []\n\nfor column in item_WK_predictions:\n    for i, row in item_WK_predictions.iterrows():\n        for col in range(7):\n            item_Day_pred.append([i, dow_item.columns[col], column, dow_item.iloc[int(column)-1,col]\n                                 * item_WK_predictions[column][i]\/100])\n            \nitem_Day_fcst = pd.DataFrame(item_Day_pred, columns=['Week #','Day','item','Prediction'])\n\nitem_Day_fcst.head()\"\"\"","5fa9f03a":"\"\"\"item_Day_fcst = item_Day_fcst.merge(store_item, on= 'item')\n\nitem_Day_fcst['sales'] = item_Day_fcst['Prediction'] * item_Day_fcst['pct']\/100\"\"\"","b430d92e":"\"\"\"item_Day_fcst = item_Day_fcst.loc[:,['Week #','Day','store','item','sales']]\"\"\"","a6b0bdbd":"\"\"\"item_Day_fcst['Date'] = item_Day_fcst.apply(lambda row: str_to_date(row), axis=1)\nitem_Day_fcst.index = item_Day_fcst['Date']\"\"\"","5b04498a":"\"\"\"item_Day_fcst.sort_values(['item','store','Date'], inplace=True)\nitem_Day_fcst['sales']= round(item_Day_fcst['sales'], 0)\n\nitem_Day_fcst = item_Day_fcst[['store','item','sales']].loc[\n    item_Day_fcst.index < pd.to_datetime('January 1, 2018')]\"\"\"","8096b0b9":"\"\"\"SMAPE(item_Day_fcst['sales'], test['sales'])\"\"\"","9075c930":"ns_per_day = 86400000000000\nstart_date = pd.to_datetime('January 1, 2013')","99b0f329":"itm_quart = pd.DataFrame(fitted_items_WK, columns=['item','item_quart','item_metric'])\n\ndef add_feat(df, train_end_str):\n    \"\"\"Adds Features to DataFrame and Takes Averages for Dates Before train_end_str\"\"\"\n    \n    dataf = df\n    \n    dataf['Weekday'] = dataf.index.dayofweek\n    dataf['Is_Mon'] = (dataf.index.dayofweek == 0) *1\n    dataf['Is_Tue'] = (dataf.index.dayofweek == 1) *1\n    dataf['Is_Wed'] = (dataf.index.dayofweek == 2) *1\n    dataf['Is_Thu'] = (dataf.index.dayofweek == 3) *1\n    dataf['Is_Fri'] = (dataf.index.dayofweek == 4) *1\n    dataf['Is_Sat'] = (dataf.index.dayofweek == 5) *1\n    dataf['Is_Sun'] = (dataf.index.dayofweek == 6) *1\n    dataf['Is_wknd'] = dataf.index.dayofweek \/\/ 4 # Fri-Sun are 4-6, Monday is 0 so this is valid\n    dataf['Day_Num'] = ((dataf.index - start_date)\/ ns_per_day).astype(int)\n    \n    dataf['Month'] = dataf.index.month\n    dataf['Day_of_Year'] = ((dataf.index - start_date)\/ ns_per_day).astype(int) % 364\n    dataf['Year'] = ((dataf.index - start_date)\/ ns_per_day).astype(int) \/\/ 364 -1\n    dataf['Day_of_Quarter'] = ((dataf.index - start_date)\/ ns_per_day).astype(int) % 91\n    dataf['Quarter'] = (((dataf.index - start_date)\/ ns_per_day).astype(int) \/\/ 91) % 4\n    dataf.reset_index(inplace=True)\n    \n    # Add item quartile as feature\n    dataf = dataf.merge(itm_quart, on='item').drop('item_metric', axis=1)\n\n    # Add prior year sales as additional feature\n    prior_year_sales = dataf[['date','sales','store','item']]\n    prior_year_sales['date'] += pd.Timedelta('364 days')\n    prior_year_sales.columns =['date','lag_12mo','store','item']\n\n    dataf = dataf.merge(prior_year_sales, on=['date','store','item'])\n    \n    # Add average by item by store by day of year as additional feature\n    avg = dataf.loc[df['date'] < pd.to_datetime(train_end_str), ['Day_of_Year','sales','store','item']].groupby(by=['Day_of_Year','store','item']).mean().reset_index()\n    avg.columns =['Day_of_Year','store','item','DoY_Mean']\n    \n    dataf = dataf.merge(avg, on=['Day_of_Year','store','item'])\n    \n    # Add average by day of week by quarter by item by store as additional feature\n    avg = dataf.loc[df['date'] < pd.to_datetime(train_end_str), ['Quarter','Weekday','sales','store','item']].groupby(by=['Quarter','Weekday','store','item']).mean().reset_index()\n    avg.columns =['Quarter','Weekday','store','item','DoW_Mean']\n    \n    dataf = dataf.merge(avg, on=['Quarter','Weekday','store','item'])\n    \n    # Id's start at 0 instead of 1\n    dataf['store'] -=1\n    dataf['item'] -=1\n    \n    # Remove first year of data as there is no prior year sales for them, then sort to match competition id's\n    dataf = dataf[dataf['Year'] >=0].drop('Year', axis=1).sort_values(['item','store','date'])\n    \n    return dataf","39e63f80":"df_test = add_feat(df, 'October 3, 2017') # Takes average of training data\n\ndf_test.tail(10)","3902b92f":"df_test.head(10)","229ca916":"x_train = df_test.loc[df['date'] < pd.to_datetime('October 3, 2017')].drop(['sales','date','Day', 'Weekday'], axis=1)\ny_train = df_test.loc[df['date'] < pd.to_datetime('October 3, 2017'), 'sales']\n\nx_test = df_test.loc[df['date'] >= pd.to_datetime('October 3, 2017')].drop(['sales','date','Day', 'Weekday'], axis=1).reset_index(drop=True)\ny_test = df_test.loc[df['date'] >= pd.to_datetime('October 3, 2017'), 'sales'].reset_index(drop=True)","1e1403d9":"feat_cols =[]\n\nfor col in x_train.drop(['lag_12mo','DoW_Mean','DoY_Mean'], axis=1).columns:\n    feat_cols.append(tf.feature_column.embedding_column(\n        tf.feature_column.categorical_column_with_identity(col, max(df_test[col])+1),1))\n    \nfeat_cols.append(tf.feature_column.numeric_column(key='lag_12mo'))\nfeat_cols.append(tf.feature_column.numeric_column(key='DoY_Mean'))\nfeat_cols.append(tf.feature_column.numeric_column(key='DoW_Mean'))","cb3b25a0":"input_func = tf.estimator.inputs.pandas_input_fn(x= x_train, y= y_train, batch_size= 180, num_epochs= 80,\n                                                 shuffle= False)","7fc8b8a3":"regressor = tf.estimator.DNNRegressor(hidden_units= [20, 10, 20], feature_columns= feat_cols)","5a7f1635":"regressor.train(input_fn= input_func)","3e777c3b":"pred_fn = tf.estimator.inputs.pandas_input_fn(x= x_test, batch_size =len(x_test), shuffle=False)","a93c1791":"x_test.head()","2d7adbfa":"predictions = list(regressor.predict(input_fn= pred_fn))","f10d0717":"final_pred = []\n\nfor pred in predictions:\n    final_pred.append(pred['predictions'][0])\n\nfinal_pred = pd.DataFrame(final_pred)","bb0e1dfc":"SMAPE(final_pred.iloc[:,0], y_test)","bdc01060":"preds = xboost(x_train, y_train, x_test)","631ba1e6":"SMAPE(preds, y_test)","30c0e156":"df1 = pd.read_csv(path +'train.csv', index_col=0)\ndf2 = pd.read_csv(path +'test.csv', index_col=1)\n\ndf2.head()","2aa5fa97":"df = pd.concat([df1,df2])\ndf.index = pd.to_datetime(df.index)\n\ndf.tail()","778ff41c":"df = add_feat(df, 'April 1, 2018') # Takes average of non-competition data\n\ndf.head(10)","f92278f0":"df.tail(10)","006aa450":"x_train = df[pd.isnull(df['id'])].drop(['id','sales','date'], axis=1)\ny_train = df[pd.isnull(df['id'])]['sales']\n\nx_test = df[pd.notnull(df['id'])].drop(['id','sales','date'], axis=1)","3e8509e1":"preds = pd.DataFrame(xboost(x_train, y_train, x_test)).reset_index()\npreds.columns =['id','sales']","2d08fc5a":"preds.head()","5c2df084":"preds.to_csv('sample.csv', index=False)","0531fdcd":"### Feature Columns\nSetup the feature colunms in the tensorflow model. Most of the features are categorical, the only numeric one is 'lag_12mo'","56fb3b57":"## ARIMA Model\nGeneral ARIMA model that will be used.","826ef27b":"This plot tells us that each item's sales are nearly identical in terms of which days are more popular.\n\nNow let's see if each day generally trends the same as the total week.","6fd9791b":"#### Fitting Models and Forecasting","2ad95efb":"### Store Trends Conclusion\nThere is definitely seasonality in the store sales. Taking the week-to-week difference provides a dataset that is very likely to be stationary (< 1% chance that it's not). If we were to use this as a starting point for our model, we could cluster the stores to the nearest 25% quartile.","1da40e63":"# ARIMA Models\n## Model (1.1) - Clustered Weekly Data\n\nNOTE: Most of the ARIMA model code is commented due to Kaggle only allowing one custom library. Error results are reported at the end of each model.","dbfcce7d":"To really take advantage of the DNN, we need to add features. We won't be adding any rolling\/ expanding windows since they'd be unreliable on the competition data. Most of the engineered features are categorical, with the exception being prior year sales.\n\nBelow are some constants we'll need to use for working with datetimes.","cc67ae4a":"The above plot charts every store's sales by week. But how does the average trend? The 25% quartile?\n\nLet's look:","9e5d1f1c":"The model we'll use is tensorflow's builtin DNNRegressor with 3 hidden layers.","f0ad74c4":"## Store & Item Variability\nWe've seen how stores and items trend by themselves, but do some stores sell more of one item? In other words: do the stores have the same sales mix? Are the items sold evenly (percentage-wise) across all stores?\n\nBelow is a plot for the % distribution of each item's sales across the stores (each row adds to 100%). As we can see, it's very uniform. The takeaway here is that the items are sold evenly across the stores.","f6944ef0":"### Feature Engineering\n**Day of Week**\n + Utilizing pandas builtin dayofweek call to create binary columns for each day of week.\n\n**Month**\n + Utilizing pandas buitlin month call.\n \n**Day of Year**\n + Take the number of days since the data started, then take (mod 364) for a like-for-like day of year.\n + Want to do this instead of calendar day of year because the dates land on different days of the week. Example: January 1 might be a Tuesday one year so it'll be a Wednesday next year.\n \n**Day of Quarter**\n + Take the number of days since the data started, then take the quotient when divided by 91 and put into (mod 4).\n + This is to give us similar quarters, same reasoning as above.\n \n**Day Number**\n  + Number of days since start of train data.\n \n**Quarter**\n + Take the number of days since the data started, then take the quotient when divided by 91.\n + This is to give us similar quarters.\n \n**Is Weekend**\n + Boolean value if the date falls on a weekend. This is because a majority of sales occur between Friday and Sunday.\n \n**Item Quart**\n + Which quartile trend the item most closely resembles. This comes from the dynamic time warping we had done for the ARIMA models.\n \n**12 Month Lag**\n + Prior year's sales (same store, same item, 364 days prior).\n\n**Averages**\n + Averages by item by store for:\n  + Day of Week by Quarter\n  + Day of Year","1607e648":"#### Split Predictions by Store\nReshape the store_item DataFrame and use percentages.","080c6999":"## Item Sales Trends\nNow we'll do the same analysis for the total item sales. And again, we're looking at weekly sales.","d51a9406":"# Metrics and 2 Models\n## Error Metric\nWe'll be using the Symmetric Mean Absolute Percentage Error as our forecasting error metric. Defining a function saves us from writing the code multiple times.","22c767d0":"### Model Performance\nGather predictions into a series then use SMAPE to compare with actual test values.","b28110e3":"#### Convert Week Number and Day of Week into Datetime","d302b9a0":"Using the same xgboost model with same feature engineering. This time we'll use the entire training data.","5eccdce7":"#### Convert Item Weekly Predictions to Daily Predictions\nUse day of week percentages from before to calculate daily item sales.","70f28c02":"Since there are more items than there were stores, we can look at more quartiles. Let's see how every 10% quartile trends.","90919590":"### Day of Week Conclusion\nDay of week does impact sales, however all stores & items have similar distributions. Day of week trends follow general weekly trend.","7eefbfa2":"#### Split Predictions by Store\nReshape the store_item DataFrame and use percentages to calculate daily item sales by store.","dd04ba13":"# DNN Model\n## Model (2) - Feed Forward Neural Network with Daily Data","9d765254":"# Forecasting 3 Months of Sales\nGiven 5 years of daily sales data across 10 stores for 50 items, we have been tasked to forecast the next 3 months of sales. We will be exploring the data using Pandas and building models using ARIMA, tensorflow's DNN regressor, and xgboost.\n\nLet's get started!\n##### NOTE\nThis is my first competition and I'm still learning the models myself. At the end I share what I learned while building this.","79fb0966":"### Training the Model & Forecasting\nSetup the training (input) function in tensorflow. Sending 6 months (180 days) of data to train on at once and will run through the entire dataset 80 times. We won't shuffle the observations for this exercise. Idea being that the order of observations matters since this is a time series.","14f79d3a":"#### Convert Week Number and Day of Week into Datetime\nBased on where the data was split for testing, the weeks start on Tuesdays so there's no offset then. This adds an additional day of data that we'll need to cutoff.\n\nThis is needed so we can remove the additional day in a readable way.","cbd5791d":"# Data Exploration\n## Retrieve Data\nOpen the competition training data. We'll be exploring this before splitting for our models.","321c38c8":"Now that we've forecasted item quartiles, let's forecast for each item separately. This is to see if there's a difference in accuracy.\n\nWe will build an ARIMA model for each item then use percentages to arrive at daily items sales by store.","5e50448a":"### Store vs Item Conclusion\nItems have roughly same percentage sales across all stores. We could use this in our model.","fccd9a29":"### Model Performance\nCompare forecasts to the actual test sales using SMAPE.","59152df5":"The plot above shows the % mix of store sales by day. We can see that the stores are very similar in what days are popular.\n\nLet's do the same for the items.","a33b8d0d":"# XGBoost Model \n## Model (3) - Extreme Gradient Boost with Daily Data\nAccording to the competition description, this model should provide the best accuracy. Let's feed it the same data as the DNN and compare.","87226a9b":"# Import Libraries\nBelow are all the libraries that we'll use (with some extra for notebook aesthetics).","c41229bd":"#### Dynamic Time Warping to 10% Quartiles\nMatches each item to nearest 10% quartile. Outputs list of item id, % quartile \/10, and dtw score.","479f5ac9":"#### Model Accuracy\nThe predictions have been organized the same as the testing data, so we can simply plug both into our error function.\n\nFrom this model we get 19.49% error.","96ec48be":"# My Learnings\n\n## ARIMA\nClustering the items to the nearest quartile keeps roughly the same accuracy as not clustering while taking less time to forecast. The models provided quick results although the least accurate of those tested.\n\n## DNN\nLikely due to the amount of data and how many times the model ran through all the data, the training sessions took a reltaively long time to run. However there was an accuracy boost compared to the ARIMA models. A different neural network structure (i.e. a deep and wide net) could possibly provide even better results.\n\n## XGBoost\nThis model is a beast. It didn't take very long to train and tied for best accuracy. Can see why this model is preferred.","f9d4c354":"We can see there's quite a gap between the 25% quartile and average. However, as the other chart shows as well, each store shares a general seasonality. They have highs and lows during the same periods of time.\n\nLet's take a look at the seasonality aspect of the average. But before that, we're going to track the week-to-week difference.","0d34679f":"Will be using the 10% quartile weekly item sales that was created during the exploratory analysis. Since the competition is predicting the next 3 months of sales, we will use 3 months (13 weeks) of test data.\n\nWe will build an ARIMA model for each quartile then use clustering and percentages to arrive at daily items sales by store.","21a41aaa":"### Item Trend Conclusion\nItem sales are also seasonal. No surprise there. Week-to-week differencing provides a dataset that is very likely to be stationary (< 1% chance that it's not). If we were to use this as a basis for our model, we could cluster the items to the nearest 10% quartiles.","5fff0df6":"## Day of Week Variability\nHow do sales vary by day of week? Is there seasonality as well? Do stores share same trends? ","30cd50ee":"#### Convert Item Weekly Predictions to Daily Predictions\nUsing day of week percentages from before.","2d8f83c0":"Like we saw in the store sales plots, there is seasonality in item sales. Let's break out the seasonal component for the average like we had before:","0b31011e":"# Thanks for Making It to the End!\nThank you for sharing in my first competition! Hopefully you learned something as well. As this is my first competition and kernel, any feedback would be greatly appreciated.","be788eb9":"## XGBoost Model\nGeneral xgboost model that will be used.","a5e84170":"## Findings and Steps Forward\nItems and stores weekly sales have seasonality and can be munged into a stationary dataset. They also have similar day of week variability, and items have roughly same distributions in stores.\n\n### Modeling Process\nSplit the data into train and test data (3 months of test). Will compare several models, all of which are outlined below. The goal is to find the model with the best accuracy.\n#### Model (1.1)\n+ Dynamic Time Warping (DTW) on item *__weekly__* sales to cluster to nearest 10% quartile\n+ Forecast with *__ARIMA__*\n+ Percentages will be used to find item sales by store by day\n\n#### Model (1.2)\n+ Forecast weekly item sales with *__ARIMA__*\n+ Percentages will be used to find item sales by store by day\n\n#### Model (2)\n+ Item *__daily__* sales with added features:\n + Day of year (in mod 364)\n + Day of Quarter (in mod 91)\n + Quarter (in mod 4)\n + Day of week (binary columns)\n + Month\n + Prior year sales\n + Average sales by item by store by day of year\n + Average sales by item by store by day of week by quarter\n + Whether or not a weekend (Fri-Sun)\n + Dynamic Time Warping (DTW) on item weekly sales to cluster to nearest 10% quartile\n+ Forecast with *__feed forward neural network__*\n\n#### Model (3)\n+ Item *__daily__* sales with added features:\n + Day of year (in mod 364)\n + Day of Quarter (in mod 91)\n + Quarter (in mod 4)\n + Day of week (binary columns)\n + Month\n + Prior year sales\n + Average sales by item by store by day of year\n + Average sales by item by store by day of week by quarter\n + Whether or not a weekend (Fri-Sun)\n + Dynamic Time Warping (DTW) on item weekly sales to cluster to nearest 10% quartile\n+ Forecast with *__xgboost__*","2c3a1096":"### Train & Test Data Split\nSplit train and test data by setting the last 91 days (everything after October 3, 2017) as test data.","2e96667a":"#### Model Accuracy\n\nWe get 19.60% error.","956b3c40":"## Model (1.2) - Unclustered Weekly Data","6687c754":"Now to confirm, let's look at the % distribution of each store's sales across the different items (each row adds to 100%).\n\nWe can see that each store overall sold roughly the same percentage of each item.","775bd51a":"# Competition Submission","ac93511a":"#### Fitting Models and Forecasting","74391ee0":"## Store Trends\nHere we're looking to see if there are any seasonality trends in the total store sales. We'll group by week so we can more clearly see trends in the plots.","65f5d8ac":"## Stationarity Test (Dickey Fuller)\nTime Series data should be stationary before applying an ARIMA model. Stationary means that the mean, standard deviation, and variance don't change over time. The function below tests whether or not a Time Series is stationary."}}