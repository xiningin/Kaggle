{"cell_type":{"331b5491":"code","4a036043":"code","cef26cfc":"code","2d158249":"code","09dc7382":"code","c3d42fdb":"code","903700ee":"code","f8d1fb06":"code","b6647f25":"code","d018653c":"code","f1761afd":"code","047242bd":"code","3d53d480":"code","0d8cfca9":"code","d4cc92ca":"code","73e0aa33":"code","d1e87158":"markdown","65e105f3":"markdown","8d9d5ce5":"markdown","34b2f42a":"markdown","a94236b2":"markdown","a038795f":"markdown","3f9dd765":"markdown","226a0398":"markdown","3e91e94b":"markdown","82967b0f":"markdown","1369986f":"markdown","f5d8426d":"markdown","163b24f2":"markdown"},"source":{"331b5491":"# Data Handling & Analysis\nimport datetime\n\nimport numpy as np\nimport pandas as pd\n\n# Data Visualisation\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format='retina'  # enable retina display\n\nimport matplotlib.image as image\n\nfrom matplotlib.patches import Arc\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\n\n# Web Scraping\nimport json\nimport requests\n\nfrom bs4 import BeautifulSoup","4a036043":"def draw_pitch(x_min=0,\n               x_max=105,\n               y_min=0,\n               y_max=68,\n               pitch_color='w',\n               line_color='grey',\n               line_thickness=1.5,\n               point_size=20,\n               orientation='horizontal',\n               aspect='full',\n               ax=None):\n\n    if not ax:\n        raise TypeError('This function is intended to be used with an existing fig and ax in order to allow flexibility in plotting of various sizes and in subplots.')\n\n    if orientation.lower().startswith('h'):\n        first = 0\n        second = 1\n        arc_angle = 0\n\n        if aspect == 'half':\n            ax.set_xlim(x_max \/ 2, x_max + 5)\n\n    elif orientation.lower().startswith('v'):\n        first = 1\n        second = 0\n        arc_angle = 90\n\n        if aspect == 'half':\n            ax.set_ylim(x_max \/ 2, x_max + 5)\n\n    else:\n        raise NameError('You must choose one of horizontal or vertical')\n\n    ax.axis('off')\n\n    rect = plt.Rectangle((x_min, y_min),\n                         x_max,\n                         y_max,\n                         facecolor=pitch_color,\n                         edgecolor='none',\n                         zorder=-2)\n\n    ax.add_artist(rect)\n\n    x_conversion = x_max \/ 100\n    y_conversion = y_max \/ 100\n\n    pitch_x = [0, 5.8, 11.5, 17, 50, 83, 88.5, 94.2, 100]  # pitch x markings\n    pitch_x = [x * x_conversion for x in pitch_x]\n\n    pitch_y = [0, 21.1, 36.6, 50, 63.2, 78.9, 100]  # pitch y markings\n    pitch_y = [x * y_conversion for x in pitch_y]\n\n    goal_y = [45.2, 54.8]  # goal posts\n    goal_y = [x * y_conversion for x in goal_y]\n\n    # side and goal lines\n    lx1 = [x_min, x_max, x_max, x_min, x_min]\n    ly1 = [y_min, y_min, y_max, y_max, y_min]\n\n    # outer boxed\n    lx2 = [x_max, pitch_x[5], pitch_x[5], x_max]\n    ly2 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    lx3 = [0, pitch_x[3], pitch_x[3], 0]\n    ly3 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    # goals\n    lx4 = [x_max, x_max + 2, x_max + 2, x_max]\n    ly4 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    lx5 = [0, -2, -2, 0]\n    ly5 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    # 6 yard boxes\n    lx6 = [x_max, pitch_x[7], pitch_x[7], x_max]\n    ly6 = [pitch_y[2], pitch_y[2], pitch_y[4], pitch_y[4]]\n\n    lx7 = [0, pitch_x[1], pitch_x[1], 0]\n    ly7 = [pitch_y[2], pitch_y[2], pitch_y[4], pitch_y[4]]\n\n    # Halfway line, penalty spots, and kickoff spot\n    lx8 = [pitch_x[4], pitch_x[4]]\n    ly8 = [0, y_max]\n\n    lines = [\n        [lx1, ly1],\n        [lx2, ly2],\n        [lx3, ly3],\n        [lx4, ly4],\n        [lx5, ly5],\n        [lx6, ly6],\n        [lx7, ly7],\n        [lx8, ly8],\n    ]\n\n    points = [[pitch_x[4], pitch_y[3]]]\n\n    circle_points = [pitch_x[4], pitch_y[3]]\n    arc_points1 = [pitch_x[6], pitch_y[3]]\n    arc_points2 = [pitch_x[2], pitch_y[3]]\n\n    for line in lines:\n        ax.plot(line[first],\n                line[second],\n                color=line_color,\n                lw=line_thickness,\n                zorder=-1)\n\n    for point in points:\n        ax.scatter(point[first],\n                   point[second],\n                   color=line_color,\n                   s=point_size,\n                   zorder=-1)\n\n    circle = plt.Circle((circle_points[first], circle_points[second]),\n                        x_max * 0.088,\n                        lw=line_thickness,\n                        color=line_color,\n                        fill=False,\n                        zorder=-1)\n\n    ax.add_artist(circle)\n\n    arc1 = Arc((arc_points1[first], arc_points1[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=128.75,\n               theta2=231.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc1)\n\n    arc2 = Arc((arc_points2[first], arc_points2[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=308.75,\n               theta2=51.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc2)\n\n    ax.set_aspect('equal')\n\n    return ax\n\nprint('Function Defined! \u2714\ufe0f')","cef26cfc":"match_id = 16578\nurl = 'https:\/\/understat.com\/match\/{}'.format(match_id)\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'lxml')","2d158249":"# Retrieve all data with a <script> tag - Field data are in the second <script> group\nscript_data = soup.find_all('script')\nfield_stats = script_data[1].string","09dc7382":"# Strip unnecessary symbols and get only JSON data\nind_start = field_stats.index(\"('\") + 2\nind_end = field_stats.index(\"')\")\n\njson_data = field_stats[ind_start:ind_end]\njson_data = json_data.encode('utf8').decode('unicode_escape')\n\n# Convert string to json format\ndata = json.loads(json_data)","c3d42fdb":"data.keys()","903700ee":"df_home = pd.DataFrame(data['h'])\ndf_away = pd.DataFrame(data['a'])","f8d1fb06":"table = soup.find('div', {'class': 'scheme-block', 'data-scheme': 'stats'})\n\ncols = [val.text for val in table.find_all('div', {'class': 'progress-title'})]\nvals = [val.text for val in table.find_all('div', {'class': 'progress-value'})]\n\nsummary_dict = {}\nj = 0\nfor i in range(len(cols)):\n    summary_dict[cols[i]] = vals[j:j + 2]\n\n    increment = 3 if i == 1 else 2\n    j += increment\n\ndf_summary = pd.DataFrame(summary_dict, index=['Home', 'Away']).T\ndf_summary.drop(['CHANCES'], inplace=True)\ndf_summary.index = ['Teams', 'Goals', 'xG', 'Shots', 'On Target', 'DEEP', 'PPDA', 'xPTS']\ndf_summary","b6647f25":"date = data['h'][0]['date'].split()[0]\ndate = datetime.datetime.strptime(date, '%Y-%m-%d').date()\ndate = date.strftime('%d %B %Y')\n\nprint('Match Date: ', date)","d018653c":"headline = '{} {} - {} {}'.format(df_summary.loc['Teams', 'Home'],\n                                  df_summary.loc['Goals', 'Home'],\n                                  df_summary.loc['Teams', 'Away'],\n                                  df_summary.loc['Goals', 'Away'])\n\nprint('Headline: ', headline)","f1761afd":"teams_full = [\n    'Manchester City', 'Liverpool', 'Chelsea', 'Arsenal', 'West Ham',\n    'Tottenham', 'Manchester United', 'Wolverhampton Wanderers', 'Brighton',\n    'Leicester', 'Crystal Palace', 'Brentford', 'Aston Villa', 'Southampton',\n    'Everton', 'Leeds', 'Watford', 'Burnley', 'Newcastle United', 'Norwich'\n]\n\nteams_short = [\n    'Man. City', 'Liverpool', 'Chelsea', 'Arsenal', 'West Ham', 'Tottenham',\n    'Man. United', 'Wolves', 'Brighton', 'Leicester', 'Cr. Palace',\n    'Brentford', 'Aston Villa', 'Southampton', 'Everton', 'Leeds', 'Watford',\n    'Burnley', 'Newcastle', 'Norwich'\n]\n\nteams_short = [f'{string:^11}' for string in teams_short]\n\nidx = [i for i, v in enumerate(teams_full) if v == df_summary.loc['Teams', 'Home']]\nhome_team_short = teams_short[idx[0]]\n\nidx = [i for i, v in enumerate(teams_full) if v == df_summary.loc['Teams', 'Away']]\naway_team_short = teams_short[idx[0]]\n\nprint('Short teams names\\nHome: {} \\nAway: {}'.format(home_team_short,\n                                                      away_team_short))","047242bd":"url_home = '..\/input\/crests\/{}.png'.format(df_summary.loc['Teams', 'Home'])\nimg_home = image.imread(url_home)\n\nurl_away = '..\/input\/crests\/{}.png'.format(df_summary.loc['Teams', 'Away'])\nimg_away = image.imread(url_away)","3d53d480":"float_cols = ['X', 'Y', 'xG']\nfor df in [df_home, df_away]:\n    df[float_cols] = df[float_cols].astype('float64')","0d8cfca9":"goals_home = df_home[df_home['result'] == 'Goal']\nshots_home = df_home[df_home['result'] != 'Goal']\n\ngoals_away = df_away[df_away['result'] == 'Goal']\nshots_away = df_away[df_away['result'] != 'Goal']","d4cc92ca":"bg_color = '#0f253a'\ngoal_color = 'red'\nedgecolor = 'white'\nplt.rcParams['text.color'] = 'white'\n\nplt.rcParams['font.family'] = 'Century Gothic'\nplt.rcParams.update({'font.size': 24})","73e0aa33":"fig, ax = plt.subplots(figsize=(18.48, 12), facecolor=bg_color)\n\ndraw_pitch(pitch_color=bg_color, line_color='lightgrey', ax=ax)\n\n### 01 - Shots and Goals ###\nfor i, df in enumerate([shots_home, goals_home]):\n    ax.scatter(x=105 - df['X'] * 105,\n               y=68 - df['Y'] * 68,\n               s=df['xG'] * 1024,\n               lw=[2, 1][i],\n               alpha=0.7,\n               facecolor=['none', goal_color][i],\n               edgecolor=edgecolor)\n\nfor i, df in enumerate([shots_away, goals_away]):\n    ax.scatter(x=df['X'] * 105,\n               y=df['Y'] * 68,\n               s=df['xG'] * 1024,\n               lw=[2, 1][i],\n               alpha=0.7,\n               facecolor=['none', goal_color][i],\n               edgecolor=edgecolor)\n\n### 02 - Title & Subtitle ###\nax.text(x=0, y=75, s=headline, size=35, weight='bold')\nax.text(x=0, y=71, s='Premier League 2021-22  |  {}'.format(date), size=20)\n\n### 03 - Team Names ###\nfor i, team in zip([-1, 1], [home_team_short, away_team_short]):\n    ax.text(x=105 \/ 2 + i * 14,\n            y=63,\n            s=team,\n            size=35,\n            ha='center',\n            weight='bold')\n\n### 04 - Team Logos ###\nfor i, img in zip([-1, 1], [img_home, img_away]):\n\n    imagebox = OffsetImage(img, zoom=0.4)\n    ab = AnnotationBbox(imagebox, (105 \/ 2 + i * 14, 56), frameon=False)\n    ax.add_artist(ab)\n\n### 05 - Stats ###\nfeatures = ['Goals', 'xG', 'Shots', 'On Target', 'DEEP', 'xPTS']\nfor i, feature in enumerate(features):\n    if float(df_summary.loc[feature, 'Home']) > float(df_summary.loc[feature, 'Away']):\n        weights = ['bold', 'normal']\n    elif float(df_summary.loc[feature, 'Home']) < float(df_summary.loc[feature, 'Away']):\n        weights = ['normal', 'bold']\n    else:\n        weights = ['normal', 'normal']\n\n    ax.text(x=105 \/ 2,\n            y=46 - i * 8,\n            s=feature,\n            size=22,\n            ha='center',\n            va='center',\n            bbox=dict(facecolor='darkgray',\n                      edgecolor=edgecolor,\n                      alpha=0.85,\n                      pad=0.6,\n                      boxstyle='round'))\n\n    ax.text(x=105 \/ 2 - 14,\n            y=46 - i * 8,\n            s=df_summary.loc[feature, 'Home'],\n            size=20,\n            ha='center',\n            va='center',\n            weight=weights[0],\n            bbox=dict(facecolor='firebrick',\n                      edgecolor='w',\n                      alpha=0.6,\n                      pad=0.6,\n                      boxstyle='round'))\n\n    ax.text(x=105 \/ 2 + 14,\n            y=46 - i * 8,\n            s=df_summary.loc[feature, 'Away'],\n            size=20,\n            ha='center',\n            va='center',\n            weight=weights[1],\n            bbox=dict(facecolor='firebrick',\n                      edgecolor='w',\n                      alpha=0.6,\n                      pad=0.6,\n                      boxstyle='round'))\n\n### 06 - Legend - Outcome ###\nax.text(x=105 \/ 4 + 0, y=-5, s='Outcome:', ha='center')\nax.text(x=105 \/ 4 - 8, y=-10, s='Shot', ha='center')\nax.text(x=105 \/ 4 + 8, y=-10, s='Goal', ha='center')\n\nfor i in range(2):\n    ax.scatter(x=[105 \/ 4 - 14, 105 \/ 4 + 1.5][i],\n               y=-8.8,\n               s=500,\n               lw=[2, 1][i],\n               alpha=0.7,\n               facecolor=[bg_color, goal_color][i],\n               edgecolor=edgecolor)\n\n### 07 - Legend - xG value ###\nax.text(x=3 * 105 \/ 4, y=-5, s='xG Value:', ha='center')\n\nfor i in range(0, 5):\n    ax.scatter(x=[69.8, 73.4, 77.7, 82.4, 87.5][i],\n               y=-8.5,\n               s=((i + 1) * 0.2) * 500,\n               lw=2,\n               color=bg_color,\n               edgecolor=edgecolor)\n\n### 08 - Legend - Credit ###\ncredit_text = 'Data: Understat | Konstantinos Orfanakis'\nax.text(x=105, y=-14, s=credit_text, size=16, ha='right')\n\n# plt.savefig('Figure.png')\nplt.show()","d1e87158":"We can isolate the data for the home and the away teams into separate Pandas DataFrames using the `DataFrame` function.","65e105f3":"Additionally, we can extract the match summary statistics and save them in a new DataFrame. We can use the `BeautifulSoup` object we created earlier and find the `<div>` tag with the `class` and `data-scheme` attributes set to 'scheme-block' and 'stats', respectively.","8d9d5ce5":"<br>\n\n# Functions\n\n## `draw_football_pitch()`\n\nThe function for visualising a football pitch is extracted from the article \u2018[How to Draw a Football Pitch](http:\/\/petermckeever.com\/2020\/10\/how-to-draw-a-football-pitch\/)\u2019 by McKeever (accessed 17-01-2022). The only modification is not showing the two penalty spots as they can easily get confused with missed shots in the final figure.","34b2f42a":"<br>\n\n## Team Logos","a94236b2":"# Football Game Summary \u26bd\ud83d\udcc8\n\n<br>\n\n**Table of Contents:**\n\n- [Libraries](#Libraries)\n- [Functions](#Functions) <br>\n    -[`draw_football_pitch()`](#draw_football_pitch())\n- [Retrieving the Data](#Retrieving-the-Data)\n    - [Match Data](#Match-Data) <br>\n    - [Team Logos](#Team-Logos)\n- [Data Processing](#Data-Processing)\n- [\u2b50 Data Visualisation \u2b50](#Data-Visualisation)\n- [Acknowledgements](#Acknowledgements)\n\n<br>\n\n# Libraries","a038795f":"After creating the ` BeautifulSoup` object, we will follow a routine similar to previous projects ([[2](#Extra-Resources)] and [[3](#Extra-Resources)]) and convert the data into a more readable format.","3f9dd765":"<br>\n\n# Data Visualisation","226a0398":"<br>\n\nWe can extract additional information that will be used in the final figure.","3e91e94b":"<br>","82967b0f":"<br>\n\n# Retrieving the Data\n\n## Match Data\n\nWe can extract the match data from Understat using Python\u2019s `requests` and `BeautifulSoup` libraries. The user only needs to provide the match id found at the end of the URL of a particular match.","1369986f":"The variable `data` is a dictionary with two keys, one for the home team (key 'h') and a second one for the away team (key 'a').","f5d8426d":"<br>\n\n<br>\n\n<br>\n\n---\n\n# Acknowledgements\n\nAll data used in this tutorial are extracted from [Understat](https:\/\/understat.com\/)'s website. The final design of our figure has been influenced by various sources such as [The Analyst](https:\/\/theanalyst.com\/eu\/) (for example, see [this tweet](https:\/\/twitter.com\/OptaAnalyst\/status\/1480486161491664901\/photo\/1)), [Stats Perform](https:\/\/o7dkx1gd2bwwexip1qwjpplu-wpengine.netdna-ssl.com\/wp-content\/uploads\/2020\/11\/Total-Shots-For-and-Against-Beerschot.png), and [Sport24.gr](https:\/\/www.sport24.gr\/football\/zoze-sa-o-thriamvos-ton-analytics.9482938.html)\n\n<br>\n\n# Extra Resources\n\n[1] [How to Draw a Football Pitch](http:\/\/petermckeever.com\/2020\/10\/how-to-draw-a-football-pitch\/) by Peter McKeever (Accessed: 17\/01\/2022)\n\n[2] [Shot Maps](https:\/\/github.com\/mckayjohns\/Viz-Templates\/blob\/master\/code\/shotmaps.ipynb) by McKay Johns (Accessed: 18\/01\/2022)\n\n[3] [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps) by Jos\u00e9 Gonz\u00e1lez (Accessed: 10\/01\/2022) ","163b24f2":"<br>\n\n# Data Processing\n\nThe data processing step for our data is straightforward. We only need to convert the data type for three columns (object to float) and isolate the shot and goal data into two DataFrames for the home and away teams. "}}