{"cell_type":{"5ccffe02":"code","39d7a079":"code","3190f5c9":"markdown"},"source":{"5ccffe02":"import pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\ncolumns = [\"age\", \"workClass\", \"fnlwgt\", \"education\", \"education-num\",\"marital-status\", \"occupation\", \"relationship\", \"race\", \"sex\", \"capital-gain\", \"capital-loss\", \"hours-per-week\", \"native-country\", \"income\"]\ntrain_data = pd.read_csv('..\/input\/adult-incomes-in-the-united-states\/adult.data', names=columns, sep=' *, *', na_values='?')\ntest_data  = pd.read_csv('..\/input\/adult-incomes-in-the-united-states\/adult.test', names=columns, sep=' *, *', skiprows=1, na_values='?')\ntrain_data.info()\ntest_data.info()\nnum_attributes = train_data.select_dtypes(include=['integer'])\nprint(num_attributes.columns)\nnum_attributes.hist(figsize=(10,10))\ncat_attributes = train_data.select_dtypes(include=['object'])\nprint(cat_attributes.columns)\nsns.countplot(y='workClass', hue='income', data = cat_attributes)\nsns.countplot(y='occupation', hue='income', data = cat_attributes)\nX=train_data.select_dtypes(include=['integer'])\nX.head()\nscaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)\ny=train_data.iloc[:,-1]\ngender_encoder = LabelEncoder()\ny = gender_encoder.fit_transform(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nsvc=SVC()\nsvc.fit(X_train,y_train)\ny_pred=svc.predict(X_test)\nprint('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))\nsvc=SVC(kernel='linear',gamma='auto', C=10)\nsvc.fit(X_train,y_train)\ny_pred=svc.predict(X_test)\nprint('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","39d7a079":"import pandas as pd\nimport seaborn as sns\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\ncolumns = [\"age\", \"workClass\", \"fnlwgt\", \"education\", \"education-num\",\"marital-status\", \"occupation\", \"relationship\", \"race\", \"sex\", \"capital-gain\", \"capital-loss\", \"hours-per-week\", \"native-country\", \"income\"]\ntrain_data = pd.read_csv('..\/input\/adult-incomes-in-the-united-states\/adult.data', names=columns, sep=' *, *', na_values='?')\ntest_data  = pd.read_csv('..\/input\/adult-incomes-in-the-united-states\/adult.test', names=columns, sep=' *, *', skiprows=1, na_values='?')\ntrain_data.info()\ntest_data.info()\nnum_attributes = train_data.select_dtypes(include=['integer'])\nnum_attributes.hist(figsize=(10,10))\ncat_attributes = train_data.select_dtypes(include=['object'])\nsns.countplot(y='workClass', hue='income', data = cat_attributes)\nsns.countplot(y='occupation', hue='income', data = cat_attributes)\nX=train_data.select_dtypes(include=['integer'])\nscaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)\ny=train_data.iloc[:,-1]\ngender_encoder = LabelEncoder()\ny = gender_encoder.fit_transform(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nmodel=GaussianNB().fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint('The Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(' The Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","3190f5c9":"Designing and building a prediction model for adult data with a Machine Learning(ML) Classifier to predict whether or not income>50k for a given Adult\u2019s census profile information in your training set."}}