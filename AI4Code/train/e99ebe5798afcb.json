{"cell_type":{"9b297cf6":"code","5a2fcf6c":"code","4192e545":"code","09d25c08":"code","1c83351c":"code","33214a81":"code","1a3150c1":"code","1f6db11b":"code","8e38f4d3":"code","483f9927":"code","cc79cbbd":"code","df1556d7":"code","e06bf8b0":"code","5d1b2e68":"code","0f4f8430":"code","8bef846f":"code","0366530a":"code","cb0a7741":"code","a8adfbe3":"code","2c83b7a3":"code","8568b4d2":"code","ffeabb10":"code","6bc435fb":"code","774b6e26":"code","fb582a77":"code","bd943a36":"code","6a89acfb":"code","e94bcdcf":"code","456987f5":"code","a1b7cf38":"code","1d17e962":"code","2b415682":"code","180db905":"code","ba3b8a54":"code","ca412663":"code","fc0189ad":"code","6094cfca":"code","f2ab0229":"code","dd4f3608":"code","bc21cf09":"markdown","65510453":"markdown","d2eb74e1":"markdown","e84e1870":"markdown","e6fd039f":"markdown","19cd91b3":"markdown","f7fd93c5":"markdown","ea519845":"markdown","20909ba4":"markdown","751d3e87":"markdown","23352d56":"markdown","b2bb65a5":"markdown","28c2adbd":"markdown","c8a8d1f8":"markdown","4eb3f574":"markdown","c6258a33":"markdown","4ca81b04":"markdown","02f13123":"markdown","d723ebcb":"markdown","8832a310":"markdown","f321ccad":"markdown","fd82eb99":"markdown","9c0484ba":"markdown","98a8f096":"markdown","7bca312d":"markdown","3310b58c":"markdown","d855de33":"markdown","cc86a71f":"markdown","dbee3c23":"markdown","71283dc0":"markdown","9c05c507":"markdown","3c8879b8":"markdown","d191964d":"markdown","ea6b2133":"markdown","ab07b580":"markdown"},"source":{"9b297cf6":"!pip install -U lightautoml","5a2fcf6c":"# Importando as bibliotecas\n\n# An\u00e1lise de dados\nimport numpy as np\nimport math\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Split e valida\u00e7\u00e3o\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.metrics import f1_score, accuracy_score\n\n# Modelos\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task","4192e545":"# Importando os dados\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","09d25c08":"# Para saber se h\u00e1 alguma vari\u00e1vel nula no dataset\ntrain.isnull().sum()","1c83351c":"# Informa\u00e7\u00f5es gerais\ntrain.info()","33214a81":"# Dando uma olhada nas primeiras linhas do dataset\ntrain.head()","1a3150c1":"train.describe(include=['O'])","1f6db11b":"train['Cabin'].isnull().sum()","8e38f4d3":"train['Age'].isnull().sum()","483f9927":"# Saber quantos numeros tem de cada sexo\ntrain['Sex'].value_counts()","cc79cbbd":"# Plotando os gr\u00e1ficos para Survived vs. Sex, Pclass e Embarked\nfig, (axis1, axis2, axis3) = plt.subplots(1,3, figsize=(12,4))\n\nsns.barplot(x='Sex', y='Survived', data=train, ax=axis1)\nsns.barplot(x='Pclass', y='Survived', data=train, ax=axis2)\nsns.barplot(x='Embarked', y='Survived', data=train, ax=axis3);","df1556d7":"# Observando a influ\u00eancia da idade na probabilidade de sobreviv\u00eancia\nage_survived = sns.FacetGrid(train, col='Survived')\nage_survived.map(sns.distplot, 'Age')","e06bf8b0":"# Plotando o heatmap para as vari\u00e1veis num\u00e9ricas\nsns.heatmap(train.corr(), cmap='coolwarm', fmt='.2f', linewidths=0.1,\n            vmax=1.0, square=True, linecolor='white', annot=True);","5d1b2e68":"# Vamos transformar as vari\u00e1veis male e female em bin\u00e1rios (como s\u00f3 possuem dois tipos) - transformando de string para int\ndef transformar_sexo(valor):\n    if valor == 'female':\n        return 1\n    else: \n        return 0","0f4f8430":"# Transformando cada linha do Sex em binario\ntrain['Sex_binario'] = train['Sex'].map(transformar_sexo)","8bef846f":"# Descobrindo a m\u00e9dia\nmedia = train['Age'].mean()\n\n# Arredondando a idade\nmedia = math.floor(media)\n\nprint(f'A media de idade \u00e9 de {media} anos')\n\n# Atualizando os dados nulos pela m\u00e9dia\ntrain.update(train['Age'].fillna(media))","0366530a":"# Tipos de classe\ntrain['Pclass_1'] = (train['Pclass'] == '1').astype(int)\ntrain['Pclass_2'] = (train['Pclass'] == '2').astype(int)\ntrain['Pclass_3'] = (train['Pclass'] == '3').astype(int)","cb0a7741":"# Poss\u00edveis locais de embarque\ntrain['Embarked_S'] = (train['Embarked'] == 'S').astype(int)\ntrain['Embarked_C'] = (train['Embarked'] == 'C').astype(int)\ntrain['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)","a8adfbe3":"# Cabines nulas\ntrain['Cabin'].fillna(-1) ","2c83b7a3":"# Mulheres solteiras e casadas\ntrain['Nome_contem_Miss'] = train['Name'].str.contains(\"Miss\").astype(int)\ntrain['Nome_contem_Mrs'] = train['Name'].str.contains(\"Mrs\").astype(int)\n\n# Patentes dos homens\ntrain['Nome_contem_Master'] = train['Name'].str.contains(\"Master\").astype(int)\ntrain['Nome_contem_Mr'] = train['Name'].str.contains(\"Mr\").astype(int)\ntrain['Nome_contem_Col'] = train['Name'].str.contains(\"Col\").astype(int)\ntrain['Nome_contem_Major'] = train['Name'].str.contains(\"Major\").astype(int)","8568b4d2":"train.head()","ffeabb10":"# Split para o treino e valida\u00e7\u00e3o\nnp.random.seed(42)\ndf_train, df_valid = train_test_split(train, test_size=0.2, stratify=train['Survived'])","6bc435fb":"def f1_metric(y_true, y_pred):\n    return f1_score(y_true, (y_pred > 0.5).astype(int))","774b6e26":"# Especificando o modelo para classifica\u00e7\u00e3o bin\u00e1ria com a m\u00e9trica do f1\ntask = Task('binary', metric = f1_metric)","fb582a77":"%%time\n# Determinando a coluna alvo e se quiser excluir alguma coluna \u00e9 s\u00f3 colocar na lista do drop\n\nroles = {'target': 'Survived',\n         'drop': ['PassengerId']}","bd943a36":"# Determinando os par\u00e2metros do modelo inicial\nautoml = TabularAutoML(task = task, \n                       timeout = 600, # 600 seconds = 10 minutes\n                       cpu_limit = 4, # Optimal for Kaggle kernels\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]})","6a89acfb":"# oof= Out_of_fold, um termo da valida\u00e7\u00e3o cruzada 'k-fold' um tipo de out_of_sample usado no treinamento de partes de um modelo.\noof_pred = automl.fit_predict(df_train, roles = roles)","e94bcdcf":"# Usando os dados de valida\u00e7\u00e3o no predict\nvalid_pred = automl.predict(df_valid)","456987f5":"# Criando uma fun\u00e7\u00e3o para verificar a acur\u00e1cia do modelo treinado\ndef acc_score(y_valid, y_pred):\n    return accuracy_score(y_valid, (y_pred > 0.5).astype(int))","a1b7cf38":"treino = acc_score(df_train['Survived'].values, oof_pred.data[:, 0])\nvalid = acc_score(df_valid['Survived'].values, valid_pred.data[:, 0])\n\nprint(f'Acur\u00e1cia do treino: {treino}')\nprint(f'Acur\u00e1cia da valida\u00e7\u00e3o: {valid}')","1d17e962":"automl = TabularUtilizedAutoML(task = task, \n                       timeout = 600, # 600 seconds = 10 minutes\n                       cpu_limit = 4, # Optimal for Kaggle kernels\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]})","2b415682":"oof_pred = automl.fit_predict(df_train, roles = roles)","180db905":"valid_pred = automl.predict(df_valid)","ba3b8a54":"treino = acc_score(df_train['Survived'].values, oof_pred.data[:, 0])\nvalid = acc_score(df_valid['Survived'].values, valid_pred.data[:, 0])\n\nprint(f'Acur\u00e1cia do treino: {treino}')\nprint(f'Acur\u00e1cia da valida\u00e7\u00e3o: {valid}')","ca412663":"# Transformando o sexo em bin\u00e1rio\ntest['Sex_binario'] = test['Sex'].map(transformar_sexo)\n\n# Media da idade\nmedia_t = train['Age'].mean()\nmedia_t = math.floor(media)\ntest.update(test['Age'].fillna(media_t))\n\n# Classes\ntest['Pclass_1'] = (test['Pclass'] == '1').astype(int)\ntest['Pclass_2'] = (test['Pclass'] == '2').astype(int)\ntest['Pclass_3'] = (test['Pclass'] == '3').astype(int)\n\n# Poss\u00edveis locais de embarque\ntest['Embarked_S'] = (test['Embarked'] == 'S').astype(int)\ntest['Embarked_C'] = (test['Embarked'] == 'C').astype(int)\ntest['Embarked_Q'] = (test['Embarked'] == 'Q').astype(int)\n\n# Cabines nulas\ntest['Cabin'].fillna(-1) \n\n# Patentes\ntest['Nome_contem_Miss'] = test['Name'].str.contains(\"Miss\").astype(int)\ntest['Nome_contem_Mrs'] = test['Name'].str.contains(\"Mrs\").astype(int)\ntest['Nome_contem_Master'] = test['Name'].str.contains(\"Master\").astype(int)\ntest['Nome_contem_Mr'] = test['Name'].str.contains(\"Mr\").astype(int)\ntest['Nome_contem_Col'] = test['Name'].str.contains(\"Col\").astype(int)\ntest['Nome_contem_Major'] = test['Name'].str.contains(\"Major\").astype(int)","fc0189ad":"automl = TabularUtilizedAutoML(task = task, \n                       timeout = 600, # 600 seconds = 10 minutes\n                       cpu_limit = 4, # Optimal for Kaggle kernels\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]})\n\noof_pred = automl.fit_predict(train, roles = roles)\ntest_pred = automl.predict(test)","6094cfca":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()","f2ab0229":"submission['Survived'] = (test_pred.data[:, 0] > 0.5).astype(int)\nsubmission.to_csv('modelo_final.csv', index = False)","dd4f3608":"# Confirmando os dados do arquivo\n!head -n10 modelo_final.csv","bc21cf09":"**Pouca gente sabe que o m\u00e9todo df.describe() pode ser usado tamb\u00e9m para ver algo sobre a estat\u00edstica descritiva em colunas que n\u00e3o s\u00e3o n\u00fameros. Para isso, \u00e9 s\u00f3 passar o argumento include=['O'].**","65510453":"## **Podemos observar que:**\n\n - Na coluna Name tem t\u00edtulos diferentes para ambos os sexos como Mr. ou Miss, etc;\n - A coluna PClass tem uma significante rela\u00e7\u00e3o com a sobreviv\u00eancia dos passgeiros;\n - Na coluna Embarked h\u00e1 tr\u00eas lugares distintos \u00fanicos para embarque de passageiros;\n - Nas colunas Cabin e Age cont\u00e9m vari\u00e1veis nulas (n\u00e3o preenchidas);\n - Na coluna Sex, as vari\u00e1veis s\u00e3o nominais (strings);\n \n**Levando em considera\u00e7\u00e3o essas observa\u00e7\u00f5es, \u00e9 necess\u00e1rio transformar os dados para melhorar a performance do algoritmo.**","d2eb74e1":"### Tratando a coluna Pclass\n\nEsta coluna indica o tipo de classe que o passageiro estava, podendo ser da 1\u00aa classe, 2\u00aa ou 3\u00aa.\nVamos criar para cada tipo uma coluna pr\u00f3pria.","e84e1870":"### Tratando a coluna Sex\n\nComo mensionado anteriormente, o algoritmo s\u00f3 aprende com n\u00fameros, ent\u00e3o criei esta fun\u00e7\u00e3o para transformar as duas \u00fanicas strings da vari\u00e1vel **Sex** (Male e Female) em bin\u00e1rio:\n\n* Retorna 1 para feminino\n* Retorna 0 para masculino","e6fd039f":"### Explorando alguns gr\u00e1ficos para entender a import\u00e2ncia das vari\u00e1veis na sobreviv\u00eancia","19cd91b3":"## Aplicando ao teste","f7fd93c5":"\u00c9 importante saber o nome das colunas assim como os tipos de dados e a contagem total de n\u00e3o-nulos. Como os algoritmos trabalham com dados do tipo **inteiro** (n\u00fameros) ou **float** (n\u00fameros quebrados), as colunas do tipo **object** devem ser mudadas.","ea519845":"## An\u00e1lise explorat\u00f3ria e defini\u00e7\u00f5es das vari\u00e1veis\n\nNesta sess\u00e3o vamos explorar os dados para saber se h\u00e1 dados nulos que possam atrapalhar o modelo aprender os padr\u00f5es e fazer uma an\u00e1lise descritiva de cada vari\u00e1vel.","20909ba4":"## Utilizando o LightAutoML - automatic model creation framework\n\nNesta vers\u00e3o eu decidi utilizar o AutoML para encontrar o melhor algoritmo de classifica\u00e7\u00e3o para o desafio, neste caso iremos avaliar qual tiver a maior acur\u00e1cia.\n\nO framework do LightAutoML \u00e9 usado para problemas envolvendo classifica\u00e7\u00e3o bin\u00e1ria ou multiclasses e regress\u00f5es, e em compara\u00e7\u00e3o com outros frameworks ele t\u00eam se mostrado um dos mais r\u00e1pidos e precisos.","751d3e87":"# **Titanic: Machine learning from disaster**\n\n\n## Introdu\u00e7\u00e3o\n\nEm 15 de abril de 1912 ap\u00f3s colidir com um iceberg o navio mais moderno da \u00e9poca, o Titanic, veio a naufragar **matando 1502 pessoas de um total de 2224 passageiros.** O motivo de morrer tanta gente? N\u00e3o havia botes salva-vidas o suficiente para todos na hora do desastre!\n\nObviamente, aqueles que sobreviveram \u00e0 trag\u00e9dia contaram com muita sorte, mas ser\u00e1 que alguns grupos de passageiros n\u00e3o tiveram \"mais sorte\" que outros grupos? Ser\u00e1 que crian\u00e7as e mulheres realmente tiveram mais chances de sobreviver? Ser\u00e1 que o Jack teve menos chances de escapar do seu destino tr\u00e1gico que a Rose, s\u00f3 pelo fato de ele ter embarcado na 3\u00aa Classe?\n\nO desafio do Titanic \u00e9 uma das competi\u00e7\u00f5es mais famosas no mundo da ci\u00eancia de dados e \u00e9 promovida pelo Kaggle.\n\n![Titanic](https:\/\/aventurasnahistoria.uol.com.br\/media\/_versions\/naufragio\/titaniammd_widelg.jpg)","23352d56":"Esse \u00e9 um dos gr\u00e1ficos mais importantes de uma an\u00e1lise explorat\u00f3ria dos dados pois ele mostra a correla\u00e7\u00e3o entre as vari\u00e1veis para compreender algum padr\u00e3o.","b2bb65a5":"### Dicion\u00e1rio de Dados\n\n* **PassengerId:** N\u00famero de identifica\u00e7\u00e3o do passageiro\n* **Survived:** Informa se o passageiro sobreviveu ao desastre \n    *  0 = N\u00e3o\n    *  1 = Sim\n* **Pclass:** Classe do bilhete\n   *  1 = 1\u00aa Classe\n   *  2 = 2\u00aa Classe\n   *  3 = 3\u00aa Classe\n* **Name:** Nome do passageiro\n* **Sex:** Sexo do passageiro\n* **Age:** Idade do passageiro\n* **SibSp:** Quantidade de c\u00f4njuges e irm\u00e3os a bordo\n* **Parch:** Quantidade de pais e filhos a bordo\n* **Ticket:** N\u00famero da passagem\n* **Fare:** Pre\u00e7o da Passagem\n* **Cabin:** N\u00famero da cabine do passageiro\n* **Embarked:** Porto no qual o passageiro embarcou\n   *  C = Cherbourg\n   *  Q = Queenstown\n   *  S = Southampton","28c2adbd":"### Tratando a coluna Age\n\nNeste caso, vou substituir os dados nulos pela m\u00e9dia das idades (geralmente \u00e9 o melhor m\u00e9todo)","c8a8d1f8":"### Passando os dados do teste no modelo:","4eb3f574":"Concatenando o resultado no dataset submission e criando um novo arquivo.","c6258a33":"## M\u00e9trica para valida\u00e7\u00e3o do modelo\n\nO score \u00e9 calculado em rela\u00e7\u00e3o ao n\u00famero de previs\u00f5es corretas que seu modelo fez. Ou seja, \u00e9 considerada apenas a **acur\u00e1cia** do modelo.","4ca81b04":"Saber quantos n\u00fameros tem de cada sexo \u00e9 importante pois na \u00e9poca sabemos quem tinha prioridade para resgate eram crian\u00e7as e mulheres, em outras palavras, os homens foram a maioria que morreram.\n\nNos dados de treino o total de passageiros do sexo masculino \u00e9 **577** e o total do sexo feminino \u00e9 **314**.","02f13123":"### Verificando como ficou o dataset","d723ebcb":"A idade da maioria de quem sobreviveu foi entre 20 a 40 anos.\n\nJ\u00e1 a idade de quem n\u00e3o sobreviveu foi entre 20 e 30 anos.\n\nEm suma, homens crian\u00e7as e homens velhos teve maior influc\u00eancia na sobreviv\u00eancia do que os mais adultos.","8832a310":"### Valida\u00e7\u00e3o com F1_score\n\nUtilizaremos a m\u00e9trica f1_score para prestar mais aten\u00e7\u00e3o no balanceamento do Precision\/Recall do modelo ao inv\u00e9s de apenas medir a acur\u00e1cia.","f321ccad":"## Melhorando o algoritmo utilizando o TabularUtilizedAutoML e retreinando o modelo","fd82eb99":"A Acur\u00e1cia final foi de 84% para o treino e 79% para a valida\u00e7\u00e3o, mas podemos melhorar ainda.","9c0484ba":"## Submiss\u00e3o do resultado\n\nE por fim criaremos um arquivo \"modelo_final.csv\" com as previs\u00f5es do modelo e faremos a submiss\u00e3o no desafio. \n\nObs: Deve ser exatamente igual o arquivo \"gender_submission.csv\"","98a8f096":"### Tratando a coluna Name, separando por t\u00edtulos\n\nE por fim separar os nomes pelos t\u00edtulos.","7bca312d":"Nos gr\u00e1ficos acima, cruzei os dados dos tripulantes que sobreviveram com as colunas Sexo, Classe do bilhete e o porto no qual foi embarcado.\n\n**Vemos que a maioria \u00e9 do sexo feminino da 1\u00aa classe e que embarcou em Cherbourg.**","3310b58c":"Agora vemos um aumento da acur\u00e1cia do modelo tanto do treino quanto da valida\u00e7\u00e3o, sendo **85%** e **81%**!","d855de33":"As vari\u00e1veis **Age** e **Cabin** s\u00e3o as \u00fanicas com dados nulos, iremos trat\u00e1-los mais adiante.","cc86a71f":"## Importando as bibliotecas e os dados","dbee3c23":"---------------------------------------------------------------------------------------------------------------------------------------------","71283dc0":"### Alguns algoritmos que podem ser passados no par\u00e2metros \"general_params\":\n   - 'linear_12'= Linear model\n   - 'lgb'= LightGBM com par\u00e2metros baseados no dataset\n   - 'lgb_tuned' = LightGBM com par\u00e2metros tunados utilizando o Optuna\n   - 'cb' = CatBoost\n   - 'cb_tuned' = CatBoost com hyperpar\u00e2metros","9c05c507":"## Objetivo\n\n* Analisar quais vari\u00e1veis tiveram mais influ\u00eancia na probabilidade de sobreviv\u00eancia dos tripulantes;\n* Construir um modelo que d\u00ea a previs\u00e3o de sobreviv\u00eancia de um passageiro X.","3c8879b8":"### Tratando as cabines nulas\n\nN\u00e3o gosto de utilizar o dropna() pois se perde muitos dados, ent\u00e3o substituirei os dados faltantes por -1 para n\u00e3o impactar tanto no resultado.","d191964d":"## Split e Valida\u00e7\u00e3o\n\nAp\u00f3s a modelagem dos dados, agora devemos fazer o split dos dados e validar o modelo.\n\nNesta sess\u00e3o vamos separar os dados de treino para usar uma parte para treinar o modelo e a outra parte como valida\u00e7\u00e3o antes de usar os dados de teste.","ea6b2133":"### Tratando a coluna Embarked\n\nOutra coluna que se mostrou correlata com a sobreviv\u00eancia foi o Embarked, faremos a mesma coisa que foi feito com a coluna Pclass.","ab07b580":"### Modelagem dos dados:"}}