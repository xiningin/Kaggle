{"cell_type":{"4c1b1090":"code","94b849ed":"code","35901f31":"code","7281cdaf":"code","c0597614":"code","b6fd6a8d":"code","628c51c7":"code","e424f96e":"code","0467ea72":"code","92875e66":"code","557bed42":"code","440d0e22":"code","19a3405c":"code","5ca8d65f":"code","824e9c9c":"code","ce23bf13":"code","90548bfd":"code","e277027f":"code","3bf9eefa":"code","fe1f52e3":"code","95545ba7":"code","be1788dd":"code","8838bb19":"code","e0f318f8":"code","f4bf107e":"code","1fc1c894":"code","7e18ec93":"code","9904819a":"code","f15a953c":"code","1ce09249":"code","b7e2e5a9":"code","a5dc2ac1":"code","0be3a527":"code","03830cbc":"code","b72748b1":"code","c5ba3795":"markdown","0a3470a6":"markdown","3149e6e5":"markdown","9e56ff79":"markdown","2417805b":"markdown","4387738d":"markdown","afa5e639":"markdown","ab8b8f31":"markdown","05acc206":"markdown","49d302a1":"markdown","6e40bbb3":"markdown","70ebe25f":"markdown","91b86521":"markdown","faa35657":"markdown","d9bdda83":"markdown","9daa4415":"markdown","2ca81b6a":"markdown","abbc1149":"markdown","34e236b7":"markdown","96d71501":"markdown","d89ada9a":"markdown","bdd59cad":"markdown","93098488":"markdown","c40de8b4":"markdown","855f448e":"markdown"},"source":{"4c1b1090":"import warnings\nwarnings.filterwarnings('ignore',category=FutureWarning)\n\nimport re\nfrom os import path, getcwd\nfrom datetime import datetime\n\nimport numpy as np\nimport pandas as pd\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_log_error\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom IPython.display import display, HTML\n\npd.set_option('display.max_columns', 100)\nplt.style.use('bmh')\n\nID = 'id'\nTARGET = 'revenue'\nNFOLDS = 5\nSEED = 126\nNROWS = None\nDATA_DIR = '..\/input'\n\nTRAIN_FILE = f'{DATA_DIR}\/train.csv'\nTEST_FILE = f'{DATA_DIR}\/test.csv'","94b849ed":"train_data = pd.read_csv(TRAIN_FILE, nrows=NROWS)\ntest_data = pd.read_csv(TEST_FILE, nrows=NROWS)","35901f31":"series_cols = ['belongs_to_collection', 'genres', 'production_companies',\n               'production_countries', 'spoken_languages', 'Keywords',\n               'cast', 'crew']\ntrain = train_data.copy()\ntest = test_data.copy()\nfor df in [train, test]:\n    for column in series_cols:\n        df[column] = df[column].apply(lambda s: [] if pd.isnull(s) else eval(s))\n\nfull = pd.concat([train, test], sort=False)","7281cdaf":"def uniqueValues(df, col, key):\n    all_values = []\n    for record in df[col]:\n        lst = [d[key] for d in record]\n        all_values.extend(lst)\n    all_values = np.array(all_values)\n    unique, counts = np.unique(all_values, return_counts=True)\n    return pd.DataFrame({ 'Value': unique, 'Counts': counts })\n\ngenres_unique = uniqueValues(full, 'genres', 'name').sort_values(by='Counts', ascending=False)\nlanguages_unique = uniqueValues(full, 'spoken_languages', 'iso_639_1').sort_values(by='Counts', ascending=False)\ntop_languages = languages_unique.iloc[:4]\n\ntest.loc[test['release_date'].isnull() == True, 'release_date'] = '01\/01\/00'","c0597614":"def fixYear(row):\n    year = int(row.split('\/')[2])\n    return row[:-2] + str(year + (2000 if year <= 19 else 1900))\n\ndef extractField(row, value):\n    if row is np.nan: return 0\n    return 1 if value in row else 0\n\nfor df in [train, test]:\n    df['genres_list'] = df['genres'].apply(lambda row: ','.join(d['name'] for d in row))\n    df['genres_count'] = df['genres'].apply(lambda x: len(x))\n\n    df['budget_to_popularity'] = df['budget'] \/ df['popularity']\n    df['budget_to_runtime'] = df['budget'] \/ df['runtime']\n\n    df['prod_companies_list'] = df['production_companies'].apply(lambda row: ','.join(d['name'] for d in row))\n    df['prod_countries_list'] = df['production_countries'].apply(lambda row: ','.join(d['iso_3166_1'] for d in row))\n\n    df['languages_list'] = df['spoken_languages'].apply(lambda row: ','.join(d['iso_639_1'] for d in row))\n\n    for l in top_languages['Value'].values:\n        df['lang_' + l] = df['languages_list'].apply(extractField, args=(l,))\n\n    df['has_homepage'] = df['homepage'].apply(lambda v: pd.isnull(v) == False)\n\n    df['release_date'] = df['release_date'].apply(fixYear)\n    df['release_date'] = pd.to_datetime(df['release_date'])\n\n    date_parts = ['year', 'weekday', 'month', 'weekofyear', 'day', 'quarter']\n    for part in date_parts:\n        part_col = 'release_date' + '_' + part\n        df[part_col] = getattr(df['release_date'].dt, part).astype(int)\n\n    df['collection'] = df['belongs_to_collection'].apply(lambda row: ','.join(d['name'] for d in row))\n    df['has_collection'] = df['collection'].apply(lambda v: 1 if v else 0)","b6fd6a8d":"train.sample(2).T","628c51c7":"full = pd.concat([train, test], sort=False)","e424f96e":"fig = plt.figure(figsize = (20, 6))\nplt.subplot(1, 2, 1)\nsns.distplot(train['revenue'])\nplt.subplot(1, 2, 2)\nsns.distplot(np.log1p(train['revenue']))\nfig.suptitle('Revenue', fontsize=20)\nplt.show()","0467ea72":"plt.figure(figsize=(8, 8))\nplt.scatter(train['release_date_year'], train['revenue'])\nplt.title('Movie revenue per year')\nplt.xlabel('Year')\nplt.ylabel('Revenue')\nplt.show()","92875e66":"top_movies = train.sort_values(by='revenue', ascending=False)\ntop_movies.head(10)[['title', 'revenue']]","557bed42":"train['profit'] = train.apply(lambda row: row['revenue'] - row['budget'], axis=1)","440d0e22":"plt.figure(figsize = (16, 6))\nsns.distplot(train['profit'])\nplt.title('Profit')\nplt.show()","19a3405c":"sns.lmplot('revenue', 'budget', data=train)\nplt.show()","5ca8d65f":"worst_movies = train.sort_values(by='profit', ascending=False)\nworst_movies.head(10)[['title', 'profit', 'budget', 'revenue']]","824e9c9c":"worst_movies = train.sort_values(by='profit', ascending=True)\nworst_movies.head(10)[['title', 'profit', 'budget', 'revenue']]","ce23bf13":"plt.figure(figsize=(8, 8))\ndataTrain = train['release_date_year'].value_counts().sort_index()\ndataTest = test['release_date_year'].value_counts().sort_index()\nplt.plot(dataTrain.index, dataTrain.values, label='train')\nplt.plot(dataTest.index, dataTest.values, label='test')\nplt.title('Number of movies per year')\nplt.xlabel('Year')\nplt.ylabel('Revenue')\nplt.legend(loc='upper center', frameon=False)\nplt.show()","90548bfd":"fig = plt.figure(figsize = (20, 6))\nplt.subplot(1, 2, 1)\nsns.distplot(full['popularity'])\nplt.subplot(1, 2, 2)\nsns.distplot(np.log1p(full['popularity']))\nfig.suptitle('Popularity (full)', fontsize=20)\nplt.show()","e277027f":"plt.figure(figsize=(20, 8))\n\nplt.subplot(1, 2, 1)\nplt.scatter(full['popularity'], full['revenue'])\nplt.title('Popularity vs revenue (full)')\nplt.xlabel('Popularity')\nplt.ylabel('Revenue')\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.log1p(full['popularity']), np.log1p(full['revenue']))\nplt.title('Popularity vs revenue - log(x + 1) (full)')\nplt.xlabel('Popularity')\nplt.ylabel('Revenue')\n\nplt.show()","3bf9eefa":"plt.figure(figsize=(8, 8))\nplt.scatter(full['release_date_year'], full['popularity'])\nplt.title('Popularity per year (full)')\nplt.xlabel('Year')\nplt.ylabel('Popularity')\nplt.show()","fe1f52e3":"fig = plt.figure(figsize = (20, 6))\nplt.subplot(1, 2, 1)\nsns.distplot(full['budget'])\nplt.subplot(1, 2, 2)\nsns.distplot(np.log1p(full['budget']))\nfig.suptitle('Budget (full)', fontsize=20)\nplt.show()","95545ba7":"plt.figure(figsize=(20, 8))\n\nplt.subplot(1, 2, 1)\nplt.scatter(train['budget'], train['revenue'])\nplt.title('Budget vs revenue')\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.log1p(train['budget']), np.log1p(train['revenue']))\nplt.title('Budget vs revenue - log(x + 1)')\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\n\nplt.show()","be1788dd":"fig = plt.figure(figsize = (20, 6))\nfull['runtime'].fillna(full['runtime'].mean(), inplace=True)\nsns.distplot(full['runtime'])\nfig.suptitle('Runtime (full)', fontsize=20)\nplt.show()","8838bb19":"plt.figure(figsize=(16, 8))\nplt.bar(train['release_date_year'], train['revenue'], label='revenue')\nplt.bar(train['release_date_year'], train['budget'], label='budget')\nplt.title('Revenue\/Budget per year')\nplt.xlabel('Year')\nplt.ylabel('Budget')\nplt.legend(loc='upper center', frameon=False)\nplt.show()","e0f318f8":"plt.figure(figsize=(12, 8))\nplt.bar(train['release_date_month'], train['revenue'], label='revenue')\nplt.bar(train['release_date_month'], train['budget'], label='budget')\nplt.title('Revenue\/Budget per Month')\nplt.xlabel('Month')\nplt.ylabel('Revenue \/ Budget')\nplt.legend(loc='upper center', frameon=False)\nplt.show()","f4bf107e":"plt.figure(figsize=(20, 8))\nplt.bar(train['release_date_year'], train['popularity'], alpha=0.5)\nplt.bar(test['release_date_year'], test['popularity'], alpha=0.5)\nplt.title('Popularity per year')\nplt.xlabel('Popularity (full)')\nplt.ylabel('Year')\nplt.show()","1fc1c894":"plt.figure(figsize=(16, 8))\nax = sns.barplot(x='Counts', y='Value', data=genres_unique, palette='Spectral')\nax.set_title(label='Distribution of genres')\nax.set_ylabel('')\nax.set_xlabel('Number of movies')\nplt.show()","7e18ec93":"companies_unique = uniqueValues(full, 'production_companies', 'name').sort_values(by='Counts', ascending=False)\n\nTOP_COMPANIES = 15\nplt.figure(figsize=(16, 8))\nax = sns.barplot(x='Counts', y='Value', data=companies_unique[:TOP_COMPANIES], palette='Spectral')\nax.set_title(label='Distribution of top {} companies'.format(TOP_COMPANIES))\nax.set_ylabel('')\nax.set_xlabel('Number of movies')\nplt.show()","9904819a":"prodc_unique = uniqueValues(full, 'production_countries', 'iso_3166_1').sort_values(by='Counts', ascending=False)\n\nTOP_COUNTRIES = 15\nplt.figure(figsize=(12, 6))\nax = sns.barplot(y='Counts', x='Value', data=prodc_unique[:TOP_COUNTRIES], palette='hot')\nax.set_title(label='Distribution of top {} production countries'.format(TOP_COUNTRIES))\nax.set_ylabel('')\nax.set_xlabel('')\nplt.show()","f15a953c":"TOP_LANGUAGES = 15\nplt.figure(figsize=(12, 6))\nax = sns.barplot(y='Counts', x='Value', data=languages_unique[:TOP_LANGUAGES], palette='hot')\nax.set_title(label='Distribution of top {} languages'.format(TOP_LANGUAGES))\nax.set_ylabel('')\nax.set_xlabel('')\nplt.show()","1ce09249":"cast_unique = uniqueValues(full, 'cast', 'name').sort_values(by='Counts', ascending=False)\n\nTOP_CAST = 25\nplt.figure(figsize=(16, 8))\nax = sns.barplot(x='Counts', y='Value', data=cast_unique[:TOP_CAST], palette='BuPu_r')\nax.set_title(label='Distribution of top {} actors'.format(TOP_CAST))\nax.set_ylabel('')\nax.set_xlabel('Number of movies')\nplt.show()","b7e2e5a9":"cast_unique = uniqueValues(full, 'cast', 'gender')\n\ncolors = [ '#F2B134', '#068587', '#ED553B']\nlabels=['Gender 0', 'Gender 1', 'Gender 2']\nfig, ax = plt.subplots(figsize=(8, 6))\nax.pie(cast_unique['Counts'], labels=labels, colors=colors, autopct='%1.1f%%')\nax.axis('equal')\nax.set_title(label='Distribution of genders in actors')\nplt.show()","a5dc2ac1":"keywords_unique = uniqueValues(full, 'Keywords', 'name').sort_values(by='Counts', ascending=False)\n\nTOP_COMPANIES = 25\nplt.figure(figsize=(16, 8))\nax = sns.barplot(x='Counts', y='Value', data=keywords_unique[:TOP_COMPANIES], palette='icefire_r')\nax.set_title(label='Most used Keywords')\nax.set_ylabel('')\nax.set_xlabel('')\nplt.show()","0be3a527":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['overview'].fillna('').values)\nwordcloud = WordCloud(margin=10, background_color='white', colormap='Greens', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.title('Top words in overview', fontsize=20)\nplt.axis('off')\nplt.show()","03830cbc":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['title'].fillna('').values)\nwordcloud = WordCloud(margin=10, background_color='white', colormap='Reds', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.title('Top words in titles', fontsize=20)\nplt.axis('off')\nplt.show()","b72748b1":"def getNullCols(df):\n    total_null = df.isnull().sum().sort_values(ascending=False)\n    percent_null = ((df.isnull().sum() \/ df.isnull().count()) * 100).sort_values(ascending=False)\n    missing_data = pd.concat([total_null, percent_null], axis=1, keys=['Total', 'Percent'])\n    return missing_data\nnull_df = getNullCols(train_data).head(10)\n\nplt.figure(figsize=(10, 5))\nsns.barplot(y=null_df.index, x=null_df['Total'], palette='icefire_r')\nplt.title('Total null values by feature')\nplt.xlabel('')\nplt.ylabel('')\nplt.show()\ndisplay(null_df)","c5ba3795":"## Top companies","0a3470a6":"## Popularity","3149e6e5":"### Top Movies by revenue","9e56ff79":"### Top Movies by Profit","2417805b":"## Missing Values","4387738d":"## Year","afa5e639":"## Top languages","ab8b8f31":"![TMDB](https:\/\/i.imgur.com\/nCUVhIO.jpg)\n\n# TMDB - Exploratory Data Analysis\n\nAnalysis with graph and very simple data extraction from the TMDB dataset. I've tried to be curious and find some interesting stuff inside this data. Feel free to comment or suggest some updates or other information that you found interesting!\n\n# Remember to press the UP button!!\n\n#### Goal:\nUsing metadata on over 7,000 past films from The Movie Database and predict their overall worldwide box office revenue.\n\n## Reading data","05acc206":"The number of movies is increasing year after year. The TMDB project was started in **2008**.","49d302a1":"## Profit\nIn accounting, gross profit, gross margin, sales profit, or credit sales is the difference between revenue and the cost of making a product or providing a service. [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Gross_profit)","6e40bbb3":"## Budget","70ebe25f":"![](https:\/\/static.wixstatic.com\/media\/0b319a_d13584c8485e40d680d12e2f54793feb~mv2.jpg\/v1\/fill\/w_504,h_283,al_c,lg_1,q_80\/0b319a_d13584c8485e40d680d12e2f54793feb~mv2.jpg)","91b86521":"## Genres","faa35657":"## Keywords","d9bdda83":"## Most used words","9daa4415":"Is difficult to estimate populairty for older movies.","2ca81b6a":"## Runtime","abbc1149":"## Year","34e236b7":"Count unique values for some features, and create a DataFrame from that.","96d71501":"## Extract basic information\n\nEvaluate pythonic object into real data.","d89ada9a":"### Worst Movies by Profit","bdd59cad":"## Revenue - I got some bad ideas in my head!\n\n<img src=\"https:\/\/static.rogerebert.com\/uploads\/review\/primary_image\/reviews\/great-movie-taxi-driver-1976\/hero_Taxi-Driver-image.jpg\" alt=\"taxidriver\" width=\"70%\"\/>","93098488":"- **duringcreditstinger, aftercreditstinger**: [Post-credits scene](https:\/\/en.wikipedia.org\/wiki\/Post-credits_scene)","c40de8b4":"# Ready for analyze?\n\n<img src=\"https:\/\/i.ytimg.com\/vi\/UXm2cg-fOKU\/maxresdefault.jpg\" alt=\"ironman\" width=\"70%\"\/>","855f448e":"## Cast"}}