{"cell_type":{"21cbf746":"code","74123fef":"code","5bccdbb4":"code","82bcfa08":"code","6edcab45":"code","de5acecd":"code","7c0a8f48":"code","7472b955":"code","061dadfc":"code","c68c9d50":"code","36a62fb0":"code","e459d94a":"code","985d039b":"code","ac4091ee":"code","e49ed20c":"code","9ad2d606":"code","bc1d69c2":"code","59782e72":"code","e3daad4b":"code","fd56eb7d":"code","d788fd16":"code","a79dfd62":"code","34c505b9":"code","a032f12d":"code","30cb6c4a":"code","e6338804":"code","efdb5c07":"markdown","3bd4535c":"markdown","00b71470":"markdown","4d715e48":"markdown","e6a9bf6e":"markdown","20af04f0":"markdown","a7950ec0":"markdown","11b62206":"markdown","da411211":"markdown","2f0bea65":"markdown","6684e00a":"markdown","0e1fea26":"markdown","f21d4c81":"markdown","547601b7":"markdown","bb19cdc5":"markdown","ca2029f8":"markdown","58d0bd45":"markdown","4f315c3e":"markdown","e1577868":"markdown","0451a3ee":"markdown","022b9a6e":"markdown","8e1c8bfd":"markdown"},"source":{"21cbf746":"from shutil import copyfile #I've faced a problem with loading database.sqlite file, with database.db it works well\n\ncopyfile('..\/input\/database.sqlite', 'database.db')","74123fef":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nimport numpy as np # linear algebra\nimport pandas as pd\n\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport math\n\nimport os\nprint(os.listdir())","5bccdbb4":"def load_database():\n    #with sqlite3.connect('..\/input\/database.sqlite') as con:\n    with sqlite3.connect('database.db') as con:\n        all_data = pd.read_sql_query(\"SELECT * from football_data\", con)\n        \n    return all_data\n  \ndata = load_database()","82bcfa08":"BOOKIE = {\n    'BET365': ['B365H', 'B365D', 'B365A'],\n    'PS': ['PSH', 'PSD', 'PSA'],\n    'WH': ['WHH', 'WHD', 'WHA'],\n    'BWIN': ['BWH', 'BWD', 'BWA'],\n    'LB': ['LBH', 'LBD', 'LBA'] \n}\n\ndef load_test_data(division, season: list, data, bookie): \n\n    data = data[data['Div'] == division] #filter by division\n\n    MATCH_INFO = ['Date', 'Season', 'League', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR'] + BOOKIE[bookie]\n    data = data[MATCH_INFO] #take only specific columns\n    data = data.loc[data['Season'].isin(season)] #filter by season\n\n    return data","6edcab45":"#two options - flat bid, e.g 50$ for every match, or bid depends on probability (kelly_crit)\n#kelly_crit returns percentage information what part of our budget should we use, it is even 50% when it is high win probability\n#bid range is between ~10% to ~60%, to achieve comparable results for kelly_crit and flat bid I will use kelly_crit in reference to 500 units (USD, EUR, whatever)\n#mean bid in kelly_crit then is about 100 units, so I will use flat bid equal to 100 units\ndef calculate_bid(kind, prob_success=0, odds_success=0):\n    if kind == 'flat':\n        return 100\n    elif kind == 'kelly_crit':\n        num = (prob_success+0.1)*odds_success - 1\n        denom = odds_success - 1\n        return num\/denom*500","de5acecd":"def check_prob_range(prob_down: list, prob_up: list, data, bid):\n    \"\"\"\n    Find the best pair of prob_up and prob_down in specific dataset.\n    It draws heatmap with account balance after analysing of dataset for every probs pair\n    @param prob_down: Probability difference limits when bet on draw\n    @param prob_up: Probability difference limits when bet on home_team\/away_team\n    @param data: Pandas DataFrame with matches analysis, usually narrowed limited to match from one league\n    @param bid: Kind of bids, flat or kelly_crit\n    @return: x[ind], y[ind], max(cash_tab), min(cash_tab) - prob_down and prob_up for it achieved the highest account balance, highest account balance, lowest account balance\n    \"\"\"\n    #max(prob_down) must be smaller than min(prob_up)\n    x = []\n    y = []\n    cash_tab = []\n    league = data['League'].iloc[0] #take league's name\n    for _prob_down in prob_down: \n        for _prob_up in prob_up:\n            cash = 0 #we start every probs' pair with 0, it will be visible, if it is gain or loss\n            for i, row in data.iterrows(): \n                p1 = 1 \/ (1 + row['B365H']\/row['B365A'] + row['B365H']\/row['B365D'])\n                p2 = 1 \/ (1 + row['B365A']\/row['B365H'] + row['B365A']\/row['B365D'])\n                pX = 1 \/ (1 + row['B365D']\/row['B365A'] + row['B365D']\/row['B365H'])\n\n                if math.fabs(p1 - p2) <= _prob_down: #if algorithm claim to bet on draw\n                    _bid = calculate_bid(bid, pX, row['B365D'])\n                    if row['FTR'] == 'D':\n                        cash += _bid * row['B365D'] - _bid #if it was draw really, update account balance\n                    else:\n                        cash -= _bid #if it was not draw really, update account_balance\n                elif (p1 - p2) >= _prob_up: #if algorithm claim to bet on home_team\n                    _bid = calculate_bid(bid, p1, row['B365H'])\n                    if row['FTR'] == 'H':\n                        cash += _bid * row['B365H'] - _bid\n                    else:\n                        cash -= _bid\n                    pass\n                elif (p2 - p1) >= _prob_up: #if algorithm claim to bet on away_team\n                    _bid = calculate_bid(bid, p2, row['B365A'])\n                    if row['FTR'] == 'A':\n                        cash += _bid * row['B365A'] - _bid\n                    else:\n                        cash -= _bid\n                    pass\n                elif math.fabs(p1 - p2) > _prob_down and math.fabs(p1 - p2) < _prob_up: #if probabilities difference is between prob_down and prob_up algorithm skip that match, doesn't bet\n                    pass\n\n            x.append(_prob_down)\n            y.append(_prob_up)\n            cash_tab.append(cash)\n    \n    #create DataFrame from 3 tables\n    results = pd.DataFrame({\"prob_down\": np.around(x, decimals=2),\n                            \"prob_up\": np.around(y, decimals=2),\n                            \"cash\": cash_tab}, \n                            columns=[\"prob_down\", \"prob_up\", \"cash\"])\n    \n    results = results.pivot(index=\"prob_down\", columns=\"prob_up\", values=\"cash\")\n\n    f, ax = plt.subplots()\n    sns.set()\n    ax = sns.heatmap(results, linewidths=.5)\n    plt.title(f\"Probabilities settings and profit\/loss heatmap: {league}\")\n    plt.show()\n    plt.clf()\n    \n    ind = cash_tab.index(max(cash_tab))\n    return x[ind], y[ind], max(cash_tab), min(cash_tab)","7c0a8f48":"def check_prob_range_draw(prob_down: list, data, bid):\n    \"\"\"\n    Find the best prob_down in specific dataset.\n    It draws heatmap with account balance after analysing of dataset for every prob_down value\n    @param prob_down: Probability difference limits when bet on draw\n    @param data: Pandas DataFrame with matches analysis, usually narrowed limited to match from one league\n    @param bid: Kind of bids, flat or kelly_crit\n    @return: x[ind], y[ind], max(cash_tab), min(cash_tab) - prob_down and prob_up for it achieved the highest account balance, highest account balance, lowest account balance\n    \"\"\"\n    #max(prob_down) must be smaller than min(prob_up)\n    x = []\n    y = []\n    cash_tab = []\n    league = data['League'].iloc[0] #take league's name\n    for _prob_down in prob_down: \n        cash = 0 #we start every probs' pair with 0, it will be visible, if it is gain or loss\n        for i, row in data.iterrows(): \n            p1 = 1 \/ (1 + row['B365H']\/row['B365A'] + row['B365H']\/row['B365D'])\n            p2 = 1 \/ (1 + row['B365A']\/row['B365H'] + row['B365A']\/row['B365D'])\n            pX = 1 \/ (1 + row['B365D']\/row['B365A'] + row['B365D']\/row['B365H'])\n\n            if math.fabs(p1 - p2) <= _prob_down: #if algorithm claim to bet on draw\n                _bid = calculate_bid(bid, pX, row['B365D'])\n                if row['FTR'] == 'D':\n                    cash += _bid * row['B365D'] - _bid #if it was draw really, update account balance\n                else:\n                    cash -= _bid #if it was not draw really, update account_balance\n            else: \n                pass\n\n        x.append(_prob_down)\n        y.append(0)\n        cash_tab.append(cash)\n    \n    #create DataFrame from 3 tables\n    results = pd.DataFrame({\"prob_down\": np.around(x, decimals=2),\n                            \"prob_up\": np.around(y, decimals=2),\n                            \"cash\": cash_tab}, \n                            columns=[\"prob_down\", \"prob_up\", \"cash\"])\n    \n    results = results.pivot(index=\"prob_down\", columns=\"prob_up\", values=\"cash\")\n\n    f, ax = plt.subplots()\n    sns.set()\n    ax = sns.heatmap(results, linewidths=.5)\n    plt.title(f\"Probabilities settings and profit\/loss heatmap: {league}\")\n    plt.show()\n    plt.clf()\n    \n    ind = cash_tab.index(max(cash_tab))\n    return x[ind], y[ind], max(cash_tab), min(cash_tab)","7472b955":"def check_loss_profit(data, bid, prob_down, prob_up):\n    \"\"\"\n    Draws scatter plots with actual account balance for every season and at the end barplot with account balance after every season, and number of correct\/incorrect bet or skipped matches\n    @params data: Pandas DataFrame with matches analysis, usually narrowed limited to match from one league\n    @param bid: Kind of bids, flat or kelly_crit\n    @param prob_down: Probability difference limits when bet on draw\n    @param prob_up: Probability difference limits when bet on home_team\/away_team\n    \"\"\"\n    season = data.Season.unique()\n    season.sort() #sort table of seasons, for hierarchically plot at the end\n    cash_tab = []\n    season_tab = []\n    right_tab = []\n    wrong_tab = []\n    skip_tab = []\n    league = data['League'].iloc[0]\n    if os.path.exists(f\"matches_{league}_{prob_down}_{prob_up}_{bid}\"):\n        os.remove(f\"matches_{league}_{prob_down}_{prob_up}_{bid}\")\n    f = open(f\"matches_{league}_{prob_down}_{prob_up}_{bid}\", \"a\") #I would save match's details to file\n    for k, _season in enumerate(season):\n        cash = 0\n        data_loc = data[data['Season'] == _season]\n        f.write(f\"{_season}\\n\")\n        right=0\n        wrong=0\n        skip=0\n        bid_avg = 0\n        fig = plt.figure(figsize=(16,10)) #fig for profitability plot\n        fig.subplots_adjust(wspace=0.5, hspace=0.5)\n        fig.tight_layout()\n        ax = fig.add_subplot(len(season),1,k+1)\n        ax.margins(x=0, y=0)\n        j = 0 #bet counter\n        \n        for i, row in data_loc.iterrows(): \n            p1 = 1 \/ (1 + row['B365H']\/row['B365A'] + row['B365H']\/row['B365D'])\n            p2 = 1 \/ (1 + row['B365A']\/row['B365H'] + row['B365A']\/row['B365D'])\n            pX = 1 \/ (1 + row['B365D']\/row['B365A'] + row['B365D']\/row['B365H'])\n        \n            if math.fabs(p1 - p2) <= prob_down:\n                _bid = calculate_bid(bid, pX, row['B365D'])\n                bid_avg += _bid #for calculating average bid\n                if row['FTR'] == 'D':\n                    cash += _bid * row['B365D'] - _bid\n                    #print(\"OK! Score DRAW\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid, \"Gain:\", _bid * row['B365D'] - _bid)\n                    f.write(f\"OK! Score DRAW {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid}, Gain: {_bid * row['B365D'] - _bid} \\n\")\n                    right += 1\n                else:\n                    cash -= _bid\n                    #print(\"BAD! Score DRAW\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid)\n                    f.write(f\"BAD! Score DRAW {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid} \\n\")\n                    wrong += 1\n            elif (p1 - p2) >= prob_up:\n                _bid = calculate_bid(bid, p1, row['B365H'])\n                bid_avg += _bid\n                if row['FTR'] == 'H':\n                    cash += _bid * row['B365H'] - _bid\n                    #print(\"OK! Score HOME\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid,  \"Gain:\", _bid * row['B365H'] - _bid)\n                    f.write(f\"OK! Score HOME {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid}, Gain: {_bid * row['B365H'] - _bid} \\n\")\n                    right += 1\n                else:\n                    cash -= _bid\n                    #print(\"BAD! Score HOME\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid)\n                    f.write(f\"BAD! Score HOME {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid} \\n\")\n                    wrong += 1\n                #skip += 1\n            elif (p2 - p1) >= prob_up:\n                _bid = calculate_bid(bid, p2, row['B365A'])\n                bid_avg += _bid\n                if row['FTR'] == 'A':\n                    cash += _bid * row['B365A'] - _bid\n                    #print(\"OK! Score AWAY\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid,  \"Gain:\", _bid * row['B365A'] - _bid)\n                    f.write(f\"OK! Score AWAY {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid}, Gain: {_bid * row['B365A'] - _bid} \\n\")\n                    right += 1\n                else:\n                    cash -= _bid\n                    #print(\"BAD! Score AWAY\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid)\n                    f.write(f\"BAD! Score AWAY {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid} \\n\")\n                    wrong += 1\n                #skip += 1\n            elif math.fabs(p1 - p2) > prob_down and math.fabs(p1 - p2) < prob_up:\n                f.write(f\"No bet! {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} {row['B365H']} {row['B365D']} {row['B365A']} Diff: {math.fabs(p1 - p2)} \\n\")\n                #print(\"No bet!\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], row['B365H'], row['B365D'], row['B365A'], \"Diff:\", math.fabs(p1 - p2))\n                skip += 1\n                \n            ax.scatter(j, cash, marker='.')\n            j += 1 \n        ax.grid(linestyle='--')\n        ax.set(title=f\"Profitability scatter plot - League: {league} - Season: {_season} - Initial cash=0 - Mean bid={np.around(bid_avg\/(wrong+right), decimals=2)} - Total bid={np.around(bid_avg, decimals=2)}\", xlabel=\"Match #\", ylabel=\"Cash profit\/loss\")\n             \n        cash_tab.append(cash)\n        season_tab.append(_season)\n        right_tab.append(right)\n        wrong_tab.append(wrong)\n        skip_tab.append(skip)\n    f.close()   \n    plt.show()\n    \n    results = pd.DataFrame({'Season': season_tab,\n                            'Cash': cash_tab,\n                            'Right': right_tab,\n                            'Wrong': wrong_tab,\n                            'Skip': skip_tab})\n    \n    p1 = sns.barplot(x=\"Season\", y='Cash', data=results)\n    for line in range(0, results.shape[0]): # G - Good\/Correct , B - Bad\/Incorrect , S - Skipped\n        p1.text(line, 0+0.20*max(results['Cash']), str('G: %.0f' % results.Right[line]), horizontalalignment='center')\n        p1.text(line, 0+0.11*max(results['Cash']), str('B: %.0f' % results.Wrong[line]), horizontalalignment='center')\n        p1.text(line, 0+0.02*max(results['Cash']), str('S: %.0f' % results.Skip[line]), horizontalalignment='center')\n    plt.title(f\"Profit\/loss after season: {league} - G - Good, B - Bad, S - Skip\")\n    plt.ylabel(\"Profit\/loss after season\")\n    plt.grid(linestyle='--')\n    plt.show()","061dadfc":"def check_loss_profit_draw(data, bid, prob_down):\n    \"\"\"\n    Draws scatter plots with actual account balance for every season and at the end barplot with account balance after every season, and number of correct\/incorrect bet or skipped matches\n    @params data: Pandas DataFrame with matches analysis, usually narrowed limited to match from one league\n    @param bid: Kind of bids, flat or kelly_crit\n    @param prob_down: Probability difference limits when bet on draw\n    \"\"\"\n    season = data.Season.unique()\n    season.sort() #sort table of seasons, for hierarchically plot at the end\n    cash_tab = []\n    season_tab = []\n    right_tab = []\n    wrong_tab = []\n    skip_tab = []\n    league = data['League'].iloc[0]\n    if os.path.exists(f\"matches_{league}_{prob_down}_{bid}\"):\n        os.remove(f\"matches_{league}_{prob_down}_{bid}\")\n    f = open(f\"matches_{league}_{prob_down}_{bid}\", \"a\") #I would save match's details to file\n    for k, _season in enumerate(season):\n        cash = 0\n        data_loc = data[data['Season'] == _season]\n        f.write(f\"{_season}\\n\")\n        right=0\n        wrong=0\n        skip=0\n        bid_avg = 0\n        fig = plt.figure(figsize=(16,10)) #fig for profitability plot\n        fig.subplots_adjust(wspace=0.5, hspace=0.5)\n        fig.tight_layout()\n        ax = fig.add_subplot(len(season),1,k+1)\n        ax.margins(x=0, y=0)\n        j = 0 #bet counter\n        for i, row in data_loc.iterrows(): \n            p1 = 1 \/ (1 + row['B365H']\/row['B365A'] + row['B365H']\/row['B365D'])\n            p2 = 1 \/ (1 + row['B365A']\/row['B365H'] + row['B365A']\/row['B365D'])\n            pX = 1 \/ (1 + row['B365D']\/row['B365A'] + row['B365D']\/row['B365H'])\n        \n            if math.fabs(p1 - p2) <= prob_down:\n                _bid = calculate_bid(bid, pX, row['B365D'])\n                bid_avg += _bid \n                if row['FTR'] == 'D':\n                    cash += _bid * row['B365D'] - _bid\n                    #print(\"OK! Score DRAW\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid, \"Gain:\", _bid * row['B365D'] - _bid)\n                    f.write(f\"OK! Score DRAW {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid}, Gain: {_bid * row['B365D'] - _bid} \\n\")\n                    right += 1\n                else:\n                    cash -= _bid\n                    #print(\"BAD! Score DRAW\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], \"Bid:\", _bid)\n                    f.write(f\"BAD! Score DRAW {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} Bid: {_bid} \\n\")\n                    wrong += 1\n            else:\n                f.write(f\"No bet! {row['HomeTeam']} {row['FTHG']} - {row['FTAG']} {row['AwayTeam']} {row['FTR']} {row['B365H']} {row['B365D']} {row['B365A']} Diff: {math.fabs(p1 - p2)} \\n\")\n                #print(\"No bet!\", row['HomeTeam'], row['FTHG'],\" - \", row['FTAG'], row['AwayTeam'], row['FTR'], row['B365H'], row['B365D'], row['B365A'], \"Diff:\", math.fabs(p1 - p2))\n                skip += 1\n                \n            ax.scatter(j, cash, marker='.')\n            j += 1 \n        ax.grid(linestyle='--')\n        ax.set(title=f\"Profitability scatter plot - League: {league} - Season: {_season} - Initial cash=0 - Mean bid={np.around(bid_avg\/(right+wrong), decimals=2)} - Total bid={np.around(bid_avg, decimals=2)}\", xlabel=\"Match #\", ylabel=\"Cash profit\/loss\")\n            \n        cash_tab.append(cash)\n        season_tab.append(_season)\n        right_tab.append(right)\n        wrong_tab.append(wrong)\n        skip_tab.append(skip)\n    f.close()\n    plt.show()\n    \n    results = pd.DataFrame({'Season': season_tab,\n                            'Cash': cash_tab,\n                            'Right': right_tab,\n                            'Wrong': wrong_tab,\n                            'Skip': skip_tab})\n    \n    p1 = sns.barplot(x=\"Season\", y='Cash', data=results)\n    for line in range(0, results.shape[0]): # G - Good\/Correct , B - Bad\/Incorrect , S - Skipped\n        p1.text(line, 0+0.20*max(results['Cash']), str('G: %.0f' % results.Right[line]), horizontalalignment='center')\n        p1.text(line, 0+0.11*max(results['Cash']), str('B: %.0f' % results.Wrong[line]), horizontalalignment='center')\n        p1.text(line, 0+0.02*max(results['Cash']), str('S: %.0f' % results.Skip[line]), horizontalalignment='center')\n    plt.title(f\"Profit\/loss after season: {league} - G - Good, B - Bad, S - Skip\")\n    plt.ylabel(\"Profit\/loss after season\")\n    plt.grid(linestyle='--')\n    plt.show()","c68c9d50":"div_tab = data.Div.unique()","36a62fb0":"#I have to subtract E2 - League One because of lack of some data\ne2 = np.array('E2')\ndiv_tab = np.setdiff1d(div_tab,e2)","e459d94a":"data[['Div', 'League']].groupby('Div').head(1)","985d039b":"#kelly_crit\n\n#omit League1 (England) E2, because of lack of some data\n#I will consider prob_down in range from 0.08 to 0.27 and prob_up from 0.35 to 0.75 with steps equal to 0.01 and 0.02, ~320 pairs analysis for every heatmap\nfor div in div_tab:\n    data1 = load_test_data(div, ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\n    prob_down = np.arange(0.08, 0.27, 0.01)\n    prob_up = np.arange(0.35, 0.75, 0.02)\n    \n    prob_down, prob_up, cash_max, cash_min = check_prob_range(prob_down, prob_up, data1, 'kelly_crit')\n    print(div, \": Best prob down:\", prob_down, \"Best prob up:\", prob_up, \"Cash with best probs:\", cash_max, \"Cash with worst probs:\", cash_min, \"\\n\\n\")","ac4091ee":"#flat\n\n#omit League1 (England) E2, because of lack of some data\n#I will consider prob_down in range from 0.08 to 0.27 and prob_up from 0.35 to 0.75 with steps equal to 0.01 and 0.02, ~320 pairs analysis for every heatmap\nfor div in div_tab:\n    data1 = load_test_data(div, ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\n    prob_down = np.arange(0.08, 0.27, 0.01)\n    prob_up = np.arange(0.35, 0.75, 0.02)\n    \n    prob_down, prob_up, cash_max, cash_min = check_prob_range(prob_down, prob_up, data1, 'flat')\n    print(div, \": Best prob down:\", prob_down, \"Best prob up:\", prob_up, \"Cash with best probs:\", cash_max, \"Cash with worst probs:\", cash_min, \"\\n\\n\")","e49ed20c":"#kelly_crit\ndata1 = load_test_data('E0', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'kelly_crit', 0.17, 0.37)","9ad2d606":"#flat\ndata1 = load_test_data('E0', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'flat', 0.17, 0.37)","bc1d69c2":"#kelly_crit\ndata1 = load_test_data('E1', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'kelly_crit', 0.11, 0.37)","59782e72":"#flat\ndata1 = load_test_data('E1', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'flat', 0.11, 0.37)","e3daad4b":"#kelly_crit\ndata1 = load_test_data('G1', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'kelly_crit', 0.11, 0.49)","fd56eb7d":"#flat\ndata1 = load_test_data('G1', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'flat', 0.11, 0.49)","d788fd16":"#kelly_crit\ndata1 = load_test_data('I2', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'kelly_crit', 0.22, 0.49)","a79dfd62":"#flat\ndata1 = load_test_data('I2', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit(data1, 'flat', 0.22, 0.49)","34c505b9":"#E2 #omit League1 (England) because of lack of some data\n#I will consider prob_down in range from 0.06 to 0.31 with step equal to 0.01, ~25 analysis\nfor div in div_tab:\n    data1 = load_test_data(div, ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\n    prob_down = np.arange(0.06, 0.31, 0.01)\n    \n    prob_down, prob_up, cash_max, cash_min = check_prob_range_draw(prob_down, data1, 'flat')\n    print(div, \": Best prob down:\", prob_down, \"Cash with best probs:\", cash_max, \"Cash with worst probs:\", cash_min, \"\\n\\n\")","a032f12d":"#kelly_crit\ndata1 = load_test_data('E0', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit_draw(data1, 'flat', 0.17)","30cb6c4a":"data1 = load_test_data('G1', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit_draw(data1, 'flat', 0.11)","e6338804":"data1 = load_test_data('I2', ['2013\/2014', '2014\/2015', '2015\/2016', '2016\/2017', '2017\/2018', '2018\/2019'], data, 'BET365')\ncheck_loss_profit_draw(data1, 'flat', 0.22)","efdb5c07":"## Championship, E1","3bd4535c":"## Ethniki Katigoria, G1","00b71470":"## Premier League, E0","4d715e48":"## Serie B, I2","e6a9bf6e":"As you maybe know, odds are set according to players' types. If it is a lot of bets for home team, odd goes down etc., because bookmaker always strive to average number of bets for every option. The thing is that we can utilize this fact. People's average bets are often accurate. This fact is known as crowd's power.\n\nThe tactics is very easy, and it doesn't require a lot of time to invest. You have to define probability of every 3 options in match (HomeTeam win, Draw, AwayTeam win).\n\nI would like to check if it is possible to win with bookmaker in a long period of time. \n\nIs it possible to have additional steady income?\n\nBelow tactics is inspired by 'Soccermatics. Mathematical Adventures in the Beautiful Game' - David Sumpter. ","20af04f0":"# Brute-force finding the best probabilities diff for W\/D\/L\n\n### For every analysis, I use data from seasons 2013\/2014 to actual 2018\/2019, it is 5 1\/4 of seasons\n#### Every match from this period is analysed and algorithm decide how it would bet\n#### Data is filtered by league, because of specifics of particular league\n\n#### Analysis will be carried out for both kelly_crit and flat bid, only singles","a7950ec0":"I have applied two tactics.\n* Bet Wins\/Draws\/Losses \n* Bet only Draws\n\n### check_prob_range(prob_down: list, prob_up: list, data, bid)","11b62206":"### check_loss_profit(data, bid, prob_down, prob_up)","da411211":"# Looking for the best limit probabilities\nCrucial part of this tactics is to define limits of probabilities, it is how it is calculated.\nCalculating probability of every result from these formulas:\n* p1 = 1 \/ (1 + home_win\/away_win + home_win\/draw)\n* p2 = 1 \/ (1 + away_win\/home_win + away_win\/draw)\n* pX = 1 \/ (1 + draw\/away_win + draw\/home_win)\n* p1 + p2 + pX should be equal to 1\n\nThen, they are two conditions.\n\nIf win probabilities of each team are similar, bet on draw\n* abs(p1-p2) <= prob_down: bet draw\n\nIf difference of probabilities are clear, bet on team with higher probability\n* if abs(p1-p2) >= prob_up: bet home_team or away_team\n\nEx.<br>\nLet's check English Premier League match.\n### Huddersfield - West Ham\nRound 12\nPre-match odds\n* 1: 3.25\n* X: 3.3\n* 2: 2.4 \n\np1 = 1 \/ (1 + 3.25\/2.4 + 3.25\/3.3) ~= 0.3\npX = 1 \/ (1 + 3.3\/2.4 + 3.3\/3.25) ~= 0.295\np2 = 1 \/ (1 + 2.4\/3.25 + 2.4\/3.3) ~= 0.405 \n\nLet's define prob_down as 0.2 and prob_up as 0.6.<br>\nabs(p1-p2) ~= 0.105<br>\nAccording to bookmaker chances of every team are similar. It means, draw is probably. So, bet on draw because abs(p1-p2) is less than prob_down.<br>\n\nMatch ended with the result 1:1, so we would win e.g 50 * 3.3 = 165 units.","2f0bea65":"## Serie B, I2","6684e00a":"## Ethniki Katigoria, G1","0e1fea26":"## Premier League, E0","f21d4c81":"Results are pretty similar, the same leagues seems interesting.\n\nIn further considerations, I will bear in mind leagues:<br>\n* Premier League, E0 - E0 : Best prob down: 0.16999999999999996 Best prob up: 0.37 Cash with best probs: 10019.0 Cash with worst probs: 3115.0 \n* Championship, E1 - 0.10999999999999999 Best prob up: 0.37 Cash with best probs: 5347.0 Cash with worst probs: -3946.0 \n* Ethniki Katigoria, G1 - G1 : Best prob down: 0.10999999999999999 Best prob up: 0.4900000000000001 Cash with best probs: 6002.0 Cash with worst probs: -231.0 \n* Serie B, I2 - I2 : Best prob down: 0.21999999999999992 Best prob up: 0.4900000000000001 Cash with best probs: 9419.0 Cash with worst probs: -3101.0 ","547601b7":"# calculate_bid(kind, prob_success=0, odds_success=0)\n\n- https:\/\/medium.com\/@siyanayaneva\/kelly-criterion-points-bankroll-management-strategies-in-sports-betting-e2030f673ad1\n- [(Winning Probability x(decimal odds-1) )\u200a\u2014\u200aLosing Probability] : (odds-1).","bb19cdc5":"# Brute-force finding the best down probability for only DRAW","ca2029f8":"### As you can see results are interesting too.\nThere are leagues where this tactics doesn't work, it causes loss, but there are also leagues which make a steady income\n\nIn further considerations, I will bear in mind leagues:<br>\n* Premier League, E0 - E0 : Best prob down: 0.16999999999999993 Cash with best probs: 5594.208873117557 Cash with worst probs: 1587.164440875329\n* Ethniki Katigoria, G1 - G1 : Best prob down: 0.10999999999999997 Cash with best probs: 2452.3843777604397 Cash with worst probs: 469.49233145564847\n* Serie B, I2 - I2 : Best prob down: 0.21999999999999992 Cash with best probs: 5344.895926871129 Cash with worst probs: -612.4576009641183 ","58d0bd45":"There are leagues where this tactics doesn't work, it causes loss, but there are also leagues which make a steady income\n\nIn further considerations, I will bear in mind leagues:<br>\n* Premier League, E0 - E0 : Best prob down: 0.16999999999999996 Best prob up: 0.37 Cash with best probs: 6307.4188694836885 Cash with worst probs: 859.1316222277115\n* Championship, E1 - E1 : Best prob down: 0.10999999999999999 Best prob up: 0.37 Cash with best probs: 4613.2483235407535 Cash with worst probs: -2517.521201457058\n* Ethniki Katigoria, G1 - G1 : Best prob down: 0.10999999999999999 Best prob up: 0.4900000000000001 Cash with best probs: 4531.522292006268 Cash with worst probs: 280.60098316759024\n* Serie B, I2 - I2 : Best prob down: 0.21999999999999992 Best prob up: 0.4900000000000001 Cash with best probs: 5687.992816958601 Cash with worst probs: -2312.5941514308274","4f315c3e":"### check_loss_profit_draw(data, bid, prob_down)","e1577868":"# Summary\n\nGain or loss depends on specifics of every league. It is possible to make profit in leagues where teams represents similar level and it is a lot of draws. Draws give most gain. But it is difficult to predict them.<br>\n\nIt is possible to look deeper and e.g try to experiment with bid, use any Progressive System, strive to create doubles, triples with more probably scores etc.\n\nIt is crucial to discover specifics of league and then adjust tactics to it. For example in English Premier League there are about ~110 matches in season which algorithm qualify as draws, while in Greek Ethniki Katigoria there are only ~40 such matches per season.<br>\nIn kelly_crit bid's strategy it is important to accurately predict home_team\/away_team's win because the bid is often ~250 units, while in flat bid's strategy it is good, when it is a lot of draws.","0451a3ee":"# 5 and 1\/4 seasons only DRAW visualization\nLet's see how account balance was changing through every season.","022b9a6e":"# 5 and 1\/4 seasons W\/D\/L visualization\nLet's see how account balance was changing through every season.","8e1c8bfd":"### check_prob_range_draw(prob_down: list, data, bid)"}}