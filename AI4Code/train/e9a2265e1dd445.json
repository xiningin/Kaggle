{"cell_type":{"3bdb53ff":"code","fb26c03d":"code","d5ca75ab":"code","935210cd":"code","fd71db5b":"code","04d33c13":"code","4d942931":"code","e6578332":"code","a8608951":"code","f9ed2ba2":"code","c8367423":"code","df6b9195":"code","003b3295":"code","f1800027":"code","39f5fd0a":"code","b5606ee5":"code","b36f7a87":"code","4dc7e773":"code","3f5f78df":"code","b4a0f9f0":"code","a0f89d1c":"code","e05a20b8":"code","45d7c1f5":"code","3340dc5e":"code","69f97c17":"code","f152561f":"code","8d2036f5":"code","ba9cce98":"markdown","69f738bc":"markdown","ac5c710c":"markdown","1f23088a":"markdown","44e694b3":"markdown","400e2b21":"markdown","420ee7ec":"markdown","b2c6ee71":"markdown","2af9b39e":"markdown","952d3104":"markdown","ff6a450e":"markdown","ec435af6":"markdown","78dd7eb9":"markdown","ea131e1f":"markdown","2b963f91":"markdown"},"source":{"3bdb53ff":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb26c03d":"from sklearn.datasets import fetch_20newsgroups\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplays_raw_data = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")\nplays = plays_raw_data\n\n# type - results\nspecialTeamsPlay = plays.groupby(['specialTeamsResult', 'specialTeamsPlayType']).size().unstack()\nspecialTeamsPlay","d5ca75ab":"# plays_Punt = plays.loc[plays.specialTeamsPlayType=='Punt'].groupby(['specialTeamsResult', 'specialTeamsPlayType']).size().unstack()\n# plays_Kickoff = plays.loc[plays.specialTeamsPlayType=='Kickoff'].groupby(['specialTeamsResult', 'specialTeamsPlayType']).size().unstack()\n# plays_FieldGoal = plays.loc[plays.specialTeamsPlayType=='Field Goal'].groupby(['specialTeamsResult', 'specialTeamsPlayType']).size().unstack()\n# plays_ExtraPoint = plays.loc[plays.specialTeamsPlayType=='Extra Point'].groupby(['specialTeamsResult', 'specialTeamsPlayType']).size().unstack()\n\n# plays_Punt_Result = ['Blocked Punt', 'Downed', 'Fair Catch','Muffed', 'Non-Special Teams Result', 'Out of Bounds', 'Return', 'Touchback']\n# plays_Punt","935210cd":"# plays_Kickoff_Result = ['Downed', 'Fair Catch', 'Kickoff Team Recovery', 'Muffed', 'Out of Bounds', 'Return', 'Touchback']\n# plays_Kickoff","fd71db5b":"# plays_FieldGoal_Result = ['Blocked Kick Attempt', 'Downed', 'Kick Attempt Good', 'Kick Attempt No Good', 'Non-Special Teams Result', 'Out of Bounds']\n# plays_FieldGoal","04d33c13":"# plays_ExtraPoint_Result = ['Blocked Kick Attempt', 'Kick Attempt Good', 'Kick Attempt No Good', 'Non-Special Teams Result']\n# plays_ExtraPoint","4d942931":"# specialTeamsResultList = ['Blocked Kick Attempt', 'Blocked Punt', 'Downed', \n#                           'Fair Catch', 'Kick Attempt Good', 'Kick Attempt No Good', \n#                           'Kickoff Team Recovery', 'Muffed', 'Non-Special Teams Result', \n#                           'Out of Bounds', 'Return', 'Touchback']\n# plt.figure(figsize=(8,8))\n# plt.pie(plays_ExtraPoint['Extra Point'], explode=(0.5,0.3,0.1,0.5), autopct='%1.1f%%' )\n# plt.legend(loc=7,  labels = plays_ExtraPoint_Result, title = \"Extra Point:\", bbox_to_anchor=(0.6, 0.7))\n# plt.show()\n\n# plt.figure(figsize=(8,8))\n# plt.pie(plays_FieldGoal['Field Goal'], explode=(0.5, 0.5,0.1,0.1,0.5,0.5), autopct='%1.1f%%')\n# plt.legend(loc=7,  labels = plays_FieldGoal_Result, title = \"Field Goal:\", bbox_to_anchor=(0.85, 0.8))\n# plt.show()\n\n# plt.figure(figsize=(8,8))\n# plt.pie(plays_Kickoff['Kickoff'], explode=(0.5,0.5,0.5,0.5,0.5,0.1,0.1), autopct='%1.1f%%')\n# plt.legend(loc=7,  labels = plays_Kickoff_Result, title = \"Kickoff:\", bbox_to_anchor=(1, 0.2))\n# plt.show()\n\n# plt.figure(figsize=(8,8))\n# plt.pie(plays_Punt['Punt'], explode=(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1), autopct='%1.1f%%' )\n# plt.legend(loc=7,  labels = plays_Punt_Result, title = \"Punt:\", bbox_to_anchor=(1.5, 0.5))\n# plt.show()","e6578332":"import numpy as np\n\n# player - results\nkickers_results = plays.groupby(['kickerId','specialTeamsResult']).size().unstack().replace(np.nan, 0).reset_index()\nkickers_results","a8608951":"returners_results = plays.groupby(['returnerId','specialTeamsResult']).size().unstack().replace(np.nan, 0).reset_index()\nreturners_results","f9ed2ba2":"players_raw_data = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/players.csv\")\nplayers = players_raw_data\n\ndef queryName(i):\n    name = players.query('nflId == @i').displayName.values\n    return name ","c8367423":"X=plays\nIDList = X.returnerId\nNameList = []\nfor i in IDList.values:\n    try:\n        if isinstance(i, float):\n            NameList.append(np.nan)\n        else:\n            NameList.append(queryName(int(float(i)))[0])\n    except:\n        NameList.append(np.nan)\n\nX['returner_name'] = NameList\nreturnerName_results = X.groupby(['returner_name','specialTeamsResult']).size().unstack().replace(np.nan, 0).reset_index()\nreturnerName_results","df6b9195":"IDList = X.kickerId\nNameList = []\nfor i in IDList.values:\n    try:\n        if isinstance(i, int):\n            NameList.append(np.nan)\n        else:\n            NameList.append(queryName(i)[0])\n    except:\n        NameList.append(np.nan)\nX['kicker_name'] = NameList\nkickerName_results = X.groupby(['kicker_name','specialTeamsResult']).size().unstack().replace(np.nan, 0).reset_index()\nkickerName_results","003b3295":"# Drop these two rows because of duplicated names:\nkickerName_results = kickerName_results[kickerName_results.kicker_name != \"Aaron Brewer\"]\nkickerName_results = kickerName_results[kickerName_results.kicker_name != \"Chris Jones\"]\nkickerName_results = kickerName_results.reset_index(drop=True)\nkickerName_results","f1800027":"def queryHeight(i):\n    height = players.query('`displayName` == @i').height.values\n    return height\ndef queryWeight(i):\n    weight = players.query('`displayName` == @i').weight.values\n    return weight\ndef feetToM(f,i):\n    i += f * 12\n    return round(i * 2.54, 1)\/100\ndef queryPosition(i):\n    position = players.query('`displayName` == @i').Position.values\n    return position\ndef getPositionIndex(i):\n    if i == \"WR\":\n        return 0\n    elif i == \"RB\":\n        return 1\n    elif i == \"CB\":\n        return 2\n    elif i == \"TE\":\n        return 3\n    elif i == \"FB\":\n        return 4\n    elif i == \"FS\":\n        return 5\n    elif i == \"SS\":\n        return 6\n    elif i == \"ILB\":\n        return 7\n    elif i == \"OLB\":\n        return 8\n    elif i == \"MLB\":\n        return 9\n    elif i == \"QB\":\n        return 10\n    elif i == \"NT\":\n        return 11\n    elif i == \"LB\":\n        return 12\n    elif i == \"DE\":\n        return 13\n    elif i == \"G\":\n        return 14\n    elif i == \"DB\":\n        return 15\n    elif i == \"P\":\n        return 16\n    elif i == \"K\":\n        return 17\n    else:\n        return 20\n\nNameList = kickerName_results.kicker_name\nHeightList = []\nHeightList2 = []\nWeightList = []\nBMI = []\nPositionList = []\n\n# Obtain H and W \nfor i in NameList.values:\n    try:\n        HeightList.append(queryHeight(i)[0])\n        WeightList.append(queryWeight(i)[0])\n    except:\n        HeightList.append(np.nan)\n        WeightList.append(np.nan)\n\n# Change height scale\nfor i in HeightList:\n    try: \n        feet = i.split('-')[0]\n        inch = i.split('-')[1]\n        m = feetToM(float(feet),float(inch))\n        HeightList2.append(m)\n    except:\n        feet = [char for char in i][0]\n        inch = [char for char in i][1]\n        m = feetToM(float(feet),float(inch))\n        HeightList2.append(m)    \n\n# Compute BMI\nfor h, w in zip(HeightList2, WeightList):\n    BMI.append(round(w * 0.453592 \/ (h * h), 2))\n    \n# Obtain Position\nfor i in NameList.values:\n    try:\n        PositionList.append(getPositionIndex(queryPosition(i)[0]))\n    except:\n        PositionList.append(np.nan)\n        \nkickerName_results2 = kickerName_results.copy(deep=True)\nkickerName_results2['BMI'] = BMI\nkickerName_results2['Position'] = PositionList\nkickerName_results2","39f5fd0a":"IDList = X.returnerId\n    \nNameList = returnerName_results.returner_name\nHeightList = []\nHeightList2 = []\nWeightList = []\nBMI = []\nPositionList = []\n\n# Obtain H and W \nfor i in NameList.values:\n    try:\n        HeightList.append(queryHeight(i)[0])\n        WeightList.append(queryWeight(i)[0])\n    except:\n        HeightList.append(np.nan)\n        WeightList.append(np.nan)\n\n# Change height scale\nfor i in HeightList:\n    try: \n        feet = i.split('-')[0]\n        inch = i.split('-')[1]\n        m = feetToM(float(feet),float(inch))\n        HeightList2.append(m)\n    except:\n        feet = [char for char in i][0]\n        inch = [char for char in i][1]\n        m = feetToM(float(feet),float(inch))\n        HeightList2.append(m)    \n\n# Compute BMI\nfor h, w in zip(HeightList2, WeightList):\n    BMI.append(round(w * 0.453592 \/ (h * h), 2))\n    \n# Obtain Position\nfor i in NameList.values:\n    try:\n        PositionList.append(getPositionIndex(queryPosition(i)[0]))\n    except:\n        PositionList.append(np.nan)\n#         print('haha')\n      \nreturnerName_results2 = returnerName_results.copy(deep=True)\nreturnerName_results2['BMI'] = BMI\nreturnerName_results2['Position'] = PositionList\nreturnerName_results2","b5606ee5":"# import seaborn as sns\n# plt.figure(figsize=(15,30))\n# ax = sns.heatmap(kickerName_results,\n#                  cmap=\"PuRd\",\n#                  vmin=0, vmax=200, annot=True)\n\n# returnerName_results2['Position'].value_counts()\n# a = returnerName_results2\n# a['Position'].replace({\"WR\": 0, \"b\": \"y\"}, inplace=True)","b36f7a87":"# clustering preprocessing \nfrom sklearn.preprocessing import MinMaxScaler\n\n# Instantiate the object\nreturnerName_results3 = returnerName_results2.drop('returner_name', 1)\n\nscaler = MinMaxScaler()\n# Fit and transform the data\n# StandardScaler()\nreturnerName_results3 = scaler.fit_transform(returnerName_results3)\nreturnerName_results3","4dc7e773":"returnerName_results3.shape","3f5f78df":"# Import the library\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nnp.random.seed(42)\ninertia = []\n\nstart = 1\nend = 20\n\n# Iterating the process\nfor i in range(start, end):\n  # Instantiate the model\n    model = KMeans(n_clusters=i)\n  # Fit The Model\n    model.fit(returnerName_results3)\n  # Extract the error of the model\n    inertia.append(model.inertia_)# Visualize the model\nsns.pointplot(x=list(range(start, end)), y=inertia)\nplt.title('SSE on K-Means based on # of clusters')\nplt.show()","b4a0f9f0":"np.random.seed(42)\n\n# Instantiate the model\nresults_returner = returnerName_results2.copy(deep=True)\nmodel = KMeans(n_clusters=4)\n# Fit the model\nmodel.fit(returnerName_results3)\n# Predict the cluster from the data and save it\ncluster = model.predict(returnerName_results3)\n# Add to the dataframe and show the result\nresults_returner['cluster'] = cluster\nresults_returner","a0f89d1c":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create the dataframe to ease our visualization process\nvisualize = pd.DataFrame(model.cluster_centers_) #.reset_index()\nvisualize = visualize.T\nvisualize['column'] = ['Return', 'Fair Catch', 'Muffed', 'Kick Attempt No Good', 'BMI', 'Position']\nvisualize = visualize.melt(id_vars=['column'], var_name='cluster')\nvisualize['cluster'] = visualize.cluster.astype('category')\n# Visualize the result\nplt.figure(figsize=(12, 8))\nsns.barplot(x='cluster', y='value', hue='column', data=visualize)\nplt.title('The cluster\\'s characteristics')\nplt.show()","e05a20b8":"visualize","45d7c1f5":"# Instantiate the object\nkickerName_results3 = kickerName_results2.drop('kicker_name', 1)\nkickerName_results3 = kickerName_results3.drop('Blocked Punt', 1)\nkickerName_results3 = kickerName_results3.drop('Kickoff Team Recovery', 1)\nkickerName_results3 = kickerName_results3.drop('Blocked Kick Attempt', 1)\nkickerName_results3 = kickerName_results3.drop('Touchback', 1)\nkickerName_results3 = kickerName_results3.drop('Downed', 1)\nkickerName_results3 = kickerName_results3.drop('Muffed', 1)\n\ncolumn = 'BMI'\nkickerName_results3[column] = kickerName_results3[column] \/kickerName_results3[column].abs().max()\ncolumn = 'Position'\nkickerName_results3[column] = kickerName_results3[column] \/kickerName_results3[column].abs().max()\n\n\nscaler = MinMaxScaler()\n# Fit and transform the data\n# StandardScaler()\nkickerName_results3 = scaler.fit_transform(kickerName_results3)\n\n","3340dc5e":"kickerName_results3.shape","69f97c17":"np.random.seed(42)\ninertia = []\n\nstart = 1\nend = 20\n\n# Iterating the process\nfor i in range(start, end):\n  # Instantiate the model\n    model = KMeans(n_clusters=i)\n  # Fit The Model\n    model.fit(kickerName_results3)\n  # Extract the error of the model\n    inertia.append(model.inertia_)# Visualize the model\nsns.pointplot(x=list(range(start, end)), y=inertia)\nplt.title('SSE on K-Means based on # of clusters')\nplt.show()","f152561f":"np.random.seed(42)\n\n# Instantiate the model\nresults_kicker = kickerName_results2.copy(deep=True)\nmodel = KMeans(n_clusters=3)\n# Fit the model\nmodel.fit(kickerName_results3)\n# Predict the cluster from the data and save it\ncluster = model.predict(kickerName_results3)\n# Add to the dataframe and show the result\nresults_kicker['cluster'] = cluster\nresults_kicker","8d2036f5":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create the dataframe to ease our visualization process\nvisualize = pd.DataFrame(model.cluster_centers_) #.reset_index()\n\n\nvisualize = visualize.T\n# visualize['column'] = ['Downed', 'Fair Catch', 'Muffed', 'Out of Bounds', 'Return', 'Touchback', 'Blocked Kick Attempt', 'Kick Attempt Good', 'Kick Attempt No Good', 'Kickoff Team Recovery', 'Blocked Punt', 'BMI', 'Position']\nvisualize['column'] = ['Fair Catch', 'Out of Bounds', 'Return', 'Kick Attempt Good', 'Kick Attempt No Good', 'BMI', 'Position']\nvisualize = visualize.melt(id_vars=['column'], var_name='cluster')\nvisualize['cluster'] = visualize.cluster.astype('category')\n# Visualize the result\nplt.figure(figsize=(12, 8))\nsns.barplot(x='cluster', y='value', hue='column', data=visualize)\nplt.title('The cluster\\'s characteristics')\nplt.show()","ba9cce98":"clustering","69f738bc":"Find the optimum number of clusters","ac5c710c":"# PART 3: CLUSTERING - KICKER","1f23088a":"Remove duplicates","44e694b3":"Get the BMI and position for kicker dataframe","400e2b21":"Get the BMI and position for returner dataframe","420ee7ec":"Create a dataframe that shows the frequency play results with the involvement of each player in return","b2c6ee71":"Getting the kickers' names","2af9b39e":"Read the players dataset and define a function that query players name","952d3104":"visualisation:","ff6a450e":"# PART 1: Import Data and Dataframe Creation","ec435af6":"Getting the returners' names","78dd7eb9":"# PART 2: CLUSTERING - RETURNER","ea131e1f":"Clustering: find the pattern of returner's information and play results. Preprocessing:","2b963f91":"Create a dataframe that shows the frequency play results with the involvement of each player in kick"}}