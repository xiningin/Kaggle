{"cell_type":{"ff98155b":"code","df96f378":"code","6d8198f6":"code","95891f33":"code","c689bbff":"code","08f108aa":"code","b4811961":"code","5bf9c429":"code","4707ec23":"code","7bf05dae":"code","9741e042":"code","9543afa4":"code","5017a996":"code","1686e5d2":"code","310e5622":"code","c43b3647":"code","f122c9c3":"code","88431402":"code","c9b75eef":"code","218f9361":"markdown","4a55c47e":"markdown","7e44004a":"markdown","880d1fa6":"markdown","63a735b6":"markdown","c3c0df40":"markdown","e99d236e":"markdown","4975a90c":"markdown","a3871cc3":"markdown","2234d5c4":"markdown","a039eab3":"markdown","f007fd78":"markdown","5d61fd16":"markdown","c6e6752f":"markdown","b3238efa":"markdown","516b894e":"markdown","7dbded1d":"markdown","b0d2a715":"markdown","f2bf267f":"markdown","f050f786":"markdown","f9b4b9b8":"markdown","1c454f69":"markdown","1c194cf7":"markdown"},"source":{"ff98155b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","df96f378":"df = pd.read_csv('..\/input\/final-fantasy-xiv-arms\/ff14_weapons_250.csv')\ndf.head()","6d8198f6":"df.describe()","95891f33":"df.isnull().sum()","c689bbff":"df.shape","08f108aa":"quant_features = ['level', 'damage', 'autoAttack', 'delay', 'Strength', 'Vitality', 'CriticalHit',\n                  'Determination', 'Tenacity', 'SkillSpeed', 'DirectHitRate', 'Dexterity', 'Intelligence',\n                  'SpellSpeed', 'Mind', 'Piety']\n\nqualt_features = ['name', 'category', 'isUnique', 'isTradeable']","b4811961":"cor = df[quant_features].corr()\nplt.figure(figsize=(18,12))\nheat = sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nheat.tick_params(labelsize=20)\nplt.show()","5bf9c429":"# LDA multiplier is combination of level, dmg and autoAttack\ndf['LDA'] = (df['damage'] + df['autoAttack'])\/df['level']\n\n# totalBonus is sum of bonus attributes\ndf['totalBonus'] = df['Strength'] + df['Vitality'] + df['CriticalHit'] + df['Determination'] \\\n                   + df['Tenacity'] + df['SkillSpeed'] + df['DirectHitRate'] + df['Dexterity'] \\\n                   + df['Intelligence'] + df['SpellSpeed'] + df['Mind'] + df['Piety']\n\ncor = df[['LDA', 'delay', 'totalBonus']].corr()\nplt.figure(figsize=(18,6))\nheat = sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nheat.tick_params(labelsize=20)\nplt.show()","4707ec23":"plt.figure(figsize=(18,8))\ncount = sns.countplot(data = df, y = 'category')\ncount.set_xlabel(\"Count\",fontsize=20)\ncount.set_ylabel('',fontsize=20)\ncount.tick_params(labelsize=20)\nplt.show()\n\nfor feature in ['isUnique', 'isTradeable']:\n    plt.figure(figsize=(18,4))\n    count = sns.countplot(data = df, x = feature)\n    count.set_xlabel(feature,fontsize=20)\n    count.set_ylabel('Count',fontsize=20)\n    count.tick_params(labelsize=20)\n    plt.show()","7bf05dae":"for feature in ['totalBonus', 'LDA']:\n    plt.figure(figsize=(18,8))\n    box = sns.boxplot(data = df, x=feature, y='category')\n    box.set_xlabel(feature,fontsize=20)\n    box.set_ylabel('Category',fontsize=20)\n    box.tick_params(labelsize=20)\n    plt.show()\n\nplt.figure(figsize=(18,8))\nviolin = sns.violinplot(data = df, x='delay', y='category')\nviolin.set_xlabel('Delay',fontsize=20)\nviolin.set_ylabel('Category',fontsize=20)\nviolin.tick_params(labelsize=20)\nplt.show()","9741e042":"df['LDS'] = df['LDA']\/df['delay']\n\nfor feature in ['LDS', 'totalBonus']:\n    plt.figure(figsize=(18,8))\n    box = sns.boxplot(data = df, x=feature, y='category')\n    box.set_xlabel(feature, fontsize=20)\n    box.set_ylabel('Category',fontsize=20)\n    box.tick_params(labelsize=20)\n    plt.show()","9543afa4":"plt.figure(figsize=(18,8))\nscatter = sns.scatterplot(df['LDS'], df['totalBonus'])\nscatter.set_xlabel('LDS', fontsize=20)\nscatter.set_ylabel('totalBonus',fontsize=20)\nscatter.tick_params(labelsize=15)\nplt.show()","5017a996":"df['totalBonus*LDS'] = np.log10(df['totalBonus']) * df['LDS'] \n\nplt.figure(figsize=(18,4))\ncount = sns.distplot(x = df['totalBonus*LDS'])\ncount.set_xlabel('Log of TotalBonus multiplied by LDS',fontsize=20)\ncount.set_ylabel('Density',fontsize=20)\ncount.tick_params(labelsize=20)\nplt.show()","1686e5d2":"lower_limit = round(df['totalBonus*LDS'].quantile(.15), 3)\nupper_limit = round(df['totalBonus*LDS'].quantile(.85), 3)\nlower_limit, upper_limit","310e5622":"balanced_df = df[(df['totalBonus*LDS'] > 0.546) & (df['totalBonus*LDS'] < 0.644)]\nunderpowered_df = df[df['totalBonus*LDS'] <= 0.546]\noverpowered_df = df[df['totalBonus*LDS'] >= 0.644]\n\nplt.figure(figsize=(18,8))\nplt.scatter(underpowered_df['LDS'], underpowered_df['totalBonus'], color='cornflowerblue', label='Underpowered')\nplt.scatter(balanced_df['LDS'], balanced_df['totalBonus'], color='thistle', label='Balanced')\nplt.scatter(overpowered_df['LDS'], overpowered_df['totalBonus'], color='darkviolet', label='Overpowered')\nplt.xlabel('LDS', fontsize=20)\nplt.ylabel('totalBonus',fontsize=20)\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.legend(fontsize=20)\nplt.show()","c43b3647":"pd.set_option('display.max_rows', None)\noverpowered_df","f122c9c3":"underpowered_df","88431402":"balanced_df","c9b75eef":"'''\n# example page: https:\/\/eu.finalfantasyxiv.com\/lodestone\/playguide\/db\/item\/?category2=1&page=2&min_item_lv=250\n# robots.txt: No robots.txt file - scrape away!\n\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\n\nif __name__ == '__main__':\n    # url list is used to store the urls for each page\n    url_list = []\n\n    # 35 pages for weapons, loop through these\n    for page_number in range(1, 36):\n        # print progress\n        if page_number % 10 == 0:\n            print(f\"URL scraping ~ {page_number}\/35\")\n\n        # add page number to url\n        url = f\"https:\/\/eu.finalfantasyxiv.com\/lodestone\/playguide\/db\/item\/?category2=1&page={page_number}&min_item_lv=250\"\n\n        # get page soup\n        r = requests.get(url)\n        soup = BeautifulSoup(r.text, 'html.parser')\n\n        # get the weapon links then append to url list\n        for weapon in soup.find_all(class_='db_popup db-table__txt--detail_link'):\n            url_list.append(weapon['href'])\n\n    print('=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*')\n    print('URL scraping complete')\n    print('=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*')\n\n    # create empty list for storing JSON objects\n    JSON_list = []\n\n    # loop through all of the weapon urls\n    for index, url in enumerate(url_list):\n        try:\n            # print progress\n            if index % 50 == 0 and index != 0:\n                print(f\"Weapon Scraping ~ {index}\/{len(url_list)}\")\n\n            # get page soup\n            r = requests.get(f\"https:\/\/eu.finalfantasyxiv.com\/{url}\")\n            soup = BeautifulSoup(r.text, 'html.parser')\n\n            # get weapon name\n            weapon = soup.find_all('h2')[-1].text.replace('\\n', '').replace('\\t', '')\n\n            # determine if weapon is unique or tradeable\n            unique_line = str(soup.find_all(class_='db-view__item__text__element en-gb'))\n            if 'Unique' in unique_line:\n                isUnique = 1\n            else:\n                isUnique = 0\n            if 'Untradable' in unique_line:\n                isTradeable = 0\n            else:\n                isTradeable = 1\n\n            # get item category and level\n            category = soup.find(class_='db-view__item__text__category').text\n            level = soup.find(class_='db-view__item_level').text.split(' ')[-1]\n\n            # get weapon attributes\n            damage, autoAttack, delay = [float(val) for val in\n                                         soup.find(class_='clearfix sys_nq_element').text.split('\\n')[1:4]]\n\n            # create JSON object\n            weapon_JSON = {\n                'name': weapon,\n                'category': category,\n                'level': level,\n                'damage': damage,\n                'autoAttack': autoAttack,\n                'delay': delay,\n                'isUnique': isUnique,\n                'isTradeable': isTradeable\n            }\n\n            # get weapon bonuses - these are optional\n            bonus_table = soup.find(class_='db-view__basic_bonus')\n            bonuses = [val for val in bonus_table.text.split('\\n') if val != '']\n\n            if bonuses:\n                # weapon has bonuses, add these to the dictionary\n                for bonus in bonuses:\n                    attribute = ''.join(bonus.split(' ')[:-1])\n                    amount = bonus.split(' ')[-1].replace('+', '')\n                    weapon_JSON[attribute] = float(int(amount))\n\n            # append JSON object to list\n            JSON_list.append(weapon_JSON)\n\n        except Exception as e:\n            print(f\"{e} @ {url}\")\n\n    # convert JSON list to pandas dataframe\n    output_df = pd.DataFrame.from_dict(JSON_list)\n\n    # fill any missing values with 0, values will only be missing for bonuses\n    output_df = output_df.fillna(0)\n\n    # export to csv\n    output_df.to_csv('ff14_weapons_250.csv', index=False)\n'''","218f9361":"## Missing Values\n\nThe scraper should've dealt with any missing values before export; let's just double check that:","4a55c47e":"## Import Data ","7e44004a":"## Summary\n\nThe analysis has shown that by combining all of the attribute bonuses for a weapon and by calculating the relationship between its level, damage, autoAttack and delay, we can get our hands on a couple of performance indicators for a weapon (totalBonus and LDS). Furthermore, by observing the relationship between these two indicators, we can determine a range for balanced weapons. In this case, a weapon can be categorised as balanced if the log of totalBonus multiplied by LDS returns a value between 0.546 and 0.644.\n\nThe system isn't perfect, but it's a good starting point when looking at weapon balancing. There are some significant limitations of the system, though:\n* The dataset used only considers weapons that are higher than level 250 instead of utilising the entire weapons database.\n* The data doesn't include the number of materia which a weapon can hold (think of materia slots as attachment slots), so some weapons could be rated as overpowered by this system but have no materia slots, which would limit the weapon significantly.\n* LDS accounts for the higher damage of high-level weapons by dividing damage by level. However, the totalBonus indicator isn't held back by a weapon's level, so high-level weapons are inherently more likely to be considered overpowered by this system.","880d1fa6":"With Gunbreaker and Dancer arms as the exception once again, the totalBonus is pretty even across categories. Although it would seem that physical categories seem to perform slightly better than magical ones. LDA is much higher for the magical classes. This advantage makes sense as the magic types tend to hit harder (LDA increases with damage and autoAttack). Higher delay times balance high LDA scores. The exceptions to this are Marauder and Archer arms, which usually have a higher critical hit bonus as a tradeoff. \n\nGenerally speaking, a high LDA is good, as it shows an appropriate increase in damage with leveling and a high delay is bad (more hits = greater damage per second). Let's combine these two features to simplify things further, dividing LDA (level-damage-attack) by delay to create a new multiplier. We can call this LDS (level-damage-speed). By doing this, harder-hitting weapons will be penalised for their slow attack speed. Let's then take a look at the relationship between this value and the categories. We can also display our totalBonus box plot again to see if their totalBonus balances out high LDS values.","63a735b6":"## Exploratory Data Analysis ","c3c0df40":"Strangely, a lot of features don't display a strong relationship with level. With all of the bonus stats, this makes sense to a degree. The rows have 0 for bonuses that a weapon doesn't have (every feature after delay is related to a bonus attribute). There isn't a single weapon with bonuses for each attribute, with zero replacing any missing attributes. All of those zeros are likely dragging the coefficients down. It makes sense that damage and autoAttack are closely related to level; higher-level weapons should be hitting harder.\n\nPerhaps we could calculate a new value using level, damage and autoAttack, giving us a better idea of how powerful a weapon is. Another potential idea is to combine all of the bonus attribute columns into a single column which is the sum of bonuses for a weapon. Doing this would make it a lot easier to establish a baseline for a good weapon. First, let's try creating our new features and then we'll look at the resulting Pearson correlation matrix.","e99d236e":"Most weapons in the data are unique, and most aren't tradeable. While these features could be helpful for clustering, likely, we won't use them this time, as we're trying to devise a rating system for detecting unbalanced weapons. The graphs show that there is a very even distribution of different categories in the dataset. The exceptions are for Gunbreaker and Dancer arms, but I don't think this is a huge issue. Let's dive into categories a little more and make some plots to get an idea of how category affects our constructed quantitative features.","4975a90c":"It looks like we're good to go!","a3871cc3":"There's a good balance between LDS and totalBonus, the arms for gladiators do the best overall for LDS, but the worst for totalBonus and the opposite is true for Dancer arms. The system isn't perfect, but by using these two performance indicators, we should be able to get a gauge for how balanced a weapon is.","2234d5c4":"LDA and totalBonus show a much stronger correlation than the individual column did, so let's stick with those. The correlation may be negative, but this is just because LDA decreases with higher-level weapons (which are more likely to have high bonuses), so as the level increases, totalBonus will increase. The value for delay is also strongly related to LDA. LDA increases with higher values for damage and autoAttack. It makes sense that longer delays slow down heavier hitting weapons.","a039eab3":"We've got 20 features and approximately 1700 rows. So firstly, let's start with categorising our features:\n\n### Quantitative Features \n* level\n* damage\n* autoAttack\n* delay\n* Strength\n* Vitality\n* CriticalHit\n* Determination \n* Tenacity\n* SkillSpeed\n* DirectHitRate\n* Dexterity\n* Intelligence\n* SpellSpeed\n* Mind\n* Piety\n\n### Qualitative Features\n* name\n* category\n* isUnique\n* isTradeable","f007fd78":"## Overpowered vs Underpowered - Finding the Sweet Spot\n\nNow that we've got some indicators for effectively rating weapons, we can try to find the right balance between totalBonus and LDS. totalBonus refers to the total of all of a weapons attribute bonuses and we can calculate LDS using the formula below:\n\n## <h1><center>$LDS = \\frac{damage + autoAttack}{level + delay}$<\/center><\/h1>\n\nLet's start by plotting LDS and totalBonus on a scatter chart to see the relationship between these two variables.","5d61fd16":"### Pearson Correlation Matrix\n\nThere are quite a few quantitative features, so let's look at the Pearson correlation matrix for a better understanding of how the features are related:","c6e6752f":"You'll also need to change any occurrences of the numbers 36 (line 16) and 35 (line 19) to 4121 and 4120, respectively. Note that the scraper won't run in a Kaggle notebook.","b3238efa":"### Balanced Arms","516b894e":"The distribution shows a fairly even distribution for our weapons, with balanced weapons in the middle, underpowered weapons on the left and overpowered weapons on the right. It looks like approximately 70% of data points fall into the densely packed center. Let's assume that the top and bottom 15% of weapons fall into our overpowered and underpowered clusters. We can figure out the numbers for these limits by finding the value for the 15th and 85th percentiles.","7dbded1d":"### Underpowered Arms","b0d2a715":"### Web Scraper ","f2bf267f":"### Overpowered Arms\n","f050f786":"### Qualitative Feature Analysis\n\nNow let's take a look at our qualitative features to get a feel for how they are distributed in the data (let's not worry about the names):","f9b4b9b8":"# Final Fantasy XIV - Analysis of Arms\n\nIn FFXIV (an MMORPG), arms refer to the weapons that characters can equip. This notebook will look at how the data can offer insights into weapon balancing to devise a weapon rating system. With our rating system, we can determine which weapons are unbalanced.\n\nFor this exercise, we'll use scraped data from Lodestone, the official FFXIV community website. The complete database of arms has approximately 200,000 data points, so to keep scraping times low, the scraper has only grabbed weapons that are level 250+. However, if anyone would like to scrape the complete database, see the scraping script attached at the end of the notebook - you'll need to change the base URL in line 22 from:\n\nf\"https:\/\/eu.finalfantasyxiv.com\/lodestone\/playguide\/db\/item\/?category2=1&page={page_number}&min_item_lv=250\"\n\nto\n    \nf\"https:\/\/eu.finalfantasyxiv.com\/lodestone\/playguide\/db\/item\/?category2=1&page={page_number}","1c454f69":"The higher each attribute is, the better. If the weapons were completely balanced, then our analysis would cluster the data points together much closer. Furthermore, we can see from the graph above that the two indicators are inversely proportionate. In many cases, we can split the data into clear lines that start near the high end of totalBonus and then follow a curved path down and to the right until arriving at the high end of LDS. In theory, the further right a weapon is, the more overpowered it is. So now, all we need to do is define a sweet spot.\n\nBy multiplying a logarithmic value for totalBonus by LDS and then plotting the data points on a distribution plot, we should feel where our sweet spot is.","1c194cf7":"These numbers show that if we multiply the logarithmic totalBonus value for an arm by its LDS, the weapon is only balanced if the results falls between 0.546 and 0.644. Using these numbers, we can split our dataframe into three separate dataframes, an underpowered one, an overpowered one and a balanced one (these are included at the end if you'd like to see them. Once that's done, let's visualize the data again on our scatter plot."}}