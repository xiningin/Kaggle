{"cell_type":{"c35e1e9f":"code","89b0c091":"code","88d0cb27":"code","55e05a78":"code","7a12f204":"code","a9f44b3d":"code","6b1a5347":"code","d1db2347":"code","76057d01":"code","5dc79c6c":"code","d717bec2":"code","e5f6da10":"code","7f3dd070":"code","bb73c540":"code","dc900974":"code","6a5963ad":"code","4edac9cf":"code","ba75c3d7":"code","206fef91":"code","49f7cbb0":"code","1f083f63":"code","a5a7cf31":"code","41fc92cb":"code","2bf7047a":"code","2d28b2f8":"code","766f26fb":"code","f250f0e5":"code","4a95c654":"code","4689acc4":"code","fe933081":"code","c8d51b84":"code","9daa5294":"code","80eaa369":"markdown","eacdaeb1":"markdown","8037eb95":"markdown","77a247e6":"markdown","7bcff339":"markdown","1f97973b":"markdown","88a80473":"markdown","664e3a7c":"markdown","3c0bb0cd":"markdown","6b44c5c0":"markdown","5005cfde":"markdown","0ee34965":"markdown"},"source":{"c35e1e9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n#Tensorflow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","89b0c091":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_images = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsample = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","88d0cb27":"#extract the label value from the training dataset, not required from test data as labels are not given for this test dataset\ntrain_label = np.array(train['label'])\ntrain_images = train.drop('label', axis=1)","55e05a78":"type(train_label)","7a12f204":"onehotencoder = OneHotEncoder() \n  \nbinarised_train_label = onehotencoder.fit_transform(train_label.reshape(-1,1)).toarray() ","a9f44b3d":"#check one samle data if one hot encoding is working fine.\nprint(binarised_train_label[5])\nprint(train_label[5])","6b1a5347":"train_images.shape","d1db2347":"test_images.shape","76057d01":"print(\"Datatype for train_images = \",type(train_images))\nprint(\"Datatype for test_images = \",type(test_images))","5dc79c6c":"train_images.head()","d717bec2":"len(test_images)","e5f6da10":"#training dataset is in 784 pixels which needs to be reshaped usign the re-shape function\ntrain_images_arr = np.array(train_images).reshape(42000,28,28)\ntest_images_arr = np.array(test_images).reshape(28000,28,28)","7f3dd070":"print(\"Datatype for train_images = \",type(train_images))\nprint(\"Datatype for test_images = \",type(test_images))","bb73c540":"#Lets see one of the examples from the image dataset\nplt.figure()\nplt.imshow(train_images_arr[13])\nplt.colorbar()\nplt.grid(False)\nplt.show()","dc900974":"train_images = train_images \/ 255\n\ntest_images = test_images \/ 255","6a5963ad":"train_images = train_images.values.reshape(-1,28,28,1)\ntest_images = test_images.values.reshape(-1,28,28,1)","4edac9cf":"plt.figure(figsize =(10,10))\nfor i in range(25):\n    plt.subplot(5,5,1+i)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(train_images_arr[i])\n    plt.xlabel(train_label[i])","ba75c3d7":"train_images.shape","206fef91":"test_images.shape","49f7cbb0":"#lets reshape the data into 3 dimensions\ntrain_images = train_images.reshape(len(train_images),28,28,1)\ntest_images = test_images.reshape(len(test_images),28,28,1)","1f083f63":"X_train_images, X_test_images, Y_train_labels, Y_test_labels = train_test_split(train_images, train_label,test_size=0.20, random_state=42)","a5a7cf31":"X_train_images.shape","41fc92cb":"#model = keras.Sequential([\n#    keras.layers.Flatten(input_shape =(28,28)),\n#    keras.layers.Dense(128, activation=tf.nn.relu),\n#    keras.layers.Dense(10, activation=tf.nn.softmax)\n#])","2bf7047a":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])","2d28b2f8":"model.compile(optimizer='adam',\n              loss = 'sparse_categorical_crossentropy',\n              metrics = ['accuracy'])\nmodel.summary()","766f26fb":"X_train_images.shape","f250f0e5":"model.fit(X_train_images,Y_train_labels,epochs=10, validation_data=(X_test_images, Y_test_labels))","4a95c654":"test_loss, test_acc = model.evaluate(X_test_images,Y_test_labels)\n\nprint(\"Test accuracy : \", test_acc)","4689acc4":"predictions = model.predict(X_test_images)","fe933081":"predictions[0]","c8d51b84":"predictions = model.predict_classes(test_images, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\"Label\": predictions})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","9daa5294":"submissions.head()","80eaa369":"### Compile the model\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step:\n\nLoss function \u2014This measures how accurate the model is during training. We want to minimize this function to \"steer\" the model in the right direction.\nOptimizer \u2014This is how the model is updated based on the data it sees and its loss function.\nMetrics \u2014Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified","eacdaeb1":"### Train Test Split\n\n","8037eb95":"## EDA","77a247e6":"## Evaluate accuracy\nNext, compare how the model performs on the test dataset:","7bcff339":"### One Hot Encoding\nLets convert the train_labels into one hot envoding vector","1f97973b":"## Feature Scaling\n\nLets scale the values of the training and test images dataset. Since 256 is the maximum values a pixel color can hold so we need to divide the data by 256 to bring down range to 256.","88a80473":"## Submit Predictions in Kaggle\n\nLets submit the predictions in Kaggle.","664e3a7c":"### Train the model\nTraining the neural network model requires the following steps:\n\n- Feed the training data to the model\u2014in this example, the train_images and train_labels arrays.\n- The model learns to associate images and labels.\n- We ask the model to make predictions about a test set\u2014in this example, the test_images array. We verify that the predictions match the labels from the test_labels array.\n\nTo start training, call the model.fit method\u2014the model is \"fit\" to the training data:","3c0bb0cd":"### Setup the layers\nThe basic building block of a neural network is the layer. Layers extract representations from the data fed into them. And, hopefully, these representations are more meaningful for the problem at hand.","6b44c5c0":"## Build the Model\nBuilding the neural network requires configuring the layers of the model, then compiling the model.","5005cfde":"Now let's explore some of the images from the training set along with its class name below.","0ee34965":"## Make predictions\nWith the model trained, we can use it to make predictions about some images."}}