{"cell_type":{"cbfe1775":"code","8d76d688":"code","6f8d6880":"code","1c7c6fdd":"code","e344f73a":"code","48bc9c52":"code","b0a98ad6":"code","419fb211":"code","308a6d63":"code","c1e7aaac":"code","67b457ff":"code","19ff62ee":"code","902f22f7":"code","031f1a2b":"code","3683359c":"code","5129ca90":"code","21139ada":"code","8529a6da":"code","398944db":"code","fb259d37":"code","51c0ea7e":"code","e86b8fc2":"code","1fe35bf4":"code","19bc341a":"code","caf0aa34":"code","1b237a5c":"code","a2dbf948":"code","27dc4e4a":"code","16622566":"code","b8f3c9ca":"code","8b9c9c78":"code","397b28b8":"code","ba160a80":"code","a92fd16b":"code","95746fc9":"code","b47a6b2d":"markdown","783c8e9c":"markdown","04285fd3":"markdown","31625587":"markdown","73d91a4f":"markdown","dd779033":"markdown","0eda6be1":"markdown","42dd58ae":"markdown","bacb1163":"markdown","12028995":"markdown","8755e0c1":"markdown","5233d6a9":"markdown","684d1457":"markdown","485cdc13":"markdown","3efc49d5":"markdown","df51acf0":"markdown","1eb2854a":"markdown","20b06a44":"markdown","388da1a1":"markdown","88cacb3c":"markdown","727b2f26":"markdown","4e77fefa":"markdown","7a9f08b4":"markdown","a9e72828":"markdown","e381cda4":"markdown","2864620b":"markdown","36a0ab6a":"markdown"},"source":{"cbfe1775":"# Import necessary libraries\nimport geopandas as gdp\nimport numpy as np\nimport pandas as pd\n\nimport osmnx as ox\n%matplotlib inline\nprint(\"OSMNX version:\", ox.__version__)\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import TimeSliderChoropleth, Fullscreen, MiniMap, LocateControl\n\nfrom PIL import Image\n\nprint(\"Folium version:\", folium.__version__)","8d76d688":"# places = ['1st district, Budapest, Hungary', '2nd district, Budapest, Hungary', '3rd district, Budapest, Hungary',\n#           '4th district, Budapest, Hungary', '5th district, Budapest, Hungary', '6th district, Budapest, Hungary',\n#           '7th district, Budapest, Hungary', '8th district, Budapest, Hungary', '9th district, Budapest, Hungary',\n#           '10th district, Budapest, Hungary', '11th district, Budapest, Hungary', '12th district, Budapest, Hungary',\n#           '13th district, Budapest, Hungary', '14th district, Budapest, Hungary', '15th district, Budapest, Hungary',\n#           '16th district, Budapest, Hungary', '17th district, Budapest, Hungary', '18th district, Budapest, Hungary', \n#           '19th district, Budapest, Hungary', '20th district, Budapest, Hungary', '21st district, Budapest, Hungary',\n#           '22nd district, Budapest, Hungary', '23rd district, Budapest, Hungary']\n\n# gdf_districts = ox.gdf_from_places(places)","6f8d6880":"gdf_districts = gdp.read_file(\"..\/input\/geo-bud-districts\/Gdf_districts\/Gdf_districts\/gdf_districts.shp\")\n\nfor i in range(len(gdf_districts)):\n    gdf_districts.loc[i,'district_code'] = i + 1\n    \ngdf_districts.head()","1c7c6fdd":"gdf_districts[\"centroid\"] = gdf_districts.geometry.centroid\ngdf_districts.head()","e344f73a":"station_in_XVIII = [47.431369, 19.182132]\nstation_in_I = [47.508139, 19.027195]\nstation_in_VIII = [47.493856, 19.084479]\nstation_in_II = [47.562394, 18.961156]\nstation_in_IV = [47.585405, 19.114884]\nstation_in_XV = [47.543465, 19.146288]\nstation_in_XI = [47.475782, 19.041205]\nstation_in_XIII = [47.521744, 19.068248]\n# station_in_V = [47.497555, 19.052645]\nstation_in_X = [47.467456, 19.155798]\nstation_in_XXII = [47.406248, 19.009319]\nstation_in_XXI = [47.404750, 19.091043]","48bc9c52":"list_of_stations = [station_in_XVIII, station_in_I, station_in_VIII, station_in_II, station_in_IV, \n                    station_in_XV, station_in_XI, station_in_XIII, station_in_X, station_in_XXII, station_in_XXI]\n\n# Change places latitude and longitude as required further\nfor station in list_of_stations:\n    station[0], station[1] = station[1], station[0]","b0a98ad6":"stations_df = pd.DataFrame(list_of_stations, columns = [\"latitude\",\"longitude\"])\n\nnames = ['station_in_XVIII', 'station_in_I', 'station_in_VIII', 'station_in_II', \n         'station_in_IV', 'station_in_XV', 'station_in_XI', 'station_in_XIII', 'station_in_X',\n         'station_in_XXII', 'station_in_XXI']\nstations_df['station_district'] = names\n\ngdf_stations = gdp.GeoDataFrame(stations_df, geometry=gdp.points_from_xy(stations_df.latitude, stations_df.longitude))\ngdf_stations.head()","419fb211":"# Assign the same CRS to both dataframes (EPSG 4326 that uses latitude and longitude)\ngdf_stations.crs = {'init' :'epsg:4326'}\ngdf_districts.crs = {'init' :'epsg:4326'}\n\n# Initialize a map\nm_stations = folium.Map(location=[47.4917,19.1102], min_zoom=2, max_bounds=True, tiles='cartodbpositron', zoom_start=11)\n\n# Add a GeoJsonTooltip to the map to show district number when hovering the mouse over it\nmykwargs = {\"fields\": ['district_code']} # works\n# mykwargs = {\"permanent\": True, \"fields\": ['district_code']} # does not work\nmytooltip = folium.GeoJsonTooltip(**mykwargs)\n\n# Draw a simple map with district borders\nfolium.GeoJson(\n    gdf_districts[['geometry','district_code']], \n    tooltip=mytooltip,\n    style_function=lambda x: {'color':'black','fillColor':'green','weight':1},\n    highlight_function=lambda x: {'weight':3,'fillColor':'yellow'}\n    ).add_to(m_stations)\n\n# Add stations to the map\nfor idx, row in gdf_stations.iterrows():\n    Marker([row['longitude'], row['latitude']],popup=row['station_district']).add_to(m_stations)\n\n# Add tile layers to the map\ntiles = [\"Stamen Toner\", 'stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain', \"Mapbox Bright\"]\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(m_stations)\n\n# Create a layer control\nfolium.LayerControl(collapsed=True).add_to(m_stations)\n\n# Save and display the map\nm_stations.save('stations_and_borders.html')\nm_stations","308a6d63":"gdf_centroid = gdp.GeoDataFrame(gdf_districts[\"district_code\"], geometry=gdf_districts[\"centroid\"])\ngdf_centroid.head()","c1e7aaac":"gdf_stations.crs = {'init' :'epsg:2263'}\ngdf_centroid.crs = {'init' :'epsg:2263'}","67b457ff":"closest_stations = []\n\nfor district in range(len(gdf_centroid)):\n    distance_list = gdf_stations.geometry.distance(gdf_centroid.iloc[district].geometry)\n    closest_stations.append(gdf_stations.iloc[distance_list.idxmin()][\"station_district\"])\n    \ngdf_districts[\"closest_station\"] = closest_stations\ngdf_districts.drop([\"bbox_north\",\"bbox_south\",\"bbox_east\",\"bbox_west\"], axis=1, inplace=True)\ngdf_districts.head()","19ff62ee":"AQI_raw = pd.read_csv(\"..\/input\/geo-bud-districts\/AQI_raw_no_st_V.csv\",index_col=[0], header=[0,1],skip_blank_lines=False)\n\nAQI_raw.columns.set_levels(['station_in_I','station_in_II',\"station_in_IV\",'station_in_VIII','station_in_X','station_in_XI',\n                           'station_in_XIII','station_in_XV','station_in_XVIII','station_in_XXI','station_in_XXII'],level=0,inplace=True)\nAQI_raw = AQI_raw.apply(pd.to_numeric,errors='coerce')\nAQI_raw.head()","902f22f7":"AQI_raw = AQI_raw.bfill().fillna(AQI_raw.median())\nAQI_raw.isnull().values.any()","031f1a2b":"unstacked_AQI = AQI_raw.unstack()\nunstacked_AQI.index.names = [\"station_in_district\", \"parameter\", \"date\"]\nunstacked_AQI.head()","3683359c":"median_AQI_per_param = unstacked_AQI.groupby([\"station_in_district\",\"parameter\"]).median()\nmedian_AQI_per_param.head()","5129ca90":"historical_AQI_per_station = median_AQI_per_param.groupby([\"station_in_district\"]).max()\nhistorical_AQI_per_station.head()","21139ada":"gdf_districts['AQI']=gdf_districts.closest_station.map(historical_AQI_per_station)\n\ngdf_districts['district_id'] = ['district_I','district_II','district_III','district_IV','district_V','district_VI','district_VII',\n                            'district_VIII','district_IX','district_X','district_XI','district_XII','district_XIII','district_XIV',\n                            'district_XV','district_XVI','district_XVII','district_XVIII','district_XIX','district_XX','district_XXI',\n                            'district_XXII','district_XXIII']\ngdf_districts.set_index('district_id', inplace=True)\n\ngdf_districts.head()","8529a6da":"districts = gdp.GeoDataFrame(gdf_districts[['geometry','district_code']])\ndistricts.head()","398944db":"# Initialize a map\nm_choropleth_AQI = folium.Map(location=[47.4917,19.0902], min_zoom=2, max_bounds=True, tiles='cartodbpositron', zoom_start=11)\n\n# Draw a choropleth map on it\nchoropleth = Choropleth(geo_data=districts.to_json(),\n                        data=gdf_districts.AQI,\n                        key_on=\"feature.id\", \n                        fill_color='YlGnBu', \n                        legend_name='Air Quality Index - the max median among 5 parameters over 2016-2019',\n                        highlight = True\n             ).add_to(m_choropleth_AQI)\n\n# Add a GeoJsonTooltip to the map to show district number when hovering the mouse over it\nchoropleth.geojson.add_child(folium.features.GeoJsonTooltip(['district_code'],labels=False)\n)\n\n# Add a fullscreen view tool to the top left (not working on Kaggle, works if saved and opened as html)\nm_choropleth_AQI.add_child(Fullscreen(position='topleft', title='Full Screen', title_cancel='Exit Full Screen'))\n\n# Add a minimap in the bottom right corner. Moving or zooming the small map affect the big one also. \n# Here just to show this functionality, no real purpose.\nminimap = MiniMap(tile_layer='cartodbpositron',zoom_level_offset=-6)\nm_choropleth_AQI.add_child(minimap)\n\n\n# Add a LocateControl tool to the top left (not working on Kaggle, works if saved and opened as html).\n# By clicking on it, it will show on the map the geolocation of the user.\nLocateControl(auto_start=True).add_to(m_choropleth_AQI)\n\n# Save and display the map\nm_choropleth_AQI.save('median_AQI_per_district.html')\nm_choropleth_AQI","fb259d37":"i = Image.open(\"..\/input\/geo-bud-districts\/Description of AQI levels.png\")\ni","51c0ea7e":"daily_AQI = unstacked_AQI.groupby([\"station_in_district\",\"date\"]).max()\n\n# Log transform AQI index values to show the differences in time more clearly\ndaily_AQI = np.log(daily_AQI)","e86b8fc2":"daily_AQI.index = daily_AQI.index.set_levels((pd.to_datetime(daily_AQI.index.levels[1])\n                 .astype(int) \/\/ 10**9)\n                 .astype('U10'), level=1)\ndaily_AQI.head()","1fe35bf4":"max_AQI = daily_AQI.max()\nmax_AQI","19bc341a":"min_AQI = daily_AQI.min()\nmin_AQI","caf0aa34":"from branca.colormap import linear\n\n# abot color brewer\ncmap = linear.YlOrRd_09.scale(min_AQI, max_AQI)\ndaily_AQI = daily_AQI.apply(cmap)","1b237a5c":"daily_AQI_df = pd.DataFrame(daily_AQI, columns=['color'])\ndaily_AQI_df.reset_index(level='date',inplace=True)\ndaily_AQI_df.head()","a2dbf948":"closest_stations = pd.DataFrame(gdf_districts[['closest_station','district_code']]).reset_index(drop=False)\nclosest_stations.head()","27dc4e4a":"style_df = closest_stations.merge(daily_AQI_df[['date','color']], left_on='closest_station', right_on='station_in_district')\nstyle_df.drop('closest_station', axis=1, inplace=True)\nstyle_df.head()","16622566":"district_list = style_df['district_id'].unique().tolist()\ndistrict_idx = range(len(district_list))\n\nstyle_dict = {}\nfor i in district_idx:\n    district = district_list[i]\n    result = style_df[style_df['district_id'] == district]\n    inner_dict = {}\n    for _, r in result.iterrows():\n        inner_dict[r['date']] = {'color': r['color'], 'opacity': 1}\n    style_dict[str(i)] = inner_dict","b8f3c9ca":"districts_df = gdf_districts[['geometry']]\ndistricts_gdf = gdp.GeoDataFrame(districts_df)\ndistricts_gdf = districts_gdf.drop_duplicates().reset_index()\ndistricts_gdf.head()","8b9c9c78":"# Initialize a map\nm_time_slider_AQI = folium.Map([47.4857,19.0902], tiles='Stamen Toner', zoom_start=11,min_zoom=2, max_bounds=True)\n\n# Draw a TimeSliderChoropleth on it\ng = TimeSliderChoropleth(\n    districts_gdf.to_json(),\n    styledict=style_dict\n\n).add_to(m_time_slider_AQI)\n\n# Add a GeoJsonTooltip to the map to show district number when hovering the mouse over it\ngeojson1 = folium.GeoJson(data=districts.to_json(),\n                          style_function=lambda x: {'color':'white','fillColor':'transparent','weight':0.5},\n                          tooltip=folium.GeoJsonTooltip(fields=['district_code'],\n                                                        labels=False,\n                                                        sticky=True),\n                          highlight_function=lambda x: {'weight':2,'fillColor':'grey'}\n                        \n            ).add_to(m_time_slider_AQI)\n\n# Show the scale of values\n_ = cmap.add_to(m_time_slider_AQI)\ncmap.caption = \"LOG Air Quality Index - the max median among 5 parameters over 2016-2019\"\n\n# Save and display the map\nm_time_slider_AQI.save(outfile='timeslider_budapest_AQI_2016-2019.html')\nm_time_slider_AQI","397b28b8":"median_AQI_per_param.head()","ba160a80":"fg_df = median_AQI_per_param.reset_index()\nfg_df.columns = ['station_in_district','parameter','value']\n\nfg_df = closest_stations.merge(fg_df[['station_in_district','parameter','value']], left_on='closest_station', right_on='station_in_district')\nfg_df.drop(['closest_station','station_in_district'], axis=1, inplace=True)\n\nfg_df.set_index(['district_id'], inplace=True)\n\nfg_df.head()","a92fd16b":"co = fg_df[fg_df['parameter'] == ' co']\nno2 = fg_df[fg_df['parameter'] == 'no2']\no3 = fg_df[fg_df['parameter'] == 'o3']\npm10 = fg_df[fg_df['parameter'] == 'pm10']\nso2 = fg_df[fg_df['parameter'] == 'so2']","95746fc9":"# Initialize a map\nm_parameters = folium.Map([47.4857,19.0902], tiles='cartodbpositron', zoom_start=11,min_zoom=2, max_bounds=True)\n\n# Create feature groups\nfeature_group0 = folium.FeatureGroup(name='co',overlay=True).add_to(m_parameters)\nfeature_group1= folium.FeatureGroup(name='no2',overlay=True).add_to(m_parameters)\nfeature_group2 = folium.FeatureGroup(name='o3',overlay=True).add_to(m_parameters)\nfeature_group3= folium.FeatureGroup(name='pm10',overlay=True).add_to(m_parameters)\nfeature_group4 = folium.FeatureGroup(name='so2',overlay=True).add_to(m_parameters)\n\nfs = [feature_group0,feature_group1,feature_group2,feature_group3,feature_group4]\nparameters = [co.value,no2.value,o3.value,pm10.value,so2.value]\n\n# Add a choropleth map for each parameter\nfor i in range(len(parameters)): \n    choropleth1 = folium.Choropleth(\n    geo_data=districts.to_json(),\n    name='choropleth',\n    data=parameters[i],\n    key_on='feature.id',\n    fill_color='YlGn',\n    nan_fill_color=\"black\",\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    highlight=True,\n    line_color='black').geojson.add_to(fs[i])\n\n# Add a GeoJsonTooltip to the map to show district number when hovering the mouse over it\ngeojson1 = folium.GeoJson(data=districts.to_json(),\n                          style_function=lambda x: {'color':'green','fillColor':'transparent','weight':0.5},\n                          tooltip=folium.GeoJsonTooltip(fields=['district_code'],\n                                                        labels=False,\n                                                        sticky=True),\n                          highlight_function=lambda x: {'weight':2,'fillColor':'grey'},\n                        \n                         ).add_to(choropleth1)\n    \n# Show the scale of values\ncolormap = linear.YlGn_09.scale(\nfg_df.value.min(),\nfg_df.value.max()).to_step(10)\ncolormap.caption = 'Median AQI for each parameter over 2016-2019'\ncolormap.add_to(m_parameters)\n   \n# Add layer control tool that lets you choose how many parameters to show on the map\nfolium.LayerControl(collapsed=False).add_to(m_parameters)\n\n# Save and display the map\nm_parameters.save('median_AQI_per_parameter.html')\nm_parameters","b47a6b2d":"Define and apply maps:","783c8e9c":"It is interesting to see how the air quality changes over time in Budapest. \n\nThere is a slight regularity that I've noticed - in winter times the air quality is worse than at other times throught a year. \n\nIt can be explained in a [following way](https:\/\/www.accuweather.com\/en\/health-wellness\/why-air-pollution-is-worse-in-winter\/689434#:~:text=The%20reason%20for%20this%20is,in%20the%20dense%20colder%20air.): \"cold air is denser and has less space between the molecules of gas. When the temperature drops and cold air blankets the ground, any warm air is forced to pass over it. In this way, the cold air can form a kind of cap. Pollutants aren\u2019t as free to escape and disperse in the dense colder air. This density means that cold air traps the pollution but also doesn\u2019t whisk it away. Air pollution in winter remains in place for much longer and therefore is breathed in at a higher rate than during the summer\".\n\nThere are also quite a few dates when the air quality was much worse in particular districts but not in others. This should be inspected further to understand the reasons behind. Here are some examples of those dates for a possibe future research:\n* Feb 22 2017 (20th,21st,22nd districts);\n* Apr 04 2017 (4th district);\n* Nov 30 2017 (20th,21st,22nd districts);\n* Feb 17 2018 (4th district);\n* Jun 06 2018 (13th, 14th districts);\n* Aug 02 2018 (8th district);\n* Sep 02 2018 (8th district);\n* Nov 05 2018 (1st, 2nd, 3rd districts);\n* Dec 23 2018 (15th district);\n* Mar 25 2019 (1st, 2nd, 3rd districts);\n* Oct 03 2019 (9th, 10th, 11th, 12th districts).","04285fd3":"### 1.2 Location of air quality measuring stations\n\nWe are going to use data from 11 measuring stations in Budapest while there are 23 districts. To resolve this issue, we will find the closest station to the center of each district. For that, we need to find the centroid of each polygon (center of each district) and it will be a POINT object with longitude and latitude coordinates.","31625587":"# Visualizing Air Quality in Budapest with Folium\n## Introduction\nThe **goal of this notebook** is to apply new skills learned from the [Geospatial Analysis course](https:\/\/www.kaggle.com\/learn\/geospatial-analysis) to visualize the air quality in Budapest, Hungary. I live in this city, so I thought it would be interesting to compare its districts in this regard. \n\nI have compiled the dataset for this project from a [website](https:\/\/aqicn.org\/city\/budapest\/) that is measuring air pollution across the world. There are measurements for 5 main parameters over the years 2016-2019: co, no2, o3, pm10, so2 (read further about these pollutants in the \"Pollutants\" section [here](https:\/\/en.wikipedia.org\/wiki\/Air_pollution)). \n\nIn Budapest there are 12 measuring stations, in my analysis I had to remove one of them (situated in the 5th district) as it is fairly new and doesn't have measurements for the whole period of research. \n\nThe geodata about Budapest districts is taken from OSMNX (a Python package for downloading administrative boundary shapes and street networks from OpenStreetMap) using [geocoding](https:\/\/www.kaggle.com\/alexisbcook\/manipulating-geospatial-data).\n\nDuring my research I have created the following 4 maps of Budapest districts:\n1. A simple map showing district borders and location of 11 measuring stations with the option to choose from a range of map tiles;\n2. A choropleth map showing the Air Quality Index (AQI) value for each district (a maximum among median values of the 5 measured parameters);\n3. A timeslider choropleth map demonstrating how the AQI value for each district changed over the researched period (2016-2019);\n4. A choropleth map displaying 5 parameters of the aggregate AQI using feature group and layer control.\n\nThe logbook of this project can be found [here](https:\/\/docs.google.com\/spreadsheets\/d\/1N_3xASxg3NRPEUMzZn5oDMCpE0OkMCAhTfPZsqVewjc\/edit?usp=sharing). It includes the following tabs:\n\n- Time spent on the project\n- Ideas for this project\n- Useful information for the project (links and info I found about Geospatial Analysis)\n- AQI (data sources)\n- Possible future improvements\n- Lessons learned from the project\n\nThe dataset for this project can be found [here](https:\/\/www.kaggle.com\/tatianasnwrt\/geo-bud-districts).\n\nThe GitHub repository of this project is [here](https:\/\/github.com\/TatianaSnauwaert\/BP_Air_Quality_Folium).","73d91a4f":"Next we create a dictionary (style_dict) that has all the necessary information structured in a specific way. Here we assign opacity = 1 to every row.","dd779033":"We read directly from the dataset and add a column called \"district_code\" to make it easier to use further.","0eda6be1":"## 1. Data collection and preparation\n### 1.1 Geodata for district borders\nFirst, we'll use the geocoding technique to create a data frame containing the Geometry column. It contains all of the geometric objects that are displayed when we call the plot() method. While this column can contain a variety of different datatypes, each entry will typically be a Point, LineString, or Polygon.\n\nFor geocoding we need a list of strings - names of objects we want to retrieve geodata for, so we create a list of district names. Then we can use the ox.gdf_from_places(places) to get data directly from OSMNX. I reached the limit quite quickly by just reloading this notebook's page, so I saved the data into a geo dataframe and uploaded it to my [dataset](https:\/\/www.kaggle.com\/tatianasnwrt\/geo-bud-districts). ","42dd58ae":"## 4. Displaying 5 parameters of the aggregate AQI using feature group and layer control","bacb1163":"Let's draw our first simple map showing district borders and location of 11 measuring stations with the option to choose from a range of map tiles. Different tiles let us highlight different aspects in our analysis.\nTo prevent the fact that the continents are continually repeated and the map can be panned endlessly from either side, we set a minimum zoom and set max_bounds=True.","12028995":"Once we've found the historical AQI value per station, we are going to use pd.Series.map() function to assign that value to the closest district. We then make the district_id the index of the dataframe. To create a choropleth map both geodata (to draw district borders) and data (the AQI values) have to have the same index.","8755e0c1":"## 3. TimeSliderChoropleth to show the change of the AQI over the years\n\nIn this section we are going to create a choropleth map with a timeslider. It will let us examine how the AQI value was changing (almost) every day during 2016-2019 in every district.\n\nA good example of creating this type of map can be found [here](https:\/\/github.com\/python-visualization\/folium\/blob\/master\/examples\/TimeSliderChoropleth.ipynb).\n\nUsing both color and opacity gives us the ability to simultaneously visualize two features on the choropleth. Color can be used to visualize the main feature and opacity to visualize how many measurements were in that group. In our case we only have 1 feature - the AQI value. Still, the use of opacity in the style dictionary is obligatory! We will simply set it to a fixed value.","5233d6a9":"We create a separate dataframe with the district_id and the closest to it station:","684d1457":"We then find the closest station. For that we first calculate the distance from every station to every district center and then take the minimum of that list.","485cdc13":"Create separate dataframes for each parameter:","3efc49d5":"We will now merge the closest_stations and daily_AQI_df to create the style_df that will show specific color for a specific date and district based on the AQI value on that day.","df51acf0":"Finally, create a geo dataframe containing the location of each station in the special \"geometry\" column.","1eb2854a":"Finally, we create a TimeSlider map.\n\nNote: Zooming the Folium TimeSliderChoropleth is currently not working in Chrome, at the moment it's an open [issue](https:\/\/github.com\/python-visualization\/folium\/issues\/841).","20b06a44":"Below is the geodataframe that is used to draw district borders on the map.","388da1a1":"We have to make sure that both dataframes - stations and district centers - use the same CRS (coordinate reference system - shows how the projected points correspond to real locations on Earth) to calculate distances properly. We will change the CRS of both dataframes to EPSG 2263 because it allows us to measure distances in meters.","88cacb3c":"As we see, we've got quite a few NaN values, so we'll first try to fill them with backward fill. It makes the replaced missing value more realistic (unless something special happend that day) as we are taking a value measured the next day. If there are still NaNs after that, we'll fill them with the median values of their columns.","727b2f26":"We want to map the column with the AQI index to a hex color. To do this we use a normal colormap. To create the colormap, we calculate the maximum and minimum values over all the timeseries.","4e77fefa":"Here we crete a dataframe showing an index value for each parameter per station on a (almost) daily basis. As we will ","7a9f08b4":"According to the map above the best overall air quality is in the 6th, 13th, 11th and 3rd districts. The worst air quality is in the 2nd, 12th, 1st and 5th districts. The difference between the best and the worst districts is not enormous - it ranges from 19 to 30. \n\nAccording to [the aqicn.org definition](https:\/\/aqicn.org\/city\/budapest\/), the overall air pollution level in Budapest can be described as Good (0-50) (from the image below read the Health Implications).","a9e72828":"Next, we find each station's coordinates.\nWe do this manually through this source: http:\/\/levegominoseg.hu\/automata\n\nStation in district V was removed from our project as it is new and doesn't have measurements for all the researched years.","e381cda4":"## 2. The AQI value for each district\n\nIn this section we are going to calculate the median Air Quality Index value over the years 2016-2019 for each district based on the maximum among 5 measured parameters (co, no2, o3, pm10, so2).\n\nI've decided to use the median index value for visualization because it shows us the situation in each district most of the time. If I'd use the mean value then I would just take an average of some extreme values over the years (probably due to some temporary issues) which is not representative of what it's like to live in a district on a daily basis.\n\nI am taking the maximum value among the components to represent the worst air quality based on a technique that is applied when [the CAQI index](https:\/\/en.wikipedia.org\/wiki\/Air_quality_index#Europe) is calculated.\n\nFirst, we are going to find the closet station to each district center as there are only 11 stations and as much as 23 districts in Budapest. We create a geo dataframe that contains the centers of each district.","2864620b":"The above map can be used to investigate the influence of specific parameters (components of an aggregate AQI) and their combinations on the air quality in Budapest. \n\n- \"co\" is quite high in most of the districts but highest in the 11th district;\n- \"no2\" is mostly elevated in the districts 11, 12, 1, 5, 9, 8, 7, 14;\n- \"o3\" level is the highest in the 2nd district;\n- \"pm10\" is worst in the districts 1, 5, 12;\n- \"so2\" is the highest in the 11th district.","36a0ab6a":"## Conclusion\n\nIn this notebook I have conducted a reseach of the Air Quality in Budapest using Folium, a library that makes it easy to visualize data that\u2019s been manipulated in Python on an interactive leaflet map.\n\nThe district borders data was extracted using the geocoding technique through the OSMNX library. The air quality data is collected manually from the aqicn.org website.\n\nWe have used data from 11 measuring stations in Budapest while there are 23 districts. To resolve this issue, we found the closest station to the center of each district using the centroid of each polygon (a POINT object with longitude and latitude coordinates).\n\nThen we have calculated the median Air Quality Index value over the years 2016-2019 for each district based on the maximum among 5 measured parameters (co, no2, o3, pm10, so2).\n\nBased on that index we have discovered that the best air quality is in the 6th, 13th, 11th and 3rd districts. The worst air quality is in the 2nd, 12th, 1st and 5th districts. The difference between the best and the worst districts is not enormous - it ranges from 19 to 30.\n\nThe overall air pollution level in Budapest can be described as \"Good\", meaning that air quality is considered satisfactory, and air pollution poses little or no risk.\n\nIn the next section we have created a choropleth map with a timeslider which lets us examine how the AQI value was changing during 2016-2019 in every district.\n\nWe have noticed a slight regularity - in winter times the air quality is worse than at other times throught a year. It can be explained by the fact that the cold air is more dense, so it doesn't let pollutants escape that easily as the warm air.\n\nThere are also quite a few dates when the air quality was much worse in particular districts but not in others. This should be inspected further for each date to understand the reasons behind (for example reading the news around that date).\n\nFinally, we have investigated the influence of specific parameters (components of an aggregate AQI) on the air quality in Budapest using feature group and layer control functionalities and found that:\n\n- \"co\" is quite high in most of the districts but highest in the 11th district;\n- \"no2\" is mostly elevated in the districts 11, 12, 1, 5, 9, 8, 7, 14;\n- \"o3\" level is the highest in the 2nd district;\n- \"pm10\" is worst in the districts 1, 5, 12;\n- \"so2\" is the highest in the 11th district."}}