{"cell_type":{"5a9b05cc":"code","2cf67dff":"code","13e344ea":"code","8e3af1e1":"code","50506e3c":"code","c07c834e":"code","e5dfab80":"code","f00ddf80":"code","1374b9dc":"code","2a3b4c23":"code","6f6831dc":"code","26987b90":"code","335cdf44":"code","3cf3213f":"code","2a5e9594":"code","f9df4cca":"code","27a8f602":"code","a010c430":"code","c4ce0e36":"markdown","1fd889bb":"markdown","19d6fb63":"markdown","7df442b8":"markdown","a3988c0b":"markdown"},"source":{"5a9b05cc":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image, display\nimport matplotlib.cm as cm\n\nimport tensorflow as tf \n\nimport os\nimport shutil\nfrom tqdm import tqdm\nfrom random import shuffle\n\nimport cv2\nfrom glob import glob\n\nfrom keras import backend as K\nimport random\nimport albumentations as A\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.applications.efficientnet import *","2cf67dff":"image_dir = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')\n\n# Get filepaths and labels\nfilepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\n# Concatenate filepaths and labels\nimage_df = pd.concat([filepaths, labels], axis=1)\n\n# Drop GT images\nimage_df = image_df[image_df['Label'].apply(lambda x: x[-2:] != 'GT')]","13e344ea":"# Shuffle the DataFrame and reset index\nimage_df = image_df.sample(frac=1).reset_index(drop = True)\n\n# Show the result\nimage_df.head(3)","8e3af1e1":"# Display 20 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(image_df.Filepath[i]))\n    ax.set_title(image_df.Label[i])\nplt.tight_layout()\nplt.show()","50506e3c":"# Separate in train and test data\ntrain_df, test_df = train_test_split(image_df, train_size=0.9, shuffle=True, random_state=1)","c07c834e":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","e5dfab80":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","f00ddf80":"def create_model(input_shape=(224, 224, 3)):\n    \n    inputs = Input(input_shape)\n    base_model = EfficientNetB1(input_shape=input_shape, include_top=False, classes=9)\n    \n    x = base_model(inputs)\n    \n    x = GlobalAveragePooling2D()(x)\n#     x = Dropout(0.1)(x)\n    \n    x = Dense(56, activation='relu')(x)\n    x = Dropout(0.1)(x)\n    \n    outputs = Dense(9, activation='sigmoid')(x)\n    \n    model = Model(inputs, outputs)\n    \n    return model","1374b9dc":"K.clear_session()\n\nmodel = create_model((224, 224, 3))\n# model = load_model('models\/checkpoint\/EfficientNetB0.h5')\n\nmetrics = [\n    'accuracy',\n    'AUC'\n]\n\nmodel.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=metrics)","2a3b4c23":"checkpoint_path = 'models\/EfficientNetB1\/model_224.h5'\n\ncallbacks = [\n    EarlyStopping(monitor='val_loss', mode='min', patience=10, verbose=1),\n    ReduceLROnPlateau(monitor='val_loss', mode='min', factor=0.1, patience=5, min_lr=0.000001, verbose=1),\n    ModelCheckpoint(monitor='val_loss', mode='min', filepath=checkpoint_path, verbose=1, save_best_only=True, save_weights_only=False)\n]","6f6831dc":"history = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=10,\n    callbacks=callbacks\n)","26987b90":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","335cdf44":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","3cf3213f":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","2a5e9594":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')","f9df4cca":"from sklearn.metrics import classification_report\ny_test = list(test_df.Label)\nprint(classification_report(y_test, pred))","27a8f602":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (10,6))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)))\nplt.title('Normalized Confusion Matrix')\nplt.show()","a010c430":"# Display 15 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\")\nplt.tight_layout()\nplt.show()","c4ce0e36":"## My blog[ Data Science with Python](https:\/\/dspyt.com) is at [Dspyt.com](https:\/\/dspyt.com)\n\n## [Simple Image Classification with EfficientNet](https:\/\/dspyt.com\/simple-image-classification-with-efficientnet\/)","1fd889bb":"# 5. Visualize the result<a class=\"anchor\" id=\"5\"><\/a>","19d6fb63":"# 3. Load the Images with a generator<a class=\"anchor\" id=\"3\"><\/a>","7df442b8":"# 2. Display 15 pictures of the dataset<a class=\"anchor\" id=\"2\"><\/a>","a3988c0b":"## Examples of prediction"}}