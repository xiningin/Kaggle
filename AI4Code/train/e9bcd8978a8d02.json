{"cell_type":{"7617328d":"code","e11aea6c":"code","e63b340a":"code","b8a2dc8a":"code","342c013f":"code","db72603a":"code","e9adc9e1":"code","4424454d":"code","a33ba9fb":"code","f7eebbca":"code","f8ffbb50":"code","027ead6b":"code","8b6ca122":"code","2c64efa6":"code","7e735012":"code","8a9a69de":"code","02abbaed":"code","7ceb71a1":"code","8e4a0bcc":"code","4a36494a":"code","5756af26":"code","e19ba58c":"code","2d8b12d4":"code","b127ec65":"code","815e0bd6":"code","58f5f530":"code","a632edcb":"code","f119ce9b":"code","dfd7c701":"markdown","0615812c":"markdown","f3e10eb6":"markdown","bf2eab79":"markdown","383d92a0":"markdown","dd1454a2":"markdown","b6e5aaf6":"markdown","c4a06a69":"markdown","7c8a5afc":"markdown","2b937d95":"markdown","03315e8f":"markdown","492e2372":"markdown","d32ff77f":"markdown","311968e4":"markdown"},"source":{"7617328d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e11aea6c":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_df.head()","e63b340a":"test_df.head()","b8a2dc8a":"sb.barplot(x=\"Pclass\", y=\"Survived\", data=train_df, color=\"b\")","342c013f":"sb.barplot(x=\"Sex\", y=\"Survived\", data=train_df, color=\"b\")","db72603a":"sb.barplot(x=\"SibSp\", y=\"Survived\", data=train_df)","e9adc9e1":"sb.barplot(x=\"Parch\", y=\"Survived\", data=train_df)","4424454d":"sb.barplot(x=\"Survived\", y=\"Fare\", data=train_df)","a33ba9fb":"sb.barplot(x=\"Embarked\", y=\"Survived\", data=train_df)","f7eebbca":"train_df=train_df.drop(\"PassengerId\",axis=1)\ntrain_df=train_df.drop(\"Name\",axis=1)\ntrain_df=train_df.drop(\"Ticket\",axis=1)\ntrain_df=train_df.drop(\"Cabin\",axis=1)","f8ffbb50":"test_passenger_Id= test_df[\"PassengerId\"]\ntest_df=test_df.drop(\"PassengerId\",axis=1)\ntest_df=test_df.drop(\"Name\",axis=1)\ntest_df=test_df.drop(\"Ticket\",axis=1)\ntest_df=test_df.drop(\"Cabin\",axis=1)","027ead6b":"train_df.head()","8b6ca122":"for cols in train_df:\n    print(\"col : {} -- {}= {}\".format(type(train_df[cols][0]),cols,train_df[cols].isnull().sum()))","2c64efa6":"for cols in test_df:\n    print(\"col : {} -- {}= {}\".format(type(test_df[cols][0]),cols,test_df[cols].isnull().sum()))","7e735012":"train_df = train_df.fillna(train_df['Age'].mean())\ntrain_df = train_df.fillna(train_df['Embarked'].mode())\n\ntest_df = test_df.fillna(test_df['Age'].mean())\ntest_df = test_df.fillna(test_df['Fare'].mean())","8a9a69de":"from sklearn.preprocessing import LabelEncoder\n\n# train_df['Sex'] = train_df['Sex'].astype('category')\n# train_df['Embarked'] = train_df['Embarked'].astype('category')\n# train_df = pd.get_dummies(train_df)\n# train_df=train_df.drop('Embarked_29.69911764705882')\n\n# test_df['Sex'] = test_df['Sex'].astype('category')\n# test_df['Embarked'] = test_df['Embarked'].astype('category')\n# test_df = pd.get_dummies(test_df)\nlabelencoder = LabelEncoder()\ntrain_df['Sex'] = labelencoder.fit_transform(train_df['Sex'].astype(str))\ntrain_df['Embarked'] = labelencoder.fit_transform(train_df['Embarked'].astype(str))\n\ntest_df['Sex'] = labelencoder.fit_transform(test_df['Sex'].astype(str))\ntest_df['Embarked'] = labelencoder.fit_transform(test_df['Embarked'].astype(str))\n\ntest_df.head()","02abbaed":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.naive_bayes import MultinomialNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nX_train,X_val,Y_train,Y_val = train_test_split(train_df.drop('Survived',axis=1),train_df[\"Survived\"],test_size=0.2, random_state=42)","7ceb71a1":"model = RandomForestClassifier(criterion='entropy',n_estimators=200,max_depth=9,random_state=7,class_weight='balanced')\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_val)\nprint(accuracy_score(Y_pred,Y_val))","8e4a0bcc":"# model = LGBMClassifier(random_state=10,max_depth= 50,learning_rate=0.05)\n# model.fit(X_train, Y_train)\n# Y_pred = model.predict(X_val)\n# print(accuracy_score(Y_pred,Y_val))","4a36494a":"# model = XGBClassifier()\n# model.fit(X_train, Y_train)\n# Y_pred = model.predict(X_val)\n# print(accuracy_score(Y_pred,Y_val))","5756af26":"# model = LinearSVC(random_state=0, tol=1e-5)\n# model.fit(X_train, Y_train)\n# Y_pred = model.predict(X_val)\n# print(accuracy_score(Y_pred,Y_val))","e19ba58c":"# model = GaussianNB()\n# model.fit(X_train, Y_train)\n# Y_pred = model.predict(X_val)\n# print(accuracy_score(Y_pred,Y_val))","2d8b12d4":"predictions = model.predict(test_df)\noutput = pd.DataFrame({'PassengerId': test_passenger_Id, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b127ec65":"from keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Activation,InputLayer\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import TensorBoard, EarlyStopping, ModelCheckpoint","815e0bd6":"train_df=pd.get_dummies(train_df)\ntest_df= pd.get_dummies(test_df)\n\ntrain_df.head()","58f5f530":"t_model = Sequential()\n\nt_model.add(InputLayer(input_shape=(7,)))\nt_model.add(Dense(1024, activation='relu'))\nt_model.add(Dense(512, activation='relu'))\nt_model.add(Dense(256, activation='relu'))\nt_model.add(Dense(128, activation='relu'))\nt_model.add(Dense(64, activation='relu'))\n\nt_model.add(Dense(32, activation='relu'))\nt_model.add(Dense(1, activation='sigmoid'))\n\nt_model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","a632edcb":"t_model.fit(train_df.drop('Survived',axis=1),train_df[\"Survived\"], epochs=100, batch_size=10,verbose=1)","f119ce9b":"# preds= t_model.predict(test_df)\n# predictions= [0 if pred < 0.5 else 1 for pred in preds]\n# output = pd.DataFrame({'PassengerId': test_passenger_Id, 'Survived': predictions})\n# output.to_csv('my_submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","dfd7c701":"### Filling in the missing values ","0615812c":"### And Gender also matters","f3e10eb6":"## 1. Titanic ML Models\n\n1. Random Forest\n2. LGBM\n3. XGB\n4. LinearSVC\n5. GaussianNB","bf2eab79":"## Importing ML Libraries","383d92a0":"### This step converts our dataframes as passable to the Nueral Networks","dd1454a2":"### Checking for null values","b6e5aaf6":"### Clearly class matters as per the graph","c4a06a69":"### LabelEncoding the categorical values to change them to int","7c8a5afc":"### Checking out other models. Uncomment and Run","2b937d95":"### In all of my submissions, RandomForest stood out for the results.","03315e8f":"### Now we need to check for the data type as we can only enter ints\/floats to our model","492e2372":"## Saving the Submission File","d32ff77f":"### A Simple Nueral Network. You can try your hands on changing the architecture","311968e4":"## 2. Titanic Deep Learning Model"}}