{"cell_type":{"02b40b84":"code","99240a55":"code","c9c5d7fd":"code","aed635ff":"code","bdfc2c2c":"code","d2fc29fd":"code","e9dcaf02":"code","359fa68c":"code","f8fa1223":"code","f47f7e7f":"code","496ad3ac":"code","7537de24":"code","1dd31e28":"code","fb487099":"code","f6d96717":"code","adf0ac2e":"code","67b2ac57":"code","07cdd2aa":"code","ef488af2":"code","f3998921":"markdown","40a4796a":"markdown","f9659f67":"markdown","2b3de9f7":"markdown","8c2d4580":"markdown","aba6d381":"markdown","113d93d5":"markdown","a0e303af":"markdown","193cf1d6":"markdown","961c583c":"markdown"},"source":{"02b40b84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99240a55":"path = \"..\/input\/location-data\/Location_Number_2017.csv\"\n\ndf_2017 = pd.read_csv(path).set_index('ID')\ndf_2017 = df_2017.replace('*', 0)\ndf_2017","c9c5d7fd":"df_2017","aed635ff":"all_id = df_2017.index.values\nall_id","bdfc2c2c":"total_id = 'TOTAL PAST MONTH ALCOHOL USERS', \nmain_id = ['Car or Other Vehicle',\n       'Home',\n       \"Someone Else's Home\",\n       'Park, Beach, or Parking Lot', 'Restaurant, Bar, or Club',\n       'Concert or Sports Game', 'School',\n       'Some Other Place']\nother_id = [\n    'Party, Wedding, or Celebration',\n       'Outside (Location not Specified)',\n       'Hotel, Motel, or Resort',\n       'Camping, Hunting, or Fishing',\n       'Cabin, Cottage, Vacation Home, etc.', 'Dorm Room'\n]\ncol = df_2017.columns","d2fc29fd":"def remove_punc(x, dtype=int):\n    if not isinstance(x, str):\n        return x\n    x_ = \"\"\n    for i in x:\n        if i == ',':\n            continue\n        x_ += i\n    x_ = dtype(x_)\n    return x_","e9dcaf02":"for c in col:\n    df_2017[c] = df_2017[c].apply(lambda x : remove_punc(x))","359fa68c":"def preprocessing(df, dtype=int):\n    \"\"\"\n    Input: Unpreprocess dataframe\n    Output: Preprocessed Dataframe\n    \"\"\"\n    df = df.replace('*', 0)\n    \n    col = df.columns\n    \n    for c in col:\n        df[c] = df[c].apply(lambda x : remove_punc(x, dtype))\n        \n    return df","f8fa1223":"import matplotlib.pyplot as plt \nimport seaborn as sns","f47f7e7f":"plt.subplots(figsize=(6,6))\nplt.pie(df_2017[col[0]].loc[main_id].values, autopct='%1.1f%%')\n\nplt.legend(main_id)\nplt.show()","496ad3ac":"height=df_2017[col[0]].loc[main_id].values\nheight","7537de24":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\n\nax.bar(x = main_id, height=df_2017[col[0]].loc[main_id].values)\n\nfor bar in ax.patches:\n \n    # Using Matplotlib's annotate function and\n    # passing the coordinates where the annotation shall be done\n    ax.annotate(format(bar.get_height(), 'd'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 5),\n                   textcoords='offset points')\n\nax.legend(main_id)\nplt.show()","1dd31e28":"def plot_single_attribute(df, c, r):\n    \"\"\"\n    df: DataFrame\n    c: column, only one instance\n    r: row, can be an array\n    \"\"\"\n    # pie chart\n    \n    plt.subplots(figsize=(6,6))\n    plt.pie(df[c].loc[r].values, autopct='%1.1f%%')\n\n    plt.legend(r)\n    plt.title(\"Percentage in column: {}\".format(c))\n    plt.show()\n    \n    # bar chart\n    \n    fig = plt.figure()\n    ax = fig.add_axes([0,0,1,1])\n\n    ax.bar(x = main_id, height=df[c].loc[main_id].values)\n\n    for bar in ax.patches:\n\n        # Using Matplotlib's annotate function and\n        # passing the coordinates where the annotation shall be done\n        ax.annotate(format(bar.get_height()),\n                       (bar.get_x() + bar.get_width() \/ 2,\n                        bar.get_height()), ha='center', va='center',\n                       size=15, xytext=(0, 5),\n                       textcoords='offset points')\n\n    ax.legend(main_id)\n    plt.title(\"Bar plot of column: {}\".format(c))\n    plt.show()\n    \n    \nplot_single_attribute(df_2017, col[0], main_id)\n\n# tr\u01b0\u1eddng h\u1ee3p mu\u1ed1n plot theo row th\u00ec x\u00e0i df.transpose","fb487099":"def plot_multiple_attribute(df, cols, rows):\n    \"\"\"\n    df: DataFrame\n    cols: column, can be an array\n    rows: row, can be an array\n    \"\"\"\n    for c in cols:\n        print(c, rows)\n        plot_single_attribute(df, c, rows)\n        \n    prev = [0] * len(cols)\n    plt.subplots(figsize=(7, 10))\n    for row in rows:\n        plt.bar(cols, df.loc[row, cols], bottom=prev, label=row)\n        prev = prev + df.loc[row, cols]\n    plt.xticks(rotation=25)\n    plt.legend()\n    plt.show()\n\nplot_multiple_attribute(df_2017, col, main_id)","f6d96717":"def plot_hbar(df, index, col):\n    \"\"\"\n    df: Current dataframe \n    index: List of index\n    col: Value of column\n    \"\"\"\n    index = sorted(index, key=lambda x : df[col][x])\n    \n    plt.barh(index, df[col][index].values)\n    plt.title(\"Plot in Group: {}\".format(col))\n    plt.show()\n\nplot_hbar(df_2017, other_id, 'Aged 12-14')\nplot_hbar(df_2017, other_id, 'Aged 15-17')\nplot_hbar(df_2017, other_id, 'Aged 18-20')","adf0ac2e":"path_2018 = \"..\/input\/location-data\/Location_Number_2018.csv\"\npath_2019 = \"..\/input\/location-data\/Location_Number_2019.csv\"\npath_2020 = \"..\/input\/location-data\/Location_Number_2020.csv\"\npath_percentage_2017 = \"..\/input\/location-data\/Location_Percentage_2017.csv\"\npath_percentage_2018 = \"..\/input\/location-data\/Location_Percentage_2018.csv\"\npath_percentage_2019 = \"..\/input\/location-data\/Location_Percentage_2019.csv\"\npath_percentage_2020 = \"..\/input\/location-data\/Location_Percentage_2020.csv\"\n\ndf_2018 = pd.read_csv(path_2018).set_index(\"ID\")\ndf_2019 = pd.read_csv(path_2019).set_index(\"ID\")\ndf_2020 = pd.read_csv(path_2020).set_index(\"ID\")\n\ndf_percentage_2017 = pd.read_csv(path_percentage_2017).set_index(\"ID\")\ndf_percentage_2018 = pd.read_csv(path_percentage_2018).set_index(\"ID\")\ndf_percentage_2019 = pd.read_csv(path_percentage_2019).set_index(\"ID\")\ndf_percentage_2020 = pd.read_csv(path_percentage_2020).set_index(\"ID\")\n\ndf_2018 = preprocessing(df_2018)\ndf_2019 = preprocessing(df_2019)\ndf_2020 = preprocessing(df_2020)\n\ndf_percentage_2017 = preprocessing(df_percentage_2017, float)\ndf_percentage_2018 = preprocessing(df_percentage_2018, float)\ndf_percentage_2019 = preprocessing(df_percentage_2019, float)\ndf_percentage_2020 = preprocessing(df_percentage_2020, float)\n\nxlabel = [\"2017\", \"2018\", \"2019\", \"2020\"]","67b2ac57":"def plot_mutiple_dataframe(dfs, index, column, xlabel):\n    \"\"\"\n    dfs: list of DataFrame, order in incease year\n    index: value of index \n    column: columns name\n    \"\"\"\n    fig = plt.figure()\n    ax = fig.add_axes([0,0,1,1])\n    \n    values = [df[column][index] for df in dfs]\n    ax.bar(xlabel, values)\n    \n    for bar in ax.patches:\n\n        # Using Matplotlib's annotate function and\n        # passing the coordinates where the annotation shall be done\n        ax.annotate(format(bar.get_height()),\n                       (bar.get_x() + bar.get_width() \/ 2,\n                        bar.get_height()), ha='center', va='center',\n                       size=15, xytext=(0, 5),\n                       textcoords='offset points')\n    plt.title(\"\\\"{}\\\" - \\\"{}\\\" at year {}\".format(index, column, xlabel))\n    plt.show()","07cdd2aa":"plot_mutiple_dataframe([df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020], main_id[4], \"Total\", xlabel)","ef488af2":"plot_multiple_attribute(df_percentage_2017, col[:-2], main_id)","f3998921":"# Import ploting lib","40a4796a":"# H\u00e0m so s\u00e1nh thay \u0111\u1ed5i qua c\u00e1c n\u0103m\n\nv\u1edbi m\u1ed9t index c\u1ed1 \u0111\u1ecbnh, 1 column c\u1ed1 \u0111\u1ecbnh, v\u00e0 dfs l\u00e0 c\u00e1c dataframe d\u1eef li\u1ec7u c\u1ee7a c\u00e1c n\u0103m s\u1eafp t\u0103ng d\u1ea7n, h\u00e0m s\u1ebd th\u1ec3 hi\u1ec7n s\u1ef1 thay \u0111\u1ed5i c\u1ee7a gi\u00e1 tr\u1ecb t\u01b0\u01a1ng \u1ee9ng qua c\u00e1c n\u0103m","f9659f67":"## Plot th\u1ec3 hi\u1ec7n h\u00e0nh vi ng\u01b0\u1eddi d\u00f9ng trong \u0111\u1ed9 tu\u1ed5i","2b3de9f7":"# Plot c\u1ed9t n\u1eb1m ngang\n\nC\u00f3 plot ngang v\u00e0 sort, \u0111\u1ec3 th\u1ec3 hi\u1ec7n \u1ea3nh h\u01b0\u1edbng c\u00e1c index t\u1edbi c\u00e1c column c\u1ee5 th\u1ec3","8c2d4580":"# Nh\u1eafc nh\u1edf chung:\n\u1ede c\u00e1c h\u00e0m b\u00ean tr\u00ean, c\u00e1c gi\u00e1 tr\u1ecb df c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111c cho c\u1ea3 t\u1eadp s\u1ed1 l\u01b0\u1ee3ng v\u00e0 %\n\nV\u00ed d\u1ee5:","aba6d381":"# \u1ede trong n\u00e0y, ta g\u1ecdi t\u00ean c\u00e1c d\u00f2ng l\u00e0 column, t\u00ean c\u00e1c c\u1ed9t l\u00e0 index","113d93d5":"# H\u00e0m bi\u1ec3u di\u1ec5n theo m\u1ed9t c\u1ed9t duy nh\u1ea5t:\n\n\u0111\u1ea7u v\u00e0o c\u00f3 df: dataframe, c l\u00e0 c\u1ed9t, ch\u1ec9 \u0111c c\u00f3 1 c\u1ed9t, r l\u00e0 ch\u1ec9 s\u1ed1 c\u00e1c d\u00f2ng, \u0111\u1ec3 array hay 1 gi\u00e1 tr\u1ecb index \u0111\u1ec1u \u0111c","a0e303af":"# H\u00e0m n\u00e0y n\u00f3 s\u1ebd t\u1ef1 \u0111\u1ed9ng plot nhi\u1ec1u h\u01a1n c\u00e1c thu\u1ed9c t\u00ednh:\n\u1ede cu\u1ed1i c\u00f9ng k\u00e8m 1 bi\u1ec3u \u0111\u1ed3 c\u1ed9t ch\u1ed3ng l\u00ean nhau \u0111\u1ec3 th\u1ec3 hi\u1ec7n t\u1ed5ng s\u1ed1 l\u00e0 t\u1ec9 l\u1ec7, c\u00f3 th\u1ec3 nh\u00e9t v\u00e0o df_percentage \u0111\u1ec3 xem t\u1ec9 l\u1ec7 n\u00f3 ntn","193cf1d6":"# \u0110\u00e2y ch\u1ec9 l\u00e0 load data th\u00f4i","961c583c":"Tr\u01b0\u1eddng h\u1ee3p: mu\u1ed1n kh\u1ea3o s\u00e1t trend tr\u00ean d\u1eef li\u1ec7u v\u1ec1 %, \u0111\u1eb7t dfs = [df_percentage_2017, df_percentage_2018, df_percentage_2019, df_percentage_2020], index = gi\u00e1 tr\u1ecb index t\u01b0\u01a1ng \u1ee9ng, column = gi\u00e1 tr\u1ecb c\u1ed9t t\u01b0\u01a1ng \u1ee9ng, xlabel m\u1eb7c \u0111\u1ecbnh c\u00e1c n\u0103m kh\u00f4ng n\u00ean thay \u0111\u1ed5i.\n\nTr\u01b0\u1eddng h\u1ee3p: mu\u1ed1n kh\u1ea3o s\u00e1t trend tr\u00ean d\u1eef li\u1ec7u v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng, \u0111\u1eb7t dfs = [df_2017, df_2018, df_2019, df_2020], index = gi\u00e1 tr\u1ecb index t\u01b0\u01a1ng \u1ee9ng, column = gi\u00e1 tr\u1ecb c\u1ed9t t\u01b0\u01a1ng \u1ee9ng, xlabel m\u1eb7c \u0111\u1ecbnh c\u00e1c n\u0103m kh\u00f4ng n\u00ean thay \u0111\u1ed5i."}}