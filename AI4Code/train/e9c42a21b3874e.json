{"cell_type":{"d9a7d204":"code","51dc6a53":"code","29b968a0":"code","fd99007c":"code","a209c5e4":"code","ea60e938":"code","5571c953":"code","4953a9df":"code","9521ffe9":"code","7ed9d71e":"code","5dff5afc":"code","8472b311":"markdown"},"source":{"d9a7d204":"%%writefile color_header.py\nfrom IPython.display import display,HTML\nfrom IPython.core.magic import register_line_magic\nimport random,warnings; warnings.filterwarnings('ignore')\n\n@register_line_magic\ndef header(string):\n    font_size=24; font_family='Ewert'\n    width=650; height=font_size*2.5\n    randi=str(random.uniform(0,9999999))\n    html_str=\"\"\"\n    <head><script src='https:\/\/d3js.org\/d3.v6.min.js'><\/script>\n    <\/head><style>@import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"+\\\n    font_family+\"\"\"&effect=3d'; #colorized1 {font-family:\"\"\"+font_family+\\\n    \"\"\"; color:white; text-align:center; font-size:\"\"\"+str(font_size)+\\\n    \"\"\"px;}<\/style><h1 id='colorized1' class='font-effect-3d'>\"\"\"+string+\\\n    \"\"\"<\/h1><script>\n    var tc=setInterval(function(){\n        var now=new Date().getTime();\n        var iddoc1=document.getElementById('colorized1');\n        iddoc1.style.color=d3.interpolateSinebow(now\/60000); },1)\n    <\/script>\"\"\"\n    file='d3header'+randi+'.html'\n    with open(file,'w') as f:\n         f.write(html_str); f.close()\n    string=\"\"\"<div id='html_string\"\"\"+randi+\\\n    \"\"\"'><iframe src='\"\"\"+file+\\\n    \"\"\"' height=\"\"\"+str(height)+\"\"\" width=\"\"\"+str(width)+\\\n    \"\"\" style='display:block;'><\/iframe><\/div>\"\"\"\n    display(HTML(string))","51dc6a53":"%run color_header.py\n%header Code Modules, Settings, & Functions","29b968a0":"from IPython.display import display,HTML\nfrom IPython.core.magic import register_line_magic\nimport random,warnings; warnings.filterwarnings('ignore')\nimport tensorflow as tf,pylab as pl,numpy as np\nimport tensorflow.keras.layers as tkl\nimport tensorflow_datasets as tfds\nfrom tensorflow.data import Dataset as tds\ntf.random.set_seed(123)\nnp.random.seed(123)\ntfds.disable_progress_bar()\n\ndef styled_header(str):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=Aladin&effect=3d-float';      \n    <\/style><h1 class='font-effect-3d-float' \n    style='font-family:Aladin; color:#ff6611; font-size:20px;'>%s<\/h1>\"\"\"%str))\n    \n@register_line_magic\ndef display_data(data):\n    global features\n    if data=='train': x,y=x_train,y_train\n    if data=='test': x,y=x_test,y_test\n    if data=='vaid': x,y=x_valid,y_valid\n    cols=[['#ff6611','#11ffee'][int(el)] for el in y]\n    pl.figure(figsize=(10,6))\n    pl.scatter(x[:,0],x[:,1],c=cols,marker='*')\n    styled_header('Labeled Artificial Data')\n    pl.tight_layout(); pl.grid(); pl.show()\n    styled_header(str(features))\n    \n@register_line_magic\ndef display_predictions(data):\n    global y_valid,py_valid,y_test,py_test\n    if data=='test': py,y=py_test,y_test\n    if data=='valid': py,y=py_valid,y_valid\n    pl.figure(figsize=(10,3))\n    pl.scatter(range(len(y)),y,s=50,\n               label='real data',c=\"#11ffee\")\n    pl.scatter(range(len(py)),py,s=20,marker='*',\n               label='predictions',c=\"#ff6611\")\n    pl.grid(); pl.legend(); pl.tight_layout(); pl.show()\n    \n@register_line_magic\ndef make_XOR(N):\n    N=int(N)\n    global x_train,x_valid,x_test,\\\n           y_train,y_valid,y_test\n    x=np.random.uniform(low=-1,high=1,size=(N,2))\n    y=np.ones(len(x)); y[x[:,0]*x[:,1]<0]=0\n    x_train,y_train=x[:int(.8*N),:],y[:int(.8*N)]\n    x_valid=x[int(.8*N):int(.9*N),:]\n    y_valid=y[int(.8*N):int(.9*N)]\n    x_test,y_test=x[int(.9*N):,:],y[int(.9*N):]\n    \ndef train_input_fn(x_train,y_train,batch_size):\n    ds=tds.from_tensor_slices(\n        ({'input-features':x_train},y_train.reshape(-1,1)))\n    return ds.shuffle(1000).repeat().batch(batch_size)\n\ndef valid_input_fn(x_vaid,y_valid,batch_size):\n    ds=tds.from_tensor_slices(\n        ({'input-features':x_valid},y_valid.reshape(-1,1)))\n    return ds.batch(batch_size)\n\ndef test_input_fn(x_test,y_test,batch_size):\n    if y_test is None:\n        ds=tds.from_tensor_slices({'input-features':x_test})\n    else:\n        ds=tds.from_tensor_slices(\n            ({'input-features':x_test},y_test.reshape(-1,1)))\n    return ds.batch(batch_size)\n\n@register_line_magic\ndef train_valid(pars):\n    pars=pars.split()\n    num_epochs=int(pars[0])\n    batch_size=int(pars[1])\n    global tfe,x_train,y_train,x_valid,y_valid\n    steps_per_epoch=np.ceil(len(x_train)\/batch_size)\n    train_spec=tf.estimator\\\n    .TrainSpec(input_fn=lambda:\\\n               train_input_fn(x_train,y_train,batch_size),\n               max_steps=num_epochs*steps_per_epoch)\n    valid_spec=tf.estimator\\\n    .EvalSpec(input_fn=lambda:\\\n              valid_input_fn(x_valid,y_valid,batch_size))\n    tf.estimator.train_and_evaluate(tfe,train_spec,valid_spec)\n    \ndef test(batch_size):\n    global tfe,x_test,y_test\n    test_result=tfe\\\n    .evaluate(input_fn=lambda:\\\n              test_input_fn(x_test,y_test,batch_size))\n    y_test_pred=tfe\\\n    .predict(input_fn=lambda:\\\n             test_input_fn(x_test,y_test,batch_size))\n    py_test=[]\n    for i in range(len(y_test)):\n        py_test.append(round(next(iter(y_test_pred))['out'][0]))\n    return test_result,py_test","fd99007c":"%header Artificial Data","a209c5e4":"[x_train,x_valid,x_test,y_train,y_valid,y_test]=\\\n[[] for i in range(6)]\n%make_XOR 1000\nfeatures=[tf.feature_column.numeric_column(\n          key='input-features:',shape=(2,))]\n%display_data test","ea60e938":"%header Built Keras Models as Estimators","5571c953":"model=tf.keras.Sequential([\n    tkl.Input(shape=(2,),name='input-features'),\n    tkl.Dense(units=4,activation='relu'),\n    tkl.Dense(units=4,activation='relu'),\n    tkl.Dense(units=4,activation='relu'),\n    tkl.Dense(1,activation='sigmoid',name='out')])\nmodel.compile(optimizer=tf.keras.optimizers.SGD(),\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=[tf.keras.metrics.BinaryAccuracy()])\ntfe=tf.keras.estimator.model_to_estimator(\n    keras_model=model,\n    model_dir='models\/estimator-for-XOR\/')","4953a9df":"%header Training","9521ffe9":"print(model.summary())\nstyled_header(tfe.config.session_config)\n%train_valid 200 8","7ed9d71e":"%header Evaluation","5dff5afc":"test_result,py_test=test(8)\nstyled_header(test_result)\n%display_predictions test","8472b311":"Reading classics [Python Machine Learning 3rd Edition](https:\/\/github.com\/rasbt\/python-machine-learning-book-3rd-edition\/blob\/master\/ch14\/ch14_part3.ipynb)"}}