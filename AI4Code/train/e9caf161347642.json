{"cell_type":{"f3c10e30":"code","f4da33a1":"code","c7c21258":"code","4b010c84":"code","ada04570":"code","22e8dccd":"code","b59e3a1a":"code","1dbf50cb":"code","e12be16c":"code","c2763583":"code","f1a000c8":"code","931ad572":"code","f933e1c8":"code","8ae4cfe7":"code","264be360":"code","28dd4910":"code","5eb029b8":"code","967096a8":"code","1dea3426":"code","50fe0537":"code","2c95e393":"code","560c9d50":"markdown","18b57691":"markdown","973659a5":"markdown","bb91dd9b":"markdown"},"source":{"f3c10e30":"#!pip3 install matplotlib","f4da33a1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\nimport statsmodels.api as sm","c7c21258":"uber_raw_apr14 =pd.read_csv('..\/input\/uber-raw-data-apr14.csv')\nuber_raw_may14 = pd.read_csv(\"..\/input\/uber-raw-data-may14.csv\")\nuber_raw_jun14 = pd.read_csv(\"..\/input\/uber-raw-data-jun14.csv\")\nuber_raw_jul14 = pd.read_csv(\"..\/input\/uber-raw-data-jul14.csv\")\nuber_raw_aug14 = pd.read_csv(\"..\/input\/uber-raw-data-aug14.csv\")\nuber_raw_sep14 = pd.read_csv(\"..\/input\/uber-raw-data-sep14.csv\")\n\nuber_2014_train = [uber_raw_apr14, uber_raw_may14, uber_raw_jun14, uber_raw_jul14,uber_raw_aug14]\nuber_2014_test = uber_raw_sep14\n\nuber_data = pd.concat(uber_2014_train,axis=0,ignore_index=True)\ndf = uber_data\ndf1= uber_2014_test\nuber_data.head()\ndf.head()","4b010c84":"#df=df.groupby(pd.Grouper(key='Date\/Time'))\ndf.head(564530)","ada04570":"df1.tail()","22e8dccd":"#df=df[~df.index.duplicated()]","b59e3a1a":"df.Timestamp = pd.to_datetime(df['Date\/Time'],format='%m\/%d\/%Y %H:%M:%S') \ndf.index = df.Timestamp \ndf['Date'] = df.Timestamp.dt.date\n#df.tail()                        ##Run this cell twice","1dbf50cb":"df.Timestamp = pd.to_datetime(df['Date\/Time'],format='%m\/%d\/%Y %H:%M:%S') \ndf.index = df.Timestamp \ndf['Date'] = df.Timestamp.dt.date\ndf.tail()  ","e12be16c":"count=df.groupby(pd.Grouper(key='Date')).count()\ncount.tail()\n#df1['Count']=count","c2763583":"df1.tail()","f1a000c8":"df1.Timestamp = pd.to_datetime(df1['Date\/Time'],format='%m\/%d\/%Y %H:%M:%S') \ndf1.index = df1.Timestamp \ndf1['Date'] = df1.Timestamp.dt.date\n#df1.tail()       ##Run this cell twice","931ad572":"df1.Timestamp = pd.to_datetime(df1['Date\/Time'],format='%m\/%d\/%Y %H:%M:%S') \ndf1.index = df1.Timestamp \ndf1['Date'] = df1.Timestamp.dt.date\ndf1.tail()       ##Run this cell twice","f933e1c8":"count1=df1.groupby(pd.Grouper(key='Date')).count()\ncount1.tail()\n#df1['Count']=count","8ae4cfe7":"count= count.drop(columns = ['Lat','Lon','Base'])\ncount1= count1.drop(columns = ['Lat','Lon','Base'])","264be360":"count.head()","28dd4910":"count1.head()","5eb029b8":"train=count\ntest=count1","967096a8":"train['Date\/Time'].plot(kind='line',figsize=(15,8), title= 'Daily Ridership', fontsize=14)\ntest['Date\/Time'].plot(figsize=(15,5), title= 'Daily Ridership', fontsize=14)\nplt.ylabel('Total Journeys')\nplt.xlabel('Month')\nplt.show()","1dea3426":"y_hat_avg = test.copy()\nfit1 = sm.tsa.statespace.SARIMAX(train['Date\/Time'], order=(2, 1, 4),seasonal_order=(0,1,1,7)).fit()\ny_hat_avg['SARIMA'] = fit1.predict(start=\"2014-09-01\", end=\"2014-09-30\", dynamic=True)\nplt.figure(figsize=(15,6))\nplt.plot( train['Date\/Time'], label='Train')\nplt.plot(test['Date\/Time'], label='Test')\nplt.plot(y_hat_avg['SARIMA'], label='SARIMA')\nplt.legend(loc='best')\nplt.ylabel('Total Journeys')\nplt.xlabel('Months')\nplt.show()\n","50fe0537":"y_hat_avg = test.copy()\nfit1 = ExponentialSmoothing(np.asarray(train['Date\/Time']) ,seasonal_periods=7 ,trend='add', seasonal='add',).fit()\ny_hat_avg['Holt_Winter'] = fit1.forecast(len(test))\nplt.figure(figsize=(15,5))\nplt.plot( train['Date\/Time'], label='Train')\nplt.plot(test['Date\/Time'], label='Test')\nplt.plot(y_hat_avg['Holt_Winter'], label='Holt_Winter')\nplt.legend(loc='best')\nplt.ylabel('Total Journeys')\nplt.xlabel('Months')\nplt.show()","2c95e393":"y_hat_avg = test.copy()\n\nfit1 = Holt(np.asarray(train['Date\/Time'])).fit(smoothing_level = 0.3,smoothing_slope = 0.1)\ny_hat_avg['Holt_linear'] = fit1.forecast(len(test))\n\nplt.figure(figsize=(16,5))\nplt.plot(train['Date\/Time'], label='Train')\nplt.plot(test['Date\/Time'], label='Test')\nplt.plot(y_hat_avg['Holt_linear'], label='Holt_linear')\nplt.legend(loc='best')\nplt.show()","560c9d50":"### Holt\u2019s Winter seasonal method","18b57691":"### ARIMA","973659a5":"Just plotting of test and train data without any training model","bb91dd9b":"### Holt\u2019s Linear Trend method"}}