{"cell_type":{"31037b1d":"code","d171923a":"code","f6020dc5":"code","01928698":"code","eb7a2896":"code","ef42ee9a":"code","f4de90a8":"code","ee0dc206":"code","f1c8d061":"code","faecef2e":"code","abec5f43":"code","e8921c47":"code","709a0386":"code","61f01f62":"code","2542e51b":"code","2905f5ee":"code","45ede797":"code","dc949aec":"code","b0d96573":"code","57cec686":"code","b7647d53":"code","14dadf65":"code","5b7dc23d":"code","93b377cb":"code","c6ad9e4f":"code","c7ec0252":"code","145b116f":"code","f11548ac":"code","bfc59c90":"code","df840fd9":"code","83d0ce83":"code","fe2a1d32":"code","a0586984":"code","af67298a":"code","7bf3525c":"code","f9a9cd7a":"code","1bfe0043":"code","404f11e1":"code","c1a9169d":"code","73f0ef1f":"code","4b4cfa8d":"code","19f83464":"code","6bda5a18":"code","7ddff0e2":"code","bce578a5":"code","54698b41":"code","43aac4ae":"markdown","e413fb02":"markdown","3aafab13":"markdown","9fb67969":"markdown","6808545e":"markdown","de213c23":"markdown"},"source":{"31037b1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d171923a":"df=pd.read_csv(\"..\/input\/house-price\/train.csv\")","f6020dc5":"df.head(3)","01928698":"cols=df.columns","eb7a2896":"df.shape","ef42ee9a":"# Drop features having more than 70% NAN values\n#outliers = [col for col in df.columns if df[col].isna().sum()>=800]\n\n#df=df.drop(outliers,axis=1)","f4de90a8":"df.columns","ee0dc206":"df=df.drop(['Alley'],axis=1)","f1c8d061":"df['Id'].isna().sum()","faecef2e":"catCols = [col for col in df.columns if df[col].dtype==\"O\"]\n\nlen(catCols)","abec5f43":"catCols","e8921c47":"corr=df.corr().abs()","709a0386":"nocat=[col for col in df.columns if df[col].dtype!=\"O\"]\nnocat","61f01f62":"[col for col in df.columns if df[col].isnull().any()]","2542e51b":"df['LotFrontage']","2905f5ee":"df['LotFrontage']=df['LotFrontage'].fillna(0)\nmeanGBY=np.mean(df['GarageYrBlt'])\ndf['GarageYrBlt']=df['GarageYrBlt'].fillna(meanGBY)\nmeanMVA=np.mean(df['MasVnrArea'])\ndf['MasVnrArea']=df['MasVnrArea'].fillna(meanMVA)","45ede797":"#encode all of the catogorical values\nlabel_encoder = preprocessing.LabelEncoder() \nfor i in catCols:\n    df[i]= label_encoder.fit_transform(df[i])","dc949aec":"import plotly.express as px\nfig = px.scatter(df, x=\"LotArea\", y=\"SalePrice\")\nfig.show()","b0d96573":"fig1 = px.scatter(df, x=\"OverallQual\", y=\"SalePrice\")\nfig1.show()","57cec686":"fig2 = px.scatter(df, x=\"YearBuilt\", y=\"SalePrice\")\nfig2.show()","b7647d53":"fig3 = px.scatter(df, x=\"TotalBsmtSF\", y=\"SalePrice\")\nfig3.show()","14dadf65":"fig4 = px.histogram(df,x=\"SalePrice\")\nfig4.show()","5b7dc23d":"y=df['SalePrice']","93b377cb":"y.head(3)","c6ad9e4f":"X=df.drop(['SalePrice'],axis=1)","c7ec0252":"X.head()","145b116f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","f11548ac":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","bfc59c90":"from sklearn.decomposition import PCA\n\npca = PCA()\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)","df840fd9":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression().fit(X_train, y_train)\nreg.score(X_train, y_train)\n\n\n","83d0ce83":"# Predicting the Test set results\npred = reg.predict(X_test)\n","fe2a1d32":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % np.mean((reg.predict(X_test) - y_test) ** 2))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % reg.score(X_test, y_test))","a0586984":"dft=pd.read_csv('..\/input\/house-price\/test.csv')","af67298a":"dft.head()","7bf3525c":"#outliers = [col for col in dft.columns if dft[col].isna().sum()>=800]\n#dft=dft.drop(outliers,axis=1)\n","f9a9cd7a":"dft=dft.drop(['Alley'],axis=1)","1bfe0043":"catColst = [col for col in dft.columns if dft[col].dtype==\"O\"]","404f11e1":"dft['LotFrontage']=dft['LotFrontage'].fillna(0)\nmeanGBY=np.mean(dft['GarageYrBlt'])\ndft['GarageYrBlt']=dft['GarageYrBlt'].fillna(meanGBY)\nmeanMVA=np.mean(dft['MasVnrArea'])\ndft['MasVnrArea']=dft['MasVnrArea'].fillna(meanMVA)","c1a9169d":"#encode all of the catogorical values\nlabel_encoder = preprocessing.LabelEncoder() \nfor i in catColst:\n    dft[i]= label_encoder.fit_transform(dft[i])","73f0ef1f":" [col for col in dft.columns if dft[col].dtype==\"O\"]","4b4cfa8d":"nulcol=[col for col in dft.columns if dft[col].isnull().any()]","19f83464":"for i in nulcol:\n    dft[i]=dft[i].fillna(0)","6bda5a18":"dft['BsmtFinSF1']","7ddff0e2":"\nsc = StandardScaler()\ntest= sc.fit_transform(dft)","bce578a5":"pca = PCA()\ntestdata = pca.fit_transform(test)","54698b41":"\n\n\nresult=reg.predict(testdata)\nresultData=pd.DataFrame(result,columns=[\"SalePrice\"])\nId=pd.DataFrame(dft[\"Id\"],columns=[\"Id\"])\nResult=Id.join(resultData)\nResult.to_csv(\"ResultHousePrices.csv\",index=None)","43aac4ae":"**Scaling Using Standard Scaler**","e413fb02":"**Import Test Data**","3aafab13":"**Applying PCA**","9fb67969":"**Find Categorical columns**","6808545e":"**Data Spliting**","de213c23":"**Training and Prediction Using Linear Regression**"}}