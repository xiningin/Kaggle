{"cell_type":{"66748421":"code","ae8029c4":"code","f9e4c2e4":"code","1577da31":"code","63fbbb94":"code","091f1dd8":"code","b9dfab7d":"code","303fe2af":"code","02d5366d":"code","59724a63":"code","c3053c14":"code","0f51af89":"code","800098f1":"markdown","bae1dc40":"markdown","c538b5de":"markdown","e3deb2f7":"markdown","8008cfd0":"markdown"},"source":{"66748421":"import numpy as np\nimport pandas as pd \n\nfrom pandas import Series, DataFrame","ae8029c4":"missing = np.nan\n\nseries_obj = Series(['row 1', 'row 2', missing, 'row 4','row 5', 'row 6', missing, 'row 8'])\nseries_obj","f9e4c2e4":"# object_name.isnull()\n# The .isnull() method returns a Boolean value that describes (True or False) whether an element in a \n# Pandas object is a null value.\nseries_obj.isnull()","1577da31":"np.random.seed(25)\nDF_obj = DataFrame(np.random.randn(36).reshape(6,6))\nDF_obj","63fbbb94":"DF_obj.ix[3:5, 0] = missing\nDF_obj.ix[1:4, 5] = missing\nDF_obj","091f1dd8":"# object_name.fillna(numeric value)\n# The .fillna method() finds each missing value from within a Pandas object and fills it with the \n# numeric value that you've passed in.\nfilled_DF = DF_obj.fillna(0)\nfilled_DF","b9dfab7d":"# object_name.fillna(dict)\n# You can pass a dictionary into the .fillna() method. The method will then fill in missing values \n# from each column Series (as designated by the dictionary key) with its own unique value \n# (as specified in the corresponding dictionary value).\nfilled_DF = DF_obj.fillna({0: 0.1, 5: 1.25})\nfilled_DF","303fe2af":"# You can also pass in the method='ffill' arguement, and the .fillna() method will fill-forward any \n# missing values with values from the last non-null element in the column Series.\nfill_DF = DF_obj.fillna(method='ffill')\nfill_DF","02d5366d":"np.random.seed(25)\nDF_obj = DataFrame(np.random.randn(36).reshape(6,6))\nDF_obj.ix[3:5, 0] = missing\nDF_obj.ix[1:4, 5] = missing\nDF_obj","59724a63":"# object_name.isnull().sum()\n# To generate a count of how many missing values a DataFrame has per column, just call the .isnull() \n# method off of the object, and then call the .sum() method off of the matrix of Boolean values it \n# returns.\nDF_obj.isnull().sum()","c3053c14":"# object_name.dropna()\n# To identify and drop all rows from a DataFrame that contain ANY missing values, simply call the \n# .dropna() method off of the DataFrame object. NOTE: If you wanted to drop columns that contain \n# any missing values, you'd just pass in the axis=1 argument to select and search the DataFrame \n# by columns, instead of by row.\nDF_no_NaN = DF_obj.dropna(axis=1)\nDF_no_NaN","0f51af89":"# object_name.dropna(how='all')\n# To identify and drop only the rows from a DataFrame that contain ALL missing values, simply \n# call the .dropna() method off of the DataFrame object, and pass in the how='all' argument.\nDF_obj.dropna(how='all')","800098f1":"# Chapter 1 - Data Munging Basics\n## Segment 2 - Treating missing values","bae1dc40":"### Filtering out missing values","c538b5de":"### Counting missing values","e3deb2f7":"### Figuring out what data is missing","8008cfd0":"### Filling in for missing values"}}