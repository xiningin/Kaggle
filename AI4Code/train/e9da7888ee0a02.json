{"cell_type":{"867f99d7":"code","d31a0908":"code","0777ae8a":"code","7d00ed12":"code","2f7af7a3":"code","5865db19":"code","2bb0d5b7":"code","f20f3b30":"code","8f4066c3":"code","d8673cf5":"code","e25de195":"code","3dd07b54":"code","a57c2459":"code","47216a42":"markdown","a8fc5967":"markdown","2954e572":"markdown","56365b16":"markdown","8c1ea2cc":"markdown"},"source":{"867f99d7":"import os \nimport glob\nimport pandas as pd\n\nimport cv2\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.applications import ResNet50V2, MobileNetV2\nfrom tensorflow.keras.applications.resnet import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')","d31a0908":"directory = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset'\n\nlabel = []\npath = []\nfor dir_name, _,filenames in os.walk(directory):\n    for filename in filenames:\n        if os.path.splitext(filename)[1]=='.png':\n            if dir_name.split()[-1]!='GT':          \n                label.append(os.path.split(dir_name)[1])\n                path.append(os.path.join(dir_name,filename))\n\ndata = pd.DataFrame(columns=['path','label'])\ndata['path'] = path\ndata['label'] = label","0777ae8a":"data.head()","7d00ed12":"data['label'] = data['label'].astype('category')","2f7af7a3":"plt.figure(figsize=(20,8))\ncontagem = data['label'].value_counts()\n\nsns.countplot(data=data, x='label');","5865db19":"fig, ax = plt.subplots(nrows=3, ncols=3, figsize=(15,8), constrained_layout=True)\nax = ax.flatten()\n\nidx = 0\n\nfor i in data['label'].unique():\n    ax[idx].imshow(plt.imread(data[data['label']==i].iloc[0,0]))\n    ax[idx].set_title(i)\n    idx += 1","2bb0d5b7":"train, test = train_test_split(data, test_size=.2)","f20f3b30":"print(train.shape)\nprint(test.shape)","8f4066c3":"train_gen = ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.3)\ntest_gen = ImageDataGenerator(preprocessing_function= preprocess_input)\n\nx_train = train_gen.flow_from_dataframe(dataframe=train, x_col='path', y_col='label',\n                                           class_mode='categorical', subset='training', \n                                           color_mode='rgb', batch_size=32)\n\nx_val = train_gen.flow_from_dataframe(dataframe=train, x_col='path', y_col='label',\n                                         class_mode='categorical', subset='validation', \n                                         color_mode='rgb', batch_size=32)\n\nx_test = test_gen.flow_from_dataframe(dataframe=test, x_col='path', y_col='label',\n                                        class_mode='categorical', color_mode='rgb', \n                                        batch_size=32, shuffle=False)","d8673cf5":"fit, ax= plt.subplots(nrows=2, ncols=3, figsize=(15,8))\nax=ax.flatten()\nj=0\nfor _ in range(6):\n    img, label = x_test.next()\n    ax[j].imshow(img[0],)\n    ax[j].set_title(label[0])\n    j=j+1","e25de195":"image_shape=(224,224,3)\n\nearly = EarlyStopping(monitor='val_loss',patience=5)\nreduce = ReduceLROnPlateau(monitor='val_loss', patience=3, factor=0.2, mil_lr=0.001)","3dd07b54":"pre_trained = MobileNetV2(include_top=False, pooling='avg', input_shape=image_shape)\n\npre_trained.trainable=False\n\ninp_model = pre_trained.input\nx = Dense(128, activation='relu')(pre_trained.output)\nx = Dense(128, activation='relu')(x)\n\noutput = Dense(9, activation='softmax')(x)\nmodel = Model(inputs=inp_model, outputs=output)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nhistory = model.fit(x_train, epochs=30, validation_data=x_val, callbacks=[early, reduce])","a57c2459":"fig, axes = plt.subplots(1, 2, figsize=(15,5))\naxes[0].plot(history.history['accuracy'])\naxes[0].plot(history.history['val_accuracy'])\naxes[0].set_xlabel('Epochs')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend(['Accuracy in Train','Accuracy in Test'])\naxes[0].grid(True)\n\naxes[1].plot(history.history['loss'])\naxes[1].plot(history.history['val_loss'])\naxes[1].set_xlabel('Epochs')\naxes[1].set_ylabel('Erro')\naxes[1].legend(['Erro in Train','Erro in Test'])\naxes[1].grid(True)","47216a42":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Read Dataset<\/p>","a8fc5967":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<\/p>","2954e572":"### As we can see the dataset is balanced","56365b16":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Preprocessing<\/p>","8c1ea2cc":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Images<\/p>"}}