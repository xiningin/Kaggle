{"cell_type":{"89f12c48":"code","df7bd26d":"code","1f7e8fd7":"code","0beb9436":"code","eb3ce141":"code","f21b7e99":"code","3d0c8c63":"code","42d1fd26":"code","9ff4ebb4":"code","d77d25d8":"code","47b04d90":"code","32e4d725":"code","aba0f238":"code","f87957a1":"code","e4dca7b0":"code","f301e5e6":"code","53dea04c":"code","af361871":"markdown","8cfb2686":"markdown","9a054714":"markdown","32df20c7":"markdown"},"source":{"89f12c48":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom pandas_profiling import ProfileReport\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA","df7bd26d":"data = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndata.drop('CustomerID', axis=1, inplace=True)\ndata","1f7e8fd7":"encoder = LabelEncoder()\ndata['Gender'] = encoder.fit_transform(data['Gender'])\nmapped_class={i:v for i, v in enumerate(encoder.classes_)}\nmapped_class\n#pd.DataFrame(y)","0beb9436":"data","eb3ce141":"profile = ProfileReport(data)\nprofile","f21b7e99":"#binary \uac12\ub4e4\uc744 standard scaling \ud574\ub3c4 \uad1c\ucc2e\uc740\uac74\uc9c0??\n\nscaler = StandardScaler()\nscaled_data = pd.DataFrame(scaler.fit_transform(data), columns = data.columns)\nscaled_data","3d0c8c63":"max_clusters = 50","42d1fd26":"kmeans_tests = [KMeans(n_clusters=i, n_init=10) for i in range(1, max_clusters)]\ninertias = [kmeans_tests[i].fit(scaled_data).inertia_ for i in range(len(kmeans_tests))]\ninertias","9ff4ebb4":"plt.figure(figsize=(7,5))\nplt.plot(range(1, max_clusters), inertias)\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertias')\nplt.title('Choosing number of clusters')\nplt.show()","d77d25d8":"kmeans = KMeans(n_clusters=10, n_init=10)\nkmeans.fit(scaled_data)","47b04d90":"clusters = kmeans.predict(scaled_data)\nclusters","32e4d725":"pca = PCA(n_components=2)\nreduced_data = pd.DataFrame(pca.fit_transform(scaled_data), columns=['PC1', 'PC2'])\nreduced_data","aba0f238":"#4\ucc28\uc6d0 \uacf5\uac04\uc5d0 \uc874\uc7ac\ud558\ub294 10\uac1c\uc758 kmeans cluster centroid\nkmeans.cluster_centers_","f87957a1":"#4\ucc28\uc6d0 \uacf5\uac04\uc758 10\uac1c\uc758 kmeans centroid\ub97c pca\ub97c \ud1b5\ud574\uc11c 2\ucc28\uc6d0 \uacf5\uac04\uc758 \uc810\uc73c\ub85c \ubc14\uafb8\uae30\n#\uc774\ubbf8 fit_transform \ud588\uc73c\ubbc0\ub85c\nreduced_centers = pca.transform(kmeans.cluster_centers_)\nreduced_centers","e4dca7b0":"reduced_data['cluster'] = clusters\nreduced_data","f301e5e6":"plt.figure(figsize=(14, 10))\ncolors=['red', 'blue', 'yellow', 'orange', 'cyan', 'magenta', 'brown', 'pink', 'green', 'purple']\nfor i in range(10):\n    plt.scatter(reduced_data[reduced_data['cluster']==i].loc[:,'PC1'], reduced_data[reduced_data['cluster']==i].loc[:,'PC2'], color=colors[i])\n\nplt.scatter(reduced_centers[:, 0], reduced_centers[:,1], color='black', marker='x', s=300)\n\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.show()","53dea04c":"#THE END!!","af361871":"Choosing number of clusters \uadf8\ub798\ud504\uc5d0\uc11c elbow method\ub97c \uc0ac\uc6a9\ud558\uc5ec\uc11c Number of clusters\ub97c \uc815\ud55c\ub2e4.\n\n\uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \ub300\ub7b5 8 ~ 9\ub85c clusters\uc758 \uac1c\uc218\ub97c \uc7a1\uc73c\uba74 \uac00\uc7a5 efficient\ud568\uc744 \uc54c \uc218 \uc788\ub2e4.\n\nElbow Plot\uc774\ub77c\uace0\ub3c4 \ubd88\ub9bc\n\nInertias\ub294 K\uac1c\uc758 \uc810\uc744 \uae30\uc900\uc73c\ub85c \uce21\uc815\ud55c total variance\ub77c\uace0 \uc0dd\uac01\ud558\uba74 \ud3b8\ud568.","8cfb2686":"# **Using PCA to visualize the kmeans**","9a054714":"# **Data Visualization**","32df20c7":"# **Clustering**"}}