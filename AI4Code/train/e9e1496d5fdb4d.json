{"cell_type":{"15eb69bc":"code","168d0fb3":"code","2f7eea8a":"code","fb828c10":"code","36a1a8cd":"code","ed20378c":"code","a41914bb":"code","e4997bbd":"code","634cec9c":"code","fc4c975d":"code","fc05d5f7":"code","716b1228":"code","4d83e3d8":"markdown","6f3c155e":"markdown","b2014245":"markdown","9c604333":"markdown","ea331f43":"markdown","c3e51460":"markdown","9d122e4a":"markdown","88daa9a9":"markdown","a3720a13":"markdown","4461c216":"markdown","004c87bf":"markdown","186f8645":"markdown","99778d6b":"markdown","1e38d1f7":"markdown"},"source":{"15eb69bc":"# Import Libraries\n\nimport numpy as np\nimport pandas as pd \nimport torch\nfrom torch import optim\nimport torch.nn as nn\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os ","168d0fb3":"from torch.utils.data import Dataset\n\nclass CustomDataset(Dataset):\n  def __init__(self, X, y, BatchSize, transform):\n    super().__init__()\n    self.BatchSize = BatchSize\n    self.y = y\n    self.X = X\n    self.transform = transform\n    \n  def num_of_batches(self):\n    \"\"\"\n    Detect the total number of batches\n    \"\"\"\n    return math.floor(len(self.list_IDs) \/ self.BatchSize)\n\n  def __getitem__(self,idx):\n    class_id = self.y[idx]\n    img = self.X[idx].reshape(28,28)\n    img = Image.fromarray(np.uint8(img * 255)).convert('L')\n    img = self.transform(img)\n    return img, torch.tensor(int(class_id))\n\n  def __len__(self):\n    return len(self.X)","2f7eea8a":"# load data\ndf = pd.read_csv(r\"..\/input\/az-handwritten-alphabets-in-csv-format\/A_Z Handwritten Data.csv\",dtype = np.float32)\n\n# Shuffle dataframe\ndf = df.sample(frac=1)\n\n# Split data into features X and labels y\nX = df.iloc[:,1:].values \/ 255 \ny = df.iloc[:,0].values\n\nfig,ax = plt.subplots(2,5)\nfor i in range(10):\n    nparray = X[i].reshape(28,28)\n    image = Image.fromarray(nparray * 255)\n    ax[i%2][i\/\/2].imshow(image)\nfig.show()","fb828c10":"sns.displot(y)","36a1a8cd":"from sklearn.model_selection import train_test_split\nfrom torch.utils.data import DataLoader\nfrom torchvision import transforms\nimport imblearn\n\ntrain_ratio = 0.90\nvalidation_ratio = 0.05\ntest_ratio = 0.05\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1 - train_ratio, stratify = y, random_state = 0)\nX_val, X_test, y_val, y_test = train_test_split(X_test, y_test, test_size=test_ratio\/(test_ratio + validation_ratio), random_state = 0)","ed20378c":"X_train_new = []\ny_train_new = []\nfor _ in range(3):\n    for X, y in zip(X_train, y_train):\n        if y == 5 or y == 8 or y == 21:\n            X_train_new.append(X)\n            y_train_new.append(y)\ny_train = np.append(y_train, np.array(y_train_new))\nX_train = np.append(X_train, np.array(X_train_new), axis=0)\ndisplay(sns.displot(y_train))","a41914bb":"# Define Transforms\ntransform = transforms.Compose([\n                transforms.RandomRotation(10, fill=0),\n                transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.05),\n                transforms.ToTensor(),\n                transforms.RandomAffine(degrees=0, translate=(0.025, 0.025), fill=256),\n                transforms.Normalize([0.5], [0.5])\n            ])\n\ntest_transform = transforms.Compose([\n                transforms.ToTensor(),\n                transforms.Normalize((0.5,), (0.5,)),\n            ])\n\ndataset_stages = ['train', 'val', 'test']\n\nbatch_size = 320\nimage_datasets = {'train' : CustomDataset(X_train, y_train, batch_size, transform), 'val' : CustomDataset(X_val, y_val, batch_size, test_transform), 'test' : CustomDataset(X_test, y_test, batch_size, test_transform)}\ndataloaders = {x: DataLoader(image_datasets[x], batch_size=image_datasets[x].BatchSize,\n                                            shuffle=True, num_workers=0)\n            for x in dataset_stages}\n\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val', 'test']}","e4997bbd":"fig,ax = plt.subplots(2,5)\nfor i in range(10):\n    nparray = image_datasets['train'][i][0].cpu().numpy() \n    image = transforms.ToPILImage()(image_datasets['train'][i][0].cpu())\n    ax[i%2][i\/\/2].imshow(image.convert(\"L\"), cmap=\"gray\")\nfig.show()","634cec9c":"import time\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\ndef train_model(model, criterion, optimizer, scheduler, num_epochs=10, early_stop_value=0):\n    since = time.time()\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n            num_batches = 0\n            outputs = None\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                # Loading Bar\n                if (phase == 'train'):\n                    num_batches += 1\n                    percentage_complete = ((num_batches * batch_size) \/ (dataset_sizes[phase])) * 100\n                    percentage_complete = np.clip(percentage_complete, 0, 100)\n                    print(\"{:0.2f}\".format(percentage_complete), \"% complete\", end=\"\\r\")\n\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n                \n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    loss = criterion(outputs.float(), labels)\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        # TODO: try removal\n                        torch.nn.utils.clip_grad_norm_(model.parameters(), 1)\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                \n                predicted = torch.max(outputs.data, 1)[1] \n                running_correct = (predicted == labels).sum()\n                running_corrects += running_correct\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            \n            epoch_acc = running_corrects \/ dataset_sizes[phase]\n            #epoch_acc = sum(epoch_acc) \/ len(epoch_acc)\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc.item()))\n            \n            # Early Stop\n            if early_stop_value > 0:\n                if phase == 'val':\n                    val_accuracy = epoch_acc.item()\n        if val_accuracy > early_stop_value:\n            print(\"*** EARLY STOP ***\")\n            break\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    return model","fc4c975d":"from torchvision import models\nfrom torch.optim import lr_scheduler\n\nshufflenet = models.shufflenet_v2_x1_0()\nshufflenet.conv1[0] = nn.Conv2d(1, 24, kernel_size=(2, 2), stride=(1, 1))\nshufflenet.fc = nn.Linear(in_features=1024, out_features=26, bias=True)\nmodel_ft = shufflenet","fc05d5f7":"criterion = nn.CrossEntropyLoss()\n\noptimizer_ft = optim.Adam(model_ft.parameters(), lr=0.01)\n\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nshufflenet = train_model(shufflenet.to(device), criterion, optimizer_ft, exp_lr_scheduler, 15, early_stop_value = 0.998)","716b1228":"from sklearn.metrics import accuracy_score \n\naccuracy_scores = []\n\nrunning_corrects = 0\noutputs = None\nfor inputs, labels in dataloaders['test']:\n    model_ft.eval()\n    \n    inputs = inputs.to(device)\n    labels = labels.to(device)\n\n    outputs = model_ft(inputs)\n    \n    predicted = torch.max(outputs.data, 1)[1] \n    running_correct = (predicted == labels).sum()\n    running_corrects += running_correct\n\naccuracy = running_corrects \/ dataset_sizes['test']\nprint(\"Accuracy: \" + str(accuracy.item()))","4d83e3d8":"Looking better","6f3c155e":"# Instantiate the Dataset\n\nWe will form them into torch dataloaders to make the data easier to work with. We are also going to put in a minor amount of image augmentation in the train dataset.","b2014245":"# Test Images from Dataset","9c604333":"Unfortunate how imbalanced the dataset is. I will put in some random over sampling to balance the classes.","ea331f43":"# Introduction\n\nI intend to use Shufflenet in Pytorch with neural surgery applied for the smaller images. That is that I have made modifications to suit a smaller image size and the smaller classes of this dataset. \n\nHaving just applied Shufflenet to the original MNIST, I'm interested to see what performance I will get against this dataset and what modifications will be required.","c3e51460":"# Run on Test Set","9d122e4a":"# Conclusion\n\nI think we have achieved a good result here. The odd approach of using a modified Shufflenet has been effective in this instance. ","88daa9a9":"# Split X and Y\n\n","a3720a13":"# Load up Shufflenet\n\nHere I will change the first layer to suit a smaller image and the classification layer to match the letters found in this dataset.","4461c216":"# Create the Custom Dataset Class\n\nWe need this to be able to load the image and label into the model we will create. So we will create a custom dataset to handle this","004c87bf":"# Create a Training Function","186f8645":"Look at the distribution of classes","99778d6b":"# Investigate the Dataset\n\nLook at the images","1e38d1f7":"# Randomly Oversample the Training Data\n\nWe need to balance the classes to some degree so that the neural network will be more accurate and general"}}