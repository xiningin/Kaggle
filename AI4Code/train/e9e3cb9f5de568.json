{"cell_type":{"24398162":"code","c3d97eb7":"code","791458a7":"code","32799cc2":"code","334d0991":"code","556b2b88":"code","c2442535":"code","f1644684":"code","0534cb96":"code","9dffd4bb":"code","c4584b6a":"code","ec69f305":"code","5f1b5acd":"code","69a82956":"code","eb1d9942":"code","d5a959b5":"code","b3088abe":"code","65ba090e":"code","2877b737":"code","77a9b823":"code","d0b84e14":"code","8d70a6ba":"code","1a896e39":"code","abb9fd04":"code","325d7d8b":"code","0bbd963d":"code","0a2ebe0a":"code","f355830a":"code","155131d7":"markdown","bf5d5e9f":"markdown","633d42c8":"markdown","ed3b7af8":"markdown","7ff15710":"markdown"},"source":{"24398162":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","c3d97eb7":"df=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.drop(['Unnamed: 32'], axis=1, inplace=True)","791458a7":"df.set_index('id', inplace=True)","32799cc2":"df.shape","334d0991":"df.head(5)","556b2b88":"df.info()","c2442535":"data=df.copy()","f1644684":"data.diagnosis=data.diagnosis.replace(['M', 'B'], ['Malignant', 'Benign'])\nplt.figure(figsize=(5,4))\nsns.histplot(x='diagnosis', data=data)\nplt.title('Diagnosis distribution')\nplt.xlabel('Diagnosis')\nplt.ylabel('Number of Cases')\nplt.show()","0534cb96":"fig, ax = plt.subplots(10, 3, figsize=(25,45))\nrow, col_= 0, 0\nfor col in data.columns[1::]:\n    sns.histplot(data, x=data[col], hue=\"diagnosis\", element=\"poly\", stat=\"count\",  \n                 palette='rocket', ax=ax[row][col_])\n    col_+=1\n    if col_==3:\n        row+=1\n        col_=0","9dffd4bb":"df.describe().T","c4584b6a":"fig, ax = plt.subplots(10, 3, figsize=(25,45))\nrow, col_= 0, 0\nfor col in df.columns[1::]:\n    sns.boxplot(df[col], ax=ax[row][col_])\n    col_+=1\n    if col_==3:\n        row+=1\n        col_=0","ec69f305":"def thresholds(df, col_name, q1=0.05, q3=0.90):\n    quartile1 = df[col_name].quantile(q1)\n    quartile3 = df[col_name].quantile(q3)\n    IQR = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * IQR\n    low_limit = quartile1 - 1.5 * IQR\n    df.loc[(df[col_name] < low_limit), col_name] = low_limit\n    df.loc[(df[col_name] > up_limit), col_name] = up_limit\n    return df","5f1b5acd":"for col in df.columns[1::]:\n    df1=thresholds(df, col, 0.05, 0.90)","69a82956":"fig, ax = plt.subplots(10, 3, figsize=(25,45))\nrow, col_= 0, 0\nfor col in df1.columns[1::]:\n    sns.boxplot(df1[col], ax=ax[row][col_])\n    col_+=1\n    if col_==3:\n        row+=1\n        col_=0","eb1d9942":"df.diagnosis=df.diagnosis.replace(['M', 'B'], ['1', '0'])","d5a959b5":"from sklearn.neighbors import LocalOutlierFactor","b3088abe":"def local_outlier_factor(df, n_neighs=10):\n    lof=LocalOutlierFactor(n_neighbors=n_neighs)\n    outliers=lof.fit_predict(df)\n    df1=df.drop(list(df[outliers==-1].index), axis=0)\n    print(f'{df[outliers==-1].shape[0]} rows deleted')\n    return df1","65ba090e":"lof_data=local_outlier_factor(df)","2877b737":"lof_data.shape","77a9b823":"from sklearn.preprocessing import RobustScaler","d0b84e14":"def scaler(df):\n    rs = RobustScaler()\n    col_names=[col for col in df.columns if col!='diagnosis']\n    df[col_names] = rs.fit_transform(df[col_names])\n    return df","8d70a6ba":"scaled_data=scaler(lof_data)","1a896e39":"scaled_data.shape","abb9fd04":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score","325d7d8b":"Y=scaled_data.diagnosis\nX=scaled_data.drop(['diagnosis'], axis=1)\nprint(Y.shape, X.shape)","0bbd963d":"X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.25, random_state=42)","0a2ebe0a":"knn_params={\n    'n_neighbors': list(range(2,6)),\n    'weights': ['uniform', 'distance'],\n    'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n    'leaf_size': list(range(1,6)),\n}","f355830a":"clf=GridSearchCV(KNeighborsClassifier(), knn_params, cv=5, return_train_score=True)\nclf.fit(X_train, Y_train)\nY_test_pred=clf.predict(X_test)\nacc_score=accuracy_score(Y_test, Y_test_pred)\nprint(f'Accuracy Score: {np.round(acc_score*100,2)}%')\nprint(f'Best params: {clf.best_params_}')","155131d7":"# EDA","bf5d5e9f":"# Scailing","633d42c8":"# Building Model","ed3b7af8":"# Local Outlier Factor","7ff15710":"# Outlier Analysis"}}