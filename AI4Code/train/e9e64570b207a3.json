{"cell_type":{"9cb434cf":"code","83d1b551":"code","172afb9b":"code","efb05920":"code","1d802b9e":"code","2beefdb7":"code","2f1071d3":"code","94d658c3":"code","6651cd8f":"code","c8fdb198":"markdown","30749d5e":"markdown","cde540aa":"markdown","71a0e103":"markdown","b6fd6082":"markdown","d77b33d1":"markdown"},"source":{"9cb434cf":"import os\nfrom os.path import isdir, join\nfrom pathlib import Path\nimport pandas as pd\n\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom scipy import signal\nfrom scipy.io import wavfile\nimport librosa\n\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport IPython.display as ipd\nimport librosa.display\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport pandas as pd\n\n%matplotlib inline","83d1b551":"df = pd.read_csv(\"..\/input\/synthetic-spanish-speech\/syntheticspanish\/syntheticspanish.csv\", header=None)\ndf.head()","172afb9b":"df.shape","efb05920":"audiofile = \"..\/input\/synthetic-spanish-speech\/syntheticspanish\/wav\/spanish01\/spanish01_0001.wav\"\nlibrosa.get_duration(filename=audiofile)","1d802b9e":"ipd.Audio(audiofile)","2beefdb7":"samples, sample_rate = librosa.load(audiofile)","2f1071d3":"# borrowed this function from another notebook\ndef log_specgram(audio, sample_rate, window_size=20, step_size=10, eps=1e-10):\n    nperseg = int(round(window_size * sample_rate \/ 1e3))\n    noverlap = int(round(step_size * sample_rate \/ 1e3))\n    freqs, times, spec = signal.spectrogram(\n        audio,\n        fs=sample_rate,\n        window='hann',\n        nperseg=nperseg,\n        noverlap=noverlap,\n        detrend=False\n    )\n    return freqs, times, np.log(spec.T.astype(np.float32) + eps)","94d658c3":"freqs, times, spectrogram = log_specgram(samples, sample_rate)\n\nfig = plt.figure(figsize=(14, 8))\nax1 = fig.add_subplot(211)\nax1.set_title('Raw wave of ' + audiofile)\nax1.set_ylabel('Amplitude')\nax1.plot(np.arange(len(samples))\/sample_rate, samples)\n\nax2 = fig.add_subplot(212)\nax2.imshow(spectrogram.T, aspect='auto', origin='lower', \n           extent=[times.min(), times.max(), freqs.min(), freqs.max()])\nax2.set_yticks(freqs[::16])\nax2.set_xticks(times[::16])\nax2.set_title('Spectrogram of ' + audiofile)\nax2.set_ylabel('Freqs in Hz')\nax2.set_xlabel('Seconds')","6651cd8f":"# borrowed this function from another notebook\ndef custom_fft(y, fs):\n    T = 1.0 \/ fs\n    N = y.shape[0]\n    yf = fft(y)\n    xf = np.linspace(0.0, 1.0\/(2.0*T), N\/\/2)\n    vals = 2.0\/N * np.abs(yf[0:N\/\/2])  # FFT is simmetrical, so we take just the first half\n    # FFT is also complex, to we take just the real part (abs)\n    return xf, vals\n\nfilenames = [audiofile]\nfor filename in filenames:\n    samples, sample_rate = librosa.load(audiofile)\n    xf, vals = custom_fft(samples, sample_rate)\n    plt.figure(figsize=(12, 4))\n    plt.title('FFT of ' + filename)\n    plt.plot(xf, vals)\n    plt.xlabel('Frequency')\n    plt.grid()\n    plt.show()","c8fdb198":"# Synthetic Spanish EDA","30749d5e":"Get the duration of a single file.","cde540aa":"## Spectrogram","71a0e103":"Play the file.","b6fd6082":"## Playing an Audio File","d77b33d1":"## FFT"}}