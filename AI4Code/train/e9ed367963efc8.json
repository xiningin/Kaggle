{"cell_type":{"999ffc97":"code","a57bae6b":"code","da22f379":"code","e0c0419b":"code","37e7c5a1":"code","fe6e26df":"code","833e0279":"code","23708422":"code","5a8ee8d2":"code","712e329f":"code","69d3e7bb":"code","21fdb69c":"code","8da801bd":"code","81f6190d":"code","c9e595c5":"code","1abeb567":"code","6caad2db":"code","ea9463a9":"code","fb9122d6":"code","63cf9cad":"code","a08244ad":"code","567e0397":"code","9616347d":"code","1b67eb03":"code","f7a8eb5d":"code","4271800b":"code","26eb3562":"code","abdfaa3a":"code","05230e36":"code","d5b427d0":"code","3ea8b98f":"code","2e32055f":"code","cf80786d":"code","b382ba7e":"code","887b7b87":"code","d71e67ff":"code","f35700a7":"markdown","14e4e78b":"markdown","3b49cc01":"markdown","6e05dffc":"markdown","28391c10":"markdown","a0d4941a":"markdown","44e44956":"markdown","8b6cd7de":"markdown","e1dea6b0":"markdown","6af1ba1c":"markdown","ae4d7925":"markdown"},"source":{"999ffc97":"%matplotlib inline","a57bae6b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\n#import libraries specific to recommendation system\nfrom surprise import KNNWithMeans\nfrom surprise import Dataset\nfrom surprise import accuracy\nfrom surprise.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","da22f379":"movies=pd.read_csv('..\/input\/movies-data\/movies_metadata.csv')\nratings=pd.read_csv('..\/input\/movies-data\/ratings_small.csv')","e0c0419b":"movies.head(2)","37e7c5a1":"ratings.head()","fe6e26df":"movies.info()","833e0279":"movies.budget =pd.to_numeric(movies.budget, errors='coerce')","23708422":"movies.describe()","5a8ee8d2":"# Exploring the languages of the movies\npd.unique(movies['original_language'])","712e329f":"movies = movies[['id', 'original_title', 'original_language','vote_average','vote_count','adult','budget','revenue','runtime','status']]\nmovies = movies.rename(columns={'id':'movieId'})","69d3e7bb":"mean_budget = movies['budget'].mean(skipna=True)\nprint (mean_budget)","21fdb69c":"movies['budget']=movies.budget.mask(movies.budget == 0,mean_budget)","8da801bd":"mean_revenue = movies['revenue'].mean(skipna=True)\nprint (mean_revenue)","81f6190d":"movies['revenue']=movies.revenue.mask(movies.revenue == 0,mean_revenue)","c9e595c5":"# Filtering English movie only\nmovies = movies[movies['original_language']== 'en'] \nmovies.head()","1abeb567":"movies.dtypes\nratings.dtypes\nmovies.movieId =pd.to_numeric(movies.movieId, errors='coerce')\nratings.movieId = pd.to_numeric(ratings.movieId, errors= 'coerce')","6caad2db":"#creating a single dataframe merging the movie_data and ratings_data\ndf= pd.merge(ratings, movies, on='movieId', how='inner')","ea9463a9":"df.info()","fb9122d6":"df.isnull().sum() # or df.isna.sum()","63cf9cad":"df['status'].fillna(df['status'].mode()[0], inplace=True)","a08244ad":"df['runtime'].fillna(df['runtime'].mode()[0], inplace=True)","567e0397":"df.isnull().sum()","9616347d":"df.describe()","1b67eb03":"ratings = pd.DataFrame(df.groupby('original_title')['rating'].mean().sort_values(ascending=False))\nratings.head(20)","f7a8eb5d":"ratings['number_of_ratings'] = df.groupby('original_title')['rating'].count()\nratings.head()","4271800b":"import matplotlib.pyplot as plt\n#%matplotlib inline\nratings['rating'].hist(bins=50)\nplt.title('Histogram');\nplt.xlabel('Rating')\nplt.ylabel('Number of movies')","26eb3562":"ratings['number_of_ratings'].hist(bins=100)\nplt.title('Histogram');\nplt.xlabel('Number of ratings')\nplt.ylabel('Number of movies')","abdfaa3a":"import seaborn as sns\nsns.jointplot(x='rating', y='number_of_ratings', data=ratings)","05230e36":"from surprise import Dataset, Reader\nreader = Reader(rating_scale=(0, 5))\ndata = Dataset.load_from_df(df[['userId', 'movieId', 'rating']], reader)","d5b427d0":"#use user based true\/false to switch between user-based or item-based collaborative filters\ntrainset,testset=train_test_split(data,test_size=.15)","3ea8b98f":"algo=KNNWithMeans(k=50,sim_options={'name':'pearson_baseline','user_based':True})\nalgo.fit(trainset)","2e32055f":"#We can now query for speicific predictions\nuserId=str(196) #raw user id\nmovieId=str(302) #raw item id\n# get a prediction for specific users and items\npred=algo.predict(userId,movieId,verbose=True) ","cf80786d":"#run the trained model against the tesset\ntest_pred=algo.test(testset)\ntest_pred","b382ba7e":"accuracy.rmse(test_pred)","887b7b87":"def MovieRecommender(df, MovieName, No_of_recommendation):\n    movie_matrix = df.pivot_table(index='userId', columns='original_title', values='rating').fillna(0)\n    movie_matrix.head(10)\n    movie_user_rating = movie_matrix[MovieName]\n    similar_to_movie=movie_matrix.corrwith(movie_user_rating)\n    corr = pd.DataFrame(similar_to_movie, columns=['Correlation'])\n    corr.dropna(inplace=True)\n    corr = corr.join(ratings['number_of_ratings'])\n    c=corr[corr['number_of_ratings'] > 50].sort_values(by='Correlation', ascending=False).head(No_of_recommendation)\n    print(c)\n    return c","d71e67ff":"c=MovieRecommender(df, MovieName='The Million Dollar Hotel', No_of_recommendation=5)","f35700a7":"## Data desciption\n\n**adult:** Give the adult rating to the movie\n\n**belong_to_collection:** The parent directory of the movie\n\n**budget:** The budget for the movie\n\n**genres:** The denote a style or category of art, music, or literature like animation, adventure, etc.\n\n**homepage:** The web address for the movie\n\n**id:** The idebtification number for a movie\n\n**imdb_id:** The identification number given by imdb\n\n**original_language:** The language of the movie\n\n**original_title:** The name of the movie\n\n**overview:** Some explanation of the movie\n\n**release_date:** The date of the release of the movie\n\n**revenue:** The revenue genrated by the movie\n\n**runtime:** The total time of the movie\n\n**status:** The status of the movie whether released or not\n\n**tagline:** The tagline of the movie","14e4e78b":"## What is recommender system\nA recommender system is a simple machine learning algorithm whose aim is to provide the most relevant information to a user by discovering patterns in a dataset. The algorithm rates the items and shows the user the items that they would rate highly. An example of recommendation in action is when you visit Amazon and you notice that some items are being recommended to you or when Netflix recommends certain movies to you. They are also used by Music streaming applications such as Spotify, ganna, savan, and Deezer to recommend music that you might like. ","3b49cc01":"---\n## Dataset Preparation\n\nNow we will prepare the data for building our model for movie rating prediction","6e05dffc":"## Importing the impotant packages or libraries","28391c10":"## Data overview","a0d4941a":"---\n## Training Loop\n\nNow we're ready to start the training process. First of all, let's split the original dataset using [train_test_split](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html) function from the `scikit-learn` library.","44e44956":" # End of case study","8b6cd7de":"## Setting the backend of matplotlib to the 'inline' backend","e1dea6b0":"## Loading dataset\n\nLoading the movies and rating data","6af1ba1c":"# Movie rating prediction and recommendation\n\nIn this tutorial we are going to introduce about recommender system. Primarily, we will build a recommender system here. ","ae4d7925":"## Detecting null values and filling null values"}}