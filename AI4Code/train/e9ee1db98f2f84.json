{"cell_type":{"6b18bf08":"code","d4d2b307":"code","45d5ce93":"code","f2842bfa":"code","95306663":"code","bdc4fe76":"code","2d95c7d1":"code","9183eed2":"code","b48e50bf":"code","6e44d3f0":"code","7c6c1b94":"code","01076691":"code","81acc2c5":"code","7e847a9c":"code","2b321d03":"code","0b2e55c3":"code","b75aeb5d":"code","a4f7f750":"code","2cecc261":"code","77eeb4e6":"code","11275574":"code","aef301e8":"code","f8f97434":"code","62cc94aa":"code","d9ef2c72":"code","665cd07c":"code","1004aee4":"code","948845b4":"code","5f84b069":"code","6798f726":"code","46fce483":"code","fa2ac57f":"code","02d308a5":"code","a2f46c83":"code","e88dc0b7":"code","d40f07ce":"code","87d74ef0":"code","97e29d46":"code","e78d41f7":"code","bd7a9f9e":"code","563b3f94":"code","b759f74f":"code","2fed7611":"code","2ffb3774":"code","cb72af08":"code","80883967":"code","eb34b7db":"code","64897022":"markdown","15b83f0b":"markdown","a0ba8821":"markdown","f616c624":"markdown","20ebbfdb":"markdown","348e2335":"markdown","d481cbc4":"markdown","2e6b8355":"markdown","8e54c3be":"markdown","5a425b58":"markdown","73f0c60d":"markdown","94a92112":"markdown","cfc00f05":"markdown","5fff8722":"markdown","d32f655b":"markdown","b2f2e279":"markdown","b0b830e4":"markdown","63cb7acd":"markdown","907f71e0":"markdown","a5fbde6a":"markdown","20ea03db":"markdown"},"source":{"6b18bf08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4d2b307":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import PolynomialFeatures","45d5ce93":"train = pd.read_csv(\"\/kaggle\/input\/datathonvk2021\/VK_Train_Final.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/datathonvk2021\/VK_Test_Final.csv\")","f2842bfa":"train[\"type\"] = \"train\"\ntest[\"type\"] = \"test\"\ndf = pd.concat([train.drop([\"Wind Speed\"],axis=1), test], axis=0, copy=True)","95306663":"df.drop([\"ID\"],axis=1,inplace=True)","bdc4fe76":"labels = train[\"Wind Speed\"]","2d95c7d1":"df[\"hour\"]= df[\"hour\"].replace([\"76310\",\"-14\",\"-\", -20.0],df[\"hour\"].mode()[0])\ndf[\"hour\"].fillna(df[\"hour\"].mode()[0],inplace=True)\ndf[\"hour\"]=df[\"hour\"].astype(int)\ndf[\"date\"].fillna(df[\"date\"].mode()[0],inplace=True)\ndf[\"month\"].fillna(df[\"month\"].mode()[0],inplace=True)","9183eed2":"df[\"year\"].replace(0,df[\"year\"].mode()[0],inplace=True)","b48e50bf":"def clean_data(i,type,replace,limit):\n    df[i].fillna(0,inplace=True)\n    if(\"-\" in df[i].unique()):\n        df[i].replace(\"-\",0,inplace=True)\n    if(type==\"int\"):\n        df[i]=df[i].astype(float)\n        df[i]= df[i].astype(int)\n    else:\n        df[i]=df[i].astype(float)\n    df[i] = df[i].abs()\n    if(replace == \"mode\"):\n        df[i][df[i]>limit] = 0\n        df[i].replace(0,df[i].mode()[0],inplace=True)\n    else:\n        df[i][df[i]>limit] = 0\n        df[i].replace(0,df[i].mean(),inplace=True)","6e44d3f0":"clean_data(\"Particulate Matter (10)\", \"int\", \"mode\",1000)\nclean_data(\"Sulphur Dioxide (conc.)\", \"float\", \"mode\",1000)\nclean_data(\"Particulate Matter (2.5)\", \"int\", \"mean\",1000)\nclean_data(\"Nitrogen Dioxide (conc.)\", \"float\", \"mean\",1000)\nclean_data(\"Carbon Monoxide (conc.)\", \"float\", \"mean\",20000)\nclean_data(\"Ozone (conc.)\", \"float\", \"mean\",500)","7c6c1b94":"def clean_temp(i,low,high):\n    df[i].fillna(0,inplace=True)\n    if(\"-\" in df[i].unique()):\n        df[i].replace(\"-\",0,inplace=True)\n    df[i]=df[i].astype(float)\n    df[i][df[i]< low] = 0\n    df[i][df[i]>high] = 0\n    df[i].replace(0,df[i].mean(),inplace=True)\n    ","01076691":"clean_temp(\"Temperature (Celsius)\", -89, 56)\nclean_temp(\"Dew Point Temperature\", -89,56)\nclean_temp(\"Pressure\",900, 1100)\n#clean_temp(\"Precipitation\",0,30)","81acc2c5":"if(\"-\" in df[\"Precipitation\"].unique()):\n    df[\"Precipitation\"].replace(\"-\",np.nan,inplace=True)\ndf[\"Precipitation\"]=df[\"Precipitation\"].astype(float)\ndf[\"Precipitation\"][df[\"Precipitation\"]>30] = np.nan\ndf[\"Precipitation\"].fillna(df[\"Precipitation\"].mean(),inplace=True)","7e847a9c":"df[\"Wind Direction\"].replace([\"-\",\"0\",np.nan],df[\"Wind Direction\"].mode()[0],inplace=True)","2b321d03":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ndf[\"Wind Direction\"] = encoder.fit_transform(df[\"Wind Direction\"])","0b2e55c3":"import category_encoders as ce\nencoder= ce.BinaryEncoder(cols=['Wind Direction'],return_df=True)\ndf_encoded = encoder.fit_transform(df) ","b75aeb5d":"df[\"Particulate Matter (10)\"]-= df[\"Particulate Matter (2.5)\"]","a4f7f750":"df.head()","2cecc261":"df[\"Temperature (Celsius)\"] += 273\ndf[\"Pressure\"] \/= 10\ndf[\"Volume\"] = df[\"Temperature (Celsius)\"]\/df[\"Pressure\"]","77eeb4e6":"\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncols = ['year', 'month', 'date', 'hour', 'Particulate Matter (2.5)',\n       'Particulate Matter (10)', 'Sulphur Dioxide (conc.)',\n       'Nitrogen Dioxide (conc.)', 'Carbon Monoxide (conc.)', 'Ozone (conc.)',\n       'Temperature (Celsius)', 'Pressure', 'Dew Point Temperature',\n       'Precipitation', 'Wind Direction',\"Volume\"\n       ]\n\ndf[cols] = scaler.fit_transform(df[cols])","11275574":"df.head()","aef301e8":"scaler_label = StandardScaler()\nlabels = np.array(labels).reshape(-1,1)\nscaler_label.fit(labels)\nlabels = scaler_label.transform(labels)\nlabels = labels.flatten()","f8f97434":"labels","62cc94aa":"train_1 = df[df[\"type\"]==\"train\"]\ntest_1 = df[df[\"type\"]== \"test\"]","d9ef2c72":"train_1.head()","665cd07c":"train_1[\"Wind Speed\"]= labels","1004aee4":"train_1[\"Wind Speed\"].fillna(train_1[\"Wind Speed\"].mean(),inplace=True)\n","948845b4":"train_1.drop([\"type\"],axis=1,inplace=True)\ntest_1.drop([\"type\"],axis=1,inplace=True)","5f84b069":"plt.subplots(figsize=(20,15))\nsns.heatmap(train_1.corr(),annot=True, cmap=\"YlGnBu\")","6798f726":"x = train_1.drop([\"Wind Speed\",\"Temperature (Celsius)\"],axis=1)\ny = train_1.iloc[:,-1]","46fce483":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)","fa2ac57f":"from sklearn.ensemble import RandomForestRegressor \n  \n # create regressor object \nregressor = RandomForestRegressor(n_estimators = 200, random_state = 1) \n  \n# fit the regressor with x and y data \nregressor.fit(x, y)   ","02d308a5":"rf_pred = regressor.predict(test_1)\n#result_rf=r2_score(y_test,rf_pred)\n#result_rf","a2f46c83":"rf_pred = scaler_label.inverse_transform(rf_pred)\nrf_pred","e88dc0b7":"import xgboost as xgb","d40f07ce":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 4, alpha = 10, n_estimators = 1000)","87d74ef0":"xg_reg.fit(x_train,y_train)\nxgb_pred = xg_reg.predict(x_test)\nresult_xgb=r2_score(y_test,xgb_pred)\nresult_xgb","97e29d46":"from sklearn.linear_model import Ridge\n\nfrom sklearn.linear_model import Lasso\n","e78d41f7":"rdg = Ridge(alpha = 0.5)\nrdg.fit(x, y)\nrdg.score(x, y)","bd7a9f9e":"model_lasso = Lasso(alpha=0.0005)\nmodel_lasso.fit(x_train, y_train) \npred_train_lasso= model_lasso.predict(x_train)\nprint(r2_score(y_train, pred_train_lasso))","563b3f94":"import lightgbm as lgb\nfrom mlxtend.regressor import StackingCVRegressor\nfrom catboost import CatBoostRegressor","b759f74f":"lgbm = lgb.LGBMRegressor()\nlgbm.fit(x, y)","2fed7611":"lgbm_pred = lgbm.predict(test_1)\nlgbm_pred = scaler_label.inverse_transform(lgbm_pred)\nlgbm_pred","2ffb3774":"catboost = CatBoostRegressor(n_estimators = 1000)\ncatboost.fit(x,y)\ncat_pred = catboost.predict(test_1.drop([\"Temperature (Celsius)\"],axis=1))\n#print(r2_score(y_test,cat_pred))","cb72af08":"final = cat_pred*0.692 + rf_pred* 0.32","80883967":"final[:10]","eb34b7db":"my_submission = pd.DataFrame({'ID': test.ID, 'Wind Speed': final})\nmy_submission.to_csv(\"prediction_19.csv\", index=False)","64897022":"### Random Forest Regression","15b83f0b":"# Data Cleaning","a0ba8821":"### XGBoost Regressor","f616c624":"### Correlation Matrix","20ebbfdb":"### Standardizing output variable","348e2335":"### Encoding wind direction","d481cbc4":"### Impute null and erroneous values of hour date and month by their mode","2e6b8355":"### Temperature does not contribute much hence creating a new variable ","8e54c3be":"### Splitting the data back into train and test","5a425b58":"### Ridge and Lasso Regression","73f0c60d":"### Function to clean temperature pressure and dew point","94a92112":"### Light GBM","cfc00f05":"### Either of these can be used","5fff8722":"### Cat Boost Regressor","d32f655b":"## Import the libraries","b2f2e279":"### Particulate Matter (2.5) forms a part of Particulate Matter (10) in the atmosphere so it needs to be subtracted","b0b830e4":"### Predictions","63cb7acd":"### Function to clean pollutant related variables","907f71e0":"## Combining train and test dataset for cleaning","a5fbde6a":"### Weighted Sum of Catboost and Random Forest","20ea03db":"### Standardizing the data"}}