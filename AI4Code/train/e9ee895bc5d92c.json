{"cell_type":{"9c2cfeb8":"code","6afa687f":"code","30f2b836":"code","dca374ae":"code","2c9cc387":"code","aea98e07":"code","1000c31e":"code","086f6b0f":"code","9962348c":"code","d2a04f9f":"code","6b342a73":"code","89ff56d2":"code","8aecbaad":"code","5c2475a0":"code","11cc0869":"code","b71f1ba6":"code","6d30664f":"code","aec36394":"code","40e11744":"code","c2e7deb8":"code","ffb54ab2":"markdown","c7c0eb5e":"markdown"},"source":{"9c2cfeb8":"!pip install torchsummary","6afa687f":"import os\nimport time\nimport torch\nimport torch.nn as nn\nfrom torchsummary import summary\nimport torchvision\nfrom torchvision import transforms, models\nfrom torch.utils.data import Dataset, DataLoader, random_split\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport time\nimport cv2\nfrom skimage import io, color\nfrom PIL import Image\nfrom sklearn.preprocessing import LabelEncoder","30f2b836":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ndevice","dca374ae":"data = pd.read_csv(\"..\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\/labels.csv\")\ndata.head()","2c9cc387":"for i in data.index:\n    data[\"path\"].iloc[i] = data[\"path\"].iloc[i].replace(\"\\\\\", \"\/\")","aea98e07":"le = LabelEncoder()\nle.fit(data[\"label\"])\ndata[\"label\"] = le.transform(data[\"label\"])","1000c31e":"data.info()","086f6b0f":"data.is_validation.value_counts()","9962348c":"data.is_final_validation.value_counts()","d2a04f9f":"def split_data(dt):\n    idx = list()\n    a = pd.DataFrame()\n    b = pd.DataFrame()\n    for i in data.index:\n        if dt[\"is_validation\"].iloc[i] == 1:\n            a = a.append(dt.iloc[i])\n            idx.append(i)\n        if dt[\"is_final_validation\"].iloc[i] == 1:    \n            b = b.append(dt.iloc[i])\n            idx.append(i)\n\n    dt = dt.drop(dt.index[idx])\n    dt = dt.reset_index()\n    a = a.reset_index()\n    b = b.reset_index()\n    return dt, a, b \n\ntrain_df, val_df, test_df = split_data(data)\n# sanity check\nprint(\"Length of train dataset: \", len(train_df))\nprint(\"Length of validation dataset: \" ,len(val_df))\nprint(\"Length of test dataset: \", len(test_df))","6b342a73":"val_df.label = val_df.label.astype(np.int64)\ntest_df.label = test_df.label.astype(np.int64)","89ff56d2":"train_transform = transforms.Compose([\n    transforms.ToPILImage(),\n    transforms.RandomResizedCrop(224),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n\ntest_transform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n","8aecbaad":"class BeeDataset(Dataset):\n    def __init__(self, df:pd.DataFrame, imgdir:str, train:bool,\n                 transforms=None):\n        self.df = df\n        self.imgdir = imgdir\n        self.train = train\n        self.transforms = transforms\n    \n    def __getitem__(self, index):\n        im_path = os.path.join(self.imgdir, self.df.iloc[index][\"path\"])\n        x = cv2.imread(im_path)\n        x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)\n        x = cv2.resize(x, (224, 224))\n\n        if self.transforms:\n            x = self.transforms(x)\n        \n        if self.train:\n            y = self.df.iloc[index][\"label\"]\n            return x, y\n        else:\n            return x\n    \n    def __len__(self):\n        return len(self.df)\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.model = models.resnet18(pretrained=True)\n        self.model.fc = nn.Linear(512, 4)\n    \n    def forward(self, x):\n        output = self.model(x)\n        return output\n","5c2475a0":"train_data = BeeDataset(df=train_df,\n                        imgdir=\"..\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\",\n                        train=True,\n                        transforms=train_transform)\n\nval_data = BeeDataset(df=val_df,\n                      imgdir=\"..\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\",\n                      train=True,\n                      transforms=test_transform)\n\ntest_data = BeeDataset(df=test_df,\n                       imgdir=\"..\/input\/bee-vs-wasp\/kaggle_bee_vs_wasp\",\n                       train=True,\n                       transforms=test_transform)","11cc0869":"criterion = nn.CrossEntropyLoss()\narch = Net()\narch.to(device)\noptim = torch.optim.SGD(arch.parameters(), lr=1e-3, momentum=0.9)\n\n\ntrain_loader = DataLoader(dataset=train_data, shuffle=True, batch_size=32, num_workers=4)\nval_loader = DataLoader(dataset=val_data, shuffle=True, batch_size=32, num_workers=4)\ntest_loader = DataLoader(dataset=test_data, shuffle=True, batch_size=32, num_workers=4)","b71f1ba6":"summary(batch_size=32, input_size=(3, 224, 224), model=arch)","6d30664f":"def train_model(model, optimizer, n_epochs, criterion):\n    start_time = time.time()\n    for epoch in range(1, n_epochs+1):\n        epoch_time = time.time()\n        epoch_loss = 0\n        correct = 0\n        total=0\n        print(\"Epoch {} \/ {}\".format(epoch, n_epochs))\n        model.train()\n        \n        for inputs, labels in train_loader:\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n            optimizer.zero_grad() # zeroed grads\n            outputs = model(inputs) # forward pass\n            loss = criterion(outputs, labels) # softmax + cross entropy\n            loss.backward() # back pass\n            optimizer.step() # updated params\n            epoch_loss += loss.item() # train loss\n            _, pred = torch.max(outputs, dim=1)\n            correct += (pred.cpu() == labels.cpu()).sum().item()\n            total += labels.shape[0]\n        acc = correct \/ total\n        \n        model.eval()\n        a=0\n        pred_val=0\n        correct_val=0\n        total_val=0\n        with torch.no_grad():\n            for inp_val, lab_val in val_loader:\n                inp_val = inp_val.to(device)\n                lab_val = lab_val.to(device)\n                out_val = model(inp_val)\n                loss_val = criterion(out_val, lab_val)\n                a += loss_val.item()\n                _, pred_val = torch.max(out_val, dim=1)\n                correct_val += (pred_val.cpu()==lab_val.cpu()).sum().item()\n                total_val += lab_val.shape[0]\n            acc_val = correct_val \/ total_val\n        epoch_time2 = time.time()\n        print(\"Duration: {:.0f}s, Train Loss: {:.4f}, Train Acc: {:.4f}, Val Loss: {:.4f}, Val Acc: {:.4f}\"\n              .format(epoch_time2-epoch_time, epoch_loss\/len(labels), acc, a\/len(lab_val), acc_val))\n    end_time = time.time()\n    print(\"Total Time:{:.0f}s\".format(end_time-start_time))","aec36394":"def eval_model(model):\n    correct = 0\n    total = 0\n    model.eval()\n    with torch.no_grad():\n        for images, labels in test_loader:\n            images = images.to(device)\n            labels = labels.to(device)\n            outputs = model(images)\n            _, pred = torch.max(outputs, dim=1)\n            correct += (pred == labels).sum().item()\n            total += labels.shape[0]\n    print('Accuracy of the network on the test images: %d %%' % (100 * correct \/ total))","40e11744":"train_model(model=arch, optimizer=optim, n_epochs=15, criterion=criterion)","c2e7deb8":"eval_model(arch)","ffb54ab2":"**Versions:**\n* v2: Changed optimizer to SGD, it converged better and faster. Accuracy **%94**","c7c0eb5e":"### I will update this notebook overtime, every upvote appreciated. If you have any questions or improvements feel free to comment."}}