{"cell_type":{"dbff7ec9":"code","9b90ac28":"code","e9ce4f3f":"code","77aa62ea":"code","8fbd4e9f":"code","09a1d08b":"code","8920a1f7":"code","c748d50a":"code","13cc33a2":"code","7ad4bf1a":"code","20644c6f":"code","f949f479":"code","399a5907":"code","4a2f865f":"code","c018a686":"code","8d5efb99":"code","b9ade6ef":"code","21a577e2":"code","5e73ad92":"code","e6d55409":"code","d5dae5fa":"code","1cadaec8":"code","7d106ed1":"code","4335b5b3":"code","0a649149":"code","e858e622":"markdown","74ab0e21":"markdown","0f92d6a8":"markdown"},"source":{"dbff7ec9":"from sklearn.datasets import load_digits","9b90ac28":"digits = load_digits()","e9ce4f3f":"import pandas as pd\n\ndigits_df = pd.DataFrame(digits.data)\ndigits_df = pd.concat([digits_df,pd.DataFrame(digits.target,columns=['target'])],axis=1)\ndigits_df.head()","77aa62ea":"X = digits_df.drop('target',axis=1)\nY = digits.target","8fbd4e9f":"from sklearn.preprocessing import StandardScaler\n\nfor col_name in X:\n  X[col_name] = StandardScaler().fit_transform(X[[col_name]])","09a1d08b":"from sklearn.svm import SVC\nfrom sklearn.decomposition import PCA","8920a1f7":"PCA_tr = PCA(0.95)\nX_PCA = PCA_tr.fit_transform(X)","c748d50a":"PCA_tr.n_components_","13cc33a2":"from sklearn.model_selection import StratifiedKFold,cross_val_score,GridSearchCV","7ad4bf1a":"SKF = StratifiedKFold(5,True)\n\nclf = GridSearchCV(SVC(gamma='auto'), {\n    'C': [1,10,20],\n    'kernel': ['rbf','linear']\n}, cv=SKF, return_train_score=False)","20644c6f":"clf","f949f479":"clf.fit(X_PCA, Y)\nclf.cv_results_","399a5907":"pd.DataFrame(clf.cv_results_)[['param_C','param_kernel','mean_test_score']]","4a2f865f":"clf.best_params_","c018a686":"from sklearn.model_selection import RandomizedSearchCV\n\nrs = RandomizedSearchCV(SVC(gamma='auto'), {\n        'C': [1,10,20],\n        'kernel': ['rbf','linear']\n    }, \n    cv=SKF, \n    return_train_score=False, \n    n_iter=2\n)\n\nrs.fit(X_PCA, Y)\npd.DataFrame(rs.cv_results_)[['param_C','param_kernel','mean_test_score']]","8d5efb99":"rs.best_params_","b9ade6ef":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","21a577e2":"LogisticRegression() # 'C': [1,5,10]","5e73ad92":"DecisionTreeClassifier() # 'criterion' : ['gini', 'entropy']","e6d55409":"RandomForestClassifier() # 'n_estimators': [100,125,150]","d5dae5fa":"KNeighborsClassifier() # 'n_neighbors' : [5,8,10]","1cadaec8":"SVC() #'C': [1,10,20], 'kernel': ['rbf','linear']","7d106ed1":"model_params = {\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear',multi_class='auto'),\n        'params': {\n            'C': [1,5,10]\n        }\n    },\n    'decission_tree': {\n        'model': DecisionTreeClassifier(),\n        'params' : {\n            'criterion' : ['gini', 'entropy']\n        }\n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10]\n        }\n    },\n    'KNeighbors': {\n        'model': KNeighborsClassifier(),\n        'params' : {\n            'n_neighbors' : [5,8,10]\n        }\n    },\n    'svm': {\n        'model': SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20],\n            'kernel': ['rbf','linear']\n        }  \n    }\n    \n}","4335b5b3":"scores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=SKF, return_train_score=False)\n    clf.fit(X_PCA, Y)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf","0a649149":"df.sort_values('best_score',ascending=False)","e858e622":"# RandomizedSearchCV","74ab0e21":"# Hyper-Parameter Tuning\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1OQ0oxLXM3gNoNNdIdQ2ieo8BnWotZgD9)\n\n\nHyper-Parameter tuning helps in selecting the best model parameters.We can compare metrics of different models using best model parameters for each models. We have two types of hyper parameter tuning technique,\n\n1. GridSearchCV\n2. RandomizedSeacrhCV\n\n\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1g-hy26IbmuHpLd9vJlmNvoyAdBkdyA4M)\n","0f92d6a8":"# GridSearchCV"}}