{"cell_type":{"5b3455e1":"code","db0f53e5":"code","15578d56":"code","8ca2a513":"code","87495917":"markdown","53b55ea3":"markdown","df1e7aa8":"markdown","ec62e536":"markdown","690ddb57":"markdown","b1f03943":"markdown"},"source":{"5b3455e1":"# Imports\nimport cv2 as cv\nfrom PIL import Image\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt","db0f53e5":"image_path = \"..\/input\/test-extractor-image\/cyrus-chew-Dl39g6QhOIM-unsplash.jpg\"\nn_colors = 5\nimg_max_dim = 256\naccuracy_aimed = 1.0  # Stop iterating if the specified accuracy is reached.\nmax_iter = 45  # Stop the algorithm after the specified number of iterations.\nstart_time = time.time()\n\nimg = Image.open(image_path).convert('RGB')\n\n# Resize image for computation while keeping aspect ratio\nresized_width = int((img_max_dim * min(img.size)) \/ max(img.size))\nresized_img = img.copy()\nresized_img.thumbnail((img_max_dim, img_max_dim), Image.ANTIALIAS)\n\n# Reshape for k-means\nresized_img = np.array(resized_img, np.float32)\n\n# Extract the n most present colors\n# The algorithm stops iterating when any of the above conditions are met.\ncriteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, max_iter, \n          accuracy_aimed)\n\n# KMEANS_PP_CENTERS: initializing centers that are far away from one another, \n# helps to reduce the randomness in the results.\n_, labels, centers = cv.kmeans(resized_img.reshape(-1,3), n_colors, None, \n                             criteria, 10, flags=cv.KMEANS_PP_CENTERS)\n\n# Find the biggest centers in descending order\nunique, counts = np.unique(labels, return_counts=True)\nlabels_ordered = unique[counts.argsort()[::-1]]\n\n# Reorder colors by presence in the image - in descending order\nordered_palette = centers[labels_ordered].astype(int)\nend_time = time.time() - start_time\n\n# Quanticize the image by reconstructing it with only the extracted colors\nquanticized_image = np.uint8(centers)[labels.flatten()].reshape((resized_img.shape))\n\n\n# Display the initial image and extracted palette\nplt.figure(figsize=(12,12))\nplt.title(\"Initial image\")\nplt.imshow(img)\nplt.grid()\nplt.axis('off')\nplt.show()\n\nplt.figure(figsize=(12,12))\nplt.imshow(ordered_palette[:n_colors][np.concatenate([[i] * 100 for i in range(len(ordered_palette[:n_colors]))]).reshape((-1,10)).T])\nplt.title(f\"Final Palette with {n_colors} colors. Generated in %.2f seconds.\" % end_time)\nplt.grid()\nplt.axis('off')\nplt.show()\n\nprint(\"\\n\")","15578d56":"# Plot the quanticized images\nplt.figure(figsize=(12,12))\nplt.subplot(1,2,1)\nplt.title(\"Here is what the original image looks like\")\nplt.grid()\nplt.axis('off')\nplt.imshow(resized_img\/255.0)\nplt.subplot(1,2,2)\nplt.title(f\"Here is what the quanticized image looks like with {n_colors} colors!\")\nplt.grid()\nplt.axis('off')\nplt.imshow(quanticized_image)\nprint(\"\\n\")","8ca2a513":"# Add your code here and start testing right away!\n","87495917":"### This is where you play with your results!\nTake your palettes in the `final_palettes` list and build a code to make them look better!\n\n*Send us your code updates and results at louis@designstripe.com. We would love to see what you achieve and give our feedback!*\n","53b55ea3":"## Imports","df1e7aa8":"## Extract the n most present colors in the image of your choice\nTo upload an image, simply click on Add data -> upload, select your image and change the path with its name!","ec62e536":"## Color quantization\n\nHaving this new palette, you can play with the original image to reconstruct it using only these colors, which is called color quantization as seen in the article https:\/\/en.wikipedia.org\/wiki\/Color_quantization.\n\nI invite you to play with the algorithm using different color combinations to better understand how it works!","690ddb57":"## Next step: Build a better palette!\nUse color harmony expert knowledge to understand the relation of the color in the extracted colors and build the best looking palette possible out of this image!\n\nHere are a few tips:\n- Try changing the color space! You can look at colors in different ways such as RGB, HSV, LAB, etc. HSV is a great space to better understand color relations.\n- There is no general consensus on how and why a palette looks beautiful. Your best shot is to take a look at basic color harmonies and build a code that will try to follow them.\n- Base yourself on the current trends, look at color palettes websites and try to orient your results towards them!\n- It doesn't have to be perfect! Have fun, play with it, and build something great! Colors are a subjective thing. Some people will love them while some will hate them. You just want to allow customization to your tools as you can't force them to like a color schema.","b1f03943":"# Color Extractor\n### This is a Notebook showcasing how to efficiently and easily extract the colors of an image using python. We also show how to perform color quantization using OpenCV.\n"}}