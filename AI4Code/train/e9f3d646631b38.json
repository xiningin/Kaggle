{"cell_type":{"adb783e8":"code","39f406be":"code","c6b75040":"code","a0635176":"code","fd685820":"code","2a419a1b":"code","d6b7adef":"code","2352e1af":"code","69c326b6":"code","f45b9c21":"code","3aa3f89a":"code","874a0ba9":"code","143048e1":"code","67b5e512":"code","aa6e2b3e":"code","6cc4b3d2":"code","62b411e4":"code","dcd6f1aa":"code","316c2819":"code","b5f46d8e":"code","6121c6b2":"code","d7bd3615":"code","51a67be6":"code","aae57a2b":"code","abd91a94":"code","499829ed":"code","b5d11b63":"code","1007bd8a":"code","4726de98":"code","5d148928":"code","beab47cb":"code","0f5e8c20":"code","e89ea3df":"code","aceb1f4e":"code","a588122c":"code","e48704c8":"code","bb285f0c":"code","d6563d0b":"code","d397368c":"markdown","98e274a4":"markdown","32accaef":"markdown","5b920784":"markdown","75a8cb0b":"markdown","fe108507":"markdown","8abdb89e":"markdown","014bf437":"markdown","acf41a0b":"markdown"},"source":{"adb783e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39f406be":"import numpy as np\nimport pandas as pd\nimport tensorflow\nimport keras\nfrom keras.models import Model\nfrom keras.layers import Input, LSTM, Dense,TimeDistributed,Embedding,Bidirectional\nfrom keras.preprocessing.text import Tokenizer\nfrom nltk.corpus import stopwords\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nfrom string import digits\nimport nltk\nimport re\nimport string","c6b75040":"df = pd.read_csv(\"\/kaggle\/input\/hindi-english-parallel-corpus\/hindi_english_parallel.csv\")\ndf.head()","a0635176":"df.shape","fd685820":"df.isna().sum()","2a419a1b":"df = df[:20000]","d6b7adef":"df.shape","2352e1af":"df.isna().sum()","69c326b6":"df.dropna(inplace=True)","f45b9c21":"df.isna().sum()","3aa3f89a":"# lowercasing\nfor col in df.columns:\n    df[col] = df[col].apply(lambda x: str(x))\n    df[col] = df[col].apply(lambda x: x.lower())\nprint(\"data converted to lowercase\")\nprint(\"======================================\")\n    \n# removing stopwords\nstop_words = stopwords.words('english')\nprint(\"removing stopwords...\")\nprint(stop_words[:10])\ndf['english'] = df['english'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\ndf['hindi'] = df['hindi'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\nprint(\"stopwords have been removed!\")\nprint(\"======================================\")\n\n# removing quotes\ndf['english'] = df['english'].apply(lambda x: re.sub(\"'\", '', x))\ndf['hindi'] = df['hindi'].apply(lambda x: re.sub(\"'\", '', x))\nprint(\"data is now free of any qoutes\")\nprint(\"sample:\", df[\"english\"][0])\nprint(\"======================================\")\n\n# removing all the special characters\npunc = set(string.punctuation)\nprint(\"fixing punctuation...\")\nprint(punc)\ndf['english'] = df['english'].apply(lambda x: ''.join(y for y in x if y not in punc))\ndf['hindi'] = df['hindi'].apply(lambda x: ''.join(y for y in x if y not in punc))\nprint(\"all the special characters have been removed!\")\nprint(\"======================================\")\n\n# removing digits\ndigits = \"1234567890\"\nremove_digits = str.maketrans('','',digits)\nprint(\"removing digits...\")\nprint(remove_digits)\ndf['english'] = df['english'].apply(lambda x: x.translate(remove_digits))\ndf['hindi'] = df['hindi'].apply(lambda x: x.translate(remove_digits))\ndf['hindi'] = df['hindi'].apply(lambda x: re.sub(\"[\u0968\u0969\u0966\u096e\u0967\u096b\u096d\u096f\u096a\u096c]\", \"\", x))\nprint(\"all the digits have been removed!\")\nprint(\"======================================\")\n\n# removing extra spaces\ndf['english'] = df['english'].apply(lambda x: x.strip())\ndf['hindi'] = df['hindi'].apply(lambda x: x.strip())\ndf['english'] = df['english'].apply(lambda x: re.sub(\" +\", \" \", x))\ndf['hindi'] = df['hindi'].apply(lambda x: re.sub(\" +\", \" \", x))\nprint(\"extra spaces have been removed!\")\nprint(\"======================================\")\n\nprint(\"clean data:\")\ndf.head(51)","874a0ba9":"df['hindi'] = df['hindi'].apply(lambda x : 'START_ '+ x + ' _END')\ndf.head()","143048e1":"### Get English and Hindi Vocabulary\nall_eng_words = set()\nfor eng in df['english']:\n    for word in eng.split():\n        if word not in all_eng_words:\n            all_eng_words.add(word)\n\nall_hin_words = set()\nfor hin in df['hindi']:\n    for word in hin.split():\n        if word not in all_hin_words:\n            all_hin_words.add(word)","67b5e512":"all_eng_words","aa6e2b3e":"all_hin_words","6cc4b3d2":"df['length_eng'] = df['english'].apply(lambda x:len(x.split(\" \")))\ndf['length_hin'] = df['hindi'].apply(lambda x:len(x.split(\" \")))","62b411e4":"df.head()","dcd6f1aa":"df = df[df['length_eng']<=20]\ndf = df[df['length_hin']<=20]","316c2819":"max_length_src=max(df['length_hin'])\nmax_length_tar=max(df['length_eng'])\ninput_words = sorted(list(all_eng_words))\ntarget_words = sorted(list(all_hin_words))\nnum_encoder_tokens = len(all_eng_words)\nnum_decoder_tokens = len(all_hin_words)","b5f46d8e":"num_decoder_tokens","6121c6b2":"num_decoder_tokens += 1\ninput_token_index = dict([(word, i+1) for i, word in enumerate(input_words)])\ntarget_token_index = dict([(word, i+1) for i, word in enumerate(target_words)])","d7bd3615":"input_token_index","51a67be6":"reverse_input_char_index = dict((i, word) for word, i in input_token_index.items())\nreverse_target_char_index = dict((i, word) for word, i in target_token_index.items())\nreverse_input_char_index","aae57a2b":"X = df['english'] \ny = df['hindi']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=101)\nprint(\"data has been split!\")","abd91a94":"encoder_input_data = np.zeros((2, max_length_src),dtype='float32')\ndecoder_input_data = np.zeros((2, max_length_tar),dtype='float32')\ndecoder_target_data = np.zeros((2, max_length_tar, num_decoder_tokens),dtype='float32')","499829ed":"def generate_batch(X = X_train, y = y_train, batch_size = 128):\n    ''' Generate a batch of data '''\n    while True:\n        for j in range(0, len(X), batch_size):\n            encoder_input_data = np.zeros((batch_size, max_length_src),dtype='float32')\n            decoder_input_data = np.zeros((batch_size, max_length_tar),dtype='float32')\n            decoder_target_data = np.zeros((batch_size, max_length_tar, num_decoder_tokens),dtype='float32')\n            for i, (input_text, target_text) in enumerate(zip(X[j:j+batch_size], y[j:j+batch_size])):\n                for t, word in enumerate(input_text.split()):\n                    encoder_input_data[i, t] = input_token_index[word] # encoder input seq\n                for t, word in enumerate(target_text.split()):\n                    if t<len(target_text.split())-1:\n                        decoder_input_data[i, t] = target_token_index[word] # decoder input seq\n                    if t>0:\n                        # decoder target sequence (one hot encoded)\n                        # does not include the START_ token\n                        # Offset by one timestep\n                        decoder_target_data[i, t - 1, target_token_index[word]] = 1.\n            yield([encoder_input_data, decoder_input_data], decoder_target_data)","b5d11b63":"latent_dim = 300\n# Encoder\nencoder_inputs = Input(shape=(None,))\nenc_emb =  Embedding(num_encoder_tokens+1, latent_dim, mask_zero = True)(encoder_inputs)\nencoder_lstm = LSTM(latent_dim, return_state=True)\nencoder_outputs, state_h, state_c = encoder_lstm(enc_emb)\n# We discard `encoder_outputs` and only keep the states.\nencoder_states = [state_h, state_c]\n","1007bd8a":"# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\ndec_emb_layer = Embedding(num_decoder_tokens+1, latent_dim, mask_zero = True)\ndec_emb = dec_emb_layer(decoder_inputs)\n# We set up our decoder to return full output sequences,\n# and to return internal states as well. We don't use the\n# return states in the training model, but we will use them in inference.\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\ndecoder_outputs, _, _ = decoder_lstm(dec_emb,\n                                     initial_state=encoder_states)\ndecoder_dense = Dense(num_decoder_tokens, activation='softmax')\ndecoder_outputs = decoder_dense(decoder_outputs)\n\n# Define the model that will turn\n# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)","4726de98":"model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])\n","5d148928":"model.summary()\ntrain_samples = len(X_train)\nval_samples = len(X_test)\nbatch_size = 10\nepochs = 10\n","beab47cb":"model.save('eng-to-hindi.h5')","0f5e8c20":"a, b = next(generate_batch())","e89ea3df":"model.fit_generator(generator = generate_batch(X_train, y_train, batch_size = batch_size),\n                    steps_per_epoch = train_samples\/batch_size,\n                    epochs=10,\n                    validation_data = generate_batch(X_test, y_test, batch_size = batch_size),\n                    validation_steps = val_samples\/batch_size)","aceb1f4e":"train_gen = generate_batch(X_train, y_train, batch_size = 1)\nk=-1","a588122c":"# Encode the input sequence to get the \"thought vectors\"\nencoder_model = Model(encoder_inputs, encoder_states)\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\n\ndec_emb2= dec_emb_layer(decoder_inputs) # Get the embeddings of the decoder sequence\n\n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=decoder_states_inputs)\ndecoder_states2 = [state_h2, state_c2]\ndecoder_outputs2 = decoder_dense(decoder_outputs2) # A dense softmax layer to generate prob dist. over the target vocabulary\n\n# Final decoder model\ndecoder_model = Model(\n    [decoder_inputs] + decoder_states_inputs,\n    [decoder_outputs2] + decoder_states2)","e48704c8":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    states_value = encoder_model.predict(input_seq)\n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    # Populate the first character of target sequence with the start character.\n    target_seq[0, 0] = target_token_index['START_']\n\n    # Sampling loop for a batch of sequences\n    # (to simplify, here we assume a batch of size 1).\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_char = reverse_target_char_index[sampled_token_index]\n        decoded_sentence += ' '+sampled_char\n\n        # Exit condition: either hit max length\n        # or find stop character.\n        if (sampled_char == '_END' or\n           len(decoded_sentence) > 50):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update states\n        states_value = [h, c]\n\n    return decoded_sentence","bb285f0c":"from nltk.translate.bleu_score import sentence_bleu\nref = [\n    'this is moonlight'.split(),\n    'Look, this is moonlight'.split(),\n    'moonlight it is'.split()\n]\ntest = 'it is moonlight'.split()\nprint('BLEU score for test-> {}'.format(sentence_bleu(ref, test)))\n \ntest01 = 'it is cat and moonlight'.split()\nprint('BLEU score for test01-> {}'.format(sentence_bleu(ref, test01)))","d6563d0b":"k+=1\n(input_seq, actual_output), _ = next(train_gen)\ndecoded_sentence = decode_sequence(input_seq)\nprint('Input English sentence:', X_train[k:k+1].values[0])\nprint('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\nprint('Predicted Hindi Translation:', decoded_sentence[:-4])","d397368c":"### Adding start and end tokens to target sequences","98e274a4":"# AOML Lab\n# Experiment - 11\n","32accaef":"### Prediction","5b920784":"### Splitting data","75a8cb0b":"### Adding features to data","fe108507":"### Preprocessing","8abdb89e":"### Divyansh Agarwal\n### AIML B-3\n### 500076414\n### R177219079","014bf437":"### Generating dictionaries","acf41a0b":"### BLEU Score"}}