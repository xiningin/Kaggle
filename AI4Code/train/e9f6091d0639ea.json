{"cell_type":{"dee1a379":"code","ba020aec":"code","119eb565":"code","dc49b63f":"code","72942acf":"code","7589581f":"code","56661f5e":"code","c255a270":"code","ad9ed06a":"code","b1dcd6ff":"code","e25301e2":"code","27a67383":"markdown","2326d382":"markdown","8080fc78":"markdown","db88dfb3":"markdown","9bd9b620":"markdown","f954c9aa":"markdown","79d8e03f":"markdown","6d3f4c40":"markdown","6c792547":"markdown"},"source":{"dee1a379":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nimport os\nimport datetime\nimport folium\nfrom folium.plugins import HeatMap, MarkerCluster\n\n# Set plot style\nplt.style.use('ggplot')\n# Set the default figure size\nplt.rc('figure', figsize=(12,6))","ba020aec":"# Load CSV file and get a quick preview\ndf = pd.read_csv(r'..\/input\/mmda-traffic-incident-data\/data_mmda_traffic_spatial.csv')\ndf.head()","119eb565":"# Cast appropriate dtypes to columns\ndf['Timestamp'] = df['Date'] + ' ' + df['Time']\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')\ndf['High_Accuracy'] = df['High_Accuracy'].astype(int)\ndf.replace('None', np.nan, inplace=True)\ndf.head()","dc49b63f":"# Get time series of dates\ndf_date = df.groupby(pd.Grouper(key='Timestamp', freq=\"D\")).count()\n\ndf_date = df_date.reset_index()\ndf_date.drop(['Date','Time','Location','Latitude','Longitude','Direction','Lanes_Blocked',\n              'Involved','Tweet','Type'], axis=1,inplace=True)\ndf_date = df_date.rename(columns={'Source': 'y'})\n# df_date.to_csv('data\\incidents_day.csv',index=False)\n\n# Create rolling average\ndf_date_rolling = df_date\ndf_date_rolling.set_index('Timestamp',inplace=True)\ndf_date_rolling['roll7_avg'] = df_date_rolling['y'].rolling(7).mean()\ndf_date_rolling['roll7_std'] = df_date_rolling['y'].rolling(7).std()\ndf_date.reset_index(inplace=True)\ndf_date_rolling = df_date_rolling.set_index('Timestamp')\n\n# Plot\nsns.set_style('darkgrid')\ndf_date_rolling['y'].plot(alpha=0.15,color='black')\ndf_date_rolling['roll7_avg'].plot()\ndf_date_rolling['roll7_std'].plot()\nplt.xlabel('Date')\nplt.ylabel('Amount of Incidents')\nL = plt.legend(frameon=True)\nL.set_title('Legend')\n# L = plt.legend(frameon=True)\nframe = L.get_frame()\nframe.set_color('white')\nL.get_texts()[0].set_text('Amount of Incidents')\nL.get_texts()[1].set_text('Rolling Average of Incidents (7 Days)')\nL.get_texts()[2].set_text('Rolling Standard Deviation (7 Days)')\nplt.title('7 Day Rolling Average of Daily Incidents')\n# plt.savefig('analysis\/fig1_entiredata_rollingavg.jpg',bbox_inches = 'tight')","72942acf":"def subset_by_direction(df, direction):\n    df_subset = df.dropna(subset=['Direction'])\n    df_subset = df_subset[df_subset['Direction'].str.contains(direction)]\n    df_subset = df_subset['Timestamp'].dt.hour.value_counts()\n    df_subset = df_subset.rename_axis('Hour').reset_index(name=f'Amount_{direction}')\n    df_subset = df_subset.sort_values(by='Hour')\n    df_subset['Hour'] = df_subset['Hour'].astype(int)\n    df_subset = df_subset.reset_index(drop=True)\n    df_subset.set_index('Hour',inplace=True)\n    return df_subset\n\ndf_sb = subset_by_direction(df, 'SB')\ndf_nb = subset_by_direction(df, 'NB')\ndf_eb = subset_by_direction(df, 'EB')\ndf_wb = subset_by_direction(df, 'WB')\n\ndf_direction = pd.concat([df_nb, df_sb, df_eb, df_wb],axis=1)\n\n# Average amount of incidents per direction\ndf_direction['Amount_NB'] = df_direction['Amount_NB'] \/ len(df_direction)\ndf_direction['Amount_SB'] = df_direction['Amount_SB'] \/ len(df_direction)\ndf_direction['Amount_EB'] = df_direction['Amount_EB'] \/ len(df_direction)\ndf_direction['Amount_WB'] = df_direction['Amount_WB'] \/ len(df_direction)\n\n# Plot\ndf_direction.plot()\nplt.xticks(np.arange(0, 24, step=1))\nplt.title('Average Amount of Incidents in the Day According to Direction')\nL = plt.legend(frameon=True)\nL.set_title('Legend')\n# L = plt.legend(frameon=True)\nframe = L.get_frame()\nframe.set_color('white')\nL.get_texts()[0].set_text('Northbound')\nL.get_texts()[1].set_text('Southbound')\nL.get_texts()[2].set_text('Eastbound')\nL.get_texts()[3].set_text('Westbound')\nplt.xlabel('Time in 24h Format')\nplt.ylabel('Amount of Incidents Per Hour')\n# plt.savefig('analysis\/direction_avg.png',bbox_inches = 'tight')","7589581f":"df_type = df\ndf_type = df_type.dropna()\n\ndef subset_mechanical_bus(row):\n    if ('BUS' in row['Involved']) and ('MECHANICAL' in row['Type']):\n        return True\n\ndef subset_mechanical_truck(row):\n    if ('TRUCK' in row['Involved']) and ('MECHANICAL' in row['Type']):\n        return True\n    \ndef subset_mechanical_car(row):\n    if (('CAR' in row['Involved']) or ('SUV' in row['Type'])) and ('MECHANICAL' in row['Type']):\n        return True\n    \ndef subset_mechanical_public(row):\n    if (('PUJ' in row['Involved']) or ('UV' in row['Type'])) and ('MECHANICAL' in row['Type']):\n        return True\n\n# Subset\ndf_type['type_bus'] = df_type.apply(lambda row: subset_mechanical_bus(row),axis=1)\ndf_type['type_truck'] = df_type.apply(lambda row: subset_mechanical_truck(row),axis=1)\ndf_type['type_public'] = df_type.apply(lambda row: subset_mechanical_public(row),axis=1)\ndf_type['type_car'] = df_type.apply(lambda row: subset_mechanical_car(row),axis=1)\n\n# Create dataframe and plot\ndf_type_participant = df_type[['Timestamp','type_bus','type_truck','type_public','type_car']]\ndf_type_participant.groupby(pd.Grouper(key='Timestamp', freq=\"W\")).sum().rolling(7).mean().plot()\n\n# Attach legend\nL = plt.legend(frameon=True)\nL.set_title('Legend')\nframe = L.get_frame()\nframe.set_color('white')\nL.get_texts()[0].set_text('Public Bus')\nL.get_texts()[1].set_text('Truck')\nL.get_texts()[2].set_text('Other Public Transport')\nL.get_texts()[3].set_text('Private Car')\n\n# Labels\nplt.xlabel('Date')\nplt.ylabel('Amount of Incidents')\nplt.title('Mechanical Breakdowns by Vehicle Type (Rolling Weekly Average)')\n# plt.savefig('analysis\/type_breakdown.png',bbox_inches = 'tight')","56661f5e":"# Participant timeseries\ndf_type = df\ndf_type = df_type.dropna()\n\n# Prepare lambda functions\ndef subset_bus(row):\n    if ('BUS' in row['Involved']) and ('ACCIDENT' in row['Type']):\n        return True\n\ndef subset_truck(row):\n    if ('TRUCK' in row['Involved']) and ('ACCIDENT' in row['Type']):\n        return True\n    \ndef subset_private(row):\n    if (('CAR' in row['Involved']) or ('SUV' in row['Involved'])) and ('ACCIDENT' in row['Type']):\n        return True\n    \ndef subset_public(row):\n    if (('PUJ' in row['Involved']) or ('UV' in row['Involved'])) and ('ACCIDENT' in row['Type']):\n        return True\n    \ndef subset_pedestrian(row):\n    if ('PEDESTRIAN' in row['Involved']) and ('ACCIDENT' in row['Type']):\n        return True\n    \ndef subset_motorcycle(row):\n     if ('MOTORCYCLE' in row['Involved']) and ('ACCIDENT' in row['Type']):\n        return True\n\n# Apply to check for existance of participants\ndf_type['type_bus'] = df_type.apply(lambda row: subset_bus(row),axis=1)\ndf_type['type_truck'] = df_type.apply(lambda row: subset_truck(row),axis=1)\ndf_type['type_public'] = df_type.apply(lambda row: subset_public(row),axis=1)\ndf_type['type_private'] = df_type.apply(lambda row: subset_private(row),axis=1)\ndf_type['type_pedestrian'] = df_type.apply(lambda row: subset_pedestrian(row),axis=1)\ndf_type['type_motorcycle'] = df_type.apply(lambda row: subset_motorcycle(row),axis=1)\n\n# Create dataframe and plot\ncols = ['Timestamp','type_bus','type_truck','type_public','type_private', 'type_pedestrian', 'type_motorcycle']\ndf_type_participant = df_type[cols]\ndf_type_participant.groupby(pd.Grouper(key='Timestamp', freq=\"W\")).sum().rolling(7).mean().plot()\n\n# Attach legend\nL = plt.legend(frameon=True)\nL.set_title('Legend')\nframe = L.get_frame()\nframe.set_color('white')\nL.get_texts()[0].set_text('Public Bus')\nL.get_texts()[1].set_text('Truck')\nL.get_texts()[2].set_text('Other Public Transport')\nL.get_texts()[3].set_text('Private Car')\nL.get_texts()[4].set_text('Pedestrian')\nL.get_texts()[5].set_text('Motorcycle')\n\n# Labels\nplt.xlabel('Date')\nplt.ylabel('Amount of Incidents')\nplt.title('Number of Accidents By Participants (Rolling Weekly Average)')\n# plt.savefig('analysis\/type_breakdown.png',bbox_inches = 'tight')","c255a270":"# Get average incidents per month day\n# df_date.set_index('ds',inplace=True)\ndf_date['day'] = df_date['Timestamp'].dt.day\ndf_date_avg = df_date.groupby('day').mean()\ndf_date_avg = df_date_avg.reset_index()\ndf_date_avg.head()\n\n# Create bar plot based on the date time series dataframe\nsns.set_style('darkgrid')\ndf_date['day'] = df_date['Timestamp'].dt.day\nsns.barplot(x='day', y='y', data=df_date, palette='Blues_d', saturation=.75)\nplt.title('Average Amounts of MMDA ALERT Incidents During the Month')\nplt.xlabel('Day of Month')\nplt.ylabel('Amount')\n#plt.savefig('analysis\/monthday_avg.jpg',bbox_inches = 'tight')","ad9ed06a":"# Get time series of hour\ndf_hour = df.groupby(pd.Grouper(key='Timestamp', freq='H')).count()\ndf_hour = df_hour.reset_index()\ndf_hour = df_hour.drop(['Date','Time','Location','Latitude','Longitude','Direction','Type',\n                        'Lanes_Blocked','Involved','Tweet'],axis=1)\ndf_hour = df_hour.rename(columns={'Source': 'y'})\n# df_hour.to_csv('data\\incidents_hour.csv',index=False)\ndf_hour.head()\n\ndf_cumulative_hour = df['Timestamp'].dt.hour.value_counts()\ndf_cumulative_hour = df_cumulative_hour.rename_axis('Hour').reset_index(name='Amount')\ndf_cumulative_hour = df_cumulative_hour.sort_values(by='Hour')\ndf_cumulative_hour['Hour'] = df_cumulative_hour['Hour'].astype(int)\ndf_cumulative_hour = df_cumulative_hour.reset_index(drop=True)\n\n#df_in['bin_hour'].plot.hist(alpha=0.5,bins=24)\nsns.set_style(\"darkgrid\")\nsns.barplot(x=\"Hour\", y=\"Amount\", data=df_cumulative_hour,palette='Blues_d',saturation=.75, ci=95)\n\nplt.title('Time Distribution of MMDA ALERT Incidents')\nplt.xlabel('Time in 24h Format')\n#plt.savefig('analysis\/hourcount.jpg',bbox_inches = 'tight')","b1dcd6ff":"# Create bar plot based on the date time series dataframe\nsns.set_style('darkgrid')\ndf_date['day'] = df_date['Timestamp'].dt.day\nsns.barplot(x='day', y='y', data=df_date,saturation=.75, palette='Blues_d', ci=95)\nplt.title('Average Amounts of MMDA ALERT Incidents During the Month')\nplt.xlabel('Day of Month')\nplt.ylabel('Amount')\n#plt.savefig('analysis\/monthday_avg.jpg',bbox_inches = 'tight')","e25301e2":"# Init folium map\nmc = MarkerCluster(name='Incidents')\nmetro_coords = (14.599574, 121.059929)\nm = folium.Map(\n    location=metro_coords,\n    zoom_start=11,\n    tiles='OpenStreetMap'\n)\n\n# load incident data\nmc = MarkerCluster(name='Incidents')\n\n# Populate map\nfor item in df.iterrows():\n\n    source = item[1]['Source']\n    text = item[1]['Tweet']\n    timestamp = item[1]['Date']\n    embed = \"\"\"\n    <div>\n        <blockquote class=\"twitter-tweet tw-align-center\"><p lang=\"en\" dir=\"ltr\"> {} <\/a><\/p>&mdash; Official MMDA (@MMDA)<a href=\"{}\"> {}<\/a><\/blockquote>\n        <script async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script>\n    <\/div>\n    \"\"\".format(text, source, timestamp)\n\n    # Generate content for markers\n    iframe = folium.IFrame(\n        embed,\n        width=500,\n        height=280\n    )\n\n    # Put content in popup for markers\n    popup = folium.Popup(iframe)\n    mc.add_child(folium.Marker(location=[item[1]['Latitude'], item[1]['Longitude']],\n                                popup=popup,\n                                clustered_marker=True)).add_to(m)\n    \nfolium.LayerControl(position='topright').add_to(m)\nm","27a67383":"# Getting Started: Tweet2Map Dataset\nHello and welcome to my dataset! This notebook  will visualize the data and also provide some code to get you started with your analysis. I will cover the following things:\n\n- Plot the timeseries\n- Visualize distribution\n- Plotting points on a map\n\n\n**Important**. As of January 8, 2020, there is a gap in the data where there is zero data input. MMDA was still tweeting, however my data miner was not running due to pandemic difficulties.","2326d382":"# Load and Prepare Data","8080fc78":"# Import Packages and Download Data from Kaggle","db88dfb3":"### Timeseries of Direction\nThe `direction` column means whether or not the accident occured in a road that was going northbound, eastbound, westbound, or southbound.","9bd9b620":"Mechanical breakdowns by participants","f954c9aa":"# Plot Timeseries\nPlotting the timeseries data will involve creating a rolling average.","79d8e03f":"# Plot Accidents on a Map","6d3f4c40":"### Timeseries of Accident Type\nGenerate timeseries plots for different types of data.","6c792547":"# Visualize Distributions"}}