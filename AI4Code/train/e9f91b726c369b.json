{"cell_type":{"c0bbc12b":"code","1ef0ea35":"code","d6bd9aa5":"code","4d47c557":"code","1e042f02":"code","786e1f1b":"code","23653840":"code","635e9a78":"code","c21faf9d":"code","29ba62c1":"code","dc2f9700":"code","6f54f214":"code","87f6f1df":"code","07efd427":"code","17eb3456":"code","8949eb7f":"code","64c7c12f":"code","98c52ce4":"markdown","85e93ff0":"markdown","ec01b63f":"markdown","f44fddf3":"markdown","122cc412":"markdown","1d81ee83":"markdown","409589a7":"markdown"},"source":{"c0bbc12b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ef0ea35":"import numpy as np\nimport pandas as pd\nimport plotly.express as px","d6bd9aa5":"df = pd.read_csv(\"..\/input\/world-population\/2021_population.csv\")","4d47c557":"#Show first five row of data\ndf.head()","1e042f02":"# Information about data\ndf.info()","786e1f1b":"# Check the null values\ndf.isnull().sum()","23653840":"df.replace(',','',regex = True, inplace = True)","635e9a78":"df = df.rename(columns = {'world_%':'world'})","c21faf9d":"df['growth_rate'] = df['growth_rate'].str.strip('%')\ndf['world'] = df['world'].str.strip('%')\ndf['density_sq_km'] = df['density_sq_km'].str.strip('\/sq_km')","29ba62c1":"df['2021_last_updated'] = df['2021_last_updated'].astype(np.int64)\ndf['2020_population'] = df['2020_population'].astype(np.int64)\ndf['density_sq_km'] = df['density_sq_km'].astype(np.int64)\ndf['growth_rate'] = df['growth_rate'].astype(float)\ndf['world'] = df['world'].astype(float)","dc2f9700":"df1 = df.sort_values(by = '2021_last_updated', ascending = False).reset_index().head(20)\nfig = px.bar(df1,\n             x = 'country',\n             y =  '2021_last_updated',\n             color = '2021_last_updated',\n             color_continuous_scale = 'twilight',\n             labels = {\"2021_last_updated\":\"Population\"}\n            \n            )\n\nfig.update_layout(title = 'Top 20 countries with the most population in 2021',\n                  title_x = 0.5,\n                  title_font = dict(size = 16, color = 'DarkSlateBlue'),\n                  xaxis = dict(title = 'Country', tickangle = 45),\n                  yaxis = dict(title = 'Population'))\n\nfig.show()","6f54f214":"df1 = df.sort_values(by = ['2020_population'],ascending = False).reset_index().head(20)\n\nfig = px.bar(df1,\n             x = 'country',\n             y = '2020_population',\n             color = '2020_population',\n             color_discrete_sequence = px.colors.sequential.Jet,\n             labels = {\"2020_population\":\"Population\"}\n            \n            )\n\nfig.update_layout(title = 'Top 20 countries with the most population in 2020',\n                  title_x = 0.5,\n                  title_font = dict(size = 16, color = 'Indigo'),\n                  xaxis = dict(title = 'Country'),\n                  yaxis = dict(title = 'Population')\n                 \n                 )\nfig.show()","87f6f1df":"df1 = df.sort_values(by = ['world'],ascending = False).reset_index().head(20)\n\nfig = px.pie(values = df1['world'],\n             names = df1['country'],\n             color_discrete_sequence = px.colors.sequential.thermal)\n\nfig.update_layout(title = 'The percentage of population by countries',\n                  title_x = 0.5,\n                  title_font = dict(size = 16, color = 'DarkBlue')\n                 \n                 )\nfig.show()","07efd427":"df1 = df.sort_values(by = ['growth_rate'],ascending = False).reset_index().head(20)\n\nfig = px.bar(df1,\n             x = 'country',\n             y = 'growth_rate',\n             color = 'growth_rate',\n             color_continuous_scale = 'balance',\n             labels = {\"growth_rate\":\"Growth Rate(%)\"}\n            )\nfig.update_layout(title = 'Top 20 countries with the highest growth rate',\n                  title_x = 0.5,\n                  title_font = dict(size = 16, color = 'DarkBlue'),\n                  xaxis = dict(title = 'Country'),\n                  yaxis = dict(title = 'Growth Rate(%)')\n                 \n                 )\nfig.show()","17eb3456":"df1 = df.sort_values(by = ['density_sq_km'],ascending = False).reset_index().head(20)\n\nfig = px.bar(df1, x = 'country', y = 'density_sq_km', color = 'density_sq_km',\n             color_continuous_scale = 'balance',\n             labels = {\"density_sq_km\":\"Density(per sq km)\"}\n            \n            )\n\nfig.update_layout(title = 'Top 20 countries with the highest population density',\n                  title_x = 0.5,\n                  title_font = dict(size = 16, color = 'DarkBlue'),\n                  xaxis = dict(title = 'Country'),\n                  yaxis = dict(title = 'Density(per sq km)')\n                 )\nfig.show()","8949eb7f":"fig = px.choropleth(df,\n                    locations = 'country',\n                    locationmode = 'country names',\n                    color = '2021_last_updated',\n                    hover_name = 'country',\n                    color_continuous_scale = 'twilight',\n                    labels = {\"2021_last_updated\":\"Population\"}\n                   \n                   )\n\nfig.update_layout(title = '2021',\n                  title_font = dict(size = 30, color = 'DarkSlateBlue'),\n                  title_x = 0.5,\n                  geo = dict(showframe = False,\n                             showcoastlines = False,\n                             projection_type = 'equirectangular'))\n\nfig.show()","64c7c12f":"fig = px.choropleth(df, \n                    locations = 'country',\n                    locationmode = 'country names',\n                    color = '2020_population',\n                    hover_name = 'country',\n                    color_continuous_scale = 'plasma',\n                    labels = {\"2020_population\":\"Population\"}\n                   \n                   )\n\nfig.update_layout(title = '2020',\n                  title_font = dict(size = 30, color = 'DarkSlateBlue'),\n                  title_x = 0.5,\n                  geo = dict(showframe = False,\n                             showcoastlines = False,\n                             projection_type = 'natural earth'))\n\nfig.show()","98c52ce4":"# **<font color = Teal>Importing data<\/font>**","85e93ff0":"[Link to my Kaggle](http:\/\/www.kaggle.com\/carriech)","ec01b63f":"**Please consider upvoting & checking out more of my work if you found this interesting & valuable! Thanks so much!**","f44fddf3":"# **<font color = Teal>Thank you for reading!<\/font>**","122cc412":"# **<font color = Teal>Data analysis<\/font>**","1d81ee83":"# **<font color = Teal>Map<\/font>**","409589a7":"**There are no missing values.**"}}