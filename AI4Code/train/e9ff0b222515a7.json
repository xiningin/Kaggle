{"cell_type":{"0685d343":"code","8e3d1d85":"code","d947efed":"code","80c0ef6e":"code","eddc7645":"code","69b9a3b0":"code","b49c472d":"markdown"},"source":{"0685d343":"! wget \"https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter02\/Resources\/test_data.npz\"\n! wget \"https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter02\/Resources\/training_data.npz\"\n! wget \"https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter02\/Resources\/test_labels.npy\"\n! wget \"https:\/\/github.com\/PacktPublishing\/Machine-Learning-for-Cybersecurity-Cookbook\/raw\/master\/Chapter02\/Resources\/training_labels.npy\"","8e3d1d85":"import numpy as np\nfrom scipy import sparse\nimport scipy\n\nX_train = scipy.sparse.load_npz(\"training_data.npz\")\ny_train = np.load(\"training_labels.npy\")\nX_test = scipy.sparse.load_npz(\"test_data.npz\")\ny_test = np.load(\"test_labels.npy\")\ndesired_FPR = 0.01","d947efed":"from sklearn.metrics import confusion_matrix\n\ndef FPR(y_true, y_pred):\n    CM = confusion_matrix(y_true, y_pred)\n    TN = CM[0][0]\n    FP = CM[0][1]\n    return FP\/ (FP + TN)\n\ndef TPR(y_true, y_pred):\n    CM = confusion_matrix(y_true, y_pred)\n    TP = CM[1][1]\n    FN = CM[1][0]\n    return TP \/ (TP + FN)\n\ndef perform_thresholding(vector, threshold):\n    return [0 if x>=threshold else 1 for x in vector]","80c0ef6e":"from xgboost import XGBClassifier\n\nclf = XGBClassifier()\nclf.fit(X_train, y_train)\nclf_pred_prob = clf.predict_proba(X_train)","eddc7645":"print(\"Probabilities look like so: \")\nprint(clf_pred_prob[0:5])\nprint()","69b9a3b0":"M = 1000\nprint(\"fitting threshold\")\nfor t in reversed(range(M)):\n    scaled_threshold = float(t) \/M\n    thresholded_prediction = perform_thresholding(clf_pred_prob[:,0], scaled_threshold)\n    print(t, FPR(y_train, thresholded_prediction), TPR(y_train, thresholded_prediction))\n    if FPR(y_train, thresholded_prediction) <= desired_FPR:\n        print()\n        print(\"Selected threshold: \")\n        print(scaled_threshold)\n        break","b49c472d":"We begin this recipe by loading in a previously featurized dataset and specifying a desired\nFPR constraint of 1% (step 1). The value to be used in practice depends highly on the\nsituation and type of file being considered. There are a few considerations to follow: if the\nfile is extremely common, but rarely malicious, such as a PDF, the desired FPR will have to\nbe set very low, for example, 0.01%.\nIf the system is supported by additional systems that will double-check its verdict without\nhuman effort, then a high FPR might not be detrimental. Finally, a customer may have a\npreference, which will suggest a recommended value. We define a pair of convenience\nfunctions for FPR and TPR in step 2\u2014these functions are very handy and reusable. Another\nconvenience function we define is a function that will take our threshold value and use it to\nthreshold a numerical vector (step 3).\nIn step 4, we train a model on the training data, and determine prediction probabilities on\nthe training set as well. You can see what these look like in step 5. When a large dataset is\navailable, using a validation set for determining the proper threshold will reduce the\nlikelihood of overfitting. Finally, we compute the threshold to be used in future\nclassification in order to ensure that the FPR constraint will be satisfied (step 6).\n"}}