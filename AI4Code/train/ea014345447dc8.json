{"cell_type":{"503d3659":"code","c362f2f1":"code","e265df07":"code","efb11d8f":"code","adf187ca":"code","17814feb":"code","34c055bd":"code","371bd8e6":"code","fd6917da":"code","40aeb92d":"code","ddd5b9df":"code","786f081b":"code","3d3f6982":"code","4472d9bc":"code","46f74e2d":"code","773f8919":"code","d7884149":"code","27056d9d":"code","a15f11a1":"code","c9a113f9":"code","52ae235d":"code","e4e7a310":"code","59edd356":"markdown","2b7490d0":"markdown","66376c6c":"markdown","d010faba":"markdown","36a79aee":"markdown","f14b788b":"markdown","3c19ca00":"markdown","6410834a":"markdown"},"source":{"503d3659":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\n%matplotlib inline\nmatplotlib.rcParams['figure.figsize'] = [8,6]\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","c362f2f1":"# Load data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ntrain_df.head()","e265df07":"# Splitting training data into X and y\ntrain_train = train_df.iloc[:,1:]\ntrain_test = train_df.iloc[:,0]","efb11d8f":"train_train.shape,train_test.shape","adf187ca":"# First lets look at our data\nsns.countplot(train_test)","17814feb":"# Normalize the data\ntrain_train = train_train \/ 255.0\ntest_df = test_df \/ 255.0","34c055bd":"# We have data in the pandas dataframe format\n# Convert it into 28 X 28 X 1 matrix, if we have color images we have to use 28 X 28 X 3\ntrain_train = train_train.values.reshape(-1,28,28,1)\ntest_df = test_df.values.reshape(-1,28,28,1)","371bd8e6":"# lets check for the first element\nprint(train_train[0])\nprint(train_test[0])","fd6917da":"train_train[0][:,:,0]","40aeb92d":"grid_size = (1,3)\nfig, axes = plt.subplots(1,3)\ni =0\nfor ax in axes:\n    ax.imshow(train_train[i][:,:,0])\n    i+=1","ddd5b9df":"# One hot encoding dependent varible\ntrain_test = to_categorical(train_test,num_classes=10)","786f081b":"# Splitting data into training set and validation set\nX_train, X_test, y_train, y_test = train_test_split(train_train,train_test,test_size = 0.2,random_state = 100)","3d3f6982":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nclassifier = Sequential()\n\n# adding 2 convolution layer and 1 maxpooling layer\nclassifier.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nclassifier.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nclassifier.add(MaxPool2D(pool_size=(2,2)))\nclassifier.add(Dropout(0.25))\n\n# adding 2 convolution layer and 1 maxpooling layer\nclassifier.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nclassifier.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nclassifier.add(MaxPool2D(pool_size=(2,2)))\nclassifier.add(Dropout(0.25))\n\nclassifier.add(Flatten())\nclassifier.add(Dense(256, activation = \"relu\"))\nclassifier.add(Dropout(0.5))\nclassifier.add(Dense(10, activation = \"softmax\"))","4472d9bc":"#Compile model\nclassifier.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","46f74e2d":"get_lr = ReduceLROnPlateau(monitor='val_acc', \n                            patience=3, \n                            verbose=1, \n                            factor=0.5, \n                            min_lr=0.00001)","773f8919":"datagen = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range = 0.1,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1\n    )\ndatagen.fit(X_train)","d7884149":"epochs = 40\nbatch_size = 100\nclassifier.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2,\n                              callbacks=[get_lr]\n                                )","27056d9d":"y_pred = classifier.predict(test_df)","a15f11a1":"y_pred = np.argmax(y_pred,axis=1)","c9a113f9":"output = pd.concat([pd.Series(range(1,28001),name=\"ImageId\"),pd.Series(y_pred,name =\"Label\")],axis = 1)","52ae235d":"output.head()","e4e7a310":"output.to_csv(\"1st_submission.csv\",index=False)","59edd356":"## Predicting results","2b7490d0":"## Get Learning Rate","66376c6c":"## Loading Data","d010faba":"## Data Augmentation","36a79aee":"## Importing Libraries","f14b788b":"## Building CNN model","3c19ca00":"## Fitting model","6410834a":"## Preparing data"}}