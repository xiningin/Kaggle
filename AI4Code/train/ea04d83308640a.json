{"cell_type":{"f6e6cb82":"code","d7470c30":"code","b3325952":"code","64e6b840":"code","412c165f":"code","5e0c5d85":"code","a73bb41b":"code","395832e9":"code","c0328fe7":"code","8aaae90e":"code","3447ad13":"code","b9bd327a":"code","75d4fc17":"code","30c04ccb":"code","862872ca":"code","34c0e84e":"code","fc4c1090":"code","ae75e7ef":"code","79ed31a6":"code","05f66cee":"code","bc7d6003":"code","48a01bf9":"code","f52c3045":"code","d0b1f3a2":"code","d588e319":"code","afb513b0":"code","1f847a7f":"code","869954f5":"code","c7f5990b":"code","a75cddf1":"code","466ae5bf":"code","852cd1e9":"code","94e7bfc3":"code","0a80699b":"markdown","86e8e964":"markdown","2c347c68":"markdown","82c0de7f":"markdown","6c73525a":"markdown","e9a0d650":"markdown","b82f7a52":"markdown","748640f8":"markdown","8db4453d":"markdown","06b9a9bd":"markdown","f15f9318":"markdown","39678a7d":"markdown","fe6b5649":"markdown","f6492b22":"markdown","5d240aae":"markdown","7c7806ff":"markdown","1587ce2c":"markdown","a6c649fa":"markdown","71959002":"markdown","8ae18c81":"markdown","c9105832":"markdown","e3880c8e":"markdown","d220bca0":"markdown","ec4a8af9":"markdown","1a922a8d":"markdown","fa23fafc":"markdown","bbf42edf":"markdown","972d55c3":"markdown","f9358c60":"markdown","abc191bc":"markdown"},"source":{"f6e6cb82":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport os\nimport tensorflow as tf\nfrom tensorflow import keras as ks\nfrom PIL import Image\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization, Lambda","d7470c30":"csv_data = pd.read_csv(\"..\/input\/pokemon-images-and-types\/pokemon.csv\")\ncsv_data.info","b3325952":"images_data = \"..\/input\/pokemon-images-and-types\/images\/images\/\"","64e6b840":"pokemon_filenames = os.listdir(images_data)\n\npnames, primary_types,secondary_types = [], [], []\nfor path in os.listdir(images_data):\n        #\u5272\u79bb\u5b9d\u53ef\u68a6\u540d\u5b57\n        pokemon_name = path.split('.')[0]\n        #\u5272\u79bb\u5b9d\u53ef\u68a6\u7b2c\u4e00\u5c5e\u6027\u548c\u7b2c\u4e8c\u5c5e\u6027\n        row = csv_data[csv_data['Name']==pokemon_name]\n        type1 = csv_data['Type1'][int(row.index.values)]\n        type2 = csv_data['Type2'][int(row.index.values)]\n        #\u589e\u6dfb\u5230\u65b0\u5217\u8868\n        pnames.append(pokemon_name.capitalize())\n        primary_types.append(type1)  \n        secondary_types.append(type2)\n#\u521b\u5efa\u65b0\u6570\u636e\npokemon_d = {'Image':pokemon_filenames, 'Pokemon':pnames, 'Primary_Type':primary_types, 'Secondary_Type':secondary_types}\npokemon_data = pd.DataFrame(pokemon_d)\n#\u67e5\u770b\u6570\u636e\npokemon_data\npokemon_data['Primary_Type'].value_counts()","412c165f":"numbers = []\nfor i in range(1,csv_data.shape[0]+1):\n    numbers.append(i)\ncsv_data['pkn'] = numbers#\u63d2\u5165\u8bc6\u522b\u5217\nIMG_DIR = '\/kaggle\/input\/pokemon-images-dataset\/pokemon\/pokemon'\nfrom os import listdir\nfrom os.path import isfile, join\nonlyfiles = [f for f in listdir(IMG_DIR) if isfile(join(IMG_DIR, f))]#\u5f97\u5230\u76ee\u5f55\u4e2d\u6240\u6709\u6587\u4ef6(\u6807\u9898)\n\nimport re\ndataframe_img = pd.DataFrame([])\nimages = []\npokemon_number = []\nfor img in onlyfiles:\n    if not re.search('-', img):\n        pkn = img.split('.')#\u5c06\u6587\u4ef6\u6807\u9898\u5b57\u7b26\u4e32\u5206\u5272\u4e3a\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u683c\u5f0f\uff0c\u5982\"['1','png']\"\n        n = re.sub(\"[^0-9]\", \"\", pkn[0])#\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u5b58\u5728\u975e\u6570\u5b57\uff0c\u5c31\u7f6e\u7a7a\n        path = str(img)\n        images.append(path)\n        pokemon_number.append(n)\ndataframe_img['Image'] = images\ndataframe_img['pkn'] = pokemon_number\ndataframe_img['pkn'] = dataframe_img['pkn'].astype(int)#\u5b57\u7b26\u4e32\u8f6c\u4e3a\u6570\u5b57\npokemon_test = csv_data.merge(dataframe_img, left_on='pkn', right_on='pkn')#\u5408\u5e76\u6587\u4ef6\npokemon_test.rename(columns={'Name':'Pokemon','Type1':'Primary_Type','Type2':'Secondary_Type'},inplace=True)\npokemon_test['Primary_Type'].value_counts()","5e0c5d85":"#\u5220\u9664\u8f93\u51fa\u6587\u4ef6\u5939\nimport shutil\nif os.path.exists('train\/'):\n    shutil.rmtree('train\/') \nif os.path.exists('test\/'):\n    shutil.rmtree('test\/') \nif os.path.exists('val\/'):\n    shutil.rmtree('val\/') \n\n#\u521b\u5efa\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\nfrom shutil import copyfile, copy2\nif not os.path.exists('train\/'):\n    os.mkdir('train\/')\nif not os.path.exists('test\/'):\n    os.mkdir('test\/')\nif not os.path.exists('val\/'):\n    os.mkdir('val\/')\n\n#\u4f9d\u636e\u5b9d\u53ef\u68a6\u7b2c\u4e00\u5c5e\u6027\u521b\u5efa\u5b50\u6587\u4ef6\u5939\nfor class_ in pokemon_data['Primary_Type'].unique():\n    if not os.path.exists('train\/'+str(class_)+'\/'):\n        os.mkdir('train\/'+str(class_)+'\/')\n    if not os.path.exists('test\/'+str(class_)+'\/'):\n        os.mkdir('test\/'+str(class_)+'\/')\n    if not os.path.exists('val\/'+str(class_)+'\/'):\n        os.mkdir('val\/'+str(class_)+'\/')","a73bb41b":"#\u5206\u5272\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\uff0c67%\u505a\u8bad\u7ec3\u96c6\uff0c33%\u505a\u9a8c\u8bc1\u96c6 \nX_train, X_val, y_train, y_val = train_test_split(\n    pokemon_data, pokemon_data['Primary_Type'],test_size=0.33, stratify=pokemon_data['Primary_Type'], random_state=0)\n#\u6d4b\u8bd5\u96c6\nX_test, y_test = pokemon_test, pokemon_test['Primary_Type']","395832e9":"#\u5c06\u5206\u5272\u51fa\u6765\u7684\u6570\u636e\u96c6\u5206\u522b\u4f9d\u636e\u7b2c\u4e00\u5c5e\u6027\u5b58\u5230\u6587\u4ef6\u5939\u4e2d\nfor image,type_  in zip(images_data +'\/' + X_train['Image'], y_train):\n    copy2(image, 'train\/'+type_)\n\nfor image,type_ in zip(IMG_DIR +'\/' + X_test['Image'], y_test):\n    copy2(image, 'test\/'+type_)\n    \nfor image,type_ in zip(images_data +'\/' + X_val['Image'], y_val):\n    copy2(image, 'val\/'+type_)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(X_val.shape)\n","c0328fe7":"datagen = ImageDataGenerator()#\u56fe\u7247\u751f\u6210\u5668\u521d\u59cb\u5316\n\ntrain = datagen.flow_from_directory('train\/')\ntest = datagen.flow_from_directory('test\/')\nval = datagen.flow_from_directory('val\/')","8aaae90e":"#\u5efa\u6a21\ndef build():\n    model = Sequential()#Sequential\u6a21\u578b\n    IMAGE_WIDTH = 256\n    IMAGE_HEIGHT = 256\n    IMAGE_CHANNELS = 3 #\u4e09\u901a\u9053\n    #\u8c03\u7528\u65b0\u5efa\u5c42\n    model.add(Lambda(lambda x: x, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\n    \n    #\u4ee5\u4e0b\u8bbe\u7f6e\u7684\u53c2\u6570\u7ecf\u8fc7\u8f83\u591a\u6b21\u6d4b\u8bd5\uff0c\u9009\u7684\u662f\u7ed3\u679c\u6700\u597d\u7684\u53c2\u6570\n    \n    #\u5377\u79ef\u5c42(\u5e26\u670932\u4e2a\u5927\u5c0f\u4e3a3 * 3\u7684\u8fc7\u6ee4\u5668\u7684\u5377\u79ef\u5c42)\uff0c\u6fc0\u6d3b\u51fd\u6570\u4e3arelu\uff0c\u5377\u79ef\u5c42\u6b65\u957f\u5747\u4e3a1\uff0c\u8fb9\u7f18\u586b\u5145padding\u4e3a\u7a7a\n    #\u5377\u79ef\u540e\u7ed3\u679c\u50cf\u7d20\u8ba1\u7b97\u4e3a\uff1a1+\uff08\u8f93\u5165\u50cf\u7d20\u5927\u5c0f-\u5377\u79ef\u6838\u5927\u5c0f+2*padding\uff09\/\u6b65\u957f\u3002\u5373\u4e3a1+\uff08256-3\uff09\/1=254\n    model.add(Conv2D(32, (3, 3), activation='relu'))\n    \n    #\u6279\u6807\u51c6\u5316\u51cf\u8f7b\u8f93\u5165\u53d8\u5316\u7684\u5f71\u54cd\uff0c\u5bf9\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u5165\u90fd\u57280\u9644\u8fd1\uff0c\u4fdd\u8bc1\u6ca1\u6709\u68af\u5ea6\u7684\u6d88\u5931\u3002\n    #\u8ba9\u6bcf\u4e00\u5c42\u7684\u503c\u5728\u6709\u6548\u7684\u8303\u56f4\u5185\u4f20\u9012\u4e0b\u53bb\uff0c\u56e0\u4e3a\u4e00\u5c42\u7684\u8f93\u51fa\u662f\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\uff0c\u4ece\u800c\u4f7f\u5f97\u6bcf\u4e00\u5c42\u7684\u8f93\u5165\u5206\u5e03\u5bf9\u4e8e\u4e0d\u540c\u6279\u6765\u8bf4\u53d8\u5316\u4e0d\u5927\n    model.add(BatchNormalization())\n    \n    #\u6c60\u5316\u6838\u4e3a3*3\uff0c\u6b65\u957f\u4e3a3\uff0c\u51cf\u5c0f\u540e\u671f\u8fd0\u7b97\u91cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u9690\u85cf\u56fe\u50cf\u7684\u7edd\u5bf9\u4f4d\u7f6e\u7279\u5f81\u3002\n    #\u8f93\u51fa\u50cf\u7d20\u8ba1\u7b97\u4e3a\uff1a1+\uff08\u8f93\u5165\u50cf\u7d20\u5927\u5c0f-\u6c60\u5316\u6838\u5927\u5c0f\uff09\/\u6b65\u957f\u3002\u5373\u4e3a1+\uff08254-3\uff09\/3=84\n    model.add(MaxPooling2D(pool_size=(3, 3)))\n    \n    #\u4f7f\u7528Dropout\uff0c\u79f0\u4e3aDropout\u7684\u6b63\u5219\u5316\u5c42\uff0c\u968f\u673a\u653e\u5f0330%\u7684\u795e\u7ecf\u5143\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002\n    model.add(Dropout(0.3))\n    \n    #\u7b2c\u4e8c\u6b21\u5377\u79ef\n    #\u5c0632\u4e2a\u56fe\u50cf\u8f6c\u4e3a64\u4e2a\u56fe\u50cf\n    model.add(Conv2D(64, (3, 3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(3, 3)))\n    model.add(Dropout(0.3))\n    \n    #\u7b2c\u4e09\u6b21\u5377\u79ef\n    #\u5c0664\u4e2a\u56fe\u50cf\u8f6c\u4e3a128\u4e2a\u56fe\u50cf\n    model.add(Conv2D(128, (3, 3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(3, 3)))\n    model.add(Dropout(0.3))\n    \n    #\u9ed8\u8ba4\u6309\u884c\u7684\u65b9\u5411\u964d\u7ef4\uff0c\u628a\u591a\u7ef4\u7684\u8f93\u5165\u4e00\u7ef4\u5316\n    model.add(Flatten())\n    #\u5168\u8fde\u63a5\u5c42(\u6839\u636e\u7279\u5f81\u7684\u7ec4\u5408\u8fdb\u884c\u5206\u7c7b,\u5927\u5927\u51cf\u5c11\u7279\u5f81\u4f4d\u7f6e\u5bf9\u5206\u7c7b\u5e26\u6765\u7684\u5f71\u54cd)\uff0c\u5171512\u4e2a\u795e\u7ecf\u5143\n    model.add(Dense(512, activation='relu'))\n    model.add(BatchNormalization())\n    #\u52a0\u516550% Dropout\n    model.add(Dropout(0.5))\n    #\u8f93\u51fa\u5c42\uff0c18\u4e2a\u795e\u7ecf\u5143\uff08\u5bf9\u5e9418\u79cd\u7b2c\u4e00\u5c5e\u6027\uff09\u7528\u4e8e\u533a\u522b18\u4e2a\u7c7b\n    #\u4f7f\u7528softmax\u6fc0\u6d3b\u51fd\u6570\u8fdb\u884c\u8f6c\u6362\uff0c\u5c06\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u8f6c\u6362\u4e3a\u9884\u6d4b\u6bcf\u4e2a\u5c5e\u6027\u7684\u6982\u7387\n    model.add(Dense(18, activation='softmax')) \n    \n    #\u67e5\u770b\u6a21\u578b\u6458\u8981\n    model.summary()\n    \n    #\u7528compile\u65b9\u6cd5\u8bbe\u7f6e\u8bad\u7ec3\u6a21\u578b\n        #loss\u6307\u5b9a\u635f\u5931\u51fd\u6570\uff0c\u672c\u591a\u5206\u7c7b\u4efb\u52a1\u6307\u5b9a\u4ea4\u53c9\u71b5\u4e3a\u635f\u5931\u51fd\u6570\n        #optimizer\u6307\u5b9a\u4f18\u5316\u65b9\u6cd5\uff0c\u9009adam\u65b9\u6cd5\uff0c\u4f7f\u8bad\u7ec3\u66f4\u5feb\u6536\u655b\uff0c\u63d0\u9ad8\u51c6\u786e\u7387\n        #metrics\u6a21\u578b\u89c2\u6d4b\u53c2\u6570\uff08\u6307\u6807\u5217\u8868\uff09\u3002\u5305\u542b\u8bc4\u4f30\u6a21\u578b\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6027\u80fd\u7684\u6307\u6807\n    model.compile(loss='categorical_crossentropy', optimizer= \"adam\", metrics=['accuracy'])\n    \n    return model\nmodel = build()\n#\u5f00\u59cb\u8bad\u7ec3\n    #epochs\u8868\u793a\u6267\u884c25\u4e2a\u8bad\u7ec3\u5468\u671f\nhistory = model.fit(train, epochs=25, validation_data=val)","3447ad13":"plt.style.use('ggplot')\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, acc, 'r', label='training_accuracy')\nplt.plot(epochs, val_acc, 'b', label='validation_accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('-----epochs--->')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, loss, 'r', label='training_loss')\nplt.plot(epochs, val_loss, 'b', label='validation_loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('----epochs--->')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","b9bd327a":"#\u9884\u6d4b\u6d4b\u8bd5\u96c6\npredict = model.predict(test)","75d4fc17":"#\u67e5\u770b\u9884\u6d4b\u7cbe\u5ea6\u60c5\u51b5\nfrom sklearn.metrics import classification_report\npredict_frame = pd.DataFrame([])\npredict_frame['category'] = np.argmax(predict, axis=-1)\nlabels = dict((v,k) for k,v in val.class_indices.items())\npredict_frame['category'] = predict_frame['category'].replace(labels)\nprint(classification_report(y_test, predict_frame['category']))","30c04ccb":"select = ['Water', 'Electric', 'Fire']\npokemon_test1 = pokemon_test[pokemon_test['Primary_Type'].isin(select)]\npokemon_data1 = pokemon_data[pokemon_data['Primary_Type'].isin(select)]\nprint(pokemon_data1['Primary_Type'].value_counts())\nprint(pokemon_test1['Primary_Type'].value_counts())","862872ca":"#\u5220\u9664\u8f93\u51fa\u6587\u4ef6\u5939\nif os.path.exists('strain\/'):\n    shutil.rmtree('strain\/')\nif os.path.exists('stest\/'):\n    shutil.rmtree('stest\/')\nif os.path.exists('sval\/'):\n    shutil.rmtree('sval\/') \n    \n#\u521b\u5efa\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\nfrom shutil import copyfile, copy2\nif not os.path.exists('strain\/'):\n    os.mkdir('strain\/')\nif not os.path.exists('stest\/'):\n    os.mkdir('stest\/')\nif not os.path.exists('sval\/'):\n    os.mkdir('sval\/')\n    \n#\u4f9d\u636e\u5b9d\u53ef\u68a6\u7b2c\u4e00\u5c5e\u6027\u521b\u5efa\u5b50\u6587\u4ef6\u5939\nfor class_ in pokemon_data1['Primary_Type'].unique():\n    if not os.path.exists('strain\/'+str(class_)+'\/'):\n        os.mkdir('strain\/'+str(class_)+'\/')\n    if not os.path.exists('stest\/'+str(class_)+'\/'):\n        os.mkdir('stest\/'+str(class_)+'\/')\n    if not os.path.exists('sval\/'+str(class_)+'\/'):\n        os.mkdir('sval\/'+str(class_)+'\/')","34c0e84e":"#\u5206\u5272\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 \nX_strain, X_sval, y_strain, y_sval = train_test_split(\n    pokemon_data1, pokemon_data1['Primary_Type'],test_size=0.33, stratify=pokemon_data1['Primary_Type'],random_state=0)\n\n#\u6d4b\u8bd5\u96c6\nX_stest, y_stest = pokemon_test1, pokemon_test1['Primary_Type']\nX_strain","fc4c1090":"#\u5c06\u5206\u5272\u51fa\u6765\u7684\u6570\u636e\u96c6\u5206\u522b\u4f9d\u636e\u7b2c\u4e00\u5c5e\u6027\u5b58\u5230\u6587\u4ef6\u5939\u4e2d\nfor image,type_  in zip(images_data +'\/' + X_strain['Image'], y_strain):\n    copy2(image, 'strain\/'+type_)\n\nfor image,type_ in zip(IMG_DIR +'\/' + X_stest['Image'], y_stest):\n    copy2(image, 'stest\/'+type_)\n    \nfor image,type_ in zip(images_data +'\/' + X_sval['Image'], y_sval):\n    copy2(image, 'sval\/'+type_)\ny_stest","ae75e7ef":"from keras.preprocessing.image import ImageDataGenerator\ndatagen1 = ImageDataGenerator()\n\nstrain = datagen1.flow_from_directory('strain\/')\nstest = datagen1.flow_from_directory('stest\/')\nsval = datagen1.flow_from_directory('sval\/')\n","79ed31a6":"#\u5efa\u6a21\ndef build1():\n    model1 = Sequential()#Sequential\u6a21\u578b\n    IMAGE_WIDTH = 256\n    IMAGE_HEIGHT = 256\n    IMAGE_CHANNELS = 3 #RGB\u4e09\u901a\u9053\n    #\u8c03\u7528\u65b0\u5efa\u5c42\n    model1.add(Lambda(lambda x: x, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\n    \n    model1.add(Conv2D(32, (3, 3), activation='relu'))\n    model1.add(BatchNormalization())\n    model1.add(MaxPooling2D(pool_size=(3, 3))) \n    model1.add(Dropout(0.3))\n    \n    model1.add(Conv2D(64, (3, 3), activation='relu'))\n    model1.add(BatchNormalization())\n    model1.add(MaxPooling2D(pool_size=(3, 3)))\n    model1.add(Dropout(0.3))\n    \n    model1.add(Conv2D(128, (3, 3), activation='relu'))\n    model1.add(BatchNormalization())\n    model1.add(MaxPooling2D(pool_size=(3, 3)))\n    model1.add(Dropout(0.3))\n    \n    model1.add(Flatten())\n    model1.add(Dense(512, activation='relu'))\n    model1.add(BatchNormalization())\n    model1.add(Dropout(0.5))\n    model1.add(Dense(3, activation='softmax'))#\u8f93\u51fa\u5c42\uff0c3\u4e2a\u795e\u7ecf\u5143\uff08\u5bf9\u5e943\u79cd\u7b2c\u4e00\u5c5e\u6027\uff09\u7528\u4e8e\u533a\u522b3\u4e2a\u7c7b \n    \n    #\u67e5\u770b\u6a21\u578b\u6458\u8981\n    model1.summary()\n    \n    model1.compile(loss='categorical_crossentropy', optimizer= \"adam\", metrics=['accuracy'])\n    \n    return model1\nmodel1 = build1()\n#\u5f00\u59cb\u8bad\u7ec3\nhistory1 = model1.fit(strain, epochs=25, validation_data=sval)","05f66cee":"plt.style.use('ggplot')\n\nacc = history1.history['accuracy']\nval_acc = history1.history['val_accuracy']\nloss = history1.history['loss']\nval_loss = history1.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, acc, 'r', label='training_accuracy')\nplt.plot(epochs, val_acc, 'b', label='validation_accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('-----epochs--->')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, loss, 'r', label='training_loss')\nplt.plot(epochs, val_loss, 'b', label='validation_loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('----epochs--->')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","bc7d6003":"#\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\npredict1 = model1.predict(stest)","48a01bf9":"#\u67e5\u770b\u5404\u79cd\u7c7b\u7684\u7cbe\u5ea6\nfrom sklearn.metrics import classification_report\npredict_frame1 = pd.DataFrame([])\npredict_frame1['category'] = np.argmax(predict1, axis=-1)\nlabels = dict((v,k) for k,v in sval.class_indices.items())\npredict_frame1['category'] = predict_frame1['category'].replace(labels)\nprint(classification_report(y_stest, predict_frame1['category']))","f52c3045":"def show_wrong_classification(y_stest, predict1, pokemon_test1):\n    tmp = pokemon_test1[pokemon_test1.index.isin(y_stest.index)]\n    fig, ax = plt.subplots(nrows=1, ncols=4, figsize=(20, 20))\n    i=0\n    for imag, true, pred in zip(IMG_DIR +'\/' + tmp['Image'], tmp['Primary_Type'], predict1):\n        if true!=pred:\n            if i < 4:\n                img = Image.open(imag)\n                fig = plt.figure()\n                ax[i].imshow(img)\n                ax[i].set_title('Actual:'+str(true)+'\\n'+'predict:'+ str(pred))\n                i+=1","d0b1f3a2":"show_wrong_classification(y_stest, predict_frame1['category'], pokemon_test1)","d588e319":"#\u67e5\u770b\u50cf\u7d20\u57283\u4e2a\u989c\u8272\u901a\u9053\u7684\u5206\u5e03\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(3,3,figsize=(15,10))\nk =0\nimport cv2\nlist_b =[]\nlist_r = []\nlist_g = []\nfrom tqdm import tqdm\nfor type_ in tqdm(pokemon_test1['Primary_Type'].unique()):\n    tmp = pokemon_test1[pokemon_test1['Primary_Type']==type_]\n    for img in IMG_DIR +'\/' + tmp['Image']:\n        img = cv2.imread(img)\n        b, g, r = cv2.split(img)\n        color = 'blue'\n        for i in b:\n            for j in i:\n                if j != 0:\n                    list_b.append(j)\n        color = 'green'\n        for i in g:\n            for j in i:\n                if j != 0:\n                    list_g.append(j)\n        color = 'red'\n        for i in r:\n            for j in i:\n                if j != 0:\n                    list_r.append(j)\n    sns.distplot(list_g, ax=axes[k, 0], color='g')\n    sns.distplot(list_b, ax=axes[k, 1], color='b')\n    sns.distplot(list_r, ax=axes[k, 2], color='r')\n    axes[k, 0].set_title('Pokemon type color channel ' + type_)\n    if type_ =='Fire':\n        list_g_f = list_g\n        list_b_f = list_b\n        list_r_f = list_r\n    elif type_=='Water':\n        list_g_w = list_g\n        list_b_w = list_b\n        list_r_w = list_r\n    else:\n        list_g_e = list_g\n        list_b_e = list_b\n        list_r_e = list_r\n    list_b =[]\n    list_r = []\n    list_g = []\n    \n    k += 1","afb513b0":"from numpy import expand_dims\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\n#\u52a0\u8f7d\u56fe\u7247\nnum=171\n\n#\u4e0a\u65b9\u6d4b\u8bd5\u96c6\u8bc6\u522b\u5206\u7c7b\u6709\u8bef\u7684\u56fe\u7247\u6807\u53f7\uff1a3\u30014\u30015\u30016\u30017\u30018  \n#\u706b\u5c5e\u6027\u8bc6\u522b\uff08\u90e8\u5206\uff09\uff1a156\u3001320  \uff0c 321\u3001322\n#\u6c34\u5c5e\u6027\u8bc6\u522b\uff08\u90e8\u5206\uff09\uff1a157\u3001117\u3001224\u3001319\u3001365\u3001367\u3001368  \uff0c 79\u3001115\u3001118\u3001119\u3001221\u3001340\n#\u96f7\u5c5e\u6027\u8bc6\u522b\uff08\u90e8\u5206\uff09\uff1a\u8bc6\u522b\u6b63\u786e\u7f16\u53f7\uff1a99\u3001100\u3001171\u3001310\u3001458\u3001513   \uff0c 24\u3001134 \n#\u6709\u7ea2\u8272\u8868\u5f81\u7684\u5176\u4ed6\u5c5e\u6027\u8bc6\u522b\u4e3a\u706b\u5c5e\u6027\u7684\u90e8\u5206\u56fe\u7247\u7f16\u53f7\uff1a128\u3001222\u3001309\u3001339\n#\u7531\u4e8e\u6a21\u578b\u7a33\u5b9a\u6027\u8f83\u5f31\uff0c\u4e0a\u8ff0\u5206\u7c7b\u7f16\u53f7\u53ef\u80fd\u4f1a\u6709\u8bef\n\nimg = Image.open(IMG_DIR +'\/' + X_test['Image'][num])#\u6253\u5f00\u8f93\u51fa\u56fe\u7247\nimg1 = load_img(IMG_DIR +'\/' + X_test['Image'][num])#\u52a0\u8f7d\u8bc6\u522b\u56fe\u7247\ndata = img_to_array(img1)\nsamples = expand_dims(data, 0)\n\n#\u8c03\u7528\u4e09\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\npredict1 = model1.predict(samples)\npredict_frame1 = pd.DataFrame([])\npredict_frame1['category'] = np.argmax(predict1, axis=-1)\nlabels = dict((v,k) for k,v in sval.class_indices.items())\n#\u9884\u6d4b\u7ed3\u679c\u548c\u771f\u5b9e\u7ed3\u679c\npredict_frame1['category'] = predict_frame1['category'].replace(labels)\npred=predict_frame1['category'][0]\ntrue=X_test['Primary_Type'][num]\n#\u5c55\u793a\nfig = plt.figure()\nplt.imshow(img)\nplt.title('Actual: ' + str(true) + '\\n' + 'Predict: ' + str(pred))","1f847a7f":"#\u5c06\u7b2c\u4e00\u5c5e\u6027\u8f6c\u4e3a\u7531\u6570\u5b57\u8868\u793a\nTYPES = {\n    0:\"Water\",\n    1:\"Electric\",\n    2:\"Fire\"}\nkey_list = list(TYPES.keys())\nval_list = list(TYPES.values())\ndef replace_type(x):\n    position = val_list.index(x)\n    return key_list[position]\n\ny_Strain = y_strain\ny_Sval = y_sval\ny_Stest = y_stest\ny_Strain = y_Strain.apply(lambda x: replace_type(x))\ny_Stest= y_Stest.apply(lambda x: replace_type(x))\ny_Sval = y_Sval.apply(lambda x: replace_type(x))\n","869954f5":"from numpy import expand_dims\n#\u660e\u5ea6\u6cd5\u56fe\u50cf\u7070\u5ea6\u5316\ndef imgGray_Lum(im1):\n    imgarray1 = np.array(im1, dtype=np.float32)#\u4ee5\u6d6e\u70b9\u578b\u8bfb\u53d6\u56fe\u50cf\u6570\u636e\n    rows = im1.shape[0]\n    cols = im1.shape[1]\n    for i in range(rows):\n        for j in range(cols):\n            imgarray1[i, j, :] = (imgarray1[i, j, 0] * 0.299 + imgarray1[i, j, 1] * 0.587 + imgarray1[i, j, 2] * 0.114)\n    return imgarray1.astype(np.uint8)#\u4fdd\u5b58\u4e3auint8\u7c7b\u578b\u56fe\u50cf\n\nbs = list()\nbs1 = list()\nbs2 = list()\n\n#\u8bad\u7ec3\u96c6\u7070\u5ea6\u5316\nfor imag,r in zip(X_strain['Image'],X_strain['Image'].index.values):\n    I = Image.open(images_data +'\/' + X_strain['Image'][r])\n    I = I.resize((256,256),Image.ANTIALIAS) #\u6539\u53d8\u56fe\u50cf\u5927\u5c0f\n    I = I.convert('RGB')\n    I = np.array(I)\n    I = imgGray_Lum(I)\n    #\u5c06n\u4e2a\u4e09\u7ef4\u6570\u7ec4\u62fc\u6210\u4e00\u4e2a\u56db\u7ef4\u6570\u7ec4\uff0c\u6b64\u5904\u6548\u679c\u4e3a\u5f97\u5230\u6570\u7ec4shape\u4e3a\uff08n,256,256,3\uff09\n    bs.append(I[np.newaxis, :])\n    data = np.concatenate(bs, axis=0)\n#\u5c06\u8bad\u7ec3\u96c6\u8f6c\u6362\u4e3a\u6570\u7ec4\u8868\u793a\nX_Strain = np.empty((data.shape[0],256,256,3))\nfor i in range(data.shape[0]):\n    X_Strain[i] = np.array(data[i])\ny_Strain = np.array(y_Strain)\n\n#\u9a8c\u8bc1\u96c6\u7070\u5ea6\u5316\nfor imag,r in zip(X_sval['Image'],X_sval['Image'].index.values):\n    Iv = Image.open(images_data +'\/' + X_sval['Image'][r])\n    Iv = Iv.resize((256,256),Image.ANTIALIAS) #\u6539\u53d8\u56fe\u50cf\u5927\u5c0f\n    Iv = Iv.convert('RGB')\n    Iv = np.array(Iv)\n    Iv = imgGray_Lum(Iv)\n    bs1.append(Iv[np.newaxis, :])\n    data1 = np.concatenate(bs1, axis=0)\n#\u5c06\u9a8c\u8bc1\u96c6\u8f6c\u6362\u4e3a\u6570\u7ec4\u8868\u793a    \nX_Sval = np.empty((data1.shape[0],256,256, 3))\nfor i in range(data1.shape[0]):\n    X_Sval[i] = np.array(data1[i])   \ny_Sval = np.array(y_Sval)\n\n#\u6d4b\u8bd5\u96c6\u7070\u5ea6\u5316\nfor imag,r in zip(X_stest['Image'],X_stest['Image'].index.values):\n    Ie = Image.open(IMG_DIR+'\/' + X_stest['Image'][r])\n    Ie = Ie.convert('RGB')\n    Ie = np.array(Ie)\n    Ie = imgGray_Lum(Ie)\n    bs2.append(Ie[np.newaxis, :])\n    data2 = np.concatenate(bs2, axis=0)\n#\u5c06\u6d4b\u8bd5\u96c6\u8f6c\u6362\u4e3a\u6570\u7ec4\u8868\u793a   \nX_Stest = np.empty((data2.shape[0],256,256,3))\nfor i in range(data2.shape[0]):\n    X_Stest[i] = np.array(data2[i])   \ny_Stest = np.array(y_Stest)\nprint(y_Stest)","c7f5990b":"#\u5efa\u6a21\ndef build2():\n    model2 = Sequential()#Sequential\u6a21\u578b\n    IMAGE_WIDTH = 256\n    IMAGE_HEIGHT = 256\n    IMAGE_CHANNELS = 3 #\u4e09\u901a\u9053\n    \n    #\u8c03\u7528\u65b0\u5efa\u5c42\n    model2.add(Lambda(lambda x: x, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\n    \n    model2.add(Conv2D(32, (3, 3), activation='relu'))\n    model2.add(BatchNormalization())\n    model2.add(MaxPooling2D(pool_size=(3, 3))) \n    model2.add(Dropout(0.3))\n    \n    model2.add(Conv2D(64, (3, 3), activation='relu'))\n    model2.add(BatchNormalization())\n    model2.add(MaxPooling2D(pool_size=(3, 3)))\n    model2.add(Dropout(0.3))\n    \n    model2.add(Conv2D(128, (3, 3), activation='relu'))\n    model2.add(BatchNormalization())\n    model2.add(MaxPooling2D(pool_size=(3, 3)))\n    model2.add(Dropout(0.3))\n    \n    model2.add(Flatten())\n    model2.add(Dense(512, activation='relu'))\n    model2.add(BatchNormalization())\n    model2.add(Dropout(0.5))\n    model2.add(Dense(3, activation='softmax'))#\u8f93\u51fa\u5c42\uff0c3\u4e2a\u795e\u7ecf\u5143\uff08\u5bf9\u5e943\u79cd\u7b2c\u4e00\u5c5e\u6027\uff09\u7528\u4e8e\u533a\u522b3\u4e2a\u7c7b \n    \n    #\u67e5\u770b\u6a21\u578b\u6458\u8981\n    model2.summary()\n    \n    #\u7a00\u758f\u7c7b\u522b\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u81ea\u52a8\u5c06\u5176\u4e2d\u4e00\u65b9\u4e0d\u662fone-hot\u8868\u793a\u7684\u6570\u636e\u8f6c\u6362\u4e3aone-hot\u8868\u793a\n    model2.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer= \"adam\", metrics=['accuracy'])\n    \n    return model2\n","a75cddf1":"model2 = build2()\nhistory2 =  model2.fit(X_Strain,y_Strain, epochs=25, validation_data=(X_Sval,y_Sval))#\u8bad\u7ec3\u6a21\u578b","466ae5bf":"#\u67e5\u770b\u51c6\u786e\u5ea6\u548c\u635f\u5931\nplt.style.use('ggplot')\nacc = history2.history['accuracy']\nval_acc = history2.history['val_accuracy']\nloss = history2.history['loss']\nval_loss = history2.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, acc, 'r', label='training_accuracy')\nplt.plot(epochs, val_acc, 'b', label='validation_accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('-----epochs--->')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, loss, 'r', label='training_loss')\nplt.plot(epochs, val_loss, 'b', label='validation_loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('----epochs--->')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","852cd1e9":"#\u5bf9\u7070\u5ea6\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b\npredict3 = model2.predict(X_Stest)\n\n#\u67e5\u770b\u5404\u79cd\u7c7b\u7684\u7cbe\u5ea6\nfrom sklearn.metrics import classification_report\npredict_frame3 = pd.DataFrame([])\npredict_frame3['category'] = np.argmax(predict3, axis=-1)\nlabels2 = dict((v,k) for k,v in sval.class_indices.items())\npredict_frame3['category'] = predict_frame3['category'].replace(labels2)\nprint(classification_report(y_stest, predict_frame3['category']))","94e7bfc3":"from keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array#\u52a0\u8f7d\u56fe\u7247\nnum = 6\n\nim = X_Stest[num]#\u6253\u5f00\u8f93\u51fa\u56fe\u7247\nsamples1 = expand_dims(im, 0)\n\n#\u8c03\u7528\u4e09\u5206\u7c7b\u7070\u5ea6\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\npredict2 = model2.predict(samples1)\npredict_frame2 = pd.DataFrame([])\npredict_frame2['category'] = np.argmax(predict2, axis=-1)\nlabels1 = dict((v,k) for k,v in sval.class_indices.items())\n#\u9884\u6d4b\u7ed3\u679c\u548c\u771f\u5b9e\u7ed3\u679c\npredict_frame2['category'] = predict_frame2['category'].replace(labels1)\npred1=predict_frame2['category'][0]\ntrue1=TYPES[y_Stest[num]]\n#\u5c55\u793a\nfig = plt.figure()\nplt.imshow(im.astype(\"uint8\"))\nplt.title('Actual: ' + str(true1) + '\\n' + 'Predict: ' + str(pred1))\n","0a80699b":"> **\u7ed3\u679c\u5206\u67901**\n* \u9a8c\u8bc1\u96c6\u51c6\u786e\u5ea6\u4e0d\u9ad8\n* \u4ece\u51c6\u786e\u5ea6\u548c\u635f\u5931\u7684\u7ebf\u6027\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\u5b58\u5728\u8fc7\u62df\u5408\u7684\u60c5\u51b5\uff0c\u5176\u53ef\u80fd\u539f\u56e0\u4e3a\u90e8\u5206\u7b2c\u4e00\u5c5e\u6027\u7c7b\u522b\u7684\u7cbe\u7075\u8f83\u5c11\uff0c\u6837\u672c\u6570\u91cf\u592a\u5c11\u3002\n* \u4ece\u6d4b\u8bd5\u96c6\u9884\u6d4b\u7cbe\u5ea6\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\u8be5\u6a21\u578b\u5bf9\u6240\u6709\u5c5e\u6027\u7684\u5206\u7c7b\u7cbe\u5ea6\u90fd\u5f88\u4f4e\uff0c\u5373\u8be5\u6a21\u578b\u4e0d\u80fd\u5f88\u597d\u7684\u5bf9\u6240\u6709\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u8fdb\u884c\u5206\u7c7b\n* \u57fa\u4e8e\u73b0\u6709\u7684\u6570\u636e\u5c1d\u8bd5\u51cf\u5c11\u5206\u7c7b\u79cd\u6570","86e8e964":"**\u8bfb\u53d6\u56fe\u50cf\u6570\u636e**","2c347c68":"\u53ef\u4ee5\u770b\u5230\u8be5\u5206\u7c7b\u6a21\u578b\u5bf9\u6c34\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u5206\u7c7b\u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u90fd\u8f83\u9ad8","82c0de7f":"**\u67e5\u770b\u51c6\u786e\u5ea6\u548c\u635f\u5931**","6c73525a":"> **\u7ed3\u679c\u5206\u67905**\n* \u5c06\u56fe\u7247\u7070\u5ea6\u5316\u540e\u8fdb\u884c\u8bad\u7ec3\uff0c\u9a8c\u8bc1\u96c6\u7684\u7684\u51c6\u786e\u5ea6\u4e0e\u672a\u8fdb\u884c\u7070\u5ea6\u5316\u65f6\u76f8\u6bd4\u964d\u4f4e\u4e86\u3002\n* \u6d4b\u8bd5\u96c6\u7684\u7cbe\u786e\u5ea6\u4e0e\u539f\u5148\u76f8\u6bd4\u7565\u6709\u6ce2\u52a8\u3002\n* \u5c06\u56fe\u7247\u7070\u5ea6\u5316\u540e\u8bad\u7ec3\u6548\u679c\u4e00\u822c\uff0c\u751a\u81f3\u4f1a\u53d8\u5dee\u3002","e9a0d650":"**\u5bfc\u5165\u5e93**","b82f7a52":"> **\u7ed3\u679c\u5206\u67902**\n* \u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\u6a21\u578b\u5c06\u90e8\u5206\u5b9d\u53ef\u68a6\u5c5e\u6027\u8bc6\u522b\u9519\u8bef\uff0c\u8bc6\u522b\u5b58\u5728\u4e00\u5b9a\u95ee\u9898\u3002\n* \u4e0d\u540c\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u8bc6\u522b\u5206\u7c7b\u6548\u679c\u5dee\uff0c\u4f46\u4ece\u89c6\u89c9\u4e0a\u5ffd\u7565\u5b83\u4eec\u7684\u52a8\u7269\u7279\u5f81\uff0c\u53ef\u53d1\u73b0\u90e8\u5206\u5b9d\u53ef\u68a6\u7684\u989c\u8272\u662f\u76f8\u4f3c\u7684\u3002\n","748640f8":"**\u5206\u5272\u6570\u636e\u96c6**","8db4453d":"**\u67e5\u770b\u90e8\u5206\u5206\u7c7b\u5931\u8d25\u7684\u5b9d\u53ef\u68a6**","06b9a9bd":"**\u5c06csv\u4e0e\u56fe\u50cf\u5bf9\u5e94**","f15f9318":"#  **Pokemon_Type_Classification**(\u5b9d\u53ef\u68a6\u7b2c\u4e00\u5c5e\u6027\u7684\u5206\u7c7b)\n \n >  **\u4ecb\u7ecd**\n    \n*     \u5b9d\u53ef\u68a6\u7cbe\u7075\u901a\u5e38\u5177\u6709\u5c5e\u4e8e\u5b83\u4eec\u5c5e\u6027\u7684\u52a8\u7269\u7279\u5f81\u548c\u663e\u773c\u7684\u989c\u8272\uff0c\u4f8b\u5982\u706b\u5c5e\u6027\u7684\u901a\u5e38\u662f\u7ea2\u8272\u7684\u3001\u8349\u5c5e\u6027\u901a\u5e38\u662f\u7eff\u8272\u7684\u3001\u6697\u5c5e\u6027\u901a\u5e38\u662f\u9ed1\u8272\u7684\u7b49\u7b49\uff0c\u56e0\u6b64\u989c\u8272\u662f\u8868\u5f81\u5b83\u4eec\u5c5e\u6027\u7684\u91cd\u8981\u7279\u5f81\uff0c\u4f46\u8fd8\u662f\u6709\u4f8b\u5916\u3002\n    \n*     \u540c\u6837\u7684\uff0c\u52a8\u7269\u7279\u5f81\u5982\u4e4c\u9f9f\u3001\u9c7c\u3001\u7fc5\u8180\u7b49\u4e5f\u8868\u5f81\u4e86\u5176\u5c5e\u6027\uff0c\u4f46\u4e5f\u6709\u4f8b\u5916\uff0c\u5b58\u5728\u6709\u4e4c\u9f9f\u7279\u5f81\u7684\u5b9d\u53ef\u68a6\u5176\u5c5e\u6027\u4e3a\u706b\u3002\n\n>  **\u672c\u6b21\u5b9e\u8df5\u8fdb\u884c\u7684\u64cd\u4f5c**\n    \n*     \u57fa\u4e8e\u5b9d\u53ef\u68a6\u7684\u7b2c\u4e00\u5c5e\u6027\u5c06\u5b9d\u53ef\u68a6\u5206\u7c7b\n*     \u5229\u7528CNN\u6a21\u578b\u5bf9\u5b9d\u53ef\u68a6\u8bad\u7ec3\u96c6\u53ca\u9a8c\u8bc1\u96c6\u8fdb\u884c\u8bad\u7ec3\uff0c\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b","39678a7d":"**\u67e5\u770b\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u5ea6\u53ca\u635f\u5931\u60c5\u51b5**","fe6b5649":"**\u5efa\u7acb\u5206\u7c7b\u6a21\u578b**\n* CNN\u5efa\u6a21\n* \u4f7f\u75283\u4e2a\u5377\u79ef\u5c42\u30012D\u8f93\u5165\u7684\u6700\u5927\u6c60\u5316\u5c42\u548c\u4e22\u5f03\u6cd5\uff08Dropout\uff09     ","f6492b22":"> **\u7ed3\u679c\u5206\u67903**\n*     \u4e09\u79cd\u5c5e\u6027\u7684\u7eff\u8272\u901a\u9053\u548c\u7ea2\u8272\u901a\u9053\u5185\u50cf\u7d20\u5206\u5e03\u76f8\u4f3c\u3002\u84dd\u8272\u901a\u9053\u662f\u5206\u5e03\u5dee\u5f02\u6700\u5927\u7684\u901a\u9053\uff0cFire\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u5728200 ~ 255\u50cf\u7d20\u503c\u4e4b\u95f4\u51fa\u73b0\u7387\u8f83\u4f4e\uff0cWater\u5c5e\u6027\u7684\u76f8\u53cd\uff0cElectric\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u50cf\u7d20\u503c\u5206\u5e03\u8f83\u4e3a\u5747\u5300\u3002\n*     \u6c34\u5c5e\u6027\u3001\u96f7\u5c5e\u6027\u548c\u706b\u5c5e\u6027\u7684\u90e8\u5206\u5b9d\u53ef\u68a6\u90fd\u6709\u8f83\u9ad8\u7ea2\u8272\u7684\u8868\u5f81\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5206\u7c7b\u8bc6\u522b\u3002","5d240aae":"**\u521b\u5efa\u65b0\u7684\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\u548c\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939**","7c7806ff":"**\u5bf9\u4e00\u5f20\u56fe\u7247\u8fdb\u884c\u8bc6\u522b**","1587ce2c":"\u4ece\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\u6539\u4e3a\u52063\u7c7b\u540e\uff0c\u5206\u7c7b\u51c6\u786e\u5ea6\u5347\u9ad8\u4e86\uff0c\u4ece0.2\u5de6\u53f3\u5347\u5230\u4e860.6-0.7\u5de6\u53f3","a6c649fa":"**\u5c1d\u8bd5\u5c06\u56fe\u50cf\u7070\u5ea6\u5316**","71959002":"**\u5efa\u7acb\u7070\u5ea6\u56fe\u7684CNN\u6a21\u578b**","8ae18c81":"**\u5c06\u6d4b\u8bd5\u96c6\u56fe\u50cf\u4e0ecsv\u6587\u4ef6\u5bf9\u5e94**","c9105832":"# **\u603b\u7ed3**\n\n* \u672c\u6b21\u5b9e\u8df5\u6240\u5efa\u7acb\u7684CNN\u6a21\u578b\u7a33\u5b9a\u6027\u8f83\u5f31\uff0c\u5bf9\u5b9d\u53ef\u68a6\u5c5e\u6027\u7684\u8bc6\u522b\u6548\u679c\u4e00\u822c\uff0c\u7279\u522b\u662f\u5bf9\u8f83\u591a\u5c5e\u6027\u7684\u8bc6\u522b\uff0c\u5176\u539f\u56e0\u53ef\u80fd\u4e3a\u6570\u636e\u6837\u672c\u8f83\u5c11\u53ca\u56fe\u7247\u672c\u8eab\u8f83\u96be\u8bc6\u522b\u3002\n* \u5bf9\u4e8e\u5b9d\u53ef\u68a6\u7684\u5c5e\u6027\u8bc6\u522b\uff0c\u5176\u989c\u8272\u7279\u5f81\u548c\u52a8\u7269\u7279\u5f81\u90fd\u5341\u5206\u91cd\u8981\uff0c\u4ece\u7070\u5ea6\u5316\u56fe\u50cf\u540e\u7684\u8bad\u7ec3\u7ed3\u679c\u770b\uff0c\u989c\u8272\u7279\u5f81\u6240\u5360\u7684\u6bd4\u91cd\u662f\u8f83\u5927\u7684\u3002\n* \u5728\u672c\u6b21\u5b9e\u8df5\u4e2d\uff0c\u5c1d\u8bd5\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\uff08\u65cb\u8f6c\u3001\u653e\u5927\u3001\u8c03\u4eae\uff09\u4f46\u6548\u679c\u4e0d\u660e\u663e\uff0c\u7ea2\u8272\u7279\u5f81\u4f1a\u5e72\u6270\u8bc6\u522b\u5206\u7c7b\u3002\n* \u4ece\u672c\u6b21\u5b9e\u8df5\u4e2d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u9700\u8981\u989c\u8272\u7279\u5f81\u53c2\u4e0e\u8bc6\u522b\u5206\u7c7b\u7684\u6570\u636e\uff0c\u5176\u6570\u636e\u5982\u4f55\u5904\u7406\u3001\u8bad\u7ec3\u6a21\u578b\u5982\u4f55\u6539\u8fdb\u662f\u9700\u8981\u8003\u8651\u7684\uff0c\u53ef\u80fd\u9700\u8981\u66f4\u591a\u7684\u6570\u636e\u96c6\u6216\u8005\u66f4\u6df1\u7684\u7f51\u7edc\u3002\n* \u7531\u4e8e\u65f6\u95f4\u6709\u9650\uff0c\u672c\u6b21\u5b9e\u8df5\u672a\u8fdb\u884c\u66f4\u6df1\u5ea6\u7684\u63a2\u7a76\uff0c\u90e8\u5206\u7ed3\u679c\u53ca\u5206\u6790\u53ef\u80fd\u4e0d\u5168\u9762\u3002","e3880c8e":"> **\u7ed3\u679c\u5206\u67904**\n* \u901a\u8fc7\u5355\u5f20\u56fe\u7247\u7684\u8bc6\u522b\u7ed3\u679c\uff0c\u53ef\u4ee5\u53d1\u73b0\u90e8\u5206\u6709\u7ea2\u8272\u8868\u5f81\u7684\u6c34\u3001\u7535\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u8bc6\u522b\u6709\u8bef\u3002\u540c\u65f6\uff0c\u90e8\u5206\u6709\u7ea2\u8272\u8868\u5f81\u7684\u5b9d\u53ef\u68a6\u8bc6\u522b\u6b63\u786e\uff08\u4e09\u79cd\u5c5e\u6027\u5747\u6709\u8bc6\u522b\u6b63\u786e\u7684\uff09\u3002\n* \u6a21\u578b\u7a33\u5b9a\u5ea6\u4e0d\u9ad8\uff0c\u6bcf\u8bad\u7ec3\u4e00\u6b21\u6a21\u578b\uff0c\u9884\u6d4b\u7684\u7ed3\u679c\u90fd\u6709\u6216\u591a\u6216\u5c11\u7684\u5dee\u522b\u3002\n* \u989c\u8272\u5bf9\u8bc6\u522b\u7ed3\u679c\u5b58\u5728\u4e00\u5b9a\u7684\u5f71\u54cd\uff0c\u4f46\u53c8\u4e0d\u53ef\u6216\u7f3a\u3002","d220bca0":"**\u8bad\u7ec3\u6a21\u578b**","ec4a8af9":"**\u5bf9\u7070\u5ea6\u6d4b\u8bd5\u96c6\u8fdb\u884c\u9884\u6d4b**","1a922a8d":"**\u8bfb\u53d6csv\u6587\u4ef6\uff0c\u9884\u89c8\u6570\u636e**","fa23fafc":"**\u67e5\u770b\u5355\u5f20\u7070\u5ea6\u56fe\u7247\u7684\u8bc6\u522b\u60c5\u51b5**","bbf42edf":"**\u5206\u5272\u6570\u636e\u96c6**","972d55c3":"> **\u7ed3\u679c\u5206\u67906**\n* \u5c06\u56fe\u7247\u7070\u5ea6\u5316\u540e\u8fdb\u884c\u9884\u6d4b\uff0c\u7ed3\u679c\u53d1\u73b0\uff0c\u539f\u5148\u6709\u7ea2\u8272\u7279\u5f81\u7684\u88ab\u8bc6\u522b\u4e3a\u706b\u5c5e\u6027\u7684\u6c34\u5c5e\u6027\u5b9d\u53ef\u68a6\u5927\u90e8\u5206\u90fd\u8bc6\u522b\u51c6\u786e\u4e86\uff0c\u5373\u51cf\u5c11RGB\u7684\u5f71\u54cd\u80fd\u4f7f\u6a21\u578b\u66f4\u5173\u6ce8\u4e8e\u52a8\u7269\u7279\u5f81\uff0c\u4f46\u4ecd\u6709\u90e8\u5206\u88ab\u8bc6\u522b\u4e3a\u7535\u5c5e\u6027\u3002\n* \u539f\u5148\u8bc6\u522b\u6b63\u786e\u548c\u8bc6\u522b\u9519\u8bef\u7684\u5b9d\u53ef\u68a6\uff0c\u73b0\u5728\u6709\u6b63\u786e->\u9519\u8bef\u3001\u9519\u8bef->\u6b63\u786e\u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u4e5f\u6709\u90e8\u5206\u4ecd\u7136\u8bc6\u522b\u6b63\u786e\/\u9519\u8bef\u3002\n* \u4ece\u4e0a\u8ff0\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u51cf\u5c11RGB\u7684\u5f71\u54cd\u5bf9\u6709\u660e\u663e\u7ea2\u8272\u7279\u5f81\u7684\u5b9d\u53ef\u68a6\u8bc6\u522b\u6709\u8f83\u5927\u5e2e\u52a9\uff0c\u80fd\u591f\u8f83\u6b63\u786e\u7684\u8bc6\u522b\u6c34\u548c\u7535\u5c5e\u6027\uff0c\u4f46\u540c\u65f6\u5bf9\u706b\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u8bc6\u522b\u8f83\u5dee\u3002\u5bf9\u4e8e\u90e8\u5206\u6c34\u548c\u7535\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\uff0c\u51cf\u5c11RGB\u5f71\u54cd\u5bf9\u5176\u8bc6\u522b\u5f71\u54cd\u8f83\u5c0f\uff0c\u5373\u5b83\u4eec\u7684\u5176\u4ed6\u5c5e\u6027\u4ecd\u8f83\u4e3a\u76f8\u4f3c\u3002\n* \u8be5\u6a21\u578b\u7a33\u5b9a\u6027\u4e0d\u9ad8\uff0c\u91cd\u65b0\u8fd0\u884c\u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u4f1a\u4e0e\u4e4b\u524d\u7684\u7ed3\u679c\u4e0d\u540c\u3002\n* \u989c\u8272\u548c\u52a8\u7269\u7279\u5f81\u5bf9\u5b9d\u53ef\u68a6\u7684\u5c5e\u6027\u5206\u7c7b\u90fd\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\uff0c\u5728\u8bc6\u522b\u65f6\u4f1a\u6709\u4e00\u5b9a\u56f0\u96be\u3002","f9358c60":"**\u67e5\u770b\u50cf\u7d20rgb\u901a\u9053\u5728\u706b\u3001\u6c34\u548c\u7535\u5c5e\u6027\u7684\u5b9d\u53ef\u68a6\u4e2d\u662f\u5982\u4f55\u5206\u5e03\u7684**","abc191bc":"**\u51cf\u5c11\u5206\u7c7b\u4e2a\u6570\uff0c\u5c1d\u8bd5\u8fdb\u884c\"Water\"\u3001\"Fire\"\u3001\"Electric\"\u5c5e\u6027\u7684\u5206\u7c7b**"}}