{"cell_type":{"6a65d6a5":"code","cf513e97":"code","024992a2":"code","946d28f8":"code","6ad0225e":"code","1bc2d76e":"code","c405a9bc":"code","88015e72":"code","b85acd9c":"code","f6e8e77a":"code","2c9ef7b0":"code","9c4b60b3":"code","47b304ae":"code","15335964":"code","75278a35":"code","2bfe6994":"code","da5f9c89":"code","f4ec863d":"code","e373f5af":"code","86cc0b28":"code","f48530bb":"code","f633cb0c":"code","e7222bc0":"code","62eed403":"code","9c4c3434":"markdown"},"source":{"6a65d6a5":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np","cf513e97":"images = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train'","024992a2":"folders = os.listdir(images)\nprint(folders)","946d28f8":"image_data = []\nlabels = []","6ad0225e":"label_dict = {\n    'PNEUMONIA':0,\n    'NORMAL':1   \n}","1bc2d76e":"from keras.preprocessing import image\n\nfor ix in folders:\n    path = os.path.join(images,ix)\n    for im in os.listdir(path):\n        img = image.load_img(os.path.join(path,im),target_size=((224,224)))\n        img_array = image.img_to_array(img)\n        image_data.append(img_array)\n        labels.append(label_dict[ix])","c405a9bc":"print(len(image_data),len(labels))","88015e72":"import random\ncombined = list(zip(image_data,labels))\nrandom.shuffle(combined)\nimage_data[:],labels[:]=zip(*combined)","b85acd9c":"print(labels)","f6e8e77a":"x_train = np.array(image_data)\ny_train = np.array(labels)\n\nprint(x_train.shape,y_train.shape)","2c9ef7b0":"from keras.utils import np_utils\n\ny_train = np_utils.to_categorical(y_train)\nprint(x_train.shape,y_train.shape)","9c4b60b3":"from keras.preprocessing.image import ImageDataGenerator","47b304ae":"augment = ImageDataGenerator( \n                              rotation_range=20,\n                              width_shift_range=0.01, \n                              height_shift_range=0.01, \n                              horizontal_flip=False, \n                              vertical_flip=False,\n                            )\naugment.fit(x_train)","15335964":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.regularizers import l2","75278a35":"\nmodel = Sequential()\n\n\nmodel.add(Conv2D(filters=16, kernel_size=(3,3),input_shape=(224,224,3), activation='relu',kernel_regularizer=l2(0.01)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=(224,224,3), activation='relu',kernel_regularizer=l2(0.01)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(224,224,3), activation='relu',kernel_regularizer=l2(0.01)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(224,224,3), activation='relu',kernel_regularizer=l2(0.01)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(224))\nmodel.add(Activation('relu'))\n\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(2))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\nfilepath=\"covid_detection.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=2, save_best_only=True, mode='min',patience=3)\ncallbacks_list = [checkpoint]","2bfe6994":"model.summary()","da5f9c89":"hist = model.fit(x_train,y_train,\n                    batch_size=32,\n                    epochs = 25,\n                    validation_split = 0.10,callbacks=callbacks_list)","f4ec863d":"plt.figure(1, figsize = (15, 5))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot( hist.history[\"loss\"], label = \"Training Loss\")\nplt.plot( hist.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot( hist.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot( hist.history[\"val_accuracy\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()\nplt.show()","e373f5af":"\ntest_images = \"..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\"\n\ntest_image_data = []\ntest_labels = []\n\ntest_folders = os.listdir(test_images)\nprint(test_folders)\n\nlabel_dict = {\n    'PNEUMONIA':0,\n    'NORMAL':1\n}\n\nfrom keras.preprocessing import image\n\nfor ix in test_folders:\n    path = os.path.join(test_images,ix)\n    for im in os.listdir(path):\n        img = image.load_img(os.path.join(path,im),target_size = ((224,224)))\n        img_array = image.img_to_array(img)\n        test_image_data.append(img_array)\n        test_labels.append(label_dict[ix])\n        \n\ncombined = list(zip(test_image_data,test_labels))\ntest_image_data[:],test_labels[:] = zip(*combined)\n\nx_test = np.array(test_image_data)\ny_test = np.array(test_labels)\n\nfrom keras.utils import np_utils\n\ny_test = np_utils.to_categorical(y_test)\nprint(x_test.shape,y_test.shape)","86cc0b28":"model.evaluate(x_test,y_test)","f48530bb":"from sklearn.metrics import classification_report,confusion_matrix","f633cb0c":"predictions = model.predict(x_test, batch_size = 32)\npred = np.argmax(predictions, axis=1)","e7222bc0":"print(classification_report(test_labels, pred))","62eed403":"print(confusion_matrix(test_labels, pred))","9c4c3434":"# Done"}}