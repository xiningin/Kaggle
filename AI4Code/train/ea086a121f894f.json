{"cell_type":{"180d939e":"code","2b40974a":"code","73ccfb7f":"code","1a1e3d4b":"code","b8a0c2f8":"code","5022fc67":"code","88a7367b":"code","5f6b8589":"code","aba13694":"code","da8f4e70":"code","4c644f55":"code","f6406c16":"code","9490b754":"code","24fe1d36":"code","56791145":"code","9138fcba":"code","a9c53cd7":"code","bc9d910e":"code","b2ebf92e":"code","92e9b290":"code","9a52d299":"code","890c194f":"code","4bb8eb14":"code","b9f28a24":"code","0498b8ef":"code","d9a36079":"code","324d6ecd":"markdown","e65ebb6f":"markdown","0525a036":"markdown","ce02181d":"markdown","b3136b2b":"markdown","c17dd7c9":"markdown","ec3be506":"markdown","fda2ea6b":"markdown","2cd1199f":"markdown","c2cf7d0e":"markdown","54999353":"markdown","d79ee7d9":"markdown","76341f03":"markdown","bc8432b0":"markdown"},"source":{"180d939e":"import pandas as pd","2b40974a":"train_df = pd.read_csv('..\/input\/siim-covid19-preprocessed-datasettrain\/train_full_info.csv')\ntrain_df.head()","73ccfb7f":"train_df.drop(columns=['Unnamed: 0'], inplace=True)","1a1e3d4b":"train_df[train_df.OpacityCount == 1]","b8a0c2f8":"train_df[train_df.OpacityCount == 1]['path']","5022fc67":"img_path_array = train_df[train_df.OpacityCount == 1]['path'].values\nimg_path_array[:5]","88a7367b":"import matplotlib.pyplot as plt\nimport numpy as np","5f6b8589":"plt.imread(img_path_array[1]).shape","aba13694":"np.empty((256,256),dtype=int)","da8f4e70":"len(img_path_array)","4c644f55":"imgs = []\ni = 0\nfor path in img_path_array:\n    imgs.append(plt.imread(path))\n    i+=1\n    if i % 100 == 0:\n        print('{}\/{}'.format(i,len(img_path_array)))\n    elif i == len(img_path_array):\n        print('{}\/{} - done!'.format(i,len(img_path_array)))","f6406c16":"X_train = np.array(imgs)\nX_train.shape","9490b754":"X_train = X_train[:,:,:,np.newaxis]\nX_train.shape","24fe1d36":"train_df[train_df.OpacityCount==1].iloc[:,-4:].apply(lambda x : x.str.strip('[]'))","56791145":"remove_brk_y = train_df[train_df.OpacityCount==1].iloc[:,-4:].apply(lambda x : x.str.strip('[]'))\nfor col in remove_brk_y.columns:\n    remove_brk_y[col] = remove_brk_y[col].astype('float')","9138fcba":"remove_brk_y.info()","a9c53cd7":"Y_train = np.array(remove_brk_y)\nY_train.shape","bc9d910e":"from sklearn.model_selection import train_test_split\nX_train, X_valid, Y_train, Y_valid = train_test_split(\n    X_train, Y_train, test_size=0.3, random_state=42)","b2ebf92e":"print('Shape of X_train : ', X_train.shape)\nprint('Shape of Y_train : ', Y_train.shape)\nprint('Shape of X_valid : ', X_valid.shape)\nprint('Shape of Y_valid : ', Y_valid.shape)\n","92e9b290":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dropout, Dense\n\nmodel = Sequential([\n    Conv2D(16,(3,3),activation='relu',input_shape=(256,256,1)),\n    MaxPooling2D(2,2),\n    Conv2D(32,(3,3),activation='relu'),\n    MaxPooling2D(2,2),\n    Conv2D(64,(3,3),activation='relu'),\n    MaxPooling2D(2,2),\n    Conv2D(128,(3,3),activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dropout(0.5),\n    Dense(128,activation='relu'),\n    Dense(32,activation='relu'),\n    Dense(4,activation='linear')\n])","9a52d299":"model.summary()","890c194f":"model.compile(optimizer='adam',loss='mse',metrics=['mae'])","4bb8eb14":"from tensorflow.keras.callbacks import ModelCheckpoint","b9f28a24":"filepath = 'my_checkpoint.ckpt'\ncp = ModelCheckpoint(\n    filepath=filepath,\n    save_weights_only=True,\n    save_best_only=True,\n    monitor='val_loss',\n    verbose=1\n)","0498b8ef":"model.fit(\n    X_train, Y_train,\n    validation_data=(X_valid,Y_valid),\n    epochs=12,\n    callbacks=[cp]\n)","d9a36079":"model.load_weights(filepath)\nmodel.evaluate(X_valid, Y_valid)","324d6ecd":"---\nIf there are any mistakes, please feel free to give feedback! Thank you!","e65ebb6f":"## Step 3. Modeling","0525a036":"### 1-b. extract image paths","ce02181d":"## Step 2. Load Image Dataset","b3136b2b":"### 3-c. Training","c17dd7c9":"### 3-b. Modeling","ec3be506":"### 1-a. extract data with only one opacity","fda2ea6b":"> index\n```\nStep 1. Load Train Data Table\n     1-a. extract data with only one opacity\n     1-b. extract image paths\nStep 2. Load Image Dataset\n     2-a. Data Preprocessing\nStep 3. Modeling\n     3-a. Train-valid split\n     3-b. Modeling\n     3-c. Training\n     3-d. Evaluation\n ```","2cd1199f":"## Step 1. Load Train Data Table","c2cf7d0e":"\nThis model trains on data with only one opacity.\n\nThe X matrix consists of the image and the Y matrix consists of 4 borders, i.e. 4 coordinate vectors, that make up the box that detects opacity.\n\nWe will deal with multi output regression through this simple learning.","54999353":"### 2-a. Data Preprocessing","d79ee7d9":"### 3-d. Evaluation","76341f03":"# SIIM: Step-by-Step Image Detection for Beginners\n## Part 4(mini). Multi-Output Regression\n\n\ud83d\udc49 Part 1. [EDA to Preprocessing](https:\/\/www.kaggle.com\/songseungwon\/siim-covid-19-detection-10-step-tutorial-1)\n\n\ud83d\udc49 Part 2. [Basic Modeling - Simplest Image Classification Models using Keras](https:\/\/www.kaggle.com\/songseungwon\/siim-covid-19-detection-10-step-tutorial-2)\n\n\ud83d\udc49 Part 3(mini). [Preprocessing for Multi-Output Regression that Detect Opacities](https:\/\/www.kaggle.com\/songseungwon\/siim-covid-19-detection-mini-part-preprocess)","bc8432b0":"### 3-a. Train-valid split"}}