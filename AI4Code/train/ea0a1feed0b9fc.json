{"cell_type":{"2a45a84b":"code","053e45db":"code","a8c4dd88":"code","6dcf134c":"code","f87a3399":"code","96994d47":"code","5c2919fd":"code","769f3969":"code","380911e8":"code","a5fdc02d":"code","4b3dbba5":"code","da3b542a":"code","407935ae":"code","ac1d1c30":"code","ac0a79dc":"code","b505c17e":"code","12e6e117":"code","8686b1cf":"code","68d99a88":"code","e6f4ffbf":"code","d0dd7b30":"code","e3631463":"code","51fe2a44":"code","33dbec0d":"code","55b5d663":"code","25cbc01e":"code","f8c609e4":"code","20634b9a":"code","da910ec5":"code","1fe7a7af":"code","55278ece":"code","45cf976a":"code","22a47d73":"code","170ff2fa":"code","3c7321ba":"code","7a0742f3":"markdown","bdb639db":"markdown","9a815bd1":"markdown","eb99154d":"markdown","cc70b83f":"markdown","97eab37a":"markdown","e8e9d420":"markdown","7524dfc7":"markdown","d48e78dc":"markdown","7d25f4d7":"markdown","990afd22":"markdown","197e30aa":"markdown","238d8f45":"markdown","9cfaa666":"markdown","ff411810":"markdown","cde0f461":"markdown","f2e9a68e":"markdown","4c762779":"markdown","a898ef4a":"markdown","5721e20b":"markdown","d389571c":"markdown","4afb89bf":"markdown","1ce19b75":"markdown","67a20385":"markdown","3c845a48":"markdown"},"source":{"2a45a84b":"import numpy as np\nimport pandas as pd\npd.options.display.max_rows = None \npd.options.display.float_format = '{:,.5f}'.format\n\nimport re\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = [15, 25]","053e45db":"all_comp = pd.read_csv('\/kaggle\/input\/evolution-of-rubiks-cube-solve-times\/all_comp.csv')\nbest_singles = pd.read_csv('\/kaggle\/input\/evolution-of-rubiks-cube-solve-times\/best_singles.csv')\nbest_averages = pd.read_csv('\/kaggle\/input\/evolution-of-rubiks-cube-solve-times\/best_averages.csv')","a8c4dd88":"all_comp.describe().T","6dcf134c":"all_comp.columns","f87a3399":"all_comp.head(10)","96994d47":"all_comp['date'] = all_comp['date'].replace(to_replace =' - \\d{1,2}', value = '', regex = True)\nall_comp['date'] = all_comp['date'].replace(to_replace ='- [A-z]{3} \\d{1,2}', value = '', regex = True)","5c2919fd":"all_comp['date'] = pd.to_datetime(all_comp['date'])","769f3969":"all_comp['name'] = all_comp['name'].replace(to_replace =' \\d{4}', value = '', regex = True)","380911e8":"countries = list()\ncities = list()\nfor country in all_comp['country']:\n    countries += [country.split(', ')[0]]\n    cities += [country.split(', ')[1]]\nall_comp['country'] = countries\nall_comp['city'] = cities","a5fdc02d":"all_comp = all_comp[['date', 'name', 'country', 'city', 'venue']]","4b3dbba5":"all_comp.head(10)","da3b542a":"best_singles.describe().T","407935ae":"best_singles.columns","ac1d1c30":"best_singles.head(10)","ac0a79dc":"best_singles['year'] = best_singles['competition'].str[-5:]\nbest_singles['competition'] = best_singles['competition'].str[:-5]","b505c17e":"best_singles = best_singles[['rank', 'name', 'time', 'country', 'competition', 'year']]","12e6e117":"best_singles.head(10)","8686b1cf":"fig, ax = plt.subplots(figsize=(12, 6))\nax = sns.histplot(data = best_singles[['time']])\nax.set_title('Solve time distribution')\nplt.show()","68d99a88":"singles = best_singles['country'].value_counts().rename_axis('country').reset_index(name='counts')\nfig, ax = plt.subplots(figsize=(12, 16))\nax = sns.barplot(x = 'counts', y = 'country', data = singles)\nax.set_title('Times country participated in different competitions')\nplt.show()","e6f4ffbf":"singles_mean = best_singles.groupby('country').time.agg(['mean']).reset_index().sort_values(by = 'mean')\nfig, ax = plt.subplots(figsize=(12, 16))\nax = sns.barplot(x = 'mean', y = 'country', data = singles_mean)\nax.set_title('Average time for each country participated, sorted by time, sec')\nplt.show()","d0dd7b30":"singles_min = best_singles.groupby('country').time.agg(['min']).reset_index().sort_values(by = 'min')\nfig, ax = plt.subplots(figsize=(12, 16))\nax = sns.barplot(x = 'min', y = 'country', data = singles_min)\nax.set_title('Best time for each country participated, sorted by time, sec')\nplt.show()","e3631463":"singles_country_time_agg = best_singles.groupby(['country', 'year']).time.agg(['mean']).reset_index().sort_values(by = 'year')\nfig, ax = plt.subplots(figsize=(12, 6))\nax = sns.lineplot(x = 'year', y = 'mean', data = singles_country_time_agg)\nax.set_title('Average solve time changes by year, sec')\nplt.show()","51fe2a44":"comp_count = best_singles.groupby(['year']).competition.count().reset_index().sort_values(by = 'year')\nsingles_time_agg = best_singles.groupby(['year']).time.agg(['mean']).reset_index().sort_values(by = 'year')\nfig, ax1 = plt.subplots(figsize=(12, 6))\nax1 = sns.barplot(x = 'year', y = 'competition', data = comp_count)\nax1.set_title('Yearly change of competitions number with average solve time')\nax2 = ax1.twinx()\nax2 = sns.lineplot(x = 'year', y = 'mean', data = singles_time_agg)\nplt.show()","33dbec0d":"singles_country_time_agg.sort_values(by = 'mean').head(5)","55b5d663":"top_means = singles_mean.head(8)['country'].to_list()\ntop_mins = singles_min.head(5)['country'].to_list()\ntop_10 = top_means + top_mins\nfor country in ['  Mongolia ', '  Pakistan ', '  Israel ']:\n    top_10.remove(country)\ntop_10_df = singles_country_time_agg[singles_country_time_agg['country'].isin(top_10)]\n\nfig, ax = plt.subplots(figsize=(12, 6))\nax = sns.lineplot(x ='year', y = 'mean', hue = 'country', data = top_10_df)\nax.set_title('Yearly change of mean solve time for top-10 countries*')\nplt.legend(bbox_to_anchor=(1.01, 1), borderaxespad = 0)\nplt.show()","25cbc01e":"comp_time_agg = best_singles.groupby(['competition']).year.count().sort_values(ascending = False).to_frame().reset_index()\ncomp_time_agg = comp_time_agg.rename(columns = {'year': 'counts'})\npop_comp_list = comp_time_agg[comp_time_agg['counts'] > 4].competition.to_list()\npop_comp = best_singles[best_singles['competition'].isin(pop_comp_list)]\npop_comp.groupby(['competition', 'year']).time.agg(['mean']).reset_index()","f8c609e4":"best_singles[best_singles['competition'] == '  LLS I Be\u0142\u017cyce ']","20634b9a":"for comp in ['  LLS I Be\u0142\u017cyce ', '  SSL Final Stockholm ', '  WCA Euro ', '  WCA World Championship ']:\n    pop_comp_list.remove(comp)\npop_comp = best_singles[best_singles['competition'].isin(pop_comp_list)]\npop_comp_agg = pop_comp.groupby(['competition', 'year']).time.agg(['mean']).sort_values(by = 'year').reset_index()\npop_comp_agg","da910ec5":"fig, ax = plt.subplots(figsize=(16, 6))\nax = sns.lineplot(x ='year', y = 'mean', hue = 'competition', data = pop_comp_agg)\nax.set_title('Yearly change of mean solve time for most popular competitions')\nplt.legend(bbox_to_anchor=(1.01, 1), borderaxespad = 0)\nplt.show()","1fe7a7af":"best_averages.describe().T","55278ece":"best_averages.columns","45cf976a":"best_averages.head(10)","22a47d73":"best_averages['year'] = best_averages['competition'].str[-5:]\nbest_averages['competition'] = best_averages['competition'].str[:-5]","170ff2fa":"best_averages = best_averages[['rank', 'name', 'time', 'country', 'competition', 'year']]","3c7321ba":"best_averages.head(10)","7a0742f3":"#### *I've removed Israel, Mongolia and Pakistan from this set, they participated only once and are not seen on the linechart)\n\n#### United States mean comes larger, they should work better on their results or send somebody else to those tournaments...","bdb639db":"#### Looking at this I can say one thing. There are no more or less prestigious competitions, and different players visit different events.","9a815bd1":"### How fast are the competitors?","eb99154d":"### How often did each country participate in single competition?","cc70b83f":"#### Extract year from competition","97eab37a":"#### What? I asked to show me competitions with more than 4 rows... Why this result? Maybe some of them have the same year, let's check one:","e8e9d420":"#### Leave only the date when competition started","7524dfc7":"### Yearly changes for top-10 countries (5 from best mean, 5 from the fastest)\n\n","d48e78dc":"## All competitions","7d25f4d7":"### To be continued...","990afd22":"## Best averages","197e30aa":"#### Let's split country and city\nThis column contains additional data, about county (but not in every cell) - I will delete it as unnecessary.","238d8f45":"#### Extract year from competition","9cfaa666":"#### I do not need a year in **name** column any more","ff411810":"#### The desired result. Now comes the picture.","cde0f461":"### Yearly change for most popular competitions (more than 4 rows in this dataset)","f2e9a68e":"### What happened in 2014? Let's add the number of competitions to this plot","4c762779":"#### Ok. Just the situation I was thinking about. I will drop that lonely rows.","a898ef4a":"### How did solve time change through years?\n\n#### Here the line represents average by all countries, the range shows minimum and maximum averages by year (without knowing which country did it)","5721e20b":"#### The number is just the same in 2012 and 2014, maybe the players were slower.\n\n#### Also, the effects of Covid-19 can be seen here.","d389571c":"## Best singles","4afb89bf":"### Ok, Mongolia... But who's the fastest?","1ce19b75":"### Top-5 means from all competitions","67a20385":"### What about overall average time for each country?","3c845a48":"#### Let the data in **date** column be the real date."}}