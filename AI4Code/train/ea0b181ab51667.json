{"cell_type":{"de5ba7cf":"code","b5eb9a1d":"code","b467144e":"code","59155f7a":"code","8fb3b045":"code","6835cb0b":"code","e5d5dcdc":"code","77a2f3d8":"code","82fb8398":"code","a2ba5616":"code","0c2f2dd3":"code","df46fc1c":"code","635cd4bf":"code","2c0af01b":"code","e94c9bff":"code","a85f6355":"code","99995aaa":"code","27679107":"code","7b0a377b":"code","fcb17c28":"code","79db5aa9":"code","2a5b23a8":"code","7bda4ff5":"code","fc571e6f":"code","fea742fa":"code","2333e1f3":"code","06058847":"code","1585f6bc":"code","90575d09":"code","c995e995":"code","fff61443":"code","4d3f3552":"markdown","a2787a7d":"markdown","f4e5779a":"markdown","5869bd56":"markdown","1bfbde25":"markdown","3ec01677":"markdown","9f187b94":"markdown","13decf08":"markdown"},"source":{"de5ba7cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5eb9a1d":"dfTrue = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\ndfFake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')","b467144e":"dfTrue.head()","59155f7a":"dfFake.head()","8fb3b045":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\n%matplotlib inline\n\nstpwords = set(STOPWORDS)","6835cb0b":"import re\n# generate real word list\nrealNewsWords = [str(i) for i in dfTrue['title']]\nrealWordsString = (\" \".join(realNewsWords)).lower()\nrealWordsString = re.sub(r'[^\\w\\s]', '', realWordsString)","e5d5dcdc":"# Generate Word cloud\nwc = WordCloud(width = 800, height = 800,\n               stopwords = stpwords,\n              background_color = 'white').generate(realWordsString)\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wc); \nplt.axis(\"off\");","77a2f3d8":"# Generate Fake word list\nfakeNewsWords = [str(i) for i in dfFake['title']]\nfakeWordsString = (\" \".join(fakeNewsWords)).lower()\nfakeWordsString = re.sub(r'[^\\w\\s]', '', fakeWordsString)\n\n# generate Word cloud\nwc = WordCloud(width = 800, height = 800,\n               stopwords = stpwords,\n              background_color = 'white').generate(fakeWordsString)\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wc); \nplt.axis(\"off\");","82fb8398":"# get the column names\ndfFake.columns","a2ba5616":"# Transform the  Fake dataset\nfakeData = dfFake.drop(['text', 'subject', 'date'], axis = 1)\nfakeData['Prediction'] = pd.Series([0]*len(fakeData))\nfakeData.head()","0c2f2dd3":"# Transform the real dataset\nrealData = dfTrue.drop(['text', 'subject', 'date'], axis = 1)\nrealData['Prediction'] = pd.Series([1]*len(realData))\nrealData.head()","df46fc1c":"# generate the data\ndata = pd.concat([realData, fakeData], axis = 0, ignore_index = True)","635cd4bf":"# top of data has real news\ndata.head()","2c0af01b":"# bottom has fake news\ndata.tail()","e94c9bff":"import nltk\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')","a85f6355":"### cleans the text\ndef clean_text(text):\n    ''' Cleans the text data, then returns a list of words'''\n    ps = PorterStemmer()  # Stemmer\n    clean_text = text.lower()  # make all into lower case\n    clean_text = re.sub('[^A-Za-z\\s]+', ' ', clean_text) # remove punctuations and numbers\n    clean_text = clean_text.split() # list of words\n    clean_text = [ps.stem(word) for word in clean_text if not word in stopwords.words('english')] # Stopword removal\n    clean_text = ' '.join(clean_text)\n    \n    return clean_text","99995aaa":"clean_text(\"this is 43 ? i though DONAld troops is missing values sunshine!\")","27679107":"X = data.iloc[ : , :-1]\ny = data.iloc[ : , -1]\ny.head()  # Separating into dependant and independent features\nX.head()","7b0a377b":"import tensorflow as tf\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense","fcb17c28":"newsCorpus = [clean_text(text) for text in X['title']]","79db5aa9":"len(newsCorpus)","2a5b23a8":"# Defined vocabulary size\nvocabSize = 6000","7bda4ff5":"# One hot representation of all the news articles\none_hot_news = [one_hot(text, vocabSize) for text in newsCorpus]\none_hot_news[:5]","fc571e6f":"# Get max length\nmax([len(vec) for vec in one_hot_news])","fea742fa":"# Pad the sentences, make fixed length\nmax_length = 40\nembedded_news = pad_sequences(one_hot_news, padding = 'pre', maxlen = max_length)\nembedded_news[:5]","2333e1f3":"embedding_features_length = 40\nfrom tensorflow.keras.layers import Dropout\nmodel = Sequential()\nmodel.add(Embedding(vocabSize, embedding_features_length, input_length = max_length))\nmodel.add(Dropout(0.4))\nmodel.add(LSTM(120))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1, activation = 'sigmoid'))","06058847":"#Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nprint(model.summary())","1585f6bc":"# Train test Split\nfrom sklearn.model_selection import train_test_split\n\nX = np.array(embedded_news)\ny = np.array(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 40)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","90575d09":"# Fit the model\n# Now we fit the model\nmodel.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 5, batch_size = 64)","c995e995":"y_pred = model.predict_classes(X_test)","fff61443":"from sklearn.metrics import confusion_matrix\nmat = confusion_matrix(y_test, y_pred)\nimport seaborn as sns\nsns.heatmap(data = mat, annot = True)","4d3f3552":"# Fake or not?\nIn this notebook, let us predict if we have a fake news article in our hands or not. \nFake news is a menace, let us create some ways to battle it.","a2787a7d":"## 2. Fake","f4e5779a":"As maximum length is 35, so a vector size of 40 would be enough\n\nPadding ensures that all news articles are of the same length. This ensures that input to the neural network are all of the same length","5869bd56":"# Preprocessing","1bfbde25":"# Information about the dataset\nThe data is in two parts.\n\n1. True.csv - true articles\n2. Fake.csv - Fake articles","3ec01677":"# EDA","9f187b94":"## Modelling Start","13decf08":"## 1. Real News"}}