{"cell_type":{"31913f89":"code","a0f8bae0":"code","ae2a91c4":"code","c278cc39":"code","ac4e7fb4":"code","b8664e81":"code","c3301990":"code","ee179e86":"code","740a531c":"code","f4831d00":"code","38c8acd9":"code","3ac805e0":"code","ae55b7aa":"code","15d65d43":"code","14f5662f":"code","64ab5725":"code","7e97c83a":"markdown","69fe8b06":"markdown","bdd79937":"markdown","c60eb628":"markdown","5b366d54":"markdown","8638eaba":"markdown","4475cf30":"markdown","4252a7b6":"markdown"},"source":{"31913f89":"import pandas as pd\nimport numpy as np\nimport calendar\nfrom datetime import datetime, timedelta\nfrom collections import Counter\nimport base64\nfrom datetime import datetime\nfrom datetime import timedelta\n\nimport seaborn as sns\n#pal_hls = sns.hls_palette(100, l=.3, s=.8).as_hex() # Seaborn Color Palette for colors\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n#sns.set_style('darkgrid')\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\nimport plotly.graph_objects as go\ninit_notebook_mode()\n\n# Ignore Warnings\nimport warnings\n#warnings.filterwarnings(\"ignore\")\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n############################################################\n### https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2022\/data ###\n############################################################","a0f8bae0":"games_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\n\nprint(f\"NaN check:\\n\\n{games_df.isna().sum()} \\n\\nData shape :\\n{games_df.shape}\")\n\n# Renaming the columns, casting the Date & Time ones as DateTime objects\n\ngames_df.rename(columns={'gameDate' : \"Date\", 'gameTimeEastern' : \"Time\", 'homeTeamAbbr' : \"Home Team\", 'visitorTeamAbbr' : \"Visitor Team\"}, inplace=True)\ngames_df.columns = [i.title() for i in games_df.columns]\n\ngames_df[\"Date\"] = pd.to_datetime(games_df[\"Date\"])\ngames_df[\"Day\"] = games_df[\"Date\"].apply(lambda x : calendar.day_name[x.weekday()])","ae2a91c4":"visitors = sorted(dict(games_df[\"Visitor Team\"].value_counts()).items())\nhome = sorted(dict(games_df[\"Home Team\"].value_counts()).items())\n\nfor a, b, c, d in zip((i[0] for i in visitors), (i[1] for i in visitors), (i[0] for i in home), (i[1] for i in home)):\n    if b > d:\n        print(f\"{a} played {abs(b-d)} more game as a visitor\")\n    elif b < d:\n        print(f\"{a} played {abs(b-d)} more game at home\")        \n","c278cc39":"fig = px.histogram(data_frame=games_df, \n        x=\"Day\", \n        color=games_df[\"Time\"].apply(lambda x : x[:-3]),\n        labels={\"color\" : \"Time :\"}    # to change the legend title\n        )\n\nfig.update_traces(hovertemplate='<br>Total : <b>%{y:.0f}<br><\/b>' +\n                                '<br>Date : <b>%{x}<br><\/b>',\n                  )\n\nfig.update_yaxes(title=\"Count\")                                                                                  \nfig.update_xaxes(categoryorder='total descending')\n\nfig.update_layout(\n    title=f\"<b> Game day distribution and their start time <\/b><br><sup>{len(games_df['Gameid'].unique())} games in total<sup>\",\n    title_x=0.5,\n    showlegend=True,\n    paper_bgcolor=\"darkgray\", \n    barmode=\"stack\"\n    )\n\nfig.show()","ac4e7fb4":"players_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/players.csv\")\n\nplayers_df[\"birthDate\"] = pd.to_datetime(players_df[\"birthDate\"])","b8664e81":"# Some of the heights are in inches only, some in foot \/ inch\n\nfor i in range(len(players_df)):\n    _height = players_df[\"height\"][i][:]\n    if '-' in _height:\n        _height_split = _height.split('-')\n        new_height = (int(_height_split[0]) * 30.48 +  int(_height_split[1]) * 2.54)\n    else:\n        new_height = int(_height) * 2.54\n    \n    players_df.loc[i, \"height\"] = new_height  # PROPER WAY OF INSERTING DATA TO AVOID SETTING SLICE COPY WARNING\n\nplayers_df[\"weight\"] = round(players_df[\"weight\"] * 0.453592, ndigits=2)\nplayers_df[\"height\"] = players_df[\"height\"].astype(\"float\")\n\nposition_dic = {\"T\" : \"Tackle\", \"OT\" : \"Offensive tackle\",\n                \"TE\" : \"Tight end\", \"G\" : \"Guard\",\n                \"OG\" : \"Offensive guard\", \"DE\" :\"Defensive ends\", \n                \"C\" : \"Center\", \"QB\" : \"QuarterBack\", \n                \"DT\" : \"Defensive tackle\", \"NT\" : \"Nose tackle\", \n                \"LS\" : \"Long snapper\", \"OLB\" : \"Outside linebacker\", \n                \"P\" : \"Punter\", \"LB\" : \"Linepacker\", \n                \"ILB\" : \"Inside linebacker\", \"MLB\" : \"Middle linebacker\", \n                \"FB\" : \"Fullback\", \"WR\" : \"Wide receiver\", \n                \"DB\" : \"Defensive back\", \"SS\" : \"Strong safety\",\n                \"FS\" : \"Free safety\", \"S\" : \"Safety\", \"K\" : \"Kicker\", \n                \"CB\" : \"Cornerback\", \"RB\" : \"Running back\", \"HB\" : \"Halfback\"\n                 }\n\nplayers_df[\"Position\"] = players_df[\"Position\"].apply(lambda x : position_dic[x])","c3301990":"# Some D.O.B are missing, i gotta use try \/ except to avoid having my code crash on NaN values\n\nfor i in range(len(players_df)):\n    try:\n        _d_o_b = players_df[\"birthDate\"][i]\n        _delta = datetime.now() - _d_o_b\n        _year_old = int(_delta.total_seconds() \/\/ (365.25*24*60*60))\n        players_df.loc[i, \"age\"]  = _year_old\n    except:\n        pass","ee179e86":"_weight_mean = round(players_df.pivot_table(values='weight', index='Position', aggfunc='mean').reset_index(), ndigits=2)\n_height_mean = round(players_df.pivot_table(values='height', index='Position', aggfunc='mean').reset_index(), ndigits=2)\n_age_mean = round(players_df.pivot_table(values='age', index='Position', aggfunc='mean').reset_index(), ndigits=2)\n\nh_w_df = pd.concat(\n    (_each_df.set_index('Position') for _each_df in [_height_mean, _weight_mean, _age_mean]),\n    axis=1, join='inner').reset_index()\n\nh_w_df.sort_values(by=\"height\", ascending=False, inplace=True)\nh_w_df.reset_index(drop=True, inplace=True)\nh_w_df[\"age\"] = h_w_df[\"age\"].apply(lambda x : round(x))\nh_w_df.rename(columns={\"height\" : \"Height mean (cm)\", \"weight\" : \"Weight mean (kg)\", \"age\" : \"Age mean\"}, inplace=True)","740a531c":"fig = go.Figure(data=[\n    go.Bar(\n        x=h_w_df[\"Position\"], \n        y=h_w_df[\"Height mean (cm)\"], \n        name='Height (cm)',\n        customdata=h_w_df[\"Age mean\"],\n        hovertemplate=\"<br>\".join([\n                \"Position : <b>%{x}<\/b>\",\n                \"Height : <b>%{y}<\/b> cm\",\n                \"Age : <b>%{customdata}<\/b>\" \n            ]),\n\n        texttemplate='%{customdata}', #h_w_df[\"Position\"],\n        textposition=\"inside\"\n    ),\n    go.Bar(\n        x=h_w_df[\"Position\"], \n        y=h_w_df[\"Weight mean (kg)\"], \n        name=\"Weight (kg)\", \n        customdata=h_w_df[\"Age mean\"],\n        hovertemplate=\"<br>\".join([\n                \"Position : <b>%{x}<\/b>\",\n                \"Weight : <b>%{y}<\/b> kg\",\n                \"Age : <b>%{customdata}<\/b>\" \n            ]),\n    )\n])\n\nfig.update_layout(\n    title_text=\"<b>Players mean weight, height and age by field position<\/b><br><sup>sorted by height descending<sup>\",\n    title_x=0.5, \n    yaxis_title=\"Cm - Kg\",\n    barmode='group',\n    showlegend=True, \n    paper_bgcolor=\"darkgray\", \n    bargap=0.2,\n    bargroupgap=0.1\n)\n\ndisplay(fig, h_w_df.head(5))","f4831d00":"_first_names = [_name.split()[0] for _name in players_df[\"displayName\"]]\n\n_name_counter = Counter(_first_names) \n\n_text = \" \".join([i[0] for i in _name_counter.most_common() if 4 <= len(i[0]) <= 8])\n\nicon_path = '..\/input\/picture\/clipart1905967.png'\nicon = Image.open(icon_path)\n\n_mask = Image.new(\"RGB\", icon.size, (255, 255, 255))\n_mask.paste(icon,icon)\n_mask = np.array(_mask)\n\nwc = WordCloud(\n        background_color=\"black\", \n        max_words=300, \n        mask=_mask,\n        max_font_size=150)\n\nwc.generate_from_text(_text)\n\nplt.figure(figsize=(25,18))\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\n\nplt.show()","38c8acd9":"pd.DataFrame(_name_counter.most_common(10), columns=[\"Name\", \"Count\"])","3ac805e0":"plays_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")\ngames_df2 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\")\npffs_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv\")\n\ndf_2018 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")\ndf_2019 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv\")\ndf_2020 = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv\")\n\ndf_2018_games = df_2018[\"gameId\"].unique()\ndf_2019_games = df_2019[\"gameId\"].unique()\ndf_2020_games = df_2020[\"gameId\"].unique()","ae55b7aa":"def game_df_generator(game_id : int):\n\n    _game_info = games_df2[games_df2[\"gameId\"] == game_id].reset_index(drop=True)\n    _plays = plays_df[plays_df[\"gameId\"] == game_id].reset_index(drop=True)\n    _pffs = pffs_df[pffs_df[\"gameId\"] == game_id].reset_index(drop=True)\n\n    if game_id in df_2018_games:\n        _tracking = df_2018[df_2018[\"gameId\"] == game_id].reset_index(drop=True)\n    elif game_id in df_2019_games:\n        _tracking = df_2019[df_2019[\"gameId\"] == game_id].reset_index(drop=True)\n    elif game_id in df_2020_games:\n        _tracking = df_2020[df_2020[\"gameId\"] == game_id].reset_index(drop=True)        \n\n    game_moves = pd.merge(_plays, _pffs, on=[\"gameId\", \"playId\"])\n    game_moves = pd.merge(game_moves, _tracking, on=[\"gameId\", \"playId\"])\n    game_moves[\"time\"] = pd.to_datetime(game_moves[\"time\"])\n\n    unique_players_per_game = game_moves[\"nflId\"].dropna().astype(\"int\").unique()\n    _players_in_game = pd.DataFrame(columns=players_df.columns)\n\n    for _player_id in unique_players_per_game:\n        temp_df = players_df[players_df[\"nflId\"] == _player_id]\n        _players_in_game = pd.concat([_players_in_game, temp_df], axis=0, ignore_index=True)\n\n    if len(game_moves[\"nflId\"].dropna()) != len(game_moves[\"nflId\"]): \n        _missing_players = (f\"\"\"We are missing {len(game_moves['nflId']) - len(game_moves['nflId'].dropna())} moves, that's {round((len(game_moves['nflId']) - len(game_moves['nflId'].dropna())) * 100 \/ len(game_moves['nflId']), ndigits=2)}% of total\"\"\")\n    else:\n        _missing_players = \"\"\n\n    return _game_info, game_moves, _missing_players, _players_in_game","15d65d43":"d, e, f, g = game_df_generator(2018101406)\n\n#display(d, e, f, g)","14f5662f":"fb_ground_filename = '..\/input\/football-ground\/football_ground.png'\nfb_groud_plotly = Image.open(fb_ground_filename)\n\ndef animated_game(gameId, playId, speed):\n\n    _game_info = games_df2[games_df2[\"gameId\"] == gameId].reset_index(drop=True)\n    _home_team = _game_info[\"homeTeamAbbr\"].iloc[0]\n    _visitor_team = _game_info[\"visitorTeamAbbr\"].iloc[0]\n    _date_game = _game_info[\"gameDate\"].iloc[0]\n    _time_game = _game_info[\"gameTimeEastern\"].iloc[0]\n    \t\n\n    var_date = datetime.strptime(_date_game, '%m\/%d\/%Y')\n    _day = calendar.day_name[var_date.weekday()]\n    _month = calendar.month_name[int(_date_game[:2])]\n    _day_number = _date_game[3:5]\n\n    if str(_day_number[0]) == '0':\n        _day_number = _day_number[1:]\n    \n    if gameId in df_2018_games:\n        _tracking = df_2018[df_2018[\"gameId\"] == gameId].reset_index(drop=True)\n        temp_tracking_mask = (df_2018['gameId'] == gameId) & (df_2018['playId'] == playId)\n        _tracking_df = (df_2018[temp_tracking_mask][['x', 'y', 'time', 'nflId', 'team', 'displayName']]\n        .fillna(0.)\n        .sort_values(['team', 'time'])\n    )\n\n    elif gameId in df_2019_games:\n        _tracking = df_2019[df_2019[\"gameId\"] == gameId].reset_index(drop=True)\n        temp_tracking_mask = (df_2019['gameId'] == gameId) & (df_2019['playId'] == playId)\n        _tracking_df = (df_2019[temp_tracking_mask][['x', 'y', 'time', 'nflId', 'team', 'displayName']]\n        .fillna(0.)\n        .sort_values(['team', 'time'])\n    )\n\n    elif gameId in df_2020_games:\n        _tracking = df_2020[df_2020[\"gameId\"] == gameId].reset_index(drop=True)\n        temp_tracking_mask = (df_2020['gameId'] == gameId) & (df_2020['playId'] == playId)\n        _tracking_df = (df_2020[temp_tracking_mask][['x', 'y', 'time', 'nflId', 'team', 'displayName']]\n        .fillna(0.)\n        .sort_values(['team', 'time'])\n    )\n\n    _tracking_df[\"time\"] = _tracking_df[\"time\"].apply(lambda x : x[14:-2])\n\n    fig = px.scatter(\n        _tracking_df,\n        x='x',\n        y='y',\n        animation_frame='time',\n        color='team',\n        animation_group=\"nflId\",\n        hover_name=\"displayName\"\n    )\n\n    fig.update_traces(marker=dict(size=12,line=dict(width=2,color='DarkSlateGrey')),\n                      selector=dict(mode='markers'))\n\n    fig.update_layout(\n        title=f\"<b>{_home_team} (home) versus {_visitor_team} on {_day} the {_day_number} of {_month} at {str(_time_game)[:-3]}<\/b><br><sup>Animation of play : {playId} from game : {gameId}<sup><br> pouet\",\n        title_x=0.5, \n        autosize=False,\n        width=1000,\n        height=600,\n        images= [dict(source=fb_groud_plotly,\n                      xref=\"paper\", yref=\"paper\",x=0.01, y=1, sizex=1, sizey=1,\n                      layer=\"below\", opacity=0.8)],\n        xaxis=dict(showgrid=False),\n        yaxis=dict(showgrid=False), \n        showlegend=True, \n        paper_bgcolor=\"darkgray\", \n        margin=dict(\n                    l=20,\n                    r=20,\n                    b=50,\n                    t=50,\n                    pad=0\n                ),\n    )\n\n    fig.update_xaxes(title=\"\")                                                                                  \n    fig.update_yaxes(title=\"\")  \n    \n    fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = speed\n    \n    #print(_date_game, type(_date_game), _day, _month)\n\n    return fig #.show(\"notebook\")  ","64ab5725":"_gameId = 2018090907\n_playId = 522\n_speed = 60\n\nanimated_game(_gameId, _playId, _speed)","7e97c83a":"# 2. Players\n\nI don't know anything about American Football, there are much more players on the field at a time that i thought, what are the different positions and what kind of player occupies that position?\n\nIn order to do that i'll change all imperial system values to metric ones, calculations will be easier that way. I'll also change the positions names from abbreviations to their full names","69fe8b06":"# 3. Tracking\n\nWe have plenty of data about the players position at any given moment on the field, we can therefore recreate their movements and analyse them\n\nThe code in the cell below is inspired by the work of [JARON_MICHAL](https:\/\/www.kaggle.com\/jaronmichal\/tracking-data-visualization)\nand [DATAROHITINGOLE](https:\/\/www.kaggle.com\/datarohitingole\/nfl-data-analysis-and-plotly-animation#4.-Tracking-Data) may their names be praised for the generations to come","bdd79937":"Not all teams have played an equal amount of games at home and as visitors\n\nLet's look at the games distrbution time, what day and time is NFL usually on?","c60eb628":"Over 50% of all games (401 precisely) happened on Sundays at 1PM, 119 on Sundays at 4.25 PM and those 2 slots gather already 68% of all games","5b366d54":"# Welcome to my Kaggle notebook\n\n\nIf you like what you see please give it an upvote, and if you don't feel free to leave any constructive criticism you may have about it =)\n\nThe graphs are done with Plotly, which means that they are interactive, hover over the graph to get more details\n\n## Data inspection\n\nWe are given quite a bit of data to play with and we can join the files in different ways:\n\n* \"game\", \"PFF Scouting data\" and \"play\" csv can be joined with gameId\n* \"play\" and \"player\" on kickerId = nflId\n* \"player\" and \"tracking\" on nflId\n\nThere are probably other ways too, we should be able to find lots of insights with those different combinations","8638eaba":"Waoh some big boys out there ! We can find some useful informations for a guy like me who knows nothing about NFL:\n\n* I'd hate being chased by one Tackler ! \n* Halfback players are on average the lightest, shortest and youngest players of the team.\n* Quarterbacks and Punters need to be both tall and light !\n* Defensive and Nose Tacklers are on the other hand tall and heavy (about the same weight than Tacklers but 8 cm shorter)\n\nAnother thing that could be fun is looking at the first name frequency amongst the players","4475cf30":"## more to come !","4252a7b6":"# 1. Games\n\nLet's start by looking at the games.csv file, check for missing values etc.."}}