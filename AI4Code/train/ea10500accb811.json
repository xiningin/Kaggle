{"cell_type":{"4f1f32aa":"code","41df99c5":"code","7c3ce2f2":"code","fcb2454e":"code","436e2331":"code","9810a5c4":"code","597bd16e":"code","8694e1d5":"code","5cde4ebc":"code","50f16efb":"code","2b6f2b27":"code","e9dc6431":"code","88f68c37":"code","d9822404":"code","928936a4":"code","9aa200c1":"code","22b2c562":"code","81db8858":"markdown","7017b5c6":"markdown","9e7ace4c":"markdown","bbc56e20":"markdown","7288db09":"markdown","168b44f1":"markdown","b18eb89f":"markdown","3aa4020e":"markdown","8a28e7ae":"markdown","68a96ec8":"markdown","b9800a5d":"markdown","04834d35":"markdown","be9d0118":"markdown","d3238a16":"markdown","894daf74":"markdown","026bc997":"markdown","87a6cc9f":"markdown"},"source":{"4f1f32aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41df99c5":"import warnings\nimport gc,time\n#nlp\nimport string\nimport re    #for regex\nimport nltk\nfrom nltk.corpus import stopwords\n\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style(\"dark\")\neng_stopwords = set(stopwords.words(\"english\"))\nwarnings.filterwarnings(\"ignore\")","7c3ce2f2":"train=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')\ntest=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')\nsubmission=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')\ntest_labels=pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip')","fcb2454e":"train.head()","436e2331":"\nx=train.iloc[:,2:].sum()\nx#COLUMN wise sum\n\nfig = px.bar( x=x.index, y=x.values,\n             height=400)\nfig.show()","9810a5c4":"clean_df=train.loc[(train.toxic==0) &  (train.severe_toxic==0) &(train.obscene==0) &\n                   (train.threat==0)  &(train.insult==0) &(train.identity_hate==0)] # clean  comments\n\ntoxic_df=train.loc[(train.toxic==1)]# toxic comments\n\n#creating test set\nclean_test=clean_df.iloc[:28669]# 20percent of  total clean comments which are  approximately 144000\ntoxic_test=toxic_df.iloc[:3059]# 20percent of Toxic  comments which are approximately 15000\n\ntest_set=clean_test.append(toxic_test,ignore_index=True).sample(frac=1)# appending 2 dataframes and shuffling them\ntest_set.drop(['id','severe_toxic','obscene','threat','insult','identity_hate'],axis=1,inplace=True)\nprint(test_set.shape)\n\n#creating train set\nclean_train=clean_df.iloc[28669:]\ntoxic_train=toxic_df.iloc[3059:]\ndf=clean_train.append(toxic_train,ignore_index=True).sample(frac=1)\n\n# df=clean_df.append(toxic_df,ignore_index=1).sample(frac=1)# appending 2 dataframes and shuffling them\ndf.drop(['id','severe_toxic','obscene','threat','insult','identity_hate'],axis=1,inplace=True)\ndf.shape\n","597bd16e":"# Applying a first round of text cleaning techniques\n\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n# Applying the cleaning function to both test and training datasets\ndf['comment_text'] = df['comment_text'].apply(lambda x: clean_text(x))\ntest_set['comment_text']=test_set['comment_text'].apply(lambda x:clean_text(x))","8694e1d5":"dictionary_clean={0:'clean',1:'toxic'}\ndf['target_name']=df['toxic'].map(dictionary_clean)\ntest_set['target_name']=test_set['toxic'].map(dictionary_clean)","5cde4ebc":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.pipeline import make_pipeline\nfrom imblearn.over_sampling import  SMOTE\n\n\nsmt = SMOTE(random_state=777, k_neighbors=1)\n\nvec = TfidfVectorizer(min_df=3,max_features=10000,strip_accents='unicode',\n                     analyzer='word',ngram_range=(1,2),token_pattern=r'\\w{1,}',use_idf=1,smooth_idf=1,sublinear_tf=1,\n                     stop_words='english')\n\nvec_fit=vec.fit_transform(df.comment_text)\n\nclf = LogisticRegressionCV()\n\n\n# Over Sampling\nX_SMOTE, y_SMOTE = smt.fit_sample(vec_fit, df.toxic)\n","50f16efb":"from collections import Counter\n#we over sampled it \nprint(Counter(y_SMOTE))\n","2b6f2b27":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(C=0.1, solver='sag')\nscores = cross_val_score(clf, X_SMOTE,y_SMOTE, cv=5,scoring='f1_weighted')","e9dc6431":"scores","88f68c37":"clf.fit(X_SMOTE,y_SMOTE)","d9822404":"from sklearn import metrics\n\ndef print_report1(df):\n    y_test =  df.toxic\n    test_features=vec.transform(df.comment_text)\n    y_pred = clf.predict(test_features)\n    report = metrics.classification_report(y_test, y_pred,\n        target_names=list(df.target_name.unique()))\n    print(report)\n    print(\"accuracy: {:0.3f}\".format(metrics.accuracy_score(y_test, y_pred)))\n\nprint_report1(test_set)","928936a4":"import eli5\n# import warnings filter\nfrom warnings import simplefilter\n# ignore all future warnings\nsimplefilter(action='ignore', category=FutureWarning)\neli5.show_weights(clf, vec=vec, top=15,\n                  target_names=['clean','toxic'])\n\n#  if we got the BIAS term that occurs\n#because we are using Linear model for classification and the Intercept added to the equation is termed BIAS here\n\n","9aa200c1":"print(test_set.comment_text[0])\nprint('\\n')\nprint(test_set.toxic[0])","22b2c562":"import eli5\neli5.show_prediction(clf, test_set.comment_text[0], vec=vec,\n                     target_names=list(df.target_name.unique()),top=15)\n# it shows probability of each of  the 2 classes and then shows which features contributed the most and which\n# contributed the least in each class\n# top argument shows the  top n features that contibuted to the prediction of each class","81db8858":"# Explain me Results?\n\nSo above figure tells that green word contributed most to **Toxic** comments and **Red** words  contributed to opposite class that \n\nis **Clean comments** class","7017b5c6":"## Logistic regression","9e7ace4c":"#  LET'S <font color='yellow'>LIME<\/font>\n![](https:\/\/miro.medium.com\/max\/818\/1*Wwjnrq1G3e7_BCsN2BD06A.png)\n","bbc56e20":"### VERY IMPORTANT\nwhenever we use  Logistic regressionin  for  2 columns it treats it as Binary problem  hence we  get 1  table\n\nhttps:\/\/stackoverflow.com\/questions\/51659523\/eli5-show-weights-with-two-labels","7288db09":"#  Let's Break It?\n\n## What is <font color='red'>LOCAL<\/font>?\n\n### Why did the model make a certain prediction for an instance?\n\n\nWe will zoom in on a single instance and examine what the model predicts for this input, and explain why. If you look at an individual prediction, the behavior of the otherwise complex model might behave more pleasantly. Locally, the prediction might only depend linearly or monotonically on some features, rather than having a complex dependence on them. For example, the value of a house may depend nonlinearly on its size. But if you are looking at only one particular 100 square meters house, there is a possibility that for that data subset, your model prediction depends linearly on the size. You can find this out by simulating how the predicted price changes when you increase or decrease the size by 10 square meters. Local explanations can therefore be more accurate than global explanations\n\n### What is <font color='red'>Model-Agnostic<\/font>?\n\nIt means any model till date can be applied to LIME and Lime can create local explanations for  them\nBy treating each model as <font color='orange'>Black box model<\/font>\nshould not make any assumptions about model while providing explanations.\n\n### Explanation is just an explanation \ud83d\ude0a\ud83d\ude0a\n\n\n##  TYPES OF INTERPRETABILITY\n\nThere are two main ways to look at a **classification** or a **regression** model:\n1. Inspect model parameters and try to figure out how the model works globally.\n\n2. Inspect an individual **prediction of a model** , try to figure out why the model makes the decision it makes.\n\n\n","168b44f1":"## and what Eli5 shows","b18eb89f":"# <font color='blue'> Why I am Stressing Upon It?<\/font>\n\n![](https:\/\/www.kdnuggets.com\/images\/xai-fig3-accuracy-vs-explainability-600.jpg)","3aa4020e":"# Why Explainable AI is Important?\n\n## <font  color ='orange'>1. Cross Validation can Fail<\/font>\n\nAlthough we can rely on cross validation for testing our  model before putting in production\n\nBut the problem with cross validation is  we never know what kind of testing data we\u2019ll get in \nproduction.\n\n## <font color='orange'> 2. A\/B Testing  not the solution For  everyone <\/font>\n\nAlthough A\/B testing is a  golden standard but the problem is\n\n2.1   Companies will have to expose Not the best quality product to  public testers.\n\n2.2   It can  be expensive as well.\n\n\n","8a28e7ae":"## So for explainability purpose we will use\n\n## <font color='red'> ELI5 ---> Explain me Like i'm 5 \ud83d\ude0a<\/font>\n\nFor refrence \n\n1. LIME  =Local Model Agnostic Explainability -----> https:\/\/arxiv.org\/abs\/1602.04938\n2. SHAPLEY = Shapley Additive Explainations   ---->https:\/\/arxiv.org\/abs\/1911.11888\n\n\n### <font color='orange'> If you like my work pls upvote my work<\/font>","68a96ec8":"# What I wanted to Say?\n![](https:\/\/miro.medium.com\/max\/1124\/1*vE3PUuhG6RRgK1J9oxg0nA.png)\n\nThe **black-box model\u2019s** complex decision function f (unknown to LIME) is represented by the blue\/pink background, which cannot be approximated well by a linear model. The bold red cross is the instance being explained. LIME samples instances, gets predictions using f, and weighs them by the proximity to the instance being explained (represented here by size). The dashed line is the learned explanation that is locally (but not globally) faithful.","b9800a5d":"## <font color='blue'>Divided train and test set using stratified sampling<\/font>\n\n### We are working for a Binary Text Classification\n\nWe have used 20 percent of Clean and Toxic comments because from above we there is Huge class Imbalance bw clean and \n\nToxic comments. So to Handle that Imbalance we will over-sample Toxic comments but due to CPU limitations we have to use\n\n20 percent of data from other classes and then we will oversample Toxic comments class","04834d35":"## Testing  time","be9d0118":"So THAT was it\n\n## <font color='red'>HOPE you liked my work. Please share and comment below \ud83d\ude04<\/font>","d3238a16":"## Features Using Logistic Regression","894daf74":"### Classes are imbalanced","026bc997":"## What Makes <font color='yellow'>LIME<\/font> excellent ?\nLIME use a representation that is understood by the humans irrespective of the actual features used by the model. This is coined as interpretable representation. An interpretable representation would vary with the type of data that we are working with for example :\n1. For **text** : It represents presence\/absence of words.\n2. For **image** : It represents presence\/absence of super pixels ( contiguous patch of similar pixels ).\n3. For **tabular data** : It is a weighted combination of columns\n\n## LET's Do  SOME PRACTICAL WORK?","87a6cc9f":"# What is explainable AI?\n\nWhenever we make any Machine learning or Neural Network Model we only judge a model by the prediction it makes.\n\nBut for most of the **non-linear model** we never know how our model has predicted Means we don't know what **features** contributed to our prediction.\n\nAnd if somehow we can extract those features for our prediction. We can answer very Impotant Question mostly asked in **Interviews**\n\n<font color='orange'>**Can you Explain this model like I am 5 ?**<\/font>\n\n![](https:\/\/i.pinimg.com\/originals\/55\/5c\/a3\/555ca3f972ccb9faa88683a1e2c316eb.png)\n\n"}}