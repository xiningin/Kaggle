{"cell_type":{"d29adb18":"code","130751fe":"code","309fea60":"code","d583daa2":"code","2948b71a":"code","c62989d2":"code","2e7280be":"code","aca92f77":"code","67c74bb1":"code","0fc48b15":"code","50d4539c":"code","af3d3fad":"markdown","c893a913":"markdown","5930ea4f":"markdown","02074984":"markdown","a426beab":"markdown","aa298a94":"markdown","cc75f672":"markdown","c0fbe4e3":"markdown","4664ab78":"markdown","0c9d6904":"markdown","e0ddf2cb":"markdown"},"source":{"d29adb18":"import numpy as np\nimport pandas as pd\nimport sqlite3\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom shutil import copyfile # copy database func\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","130751fe":"Image(\"..\/input\/uw-madison-database-table-relationships\/UW Madison Database Table Relationships.jpg\")","309fea60":"# move the database into a writeable format\ncopyfile('..\/input\/uw-madison-courses\/database.sqlite3', '.\/database.sqlite3')\n\n# open connection\nconn = sqlite3.connect('.\/database.sqlite3')","d583daa2":"# we add a new view\nc = conn.cursor()\nc.execute(\"DROP VIEW IF EXISTS section_gpas\")\nc.execute(\"\"\"\n  CREATE VIEW\n  section_gpas (course_offering_uuid, section_number, gpa, num_grades, a_prob, aab_prob, aabb_prob)\n  AS\n  SELECT\n    course_offering_uuid,\n    section_number,\n    (4.0 * a_count + 3.5 * ab_count + 3.0 * b_count + 2.5 * bc_count + 2 * c_count + 1 * d_count) \/ (a_count + ab_count + b_count + bc_count + c_count + d_count + f_count) AS gpa,\n    a_count + ab_count + b_count + bc_count + c_count + d_count + f_count AS num_grades,\n    (1.0 * a_count) \/ (a_count + ab_count + b_count + bc_count + c_count + d_count + f_count) AS a_prob,\n    (1.0 * a_count + 1.0 * ab_count) \/ (a_count + ab_count + b_count + bc_count + c_count + d_count + f_count) AS aab_prob,\n    (1.0 * a_count + 1.0 * ab_count + 1.0 * b_count) \/ (a_count + ab_count + b_count + bc_count + c_count + d_count + f_count) AS aabb_prob\n  FROM grade_distributions\n\"\"\");","2948b71a":"rows = pd.read_sql(\"\"\"\n  SELECT\n    su.abbreviation AS prefix, c.number AS number, co.name AS course_name, su.name AS subject_name,\n    se.number AS section, co.term_code AS term, i.id AS instructor_id, i.name AS instructor_name,\n    sc.start_time, sc.end_time, sc.mon, sc.tues, sc.wed, sc.thurs, sc.fri, sc.sat, sc.sun,\n    r.facility_code AS facility, r.room_code AS room,\n    gd.gpa, gd.num_grades, gd.a_prob, gd.aab_prob, gd.aabb_prob\n  FROM section_gpas gd\n  LEFT JOIN course_offerings co ON co.uuid = gd.course_offering_uuid\n  LEFT JOIN sections se ON se.course_offering_uuid = gd.course_offering_uuid AND se.number = gd.section_number\n  LEFT JOIN subject_memberships sm ON sm.course_offering_uuid = gd.course_offering_uuid\n  LEFT JOIN courses c ON c.uuid = co.course_uuid\n  LEFT JOIN rooms r ON r.uuid = se.room_uuid\n  LEFT JOIN schedules sc ON sc.uuid = se.schedule_uuid\n  LEFT JOIN teachings t ON t.section_uuid = se.uuid\n  LEFT JOIN instructors i ON i.id = t.instructor_id\n  LEFT JOIN subjects su ON su.code = sm.subject_code\n  GROUP BY gd.course_offering_uuid, gd.section_number\n\"\"\", conn)\n\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 50)\nprint('The shape of rows is: %s' %(rows.shape,))\ndisplay(rows.head())","c62989d2":"dict = {'false':False, 'true':True}\nrows.replace(dict, inplace=True)\nrows.start_time = pd.to_numeric(rows['start_time'], errors='coerce')\nrows.end_time = pd.to_numeric(rows['end_time'], errors='coerce')\n\nrows['class_days'] = rows[['mon', 'tues', 'wed', 'thurs', 'fri', 'sat', 'sun']].sum(axis=1)\nrows['class_length'] = rows.end_time - rows.start_time\nrows['weekly_class_length'] = rows.class_days * rows.class_length\n\nprint('The shape of rows is: %s' %(rows.shape,))\ndisplay(rows.head())","2e7280be":"plt.hist(rows['num_grades'],bins=np.arange(0,1000),color='blue');\nplt.xscale('log')\nplt.yscale('log')\nplt.title('Number of Grades Per Course Offering', fontsize=16)\nplt.xlabel('Number of Grades', fontsize=16)\nplt.ylabel('Course Offerings', fontsize=16)\nplt.tick_params(labelsize=16)","aca92f77":"rows2 = rows[(rows.num_grades>0)]\nrows2.shape","67c74bb1":"f = plt.figure(figsize=(15,4))\nax = f.add_subplot(131)\nax2 = f.add_subplot(132)\nax3 = f.add_subplot(133)\n\nx = rows['gpa'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\ny = rows['a_prob'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\nax.plot(x,y,'bo')\nax.grid(which='both')\nax.set_xlim([2,4.1])\nax.set_ylim([0,1.05])\nax.set_title('Probability of Getting an A', fontsize=16)\nax.set_xlabel('Class GPA', fontsize=16)\nax.set_ylabel('Probabilty', fontsize=16)\nax.tick_params(labelsize=16)\n\nx = rows['gpa'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\ny = rows['aab_prob'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\nax2.plot(x,y,'bo')\nax2.grid(which='both')\nax2.set_xlim([2,4.1])\nax2.set_ylim([0,1.05])\nax2.set_title('Probability of Getting >= AB', fontsize=16)\nax2.set_xlabel('Class GPA', fontsize=16)\nax2.set_ylabel('Probabilty', fontsize=16)\nax2.tick_params(labelsize=16)\n\nx = rows['gpa'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\ny = rows['aabb_prob'][(rows.weekly_class_length==150) & (rows.num_grades>40) & (pd.to_numeric(rows.number)<300)]\nax3.plot(x,y,'bo')\nax3.grid(which='both')\nax3.set_xlim([2,4.1])\nax3.set_ylim([0,1.05])\nax3.set_title('Probability of Getting >= B', fontsize=16)\nax3.set_xlabel('Class GPA', fontsize=16)\nax3.set_ylabel('Probabilty', fontsize=16)\nax3.tick_params(labelsize=16)","0fc48b15":"temp = rows2[['prefix', 'number', 'num_grades', 'gpa', 'a_prob', 'aab_prob', 'aabb_prob']].groupby(['prefix', 'number']).agg({'num_grades':'sum', 'gpa':'mean', 'a_prob':'mean', 'aab_prob':'mean', 'aabb_prob':'mean'})\ntemp.sort_values(['num_grades'], ascending=False).head(50)","50d4539c":"temp = rows2[['prefix', 'number', 'instructor_name', 'num_grades', 'gpa', 'a_prob', 'aab_prob', 'aabb_prob']][(rows2.prefix=='ECON') & (rows.number=='101')].groupby(['prefix', 'number', 'instructor_name']).agg({'num_grades':'sum', 'gpa':'mean', 'a_prob':'mean', 'aab_prob':'mean', 'aabb_prob':'mean'})\ntemp.sort_values(['gpa'], ascending=False)","af3d3fad":"To design the dataframe, I have selected the features from the various tables in the order I would like them to appear in the dataframe.\n\nAll table joins are LEFT joins because I want to be sure to preserve the number of records from the governing table\/view that contains the grades (grade_distbibutions \/ section_gpas).","c893a913":"That wraps up this notebook.  Primarily aimed at wrangling and understanding the dataset, a few tools were presented to gain some insight into grade patterns.\n\nWhat I would like to do is look for hidden nuggets, such as if the time of day, facility, class length, and year (term) factor as much into grade distributions as the instructor does.  Any suggestions for how to do this are welcome.","5930ea4f":"Hello, everyone.  I am just learning about data science and analytics.  This is my first notebook on Kaggle.\n\nMy purpose with this notebook is to provide a single dataframe (\"rows\") that combines the most interesting features of the dataset.  I am also still learning Python, so I have tried to wrangle the dataset into a dataframe with programming that is clean and efficient.\n\nSome high-level peeks into the data are provided, but nothing incredibly in-depth.","02074984":"Add some basic engineered features (class_days, class_length, and weekly_class_length) to the dataframe.","a426beab":"While GPA is probably the best summarizing variable to use for comparing classes, instructors, etc., GPA doesn't give information about the grade distribution.\n\nSome students may be more interested in their probability of making an A, AB, or B.  The plots below show how these probabilities can vary widely for a given GPA.","aa298a94":"For querying the data, I got some valuable sqlite insight from Keenan Thompson's kernel:\nhttps:\/\/www.kaggle.com\/keenant\/courses-and-instructors-by-average-gpa-given\n\nIn addition to the \"section_gpas\" view from that notebook, I have added calculated probabilities of making at least an A, A\/AB, and A\/AB\/B.","cc75f672":"As one may expect, a lot of the most common classes are the freshman\/sophomore level classes.\n\nLets look in more detail at the most common class, ECON 101.","c0fbe4e3":"There are many tables in this database, so for clarity, I needed to map out the relationships between the tables.","4664ab78":"So, out of 193,262 course offerings, around 100,000 don't have any grades assigned!\n\nLet's trim this dataframe, and make \"rows2\" out of it.","0c9d6904":"Lets see which classes are the most common.  That is, which classes have the most grades.","e0ddf2cb":"As you can see from the table, which is sorted by GPA, a student can have a very different probability of making a certain grade when comparing classes with similar GPA's."}}