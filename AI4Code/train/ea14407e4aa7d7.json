{"cell_type":{"2440ad00":"code","ee6e35a9":"code","ca7a34c5":"code","b0713eb2":"code","1b53054b":"code","e376dccf":"code","ea19b04a":"code","b0f9bf17":"code","b60f32ca":"code","8bd8606e":"code","43e66077":"code","f96e3b1d":"code","5d46eadb":"code","4abbb628":"code","fa436537":"code","febaa483":"code","df3c9701":"code","38f84178":"code","7eb1bc7f":"code","8d8f0b08":"code","ec33caf7":"code","1721057b":"code","a7b884ee":"code","843b4dba":"code","4e735b39":"code","2a92f812":"code","fc19acc5":"code","9d97c92c":"code","8eb24a47":"code","7a25c53d":"code","cf5b0041":"code","bc12bd7f":"code","4b9e253e":"code","a25cff9c":"code","d4cbe45b":"code","9ea675fd":"code","4d2d4d37":"code","e4f89a05":"code","67655e3a":"code","14bab173":"code","ac0ffb7b":"code","83ca10eb":"code","c51b8ed5":"markdown","3b5c1d93":"markdown","dc2ee177":"markdown","d75ddf33":"markdown","7f9a9a94":"markdown","ff085749":"markdown","6fbdb6f7":"markdown","5d59ee9b":"markdown","54620016":"markdown","fec1affb":"markdown","6c4a5ca6":"markdown","99e4d06c":"markdown","22e700a8":"markdown","4f540231":"markdown","ce1552c4":"markdown","ce9a798a":"markdown","9b44390a":"markdown","93a0ae6b":"markdown","213f45d5":"markdown"},"source":{"2440ad00":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns","ee6e35a9":"df = pd.read_csv('..\/input\/aircraft-performance-dataset-aircraft-bluebook\/Airplane_Cleaned.csv')","ca7a34c5":"df.info()","b0713eb2":"plt.figure(figsize=(12, 8))\nsns.heatmap(df.isnull());","1b53054b":"plt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(), linecolor='w', lw=1);","e376dccf":"from sklearn.linear_model import LinearRegression\n\ndef sto_reg_imp(X, y, condition = True, seed=101):\n    \n    y = y.copy()\n    \n    if len(X.shape) == 1:\n        ind_train = X.notnull() & y.notnull() & condition\n        ind_imp = X.notnull() & y.isnull() & condition\n    \n    else:\n        ind_train = X.notnull().prod(axis=1).astype(bool) & y.notnull() & condition\n        ind_imp = X.notnull().prod(axis=1).astype(bool) & y.isnull() & condition\n\n    if sum(ind_imp != 0.) == 0: \n        return ind_imp, y\n    \n    if len(X.shape) == 1:\n        X_train = X[ind_train].to_numpy(copy=True).reshape(-1, 1) \n        y_train = y[ind_train].to_numpy(copy=True).reshape(-1, 1)\n        X_imp = X[ind_imp].to_numpy(copy=True).reshape(-1, 1)\n        \n    else:\n        X_train = X[ind_train].to_numpy(copy=True) \n        y_train = y[ind_train].to_numpy(copy=True)\n        X_imp = X[ind_imp].to_numpy(copy=True)\n    \n    \n    reg = LinearRegression()\n    reg.fit(X_train,y_train)\n    \n    y_pred_train = reg.predict(X_train)\n    res = y_train - y_pred_train\n    res_std = np.std(res)\n    rng = np.random.default_rng(seed)\n    noise = rng.normal(loc=0, scale=res_std, size = (X_imp.shape[0], 1))\n    \n    y_pred = reg.predict(X_imp)\n    \n    if len(X.shape) == 2:\n        y_pred = y_pred.reshape(-1, 1)\n        \n    \n    y_pred += noise\n    \n    y.loc[ind_imp] = y_pred.flatten()\n    \n    return ind_imp, np.abs(y)\n\ndef plot_imp_data(data, x, y, imp):\n    x = data[x]\n    y = data[y]\n    x_imp = x[imp]\n    y_imp = y[imp]\n    plt.figure(figsize=(12, 6))\n    sns.scatterplot(data=data, x=x, y=y, color='b', s=80)\n    plt.scatter(x_imp, y_imp, color='r', s=40, label='Imputed')\n    plt.legend()\n    \ndef imputer(X, y, reverse=True):\n\n    ind_ = False\n    ind_2 = False\n\n    for eng in df['Engine Type'].unique():\n        ind_1, imp_1 = sto_reg_imp(df[X], df[y], df['Engine Type'] == eng)\n        \n        if reverse:\n            ind_2, imp_2 = sto_reg_imp(df[y], df[X], df['Engine Type'] == eng)\n            \n        ind_ += ind_1 + ind_2\n    \n        df.update({y : imp_1}, overwrite=False)\n        \n        if reverse:\n            df.update({X : imp_2}, overwrite=False)\n    \n    ind_ = ind_.astype(bool)\n    \n    return ind_","ea19b04a":"df['FWt'] = df['AUW'] - df['MEW']\ndf['MEWt'] = df['AUW'] - df['FW']\ndf['AUWt'] = df['MEW'] + df['FW']\n\nsns.lmplot(data=df, x='AUWt', y='AUW', palette='rocket', hue='Engine Type');","b0f9bf17":"ind_1 = imputer('FWt', 'FW')\nind_2 = imputer('AUWt', 'AUW')\nind_3 = imputer('MEWt', 'MEW')\n\nind_ = ind_1 + ind_2 + ind_3","b60f32ca":"plot_imp_data(data=df, x='AUWt', y='AUW', imp=ind_);","8bd8606e":"sns.lmplot(data=df, x='Vmax', y='Vcruise', palette='rocket', hue='Engine Type');","43e66077":"ind_ = imputer('Vmax', 'Vcruise')\nplot_imp_data(data=df, x='Vmax', y='Vcruise', imp=ind_);","f96e3b1d":"mask = df['Vmax'] < df['Vcruise']\ndf[mask]","5d46eadb":"diff = np.abs(df.loc[mask, 'Vmax'] - df.loc[mask, 'Vcruise'])\n\ndf.loc[mask, 'Vmax'] += diff ","4abbb628":"plot_imp_data(data=df, x='Vmax', y='Vcruise', imp=ind_);","fa436537":"sns.lmplot(data=df, x='Wing Span', y='Length', palette='rocket', hue='Engine Type'); ","febaa483":"sns.lmplot(data=df, x='Wing Span', y='Height', palette='rocket', hue='Engine Type');","df3c9701":"sns.lmplot(data=df, x='Length', y='Height', palette='rocket', hue='Engine Type'); ","38f84178":"ind_1 = imputer('Wing Span', 'Length')\nind_2 = imputer('Wing Span', 'Height')\n\nind_ = ind_1 | ind_2\nplot_imp_data(data=df, x='Length', y='Height', imp=ind_)","7eb1bc7f":"sns.lmplot(data=df, x='Vstall', y='AUW', palette='rocket', hue='Engine Type');","8d8f0b08":"df['AUW ** 0.5'] = df['AUW'] ** 0.5\n\nsns.lmplot(data=df, x='Vstall', y='AUW ** 0.5', palette='rocket', hue='Engine Type');","ec33caf7":"sns.lmplot(data=df, x='Vstall', y='Vmax', palette='rocket', hue='Engine Type');","1721057b":"ind_ = imputer(['AUW ** 0.5', 'Vmax'], 'Vstall', False)\nplot_imp_data(data=df, x='Vmax', y='Vstall', imp=ind_)","a7b884ee":"plot_imp_data(data=df, x='Vstall', y='AUW', imp=ind_)","843b4dba":"sns.lmplot(data=df, x='Vlo', y='Slo', palette='rocket', hue='Engine Type');","4e735b39":"ind_ = imputer('Vlo', 'Slo')\nplot_imp_data(data=df, x='Vlo', y='Slo', imp=ind_)","2a92f812":"sns.lmplot(data=df, x='Slo', y='Sl', palette='rocket', hue='Engine Type');","fc19acc5":"ind_ = imputer('Slo', 'Sl')\nplot_imp_data(data=df, x='Slo', y='Sl', imp=ind_);","9d97c92c":"sns.lmplot(data=df, x='Vlo', y='Vl', palette='rocket', hue='Engine Type');","8eb24a47":"ind_  = imputer('Vlo', 'Vl')\nplot_imp_data(data=df, x='Vlo', y='Vl', imp=ind_)","7a25c53d":"sns.lmplot(data=df, x='FW', y='Range', palette='rocket', hue='Engine Type');","cf5b0041":"ind_  = imputer('FW', 'Range')\nplot_imp_data(data=df, x='FW', y='Range', imp=ind_)","bc12bd7f":"sns.lmplot(data=df, x='Hmax', y='Vmax', palette='rocket', hue='Engine Type');","4b9e253e":"ind_  = imputer('Vmax', 'Hmax')\nplot_imp_data(data=df, x='Vmax', y='Hmax', imp=ind_)","a25cff9c":"sns.lmplot(data=df, x='Hmax', y='ROC', palette='rocket', hue='Engine Type');","d4cbe45b":"sns.lmplot(data=df, x='Vmax', y='ROC', palette='rocket', hue='Engine Type');","9ea675fd":"ind_ = imputer(['Hmax', 'Vmax'], 'ROC', False)\nplot_imp_data(data=df, x='Vmax', y='ROC', imp=ind_)","4d2d4d37":"plot_imp_data(data=df, x='Hmax', y='ROC', imp=ind_)","e4f89a05":"df.drop(['AUW ** 0.5', 'FWt', 'MEWt', 'AUWt'], axis = 1, inplace=True)\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(), linecolor='w', lw=1);","67655e3a":"plt.figure(figsize=(12, 8))\nsns.heatmap(df.isnull());","14bab173":"faulty = df.drop(['Model', 'Company','Engine Type', 'TP mods', \n         'THR', 'SHP', 'Hmax (One)', 'ROC (One)', 'Multi Engine'], axis=1).columns\n\nfor f in faulty:\n    for comp in df['Company'].unique():\n        for eng in df['Engine Type'].unique():\n            mask = (df['Company'] == comp) & (df['Engine Type'] == eng)\n            \n            median = df.loc[mask, f].median()\n            df.loc[mask, f] = df.loc[mask, f].fillna(median)\n            \nfor f in faulty:\n    median = df.loc[:, f].median()\n    df.loc[:, f] = df.loc[:, f].fillna(median)\n            \nplt.figure(figsize=(12, 8))\nsns.heatmap(df.isnull());","ac0ffb7b":"df.info()","83ca10eb":"df.to_csv('Airplane_Stochastic_Imputation.csv', index=False)","c51b8ed5":"# 6. Sl","3b5c1d93":"# 5. Vlo, Slo","dc2ee177":"# 2. MEW, AUW, FW","d75ddf33":"# 10. ROC","7f9a9a94":"The Figure show that there's a highly correlation between variables. This can be explained by the fact that a airplane is designed to achieve certain objetives, therefore, its parameters must be correlated.  A important note: The variance of the noise that will be implement in the regression is the same as the residuals from the predicted and real values.","ff085749":"# 1. Introduction","6fbdb6f7":"# 3. Vmax, Vcruise","5d59ee9b":"# 7. Vl","54620016":"# 8. Range","fec1affb":"# 4. Vstall","6c4a5ca6":"After cleaning data, the next approach is to handle missing values. There's lots of techiniques to use to do it, but we are going to focus in Stochastic Linear Regression. Stochastic Imputation is a improvement over Deterministic Imputation, since its adds random noise over the predicted missing value, reducing it's bias. ","99e4d06c":"For MEW, AUW and FW, we are going to use the simple assumption that AUW $\\approx$ MEW + FW, as done in the [previous notebook](http:\/\/https:\/\/www.kaggle.com\/heitornunes\/data-wrangling-and-cleanup).","22e700a8":"Unfortunatelly, this procedure might lead to unrealistic samples, such as negative values. In this case, some imputations of Vcruise are higher than Vmax, which is not actually true. For this reason, we have to correct it.","4f540231":"# 9. Hmax","ce1552c4":"For the rest of the data, we use a simple median imputation considering Engine Type and Company, since is more robust than mean.","ce9a798a":"# 3. Wing Span, Length, Height","9b44390a":"Vcruise and Vmax highly correlated, but we can see the differences in distribution of diffent airplane engine configuration. This pattern will be seen though out all this notebook. Therefore is really important to considerate this feature when perfoming the regression.","93a0ae6b":"Vstall is correlated with the [squared root of weight](https:\/\/wingsofaero.in\/calculator\/stall-velocity-calculator\/). This Vstall, however, is not the clean Vstall, is the dirty one (wheels not retracted, flaps activated). The clean Vstall would be higher.","213f45d5":"In this notebook, we are not going to impute the following features for the given justifications:\n* **Multi Engine**: We know only if has a multi engine because Hmax (One)\/ROC (One) and Hmax\/ROC  values are different, we know nothing about One engine airplanes.\n* **THR\/SHP**: This features is actually complete, they are only separated because of their Engine types (SHP for Propjet\/Piston, THR for Jet).\n* **Hmax (One)**: If a airplane is mono engine, Hmax (One) value will be the same for Hmax, but unfortunatelly, we don't know if it's a mono engine.\n* **ROC (One)**: same as for Hmax (One)."}}