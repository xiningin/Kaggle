{"cell_type":{"b25adcaa":"code","19c11724":"code","24bdf11e":"code","9eb5e3ca":"code","736715b9":"markdown","f29b664b":"markdown"},"source":{"b25adcaa":"\n\nimport pandas as pd\nimport re\nimport os\nimport nltk\n\ndef salaryParser(verboseLog, row,line,file):\n    \"\"\" Find the lowest and highest salary in the salary range\n\n    row - dictionary for each Job Bulletin\n    line - file input\n\n    \"\"\"\n    # remove special characters and letters\n    line = re.sub(\"\\$\" , \"\", line)\n\n    # store information about salary\n    salaryNotes = re.sub('[0-9;]','',line)\n    salaryNotes = re.sub(' and ','',salaryNotes)\n    salaryNotes = re.sub(' to','',salaryNotes)\n    row[\"SALARY_NOTES\"] = re.sub(\",\", \" \", salaryNotes)\n\n    # store salaries\n    line = re.sub('[a-zA-Z():;\\-\\%\\&\\*\\\/\\_\\,\\\"\\']','',line)\n\n    # is dot the end of the sentence or a decimal indicator\n    decimalSalary = re.findall('\\d{1}\\.\\d{2}',line)\n    m = re.search('\\d{1}\\.\\d{2}', line)\n    if m:\n        f = line[:m.start()+1]\n        e = line[m.end():]\n        line = f+e\n\n    m = re.search('\\d{1}\\.\\d{1}\\.', line)\n    if m:\n        f = line[:m.start()+1]\n        e = line[m.end():]\n        line = f+e\n\n    line = re.sub(\"\\.\",\"\",line)\n\n    salaryRange = line.split()\n    # convert to integer\n    try:\n        salaryRange = list(map(int,salaryRange))\n    except:\n        if verboseLog:\n            print(\"CHECK THIS \", file, \" at line: \", line)\n        \n    # remove numbers that are not in a normal salary range\n    outliers = []\n    outliers[:] = (value for value in salaryRange if value < 10000)\n    try:\n        for outlier in outliers:\n            if verboseLog:\n                print(\"SALARY OUTLIER: \", file, line, outlier)\n                salaryRange.remove(outlier)\n        if len(salaryRange) > 0:\n            row[\"LOW_SALARY\"] = salaryRange[0]\n            row[\"HIGH_SALARY\"] = salaryRange[-1]\n    except:\n        if verboseLog:\n            print(\"Outliers: \", outlier)\n\ndef dutiesParser(verboseLog,row,line):\n    \"\"\" Adds job duties\n\n    row - dictionary for each Job Bulletin\n    line - file input\n    \n    \"\"\"\n    row[\"JOB_DUTIES\"] = line\n\n\ndef experienceParser(verboseLog, degrees,schoolTypes,jobTypes,years,row,line):\n    \"\"\" Finds education and experience needed for each job\n\n    degrees - list of degrees\n    schoolTypes - list of types of schools, such as college, trade school...\n    jobTypes - list of job types, such as full-time, part-time...\n    years - list translating text to number, for example \"one year\" translates to 1\n    row - dictionary for each Job Bulletin\n    line - file input\n    \n    \"\"\"\n    wordHist = wordHistogram(line)\n\n    # EDUCATION\n    for degree in degrees:\n        if degree[0] in line.lower():\n            row[\"DEGREE\"] = degree[0]\n            row[\"EDUCATION_YEARS\"] = degree[1]\n            break\n\n    for schoolType in schoolTypes:\n        if schoolType in line.lower():\n            row[\"SCHOOL_TYPE\"] = schoolType\n            break\n\n    if 'semester' in line.lower():\n        row[\"COURSE_LENGTH_SEMESTER\"] = 6\n        line = re.sub(\",\" , \" \", line)\n        row['MISC_COURSE_DETAILS'] = line\n    if 'quarter' in line.lower():             # Assumes semester and quarter are used in same sentence\n        row[\"COURSE_LENGTH_QUARTER\"] = 9\n\n    # EXPERIENCE\n    for jobType in jobTypes:\n        if jobType in line.lower():\n            row[\"FULL_TIME_PART_TIME\"] = jobType\n            break\n\n    # Years or months of required experience \n    partsOfSpeech = nltk.pos_tag(line.split())\n    reg_exChunk = r\"\"\"NumYrs: {<CD>*<NNS>*}\"\"\"\n    regexParser = nltk.RegexpParser(reg_exChunk)\n    chunkd = regexParser.parse(partsOfSpeech)\n    for subtree in chunkd.subtrees(filter=lambda t: t.label() == 'NumYrs'):\n        s = str(subtree)\n        if 'year' in s:\n            m = re.search(\"\/\",s)\n            m = m.start()\n            textYr = s[7:m].lower().strip(' ')\n            for year in years:\n                y = re.sub(' year', '', year[0])\n                if y in textYr:\n                    row[\"EXPERIENCE_LENGTH\"] = str(year[1])\n                    break\n\n        if 'month' in s:\n            m = re.search(\"\/\",s)\n            m = m.start()\n            if s[7:m].lower().strip(' ') == 'six':\n                row[\"EXPERIENCE_LENGTH\"] = 0.5                \n\n    # type of experience required\n    reg_exChunk = r\"\"\"expType: {<JJ>*<VBD>*<NN>*}\"\"\"\n    regexParser = nltk.RegexpParser(reg_exChunk)\n    chunkd = regexParser.parse(partsOfSpeech)\n    for subtree in chunkd.subtrees(filter=lambda t: t.label() == 'expType'):\n        s = str(subtree)\n        if 'experience' in s:\n            s = re.sub(\"\/NN\",\"\",s)\n            s = re.sub(\"\/JJ\",\"\",s)\n            s = re.sub(\"\/VBD\",\"\",s)\n            s = re.sub(\"\\n\", \"\", s)\n            row[\"EXP_JOB_CLASS_FUNCTION\"] = s[9:-1]\n\n    # job titles from prior experience\n    reg_exChunk = r\"\"\"expTitle: {<NNP>*}\"\"\"\n    regexParser = nltk.RegexpParser(reg_exChunk)\n    chunkd = regexParser.parse(partsOfSpeech)\n    for subtree in chunkd.subtrees(filter=lambda t: t.label() == 'expTitle'):\n        s = str(subtree)\n        s = re.sub(\"\/NNP\",\"\", s)\n        s = re.sub(\"\\n\", \"\", s)\n        s = re.sub(\";#\", \"\", s)\n        if s[10:-1] not in (\"Note: Supplemental Forms\", \"Los Angeles\", \"Requirement\", \"Graduation\", \"Bachelor's\"):\n            row[\"EXP_JOB_CLASS_TITLE\"] = s[10:-1]\n\ndef notesParser(verboseLog, row,line):\n    \"\"\" Finds more information about job requirements\n\n    row - dictionary for each Job Bulletin\n    line - file input\n    \n    \"\"\"\n    wordHist = wordHistogram(line)\n    \n    commonNotes = mostCommon(wordHist,'most')\n    common = ''\n    for c in commonNotes:  common += c[1] + ' '\n    row[\"NOTES_MOST_COMMON\"] = common\n\n\n    # LICENSE REQUIRED\n    if \"license\" in line.lower():\n        \n        if \"valid california driver's license\" in line.lower() or \"valid california's driver's license\" in line.lower():\n            row[\"DRIVER_LICENSE_REQ\"] = \"Y\"\n            row[\"DRIV_LIC_TYPE\"] = \"C\"\n            \n        elif \"valid class a california driver's license\" in line.lower():\n            row[\"DRIVER_LICENSE_REQ\"] = \"Y\"\n            row[\"DRIV_LIC_TYPE\"] = \"A\"\n\n        elif \"valid california class b driver's license\" in line.lower():\n            row[\"DRIVER_LICENSE_REQ\"] = \"Y\"\n            row[\"DRIV_LIC_TYPE\"] = \"B\"\n\n        elif \"Class 1\/a or 2\/b california driver's license\" in line.lower() or \"valid class a or b driver's license\" in line.lower():\n            row[\"DRIVER_LICENSE_REQ\"] = \"Y\"\n            row[\"DRIV_LIC_TYPE\"] = \"A or B\"\n        \n        elif \"valid medical certificate\" in line.lower():\n            row[\"ADDTL_LIC\"] = \"Medical Certificate\"\n\ndef mostCommon(wordHist,type,):\n    \"\"\"Makes a list of how frequently a word is used and a list of title case words\n\n    wordHist: map frequency of word\n    type:   most - sort by most frequent\n            least - sort by least frequent\n\n    returns: list of (frequency, word) pairs and a list of title case words\n    \"\"\"\n    w = []\n    grammar_words = ['a','an','as','at','be','by','go','if','in','is','of','on','or','to','all','and','are','for','job','may','not','the','who','iii','iv','vi','los','angeles','with','that','this','which','who','what','when','where','are','list','time','open','civil','meet','interview','hiring','must','required','received','process','position','minimum','maximum','experience','least','work','year', 'years','relating','City','Los','Angeles', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine','one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'will']\n    for wordkey, idxvalue in wordHist.items():\n        if wordkey not in grammar_words:\n            if len(wordkey) > 3:\n                w.append((idxvalue,wordkey))\n    if len(w) > 0:\n        w.sort()\n        if type == 'most':\n            w.reverse()    \n    return w[0:5]\n\ndef wordHistogram(line):\n    wordHist = {}\n    for word in line.split():\n        if word.startswith('http:\/\/') or word.startswith('https:\/\/'):\n            continue\n        else:\n            wordHist[word] = wordHist.get(word, 0) + 1\n    return wordHist\n\n\ndef main():\n    \"\"\" Reads job bulletins \"\"\"\n\n    verboseLog = False  # True - show parsing messages, False - do not show parsing messages\n    \n    JobBulletins = [os.path.join(root, file) for root, folder, JobBulletin in os.walk('..\/input\/jobbulletindata\/JobBulletins') for file in JobBulletin]\n    print(len(JobBulletins), \" Job Bulletins\\n\")\n    if not verboseLog:\n        print('Messages muted.  Set \"verboseLog = True\" to see parsing messages')\n\n    degrees = [['bachelor',4], ['master',6], ['phd',10],['associate',2],['degree',4],['graduat',4],['apprenticeship',0]]\n    schoolTypes = ['college or university','college', 'university','trade school', 'high school']\n    jobTypes = ['full','part','contract','intern']\n    years = [['one year',1.0], ['two year',2.0], ['three year',3.0], ['four year',4.0], ['five year',5.0], ['six year',6.0], ['seven year',7.0], ['eight year',8.0], ['nine year',9.0]]\n    verifyText = []     # save original text in a DataFrame\n    csvList = []        # store DataFrame fields for creating a Pandas DataFrame for further analysis\n\n    idx = 0   # for dataframe index\n    for JobBulletin in JobBulletins:\n        filename = re.sub('[\\']','',JobBulletin)  # strip the single quote so the file will open\n        f = open(filename)\n\n        row = {}\n        verifyTextRow = {}\n        verifyTextRow[\"FILE_NAME\"] = filename\n\n        salary = ''\n        experience = ''\n        notes = ''\n        readIT = 0\n\n        row[\"FILE_NAME\"] = filename\n        r = re.findall('[0-9]{4}',filename)\n        JobClass = r[0]\n        row[\"JOB_CLASS_NO\"] = JobClass[0:4]\n        \n        k=0     # counts each line in the file\n        try:\n            for line in f:\n                line = line.strip('\\n')\n                line = re.sub(\",\" , \"\", line)\n                lineWithText = re.search('[a-zA-Z]',line)\n\n                if lineWithText:\n\n                    if k==0:\n                        # get the job class title from the first line of the Job Bulletin\n                        line = re.sub('[^A-Z ]','',line)\n                        line = re.sub('  ','',line)     # some job bulletins have blank spaces before the \"Class Code\" at the end of the first line\n                        line = re.sub('C C','',line)    # some job bulletins have \"Class Code\" at the end of the first line so it is necessary to remove the remaining 'C C'\n                        row[\"JOB_CLASS_TITLE\"] = line.strip(' ')\n\n                    if \"Class Code:\" in line and \".\" not in line:\n                        verifyJobClass = line[len(line)-4:len(line)]\n                        \n                        # if the job class numbers don't match then print messages giving a human the data to review\n                        if JobClass[0:4] != verifyJobClass:\n                            if verboseLog:\n                                 print(\"\\nJOB_CLASS_NO extracted from filename: \", JobClass)\n                                 print(\"JOB_CLASS_NO inside the file: \", verifyJobClass)\n                                 print(\"Line where job class number was found: \", line)\n\n                    elif \"open date\" in line.lower():\n                        row[\"OPEN_DATE\"] = line[len(line)-8:len(line)]\n\n                    elif \"$\" in line:\n                        readIT = 1\n\n                    elif \"DUTIES\" in line:\n                        readIT = 2\n                        continue\n\n                    elif \"REQUIREMENT\" in line or \"ADDITIONAL JOB INFORMATION\" in line:\n                        readIT = 3\n                        continue\n\n                    elif \"NOT\" in line :\n                        readIT = 4\n                        continue\n\n                    elif \"WHERE TO APPLY\" in line:\n                        continue\n\n                    elif \"APPLICATION DEADLINE\" in line:\n                        continue\n\n                    elif \"SELECTION PROCESS\" in line:\n                        continue\n\n                    elif \"EQUAL OPPORTUNITY EMPLOYER\" in line:\n                        break\n                    \n                    if readIT == 1:\n                        # add a space to prevent $100,0006. Commodit... where $100,000 is the salary and 6. Commodit is a second line containing a $\n                        salary += \" \" + line\n\n                    if readIT == 2:\n                        dutiesParser(verboseLog, row,line)\n\n                    if readIT == 3:\n                        experience += line\n\n                    if readIT == 4:\n                        notes += line\n                    k+=1\n        except:\n            if verboseLog:\n                print(\"\\nDOUBLE CHECK THIS FILE: \", filename)\n\n        # Parse salary, experience and notes\n        verifyTextRow['SALARY'] = salary\n        verifyTextRow['EXPERIENCE'] = experience\n        verifyTextRow['NOTES'] = notes\n        salaryParser(verboseLog, row,salary,filename)\n        experienceParser(verboseLog, degrees,schoolTypes,jobTypes,years,row,experience)\n        notesParser(verboseLog, row,notes)\n\n        # Store each row\n        row[\"IDX\"] = idx\n        csvList.append(row)\n        verifyText.append(verifyTextRow)\n        idx += 1\n\n    \n    # RESULTS\n    num2View = 10\n\n    dfVerify = pd.DataFrame(verifyText)\n    dfVerify.index.name = 'IDX'\n\n    df = pd.DataFrame(csvList)\n    df.index.name = 'IDX'\n\n    pd.options.display.max_columns=len(df)\n    \n    print(\"\\nCOLUMNS in the JOB BULLETIN CSV FILE:\\n\")\n    print(df.info())\n\n    print(\"\\n\\nSAMPLE DATA in JOB BULLETIN CSV FILE:\")\n    print(\"\\nJob Class, open date, and job title:\\n\")\n    print(df.loc[:,['JOB_CLASS_NO', 'OPEN_DATE', 'JOB_CLASS_TITLE']].head(num2View)) \n    \n    print(\"\\nLow salary, high salary, and notes about salaries in other departments\")\n    print(df.loc[:,['JOB_CLASS_NO', 'LOW_SALARY', 'HIGH_SALARY', 'SALARY_NOTES']].head(num2View))\n\n    print(\"\\nEducation\")\n    print(df.loc[:,['JOB_CLASS_NO', 'SCHOOL_TYPE', 'DEGREE', 'COURSE_LENGTH_QUARTER', 'COURSE_LENGTH_SEMESTER', 'EDUCATION_YEARS']].head(num2View))\n    print(df.loc[:,['MISC_COURSE_DETAILS']].head(num2View))\n\n    print(\"\\nExperience\")\n    print(df.loc[:,['JOB_CLASS_NO', 'EXPERIENCE_LENGTH', 'EXP_JOB_CLASS_FUNCTION', 'EXP_JOB_CLASS_TITLE']].head(num2View))\n    print(df.loc[:,['JOB_CLASS_NO', 'ADDTL_LIC', 'DRIVER_LICENSE_REQ', 'DRIV_LIC_TYPE']].head(num2View))\n    print(df.loc[:,['JOB_CLASS_NO', 'FULL_TIME_PART_TIME']].head(num2View))\n\n    print(\"\\nJob Duties\")\n    print(df.loc[:,['JOB_CLASS_NO', 'JOB_DUTIES']].head(num2View))\n\n    print(\"\\nTowards text comprehension - finding the most common words other than grammar words or stopwords in the Notes\")\n    print(df.loc[:,['JOB_CLASS_NO', 'NOTES_MOST_COMMON']].head(num2View))\n\n    # csv file\n    \n    df.to_csv(\"JobBulletin.csv\")\n    dfVerify.to_csv(\"VerifyDataJobBulletin.csv\")\n\nif __name__ == '__main__':\n    main()\n","19c11724":"# Analysis of Missing Data\n\ndf = pd.read_csv(\"JobBulletin.csv\")\n\nprint(\"\\n\\nANALYSIS of MISSING DATA:\\n\")\nprint(\"Number of null entries in each column:\")\nprint(df.isnull().sum())\n\nprint(\"\\n\\nMissing JOB_CLASS_TITLE\")\njc = df[df['JOB_CLASS_TITLE'].isnull()]\nprint(jc['FILE_NAME'])\n\nprint(\"\\nMissing OPEN_DATE\")\njc = df[df['OPEN_DATE'].isnull()]\nprint(jc['FILE_NAME'])\n\nprint(\"\\nMissing JOB_DUTIES\")\njc = df[df['JOB_DUTIES'].isnull()]\nprint(jc['FILE_NAME'])\n\n","24bdf11e":"df = pd.read_csv(\"JobBulletin.csv\")\n\nimport matplotlib.pyplot as plt\ndf['LOW_SALARY'].plot(figsize=(10,5), y='Low Salary', kind='hist', title='Low Salary Range')\nplt.show()    \n\ndf['HIGH_SALARY'].plot(figsize=(10,5), y='High Salary', kind='hist', title='High Salary Range')\nplt.show()    \n\nprint(\"\\nMissing LOW_SALARY\")\nls = df[df['LOW_SALARY'].isnull()]\nprint(ls['FILE_NAME'])\n\nprint(\"\\nMissing HIGH_SALARY\")\nhs = df[df['HIGH_SALARY'].isnull()]\nprint(hs['FILE_NAME'])","9eb5e3ca":"df = pd.read_csv(\"JobBulletin.csv\")\n\nprint(\"\\nUNIQUE EXP_JOB_CLASS_FUNCTION\")\nprint(df.EXP_JOB_CLASS_FUNCTION.unique())\n\nprint(\"\\nUNIQUE EXP_JOB_CLASS_TITLE\")\nprint(df.EXP_JOB_CLASS_TITLE.unique())","736715b9":"# Generate a CSV from text in City of LA Job Bulletins\n\nThe purpose of this script is to read text from Job Bulletins and create a csv file containing a database of the following fields (eg. indicates an example of what is in the field):\n\n```\nFILE_NAME               eg. 311 Director 9206...txt\nJOB_CLASS_TITLE         eg. 311 Director\nJOB_CLASS_NO            eg. 9206\n\nREQUIREMENTS            Text\nREQUIREMENT_SET_ID      In-progress\nREQUIREMENT_SUBSET_ID   In-progress\nJOB_DUTIES              Text \nOPEN_DATE               Job open date\nENTRY_SALARY_GEN        LOWEST_SALARY\nENTRY_SALARY_DWP        HIGHEST_SALARY\n    \nDEGREE                  \n[['bachelor',4], ['master',6], ['phd',10],['associate',2],['degree',4],['graduat',4],['apprenticeship',0]]\n    \nEDUCATION_YEARS         from Degree list\nSCHOOL_TYPE             ['college or university','college', 'university','trade school', 'high school']\nEDUCATION_MAJOR         In-progress\n    \nEXPERIENCE_LENGTH       gathered by chunking\nFULL_TIME_PART_TIME     jobTypes = ['full','part','contract','intern']\nEXP_JOB_CLASS_TITLE     gathered by chunking\nEXP_JOB_CLASS_ALT_RESP  \nEXP_JOB_CLASS_FUNCTION  gathered by chunking\n    \nCOURSE_LENGTH           course length semester and course length quarter\nCOURSE_COUNT            Text\nCOURSE_SUBJECT          Text\nMISC_COURSE_DETAILS     Text\n    \nDRIVER_LICENSE_REQ      Y - required     \nDRIV_LIC_TYPE           C - Class C license, A - Class A commerical driver's license (CDL)\nADDTL_LIC               Text\nEXAM_TYPE               In-progress\n\nSALARY_NOTES            Shows where salaries are different in the LA Water District.  Parse these and add LA Water district salary fields\n\nNOTES_MOST_COMMON       A list of the most common words used in the Notes\n```\n","f29b664b":"### Analysis of Job Class:\n\nThe Job Class is a 4 digit identifier included in the Job Bulletin filename and noted inside the file.  Some Job Bulletin filenames do not include the job class.  The job class in the filename does not always match the job class inside the file.  Some Job Bulletins do not follow the standard format. \n\n#### Job Bulletin filename does not include Job Class:\nThe 4 digits assigned to the filename are based on the date or other numbers in the filename.\n```    \nJOB_CLASS_NO extracted from filename:  0217\nJOB_CLASS_NO inside the file  3580\nLine where job class number was found:   Class Code:       3580\n\nJOB_CLASS_NO extracted from filename:  0212\nJOB_CLASS_NO inside the file  1632\nLine where job class number was found:   Class Code:       1632\n\nJOB_CLASS_NO extracted from filename:  0727\nJOB_CLASS_NO inside the file  1569\nLine where job class number was found:   Class Code:       1569\n\nJOB_CLASS_NO extracted from filename:  0203\nJOB_CLASS_NO inside the file  7520\nLine where job class number was found:    Class Code:      7520\n\nJOB_CLASS_NO extracted from filename:  0928\nJOB_CLASS_NO inside the file  5265\nLine where job class number was found:   Class Code:      5265\n\nJOB_CLASS_NO extracted from filename:  0325\nJOB_CLASS_NO inside the file  3869\nLine where job class number was found:        Class Code:       3869\n```\n\n#### The Job Class inside the Job Bulletin is different than the filename:\n```    \nJOB_CLASS_NO extracted from filename:  1207\nJOB_CLASS_NO inside the file  4123\nLine where job class number was found:   Class Code:       4123\n\nJOB_CLASS_NO extracted from filename:  1219\nJOB_CLASS_NO inside the file  1249\nLine where job class number was found:     Class Code:      1249\n\nJOB_CLASS_NO extracted from filename:  3573\nJOB_CLASS_NO inside the file  3753\nLine where job class number was found:   Class Code:       3753\n\nJOB_CLASS_NO extracted from filename:  4113\nJOB_CLASS_NO inside the file  4123\nLine where job class number was found:   Class Code:       4123\n\nJOB_CLASS_NO extracted from filename:  7260\nJOB_CLASS_NO inside the file  9653\nLine where job class number was found:   Class Code:       9653\n\nJOB_CLASS_NO extracted from filename:  3231\nJOB_CLASS_NO inside the file  3980\nLine where job class number was found:   Class Code:       3980\n\nJOB_CLASS_NO extracted from filename:  1114\nJOB_CLASS_NO inside the file  2496\nLine where job class number was found:   Class Code:       2496\n\nJOB_CLASS_NO extracted from filename:  4313\nJOB_CLASS_NO inside the file  5885\nLine where job class number was found:   Class Code:       5885\n```\n\n#### Job Bulletins that do not follow the standard format:\n``` \nJOB_CLASS_NO extracted from filename:  1794\nJOB_CLASS_NO inside the file  4   \nLine where job class number was found:   Class Code:       1794   \n\nJOB_CLASS_NO extracted from filename:  3684\nJOB_CLASS_NO inside the file      \nLine where job class number was found:   Class Code:       3684                                                                                                \n\nJOB_CLASS_NO extracted from filename:  2444\nJOB_CLASS_NO inside the file      \nLine where job class number was found:   Class Code: 2444      \n\nJOB_CLASS_NO extracted from filename:  7980\nJOB_CLASS_NO inside the file  980 \nLine where job class number was found:   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        Class Code:       7980 \n\nJOB_CLASS_NO extracted from filename:  2232\nJOB_CLASS_NO inside the file      \nLine where job class number was found:     Class Code: 2232                                                                            \n\nJOB_CLASS_NO extracted from filename:  7558\nJOB_CLASS_NO inside the file  558\t\nLine where job class number was found:            Class Code:        7558\t\n\nJOB_CLASS_NO extracted from filename:  3338\nJOB_CLASS_NO inside the file      \nLine where job class number was found:   \t\t\t\t\t\t\t\tClass Code:       3338    \n\nJOB_CLASS_NO extracted from filename:  3199\nJOB_CLASS_NO inside the file  99\t \nLine where job class number was found:                \t\t\t\t\t\t\t\t                   Class Code:       3199\t \n\nJOB_CLASS_NO extracted from filename:  3341\nJOB_CLASS_NO inside the file      \nLine where job class number was found:   Class Code:       3341                                                                                                           \n\nJOB_CLASS_NO extracted from filename:  1428\nJOB_CLASS_NO inside the file  0-17\nLine where job class number was found:   \t\t\t\t\t                                       Class Code:       1428\t \t\t                                                                                          Open Date:  10-20-17\n\nJOB_CLASS_NO extracted from filename:  1937\nJOB_CLASS_NO inside the file  7   \nLine where job class number was found:   \t                                                                                                                             Class Code:     1937   \n\nJOB_CLASS_NO extracted from filename:  3354\nJOB_CLASS_NO inside the file      \nLine where job class number was found:                                                                                                                         Class Code:       3354    \n\nJOB_CLASS_NO extracted from filename:  2235\nJOB_CLASS_NO inside the file  4-16\nLine where job class number was found:                               \t\t                   Class Code:       2235                                         \t\t\t\t\t          Open Date:  03-04-16\n\nJOB_CLASS_NO extracted from filename:  4128\nJOB_CLASS_NO inside the file      \nLine where job class number was found:                                 \t\t\t\t\t\t\t                         Class Code:      4128    \n\nJOB_CLASS_NO extracted from filename:  1789\nJOB_CLASS_NO inside the file      \nLine where job class number was found:   Class Code:  1789     \n```"}}