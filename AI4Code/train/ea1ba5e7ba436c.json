{"cell_type":{"314f8941":"code","641e5432":"code","e0cd3413":"code","4c041e35":"code","3b0784ce":"code","2200299a":"code","74b4a363":"code","31e20e29":"code","4ea7f970":"code","5a7b9513":"code","94a86453":"code","86838b93":"code","acfc5d3d":"code","70b90910":"markdown","4cb12426":"markdown"},"source":{"314f8941":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","641e5432":"timesdata = pd.read_csv(\"..\/input\/timesData.csv\")","e0cd3413":"timesdata.info() # some informations about data","4c041e35":"timesdata.head(3) # first 3 universties","3b0784ce":"#go is plotly\ndf=timesdata.iloc[:100]\n\ntrace1 = go.Scatter(\n    x=df.world_rank,\n    y=df.citations,\n    mode = \"lines+markers\",\n    name=\"Citiations\",\n    marker = dict(color=\"rgba(250,0,0,0.6)\"),\n    text = df.university_name\n)\n\ntrace2 = go.Scatter(\nx=df.world_rank,\ny=df.teaching,\nmode=\"lines+markers\",\nname=\"Teaching\",\nmarker=dict(color=\"rgba(0,0,250,0.6)\"),\ntext= df.university_name\n)\n\ndata=[trace1,trace2]\nlayout=dict(title=\"Citation and Teaching\",\n           xaxis=dict(title=\"World Rank\",ticklen=3,zeroline= False)\n           )\nfig = dict(data=data,layout=layout)\niplot(fig)","2200299a":"df2011 = timesdata[timesdata.year==2011].iloc[:100]\ndf2013 = timesdata[timesdata.year==2013].iloc[:100]\ndf2015 = timesdata[timesdata.year==2015].iloc[:100]\n\ntrace2011 = go.Scatter(\nx=df2011.world_rank,\ny=df2011.citations,\nmode=\"markers\",\nname=\"in 2011\",\nmarker=dict(color=\"rgba(0,0,0,0.6)\"),\ntext= df.university_name)\n\ntrace2013 = go.Scatter(\nx=df2013.world_rank,\ny=df2013.citations,\nmode=\"markers\",\nname=\"in 2013\",\nmarker=dict(color=\"rgba(35,56,190,0.6)\"),\ntext= df.university_name)\n\ntrace2015 = go.Scatter(\nx=df2015.world_rank,\ny=df2015.citations,\nmode=\"markers\",\nname=\"in 2015\",\nmarker=dict(color=\"rgba(255,2,69,0.6)\"),\ntext= df.university_name)\n\ndata=[trace2011,trace2013,trace2015]\n\nlayout=dict(title=\"Citations in 2011,2013 and 2015\",\n           xaxis=dict(title= 'World Rank',ticklen= 5))\nfig = dict(data=data,layout=layout)\niplot(fig)","74b4a363":"# prepare data frames\ndf2014 = timesdata[timesdata.year == 2014].iloc[:3]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","31e20e29":"df2016 = timesdata[timesdata.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(\",\",\".\")) for each in df2016.num_students]\nlabels = df2016.university_name\n\nfig = {\n  \"data\": [\n    {\"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .2,\n      \"type\": \"pie\"},],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.50,\n                \"y\": 1},]\n  }\n}\niplot(fig)\n","4ea7f970":"timesdata.head(5\n              )","5a7b9513":"d2011=timesdata.student_staff_ratio[timesdata.year==2011]\nd2012=timesdata.student_staff_ratio[timesdata.year==2012]\ntrace1 = go.Histogram(\n    x=d2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\n\ntrace1 = go.Histogram(\n    x=d2011,\n    opacity=0.55,\n    name = \"2011\",\n    \n    marker=dict(color='rgba(120, 150, 226, 250)'))\ntrace2 = go.Histogram(\n    x=d2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(171, 0, 96, 0.6)'))\n    \ndata=[trace1,trace2]\nlayout = go.Layout ( barmode=\"overlay\",\n                   title = \"Students and Staff Ratio in 2011-2012\",\n                   )\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","94a86453":"x2011 = timesdata.country[timesdata.year==2015]\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(\n    background_color=\"white\",\n    width = 512,\n    height=384,\n).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n\n","86838b93":"import plotly.figure_factory as ff\ndataframe=timesdata[timesdata.year ==2015]\ndata2015=dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"]=np.arange(1,len(data2015)+1)\nfig=ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","acfc5d3d":"trace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='cyan',                    \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","70b90910":"# Scatter Plot\n\n* Parameters\n\n    *     x = x axis\n    *     y = y axis\n    *     mode = type of plot like marker, line or line + markers\n    *     name = name of the plots\n    *     marker = marker is used with dictionary.\n    *     color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    *     text = The hover text (hover is curser)\n    *     data = is a list that we add traces into it\n    *     layout = it is dictionary.\n    *     title = title of layout\n    *     x axis = it is dictionary\n    *     title = label of x axis\n    *     ticklen = length of x axis ticks\n    *     zeroline = showing zero line or not\n    *     y axis = it is dictionary and same with x axis\n    *     fig = it includes data and layout\n    *     iplot() = plots the figure(fig) that is created by data and layout","4cb12426":"# LINE PLOT\n\n* :PARAMETERS\n\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary.\n    * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n    * data = is a list that we add traces into it\n    * layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n    * title = label of x axis\n    * ticklen = length of x axis ticks\n    * zeroline = showing zero line or not\n    * fig = it includes data and layout\n    * iplot() = plots the figure(fig) that is created by data and layout"}}