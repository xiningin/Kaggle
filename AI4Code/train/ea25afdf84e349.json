{"cell_type":{"7d25ed02":"code","84b6b688":"code","09114662":"code","3e2e4abc":"code","c2399236":"code","9d35454e":"code","1be36349":"code","675432c3":"code","ce91740d":"code","e68cbe16":"code","2c0b219d":"code","44dc8473":"code","8c4115c8":"code","74f30295":"code","a730c5d0":"code","3152499a":"code","bb424152":"code","4bc9a54b":"code","12460974":"code","2edcf080":"code","c23d0bb1":"code","953912f1":"code","2720e92a":"code","f42738ed":"code","9bd4b45b":"code","bca63ebd":"code","f9041fb5":"markdown","7e5402d2":"markdown","f0d67ce9":"markdown","76726302":"markdown","8b507b75":"markdown","84652241":"markdown","dc7361bd":"markdown","fc1eb1b9":"markdown","608be940":"markdown","74dc5eac":"markdown","1abac787":"markdown","467c385e":"markdown","71c64d10":"markdown","4eb91c0b":"markdown","fec8d344":"markdown","9d1d3704":"markdown","eeda10fb":"markdown","e56ac950":"markdown","e2bd790d":"markdown","f3f2daf8":"markdown","451226e5":"markdown","3cfb154c":"markdown","4ac6016c":"markdown","0a73e593":"markdown","7f82c5b0":"markdown","709d162a":"markdown","ae5cda37":"markdown","1e522c33":"markdown","3b0ea9b6":"markdown","8e6944d8":"markdown","3ca2a0c4":"markdown","913122e1":"markdown"},"source":{"7d25ed02":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","84b6b688":"df=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","09114662":"data=df.iloc[:20,:]\nfig = go.Figure(data=[go.Table(\n    header=dict(values=[['<b>show_id<\/b>'],['<b>type<\/b>'],['<b>title<\/b>'],['<b>director<\/b>'],['<b>country<\/b>'],['<b>date_added<\/b>'],\n                       ['<b>release_year<\/b>'],['<b>rating<\/b>'],['<b>duration<\/b>'],['<b>listed_in<\/b>'],['<b>Cast<\/b>'],['<b>description<\/b>']],\n                \n                line_color='red',\n                fill_color='black',\n                align=['left'],\n                font=dict(color='white', size=15),\n                ),\n    cells=dict(values=[data['show_id'], data['type'], data['title'],data['director'],data['country'],data['date_added'],\n                      data['release_year'], data['rating'], data['duration'],data['listed_in'],[],[]],\n               line_color='red',\n               fill=dict(color=['red', 'black']),\n               align=['left', 'center'],\n               font_size=13,\n               height=30,\n              font_color=\"white\"))\n])\nfig.update_layout(\nplot_bgcolor='#333', paper_bgcolor='#333')\nfig.show()","3e2e4abc":"df.info()","c2399236":"df.describe(include='O').T","9d35454e":"total =df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data=missing_data.drop((missing_data[missing_data['Total']==0]).index,0) \nmissing_data.head(20)\ndisplay(missing_data.head(20).style.background_gradient(cmap='Reds'))\n","1be36349":"null_cols =(df.isna().sum()[df.isna().sum()>0]).index\nmsno.matrix(df.loc[:,null_cols],labels=True,figsize=(20,12),fontsize=14,inline=False ,color=(0.5,0.1,0.1))\nplt.show()","675432c3":"df.drop_duplicates(inplace= True)","ce91740d":"data=pd.DataFrame( {\"Type\": df.type.value_counts().index, \"Counts\": df.type.value_counts().values})\n\n\nfig = px.pie(data, values='Counts', names='Type',title='Most content on Netflix',color_discrete_sequence=['#b20710', '#221f1f']\n            , hole=0.7)\nfig.update_traces(hovertemplate=None, textposition='outside',textinfo='percent+label', rotation=180)\nfig.update_layout(margin=dict(t=60, b=0, l=0, r=0), showlegend=False,plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),font=dict(size=17, color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#444\", font_size=13,font_family=\"Lato, sans-serif\")) \n                 \nfig.show()","e68cbe16":"def find_it(x):\n    result=[]\n    for i in x:\n        for j in i:\n            result.append(j)\n    return result\nActors=df.cast.dropna().apply(lambda x: x.split(','))\ntop_actros = pd.DataFrame(find_it(Actors.values),columns=[\"Actors\"])\ndata=pd.DataFrame( {\"Actors\":[i[0] for i in top_actros.value_counts()[0:10].index], \"Movie Counts\":top_actros.value_counts().values[0:10]} ).sort_values(by=\"Movie Counts\")\n\nfig = px.bar(data, y='Actors', x='Movie Counts', title=\"Top 10 most Appeared Actors on Netflix\" ,color_discrete_sequence=['#b20710'], text='Movie Counts')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \n\nfig.show()","2c0b219d":"Actors_Hollywood=df[df[\"country\"] == 'United States'].cast.dropna().apply(lambda x: x.split(','))\nTop_Actors_Hollywood = pd.DataFrame(find_it(Actors_Hollywood.values),columns=[\"Actors\"])\ndata=pd.DataFrame( {\"Actors\":[i[0] for i in Top_Actors_Hollywood.value_counts()[0:10].index], \"Movie Counts\":Top_Actors_Hollywood.value_counts().values[0:10]} )\n\n\n\n\nfig = px.bar(data, y='Actors', x='Movie Counts', title=\"Top 10 most Appeared HollyWood Actors on Netflix\" ,color_discrete_sequence=['#b20710'], text='Movie Counts')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \n\nfig.show()","44dc8473":"data=pd.DataFrame( {\"Directors\": df.director.value_counts()[0:10].index, \"Movie Counts\": df.director.value_counts()[0:10].values})\n\nfig = px.bar(data, y='Directors', x='Movie Counts', title=\"Top 10 Directors\" ,color_discrete_sequence=['#b20710'], text='Movie Counts')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \n\nfig.show()","8c4115c8":"\ndata=pd.DataFrame( {\"Directors\": df[df['country'] ==\"United States\"]['director'].value_counts()[0:10].index, \n                    \"Movie Counts\": df[df['country'] ==\"United States\"]['director'].value_counts()[0:10].values})\n\nfig = px.bar(data, y='Directors', x='Movie Counts', title=\"Top 10 HollyWood Directors\" ,color_discrete_sequence=['#b20710'], text='Movie Counts')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \n\nfig.show()","74f30295":"data=pd.DataFrame( {\"rating\": df.rating.value_counts().index, \"Counts\": df.rating.value_counts().values})\n\n\nfig = px.pie(data, values='Counts', names='rating',title='Most Rating on Netflix'\n        ,hole=0.6 ,  color_discrete_sequence=px.colors.sequential.RdBu )\nfig.update_traces(hovertemplate=None, textposition='inside',textinfo=\"percent+label\")\n\nfig.update_layout(margin=dict(t=50, b=50, l=0, r=0),plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),font=dict(size=15, color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#444\", font_size=13,font_family=\"Lato, sans-serif\")) \n\nfig.show()","a730c5d0":"directors=df.director.value_counts()[0:10].index.values\ndata=pd.DataFrame({\"Director\":[],\"Rating\":[],\"Movie\":[]})\nfor i in range(len(directors)):\n    rating=df[df[\"director\"]==directors[i]].groupby(['rating'])[\"rating\"].count().index.values\n    counts=df[df[\"director\"]==directors[i]].groupby(['rating'])[\"rating\"].count().values\n    \n    for k in range(len(rating)):\n        data = data.append({'Director': directors[i] , \"Rating\":rating[k],\"Movie\": counts[k] }, ignore_index=True)\n\nfig = px.bar(data, x=\"Movie\",y=\"Director\", color=\"Rating\", title=\"Most Rating of Most Directors\" , color_discrete_sequence=px.colors.sequential.RdBu , text='Rating')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \nfig.show()\n","3152499a":"directors=df[df['country'] ==\"United States\"]['director'].value_counts()[0:10].index.values\ndata=pd.DataFrame({\"Director\":[],\"Rating\":[],\"Movie\":[]})\nfor i in range(len(directors)):\n    rating=df[df[\"director\"]==directors[i]].groupby(['rating'])[\"rating\"].count().index.values\n    counts=df[df[\"director\"]==directors[i]].groupby(['rating'])[\"rating\"].count().values\n    \n    for k in range(len(rating)):\n        data = data.append({'Director': directors[i] , \"Rating\":rating[k],\"Movie\": counts[k] }, ignore_index=True)\n\nfig = px.bar(data, x=\"Movie\",y=\"Director\", color=\"Rating\", title=\"Most Rating of Most HollyWood Directors\" , color_discrete_sequence=px.colors.sequential.RdBu , text='Rating')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \nfig.show()\n\n","bb424152":"movie=df[df.type ==\"Movie\"].groupby([\"rating\"]).type.count()\ntv=df[df.type ==\"TV Show\"].groupby([\"rating\"]).type.count()\nmoviedf=pd.DataFrame({ \"rating\":movie.index.values , \"count\":movie.values})\nmoviedf[\"Type\"]=\"Movie\"\ntvdf=pd.DataFrame({ \"rating\":tv.index.values , \"count\":tv.values})\ntvdf[\"Type\"]=\"TV Show\"\ndata=pd.concat([moviedf, tvdf])\ndata=data.sort_values(\"count\" , ascending= False)\n\nfig = px.bar(data, x=\"rating\",y=\"count\", color=\"Type\", title=\"The Type of Rating Content\" , color_discrete_sequence=['#b20710', '#221f1f'] , text='count')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) \nfig.show()\n\n","4bc9a54b":"data=df[[\"type\",\"rating\"]]\ndata = data.dropna()\n\nfig_sunburst = px.sunburst(data,\n                           path=['rating', 'type'],\n                           template='seaborn',\n                           maxdepth=2,\n                           title='The Type of Rating Content \"Percentage\"',\n                           color_discrete_sequence=px.colors.sequential.RdBu)\nfig_sunburst.update_traces(textinfo='label+percent entry')\nfig_sunburst.update_layout(margin=dict(t=80, b=0, l=70, r=40),plot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) ","12460974":"data = dict(\n    number=df.country.value_counts().values[0:10],\n    country=df.country.value_counts().index.values[0:10])\nfig = px.funnel(data, x='number', y='country',color_discrete_sequence=['#b20710'], title='Top Countries content Netflix')\n\nfig.update_layout(margin=dict(t=60, b=20, l=70, r=40),\n                        xaxis_title=' ', yaxis_title=\" \",\n                        plot_bgcolor='#333', paper_bgcolor='#333',\n                        title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                        font=dict(color='#8a8d93'),\n                        hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.show()","2edcf080":"from plotly.offline import init_notebook_mode, iplot\n\ncountry_codes = {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}\n\n## countries \nfrom collections import Counter\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\n    \ndef geoplot(ddf):\n    country_with_code, country = {}, {}\n    shows_countries = \", \".join(ddf['country'].dropna()).split(\", \")\n    for c,v in dict(Counter(shows_countries)).items():\n        code = \"\"\n        if c.lower() in country_codes:\n            code = country_codes[c.lower()]\n        country_with_code[code] = v\n        country[c] = v\n\n    data = [dict(\n            type = 'choropleth',\n            locations = list(country_with_code.keys()),\n            z = list(country_with_code.values()),\n            colorscale = [[0,\"rgb(5, 10, 172)\"],[0.65,\"rgb(40, 60, 190)\"],[0.75,\"rgb(70, 100, 245)\"],\\\n                        [0.80,\"rgb(90, 120, 245)\"],[0.9,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict (\n                    color = 'gray',\n                    width = 0.5\n                ) ),\n            colorbar = dict(\n                autotick = False,\n                title = '',plot_bgcolor='#333', paper_bgcolor='#333'),\n          ) ]\n\n    layout = dict(\n\n        title = '',\n        geo = dict(\n            showframe = False,\n            showcoastlines = False,\n            projection = dict(\n                type = 'Mercator'\n            )\n        )\n    )\n\n    fig = dict( data=data, layout=layout )\n\n    iplot( fig, validate=False, filename='d3-world-map' )\n\n    return country\n\ncountry_vals = geoplot(df)\ntabs = Counter(country_vals).most_common(25)","c23d0bb1":"data=df[[\"country\",\"rating\"]]\ndata = data.dropna()\ntop_c=data.country.value_counts()[0:5].index.values\ndata.country=data.country.apply(lambda x: \"others\" if x != top_c[0] and x != top_c[1] \n                                and x != top_c[2] and x != top_c[3] and x != top_c[4] else x)\nfig_sunburst = px.sunburst(data,\n                           path=['country', 'rating'],\n                           template='seaborn',\n                           maxdepth=2,\n                           title='Content-Rating of Countries  ',\n                           color_discrete_sequence=px.colors.sequential.RdBu)\nfig_sunburst.update_traces(textinfo='label+percent entry')\nfig_sunburst.update_layout(margin=dict(t=80, b=0, l=70, r=40),plot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\")) ","953912f1":"netflix_fr=df[df['country']=='Egypt']\nnannef=netflix_fr.dropna()\nfig = px.treemap(nannef, path=['country','director'],\n                  color='director', hover_data=['director','title'],color_continuous_scale='Purples')\nfig.update_layout(title=' Top Egyptian Directors ',\n                  margin=dict(t=50, b=0, l=70, r=40),\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#fff', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#444\", font_size=13, font_family=\"Lato, sans-seri\"))\nfig.show()","2720e92a":"data_movie=df[df[\"type\"]==\"Movie\"][\"release_year\"].value_counts().sort_index()\ndata_tv=df[df[\"type\"]==\"TV Show\"][\"release_year\"].value_counts().sort_index()\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=data_movie.index.values, y=data_movie.values ,name=\"Movie\",marker_color=\"#b20710\"))\nfig.add_trace(go.Bar(x=data_tv.index.values, y=data_tv.values,name=\"TV Show\",marker_color=\"#221f1f\"))\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\"),title_text='Release year') \n\nfig.show()\n","f42738ed":"movie=df[df.type==\"Movie\"]\nmovie=pd.to_datetime(movie[\"date_added\"]).dt.strftime('%Y-%m')\ntv_show=df[df.type==\"TV Show\"]\ntv_show=pd.to_datetime(tv_show[\"date_added\"]).dt.strftime('%Y-%m')\nmovie=pd.DataFrame({\"Time_Added\":movie.value_counts().index.values ,\"Movies\": movie.value_counts().values}).sort_values(by=\"Time_Added\")\ntv_show=pd.DataFrame({\"Time_Added\":tv_show.value_counts().index.values ,\"TV_Shows\": tv_show.value_counts().values}).sort_values(by=\"Time_Added\")\ntotal=pd.to_datetime(df[\"date_added\"]).dt.strftime('%Y-%m')\ntotal=pd.DataFrame({\"Time_Added\":total.value_counts().index.values ,\"total\": total.value_counts().values}).sort_values(by=\"Time_Added\")\n\nfig = go.Figure()\n\nfig = go.Figure(data=go.Scatter(x=movie.Time_Added ,y=movie.Movies,name=\"Movie\",  mode='lines+markers'\n                               ,line = dict(color='blue', width=3)))\nfig.add_trace(go.Scatter(x=tv_show.Time_Added, y=tv_show.TV_Shows,name=\"TV Show\",mode='lines+markers',\n                        line = dict(color='black', width=3)))\nfig.add_trace(go.Scatter(x=total.Time_Added, y=total.total,name=\"Total\",mode='lines+markers',\n                        line = dict(color='red', width=3)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(margin=dict(t=80, b=0, l=70, r=40),hovermode=\"y unified\",xaxis_title=' ', yaxis_title=\" \", height=400,\nplot_bgcolor='#333', paper_bgcolor='#333',title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\nfont=dict(color='#8a8d93'),legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\nhoverlabel=dict(bgcolor=\"black\", font_size=15, font_family=\"Lato, sans-serif\"),title_text='Date added') \nfig.show()","9bd4b45b":"from wordcloud import WordCloud\nfrom PIL import Image\nimport random\nimport matplotlib.pyplot as plt\nimport requests\n\ntext = str(list(df['description'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\ndef red_color_func(word, font_size, position, orientation, random_state = None, **kwargs):\n    return \"hsl(0, 100%%, %f%%)\" % random.randint(25, 40)\n\nplt.rcParams['figure.figsize'] = (20, 20)\nwordcloud = WordCloud(background_color = 'white', width = 1400,  height = 1400, max_words = 170).generate(text)\n\nwordcloud.recolor(color_func = red_color_func)\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","bca63ebd":"fig = px.histogram(df,  x=\"duration\",\n                   marginal=\"box\",title=\"Durations of Netflix Contents\",\n                 color_discrete_sequence=['red'])\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(\n                      xaxis_title=' ', yaxis_title=\" \",\n                      plot_bgcolor='#333', paper_bgcolor='#333',\n                      title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                      font=dict(color='#8a8d93'))\nfig.show() ","f9041fb5":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What is the most release year of Netflix content? and what is a type of it?","7e5402d2":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Now Let's Understanding The Data\n<\/p>","f0d67ce9":"![](https:\/\/cdn.dribbble.com\/users\/1687718\/screenshots\/3597876\/media\/897b03968d51de3bdf312698438828f8.gif)","76726302":"**Netflix was founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California. Netflix's initial business model included DVD sales and rental by mail, but Hastings abandoned the sales about a year after the company's founding to focus on the initial DVD rental business**\n.                                                                                                                                                          \n[Source](https:\/\/en.wikipedia.org\/wiki\/Netflix)","8b507b75":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Time to  Dealing with the Missing Data ","84652241":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">In these Directors, What is their most Rating content on Netflix?","dc7361bd":"### Outlining the data analysis process\n\n**Six phases of data analysis**\n**(Ask, Prepare, Process, Analyze, Share, Act)**\n\n**Data analysis isn't a life cycle. It's the process of analyzing data.**\n\n\n\n\n[Check this ](https:\/\/github.com\/brendensong\/Google-Data-Analytics-Professional-Certificate\/wiki\/1.3.2.Outlining-the-data-analysis-process)","fc1eb1b9":" <p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">In these HollyWood Directors, What is their most Rating content on Netflix?","608be940":"<p style=\" font-family:newtimeroman; font-size:150%; color:red; text-align:center; border-radius: 15px 50px;\">Please upvote if you liked the kernel! \ud83d\ude0a","74dc5eac":"**All type of Elements of the data is objects except release year ,one of the main things there is 2 types and 14 Rating  of shows .** ","1abac787":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What is the most type of content on Netflix?","467c385e":"**OO That's a big number, 30% of directors are missing and 9% of cast and country 6.5% Unknown .** \n","71c64d10":"<p style=\"background-color:red; font-family:newtimeroman; font-size:500%; color:black; text-align:center; border-radius: 15px 50px;\">Netflix Data  Aalysis \ud83d\udcfa<\/p>","4eb91c0b":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\"> What actors have been in HollyWood movies on Netflix?","fec8d344":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">In these countries, What is the most Rating contents ?","9d1d3704":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What is the Egyptian contents on netflix?","eeda10fb":"**First Check it**","e56ac950":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Which countries have the Most Netflix Content ?\n","e2bd790d":" <p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Netflix beginning \ud83c\udf9e <\/p>","f3f2daf8":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\"> In these Rating, What is the Type contents  on Netflix ?","451226e5":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What is the most Rating of Contents on Netflix?","3cfb154c":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\"> What are most words in the description of content ?","4ac6016c":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">","0a73e593":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What actors have been in the most movies on Netflix?","7f82c5b0":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Directors, Who have the most HollyWood Contents on Netflix ? ","709d162a":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\"> What is the most duration of contents on Netflix ?","ae5cda37":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Data Analysis","1e522c33":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">Directors, Who have the most Contents on Netflix ?","3b0ea9b6":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">What is the most Date added of Netflix content? and what is a type of content?","8e6944d8":"<p style=\" font-family:newtimeroman; font-size:250%; color:red; text-align:left; border-radius: 15px 50px;\">First: Reading Data<\/p>","3ca2a0c4":"![](https:\/\/c.tenor.com\/oqWCP_B1NtkAAAAC\/netflix-valentine.gif)","913122e1":"**The Elements of data doesn't need to explain so we gonna skip this step**"}}