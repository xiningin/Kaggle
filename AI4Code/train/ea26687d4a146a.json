{"cell_type":{"74491876":"code","4d7a3bbf":"code","a0143c55":"code","4eaf6ab1":"code","78b38bd1":"code","0a69c85c":"code","2c519e0f":"code","64b49aae":"code","41d354b4":"code","4a46d7b3":"code","ae8b504f":"code","ecfc7b76":"code","15cc7c73":"code","393601ed":"code","38cdfe60":"code","271f4a60":"code","2e5e7307":"code","37aaa716":"code","35de4091":"code","257ba6e8":"code","ffc4bb63":"code","980e3c8c":"code","6bfc8aec":"code","195c69e2":"code","f1fc3592":"code","d2e41c27":"code","7803c11a":"code","fa478a95":"code","b5852b6b":"code","a72faae7":"code","d8de916b":"code","ade8f988":"code","49e66150":"code","ff0490d6":"code","403eeb27":"code","2f7d69e5":"code","d99c2799":"code","591454c4":"code","26f66fa1":"code","189f66a2":"code","6b62e648":"code","9c6f98bf":"code","5c3b0f9d":"code","b3bf1a6c":"code","3e8f562b":"code","8f7c0bb3":"code","878e9912":"code","c139fe26":"code","41ac2725":"code","6d396fb9":"code","e4e2957d":"code","d166a182":"code","9af86d55":"code","a73c6fda":"code","100eef36":"code","e5594b0d":"code","b68c5946":"code","1fb16b26":"code","e7210613":"code","8b204369":"code","03c8b28c":"code","86dcd51b":"markdown"},"source":{"74491876":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nimport seaborn as sn\nfrom sklearn.metrics import  classification_report\nimport warnings\nwarnings.filterwarnings('ignore')\n","4d7a3bbf":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","a0143c55":"print('Train dataset \\n',train_df.columns)\nprint('Test dataset \\n',test_df.columns)","4eaf6ab1":"train_df.info()","78b38bd1":"test_df.info()","0a69c85c":"train_df.shape","2c519e0f":"test_df.shape","64b49aae":"train_df.describe()","41d354b4":"train_df.sample(10)","4a46d7b3":"print('Train dataset wiht null values\\n', train_df.isnull().sum())","ae8b504f":"print('Test dataset wiht null values\\n',test_df.isnull().sum())","ecfc7b76":"sn.heatmap(train_df.isnull(),yticklabels=False,cbar=False)","15cc7c73":"train_df.drop(['Age', 'Cabin'],axis=1,inplace=True)\ntest_df.drop(['Age', 'Cabin'],axis=1,inplace=True)","393601ed":"train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace = True)\n    \ntest_df['Embarked'].fillna(test_df['Embarked'].mode()[0], inplace = True)    ","38cdfe60":"print (\"train_df \\n\", train_df.isnull().sum())\nprint(\"*\"*18)\nprint (\"test_df \\n\", test_df.isnull().sum())","271f4a60":"drop_column = ['Fare', 'Ticket','Name']\ntrain_df.drop(drop_column, axis=1, inplace = True)\ntest_df.drop(drop_column, axis=1, inplace = True)","2e5e7307":"print('Train dataset \\n',train_df.columns)\nprint('Test dataset \\n',test_df.columns)","37aaa716":"train_df.Embarked","35de4091":"train_df['Embarked'] = train_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntest_df['Embarked'] = test_df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n","257ba6e8":"train_df['Sex'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ntest_df['Sex'] = test_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","ffc4bb63":"train_df.Parch","980e3c8c":"train_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","6bfc8aec":"train_df[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","195c69e2":"train_df[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f1fc3592":" sn.barplot(x=\"Sex\", y=\"Survived\",palette=\"ch:.25\",  data= train_df)","d2e41c27":" sn.barplot(x=\"Sex\", y=\"Survived\", hue = 'Pclass',palette=\"ch:.25\",  data= train_df)","7803c11a":" sn.barplot(x=\"Sex\", y=\"Survived\", hue = 'Embarked',palette=\"ch:.25\",  data= train_df)","fa478a95":" sn.barplot(x=\"Sex\", y=\"Survived\", hue = 'Embarked',palette=\"ch:.25\",  data= train_df)","b5852b6b":"train_df.columns","a72faae7":"cmap = sn.diverging_palette(220,10,as_cmap = True)\nsn.heatmap(train_df[['Survived', 'Pclass', 'Sex', 'SibSp', 'Parch',\n       'Embarked']].corr(),vmax =.3, center = 0, cmap=cmap, square =True,annot = True , linewidths =.5, cbar_kws={\"shrink\":.9})","d8de916b":"train_df.info()","ade8f988":"train_df.columns","49e66150":"test_df.columns","ff0490d6":"train_df.head(5)","403eeb27":"test_df.head(5)","2f7d69e5":"Y= train_df.Survived","d99c2799":"X=train_df.drop(['Survived'] , axis =1 )","591454c4":"from sklearn.model_selection import train_test_split\nX_train ,X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.3)","26f66fa1":"from sklearn import tree\n\ndt = tree.DecisionTreeClassifier(criterion = 'gini',random_state = 0)","189f66a2":"dt.fit(X_train,y_train)","6b62e648":"dt.score(X_train, y_train)","9c6f98bf":"dt.score(X_test, y_test)","5c3b0f9d":"y_pred = dt.predict(X_test)","b3bf1a6c":"print(classification_report(y_test, y_pred))","3e8f562b":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","8f7c0bb3":"lr.fit(X_train, y_train)","878e9912":"lr.score(X_train, y_train)","c139fe26":"lr.score(X_test, y_test)","41ac2725":"y_pred_lr = lr.predict(X_test)","6d396fb9":"print(classification_report(y_test, y_pred_lr))","e4e2957d":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators = 100,max_depth=5, random_state=3)","d166a182":"clf.fit(X_train, y_train)","9af86d55":"clf.score(X_train , y_train)","a73c6fda":"clf.score(X_test, y_test)","100eef36":"y_pred_clf = clf.predict(X_test)","e5594b0d":"print(classification_report(y_test, y_pred_clf))","b68c5946":"clf.predict(test_df)","1fb16b26":"prediction =clf.predict(test_df)","e7210613":"output = pd.DataFrame({'PassengerID' : test_df.PassengerId, 'Survived': prediction})","8b204369":"output.to_csv('submission.csv' , header = True, index = False) ","03c8b28c":"output.head(10)","86dcd51b":"Prediction"}}