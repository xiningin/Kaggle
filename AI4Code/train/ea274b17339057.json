{"cell_type":{"d08a564e":"code","0f402bae":"code","2c6ea8d6":"code","00b63f1a":"code","9883d38d":"code","7f2dfc0b":"code","ea5657bc":"code","9506ff6a":"code","6aaa70ee":"code","e87d5637":"code","3edec8df":"code","99056b95":"code","b6091258":"code","d5756c58":"code","838c8334":"code","1c0728e1":"code","9e9beb6e":"code","da2be65a":"code","635e118a":"code","ac2cbc7e":"code","b0e37580":"code","fd740d8d":"code","b0adfdf8":"code","ce02b793":"code","bcf296ce":"code","0e3e640d":"code","ad7e86b4":"code","7561152a":"code","871b6a98":"markdown"},"source":{"d08a564e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nprint('yolo')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print('fine')\n    for filename in filenames:\n        \n        print(os.path.join(dirname, filename))\n        print('work')\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f402bae":"print('hello world')","2c6ea8d6":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","00b63f1a":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","9883d38d":"train_data['Parch']","7f2dfc0b":"train_data.isnull().sum()","ea5657bc":"train_data['Parch'].value_counts()","9506ff6a":"women_alive = train_data.loc[train_data['Sex']=='female']['Survived']\nprint(sum(women_alive))\nprint(len(women_alive))\nprint(sum(women_alive)\/len(women_alive))","6aaa70ee":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","e87d5637":"train_data = train_data.drop(['Name','Ticket','Cabin'],axis=1)","3edec8df":"import seaborn as sb","99056b95":"sb.boxplot(x='SibSp', y ='Age',data=train_data )","b6091258":"Parch_group = train_data.groupby(train_data['Parch'])\nParch_group.mean()\ntrain_data.info()","d5756c58":"def approx_age(cols):\n    age =cols[0]\n    parch = cols[1]\n    if pd.isnull(age):\n        if parch ==0:\n            age = 32\n        if parch ==1:\n            age = 24\n        if parch ==2:\n            age = 17\n        if parch ==3:\n            age = 33\n        if parch ==4:\n            age = 44\n        if parch ==5:\n            age = 39\n        if parch ==6:\n            age = 43\n    return age","838c8334":"train_data['Age'] = train_data[['Age','Parch']].apply(approx_age,axis=1)\ntrain_data.info()","1c0728e1":"train_data.dropna(inplace=True)\ntrain_data.reset_index(inplace = True, drop = True)\ntrain_data.info()","9e9beb6e":"train_data.head()\n","da2be65a":"#covert object type to binary\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder= LabelEncoder()\ngender_encoded = label_encoder.fit_transform(train_data['Sex'])\n\ngender_df = pd.DataFrame(gender_encoded,columns=['male_gender'])\ngender_df.head()","635e118a":"#convert object type to different binary columns\nembark_encoded = label_encoder.fit_transform(train_data['Embarked'])\nembark_encoded[0:10]","ac2cbc7e":"train_data = train_data.drop(['Embarked'], axis=1)\ntrain_data.head()\n","b0e37580":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nx_test = test_data_new.drop(['Survived'], axis=1)\n","fd740d8d":"\nfrom sklearn.preprocessing import OneHotEncoder\nbinary_encoder = OneHotEncoder(categories='auto')\nembarked_1hot = binary_encoder.fit_transform(embark_encoded.reshape(-1,1))\nembarked_1hot_mat = embarked_1hot.toarray()\nembarked_DF = pd.DataFrame(embarked_1hot_mat, columns = ['C', 'Q', 'S'])\n\ntrain_data_new= pd.concat([train_data, gender_df, embarked_DF], axis=1).astype(float)\ntrain_data_new.info()","b0adfdf8":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_predict","ce02b793":"LogReg = LogisticRegression(solver = 'liblinear')","bcf296ce":"X_train, X_test, y_train, y_test = train_test_split(train_data_new.drop('Survived', axis=1),\n                                                   train_data_new['Survived'], test_size=0.2,\n                                                   random_state=200)","0e3e640d":"print(X_train.shape)\nprint(y_train.shape)","ad7e86b4":"LogReg.fit(X_train,y_train)","7561152a":"y_pred = LogReg.predict(X_test)","871b6a98":"# ()"}}