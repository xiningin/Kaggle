{"cell_type":{"f557c680":"code","00961455":"code","80ca7c11":"code","2e1e0c39":"code","ba81faaf":"code","3fe5fcf9":"code","3f08ece1":"code","96f8de3f":"code","65e89c19":"code","1255b619":"code","22bc3823":"code","2a8e6bf5":"code","13e929f6":"code","a7d4c5a7":"code","6ef0b314":"markdown","f145ba03":"markdown","4e5085d4":"markdown","8aa8f62d":"markdown","7cad90e1":"markdown","6121f6ea":"markdown","c8476b1a":"markdown","983ecb36":"markdown","a7cda380":"markdown","e282f39e":"markdown","3236d781":"markdown"},"source":{"f557c680":"import os\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, Input, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, classification_report\n\ntf.random.set_seed(42)","00961455":"input_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/'\n\ntrain_dir = os.path.join(input_dir, 'train')\nval_dir = os.path.join(input_dir, 'val')\ntest_dir = os.path.join(input_dir, 'test')\n\npneumonia_train_dir = os.path.join(train_dir, 'PNEUMONIA')\npneumonia_val_dir = os.path.join(val_dir, 'PNEUMONIA')\npneumonia_test_dir = os.path.join(test_dir, 'PNEUMONIA')\n\nnormal_train_dir = os.path.join(train_dir, 'NORMAL')\nnormal_val_dir = os.path.join(val_dir, 'NORMAL')\nnormal_test_dir = os.path.join(test_dir, 'NORMAL')\n\npneumonia_train_images = len(os.listdir(pneumonia_train_dir))\npneumonia_val_images = len(os.listdir(pneumonia_val_dir))\npneumonia_test_images = len(os.listdir(pneumonia_test_dir))\n\nnormal_train_images = len(os.listdir(normal_train_dir))\nnormal_val_images = len(os.listdir(normal_val_dir))\nnormal_test_images = len(os.listdir(normal_test_dir))\n\ntrain_size = pneumonia_train_images + normal_train_images\ntest_size = pneumonia_test_images + normal_test_images\nval_size = pneumonia_val_images + normal_val_images\n\nprint(f'Total training images: {pneumonia_train_images + normal_train_images}')\nprint(f'Pneumonia: {pneumonia_train_images}')\nprint(f'Normal: {normal_train_images}')\nprint('---')\nprint(f'Total testing images: {pneumonia_test_images + normal_test_images}')\nprint(f'Pneumonia: {pneumonia_test_images}')\nprint(f'Normal: {normal_test_images}')\nprint('---')\nprint(f'Total validation images: {pneumonia_val_images + normal_val_images}')\nprint(f'Pneumonia: {pneumonia_val_images}')\nprint(f'Normal: {normal_val_images}')","80ca7c11":"IMG_HEIGHT = 150\nIMG_WIDTH = 150\nBATCH_SIZE = 16\nEPOCHS = 15\nCHECKPOINT_FILEPATH = '\/tmp\/checkpoint'","2e1e0c39":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(directory=train_dir,\n                                                    target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                    batch_size=BATCH_SIZE,\n                                                    class_mode='binary')\n\ntest_generator = test_datagen.flow_from_directory(directory=test_dir,\n                                                  target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                  batch_size=BATCH_SIZE,\n                                                  class_mode='binary')\n\nval_generator = test_datagen.flow_from_directory(directory=val_dir,\n                                                 target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                 batch_size=BATCH_SIZE,\n                                                 class_mode='binary')","ba81faaf":"CLASS_NAMES_DICT = {value: name for name, value in train_generator.class_indices.items()}\ndef show_batch(image_batch, label_batch):\n    plt.figure(figsize=(10,10))\n    for n in range(15):\n        ax = plt.subplot(5,5,n+1)\n        plt.imshow(image_batch[n])\n        plt.title(CLASS_NAMES_DICT[label_batch[n]])\n        plt.axis('off')","3fe5fcf9":"image_batch, label_batch = next(train_generator)\nshow_batch(image_batch, label_batch)","3f08ece1":"def create_model():\n    model = Sequential()\n\n    model.add(Input(shape=(IMG_WIDTH, IMG_HEIGHT, 3)))\n\n    model.add(Conv2D(16, (3,3), activation='relu'))\n    model.add(MaxPooling2D(2,2))\n    model.add(Dropout(0.2))\n\n    model.add(Conv2D(32, (3,3), activation='relu'))\n    model.add(MaxPooling2D(2,2))\n\n    model.add(Conv2D(64, (3,3), activation='relu'))\n    model.add(MaxPooling2D(2,2))\n    model.add(Dropout(0.2))\n\n    model.add(Flatten())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    model.compile(optimizer='rmsprop', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])\n    \n    return model","96f8de3f":"model = create_model()\nmodel.summary()","65e89c19":"# clear session variables\ntf.keras.backend.clear_session()\n\n# checkpoint callback\nmodel_checkpoint_callback = ModelCheckpoint(filepath=CHECKPOINT_FILEPATH,\n                                            save_weights_only=True,\n                                            monitor='val_accuracy',\n                                            mode='max',\n                                            save_best_only=True)\n\n# training\nhistory = model.fit(train_generator,\n                    steps_per_epoch=train_size\/\/BATCH_SIZE,\n                    validation_data=val_generator, \n                    validation_steps=val_size\/\/BATCH_SIZE,\n                    epochs=EPOCHS,\n                    verbose=1,\n                    callbacks=[model_checkpoint_callback])","1255b619":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepoch_range = range(len(acc))\n\nplt.plot(epoch_range, acc)\nplt.plot(epoch_range, val_acc)\nplt.title('Training and Validation Accuracy')\n\nplt.figure()\n\nplt.plot(epoch_range, loss)\nplt.plot(epoch_range, val_loss)\nplt.title('Training and Validation Loss')","22bc3823":"# load weights of the best checkpoint\nmodel.load_weights(CHECKPOINT_FILEPATH)\n\n# save best checkpoint as hdf5\nmodel.save('\/tmp\/best_model.hdf5')\n\n# load the best model\nbest_model = tf.keras.models.load_model('\/tmp\/best_model.hdf5')\n\n# calculate test accuracy using the best model\nloss, acc = best_model.evaluate_generator(test_generator)\nprint(f'Testing Loss: {loss} | Testing Accuracy: {acc}')","2a8e6bf5":"actual_labels, predicted_labels = [],[]\nfor _ in range(len(test_generator)):\n    test_images, test_labels = next(test_generator)\n    actual_labels.append(test_labels)\n    predicted_labels.append(best_model.predict_classes(test_images).ravel())\n\nactual_labels = np.array(actual_labels, dtype=float).ravel()\npredicted_labels = np.array(predicted_labels, dtype=float).ravel()","13e929f6":"accuracy = accuracy_score(actual_labels, predicted_labels)\nprecision = precision_score(actual_labels, predicted_labels)\nrecall = recall_score(actual_labels, predicted_labels)\n\nprint(f'Accuracy: {accuracy} | Precision: {precision} | Recall: {recall}')","a7d4c5a7":"print(classification_report(actual_labels, predicted_labels))","6ef0b314":"## Model Definition\nA Simple TensorFlow Keras Sequential - Model Conv + MaxPool + FC","f145ba03":"## Data Summary\nNumber of samples in train, validation, and test directory - for normal and pneumonia cases.","4e5085d4":"## Plot Metrics History\nPlot loss and accuracy of the trained model. Note that the validation accuracy and loss are fluctuating - mostly due to the small size of validation set.","8aa8f62d":"## Data Generators\nTensorflow generators for augmenting and loading the data.","7cad90e1":"## Model Summary\nWe feed in 150 x 150 size images, which are reduced to 17 x 17 before flattened and fed into the FC layer.","6121f6ea":"## Constants\nTarget image size, batch size, and epochs.","c8476b1a":"## Save the Model\nSaves the best model by loading it from the checkpoint directory and uses it to calculate the testing loss and accuracy.","983ecb36":"## Display a batch of training images\nUses `train_generator` to load images and labels.","a7cda380":"## Training\nTrain the defined model using the training and validation data generators. The training uses a `ModelCheckpoint` callback to checkpoint the best model based on the `val_accuracy`.","e282f39e":"## Classification Report\nGet the actual and predicted labels for calculating the precision, recall score, and classification report.","3236d781":"# Chest XRay Classification using TensorFlow 2\nThis notebook demonstrates an implementation of convolution neural networks to detect pneumonia in x-ray images."}}