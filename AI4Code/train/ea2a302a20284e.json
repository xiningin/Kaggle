{"cell_type":{"f253e148":"code","73030d98":"code","d53b6b7d":"code","ff15c78b":"code","45d83f3a":"code","86301341":"code","1ed3349b":"code","9d8176ec":"code","bd59911e":"code","cb709726":"code","308800ef":"code","9254953d":"code","e4eab1ce":"code","1413c296":"code","0e203493":"code","cf54483a":"code","9d3a395d":"code","b9d99529":"code","9996d6ed":"code","c6a54519":"code","576df95d":"code","4c9b321b":"code","f92533cd":"code","70823953":"code","b050185f":"code","305c20a9":"code","fc3f419c":"code","941f40da":"code","f3db1013":"code","af63fc3a":"code","c33ecb55":"code","7816f3a3":"code","4aaaa390":"markdown","d51025ed":"markdown","f35bbc40":"markdown","1a5d99fc":"markdown","10ef98a5":"markdown","17327742":"markdown","ef57c097":"markdown","0b47c1cd":"markdown","4b19e885":"markdown","b2bce0f9":"markdown","28e4fff7":"markdown","d8e1c525":"markdown","f1eb54bc":"markdown","0ededd70":"markdown","4121d40f":"markdown"},"source":{"f253e148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73030d98":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfileNameTrain = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\nfileNameTest  = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\nfileNameSubm  = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv'\nfileNameDesc  = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt'\n\ndfTrain = pd.read_csv(fileNameTrain)\ndfTest  = pd.read_csv(fileNameTest)\ndfSubm  = pd.read_csv(fileNameSubm)\ndfDesc  = open(fileNameDesc,'r')\ndfDesc  = dfDesc.read().replace('\\t','     ').split('\\n')","d53b6b7d":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\n\nimport lightgbm as lgb\nprint(lgb.__version__)","ff15c78b":"dfDesc","45d83f3a":"pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_rows\", 100)\ndfTrain.describe(include = 'all').transpose()\ndfTest.describe(include = 'all').transpose()","86301341":"def checkDataQuanity(df,dataSet):\n    for col in df.columns:\n        \n        colVals = df[col]\n        colValsU= colVals.unique()\n        colValsType = colValsU.dtype\n        print(dataSet,colValsType,'\\t', col,3*'\\t', end='')\n        if colValsType == np.dtype('int64'):\n            posNan = np.where(np.isnan(colVals.to_numpy() ) == True)[0]\n            #Replace Nan\n            df = df.fillna(value={col: np.amin(colVals)})\n            if posNan.shape[0]>0:\n                print('nbr of NaN positions:',posNan.shape)\n            else:\n                print('clean')\n        elif colValsType == np.dtype('float64'):\n            posNan = np.where(np.isnan(colVals.to_numpy() ) == True)[0]\n            #Replace Nan\n            df = df.fillna(value={col: np.amin(colVals)})\n            if posNan.shape[0]>0:\n                print('nbr of NaN positions:',posNan.shape)\n            else:\n                print('clean')\n\n        elif colValsType == np.dtype('object'):\n            posNan = colVals.to_list()\n            df = df.fillna(value={col: 'NAN'})\n            if colVals.isnull().sum()>0:\n                print('nbr of NaN positions:',colVals.isnull().sum())\n            else:\n                print('clean',colVals.unique())\n                \n    print()\n    return df\n","1ed3349b":"dfTrainClean = checkDataQuanity(dfTrain,'TRAIN')\ndfTestClean  = checkDataQuanity(dfTest, 'TEST')","9d8176ec":"checkDataQuanity(dfTrainClean,'TRAINclean')\ncheckDataQuanity(dfTestClean, 'TESTclean')","bd59911e":"for dataset in [dfTrainClean, dfTestClean]:\n    dataset['TotalSF']           = dataset['TotalBsmtSF'] +        dataset['1stFlrSF']   + dataset['2ndFlrSF']\n    dataset['Total_sqr_footage'] = dataset['BsmtFinSF1']  +        dataset['BsmtFinSF2'] + dataset['1stFlrSF']      +        dataset['2ndFlrSF']\n    dataset['Total_Bathrooms']   = dataset['FullBath']    + (0.5 * dataset['HalfBath'])  + dataset['BsmtFullBath']  + (0.5 * dataset['BsmtHalfBath'])\n    dataset['Total_porch_sf']    = dataset['OpenPorchSF'] +        dataset['3SsnPorch']  + dataset['EnclosedPorch'] +        dataset['ScreenPorch']     + dataset['WoodDeckSF']\n    \n    dataset['haspool']      = dataset['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n    dataset['has2ndfloor']  = dataset['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n    dataset['hasgarage']    = dataset['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n    dataset['hasbsmt']      = dataset['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n    dataset['hasfireplace'] = dataset['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n    \nplt.plot(dfTrainClean['TotalSF'],dfTrainClean['Total_sqr_footage'],marker='+',linewidth=0);\nplt.plot(dfTestClean['TotalSF'],dfTestClean['Total_sqr_footage'],marker='.',linewidth=0);\nplt.grid(True)","cb709726":"print(dfTrainClean.columns.shape);","308800ef":"dataset, col = dfTrainClean,'1stFlrSF'\nq=dataset[col].quantile(0.999)\ndfOutlier1 = dataset[dataset[col] > q]\ndfOutlier1","9254953d":"dataset, col = dfTrainClean,'GrLivArea'\nq=dataset[col].quantile(0.999)\ndfOutlier2 = dataset[dataset[col] > q]\ndfOutlier2","e4eab1ce":"dataset, col = dfTrainClean,'TotRmsAbvGrd'\nq=dataset[col].quantile(0.9925)\ndfOutlier3 = dataset[dataset[col] > q]\ndfOutlier3","1413c296":"dfTrainClean = dfTrainClean.drop([496,1298,523,635])","0e203493":"NROWS=30\nNCOLS=3\ncolNames=sorted(dfTrainClean.columns)\nfig, axAll = plt.subplots(nrows=NROWS, ncols=NCOLS, figsize=(22,120))\nidx=0\nfor r in range(NROWS):\n    for c in range(NCOLS):\n        if idx < len(colNames):\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfTrainClean,ax=axAll[r,c],edgecolor='blue',  linewidth=0.5,hue=\"1stFlrSF\")\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfOutlier1,   ax=axAll[r,c],   color='chartreuse')\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfOutlier2,   ax=axAll[r,c],   color='magenta')\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfOutlier3,   ax=axAll[r,c],   color='aqua')\n            axAll[r][c].grid(True)\n        idx=idx+1","cf54483a":"colNames=sorted(dfTrainClean.columns)\n\nfor col in colNames:\n    colValsUTrain = dfTrainClean[col].unique()\n    if colValsUTrain.dtype != np.dtype('object'):\n        \n        if col not in ('SalePrice','Id'):\n            estMedian = dfTrainClean[col].median()\n            dfTrainClean[col] = dfTrainClean[col]- estMedian\n            dfTestClean[col]  = dfTestClean[col] - estMedian\n            \n        if col  == 'SalePrice':\n            estMedianSalesPrice = dfTrainClean[col].median()\n            dfTrainClean[col] = dfTrainClean[col]- estMedianSalesPrice\n                   \nprint('SalesPriceMedia on training set:', estMedianSalesPrice)","9d3a395d":"fig, ax = plt.subplots(1,2,figsize=(15,5))\nsns.distplot(dfTrainClean['SalePrice']+estMedianSalesPrice,ax=ax[0]);\nax[0].grid(True)\nsns.distplot(dfTrainClean['SalePrice'],ax=ax[1],color='red');\nax[1].grid(True)","b9d99529":"colNames=sorted(dfTrainClean.columns)\nfor col in colNames:\n    colValsUTrain = dfTrainClean[col].unique()\n    colValsUTest  = dfTrainClean[col].unique()\n    colValsU = np.sort(np.unique(np.concatenate((colValsUTrain,colValsUTest))))\n    \n    if colValsU.dtype == np.dtype('object'):\n        encoderDict = {}\n        if len(colValsU)>2:\n            symOffset = len(colValsU)\/\/2\n        else:\n            symOffset = 0.5\n        for k,val in enumerate(colValsU):\n            encoderDict[val] = k - symOffset\n        print(col, '\\t\\t\\t',encoderDict)\n    \n        dfTrainClean[col] = dfTrainClean[col].map(encoderDict)\n        dfTestClean[col]  = dfTestClean[col].map(encoderDict)","9996d6ed":"NROWS=30\nNCOLS=3\ncolNames=sorted(dfTrainClean.columns)\nfig, axAll = plt.subplots(nrows=NROWS, ncols=NCOLS, figsize=(22,120))\nidx=0\nfor r in range(NROWS):\n    for c in range(NCOLS):\n        hist, bin_edges = np.histogram(dfTrainClean[colNames[idx]])\n        sns.distplot(dfTrainClean[colNames[idx]], bin_edges, kde=False, norm_hist=False, color='red' ,ax=axAll[r][c],label='train')\n        if colNames[idx] not in ('SalePrice','Id'):\n            sns.distplot(dfTestClean[colNames[idx]],  bin_edges, kde=False, norm_hist=False, color='blue',ax=axAll[r][c],label='test');\n        axAll[r][c].grid(True)\n        axAll[r][c].legend()\n        idx=idx+1","c6a54519":"# naughty - but to suppress LinAlg warnings in KRR\nimport warnings\nfrom scipy.linalg import LinAlgWarning\nwarnings.filterwarnings(action='ignore', category=LinAlgWarning)\nwarnings.filterwarnings(action='ignore', category=UserWarning)","576df95d":"XGB = XGBRegressor()\n\nXGB_grid =    {'nthread':[4], \n               'objective':['reg:linear'],\n               'learning_rate': [.03, 0.05, .07],\n               'max_depth': [5, 6, 7],\n               'min_child_weight': [4],\n               'silent': [1],\n               'subsample': [0.7],\n               'colsample_bytree': [0.7],\n               'n_estimators': [500]}\n\nn_folds = 5\n\nfearures = dfTrainClean.columns.drop('SalePrice').drop('Id')\nX = dfTrainClean[fearures]\ny = dfTrainClean['SalePrice']\n\nkf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X.values)\nXGBModel = GridSearchCV(estimator = XGB, param_grid = XGB_grid, cv=kf, scoring=\"neg_mean_squared_error\", n_jobs= 4, verbose = 1)\nXGBModel.fit(X,y)\nXGB_best = XGBModel.best_estimator_\nXGBModel.best_params_","4c9b321b":"LRModel = LinearRegression()\n\nKRR = KernelRidge(alpha=0.8, coef0=5, degree=2, gamma=None, kernel='polynomial', kernel_params=None)\n\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, max_iter = 500, random_state=1))\n\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\n\nlgb1Model = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n\nlgb2Model = lgb.LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )\n\ngBoost1Model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\n\ngBoost2Model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.01, \n                                         max_depth=3, max_features='sqrt', \n                                         min_samples_leaf=10, min_samples_split=5, \n                                         loss='huber', random_state =5)\n\nxgBoost1Model = XGBRegressor(objective ='reg:squarederror',\n                        n_estimators=1400,\n                        learning_rate=0.05,\n                        n_jobs=-1)\n\nxgBoost2Model = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nxgBoost3Model = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=5, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nxgBoost4Model = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=5, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.286206,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nxgBoost5Model = XGBRegressor(colsample_bytree=0.7, \n                             learning_rate=0.03, max_depth=6, \n                             min_child_weight=4, n_estimators=500, \n                             subsample=0.7, silent=1, \n                             random_state =7)\n\nfeatures00 = dfTrainClean.columns.drop('SalePrice').drop('Id')\nfeatures01 = dfTrainClean.columns.drop('SalePrice').drop('Id').drop('PoolQC').drop('Street').drop('Utilities')\n\nfeatures02 = ['TotalSF','BedroomAbvGr',\n                     'YearBuilt',\n                     'OverallQual',\n                     'OverallCond',\n                     'Neighborhood',\n                    'GarageCars']\n\nfeatures03 = ['TotalSF',\n                 'OverallQual',\n                 'GarageCars',\n                 #'GarageArea',\n                 'YearBuilt',\n                 'Fireplaces',\n                 'CentralAir',\n                 'Neighborhood',\n                 'OverallCond',\n                 'BedroomAbvGr',\n                 'BldgType',\n                 'TotRmsAbvGrd',\n                 'LandSlope',\n                 'LotArea',\n                ]\n\nfeatures04 = ['TotalSF',\n                 'OverallQual',\n                 'GarageCars',\n                 'YearBuilt','Fireplaces','CentralAir',\n                 'Neighborhood','OverallCond','BedroomAbvGr','BldgType','TotRmsAbvGrd',\n                 'LandSlope','LotArea',]\n\nfeatures05 = ['TotalSF',\n                 'OverallQual',\n                 'GarageCars',\n                 'GarageArea',\n                 'YearBuilt',\n                 'Fireplaces',\n                 'CentralAir',\n                 'Neighborhood',\n                 'OverallCond',\n                 'BedroomAbvGr',\n                 'BldgType',\n                 'TotRmsAbvGrd',\n                 'LandSlope',\n                 'LotArea',\n                ]\n\nfeatures06 = ['LotArea','GrLivArea','TotalSF','BedroomAbvGr','FullBath',\n                 'Neighborhood',\n                 'GarageCars','GarageType',\n                 'OverallQual','KitchenQual','ExterQual',\n                 'CentralAir','Fireplaces','Heating',\n                 'BsmtExposure',\n                 'OverallCond','Condition1','ExterCond','YearBuilt',\n                 'PavedDrive','LandSlope',\n                 'Foundation',\n                 'SaleType','SaleCondition']\n\nfeatures07 = ['LotArea','GrLivArea','TotalSF','BedroomAbvGr','FullBath',\n                 'Neighborhood',\n                 'GarageCars','GarageType',\n                 'OverallQual','KitchenQual','ExterQual',\n                 'CentralAir','Fireplaces','Heating',\n                 'BsmtExposure',\n                 'OverallCond','Condition1','ExterCond','YearBuilt',\n                 'PavedDrive','LandSlope',\n                 'Foundation',\n                 'SaleType','SaleCondition',\n                 #    \n                 'MSSubClass','MSZoning','LandContour','HouseStyle',\n                 'BsmtCond','Electrical','LotConfig','HeatingQC',\n                 'RoofStyle','YearRemodAdd',\n                 'BsmtQual','BldgType','LotShape','MasVnrType',\n                 'BsmtFinType1','TotRmsAbvGrd','Functional']\n\n\nfeatures08 = ['TotalSF',\n                     'OverallQual',\n                     'GarageCars',\n                     'YearBuilt',\n                     'Fireplaces',\n                     'CentralAir',\n                     'Neighborhood',\n                     'OverallCond',\n                     'BedroomAbvGr',\n                     'BldgType',\n                     'TotRmsAbvGrd',\n                     'LandSlope',\n                     'LotArea',\n                     'GrLivArea','FullBath',\n                     'GarageType',\n                     'KitchenQual','ExterQual',\n                     'Heating',\n                     'BsmtExposure',\n                     'Condition1','ExterCond',\n                     'PavedDrive',\n                     'Foundation',\n                     'SaleType','SaleCondition',\n                     #    \n                     'MSSubClass','MSZoning','LandContour','HouseStyle',\n                     'BsmtCond','Electrical','LotConfig','HeatingQC',\n                     'RoofStyle','YearRemodAdd',\n                     'BsmtQual','LotShape','MasVnrType',\n                     'BsmtFinType1','Functional']\n\nfeatureSets = [features00,features01,features02,features03,features04,features05,features06,features07,features08]\n#featureSets = [features00,features01]\nrmses = []\nfittedModels = []\n\nfor features in featureSets:\n\n    X     = dfTrainClean[features]\n    XTest = dfTestClean[features]\n    y     = dfTrainClean['SalePrice']\n    train_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state = 1,train_size = 0.75)\n    print('SampleSize of Age training set: ',X.shape[0],train_X.shape[0],valid_X.shape[0],train_X.shape[0]\/X.shape[0])\n    \n    LRModel.fit(train_X, train_y);\n    print('----LR  - fitting done!')\n    \n    KRR.fit(train_X, train_y);\n    print('----KRR - fitting done!')\n    \n    lasso.fit(train_X, train_y);\n    print('----lasso - fitting done!')\n    \n    ENet.fit(train_X, train_y);\n    print('----ENet - fitting done!')\n    \n    lgb1Model.fit(train_X, train_y,\n                eval_set=[(valid_X, valid_y)],\n                eval_metric='l1',\n                early_stopping_rounds=5,\n                verbose=100)\n    print('----LGB1 - fitting done!')\n    \n    lgb2Model.fit(train_X, train_y,\n                eval_set=[(valid_X, valid_y)],\n                eval_metric='l1',\n                early_stopping_rounds=5,\n                verbose=100)\n    print('----LGB2 - fitting done!')\n\n    gBoost1Model.fit(train_X, train_y);\n    print('----gB1  - fitting done!')\n\n    gBoost2Model.fit(train_X, train_y);\n    print('----gB2  - fitting done!')\n    \n    xgBoost1Model.fit(train_X, train_y, \n                 early_stopping_rounds=15, \n                 eval_set=[(valid_X, valid_y)],\n                 verbose=False);\n    print('----XGB1 - fitting done!')\n    \n    xgBoost2Model.fit(train_X, train_y, \n                 early_stopping_rounds=15, \n                 eval_set=[(valid_X, valid_y)],\n                 verbose=False);\n    print('----XGB2 - fitting done!')\n\n    xgBoost3Model.fit(train_X, train_y, \n                 early_stopping_rounds=15, \n                 eval_set=[(valid_X, valid_y)],\n                 verbose=False);\n    print('----XGB3 - fitting done!')\n    \n    xgBoost4Model.fit(train_X, train_y, \n                 early_stopping_rounds=15, \n                 eval_set=[(valid_X, valid_y)],\n                 verbose=False);\n    print('----XGB4 - fitting done!')\n    \n    xgBoost5Model.fit(train_X, train_y, \n                 early_stopping_rounds=15, \n                 eval_set=[(valid_X, valid_y)],\n                 verbose=False);\n    print('----XGB5 - fitting done!')\n    \n    preds_valLR = LRModel.predict(valid_X)\n    preds_valLRFloored = np.clip(preds_valLR+estMedianSalesPrice, dfTrain['SalePrice'].min() ,dfTrain['SalePrice'].max())\n    rmseLR = np.sqrt(mean_squared_error(np.log(preds_valLRFloored),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  LR RMSE: ',rmseLR)\n    \n    preds_valKRR = KRR.predict(valid_X)\n    preds_valKRRFloored = np.clip(preds_valKRR+estMedianSalesPrice, dfTrain['SalePrice'].min() ,dfTrain['SalePrice'].max())\n    rmseKRR = np.sqrt(mean_squared_error(np.log(preds_valKRRFloored),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  KRR RMSE: ',rmseKRR)\n    \n    preds_vallasso = lasso.predict(valid_X)\n    preds_vallassoFloored = np.clip(preds_vallasso+estMedianSalesPrice, dfTrain['SalePrice'].min() ,dfTrain['SalePrice'].max())\n    rmseLasso = np.sqrt(mean_squared_error(np.log(preds_vallassoFloored),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  lasso RMSE: ',rmseLasso)\n    \n    preds_valENet = ENet.predict(valid_X)\n    preds_valENetFloored = np.clip(preds_valENet+estMedianSalesPrice, dfTrain['SalePrice'].min() ,dfTrain['SalePrice'].max())\n    rmseENet = np.sqrt(mean_squared_error(np.log(preds_valENetFloored),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  ENet RMSE: ',rmseENet)\n    \n    preds_valLGB1 = lgb1Model.predict(valid_X)\n    rmseLGB1 = np.sqrt(mean_squared_error(np.log(preds_valLGB1 + estMedianSalesPrice),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  LGB1 RMSE: ',rmseLGB1)\n    \n    preds_valLGB2 = lgb2Model.predict(valid_X)\n    rmseLGB2 = np.sqrt(mean_squared_error(np.log(preds_valLGB2 + estMedianSalesPrice),  np.log(valid_y + estMedianSalesPrice)))\n    print('***  LGB2 RMSE: ',rmseLGB2)\n\n    preds_valGB1 = gBoost1Model.predict(valid_X)\n    rmseGB1  = np.sqrt(mean_squared_error(np.log(preds_valGB1 + estMedianSalesPrice),  np.log(valid_y + estMedianSalesPrice)))\n    print('***   gB1 RMSE: ',rmseGB1)\n\n    preds_valGB2 = gBoost2Model.predict(valid_X)\n    rmseGB2  = np.sqrt(mean_squared_error(np.log(preds_valGB2 + estMedianSalesPrice),  np.log(valid_y + estMedianSalesPrice)))\n    print('***   gB2 RMSE: ',rmseGB2)\n\n    preds_valXGB1 = xgBoost1Model.predict(valid_X)\n    rmseXGB1 = np.sqrt(mean_squared_error(np.log(preds_valXGB1 + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\n    print('*** XGB1 RMSE: ',rmseXGB1)\n\n    preds_valXGB2 = xgBoost2Model.predict(valid_X)\n    rmseXGB2 = np.sqrt(mean_squared_error(np.log(preds_valXGB2 + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\n    print('*** XGB2 RMSE: ',rmseXGB2)\n\n    preds_valXGB3 = xgBoost3Model.predict(valid_X)\n    rmseXGB3 = np.sqrt(mean_squared_error(np.log(preds_valXGB3 + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\n    print('*** XGB3 RMSE: ',rmseXGB3)\n\n    preds_valXGB4 = xgBoost4Model.predict(valid_X)\n    rmseXGB4 = np.sqrt(mean_squared_error(np.log(preds_valXGB4 + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\n    print('*** XGB4 RMSE: ',rmseXGB4)\n    \n    preds_valXGB5 = xgBoost5Model.predict(valid_X)\n    rmseXGB5 = np.sqrt(mean_squared_error(np.log(preds_valXGB5 + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\n    print('*** XGB5 RMSE: ',rmseXGB5)\n    \n    rmses.append([rmseLR,rmseLasso,rmseENet,rmseKRR, rmseLGB1,rmseLGB2,rmseGB1,rmseGB2,rmseXGB1,rmseXGB2,rmseXGB3,rmseXGB4,rmseXGB5])\n    fittedModels.append([LRModel,lasso,ENet,KRR,lgb1Model,lgb2Model,gBoost1Model,gBoost2Model,xgBoost1Model,xgBoost2Model,xgBoost3Model,xgBoost4Model,xgBoost5Model])\n    \ndata = {'model':['LinReg','Lasso','ENet','KRR','LBG1','LBG2','gB1','gB2','XGB1','XGB2','XGB3','XGB4','XGB5']}\nfor k,rmse in enumerate(rmses):\n    data['features_'+str(k)] = rmse\n\ndfValidResults = pd.DataFrame(data)","f92533cd":"dfValidResults.style.background_gradient(cmap='viridis', low=.5, high=0).highlight_null('red')","70823953":"plt.figure(figsize=(12,5));\nfor k in df.index.to_numpy():\n    plt.plot(dfValidResults.iloc[k][1:].to_numpy(), marker='o',linewidth=0.25,label=dfValidResults.iloc[k][0]);\nplt.grid(True)\nplt.xlabel('featureSet')\nplt.ylim(0.1,0.25)\nplt.xlim(-1,10)\nplt.legend();","b050185f":"featureSetNbr = -1  #hardcoded\nfeatures = featureSets[featureSetNbr]\n\nfeatureWeights = {}\n\nfor k,model in enumerate(fittedModels[featureSetNbr]):\n    try:\n        modelName = dfValidResults['model'][k]\n        mfip      = model.feature_importances_\n        \n        featureWeights['weights_'+modelName]=mfip\n    except:\n        pass\n    \ndfFeatureImportance = pd.DataFrame(data=featureWeights,index=features).sort_values(['weights_XGB3'], ascending=False)\ndfFeatureImportance","305c20a9":"fig,ax = plt.subplots(1,1,figsize=(20,10));\ndfFeatureImportance = dfFeatureImportance.sort_values(['weights_XGB1'], ascending=True)[:20]\ndfFeatureImportance[['weights_XGB1','weights_XGB2','weights_XGB3','weights_XGB4','weights_XGB5']].plot.barh(ax=ax);\nax.grid(True)","fc3f419c":"xgb.plot_importance(xgBoost3Model, max_num_features=20,importance_type='gain');\nxgb.plot_importance(xgBoost3Model, max_num_features=20,importance_type='weight');\nxgb.plot_importance(xgBoost3Model, max_num_features=20,importance_type='cover');\n#lgb.plot_importance(lgb2Model, max_num_features=20);","941f40da":"xgBoostTestModel = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=5, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.28571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n\nfeatures = features08\nmodel    = xgBoost3Model\n#model    = xgBoostTestModel\n\nX        = dfTrainClean[features]\nXTest    = dfTestClean[features]\ny        = dfTrainClean['SalePrice']\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state = 1,train_size = 0.75)\n\nmodel.fit(train_X, train_y, \n             early_stopping_rounds=15, \n             eval_set=[(valid_X, valid_y)],\n             verbose=False);\n\npreds = model.predict(valid_X)\nrmse = np.sqrt(mean_squared_error(np.log(preds + estMedianSalesPrice), np.log(valid_y + estMedianSalesPrice)))\nprint('model RMSE on validation set: ',rmse)\nestimate = model.predict(XTest)\ndfOut=pd.DataFrame(dfTest['Id'])\ndfOut.insert(1,'SalePrice',estimate + estMedianSalesPrice)\ndfOut.to_csv('submission.csv', index=False)","f3db1013":"model RMSE on validation set:  0.11484437904218533","af63fc3a":"dfOut","c33ecb55":"dfTestClean['SalePrice'] = estimate","7816f3a3":"NROWS=30\nNCOLS=3\ncolNames=sorted(dfTrainClean.columns)\nfig, axAll = plt.subplots(nrows=NROWS, ncols=NCOLS, figsize=(22,120))\nidx=0\nfor r in range(NROWS):\n    for c in range(NCOLS):\n        if idx < len(colNames):\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfTrainClean,ax=axAll[r,c],edgecolor='blue',  linewidth=0.5)\n            sns.scatterplot(x=colNames[idx],y = 'SalePrice',data = dfTestClean, ax=axAll[r,c],edgecolor='red',   linewidth=0.5)\n            axAll[r][c].grid(True)\n        idx=idx+1","4aaaa390":"### Replace NaN fields","d51025ed":"### Compare Train\/Test data distributions","f35bbc40":"### DROP OUTLIERS!!!","1a5d99fc":"### Symmetrize numerical values","10ef98a5":"### Suppress warnings","17327742":"#### Plot Training set data ","ef57c097":"### Submission","0b47c1cd":"### Outlier detection","4b19e885":"### Cross validate model with Kfold stratified cross val","b2bce0f9":"### Create new Feature","28e4fff7":"### Define models and feature sets","d8e1c525":"### Result overview","f1eb54bc":"### GridSearch for parameter tuning - to be done for each model (with selected feature set)","0ededd70":"### Feature importance","4121d40f":"### Encoding non-numerical values (more or less symmetric around zero)"}}