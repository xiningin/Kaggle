{"cell_type":{"bd093bc5":"code","cb116d4a":"code","aa8496bb":"code","ba86b9fd":"code","f61ef933":"code","c4ac9de5":"code","efbba287":"code","4ab66068":"code","55108f16":"code","44e42980":"code","32ab5aa7":"code","1b65404c":"code","fc3be2af":"code","1677dbce":"code","e29126f0":"code","557f113a":"code","0ea91866":"code","957874e6":"code","35661b9d":"code","2a0c10c5":"code","3aec965f":"code","1e64091b":"code","4e5a7f48":"code","94851ebb":"code","2cb42618":"code","081392bb":"code","85029cd4":"code","3525871f":"code","e124e11a":"code","789379a0":"markdown"},"source":{"bd093bc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n!pip install pandas==1.0.3\n!pip install tensorflow==2.0\n\nimport tensorflow as tf\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nprint(pd.__version__)\nprint(np.__version__)\nprint(tf.__version__)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cb116d4a":"#read the latest csv value\ndf =pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","aa8496bb":"#select only India as country\nfilt_india = (df['Country\/Region'] == 'India') ","ba86b9fd":"#overwrite dataframe : only want to work with India Case\ndf = df[filt_india]\ndf","f61ef933":"#removing duplicate rows if any\ndf.drop_duplicates(inplace=True)","c4ac9de5":"# dropping State because its NaN and Country since its fixed value : India\ndf.drop(columns=['Province\/State', 'Country\/Region'], inplace=True)","efbba287":"#dropping Last Update column since it won't help in forecasting\ndf.drop(columns='Last Update', inplace=True)","4ab66068":"#set SNo as index\ndf.set_index('SNo', inplace=True)","55108f16":"#convert Object type of ObservationDate to DateTime\ndf['ObservationDate'] = pd.to_datetime(df['ObservationDate'])","44e42980":"#Sorting the sequence based on the observation date\ndf.sort_values('ObservationDate', inplace=True)","32ab5aa7":"df.columns","1b65404c":"#visualize observation date with confirmed cases\ndata = df['Confirmed']\ndata.index = df['ObservationDate']\ndata.plot()","fc3be2af":"data = data.values","1677dbce":"data = data.astype(np.float32)","e29126f0":"data","557f113a":"def create_sequence(input_data, steps):\n    i = 0\n    x = []\n    y = []\n    while (i+steps) < len(input_data):\n        x.append(input_data[i:i+steps])\n        y.append(input_data[i+steps])\n        i = i + 1\n    return x, y","0ea91866":"# test the create_sequence\ninput_data = [10, 20, 30, 40, 50, 60]\nx,y = create_sequence(input_data, 3)\nprint(x)\nprint(y)","957874e6":"n_steps = 3\nx, y = create_sequence(data, n_steps)","35661b9d":"x = np.asarray(x)\ny = np.asarray(y)","2a0c10c5":"row_index = x.shape[0] - 1","3aec965f":"x, x_test = x[:row_index], x[row_index]\ny, y_test = y[:row_index], y[row_index]","1e64091b":"print(y)\nprint(y_test)","4e5a7f48":"# reshape from [samples, timesteps] into [samples, timesteps, features]\nn_features = 1\nx = x.reshape((x.shape[0], x.shape[1], n_features))","94851ebb":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM","2cb42618":"# define model\nmodel = Sequential()\nmodel.add(LSTM(50, activation='relu',return_sequences=True, input_shape=(n_steps, n_features)))\nmodel.add(LSTM(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","081392bb":"model.fit(x, y, epochs=1000, verbose=2)","85029cd4":"from numpy import array\nx_input = array([2.543e+03, 2.567e+03, 3.082e+03])\nx_input = x_input.astype(np.float32)\nx_input = x_input.reshape((1, n_steps, n_features))\nx_input","3525871f":"x_test = x_test.reshape((1, n_steps, n_features))\nyhat = model.predict(x_test, verbose=0)","e124e11a":"print(yhat)\nprint(y_test)","789379a0":"#Data Cleaning and Processing"}}