{"cell_type":{"5a739805":"code","5c235ab2":"code","5bc04d22":"code","bfb35535":"code","cda02e3d":"code","00f36c7c":"code","0f06a1d4":"code","577ef58c":"code","b68bde28":"code","e6b515c9":"code","0e492c78":"code","b5668b86":"code","66fa9fba":"code","e485d336":"code","b0208862":"code","df10ba75":"code","1c0d9ea3":"code","23843783":"code","916a29cc":"code","7735e337":"markdown","0deb2041":"markdown","999eca3d":"markdown","9f29bd88":"markdown","8d7787c7":"markdown","c47c9962":"markdown","d88ca4f6":"markdown","acc8af4b":"markdown","257296f7":"markdown","9b7ed0c9":"markdown"},"source":{"5a739805":"import numpy as np\nimport pandas as pd \nimport gc\nimport json\nimport matplotlib.pyplot as plt","5c235ab2":"train_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\")\n# specs_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\")\ntrain_label_df = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv\")","5bc04d22":"train_df.head()","bfb35535":"plt.hist(list(train_df[\"game_session\"].value_counts()))","cda02e3d":"train_df[\"game_time\"].value_counts()","00f36c7c":"gc.collect()","0f06a1d4":"train_label_df[train_label_df.installation_id==\"0006a69f\"]","577ef58c":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Mushroom Sorter (Assessment)\") & (train_df.event_code==4100)]","b68bde28":"train_df[(train_df.installation_id==\"0006a69f\") & (train_df.title==\"Bird Measurer (Assessment)\") & (train_df.event_code==4110)]","e6b515c9":"train_df_clear = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                          &(train_df.event_data.str.contains(\"true\"))]\ntrain_df_fail = train_df[((train_df.event_code==4100)|(train_df.event_code==4110))\n                         &(train_df.event_data.str.contains(\"false\"))]","0e492c78":"train_df_clear_g = train_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntrain_df_fail_g = train_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","b5668b86":"train_df_clear_g","66fa9fba":"sample_submission = pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv\")","e485d336":"test_df","b0208862":"test_df_clear = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                          &(test_df.event_data.str.contains(\"true\"))]\ntest_df_fail = test_df[((test_df.event_code==4100)|(test_df.event_code==4110))\n                         &(test_df.event_data.str.contains(\"false\"))]\n\ntest_df_clear_g = test_df_clear.groupby([\"installation_id\"]).count()[\"event_id\"]\ntest_df_fail_g = test_df_fail.groupby([\"installation_id\"]).count()[\"event_id\"]","df10ba75":"test_clear_dic=dict(zip(test_df_clear_g.index,list(test_df_clear_g)))\ntest_fail_dic=dict(zip(test_df_fail_g.index,list(test_df_fail_g)))","1c0d9ea3":"for i in range(len(sample_submission)):\n    id = sample_submission[\"installation_id\"][i]\n    fail = test_fail_dic[id] if id in test_fail_dic else 0\n    clear = test_clear_dic[id] if id in test_clear_dic else 0\n    if fail+clear!=0:\n        score = clear\/(fail+clear)\n        if score>0.95:\n            sample_submission[\"accuracy_group\"][i]=3\n        elif score>0.5:\n            sample_submission[\"accuracy_group\"][i]=2\n        elif score>0.3:\n            sample_submission[\"accuracy_group\"][i]=1\n        else:\n            sample_submission[\"accuracy_group\"][i]=0\n    else:\n        sample_submission[\"accuracy_group\"][i]=1","23843783":"sample_submission","916a29cc":"sample_submission.to_csv(\"submission.csv\",index=False)","7735e337":"If event_date contains correct: true, the game has been cleared, and if false, it has failed.<br>\nThis result is consistent with that of the first train_label_df.","0deb2041":"# 252 views and 3 Upvotes :((","999eca3d":"If you look at the game_time, you can see that events occur in many games at least at 0.<br>\n\nNow consider the data and results of the owner of the device with installation_id is 0006a69f.","9f29bd88":"This kernel introduces a simple benchmark.<br>\nIn this competition, game information and information on events in the game are given. And what we ultimately want is to determine how many times the owner of a device can clear the game.\n\n# import","8d7787c7":"### Mushroom Sorter (Assessment) by 0006a69f","c47c9962":"Games with many events have more than 3000 events per play, while most games have fewer than 500 events.","d88ca4f6":"Since the clearing tendency changes depending on the game, it is difficult to classify only the players.","acc8af4b":"He is playing Mushroom Sorter and Bird Measurer. This time, let's focus on the event when the game ends.\n\n### Mushroom Sorter (Assessment) by 0006a69f","257296f7":"This result is also consistent with the first train_label_df result.<br>\n\nIf you calculate the probability that the player will clear at the end event, it will help the final classification.\n\n## make simple benchmark\n\nThis time, it is classified by game clear probability.","9b7ed0c9":"## eda"}}