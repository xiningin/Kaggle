{"cell_type":{"1c6ef95d":"code","eb1c5245":"code","dcbab977":"code","a4f7c798":"code","d7a5fbc4":"code","72c0a90c":"code","b78acef6":"code","dc61ebf0":"code","1e5d905d":"code","9388d1e9":"code","8bf3baa2":"code","726c195a":"code","8adabb97":"code","aae9d542":"code","18b9ed12":"code","8ecf3503":"code","2586eb9a":"code","57da9df2":"markdown","3f9baaf9":"markdown","8157482f":"markdown","35fb23f4":"markdown"},"source":{"1c6ef95d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb1c5245":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","dcbab977":"import xgboost as xgb\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a4f7c798":"from sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler","d7a5fbc4":"veri = pd.read_csv('..\/input\/heart-desease-data\/heart_desease_data.csv')\nveri.head()\nveri.sample(frac=1)","72c0a90c":"girdi = veri.iloc[:,0:13]\ngirdi\ncikti = veri.iloc[:,13:14]\ncikti","b78acef6":"x_train, x_test, y_train, y_test = train_test_split(girdi, cikti.values.flatten(), test_size = 0.25, random_state = 10)\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","dc61ebf0":"scaler = StandardScaler().fit(x_train)\nx_train_sc = scaler.transform(x_train)\nx_test_sc = scaler.transform(x_test)","1e5d905d":"D_train=xgb.DMatrix(data =x_train_sc, label = y_train)\nD_test=xgb.DMatrix(data = x_test_sc)","9388d1e9":"x_train_sc.shape","8bf3baa2":"yy = y_train[:,np.newaxis]","726c195a":"parametre_secimi = {\n    'max_depth':[3,5,7,8],\n    'gamma':[0.1,0.6],\n    'eval_metric':['mlogloss']\n}\n# num_class varken hata ald\u0131m.\nmodel = xgb.XGBClassifier()\n\nizgara_model = GridSearchCV(estimator = model, param_grid = parametre_secimi, cv = 3, n_jobs = -1, verbose = 2)\nizgara_model.fit(x_train_sc,y_train)","8adabb97":"en_iyi_param = izgara_model.best_params_\nen_iyi_model = xgb.train(params = en_iyi_param, dtrain=D_train)\n\nen_iyi_model.save_model(\"modelim_class\")\nyukle = xgb.XGBClassifier()\nyukle.load_model('modelim_class')\nbest_predict_proba = yukle.predict_proba(x_test_sc)\nbest_predicts = yukle.predict(x_test_sc)\nsonuclarim = pd.DataFrame(best_predict_proba, columns = ['p1','p2'])\nsonuclarim['gercek']=y_test\nsonuclarim['tahmin']=best_predicts\nsonuclarim","aae9d542":"from sklearn.metrics import roc_curve, roc_auc_score","18b9ed12":"def s\u0131n\u0131fland\u0131rma_metrikleri(y_true, y_prediction, n , norm):\n    cm=confusion_matrix(y_true, y_prediction, normalize=norm)\n    df_cm = pd.DataFrame(cm,  range(0,n),range(0,n))\n    sns.heatmap(df_cm, annot=True,annot_kws={\"size\": 16})\n    plt.suptitle('Confusion Matrix', x=0.44, y=1.0, ha='center', fontsize=25)\n    plt.xlabel('Predict Values', fontsize =25)\n    plt.ylabel('Test Values', fontsize =25)\n    plt.show()\n    print('S\u0131n\u0131fland\u0131rma Raporu :\\n ', classification_report(y_true, y_prediction))","8ecf3503":"s\u0131n\u0131fland\u0131rma_metrikleri(y_test,best_predicts,2,None)","2586eb9a":"logit_roc_auc = roc_auc_score(y_test, best_predicts)\n\n# G\u00f6rselle\u015ftirmek istersek\nfpr, tpr, thresholds = roc_curve(y_test, best_predict_proba[:,0], pos_label = 0)\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\n# plt.savefig('Log_ROC')\nplt.show();","57da9df2":"### In this notebook Heart desease data set is used for the application of XGBoost algorithm.","3f9baaf9":"### Defining the inputs and outputs","8157482f":"### Grid Search for the selection of the best hyper parameters","35fb23f4":"### Evaluation of the model with different error metrics"}}