{"cell_type":{"9135da2f":"code","2b856285":"code","9581c7ae":"code","253273aa":"code","72cc76bc":"code","f559a536":"code","2a4c55f6":"code","7b6e498d":"code","882acab7":"code","c2dae7ca":"code","3f449ee5":"code","75be96d6":"code","69c7ae74":"code","e9c5ae6d":"code","f23aa7e9":"code","6cd0d9af":"code","4ac5f694":"code","558f8469":"code","88eec6bc":"code","94b79614":"code","7b9fb72f":"code","63536b46":"code","01b2ba08":"code","3b64f0b6":"code","0bbb770f":"code","6f15546a":"code","cf9942bb":"code","63b13340":"code","a000015e":"code","7bbded2c":"code","7723a016":"code","a4809237":"code","40a6d752":"code","598bd7ea":"code","4b43765b":"code","6280f236":"code","f58a279a":"code","624e3d69":"code","fab09122":"code","a02c0a76":"code","bd42291e":"code","826aff68":"code","ee44cf94":"code","0f6ca15c":"code","a29ee873":"code","2994756f":"code","07e6160d":"code","4011d011":"code","3b47bcac":"code","bf8bbee9":"code","1022cb00":"code","be470959":"code","74ab2eec":"code","2fb100ba":"code","f2fde37e":"code","3b6804fc":"code","c8e86617":"code","695ba0f3":"code","76b1aa73":"code","89107eab":"code","6a819677":"code","689561f9":"code","2ec54868":"code","5d30a8d7":"code","132bad21":"code","215e4561":"code","d2201cf4":"code","760e77dd":"code","0a65107e":"code","9d3f9984":"code","48950175":"markdown","23492a6b":"markdown","6380ddc4":"markdown","a7b8fcfb":"markdown","05ef9a48":"markdown","2202489b":"markdown","38f634e5":"markdown"},"source":{"9135da2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b856285":"answers_data = pd.read_csv('\/kaggle\/input\/stacksample\/Answers.csv', encoding = \"ISO-8859-1\")\nquestions_data = pd.read_csv('\/kaggle\/input\/stacksample\/Questions.csv', encoding = \"ISO-8859-1\")\ntags_data = pd.read_csv('\/kaggle\/input\/stacksample\/Tags.csv', encoding = \"ISO-8859-1\")","9581c7ae":"print(answers_data.shape)\nanswers_data.head()","253273aa":"print(questions_data.shape)\nquestions_data.head()","72cc76bc":"print(tags_data.shape)\ntags_data.head()","f559a536":"answers_data.ParentId.unique().shape[0]","2a4c55f6":"questions_data.Id.unique().shape[0]","7b6e498d":"tags_data.Id.unique().shape[0]","882acab7":"len(tags_data.Tag.unique())","c2dae7ca":"a = tags_data.Id.unique()-questions_data.Id.unique()\nnp.count_nonzero(a)","3f449ee5":"b = questions_data.Id.unique()\nc = answers_data.ParentId.unique()\nquestions_ids_with_no_answer = b[~np.in1d(b,c)]\nquestions_ids_with_no_answer.shape[0]","75be96d6":"mask_questions = questions_data[\"Id\"].isin(questions_ids_with_no_answer)\nquestions_data = questions_data.loc[~mask_questions]","69c7ae74":"mask_tags = tags_data[\"Id\"].isin(questions_ids_with_no_answer)\ntags_data = tags_data.loc[~mask_tags]","e9c5ae6d":"questions_data.isnull().sum()","f23aa7e9":"answers_data.isnull().sum()","6cd0d9af":"tags_data.isnull().sum()","4ac5f694":"tags_data = tags_data.dropna(axis=0)","558f8469":"print(questions_data.shape)\nprint(answers_data.shape)\nprint(tags_data.shape)","88eec6bc":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","94b79614":"tags=tags_data.Tag.value_counts().rename_axis('Tag').reset_index(name='counts')","7b9fb72f":"tags.head()","63536b46":"tags = tags.loc[tags['counts']>100]","01b2ba08":"print(tags.shape)\ntags.head()","3b64f0b6":"plt.figure(figsize=(16,6))\n\nplt.title(\"Questions Distribution According To Tags\")\nsns.barplot(x=tags.loc[:50].Tag, y=tags[:50].counts)\n\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of questions\")","0bbb770f":"tags.info()","6f15546a":"tags.describe()","cf9942bb":"questions_tags = tags_data.Id.value_counts().rename_axis('Id').reset_index(name='counts')","63b13340":"questions_tags.shape","a000015e":"questions_tags.info()","7bbded2c":"questions_tags.describe()","7723a016":"questions_tags.head()","a4809237":"plt.figure(figsize=(16,6))\n\nplt.title(\"Tags Distribution According To Questions\")\nsns.barplot(x=questions_tags.loc[:50].Id, y=questions_tags[:50].counts)\n\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of tags\")","40a6d752":"for i in range(5):\n    a = i+1\n    df = questions_tags.loc[questions_tags['counts']==a]\n    percent = (df.shape[0]\/questions_tags.shape[0])*100\n    print(percent, \"% of questions which means: \", df.shape[0],\" questions have \",a, \" tags\")","598bd7ea":"questions_ids_with_one_tag = questions_tags.loc[questions_tags['counts']==1].Id\nmask_questions_one_tag = questions_data[\"Id\"].isin(questions_ids_with_one_tag)\nquestions_data_one_tag = questions_data.loc[mask_questions_one_tag]\nanswers_data_one_tag = answers_data[\"ParentId\"].isin(questions_ids_with_one_tag)\nanswers_data_one_tag = answers_data.loc[answers_data_one_tag]","4b43765b":"answers_data_one_tag.shape","6280f236":"questions_data_one_tag.shape","f58a279a":"questions_data_one_tag.columns","624e3d69":"answers_data_one_tag.columns","fab09122":"qs = questions_data_one_tag.drop(['CreationDate', 'ClosedDate', 'OwnerUserId'], axis=1)","a02c0a76":"answ = answers_data_one_tag.drop(['CreationDate', 'OwnerUserId'],axis=1)","bd42291e":"qs.to_csv('.\/qs')\nansw.to_csv('.\/answ')","826aff68":"answers_data.head()","ee44cf94":"answers_data.info()","0f6ca15c":"answers_data.isnull().sum()","a29ee873":"answers = answers_data[['Id', 'ParentId', 'Score']]","2994756f":"answers.info()","07e6160d":"questions_grouped_by_answers = answers.ParentId.value_counts().rename_axis('ParentId').reset_index(name='counts').sort_values(by=['counts'], ascending=False)","4011d011":"questions_grouped_by_answers.info()","3b47bcac":"questions_grouped_by_answers.describe()","bf8bbee9":"questions_grouped_by_answers.head(10)","1022cb00":"plt.figure(figsize=(16,6))\n\nplt.title(\"Answers Distribution According To Questions\")\n#sns.barplot(x=questions_grouped_by_answers.loc[:50].ParentId, y=questions_grouped_by_answers[:50].counts)\nsns.barplot(x='ParentId', y=\"counts\", \n            data=questions_grouped_by_answers.loc[:50],\n            order=questions_grouped_by_answers.loc[:50].sort_values('counts', ascending=False).ParentId)\n\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Answers\")","be470959":"questions_grouped_by_answers.loc[questions_grouped_by_answers['ParentId']==517970]","74ab2eec":"answers_data.loc[answers_data['ParentId']==517970].head()","2fb100ba":"answers.Score.describe()","f2fde37e":"df = answers.sort_values('Score', ascending=False)\nd = df.head(50)\nd.shape","3b6804fc":"plt.figure(figsize=(16,6))\n\nplt.title(\"Score\")\nsns.barplot(x='Id', y=\"Score\", \n            data=d,\n            order=d.sort_values('Score', ascending=False).Id)\n\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Answers\")","c8e86617":"question = questions_data.loc[0]\nquestion","695ba0f3":"def tags_in_question(question):\n    df = tags_data.loc[tags_data[\"Id\"]==question.Id]\n    result = []\n    for index, row in df.iterrows():\n        result.append(row.Tag)\n    return result","76b1aa73":"def question_to_tags_vector(question):\n    tags_q = tags_in_question(question)\n    result = pd.Series()\n    for index, row in tags.iterrows():\n        if row.Tag in tags_q:\n            result[row.Tag]=1\n        else:\n            result[row.Tag]=0\n    return result","89107eab":"question_to_tags_vector(question)","6a819677":"questions_data['CreationDate'].unique()","689561f9":"train_questions = questions_data[(questions_data['CreationDate'] >= '2008-01-01')&(questions_data['CreationDate'] <= '2008-12-31')]\ntest_questions = questions_data[(questions_data['CreationDate'] >= '2009-01-01')&(questions_data['CreationDate'] <= '2009-12-31')]","2ec54868":"print(train_questions.shape)\nprint(test_questions.shape)","5d30a8d7":"def questions_year(year):\n    start_date = str(year)+'-01-01'\n    end_date = str(year)+'-12-31'\n    data = questions_data[(questions_data['CreationDate'] >= start_date)&(questions_data['CreationDate'] <= end_date)]\n    print(\"Dataset size from \", start_date, \" to \", end_date,\": \",data.shape)\n    return data","132bad21":"for i in range(2008, 2017):\n    a = questions_year(i)","215e4561":"questions_2009 = questions_year(2009)\nquestions_2008 = questions_year(2008)","d2201cf4":"ids = questions_2008.Id.unique()\nids = ids.tolist()","760e77dd":"answers_2008_mask = answers_data['ParentId'].isin(ids)\nanswers_2008 = answers_data.loc[answers_2008_mask]\nanswers_2008.shape","0a65107e":"ids_2009 = questions_2009.Id.unique()\nids_2009 = ids_2009.tolist()\n\nanswers_2009_mask = answers_data['ParentId'].isin(ids_2009)\nanswers_2009 = answers_data.loc[answers_2009_mask]\nanswers_2009.shape","9d3f9984":"questions_2008.to_csv('.\/questions_2008.csv')\nquestions_2009.to_csv('.\/questions_2009.csv')\n\nanswers_2008.to_csv('.\/answers_2008.csv')\nanswers_2009.to_csv('.\/answers_2009.csv')","48950175":"## 2.2. Tags data grouped by questions","23492a6b":"# 3. Data cleaning","6380ddc4":"# 2. Data Visualisation","a7b8fcfb":"## 2.3. Answers data","05ef9a48":"# 4. Data Extraction","2202489b":"# 1. Load Data","38f634e5":"## 2.1. Tags data grouped by tags name"}}