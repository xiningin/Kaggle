{"cell_type":{"7e4c9ff2":"code","0188a921":"code","f04127fd":"code","c910db9c":"code","d82f6be0":"code","ab422db9":"code","38606b96":"code","5e9ca198":"code","0a73e8ac":"code","188958a8":"code","3a697b50":"code","3d3e11bd":"code","c2735fdc":"code","f7e9fd08":"code","783fdc98":"code","086e3084":"code","09b6e2ab":"code","e92a1cd9":"code","2c52775c":"code","ec664b31":"code","9c587016":"code","75d2c4bd":"code","fdb87ca3":"code","936f4ae3":"code","e6637186":"code","f69091bc":"code","3d08076c":"code","71ee2b12":"code","c5ecc69f":"code","d12df6e7":"code","57bf81af":"code","32833c0b":"code","07315d99":"code","e71f4c6d":"code","c5aaddf1":"code","ddd5599c":"code","2d560c87":"code","a54c2857":"code","5af09e38":"code","83940390":"code","8d3eac40":"code","2e9a1f5a":"code","12b921a3":"code","ce52165e":"code","771ad169":"code","9afe0fe8":"code","20b7cdd6":"code","6dc3b389":"code","c1d422aa":"code","e557f9e4":"code","ab736c7d":"code","5508a37a":"code","c1de40cd":"code","8a6d0679":"code","0d037c0f":"code","4215aa3a":"code","f6fc6883":"code","da381db8":"code","c5367041":"code","87c19b4d":"code","4b625476":"code","8f425729":"code","90a9cc67":"code","daa1a532":"code","13a7e479":"code","94fd65d8":"code","12b5adc9":"code","0a596086":"code","26ea6ffe":"code","4e6a4008":"code","8d80eca2":"code","09082681":"code","6d056657":"code","aba01d3a":"code","fae1f561":"code","5cad3de3":"code","858f887c":"code","9a5cfc22":"code","5b2f7784":"code","5048de68":"code","089ee36a":"code","03cf4071":"code","2e38058d":"code","4d5ba0ce":"code","1396a1e0":"code","fa3e1d74":"code","16f8bbcc":"code","9b355987":"code","5b300038":"markdown","2de0f415":"markdown","d04f58d6":"markdown","ecbb3c17":"markdown","a787b72d":"markdown","797b3b82":"markdown","a4f3b81b":"markdown","f58010a0":"markdown","ea8fca60":"markdown","c4203459":"markdown","a2c0a317":"markdown","49a85e0f":"markdown","3e7dfe5c":"markdown","0233faf8":"markdown","e0852f3b":"markdown","519c92b8":"markdown","80a37388":"markdown","6a1b25b8":"markdown","fbe70486":"markdown","61cdc984":"markdown","771878af":"markdown","3a24e62e":"markdown","729e13c6":"markdown","bc3f3109":"markdown","6ba8f84e":"markdown","18781840":"markdown","722fad67":"markdown","83afbd83":"markdown","2141c5f9":"markdown","cc6da6ab":"markdown","2a1727f0":"markdown","02f84a05":"markdown","2d7aea65":"markdown","2d74043a":"markdown","ff64eec1":"markdown","0dab5408":"markdown","b4d1a1ee":"markdown","1bbcb6dc":"markdown","266bf891":"markdown","1e9cdade":"markdown","f1e8776a":"markdown","347645fc":"markdown","d02a842d":"markdown","d8ac3156":"markdown","2865c14e":"markdown","9600d482":"markdown","3d6039bb":"markdown","5e0160a8":"markdown","b82fc674":"markdown","e9190323":"markdown","6daafb98":"markdown","9ca38cfe":"markdown","82b81238":"markdown","03970449":"markdown","9ac02c9c":"markdown","1ff94f5d":"markdown","d67b348d":"markdown","288d6cd6":"markdown","b326efca":"markdown"},"source":{"7e4c9ff2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0188a921":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n\nsns.set(style='white', context='notebook', palette='deep')","f04127fd":"import warnings\nwarnings.filterwarnings(\"ignore\")","c910db9c":"#load data set\ntrain=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\nIDtest=test[\"PassengerId\"]","d82f6be0":"train.head()","ab422db9":"train.info()","38606b96":"train.dtypes","5e9ca198":"#outlier detection\n#tukey method\n\ndef detect_outliers(df, n, features):\n    outlier_indices = []\n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = detect_outliers(train,2,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])","0a73e8ac":"# Show the outliers rows\ntrain.loc[Outliers_to_drop]","188958a8":"# Drop outliers\ntrain = train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","3a697b50":"# Joining train and test data set\ntrain_len = len(train)\ndataset =  pd.concat(objs=[train, test], axis=0).reset_index(drop=True)","3d3e11bd":"# Fill empty and NaNs values with NaN\ndataset = dataset.fillna(np.nan)\n\n# Check for Null values\ndataset.isnull().sum()","c2735fdc":"# Infos\ntrain.info()\ntrain.isnull().sum()","f7e9fd08":"train.head()","783fdc98":"missing_counts = train.isnull().sum().sort_values(ascending = False)\npercent = (train.isnull().sum()*100\/train.shape[0]).sort_values(ascending = False)\n\nmissing_df = pd.concat([missing_counts, percent], axis = 1, keys = ['Counts', '%'])\nprint('Missing values: ')\ndisplay(missing_df.head().style.background_gradient(cmap = 'Reds', axis = 0))","086e3084":"train.describe()","09b6e2ab":"num_atts = ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass']\ntrain[num_atts].hist(figsize = (15, 6), color = 'steelblue', edgecolor = 'firebrick', linewidth = 1.5, layout = (2, 3));","e92a1cd9":"# Correlation matrix between numerical values (SibSp Parch Age and Fare values) and Survived \ng = sns.heatmap(train[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True, fmt = \".2f\", cmap = \"coolwarm\")","2c52775c":"g = sns.catplot(x=\"SibSp\",y=\"Survived\",data=train,kind=\"bar\", height = 6, palette=\"vlag\" )\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","ec664b31":"# Explore Parch feature vs Survived\ng  = sns.catplot(x=\"Parch\",y=\"Survived\",data=train,kind=\"bar\", height = 6 , \npalette = \"pastel\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")\n","9c587016":"alone = train[(train['SibSp'] == 0) & (train['Parch'] == 0)]\nnot_alone = train[(train['SibSp'] != 0) | (train['Parch'] != 0)]","75d2c4bd":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.countplot(x = 'Survived', data = alone,  palette = 'Blues', ax = ax1) \nax1.set_title('Count of Alone (non-)Survivors')\nax1.set_xlabel('')\nax1.set_xticklabels(['Deceased', 'Survived'])\nax1.set_ylabel('Number of Passengers')\n\nsns.countplot(x = 'Survived', data = not_alone,  palette = 'Blues', ax = ax2) \nax2.set_title('Count of (non-)Survivors with Family Onboard')\nax2.set_xlabel('')\nax2.set_xticklabels(['Deceased', 'Survived'])\nax2.set_ylabel('Number of Passengers')\n\nplt.tight_layout();","fdb87ca3":"men = train[train['Sex']  == 'male']\nwomen = train[train['Sex']  == 'female']","936f4ae3":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (13, 4))\n\nsns.distplot(train[train['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax1, kde = False)\nsns.distplot(train[train['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax1, kde = False)\nax1.legend()\nax1.set_title('Age Distribution - All Passengers')\n\nsns.distplot(women[women['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax2, kde = False)\nsns.distplot(women[women['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax2, kde = False)\nax2.legend()\nax2.set_title('Age Distribution - Women')\n\nsns.distplot(men[men['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax3, kde = False)\nsns.distplot(men[men['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax3, kde = False)\nax3.legend()\nax3.set_title('Age Distribution - Men')\n\nplt.tight_layout();","e6637186":"# Explore Age distibution \ng = sns.kdeplot(train[\"Age\"][(train[\"Survived\"] == 0) & (train[\"Age\"].notnull())], color=\"Red\", shade = True)\ng = sns.kdeplot(train[\"Age\"][(train[\"Survived\"] == 1) & (train[\"Age\"].notnull())], ax =g, color=\"Blue\", shade= True)\ng.set_xlabel(\"Age\")\ng.set_ylabel(\"Frequency\")\ng = g.legend([\"Not Survived\",\"Survived\"])","f69091bc":"dataset[\"Fare\"].isnull().sum()","3d08076c":"#Fill Fare missing values with the median value\ndataset[\"Fare\"] = dataset[\"Fare\"].fillna(dataset[\"Fare\"].median())","71ee2b12":"# Explore Fare distribution \ng = sns.distplot(dataset[\"Fare\"], color=\"m\", label=\"Skewness : %.2f\"%(dataset[\"Fare\"].skew()))\ng = g.legend(loc=\"best\")","c5ecc69f":"# Apply log to Fare to reduce skewness distribution\ndataset[\"Fare\"] = dataset[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)","d12df6e7":"g = sns.distplot(dataset[\"Fare\"], color=\"b\", label=\"Skewness : %.2f\"%(dataset[\"Fare\"].skew()))\ng = g.legend(loc=\"best\")","57bf81af":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.boxplot(x = 'Pclass', y = 'Fare', data = train, palette = 'tab20', ax = ax1)\nax1.set_title('Distribution of Fares by Class')\n\nsns.distplot(train[train['Survived'] == 1]['Fare'], label = 'Survived', ax = ax2)\nsns.distplot(train[train['Survived'] == 0]['Fare'], label = 'Not Survived', ax = ax2)\nax2.set_title('Distribution of Fares for (non-)Survivors')\nax2.set_xlim([-20, 200])\nax2.legend();","32833c0b":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (11, 4))\n\nsns.countplot(x = 'Sex', hue = 'Survived', data = train,  palette = 'tab20', ax = ax1) \nax1.set_title('Count of (non-)Survivors by Gender')\nax1.set_xlabel('Gender')\nax1.set_ylabel('Number of Passenger')\nax1.legend(labels = ['Deceased', 'Survived'])\n\nsns.barplot(x = 'Sex', y = 'Survived', data = train,  palette = ['#94BFA7', '#FFC49B'], ci = None, ax = ax2)\nax2.set_title('Survival Rate by Gender')\nax2.set_xlabel('Gender')\nax2.set_ylabel('Survival Rate');","07315d99":"train[[\"Sex\",\"Survived\"]].groupby('Sex').mean()","e71f4c6d":"print ('Number of passengers in each class:')\ntrain['Pclass'].value_counts()","c5aaddf1":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.countplot(x = 'Pclass', hue = 'Survived', data = train,  palette = 'tab20', ax = ax1) \nax1.legend(['Deceased', 'Survived'])\nax1.set_title('Count of (non-)Survivors by Class')\nax1.set_ylabel('Number of Passengers')\n\nsns.barplot(x = 'Pclass', y = 'Survived', data = train,  palette = ['#C98BB9', '#F7D4BC', '#B5E2FA'], ci = None, ax = ax2)\nax2.set_title('Survival Rate by Class')\nax2.set_ylabel('Survival Rate');","ddd5599c":"# Explore Pclass vs Survived by Sex\ng = sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train,\n                   height=6, kind=\"bar\", palette=\"rocket\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","2d560c87":"dataset[\"Embarked\"].isnull().sum()","a54c2857":"#Fill Embarked nan values of dataset set with 'S' most frequent value\ndataset[\"Embarked\"] = dataset[\"Embarked\"].fillna(\"S\")","5af09e38":"sns.countplot(x = 'Embarked', hue = 'Survived', data = train,  palette = 'tab20') \nplt.ylabel('Number of Passenger')\nplt.title('Count of (non-)Survivors by Port of Embarkation')\nplt.legend(['Deceased', 'Survived']);","83940390":"g = sns.catplot(x=\"Embarked\", y=\"Survived\",  data=train,\n                   height=6, kind=\"bar\", palette=\"Blues\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","8d3eac40":"# Explore Pclass vs Embarked \ng = sns.catplot(\"Pclass\", col=\"Embarked\",  data=train,\n                   height=6, kind=\"count\", palette=\"YlOrBr\")\ng.despine(left=True)\ng = g.set_ylabels(\"Count\")","2e9a1f5a":"# Explore Age vs Sex, Parch , Pclass and SibSP\ng = sns.catplot(y=\"Age\",x=\"Sex\",data=dataset,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"Sex\",hue=\"Pclass\", data=dataset,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"Parch\", data=dataset,kind=\"box\")\ng = sns.catplot(y=\"Age\",x=\"SibSp\", data=dataset,kind=\"box\")\n","12b921a3":"# convert Sex into categorical value 0 for male and 1 for female\ndataset[\"Sex\"] = dataset[\"Sex\"].map({\"male\": 0, \"female\":1})","ce52165e":"# Filling missing value of Age \n\n## Fill Age with the median age of similar rows according to Pclass, Parch and SibSp\n# Index of NaN age rows\nindex_NaN_age = list(dataset[\"Age\"][dataset[\"Age\"].isnull()].index)\n\nfor i in index_NaN_age :\n    age_med = dataset[\"Age\"].median()\n    age_pred = dataset[\"Age\"][((dataset['SibSp'] == dataset.iloc[i][\"SibSp\"]) & (dataset['Parch'] == dataset.iloc[i][\"Parch\"]) & (dataset['Pclass'] == dataset.iloc[i][\"Pclass\"]))].median()\n    if not np.isnan(age_pred) :\n        dataset['Age'].iloc[i] = age_pred\n    else :\n        dataset['Age'].iloc[i] = age_med","771ad169":"g = sns.catplot(x=\"Survived\", y = \"Age\",data = train, kind=\"box\")\ng = sns.catplot(x=\"Survived\", y = \"Age\",data = train, kind=\"violin\")","9afe0fe8":"dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())","20b7cdd6":"dataset[\"Name\"].head()","6dc3b389":"# Get Title from Name\ndataset_title = [i.split(\",\")[1].split(\".\")[0].strip() for i in dataset[\"Name\"]]\ndataset[\"Title\"] = pd.Series(dataset_title)\ndataset[\"Title\"].head()","c1d422aa":"g = sns.countplot(x=\"Title\",data=dataset)\ng = plt.setp(g.get_xticklabels(), rotation=45)","e557f9e4":"# Convert to categorical values Title \ndataset[\"Title\"] = dataset[\"Title\"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ndataset[\"Title\"] = dataset[\"Title\"].map({\"Master\":0, \"Miss\":1, \"Ms\" : 1 , \"Mme\":1, \"Mlle\":1, \"Mrs\":1, \"Mr\":2, \"Rare\":3})\ndataset[\"Title\"] = dataset[\"Title\"].astype(int)","ab736c7d":"g = sns.countplot(dataset[\"Title\"])\ng = g.set_xticklabels([\"Master\",\"Miss\/Ms\/Mme\/Mlle\/Mrs\",\"Mr\",\"Rare\"])","5508a37a":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=dataset,kind=\"bar\")\ng = g.set_xticklabels([\"Master\",\"Miss-Mrs\",\"Mr\",\"Rare\"])\ng = g.set_ylabels(\"survival probability\")","c1de40cd":"# Drop Name variable\ndataset.drop(labels = [\"Name\"], axis = 1, inplace = True)","8a6d0679":"dataset[\"Fsize\"] = dataset[\"SibSp\"] + dataset[\"Parch\"] + 1","0d037c0f":"g = sns.catplot(x=\"Fsize\",y=\"Survived\",data = dataset, kind='bar', palette='Blues')\ng = g.set_ylabels(\"Survival Probability\")","4215aa3a":"# Create new feature of family size\ndataset['Single'] = dataset['Fsize'].map(lambda s: 1 if s == 1 else 0)\ndataset['SmallF'] = dataset['Fsize'].map(lambda s: 1 if  s == 2  else 0)\ndataset['MedF'] = dataset['Fsize'].map(lambda s: 1 if 3 <= s <= 4 else 0)\ndataset['LargeF'] = dataset['Fsize'].map(lambda s: 1 if s >= 5 else 0)","f6fc6883":"g = sns.catplot(x=\"Single\",y=\"Survived\",data=dataset,kind=\"bar\", palette='husl')\ng = g.set_ylabels(\"Survival Probability\")\ng = sns.catplot(x=\"SmallF\",y=\"Survived\",data=dataset,kind=\"bar\",palette='husl')\ng = g.set_ylabels(\"Survival Probability\")\ng = sns.catplot(x=\"MedF\",y=\"Survived\",data=dataset,kind=\"bar\", palette='husl')\ng = g.set_ylabels(\"Survival Probability\")\ng = sns.catplot(x=\"LargeF\",y=\"Survived\",data=dataset,kind=\"bar\", palette='husl')\ng = g.set_ylabels(\"Survival Probability\")","da381db8":"# convert to indicator values Title and Embarked \ndataset = pd.get_dummies(dataset, columns = [\"Title\"])\ndataset = pd.get_dummies(dataset, columns = [\"Embarked\"], prefix=\"Em\")","c5367041":"dataset.head()","87c19b4d":"dataset[\"Cabin\"].head()","4b625476":"dataset[\"Cabin\"].describe()","8f425729":"dataset[\"Cabin\"].isnull().sum()","90a9cc67":"dataset[\"Cabin\"][dataset[\"Cabin\"].notnull()].head()","daa1a532":"# Replace the Cabin number by the type of cabin 'X' if not\ndataset[\"Cabin\"] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in dataset['Cabin'] ])","13a7e479":"g = sns.countplot(dataset[\"Cabin\"],order=['A','B','C','D','E','F','G','T','X'])","94fd65d8":"g = sns.catplot(y=\"Survived\",x=\"Cabin\",data=dataset,kind=\"bar\",order=['A','B','C','D','E','F','G','T','X'])\ng = g.set_ylabels(\"Survival Probability\")","12b5adc9":"dataset = pd.get_dummies(dataset, columns = [\"Cabin\"],prefix=\"Cabin\")","0a596086":"dataset[\"Ticket\"].head()","26ea6ffe":"## Treat Ticket by extracting the ticket prefix. When there is no prefix it returns X. \n\nTicket = []\nfor i in list(dataset.Ticket):\n    if not i.isdigit() :\n        Ticket.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(' ')[0])\n        #Take prefix\n    else:\n        Ticket.append(\"X\")\n        \ndataset[\"Ticket\"] = Ticket\n\ndataset[\"Ticket\"].head()","4e6a4008":"dataset = pd.get_dummies(dataset, columns = [\"Ticket\"], prefix=\"T\")","8d80eca2":"# Create categorical values for Pclass\ndataset[\"Pclass\"] = dataset[\"Pclass\"].astype(\"category\")\ndataset = pd.get_dummies(dataset, columns = [\"Pclass\"],prefix=\"Pc\")","09082681":"# Drop useless variables \ndataset.drop(labels = [\"PassengerId\"], axis = 1, inplace = True)","6d056657":"dataset.head()","aba01d3a":"## Separate train dataset and test dataset\n\ntrain = dataset[:train_len]\ntest = dataset[train_len:]\ntest.drop(labels=[\"Survived\"],axis = 1,inplace=True)","fae1f561":"## Separate train features and label \n\ntrain[\"Survived\"] = train[\"Survived\"].astype(int)\n\nY_train = train[\"Survived\"]\n\nX_train = train.drop(labels = [\"Survived\"],axis = 1)","5cad3de3":"# Cross validate model with Kfold stratified cross val\nkfold = StratifiedKFold(n_splits=10)","858f887c":"# Modeling step Test differents algorithms \nrandom_state = 2\nclassifiers = []\nclassifiers.append(SVC(random_state=random_state))\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state,learning_rate=0.1))\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(ExtraTreesClassifier(random_state=random_state))\nclassifiers.append(GradientBoostingClassifier(random_state=random_state))\nclassifiers.append(MLPClassifier(random_state=random_state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = random_state))\nclassifiers.append(LinearDiscriminantAnalysis())\n\ncv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X_train, y = Y_train, scoring = \"accuracy\", cv = kfold, n_jobs=4))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n\"RandomForest\",\"ExtraTrees\",\"GradientBoosting\",\"MultipleLayerPerceptron\",\"KNeighboors\",\"LogisticRegression\",\"LinearDiscriminantAnalysis\"]})\n\ng = sns.barplot(\"CrossValMeans\",\"Algorithm\",data = cv_res, palette=\"Set3\",orient = \"h\",**{'xerr':cv_std})\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","9a5cfc22":"### META MODELING  WITH ADABOOST, RF, EXTRATREES and GRADIENTBOOSTING\n\n# Adaboost\nDTC = DecisionTreeClassifier()\n\nadaDTC = AdaBoostClassifier(DTC, random_state=7)\n\nada_param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n              \"base_estimator__splitter\" :   [\"best\", \"random\"],\n              \"algorithm\" : [\"SAMME\",\"SAMME.R\"],\n              \"n_estimators\" :[1,2],\n              \"learning_rate\":  [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3,1.5]}\n\ngsadaDTC = GridSearchCV(adaDTC,param_grid = ada_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsadaDTC.fit(X_train,Y_train)\n\nada_best = gsadaDTC.best_estimator_","5b2f7784":"gsadaDTC.best_score_","5048de68":"#ExtraTrees \nExtC = ExtraTreesClassifier()\n\n\n## Search grid for optimal parameters\nex_param_grid = {\"max_depth\": [None],\n              \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,300],\n              \"criterion\": [\"gini\"]}\n\n\ngsExtC = GridSearchCV(ExtC,param_grid = ex_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsExtC.fit(X_train,Y_train)\n\nExtC_best = gsExtC.best_estimator_\n\n# Best score\ngsExtC.best_score_","089ee36a":"# RFC Parameters tunning \nRFC = RandomForestClassifier()\n\n\n## Search grid for optimal parameters\nrf_param_grid = {\"max_depth\": [None],\n              \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,300],\n              \"criterion\": [\"gini\"]}\n\n\ngsRFC = GridSearchCV(RFC,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsRFC.fit(X_train,Y_train)\n\nRFC_best = gsRFC.best_estimator_\n\n# Best score\ngsRFC.best_score_","03cf4071":"# Gradient boosting tunning\n\nGBC = GradientBoostingClassifier()\ngb_param_grid = {'loss' : [\"deviance\"],\n              'n_estimators' : [100,200,300],\n              'learning_rate': [0.1, 0.05, 0.01],\n              'max_depth': [4, 8],\n              'min_samples_leaf': [100,150],\n              'max_features': [0.3, 0.1] \n              }\n\ngsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsGBC.fit(X_train,Y_train)\n\nGBC_best = gsGBC.best_estimator_\n\n# Best score\ngsGBC.best_score_","2e38058d":"### SVC classifier\nSVMC = SVC(probability=True)\nsvc_param_grid = {'kernel': ['rbf'], \n                  'gamma': [ 0.001, 0.01, 0.1, 1],\n                  'C': [1, 10, 50, 100,200,300, 1000]}\n\ngsSVMC = GridSearchCV(SVMC,param_grid = svc_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsSVMC.fit(X_train,Y_train)\n\nSVMC_best = gsSVMC.best_estimator_\n\n# Best score\ngsSVMC.best_score_","4d5ba0ce":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt\n\ng = plot_learning_curve(gsRFC.best_estimator_,\"RF mearning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsExtC.best_estimator_,\"ExtraTrees learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsSVMC.best_estimator_,\"SVC learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsadaDTC.best_estimator_,\"AdaBoost learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsGBC.best_estimator_,\"GradientBoosting learning curves\",X_train,Y_train,cv=kfold)","1396a1e0":"nrows = ncols = 2\nfig, axes = plt.subplots(nrows = nrows, ncols = ncols, sharex=\"all\", figsize=(15,15))\n\nnames_classifiers = [(\"AdaBoosting\", ada_best),(\"ExtraTrees\",ExtC_best),(\"RandomForest\",RFC_best),(\"GradientBoosting\",GBC_best)]\n\nnclassifier = 0\nfor row in range(nrows):\n    for col in range(ncols):\n        name = names_classifiers[nclassifier][0]\n        classifier = names_classifiers[nclassifier][1]\n        indices = np.argsort(classifier.feature_importances_)[::-1][:40]\n        g = sns.barplot(y=X_train.columns[indices][:40],x = classifier.feature_importances_[indices][:40] , orient='h',ax=axes[row][col])\n        g.set_xlabel(\"Relative importance\",fontsize=12)\n        g.set_ylabel(\"Features\",fontsize=12)\n        g.tick_params(labelsize=9)\n        g.set_title(name + \" feature importance\")\n        nclassifier += 1","fa3e1d74":"test_Survived_RFC = pd.Series(RFC_best.predict(test), name=\"RFC\")\ntest_Survived_ExtC = pd.Series(ExtC_best.predict(test), name=\"ExtC\")\ntest_Survived_SVMC = pd.Series(SVMC_best.predict(test), name=\"SVC\")\ntest_Survived_AdaC = pd.Series(ada_best.predict(test), name=\"Ada\")\ntest_Survived_GBC = pd.Series(GBC_best.predict(test), name=\"GBC\")\n\n\n# Concatenate all classifier results\nensemble_results = pd.concat([test_Survived_RFC,test_Survived_ExtC,test_Survived_AdaC,test_Survived_GBC, test_Survived_SVMC],axis=1)\n\n\ng= sns.heatmap(ensemble_results.corr(),annot=True)","16f8bbcc":"votingC = VotingClassifier(estimators=[('rfc', RFC_best), ('extc', ExtC_best),\n('svc', SVMC_best), ('adac',ada_best),('gbc',GBC_best)], voting='soft', n_jobs=4)\n\nvotingC = votingC.fit(X_train, Y_train)","9b355987":"test_Survived = pd.Series(votingC.predict(test), name=\"Survived\")\n\nresults = pd.concat([IDtest,test_Survived],axis=1)\n\nresults.to_csv(\"ensemble_python_voting.csv\",index=False)","5b300038":"* **A quick look at our data**","2de0f415":"## **3. FEATURE ENGINEERING**\n### **3.1 NAME\/TITLE**","d04f58d6":"* **Load train and test data sets**","ecbb3c17":"## **1.2 CATEGORICAL VALUES**","a787b72d":"It could mean that tickets sharing the same prefixes could be booked for cabins placed together. It could therefore lead to the actual placement of the cabins within the ship.\n\nTickets with same prefixes may have a similar class and survival.\n\nSo let's replace the Ticket feature column by the ticket prefixe. Which may be more informative.","797b3b82":"* Let's take a closer look at the missing values:","a4f3b81b":"GradientBoosting and Adaboost classifiers tend to overfit the training set. According to the growing cross-validation curves GradientBoosting and Adaboost could perform better with more training examples.\n\nSVC and ExtraTrees classifiers seem to better generalize the prediction since the training and cross-validation curves are close together.\n\n#### **4.14 Feature importance of tree based classifiers**\n\nIn order to see the most informative features for the prediction of passengers survival, i displayed the feature importance for the 4 tree based classifiers.","f58010a0":">  Small families (Parch 1,2) have more chance to survive when compared to single (parch 0), medium(parch 3,4) and large family(parch 5)\n\n> **NOTE:** There is an important standard deviation in the survival of passengers with 3 parents\/children\n\n","ea8fca60":"> Hence we can say that having 1 to 2 relatives on board can actually increase your chances of survival.\n\n### **1.13 Age**","c4203459":"* ### Outlier detection \n","a2c0a317":"**It can be observed that most passengers:**\n* were young (age < 40)\n* boarded the ship alone (SibSp and Parch is 0)\n* paid a low fare\n* boarded in the 3rd class\n\n<hr>","49a85e0f":"# 1. Feature Analysis\n## **1.1 NUMERICAL VALUES**","3e7dfe5c":"## **4. MODELING**","0233faf8":"We have already seen that women (Mrs or Miss) had higher odds of survival. Now here, notice that Masters and people with a Rare Title have indeed a higher chance of survival compared to 'common' men (Mr).","e0852f3b":"> Only fare feature seems to have a significative corelation with the survival probability.\n\n> Let's explore all these features to find further corelation with the survival and subpopulation of these features.\n\n###  **1.11 SibSp**\n","519c92b8":"![TTT.jpeg](attachment:TTT.jpeg)","80a37388":"### **4.3 Prediction**\n\n#### **4.31 Predict and Submit results**","6a1b25b8":"If you liked the notebook then do upvote. It really does motivate!","fbe70486":"Catplots of family size categories show that Small and Medium families have more chance to survive than single passenger and large families.","61cdc984":"plot the feature importance for the 4 tree based classifiers (Adaboost, ExtraTrees, RandomForest and GradientBoosting).\n\nWe note that the four classifiers have different top features according to the relative importance. It means that their predictions are not based on the same features. Nevertheless, they share some common important features for the classification , for example 'Fare', 'Title_2', 'Age' and 'Sex'.\n\nTitle_2 which indicates the Mrs\/Mlle\/Mme\/Miss\/Ms category is highly correlated with Sex.\n\nWe can say that:\n\n* Pc_1, Pc_2, Pc_3 and Fare refer to the general social standing of passengers.\n\n* Sex and Title_2 (Mrs\/Mlle\/Mme\/Miss\/Ms) and Title_3 (Mr) refer to the gender.\n\n* Age and Title_1 (Master) refer to the age of passengers.\n\n* Fsize, LargeF, MedF, Single refer to the size of the passenger family.\n\n**According to the feature importance of this 4 classifiers, the prediction of the survival seems to be more associated with the Age, the Sex, the family size and the social standing of the passengers more than the location in the boat.**","771878af":"There is 17 titles in the dataset, most of them are very rare and we can group them in 4 categories.\n\n","3a24e62e":"> It is evident that different age groups had very different survival rates. For instance, both genders display a higher probability of survival between the ages of 15 and 45. Also, the spike at young ages (0-4) shows that infants and young children have higher odds of survival.We also see that passengers between 60-80 have less survived.\n\n> So, even if \"Age\" is not correlated with \"Survived\", we can see that there is age categories of passengers that of have more or less chance to survive.\n\n> It seems that very young passengers have more chance to survive.","729e13c6":"### **3.2 FAMILY SIZE**\n\nWe can imagine that large families will have more difficulties to evacuate, looking for theirs sisters\/brothers\/parents during the evacuation. So, i choosed to create a \"Fize\" (family size) feature which is the sum of SibSp , Parch and 1 (including the passenger).","bc3f3109":"The Cabin feature column contains 292 values and 1007 missing values.","6ba8f84e":"### **4.1 Simple Modelling**\n\n#### **Cross Validate Model**\n\nLet's compare popular classifiers and evaluate the mean accuracy of each of them by a stratified kfold cross validation procedure.\n* SVC\n* Decision Tree\n* AdaBoost\n* Random Forest\n* Extra Trees\n* Gradient Boosting\n* Multiple layer perceprton (neural network)\n* KNN\n* Logistic regression\n* Linear Discriminant Analysis","18781840":"Tukey's rule says that the outliers are values more than 1.5 times the interquartile range from the quartiles \u2014 either below Q1 \u2212 1.5IQR, or above Q3 + 1.5IQR.\n\nHere, the code detects outliers from the numerical values features (Age, SibSp, Sarch and Fare). Then, considered outliers as rows that have at least two outlied numerical values.","722fad67":"Here, we detected 10 outliers. PassengerId 29, 89, 342 have very high ticket fare while the rest have high SibSp value. Hence, we drop these.","83afbd83":"> Indeed, the third class is the most frequent for passenger coming from Southampton (S) and Queenstown (Q), whereas Cherbourg passengers are mostly in first class which have the highest survival rate.\n\n> Maybe we can say that first class passengers were prioritised during the evacuation due to their influence.\n\n## **2. Filling missing Values**\n","2141c5f9":"#### **4.13 Plot learning curves**\nLearning curves are a good way to see the overfitting effect on the training set and the effect of the training size on the accuracy.","cc6da6ab":"> Skewness is clearly reduced after the log transformation\n\nOne would assume that fare is closely related to class. Let's plot a boxplot for the distribution of Fare values across classes and a histogram for survival:","2a1727f0":"There were more men than women on board. However, more women survived the shipwreck (the survival rate is almost 75% for women compared to only 20% for men!).Hence we can say that, \"women and children first\" protocol was implemented for boarding lifeboats.\nSo Gender might play an important role in the prediction of the survival.\n\n### **1.22 Pclass**\n","02f84a05":"So we choose SVC, AdaBoost, RandomForest , ExtraTrees and the GradientBoosting classifiers for the ensemble modeling.\n\n#### **4.12 Hyperparameter tunning for best models**\n\ngrid search optimization for AdaBoost, ExtraTrees , RandomForest, GradientBoosting and SVC classifiers.","2d7aea65":"# **<center> <span style=\"color:crimson;font-family:Lucida Console;\"> TITANIC SURVIVAL  <\/span> <\/center>**","2d74043a":"The first letter of the cabin indicates the Desk, i choosed to keep this information only, since it indicates the probable location of the passenger in the Titanic.","ff64eec1":"Since we have two missing values , i decided to fill them with the most fequent value of \"Embarked\" (S).","0dab5408":"### **2.2 Fare**","b4d1a1ee":"\n### **2.1 AGE**","1bbcb6dc":"> This trend is conserved when we look at both male and female passengers.\n\n### **1.23 PORT OF EMBARKATION**","266bf891":"> As we can see, Fare distribution is very skewed. This can lead to overweigth very high values in the model, even if it is scaled.\n\n> In this case, it is better to transform it with the log function to reduce this skew.","1e9cdade":"The family size seems to play an important role, survival probability is worst for large families.\n\nWe create 4 categories of family size.","f1e8776a":"> From the above plot we can see that passengers coming from Cherbourg (C) have more chance to survive.\n\nMaybe the proportion of first class passengers is higher for those who came from Cherbourg (C) than Queenstown (Q), Southampton (S).\n\nLet's see the Pclass distribution vs Embarked","347645fc":"It's not a surprise that people in class 1 paid more than the other two classes.","d02a842d":"## **Let's get started!**","d8ac3156":"Because of the low number of passenger that have a cabin, survival probabilities have an important standard deviation and we can't distinguish between survival probability of passengers in the different desks.\n\nBut we can see that passengers with a cabin have generally more chance to survive than passengers without (X).\n\nIt is particularly true for cabin B, C, D, E and F.","2865c14e":"The Name feature contains information on passenger's title.\n\nSince some passenger with distingused title may be preferred during the evacuation, it is interesting to add them to the model.","9600d482":"> Single passengers (0 SibSP) or passengers having 1-2 relatives on board (SibSP 1 or 2) have more chance to survive while it seems that passengers having a lot of siblings\/spouses have less chance to survive.\n\n### **1.12 Parch**","3d6039bb":"**Important things to note are:**\n* Mean age is approx 30 years old, while the median is 28.\n* Mean fair is \u00a331.121\n* Only 38% of passenegers survived.\n* The median of both, SibSp and Parch, is 0 which indicates that most passengers were alone.\n\nLet's visualize the differences in scales,by plotting a histogram for each numerical attribute.","5e0160a8":"Age distribution seems to be the same in Male and Female subpopulations, so Sex is not informative to predict Age.\n\nHowever, 1rst class passengers are older than 2nd class passengers who are also older than 3rd class passengers.\n\nMoreover, the more a passenger has parents\/children the older he is and the more a passenger has siblings\/spouses the younger he is.","b82fc674":"### **3.4 TICKET**","e9190323":"> When we superimpose the two densities , we cleary see a peak correponsing (between 0 and 5) to babies and very young childrens.\n\n### **1.14 Fare**","6daafb98":"> More than 50% of passengers boarded in the 3rd class. Nevertheless, survival favours the wealthy as shown in the right figure (the survival rate increases as we move from 3rd to 1st class).","9ca38cfe":"* Let's look at the statistical summary of the numerical attributes","82b81238":"The prediction seems to be quite similar for the 5 classifiers except when Adaboost is compared to the others classifiers.\n\nThe 5 classifiers give more or less the same prediction but there is some differences. Theses differences between the 5 classifier predictions are sufficient to consider an ensembling vote.\n\n### **4.2 Ensemble modeling**\n\n#### **4.21 Combining models**\n\nA voting classifier to combine the predictions coming from the 5 classifiers.\n\nPass the argument \"soft\" to the voting parameter to take into account the probability of each vote.","03970449":"While replacing missing values in the 'Age' and 'Embarked' columns won't be that difficult. However, we will probably have to discard the 'Cabin' attribute since more than 75% of all values are missing.","9ac02c9c":"> Since we have one missing value , I decided to fill it with the median value which will not have an important effect on the prediction.","1ff94f5d":"### **1.21 Gender**","d67b348d":"No difference between median value of age in survived and not survived subpopulation.\n\nBut in the violin plot of survived passengers, we still notice that very young passengers have higher survival rate.","288d6cd6":"* Join train and test datasets in order to obtain the same number of features during categorical conversion","b326efca":"**> The meaning of each attribute is the following:**\n\n* PassengerId: the ID given to each passenger,\n* Survived: the target attribute (1 for passengers who survived, 0 for those who didn't),\n* Pclass: Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd class),\n* Name, Sex, Age: self-explanatory,\n* SibSp: Number of siblings & spouses aboard the Titanic,\n* Parch: Number of parents & children aboard the Titanic,\n* Ticket: Ticket number,\n* Fare: Passenger fare (in pounds),\n* Cabin: Passenger's cabin number, and\n* Embarked: Port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton).\n\n*'PassengerId' is unique to each passenger*"}}