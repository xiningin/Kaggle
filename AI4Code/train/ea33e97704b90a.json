{"cell_type":{"6c9e7ccb":"code","ce22c273":"code","8a38941a":"code","88376472":"code","21ef7dd4":"code","b17d9c4b":"code","09c21b4c":"code","647a307a":"code","37a4ec6e":"code","5c34f8a8":"code","c3cf4d8c":"code","6515a259":"code","d3d09242":"code","6f07c925":"code","35ea0f82":"code","6b55c12b":"code","0344d366":"code","8e39d5af":"code","5e03e971":"code","5d8b2ab2":"code","1c0e3608":"code","47c452e1":"code","3ef68fa4":"code","607436b4":"code","9b546a79":"code","01646e43":"code","6f362c71":"code","86c34aee":"code","b5e81560":"code","672fb28e":"code","fff73893":"code","3018bfe1":"code","f2bae346":"code","33dbdf2d":"code","d8c26a8c":"code","42b382d0":"code","bc7dd63b":"code","d6129018":"code","0dbe95a6":"code","53ca26f7":"code","f1327368":"code","60cdcde4":"code","3572601a":"code","48fa9d29":"code","e3c38004":"code","b0dee11d":"code","64b93c92":"code","dc8db866":"markdown","1cd8fac9":"markdown","34b05690":"markdown","e98782ae":"markdown","9421f6d2":"markdown","4feaa120":"markdown","72ca88b0":"markdown","bac91ded":"markdown","67640b5f":"markdown","293a2e95":"markdown","bbe2c1ff":"markdown","933bab2b":"markdown","97c92040":"markdown","2310dcce":"markdown","392fe40f":"markdown","09fd1972":"markdown","d89498bc":"markdown","746d72c2":"markdown","a14be16a":"markdown","5af4f3a6":"markdown","719547b9":"markdown","a2fad27c":"markdown","5835ebba":"markdown","4ae65f4e":"markdown","de407946":"markdown","d88b2888":"markdown"},"source":{"6c9e7ccb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce22c273":"PATH = \"..\/input\/titanic\/\"\ntrain=pd.read_csv(PATH + 'train.csv')\ntest=pd.read_csv(PATH+ 'test.csv')","8a38941a":"train.head()","88376472":"train.info()","21ef7dd4":"cols = ['Survived','Pclass','Sex', 'SibSp',\n       'Parch', 'Embarked']\n\nfig,ax = plt.subplots(math.ceil(len(cols)\/3),3,figsize=(20, 12))\nax = ax.flatten()\nfor a,s in zip(ax,cols):\n    sns.countplot(x =s,data = train,ax =a)   ","b17d9c4b":"from sklearn.preprocessing import LabelEncoder\ndf=train\nlabel_encoder=LabelEncoder()\ndf['Sex']=label_encoder.fit_transform(df['Sex'])\ntest['Sex']=label_encoder.fit_transform(test['Sex'])","09c21b4c":"df['Cabin']=df['Cabin'].fillna(0)\nfor row in range(891):\n    if(df.loc[row,'Cabin']==0):\n        df.loc[row,'Ca']=0\n    else:\n        df.loc[row,'Ca']=1\n        \nprint(df[df['Ca']==1].mean(),'\\n\\n',df[df['Ca']==0].mean())","647a307a":"test['Cabin']=test['Cabin'].fillna(0)\nfor row in range(418):\n    if(test.loc[row,'Cabin']==0):\n        test.loc[row,'Ca']=0\n    else:\n        test.loc[row,'Ca']=1\n\nprint(test[test['Ca']==1].mean(),'\\n\\n',test[test['Ca']==0].mean())","37a4ec6e":"print(df[df['Sex']==0].mean(),'\\n\\n',df[df['Sex']==1].mean())","5c34f8a8":"print(test[test['Sex']==0].mean(),'\\n\\n',test[test['Sex']==1].mean())","c3cf4d8c":"df['Age']=df['Age'].fillna(0)\nprint(df[(df['Sex']==0) & (df['Age']==0)].count(),'\\n\\n',df[(df['Sex']==1) & (df['Age']==0)].count())","6515a259":"for row in range(891):\n    if ('Mr.' in df.loc[row,'Name'] or 'Don.' in df.loc[row,'Name'] or 'Jonkheer.' in df.loc[row,'Name']):\n        df.loc[row,'Sal']=1;\n    elif 'Mrs.' in df.loc[row,'Name']:\n        df.loc[row,'Sal']=2;\n    elif 'Master.' in df.loc[row,'Name']:\n        df.loc[row,'Sal']=3;\n    elif ('Miss.' in df.loc[row,'Name'] or 'Ms.' in df.loc[row,'Name'] or 'Mlle.' in df.loc[row,'Name'] or 'Mme.' in df.loc[row,'Name']):\n        df.loc[row,'Sal']=4;\n    elif 'Rev.' in df.loc[row,'Name']: \n        df.loc[row,'Sal']=5;\n    elif 'Dr.' in df.loc[row,'Name']: \n        df.loc[row,'Sal']=6;\n    elif ('Major.' in df.loc[row,'Name'] or 'Col.' in df.loc[row,'Name'] or 'Capt.' in df.loc[row,'Name']): \n        df.loc[row,'Sal']=7;\n    else: \n        df.loc[row,'Sal']=8;\n        \nprint(\"Mean age Mr.:\",df[df['Sal']==1].Age.mean(),\"Mean survival rate of Mr.:\",df[df['Sal']==1].Survived.mean())\nprint(\"Mean age Mrs.:\",df[df['Sal']==2].Age.mean(),\"Mean survival rate of Mrs.:\",df[df['Sal']==2].Survived.mean())\nprint(\"Mean age Master.:\",df[df['Sal']==3].Age.mean(),\"Mean survival rate of Master.:\",df[df['Sal']==3].Survived.mean())\nprint(\"Mean age Miss.:\",df[df['Sal']==4].Age.mean(),\"Mean survival rate of Miss.:\",df[df['Sal']==4].Survived.mean())\nprint(\"Mean age Rev.:\",df[df['Sal']==5].Age.mean(),\"Mean survival rate of Rev.:\",df[df['Sal']==5].Survived.mean())\nprint(\"Mean age Dr.:\",df[df['Sal']==6].Age.mean(),\"Mean survival rate of Dr.:\",df[df['Sal']==6].Survived.mean())\nprint(\"Mean age Military titles:\",df[df['Sal']==7].Age.mean(),\"Mean survival rate of Military titles:\",df[df['Sal']==7].Survived.mean())\nprint(\"Mean age Royal.:\",df[df['Sal']==8].Age.mean(),\"Mean survival rate of Royal.:\",df[df['Sal']==8].Survived.mean())","d3d09242":"Mr_rows=df[(df['Age']==0) & (df['Sal']==1)].index\nMrs_rows=df[(df['Age']==0) & (df['Sal']==2)].index\nMaster_rows=df[(df['Age']==0) & (df['Sal']==3)].index\nMs_rows=df[(df['Age']==0) & (df['Sal']==4)].index\nRev_rows=df[(df['Age']==0) & (df['Sal']==5)].index\nDr_rows=df[(df['Age']==0) & (df['Sal']==6)].index\nMilitary_rows=df[(df['Age']==0) & (df['Sal']==7)].index\nRoyal_rows=df[(df['Age']==0) & (df['Sal']==8)].index\n\nprint('Nans in Mr:',Mr_rows)\nprint('Nans in Mrs:',Mrs_rows)\nprint('Nans in Master:',Master_rows)\nprint('Nans in Miss:',Ms_rows)\nprint('Nans in Rev:',Rev_rows)\nprint('Nans in Dr:',Dr_rows)\nprint('Nans in Military:',Military_rows)\nprint('Nans in Royal:',Royal_rows)","6f07c925":"print(\"Mean age of Men:\",df[(df['Age']!=0) & (df['Sal']==1)].Age.mean())\nprint(\"Mean age of Women:\",df[(df['Age']!=0) & (df['Sal']==2)].Age.mean())\nprint(\"Mean age of Master:\",df[(df['Age']!=0) & (df['Sal']==3)].Age.mean())\nprint(\"Mean age of Miss:\",df[(df['Age']!=0) & (df['Sal']==4)].Age.mean())\nprint(\"Mean age of Rev:\",df[(df['Age']!=0) & (df['Sal']==5)].Age.mean())\nprint(\"Mean age of Dr:\",df[(df['Age']!=0) & (df['Sal']==6)].Age.mean())\nprint(\"Mean age of Military:\",df[(df['Age']!=0) & (df['Sal']==7)].Age.mean())\nprint(\"Mean age of Royal:\",df[(df['Age']!=0) & (df['Sal']==8)].Age.mean())","35ea0f82":"df.loc[Mr_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==1)].Age.mean()\ndf.loc[Mrs_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==2)].Age.mean()\ndf.loc[Master_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==3)].Age.mean()\ndf.loc[Ms_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==4)].Age.mean()\ndf.loc[Rev_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==5)].Age.mean()\ndf.loc[Dr_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==6)].Age.mean()\ndf.loc[Ms_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==7)].Age.mean()\ndf.loc[Ms_rows,'Age']=df[(df['Age']!=0) & (df['Sal']==8)].Age.mean()","6b55c12b":"sns.barplot(df['Sal'],df['Survived'])","0344d366":"df.info()","8e39d5af":"df['Embarked'].unique()","5e03e971":"df[(df['Embarked']!='S') & (df['Embarked']!='C') & (df['Embarked']!='Q')]","5d8b2ab2":"df.loc[61,'Embarked']='S'\ndf.loc[829,'Embarked']='S'","1c0e3608":"rows1=df[(df['Age']!=0) & (df['Sal']==1)].index\nrows2=df[(df['Age']!=0) & (df['Sal']==2)].index\nrows3=df[(df['Age']!=0) & (df['Sal']==3)].index\nrows4=df[(df['Age']!=0) & (df['Sal']==4)].index\nrows5=df[(df['Age']!=0) & (df['Sal']==5)].index\nrows6=df[(df['Age']!=0) & (df['Sal']==6)].index\nrows7=df[(df['Age']!=0) & (df['Sal']==7)].index\nrows8=df[(df['Age']!=0) & (df['Sal']==8)].index\n\ndf.loc[:,'Mr']=0\ndf.loc[:,'Mrs']=0\ndf.loc[:,'Master']=0\ndf.loc[:,'Miss']=0\ndf.loc[:,'Rev']=0\ndf.loc[:,'Dr']=0\ndf.loc[:,'Military']=0\ndf.loc[:,'Royal']=0","47c452e1":"df.loc[rows1,'Mr']=1\ndf.loc[rows2,'Mrs']=1\ndf.loc[rows3,'Master']=1\ndf.loc[rows4,'Miss']=1\ndf.loc[rows5,'Rev']=1\ndf.loc[rows6,'Dr']=1\ndf.loc[rows7,'Military']=1\ndf.loc[rows5,'Royal']=1","3ef68fa4":"S_rows=df[df['Embarked']=='S'].index\nQ_rows=df[df['Embarked']=='Q'].index\nC_rows=df[df['Embarked']=='C'].index\ndf['S']=0\ndf['Q']=0\ndf['C']=0\n\ndf.loc[S_rows,'S']=1\ndf.loc[Q_rows,'Q']=1\ndf.loc[C_rows,'C']=1","607436b4":"Sibrows=df[(df['SibSp']!=0)].index\nParrows=df[(df['Parch']!=0)].index\ndf.loc[Sibrows,'SibSp']=1\ndf.loc[Parrows,'Parch']=1","9b546a79":"df['Age'].hist()\nplt.title('Train set:Age distribution of people')\nplt.show()\n\ntest['Age'].hist()\nplt.title('Test set:Age distribution of people')\nplt.show()\n","01646e43":"df['Fare'].hist()\nplt.title('Train set:Fare distribution')\nplt.show()\n\ntest['Fare'].hist()\nplt.title('Test set:Fare distribution')\nplt.show()","6f362c71":"df.drop(['PassengerId','Name','Ticket','Fare','Cabin','Sal','Embarked'],axis=1)","86c34aee":"#features=['Mr','Mrs','Master','Miss','Rev','Dr','Military','Royal','Pclass','S','Q','C']\nfeatures=['Sex','Pclass','Parch','Mr','Mrs','Master','Miss','Rev','Dr','Military','Royal']\nX=df.loc[:,features]\nY=df.loc[:,'Survived']","b5e81560":"from sklearn.model_selection import train_test_split\n\nX_test,X_train,Y_test,Y_train=train_test_split(X,Y, test_size=0.2, random_state=1)","672fb28e":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nDT=DecisionTreeClassifier(criterion=\"entropy\",random_state=0)\nDT.fit(X_train,Y_train)\ny_pred=DT.predict(X_test)\nDT_score=accuracy_score(Y_test, y_pred)\nprint(\"DecisionTree Score:\",DT_score)","fff73893":"DTimportance = DT.feature_importances_\n# summarize feature importance\nfor i,v in enumerate(DTimportance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n# plot feature importance\nplt.bar([x for x in range(len(DTimportance))], DTimportance)\nplt.grid()\nplt.show()","3018bfe1":"from sklearn.ensemble import RandomForestClassifier\n\nRF=RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nRF.fit(X_train,Y_train)\nRF_score=accuracy_score(Y_test, RF.predict(X_test))\n\nprint(\"RandomForest Score:\",RF_score)","f2bae346":"RFimportance=RF.feature_importances_\n# summarize feature importance\nfor i,v in enumerate(RFimportance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n# plot feature importance\nplt.bar([x for x in range(len(RFimportance))], RFimportance)\nplt.grid()\nplt.show()","33dbdf2d":"from sklearn.ensemble import BaggingClassifier\n\nBC=BaggingClassifier(random_state=0)\nBC.fit(X_train,Y_train)\nBC_score=accuracy_score(Y_test, BC.predict(X_test))\n\nprint(BC_score)","d8c26a8c":"from sklearn.ensemble import GradientBoostingClassifier\n\nGBC=GradientBoostingClassifier(random_state=0)\nGBC.fit(X_train,Y_train)\nGBC_score=accuracy_score(Y_test, GBC.predict(X_test))\n\nprint(GBC_score)","42b382d0":"from xgboost import XGBRegressor\n\nXGB= XGBRegressor()\nXGB.fit(X_train,Y_train)\nXGB_score=accuracy_score(Y_test, GBC.predict(X_test))\n\nprint(XGB_score)","bc7dd63b":"XGBimportance = XGB.feature_importances_\n# summarize feature importance\nfor i,v in enumerate(XGBimportance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n# plot feature importance\nplt.bar([x for x in range(len(XGBimportance))], XGBimportance)\nplt.grid()\nplt.show()","d6129018":"for row in range(418):\n    if ('Mr.' in test.loc[row,'Name'] or 'Don.' in test.loc[row,'Name'] or 'Jonkheer.' in test.loc[row,'Name']):\n        test.loc[row,'Sal']=1;\n    elif 'Mrs.' in test.loc[row,'Name']:\n        test.loc[row,'Sal']=2;\n    elif 'Master.' in test.loc[row,'Name']:\n        test.loc[row,'Sal']=3;\n    elif ('Miss.' in test.loc[row,'Name'] or 'Ms.' in test.loc[row,'Name'] or 'Mlle.' in test.loc[row,'Name'] or 'Mme.' in test.loc[row,'Name']):\n        test.loc[row,'Sal']=4;\n    elif 'Rev.' in test.loc[row,'Name']: \n        test.loc[row,'Sal']=5;\n    elif 'Dr.' in test.loc[row,'Name']: \n        test.loc[row,'Sal']=6;\n    elif ('Major.' in test.loc[row,'Name'] or 'Col.' in test.loc[row,'Name'] or 'Capt.' in test.loc[row,'Name']): \n        test.loc[row,'Sal']=7;\n    else: \n        test.loc[row,'Sal']=8;\n","0dbe95a6":"trows1=test[(test['Age']!=0) & (test['Sal']==1)].index\ntrows2=test[(test['Age']!=0) & (test['Sal']==2)].index\ntrows3=test[(test['Age']!=0) & (test['Sal']==3)].index\ntrows4=test[(test['Age']!=0) & (test['Sal']==4)].index\ntrows5=test[(test['Age']!=0) & (test['Sal']==5)].index\ntrows6=test[(test['Age']!=0) & (test['Sal']==6)].index\ntrows7=test[(test['Age']!=0) & (test['Sal']==7)].index\ntrows8=test[(test['Age']!=0) & (test['Sal']==8)].index\n\ntest.loc[:,'Mr']=0\ntest.loc[:,'Mrs']=0\ntest.loc[:,'Master']=0\ntest.loc[:,'Miss']=0\ntest.loc[:,'Rev']=0\ntest.loc[:,'Dr']=0\ntest.loc[:,'Military']=0\ntest.loc[:,'Royal']=0\n\ntest.loc[trows1,'Mr']=1\ntest.loc[trows2,'Mrs']=1\ntest.loc[trows3,'Master']=1\ntest.loc[trows4,'Miss']=1\ntest.loc[trows5,'Rev']=1\ntest.loc[trows6,'Dr']=1\ntest.loc[trows7,'Military']=1\ntest.loc[trows5,'Royal']=1","53ca26f7":"testSibrows=test[(test['SibSp']!=0)].index\ntestParrows=test[(test['Parch']!=0)].index\ntest.loc[testSibrows,'SibSp']=1\ntest.loc[testParrows,'Parch']=1\n\n\ntestS_rows=test[test['Embarked']=='S'].index\ntestQ_rows=test[test['Embarked']=='Q'].index\ntestC_rows=test[test['Embarked']=='C'].index\ntest['S']=0\ntest['Q']=0\ntest['C']=0\ntest.loc[testS_rows,'S']=1\ntest.loc[testQ_rows,'Q']=1\ntest.loc[testC_rows,'C']=1","f1327368":"test.head()","60cdcde4":"test1=test.loc[:,features]","3572601a":"DT_test=DT.predict(test1)\nnp.savetxt('DT.csv', DT_test, delimiter ='\\n')","48fa9d29":"RF_test=RF.predict(test1)\nnp.savetxt('RF.csv', RF_test, delimiter ='\\n')","e3c38004":"BC_test=BC.predict(test1)\nnp.savetxt('BC.csv', BC_test, delimiter ='\\n')","b0dee11d":"GBC_test=GBC.predict(test1)\nnp.savetxt('GBC.csv', GBC_test, delimiter ='\\n')","64b93c92":"XGB_test=XGB.predict(test1)\nnp.savetxt('XGB.csv', GBC_test, delimiter ='\\n')","dc8db866":"# Using Boosting classifier model","1cd8fac9":"S- Southampton in UK\nC- Cherbourg in France\nQ- Queenstown in Ireland","34b05690":"The feature 'Sex' is categorical variable. So, Label encoding it.","e98782ae":"# Gradient Boosting Classifier","9421f6d2":"# Using trained Decision Tree","4feaa120":"# Random Forest","72ca88b0":"# Decision Trees","bac91ded":"It can be observed that survival rate is high for women and kids while men survival rate is less. Reverents has least survival rate of men.","67640b5f":"# XGBOOST","293a2e95":"# Making changes in the test set similar to the ones done in train set","bbe2c1ff":"One potential problem for Age and Fare is that the distribution has more spikes and bumps in training set, but it is smoother in test set.","933bab2b":"Interestingly, there is a co-relation between survival rate and cabins. After a doing a bit of reading, it is found that most of the cabin entries are first class. Will train the ML model with and without this feature to check the impact","97c92040":"Replaced the NaNs in the each group of Mr\/Mrs\/Master\/Ms\/Rev\/Dr\/Military\/Royal with the mean of the group","2310dcce":"It can be observed that the mean survival rate of women is higher than men. It seems like the evacuation is based on \"Women and Children first\" code of conduct.","392fe40f":"# Selecting the features for training","09fd1972":"# Bagging classifier","d89498bc":"There are 53 females and 124 males without age information in the table. One way to address this is to fill it with mean age of males and females correspondingly. But it should be noted that there are kids in the list. The better way to do this check for salutation in the person name.","746d72c2":"The column embarked still has 2 Nans","a14be16a":"# Survival distribution of Mr\/Mrs\/Master\/Miss\/Rev\/Dr\/Military\/Royal","5af4f3a6":"Checking the mean test data to see if it in line with the mean train data.","719547b9":"I intially thought of deleting these two rows. No one can find their boarding point based on the given data. But I just did some search with their names and found that they both boarded Titanic in Southampton","a2fad27c":"# **Intial Observations:**\n* PassengerId, Pclass, Name, Sex,Age, Sibsp, Parch, Ticket, Fare, cabin Embarked are the features\n* Survived is the Ouptut","5835ebba":"# Using Random Forest model","4ae65f4e":"# Using XGBoost model","de407946":"# Other observations from info()\nIt can be observed that Name,Sex,Ticket, Cabin and Embarked have 2 or more categories.\nIt can also be observed that Age, Cabin features contains nans. \nCabin columns contains quite a lot of NaNs.","d88b2888":"# Using Garient Boosting Classifer"}}