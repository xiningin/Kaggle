{"cell_type":{"41f91809":"code","5cd7bd03":"code","6afb28ab":"code","19efbd27":"code","eaaeeb76":"code","c56bcae4":"code","b326b775":"code","6b045445":"code","03c6934e":"code","fb171573":"markdown","1996d51b":"markdown","b429fc17":"markdown","8b84377f":"markdown","25a61e20":"markdown","888037a1":"markdown","da2c294b":"markdown","828dc54b":"markdown","cb5297c7":"markdown","cd9a0be4":"markdown","4036f4ae":"markdown","e153645e":"markdown","9ee4217b":"markdown","0229a120":"markdown"},"source":{"41f91809":"# Input data files are available in the \"..\/input\/\" directory.\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","5cd7bd03":"global_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nglobal_data.tail()","6afb28ab":"#We will use it to smooth the data for growth factor. Special thanks to Dan Pearson fo rthe smoother() function below.\ndef smoother(inputdata,w,imax):\n    data = 1.0*inputdata\n    data = data.replace(np.nan,1)\n    data = data.replace(np.inf,1)\n    #print(data)\n    smoothed = 1.0*data\n    normalization = 1\n    for i in range(-imax,imax+1):\n        if i==0:\n            continue\n        smoothed += (w**abs(i))*data.shift(i,axis=0)\n        normalization += w**abs(i)\n    smoothed \/= normalization\n    return smoothed\n# function to compute growth factor\ndef growth_factor(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    confirmed_iminus2 = confirmed.shift(2, axis=0)\n    return (confirmed-confirmed_iminus1)\/(confirmed_iminus1-confirmed_iminus2)\n#function to compute growth ratio\ndef growth_ratio(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    return (confirmed\/confirmed_iminus1)\n\n# We don't need a function for growth rate since we can use the np.gradient() function.\n\n# This is a function which plots (for in input country) the active, confirmed, and recovered cases, deaths, and the growth factor.\ndef plot_country_active_confirmed_recovered_growth_metrics(country):\n    \n    # Plots Active, Confirmed, and Recovered Cases. Also plots deaths.\n    country_data = global_data[global_data['Country\/Region']==country]\n    table = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n    table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n    table2 = pd.pivot_table(table, values=['ActiveCases','Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n    table3 = table2.drop(['Deaths'], axis=1)\n   \n    # Growth Factor\n    w = 0.5\n    table2['GrowthFactor'] = growth_factor(table2['Confirmed'])\n    table2['GrowthFactor'] = smoother(table2['GrowthFactor'],w,5)\n\n    # 2nd Derivative\n    table2['2nd_Derivative'] = np.gradient(np.gradient(table2['Confirmed'])) #2nd derivative\n    table2['2nd_Derivative'] = smoother(table2['2nd_Derivative'],w,7)\n\n\n    #Plot confirmed[i]\/confirmed[i-1], this is called the growth ratio\n    table2['GrowthRatio'] = growth_ratio(table2['Confirmed'])\n    table2['GrowthRatio'] = smoother(table2['GrowthRatio'],w,5)\n    \n    #Plot the growth rate, we will define this as k in the logistic function presented at the beginning of this notebook.\n    table2['GrowthRate']=np.gradient(np.log(table2['Confirmed']))\n    table2['GrowthRate'] = smoother(table2['GrowthRate'],0.5,3)\n    \n    # horizontal line at growth rate 1.0 for reference\n    x_coordinates = [1, 180]\n    y_coordinates = [1, 1]\n    #plots\n    table2['Deaths'].plot(title='Deaths')\n    plt.rcParams[\"figure.figsize\"] = (12,3)\n    plt.show()\n    table3.plot() \n    plt.show()\n    table2['GrowthFactor'].plot(title='Growth Factor')\n    plt.plot(x_coordinates, y_coordinates) \n    plt.show()\n    table2['2nd_Derivative'].plot(title='2nd_Derivative')\n    plt.show()\n    table2['GrowthRatio'].plot(title='Growth Ratio')\n    plt.plot(x_coordinates, y_coordinates)\n    plt.show()\n    table2['GrowthRate'].plot(title='Growth Rate')\n    plt.show()\n\n    \n   # import plotly.express as px\n   # table3 = table3.melt(id_vars=\"ObservationDate\", value_vars=['ActiveCases','Confirmed','Recovered'],\n   #              var_name='case', value_name='count')\n   # table3.reindex()\n   # fig = px.area(table3, x=\"ObservationDate\", y=\"count\", color='case',\n   #              title='Confirmed Cases', color_discrete_sequence = ['cyan', 'red', 'orange'])\n   # fig.show()\n\n    return \n","19efbd27":"plot_country_active_confirmed_recovered_growth_metrics('Mexico')","eaaeeb76":"plot_country_active_confirmed_recovered_growth_metrics('Sweden')","c56bcae4":"from scipy.optimize import curve_fit\n","b326b775":"# We want number of confirmed for each date for each country\n#country_data = global_data[global_data['Country\/Region']=='Mainland China']\ncountry_data = \"\"\nglobal_data2 = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n#global_data2 = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\ncountry_data = global_data2[global_data2['Country\/Region']=='Sweden']\n#country_data = country_data[country_data['ObservationDate']<\"06\/15\/2020\"]\n#country_data = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\ncountry_data.tail(10)\n#country_data = pd.pivot_table(country_data, values=['Confirmed', 'Recovered','Deaths'], index=['Date'], aggfunc=np.sum)\ncountry_data = pd.pivot_table(country_data, values=['Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n#country_data = country_data.append({'ObservationDate':'05\/26\/2020','Confirmed' : '10.0' , 'Deaths' : \"22.0\", 'Recovered': '10'},ignore_index=True)\ncountry_data.tail(10)\n#foo.tail()","6b045445":"#country_data['GrowthFactor'] = growth_factor(country_data['Confirmed'])\nimport math\n# we will want x_data to be the number of days since first confirmed and the y_data to be the confirmed data. This will be the data we use to fit a logistic curve\nx_data = range(len(country_data.index))\ny_data = country_data['Confirmed']\n\ndef log_curve(x, k, x_0, ymax):\n    return ymax \/ (1.0 + np.exp(-k*(x-x_0)))\n\n# Fit the curve\npopt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=50000)\nestimated_k, estimated_x_0, ymax= popt\n\nn_order = 3\n#X_train = np.vander(x_train, n_order + 1, increasing=True)\nY_test = np.vander(y_data, n_order + 1, increasing=True)\nY_test\n\n# Plot the fitted curve\nk = estimated_k\nx_0 = estimated_x_0\ny_fitted = log_curve(range(0,250), k*1.0, x_0, ymax)\nprint(k, x_0, ymax)\n#print(y_fitted)\ny_data.tail()","03c6934e":"plt.rcParams[\"figure.figsize\"] = (12,6)\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(range(0,250), y_fitted, '--', label='fitted')\n#ax.plot(range(0,), y_test, '--', label='fitted')\nax.plot(x_data, y_data, 'o', label='Confirmed Data')\n","fb171573":"# **The Math: Exponential vs Logistic**\n\n### The spread of infectious disease can be modeled using a logistic curve rather than an exponential curve. The growth starts exponentially, but must slow down after some point called the **inflection point**. The inflection point is essentially the midpoint of the spread. We will model the number of confirmed cases using a logistic curve. Let's look at the equation for such a curve, the differential equation for which this curve is a solution, and the graph of the curve.\n\n## Logistic Curve Graph\n\n![LogCurve.png](attachment:LogCurve.png)\n\n## Logistic Function\n\n### A **logistic function** or **logistic curve** is an equation of the form: ![LogisticFunction.png](attachment:LogisticFunction.png)\n### where\n\n### * x_0 = the inflection point,\n### * N = the curve's maximum value, and\n### * k = growth rate or steepness of the curve.\n\nFor reference: https:\/\/en.wikipedia.org\/wiki\/Logistic_function.\n### Actually, the logistic function is just a solution for the following first-order, non-linear ordinary differential equation called the Logistic Differential Equation where f(x_0) = N\/2: ![LogisticEqn.png](attachment:LogisticEqn.png)\n\n### From the differential equation, stability of solutions and equilibria can be explored. However, this may not be directly helpful in predicting confirmed cases, so let's keep things simple for now and just look at the growth metrics.\n","1996d51b":"Let's now compare China with the rest of the world.","b429fc17":"## Logistic Curve Fitting\n\nWe are going to use scipy.optimize.curve_fit to fit a logistic curve to the number of confirmed cases in US.","8b84377f":"# **The Analysis**\n\n### Now that we have seen the math, let's explore the following growth metrics for the confirmed cases for each country:\n### * Growth Factor\n### * Growth Ratio\n### * Growth Rate\n### * 2nd Derivative\n\n### The **growth factor** on day N is the number of confirmed cases on day N minus confirmed cases on day N-1 divided by the number of confirmed cases on day N-1 minus confirmed cases on day N-2.\n\n### The **growth ratio** on day N is the number of confirmed cases on day N divided by the number of confirmed cases on day N-1.\n\n### The **growth rate** is simply the first derivative.\n\n### We will use these growth metrics to gain insight into which countries may have already hit their inflection points. For example, if a country's growth factor has stabilized around 1.0 then this can be a sign that that country has reached it's inflection point. We will then use curve fitting to fit a logistic curve (similar to the one above) to the number of confirmed cases for each country. This may help us predict if a country has hit their inflection point, and therefore when they will reach a possible maximum number of confirmed cases.\n\n### **Interestingly, the growth factor just tells us the curvature (from Calculus!) of the data.** If we take our data and take the 2nd derivative, basically all it is telling us is whether the cases are growing at an accelerating or decelerating rate. From calculus you may remember we use the 2nd derivative test to test for concavity and find saddle points. The inflection point is where the curve changes concavity. We can look at these growth metrics\n\n### The bigger picture will be to correlate this with preventative efforts such as quarentines, closing of schools, etc. It will also be interesting to see growth factor as a feature in a ML model.","25a61e20":"## Sweden\nThis part has been changed.","888037a1":"\n\n* Define Active Cases as Confirmed minus Recovered minus Deaths.\n* Drop SNo, Province\/State, and Last Update.\n* Plot Active, Confirmed, and Recovered Cases, Deaths, Growth Factor, 2nd_Derivative, and Growth Ratio\n\n","da2c294b":"## Mexico\nThis part has been changed","828dc54b":"Original authors Disclaimer: This notebook demonstrates a very simple mathematical model, a differential equation called the logistic equation which is a special case of the Bernoulli equation. The purpose of this notebook was to illustrate mathematical modeling with simple ordinary differential equations to my introductory mathematical modeling class. I am not a health expert, this notebook should not be taken too seriously.","cb5297c7":"https:\/\/www.apache.org\/licenses\/LICENSE-2.0","cd9a0be4":"## Plot everything for illustration","4036f4ae":"## Import Data","e153645e":"We see a dramatic decrease in growth ratio and growth factor for china, until it stabilizes around 1.0.\n\nWhat's also interesting is that we see that China's confirmed curve and recovered curve already resemble a logistic curve. We should be able to estimate an inflection point for China, and as you will see South Korea. We can maybe then use these to build a model to predict countries like Italy, Germany, Spain, and the United States. Future versions of this kernel will explore this.","9ee4217b":"### Disclaimer I am not a trained healthcare nor forecasting professional and this is a hobby prediction. \n### Observation date needs to be updated as new data arrives. \n#### This is a forked version of work done by attribution Daner Ferhadi Dferhadi with notice changed countries. Please see original code here: \n[https:\/\/www.kaggle.com\/dferhadi\/covid-19-predictions-growth-factor-and-calculus](https:\/\/www.kaggle.com\/dferhadi\/covid-19-predictions-growth-factor-and-calculus)","0229a120":"This part has been changed."}}