{"cell_type":{"ce022632":"code","4ee9f0e6":"code","82c19f9a":"code","8e486585":"code","2b10434e":"code","bfa986f7":"code","d3effa19":"code","e9531d91":"code","89dd0000":"code","a64709a8":"code","4f0f739f":"code","5ffe857c":"code","d76bac47":"code","a62dba33":"code","a31bf70e":"code","293e159d":"code","dcb1c4f7":"code","5ad24a12":"code","df422b2f":"code","5554eaee":"code","a017b7fb":"code","6c0fe6b9":"code","d16cc76e":"code","c2a98ab8":"code","1a088093":"code","82e6e828":"code","14f836ff":"code","497e6e18":"code","f6dede53":"code","66dfb398":"code","8c6751cb":"markdown","08c0e506":"markdown","f1c01c6d":"markdown","5ac217e9":"markdown","48023c0d":"markdown","6aac7d27":"markdown","617d2685":"markdown","53290194":"markdown","725d0fe7":"markdown","4f4bedb8":"markdown","775733f1":"markdown","26ebb288":"markdown"},"source":{"ce022632":"import pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.optimize import minimize\nfrom scipy.optimize import curve_fit\nfrom scipy.optimize import differential_evolution\nimport warnings\nfrom IPython.display import Image\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import DBSCAN","4ee9f0e6":"covid_cnf_ts = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ncovid_de_ts = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\ncovid_re_ts = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","82c19f9a":"plt.style.use('fivethirtyeight')","8e486585":"date_columns = list(covid_cnf_ts.iloc[:,4:].columns)\ncovid_cnf_ts = covid_cnf_ts[covid_cnf_ts['Country\/Region'] != 'Cruise Ship']\ncovid_de_ts = covid_de_ts[covid_de_ts['Country\/Region'] != 'Cruise Ship']\ncovid_re_ts = covid_re_ts[covid_re_ts['Country\/Region'] != 'Cruise Ship']\n\ncovid_cnf_ts_grouped = covid_cnf_ts.groupby('Country\/Region')[date_columns].sum()\ncovid_de_ts_grouped = covid_de_ts.groupby('Country\/Region')[date_columns].sum()\ncovid_re_ts_grouped = covid_re_ts.groupby('Country\/Region')[date_columns].sum()","2b10434e":"covid_details = pd.concat([covid_cnf_ts_grouped.iloc[:,-1],covid_re_ts_grouped.iloc[:,-1], covid_de_ts_grouped.iloc[:,-1]], axis = 1 )\ncovid_details.columns =['Confirmed', 'Recovery', 'Death']\ncovid_details = covid_details[(covid_details['Confirmed'] > 150) & (covid_details['Recovery'] > 10) & (covid_details['Death']>0)]\n","bfa986f7":"covid_cnf_aggregate = covid_cnf_ts_grouped.T.sum()\ncovid_cnf_ts_grouped['Total'] = covid_cnf_aggregate\nsort_cnf = covid_cnf_ts_grouped.sort_values(by = ['Total'], ascending = False)\naffected_countries_confirmed = covid_cnf_ts_grouped\naffected_countries_confirmed = affected_countries_confirmed.ix[sort_cnf.index].dropna()\naffected_countries_confirmed = affected_countries_confirmed[affected_countries_confirmed.iloc[:,-2]>150]\n\ncovid_de_aggregate = covid_de_ts_grouped.T.sum()\ncovid_de_ts_grouped['Total'] = covid_de_aggregate\nsort_de = covid_de_ts_grouped.sort_values(by = ['Total'], ascending = False)\naffected_countries_death = covid_de_ts_grouped\naffected_countries_death = affected_countries_death.ix[sort_de.index].dropna()\naffected_countries_death = covid_de_ts_grouped[covid_de_ts_grouped.iloc[:,-2]> 20]\n\ncovid_re_aggregate = covid_re_ts_grouped.T.sum()\ncovid_re_ts_grouped['Total'] = covid_re_aggregate\nsort_re = covid_re_ts_grouped.sort_values(by = ['Total'], ascending = False)\naffected_countries_recovery = covid_re_ts_grouped\naffected_countries_recovery = affected_countries_recovery.ix[sort_re.index].dropna()\naffected_countries_recovery = covid_re_ts_grouped[covid_re_ts_grouped.iloc[:,-2] > 100]\n","d3effa19":"fig = plt.figure(figsize = (20,20))\naffected_countries_confirmed.iloc[0,:-1].plot(ax = fig.add_subplot(3,2,1))\nplt.legend()\naffected_countries_confirmed.iloc[1:10,:-1].T.plot(ax = fig.add_subplot(3,2,2))\n# plt.legend()\naffected_countries_confirmed.iloc[11:21,:-1].T.plot(ax = fig.add_subplot(3,2,3))\naffected_countries_confirmed.iloc[22:32,:-1].T.plot(ax = fig.add_subplot(3,2,4))\naffected_countries_confirmed.iloc[33:43,:-1].T.plot(ax = fig.add_subplot(3,2,5))\naffected_countries_confirmed.iloc[44:54,:-1].T.plot(ax = fig.add_subplot(3,2,6))\nplt.suptitle('COVID-19 time series of confirmed cases')\nplt.show()","e9531d91":"fig = plt.figure(figsize = (16,10))\n# affected_countries_death.iloc[0,:-1].plot(ax = fig.add_subplot(1,2,1))\naffected_countries_death.iloc[:7,:-1].T.plot(ax = fig.add_subplot(1,2,1))\n# plt.legend()\naffected_countries_death.iloc[8:13,:-1].T.plot(ax = fig.add_subplot(1,2,2))\n# affected_countries_death.iloc[33:43,:-1].T.plot(ax = fig.add_subplot(3,2,5))\n# affected_countries_death.iloc[44:52,:-1].T.plot(ax = fig.add_subplot(3,2,6))\n\nplt.suptitle('COVID-19 time series of death cases')\n\nplt.show()\n","89dd0000":"recovery_cnf = covid_details['Recovery']\/covid_details['Confirmed']\ndeath_cnf = covid_details['Death']\/covid_details['Confirmed']\ndeath_recovery = covid_details['Death']\/covid_details['Recovery']","a64709a8":"covid_details","4f0f739f":"plt.figure(figsize = (20,18))\nplt.subplot(3,1,1)\nsns.barplot(recovery_cnf.index, recovery_cnf)\nplt.xticks(rotation=45, ha=\"right\")\nplt.title('Recovery to Confirmed cases')\n\nplt.subplot(3,1,2)\nsns.barplot(death_cnf.index, death_cnf)\nplt.xticks(rotation=45, ha=\"right\")\nplt.title('Death to Confirmed cases')\n\n# plt.subplot(3,1,3)\n# sns.barplot(death_recovery.index, death_recovery)\n# plt.xticks(rotation=45, ha=\"right\")\n# plt.title('Death to Recovered cases')","5ffe857c":"# fig = plt.figure(figsize = (16,8))\n# affected_countries_recovery.iloc[:,:-2].T.plot(ax = fig.add_subplot(1,2,2))\n# # plt.legend()\n# # affected_countries_death.iloc[11:21,:-1].T.plot(ax = fig.add_subplot(3,2,3))\n# # affected_countries_death.iloc[22:32,:-1].T.plot(ax = fig.add_subplot(3,2,4))\n# # affected_countries_death.iloc[33:43,:-1].T.plot(ax = fig.add_subplot(3,2,5))\n# # affected_countries_death.iloc[44:52,:-1].T.plot(ax = fig.add_subplot(3,2,6))\n\n","d76bac47":"def covid_likelihood(params, *data):\n    '''Constructs a likelihood based on the data observed'''\n    \n    k = params[0]\n    b= params[1]\n    sd = params[2]\n    y_dat = data\n    f = 1\/(1+np.exp(-k*(x_dat-b)))\n#     print(stats.norm.logpdf(y_dat, f, sd))\n    likelihood = - np.sum(stats.norm.logpdf(y_dat\/y_dat[-1], f, sd))\n    return likelihood\n\ndef sigmoid(x,a,b,c):\n    '''Non scaled sigmoid function to model the data'''\n    c = 1\n    f = c\/(1+np.exp(-(x-b)\/a))\n    return f\n\ndef sigmoid_1(x,a,b):\n    '''Scaled sigmoid function to model the normalized data'''\n    f = 1\/(1+np.exp(-(x-b)\/a))\n    return f\n\ndef get_param_estimate(function, initparams):\n    estimates = minimize(covid_likelihood, [1,1,1], method = 'Nelder-Mead')\n    return estimates.x\n\ndef func_exp(x, a,b, c):\n    c = 0\n    return a * np.exp(b * x) + c\n\ndef parameter_estimations(x, y, scale_flag):\n    '''Provides functionality for parameter estimations \n    with or without scaling (provided by scale_flag)'''\n    if scale_flag:\n        y_scale = y\/y[-1]\n        p0 = [2, np.argmax(y)]\n        popt, pcov = curve_fit(sigmoid_1, x, y_scale, p0, method='dogbox',maxfev=100000)\n        parameter = [popt[0], popt[1]]\n    else:\n        p0 = [2, np.argmax(y_dat), np.max(y)]\n        popt, pcov = curve_fit(func_exp, x, y, p0 , maxfev = 10000)\n        parameter = [popt[0], popt[1], popt[2]]\n    return parameter","a62dba33":"y_dat = affected_countries_confirmed.iloc[34,:-1].values\nx_dat = np.arange(0,len(affected_countries_recovery.iloc[0,:-1].values))\n","a31bf70e":"#A sample parameter estimation \nparameter_estimations(x_dat, y_dat, True)","293e159d":"covid_parameter_dict = {}\nfor i in range(len(affected_countries_confirmed)):\n    y_dat = affected_countries_confirmed.iloc[i,:-2].values\n    x_dat = np.arange(0,len(affected_countries_recovery.iloc[0,:-2].values))\n    parameter = parameter_estimations(x_dat, y_dat, True)\n    covid_parameter_dict[affected_countries_confirmed.index[i]] = parameter\n    ","dcb1c4f7":"parameter_dataframe = pd.DataFrame(covid_parameter_dict)\nparameter_dataframe = parameter_dataframe.T\nparameter_dataframe\nparameter_dataframe.columns = ['param_1', 'param_2']\nplt.scatter(parameter_dataframe['param_1'], parameter_dataframe['param_2'])\nplt.xlabel('Growth rate')\nplt.ylabel ('Time at midpoint')\nplt.show()","5ad24a12":"parameter_dataframe","df422b2f":"scaler = MinMaxScaler()\nparam_scaled = scaler.fit_transform(parameter_dataframe.iloc[:,:2])\nparam_scaled_df = pd.DataFrame(param_scaled)\nparam_scaled_df.columns = ['Param_1', 'Param_2']","5554eaee":"model_1 = DBSCAN(0.05,3).fit(param_scaled_df)\ncluster_labels_1 = model_1.labels_\nparam_scaled_df['cluster'] = cluster_labels_1","a017b7fb":"cluster_labels_1\n","6c0fe6b9":"param_scaled_df.index = parameter_dataframe.index\n\no_x, o_y = param_scaled_df[param_scaled_df['cluster']==-1]['Param_1'], param_scaled_df[param_scaled_df['cluster']==-1]['Param_2']\nc_x, c_y = param_scaled_df[param_scaled_df['cluster']==0]['Param_1'], param_scaled_df[param_scaled_df['cluster']==0]['Param_2']","d16cc76e":"plt.figure(figsize = (18,6))\nplt.subplot(1,2,1)\nplt.scatter(param_scaled_df['Param_1'], param_scaled_df['Param_2'])\nplt.xlabel('Growth rate')\nplt.ylabel ('Time at midpoint')\nplt.title('Pre-clustering')\nplt.subplot(1,2,2)\nplt.scatter(o_x,o_y)\nplt.scatter(c_x,c_y)\nplt.xlabel('Growth rate')\nplt.ylabel ('Time at midpoint')\nplt.title('Post-clustering (DBSCAN)')\nplt.suptitle('COVID-19 Parameter clustering')\n# plt.savefig('cv_4.png')\n\n# plt.scatter(cl2_x,cl2_y)\n# plt.scatter(cl3_x,cl3_y)","c2a98ab8":"outlier_1 = param_scaled_df[param_scaled_df['cluster']== -1]\noutlier_1","1a088093":"outlier","82e6e828":"cluster_11 = param_scaled_df[param_scaled_df['cluster'] == 0]\noutlier_cnf = affected_countries_confirmed.iloc[:,:-1].ix[outlier_1.index]\nfig = plt.figure(figsize =(15,9))\noutlier_cnf[outlier_cnf.index == 'China'].iloc[:,:-1].T.plot(ax = fig.add_subplot(1,3,1))\noutlier_cnf[outlier_cnf.index == 'Korea, South'].iloc[:,:-1].T.plot(ax = fig.add_subplot(1,3,2))\noutlier_cnf[outlier_cnf.index == 'Iran'].iloc[:,:-1].T.plot(ax = fig.add_subplot(1,3,2))\nplt.xlabel('Time')\noutlier_cnf[(outlier_cnf.index != 'China') & (outlier_cnf.index !='Korea, South') & (outlier_cnf.index !='Iran')].iloc[:,:-1].T.plot(ax = fig.add_subplot(1,3,3))\nplt.xlabel('Time')\nplt.suptitle('Time series of confirmed cases of outliers ')\n# \nplt.show()","14f836ff":"cluster_cnf = affected_countries_confirmed.iloc[:,:-1].ix[cluster_11.index]\n","497e6e18":"param_1_ind = param_scaled_df.loc['India']['Param_1']\nparam_2_ind = param_scaled_df.loc['India']['Param_2']\ndistance = {}\nfor i in param_scaled_df.index:\n    par_1 = param_scaled_df.loc[i]['Param_1']\n    par_2 = param_scaled_df.loc[i]['Param_2']\n    dist = (par_1- param_1_ind)**2 + (par_2- param_2_ind)**2\n    distance[i] = dist\nimport operator\nsorted_d = sorted(distance.items(), key=operator.itemgetter(1))\nprint('Country with Covid growth parameter closest to India:', sorted_d[1:10])","f6dede53":"country_list = [i[0] for i in sorted_d[1:15]]\nclosest_country_confirmed = affected_countries_confirmed.ix[country_list]\ndf = pd.DataFrame(affected_countries_confirmed.ix[country_list].iloc[:,-2])\ndf.column = ['Confirmed cases']\nsns.heatmap(df, annot=True, cmap='viridis', cbar=False, fmt = 'g')\nplt.title('Countries with COVID-19 parameters closest to India')\n# plt.savefig('')\nplt.show()","66dfb398":"plt.figure(figsize = (18,5))\nsns.barplot(country_list, np.log(affected_countries_confirmed.ix[country_list].iloc[:,-2]))\nplt.xticks(rotation=45, ha=\"right\")\nplt.title('log confirmed cases by country closest to India ')\nplt.show()","8c6751cb":"The clustering algorithm was able to detect 9 outliers (detected by blue points). China,Iran, Japan, South-Korea,Bahrain, Kuwait and Singapore. As evident from the plots below, the time series of confirmed cases in China and Korea increased exponentially at the beginning and is slowly saturating with time, while the remaining countries follow a steeper trend. ","08c0e506":"The logistic function  introduced by Pierre Fran\u00e7ois Verhulst can be expressed as :\n\n\n$$y = \\frac{L}{1+\\exp^{-k(x-x_0)}}$$\n\n$x_0$ is the value at midpoint of the curve (or here time at which curve reaches the midpoint), $L$ is the maximum value of curve  and $k$ represents growth rate.\n\nIn order to scale the curve between (0-1) we can set L = 1. In this analysis, I have kept both functionalities for users to view and try out. However, the analysis below is performed after scaling the confirmed cases between 0 to 1 i.e. for example if number of constraind increases from 0 to 3000 for one country while 0 to 30000 for the other, growth rates for both countries can be compared after standardising them to the same scale between 0 and 1. ","f1c01c6d":"I was particularly interested in identifying the position of my country India with respect to other countries in terms of the parameter set based on the number of confirmed cases till 20.03.2020.\n\nThe top 15 countries with parameter states closest (Euclidean distance) to India were - 'Italy',\n 'Lebanon',\n 'Iceland',\n 'Sweden',\n 'Egypt',\n 'Norway',\n 'Iraq',\n 'Greece',\n 'Denmark'.\n 'France',\n 'Philippines',\n 'Netherlands',\n 'Finland',\n and\n 'Belgium'.","5ac217e9":"Pandemic COVID-19 has engulfed the world in a blink of an eye. One by one countries are falling like a domino effect and the global leaders across the world are grappling with this truth. \n\nLike everyone, I too have quarantined myself (the least I can do to help). We are living in the world of data and over the last few days, one of the most important achievements of World Health Organization (thanks to co-operation of all the countries) was a meticulous collation of COVID-19 datasets. Soon the data was made public and I was amazed by the enormous amount of insightful analysis provided by data scientists, kagglers across the world. \n\nI too wanted to contribute and here goes a very naive analysis of mine on COVID-19 outbreak thanks to the wonderful dataset below which includes time series of confirmed , deaths, and recovery data across different countries. \n","48023c0d":"The plots below show a time series of confirmed cases (>150) by country and clearly China, Italy, Iran, Spain are all leading the charts. India, however, inspite of being the second most populated country, has shown commendable 'resistance' to Corona Virus outbreak. ","6aac7d27":"The time series of confirmed cases in China provided one interpretable insight about the virus outbreak- that the confirmed cases follow a logistic growth curve. The logistic growth curve (also known as population curve) qualifies as an idea model for these cases, the outbreak will initially be expected to occur at an exponential rate followed by a gradual slowdown due to government measures, vaccination programs, immunity development against the virus and so on. Hence, I have extended a similar model for investigation of COVID-19 outbreak in other countries as well. ","617d2685":"Datasets 'https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data'","53290194":"Next, a density based clustering (DSCAN) is performed in this parameter space to group countries with similar parameter coordinates (states).  Scaling the parameters","725d0fe7":"So far China and Italy have witnessed large number of deaths; while China was able to take control of the pandemic,conditions in Italy are worsening with each day. The success rate in South Korea in tackling the virus appears to be the highest in plots below. Here, for the plots, I have selected countries that had more than 1 deaths and 10 recoveries.","4f4bedb8":"While China shows highest recovery to confirmed cases, it appears to have effectively controlled death rates, where Italy and Indonesia have failed followed by Iraq and Iran. Based on the dataets it seems that UK and Spain are too heading towards a disaster. ","775733f1":"Surprising it may seem, but the naive parameter study puts Italy, Iran very close to India in terms of sharing the parameter combinations . However, COVID-19 outbreak, is a far more complex problem and hence the findings are likely to differ with time and inclusion of several other parameters.\n\nThe second part of this study will be focussing entirely on India and understand the possible pathways of virus outbreak over time. \n\nLets continue our fight against COVID-19 through safe physical distancing, self quarantine because 'PREVENTION IS ALWAYS BETTER THAN CURE'.","26ebb288":"Estimating parameters for all the countries in the analysis."}}