{"cell_type":{"846d7eec":"code","3c10fb2a":"code","b67de3ed":"code","7e8ecee3":"code","718d4805":"code","cc2aa30e":"code","58cd1d68":"code","cabe1abb":"code","82af775d":"code","eabdb5ff":"code","ad0557d0":"code","48d8d762":"code","1086ece5":"code","e63b54a4":"code","6c9ce9bd":"code","5345ac28":"code","96fad3c1":"code","01fc3990":"markdown","5ff3b033":"markdown","749f79e4":"markdown","605d3a24":"markdown","10948fd0":"markdown","bd2ce020":"markdown","357ed5eb":"markdown","d2a06886":"markdown","16b2102b":"markdown","3ae77f3e":"markdown","ad70e7fc":"markdown","184e9d5a":"markdown"},"source":{"846d7eec":"#Generic Packages\nimport numpy as np\nimport os\nimport pandas as pd\nimport random\n\n#Machine Learning Library\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils import shuffle           \n\n#Plotting Libraries\nimport seaborn as sn; sn.set(font_scale=1.4)\nimport matplotlib.pyplot as plt             \n\n#openCV\nimport cv2                                 \n\n#Tensor Flow\nimport tensorflow as tf    \n\n#Display Progress\nfrom tqdm import tqdm\n\n#Garbage Collector\nimport gc","3c10fb2a":"class_names = ['airplane', 'car', 'cat', 'dog', 'flower', 'fruit', 'motorbike', 'person']\nclass_names_label = {class_name:i for i, class_name in enumerate(class_names)}\n\nnb_classes = len(class_names)\n\nIMAGE_SIZE = (150, 150)","b67de3ed":"#Function to Load Images & Labels\ndef load_data():\n    \n    datasets = ['..\/input\/image-dataset\/_train', '..\/input\/image-dataset\/_test']\n    output = []\n    \n    # Iterate through training and test sets\n    for dataset in datasets:\n        \n        images = []\n        labels = []\n        \n        print(\"Loading {}\".format(dataset))\n        \n        # Iterate through each folder corresponding to a category\n        for folder in os.listdir(dataset):\n            label = class_names_label[folder]\n            \n            # Iterate through each image in our folder\n            for file in tqdm(os.listdir(os.path.join(dataset, folder))):\n                \n                # Get the path name of the image\n                img_path = os.path.join(os.path.join(dataset, folder), file)\n                \n                # Open and resize the img\n                image = cv2.imread(img_path)\n                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n                image = cv2.resize(image, IMAGE_SIZE) \n                \n                # Append the image and its corresponding label to the output\n                images.append(image)\n                labels.append(label)\n                \n        images = np.array(images, dtype = 'float32')\n        labels = np.array(labels, dtype = 'int32')   \n        \n        output.append((images, labels))\n\n    return output","7e8ecee3":"#Loading Data (Training & Test Dataset)\n(train_images, train_labels), (test_images, test_labels) = load_data()","718d4805":"train_images, train_labels = shuffle(train_images, train_labels, random_state=25)","cc2aa30e":"#Label Dataset Shape\nn_train = train_labels.shape[0]\nn_test = test_labels.shape[0]\n\nprint (\"Number of training examples: {}\".format(n_train))\nprint (\"Number of testing examples: {}\".format(n_test))\nprint (\"Each image is of size: {}\".format(IMAGE_SIZE))","58cd1d68":"_, train_counts = np.unique(train_labels, return_counts=True)\n_, test_counts = np.unique(test_labels, return_counts=True)\npd.DataFrame({'train': train_counts,'test': test_counts}, index=class_names).plot.bar(figsize=(10,8))\nplt.title('Label Count Per Dataset')\nplt.show()","cabe1abb":"#Scale the data\ntrain_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","82af775d":"#Visualise the data [random image from training dataset]\n\ndef display_random_img(class_names, images, labels):\n    index = np.random.randint(images.shape[0])\n    plt.figure()\n    plt.imshow(images[index])\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.title('Image #{} : '.format(index) + class_names[labels[index]])\n    plt.show()\n    \n\ndisplay_random_img (class_names, train_images, train_labels)","eabdb5ff":"#Build Model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (150, 150, 3)), \n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    tf.keras.layers.Dense(8, activation=tf.nn.softmax)\n])","ad0557d0":"model.summary()","48d8d762":"#Compile Model\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])","1086ece5":"#Training the Model\nhistory = model.fit(train_images, train_labels, batch_size=100, epochs=10, validation_split = 0.2)","e63b54a4":"#garbage collection to save memory\ngc.collect()","6c9ce9bd":"test_loss = model.evaluate(test_images, test_labels)","5345ac28":"#garbage collection to save memory\ngc.collect()","96fad3c1":"predictions = model.predict(test_images)     # Vector of probabilities\npred_labels = np.argmax(predictions, axis = 1) # We take the highest probability\n\ndisplay_random_img(class_names, test_images, pred_labels)","01fc3990":"# Image Classification on Natural Image Dataset\n\nImage Classification Model by Implementing CNN with Keras. \n\nLevel: Beginner \n\n* Import Libraries & Packages\n* Class Definition\n* Load Dataset\n* Data Visualisation\n* Data Scaling\n* Data Exploration\n* Build & Train Model\n* Model Testing\n* Prediction with unseen data","5ff3b033":"### Conlusion\n\nOur model is accurately classifying the images as per the defined classes. ","749f79e4":"## Data Scaling\n\nThis is done to improve the performance of the model","605d3a24":"## Class Definition\n\nIn order to classify the images we need to pre-define the classes. Following are the pre-defined classes.\n\nairplane, car, cat, dog, flower, fruit, motorbike, person\n\nEach image in our dataset will belong to one of the above classes & not both.","10948fd0":"## Load Dataset","bd2ce020":"## Import Libraries & Packages","357ed5eb":"## Data Visualisation","d2a06886":"## Build & Train Model\n\nBuilding & Training a simple CNN Model\n\n**Model Configuration**\n\n* Conv2D: (32 filters of size 3 by 3) The features will be \"extracted\" from the image.\n* MaxPooling2D: The images get half sized.\n* Flatten: Transforms the format of the images from a 2d-array to a 1d-array of 150 150 3 pixel values.\n* Relu : given a value x, returns max(x, 0).\n* Softmax: 8 neurons, probability that the image belongs to one of the classes.\n\n**Compiling Model**\n\n* Optimizer: adam = RMSProp + Momentum\n    * Momentum = takes into account past gradient to have a better update.\n    * RMSProp = exponentially weighted average of the squares of past gradients.\n* Loss function: we use sparse categorical crossentropy for classification, each images belongs to one class only","16b2102b":"## Prediction with unseen data","3ae77f3e":"## Data Exploration","ad70e7fc":"## Model Testing","184e9d5a":"The model has achieved an accuracy of ~ 93% which is really good but probably over-fitted. However, for this tutorial we shall stick with that."}}