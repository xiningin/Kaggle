{"cell_type":{"c9799731":"code","8f72126a":"code","b8970e38":"code","f7deb21f":"code","c4d21e25":"code","bf3b5483":"code","b8ee4c10":"code","a76e2eb5":"code","f02c5e37":"code","c15a8451":"code","c071890d":"code","a3982ebe":"code","c2150164":"code","60777196":"code","58eec683":"code","d34100ac":"code","162b3ada":"code","bfcb28ab":"code","575fbd75":"code","db5f091a":"code","fc4bf907":"code","129cf40a":"code","19792bca":"code","f4cd8927":"code","fd97aa4b":"code","0592a27f":"code","e944ef57":"code","1c560c93":"code","8ff3bd75":"code","a6f38a85":"code","65fb97e1":"markdown","143f4845":"markdown","3d0c183f":"markdown","1ec9aa1a":"markdown","724c1a12":"markdown","8c6c448f":"markdown","de906edd":"markdown","55d2ebe3":"markdown","7c22167a":"markdown","323e3454":"markdown","82a86a19":"markdown","9868ded1":"markdown"},"source":{"c9799731":"# Download the Data","8f72126a":"!pip3 install tqdm\n!pip3 install pillow --upgrade","b8970e38":"%matplotlib inline\n\nimport os\nimport tarfile\nimport urllib\nimport shutil\nimport json\nimport random\nimport numpy as np\nimport boto3\nimport sagemaker\n\nfrom tqdm import tqdm\nfrom sagemaker.amazon.amazon_estimator import get_image_uri\nfrom matplotlib import pyplot as plt\nfrom xml.etree import ElementTree as ET\nfrom PIL import Image, ImageDraw, ImageFont\n\nurls = ['http:\/\/www.robots.ox.ac.uk\/~vgg\/data\/pets\/data\/images.tar.gz',\n        'http:\/\/www.robots.ox.ac.uk\/~vgg\/data\/pets\/data\/annotations.tar.gz']\n\ndef download_and_extract(data_dir, download_dir):\n    for url in urls:\n        target_file = url.split('\/')[-1]\n        if target_file not in os.listdir(download_dir):\n            print('Downloading', url)\n            urllib.request.urlretrieve(url, os.path.join(download_dir, target_file))\n            tf = tarfile.open(url.split('\/')[-1])\n            tf.extractall(data_dir)\n        else:\n            print('Already downloaded', url)\n\nif not os.path.isdir('data'):\n    os.mkdir('data')\n\ndownload_and_extract('data', '.')","f7deb21f":"xml_dir = 'data\/annotations\/xmls\/'\nxml_files = [os.path.join(xml_dir, x) for x in os.listdir(xml_dir) if x[-3:] == 'xml']\nxml_files[0]","c4d21e25":"classes = ['cat', 'dog']\ncategories = [\n    {\n        'class_id': 0,\n        'name': 'cat'\n    },\n    {\n        'class_id': 1,\n        'name': 'dog'\n    }\n]","bf3b5483":"def extract_annotation(xml_file_path):\n    \n    tree = ET.parse(xml_file_path)\n    root = tree.getroot()\n    annotation = {}\n    \n    annotation['file'] = root.find('filename').text\n    annotation['categories'] = categories\n    \n    size = root.find('size')\n    \n    annotation['image_size'] = [{\n        'width': int(size.find('width').text),\n        'height': int(size.find('height').text),\n        'depth': int(size.find('depth').text)\n    }]\n    \n    annotation['annotations'] = []\n    \n    for item in root.iter('object'):\n        class_id = classes.index(item.find('name').text)\n        ymin, xmin, ymax, xmax = None, None, None, None\n        \n        for box in item.findall('bndbox'):\n            xmin = int(box.find(\"xmin\").text)\n            ymin = int(box.find(\"ymin\").text)\n            xmax = int(box.find(\"xmax\").text)\n            ymax = int(box.find(\"ymax\").text)\n        \n            if all([xmin, ymin, xmax, ymax]) is not None:\n                 annotation['annotations'].append({\n                     'class_id': class_id,\n                     'left': xmin,\n                     'top': ymin,\n                     'width': xmax - xmin,\n                     'height': ymax - ymin\n                 })\n    return annotation","b8ee4c10":"extract_annotation(xml_files[0])","a76e2eb5":"def plot_example(plt, annot, image_file_path, rows, cols, index):\n    img = Image.open(image_file_path)\n    draw = ImageDraw.Draw(img)\n    font = ImageFont.truetype('\/usr\/share\/fonts\/dejavu\/DejaVuSerif-Bold.ttf', 20)\n    \n    for a in annot['annotations']:\n        box = [\n            int(a['left']), int(a['top']),\n            int(a['left']) + int(a['width']),\n            int(a['top']) + int(a['height'])\n        ]\n        draw.rectangle(box, outline='yellow', width=4)\n        draw.text((box[0], box[1]), classes[int(a['class_id'])], font=font)\n    plt.subplot(rows, cols, index + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(img)\n    return plt\n\ndef show_random_annotations(plt):\n    plt.figure(figsize=(16, 16))\n    for i in range(0, 9):\n        index = random.randint(0, len(xml_files) - 1)\n        \n        annot = extract_annotation(xml_files[index])\n        image_file_path = os.path.join('data\/images\/', annot['file'])\n\n        plt = plot_example(plt, annot, image_file_path, 3, 3, i)\n    plt.show()","f02c5e37":"show_random_annotations(plt)","c15a8451":"role = sagemaker.get_execution_role()\nbucket_name = 'petsdata'\ntraining_image = get_image_uri(boto3.Session().region_name, 'object-detection',\n                              repo_version='latest')\nprint(training_image)","c071890d":"folders = ['train', 'train_annotation', 'validation', 'validation_annotation']\n\nfor folder in folders:\n    if os.path.isdir(folder):\n        shutil.rmtree(folder)\n    os.mkdir(folder)","a3982ebe":"print('Total examples:', len(xml_files))","c2150164":"for xml_file in tqdm(xml_files):\n    target_set = 'train' if random.randint(0, 99) < 75 else 'validation'\n    annot = extract_annotation(xml_file)\n    image_file_path = os.path.join('data\/images\/', annot['file'])\n    image_target_path = os.path.join(target_set, annot['file'])\n    shutil.copy(image_file_path, image_target_path)\n    json_file_path = os.path.join(target_set + '_annotation', annot['file'][:-3] + 'json')\n    with open(json_file_path, 'w') as f:\n        json.dump(annot, f)","60777196":"train_images = os.listdir('train')\ntrain_annots = os.listdir('train_annotation')","58eec683":"print(len(train_annots), len(train_images))","d34100ac":"for image in train_images:\n    key = image.split('.')[0]\n    json_file = key + '.json'\n    if json_file not in train_annots:\n        print('Not found', json_file)","162b3ada":"%%time\nsess = sagemaker.Session()\n\nprint('Uploading data..')\ns3_train_path = sess.upload_data(path='train', bucket=bucket_name, key_prefix='train')\nprint('Training images uploaded')\ns3_train_annotation_path = sess.upload_data(path='train_annotation', bucket=bucket_name,\n                                     key_prefix='train_annotation')\nprint('Training Annotations uploaded')\ns3_validation_path = sess.upload_data(path='validation', bucket=bucket_name,\n                                      key_prefix='validation')\nprint('Validation images uploaded')\ns3_validation_annotation_path = sess.upload_data(path='validation_annotation', bucket=bucket_name,\n                                          key_prefix='validation_annotation')\nprint('Validation Annotations uploaded')","bfcb28ab":"s3_validation_annotation_path","575fbd75":"model = sagemaker.estimator.Estimator(\n    training_image,\n    role=role,\n    train_instance_count=1,\n    train_instance_type='ml.p3.2xlarge',\n    train_volume_size=100,\n    train_max_run=36000,\n    input_mode='File',\n    output_path='s3:\/\/petsdata\/output',\n    sagemaker_session=sess\n)","db5f091a":"model.set_hyperparameters(\n    base_network='resnet-50',\n    num_classes=2,\n    use_pretrained_model=1,\n    mini_batch_size=16,\n    epochs=15,\n    learning_rate=0.001,\n    lr_scheduler_step='10',\n    lr_scheduler_factor=0.1,\n    optimizer='sgd',\n    momentum=0.9,\n    weight_decay=0.0005,\n    overlap_threshold=0.5,\n    nms_threshold=0.45,\n    image_shape=512,\n    num_training_samples=len(train_annots)\n)","fc4bf907":"train_data = sagemaker.session.s3_input(s3_train_path, distribution='FullyReplicated',\n                          content_type='application\/x-image', s3_data_type='S3Prefix')\nvalidation_data = sagemaker.session.s3_input(s3_validation_path, distribution='FullyReplicated',\n                          content_type='application\/x-image', s3_data_type='S3Prefix')\n\ntrain_annotation_data = sagemaker.session.s3_input(s3_train_annotation_path, distribution='FullyReplicated',\n                          content_type='application\/x-image', s3_data_type='S3Prefix')\nvalidation_annotation_data = sagemaker.session.s3_input(s3_validation_annotation_path, distribution='FullyReplicated',\n                          content_type='application\/x-image', s3_data_type='S3Prefix')","129cf40a":"data_channels = {\n    'train': train_data,\n    'train_annotation': train_annotation_data,\n    'validation': validation_data,\n    'validation_annotation': validation_annotation_data\n}","19792bca":"model.fit(inputs=data_channels, logs=True)","f4cd8927":"deployed_model = model.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')\nprint('\\nModel deployed!')","fd97aa4b":"image_dir = 'validation'\nimages = [x for x in os.listdir(image_dir) if x[-3:] == 'jpg']\nprint(len(images))","0592a27f":"deployed_model.content_type = 'image\/jpeg'","e944ef57":"index = 0\n\nimage_path = os.path.join(image_dir, images[index])\nimage_path = 'dog_cat.jfif'\n\nwith open(image_path, 'rb') as f:\n    b = bytearray(f.read())\n\nresults = deployed_model.predict(b)\nresults = json.loads(results)\n\npreds = results['prediction']","1c560c93":"preds","8ff3bd75":"img = Image.open(image_path)\ndraw = ImageDraw.Draw(img)\nfont = ImageFont.truetype('\/usr\/share\/fonts\/dejavu\/DejaVuSerif-Bold.ttf', 30)\nw, h =img.size\n\nfor pred in preds:\n    class_id, score, xmin, ymin, xmax, ymax = pred\n    \n    if score > 0.7:\n        box = [w*xmin, h*ymin, w*xmax, h*ymax]\n\n        draw.rectangle(box, outline='yellow', width=4)\n        draw.text((box[0], box[1]), classes[int(class_id)], font=font, fill='#000000')\n    else:\n        break\n\nplt.xticks([])\nplt.yticks([])\nplt.imshow(img)\nplt.show()","a6f38a85":"sagemaker.Session().delete_endpoint(deployed_model.endpoint)","65fb97e1":"# SageMaker Setup","143f4845":"# Data Channels","3d0c183f":"# Deploy Model","1ec9aa1a":"Don't forget!! You need to delete endpoint or else you will continue to accrue cost!","724c1a12":"# Model Training","8c6c448f":"# Visualize Data","de906edd":"# Hyperparameters","55d2ebe3":"# Preparing Data for SageMaker","7c22167a":"# Uploading Data to S3","323e3454":"# SageMaker Estimator","82a86a19":"# Extracting Annotations from XML Format","9868ded1":"# Predictions"}}