{"cell_type":{"e7441eb4":"code","3d33a811":"code","76126321":"code","d24d9486":"code","718158a1":"code","abcba18e":"code","b71911a6":"code","ce798792":"code","31cec7bf":"code","1b95138c":"code","49dcfb06":"code","ea165636":"code","e33cf3c8":"markdown","473075e2":"markdown","068f015d":"markdown"},"source":{"e7441eb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d33a811":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPool2D \nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\n# fix random seed for reproducibility\nnp.random.seed(7)\nimport os","76126321":"#load data \ntrain_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n#shape of dataset\nprint('Shape of the training set', train_data.shape)\nprint('Shape of the test set', test_data.shape)\n","d24d9486":"#Count of values in Digit Classes\ntrain_data['label'].value_counts()","718158a1":"#Count of values in Digit Classes\nplt.figure(figsize=(8,4))\nsns.countplot(train_data['label'])\nplt.title(\"Count of values in Digit Classes\")\nplt.show()","abcba18e":"\n#Split the training dataset into Input and Output\n\nInput = train_data.drop(labels = ['label'], axis = 1).values\nprint('Input \\n', Input[:2])\nOutput = train_data['label']\nprint('Output \\n', Output[:10])\n\n#Reshaping\nX_test = test_data.values\n\nInput = Input.reshape(Input.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1)\n\n\n\n# normalize test and train set to range 0-1\nInput,X_test  = Input \/ 255.0, X_test \/ 255.0\n\n# one hot encode target values\nOutput = to_categorical(Output, num_classes = 10) \n#Labels after applying the function\nprint('Output \\n', Output[:10])\n  ","b71911a6":"plt.imshow(Input[10][:,:,0])\nplt.show()","ce798792":"#split the train for training and testing\n\nXtrain, Xtest, ytrain, ytest = train_test_split(Input, Output, test_size=0.2, random_state=42)\nprint(Xtrain.shape)","31cec7bf":"def cnn_model(num_classes, epochs, batch_size, Xtrain, Xtest, ytrain, ytest):\n    # build the model \n    model = Sequential() \n    model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\n    model.add(Conv2D(64, kernel_size =(3, 3), padding = 'Same',  \n                 activation ='relu')) \n    \n    model.add(MaxPool2D(pool_size =(2, 2))) \n    #model.add(Dropout(0.5))\n    #model.add(Conv2D(filters = 32, kernel_size = (3,3), padding = 'Same', activation ='relu')) \n    model.add(Conv2D(32, kernel_size =(3, 3), padding = 'Same',  \n                 activation ='relu')) \n    \n              \n    model.add(MaxPool2D(pool_size =(2, 2))) \n    #model.add(Dropout(0.5))\n    model.add(Conv2D(filters = 32, kernel_size = (3,3), padding = 'Same', activation ='relu')) \n    model.add(MaxPool2D(pool_size =(2, 2))) \n    #model.add(Dropout(0.5))\n    model.add(Flatten()) \n    model.add(Dense(256, activation ='relu')) \n    model.add(Dense(num_classes, activation ='softmax')) \n    #model.add(Dropout(0.5))\n    model.add(Flatten())\n    \n    # training the model \n    model.compile(loss = keras.losses.categorical_crossentropy, \n                  optimizer = keras.optimizers.SGD(lr = 0.01), \n                  metrics =['accuracy']) \n\n    # fitting the model \n    model.fit(Xtrain, ytrain, \n              batch_size = batch_size, \n              epochs = epochs, \n              verbose = 1, \n              validation_data =(Xtest, ytest)) \n\n    # evaluating and printing results \n    score = model.evaluate(Xtest, ytest, verbose = 0) \n    #print('Test loss:', score[0]) \n    #print('Test accuracy:', score[1]) \n    \n    \n\n    y_pred = model.predict(X_test)\n\n\n    \n    return score[0], score[1], y_pred;\n\n    \n    ","1b95138c":"TestLoss, TestAccuracy, y_pred = cnn_model(10, 10, 64, Xtrain, Xtest, ytrain, ytest)\n\nprint('Test loss:', TestLoss) \n","49dcfb06":"y_pred = [np.argmax(y_t) for y_t in y_pred]\n\nprint('Test accuracy:', TestAccuracy) \n\n\npredictions_test = []\n\nfor i in y_pred:\n    predictions_test.append(i)\n    \n","ea165636":"result =  pd.DataFrame({\n        \"ImageId\": test_data.index+1,\n        \"Label\": predictions_test\n    })\n\nresult.to_csv('submission.csv', index=False)","e33cf3c8":"# 3. Accuracy and prediction","473075e2":"# 1. **Preprocessing**","068f015d":"#   2**. Building CNN model**"}}