{"cell_type":{"2293a2a8":"code","3bcff4a1":"code","e9154675":"code","6974aca3":"code","067e3ed4":"code","81e8525d":"code","c767ea71":"code","4980655b":"code","231135fa":"code","ae7570f7":"code","497b3043":"code","47f7041f":"code","f4b3fc73":"code","f144b21a":"code","2d360f41":"code","2e0e6e27":"code","e8e57418":"code","65b4ead9":"code","52c725fe":"code","c3a03a79":"code","352d07c7":"code","6a626709":"code","f1bb4709":"code","56d88361":"code","79ec1263":"code","467f723b":"code","38715963":"code","0cbcce3c":"code","608599aa":"code","46a9124a":"code","8c06f2b8":"code","3eb131ed":"code","ccd247da":"code","7a421636":"code","d4a448fb":"code","bbd68748":"code","5ee9a0e6":"code","57b1e8e8":"code","81cfa5c9":"code","d843a6bf":"code","fd07e2bb":"code","53601aed":"code","f10cd4b5":"code","f2a00003":"code","572d606e":"code","a6b77289":"code","05db6dbd":"code","511aaf1e":"code","f7dc7bac":"code","3cd79193":"markdown","d407dc70":"markdown","29c5b707":"markdown","e046b77c":"markdown","2044a4fb":"markdown","de6e7467":"markdown","6d5527f8":"markdown","d3fbcc48":"markdown","8ca73d7e":"markdown","dfa6657f":"markdown","ee093cf6":"markdown","39ccf33d":"markdown","d947c5af":"markdown","10260a63":"markdown","15175fb7":"markdown","ba5075f1":"markdown","80054e21":"markdown"},"source":{"2293a2a8":"!pip install pmdarima","3bcff4a1":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport pmdarima as pm\nfrom sklearn.model_selection import train_test_split\n\ny = pm.datasets.load_wineind()\n\ndatetime_1 = pd.period_range('1980-01', periods=176, freq='M')\n\ndataset_wine = pd.DataFrame(data={'sales': y}, index=datetime_1)\n\n# pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\n\n# import datetime\n# dataset_wine.index = df_0.DATE","e9154675":"datetime_1","6974aca3":"dataset_wine.info()","067e3ed4":"dataset_wine.head(n=3)","81e8525d":"# Data split by 80-20 split\ntrain, test = train_test_split(dataset_wine, train_size=0.8, random_state=2021)\nprint(train.shape); print(test.shape)","c767ea71":"print(type(train))\nprint(train[:10])\nprint(len(train))","4980655b":"print(type(test))\nprint(test[:10])\nprint('--------')\nprint(len(test))","231135fa":"print(np.r_[train, test].shape)","ae7570f7":"dataset_wine.iloc[:,0]","497b3043":"dataset_wine.plot(figsize=(17,4), grid=True, c='royalblue')\n\nplt.axis([116, 298, 14000, 41000]) \nplt.xticks(fontsize = 18)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 18)\n\n# plt.ylabel('Sales', fontsize = 20)\nplt.title('Australian Total Wine\u00a0Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\nplt.legend(['Sales'], loc='upper left', fontsize=20);\n\nplt.tight_layout()\nplt.show()","47f7041f":"print(type(dataset_wine))\ndataset_wine_array = dataset_wine.to_numpy()\nprint(type(dataset_wine_array))","f4b3fc73":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 16, 8\n\n# Redo the same thing, but with the known frequency\nseasonal_decompose(x=dataset_wine_array,model='additive', period=12).plot()\nplt.show();","f144b21a":"(dataset_wine_array.transpose())[0][:5]","2d360f41":"dataset_wine_series = pd.Series(dataset_wine_array.transpose()[0])\nprint(type(dataset_wine_array)); print(type(dataset_wine_series))","2e0e6e27":"plt.subplots(figsize=(18,8))\n\n\n# 1. Original data \nplt.subplot(3,1,1)\nplt.grid()\n\nx = np.arange(y.shape[0])\nplt.plot(x, dataset_wine_array, c='royalblue')\n\nplt.axis([-1.5, 176.5, 14500, 41000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 20)\n\nplt.ylabel('Sales', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('Australian Total Wine\u00a0Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\n\n# 2. Fisrt oreder differencing \ndiff = dataset_wine_series.diff()\n\nplt.subplot(3,1,2)\nplt.grid()\nplt.plot(diff)\n\nplt.axis([-1.5, 176.5, -25000, 11000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(-25000, 11000, 5000), fontsize = 20)\n\nplt.ylabel('', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('First Order Differencing', fontsize = 22)\n\n\n# 3. Second oreder differencing \ndiff_2 = diff.diff()\n\nplt.subplot(3,1,3)\nplt.grid()\nplt.plot(diff_2)\n\nplt.axis([-1.5, 176.5, -33000, 34000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(-35000, 35000, 10000), fontsize = 20)\n\nplt.ylabel('', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('Second Order Differencing', fontsize = 22)\n\n\nplt.tight_layout()\nplt.show()","e8e57418":"# Stationarity\nfrom pmdarima.arima import ndiffs as ndiffs\n\n# test =  (\u2018kpss\u2019, \u2018adf\u2019, \u2018pp\u2019)\n\nprint('KPSS: d =', ndiffs(dataset_wine_array, alpha=0.05, test='kpss', max_d=2)) # d = 1. Indicating non-stationary sequence\nprint('ADF: d =', ndiffs(dataset_wine_array, alpha=0.05, test='adf', max_d=2)) # d = 0. Indicating stationary sequence\nprint('PP: d =', ndiffs(dataset_wine_array, alpha=0.05, test='pp', max_d=2)) # d = 0. Indicating stationary sequence","65b4ead9":"# KPSS from statsmodels\n\n# Null hypothesis is stationary series\nfrom statsmodels.tsa.stattools import kpss as s_KPSS\nresult_s_KPSS = s_KPSS(dataset_wine_array)\n\nprint(f'KSPSS Statistics: {result_s_KPSS[0]: .2f}')\nprint(f'p-value: {result_s_KPSS[1]: .4f}')\nprint('Critical Values: ')\nfor key, value in result_s_KPSS[3].items():\n    print(f'\\t{key: <4s}: {value: .3f}')\n\n# p = 0.032 < 0.05, indiacting non-stationary sequence. ","52c725fe":"result_s_KPSS[3]","c3a03a79":"# Augmented Dickey-Fuller Test (ADF) of statsmodels\n\n# Null hypothesis is non-stationary series\n\nfrom statsmodels.tsa.stattools import adfuller as s_ADF\nresult_s_ADF = s_ADF(train)\n\nprint(f'ADF Statistics: {result_s_ADF[0]: .2f}')\nprint(f'p-value: {result_s_ADF[1]: .4f}')\nprint('Critical Values: ')\nfor key, value in result_s_ADF[4].items():\n    print(f'\\t{key: <4s}: {value: .3f}')\n    \n# p > 0.05, indiacting non-stationary series. ","352d07c7":"result_s_ADF[4]","6a626709":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\n\nfig, ax = plt.subplots(2,1,figsize=(22,6), sharex=False)\nsm.graphics.tsa.plot_acf(dataset_wine_array, lags=50, ax=ax[0])\nsm.graphics.tsa.plot_pacf(dataset_wine_array, lags=50, ax=ax[1])\nplt.show()","f1bb4709":"# Fit the model\nmodel = pm.auto_arima(dataset_wine_array, seasonal=True, m=12, \n                      information_criterion='aic', test='kpss',\n                      suppress_warnings=True, trace=True)","56d88361":"# The best model\nmodel.set_params()","79ec1263":"model.summary()","467f723b":"model_SARIMA = pm.ARIMA(order=(0,1,2), seasonal_order=(0,1,1,12), solver='lbfgs', maxiter=200, \n                        suppress_warnings=False, scoring='mse',enforce_invertibility=False).fit(dataset_wine_array)\nmodel_SARIMA.summary()","38715963":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport pmdarima as pm\nfrom sklearn.model_selection import train_test_split\n\ny = pm.datasets.load_wineind()\n\ndatetime_1 = pd.period_range('1980-01', periods=176, freq='M')\ndataset_wine = pd.DataFrame(data={'sales': y}, index=datetime_1)\n\n# Data splitting by 80-20 split\n# train, test = train_test_split(dataset_wine, train_size=0.8, random_state=2021)\nprint(dataset_wine.shape)\nprint(round(dataset_wine.shape[0] * 0.8))","0cbcce3c":"train, test = dataset_wine.iloc[0:141,], dataset_wine.iloc[141:,]","608599aa":"plt.figure(figsize=(17,4))\n\n# train.plot(figsize=(19,5), grid=True, c='royalblue', label='Training')\n# test.plot(ls='--',c='tab:blue', label='Test')\n\nplt.grid()\n\nx1 = np.arange(train.shape[0])\nplt.plot(x1, train, c='royalblue', label='Training')\nx2 = np.arange(train.shape[0], np.r_[train, test].shape[0])\nplt.plot(x2, test, ls='--',c='tab:blue', label='Test')\n\nplt.axis([-1.5, 176.5, 14500, 41000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 20)\n\nplt.ylabel('Sales', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('Australian Total Wine Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\nplt.legend(fontsize=20)\nplt.tight_layout()\nplt.show()","46a9124a":"# Stationarity\nfrom pmdarima.arima import ndiffs as ndiffs\n\n# test =  (\u2018kpss\u2019, \u2018adf\u2019, \u2018pp\u2019)\n\nprint('KPSS: d =', ndiffs(train, alpha=0.05, test='kpss', max_d=2)) # d = 1. Indicating non-stationary sequence\nprint('ADF: d =', ndiffs(train, alpha=0.05, test='adf', max_d=2)) # d = 0. Indicating stationary sequence\nprint('PP: d =', ndiffs(train, alpha=0.05, test='pp', max_d=2)) # d = 0. Indicating stationary sequence","8c06f2b8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\n\nfig, ax = plt.subplots(2,1,figsize=(18,5), sharex=False)\nsm.graphics.tsa.plot_acf(train, lags=30, ax=ax[0])\nsm.graphics.tsa.plot_pacf(train, lags=30, ax=ax[1])\nplt.show();","3eb131ed":"## SARIMA\nfrom pmdarima.pipeline import Pipeline\nfrom pmdarima.preprocessing import BoxCoxEndogTransformer\nimport pmdarima as pm\n'''\npipeline = Pipeline([\n    (\"boxcox\", BoxCoxEndogTransformer()),\n    (\"model\", pm.AutoARIMA(seasonal=True, m=12, information_criterion='aic', test='kpss', \n                           maxiter=150, suppress_warnings=True, trace=True, verbose=1))\n])\n\nmodel = pipeline.fit(train)\nprint(pipeline.predict(5))\nprint(model.predict(5))\n'''\n# Fit the model\nmodel = pm.auto_arima(train, seasonal=True, m=12, \n                      information_criterion='aic', test='kpss', maxiter=150,\n                      suppress_warnings=True, trace=True, verbose=1)\n","ccd247da":"# Best model\nmodel.set_params()","7a421636":"model.summary()","d4a448fb":"model_SARIMA = pm.ARIMA(order=(2,1,1), seasonal_order=(2,0,0,12), solver='lbfgs', maxiter=150, \n                        enforce_invertibility=False, suppress_warnings=False, scoring='mse').fit(train)\nmodel_SARIMA.summary()","bbd68748":"# Make forecasts\npred_SARIMA = model_SARIMA.predict(test.shape[0])  # predict N steps into the future","5ee9a0e6":"pred_SARIMA[0:5]","57b1e8e8":"# Confidence interval\npred_SARIMA_conf_int = model_SARIMA.predict(test.shape[0], return_conf_int=True)[1]","81cfa5c9":"pred_SARIMA_conf_int[:5]","d843a6bf":"lower_limits = [k[0] for k in pred_SARIMA_conf_int]\nupper_limits = [k[1] for k in pred_SARIMA_conf_int]","fd07e2bb":"# SARIMA\n\n# Visualize the forecasts (blue=train, green=forecasts)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(22,5))\nplt.grid()\n\nplt.plot(np.arange(0,train.shape[0]), train, label='Train', color='tab:blue')\nplt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), test, '--', label='Test', color='cornflowerblue')\nplt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), pred_SARIMA, label=' SARIMA Prediction', color='tab:orange')\n\nplt.axis([-1.5, 176.5, 14500, 41000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 20)\n\nplt.ylabel('Sales', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('SARIMA Forecasting on Australian Total Wine\u00a0Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\nplt.legend(loc='upper left', fontsize=16.5)\nplt.tight_layout()\nplt.show();","53601aed":"# SARIMA\n\n# Visualize the forecasts (blue=train, green=forecasts)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,5))\nplt.grid()\n\nplt.plot(np.arange(0,train.shape[0]), train, label='Train', color='tab:blue')\n# plt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), test, '--', label='Test', color='cornflowerblue')\nplt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), pred_SARIMA, label=' SARIMA Prediction & 95% CI', color='tab:orange')\n\nplt.fill_between(np.arange(train.shape[0], dataset_wine_array.shape[0]), lower_limits, upper_limits, color='papayawhip')\n\nplt.axis([-1.5, 176.5, 14500, 41000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 20)\n\nplt.ylabel('Sales', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('SARIMA Forecasting on Australian Total Wine\u00a0Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\nplt.legend(loc='upper left', fontsize=16.5)\nplt.tight_layout()\nplt.show();","f10cd4b5":"import numpy as np\n\ndef mape_(actual, pred): \n    actual, pred = np.array(actual), np.array(pred)\n    return np.mean(np.abs((actual - pred) \/ actual)) * 100","f2a00003":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nmse_SARIMA = mean_squared_error(test, pred_SARIMA)\nfrom math import sqrt\nrmse_SARIMA = sqrt(mse_SARIMA)\nprint(f'RMSE: {rmse_SARIMA:.2f}')\n\nmae_SARIMA = mean_absolute_error(test, pred_SARIMA)\nprint(f'MAE: {mae_SARIMA:.2f}')\n\nmape_SARIMA = mape_(test, pred_SARIMA)\nprint(f'MAPE: {mape_SARIMA:.2f}')","572d606e":"## Holt-Winters\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nmodel_HW = ExponentialSmoothing(train,  trend='add', seasonal='add', seasonal_periods=12, damped_trend=True).fit(optimized=True, use_boxcox=False, remove_bias=False)\n\npred_HW = model_HW.predict(start=train.shape[0], end=dataset_wine_array.shape[0]-1)","a6b77289":"# Holt-Winters\n\nplt.figure(figsize=(20,5))\nplt.grid()\n\nplt.plot(np.arange(0,train.shape[0]), train, label='Train', color='tab:blue')\nplt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), test, '--', label='Test', color='cornflowerblue')\nplt.plot(np.arange(train.shape[0], dataset_wine_array.shape[0]), pred_HW, label='Holt-Winters Prediction', color='tab:orange')\n\nplt.axis([-1.5, 176.5, 14500, 41000]) \nplt.xticks(range(0, 180, 10), fontsize = 20)  \nplt.yticks(range(10000, 45000, 5000), fontsize = 20)\n\nplt.ylabel('Sales', fontsize = 20)\nplt.xlabel('Ordinal Number', fontsize = 20)\nplt.title('Holt-Winters Forecasting on Australian Total Wine\u00a0Sales (1980\/01 ~ 1994\/08)', fontsize = 22)\n\nplt.legend(loc='upper left', fontsize=16.5)\nplt.tight_layout()\nplt.show();","05db6dbd":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nmse_HW = mean_squared_error(test, pred_HW)\nfrom math import sqrt\nrmse_HW = sqrt(mse_HW)\nprint(f'RMSE: {rmse_HW:.2f}')\n\nmae_HW = mean_absolute_error(test, pred_HW)\nprint(f'MAE: {mae_HW:.2f}')\n\nmape_HW = mape_(test, pred_HW)\nprint(f'MAPE: {mape_HW:.2f}')","511aaf1e":"model_evaluation = pd.DataFrame()","f7dc7bac":"pd.DataFrame([['SARIMA', rmse_SARIMA, mae_SARIMA, mape_SARIMA],\n              ['Holt-Winters', rmse_HW, mae_HW, mape_HW]],\n             columns=['Forescasting Model', 'RMSE', 'MAE', 'MAPE'],\n             ).T","3cd79193":"> ## 6-2 Time series analysis","d407dc70":"> ## 6-3 SARIMA","29c5b707":"---\n## **Reference**\n\n1. Brownlee, J. (2020). How to Decompose Time Series Data into Trend and Seasonality. Retrieved from https:\/\/bit.ly\/2N9yRgi\n2. Ryan Boch (2020). Prediction intervals exponential smoothing statsmodels. Retrieved from  https:\/\/bit.ly\/3rEMqmT\n3. tutorialspoint (2019). Time Series. Retrieved from https:\/\/bit.ly\/39WaDiw\n4. QuantStats (2019). displaying statsmodels plot_acf and plot_pacf side by side in a jupyter notebook. Retrieved from https:\/\/bit.ly\/3cTEfz5\n5. Hyndman, R.J., & Athanasopoulos, G. (2018) Forecasting: principles and practice (2nd ed.). OTexts: Melbourne, Australia. Retrieved from https:\/\/otexts.com\/fpp2\/\n6. Sarkar, D., Bali, R., & Sharma, T. (2018). Practical Machine Learning with Python: A problem-solver's guide to building real-world intelligent systems. Karnataka, India: Apress.\u00a0\n7. ayhan (2018). Holt-Winters time series forecasting with statsmodels. Retrieved from https:\/\/bit.ly\/3cTKP8K\n8. cel (2015). Changing fig size with statsmodel. Retrieved from https:\/\/bit.ly\/3pWB2SW\n9. McKinney, W., Perktold, J., & Seabold, S. (2011). Time Series Analysis in Python with statsmodels. Retrieved from https:\/\/bit.ly\/3utCUW1\n10. pypi.org (Unidentified). pmdarima. Retrieved from https:\/\/bit.ly\/3aQrdjk\n11. Smith, T.G. et al. (Unidentified). pmdarima: ARIMA estimators for Python. Retrieved from https:\/\/bit.ly\/2N5RgKO\n12. Smith, T.G. et al. (Unidentified). pmdarima.datasets.load_wineind. Retrieved from https:\/\/bit.ly\/2N5XZVc\n13. Smith, T.G. et al. (Unidentified). Tips to using auto_arima. Retrieved from https:\/\/bit.ly\/3cZXreE\n14. statsmodels (Unidentified). statsmodels v0.12.1. Retrieved from https:\/\/bit.ly\/2NaDzKD\n\n","e046b77c":"### A New Module: pmdarima\n\npmdarima brings R\u2019s beloved auto.arima to Python, making an even stronger case for why you don\u2019t need R for data science. pmdarima is 100% Python + Cython and does not leverage any R code, but is implemented in a powerful, yet easy-to-use set of functions & classes that will be familiar to scikit-learn users. [11]","2044a4fb":"---\n# **(2) Seasonal Decomposition using Moving\u00a0Averages**","de6e7467":"---\n# **(6) Forecasting with SARIMA & Holt-Winters**","6d5527f8":"---\n# **(5) SARIMA using Auto ARIMA function from\u00a0pmdarima**","d3fbcc48":"# **ML22: Forecasting and Time Series Analysis with\u00a0Python**\n> ## *Keywords: Holt-Winters, Exponential smoothing, SARIMA, Auto ARIMA, Pmdarima, ACF, PACF, Differencing, Seasonal decomposition*\n## Complete article: https:\/\/medium.com\/analytics-vidhya\/ml22-6318a9c9dc35\n## @author: Morton Kuo (2021\/02\/10)\n## Same code on Colab: https:\/\/bit.ly\/371pUN5\n","8ca73d7e":"---\n## Introduction\n\nWe assume the reader is already familiar with time series theories including SARIMA & Holt-Winters; if not, check reference [3][5][7][9][13] for more details. Hence, we put emphasis primarily on how to conduct forecasting & time series analysis with Python. Let\u2019s get started!\n\nIn traditional time series area (cf. cutting edge forecasting approaches like RNN, LSTM, GRU), Python is still like a teenager and R is like an adult already. Fortunately, there are some emerging Python modules like pmdarima, starting from 2017, developed by Taylor G Smith et al., help convert R\u2019s time series code into Python code.","dfa6657f":"---\n# **(4) AR and MA: ACF & PACF**","ee093cf6":"---\n# **(1) Installing \"pmdarima\" & Data Input**","39ccf33d":"### A Toy Dataset: Australian Total Wine Sales\nAustralian total wine sales by wine makers in bottles <= 1 liter. This time-series records monthly wine sales by Australian wine makers between Jan 1980 \u2014 Aug 1994. This dataset is found in the R forecast package. [12]","d947c5af":"---\n## **Outline**\n*   (1) Installing \"pmdarima\" & Data Input\n*   (2) Seasonal Decomposition using Moving\u00a0Averages\n*   (3) Stationarity: First and Second Order Differencings\n*   (4) AR and MA: ACF & PACF\n*   (5) SARIMA using Auto ARIMA function from\u00a0pmdarima\n*   (6) Forecasting with SARIMA & Holt-Winters\n>6-1 *Data Splitting* \\\n>6-2 *Time series analysis* \\\n>6-3 *SARIMA* \\\n>6-4 *Holt-Winters (Exponential Smoothing)* \\\n>6-5 *Model Evaluation of SARIMA & Holt-Winters*","10260a63":"---\n# **(3) Stationarity: First and Second Order Differencings**","15175fb7":"> ## 6-1 Data splitting","ba5075f1":"> ## 6-5 Model Evaluation of SARIMA & Holt-Winters","80054e21":"> ## 6-4 Holt-Winters (Exponential Smoothing)"}}