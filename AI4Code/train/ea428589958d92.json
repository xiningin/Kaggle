{"cell_type":{"4e6a8bba":"code","241bee35":"code","2cafb81e":"code","facaf154":"code","72f42337":"code","89d1494b":"code","5b80dadf":"code","2c4d4a35":"code","07348ed5":"code","eabdf15a":"code","1d9383bd":"code","c6d70aa5":"code","9ff4a7d8":"code","ac11ac6f":"code","ca2a8641":"markdown","06a61df8":"markdown","a725b81f":"markdown","29623c25":"markdown","4189c72f":"markdown","09ef4119":"markdown","e6e90553":"markdown","2c3e7a95":"markdown"},"source":{"4e6a8bba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import RMSprop\nfrom matplotlib import pyplot as plt\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","241bee35":"from sklearn.model_selection import train_test_split\ndf = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/train.csv')\nsubmission = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\ntrain, val = train_test_split(df, test_size=0.2)","2cafb81e":"plt.imshow(np.array(img_to_array(load_img('..\/input\/plant-pathology-2021-fgvc8\/train_images\/800113bb65efe69e.jpg')).astype(\"uint8\")))","facaf154":"plt.imshow(np.array(img_to_array(load_img('..\/input\/plant-pathology-2021-fgvc8\/train_images\/800113bb65efe69e.jpg',target_size=(128,128))).astype(\"uint8\")))","72f42337":"image_datagen = ImageDataGenerator()\n\ntrain_ds = image_datagen.flow_from_dataframe(\n    dataframe = train,\n    directory = '..\/input\/plant-pathology-2021-fgvc8\/train_images',\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (128,128),\n    class_mode='categorical',\n    batch_size = 64,\n    shuffle = True,\n    seed = 9,\n    validate_filenames = False,\n)\n\nval_ds = image_datagen.flow_from_dataframe(\n    dataframe = val,\n    directory = '..\/input\/plant-pathology-2021-fgvc8\/train_images',\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (128,128),\n    class_mode='categorical',\n    batch_size = 64,\n    shuffle = True,\n    seed = 9,\n    validate_filenames = False\n)\ntest_ds = image_datagen.flow_from_dataframe(\n    dataframe=submission,\n    directory='..\/input\/plant-pathology-2021-fgvc8\/test_images',\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (128,128),\n    class_mode='categorical',\n    validate_filenames=False)","89d1494b":"model = Sequential([\n  layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(128, 128, 3)),\n  layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n  layers.MaxPooling2D((2,2)),\n  layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n  layers.MaxPooling2D((2,2)),\n  layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n  layers.MaxPooling2D((2,2)),\n  layers.Flatten(),\n  layers.Dense(12, activation='softmax')\n])","5b80dadf":"model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","2c4d4a35":"early_stopping = EarlyStopping(monitor = 'val_loss',min_delta=.01,patience=3,restore_best_weights=True)","07348ed5":"history = model.fit(\n  train_ds,\n  validation_data=val_ds,\n  epochs=10,\n  callbacks=early_stopping,\n  steps_per_epoch=100,\n  validation_steps=20,\n  max_queue_size=1000,\n  use_multiprocessing=True,\n  workers=4\n)","eabdf15a":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.show()","1d9383bd":"def get_key(val_array, my_dict):\n    keys = []\n    for val in val_array:\n        for key, value in my_dict.items():\n             if val == value:\n                keys.append(key)\n    return keys","c6d70aa5":"submission['labels'] = get_key(np.argmax(model.predict(test_ds), axis=1), train_ds.class_indices)","9ff4a7d8":"model.save('.\/plant_pathology_cnn')","ac11ac6f":"%cd \/kaggle\/working\nfrom IPython.display import FileLink as FileLink(r'*plant_pathology_cnn*')","ca2a8641":"Early stopping stops the model from training if the loss function on the validation data is not improving. Early stopping can help prevent over fitting and waisted time training.","06a61df8":"The first image of the training set resiszed to 128x128, because the raw images are very large and take a long time to load and process.","a725b81f":"Reads in the the csv to pandas dataframe. 80% of the data is used for training and 20% used for validation.","29623c25":"The optimizer adam is also the most used type of optimizer for image classifcation. The loss function categorical crossentropy is a used for multi-class classification problems.","4189c72f":"The first image from the training set","09ef4119":"The image data generator will resize the images and load them as needed for the model to train.","e6e90553":"Shows the accuracy on the training data and validation data over each epoch","2c3e7a95":"Convolutional networks are the most used machine leanring type for image classification"}}