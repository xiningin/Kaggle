{"cell_type":{"3ffb3faa":"code","0e0acb0c":"code","957d768c":"code","a9653248":"code","d9e6911a":"code","45af3c2c":"code","210c44e2":"code","0c365b95":"code","e11cde5e":"code","bc7acfb7":"code","2e84cbcc":"code","f0866bfd":"code","edc754a2":"code","ab3c5094":"code","7d96b5eb":"code","2cf27c16":"code","cb5b1146":"code","9bf984e9":"code","2445ca03":"code","9f29bd91":"code","f4dc3df7":"code","dce3e34a":"code","5e66ca30":"code","4a3fdacb":"code","33cadc68":"code","a0a849af":"code","134c3e6a":"code","24543e17":"code","1a9dea5f":"code","29ac98c6":"code","b6e53fbd":"code","52b84a8b":"code","72526ffb":"code","bcf28ffb":"code","82848905":"code","4287fb24":"code","76354004":"code","517b08eb":"code","20056250":"code","bd9aea62":"code","d7265966":"code","6e916b8e":"code","56e2cdd1":"code","0ce859d0":"code","5f84e711":"code","1ee18239":"code","68819a98":"code","96260c57":"code","fc73811c":"markdown","6f756bea":"markdown","e4923758":"markdown"},"source":{"3ffb3faa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e0acb0c":"df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf.head(10)","957d768c":"df.info()","a9653248":"import seaborn as sns\nsns.heatmap(df.corr(),annot=True,linewidth=0.5,fmt='.3f')","d9e6911a":"def what (passenger):\n    age,sex=passenger\n    if age<16:\n        return \"child\"\n    else:\n        return dict(male=\"man\",female=\"woman\")[sex]\ndf['Who']=df[['Age','Sex']].apply(what,axis=1)\n        ","45af3c2c":"df.head(10)","210c44e2":"df['Deck']=df.Cabin.str[0]\ndf['Alone']=~(df.SibSp+df.Parch).astype(bool)","0c365b95":"df.head(10)","e11cde5e":"sns.factorplot('Pclass','Survived',data=df)","bc7acfb7":"sns.factorplot('Pclass','Survived',data=df,hue='Who')","2e84cbcc":"sns.factorplot('Alone','Survived',data=df,hue='Sex',col='Pclass')","f0866bfd":"sns.barplot('Deck','Survived',data=df,order=['A','B','C','D','E','F','G'])","edc754a2":"dk={'male':0,'female':1}\ndf['Sex']=df.Sex.map(dk)\ndk={'S':3,'Q':2,'C':1}\ndf['Embarked']=df.Embarked.map(dk)\ndk={'child':3,'woman':2,'man':1}\ndf['Who']=df.Who.map(dk)\ndk={'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}\ndf['Deck']=df.Deck.map(dk)","ab3c5094":"df.head()","7d96b5eb":"df.isna().sum()\ndf['Age']=df['Age'].fillna(df['Age'].mean())\ndf['Deck']=df['Deck'].fillna(0)\ndf['Embarked'].value_counts()","2cf27c16":"df['Embarked']=df['Embarked'].fillna(3)\n","cb5b1146":"def fam_size(par):\n    x,y=par\n    s=x+y+1\n    if(1==s):\n        return 1\n    elif(2<=s<=4):\n        return 2\n    else:\n        return 3\ndf['Fam_size']=df[['SibSp','Parch']].apply(fam_size,axis=1)","9bf984e9":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\"\n}\ndf['Titles'] = df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ndf.head()","2445ca03":"#one hot encoding\ndf['Titles']=df.Titles.map(Title_Dictionary)\ndf.head()\ntitle_dummies=pd.get_dummies(df['Titles'],prefix='Title')\ndf=pd.concat([df,title_dummies],axis=1)","9f29bd91":"def p_class(par):\n    w,p=par\n    if p==1:\n        if w==1:\n            return 1\n        elif w==2:\n            return 2\n        else :\n            return 3\n    elif p==2:\n        if w==1:\n            return 4\n        elif w==2:\n            return 5\n        else :\n            return 6\n    else:\n        if w==1:\n            return 7\n        elif w==2:\n            return 8\n        else :\n            return 9\ndf['P_W']=df[['Who','Pclass']].apply(p_class,axis=1)\ndf.head()","f4dc3df7":"df.drop(['PassengerId','Name','Ticket','Alone','Titles'],axis=1)","dce3e34a":"X_train=df.drop(['Survived','PassengerId','Name','Ticket','Alone','Titles','Cabin'],axis=1)\nY_train=df['Survived']\n","5e66ca30":"X_train.head()","4a3fdacb":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X_train,Y_train,test_size=0.3)\nx_train.head()","33cadc68":"from sklearn.ensemble import RandomForestClassifier\ny_train.head()\n","a0a849af":"rf = RandomForestClassifier(criterion = \"gini\", \n                                       min_samples_leaf = 3, \n                                       min_samples_split = 10,   \n                                       n_estimators=100, \n                                       max_features=0.5, \n                                       oob_score=True, \n                                       random_state=1, \n                                       n_jobs=-1)\nrf = rf.fit(x_train,y_train)","134c3e6a":"from sklearn.metrics import accuracy_score, confusion_matrix,precision_score,recall_score,f1_score\nact = accuracy_score(y_train,rf.predict(x_train))\nprint('Training Accuracy is: ',(act*100))\np = precision_score(y_train,rf.predict(x_train))\nprint('Training Precision is: ',(p*100))\nr = recall_score(y_train,rf.predict(x_train))\nprint('Training Recall is: ',(r*100))\nf = f1_score(y_train,rf.predict(x_train))\nprint('Training F1 Score is: ',(f*100))","24543e17":"act = accuracy_score(y_test,rf.predict(x_test))\nprint('Test Accuracy is: ',(act*100))\np = precision_score(y_test,rf.predict(x_test))\nprint('Test Precision is: ',(p*100))\nr = recall_score(y_test,rf.predict(x_test))\nprint('Test Recall is: ',(r*100))\nf = f1_score(y_test,rf.predict(x_test))\nprint('Test F1 Score is: ',(f*100))","1a9dea5f":"df_t=pd.read_csv(\"\/kaggle\/input\/titanic-mine\/test.csv\")\ndf_t.head(10)","29ac98c6":"def what (passenger):\n    age,sex=passenger\n    if age<16:\n        return \"child\"\n    else:\n        return dict(male=\"man\",female=\"woman\")[sex]\ndf_t['Who']=df_t[['Age','Sex']].apply(what,axis=1)\ndf_t.head()","b6e53fbd":"df_t['Deck']=df_t.Cabin.str[0]\ndf_t['Alone']=~(df_t.SibSp+df.Parch).astype(bool)","52b84a8b":"dk={'male':0,'female':1}\ndf_t['Sex']=df_t.Sex.map(dk)\ndk={'S':3,'Q':2,'C':1}\ndf_t['Embarked']=df_t.Embarked.map(dk)\ndk={'child':3,'woman':2,'man':1}\ndf_t['Who']=df_t.Who.map(dk)\ndk={'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}\ndf_t['Deck']=df_t.Deck.map(dk)\ndf_t.head()","72526ffb":"df_t.isna().sum()\ndf_t['Age']=df_t['Age'].fillna(df['Age'].mean())\ndf_t['Deck']=df_t['Deck'].fillna(0)\ndf_t['Embarked'].value_counts()","bcf28ffb":"df_t['Embarked']=df_t['Embarked'].fillna(3)","82848905":"def fam_size(par):\n    x,y=par\n    s=x+y+1\n    if(1==s):\n        return 1\n    elif(2<=s<=4):\n        return 2\n    else:\n        return 3\ndf_t['Fam_size']=df_t[['SibSp','Parch']].apply(fam_size,axis=1)","4287fb24":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\"\n}\ndf_t['Titles'] = df_t['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ndf_t.head()","76354004":"#one hot encoding\ndf_t['Titles']=df_t.Titles.map(Title_Dictionary)\ndf_t.head()\ntitle_dummies=pd.get_dummies(df_t['Titles'],prefix='Title')\ndf_t=pd.concat([df_t,title_dummies],axis=1)","517b08eb":"def p_class(par):\n    w,p=par\n    if p==1:\n        if w==1:\n            return 1\n        elif w==2:\n            return 2\n        else :\n            return 3\n    elif p==2:\n        if w==1:\n            return 4\n        elif w==2:\n            return 5\n        else :\n            return 6\n    else:\n        if w==1:\n            return 7\n        elif w==2:\n            return 8\n        else :\n            return 9\ndf_t['P_W']=df_t[['Who','Pclass']].apply(p_class,axis=1)\ndf_t.head()","20056250":"X_train=df_t.drop(['PassengerId','Name','Ticket','Titles','Cabin'],axis=1)\n","bd9aea62":"X_train.insert(15,'Title_Royalty',0)","d7265966":"X_train.head()\nX_train['Fare']=X_train['Fare'].fillna(X_train['Fare'].mean())\nx_train.shape\nx_train.head()","6e916b8e":"X_train=X_train.drop('Alone',axis=1)","56e2cdd1":"res=rf.predict(X_train)\nprint(res)","0ce859d0":"sub=pd.read_csv(\"\/kaggle\/input\/titanic-mine\/gender_submission.csv\")\nsub.shape","5f84e711":"sub['PassengerId']=df_t['PassengerId']","1ee18239":"sub['Survived']=res","68819a98":"sub.head()","96260c57":"sub.to_csv(\"Submission1.csv\",index=False)","fc73811c":"Adding new feature","6f756bea":"Training different models","e4923758":"testing"}}