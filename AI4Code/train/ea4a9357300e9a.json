{"cell_type":{"852c8374":"code","263c9abc":"code","c8d1b169":"code","86187fba":"code","eff3af76":"code","79d76309":"code","cfc749c6":"code","c42eba09":"code","95467faf":"code","b54ecab5":"code","0dc35134":"code","e85e12cf":"code","bc1d0fe6":"markdown","13b3308d":"markdown","5b24059f":"markdown","a953f775":"markdown","618c1e17":"markdown","2a020db2":"markdown","529c041c":"markdown","c06761e4":"markdown","7116ec17":"markdown","a7c806bd":"markdown","3e8f202e":"markdown","db67ddc8":"markdown"},"source":{"852c8374":"import os\nimport shutil\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\nimport yaml\n\nfrom kaggle_secrets import UserSecretsClient\nimport wandb\nfrom wandb.keras import WandbCallback\n\nimport cv2\nimport pydicom\n\nfrom pathlib import Path\nfrom tqdm.auto import tqdm","263c9abc":"SIIM_COVID19_DETECTION_DIR = '\/kaggle\/input\/siim-covid19-detection\/'\nPART0_RESIZED_DIR = '\/kaggle\/input\/part0-siim-covid19-first-look-resized-512px\/'\nYOLOV5_DIR = '\/kaggle\/input\/yolov5\/yolov5\/'\nYOLOV5_W_DIR = '\/kaggle\/working\/yolov5\/yolov5\/'\n\nTEMP_DIR = '\/kaggle\/temp\/'\nINPUT_DIR = PART0_RESIZED_DIR+'data\/'\nOUTPUT_DIR = DATASET_DIR = TEMP_DIR+'data\/'\n\nTRAIN_IMAGES_DIR = DATASET_DIR + 'images\/train\/'\nVAL_IMAGES_DIR = DATASET_DIR +'images\/valid\/'\nTRAIN_LABELS_DIR = DATASET_DIR + 'labels\/train\/'\nVAL_LABELS_DIR = DATASET_DIR +'labels\/valid\/'\n\nBATCH_SIZE = 8\nEPOCHS = 50\nIMG_SIZE = WIDTH = HEIGHT = 512\n\nTRAIN_IMAGE_LEVEL_PATH = SIIM_COVID19_DETECTION_DIR+'train_image_level.csv'\nTRAIN_STUDY_LEVEL_PATH = SIIM_COVID19_DETECTION_DIR+'train_study_level.csv'\nMETA_PATH = PART0_RESIZED_DIR+'meta.csv'\n\nINTERPOLATION = cv2.INTER_LANCZOS4\n\nWANDB_PROJECT_NAME = 'project8-kaggle-covid19'\nWANDB_ENTITY_NAME = ''","c8d1b169":"user_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"WANDB_API_KEY1\")\nos.environ['WANDB_API_KEY'] = secret_value_0\n\n#wandb.login()\nwandb.init(project=WANDB_PROJECT_NAME)\nconfig = wandb.config \nconfig.batch_size = BATCH_SIZE\n\n%cd ..\/..\/\n\nos.makedirs(TRAIN_IMAGES_DIR, exist_ok=True)\nos.makedirs(VAL_IMAGES_DIR, exist_ok=True)\nos.makedirs(TRAIN_LABELS_DIR, exist_ok=True)\nos.makedirs(VAL_LABELS_DIR, exist_ok=True)","86187fba":"shutil.copytree(YOLOV5_DIR, YOLOV5_W_DIR) ","eff3af76":"df_train_image_level = pd.read_csv(META_PATH)\ndf_train_image_level['path'] = df_train_image_level.apply(lambda row: INPUT_DIR+(row.path.split('\/')[-1]), axis=1)","79d76309":"train_df, valid_df = train_test_split(df_train_image_level, test_size=0.2, random_state=42)\n\ntrain_df = train_df.copy()\nvalid_df = valid_df.copy()\n\ntrain_df.loc[:, 'split'] = 'train'\nvalid_df.loc[:, 'split'] = 'valid'\n\ndf_train_image_level = pd.concat([train_df, valid_df]).reset_index(drop=True)\ndf_train_image_level.sample(4)","cfc749c6":"[os.makedirs(dir, exist_ok=True) for dir in [TRAIN_IMAGES_DIR,\n                                             VAL_IMAGES_DIR,\n                                             TRAIN_LABELS_DIR,\n                                             VAL_LABELS_DIR]]\nfor i in tqdm(range(len(df_train_image_level))):\n    row = df_train_image_level.loc[i]\n    if os.path.exists(row.path):\n        if row.split == 'train':\n            shutil.copy(row.path, f'{TRAIN_IMAGES_DIR}{row.id}.jpg')\n        else:\n            shutil.copy(row.path, f'{VAL_IMAGES_DIR}{row.id}.jpg')","c42eba09":"data_yaml = dict(\n    train = f'..\/..\/..\/..\/..\/.{TRAIN_IMAGES_DIR}',\n    val = f'..\/..\/..\/..\/..\/.{VAL_IMAGES_DIR}',\n    nc = 2,\n    names = ['none','opacity']\n)\n\nwith open(YOLOV5_W_DIR+'data\/data.yaml', 'w') as outfile:\n    yaml.dump(data_yaml, outfile, default_flow_style=False)","95467faf":"def get_bbox(row):\n    bboxes = []\n    bbox = []\n    for i, l in enumerate(row.label.split(' ')):\n        if (i % 6 == 0) | (i % 6 == 1):\n            continue\n        bbox.append(float(l))\n        if i % 6 == 5:\n            bboxes.append(bbox)\n            bbox = []  \n            \n    return bboxes\n\ndef scale_bbox(row, bboxes):\n    # Get scaling factor\n    scale_x = IMG_SIZE\/row.width\n    scale_y = IMG_SIZE\/row.height\n    \n    scaled_bboxes = []\n    for bbox in bboxes:\n        x = int(np.round(bbox[0]*scale_x, 4))\n        y = int(np.round(bbox[1]*scale_y, 4))\n        x1 = int(np.round(bbox[2]*(scale_x), 4))\n        y1= int(np.round(bbox[3]*scale_y, 4))\n\n        scaled_bboxes.append([x, y, x1, y1]) \n        \n    return scaled_bboxes\n\ndef get_yolo_format_bbox(img_w, img_h, bboxes):\n    yolo_boxes = []\n    for bbox in bboxes:\n        w = bbox[2] - bbox[0] \n        h = bbox[3] - bbox[1] \n        xc = bbox[0] + int(np.round(w\/2)) \n        yc = bbox[1] + int(np.round(h\/2)) \n        \n        yolo_boxes.append([f'{xc\/img_w:.6f}',f'{yc\/img_h:.6f}' ,f'{w\/img_w:.6f}' ,f'{h\/img_h:.6f}'])\n    \n    return yolo_boxes","b54ecab5":"if not os.listdir(f'{TRAIN_LABELS_DIR}'):\n    for i in tqdm(range(len(df_train_image_level))):\n        row = df_train_image_level.loc[i]\n        img_id = row.id\n        split = row.split\n        label = row.image_level\n\n        if row.split=='train':\n            file_name = f'{TRAIN_LABELS_DIR}{row.id}.txt'\n        else:\n            file_name = f'{VAL_LABELS_DIR}{row.id}.txt'\n\n\n        if label=='opacity':\n            bboxes = get_bbox(row)\n            scale_bboxes = scale_bbox(row, bboxes)\n            yolo_bboxes = get_yolo_format_bbox(IMG_SIZE, IMG_SIZE, scale_bboxes)\n\n            with open(file_name, 'w') as f:\n                for bbox in yolo_bboxes:\n                    bbox = [1]+bbox\n                    bbox = [str(i) for i in bbox]\n                    bbox = ' '.join(bbox)\n                    f.write(bbox)\n                    f.write('\\n')","0dc35134":"%cd {YOLOV5_W_DIR}","e85e12cf":"!python train.py --img {IMG_SIZE} \\\n                 --batch-size {BATCH_SIZE} \\\n                 --epochs {EPOCHS} \\\n                 --data data.yaml \\\n                 --weights yolov5s.pt \\\n                 --save_period 1\\\n                 --project {WANDB_PROJECT_NAME}","bc1d0fe6":"### **configuration and initialization**","13b3308d":"### **Object Detection with yolov5**","5b24059f":"**create dir split train valid and copy image for training**","a953f775":"**train test split**","618c1e17":"**convert results .txt to df_train_image_level**","2a020db2":"**create data yaml yolov5**","529c041c":"**create label txt files**","c06761e4":"\n* https:\/\/www.kaggle.com\/xhlulu\n* https:\/\/www.kaggle.com\/yujiariyasu\n* https:\/\/www.kaggle.com\/ayuraj\n* https:\/\/www.kaggle.com\/dschettler8845   \n....","7116ec17":"**training**","a7c806bd":"### **import dependencies**","3e8f202e":"### **ref**","db67ddc8":"### **load csv file**"}}