{"cell_type":{"9c8ddfbb":"code","34e3df8c":"code","585debb7":"code","acb8ecc0":"code","ef9bfa70":"code","1f7f8aee":"code","c4131ef7":"code","ec27db81":"code","6ff1f14b":"code","2580dc1b":"code","a542f401":"code","8bb04f0d":"code","105dfb88":"code","40c72a87":"code","92690bfd":"code","4c60a82a":"code","6f87f923":"code","18f3cef3":"markdown","d41189cd":"markdown","00ecfb83":"markdown","e913fb47":"markdown","ac29527e":"markdown","83df6a58":"markdown","104dd668":"markdown","7282e085":"markdown","4637185e":"markdown","e259aee7":"markdown","021a7bc5":"markdown","8a0bcf4b":"markdown","c82bdd49":"markdown","8db0082d":"markdown","9e79ff95":"markdown","4bbd1991":"markdown","7281f218":"markdown"},"source":{"9c8ddfbb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # visualization tool\nimport matplotlib.pyplot as plt # plotting tool \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","34e3df8c":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv') #to read data","585debb7":"# to concatenate first and last 10 rows, give name to write clean code\ndata1 = data.head(10)\ndata2 = data.tail(10)\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True) #axis=0 means that will add as rows.\nconc_data_row\n","acb8ecc0":"print(conc_data_row['release_year'].value_counts(dropna=False))","ef9bfa70":"conc_data_row.boxplot(column='release_year')\nplt.show()","1f7f8aee":"list1 = conc_data_row['title']\nlist2 = conc_data_row['type']\nlist3 = conc_data_row['release_year']\nz = zip(list1,list2,list3) #this function adds lists and data returns as tuple\nz_list = list(z) #convert tuple to list\nfor x in z_list: #to show the content of list in different rows\n    print(x)","c4131ef7":"melted = pd.melt(frame=conc_data_row, id_vars= 'title', value_vars= ['release_year','type'])\nmelted.pivot(index='title', columns = 'variable', values= 'value')","ec27db81":"print(conc_data_row['type'].value_counts(dropna=False))","6ff1f14b":"sns.set(style =\"dark\", palette=\"colorblind\", color_codes=True)\nplt.figure(figsize=(8,4))\nplt.grid()\nax = sns.countplot(x = 'type', data=conc_data_row, palette='hls')\nax.set_xlabel(xlabel=\"Type\", fontsize=16)\nax.set_ylabel(ylabel=\"Number of Content\", fontsize=16)\nax.set_title(label=\"Netlix Content\",fontsize=20)\nplt.show()","2580dc1b":"data.info() # to get info about data set","a542f401":"data['director'].value_counts(dropna=False) #to see content of director (NaN->1969)","8bb04f0d":"conc_data_row['director'].fillna('empty',inplace=True) #when we give true for inplace, we do not assign this to new variable. ","105dfb88":"assert conc_data_row['director'].notnull().all() #this return nothing because it is true.\nconc_data_row #when we call our data set, we can see missing director values are 'empty' right now. ","40c72a87":"listDirector = conc_data_row['director']\nlistDirectorEdit = [print('There is NO info about director.') if i=='empty' else print('There is info about its director.') for i in listDirector]","92690bfd":"conc_data_row['cast'].value_counts(dropna=False)","4c60a82a":"conc_data_row['cast'].dropna()","6f87f923":"listDuration = conc_data_row['duration']\n#something wrong in next row!\n#listDurationEdit = [print(conc_data_row['title'][i],'is TV Show') if listDuration[i][2:None]=='Season' else print(conc_data_row['title'][i],'is TV Show') if listDuration[i][2:None]=='Seasons' else print(conc_data_row['title'][i],'is TV Show') if listDuration[i][3:None]=='Seasons' for i in range(0,20)]\nfor i in range(0,20):\n    if listDuration[i][2:None]=='Season' or listDuration[i][2:None]=='Seasons' or listDuration[i][3:None]=='Seasons': \n        print(conc_data_row['title'][i],'is TV Show.')\n    else:\n        print(conc_data_row['title'][i],'is Movie.')\n\n","18f3cef3":"Let's fill NaN values as **'empty'** for our data set **conc_data_row**.","d41189cd":"We obtained \"conc_data_row\" before and we can see all infos. But, i want to see more simply some of columns in it.","00ecfb83":"Also, we can directly see number of content by using \"countplot\" function  from **seaborn** library.","e913fb47":"There are a lot of movies and Tv shows in data set. But, i do not want to work all. So, i want to obtain data set for myself with first and last 10 rows.","ac29527e":"Hello everyone,\n\nI work on **Netflix Movies and TV Shows** data set. I use some methos to examine data set.\n\nAs you all know, Netflix is a platform to watch quality content. There are so many movies, TV shows, documentaries etc. \n\nLet's begin, it'll be fun!","83df6a58":"I will work on \"release_year\". So, let's check counts of them.","104dd668":"We can do another thing about NaN values. Firstly, let's see how many NaN values in cast.","7282e085":"I tried to use several method to analyze data set. As sum up, Netflix Movies and TV Shows Data Set examined by using basic methods.\n\n* Data set was read.\n* A new data set was created by using a certain part of the data set.\n* Some part of data was counted and visualized.\n* A list with no undesirable data was created in two different ways (**zipping** and **melting**)\n* Info of data was shown.\n* **Filling** and **dropping** operations were done for missing values.\n* Working status, which is worked or not situation, was controlled by using **assert** function after these operations.\n* List comprehension method was used.\n* For loop was used.\n\nI hope, this notebook will be helpful for your work!\n\nThanks,\n\nHave a nice working!\n\nPS: **Do not forget to upvote this notebook :)**\n","4637185e":"I can get same infos above by using **melt** function. Obtaining result can be looked more complicated. So, it's better to organise this with **pivot** function.","e259aee7":"When we run code above, we do not see any outputs. But, we should check does it work or not. In order to do that, we should use **assert** function. ","021a7bc5":"We can count number of movies and Tv shows by using \"value_counts\" function from **pandas** library.","8a0bcf4b":"Now, let's drop missing cast rows. If we check this, we can see there are two missing cast values at 8th and 17th rows. After we run code below, we'll see these two rows dropped.","c82bdd49":"Let's check content's type via duration.","8db0082d":"We filled NaN director values as 'empty'. Now, i will use list comprehension method to see this empty values. It's easy and useful method.","9e79ff95":"Let's take 'director' data. Data set includes 4265 directors. But, rest of them (1969) is missing.\n\n","4bbd1991":"Now, i want to check null parts of data. Then, i will do some changes on it.","7281f218":"Let's check \"release_year\" column of conc_data_row data. When we use boxplot, we can see some infos as mean, first quantile, median, third quantile, minimum and maximum entries, outliers.\n\nWhen we look at this plot, we can see there is one outlier and it is 2003."}}