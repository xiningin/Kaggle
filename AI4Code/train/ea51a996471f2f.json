{"cell_type":{"c5e9463a":"code","774318e5":"code","601401ef":"code","302c701f":"code","e0f0e49f":"code","1d835156":"code","50b5e5c9":"code","5ab3a6c3":"code","3a30e599":"markdown","76442b7e":"markdown","a9f437ea":"markdown","bd401553":"markdown"},"source":{"c5e9463a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.models import load_model\nimport gc\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","774318e5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","601401ef":"# loading model\n\nmodel = load_model('..\/input\/bengaliaidensenet\/model_densenet.h5')\n","302c701f":"IMG_SIZE=128\nN_CHANNELS=1","e0f0e49f":"# Resize and center crop images with size 128 x 128. Reference: https:\/\/www.kaggle.com\/iafoss\/image-preprocessing-128x128\ndef bbox(img):\n    rows = np.any(img, axis=1)\n    cols = np.any(img, axis=0)\n    rmin, rmax = np.where(rows)[0][[0, -1]]\n    cmin, cmax = np.where(cols)[0][[0, -1]]\n    return rmin, rmax, cmin, cmax\n\ndef crop_resize(img0, size=IMG_SIZE, pad=16):\n    #crop a box around pixels large than the threshold \n    #some images contain line at the sides\n    ymin,ymax,xmin,xmax = bbox(img0[5:-5,5:-5] > 80)\n    #cropping may cut too much, so we need to add it back\n    xmin = xmin - 13 if (xmin > 13) else 0\n    ymin = ymin - 10 if (ymin > 10) else 0\n    xmax = xmax + 13 if (xmax < WIDTH - 13) else WIDTH\n    ymax = ymax + 10 if (ymax < HEIGHT - 10) else HEIGHT\n    img = img0[ymin:ymax,xmin:xmax]\n    #remove lo intensity pixels as noise\n    img[img < 28] = 0\n    lx, ly = xmax-xmin,ymax-ymin\n    l = max(lx,ly) + pad\n    #make sure that the aspect ratio is kept in rescaling\n    img = np.pad(img, [((l-ly)\/\/2,), ((l-lx)\/\/2,)], mode='constant')\n    return cv2.resize(img,(size, size))","1d835156":"import cv2\n\nHEIGHT = 137\nWIDTH = 236\n\ndef draw_cv2(raw_strokes, size=256, lw=6, time_color=True):\n    img = np.zeros((BASE_SIZE, BASE_SIZE), np.uint8)\n    for t, stroke in enumerate(raw_strokes):\n        for i in range(len(stroke[0]) - 1):\n            color = 255 - min(t, 10) * 13 if time_color else 255\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]),\n                         (stroke[0][i + 1], stroke[1][i + 1]), color, lw)\n    img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n    if size != BASE_SIZE:\n        return cv2.resize(img, (size, size))\n    else:\n        return img\n\n\ndef resize(df, size=IMG_SIZE, need_progress_bar=True):\n    resized = {}\n    if need_progress_bar:\n        for i in tqdm(range(df.shape[0])):\n            img0 = 255 - df.loc[df.index[i]].values.reshape(HEIGHT, WIDTH).astype(np.uint8)\n            #normalize each image by its max val\n            img = crop_resize(img0, size=size)\n            resized[df.index[i]] = img.reshape(-1)\n    else:\n        for i in range(df.shape[0]):\n            img0 = 255 - df.loc[df.index[i]].values.reshape(HEIGHT, WIDTH).astype(np.uint8)\n            #normalize each image by its max val\n            img = crop_resize(img0, size=size)\n            resized[df.index[i]] = img.reshape(-1)\n    return pd.DataFrame(resized).T","50b5e5c9":"preds_dict = {\n    'grapheme_root': [],\n    'vowel_diacritic': [],\n    'consonant_diacritic': []\n}","5ab3a6c3":"components = ['grapheme_root', 'vowel_diacritic', 'consonant_diacritic']\ntarget=[] # model predictions placeholder\nrow_id=[] # row_id place holder\nfor i in range(4):\n    df_test_img = pd.read_parquet('\/kaggle\/input\/bengaliai-cv19\/test_image_data_{}.parquet'.format(i)) \n    df_test_img.set_index('image_id', inplace=True)\n\n    X_test = resize(df_test_img, need_progress_bar=False)\n    X_test = X_test.values.reshape(-1, IMG_SIZE, IMG_SIZE, N_CHANNELS)\n    \n#     print(X_test.shape)\n    \n    preds = model.predict(X_test)\n#     print(preds)\n\n    for i, p in enumerate(preds_dict):\n        preds_dict[p] = np.argmax(preds[i], axis=1)\n\n    print(preds_dict)\n    \n        \n    for k,id in enumerate(df_test_img.index.values):  \n        for i,comp in enumerate(components):\n            id_sample=id+'_'+comp\n            row_id.append(id_sample)\n            target.append(preds_dict[comp][k])\n    del df_test_img\n    del X_test\n    gc.collect()\n\ndf_sample = pd.DataFrame(\n    {\n        'row_id': row_id,\n        'target':target\n    },\n    columns = ['row_id','target'] \n)\ndf_sample.to_csv('submission.csv',index=False)\ndf_sample.head()","3a30e599":"### Creating submission file","76442b7e":"## If you find this kernel useful, Do upvote.\n","a9f437ea":"### This kernel is continuation of my previous kernels\n\n* For Eda please visit [this kernel](https:\/\/www.kaggle.com\/rohitsingh9990\/starter-kit-bengali-ai-grapheme-classification\/edit\/run\/25577027)\n* For Modeling please visit [this kernel](https:\/\/www.kaggle.com\/rohitsingh9990\/bengaliai-starter-eda-multi-output-densenet\/edit)","bd401553":"### Loading Model"}}