{"cell_type":{"75ab634d":"code","70ef9201":"code","8d73fa7a":"code","a7f69d6b":"code","e14167f1":"code","d4b7475d":"code","512ccb7b":"code","f9f3a998":"code","3cf64b79":"code","0f6e5f04":"code","f49126f7":"code","5c7ef4b5":"code","3342a68d":"code","d960febb":"code","7f054ee4":"code","ec74a30a":"code","19d52ba0":"code","9a8b0435":"code","7574c95b":"code","ce3ccf6b":"code","bd0b042d":"code","3fdcf93c":"code","36073027":"code","6abf6683":"code","e1fb3fb6":"code","ec324fff":"code","3b126b65":"code","5f0a5e40":"code","b138b0ed":"code","c2c7e84a":"code","4beac089":"code","39f7bd08":"code","7d846178":"code","64c0fd55":"code","613b7a43":"code","45532876":"code","878556c4":"code","72ab438d":"code","54374df4":"code","efdef586":"code","01f14092":"code","565a05bb":"code","d075cce3":"code","459cba79":"code","7af7b58e":"code","e4f5fc70":"code","659102c6":"code","f8806928":"code","289ad4b4":"code","716adfff":"code","0189c98a":"code","d95b45f9":"code","f36ac286":"code","d3caa1cc":"code","3385aae0":"code","200317bb":"code","a05e4b24":"code","a37e4e6c":"code","a80975c9":"code","bf86abb9":"code","8ff50992":"code","e49333e4":"code","46862819":"code","1eb9131a":"code","5465fd58":"code","711a69b3":"code","0a72acf9":"code","5f0d8915":"code","348bf900":"code","da405e85":"code","6197811a":"code","ff37ac2e":"code","8efe48b2":"markdown","c21e967a":"markdown","479e2d61":"markdown","57125a66":"markdown","3addf65b":"markdown","27e7fe62":"markdown"},"source":{"75ab634d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport matplotlib.pylab as plt #for visualization\n%matplotlib inline    \nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","70ef9201":"train = pd.read_csv('..\/input\/av-genpact-hack-dec2018\/train.csv')\nmeal = pd.read_csv('..\/input\/av-genpact-hack-dec2018\/meal_info.csv')\ncenter = pd.read_csv('..\/input\/av-genpact-hack-dec2018\/fulfilment_center_info.csv')","8d73fa7a":"# merge for train data\ntrain = train.merge(center,on='center_id')\ntrain = train.merge(meal,on='meal_id')","a7f69d6b":"data = train[train['center_id']==55]\ndata = data[data['meal_id'] == 1885]","e14167f1":"data","d4b7475d":"data.info()","512ccb7b":"corrmat = data.corr()","f9f3a998":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nnum_correlation = data.select_dtypes(exclude='object').corr()\nplt.figure(figsize=(10,8))\nplt.title('High Correlation')\nsns.heatmap(num_correlation > 0.4, annot=True, square=True)\n\n","3cf64b79":"#saleprice correlation matrix\nk = 9 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'num_orders')['num_orders'].index\ncm = np.corrcoef(data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 9}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","0f6e5f04":"sns.distplot(data['num_orders'])","f49126f7":"data['num_orders'].plot()","5c7ef4b5":"data['num_orders'].skew()","3342a68d":"sns.boxplot(['num_orders'], data=data)","d960febb":"import numpy as np\nt = np.log1p(data['num_orders'])\nt.plot()","7f054ee4":"sns.boxplot(t)","ec74a30a":"data['diff'] = data['base_price']- data['checkout_price']","19d52ba0":"data","9a8b0435":"# we will take  homepage_featured,  diff, num order\n# data.drop(columns=['id','week'])\n\nx = data[['homepage_featured','diff','num_orders']]\nx = x.reset_index()","7574c95b":"a = x['num_orders'].quantile(0.98)\na","ce3ccf6b":"# x = x[x['num_orders']<a]\n","bd0b042d":"sns.boxplot(x['num_orders'])","3fdcf93c":"np.log1p(x['num_orders']).plot()","36073027":"# x['num_orders'] = np.log1p(x['num_orders'])\n# x","6abf6683":"x.drop(columns='index',inplace=True)","e1fb3fb6":"# lets partition data\n\nx_train = x.drop(columns='num_orders')\ny_train = x['num_orders']\n","ec324fff":"X_train = x_train.iloc[:138,:]\nX_test = x_train.iloc[138:,:]\nY_train =  y_train.iloc[:138]\nY_test = y_train.iloc[138:]","3b126b65":"print(len(X_test))\nprint(len(Y_test))","5f0a5e40":"Y_test","b138b0ed":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate =0.3,\n eval_metric='rmse',\n    n_estimators=5000,\n  \n  \n )\n#model.fit(X_train, y_train)\nmodel_2.fit(X_train, Y_train, eval_metric='rmse', \n          eval_set=[(X_test, Y_test)], early_stopping_rounds=1000, verbose=100)","c2c7e84a":"model =XGBRegressor(\n learning_rate =0.001,\n    n_estimators=2)\n  ","4beac089":"model.fit(X_train,Y_train)","39f7bd08":"preds = model.predict(x_train) ","7d846178":"preds","64c0fd55":"# preds = np.exp(preds)\n","613b7a43":"len(preds)","45532876":"# true_value = np.exp(x['num_orders'])\n# true_value","878556c4":"plt.plot(x['num_orders'])\nplt.plot(preds, color='r')","72ab438d":"x","54374df4":"x['Date'] = pd.date_range('2020-01-01', periods=145, freq='W')\nx","efdef586":"from fbprophet import Prophet","01f14092":"prophet_model = x[['Date','num_orders']]\nprophet_model =prophet_model.rename(columns={'Date':'ds',\n                             'num_orders':'y'})\nprophet_model","565a05bb":"m = Prophet(changepoint_prior_scale=0.001)\nm.fit(prophet_model)\n","d075cce3":"future = m.make_future_dataframe(periods=10)\n","459cba79":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","7af7b58e":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","e4f5fc70":"plt.figure(figsize=(25,5))\nplt.plot(x['num_orders'])\nplt.plot(forecast['yhat'], color='r')","659102c6":"x","f8806928":"df = x[['Date','num_orders']]\ndf = df.set_index(['Date'])\ndf","289ad4b4":"rolmean = df.rolling(window=6).mean()\nrolstd = df.rolling(window=6).std()","716adfff":"plt.figure(figsize=(25,5))\nplt.plot(df, color='blue', label='original cases')\nplt.plot(rolmean, color='red', label='rolling mean')\nplt.plot(rolstd, color='black', label='rolling standard deviation')\nplt.legend(loc='right')\nplt.show()","0189c98a":"from statsmodels.tsa.stattools import adfuller\ndef test(data):\n    rolmean = data.rolling(window=2).mean()\n    rolstd = data.rolling(window=2).std()\n    plt.figure(figsize=(25,5))\n    plt.plot(data, color='blue', label='original cases')\n    plt.plot(rolmean, color='red', label='rolling mean')\n    plt.plot(rolstd, color='black', label='rolling standard deviation')\n    plt.legend(loc='best')\n    plt.show()\n    \n    dftest = adfuller(data['num_orders'], autolag = 't-stat')\n    dfoutput = pd.Series(dftest[0:4], index=['test statitics','p_value','lags used','number of observations'])\n    for key,value in dftest[4].items():\n        dfoutput['critcal value (%s)'%key] = value\n        \n    print(dfoutput)","d95b45f9":"test(df)","f36ac286":"df_log = np.log(df)\ntest(df_log)","d3caa1cc":"movingaverage = df_log.rolling(window=4).mean()\n\ndf_log_minus = df_log - movingaverage\ndf_log_minus.dropna(inplace=True)\ndf_log_minus.head(12)","3385aae0":"test(df_log_minus)","200317bb":"from statsmodels.tsa.stattools import acf, pacf\n\nlag_acf = acf(df_log_minus, nlags=50)\nlag_pacf = pacf(df_log_minus, nlags=20, method='ols')\n\nplt.figure(figsize=(10,8))\n#plot acf\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.title('ACF')\nplt.legend(loc='best')\n\n#plot pacf\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0, linestyle='--', color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df_log_minus)), linestyle='--', color='gray')\nplt.title('PACF')\nplt.legend(loc='best')\n\n# Y:0 -> X:1 -> q = 1, P=1","a05e4b24":"# AR model\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(df_log, order=(1,1,0))\nresult_ar = model.fit(disp=-1)\nplt.figure(figsize=(20,8))\nplt.plot(df_log_minus)\nplt.plot(result_ar.fittedvalues, color='r')\nplt.title('AR RSS: %-4f'% sum((result_ar.fittedvalues - df_log_minus['num_orders'])**2))\nprint('Plotting AR model')","a37e4e6c":"# MA MODEL\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(df_log, order=(0,1,1))\nresult_ma = model.fit(disp=-1)\nplt.figure(figsize=(20,8))\nplt.plot(df_log_minus)\nplt.plot(result_ma.fittedvalues, color='r')\nplt.title('MA RSS: %-4F'% sum((result_ma.fittedvalues - df_log_minus['num_orders'])**2))\nprint('Plotting MA model')","a80975c9":"# arima (p,d,q)(1,1,1)\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(df_log, order=(1,1,1))\nresult_arima = model.fit(disp=-1)\nplt.figure(figsize=(20,8))\nplt.plot(df_log_minus)\nplt.plot(result_arima.fittedvalues, color='r')\nplt.title('ARIMA RSS: %-4F'% sum((result_arima.fittedvalues - df_log_minus['num_orders'])**2))\nprint('Plotting ARIMA model')","bf86abb9":"result_arima.fittedvalues","8ff50992":"pred_arima_diff = pd.Series(result_arima.fittedvalues, copy=True)\npred_arima_diff","e49333e4":"pred_arima_diff_cumsum = pred_arima_diff.cumsum()\npred_arima_diff_cumsum.tail()","46862819":"prediction = pd.Series(df_log['num_orders'].iloc[0], index=df_log.index)\nprediction = prediction.add(pred_arima_diff_cumsum, fill_value=0)\nprediction.head()","1eb9131a":"prediction = np.exp(prediction)\nprediction = prediction.reset_index()\nprediction.drop(columns='Date', inplace=True)\n\n# prediction = pd.DataFrame(prediction)","5465fd58":"prediction.plot()\nx['num_orders'].plot()\n","711a69b3":"forecast['yhat']","0a72acf9":"# a = pd.DataFrame()\nb = (forecast['yhat']) ","5f0d8915":"b[0]","348bf900":"plt.figure(figsize=(25,5))\nplt.plot(x['num_orders'])\nplt.plot(b, color='r')","da405e85":"result_arima.plot_predict(1,150)\nplt.figure(figsize=(10,8))","6197811a":"result_ar.plot_predict(1,264)\nplt.figure(figsize=(10,8))","ff37ac2e":"result_ma.plot_predict(1,150)\nplt.figure(figsize=(10,8))","8efe48b2":"From the ACF graph, we see that curve touches y=0.0 line at x=0. Thus, from theory, Q = 0 From the PACF graph, we see that curve touches y=0.0 line at x=1. Thus, from theory, P = 1","c21e967a":"**BUILDING MODELS**","479e2d61":"# Prohpet model","57125a66":"# Arima","3addf65b":"# normalization","27e7fe62":"we will take  homepage_featured,  diff, num order"}}