{"cell_type":{"001a4933":"code","a7d0d234":"code","d6441ca6":"code","a3b77ca7":"code","a7d8352f":"code","b9f6ff0e":"code","246d10b5":"code","b82ddb66":"code","77d7e437":"code","2da57689":"code","6ce2e502":"code","e607c513":"code","c0b5c34b":"code","ed84e7ae":"code","10d0a62e":"code","fd123122":"code","fdb14185":"code","470db546":"code","5573ae5c":"code","df373bee":"code","e00cd904":"code","dca84690":"code","3063ea53":"code","f4591860":"code","d5bc32af":"code","c9d5224b":"code","3a7a32ea":"code","34f9d8f4":"code","36018df3":"code","8b375561":"code","e6ca3207":"code","c956dfe1":"code","0204a649":"code","06671612":"code","bc563a0c":"code","56347e27":"markdown","c96b16b0":"markdown","8425b8aa":"markdown","91ec4641":"markdown","b30e5cab":"markdown","4b504103":"markdown","027f7273":"markdown"},"source":{"001a4933":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os, glob, pickle, time, gc, copy, sys\nimport yaml\nimport pandas_profiling as pdp\nimport warnings\nimport requests\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn import metrics\nimport lightgbm as lgb\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 100) # \u8868\u793a\u3067\u304d\u308b\u5217\u6570","a7d0d234":"# train\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\ndf_train = pd.read_csv(\"..\/input\/ai-medical-contest-2020\/train.csv\")\nprint(\"df_train.shape\", df_train.shape) # \u30b7\u30a7\u30a4\u30d7 = (\u884c\u6570, \u5217\u6570)\u3092\u8868\u793a\u3059\u308b\ndf_train.head() # \u5148\u982d5\u884c\u3092\u8868\u793a\u3059\u308b","d6441ca6":"# test\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\ndf_test = pd.read_csv(\"..\/input\/ai-medical-contest-2020\/test.csv\")\nprint(\"df_test.shape\", df_test.shape) # \u30b7\u30a7\u30a4\u30d7 = (\u884c\u6570, \u5217\u6570)\u3092\u8868\u793a\u3059\u308b\ndf_test.head() # \u5148\u982d5\u884c\u3092\u8868\u793a\u3059\u308b","a3b77ca7":"# submission\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\ndf_sub = pd.read_csv(\"..\/input\/ai-medical-contest-2020\/sample_submission.csv\")\nprint(\"df_sub.shape\", df_sub.shape) # \u30b7\u30a7\u30a4\u30d7 = (\u884c\u6570, \u5217\u6570)\u3092\u8868\u793a\u3059\u308b\ndf_sub.head() # \u5148\u982d5\u884c\u3092\u8868\u793a\u3059\u308b","a7d8352f":"# train\u3068test\u3092\u9023\u7d50\u3059\u308b\ndf_traintest = pd.concat([df_train, df_test]).reset_index(drop=True) # reset_index: \u884c\u306eindex\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\nprint(df_traintest.shape)\ndf_traintest.head()","b9f6ff0e":"# \u65e5\u6642\u3092\u8868\u3059\u5217\u3092string\u578b\u304b\u3089datetime\u578b\u306b\u5909\u63db\nformat='%Y-%m-%d' # \u4e8c\u6b21\u5730\u8868\u793a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8, \u4f8b) 2020-09-26\ncols_time = ['entry_date', 'date_symptoms', 'date_died'] # \u65e5\u6642\u3092\u8868\u3059\u5217\u540d\u306e\u30ea\u30b9\u30c8\nfor col in cols_time: # \u5404\u5217\u306b\u3064\u3044\u3066\n    df_traintest[col] = pd.to_datetime(df_traintest[col],format=format) # string\u578b\u304b\u3089datetime\u578b\u306b\u5909\u63db\ndf_traintest[cols_time].head()","246d10b5":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3064\u3044\u3066\u89e3\u6790\ncol_target = 'died' # \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5217\ncol_index = 'patient_id' # id\u306e\u5217\nprint(\"rate of died: {:.6f}\".format(df_train[col_target].mean())) # \u60a3\u8005\u306e\u5185\u6b7b\u3093\u3060\u4eba\u306e\u5272\u5408","b82ddb66":"# \u5404\u5217\u306e\u57fa\u672c\u60c5\u5831\u3092\u8868\u793a\n# \u5217\u540d, \u578b, nan\u306e\u6570, unique\u306a\u5024\u306e\u6570, \u5b9f\u969b\u306e\u5024\u306e\u4e00\u90e8, \u3092\u8868\u793a\u3059\u308b\nfor i, col in enumerate(df_train.columns): # \u5404\u5217(column)\u306b\u3064\u3044\u3066\n    col_name = col + \" \" * (22 - len(col)) # \u30ab\u30e9\u30e0\u540d, \u898b\u305f\u76ee\u4e0a\u306e\u6574\u5f62\u306e\u305f\u3081\u306b\u30b9\u30da\u30fc\u30b9\u3092\u52a0\u3048\u308b\n    type_name = \"{}\".format(df_train[col].dtype) # \u578b\u540d\n    type_name = type_name + \" \" * (8 - len(type_name)) # \u898b\u305f\u76ee\u4e0a\u306e\u6574\u5f62\u306e\u305f\u3081\u306b\u30b9\u30da\u30fc\u30b9\u3092\u52a0\u3048\u308b\n    num_unique = len(df_train[col].unique()) # \u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u6570\n    num_nan = pd.isna(df_train[col]).sum() # nan\u306e\u6570\n    col_head = \"{}\".format(df_train[col].unique()[:5].tolist())[:50] # \u5b9f\u969b\u306e\u5024\u306e\u4e00\u90e8\n    print(\"{:4d}: {} dtype: {} unique: {:8d}, nan: {:6d}, \u5b9f\u969b\u306e\u5024: {}\".format(\n        i, col_name, type_name, len(df_train[col].unique()), num_nan, col_head)) # \u8868\u793a\u3059\u308b","77d7e437":"# pandas profile \u3067\u30c7\u30fc\u30bf\u306e\u89e3\u6790\u3092\u884c\u3046\n# \u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u4e00\u90e8\u306e\u884c\u306e\u307f\u629c\u304d\u51fa\u3057\u3066\u89e3\u6790\u3059\u308b\nnum_reduce = 1000 # \u62bd\u51fa\u3059\u308b\u884c\u6570\nidx_reduced = np.random.randint(0,len(df_traintest), num_reduce) # \u62bd\u51fa\u3059\u308b\u884c\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\npdp.ProfileReport(df_traintest.iloc[idx_reduced])","2da57689":"# scatter matrix \u3092\u8868\u793a\n# \u6570\u5024\u5909\u6570\u9593\u306e\u76f8\u95a2\u3092\u898b\u308b\n# \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u6570\u5024\u5909\u6570\u304cage\u3057\u304b\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u5f79\u7acb\u305f\u306a\u3044\nnum_reduce = 1000 # \u62bd\u51fa\u3059\u308b\u884c\u6570\nidx_reduced = np.random.randint(0,len(df_traintest), num_reduce) # \u62bd\u51fa\u3059\u308b\u884c\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\nscatter_matrix = pd.plotting.scatter_matrix(\n    df_traintest.iloc[idx_reduced],\n    figsize=(20,20),\n    marker   = \".\",\n    s        = 0.2,\n#     diagonal = \"kde\"\n)\n\nfor ax in scatter_matrix.ravel():\n    ax.set_xlabel(ax.get_xlabel(), fontsize = 10, rotation = 90)\n    ax.set_ylabel(ax.get_ylabel(), fontsize = 10, rotation = 0)\nplt.show()","6ce2e502":"# \u6570\u5024\u5909\u6570\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b\nfrom scipy.stats import norm\ncols_num = ['age'] # \u6570\u5024\u5909\u6570\u306e\u5217\u540d\u306e\u30ea\u30b9\u30c8, \u3053\u306e\u30c7\u30fc\u30bf\u306e\u5834\u5408 age \u306e\u307f\nfig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_num)\/4)))))\nfor i, col in enumerate(cols_num[:]):\n    ax = fig.add_subplot(int(np.ceil(len(cols_num)\/4)),4,i+1)\n    sns.distplot(\n        df_traintest[col], # \u8868\u793a\u3059\u308b\u30c7\u30fc\u30bf\n        bins=20, # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u30d3\u30f3\u306e\u6570\n        color='black', label='data',\n        kde_kws={'label': 'kde','color':'k'},\n        fit=norm, \n        fit_kws={'label': 'norm','color':'red'},\n        rug=False\n    )","e607c513":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u3064\u3044\u3066\u68d2\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\n# \u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u4e00\u90e8\u306e\u884c\u306e\u307f\u629c\u304d\u51fa\u3057\u3066\u30b0\u30e9\u30d5\u306b\u3059\u308b\ncols_cat = [\n'type_hospital',\n'place_hospital', 'place_patient_birth', 'place_patient_live', 'place_patient_live2',\n'patient_type', 'icu', 'intubed', 'sex',\n'asthma', 'cardiovascular', 'chronic_renal_failure', 'copd', 'diabetes',\n'hypertension', 'immunosuppression', 'obesity', 'pneumonia', 'pregnancy', 'other_disease',\n'tobacco', 'contact_other_covid', 'test_result',\n]\n\nnum_reduce = 10000 # \u62bd\u51fa\u3059\u308b\u884c\u6570\nidx_reduced = np.random.randint(0,len(df_traintest), num_reduce) # \u62bd\u51fa\u3059\u308b\u884c\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n# fig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_cat)\/4)))))\nfor i, col in enumerate(cols_cat):\n    g = sns.catplot(\n        x=col,  \n        kind=\"count\",\n        data=df_traintest.iloc[idx_reduced],\n        height=5, \n        palette=\"muted\"\n    )\n    g.fig.set_figwidth(16)\n    g.fig.set_figheight(2)\n    plt.show()","c0b5c34b":"# \u6642\u7cfb\u5217\u60c5\u5831\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n# test\u306f\n# date_died\u306b\u3064\u3044\u3066\u306ftest\u30c7\u30fc\u30bf\u304c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f \nfrom scipy.stats import norm\ndf_tmp = copy.deepcopy(df_traintest)\ndf_tmp['count'] = 1\nfor i, col in enumerate(cols_time[:]):\n    ax = df_tmp[['count']].groupby([df_tmp[col].dt.year, df_tmp[col].dt.month]).count().plot(kind=\"bar\") # \u6708\u3054\u3068\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a","ed84e7ae":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3054\u3068\u306b\u6570\u5024\u5909\u6570\u306e\u30d0\u30a4\u30aa\u30ea\u30f3\u30d7\u30ed\u30c3\u30c8\u3092\u8868\u793a\n# died=0\u306e\u5834\u5408\u306eage\u306e\u5206\u5e03\u3001died=1\u306e\u5834\u5408\u306eage\u306e\u5206\u5e03\u3092\u8868\u793a\u3059\u308b\n# 2\u3064\u306e\u5206\u5e03\u304c\u9055\u3046\u3068\u3044\u3046\u4e8b\u306f\u305d\u306e\u5909\u6570\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u5f37\u3044\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u5506\u3059\u308b\nnum_reduce = 10000\nidx_reduced = np.random.randint(0,len(df_train), num_reduce)\nfig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_num)\/4)))))\nfor i, col in enumerate(cols_num):\n    ax = fig.add_subplot(int(np.ceil(len(cols_num)\/4)),4,i+1)\n    sns.violinplot(\n        x=col_target,\n        y=col,\n        data=df_train.iloc[idx_reduced],\n#         scale='count', # \u6d88\u3059\u3068\u6b63\u898f\u5316\u3059\u308b\n    )","10d0a62e":"# \u6570\u5024\u5909\u6570\u306b\u3064\u3044\u3066 logistic regression plot\n# age \u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u3066 died \u3092\u30a2\u30a6\u30c8\u30ab\u30e0\u3068\u3059\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3063\u3066\u305d\u308c\u3092\u8868\u793a\nnum_reduce = 1000\nidx_reduced = np.random.randint(0,len(df_train), num_reduce)\nfig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_num)\/4)))))\nfor i, col in enumerate(cols_num[:]):\n    ax = fig.add_subplot(int(np.ceil(len(cols_num)\/4)),4,i+1)\n    sns.regplot(x=col,\n                y=col_target,\n                data=df_train.iloc[idx_reduced],\n                logistic=True, \n                scatter_kws={'s': 10, 'alpha':0.3,'color':'m'},\n    )","fd123122":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3054\u3068\u306b\u65e5\u6642\u5909\u6570\u306e\u30d0\u30a4\u30aa\u30ea\u30f3\u30d7\u30ed\u30c3\u30c8\u3092\u8868\u793a\nnum_reduce = 10000\nidx_reduced = np.random.randint(0,len(df_train), num_reduce)\ndf_base = copy.deepcopy(df_traintest.iloc[:len(df_train)].reset_index(drop=True))\nfig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_num)\/4)))))\nfor i, col in enumerate(cols_time[:2]):\n    df_base[col] = df_base[col].apply(lambda x: x.dayofyear).astype(np.uint16)\n    ax = fig.add_subplot(int(np.ceil(len(cols_time)\/4)),4,i+1)\n    sns.violinplot(\n        x=col_target,\n        y=col,\n        data=df_base.iloc[idx_reduced],\n#         scale='count', # \u6d88\u3059\u3068\u6b63\u898f\u5316\u3059\u308b\n    )","fdb14185":"# \u65e5\u6642\u5909\u6570\u306b\u3064\u3044\u3066 logistic regression plot\nnum_reduce = 1000\nidx_reduced = np.random.randint(0,len(df_train), num_reduce)\ndf_base = copy.deepcopy(df_traintest.iloc[:len(df_train)].reset_index(drop=True))\nfig = plt.figure(figsize=(20, int(4*int(np.ceil(len(cols_time)\/4)))))\nfor i, col in enumerate(cols_time[:2]):\n    df_base[col] = df_base[col].apply(lambda x: x.dayofyear).astype(np.uint16)\n    ax = fig.add_subplot(int(np.ceil(len(cols_time)\/4)),4,i+1)\n    sns.regplot(x=col,\n                y=col_target,\n                data=df_base.iloc[idx_reduced],\n                logistic=True, \n                scatter_kws={'s': 10, 'alpha':0.3,'color':'m'},\n    )","470db546":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u3064\u3044\u3066\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\u3092\u8868\u793a\n\ndef stack_bar_plot(df_tmp, col, col_target, ax=None):\n    df_tmp[col][pd.isna(df_tmp[col])] = 'nan'\n    target_value = df_tmp[col].unique()\n    df_agg = df_tmp[df_tmp[col_target].duplicated()==False][[col_target]].sort_values(col_target).reset_index(drop=True)\n    for value in target_value:\n        col_value = \"{}\".format(value)\n        df_agg_tmp = df_tmp[df_tmp[col]==value].groupby(col_target)[col].agg(len).reset_index()\n        df_agg_tmp = df_agg_tmp.sort_values(col_target).reset_index(drop=True)\n        df_agg_tmp.columns = [col_target, col_value]\n        df_agg = pd.merge(df_agg, df_agg_tmp, on=col_target, how='left')\n    df_agg = df_agg.fillna(0)\n    col_new = \"{}\/{}\".format(col, col_target)\n    df_agg.columns = [col_new] + df_agg.columns[1:].values.tolist()\n    df_agg = df_agg.set_index(col_new)\n    df_agg.iloc[:] = df_agg.values \/ df_agg.values.sum(axis=1)[:,np.newaxis]\n    ax1 = df_agg.plot.bar(stacked=True, ax=ax)\n    ax1.legend(title=col)\n\ncols_cat = [\n'type_hospital',\n'place_hospital', 'place_patient_birth', 'place_patient_live',\n'patient_type', 'icu', 'intubed', 'sex',\n'asthma', 'cardiovascular', 'chronic_renal_failure', 'copd', 'diabetes',\n'hypertension', 'immunosuppression', 'obesity', 'pneumonia', 'pregnancy', 'other_disease',\n'tobacco', 'contact_other_covid', 'test_result',\n]\nnum_reduce = 10000\nfig, axes = plt.subplots(nrows=int(np.ceil(len(cols_cat)\/4)), ncols=4, figsize=(20, int(6*int(np.ceil(len(cols_cat)\/4)))))\nfor i, col in enumerate(cols_cat):\n    stack_bar_plot(df_train, col, col_target, ax=axes[i\/\/4, i%4])","5573ae5c":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b (\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b).\ndf_traintest['sex'] = df_traintest['sex'].replace('female', 0) # female\u306b0\u3092\u4ee3\u5165\ndf_traintest['sex'] = df_traintest['sex'].replace('male', 1) # male\u306b1\u3092\u4ee3\u5165\ndf_traintest['sex'] = df_traintest['sex'].astype(int) # \u578b\u3092\u6574\u6570\u306b\u5909\u63db\n\ndf_traintest['place_patient_birth'] = df_traintest['place_patient_birth'].fillna(33) # nan\u3092\u65b0\u898f\u306e\u30ab\u30c6\u30b4\u30ea 33 \u306b\u7f6e\u63db\ndf_traintest['place_patient_birth'] = df_traintest['place_patient_birth'].astype(int)\n\ndf_traintest['patient_type'] = df_traintest['patient_type'].replace('inpatient', 0)\ndf_traintest['patient_type'] = df_traintest['patient_type'].replace('outpatient', 1)\ndf_traintest['patient_type'] = df_traintest['patient_type'].astype(int)\n\ncols_tmp = [\n'icu', 'intubed',\n'asthma', 'cardiovascular', 'chronic_renal_failure', 'copd', 'diabetes',\n'hypertension', 'immunosuppression', 'obesity', 'pneumonia', 'pregnancy', 'other_disease',\n'tobacco', 'contact_other_covid',\n]\nfor col in cols_tmp:\n    df_traintest[col] = df_traintest[col].replace('No', 0)\n    df_traintest[col] = df_traintest[col].replace('Yes', 1)\n    df_traintest[col] = df_traintest[col].fillna(2)\n    df_traintest[col] = df_traintest[col].astype(int)\n\ndf_traintest['test_result'] = df_traintest['test_result'].replace('Negative', 0)\ndf_traintest['test_result'] = df_traintest['test_result'].replace('Positive', 1)\ndf_traintest['test_result'] = df_traintest['test_result'].replace('Results awaited', 1)\ndf_traintest['test_result'] = df_traintest['test_result'].astype(int)","df373bee":"# \u65e5\u6642\u5909\u6570\u30921\u67081\u65e5\u304b\u3089\u6570\u3048\u305f\u65e5\u6570\u306b\u5909\u63db\u3059\u308b\ndf_traintest['entry_date'] = df_traintest['entry_date'].apply(lambda x: x.dayofyear).astype(np.uint16)\ndf_traintest['date_symptoms'] = df_traintest['date_symptoms'].apply(lambda x: x.dayofyear).astype(np.uint16)","e00cd904":"# \u524d\u51e6\u7406\u7d50\u679c\u3092\u78ba\u8a8d\ndf_traintest.head()","dca84690":"# \u5909\u6570\u3068\u5909\u6570\u306e\u5dee\u3092\u3068\u308b\ndf_traintest['entry_-_symptom_date'] = df_traintest['entry_date'] - df_traintest['date_symptoms'] # \u767a\u75c7\u304b\u3089\u5165\u9662\u307e\u3067\u306e\u65e5\u6570","3063ea53":"# \u5909\u6570\u3068\u5909\u6570\u306e\u4e57\u7b97\u3092\u3068\u308b\nage = df_traintest['age'].values\nage = (age - age.mean()) \/ age.std() # \u5e74\u9f62\u3092\u6b63\u898f\u5316\nentry_date = df_traintest['entry_date'].values\nentry_date = (entry_date - entry_date.mean()) \/ entry_date.std() # \u5e74\u9f62\u3092\u6b63\u898f\u5316\ndf_traintest['age_x_entry_date'] = age * entry_date # \u5e74\u9f62\u3068\u5165\u9662\u65e5\u3092\u4e57\u7b97. 2\u3064\u306e\u5909\u6570\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u8868\u73fe\u3067\u304d\u308b","f4591860":"# \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n# \u3042\u308b\u30ab\u30c6\u30b4\u30ea\u304c\u30c7\u30fc\u30bf\u306b\u4f55\u4ef6\u3042\u308b\u304b\u3001\u3092\u7279\u5fb4\u91cf\u3068\u3059\u308b. \u4f8b) \u5165\u9662\u65e5\u304c2020\/1\/1\u306e\u884c\u304c\u4f55\u4ef6\u3042\u308b\u304b\ncol_groupby = 'entry_date' # \u30ab\u30a6\u30f3\u30c8\u3092\u884c\u3046\u5217\ndf_tmp = copy.deepcopy(df_traintest)\ndf_agg = df_traintest.groupby(col_groupby)[col_index].agg(len).reset_index() # \u96c6\u7d04\u7279\u5fb4\u91cf\u3092\u5f97\u308b\ncol_new = 'entry_date_count' # \u7279\u5fb4\u91cf\u540d. \u5404\u65e5\u306e\u5165\u9662\u60a3\u8005\u6570\ndf_agg.columns = [col_groupby, col_new]\ndf_tmp = pd.merge(df_tmp, df_agg, on=col_groupby, how='left').drop(col_groupby, axis=1)\ndf_traintest[col_new] = df_tmp[col_new]","d5bc32af":"# \u96c6\u7d04\u7279\u5fb4\u91cf\n# \u30c7\u30fc\u30bf\u3092\u4f55\u3089\u304b\u306e\u30ab\u30c6\u30b4\u30ea\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u5909\u6570\u306e\u7d71\u8a08\u91cf\u3092\u8a08\u7b97\u3059\u308b\ncol_groupby = 'entry_date' # \u30b0\u30eb\u30fc\u30d7\u5206\u3051\u306b\u7528\u3044\u308b\u5217\u540d\ncol_aggregate = 'icu' # \u7d71\u8a08\u91cf\u3092\u5f97\u308b\u7279\u5fb4\u91cf\ndf_tmp = copy.deepcopy(df_traintest)\ndf_tmp[col_aggregate] = df_traintest[col_aggregate]==1 # ICU\u306b\u5165\u3063\u305f\u304b\u3069\u3046\u304b\nmethod = 'mean' # \u7d71\u8a08\u91cf\u306e\u7a2e\u985e\ndf_agg = df_tmp.groupby(col_groupby)[col_aggregate].agg(method).reset_index() # \u96c6\u7d04\u7279\u5fb4\u91cf\u3092\u5f97\u308b\ncol_new = 'mean_of_icu_of_each_entry_date' # \u7279\u5fb4\u91cf\u540d. \u5165\u9662\u65e5\u3054\u3068\u306eICU\u5165\u5ba4\u7387\ndf_agg.columns = [col_groupby, col_new]\ndf_tmp = pd.merge(df_tmp, df_agg, on=col_groupby, how='left')\ndf_traintest[col_new] = df_tmp[col_new]","c9d5224b":"# \u4f5c\u3063\u305f\u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\ndf_traintest.head()","3a7a32ea":"# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u305f\u3081\u306b\u30c7\u30fc\u30bf\u30925\u5206\u5272\u3059\u308b\n# 4\u3064\u3092\u5b66\u7fd2\u306b\u7528\u3044\u30011\u3064\u3092\u691c\u8a3c\u306b\u8981\u3059\u308b\u3002\u3053\u308c\u30925\u56de\u7e70\u308a\u8fd4\u3059\u3002\nfolds = list(StratifiedKFold(n_splits=5, shuffle=True, random_state=42).split(\n    np.arange(len(df_train)), \n    y=df_train[col_target]) # \u5404fold\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30e9\u30d9\u30eb\u306e\u5206\u5e03\u304c\u305d\u308d\u3046\u3088\u3046\u306b\u3059\u308b = stratified K fold\n            )","34f9d8f4":"# \u30e2\u30c7\u30eb\u306e\u5165\u529b\u306b\u7528\u3044\u308b\u5217\u3092\u6307\u5b9a\u3059\u308b\ncols_feature = df_traintest.columns.values.tolist()[3:] # \u30e2\u30c7\u30eb\u306e\u5165\u529b\u306b\u7528\u3044\u308b\u5217\u306e\u30ea\u30b9\u30c8\ncols_cat = [ # \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30ea\u30b9\u30c8\n'type_hospital',\n'place_hospital',\n'place_patient_birth',\n'place_patient_live',\n'place_patient_live2',\n'patient_type',\n'icu',\n'intubed',\n'sex',\n'asthma',\n'cardiovascular',\n'chronic_renal_failure',\n'copd',\n'diabetes',\n'hypertension',\n'immunosuppression',\n'obesity',\n'pneumonia',\n'pregnancy',\n'other_disease',\n'tobacco',\n'contact_other_covid',\n'test_result',\n]","36018df3":"# LightGBM \u3092\u6301\u3061\u3044\u308b\u3002\n# LightGBM \u306f\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3067\u591a\u304f\u306e\u5834\u5408\u6700\u3082\u826f\u3044\u6027\u80fd\u3092\u51fa\u305b\u308b\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3002\n# \u985e\u4f3c\u306e\u30e2\u30c7\u30eb\u306b XGBoost\u3001Catboost \u304c\u3042\u308b\u3002\n# LightGBM\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\nparams = {\n    'objective': 'binary', # \u76ee\u7684->2\u5024\u5206\u985e\n    'num_threads': -1,\n    'bagging_seed': 42, # random seed \u306e\u56fa\u5b9a\n    'random_state': 42, # random seed \u306e\u56fa\u5b9a\n    'boosting': 'gbdt',\n    'metric': 'auc', # \u8a55\u4fa1\u5909\u6570->AUC\n    'verbosity': -1,\n          }","8b375561":"# \u30e2\u30c7\u30eb\u5b66\u7fd2\u306e\u6e96\u5099\npreds_valid = np.zeros([len(df_train)], np.float32) # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7d50\u679c\u3092\u8a18\u9332\u3059\u308bnumpy array\npreds_test = np.zeros([5, len(df_test)], np.float32) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7d50\u679c\u3092\u8a18\u9332\u3059\u308bnumpy array\ndf_feature_importance = pd.DataFrame() # \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u8a18\u9332\u3059\u308bdataframe","e6ca3207":"# train \u3068 test \u3092\u518d\u5ea6\u5207\u308a\u5206\u3051\u308b\ndf_train = df_traintest.iloc[:len(df_train)]\ndf_test = df_traintest.iloc[len(df_train):].reset_index(drop=True)","c956dfe1":"# \u30e2\u30c7\u30eb\u5b66\u7fd2\nfor fold in range(5): # \u5404fold\u306b\u3064\u3044\u3066\n    X_train = df_train[cols_feature].iloc[folds[fold][0]] # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\n    y_train = df_train[col_target][folds[fold][0]] # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\n    X_valid = df_train[cols_feature].iloc[folds[fold][1]] # \u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\n    y_valid = df_train[col_target][folds[fold][1]] # \u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\n    X_test = df_test[cols_feature] # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5165\u5bee\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\n\n    print(\"fold: {}, train: {}, valid: {}\".format(fold+1, len(X_train), len(X_valid)))\n    train_data = lgb.Dataset(X_train, label=y_train, categorical_feature=cols_cat) # LightGBM\u7528\u306b\u30c7\u30fc\u30bf\u3092\u6574\u5f62\n    valid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature=cols_cat)\n    \n    # \u5b66\u7fd2\u3092\u5b9f\u884c\u3059\u308b\n    model = lgb.train(params, # \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n                      train_data, # \u5b66\u7fd2\u30c7\u30fc\u30bf\n                      150000, # \u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\u6700\u5927epoch\u6570, epoch = \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u56de\u6570\n                      valid_sets=[train_data, valid_data], # \u691c\u8a3c\u30c7\u30fc\u30bf\n                      verbose_eval=100, # 100 epoch \u3054\u3068\u306b\u7d4c\u904e\u3092\u8868\u793a\u3059\u308b\n                      early_stopping_rounds=150, # 150epoch\u7d9a\u3051\u3066\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u30ed\u30b9\u304c\u6e1b\u3089\u306a\u304b\u3063\u305f\u3089\u5b66\u7fd2\u3092\u4e2d\u65ad\u3059\u308b\n                     )\n    \n    # \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u884c\u3046\n    preds_valid[folds[fold][1]] = model.predict(X_valid, num_iteration=model.best_iteration) # \u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u3092\u5b9f\u884c\n    preds_test[fold] = model.predict(X_test, num_iteration=model.best_iteration)  # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u3092\u5b9f\u884c\n\n    # \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u8a18\u9332\n    tmp = pd.DataFrame()\n    tmp[\"feature\"] = cols_feature\n    tmp[\"importance\"] = model.feature_importance()\n    tmp[\"fold\"] = fold + 1\n    df_feature_importance = pd.concat([df_feature_importance, tmp], axis=0)\n","0204a649":"# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8868\u793a\n# \u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7d50\u679c\u306eAUC\u3092\u8a08\u7b97\u3059\u308b\nscore = metrics.roc_auc_score(df_train[col_target], preds_valid)\nprint (\"CV AUC: {:.6f}\".format(score))","06671612":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u8868\u793a\n# importance\u306f\u30e2\u30c7\u30eb\u304c\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3059\u308b\u306e\u306b\u305d\u306e\u5909\u6570\u3092\u5229\u7528\u3057\u305f\u56de\u6570\u304b\u3089\u5272\u308a\u51fa\u3055\u308c\u3066\u3044\u308b\n# \u5fc5\u305a\u3057\u3082\u5909\u6570\u304c\u4e88\u6e2c\u306b\u6709\u52b9\u304b\u3092\u8868\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\ndf_tmp = df_feature_importance.groupby('feature').agg(\"mean\").reset_index()\ndf_tmp = df_tmp.sort_values('importance', ascending=False)\ndf_tmp[['feature', 'importance']]","bc563a0c":"preds_test_mean = preds_test.mean(axis=0) # \u30e2\u30c7\u30eb\u30925\u500b\u4f5c\u3063\u305f\u306e\u3067\u4e88\u6e2c\u306f\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u306b5\u500b\u3042\u308b. \u3053\u308c\u3092\u5e73\u5747\u3059\u308b. \ndf_sub['died'] = preds_test_mean # \u4e88\u6e2c\u7d50\u679c\u3092\u4ee3\u5165\ndf_sub.to_csv(\"submission.csv\", index=None) # \u4fdd\u5b58\ndf_sub.head()","56347e27":"# \u524d\u51e6\u7406","c96b16b0":"# \u6539\u5584\u306e\u305f\u3081\u306e\u30a2\u30a4\u30c7\u30a2\n- \u7279\u5fb4\u91cf\u3092\u3055\u3089\u306b\u4f5c\u308b\n- \u7279\u5fb4\u91cf\u9078\u629e\u3092\u3059\u308b (\u7279\u5fb4\u91cf\u3092\u6e1b\u3089\u3059)\n- LightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\n- \u305d\u306e\u4ed6\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u7528\u3044\u308b\n- \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3092\u884c\u3046","8425b8aa":"# \u7279\u5fb4\u91cf\u4f5c\u6210","91ec4641":"# EDA (Explanatory Data Analysis, \u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u89e3\u6790)","b30e5cab":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210","4b504103":"# \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u4f5c\u6210","027f7273":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f"}}