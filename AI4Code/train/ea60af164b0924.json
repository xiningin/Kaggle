{"cell_type":{"fa725737":"code","ab30c0e1":"code","c5ace75f":"code","ec3f00e3":"code","98147d77":"code","85d25155":"code","3cb61a6d":"code","a25f30c9":"code","4f3a5ea5":"code","a6bf16f9":"code","6d67a10a":"code","d325c1e9":"code","dc23c35d":"code","7a7f6fa4":"code","ebfc6cb6":"code","0a7e98bf":"code","4666db14":"code","b26c51a6":"code","06d377a8":"code","0708353f":"markdown","d2a462d2":"markdown","8017a656":"markdown","7c0ef88d":"markdown","9278f499":"markdown","897f8726":"markdown","91387b81":"markdown","89469ce1":"markdown","b2bd5191":"markdown","212efb8f":"markdown","a501b659":"markdown","a894ea0f":"markdown","9078b88e":"markdown","43462a02":"markdown","1bbf8ba9":"markdown","b494b9f7":"markdown","12bf5fe2":"markdown","6da30244":"markdown","187bfb7a":"markdown","ffa157d0":"markdown","57f3df47":"markdown"},"source":{"fa725737":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression #Linear Regression \nfrom sklearn.neighbors import KNeighborsClassifier #KNN Algorithm\nfrom sklearn.model_selection import train_test_split #Trian and Test Split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nimport seaborn as sns\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ab30c0e1":"dataframe1 = pd.read_csv('..\/input\/column_2C_weka.csv') #read to file","c5ace75f":"print(dataframe1.columns) ","ec3f00e3":"print(dataframe1.info())","98147d77":"newBioDataFrame = dataframe1.loc[:,[\"sacral_slope\",\"pelvic_radius\"]]\nimport missingno as msno\nmsno.matrix(newBioDataFrame)\nplt.show()","85d25155":"msno.bar(newBioDataFrame)\nplt.show()","3cb61a6d":"dataframe1.head()","a25f30c9":"dataframe1.tail()","4f3a5ea5":"dataframe1.describe()","a6bf16f9":"trace1 = go.Box(\n    y = dataframe1.sacral_slope,\n    name = \"sacral_slope\",\n    marker = dict(color = \"red\")\n)\ntrace2 = go.Box(\n    y = dataframe1.pelvic_radius,\n    name = \"pelvic_radius\",\n    marker = dict(color = \"blue\")\n)\nconcatTrace = [trace1,trace2]\niplot(concatTrace)","6d67a10a":"dataFilter = dataframe1[dataframe1['class'] == 'Abnormal']\nlinear_regression = LinearRegression()\nx = dataFilter.pelvic_incidence.values.reshape(-1,1)\ny = dataFilter.sacral_slope.values.reshape(-1,1)\nlinear_regression.fit(x,y)\n\ny_head = linear_regression.predict(x)\n\nplt.figure(figsize=[15,15])\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\n\nplt.plot(x,y_head,color=\"green\",linewidth=2)\nplt.show()\n\nfrom sklearn.metrics import r2_score\nprint('R^2 score: ',r2_score(y,y_head))","d325c1e9":"Abnormal = dataframe1[dataframe1[\"class\"] == \"Abnormal\"]\nNormal = dataframe1[dataframe1[\"class\"] == \"Normal\"]\n\nplt.figure(figsize=(15,15))\nplt.scatter(Abnormal.pelvic_radius,Abnormal.lumbar_lordosis_angle,color=\"blue\",label=\"pelvic_radius\")\nplt.scatter(Normal.pelvic_radius,Normal.lumbar_lordosis_angle,color=\"lime\",label=\"lumbar_lordosis_angle\")\nplt.legend()\nplt.xlabel(\"pelvic_radius\")\nplt.ylabel(\"lumbar_lordosis_angle\")\nplt.show()","dc23c35d":"dataframe1[\"class\"] = [1 if(each == \"Abnormal\") else 0 for each in dataframe1[\"class\"]]\ny = dataframe1[\"class\"].values\nx_data = dataframe1.drop([\"class\"],axis=1)\n\n#Normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data))\n\n#Train and Test values\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)","7a7f6fa4":"score_list = []\nfor eachs in range(1,15):\n    knnAlgorithm1 = KNeighborsClassifier(n_neighbors = eachs)\n    knnAlgorithm1.fit(x_train,y_train) #Modeli e\u011fitiyorum\n    score_list.append(knnAlgorithm1.score(x_test,y_test))\nplt.figure(figsize=(15,15))\nplt.plot(range(1,15),score_list)\nplt.xlabel(\"K values\")\nplt.ylabel(\"Accuracy\")\nplt.show()","ebfc6cb6":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nsection = {\"n_neighbors\":np.arange(1,50)}\nknnAlgorithm2 = KNeighborsClassifier()\nknnAlgorithm_cv = GridSearchCV(knnAlgorithm2,section,cv = 10)\nknnAlgorithm_cv.fit(x_train,y_train)\nprint(\"Best K value: \", knnAlgorithm_cv.best_params_)\nprint(\"And the best guess score: \",knnAlgorithm_cv.best_score_)","0a7e98bf":"knnAlgorithm = KNeighborsClassifier(n_neighbors=13)\nknnAlgorithm.fit(x_train,y_train)\npredict = knnAlgorithm.predict(x_test)\nprint(\"{} nn Score {}: \".format(13,knnAlgorithm.score(x_test,y_test)))","4666db14":"truePredict = 0\nfalsePredict = 0\nfor p in range(len(predict)):\n    for y in range(p,len(y_test)):\n        if (predict[p] == y_test[y]):\n            truePredict = truePredict +1\n            break\n        else:\n            falsePredict = falsePredict +1\n            break\nprint(\"True Predict: \",truePredict)\nprint(\"False Predict\",falsePredict)\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Predict: \",predict)\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"y_test: \",y_test)","b26c51a6":"x_Axis = [\"True\",\"False\"]\ny_Axis = [truePredict,falsePredict]\n\nplt.figure(figsize=(15,15))\nsns.barplot(x=x_Axis,y=y_Axis,palette = sns.cubehelix_palette(len(x_Axis)))\nplt.xlabel(\"Disease Class\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Abnormal and normal type diseases\")\nplt.show()","06d377a8":"conf_matrix = confusion_matrix(y_test,predict)\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(conf_matrix,annot=True,linewidths=0.5,linecolor=\"white\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"predict\")\nplt.show()","0708353f":"**Notes on the KNN algorithm**\n\nThe KNN algorithm predicts which class the new data will belong to according to previously known graphs of classes A and B  \n\n> In our example, **pelvic_radius** and **lumbar_lordosis_angle** correspond to class A and B, respectively.\n\n> In our example, the ratio of the values we have correctly guessed is **0.7849462365591398**. This may be because our training datas are very close to each other. **You can see this in the above chart**","d2a462d2":"**Please see below**\n\n> *Black: Available Data*\n> \n> *White: Missing Data*\n> \n> *sacral_slope: Column name1*\n> \n> *pelvic_radius: Column name2*\n\n**NOTE: No white band because there is no NaN value**","8017a656":"**Please see below**\n\n*I use the following **KNN** algorithm to find out which class my test data belongs to*\n\nNOTE: For detailed description of the algorithm **https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners** (8.Chapter)\n\n**What is fit?** Use to train our model \n\n**What is predict?** *Take test data and make estimates based on the training received*\n\n**Notice That:** When K is 13, the estimated correct ratio: **0.7849462365591398**","7c0ef88d":"**Please see below**\n\n> *I collapsed the dataset according to the abnormal and normal key words*\n\n*I then plotted a graph based on the headings **pelvic_radius** and **lumbar_lordosis_angle**.*","9278f499":"**Please see below**\n> *Graph of True and False Estimates*","897f8726":"**Please see below**\n\n> *Let's look at the names of the column of our data*\n\n*It is important to know the names of the types that can cause problems with column names*","91387b81":"**Please see below**\n\n***How do I choose the best K value in the KNN algorithm?***\n*I do this with the following lines of code*\n\n> The best value is like **13** ","89469ce1":"**Please see below**\n\n> **The first 10 data in the data set**","b2bd5191":"**Please see below**\n\n**Let's read our file's information**\n\n> **sacral_slope andpelvic_radius values are very important for this kernel. Let's see if I have NaN(Missing Value) values in my set? We see this in the information screen below. However, it will be more useful to see visually.**","212efb8f":"**Please see below**\n\n> **Same as above but This is shown as a bar plot**","a501b659":"**Please see below**\n\n> **if you apply Linear Regression to the following graph**","a894ea0f":"**Content**\n\n* **Linear Regression**\n* **KNN Algorithm**\n     * *Grid Search Cross Validation*\n* **Data Visualization**\n* **Confusion Matrix**\n\n> *Finding linear equations between two properties using **Linear Regression***\n> \n> *With the **KNN algorithm**, it is determined whether the non-classifiable data belong to the predetermined 2 classes.*\n> \n> **Grid Search Cross Validation**  *finds the best* **K** *value*\n> \n> **Data visualization** *enables data visualization*\n> \n> **Confusion Matrix** *It specifies which values are incorrectly estimated and which values are estimated correctly.*","9078b88e":"**Please see below**\n\n**Notes on Grid Search Cross Validation**\n> One of the important problems in the **KNN** algorithm is that **K** is chosen.\n> \n> *In the above code line*, we can choose the value of **K** by trial. Of course we have to determine the *range*\n> \n> **Grid Search Cross-Validation algorithm** can be used to find the best **K** value\n> \n> The best **K** value from 1 to 50 is 31 dir\n\n*NOTICE THAT: We will still use the old value instead of completely changing the codes*","43462a02":"**Please see below**\n\nIf we calculate the ratio between **0.784** and **93**, the result is **72.912**. Approximately **73** is accepted.\n\nA list of estimated values is available below **(Predict:)**\nThe list of actual values is available below **(y_test:)**\n\n**Notice That:** A simple line of code found **73** correct guesses and 20 false predictions **Here, 73 matches the above ratio**","1bbf8ba9":"**Please see below**\n\n> *Abnormal and Normal values are converted from characters to integer.* (**y** values must be in integer type)\n\n**What is normalization:**\n*When there is a lot of difference between the data, the data is handled in a single order.*\n> If we have such values in my dataset, we can get an inaccurate analysis. So it is important to normalize\n\n**What is train data:**\n*I am making sure that my model knows the data by separating the data in the dataset*\n\n> Next, I would like my model to estimate the test data using test data.","b494b9f7":"**Please see below**\n\n***Notes on Confusion Matrix***\n\n> 1. *It specifies which values are incorrectly estimated and which values are estimated correctly.*\n> 2. *The complexity matrix is used to show us what our estimates are*\n\n*NOTE: The above code is an example of a confusion matrix without using the sklearn library.*\n\nNOTE: **Number 1: Abnormal **  ,  **Number 0: Normal**\n","12bf5fe2":"**Please see below**\n\n*Numerical Analysis*\n\n> The maximum values in the Pelvik_radius column are too high","6da30244":"**Please see below**\n\n> **We used a linear regression method to generate a straight line**","187bfb7a":"**Notice That**\n\n*The features used in the CNN algorithm with Linear Regression are different.*","ffa157d0":"**Notes on Linear Regression**\n\n> Linear Regression,can be thought of as a simple reduction(Regression) of the dataset on complex computations and measurements of many. It is here, however, to be able to derive such an equilibrium equation from the values of the data in the data set.\n\n*R squared tells you how good the \"fit\" of your model is or better said how well the line you might draw through your points fits. Its a regression thing*\n\nThe score of R ^ 2 was found to be **0.6458410481075871**  **This value tells us that we need to improve our model**\n","57f3df47":"**Please see below**\n\n> **The last 10 data in the data set**"}}