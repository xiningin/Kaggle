{"cell_type":{"bf02b635":"code","4e87f248":"code","5a2fd2d1":"code","1ea9f4c8":"code","93e10a18":"code","5e892c8d":"code","a56b2621":"code","98a684a7":"code","e2ff1c3d":"code","64c7148b":"code","165d0d51":"code","a4e90c41":"code","c88fc4de":"code","83edaf1f":"code","64a1995e":"code","b07bb84f":"code","0848cf63":"code","e56ffb7f":"code","b2ca87d4":"code","825f6c69":"code","bc0a1382":"code","4617bd12":"code","b4a19d12":"code","e8ee9218":"code","3f4378e9":"code","a9f8edd5":"code","538ced0a":"code","45c6cd7e":"code","a87ba6fa":"code","083aaaff":"code","9aec7d9f":"code","b3586e94":"code","a55007ca":"code","5ddaec83":"code","ceb092f6":"code","a80543ac":"code","d8f4f417":"code","3b935133":"code","b3ad34a0":"code","a70f2a25":"code","ab09a718":"code","865d011d":"code","03d4a121":"code","71fac6a0":"code","ba822152":"code","7faac763":"code","ea615105":"code","5268d465":"code","bd894034":"code","e81a10d6":"code","da214eb9":"code","926adae8":"code","9e44fd04":"code","4726f594":"code","3a286aca":"code","ac3e5a18":"code","b68a8afd":"code","e959ba82":"code","e91f4a16":"code","eeee98fc":"code","8fc65efd":"code","2cb5b096":"code","112e63be":"code","315192d0":"code","2e749b26":"code","54f13d9f":"code","b152ed08":"code","8578e70e":"code","2f2bbf39":"code","b1943559":"code","8923a78e":"code","0c92e75d":"code","f1e2fe18":"code","dd2aa4e4":"code","55da4036":"code","277e555d":"code","47d6de88":"code","5552a991":"code","94d6ea10":"code","2ea19d23":"code","a5c7bbcb":"code","df3b09ac":"code","5034c122":"code","4aba1bf0":"code","3c1fcbf3":"code","fbdb87cc":"code","de64b222":"code","8dacb174":"code","7090976e":"code","5a65213a":"code","27c6eeb6":"code","92e842ad":"code","b3fe9784":"code","c5866fa3":"code","2060fa3e":"code","de1d3ddb":"code","3bd80f11":"code","b66a385e":"code","84292690":"code","fc98a76e":"code","00e5a70e":"code","212a9ab2":"code","ef75041f":"code","85e62452":"code","e9505e52":"code","9403b372":"code","4c4f41ff":"code","493bf1a9":"markdown","17412dfd":"markdown","7b366318":"markdown","7fec66a3":"markdown","a43aff7f":"markdown","b5f962ee":"markdown","2794ad49":"markdown","02ed6eae":"markdown","0a17c292":"markdown","47c22c3c":"markdown","083c06be":"markdown","6f2fa924":"markdown","46dd75d1":"markdown","9ac411b9":"markdown","f7a45882":"markdown","c825c069":"markdown","2ee0a088":"markdown","bff5c1cb":"markdown","87faa4f6":"markdown","549b8371":"markdown","f65142cb":"markdown","89e55c09":"markdown","047a0f3a":"markdown","263dd062":"markdown","c9ce61cc":"markdown","6c4cd2a6":"markdown","6c73a54b":"markdown","5658d461":"markdown","e49c7682":"markdown","472e9215":"markdown","cb1adf73":"markdown","1a0780ea":"markdown","ec285e7e":"markdown","2cdfb379":"markdown","dd150966":"markdown","488bb277":"markdown","64bd050a":"markdown","68ed9b45":"markdown","33778bab":"markdown","8e21c9fb":"markdown","3ec5a861":"markdown","730294c4":"markdown","77da0516":"markdown","0c3dd999":"markdown","cae906ae":"markdown","b1b535aa":"markdown","b7aebce7":"markdown","e7c56543":"markdown","88f2abee":"markdown","29523d17":"markdown","89d86249":"markdown","ae0d06c1":"markdown","63250d73":"markdown","4debaef1":"markdown","4ce2be00":"markdown","87b6933b":"markdown","c62a2fc1":"markdown","24c3205b":"markdown","aea4890d":"markdown","26e2714f":"markdown","b4be8bab":"markdown","ced19fc1":"markdown","a7384096":"markdown"},"source":{"bf02b635":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px \nimport warnings\nwarnings.filterwarnings('ignore')","4e87f248":"!pip install openpyxl","5a2fd2d1":"train=pd.read_excel('..\/input\/doctor-fees-prediction\/Final_Train.xlsx')\ntest=pd.read_excel('..\/input\/doctor-fees-prediction\/Final_Test.xlsx')","1ea9f4c8":"train.head()","93e10a18":"test.head()","5e892c8d":"#We will combine train and test data for better Analysis\ntrain['source']='train'\ntest['source']='test'\ntest['Fees']=0.0\n\n#Concatenating the data in df variable\ndf=pd.concat([train,test],sort=False,ignore_index=True)","a56b2621":"df.head()","98a684a7":"df.shape","e2ff1c3d":"df.nunique()","64c7148b":"df.isnull().sum()","165d0d51":"df.dtypes","a4e90c41":"df['No_of_qualifications']=df['Qualification'].apply(lambda x: float(len(x.split(','))))","c88fc4de":"df.drop('Qualification',axis=1,inplace=True)","83edaf1f":"df['Experience']=df['Experience'].apply(lambda x: float(x[:2]))","64a1995e":"def rat(x):\n    if x is np.NaN:\n        return x\n    else:\n        return float(x[:-1])\n\ndf['Rating']=df['Rating'].apply(rat)","b07bb84f":"df['Place'].fillna('Unknown, Unknown',inplace=True)","0848cf63":"def A(x):\n    if ',' in x:\n        x=x.split(',')\n        return x[0]\n    else:\n        return 'Unknown'\n\ndf['Location']=df['Place'].apply(A)","e56ffb7f":"def C(x):\n    if ',' in x:\n        x=x.split(',')\n        return x[1].strip()\n    else:\n        return x\n\ndf['City']=df['Place'].apply(C)","b2ca87d4":"df.drop('Place',axis=1,inplace=True)","825f6c69":"df['Miscellaneous_Info'].fillna('0.0',inplace=True)","bc0a1382":"def func(x):\n    if x!='0.0':\n        x='1.0'\n    x=float(x)\n    return x\n    \n\ndf['Miscellaneous_Info']=df['Miscellaneous_Info'].apply(func)","4617bd12":"df.head()","b4a19d12":"#Separating categorical and continuous features\ncat=[i for i in df.columns if df[i].nunique()<12 and i!='source']\ncont=[i for i in df.columns if df[i].nunique()>12]","e8ee9218":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['Profile'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.ylabel('')\nplt.subplot(1,2,2)\nsns.countplot(x='Profile',data=df)\nplt.xticks(rotation=45)\ndf['Profile'].value_counts()","3f4378e9":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['Miscellaneous_Info'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.ylabel('')\nplt.subplot(1,2,2)\nsns.countplot(x='Miscellaneous_Info',data=df)\nplt.xticks(rotation=45)\ndf['Miscellaneous_Info'].value_counts()","a9f8edd5":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['No_of_qualifications'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.ylabel('')\nplt.subplot(1,2,2)\nsns.countplot(x='No_of_qualifications',data=df)\nplt.xticks(rotation=45)\ndf['No_of_qualifications'].value_counts()","538ced0a":"plt.figure(figsize=(15,8))\nsns.countplot(x='City',data=df)\ndf['City'].value_counts()","45c6cd7e":"plt.figure(figsize=(8,6))\nsns.histplot(df['Fees'],kde=True,color='k')\nprint('Minimum',df['Fees'].min())\nprint('Maximum',df['Fees'].max())","a87ba6fa":"plt.figure(figsize=(8,6))\nsns.histplot(df['Experience'],kde=True,color='k')\nprint('Minimum',df['Experience'].min())\nprint('Maximum',df['Experience'].max())","083aaaff":"plt.figure(figsize=(8,6))\nsns.histplot(df['Rating'],kde=True,color='k')\nprint('Minimum',df['Rating'].min())\nprint('Maximum',df['Rating'].max())","9aec7d9f":"for i in cont:\n    if i!='Location':\n        sns.boxplot(df[i])\n        plt.figure()\n        ","b3586e94":"plt.figure(figsize=(12,6))\nsns.boxenplot(x='Profile',y='Fees',data=df)","a55007ca":"plt.figure(figsize=(8,6))\nsns.boxenplot(x='Miscellaneous_Info',y='Fees',data=df)","5ddaec83":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='No_of_qualifications',y='Fees',data=df)","ceb092f6":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='City',y='Fees',data=df)\nplt.xticks(rotation=45)","a80543ac":"sns.lmplot(x='Experience',y='Fees',data=df,height=6, aspect=1.2)","d8f4f417":"sns.lmplot(x='Rating',y='Fees',data=df,height=6, aspect=1.2)","3b935133":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Profile',y='City',data=df)","b3ad34a0":"plt.figure(figsize=(15,6))\nsns.violinplot(x='Profile',y='Miscellaneous_Info',data=df)","a70f2a25":"plt.figure(figsize=(15,6))\nsns.violinplot(x='Profile',y='No_of_qualifications',data=df)","ab09a718":"sns.lmplot(x='Rating',y='Experience',data=df,height=6, aspect=1.2)","865d011d":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Miscellaneous_Info',y='Rating',data=df,marker='D',size=10)","03d4a121":"plt.figure(figsize=(12,6))\nsns.stripplot(x='No_of_qualifications',y='Experience',data=df)","71fac6a0":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Profile',y='Experience',data=df)","ba822152":"data=df.groupby(['Experience','Profile']).apply(lambda x:x['Rating'].count()).reset_index(name='Rating')\npx.line(data,x='Experience',y='Rating',color='Profile',title='Age of individuals by Hours of work in the income category  ')","7faac763":"plt.figure(figsize=(15,6))\nsns.barplot(x='Profile',y='Fees',hue='Miscellaneous_Info',data=df)","ea615105":"#We add another column \"Fee_category\" by dividing fees into several categories.\ndef category(x):\n    if x>=0 and x<100:\n        return '0-100'\n    elif x>=100 and x<250:\n        return '100-250'\n    elif x>=250 and x<400:\n        return '250-400'\n    elif x>=400 and x<600:\n        return '400-600'\n    elif x>=600 and x<800:\n        return '600-800'\n    else:\n        return '800-950'\n\ndf['Fee_category']=df['Fees'].apply(category)","5268d465":"plt.figure(figsize=(12,12))\nsns.scatterplot(x='Rating',y='Experience',hue='Fee_category',data=df,marker='D')","bd894034":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(),annot=True,cmap='Greys')","e81a10d6":"df.isnull().sum()","da214eb9":"#We fill the null values of ratings with -999\ndf['Rating'].fillna(-999,inplace=True)","926adae8":"sns.heatmap(df.isnull())","9e44fd04":"df['Experience']=np.sqrt(df['Experience'])","4726f594":"sns.distplot(df['Experience'],color='m', kde_kws={\"color\": \"k\"})\nprint(df['Experience'].skew())","3a286aca":"from sklearn.preprocessing import OrdinalEncoder\no=OrdinalEncoder()","ac3e5a18":"for i in df.columns:\n    if df[i].dtypes=='O' and i!='source':\n        df[i]=o.fit_transform(df[i].values.reshape(-1,1))","b68a8afd":"from sklearn.preprocessing import MinMaxScaler\nm=MinMaxScaler()","e959ba82":"for i in df.columns:\n    if i=='source' or i=='Fees':\n        pass\n    else:\n        df[i]=m.fit_transform(df[i].values.reshape(-1,1))","e91f4a16":"train = df.loc[df['source']=='train']\ntest = df.loc[df['source']=='test']","eeee98fc":"train.drop('source',axis=1,inplace=True)\ntest.drop(['source','Fees'],axis=1,inplace=True)","8fc65efd":"train=train.reset_index(drop=True)\ntest=test.reset_index(drop=True)","2cb5b096":"train","112e63be":"test","315192d0":"#Separating dependent and independent variables from Dataframe\nx=train.copy()\nx.drop('Fees',axis=1,inplace=True)\ny=train['Fees']","2e749b26":"from sklearn.model_selection import train_test_split,cross_val_score","54f13d9f":"#importing models\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom xgboost import XGBRegressor","b152ed08":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","8578e70e":"#Choosing the best random state using Logistic regression\ndef randomstate(a,b):\n    maxx=10000000000000\n    for state in range(1,201):\n        xtrain,xtest,ytrain,ytest=train_test_split(a,b,test_size=0.25,random_state=state)\n        model=LinearRegression()\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        mse=mean_squared_error(p,ytest)\n        if maxx>mse:\n            maxx=mse\n            j=state\n    return j","2f2bbf39":"#Creating list of models and another list mapped to their names\nmodels=[KNeighborsRegressor(),SVR(),LinearRegression(),Lasso(),Ridge(),ElasticNet(),DecisionTreeRegressor(),\n       RandomForestRegressor(),AdaBoostRegressor(),GradientBoostingRegressor(),XGBRegressor()]\n\nnames=['KNeighborsRegressor','SVR','LinearRegression','Lasso','Ridge','ElasticNet','DecisionTreeRegressor',\n       'RandomForestRegressor','AdaBoostRegressor','GradientBoostingRegressor','XGBRegressor']","b1943559":"def createmodels(model_list,xtrain,xtest,ytrain,ytest,n):\n    name=[]\n    meanabs=[]\n    meansqd=[]\n    rootmeansqd=[]\n    r2=[]\n    mcv=[]\n    \n    #Creating models\n    for i,model in enumerate(model_list):\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        score=cross_val_score(m,x,y,scoring='r2',cv=5)\n        \n        #Calculating scores of the model and appending them to a list\n        name.append(n[i])\n        meanabs.append(np.round(mean_absolute_error(p,ytest),4))\n        meansqd.append(np.round(mean_squared_error(p,ytest),4))\n        rootmeansqd.append(np.round(np.sqrt(mean_squared_error(p,ytest)),4))\n        r2.append(np.round(r2_score(p,ytest),2))\n    \n    #Creating Dataframe\n    data=pd.DataFrame()\n    data['Model']=name\n    data['Mean Absolute Error']=meanabs\n    data['Mean Squared Error']=meansqd\n    data['Root Mean Squared Error']=rootmeansqd\n    data['R2 Score']=r2\n    data.set_index('Model',inplace = True)\n    return data        ","8923a78e":"xtrain,xvalid,ytrain,yvalid=train_test_split(x,y,test_size=0.25,random_state=randomstate(x,y))","0c92e75d":"print('---------------------------------------Performance of Training Data--------------------------------------------')\ncreatemodels(models,x,x,y,y,names)","f1e2fe18":"print('---------------------------------------Performance of Validation Data--------------------------------------------')\ncreatemodels(models,xtrain,xvalid,ytrain,yvalid,names)","dd2aa4e4":"from sklearn.model_selection import GridSearchCV","55da4036":"params={'n_estimators':[100, 300, 500, 700],\n        'min_samples_split':[1,2,3,4],\n        'min_samples_leaf':[1,2,3,4],\n        'max_depth':[None,1,2,3,4,5,6,7,8,9,10,15,20,25,30,35,40]}\n","277e555d":"g=GridSearchCV(RandomForestRegressor(),params,cv=5)","47d6de88":"g.fit(xtrain,ytrain)","5552a991":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","94d6ea10":"m=RandomForestRegressor(max_depth=15, min_samples_leaf=4, min_samples_split=4,n_estimators=500)\nm.fit(xtrain,ytrain)\np=m.predict(xvalid)","2ea19d23":"score=cross_val_score(m,x,y,cv=5)","a5c7bbcb":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","df3b09ac":"from sklearn.model_selection import RandomizedSearchCV","5034c122":"params={\n     \"learning_rate\"    : [0.001,0.05, 0.10 ] ,\n     \"max_depth\"        : [ 5, 6, 8, 10, 12, 15,20,25,30,35,40],\n     \"min_child_weight\" : [ 1, 3, 5, 7,10],\n     \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4,10],\n     \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    }","4aba1bf0":"g=RandomizedSearchCV(XGBRegressor(verbosity=0),params,cv=5)","3c1fcbf3":"g.fit(xtrain,ytrain)","fbdb87cc":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","de64b222":"m=XGBRegressor(colsample_bytree= 0.7,gamma=0.1,learning_rate=0.1,max_depth=6, min_child_weight=5)\nm.fit(xtrain,ytrain)\np=m.predict(xvalid)","8dacb174":"score=cross_val_score(m,x,y,cv=5)","7090976e":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","5a65213a":"params={'base_estimator':[LinearRegression(),DecisionTreeRegressor(),KNeighborsRegressor()],\n      'n_estimators':[50, 100, 150, 200, 250, 300],\n      'learning_rate':[0.0001,0.001,0.01,.1,1,2,5,10]}","27c6eeb6":"g=RandomizedSearchCV(AdaBoostRegressor(),params,cv=5)","92e842ad":"g.fit(xtrain,ytrain)","b3fe9784":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","c5866fa3":"m=AdaBoostRegressor(base_estimator=LinearRegression(), learning_rate=0.001,n_estimators=250)\nm.fit(xtrain,ytrain)\np=m.predict(xvalid)","2060fa3e":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","de1d3ddb":"model=RandomForestRegressor(max_depth=15, min_samples_leaf=4, min_samples_split=4,n_estimators=500)\nmodel.fit(xtrain,ytrain)\np=model.predict(xvalid)\nscore=cross_val_score(m,x,y,cv=10)","3bd80f11":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","b66a385e":"plt.scatter(x=yvalid,y=p,color='r')\nplt.plot(yvalid,yvalid,color='b')\nplt.xlabel('Actual Fees')\nplt.ylabel('Predicted Fees')\nplt.title('Random Forest Regressor')","84292690":"import joblib\njoblib.dump(model,'Doctor_fees.obj')","fc98a76e":"predictions=model.predict(test)","00e5a70e":"predictions","212a9ab2":"predictions=pd.DataFrame(predictions,columns=['Fees'])","ef75041f":"predictions.head()","85e62452":"#Since the fees is in the multiples of 50 we change are predictions to the closest multiple of 50\ndef closest(x):\n    d=x\/50\n    d=round(d)\n    d*=50\n    return d","e9505e52":"import math\npredictions['Fees']=predictions['Fees'].apply(closest)","9403b372":"predictions.head()","4c4f41ff":"predictions.to_csv('test_predictions.csv')","493bf1a9":"# Predicting the Dataset","17412dfd":"##### AdaBoost","7b366318":"Decision Tree is giving very good results for the training data but dosent seem to work so good with the validation data. Random Forest Regressor and Xtreme Gradient Boosting dosent seem to overfit and are giving a decent result. So we further perform Hyperparameter Tuning on them.","7fec66a3":"Majority of the doctors have 2 qualifications, few doctors have qualifications greater than 6 also. And there is one doctor with 17 qualifications","a43aff7f":"![](https:\/\/www.tvn.md\/wp-content\/uploads\/2021\/06\/8e181fb9582fb69e9b4afa954d9bc76c.jpg)","b5f962ee":"Data gives much better information now.","2794ad49":"Random Forest gives us the best results with minimum error and and best cross validation mean score. So we choose it as our final model.","02ed6eae":"Doctors only with dermatologists profile have not provided there city whereas all the other have provided it. Dentist and General Medicine doctors belong from almost all the cities. Major cities such as delhi chennai mumbai and hyderabad have all tyoes of doctors available","0a17c292":"There are outliers present in Experience and Rating column","47c22c3c":"###### Removing Skewness from Experience column","083c06be":"##### Preparing Qualification column","6f2fa924":"ENT Specialist and dermatologists have the highest mean qualifications while there are outliers in denstist category where they have qualifications upto 17.","46dd75d1":"##### Filling Null Values","9ac411b9":"##### Cleaning Experience column","f7a45882":"# Modelling Phase","c825c069":"There is less dependency of Experience with fees.","2ee0a088":"All the columns except the label column are of object type and labe column is of float type.","bff5c1cb":"Experience and rating have a negative correlation. Experienced doctors dosent seem to take ratings from others.","87faa4f6":"Experience of doctors varies from 0 to 66. Majority of the doctors have experience in the range 5yrs to 15yrs. Data is skewed to the right.","549b8371":"There are 56.5% doctors about whom miscellaneous info is provided.","f65142cb":"#### Conclusion","89e55c09":"###### Encoding Categorical Columns","047a0f3a":"##### Since the data is unclean, we need to clean and prepare the data for processing.","263dd062":"Doctors have provided miscellaneous info charge more fees than who havent. Most fees is charged by demotologists whi have provided miscellaneous info.","c9ce61cc":"### Multivariate Analysis","6c4cd2a6":"Ayurveda doctors are the highest in no. who have not provided miscellaneous information and Dentist are the least ones, followed by dermatologists.","6c73a54b":"There are no identifier or constant columns","5658d461":"Importing neccessary libraries and modules","e49c7682":"Most of the doctors have 100 ratings while there is one doctor with minimum rating as 7. Most of the ratings lie in the range 90 to 100. Data is highky skewed to the left side.","472e9215":"There are missing values in the dataframe","cb1adf73":"# Evaluation Metrics","1a0780ea":"# Hyperparameter Tuning","ec285e7e":"Rating column has 4392 missing values","2cdfb379":"###### Scaling the DataFrame","dd150966":"### Bivariate Analysis","488bb277":"Fees shows positive correlation with No. of Qualifications and miscellaneous info. There is less correlation between independent features.","64bd050a":"Doctors with higher qualifications seem to have less experience, which is logical as many years goes away during studies and they have less time to practice.","68ed9b45":"No null values remain","33778bab":"Dataframe has 7948 rows(combining train and test data) and 8 columns including source column.","8e21c9fb":"No. of doctors charging fees in the range 0 to 100 is the most. Highest fees is usually charged by doctors who have less rating and experience less than 40. ","3ec5a861":"While few Mumbai doctors charge very high fees but there mean is quite low whereas Doctors from Chennai are the most expensive ones followed by Delhi.","730294c4":"# Feature Engineering","77da0516":"Majority of Doctors belong from Banglore Delhi and Mumbai. ","0c3dd999":"# EDA","cae906ae":"##### Preparing Place column","b1b535aa":"General Medicine doctors have the highest experience, followed by ENT specialists, least experienced is seen in Homeopaths who seem to retire early.","b7aebce7":"##### Preparing Miscellaneous Info","e7c56543":"As the number of qualifications of doctors increase, So does there fees increases, but after 8 qualifications fees seem to decrease.","88f2abee":"##### Preparing Rating column","29523d17":"There are more no. of doctors who have provided ratings as well as miscellaneous infor whereas doctors providing only ratings are less.","89d86249":"##### Extreme Gradient Boost","ae0d06c1":"# Finalizing the model","63250d73":"As the Rating seem to increase Fees decreases. This reason could be because of the no. people who have given feedback as rating does not only depend on percentage but also on the number of people who have given ratings.","4debaef1":"Doctors who have provided miscellaneous info charge more than doctors who haven't.","4ce2be00":"Most of the Doctors are dentist followed by general medicine. ENT speacialists are rare.","87b6933b":"# Saving the Model","c62a2fc1":"There are some doctors who do not even charge fees, while some charge more than 900. Majority of the doctors charge fees in the range 0 to 200. ","24c3205b":"##### Random Forest","aea4890d":"# **Please Upvote if you like my work. Thanks!!!**","26e2714f":"ENT Specialist and Dermatologists have the highest mean fees as compared to doctors with other profile while Ayurveda doctors charge the least mean fees as compared to others.","b4be8bab":"###### Separating the data frame into train and test","ced19fc1":"# Data Preparation","a7384096":"Doctors with less experience have higher ratings. Highest ratings are given to dentistis followed by dermatologists. There are no ratings given to doctors who have experience more than 50 years of age."}}