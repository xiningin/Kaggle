{"cell_type":{"ccdda507":"code","42b4f97a":"code","9d6f8238":"code","5b6e66c1":"code","da7dde5e":"code","89ba0aa9":"code","7bfbe051":"code","85e9cd9f":"code","955e38e8":"code","6a47312a":"code","4d7c766e":"code","63129a85":"code","6e372dc4":"code","dc48b54b":"code","0425510a":"code","b3a0d402":"code","14b3e979":"code","4b369faf":"code","dd78661f":"code","e555ae5f":"code","e58bd709":"code","5e4b5d2e":"code","f1dc811f":"code","35a8de91":"markdown","6ed579cd":"markdown","a982f92f":"markdown","b9b26e8f":"markdown","b01d7667":"markdown","84e3f1cc":"markdown","1d2cef50":"markdown","3da33487":"markdown","50905e24":"markdown","eff826f7":"markdown","12c98b0a":"markdown","ef7d0e72":"markdown"},"source":{"ccdda507":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42b4f97a":"import re # regular expression libary.\nimport nltk # Natural Language toolkit\nnltk.download(\"stopwords\")  #downloading stopwords\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp","9d6f8238":"from colorama import Fore, Style\n\nnRowsRead = 1000 # specify 'None' if want to read whole file\n# ham_lyrics.csv has 3634 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/bad-password\/users.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'bad-password\/users.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()\nprint(Fore.MAGENTA + 'Data shape: ',Style.RESET_ALL,df.shape)\ndf","5b6e66c1":"#Codes by Erdal Nayir https:\/\/www.kaggle.com\/erdal002\/natural-language-processing\/comments\n\nbad_list=[]\n\nfor bad in df.password:\n    bad=re.sub(\"[^a-zA-z]\",\" \",bad) # if expression in the sentence is not a word then this code change them to space\n    bad=bad.lower() # turns all word in the sentence into lowercase.\n    bad=nltk.word_tokenize(bad) # splits the words that are in the sentence from each other.\n    lemma=nlp.WordNetLemmatizer()\n    bad=[lemma.lemmatize(word) for word in bad] # this code finds the root of the word for a word in the sentence and change them to their root form.\n    bad=\" \".join(bad)\n    bad_list.append(bad) # store sentences in list","da7dde5e":"#Codes by Erdal Nayir https:\/\/www.kaggle.com\/erdal002\/natural-language-processing\/comments\n\nfrom sklearn.feature_extraction.text import CountVectorizer #Bag of Words\n\nmax_features=500 # \"number\" most common(used) words in bad\n\ncount_vectorizer=CountVectorizer(max_features=max_features,stop_words=\"english\") # stop words will be dropped by stopwords command\n\nsparce_matrix=count_vectorizer.fit_transform(bad_list).toarray()# this code will create matrix that consist of 0 and 1.","89ba0aa9":"sparce_matrix.shape ","7bfbe051":"sparce_matrix","85e9cd9f":"print(\"Top {} the most used word in Bad Password: {}\".format(max_features,count_vectorizer.get_feature_names()))","955e38e8":"data=pd.DataFrame(count_vectorizer.get_feature_names(),columns=[\"Words\"])","6a47312a":"data.head()","4d7c766e":"from wordcloud import WordCloud \nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(12,12))\nwordcloud=WordCloud(background_color=\"pink\",width=1024,height=768).generate(\" \".join(data.Words[100:]))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","63129a85":"df.password.value_counts()","6e372dc4":"X=sparce_matrix\ny=df.password","dc48b54b":"from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report,log_loss,precision_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import roc_auc_score,roc_curve\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nprint(\"x_train\",X_train.shape)\nprint(\"x_test\",X_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","0425510a":"from sklearn.svm import SVC\n\nlgbm_model=LGBMClassifier()\n\nlgbm_model.fit(X_train,y_train)","b3a0d402":"y_pred=lgbm_model.predict(X_test)","14b3e979":"print(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","4b369faf":"xgb=XGBClassifier()\nxgb_model=xgb.fit(X_train,y_train)","dd78661f":"y_pred=xgb_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","e555ae5f":"from sklearn.naive_bayes import BernoulliNB\n\nnb=GaussianNB()\nnb2=BernoulliNB()\n\nnb_model=nb.fit(X_train,y_train)\nnb2_model=nb2.fit(X_train,y_train)\ny_pred=nb_model.predict(X_test)\ny_pred2=nb2_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))\nprint(\"**************************************************************\")\nprint(\"Accuracy_NB2:\",accuracy_score(y_test, y_pred2))\nprint(\"Precision_NB2:\",precision_score(y_test, y_pred2,average=\"micro\"))","e58bd709":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf_model=RandomForestClassifier(random_state=42)\nrf_model.fit(X_train,y_train)","5e4b5d2e":"y_pred=rf_model.predict(X_test)\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","f1dc811f":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Choose better your Password, @mpwolke is Here.' )","35a8de91":"<font color=\"#C30947\"> Bag of Words <\/font>","6ed579cd":"<font color=\"#C30947\"> Preproccesing and Cleaning Data <\/font>","a982f92f":"<font color=\"#8f34eb\"> XGBM classifier <\/font>","b9b26e8f":"<font color=\"#8f34eb\"> Naive Bayes Classifier <\/font>","b01d7667":"# <font color=\"#E74C3C\"> 10 Bad Password Habits: <\/font>\n\n\n\nIncluding any part of your name in your password (like \u2018henrik19\u2019)\n\nUsing the characters, in order, on the first row of your keyboard (\u2018qwerty\u2019)\n\nIncluding your birthday, or other meaningful numbers (worst of all your social security number)\n\nChoosing \u2018password\u2019 as your password.\n\nUsing the same password on multiple websites, or cycling between a handful of passwords.\n\nUsing all lowercase letters (mixing lowercase and capital letters makes it harder to guess).\n\nStoring passwords in memory, on paper, or anywhere else they could be easily lost and\/or stolen.\n\nNeglecting to change your passwords for more than 6 months.\n\nSharing your password too frequently or with people who you don\u2019t trust 110%.\n\nStoring your password on your browser (especially on a mobile device that you might lend or lose!)\nhttps:\/\/www.plixer.com\/blog\/10-bad-password-habits-and-why-we-do-them-anyway\/","84e3f1cc":"### <b><mark style=\"background-color: #9B59B6\"><font color=\"white\">*   Libraries   *<\/font><\/mark><\/b>","1d2cef50":"<font color=\"#C30947\"> High Accuracy and Precision! LOL! <\/font>","3da33487":"# <font color=\"#E74C3C\">12345<\/font> <font color=\"#2980B9\">is<\/font> <font color=\"#F39C12\">really<\/font> <font color=\"#2ECC71\">a Bad<\/font> <font color=\"#9B59B6\">Password<\/font> <font color=\"#eb4034\"> Choice<\/font> \n\nThank you Baby! https:\/\/www.kaggle.com\/babyoda\/improved-histogram-visualization","50905e24":"<font color=\"#C30947\"> LightGBM Classifier <\/font>","eff826f7":"![](https:\/\/blog.mailfence.com\/wp-content\/uploads\/2015\/12\/badpasswordhabits-760.jpg)blog.mailfence.com","12c98b0a":"<font color=\"#8f34eb\"> RandomForest Classifier <\/font>","ef7d0e72":"### <b><mark style=\"background-color: #9B59B6\"><font color=\"white\">   No Missing Values   <\/font><\/mark><\/b>"}}