{"cell_type":{"41b07929":"code","5fc69d8a":"code","cbc26eb2":"code","12c89abb":"code","d34c0564":"code","c691d0b7":"code","1a37feaf":"code","ec73bcc3":"code","6247b260":"code","1fa91783":"code","7c38e2d6":"code","df9f857b":"code","4d9a0b03":"code","a89f9648":"code","fbe02332":"code","9d03862b":"code","61688616":"code","d155c7d0":"code","5df62c17":"code","6890c3ea":"code","8a07959d":"markdown","bf65dcd8":"markdown","55bebf6c":"markdown","6ec773bc":"markdown","2bcc7de2":"markdown"},"source":{"41b07929":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport math\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5fc69d8a":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z","cbc26eb2":"def rmsle(y, y_pred):\n    assert len(y) == len(y_pred)\n    to_sum = [(math.log(y_pred[i] + 1) - math.log(y[i] + 1)) ** 2.0 for i,pred in enumerate(y_pred)]\n    return (sum(to_sum) * (1.0\/len(y))) ** 0.5\n#Source: https:\/\/www.kaggle.com\/marknagelberg\/rmsle-function","12c89abb":"#LOAD DATA\nprint(\"Loading data...\")\n\n\n\ntrain = pd.read_table(\"train.tsv\", sep=\"\\t\")\ntest = pd.read_csv(\"..\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip\" , sep='\\t')\nprint(train.shape)\nprint(test.shape)","d34c0564":"#HANDLE MISSING VALUES\nprint(\"Handling missing values...\")\ndef handle_missing(dataset):\n    dataset.category_name.fillna(value=\"missing\", inplace=True)\n    dataset.brand_name.fillna(value=\"missing\", inplace=True)\n    dataset.item_description.fillna(value=\"missing\", inplace=True)\n    return (dataset)\n\ntrain = handle_missing(train)\ntest = handle_missing(test)\nprint(train.shape)\nprint(test.shape)","c691d0b7":"train.head(3)\n","1a37feaf":"#PROCESS CATEGORICAL DATA\n\nprint(\"Handling categorical variables...\")\nle = LabelEncoder()\n\nle.fit(np.hstack([train.category_name, test.category_name]))\ntrain.category_name = le.transform(train.category_name)\ntest.category_name = le.transform(test.category_name)\n\nle.fit(np.hstack([train.brand_name, test.brand_name]))\ntrain.brand_name = le.transform(train.brand_name)\ntest.brand_name = le.transform(test.brand_name)\ndel le\n\ntrain.head(3)","ec73bcc3":"#PROCESS TEXT: RAW\nprint(\"Text to seq process...\")\nfrom keras.preprocessing.text import Tokenizer\nraw_text = np.hstack([train.item_description.str.lower(), train.name.str.lower()])\n\nprint(\"   Fitting tokenizer...\")\ntok_raw = Tokenizer()\ntok_raw.fit_on_texts(raw_text)\nprint(\"   Transforming text to seq...\")\n\ntrain[\"seq_item_description\"] = tok_raw.texts_to_sequences(train.item_description.str.lower())\ntest[\"seq_item_description\"] = tok_raw.texts_to_sequences(test.item_description.str.lower())\ntrain[\"seq_name\"] = tok_raw.texts_to_sequences(train.name.str.lower())\ntest[\"seq_name\"] = tok_raw.texts_to_sequences(test.name.str.lower())\ntrain.head(3)","6247b260":"#SEQUENCES VARIABLES ANALYSIS\nmax_name_seq = np.max([np.max(train.seq_name.apply(lambda x: len(x))), np.max(test.seq_name.apply(lambda x: len(x)))])\nmax_seq_item_description = np.max([np.max(train.seq_item_description.apply(lambda x: len(x)))\n                                   , np.max(test.seq_item_description.apply(lambda x: len(x)))])\nprint(\"max name seq \"+str(max_name_seq))\nprint(\"max item desc seq \"+str(max_seq_item_description))","1fa91783":"train.seq_name.apply(lambda x: len(x)).hist()\n","7c38e2d6":"train.seq_item_description.apply(lambda x: len(x)).hist()\n","df9f857b":"#EMBEDDINGS MAX VALUE\n#Base on the histograms, we select the next lengths\nMAX_NAME_SEQ = 10\nMAX_ITEM_DESC_SEQ = 75\nMAX_TEXT = np.max([np.max(train.seq_name.max())\n                   , np.max(test.seq_name.max())\n                  , np.max(train.seq_item_description.max())\n                  , np.max(test.seq_item_description.max())])+2\nMAX_CATEGORY = np.max([train.category_name.max(), test.category_name.max()])+1\nMAX_BRAND = np.max([train.brand_name.max(), test.brand_name.max()])+1\nMAX_CONDITION = np.max([train.item_condition_id.max(), test.item_condition_id.max()])+1","4d9a0b03":"#SCALE target variable\ntrain[\"target\"] = np.log(train.price+1)\npd.DataFrame(train.target).hist()","a89f9648":"#EXTRACT DEVELOPTMENT TEST\ndtrain, dvalid = train_test_split(train, random_state=123, train_size=0.99)\nprint(dtrain.shape)\nprint(dvalid.shape)","fbe02332":"#KERAS DATA DEFINITION\nfrom keras.preprocessing.sequence import pad_sequences\n\ndef get_keras_data(dataset):\n    X = {\n        'name': pad_sequences(dataset.seq_name, maxlen=MAX_NAME_SEQ)\n        ,'item_desc': pad_sequences(dataset.seq_item_description, maxlen=MAX_ITEM_DESC_SEQ)\n        ,'brand_name': np.array(dataset.brand_name)\n        ,'category_name': np.array(dataset.category_name)\n        ,'item_condition': np.array(dataset.item_condition_id)\n        ,'num_vars': np.array(dataset[[\"shipping\"]])\n    }\n    return X\n\nX_train = get_keras_data(dtrain)\nX_valid = get_keras_data(dvalid)\nX_test = get_keras_data(test)","9d03862b":"#KERAS MODEL DEFINITION\nfrom keras.layers import Input, Dropout, Dense, BatchNormalization, Activation, concatenate, GRU, Embedding, Flatten, BatchNormalization\nfrom keras.models import Model\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\nfrom keras import backend as K\n\ndef get_callbacks(filepath, patience=2):\n    es = EarlyStopping('val_loss', patience=patience, mode=\"min\")\n    msave = ModelCheckpoint(filepath, save_best_only=True)\n    return [es, msave]\n\ndef rmsle_cust(y_true, y_pred):\n    first_log = K.log(K.clip(y_pred, K.epsilon(), None) + 1.)\n    second_log = K.log(K.clip(y_true, K.epsilon(), None) + 1.)\n    return K.sqrt(K.mean(K.square(first_log - second_log), axis=-1))\n\ndef get_model():\n    #params\n    dr_r = 0.1\n\n    #Inputs\n    name = Input(shape=[X_train[\"name\"].shape[1]], name=\"name\")\n    item_desc = Input(shape=[X_train[\"item_desc\"].shape[1]], name=\"item_desc\")\n    brand_name = Input(shape=[1], name=\"brand_name\")\n    category_name = Input(shape=[1], name=\"category_name\")\n    item_condition = Input(shape=[1], name=\"item_condition\")\n    num_vars = Input(shape=[X_train[\"num_vars\"].shape[1]], name=\"num_vars\")\n    \n    #Embeddings layers\n    emb_name = Embedding(MAX_TEXT, 50)(name)\n    emb_item_desc = Embedding(MAX_TEXT, 50)(item_desc)\n    emb_brand_name = Embedding(MAX_BRAND, 10)(brand_name)\n    emb_category_name = Embedding(MAX_CATEGORY, 10)(category_name)\n    emb_item_condition = Embedding(MAX_CONDITION, 5)(item_condition)\n    \n    #rnn layer\n    rnn_layer1 = GRU(16) (emb_item_desc)\n    rnn_layer2 = GRU(8) (emb_name)\n    \n    #main layer\n    main_l = concatenate([\n        Flatten() (emb_brand_name)\n        , Flatten() (emb_category_name)\n        , Flatten() (emb_item_condition)\n        , rnn_layer1\n        , rnn_layer2\n        , num_vars\n    ])\n    main_l = Dropout(dr_r) (Dense(128) (main_l))\n    main_l = Dropout(dr_r) (Dense(64) (main_l))\n    \n    #output\n    output = Dense(1, activation=\"linear\") (main_l)\n    \n    #model\n    model = Model([name, item_desc, brand_name\n                   , category_name, item_condition, num_vars], output)\n    model.compile(loss=\"mse\", optimizer=\"adam\", metrics=[\"mae\", rmsle_cust])\n    \n    return model\n\nmodel = get_model()\nmodel.summary()","61688616":"#FITTING THE MODEL\nBATCH_SIZE = 20000\nepochs = 5\n\nmodel = get_model()\nmodel.fit(X_train, dtrain.target, epochs=epochs, batch_size=BATCH_SIZE\n          , validation_data=(X_valid, dvalid.target)\n          , verbose=1)","d155c7d0":"#EVLUEATE THE MODEL ON DEV TEST: What is it doing?\nval_preds = model.predict(X_valid)\n#val_preds = target_scaler.inverse_transform(val_preds)\nval_preds = np.exp(val_preds)+1\n\n#mean_absolute_error, mean_squared_log_error\ny_true = np.array(dvalid.price.values)\ny_pred = val_preds[:,0]\nv_rmsle = rmsle(y_true, y_pred)\nprint(\" RMSLE error on dev test: \"+str(v_rmsle))","5df62c17":"#CREATE PREDICTIONS\npreds = model.predict(X_test, batch_size=BATCH_SIZE)\npreds = np.exp(preds)-1\n\nsubmission = test[[\"test_id\"]]\nsubmission[\"price\"] = preds","6890c3ea":"submission.to_csv(\".\/submission.csv\", index=False)\nsubmission.price.hist()","8a07959d":"**H\u1ea1n ch\u1ebf:** Code c\u00f2n l\u1edbn, chi\u1ebfm dung l\u01b0\u1ee3ng nhi\u1ec1u, x\u1eed l\u00fd ch\u1eadm (m\u1ed7i epoch ch\u1ea1y trong kho\u1ea3ng 280s)\n\nCh\u01b0a kh\u1eafc ph\u1ee5c \u0111\u01b0\u1ee3c: Ch\u01b0a t\u00ecm \u0111\u01b0\u1ee3c model t\u1ed1t h\u01a1n \u0111\u1ec3 thay th\u1ebf (score v\u1eabn gi\u1eef \u1edf m\u1ee9c ~ 0.6) (best: 0.3888)","bf65dcd8":"# Y\u00caU C\u1ea6U\nS\u1eed d\u1ee5ng c\u00e1c th\u00f4ng s\u1ed1 v\u1ec1 danh m\u1ee5c s\u1ea3n ph\u1ea9m, th\u01b0\u01a1ng hi\u1ec7u, t\u00ecnh tr\u1ea1ng m\u1eb7t h\u00e0ng,... \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n gi\u00e1 c\u1ee7a c\u00e1c m\u1eb7t h\u00e0ng \u0111\u01b0\u1ee3c b\u00e1n","55bebf6c":"# Mercari Price Suggestion Challenge:\n> D\u1ef1 \u0111o\u00e1n gi\u00e1 ti\u1ec1n c\u1ee7a m\u1ed9t lo\u1ea1i m\u1eb7t h\u00e0ng d\u1ef1a v\u00e0o c\u00e1c th\u00f4ng s\u1ed1 k\u0129 thu\u1eadt, m\u00f4 t\u1ea3 c\u1ee7a ng\u01b0\u1eddi b\u00e1n, h\u00ecnh th\u1ee9c b\u00e1n...\n\nB\u00e1o c\u00e1o v\u1ea5n \u0111\u1ec1 C\u00f3 th\u1ec3 kh\u00f3 bi\u1ebft th\u1ee9 g\u00ec \u0111\u00f3 th\u1ef1c s\u1ef1 \u0111\u00e1ng gi\u00e1 bao nhi\u00eau. Chi ti\u1ebft nh\u1ecf c\u00f3 th\u1ec3 c\u00f3 ngh\u0129a l\u00e0 s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn v\u1ec1 gi\u00e1 c\u1ea3. V\u00ed d\u1ee5, m\u1ed9t trong nh\u1eefng chi\u1ebfc \u00e1o len c\u00f3 gi\u00e1 335 \u0111\u00f4 la v\u00e0 chi\u1ebfc c\u00f2n l\u1ea1i c\u00f3 gi\u00e1 9,99 \u0111\u00f4 la th\u00ec \u0111i\u1ec1u g\u00ec quy\u1ebft \u0111\u1ecbnh v\u1ec1 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m <\/br>\n\nVi\u1ec7c \u0111\u1ecbnh gi\u00e1 s\u1ea3n ph\u1ea9m th\u1eadm ch\u00ed c\u00f2n kh\u00f3 h\u01a1n tr\u00ean quy m\u00f4 l\u1edbn, ch\u1ec9 c\u1ea7n xem x\u00e9t c\u00f3 bao nhi\u00eau s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c b\u00e1n tr\u1ef1c tuy\u1ebfn. Qu\u1ea7n \u00e1o c\u00f3 xu h\u01b0\u1edbng \u0111\u1ecbnh gi\u00e1 theo m\u00f9a m\u1ea1nh m\u1ebd v\u00e0 b\u1ecb \u1ea3nh h\u01b0\u1edfng nhi\u1ec1u b\u1edfi th\u01b0\u01a1ng hi\u1ec7u, trong khi \u0111\u1ed3 \u0111i\u1ec7n t\u1eed c\u00f3 gi\u00e1 dao \u0111\u1ed9ng d\u1ef1a tr\u00ean th\u00f4ng s\u1ed1 k\u1ef9 thu\u1eadt c\u1ee7a s\u1ea3n ph\u1ea9m. <\/br>\n\nMercari mu\u1ed1n \u0111\u01b0a ra \u0111\u1ec1 xu\u1ea5t v\u1ec1 gi\u00e1 cho ng\u01b0\u1eddi b\u00e1n, nh\u01b0ng \u0111i\u1ec1u n\u00e0y r\u1ea5t kh\u00f3 v\u00ec ng\u01b0\u1eddi b\u00e1n c\u1ee7a h\u1ecd \u0111\u01b0\u1ee3c ph\u00e9p \u0111\u01b0a b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec ho\u1eb7c b\u1ea5t k\u1ef3 g\u00f3i n\u00e0o l\u00ean th\u1ecb tr\u01b0\u1eddng c\u1ee7a Mercari.","6ec773bc":"**M\u1ee5c ti\u00eau** <\/br>\nD\u1ef1 \u0111o\u00e1n gi\u00e1 c\u1ee7a m\u1ed9t m\u1eb7t h\u00e0ng v\u1edbi t\u00ecnh tr\u1ea1ng, m\u00f4 t\u1ea3 v\u00e0 c\u00e1c t\u00ednh n\u0103ng li\u00ean quan kh\u00e1c. Gi\u1ea3m thi\u1ec3u s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa gi\u00e1 d\u1ef1 \u0111o\u00e1n v\u00e0 gi\u00e1 th\u1ef1c t\u1ebf (RMSLE) <\/br>\n**\u0110\u00e1nh gi\u00e1 t\u1ed5ng quan:** <\/br>\n\u0110\u00e2y l\u00e0 b\u00e0i to\u00e1n h\u1ed3i quy tuy\u1ebfn t\u00ednh. D\u1eef li\u1ec7u \u0111\u01b0\u1ee3c cung c\u1ea5p \u1edf d\u1ea1ng text v\u00e0 lable, n\u00ean c\u1ea7n chuy\u1ec3n c\u00e1c \u0111\u1eb7c tr\u01b0ng v\u1ec1 d\u1ea1ng s\u1ed1 th\u1ef1c ho\u1eb7c vector \u0111\u1ec3 x\u1eed l\u00fd tuy\u1ebfn t\u00ednh","2bcc7de2":"# \u0110i\u1ec1u l\u00e0m \u0111\u01b0\u1ee3c trong l\u1ea7n test n\u00e0y (version4):\nNh\u1eadn th\u1ea5y loss v\u1eabn c\u00f2n \u1edf t\u1ec9 s\u1ed1 cao -> t\u0103ng th\u1eddi gian hu\u1ea5n luy\u1ec7n\nt\u0103ng epoch(5->20) Nh\u1eadn th\u1ea5y \u0111\u01b0\u1ee3c loss gi\u1ea3m \u0111i t\u01b0\u01a1ng \u0111\u1ed1i nhi\u1ec1u (0.0159->0.0112) \nK\u1ebft qu\u1ea3: Gi\u1ea3m \u0111\u01b0\u1ee3c Error c\u1ee7a h\u00e0m RMSLE t\u1eeb 0.506 xu\u1ed1ng 0.488"}}