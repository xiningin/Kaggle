{"cell_type":{"ac2b2a21":"code","20dbac42":"code","5f08a85a":"code","4ac1657f":"code","0380a0cc":"code","cb4ceb43":"code","221a69cf":"code","741a2619":"code","5d72c0a0":"code","18f15cff":"code","ab215f8d":"code","be43631b":"code","1e64f3c1":"code","3715b043":"code","84abab16":"code","e9415c1b":"code","240bea21":"code","978600da":"code","28f2ff9d":"code","8cddb703":"code","73000315":"code","8c4c8c91":"code","cc393760":"code","915ace86":"code","31782750":"code","cade6e04":"code","cec41d19":"code","36440d4a":"code","15b79d55":"code","8ccccb97":"code","02125b21":"code","c4c938e5":"code","2303eab4":"code","9db10254":"code","9f964759":"code","4ff029d8":"code","b64d8639":"code","5aceaa5f":"code","a903efe9":"code","f8c247bd":"code","4bb74585":"code","2be64a25":"code","093c8c3b":"code","8a8fc547":"code","d076fa40":"code","12daf6aa":"code","a5b5578e":"code","c25ccbef":"code","2c148958":"code","91f6ed43":"code","3cfd29b9":"code","c716a9df":"code","709cf999":"code","29002f3f":"code","72a112b7":"code","b2217ef5":"code","4f518e10":"code","3d388da1":"code","35199ed1":"code","d5569189":"code","d94f0710":"code","e06e3941":"code","2319eba6":"code","8a018f9e":"code","9ffea173":"code","670880c2":"markdown","9ff28bb2":"markdown","c553fe8f":"markdown","1b16cb4e":"markdown","1884bf50":"markdown","bec4cd24":"markdown","a3073fcd":"markdown","8f6fd790":"markdown","61345af9":"markdown","4628f58f":"markdown","daf588c3":"markdown","88bad986":"markdown","9be897ce":"markdown","c4bf41a1":"markdown","13a8643b":"markdown","4827a39a":"markdown","62d4f175":"markdown","9330edd4":"markdown","d8d303dd":"markdown","2ef72a09":"markdown","170bc4ea":"markdown","bd2f93f7":"markdown","d9a298ec":"markdown","1acd704b":"markdown","9c1637c2":"markdown","72e38124":"markdown","8ef2bcb9":"markdown","a1eefc94":"markdown","c419cd2a":"markdown","8419d24d":"markdown","d59706c0":"markdown","dd8ff587":"markdown","4de97945":"markdown","2815f9ca":"markdown","9eac3db8":"markdown","053769ca":"markdown","eed90dd7":"markdown","fc3bcafd":"markdown","24c3b46c":"markdown","560828a4":"markdown","59c69f06":"markdown","5734ff17":"markdown","e29a5a63":"markdown"},"source":{"ac2b2a21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20dbac42":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5f08a85a":"train = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ntest = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","4ac1657f":"train.head()","0380a0cc":"test.head()","cb4ceb43":"train.info()","221a69cf":"train.columns","741a2619":"train.shape","5d72c0a0":"print(train.isna().sum().sort_values(ascending=False))","18f15cff":"print(test.isnull().sum().sort_values(ascending=False))","ab215f8d":"print(train.Cabin.head(10))","be43631b":"train.Cabin= train.Cabin.apply(lambda x: 'Z' if pd.isnull(x) else x[0])\nprint('train: ')\nprint(train.Cabin.unique())\n\n# do the same for test data\n\ntest.Cabin = test.Cabin.apply(lambda x: 'Z' if pd.isnull(x) else x[0])\nprint('test: ')\nprint(test.Cabin.unique())\n","1e64f3c1":"train.Age.head(10)","3715b043":"plt.hist(x=train['Age'], bins=20, histtype='step')\nplt.xlabel('Age Range')\nplt.show()","84abab16":"train.Age.median()","e9415c1b":"train.Age.mode()","240bea21":"train.Age.mean()","978600da":"sns.set_style('darkgrid')\nsns.set_palette('pastel')\nsns.violinplot(x='Age', data=train)","28f2ff9d":"train.Age.fillna(value = train.Age.mean(), inplace=True)\n# do the same for test data\ntest.Age.fillna(value= test.Age.mean(), inplace=True)","8cddb703":"train.Embarked.unique()","73000315":"train.Embarked.mode()","8c4c8c91":"train.Embarked.fillna(value = 'S', inplace=True)\n","cc393760":"test.Fare.fillna(value=test.Fare.mean(), inplace=True)","915ace86":"train.isna().sum()","31782750":"test.isna().sum()","cade6e04":"train.columns","cec41d19":"plt.figure(figsize= (10,6))\nplt.subplot(1,2,1)\nsns.countplot(x='Pclass', data=train)\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='Pclass', y='Survived')\nplt.show()","36440d4a":"\nsns.barplot(data=train, x='Sex', y='Survived')\nplt.show()","15b79d55":"sns.barplot(data=train, x='Pclass', y='Survived', hue='Sex')\nplt.show()","8ccccb97":"sns.violinplot(y=train.Age, x=train.Survived)","02125b21":"sns.boxplot(x='Survived', y='Age', data=train)","c4c938e5":"print(train[['Age', 'Survived']].groupby(['Survived'], as_index=False).mean())","2303eab4":"plt.figure(figsize= (10,6))\nplt.subplot(1,2,1)\nsns.countplot(x='SibSp', data=train)\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='SibSp', y='Survived')\nplt.show()","9db10254":"#let's check the survival rate\nprint(train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean())","9f964759":"plt.figure(figsize= (10,6))\nplt.subplot(1,2,1)\nsns.countplot(x='Parch', data=train)\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='Parch', y='Survived')\nplt.show()","4ff029d8":"print(train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean())","b64d8639":"plt.figure(figsize= (10,6))\nplt.subplot(1,2,1)\nsns.countplot(x='Cabin', data=train)\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='Cabin', y='Survived')\nplt.show()","5aceaa5f":"train[['Cabin', 'Survived']].groupby(['Cabin'], as_index=False).mean()","a903efe9":"train.Embarked.unique()","f8c247bd":"plt.figure(figsize=(10,6))\nplt.subplot(1,2,1)\nsns.countplot(data=train, x='Embarked')\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='Embarked', y='Survived')\nplt.show()","4bb74585":"train.Name.head(10)","2be64a25":"train['Title'] = train['Name'].apply(lambda x: x.split('.')[0].split(' ')[-1])\ntrain['Title'].value_counts()\n\n# do he same for test data\ntest['Title'] = test['Name'].apply(lambda x: x.split('.')[0].split(' ')[-1])\n","093c8c3b":"\ntrain[\"Title\"] = train[\"Title\"].replace(\n    ['Lady','Countess','Capt', 'Mme', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona', 'Mlle', 'Ms'], \n    'Rare'\n)\ntrain[\"Title\"] = train[\"Title\"].replace(\n    'Miss', \n    'Mrs'\n)\ntrain['Title'].value_counts()\n\n# lets do the same fortest data\n\ntest[\"Title\"] = test[\"Title\"].replace(\n    ['Lady','Countess','Capt', 'Mme', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona', 'Mlle', 'Ms'], \n    'Rare'\n)\ntest[\"Title\"] = test[\"Title\"].replace(\n    'Miss', \n    'Mrs'\n)","8a8fc547":"train = train.drop('Name', axis = 1)","d076fa40":"#train['designation']=train['designation'].replace(['Planke','Impe','Col.','Mlle.','Gordon','Major.' ,'Carlo','Cruyssen','Mme.','Walle','Capt.','Ms.','Steen','Billiard','Velde','Shawah','Messemaeker','the','der','Mulder','Don','Pelsmaeker','Jonkheer',\n#'Melkebeke'], ['others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others','others' ],inplace=False)","12daf6aa":"#train= train.replace({\"designation\": {'Planke':'others','Impe':'others','Col.':'others','Mlle.':'others','Gordon':'others','Major.':'others','Carlo':'others','Cruyssen':'others','Mme.':'others','Walle':'others','Capt.':'others','Ms.':'others','Steen':'others','Billiard':'others','Velde':'others','Shawah':'others','Messemaeker':'others','the':'others','der':'others','Mulder':'others','Don':'others','Pelsmaeker':'others','Jonkheer':'others',\n#'Melkebeke' : 'others'}})\n#train['designation'].value_counts()\n\n","a5b5578e":"train[['Title', 'Survived']].groupby(['Title'], as_index = False).mean()","c25ccbef":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.countplot(data=train, x='Title')\nplt.subplot(1,2,2)\nsns.barplot(data=train, x='Title', y='Survived')\nplt.show()","2c148958":"train.Ticket.head(10)","91f6ed43":"train['Ticket'] = train['Ticket'].apply(lambda x: 'Z' if x.isdigit() else x.replace('.',' ').replace('\/','').strip().split(' ')[0])\ntrain['Ticket'].head()\n\n# do the same for test data\ntest['Ticket'] = test['Ticket'].apply(lambda x: 'Z' if x.isdigit() else x.replace('.',' ').replace('\/','').strip().split(' ')[0])","3cfd29b9":"train.Ticket.unique()","c716a9df":"train.Ticket.value_counts()","709cf999":"train[['Ticket', 'Survived']].groupby(['Ticket'], as_index = False).mean()","29002f3f":"train.Fare.head()","72a112b7":"sns.distplot(train['Fare'])","b2217ef5":"train['Sex'] = train['Sex'].map({'female':1, 'male':0})\ntrain['Firstclass']=train['Pclass'].apply(lambda x: 1 if x==1 else 0)\ntrain['Secondclass'] = train['Pclass'].apply(lambda x: 1 if x == 2 else 0)\ntrain['Thirdclass']=train['Pclass'].apply(lambda x: 1 if x==3 else 0)\ntrain['Family']= train['SibSp']+train['Parch']+1\ntrain['S'] = train['Embarked'].apply(lambda x: 1 if x=='S' else 0)\ntrain['C'] = train['Embarked'].apply(lambda x: 1 if x== 'C' else 0)\ntrain['Q'] = train['Embarked'].apply(lambda x: 1 if x== 'Q' else 0)\n\n#do the same for test data\ntest['Sex'] = test['Sex'].map({'female':1, 'male':0})\ntest['Firstclass']=test['Pclass'].apply(lambda x: 1 if x==1 else 0)\ntest['Secondclass'] = test['Pclass'].apply(lambda x: 1 if x == 2 else 0)\ntest['Thirdclass']=test['Pclass'].apply(lambda x: 1 if x==3 else 0)\ntest['Family']= test['SibSp']+test['Parch']+1\ntest['S'] = test['Embarked'].apply(lambda x: 1 if x=='S' else 0)\ntest['C'] = test['Embarked'].apply(lambda x: 1 if x== 'C' else 0)\ntest['Q'] = test['Embarked'].apply(lambda x: 1 if x== 'Q' else 0)\n\n\ntrain.head()","4f518e10":"plt.figure(figsize=(14, 8))\nsns.set(font_scale=1.5)\nsns.heatmap(train.corr(), mask= np.triu(np.ones_like(train.corr(), dtype=np.bool)), cmap='coolwarm', annot=True, annot_kws={'size':15})\nplt.show()","3d388da1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","35199ed1":"features = ['Sex', 'Fare', 'Pclass', 'Age', 'SibSp', 'Parch', 'Embarked', 'Title']\nx_train = pd.get_dummies(train[features])\nx_test = pd.get_dummies(test[features])\ny_train = train['Survived'] ","d5569189":"lr = LogisticRegression()\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\nlr.fit(x_train, y_train)\nprediction = lr.predict(x_test)","d94f0710":"print(lr.score(x_train, y_train))","e06e3941":"print(prediction)","2319eba6":"test.columns","8a018f9e":"#Code required to submit for competition\noutput = pd.DataFrame({'PassengerId': pd.read_csv('\/kaggle\/input\/titanic\/test.csv')['PassengerId'], 'Survived': prediction})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9ffea173":"output","670880c2":"## Let's see the relation between survival and other columns one by one","9ff28bb2":"## Thanks for reading my notebook. feedback will be appreciated. please upvote!","c553fe8f":"### It can be seen that survival rate of first class passengers was greater than the others","1b16cb4e":"## let's load the datasets","1884bf50":"#### Again, people with 0,1,2, or 3 parenst\/children had higher chances of survival","bec4cd24":"#### let's change the 2's and 1's into a common value of 'others'","a3073fcd":"* ## let's check the missing values and figure out how to fill them","8f6fd790":"### now let's recheck the missing values","61345af9":"### there is one missing value of Fare in test data. Let's fill it with the mean","4628f58f":"#### it looks like the passengers from cabin B,D and E had higher rates of survival. What could be the reason! Were these cabins nearer to the emergency exits???","daf588c3":"### let's check the survival combining gender and pclass together","88bad986":"# let's apply Logistic Regression model","9be897ce":"### so female were given priority over males in all the classes","c4bf41a1":"#### Let's separate the designations and see if there is a relation between particular designations with chances of survival","13a8643b":"#### So the passengers who boarded from Cheryl had higher chances of survival. Why so?? Did these poeple belong to first class? We will check it later.","4827a39a":"### 10. Fare and survival","62d4f175":"### 6. cabin and survival","9330edd4":"### from the names and designations, its clear that it was Mrs and master who were preferred to be saved. ","d8d303dd":"### 7. Embarked and survival","2ef72a09":"### Now let's check for age column","170bc4ea":"### so, age doesn't seem to be a contributing factor for survival.","bd2f93f7":"## let's inspect the datasets and get some info","d9a298ec":"## Let's see the correlation among different columns now","1acd704b":"### 5. Parch and survival","9c1637c2":"### 4. Sipsp and survival\n#### lets check if number of siblings had any effect on survival","72e38124":"### let's fill the missing age values with the mean age","8ef2bcb9":"## 1. Pclass and survival","a1eefc94":"## importing the necessary libraries","c419cd2a":" So there seems to be a positive correlation between sex, fare, firstclass and survived, and a negative correlation between age, sibps, pclass and thirdclass.\nfRom the negative correlation between fare and pclass, we can assume that first class people gave more fare than the other classes. so we can omit the fare collumn.\nThe columns to consider could probably be sex, firstclass, secondclass, thirdclass, age, S, C, Q and Sibsp(that has a negative correlation which can be considered)","8419d24d":"### 2. Sex and survival","d59706c0":"### let's get the first letters of the ticket. those will differentiate between different type of tickets.","dd8ff587":"### 8. Name and survival","4de97945":"### 3. Age and survival","2815f9ca":"### let's check for the missing cabin values first","9eac3db8":"#### But before that, let's map the test values in sex to numerical datatypes, and convert the Pclass into different columns. Let's also combine sibsp and parch into another column 'family'","053769ca":"### OMG! look at the difference.","eed90dd7":"### Now the tricky ones are left- name, ticket and fare. Let's see them one by one","fc3bcafd":"### let's fill with the most common value","24c3b46c":"## So we have missing values in cabin, age and embarked in training dataset,\n## cabin, age and fare in test dataset.Let's check them out one by one and see how to deal with them","560828a4":"## Since out of 891, 687 values are mising, there is no sense of replacing them with median or mode of the data.let's just fill the missing values with letter 'Z' and keep the first letters of given cabin values and discard the rest.","59c69f06":"### 9. Ticket and survival","5734ff17":"### Now let's check for missing values in Embarked column","e29a5a63":"#### people with 0, 1 or 2 siblings had higher chances of survival. "}}