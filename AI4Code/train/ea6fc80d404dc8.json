{"cell_type":{"36f32f94":"code","0a156e60":"code","92133916":"code","4038259f":"code","93455e1e":"code","fb9e7c71":"code","deefe9c7":"code","d35462f7":"code","65d518b8":"code","8b3a83ae":"markdown","d6750a3f":"markdown","8cec09b4":"markdown","fb7f65ff":"markdown","57070296":"markdown","678d2557":"markdown","6b167bb6":"markdown","2bbc104e":"markdown","d20182ea":"markdown","16cc19cf":"markdown","e371e394":"markdown"},"source":{"36f32f94":"import os\nimport sys\nimport random\nimport warnings\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom tqdm import tqdm_notebook, tnrange\nfrom skimage.io import imread, imshow, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.morphology import label\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img\nfrom skimage.feature import canny\nfrom skimage.filters import sobel,threshold_otsu, threshold_niblack,threshold_sauvola\nfrom skimage.segmentation import felzenszwalb, slic, quickshift, watershed\nfrom skimage.segmentation import mark_boundaries\nfrom scipy import signal\n\nimport cv2\nfrom PIL import Image\nimport pdb\nfrom tqdm import tqdm\nimport seaborn as sns\nimport os \nfrom glob import glob\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0a156e60":"INPUT_PATH = '..\/input'\nDATA_PATH = INPUT_PATH\nTRAIN_DATA = os.path.join(DATA_PATH, \"train_v2\")\nTRAIN_MASKS_DATA = os.path.join(DATA_PATH, \"train_v2\/masks\")\nTEST_DATA = os.path.join(DATA_PATH, \"test_v2\")\ndf = pd.read_csv(DATA_PATH+'\/train_ship_segmentations_v2.csv')\npath_train = '..\/input\/train\/'\npath_test = '..\/input\/test\/'\ntrain_ids = df.ImageId.values\ndf = df.set_index('ImageId')\n","92133916":"## Gets full path of a image given the image name and image type(test or train)\ndef get_filename(image_id, image_type):\n    check_dir = False\n    if \"Train\" == image_type:\n        data_path = TRAIN_DATA\n    elif \"mask\" in image_type:\n        data_path = TRAIN_MASKS_DATA\n    elif \"Test\" in image_type:\n        data_path = TEST_DATA\n    else:\n        raise Exception(\"Image type '%s' is not recognized\" % image_type)\n\n    if check_dir and not os.path.exists(data_path):\n        os.makedirs(data_path)\n\n    return os.path.join(data_path, \"{}\".format(image_id))\n\ndef get_image_data(image_id, image_type, **kwargs):\n    img = _get_image_data_opencv(image_id, image_type, **kwargs)\n    img = img.astype('uint8')\n    return img\n\n## Function to read image and return it \ndef _get_image_data_opencv(image_id, image_type, **kwargs):\n    fname = get_filename(image_id, image_type)\n    img = cv2.imread(fname)\n    assert img is not None, \"Failed to read image : %s, %s\" % (image_id, image_type)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return img\n\n# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_decode(mask_rle, shape=(768, 768)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T  # Needed to align to RLE direction\n\n# https:\/\/github.com\/ternaus\/TernausNet\/blob\/master\/Example.ipynb\ndef mask_overlay(image, mask):\n    \"\"\"\n    Helper function to visualize mask\n    \"\"\"\n    mask = mask.astype(np.uint8)\n    weighted_sum = cv2.addWeighted(mask, 0.75, image, 0.5, 0.)\n    img = image.copy()\n    ind = mask[:, :, 1] > 0    \n    img[ind] = weighted_sum[ind]    \n    return img","4038259f":"import traceback\nimport sys\n\n## This function neatly displays the images in grid , we have option of showing masked \/ unmasked images.\ndef show_image(df,train_ids,show_masked = True , show_unmasked = True,plot_no_ship_images=False):\n    ## We want to view 32 images in 4 rows\n    nImg = 32  #no. of images that you want to display\n    np.random.seed(42)\n    if df.index.name == 'ImageId':\n        df = df.reset_index()\n    if df.index.name != 'ImageId':\n        df = df.set_index('ImageId')\n\n    _train_ids = list(train_ids)\n    np.random.shuffle(_train_ids)\n    tile_size = (256, 256)\n    ## images per row\n    n = 8\n    alpha = 0.3\n\n    ## Number of rows\n    m = int(np.ceil(nImg * 1.0 \/ n))\n    complete_image = np.zeros((m*(tile_size[0]+2), n*(tile_size[1]+2), 3), dtype=np.uint8)\n    complete_image_masked = np.zeros((m*(tile_size[0]+2), n*(tile_size[1]+2), 3), dtype=np.uint8)\n\n    counter = 0\n    for i in range(m):\n        ## For each row set up the row template for images\n        ys = i*(tile_size[1] + 2)\n        ye = ys + tile_size[1]\n        j = 0\n        while j < n:\n            ## Now for each of images , load the image untill the we get 32 images\n            counter += 1\n            all_masks = np.zeros((768, 768))\n            xs = j*(tile_size[0] + 2)\n            xe = xs + tile_size[0]\n            image_id = _train_ids[counter]\n            ## For initial image exploration we would like to not have images with no ship , this can be toggle via the plot_no_ship_images option.\n            if str(df.loc[image_id,'EncodedPixels'])==str(np.nan):\n                if plot_no_ship_images:\n                    j +=1\n                else:    \n                    continue\n            else:\n                j += 1\n            img = get_image_data(image_id, 'Train')\n\n            try:\n                ## Depending on what type of images we want to see , compute the image matrix\n                \n                if show_unmasked:\n                    img_resized = cv2.resize(img, dsize=tile_size)\n                    img_with_text = cv2.putText(img_resized, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n                    complete_image[ys:ye, xs:xe, :] = img_with_text[:,:,:]\n                    \n                if show_masked:\n                    img_masks = df.loc[image_id,'EncodedPixels'].tolist()\n                    for mask in img_masks:\n                        all_masks += rle_decode(mask)\n                    all_masks = np.expand_dims(all_masks,axis=2)\n                    all_masks = np.repeat(all_masks,3,axis=2).astype('uint8')*255\n\n                    img_masked = mask_overlay(img, all_masks)        \n                    img_masked = cv2.resize(img_masked, dsize=tile_size)\n\n                    img_masked = cv2.putText(img_masked, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n                    complete_image_masked[ys:ye, xs:xe, :] = img_masked[:,:,:]\n\n            except Exception as e:\n                all_masks = rle_decode(df.loc[image_id,'EncodedPixels'])\n                all_masks = np.expand_dims(all_masks,axis=2)*255\n                all_masks = np.repeat(all_masks,3,axis=2).astype('uint8')\n\n                img_masked = mask_overlay(img, all_masks)        \n\n                img = cv2.resize(img, dsize=tile_size)\n                img_masked = cv2.resize(img_masked, dsize=tile_size)\n\n                img = cv2.putText(img, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n                complete_image[ys:ye, xs:xe, :] = img[:,:,:]\n\n                img_masked = cv2.putText(img_masked, image_id, (5,img.shape[0] - 5), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), thickness=2)\n                complete_image_masked[ys:ye, xs:xe, :] = img_masked[:,:,:]\n                \n    ## Now plot images based on the options\n    if show_unmasked:\n        m = complete_image.shape[0] \/ (tile_size[0] + 2)\n        k = 8\n        n = int(np.ceil(m \/ k))\n        for i in range(n):\n            plt.figure(figsize=(20, 20))\n            ys = i*(tile_size[0] + 2)*k\n            ye = min((i+1)*(tile_size[0] + 2)*k, complete_image.shape[0])\n            plt.imshow(complete_image[ys:ye,:,:],cmap='seismic')\n            plt.title(\"Training dataset\")\n            \n    if show_masked:\n        m = complete_image.shape[0] \/ (tile_size[0] + 2)\n        k = 8\n        n = int(np.ceil(m \/ k))\n        for i in range(n):\n            plt.figure(figsize=(20, 20))\n            ys = i*(tile_size[0] + 2)*k\n            ye = min((i+1)*(tile_size[0] + 2)*k, complete_image.shape[0])\n            plt.imshow(complete_image_masked[ys:ye,:,:])\n            plt.title(\"Training dataset: Lighter Color depicts ship\")\n\n##Lets quickly test the function we just wrote            \nshow_image(df,train_ids)        \n","93455e1e":"df = df.reset_index()\ndf['ship_count'] = df.groupby('ImageId')['ImageId'].transform('count')\ndf.loc[df['EncodedPixels'].isnull().values,'ship_count'] = 0  #see infocusp's comment\nsns.set_style(\"white\")\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.distplot(df['ship_count'],kde=False)\nplt.title('Ship Count Distribution in Train Set')\n\nprint(df['ship_count'].describe())","fb9e7c71":"images_with_noships = df[df[\"ship_count\"] == 0].ImageId.values\nshow_image(df,images_with_noships,show_masked=False,plot_no_ship_images=True)        ","deefe9c7":"images_with_1_5 = df[df[\"ship_count\"].between(1,5)].ImageId.values\nshow_image(df,images_with_1_5,show_unmasked=False,show_masked=True,plot_no_ship_images=True)        ","d35462f7":"images_with_5_10 = df[df[\"ship_count\"].between(5,10)].ImageId.values\nshow_image(df,images_with_5_10,show_unmasked=False,show_masked=True,plot_no_ship_images=True)        ","65d518b8":"images_with_greater_10 = df[df[\"ship_count\"].between(10,16)].ImageId.values\nshow_image(df,images_with_greater_10,show_unmasked=False,show_masked=True,plot_no_ship_images=True)        ","8b3a83ae":"## Lets Define Some basic helper functions","d6750a3f":"### Lets begin with images with no ships","8cec09b4":"## Lets look at couple of images with and without mask","fb7f65ff":"## Training Set Images with Ship Count 5 to 10","57070296":"## Lets setup datapaths","678d2557":"## Plotting Ship Count\"","6b167bb6":"## Plotting Images: Based on Ship Count","2bbc104e":"## Training Set Images with Ship Count greater than 10","d20182ea":"### Lets begin with images with 1 to 5 ships","16cc19cf":"# Basic setup of images and viewing of images","e371e394":"Lets Import some usefull libraries"}}