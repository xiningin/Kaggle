{"cell_type":{"28e96891":"code","18add856":"code","db96ea01":"code","a8030b45":"code","8380b3f3":"code","d01f0d3e":"code","90071acc":"code","27fb55a2":"code","7f357672":"code","3c6aa0c4":"code","dde358af":"code","0ee8d5b9":"code","196a0bc6":"code","dbbe2fc8":"code","791e3fc0":"code","15aaf231":"code","4fa2b0fa":"code","e152cf88":"code","634b87ae":"code","4ba45c16":"code","486f89ac":"code","4b119bf8":"code","8185ee8b":"code","8f6f4a9b":"code","38f0d09f":"code","131df8b9":"code","17d8af7b":"code","5afaf9de":"code","fa866b1f":"code","5909cbef":"code","4fe894f3":"code","afbcd362":"code","f746e41a":"code","0db764dd":"code","6e358b4f":"code","ad22068d":"code","78aeaf2b":"code","65bb1e86":"code","c9f6695e":"markdown","7b2d0193":"markdown","c152acba":"markdown","72eeebb1":"markdown","2d97a4c9":"markdown","eec7b548":"markdown","e1d0400f":"markdown","37b0d056":"markdown","169e12c9":"markdown"},"source":{"28e96891":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","18add856":"#Reading Data\ndf_stroke = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf = df_stroke.copy() #Copy the dataset \ndf.head() #Loading the First Five Rows:","db96ea01":"df.columns","a8030b45":"df.describe().T","8380b3f3":"df.drop(['id'],axis=1 ,inplace = True)","d01f0d3e":"df.isnull().sum()","90071acc":"df[\"bmi\"].fillna(df['bmi'].mean(),inplace=True)","27fb55a2":"df[\"gender\"] = df[\"gender\"].replace([\"Other\"],\"Male\")","7f357672":"df[\"gender\"].nunique()","3c6aa0c4":"(df[\"work_type\"]\n.value_counts()\n.plot.barh()\n.set_title(\"\u00c7al\u0131\u015fan S\u0131n\u0131f\u0131n\u0131n Frekanslar\u0131\"));","dde358af":"sns.displot(df, x = \"work_type\",hue = \"gender\",col= \"gender\",shrink = 1);","0ee8d5b9":"df.groupby([\"work_type\"]).mean()","196a0bc6":"sns.displot(df, x = \"avg_glucose_level\",hue = \"work_type\",col= \"work_type\",binwidth=10);","dbbe2fc8":"sns.relplot(data=df, x = \"avg_glucose_level\", y=\"bmi\", hue = \"stroke\" );","791e3fc0":"plt.figure(1, figsize=(20,10))\nthe_grid = GridSpec(3, 3)\n\ncmap = plt.get_cmap('Spectral')\ncolors = [cmap(i) for i in np.linspace(0, 1, 8)]\ngender_colors = [\"hotpink\",\"b\"]\nstroke_colors = [\"g\",\"r\"]\n\nlabel_hyper = df['work_type'].value_counts().index\nhyper_values = df['work_type'].value_counts()\nplt.subplot(the_grid[0, 0], aspect=1, title='Work Type of Pie')\nhyper_pie = plt.pie(hyper_values, labels=label_hyper, autopct='%1.1f%%', shadow=True,colors=colors)\n\n\nlabel_gender = df['gender'].value_counts().index\ngender_values = df['gender'].value_counts()\nplt.subplot(the_grid[0, 1], aspect=1, title='Gender of Pies')\ngender_pie = plt.pie(gender_values, labels=label_gender, autopct='%1.1f%%', shadow=True,colors=gender_colors)\n\n\n\nlabel_stroke = df['stroke'].value_counts().index\nstroke_values = df['stroke'].value_counts()\nplt.subplot(the_grid[0, 2], aspect=1, title='Stroke Rate')\nhyper_pie = plt.pie(stroke_values, labels=label_stroke, autopct='%1.1f%%', shadow=True,colors=stroke_colors)","15aaf231":"sns.barplot(x=hyper_values,y= label_hyper, data=df, palette='Spectral');","4fa2b0fa":"sns.histplot(data=df, x=\"avg_glucose_level\", hue=\"gender\", multiple=\"stack\");\n","e152cf88":"fig1 = plt.figure()\nax1 = fig1.add_subplot(1, 1, 1)\nax1.text(-20,0.045,'Age & Stroke Relationship',fontsize=18,fontweight='bold', fontfamily='monospace')\nsns.kdeplot(data=df[df.stroke==1],x='age',hue = \"stroke\", shade=True,ax = ax1 ,color='lightcoral',alpha=1)\nsns.kdeplot(data=df[df.stroke==0],x='age',shade=True,ax = ax1,color='palegreen',alpha=0.5);\n","634b87ae":"fig1 = plt.figure()\nax2 = fig1.add_subplot(1, 1, 1)\nax2.text(-20,0.020,'Glucose Level & Stroke Relationship',fontsize=18,fontweight='bold', fontfamily='monospace')\nsns.kdeplot(data=df[df.stroke==0],x='avg_glucose_level',shade=True,ax = ax2, color='palegreen',alpha=0.5)\nsns.kdeplot(data=df[df.stroke==1],x='avg_glucose_level',hue = \"stroke\",shade=True,ax = ax2,color='Red',alpha=0.6);","4ba45c16":"fig1 = plt.figure()\nax3 = fig1.add_subplot(1, 1, 1)\nax3.text(-10,0.10,'BMI & Stroke Relationship',fontsize=18,fontweight='bold', fontfamily='monospace')\nsns.kdeplot(data=df[df.stroke==0],x='bmi',shade=True,ax = ax3, color='yellow',alpha=0.5)\nsns.kdeplot(data=df[df.stroke==1],x='bmi',hue = \"stroke\",shade=True,ax = ax3,color='lightcoral',alpha=0.6);","486f89ac":"fig1 = plt.figure()\nax4 = fig1.add_subplot(1, 1, 1)\nsns.kdeplot(data=df[df.stroke==0],x='hypertension',shade=True,ax = ax4, color='Purple',alpha=0.5)\nsns.kdeplot(data=df[df.stroke==1],x='hypertension',hue = \"stroke\",shade=True,ax = ax4,color='lightcoral',alpha=0.6)\nfig1.suptitle('Hypertension & Stroke Relationship', fontsize=14, fontweight='bold');","4b119bf8":"fig5 = plt.figure()\nax5 = fig5.add_subplot(1, 1, 1)\nsns.kdeplot(data=df[df.stroke==0],x='heart_disease',shade=True,ax = ax5, color='palegreen',alpha=0.5)\nsns.kdeplot(data=df[df.stroke==1],x='heart_disease',hue = \"stroke\",shade=True,ax = ax5,color='lightcoral',alpha=0.6)\nfig5.suptitle('Heart Disease & Stroke Relationship', fontsize=14, fontweight='bold');","8185ee8b":"plt.subplot(2,1,1)\nplt.title('Stroke Sample Distribution Based On Bmi And Glucose Level')\nax1 = sns.scatterplot(data=df, x=\"avg_glucose_level\", y=\"bmi\", hue=\"gender\",style=\"gender\");\nplt.subplot(2,1,2)\nplt.title('Stroke')\nax2 = sns.scatterplot(data=df, x=\"avg_glucose_level\", y=\"bmi\", hue=\"stroke\",style=\"stroke\");\nplt.tight_layout()\nplt.show()","8f6f4a9b":"sns.relplot(data=df, x=\"avg_glucose_level\", y=\"bmi\",hue=\"stroke\", dashes=False, markers=True,col=\"gender\");","38f0d09f":"sns.countplot(x = \"hypertension\", data=df,hue=\"stroke\")","131df8b9":"sns.countplot(x = \"gender\", data=df,hue=\"stroke\");","17d8af7b":"sns.countplot(x = \"heart_disease\", data=df,hue=\"stroke\");","5afaf9de":"fig = plt.figure(figsize = (15,15),dpi = 40)\n\nax1 = fig.add_subplot(3,1,1)\nax2 = fig.add_subplot(3,1,2)\nax3 = fig.add_subplot(3,1,3)\n\nstroke_col = '#fe346e'\nhealthy_col = '#2c003e'\n\ntitle_args = {'font':'Serif', 'weight':'bold','color': 'black', 'size':24}\nfont_dict = {'size':16, 'family':'Serif', 'color':'black', 'weight':'bold'}\nhealth_dict = {'font':'Serif', 'color': '#2c003e', 'size':15, 'weight':'bold'}\ndash_dict = {'font':'Serif', 'color': 'black', 'size':15,'weight':'bold'}\nstroke_dict = {'font':'Serif', 'color': '#fe346e', 'size':15,'weight':'bold'}\n\n\nhealthy_gen = df[df['stroke'] == 0].gender.value_counts()\nstroke_gen = df[df['stroke'] == 1].gender.value_counts()\n\nax1.barh( stroke_gen.index , width = healthy_gen.values[0:2], height = 0.2, color = healthy_col)\nax1.barh( np.arange(len(stroke_gen.index)) , width = stroke_gen.values, height = 0.5, color = stroke_col)\n\nax1.set_yticklabels(stroke_gen.index, **font_dict)\nax1.axes.get_yaxis().set_visible(True)\nax1.axes.get_xaxis().set_visible(True)\nax1.spines['bottom'].set_visible(True)\nax1.spines['left'].set_visible(True)\nax1.text(-5,2, 'Gender Risk',**title_args)\nax1.text(0,1.35, 'Healthy',**health_dict)\nax1.text(790,1.35, '|',**dash_dict)\nax1.text(870,1.35, 'Stroke',**stroke_dict)\n\n\n#ax2 : work-type\n\nhealthy_gen = df[df['stroke'] == 0].work_type.value_counts()\nstroke_gen = df[df['stroke'] == 1].work_type.value_counts()\n\nax2.bar( healthy_gen.index , height = healthy_gen.values, width = 0.2, color = healthy_col)\nax2.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5, color= stroke_col)\nax2.set_xticklabels(['Private','Self-Employed','Children', 'Gov-Job','Never worked'], **font_dict)\n\n\nax2.text(-3,1600, 'Employment Risk',**title_args)\nax2.text(-0.45,2950, 'Healthy',**health_dict)\nax2.text(0.18,2950, '|',**dash_dict)\nax2.text(0.25,2950, 'Stroke',**stroke_dict)\n\n\n#ax3-smoking\n\nhealthy_gen = df[df['stroke'] == 0].smoking_status.value_counts()\nstroke_gen = df[df['stroke'] == 1].smoking_status.value_counts()\n\nax3.bar( healthy_gen.index, height = healthy_gen.values, width = 0.2,color = healthy_col)\nax3.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5,color= stroke_col)\nax3.set_xticklabels(['Never Smoked', 'Unknown','Formaly Smoked' ,'Smokes'], **font_dict)\n\nax3.text(-2.5,1000, 'Smoking Status And Risk',**title_args)\nax3.text(-0.4,1900, 'Healthy',**health_dict)\nax3.text(0.095,1900, '|',**dash_dict)\nax3.text(0.18,1900, 'Stroke',**stroke_dict)\n","fa866b1f":"df['gender'] = df['gender'].replace({'Male':0,'Female':1,'Other':-1}).astype(np.uint8)\ndf['Residence_type'] = df['Residence_type'].replace({'Rural':0,'Urban':1}).astype(np.uint8)\ndf['work_type'] = df['work_type'].replace({'Private':0,'Self-employed':1,'Govt_job':2,'children':-1,'Never_worked':-2}).astype(np.uint8)","5909cbef":"X  = df[['gender','age','hypertension','heart_disease','work_type','avg_glucose_level','bmi']]\ny = df['stroke']\n\n# creating dataset split for prediction\nfrom sklearn.model_selection import train_test_split\nX_train, X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42) # 80-20 split\n\n# Checking split \nprint('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_test:', X_test.shape)\nprint('y_test:', y_test.shape)","4fe894f3":"X_test.head(5)","afbcd362":">>> from sklearn.svm import SVC\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.ensemble import RandomForestClassifier\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.model_selection import cross_val_score\n>>> from sklearn.datasets import make_classification\n>>> from sklearn.model_selection import train_test_split\n>>> from sklearn.pipeline import Pipeline\nsvc_pipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])\n\nX_train.fillna(X_train.mean(), inplace=True)\ny_train.fillna(X_train.mean(),inplace=True)\nsvc_pipe.fit(X_train, y_train)\n\nPipeline(steps=[('scaler', StandardScaler()), ('svc', SVC())])\nX_test.fillna(X_test.mean(), inplace=True)\ny_test.fillna(X_test.mean(),inplace=True)\nsvc_pipe.score(X_test, y_test)\n","f746e41a":"rf_pipe = Pipeline([('scaler', StandardScaler()), ('rf',RandomForestClassifier(random_state=42))])\nrf_pipe.fit(X_train,y_train)\nPipeline(steps=[('scaler', StandardScaler()), ('rf', RandomForestClassifier(random_state=42))])\nrf_pipe.score(X_test,y_test)","0db764dd":"logistic_reg_pipe = Pipeline(steps = [('scale',StandardScaler()),('LR',LogisticRegression(random_state=42))])\nlogistic_reg_pipe.fit(X_train,y_train)\nPipeline(steps = [('scale',StandardScaler()),('LR',LogisticRegression(random_state=42))])\nlogistic_reg_pipe.score(X_test,y_test)","6e358b4f":"#RandomForestClassifier Cross-Validation\nrf_cv=cross_val_score(rf_pipe,X,y,cv=10)\n","ad22068d":"#Standard Scaler Cross-Validation\nsvc_cv = cross_val_score(svc_pipe,X,y,cv=10)\n","78aeaf2b":"#Logistic Regression Cross-Validation\nlogistic_reg_cv =cross_val_score(logistic_reg_pipe,X,y,cv=10)\n","65bb1e86":"print('Random Forest :',rf_cv)\nprint('SVM  :',svc_cv)\nprint('Logistic Regression  :',logistic_reg_cv)","c9f6695e":"# **TABLE OF CONTENT**\n\n**0 PROLOGUE**\n \n**1 IMPORTING LIBRARIES**\n\n**2 DATA DESCRIPTION AND DATA CLEANING**\n\n*2.1 Import Data*\n\n*2.2 Data types*\n\n*2.3 Missing values*\n\n*2.4 Duplicates*\n\n**3 VISUALIZATION**\n\n**4 PREDICTION**\n","7b2d0193":"**2.3 Missing Data**","c152acba":"**2.2 Describe Data**","72eeebb1":"> **0 PROLOGUE**\n\nIn this work, exploratory data analysis has been carried out for World Health Organization (WHO) stroke.\n\nFeatures\n\n* id: unique identifier\n* gender: \"Male\", \"Female\" or \"Other\"\n* age: age of the patient\n* hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* ever_married: \"No\" or \"Yes\"\n* work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* Residence_type: \"Rural\" or \"Urban\"\n* avg_glucose_level: average glucose level in blood\n* bmi: body mass index\n* smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n* stroke: 1 if the patient had a stroke or 0 if not\n","2d97a4c9":"> **1 IMPORTING LIBRARIES**\n\n1. Library **pandas** will be required to work with data in tabular representation.\n\n2. Library **numpy** will be required to round the data in the correlation matrix.\n\n3. Library **matplotlib, seaborn, plotly** required for data visualization\n","eec7b548":"> **4.PREDICTION**","e1d0400f":"**The Cross-Validation of Classification and Regression models**","37b0d056":"> **2 DATA DESCRIPTION AND DATA CLEANING**\n\nIn this block, exploratory data analysis will be carried out, data types, missing values, duplicates and also the relationship between variables will be described.\n\n**2.1 Import Data**","169e12c9":"**3. VISUALIZATION**"}}