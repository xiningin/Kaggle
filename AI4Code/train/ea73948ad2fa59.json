{"cell_type":{"3358eeec":"code","2ec885e4":"code","795e9f9f":"code","3bca1066":"code","b05ad422":"code","4dd220aa":"code","87e47f32":"code","357dd91e":"code","ec2ebb8d":"code","a205287e":"code","3f338a6e":"code","0afa00a7":"code","76b082b7":"code","c07ec344":"code","20fc700e":"markdown","c9aaf617":"markdown","3333c0e9":"markdown","562afbe6":"markdown","6d7fe907":"markdown","cb288d96":"markdown"},"source":{"3358eeec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport plotly.express as px\n# Any results you write to the current directory are saved as output.\nimport plotly.graph_objs as go","2ec885e4":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/covidcount\/Daily.csv')\ndf.head(5)","795e9f9f":"Country=['India','SouthKorea']\nlines = df.plot.line(x='Day', y=Country,title=\"First 32 days\")","3bca1066":"Country=['India','UK','Italy','Ireland','Germany','Spain','Austria']\nlines = df.plot.line(x='Day', y=Country,title=\"First 32 days\")","b05ad422":"Country=['Iran','Iraq','India']\nlines = df.plot.line(x='Day', y=Country,title=\"First 32 days\")","4dd220aa":"import folium\nfrom folium.plugins import HeatMap, HeatMapWithTime\n%matplotlib inline\ncitylat=pd.read_csv('\/kaggle\/input\/citylong\/City Long Lat4th.csv')\ncitylat.head(5)\nind_geo_data='\/kaggle\/input\/indiastates\/states2.json'","87e47f32":"m = folium.Map(location=[20, 78], zoom_start=4)\n\nfolium.Choropleth(\n    geo_data=ind_geo_data,\n    name='Confirmed cases - regions',\n    key_on='feature.properties.name',\n    fill_color='YlGn',\n    fill_opacity=0.05,\n    line_opacity=0.3,\n).add_to(m)\n\nradius_min = 2\nradius_max = 40\nweight = 1\nfill_opacity = 0.2\n\n_color_conf = 'red'\ngroup0 = folium.FeatureGroup(name='<span style=\\\\\"color: #EFEFE8FF;\\\\\">Confirmed cases<\/span>')\nfor i in range(len(citylat)):\n    lat = citylat.loc[i, 'Lat']\n    lon = citylat.loc[i, 'Long']\n    Active = citylat.loc[i, 'Count2']\n\n    _radius_conf = np.sqrt(citylat.loc[i, 'Count2'])\n    if _radius_conf < radius_min:\n        _radius_conf = radius_min\n\n    if _radius_conf > radius_max:\n        _radius_conf = radius_max\n\n    #_popup_conf = str(province) + '\\n(Confirmed='+str(filtered_data_last.loc[i, 'Confirmed']) + '\\nDeaths=' + str(death) + '\\nRecovered=' + str(recovered) + ')'\n    folium.CircleMarker(location = [lat,lon], \n                        radius = _radius_conf, \n                        color = _color_conf, \n                        fill_opacity = fill_opacity,\n                        weight = weight, \n                        fill = True, \n                        fillColor = _color_conf).add_to(group0)\n\ngroup0.add_to(m)\nfolium.LayerControl().add_to(m)\nm","357dd91e":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nfrom numpy import array\nfrom matplotlib import cm\n\nplt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(citylat['Long'])\nlt=array(citylat['Lat'])\npt=array(citylat['Count2'])\nnc=array(citylat['City'])\n\nx, y = map(lg, lt)\ncity_sizes = citylat['Count2']\nplt.scatter(x, y, s=city_sizes, marker=\"o\", c=city_sizes, cmap=cm.Dark2, alpha=0.7)\n\n\nplt.scatter(x, y, s=city_sizes, marker=\"o\", c=city_sizes, cmap=cm.Dark2, alpha=0.7)\n\n\nfor ncs, xpt, ypt in zip(nc, x, y):\n    plt.text(xpt+60000, ypt+30000, ncs, fontsize=8, fontweight='bold')\n\nplt.title('Top Cities by Corona',fontsize=20)","ec2ebb8d":"df=pd.read_csv('\/kaggle\/input\/dailystate\/CoronaState.csv')","a205287e":"State=['Telengana','Maharastra','West Bengal','Kerala','Rajasthan','UP','Karnaraka','Gujrat']\nlines = df.plot.line(x='Day', y=State,title=\"Last 20 days cumilative taking starting point as 0\")","3f338a6e":"Cases=pd.read_csv('\/kaggle\/input\/indiacorona\/StateUT.csv')\nCases.rename(columns={\"Confiremd\": \"Confirmed\"},inplace=True)\nCases.head(5)","0afa00a7":"Cases = Cases.sort_values(['Confirmed\/mn'], ascending = False).reset_index(drop=True)\nCases.drop(columns = ['Active', 'Recovered', 'Deceased','Population','Active\/mn','Recovered\/mn','Deceased\/mn','ISO']).head(10).style.background_gradient(cmap='Reds')","76b082b7":"Cases = Cases.sort_values(['Deceased\/mn'], ascending = False).reset_index(drop=True)\nCases.drop(columns = ['Active', 'Recovered', 'Confirmed','Population','Active\/mn','Recovered\/mn','Confirmed\/mn','ISO']).head(10).style.background_gradient(cmap='Reds')","c07ec344":"Cases = Cases.sort_values(['Recovered\/mn'], ascending = False).reset_index(drop=True)\nCases.drop(columns = ['Active', 'Deceased', 'Confirmed','Population','Active\/mn','Deceased\/mn','Confirmed\/mn','ISO']).head(10).style.background_gradient(cmap='Greens')","20fc700e":"# India Vesus Europe Daily new Cases","c9aaf617":"# India Vesus South Korea Daily New Cases","3333c0e9":"![image.png](attachment:image.png)","562afbe6":"# India Vesus Iraq, Iran Daily new Cases","6d7fe907":"# Use online medium in India","cb288d96":"# Confirmed Cases State Wise"}}