{"cell_type":{"5d9daac4":"code","2366a980":"code","613aa50e":"code","b85caf48":"code","11b84866":"code","d1909ced":"code","368298d2":"code","20d98295":"code","cc34bbc2":"code","91ed8408":"code","53fce0fd":"code","3f20a880":"code","1456eb9b":"code","7293631a":"code","13ef8ded":"code","a5eaabab":"code","c7a98604":"code","d91af9e2":"code","38d55390":"code","2e98ff73":"code","0f9b5a73":"code","35f81981":"code","4ad692cc":"code","d6f27518":"code","a04f7e49":"code","ef211f41":"markdown","c08102d7":"markdown","dd55455a":"markdown","b8a2b217":"markdown","0209b19e":"markdown","736e9cf5":"markdown","0f5f032f":"markdown","8fa682e3":"markdown","50a53a2b":"markdown","831a6a55":"markdown","a824f4b7":"markdown","e4af3293":"markdown"},"source":{"5d9daac4":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy import stats\nfrom geopy.distance import great_circle\nimport matplotlib.ticker as ticker\nimport os","2366a980":"df = pd.read_csv(\"..\/input\/airbnb-berlin\/listings.csv\")\ndf.head()","613aa50e":"df.describe()","b85caf48":"#To see what data types we have\ndf.info()","11b84866":"#To detect the missing data\n\ndf.isnull().sum()","d1909ced":"#To visualise the missing values\nfig = plt.figure(figsize=(12,8))\nsns.heatmap(df.isnull())\nplt.show()","368298d2":"#Dealing with missing values\n#For the sake of experiment I will remove a couple of price values from the df slice\ndf3 = df[['neighbourhood','room_type','price']]\ndf_missingvalues = df3[df3.neighbourhood =='Alexanderplatz'].head(10)\ndf_missingvalues.loc[48:53,'price'] = 0\ndf_missingvalues\n\n#use the average value (we work with a slice of the data here)\n\ndf_missingvalues[df_missingvalues.room_type == \"Entire home\/apt\"].mean()","20d98295":"#replasing the data\n#location based imputation\ndf_missingvalues.loc[48,'price'] = 48.5\ndf_missingvalues","cc34bbc2":"#fill in all missing values simultaneusly with a single value \n\ndf_missingvalues.loc[48:53,'price'] = np.nan \nmean = df_missingvalues['price'].mean() #(use of mean or median would depend on the data and presence of outliers)\ndf_missingvalues['price'].fillna(mean, inplace=True)\ndf_missingvalues","91ed8408":"#Predictive filling using the interpolate() method will perform a linear interpolation to 'find' the missing values\ndf_missingvalues.loc[48:53,'price'] = np.nan \ndf_missingvalues['price'].interpolate(inplace=True)\ndf_missingvalues","53fce0fd":"df['room_type'].value_counts()","3f20a880":"df['neighbourhood_group'].value_counts().head()","1456eb9b":"#Using box plots to analyse our data\n\nfig = plt.figure(figsize=(12,8))\nsns.boxplot(x='room_type',y='price',data=df, showfliers=False);","7293631a":"#Adding a Distance from centre column\n\ndef distance_from_centre(lat, lon):\n    berlin_centre = (52.520008, 13.404954)\n    apartment_spot = (lat, lon)\n    return round(great_circle(berlin_centre, apartment_spot).km, 1)\n\ndf[\"distance\"] = df.apply(lambda x: distance_from_centre(x.latitude, x.longitude), axis=1)\ndf.head()","13ef8ded":"fig = plt.figure(figsize=(12,8))\nplt.scatter(df['distance'],df['price'])\nplt.xlim(0,30)\nplt.ylim(0,6500)\nplt.xlabel('Distance from centre')\nplt.ylabel('Price')\nplt.show()","a5eaabab":"f,ax = plt.subplots(figsize=(17,8))\nax = sns.swarmplot(y= df.index,x= df.minimum_nights)\nn = 5\n\nfor index, label in enumerate(ax.xaxis.get_ticklabels(), 1):\n    if index % n != 0:\n        label.set_visible(False)\n\nplt.show()","c7a98604":"fig = plt.figure(figsize=(12,8))\nplt.hist(df['price'], bins=1000)\nplt.xlim(0,300)\nplt.xlabel('Price')\nplt.ylabel('Number of properties')\nplt.grid()\nplt.show()","d91af9e2":"#To find the average price per neighbourhood\n\ndf1 = df[['neighbourhood_group','price', 'distance']]\ndf_group = df1.groupby(['neighbourhood_group'],as_index=False).mean()\ndf_group.head(15)","38d55390":"#Or group by location and property type to see the average price per each type\ndf2 = df[['neighbourhood_group','room_type','price']]\ndf_group2 = df2.groupby(['neighbourhood_group','room_type'],as_index=False).mean()\ndf_group2.head()","2e98ff73":"#The above can be converted to pivot\ndf_pivot = df_group2.pivot(index='neighbourhood_group',columns='room_type')\ndf_pivot.head()","0f9b5a73":"df_var = df1[(df1['neighbourhood_group'] == 'Pankow') | (df1['neighbourhood_group'] == 'Mitte')]\ndf_vartemp = df_var[['neighbourhood_group','price']].groupby(['neighbourhood_group'])\nstats.f_oneway(df_vartemp.get_group('Pankow')['price'],df_vartemp.get_group('Mitte')['price'])","35f81981":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap","4ad692cc":"map_test = df.head(200)","d6f27518":"m = folium.Map(location=[52.52, 13.4], zoom_start = 12)\n\nheat_data = [[row['latitude'],row['longitude']] for index, row in\n             map_test[['latitude', 'longitude']].iterrows()]\n\nhh =  HeatMap(heat_data).add_to(m)\n\nm","a04f7e49":"f,ax = plt.subplots(figsize=(12,8))\nax = sns.scatterplot(y=df.latitude,x=df.longitude,hue=df.availability_365)\nplt.show()","ef211f41":"### Missing values","c08102d7":"The purpose of this kernel is to show EDA steps and initial concludions drawn from the AirBnB Berlin listings data. \nIt includes exploration and summary of the main data types, dealing with missing values as well as some look into the price variable and its potential predictors, such as property type and distance from centre. It also shows how we can visualize the distribution of properties by neighbourhood and by availability. \n\nBased on the map visualisations it might be interesting to further consider if there is any noticeable difference in occupancy rates among different areas, what might be the reason?\n\n\nData Source \n\nThis [data](http:\/\/insideairbnb.com\/get-the-data.html) was created by Murray Cox.\n","dd55455a":"### Summary of categorical data","b8a2b217":"## Distribution of price levels\nThe histogram shows the distribution of price levels in Berlin.","0209b19e":"Hope this was helpful:)","736e9cf5":"## Distance from centre and property prices \nThe scatter plot confirms the presumption that higher price properties are concentrated in more central areas (let's use areas because a centre is hard to define for the city of Berlin).","0f5f032f":"### Property availability by area","8fa682e3":"### Analysis of variance\nTo check the variance of prices in Mitte and Pankow. The F-test score (high) and the p value (low) should confirm that there is no large variance between the two prices.","50a53a2b":"### Grouping of data to find out more about price levels","831a6a55":"### Visualizing the data with folium\nWhere are the properties concentrated?","a824f4b7":"## Distance from centre","e4af3293":"## Minimum nights distribution \nThe visible concentration of minimum nights, other than the first 7 to 20 days, is around whole months. "}}