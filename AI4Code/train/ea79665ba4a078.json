{"cell_type":{"9dd46a63":"code","7532b079":"code","1e7e61d2":"code","6eafa00c":"code","6a305cc8":"code","28a42519":"code","5dab19f6":"code","d093698a":"code","f29c45e6":"code","436174c4":"code","1c34bc8a":"code","1c4355e9":"code","4741e665":"code","1b33cc2e":"code","1d6d3cba":"code","03710e70":"code","80b81163":"code","74f72118":"markdown","c09057d2":"markdown","97b62429":"markdown","69062427":"markdown","ec21f569":"markdown"},"source":{"9dd46a63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7532b079":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore', category=UserWarning, module='bs4')\n","1e7e61d2":"# load data\ntrain = pd.read_csv('\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip', sep='\\t')\ntest = pd.read_csv('\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip', sep='\\t')\ntrain.shape, test.shape","6eafa00c":"def show_info(data, is_matrix_transpose=False):\n    # basic shape\n    print('data shape is: {}   sample number {}   attribute number {}\\n'.format(data.shape, data.shape[0], data.shape[1]))\n    # attribute(key)\n    print('data columns number {}  \\nall columns: {}\\n'.format(len(data.columns) ,data.columns))\n    # value's null\n    print('data all attribute count null:\\n', data.isna().sum())\n    # data value analysis and data demo\n    if is_matrix_transpose:\n        print('data value analysis: ', data.describe().T)\n        print('data demo without matrix transpose: ', data.head().T)\n    else:\n        print('data value analysis: ', data.describe())\n        print('data demo without matrix transpose: ', data.head())\n\nshow_info(train)\nshow_info(test)","6a305cc8":"# plot the sentiment in train\ntrain['Sentiment'].value_counts().plot.bar()","28a42519":"from bs4 import BeautifulSoup\nimport re\nfrom tqdm import tqdm\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nlemmatizer = WordNetLemmatizer()","5dab19f6":"# # split by split() and use stopwords\n# def data_preprocessing(df):\n#     reviews = []\n#     for raw in tqdm(df['Phrase']):\n#         # remove html tag\n#         text = BeautifulSoup(raw, 'lxml').get_text()\n#         # remove non-letters\n#         letters_only = re.sub('[^a-zA-Z]', ' ', text)\n#         # split(lowercase)\n#         words = letters_only.lower().split()\n#         # get stoplist words\n#         stops = set(stops.words('english'))\n#         # remove stopwords \/ get non-stopwords list\n#         non_stopwords = [word for word in words if not word in stops]\n#         # lemmatize word to its lemma\n#         lemma_words = [lemmatizer.lemmatize(word) for word in words]\n#         reviews.append(lemma_words)\n#     return reviews\n\n\n# split by nltk.word_tokenizer\ndef data_preprocessing(df):\n    reviews = []\n    for raw in tqdm(df['Phrase']):\n        # remove html tag\n        text = BeautifulSoup(raw, 'lxml').get_text()\n        # remove non-letters\n        letters_only = re.sub('[^a-zA-Z]', ' ', text)\n        # split(lowercase)\n        words = word_tokenize(letters_only.lower())\n        # get stoplist words\n        stops = set(stopwords.words('english'))\n        # remove stopwords \/ get non-stopwords list\n        non_stopwords = [word for word in words if not word in stops]\n        # lemmatize word to its lemma\n        lemma_words = [lemmatizer.lemmatize(word) for word in non_stopwords]    \n        reviews.append(lemma_words)\n    return reviews\n\n\n# data cleaning for train and test\n%time train_sentences = data_preprocessing(train)\n%time test_sentences = data_preprocessing(test)\nlen(train_sentences), len(test_sentences)","d093698a":"from keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence","f29c45e6":"# extract label columns and to_categorical\ntarget = train.Sentiment.values\ny_target = to_categorical(target)\nnum_classes = y_target.shape[1]","436174c4":"# train set => split to train and validation sets\nX_train, X_val, y_train, y_val = train_test_split(train_sentences, y_target, test_size=0.2, stratify=y_target)","1c34bc8a":"# keras tokenzier initialization\nunique_words = set()\nlen_max = 0\nfor sent in tqdm(X_train):\n    unique_words.update(sent)\n    if len_max < len(sent):\n        len_max = len(sent)\nlen(list(unique_words)), len_max","1c4355e9":"# transfer to keras tokenizer\ntokenizer = Tokenizer(num_words=len(list(unique_words)))\ntokenizer.fit_on_texts(list(X_train))\n\nX_train = tokenizer.texts_to_sequences(X_train)\nX_val = tokenizer.texts_to_sequences(X_val)\nX_test = tokenizer.texts_to_sequences(test_sentences)\n\nX_train = sequence.pad_sequences(X_train, maxlen=len_max)\nX_val = sequence.pad_sequences(X_val, maxlen=len_max)\nX_test = sequence.pad_sequences(X_test, maxlen=len_max)\n\nX_train.shape, X_val.shape, X_test.shape","4741e665":"from keras.callbacks import EarlyStopping\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\nfrom keras.optimizers import Adam","1b33cc2e":"early_stopping = EarlyStopping(min_delta=0.001, mode='max', monitor='val_acc', patience=2)\ncallback = [early_stopping]","1d6d3cba":"# build model\nmodel = Sequential()\nmodel.add(Embedding(len(list(unique_words)), 300, input_length=len_max))\nmodel.add(LSTM(128, dropout=0.5, recurrent_dropout=0.5, return_sequences=True))\nmodel.add(LSTM(64, dropout=0.5, recurrent_dropout=0.5, return_sequences=False))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.005), metrics=['accuracy'])\nmodel.summary()","03710e70":"%%time\n\n# fit\nhistory = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10, batch_size=256, verbose=1, callbacks=callback)","80b81163":"# submit\ny_pred = model.predict_classes(X_test)\nsubmission = pd.read_csv('\/kaggle\/input\/sentiment-analysis-on-movie-reviews\/sampleSubmission.csv')\nsubmission.Sentiment = y_pred\nsubmission.to_csv('submission.csv', index=False)","74f72118":"## data preprocessing\n\n* data cleaning\n    * use BeautifulSoup to remove html content\n    * remove non-letters\n    * split\n        * split\n        * nltk.word_tokenize\n* tokenize\n* lemmatize","c09057d2":"## Model\n\n* early_stopping\n* build model based on keras and compile\n* fit, predict, submit","97b62429":"check number of all kinds sentiment","69062427":"## Train prework\n\n* use to_categorical to encode train Label(target)\n* train split to train and validation\n* keras tokenizer initialization\n    * num and max length\n    * transfer to keras tokenizer","ec21f569":"## prework\n\n* import basic dependencies\n* load data\n* check data"}}