{"cell_type":{"65a93fbf":"code","5985ec9b":"code","303f2efc":"code","0cd8bc7c":"code","6a04de42":"code","c42615f9":"code","cfe603da":"code","93d8c53d":"code","30288245":"code","05385ac8":"code","7ce3f5b7":"code","4361e05c":"code","9edd9bbd":"code","93bb622a":"markdown"},"source":{"65a93fbf":"# source \n# !wget https:\/\/drive.google.com\/file\/d\/1VT-8w1rTT2GCE5IE5zFJPMzv7bqca-Ri","5985ec9b":"# some images\n%ls '..\/input\/imageclassifier\/dataset\/' | head -n 5","303f2efc":"image_dir = '..\/input\/imageclassifier\/dataset\/'","0cd8bc7c":"from keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.models import Model\nimport numpy as np\nfrom os import listdir, walk\nfrom os.path import isfile, join\nimport itertools\nimport torch","6a04de42":"def getAllFilesInDirectory(directoryPath: str):\n    return [(directoryPath + \"\/\" + f) for f in listdir(directoryPath) if isfile(join(directoryPath, f))]","c42615f9":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\ndef show_sample(img_path):\n    img = mpimg.imread(img_path)\n    imgplot = plt.imshow(img)","cfe603da":"import numpy as np\nimport matplotlib.pyplot as plt\ndef show_batch(data_list, invert=True):\n    w=10\n    h=10\n    columns = 4\n    rows = 5\n    fig=plt.figure(figsize=(8, 8))\n    for i in range(1, columns*rows +1):\n        img = mpimg.imread(data_list[i])\n        fig.add_subplot(rows, columns, i)\n        plt.imshow(img)\nplt.show()","93d8c53d":"dataset_images = getAllFilesInDirectory(image_dir)","30288245":"show_sample(dataset_images[0])","05385ac8":"show_batch(dataset_images[20:41])","7ce3f5b7":"def predict(img_path : str, model: Model):\n    img = image.load_img(img_path, target_size=(224, 224))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    x = preprocess_input(x)\n    return model.predict(x)\n\ndef findDifference(f1, f2):\n    return np.linalg.norm(f1-f2)\n\ndef findDifferences(feature_vectors):\n    similar: dict = {}\n    keys = [k for k,v in feature_vectors.items()]\n    min : dict = {}\n    for k in keys:\n        min[k] = 10000 #10000000\n    possible_combinations=list(itertools.combinations(keys, 2))\n    for k,v in possible_combinations:\n       diff=findDifference(feature_vectors[k],feature_vectors[v])\n       if(diff < min[k]):\n           min[k] = diff\n           similar[k] = v\n           min[v] = diff\n           similar[v] = k\n    return similar \n\ndef driver():\n    similar = {}\n    feature_vectors: dict = {}\n    model = ResNet50(weights='imagenet')\n    for img_path in getAllFilesInDirectory(image_dir):\n        feature_vectors[img_path] = predict(img_path,model)[0]\n    results=findDifferences(feature_vectors)\n    for k,v in results.items():\n        if k in similar.keys():\n            similar[k] = similar.get(k).append(v)\n        else:\n            similar[k] = [v]\n#         print(k +\" is most similar to: \"+ v)\n    return similar\n#     print('Predicted:', decode_predictions(preds, top=3)[0])\n\n","4361e05c":"similiarity = driver()","9edd9bbd":"break_counter = 10\ncounter = 0\nfor k in similiarity.keys():\n    columns = 2\n    rows = 1\n    img_list = [k,similiarity[k][0]]\n    fig=plt.figure(figsize=(8, 8))\n    for i in range(1, columns*rows +1):\n        img = mpimg.imread(img_list[i-1])\n        fig.add_subplot(rows, columns, i)\n        plt.imshow(img)\n    if break_counter == counter:\n        break\n    counter+=1","93bb622a":"# Data Analysis"}}