{"cell_type":{"5624cd6d":"code","cdf56971":"code","c9723fe9":"code","3d9db79d":"code","c3dd9da3":"code","4e89fc13":"code","9f0253c1":"code","7754d5ee":"code","85a6ed64":"code","796b2397":"code","2ccd7319":"code","cf967055":"code","239ae7a6":"code","87b72a59":"code","bacfb085":"code","2cd8ed30":"code","84c632b3":"code","5eab99af":"code","d9515d4f":"code","cc314893":"code","c66c6cf3":"code","c099a1ad":"code","41a4e0d2":"code","2858c771":"code","98874d5d":"code","3872aca3":"code","9ef55f5a":"code","cb7ca60e":"code","e7d3738a":"code","ecf97bc6":"code","29d54e5b":"code","98ded6b6":"code","98f054f9":"code","176b1bdd":"code","66b4bd08":"code","060fd6a1":"code","a18bf9ca":"code","40dafd27":"code","a8b94198":"code","786d4384":"code","41c07570":"code","24bd663c":"markdown","6bb84008":"markdown","2daf68c3":"markdown","56a1bc91":"markdown","45f52bdd":"markdown","d1f259a5":"markdown"},"source":{"5624cd6d":"!pip install bayesian-optimization","cdf56971":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\nnp.random.RandomState(seed=1)\n\n","c9723fe9":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\ntrain_Id=train.Id\ntest_Id=test.Id\ntrain=train.drop(['Id'],axis=1)\ntest=test.drop(['Id'],axis=1)","3d9db79d":"train.head()","c3dd9da3":"train.describe()","4e89fc13":"train.info()","9f0253c1":"f, ax = plt.subplots(figsize=(15, 12))\ncorr=train.corr()\nsns.heatmap(corr)","7754d5ee":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","85a6ed64":"\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\nsns.distplot(train.SalePrice)","796b2397":"sns.pairplot(train[train.dtypes[train.dtypes!=\"object\"].index])","2ccd7319":"all_data=pd.concat([train,test])\nmissing=(all_data.isnull().sum().sort_values(ascending=False)\/len(all_data))[:35]\nmissing_data = pd.DataFrame({'Missing Ratio' :missing})\nmissing_data.head(35)","cf967055":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=missing.index,y=missing)\nplt.show()","239ae7a6":"all_data[missing.index].head(40)","87b72a59":"for cols in ('MiscFeature','PoolQC','Alley','Fence','BsmtFinType1','KitchenQual','BsmtCond','BsmtQual','BsmtExposure','BsmtFinType2','GarageQual','GarageFinish','GarageCond','GarageType','FireplaceQu','MasVnrType','Exterior2nd'):\n    all_data[cols]=all_data[cols].fillna(\"None\")","bacfb085":"for cols in ('GarageYrBlt','MasVnrArea','BsmtHalfBath','BsmtFullBath','GarageCars','GarageArea','TotalBsmtSF','BsmtUnfSF','BsmtFinSF2','BsmtFinSF1'):\n    all_data[cols]=all_data[cols].fillna(0)","2cd8ed30":"for cols in ('MSZoning','Electrical','Exterior2nd','Exterior1st','SaleType'):\n    all_data[cols]=all_data[cols].fillna(all_data[cols].mode()[0])\n    ","84c632b3":"\nall_data=all_data.drop(['Utilities'],axis=1)\nall_data['Functional']=all_data['Functional'].fillna('Typ')\nall_data['LotFrontage']=all_data.groupby(['Neighborhood']).transform(\n    lambda x: x.fillna(x.median())\n)\n","5eab99af":"missing=(all_data.isnull().sum().sort_values(ascending=False)\/len(all_data))[:35]\nmissing_data = pd.DataFrame({'Missing Ratio' :missing})\nmissing_data.head(5)","d9515d4f":"all_data.head(20)","cc314893":"all_data['MSSubClass']=all_data['MSSubClass'].apply(str)\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\nall_data['YrSold']=all_data['YrSold'].apply(str)\nall_data['MoSold']=all_data['MoSold'].apply(str)","c66c6cf3":"from sklearn.preprocessing import LabelEncoder\n\ncols_for_lab_enc=('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor c in cols_for_lab_enc:\n    le=LabelEncoder()\n    le.fit(list(all_data[c].values))\n    all_data[c] = le.transform(list(all_data[c].values))\n\n","c099a1ad":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\nall_data['haspool'] = all_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\nall_data['Total_sqr_footage'] = (all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'] +\n                                 all_data['1stFlrSF'] + all_data['2ndFlrSF'])\n\nall_data['Total_Bathrooms'] = (all_data['FullBath'] + (0.5 * all_data['HalfBath']) +\n                               all_data['BsmtFullBath'] + (0.5 * all_data['BsmtHalfBath']))\n\nall_data['Total_porch_sf'] = (all_data['OpenPorchSF'] + all_data['3SsnPorch'] +\n                              all_data['EnclosedPorch'] + all_data['ScreenPorch'] +\n                              all_data['WoodDeckSF'])","41a4e0d2":"all_data.HouseStyle.unique()","2858c771":"num_feat=all_data.dtypes[all_data.dtypes!=\"object\"].index\nnum_feat","98874d5d":"skews_col=all_data[num_feat].skew().sort_values(ascending=False)\nskews_col = skews_col[abs(skews_col) > 0.75]\nskews_col","3872aca3":"from scipy.special import boxcox1p\nfrom scipy.stats import boxcox\nfor c in skews_col.index:\n    all_data[c]=boxcox1p(all_data[c],0.1)\n#     all_data[c]=boxcox(all_data[c].apply(lambda x: x+1 ))[0]","9ef55f5a":"skews_col=all_data[num_feat].skew().sort_values(ascending=False)\nskews_col = skews_col[abs(skews_col) > 0.5]\nskews_col","cb7ca60e":"# from sklearn.preprocessing import StandardScaler\n# for c in num_feat:\n#     sc=StandardScaler()\n#     all_data[c]=sc.fit_transform(np.array([all_data[c].values]).T)","e7d3738a":"all_data.head(20)","ecf97bc6":"y=train['SalePrice']\nall_data=all_data.drop(['SalePrice'],axis=1)\nall_data=pd.get_dummies(all_data)\ntrain=all_data[:len(train)]\ntest=all_data[len(train):]\n# test.head(20)","29d54e5b":"f, ax = plt.subplots(figsize=(30, 30))\ncorr2=pd.concat([train,y],axis=1).corr()\nsns.heatmap(corr2)","98ded6b6":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC,ElasticNet,Lasso,Ridge\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split,GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import SVR\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\nfrom functools import partial\nfrom sklearn.svm.libsvm import cross_validation\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom mlxtend.regressor import StackingCVRegressor","98f054f9":"X_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.2)\nkfolds = KFold(n_splits=10, shuffle=True)\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\ndef rmsle_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, train.values, y.values, scoring=\"neg_mean_squared_error\", cv = kfolds.get_n_splits(train.values)))\n    return rmse","176b1bdd":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n    \n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","66b4bd08":"class AvarageModels(BaseEstimator, TransformerMixin, RegressorMixin):\n    def __init__(self,models):\n        self.models=models\n    def fit(self,X,y):\n        self.models_ = [clone(x) for x in self.models]\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    def predict(self,X):\n        prediction= np.column_stack([m.predict(X) for m in self.models_])\n        return np.mean(prediction,axis=1)","060fd6a1":"class StackNet(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models,meta_final_model, meta_models1=None, meta_models2=None,add_prev_out=True, n_folds=10):\n        self.base_models = base_models\n        self.meta_models1 = meta_models1\n        self.meta_models2 = meta_models2\n        self.meta_final_model=meta_final_model\n        self.n_folds = n_folds\n        self.add_prev_out=add_prev_out\n   \n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        if self.meta_models1!=None:\n            self.meta_models1_ = [list() for x in self.meta_models1]\n        if self.meta_models2!=None:\n            self.meta_models2_ = [list() for x in self.meta_models2]\n        self.meta_final_model_=clone(self.meta_final_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n       \n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        \n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n        if self.add_prev_out:\n            out_of_fold_predictions=np.hstack((out_of_fold_predictions,X))\n        out_of_fold_predictions2 = np.zeros((X.shape[0],len(self.meta_models1)))\n       \n        if self.meta_models1!=None:\n            for i, model in enumerate(self.meta_models1):\n\n                for train_index, holdout_index in kfold.split(out_of_fold_predictions, y):\n                    instance = clone(model)\n                    self.meta_models1_[i].append(instance)\n                    instance.fit(out_of_fold_predictions[train_index], y[train_index])\n                    y_pred = instance.predict(out_of_fold_predictions[holdout_index])\n                    out_of_fold_predictions2[holdout_index, i] = y_pred                           \n            if self.add_prev_out:\n                out_of_fold_predictions2=np.hstack((out_of_fold_predictions2,X))\n        else:\n            out_of_fold_predictions2=out_of_fold_predictions\n            out_of_fold_predictions3 = np.zeros((X.shape[0],len(self.meta_models2)))\n        \n        \n        if self.meta_models2!=None:\n            for i, model in enumerate(self.meta_models2):\n\n                for train_index, holdout_index in kfold.split(out_of_fold_predictions2, y):\n                    instance = clone(model)\n                    self.meta_models2_[i].append(instance)\n                    instance.fit(out_of_fold_predictions2[train_index], y[train_index])\n                    y_pred = instance.predict(out_of_fold_predictions2[holdout_index])\n                    out_of_fold_predictions3[holdout_index, i] = y_pred                           \n            if self.add_prev_out:\n                out_of_fold_predictions3=np.hstack((out_of_fold_predictions3,X))         \n        else:\n            out_of_fold_predictions3=out_of_fold_predictions2\n                                            \n        self.meta_final_model_.fit(out_of_fold_predictions3, y)\n        return self\n   \n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_])\n        if self.add_prev_out:\n            meta_features=np.hstack((meta_features,X))\n            \n        if self.meta_models1!=None:   \n            meta_features2 = np.column_stack([\n                np.column_stack([model.predict(meta_features) for model in meta_models1_]).mean(axis=1)\n                for meta_models1_ in self.meta_models1_ ])\n            if self.add_prev_out:\n                meta_features2=np.hstack((meta_features2,X))\n        else:\n            meta_features2=meta_features\n            \n        if self.meta_models2!=None:  \n            meta_features3 = np.column_stack([\n                np.column_stack([model.predict(meta_features2) for model in meta_models2_]).mean(axis=1)\n                for meta_models2_ in self.meta_models2_ ])\n            if self.add_prev_out:\n                meta_features3=np.hstack((meta_features3,X))\n        else:\n            meta_features3=meta_features2\n            \n            \n        return self.meta_final_model_.predict(meta_features3)","a18bf9ca":"# def fit_with(alpha,l1_ratio,max_iter):\n#     enet=make_pipeline(RobustScaler(),ElasticNet(alpha=alpha,l1_ratio=l1_ratio,max_iter=700+int(max_iter*3900)))\n#     enet.fit(X_train,y_train)\n#     pred=rmsle_cv(enet).mean()\n#     return -pred\n\n# pbounds = {'alpha': (0, 0.05),'l1_ratio':(0.7,1),'max_iter':(0,1) }\n# optimizer = BayesianOptimization(\n#     f=fit_with,\n#     pbounds=pbounds,\n#     random_state=1,\n# )\n\n# optimizer.maximize(init_points=100, n_iter=350, acq=\"poi\", xi=1e-2)\n# print(optimizer.max)","40dafd27":"max_iter=1e7\nl1_ratio=[x\/100 for x in range(65,100)]\nalphas=[y*(10**-x) for x in range(2,6) for y in range(1,9)]\nC=[x for x in range(1,30,3)]\nepsilon=[y*(10**-x) for x in range(2,6) for y in range(1,9)]\ngamma=[y*(10**-x) for x in range(2,6) for y in range(1,9)]\n\nxgb_1=xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nlgb_1=lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nenet=make_pipeline(RobustScaler(),ElasticNet(alpha=0.0005, l1_ratio=.9))\nlasso=make_pipeline(RobustScaler(),Lasso(alpha =0.0005))\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","a8b94198":"am = AvarageModels((enet,lasso,GBoost,KRR))\nsav=StackingAveragedModels((enet,GBoost,KRR,lasso),lasso)\nsn=StackNet((enet,GBoost,KRR,lasso,am,sav),lasso,(KRR,lasso),add_prev_out=False,n_folds=15)","786d4384":"w=rmsle_cv(enet)\nprint(w.mean(),w.std())\nw=rmsle_cv(lasso)\nprint(w.mean(),w.std())\nw=rmsle_cv(GBoost)\nprint(w.mean(),w.std())\nw=rmsle_cv(KRR)\nprint(w.mean(),w.std())\nw=rmsle_cv(am)\nprint(w.mean(),w.std())\nw=rmsle_cv(sav)\nprint(w.mean(),w.std())\nxgb_1.fit(X_train.values,y_train.values)\nw=rmsle(xgb_1.predict(X_test.values),y_test.values)\nprint(w)\nlgb_1.fit(X_train.values,y_train.values)\nw=rmsle(lgb_1.predict(X_test.values),y_test.values)\nprint(w)\nsn.fit(X_train.values,y_train.values)\nw=rmsle(sn.predict(X_test.values),y_test.values)\nprint(w)","41c07570":"xgb_1.fit(train,y)\nlgb_1.fit(train,y)\nsn.fit(train.values,y.values)\npredicted_prices=np.expm1(sn.predict(test.values))*0.7+np.expm1(xgb_1.predict(test))*0.00+np.expm1(lgb_1.predict(test))*0.3\nmy_submission = pd.DataFrame({'Id': test_Id, 'SalePrice': predicted_prices})\n\nmy_submission.to_csv('submission.csv', index=False)\n","24bd663c":"## Load data","6bb84008":"## Building and Evaluate models","2daf68c3":"## EDA, FE and handling missing values","56a1bc91":"## Table of contents\n* [Import Dependencies](#Import-Dependencies)\n* [Load data](#Load-data)\n* [EDA, FE and handling missing values](#EDA,-FE-and-handling-missing-values)\n* [Building and Evaluate models](#Building-and-Evaluate-models)\n* [Training final models and test resoult export](#Training-final-models-and-test-resoult-export)\n","45f52bdd":"## Training final models and test resoult export","d1f259a5":"## Import Dependencies"}}