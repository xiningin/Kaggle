{"cell_type":{"5d437585":"code","d8c2e5da":"code","d59f7313":"code","35ddffc6":"code","c02a74b4":"code","99e0085c":"code","67215356":"code","97863d34":"code","2080ffde":"code","4e20ab1d":"code","740e933a":"code","7c81cdca":"code","60a60bf9":"code","8c937265":"code","b3e70c0a":"code","3f515b2e":"code","d57e5b87":"code","b4f76060":"code","e7188018":"code","eb100f1f":"code","e80bb99c":"code","8fab76ae":"code","c3a6cd71":"code","8589b0b6":"code","05a3a24f":"code","c2483d61":"code","9a28da14":"markdown","8102c4e1":"markdown","2d17f5e7":"markdown","355b177d":"markdown","c0daccf0":"markdown","fb6676c9":"markdown","ad2ef3af":"markdown","6e41657f":"markdown","13f54446":"markdown","e15c5c01":"markdown","5f68b860":"markdown","b7c2dc2c":"markdown","c6ee28e1":"markdown","cfbcf7e6":"markdown"},"source":{"5d437585":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8c2e5da":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\ncolors = ['#B90276','#50237F', '#005691', '#008ECF','#E20015', '#00A8B0', '#78BE20', '#006249', '#525F6B']\n\nsns.set_palette(sns.color_palette(colors))\n","d59f7313":"data = pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')\ndf = pd.DataFrame(data)\ndf.head()","35ddffc6":"df = df.drop(['Unnamed: 0','customerID'], 1)","c02a74b4":"df.info()","99e0085c":"def convert_x(x):\n    try:\n        return float(x)\n    except:\n        return np.NaN\ndf['TotalCharges'] = df['TotalCharges'].apply(convert_x)","67215356":"object1 = df.select_dtypes(include = 'object').columns","97863d34":"for col in object1:\n    print('\\n', col, '\\n', df[col].unique(),'\\n')","2080ffde":"df.isnull().sum()","4e20ab1d":"df.TotalCharges = df['TotalCharges'].fillna(df['TotalCharges'].median())","740e933a":"df.TotalCharges.shape","7c81cdca":"sns.countplot(x='Churn', data = df)","60a60bf9":"i = 1\nplt.figure(figsize = (15,25))\nfor col in object1:\n    plt.subplot(6,3,i)\n    sns.countplot(x = 'Churn',hue = df[col] , data = df)\n    i +=1","8c937265":"float1 = df.select_dtypes(exclude = 'object').columns\nfloat1","b3e70c0a":"i = 1\nplt.figure(figsize = (15,10))\nfor col in float1:\n    plt.subplot(2,2,i)\n    sns.histplot(x = df[col])\n    i +=1","3f515b2e":"plt.figure(figsize=(10,7))\nfor col in object1:\n    g = sns.FacetGrid(data, col=col, hue=\"Churn\", palette = 'dark')\n    g.map(sns.kdeplot, \"MonthlyCharges\",alpha=.7)\n    plt.figure(figsize=(15,7))\n    g.add_legend()","d57e5b87":"plt.figure(figsize=(10,7))\nfor col in object1:\n    g = sns.FacetGrid(data, col=col, hue=\"Churn\")\n    g.map(sns.kdeplot, \"tenure\",alpha=.7)\n    plt.figure(figsize=(15,7))\n    g.add_legend()","b4f76060":"df.Churn = df['Churn'].map({'Yes':1, 'No':0})","e7188018":"df1 = pd.get_dummies(df)","eb100f1f":"from sklearn. preprocessing import LabelEncoder, StandardScaler\n#le = LabelEncoder()\nsc = StandardScaler()\n\n    \ndf1.head()","e80bb99c":"plt.figure(figsize = (15,10))\ncorr = df1.corr()\nsns.heatmap(corr, linewidth = 0.7, cmap = 'coolwarm')","8fab76ae":"X = df1.drop(['Churn'],1)\ny = df1.Churn","c3a6cd71":"from imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler(random_state=42, replacement=True)# fit predictor and target variable\nX_rus, y_rus = rus.fit_resample(X, y)","8589b0b6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)","05a3a24f":"scaler = StandardScaler()\nscaler.fit(X_train, y_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","c2483d61":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score , plot_roc_curve\nfrom xgboost import XGBClassifier\n\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nrf = RandomForestClassifier(random_state=43)\nad = AdaBoostClassifier(base_estimator =rf)\ndt = DecisionTreeClassifier()\nkn = KNeighborsClassifier()\nrbf = RBF()\ngp = GaussianProcessClassifier(1.0 * RBF(1.0))\nmlp = MLPClassifier(alpha=1, max_iter=1000)\ngnb = GaussianNB()\nsvc = SVC(random_state = 43, C = 10, gamma = 0.1, kernel ='rbf')\nxgb = XGBClassifier(label_encoder = False)\n\nmodels = [rf,ad, dt, kn, svc, mlp]\nfor model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    scores = cross_val_score(model, X, y, cv=5).mean().round(3)\n    accuracy = metrics.classification_report(y_test, y_pred)\n    #f1score = metrics.f1_score(y_test, y_pred).round(3)\n    print(model, '\\n', 'REPORT:','\\n', accuracy,'\\n', 'mean_score:',scores, '\\n' )\n","9a28da14":"# Under Sampling the Data","8102c4e1":"# Visualization of basis of Churn","2d17f5e7":"# FacetGrid on Basis of Tenure & other parameters","355b177d":"***Remaping Churns in to 1 & 0. 1 is Yes, 0 is no***\n\n***I am doing this because in the next step i will be useing get dummies function, if I don't do it in get dummies I will get two columns i.e. Churn_yes, & Churn_no. Then it will be difficult to set the target in the ML alogorithms***","c0daccf0":"# Corelation plot after using get dummies","fb6676c9":"# What are the unique values in our Categorical columns?","ad2ef3af":"# As seen above traget data is imbalanced","6e41657f":"# Are there any null values?","13f54446":"# REading the Data","e15c5c01":"# Fitting the data on different classification Model","5f68b860":"# Count Plot of our Target Column \"Churn shown that the data is imblanced\n***In Such cases we have to under sample or over sample the data.***\n\n***Since the data has more count of people NOT churning out, this will train the model to identify people who are NOT churning***\n***ML Model work well when there is Balance data i.e. churn 'yes' & 'no' are almost equal***","b7c2dc2c":"# Dropping unwanted columns","c6ee28e1":"# Filling the Null Values with median","cfbcf7e6":"# FacetGrid on Basis of MonthlyCharges & other parameters"}}