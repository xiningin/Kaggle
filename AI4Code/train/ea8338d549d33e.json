{"cell_type":{"b89ff7b7":"code","8acdf1f6":"code","65829168":"code","7e48e0d9":"code","0f4c3180":"code","5303811f":"code","260b7ad5":"code","a8072a26":"code","b50c372c":"code","5a438717":"code","9e3ad6e4":"code","ef575f23":"code","6a2ed85a":"code","b1dfb253":"code","b9785f24":"code","febd73ff":"code","2ba575cd":"code","2431e69e":"code","3a0619ea":"code","062a9c6a":"code","5323aa2e":"code","978304ea":"code","ea61046d":"code","e91d6abf":"code","20ed87c9":"code","a6dd4b2d":"code","f8e21401":"code","ec3e0fe7":"code","2b618dcd":"code","cbbd3380":"code","459388fe":"code","b160c36b":"markdown","37106317":"markdown","e13d1734":"markdown","21034a69":"markdown","1d43cb67":"markdown","17be90f6":"markdown","8924a9a8":"markdown","d50e3624":"markdown","1c3c31bf":"markdown","a53c1c09":"markdown","72bf11a3":"markdown","717672c7":"markdown"},"source":{"b89ff7b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")#uyar\u0131lar\u0131 kapatmak i\u00e7in\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8acdf1f6":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","65829168":"train_df.columns #12 features","7e48e0d9":"train_df.head()","0f4c3180":"train_df.describe()","5303811f":"#plt.style.available # buradaki tarzlara bak","260b7ad5":"train_df.info()","a8072a26":"def bar_plot(variable):\n    \"\"\"\n    \n    input : variable ex : \"Sex\"\n    output: bar plot & value count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of categorical variables(value \/ sample)\n    varValue = var.value_counts() #value_counts :o cinsiyetten kac tane oldu\u011funu sayar.\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks (varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n {}\".format(variable,varValue))","b50c372c":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","5a438717":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","9e3ad6e4":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","ef575f23":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","6a2ed85a":"# Pclass v.s. Survived \n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n\n# That means First Class passengers %62 percent survived. Money survives you!","b1dfb253":"# Sex v.s. Survived \n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n\n# Women survived in % 74 percent, men died.","b9785f24":"# SibSp v.s. Survived \n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n\n# If you have a sister\/brother or family member you have %50 of survive.","febd73ff":"# Parch v.s. Survived \n\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\n\n# If you have a parent of child, you will  % 60 percent survive.","2ba575cd":"#It help to visualize the data healthy. Removes the outlier data.","2431e69e":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        \n        #first quartile\n        \n        Q1 = np.percentile(df[c],25)\n        \n        #third quartile\n        \n        Q3 = np.percentile(df[c],75)\n        \n        #IQR:\n        \n        IQR = Q3-Q1\n        \n        #outlier step\n        \n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indices\n        \n        outlier_list_col = df[(df[c]< Q1- outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n        \n        # tum say\u0131sal de\u011ferler i\u00e7in kullan\u0131l\u0131r\n        \n    outlier_indices = Counter(outlier_indices) # hangi indisler kacar outlier i\u00e7erir onu g\u00f6sterir.\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v> 2) #o indisten 2den cok varsa c\u0131kart yoksa kals\u0131n demektir.\n\n    \n    return multiple_outliers","3a0619ea":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","062a9c6a":"#drop outliers:\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","5323aa2e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop =True)\n# indexi resetlemesinin sebebi tekrar bastan indexleme yaps\u0131n diye.","978304ea":"train_df.head()","ea61046d":"# Find Missing Values","e91d6abf":"train_df.columns[train_df.isnull().any()] # train data frame i\u00e7erisindeki missing values i\u00e7eren featurelar\u0131(columns) c\u0131kart\u0131r","20ed87c9":"#kac tane olduklar\u0131\u0131n \u00f6\u011frenmek i\u00e7in:\ntrain_df.isnull().sum()\n\n# yani 418 yolcunun yasay\u0131p yasamad\u0131g\u0131n\u0131 bilmiyoruz, 1007 yolcunun kabin numaras\u0131n\u0131, ve 256 yolcunun ya\u015f\u0131n\u0131 bilmiyoruz gibi\n\n# Burada Survived k\u0131sm\u0131n\u0131 Machine learning algoritmas\u0131 ile dolduraca\u011f\u0131m.\n#Kabin bilgisi zaten \u00f6nemli de\u011fil\n# Age bilgisini de doldurabilirim.Ancak su an yeterince bilgiye sahip de\u011filim.\n","a6dd4b2d":"train_df[train_df[\"Embarked\"].isnull()] #nerden bindikleri belli de\u011fil \n#neye g\u00f6re doldurmal\u0131y\u0131z? Cabin numars\u0131na belki Pclassa g\u00f6re ars\u0131la\u015ft\u0131rabiliriz.\n#Fare g\u00f6re(kac para odedi\u011fine g\u00f6re bakabiliriz)","f8e21401":"train_df.boxplot(column = \"Fare\", by =\"Embarked\")\nplt.show()\n\n# Q  dusuk de\u011ferler \u00f6demi\u015fler. S ise muhtemelen ikinci s\u0131n\u0131fta binmi\u015fler.\n# 80 de\u011ferine en yak\u0131n olan C liman\u0131 gibi duruyor. Box yuze yak\u0131n bir de\u011fere kadar c\u0131km\u0131\u015f.\n# S ve Q da outlierlar\u0131 saymazsan zaten 80 para birimine ula\u015famam\u0131\u015f bile.","ec3e0fe7":"train_df[\"Embarked\"] = train_df [\"Embarked\"].fillna(\"C\")\n#art\u0131k doldurduk","2b618dcd":"train_df[train_df[\"Fare\"].isnull()] \n# tek bir yolcunun ka\u00e7 para \u00f6dedi\u011fi yok sadece nereden bindi\u011fi belli (S) liman\u0131.\n# nereden bindi\u011fine ve s\u0131n\u0131f\u0131na bak\u0131labilinir.\n#Pclassa bakal\u0131m.","cbbd3380":"# find the average of Fare for Class 3\n#np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])\n\ntrain_df[\"Fare\"]= train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))\n\n# burada yapt\u0131\u011f\u0131 su \u015fekilde:\n #1. Pclass 3 olan yolculara bak\u0131yor ve onlar\u0131n odediklerinin ortalamas\u0131n\u0131 al\u0131yor. \n# 2. Sonra bu de\u011feri kullanarak Fare i\u00e7indeki bo\u015f de\u011ferleri bununla dolduruyor.\n","459388fe":"train_df[train_df[\"Fare\"].isnull()] ","b160c36b":"# Fill Missing Values\n\n* Embarked has 2 missing value\n* Fare has only 1","37106317":"<a id = \"2\"><\/a><br>\n# Load and Check Data","e13d1734":"<a id='3'><\/a>\n# Univariate Variable Analysis\n * Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin,Name, Ticket, Sibsp and Parch \n\n \n * Numerical Variable :Fare, age, passengerId\n","21034a69":"<a id='4'><\/a>\n## Categorical Variable","1d43cb67":"<a id='1'><\/a>\n# Load and Check Data\n","17be90f6":"<a id='7'><\/a>\n# Outlier Detection","8924a9a8":"<a id = \"2\"><\/a><br>\n# Variable Description\n\n\n1.  PassengerId: Unique id number to each passenger\n1.  Survived    : passenger survived(1) or died(0)\n1.  Pclass      : passenger class\n1.  Name\n1.  Sex\n1.  Age\n1.  SibSp       :number ofsiblings\/ spouse\n1.  Parch       :number of parents\/ children\n1.  Ticket      :ticket number\n1.  Fare        :price of ticket\n1.  Cabin       : cabin category\n1.  Embarked    :port where passenger embarked (C=Cherbourgh, Q= Queenstown, S= SouthHampton)","d50e3624":"<a id='6'><\/a>\n# Basic Data Analysis\n\n* Pclass-Survived\n* Sex-Survived\n* SipSp-Survived\n* Parch-Survived","1c3c31bf":"<a id='8'><\/a>\n# MISSING VALUES\n<a id='9'><\/a>\n  \n* [Find Missing Values](#9)\n<a id='10'><\/a>\n* [Fill Missing Values](#10)\n\n#notes: Algoritmaya okuturken train ve test dataframelerin ikisini birle\u015ftirmek laz\u0131m, birinde duzenleme yap\u0131p bo\u015f de\u011ferleri doldurduktan sonra di\u011ferinde d\u00fczenleme yapmazsan test data framede onlar\u0131 bo\u015f \/ eksik g\u00f6r\u00fcrs\u00fcn.","a53c1c09":"<a id='5'><\/a>\n## Numerical Variable","72bf11a3":"# INTRODUCTION:\n\nThis Project has been described to evaluate Titanic Diseaster. This fatal shipwreck was occured in 1912. After crashing to an iceberg, 1502 of 2224 people had died.\n\n<font color = 'red'>\n\nContent:\n\n1.[Load and Check Data](#1)   \n\n\n2.[Variable Description](#2)\n\n   * [Univariate Variable Analysis](#3)\n   \n       *[Caterogical Variable Analysis](#4)\n       \n       *[Numerical Variable Analysis](#5)\n       \n3.[Basic Data Analysis](#6)\n\n4.[Outlier Detection](#7)\n\n5.[Missing Values](#8)\n   * [Find Missing Values](#9)\n   * [Fill Missing Values](#10)","717672c7":"* float64(2): Fair and Age\n\n* int64(5)  :Pclass, SibSp, ParCh,Survived,PassengerId\n\n* object(5) :Name,Sex,Ticket,Cabin, Embarked"}}