{"cell_type":{"ee77e7c6":"code","e5e8c004":"code","e6331380":"code","61ae0d4a":"code","ec001e03":"code","4b157716":"code","aecbe151":"code","caa31b84":"code","6e031cd7":"code","c4f7690c":"code","26263891":"code","368a3b51":"code","1c5b3934":"code","30718d55":"code","5efda814":"code","b7f1e73b":"markdown","fb3af83c":"markdown","48fa4594":"markdown","1e1e8478":"markdown"},"source":{"ee77e7c6":"import pandas as pd\nfrom pathlib import Path\nimport numpy as np\n\n#\u00a0The installation procedure is inpsried from this great notebook, thanks for sharing it.\n# https:\/\/www.kaggle.com\/hamishdickson\/tabnetmultitaskclassifier\n!pip uninstall -y typing # this should avoid  AttributeError: type object 'Callable' has no attribute '_abc_registry'\n\nimport sys\nsys.path.insert(0, \"..\/input\/tabnet-latest\")\n\nfrom pytorch_tabnet.multitask import TabNetMultiTaskClassifier","e5e8c004":"BASE_FOLDER = Path(\"..\/input\/lish-moa\/\")\nTRAIN_FEATURES_PATH = BASE_FOLDER \/ \"train_features.csv\"\nTEST_FEATURES_PATH = BASE_FOLDER \/ \"test_features.csv\"\nTRAIN_TARGETS_PATH = BASE_FOLDER \/ \"train_targets_scored.csv\"\nSAMPLE_SUBMISSION_PATH = BASE_FOLDER \/ \"sample_submission.csv\"\nMODEL_PATHS = [f\"model_{fold}.zip\" for fold in range(5)]\n# Category mapping to numbers (similr to what is done in training)\nDOSE_MAPPING = {\"D1\": 0, \"D2\": 1}\nTIME_MAPPING = {24: 0, 48: 1, 72: 2}\n","e6331380":"for fold in range(5):\n    !cp -r ..\/input\/multitargets-tabnet\/tabnet_multitargets_{fold}_fold\/* .\n    !zip model_{fold}.zip model_params.json network.pt","61ae0d4a":"train_targets_df = pd.read_csv(TRAIN_TARGETS_PATH)\ntrain_features_df = pd.read_csv(TRAIN_FEATURES_PATH)\ntest_features_df = pd.read_csv(TEST_FEATURES_PATH)\ntest_features_df = pd.read_csv(TEST_FEATURES_PATH)\n\nsample_submission_df = pd.read_csv(SAMPLE_SUBMISSION_PATH)","ec001e03":"# Since control is always 0, we can filter those\n\ntrain_sig_ids = train_features_df.loc[lambda df: df[\"cp_type\"] == \"ctl_vehicle\", \"sig_id\"].tolist()\n\nmean_train_targets_dict = train_targets_df.loc[lambda df: ~df[\"sig_id\"].isin(train_sig_ids), :].iloc[:, 1:].mean().to_dict()\n\n\nfor col, mean in mean_train_targets_dict.items():\n    sample_submission_df.loc[:, col] = mean\n\n","4b157716":"FEATURES = sorted(train_features_df.drop([\"cp_type\", \"sig_id\"], axis=1).columns.tolist())\nTARGETS = sorted(list(set(train_targets_df.drop(\"sig_id\", axis=1).columns) - {\"atp-sensitive_potassium_channel_antagonist\", \"erbb2_inhibitor\"}))","aecbe151":"# Predict for one target => nfkb_inhibitor\n\n\ntest_sig_ids = test_features_df.loc[lambda df: df[\"cp_type\"] != \"ctl_vehicle\", \"sig_id\"].tolist()\n\nX_test = test_features_df.loc[lambda df: df[\"cp_type\"] != \"ctl_vehicle\"].drop([\"sig_id\", \"cp_type\"], axis=1)\n\n\nprint(len(X_test))\nprint(len(test_features_df))\n\nX_test[\"cp_dose\"] = X_test[\"cp_dose\"].map(DOSE_MAPPING)\nX_test[\"cp_time\"] = X_test[\"cp_time\"].map(TIME_MAPPING)\n\n\nX_test = X_test.loc[:, FEATURES].values\n\n\n\n","caa31b84":"data = []\nfor path in MODEL_PATHS:\n\n    model = TabNetMultiTaskClassifier()\n    model.load_model(path)\n    # This is missing\n    model.preds_mapper = DOSE_MAPPING\n    # Predict, clip and transpose\n    #\u00a0Trying without clipping for now since training doesn't have it.\n    y_preds = np.array(model.predict_proba(X_test))[:,:, 1].T\n    #\u00a0y_preds = np.clip(np.array(model.predict_proba(X_test)), 0.001, 0.999)[:,:, 1].T\n    \n    assert (sum(y_preds) > 0).all()\n    data.append(y_preds)","6e031cd7":"y_pred = np.array(data).mean(axis=0)","c4f7690c":"y_pred.shape","26263891":"sample_submission_df.loc[lambda df: df[\"sig_id\"].isin(test_sig_ids), TARGETS].shape","368a3b51":"# For the test, if any are from the control group, we set these to 0\n\n\nsample_submission_df.loc[lambda df: df[\"sig_id\"].isin(test_sig_ids), TARGETS] = y_pred","1c5b3934":"sample_submission_df.std()","30718d55":"print(sample_submission_df.mean().sort_values())","5efda814":"sample_submission_df.to_csv(\"submission.csv\", index=False)","b7f1e73b":"#\u00a0Zip the models!","fb3af83c":"One model per fold. ","48fa4594":"# Load the multi-targets models and predict","1e1e8478":"#\u00a0Submit "}}