{"cell_type":{"14d9d12b":"code","9d58fda4":"code","f9a9727f":"code","039f3563":"code","686f7842":"code","880c2c89":"code","7dd06105":"code","bf8209aa":"code","1b1392e6":"code","c1878ca4":"code","48eaba37":"code","8a53a543":"code","0b6cdc22":"code","e68d94c1":"code","cc442c53":"code","53332c64":"code","ef8d3276":"code","84ccb6d8":"code","d875adbf":"code","91d315ce":"code","e767f4c2":"code","f6dfe342":"code","11c967cf":"code","301dbd74":"code","1732fe94":"code","4e9de052":"code","adfbdd27":"code","6bd4b251":"code","6214b9a4":"code","7bd40f75":"code","2c958313":"code","df314d2f":"code","ae8486fc":"code","584d7d85":"code","47d2303a":"markdown","967538b7":"markdown","967ee066":"markdown","3e7223dd":"markdown","e4bfe7df":"markdown","5f08639b":"markdown","d24c0535":"markdown","6892a0e5":"markdown","206067c6":"markdown","2bedef94":"markdown","b8272bc7":"markdown","43f13b20":"markdown","17b632db":"markdown","d432e9bc":"markdown","d7270214":"markdown","2515b430":"markdown","e1295797":"markdown","bb50cf21":"markdown"},"source":{"14d9d12b":"# Import all the tools we need\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Models from Scikit-Learn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\n\n# Model evaluators\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import plot_roc_curve","9d58fda4":"# Reading csv file\ndf = pd.read_csv('heart-disease.csv')\ndf_copy = df.copy()\n# First 5 rows of our data\ndf.head()","f9a9727f":"df.target.value_counts()","039f3563":"sns.countplot(x=\"target\", data=df, palette=\"Blues\")\nplt.xticks(ticks=[0,1],labels =[\" Haven't Heart Disease\",\"Have Heart Disease\"],rotation=0);\n\nplt.show()","686f7842":"countNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))","880c2c89":"df.info()","7dd06105":"df.isna().sum()","bf8209aa":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xticks(ticks=[0,1],labels =[\" Female\",\"Male\"],rotation=0);\nplt.show()","1b1392e6":"male =len(df[df['sex'] == 1])\nfemale = len(df[df['sex']== 0])\n\nplt.figure(figsize=(3,3))\n\n# Data to plot\nlabels = 'Male','Female'\nsizes = [male,female]\ncolors = ['skyblue', 'yellowgreen']\nexplode = (0,0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\n \nplt.axis('equal')\nplt.show()","c1878ca4":"countFemale = len(df[df.sex == 0 ])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","48eaba37":"pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#8ACDEA','#0A2239' ])\nplt.title('Heart Disease Frequency for Sex')\n\n#plt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.xticks(ticks=[0,1],labels =[\" Female\",\"Male\"],rotation=0);\nplt.show()\n","8a53a543":"\npd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","0b6cdc22":"plt.figure(figsize=(10, 5))\nplt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","e68d94c1":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#8ACDEA','#0A2239'])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","cc442c53":"pd.crosstab(df.cp, df.target)","53332c64":"pd.crosstab(df.cp, df.target).plot(kind=\"bar\",\n                                   figsize=(8,5),\n                                   color=[\"orange\", \"purple\"])\n\n# Add some communication\nplt.title(\"Heart Disease Frequency versus Chest Pain Type\")\nplt.xlabel(\"Chest Pain Type\")\nplt.ylabel(\"Amount\")\n\nplt.legend([\"No Disease\", \"Disease\"])\nplt.xticks(ticks=[0,1,2,3],labels =[\"atypical angina\",\"typical angina\",\" asymptomatic \",\" non-anginal pain \"],rotation=0);","ef8d3276":"# correlation matrix\ndf.corr()","84ccb6d8":"# plt.figure(figsize=(10, 5))\n# sns.heatmap(df.corr());\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True,fmt='.1f')\nplt.show()","d875adbf":"# Splitting data into X and y\nx = df.drop(\"target\", axis=1)\n\ny = df[\"target\"]","91d315ce":"x.head()","e767f4c2":"y","f6dfe342":"# Split data into train and test sets\nnp.random.seed(42)\n\n# Split into train & test set\nx_train, x_test, y_train, y_test = train_test_split(x,\n                                                    y,\n                                                    test_size=0.2)","11c967cf":"print(len(x_train))\nprint(len(y_train))","301dbd74":"# Put models in a dictionary\nmodels = {\"Logistic Regression\": LogisticRegression(),\n          \"Random Forest\": RandomForestClassifier()}\n\n# Creating a function to fit and score models\ndef fit_and_score(models, x_train, x_test, y_train, y_test):\n    \n    np.random.seed(42)\n    \n    # Make a dictionary to keep model scores\n    model_scores = {}\n    \n    # Loop through models\n    for name, model in models.items():\n        \n        # Fit the model to the data\n        model.fit(x_train, y_train)\n        \n        # append the evaluated score to model_scores\n        model_scores[name] = model.score(x_test, y_test)\n    return model_scores","1732fe94":"model_scores = fit_and_score(models=models,x_train=x_train,x_test=x_test,y_train=y_train,\n                             y_test=y_test)\n\nmodel_scores","4e9de052":"#saving accuracies in dictionary for comparison\naccuracies = {}\naccuracies['Logistic Regression'] = 88.524\naccuracies['Random Forest'] = 83.6","adfbdd27":"model_compare = pd.DataFrame(model_scores, index=[\"accuracy\"])\nmodel_compare.T.plot.bar();\nplt.xticks(rotation=0)\nplt.show()","6bd4b251":"#### Creating Dummy Variables <br>\n#Since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables.\n# a = pd.get_dummies(df['cp'], prefix = \"cp\")\n# b = pd.get_dummies(df['thal'], prefix = \"thal\")\n# c = pd.get_dummies(df['slope'], prefix = \"slope\")\n\n# frames = [df, a, b, c]\n# df = pd.concat(frames, axis = 1)\n# df.head()\n# df = df.drop(columns = ['cp', 'thal', 'slope'])\n# df.head()","6214b9a4":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\n\nprint(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test, y_test)*100))","7bd40f75":"# try to find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train, y_train)\n    scoreList.append(knn2.score(x_test, y_test))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","2c958313":"svm = SVC(random_state = 1)\nsvm.fit(x_train, y_train)\n\nacc = svm.score(x_test,y_test)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","df314d2f":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)\n\nacc = nb.score(x_test,y_test)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","ae8486fc":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\n\nacc = dtc.score(x_test, y_test)*100\naccuracies['Decision Tree'] = acc\nprint(\"Decision Tree Test Accuracy {:.2f}%\".format(acc))","584d7d85":"colors = [\"#2E4052\", \"#19297C\", \"#585481\", \"#A1867F\",\"#FFC857\",\"#C49BBB\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nZ={k: v for k, v in sorted(accuracies.items(), key=lambda item: item[1], reverse = True)}\nsns.barplot(x=list(Z.keys()), y=list(Z.values()), palette=colors)\nplt.show()","47d2303a":"# Heart disease classification using machine learning\n","967538b7":"### Decision Tree Classifier","967ee066":"### K-Nearest Neighbors Classifier","3e7223dd":"## 3. Exploring parameters related to heart disease","e4bfe7df":"### Heart Disease Frequency versus Chest Pain Type\n","5f08639b":"## 1. Preparing the tools\n","d24c0535":"Our dataset does not have a missing value.","6892a0e5":"We will try 2 different classification models for this , i.e. <strong>logistic regressor<\/strong> and <strong>random forest classifier.<\/strong>","206067c6":"## 4. Modelling ","2bedef94":"#### The dataset used for this project is available on Kaggle. https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci\n#### Data contains;\n\n1.age\n<br>\n2.sex\n<br>\n3.chest pain type (4 values)\n<br>\n4.resting blood pressure\n<br>\n5.serum cholestoral in mg\/dl\n<br>\n6.fasting blood sugar > 120 mg\/dl\n<br>\n7.resting electrocardiographic results (values 0,1,2)\n<br>\n8.maximum heart rate achieved\n<br>\n9.exercise induced angina\n<br>\n10.oldpeak = ST depression induced by exercise relative to rest\n<br>\n11.the slope of the peak exercise ST segment\n<br>\n12.number of major vessels (0-3) colored by flourosopy\n<br>\n13.thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n<br>","b8272bc7":"### Heart Disease Frequency for Sex","43f13b20":"### Heart Disease Frequency for Ages","17b632db":"### Heart Disease Frequency According To FBS","d432e9bc":"### Maximum Heart Rate By Age","d7270214":"### Naive Bayes Classifier","2515b430":"## 2. Loading data ","e1295797":"## 5. Comparing between different algorithms accuracies ","bb50cf21":"### Support vector machines"}}