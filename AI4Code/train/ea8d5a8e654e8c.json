{"cell_type":{"f2d21f7d":"code","8d1c5cab":"code","7b7ccd02":"code","a176445e":"code","53af8a69":"code","d3031143":"code","7ead4c28":"code","457e074e":"code","bc62a29d":"code","6052d433":"code","0dce6fb7":"code","09418643":"code","6493c41b":"code","86f46703":"code","e6ed7de9":"code","01909eff":"code","40052b5e":"code","535d7a8c":"code","cf9cf6a6":"code","21969d5b":"code","239c1bba":"code","b563d5b4":"code","5ca50d26":"code","8bee6d75":"code","4125a39f":"code","725dc825":"code","fa26c582":"code","b61dc9c2":"code","fd91e254":"code","beb0daff":"code","72b858f9":"code","eff5a5e0":"code","1bcfa66e":"code","1d3d1960":"code","84fcb21d":"code","600f6e12":"code","2d9792da":"code","4f3484eb":"code","08cafebf":"code","ae4c3cca":"markdown","3f3892b3":"markdown","608ac457":"markdown","a9bff599":"markdown","ecd06039":"markdown","9651c246":"markdown","f2d87696":"markdown","6415d82f":"markdown","55f041de":"markdown","52ef5ab8":"markdown","9edda417":"markdown"},"source":{"f2d21f7d":"import pandas as pd\nimport numpy as np\ncab_data=pd.read_csv('..\/input\/uber-cab-fare-price-analysis\/cab_rides.csv')\ncab_data","8d1c5cab":"weather_data=pd.read_csv('..\/input\/uber-cab-fare-price-analysis\/weather.csv')\nweather_data","7b7ccd02":"def reduce_memory_usage(df):\n    \n    start_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe is {start_memory} MB\")\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe after reduction {end_memory} MB\")\n    print(f\"Reduced by {100 * (start_memory - end_memory) \/ start_memory} % \")\n    return df","a176445e":"cab_data = reduce_memory_usage(cab_data)\nweather_data = reduce_memory_usage(weather_data)","53af8a69":"cab_data.columns","d3031143":"weather_data.columns","7ead4c28":"cab_data.info()","457e074e":"weather_data.info()","bc62a29d":"cab_data.dtypes","6052d433":"import datetime\ncab_data['date_time'] = pd.to_datetime(cab_data['time_stamp'])\nweather_data['date_time'] = pd.to_datetime(weather_data['time_stamp'])\ncab_data","0dce6fb7":"cab_data.shape","09418643":"weather_data.shape","6493c41b":"cab_data['distance']=cab_data['distance'].astype('float')\ncab_data['price']=cab_data['price'].astype('float')\ncab_data['surge_multiplier']=cab_data['surge_multiplier'].astype('float')\ncab_data.head()","86f46703":"weather_data['temp']=weather_data['temp'].astype('float')\nweather_data['pressure']=weather_data['pressure'].astype('float')\nweather_data.head()","e6ed7de9":"cab_data.describe()","01909eff":"weather_data.describe()","40052b5e":"a=pd.concat([cab_data,weather_data])","535d7a8c":"a.head()","cf9cf6a6":"a['day']=a.date_time.dt.day\na['hour']=a.date_time.dt.hour","21969d5b":"a.tail()","239c1bba":"a.fillna(0,inplace=True)","b563d5b4":"a.head()","5ca50d26":"a.columns","8bee6d75":"a.groupby('cab_type').count()","4125a39f":"import seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\n","725dc825":"a.groupby('cab_type').count().plot.bar()","fa26c582":"a.price.value_counts().plot(kind=\"bar\",figsize=(100,50),color='red')","b61dc9c2":"a.hour.value_counts().plot(kind=\"bar\",figsize=(10,5),color='red')","fd91e254":"sns.jointplot(a.hour,a.price)","beb0daff":"x=a.price\ny=a.hour\nplt.plot(y,x)","72b858f9":"sns.jointplot(a.rain,a.price)","eff5a5e0":"a.columns","1bcfa66e":"x1=a[(['distance', 'surge_multiplier', 'temp', 'clouds', 'pressure', 'rain', 'humidity', 'wind', 'day','hour'])]\ny1=a[('price')]","1d3d1960":"from sklearn.model_selection import train_test_split\nx_train, y_train ,x_test, y_test = train_test_split(x1,y1,test_size=0.25,random_state =42)","84fcb21d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n","600f6e12":"#model=RandomForestRegressor()\n#model=LinearRegression()\nmodel=DecisionTreeRegressor()\nmodel.fit(x_train,x_test)","2d9792da":"pred=model.predict(y_train)\nprint(pred)","4f3484eb":"df=pd.DataFrame({\"actual\": y_test, \"prediction\": pred})\ndf","08cafebf":"rsquare=model.score(x_train,x_test)\nprint (rsquare)","ae4c3cca":"adding two new columns to the dataset","3f3892b3":"grouping the dataset by cab types","608ac457":"coverting the datatype of time_stamp column to datetime ","a9bff599":"Reducing the memory of the datasets","ecd06039":"train -test splitting","9651c246":"coverting some columns to the desired datatype","f2d87696":"importing the three main regressions for the pridiction","6415d82f":"filling the missing attributes with 0","55f041de":"analysis of the data sets","52ef5ab8":"the error in predicition ","9edda417":"concatinating the two data sets together"}}