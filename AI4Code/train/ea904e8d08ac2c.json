{"cell_type":{"5ffa8a95":"code","a17422f8":"code","b8551fed":"code","d534b45a":"code","279263fe":"code","204a1f75":"markdown","28cd9cd6":"markdown"},"source":{"5ffa8a95":"%%writefile submission.py\n\"\"\"Greedy agent that chooses machine based on maximum expected payout\n\nUses a trained decision tree model to consider the other player's movements\nin the expected payout.\n\nSee my other kernel for methodology for generating training data:\nhttps:\/\/www.kaggle.com\/lebroschar\/generate-training-data\n\n\"\"\"\nimport pickle\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport sklearn.tree as skt\n\n# Parameters\nFUDGE_FACTOR = 0.99\nVERBOSE = False\nDATA_FILE = '\/kaggle\/input\/sample-training-data\/training_data_201223.parquet'\nTRAIN_FEATS = ['round_num', 'n_pulls_self', 'n_success_self', 'n_pulls_opp']\nTARGET_COL = 'payout'\n\n\ndef make_model():\n    \"\"\"Builds a decision tree model based on stored trainingd data\"\"\"\n    data = pd.read_parquet(DATA_FILE)\n    model = skt.DecisionTreeRegressor(min_samples_leaf=40)\n    model.fit(data[TRAIN_FEATS], data[TARGET_COL])\n    return model\n\n\nclass GreedyStrategy:\n    \"\"\"Implements strategy to maximize expected value\n\n    - Tracks estimated likelihood of payout ratio for each machine\n    - Tracks number of pulls on each machine\n    - Chooses machine based on maximum expected value\n    \n    \n    \"\"\"\n    def __init__(self, name, agent_num, n_machines):\n        \"\"\"Initialize and train decision tree model\n\n        Args:\n           name (str):   Name for the agent\n           agent_num (int):   Assigned player number\n           n_machines (int):   number of machines in the game\n        \n        \"\"\"\n        # Record inputs\n        self.name = name\n        self.agent_num = agent_num\n        self.n_machines = n_machines\n        \n        # Initialize distributions for all machines\n        self.n_pulls_self = np.array([0 for _ in range(n_machines)])\n        self.n_success_self = np.array([0. for _ in range(n_machines)])\n        self.n_pulls_opp = np.array([0 for _ in range(n_machines)])\n\n        # Track other players moves\n        self.opp_moves = []\n        \n        # Track winnings\n        self.last_reward_count = 0\n\n        # Create model to predict expected reward\n        self.model = make_model()\n        \n        # Predict expected reward\n        features = np.zeros((self.n_machines, 4))\n        features[:, 0] = len(self.opp_moves)\n        features[:, 1] = self.n_pulls_self\n        features[:, 2] = self.n_success_self\n        features[:, 3] = self.n_pulls_opp\n        self.predicts = self.model.predict(features)\n        \n\n    def __call__(self):\n        \"\"\"Choose machine based on maximum expected payout\n\n        Returns:\n           <result> (int):  index of machine to pull\n        \n        \"\"\"\n        # Otherwise, use best available\n        est_return = self.predicts\n        max_return = np.max(est_return)\n        result = np.random.choice(np.where(\n            est_return >= FUDGE_FACTOR * max_return)[0])\n        \n        if VERBOSE:\n            print('  - Chose machine %i with expected return of %3.2f' % (\n                int(result), est_return[result]))\n\n        return int(result)\n    \n        \n    def updateDist(self, curr_total_reward, last_m_indices):\n        \"\"\"Updates estimated distribution of payouts\"\"\"\n        # Compute last reward\n        last_reward = curr_total_reward - self.last_reward_count\n        self.last_reward_count = curr_total_reward\n        if VERBOSE:\n            print('Last reward: %i' % last_reward)\n\n        if len(last_m_indices) == 2:\n            # Update number of pulls for both machines\n            m_index = last_m_indices[self.agent_num]\n            opp_index = last_m_indices[(self.agent_num + 1) % 2]\n            self.n_pulls_self[m_index] += 1\n            self.n_pulls_opp[opp_index] += 1\n\n            # Update number of successes\n            self.n_success_self[m_index] += last_reward\n            \n            # Update opponent activity\n            self.opp_moves.append(opp_index)\n\n            # Update predictions for chosen machines\n            self.predicts[[opp_index, m_index]] = self.model.predict([\n                [\n                    len(self.opp_moves),\n                    self.n_pulls_self[opp_index],\n                    self.n_success_self[opp_index],\n                    self.n_pulls_opp[opp_index]\n                ],\n                [\n                    len(self.opp_moves),\n                    self.n_pulls_self[m_index],\n                    self.n_success_self[m_index],\n                    self.n_pulls_opp[m_index]\n                ]])\n            \n\ndef agent(observation, configuration):\n    global curr_agent\n    \n    if observation.step == 0:\n        # Initialize agent\n        curr_agent = GreedyStrategy(\n            'Mr. Agent %i' % observation['agentIndex'],\n            observation['agentIndex'],\n            configuration['banditCount'])\n    \n    # Update payout ratio distribution with:\n    curr_agent.updateDist(observation['reward'], observation['lastActions'])\n\n    return curr_agent()\n","a17422f8":"!pip install pip --upgrade -q\n!pip install kaggle-environments --upgrade -q\n\nfrom kaggle_environments import make","b8551fed":"# Parameters\nrounds = 3\nagent_dir = '\/kaggle\/input\/sample-submissions\/'\nagent = '\/kaggle\/working\/submission.py'\nagents = [\n    'bayesian_ucb_xxx.py', \n    'simple_mab_1045.py',\n    'thompson_xxx.py',\n]\n","d534b45a":"def run_competition(env, agent, agent_dir, opp, results):\n    \"\"\"Execute a single competition\"\"\"\n    env.reset()\n    result = env.run([agent, agent_dir + opp])\n    print('Agent 1: %i,  Agent 2: %i' % (\n        result[-1][0]['reward'], result[-1][1]['reward']))\n    results[opp]['diff'].append(result[-1][0]['reward']\n                                - result[-1][1]['reward'])\n    if results[opp]['diff'][-1] > 0:\n        results[opp]['wins'] += 1\n\n    return result","279263fe":"# Initilize environment\nenv = make(\"mab\", debug=True)\n\n# Create results\nresults = {opp: {'wins': 0, 'diff': []} for opp in agents}\nfor r_num in range(rounds):\n    print('***Round %i of %i***' % (r_num + 1, rounds))\n    for opp in agents:\n        result = run_competition(env, agent, agent_dir, opp, results)\n\n    round_wins = sum([results[key]['diff'][-1] > 0\n                      for key in results.keys()])\n\n    print('Your agent won %i of %i matches this round.' % (round_wins,\n                                                           len(agents)))\n    print(results)\n\nprint('-------------------')\nprint('FINAL RESULTS')\nprint('-------------------')\nprint('Of %i rounds, your agent won:' % rounds)\nfor opp in agents:\n    print('  + %i rounds (%3.1f%%) against %s' % (\n        results[opp]['wins'], 100 * results[opp]['wins'] \/ rounds, opp))","204a1f75":"# Simple Decision Tree model to predict payoff probability\n\nConsistently beats Bayesian UCB, Simple Multi-armed Bandit, and Thompson sampling kernels (see below).\n\n**NOTE:** This won't work as a submission as is, since it is referencing the training data file (I think).  Please see the post from Sirith Somanchi about how to make it work as a submission using base64:\nhttps:\/\/www.kaggle.com\/c\/santa-2020\/discussion\/203427","28cd9cd6":"# Simulation"}}