{"cell_type":{"8b94ec22":"code","91d93686":"code","be832d18":"code","19468b9f":"code","baf5689a":"code","8fa35efc":"code","c1453f88":"code","f1fa67aa":"code","bf8bbb3f":"code","3cc98b2b":"code","78b6f527":"code","3d954d7e":"code","088b5cd4":"code","c2f10d08":"code","2a66ffc8":"code","f76329f5":"code","ce9f1393":"code","4ddfae33":"code","7a6c0a46":"code","77bdaa24":"code","f859c927":"code","d0b15c6b":"code","7f32809a":"code","10635167":"code","78f25dcc":"markdown","d6509d5f":"markdown","c2e86a85":"markdown"},"source":{"8b94ec22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\n\npd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91d93686":"df_ = pd.read_csv(\"..\/input\/online-retail-ii-uci\/online_retail_II.csv\")\ndf = df_.copy() #this code protects df_ if we need it we can use it again.\ndf.head()","be832d18":"# Let's examine the general structural features\nprint(\"##################### Index #####################\")\nprint(df.index)\nprint(\"##################### Shape #####################\")\nprint(df.shape)\nprint(\"##################### Types #####################\")\nprint(df.dtypes)\nprint(\"##################### NA #####################\")\nprint(df.isnull().sum())\nprint(\"##################### Total NA #####################\")\nprint(df.isnull().sum().sum())\nprint(\"##################### Describe #####################\")\nprint(df.describe().T)","19468b9f":"# We do not need to struggle with the NA for this analysis so I have dropped them\ndf.dropna(inplace=True)","baf5689a":"# If this code starts with the letter 'c', it indicates a cancellation. I took out them\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)] ","8fa35efc":"# We calculate the total price for monetary value\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","c1453f88":"today_date = dt.datetime(2011, 12, 11)","f1fa67aa":"df.info()","bf8bbb3f":"df[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"]) ","3cc98b2b":"df.info()","78b6f527":"rfm = df.groupby(\"Customer ID\").agg({\"InvoiceDate\": lambda x: (today_date - x.max()).days,\n                                    \"Invoice\": lambda x: x.nunique(),\n                                    \"TotalPrice\": lambda x: x.sum()})","3d954d7e":"rfm = rfm[rfm[\"TotalPrice\"] > 0]","088b5cd4":"rfm.columns = [\"Recency\", \"Frequency\", \"Monetary\"] ","c2f10d08":"rfm[\"recency_score\"] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])","2a66ffc8":"rfm[\"frequency_score\"] = pd.qcut(rfm[\"Frequency\"].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])","f76329f5":"\nrfm[\"monetary_score\"] = pd.qcut(rfm[\"Monetary\"], 5, labels=[1, 2, 3, 4, 5])\n","ce9f1393":"rfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str) + rfm['monetary_score'].astype(str))","4ddfae33":"rfm.head()","7a6c0a46":"seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}","77bdaa24":"rfm['segment'] = (rfm['recency_score'].astype(str) +rfm['frequency_score'].astype(str)).replace(seg_map, regex=True)","f859c927":"rfm.head()","d0b15c6b":"from IPython.display import display, HTML\n\ndisplay(HTML(rfm[[\"segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"segment\").agg([\"mean\", \"median\", \"count\"]).to_html()))","7f32809a":"rfm[[\"segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"segment\").agg([\"mean\", \"median\", \"count\"])","10635167":"rfm.groupby(\"segment\").agg({'segment': 'count',\n                            'Recency': ['mean', 'median', 'min', 'max'],\n                            'Frequency': ['mean', 'median', 'min', 'max'],\n                            'Monetary': ['mean', 'median', 'min', 'max']}).\\\n    sort_values(by=('segment', 'count'), ascending=False, axis=0)","78f25dcc":"###############################################################\n# Business Problem\n###############################################################\n\n* An e-commerce company wants to segment its customers and determine marketing strategies according to these segments.","d6509d5f":"Attribute Information:\n\n* InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\n* StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n* Description: Product (item) name. Nominal.\n* Quantity: The quantities of each product (item) per transaction. Numeric.\n* InvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n* UnitPrice: Unit price. Numeric. Product price per unit in USD.\n* CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n* Country: Country name. Nominal. The name of the country where a customer resides.","c2e86a85":"###############################################################\n# Data Understanding\n###############################################################"}}