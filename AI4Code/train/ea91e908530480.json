{"cell_type":{"994f4185":"code","e71e1aff":"code","7acbd4fb":"code","cdbcfe8a":"code","1ff53605":"code","c01552ba":"code","4dcb4b25":"code","f1c271e4":"code","f271682c":"code","6a168e40":"code","0526d909":"code","90993613":"code","29ede0c0":"code","cbfacb42":"code","f903f36c":"code","819e0818":"code","7bb64528":"code","28706f09":"markdown","c7535b9c":"markdown","75234e9d":"markdown","275c4796":"markdown","2143c463":"markdown","64e6341a":"markdown","1d933efa":"markdown"},"source":{"994f4185":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import MinMaxScaler\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e71e1aff":"df = pd.read_csv('\/kaggle\/input\/kinematics-motion-data\/Kinematics_Data.csv')","7acbd4fb":"df.head()","cdbcfe8a":"df['username'].value_counts()","1ff53605":"df.drop(['date', 'time', 'username'], axis = 1, inplace = True)","c01552ba":"df.head()","4dcb4b25":"df.isnull().sum()","f1c271e4":"X = df.drop('activity',axis=1).values\ny = df['activity'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=33)\n\nscaler = MinMaxScaler()\nX_train= scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nX_train = torch.FloatTensor(X_train)\nX_test = torch.FloatTensor(X_test)\n#y_train = F.one_hot(torch.LongTensor(y_train))  # not needed with Cross Entropy Loss\n#y_test = F.one_hot(torch.LongTensor(y_test))\ny_train = torch.LongTensor(y_train)\ny_test = torch.LongTensor(y_test)","f271682c":"class Model(nn.Module):\n    def __init__(self, in_features=7, h1=10, h2=9, out_features=2):\n        super().__init__()\n        \n        # input layer -> 1 hidden -> 2 hidden -> output \n        self.fc1 = nn.Linear(in_features,h1)    # input layer\n        self.fc2 = nn.Linear(h1, h2)            # hidden layer\n        self.out = nn.Linear(h2, out_features)  # output layer\n        \n    def forward(self, x):\n        # Pass the neuron input through its activation function to obtain the output of the neuron\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.out(x)\n        return x","6a168e40":"torch.manual_seed(4)\nmodel = Model()","0526d909":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)","90993613":"epochs = 500 # number of runs through the training data\nlosses = []\n\nfor i in range(epochs):\n    i+=1\n    y_pred = model.forward(X_train)\n    loss = criterion(y_pred, y_train)\n    losses.append(loss)\n    \n    # a neat trick to save screen space:\n    if i%10 == 1:\n        print(f'epoch: {i:2}  loss: {loss.item():10.8f}')\n\n    optimizer.zero_grad() #zero-grad to not accomulate the gradient over the epochs\n    loss.backward()\n    optimizer.step()","29ede0c0":"plt.plot(range(epochs), losses)\nplt.ylabel('Loss')\nplt.xlabel('epoch');","cbfacb42":"Test_Predictions = torch.max(y_pred,1)[1]\nprint(Test_Predictions)","f903f36c":"with torch.no_grad():\n    y_test_pred = model.forward(X_test)","819e0818":"y_test_pred = torch.max(y_test_pred,1)[1]","7bb64528":"print(confusion_matrix(y_test, y_test_pred))\nprint('---------------------------------------------------------')\nprint(classification_report(y_test, y_test_pred))","28706f09":"# Data Analysis","c7535b9c":"# Train the Model","75234e9d":"# Data Train Test Split","275c4796":"# Evaluate The Model","2143c463":"As we also see we have no missing value to take care of!","64e6341a":"# Define The Model","1d933efa":"Time, date are input features that are not relevant to define the activity of motion taken by the user so they can be droped, along with the username since it is always the same as we can see below."}}