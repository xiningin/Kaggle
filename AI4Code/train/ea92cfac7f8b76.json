{"cell_type":{"a34e6a47":"code","969dc82b":"code","3e95fa48":"code","7664d444":"code","744a04a4":"code","5d38de3a":"code","d8f64170":"code","4d4569ed":"code","56497288":"code","6a5af091":"code","f779d8d2":"code","937ce793":"code","70b8472f":"code","4c485887":"code","d1b6d70b":"code","850fef96":"code","c9e48639":"code","f7671f54":"code","d58b2c93":"code","7b8a7168":"code","682b61b2":"code","abdeb1fc":"code","d0b6e63e":"code","be0697e2":"code","84d46ecc":"code","007f4fe8":"markdown","9f13c0e0":"markdown","67e97312":"markdown","172cf4fc":"markdown","ee1873be":"markdown"},"source":{"a34e6a47":"import numpy as np \nimport pandas as pd \nimport gc\n\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor, StackingRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","969dc82b":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv').fillna('Unknown')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv').fillna('Unknown')\n# sample = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/submission.csv')","3e95fa48":"X = train.copy()\nX_test = test.copy()\n\ndel train\ngc.collect()","7664d444":"X['Date'] = pd.DatetimeIndex(X['Date'])\nX_test['Date'] = pd.DatetimeIndex(X_test['Date'])\n\nX['Month'] = X['Date'].dt.month\n# X['Day'] = X['Date'].dt.day\n\nX_test['Month'] = X_test['Date'].dt.month\n# X_test['Day'] = X_test['Date'].dt.day\n\n# X['dayofweek'] = X['Date'].dt.dayofweek\nX['dayofyear'] = X['Date'].dt.dayofyear\nX['quarter'] = X['Date'].dt.quarter\nX['weekofyear'] = X['Date'].dt.weekofyear\n\n# X_test['dayofweek'] = X_test['Date'].dt.dayofweek\nX_test['dayofyear'] = X_test['Date'].dt.dayofyear\nX_test['quarter'] = X_test['Date'].dt.quarter\nX_test['weekofyear'] = X_test['Date'].dt.weekofyear","744a04a4":"columns = ['Country_Region', 'Target']\n\noe = OrdinalEncoder()\noe.fit(X[columns])\nX[columns] = oe.transform(X[columns])\nX_test[columns] = oe.transform(X_test[columns])","5d38de3a":"Y = X['TargetValue']\nX = X.drop(['County','Province_State','Id','TargetValue', 'Date'], axis=1)\nX_test = X_test.drop(['County','Province_State','ForecastId', 'Date'], axis=1)\n\nX","d8f64170":"print(Y.nunique())\nprint(Y.shape)","4d4569ed":"ss1 = StandardScaler()\nss1.fit(X['Population'].values.reshape(-1,1))\nX['Population'] = ss1.transform(X['Population'].values.reshape(-1,1))\nX_test['Population'] = ss1.transform(X_test['Population'].values.reshape(-1,1))\n\n# ss2 = StandardScaler()\n# Y = ss2.fit_transform(Y.values.reshape(-1,1))\n# Y = Y.reshape(Y.shape[0])\n\nX = X.values\nX_test = X_test.values\n\n# Y = pd.Series(Y)\nY = Y.values","56497288":"# from sklearn.model_selection import train_test_split\n\n# X_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, shuffle=False)","6a5af091":"# rf = RandomForestRegressor(n_jobs=-1)\n# xgb = XGBRegressor(n_jobs=-1)","f779d8d2":"from sklearn.model_selection import KFold\n\nskf = KFold(n_splits=3)\nbest = None\nbest_eval = 1000000\nfor train_index, test_index in skf.split(X, Y):\n    X_train, x_test = X[train_index], X[test_index]\n    y_train, y_test = Y[train_index], Y[test_index]\n    rf = RandomForestRegressor(n_jobs=-1)\n    rf.fit(X_train, y_train)\n    y_pred = rf.predict(x_test)\n    e = np.sqrt(mean_squared_error(y_pred, y_test))\n    if e < best_eval or not best:\n        best = rf\n        best_eval = e\n\nprint(best_eval)","937ce793":"skf = KFold(n_splits=3)\nbestx = None\nbest_evalx = 1000000\nfor train_index, test_index in skf.split(X, Y):\n    X_train, x_test = X[train_index], X[test_index]\n    y_train, y_test = X[train_index], Y[test_index]\n    xgb = XGBRegressor(n_jobs=-1)\n    xgb.fit(X_train, y_train)\n    y_pred = xgb.predict(x_test)\n    e = np.sqrt(mean_squared_error(y_pred, y_test))\n    if e < best_evalx or not best:\n        bestx = xgb\n        best_evalx = e\n\nprint(best_evalx)","70b8472f":"# xgb.fit(X_train, y_train)\n# y_pred = xgb.predict(x_test)\n# np.sqrt(mean_squared_error(y_pred, y_test))","4c485887":"estimators = [('rf',best), ('xgb',bestx)]\n\nmodel = VotingRegressor(estimators, n_jobs=-1)","d1b6d70b":"model.fit(X, Y)","850fef96":"pred = model.predict(X_test)\npred = ss2.inverse_transform(pred.reshape(-1,1))\npred = pred.reshape(pred.shape[0])\npred","c9e48639":"test['q_0.05'] = pred*0.05\ntest['q_0.5'] = pred*0.5\ntest['q_0.95'] = pred*0.95","f7671f54":"test['Date'] = pd.DatetimeIndex(test['Date'])\ntest.set_index('Date', inplace=True)","d58b2c93":"# x1 = test['q_0.05'].resample('1D').quantile(0.05)\n# x2 = test['q_0.5'].resample('1D').quantile(0.5)\n# x3 = test['q_0.95'].resample('1D').quantile(0.95)","7b8a7168":"gc.collect()","682b61b2":"# for d in x1.index:\n#     test.loc[d, 'q_0.05'] = x1[d]\n#     test.loc[d, 'q_0.5'] = x2[d]    \n#     test.loc[d, 'q_0.95'] = x3[d]   \n    \n# del x1, x2, x3\n# gc.collect()","abdeb1fc":"# test","d0b6e63e":"df = pd.melt(test, 'ForecastId', ['q_0.05', 'q_0.5', 'q_0.95'])","be0697e2":"df['variable']=df['variable'].str.replace(\"q\",\"\", regex=False)\ndf['ForecastId_Quantile']=df['ForecastId'].astype(str)+df['variable']\ndf['TargetValue']=df['value']","84d46ecc":"df[['ForecastId_Quantile', 'TargetValue']].to_csv('submission.csv', index=False)\ndf[['ForecastId_Quantile', 'TargetValue']]","007f4fe8":"# 2 Exploratory Data Analysis","9f13c0e0":"# 4 Modelling and predicting with XGBoost","67e97312":"# 1 Load Libraries and Data","172cf4fc":"# 5 Preparing data and sending","ee1873be":"# 3 Feature engineering"}}