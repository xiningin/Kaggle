{"cell_type":{"f3b49add":"code","5323c803":"code","abbcc543":"code","95b5d271":"code","8ca94b85":"code","ffdbb923":"code","3dee2020":"code","da09a2e8":"code","9e145897":"code","cf356c95":"code","44752791":"code","0a2de8ea":"code","da8249a4":"code","99319f64":"code","d88ca0a1":"code","48081c37":"code","a7529b09":"code","0b9073b0":"markdown","9e695500":"markdown","dbc98e8a":"markdown","a8b0e7d9":"markdown","e4164784":"markdown","dff2a647":"markdown","9fd2c483":"markdown","1ff28430":"markdown","d19e28ea":"markdown","37d8b916":"markdown","d6977d47":"markdown","70cb19fb":"markdown","deccbd03":"markdown","cd31418f":"markdown","5929d4e5":"markdown","ac5c1b0b":"markdown","41454cc5":"markdown","e47375c2":"markdown","70e8f0f0":"markdown","45dd9420":"markdown","1290e1c8":"markdown","22172408":"markdown","b40676b7":"markdown","1e9298a6":"markdown","72d92622":"markdown"},"source":{"f3b49add":"%%capture \n!pip install pycountry_convert\n\nimport numpy as np \nimport pandas as pd \ndata = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","5323c803":"import matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nparams = {'legend.fontsize': 'x-large',\n          'figure.figsize': (15, 12),\n          'figure.titlesize': 'x-large',\n         'axes.labelsize': 'x-large',\n         'axes.titlesize':'x-large',\n         'xtick.labelsize':'x-large',\n         'ytick.labelsize':'x-large'}\npylab.rcParams.update(params)","abbcc543":"not_iso_countries = data.country[data.iso_code.isnull()].unique()\ndata = data[~data.country.isin(not_iso_countries)]","95b5d271":"#1\ndata_tv = data.loc[:,[\"date\", \"country\", \"total_vaccinations\"]].dropna(subset=['total_vaccinations'])\n\n#2\ndata_tv['date'] = pd.to_datetime(data_tv['date'])\ndata_tv = data_tv.groupby(['country'], as_index=False).apply(lambda x: x.set_index('date').resample('D').bfill())\n\n#3\nsum_over_dates = data_tv.reset_index().groupby(\"date\").total_vaccinations.sum()","8ca94b85":"fig, ax = plt.subplots(1, 1)\nfig.suptitle(\"Change of total vaccinations over time for the whole world\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Total vaccinations\")\nplt.xticks(rotation=70)\nplt.plot(sum_over_dates)","ffdbb923":"from pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2\n\n#1\ncontinents = {\n        'NA': 'North America',\n        'SA': 'South America', \n        'AS': 'Asia',\n        'OC': 'Australia',\n        'AF': 'Africa',\n        'EU': 'Europe'\n    }\n\ndef get_continent(country_name):\n    try:\n        return continents[country_alpha2_to_continent_code(country_name_to_country_alpha2(country_name))]\n    except:\n        if country_name == \"Faeroe Islands\":\n            return \"EU\"\n        elif country_name == \"Saint Helena\":\n            return \"EU\"\n        return None\n\ndata_tv[\"continent\"] = data_tv.country.map(lambda x: get_continent(x))\nprint(\"Any continent code is null?: \", data_tv.continent.isnull().any())\n\n#2\nsum_over_dates_per_continent = data_tv.reset_index().groupby([\"continent\", \"date\"]).total_vaccinations.sum()","3dee2020":"fig.suptitle(\"Change of total vaccinations over time per continent\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Total vaccinations\")\nplt.xticks(rotation=70)\n\nfor continent in continents.values():\n    plt.plot(sum_over_dates_per_continent[continent], label=continent)\nplt.legend()","da09a2e8":"#1\ndata_speed = data.loc[:, [\"country\", \"iso_code\", \"daily_vaccinations\"]]\n\n#2\ndata_speed = data_speed.groupby([\"country\"], as_index=False).agg({'daily_vaccinations': 'mean', 'iso_code': 'last'}).dropna(subset=[\"daily_vaccinations\"])","9e145897":"import geopandas as gpd\n\n#1\nfull_data = gpd.read_file(\"..\/input\/world-shapefiles\/ne_10m_admin_0_countries.shp\")\n\n#2\ngeo_data = full_data.loc[(full_data.ADMIN!=\"Antarctica\"), [\"geometry\", \"ADM0_A3\"]].copy()","cf356c95":"data_speed.set_index(\"iso_code\", inplace=True)\ndata_speed_map = geo_data.join(data_speed, on=\"ADM0_A3\")","44752791":"from mpl_toolkits.axes_grid1 import make_axes_locatable\nfig, ax = plt.subplots(1, 1, figsize=(25,25))\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\nax.set_xticks([])\nax.set_yticks([])\nax.title.set_text(\"Country speed\")\ndata_speed_map.plot(column='daily_vaccinations', \n            ax=ax, \n            cax=cax,\n            legend=True, \n            cmap=\"viridis_r\",\n            missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"}\n            )","0a2de8ea":"#1\ndata_hi = data.loc[:,[\"date\", \"country\", \"iso_code\", \"people_fully_vaccinated_per_hundred\"]].fillna({\"people_fully_vaccinated_per_hundred\":0})\n\n#2\ndata_hi = data_hi.groupby([\"country\"], as_index=False).last()","da8249a4":"data_hi.set_index(\"iso_code\", inplace=True)\ndata_hi_map = geo_data.join(data_hi, on=\"ADM0_A3\")","99319f64":"fig, ax = plt.subplots(1, 1, figsize=(25,25))\nax.set_xticks([])\nax.set_yticks([])\nax.title.set_text(\"People fully vaccinated per hundred\")\ndata_hi_map.plot(column='people_fully_vaccinated_per_hundred', \n            ax=ax, \n            legend=True, \n            cmap=\"RdYlGn\",\n            legend_kwds={'loc': 'lower left', 'title': \"%\"},\n            missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"},\n            scheme='User_Defined',\n            classification_kwds=dict(bins=[2,4,6,8,10,20,30,40,50]), \n            )\n","d88ca0a1":"#1\nvaccine_names = np.unique([*map(lambda x: x.strip(), np.hstack(data.vaccines.map(lambda vacc_list: vacc_list.split(\",\")).to_numpy()))])\n\n#2\ndef encode_vaccine_usage(row):\n    for vaccine_name in vaccine_names:\n        row[vaccine_name] = True if vaccine_name in row.vaccines else False\n    return row\n\ndata_vacc = data.loc[:,[\"iso_code\", \"country\", \"vaccines\"]].groupby(\"country\", as_index=False).last()\ndata_vacc = data_vacc.apply(encode_vaccine_usage, axis=1)","48081c37":"import networkx as nx\n\n#1\nG = nx.Graph()\n\n#2\ncolors = [\"red\", \"green\", \"blue\", \"yellow\", \"brown\", \"violet\", \"orange\", \"grey\", \"orangered\", \"dodgerblue\"]\n\n#3\nvaccine_colors = {}\nfor i, vaccine in enumerate(vaccine_names):\n    vaccine_colors[vaccine] = colors[i]\n    G.add_node(vaccine, color=colors[i], weight=5000, node_shape='d')\n\n#4\nfor i, row in data_vacc.iterrows():\n    for vaccine_name in vaccine_names:\n        if row[vaccine_name]:\n            G.add_node(row.country, weight=5)\n            G.add_edge(row.country, vaccine_name, color=vaccine_colors[vaccine_name])","a7529b09":"colors = nx.get_edge_attributes(G,'color').values()\nweights = [w for w in nx.get_node_attributes(G,'weight').values()]\nplt.figure(figsize=(20,20))\noptions = {\n    'width': 1,\n    'with_labels': True,\n    'font_weight': 'regular',\n    'edge_color': colors,\n    'node_size': weights,\n   'font_size': 12\n}\n\nnx.draw(G, nx.spring_layout(G, seed=3), **options)\nax = plt.gca()\nplt.show()","0b9073b0":"### Join vaccination speed data and map data","9e695500":"# Compary countries' speed","dbc98e8a":"# Thank you for reading this notebook! Any advice and suggestions will be greatly appreciated \ud83d\ude42","a8b0e7d9":"### Prepare network of *country* <-> *vaccine* connetions\n1. Create graph.\n2. Create colors palette\n3. Create vaccines node\n4. Create edges for vaccines used in different countries","e4164784":"### Plot chart","dff2a647":"### Prepare data\n1. Extract date, country, total_vaccinations\n2. Fill data for missing dates by using last seen number of total_vaccinations\n3. Sum total vaccinations from countries per day","9fd2c483":"# How far from herd immunity are the contries?\nThis map presents what is the current percentage of people who got full vaccination. As a desired level 50% is chosen.","1ff28430":"### Join vaccination and map data","d19e28ea":"## Setup","37d8b916":"# Total number of vaccinations per contintent\nThis chart presents how did the total number of given vaccination shots change over time for continents separatelym. It makes possible to compare the growth trend for continents.","d6977d47":"### Charts settings","70cb19fb":"### Prepare vaccination data\n1. Extract date, country, iso_code and people_fully_vaccinated_per_hundred\n2. For each country leave the most current number of people_fully_vaccinated_per_hundred.","deccbd03":"### Plot map","cd31418f":"### Plot chart","5929d4e5":"### Plot map","ac5c1b0b":"### Remove data for countries without iso code (e.g. UK countries whose data is provided anyway under United Kingdom label)","41454cc5":"### Prepare data\n1. Check what continent does the country belong to.\n2. Sum total vaccinations from countries per day for continent separately.","e47375c2":"### Prepare map data\n1. Read world shape file\n2. Remove Antarctica, exract iso code (ADM0_A3), map drawing data (geometry)","70e8f0f0":"### Install & import libraries","45dd9420":"### Prepare vaccines data\n1. Read all vaccines names available in the dataset\n2. Encode the information of vaccines used in each country as a boolean table","1290e1c8":"# This notebook aims to provide characteristics of the Covid-19 vaccinations proces \ud83d\udc89\n\n- \ud83c\udf0d Wow did the number of vaccinations shots change over time for the whole world?\n- \ud83d\udcca Wow did the number of vaccinations shots change over time per continent?\n- \ud83c\udfc3\u200d Which country has the best performance?\n- \ud83c\udfc6 How far is each country from herd immunity?\n- \ud83e\udd1d Which vaccines are used in different countries?","22172408":"### Draw network","b40676b7":"# Total number of vaccinations\nThis chart presents how did the total number of given vaccination shots change over time. It makes to possible to judge the overall growth trend.","1e9298a6":"### Prepare vaccination speed data\n1. Extract country, iso_code and daily_vaccinations\n2. For each country calculate the average daily vaccinations number","72d92622":"# What vaccine is used in which country?\nThis network shows how the vaccines are distributed among countries. This gives an idea about international relations."}}