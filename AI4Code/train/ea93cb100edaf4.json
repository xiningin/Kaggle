{"cell_type":{"a53013cf":"code","792338cd":"code","0e144f82":"code","39c2a240":"code","3302f5fb":"code","1067cec0":"code","f71694c8":"code","73115b75":"code","d968dadf":"code","c556bc47":"code","ef3ebf1b":"code","10332710":"code","31d0563c":"code","90ffa82f":"code","8a1303ce":"code","cdd62c24":"code","5e6c9149":"markdown","3187eaef":"markdown","d3a6e3b9":"markdown","97810127":"markdown","1fc1ffe3":"markdown","3f623d4d":"markdown","ffccb61a":"markdown"},"source":{"a53013cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","792338cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport random","0e144f82":"campus_data = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\nx1 = campus_data.iloc[:,[2,4]].values\nx2 = campus_data.iloc[:,[4,7]].values\nx3 = campus_data.iloc[:,[2,4,7]].values\ny = campus_data.iloc[:,12].values\nprint(x1[0:5])","39c2a240":"print(x2[0:5])","3302f5fb":"print(x3[0:5])","1067cec0":"print(y[0:5])","f71694c8":"from sklearn.model_selection import train_test_split\nx1_train, x1_test, y_train, y_test = train_test_split(x1, y, test_size = 0.2,random_state = 0)\nx2_train, x2_test, y_train, y_test = train_test_split(x2, y, test_size = 0.2,random_state = 0)\nx3_train, x3_test, y_train, y_test = train_test_split(x3, y, test_size = 0.2,random_state = 0)","73115b75":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nlr = LinearRegression()\n\nlr.fit(x1_train,y_train)\n\ny_pred1 = lr.predict(x1_test)\n\ndf = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred1.flatten()})\ndf\n#print((np.concatenate((y_test.reshape(43,1),  y_pred1.reshape(43,1)),1)))\n","d968dadf":"print(lr.intercept_)\nprint(lr.coef_)","c556bc47":"r2_score(y_test, y_pred1)\n","ef3ebf1b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nlr2 = LinearRegression()\nlr2.fit(x2_train,y_train)\ny_pred2 = lr2.predict(x2_test)\ndf2 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred2.flatten()})\ndf2","10332710":"print(lr2.intercept_)\nprint(lr2.coef_)","31d0563c":"r2_score(y_test, y_pred2)","90ffa82f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nlr3 = LinearRegression()\nlr3.fit(x3_train,y_train)\ny_pred3 = lr3.predict(x3_test)\ndf3 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred3.flatten()})\ndf3\n","8a1303ce":"print(lr3.intercept_)\nprint(lr3.coef_)","cdd62c24":"r2_score(y_test, y_pred3)\n","5e6c9149":"The output regression equation is : mba_p = 0.14(ssc_per)+0.13(hsc_per)+ 44.046","3187eaef":"x3 is all the three datasets combined\n","d3a6e3b9":"x1 is ssc_p and hsc_p dataset","97810127":"The regression eqn is : mba_p = 0.08(ssc_per)+0.11(hsc_per)+0.18(degree_p) + 37.719\n\nThe R2-score for the third dataset with ssc_per,hsc_per and mba_per is the highest and can be considered for this prediction","1fc1ffe3":"x2 is hsc_p and degree_p data","3f623d4d":"The regression eqn is : mba_p = 0.13(hsc_per)+0.23(degree_p) + 38.563","ffccb61a":"y is the output, in this case mba_p"}}