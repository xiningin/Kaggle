{"cell_type":{"7375c918":"code","e551bb45":"code","3f1ecf90":"code","017e9d25":"code","9df5d090":"code","1de468fb":"code","46395099":"code","21b2707a":"code","49760ccd":"code","c9a0dadd":"code","0008fdfc":"code","471f01de":"code","e2fee63f":"code","25271d29":"code","7b88d909":"code","d6adf329":"code","986ea35f":"code","43472186":"code","3f3cd484":"code","a497979c":"code","0fe33caf":"code","9b1ce87a":"code","2ddc1ae5":"code","e893cb61":"code","e8827d46":"code","6b138a4c":"code","552a34ec":"code","93c5f2b6":"code","aad5d497":"code","271ad37a":"code","d1931dcc":"code","04c19c01":"code","096bbd78":"code","38c9104a":"code","ce6d5ed0":"code","f0c732f6":"code","41c47d39":"code","af944143":"code","5ca6efc8":"code","77196018":"code","5c6cfdd7":"code","404025c5":"code","f77f6548":"code","ff4239f0":"code","16290983":"code","a68531a8":"code","b18917fa":"code","6e6c74a1":"code","81c921ea":"code","4b08f657":"code","0553998f":"code","8092bdea":"code","84cb7fab":"code","e802488f":"code","60197d58":"code","5450d44e":"code","7b3e3f4e":"code","f7574a77":"code","976a7a76":"code","7a0550db":"code","897c3957":"code","b801de28":"code","a6d39e55":"code","006271b8":"code","55cda763":"code","ed182e25":"code","5de6423e":"code","720c0a97":"code","fd5a60d9":"code","5ddc253c":"code","0c2dc014":"code","8f118a0d":"code","68507d5c":"markdown","682ff576":"markdown","934f0f23":"markdown","1699fa61":"markdown","725bf487":"markdown","fb2e2e6e":"markdown","0ebf6474":"markdown","677f4967":"markdown","d61005ed":"markdown","ca78ea9b":"markdown","821af27e":"markdown","218d04a2":"markdown","37edda0c":"markdown","b49e95b2":"markdown"},"source":{"7375c918":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e551bb45":"import numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt","3f1ecf90":"import folium\nfrom folium.plugins import MarkerCluster","017e9d25":"import warnings\nwarnings.filterwarnings('ignore')","9df5d090":"df = pd.read_csv(\"\/kaggle\/input\/network-coverage\/Coverage.csv\",header=0, delimiter=\",\")\ndf.head()","1de468fb":"df.dtypes","46395099":"#summarize the data\ndf.describe()","21b2707a":"df.isnull().sum()","49760ccd":"df.columns","c9a0dadd":"df.nunique()","0008fdfc":"df.duplicated().sum()","471f01de":"df.shape","e2fee63f":"import seaborn as sns","25271d29":"corr = df.corr()\nsns.heatmap(corr,annot=True,cmap='Reds')","7b88d909":"from matplotlib import pyplot as plt","d6adf329":"df['Satisfaction_Score'].value_counts()","986ea35f":"fig = plt.figure(figsize=(10 , 7.5))\nax = sns.countplot(x = 'Satisfaction_Score', data = df)\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+45), ha=\"center\", rotation = 0)","43472186":"df['Real_Time_Experience'].value_counts()","3f3cd484":"fig = plt.figure(figsize=(10 , 7.5))\nax = sns.countplot(x = 'Real_Time_Experience', data = df)\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+10), ha=\"center\")","a497979c":"fig = plt.figure(figsize=(10 , 7.5))\nax = sns.countplot(x = 'Network_Level', data = df)\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+20), ha=\"center\")","0fe33caf":"network_level_df = df[(df['Network_Level'] == input('Network Level : '))]\nprint(f'Matched Result : {network_level_df.shape[0]}')\nnetwork_level_df.head()","9b1ce87a":"network_level = network_level_df['Network_Level'].unique()\nnetwork_level[0]\nfig = plt.figure(figsize=(10 , 7))\nplt.title(f'\\nOperator wise {network_level[0]} Network Availability\\n')\nax = sns.countplot(x = 'Operator', data = network_level_df)\nprint(f\"Network Level: {network_level[0]}\")\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+ 12), ha=\"center\")","2ddc1ae5":"fig = plt.figure(figsize=(10 , 7))\nplt.title(f'\\nAll Operator {network_level[0]} 4G and {network_level[0]} 3G\/2G Network Availability\\n')\nax = sns.countplot(x = 'Active_Network_Available', data = network_level_df)\nprint(f\"Network Level: {network_level[0]}\")\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+ 2.5), ha=\"center\")","e893cb61":"with_operator_mentioned_network_level_detailed_df = df[(df['Operator'] == input('Operator : ')) & (df['Active_Network_Available'] == input('Active_Network_Available : ')) & (df['Network_Level'] == input('Network_Level : '))]\nprint(f'Matched Result : {with_operator_mentioned_network_level_detailed_df.shape[0]}')\nwith_operator_mentioned_network_level_detailed_df.head()","e8827d46":"detailed_operator = with_operator_mentioned_network_level_detailed_df['Operator'].unique()\ndetailed_operator[0]\n\ndetailed_active_network_available = with_operator_mentioned_network_level_detailed_df['Active_Network_Available'].unique()\ndetailed_active_network_available[0]\n\ndetailed_active_network_level = with_operator_mentioned_network_level_detailed_df['Network_Level'].unique()\ndetailed_active_network_level[0]\n\n\nfig = plt.figure(figsize=(6 , 8))\nplt.title(f'\\nNumber of {detailed_operator[0]} {detailed_active_network_level[0]} {detailed_active_network_available[0]} Area\\n')\nax = sns.countplot(x = 'Operator', data = with_operator_mentioned_network_level_detailed_df,hue = 'Operator' )\nprint(f\"Operator : {detailed_operator[0]}\\nActive Network Level : {detailed_active_network_level[0]}\\nAvailable Network : {detailed_active_network_available[0]} networks\")\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+p.get_width()\/2, p.get_height()+0.1), ha=\"center\")\nprint(f'\\nYour query has matched {p.get_height()} results')","6b138a4c":"district_all_network_df = df[(df['District'] == input('District : ')) & (df['Operator'] == input('Operator : ')) & (df['Active_Network_Available'] == input('Active_Network_Available : '))]\nprint(f'Matched Result : {district_all_network_df.shape[0]}')\ndistrict_all_network_df","552a34ec":"selected_district = district_all_network_df['District'].unique()\nselected_district[0]\n\nselected_operator = district_all_network_df['Operator'].unique()\nselected_operator[0]\n\nselected_active_network = district_all_network_df['Active_Network_Available'].unique()\nselected_active_network[0]\n\n\nplt.figure(figsize=(15,10))\nplt.title(f'\\n{selected_district[0]} district real-time {selected_operator[0]} {selected_active_network[0]} network experience\\n')\nax = sns.barplot(x = 'Upazila_or_Thana',y= 'Real_Time_Experience', data= district_all_network_df, hue='Operator',order = district_all_network_df['Upazila_or_Thana'].unique(), ci = None)\nplt.xlabel('Upazila\/Thana',fontsize=15)\n#print(f\"Area : {area[0]}\\nAll Operator Network : {network[0]} networks\")\nfor p in ax.patches:\n        ax.annotate(p.get_height().round(1), (p.get_x()+p.get_width()\/2, p.get_height()+0.02), ha=\"center\", rotation = 0)\n        plt.xticks(rotation= 90)\nplt.show()","93c5f2b6":"#area_all_network_df = df[(df['Upazila_or_Thana'] == input('Upazila\/Thana : ')) & (df['Active_Network_Available'].str.contains(input('Active_Network_Available : ')))]\narea_all_network_df = df[(df['Upazila_or_Thana'] == input('Upazila\/Thana : ')) & (df['Active_Network_Available'] == input('Active_Network_Available : '))]\narea_all_network_df ","aad5d497":"Point = area_all_network_df['Satisfaction_Score'] * (10\/3) + area_all_network_df['Real_Time_Experience'] * (20\/3)\narea_all_network_df['Point'] = round(Point,2)\narea_all_network_df","271ad37a":"area = area_all_network_df['Upazila_or_Thana'].unique()\narea[0]\n\nnetwork = area_all_network_df['Active_Network_Available'].unique()\nnetwork[0]\n\nmax_score = area_all_network_df[['Point']].max().unique()\nmax_score[0]\n\n\nmax_area_all_network_df = area_all_network_df[(area_all_network_df['Point'] == max_score[0])]\nmax_area_all_network_df\n\nmax_network = max_area_all_network_df['Operator'].unique()\nmax_network[0]\n\n\nplt.figure(figsize=(10,8))\nplt.title(f'\\n{area[0]} all operator {network[0]} network experience\\n')\nax = sns.barplot(x = 'Operator',y= 'Point', data= area_all_network_df, hue='Operator',order = area_all_network_df['Operator'].unique(), dodge = False, ci = None)\nplt.xlabel('Operator',fontsize=15)\nprint(f\"\\nUpazila\/Thana : {area[0]}\\nAll Operator Network : {network[0]} networks\")\nprint(f\"Upazila\/Thana : {area[0]} Best Coverage Network is : {max_network[0]}.\")\nfor p in ax.patches:\n        ax.annotate(p.get_height().round(), (p.get_x()+p.get_width()\/2, p.get_height()+0.02), ha=\"center\")\nplt.show()","d1931dcc":"bd_lat = 23.6850\nbd_long = 90.3563\nbd_map = folium.Map(location=[bd_lat, bd_long], zoom_start=8)\n\nfor Latitude, Longitude, label in zip(area_all_network_df.Latitude, area_all_network_df.Longitude, area_all_network_df.Point):\n    folium.CircleMarker(\n        [Latitude, Longitude],\n        radius=np.log(label*100),  #define how big you want the circle markers to be\n        color='black',\n        fill=True,\n        #popup=str(label),\n        popup = str(area[0]),\n        fill_color='red',\n        fill_opacity=0.8\n    ).add_to(bd_map)\n\n#show map\nbd_map","04c19c01":"import numpy as np \nimport pandas as pd\nfrom matplotlib import pyplot as plt","096bbd78":"import warnings\nwarnings.filterwarnings('ignore')","38c9104a":"df = pd.read_csv(\"\/kaggle\/input\/network-coverage\/Coverage.csv\",header=0, delimiter=\",\")\ndf.head(2)","ce6d5ed0":"df = df.drop(['Longitude', 'Latitude', 'Index'], axis=1)\ndf.head(2)","f0c732f6":"Point = df['Satisfaction_Score'] * (10\/3) + df['Real_Time_Experience'] * (20\/3)\ndf['Point'] = round(Point,2)\ndf['Point'] = df['Point'].astype(int)\n#df['Real_Time_Experience'] = df['Real_Time_Experience'].astype(int)\ndf.head()","41c47d39":"#Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(action='ignore')","af944143":"df.dtypes","5ca6efc8":"for col in ['Upazila_or_Thana','Operator', 'Active_Network_Available', 'District', 'Network_Level', 'Area_Zip_Code']:\n    df[col] = df[col].astype('category')","77196018":"df.dtypes","5c6cfdd7":"train, test = train_test_split(df, test_size=0.2, random_state=42, shuffle=True)","404025c5":"train.shape, test.shape","f77f6548":"!pip install catboost","ff4239f0":"import catboost as cat\ncat_feat = ['Upazila_or_Thana','Operator', 'Active_Network_Available', 'District' , 'Area_Zip_Code']\n#features = list(set(train.columns)-set(['Point']))\nfeatures = ['Operator','Upazila_or_Thana', 'Active_Network_Available', 'District', 'Area_Zip_Code']\ntarget = 'Point'\nmodel = cat.CatBoostRegressor(random_state= 3, cat_features=cat_feat, verbose= 0, learning_rate = 0.1, iterations= 335, l2_leaf_reg= 1, loss_function = 'RMSE', depth = 10)\n#model.fit(train[features],train[target])","16290983":"from catboost import CatBoostClassifier, CatBoostRegressor, Pool\npool = Pool(train[features], train[target], cat_features=cat_feat, feature_names=features)","a68531a8":"params={'iterations': 335,'depth':6,'learning_rate':0.1,'eval_metric': 'RMSE', \"loss_function\": \"RMSE\"}","b18917fa":"grid = {'learning_rate': [0.03, 0.1], 'depth': [4, 6, 10], 'l2_leaf_reg': [1, 3, 5, 7, 9]}","6e6c74a1":"model.grid_search(grid,\n            X=train[features],\n            y=train[target],\n            cv = 10,\n            partition_random_seed= 0,\n            calc_cv_statistics=True,\n            search_by_train_test_split=True,\n            refit=True,\n            shuffle=True,\n            stratified=None,\n            train_size=0.8,\n            verbose=True,\n            plot=False)","81c921ea":"cv_res = cat.cv(params=params, \n             pool=pool,\n             fold_count =10,\n             inverted=False,\n             partition_random_seed=0,\n             shuffle=True)\nprint(cv_res)","4b08f657":"model.fit(train[features],train[target])","0553998f":"importances = model.get_feature_importance(prettified=True)\nprint(importances)","8092bdea":"model.get_params()","84cb7fab":"shap_info = model.get_feature_importance(data=pool, type='ShapValues', verbose=10000)\nshap_values = shap_info[:,:-1]\nbase_values = shap_info[:,-1]\nprint(shap_values.shape)","e802488f":"!pip install shap","60197d58":"import shap\nshap.summary_plot(shap_values, train[features])","5450d44e":"#feature importance plot\nshap.summary_plot(shap_values, train[features], plot_type=\"bar\")","7b3e3f4e":"from catboost import CatBoostClassifier, Pool\n\npool = Pool(train[features], train[target], cat_features=cat_feat, feature_names=features)\nmodel.plot_tree(\n    tree_idx=0,\n    pool=pool\n)","f7574a77":"print(features)","976a7a76":"y_true= pd.DataFrame(data=test[target], columns=['Point'])\ntest_temp = test.drop(columns=[target])","7a0550db":"data=test[target]\ndata","897c3957":"y_pred = model.predict(test_temp[features])","b801de28":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrmse = sqrt(mean_squared_error(y_true, y_pred))\nprint(rmse)","a6d39e55":"test_temp[features].head(10)","006271b8":"model.predict(test_temp[features].head(10))","55cda763":"train_score = model.score(train[features],train[target])\ntrain_score","ed182e25":"val_score = model.score(test[features],test[target])\nval_score","5de6423e":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n#k-fold CV using Sklearn\nscores = cross_val_score(model, train[features],train[target], scoring ='r2', cv= 10)\nscores ","720c0a97":"a = pd.concat([test_temp[features],data], axis = 1)\na.head(5)","fd5a60d9":"area_all_network_df = df[(df['Upazila_or_Thana'] == input('Upazila\/Thana : ')) & (df['Active_Network_Available'] == input('Active_Network_Available : '))]\narea_all_network_df ","5ddc253c":"Point = area_all_network_df['Satisfaction_Score'] * (10\/3) + area_all_network_df['Real_Time_Experience'] * (20\/3)\narea_all_network_df['Point'] = round(Point,2)\narea_all_network_df","0c2dc014":"area = area_all_network_df['Upazila_or_Thana'].unique()\narea[0]\n\nnetwork = area_all_network_df['Active_Network_Available'].unique()\nnetwork[0]\n\nmax_score = area_all_network_df[['Point']].max().unique()\nmax_score[0]\n\n\nmax_area_all_network_df = area_all_network_df[(area_all_network_df['Point'] == max_score[0])]\nmax_area_all_network_df\n\nmax_network = max_area_all_network_df['Operator'].unique()\nmax_network[0]\n\n\nplt.figure(figsize=(10,8))\nplt.title(f'\\n{area[0]} all operator {network[0]} network experience\\n')\nax = sns.barplot(x = 'Operator',y= 'Point', data= area_all_network_df, hue='Operator',order = area_all_network_df['Operator'].unique(), dodge = False, ci = None)\nplt.xlabel('Operator',fontsize=15)\nprint(f\"\\nUpazila\/Thana : {area[0]}\\nAll Operator Network : {network[0]} networks\")\nprint(f\"Upazila\/Thana : {area[0]} Best Coverage Network is : {max_network[0]}.\")\nfor p in ax.patches:\n        ax.annotate(p.get_height().round(), (p.get_x()+p.get_width()\/2, p.get_height()+0.02), ha=\"center\")\nplt.show()","8f118a0d":"import math  \n\nOp = ['GP', 'Robi-Airtel', 'Banglalink', 'Teletalk']\nmodel_input = []\nscore = []\n\nele2 = input('\\nYour Upazila\/Thana Area (Add \"Sadar\" for Sadar Upazila, example : Barishal Sadar): ')\nele3 = input('Select Your Network Availability (4G or 3G\/2G) : ')\nele4 = input('Your District : ')\nele5 = input('Your Upazila\/Thana Zip Code : ')\n\nfor i in range(len(Op)):\n  ele1 = Op[i]\n  model_input.clear()\n  #ele1 = input('Select Your Operator (GP \/ Robi-Airtel \/ Banglalink \/ Teletalk) : ') \n  model_input.append(ele1)\n  model_input.append(ele2)\n  model_input.append(ele3)\n  model_input.append(ele4)\n  model_input.append(ele5)\n  #print(model_input)\n\n  Operator = model_input[0]\n  Upazila_or_Thana = model_input[1]\n  Active_Network_Available\t= model_input[2]\n  District = model_input[3]\n  Area_Zip_Code = model_input[4]\n\n  \n  \n  p = model.predict(model_input)\n  \n  score.append(p)\n\n  temp = p - math.floor(p)\n \n  if (temp > 0.5):\n    p = math.ceil(p)\n  elif (temp == 0.5):\n    p = p\n  else:\n    p = math.floor(p)\n\n  #print(f'Operator : {Operator} {Active_Network_Available} score in Area : {Upazila_or_Thana} (Out of 100) is : {round(p,2)}')  \n#print(score)\n\n#to convert lists to dictionary \nres = dict(zip(Op, score)) \n  \n# Printing resultant dictionary  \n#print (\"Resultant dictionary is : \" +  str(res))\nmx = max(res, key=res.get)\nprint(f'\\nBest Operator in Your Upazila\/Thana is : {mx}')","68507d5c":"# **District Area Network Strength**","682ff576":"**Select your Network Level :** Very Low, Low, Moderate, Good, Not Available\n\n**Select your Available Active Network :**  4G or 3G\/2G\n\n**Select your Operator :** GP, Robi-Airtel, Banglalink, Teletalk","934f0f23":"**Select your network level :** Very Low, Low, Moderate, Good, Not Available\n\n**Select your available active network available :** 4G or 3G\/2G\n\n**Select your operator :** GP, Robi-Airtel, Banglalink, Teletalk","1699fa61":"# **Upazila wise your network strength**","725bf487":"**Select your network level :** Very Low, Low, Moderate, Good, Not Available\n\n**Select your available active network available :** 4G or 3G\/2G\n\n**Select your operator :** GP, Robi-Airtel, Banglalink, Teletalk","fb2e2e6e":"**Select your network level :** Very Low, Low, Moderate, Good, Not Available\n\n**Select your available active network available :** 4G or 3G\/2G\n\n**Select your operator :** GP, Robi-Airtel, Banglalink, Teletalk","0ebf6474":"# **Upazila\/Thana wise Network Strength**","677f4967":"**Adding a new point column**","d61005ed":"# **Plotting Location in Map**","ca78ea9b":"# **Predict Best Operator in your Upazila\/Thana**","821af27e":"# **Detailed Network Level Checking**","218d04a2":"**Select your Available Active Network :**  4G or 3G\/2G\n\n**Select your Network Level :** Very Low, Low, Moderate, Good, Not Available","37edda0c":"# **Implementation of CatBoost**","b49e95b2":"# **Checking Network Availability**"}}