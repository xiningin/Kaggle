{"cell_type":{"f7650cb5":"code","19338869":"code","9e80a2b7":"code","179d00b6":"code","7ceffa04":"code","f0768950":"code","33033444":"code","fb005163":"code","a532d4f1":"code","66150038":"code","508319d9":"code","70b20a7e":"code","a255da8b":"code","f7bc6175":"code","73a297a3":"code","138d504a":"code","960c7847":"code","844678ae":"code","5080dd39":"code","a5c12182":"code","41d2ae18":"code","c97dd3a4":"code","d2576fd0":"code","322e6424":"code","62cf7162":"code","da8d6704":"markdown","8352ccac":"markdown","797a2c6d":"markdown","1fb57994":"markdown","966f2040":"markdown","79d6e82c":"markdown","a771c4f0":"markdown","e143a4ae":"markdown","973699ec":"markdown","d2e0786f":"markdown","c5ac4695":"markdown","0af24e2b":"markdown","88090c6e":"markdown","6e508571":"markdown"},"source":{"f7650cb5":"import os\nfrom torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor\n\ndata_dir = '..\/input\/face-mask-dataset\/data'\ndataset = ImageFolder(data_dir, transform=ToTensor())\nprint(len(dataset))\nprint(dataset.classes)","19338869":"img, label = dataset[0]\nprint(img.shape, label)\nimg","9e80a2b7":"import torch\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))\n    \nshow_example(*dataset[0])","179d00b6":"import torchvision.transforms as tt\n\nimage_size = (32,32)\nstats = ([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])\n\ndataset = ImageFolder(data_dir, tt.Compose([\n    tt.Resize(image_size),\n    tt.ToTensor(),\n    tt.Normalize(*stats)\n]))","7ceffa04":"image, label = dataset[0]\nplt.imshow(image.permute((1,2,0)))","f0768950":"def denormalize(images, means, stds):\n    if len(images.shape) == 3:\n        images = images.unsqueeze(0)\n    means = torch.tensor(means).reshape(1, 3, 1, 1)\n    stds = torch.tensor(stds).reshape(1, 3, 1, 1)\n    return images * stds + means\n\ndef show_image(img_tensor, label):\n    print('Label:', dataset.classes[label], '(' + str(label) + ')')\n    img_tensor = denormalize(img_tensor, *stats)[0].permute((1, 2, 0))\n    plt.imshow(img_tensor)","33033444":"from torch.utils.data import random_split\nval_pct = 0.1\nval_size = int(val_pct * len(dataset))\n\ntrain_ds, valid_ds = random_split(dataset, [len(dataset) - val_size, val_size])","fb005163":"from torch.utils.data import DataLoader\nbatch_size = 256\n\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nvalid_dl = DataLoader(valid_ds, batch_size*2, num_workers=4, pin_memory=True)","a532d4f1":"from torchvision.utils import make_grid\n\ndef denormalize(images, means, stds):\n    if len(images.shape) == 3:\n        images = images.unsqueeze(0)\n    means = torch.tensor(means).reshape(1, 3, 1, 1)\n    stds = torch.tensor(stds).reshape(1, 3, 1, 1)\n    return images * stds + means\n\ndef show_image(img_tensor, label):\n    print('Label:', dataset.classes[label], '(' + str(label) + ')')\n    img_tensor = denormalize(img_tensor, *stats)[0].permute((1, 2, 0))\n    plt.imshow(img_tensor)\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 16))\n        ax.set_xticks([]); ax.set_yticks([])\n        images = denormalize(images[:64], *stats)\n        ax.imshow(make_grid(images, nrow=8).permute(1, 2, 0))\n        break\n        \nshow_batch(train_dl)","66150038":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n\n\ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n\n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl:\n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)\n","508319d9":"device = get_default_device()\ndevice","70b20a7e":"train_dl = DeviceDataLoader(train_dl, device)\nvalid_dl = DeviceDataLoader(valid_dl, device)","a255da8b":"import torch.nn as nn\nimport torch.nn.functional as F\n\ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels)  # Calculate loss\n        return loss\n\n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n\n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n\n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}],{} train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, \"last_lr: {:.5f},\".format(result['lrs'][-1]) if 'lrs' in result else '', \n            result['train_loss'], result['val_loss'], result['val_acc']))","f7bc6175":"class CnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            # input: 3*32*32\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            # output: 32*32*32\n            nn.ReLU(),\n            # output: 32*32*32\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            # output: 64*32*32\n            nn.ReLU(),\n            # output: 64*32*32\n            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n\n            nn.Flatten(), #flatten to vector of class 10\n            nn.Linear(256*4*4, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10))\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \nmodel = to_device(CnnModel(), device)\nmodel","73a297a3":"import torch\nfrom tqdm.notebook import tqdm\n\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase\n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,\n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n\n    # Set up custom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,\n                                                steps_per_epoch=len(train_loader))\n\n    for epoch in range(epochs):\n        # Training Phase\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n\n            # Gradient clipping\n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n\n            optimizer.step()\n            optimizer.zero_grad()\n\n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","138d504a":"history = [evaluate(model, valid_dl)]\nhistory","960c7847":"%%time\n\nepochs = 6\nmax_lr = 0.01\ngrad_clip = 0.1 #gradients cannot become larger than 0.1\nweight_decay = 1e-4 #weights does not become too large\nopt_func = torch.optim.Adam\n\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","844678ae":"from torchvision import models\n\nmodels.resnet34(pretrained=True)","5080dd39":"class MasksModel(ImageClassificationBase):\n    def __init__(self, num_classes, pretrained=True):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=pretrained) #downloading weights from this model when it was trained on ImageNet dataset\n        # Replace last layer\n        self.network.fc = nn.Linear(self.network.fc.in_features, num_classes)\n\n    def forward(self, xb):\n        return self.network(xb)","a5c12182":"model = MasksModel(len(dataset.classes), pretrained=True)\nto_device(model, device);","41d2ae18":"history = [evaluate(model, valid_dl)]\nhistory","c97dd3a4":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","d2576fd0":"model2 = MasksModel(len(dataset.classes), pretrained=False)\nto_device(model2, device);","322e6424":"history2 = [evaluate(model2, valid_dl)]\nhistory2","62cf7162":"%%time\nhistory2 += fit_one_cycle(epochs, max_lr, model2, train_dl, valid_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","da8d6704":"## Modifying a Pretrained Model (ResNet34)","8352ccac":"Normalized image","797a2c6d":"Function to denormalize the normalized images.","1fb57994":"## Creating Training and Validation Sets","966f2040":"RestNet34 -> 33 convolutional layers and 1 linear layer","79d6e82c":"## Creating Class for building Convolutional Neural Network model.","a771c4f0":"## Exploring the Dataset","e143a4ae":"Loading the dataset using ImageFolder class from torchvision","973699ec":"Training functions","d2e0786f":"## Finetuning the Pretrained Model","c5ac4695":"Resizing the image and cropping it to 32 * 32 pixel image, and also normalizing the pixel values to the mean and standard deviation of Imagenet images.","0af24e2b":"Defining Image Classification base class.","88090c6e":"## Training a model from scratch without the weights\n\nLet's repeat the training without using weights from the pretrained ResNet34 model.","6e508571":"Defining MasksModel class for mask\/without mask image classification using pretrained model Restnet34"}}