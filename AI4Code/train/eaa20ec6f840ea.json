{"cell_type":{"0d70a612":"code","a70500ef":"code","a66e1c72":"code","2782d32a":"code","7294aab4":"code","b1c2acd1":"code","b01142b9":"code","b92e502a":"code","bb4b0ec3":"code","f8f0d16a":"code","5bb53bd0":"code","dab06aed":"code","be8e00ee":"code","3b1d7f61":"code","313cf468":"code","429d325a":"code","d8c0504c":"code","d7fa6886":"code","479f48c1":"code","0293a40b":"code","6ca41c64":"code","16cafd23":"code","9bdd3adf":"code","cee1df05":"code","42922fa7":"code","120b1eda":"code","079d4c39":"code","e8e1204d":"code","2feeb642":"code","253f96fb":"code","d3436735":"code","bbd0de7e":"code","2b292a46":"code","5571dd84":"code","5001949e":"code","15821956":"code","0cf9b5f6":"code","731b1c70":"markdown","2a93b06b":"markdown","a36f27cc":"markdown","fefe7179":"markdown","2ae38675":"markdown","5967fae1":"markdown"},"source":{"0d70a612":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a70500ef":"df=pd.read_csv('..\/input\/heart-disease-data\/heart_disease_uci.csv')\ndf.head()","a66e1c72":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n%matplotlib inline","2782d32a":"df.isnull().sum()","7294aab4":"#percentage of missing values\ndf.isnull().sum()\/len(df)*100","b1c2acd1":"df.describe()","b01142b9":"df.info()","b92e502a":"sns.set_style('whitegrid')","bb4b0ec3":"sns.displot(x='age',data=df,hue='sex')","f8f0d16a":"sns.displot(x='sex',data=df,hue='num')","5bb53bd0":"sns.boxplot(data=df,x='ca',y='trestbps')","dab06aed":"pd.crosstab(df['cp'],df['ca'])","be8e00ee":"sns.kdeplot(x='trestbps',data=df,hue='ca')","3b1d7f61":"sns.kdeplot(x='oldpeak',data= df,hue='ca')","313cf468":"sns.scatterplot(x='chol',y='trestbps',data=df,hue='ca',size='oldpeak')","429d325a":"# A copy of original dataset so we don't lose the original info\ndf_copy= df.copy()","d8c0504c":"# Since we didn't get any feature which could help us to fill values of 'ca', we drop it\ndf_copy.drop('ca',axis=1,inplace=True)","d7fa6886":"sns.scatterplot(x='age',y='chol',data=df)","479f48c1":"print(df[df['trestbps']!=0]['trestbps'].mean())\nprint(df[df['chol']!=0]['chol'].mean())","0293a40b":"# Replacing 0 cholestrol and trestbps value with mean value\ndf_copy['trestbps']=df_copy['trestbps'].replace(0,132)\ndf_copy['chol']=df_copy['chol'].replace(0,247)","6ca41c64":"sns.scatterplot(y='chol',x='age',data=df_copy,hue='slope')","16cafd23":"sns.scatterplot(y='chol',x='age',data=df_copy,hue='slope')","9bdd3adf":"sns.scatterplot(y='chol',x='age',data=df_copy,hue='thal')","cee1df05":"# Since we didn't get any feature which could help us to fill values of 'slope' and 'thal', we drop it\n\ndf_copy.drop(['thal','slope'],axis=1,inplace=True)","42922fa7":"#rest all are less than 10% so we can drop the rest null values\n\ndf_copy.dropna(inplace=True)","120b1eda":"df_copy['cp']=df_copy['cp'].replace(['typical angina', 'atypical angina', 'non-anginal', 'asymptomatic'],[0,1,2,3])\ndf_copy['restecg'].replace(['normal', 'st-t abnormality', 'lv hypertrophy'],[0,1,2],inplace=True)\ndf_copy['exang'].replace([True,False],[1,0],inplace=True)","079d4c39":"df_copy['fbs'].replace([True,False],[1,0],inplace=True)\ndf_copy['sex'].replace(['Male','Female'],[1,0],inplace=True)\ndf_copy","e8e1204d":"df_copy.drop(['id','dataset'],axis=1,inplace=True)","2feeb642":"from sklearn.model_selection import train_test_split\nX,y= df_copy.drop('num',axis=1),df_copy['num']\n","253f96fb":"# Changing all the numerical values into standard values (Z= (X-mean)\/std)\nX[['age','trestbps','chol','thalch','oldpeak']]= (X[['age','trestbps','chol','thalch','oldpeak']]-X[['age','trestbps','chol','thalch','oldpeak']].mean())\/X[['age','trestbps','chol','thalch','oldpeak']].std()\nX","d3436735":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2,random_state=101)","bbd0de7e":"from sklearn.neighbors import KNeighborsClassifier","2b292a46":"errors=[]\nK=np.arange(1,10)\nfor k in K:\n    model= KNeighborsClassifier(k)\n    model.fit(X_train,y_train)\n    pred= model.predict(X_test)\n    error_rate= np.mean(pred!=y_test)\n    errors.append(error_rate)\n\nplt.plot(K,errors)\nplt.xlabel('Number of Neighbours, K')\nplt.ylabel('error_rate')\n\n","5571dd84":"#Thererfore, we get least error with K=5\n\nmodel= model= KNeighborsClassifier(5)\nmodel.fit(X_train,y_train)\npred= model.predict(X_test)\nerror_rate= np.mean(pred!=y_test)\nprint(error_rate)","5001949e":"from sklearn.neural_network import MLPClassifier","15821956":"mlp_classifier = MLPClassifier(hidden_layer_sizes=(10,15,8))\nmlp_classifier.fit(X_train,y_train)","0cf9b5f6":"predict2=mlp_classifier.predict(X_test)\nerror_rate2= np.mean(predict2!=y_test)\nprint(error_rate2)","731b1c70":"### We can see although the MLPClassifier doesn't converge, yet it has better than KNearesNeighbours","2a93b06b":"# Short Summary about the data and data types","a36f27cc":"# Data Preprocessing","fefe7179":"# Model Selection\n\nSince the prediction values are non-binary values, we select KNearestNeighbours and Multi-layer Classifier","2ae38675":"Loading data","5967fae1":"# Data Visualiztion and Handling Missing Values"}}