{"cell_type":{"c7c313f0":"code","d0d3de2f":"code","e3a8ba5d":"code","5738a9ec":"code","734767ef":"code","e3b81edb":"code","892ab2bb":"code","6c7f5c56":"code","40d64bf6":"code","27563443":"code","94288b60":"code","8cf2418c":"code","132f2fc5":"code","2f972653":"code","c4ede3d5":"code","315e409d":"code","ac1a5719":"code","d8e2cd97":"code","e3d77099":"code","959a5126":"code","4060dfc2":"code","2d799607":"code","bf054fd8":"code","0a1581a1":"code","236c0dec":"code","4506a43e":"code","10931c9d":"code","fb1b212e":"code","08455cd0":"code","daf99bbc":"code","ffc7d2a2":"code","b87725ac":"code","62f0f023":"code","2904137d":"code","7b8d1e86":"code","5e33617a":"markdown","600d0b36":"markdown","663855af":"markdown","547ef7c1":"markdown","a94d9a24":"markdown","a73fffd0":"markdown","a530f46d":"markdown","ac02a2ee":"markdown","d15f6d82":"markdown","6794c790":"markdown","03a6a525":"markdown","a8dbdfd7":"markdown","69a77181":"markdown","cd879197":"markdown","384975fd":"markdown","e7a2782a":"markdown","875f6682":"markdown","a40498a5":"markdown","5fa03b74":"markdown","7faba81b":"markdown","90670bd8":"markdown","2bfc1119":"markdown","48a37b47":"markdown","863e1657":"markdown","4fa246fb":"markdown","5873e48f":"markdown"},"source":{"c7c313f0":"# <--==== Importing Necessary Libraries ====-->\nimport os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\nprint(\"Libraries imported\")","d0d3de2f":"parkinson_data = pd.read_csv(\"..\/input\/parkinson-csv\/parkinsons.csv\")\nparkinson_data.head(10) #printing first 10 rows of dataframe","e3a8ba5d":"parkinson_data.info() #getting more info about the dataset","5738a9ec":"parkinson_data.shape #rows and columns in dataset","734767ef":"parkinson_data.describe() #statistical data about the dataset","e3b81edb":"parkinson_data.isnull().sum() #checking for missing values","892ab2bb":"parkinson_data.corr()","6c7f5c56":"plt.figure(figsize=(25, 25))\np = sns.heatmap(parkinson_data.corr(), annot=True)","40d64bf6":"# target variable = status \nparkinson_data['status'].value_counts()","27563443":"parkinson_data.groupby('status').mean()","94288b60":"X = parkinson_data.drop(columns=['status','name'], axis=1) # Note : dropping column axis = 1; dropping row then axis = 0\nY = parkinson_data['status']","8cf2418c":"print(X)","132f2fc5":"print(Y)","2f972653":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)","c4ede3d5":"print(X.shape, X_train.shape, X_test.shape)","315e409d":"scaler = StandardScaler()","ac1a5719":"scaler.fit(X_train)","d8e2cd97":"X_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","e3d77099":"print(X_train)","959a5126":"model = svm.SVC(kernel='linear')","4060dfc2":"# training the SVM model with training data\nmodel.fit(X_train, Y_train)","2d799607":"# Accuracy Score on training data\nX_train_pred = model.predict(X_train)\ntraining_data_accuracy = accuracy_score(Y_train, X_train_pred)","bf054fd8":"print('Accuracy (Training Data) :', training_data_accuracy*100, '%')","0a1581a1":"# Accuracy Score on test data\nX_test_pred = model.predict(X_test)\ntesting_data_accuracy = accuracy_score(Y_test, X_test_pred)","236c0dec":"print('Accuracy (Testing Data) :', testing_data_accuracy*100, '%')","4506a43e":"input_data = (95.730,132.068,91.754,0.00551,0.00006,0.00293,0.00332,0.00880,0.02093,0.191,0.01073,0.01277,0.01717,0.03218,0.01070,21.812,0.615551,0.773587,-5.498678,0.327769,2.322511,0.231571)\n\n# changing input data to numpy array\ninput_data_numpy = np.asarray(input_data)\n\n#reshaping the numpy array \ninput_data_reshape = input_data_numpy.reshape(1,-1)\n\n#standardizing the input data \nstd_data = scaler.transform(input_data_reshape)\n\n## prediction\nprediction = model.predict(std_data)\nprint(prediction)\n\nif (prediction[0] == 1):\n  print('The patient has Parkinson')\nelif (prediction[0] == 0):\n  print('The patient does not have Parkinson')\nelse:\n  print('Some error in processing')","10931c9d":"input_data = (197.07600,206.89600,192.05500,0.00289,0.00001,0.00166,0.00168,0.00498,0.01098,0.09700,0.00563,0.00680,0.00802,0.01689,0.00339,26.77500,0.422229,0.741367,-7.348300,0.177551,1.743867,0.085569)\n# changing input data to numpy array\ninput_data_numpy = np.asarray(input_data)\n\n#reshaping the numpy array \ninput_data_reshape = input_data_numpy.reshape(1,-1)\n\n#standardizing the input data \nstd_data = scaler.transform(input_data_reshape)\n\n## prediction\nprediction = model.predict(std_data)\nprint(prediction)\n\nif (prediction[0] == 1):\n  print('The patient has Parkinson')\nelif (prediction[0] == 0):\n  print('The patient does not have Parkinson')\nelse:\n  print('Some error in processing')","fb1b212e":"import pickle","08455cd0":"with open('model_pickle','wb') as f:\n  pickle.dump(model,f)","daf99bbc":"with open('model_pickle','rb') as f:\n  mp = pickle.load(f) #loading the made model","ffc7d2a2":"input_data = (95.730,132.068,91.754,0.00551,0.00006,0.00293,0.00332,0.00880,0.02093,0.191,0.01073,0.01277,0.01717,0.03218,0.01070,21.812,0.615551,0.773587,-5.498678,0.327769,2.322511,0.231571)\ninput_data_numpy = np.asarray(input_data)\n\n#reshaping the numpy array \ninput_data_reshape = input_data_numpy.reshape(1,-1)\n\n#standardizing the input data \nstd_data = scaler.transform(input_data_reshape)\n\n## prediction\nprediction = mp.predict(std_data) #model made using Pickle\nprint(prediction)\n\nif (prediction[0] == 1):\n  print('The patient has Parkinson')\nelif (prediction[0] == 0):\n  print('The patient does not have Parkinson')\nelse:\n  print('Some error in processing')","b87725ac":"import joblib","62f0f023":"joblib.dump(model,'model-joblib')","2904137d":"mj = joblib.load('model-joblib') #loading the model","7b8d1e86":"input_data = (95.730,132.068,91.754,0.00551,0.00006,0.00293,0.00332,0.00880,0.02093,0.191,0.01073,0.01277,0.01717,0.03218,0.01070,21.812,0.615551,0.773587,-5.498678,0.327769,2.322511,0.231571)\ninput_data_numpy = np.asarray(input_data)\n\n#reshaping the numpy array \ninput_data_reshape = input_data_numpy.reshape(1,-1)\n\n#standardizing the input data \nstd_data = scaler.transform(input_data_reshape)\n\n## prediction\nprediction = mj.predict(std_data)  #model made using joblib\nprint(prediction)\n\nif (prediction[0] == 1):\n  print('The patient has Parkinson')\nelif (prediction[0] == 0):\n  print('The patient does not have Parkinson')\nelse:\n  print('Some error in processing')","5e33617a":"# Data Pre-Processing","600d0b36":"### We will now test our model taking some input data, since only testing the model is not enough, we also need to check it against some input values given by the user","663855af":"## Splitting data into testing and training","547ef7c1":"#### **Observation :** *Model working as desired*","a94d9a24":"## Seperating Other variables and Target Variables","a73fffd0":"# Dataset","a530f46d":"Our target variable here is '**status**' column, **0 -->** *Without Parkison Disease*, **1 -->** *Has Parkinson Disease*","ac02a2ee":"##### Verdict : *The model has predicted correctly*","d15f6d82":"# Grouping Data based on target variable","6794c790":"#### Case 2 : Input Values of Patient **not** having Parkinson, let's see if the model is able to predict or not","03a6a525":"#### Case 1 : Input Values of Patient having Parkinson, let's see if the model is able to predict or not","a8dbdfd7":"Rows : 195; Columns : 24","69a77181":"# Model Evaluation","cd879197":"Download the Models from my Github : https:\/\/github.com\/SagarBapodara\/Parkison_Disease_Detection_ML","384975fd":"### Method 2 : Using Sklearn Joblib","e7a2782a":"#### Testing the Model","875f6682":"# Data Standardization","a40498a5":"### Method 1 : Using Pickle ","5fa03b74":"#### Testing the Model ","7faba81b":"##### Verdict : *The model has predicted correctly*","90670bd8":"## If you found this useful, kindly upvote and comment your views :) ","2bfc1119":"# Extracting the ML Model \n#### Model can be deployed at backend and taking input using a Front-end system","48a37b47":"# Predictive System","863e1657":"### We will train the model using Support Vector Machine (SVM)","4fa246fb":"# Model Training","5873e48f":"Original Dataset : https:\/\/www.kaggle.com\/nidaguler\/parkinsons-data-set\n\nDownload Dataset in CSV : https:\/\/www.kaggle.com\/sagarbapodara\/parkinson-csv"}}