{"cell_type":{"b6ba928d":"code","c0024cc8":"code","dffdb5e3":"code","caf597cf":"code","8696bbf1":"code","fdaa0186":"code","1542bfeb":"code","4b1b8946":"code","7edaa045":"code","3a4f76ca":"code","5d6144b5":"code","16f86975":"code","30ec11fa":"code","c01a6748":"code","37a1896a":"code","43d7e106":"code","b9147691":"code","ccd0449f":"code","93070e53":"code","0ab4f8e8":"code","01ade04a":"code","e9ba7b75":"code","f56b87a0":"code","15518e47":"code","de227515":"code","c336cf04":"code","34c2dd56":"code","a59dc474":"markdown","412c8356":"markdown","71a8d88b":"markdown","35910b5e":"markdown","6e80ecb1":"markdown","a4c9a75e":"markdown","be98fce2":"markdown","1dc4917b":"markdown","8f976be2":"markdown"},"source":{"b6ba928d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report","c0024cc8":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","dffdb5e3":"data.head()","caf597cf":"data.isnull().sum()","8696bbf1":"data.info()","fdaa0186":"data.describe()","1542bfeb":"def BoxPlot(x , y, axis):\n    \"\"\"\n    This function return Box plot of give data with respect Outcome means \n    0 : Not Diabetes \n    1 : Diabetes\n    \n    \n    \"\"\"\n    return sns.boxplot(x = x, \n                       y = y,\n                       ax = axis,\n                       data = data)","4b1b8946":"fig, ax = plt.subplots(4, 2, figsize=(15, 15))\nax1 = ax[0, 0]\nax2 = ax[0, 1]\nax3 = ax[1, 0]\nax4 = ax[1, 1]\nax5 = ax[2, 0]\nax6 = ax[2, 1]\nax7 = ax[3, 0]\nax8 = ax[3, 1]\nBoxPlot('Outcome','Glucose',ax1)\nBoxPlot('Outcome','BloodPressure',ax2)\nBoxPlot('Outcome','SkinThickness',ax3)\nBoxPlot('Outcome','Insulin',ax4)\nBoxPlot('Outcome','BMI',ax5)\nBoxPlot('Outcome','DiabetesPedigreeFunction',ax6)\nBoxPlot('Outcome','Age',ax7)\nBoxPlot('Outcome','Pregnancies',ax8)\nplt.show()","7edaa045":"def Outliers(col):\n    data_mean, data_std = np.mean(col), np.std(col)\n    # identify outliers\n    cut_off = data_std * 3\n    lower, upper = data_mean - cut_off, data_mean + cut_off\n    # identify outliers\n    outliers = [x for x in col if x < lower or x > upper]\n\n    return len(outliers)","3a4f76ca":"print('Outliers in Glucose :',Outliers(data['Glucose']))\nprint('Outliers in BloodPressure :',Outliers(data['BloodPressure']))\nprint('Outliers in SkinThickness :',Outliers(data['SkinThickness']))\nprint('Outliers in BMI :',Outliers(data['BMI']))\nprint('Outliers in DiabetesPedigreeFunction :',Outliers(data['DiabetesPedigreeFunction']))\nprint('Outliers in Age :',Outliers(data['Age']))\nprint('Outliers in Pregnancies :',Outliers(data['Pregnancies']))","5d6144b5":"def ScatterPlot(x , y, axis):\n    \"\"\"\n    This function return Scatter plot of give data with respect Outcome means \n    0 : Not Diabetes \n    1 : Diabetes\n    \n    \n    \"\"\"\n    return sns.scatterplot(x = x, \n                           y = y,\n                           hue = 'Outcome',\n                           ax = axis,\n                           data = data)","16f86975":"fig, ax = plt.subplots(3, 2, figsize=(15, 15))\nax1 = ax[0, 0]\nax2 = ax[0, 1]\nax3 = ax[1, 0]\nax4 = ax[1, 1]\nax5 = ax[2, 0]\nax6 = ax[2, 1]\nScatterPlot('Glucose','Age',ax1)\nScatterPlot('BloodPressure','Age',ax2)\nScatterPlot('SkinThickness','Age',ax3)\nScatterPlot('Insulin','Age',ax4)\nScatterPlot('BMI','Age',ax5)\nScatterPlot('DiabetesPedigreeFunction','Age',ax6)\nplt.show()","30ec11fa":"plt.figure(figsize=(10,8))\nsns.heatmap(data.corr(), square=True, cmap='coolwarm', annot=True)","c01a6748":"def OutcomeAnalysis(col_name,axis):\n    return data.groupby('Outcome')[col_name].mean().sort_values().plot(kind='bar', color='coral',ax = axis)","37a1896a":"fig, ax = plt.subplots(3, 2, figsize=(15, 15))\nax1 = ax[0, 0]\nax2 = ax[0, 1]\nax3 = ax[1, 0]\nax4 = ax[1, 1]\nax5 = ax[2, 0]\nax6 = ax[2, 1]\nOutcomeAnalysis('Glucose',ax1)\nax1.set_title('Avg.Glucose level')\nOutcomeAnalysis('BloodPressure',ax2)\nax2.set_title('Avg.BloodPressure')\nOutcomeAnalysis('SkinThickness',ax3)\nax3.set_title('Avg.SkinThickness')\nOutcomeAnalysis('Insulin',ax4)\nax4.set_title('Avg.Insulin')\nOutcomeAnalysis('BMI',ax5)\nax5.set_title('Avg.BMI')\nOutcomeAnalysis('DiabetesPedigreeFunction',ax6)\nax6.set_title('Avg.DiabetesPedigreeFunction')\nplt.show()","43d7e106":"fig, ax = plt.subplots(4, 2, figsize=(15, 15))\ndp=sns.distplot(data['Pregnancies'],ax=ax[0, 0])\ndp=sns.distplot(data['Glucose'],ax=ax[0, 1])\ndp=sns.distplot(data['BloodPressure'],ax=ax[1, 0])\ndp=sns.distplot(data['SkinThickness'],ax=ax[1, 1])\ndp=sns.distplot(data['Insulin'],ax=ax[2, 0])\ndp=sns.distplot(data['BMI'],ax=ax[2, 1])\ndp=sns.distplot(data['DiabetesPedigreeFunction'],ax=ax[3, 0])\ndp=sns.distplot(data['Age'],ax=ax[3, 1])\nplt.show()","b9147691":"X = data.drop(['Outcome'],axis = 1)\ny = data['Outcome']","ccd0449f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","93070e53":"sc = StandardScaler()","0ab4f8e8":"X2_train = sc.fit_transform(X_train)\nX2_test = sc.fit_transform(X_test)\ny2_train = y_train\ny2_test = y_test","01ade04a":"def OptimalKNN(X_train, X_test, y_train, y_test):\n    max_k = 50\n    f1_scores = list()\n    error_rates = list() # 1-accuracy\n\n    for k in range(1, max_k):\n    \n        knn = KNeighborsClassifier(n_neighbors=k, weights='distance')\n        knn = knn.fit(X_train, y_train)\n    \n        y_pred = knn.predict(X_test)\n        f1 = f1_score(y_pred, y_test)\n        f1_scores.append((k, round(f1_score(y_test, y_pred), 4)))\n        error = 1-round(accuracy_score(y_test, y_pred), 4)\n        error_rates.append((k, error))\n    \n    f1_results = pd.DataFrame(f1_scores, columns=['K', 'F1 Score'])\n    error_results = pd.DataFrame(error_rates, columns=['K', 'Error Rate'])\n    \n    return f1_results, error_results","e9ba7b75":"f1, error = OptimalKNN(X_train, X_test, y_train, y_test)\nf1_scale, error_scale = OptimalKNN(X2_train, X2_test, y2_train, y2_test)","f56b87a0":"def PlotKNN(accuracies,y_axis):\n    ax = accuracies.set_index('K').plot(figsize=(8,8))\n    ax.set(xlabel='K', ylabel=y_axis)\n    plt.title('KNN '+y_axis)\n    plt.show()","15518e47":"Error_Rate = 'Error Rate'\nf1_score = 'F1 Score'\nPlotKNN(f1, f1_score)","de227515":"PlotKNN(error, Error_Rate)","c336cf04":"PlotKNN(f1_scale, f1_score)","34c2dd56":"PlotKNN(error_scale, Error_Rate)","a59dc474":"#### Model Implementation","412c8356":"Their are very few outliers so we can ignore them. ","71a8d88b":"#### Observation of above plots :\n\n* . Glocose, BloodPressure and BMI is normally distributed.\n* . Pregnancies, Insulin, DiabetesPedigreeFunction and Age is right-screwed in nature.\n\n\n###### Data needs to normalize.","35910b5e":"# Diabetes Predication \n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.","6e80ecb1":"#### Observation of above plots :\n* . Average Insulin value is high for ladies who have diabetes.\n* . Avrage Diabetes Pedigree function is high for ladies who have diabetes.","a4c9a75e":"#### Finding outliers","be98fce2":"#### Data Pre-processing","1dc4917b":"# EDA","8f976be2":"#### Observation of above plots : \n\n1. As the 1st plot of 'Age vs Glucose level' as glucose level increase more ladies have diabetes\n2. In next 4 plot main observation is as age increase there are more chances of having diabetes\n3. In last plot ladies who's age is high and diabetes pedigree function more than 0.5 have more chances of diabetes"}}