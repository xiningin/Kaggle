{"cell_type":{"2e72b37c":"code","bb94f6a6":"code","2f53b9e5":"code","4af38966":"code","21bfb925":"code","e0ea2681":"code","c27e732d":"code","765aa62a":"code","9bcaf4f9":"code","93594386":"code","9e549c9e":"code","846c01e2":"markdown","b756b9b4":"markdown","5d8a0d64":"markdown","d1fc3421":"markdown","1d59b167":"markdown","2d0da1f8":"markdown"},"source":{"2e72b37c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPooling2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport os\n","bb94f6a6":"labels = ['PNEUMONIA', 'NORMAL']\nimg_size = 128\ndef get_training_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) # Reshaping images to preferred size\n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","2f53b9e5":"train = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train')\ntest = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test')\nval = get_training_data('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val')","4af38966":"x_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nx_test = []\ny_test = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in test:\n    x_test.append(feature)\n    y_test.append(label)\n    \nfor feature, label in val:\n    x_val.append(feature)\n    y_val.append(label)","21bfb925":"c = 10\nresolution = 128\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(25, 3)\nfor i in range(c):\n    n = np.random.randint(0, len(x_train))\n    num = y_train[n]\n    word = \"out\" if num == 0 else \"\" \n    \n    subplots[i].imshow(x_train[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplots[i].set_title(f\"X-ray with{word} Pnm: {num}\")\n    subplots[i].axis(\"off\")\nplt.show()","e0ea2681":"x_train = np.array(x_train) \/ 255\nx_val = np.array(x_val) \/ 255\nx_test = np.array(x_test) \/ 255","c27e732d":"x_train = x_train.reshape(-1, img_size, img_size, 1)\ny_train = np.array(y_train)\n\nx_val = x_val.reshape(-1, img_size, img_size, 1)\ny_val = np.array(y_val)\n\nx_test = x_test.reshape(-1, img_size, img_size, 1)\ny_test = np.array(y_test)","765aa62a":"input_shape = (128,128,1)\nmodel = Sequential()\nmodel.add(Conv2D(32,kernel_size = (2,2),strides = (1,1),activation = 'relu',input_shape = input_shape))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(64,kernel_size = (2,2),strides = (1,1),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(64,kernel_size = (2,2),strides = (1,1),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(128,kernel_size = (2,2),strides = (1,1),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides = (2,2)))\nmodel.add(Conv2D(256,kernel_size = (2,2),strides = (1,1),activation = 'relu'))\n\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation=\"linear\"))\nmodel.add(Dense(1, activation=\"sigmoid\"))\nmodel.summary()","9bcaf4f9":"model.compile(optimizer = 'rmsprop',loss = \"binary_crossentropy\",metrics = ['accuracy'])","93594386":"model.fit(x_train,y_train,batch_size = 10,epochs = 30,validation_data = (x_val,y_val))","9e549c9e":"y_test_results = model.predict([x_test])\n\nc = 5\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(30, 9)\nfor i in range(c):\n    n = np.random.randint(0, len(x_test))\n    guess = str(round(y_test_results[n][0], 2)).ljust(4, \"0\")\n    actual = y_test[n]\n\n    subplot = subplots[i]\n    subplot.imshow(x_test[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplot.set_title(f\"predicted: {guess}, actual: {actual}\")\n    subplot.axis(\"off\")\nplt.show()","846c01e2":"# **Loading Required Libraries**","b756b9b4":"# **Model Testing**","5d8a0d64":"# **Visualizing Images**","d1fc3421":"# **PreProcessing**","1d59b167":"# **Loading Images**","2d0da1f8":"# **Convolutional Neural Network**"}}