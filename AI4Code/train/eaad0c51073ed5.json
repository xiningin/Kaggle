{"cell_type":{"8a6a6ca2":"code","f545cc23":"code","e372c633":"code","37df13f5":"code","2c5191eb":"code","dbe7dcb6":"code","d38d8abd":"code","860cc093":"code","7b906a4b":"code","45b94c78":"code","7e402161":"code","eaca3dd6":"code","8af82aac":"code","8cbb2cf6":"code","41ed8e08":"code","fc3b4900":"code","ed3ac3cf":"code","d7908641":"code","c2fa62bd":"code","ad8ff637":"code","27fe6166":"code","ebd5e378":"code","38baf846":"code","f6fbdf2a":"code","9e9f9f30":"code","ae4b9be5":"code","317e3daa":"code","50d99765":"code","6d763bfb":"code","0488de3b":"code","84a68cae":"code","40163de5":"markdown","22057df3":"markdown","eeca6e21":"markdown","49698ade":"markdown","ba134313":"markdown","44eb42d4":"markdown","eadd6c83":"markdown"},"source":{"8a6a6ca2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ast\nfrom collections import Counter\nimport datetime\nfrom IPython.display import HTML\nimport base64\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f545cc23":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","e372c633":"dict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x))\n    return df\n\ntext_to_dict(train)\ntext_to_dict(test)\ntrain.head()","37df13f5":"# data fixes from https:\/\/www.kaggle.com\/somang1418\/happy-valentines-day-and-keep-kaggling-3\ntrain.loc[train['id'] == 16,'revenue'] = 192864          # Skinning\ntrain.loc[train['id'] == 90,'budget'] = 30000000         # Sommersby          \ntrain.loc[train['id'] == 118,'budget'] = 60000000        # Wild Hogs\ntrain.loc[train['id'] == 149,'budget'] = 18000000        # Beethoven\ntrain.loc[train['id'] == 313,'revenue'] = 12000000       # The Cookout \ntrain.loc[train['id'] == 451,'revenue'] = 12000000       # Chasing Liberty\ntrain.loc[train['id'] == 464,'budget'] = 20000000        # Parenthood\ntrain.loc[train['id'] == 470,'budget'] = 13000000        # The Karate Kid, Part II\ntrain.loc[train['id'] == 513,'budget'] = 930000          # From Prada to Nada\ntrain.loc[train['id'] == 797,'budget'] = 8000000         # Welcome to Dongmakgol\ntrain.loc[train['id'] == 819,'budget'] = 90000000        # Alvin and the Chipmunks: The Road Chip\ntrain.loc[train['id'] == 850,'budget'] = 90000000        # Modern Times\ntrain.loc[train['id'] == 1112,'budget'] = 7500000        # An Officer and a Gentleman\ntrain.loc[train['id'] == 1131,'budget'] = 4300000        # Smokey and the Bandit   \ntrain.loc[train['id'] == 1359,'budget'] = 10000000       # Stir Crazy \ntrain.loc[train['id'] == 1542,'budget'] = 1              # All at Once\ntrain.loc[train['id'] == 1570,'budget'] = 15800000       # Crocodile Dundee II\ntrain.loc[train['id'] == 1571,'budget'] = 4000000        # Lady and the Tramp\ntrain.loc[train['id'] == 1714,'budget'] = 46000000       # The Recruit\ntrain.loc[train['id'] == 1721,'budget'] = 17500000       # Cocoon\ntrain.loc[train['id'] == 1865,'revenue'] = 25000000      # Scooby-Doo 2: Monsters Unleashed\ntrain.loc[train['id'] == 2268,'budget'] = 17500000       # Madea Goes to Jail budget\ntrain.loc[train['id'] == 2491,'revenue'] = 6800000       # Never Talk to Strangers\ntrain.loc[train['id'] == 2602,'budget'] = 31000000       # Mr. Holland's Opus\ntrain.loc[train['id'] == 2612,'budget'] = 15000000       # Field of Dreams\ntrain.loc[train['id'] == 2696,'budget'] = 10000000       # Nurse 3-D\ntrain.loc[train['id'] == 2801,'budget'] = 10000000       # Fracture\ntest.loc[test['id'] == 3889,'budget'] = 15000000       # Colossal\ntest.loc[test['id'] == 6733,'budget'] = 5000000        # The Big Sick\ntest.loc[test['id'] == 3197,'budget'] = 8000000        # High-Rise\ntest.loc[test['id'] == 6683,'budget'] = 50000000       # The Pink Panther 2\ntest.loc[test['id'] == 5704,'budget'] = 4300000        # French Connection II\ntest.loc[test['id'] == 6109,'budget'] = 281756         # Dogtooth\ntest.loc[test['id'] == 7242,'budget'] = 10000000       # Addams Family Values\ntest.loc[test['id'] == 7021,'budget'] = 17540562       #  Two Is a Family\ntest.loc[test['id'] == 5591,'budget'] = 4000000        # The Orphanage\ntest.loc[test['id'] == 4282,'budget'] = 20000000       # Big Top Pee-wee\n\n\n# train.loc[train['id'] == 16,'revenue'] = 192864         \n# train.loc[train['id'] == 90,'budget'] = 30000000                  \n# train.loc[train['id'] == 118,'budget'] = 60000000       \n# train.loc[train['id'] == 149,'budget'] = 18000000       \n# train.loc[train['id'] == 313,'revenue'] = 12000000       \n# train.loc[train['id'] == 451,'revenue'] = 12000000      \n# train.loc[train['id'] == 464,'budget'] = 20000000       \n# train.loc[train['id'] == 470,'budget'] = 13000000       \n# train.loc[train['id'] == 513,'budget'] = 930000         \n# train.loc[train['id'] == 797,'budget'] = 8000000        \n# train.loc[train['id'] == 819,'budget'] = 90000000       \n# train.loc[train['id'] == 850,'budget'] = 90000000       \n# train.loc[train['id'] == 1007,'budget'] = 2              \n# train.loc[train['id'] == 1112,'budget'] = 7500000       \n# train.loc[train['id'] == 1131,'budget'] = 4300000        \n# train.loc[train['id'] == 1359,'budget'] = 10000000       \n# train.loc[train['id'] == 1542,'budget'] = 1             \n# train.loc[train['id'] == 1570,'budget'] = 15800000       \n# train.loc[train['id'] == 1571,'budget'] = 4000000        \n# train.loc[train['id'] == 1714,'budget'] = 46000000       \n# train.loc[train['id'] == 1721,'budget'] = 17500000       \n# train.loc[train['id'] == 1865,'revenue'] = 25000000      \n# train.loc[train['id'] == 1885,'budget'] = 12             \n# train.loc[train['id'] == 2091,'budget'] = 10             \n# train.loc[train['id'] == 2268,'budget'] = 17500000       \n# train.loc[train['id'] == 2491,'budget'] = 6              \n# train.loc[train['id'] == 2602,'budget'] = 31000000       \n# train.loc[train['id'] == 2612,'budget'] = 15000000       \n# train.loc[train['id'] == 2696,'budget'] = 10000000      \n# train.loc[train['id'] == 2801,'budget'] = 10000000       \n# train.loc[train['id'] == 335,'budget'] = 2 \n# train.loc[train['id'] == 348,'budget'] = 12\n# train.loc[train['id'] == 470,'budget'] = 13000000 \n# train.loc[train['id'] == 513,'budget'] = 1100000\n# train.loc[train['id'] == 640,'budget'] = 6 \n# train.loc[train['id'] == 696,'budget'] = 1\n# train.loc[train['id'] == 797,'budget'] = 8000000 \n# train.loc[train['id'] == 850,'budget'] = 1500000\n# train.loc[train['id'] == 1199,'budget'] = 5 \n# train.loc[train['id'] == 1282,'budget'] = 9              \n# train.loc[train['id'] == 1347,'budget'] = 1\n# train.loc[train['id'] == 1755,'budget'] = 2\n# train.loc[train['id'] == 1801,'budget'] = 5\n# train.loc[train['id'] == 1918,'budget'] = 592 \n# train.loc[train['id'] == 2033,'budget'] = 4\n# train.loc[train['id'] == 2118,'budget'] = 344 \n# train.loc[train['id'] == 2252,'budget'] = 130\n# train.loc[train['id'] == 2256,'budget'] = 1 \n# train.loc[train['id'] == 2696,'budget'] = 10000000\n\n\n# test.loc[test['id'] == 3033,'budget'] = 250 \n# test.loc[test['id'] == 3051,'budget'] = 50\n# test.loc[test['id'] == 3084,'budget'] = 337\n# test.loc[test['id'] == 3224,'budget'] = 4  \n# test.loc[test['id'] == 3594,'budget'] = 25  \n# test.loc[test['id'] == 3619,'budget'] = 500  \n# test.loc[test['id'] == 3831,'budget'] = 3  \n# test.loc[test['id'] == 3935,'budget'] = 500  \n# test.loc[test['id'] == 4049,'budget'] = 995946 \n# test.loc[test['id'] == 4424,'budget'] = 3  \n# test.loc[test['id'] == 4460,'budget'] = 8  \n# test.loc[test['id'] == 4555,'budget'] = 1200000 \n# test.loc[test['id'] == 4624,'budget'] = 30 \n# test.loc[test['id'] == 4645,'budget'] = 500 \n# test.loc[test['id'] == 4709,'budget'] = 450 \n# test.loc[test['id'] == 4839,'budget'] = 7\n# test.loc[test['id'] == 3125,'budget'] = 25 \n# test.loc[test['id'] == 3142,'budget'] = 1\n# test.loc[test['id'] == 3201,'budget'] = 450\n# test.loc[test['id'] == 3222,'budget'] = 6\n# test.loc[test['id'] == 3545,'budget'] = 38\n# test.loc[test['id'] == 3670,'budget'] = 18\n# test.loc[test['id'] == 3792,'budget'] = 19\n# test.loc[test['id'] == 3881,'budget'] = 7\n# test.loc[test['id'] == 3969,'budget'] = 400\n# test.loc[test['id'] == 4196,'budget'] = 6\n# test.loc[test['id'] == 4221,'budget'] = 11\n# test.loc[test['id'] == 4222,'budget'] = 500\n# test.loc[test['id'] == 4285,'budget'] = 11\n# test.loc[test['id'] == 4319,'budget'] = 1\n# test.loc[test['id'] == 4639,'budget'] = 10\n# test.loc[test['id'] == 4719,'budget'] = 45\n# test.loc[test['id'] == 4822,'budget'] = 22\n# test.loc[test['id'] == 4829,'budget'] = 20\n# test.loc[test['id'] == 4969,'budget'] = 20\n# test.loc[test['id'] == 5021,'budget'] = 40 \n# test.loc[test['id'] == 5035,'budget'] = 1 \n# test.loc[test['id'] == 5063,'budget'] = 14 \n# test.loc[test['id'] == 5119,'budget'] = 2 \n# test.loc[test['id'] == 5214,'budget'] = 30 \n# test.loc[test['id'] == 5221,'budget'] = 50 \n# test.loc[test['id'] == 4903,'budget'] = 15\n# test.loc[test['id'] == 4983,'budget'] = 3\n# test.loc[test['id'] == 5102,'budget'] = 28\n# test.loc[test['id'] == 5217,'budget'] = 75\n# test.loc[test['id'] == 5224,'budget'] = 3 \n# test.loc[test['id'] == 5469,'budget'] = 20 \n# test.loc[test['id'] == 5840,'budget'] = 1 \n# test.loc[test['id'] == 5960,'budget'] = 30\n# test.loc[test['id'] == 6506,'budget'] = 11 \n# test.loc[test['id'] == 6553,'budget'] = 280\n# test.loc[test['id'] == 6561,'budget'] = 7\n# test.loc[test['id'] == 6582,'budget'] = 218\n# test.loc[test['id'] == 6638,'budget'] = 5\n# test.loc[test['id'] == 6749,'budget'] = 8 \n# test.loc[test['id'] == 6759,'budget'] = 50 \n# test.loc[test['id'] == 6856,'budget'] = 10\n# test.loc[test['id'] == 6858,'budget'] =  100\n# test.loc[test['id'] == 6876,'budget'] =  250\n# test.loc[test['id'] == 6972,'budget'] = 1\n# test.loc[test['id'] == 7079,'budget'] = 8000000\n# test.loc[test['id'] == 7150,'budget'] = 118\n# test.loc[test['id'] == 6506,'budget'] = 118\n# test.loc[test['id'] == 7225,'budget'] = 6\n# test.loc[test['id'] == 7231,'budget'] = 85\n# test.loc[test['id'] == 5222,'budget'] = 5\n# test.loc[test['id'] == 5322,'budget'] = 90\n# test.loc[test['id'] == 5350,'budget'] = 70\n# test.loc[test['id'] == 5378,'budget'] = 10\n# test.loc[test['id'] == 5545,'budget'] = 80\n# test.loc[test['id'] == 5810,'budget'] = 8\n# test.loc[test['id'] == 5926,'budget'] = 300\n# test.loc[test['id'] == 5927,'budget'] = 4\n# test.loc[test['id'] == 5986,'budget'] = 1\n# test.loc[test['id'] == 6053,'budget'] = 20\n# test.loc[test['id'] == 6104,'budget'] = 1\n# test.loc[test['id'] == 6130,'budget'] = 30\n# test.loc[test['id'] == 6301,'budget'] = 150\n# test.loc[test['id'] == 6276,'budget'] = 100\n# test.loc[test['id'] == 6473,'budget'] = 100\n# test.loc[test['id'] == 6842,'budget'] = 30\n\npower_six = train.id[train.budget > 1000][train.revenue < 100]\n\nfor k in power_six :\n    train.loc[train['id'] == k,'revenue'] =  train.loc[train['id'] == k,'revenue'] * 1000000\n","2c5191eb":"train['has_homepage'] = 0\ntrain.loc[train['homepage'].isnull() == False, 'has_homepage'] = 1\n\ntest['has_homepage'] = 0\ntest.loc[test['homepage'].isnull() == False, 'has_homepage'] = 1\n\ntest.head()","dbe7dcb6":"plt.scatter(train[\"has_homepage\"], train[\"revenue\"], alpha=.2)","d38d8abd":"test.loc[test['release_date'].isnull() == True, 'release_date'] = \"04\/10\/99\"                                         \ntrain['release_date_mod'] = pd.to_datetime(train['release_date'],format=\"%m\/%d\/%y\")\ntrain['release_date_mod'] = train['release_date_mod'].mask(train['release_date_mod'].dt.year > 2019, \n                                         train['release_date_mod'] - pd.offsets.DateOffset(years=100))\ntrain['release_date_mod']\n\ntest.loc[test['release_date'].isnull() == True, 'release_date'] = \"04\/10\/99\"                                         \ntest['release_date_mod'] = pd.to_datetime(test['release_date'],format=\"%m\/%d\/%y\")\ntest['release_date_mod'] = test['release_date_mod'].mask(test['release_date_mod'].dt.year > 2019, \n                                         test['release_date_mod'] - pd.offsets.DateOffset(years=100))\ntest['release_date_mod']\n\n\n","860cc093":"def make_date_feature(df):\n    df[\"release_year\"] = pd.DatetimeIndex(df['release_date_mod']).year\n    df[\"release_day\"] = pd.DatetimeIndex(df['release_date_mod']).dayofweek\n    \nmake_date_feature(train)\nmake_date_feature(test)\n\ntrain.head()","7b906a4b":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nplt.scatter(train[\"release_day\"], train[\"revenue\"], alpha=.2)\nplt.subplot(2, 2, 2)\nplt.scatter(train[\"release_year\"], train[\"revenue\"], alpha=.2)\nplt.subplot(2, 2, 3)\nplt.hist(train[\"release_day\"])\nplt.subplot(2, 2, 4)\nplt.hist(test[\"release_day\"])","45b94c78":"#plt.hist(train[\"revenue\"])\n#plt.hist(np.log1p(train[\"revenue\"]))\n\n#plt.hist(train[\"budget\"])\nplt.hist(np.log1p(train[\"budget\"]))\n\ntrain[\"log_budget\"] = train[\"budget\"].apply(lambda x : np.log1p(x))\ntrain[\"log_revenue\"] = train[\"revenue\"].apply(lambda x : np.log1p(x))","7e402161":"test[\"log_budget\"] = train[\"budget\"].apply(lambda x : np.log1p(x))","eaca3dd6":"all_languages = list(train[\"original_language\"])\nCounter(all_languages).most_common() \n\ntrain[\"is_english\"] = train[\"original_language\"].apply(lambda x : 1 if x=='en' else 0)\nplt.scatter(train[\"is_english\"], train[\"revenue\"], alpha=.2)\n\ntest[\"is_english\"] = test[\"original_language\"].apply(lambda x : 1 if x=='en' else 0)","8af82aac":"fig, ax = plt.subplots(figsize = (16, 8))\nplt.subplot(1, 2, 1)\nplt.scatter(train[\"runtime\"], train[\"revenue\"])\nplt.subplot(1, 2, 2)\nplt.hist(train[\"runtime\"])","8cbb2cf6":"plt.scatter(train[\"popularity\"], train[\"revenue\"])","41ed8e08":"train[\"in_collection\"] = train[\"belongs_to_collection\"].apply(lambda x : 1 if len(x)!=0 else 0)\nsns.jointplot(train[\"in_collection\"], train[\"revenue\"], alpha=.5)\n\ntest[\"in_collection\"] = test[\"belongs_to_collection\"].apply(lambda x : 1 if len(x)!=0 else 0)","fc3b4900":"train.head()","ed3ac3cf":"def new_features(df):    \n    # some features from https:\/\/www.kaggle.com\/somang1418\/happy-valentines-day-and-keep-kaggling-3\n    df['budget_year_ratio'] = df['budget'] \/ (df['release_year'] * df['release_year'])\n    df['year_logbudget_ratio'] = df['release_year']\/df['log_budget']\n    df['popularity_to_mean_year'] = df['popularity'] \/ df.groupby(\"release_year\")[\"popularity\"].transform('mean')\n    df['budget_to_mean_year'] = df['budget'] \/ df.groupby(\"release_year\")[\"budget\"].transform('mean')\n    df['budget_to_runtime'] = df['log_budget'] \/ df['runtime']\n    \n    df['budget_popularity_ratio'] = df['log_budget']\/df['popularity']\n    df['releaseYear_popularity_ratio'] = df['release_year']\/df['popularity']\n    df['releaseYear_popularity_ratio2'] = df['popularity']\/df['release_year']\n    return df\n    \nnew_features(train)\nnew_features(test)","d7908641":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nplt.scatter(train[\"budget_year_ratio\"], train[\"log_revenue\"], alpha=.2)\nplt.subplot(2, 2, 2)\nplt.scatter(train[\"year_logbudget_ratio\"], train[\"log_revenue\"], alpha=.2)\nplt.subplot(2, 2, 3)\nplt.scatter(train[\"popularity_to_mean_year\"], train[\"log_revenue\"], alpha=.2)\nplt.subplot(2, 2, 4)\nplt.scatter(train[\"budget_to_mean_year\"], train[\"log_revenue\"], alpha=.2)","c2fa62bd":"X = train.as_matrix(columns=[\n                            \"log_budget\",\n                            \"budget_year_ratio\",\n                            \"runtime\",\n                            \"has_homepage\",\n                            \"popularity\", \n#                             \"popularity_to_mean_year\",\n#                             \"budget_to_mean_year\",\n                            \"release_year\",\n#                             \"budget_to_runtime\",\n#                             \"year_logbudget_ratio\",\n                            \"budget_popularity_ratio\",\n                            \"releaseYear_popularity_ratio\",\n                            ])\nX","ad8ff637":"Y = train.as_matrix(columns=[\"log_revenue\"])\nY","27fe6166":"nan_values = np.argwhere(np.isnan(X))\nnan_values","ebd5e378":"for i in nan_values:\n    X[i[0],i[1]]=np.nanmean(X[:,i[1]:i[1]+1])","38baf846":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=.8, random_state=0)\n\nfrom xgboost import XGBRegressor\nmodel_xgb = XGBRegressor(\n                        gamma=1, \n                        learning_rate=.1,\n                        max_depth=3,\n                        subsample=1,\n                        reg_lambda=1,\n                        )\n                         \nmodel_xgb.fit(X_train, Y_train,eval_metric='rmse', verbose = True, eval_set = [(X_test, Y_test)])\n\ny_pred = model_xgb.predict(X_test)\ny_pred = np.array(np.exp(y_pred)-1)\ny_pred\n\nfrom sklearn.metrics import explained_variance_score, mean_absolute_error, mean_squared_error, mean_squared_log_error\nprint(explained_variance_score(np.array(np.exp(Y_test)-1), y_pred))\nprint(mean_squared_log_error(np.array(np.exp(Y_test)-1), y_pred))","f6fbdf2a":"from sklearn.model_selection import KFold\n\nrandom_seed = 42\nk = 10\nfold = list(KFold(k, shuffle = True, random_state = random_seed).split(train))\nnp.random.seed(random_seed)","9e9f9f30":"# from sklearn.ensemble import RandomForestRegressor\n# model_rf = RandomForestRegressor(n_estimators=100)\n# model_rf.fit(X_train, Y_train)\n\n# y_pred_2 = model_rf.predict(X_test)","ae4b9be5":"# import lightgbm as lgb\n\n# lgb_train = lgb.Dataset(X_train, np.array(Y_train))\n# lgb_eval = lgb.Dataset(X_test, np.array(Y_test), reference=lgb_train)\n\n# params = {\n#     'boosting_type': 'gbdt',\n#     'objective': 'regression',\n#     'metric': {'l2', 'l1'},\n#     'num_leaves': 31,\n#     'learning_rate': 0.05,\n#     'feature_fraction': 0.9,\n#     'bagging_fraction': 0.8,\n#     'bagging_freq': 5,\n#     'verbose': 0\n# }\n\n# gbm = lgb.train(params,\n#                 lgb_train,\n#                 num_boost_round=100,\n#                 valid_sets=lgb_eval,\n#                 early_stopping_rounds=5)","317e3daa":"# y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)","50d99765":"X_final = test.as_matrix(columns=[\n                            \"log_budget\",\n                            \"budget_year_ratio\",\n                            \"runtime\",\n                            \"has_homepage\",\n                            \"popularity\", \n#                             \"popularity_to_mean_year\",\n#                             \"budget_to_mean_year\",\n                            \"release_year\",\n#                             \"budget_to_runtime\",\n#                             \"year_logbudget_ratio\",\n                            \"budget_popularity_ratio\",\n                            \"releaseYear_popularity_ratio\",\n                            ])\n\nnan_values = np.argwhere(np.isnan(X_final))\nfor i in nan_values:\n    X_final[i[0],i[1]]=np.nanmean(X_final[:,i[1]:i[1]+1])\n\ny_pred_1 = model_xgb.predict(X_final)\n\n\nresults = np.array(np.exp(y_pred_1)-1) \nnp.shape(results)","6d763bfb":"submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsubmission[\"revenue\"] = results\nsubmission.head(20)\n","0488de3b":"submission.to_csv(\"10_sub.csv\", index=False)","84a68cae":"from IPython.display import HTML\nimport base64\n\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(submission, title = \"Download CSV file\", filename = \"12_sub.csv\")","40163de5":"## Popularity seems to have no effect on revenue","22057df3":"## Playing with homepage","eeca6e21":"## Vizualing runtime","49698ade":"## Considering if a movie is a sequel","ba134313":"## Better Way","44eb42d4":"## Making the budget and revenue data managable ","eadd6c83":"## Playing with language"}}