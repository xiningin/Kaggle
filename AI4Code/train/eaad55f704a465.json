{"cell_type":{"2d4f2391":"code","bb75219a":"code","115aa86e":"code","7eb48963":"code","90e53c2c":"code","4d239b47":"code","08463732":"code","37fe7fc3":"code","1eb03a22":"code","35d44959":"code","c83354c1":"code","ed30f49f":"code","8e8c0356":"code","7fecf774":"code","e5af035f":"code","4c329669":"code","be0d9d2a":"code","3845a38e":"code","e0c2df4e":"code","c66d6150":"code","c6d5b769":"code","d0552678":"code","b2dd4e92":"code","837aa0dc":"code","5ecc22b4":"code","660e2a63":"code","a56194e1":"code","b77a5ebc":"code","300f8b87":"code","00f0a7f4":"code","a68b9d7c":"code","466f00a3":"code","f453d7ca":"code","def55ad3":"code","4b6cebf6":"code","d93f1902":"code","a7e16033":"code","70f3cf03":"code","61f0f432":"code","c9fcfb4d":"code","75119b73":"code","d210de7f":"code","fcdfd95a":"code","9c38fb34":"code","241055d9":"code","93333810":"code","0efd7f7e":"code","a2f61638":"code","6d707bbc":"code","33d096e7":"code","208ffa73":"code","31c72d2e":"code","6b9e3f1d":"code","809ff32d":"code","b7804cfc":"code","7b48aca4":"code","589ec006":"code","4926c73c":"code","bdda2e89":"code","f9690780":"code","da3ed417":"code","64dcc057":"code","e49eccd3":"code","e81e7feb":"code","2be44824":"code","eaccda9f":"code","e458c573":"code","d7d5da1e":"code","60a05be1":"code","47456a70":"code","8ab0696e":"code","68585219":"code","65384563":"code","4f277035":"code","e3111d95":"code","10b02150":"code","e6830fe0":"markdown","3da3e364":"markdown","644e0323":"markdown","f6dbbd7f":"markdown","7a6150ea":"markdown","192609f1":"markdown","85bc4f30":"markdown","2ef8530a":"markdown","a6e62edb":"markdown","30cdce09":"markdown","cba52688":"markdown","d4a3704c":"markdown","35cf62f3":"markdown","9124b2d8":"markdown","b956dca9":"markdown","662e9917":"markdown","28a589a2":"markdown","adda1578":"markdown","260115d6":"markdown","8f6b2970":"markdown","7df20249":"markdown","b1ddebcc":"markdown","7ebcf77c":"markdown","7583be42":"markdown","00d86a80":"markdown","e39cf816":"markdown","73223698":"markdown","32be6f85":"markdown","90790dd0":"markdown","af926c4e":"markdown","ba86be4a":"markdown","2177f26a":"markdown","69a98211":"markdown","f2c87986":"markdown","4200349a":"markdown","3540197b":"markdown","277d7d8a":"markdown","05d98aa5":"markdown","9f545930":"markdown"},"source":{"2d4f2391":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","bb75219a":"df=pd.read_csv('..\/input\/titanic\/train.csv')","115aa86e":"df.head()","7eb48963":"df.info()","90e53c2c":"#numbers of output\ndf.shape","4d239b47":"df.columns","08463732":"df.corr()['Survived'].sort_values()","37fe7fc3":"plt.figure(figsize=(8,6))\nsns.scatterplot(data=df,x='Fare', y='Survived')\nplt.axvline(x=500,color='r')","1eb03a22":"df[df['Fare']>500]","35d44959":"df.iloc[[258,679,737],6]=df[df['Pclass']==1]['Fare'].mean()\n","c83354c1":"df[df['Fare']>500]","ed30f49f":"plt.figure(figsize=(8,6))\nsns.scatterplot(data=df,x='Fare', y='Survived')\nplt.axvline(x=500,color='r')","8e8c0356":"df.corr()['Survived'].sort_values()\n","7fecf774":"df.isnull().sum().sort_values()","e5af035f":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","4c329669":"nan_percent= missing_percent(df)\nnan_percent","be0d9d2a":"plt.figure(figsize=(8,6),dpi=50)\nsns.barplot(x=nan_percent.index,y=nan_percent)","3845a38e":"100\/len(df)","e0c2df4e":"df[df['Embarked'].isnull()]['Embarked']\n","c66d6150":"df.iloc[[61,829]]\n","c6d5b769":"df=df.dropna(axis=0, subset=['Embarked'])\n","d0552678":"nan_percent= missing_percent(df)\nplt.figure(figsize=(8,6))\nsns.barplot(x=nan_percent.index,y=nan_percent)","b2dd4e92":"sns.displot(df['Age'])\nplt.axvline(x=(df['Age'].mean()),color='r')","837aa0dc":"sns.barplot(data=df,x='Pclass',y='Age',hue='Sex')","5ecc22b4":"df.groupby(['Sex', 'Pclass'])['Age'].mean()\n","660e2a63":"df['Age'] = df.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.mean()))\n","a56194e1":"nan_percent= missing_percent(df)\nnan_percent","b77a5ebc":"df.info()\n","300f8b87":"df['Survived'].unique()","00f0a7f4":"df['Pclass'].unique()","a68b9d7c":"df['Survived']= df['Survived'].apply(str)\ndf['Pclass']= df['Pclass'].apply(str)","466f00a3":"df.info()","f453d7ca":"df.select_dtypes(include='object')","def55ad3":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","4b6cebf6":"df_num.info()","d93f1902":"df_obj.info()","a7e16033":"df_obj= pd.get_dummies(df_obj, drop_first=True)","70f3cf03":"df_obj.shape","61f0f432":"final_df= pd.concat([df_num, df_obj], axis=1)\nfinal_df.head()","c9fcfb4d":"sns.scatterplot(data=df, x='Age', y='Fare', hue='Survived')","75119b73":"sns.countplot(data=df, x='Survived',hue='Sex')","d210de7f":"sns.boxplot(data=df,x='Survived',y='Age',hue='Sex')","fcdfd95a":"df=df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)","9c38fb34":"sns.heatmap(data=df.corr(),annot=True)","241055d9":"sns.pairplot(df)","93333810":"sns.countplot(data=df,x='Survived',hue='Pclass')","0efd7f7e":"sns.countplot(data=df, x='SibSp',hue='Survived')","a2f61638":"sns.countplot(data=df, x='Parch',hue='Survived')\nplt.legend(loc= 9)","6d707bbc":"sns.countplot(data=final_df,x='Survived_1')\n","33d096e7":"X=final_df.drop('Survived_1',axis=1)\ny=final_df['Survived_1']\n","208ffa73":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=102)\n","31c72d2e":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(X_train)\nscaled_X_train= scaler.transform(X_train)\nscaled_X_test= scaler.transform(X_test)","6b9e3f1d":"from sklearn.linear_model import LogisticRegression\nlog_model= LogisticRegression()\nlog_model.fit(scaled_X_train, y_train)","809ff32d":"log_model.coef_\n","b7804cfc":"y_pred= log_model.predict(scaled_X_test)\ny_pred","7b48aca4":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix\naccuracy_score(y_test, y_pred)","589ec006":"confusion_matrix(y_test, y_pred)","4926c73c":"plot_confusion_matrix(log_model, scaled_X_test, y_test)","bdda2e89":"accuracy_score(y_test, y_pred)","f9690780":"print(classification_report(y_test, y_pred))","da3ed417":"from sklearn.metrics import precision_recall_curve, plot_precision_recall_curve, plot_roc_curve","64dcc057":"plot_roc_curve(log_model, scaled_X_test, y_test)\nplt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r')\nplt.show()","e49eccd3":"plot_precision_recall_curve(log_model, scaled_X_test, y_test)","e81e7feb":"from sklearn.neighbors import KNeighborsClassifier\nknn_model= KNeighborsClassifier(n_neighbors=1)\n","2be44824":"knn_model.fit(scaled_X_train, y_train)","eaccda9f":"y_pred= knn_model.predict(scaled_X_test)","e458c573":"accuracy_score(y_test, y_pred)","d7d5da1e":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\naccuracy_score(y_test, y_pred)\n","60a05be1":"y_pred=knn_model.predict(scaled_X_test)\npd.DataFrame({'y_test':y_test,'y_pred':y_pred})","47456a70":"print(classification_report(y_test, y_pred))","8ab0696e":"test_error_rate= []\n\n\nfor k in range (1, 30):\n    knn_model = KNeighborsClassifier(n_neighbors=k)\n    knn_model.fit(scaled_X_train, y_train)\n    \n    y_pred_test = knn_model.predict(scaled_X_test)\n    \n    test_error=1- accuracy_score(y_test, y_pred_test)\n    test_error_rate.append(test_error)","68585219":"plt.figure(figsize=(10 , 6))\nplt.plot(range(1, 30), test_error_rate, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')\nplt.show()","65384563":"from sklearn.neighbors import KNeighborsClassifier\nknn_model= KNeighborsClassifier(n_neighbors=2)","4f277035":"knn_model.fit(scaled_X_train, y_train)","e3111d95":"y_pred= knn_model.predict(scaled_X_test)\n","10b02150":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\naccuracy_score(y_test, y_pred)","e6830fe0":"#### dealing with missing data:","3da3e364":"#### visualizing ROC plot <br>\n#### Plotting ROC for random guessing","644e0323":"#### Split the Dataset to Tain & Test set:\n","f6dbbd7f":"#### Model Coeficient:","7a6150ea":"Embarked has 2 rows of missing data.\n\n","192609f1":"### 6: Logistic Regression\n","85bc4f30":"#### Evaluating the Model","2ef8530a":"#### Determine the Features & Target Variable\n","a6e62edb":"### 4: Preprocessing :\n","30cdce09":"### K-Nearest Neighbors\n","cba52688":"#### dealing with outliers:","d4a3704c":"#### Most of those who died were between the ages of 20 and 50","35cf62f3":"#### visualizing precision-Recall plot","9124b2d8":"#### Make a Function to calculate the percent of missing data in each columns (feature) and then sort it","b956dca9":"####calculating mean of age according to sex and ticket class:\n","662e9917":"#### This Plot  shows that females are more survived than males.","28a589a2":"#### Now, the Dataset is Ready for any Machine Learing Model & Analysis\n\n","adda1578":"#### Train the Model\n","260115d6":"#### Predicting Test Data:","8f6b2970":"#### Converting:","7df20249":"#### dealing with categorical features:","b1ddebcc":"#### Removing unnecessary features\n","7ebcf77c":"### 3: Data overview\n","7583be42":"#### train the model","00d86a80":"so I choose K=10 cause it has a significantly lower Error rate","e39cf816":"#### Predicting Test Data","73223698":"### 1: Import all Necessary Libraries","32be6f85":"According to the previous scatter plot, we  do not have  more than 500 for normal and that's are drop data so I  replace this amount with mean of 1st level's Fare.","90790dd0":"### 5: Exploratory Data Analysis","af926c4e":"#### Scaling the Features\n","ba86be4a":"####  Creating Dummy Variables:","2177f26a":"#### The most dead people are from 3th ticket class which is the cheapest ticket.","69a98211":"#### Evaluating Curves and AUC","f2c87986":"#### Convert to String:\n","4200349a":"### Elbow Method for Choosing Reasonable K Values\n","3540197b":"Train the model with 10 neighbors","277d7d8a":"The accuracy using KNN algorithm with one neighbor is : 0.73\n","05d98aa5":"### 2: Import the Dataset","9f545930":" Data is balanced.\n\n"}}