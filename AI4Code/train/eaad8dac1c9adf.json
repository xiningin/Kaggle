{"cell_type":{"1300d2ba":"code","14677bcd":"code","249bda30":"code","81ca1b90":"code","0635b193":"code","f0c42f3b":"code","1e7b0519":"code","6ba85a90":"code","01f38c41":"code","1ae10791":"code","61c3f0f1":"code","cf149e00":"code","60e0cf58":"code","c2ea7f3c":"code","b28a8408":"markdown","ed4bb68f":"markdown","7b558202":"markdown","f222c4ac":"markdown"},"source":{"1300d2ba":"!pip install git+https:\/\/github.com\/ssut\/py-googletrans.git","14677bcd":"import numpy as np\nimport pandas as pd\nfrom googletrans import Translator\nfrom dask import bag, diagnostics\n","249bda30":"train = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv', index_col=['id'])\ndisplay(train, train.lang_abv.value_counts())","81ca1b90":"def translate(words, dest):\n    dest_choices = ['zh-cn',\n                    'ar',\n                    'fr',\n                    'sw',\n                    'ur',\n                    'vi',\n                    'ru',\n                    'hi',\n                    'el',\n                    'th',\n                    'es',\n                    'de',\n                    'tr',\n                    'bg'\n                    ]\n    if not dest:\n        dest = np.random.choice(dest_choices)\n        \n    translator = Translator()\n    decoded = translator.translate(words, dest=dest).text\n    return decoded\n\n\n#TODO: use a dask dataframe instead of all this\ndef trans_parallel(df, dest):\n    premise_bag = bag.from_sequence(df.premise.tolist()).map(translate, dest)\n    hypo_bag =  bag.from_sequence(df.hypothesis.tolist()).map(translate, dest)\n    with diagnostics.ProgressBar():\n        premises = premise_bag.compute()\n        hypos = hypo_bag.compute()\n    df[['premise', 'hypothesis']] = list(zip(premises, hypos))\n    return df\n\n    \neng = train.loc[train.lang_abv == \"en\"].copy() \\\n           .pipe(trans_parallel, dest=None)\n\nnon_eng =  train.loc[train.lang_abv != \"en\"].copy() \\\n                .pipe(trans_parallel, dest='en')\n\ntrain = train.append([eng, non_eng])\n\ntrain.shape","0635b193":"test = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/test.csv', index_col=['id'])\nsubmission = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/sample_submission.csv',\n                            index_col=['id'])","f0c42f3b":"from sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer","1e7b0519":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","6ba85a90":"model_name = 'jplu\/tf-xlm-roberta-large'\nn_epochs = 8\nmax_len = 80\n\n# Our batch size will depend on number of replicas\nbatch_size = 16 * strategy.num_replicas_in_sync","01f38c41":"# First load the tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\n# Convert the text so that we can feed it to `batch_encode_plus`\ntrain_text = train[['premise', 'hypothesis']].values.tolist()\ntest_text = test[['premise', 'hypothesis']].values.tolist()\n\n# Now, we use the tokenizer we loaded to encode the text\ntrain_encoded = tokenizer.batch_encode_plus(\n    train_text,\n    pad_to_max_length=True,\n    max_length=max_len\n)\n\ntest_encoded = tokenizer.batch_encode_plus(\n    test_text,\n    pad_to_max_length=True,\n    max_length=max_len\n)\n\nx_train, x_valid, y_train, y_valid = train_test_split(\n    train_encoded['input_ids'], train.label.values, \n    test_size=0.2, random_state=2020\n)\n\nx_test = test_encoded['input_ids']","1ae10791":"auto = tf.data.experimental.AUTOTUNE\n\ntrain_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .shuffle(2048)\n    .batch(batch_size)\n    .prefetch(auto)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(batch_size)\n    .cache()\n    .prefetch(auto)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test)\n    .batch(batch_size)\n)","61c3f0f1":"with strategy.scope():\n    # First load the transformer layer\n    transformer_encoder = TFAutoModel.from_pretrained(model_name)\n\n    # This will be the input tokens \n    input_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_ids\")\n\n    # Now, we encode the text using the transformers we just loaded\n    sequence_output = transformer_encoder(input_ids)[0]\n\n    # Only extract the token used for classification, which is <s>\n    cls_token = sequence_output[:, 0, :]\n\n    # Finally, pass it through a 3-way softmax, since there's 3 possible labels\n    out = Dense(3, activation='softmax')(cls_token)\n\n    # It's time to build and compile the model\n    model = Model(inputs=input_ids, outputs=out)\n    model.compile(\n        Adam(lr=1e-5), \n        loss='sparse_categorical_crossentropy', \n        metrics=['accuracy']\n    )","cf149e00":"n_steps = len(x_train) \/\/ batch_size\n\ntrain_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=n_epochs\n)","60e0cf58":"train_history = model.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=1\n)","c2ea7f3c":"test_preds = model.predict(test_dataset, verbose=1)\nsubmission['prediction'] = test_preds.argmax(axis=1)\nsubmission.to_csv(\"submission.csv\")","b28a8408":"Now we build a model, tune it, and predict as with the original. In addition to using the multilingual model, you can translate everything to a single language and use a model for that language. ","ed4bb68f":"Googletrans is fairly fast. Even so, I highly recommend you use multiprocessing of some sort to speed translation.","7b558202":"* Here's the training data with a quick check of language distribution.","f222c4ac":"You can use translations to augment the training data and get extra power from your model. Variations of this method were used in the [Jigsaw Multilingual Toxic Comment Classification](https:\/\/www.kaggle.com\/c\/jigsaw-multilingual-toxic-comment-classification) and other competitions.\n\nI'll demo the method on the [excellent notebook](https:\/\/www.kaggle.com\/xhlulu\/contradictory-watson-concise-keras-xlm-r-on-tpu) which scores 0.774. I'll translate non-English text to English and English text to another language."}}