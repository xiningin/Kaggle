{"cell_type":{"65624508":"code","82a7000f":"code","8020c1a4":"code","a1445285":"code","c53be395":"code","7d7608b7":"code","02eedf4e":"code","3536e42e":"code","54c637ab":"code","c02e56ff":"code","06237df5":"code","f312692e":"code","825202ea":"code","75033241":"code","cebac051":"code","c8cb53af":"code","ee478f08":"code","4d885779":"code","38c786cd":"code","69068c61":"code","d64363c0":"code","d2cb3beb":"markdown"},"source":{"65624508":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.filterwarnings('ignore')","82a7000f":"train_values = pd.read_csv('..\/input\/richters-predictor-modeling-earthquake-damage\/train_values.csv')\ntrain_labels = pd.read_csv('..\/input\/richters-predictor-modeling-earthquake-damage\/train_labels.csv')\ntest_values = pd.read_csv('..\/input\/richters-predictor-modeling-earthquake-damage\/test_values.csv')\nsubmission = pd.read_csv('..\/input\/richters-predictor-modeling-earthquake-damage\/submission_format.csv')\ntrain_values.head()","8020c1a4":"test_values.head()","a1445285":"print('Teaining feature shape: ',train_values.shape,'\\nTraining label shape :',train_labels.shape)","c53be395":"# Let's drop the id columns\ntrain_values = train_values[train_values.columns[4:]]\ntest_values = test_values[test_values.columns[4:]]\ntrain_values.info()","7d7608b7":"#Check for the missing values\n\n# (train_values.isnull().sum()\/train_values.shape[0])*100\ntrain_labels = train_labels[['damage_grade']]\ntrain_labels.info()","02eedf4e":"sns.countplot(train_labels['damage_grade'])\nplt.title('Number of Buildings with Each Damage Grade');","3536e42e":"selected_features = ['foundation_type', \n                     'area_percentage', \n                     'height_percentage',\n                     'count_floors_pre_eq',\n                     'land_surface_condition',\n                     'has_superstructure_cement_mortar_stone']\n\ntrain_values_subset = train_values[selected_features]\n\nsns.pairplot(train_values_subset.join(train_labels), \n             hue='damage_grade')","54c637ab":"plt.figure(figsize=(15,13))\ndata_corr = train_values.corr()\nsns.heatmap(data_corr)\nplt.show();","c02e56ff":"train_values_new = pd.get_dummies(train_values)\ntest_values_new = pd.get_dummies(test_values)\n\nprint('Training dataset :',train_values_new.shape)\nprint()\nprint('Test dataset :',test_values_new.shape)","06237df5":"from xgboost import plot_importance\nfrom xgboost import XGBClassifier\n\nmodel = XGBClassifier()\nmodel.fit(train_values_new,train_labels)","f312692e":"# Print the name and the gini importance of each features\n# for features in zip(train_values_new.columns,model.feature_importances_):\n#     print(features)\n\n# Horizontal bar chart for feature Importance\nfeat_importances = pd.Series(model.feature_importances_,index= train_values_new.columns)\nfeat_importances = feat_importances.nlargest(18)\nplt.figure(figsize=(10,8))\nfeat_importances.plot(kind='barh')\nplt.style.use('fivethirtyeight')\nplt.xlabel('Score')\nplt.title('Feature Importance Score')\nplt.show();","825202ea":"import_features = list(feat_importances.index)\n\ntrain_values_df = train_values_new[import_features]\ntest_values_df = test_values_new[import_features]\n\nprint('Training dataset :',train_values_df.shape)\nprint()\nprint('Test dataset :',test_values_df.shape)","75033241":"model = XGBClassifier()\nmodel.fit(train_values_df,train_labels)","cebac051":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import cross_val_score\n\nXGBoost_y_pred = model.predict(train_values_df)\n\nprint(accuracy_score(train_labels,XGBoost_y_pred))\n\nprint(f1_score(train_labels, XGBoost_y_pred, average='micro'))","c8cb53af":"from sklearn.model_selection import StratifiedKFold\n\ncv_model = XGBClassifier()\n\nkfold = StratifiedKFold(n_splits=5,random_state=12)\nresult = cross_val_score(cv_model,train_values_df,train_labels,cv=kfold)\nresult","ee478f08":"result.mean()*100","4d885779":"y_pred = model.predict(test_values_df)","38c786cd":"submission['damage_grade'] = y_pred","69068c61":"submission.head()","d64363c0":"submission.to_csv('submission.csv')","d2cb3beb":"> ## EDA"}}