{"cell_type":{"05b0b5ae":"code","9ad0bae4":"code","fb4480a3":"code","b7925025":"code","a63c140f":"code","09c196e0":"code","d59b3ae5":"code","12a7ad2b":"code","a2101593":"code","ba469914":"code","7bc97f04":"code","7824aaaa":"code","d9624c29":"code","90176e2b":"code","ca0f1391":"code","1e69c9d1":"code","7e1df281":"code","5ed387ad":"code","6827b59d":"code","04991c3b":"code","5b55afb9":"code","4907f7d9":"code","00609486":"code","96c89022":"code","4de499c0":"code","9b3e44cc":"code","8b16c7f9":"code","bb11ee31":"code","804e7557":"code","d7fab1ce":"code","1bcc82a6":"code","d8d863ab":"code","8e9a768d":"code","e68788ed":"code","020ee828":"code","e9da3eea":"code","dbcd5dd1":"code","c176584a":"code","7a8f9e9a":"code","2fd724ce":"code","ed47f76a":"code","a756e362":"code","a69bd50f":"code","4094037f":"code","da329e6b":"code","c70c96b6":"code","aacba2b6":"code","14aa65fa":"code","70cfd510":"code","dbe60d0d":"code","539d33a1":"code","e38b4df6":"code","4f822f84":"code","46b76afd":"code","25709ce9":"code","48a6a716":"code","163ffaf1":"code","3a2055e0":"code","0494afd7":"code","fb480fa2":"code","987bf962":"markdown","de4fcd5c":"markdown","cc39f5f3":"markdown","bd6c76cf":"markdown","e9153be5":"markdown","89596e5b":"markdown","7ec16eb2":"markdown"},"source":{"05b0b5ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime","9ad0bae4":"from sklearn.metrics import mean_squared_error , mean_absolute_error","fb4480a3":"class color:  # Testing to make the heading look a liitle more impressive\n   BOLD = '\\033[1m'","b7925025":"df = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/train.csv\")\ndf.head()","a63c140f":"split = \"2017-01-01\"","09c196e0":"df['date'] =  pd.to_datetime(df['date'])","d59b3ae5":"def calculate_errorb(test_sales,  test_prediction):\n    MSE_test = mean_squared_error(y_true=test_sales,  y_pred=test_prediction) # Mean Square Error (MAE)\n    MAE_test = mean_absolute_error(y_true=test_sales,  y_pred=test_prediction) # Mean Absolute Error (MAE)\n    MAPE = np.mean(np.abs(test_prediction - test_sales  ) **2)  # Mean Absolute Percentage Error (MAPE)\n    RMSE  = np.mean(np.sqrt((test_prediction - test_sales) ** 2))    \n    return{'MSE_test': MSE_test ,'MAE_test': MAE_test,  'MAPE':MAPE, 'RMSE':RMSE}","12a7ad2b":"split = \"2016-12-31\"","a2101593":"df['ItemStoreCombined'] = df['item'].map(str) + '-' + df['store'].map(str) ","ba469914":"df.head()","7bc97f04":"df['dayofweek'] = df['date'].dt.dayofweek\ndf['quarter'] = df['date'].dt.quarter\ndf['month'] = df['date'].dt.month\ndf['year'] = df['date'].dt.year\ndf['dayofyear'] = df['date'].dt.dayofyear\ndf['dayofmonth'] = df['date'].dt.day\ndf['weekofyear'] = df['date'].dt.weekofyear","7824aaaa":"df = df.set_index('date')\n","d9624c29":"df.head()","90176e2b":"df_train = df[ :split ] ","ca0f1391":"df_test = df[split : ] ","1e69c9d1":"df_train.head()","7e1df281":"df_test_final = df_test.copy()","5ed387ad":"df_test_final =df_test_final.drop (['dayofweek', 'quarter','month', 'year', 'dayofyear', 'weekofyear'],axis=1)","6827b59d":"train_cols=list(df_train.columns)","04991c3b":"print(train_cols)","5b55afb9":"df_train = df_train.loc[:,train_cols] ","4907f7d9":"test_cols=list(df_test.columns)","00609486":"df_test = df_test.loc[:,test_cols] ","96c89022":"df_train['Calculated_year'] =  df_train.index.year - min(df_train.index.year) + 1","4de499c0":"df_train.head()","9b3e44cc":"df_train['Calculated_year'].value_counts()","8b16c7f9":"month_weighting= (( df_train.groupby(['month']).agg([np.nanmean]).sales - np.nanmean(df_train.sales) ) \/ np.nanmean(df_train.sales)).rename(columns={'nanmean':'month_weighting'})\ndf_train=df_train.join(month_weighting,how='left',on='month')","bb11ee31":"df_train.tail()","804e7557":"month_weighting.head(13)","d7fab1ce":"year_weighting= (( df_train.groupby(['year']).agg([np.nanmean]).sales - np.nanmean(df_train.sales) ) \/  np.nanmean(df_train.sales)).rename(columns={'nanmean':'year_weighting'})","1bcc82a6":"print(year_weighting)","d8d863ab":"CAGR = 0.096 #only for using on the train data - can be adjusted","8e9a768d":"year_weighting.loc[6,:] =  np.mean(CAGR)*3\ndf_train=df_train.join(year_weighting,how='left',on='year')","e68788ed":"weekday_weighting= ( ( df_train.groupby(['dayofweek']).agg([np.nanmean]).sales - np.nanmean(df_train.sales) ) \/  np.nanmean(df_train.sales)).rename(columns={'nanmean':'weekday_weighting'})\ndf_train=df_train.join(weekday_weighting,how='left',on='dayofweek')","020ee828":"store_item_weighting= ( ( df_train.groupby(['store','item']).agg([np.nanmean]).sales - np.nanmean(df_train.sales) ) \/ np.nanmean(df_train.sales)).rename(columns={'nanmean':'store_item_weighting'})\ndf_train=df_train.join(store_item_weighting,how='left',on=['store','item'])","e9da3eea":"df_train['product_combined_weighting']=np.product(df_train.loc[:,['month_weighting','year_weighting','weekday_weighting','store_item_weighting',]]+1,axis=1)","dbcd5dd1":"df_train.sample()","c176584a":"df_train.tail()","7a8f9e9a":"df_train.Calculated_year.nunique()","2fd724ce":"df_train.Calculated_year.value_counts()","ed47f76a":"print(weekday_weighting)","a756e362":"print(month_weighting)","a69bd50f":"print(store_item_weighting)","4094037f":"df_train.head()","da329e6b":"df_train['sales_prediction']=np.round(df_train.product_combined_weighting*np.round(np.nanmean(df_train.sales),1))  ","c70c96b6":"average_train_sales = np.nanmean(df_train.sales)\nprint(average_train_sales)","aacba2b6":"df_train.head()","14aa65fa":"df_test=df_test.join(month_weighting,how='left',on='month')","70cfd510":"df_test['Calculated_year'] =  5","dbe60d0d":"year_weighting_17 =0.22  # calculated seperately","539d33a1":"df_test['year_weighting'] = year_weighting_17","e38b4df6":"df_test=df_test.join(weekday_weighting,how='left',on='dayofweek')","4f822f84":"df_test=df_test.join(store_item_weighting,how='left',on=['store','item'])","46b76afd":"df_test.head()","25709ce9":"df_test['smry_product']=np.product(df_test.loc[:,['month_weighting','year_weighting','weekday_weighting','store_item_weighting',]]+1,axis=1)","48a6a716":"df_test['weighted_sales_prediction']=df_test.smry_product*average_train_sales","163ffaf1":"average_train_sales","3a2055e0":"df_test.sum()","0494afd7":"df_test.head()","fb480fa2":"RMSE_weighted  = np.mean(np.sqrt((df_test['weighted_sales_prediction'] - df_test['sales']) ** 2)) \nprint(RMSE_weighted)","987bf962":"# Feature Engineering","de4fcd5c":"# Now Working on Training review","cc39f5f3":"# Function for Error calculations","bd6c76cf":"# Now working through the weightings\n* This is a solution that a lot of standard forecasts would be completed, often in excel\n* This solution is completed to see how it compares\n* In summary it shows how weightings of the month and then aply that weightings across a total forecast\n* Multiple different weightings can be applied\n* With such a high number of rows this would be impractical using Excel","e9153be5":"# now apply the weightings to the test sales","89596e5b":"# Weighted Forecasting for Time Series Store forecast \n* By Alex Dance https:\/\/www.linkedin.com\/in\/alex-dance\/\n* This notebook is one of several notebooks for a project to improve store and product forecasts\n1.\tEDA \u2013 Exploratory Data Analysis \u2013 includes working with annual forecasts\n2.\tMain Modelling\n3.\tXG Boost modelling by Month\n4.\tWeighted average\n5.\tARIMA \u2013 Month and Other Modelling\n6.\tDeep Learning\n\n* This forecast does not use a model but rather weightings and average weightings multiplied by average sales to give a forecast","7ec16eb2":"# Splitting and make Test Train"}}