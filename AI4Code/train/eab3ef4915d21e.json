{"cell_type":{"d90ad4df":"code","c09bc7d2":"code","6a068d9d":"code","fb3f8c79":"code","10325337":"code","b8e501f0":"code","dc5f0c85":"code","855f6b3c":"code","fddbcb55":"code","367c3f19":"code","93f8d454":"code","e5976e03":"code","fe23bf22":"code","66838b3b":"code","e4c4a4e0":"markdown","f27c2e67":"markdown","3ed1722f":"markdown","1cc2b469":"markdown","20b95857":"markdown","a306738d":"markdown","0668dd97":"markdown","5d6da2d3":"markdown","49af73f8":"markdown","612d4480":"markdown","97bdd0e1":"markdown","1431f869":"markdown","5234867a":"markdown","2a7701ab":"markdown"},"source":{"d90ad4df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c09bc7d2":"import seaborn as sns\n\ncolors_default = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']\n\nsns.palplot(colors_default)","6a068d9d":"import seaborn as sns\n\ncolors_aft = ['#2C302E', '#474A48', '#909590', '#9AE19D', '#537A5A']\n\ncolors_blue = [\"#132C33\", \"#264D58\", '#17869E', '#51C4D3', '#B4DBE9']\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_mix = [\"#17869E\", '#264D58', '#179E66', '#D35151', '#E9DAB4', '#E9B4B4', '#D3B651', '#6351D3']\n\nsns.palplot(colors_aft)\n\nsns.palplot(colors_blue)\nsns.palplot(colors_dark)\nsns.palplot(colors_red)\nsns.palplot(colors_mix)\n","fb3f8c79":"sns.palplot(colors_mix)\nsns.palplot(colors_default)","10325337":"import pandas as pd\nimport matplotlib.pyplot as plt \n\ndata = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_1 = data.groupby('Embarked').count()['PassengerId'].reset_index()\ndf_2 = data.groupby(['Sex', 'Embarked']).count()['PassengerId'].unstack().reset_index()\n\nfig, ax = plt.subplots(1, 3, figsize=(16, 6))\nax[0].bar(df_1.Embarked, df_1.PassengerId)\ndf_2.plot(kind='bar', ax=ax[1])\nsns.kdeplot(data=data, x='Fare', shade=True, ax=ax[2])\n\nplt.show()","b8e501f0":"import pandas as pd\nimport matplotlib.pyplot as plt \n\ndata = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_1 = data.groupby('Embarked').count()['PassengerId'].reset_index()\ndf_2 = data.groupby(['Sex', 'Embarked']).count()['PassengerId'].unstack().reset_index()\n\nfig, ax = plt.subplots(1, 3, figsize=(16, 6))\n\nax[0].bar(df_1.Embarked, df_1.PassengerId, color=colors_blue[2], alpha=0.8, edgecolor=colors_dark[1])\ndf_2.plot(kind='bar', ax=ax[1], color=colors_mix[0:3], alpha=0.8, edgecolor=colors_dark[1])\nsns.kdeplot(data=data, x='Fare', shade=True, ax=ax[2], color=colors_blue[2], alpha=0.3)\n\nplt.show()","dc5f0c85":"data = pd.read_csv(\"\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv\")\nSEA = data[data['Regional indicator'] == \"Southeast Asia\"]['Country name'].to_list()\ndef getSea(row) : \n    if row['Country name'] == \"Indonesia\" : \n        return \"Indonesia\"\n    elif row['Country name'] in SEA : \n        return \"SEA\"\n    else : \n        return \"Other\"","855f6b3c":"df = data\ndf['Countries'] = df.apply(lambda x: getSea(x), axis=1)\nmeanx=df['Social support'].mean()\nmeany=df['Healthy life expectancy'].mean()\nsingx=df[df['Country name'] == 'Singapore']['Social support']\nsingy=df[df['Country name'] == 'Singapore']['Healthy life expectancy']\n\nfig, ax = plt.subplots(figsize=(18, 8), dpi=75)\n\nsns.scatterplot(\n    data=df, \n    x='Social support', \n    y='Healthy life expectancy', \n    size='Logged GDP per capita', \n    ax=ax, sizes=(5, 1000),\n    alpha=0.9,\n    hue='Countries',\n    palette=[colors_dark[4], colors_blue[1], colors_red[2]]\n)\nlinex = ax.axvline(meanx, linestyle='dotted', color=colors_dark[1], alpha=0.8, label='Average')\nliney = ax.axhline(meany, linestyle='dotted', color=colors_dark[1], alpha=0.8)\ntext  = ax.text(\n    s=\"Singapore\",\n    x=singx-0.013,\n    y=singy+1.5,\n    color=colors_dark[2]\n)\n\n# Focus only here\n\nax.legend(bbox_to_anchor=(1.05, 1), ncol=1, borderpad=1, frameon=False, fontsize=12)\nax.set_xlabel(\"Social support\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Healthy life expectancy\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\nplt.title(\"Healthy Life Expectancy Vs Social Support\", fontsize=18, color=colors_dark[0])\nplt.show()","fddbcb55":"df = data\ndf['Countries'] = df.apply(lambda x: getSea(x), axis=1)\nmeanx=df['Social support'].mean()\nmeany=df['Healthy life expectancy'].mean()\nsingx=df[df['Country name'] == 'Singapore']['Social support']\nsingy=df[df['Country name'] == 'Singapore']['Healthy life expectancy']\n\nfig, ax = plt.subplots(figsize=(18, 8), dpi=75)\n\nsns.scatterplot(\n    data=df, \n    x='Social support', \n    y='Healthy life expectancy', \n    size='Logged GDP per capita', \n    ax=ax, sizes=(5, 1000),\n    alpha=0.9,\n    hue='Countries',\n    palette=[colors_dark[4], colors_blue[1], colors_red[2]]\n)\nlinex = ax.axvline(meanx, linestyle='dotted', color=colors_dark[1], alpha=0.8, label='Average')\nliney = ax.axhline(meany, linestyle='dotted', color=colors_dark[1], alpha=0.8)\ntext  = ax.text(\n    s=\"Singapore\",\n    x=singx-0.013,\n    y=singy+1.5,\n    color=colors_dark[2]\n)\n\n# Focus only here\n\nax.legend(bbox_to_anchor=(1.05, 1), ncol=1, borderpad=1, frameon=False, fontsize=12)\nax.set_xlabel(\"Social support\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Healthy life expectancy\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\nplt.text(s=\"Social support, Healthy life expectancy\\nand GDP per Capita\", ha='left', x=xmin, y=ymax*1.04, fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.title(\"It seems that Indonesia still falls on the third quadrants with 3 other SEA countries still have room for imrpovement\\nSingapore have the best score among SEA countries\", loc='left', fontsize=13, color=colors_dark[2])  \nplt.show()","367c3f19":"import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf = data.groupby('Species').mean()['SepalLengthCm']\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\nax[0].scatter(data.SepalLengthCm, data.SepalWidthCm)\nax[0].grid()\n\nax[1].bar(df.index, df.values)\nax[1].grid()\n\nplt.show()","93f8d454":"import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf = data.groupby('Species').mean()['SepalLengthCm']\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\nax[0].scatter(data.SepalLengthCm, data.SepalWidthCm)\nax[0].grid(alpha=0.4)\nax[0].set_axisbelow(True)\n\nax[1].bar(df.index, df.values)\nax[1].grid(axis='y', alpha=0.4)\nax[1].set_axisbelow(True)\n\nplt.show()","e5976e03":"import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf = data.groupby('Species').mean()['SepalLengthCm']\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\nax[0].scatter(data.SepalLengthCm, data.SepalWidthCm)\nax[0].grid()\nax[0].spines['right'].set_visible(False)\nax[0].spines['top'].set_visible(False)\n\nax[1].bar(df.index, df.values)\nax[1].grid()\nax[1].spines['right'].set_visible(False)\nax[1].spines['top'].set_visible(False)\nax[1].spines['left'].set_visible(False)\n\n\nplt.show()","fe23bf22":"import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf = data.groupby('Species').mean()['SepalLengthCm']\n\nfig, ax = plt.subplots(figsize=(16, 8))\n\nsns.scatterplot(x=data.SepalLengthCm, y=data.SepalWidthCm, palette=colors_mix[0:3], alpha=1, hue=data.Species)\n\n# Change grid to back and set opacity\nax.grid(alpha=0.2)\nax.set_axisbelow(True)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n\n# Label\nax.set_xlabel(\"Sepal Length Cm\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Sepal Width Cm\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\n# Title\nplt.text(s=\"Stand Out Your Viz | Iris Dataset\", ha='left', x=xmin, y=ymax*1.108, fontsize=24, color=colors_dark[0])\nplt.text(s=\"How to Differentiate Iris Species By Its Size\", ha='left', x=xmin, y=ymax*1.07, fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.title(\"This visualization shows us that the species of Iris plants can be identified by its sepal sizes\\nIris-setosa is more likely has a relatively short sepal length but with a wider sepal width\", loc='left', fontsize=13, color=colors_dark[2]) \n\nplt.show()","66838b3b":"import matplotlib.pyplot as plt \nimport pandas as pd \n\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf = data.groupby('Species').mean()['SepalLengthCm']\n\nfig, ax = plt.subplots(figsize=(16, 8))\n\nbars = ax.bar(df.index, df.values, color=colors_dark[4], edgecolor=colors_dark[3], alpha=0.7)\n\n# You can set individual bars colors, alpha, etc\nbars[2].set_alpha(0.7)\nbars[2].set_color(colors_mix[2])\nbars[2].set_edgecolor(colors_dark[0])\n\nax.grid(axis='y', alpha=0.2)\nax.set_axisbelow(True)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\n# Label\nax.set_xlabel(\"Species\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Average Sepal Length Cm\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\n\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\n# Title\nplt.text(s=\"Stand Out Your Viz | Iris Dataset\", ha='left', x=xmin, y=ymax*1.18, fontsize=24, color=colors_dark[0])\nplt.text(s=\"How to Differentiate Iris Species By Its Size\", ha='left', x=xmin, y=ymax*1.12, fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.title(\"This visualization shows us that the species of Iris plants can be identified by its sepal sizes\\nIn average Iris-virginica has the most tall sepal length\", loc='left', fontsize=13, color=colors_dark[2]) \n\nplt.show()\n\n\nplt.show()","e4c4a4e0":"See, it looks soo pale and dead. So how do we choose a good color?\n\nWell I'm no expert at color but from my experience a good color is a color that doesn't put too much stress on your eyes, a color that is not too contrast. If you want to learn the theory behind color, I suggest you learn about how to choose colors in UI\/UX perspective. Since we are not UI\/UX designer let's use our intuition OR use color palette generator! You can use this website called [colors.co](https:\/\/coolors.co\/generate)\n\nTip: \n* My personal workflow is to split your color palette into groups of colors as shown as below\n* **DO NOT** choose absolute black #00000, slides it a little like for example: #33333","f27c2e67":"So let's see what's wrong in the visualization above. It's confusing for the viewers right?\n\nThe problems are: \n1. The title is confusing\n2. Viewers don't understand the context\n3. Viewers need to think hard in order to understand the visualization\n\nSo to make your viewers more understand about what you are visualizing you can do: \n1. Use the appropriate title\n2. Use a suptitle to explain a little overview about what is that you visualizing, and what is that you want to explain\n\nSo let's add a quick fix by adjusting the title and adding a little suptitle","3ed1722f":"# Final\n\nNow to finalize this guide lets turn the previous example with the knowledge that I've shared before\n\nList to change: \n* Colors\n* Title and Suptitle\n* Grid\n* Spines","1cc2b469":"## Axes\n\nDid you know that you can remove the axis spines on your plot? yesh. There are times that you want to remove the spine, for example the top spine and the right span, by removing those spine it can make your viz more \"open\" (again i dont know how to describe that) but then again it is up to you let's use the previous example","20b95857":"# Don't Just Use Title!\n\nOne of the most important thing in data visualization is about how you tell a story about your visualization right? well then create a story!\n\nShow your audience a short overview about what you present in the visualization that you create. One can use suptitle or Text below the title. In this way we not only create a visualization that is not too \"lonely\" but it also gives the audience a little information on what you are showing \n\nSo what's important is that you don't want your viewers to think too hard about your visualization. By adding a little overview it helps the viewer to understand atleast the context about what you are visualizing\n\nLet's use another example","a306738d":"To fix this you can use three things\n* Move The axis to back by using Axes.set_axisbelow(True)\n* Change its opacity (alpha)\n* Toggle X and Y axes\n\nTip: \n1. When choosing alpha make sure it is barely recognizable\n2. If the bar plot is standing then use y axis, else use x\n\nLets fix that","0668dd97":"# Setting Up Your Viz\n\nThe thing that I love about matplotlib is that it is highly customizable. Almost anything that you see in your plot, you can customize! IF you read do documentation. If you want to make the default look of your matplotlib different you can always search google for it. In this section I wanted to share about how I set up my visualization.\n\n## Grid\n\nDefault grid sucks, the problem with default matplotlib grid is that its alpha is 1, its on two axes, and its always in front. Look at the visualization below.\n\nThe problem with that grid is that it makes the data that is presented in the canvas harder to see, especially in scatter plots. And if you use the default grid on bar plot its even worse","5d6da2d3":"# Thats It\n\nI guess there it is, my guide on how to make you visualization more stand out. There are still a lot that you can do to improve from this, but I hope that this notebook give you the minimal knowledge on how to make a beautiful viz.\n\nThings that you can learn more: \n* Chosing the right plot\n* Emphasize your purpose on your plots by highlighting what you want the viewers to see\n* Story telling\n\nHope this helps! if there are any criticism, feedback, or something that you want to add up please feel free to comments!","49af73f8":"See! By adjusting the right color selection you already improved your viz! and this is just by playing the colors right so lets move on","612d4480":"Okay let's compare the differences you can make when you choose a colors that is more lively!","97bdd0e1":"# Introduction\n\nHi Welcome fellow visualization enthusiast!\n\nReading a visualization is fun, but it can become more fun if you look at a more beautiful visualizations. For me personally, I believe that a good data visualization is not only a visualization that gives a meaningful insight but also pleasant to watch. It's not only about how you present your data to be insightful but also how you present it to your audience in a way that is pleasant to watch. Much like a software, a software that only focuses on it's functionality and ignores the UI\/UX sides will make the website looks, meh.\n\nSo in this notebook I want to try to share you, the viewers, about my experience on how to make your visualization stands out for beginners. So before that a little disclaimer, I'm also still learning about visualization and I appreciate your feedbacks! \n\n# Colors\n\nColors is very important in any visual representation. Whether it is on a software, banner, and in this case data visualization.\n\n## Don't Choose Default Color Palette\n\nMake your own! (or steal from color palette generator hehe)\n\nThe default color choices in almost any data visualization packate for example: Matplotlib, Seaborn, etc. is kinda ... suck. It's color seems dead or pale or ... you named it. See this color palette below.","1431f869":"Heres the difference between default vs my cherry picked color","5234867a":"well you can see that I use text instead of suptitle, a little hacks that I use, since using Text is a lot more flexible in my opinion\n\nSo yeah, it's a little bit better, the challenge for me or you the viewers is try to comes up with a good overview.\n\nTip: \n1. You can use ax.get_xlim() and ax.get_ylim() to get the axes sizes. This way you can position your Text, title, etc more neat\n2. Use different color but not too different between Title and suptitle","2a7701ab":"Now if we use our defined colors. Oh and another tips is that you can adjust the opacity of your visualization by adding argument alpha, my rule of thumb is to set alpha to 0.8 but of course it is up to you. By applying opacity it makes the colors more \"passive\"-ey (I dont know how to describe it) soo it makes the colors a little bit pleaseant to see.\n\nTip: \n* add opacity (alpha)\n* add edgecolor, but **DO NOT** use absolute black"}}