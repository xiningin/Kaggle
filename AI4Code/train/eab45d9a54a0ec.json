{"cell_type":{"d8e07250":"code","6bf9034a":"code","f705ec43":"code","2c2fbecc":"markdown"},"source":{"d8e07250":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bf9034a":"from sklearn.metrics import roc_curve, roc_auc_score\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"\/kaggle\/input\/uts-2020-autumn-data-analytics-assignment-3\/train.csv\", index_col=\"ID\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/uts-2020-autumn-data-analytics-assignment-3\/test-pub.csv\", index_col=\"ID\")\ndf_onehot = pd.get_dummies(df)\n\nkeys = df_onehot.keys()\ndata_keys = [k for k in keys \n    if '?' not in k and k[-3:] != \"50K\"]\ndata_train = df_onehot[data_keys]\ntarget_train = df_onehot[\"Salary_ >50K\"]  \n\ndf_onehot1 = pd.get_dummies(df_test)\n# add all zero to non-existing keys\nfor k in data_keys:\n    if k not in df_onehot1.keys():\n        df_onehot1[k] = 0\n\ndata_test = df_onehot1[data_keys]","f705ec43":"import sklearn.preprocessing as prep\nfrom sklearn.linear_model import LogisticRegression\nsc = prep.MinMaxScaler()\ndata_train_s = sc.fit_transform(data_train)\ndata_test_s = sc.transform(data_test)\n\nlr = LogisticRegression()\nlr.fit(data_train_s, target_train)\n# Predict the probability of postive class\npred_test_prob = lr.predict_proba(data_test_s)[:, 1] # \n\ndf_test[\"Predicted\"] = pred_test_prob\ndf_test[\"Predicted\"].to_csv(\"\/kaggle\/working\/LogisticReg_v0.csv\")","2c2fbecc":"Then you can submit the \"\/kaggle\/working\/LogisticReg_v0.csv\" in the output folder (in the right panel)."}}