{"cell_type":{"bbdfa5be":"code","1e0838b0":"code","c6d3877c":"code","b2b24f89":"code","e80be402":"code","60b2d7eb":"code","3bd281a3":"code","aac652ce":"code","c46603a7":"code","a1ca12bc":"code","207e2a66":"code","48488106":"code","9e4230c7":"code","80e575b2":"code","534d25bd":"code","a59449bb":"code","4a6d82cc":"code","360f9f10":"code","6f306e5a":"code","840fed10":"code","2e70844f":"code","e7693cae":"code","8dbb078e":"code","3c2d9dff":"code","e8df3982":"code","8a408558":"code","f59166aa":"code","388e313e":"code","bb4f46d2":"code","a61aa985":"code","e1af99fd":"code","7fbe053d":"code","46a1e4e4":"code","12387173":"code","a71123cc":"code","2898fa3b":"code","c44e7887":"code","adde8a37":"markdown","5911b581":"markdown","568f3f09":"markdown","0d86166f":"markdown","de8022b8":"markdown","3daf66e3":"markdown"},"source":{"bbdfa5be":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport xgboost\nimport cv2\nimport imblearn","1e0838b0":"df=pd.read_csv('..\/input\/glass\/glass.csv')","c6d3877c":"df","b2b24f89":"df.columns","e80be402":"df.describe()","60b2d7eb":"np.sum(df.isnull())","3bd281a3":"df['Type'].unique()","aac652ce":"X=df.drop('Type', axis=1)\n#X=X.drop('RI', axis=1)\nX","c46603a7":"Y=df['Type']\nY","a1ca12bc":"from imblearn.combine import SMOTETomek","207e2a66":"smt=SMOTETomek(random_state=42)\nx_res, y_res= smt.fit_sample(X,Y)","48488106":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_test, y_train, y_test= train_test_split(x_res,y_res, random_state=42, test_size=0.2, stratify=y_res)\nprint(len(x_train))\nprint(len(x_test))\nprint(len(y_train))\nprint(len(y_test))","9e4230c7":"for x in set(X):\n    print('{}....{}'.format(x,len(X[X==x])))","80e575b2":"for y in set(Y):\n    print('{}....{}'.format(y,len(Y[Y==y])))","534d25bd":"parms={\n    'n_estimators':[100],\n    'max_depth':[7],\n    'learning_rate':[1],\n    'gamma':[0.1,1,0.5,0],\n    'subsample':[0.7],\n    'colsample_bylevel':[0.1,0.3],\n    'colsample_bytree':[0.3,0.5,0.7],\n    'min_child_weight':[0.1,0.3],\n    'reg_lambda':[0,1,0.5]\n}\n\n#'colsample_bylevel': 0.1,\n# 'colsample_bytree': 0.3,\n# 'gamma': 0.1,\n# 'learning_rate': 1,\n# 'max_depth': 7,\n# 'min_child_weight': 0.1,\n# 'n_estimators': 100,\n# 'reg_lambda': 1,\n# 'subsample': 0.7","a59449bb":"from sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import f1_score, make_scorer\n\nxg=xgboost.XGBClassifier()\n#xg.fit(x_train, y_train)\nf1=make_scorer(f1_score, average='macro')\ngrids=GridSearchCV(xg, param_grid=parms, cv=10, n_jobs=-1, scoring=f1)\ngrids.fit(x_train, y_train)","4a6d82cc":"from sklearn.metrics import confusion_matrix\n\ny_train_pred=grids.predict(x_train)\nprint(confusion_matrix(y_train, y_train_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_train, y_train_pred))","360f9f10":"y_test_pred=grids.predict(x_test)\nprint(confusion_matrix(y_test, y_test_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_test_pred))","6f306e5a":"grids.best_score_","840fed10":"grids.best_params_","2e70844f":"from imblearn.over_sampling import RandomOverSampler","e7693cae":"rs=RandomOverSampler()","8dbb078e":"x_res, y_res=rs.fit_sample(X,Y)","3c2d9dff":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_test, y_train, y_test= train_test_split(x_res,y_res, random_state=42, test_size=0.2, stratify=y_res)\nprint(len(x_train))\nprint(len(x_test))\nprint(len(y_train))\nprint(len(y_test))","e8df3982":"for x in set(X):\n    print('{}....{}'.format(x,len(X[X==x])))","8a408558":"for y in set(Y):\n    print('{}....{}'.format(y,len(Y[Y==y])))","f59166aa":"parms={\n    'n_estimators':[100],\n    'max_depth':[7],\n    'learning_rate':[1,0.1,0.5],\n    'gamma':[0.1,1,0.5],\n    'subsample':[0.7],\n    'colsample_bylevel':[0.1],\n    'colsample_bytree':[0.3,0.7,0.5],\n    'min_child_weight':[0.3,0.7,0.5,1],\n    'reg_lambda':[0,1,0.5]\n}\n\n#'colsample_bylevel': 0.1,\n# 'colsample_bytree': 0.3,\n# 'gamma': 0.1,\n# 'learning_rate': 1,\n# 'max_depth': 7,\n# 'min_child_weight': 0.3,\n# 'n_estimators': 100,\n# 'reg_lambda': 0,\n# 'subsample': 0.7}","388e313e":"from sklearn.model_selection import GridSearchCV \nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import f1_score, make_scorer\n\nxg=xgboost.XGBClassifier()\n#xg.fit(x_train, y_train)\nf1=make_scorer(f1_score, average='macro')\ngrids=GridSearchCV(xg, param_grid=parms, cv=10, n_jobs=-1, scoring=f1)\ngrids.fit(x_train, y_train)","bb4f46d2":"from sklearn.metrics import confusion_matrix\n\ny_train_pred=grids.predict(x_train)\nprint(confusion_matrix(y_train, y_train_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_train, y_train_pred))","a61aa985":"y_test_pred=grids.predict(x_test)\nprint(confusion_matrix(y_test, y_test_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_test_pred))","e1af99fd":"grids.best_score_","7fbe053d":"grids.best_params_","46a1e4e4":"xg=xgboost.XGBClassifier(colsample_bylevel= 0.1,\n                          colsample_bytree= 0.3,\n                          gamma= 0.1,\n                          learning_rate= 0.1,\n                          max_depth= 7,\n                          min_child_weight= 0.3,\n                          n_estimators= 100,\n                          reg_lambda= 0,\n                          subsample= 0.7)\nxg.fit(x_train, y_train)\ny_train_pred=xg.predict(x_train)","12387173":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_train, y_train_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_train, y_train_pred))","a71123cc":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred= cross_val_predict(xg, x_train, y_train,cv=5)","2898fa3b":"print(confusion_matrix(y_train, y_train_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_train, y_train_pred))","c44e7887":"y_test_pred=xg.predict(x_test)\nprint(confusion_matrix(y_test, y_test_pred))\nprint()\nprint()\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_test_pred))","adde8a37":"# Identifing No of Classes","5911b581":"# Handling imbalanced data using SMOTETomek","568f3f09":"#Final Model","0d86166f":"# Identifing Missing Values","de8022b8":"# Data Loading","3daf66e3":"# Handling imbalanced data using OVERSAMPLING"}}