{"cell_type":{"584f4b14":"code","1292a766":"code","36653fa5":"code","527b63b8":"code","a24e80d9":"code","6d7df3ed":"code","922d682a":"code","5e7cc079":"code","ba4f2d95":"code","69b5612b":"code","8c07e0b5":"code","7fa91023":"code","4db65878":"code","a6a31d6d":"code","c2ced8c7":"code","475c35c3":"code","07e3e286":"code","2adcc35f":"code","f840dc93":"code","018dfddc":"code","bfc39567":"code","b90f3d97":"code","a7cd0159":"code","cff9cfc1":"code","1547319f":"code","184f7540":"code","8af1134b":"markdown","b3ad45f4":"markdown","3b836a36":"markdown","591eb29a":"markdown","cf889728":"markdown"},"source":{"584f4b14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1292a766":"!pip install opencv-python","36653fa5":"import cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom PIL import Image\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nfrom keras.utils import np_utils\nfrom tqdm import tqdm","527b63b8":"import pandas as pd\nimport numpy as np","a24e80d9":"train_images = os.listdir(\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\/\")\nprint(train_images[:10])","6d7df3ed":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12,12))\nfor i in range(4):\n    plt.subplot(1,4,i+1)\n    img = cv2.imread( \"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\" + \"\/\" + train_images[i])\n    plt.imshow(img)\n    plt.tight_layout()\nplt.show()","922d682a":"def get_label(img):\n    name = img.split('-')[0]\n    if name=='NORMAL2': return 0\n    elif name=='IM': return 0\n    else: return 1","5e7cc079":"data = []\nlabels = []\n\nfor img in tqdm(train_images):\n    try:\n        label = get_label(img)\n        img_read = cv2.imread(\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\" + \"\/\" + img)\n        img_resized = cv2.resize(img_read, (224,224))\n        img_array = img_to_array(img_resized)                      \n        data.append(img_array)\n        labels.append(label)\n    except:\n        None  ","ba4f2d95":"plt.imshow(data[55])\nplt.show()","69b5612b":"image_data = np.array(data)\nimage_labels = np.array(labels)","8c07e0b5":"image_data.shape","7fa91023":"index = np.arange(image_data.shape[0])\nnp.random.shuffle(index)\nimage_data = image_data[index]\nimage_labels = image_labels[index]","4db65878":"from keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split","a6a31d6d":"x_train, x_test, y_train, y_test = train_test_split(image_data, image_labels, test_size=0.2, random_state=101)","c2ced8c7":"x_train.shape,y_train.shape","475c35c3":"x_test.shape, y_test.shape","07e3e286":"#Need To Do this because it's a multiclass problem where you are predicting the probabibility of \n#every possible class, so must provide label data in (N, m) shape, where N is the number of \n#training examples, and m is the number of possible classes \ny_train = np_utils.to_categorical(y_train, num_classes=2)\ny_test = np_utils.to_categorical(y_test, num_classes=2)","2adcc35f":"train_datagen = ImageDataGenerator(rescale=1\/255.,\n                                horizontal_flip = True,\n                                width_shift_range = 0.2,\n                                height_shift_range = 0.2,\n                                fill_mode = 'nearest',\n                                zoom_range = 0.3,\n                                rotation_range = 30\n                             )\nval_datagen = ImageDataGenerator(rescale=1\/255.)","f840dc93":"train_generator = train_datagen.flow(x_train, y_train, batch_size=64, shuffle=False)\nval_generator = val_datagen.flow(x_test, y_test, batch_size=64, shuffle=False)","018dfddc":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Flatten\nfrom keras.layers import Dropout","bfc39567":"#VGG16 model from Scratch\nmodel= Sequential()\n\nmodel.add(Conv2D(input_shape=(224,224,3), filters=64, kernel_size=(3,3), padding=\"Same\", activation=\"relu\"))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=2, activation=\"softmax\"))","b90f3d97":"model.compile(optimizer='adam', loss=\"categorical_crossentropy\", metrics=['accuracy'])","a7cd0159":"model.summary()","cff9cfc1":"history = model.fit(x_train, y_train, batch_size=64, verbose=1, epochs=10, validation_split=0.1, shuffle=False)","1547319f":"#test Data Accuracy\ntest_acc = model.evaluate(x_test, y_test)[1]\ntest_acc","184f7540":"history = model.fit_generator(train_generator, steps_per_epoch = len(x_train)\/64, epochs=10, shuffle=False)","8af1134b":"# **Data Augmentation**","b3ad45f4":"# Making A Model","3b836a36":"# **Visualization**","591eb29a":"# **Using Augmented Data**","cf889728":"# **Creating The Dataset**"}}