{"cell_type":{"526e9461":"code","6b4c71b8":"code","ea149a78":"code","0b3a5dbb":"code","0595e4f2":"code","f7fc7c2c":"code","dbf307bb":"code","c0e46a28":"code","b57c1345":"code","2348086b":"code","6ee36120":"code","7ed68f19":"code","cb76aadc":"code","f0a40823":"code","02e2c4d7":"code","94e82f62":"code","4e568c62":"code","7147b7bc":"code","6686321f":"code","38db170d":"code","c983f492":"code","8d8f982e":"code","57c5eb6d":"code","8eaf8140":"code","5f602014":"code","bc3b7cbd":"code","28d7dad4":"code","7f826f99":"code","fce5c6ca":"code","2193cb83":"code","bf5ea383":"code","f1d09a87":"code","3ebdb78b":"code","b9709000":"code","4f8a99fd":"code","e0c3665a":"code","314aa9b1":"code","2b0b5798":"code","3856ad88":"code","d7a7cd2b":"code","b4de1eda":"code","4cf03e28":"code","96fd3eb3":"code","bd5d948c":"code","979ce60a":"code","acf18ff7":"code","94049420":"code","50596b8a":"code","fbf2675b":"code","f12baa66":"code","1ae13777":"code","ffd011fd":"code","743729e0":"code","1f0cd52b":"code","453b73ea":"code","989c6a52":"code","eef523fa":"code","6ea7c8f9":"code","a27e79a7":"code","a3316f58":"code","0530a3e9":"code","fb633285":"markdown","24bf7726":"markdown","17772e14":"markdown","0b05eb35":"markdown","a7584b47":"markdown","d6908c12":"markdown","90a75d37":"markdown","fdb27aeb":"markdown","e4a77b65":"markdown","de5de0a4":"markdown"},"source":{"526e9461":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","6b4c71b8":"# load data\ndata = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","ea149a78":"# shape of our data\ndata.shape","0b3a5dbb":"data.head(5)","0595e4f2":"data.columns ## to see all the columns present in the data","f7fc7c2c":"data.dtypes","dbf307bb":"data.info()","c0e46a28":"data.describe()","b57c1345":"## to see null value\ndata.isna().sum()","2348086b":"data.isna().any()","6ee36120":"data.Outcome.value_counts()","7ed68f19":"sns.countplot(data.Outcome,data=data)\nplt.show()","cb76aadc":"sns.distplot(data['Age'],kde=True)\nplt.show()","f0a40823":"sns.distplot(data['Insulin'],kde=True)\nplt.show()","02e2c4d7":"correlation = data.corr()\nplt.figure(figsize = (12,10))\nsns.heatmap(correlation,annot = True)","94e82f62":"data.hist(figsize = (12,10),color = 'green')\nplt.show()","4e568c62":"plt.hist(data.Age,bins = [10,20,30,40,50,60,70,80,90])\nplt.show()","7147b7bc":"data.groupby(\"Outcome\").mean()","6686321f":"# box plot between outcome and insulin\nsns.boxplot(x='Outcome',y='Insulin',data=data)\nplt.show()","38db170d":"# scatter plot between glucose and  Blood pressure with regression line\nsns.regplot(x = \"Glucose\",y = \"BloodPressure\",data = data)\nplt.show()","c983f492":"sns.regplot(x='BMI', y= 'Glucose', data=data)\nplt.show()","8d8f982e":"sns.scatterplot(x='Glucose', y= 'Insulin', data=data) # scatter plot\nplt.show()","57c5eb6d":"sns.pairplot(data,hue='Outcome')\nplt.show()","8eaf8140":"X = data.iloc[:,:8]\nY = data.iloc[:,8]\n","5f602014":"from sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report","bc3b7cbd":"scaler = StandardScaler()\nstandardized_data = scaler.fit_transform(X)","28d7dad4":"pd.DataFrame(standardized_data,columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']).head()","7f826f99":"train_x,test_x,train_y,test_y = train_test_split(standardized_data,Y,test_size = 0.3,random_state = 32)","fce5c6ca":"print(\"Shape of train x: \",train_x.shape)\nprint(\"Shape of train y: \",train_y.shape)\n\nprint(\"Shape of test x: \",test_x.shape)\nprint(\"Shape of test y: \",test_y.shape)","2193cb83":"# defining our model\nmodel = SVC()\nmodel.fit(train_x,train_y)","bf5ea383":"# training accuracy\nX_train_predicted = model.predict(train_x)\nprint(\"Accuracy of training data is: \",accuracy_score(train_y,X_train_predicted))","f1d09a87":"# prediction for test data\npredicted = model.predict(test_x)","3ebdb78b":"svm_test_score = accuracy_score(test_y,predicted)\nsvm_test_score","b9709000":"print(classification_report(test_y,predicted))","4f8a99fd":"confusion_matrix(test_y,predicted)","e0c3665a":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","314aa9b1":"lr.fit(train_x,train_y)","2b0b5798":"# training accuracy\nX_train_predicted = lr.predict(train_x)\nprint(\"Accuracy of training data is: \",accuracy_score(train_y,X_train_predicted))","3856ad88":"# prediction for test data\npredicted = lr.predict(test_x)\nlr_test_score = accuracy_score(test_y,predicted)\nlr_test_score","d7a7cd2b":"print(classification_report(test_y,predicted))","b4de1eda":"confusion_matrix(test_y,predicted)","4cf03e28":"from sklearn.ensemble import RandomForestClassifier","96fd3eb3":"rf = RandomForestClassifier(n_estimators = 50,max_leaf_nodes = 66,max_samples = 66)\nrf.fit(train_x,train_y)","bd5d948c":"# training accuracy\nX_train_predicted = rf.predict(train_x)\nprint(\"Accuracy of training data is: \",accuracy_score(train_y,X_train_predicted))","979ce60a":"# prediction for test data\npredicted = rf.predict(test_x)\nrf_test_score = accuracy_score(test_y,predicted)\nrf_test_score","acf18ff7":"print(classification_report(test_y,predicted))","94049420":"confusion_matrix(test_y,predicted)","50596b8a":"from sklearn.tree import DecisionTreeClassifier","fbf2675b":"dt = DecisionTreeClassifier(criterion='entropy',min_samples_split = 6, min_samples_leaf = 25)\ndt.fit(train_x,train_y)","f12baa66":"# training accuracy\nX_train_predicted = dt.predict(train_x)\nprint(\"Accuracy of training data is: \",accuracy_score(train_y,X_train_predicted))","1ae13777":"# prediction for test data\npredicted = dt.predict(test_x)\ndt_test_score = accuracy_score(test_y,predicted)\ndt_test_score","ffd011fd":"print(classification_report(test_y,predicted))","743729e0":"confusion_matrix(test_y,predicted)","1f0cd52b":"from sklearn.neighbors import KNeighborsClassifier\n\nneighbors = [1,2,3,5,7,9,10,12,15,19,21]\ntest_scores = []\ntrain_scores = []\n\nfor i in neighbors:\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(train_x,train_y)\n    \n    train_scores.append(knn.score(train_x,train_y))\n    test_scores.append(knn.score(test_x,test_y))","453b73ea":"ind=np.argmax(test_scores)","989c6a52":"# coressponding train and test scores\nprint(\"Test score: \",test_scores[ind])\nprint(\"Train score: \",train_scores[ind])","eef523fa":"# prediction for test data\npredicted = knn.predict(test_x)\nknn_test_score = accuracy_score(test_y,predicted)\nknn_test_score","6ea7c8f9":"print(classification_report(test_y,predicted))","a27e79a7":"confusion_matrix(test_y,predicted)","a3316f58":"# comparing our all models\nmodels = {\"SVM\":svm_test_score, \"Logistic Regression\":lr_test_score,\"Random Forest\":rf_test_score,\"Decision Tree\": dt_test_score,\n         \"KNN\":knn_test_score}\nmodel = pd.DataFrame({\"Models\":['SVM',\"Logistic Regression\",\"Random Forest\",\"Decision Tree\",\"KNN\"],\n                     \"Score\":[svm_test_score,lr_test_score,rf_test_score,dt_test_score,knn_test_score]},index = np.arange(1,6))\nmodel.head(5)","0530a3e9":"model.sort_values(by='Score',ascending = False)\n## Random Forest is our best model","fb633285":"## Decision Tree","24bf7726":"# Import necessary libraries","17772e14":"## Data analysis and visualization","0b05eb35":"## Logistic regression","a7584b47":"### Comparing models","d6908c12":"## KNN\n","90a75d37":"## Thank you\n","fdb27aeb":"## Random Forest\n","e4a77b65":"# SVM model","de5de0a4":"Scaling the data.\n\n\n\nwhere, \u03bc = mean and \ud835\uded4 = standard deviation\n<img src = \"https:\/\/cdn-images-1.medium.com\/max\/800\/0*PXGPVYIxyI_IEHP7.\">"}}