{"cell_type":{"2f770aa4":"code","60326cf2":"code","31a604f7":"code","22be9867":"code","13580807":"code","2445aa76":"code","da97980d":"code","b311975b":"code","4fb9fa67":"code","edead9a5":"code","610ea610":"code","a982b677":"code","f7df2122":"code","9e1e42a4":"code","ad44cc8f":"code","a12ac722":"code","814f869e":"code","6cf2fd9a":"code","fdc94bff":"code","015068c1":"code","e5d966b8":"code","c4f806fd":"code","5645c1ed":"code","a5506e7d":"code","dc4d3e59":"code","0d795136":"code","bade654a":"code","4761d4d1":"code","5f8e1717":"code","d904eab6":"code","3ff9d241":"code","302f4f34":"code","9c1cc4be":"code","bd088a59":"code","7ec25c61":"code","e121374a":"markdown","9c54aea6":"markdown","868c75e3":"markdown","91e4f89b":"markdown","0b98de3f":"markdown","c82260ea":"markdown","97e8e850":"markdown","61de3e12":"markdown"},"source":{"2f770aa4":"import numpy as np \nimport pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))","60326cf2":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","31a604f7":"test['SalePrice'] = np.nan","22be9867":"train['train_test'] = 1\ntest['train_test'] = 0","13580807":"test.shape","2445aa76":"train.shape","da97980d":"all_data = pd.concat([train, test])","b311975b":"all_data['FireplaceQu'].head(1420)","4fb9fa67":"pd.set_option('display.max_rows',84)\nall_data.isna().sum()","edead9a5":"print(\"\\ncolumn in training data set\\n\\n\",all_data.columns.values)","610ea610":"#find numeric features \nnum_features = all_data.select_dtypes(include=[np.number])\n#check data types of these \nnum_features.dtypes","a982b677":"\nimport matplotlib.pyplot as plt \nplt.style.use(style='ggplot')\nplt.rcParams['figure.figsize']=(10,6)\n#check skewness of sale price \nprint(\"Skewness : \", train.SalePrice.skew())\nplt.hist(train.SalePrice, color='blue')\nplt.show()\n#distribution is a bit skewed to the left ","f7df2122":"#change sale price to natural log \nprint(\"Skewness after log: \", np.log(all_data.SalePrice).skew())\nplt.hist(np.log(all_data.SalePrice), color='blue')\nplt.show()\ntarget= np.log(all_data.SalePrice)\n#natural log transformation of target var changes it to normal distribution ","9e1e42a4":"#check correlation of numeric variables \ncorr = num_features.corr()\n#top 5 highly correlated vars \nprint(corr['SalePrice'].sort_values(ascending=False)[:5],'\\n')\n#bottom 5 highly correlated vars \nprint(corr['SalePrice'].sort_values(ascending=False)[-5:],'\\n')","ad44cc8f":"#check unique values of feature OverallQual\nall_data.OverallQual.unique()","a12ac722":"#check first overall quality variable with SalePirce\nqual_pivot = all_data.pivot_table(index='OverallQual', \n                               values='SalePrice', \n                               aggfunc=np.mean)\ndisplay(qual_pivot)","814f869e":"#create pivot for overall quality \nqual_pivot.plot(kind='bar', color='green')\nplt.xlabel('Overall Quality')\nplt.ylabel('Mean Sale Price')\nplt.xticks(rotation=0)\nplt.show()","6cf2fd9a":"#create pivot for Gr Living area \nplt.scatter(x=all_data['GrLivArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Above grade(ground) living area square feet')\nplt.show()","fdc94bff":"plt.scatter(x=all_data['GarageArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Garage Area')\nplt.show()","015068c1":"nuls = pd.DataFrame(all_data.isnull().sum().sort_values(ascending =False)[:25])\nnuls.columns = ['Null Count']\nnuls.index.name = 'Feature'\nnuls","e5d966b8":"catgr  = all_data.select_dtypes(exclude=[np.number])\ncatgr.describe()","c4f806fd":"#update missing values \nall_data = all_data.fillna(all_data.mean())","5645c1ed":"all_data['enc_street'] = pd.get_dummies(all_data.Street, drop_first=True)","a5506e7d":"condition_pivot = all_data.pivot_table(index='SaleCondition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='skyblue')\nplt.xlabel('Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()\n#encoding steps\ndef encode_condition(x) : \n    return 1 if x =='Partial' else 0\nall_data['enc_condition'] = all_data.SaleCondition.apply(encode_condition)","dc4d3e59":"print(\"Encoded:\")\nprint(all_data.enc_street.value_counts())","0d795136":"# One more variable, Garage car capacity\nall_data.GarageCars.value_counts().plot(kind='bar', color='green')\nplt.xlabel('Garage Car Capacity')\nplt.ylabel('Counts')\nplt.xticks(rotation=0)\nplt.show()","bade654a":"feature_columns = ['train_test', '1stFlrSF', '2ndFlrSF', '3SsnPorch', 'Alley', 'BedroomAbvGr', 'BldgType', 'BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFinType1', 'BsmtFinType2', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtQual', 'BsmtUnfSF', 'CentralAir', 'Condition1', 'Condition2', 'Electrical', 'EnclosedPorch', 'ExterCond', 'ExterQual', 'Exterior1st', 'Exterior2nd', 'Fence', 'FireplaceQu', 'Fireplaces', 'Foundation', 'FullBath', 'Functional', 'GarageArea', 'GarageCars', 'GarageCond', 'GarageFinish', 'GarageQual', 'GarageType', 'GarageYrBlt', 'GrLivArea', 'HalfBath', 'Heating', 'HeatingQC', 'HouseStyle', 'KitchenAbvGr', 'KitchenQual', 'LandContour', 'LandSlope', 'LotArea', 'LotConfig', 'LotFrontage', 'LotShape', 'LowQualFinSF', 'MSSubClass', 'MSZoning', 'MasVnrArea', 'MasVnrType', 'MiscFeature', 'MiscVal', 'MoSold', 'Neighborhood', 'OpenPorchSF', 'OverallCond', 'OverallQual', 'PavedDrive', 'PoolArea', 'PoolQC', 'RoofMatl', 'RoofStyle', 'SaleType', 'ScreenPorch', 'TotRmsAbvGrd', 'TotalBsmtSF', 'Utilities', 'WoodDeckSF', 'YearBuilt', 'YearRemodAdd', 'YrSold', 'enc_condition', 'enc_street']\nall_features = pd.get_dummies(all_data[feature_columns])\nall_features","4761d4d1":"condition_pivot = all_data.pivot_table(index='enc_condition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='gray')\nplt.xlabel('Encoded Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","5f8e1717":"X_train = all_features[all_features['train_test']==1].drop(['train_test'], axis=1)\ny_train = all_data[all_data.train_test==1].SalePrice\nX_train","d904eab6":"X_test = all_features[all_features['train_test']==0].drop(['train_test'], axis=1)\nX_test","3ff9d241":"import xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\n\ngbm = xgb.XGBRegressor()\nreg_cv = GridSearchCV(gbm, {\"colsample_bytree\":[0.8, 1.0],\"min_child_weight\":[0.8, 1.0, 1.2]\n                            ,'max_depth': [3,4, 5], 'n_estimators': [500, 600, 750]}, verbose=1)\nreg_cv.fit(X_train,y_train)\nreg_cv.best_params_\n","302f4f34":"gbm = xgb.XGBRegressor(**reg_cv.best_params_)\ngbm.fit(X_train,y_train)","9c1cc4be":"preds = gbm.predict(X_test)\npreds","bd088a59":"submit= pd.DataFrame()\nsubmit['Id'] = test.Id\nsubmit['SalePrice'] = preds\nsubmit","7ec25c61":"submit.to_csv('SalePrice.csv', index=False)","e121374a":"One of my first kernal for House price competition and I have drawn inspiration from *Adam Massachi* from[ dataquest blog](https:\/\/www.dataquest.io\/blog\/kaggle-getting-started\/ ) \n<br>**Next steps:** \n****Feature engineering ****\n    1. Experiment more features \n    2. Experiment with missing value treatment\n****Add more regression techniques ****\n    1. Follow other kernels \nUpdate Log: <br>\n<br>14Feb: Condition1,Condition2 seemed important but R2 is reduced to .85 from .88 after encoding these two. Updated  garage area filter from 1200 to 1150 and R-sq has improved to .89. Score has improved to .138 to .137\n<br>15 Feb: Changing all cat, non cat vars using get_dummies and  treat missing values with mean for all. score improved .8991\n<br>16 Feb: Updating Lable for Garage car capacity graph\n<br>20 Feb: Updating outliers for GrLivArea < 4000  or replacing it with mean of 1510.722834 results in dropping the score to .8920. Not doing it \n<br>27 Feb: Plan to add one linear regresssion technique from private kernel and compare the result\n<br>24 Mar: clean up plan, add new techniques\n<br>27 Mar: Adding XGB example from sample Dan Baker tutorial \n<br>28 Mar: Re arranging few sections to restructure this Kernel. \n<br>08 Apr: Tweak certain pieces \n<br>21 Apr: Fixed target var error and added example for hyper paramter tuning  from [Kenji]( https:\/\/www.kaggle.com\/kenji19840210\/basic-prediction-with-xgboost-xgbregressor)  ","9c54aea6":"## Predict","868c75e3":"## Custom encoding of column SaleCondition by value 'Partial'","91e4f89b":"## Imputation with mean","0b98de3f":"## One hot for Street","c82260ea":"# Find best hyper parameters","97e8e850":"## print(\"extra columns found in training dataset\", set(train.columns.values)-set(test.columns.values))","61de3e12":"# Train"}}