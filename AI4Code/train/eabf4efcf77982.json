{"cell_type":{"40384046":"code","e661e646":"code","a6d10cb5":"code","68e67ad1":"code","8b4a24ac":"code","709a09b8":"code","9d5a22fb":"code","9b8f8b41":"code","c1132af0":"code","6c54bb55":"code","40898097":"code","6c19655e":"code","a7bd858b":"code","3a33bde7":"code","122b28a7":"code","ad34a309":"code","bbf11760":"code","0e608bbb":"code","b83df6e2":"code","3579b8f4":"code","385932c3":"code","5e8894b1":"code","3abeb8a1":"code","7ee2df59":"code","e714d8b6":"code","2e337d09":"code","4a7531bc":"code","56a3e602":"code","70ee168f":"code","bc86d025":"code","cb95d502":"code","5cf7add4":"code","0033cd69":"code","1c6fdb5d":"code","abd72970":"code","50abe92f":"code","dc3bb885":"code","97ec7309":"code","2981d02f":"code","0775f184":"code","3277677e":"code","4816ca77":"code","79460bcc":"code","8766f518":"code","ee3c7855":"code","db211c33":"code","2288391b":"code","436bdff4":"code","c701bba5":"code","d62d7d68":"code","71afc738":"code","ee40fa7c":"code","0c56b6fc":"code","9d990ca2":"code","06d46ab7":"code","da9aee97":"code","ae48cd25":"code","5479d92b":"code","858d454d":"code","3b939f9e":"code","2b609fca":"code","b34de3a5":"code","bf0f770b":"code","3986be61":"code","e5c79f65":"code","09960cb6":"code","a8976b13":"code","e5c21836":"code","7fe015da":"code","10082de0":"code","b8be47d0":"code","1a4427b2":"code","d1350933":"code","2f3153d0":"code","e0970106":"code","29b79129":"code","76e69970":"code","046a529d":"code","87152b17":"code","c8505712":"code","d6be768b":"code","2415fe80":"code","3474397d":"code","54b0bfb1":"code","c2ebe046":"markdown","0625ab8a":"markdown","c2cc3a17":"markdown","2fcd89cd":"markdown","a8ec9fe0":"markdown","51dd756a":"markdown","6d70faf0":"markdown","0b4c9d49":"markdown","e1021de9":"markdown","12b77a6b":"markdown","88f5c6b9":"markdown","aba9cd15":"markdown","326266ec":"markdown","614c01fc":"markdown","ff916a7a":"markdown","569b3da2":"markdown","d9834bac":"markdown","406d693a":"markdown","f2573bfa":"markdown","23f1f7f2":"markdown","ae040491":"markdown","4fdeabfd":"markdown","485f07af":"markdown","def55430":"markdown","c6d6924c":"markdown","d2bf36b3":"markdown","7bc5ca28":"markdown","c22ced8d":"markdown","3b5fd8eb":"markdown","e7018830":"markdown","20edcf62":"markdown","32617fcd":"markdown","69c66e31":"markdown","0cffa47b":"markdown","069abb88":"markdown","857dc55b":"markdown"},"source":{"40384046":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan","e661e646":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a6d10cb5":"df = pd.read_csv(r\"\/kaggle\/input\/cricket\/Cricket.csv\",encoding='latin1')\ndf.head()","68e67ad1":"df.shape","8b4a24ac":"df_dub = df.copy()\n# Checking for duplicates and dropping the entire duplicate row if any\ndf_dub.drop_duplicates(subset=None, inplace=True)","709a09b8":"df_dub.shape","9d5a22fb":"df.shape","9b8f8b41":"df.info()","c1132af0":"df.describe()","6c54bb55":"(df.isnull().sum() * 100 \/ len(df)).value_counts(ascending=False)","40898097":"df.isnull().sum().value_counts(ascending=False)","6c19655e":"(df.isnull().sum(axis=1) * 100 \/ len(df)).value_counts(ascending=False)","a7bd858b":"df.isnull().sum(axis=1).value_counts(ascending=False)","3a33bde7":"df.head()","122b28a7":"df[['Strt','End']] = df.Span.str.split(\"-\",expand=True) ","ad34a309":"df[['Strt','End']]=df[['Strt','End']].astype(int)\ndf['Exp']=df['End']-df['Strt']\ndf=df.drop(['Strt','End','Span'], axis = 1) \ndf.head()","bbf11760":"#Match Played\nplt.figure(figsize = (30,5))\nmat = df[['Player','Mat']].sort_values('Mat', ascending = False)\nax = sns.barplot(x='Player', y='Mat', data= mat)\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","0e608bbb":"plt.figure(figsize = (10,5))\nmat_top10 = df[['Player','Mat']].sort_values('Mat', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Mat', data= mat_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","b83df6e2":"#Inns\nplt.figure(figsize = (30,5))\ninns = df[['Player','Inns']].sort_values('Inns', ascending = False)\nax = sns.barplot(x='Player', y='Inns', data= inns)\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","3579b8f4":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','Inns']].sort_values('Inns', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Inns', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","385932c3":"#NO\nplt.figure(figsize = (30,5))\nno = df[['Player','NO']].sort_values('NO', ascending = False)\nax = sns.barplot(x='Player', y='NO', data= no)\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","5e8894b1":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','NO']].sort_values('NO', ascending = False).head(10)\nax = sns.barplot(x='Player', y='NO', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","3abeb8a1":"#Runs\nplt.figure(figsize = (30,5))\nrun = df[['Player','Runs']].sort_values('Runs', ascending = False)\nax = sns.barplot(x='Player', y='Runs', data= run)\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","7ee2df59":"plt.figure(figsize = (10,5))\nruns_top10 = df[['Player','Runs']].sort_values('Runs', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Runs', data= runs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","e714d8b6":"#HS\ndf.HS=df.HS.str.extract('(\\d+)')\ndf.HS=df.HS.astype(int)\nplt.figure(figsize = (30,5))\nhs = df[['Player','HS']].sort_values('HS', ascending = False)\nax = sns.barplot(x='Player', y='HS', data= hs)\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","2e337d09":"plt.figure(figsize = (10,5))\nhs_top10 = df[['Player','HS']].sort_values('HS', ascending = False).head(10)\nax = sns.barplot(x='Player', y='HS', data= hs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","4a7531bc":"#Ave\nplt.figure(figsize = (30,5))\nave = df[['Player','Ave']].sort_values('Ave', ascending = False)\nax = sns.barplot(x='Player', y='Ave', data= ave)\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","56a3e602":"plt.figure(figsize = (10,5))\navg_top10 = df[['Player','Ave']].sort_values('Ave', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Ave', data= avg_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","70ee168f":"#BF\nplt.figure(figsize = (30,5))\nbf = df[['Player','BF']].sort_values('BF', ascending = False)\nax = sns.barplot(x='Player', y='BF', data= bf)\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","bc86d025":"plt.figure(figsize = (10,5))\nbf_top10 = df[['Player','BF']].sort_values('BF', ascending = False).head(10)\nax = sns.barplot(x='Player', y='BF', data= bf_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","cb95d502":"#SR \nplt.figure(figsize = (30,5))\nsr = df[['Player','SR']].sort_values('SR', ascending = False)\nax = sns.barplot(x='Player', y='SR', data= sr)\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","5cf7add4":"plt.figure(figsize = (10,5))\nsr_top10 = df[['Player','SR']].sort_values('SR', ascending = False).head(10)\nax = sns.barplot(x='Player', y='SR', data= sr_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","0033cd69":"#100\nplt.figure(figsize = (30,5))\nr100 = df[['Player','100']].sort_values('100', ascending = False)\nax = sns.barplot(x='Player', y='100', data= r100)\nax.set(xlabel = '', ylabel= \"100's Scored\" )\nplt.xticks(rotation=90)\nplt.show()","1c6fdb5d":"plt.figure(figsize = (10,5))\nr100_top10 = df[['Player','100']].sort_values('100', ascending = False).head(10)\nax = sns.barplot(x='Player', y='100', data= r100_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"100's Scored\")\nplt.xticks(rotation=90)\nplt.show()","abd72970":"#50\nplt.figure(figsize = (30,5))\nr50 = df[['Player','50']].sort_values('50', ascending = False)\nax = sns.barplot(x='Player', y='50', data= r50)\nax.set(xlabel = '', ylabel= \"50s Scored\")\nplt.xticks(rotation=90)\nplt.show()","50abe92f":"plt.figure(figsize = (10,5))\nr50_top10 = df[['Player','50']].sort_values('50', ascending = False).head(10)\nax = sns.barplot(x='Player', y='50', data= r50_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"50's Scored\")\nplt.xticks(rotation=90)\nplt.show()","dc3bb885":"#0\nplt.figure(figsize = (30,5))\nr0 = df[['Player','0']].sort_values('0', ascending = False)\nax = sns.barplot(x='Player', y='0', data= r0)\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","97ec7309":"plt.figure(figsize = (10,5))\nr0_top10 = df[['Player','0']].sort_values('0', ascending = False).head(10)\nax = sns.barplot(x='Player', y='0', data= r0_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","2981d02f":"#Exp\nplt.figure(figsize = (30,5))\nexp = df[['Player','Exp']].sort_values('Exp', ascending = False)\nax = sns.barplot(x='Player', y='Exp', data= exp)\nax.set(xlabel = '', ylabel= 'Experience')\nplt.xticks(rotation=90)\nplt.show()","0775f184":"plt.figure(figsize = (10,5))\nexp_top10 = df[['Player','Exp']].sort_values('Exp', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Exp', data= exp_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exprience')\nplt.xticks(rotation=90)\nplt.show()","3277677e":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.savefig('Correlation')\nplt.show()","4816ca77":"sns.pairplot(df,corner=True,diag_kind=\"kde\")\nplt.show()","79460bcc":"df.describe()","8766f518":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","ee3c7855":"plt.figure(figsize = (30,10))\nfeatures=[ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100','50', '0', 'Exp']\nfor i in enumerate(features):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(df[i[1]])","db211c33":"Q3 = df.Mat.quantile(0.99)\nQ1 = df.Mat.quantile(0.01)\ndf['Mat'][df['Mat']<=Q1]=Q1\ndf['Mat'][df['Mat']>=Q3]=Q3","2288391b":"Q3 = df.Inns.quantile(0.99)\nQ1 = df.Inns.quantile(0.01)\ndf['Inns'][df['Inns']<=Q1]=Q1\ndf['Inns'][df['Inns']>=Q3]=Q3","436bdff4":"Q3 = df.NO.quantile(0.99)\nQ1 = df.NO.quantile(0.01)\ndf['NO'][df['NO']<=Q1]=Q1\ndf['NO'][df['NO']>=Q3]=Q3","c701bba5":"Q3 = df.Runs.quantile(0.99)\nQ1 = df.Runs.quantile(0.01)\ndf['Runs'][df['Runs']<=Q1]=Q1\ndf['Runs'][df['Runs']>=Q3]=Q3","d62d7d68":"Q3 = df.HS.quantile(0.99)\nQ1 = df.HS.quantile(0.01)\ndf['HS'][df['HS']<=Q1]=Q1\ndf['HS'][df['HS']>=Q3]=Q3","71afc738":"Q3 = df.Ave.quantile(0.99)\nQ1 = df.Ave.quantile(0.01)\ndf['Ave'][df['Ave']<=Q1]=Q1\ndf['Ave'][df['Ave']>=Q3]=Q3","ee40fa7c":"Q3 = df.BF.quantile(0.99)\nQ1 = df.BF.quantile(0.01)\ndf['BF'][df['BF']<=Q1]=Q1\ndf['BF'][df['BF']>=Q3]=Q3","0c56b6fc":"Q3 = df.SR.quantile(0.99)\nQ1 = df.SR.quantile(0.01)\ndf['SR'][df['SR']<=Q1]=Q1\ndf['SR'][df['SR']>=Q3]=Q3","9d990ca2":"Q3 = df.Exp.quantile(0.99)\nQ1 = df.Exp.quantile(0.01)\ndf['Exp'][df['Exp']<=Q1]=Q1\ndf['Exp'][df['Exp']>=Q3]=Q3","06d46ab7":"Q3 = df['100'].quantile(0.99)\nQ1 = df['100'].quantile(0.01)\ndf['100'][df['100']<=Q1]=Q1\ndf['100'][df['100']>=Q3]=Q3","da9aee97":"Q3 = df['50'].quantile(0.99)\nQ1 = df['50'].quantile(0.01)\ndf['50'][df['50']<=Q1]=Q1\ndf['50'][df['50']>=Q3]=Q3","ae48cd25":"Q3 = df['0'].quantile(0.99)\nQ1 = df['0'].quantile(0.01)\ndf['0'][df['0']<=Q1]=Q1\ndf['0'][df['0']>=Q3]=Q3","5479d92b":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","858d454d":"# Dropping Player field as final dataframe will only contain data columns\n\ndf_drop = df.copy()\nplayer = df_drop.pop('Player')","3b939f9e":"df_drop.head()","2b609fca":"# Calculating Hopkins score to know whether the data is good for clustering or not.\n\ndef hopkins(X):\n    d = X.shape[1]\n    n = len(X)\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    HS = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(HS):\n        print(ujd, wjd)\n        HS = 0\n \n    return HS","b34de3a5":"# Hopkins score\nHopkins_score=round(hopkins(df_drop),2)","bf0f770b":"print(\"{} is a good Hopkins score for Clustering.\".format(Hopkins_score))","3986be61":"\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df_drop)\ndf_scaled ","e5c79f65":"df_df1 = pd.DataFrame(df_scaled, columns = [ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100',\n                                            '50', '0', 'Exp'])\ndf_df1.head()","09960cb6":"df_df1.head()\n","a8976b13":"# Single linkage\nplt.figure(figsize = (20,10))\nmergings = linkage(df_df1, method='single',metric='euclidean')\ndendrogram(mergings)\nplt.show()","e5c21836":"# Complete Linkage\nplt.figure(figsize = (20,10))\nmergings = linkage(df_df1, method='complete',metric='euclidean')\ndendrogram(mergings)\nplt.show()","7fe015da":"df_hc = df.copy()\n\ndf_hc.head()","10082de0":"# 4 clusters\ncluster_labels = cut_tree(mergings, n_clusters=4).reshape(-1, )\ncluster_labels","b8be47d0":"# assign cluster labels\ndf_hc['Cluster_labels'] = cluster_labels\ndf_hc.head()","1a4427b2":"## Number of countries in each cluster\ndf_hc.Cluster_labels.value_counts(ascending=True)","d1350933":"# Scatter plot on Original attributes to visualize the spread of the data\n\nplt.figure(figsize = (20,15))\nplt.subplot(3,1,1)\nsns.scatterplot(x = 'Ave', y = 'NO',hue='Cluster_labels',data = df_hc,legend='full',palette=\"Set1\")\nplt.subplot(3,1,2)\nsns.scatterplot(x = 'Ave', y = 'SR',hue='Cluster_labels', data = df_hc,legend='full',palette=\"Set1\")\nplt.subplot(3,1,3)\nsns.scatterplot(x = 'NO', y = 'SR',hue='Cluster_labels', data=df_hc,legend='full',palette=\"Set1\")\nplt.show()\n","2f3153d0":" #Violin plot on Original attributes to visualize the spread of the data\n\nfig, axes = plt.subplots(2,2, figsize=(15,12))\n\nsns.violinplot(x = 'Cluster_labels', y = 'Ave', data = df_hc,ax=axes[0][0])\nsns.violinplot(x = 'Cluster_labels', y = 'SR', data = df_hc,ax=axes[0][1])\nsns.violinplot(x = 'Cluster_labels', y = 'NO', data=df_hc,ax=axes[1][0])\nsns.violinplot(x = 'Cluster_labels', y = 'Exp', data=df_hc,ax=axes[1][1])\nplt.show()","e0970106":"df_hc[['NO','Ave','SR','Cluster_labels']].groupby('Cluster_labels').mean()","29b79129":"ax=df_hc[['NO','Ave','SR','Cluster_labels']].groupby('Cluster_labels').mean().plot(kind = 'bar',figsize = (15,5))\n\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=0)\nplt.show();","76e69970":"df_hc[df_hc['Cluster_labels']==0].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Can be Batsman Coach","046a529d":"df_hc[df_hc['Cluster_labels']==1].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#MiddleOrders ","87152b17":"df_hc[df_hc['Cluster_labels']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters","c8505712":"df_hc[df_hc['Cluster_labels']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters 2 ","d6be768b":"FinalListbyHC=df_hc[df_hc['Cluster_labels']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyHC['Player']\nFinalListbyHC.reset_index(drop=True).Player[:]","2415fe80":"df_list_hc = pd.DataFrame(FinalListbyHC.groupby(['Player'])['NO'].mean().sort_values(ascending = True)).head()\nax=df_list_no.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Not Out')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Not Out\", fontsize = 12, fontweight = 'bold')\nplt.show()","3474397d":"df_list_ave = pd.DataFrame(FinalListbyHC.groupby(['Player'])['Ave'].mean().sort_values(ascending = False)).head()\nax=df_list_ave.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Averages')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Averages\", fontsize = 12, fontweight = 'bold')\nplt.show()","54b0bfb1":"df_list_sr = pd.DataFrame(FinalListbyHC.groupby(['Player'])['SR'].mean().sort_values(ascending = False)).head()\nax=df_list_sr.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Strike Rates')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Strike Rates\", fontsize = 12, fontweight = 'bold')\nplt.show()","c2ebe046":"Plot histogram for each continous variables","0625ab8a":"Derived Metrices","c2cc3a17":"There are no missing \/ Null values either in columns or rows","2fcd89cd":"Null Percentage: Rows","a8ec9fe0":"All are batsman","51dd756a":"All are Batsmans","6d70faf0":"Hierarchical clustering involves creating clusters that have a predetermined ordering from top to bottom. For example, all files and folders on the hard disk are organized in a hierarchy. There are two types of hierarchical clustering,\n\n- Divisive\n- Agglomerative.","0b4c9d49":"- Mat and Inns are highly correlated with correlation of 0.99\n- Mat and Runs are highly correlated with correlation of 0.86\n- Runs and Inns are highly correlated with correlation of 0.90","e1021de9":"Null Count: Rows","12b77a6b":"It seems there are good number of countries in each clusters.","88f5c6b9":"All are Batsmans","aba9cd15":"Single Linkage:","326266ec":"# Data Cleaning","614c01fc":"All are batsmans","ff916a7a":"# Exploratory Data Analytics","569b3da2":"Percentile Capping (Winsorization) for outliers handling","d9834bac":"# Rescaling the Features","406d693a":"# Cluster Profiling","f2573bfa":"### Duplicate Check","23f1f7f2":"## Univariate Analysis","ae040491":"# Hopkins Statistics Test","4fdeabfd":"Outlier Analysis","485f07af":"The Hopkins statistic (introduced by Brian Hopkins and John Gordon Skellam) is a way of measuring the cluster tendency of a data set.It acts as a statistical hypothesis test where the null hypothesis is that the data is generated by a Poisson point process and are thus uniformly randomly distributed. A value close to 1 tends to indicate the data is highly clustered, random data will tend to result in values around 0.5, and uniformly distributed data will tend to result in values close to 0.\n\n\u2022 If the value is between {0.01, ...,0.3}, the data is regularly spaced.\n\n\u2022 If the value is around 0.5, it is random.\n\n\u2022 If the value is between {0.7, ..., 0.99}, it has a high tendency to cluster.","def55430":"From the business understanding we have learnt that Ave, NO, SR are some important factors which decides the form of a player. Hence, we will proceed with analyzing these 3 components to build some meaningful clusters.","c6d6924c":"Null Percentage: Columns","d2bf36b3":"## Data Preparation","7bc5ca28":"Null Count: Columns","c22ced8d":"# Final List of Players who can appointed in a new team for Batsman role","3b5fd8eb":"# Data Inspection","e7018830":"In complete linkage hierarchical clustering, the distance between two clusters is defined as the longest distance between two points in each cluster. For example, the distance between clusters \u201cr\u201d and \u201cs\u201d to the left is equal to the length of the arrow between their two furthest points.","20edcf62":"Complete Linkage suggests for 4 clusters ,","32617fcd":"# Complete Linkage","69c66e31":"# Hierarchical Clustering","0cffa47b":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","069abb88":"# Model Building","857dc55b":"In single linkage hierarchical clustering, the distance between two clusters is defined as the shortest distance between two points in each cluster. For example, the distance between clusters \u201cr\u201d and \u201cs\u201d to the left is equal to the length of the arrow between their two closest points."}}