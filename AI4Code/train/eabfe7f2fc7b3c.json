{"cell_type":{"65f43657":"code","ad155a75":"code","c0e67820":"code","e610b7d8":"code","20c01920":"code","f056850c":"code","db729ea2":"code","593a2690":"code","3cf2e8aa":"code","0e9b75f5":"code","18250c61":"code","3cdafeaf":"code","a004f3b0":"code","e2653f9b":"code","62046fe2":"code","438165be":"code","2758017e":"markdown","c37c5dc8":"markdown","05aba713":"markdown","16e41c11":"markdown","054437de":"markdown","64408369":"markdown","30da4337":"markdown"},"source":{"65f43657":"import math\nimport numpy as np\nimport matplotlib.pyplot as plt","ad155a75":"data = np.load(\"..\/input\/bubblestock\/data.npy\")","c0e67820":"plt.plot(data)","e610b7d8":"def lppl_formula(A, B, C, tc, t, beta, omega, phi):\n    return A + B*((tc-t)**beta)*(1 + C*np.cos(omega*np.log(tc-t) +  phi))","20c01920":"'''\nevery chromosome in the population should be decoded to 4 parameters:\n- tc: [500, 515] => 500, 501, 502, ... , 515 => 16 numbers => 4 genes\n- beta: [0.1, 0.9]  => 12 genes\n- omega: [4.8, 13]  => 14 genes\n- phi: [0\u03c0, 2\u03c0]  => 10 genes\n\nchromosome: 4+12+14+10 = 40 genes\n'''\n\ndef chrom2param(chrom):\n    tc = np.sum(chrom[0:4]*(2**np.arange(4))) + 500\n    beta =np.sum(chrom[4:16]*(2**np.arange(12))) \/ 4096\n    omega = (np.sum(chrom[16:30]*(2**np.arange(14))) \/ 16384) * 10\n    phi = (np.sum(chrom[30:40]*(2**np.arange(10))) \/ 1024) * 2\n    return tc, beta, omega, phi*np.pi","f056850c":"def mean_absolute_error_lppl(A, B, C, tc, beta, omega, phi):\n    abs_error = np.zeros((tc))\n    for i in range(tc):\n        abs_error[i] = np.abs(np.log(data[i]) - lppl_formula(A, B, C, tc, i, beta, omega, phi))\n    \n    return np.mean(abs_error)","db729ea2":"def genetic_algo(population):\n    \n    best_chromosome = None\n    best_mae = None\n    \n    error = np.zeros((population.shape[0]))\n    \n    # calculate error(fitness) of each chromosome\n    for i in range(population.shape[0]):\n        if i%1000 == 0:\n            print(\"  #{} Population\".format(i))\n            \n        tc, beta, omega, phi = chrom2param(population[i])\n        A, B, C = linear_reg(tc, beta, omega, phi)\n        error[i] = mean_absolute_error_lppl(A, B, C, tc, beta, omega, phi)\n    \n    idx = np.argsort(error)\n    population = population[idx]\n    best_chromosome = population[0]\n    best_mae = np.min(error)\n    \n    # selection and crossover\n    for i in range(100, population.shape[0]):\n        father_idx = np.random.randint(low=0, high=100)\n        mather_idx = np.random.randint(low=0, high=100)\n        while mather_idx == father_idx:\n            mather_idx = np.random.randint(low=0, high=100)\n            \n        father_chrom = population[father_idx]\n        mother_chrom = population[mather_idx]\n        son_chrom = np.zeros((40))\n        \n        mask = np.random.randint(low=0, high=2, size=(40))\n        son_chrom[mask==0] = father_chrom[mask==0]\n        son_chrom[mask==1] = mother_chrom[mask==1]\n        \n        population[i, :] = son_chrom[:]\n    \n    # mutation\n    for i in range(2000):\n        chrom_idx = np.random.randint(low=10, high=population.shape[0])\n        gene_idx = np.random.randint(low=10, high=40)\n        population[chrom_idx][gene_idx] = 1 - population[chrom_idx][gene_idx]    \n    \n    \n    return population, best_chromosome, best_mae","593a2690":"# A + B*((tc-t)**beta) + B*C*((tc-t)**beta)*np.cos(omega*np.log(tc-t) +  phi)\n\ndef linear_reg(tc, beta, omega, phi):\n    A = np.zeros((tc, 3))\n    b = np.zeros((tc))\n    \n    for t in range(tc):\n        b[t] = np.log(data[t])\n        \n        A[t, 0] = 1\n        A[t, 1] = ((tc-t)**beta)\n        A[t, 2] = ((tc-t)**beta)*np.cos(omega*np.log(tc-t) +  phi)\n    \n    x = np.linalg.lstsq(A, b)[0]\n    \n    A = x[0]\n    B = x[1]\n    C = x[2]\/B\n    \n    return A, B, C","3cf2e8aa":"population = np.random.randint(low=0, high=2, size=((12000, 40)))","0e9b75f5":"best_chrom = None\nbest_mae = 1000000","18250c61":"for i in range(10):\n    print(\"#{} Generation\".format(str(i)))\n    \n    population, chrom, mae = genetic_algo(population)\n    \n    print(\"#{} Generation mae={}\".format(str(i), str(mae)))\n\n    if mae < best_mae:\n        best_chrom = chrom\n        best_mae = mae","3cdafeaf":"best_mae","a004f3b0":"params = chrom2param(best_chrom)","e2653f9b":"A, B, C = linear_reg(params[0], params[1], params[2], params[3])","62046fe2":"result = []\nfor i in range(params[0]):\n    result.append(lppl_formula(A, B, C, params[0], i, params[1], params[2], params[3]))\n\nplt.figure(figsize=(15, 10))\nplt.xlabel(\"Time Index\")\nplt.ylabel(\"ln(p)\")\nplt.plot(np.log(data), label=\"True\")\nplt.plot(result, label=\"Pred\")\nplt.legend()\nplt.show()","438165be":"print(\"Best Parameters: \")\nprint(\"A= \", A)\nprint(\"B= \", B)\nprint(\"C= \", C)\nprint(\"tc= \", params[0])\nprint(\"beta= \", params[1])\nprint(\"omega= \", params[2])\nprint(\"phi= \", params[3])","2758017e":"### Using Linear Regression to Find Linear Variable","c37c5dc8":"## Main","05aba713":"## Log-Periodic Power Laws Formula","16e41c11":"### Using Genetic Algo to Find Non-Linear Variable","054437de":"## Import Package","64408369":"## Solve Problem","30da4337":"## Load Dataset"}}