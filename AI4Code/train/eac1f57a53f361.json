{"cell_type":{"b4b84fbc":"code","d513dae2":"code","52d48182":"code","df047da1":"code","1e6c75ad":"code","2aabd336":"code","18072b81":"code","5aa1ea97":"code","a37b64f3":"code","f0c71c88":"code","ea5fad81":"code","002fe0bd":"code","adab71a2":"code","9cb24bee":"code","1f190756":"code","fce9b69e":"code","89a472f9":"code","41e61fef":"code","0be8076e":"code","4c379c1c":"code","9044ed3c":"code","3041e962":"code","2acf280e":"code","5d40c9ee":"code","2edccae4":"markdown","3db4bb1b":"markdown"},"source":{"b4b84fbc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom PIL import Image\nfrom tqdm import tqdm_notebook\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","d513dae2":"input_path = Path('\/kaggle\/input\/br-coins\/classification_dataset\/all\/')\nim_size = 320","52d48182":"image_files = list(input_path.glob('*.jpg'))","df047da1":"def read_file(fname):\n    # Read image\n    im = Image.open(fname)\n\n    # Resize\n    im.thumbnail((im_size, im_size))\n\n    # Convert to numpy array\n    im_array = np.asarray(im)\n\n    # Get target\n    target = int(fname.stem.split('_')[0])\n\n    return im_array, target","1e6c75ad":"images = []\ntargets = []\n\nfor image_file in tqdm_notebook(image_files):\n    image, target = read_file(image_file)\n    \n    images.append(image)\n    targets.append(target)","2aabd336":"X = (np.array(images).astype(np.float32) \/ 127.5) - 1\ny_cls = np.array(targets)","18072b81":"X.shape, y_cls.shape","5aa1ea97":"i = 555\nplt.imshow(np.uint8((X[i] + 1) * 127.5))\nplt.title(str(y_cls[i]));","a37b64f3":"coins_ids = {\n    5: 0,\n    10: 1,\n    25: 2,\n    50: 3,\n    100: 4\n}\n\nids_coins = [5, 10, 25, 50, 100]\n\ny = np.array([coins_ids[coin] for coin in y_cls])","f0c71c88":"X_train, X_valid, y_train, y_valid, fname_train, fname_valid = train_test_split(\n    X, y, image_files, test_size=0.2, random_state=42)","ea5fad81":"im_width = X.shape[2]\nim_height = X.shape[1]\n\nim_width, im_height","002fe0bd":"from keras.layers import Conv2D, MaxPool2D, Flatten, GlobalAvgPool2D, GlobalMaxPool2D, Dense\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping","adab71a2":"model = Sequential()\n\n# CNN network\nmodel.add( Conv2D(16, 3, activation='relu', padding='same', input_shape=(im_height, im_width, 3)) )\nmodel.add( MaxPool2D(2) )\n\nmodel.add( Conv2D(32, 3, activation='relu', padding='same') )\nmodel.add( MaxPool2D(2) )\n\nmodel.add( Conv2D(64, 3, activation='relu', padding='same') )\nmodel.add( MaxPool2D(2) )\n\nmodel.add( Conv2D(128, 3, activation='relu', padding='same') )\nmodel.add( MaxPool2D(2) )\n\nmodel.add( Conv2D(256, 3, activation='relu', padding='same') )\n\n# Transition between CNN and MLP\nmodel.add( GlobalAvgPool2D() )\n\n# MLP network\nmodel.add( Dense(256, activation='relu') )\n\nmodel.add( Dense(5, activation='softmax') )\n\nmodel.summary()","9cb24bee":"optim = Adam(lr=1e-3)\nmodel.compile(optim, 'sparse_categorical_crossentropy', metrics=['acc'])","1f190756":"callbacks = [\n    ReduceLROnPlateau(patience=5, factor=0.1, verbose=True),\n    ModelCheckpoint('best.model', save_best_only=True),\n    EarlyStopping(patience=12)\n]\n\nhistory = model.fit(X_train, y_train, epochs=2000, validation_data=(X_valid, y_valid), batch_size=32,\n                   callbacks=callbacks)","fce9b69e":"df_history = pd.DataFrame(history.history)","89a472f9":"ax = df_history[['acc', 'val_acc']].plot()\nax.set_ylim(0.9, 1)","41e61fef":"df_history['val_acc'].max()","0be8076e":"model.load_weights('best.model')","4c379c1c":"model.evaluate(X_valid, y_valid)","9044ed3c":"y_pred = model.predict(X_valid)","3041e962":"y_pred_cls = y_pred.argmax(1)","2acf280e":"errors = np.where(y_pred_cls != y_valid)[0]\nerrors","5d40c9ee":"i = 55\nplt.figure(figsize=(10, 10))\nim = Image.open(fname_valid[i])\nplt.imshow(np.uint8(im), interpolation='bilinear')\nplt.title('Class: {}, Predicted: {}'.format(ids_coins[y_valid[i]], ids_coins[np.argmax(y_pred[i])]));","2edccae4":"# Evaluate results","3db4bb1b":"# Keras"}}