{"cell_type":{"5b2fa26c":"code","cba2c0a8":"code","3fffc08b":"code","c13199c9":"code","d42bbe98":"code","6f5106b9":"code","9828e008":"code","67f2887c":"code","b1f022e2":"code","70a1055b":"code","e701ad62":"code","e3394cde":"code","eee8bd82":"code","567667b9":"code","5e60bf8a":"code","2d27f37b":"code","e9d49417":"markdown","af12c87c":"markdown","f7f45ea5":"markdown","6b418811":"markdown","4dc5423c":"markdown","92bc2a7a":"markdown","b2c206a8":"markdown","ce75bbf3":"markdown","28127368":"markdown","188009b2":"markdown","0fc10f8b":"markdown","aa450b00":"markdown","123145a7":"markdown","bed240ab":"markdown","15c0cafa":"markdown","a255047d":"markdown","f178c0f2":"markdown","5847018f":"markdown","c3034c1d":"markdown","66aa31b3":"markdown"},"source":{"5b2fa26c":"# importing libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\n\n%matplotlib inline","cba2c0a8":"# importing the dataset for visualization\ndf = pd.read_csv(\"..\/input\/datapiyushviz\/visualization_df.csv\")","3fffc08b":"df.dtypes","c13199c9":"df.head(3)","d42bbe98":"# Styling your graph with inbuilt styles in seaborn\n# darkgrid , ticks , dark , whitegrid , white \n\nsns.set_style(\"ticks\")\n\n# Styling your graph with matplotlib styles\n# [\u2018Solarize_Light2\u2019, \u2018_classic_test_patch\u2019, \u2018bmh\u2019, \u2018classic\u2019, \u2018dark_background\u2019, \u2018fast\u2019, \u2018fivethirtyeight\u2019,\n# \u2018ggplot\u2019,\u2019grayscale\u2019,\u2019seaborn\u2019,\u2019seaborn-bright\u2019,\u2019seaborn-colorblind\u2019, \u2018seaborn-dark\u2019, \u2018seaborn-dark-palette\u2019, \n# \u2018seaborn-darkgrid\u2019, \u2018seaborn-deep\u2019, \u2018seaborn-muted\u2019, \u2018seaborn-notebook\u2019, \u2018seaborn-paper\u2019, \u2018seaborn-pastel\u2019, \n# \u2018seaborn-poster\u2019,\u2019seaborn-talk\u2019,\u2019seaborn-ticks\u2019,\u2019seaborn-white\u2019,\u2019seaborn-whitegrid\u2019,\u2019tableau-colorblind10\u2032]\n\nplt.style.use(\"bmh\")\n","6f5106b9":"# setting the lables properties of graph\n# first parameter is type - poster, paper, notebook, talk\n# second parameter is font size \n# third is parameter override\n\nsns.set_context(\"poster\", font_scale = 0.55, rc={\"grid.linewidth\": 0.5})\n\n# Third parameter rc can override below parameters in the graph. \n# {'axes.labelsize': 17.6,\n# 'axes.titlesize': 19.203,\n# 'font.size': 19.20,\n# 'grid.linewidth': 1.6,\n# 'legend.fontsize': 16.0,\n# 'lines.linewidth': 2.80,\n# 'lines.markeredgewidth': 0.0,\n# 'lines.markersize': 11.20,\n# 'patch.linewidth': 0.48,\n# 'xtick.labelsize': 16.0,\n# 'xtick.major.pad': 11.20,\n# 'xtick.major.width': 1.6,\n# 'xtick.minor.width': 0.8,\n# 'ytick.labelsize': 16.0,\n# 'ytick.major.pad': 11.20,\n# 'ytick.major.width': 1.6,\n# 'ytick.minor.width': 0.8}\n","9828e008":"# using subplot for multiple plots\n\n# subplot(rows , columns, figsize , sharey , sharex, hspace = 0.1 )\nfig, axes = plt.subplots(2, 3, figsize=(15, 10), sharey=True, sharex = True )\nfig.suptitle('Lineplot with different options')\nfig.tight_layout() # spacing between the graphs\n\n# using x = year and y = kilometer driven\n\nsns.lineplot(ax = axes[0,0], data = df, x = 'Year', y = 'Kilometers_Driven',style = 'Fuel_Type', hue = 'Fuel_Type')\nsns.lineplot(ax = axes[0,1], data = df, x = 'Year', y = 'Kilometers_Driven',size = 'Fuel_Type')\nsns.lineplot(ax = axes[0,2], data = df, x = 'Year', y = 'Kilometers_Driven', marker = True, dashes=False, hue = 'Fuel_Type')\nsns.lineplot(ax = axes[1,0], data = df, x = 'Year', y = 'Kilometers_Driven', markers = True, dashes = False, style = 'Fuel_Type')\nsns.lineplot(ax = axes[1,1], data = df, x = 'Year', y = 'Kilometers_Driven', err_style=\"bars\", ci=95)\n\n# Parameters:\n# ax = axes[rw,col] - grpha position in subplot            \n# data = dataframe\n# x = continueos variable on x axis\n# y = contineous variable on y axis\n# Assign a grouping semantic (hue, size, or style) to plot separate lines two or more sematics can also be used for one column\n# hue = categorical column to draw lines based on color\n# size = categorical column to draw lines based on line width\n# style = categoricla column to draw lines based on style\n# markers = True\/False - make market visible (can only be used with style sematic)\n# dashes = True\/False - remove the dashesh (can only be used with style sematic)\n# Show error bars instead of error bands and plot the 95% confidence interval (standard error)\n# err_style = style of graphic showing error ( band or bars) default is band\n# ci = confidence interval in percent \n\nplt.show()","67f2887c":"# creating the subplots to show figures\n\nfig, axes = plt.subplots(2,3, figsize = (20,15), sharex = False, sharey = False)\nfig.suptitle('Barplot with different options')\n\nsns.barplot(ax = axes[0,0], data = df, x = 'Location', y = 'Price' , palette = 'cubehelix')\nsns.barplot(ax = axes[0,1], data = df, x = 'Fuel_Type', y = 'Mileage', hue = 'Transmission')\nsns.barplot(ax = axes[0,2], data = df, x = 'Fuel_Type', y = 'Mileage', order = ['Petrol','Diesel','LPG'])\nsns.barplot(ax = axes[1,0], data = df, x = 'Fuel_Type', y = 'Mileage', estimator = np.median)\nsns.barplot(ax = axes[1,1], data = df, x = 'Transmission', y = 'Mileage', palette='coolwarm', ci = None)\nsns.barplot(ax = axes[1,2], data = df, x = 'Price', y = 'Location' , palette = 'cubehelix', orient='h')\n\n# Parameters - \n# ax = axes[rw,col] - grpha position in subplot            \n# data = dataframe\n# x = Categorical variable on x axis\n# y = contineous variable on y axis\n# hue = categorical columns to differentiate\n# order = order of categorical column on x axis [a list] , you can also limit the variables\n# estimator = median, mean ( central tendency estimator) need to use numpy function mean\/median\n# palette= color scheme of bars. eg. icefire , vlag , coolwarm\n# palette options > Blues_d , rocket, cubehelix , mako , flare , crest , magma , viridis , rocket_r ,seagreen\n# orient='h' - changes the orientation of bar plot to horizontal, x axis need to be continuous variable\n# ci = standard error (at confidence interval, 0-99% , None to hide the error bar)\n# In seaborn its hard to make stacked barplot with hue - you can use plt.plot(kind = 'bar', staked = True ,other para)\n\nplt.show()","b1f022e2":"# creating the subplots to show figures\n\nfig, axes = plt.subplots(3,3, figsize = (20,15), sharex = False, sharey = False)\nfig.suptitle('Histplot with different options')\n\n# ploting continuous variables opposite to count\n\nsns.histplot(ax = axes[0,0] , data = df, x = 'Mileage', bins= 20, stat = 'frequency')\nsns.histplot(ax = axes[0,1] , data = df, x = 'Price' , binwidth=2, binrange= (0,50))\nsns.histplot(ax = axes[0,2] , data = df, x = 'Power', kde = True, bins = 30 ,  hue = 'Owner_Type')\nsns.histplot(ax = axes[1,0] , data = df, x = 'Mileage',hue = 'Owner_Type', binwidth=2, multiple= 'stack')\nsns.histplot(ax = axes[1,1] , data = df, x = 'Engine',hue = 'Fuel_Type', bins= 20, binrange = (500,4000) , element= 'step')\nsns.histplot(ax = axes[1,2] , data = df, x = 'Power',hue = 'Transmission', element= 'poly')\nsns.histplot(ax = axes[2,0] , data = df, x = 'Mileage', element= 'step', stat = 'density')\nsns.histplot(ax = axes[2,1] , data = df, x = 'Mileage', fill = False )\nsns.histplot(ax = axes[2,2] , data = df, x = 'Mileage', fill = False, hue = 'Transmission', cumulative=True, element='step' )\n\n# Parameters - \n# ax = axes[rw,col] - grpha position in subplot            \n# data = dataframe\n# x = Categorical variable on x axis\n# y = contineous variable on y axis\n# hue = categorical columns to differentiate\n# binwidth - width of the column\n# bins = number of bins to show on graph\n# binrange = (start, end) range of numbers \n# kde = True\/False - kde kernel density estimate line\n# multiple = 'stack' , default hue is layered , we can make it stack\n# element = make it easy see overlaping hue bars, step - steps, poly - kdeline\n# stat= y axis function ( density , probability, frequency , count )\n# fill = False - remove the color fill\n# cumulative = True - cumulative counts\n\nplt.show()","70a1055b":"# creating the subplots to show figures\n\nfig, axes = plt.subplots(1,3, figsize = (20,8), sharex = False, sharey = False)\nfig.suptitle('Countplots')\n\nsns.countplot(ax = axes[0], data = df, x = 'Year')\nsns.countplot(ax = axes[1], data = df, x = 'Transmission', hue = 'Fuel_Type',palette=\"Set3\" )\nsns.countplot(ax = axes[2], data = df, x = 'Fuel_Type', edgecolor=sns.color_palette(\"dark\", 3), linewidth = 5 ,facecolor=(0, 0, 0, 0))\n\n# naming the subplots with help of axes\naxes[0].set_title('one')\naxes[1].set_title('Two')\naxes[2].set_title('Three')\n\n# Parameters - \n# ax = axes[rw,col] - grpha position in subplot            \n# data = dataframe\n# x = Categorical variable on x axis\n# y = contineous variable on y axis\n# hue = categorical columns to differentiate\n# palette - color scheme\n# edgecolor - edge color , and linewidth\n\nplt.show()","e701ad62":"# creating the subplots to show figures\n\nfig, axes = plt.subplots(1,3, figsize = (20,8), sharex = False, sharey = False)\nfig.suptitle('Scatterplots with variations')\n\n# Comparing all numeric variables \n\nsns.scatterplot(ax = axes[0] , data = df, x = 'Engine', y = 'Mileage', hue = 'Fuel_Type')\nsns.scatterplot(ax = axes[1] , data = df, x = 'Power', y = 'Mileage', size = 'Fuel_Type', legend = 'full', sizes = (10,200))\nsns.scatterplot(ax = axes[2] , data = df, x = 'Engine', y = 'Power', style = 'Fuel_Type', hue = 'Transmission')\n\n# Parameters - \n# ax = axes[rw,col] - grpha position in subplot            \n# data = dataframe\n# x = Categorical variable on x axis\n# y = contineous variable on y axis\n# Assign a grouping semantic (hue, size, or style) to plot separate lines two or more sematics can also be used for one column\n# hue = categorical column to draw lines based on color\n# size = categorical column to draw lines based on line width\n# style = categoricla column to draw lines based on style\n# legend=\"full\" - showing full legend board\n# sizes=(20, 200) - size of dots when size as sematic choosen\n\nplt.show()","e3394cde":"g = sns.catplot(kind = 'violin',data = df, x = 'Owner_Type', y = 'Mileage', col = 'Fuel_Type', row = 'Transmission', aspect = 0.8, height= 5)\n\n# kind = anykind of graph can be used from the list above (except count it takes only one argument x)\n# col = col name to make graph columns based on \n# row = row name to make grpah rows based on  \n# col_wrap - maximum number of plot in a row , next will be move to next row\n# col_wrap and row cannot be used together. \n# height = height of plots\n# aspect = 0-1 , aspect ration of x and y \n# orient = 'h' for horizontal orientation\n\n(g.set_axis_labels(\"\", \"\")\n  .set_xticklabels([\"First\", \"Second\", \"Third\",\"Forth more\"])\n  .set_titles(\"{col_name} {col_var}\")) \n\n# setting the properties of label \n","eee8bd82":"sns.jointplot( x ='Power' , y = 'Mileage', hue = 'Transmission', data = df, kind = 'scatter')\nsns.jointplot( x ='Power' , y = 'Mileage', data = df, kind = 'hex', joint_kws = dict(gridsize = 20))\nsns.jointplot( x ='Power' , y = 'Mileage', data = df, kind = 'reg', marker=\"+\")\nsns.jointplot( x ='Power' , y = 'Mileage', data = df, kind = 'resid',marginal_kws=dict(bins=25, fill=False) )\nsns.jointplot( x ='Power' , y = 'Mileage', hue = 'Transmission', data = df, kind = 'kde')\n\n\n# x and y are axes for elements to be compared\n# data = dataset \n# kind = scatter, hex, reg, resid, kde\n# color = color of plot\n# height = figure height\n# ration = aspect ration of plot\n# dropna = True\/False , do not show nan if True\n# joint_kws = dict(gridsize = 20) - in hex plot gridzise is number of hexs on the plot\n# marker = marker type\n# marginal_kws=dict(bins=25, fill=False) - related to margin resid\n\nplt.show()","567667b9":"penguins = sns.load_dataset(\"penguins\")\n\nsns.pairplot(penguins, hue = 'species', diag_kind='hist', markers = ['o','s','D'], height = 5)\n\n# passing whole df into pairplot return scatterplot and as diagonal distribution of the feature\n# hue - any categorical column\n# diag_kind = diagram for diagonal elements eg. hist,kde\n# kind - for the non diagonal elements\n# markers = list of markers for data points\n# height - height of each plot\n# corner = True\/False - to plot only lower triagle\n# plot_kws=dict(marker=\"+\", linewidth=1) control the plot elements\n# diag_kws=dict(fill=False) - control the diagonal elements\n\nplt.show()\n","5e60bf8a":"annot_kws={'fontsize':20, \n           'fontstyle':'italic',  \n           'color':\"k\",\n           'alpha':0.6, \n           'rotation':\"horizontal\",\n           'verticalalignment':'center',\n           'backgroundcolor':'r'}\n\n# Everything above for the annot is self explainatory. \n\nplt.figure(figsize = (15,15))\n\nsns.heatmap(df.corr(), vmin = -1, vmax = 1, center = 0, annot = True, linewidths = 0.25, cmap = 'YlGnBu', cbar_kws={\"orientation\": \"horizontal\"})\n\n# dataframe or pivot table\n# vmin \/ vmax - min max on color scale\n# center - center point specified if we want any custom\n# annot - denote value in each box\n# fmt - format of the interger f for float d for int\n# annot_kws = annot_kws - annot variable as dictionary. \n# linewidths - line seperating boxes\n# cmap - color scheme colormap (YlGnBu,Blues ,BuPu,  Greens, PiYG )\n# yticklabels = True, False or alternate number eg. if 2 passed then show every second label\n# xticklabels = same as y ticks\n# cbar=False - to hide the color bar\n# cbar_kws={\"orientation\": \"horizontal\"} - color bar orientation \n ","2d27f37b":"# creating the subplots to show figures\n\nfig, axes = plt.subplots(2,2, figsize = (20,20), sharex = False, sharey = False)\nfig.suptitle('Boxplot, violinplot, swarmplot')\n\nsns.boxplot(ax = axes[0,0], data = df, x = 'Mileage',y = 'Fuel_Type' ,linewidth= 2, order = ['Petrol','Diesel'])\n# orient - horizontal 'h'\n# linewidth - line width\n# order - columns order and selection\n\nsns.violinplot(ax = axes[0,1], data = df, x = 'Mileage',y = 'Fuel_Type', hue = 'Transmission', split = True, scale = 'count' , inner = 'quartile', bw = 0.2)\n# split - True\/False - split the diagrm based on hue\n# scale - map based on scale ( count, width,)\n# inner - inner mapping ( quartile, stick etc)\n# bw=.2 - bandwidth to smooth inner notation \n\nsns.swarmplot(ax = axes[1,0], data = df[:1000], x = 'Mileage', y = 'Fuel_Type', hue = 'Transmission', size = 4, order = ['Petrol','Diesel'])\n# size - size of points\n# order - order and selection of column","e9d49417":"### Scaling figure properties","af12c87c":"# Heatmap\n\nHeatmaps are used to show relationships between two variables, one plotted on each axis. <br>\nThe variable can be of any type","f7f45ea5":"# Catplot\n\nCatplot show the relationship between a numerical and one or more categorical variables using one of several visual representations. <br> Catplot is mostly used to show the multiple plots of same kind for unique elements in the categorical columns\n\n<ul>Categorical Scatterplots:\n    <li>stripplot() (with kind=\"strip\"; the default)<\/li>\n    <li>swarmplot() (with kind=\"swarm\")<\/li>\n<\/ul>\n<ul>Categorical distribution plots:\n    <li>boxplot() (with kind=\"box\")<\/li>\n    <li>violinplot() (with kind=\"violin\")<\/li>\n    <li>boxenplot() (with kind=\"boxen\")<\/li>\n<\/ul>\n<ul>Categorical estimate plots:\n    <li>pointplot() (with kind=\"point\")<\/li>\n    <li>barplot() (with kind=\"bar\")<\/li>\n    <li>countplot() (with kind=\"count\")<\/li>\n<\/ul>","6b418811":"# Scatterplot\n\nScatter plots' primary uses are to observe and show relationships between two numeric variables. <br>\nVariable x and y both are required to draw a scatter plot","4dc5423c":"# Jointplot\n\nDraw a plot of two numerical variables with bivariate and univatiate graphs with hue as categorical variable","92bc2a7a":"categorical columns : 'Name', 'Location','Fuel_Type', 'Transmission', 'Owner_Type', 'Seats' <br>\nnuerical columns : 'Kilometers_Driven' , 'Year',  'Mileage', 'Engine', 'Power', 'Price'","b2c206a8":"# Setting up the plot for the graphs ","ce75bbf3":"# Barplot\n\nIt shows the relationship between a numeric and a categoric variable.<br>\nMostly contineour variable is used on the y axis of the barplot and catergorical on X axis","28127368":"<h1 style=\"font-size:5vw;\">Data Visulaization<\/h1>","188009b2":"categorical columns : 'Name', 'Location','Fuel_Type', 'Transmission', 'Owner_Type', 'Seats' <br>\nnuerical columns : 'Kilometers_Driven' , 'Year',  'Mileage', 'Engine', 'Power', 'Price'","0fc10f8b":"### Figure Styles\nUse any one of sns or plt style","aa450b00":"categorical columns : 'Name', 'Location','Fuel_Type', 'Transmission', 'Owner_Type', 'Seats' <br>\nnuerical columns : 'Kilometers_Driven' , 'Year',  'Mileage', 'Engine', 'Power', 'Price'","123145a7":"Please note that the aim of data visualization in the code is to understand the data.<br>\nWe have more advance tools to visualize the data for presentation needs like powerBI and tableau <br>\nChoosing the simple and most informative graph is our aim.<br>\n\n---- Piyush Thakur ---","bed240ab":"# Other type of graphs\n\n1. Boxplot\n2. violinplot\n3. swarmplot ","15c0cafa":"categorical columns : 'Name', 'Location','Fuel_Type', 'Transmission', 'Owner_Type', 'Seats' <br>\nnuerical columns : 'Kilometers_Driven' , 'Year',  'Mileage', 'Engine', 'Power', 'Price'","a255047d":"# Lineplot\nused for x and y continuous variables , we can use multiple lines in one graphs of similar measure unite <br>\nLine graphs provide an excellent way to map independent and dependent variables that are both quantitative <br>\nMost appropriate for the time series data","f178c0f2":"categorical columns : 'Name', 'Location','Fuel_Type', 'Transmission', 'Owner_Type', 'Seats' <br>\nnuerical columns : 'Kilometers_Driven' , 'Year',  'Mileage', 'Engine', 'Power', 'Price'","5847018f":"# Histogram - histplot\n\nThe histogram is used for variables whose values are numerical and measured on an interval scale. Used to check distribution and outliers <br>\n","c3034c1d":"# Pairplot\n\nMostly used to check the correlation matrix of numerical variables. \nImporting the penguins dataset for ease of use\n","66aa31b3":"# Countplot\n\nCountplot is similar to histplot but more precisely show data for the descret numerical variables. <br>\nAlso usefull to show count of categorical variable"}}