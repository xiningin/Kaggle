{"cell_type":{"dec8e4c5":"code","a6c137aa":"code","b14e3eda":"code","e06eac69":"code","f59552ac":"code","0de7a34e":"code","b09131b1":"code","3c2db40c":"code","88807bb5":"code","505ffbc6":"code","6f747461":"code","89224192":"code","92ebebb9":"code","67333e65":"code","e96629b6":"code","0889b20c":"markdown","2bebb44b":"markdown","741d69b0":"markdown","4eef5d7c":"markdown","f012c424":"markdown","0dc48d08":"markdown"},"source":{"dec8e4c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#supress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a6c137aa":"import os\n\ndirectories = ['..\/input\/100-bird-species\/birds_rev2\/test',\n                                '..\/input\/100-bird-species\/birds_rev2\/train',\n                                '..\/input\/100-bird-species\/birds_rev2\/valid']\nfor dir in directories:\n    label = []\n    path = []\n    for dirname, _,filenames in os.walk(dir):\n        for filename in filenames:\n            label.append(os.path.split(dirname)[1])\n            path.append(os.path.join(dirname,filename))\n    if dir == directories[0]:\n        df_test = pd.DataFrame(columns=['path','label'])\n        df_test['path']=path\n        df_test['label']=label\n    elif dir == directories[1]:\n        df_train = pd.DataFrame(columns=['path','label'])\n        df_train['path']=path\n        df_train['label']=label        \n    elif dir == directories[2]:\n        df_valid = pd.DataFrame(columns=['path','label'])\n        df_valid['path']=path\n        df_valid['label']=label","b14e3eda":"df_train.head()","e06eac69":"# Display 20 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\ndf_sample = df_train.sample(15)\ndf_sample.reset_index(drop=True, inplace=True)\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(df_sample.path[i]))\n    ax.set_title(df_sample.label[i])\nplt.tight_layout()\nplt.show()","f59552ac":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.preprocessing.image import ImageDataGenerator","0de7a34e":"image_size = (224,224)\nimage_shape=(224,224,3)","b09131b1":"BS = 32\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = df_train, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nvalid_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_valid, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\ntest_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_test, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=False)\n\nfor _ in range(3):\n    img, label = train_generator.next()\n    plt.imshow(img[0])\n    plt.show()","3c2db40c":"#model\n\nresnet_model=tf.keras.applications.InceptionResNetV2(input_shape=image_shape,\n                                               include_top=False,\n                                               weights='imagenet')\nresnet_model.trainable = False\n\n\nbaseline_model = keras.Sequential([  \n    resnet_model,\n    layers.Flatten(),\n    layers.Dense(units=275, activation=\"softmax\"),\n])\nbaseline_model.summary()\n\nbaseline_model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n#fit\n\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\n\nhistory = baseline_model.fit(\n    train_generator,\n    validation_data=valid_generator,\n    epochs=25,\n    verbose=1,\n    callbacks=[early_stop]\n)\n\nresult=pd.DataFrame(history.history)\nfig, ax=plt.subplots(nrows=1, ncols=2,figsize=(18,6))\nax=ax.flatten()\nax[0].plot(result[['accuracy','val_accuracy']])\nax[0].set_title(\"Accuracy\")\nax[1].plot(result[['loss','val_loss']])\nax[1].set_title(\"Loss\")","88807bb5":"baseline_model.evaluate(test_generator,use_multiprocessing=True,workers=10)","505ffbc6":"BS = 32\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=5,\n                                   width_shift_range=0.05,\n                                   height_shift_range=0.05,\n                                   shear_range=0.05,\n                                   zoom_range=0.05,\n                                   horizontal_flip=True,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = df_train, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nvalid_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_valid, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\ntest_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_test, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nfor _ in range(3):\n    img, label = train_generator.next()\n    plt.imshow(img[0])\n    plt.show()","6f747461":"#model\n\nresnet_model=tf.keras.applications.InceptionResNetV2(input_shape=image_shape,\n                                               include_top=False,\n                                               weights='imagenet')\nresnet_model.trainable = False\n\n\naug_model = keras.Sequential([  \n    resnet_model,\n    layers.Flatten(),\n    layers.Dense(units=275, activation=\"softmax\"),\n])\naug_model.summary()\n\naug_model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n#fit\n\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\n\nhistory = aug_model.fit(\n    train_generator,\n    validation_data=valid_generator,\n    epochs=25,\n    verbose=1,\n    callbacks=[early_stop]\n)\n\nresult=pd.DataFrame(history.history)\nfig, ax=plt.subplots(nrows=1, ncols=2,figsize=(18,6))\nax=ax.flatten()\nax[0].plot(result[['accuracy','val_accuracy']])\nax[0].set_title(\"Accuracy\")\nax[1].plot(result[['loss','val_loss']])\nax[1].set_title(\"Loss\")","89224192":"aug_model.evaluate(test_generator,use_multiprocessing=True,workers=10)","92ebebb9":"BS = 32\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=5,\n                                   width_shift_range=0.05,\n                                   height_shift_range=0.05,\n                                   shear_range=0.05,\n                                   zoom_range=0.05,\n                                   horizontal_flip=True,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = df_train, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nvalid_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_valid, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\ntest_generator = valid_datagen.flow_from_dataframe(\n    dataframe = df_test, x_col='path', y_col='label',\n    target_size= image_size,\n    batch_size=BS,\n    class_mode='categorical',\n    color_mode='rgb',\n    shuffle=True)\n\nfor _ in range(3):\n    img, label = train_generator.next()\n    plt.imshow(img[0])\n    plt.show()","67333e65":"#model\n\nresnet_model=tf.keras.applications.InceptionResNetV2(input_shape=image_shape,\n                                               include_top=False,\n                                               weights='imagenet')\nresnet_model.trainable = False\n\n\nlayers_model = keras.Sequential([  \n    resnet_model,\n    layers.Flatten(),\n    layers.Dense(units=1950,activation='relu'),\n    layers.BatchNormalization(),\n#     layers.Dropout(.3),\n    layers.Dense(units=275, activation=\"softmax\"),\n])\nlayers_model.summary()\n\nlayers_model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n#fit\n\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\n\nhistory = layers_model.fit(\n    train_generator,\n    validation_data=valid_generator,\n    epochs=25,\n    verbose=1,\n    callbacks=[early_stop]\n)\n\nresult=pd.DataFrame(history.history)\nfig, ax=plt.subplots(nrows=1, ncols=2,figsize=(18,6))\nax=ax.flatten()\nax[0].plot(result[['accuracy','val_accuracy']])\nax[0].set_title(\"Accuracy\")\nax[1].plot(result[['loss','val_loss']])\nax[1].set_title(\"Loss\")","e96629b6":"layers_model.evaluate(test_generator,use_multiprocessing=True,workers=10)","0889b20c":"**Baseline**","2bebb44b":"**Import libraries and data**","741d69b0":"# EDA","4eef5d7c":"**Improving the neural network with additional layers**","f012c424":"**Decreasing overfitting with image augmentation**","0dc48d08":"# Neural Network with Transfer Learning"}}