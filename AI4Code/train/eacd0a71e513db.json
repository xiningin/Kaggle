{"cell_type":{"e95f1542":"code","bb60b8b7":"code","e834397b":"code","12f23deb":"code","931580ad":"code","c99fcd7e":"code","f70c3041":"code","910e01c8":"markdown","a3cc7c85":"markdown","4629c9f2":"markdown","fbffc69e":"markdown","b99761cc":"markdown","ab12da9c":"markdown","e8550076":"markdown","4799906c":"markdown","f5a3b951":"markdown","89271df4":"markdown"},"source":{"e95f1542":"import pandas as pd\nimport os","bb60b8b7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e834397b":"permutations = pd.read_csv('\/kaggle\/input\/santa-2021\/permutations.csv')\npermutations.head()","12f23deb":"distance_matrix = pd.read_csv('\/kaggle\/input\/santa-2021\/distance_matrix.csv', index_col='Permutation')\ndistance_matrix.head()","931580ad":"wildcards = pd.read_csv('\/kaggle\/input\/santa-2021\/wildcards.csv')\nwildcards.head()","c99fcd7e":"sample_submission = pd.read_csv('\/kaggle\/input\/santa-2021\/sample_submission.csv')\nsample_submission.head()","f70c3041":"# Evaluating score\n\nmax(map(len, sample_submission['schedule'].to_list()))","910e01c8":"There are four files provided:\n - **permutations.csv** - All permutations possible with the 7 symbols\n - **distance_matrix.csv** - Distance Matrix between permutations\n - **wildcards.csv** - Mapping between strings with wildcards and their possible meaning\n - **sample_submission.csv** - Sample submission file","a3cc7c85":"# Initialization","4629c9f2":"## distance_matrix.csv","fbffc69e":"## sample_submission.csv","b99761cc":"Distance of 0 means that the two strings are exactly the same, so the diagonal elements of the matrix are all 0.\n\nDistance of 7 means that the two strings do not overlap, therefore 7 is the maximum value in the distance matrix.","ab12da9c":"## permutations.csv","e8550076":"## wildcards.csv","4799906c":"# Data","f5a3b951":"Submitting the sample_submission.csv will get us a score of 6985.","89271df4":"# Introduction\n\nIn this notebook, I will do analysis of the problem for the [Santa 2021 - The Merry Movie Montage](https:\/\/www.kaggle.com\/c\/santa-2021\/) competition.\n\nThis is not a Machine Learning competition and the problem given is an optimization problem or as mentioned in the [Getting Started](https:\/\/www.kaggle.com\/ryanholbrook\/getting-started-with-santa-2021) notebook, the minimal superpermutation problem.\n\nThe problem can be briefly stated as:\n\nCreate 3 strings consisting of 7 symbols \ud83c\udf85, \ud83e\udd36, \ud83e\udd8c, \ud83e\udddd, \ud83c\udf84, \ud83c\udf81, and \ud83c\udf80, and 1 wildcard symbol \ud83c\udf1f such that,\n - Every possible permutation must be in at least 1 of the 3 strings.\n - Permutations starting with \ud83c\udf85\ud83e\udd36 must be in all the 3 strings.\n - Each string may have up to two wildcards \ud83c\udf1f.\n \nThe wildcard symbol may act as any of the 7 symbols in a permutation, such that in no permutation there is more than one wildcard. Eg.: \ud83c\udf1f\ud83e\udd36\ud83e\udd8c\ud83e\udddd\ud83c\udf84\ud83c\udf81\ud83c\udf80 is valid but \ud83c\udf1f\ud83e\udd36\ud83e\udd8c\ud83e\udddd\ud83c\udf1f\ud83c\udf81\ud83c\udf80 is not."}}