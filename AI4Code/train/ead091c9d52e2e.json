{"cell_type":{"9248171f":"code","c12d1bd7":"code","8cc73de9":"code","75187ca3":"code","312c9fa5":"code","686af59e":"code","55d7349c":"code","cdee6ecd":"code","3fdf4dc3":"code","15756472":"code","f728968f":"code","ccff66c1":"code","bccbc08b":"code","a2f2795d":"code","a121bd3f":"code","fe1f0517":"markdown","be9ddb3a":"markdown","44bbd8e4":"markdown","834e465d":"markdown","35976e18":"markdown","16a4f569":"markdown","0154c12f":"markdown","f24f5551":"markdown","24897e88":"markdown","e54cb4bf":"markdown","6fb18039":"markdown","4d19822a":"markdown","ccf6aca1":"markdown","d393a4da":"markdown","79ffa0fa":"markdown","bda17fdb":"markdown"},"source":{"9248171f":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport re\n\nimport tensorflow as tf\nfrom functools import partial\nfrom kaggle_datasets import KaggleDatasets\nprint(\"Tensorflow version \" + tf.__version__)","c12d1bd7":"path = '\/kaggle\/input\/tutorial-tfrecords\/'\nos.listdir(path)","8cc73de9":"data = pd.read_csv(path+'metadata.csv')","75187ca3":"data","312c9fa5":"fig, axs = plt.subplots(2, 3, figsize=(25, 15))\nfig.subplots_adjust(hspace = .1, wspace=.1)\naxs = axs.ravel()\nfor i in range(6):\n    image_id = data.loc[i, 'image']\n    # Load Image Label\n    label = data.loc[i, 'label']\n    # Load Image\n    image = cv2.imread(path+'images\/'+image_id)\n    image_RGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    axs[i].imshow(image_RGB)\n    axs[i].set_title(image_id+' label:'+str(label))\n    axs[i].set_xticklabels([])\n    axs[i].set_yticklabels([])","686af59e":"file_name = 'images.tfrec'\nwith tf.io.TFRecordWriter(file_name) as writer:\n    for i in data.index:\n        # Load Image Id\n        image_id = data.loc[i, 'image']\n        # Load Image Label\n        label = data.loc[i, 'label']\n        # Load Image\n        image = cv2.imread(path+'images\/'+image_id)\n        image_RGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image_string = cv2.imencode('.jpg', image_RGB, (cv2.IMWRITE_JPEG_QUALITY, 94))[1].tostring()\n        # Define Feature Settings\n        features = {'image_id': tf.train.Feature(bytes_list = tf.train.BytesList(value=[bytes(image_id, 'utf8')])),\n                    'label': tf.train.Feature(int64_list = tf.train.Int64List(value = [label])),\n                    'image': tf.train.Feature(bytes_list = tf.train.BytesList(value = [image_string]))}\n        # Create TensorFlow example Object\n        example = tf.train.Example(features = tf.train.Features(feature = features))\n        # Write To example Object\n        writer.write(example.SerializeToString())","55d7349c":"os.listdir('\/kaggle\/working\/')","cdee6ecd":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(\"Device:\", tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint(\"Number of replicas:\", strategy.num_replicas_in_sync)","3fdf4dc3":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 6\nIMAGE_SIZE = [1024, 1024]","15756472":"def decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.resize(image, [*IMAGE_SIZE])\n    image = tf.cast(image, tf.float32)\/255.\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\n\ndef read_tfrecord(example, labeled):\n    tfrecord_format = {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"label\": tf.io.FixedLenFeature([], tf.int64),\n    } if labeled else {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"image_id\":tf.io.FixedLenFeature([], tf.string)\n    }\n    \n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example[\"image\"])\n    if labeled:\n        label = tf.cast(example[\"label\"], tf.int32)\n        return image, label\n    idnum = example['image_id']\n    return image, idnum\n\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False  # disable order, increase speed\n    dataset = tf.data.TFRecordDataset(\n        filenames\n    )  # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(\n        ignore_order\n    )  # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(\n        partial(read_tfrecord, labeled=labeled), num_parallel_calls=AUTOTUNE\n    )\n    # returns a dataset of (image, label) pairs if labeled=True or just images if labeled=False\n    return dataset\n\n\ndef get_dataset(filenames, labeled=True, ordered=True):\n    dataset = load_dataset(filenames, labeled=labeled, ordered=ordered)\n    dataset = dataset.prefetch(buffer_size=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset","f728968f":"image_files = tf.io.gfile.glob('*.tfrec')\nimage_files","ccff66c1":"print('Number of tes tfrec files:', len(image_files))","bccbc08b":"raw_dataset = tf.data.TFRecordDataset(image_files)\nfor raw_record in raw_dataset.take(1):\n  example = tf.train.Example()\n  example.ParseFromString(raw_record.numpy())\n  #print(example.features)","a2f2795d":"image_dataset = get_dataset(image_files)","a121bd3f":"image_batch, label_batch = next(iter(image_dataset))\n\nfig, axs = plt.subplots(2, 3, figsize=(25, 15))\nfig.subplots_adjust(hspace = .1, wspace=.1)\naxs = axs.ravel()\nfor i in range(6):\n    image = image_batch[i]\n    axs[i].imshow(cv2.cvtColor(np.float32(image), cv2.COLOR_BGR2RGB))\n    axs[i].set_title('label: '+str(label_batch[i].numpy()))\n    axs[i].set_xticklabels([])\n    axs[i].set_yticklabels([])","fe1f0517":"# Intro\nThis notebook is a little tutorial on TFRecord files. We want to create .tfrec files based on given images and metadata.\n\n**Motivation:** TFRecord files (.tfrec) are based on a binary format for storing sequences of values. The TFRecord format was developed by TensorFlow. The goal of the development is to use Tensor Processing Units (TPUs) to accelerate the applications of machine learning applications.\n\nYou can use this for:\n* competitions on Kaggle,\n* studying TFRecord files,\n* working with .tfrec files on your own and private projects.\n\nFor this tutorial use private [images file database](https:\/\/www.kaggle.com\/drcapa\/tutorial-tfrecords). The dataset is small and consists of 6 images. There is also a file with metadata. In this case the metadata consists of the image name and a label.\n\nThere are 4 other notebooks which are in use of competitions:\n* [Cassava_Leaf_Disease_Classification_TPU_Tutorial](https:\/\/www.kaggle.com\/drcapa\/cassava-leaf-disease-classification-tpu-tutorial)\n* [Catheter_Line_Position_TPU_Tutorial](https:\/\/www.kaggle.com\/drcapa\/catheter-line-position-tpu-tutorial)\n* [Flower_Classification_TPU_Tutorial](https:\/\/www.kaggle.com\/drcapa\/flower-classification-tpu-tutorial)\n* [Melanoma_Classifier_TPU_Tutorial](https:\/\/www.kaggle.com\/drcapa\/melanoma-classifier-tpu-tutorial)\n\n### The table of content\n\n1. [Create TFRecord Files](#Create_TFRecord_Files)\n2. [Load TFRecord File](#Load_TFRecord_File)\n3. [Work On TPU](#Work_On_TPU)\n\n<font size=\"4\"><span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span><\/font>","be9ddb3a":"# Load TFRecord File <a class=\"anchor\" id=\"Load_TFRecord_File\"><\/a>\nNow we want to load the created TFRecord file **images.tfrec**.","44bbd8e4":"## Functions\nWe define some helper functions to read the data:","834e465d":"# Libraries","35976e18":"# Create TFRecord Files <a class='anchor' id=\"Create_TFRecord_Files\"> <\/a>\n\nIn this example there are 3 features: the image id, the label and even the image data. The goal ist to store the 6 images based on the features in the file **images.tfrec**\n\nFor detailed informations we recommend the [website](https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord#write_the_tfrecord_file).","16a4f569":"## View Images","0154c12f":"For a machine learning process we would resize the images to get the same size for every image.","f24f5551":"## Set Up:","24897e88":"Previous we defined three features. Now we want to check them:\n![](https:\/\/i.ibb.co\/WtS18Tc\/tut-1.png)\n![](https:\/\/i.ibb.co\/D7nyxmW\/tut-2.png)\nTo see the whole feature keys describtion we have to execute the following code.","e54cb4bf":"# Path","6fb18039":"## Load Data","4d19822a":"# Work On TPU <a class=\"anchor\" id=\"Work_On_TPU\"><\/a>\n\nTo use the advantages of TPU you have to switch on your notebook:\n1. Klick on the notebook seetings (right upper corner of the notebook).\n2. Klick on \"Accelerator\".\n3. Choose TPU v3-8.\n![](https:\/\/i.ibb.co\/mHFPHpN\/setting.png)","ccf6aca1":"After that we can find the TFRecord file in the working directory:","d393a4da":"Get Data:","79ffa0fa":"# Load Data","bda17fdb":"# View Images"}}