{"cell_type":{"796040c0":"code","0d6c7ec5":"code","e1db2715":"code","8136a598":"code","881270b9":"code","628a4eba":"code","c00c6080":"code","a3aeee04":"code","cf18e2d9":"code","ce1264f0":"code","7d32ef7b":"code","b0061d7a":"code","829c99de":"code","d55e5fb6":"code","5a2d92f2":"code","978606e3":"code","f575234d":"code","804e08cd":"code","62fb2a11":"code","757fce92":"code","2ef9be60":"code","c2152f21":"code","b13ec6d8":"code","f0e52888":"code","b94f6216":"code","e74671b8":"code","d6733caf":"code","0c545a6b":"markdown","ab289fe2":"markdown","efed701a":"markdown","2efa28c8":"markdown","126de166":"markdown","883d1db5":"markdown","55bc2d6f":"markdown","f935a44d":"markdown","c43de467":"markdown","3535d0aa":"markdown","807bc84e":"markdown","2bbe793b":"markdown","62ce8bad":"markdown","9f0a54b8":"markdown","486e18b9":"markdown"},"source":{"796040c0":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","0d6c7ec5":"realestate_df=pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')\nrealestate_df.head()","e1db2715":"realestate_df.shape","8136a598":"realestate_df.info()","881270b9":"realestate_df.describe()","628a4eba":"sns.pairplot(realestate_df)","c00c6080":"X=realestate_df.drop(['No','Y house price of unit area'],axis=1)\ny=realestate_df['Y house price of unit area']","a3aeee04":"# X.head()\n# y","cf18e2d9":"from sklearn.preprocessing import PolynomialFeatures","ce1264f0":"polynomial_converter=PolynomialFeatures(degree=2, include_bias=False)\npoly_features=polynomial_converter.fit(X)\npoly_features=polynomial_converter.transform(X)","7d32ef7b":"poly_features.shape\n#Poly_Features: X1, X2, X3, X1^2, X2^2, X3^2, X1X2, X1X3, X2X3","b0061d7a":"X.shape","829c99de":"from sklearn.model_selection import train_test_split","d55e5fb6":"X_train,X_test,y_train,y_test=train_test_split(poly_features,y, test_size=0.3,random_state=101)","5a2d92f2":"from sklearn.linear_model import LinearRegression","978606e3":"polymodel=LinearRegression()","f575234d":"polymodel.fit(X_train,y_train)","804e08cd":"y_pred=polymodel.predict(X_test)","62fb2a11":"pd.DataFrame({'y_test':y_test,'y_pred':y_pred,'Residuals':(y_test-y_pred)})","757fce92":"from sklearn import metrics","2ef9be60":"MAE_Poly=metrics.mean_absolute_error(y_test,y_pred)\nMSE_Poly=metrics.mean_squared_error(y_test,y_pred)\nRMSE_Poly=np.sqrt(MSE_Poly)\n\npd.DataFrame([MAE_Poly,MSE_Poly,RMSE_Poly],index=['MAE','MSE','RMSE'],columns=['Metrics'])","c2152f21":"XS_train, XS_test, ys_train, ys_test = train_test_split(X, y, test_size=0.3, random_state=101)\nsimplemodel=LinearRegression()\nsimplemodel.fit(XS_train, ys_train)\nys_pred=simplemodel.predict(XS_test)\n\nMAE_simple = metrics.mean_absolute_error(ys_test,ys_pred)\nMSE_simple = metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_simple = np.sqrt(MSE_simple)","b13ec6d8":"pd.DataFrame({'Poly Metrics': [MAE_Poly, MSE_Poly, RMSE_Poly], 'Simple Metrics':[MAE_simple, MSE_simple, RMSE_simple]}, index=['MAE', 'MSE', 'RMSE'])","f0e52888":"# Train List of RMSE per degree\ntrain_RMSE_list=[]\n#Test List of RMSE per degree\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    \n    #Preprocessing\n    #create poly data set for degree (d)\n    polynomial_converter= PolynomialFeatures(degree=d, include_bias=False)\n    poly_features= polynomial_converter.fit(X)\n    poly_features= polynomial_converter.transform(X)\n    \n    #Split the dataset\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #Train the Model\n    polymodel=LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #Predicting on both Train & Test Data\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    #Evaluating the Model\n    \n    #RMSE of Train set\n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    \n    #RMSE of Test Set\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append the RMSE to the Train and Test List\n    \n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)","b94f6216":"train_RMSE_list","e74671b8":"test_RMSE_list","d6733caf":"plt.plot(range(1,6), train_RMSE_list[:5], label='Train RMSE')\nplt.plot(range(1,6), test_RMSE_list[:5], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","0c545a6b":"### Dataset Information","ab289fe2":"## Data Preprocessing","efed701a":"Here:\n\n  **\ud835\udf030** is the bias,\n\n   **\ud835\udf031, \ud835\udf032, \u2026, \ud835\udf03n** are the weights in the equation of the polynomial regression,\n\n   and **n** is the degree of the polynomial\n\nThe number of higher-order terms increases with the increasing value of **n**, and hence the equation becomes more complicated.","2efa28c8":"### Compare to the simple linear regression","126de166":"#### Generate polynomial and interaction features.","883d1db5":"**It seems degree 2 is the best choice for model.**","55bc2d6f":"### Import libraries\n","f935a44d":"## Polynomial Regression\n\nPolynomial regression is a special case of linear regression where we fit a polynomial equation on the data with a curvilinear relationship between the target variable and the independent variables.\n\nIn a curvilinear relationship, the value of the target variable changes in a non-uniform manner with respect to the predictor (s).\n\nIn Linear Regression, with a single predictor, we have the following equation:\n\n$$ Y=\ud835\udf03_0+\ud835\udf03_1x $$\nwhere,\n\n   **Y** is the target,\n\n   **x** is the predictor,\n\n   **\ud835\udf030** is the bias,\n\n   and **\ud835\udf031** is the weight in the regression equation\n\nThis linear equation can be used to represent a linear relationship. But, in polynomial regression, we have a polynomial equation of degree n represented as:\n$$ Y=\ud835\udf03_0+\ud835\udf03_1x+\ud835\udf03_2x^2+\ud835\udf03_3x^3+...+\ud835\udf03_nx^n $$","c43de467":"**I previously write a notebook for using simple Linear Regression on real-estate that you can check [ [HERE](https:\/\/www.kaggle.com\/zahrajai\/linear-regression-real-estate) ].**","3535d0aa":"### Determine the Features & Target Variable","807bc84e":"## Linear Regression Model\n### Train the Model","2bbe793b":"### Predicting Test Data","62ce8bad":"### Load Dataset","9f0a54b8":"### Evaluating the Model","486e18b9":"#### Train - Test Split"}}