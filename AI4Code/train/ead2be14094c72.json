{"cell_type":{"6016a305":"code","277bdd39":"code","9b926635":"code","b5cc6e4d":"code","c87bf8a2":"code","d135237c":"code","81797661":"code","d4697b17":"code","ab12a304":"code","8e38ec75":"code","b5e58c02":"code","d73e7445":"code","fa2dfeec":"code","d0709d62":"code","15854a85":"code","f61472fc":"code","f83175e5":"code","976e0f52":"code","7e3efcec":"code","51bb1542":"code","82cbaeec":"code","5e0cd3a3":"code","53bcfb3f":"code","f642240c":"code","2ac2a113":"code","cdf138cd":"code","5f87b055":"code","637a2f8a":"code","d4ae065c":"code","4ae73e11":"code","3f27750c":"code","2ef07514":"code","6aa1ea4e":"code","4c1f14bc":"code","c8430ec3":"code","f0819600":"code","174b5c83":"markdown","84a3c7d8":"markdown","b581c290":"markdown","0de4484d":"markdown","c5ec032c":"markdown","09e77f21":"markdown","59392292":"markdown","8ee5c080":"markdown","b0627358":"markdown","35c429cc":"markdown","89af6d2c":"markdown","61181126":"markdown","77e531f8":"markdown","49667358":"markdown","7fe713e2":"markdown","db1bdbb0":"markdown","a7ef1924":"markdown","416f1208":"markdown","b8982749":"markdown","c867869b":"markdown","b7de25d6":"markdown","d7b800a5":"markdown","57d3ae24":"markdown","0e6e1840":"markdown","4f6d0b21":"markdown","8065f052":"markdown","83b36817":"markdown","97ab0862":"markdown","4dacb0cd":"markdown","9736a649":"markdown","e62863a5":"markdown","253703a6":"markdown","89d2505b":"markdown","2f8f8979":"markdown","de42cb3c":"markdown","f09ea432":"markdown"},"source":{"6016a305":"# Standard imports \n\nfrom bokeh.io import output_notebook, show\noutput_notebook()","277bdd39":"# Plot a complex chart with interactive hover in a few lines of code\n\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg_clean as df\nfrom bokeh.transform import factor_cmap\n\ndf.cyl = df.cyl.astype(str)\ndf.yr = df.yr.astype(str)\n\ngroup = df.groupby(by=['cyl', 'mfr'])\nsource = ColumnDataSource(group)\n\np = figure(plot_width=800, plot_height=300, title=\"Mean MPG by # Cylinders and Manufacturer\",\n           x_range=group, toolbar_location=None, tools=\"\")\n\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Manufacturer grouped by # Cylinders\"\np.xaxis.major_label_orientation = 1.2\n\nindex_cmap = factor_cmap('cyl_mfr', palette=['#2b83ba', '#abdda4', '#ffffbf', '#fdae61', '#d7191c'], \n                         factors=sorted(df.cyl.unique()), end=1)\n\np.vbar(x='cyl_mfr', top='mpg_mean', width=1, source=source,\n       line_color=\"white\", fill_color=index_cmap, \n       hover_line_color=\"darkgrey\", hover_fill_color=index_cmap)\n\np.add_tools(HoverTool(tooltips=[(\"MPG\", \"@mpg_mean\"), (\"Cyl, Mfr\", \"@cyl_mfr\")]))\n\nshow(p)","9b926635":"# Create and deploy interactive data applications\n\nfrom IPython.display import IFrame\nIFrame('https:\/\/demo.bokeh.org\/sliders', width=900, height=500)","b5cc6e4d":"from IPython import __version__ as ipython_version\nfrom pandas import __version__ as pandas_version\nfrom bokeh import __version__ as bokeh_version\nprint(\"IPython - %s\" % ipython_version)\nprint(\"Pandas - %s\" % pandas_version)\nprint(\"Bokeh - %s\" % bokeh_version)","c87bf8a2":"import numpy as np # we will use this later, so import it now\n\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure","d135237c":"output_notebook()","81797661":"import bokeh.sampledata\nbokeh.sampledata.download()","d4697b17":"# create a new plot with default tools, using figure\np = figure(plot_width=400, plot_height=400)\n\n# add a circle renderer with x and y coordinates, size, color, and alpha\np.circle([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], size=15, line_color=\"navy\", fill_color=\"orange\", fill_alpha=0.5)\n\nshow(p) # show the results","ab12a304":"# create a new plot using figure\np = figure(plot_width=400, plot_height=400)\n\n# add a square renderer with a size, color, alpha, and sizes\np.square([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], size=[10, 15, 20, 25, 30], color=\"firebrick\", alpha=0.6)\n\nshow(p) # show the results","8e38ec75":"# create a new plot (with a title) using figure\np = figure(plot_width=400, plot_height=400, title=\"My Line Plot\")\n\n# add a line renderer\np.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2)\n\nshow(p) # show the results","b5e58c02":"from bokeh.sampledata.glucose import data\ndata.head()","d73e7445":"# reduce data size to one week\nweek = data.loc['2010-10-01':'2010-10-08']\n\np = figure(x_axis_type=\"datetime\", title=\"Glocose Range\", plot_height=350, plot_width=800)\np.xgrid.grid_line_color=None\np.ygrid.grid_line_alpha=0.5\np.xaxis.axis_label = 'Time'\np.yaxis.axis_label = 'Value'\n\np.line(week.index, week.glucose)\n\nshow(p)","fa2dfeec":"# EXERCISE: Look at the AAPL data from bokeh.sampledata.stocks and create a line plot using it\nfrom bokeh.sampledata.stocks import AAPL\n\n# AAPL.keys()\n# dict_keys(['date', 'open', 'high', 'low', 'close', 'volume', 'adj_close'])\n\ndates = np.array(AAPL['date'], dtype=np.datetime64) # convert date strings to real datetimes\n\n","d0709d62":"from bokeh.palettes import Viridis256\nfrom bokeh.util.hex import hexbin\n\nn = 50000\nx = np.random.standard_normal(n)\ny = np.random.standard_normal(n)\n\nbins = hexbin(x, y, 0.1)\n\n# color map the bins by hand, will see how to use linear_cmap later\ncolor = [Viridis256[int(i)] for i in bins.counts\/max(bins.counts)*255]\n\n# match_aspect ensures neither dimension is squished, regardless of the plot size\np = figure(tools=\"wheel_zoom,reset\", match_aspect=True, background_fill_color='#440154')\np.grid.visible = False\n\np.hex_tile(bins.q, bins.r, size=0.1, line_color=None, fill_color=color)\n\nshow(p)","15854a85":"N = 500\nx = np.linspace(0, 10, N)\ny = np.linspace(0, 10, N)\nxx, yy = np.meshgrid(x, y)\n\nimg = np.sin(xx)*np.cos(yy)\n\np = figure(x_range=(0, 10), y_range=(0, 10))\n\n# must give a vector of image data for image parameter\np.image(image=[img], x=0, y=0, dw=10, dh=10, palette=\"Spectral11\")\n\nshow(p)  ","f61472fc":"from __future__ import division\nimport numpy as np\n \nN = 20\nimg = np.empty((N,N), dtype=np.uint32) \n\n# use an array view to set each RGBA channel individiually\nview = img.view(dtype=np.uint8).reshape((N, N, 4))\nfor i in range(N):\n    for j in range(N):\n        view[i, j, 0] = int(i\/N*255) # red\n        view[i, j, 1] = 158          # green\n        view[i, j, 2] = int(j\/N*255) # blue\n        view[i, j, 3] = 255          # alpha\n        \n# create a new plot (with a fixed range) using figure\np = figure(x_range=[0,10], y_range=[0,10])\n\n# add an RGBA image renderer\np.image_rgba(image=[img], x=[0], y=[0], dw=[10], dh=[10])\n\nshow(p) ","f83175e5":"# set up some data\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 8, 7, 3]\n\n# create a new plot with figure\np = figure(plot_width=400, plot_height=400)\n\n# add both a line and circles on the same plot\np.line(x, y, line_width=2)\np.circle(x, y, fill_color=\"white\", size=8)\n\nshow(p) # show the results","976e0f52":"# create a new plot with a title\np = figure(plot_width=400, plot_height=400)\np.outline_line_width = 7\np.outline_line_alpha = 0.3\np.outline_line_color = \"navy\"\n\np.circle([1,2,3,4,5], [2,5,8,2,7], size=10)\n\nshow(p)","7e3efcec":"p = figure(plot_width=400, plot_height=400)\n\n# keep a reference to the returned GlyphRenderer\nr = p.circle([1,2,3,4,5], [2,5,8,2,7])\n\nr.glyph.size = 50\nr.glyph.fill_alpha = 0.2\nr.glyph.line_color = \"firebrick\"\nr.glyph.line_dash = [5, 1]\nr.glyph.line_width = 2\n\nshow(p)","51bb1542":"p = figure(plot_width=400, plot_height=400, tools=\"tap\", title=\"Select a circle\")\nrenderer = p.circle([1, 2, 3, 4, 5], [2, 5, 8, 2, 7], size=50,\n\n                    # set visual properties for selected glyphs\n                    selection_color=\"firebrick\",\n\n                    # set visual properties for non-selected glyphs\n                    nonselection_fill_alpha=0.2,\n                    nonselection_fill_color=\"grey\",\n                    nonselection_line_color=\"firebrick\",\n                    nonselection_line_alpha=1.0)\n\nshow(p)","82cbaeec":"from bokeh.models.tools import HoverTool\nfrom bokeh.sampledata.glucose import data\n\nsubset = data.loc['2010-10-06']\n\nx, y = subset.index.to_series(), subset['glucose']\n\n# Basic plot setup\np = figure(width=600, height=300, x_axis_type=\"datetime\", title='Hover over points')\n\np.line(x, y, line_dash=\"4 4\", line_width=1, color='gray')\n\ncr = p.circle(x, y, size=20,\n              fill_color=\"grey\", hover_fill_color=\"firebrick\",\n              fill_alpha=0.05, hover_alpha=0.3,\n              line_color=None, hover_line_color=\"white\")\n\np.add_tools(HoverTool(tooltips=None, renderers=[cr], mode='hline'))\n\nshow(p)","5e0cd3a3":"from math import pi\n\np = figure(plot_width=400, plot_height=400)\np.x([1,2,3,4,5], [2,5,8,2,7], size=10, line_width=2)\n\np.xaxis.major_label_orientation = pi\/4\np.yaxis.major_label_orientation = \"vertical\"\n\nshow(p)","53bcfb3f":"p = figure(plot_width=400, plot_height=400)\np.asterisk([1,2,3,4,5], [2,5,8,2,7], size=12, color=\"olive\")\n\n# change just some things about the x-axes\np.xaxis.axis_label = \"Temp\"\np.xaxis.axis_line_width = 3\np.xaxis.axis_line_color = \"red\"\n\n# change just some things about the y-axes\np.yaxis.axis_label = \"Pressure\"\np.yaxis.major_label_text_color = \"orange\"\np.yaxis.major_label_orientation = \"vertical\"\n\n# change things on all axes\np.axis.minor_tick_in = -3\np.axis.minor_tick_out = 6\n\nshow(p)","f642240c":"from math import pi\nfrom bokeh.sampledata.glucose import data\n\nweek = data.loc['2010-10-01':'2010-10-08']\n\np = figure(x_axis_type=\"datetime\", title=\"Glocose Range\", plot_height=350, plot_width=800)\np.xaxis.formatter.days = '%m\/%d\/%Y'\np.xaxis.major_label_orientation = pi\/3\n\np.line(week.index, week.glucose)\n\nshow(p)","2ac2a113":"from bokeh.models import NumeralTickFormatter\n\np = figure(plot_height=300, plot_width=800)\np.circle([1,2,3,4,5], [2,5,8,2,7], size=10)\n\np.xaxis.formatter = NumeralTickFormatter(format=\"0.0%\")\np.yaxis.formatter = NumeralTickFormatter(format=\"$0.00\")\n\nshow(p)","cdf138cd":"p = figure(plot_width=400, plot_height=400)\np.circle([1,2,3,4,5], [2,5,8,2,7], size=10)\n\n# change just some things about the x-grid\np.xgrid.grid_line_color = None\n\n# change just some things about the y-grid\np.ygrid.grid_line_alpha = 0.5\np.ygrid.grid_line_dash = [6, 4]\n\nshow(p)","5f87b055":"p = figure(plot_width=400, plot_height=400)\np.circle([1,2,3,4,5], [2,5,8,2,7], size=10)\n\n# change just some things about the x-grid\np.xgrid.grid_line_color = None\n\n# change just some things about the y-grid\np.ygrid.band_fill_alpha = 0.1\np.ygrid.band_fill_color = \"navy\"\n\nshow(p)","637a2f8a":"from bokeh.models import ColumnDataSource","d4ae065c":"source = ColumnDataSource(data={\n    'x' : [1, 2, 3, 4, 5],\n    'y' : [3, 7, 8, 5, 1],\n})","4ae73e11":"p = figure(plot_width=400, plot_height=400)\np.circle('x', 'y', size=20, source=source)\nshow(p)","3f27750c":"from bokeh.sampledata.iris import flowers as df\n\nsource = ColumnDataSource(df)","2ef07514":"p = figure(plot_width=400, plot_height=400)\np.circle('petal_length', 'petal_width', source=source)\nshow(p)","6aa1ea4e":"# Exercise: create a column data source with the autompg sample data frame and plot it\n\nfrom bokeh.sampledata.autompg import autompg_clean as df\n","4c1f14bc":"from bokeh.sampledata.iris import flowers as df\n\np = figure(plot_width=400, plot_height=400)\np.circle('petal_length', 'petal_width', source=df)\nshow(p)","c8430ec3":"from math import pi\nimport pandas as pd\nfrom bokeh.palettes import Category20c\nfrom bokeh.transform import cumsum\n\nx = { 'United States': 157, 'United Kingdom': 93, 'Japan': 89, 'China': 63,\n      'Germany': 44, 'India': 42, 'Italy': 40, 'Australia': 35, 'Brazil': 32,\n      'France': 31, 'Taiwan': 31, 'Spain': 29 }\n\ndata = pd.Series(x).reset_index(name='value').rename(columns={'index':'country'})\ndata['color'] = Category20c[len(x)]\n\n# represent each value as an angle = value \/ total * 2pi\ndata['angle'] = data['value']\/data['value'].sum() * 2*pi\n\np = figure(plot_height=350, title=\"Pie Chart\", toolbar_location=None,\n           tools=\"hover\", tooltips=\"@country: @value\")\n\np.wedge(x=0, y=1, radius=0.4, \n        \n        # use cumsum to cumulatively sum the values for start and end angles\n        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),\n        line_color=\"white\", fill_color='color', legend_field='country', source=data)\n\np.axis.axis_label=None\np.axis.visible=False\np.grid.grid_line_color = None\n\nshow(p)","f0819600":"from bokeh.transform import linear_cmap\n\nN = 4000\ndata = dict(x=np.random.random(size=N) * 100,\n            y=np.random.random(size=N) * 100,\n            r=np.random.random(size=N) * 1.5)\n\np = figure()\n\np.circle('x', 'y', radius='r', source=data, fill_alpha=0.6,\n        \n         # color map based on the x-coordinate\n         color=linear_cmap('x', 'Viridis256', 0, 100))\n\nshow(p) ","174b5c83":"# Line Plots\n\nAnother common visualization task is the drawing of line plots. This can be accomplished in Bokeh by calling the `p.line(...)` glyph method as shown below.","84a3c7d8":"The `ColumnDataSource` is a mapping of column names (strings) to sequences of values. Here is a simple example. The mapping is provided by passing a Python `dict` with string keys and simple Python lists as values. The values could also be NumPy arrays, or Pandas sequences.\n\n***NOTE: ALL the columns in a `ColumnDataSource` must always be the SAME length.***\n","b581c290":"# Glyphs\n\nIt's also possible to style the visual properties of glyphs (see the [Glyphs](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/styling.html#glyphs) section of the styling guide for more information). When using `bokeh.plotting` this is often done when calling the glyph methods:\n```python\np.circle(line_color=\"red\", fill_alpha=0.2, ...)\n```\nBut it is also possible to set these properties directly on glyph objects. Glyph objects are found on `GlyphRenderer` objects, which are returned by the `Plot.add_glyph` and `bokeh.plotting` glyph methods like `circle`, `rect`, etc. Let's look at an example:","0de4484d":"### <a id=\"8\"><\/a> <b style=\"color:blue\"> Graph and Network Plots <\/b>","c5ec032c":"## Creating with Pandas DataFrames\n\nIt's also simple to create `ColumnDataSource` objects directly from Pandas data frames. To do this, just pass the data frame to  `ColumnDataSource` when you create it:","09e77f21":"### <a id=\"4\"><\/a> <b style=\"color:blue\"> Adding Annotations <\/b>\n","59392292":"It is also possible to specify the visual appearance of glyphs when they are \"inspected\", e.g. by a hover tool. This is accomplished by setting an optional `hover_glyph` on the glyph renderer:\n```python\nr.hover_glyph = Circle(fill_alpha=1, fill_color=\"firebrick\", line_color=None) \n```\nOr if using `bokeh.plotting` glyph methods, by passing `hover_fill_alpha`, etc. to the glyph method. Lets look at an example that works together with a `HoverTool` configured for \"hline\" hit-testing.","8ee5c080":"### Selection and non-selection visuals\n\nYou can also control how glyphs look when there are selections involved. The set of \"selected\" points is displayed according to the optional `.selection_glyph` property of a `GlyphRenderer`:\n```python\nr.selection_glyph = Circle(fill_alpha=1, fill_color=\"firebrick\", line_color=None) \n```\nWhen there is a non-empty selection, the set of \"unselected\" points is displayed according to the optional `.nonselection_glyph` property of a `GlyphRenderer`:\n```python\nr.nonselection_glyph = Circle(fill_alpha=0.2, fill_color=\"grey\", line_color=None) \n```\n\nWhen using the `bokeh.plotting` interface, it is easier to pass these visual properties to the glyph methods as shown below. The glyph method will create the selection or nonselection glyphs and attach them to the renderer for you. ","b0627358":"### <a id=\"2\"><\/a> <b style=\"color:blue\"> Styling and Theming <\/b>","35c429cc":"### Datetime axes\n\nIt's often the case that timeseries data is represented by drawing lines. Let's look at an example using the \"glucose\" data set, which is available in a Pandas dataframe:","89af6d2c":"## Configuring tick labels\n\nAll Bokeh axes have a `formatter` property, whose value is a `TickFormatter` object that Bokeh uses to format the ticks displayed by that axis. Bokeh will configure default tick formatters for numeric, datetime, or categotical axes. But often we would like to customize the appearance of tick labels. This can be accomplished by changing properties on the default formatter that Bokeh chooses, or by replacing the formatter with a new type entirely. \n\nLet's first look at changing the properties of a default formatter. The default datetime formatter is configured to show *month\/day* when the axis is on the scale of days. If would like the also always show the year, we can change the `days` property to a format that includes the year, as done below. ","61181126":"## Transformations\n\nIn addition to being configured with names of columns from data sources, glyph properties may also be configured with transform objects that represent transformations of columns. These live in the `bokeh.transform` module. It is important to note that when doing using these objects, the tranformations occur *in the browser, not in Python*. \n\nThe first transform we look at is the `cumsum` transform, which can generate a new sequence of values from a data source column by cumulatively summing the values in the column. This can be usefull for pie or donut type charts as seen below.","77e531f8":"### <a id=\"3\"><\/a> <b style=\"color:blue\"> Data Sources and Transformations <\/b>\n","49667358":"### <a id=\"9\"><\/a> <b style=\"color:blue\"> Geographic Plots <\/b>","7fe713e2":"# Hex Tiling\n\nBokeh supports drawing low level hex tilings using [axial coordinates](https:\/\/www.redblobgames.com\/grids\/hexagons\/#coordinates-axial) and the `hex_tile` method, as described in the [Hex Tiles](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/plotting.html#hex-tiles) section of the User's Guide.  However, one of the most common uses of hex tilings is to visualize binning. Bokeh encapsulates this common operation in the `hexbin` function, whose output can be passed directly to `hex_tile` as seen below.","db1bdbb0":"Up until now we have called functions like `p.circle` by passing in literal lists or arrays of data directly, when we do this, Bokeh creates a `ColumnDataSource` for us, automatically. But it is possible to specify a `ColumnDataSource` explicitly by passing it as the `source` argument to a glyph method. Whenever we do this, if we want a property (like `\"x\"` or `\"y\"` or `\"fill_color\"`) to have a sequence of values, we pass the ***name of the column*** that we would like to use for a property:","a7ef1924":"# Other Kinds of Glyphs\n\nBokeh supports many other kinds of glyphs. You can click on the User Guide links below to see how to create plots with these glyphs using the [`bokeh.plotting`](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/plotting.html) interface.\n\n* [Ovals and Ellipses](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/plotting.html#ovals-and-ellipses)\n* [Segments and Rays](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/plotting.html#segments-and-rays)\n* [Wedges and Arcs](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/plotting.html#wedges-and-arcs)\n* [Specialized Curves](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/plotting.html#specialized-curves)\n\nWe will cover various kinds of Bar plots (e.g. with stacking and grouping) using [Bars and Rectangles](https:\/\/docs.bokeh.org\/en\/latest\/docs\/user_guide\/plotting.html#bars-and-rectangles) much more extensively in the [Bar and Categorical Data Plots](07%20-%20Bar%20and%20Categorical%20Data%20Plots.ipynb) chapter of this tutorial.","416f1208":"Try experimenting with the format argument and re-execute the cell above.\n\nThere are many other possibilities for controlling tick formatting, including the possibility of supplying a JavaScript snippet to perform arbitrary formatting in the browser. See the [Tick Label Formats](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#tick-label-formats) for more details.  \n\n\nIt is also possible to customize *where* ticks will be drawn. See the [Tick Locations](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#tick-locations) section of the User's Guide for more information.","b8982749":"## Axis properties\n\nAxes objects have many configurable properties that afford control over most visual aspects of an axis. These can be grouped by function according to prefix:\n\n* **axis**  [line properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#line-properties) e.g `axis_line_width`\n\n* **axis_label** [text properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#text-properties)  e.g. `axis_label_text_color`, as well as ``axis_label_standoff``\n\n* **major_label** [text properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#text-properties) e.g. `major_label_text_font_size`, as well as ``major_label_orientation``\n\n* **major_tick** [line_properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#line-properties) e.g. `major_tick_line_dash`, as well as  ``major_tick_in`` and ``major_tick_out``\n\n* **minor_tick** [line properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#line-properties) e.g. `minor_tick_line_width`, as well as ``minor_tick_in`` and ``minor_tick_out``\n\nAs a simple first case, let's change the orientation of the major tick labels on both axes of a plot:","c867869b":"# Grids\n\nIt is also possible to control the [styling of Grids](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#grids)\n\nGrids properties in Bokeh have two possible prefixes:\n\n* **grid** properties (which are [line properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#line-properties)) control the \"grid lines\"\n* **band** properties (which are [fill properties](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#fill-properties)) control shaded bands between grid lines\n\nIn this first example we turn off the vertical grid lines (by setting the line color to None) and set the horizontal grid to be light and dashed.","b7de25d6":"# Axes\n\nNext we will take a look at [stlying of Axes](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#axes).\n\nTo style axes, you first must get ahold of `Axis` objects. The simplest way is to use some convenience methods on `Plot`: `axis`, `xaxis`, and `yaxis`. These methods return lists of axis objects:\n\n```\n>>> p.xaxis\n[<bokeh.models.axes.LinearAxis at 0x106fa2390>]\n```\nHowever, you can set properties on all the elements of the list as if it was a single object:\n```\np.xaxis.axis_label = \"Temperature\"\np.axis.major_label_text_color = \"orange\"\n```\nThese are referred to as \"splattable\" lists, and tab completion works on them as well. \n","d7b800a5":"* [1. Basic Plotting](#1)\n* [2. Styling and Theming](#2)\n* [3. Data Sources and Transformations](#3)\n* [4. Adding Annotations](#4)\n* [5. Presentation and Layouts](#5)\n* [6. Linking and Interactions](#6)\n* [7. Bar and Categorical Data Plots](#7)\n* [8. Graph and Network Plots](#8)\n* [9. Geographic Plots](#9)\n* [10. Exporting and Embedding](#10)\n* [11. Running Bokeh Applications](#11)","57d3ae24":"### <a id=\"10\"><\/a> <b style=\"color:blue\"> Exporting and Embedding <\/b>","0e6e1840":"### <a id=\"10\"><\/a> <b style=\"color:blue\"> Running Bokeh Applications <\/b>","4f6d0b21":"## Automatic Conversion\n\nIf you do not need to share data sources, it may be convenient to pass dicts, Pandas `DataFrame` or `GroupBy` objects directly to glhyph methods, without explicitly creating a `ColumnDataSource`. In this case, a `ColumnDataSource` will be created automatically.","8065f052":"# <a id=\"1\"><\/a> <b style=\"color:blue\"> Basic Plotting <\/b>","83b36817":"# Scatter Plots\n\nBokeh can draw many types of visual shapes (called *glyphs*), including lines, bars, patches, hex tiles and more. One of the most common visualization tasks is to draw a scatter plot of data using small *marker* glyphs to represent each point. \n\nIn this section you will see how to use Bokeh's various marker glyphs to create simple scatter plots. \n\nThe basic outline is:\n* create a blank figure: `p = figure(...)`\n* call a glyph method such as `p.circle` on the figure\n* `show` the figure\n\nExecute the cell below to create a small scatter plot with circle glyphs:","97ab0862":"A palette can be any list of colors, or one of the named built-in palettes, which can be seen in the [bokeh.palettes reference guide](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/palettes.html). Try changing the palette, or the array data and re-running the cell above.\n\nThe next example shows how to use the `image_rgba` method to display raw RGBA data (created with help from NumPy). ","4dacb0cd":"### <a id=\"5\"><\/a> <b style=\"color:blue\"> Presentation and Layouts <\/b>","9736a649":"# Table of Content","e62863a5":"### <a id=\"7\"><\/a> <b style=\"color:blue\"> Bar and Categorical Data Plots <\/b>","253703a6":"## What is Bokeh\n\nBokeh is an interactive visualization library that targets modern web browsers for presentation. It is good for:\n\n* Interactive visualization in modern browsers\n* Standalone HTML documents, or server-backed apps\n* Expressive and versatile graphics\n* Large, dynamic or streaming data\n* Easy usage from python (or Scala, or R, or...)\n\nAnd most importantly:\n\n## <center><i>NO JAVASCRIPT REQUIRED<\/i><\/center>\n\nBokeh is an interactive visualization library for modern web browsers. It provides elegant, concise construction of versatile graphics, and affords high-performance interactivity over large or streaming datasets. Bokeh can help anyone who would like to quickly and easily make interactive plots, dashboards, and data applications.","89d2505b":"# Plots\n\nMany top-level attributes of plots (outline, border, etc.) can be configured. See the [Plots](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/styling.html#plots) section of the styling guide for full information. \n\nHere is an example that tweaks the plot outline:","2f8f8979":"Note that in the example above, we are also specifying different sizes for each individual marker. **In general, all of a glyph's properties can be \"vectorized\" in this fashion.**  Also note that we have passed ``color`` as a shorthand to set both the line and fill colors easily at the same time. This is a convenience specific to ``bokeh.plotting``.\n\nThere are many marker types available in Bokeh, you can see details and\nexample plots for all of them in the reference guide by clicking on entries in the list below:\n\n* [asterisk()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.asterisk)\n* [circle()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.circle)\n* [circle_cross()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.circle_cross)\n* [circle_x()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.circle_x)\n* [cross()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.cross)\n* [diamond()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.diamond)\n* [diamond_cross()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.diamond_cross)\n* [hex()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.hex)\n* [inverted_triangle()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.inverted_triangle)\n* [square()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.square)\n* [square_cross()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.square_cross)\n* [square_x()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.square_x)\n* [triangle()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.triangle)\n* [x()](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/plotting.html#bokeh.plotting.figure.Figure.x)","de42cb3c":"# Images\n\nAnother common task is to display images, which might represent heat maps, or sensor data of some sort. Bokeh provides two glyph methods for displaying images:\n\n* `image` which can be used, together with a palette, to show colormapped 2d data in a plot\n* `image_rgba` which can be used to display raw RGBA pixel data in a plot. \n\nThe first example below shows how to call `image` with a 2d array and a palette","f09ea432":"### <a id=\"6\"><\/a> <b style=\"color:blue\"> Linking and Interactions <\/b>"}}