{"cell_type":{"f333c11d":"code","ce275e95":"code","152fd9d8":"code","bcb6e85b":"code","27dc233b":"code","1bd97fda":"code","684e1c5a":"code","37b135bd":"code","a70fca92":"code","1dced0fb":"code","a5df67ca":"code","08ef6a3a":"code","96662344":"code","7e227d53":"code","689f3492":"code","3590ce39":"code","a5a71ab2":"code","4a01a2e1":"code","13633d7e":"code","a423ff9f":"code","c815a064":"code","450d5c99":"code","c3ffd1c7":"code","4d1da176":"code","55cd4415":"code","e0c455f8":"code","69a3ed81":"markdown"},"source":{"f333c11d":"import numpy as np\nimport pandas as pd\nfrom PIL import Image, ImageEnhance, ImageOps\nimport matplotlib.pyplot as plt\nimport random\nfrom scipy import stats\nimport os\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LogisticRegression","ce275e95":"image_path = '..\/input\/i2a2-bone-age-regression\/images\/'","152fd9d8":"test_df = pd.read_csv('..\/input\/i2a2-bone-age-regression\/test.csv')","bcb6e85b":"image_name = test_df['fileName'][random.randint(0,test_df.shape[0])]\nprint(image_name)","27dc233b":"im = Image.open(os.path.join(image_path,image_name))\nprint(im.format, im.size, im.mode)\nplt.imshow(im)","1bd97fda":"im_arr = np.asarray(im)\nstatsval = stats.describe(np.ndarray.flatten(im_arr[0:10]))\nprint(statsval)","684e1c5a":"im_enh = ImageEnhance.Contrast(im)\nim_enh = im_enh.enhance(10)\nplt.imshow(im_enh)","37b135bd":"im_enh_bw = im_enh.convert('1')\nplt.imshow(im_enh_bw)","a70fca92":"im_enh_bw_flip = ImageOps.flip(im_enh_bw)\nplt.imshow(im_enh_bw_flip)","1dced0fb":"im_arr = np.asarray(im_enh_bw_flip, dtype=int)\nprint(im_arr)","a5df67ca":"im_arr.shape","08ef6a3a":"im_cont_x = []\nim_cont_y = []\nfor i in (range(0, im_arr.shape[0])):\n    for j in (range(0, im_arr.shape[1])):\n        if im_arr[i][j] > 0:\n            #line = 0\n            im_cont_y.append(i)\n            im_cont_x.append(j)","96662344":"plt.scatter(im_cont_x,im_cont_y)","7e227d53":"im_cont_x_arr = np.asarray(im_cont_x)\nim_cont_y_arr = np.asarray(im_cont_y)\nim_cont_arr = np.stack((im_cont_x_arr, im_cont_y_arr),axis=1)\nprint(im_cont_arr.shape)","689f3492":"kmeans = KMeans(n_clusters=2, random_state=0).fit(im_cont_arr)\nlabels = kmeans.labels_\n\nprint(labels.shape)","3590ce39":"print(labels)","a5a71ab2":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n \nax.scatter(im_cont_x_arr, im_cont_y_arr,  c=labels, alpha=0.3, edgecolors='none')\nax.legend()\nax.grid(True)\n\nplt.show()","4a01a2e1":"clf = LogisticRegression(random_state=0).fit(im_cont_arr, labels)\nclf.predict(im_cont_arr)\n\nprint(clf.coef_)\nprint(clf.intercept_)","13633d7e":"grafico_a = []\ngrafico_b = []\nfor a in range(0,im_arr.shape[1]):\n    b = (-clf.intercept_-clf.coef_[0][0]*a)\/clf.coef_[0][1]\n    if (b >= 0) and (b <= im_arr.shape[0]): \n        grafico_a.append(a)\n        grafico_b.append(int(b))","a423ff9f":"plot, ax = plt.subplots()\n\n    \nax.scatter(im_cont_x_arr, im_cont_y_arr,  c=labels, alpha=0.3, edgecolors='none')\n\n\nax.grid(True)\n\n\nax.plot(grafico_a,grafico_b)\n\nplt.show()","c815a064":"plot, ax = plt.subplots()\nplt.imshow(ImageOps.flip(im))\nim_arr_crop = np.asarray(im_enh, dtype=int)\nprint(im_arr_crop.shape)","450d5c99":"plot, ax = plt.subplots()\nplt.imshow(ImageOps.flip(im))\ngrafico_a = []\n\ngrafico_b = []\nfor a in range(0,im_arr.shape[1]):\n    b = (-clf.intercept_-clf.coef_[0][0]*a)\/clf.coef_[0][1]\n    if (b >= 0) and (b <= im_arr.shape[0]): \n        grafico_a.append(a)\n        grafico_b.append(int(b))\n\nax.plot(grafico_a,grafico_b)\nplt.show()","c3ffd1c7":"grafico_a_arr = np.asarray(grafico_a)\ngrafico_b_arr = np.asarray(grafico_b)\ngrafico_arr = np.stack((grafico_a_arr, grafico_b_arr),axis=1)","4d1da176":"im_final_1 = np.asarray(ImageOps.flip(im)).copy()\nc=0\nfor i in range(0,grafico_arr.shape[0]):\n    \n    a = grafico_arr[i][0]\n    b = grafico_arr[i][1]  \n    \n    for j in range(c,b):\n        for n in range(0,a):\n            im_temp = im_final_1\n            im_temp[j][n] = random.randint(statsval[1][0],statsval[1][1])\n    c = b","55cd4415":"im_crop = Image.fromarray(im_temp)\nim_crop = im_crop.crop((grafico_a_arr.min(),0,im_arr.shape[0],im_arr.shape[1]))\nplt.imshow(im_crop)","e0c455f8":"im_crop_unflip = ImageOps.flip(im_crop)\nplt.imshow(bbbbbbb)\n","69a3ed81":"Utilizando K-Means para segmentar as imagens.\n\n* Importa a imagem.\n* Aumenta o contrate.\n* Transforma em array\n* Trata o array como se fosse um scatterplot\n* Roda K-means com 2 centroides\n* Como base na clusteriza\u00e7\u00e3o, obt\u00e9m se a *decision boundary*.\n* Aplica a *decision boundary* na array da imagem e exclui uma das m\u00e3os.\n\n\u00c9 a primeira vers\u00e3o. O c\u00f3digo precisa ser limpo e aprimorado. Ainda h\u00e1 a necessidade de identificar as imagens com 1 ou duas m\u00e3os."}}