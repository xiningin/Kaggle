{"cell_type":{"3aaf906f":"code","e8694c61":"code","06b038e6":"code","d94d6e20":"code","92950a6d":"code","28acec11":"code","6d0c406a":"code","c6a7d026":"code","75b23c35":"code","afce123d":"code","f1101bf3":"code","1103d149":"code","e34e2b6c":"code","13082b4c":"code","53e7bdf3":"markdown","4ae18a75":"markdown","8da2786f":"markdown","54a2344c":"markdown","7b38718c":"markdown","a925e181":"markdown","b7dec32c":"markdown","ff532a01":"markdown"},"source":{"3aaf906f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8694c61":"import seaborn as sns\nimport matplotlib as plt\n\ndata = pd.read_csv('..\/input\/predict-test-scores-of-students\/test_scores.csv')\ndata.head()\n\ny = data['posttest']\nX_features = ['school','school_setting','school_type','classroom','teaching_method','n_student','gender','lunch','pretest']\nX = data[X_features]\n","06b038e6":"X.info()","d94d6e20":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n","92950a6d":"from sklearn.preprocessing import LabelEncoder\n\ns = (X_train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\n# Make copy to avoid changing original data \nlabel_X_train = X_train.copy()\nlabel_X_test = X_test.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_X_train[col] = label_encoder.fit_transform(X_train[col])\n    label_X_test[col] = label_encoder.transform(X_test[col])\n","28acec11":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\ndef metrics(y_true, y_preds):#func by Kwadwo Ofosu\n    r2 = r2_score(y_true, y_preds)\n    mae = mean_absolute_error(y_true, y_preds)\n    mse = mean_squared_error(y_true, y_preds)\n    \n    metrics = {'r2_score' : r2,\n               'mean absolute error' : round(mae, 2),\n               'mean_squared error' : round(mse, 2)}\n    \n    print(f'R2_score: {r2 * 100:.2f}%')\n    print(f'MAE: {mae:.2f}')\n    print(f'MSE: {mse:.2f}')\n    \n    return metrics\n","6d0c406a":"heatmap = sns.heatmap(label_X_test.corr()[['pretest']].sort_values(by='pretest', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')\nheatmap.set_title('Features Correlating with Pretest', fontdict={'fontsize':20}, pad=30);\nheatmap.figure.set_size_inches(6, 6)","c6a7d026":"ax = sns.boxplot(data=data, x='school_type', y='pretest', orient='v', width = 0.2)\nax.figure.set_size_inches(12, 6)\nax.set_title(\"Boxplot of Pretest Scores by School type\", fontsize = 20)\nax.set_ylabel(\"Scores\", fontsize = 16)\nax.set_xlabel(\"School\", fontsize = 16)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax","75b23c35":"ax = sns.boxplot(data=data, x='n_student', y='pretest', orient='v', width = 0.2)\nax.figure.set_size_inches(12, 6)\nax.set_title(\"Boxplot of Pretest Scores by School type\", fontsize = 20)\nax.set_ylabel(\"Scores\", fontsize = 16)\nax.set_xlabel(\"School\", fontsize = 16)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax","afce123d":"ax = sns.boxplot(data=data, x='lunch', y='pretest', orient='v', width = 0.2)\nax.figure.set_size_inches(12, 6)\nax.set_title(\"Boxplot of Pretest Scores by School type\", fontsize = 20)\nax.set_ylabel(\"Scores\", fontsize = 16)\nax.set_xlabel(\"School\", fontsize = 16)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax","f1101bf3":"from sklearn.linear_model import LinearRegression \ndef linear_r(X_train,X_test,y_train,y_test):\n\n    linar_reg = LinearRegression()\n    linar_reg.fit(label_X_train,y_train)\n    y_pred=linar_reg.predict(label_X_test)\n    linear_score = metrics(y_test,y_pred)\n    \n    sns.histplot(y_pred)\n    print(metrics(y_pred,y_test))\nlinear_r(label_X_train,label_X_test,y_train,y_test)","1103d149":"from sklearn.linear_model import TweedieRegressor\ndef tweedie_r(X_train,X_test,y_train,y_test):\n    \n    tweedie_reg = TweedieRegressor(power=1, alpha=0.5, link='log')\n    tweedie_reg.fit(X_train, y_train)\n    y_pred = tweedie_reg.predict(X_test)\n    \n    sns.histplot(y_pred)\n    print(metrics(y_pred,y_test))\ntweedie_r(label_X_train,label_X_test,y_train,y_test)","e34e2b6c":"from sklearn.ensemble import RandomForestRegressor\ndef rfr_r(X_train,X_test,y_train,y_test):\n\n    rfr = RandomForestRegressor()\n    rfr.fit(label_X_train,y_train)\n    y_pred = rfr.predict(label_X_test)\n\n    rfr_score = metrics(y_pred,y_test)\n    print(rfr_score)\n    sns.histplot(y_pred)\nrfr_r(label_X_train,label_X_test,y_train,y_test)","13082b4c":"from sklearn.linear_model import Lasso\ndef lasso_r(X_train,X_test,y_train,y_test):\n\n    lass = Lasso()\n    lass.fit(label_X_train,y_train)\n    y_pred = lass.predict(label_X_test)\n\n    rfr_score = metrics(y_pred,y_test)\n    print(rfr_score)\n    sns.histplot(y_pred)\nlasso_r(label_X_train,label_X_test,y_train,y_test)","53e7bdf3":"# **Importing Data**","4ae18a75":"**lunch,n_student,school_tupe have most valuable correlation**","8da2786f":"**We can see that if u need to improove your test score, you need to have:**\n1. **Number of students <23**\n2. **Public school**\n3. **Not-subsidized lunch**","54a2344c":"\n\n# **Check info about data**","7b38718c":"# ****Make heatmap with pretest, because pretest cor with postest +90%****","a925e181":"#                  Check each feature to see relations","b7dec32c":"# Time to make predict model","ff532a01":"**How we can see, data have 7 columns of dtype=object**"}}