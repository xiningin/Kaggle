{"cell_type":{"8d395f59":"code","b23534a6":"code","1c9f5ec3":"code","3f74cf68":"code","f673622f":"code","7d43bb84":"code","10809b1f":"code","5d7ba645":"code","10b1b776":"code","b7053740":"code","e493399e":"markdown","8f1fb823":"markdown","2782aca9":"markdown","45976fc4":"markdown","a382e8e6":"markdown","a74e2ba8":"markdown","ced38abb":"markdown","813efd9b":"markdown","3da5f9f8":"markdown","c715b932":"markdown"},"source":{"8d395f59":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.express as px","b23534a6":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1c9f5ec3":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","3f74cf68":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","f673622f":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","7d43bb84":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# final_cars_datasets.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/final_cars_datasets.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'final_cars_datasets.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","10809b1f":"df1.head(5)","5d7ba645":"plotPerColumnDistribution(df1, 10, 5)","10b1b776":"plotCorrelationMatrix(df1,8)","b7053740":"plotScatterMatrix(df1, 12, 10)","e493399e":"Now you're ready to read in the data and use the plotting functions to visualize the data.","8f1fb823":"Scatter and density plots:","2782aca9":"Let's take a quick look at what the data looks like:","45976fc4":"There is 1 csv file in the current version of the dataset:\n","a382e8e6":"## Introduction\n- This data was gathered by using web scripting as part of the data mining project for General Assembly (Data Science Immersive course)..\n\n- Cars' data included Information about Japan's largest online used car marketplace. Ten features were assembled for each car in the dataset.","a74e2ba8":"Distribution graphs (histogram\/bar graph) of sampled columns:","ced38abb":"## Exploratory Analysis\n","813efd9b":"Correlation matrix:","3da5f9f8":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","c715b932":"### Let's check 1st file: \/kaggle\/input\/final_cars_datasets.csv"}}