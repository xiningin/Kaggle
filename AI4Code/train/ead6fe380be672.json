{"cell_type":{"ef0f6276":"code","492110db":"code","2947d804":"code","c677bbc1":"code","764a23c1":"code","de04f97c":"code","7477df33":"code","ee748d9c":"code","35019c63":"code","fd2e8577":"code","51a272b7":"code","27eee700":"code","540355e2":"code","202b1f5c":"code","5c272949":"code","26cc8008":"code","40aec7e2":"code","fdf23393":"code","38b9b134":"code","cc1b49ea":"code","14e284c1":"code","bf7c04ff":"code","527a5fb0":"code","a1794377":"code","c84b32e5":"code","217db7e7":"code","dcef9ba5":"code","dfc8a747":"code","6cfe7088":"code","d88b59c1":"code","22c3de81":"code","bfe1f737":"code","1f84c9f6":"code","a97788db":"code","a71e9d58":"code","c75bce8d":"code","1828fd11":"code","4ac3d94c":"code","8901ce73":"code","9095069e":"markdown","188838fc":"markdown","766427a4":"markdown"},"source":{"ef0f6276":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","492110db":"os.chdir(\"..\/input\")\nos.listdir()","2947d804":"df=pd.read_csv(\"..\/input\/fetalhr\/CTG.csv\")","c677bbc1":"from warnings import filterwarnings\nfilterwarnings('ignore')\nimport matplotlib.pyplot as plt","764a23c1":"df.head()","de04f97c":"df.info()","7477df33":"# Drop unnecessaries\ndf=df.drop([\"FileName\",\"Date\",\"SegFile\",\"b\",\"e\",\"A\", \"B\",\"C\", \"D\" ,\"E\", \"AD\", \"DE\" ,\"LD\", \"FS\", \"SUSP\"],axis=1)","ee748d9c":"df.head()","35019c63":"# Coloumns names\ndf.columns","fd2e8577":"df.shape","51a272b7":"df.isnull().sum()","27eee700":"# process to delete all nan data\ndf = df.dropna()","540355e2":"df.isnull().sum()","202b1f5c":"df.dtypes","5c272949":"# This dataset can be used for both 10-class classifications and 3-class classifications.\n# Selecting the data to be used for the 3-class model\nX=df.drop([\"NSP\",\"CLASS\"],axis=1)\n\ny=df[\"NSP\"]","26cc8008":"X.head()","40aec7e2":"nsp_classes = y.unique()\nnsp_classes","fdf23393":"from keras import utils as np_utils\nfrom sklearn.preprocessing import LabelEncoder\n# Encode class values as integers and perform one-hot-encoding\nencoder = LabelEncoder()\nencoder.fit(y)\ny = encoder.transform(y)\ny = np_utils.to_categorical(y)\nprint(y)\n\ny.shape","38b9b134":"# Data Standardization with Standard Scaler\nfrom sklearn.preprocessing import StandardScaler\nScaler=StandardScaler()\nX=Scaler.fit_transform(X)\n\nX[0:3]\n\nX.shape","cc1b49ea":"from sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n\n\n\n# Train-Test \nfrom sklearn.model_selection import train_test_split\n# shuffle and split training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                    random_state=0)\n\n\n","14e284c1":"# Weights were given to the classes to correct the class imbalance\nclass_weight = {0: 1, 1: 5.74, 2: 9.4}","bf7c04ff":"def create_model(optimizer=\"adam\"):\n    # create model\n    model = Sequential()\n    model.add(Dense(20, input_dim=23, activation='relu'))\n    \n    model.add(Dense(40, activation='sigmoid'))\n    model.add(Dense(60, activation='relu'))\n\n    \n    model.add(Dense(3, activation='softmax')) # 3 because it is output, the output should be layer 3\n    \n    # Because it is multi-class, activation function 'softmax' should be selected.\n    # Because it is multi class, the loss function is \"categorical_crossentropy\"\n    # Compile model\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer,metrics=[\"accuracy\"])\n    return model\nmodel = create_model() ","527a5fb0":"train=model.fit(X_train, y_train, epochs=100, batch_size=32,class_weight=class_weight, verbose=1,validation_data=(X_test,y_test))","a1794377":"# plot loss during training\nimport matplotlib.pyplot as plt\nplt.plot(train.history['loss'], label='train')\nplt.plot(train.history['val_loss'], label='test')\nplt.title('Model Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss values')\nplt.legend(loc='upper right')\nplt.show()","c84b32e5":"# Untunned Scores of the Model\nimport sklearn.metrics as metrics\ny_pred=model.predict_classes(X_test)\n","217db7e7":"# %%Accuracy\n\nprint(\"Accuracy:\",metrics.accuracy_score(np.argmax(y_test, axis=1),y_pred))\n\n# %%f1 score\n\nprint(\"f1_weighted:\",metrics.f1_score(np.argmax(y_test, axis=1), y_pred,average='weighted'))\n","dcef9ba5":"# Grid Search Cross Validation\n# GridSearch Cross Validation Parameters\nparam_grid = {\n   \n    'epochs': [50,100,150], \n    'batch_size':[32,50,100],\n    'optimizer':['RMSprop', 'Adam','SGD'],\n    \n}\n\n# create model\n\n# Creating Model Object with KerasClassifier\nmodel_cv = KerasClassifier(build_fn=create_model, verbose=1)\n\n\ngrid = GridSearchCV(estimator=model_cv,  \n                    n_jobs=-1, \n                    verbose=1,\n                    cv=5,\n                    param_grid=param_grid)\n\ngrid_cv_model = grid.fit(X_train, y_train,) # Fitting the GridSearch Object on the Train Set\n\n\nmeans = grid_cv_model.cv_results_['mean_test_score'] # Mean of test scores\nstds = grid_cv_model.cv_results_['std_test_score'] # standard deviations of test scores\nparams = grid_cv_model.cv_results_['params'] # parameters used\n# to print all scores, standard deviations and parameters used\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))\n\n# Printing the Best Parameters as a Result of Grid Search Cross Validation on the Screen\nprint(\"Best: %f using %s\" % (grid_cv_model.best_score_, grid_cv_model.best_params_))\n","dfc8a747":"# %% Model Tuning- Building a Tuned Model with Best Parameters\n# Creating Tuned Model Object with KerasClassifier\ncv_model = grid_cv_model.best_estimator_\n ","6cfe7088":"#%% K-FOLD\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n# K-fold accuracy scores\n\nkfold = KFold(n_splits=5, shuffle=True)\nresults = cross_val_score(cv_model, X_test, np.argmax(y_test, axis=1), cv=kfold,scoring= 'accuracy')\n","d88b59c1":"print('K-fold Cross Validation Accuracy Results: ', results)\nprint('K-fold Cross Validation Accuracy Results Mean: ', results.mean())","22c3de81":"# K-fold f1 scores\nfrom sklearn.model_selection import KFold\n\n\nkfold = KFold(n_splits=5, shuffle=True)\nresults = cross_val_score(cv_model, X_test, np.argmax(y_test, axis=1), cv=kfold,scoring=\"f1_weighted\")\n\n","bfe1f737":"print('K-fold Cross Validation f1_weighted Results: ', results)\nprint('K-fold Cross Validation f1_weighted Results Mean: ', results.mean())","1f84c9f6":"# Tuned Model Prediction\n\ny_pred = cv_model.predict(X_test) \n","a97788db":"# %% f1 score\nimport sklearn.metrics as metrics\nprint(\"f1_weighted:\",metrics.f1_score(np.argmax(y_test, axis=1), y_pred,average='weighted'))\n\n\n# %% Accuracy\n\nprint(\"accuracy:\",metrics.accuracy_score(np.argmax(y_test, axis=1), y_pred))","a71e9d58":"#%% Confusion Matrix and Classification Report\nfrom sklearn.metrics import confusion_matrix, classification_report \n\n# Classification Report\nmodel_report = classification_report(np.argmax(y_test, axis=1), y_pred)\nprint(model_report)\n","c75bce8d":"# Confusion Matrix\nmodel_conf = confusion_matrix(np.argmax(y_test, axis=1), y_pred)\nprint(model_conf)","1828fd11":"#%% ROC-AUC Curve\n\ny_score = cv_model.predict_proba(X_test)\n\nfrom scipy import interp\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, auc\n# Learn to predict each class against the other\n\n\nn_classes = 3 # number of class\n\n\n\n\n# Compute ROC curve and ROC area for each class\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(n_classes):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n\n# Compute micro-average ROC curve and ROC area\nfpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_score.ravel())\nroc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])","4ac3d94c":"# The process of drawing a roc-auc curve belonging to a specific class\n\nplt.figure()\nlw = 2 # line_width\nplt.plot(fpr[2], tpr[2], color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[2]) # Drawing Curve according to 2. class \nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC E\u011frisi')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n","8901ce73":"# Process of plotting roc-auc curve belonging to all classes.\n\nfrom itertools import cycle\n\n# First aggregate all false positive rates\nall_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n\n# Then interpolate all ROC curves at this points\nmean_tpr = np.zeros_like(all_fpr)\nfor i in range(n_classes):\n    mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n\n# Finally average it and compute AUC\nmean_tpr \/= n_classes\n\nfpr[\"macro\"] = all_fpr\ntpr[\"macro\"] = mean_tpr\nroc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n\n# Plot all ROC curves\nplt.figure()\nplt.plot(fpr[\"micro\"], tpr[\"micro\"],\n         label='micro-average ROC curve (area = {0:0.2f})'\n               ''.format(roc_auc[\"micro\"]),\n         color='deeppink', linestyle=':', linewidth=4)\n\nplt.plot(fpr[\"macro\"], tpr[\"macro\"],\n         label='macro-average ROC curve (area = {0:0.2f})'\n               ''.format(roc_auc[\"macro\"]),\n         color='navy', linestyle=':', linewidth=4)\n\ncolors = cycle(['aqua', 'darkorange', 'cornflowerblue'])\nfor i, color in zip(range(n_classes), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0} (area = {1:0.2f})'\n             ''.format(i, roc_auc[i]))\n\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Extending the ROC Curve to Multi-Class')\nplt.legend(loc=\"lower right\")\nplt.show()","9095069e":"# Artificial Neural Network with KERAS ","188838fc":"##  Modeling","766427a4":"## Data Read"}}