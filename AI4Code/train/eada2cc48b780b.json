{"cell_type":{"620d6a8c":"code","f14dabd1":"code","dbc4dac6":"code","41907a64":"code","dbeca979":"code","818aff61":"code","1182d7a7":"code","662ae60b":"code","fae7b7e9":"code","7292752b":"code","a85810d2":"code","ee11883c":"code","0cad5d20":"code","36734e86":"code","f3e0b27f":"code","a5b324a8":"code","839df1ed":"code","a75e1ce6":"code","ee5283b5":"code","5e20148c":"code","295de956":"code","0eb8b85f":"code","d7152953":"code","76a52593":"code","d76c81b4":"code","a07713b5":"code","b0912a61":"code","39c66b21":"code","2a2814b8":"code","f42120ed":"code","57fc1dee":"markdown","aec23367":"markdown"},"source":{"620d6a8c":"import os\nos.listdir('..\/input\/natural-images\/natural_images\/')","f14dabd1":"#OpenCV - Computer Vision\nimport cv2\nmb1 = cv2.imread('..\/input\/natural-images\/natural_images\/motorbike\/motorbike_0679.jpg',0)\nmb1 = cv2.resize(mb1,(50,50))\n\nmb2 = cv2.imread('..\/input\/natural-images\/natural_images\/motorbike\/motorbike_0680.jpg',0)\nmb2 = cv2.resize(mb2,(50,50))","dbc4dac6":"#Extracting features of Image and create feature matrix\n\nloc1 = '..\/input\/natural-images\/natural_images\/motorbike\/'\nloc2 = '..\/input\/natural-images\/natural_images\/airplane\/'\nloc3 = '..\/input\/natural-images\/natural_images\/flower\/'\nloc4 = '..\/input\/natural-images\/natural_images\/dog\/'\nloc5 = '..\/input\/natural-images\/natural_images\/fruit\/'\nloc6 = '..\/input\/natural-images\/natural_images\/car\/'\nloc7 = '..\/input\/natural-images\/natural_images\/cat\/'\nloc8 = '..\/input\/natural-images\/natural_images\/person\/'\n\nfrom tqdm import tqdm\nfeatures = []\n\nfor i in tqdm(os.listdir(loc1)):\n    f = cv2.imread(os.path.join(loc1,i),0)\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc2)):\n    f = cv2.imread(os.path.join(loc2,i),0)\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n\n'''     \nfor i in tqdm(os.listdir(loc3)):\n    f = cv2.imread(os.path.join(loc3,i),0)\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc4)):\n    f = cv2.imread(os.path.join(loc4,i),0)\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n  \nfor i in tqdm(os.listdir(loc5)):\n    f = cv2.imread(os.path.join(loc5,i))\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc6)):\n    f = cv2.imread(os.path.join(loc6,i))\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc7)):\n    f = cv2.imread(os.path.join(loc7,i))\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n    \nfor i in tqdm(os.listdir(loc8)):\n    f = cv2.imread(os.path.join(loc8,i))\n    fr = cv2.resize(f,(50,50))\n    features.append(fr)\n'''","41907a64":"#Creating a label matrix\nlabels = []\n\nfor i in os.listdir(loc1):\n    labels.append(0)\n\nfor i in os.listdir(loc2):\n    labels.append(1)\n\n'''     \nfor i in os.listdir(loc3):\n    labels.append(2)\n\nfor i in os.listdir(loc4):\n    labels.append(3)\n   \nfor i in os.listdir(loc5):\n    labels.append(4)\n\nfor i in os.listdir(loc6):\n    labels.append(5)\n    \nfor i in os.listdir(loc7):\n    labels.append(6)\n\nfor i in os.listdir(loc8):\n    labels.append(7)\n'''","dbeca979":"import numpy as np\nnp.array(features).shape","818aff61":"import numpy as np\nX = np.array(features)\nX = X.reshape(1515,2500)\nX.shape","1182d7a7":"Y = np.array(labels)\nY.shape","662ae60b":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8)","fae7b7e9":"print(X.shape)\nprint(xtrain.shape)\nprint(xtest.shape)\nprint(Y.shape)\nprint(ytrain.shape)\nprint(ytest.shape)","7292752b":"xtrain.shape[1]","a85810d2":"from keras import models\nfrom keras.layers import Dense,Dropout\nfrom keras.utils import to_categorical","ee11883c":"!pip install livelossplot","0cad5d20":"import livelossplot\nplot_losses = livelossplot.PlotLossesKeras()","36734e86":"xtrain_n = xtrain\/xtrain.max()\nxtest_n = xtest\/xtest.max()","f3e0b27f":"ytrain_h = to_categorical(ytrain)\nytest_h= to_categorical(ytest)","a5b324a8":"#Build neural Network Model\nmodel = models.Sequential()\nmodel.add(Dense(1024 ,activation = 'relu' , input_shape = (xtrain.shape[1],)))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(256,activation = 'relu'))\nmodel.add(Dense(256,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(256,activation = 'relu'))\nmodel.add(Dense(256,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dense(2,activation='softmax'))","839df1ed":"model.summary()","a75e1ce6":"from keras import optimizers\nsgd = optimizers.SGD(lr=0.1)\nmodel.compile(optimizer = sgd,\n             loss = 'categorical_crossentropy',\n             metrics = ['Accuracy'])","ee5283b5":"xtrain_n.shape","5e20148c":"model.fit(xtrain_n,ytrain_h,epochs = 1500)","295de956":"model.evaluate(xtrain_n,ytrain_h)","0eb8b85f":"model.evaluate(xtest_n,ytest_h)","d7152953":"import pandas as pd\ndf = pd.DataFrame(X.reshape(6899,7500))\n\ndfl = pd.DataFrame(Y)\ndfl.columns = ['Label']\n\nfull_data = pd.concat((dfl,df),axis=1)\nfull_data.to_csv('natural.csv')","76a52593":"dfn = pd.read_csv('.\/natural.csv',index_col=0)","d76c81b4":"dfn.head()\nf = dfn.drop('Label',axis=1).values\nl = dfn[['Label']].values","a07713b5":"f[99]","b0912a61":"#66429 --> 7500\nmb2.shape","39c66b21":"plt.imshow(mb1)\nplt.show()","2a2814b8":"import matplotlib.pyplot as plt\nplt.imshow(xtrain_n[99].reshape(50,50,3))\nplt.show()","f42120ed":"plt.imshow(mb2)\nplt.show()","57fc1dee":"# Create a neural network model to train using the feature extracted for natural image prediction","aec23367":"# ** Create Structured Data to be used Later using Unstructured Set of Data**"}}