{"cell_type":{"d2762d26":"code","2b526d4d":"code","e527718d":"code","a6394fe1":"code","f57a371a":"code","20cef2dd":"code","88a55e16":"code","2b85c2d9":"code","2b054041":"code","57c137e2":"code","452b1581":"code","60d577b0":"code","9cf41e1b":"code","6a1129a1":"code","63f6b623":"code","350da09b":"code","49743e81":"code","1c27e586":"code","0cd8a5e2":"code","b6bf9571":"code","586102b7":"code","9bc0f2bc":"code","e9121045":"markdown","a1179161":"markdown","0b70ec56":"markdown","f0656540":"markdown","a22e5ea2":"markdown","3f1c50cc":"markdown","a11658b8":"markdown","4dc3aebf":"markdown","f6410cb9":"markdown","a0df9380":"markdown","97361aff":"markdown","9a9b3a55":"markdown","fa430cb4":"markdown"},"source":{"d2762d26":"\nimport os\nimport pandas as pd \nimport numpy as np\nimport datetime as dt \nimport math\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix, mean_squared_error, mean_absolute_error, r2_score, explained_variance_score, mean_poisson_deviance, mean_gamma_deviance, accuracy_score \nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import Input, GRU, Dropout, Dense,LSTM, Attention,Bidirectional,MultiHeadAttention,Attention, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow.keras\nimport matplotlib.pyplot as plt \nfrom itertools import cycle\nimport plotly.graph_objects as go\nimport plotly.express as xp\nimport plotly.subplots as sp\ntf.test.gpu_device_name()","2b526d4d":"data=pd.read_csv(\"..\/input\/tesla-stock-data-20162021\/TSLA.csv\")\nprint(\"Shape:\",data.shape)\ndata.columns=data.columns.str.lower()\ndata.head()","e527718d":"print(\"Null values:\", data.isnull().values.sum())\nprint(\"N\/A values:\", data.isna().values.any())\n#convert to datetime\ndata[\"date\"]=pd.to_datetime(data.date)\ndata.head()","a6394fe1":"#periode of time \nprint(\"Duration: \", data.iloc[-1][0]-data.iloc[0][0])\nprint(\"statistics:\")\ndata.describe()","f57a371a":"#stock open and close comparison within months\nmonthwise=data.groupby(data[\"date\"].dt.strftime('%B'))[[\"open\",\"close\"]].mean()\nmonthwise.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December'],axis=0)\n\n\n#Plot monthwise comparision between Stock open and close price\nfigure=go.Figure()\nfigure.add_trace(go.Bar(\n                        x=monthwise.index,\n                        y=monthwise[\"open\"],\n                        name=\"Stock open price\",\n                        marker_color=\"red\"\n                        )\n                )\n\nfigure.add_trace(go.Bar(\n                        x=monthwise.index,\n                        y=monthwise[\"close\"],\n                        name=\"Stock open price\",\n                        marker_color=\"blue\"\n                        )\n                )\nfigure.update_layout ( title= \"Comparision between Stock open and close price\",xaxis_tickangle=-45,barmode='group')\nfigure.show()","20cef2dd":"#stock high and low price within months\nmonth_high = data.groupby(data['date'].dt.strftime('%B'))['high'].max()\nmonth_high = month_high.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December'], axis=0)\n\nmonth_low = data.groupby(data['date'].dt.strftime('%B'))['low'].min()\nmonth_low = month_low.reindex(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December'], axis=0)\n\n#Plot monthwise comparision between Stock low and high prices\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=month_high.index,\n    y=month_high,\n    name='Stock high price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=month_low.index,\n    y=month_low,\n    name='Stock low price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","88a55e16":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\nfigure=xp.line(data,x=data.date, y=[data[\"open\"],data[\"close\"],data[\"low\"],data[\"high\"]],labels={\"date\":'Date',\"value\":\"stock value\"})\nfigure.update_layout(title=\"Stock prices chart\",font_size=15, font_color=\"black\",legend_title_text=\"Parameters\")\nfigure.for_each_trace(lambda t: t.update(name=next(names)) )\nfigure.show()","2b85c2d9":"close=data[['date','close']]\nprint(\"close price data shape\",close.shape)\n#plot close price chart\nfigure=xp.line(data,x=data.date, y=[close[\"close\"]],labels={\"date\":'Date',\"value\":\"Close price\"})\nfigure.update_layout(title=\"Close prices chart\",font_size=15, font_color=\"black\")\nfigure.show()","2b054041":"#data for prediction\nclose=close[close['date'] > '2020-08-16']\npred_close=close.copy()\nprint(\"close price prediction data shape\",pred_close.shape)\n#plot the close price predictin data chart \nfigure=xp.line(pred_close,x=pred_close.date, y=[pred_close[\"close\"]],labels={\"date\":'Date',\"value\":\"Close price\"})\nfigure.update_layout(title=\"Close prices chart for prediction\",font_size=15, font_color=\"black\")\nfigure.show()\ndel close['date']","57c137e2":"#Normalizing\nscalar=MinMaxScaler(feature_range=(0,1))\nclose=scalar.fit_transform(np.array(close).reshape(-1,1))\nclose.shape\n#split train and test data\nsplit_size=0.6\ntime_step=15\ntrain,test=close[0:int(len(close)*split_size),:], close[int(len(close)*split_size):,:]\nprint(train.shape,test.shape)\n#transform to time-series-like data\ndef time_series(data,time_stemp):\n    X=[]\n    y=[]\n    for i in range(len(data)-time_step-1):\n        a=data[i:(i+time_stemp),0]\n        X.append(a)\n        y.append(data[i+time_stemp])\n    return np.array(X),np.array(y)\ntrainX,train_y=time_series(train,time_step)\ntestX,test_y=time_series(test,time_step)\n\nprint(trainX.shape,train_y.shape)\nprint(testX.shape,test_y.shape)\n\n# reshape input to be [samples, time steps, features] which is required for LSTM\ntrainX =trainX.reshape(trainX.shape[0],trainX.shape[1] , 1)\ntestX = testX.reshape(testX.shape[0],testX.shape[1] , 1)\n\nprint(\"X_train: \", trainX.shape)\nprint(\"X_test: \", testX.shape)","452b1581":"pip install attention\n","60d577b0":"from attention import Attention\ninputs=Input((time_step,1))\nx=GRU(64,return_sequences=True)(inputs)\nx=LSTM(32,return_sequences=True)(x)\nx=Attention(32)(x)\nx = Dense(32, activation=\"relu\")(x)\nx=Dropout(0.2)(x)\noutputs=Dense(1)(x)\nmodel=Model(inputs,outputs)   \n\noptimizer=Adam(learning_rate=0.01,\n    beta_1=0.9,\n    beta_2=0.999)\n\nmodel.compile(optimizer=optimizer,loss='mse')\nmodel.summary()","9cf41e1b":"callbacks = [tensorflow.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)]\nhistory=model.fit(trainX,train_y,\n                  epochs=200,\n                  validation_data=(testX,test_y),\n                  verbose=1,\n                  batch_size=32,\n                  callbacks=callbacks\n                 )","6a1129a1":"#learning curves\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","63f6b623":"train_predict=model.predict(trainX)\ntest_predict=model.predict(testX)\ntrain_predict.shape, test_predict.shape","350da09b":"# Transform back to original form\ntrain_predict = scalar.inverse_transform(train_predict)\ntest_predict = scalar.inverse_transform(test_predict)\noriginal_ytrain = scalar.inverse_transform(train_y.reshape(-1,1)) \noriginal_ytest = scalar.inverse_transform(test_y.reshape(-1,1)) ","49743e81":"#plot both predicted and original values\n# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(close)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(close)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(close)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': pred_close['date'],\n                       'original_close': pred_close['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = xp.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\n\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","1c27e586":"inputs=Input((time_step,1))\nx=GRU(64,return_sequences=True)(inputs)\nx=LSTM(32,return_sequences=True)(x)\nx=MultiHeadAttention(num_heads=3,key_dim=2)(x,x,x)\nx=Dense(32, activation=\"relu\")(x)\nx=Dropout(0.2)(x)\noutputs=Dense(1)(x)\nmodel1=Model(inputs,outputs)   \n\noptimizer=Adam(learning_rate=0.01,\n    beta_1=0.9,\n    beta_2=0.999)\n\nmodel1.compile(optimizer=optimizer,loss='mse')\nmodel1.summary()","0cd8a5e2":"callbacks = [tensorflow.keras.callbacks.EarlyStopping(patience=100, restore_best_weights=True)]\nhistory=model1.fit(trainX,train_y,\n                  epochs=200,\n                  validation_data=(testX,test_y),\n                  verbose=1,\n                  batch_size=32,\n                  \n                 )","b6bf9571":"train_predict=model1.predict(trainX)\ntest_predict=model1.predict(testX)\nprint(train_predict.shape, test_predict.shape)\n# Transform back to original form\ntrain_predict1 = scalar.inverse_transform(train_predict)\ntest_predict = scalar.inverse_transform(test_predict)\noriginal_ytrain = scalar.inverse_transform(train_y.reshape(-1,1)) \noriginal_ytest = scalar.inverse_transform(test_y.reshape(-1,1))  \n#plot both predicted and original values\n# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(close)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(close)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(close)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': pred_close['date'],\n                       'original_close': pred_close['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = xp.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\n\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","586102b7":"x_input=test[len(test)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 30\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input = x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        \n        yhat = model.predict(x_input, verbose=0)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        \n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        temp_input.extend(yhat[0].tolist())\n        \n        lst_output.extend(yhat.tolist())\n        i=i+1\n               \nprint(\"Output of predicted next days: \", len(lst_output))","9bc0f2bc":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\ntemp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scalar.inverse_transform(close[len(close)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scalar.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 30 days close price'])\n\nfig = xp.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 30 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\n\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","e9121045":"# Data preprocesing","a1179161":"# Build the model\nHere, we will try to add attention layer to the LSTM. This mechanism aimed at resolving issues including noisy variables in time series and introducing a better method than a simple average. \n\n\nSimply speaking, this aims to select the useful information across the various feature time series data for predicting the target time series. \n\nMore details about how to deal with time series forcating with self attention is [here](http:\/\/towardsdatascience.com\/attention-for-time-series-classification-and-forecasting-261723e0006d)\n\n> # Pay Attention to your attention :)","0b70ec56":"# Multihead attention","f0656540":"# Lets predict with trained model","a22e5ea2":"**This notebook demonstrates the ability of attention to predict Tesla stock price.**\n \n>  ![image.png](attachment:99fb907a-1e9e-4b95-b09b-8c6ae7082c2d.png)![image.png](attachment:547e405c-9dec-4057-9c92-961aecd04d0b.png)\n ***\n**Here, we have a last 5 years Stock Data of the most fastest growing company which is TESLA.**\n\nIn this notebook, You will be going to learn following:\n\n* EDA Techniques\n* Plotting basic charts using Plotly\n* Easily learn about attention and LSTM\n* Prediction next 30 days\n\n![image.png](attachment:5403303a-60a8-4152-a25f-9bbac070383c.png)","3f1c50cc":"# Import data","a11658b8":"# Self attention","4dc3aebf":"# Predicting next 30 days","f6410cb9":"# take  2020 data for prediction","a0df9380":"# EDA","97361aff":"# Now, we try to predict the close price for the next 30 days ","9a9b3a55":"# **Keras Self attention and multihead attention are here:\n# **\nhttps:\/\/github.com\/CyberZHG\/keras-self-attention\n\n\nhttps:\/\/github.com\/CyberZHG\/keras-multi-head","fa430cb4":"# #Comparison betwenn open,close, low and high prices"}}