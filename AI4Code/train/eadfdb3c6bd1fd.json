{"cell_type":{"31084172":"code","60fd2e10":"code","e4725934":"code","b8b4738b":"code","8b64a635":"code","8a403935":"code","102f23aa":"code","91dfa900":"code","d42bb2cf":"code","22d5e162":"code","1f43ba8b":"code","b658f6e4":"code","843de918":"code","218c6809":"code","70085464":"code","05f13bca":"code","ab3b6dc2":"code","e5243598":"code","9989e918":"code","9f1b863d":"code","d25371c0":"code","398f0137":"code","5600ec4c":"code","9f7a3bfb":"code","0a240b89":"code","a444b559":"code","e44cea11":"code","c6c8a25d":"code","c67f9099":"code","4c9becb3":"code","dbf1760e":"code","fe6c8e66":"code","5e5212c0":"code","e25ea246":"code","7e445ca4":"code","0910a360":"code","4450093c":"code","27b4bab8":"code","0d6f2cda":"code","93e67882":"code","52800088":"code","8e177510":"code","235befc5":"code","004afcd7":"code","4cf6aa38":"code","85fdb507":"code","fa8fd3aa":"code","6dcf2809":"code","b17f84ce":"code","f5ebeb43":"code","cd5809c6":"code","6a3db4f6":"code","7d15ea75":"code","5fc0424d":"code","47f8864b":"code","bbb31b3c":"code","38638ba6":"code","caf126f5":"code","d0bf4e94":"code","f88906b4":"code","0cfe2bfe":"code","c057c84a":"code","b23f0109":"code","661a6c65":"code","0bf4d6bb":"code","2deea995":"code","66fecf7f":"code","d0814b58":"code","d531accd":"code","735df998":"code","3e2d0ad9":"code","8c2dbaee":"markdown","5d22df18":"markdown","99b79089":"markdown","427ddcd2":"markdown","e65eea6d":"markdown","11e3cdb4":"markdown","8eb5dc86":"markdown","8671f7d0":"markdown"},"source":{"31084172":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60fd2e10":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.io as pio\nimport plotly.express as ex\nimport plotly.graph_objs  as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","e4725934":"df=pd.read_csv('..\/input\/banking\/banking.csv')\ndf.sample(4)","b8b4738b":"df.info()","8b64a635":"df.shape","8a403935":"# there are 45211 rows in the table, we cannot view everything, so we will lowercase all columns containing words\ndf['education']=df['education'].str.lower()\ndf['job']=df['job'].str.lower()\ndf['marital']=df['marital'].str.lower()","102f23aa":"print ('The max of age is ',df['age'].max())\nprint('The min age is' , df['age'].min())\n# As you see, the resut is reasonable and no need to use (abs)","91dfa900":"print('the max duration ', df['duration'].max())\nprint('the min duration ', df['duration'].min())\n# As you see, the resut is reasonable and no need to use (abs)","d42bb2cf":"def balance_category(df):\n    \n    if df['balance']<= 5000:\n        return 'low balance'\n    \n    elif df['balance']<= 15000:\n        return 'average balance'\n    \n    else:\n        return 'high balance'\n\ndf['balance_category'] =df.apply(balance_category, axis=1)\n\n\ndf.sample(5)","22d5e162":"def purpose(df):\n    \n    if df['y']=='no':\n        return \"can not get a credit\"\n    else:  \n        return \"can get a credit\"\n    \ndf['purpose'] =df.apply(purpose, axis=1)\n\n\ndf.sample(4)","1f43ba8b":"def poutcome(df):\n    if df['poutcome']=='unknown':\n        return \"Under consideration\"\n    elif df['poutcome']=='failure':\n        return 'failure'\n    elif df['poutcome']=='other':\n        return 'other'\n    else:\n        return 'success'\n    \n    \ndf['poutcome']=df.apply(poutcome,axis=1)\n\ndf.sample(6)","b658f6e4":"# we drop the 3 columns that we do not need it at all\ndf.drop(columns=['default','pdays','previous','y'],inplace=True)\ndf.sample(5)","843de918":"# Make sure that the numerical values are integer\ndf['balance']=df['balance'].astype('int')\ndf['duration']=df['duration'].astype('int')","218c6809":"# Distribute the data into numerical and categorical \ncat_cols=df.select_dtypes(include='object')\nnum_cols=df.select_dtypes(exclude='object')","70085464":"cat_cols.describe()","05f13bca":"# we use the numerical columns and define all columns \nnum_cols.describe ()","ab3b6dc2":"# we figure out the missing values that we do mot have \nplt.figure(figsize=(10,5))\nsns.heatmap(df.isnull());","e5243598":"target=df[df['purpose']=='can get a credit']\nnon_target=df[df['purpose']=='can not get a credit']","9989e918":"#we use this part for analyzing the data based on y\ntarget_cols=['purpose']\ncat_cols=df.nunique()[df.nunique()<10].keys().tolist()\ncat_cols=[x for x in cat_cols if x not in target_cols]\nnum_col=[x for x in df.columns if x not in cat_cols+ target_cols]","9f1b863d":"df['job'].value_counts(normalize=True)*100\n# most people are working as Blue collar","d25371c0":"df['marital'].value_counts(normalize=True)*100\n# Most of the people who want to get credit are married","398f0137":"df['education'].value_counts(normalize=True)*100\n# Most of the people who got credit have secondary education","5600ec4c":"df['housing'].value_counts()\n# Most of the people who got credit have their own house ","9f7a3bfb":"df['loan'].value_counts()\n# Most of the people who got credit have not  loan before  ","0a240b89":"df['purpose'].value_counts()\n# Most of the people can not get credit  ","a444b559":"# We divided \ndf.groupby('marital')['balance'].mean()","e44cea11":"# As you see, most retired people have more balance in their bank\ndf.groupby('job')['balance'].mean().sort_values(ascending=False)","c6c8a25d":"#As you see, most  people who have can not get credit , their balance is almost 1804 $ and people who can not get credit, their balance is 1303$\ndf.groupby('purpose')['balance'].mean().sort_values(ascending=False)","c67f9099":"#As you see, most  people who have tertiary education have more balance in their bank\ndf.groupby('education')['balance'].mean().sort_values(ascending=False)","4c9becb3":"# we see that, most of the people have low balance in their account \ndf['balance_category'].value_counts()","dbf1760e":"df.head(5)","fe6c8e66":"#Find the median and count of the maritial with their balances which most od the people are married and married has the highest median \ninfo_maritial=pd.pivot_table(df,index=['marital'],values='balance',aggfunc=['median', 'count'])\ninfo_maritial.columns=['median','count']\ninfo_maritial.head()","5e5212c0":"#Find the median and count of the education with their balances which Secondary has the highest amount and tertiary has the highets median\ninfo_education=pd.pivot_table(df,index=['education'],values='balance',aggfunc='count')\ninfo_education.columns=['count']\ninfo_education.head()\n\nf, ax = plt.subplots(figsize=(15, 8))\nax = sns.barplot(x=info_education.index, y=\"count\", data=info_education, palette=\"Blues_d\")\nplt.title('distribute educated people by their balance ')","e25ea246":"df['job'].unique()\njob_balance_category=pd.crosstab(df['job'],df['balance_category'])\njob_balance_category","7e445ca4":"# As you see, the average balance is for married and night and low has the highest percentage \ndf['marital'].unique()\nage_marital=pd.crosstab(df['marital'],df['balance_category'])\nage_marital","0910a360":"# the people who can get a credit have secondary and people who can not get ready, secondary\ndf['education'].unique()\neducation_purpose=pd.crosstab(df['education'],df['purpose'])\neducation_purpose","4450093c":"# the people who can get a credit have secondary and people who can not get ready, secondary\ndf['job'].unique()\njob_poutcome=pd.crosstab(df['job'],df['poutcome'])\njob_poutcome","27b4bab8":"# we distribute poutcome, the Under consideration has the highest % can get a credit and can not get a credit also Under consideration has the highest %\ndf['poutcome'].unique()\npoutcome_purpose=pd.crosstab(df['poutcome'],df['purpose'])\npoutcome_purpose","0d6f2cda":"df_grouped_sum=df.groupby('marital',as_index=False)['age'].agg('sum').rename(columns={'age':'age_Sum'})\ndf_grouped_cnt=df.groupby('marital',as_index=False)['age'].agg('count').rename(columns={'age':'age_Count'})\n\n# Mege the 2 lines \ndf_grouped_average=df_grouped_sum.merge(df_grouped_cnt,left_on='marital',right_on='marital',how='inner')\n\n#for missing values\ndf_grouped_average.loc[:,'Average of Age']=df_grouped_average['age_Sum']\/df_grouped_average['age_Count']\n#the final result\n\ndf_grouped_average.sort_values('age_Sum',ascending=True)\n","93e67882":"df_grouped_sum=df.groupby('housing',as_index=False)['balance'].agg('sum').rename(columns={'balance':'balance_Sum'})\ndf_grouped_cnt=df.groupby('housing',as_index=False)['balance'].agg('count').rename(columns={'balance':'balance_Count'})\n\ndf_grouped_average=df_grouped_sum.merge(df_grouped_cnt,left_on='housing',right_on='housing',how='inner')\n\ndf_grouped_average.loc[:,'Average of balance']=df_grouped_average['balance_Sum']\/df_grouped_average['balance_Count']\n\ndf_grouped_average.sort_values('balance_Sum',ascending=False)","52800088":"def number_of_job(df, job ,balance_category):\n    number_list=df[(df['job']==job) & (df['balance_category']==balance_category)]\n    number_list_count=number_list['education'].count()\n    return number_list_count","8e177510":"# we have 42 Technician with high balance amount of $\nnumber_of_job(df,'technician','high balance')","235befc5":"# we have 9280 people who are blue collar with low balance.\nnumber_of_job(df,'blue-collar','low balance')","004afcd7":"#the students with average \nnumber_of_job(df,'student','average balance')","4cf6aa38":"plt.rcParams['figure.figsize']=(10,5)\ndf['purpose'].value_counts().sort_values(ascending=False).plot.bar(color='pink')\nplt.xlabel('distribute the purpose ')\nplt.ylabel('count')\nplt.xticks(rotation=50)\nplt.show()\n# As you see, most of the people can not get a credit(almost 40000 of them )","85fdb507":"plt.rcParams['figure.figsize']=(18,5)\ndf['contact'].value_counts().sort_values(ascending=False).plot.pie(y='contact',autopct=\"%0.1f%%\")\nplt.axis('off')\nplt.show()\n# The most of the contract that signed was cellular and rest of them are unknown and by telephone.","fa8fd3aa":"fig,ax=plt.subplots(figsize=(30,5))\nsns.countplot(df['month'],hue=df['purpose'],ax=ax)\nplt.title('duration of people who got credit by their distribution')\nplt.xlabel('month')\nplt.ylabel('purpose')\nplt.xticks(rotation=60)\nplt.show()\n# As you see, most people got credut in May and and also people who can not get credit","6dcf2809":"fig,ax=plt.subplots(figsize=(12,5))\nsns.countplot(df['poutcome'],hue=df['job'],ax=ax)\nplt.title('distribute the poutcome with kind of the jobs ')\nplt.xlabel('poutcome')\nplt.ylabel('kind of Job')\nplt.xticks(rotation=50)\nplt.show()\n# under consideration has the highest portion and enterpreneur has the fist job is under connsideration","b17f84ce":"plt.figure(figsize=(16,9))\nsns.set_palette(sns.color_palette(\"Paired\"))\nax=sns.barplot(x='age',y='balance_category',data=df, orient='h')\nax.axes.set_title('find the category of balance with different age',fontsize=16)\nax.set_xlabel('age')\nax.set_ylabel('range of balance')\nsns.color_palette(\"Set2\")\nax.tick_params(labelsize=20)\n# we see below that high balance has the highest range from the range over 40 years old","f5ebeb43":"sns.violinplot(x='balance_category',y='balance',data=df, color='Aqua')\n# Hight balance has the highest amount of the balance ","cd5809c6":"sns.boxplot(x='duration',y='purpose',data=df)\nplt.title('amount of the duration for credit by their purpose')\nplt.show()\n# As you see,the duration for get a credit from bank is more than people who can not get a credit","6a3db4f6":"sns.scatterplot(x='balance',y='job',data=df, color='pink')\nplt.title('distribute the job  with theie balance ')\nplt.show()\n# the management has the highets amount of the balance and student has the hightest amount","7d15ea75":"df.sort_values(by='purpose',ascending=False)\n\nplt.figure(figsize=(20,5))\n\nsns.barplot(x='age',y='purpose',data=df,palette=\"rocket_r\")\nplt.xlabel('categorized the purpose')\nplt.ylabel('distribute the age')\nplt.xticks(rotation=50)\nplt.show()","5fc0424d":"sns.jointplot(x='balance',y='duration',data=df, kind='kde')\nplt.xlabel('balance')\nplt.ylabel('duration')\nplt.xticks(rotation=50)\nplt.show()","47f8864b":"df['age'].hist(bins=30)\nplt.xlabel('age')\nplt.ylabel('counts')\nplt.title('aboundance of the job')\nplt.show()\n# The most range of the age is almost 32, 33 years old who want to get credit from bank","bbb31b3c":"sns.catplot(x='contact',y='age',data=df,kind='box')\nplt.figure(figsize=(10,5))\nplt.show()\n# The age for telephone is between 40 to 60 and has the higehst portion and unknown has the lowest portion","38638ba6":"pm=df[['balance','job']].groupby(['job']).agg([sum])\nsns.set_palette('Spectral')\nplt.figure(figsize=(10,6))\nplt.pie(pm['balance']['sum'], labels = pm.index, explode = (0, 1.5, 0, 1.3, 1, 0, 0, 0.5, 0, 1.5, 0, 1.3), \n        shadow = True, autopct = '%1.1f%%')","caf126f5":"# build a histogram\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\ndf['balance'].hist(bins=45)\nplt.xlabel('abundace of the balance')\nplt.ylabel('count')\nplt.xticks(rotation=45)\nplt.show()\n# As you see, the less abundance of the balance is from 100000 to  almost 500","d0bf4e94":"sns.violinplot(x='education',y='balance',data=df, color='yellow')\nplt.title('distribute the educations by their balance')\nplt.show()","f88906b4":"sns.boxplot(x='poutcome',y='age',data=df, color='red')\nplt.title('find out the poutcome with different range of the age')\nplt.show()\n# most of the poutcome are successed and the range of the age is between 35 to 50 and the average is kind of 42 years old.","0cfe2bfe":"sns.jointplot(x='balance',y='age',data=df, kind='kde',color='pink')\nplt.xlabel('range of balance')\nplt.ylabel('range of the age')\nplt.xticks(rotation=50)\nplt.show()\n# the most range of the balance is lower than 2000$ and range of the age is between 25 to 60( the highest remarkable part is 30 to 40)","c057c84a":"#preprocessing \nfrom sklearn.preprocessing import scale\nfrom sklearn.pipeline import Pipeline \nfrom sklearn.model_selection import train_test_split\n\n# Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier \nfrom sklearn.svm import SVC \nfrom sklearn.neural_network import MLPClassifier \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Performance metrics\nfrom sklearn import preprocessing \nfrom sklearn import metrics \nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.model_selection import cross_val_score\n","b23f0109":"le=preprocessing.LabelEncoder()\ndf.job=le.fit_transform(df.job)\ndf.marital=le.fit_transform(df.marital)\ndf.education=le.fit_transform(df.education)\ndf.housing=le.fit_transform(df.housing)\ndf.loan=le.fit_transform(df.loan)\ndf.contact=le.fit_transform(df.contact)\ndf.month=le.fit_transform(df.month)\ndf.poutcome=le.fit_transform(df.poutcome)\ndf.balance_category=le.fit_transform(df.balance_category)\ndf.purpose=le.fit_transform(df.purpose)","661a6c65":"# we preprocess the data for making the model\ndf.head(5)","0bf4d6bb":"x=df.drop(['loan','contact','day','month','duration'],axis=1)\ny=df['purpose'].values","2deea995":"x.head(5)","66fecf7f":"#K_nn classifier\n\nx_train, x_test, y_train, y_test=train_test_split( x, y , test_size=.30, random_state=1234, stratify= y)\n\nknn= KNeighborsClassifier(n_neighbors=7)\n# fit the classifier\nknn.fit(x_train, y_train)\n# Print the accuracy\nprint (knn.score(x_test, y_test))","d0814b58":"# we want to know the performance with train and test result\nneighbors = np.arange(1, 15)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i , k in enumerate(neighbors):\n    # Train and test the model\n    knn=KNeighborsClassifier(n_neighbors=k)\n    \n    # Train the model\n    knn.fit(x_train, y_train)\n    \n    \n    \n    # Compute the accuracy\n    \n    train_accuracy[i] = knn.score(x_train, y_train)\n        \n    # compute the test\n    test_accuracy[i]=knn.score(x_test, y_test)\n    \n    \nplt.plot(neighbors , test_accuracy , label='Test_Accuracy')\nplt.plot(neighbors, train_accuracy , label='Train_Accuracy')\nplt.legend()\nplt.xlabel('number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()\n    ","d531accd":"print(x_train.shape, y_train.shape, x_test.shape , y_test.shape)","735df998":"# We want to define some algorithm\nmodels=[]\nmodels.append(('LR',LogisticRegression(random_state=12345)))\nmodels.append(('DT',DecisionTreeClassifier(random_state=12345)))\nmodels.append(('RF',RandomForestClassifier(random_state=12345)))\nmodels.append(('NN',MLPClassifier(random_state=12345)))\nmodels.append(('svm',SVC(random_state=12345)))\nmodels.append(('KN', KNeighborsClassifier()))\n\n\n\nresult=[]\nname=[]","3e2d0ad9":"#We want to find out which algorithm is the best one and has the highest percenage \nfor name, model in models:\n    model.fit(x_train,y_train)\n    predictions=model.predict(x_test)\n    accuracy=accuracy_score(y_test, predictions)\n    msg = \"%s: (%f)\" % (name, accuracy)\n    print(msg)","8c2dbaee":"* As you see, we distribute the educations level with their balances and tertiary has the highest range of the salary.","5d22df18":"*We see on the top that  the most popular job is Blue Collar and most of thema are married and they have secondary education, most of them have house and their contact is cellullar and they can not get credit from bank* ","99b79089":"# We want to know that the Data Analyst in some main state is so demanding.","427ddcd2":"*We found out the average of the people who are divorced is 45.78 years old and for single is 33.70 and for married people is 43.40*","e65eea6d":"# Preprocessing the data and make a model with different algorithms","11e3cdb4":"# 2- Data analysis","8eb5dc86":"*As you see, we distribute the Job with range of balance.the average balance is for blue collar and  high balance is for management and low balance is for blue collor*","8671f7d0":"*like the previous code, we found out the people who have hosing ,their average balance is 1175$ and for people who do not have house is 1596$*"}}