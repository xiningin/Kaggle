{"cell_type":{"17af30ff":"code","66bf8ebc":"code","81b178ad":"code","2ad2a53d":"code","d72e4cb9":"code","452a0a4d":"code","85f8d3a8":"code","3f0287a9":"code","d4f23105":"code","1028ca42":"code","a7dae3e7":"code","fee9ff3a":"code","b13a4ec4":"code","43a678f9":"code","6e79b424":"code","9cd026a6":"code","53a7f412":"code","c239de1f":"code","a5947ef7":"code","633221e1":"code","d9422c6c":"code","59d1bedd":"code","af5f9384":"code","a264baec":"code","2ae69033":"code","67ed8c50":"code","ecf9dd4d":"code","191a3d0e":"code","4f0bb3ce":"code","a3d9807e":"code","b25c26d0":"code","3fcb27d8":"code","1af72b3e":"code","ee484e0c":"code","af2bc933":"code","a65377ca":"code","98cc8530":"code","072ba8b6":"code","891126ec":"code","f55acc5b":"code","dfa2ab23":"code","cf0b32d8":"code","5ced977b":"code","c0e6c73b":"code","3ecf7778":"code","5283c6b4":"code","4e4cae2e":"code","2f5a5d50":"code","9a5a6a60":"code","729950e3":"code","32998206":"code","998ee53f":"code","3dbc2303":"code","aea1557c":"code","aa060d5c":"code","357f2806":"code","9ed8aede":"code","1dc68084":"code","a375be1f":"code","409fea96":"code","01910389":"code","6620653b":"code","b6c580ad":"code","c9ea3c12":"code","00983869":"code","f5e49d25":"code","ed80ece2":"code","41903636":"code","67665736":"code","9207509d":"code","4d4a6077":"code","3e755553":"code","7a1b2cd3":"code","5b0d4341":"code","00f4e3c9":"code","7c96beba":"code","a4186a57":"code","431db683":"code","f4ff6628":"code","56d7b216":"code","ebc95693":"code","ed37eb44":"code","4c95d72d":"code","fdea3f35":"code","c555f068":"code","318a5733":"code","4681cce7":"code","e4d11277":"code","1815489c":"code","5bf6b2ef":"code","f306567f":"code","47331c71":"code","479ededf":"code","c613a6ef":"code","3dfdc7c1":"code","0ba2f69b":"code","41db7429":"code","fd63d88b":"code","ef852ed6":"code","f2a25434":"code","f3eaa06e":"code","33cb6f1f":"code","ee19a443":"code","501fcc7a":"code","a652ddc0":"code","f6fe5d83":"code","75b9f262":"code","5dc105ee":"code","a1e992b0":"code","6c6e1711":"code","3fc6b0f3":"code","ad59ff73":"code","9878c954":"code","acfa3b3b":"code","e15bde4c":"code","66aa34b9":"code","31f13dfb":"code","14d7b1ac":"code","40be3096":"code","2f0ea026":"code","ae927e63":"code","c7e27548":"code","302798de":"code","c35cf867":"code","1c9f0d5e":"code","551c403f":"code","589bce07":"code","ce07d3c8":"code","7b3cdd92":"code","6238e3a9":"code","6d57db60":"code","bd14c17f":"code","e447404c":"code","fde96545":"code","dc08bc3a":"code","54d568dc":"code","ad3f2ef0":"code","3849a12e":"code","8b113a76":"code","e4d8b9d7":"code","4e171866":"code","2af5bd2f":"code","7ec8075d":"code","66bd9965":"code","5cfd8b80":"code","4884c982":"code","4a3edec0":"code","e8b2f778":"code","98a4878e":"code","8e2d29db":"code","9274ece7":"code","e79f17a6":"code","02251e41":"code","e0d016fb":"code","274f9cbd":"code","95cbdb25":"code","ebb7eaeb":"code","57c8db07":"code","f3823d84":"markdown","9462ec23":"markdown","a4b7ebfe":"markdown","b539200e":"markdown"},"source":{"17af30ff":"#Importing all the libraries needed\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport datetime\n\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n","66bf8ebc":"df = pd.read_csv(\"..\/input\/loan-eligible-dataset\/loan-train.csv\")\ndf_test = pd.read_csv(\"..\/input\/loan-eligible-dataset\/loan-test.csv\")","81b178ad":"\"\"\"Loan_ID --------------> Unique Loan ID.\nGender --------------> Male\/ Female (cinsiyet)\nMarried --------------> Applicant married (medeni hali) (Y\/N)\nDependents ------------> Number of dependents (bakmas\u0131 gereken ki\u015fi say\u0131s\u0131)\nEducation -------------> Applicant Education (egitim durumu) (Graduate\/ Under Graduate)\nSelf_Employed ---------> Self-employed (kendi i\u015finde \u00e7al\u0131\u015fan) (Y\/N)\nApplicantIncome -------> Applicant income (basvuru yapan\u0131n geliri)\nCoapplicantIncome -----> Coapplicant income (basvuru yapan\u0131n e\u015finin geliri)\nLoanAmount -----------> Loan amount in thousands (1 bin kars\u0131 odeditleri miktar)\nLoan_Amount_Term ------> Term of a loan in months ( ka\u00e7 ayl\u0131k )\nCredit_History --------> Credit history meets guidelines (kredi gecmi\u015fi kosular\u0131 sagl\u0131yor mu,kara liste )\nProperty_Area ---------> Urban\/ Semi-Urban\/ Rural (evlerin mekanlar\u0131)\nLoan_Status -----------> Loan approved (Y\/N) (kredi onay)\"\"\"","2ad2a53d":"df.columns","d72e4cb9":"df_train = df.copy()\ndf_train.head(5)","452a0a4d":"df_train.shape","85f8d3a8":"df_train.dtypes","3f0287a9":"df_train.info()","d4f23105":"df_train[df_train.duplicated() == True]\n\n#No duplicate data","1028ca42":"df_train.describe()","a7dae3e7":"#Code to find numeric data\nnumeric_data = df_train.select_dtypes(include = np.number)\nnumeric_col = numeric_data.columns\nnumeric_data.head(5)","fee9ff3a":"#code to find categorical data\ncategorical_data = df_train.select_dtypes(exclude= np.number)\ncategorical_col = categorical_data.columns\ncategorical_data.head(5)","b13a4ec4":"df_train.isnull().sum()","43a678f9":"def missing_data(data):\n  total = data.isnull().sum().sort_values(ascending = False)\n  percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n\n  return pd.concat([total, percent], axis = 1, keys=['total', 'percent'])\n\nmissing_data(df_train)  \n","6e79b424":"#Now we are creating a copy of df_train to clean the file","9cd026a6":"df_train_clean = df_train.copy()\ndf_train_clean = df_train_clean.dropna()","53a7f412":"df_train_clean.isnull().sum()","c239de1f":"#droping loan_id","a5947ef7":"df_train_clean.drop(['Loan_ID'], inplace= True, axis= 1)\ndf_train_clean.info()","633221e1":"df_train_clean.nunique()","d9422c6c":"df_train_clean['Dependents'].nunique()","59d1bedd":"df_train_clean['Property_Area'].nunique()","af5f9384":"#unique values\n{column: list(df_train_clean[column].unique()) for column in df_train_clean.select_dtypes('object').columns}","a264baec":"#value counts\na = df_train_clean['Gender'].value_counts()\nb = df_train_clean['Married'].value_counts()\nd = df_train_clean['Education'].value_counts()\ne = df_train_clean['Self_Employed'].value_counts()\n","2ae69033":"print(a)\nprint('\\n')\nprint(b)\nprint('\\n')\nprint(d)\nprint('\\n')\nprint(e)\n","67ed8c50":"df_train_clean.columns","ecf9dd4d":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Loan_Status'],palette = 'cool')\nplt.title(\"Loan status\")\n\nplt.subplot(1,2,2)\ncount = df_train_clean['Loan_Status'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['pink', 'green'], figsize= (10,7), explode= [0,0.1], title = \"pie chart of loan status\")","191a3d0e":"df_train_clean.columns","4f0bb3ce":"%matplotlib inline\nimport matplotlib.pyplot as plt\ndf_train_clean.hist(bins= 50, figsize= (10,10))\nplt.show()","a3d9807e":"#plot on Gender","b25c26d0":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(df_train_clean['Gender'])\nplt.title(\"Count of male and female\")\n\n\n\nplt.subplot(1,2,2)\nsns.countplot(df_train_clean['Gender'], hue= df_train_clean['Loan_Status'], palette= \"rocket_r\")\nplt.title(\"Loan status for male and female category\")\nplt.show()\n\nplt.subplot(2,1,1)\ncount = df_train_clean['Gender'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['yellow', 'green'], figsize= (10,7), explode= [0,0.1], title = \"Pie chart for Gender\")\n\na = df_train_clean['Gender'].value_counts()\na","3fcb27d8":"df_train_clean.columns","1af72b3e":"#PLOT ON MARRIED","ee484e0c":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(df_train_clean['Married'])\nplt.title(\"Bar chart on Applicant married\")\n\nplt.subplot(1,2,2)\ncount = df_train_clean['Married'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['silver', 'green'], figsize= (10,7), explode= [0,0.1], title = \"Pie chart for Applicant married\")\n\n","af2bc933":"#Insights\n\n#64.8 % are married\n#35.2% are unmarried","a65377ca":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Married'], hue= df_train_clean['Gender'], palette= \"rocket_r\")\nplt.title(\" Marriage status for male and female category\")\nplt.show()","98cc8530":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(df_train_clean['Education'])\nplt.title(\"Bar chart on Education\")\n\nplt.subplot(1,2,2)\ncount = df_train_clean['Education'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['silver', 'green'], figsize= (10,7), explode= [0,0.1], title = \"Pie chart for Applicant Education\")\n\n","072ba8b6":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Education'], hue= df_train_clean['Loan_Status'], palette= \"rocket_r\")\nplt.title(\" Eduaction vs loan status\")\nplt.show()","891126ec":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Education'], hue= df_train_clean['Gender'], palette= \"rocket_r\")\nplt.title(\" Eduaction vs Gender\")\nplt.show()","f55acc5b":"df_train_clean.columns","dfa2ab23":"#Self-Employed","cf0b32d8":"plt.subplot(1,2,1)\ncount = df_train_clean['Self_Employed'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['yellow', 'green'], figsize= (10,7), explode= [0,0.1], title = \"Pie chart for Self_Employed\")","5ced977b":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Self_Employed'], hue= df_train_clean['Loan_Status'], palette= \"rocket_r\")\nplt.title(\" Self_Employed vs Loan_Status\")\nplt.show()","c0e6c73b":"plt.subplot(1,2,1)\nsns.countplot(df_train_clean['Self_Employed'], hue= df_train_clean['Gender'], palette= \"rocket_r\")\nplt.title(\" Self_Employed vs Gender\")\nplt.show()","3ecf7778":"#Property Area","5283c6b4":"df_Property_Area=df_train_clean['Property_Area'].value_counts().to_frame().reset_index().rename(columns={'index':'Property_Area','Property_Area':'count'})\ndf_Property_Area","4e4cae2e":"#Applicant Income","2f5a5d50":"df_train_clean.ApplicantIncome.describe().T","9a5a6a60":"plt.hist(df_train_clean['ApplicantIncome'],bins=30);","729950e3":"plt.figure(figsize= (15,4))\nplt.subplot(1,2,1)\nsns.distplot(df_train_clean['ApplicantIncome'])\n\n\nplt.subplot(1,2,2)\nsns.boxplot(df_train_clean['ApplicantIncome'], palette= 'Accent')","32998206":"min_income=df_train_clean.ApplicantIncome.min()\nmax_income=df_train_clean.ApplicantIncome.max()\nmean_income=df_train_clean.ApplicantIncome.mean()\n\nprint(min_income)\nprint(max_income)\nprint(mean_income)","998ee53f":"SE_Y_income=df_train_clean[df_train_clean[\"Self_Employed\"]==\"Yes\"]\nSE_N_income=df_train_clean[df_train_clean[\"Self_Employed\"]==\"No\"]\n\n\nminY_income=SE_Y_income.ApplicantIncome.min()\nmaxY_income=SE_Y_income.ApplicantIncome.max()\nmeanY_income=SE_Y_income.ApplicantIncome.mean()\n\nminN_income=SE_N_income.ApplicantIncome.min()\nmaxN_income=SE_N_income.ApplicantIncome.max()\nmeanN_income=SE_N_income.ApplicantIncome.mean()","3dbc2303":"print(\"Self employed minimum income {}\" .format(minY_income))\nprint(\"Self employed minimum income {}\" .format(maxY_income))\nprint(\"Self employed mean income {}\" .format(meanY_income))\nprint(\"Employed minimum income {}\" .format(minN_income))\nprint(\"Employed maximum income {}\" .format(maxN_income))\nprint(\" Employed mean income income {}\" .format(meanN_income))\n","aea1557c":"df_property_area = df_train_clean['Property_Area'].value_counts().to_frame().reset_index(). rename(columns={'index':'Property_Area','Property_Area':'count'})\ncolors=['cyan','darkblue',\"darkcyan\"]\n","aa060d5c":"fig = go.Figure([go.Pie(labels= df_property_area['Property_Area'], values =  df_property_area['count'] ) ])","357f2806":"fig.update_traces(hoverinfo = 'label+percent' , textinfo = 'percent+value', values = df_Property_Area['count'])\nfig.update_layout(title=\"Property Area Count\",title_x=0.5)\nfig.show()","9ed8aede":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(df_train_clean['Property_Area'])\nplt.title(\"Bar chart on Property area\")\n\ndf_Property_Area=df_train_clean['Property_Area'].value_counts().to_frame().reset_index().rename(columns={'index':'Property_Area','Property_Area':'count'})\ndf_Property_Area","1dc68084":"fig = px.scatter(df_train_clean, x='ApplicantIncome', y='LoanAmount',color=\"Property_Area\")\nfig","a375be1f":"plt.subplot(1,2,1)\ncount = df_train_clean['Credit_History'].value_counts()\ncount.plot.pie(    autopct = '%1.1f%%',   colors=['pink', 'green'], figsize= (10,7), explode= [0,0.1], title = \"Pie chart for Credit_History\")","409fea96":"plt.figure(figsize= (9,4))\nplt.subplot(1,2,1)\nsns.countplot(df_train_clean['Credit_History'])\nplt.title(\"Bar chart on Credit_History\")\n\ndf_Property_Area=df_train_clean['Credit_History'].value_counts().to_frame().reset_index().rename(columns={'index':'Credit_History','Credit_History':'count'})\n\ndf_Property_Area","01910389":"df_train_clean.head(5)","6620653b":"df_cm_train = df_train_clean.copy()","b6c580ad":"df_cm_train.columns","c9ea3c12":"df_cm_train['Gender'] = df_cm_train['Gender'].replace(['Male','Female'],[1,0])","00983869":"df_cm_train['Married'] = df_cm_train['Married'].replace(['Yes','No'],[1,0])\ndf_cm_train['Dependents'] = df_cm_train['Dependents'].replace(['0','1','2'],[0,1,2])\ndf_cm_train['Dependents'] = df_cm_train['Dependents'].replace('3+' , 3)\ndf_cm_train['Education'] = df_cm_train['Education'].replace(['Graduate' , 'Not Graduate'],[1,0])\ndf_cm_train['Self_Employed'] = df_cm_train['Self_Employed'].replace(['Yes','No'],[1,0])\ndf_cm_train['Property_Area'] = df_cm_train['Property_Area'].replace(['Urban' ,'Rural' ,'Semiurban'],[0,1,2])\ndf_cm_train['Loan_Status'] = df_cm_train['Loan_Status'].replace(['Y','N'],[1,0])","f5e49d25":"df_cm_train.isnull().sum()","ed80ece2":"df_cm_train.head(5)","41903636":"#Property_Area is having three values. so need to convert them into three features for better analysis","67665736":"df_cm_train = pd.get_dummies(df_cm_train , columns = ['Property_Area'])","9207509d":"df_cm_train.head(3)","4d4a6077":"#Correlation Matrix","3e755553":"corr = df_cm_train.corr()\nplt.figure(figsize = (10,5))\nsns.heatmap(corr, annot = True)\nplt.show()","7a1b2cd3":"df_test.head(5)","5b0d4341":"df_test.isnull().sum()","00f4e3c9":"df_test.dropna(inplace= True) ","7c96beba":"df_test.head(2) ","a4186a57":"#Data Preprocessing","431db683":"df_test['Gender'] = df_test['Gender'].replace(['Male','Female'],[1,0])","f4ff6628":"df_test['Married'] = df_test['Married'].replace(['Yes','No'],[1,0])\ndf_test['Dependents'] = df_test['Dependents'].replace(['0','1','2'],[0,1,2])\ndf_test['Dependents'] = df_test['Dependents'].replace('3+' , 3)\ndf_test['Education'] = df_test['Education'].replace(['Graduate' , 'Not Graduate'],[1,0])\ndf_test['Self_Employed'] = df_test['Self_Employed'].replace(['Yes','No'],[1,0])\ndf_test['Property_Area'] = df_test['Property_Area'].replace(['Urban' ,'Rural' ,'Semiurban'],[0,1,2])","56d7b216":"df_test.isnull().sum()","ebc95693":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import classification_report,plot_confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nfrom sklearn.model_selection import train_test_split","ed37eb44":"train= df_cm_train.drop(['Loan_Status'], axis=1)\ntrain_target=df_cm_train['Loan_Status']","4c95d72d":"X_train,X_test,y_train,y_test = train_test_split(train, train_target, random_state = 0)","fdea3f35":"#Modelling\n","c555f068":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier","318a5733":"#Decision treee","4681cce7":"from sklearn.tree import DecisionTreeClassifier","e4d11277":"X_train, X_test, y_train, y_test = train_test_split(train,train_target, test_size=0.3, random_state= 124)","1815489c":"print(X_train.shape, X_test.shape)","5bf6b2ef":"model= DecisionTreeClassifier()","f306567f":"model.fit(X_train, y_train)","47331c71":"prediction = model.predict(X_test)","479ededf":"from sklearn.metrics import classification_report, confusion_matrix","c613a6ef":"print (confusion_matrix(y_test, prediction))","3dfdc7c1":"print (classification_report (y_test, prediction))","0ba2f69b":"#logistic regression","41db7429":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","fd63d88b":"y_pred_loj = loj_model.predict(X_test)","ef852ed6":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","f2a25434":"accuracy_score(y_test, y_pred_loj)","f3eaa06e":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\n\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","33cb6f1f":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()\n","ee19a443":"print(classification_report(y_test, y_pred_loj))","501fcc7a":"#Random Forest Classifier","a652ddc0":"from sklearn.ensemble.forest import RandomForestClassifier","f6fe5d83":"rf_model =RandomForestClassifier(n_estimators =150)","75b9f262":"rf_model.fit(X_train, y_train)","5dc105ee":"rf_prediction = rf_model.predict(X_test)","a1e992b0":"print(classification_report(y_test, rf_prediction))","6c6e1711":"print(confusion_matrix(y_test, rf_prediction))","3fc6b0f3":"#Feature Importance","ad59ff73":"feat_importances = pd.Series(rf_model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\n#feat_importances.nsmallest(20).plot(kind='barh')\nplt.show()","9878c954":"#Hyper parameter tuning","acfa3b3b":"#LGBM CLASSIFIER","e15bde4c":"from lightgbm import LGBMClassifier\nfrom sklearn.model_selection import ShuffleSplit, cross_val_score\nfrom sklearn.metrics import roc_auc_score","66aa34b9":"model=LGBMClassifier(colsample_bytree=0.5, learning_rate=0.03,\n                     n_estimators=600, objective='binary', reg_alpha=0.1,\n                     random_state=101,reg_lambda=0.8)\n\nmodel.fit(X_train,y_train)","31f13dfb":"cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)\nscores=cross_val_score(model, X_test, y_test, cv=cv,scoring='roc_auc')\nscores.mean()","14d7b1ac":"val_pred= model.predict_proba(X_test)[:,1]","40be3096":"val_pred","2f0ea026":"print(roc_auc_score(y_test,val_pred))","ae927e63":"#LOGISTIC REGRESSION","c7e27548":"#Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel\n","302798de":"model.fit (X_train, y_train)","c35cf867":"prediction = model.predict(X_test)","1c9f0d5e":"prediction","551c403f":"from sklearn.metrics import classification_report","589bce07":"print (classification_report (y_test, prediction))","ce07d3c8":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","7b3cdd92":"cm = confusion_matrix(y_test, prediction)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':11}, cmap = 'PuBu',fmt=\".1f\");","6238e3a9":"#Gaussian Naive Bayes","6d57db60":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","bd14c17f":"y_pred_nb = nb_model.predict(X_test)","e447404c":"accuracy_score(y_test, y_pred_nb)","fde96545":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_nb)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","dc08bc3a":"print(classification_report(y_test, y_pred_nb))","54d568dc":"#KNN","ad3f2ef0":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","3849a12e":"y_pred_knn = knn_model.predict(X_test)","8b113a76":"accuracy_score(y_test, y_pred_knn)","e4d8b9d7":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_knn)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","4e171866":"print(classification_report(y_test, y_pred_knn))","2af5bd2f":"#Random Forest","7ec8075d":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)","66bd9965":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","5cfd8b80":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_rf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","4884c982":"print(classification_report(y_test, y_pred_rf))","4a3edec0":"Importance = pd.DataFrame({\"Importance\": rf_model.feature_importances_*100},\n                         index = X_train.columns)","e8b2f778":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","98a4878e":"#XG Boost","8e2d29db":"from xgboost import XGBClassifier\nimport xgboost as xgb\nxgb_model = XGBClassifier().fit(X_train, y_train)","9274ece7":"y_pred_xgb_model = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_model)","e79f17a6":"print(classification_report(y_test, y_pred_xgb_model))","02251e41":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_xgb_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","e0d016fb":"from xgboost import XGBClassifier\n# Model Tuning\nXGB_model = XGBClassifier(random_state = 42, max_depth = 8, n_estimators = 3000, \n                          reg_lambda = 1.2, reg_alpha = 1.2, \n                          min_child_weight = 1,objective = 'binary:logistic',\n                         learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5,\n                          eval_metric = 'auc').fit(X_train, y_train)","274f9cbd":"y_pred_XGB_model = XGB_model.predict(X_test)\naccuracy_score(y_test, y_pred_XGB_model)","95cbdb25":"print(classification_report(y_test, y_pred_XGB_model))","ebb7eaeb":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_XGB_model)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu',fmt=\".1f\")","57c8db07":"models = [\n    knn_model,\n    nb_model,\n    xgb_model,\n    XGB_model,\n    rf_model,\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","f3823d84":"Education","9462ec23":"Missing Values","a4b7ebfe":"EXPLORATORY DATA ANALYSIS","b539200e":"Percentage of missing values"}}