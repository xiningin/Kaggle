{"cell_type":{"0bc3367b":"code","48f7ce3d":"code","235249e0":"code","007409b0":"code","0c5a2569":"code","c380b591":"code","4252f673":"code","e85fed43":"code","fdde04a7":"code","072efebd":"code","b972cf0d":"code","e59684d6":"code","a50f75ce":"code","e2275caa":"code","4d133502":"code","191248ea":"code","b89aabea":"code","7755b442":"code","d67ae08c":"code","64566469":"code","945ab549":"code","e47da0a9":"code","6edb4238":"code","2cbfa0c8":"markdown","09f5ac76":"markdown","d29e3fef":"markdown","0b8a5db8":"markdown","6f9ebbea":"markdown","448b4d7d":"markdown"},"source":{"0bc3367b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RepeatedStratifiedKFold, cross_val_score\nimport lightgbm as lgb","48f7ce3d":"train = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/santander-customer-transaction-prediction\/test.csv')","235249e0":"train.head()","007409b0":"test.head()","0c5a2569":"train.describe()","c380b591":"test.describe()","4252f673":"train.isnull().sum().value_counts()","e85fed43":"test.isnull().sum().value_counts()","fdde04a7":"def reduce_mem_df(df):\n    before = df.memory_usage().sum() \/ 1024**2\n    print(f'Before memory reducing: {before}')\n    for col in df.columns:\n        if df[col].dtype != 'object':\n            IsInt = False\n            mn = df[col].min()\n            mx = df[col].max()\n            \n            check = (df[col] - df[col].astype(np.int64)).sum()\n            if -0.01 < check and check < 0.01:\n                IsInt = True\n            if IsInt:\n                if mn >= 0:\n                    if mx < 2*8 - 1:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 2*16 - 1:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 2*32 - 1:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)\n            else:\n                df[col] = df[col].astype(np.float32)\n    after = df.memory_usage().sum() \/ 1024**2\n    print(f'After memory reducing: {after}')","072efebd":"reduce_mem_df(train)","b972cf0d":"reduce_mem_df(test)","e59684d6":"train['target'].value_counts(normalize=True)","a50f75ce":"data = train['target'].value_counts()\nplt.figure(figsize=(10, 5), dpi=200)\nsns.barplot(x=data.index, y=data.values, palette='winter')\nplt.show()","e2275caa":"train_correlations = train.drop(['ID_code', 'target'], axis=1).corr()\ntrain_correlations = train_correlations.values.flatten()\ntrain_correlations = train_correlations[train_correlations != 1]\n\ntest_correlations = test.drop(['ID_code'], axis=1).corr()\ntest_correlations = test_correlations.values.flatten()\ntest_correlations = test_correlations[test_correlations != 1]","4d133502":"plt.figure(figsize=(10, 5), dpi=200)\nsns.histplot(train_correlations, color='Blue', kde=True, label='train')\nsns.histplot(test_correlations, color='Green', kde=True, label='test')\nplt.legend()\nplt.title('Features correlation distribution', family='serif', weight='bold', size=15)\nplt.show()","191248ea":"y = train['target']\nx = train.drop(['ID_code', 'target'], axis=1)\nx_test = test.drop('ID_code', axis=1)","b89aabea":"folds = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)","7755b442":"model = lgb.LGBMClassifier(num_leaves=128, max_depth=16, n_estimators=1500, metrics='auc', \n                           boosting_type='gbdt', learning_rate=0.01)","d67ae08c":"scores = cross_val_score(model, x, y, scoring='accuracy', n_jobs=-1, cv=folds)\nnp.mean(scores)","64566469":"x_train, x_valid, y_train, y_valid = train_test_split(x, y, random_state=42, test_size=0.15)\nmodel.fit(x_train, y_train, eval_set=[(x_train, y_train), (x_valid, y_valid)], \n          early_stopping_rounds=100, verbose=100)","945ab549":"params = {'num_leaves': 128,\n         'max_depth': 16,\n         'learning_rate': 0.01,\n         'boosting': 'gbdt',\n         'random_state': 42,\n         'metric': 'auc'}\npredictions = np.zeros(len(x_test))\nfeatures_importance = pd.DataFrame()\nfeatures_importance['feature'] = x.columns\nfeatures_importance['importance'] = 0\nfor train_index, valid_index in folds.split(x, y):\n    x_train, y_train = x.loc[train_index], y[train_index]\n    x_valid, y_valid = x.loc[valid_index], y[valid_index]\n    train_data = lgb.Dataset(x_train, label=y_train)\n    valid_data = lgb.Dataset(x_valid, label=y_valid)\n    \n    model = lgb.train(params, train_data, valid_sets=[train_data, valid_data], num_boost_round=1500, verbose_eval=500, early_stopping_rounds=150)\n    y_pred = model.predict(x_test, num_iteration=model.best_iteration)\n    predictions += y_pred\n    features_importance['importance'] += model.feature_importance()\npredictions \/= 10\nfeatures_importance['importance'] \/= 10","e47da0a9":"features_importance.sort_values(by='importance', ascending=False)[:10]","6edb4238":"test_id = test['ID_code']\nsubmit = pd.DataFrame({'ID_code': test_id, 'target': predictions})\nsubmit.to_csv('.\/submit.csv', index=False)","2cbfa0c8":"# Reduce memory","09f5ac76":"# Missing value","d29e3fef":"### LightGBM","0b8a5db8":"# EDA","6f9ebbea":"# Loading data","448b4d7d":"# Model"}}