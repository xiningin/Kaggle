{"cell_type":{"49a4be31":"code","568b802d":"code","7c29adf6":"code","3b8a99d0":"code","f33966bd":"code","705b3048":"code","ee01f637":"code","2f24c0a3":"code","d7f3a129":"code","8a2660f1":"code","7472d8a5":"code","e67dee5f":"code","3705ef8e":"code","2841a570":"code","fdc6e79a":"code","2dd49f60":"code","a57b218c":"code","bc3f779c":"code","b4bad673":"code","fda5e896":"code","12c46c28":"code","39794e73":"code","b5f0e39d":"code","5748c161":"code","13defc1c":"code","f2af2fc6":"code","19c599a6":"code","8cc6eee8":"code","0ef51505":"code","49678732":"code","d81b1687":"code","bfbf5f57":"code","e1bebe31":"code","255f0bfe":"code","456db9b2":"code","da830333":"code","80167703":"code","1a12f2a8":"code","303f4440":"code","cf92e4c1":"code","ac73d3b4":"code","8a57afd0":"code","45c8d245":"code","41275ec1":"code","2ea77179":"code","1b75f7c8":"code","e78a3a4e":"code","1c25cdff":"code","7b004316":"code","0ceb2a7e":"code","c742a1af":"code","b8dfc10d":"code","e3456f97":"code","d68d89a9":"code","b27c7e43":"code","65418e31":"code","c7bd105e":"code","14d596bd":"markdown","6f70c228":"markdown","6b83c470":"markdown","eb2654c2":"markdown","badf51d3":"markdown","403bb881":"markdown","9a481f3c":"markdown","3e8ceba6":"markdown","7f705ccf":"markdown","be5da550":"markdown","74b9d057":"markdown","57559f9b":"markdown"},"source":{"49a4be31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","568b802d":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport datetime\nfrom itertools import chain\nimport re\nimport json\nfrom tqdm.autonotebook import tqdm\nimport string\nimport collections\nfrom textblob import TextBlob\nfrom pathlib import Path\nimport collections\nimport pickle\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport nltk\nfrom nltk.probability import FreqDist\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, precision_score, recall_score, f1_score, accuracy_score\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n\nfrom keras.preprocessing import sequence, text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import utils\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.callbacks import *\nfrom keras.models import Sequential\nfrom keras.layers.recurrent import LSTM, GRU\nfrom keras.layers import Dense, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.vis_utils import plot_model\n\nimport en_core_web_lg\nimport spacy\nfrom spacy.lang.en import English\nfrom spacy.util import minibatch, compounding\nfrom spacy import displacy\n\nimport warnings\nwarnings.filterwarnings('ignore')","7c29adf6":"#define stopwords\nfrom nltk.corpus import stopwords\n\nstopwords_list = stopwords.words('english') + list(string.punctuation)\nstopwords_list += [\"''\", '\"\"', '...', '``']","3b8a99d0":"def clean_text(txt):\n     return re.sub('[^A-Za-z0-9.]+', ' ', str(txt).lower())","f33966bd":"def text_cleaning(text, flg_stemm = False, flg_lemm = True, lst_stopwords = None):\n    '''\n    Converts all text to lower case, tokenize, remove multiple spaces, stopwords, stemming, lemmatize, \n    then convert all back to string\n    \n    text: string - name of column containing text\n    lst_stopwords: list - list of stopwords to remove\n    flg_stemm: bool - whether stemming is to be applied\n    flg_lemm: bool - whether lemmitisation is to be applied\n    '''\n    \n    #clean (convert to lowercase and remove punctuations and characters and then strip)\n    text = re.sub(r'[^\\w\\s]', '', str(text).lower().strip())\n            \n    #tokenize (convert from string to list)\n    lst_text = text.split()\n    \n    #remove Stopwords\n    if lst_stopwords is not None:\n        lst_text = [word for word in lst_text if word not in \n                    stopwords_list]\n                \n    #stemming (remove -ing, -ly, ...)\n    if flg_stemm == True:\n        ps = nltk.stem.porter.PorterStemmer()\n        lst_text = [ps.stem(word) for word in lst_text]\n                \n    #lemmatisation (convert the word into root word)\n    if flg_lemm == True:\n        lem = nltk.stem.wordnet.WordNetLemmatizer()\n        lst_text = [lem.lemmatize(word) for word in lst_text]\n            \n    #back to string from list\n    text = \" \".join(lst_text)\n    return text","705b3048":"MAX_LENGTH = 64\nOVERLAP = 20\n    \ndef shorten_sentences(sentences):\n    \"\"\"\n    Sentences that have more than MAX_LENGTH words will be split\n    into multiple sentences with overlappings.\n    \"\"\"\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences","ee01f637":"#define paths\nos.listdir('\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/')\ntrain_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\ntest_path = '..\/input\/coleridgeinitiative-show-us-the-data\/test'","2f24c0a3":"#create a function to get the text from the JSON file and append it to the new column in table\ndef read_json_pub(filename, train_path = train_path, output = 'text'):\n    json_path = os.path.join(train_path, (filename + '.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title'))\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data","d7f3a129":"#read \ntrain = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\n\n#review\ntrain.head()","8a2660f1":"train['cleaned_label'].nunique()","7472d8a5":"import nltk\n\nDATA = []\nlabel_count = 0\nempty_count = 0\n\nfor idx,row in tqdm(train.iterrows()):\n    pub = \"..\/input\/coleridgeinitiative-show-us-the-data\/train\/\" + row.Id + \".json\"            \n    f = open(pub)  \n    data = json.load(f)      \n\n    balanced = False\n    \n    sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(data))]\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n    for sentence in sentences:          \n     \n        a = re.search(row.cleaned_label.lower(), sentence)      \n        b = re.search(row.dataset_label.lower(), sentence)\n        c = re.search(row.dataset_title.lower(), sentence)\n        cleaned_label = row.cleaned_label.lower()\n        dataset_label = row.dataset_label.lower()\n        dataset_title = row.dataset_title.lower()\n        \n        if  a != None:\n            DATA.append((sentence, cleaned_label))\n            label_count = label_count + 1\n            balanced = True\n        elif b != None:\n            DATA.append((sentence, dataset_label))\n            label_count = label_count + 1\n            balanced = True\n        elif c != None:\n            DATA.append((sentence, dataset_title))\n            label_count = label_count + 1\n            balanced = True            \n        else:\n            if balanced:\n                empty_count = empty_count + 1\n                balanced = False\n    \nprint('Text with dataset:', label_count)\nprint('Text without dataset:', empty_count)","e67dee5f":"DATA[:5]","3705ef8e":"#save to dataframe\ntrain_df = pd.DataFrame(DATA)\ntrain_df = train_df.rename({0: 'Sentence', 1: 'Label'}, axis = 1)\n\n#review\ntrain_df.tail(10)","2841a570":"train_df['Label'].nunique()","fdc6e79a":"print(train_df['Sentence'][10])\nprint('\\n')\nprint(train_df['Label'][10])","2dd49f60":"print(train_df['Sentence'][888])\nprint('\\n')\nprint(train_df['Label'][888])","a57b218c":"print(train_df['Sentence'][51179])\nprint('\\n')\nprint(train_df['Label'][51179])","bc3f779c":"from sklearn.model_selection import train_test_split\n\nX = train_df['Sentence'].to_numpy()\ny = train_df['Label'].to_numpy()","b4bad673":"#split traing data into training a validation sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)","fda5e896":"#https:\/\/developers.google.com\/machine-learning\/guides\/text-classification\/step-3\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df = 2,                       #ignore terms that have a document frequency strictly lower than the given threshold\n                             dtype = 'int32', \n                             strip_accents = 'unicode',\n                             analyzer = 'word',\n                             token_pattern = r'\\w{1,}',\n                             ngram_range = (1, 4), \n                             use_idf = 1,                      #enable inverse-document-frequency reweighting\n                             smooth_idf = 1,                   #weights by adding one to document frequencies\n                             sublinear_tf = 1,                 #apply sublinear tf scaling\n                             stop_words = stopwords_list)\n\n#learn vocabulary from training texts and vectorize training texts\nvectorizer = vectorizer.fit(list(X_train) + list(X_test))\n\n#transform Bag-of-Words textual data to numeric\nX_train = vectorizer.transform(X_train)\nX_test = vectorizer.transform(X_test)","12c46c28":"print('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)","39794e73":"print(train_df['Sentence'][10])\nprint(X_train[10])","b5f0e39d":"vectorizer.get_feature_names()[:20]","5748c161":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\n\n#select top 'k' of the vectorized features, limit on the number of features. We use the top 20K features\ntop_k = 20000\n\nselector = SelectKBest(f_classif, k = min(top_k, X_train.shape[1]))\nselector.fit(X_train, y_train)\nX_train = selector.transform(X_train).astype('float32')\nX_test = selector.transform(X_test).astype('float32')","13defc1c":"print('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)","f2af2fc6":"print(train_df['Sentence'][10])\nprint(X_train[10])","19c599a6":"from sklearn import preprocessing\n\n#use the LabelEncoder to convert text labels to integers, 0, 1, 2, etc.\nencoder = preprocessing.LabelEncoder()\n\n#since we have two different data set (X_train and X_test), \n#we need to fit it on all of our data otherwise there might be some categories in the test set X_test that were not in the train set X_train \n#and we will get errors\nencoder.fit(list(y_train) + list(y_test)) \ny_train = encoder.transform(y_train)\ny_test = encoder.transform(y_test)","8cc6eee8":"encoder.classes_","0ef51505":"print('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","49678732":"y_train","d81b1687":"from sklearn.ensemble import RandomForestClassifier\n\n#create a tokenization a modelling pipeline\nRandomForestClassifier_model = RandomForestClassifier(n_estimators = 100, random_state = 123) #model the text\n\n#fit the pipeline to the training data\nRandomForestClassifier_model.fit(X_train, y_train)","bfbf5f57":"#predict \nRandomForestClassifier_yhat_train = RandomForestClassifier_model.predict(X_train)\nRandomForestClassifier_yhat_test = RandomForestClassifier_model.predict(X_test)\n\n#train accuracy \nRandomForestClassifier_train_accuracy = accuracy_score(y_train, RandomForestClassifier_yhat_train) * 100\nprint('Train accuracy: {0}'.format(RandomForestClassifier_train_accuracy))\n\n#test accuracy \nRandomForestClassifier_test_accuracy = accuracy_score(y_test, RandomForestClassifier_yhat_test) * 100\nprint('Test accuracy: {0}'.format(RandomForestClassifier_test_accuracy))","e1bebe31":"#save\nfilename = 'RandomForestClassifier_model.sav'\npickle.dump(RandomForestClassifier_model, open(filename, 'wb'))","255f0bfe":"from sklearn.model_selection import KFold, cross_val_score\n\n#get cross validation to make sure model has gotten most of the patterns from the data correctly, \n#and its not picking up too much on the noise\nk_fold = KFold(n_splits = 5)\nRandomForestClassifier_CV = cross_val_score(RandomForestClassifier_model, X_train, y_train, \n                                            cv = k_fold, scoring = 'accuracy', n_jobs = -1).mean()\nRandomForestClassifier_CV","456db9b2":"from sklearn.metrics import classification_report, precision_score, recall_score, f1_score, accuracy_score\n\n#get classification report\nprint('Model: RandomForestClassifier', '\\n', classification_report(y_test, RandomForestClassifier_yhat_test))","da830333":"#summary table\nsummary_table = pd.DataFrame({'Model': [],\n                              'Accuracy': [],\n                              'CV': [],\n                              'Precision': [], 'Recall': [], 'F1': []})","80167703":"summary_table.loc[0] = ['CLF RandomForestClassifier',\n                        round(accuracy_score(y_test, RandomForestClassifier_yhat_test), 2),\n                        round(RandomForestClassifier_CV, 2),\n                        round(precision_score(y_test, RandomForestClassifier_yhat_test, average = 'macro'), 2), \n                        round(recall_score(y_test, RandomForestClassifier_yhat_test, average = 'macro'), 2), \n                        round(f1_score(y_test, RandomForestClassifier_yhat_test, average = 'macro'), 2)]\nsummary_table.head()","1a12f2a8":"from sklearn.linear_model import SGDClassifier\n\n#create a tokenization a modelling pipeline\nSGDClassifier_model = SGDClassifier(loss = 'hinge', #use Linear SVC(SVM) model when the parameter loss is set to 'hinge'\n                                                      penalty = 'l2',\n                                                      alpha = 1e-3,\n                                                      random_state = 123,\n                                                      max_iter = 5) #model the text\n\n#fit the pipeline to the training data\nSGDClassifier_model.fit(X_train, y_train) ","303f4440":"#predict \nSGDClassifier_yhat_train = SGDClassifier_model.predict(X_train)\nSGDClassifier_yhat_test = SGDClassifier_model.predict(X_test)\n\n#train accuracy \nSGDClassifier_train_accuracy = accuracy_score(y_train, SGDClassifier_yhat_train) * 100\nprint('Train accuracy: {0}'.format(SGDClassifier_train_accuracy))\n\n#test accuracy \nSGDClassifier_test_accuracy = accuracy_score(y_test, SGDClassifier_yhat_test) * 100\nprint('Test accuracy: {0}'.format(SGDClassifier_test_accuracy))","cf92e4c1":"#save\nfilename = 'SGDClassifier_model.sav'\npickle.dump(SGDClassifier_model, open(filename, 'wb'))","ac73d3b4":"#get cross validation\nSGDClassifier_CV = cross_val_score(SGDClassifier_model, X_train, y_train,\n                                   cv = k_fold, scoring = 'accuracy', n_jobs=-1).mean()\nSGDClassifier_CV","8a57afd0":"#get classification report\nprint('Model: Support Vector Machine', '\\n', classification_report(y_test, SGDClassifier_yhat_test))","45c8d245":"summary_table.loc[1] = ['CLF Linear Support Vector Machine',\n                        round(accuracy_score(y_test, SGDClassifier_yhat_test), 2),\n                        round(SGDClassifier_CV, 2),\n                        round(precision_score(y_test, SGDClassifier_yhat_test, average = 'macro'), 2), \n                        round(recall_score(y_test, SGDClassifier_yhat_test, average = 'macro'), 2), \n                        round(f1_score(y_test, SGDClassifier_yhat_test, average = 'macro'), 2)]\nsummary_table.head()","41275ec1":"from sklearn.naive_bayes import MultinomialNB\n\n#create a tokenization a modelling pipeline\nMultinomialNB_model = MultinomialNB() #model the text\n\n#fit the pipeline to the training data\nMultinomialNB_model.fit(X_train, y_train)","2ea77179":"#predict \nMultinomialNB_yhat_train = MultinomialNB_model.predict(X_train)\nMultinomialNB_yhat_test = MultinomialNB_model.predict(X_test)\n\n#train accuracy \nMultinomialNB_train_accuracy = accuracy_score(y_train, MultinomialNB_yhat_train) * 100\nprint('Train accuracy: {0}'.format(MultinomialNB_train_accuracy))\n\n#test accuracy \nMultinomialNB_test_accuracy = accuracy_score(y_test, MultinomialNB_yhat_test) * 100\nprint('Test accuracy: {0}'.format(MultinomialNB_test_accuracy))","1b75f7c8":"#save\nfilename = 'MultinomialNB_model.sav'\npickle.dump(MultinomialNB_model, open(filename, 'wb'))","e78a3a4e":"#get cross validation\nMultinomialNB_CV = cross_val_score(MultinomialNB_model, X_train, y_train,\n                                   cv = k_fold, scoring = 'accuracy', n_jobs=-1).mean()\nMultinomialNB_CV","1c25cdff":"from sklearn.metrics import classification_report, precision_score, recall_score, f1_score, accuracy_score\n\n#get classification report\nprint('Model: MultinomialNB', '\\n', classification_report(y_test, MultinomialNB_yhat_test))","7b004316":"#update summary table\nsummary_table.loc[2] = ['CLF MultinomialNB',\n                        round(accuracy_score(y_test, MultinomialNB_yhat_test), 2),\n                        round(MultinomialNB_CV, 2),\n                        round(precision_score(y_test, MultinomialNB_yhat_test, average = 'macro'), 2), \n                        round(recall_score(y_test, MultinomialNB_yhat_test, average = 'macro'), 2), \n                        round(f1_score(y_test, MultinomialNB_yhat_test, average = 'macro'), 2)]\nsummary_table.head()","0ceb2a7e":"summary_table.to_csv('clf_summary_table.csv')","c742a1af":"#get text\ntqdm.pandas()\ntrain['text'] = train['Id'].progress_apply(read_json_pub)\n\n#clean text\ntrain['text'] = train['text'].progress_apply(clean_text)","b8dfc10d":"from functools import partial\n\n#read data\nsample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\n\n#apply the function to submission data\ntqdm.pandas()\nsample_submission['text'] = sample_submission['Id'].progress_apply(partial(read_json_pub, train_path = test_path))\n\n#review\nsample_submission.head()","e3456f97":"literal_matching = True\nRandomForestClassifier_prediction = True\nSGDClassifier_prediction = True\nMultinomialNB_prediction = True\n\nid_list = []\nlabels_list = []\n\nfor index, row in tqdm(sample_submission.iterrows()):\n\n    sample_text = row['text']\n\n    row_id = row['Id']\n    \n    #takes only the rows where train file is identical to a test file\n    temp_df = train[train['text'] == clean_text(sample_text)]\n    cleaned_labels = temp_df['cleaned_label'].to_list()\n    \n    #literal_matching \n    if literal_matching:\n        for known_label in existing_labels:\n            if known_label in sample_text.lower():    \n                cleaned_labels.append(clean_text(known_label))\n            \n        print('cleaned label:', set(cleaned_labels))   \n    \n    #classifier \n    if RandomForestClassifier_prediction:\n        \n        #extract sentences\n        sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(sample_text))]\n        sentences = shorten_sentences(sentences) # make sentences short\n        sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n        #predict\n        RandomForestClassifier_labels = RandomForestClassifier_model.predict(selector.transform(vectorizer.transform(sentences).toarray()))\n    \n        #get labels\n        RandomForestClassifier_labels = encoder.inverse_transform(RandomForestClassifier_labels) \n        print('RandomForestClassifier_label:', set(RandomForestClassifier_labels))\n        RandomForestClassifier_labels = set(RandomForestClassifier_labels)\n        \n    cleaned_labels += RandomForestClassifier_labels\n\n    if MultinomialNB_prediction:\n        \n        #extract sentences\n        sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(sample_text))]\n        sentences = shorten_sentences(sentences) # make sentences short\n        sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n        \n        #predict\n        MultinomialNB_labels = MultinomialNB_model.predict(selector.transform(vectorizer.transform(sentences).toarray()))\n    \n        #get labels\n        MultinomialNB_labels = encoder.inverse_transform(MultinomialNB_labels) \n        print('MultinomialNB_label:', set(MultinomialNB_labels))\n        MultinomialNB_labels = set(MultinomialNB_labels)\n        \n    cleaned_labels += MultinomialNB_labels\n    \n    if SGDClassifier_prediction:\n        \n        #extract sentences\n        sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(sample_text))]\n        sentences = shorten_sentences(sentences) # make sentences short\n        sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n        #predict\n        SGDClassifier_labels = SGDClassifier_model.predict(selector.transform(vectorizer.transform(sentences).toarray()))\n    \n        #get labels\n        SGDClassifier_labels = encoder.inverse_transform(SGDClassifier_labels) \n        print('SGDClassifier_label:', set(SGDClassifier_labels))\n        SGDClassifier_labels = set(SGDClassifier_labels)\n        \n    cleaned_labels += SGDClassifier_labels\n    \n    cleaned_labels = set(cleaned_labels)\n    cleaned_labels = [clean_text(x) for x in cleaned_labels]    \n    labels_list.append('|'.join(cleaned_labels))\n    print('label list:', labels_list)   \n    id_list.append(row_id)\n    print('\\n')","d68d89a9":"#get dataframe\nsample_submission['PredictionString'] = labels_list\nsample_submission","b27c7e43":"print(sample_submission['PredictionString'][0])\nprint('\\n')\nprint(sample_submission['PredictionString'][1])\nprint('\\n')\nprint(sample_submission['PredictionString'][2])\nprint('\\n')\nprint(sample_submission['PredictionString'][3])","65418e31":"#drop 'text'\nsample_submission.drop(columns = 'text', axis = 1, inplace = True)\nsample_submission","c7bd105e":"#save\nsample_submission.to_csv('submission.csv', index = False)\n\n#check\nsubmission = pd.read_csv('submission.csv')\nsubmission","14d596bd":"# Libraries","6f70c228":"### Vectorize Features","6b83c470":"# OBTAIN","eb2654c2":"# SGDClassifier","badf51d3":"# Create Sentences & Labels","403bb881":"# Preprocessing\n\n* Tokenize text samples into word uni+bigrams,\n* Vectorize using tf-idf encoding,\n* Select only the top 50,000 features from the vector of tokens by discarding tokens that appear fewer than 2 times and using f_classif to calculate feature importance.","9a481f3c":"### Encode Label","3e8ceba6":"# MultinomialNB","7f705ccf":"# RandomForestClassifier","be5da550":"### Train-Test-Split","74b9d057":"# PREDICTION","57559f9b":"# CLASSIFIERS: RandomForestClassifier, SVC, MultinomialNB"}}