{"cell_type":{"6e1ddb05":"code","9a8ff8d9":"code","22b20cdc":"code","ded12a41":"code","6d2d71c4":"code","1e091193":"code","94011dc2":"code","d438cecc":"code","5bd4e868":"code","1e205b52":"code","18309a2a":"code","cbb666c8":"code","49efdc76":"code","e4e5365d":"code","1a522119":"markdown","4273526b":"markdown","d897b4da":"markdown","974de325":"markdown","fc781e12":"markdown","9cffe8aa":"markdown","37e30efa":"markdown","8fb22401":"markdown","aefc704e":"markdown","e13c8929":"markdown","7688c4e7":"markdown"},"source":{"6e1ddb05":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\n\nprint(os.listdir('..\/input'))","9a8ff8d9":"# We bring the functions necessary for PCA analysis\nfrom sklearn.decomposition import PCA","22b20cdc":"# Full dataset\ndata = pd.read_csv('..\/input\/data.csv')\ndata.head()","ded12a41":"# Parameter list\nvariables = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n#variables = ['Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle']\n\ndf = data[variables]\ndf = df.dropna(how='all') # We must drop all NA values to apply PCA\ndf = df.fillna(df.mean()) # We fill these values with the mean values","6d2d71c4":"# Data visualization\ndf.head()","1e091193":"# In order to improve convergence, we standardize our data\n\nstand_df = StandardScaler().fit_transform(df.loc[:,variables].values)","94011dc2":"# Applying PCA analysis\npca = PCA(n_components=16)\npcafit = pca.fit(stand_df)\npcafeatures = pca.transform(stand_df)\n\nfeatures = range(pca.n_components_)\n\nnum_comp = 5\nvar_percent = sum(pca.explained_variance_ratio_[0:num_comp])\nprint(\"Total explained variance by the first %i components is %.5f\" % (num_comp, var_percent))","d438cecc":"# Percentage of variance explained per component\nplt.bar(features, pca.explained_variance_ratio_)\nplt.xlabel('Component number')\nplt.ylabel('Percentage of variance')\nplt.show()","5bd4e868":"principalComponents = pca.fit_transform(stand_df)\n\nprincipalDf = pd.DataFrame(data = principalComponents)\nprincipalDf = principalDf[[0, 1, 2, 3, 4]]\nprincipalDf.columns = [['PC1', 'PC2', 'PC3', 'PC4', 'PC5']]\nprincipalDf.head()","1e205b52":"g = sns.PairGrid(principalDf.loc[:,['PC1', 'PC2', 'PC3', 'PC4', 'PC5']])\ng.map_diag(plt.hist, histtype=\"step\", linewidth=2)\ng.map_offdiag(plt.scatter)\n\nplt.show()","18309a2a":"from sklearn import preprocessing\nfrom scipy.cluster.hierarchy import dendrogram, linkage","cbb666c8":"import sys\nsys.setrecursionlimit(10000)\n\ndist_sin = linkage(principalDf.loc[:,['PC1', 'PC2', 'PC3', 'PC4', 'PC5']],method='single')\nplt.figure(figsize=(20,8))\ndendrogram(dist_sin, leaf_rotation=90)\nplt.xlabel('Index')\nplt.ylabel('Distance')\nplt.suptitle(\"Dendogram: single method\",fontsize=20)\nplt.show()","49efdc76":"dist_sin = linkage(principalDf.loc[:,['PC1', 'PC2', 'PC3', 'PC4', 'PC5']],method='single')\nplt.figure(figsize=(20,8))\ndendrogram(dist_sin, leaf_rotation=90, p=100, truncate_mode='lastp')\nplt.xlabel('Index')\nplt.ylabel('Distance')\nplt.suptitle(\"Dendogram: truncated single method\",fontsize=20)\nplt.show()","e4e5365d":"dist_sin = linkage(principalDf.loc[:,['PC1', 'PC2', 'PC3', 'PC4', 'PC5']],method='complete')\nplt.figure(figsize=(20,8))\ndendrogram(dist_sin, leaf_rotation=90)\nplt.xlabel('Index')\nplt.ylabel('Distance')\nplt.suptitle(\"Dendogram: complete method\",fontsize=20)\nplt.show()","1a522119":"Lets check out if there are any clusters","4273526b":"# Hierarchical clustering algorithms applied\n\nIn order to get a sense of how many clusters we should have, we now apply our two hierarchical clustering algorithms. We begin with the functions from `scipy.cluster.hierarchy`, which contain clustering algorithms that separate these groups according to multiple criteria.\n\nThe two criteria which we are interested in are *single* and *complete*. \n\n## Single method","d897b4da":"We have *lots* of parameters! The variables we are interested in are in the list called `variables`. They are a mix of the technical qualities each player has, and the physical qualities, such as pace, jumping, etc. that also have an impact on each role and position.","974de325":"We see that this dendogram is *really* large, so we will truncate it to the first 100 clusters:","fc781e12":"And now lets do a preliminary visualization","9cffe8aa":"This dendogram makes much more sense, this shows us the importance of applying different clustering methods in order to get the best possible grouping for our data.","37e30efa":"## Complete method\nWe can now apply the complete method of the clustering function and compare our results:","8fb22401":"**Data transformation:** By standardizing our data, we may be able to improve the convergence of the hierarchical clustering algorithms which we will use.","aefc704e":"Now, we can begin with PCA analysis!","e13c8929":"# Patterns in football (soccer)\n## Objective\nFootball positions are the basis of different specialized roles which players have to play. For example, a defender must have good positioning in order to quench attacks. A striker needs to be accurate in front of goal, since scoring opportunities are scarce. A playmaker needs to have good vision, and the ability to break the opposition defense with a pass.\n\nThe dataset we will be using has all of these statistics, according to EA studios, ranked from 1 to 99. Most european top league players are included, as well as players from leagues around the world. We want to see if, by applying principal component analysis (PCA) and hierarchichal clustering algorithms, this distinction in roles and abilities is also present in the FIFA 19 statistics.","7688c4e7":"We can see that the first principal component has what at first glance appears to be two clusters. This probably is because we included goalkeepers, which have much lower physical and technical attributes compared to outfield players. Plus, their goalkeeping stats are much better than all other positions.\n\n---"}}