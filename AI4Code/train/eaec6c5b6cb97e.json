{"cell_type":{"9d8f65ef":"code","4771c5f6":"code","b21561f8":"code","616cae82":"code","6bd6fe25":"code","44597104":"code","c48df02d":"code","3ed69e10":"code","30502f84":"code","aa45939d":"code","d0b99638":"code","0b88f217":"code","ca04eeb8":"code","2a692909":"code","bf44a41b":"code","377f26a8":"code","3717a1aa":"code","622dc6f4":"code","b094d6ef":"code","162b55fd":"code","066f1c7c":"code","5b62c907":"code","b0db0c15":"code","3df0d3df":"code","ad932594":"code","22e21bff":"code","ddd628f3":"code","45b5549c":"code","2c6acb50":"code","c40d1aa6":"code","146cda0c":"code","5e94ba32":"code","0db777d3":"code","e91f47e2":"code","5f7c57e9":"code","fb0502f6":"code","3f2bc03b":"code","5deb53fe":"code","98a3e2cb":"code","555e91dc":"code","3e84408a":"code","8bbfec3c":"code","29c6b1aa":"code","3e0386df":"code","fce78820":"markdown"},"source":{"9d8f65ef":"import pandas as pd\nimport numpy as np\nimport cv2 as cv\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve,auc,classification_report\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n","4771c5f6":"folder=r\"..\/input\/cnn-face\/dataset\"\nsub_folder =[name for name in os.listdir(folder) if os.path.isdir(os.path.join(folder,name))]","b21561f8":"sub_folder","616cae82":"folder1=[]\nfor i in sub_folder:\n    a=os.path.join(folder,i)\n    folder1.append(a)","6bd6fe25":"import glob,os\nfiles_1=[]\nfor i in folder1:\n    files=[f for  f in glob.glob(i +\"*\/*.jpg\",recursive=True)]\n    files_1.append(files)\n","44597104":"def flatten_list(_2d_list):\n flat_list = []\n # Iterate through the outer list\n for element in _2d_list:\n     if type(element) is list:\n# If the element is of type list, iterate through the sublist\n        for item in element:\n             flat_list.append(item)\n     else:\n             flat_list.append(element)\n return flat_list\n","c48df02d":"folder_name1= flatten_list(files_1)","3ed69e10":"filename =[str(f.split(\"\/\")[5]) for f in folder_name1]","30502f84":"folder =[]\nfor f in folder_name1:\n    a=str(f.split(\"\/\")[0])+\"\/\"+str(f.split(\"\/\")[1])+\"\/\"+str(f.split(\"\/\")[2])+\"\/\"+str(f.split(\"\/\")[3])+\"\/\"+str(f.split(\"\/\")[4])\n    folder.append(a)","aa45939d":"label=[str(f.split(\"\/\")[4]) for f in folder_name1]\n","d0b99638":"data = pd.DataFrame()\ndata[\"folder_name\"]= folder\ndata[\"files\"]= filename\ndata[\"Labels\"]= label\n","0b88f217":"sns.countplot( y='Labels', data=data)","ca04eeb8":"import matplotlib.image as mpimg","2a692909":"c=data[\"files\"][1]\nc","bf44a41b":"c=data['files']","377f26a8":"#imgplot = plt.imshow(c)","3717a1aa":"train, test =train_test_split(data,train_size=300,test_size=50,stratify=data['Labels'])","622dc6f4":"train=train.reset_index().drop(['index'],axis=1)\ntest=test.reset_index().drop(['index'],axis=1)","b094d6ef":"sns.countplot( y='Labels', data=train)","162b55fd":"sns.countplot( y='Labels', data=test)","066f1c7c":"x_train=[]\ny_train=[]\nfor t in range(len(train)):\n    folder = train[\"folder_name\"][t]\n    file1 = train[\"files\"][t]\n    image = cv.imread(os.path.join(folder, file1))\n    image=image\/255\n    image=cv.resize(image,(128,128))\n    x_train.append(image)\n    y_train.append(train[\"Labels\"][t])\nx_test=[]\ny_test=[]\nfor t in range(len(test)):\n    folder = test[\"folder_name\"][t]\n    file1 = test[\"files\"][t]\n    image = cv.imread(os.path.join(folder, file1))\n    image=image\/255\n    image=cv.resize(image,(128,128))\n    x_test.append(image)\n    y_test.append(test[\"Labels\"][t])","5b62c907":"fig, axis = plt.subplots(4, 3, figsize=(10,10 ))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(x_train[i])\n    ax.axis('off')\n    ax.set(title = {y_train[i]})","b0db0c15":"fig, axis = plt.subplots(4, 3, figsize=(10,10 ))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(x_test[i])\n    ax.axis('off')\n    ax.set(title = {y_test[i]})","3df0d3df":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nx=np.array(x_train)\ny=np.array(y_train)\nX=np.array(x_test)\nY=np.array(y_test)\ny= le.fit_transform(y)\nY= le.fit_transform(Y)","ad932594":"vgg16 = VGG16(input_shape=(128,128,3),weights=\"imagenet\", include_top=False)\nfor layer in vgg16.layers:\n    layer.trainable = False","22e21bff":"x_train= vgg16.predict(x)\n","ddd628f3":"x_test=vgg16.predict((X))","45b5549c":"x_train.shape","2c6acb50":"x=x_train.reshape(x_train.shape[0],-1)\nX=x_test.reshape(x_test.shape[0],-1)\n","c40d1aa6":"k=RandomForestClassifier(n_estimators=50,random_state=25)\nk.fit(x,y)","146cda0c":"y_predict =k.predict(X)","5e94ba32":"from sklearn.metrics import confusion_matrix","0db777d3":"c=confusion_matrix(Y,y_predict)","e91f47e2":"sns.heatmap(c,annot=True)\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\n","5f7c57e9":"print(classification_report(Y,y_predict))\nprint(\"accuracy of  model is\",accuracy_score(y_predict,Y)*100)","fb0502f6":"from sklearn.tree import DecisionTreeClassifier\n#xgboot\nmodel_x=DecisionTreeClassifier()\nmodel_x.fit(x,y)\ny_predict = model_x.predict(X)","3f2bc03b":"y_predict = model_x.predict(X)\nprint(classification_report(Y,y_predic))\nprint(accuracy_score(Y,y_predic)*100)","5deb53fe":"c=confusion_matrix(Y,y_predict)\nsns.heatmap(c,annot=True)\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\n","98a3e2cb":"from sklearn import svm\nmodel_x=svm.SVC()\nmodel_x.fit(x,y)\ny_predict = model_x.predict(X)","555e91dc":"y_predict = model_x.predict(X)\nprint(classification_report(Y,y_predict))\nprint(accuracy_score(Y,y_predict)*100)","3e84408a":"c=confusion_matrix(Y,y_predict)\nsns.heatmap(c,annot=True)\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\n","8bbfec3c":"from sklearn.neighbors import KNeighborsClassifier\nmodel_x=KNeighborsClassifier()\nmodel_x.fit(x,y)\ny_predict = model_x.predict(X)","29c6b1aa":"y_predict = model_x.predict(X)\nprint(classification_report(Y,y_predict))\nprint(accuracy_score(Y,y_predict)*100)","3e0386df":"c=confusion_matrix(Y,y_predict)\nsns.heatmap(c,annot=True)\nfig = plt.gcf()\nfig.set_size_inches(10, 8)\n","fce78820":"train, test =train_test_split(data,train_size=325,test_size=3,stratify=data['Labels'])"}}