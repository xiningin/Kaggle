{"cell_type":{"006b9b82":"code","aab48385":"code","abcf127a":"code","f264bba8":"code","da6964bb":"code","236c4ed6":"code","3660a385":"code","0f12b5a5":"markdown","30e90a6f":"markdown","c38f58cf":"markdown","305c66b2":"markdown","9e1efcc7":"markdown","2bef289e":"markdown","f03ee842":"markdown","7b0d1414":"markdown"},"source":{"006b9b82":"import json\nimport os\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.colors import Normalize, rgb2hex\nfrom mpl_toolkits.basemap import Basemap\n\n%matplotlib inline","aab48385":"with open('..\/input\/sf-restaurant-scores-lives-standard\/socrata_metadata.json', 'r') as f:\n    metadata = json.loads(f.read())\n    \ndata = pd.read_csv('..\/input\/sf-restaurant-scores-lives-standard\/restaurant-scores-lives-standard.csv')","abcf127a":"print('Starting with {} records.'.format(len(data)))\n\n# Select only records where the inspection score is not null\ndata_clean = data[~pd.isna(data.inspection_score)].copy()\nprint('After cleaning rows with no score: {}'.format(len(data_clean)))\n\n# Zip codes are 'dirty'. A quick google search returns the 'allowed' zip codes\nallowed_zips = {'94151', '94159', '94158', '94102', '94104', '94103', '94105', '94108',\n                '94177', '94107', '94110', '94109', '94112', '94111', '94115', '94114',\n                '94117', '94116', '94118', '94121', '94123', '94122', '94124', '94127',\n                '94126', '94129', '94131', '94133', '94132', '94134', '94139', '94143'}\n\ndata_clean = data_clean[data_clean.business_postal_code.isin(allowed_zips)].copy()\nprint('After cleaning weird zip codes: {}'.format(len(data_clean)))\n\n# Convert zip codes to numeric and dates to datetimes\n# data_clean.loc[:, 'business_postal_code'] = pd.to_numeric(data_clean.business_postal_code)\ndata_clean.loc[:, 'inspection_date'] = pd.to_datetime(data_clean.inspection_date)\n\n# Select only the columns that are important\ndata_clean = data_clean[['business_id', 'business_postal_code', 'inspection_date', 'inspection_score']].copy()","f264bba8":"# Select only the latest inspection per business\ndata_clean = data_clean.sort_values('inspection_date').groupby('business_id').last()\nprint('After selecting the last inspection only: {}'.format(len(data_clean)))","da6964bb":"# Get the average score per zipcode\navg_scores = data_clean.groupby('business_postal_code').mean()","236c4ed6":"avg_scores.head()","3660a385":"plt.figure(figsize=(16, 12))\n\n# SF coordinates.\nlowerlon = -122.52\nupperlon = -122.34\nlowerlat = 37.70\nupperlat = 37.84\n\nm = Basemap(\n    llcrnrlon=lowerlon,\n    llcrnrlat=lowerlat,\n    urcrnrlon=upperlon,\n    urcrnrlat=upperlat,\n    resolution='c',\n    projection='lcc',\n    lat_0=lowerlat,\n    lat_1=upperlat,\n    lon_0=lowerlon,\n    lon_1=upperlon\n    )\n\nshp_info = m.readshapefile('..\/input\/2017-zip-code-shapefiles\/cb_2017_us_zcta510_500k', \n                           'zips', drawbounds=True)\n\nscores_dict = avg_scores.to_dict()['inspection_score']\ncolormap = plt.cm.RdYlGn\nmin_score = avg_scores.inspection_score.min()\nmax_score = avg_scores.inspection_score.max()\nedge_color = '#000000'\n\nfor coords, info in zip(m.zips, m.zips_info):\n    zip_code = info['ZCTA5CE10']\n    if zip_code in scores_dict:\n        i, j = zip(*coords)\n        score_norm = (scores_dict.get(zip_code, min_score) - min_score) \/ (max_score - min_score)\n        zip_color = rgb2hex(colormap(score_norm)[:3])\n        plt.fill(i, j, color=zip_color, edgecolor='k')\n\n# Colorbar\nmm = plt.cm.ScalarMappable(cmap=colormap)\nmm.set_array([min_score, max_score])\nplt.colorbar(mm, ticks=np.arange(int(min_score), int(max_score+1), 1), orientation=\"vertical\")\nplt.title('Average Restaurant Score per Zip Code -- San Francisco')\nplt.gca().axis('off')\nplt.show()","0f12b5a5":"# Analysis","30e90a6f":"# Plot ratings on map","c38f58cf":"# Imports","305c66b2":"The main object of our dashboard will be a map of San Francisco which shows the average score per zip code. ","9e1efcc7":"# Download ZIP shapes\n\n2017 US Zip code data has been uploaded as a public dataset [here](https:\/\/www.kaggle.com\/tomasn4a\/2017-zip-code-shapefiles), you can just add it do your notebook.","2bef289e":"## Grouping\n\n\n**We will only keep the last review per business.**","f03ee842":"# Get Data","7b0d1414":"## Cleaning up"}}