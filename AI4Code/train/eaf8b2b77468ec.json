{"cell_type":{"16265b11":"code","2d60fe98":"code","eb130c48":"code","6908ad8c":"code","b71174e6":"code","58b95430":"code","a17710be":"code","2b620e16":"code","644fbbdb":"code","290d2b32":"code","e680ab7b":"markdown","ff262ca7":"markdown","ffa9ba63":"markdown","713cb2f4":"markdown","b31a5b61":"markdown","561f866d":"markdown","539468dd":"markdown","ca7d0511":"markdown","2cbb5798":"markdown"},"source":{"16265b11":"import random\n\n\nclass Board:\n    \"\"\"Collection of useful, static functions on the board. Do not instantiate this class!\"\"\"\n    size = 15\n    all_fields = [i for i in range(size**2)]\n    directions = ['WEST', 'NORTH', 'EAST', 'SOUTH']\n\n    @staticmethod\n    def field_to_coord(field):\n        \"\"\"Return 2d coordinates corresponding to 1d field ID\"\"\"\n        return field % Board.size, field \/\/ Board.size\n\n    @staticmethod\n    def coord_to_field(coord):\n        \"\"\"Return 1d field id for given 2d coordinate\"\"\"\n        return coord[1] * Board.size + coord[0]\n\n    @staticmethod\n    def west(field):\n        \"\"\"Return field ID west to given field\"\"\"\n        x, y = Board.field_to_coord(field)\n        return Board.coord_to_field(((x-1) % Board.size, y))\n\n    @staticmethod\n    def east(field):\n        \"\"\"Return field ID east to given field\"\"\"\n        x, y = Board.field_to_coord(field)\n        return Board.coord_to_field(((x+1) % Board.size, y))\n\n    @staticmethod\n    def north(field):\n        \"\"\"Return field ID north to given field\"\"\"\n        x, y = Board.field_to_coord(field)\n        return Board.coord_to_field((x, (y-1) % Board.size))\n\n    @staticmethod\n    def south(field):\n        \"\"\"Return field ID south to given field\"\"\"\n        x, y = Board.field_to_coord(field)\n        return Board.coord_to_field((x, (y+1) % Board.size))\n\n    @staticmethod\n    def field_in_direction(field, direction):\n        \"\"\"Return field in given direction\"\"\"\n        if direction == 'WEST': return Board.west(field)\n        if direction == 'NORTH': return Board.north(field)\n        if direction == 'EAST': return Board.east(field)\n        if direction == 'SOUTH': return Board.south(field)\n        return None\n\n    @staticmethod\n    def surrounding_fields(field):\n        \"\"\"Return list of surrounding fields (W,N,E,S of field)\"\"\"\n        return [Board.west(field), Board.north(field), Board.east(field), Board.south(field)]\n\n    @staticmethod\n    def direction_to_dest(src_field, dst_field, avoid_fields=[], random_if_blocked=True):\n        \"\"\"\n        Return recommended move direction to get from_pos to_pos.\n        Avoid moving onto given avoid_fields (if any) to avoid collisions.\n        If direction to destination is blocked, either stay still or move into a random other (non-avoided) field\n        # TODO: use shortcuts around the borders of the map\n        \"\"\"\n        src_x, src_y = Board.field_to_coord(src_field)\n        dst_x, dst_y = Board.field_to_coord(dst_field)\n        free_directions = [direction for direction in Board.directions\n                           if Board.field_in_direction(src_field, direction) not in avoid_fields]\n\n        if src_x < dst_x:\n            if Board.east(src_field) in free_directions:\n                return \"EAST\"\n        if src_x > dst_x:\n            if Board.west(src_field) in free_directions:\n                return \"WEST\"\n        if src_y < dst_y:\n            if Board.south(src_field) in free_directions:\n                return \"SOUTH\"\n        if src_y > dst_y:\n            if Board.north(src_field) in free_directions:\n                return \"NORTH\"\n        if random_if_blocked:\n            return random.choice(free_directions + [None])\n        return None\n    \n    @staticmethod\n    def distance(field1, field2):\n        \"\"\"\n        Return the shortest path distance from field1 to field2 (= vice versa)\n        This is moving within the field, no shortcuts around the borders!\n        \"\"\"\n        x1, y1 = Board.field_to_coord(field1)\n        x2, y2 = Board.field_to_coord(field2)\n        return abs(x1-x2) + abs(y1-y2)","2d60fe98":"class Ship:\n    \"\"\"Auxiliary class holding info about a ship\"\"\"\n    def __init__(self, ship_id, player_id, obs, dest=None):\n        self.id = ship_id\n        self.player_id = player_id\n        self.obs = obs\n        self.dest = dest\n\n        # get further info from observation\n        self.pos = obs.players[player_id][2][ship_id][0]\n        self.coord = Board.field_to_coord(self.pos)\n        self.halite = obs.players[player_id][2][ship_id][1]\n        # halite at the field where the ship currently is\n        self.halite_here = obs.halite[self.pos]\n\n    def __str__(self):\n        return self.id\n\n    def __repr__(self):\n        return self.id\n\n    def neighbor_with_max_halite(self):\n        \"\"\"Return neighboring field with most halite\"\"\"\n        surrounding_fields = Board.surrounding_fields(self.pos)\n        best_index = Agent.argmax(surrounding_fields, key=self.obs.halite.__getitem__)\n        best = surrounding_fields[best_index]\n        best_halite = round(self.obs.halite[best], 2)\n        return best\n\n    def direction_to_max_halite(self, candidates, avoid_fields=[]):\n        \"\"\"Return field and movement direction to most halite from all candidate fields\"\"\"\n        # TODO: prefer closer fields with similar amounts of halite\n        best = Agent.argmax(candidates, key=self.obs.halite.__getitem__)\n        direction = Board.direction_to_dest(self.pos, best, avoid_fields)\n        best_halite = round(self.obs.halite[best], 2)\n        return best, direction","eb130c48":"class Shipyard:\n    \"\"\"Auxiliary class holding info about a shipyard\"\"\"\n    def __init__(self, id, pos, player_id):\n        self.id = id\n        self.pos = pos\n        self.coord = Board.field_to_coord(pos)\n        self.player_id = player_id\n\n    def __repr__(self):\n        return self.id","6908ad8c":"class Agent:\n    \"\"\"Agent helper class with multiple auxiliary functions that don't fit anywhere else\"\"\"\n    def __init__(self, collect_thres, load_threshold, max_yards, max_yard_distance, max_ships):\n        \"\"\"\n        Create new agent object\n        :param collect_thres: Min halite (remaining) at a field to stop and collect it. Good value: 50\n        :param load_threshold: Halite load at the ship up to which to search for and collect halite. After reaching threshold --> return home. Good value: 1000\n        :param max_yards: Max number of shipyards to create\n        :param max_yard_distance: If distance of ship to existing yard is higher than this, create a new shipyard\n        :param max_ships: Max number of ships allowed --> try to maintain that number\n        \"\"\"\n        self.obs = None\n        self.collect_thres = collect_thres\n        self.load_threshold = load_threshold\n        self.max_yards = max_yards\n        self.max_yard_distance = max_yard_distance\n        self.max_ships = max_ships\n\n        self.ships = []\n        self.yards = []\n        # keep track of num ship and shipyards to detect if I lost a ship\n        self.num_ships = 0\n        self.num_yards = 0\n\n    # from https:\/\/www.kaggle.com\/awanderingsoul\/halite-basic-greedy-agent\n    @staticmethod\n    def argmax(arr, key=None):\n        return arr.index(max(arr, key=key)) if key else arr.index(max(arr))\n\n    @staticmethod\n    def reverse_direction(direction):\n        \"\"\"Return reverse direction\"\"\"\n        if direction == 'WEST': return 'EAST'\n        if direction == 'EAST': return 'WEST'\n        if direction == 'NORTH': return 'SOUTH'\n        if direction == 'SOUTH': return 'NORTH'\n        return None\n\n    def occupied_fields(self):\n        \"\"\"Return occupied fields to where the ship cannot move in form of two lists: Enemy shipyards, enemy ships\"\"\"\n        enemy_yards = []\n        enemy_ships = []\n        num_players = len(self.obs.players)\n        other_players = [i for i in range(num_players) if i != self.obs.player]\n\n        for p in other_players:\n            # add shipyards\n            shipyards = self.obs.players[p][1]\n            enemy_yards.extend(shipyards.values())\n            # add ships\n            ships = self.obs.players[p][2]\n            enemy_ships.extend([ship_attr[0] for ship_attr in ships.values()])\n\n        return enemy_yards, enemy_ships\n\n    def danger_fields(self, enemy_ships):\n        \"\"\"Return set of fields around the given enemy ships, which are dangerous because the ships may move there.\"\"\"\n        # set avoids duplicates\n        fields = set()\n        for ship in enemy_ships:\n            surr_fields = set(Board.surrounding_fields(ship))\n            fields.update(surr_fields)\n        return fields\n\n    def create_yard_objects(self, yard_dict, player):\n        \"\"\"Create and return list of shipyard objects based on given yard dict from the observations\"\"\"\n        yards = []\n        for id, pos in yard_dict.items():\n            yards.append(Shipyard(id, pos, player))\n        return yards\n\n    def create_ship_objects(self, ship_dict, player):\n        \"\"\"Create and return list of ship objects based on ship_dict\"\"\"\n        # get old destinations and maintain\n        ship_dests = {ship.id: ship.dest for ship in self.ships}\n        return [Ship(id, player, self.obs, ship_dests.get(id)) for id in ship_dict.keys()]\n\n    def retrieve_info(self, obs):\n        \"\"\"\n        Retrieve main info from observation and set as self attributes.\n        Should be the first function to call in each step to retrieve and set observations.\n        \"\"\"\n        self.obs = obs\n        # retrieve info from observation\n        self.halite, yard_dict, ship_dict = obs.players[obs.player]\n\n        # create list of shipyard objects\n        self.yards = self.create_yard_objects(yard_dict, self.obs.player)\n        self.ships = self.create_ship_objects(ship_dict, self.obs.player)\n\n        # check if I lost a ship; then update\n        self.num_ships = len(self.ships)\n        self.num_yards = len(self.yards)\n\n    def check_create_ships(self):\n        \"\"\"Create new ship\"\"\"\n        # ensure not to exceed maximum and to have enough remaining halite\n        if len(self.ships) < self.max_ships and self.halite > 500:\n            # exclude shipyards where there is currently already a ship (would lead to collision)\n            my_ship_pos = [ship.pos for ship in self.ships]\n            free_yards = [yard for yard in self.yards if yard.pos not in my_ship_pos]\n            if len(free_yards) > 0:\n                # select random shipyard to spawn new ship\n                yard = random.choice(free_yards)\n                self.num_ships += 1\n                self.halite -= 500\n                return {yard.id: 'SPAWN'}\n        return None\n\n    def create_yard(self, ship):\n        \"\"\"Create shipyard at ship if none exists yet\"\"\"\n        if len(self.yards) < self.max_yards:\n            # do I still have enough remaining halite to respawn after creating the shipyard?\n            if self.halite + ship.halite - 2000 > 500:\n                # decrement ship counter already to avoid warning about having lost a ship\n                self.num_ships -= 1\n                self.num_yards += 1\n                self.halite -= 2000\n                return {ship.id: 'CONVERT'}\n        else:\n            # already at max number of yards\n            return None\n\n    def ship_can_dropoff_halite(self, ship):\n        \"\"\"Return true iff ship is at one of my shipyards and is carrying halite that it can drop off\"\"\"\n        if ship.halite > 0:\n            for yard in self.yards:\n                if ship.pos == yard.pos:\n                    return True\n        return False\n\n    def closest_yard(self, ship):\n        \"\"\"Return closes shipyard and distance to ship\"\"\"\n        closest_yard = None\n        closest_dist = None\n        for yard in self.yards:\n            dist = Board.distance(ship.pos, yard.pos)\n            if closest_dist is None or dist < closest_dist:\n                closest_yard = yard\n                closest_dist = dist\n        assert closest_yard is not None and closest_dist is not None, \"There is no shipyard!\"\n        return closest_yard, closest_dist\n\n    def act(self, obs):\n        \"\"\"The main acting function called by my_agent. Returns the selected action.\"\"\"\n        self.retrieve_info(obs)\n        action = {}\n\n        # ensure there are enough ships and at least one shipyard\n        ship_action = self.check_create_ships()\n        if ship_action is not None:\n            action.update(ship_action)\n        if len(self.yards) == 0:\n            yard_action = self.create_yard(self.ships[0])\n            if yard_action is not None:\n                action.update(yard_action)\n\n        # avoid all fields with enemy shipyards, ships, and fields surrounding ships to where they could move\n        enemy_yards, enemy_ships = self.occupied_fields()\n        avoid_fields = self.danger_fields(enemy_ships)\n        avoid_fields.update(set(enemy_yards), set(enemy_ships))\n        # field blocked because another of my ships will move there\n        own_move_fields = set()\n\n        # select ships without (convert) actions for movement\n        free_ships = [ship for ship in self.ships if ship.id not in action.keys()]\n        for ship in free_ships:\n            own_other_ships = [s.pos for s in self.ships if s != ship]\n            blocked_fields = list(avoid_fields.union(own_move_fields, own_other_ships))\n\n            # reset destination if reached\n            if ship.dest == ship.pos:\n                ship.dest = None\n            # reset destination if it's occupied by another ship\n            if ship.dest in enemy_ships:\n                ship.dest = None\n\n            # if there is enough halite to collect or the ship can drop off halite at a shipyard, stop\n            # also collect on the way home\n            if ship.halite_here >= self.collect_thres or self.ship_can_dropoff_halite(ship):\n                continue\n\n            # move towards destination\n            if ship.dest is not None:\n                direction = Board.direction_to_dest(ship.pos, ship.dest, avoid_fields=blocked_fields)\n                # already at the destination or no place to move (without collisions) --> stay\n                if direction is None:\n                    continue\n                own_move_fields.add(Board.field_in_direction(ship.pos, direction))\n                action[ship.id] = direction\n\n            # pick new destination\n            else:\n                # if enough load, go back to ship yard to drop off halite\n                # or when the game is about to end\n                if ship.halite >= self.load_threshold or self.obs.step >= 395:\n                    # select closest shipyard; create new if existing one(s) are too far\n                    closest_yard, yard_dist = self.closest_yard(ship)\n                    if yard_dist > self.max_yard_distance:\n                        yard_action = self.create_yard(ship)\n                        if yard_action is not None:\n                            action.update(yard_action)\n                            continue\n                    # navigate to closest shipyard\n                    ship.dest = closest_yard.pos\n                    direction = Board.direction_to_dest(ship.pos, ship.dest, avoid_fields=blocked_fields)\n                    # already at the destination or no place to move (without collisions) --> stay\n                    if direction is None:\n                        continue\n                    own_move_fields.add(Board.field_in_direction(ship.pos, direction))\n                    action[ship.id] = direction\n                # else move to field with high halite to collect more\n                else:\n                    # go to most halite overall (collect on the way)\n                    # destination nodes of other ships --> avoid sending all ships to the same destination\n                    own_dest_fields = [ship.dest for ship in self.ships]\n                    # exclude occupied fields and dest fields of other ships from candidates to avoid waiting\n                    candidates = [field for field in Board.all_fields if field not in list(blocked_fields)+own_dest_fields]\n                    dest_field, direction = ship.direction_to_max_halite(candidates, avoid_fields=blocked_fields)\n                    ship.dest = dest_field\n                    # already at the destination or no place to move (without collisions) --> stay\n                    if direction is None:\n                        continue\n                    own_move_fields.add(Board.field_in_direction(ship.pos, direction))\n                    action[ship.id] = direction\n\n        return action","b71174e6":"# global agent variable for persistent state between steps\nagent = Agent(collect_thres=50, load_threshold=1000, max_yards=5, max_yard_distance=5, max_ships=5)\n\n\ndef my_agent(obs):\n    global agent\n    return agent.act(obs)","58b95430":"from kaggle_environments import make, evaluate\n\nenv = make(\"halite\", debug=True)\n\ndef validate(agent):\n#     assert agent == 'random' or os.path.isfile(agent)\n\n    print(f\"Validating {agent} agent:\")\n    env.run([agent, agent])\n    print(\"EXCELLENT SUBMISSION!\" if env.toJSON()[\"statuses\"] == [\"DONE\", \"DONE\"] else \"MAYBE BAD SUBMISSION?\")\n    \ndef mean_reward(rewards):\n    wins = 0\n    ties = 0\n    loses = 0\n    for r in rewards:\n        r0 = 0 if r[0] is None else r[0]\n        r1 = 0 if r[1] is None else r[1]\n        if r0 > r1:\n            wins += 1\n        elif r1 > r0:\n            loses += 1\n        else:\n            ties += 1\n    return f'wins={wins\/len(rewards):.2f}, ties={ties\/len(rewards):.2f}, loses={loses\/len(rewards):.2f}'\n\n\ndef evaluate_agents(agent1, agent2, eval_eps):\n    # Run multiple episodes to estimate its performance.\n    # Setup agentExec as LOCAL to run in memory (runs faster) without process isolation.\n    rewards = evaluate(\"halite\", [agent1, agent2], num_episodes=eval_eps, configuration={\"agentExec\": \"LOCAL\"})\n    print(f\"{agent1} vs {agent2} Agent:\", mean_reward(rewards))","a17710be":"agent1 = my_agent\nagent2 = 'random'","2b620e16":"validate(agent1)","644fbbdb":"evaluate_agents(agent1, agent2, eval_eps=30)","290d2b32":"env.render(mode=\"ipython\", width=800, height=600)","e680ab7b":"### Ship","ff262ca7":"Nice! It wins 100% of games :)","ffa9ba63":"### Shipyard","713cb2f4":"## The Agent Class\n\nThe agent class contains the main logic of the agent; split into separate functions.","b31a5b61":"## Evaluate the Agent\n\nSome auxiliary code to run and evaluate the agent.","561f866d":"# Halite: Multi-Ship & Shipyard Agent with Collision Avoidance\n\nThis is my first time to participate in Halite. I started from a simple greedy heuristic and extended it to handle multiple ships and shipyards, making it a lot more effective. The agent also tries to avoid collisions with other ships and has a few other tricks. This is the main idea:\n\n* Spawn new ships up to a configured maximum number of ships. \n* Let each ship collect halite greedily by choosing its own destination that's free and different from the other ships' destinations. \n* Once a ship reaches a configured halite load, it returns to the closest shipyard to drop off the collected hailte. \n* If the next shipyard is too far (configurable), the ship converts to a new shipyard (if there's enough halite). This helps avoid losing too much halite during movement.\n* Avoid collisions with own ships and do not move into enemy ships or shipyards.\n* A few other, smaller tricks (see the code)\n\nThis is by no means perfect and there is still a lot of room for improvement, but I believe it's a good starting point for more advanced agents. \n\n**If you like the notebook, I'd appreciate an upvote!**","539468dd":"## Auxiliary Code\n\nI created several auxiliary classes to keep the implementation cleaner and easier to extend.\n\n### The Halite Board\n\nTo be used as static class without instantiation.","ca7d0511":"The main execution loop just instantiates the agent with some example parameters and defines the `my_agent` function.","2cbb5798":"For starters, let's validate and compare my agent against a random agent."}}