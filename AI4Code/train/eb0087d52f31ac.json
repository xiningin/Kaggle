{"cell_type":{"edbcfe5f":"code","321cf4c0":"code","cb27739a":"code","93bc0a1e":"code","e2041aa8":"code","46eb5fde":"code","9e40307e":"code","5f8cc144":"code","a1c64e57":"code","9103e4f0":"code","865270f8":"code","05227133":"code","aac928fc":"code","9b079f29":"code","1c49b022":"markdown","dbc6e596":"markdown","9c6513b1":"markdown","c0c7c60b":"markdown","f8b3b5a7":"markdown","300d630a":"markdown","e9c914e3":"markdown","a2c3a6d1":"markdown","9d29396c":"markdown"},"source":{"edbcfe5f":"import numpy \nimport pandas\nimport datetime\nimport random\nimport calendar\nfrom matplotlib import pyplot as plt\nimport matplotlib.ticker as ticker\nfrom matplotlib.animation import FuncAnimation\nfrom matplotlib.widgets import MultiCursor\nfrom IPython.display import HTML\nfrom matplotlib.widgets import Slider, RadioButtons\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib\nmatplotlib.rcParams['animation.embed_limit'] = 2**128\nmatplotlib.rcParams['animation.html'] = 'jshtml'\npandas.options.display.max_columns = 200","321cf4c0":"!pip install ipympl\n!jupyter nbextension enable --py widgetsnbextension","cb27739a":"dateparser = lambda x: pandas.to_datetime(datetime.datetime.strptime(x,\"%a %b %d %H:%M:%S %Y %z\"), utc=True)\np = 0.01 # number of rows in full file = 3240997\ndf = pandas.read_csv('\/kaggle\/input\/github-commit-messages-dataset\/full.csv', \n                     parse_dates=['date'], \n                     date_parser=dateparser, \n                     usecols=['author', 'date', 'repo', 'commit', 'message'],\n                     # nrows=100,\n                     skiprows=lambda i: i > 0 and random.random() > p\n                    )\n\ncolor = {}\nfor repo in set(df.repo):\n    color[repo] = '#' + ''.join([random.choice('23456789ABCD') for j in range(6)])","93bc0a1e":"df.dropna(subset=['message'], inplace=True)\nassert len(df.dropna()) == len(df)\nassert len(set(df.commit)) == len(df)\nassert df.message.apply(lambda x: bool(x)).sum() == len(df)","e2041aa8":"processed_df = df.copy()\nprocessed_df['year'] = processed_df.date.dt.year\nprocessed_df['month'] = processed_df.date.dt.month\nprocessed_df.drop(labels=['author', 'commit'], axis=1, inplace=True)\n\nprocessed_df = processed_df.groupby(['repo', 'year', 'month']).date.count().reset_index()\\\n    .sort_values(['repo', 'year', 'month'])\nprocessed_df = processed_df.groupby(['repo', 'year', 'month']).sum()\n\nmin_date = df.date.min()\nmax_date = df.date.max()\n\nfor repo in processed_df.index.get_level_values('repo').unique():\n    for year in range(processed_df.index.get_level_values('year').min(), \n                      processed_df.index.get_level_values('year').max() + 1):\n        for month in range(1, 13):\n            if year == max_date.year and month > max_date.month:\n                continue\n            if year == min_date.year and month < min_date.month:\n                continue\n            try:\n                processed_df.loc[(repo, year, month)]\n            except KeyError:\n                processed_df.loc[(repo, year, month)] = 0\n\nprocessed_df = processed_df.reset_index().sort_values(['repo', 'year', 'month'])\nprocessed_df['year_month'] = processed_df.apply(lambda row: str(row.year) + ' ' + str(calendar.month_name[row.month][:3]), axis=1)\nrepos = processed_df.repo.unique().tolist()\n\nyear_months = processed_df[['year', 'month', 'year_month']].drop_duplicates(['year', 'month']).sort_values(['year', 'month'])\\\n    .year_month.tolist()","46eb5fde":"%matplotlib inline\ntotal_df = processed_df.groupby(['repo', 'year', 'month']).sum()\ntotal_df = total_df.groupby(level=0).cumsum().reset_index()\ntotal_df['year_month'] = total_df.apply(lambda row: str(row.year) + ' ' + str(calendar.month_name[row.month][:3]), axis=1)\ntime_repo_wise_df = total_df.groupby(['year_month', 'repo']).date.sum()\n\ndel total_df\nmax_number = 6\n\ndef get_month_plot(year_month):\n    year_month_df = time_repo_wise_df[year_month].sort_values(ascending=False).copy()[:max_number]\n    monthly_values = list(zip(year_month_df.index, year_month_df))\n    monthly_values.reverse()\n    ax.clear()\n    ax.barh([m[0] for m in monthly_values], [m[1] for m in monthly_values], color=[color[m[0]] for m in monthly_values])\n    ax.set_yticks([])\n    dx = year_month_df.max() \/ 200\n    for i, (name, value) in enumerate(monthly_values):\n        ax.text(value+dx, i, f'{value:,.0f}',  size=14, ha='left',  va='center')\n        ax.text(value-dx, i, name, weight=600, size=14, ha='right', va='bottom')\n    ax.text(1, 0.4, year_month, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.set_title('Total number of commits till {} - Top {}'.format(year_month, max_number))\n    ax.grid(which='major', axis='x', linestyle='-')\n    plt.box(False)\n\n\nfig, ax = plt.subplots(figsize=(15, 8))\nanim = FuncAnimation(fig=fig, func=get_month_plot, frames=year_months)\nanim","9e40307e":"%matplotlib inline\nyear_df = processed_df.groupby(['repo', 'year']).date.sum().reset_index().sort_values(['repo', 'year'])\n\ndef get_repo_time_plot(repo):\n    repo_df = year_df[year_df.repo == repo]\n    ax2.clear()\n    line, = ax2.plot(repo_df.year, repo_df.date, label=repo, figure=fig2, color=color[repo])\n    ax2.set_xlim(repo_df.year.min() - 1, repo_df.year.max() + 1)\n    ax2.set_ylim(repo_df.date.min() - 1, repo_df.date.max() + 1)\n    ax2.set_title(repo)\n    ax2.set_xlabel('Year', size=20)\n    ax2.set_ylabel('Commits', size=20)\n    ax2.set_title(repo, size=20)\n    plt.subplots_adjust(left=0.25, bottom=0.25)\n    fig2.canvas.draw_idle()\n\n\nfig2, ax2 = plt.subplots(figsize=(16, 8))\nanim4 = FuncAnimation(fig=fig2, func=get_repo_time_plot, frames=repos)\nanim4","5f8cc144":"%matplotlib inline\nfig4 = plt.figure(figsize=(20, 10))\nax4 = fig4.add_axes([0.1, 0.1, 0.5, 0.75])\n\nyear_df = processed_df.groupby(['repo', 'year']).date.sum().reset_index().sort_values(['repo', 'year'])\n\ndef get_all_year(year):\n    ax4.clear()\n    ax4.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:.0f}'))\n    for repo in repos:\n        repo_df = year_df[(year_df.repo == repo) & (year_df.year <= year)]\n        line, = ax4.plot(repo_df.year, repo_df.date, label=repo, figure=fig4, color=color[repo])\n    ax4.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    ax4.set_xlabel('Year', size=20)\n    ax4.set_ylabel('Number of commits', size=20)\n    ax4.set_title('Number of commits per year', size=20)\n\nanim2 = FuncAnimation(fig=fig4, func=get_all_year, frames=range(processed_df.year.min(), processed_df.year.max() + 1))\nanim2","a1c64e57":"s = processed_df.groupby('repo').date.sum().sort_values(ascending=False)\npie_fig, pie_ax = plt.subplots(figsize=(12, 8))\npie_ax.pie(s.tolist(), labels=s.index.tolist(), autopct='%1.1f%%', startangle=90)\npie_ax.axis('equal')\nplt.show()","9103e4f0":"user_commit_df = df.groupby('repo').nunique().sort_values('commit', ascending=False)[['commit', 'author']]","865270f8":"scatter_fig, scatter_axis = plt.subplots(figsize=(10, 5))\nscatter_axis.scatter(user_commit_df.commit, user_commit_df.author, c=[color[repo] for repo in user_commit_df.index])\nscatter_axis.set_xlabel('Number of commits', size=20)\nscatter_axis.set_ylabel('Number of users', size=20)\nscatter_axis.set_title('Number of unique users vs. Number of commits', size=20)\nplt.show()","05227133":"user_commit_df2 = user_commit_df.drop(labels=['torvalds\/linux'])\nscatter_fig2, scatter_axis2 = plt.subplots(figsize=(10, 5))\nscatter_axis2.scatter(user_commit_df2.commit, user_commit_df2.author, c=[color[repo] for repo in user_commit_df2.index])\nscatter_axis2.set_xlabel('Number of commits', size=20)\nscatter_axis2.set_ylabel('Number of users', size=20)\nscatter_axis2.set_title('Number of unique users vs. Number of commits without torvalds\/linux', size=20)\nplt.show()","aac928fc":"heatmap_df = pandas.DataFrame(index=repos, columns=repos)\nfor i in range(len(repos)):\n    for j in range(len(repos)):\n        k = df[df.repo.isin([repos[i], repos[j]])].groupby('author').repo.nunique()\n        if i != j:\n            heatmap_df.iloc[i, j] = set(k[k>1].index)\n        else:\n            heatmap_df.iloc[i, j] = set(k.index)\n\nfor i in range(len(repos)):\n    all_authors = heatmap_df.iloc[i].tolist()\n    del all_authors[i]\n    mix_authors = set(set().union(*all_authors))\n    heatmap_df.iloc[i, i] = heatmap_df.iloc[i, i] - mix_authors\n\nheatmap_df = heatmap_df.applymap(len)\nheatmap_df","9b079f29":"%matplotlib inline\ntext_df = df.groupby('repo').message.apply(lambda x: ''.join(x).lower())\nstopwords = set(STOPWORDS)\nstopwords.update(['pr', 'close', 'commit', 'spark'])\n\ndef get_wordcloud(repo):\n    cloud_ax.clear()\n    text = text_df.loc[repo].lower()\n    wordcloud = WordCloud(stopwords=stopwords).generate(text)\n    cloud_ax.imshow(wordcloud, interpolation='bilinear')\n    cloud_ax.axis(\"off\")\n    cloud_ax.set_title(repo, size=20)\n    plt.subplots_adjust(left=0.25, bottom=0.25)\n    cloud_fig.canvas.draw_idle()\n\n\ncloud_fig, cloud_ax = plt.subplots(figsize=(16, 8))\ncloud_anim = FuncAnimation(fig=cloud_fig, func=get_wordcloud, frames=repos)\ncloud_anim","1c49b022":"# Number of unique users vs. Number of commits across repos","dbc6e596":"# Reading, validating & processing data","9c6513b1":"# Users contributing to more than one repo","c0c7c60b":"# Number of commits vs. time per repo","f8b3b5a7":"### Inference: Very rarely users contribute across projects","300d630a":"### One single point i.e., torvalds\/linux is causing a huge shift, ignoring that we can see the scatter plot again as follows","e9c914e3":"# Number of commits per repo","a2c3a6d1":"# Total number of commits vs. time per repo (Animation)","9d29396c":"# WordCloud of various commit messages"}}