{"cell_type":{"b65b7e02":"code","0288e381":"code","ca67f82a":"code","dbc91845":"code","b66992f8":"code","058a56d2":"code","56eefbc5":"code","700b58ce":"code","8ef94efa":"code","f4a1307f":"code","34b2e423":"code","b82ed252":"code","b37f0de4":"code","f28b8e0c":"code","1698ca24":"code","af46a16a":"code","ed84456e":"code","312d4adc":"code","80ba14eb":"code","03d57834":"code","86cd80b3":"code","c26c031d":"code","fdcc373c":"code","feed3b17":"code","cec9295c":"code","95e435fa":"code","fd9e8780":"code","dc94611b":"code","0540e340":"code","661eda3d":"code","cda1a95f":"code","f28b0a34":"code","dbb156ec":"code","697e1880":"code","259d63a0":"code","c83bfb0b":"code","b62f154c":"code","d19c8ec4":"code","38d77ab3":"code","e0e47ecc":"code","b84fc03d":"code","d440ff21":"code","04c6dd9c":"code","59f126d5":"code","acd23e0d":"code","ca46f33f":"code","71bf8d0a":"code","4dd49841":"code","f1a4b04d":"code","f477ff43":"code","7b1fe562":"code","72f39e3e":"code","2c86447d":"code","85a8c2a5":"markdown","1ca4ed7a":"markdown","33dd8cce":"markdown","bf2db471":"markdown","da7e2d8e":"markdown","40add75d":"markdown","3d357faf":"markdown","c35a4a6b":"markdown","3b9ac448":"markdown","ee8f60ef":"markdown","3c887f15":"markdown","7152db10":"markdown","97ff3ffa":"markdown","b24c9bb3":"markdown","91799e39":"markdown","fe5b27fd":"markdown","d0c33207":"markdown"},"source":{"b65b7e02":"import gc\nimport sys\nimport optuna\nimport datetime\nimport warnings\nimport matplotlib\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\n\nfrom scipy.sparse import csr_matrix, hstack\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom pandas.api.types import is_categorical_dtype\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","0288e381":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca67f82a":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z","dbc91845":"!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","b66992f8":"train = pd.read_csv('train.tsv', sep='\\t')\n\nprint(train.shape)\ntrain.head(10)","058a56d2":"pd.DataFrame([['train_id', '\u5546\u54c1ID'],\n              ['name', '\u5546\u54c1\u540d'],\n              ['item_condition_id', '\u5546\u54c1\u306e\u72b6\u614b'],\n              ['category_name', '\u30ab\u30c6\u30b4\u30ea\u30fc\u540d'],\n              ['brand_name', '\u30d6\u30e9\u30f3\u30c9\u540d'],\n              ['price', '\u4fa1\u683c\uff08\u5358\u4f4d\uff1a\u30c9\u30eb\uff09'],\n              ['shipping', '\u9001\u6599\u304c\u58f2\u624b\u8ca0\u62c5\u304b\u3069\u3046\u304b'],['item_description', '\u5546\u54c1\u8aac\u660e']],\n              columns=['\u30ab\u30e9\u30e0', '\u610f\u5473'])","56eefbc5":"test_dummy = pd.read_csv('test.tsv', sep='\\t')\n\nprint(test_dummy.shape)\ntest_dummy.head(10)","700b58ce":"pd.DataFrame([['test_id', '\u5546\u54c1ID'],\n              ['name', '\u5546\u54c1\u540d'],\n              ['item_condition_id', '\u5546\u54c1\u306e\u72b6\u614b'],\n              ['category_name', '\u30ab\u30c6\u30b4\u30ea\u30fc\u540d'],\n              ['brand_name', '\u30d6\u30e9\u30f3\u30c9\u540d'],\n              ['shipping', '\u9001\u6599\u304c\u58f2\u624b\u8ca0\u62c5\u304b\u3069\u3046\u304b'],['item_description', '\u5546\u54c1\u8aac\u660e']],\n              columns=['\u30ab\u30e9\u30e0', '\u610f\u5473'])","8ef94efa":"test = pd.read_csv('test_stg2.tsv', sep='\\t')\n\nprint(test.shape)\ntest.head(10)","f4a1307f":"pd.DataFrame([['test_id', '\u5546\u54c1ID'],\n              ['name', '\u5546\u54c1\u540d'],\n              ['item_condition_id', '\u5546\u54c1\u306e\u72b6\u614b'],\n              ['category_name', '\u30ab\u30c6\u30b4\u30ea\u30fc\u540d'],\n              ['brand_name', '\u30d6\u30e9\u30f3\u30c9\u540d'],\n              ['shipping', '\u9001\u6599\u304c\u58f2\u624b\u8ca0\u62c5\u304b\u3069\u3046\u304b'],['item_description', '\u5546\u54c1\u8aac\u660e']],\n              columns=['\u30ab\u30e9\u30e0', '\u610f\u5473'])","34b2e423":"del test_dummy\ngc.collect()","b82ed252":"train.info()","b37f0de4":"train.nunique()","f28b8e0c":"train.isnull().sum()","1698ca24":"train.corr()","af46a16a":"sns.heatmap(train.corr(), annot=True, fmt='.2f')","ed84456e":"train.describe()","312d4adc":"sns.set()","80ba14eb":"train = train.drop(train[(train['price'] >= 200)].index, axis=0)\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 4))\nsns.histplot(train['price'], bins=50, ax=ax)\nplt.show()","03d57834":"train['log_price'] = np.log1p(train['price'])\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 4))\nsns.histplot(train['log_price'], bins=50, ax=ax)\nplt.show()","86cd80b3":"train = train.drop('log_price', axis=1)\ngc.collect()","c26c031d":"fig = sns.FacetGrid(train, hue='shipping', height=4, aspect=2)\nfig.map(sns.kdeplot, 'price', shade=True)\nplt.legend()","fdcc373c":"fig = sns.FacetGrid(train, hue='item_condition_id', height=4, aspect=2)\nfig.map(sns.kdeplot, 'price', shade=True)\nplt.legend()","feed3b17":"train_row = train.shape[0]\ntest_id = test['test_id']","cec9295c":"target = np.log1p(train['price'])\ntrain = train[[col for col in train.columns if col != 'price']]","95e435fa":"train = train.drop('train_id', axis=1)\ntest = test.drop('test_id', axis=1)","fd9e8780":"X = pd.concat([train, test], axis=0)\n\nprint(X.shape)\nX.head()","dc94611b":"X.isnull().sum()","0540e340":"X['category_name'] = X['category_name'].fillna(value='missing')\nX['item_description'] = X['item_description'].fillna(value='missing')\nX['name'] = X['name'].fillna(value='missing')\nX['brand_name'] = X['brand_name'].fillna(value='missing')","661eda3d":"X['category_name'] = X['category_name'].astype('category')\nX['item_description'] = X['item_description'].astype('category')\nX['name'] = X['name'].astype('category')\nX['brand_name'] = X['brand_name'].astype('category')","cda1a95f":"X['name'] = X['name'].cat.codes\nX['category_name'] = X['category_name'].cat.codes\nX['brand_name'] = X['brand_name'].cat.codes\nX['item_description'] = X['item_description'].cat.codes","f28b0a34":"train = X[:train_row]\ntest = X[train_row:]","dbb156ec":"del train_row\ngc.collect()","697e1880":"train = pd.concat([train, target], axis=1)\n\nprint(train.shape)\ntrain.head()","259d63a0":"df_group = train.groupby('category_name')['price']","c83bfb0b":"category_mean = df_group.mean()\ncategory_median = df_group.median()\ncategory_std = df_group.std()\ncategory_min = df_group.min()\ncategory_max = df_group.max()","b62f154c":"train['category_mean'] = train['category_name'].map(category_mean)\ntrain['category_median'] = train['category_name'].map(category_median)\ntrain['category_std'] = train['category_name'].map(category_std)\ntrain['category_min'] = train['category_name'].map(category_min)\ntrain['category_matrain'] = train['category_name'].map(category_max)","d19c8ec4":"del df_group\ngc.collect()","38d77ab3":"train = train[[col for col in train.columns if col != 'price']]","e0e47ecc":"train.to_pickle('train.pickle')\n\nprint(train.shape)\ntrain.head()","b84fc03d":"print(target.shape)\ntarget.head()","d440ff21":"'''\nX_tr, X_val, y_tr, y_val = train_test_split(train, target, test_size=0.2, random_state=666)\n\ndef create_model(trial):\n    num_leaves = trial.suggest_int('num_leaves', 2, 30)\n    n_estimators = trial.suggest_int('n_estimators', 50, 300)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0001, 0.99)\n    max_depth = trial.suggest_int('max_depth', 2, 10)\n    min_child_samples = trial.suggest_int('min_child_samples', 100, 1200)\n    min_data_in_leaf = trial.suggest_int('min_data_in_leaf', 5, 90)\n    bagging_freq = trial.suggest_int('bagging_freq', 1, 7)\n    bagging_fraction = trial.suggest_uniform('bagging_fraction', 0.0001, 1.0)\n    feature_fraction = trial.suggest_uniform('feature_fraction', 0.0001, 1.0)\n    subsample = trial.suggest_uniform('subsample', 0.1, 1.0)\n    colsample_bytree = trial.suggest_uniform('colsample_bytree', 0.1, 1.0)\n    \n    model = lgb.LGBMRegressor(\n        num_leaves=num_leaves,\n        n_estimators=n_estimators,\n        learning_rate=learning_rate,\n        max_depth=max_depth, \n        min_child_samples=min_child_samples, \n        min_data_in_leaf=min_data_in_leaf,\n        bagging_freq=bagging_freq,\n        bagging_fraction=bagging_fraction,\n        feature_fraction=feature_fraction,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        metric='rsme',\n        random_state=666)\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X_tr, y_tr)\n    y_pred = model.predict(X_val)\n    rsme = np.sqrt(mean_squared_error(y_pred, y_val))\n    return rsme\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=40)\nparams = study.best_params\nprint(params)\n'''","04c6dd9c":"params = {'num_leaves': 27,\n          'n_estimators': 246,\n          'learning_rate': 0.5891085520981525,\n          'max_depth': 8,\n          'min_child_samples': 736,\n          'min_data_in_leaf': 80,\n          'bagging_freq': 3,\n          'bagging_fraction': 0.7976794164483426,\n          'feature_fraction': 0.7716993533001292,\n          'subsample': 0.3585480926624078,\n          'colsample_bytree': 0.28978876816462784,\n          'random_state': 666}","59f126d5":"cls = lgb.LGBMRegressor(**params)\ncls.fit(train, target)","acd23e0d":"lgb.plot_importance(cls)\nplt.show()","ca46f33f":"del train, target, params\ngc.collect()","71bf8d0a":"test['category_mean'] = test['category_name'].map(category_mean)\ntest['category_median'] = test['category_name'].map(category_median)\ntest['category_std'] = test['category_name'].map(category_std)\ntest['category_min'] = test['category_name'].map(category_min)\ntest['category_max'] = test['category_name'].map(category_max)","4dd49841":"test.to_pickle('test.pickle')\n\nprint(test.shape)\ntest.head()","f1a4b04d":"prediction = np.expm1(cls.predict(test))","f477ff43":"del test\ngc.collect()","7b1fe562":"submit = pd.DataFrame(test_id, columns=['test_id'])\nsubmit['price'] = prediction\n\nsubmit.head(10)","72f39e3e":"del test_id, prediction\ngc.collect()","2c86447d":"submit.to_csv('.\/submission.csv', index=False)","85a8c2a5":"Kaggle\u3067\u7528\u610f\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u30017z\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081<br>\n\u89e3\u51cd\u306e\u51e6\u7406\u304b\u3089\u884c\u3063\u3066\u3044\u304f\u3002","1ca4ed7a":"# Competition","33dd8cce":"# Modeling","bf2db471":"\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n\u30fbhttps:\/\/linus-mk.hatenablog.com\/entry\/pandas-unique-integer-id\n\n\u307e\u305f\u3001\u6570\u5024\u5909\u63db\u3092\u7d71\u4e00\u3059\u308b\u305f\u3081\u306b\u3001train\u3068test\u3092\u7d50\u5408\u3057\u3066\u3001\u307e\u3068\u3081\u3066\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","da7e2d8e":"[Mercari Price Suggestion Challenge](https:\/\/www.kaggle.com\/c\/mercari-price-suggestion-challenge)","40add75d":"# Analytics","3d357faf":"# Datasets","c35a4a6b":"test\u30c7\u30fc\u30bf\u306f\u3001test.tsv\u3068test_stg2.tsv\u304c\u3042\u308b\u3002<br>\nsubmit\u306e\u3068\u304d\u306b\u306f\u3001test_stg2\u3092\u4f7f\u7528\u3059\u308b\u3002","3b9ac448":"# Module","ee8f60ef":"# Submit","3c887f15":"\u30e1\u30eb\u30ab\u30ea\u306b\u51fa\u54c1\u3055\u308c\u3066\u3044\u308b\u5546\u54c1\u30c7\u30fc\u30bf\uff08\u30ab\u30c6\u30b4\u30ea\u30fc\u3084\u30d6\u30e9\u30f3\u30c9\u306a\u3069\uff09\u3068\u4fa1\u683c\u3092\u3082\u3068\u306b<br>\n\u5546\u54c1\u30c7\u30fc\u30bf\u304b\u3089\u4fa1\u683c\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002","7152db10":"Submission\u30d5\u30a1\u30a4\u30eb\u306f\u3001\/kaggle\u4e0b\u3067\u306f\u306a\u304f\u3001\/kaggle\/working\u4e0b\u306b\u4f5c\u6210\u3059\u308b\u3002<br>\n\u307e\u305f\u3001submission\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\u3001index=False\u306b\u3059\u308b\u3002","97ff3ffa":"\u4e0b\u8a18\u306f\u3001Settings\u306eInternet\u3092ON\u306b\u3057\u3066\u5b9f\u884c\u3057\u306a\u3044\u3068\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002","b24c9bb3":"# Overview","91799e39":"# Preprocess","fe5b27fd":"# Unfreeze","d0c33207":"# Visualization"}}