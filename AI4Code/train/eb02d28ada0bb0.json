{"cell_type":{"50bcc936":"code","5a155704":"code","353598ba":"code","4c496ea9":"code","2deef45a":"code","46f08bdb":"code","e0a89f58":"markdown","cfaac6a9":"markdown","f90cdeb2":"markdown","1c8debc5":"markdown","152e2fa4":"markdown","408f8649":"markdown","8334b4c2":"markdown"},"source":{"50bcc936":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\nfrom matplotlib.animation import FuncAnimation\n","5a155704":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nweek_1 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week1.csv')","353598ba":"football_field = mpimg.imread('..\/input\/nfl2021\/images\/football_field.jpg')","4c496ea9":"#create data for randomly chosen game and play\nrandom_game = np.random.choice(week_1['gameId'].unique())\ndata = week_1[week_1['gameId'] == random_game]\nrandom_play = np.random.choice(data['playId'].unique())\ndata = data[data['playId']==random_play]\n\n#x, y, marker color, marker sizes and jersey num for creating scatter plot for the first frame\ncond = data['frameId'] == 1\ncolors = {'home':'whitesmoke', 'away':'coral', 'football':'brown'}\nsize = {'home':300, 'away':300, 'football':50}\n\nx = data.loc[cond, 'x']\ny = data.loc[cond, 'y']\nc = data.loc[cond, 'team'].map(colors)\ns = data.loc[cond, 'team'].map(size)\njersey_num = data.loc[cond, 'jerseyNumber'].values\njersey_num = ['' if np.isnan(num) else str(int(num)) for num in jersey_num] #assigning empty string for nan value from football jersey number\nzipped = list(zip(x, y, jersey_num)) #for looping and creating annotations on the marker","2deef45a":"#set up the plot\nfig, ax = plt.subplots(figsize=(14,8))\nimgplot = ax.imshow(football_field, extent=[0, 120, 0, 53.3])\n\n#cap xmin at 0 and xman at 120\nxmin = 0 if ((data['x'].min()-20) < 0 or (data['x'].min() < 0)) else data['x'].min()-20\nxmax = 120 if ((data['x'].max()+20 > 120) or (data['x'].max() > 120)) else data['x'].max()+20\n#xmean for centering title text\nxmean = np.mean([xmin, xmax])\nax.set(xticks=([]), yticks=([]), xlim=(xmin, xmax), ylim=(-5, 53.3));\n\n#creating title with two line breaks to ensure title stays within plot\nplayId = data['playId'].unique().item() #retrieve playId from data\ngameId = data['gameId'].unique().item() #retrieve gameId from data\ntitle_cond = (plays['playId'] == playId) & (plays['gameId'] == gameId) #use playId and gameId as filter condition\n\ntitle_list = plays.loc[title_cond, 'playDescription'].values.item().split(' ') #save title to list\ninsert_index = int(round(len(title_list)\/3)) #index position for inserting two line breaks\n\nfor i in [insert_index, insert_index*2]: #insert two line break\n    title_list.insert(i, '\\n')\n    \ntitle = ' '.join(title_list) #join title list on ' '\nplot_title = ax.text(x=xmean, y=-2.5, s=title, fontsize=11, ha='center', va='center') #plot title with two line break\n\n#setting up the legend with white text\nteam = ['home', 'away']\ncolor = list(colors.values())[:2]\nteam_color = list(zip(team, color))\nfor team, color in team_color:\n    ax.scatter([], [], label=team, c=color)\n\nlegend = ax.legend(frameon=False)\n\n#plot scatter points and annotations\nscatter = ax.scatter(x, y, marker='o', linestyle='None', c=c, s=s, edgecolor='black', linewidths=1.2,)\nannotations = [ax.annotate(val[2], xy=(val[:2]), va='center', ha='center') for val in zipped]","46f08bdb":"#create animate function to update scatter plot and annotations\ndef animate(frame_id):\n    #set new xy postions for previously created scatter plot\n    xy = data.loc[data['frameId']==frame_id, ['x', 'y']].to_numpy()\n    scatter.set_offsets(xy)\n    \n    #set new xy postions for previously created annotations\n    if frame_id > 0:\n        [annotations[i].set_position(tuple(xy[i])) for i in range(len(xy))]\n\n        \n#call funcanimation\nanim = FuncAnimation(fig, animate, interval=100, frames=len(data['frameId'].unique())+1)\nplt.rcParams['animation.html'] = 'html5'\nanim","e0a89f58":"![](https:\/\/gmufourthestate.com\/files\/2020\/02\/NFL-Summary_FERGUSON_2.10.20_RGB-768x374.jpg)\n\nThis is the first time that I have tried to create an animation in matplotlib. Although the result looks like a tv video game from the 90's, I'm quite happy that I was able to replicate the animation from the [tutorial](https:\/\/www.kaggle.com\/tombliss\/tutorial) written in R.\n\nAfter reading many articles, I found this [blog](https:\/\/brushingupscience.com\/2016\/06\/21\/matplotlib-animations-the-easy-way\/) to be the best material to understand matplotlib animations. Similar steps from the blog has been followed here:\n- Choose a random game and play from that game.\n- Create a scatter plot with jersey numbers.\n- Animate the plot with FuncAnimation method with new xy position offsets from consecutive frame ids.\n\nI will be using a random football image as plot background.","cfaac6a9":"### Imports and reading data","f90cdeb2":"### Football field image for plot background","1c8debc5":"### Animating the plot\n\nThe FuncAnimation function needs three main arguments for the animation to work, the figure object on which to animate, frames argument for the number of frames in the animation and a function that will be called repeatedly with number of frames. The interval argument is the time in milliseconds to wait before showing the next frame, this argument is optional and used to control the speed of the animation.\n\nThe animate function created below gets the new xy postions for the scatter plot marker and annotations based on the frame_id. frames argument from FuncAnimation is passed to frame_id, so we don't have pass anything to the animate function.","152e2fa4":"### Conclusion\nAs suggested earlier this [blog](https:\/\/brushingupscience.com\/2016\/06\/21\/matplotlib-animations-the-easy-way\/) post is probably the best place to easily understand matplotlib animation. Also this [youtube](https:\/\/www.youtube.com\/watch?v=F57_0XPdhD8&t=126s) video might help. Thank you for taking the time to read the notebook. Please upvote if you liked it.","408f8649":"### Choosing a random game and play\nThe main idea here is to choose a random game and play from week1 tracking data and filter down to frameId 1. This data will be used for the scatter plot. Variables - x, y, c and s are used for styling the scatter plot markers. Jersey numbers are needed to annotate the markers and later used in the animation.","8334b4c2":"### Creating the plot\nWe can now create the scatter plot with annotations with the football field as image background. They are saved to \"scatter\" and \"annotations\" variables respectively. Below is a summary of the code:\n- The plot dimensions are set to 0, 120, 0, 53.3 as given in the [data overview](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2021\/data).\n- xmin and xmax are used for zooming into the plot\n- xmean is used for x position in plot_title. A simple ax.set_title works but it looks very bad in the animation, hence the complicated code with ax.text and creating two line breaks to keep the title text within the plot."}}