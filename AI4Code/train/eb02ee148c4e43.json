{"cell_type":{"39c54ad6":"code","1189197b":"code","fbb16000":"code","1d072c62":"code","b72d6c27":"code","f4b24847":"code","eb652ed1":"code","331d5e31":"code","f9d6d9ee":"code","44cc627e":"code","eb427360":"code","548fb135":"code","18686af0":"code","cc78cb56":"code","c95e0f33":"code","7375074b":"markdown","20bf84c8":"markdown","0850a2dc":"markdown"},"source":{"39c54ad6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1189197b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.express as px\n\nfrom math import pi\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D","fbb16000":"train = pd.read_csv('\/kaggle\/input\/pubg-weapon-stats\/pubg-weapon-stats.csv')","1d072c62":"data = train.copy()\ndata.head()","b72d6c27":"# let's see only Rifles\nrifle = data[data['Weapon Type'] == \"Assault Rifle\"]","f4b24847":"# Delete space between character\nrifle.rename(columns = {\"Weapon Name\":\"WeaponName\"\n                        ,\"Bullet Type\":\"BulletType\"\n                       , \"Magazine Capacity\":\"MagazineCapacity\"\n                       , \"Bullet Speed\":\"BulletSpeed\"\n                       , \"Rate of Fire\":\"RateOfFire\"\n                       , \"Shots to Kill (Chest)\":\"ShotsToKillChest\"\n                       , \"Shots to Kill (Head)\":\"ShotsToKillHead\"\n                       , \"Damage Per Second\":\"DamagePerSecond\"\n                       , \"Fire Mode\":\"FireMode\"}, inplace = True)\nrifle","eb652ed1":"# We will look at these variables in 'rifle' = damage, magazine, range, rate of fire, damage per second\nrifle_new = rifle[['WeaponName', 'Damage', 'Range', 'RateOfFire', 'DamagePerSecond', 'BDMG_0']]","331d5e31":"#check\nrifle_new","f9d6d9ee":"# change 'Damage'\n# make a list of 'Damage'\ndamage_list = list(rifle_new['Damage'])\n# delete duplication\ndmg_list = []\nfor i in damage_list:\n    if i not in dmg_list:\n        dmg_list.append(i)\ndmg_list.sort()\n\n# Change 'Damage' in to 1~10\nfor k in range(len(dmg_list)):\n    rifle_new.loc[(rifle_new.Damage == dmg_list[k]), 'Damage'] = (1+k)*3\n","44cc627e":"# Range\nrange_list = list(rifle_new['Range'])\nrg_list = []\nfor i in range_list:\n    if i not in rg_list:\n        rg_list.append(i)\nrg_list.sort()\n\n# change 'Range' in to 1~10\nfor k in range(len(rg_list)):\n    rifle_new.loc[(rifle_new.Range == rg_list[k]), 'Range'] = (1+k)*3","eb427360":"# Rate of Fire\nrate_list = list(rifle_new['RateOfFire'])\nrf_list = []\nfor i in rate_list:\n    if i not in rf_list:\n        rf_list.append(i)\nrf_list.sort()\n\nfor k in range(len(rf_list)):\n    rifle_new.loc[(rifle_new.RateOfFire == rf_list[k]), 'RateOfFire'] = (1+k)*3","548fb135":"# Damage Per Second\ndmgPS_list = list(rifle_new['DamagePerSecond'])\ndps_list = []\nfor i in dmgPS_list:\n    if i not in dps_list:\n        dps_list.append(i)\ndps_list.sort()\nfor k in range(len(dps_list)):\n    rifle_new.loc[(rifle_new.DamagePerSecond == dps_list[k]), 'DamagePerSecond'] = (1+k)*2","18686af0":"# BDMG_0 (Body Damage\nBDMG_list = list(rifle_new['BDMG_0'])\nbdmg_list = []\nfor i in BDMG_list:\n    if i not in bdmg_list:\n        bdmg_list.append(i)\nbdmg_list.sort()\nfor k in range(len(bdmg_list)):\n    rifle_new.loc[(rifle_new.BDMG_0 == bdmg_list[k]), 'BDMG_0'] = (1+k)*2","cc78cb56":"# chec. you can see the changes of values range\nrifle_new","c95e0f33":"rifle_data = rifle_new.copy()\n\nlabels = rifle_data.columns[1:]\nnum_labels = len(labels)\n\nangles = [x\/float(num_labels)*(2*pi) for x in range(num_labels)]\nangles += angles[:1]\n\nmy_palette = plt.cm.get_cmap(\"Set2\", len(rifle_data.index))\n\nfig = plt.figure(figsize = (15, 20))\nfig.set_facecolor('white')\n\nfor i, row in rifle_data.iterrows():\n    color = my_palette(i)\n    data = rifle_data.iloc[i].drop('WeaponName').tolist()\n    data += data[:1]\n    \n    ax = plt.subplot(5,2,i+1, polar = True)\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    \n    plt.xticks(angles[:-1], labels, fontsize = 13)\n    ax.tick_params(axis = 'x', which = 'major', pad = 15)\n    \n    ax.set_rlabel_position(0)\n    plt.yticks([0, 2, 4, 6, 8, 10, 12, 14, 16], fontsize = 0)\n    plt.ylim(0,16)\n    \n    ax.plot(angles, data, color = color, linewidth = 2, linestyle = 'solid')\n    ax.fill(angles, data, color = color, alpha = 0.4)\n    \n    plt.title(row.WeaponName, size = 20, color=color, x=-0.2, y=1.2, ha='left')\nplt.tight_layout(pad=7)\nplt.show()","7375074b":"# we can see weapons features in radar chart. \n# you can make more variety charts, by select other variables.","20bf84c8":"# Use Radar Chart for visualize weapons","0850a2dc":"# We first have to change the values of the variables between 1 and 16.\n# This is because it can be displayed on the radar chart."}}