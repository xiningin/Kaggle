{"cell_type":{"9829e84e":"code","fc35d615":"code","77c1fdca":"code","08f3d9da":"code","cfd4da0b":"code","534b9c05":"code","8fe83544":"code","39118a83":"code","f59f792a":"markdown","d42d3fb0":"markdown","96228de8":"markdown","a57315b8":"markdown"},"source":{"9829e84e":"!pip install pytorch_tabnet ","fc35d615":"import sys\nsys.path.append(\"..\/input\/rank-gauss\")\n\nfrom pytorch_tabnet.tab_model import TabNetClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import QuantileTransformer,  KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\nfrom gauss_rank_scaler import GaussRankScaler\n\nimport torch\n\nfrom sklearn.decomposition import PCA\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.pipeline import Pipeline\n\n%matplotlib inline","77c1fdca":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\n\ntrain['n_missing'] = train.isna().sum(axis=1)\ntest['n_missing'] = test.isna().sum(axis=1)\nfeatures = [col for col in train.columns if col not in ['claim', 'id']]\n\ntrain['claim'] = train['claim'].astype(str)\ntrain[features] = train[features].fillna(train[features].median())\ntest[features]  = test[features].fillna(train[features].median())","08f3d9da":"%%time\n# scaler = QuantileTransformer(n_quantiles=200, output_distribution='normal')\nscaler = GaussRankScaler()\nX = scaler.fit_transform(train[features])\nX_test = scaler.transform(test[features])","cfd4da0b":"# %%time\n# pca = PCA(n_components = 0.95)\n# pca.fit(X)\n# X = pca.transform(X)","534b9c05":"tabnet_params = dict(n_steps = 1,\n                   optimizer_fn=torch.optim.Adam,\n                   optimizer_params=dict(lr=1e-2, weight_decay = 5e-5),\n                   scheduler_params = dict(mode = \"min\", patience = 1, min_lr = 1e-5, factor = 0.5),\n                   scheduler_fn=torch.optim.lr_scheduler.ReduceLROnPlateau,\n                   mask_type='entmax',\n                   verbose = 5)","8fe83544":"from sklearn.model_selection import KFold\nimport torch\n\nkf = KFold(n_splits=5, random_state = 42, shuffle = True)\npreds = np.zeros((493474,))\nfor  fold , (train_index, test_index) in enumerate(kf.split(X)):\n    print(20*\"*\")\n    print(\"Fold {}:\".format(fold))\n    X_train, X_valid = X[train_index], X[test_index]\n    y_train, y_valid = train.claim[train_index].values, train.claim[test_index].values\n\n    clf = TabNetClassifier(**tabnet_params)\n    clf.fit(\n        X_train=X_train, y_train=y_train,\n        eval_set=[(X_train, y_train), (X_valid, y_valid)],\n        eval_name=['train', 'valid'],\n        eval_metric=['auc'],\n        max_epochs= 15, patience=5,\n        batch_size=1024*10, virtual_batch_size=128*10,\n        num_workers=0,\n        weights=1,\n        drop_last=False\n    ) \n    preds += clf.predict_proba(X_test)[:,1]\/5\n","39118a83":"sub = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsub.iloc[:,1]= preds\nsub=sub.set_index('id')\nsub.to_csv('submission.csv')\n","f59f792a":"# Training","d42d3fb0":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/28009\/logos\/header.png?)","96228de8":"# Preprocessing","a57315b8":"# Import"}}