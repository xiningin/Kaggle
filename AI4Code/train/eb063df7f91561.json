{"cell_type":{"80e0decf":"code","7ad00bfe":"code","ff38fbd9":"code","1af2f3ef":"code","3c690d16":"code","70fcce31":"code","38a46088":"code","215b36b1":"markdown","d00b5a98":"markdown","e547114c":"markdown","2494fdf0":"markdown","9221d599":"markdown","2db305eb":"markdown","cf8f76ff":"markdown"},"source":{"80e0decf":"import pandas as pd\nimport numpy as np\nimport random \nimport time\nimport os\nimport gc\n\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import roc_auc_score\n\nimport lightgbm as lgb\nimport catboost as cat\nimport xgboost as xgb\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom warnings import simplefilter\nsimplefilter('ignore')\n","7ad00bfe":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","ff38fbd9":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nTARGET = 'Survived'\nX_test = test\nRANDOM_SEED = 2021\nN_SPLITS = 5\nN_ESTIMATORS = 10000\nEARLY_STOPPING_ROUNDS = 200\nVERBOSE = 1000\n\nfeatures = X.columns","1af2f3ef":"lgb_params = {\n    'objective': 'binary',\n    'n_estimators': 10000,\n    'random_state': 1,\n    'learning_rate': 8e-3,\n    \n    'device': 'gpu'   \n    \n}","3c690d16":"lgb_oof = np.zeros(train.shape[0])\nlgb_pred = np.zeros(test.shape[0])\nlgb_importances = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=RANDOM_SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=train[TARGET])):\n    print(f\"===== fold {fold} =====\")\n    X_train, y_train = train[features].iloc[trn_idx], train[TARGET].iloc[trn_idx]\n    X_valid, y_valid = train[features].iloc[val_idx], train[TARGET].iloc[val_idx]\n    X_test = test[features]\n    \n    start = time.time()\n    model = lgb.LGBMClassifier(**lgb_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        eval_metric='auc',\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n    \n    fi_tmp = pd.DataFrame()\n    fi_tmp['feature'] = model.feature_name_\n    fi_tmp['importance'] = model.feature_importances_\n    fi_tmp['fold'] = fold\n    fi_tmp['seed'] = RANDOM_SEED\n    lgb_importances = lgb_importances.append(fi_tmp)\n\n    lgb_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    lgb_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, lgb_oof[val_idx])\n    print(f\"fold {fold} - lgb auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof lgb roc = {roc_auc_score(train[TARGET], lgb_oof)}\")","70fcce31":"output = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\noutput.target = lgb_pred\noutput.to_csv('submission.csv', index=False)","38a46088":"# most important features for lgb model\nfrom optuna.integration import lightgbm as lgb\nlgb.plot_importance(model, max_num_features=len(train.columns), figsize=(10,10))\nplt.show()","215b36b1":"# make model and predict ","d00b5a98":"# preprocessing","e547114c":"# import libraries","2494fdf0":"# submisstion","9221d599":"# set variable ","2db305eb":"# model param","cf8f76ff":"# draw featue importance "}}