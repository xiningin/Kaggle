{"cell_type":{"814ad9a5":"code","04549327":"code","20b645a6":"code","28253032":"code","af3605f0":"code","4b4f20bc":"code","c5df07ef":"code","df23af06":"code","0d847931":"code","e25004d0":"code","7e8f892c":"code","39dfb86d":"code","8af27e55":"code","5e1b93f4":"code","b1393acd":"code","c7c7ee07":"code","471c899f":"code","bc80a13f":"code","3fdcee8c":"code","9607fa4e":"code","7d52bdaa":"code","4af55607":"code","5aa91466":"code","b23f9214":"code","e8b797fc":"code","40c4a4bc":"markdown","4898dcb4":"markdown","2bdfdbaa":"markdown","6b93a997":"markdown","dc134bf8":"markdown","c40407da":"markdown","25207633":"markdown","3e92f38a":"markdown"},"source":{"814ad9a5":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\n\nimport time\nfrom tensorflow.keras.callbacks import TensorBoard","04549327":"DATADIR = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\nCATEGORIES = ['PNEUMONIA', 'NORMAL']\n\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR, category) # path to pneumonia & normal\n    for img in os.listdir(path):\n        print(category)\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap='gray')\n        plt.show()\n        print(img_array.shape)\n        break\n    ","20b645a6":"size = 100\n\nnew_img = cv2.resize(img_array, (size, size))\nplt.imshow(new_img, cmap='gray')\nprint(new_img.shape)","28253032":"train = []\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR, category) # path to pneumonia & normal\n    class_num = CATEGORIES.index(category)\n    for img in os.listdir(path):\n        #print(category)\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        new_img = cv2.resize(img_array, (size, size))\n        train.append([new_img, class_num])\n\n","af3605f0":"print(len(train))","4b4f20bc":"DATADIR2 = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test'\ntest = []\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR2, category) # path to pneumonia & normal\n    class_num = CATEGORIES.index(category)\n    for img in os.listdir(path):\n        #print(category)\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        new_img = cv2.resize(img_array, (size, size))\n        test.append([new_img, class_num])","c5df07ef":"print(len(test))","df23af06":"# Combine the train and test data\nDATA = train + test","0d847931":"# We have to shuffle the data\nimport random\nrandom.shuffle(DATA)","e25004d0":"# Turn data into features and target\nX = []\ny = []\n\nfor features, label in DATA:\n    #print(features,'\\n', label)\n    X.append(features)\n    y.append(label)","7e8f892c":"# Check for imbalances\nP = 0 \nH = 0\nfor i in y:\n    if i == 0:\n        P += 1\n    H += 1    \nprint('Pneumonia: {}; Healthy: {}'.format(P,H))","39dfb86d":"X[0].shape","8af27e55":"X = np.array(X).reshape(-1, size, size, 1) # 1 is used as the number of channels because the images are grayscale\ny = np.array(y)","5e1b93f4":"print(X[0].shape)","b1393acd":"X = X\/255.0","c7c7ee07":"model = Sequential()\nmodel.add(Conv2D(32, (3,3), input_shape = (100, 100, 1)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten()) # this converts our 3D feature maps to 1D feature vectors\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","471c899f":"model.summary()","bc80a13f":"model.compile(loss='binary_crossentropy',\n              optimizer='adam', \n              metrics=['accuracy'])","3fdcee8c":"# Set tensorboard directory\nimport datetime\nlog_dir = \"logs\\\\\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)","9607fa4e":"history = model.fit(X, y, batch_size = 32, \n         validation_split = 0.2,\n         epochs=5,\n         callbacks = [tensorboard_callback])","7d52bdaa":"%load_ext tensorboard\n%tensorboard --logdir logs\\\\","4af55607":"## example plotting\nplt.figure(figsize=(12,8))\nplt.plot(history.history['loss'], 'r', linewidth=3)\nplt.plot(history.history['val_loss'], 'b', linewidth=3)\nplt.legend(['training loss', 'validation_loss'], fontsize=12)\nplt.xlabel('epochs', fontsize=12)\nplt.ylabel('loss', fontsize=12)","5aa91466":"## example plotting\nplt.figure(figsize=(12,8))\nplt.plot(history.history['accuracy'], 'r', linewidth=3)\nplt.plot(history.history['val_accuracy'], 'b', linewidth=3)\nplt.legend(['training accuracy', 'validation accuracy'], fontsize=12)\nplt.xlabel('epochs', fontsize=12)\nplt.ylabel('accuracy', fontsize=12)","b23f9214":"# Make prediction on someone's lungs radiogrpahy\n\ndef prepare(filepath):\n    IMG_SIZE = 100\n    img_array = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)\n    new_array = cv2.resize(img_array, (size, size))\n    return new_array.reshape(-1, size, size, 1)","e8b797fc":"prediction = model.predict([prepare('\/kaggle\/input\/ttaaaa\/lungs.jpeg')])\nprint(CATEGORIES[int(prediction[0][0])]) ","40c4a4bc":"As can be observed the sizes of the images adiffer.\n\nWe want to have the same size for all the image in order to train our CNN.","4898dcb4":"As can be observed, our data is quite balanced.\n\nThere are few steps left before we can start the modelling.","2bdfdbaa":"The last step is to normalize the data.\n\nEasiest way is to scale that data: min 0, max 255.","6b93a997":"Let's apply resizing to all images and create our training data","dc134bf8":"Let's do the same for the testing data","c40407da":"Fit the CNN to the data","25207633":"As can be seen, the features are currently 2D, we need to turn them into tensors (3D) in order to feed them to the CNN.\n\nIn order to do that, we first need to turn the features into arrays.","3e92f38a":"Build the CNN"}}