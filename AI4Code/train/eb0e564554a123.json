{"cell_type":{"ea864587":"code","fa7f81f0":"code","f6d54a36":"code","debf262c":"code","8f99e082":"code","6ba92031":"code","874bb247":"code","31add15e":"code","a4e63229":"code","86c1b9f7":"code","cfa936da":"code","ac5f2cd8":"code","524630c9":"code","27ca63d0":"code","c5fc6dae":"code","086ecbd9":"code","7901ef9c":"code","2bf38f8d":"code","bd0e00ea":"code","e2471881":"code","062246ef":"code","9dd50021":"code","78cb7580":"code","f45cb48b":"code","496034b9":"code","a818d9ab":"code","05affeed":"code","6098a75d":"code","1be2ea0f":"code","0a575315":"code","487a368b":"code","5098b0f7":"code","d3a30934":"markdown","3fb09aed":"markdown","1f52f422":"markdown","4f79964d":"markdown","5eb02bff":"markdown","2427bdf7":"markdown","1649c99c":"markdown"},"source":{"ea864587":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa7f81f0":"import matplotlib.pyplot as plt","f6d54a36":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","debf262c":"print(df_train.shape)\nprint(df_test.shape)","8f99e082":"df_train.head()","6ba92031":"y = df_train['label']\ndf = pd.concat([df_train.drop(columns='label'), df_test])","874bb247":"data = df.to_numpy().reshape((70000, 28, 28, 1))\nX = data[:df_train.shape[0]]\/255\nX_test = data[df_train.shape[0]:]\/255","31add15e":"X.shape","a4e63229":"y.value_counts()","86c1b9f7":"imgplot = plt.imshow(X[3], cmap='gray')\nplt.show()","cfa936da":"class_names = [str(_) for _ in range(10)]\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X[i], cmap=plt.cm.binary)\n    # The CIFAR labels happen to be arrays, \n    # which is why you need the extra index\n    plt.xlabel(class_names[y[i]])\nplt.show()","ac5f2cd8":"import tensorflow as tf\nfrom tensorflow.keras import models, layers","524630c9":"data_augmentation = tf.keras.Sequential([\n  layers.experimental.preprocessing.RandomRotation(0.05),\n])","27ca63d0":"X_augmented = data_augmentation(X)","c5fc6dae":"class_names = [str(_) for _ in range(10)]\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X_augmented[i], cmap=plt.cm.binary)\n    # The CIFAR labels happen to be arrays, \n    # which is why you need the extra index\n    plt.xlabel(class_names[y[i]])\nplt.show()","086ecbd9":"X_all = np.concatenate((X, X_augmented), axis=0)\ny_all = np.concatenate((y, y))\ny_all = pd.get_dummies(y_all)","7901ef9c":"y_all.shape","2bf38f8d":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\n#model.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))\nmodel.add(layers.Softmax())","bd0e00ea":"model.summary()","e2471881":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(X_all, pd.get_dummies(y_all), validation_split=0.2, epochs=10)","062246ef":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","9dd50021":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","78cb7580":"y_test = model.predict(X_test)","f45cb48b":"y_test","496034b9":"df_preds = pd.DataFrame({'ImageId':range(1, X_test.shape[0]+1), 'Label':np.argmax(y_test, axis=1)})","a818d9ab":"df_preds","05affeed":"df_preds.to_csv('singleModelSubmission.csv', index=False)","6098a75d":"from sklearn.model_selection import KFold\n\nfolds = KFold(n_splits = 10, shuffle = True, random_state = 42)\n\npredictions = np.zeros((len(X_test),10))\n\ni=1\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X_all, y_all)):\n    X_train = np.take(X_all, trn_idx, axis=0)\n    X_val = np.take(X_all, val_idx, axis=0)\n    y_train = np.take(y_all, trn_idx, axis=0)\n    y_val = np.take(y_all, val_idx, axis=0)\n    #print(X_train.shape, X_val.shape, y_train.shape, y_val.shape)\n    #break\n\n    model.compile(optimizer='adam',\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n   \n    history = model.fit(X_train, y_train, validation_data = (X_val, y_val), epochs=5, verbose = 1)\n    \n    predictions += model.predict(X_test) \/ folds.n_splits \n    \n    print(\"\\n    {}\/10: {} - {}\\n\".format(i, history.history['accuracy'][-1], history.history['val_accuracy'][-1]))\n    i+=1","1be2ea0f":"predictions[:10]","0a575315":"np.argmax(predictions, axis=1)","487a368b":"df_preds = pd.DataFrame({'ImageId':range(1, X_test.shape[0]+1), 'Label':np.argmax(predictions, axis=1)})","5098b0f7":"df_preds.to_csv('multipleModelSubmission.csv', index=False)","d3a30934":"# Multiple Models","3fb09aed":"Achieved 0.98492 score with single model.","1f52f422":"Last score:\n- loss: 1.5545 - accuracy: 0.9580 - val_loss: 1.5464 - val_accuracy: 0.9627\n- loss: 1.4980 - accuracy: 0.9797 - val_loss: 1.5221 - val_accuracy: 0.9560\n","4f79964d":"Achieved 0.99050 score.","5eb02bff":"# TF Model","2427bdf7":"Root of 784 is 28. We have 28x28 images.","1649c99c":"# Data Augmentation"}}