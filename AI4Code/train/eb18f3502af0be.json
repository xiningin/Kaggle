{"cell_type":{"b361fc3c":"code","884ce48e":"code","42d801c9":"code","9e00273b":"code","5d17b891":"code","e8a2d0ec":"code","48b8f325":"code","bb926b07":"code","01c191ba":"code","ac38fa93":"code","1591d64b":"code","4f07bd52":"markdown","a0ae52f9":"markdown","5ec52f22":"markdown","81a1f590":"markdown","40cedcab":"markdown","dbcbee13":"markdown","98e1d362":"markdown"},"source":{"b361fc3c":"package_path = '..\/input\/pytorch-image-models\/pytorch-image-models-master'\n\nimport sys\nsys.path.append(package_path)\n\nDATA_DIR = '..\/input\/cassava-leaf-disease-classification'\nMODEL_DIR = '..\/input\/efficientnet-baseline-train-amp-aug'","884ce48e":"from datetime import datetime\nimport os\nimport random\nimport time\nimport warnings\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport cv2\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold\n\nimport torch\nfrom torch import nn\nfrom torch.cuda.amp import autocast, GradScaler\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch.utils.data.sampler import SequentialSampler, RandomSampler\nimport timm\n\nfrom albumentations import (\n    HorizontalFlip, VerticalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, IAAPiecewiseAffine, RandomResizedCrop,\n    IAASharpen, IAAEmboss, RandomBrightnessContrast, Flip, OneOf, Compose, Normalize, Cutout, CoarseDropout, ShiftScaleRotate, CenterCrop, Resize\n)\nfrom albumentations.pytorch import ToTensorV2","42d801c9":"CFG = {\n    'fold_num': 5,\n    'seed': 719,\n    'model_arch': 'tf_efficientnet_b4_ns',\n    'img_size': 512,\n    'epochs': 10,\n    'train_bs': 32,\n    'valid_bs': 32,\n    'lr': 1e-4,\n    'num_workers': 4,\n    'accum_iter': 1, # support to do batch accumulation for backprop with effectively larger batch size\n    'verbose_step': 1,\n    'device': 'cuda:0',\n    'tta': 3,\n    'used_epochs': [6,7,8,9],\n    'weights': [1,1,1,1]\n}","9e00273b":"train = pd.read_csv(f'{DATA_DIR}\/train.csv')","5d17b891":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n    \ndef get_img(path):\n    im_bgr = cv2.imread(path)\n    im_rgb = im_bgr[:, :, ::-1]\n    return im_rgb","e8a2d0ec":"class CassavaDataset(Dataset):\n    def __init__(self, df, data_root, transforms=None, output_label=True):\n        \n        super().__init__()\n        self.df = df.reset_index(drop=True).copy()\n        self.transforms = transforms\n        self.data_root = data_root\n        self.output_label = output_label\n    \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, index: int):\n        \n        if self.output_label:\n            target = self.df.iloc[index]['label']\n          \n        img  = get_img(f\"{self.data_root}\/{self.df.loc[index]['image_id']}\")\n        \n        if self.transforms:\n            img = self.transforms(image=img)['image']\n            \n        # do label smoothing\n        if self.output_label:\n            return img, target\n        else:\n            return img","48b8f325":"def get_train_transforms():\n    return Compose([\n            RandomResizedCrop(CFG['img_size'], CFG['img_size']),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            ShiftScaleRotate(p=0.5),\n            HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n            RandomBrightnessContrast(brightness_limit=(-0.1,0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            CoarseDropout(p=0.5),\n            Cutout(p=0.5),\n            ToTensorV2(p=1.0),\n        ], p=1.0)\n  \n        \ndef get_valid_transforms():\n    return Compose([\n            CenterCrop(CFG['img_size'], CFG['img_size'], p=1.0),\n            Resize(CFG['img_size'], CFG['img_size']),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.0)\n\ndef get_inference_transforms():\n    return Compose([\n            RandomResizedCrop(CFG['img_size'], CFG['img_size']),\n            Transpose(p=0.5),\n            HorizontalFlip(p=0.5),\n            VerticalFlip(p=0.5),\n            HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n            RandomBrightnessContrast(brightness_limit=(-0.1,0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n            Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.0)","bb926b07":"class CassvaImgClassifier(nn.Module):\n    def __init__(self, model_arch, n_class, pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_arch, pretrained=pretrained)\n        n_features = self.model.classifier.in_features\n        self.model.classifier = nn.Linear(n_features, n_class)\n        \n    def forward(self, x):\n        x = self.model(x)\n        return x","01c191ba":"def inference_one_epoch(model, data_loader, device):\n    model.eval()\n\n    image_preds_all = []\n    \n    pbar = tqdm(enumerate(data_loader), total=len(data_loader))\n    for step, (imgs) in pbar:\n        imgs = imgs.to(device).float()\n        \n        image_preds = model(imgs)\n        image_preds_all += [torch.softmax(image_preds, 1).detach().cpu().numpy()]\n        \n    image_preds_all = np.concatenate(image_preds_all, axis=0)\n    return image_preds_all","ac38fa93":"%%time\n\nif __name__ == '__main__':\n     # for training only, need nightly build pytorch\n\n    seed_everything(CFG['seed'])\n    \n    stratifiedKFold = StratifiedKFold(n_splits=CFG['fold_num'])\n    folds = stratifiedKFold.split(np.arange(train.shape[0]), train.label.values)\n    \n    for fold, (trn_idx, val_idx) in enumerate(folds):\n        # we'll train fold 0 first\n        if fold > 0:\n            break\n\n        print(f'Inference fold {fold} started')\n\n        valid_ = train.loc[val_idx,:].reset_index(drop=True)\n        valid_ds = CassavaDataset(\n            valid_, f'{DATA_DIR}\/train_images\/',\n            transforms=get_inference_transforms(), output_label=False)\n        \n        test = pd.DataFrame()\n        test['image_id'] = list(os.listdir(f'{DATA_DIR}\/test_images\/'))\n        test_ds = CassavaDataset(\n            test, f'{DATA_DIR}\/test_images\/',\n            transforms=get_inference_transforms(), output_label=False)\n        \n        val_loader = torch.utils.data.DataLoader(\n            valid_ds, \n            batch_size=CFG['valid_bs'],\n            num_workers=CFG['num_workers'],\n            shuffle=False,\n            pin_memory=False,\n        )\n        \n        tst_loader = torch.utils.data.DataLoader(\n            test_ds, \n            batch_size=CFG['valid_bs'],\n            num_workers=CFG['num_workers'],\n            shuffle=False,\n            pin_memory=False,\n        )\n\n        device = torch.device(CFG['device'])\n        model = CassvaImgClassifier(CFG['model_arch'], train.label.nunique()).to(device)\n        \n        val_preds = []\n        tst_preds = []\n        \n        for i, epoch in enumerate(CFG['used_epochs']):\n            model.load_state_dict(\n                torch.load(f'{MODEL_DIR}\/{CFG[\"model_arch\"]}_fold_{fold}_{epoch}'))\n            \n            with torch.no_grad():\n                sum_weights = sum(CFG['weights'])\n                for _ in range(CFG['tta']):\n                    val_image_preds = inference_one_epoch(model, val_loader, device)\n                    val_preds += [CFG['weights'][i] \/ sum_weights \/ CFG['tta']*val_image_preds]\n                    tst_image_preds = inference_one_epoch(model, tst_loader, device)\n                    tst_preds += [CFG['weights'][i] \/ sum_weights \/ CFG['tta']*tst_image_preds]\n\n        val_preds = np.mean(val_preds, axis=0) \n        tst_preds = np.mean(tst_preds, axis=0) \n        \n        print(f'fold {fold} validation loss = {log_loss(valid_.label.values, val_preds):.5f}')\n        print(f'fold {fold} validation accuracy = {(valid_.label.values==np.argmax(val_preds, axis=1)).mean():.5f}')\n        \n        del model\n        torch.cuda.empty_cache()","1591d64b":"test['label'] = np.argmax(tst_preds, axis=1)\ntest.to_csv('submission.csv', index=False)","4f07bd52":"# Train part is here: https:\/\/www.kaggle.com\/hinamimi\/efficientnet-baseline-train-amp-aug","a0ae52f9":"# I just refactor the following [notebook](https:\/\/www.kaggle.com\/khyeh0719\/pytorch-efficientnet-baseline-inference-tta).","5ec52f22":"# Main Loop","81a1f590":"# Helper Functions","40cedcab":"# Define Train\\Validation Image Augmentations","dbcbee13":"# Model","98e1d362":"# Dataset"}}