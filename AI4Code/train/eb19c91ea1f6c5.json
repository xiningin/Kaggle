{"cell_type":{"542d6cef":"code","c4dbd82c":"code","bd1e794a":"code","6101dc96":"code","80bc24e2":"code","0a8dcaab":"code","13b664de":"code","e6afa7ae":"code","1854f888":"code","4f474baa":"code","c32ed77e":"code","de29de55":"code","fbaddf92":"code","18b1ed09":"code","d1589df9":"code","373b361e":"code","d1fbf80f":"code","b6dfc97f":"code","6e3bca60":"code","6160b6ec":"code","2d88906d":"code","c4e6ad9d":"code","457709a9":"code","576a1b07":"code","18485981":"code","93ee1d6b":"code","d63025a6":"code","7c3726fa":"code","55025e79":"markdown","bcd45c57":"markdown","cb2ab3ba":"markdown","04f6ddc0":"markdown","6c48ea77":"markdown","8fedf8b6":"markdown","f8840b86":"markdown","31156df7":"markdown","fbb543a0":"markdown","842dbb16":"markdown","cb04c2b1":"markdown","3a790c24":"markdown","9347b46b":"markdown","9217adb1":"markdown","7d3a9064":"markdown","fac3ab94":"markdown","4f9a538f":"markdown","2d3f316f":"markdown"},"source":{"542d6cef":"import tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport os\nimport cv2\ntf.__version__","c4dbd82c":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            #rotation_range=90,\n                            brightness_range=(0.5,1), \n                            #shear_range=0.2, \n                            #zoom_range=0.2,\n                            channel_shift_range=0.2,\n                            #horizontal_flip=True,\n                            #vertical_flip=True,\n                            rescale=1.\/255,\n                            validation_split=0.3)","bd1e794a":"root_dir = '..\/input\/full-vs-flat-tire-images\/tire-dataset'\n\nimg_generator_flow_train = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nimg_generator_flow_valid = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(224, 224),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","6101dc96":"data_dir='..\/input\/full-vs-flat-tire-images\/tire-dataset'\nNames0 = os.listdir(data_dir)\nNames=sorted(Names0)\nprint(Names)\nprint(len(Names))","80bc24e2":"N=list(range(len(Names)))\nnormal_mapping=dict(zip(Names,N))\nreverse_mapping=dict(zip(N,Names))","0a8dcaab":"imgs, labels = next(iter(img_generator_flow_train))\nfor img, label in zip(imgs, labels):\n    plt.imshow(img)\n    #plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))\n    value=np.argmax(label)\n    plt.title(reverse_mapping[value])\n    plt.show()","13b664de":"base_model = tf.keras.applications.InceptionV3(input_shape=(224,224,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","e6afa7ae":"base_model.trainable = False","1854f888":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(len(Names), activation=\"softmax\")\n])","4f474baa":"model.summary()","c32ed77e":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])","de29de55":"model.fit(img_generator_flow_train, \n          validation_data=img_generator_flow_valid, \n          steps_per_epoch=8, epochs=40) #8,64","fbaddf92":"# Visualise train \/ Valid Accuracy\nplt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\nplt.legend(loc=\"upper left\")\nplt.show()","18b1ed09":"# Visualise train \/ Valid Loss\nplt.plot(model.history.history[\"loss\"], c=\"r\", label=\"train_loss\")\nplt.plot(model.history.history[\"val_loss\"], c=\"b\", label=\"test_loss\")\nplt.legend(loc=\"upper left\")\nplt.show()","d1589df9":"imgs, labels = next(iter(img_generator_flow_valid))\n#timgs, tlabels = next(iter(img_generator_flow_test))","373b361e":"for layer in model.layers:\n    print(layer.name)","d1fbf80f":"base_model = model.layers[0]","b6dfc97f":"tf.keras.utils.plot_model(base_model, show_shapes=True, show_layer_names=True)","6e3bca60":"for layer in base_model.layers:\n    print(layer.name)","6160b6ec":"last_conv_layer_name = \"mixed10\"\nclassifier_layer_names = [layer.name for layer in model.layers][1:]","2d88906d":"# We start by setting up the dependencies we will use\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","c4e6ad9d":"# The Grad-CAM algorithm\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(\n    img_array, base_model, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = base_model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(base_model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = np.maximum(heatmap, 0) \/ np.max(heatmap)\n    return heatmap","457709a9":"# Print what the top predicted class is\npreds = model.predict(imgs)\npred_labels = tf.argmax(preds, axis = -1)\n\nprint(\"Prediction output:\", preds)\nprint(\"Predicted label:\", pred_labels)","576a1b07":"# Generate class activation heatmap\nheatmaps = []\n\nfor img in imgs:\n    heatmap = make_gradcam_heatmap(\n    tf.expand_dims(img,axis=0),\n        base_model, model, \n        last_conv_layer_name, \n        classifier_layer_names\n  )\n    heatmaps.append(heatmap)\n\n\n# Display heatmap\nplt.matshow(heatmaps[0])\nplt.show()\n","18485981":"from pathlib import Path\n\nfor img, pred_label, true_label, heatmap in zip(imgs, pred_labels, labels, heatmaps): \n    # We rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # We use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # We use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # We create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * 0.003 + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    save_path = \"saved_img.jpg\"\n    superimposed_img.save(save_path)\n\n    # Display Grad CAM\n    pred_file_path = np.argmax(img_generator_flow_valid.labels == pred_label)\n    pred_label_name = Path(img_generator_flow_valid.filepaths[pred_file_path]).parent.name\n\n    true_file_path = np.argmax(img_generator_flow_valid.labels == tf.argmax(true_label))\n    true_label_name = Path(img_generator_flow_valid.filepaths[true_file_path]).parent.name\n\n    print(\"Predicted label:\",pred_label_name)\n    print(\"True label:\", true_label_name)\n\n    display(Image(save_path))","93ee1d6b":"LABEL=[]\nfor item in labels:\n    LABEL+=[np.argmax(item)]\nPRED=pred_labels.numpy().tolist()","d63025a6":"print(LABEL)\nprint(PRED)","7c3726fa":"from sklearn.metrics import classification_report\nprint(classification_report(LABEL,PRED))","55025e79":"### Predicted label and heatmap","bcd45c57":"### Create heatmap","cb2ab3ba":"### Prepare img_generator_flow","04f6ddc0":"# Transfer Learning ","6c48ea77":"### Import a pretrained model\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/InceptionV3","8fedf8b6":"### Predict","f8840b86":"# Tier Image Transfer Learning\nhttps:\/\/www.kaggle.com\/stpeteishii\/tier-full-flat-image-transfer-learning<br\/>\n<div align=\"left\">\n<img src=\"https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle\" alt=\"upvote\">\n<\/div>","31156df7":"### make_gradcam_heatmap","fbb543a0":"### Prepare ImageDataGenerator\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image\/ImageDataGenerator","842dbb16":"### Create model","cb04c2b1":"### Set the weights of the imported model","3a790c24":"### Visualize a batch of images","9347b46b":"# Preprocessing with ImageDataGenerator","9217adb1":"### Create imgs and labels","7d3a9064":"### Compile model","fac3ab94":"### Visualize accuracy and loss","4f9a538f":"### Train the model","2d3f316f":"# Interpretation with Grad Cam\n"}}