{"cell_type":{"4e32058b":"code","1d662108":"code","55cd3955":"code","ec4c2f36":"code","482d7a5c":"code","18b815b1":"code","6e9d3516":"code","60a8534f":"code","60fa691d":"code","a2be1a43":"code","a7f4a9cc":"code","6fa73cd1":"code","d30765ad":"code","e6ffba72":"code","92be2094":"code","3dd35b37":"code","d7ff860a":"code","57144c44":"code","7e60c6db":"code","143325e4":"code","12346ec6":"code","6a6f9848":"code","e394ca3b":"code","eb6f6d20":"code","8a75ce7e":"code","a741281e":"code","1cab1e3f":"code","3a27d489":"code","06f7f6ab":"code","6e64230c":"code","f83c286c":"code","055ef81e":"code","658f7c79":"code","def6aae0":"code","55c13a07":"code","0ce2761e":"code","bde8ec6d":"code","eb0cee22":"markdown","ccf721a6":"markdown","5aa13f17":"markdown","da95ad88":"markdown","6b16b362":"markdown","14b1198d":"markdown","1961072d":"markdown","2c0e3ced":"markdown","456c89a9":"markdown","7ad76d0c":"markdown","39ea6013":"markdown"},"source":{"4e32058b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d662108":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')","55cd3955":"df.head()","ec4c2f36":"df.region.value_counts()","482d7a5c":"df.isnull().sum()","18b815b1":"df.bmi.mean()","6e9d3516":"import matplotlib.pyplot as plt\nimport seaborn as sns","60a8534f":"sns.barplot(x='smoker',y='charges',data=df)","60fa691d":"sns.catplot(x='charges',y='smoker',data=df)","a2be1a43":"sns.scatterplot(x='bmi',y='charges',data=df)","a7f4a9cc":"df.groupby(['sex','smoker']).size()","6fa73cd1":"sns.factorplot(x='sex',data=df,kind='count',hue='smoker')","d30765ad":"sns.barplot(x='region',y='charges',data=df)","e6ffba72":"sns.scatterplot(x='age',y='bmi',data=df)","92be2094":"df.describe()","3dd35b37":"df.corr()","d7ff860a":"sns.heatmap(df.corr(),annot=True)","57144c44":"df.head()","7e60c6db":"df = pd.get_dummies(df,drop_first=True)","143325e4":"df.head()","12346ec6":"X = df.drop('charges',axis=1)","6a6f9848":"y=df[['charges']]","e394ca3b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state = 100)\n","eb6f6d20":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","8a75ce7e":"lin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)","a741281e":"y_pred = lin_reg.predict(X_test)","1cab1e3f":"r2_score(y_test,y_pred)","3a27d489":"from sklearn.preprocessing import PolynomialFeatures","06f7f6ab":"poly = PolynomialFeatures(degree=2)\nX_poly = poly.fit_transform(X_train)\n\nregressor_lin_2 = LinearRegression()\nregressor_lin_2.fit(X_poly,y_train)","6e64230c":"y_pred_poly = regressor_lin_2.predict(poly.fit_transform(X_test))","f83c286c":"r2_score(y_test,y_pred_poly)","055ef81e":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state=0,max_depth=5)\nregressor.fit(X_train,y_train)\n","658f7c79":"y_pred_dt = regressor.predict(X_test)","def6aae0":"r2_score(y_test,y_pred_dt)","55c13a07":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators=1000,random_state=0)\nregressor_rf.fit(X_train,y_train)","0ce2761e":"y_pred_rf = regressor_rf.predict(X_test)","bde8ec6d":"r2_score(y_test,y_pred_rf)\n","eb0cee22":"Random Forest Regressor","ccf721a6":"***","5aa13f17":"************","da95ad88":"**Feature Engineering**","6b16b362":"**Linear Regression**","14b1198d":"***","1961072d":"PolyNomial Regression","2c0e3ced":"*****","456c89a9":"****","7ad76d0c":"Decision Tree Regression","39ea6013":"Here We Can See That Random Forest Regressor is The Most Efficient Of The Above Algorithms."}}