{"cell_type":{"0b2845ea":"code","ecb3e5bd":"code","57124ba3":"code","74cb3df9":"code","718d74eb":"code","fecc60cb":"code","20750558":"code","ac800748":"code","5c3defef":"code","79cf759f":"code","fe85d6c9":"code","ec5eb13a":"code","c67f3ff0":"code","0d6625bf":"code","e8228432":"code","19e61ee7":"code","cb2aa839":"code","5179a921":"code","b0102535":"code","acd7dd2e":"code","57007c68":"code","9ab7be8f":"code","663f00f7":"code","5559a05a":"code","d357c69a":"code","ee9b713b":"code","41e604db":"code","e95abaa4":"code","cd5b6d83":"code","57a7f710":"code","ce71db82":"code","4271b1cd":"code","9d66c285":"code","c778a8af":"code","80151b24":"code","a4f3cfbe":"code","688bb76f":"code","d97f235b":"code","88f528ee":"code","81fc74cb":"code","2a60ccaf":"code","51afcffa":"code","86d1f9c4":"code","b6f6ca9a":"code","60791ce6":"code","c044edd3":"code","ae40c20c":"code","ba7b4613":"code","925eca0e":"code","6a48ef67":"code","b6018845":"code","5c30db66":"code","c5ec983d":"code","e2429dd8":"code","ac2de49c":"code","61a2ecad":"code","979072a0":"code","678f987f":"code","3bb08866":"code","ad4f6e6f":"code","6288e573":"code","a222eac9":"code","70691d9c":"code","2e1e74b8":"code","6f4a3636":"code","6e1493b1":"markdown","6adf0ec6":"markdown","05532a3d":"markdown","0672b9e2":"markdown","81b7c28c":"markdown","0e93e13c":"markdown","eedc7e0f":"markdown","8cfb72f6":"markdown","1624da78":"markdown","3a33532a":"markdown","1711e2f5":"markdown","62b7cc17":"markdown","f3916970":"markdown","b0f8365e":"markdown","07aedba8":"markdown","31fd0dde":"markdown","d4a0ae91":"markdown","dc957884":"markdown","e56a80ce":"markdown","ff3a4a04":"markdown","698bc0e7":"markdown","e42317df":"markdown","b4616b04":"markdown","62e6899a":"markdown","14f05301":"markdown","79d63b35":"markdown","b30b54c5":"markdown","e06645f2":"markdown"},"source":{"0b2845ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.figure_factory as ff\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nimport statistics as stat \nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\nfrom plotly.subplots import make_subplots\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\"\n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecb3e5bd":"df_test = pd.read_csv('..\/input\/titanic\/test.csv',)\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')","57124ba3":"df_train.describe()","74cb3df9":"df_train.info()","718d74eb":"df_test.describe()","fecc60cb":"df_test.info()","20750558":"def create_new_column_boolean(df, condiction, columnName):\n    df.loc[condiction, columnName] = 1\n    df.loc[~condiction, columnName] = 0\n    df[columnName] = df[columnName].astype(int)","ac800748":"create_new_column_boolean(df_train, (df_train[\"Sex\"] == 'female'), \"is_female\") #Cria\u00e7\u00e3o da coluna is_female\ncreate_new_column_boolean(df_test, (df_test[\"Sex\"] == 'female'), \"is_female\") #Cria\u00e7\u00e3o da coluna is_female","5c3defef":"sns.catplot(x=\"is_female\", kind=\"count\", data=df_train, hue='Survived')","79cf759f":"df_train[['Survived', 'is_female']].groupby('is_female').mean()","fe85d6c9":"f = df_train.groupby('Sex').get_group('female')\nm = df_train.groupby('Sex').get_group('male')","ec5eb13a":"fig = px.box(m, x='Survived', y='Fare',\n             points=\"all\", color='Survived', title='Homens sobreviventes por valor de ticket (Fare)')\nfig.show()","c67f3ff0":"fig = px.box(f, x='Survived', y='Fare',\n             points=\"all\", color='Survived', title='Mulheres sobreviventes por valor de ticket (Fare)')\nfig.show()","0d6625bf":"sns.catplot(y=\"Survived\", hue=\"Pclass\", kind=\"count\",\n            palette=\"colorblind\",\n            data=df_train)","e8228432":"df_train['Cabin'] = df_train['Cabin'].fillna(0, inplace=False)\ndf_test['Cabin'] = df_test['Cabin'].fillna(0, inplace=False)\n\ncreate_new_column_boolean(df_train, (df_train[\"Cabin\"] != 0), \"has_cabin\")\ncreate_new_column_boolean(df_test, (df_test[\"Cabin\"] != 0), \"has_cabin\")","19e61ee7":"df_train[['has_cabin', 'Pclass']].groupby('Pclass').mean()","cb2aa839":"df_train[['has_cabin', 'Survived']].groupby('has_cabin').mean()","5179a921":"sns.catplot(x=\"Survived\", hue=\"has_cabin\", kind=\"count\",\n            palette=\"colorblind\",\n            data=df_train)","b0102535":"df_train[df_train['Embarked'].isna()]\n### Verificando os passageiros com Embarked == NaN","acd7dd2e":"df_train['Embarked'] = df_train['Embarked'].fillna('S', inplace=False)\nembarked = df_train.groupby('Embarked')","57007c68":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=embarked.get_group('S')['Survived'], name='S'))\nfig.add_trace(go.Histogram(x=embarked.get_group('C')['Survived'], name='C'))\nfig.add_trace(go.Histogram(x=embarked.get_group('Q')['Survived'], name='Q'))\n\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay',title='Sobreviventes por local de embarque')\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","9ab7be8f":"df_train[['Embarked', 'Survived']].groupby('Embarked').mean()","663f00f7":"sns.countplot(data=df_train, x ='Embarked', hue='Pclass')","5559a05a":"df_train['Pclass'].value_counts()","d357c69a":"df_test['Fare'] = df_test['Fare'].fillna(df_test[df_test['Pclass']==3]['Fare'].mean(), inplace=False)","ee9b713b":"df_train[df_train['Fare']==512]\ndf_train = df_train.drop(258)#A pessoa de index 258 provavelmente foi um erro, ent\u00e3o preferimos remover","41e604db":"fig = px.box(df_train, y='Fare')\nfig.show()","e95abaa4":"df_train[df_train['Fare'] > 66.6]['Pclass'].value_counts()","cd5b6d83":"df_train['Ticket'].value_counts()","57a7f710":"#Formata\u00e7ao da Fare ------------------------------------------------------------------------------\n\ndef format_fare(row, ticket_counts):\n  return row['Fare']\/ticket_counts[row['Ticket']]\n\nticket_counts = df_train['Ticket'].value_counts()\ndf_train['FarePerPassenger'] = df_train.apply(format_fare, args=(ticket_counts, ), axis=1)\n\nticket_counts = df_test['Ticket'].value_counts()\ndf_test['FarePerPassenger'] = df_test.apply(format_fare, args=(ticket_counts, ), axis=1)","ce71db82":"fig = px.box(df_train, y='FarePerPassenger')\nfig.show()","4271b1cd":"sns.catplot(x=\"Survived\", y=\"FarePerPassenger\", hue=\"Sex\", data=df_train)","9d66c285":"sns.catplot(x=\"Survived\", y=\"FarePerPassenger\", hue=\"has_cabin\", data=df_train)","c778a8af":"df_train['FareClass'] = pd.qcut(df_train['FarePerPassenger'], 4)\ndf_train[['Survived', 'FareClass']].groupby('FareClass').mean()","80151b24":"df_train.loc[df_train['FarePerPassenger'] <= 7.756, 'FarePerPassenger'] = 0\ndf_train.loc[(df_train['FarePerPassenger'] > 7.756) & (df_train['FarePerPassenger'] <= 8.8), 'FarePerPassenger'] = 1\ndf_train.loc[(df_train['FarePerPassenger'] > 8.8) & (df_train['FarePerPassenger'] <=  23.0), 'FarePerPassenger']   = 2\ndf_train.loc[ df_train['FarePerPassenger'] >  23.0, 'FarePerPassenger'] = 3\ndf_train['FarePerPassenger'] = df_train['FarePerPassenger'].astype(int)","a4f3cfbe":"df_test.loc[df_test['FarePerPassenger'] <= 7.756, 'FarePerPassenger'] = 0\ndf_test.loc[(df_test['FarePerPassenger'] > 7.756) & (df_test['FarePerPassenger'] <= 8.8), 'FarePerPassenger'] = 1\ndf_test.loc[(df_test['FarePerPassenger'] > 8.8) & (df_test['FarePerPassenger'] <= 23), 'FarePerPassenger']   = 2\ndf_test.loc[ df_test['FarePerPassenger'] >  23.0, 'FarePerPassenger'] = 3\ndf_test['FarePerPassenger'] = df_test['FarePerPassenger'].astype(int)","688bb76f":"sns.catplot(x=\"Survived\", y=\"Age\", hue=\"Sex\", data=df_train)","d97f235b":"def fillage(row, age):\n  if np.isnan(row['Age']): \n    row['Age'] = age[row['Pclass'], row['Sex'], row['Title']]\n  return row","88f528ee":"def get_title(name):\n  names = name.split(',')\n  tokens = names[1].split(' ')\n  return tokens[1]","81fc74cb":"def count_title(item, title_counts):\n  if title_counts[item] < 8:\n    return 'Rare'\n  \n  return item","2a60ccaf":"df_train['Title'] = df_train['Name'].apply(get_title)\ntitle_counts = df_train['Title'].value_counts()\n\ndf_train['Title'] = df_train['Title'].apply(count_title, args=(title_counts, ))\n\ndf_test['Title'] = df_test['Name'].apply(get_title)\ntitle_counts = df_test['Title'].value_counts()\n\ndf_test['Title'] = df_test['Title'].apply(count_title, args=(title_counts, ))","51afcffa":"sns.barplot(data=df_train, x='Survived', y='Title')","86d1f9c4":"nan_age = df_train[df_train['Age'].isna()]\nage = df_train[['Pclass', 'Sex', 'Age', 'Title']].groupby(['Pclass', 'Sex', 'Title'])['Age'].median()\n\nnan_age = nan_age.apply(fillage, args=(age, ), axis=1)","b6f6ca9a":"fig = make_subplots(rows=1, cols=2)\ntrace1 = go.Histogram(x=df_train['Age'], name='Dados gerais')\ntrace0 = go.Histogram(x=nan_age['Age'], name='Nossa modelagem')\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)","60791ce6":"fig.show()","c044edd3":"df_train = df_train.apply(fillage, args=(age, ), axis=1)","ae40c20c":"age = df_test[['Pclass', 'Sex', 'Age', 'Title']].groupby(['Pclass', 'Sex', 'Title'])['Age'].median()\ndf_test = df_test.apply(fillage, args=(age, ), axis=1)\ndf_test.fillna(df_train['Age'].median(), inplace=True)","ba7b4613":"sns.catplot(x=\"Parch\", kind='count', hue=\"Survived\", data=df_train, palette='Set2')","925eca0e":"sns.catplot(x=\"SibSp\", kind='count', hue=\"Survived\", data=df_train, palette='Set2')","6a48ef67":"df_test['Family'] = df_test['SibSp'] + df_test['Parch']\ndf_train['Family'] = df_train['SibSp'] + df_train['Parch']\ndf_train[['Survived', 'Family']].groupby('Family').mean()","b6018845":"sns.catplot(x=\"Family\", kind='count', hue=\"Survived\", data=df_train, palette='Set2')","5c30db66":"#df_train['AgeSection'] = pd.cut(df_train['Age'], 5)\n#df_train[['Survived', 'AgeSection']].groupby('AgeSection').mean()","c5ec983d":"#df_train.loc[df_train['Age'] <= 16.336, 'Age'] = 0\n#df_train.loc[(df_train['Age'] > 16.336) & (df_train['Age'] <= 32.252), 'Age'] = 1\n#df_train.loc[(df_train['Age'] > 32.252) & (df_train['Age'] <= 48.168), 'Age']   = 2\n#df_train.loc[(df_train['Age'] > 48.168) & (df_train['Age'] <= 64.084), 'Age']   = 3\n#df_train.loc[ df_train['Age'] > 64.084, 'Age'] = 4\n#df_train['Age'] = df_train['Age'].astype(int)","e2429dd8":"#df_test.loc[df_test['Age'] <= 16.336, 'Age'] = 0\n#df_test.loc[(df_test['Age'] > 16.336) & (df_test['Age'] <= 32.252), 'Age'] = 1\n#df_test.loc[(df_test['Age'] > 32.252) & (df_test['Age'] <= 48.168), 'Age']   = 2\n#df_test.loc[(df_test['Age'] > 48.168) & (df_test['Age'] <= 64.084), 'Age']   = 3\n#df_test.loc[ df_test['Age'] > 64.084, 'Age'] = 4\n#df_test['Age'] = df_test['Age'].astype(int)","ac2de49c":"#deixar os df apenas com informacoes relevantes\n\npassenger_id = df_test['PassengerId']\n\ndf_train['Pclass'] = df_train['Pclass'].astype(object)\ndf_test['Pclass'] = df_test['Pclass'].astype(object)\n\ndummy = pd.get_dummies(df_train[['Pclass', 'Title', 'Embarked']])\ndf_train = pd.concat([df_train, dummy], axis=1)\n\ndummy = pd.get_dummies(df_test[['Pclass', 'Title', 'Embarked']])\ndf_test = pd.concat([df_test, dummy], axis=1)\n\ntrain = df_train.drop(['PassengerId', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Fare','FareClass', 'Cabin', 'Title', 'Pclass', 'Embarked'], axis=1)\ntest = df_test.drop(['PassengerId', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Fare','Cabin', 'Title', 'Pclass', 'Embarked'], axis=1)","61a2ecad":"train['Family'] = train['Family'].map({10:0,7:0,5:0,\n                     6:1,4:1,0:1,\n                     1:2,2:2,3:2})\n\ntest['Family'] = test['Family'].map({10:0,7:0,5:0,\n                     6:1,4:1,0:1,\n                     1:2,2:2,3:2})","979072a0":"fig, ax = plt.subplots(figsize=(15,15))         # Sample figsize in inches\nsns.heatmap(train.corr(),annot=True,cmap='coolwarm', ax=ax)","678f987f":"scaler = MinMaxScaler()\n\nscaled_train = pd.DataFrame(data=scaler.fit_transform(train), columns=train.columns)\nscaled_test = pd.DataFrame(data=scaler.fit_transform(test), columns=test.columns)","3bb08866":"y = scaled_train['Survived']\nX = scaled_train.drop(['Survived'], axis=1)\n\nclf = GridSearchCV(KNeighborsClassifier(), {'n_neighbors':list(range(1,60))})\nclf.fit(X, y) \npred = pd.DataFrame(clf.cv_results_)","ad4f6e6f":"best_param = pred[pred['mean_test_score']==pred['mean_test_score'].max()]","6288e573":"plt.plot(range(1,60), pred['mean_test_score'], color = 'blue',linestyle='dashed', \n         marker='o',markerfacecolor='red')\nplt.xlabel('K')\nplt.ylabel('Accuracy')\nplt.show()  ","a222eac9":"classifier = KNeighborsClassifier(best_param['param_n_neighbors'].mean().astype(int))\nclassifier.fit(X, y)","70691d9c":"pred = pd.Series(classifier.predict(scaled_test), name='Survived').astype(int)\noutput = pd.DataFrame(data = [passenger_id.astype(int), pred]).transpose()\noutput","2e1e74b8":"best_param['param_n_neighbors'].mean().astype(int)","6f4a3636":"output.to_csv('pred.csv', index=False)","6e1493b1":"Para reduzir mais ainda os impactos dos outliers, iremos agrupar o valores da fare em 4 grupos defidos pelos quartis.","6adf0ec6":"*  Mulheres sobrevivem muito mais que homens, o que faz total sentido, j\u00e1 que mulheres tiveram prioridade no salvamento. ","05532a3d":"Escalamos os dados com MinMaxScaler pois o KNN \u00e9 sensivel a amplitude dos dados, visto que o KNN calcula a dist\u00e2ncia entre os dados.","0672b9e2":"Como as taxas de sobreviv\u00eancia de SipSp e Parch se comportam similarmente, decidimos junt\u00e1-las em uma \u00fanica feature chamada Family.\n\nNotamos que quanto maior o n\u00famero de pessoas da mesma familia, menor a taxa de sobreviv\u00eancia.","81b7c28c":"Usamos o KNN para prever se um passageiro sobreviveu ou n\u00e3o. \n\nTentamos usar o RandomForest, SVM, Naive Bayes, mas o melhor resultado foi com o KNN, ent\u00e3o mantivemos ele.\n","0e93e13c":"# Machine Learning","eedc7e0f":"Testamos o KNN para v\u00e1rios valores de K, e chegamos no melhor valor de K=24","8cfb72f6":"Percebemos que a Fare possui muitos outliers. Veremos suas caracter\u00edsticas.","1624da78":"# An\u00e1lise explorat\u00f3ria EDA","3a33532a":"### Atributo Cabin e Embarked","1711e2f5":"### Atributos relacionados a membros da familia (SibSp e Parch)","62b7cc17":"Podemos ver que:\n*   Acima de ~60 n\u00e3o sobreviveram muitas pessoas\n*   Quanto mais velho o homem maior a taxa de morte","f3916970":"Farei o processo de agrupamento tamb\u00e9m com a idade.","b0f8365e":"Decidimos valorar quanto cada passageiro pagou individualmente pelo seu ticket de embarque, j\u00e1 que pessoas que dividiam a mesma cabine pagavam em conjunto o valor de Fare.","07aedba8":"### Atributo Fare (Pre\u00e7o do ticket)","31fd0dde":"Inicialmente j\u00e1 conseguimos notar algumas coisas sobres nossos dados.\n\nPara o atributo Age\n\n*   Existem **alguns** dados ausentes\n*   Maioria dos passageiros \u00e9 jovem (75% dos passageiros tem at\u00e9 38)\n\nPara o atributo Cabin\n*   Existem **MUITOS** dados ausentes.\n\nPara o atributo Pclass\n*   Pelo menos metade dos passageiros \u00e9 da 3\u00ba classe\n","d4a0ae91":"\nPercebemos que o titulo tem uma rela\u00e7\u00e3o com sobreviv\u00eancia. \n*   Mulheres e crian\u00e7as **(Mrs, Miss e Master)** t\u00eam maiores taxas de sobreviv\u00eancia\n*   Homens adultos (Mr) t\u00eam menores taxas de sobreviv\u00eancia\n\nClassificamos como **Rare** todos os titulos que tinham menos que 8 passageiros","dc957884":"Para substituir as idades ausentes no dataset, pegamos a m\u00e9dia das idades baseado nos atributos: Pclass, Title, Sex. \n\nSe compararmos a distribui\u00e7\u00e3o geral das idades com os dados que substitu\u00edmos, notamos semelhan\u00e7a.","e56a80ce":"### Atributo Sex (Sexo) e Pclass (Classe)","ff3a4a04":"Notamos que os passageiros outliers tem um perfil bem definido, ent\u00e3o n\u00e3o podemos simplesmente retir\u00e1-los.","698bc0e7":"O Titanic partiu em sua primeira e \u00fanica viagem com 1 316 passageiros a bordo: 325 na primeira classe, 285 na segunda e 706 na terceira. \n\nDeles, 922 embarcaram em Southampton, 274 em Cherbourg-Octeville na Fran\u00e7a e 120 em Queenstown na Irlanda.","e42317df":"Atrav\u00e9s de pesquisas sobre os passageiros, descobrimos que estes dois sem o Embarked definido s\u00e3o de Southamptom.","b4616b04":"### Atributo Age (Idade) e Title (Novo atributo)","62e6899a":"Sobrevive mais quem tem um n\u00famero de cabine defido. Existem v\u00e1rios fatores que podem ter influenciado nessa estat\u00edsca, entre eles:<br>\n*   n\u00famero de pessoas dentro das cabines;<br>\n*   longa dist\u00e2ncia entre as cabines de classes menores e o conv\u00e9s;<br>\n*   proximidade entre as cabines de classes menores e o local de impacto","14f05301":"O titulo ajuda a definir uma faixa et\u00e1ria para o passageiro, dessa forma extraimos o titulo do nome de cada passageiro para preencher a idade.","79d63b35":"--> Embarcantes em 'C' sobrevivem mais que embarcantes em 'Q' e 'S'","b30b54c5":"Pensamos nisso como uma maneira de atenuar o impacto dos outliers presentes na Fare","e06645f2":"Similar ao df de treino <br>\n*   Age faltam alguns dados <br>\n*   Cabin faltam muitos dados<br>\n*   Passageiros em sua maioria jovens e de 3\u00ba classe"}}