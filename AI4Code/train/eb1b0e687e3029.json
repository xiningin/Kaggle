{"cell_type":{"ed25731e":"code","6f8becad":"code","016ece4a":"code","8189b291":"code","4ba0d65c":"code","f0e8bb0e":"code","7d8e8514":"code","5333368a":"code","7cefad75":"code","fa1edf28":"code","42c1565f":"code","7bed080a":"code","5dea9b15":"code","8506d975":"code","23618183":"code","27a1112a":"code","5b931be6":"code","df31dad9":"code","cb465f36":"code","68f89b6c":"code","a33ed109":"code","7673da69":"code","c05a3ff9":"code","58ae4386":"code","73972495":"code","21ce75da":"code","aa48c10e":"code","eb6fedc9":"code","fa9c1312":"code","c1438386":"code","b5fd9c3b":"code","cd11a247":"code","b4c68fb6":"code","deef50c4":"code","bfb5e3af":"code","d3573c27":"code","cfe50800":"code","c85d6eb9":"code","3d8944cb":"code","76f364a4":"code","e6a42479":"code","1d5a58cc":"code","a58a8d84":"code","a9239855":"code","958e9b87":"code","19d34559":"code","cfee650d":"code","e46c0690":"code","48b3306a":"code","c6ad1889":"code","c4c9bfb9":"code","3afd7987":"code","e1921928":"code","9d2b137f":"code","04bc621a":"code","c2938896":"code","9ae801d4":"code","bcff2468":"code","f7870920":"code","6f60c7bf":"code","6216f827":"code","6de659d2":"code","ea4df354":"code","7c8bfa1d":"code","bb249a83":"code","dce8fb87":"code","8b376de5":"code","7806dc6a":"code","e3f3a4c8":"code","f8cbdb74":"code","4364fdbb":"code","cf9fc07e":"code","a0b50421":"code","01cf489f":"code","d93ce366":"code","7366c922":"code","3e55129f":"code","de7b54da":"code","92d6a351":"code","c8886d7e":"code","b29e363a":"code","9e3baf8c":"code","2be829c1":"code","0e22364a":"code","c6705e3f":"code","59fdc1ea":"code","92e61591":"code","14fac70c":"code","022dcfc3":"code","581c48e7":"code","47324d75":"code","fdd2d8bd":"code","8b525ac7":"code","4b1683b3":"code","ca94e4bd":"code","9398f94c":"code","ca8c2a74":"code","0413b452":"code","d2e9b2eb":"code","d4047e85":"code","951c3f00":"code","951a9789":"code","e198ae81":"code","fecd595a":"code","e5829905":"code","062c04cd":"code","0a64dc55":"code","7f5c936f":"code","08056eba":"code","39383fb9":"code","d5c4f05a":"code","6a8d4169":"markdown","7315c970":"markdown","f64d657d":"markdown","6c06ada1":"markdown","1bd07683":"markdown","33a1a282":"markdown","e1baa6f9":"markdown","abdad1ca":"markdown"},"source":{"ed25731e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6f8becad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","016ece4a":"df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","8189b291":"df","4ba0d65c":"test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cats = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","f0e8bb0e":"test.set_index('ID',inplace=True)","7d8e8514":"test","5333368a":"df.info()","7cefad75":"df.isnull().sum()","fa1edf28":"shops","42c1565f":"shops.set_index('shop_id',inplace=True)","7bed080a":"df['shop_id'].nunique()","5dea9b15":"df['date'] = pd.to_datetime(df['date'])","8506d975":"df['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month","23618183":"df","27a1112a":"item_cats.set_index('item_category_id',inplace=True)","5b931be6":"items.set_index('item_id',inplace=True)","df31dad9":"items","cb465f36":"items['item_name'].nunique()","68f89b6c":"no_item_id = [i for i in range(22170)]","a33ed109":"for i in no_item_id:\n    if len(df[df['item_id']==i]['item_price'])==0:\n        print(i,'-->',0)\n    else:\n        print(i,'-->',df[df['item_id']==i]['item_price'].iat[0])\n# df[df['item_id']==no_item_id[0]]['item_price'].iat[0]","7673da69":"item_id_and_price = {}\nfor i in no_item_id:\n    if len(df[df['item_id']==i]['item_price'])==0:\n        item_id_and_price[i] = 0\n    else:\n        item_id_and_price[i] = df[df['item_id']==i]['item_price'].iat[0]","c05a3ff9":"test","58ae4386":"item_id_and_price = pd.Series(item_id_and_price)","73972495":"test.info()","21ce75da":"def get_price(x):\n    return item_id_and_price.get(x,default='data not available')\ntest['item_price'] = test['item_id'].apply(get_price)","aa48c10e":"test","eb6fedc9":"df","fa9c1312":"df.groupby(['year','month']).mean().loc[:,'item_price':'item_cnt_day']","c1438386":"plt.figure(figsize=(12,8),dpi=150)\ndf['date_block_num'].value_counts().plot(kind='bar');","b5fd9c3b":"plt.figure(figsize=(12,8),dpi=150)\ndf['month'].value_counts().plot(kind='bar');","cd11a247":"plt.figure(figsize=(12,8),dpi=150)\nsns.countplot(x='month',data=df,hue='year')\nplt.legend(loc='best');","b4c68fb6":"def seasons(x):\n    if x in [3,4,5]:\n        return 'spring'\n    elif x in [6,7,8]:\n        return 'summer'\n    elif x in [9,10,11]:\n        return 'autumn'\n    else:\n        return 'winter'\ndf['season'] = df['month'].apply(seasons)","deef50c4":"df","bfb5e3af":"plt.figure(figsize=(12,4),dpi=150)\nsns.countplot(x='season',data=df,hue='year')\nplt.legend(loc='best');","d3573c27":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(y='item_cnt_day',x='season',hue='year',data=df)","cfe50800":"df.drop(df[df['season']=='autumn']['item_cnt_day'].idxmax(),inplace=True)\ndf.drop(df[df['season']=='winter']['item_cnt_day'].idxmax(),inplace=True)","c85d6eb9":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(y='item_cnt_day',x='season',hue='year',data=df);","3d8944cb":"df['item_cnt_day'].describe()","76f364a4":"test","e6a42479":"df['shop_id'].nunique()","1d5a58cc":"test['shop_id'].nunique()","a58a8d84":"df.groupby('shop_id').mean().loc[:,['item_cnt_day','date_block_num','item_price']]","a9239855":"shop_mean = df.groupby('shop_id').mean().loc[:,['item_cnt_day','date_block_num','item_price']]","958e9b87":"shop_mean","19d34559":"test","cfee650d":"def mean_price(x):\n    return shop_mean.iat[x,2]\ntest['mean_price_for_shop'] = test['shop_id'].apply(mean_price)","e46c0690":"def block_num(x):\n    return shop_mean.iat[x,1]\ntest['mean_date_block_num'] = test['shop_id'].apply(block_num)","48b3306a":"test","c6ad1889":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntest['mean_price_for_shop'] = le.fit_transform(test['mean_price_for_shop'])","c4c9bfb9":"le = LabelEncoder()\ntest['mean_date_block_num'] = le.fit_transform(test['mean_date_block_num'])","3afd7987":"test","e1921928":"df.drop('date',axis=1,inplace=True)","9d2b137f":"df","04bc621a":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(x='season',y='item_price',data=df,hue='year'); ","c2938896":"df[df['season']=='winter']['item_price'].idxmax()","9ae801d4":"df.drop(df[df['season']=='winter']['item_price'].idxmax(),inplace=True)","bcff2468":"plt.figure(figsize=(12,8),dpi=150)\nsns.boxplot(x='season',y='item_price',data=df,hue='year'); ","f7870920":"df['item_price'].min(),df['item_price'].max()","6f60c7bf":"df[df['item_price']<0]","6216f827":"df.drop(df[df['item_price']<0].index,inplace=True)","6de659d2":"df['item_price'].min(),df['item_price'].max()","ea4df354":"df['item_price'].describe().iloc[1:]","7c8bfa1d":"def item_price_range(x):\n    if 0<=x<249:\n        return 'First'\n    elif 249<=x<=399:\n        return 'Second'\n    elif 399<x<=999:\n        return 'Third'\n    else:\n        return 'Fourth'\ndf['price_range_quartile'] = df['item_price'].apply(item_price_range)\ntest['price_range_quartile'] = test['item_price'].apply(item_price_range)","bb249a83":"df","dce8fb87":"sns.countplot(x='price_range_quartile',data=df,hue='year')","8b376de5":"test","7806dc6a":"df","e3f3a4c8":"df.corr()","f8cbdb74":"df.groupby('year').mean()","4364fdbb":"test","cf9fc07e":"def artificial_year(x):\n    if x<5.52:\n        return 2013\n    elif x<17.60:\n        return 2014\n    else:\n        return 2015\ntest['year'] = test['mean_date_block_num'].apply(artificial_year)","a0b50421":"test","01cf489f":"plt.figure(figsize=(12,8))\nsns.countplot(x='price_range_quartile',data=df,hue='year')","d93ce366":"df.head(2)","7366c922":"test.columns","3e55129f":"test1 = test[['mean_date_block_num','shop_id','item_id','item_price','year','price_range_quartile','mean_price_for_shop']]","de7b54da":"test1.head(2)","92d6a351":"df.head(2)","c8886d7e":"def mean_price(x):\n    return shop_mean.iat[x,2]\ndf['mean_price_for_shop'] = df['shop_id'].apply(mean_price)","b29e363a":"le = LabelEncoder()\ndf['mean_price_for_shop'] = le.fit_transform(df['mean_price_for_shop'])","9e3baf8c":"df.head(2)","2be829c1":"test1.head(2)","0e22364a":"sns.countplot(y='season',data=df)","c6705e3f":"df.drop(['season','month'],axis=1,inplace=True)","59fdc1ea":"df","92e61591":"test1","14fac70c":"df['year'] = df['year'].astype(str)\ntest1['year'] = test1['year'].astype(str)","022dcfc3":"df_dummy = pd.get_dummies(df[['year','price_range_quartile']],drop_first=True)\ntest1_dummy = pd.get_dummies(test1[['year','price_range_quartile']],drop_first=True)","581c48e7":"df = pd.concat([df,df_dummy],axis=1)\ntest1 = pd.concat([test1,test1_dummy],axis=1)","47324d75":"df.drop('year',axis=1,inplace=True)\ntest1.drop('year',axis=1,inplace=True)","fdd2d8bd":"df.drop('price_range_quartile',axis=1,inplace=True)\ntest1.drop('price_range_quartile',axis=1,inplace=True)","8b525ac7":"df.head(2)","4b1683b3":"# df.loc[:,'date_block_num':'year_2015']\ndf = df.iloc[:,:11]","ca94e4bd":"X = df.drop('item_cnt_day',axis=1)\ny = df['item_cnt_day']","9398f94c":"X.head(2)","ca8c2a74":"test1.head(2)","0413b452":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor","d2e9b2eb":"from sklearn.metrics import mean_absolute_error,mean_squared_error","d4047e85":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=101)","951c3f00":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","951a9789":"models = [LinearRegression(),Lasso(),Ridge(),KNeighborsRegressor(),RandomForestRegressor()]\ndata = {}\nfor m in models:\n    m.fit(X_train,y_train)\n    pred = m.predict(X_test)\n    data[str(m)] = [mean_absolute_error(y_test,pred),np.sqrt(mean_squared_error(y_test,pred))]\nmodel_df = pd.DataFrame(data)","e198ae81":"model_df","fecd595a":"final_model = make_pipeline(StandardScaler(),RandomForestRegressor())","e5829905":"final_model.fit(X,y)","062c04cd":"item_cnt_pred = final_model.predict(test1)","0a64dc55":"item_cnt_pred","7f5c936f":"test1.drop(test1.columns,axis=1,inplace=True)","08056eba":"test1['item_cnt_month'] = item_cnt_pred","39383fb9":"test1","d5c4f05a":"test1.to_csv('submissions.csv')","6a8d4169":"Another outlier","7315c970":"Encoding the 'mean_price_for_shop' column.","f64d657d":"Let's remove the outliers","6c06ada1":"Base model with no hyperparameter tuning","1bd07683":"From the groupby call we can clearly see that 'item_cnt_day' for a month of a year is higher than that of the previous year","33a1a282":"Russian seasons<br>\nSpring - March, April, May<br>\nSummer - June to August<br>\nAutumn - Sept to Nov<br>\nWinter - Dec to Feb","e1baa6f9":"After removing the outliers","abdad1ca":"We can see that sales has been pretty low for the 2015 and sales has been reducing in a yearly basis."}}