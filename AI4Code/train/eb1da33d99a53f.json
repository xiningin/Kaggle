{"cell_type":{"babd6e49":"code","d14525ae":"code","b5a94f55":"code","c8f28c33":"code","f452cf47":"code","ae781fc8":"code","af890942":"code","f14cc575":"code","be9af9e7":"code","025d960d":"code","0af87f6c":"code","8ad8ad11":"code","25ce1cbc":"code","c1315896":"code","ba787246":"code","3874d489":"markdown","9128bd88":"markdown","4c10f58a":"markdown","9e36b458":"markdown","664861ea":"markdown"},"source":{"babd6e49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d14525ae":"# pip install plotly==4.10.0\n# version is important\n","b5a94f55":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sb","c8f28c33":"df=pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","f452cf47":"df.head(5)","ae781fc8":"df.isna().sum()\ndf = df.drop(columns = [\"race\/ethnicity\", \"test preparation course\"])","af890942":"pd.unique(df[\"lunch\"])","f14cc575":"df.describe()","be9af9e7":"df_female = df[df[\"gender\"] == \"female\"]\ndf_male = df[df[\"gender\"] == \"male\"]\n\ndf_female.head(5)\ndf_male.head(5)","025d960d":"import plotly.figure_factory as ff\nimport numpy as np\n\n# Add histogram data\nx1 = df_female[\"math score\"]\nx2 = df_female[\"reading score\"]\nx3 = df_male[\"math score\"]\nx4 = df_male[\"reading score\"]\n\n# Group data together\nhist_data = [x1, x2, x3, x4]\n\ngroup_labels = ['Female Math Score', 'Female Reading Score', \"Male Math Score\", \"Male Reading Score\"]\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()","0af87f6c":"df_female.mean()","8ad8ad11":"df_male.mean()","25ce1cbc":"abv_f = df_female[(df_female[\"math score\"] > df_female[\"math score\"].mean()) & (df_female[\"reading score\"] > df_female[\"reading score\"].mean()) & (df_female[\"writing score\"] > df_female[\"writing score\"].mean()) ]\nprint(abv_f)\nabv_m = df_male[(df_male[\"math score\"] > df_male[\"math score\"].mean()) & (df_male[\"reading score\"] > df_male[\"reading score\"].mean()) & (df_male[\"writing score\"] > df_male[\"writing score\"].mean()) ]\n","c1315896":"from matplotlib.patches import Ellipse\nfrom matplotlib.text import OffsetFrom\nimport plotly.express as px","ba787246":"# plot >> gender distribution above avg .\n\n# important_features = ['parental level of education', 'lunch', 'math score', 'reading score', 'writing score']\n# df_pl = abv_f[important_features]\n\n\n#.......main plot (scatter)\nfig = px.scatter(abv_f,\n                 x='reading score',\n                 y='math score',\n                 color=\"writing score\",\n                \n                 width=750,\n                 height=400)\n\nfig2 = px.scatter(df,\n                 x='reading score',\n                 y='math score',\n                 color=\"gender\",\n                \n                 width=750,\n                 height=400)\n               \n#......annotation (box)\nfig.add_shape(type=\"rect\",\n              xref=\"x\", yref=\"y\",\n              x0=80, x1=100, y0=80, y1=100,\n              fillcolor=\"lightgray\",    \n              line_color=\"yellow\",\n              opacity=0.25\n              )\nfig2.add_shape(type=\"rect\",\n              xref=\"x\", yref=\"y\",\n              x0=85, x1=100, y0=85, y1=100,\n              fillcolor=\"red\",    \n              line_color=\"red\",\n              opacity=0.25\n              )\n#......update the plot as you wish\nfig.update_layout(title='<b>Math & Reading & Writing Scores<b>',\n                  titlefont={'size': 24},\n                  template='plotly_dark'\n                  )\nfig.show()\nfig2.show()","3874d489":"**Taking the values that are above average.**","9128bd88":"Finished.","4c10f58a":"**Students Performance in Exam**\n\nAim:\n\n1. Showing the scores of math and reading by adhering to writing scores. (Scores will be above the average of the students.)\n2. Creating the histogram both for female and male.\n","9e36b458":"**Importing some libraries from plotly.**","664861ea":"# **Overview** "}}