{"cell_type":{"13dd67b3":"code","862f8b84":"code","39c81c7b":"code","392fb50e":"code","f12ff90e":"code","dc8f1327":"code","efd7af59":"code","9a6eafaf":"code","3f132646":"code","31210015":"code","ff3827b4":"code","4578befa":"code","5b80425d":"code","5e71b425":"markdown","7a9b88e6":"markdown"},"source":{"13dd67b3":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.image as mpimg \nimport tensorflow as tf\n\nimport os","862f8b84":"import random","39c81c7b":"train_dir = '..\/input\/yoga-poses-dataset\/DATASET\/TRAIN'\ntest_dir = '..\/input\/yoga-poses-dataset\/DATASET\/TEST'","392fb50e":"def plot_yoga_images(train_dir):\n    plt.figure(figsize = (15,15))\n    for i, col in enumerate(os.listdir(train_dir)):\n        image = random.choice(os.listdir(train_dir + '\/' + col))\n        image_path = train_dir + '\/' + col + '\/' + image\n        img = mpimg.imread(image_path)\/255\n\n        plt.subplot(3,3,i+1)\n        plt.title(col)\n        plt.imshow(img)\n        plt.axis(False)\n        i = i + 1","f12ff90e":"plot_yoga_images(train_dir)","dc8f1327":"from PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","efd7af59":"## creating data loaders for preparing the data \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nIMAGE_SHAPE = (224,224)\nBATCH_SIZE = 32 \n\n# createing data generators \ntrain_datagen = ImageDataGenerator(rescale = 1 \/ 255.)\ntest_datagen = ImageDataGenerator(rescale = 1 \/ 255.)\n\nprint('Training Images')\ntrain_data = train_datagen.flow_from_directory(\n  train_dir,\n  target_size = IMAGE_SHAPE,\n  batch_size = BATCH_SIZE,\n  class_mode = 'categorical'\n)\n\nprint('Testing Images')\ntest_data = test_datagen.flow_from_directory(\n  test_dir,\n  target_size = IMAGE_SHAPE,\n  batch_size = BATCH_SIZE,\n  class_mode = 'categorical'\n)\n","9a6eafaf":"# importing the dependencies \nimport tensorflow_hub as hub \nfrom tensorflow.keras import layers\n\nefficientnet_url = 'https:\/\/tfhub.dev\/tensorflow\/efficientnet\/b0\/feature-vector\/1'\nresnet_url = 'https:\/\/tfhub.dev\/google\/imagenet\/resnet_v2_50\/feature_vector\/5'\n\n\n\ndef create_model(model_url, num_classes = 5):\n  \n  feature_extractor_layer = hub.KerasLayer(\n      model_url,\n      trainable = False, \n      name = 'feature_extraction_layer',\n      input_shape = IMAGE_SHAPE + (3,)\n  )\n  model = tf.keras.Sequential([\n    feature_extractor_layer,\n    layers.Dense(\n        num_classes, \n        activation = 'softmax',\n        name = 'output_layer'\n    )\n  ])\n\n  return model ","3f132646":"## function for plotting the loss curves \ndef plot_loss(history):\n      model_df = pd.DataFrame(history.history)\n      loss = model_df.loss\n      val_loss = model_df.val_loss\n      accuracy = model_df.accuracy\n      val_accuracy = model_df.val_accuracy\n\n      epochs = range(len(model_df.loss))\n      # plotting loss \n      plt.figure(figsize = (7,5))\n      plt.title(\n          'Loss'\n      )\n      plt.xlabel(\n          'Epochs'\n      )\n      plt.plot(\n          epochs,\n          loss, \n          label = 'Training loss'\n      )\n      plt.plot(\n          epochs, \n          val_loss, \n          label = 'Validation loss'\n      )\n      plt.legend()\n\n      # plotting accuracy \n      plt.figure(figsize=(7,5))\n      plt.title(\n          'Accuracy'\n      )\n      plt.xlabel(\n          'Epochs'\n      )\n      plt.plot(\n          epochs, \n          accuracy,\n          label = 'training accuracy',\n      )\n      plt.plot(\n          epochs, \n          val_accuracy,\n          label = 'validation accuracy'\n      )\n      plt.legend()\n","31210015":"## creating and testing resnet model \nresnet_model = create_model(\n    resnet_url,\n    num_classes = train_data.num_classes\n)\n\n# compile the model \nresnet_model.compile(\n    loss = tf.keras.losses.CategoricalCrossentropy(),\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = ['accuracy']\n)\n\n# fitting the model \nresnet_history = resnet_model.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = test_data,\n    validation_steps = len(test_data)\n)","ff3827b4":"plot_loss(resnet_history)","4578befa":"# model creation\nefficientnet_model = create_model(\n    efficientnet_url,\n    num_classes = train_data.num_classes\n)\n\n# compile the model \nefficientnet_model.compile(\n    loss = tf.keras.losses.CategoricalCrossentropy(),\n    optimizer = tf.keras.optimizers.Adam(),\n    metrics = ['accuracy']\n)\n\n# fitting the model \nefficientnet_history = efficientnet_model.fit(\n    train_data,\n    epochs = 5,\n    steps_per_epoch = len(train_data),\n    validation_data = test_data,\n    validation_steps = len(test_data)\n)","5b80425d":"plot_loss(\n    efficientnet_history\n)","5e71b425":"## Model 1","7a9b88e6":"## Preprocessing"}}