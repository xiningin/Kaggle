{"cell_type":{"e9e71420":"code","e1bf1411":"code","de006e26":"code","57d00799":"code","90f1efdf":"code","0c3201f6":"code","5298aac4":"code","49519626":"code","b46ab3ac":"code","af79c835":"code","0e1c9d91":"code","5bd8e9cb":"code","37b46a1f":"code","8d570276":"code","de6b49b2":"code","477535fc":"code","184a4ec5":"code","3adb1070":"code","8736fd40":"code","16b38f48":"code","b5190750":"code","bb97fa21":"code","16595b55":"code","d42942cf":"code","4fda955b":"code","9dd1d88e":"code","bc660152":"code","18ca249d":"code","d71bf627":"code","515a66ad":"code","8bfe521e":"code","fb42786f":"code","e7d212eb":"code","63e76f83":"code","b06a2eee":"code","f96110d5":"code","7f7e44f2":"code","526c7156":"markdown","6df6e82a":"markdown","f015c7e7":"markdown","45abf163":"markdown","737f46bc":"markdown","a33deb8c":"markdown"},"source":{"e9e71420":"import numpy as np  \nimport pandas as pd  \n\nimport os\nprint(os.listdir('\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/'))","e1bf1411":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os \nimport sys\nimport keras\nfrom PIL import * \nimport tensorflow as tf\nfrom keras import optimizers\nfrom keras import applications\nfrom keras import backend as K\nfrom os import listdir, makedirs\nfrom keras.utils.data_utils import Sequence\nfrom os.path import join, exists, expanduser\nfrom keras.models import Sequential, Model, load_model\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom keras.callbacks import ModelCheckpoint, TensorBoard, ReduceLROnPlateau\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, GlobalAveragePooling2D, Activation, Dropout, Flatten, Dense, Input\nfrom keras.optimizers import SGD, Adam\nfrom keras.utils.vis_utils import plot_model\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix, classification_report\nfrom keras.applications import VGG16\nfrom keras.utils.vis_utils import plot_model","de006e26":"epochs = 5","57d00799":"path = '\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/'\nclasses = os.listdir(path)\n\ndef display_four_class_images(random_number):\n    for i in classes:\n        new_path = path + i\n        random_image = os.listdir(new_path)[random_number]\n        print(new_path + '\/' +random_image)\n        plt.imshow(cv2.imread(new_path + '\/' + random_image)[:,:,::-1])\n        plt.show()","90f1efdf":"display_four_class_images(100)","0c3201f6":"im = cv2.imread('\/kaggle\/input\/corn-or-maize-leaf-disease-dataset\/data\/Gray_Leaf_Spot\/Corn_Gray_Spot (404).JPG')\nim.shape","5298aac4":"im.dtype","49519626":"im","b46ab3ac":"def dataset_size(path, classes):\n    size = []\n    for i in classes:\n        size.append(len(os.listdir(path + i)))\n        \n    df = pd.DataFrame(columns = ['Type', 'No_of_Images'])\n    df['Type'] = classes\n    df['No_of_Images'] = size\n    \n    return df","af79c835":"dataset_size(path, classes)","0e1c9d91":"def average_image_size(label_name):\n    r, g, b = [], [], []\n    for image in os.listdir(path + label_name):\n        im = cv2.imread(path + label_name+'\/'+image)\n        r.append(im.shape[0])\n        g.append(im.shape[1])\n        b.append(im.shape[2])\n        \n    return (sum(r)\/len(r), sum(g)\/len(g), sum(b)\/len(b))","5bd8e9cb":"for label in classes:\n    print(label, average_image_size(label))","37b46a1f":"def image_extensions(label_name):\n    extension = []\n    for image in os.listdir(path + label_name):\n        extension.append(image.split('.')[-1])\n        \n    return list(set(extension))","8d570276":"for label in classes:\n    print(label, image_extensions(label))","de6b49b2":"train_data_generator =  ImageDataGenerator(rotation_range=40,\n                                width_shift_range=0.2,\n                                height_shift_range=0.2,\n                                rescale=1.\/255,\n                                shear_range=0.2,\n                                zoom_range=0.2,\n                                horizontal_flip=True,\n                                fill_mode='nearest',\n                                validation_split = 0.25)","477535fc":"# img = load_img(path+'\/Blight\/Corn_Blight (412).JPG')  # this is a PIL image\n# x = img_to_array(img)  # this is a Numpy array  \n# x = x.reshape((1,) + x.shape)  # this is a Numpy array  \n\n# # the .flow() command below generates batches of randomly transformed images\n# # and saves the results to the `preview\/` directory\n# i = 0\n# for batch in train_data_generator.flow(x, batch_size=1,\n#                           save_to_dir='\/kaggle\/input\/preview', save_prefix='Corn_Blight', save_format='JPG'):\n#     i += 1\n#     if i > 20:\n#         break  # otherwise the generator would loop indefinitely","184a4ec5":"train_dataset = train_data_generator.flow_from_directory(\n                                    path,\n                                    target_size = (224, 224),\n                                    class_mode = \"categorical\",\n                                    batch_size = 64,\n                                    subset = \"training\")\n\nval_dataset = train_data_generator.flow_from_directory(\n                                    path,\n                                    target_size = (224, 224),\n                                    class_mode = \"categorical\",\n                                    batch_size = 64,\n                                    subset = \"validation\")","3adb1070":"def visualize_datagenerator(no_of_images):\n    for pic in range(no_of_images):\n        image, label = val_dataset.next()\n        print(\"image shape is: \", image.shape)\n        plt.imshow(image[0])\n        print(image[20].shape)\n        plt.show()","8736fd40":"visualize_datagenerator(8)","16b38f48":"input_layer = Input(shape = (224, 224, 3))\n\nvgg_model = VGG16(include_top=False,weights=\"imagenet\",classes=train_dataset.num_classes, input_shape = (224, 224, 3))\n\nvgg16_model = Sequential()\nvgg16_model.add(vgg_model)\n\nvgg16_model.add(Flatten())\nvgg16_model.add(Dense(256,activation='relu'))\nvgg16_model.add(Dropout(0.25))\nvgg16_model.add(Dense(4,activation='softmax'))\n\nadam = Adam(lr= 0.0001, decay=0.0001 \/ epochs)\n","b5190750":"vgg16_model.compile(optimizer = adam, loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","bb97fa21":"vgg16_model.summary()","16595b55":"plot_model(vgg16_model, to_file='vggmodel_plot.png', show_shapes=True, show_layer_names=True)","d42942cf":"history = vgg16_model.fit(train_dataset, epochs = epochs, validation_data = val_dataset, verbose = True)","4fda955b":"history","9dd1d88e":"history.history[\"loss\"]","bc660152":"def visualize_training_epochs(v):\n    plt.plot(v.history[\"accuracy\"])\n    plt.plot(v.history[\"val_accuracy\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    plt.title(\"vgg16_model_accuracy\")\n    plt.legend([\"Train\", \"Validation\"])\n    plt.show()\n    \n    plt.plot(v.history[\"loss\"])\n    plt.plot(v.history[\"val_loss\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"vgg16_model_loss\")\n    plt.legend([\"Train\", \"Validation\"])\n    plt.show()","18ca249d":"visualize_training_epochs(history)","d71bf627":"vgg16_model.save(\"vgg16.h5\")","515a66ad":"val_dataset.class_indices","8bfe521e":"val_dataset.classes","fb42786f":"len(val_dataset)","e7d212eb":"predictions = vgg16_model.predict_generator(val_dataset)\npredictions","63e76f83":"prediction_class = np.argmax(predictions, axis = 1)\nprediction_class","b06a2eee":"len(prediction_class)","f96110d5":"print(confusion_matrix(val_dataset.classes, prediction_class))","7f7e44f2":"print(classification_report(val_dataset.classes, prediction_class))","526c7156":"**Load and check the average image size of each class to make sure that there's no outlier shape in the Dataset.**","6df6e82a":"How to increase image data size for single class? - Doubt","f015c7e7":"**Count of Images in each class**","45abf163":"**Image Extensions**","737f46bc":"**Import Libraries**","a33deb8c":"**Function to display random images from each class of the dataset**"}}