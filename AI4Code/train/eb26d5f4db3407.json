{"cell_type":{"2c5b5093":"code","22126ae8":"code","e983e881":"code","deca160c":"code","fd8c80ea":"code","61dab3ba":"code","9f0ed428":"code","182adb1e":"code","1351be9f":"code","e3415569":"code","154ab39c":"code","3d55b42a":"code","9abba725":"code","91e8af32":"code","f1771a08":"code","7163bd64":"code","8bafafac":"code","3802ab5f":"code","5ff15845":"code","5b4c9200":"code","3737f220":"code","2320191a":"code","97a550cc":"code","db2304f1":"code","ade42975":"code","a94c0ac8":"code","14d3e8b3":"code","f7c29a3e":"code","02f289b0":"code","fd03cea3":"code","1deea890":"code","f1a35c90":"code","550f1e04":"code","ed2911a7":"code","944c525e":"code","ec37327d":"code","919c627b":"code","82e68df6":"code","9ddffd78":"code","e5d375b2":"code","133a1b20":"code","556a122e":"markdown","c757f361":"markdown","29adb1b4":"markdown","c96ec5ba":"markdown","2e43c30f":"markdown","97a4f257":"markdown","50c3b186":"markdown","f7b3127e":"markdown","96b55cb3":"markdown","be317d78":"markdown","84cbab2d":"markdown"},"source":{"2c5b5093":"#Import Libararies\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime \nimport scipy.stats as stats\nimport statsmodels.api as sm","22126ae8":"#  Read datasets\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-1\/train.csv\")","e983e881":"#We are using weather data provided on Kaggle\nweather=pd.read_csv(\"..\/input\/weather-data\/training_data_with_weather_info.csv\")","deca160c":"#We are using Tanu's dataset of population based on webscraping\npopulation=pd.read_csv(\"..\/input\/popula\/population_by_country_2020.csv\")","fd8c80ea":"# Select required columns and rename few of them\npopulation = population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\npopulation.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']","61dab3ba":"# Replace United States by US\npopulation.loc[population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'","9f0ed428":"# Handling Urban Pop values\npopulation['Urban Pop'] = population['Urban Pop'].str.rstrip('%')\np=population.loc[population['Urban Pop']!='N.A.', 'Urban Pop'].median()\npopulation.loc[population['Urban Pop']=='N.A.', 'Urban Pop']= int(p)\npopulation['Urban Pop'] = population['Urban Pop'].astype('int64')","182adb1e":"# Handling Med Age values\npopulation.loc[population['Med Age']=='N.A.', 'Med Age'] = int(population.loc[population['Med Age']!='N.A.', 'Med Age'].mode()[0])\npopulation['Med Age'] = population['Med Age'].astype('int64')","1351be9f":"print(\"Combined dataset\")\ncorona_data = weather.merge(population, left_on='Country\/Region', right_on='Country (or dependency)', how='left')\ncorona_data.shape","e3415569":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","154ab39c":"#Drop Province\/State \ncorona_data.drop('Province\/State', axis=1, inplace=True)","3d55b42a":"#Drop Country or dependency\ncorona_data.drop('Country (or dependency)', axis=1, inplace=True)","9abba725":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","91e8af32":"corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']] = corona_data[['Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']].fillna(0)","f1771a08":"#checking for null values\nsns.heatmap(corona_data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","7163bd64":"from sklearn.preprocessing import LabelEncoder\nlabelencoder_X = LabelEncoder() \ncorona_data.iloc[:, 1] = labelencoder_X.fit_transform(corona_data.iloc[:, 1])","8bafafac":"corona_data['day']=pd.DatetimeIndex(corona_data['Date']).day\ncorona_data['year'] = pd.DatetimeIndex(corona_data['Date']).year\ncorona_data['month'] = pd.DatetimeIndex(corona_data['Date']).month\ncorona_data.head()","3802ab5f":"corona_data['Population (2020)'] = corona_data['Population (2020)'].astype(int)","5ff15845":"corona_data['Active'] = corona_data['ConfirmedCases'] - corona_data['Fatalities'] \n \ngroup_data = corona_data.groupby([\"Country\/Region\"])[\"Fatalities\", \"ConfirmedCases\"].sum().reset_index()\ngroup_data = group_data.sort_values(by='Fatalities', ascending=False)\ngroup_data = group_data[group_data['Fatalities']>100]\nplt.figure(figsize=(15, 5))\nplt.plot(group_data['Country\/Region'], group_data['Fatalities'],color='red')\nplt.plot(group_data['Country\/Region'], group_data['ConfirmedCases'],color='green')\n\n \nplt.title('Total Deaths(>100), Confirmed Cases by Country')\nplt.show()","5b4c9200":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Date')['Date', 'ConfirmedCases', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Date\", y=\"ConfirmedCases\",\n             title=\"Worldwide Confirmed Novel Coronavirus(COVID-19) Cases Over Date\")\nfig.show()","3737f220":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n \ngrouped = corona_data.groupby('Country\/Region')['Country\/Region', 'Fatalities'].sum().reset_index()\nfig = px.line(grouped, x=\"Country\/Region\", y=\"Fatalities\",\n             title=\"Worldwide fatalities Novel Coronavirus(COVID-19) Cases Over country\")\nfig.show()","2320191a":"train_df = pd.read_csv('..\/input\/weather-data\/training_data_with_weather_info.csv', parse_dates=['Date'])\ntrain_df_conf = train_df[train_df[\"ConfirmedCases\"]>=1]\ntrain_df_conf=train_df_conf[[\"Country\/Region\",\"Date\"]]\ndf= train_df_conf.groupby([\"Country\/Region\"]).count()\ndf=df.sort_values(\"Date\",ascending=False)\ncountry_name = df.index.get_level_values('Country\/Region')\ncorona_victims=[]\nfor i in range(len(df)):\n    corona_victims.append(df[\"Date\"][i])\ncl = pd.DataFrame(corona_victims,columns=[\"Victim\"]) # Converting List to Dateframe\ndf=df.head(80)\nxlocs=np.arange(len(df))\ndf.plot.barh(color=[np.where(cl[\"Victim\"]>20,\"r\",\"y\")],figsize=(12,16))\nplt.xlabel(\"Number of Confirmed Cases of Corona Virus\",fontsize=12,fontweight=\"bold\")\nplt.ylabel(\"Country\/Region\",fontsize=12,fontweight=\"bold\")\nplt.title(\"No. of confirmed Corona Virus cases by country \",fontsize=14,fontweight=\"bold\")\nfor i, v in enumerate(df[\"Date\"][:]):\n    plt.text(v+0.01,xlocs[i]-0.25,str(v))\nplt.legend(country_name) # top affected country\nplt.show()","97a550cc":"df_new = []\nnumber_countries = 0\ntotal_victims=0\nfor i in range(df[\"Date\"].shape[0]):\n    if df[\"Date\"][i] > 100:\n        df_new.append(df[\"Date\"][i])\n        total_victims = total_victims + df[\"Date\"][i]\n        number_countries=number_countries+1\nprint(\"Number of countries where Corona Victims are more than 100 :\", number_countries,\"\\n\")\nprint(\"Total Number of Victims:\",total_victims,\"\\n\")        \nexplode=np.zeros(number_countries)\nexplode[0]=0.1\nexplode[1]=0.1\nexplode[2]=0.2\nfig = plt.gcf() # gcf stands for Get Current Figure\nfig.set_size_inches(10,10)\nplt.pie(df_new,explode=explode,autopct='%1.1f%%',shadow=True, labels=country_name[0:number_countries])\ntitle = \"Top\"+str(number_countries) +\" Countries by Confirmed Cases and their Contribution\" \nplt.title(title,fontsize=12, fontweight=\"bold\")\nplt.legend(loc=\"lower right\",bbox_to_anchor=(1.1,0),bbox_transform=plt.gcf().transFigure) # bbx required to place legend without overlapping\nplt.show()","db2304f1":"corona_data.corr()['ConfirmedCases']","ade42975":"#Attributes showing high correlation with dependent variables are not included\nX_train=corona_data[['Lat','Long','day','month','Population (2020)','Land Area','Med Age']]","a94c0ac8":"y_train=corona_data[['ConfirmedCases','Fatalities']]","14d3e8b3":"sns.heatmap(X_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","f7c29a3e":"test_data = test.merge(population, left_on='Country\/Region', right_on='Country (or dependency)', how='left')\ntest_data.shape","02f289b0":"test_data['day']=pd.DatetimeIndex(test_data['Date']).day\ntest_data['year'] = pd.DatetimeIndex(test_data['Date']).year\ntest_data['month'] = pd.DatetimeIndex(test_data['Date']).month\ntest_data.head()\ntest_data.drop('Province\/State',axis=1,inplace=True)","fd03cea3":"X_test=test_data[['Lat','Long','day','month','Population (2020)','Land Area','Med Age']]","1deea890":"X_test[['Population (2020)', 'Land Area', 'Med Age']] = X_test[['Population (2020)', 'Land Area', 'Med Age']].fillna(0)","f1a35c90":"X_test.info()","550f1e04":"# Fitting Polynomial Regression to the dataset\n# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.multioutput import MultiOutputRegressor\n\npolynomial_regressor = PolynomialFeatures(degree = 4) #try 2,3 and 4\n\nX_polynomial = polynomial_regressor.fit_transform(X_train)\nlinear_regressor_2 = LinearRegression()\n#for multi-output\nregr_multirf = MultiOutputRegressor(linear_regressor_2)\nregr_multirf.fit(X_polynomial, y_train)","ed2911a7":"y_multirf = regr_multirf.predict(polynomial_regressor.fit_transform(X_test))\ny_pred = np.round(y_multirf, 1)\ny_multirf.shape","944c525e":"y_pred = y_pred.astype(int)","ec37327d":"submission = pd.DataFrame(data = np.zeros((y_pred.shape[0],3)), columns = ['ForecastId', 'ConfirmedCases', 'Fatalities'])\nsubmission.shape\ny_pred1 = pd.DataFrame(y_pred)","919c627b":"for i in range(0, len(submission)):\n    submission.loc[i,'ForecastId'] = i + 1\n    submission.loc[i,'ConfirmedCases'] = y_pred1.iloc[i, 0]\n    submission.loc[i,'Fatalities'] = y_pred1.iloc[i, 1]","82e68df6":"submission['ForecastId'] = submission['ForecastId'].astype(int)\nsubmission['ConfirmedCases'] = submission['ConfirmedCases'].astype(int)\nsubmission['Fatalities'] = submission['Fatalities'].astype(int)","9ddffd78":"submission","e5d375b2":"submission.to_csv('submission.csv', index = False)","133a1b20":"submission.head()","556a122e":"## World Wide Fatalities country wise","c757f361":"## Worldwide Confirmed Cases over Date","29adb1b4":"## Visualization of total deaths and confirmed cases by country","c96ec5ba":"# COVID Global Forecast","2e43c30f":"## 1. Data Preparation","97a4f257":"## Country wise analysis showing the impact of corona virsus world-wide","50c3b186":"# 1. Exploratory Data Analysis","f7b3127e":"### The relationship between independent and dependent variables being exponential linear regression would not be beneficial, hence polynomial regression is being applied.","96b55cb3":"# Prediction - Polynomial Regression","be317d78":"## Topic of Content\n### 1. Data Preparation\n### 2. Exploratory Data Analysis\n### 3. Prediction","84cbab2d":"## Countries having more than 100 confirmed cases of coronavirus and their respective contributions."}}