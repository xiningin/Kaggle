{"cell_type":{"5da6b202":"code","58b56e96":"code","b6bc9ae6":"code","b6c879b1":"code","b206e518":"code","fad2e32e":"code","92353a85":"code","c2ad3108":"code","d9c2b94d":"code","a05cee4b":"code","3ad59cea":"code","06c80c11":"code","5d550a40":"code","1c780100":"code","4d662f89":"code","7344c3d8":"code","e3f62201":"code","25f29523":"code","47802d16":"code","afa91320":"code","d7020e59":"code","3baf09d4":"code","6931d775":"code","946291c2":"code","add072bd":"code","de090d56":"markdown","fe7dbc9f":"markdown","982e12f4":"markdown","3c104ad7":"markdown","8b9fb053":"markdown","6e28788d":"markdown","356ad4c0":"markdown","423b0dba":"markdown","fcb68dfa":"markdown","864e2da7":"markdown","1ee8afcd":"markdown","2591083d":"markdown","41b72eaf":"markdown","c1ac9864":"markdown","5ea2f45a":"markdown","0bc0fc7e":"markdown","c3fc768b":"markdown"},"source":{"5da6b202":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58b56e96":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,f1_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\n\n\nimport keras\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom tensorflow import keras \nfrom keras import backend as K\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.layers import LSTM,Dense,Bidirectional,Input\nfrom keras.models import Model\nimport torch\nimport transformers","b6bc9ae6":"df = pd.read_json(\"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json\", lines=True)\ndf.head()","b6c879b1":"df.drop('article_link', axis=1, inplace=True)","b206e518":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","fad2e32e":"def strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n#Removing the square brackets\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n# Removing URL's\ndef remove_between_square_brackets(text):\n    return re.sub(r'http\\S+', '', text)\n#Removing the stopwords from text\ndef remove_stopwords(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop and i.strip().lower().isalpha():\n            final_text.append(i.strip().lower())\n    return \" \".join(final_text)\n#Removing the noisy text\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    text = remove_stopwords(text)\n    return text\n#Apply function on review column\ndf['headline']=df['headline'].apply(denoise_text)","92353a85":"def get_corpus(text):\n    words = []\n    for i in text:\n        for j in i.split():\n            words.append(j.strip())\n    return words\ncorpus = get_corpus(df.headline)\ncorpus[:5]","c2ad3108":"from collections import Counter\ncounter = Counter(corpus)\nmost_common = counter.most_common(10)\nmost_common = dict(most_common)\nmost_common","d9c2b94d":"X = df['headline']\ny = df['is_sarcastic']","a05cee4b":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 0,stratify = y)","3ad59cea":"## pip install transformers\n## If transformers library is not installed","06c80c11":"from tokenizers import BertWordPieceTokenizer\n# First load the real tokenizer\ntokenizer = transformers.DistilBertTokenizer.from_pretrained('distilbert-base-uncased' , lower = True)\n# Save the loaded tokenizer locally\ntokenizer.save_pretrained('.')\n# Reload it with the huggingface tokenizers library\nfast_tokenizer = BertWordPieceTokenizer('vocab.txt', lowercase=True)\nfast_tokenizer","5d550a40":"def fast_encode(texts, tokenizer, chunk_size=256, maxlen=200):\n\n    tokenizer.enable_truncation(max_length=maxlen)\n    tokenizer.enable_padding(max_length=maxlen)\n    all_ids = []\n    \n    for i in range(0, len(texts), chunk_size):\n        text_chunk = texts[i:i+chunk_size].tolist()\n        encs = tokenizer.encode_batch(text_chunk)\n        all_ids.extend([enc.ids for enc in encs])\n    \n    return np.array(all_ids)","1c780100":"x_train = fast_encode(X_train.values, fast_tokenizer, maxlen=200)\nx_test = fast_encode(X_test.values, fast_tokenizer, maxlen=200)","4d662f89":"def build_model(transformer, max_len=200):\n    \n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=2e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","7344c3d8":"bert_model = transformers.TFDistilBertModel.from_pretrained('distilbert-base-uncased')","e3f62201":"model = build_model(bert_model, max_len=200)\nmodel.summary()","25f29523":"history = model.fit(x_train,y_train, batch_size = 32 ,validation_data=(x_test,y_test), epochs = 5)","47802d16":"print(\"Accuracy of the model on Testing Data is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")","afa91320":"epochs = [i for i in range(5)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Testing Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'go-' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'ro-' , label = 'Testing Loss')\nax[1].set_title('Training & Testing Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","d7020e59":"pred = model.predict(x_test)\npred[:5]","3baf09d4":"pred = np.round(pred).astype(int)\npred[:5]","6931d775":"print(classification_report(y_test, pred))","946291c2":"cm = confusion_matrix(y_test,pred)\ncm","add072bd":"plt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")","de090d56":"Downloading the pre-trained BERT model.\nWe can use either the CASED or the UNCASED version for model building.\n\nTo explain the BERT training in simple words:\nThe BERT pre-training consists of two steps which happen parallely, these include:\n### 1. Masked Language Model\nIn this the model is provided with sentences and some of the words are masked with a [MASK] tag (15% of all words), the model is then asked to predict those masked words. The BERT loss function takes into consideration only the prediction of the masked values and ignores the prediction of the non-masked words. As a consequence, the model converges slower than directional models, a characteristic which is offset by its increased context awareness.\n\n### 2. Next Sentence Prediction\nIn the BERT training process, the model receives pairs of sentences as input and learns to predict if the second sentence in the pair is the subsequent sentence in the original document. This helps the model to understand the relationships between sentences.\n\n#### Here, we use a distil-bert-uncased pretrained model for training","fe7dbc9f":"### Please upvote if the notebook was useful","982e12f4":"![](https:\/\/miro.medium.com\/max\/875\/0*m_kXt3uqZH9e7H4w.png)","3c104ad7":"## 4. Model Building","8b9fb053":"1. BERT\u2019s key technical innovation is applying the bidirectional training of Transformer, a popular attention model, to language modelling. \n2. This is in contrast to previous efforts which looked at a text sequence either from left to right or combined left-to-right and right-to-left training. \n3. The paper\u2019s results show that a language model which is bidirectionally trained can have a deeper sense of language context and flow than single-direction language models. \n4. In the paper, the researchers detail a novel technique named Masked LM (MLM) which allows bidirectional training in models in which was previously impossible.","6e28788d":"### Important links for reference\n\n1. [Original BERT paper from Google AI](https:\/\/arxiv.org\/pdf\/1810.04805.pdf)\n2. [Github documentation of BERT](https:\/\/github.com\/google-research\/bert)\n3. [HuggingFace transformer documentation on which the code is built](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)\n4. [Amazing Blog Post on BERT](https:\/\/towardsml.com\/2019\/09\/17\/bert-explained-a-complete-guide-with-theory-and-tutorial\/)\n5. [Presentation on BERT by Jacob Devlin](https:\/\/nlp.stanford.edu\/seminar\/details\/jdevlin.pdf)","356ad4c0":"### Credits - https:\/\/www.kaggle.com\/madz2000\/sentiment-analysis-cleaning-eda-bert-88-acc","423b0dba":"#### DistilBERT is a small, fast, cheap and light Transformer model trained by distilling Bert base. It has 40% less parameters than bert-base-uncased, runs 60% faster while preserving over 95% of Bert\u2019s performances as measured on the GLUE language understanding benchmark.","fcb68dfa":"In this Notebook I will only be covering the BERT implementation of Sarcasm Detection.\nFor all EDA and DL based models you can look at the following kernels\n\n1. https:\/\/www.kaggle.com\/madz2000\/sarcasm-detection-with-glove-word2vec-83-accuracy\n2. https:\/\/www.kaggle.com\/siddharth2000\/word2vec-eda-ml","864e2da7":"We shall be using the pre-trained BERT model which has been extensively trained on huge text corpuses of Wikipedia.\nNow after getting the pre-trained model, we can fine-tune the model for our own specific task.\n\nThe key thing to notice is here is that for our final prediction we would only be using the output generated by the first token ([CLS]), after which we use a sigmoid activation for final prediction.","1ee8afcd":"## 2. Basic Data Cleaning","2591083d":"Fitting the model and training it on 5 epochs is enough to provide a high accuracy.","41b72eaf":"## 1. Importing Data","c1ac9864":"Before any sentence is passed into the BERT model, it has to go through some tokenization steps. \n1. Firstly, tokenize all words in the sentence corpus\n2. Next, all the tokens are embedded using the learned embeddings from a WordPiece Tokenizer. For each word we get 786 dim. vector representation.\n3. Segment Embedding - Helps in distinguishing the words belonging to different sentences.\n4. Positional Embedding - This is used to provide the positional understanding for each word.","5ea2f45a":"## 3. Creating the vocabulary","0bc0fc7e":"## Sarcasm Detection \n\nSarcasm detection unlike sentiment analysis or simple text classification requires a lot of information about human interaction semantics, the model needs to know about how humans actually interact and it also needs to know the context in which certain words are used while being sarcastic and when not sarcastic.\n\n### In this notebook, we will try using the BERT classifier.\n\n## BERT - Bidirectional Encoder Representations from Transformers","c3fc768b":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUTEhMWFhUXFxkbGBgYFx0aGhgaFxUYFxoaFxgYHSggHRomGxcWITEhJSkrLi4uGB8zODMtNygtLisBCgoKDg0OGxAQGy8lICUtLS0tLy0vLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAJsBRgMBEQACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABAEAABAgMFBQUFBQYHAQAAAAABAhEAAyEEEjFBUQVhcYGRBiIyobETUsHR8BRCYnLhByOCkrLxJDM0U3PC0qL\/xAAbAQACAwEBAQAAAAAAAAAAAAABAgAEBQMGB\/\/EADcRAAIBAgMECAYBBQADAQAAAAABAgMRBCExBRJBURNhcYGRsdHwFCIyM6HBQgYjUuHxQ4KSFf\/aAAwDAQACEQMRAD8A8WUkjH+\/Awwl7hooCeAHP9AYKFeoIiBHhJI8TJ449MfKDYXeXDMIFIyKuNB0FfODkL8xxmk0wGgoOgx5wbgshBECPCid6vQH4n+mCJq+z377REKYuMYgGSPYuAQwd+7wxu7v7Q1hN62TGhECOryG71r6NBFDljM8t5+UEV8hBXeYhB1Kru84EZVxdsT6eh0Ftc5cxwwDDT+8G4EswUwA2H50ptaFqhn3jd+kM0c4yuNPAGsPGYLrcOFM+Jg3yBbO41ECdEIdEIOX2D5kkPwA86440iAtmJecEqDkEbnd8dcIgbWdkNmYcqcKeeJ5wLhsNwBgTACCYAR2VKIrR2cDM6U8+UFIDa0IxhToCYAQTAGQZlAeJTHRiSOOnrEsDefBArRdqWL4NUNr1em6uhlrDJ7x0uUT3iCRjvNW4s+J4wEnqRySyuNqTV1GugqeuA8+EDtGXUcpZ7oSGcZY+NWePoIjCks7+8kCBW6M\/Ed2YG71gB6379\/gCbPUp3UptHLbqRG2wqKXAaMKOP2VRrmwJANajNtcTyhoiTDs00qUyiVA4uXozvubF4ibbFmkldajYnnJk8MeZx84lwuK45gxAiiIBhCCKPS5bhyQBg9TU7hwgpCt8A7QO8dKNwankx5wXqLHQARCEiTNLEbi1KilWOTgGGTEklqDLS5A1iBbsH4lHLPgIOouiD8RpgPIb4INArwFBzPy0EEFuYELew1rrIVwHcvSjfODcm7mmAmfVsBnyhVIaVOyuOKmUDnLpD3OSjnkMyVkl9ISLuzrOCSJQjoVzoJDjEIKE9IhBRMagFN+e\/8AtAuRoFa30A0EQKRypKgHIp88HGUSzJvLQagDAmAE4JfhmfrOAEeXMArd7yWGO447wAINxUm8r5EYofw9Mx8xCnS\/M72CtMcASATwBLxLMO8hlQaFHQ5PlEqKkgkKJIID41amYwaC02xYySVnwBmqKQlNHDk4Fnank\/OA8lYaKu2xfaOKjvFJD5s+DYYBUS5FGz6r\/kiAPQQh1HJpYADSpGl5VBu358MS8gRV22\/eSEEkgFRH3dzsqjtiAz13xLO1w7ybsRzCDiGIEdC7vhx97\/zpxx4QdBWr6nGeouKVxYAPxYRLsG6gpVnKqhhVg5Ac6B8cR1gpNglNICIEURAMNCXoIIrJcsgBmvAuauPCDUNUDLfV8mdcjnK97+8wCsKxod2FAwBGXH+8DUlrBCQcSwGpOPBseUGwHJcAkpukE4PiKgjODoLe6YqEs+4Ec\/D8T0iEedhy6wbD3jv90atDC3uKHIoGT9YnXdEBoIBR2JbE5Djn6QOA1s7CTVuN2mUF5okVaViMqOLLUVfMZ9rWBvDOF1Y5U9\/jBcgRppD1jJvBi1XfhBhqJWXyss1Jckpapwz4N8osFC9tQDECOeyo50fDUtjrEsLfOw2pTxBgYBBQijmg8zw+cQN+QcyeC5AYqxq4yNA24QWwKOivoR4Uc4Jzy1+W+AEW9nkPCN+v1uiEtwG\/uniPQwOA3E6QnvAnAKDnIVGcRakloxqa7m9i9X1zhX1jq3AK04h8bofjv3s0Rkh+xh2wgDnTtda\/PzeAwx5HLcKDYhgOI\/V4nEi0OnAJcJzz3HIehOeHEPIMc82DNlgNe93AY4nHT13RGgxbzsFOmpcqY3lJqHoLwrvwyyeC3xBGLslwX6IhjmdRDECcIhByXLeuA1PoNTugpCt2Hk2gBhcBCS4vEu51Ys1BTdjDb3UI4PW4ypTkk4kuedYFxrWLPZuw58+qEd33ld1PImp5AxZo4SrVzisubyRxqVoQybNDJ7FFgFTgBndS5J4k4bmi\/HZT\/lLwXvyKrxa1SJSuxst3E1bsRgGFGjr\/APlQ\/wAn+BPina1ivtHYyaPBMSrcQU\/OOE9l1F9Mk\/x6nRYqL1RUbTsMyTdExJT3QNz1djhjXnFGrSnTaU1Y6U5qV7ASU\/uyVCjhhg5ZXl\/bgq0uySfzpLr\/AEFJngqqAHOIoQagHfjBT5iyjZZMVQrlTUhhwS\/q8QlwTXFT8AT6tEJ2IWah0i6cMQWFXd2J0YcokllkNCVnaREK+XpHK5Y3HxzGHeEO40RnAIckViELCxyCKnlHanDiypXqp\/KiXHUqh+0OdePwOI5QQWFoaAkbjUeXyiE0FWoJLAAtiSHc7gaAQdAJN5s4EEEsHHRnZ21cimEAmadhhRepgDoVMsmtANT9ViWJc4ymqTTUVfcN8BoKdwWKsBQdANT84mobpaiLS+5ORP1XlACgSQE0rXPgcvn0icA53BUczU5DTe2m74YqMuoekomzFBEsFSgHwBVqaqrR2xygSmoq7Yr3Iq8tB6bsK0kv7FVamoxzz5845OvT5gVenpvFQYcsDktAKe8QAFYl\/wCIBq4XfowUsswN2eQsxLOSR3quK0Puj1JbTV41YKd9OHvP31jal93u0am9jXHi+GogcBks8wFJcpGV0PwDk+UAN9RlanJJzhR0rZAmAEQxAkqTaLygJgCgSA7MQ+hDU3Q6d3ZnKUN1XhkMzVF2OThhgGOAGkKxla2Qdls6piglAcmGjFydkCclFXZu9g9k0SmXOZa8h91PLM7zG9hdnRp\/NUzf4XqZ1XFOWUckaaNMqEa1bRlS\/wDMmJTxNekcZ16dP6pJDxhKWiIie0VlJb2yehyrpHL42h\/kP0FTkT7PakTA6FpUPwkH0ixCpCavF3OcouOqDmywoMoAg5GDKKkrMUxXaLZKZBvBRKFlmJdSSMCH8Sakc4w8ZhVRd08n4\/7RdpVN7hmvApZYSkvevNgADjvfKKKsjq7vK1hPanNjxAPwiXBZBBe4eY9DBBYIEaHkfmIIMwFSEHMjkD8YRwTOsa8lqaLZ3YGZMlommYEoWHAu1bI45484xsVtKFGo6aV2jWw2HdWKk8izsfY+TKLke0P4vlhGfU2jVnksuw0aeDpxzeZYytmS0s0tAbDuinDfFZ16j\/k\/E79DDkiHtzstfSZtnHeAdSB97N0792ca2z9qZ9HWfY\/Uxcds5Zzpd69DHIQSWAJMehWZhN21F9mdMMXo3WJYl0KGFXc7sOpiEzYc2SSSUh3q2YerEQWuQqkkrMEoupL4mjaVBrvphxiPIN95jEKOHNFEnJm4Fy\/ziMC1YiaJJIxIZ9zufNucTgH+QUmZqGZQIala46ikRMkkRlkk1xhGdEEAyXOtByxO71icCasBCCouQSMSeFTAQzdi37HF7S\/4FeqYq4r7fecMWv7febkxnGYeUzkhgRRyQ2LENnpURss3Yt6MEKBDKcMSQQHxAcEONBEGs07oSYUqYAkMGD51JctgXJ1gOzIk1qAlLFjQGm6uBfcWPKANqroWbQbyAOgBPnd84jCsyMYUcQwAiGIElWezsoFRFKhIUCVEVAoS3OHSs8zlOd1ZePIjqU7k51POFHStkeg9jNjeyl+1WO+sAge6nLmXePQbOwvRx6SWr\/CMzFVt6W6tEaG02hMtJWshKUhyTGhOcYRcpaIrRi5OyMJtPtTMnLuy3RKrT7ygxdyMKZDzjBxG0J1XaGUfyX4YaMFd6lFPU7HJqZ6vXMu\/WKDLEVa4VnTmcGVz7hoN8FAk\/feOSZi7zoJBGF0swG\/TjBi5J3jqK7WzNTYe1ZQCmekqUEi6ofeLYHLmI1aO0nFNVFd8Hz98ypLDqWcTObQty5yytZrkMgNBGfVrSqy3pFiMFFWQwI5hCEEUMRACiCAsdgbP+0WiVJ99QB\/KKq\/+QY5Yir0VKVTkh6MN+ajzPabSgAMkMAGA0ApHhJSbd2eqppJWKm0orBTLESMpNXhrjEuyqbCFYkkZjttsMJCrTLT3VN7UJ+6XDLA0JoRqxj0ux8fvroJ68PQ83tPB7sulhpxMXNW53AAB9waN1syoqx3h45bt\/GITUaMQIqFNwzGsAjFMo5AnRh8oliXXEEKKTRwc8usTQNkxJqiWJ4Hlh5ehgMKVsgFYDmfh8DE4DLUJYwUc8t+ZO7PnAfMi5AEEpcn7xqeA+qQA8QgpPdN4i6dMWN5xWhqBXQcIOWRLPNW1LTsfMJtOguKoAwxTpFTFv+33nHFK1PvNwYzTNPJ50wngMAMBWNm5vJWGjAHBMAIqJjbxmMj9axNCNXHLXOCmqSXJdmYFmTTFq9YkncWEXH3+SKYU6iGAEOTJKjQgNmSw\/v8AKClcEpbo2IAxc9nrCLRPQDkbyx7wTV+ZYHi8W8HS6ask+1latN04P8e\/I9Pj1JkGD7ZbU9pMMhPhl1P4lgOeQDjjGBtHEOc+jWi8\/wDRo4alux33x8jOSsFHd6lvR4zUWpcEOSkukvgC\/wAwN+B3QVmK3ZhS3UaCgCuA7pzgrNiyyXgHKKWUKlw5IybBgca0q2O6CgSvdMSYsFmdgGrjiT6mIwJcx2y53fFRuGbPnhyeGiLPhfQcmpoCoOoDvMRStL1DVs+D1gvrEj1acBsFOh6j\/wAwMg5hBtD1H\/mDkDMJABoAp+P6RG0tSJSbsjcfsv2er7SuYUKARLLFQzWQKUGV6Mja9ePw+7F6vmaWCw1WFTeqRaXWmvM9BtMeUN2JW2hNecMjqiKpNfr60gjDkuABk9CErSpCw6VAhQOYIYgxITlTkpR1RwqQU4uLPKdp7GmSJ65QSpZSe6ySXSapUQBplqDz9zRxdKdGNVtK\/N2z4nk6mHnGo6aTdiJM2ZPFVSZo3mWr1Iho4vDydlUi\/wD2XqR4eqtYvwZDiwcTkgmgrAIOzAQgaObzHPJ23N5weAFZyBmvdS+NW1u0bk7tAegY6u3tjcsO43PwbP4c4AzyzH02NamKUFQYNdDg5lyKM5MOqc5aJsG8hqagpcKSXx7wIFMWBZ6emELKLjqhl1EdanAfU+ghGOtQZuLaU55+ZPlAYY8y77HgC0NncU+6qaD5\/RrYv7feV8X9vvNuYzTNPJVRsG+AYgwgSSWAc6CAGKbdkPGwTcfZTG\/Ir5Rz6SHNeJY+Fr67kvBkVSSCxodDDHJpp2YMQgUqXeLBs6nAAByTyiJXBJ2Vw7QgBKQCCC5fUijMa0BH8xgtWQINtu+T9+f6GUpegqd0KObP9n1kIVNWWdkpFaipJdsMo2dkwzlJ9SM\/GzukkbGdMupUo\/dBPQPGzKW6myild2PIRNUpV7FRU\/FRL+seQ3nJ7z4m3ZJW4Er7OKgEYuQC5AD00JqRjk8NunLf0bQIWAQ9WpdGABxrmeHWAFptD8mxzVvdQpQF4ApSWdsm4jrHSNKcs4psSUopa8gxsyeE\/wCTMqfcOA5av0EP8PV\/xfgDpI31EGzJ\/wDszP5D8onw9X\/F+BOkjzCGzJ3+zM\/kPyifD1f8X4A6SPMOZYpqQFmWsMKm6QzUfgzecF0aiV3F+AqlF5XGQx3HyPyPlwjmHQutjbCMwX5jpTkM1fIRRxOMVN7sdfI3tl7FeJSq1cocOb9F5mos1lRLDISE8PicTGVOpKbvJ3PX0MNSoR3aUUjV9lE\/u5h1UB0BPxihjHkkZu0388V1Mm2mYAakDjFCzZRRV2q0oA8Seoh1CT4HRNFXtHbEiUL0yakaVx4ax3p4erN2jEEqsIK7ZRz\/ANoVmT4EzFncGHmYuR2TWerSKssdT4XZVL\/adOB7kmWB+IknybfFuOx6f8pMrSx0noj1jYVv9vZ5c0pKSpCVXTiLwdo8ztGhutpZ7rt3F+jPR8ydGSWSs2tsGz2kfvZYJ94UUOChWL2E2licK705ZcnmvAr18JSrL5138TzHtV2cm2Q43pKj3VANX3Vgfe35+Ue72Ztenjo20mtV+11eR5rGYCWGd9Vz9SilqKQSCQTT4n0HWNdFFpPJjtksapygASSo8TTEncNYanTlUlZAlLdNdsvYUuUKi+rMkU5DKNqhg4U1nmzhOo5FrFw5gzZYUGUAQciHELKKkrMKdtCusexJctalJAKVDwkPdLjB8orU8JCnNtaPhyHlUk0LtizIEiaQhIIlrqEh\/CYOIpwVKTSWjJCT3lmZXsb\/AKn+BXqmPJYr7feWMX9vvN0YzjMPMJkskG+O89GACiGL0zGEbdnbM2k0n8v+idsPYXt++byZYzo6tyfnFLEYlU8lqbmzNlzxT355Q\/L7P2zY2Owy5QaWgJ9TxOJjKnUlN3kz2FDDUqCtTil75kmEO5Gt1glzg0xAVvzHA4iHhUlB3izhXw1KurVI398zFbe2TNs6k+zKjLNEtkdFAYk1L5xrUMT0uWj5Hjto7L+Ee884vi+HU\/0U05d2YSlqHiMGIbTER3btLIzIregt4UvMACQAU\/dFAxzD5vjxGkTUmUM3xGlTjgO6NBTrmecC4+6tTa\/s5UPZzhnfSeqW+EbmyH8kl1oz8d9SZp9ooeVMGqFDqkxpVlenJdTKkHaS7TyqXdDLQ\/dILKaocVBG9hzjyatqjXd38suPIJBQkuCo0IAYBnDVL1of7QVZAe88mD7PMVHmOIiBvzN52GU9mP8AyH+lLeTDlG\/sz7Pf6Gdil\/cNDGiVjohDohCJtgPIm\/8AGr+kxxxH2pdjHh9SMLsKw+2mhJ8IqrgMuZjyGJrdHTutT0WysH8ViFGX0rN+nebsDKMI+gJWyRn9sbfKVFEpnGKsa6D5xpYbBKS36ngeX2pt2VObo4fVay9PU0WyEWidsi0GStftlTCUXT3u6JbpBywUBxirjuhpYuG8lu29TLw1avXpSlOTcr2uZDZfYfadtmXSlSSxJVOmFh6l3i7RrUJvdp27kLOnUirzLgfsWtxPenSANbyz\/wBYsXORRI7BTErUidMCVIJCkpD1GhORDEHQiM7EY\/opOO7maFDA9JFS3sjYbG7J7KsdjRbLe6r6yEBRUXqQkBCPEWSSX1i5SlKUFKXEp1YqM3FcDebG2Rs22WdM2ySpNwvcWiWElKhQghgdHBgVqSqwcWSnUcJXQzJDOk0NUlqEHAsY8hKLhNxktHma7+aN0Y2zbPtctagq3LCgSwYrGNHCjmGoBGpXr4GassOreHhYpUcHi0t7pf2X+w9uqXNNmtASmekOCnwzUs95L4Hdx3tj7Q2ZGlTWIoNum+esXyfqWcPipSm6NVWkvBlttCxInS1SpgdKgx+BG8Go4Rl4evOhUVWm8178HxLdWlGpBwlozxLa9iVImKkrxQSH1rRQ3EXY+p4evGvRjVjo1f8A13aHi6tN06koPg7e\/M1fZyw+zlAnxKDncDUD4849HgqPR07vVlOpK8iVtO3pkoK1V0AxJ+W+O1etGlDeYsY7zsYy2bdnzD4ykaJp54mMSpjKs3rbsLcacUJY9vz5Ze+VjNKq+eIgU8ZWg9b9pHSiza7NtyZ0sLTzGYOYMblGtGrDeiVJxcXZg7a\/087\/AI1\/0mBifsz7H5Bp\/Uu0x\/Y3\/U\/wK9Ux4\/Ffb7yzi\/t95ujGcZh5hYLKZy0yxjex0Sak8m841ak9yDlyPTYSg69eNJfy\/Wv4PRZUsJASkMAGEYMpOTuz6JTpxpwUIKyWSM92j7QmUr2UrxfeUfu7gMzF3D4XfW9LQw9p7XdGTpUfq4vl1dplV7VnkuZ0x\/zEeQpF7oadrbqPPPHYlvedSXizWdlNpz5oImpJSA4mM2eB14jSM\/FUqcM4vuPSbJxmIrLdqptcJfrrLy12cTEKQrBQY\/pFWE3B3Rr16MK1N05rJnlttsxlLVLVikkfrzFY2oSUoqSPBV6UqVSVOWqYwYY5jwVfx8WR97crfv66wdRPp7PfvyNR2DJRNWlTd5IoCCQUknvAGmJjV2XLdqOL4ryKWMalFNG6jdM88t2nZEyJsySxFWCjhdcKTlgaOd3GPK16XRVJQ924GvCTnFTfv\/ZXlJFDjHA6BJMEBa7O2xMlpupmFAvBRZIL5EYY4V84s0sTUpq0ZWOFSkpO9r5CntBaf95X\/wA\/KG+MxH+b\/HoToYcght+0\/wC8roPlE+Mr\/wCb\/HoDoafI1PZC0zZqFrmrKheAS7ZBzgN46RrbPqVKkXKbuVa8YxaSRYbfn3LPMV+FuN4gfGO+Llu0ZPq8zlTV5JFL2RkXUzFakAHUAOCOseH2i\/mjE97\/AE1BdHUnxul4f9LfaU+5KWrMCnpFOhFSqRT5m1tCs6OGqTjqk7dvAxth2eqcq7KC1nQJcgby90DeSI36tWnSjvTlZHzaEKk3uxjdnrXYKxzJVkKJiLihNUwcKpdS1Ukx5Xa1enXqqVN3VjdwNGdGG7NWdzZ9mwP3mrp6V+Lxa2Nbo5c7\/r\/pMZfeR5R26O2Ttj\/D+3uBSPYXb3sbrB77d1nvXr3o0bBTNF2olBVrmzARdIQKZlKWJ9Byjz20K8J1bRztkei2bh5KleXHMr7fsSXtCySrEqaZSpSyqVMIvDvEuhYpSrAjQc7eDx6dqc8uTK2O2dKN6kM1xNp2N7Pytk2P2Spt7vFa1kXXUoAMlLnJIAFSY1JTjBb0skZEYuTstSvRMvFSzS8oqbRyT5PHjq1TpKkp822bSjuxUeRRbeQ05xmlJ9R8IeH0lii\/lM52utJkzbJOT40gnklYpwqoc43NlUlXw1WlLR5eKMHak+ixEJx1XqempLhxnHgmrOzN9O55j+0WzA22UG\/zEofeSso9EiPoH9LzdTCqm+E2vGz\/AGzzG14KNfe5pfi5cgR9GPPmM7W2kmeE5ISG4qqfJoxNoTvVtyRaor5SnKEsCXD4JHFsTgKcfU0cjpd6L3799QLQGdJNMQcRvpiID0yGTd7MvexNoImLRkUvzSQPQ+UaOzJtTceaucsQskzS7ZDyJv8Axq\/pMaeJ+zPsfkV6f1IyHY4f4n+BXqmPIYr7feWcX9vvNyYzTMML2NlvPUdEHzUP1i3jn\/bS6z3n9PQviJS5R82jYzFMCdAT0EZaV2evk7RbMVYuz0+b3prISokm94nNSQBgeLRqzxdOCss\/fvmeOo7GxOIe\/P5b556+HrY0lg2FIlCiAo6qAPOKdTF1J5LJdXrqbuG2NhqL3mt583+lp++sm2i0IlpdakpTqS3IRXjGUnZK5pVKtOlG82kusobT2ul3gmUkrJLXj3RyGJ5tFylgZSfzuxh4vb1OEX0K3nzeS9fIym17Qqar2q03VKoQzUADEBn3V0i\/GmoRSR5utiZ4io5zaby0y9+ZXmCKLLUxBGIIPQvBWQGrqxNstuEpYmSwq8C9WYBwSHGLs2VDHSnU6OW\/HU5Spua3ZaHqdhtaZ0tMxB7qg\/DUHeDSPV0qkakFOOjMecXCTiyk7XbDM9ImSx+8QMPfTi3EYjidYpY\/CdLHej9S\/KLGGrbj3XozDS0gg33F1hv\/AC14HgxjAS5l+TaeXH3f3qKi4osxSci7j+Kg6iDkxXvLPUbIYscRAGuKIgCTYrKuasIQHUfLedBHSnTlUkox1ElJRV2elbNsYkyky0\/dFTqTUnrHp6NJUoKC4GbOW9K5R9tLaAlErEk3iNwoAeJfpGftKqklTXadsPHVidlJ4UJgDveCq5OMt1I8ptJfNGR7b+mJWpTp8mn+LfotNpyCuUtIxKS3EVilQmo1It8zb2hSdXDVILVp27RzslKEuw3kkXpkxV4jRDBKfU8zHPbEnLEKD0S8zy+xoLccjYdllvLmA43h5pHyjJqIv4j6kTxPXKVfQWOhqCNCNImGxM8PPej39ZynTjUjuyEn9o5qyEBCUPipySzOWDBjvrGpU2s5QajGz7RaWz0pXbujMbQXWMqCPQ01kM2NdYaSGmsiclDKrycuz1o8CdWc18zb7zLdKMG91WLaQcIrleRT9q7XKlKlmaq7eSWoS90jQH3o0MLhKteL6NXscXjKVDKo9TC7Utv260y5ctJu92Wh6GpqotxJzoI9Lh6ccBhZSnwvJ+h57E1XjMQt3jkj2FKWAGkfMm7u7PWpWPM\/2gzv8dLLgCWmW7nO+VkdCOsfQP6Wg4YbffGd\/Cy\/R5jbM06+6uC9S3j6OefMV2ukFM+9ktII4ih+HWMPaELVb80WqL+UqZiCoBQBIYA7iA3ox5xReaudE0nZiITdBKhiGAwJdsNw1iLLNhbu0kXnYuQDMWsAslLVL1UeA0jQ2bC83LkvM5V3lY0m2f8ATzf+Nf8ASY08T9mfY\/I4U\/qXaZTsh\/n4gkIUxBLs6aMRUekeRxX2+874r6O82pjMM4wnY2Y09SfeQeoUD6PFvHK9NPrPef0\/O2IlHnHyaNpGUexK\/aG2ZMmi1973RU9BhzjtToTnoilidoYfD5TlnyWb99pnrd2qUsNKIl6lQJVyYERep4GCzk7nnsTt+tJtUo2XPJv0X5M7bbUVs6lKZyVKNSTnuFKDjrFtKMVaOhiynUqSc6ju335chs9z8xx\/CNPzHPTDWC8hV83YMGFHClyirD1AHUwUrgcktRQUnEXTuqOhqOR5RMiZrrDRZycxdGKnoOOb7meCoiuaXaX\/AGY2wbMq6pV6QslyH7igHJY1wGGcX8Fiugdn9L\/BWr0+k4WkvyegS5gUApJBBDgioI1EeiUlJXRmtWyZVbZ7PS7QCfAt3vAYkAjvDPHjFTEYKFbPR8zrSryg+ZlpvZC0JVS6tOqSxbgc4yp7NrReVmi58VC3WRl7BtSlE+wUHJOKcy+scvg8Q39D\/HqFVqaVt4sdndkZpLzbqRo949BTzizS2bUb+eyXicqmJja0TWbN2ZLkBpaQCcTmf03CNajh4UVaKKk5ylqLtPaCJCCtZ4DNR0EGvXjRjvS\/6SEHN2R51bLUqatUxeKj00A3AR5upUlUk5y4mhGKirIsNhWsSZgUo0UGI0BNFHn5RVxVHpKduOqNHZON+GxKb+l5P31G2BjBPoKfIf2TLSlMyW7JWq+kHAKIAUH0LJ5g6xyxd6ijLisu7\/RkVMB0VSVSlo82uT5rqf48tB2XQUmYk5hJ6Ej4xQmm1cqYngy0n5xXOKKxVFje\/o3yg2yLdN5lNtDEx2pmpDQj2Y1h5Dy0LQGo5RxM2tqWMhWEIVJFB+0LZE2emR7FBWoKWC2QISXJNAKZxt7JxdHDRm6skllqY20KE6zjuK+o92N7I\/ZT7WcQqaQwAqEA4sc1HWMvbG2vi10VLKHHm\/8ARawGz+g+ef1eRpbfbESZapswslIcn4DecAN8YdChOvUVOCu2aNSpGnFylojxPadv+0TFTJhIUpRNA4AJonLAUj6nhcPChRjRjpFW9X3vM8XWqSqVJVOfvyNX2ft4mygPvJoXxIFAfrOPSYOsqlO3FFKcbMf2rs5M9F1VCKpOYPyjpiKEa0d19xITcXdGNtuyJ8tXgJAwKHIblXrGJUwtWD08CzGcGgbJsSfNPgKRmpbj1qYFPCVaj0t1sZ1IxNrsuwJkSwhPEnMnWN2hRjRhuoqTm5O7E2z\/AJE1\/wDbX\/SYGJ+zPsZIfUu0yXY9f+IYBhcV6pxMeQxX2+8sYtf279ZtzGaZp5hYp\/sZiZj1SXYVJGBGgcEjGNapTU4OL4npcLiHQqxqRWj\/AO\/g9EkTkrSFJLpIcGMCUXF2Z9Fp1I1IKcXdPMoe0XZ72x9pLIC\/vA4KbN9YuYbEqHyy0MTauynXfS0vq4rn\/sy03Y08FvZKPAPGgqkHmpLxPNywuIi7OnLwf6yLTZHZeYpQVM7qR15AjHQ88o4VcXCC+V3f4L+D2NXrNdKnGPG+r6kuHXcvtqdnJM5IAFxQDBQ3YXhn6xRp4mcHnmegxWyqFaCUVutZJr98zE22SbOq4LpVV1BlZkMHFGau+NeE7xUlxPGVqO5VlTk77rtk8iPaVOlBYB71AGDgjvNvduUGWiOcMpNdn\/COIU6D0pV0kKBYhiMCKggh84ZO2pzkr2aY6JibpSkFmJJOJJZIoMAyj1g3VrIXdd7v3xJ+wduTbOWT3kYlCjQakH7v1SLOGxlSjks1y96HOtRjNXepttndprPNpfuK91fd6HA9Xjbo4+jU42fJ5f6KE8PUhwv2FwC8XDgdEIDMWEh1EAaksOpiNpK7ClfQo9p9qZUukv8AeK3eGocOrPk8UK20acMoZv8AHj6HeGHlLXIxtvty5y78wuchkBoBlGNVrTqy3pstxioqyGBHMJIu3mZnAAIdsAzh8Q0Nqc721L3Y+2DKSETO8kYNUoG\/UcMPKKOKwW\/80Nff5PQbK246CVKtdw4Piurs\/PI0lntCJgdCgobj66RkzhKDtJWPYUcRSrR3qck11e8i\/wCyUxp5HvIUOjH4GK1dXgVdpxvRvyaNDaaRlsxYlNalafWkFFmBT7StCcVKSk6FQHR4704S4JmhSrwSs2QRtKVLqpYJ91PeUeCUuY7fD1J6LxyX5Gq4iEVqHI2zOWf3VlXX701QljoHV5QJYenH65ruz9EZkqs5vKPiW9hlWg1mzEge7LSw5qJJ6NHCcqa+hePuwlnxNLZpd1EZ2NfyLtJT+pkLa225FmDzpgSck4qPBIrzwjnhMBiMU7Uot9fDx9sFbE0qKvN+p5n2k7WLtZui9LlJLpSKks9V1Z92A34x7zZWyaeBjd5zer\/S6vP8HmcdjZYl2\/iuH7M2suScK4aRrFJaEmx2lUpSVoLMK6EEmhGbx0p1JU5KUQNXuma7Zm3ZU4AE3F+6o\/0nP1jaoYynVy0fL0K8qbRaRbOYMxYSHUQAMSSw6mA2krsKIdk2mmbNUhFQlIJO8lmH1nFeliY1JuMeAzg0rsPbDewmvhcU\/C6YbE\/Zl2MkPqVjK9l7qZ7m6k3VMynBTSpqfg9aR5LFr+33nbEXcPDxNeZ6PeT1EZm6yjuvkeUqjXN1FxsHbKpAN6sp8M734fi9OsVq+GVVbyyZrbO2rPCvcavF8OXWvTibGxbQlzg8tYVuzHEYiMmdOUPqR7DD4qjiFenJPz8NSVCFgCbMCQ6iABmSw6mCk27IWc4wW9J2XWZjbvaUsUWcKJNDMumn5aV4xfoYN\/VPwPPY\/bcLOnQff6eplEFYDFF4O7LScTiQaEdY0FdK1jzEt1u98+0KXJKySssAAAEsW0ASMBjBSvqK5bitH83GZE8JIN0ciXwahJLGAnYeUd5WudOmAsA7AMHLnEmvWI3cEY2u3xDkyiUkgGrB8sSTXDIQUnYEpJOwK1DAYZnU\/LQc+ADbiKmUTkfQdTSDYDkh+RMWjwzCj8qj\/wBaQ8ZSj9Lt2P0Fdnqr++snz9pTbpactqXWmKvPR71dHx3NHZ16lvrfizhGmr5rnfJW7vfaV8yYpVVKKjqST6xwbcneTudrW0Dmfd\/KPIkfCCxFx7QREIwhBAOy8DyHU\/oYIr4BpNAcx6H9X6wRWHLNXTRW6j8N+7ppEaTyDGcoO6dustdgbdmyJyJhWpQQXIJJDYEHiCRzEcKmFpVIOO6lfjY7\/HYhNXnJrk27PuvY9jtctExIWFKKVAKBC1BwQ4NDHiakXTm4vVHoqU96KaM\/atgSHKle0VuM6YR0KoeOKqJWVvBeh2UEyCdgWVHhkp5h89THR4uu9ZM6wgkskGmUhPhSBwEc3KUtWdUkSZJhGBlpZQHjmcJMxnb3bS\/b+ylTVpTLSAq6pQF9VS7GoZhuaPV7KwVPoFOpFNvNXSdkeax+Jn0u7CTsuXvgY1Zr3hXUZ79D5Rs9RnA3NK8MekAlzpJF4P56tR+bQVqSV7ZEqRZpswEBJmF6VdsXJUCwGFHjpClOplFXFvFO6yE2lYJki7fAF4UKd2Ts74dYlehOlbe4jRakRUW2anwzFjgsj4wiqzjpJ+I27HkNT56l+NSlfmJPrCSnKX1O46SWhquxcjurmaskfwu\/qI1dmQylPuK1d52LLtLNu2aadRd\/mIT8Yt42W7Ql4eIlFXmjzyaKJ4EdFH5iPOcC+tWMlIgDiGFCOJTeTdGIJIGDggCm8XfODqrAeTu9A5EpSTeNCxugNeJIag3Av0iJW1I5p2t77wjb558M+YdwWoHo\/o8cnSg\/4rwLixleOXSSXe\/UiTbQtR7y1k71E+pgpKOSyOc5yqO83ftzGCX3xAaBeyA8VNwx56eu6JaxN5vQdkTSHIV7NI01OD5nAwU+4WUU+F2NAJOBY6HDqPiOcDIbNCLQRjy05HOJYiaZNTMF4Lvi6ABcq9AxSzMx13w987nFxdnG2fP9kZM45MOAA88YW50cUI741iEFEEUdRgRwPQt\/2PSChXqIIhB4+FPEj0PxMMJxYIiEYQggHfujefQfqYPAXiFKNa4Gh5\/T8oKAzrpds3bnEBcfUoGj1zORO\/5wwnWei\/s822Zkv7Gt78sEyz+AYpPB6buEed2xgs+mj3+ps7OxP\/jfcaC1hsaR5+xuRZVTp6dRHSMW9DpexyJZIcJUeCSY6dFPk\/AHSR5omWWxrOEtf8p+UFYerLSLElWgtWi6sOyJxySj8xc9E\/OLVLZlWX1ZFSpiqfDM8m7Z2YSrdPTiAsvvcBR\/qEespK1OK6rHmKy\/uS7b+JSGlDhkfjw3R0OXWApLfXpACdf1r69fnEDbka\/sxbkqliWT3kgsNUgtzI+UbOBrKUNx6ryK9SLvcs7fYkTkFCxTLUHUb4t1aUasd2QkZOLujK2nsrNB7ikqG83TzGEZM9nVE\/laZYVaPEKydk5hP71QSNE1PyEGns2bfzuy6iSrrgayzSEy0hCAyQGAjXhCMIqMdEVm23dmT7a7RCimSk+E3l8WoOQJPMRk7SrptU1wzZaw8LfMzNHw8FHzA+UZfAs8Rkwo4JgBFleIbq9A\/wAIiC9BJeBHMcRj5eggBfMQkKxorXI8dDv66xA6HIWbwCheDgEEVxwGcTjmRrJtD02Yq6p1hVQ10u1akN4Q1G4QW3Z5iJK6src7+8yAY5ncOdRk6Y8Tj0oOUF8gRzzOUkM6cMxmn9N\/0YRPgxELIwPyPEGkS5Gkx+XdIUSmqQ7Ali5AqMWDvQwysJK+SvqcplJJYAggUdjeCsiTUXfPdE1RM07e+HqNCAFhCCKOyMRvp\/NT4wVqCWggiAJEtBKSwJYjAPiD+kOtDnJpPMbEAI8iUc6DU06Pjyg2FckSJ0mlKMWDkFxiC4wf6whmjnGWfvwGvZnTpX0iWGuh0lgDmQ3BqPzDecEXqGxEIa39nlnn\/a5E6WKJmBIJpevUUgai6rlThB3N6L6kNTuppo+gFSwdDyijZGldkWdZU6J6CFcUNdgGVAsQRMsZxCD6SBDXAeNdudnptVotM+zEru3Cpg4UQAg3NTnvYxedqVOO+7N6GfVhv1G48NTC4hsx6Zj49YYrCJVkcPTh8oAQVpb6xiBDkWhSCCnEFxuO5oMZuLuiOKZptm9qEkAThdPvAOk8RiI1aO0IvKpk+fA4yov+JcytoSleGYg\/xD5xejWpy0kvE5OMlwBnbTko8U1A\/iBPQVgSxFKOskFQk+BR7R7TggpkUpWYoYZC6nElyMYz6+0E1al4+iOsaNrb3gZKcC5cucXxd6u+94yHe+Zbi7rIRPhVyPqP+0TgHihkwo4JgBFRgo7m6kfAGIgvgNhTFxlACdNSxphiOB+m5RGFBpUAADiRQ5pSfgeoGGLRCWzy9+\/Maqk\/TEHfp9ZQNBtUKEXTexAqN5OHN3f8piWsS98hgwo4dUneOhB9QR6wdAZNBFIIdOWI03jd6ecQHUxJayC4LfW\/KDewGk9Q1zSaFmGQAA6AM++JcCikCIhGEIIo5LSSQBiSAOJLQQN2V2PT0CqklwVEYMxx6QzXE5xfB8grQatkALvBnficXiPUkdLji5pZJzIqWqakAvjgIa4iSzGnzMAYdUplU0A8gKweIizQ4hA8WQy38dN\/6OQN8AkTSXBLvrWvPmOcFO4rSWZpdk7IuS0zZktN5b3EqFQxZ7po77qRS+I6TEKkvpWcn1LNmpSpUaNJyq332vlXBcm\/M1qJqxZ+7VdnWlb6vj0ZJbSDgK39288o1bpLlbQ5YqNlHNuSSb7\/APR6TsjaqLRKTOlnuqFRmlWaTvEGpB05OLOsZKSuiVNrCNDEcKhQgmBYJg+1fakz1GyWQ0qJs16AZhJGWIJ5CLcVDDw6at3LiytUm5PdiZzaRlps8pMpRuCbUgteIISpT9W0ilCpVqYx9Ms3F2TzSyukWcPG2GqShk47ufHWzIG07KJpMsMqcBfQsABSwCQUrahJu0Ou4wKOKs1PSLytraXV1Cywka9Cc19cc31r1MosZjA\/RH1ujVZjiJVkcPqo3xAgrS3DIwAoCIEEwAiGAMIhZHPFw4PIxCWuDMUSXP1lAGSsjpQdxqk+VfhERJZZjJhRzkoJwD\/WZyiWJdLUe+z9044BV5xdcUuhsw5zy0g7uQqn834tx7SMZStH4V9IWx1ugkDuufunDV8uAP8AVwgcCPWy4jCy5c4wGOsjkryNR6bxofWIS3IeWhgEZGoV+LQ6UYecF6WFTu973YiEQh1HB3k70+af09CdIIuj7QUqILihiE1HboNRjmPiN27LhgQXtqAIhBREAwhBFCEEg8uapXiL\/XrBbbEUUtAkTThQ6OAW4OINxWlqFMSp3UC51EF34gTXARIekQjHSHUeJ6PjB4i6IIrqGo2H1vggtzL\/ALJWALmiapPdSWbVW7cA53FuVPH1ejo62by9ffWaGzaO9UlVekE3nz4LxLaZbiq1ofwSvaJQdQASH3giJuRo4SUE\/mcU32MWpGrUfTS0befWXWxxOmSgqSKqmEknwtdAN45jGM+tUowlSVV5KHDW+b8zQVPedZJZ5JX7v0jabK2PK2fJmzlLUARfUl+4lhglOuT45RpKrVrQipK8rd5QUY0r55GNtXaCdMXelWwO7hA7oA0Y5RUk8VS+7Ty7P2i2q2CqKz3ovmnf8ZE+z9obWjxISsDNJ\/vHJYumsmmvB+h06KlL6aq7016kbb\/aGbaJfs7xs4Pj7hJI0CgaDlFmliqaldWfa7eat+QSwNWSyz642l+0\/wAFFKRKSj2SJqEu1TecnVXd\/QQlejXxMukabt1xa7Fn\/wBFw\/RYStGUr9ji139wB2DalWVCEpTecnxjAqcHpHCttGisY6t9FbTjaw2HoSjRqQf8redyz2TsCYiaJq5qHDMkVNGzP1WM2rjqbpbkVne9yzhqEqSkn\/KNn6k6X2cs6Sf3CVXiSSrvByThVgKxyqbUxU\/527AQ2fh48M+soe3Wy7LKlJUgIlzioMlNLyWqSkUDFq0jV2RiMTVk+ku421fPtM3aNGhBLcyZiEq6afWcbxkimScRUfWWsGxN5aMZaFGF9kr3T0MSzJvLmIZKtOrD1gWCpIAyt6f5h8DAsNcdmqKEpCS14EkpPiIUQz6AAU3wXdJWFilKTbWgi5pMu8pioKugmpa6SRXFqY+9EvdXYUkp2WlrkSYsnEvCXOqSWhylMEtjU+bf9YAVqzkovGlDnw1Hy6RLXC3bU77SXqe7gxrTnnnE3ibniNLIBIKQ4pQkfp5QrHWmTFlBLvVhWofgHG\/drByI72BSDkUqfEOz8QWgBy7A7QUgsUupg7k0o7d1nLM5guy4Cwu1rl75jNnBvJahJA6lukKtR5fSxxaUkKKQU3SMS7uW0of1g5Z2FW8mk+I0kthAGH0pv4MCKnINruxFN9NAyVxG93U72Cn8JPAOORESzBvR5hCzq90jjT1g7rBvx5iiUdU\/zJ+cGwN5e0wvZ\/iT5n0BiWFv1DssMlRSXNMHoDiajgOcMhXm0mjpBxGV0k8hQ8XbrERJcGFJSKKJYA6OSzE\/DrBXMWT4IcVLLd1y9XAxrh5dYNgb3MdsVhXNmIlpHeWpKQ9KqIHxgPJXZFZuyPS5VmTIs89UhP8Ali6k6Alio\/iYPxeKFRRrY+FGppHLvtvPxeXca070cDFR\/m3J92S9e07srsGWZSZs5lBRvJTlT7ytXrTrGLtDHTlWlbXTu5GnKjBU4Uo6R\/LerNdYJgUtCEgBLimTYsAN0Z2Gi6leKlzDVW5Bsf8A2g2lCLK0wqCVLSKc1V3Uj1s6FWst2nr22MqniPh5dIkn25nlc2XZFktMA\/MlvOkc1R2lR0v43O72jhqv3aUX2ZCy9lg1lTB\/CuFltDFQyqxv2xCls2fCUex3FUu1Svv3hosOOohPiMJW+5St1xf6GWzoyzw1ZN8nkwUbVQ\/72Rd\/Eg06RFgKVTOhV7nkx5YjaOFVqibX\/wBLxLbZNolufYzxX7qy1ecV8bg8VJJVY3to0l5oWjtDC8YbrfJ5eDLIWyalRE2V3PeDEcXGEY0sPZZM0I1KUleMl45+DJagySU96WQyknIGmOnpHGLad1k0M0prdkecdqdnGzzm8UtYvSycWeocZg\/A5x7PAYv4mipPVZNHksZhegquJSsDgW4\/MfKLpWzCvFIFBR7p0J3ihwiaEsmNGar3j1MC7GsuQ2owowBgDAmIEOXPIDMCMWUHD6jMHhETsBxTdwJ04qZ2YYABgOAEBtsaMUhkwo4s3Ibh51+MRkiJMLd0Y5neMuXryiBWeYh735vJXyPrxxGo2nYBMqAeR5YeVP4TAYVyEmUAHM88B09TEYVm7iGU3iLbs+mXNoFg73IOYUrreulgCC5dgzgpGgFGg5MVJxytf31kcQp0Hfta\/eNPPjrzht5i9HHkP2mWAiWoBirFuGmA5QWskznGTcmuQNh8YGSqHeMfUDpEjqSp9N+R09RKi+AJAGQAoABwEF6hirIACARsIQRWEIgA0LIqCxhtBbJ5MJM4kMWbQADqwrBuBxSY+B+7fRfqmv8ASInDvE\/n3E6TISoAEUCQetT5mOlkcJSau0TuxyQNo2YDD2yYr4nKnIt4fOSv7yN9Z1kTVIHhJWCMiATi8Ze1\/lxO8td2L77am9hoKpstuWe63bqzKXZ1rWlcyWFMhCyEjQPhwinjqMPlnbNxTfaNgKkpQzfE0mw7Qr20uv3gOrxTwqtXhbmWcQv7Ui9\/aAgKs6Hr3\/8AqqNrGtqMWufqVdmO1Vrmv2eZTLOhvCOkUo4irHOMn4s3vh6NSe7OCa7EVtqsiAHAY8TGpgsfiJ1N2Urru9DN2hszC06blCFn2v1G7DtKalYSJhbQ19Y2MXgqEoOTgr+HkeTjJ3NZPsyCgqKQ7Y4aaR49\/U0bGCxleE1BSduWvmUipCS9BSLVHGV6TSjJ+fmeir4HD1YOU4K\/h5Cfa5ksEIWpI0BLdI9VSo08RTUqsU32I8TiYqlUahkjX9kphVKl3i7hjvo0fPsdCMMROMdE2ejptulFvWxQ9v0D7PJLVE1YB3EYeQ6RqbDb6SoupGdtlK0WYOPRmEcFEYFomgbX1HZqB7NKmqTXLyFIj0An8zRGMKOAYgwJgBBMAIJgDAmAEdGJOiA38qR8YIOHe\/MjGFOgJgBJUoXgHq5rvurQA\/JShzgr3+BHk8vevoNLLISoeJSi5zzw05ROFx0vm3eFiMYQcQxAn\/\/Z)"}}