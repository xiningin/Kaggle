{"cell_type":{"ec7f9641":"code","cc8efc88":"code","0e5e6a02":"code","7c39b898":"code","7c222b57":"code","cc5008d6":"code","779be85c":"code","7faedd10":"code","3c865b19":"code","4482f11a":"code","65f42caf":"code","515bfaad":"code","1b8559d6":"code","9ce35fa9":"code","0128bae9":"code","52576718":"code","6566a852":"code","717d4d7f":"code","2a764921":"code","791aebee":"code","818ec9ab":"code","4ee66951":"code","c45620fa":"code","68e0b188":"code","03a588f1":"code","b4c013d6":"code","baa5b7e8":"code","de9f0c14":"markdown","cbef60b2":"markdown","a4772a9d":"markdown","1180ac90":"markdown","aa875176":"markdown","8ba3ed29":"markdown","62b7ec03":"markdown","42c4ff25":"markdown","17beddc7":"markdown","e0a97f7a":"markdown","290715a0":"markdown","ebcff20a":"markdown","19ea4ce2":"markdown","5248e0fa":"markdown"},"source":{"ec7f9641":"import os\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\n# the basics\nimport pandas as pd, numpy as np, seaborn as sns\n\n# data simulation library\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\n\n# for model evaluation\nfrom sklearn.model_selection import KFold\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","cc8efc88":"# get comp data\ntrain = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_sub = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')","0e5e6a02":"print(train.columns)","7c39b898":"# sneak peak\nprint(train.shape)\nif ~ train.isnull().values.any(): print('No missing values')\ntrain.head()","7c222b57":"# sneak peak\nprint(test.shape)\nif ~ test.isnull().values.any(): print('No missing values')\ntest.head()","cc5008d6":"# sneak peak\nprint(sample_sub.shape)\nif ~ sample_sub.isnull().values.any(): print('No missing values')\nsample_sub.head()","779be85c":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nsns.kdeplot(train['signal_to_noise'], shade=True, ax=ax[0])\nsns.countplot(train['SN_filter'], ax=ax[1])\n\nax[0].set_title('Signal\/Noise Distribution')\nax[1].set_title('Signal\/Noise Filter Distribution');","7faedd10":"print(f\"Samples with signal_to_noise greater than 1: {len(train.loc[(train['signal_to_noise'] > 1)])}\")\nprint(f\"Samples with SN_filter = 1: {len(train.loc[(train['SN_filter'] == 1)])}\")","3c865b19":"# target columns\ntarget_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","4482f11a":"token2int = {x: i for i, x in enumerate('().ACGUBEHIMSX')}","65f42caf":"def preprocess_inputs(df, cols=None):\n    if cols is None:\n        cols = ['sequence', 'structure', 'predicted_loop_type']\n    return np.transpose(\n        np.array(\n            df[cols]\n                .applymap(lambda seq: [token2int[x] for x in seq])\n                .values\n                .tolist()\n        ), (0, 2, 1)\n    )","515bfaad":"train_filtered = train.loc[train.SN_filter == 1]\ntrain_inputs = torch.tensor(preprocess_inputs(train_filtered)).to(device)\nprint(\"input shape: \", train_inputs.shape)\ntrain_labels = torch.tensor(\n    np.array(train_filtered[target_cols].values.tolist()).transpose(0, 2, 1)\n).float().to(device)\nprint(\"output shape: \", train_labels.shape)","1b8559d6":"len(token2int)","9ce35fa9":"class GRU_model(nn.Module):\n    def __init__(\n            self, seq_len=107, pred_len=68, dropout=0.5, embed_dim=100, hidden_dim=128, hidden_layers=3\n    ):\n        super(GRU_model, self).__init__()\n        self.pred_len = pred_len\n\n        self.embeding = nn.Embedding(num_embeddings=len(token2int), embedding_dim=embed_dim)\n        self.gru = nn.GRU(\n            input_size=embed_dim * 3,\n            hidden_size=hidden_dim,\n            num_layers=hidden_layers,\n            dropout=dropout,\n            bidirectional=True,\n            batch_first=True,\n        )\n        self.linear = nn.Linear(hidden_dim * 2, 5)\n\n    def forward(self, seqs):\n        embed = self.embeding(seqs)\n        reshaped = torch.reshape(embed, (-1, embed.shape[1], embed.shape[2] * embed.shape[3]))\n        output, hidden = self.gru(reshaped)\n        truncated = output[:, : self.pred_len, :]\n        out = self.linear(truncated)\n        return out\n\n\nclass LSTM_model(nn.Module):\n    def __init__(\n            self, seq_len=107, pred_len=68, dropout=0.5, embed_dim=100, hidden_dim=128, hidden_layers=3\n    ):\n        super(LSTM_model, self).__init__()\n        self.pred_len = pred_len\n\n        self.embeding = nn.Embedding(num_embeddings=len(token2int), embedding_dim=embed_dim)\n        self.gru = nn.LSTM(\n            input_size=embed_dim * 3,\n            hidden_size=hidden_dim,\n            num_layers=hidden_layers,\n            dropout=dropout,\n            bidirectional=True,\n            batch_first=True,\n        )\n        self.linear = nn.Linear(hidden_dim * 2, 5)\n\n    def forward(self, seqs):\n        embed = self.embeding(seqs)\n        reshaped = torch.reshape(embed, (-1, embed.shape[1], embed.shape[2] * embed.shape[3]))\n        output, hidden = self.gru(reshaped)\n        truncated = output[:, : self.pred_len, :]\n        out = self.linear(truncated)\n        return out\n\n\nmse_loss = nn.MSELoss()\n\n\ndef compute_loss(batch_X, batch_Y, model, optimizer=None, is_train=True):\n    model.train(is_train)\n\n    pred_Y = model(batch_X)\n\n    loss = mse_loss(pred_Y, batch_Y)\n\n    if is_train:\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    return loss.item()","0128bae9":"# basic training configuration\nFOLDS = 4\nEPOCHS = 90\nBATCH_SIZE = 64\nVERBOSE = 2\nLR = 0.01","52576718":"# get different test sets and process each\npublic_df = test.query(\"seq_length == 107\").copy()\nprivate_df = test.query(\"seq_length == 130\").copy()\n\npublic_inputs = torch.tensor(preprocess_inputs(public_df)).to(device)\nprivate_inputs = torch.tensor(preprocess_inputs(private_df)).to(device)\n\npublic_loader = DataLoader(TensorDataset(public_inputs), shuffle=False, batch_size=BATCH_SIZE)\nprivate_loader = DataLoader(TensorDataset(private_inputs), shuffle=False, batch_size=BATCH_SIZE)","6566a852":"gru_histories = []\ngru_private_preds = np.zeros((private_df.shape[0], 130, 5))\ngru_public_preds = np.zeros((public_df.shape[0], 107, 5))\n\nkfold = KFold(FOLDS, shuffle=True, random_state=2020)\n\nfor k, (train_index, val_index) in enumerate(kfold.split(train_inputs)):\n    train_dataset = TensorDataset(train_inputs[train_index], train_labels[train_index])\n    val_dataset = TensorDataset(train_inputs[val_index], train_labels[val_index])\n\n    train_loader = DataLoader(train_dataset, shuffle=True, batch_size=BATCH_SIZE)\n    val_loader = DataLoader(val_dataset, shuffle=False, batch_size=BATCH_SIZE)\n\n    model = GRU_model().to(device)\n    optimizer = optim.Adam(model.parameters(), lr=LR)\n\n    train_losses = []\n    val_losses = []\n    for epoch in tqdm(range(EPOCHS)):\n        train_losses_batch = []\n        val_losses_batch = []\n        for (batch_X, batch_Y) in train_loader:\n            train_loss = compute_loss(batch_X, batch_Y, model, optimizer=optimizer, is_train=True)\n            train_losses_batch.append(train_loss)\n        for (batch_X, batch_Y) in val_loader:\n            val_loss = compute_loss(batch_X, batch_Y, model, optimizer=optimizer, is_train=False)\n            val_losses_batch.append(val_loss)\n        train_losses.append(sum(train_losses_batch) \/ len(train_losses_batch))\n        val_losses.append(sum(val_losses_batch) \/ len(val_losses_batch))\n    model_state = model.state_dict()\n    del model\n\n    gru_histories.append({'train_loss': train_losses, 'val_loss': val_losses})\n\n    gru_short = GRU_model(seq_len=107, pred_len=107).to(device)\n    gru_short.load_state_dict(model_state)\n    gru_short.eval()\n    gru_public_pred = np.ndarray((0, 107, 5))\n    for batch in public_loader:\n        batch_X = batch[0]\n        pred = gru_short(batch_X).detach().cpu().numpy()\n        gru_public_pred = np.concatenate([gru_public_pred, pred], axis=0)\n    gru_public_preds += gru_public_pred \/ FOLDS\n\n    gru_long = GRU_model(seq_len=130, pred_len=130).to(device)\n    gru_long.load_state_dict(model_state)\n    gru_long.eval()\n    gru_private_pred = np.ndarray((0, 130, 5))\n    for batch in private_loader:\n        batch_X = batch[0]\n        pred = gru_long(batch_X).detach().cpu().numpy()\n        gru_private_pred = np.concatenate([gru_private_pred, pred], axis=0)\n    gru_private_preds += gru_private_pred \/ FOLDS\n\n    del gru_short, gru_long","717d4d7f":"print(f\" GRU mean fold validation loss: {np.mean([min(history['val_loss']) for history in gru_histories])}\")","2a764921":"lstm_histories = []\nlstm_private_preds = np.zeros((private_df.shape[0], 130, 5))\nlstm_public_preds = np.zeros((public_df.shape[0], 107, 5))\n\nkfold = KFold(FOLDS, shuffle=True, random_state=2020)\n\nfor k, (train_index, val_index) in enumerate(kfold.split(train_inputs)):\n    train_dataset = TensorDataset(train_inputs[train_index], train_labels[train_index])\n    val_dataset = TensorDataset(train_inputs[val_index], train_labels[val_index])\n\n    train_loader = DataLoader(train_dataset, shuffle=True, batch_size=BATCH_SIZE)\n    val_loader = DataLoader(val_dataset, shuffle=False, batch_size=BATCH_SIZE)\n\n    model = LSTM_model().to(device)\n    optimizer = optim.Adam(model.parameters(), lr=LR)\n\n    train_losses = []\n    val_losses = []\n    for epoch in tqdm(range(EPOCHS)):\n        train_losses_batch = []\n        val_losses_batch = []\n        for (batch_X, batch_Y) in train_loader:\n            train_loss = compute_loss(batch_X, batch_Y, model, optimizer=optimizer, is_train=True)\n            train_losses_batch.append(train_loss)\n        for (batch_X, batch_Y) in val_loader:\n            val_loss = compute_loss(batch_X, batch_Y, model, optimizer=optimizer, is_train=False)\n            val_losses_batch.append(val_loss)\n        train_losses.append(sum(train_losses_batch) \/ len(train_losses_batch))\n        val_losses.append(sum(val_losses_batch) \/ len(val_losses_batch))\n    model_state = model.state_dict()\n    del model\n\n    lstm_histories.append({'train_loss': train_losses, 'val_loss': val_losses})\n\n    lstm_short = LSTM_model(seq_len=107, pred_len=107).to(device)\n    lstm_short.load_state_dict(model_state)\n    lstm_short.eval()\n    lstm_public_pred = np.ndarray((0, 107, 5))\n    for batch in public_loader:\n        batch_X = batch[0]\n        pred = lstm_short(batch_X).detach().cpu().numpy()\n        lstm_public_pred = np.concatenate([lstm_public_pred, pred], axis=0)\n    lstm_public_preds += lstm_public_pred \/ FOLDS\n\n    lstm_long = LSTM_model(seq_len=130, pred_len=130).to(device)\n    lstm_long.load_state_dict(model_state)\n    lstm_long.eval()\n    lstm_private_pred = np.ndarray((0, 130, 5))\n    for batch in private_loader:\n        batch_X = batch[0]\n        pred = lstm_long(batch_X).detach().cpu().numpy()\n        lstm_private_pred = np.concatenate([lstm_private_pred, pred], axis=0)\n    lstm_private_preds += lstm_private_pred \/ FOLDS\n\n    del lstm_short, lstm_long","791aebee":"print(f\" LSTM mean fold validation loss: {np.mean([min(history['val_loss']) for history in lstm_histories])}\")","818ec9ab":"fig, ax = plt.subplots(1, 2, figsize=(20, 10))\n\nfor history in gru_histories:\n    ax[0].plot(history['train_loss'], 'b')\n    ax[0].plot(history['val_loss'], 'r')\nfor history in lstm_histories:\n    ax[1].plot(history['train_loss'], 'b')\n    ax[1].plot(history['val_loss'], 'r')\n\nax[0].set_title('GRU')\nax[1].set_title('LSTM')\n\nax[0].legend(['train', 'validation'], loc='upper right')\nax[1].legend(['train', 'validation'], loc='upper right')\n\nax[0].set_ylabel('Loss')\nax[0].set_xlabel('Epoch')\nax[1].set_ylabel('Loss')\nax[1].set_xlabel('Epoch');","4ee66951":"public_df = test.query(\"seq_length == 107\").copy()\nprivate_df = test.query(\"seq_length == 130\").copy()\n\npublic_inputs = preprocess_inputs(public_df)\nprivate_inputs = preprocess_inputs(private_df)","c45620fa":"preds_gru = []\n\nfor df, preds in [(public_df, gru_public_preds), (private_df, gru_private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=target_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_gru.append(single_df)\n\npreds_gru_df = pd.concat(preds_gru)\npreds_gru_df.head()","68e0b188":"preds_lstm = []\n\nfor df, preds in [(public_df, lstm_public_preds), (private_df, lstm_private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=target_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_lstm.append(single_df)\n\npreds_lstm_df = pd.concat(preds_lstm)\npreds_lstm_df.head()","03a588f1":"blend_preds_df = pd.DataFrame()\nblend_preds_df['id_seqpos'] = preds_gru_df['id_seqpos']\nblend_preds_df['reactivity'] = .5 * preds_gru_df['reactivity'] + .5 * preds_lstm_df['reactivity']\nblend_preds_df['deg_Mg_pH10'] = .5 * preds_gru_df['deg_Mg_pH10'] + .5 * preds_lstm_df['deg_Mg_pH10']\nblend_preds_df['deg_pH10'] = .5 * preds_gru_df['deg_pH10'] + .5 * preds_lstm_df['deg_pH10']\nblend_preds_df['deg_Mg_50C'] = .5 * preds_gru_df['deg_Mg_50C'] + .5 * preds_lstm_df['deg_Mg_50C']\nblend_preds_df['deg_50C'] = .5 * preds_gru_df['deg_50C'] + .5 * preds_lstm_df['deg_50C']","b4c013d6":"submission = sample_sub[['id_seqpos']].merge(blend_preds_df, on=['id_seqpos'])\n\n# sanity check\nsubmission.head()","baa5b7e8":"submission.to_csv('submission.csv', index=False)\nprint('Submission saved')","de9f0c14":"# D. Model\n\nNote that for submission, the output must be the same length as the input, which is 107 for `train.json` and `test.json` and 130 for the private test set. However, this is not true for training, so training prediction sequences only need to be 68 long.\n\nSo actually build 3 different models: one for training, one for predicting public test, and one for predicting private test set, each with different sequence lengths and prediction lengths. Actually, we only need to train one model, save its weights, and load these weights into the other models.\n\nThe last thing to set is the size of the embedding layer. Use 100 for now as a starting point:","cbef60b2":"# E. Training","a4772a9d":"Explore `signal_to_noise` and `SN_filter` distributions. As per the data tab of this competition the samples in `test.json` have been filtered in the following way: [Detail](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/data)\n\n1. Minimum value across all 5 conditions must be greater than -0.5.\n2. Mean signal\/noise across all 5 conditions must be greater than 1.0. [Signal\/noise is defined as mean( measurement value over 68 nts )\/mean( statistical error in measurement value over 68 nts)]\n3. To help ensure sequence diversity, the resulting sequences were clustered into clusters with less than 50% sequence similarity, and the 629 test set sequences were chosen from clusters with 3 or fewer members. That is, any sequence in the test set should be sequence similar to at most 2 other sequences.\n\nBut these filters have not been applied to the samples in `train.json` or the private test set of this competition, so we will likely see public leaderboard improvement by filtering `train.json` the same way that `test.json` was filtered.","1180ac90":"**Just need to change the shape of each sample to long format:**","aa875176":"# **Stanford COVID Vaccine**\n\nOpenVaccine: COVID-19 mRNA Vaccine Degradation Prediction","8ba3ed29":"**Add a simple learning rate callback for now:**","62b7ec03":"## 1. GRU","42c4ff25":"# B. Brief EDA\n\n**Training features are given as follows: [Detail](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/data)**\n\n- **id** - An arbitrary identifier for each sample.\n- **seq_scored** - (68 in Train and Public Test, 91 in Private Test) Integer value denoting the number of positions used in scoring with predicted values. This should match the length of `reactivity`, `deg_*` and `*_error_*` columns. Note that molecules used for the Private Test will be longer than those in the Train and Public Test data, so the size of this vector will be different.\n- **seq_length** - (107 in Train and Public Test, 130 in Private Test) Integer values, denotes the length of `sequence`. Note that molecules used for the Private Test will be longer than those in the Train and Public Test data, so the size of this vector will be different.\n- **sequence** - (1x107 string in Train and Public Test, 130 in Private Test) Describes the RNA sequence, a combination of `A`, `G`, `U`, and `C` for each sample. Should be 107 characters long, and the first 68 bases should correspond to the 68 positions specified in `seq_scored` (note: indexed starting at 0).\n- **structure** - (1x107 string in Train and Public Test, 130 in Private Test) An array of `(`, `)`, and `.` characters that describe whether a base is estimated to be paired or unpaired. Paired bases are denoted by opening and closing parentheses e.g. (....) means that base 0 is paired to base 5, and bases 1-4 are unpaired.\n- **reactivity** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likely secondary structure of the RNA sample.\n- **deg_pH10** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high pH (pH 10).\n- **deg_Mg_pH10** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium in high pH (pH 10).\n- **deg_50C** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high temperature (50 degrees Celsius).\n- **deg_Mg_50C** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium at high temperature (50 degrees Celsius).\n- **`*_error_*`** - An array of floating point numbers, should have the same length as the corresponding `reactivity` or `deg_*` columns, calculated errors in experimental values obtained in `reactivity` and `deg_*` columns.\n- **predicted_loop_type** - (1x107 string) Describes the structural context (also referred to as 'loop type')of each character in `sequence`. Loop types assigned by bpRNA from Vienna RNAfold 2 structure. From the bpRNA_documentation: S: paired \"Stem\" M: Multiloop I: Internal loop B: Bulge H: Hairpin loop E: dangling End X: eXternal loop","17beddc7":"**Add the necessary libraries**","e0a97f7a":"# A. Overview\n\nmRNA vaccines have taken the lead as the fastest vaccine candidates for COVID-19, but currently, they face key potential limitations. One of the biggest challenges right now is how to design super stable messenger RNA molecules (mRNA). Conventional vaccines (like your seasonal flu shots) are packaged in disposable syringes and shipped under refrigeration around the world, but that is not currently possible for mRNA vaccines.","290715a0":"## 2. LSTM","ebcff20a":"# F. Submission","19ea4ce2":"tokenize the RNA sequence so it can be feed in my model:","5248e0fa":"# C. Processing"}}