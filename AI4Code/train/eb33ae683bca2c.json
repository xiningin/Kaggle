{"cell_type":{"d854a695":"code","0ea16782":"code","7b08d8e8":"code","1978bb39":"code","9da27e84":"code","1395778c":"code","2c7bf9b0":"code","be443a33":"markdown"},"source":{"d854a695":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport optuna\nfrom matplotlib import pylab as plt\n%matplotlib inline\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0ea16782":"df = pd.read_csv('..\/input\/airpassengers\/AirPassengers.csv')\ndf","7b08d8e8":"df['#Passengers'] = df['#Passengers'].astype('float64')\ndf = df.rename(columns={'#Passengers': 'Passengers'})\ndf.Month = pd.to_datetime(df.Month)\ndf.head()","1978bb39":"fig, ax = plt.subplots()\na = sns.lineplot(x=\"Month\", y=\"Passengers\", data=df)\nplt.show()","9da27e84":"def objective_variable(train, valid):\n\n    def objective(trial):\n            params = {\n                    'changepoint_range' : trial.suggest_discrete_uniform('changepoint_range', 0.8, 0.95, 0.001),\n                    'n_changepoints' : trial.suggest_int('n_changepoints', 20, 35),\n                    'changepoint_prior_scale' : trial.suggest_discrete_uniform('changepoint_prior_scale',0.001, 0.5, 0.001),\n                    'seasonality_prior_scale' : trial.suggest_discrete_uniform('seasonality_prior_scale',1, 25, 0.1),\n            }\n\n            # fit_model\n            model = Prophet(\n                changepoint_range = params['changepoint_prior_scale'],\n                n_changepoints=params['n_changepoints'],\n                changepoint_prior_scale=params['changepoint_prior_scale'],\n                seasonality_prior_scale = params['seasonality_prior_scale'],\n            )\n\n            model.fit(train)\n            future = model.make_future_dataframe(periods=len(valid))\n\n            forecast = model.predict(future)\n            valid_forecast = forecast.tail(len(valid))\n\n            val_mape = np.mean(np.abs((valid_forecast.yhat-valid.y)\/valid.y))*100\n\n            return val_mape\n\n    return objective\n\ndef optuna_parameter(train, valid):\n    study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=10))\n    study.optimize(objective_variable(train, valid), timeout=500)\n    optuna_best_params = study.best_params\n\n    return study\n\ndf = df.rename(columns={'Month':'ds','Passengers':'y'})\ndf = df[['ds','y']]\ndf_train = df[df['ds'] < '1956-04-01']\ndf_valid = df[(df['ds'] >= '1956-04-01')&(df['ds'] < '1957-04-01')]\ndf_test = df[df['ds'] >= '1957-04-01']\n\nstudy = optuna_parameter(df_train, df_valid)","1395778c":"# fit_model\nbest_model = Prophet(\n    changepoint_range = study.best_params['changepoint_prior_scale'],\n    n_changepoints=study.best_params['n_changepoints'],\n    seasonality_prior_scale = study.best_params['seasonality_prior_scale'],\n    changepoint_prior_scale=study.best_params['changepoint_prior_scale'],\n)\n\nbest_model.fit(df_train)\nfeature_test = best_model.make_future_dataframe(periods=len(df_valid)+len(df_test), freq='M')\n\nforecast_test = best_model.predict(feature_test)\nforecast_test_plot = best_model.plot(forecast_test)","2c7bf9b0":"fig, ax = plt.subplots()\ndf.y.plot(ax=ax, label='Original', linestyle=\"dashed\")\nforecast_test.yhat.plot(ax=ax, label='Predict')\nax.legend()","be443a33":"# AirPassengers Prediction: Prophet with Optuna\nThis notebook reffered to the following article.<br\/>\nhttps:\/\/qiita.com\/DS27\/items\/d539e797f533ebc87419"}}