{"cell_type":{"ee1f563e":"code","fa58be83":"code","6b556d5e":"code","4d6cf79b":"code","bf88aa7f":"code","ced051d3":"code","c30528d5":"code","dfb4485f":"code","f51d2920":"code","fefbf237":"code","99286264":"code","fe1cfaee":"code","22320ce6":"code","57ca300d":"code","e5800126":"code","b9d3ceda":"code","44a0585f":"code","4053ea10":"code","55209f89":"code","1130093c":"code","85427b7a":"code","27cd38c7":"code","157a321d":"code","7baba963":"code","790f76e2":"code","0dd4821e":"code","ed75e8cf":"code","918ab3d9":"code","25dd627b":"code","e0bd2575":"code","6e763883":"code","b9103c19":"code","328a3b6f":"code","8ed783da":"code","a2ddd822":"code","143ba128":"code","e7d58366":"code","8a7d0d42":"code","7088cca6":"code","ac3c8412":"code","5211f942":"code","2afce3e2":"code","20d83bc9":"code","f65cee0b":"code","12cdd8d6":"code","bd13dcae":"code","2a68fa1e":"code","466f055c":"code","f3ed6584":"code","75da8e6a":"markdown","8eef4b58":"markdown","9b208eb4":"markdown","40c27e88":"markdown","051ef05a":"markdown","87ab8ccf":"markdown","33a77e23":"markdown"},"source":{"ee1f563e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa58be83":"veri = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\nveri.head()         #ilk be\u015f veriyi getirir","6b556d5e":"veri.info()          #data frame ile ilgili bilgileri getirir","4d6cf79b":"veri.corr()   #do\u011fru ters orant\u0131 de\u011ferlerini g\u00f6sterir\n#\u00f6rne\u011fin GDP (gayrisafi yurti\u00e7i has\u0131la) ile score de\u011ferini 1'e yak\u0131n yani do\u011fru orant\u0131 de\u011feri y\u00fcksek","bf88aa7f":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(veri.corr(), annot = True, linewidths = .5, fmt = '.1f', ax = ax)\nplt.show()          #burada \u00fcst k\u0131s\u0131mda corr ile ili\u015fkilendirdi\u011fimiz verileri g\u00f6rselle\u015ftirerek ili\u015fkilerini g\u00f6zlemliyoruz","ced051d3":"veri.head(10)","c30528d5":"veri.columns\n#S\u00fctun isimlerini verir. S\u0131ras\u0131yla\n#Genel s\u0131ralama\n#\u00dclke ya da b\u00f6lge\n#Puan\n#Ki\u015fi ba\u015f\u0131na GSY\u0130H\n#Sosyal Destek\n#Sa\u011fl\u0131kl\u0131 ya\u015fam beklentisi\n#Ya\u015fam se\u00e7imleri yapma \u00f6zg\u00fcrl\u00fc\u011f\u00fc\n#C\u00f6mertlik\n#Yolsuzluk alg\u0131lar\u0131","dfb4485f":"#line plot\ngdp = veri[['GDP per capita']]\ngdp.plot(color = 'g', label = 'GDP Per Capital', linewidth = 1, alpha = 0.5, grid = True, linestyle = ':')\nveri['Social support'].plot(color = 'r', label = 'Social Support', linewidth = 1, alpha = 0.5, grid = True, linestyle = ':')\n\nplt.legend(loc = 'upper right') \nplt.xlabel('x axis') \nplt.ylabel('y axis') \nplt.title('Line Plot')\nplt.show()","f51d2920":"#scatter plot\nveri.plot(kind = 'scatter', x= 'Social support', y = 'GDP per capita', alpha = 0.5, color = 'red')\nplt.xlabel('Social')\nplt.ylabel('GDP')\nplt.title('Scatter Plot')\nplt.show()","fefbf237":"#histogram \nveri['Perceptions of corruption'].plot(kind = 'hist', bins = 50, figsize = (12,12))\nplt.show()","99286264":"dictionary = {'istanbul' : 'kad\u0131k\u00f6y', 'izmir' : 'kar\u015f\u0131yaka', 'mu\u011fla' : 'bodrum', 'ankara' : '\u00e7ankaya'}\nprint(dictionary.keys())\nprint(dictionary.values())\ndictionary['istanbul'] = \"taksim\"\ndictionary['bursa'] = \"nil\u00fcfer\"\nprint(dictionary)\ndel dictionary['bursa']\nprint(dictionary)\nprint('ankara' in dictionary)\ndictionary.clear()\nprint(dictionary)","fe1cfaee":"deneme = pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\nseries = deneme['Generosity']\ndata_frame = deneme[['Generosity']]\nprint(type(series))\nprint(type(data_frame))","22320ce6":"print(8 == 6)\nprint(15 > 4)\nprint(True and False)\nprint(True or False)","57ca300d":"x = deneme['Generosity'] > 0.3        #filtreleme\ndeneme[x]","e5800126":"#ayn\u0131 anda 2 filtreleme yapmak i\u00e7in\ndeneme[(deneme['Generosity'] > 0.3) & (deneme['Score'] > 7)]","b9d3ceda":"#ikinci y\u00f6ntem\ndeneme[np.logical_and(deneme['GDP per capita'] > 1.3, deneme['Healthy life expectancy'] > 1)]","44a0585f":"i = 0\nwhile i != 8:\n    if i == 0:\n        print(i,\" ne \u00e7ift ne tek say\u0131d\u0131r\")\n    elif i % 2 == 0:\n        print(i,\" \u00e7ift say\u0131d\u0131r\")\n    else:\n        print(i,\" tek say\u0131d\u0131r\")\n    i=i+1       ","4053ea10":"liste1 = [\"h\",\"a\",\"t\",\"i\",\"c\",\"e\"]\nfor i in liste1:\n    print(i,\" harfi listede\")\nprint(\" \")\nliste2 = [\"h\",\"a\",\"t\",\"i\",\"c\",\"e\"] \nfor index,value in enumerate(liste2):\n    print(value,\" harfinin s\u0131ras\u0131 \",index+1)\nprint(' ')\ndictionary = {'a' : 1, 'b' : 2}\nfor key,value in dictionary.items():\n    print(key,\" harfi alfabede\",value,\". s\u0131rada yer al\u0131r\")\nprint(' ')\nfor index,value in deneme[['Generosity']][0:2].iterrows():\n    print(index,\" : \",value)\nprint(' ')\nfor key,value in dictionary.items():\n    print(\"{} harfinin alfabe s\u0131ras\u0131: {}\".format(key, value))","55209f89":"#user defined function\ndef tuple_or():\n    h = (1,6,2,4)\n    return h\nh,t,c,l = tuple_or()\nprint(h,t,c,l)","1130093c":"#scope\n#global = main body deki de\u011fer\n#local = fonk. i\u00e7indeki de\u011fer\n#built in scope = python i\u00e7indeki fonk.\nx = 2 \ndef fonk():\n    x = 4\n    return x\nprint(x)\nprint(fonk())\n#e\u011fer fonk i\u00e7inde local de\u011fer verilmezse scope de\u011ferine g\u00f6re i\u015flem yap\u0131l\u0131r","85427b7a":"#python i\u00e7indeki fonksiyonlar\u0131 g\u00f6rmek i\u00e7in\nimport builtins\ndir(builtins)","27cd38c7":"#nested func. i\u00e7i\u00e7e fonksiyonlar\ndef once():\n    def sonra():\n        x=6\n        y=x+2\n        return y\n    return sonra()*3\nprint(once())","157a321d":"#default ve flexible func\ndef f(c,h=1,t=0):\n    x=(h*t)+c\n    return x\nprint(f(3))\nprint(f(3,2,1))\nprint(\" \")\ndef f(*args):\n    for i in args:\n        print(i)\nf(3)\nprint(\" \")\nf(1,2,3,4,4)\nprint(\" \")\ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\" : \",value)\nprint(f(ilk = 'a', iki = 'b'))","7baba963":"#lambda func\ncarp = lambda x: x*3\ntop = lambda a,b,c: (a*b)+c\nprint(carp(4))\nprint(top(3,0,1))","790f76e2":"#map func\nliste = [3,4,5]\norn = map(lambda x: x**2,liste)\nprint(list(orn))","0dd4821e":"#iterators\nname = \"hatice\"\nit = iter(name)\nprint(next(it))           #ilk str yi yazd\u0131r\u0131r\nprint(*it)                #geri kalan strleri yazd\u0131r\u0131r\nprint(\" \")\nharf = ['a','b','c']\nsira = [1,2,3]\nz = zip(harf,sira)\nx = list(z)\nprint(z)            #olu\u015fturur\nprint(x)      #liste halinde vermesi i\u00e7in\nprint(\" \")\nun_zip = zip(*x)\nhh,ss = list(un_zip)\nprint(hh)\nprint(ss)\nprint(type(hh))","ed75e8cf":"#list comprehension\nsayi = [1,2,3]\nfonk = [i*2 for i in sayi]\nprint(fonk)\nsayi2 = [38,89,55]\ndef fon():\n    x = print(\"kald\u0131n\u0131z\")\n    return x\ndef fon2():\n    x = print(\"ge\u00e7tiniz\")\n    return x\ndef fon3():\n    x = print(\"pekiyi\")\n    return x\nfonk2 = [i*2 if i<50 else i*10 if 50<i<80 else i**2 for i in sayi2]\nprint(fonk2)","918ab3d9":"ort = sum(deneme['GDP per capita'])\/len(deneme['GDP per capita'])\ndeneme[\"GDP\"] = [\"y\u00fcksek\" if i>ort else \"d\u00fc\u015f\u00fck\" for i in deneme['GDP per capita']]\n\ndeneme[\"GDP\"].tail(10)\n#deneme.loc[:10,[\"GDP\", \"GDP per capita\"]]","25dd627b":"import pandas as pd\ndata= pd.read_csv('\/kaggle\/input\/world-happiness\/2019.csv')\ndata.head()","e0bd2575":"data.tail()","6e763883":"data.columns","b9103c19":"data.shape\n#ka\u00e7a ka\u00e7 oldu\u011funu verir mesela bu dataframe 156 sat\u0131r 9 s\u00fctundan olu\u015fuyormu\u015f","328a3b6f":"data.info()\n#s\u00fctunlar\u0131 ve s\u00fctunlar i\u00e7indeki bilgilerin tipini g\u00f6sterir\n#mesela bu dataframe de hi\u00e7 eksik bilgi yok ","8ed783da":"print(data['Freedom to make life choices'].value_counts(dropna=False))\n#Freedom to make life choices s\u00fctununda hangi de\u011ferden ka\u00e7 tane var sayd\u0131rmak i\u00e7in\n#dropna=False demek e\u011fer NaN (eksik) veri varsa onu g\u00f6sterme demek","a2ddd822":"data.describe()\n#sadece say\u0131sal de\u011ferleri verir\n#%25 Q1\n#%75 Q3\n#%50 Q2 ve median (ortadaki de\u011fer)","143ba128":"import matplotlib.pyplot as plt\ndata.boxplot(column = 'Generosity', by = 'Freedom to make life choices')\nplt.show()","e7d58366":"#tidy data\ndata_yeni = data.head()\ndata_yeni","8a7d0d42":"melted = pd.melt(frame=data_yeni,id_vars='Country or region',value_vars=['Score','Generosity'])\nmelted\n#frame=hangi data setini kullanmak istedi\u011fini belirtirsin,id_vars= hangi s\u00fctunun melt edilmemesini istersen,value_vars=hangi s\u00fctunlar melt edilsin","7088cca6":"#pivoting data melt edilen verileri eski haline getirmek i\u00e7in\nmelted.pivot(index='Country or region',columns='variable',values='value')\n#index=yukar\u0131daki id_vars yerine yazd\u0131\u011f\u0131n\n#columns yukar\u0131daki tabloda variable s\u00fctunundakiler\n#values tablodaki value de\u011ferleri","ac3c8412":"#concatenating data\ndata1=data.head()\ndata2=data.tail()\nconcatdata = pd.concat([data1,data2],axis = 0, ignore_index=True)\nconcatdata\n#axis=0 altalta birle\u015ftirmek i\u00e7in\n#ignore_index=True o verilerin indexlerini g\u00f6rmezden gel yeni indexler ata demek","5211f942":"data1=data['Score'].head()\ndata2=data['Generosity'].head()\nconcat2= pd.concat([data1,data2],axis=1)\nconcat2\n#axis=1 yanyana birle\u015ftir demek","2afce3e2":"#data types\ndata.dtypes","20d83bc9":"#datalar\u0131n tiplerini de\u011fi\u015ftirmek i\u00e7in\ndata['Score']=data['Score'].astype('category')\ndata.dtypes","f65cee0b":"#MISSING DATA and TESTING WITH ASSERT\ndata.info()","12cdd8d6":"#bu tabloda hi\u00e7 NaN de\u011feri yok ama olanlarda bu eksikli\u011fi d\u00fczeltmek gerekmektedir.Bunun i\u00e7in\ndata['Generosity'].value_counts(dropna=False)\n#burada hangi de\u011ferden ka\u00e7 tane var sayd\u0131rd\u0131k ve hi\u00e7 NaN de\u011feri yokmu\u015f.E\u011fer olsayd\u0131 bunu gidermek i\u00e7in","bd13dcae":"data['Generosity'].dropna(inplace=True)\n#burada NaN olanlar\u0131 kald\u0131rd\u0131k","2a68fa1e":"assert data['Generosity'].notnull().all()\n#bu sat\u0131rda assert yard\u0131m\u0131yla NaN olup olmad\u0131\u011f\u0131n\u0131 test ettik\n#kodu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda hi\u00e7bir \u015fey d\u00f6nd\u00fcrmez bu da o s\u00fctunda hi\u00e7 NaN de\u011feri olmad\u0131\u011f\u0131n\u0131 g\u00f6sterir","466f055c":"data['Generosity'].fillna('empty',inplace=True)\n#NaN lar\u0131 empty ile doldur dedik","f3ed6584":"assert data['Generosity'].notnull().all()\n#hi\u00e7bir \u015fey d\u00f6nd\u00fcrmedi yani bir \u00f6nceki kod sat\u0131r\u0131 do\u011fru \u00e7al\u0131\u015fm\u0131\u015f","75da8e6a":"\u00d6DEV 3\ncleaning data","8eef4b58":"Veri g\u00f6rselle\u015ftirme","9b208eb4":"dictionary","40c27e88":"while ve for","051ef05a":"2. \u00d6DEV","87ab8ccf":"pandas","33a77e23":"1. \u00d6DEV"}}