{"cell_type":{"036274d3":"code","947748e2":"code","6e8adf1d":"code","305aacf8":"code","ac7e2c1a":"code","7052e2f3":"code","c5949af0":"code","5d7a1d79":"code","b890bc28":"code","1c2abc4a":"code","138980df":"code","6987e258":"code","e8848b5c":"code","0e7c36e8":"code","d30803be":"code","2f15f575":"code","bed660a7":"code","f27d2b5b":"code","cd7f21cb":"code","ea08fb70":"code","3132826a":"code","ef7b35fa":"code","db737d4b":"code","ca586b02":"code","d5d74093":"code","27587dbd":"code","78f77931":"code","d71dba48":"code","5c8b4905":"code","57cf33f2":"code","07492ef2":"code","8b24df7c":"code","9094b903":"code","fd41e56b":"code","7e10c843":"code","950fb721":"code","d760b6f8":"code","7b396165":"code","12fc7cde":"code","3b179fc4":"code","90a4f8b7":"code","c6171892":"code","be3e4a18":"code","43859878":"code","1e024288":"code","a4545f8f":"code","8a87af38":"code","6461e589":"code","bb291763":"code","abc17323":"code","5fa6f39b":"code","4521f7bd":"code","410b6699":"code","9485e02b":"code","764817ce":"code","399c434e":"code","e5436938":"code","ed765fff":"code","e5b7f582":"code","d5778909":"code","1a0c13b1":"code","d4684af1":"code","9cf7ccea":"code","1b80a2d3":"code","39904f2b":"code","085964b1":"code","ceed15b8":"code","372cfe8e":"code","ca65cf84":"code","49b8e708":"code","057fd8ed":"code","f5cbbe6c":"markdown","ce7ef9ba":"markdown","f5357df0":"markdown","6dc755c5":"markdown","a7e44d42":"markdown","78a12fdd":"markdown","479214fd":"markdown","2e569781":"markdown","7a53f416":"markdown","e0cac56d":"markdown","b0d1bd55":"markdown","cf4b8167":"markdown","b9243289":"markdown","fed73bdc":"markdown","e9d2a710":"markdown","9572be36":"markdown","2bb467ea":"markdown","6012a963":"markdown","698184f0":"markdown","be908371":"markdown","a1cb96a2":"markdown","5ac3fa83":"markdown","6855fa14":"markdown","30700b78":"markdown","de57d175":"markdown","cc5000d2":"markdown","9f3570e7":"markdown","5d48106b":"markdown","81899356":"markdown","322a6e05":"markdown","41e1c176":"markdown","a461d82b":"markdown","c53eecb1":"markdown","b14ca120":"markdown","ad067b89":"markdown","a1eb0975":"markdown","f93b8781":"markdown","6a568895":"markdown","895e0026":"markdown","e3668e02":"markdown","857a08f2":"markdown","a2642b89":"markdown","0c9907de":"markdown","ba8f41b3":"markdown","9558f26e":"markdown","610b951f":"markdown","42a6f0e5":"markdown","13286e46":"markdown","2f6c173e":"markdown","0395a345":"markdown","9b7b1085":"markdown","1d88c76e":"markdown","49643d5c":"markdown","0e736aa8":"markdown","a716c137":"markdown","71e26fc9":"markdown","70305712":"markdown","860ad365":"markdown","077cff39":"markdown","a8ba0f68":"markdown","fbf6a9c0":"markdown"},"source":{"036274d3":"%matplotlib inline\n%load_ext autoreload\n%autoreload 2\n%config InlineBackend.figure_format = 'retina'\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport tensorflow as tf\nfrom math import pi","947748e2":"data_path = \"..\/input\/data.csv\"\ndf = pd.read_csv(data_path)","6e8adf1d":"df.columns","305aacf8":"df.head()","ac7e2c1a":"df.describe()","7052e2f3":"df.info()","c5949af0":"df.isna().sum()","5d7a1d79":"def weight_correction(df):\n    try:\n        value = float(df[:-3])\n    except:\n        value = 0\n    return value\ndf['Weight'] = df.Weight.apply(weight_correction)\n","b890bc28":"df.Weight = pd.to_numeric(df.Weight)","1c2abc4a":"df.Weight = df.Weight.replace(0, np.nan)","138980df":"def value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value'] = df['Value'].apply(value_to_int)\ndf['Wage'] = df['Wage'].apply(value_to_int)\n\ndf.Value = df.Value.replace(0, np.nan)\ndf.Wage = df.Wage.replace(0, np.nan)","6987e258":"df.Weight.isna().sum()","e8848b5c":"df.Weight.mean()","0e7c36e8":"df['Weight'].fillna(df.Weight.mean(), inplace = True)","d30803be":"df.Height.isna().sum()","2f15f575":"plt.figure(figsize = (20, 10))\nsns.countplot(x='Height', data=df)\nplt.show()","bed660a7":"df['Height'].fillna(\"5'11\", inplace = True)","f27d2b5b":"wf_missing = df['Weak Foot'].isna()\nwf_missing.sum()","cd7f21cb":"weak_foot_prob = df['Weak Foot'].value_counts(normalize=True)\nweak_foot_prob","ea08fb70":"df.loc[wf_missing,'Weak Foot'] = np.random.choice(weak_foot_prob.index, size=wf_missing.sum(),p=weak_foot_prob.values)","3132826a":"pf_missing = df['Preferred Foot'].isna()\npf_missing.sum()","ef7b35fa":"df['Preferred Foot'].value_counts()","db737d4b":"foot_distribution = df['Preferred Foot'].value_counts(normalize=True)\nfoot_distribution","ca586b02":"df.loc[pf_missing, 'Preferred Foot'] = np.random.choice(foot_distribution.index, size = pf_missing.sum(), p=foot_distribution.values)\n","d5d74093":"df['Preferred Foot'].value_counts()","27587dbd":"fp_missing = df.Position.isna()\nfp_missing.sum()","78f77931":"position_prob = df.Position.value_counts(normalize=True)\nposition_prob ","d71dba48":"plt.figure(figsize = (20, 10))\nsns.countplot(x=df.Position, data=df)\nplt.show()","5c8b4905":"df.loc[fp_missing, 'Position'] = np.random.choice(position_prob.index, p=position_prob.values, size=fp_missing.sum())","57cf33f2":"fs_missing = df['Skill Moves'].isna()\nfs_missing.sum()","07492ef2":"skill_moves_prob = df['Skill Moves'].value_counts(normalize=True)\nskill_moves_prob","8b24df7c":"df.loc[fs_missing, 'Skill Moves'] = np.random.choice(skill_moves_prob.index, p=skill_moves_prob.values, size=fs_missing.sum())","9094b903":"bt_missing = df['Body Type'].isna()\nbt_missing.sum()","fd41e56b":"bt_prob = df['Body Type'].value_counts(normalize=True)\nbt_prob","7e10c843":"df.loc[bt_missing, 'Body Type'] = np.random.choice(['Normal', 'Lean'], p=[.63,.37], size=bt_missing.sum())","950fb721":"wage_missing = df.Wage.isna()\nwage_missing.sum()","d760b6f8":"wage_prob = df.Wage.value_counts(normalize=True)\nwage_prob","7b396165":"df.loc[wage_missing, 'Wage'] = np.random.choice(wage_prob.index, p=wage_prob.values, size=wage_missing.sum())","12fc7cde":"\nfor feature in df.columns:\n    if df[feature].dtype == 'float64':\n        df[feature].fillna(df[feature].mean(), inplace=True)\n    \ndf['Contract Valid Until'].fillna(np.random.choice(df['Contract Valid Until']), inplace = True)\ndf['Loaned From'].fillna(np.random.choice(df['Loaned From']), inplace = True)\ndf['Joined'].fillna(np.random.choice(df['Joined']), inplace = True)\ndf['Jersey Number'].fillna(np.random.choice(df['Jersey Number']), inplace = True)\ndf['Club'].fillna(np.random.choice(df.Club), inplace = True)\ndf['Work Rate'].fillna(np.random.choice(df['Work Rate']), inplace = True)\ndf['International Reputation'].fillna(np.random.choice(df['International Reputation']), inplace = True)","3b179fc4":"df.fillna(0, inplace = True)","90a4f8b7":"def defending(data):\n    return data[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean().mean()\n\ndef general(data):\n    return data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean().mean()\n\ndef mental(data):\n    return data[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean().mean()\n\ndef passing(data):\n    return data[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean().mean()\n\ndef mobility(data):\n    return data[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean().mean()\ndef power(data):\n    return data[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean().mean()\n\ndef rating(data):\n    return data[['Potential', 'Overall']].mean().mean()\n\ndef shooting(data):\n    return data[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean().mean()","c6171892":"# renaming a column\ndf.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)\n\n# adding these categories to the data\n\ndf['Defending'] = df.apply(defending, axis = 1)\ndf['General'] = df.apply(general, axis = 1)\ndf['Mental'] = df.apply(mental, axis = 1)\ndf['Passing'] = df.apply(passing, axis = 1)\ndf['Mobility'] = df.apply(mobility, axis = 1)\ndf['Power'] = df.apply(power, axis = 1)\ndf['Rating'] = df.apply(rating, axis = 1)\ndf['Shooting'] = df.apply(shooting, axis = 1)","be3e4a18":"players = df[['Name','Defending','General','Mental','Passing',\n                'Mobility','Power','Rating','Shooting','Flag','Age',\n                'Nationality', 'Photo', 'Club_Logo', 'Club']]\n","43859878":"plt.figure(figsize = (20, 10))\nax = sns.countplot(x='Position', data=df, order = df['Position'].value_counts().index)\nax.set_title(label = 'Number of footballers available in each position', fontsize = 20)\nplt.show()","1e024288":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\nfrom math import pi\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(10, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n    \n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1","a4545f8f":"sns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nx = df.Special\nplt.figure(figsize = (12, 8))\nax = sns.distplot(x, bins = 50, kde = False, color = 'm')\nax.set_xlabel(xlabel = 'Special score range', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of the Players',fontsize = 16)\nax.set_title(label = 'Histogram for the Speciality Scores of the Players', fontsize = 20)\nplt.show()","8a87af38":"sns.scatterplot(x = 'Special', y='Wage', data=df)","6461e589":"plt.rcParams['figure.figsize'] = (20, 10)\nskill_df = df[df['Skill Moves'] == 5][['Name','Nationality']]\nsns.countplot(x='Nationality', data=skill_df, order=skill_df.Nationality.value_counts().iloc[:5].index)","bb291763":"import squarify\ndf.Nationality.value_counts().nlargest(5).plot(kind='bar')\n","abc17323":"countries = df.Nationality.value_counts().nlargest(5).index","5fa6f39b":"data_countries = df[df['Nationality'].isin(countries)]","4521f7bd":"plt.rcParams['figure.figsize'] = (12, 7)\n\nax = sns.violinplot(x = data_countries['Nationality'], y = data_countries['Weight'], palette = 'colorblind')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight of players from different countries', fontsize = 20)","410b6699":"import matplotlib.image as mpimg\nimport requests\ndef print_club_flag(clubs):\n    fig = plt.figure(figsize=(10,10))\n    for index, club in enumerate(clubs):\n        logo = df[df['Club'] == club]['Club_Logo'].iloc[0]\n        logo_image = \"img_club_logo.jpg\"\n        logo_flag = requests.get(logo).content\n        with open(logo_image, 'wb') as handler:\n            handler.write(logo_flag)\n        img=mpimg.imread(logo_image)\n        ax = fig.add_subplot(1, 6, index+1, xticks=[], yticks=[])\n        fig.tight_layout()\n        ax.imshow(img, interpolation=\"lanczos\")\n        ax.set_title(\"%d. %s\" %(index+1, club))\n    \ndef print_national_flag(nations):\n    fig = plt.figure(figsize=(10, 10))\n    for index, nation in enumerate(nations):\n        logo = df[df['Nationality'] == nation]['Flag'].iloc[0]\n        logo_image = \"img_nation_logo.jpg\"\n        logo_flag = requests.get(logo).content\n        with open(logo_image, 'wb') as handler:\n            handler.write(logo_flag)\n        img=mpimg.imread(logo_image)\n        ax = fig.add_subplot(1, 6, index+1, xticks=[], yticks=[])\n        fig.tight_layout()\n        ax.imshow(img, interpolation=\"lanczos\")\n        ax.set_title(\"%d. %s\" %(index+1, nation))\n\n","9485e02b":"d = {'Overall': 'Average_Rating'}\nbest_overall_club_df = df.groupby('Club').agg({'Overall':'mean'}).rename(columns=d)\nclubs = best_overall_club_df.Average_Rating.nlargest(5).index\nclubs_list = []\n\nprint_club_flag(clubs)\n","764817ce":"attck_list = ['Shooting', 'Power', 'Passing']\n\nbest_attack_df = players.groupby('Club')[attck_list].sum().sum(axis=1)\nclubs = best_attack_df.nlargest(5).index\n\nprint_club_flag(clubs)","399c434e":"\nbest_defense_df = players.groupby('Club')['Defending'].sum()\nclubs = best_defense_df.nlargest(5).index\nprint_club_flag(clubs)\n\n    ","e5436938":"d = {'Overall': 'Average_Rating'}\nbest_overall_country_df = df.groupby('Nationality').agg({'Overall':'mean'}).rename(columns=d)\nnations = best_overall_country_df.Average_Rating.nlargest(5).index\nprint_national_flag(nations)","ed765fff":"best_3_uae = df[df['Nationality'] == 'United Arab Emirates']['Overall'].nlargest(3)\nprint(best_3_uae)\nuae_df = df[df['Nationality'] == 'United Arab Emirates']\nuae_df[uae_df['Overall'].isin(best_3_uae)]['Name']","e5b7f582":"best_attack_nation_df = players.groupby('Nationality')[attck_list].sum().sum(axis=1)\nnations = best_attack_nation_df.nlargest(5).index\nprint_national_flag(nations)","d5778909":"best_defense_nation_df = players.groupby('Nationality')['Defending'].sum()\nnations = best_defense_nation_df.nlargest(5).index\nprint_national_flag(nations)","1a0c13b1":"import requests\nimport random\nfrom math import pi\n\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import (OffsetImage,AnnotationBbox)\n\ndef details(row, title, image, age, nationality, photo, logo, club):\n    \n    flag_image = \"img_flag.jpg\"\n    player_image = \"img_player.jpg\"\n    logo_image = \"img_club_logo.jpg\"\n        \n    img_flag = requests.get(image).content\n    with open(flag_image, 'wb') as handler:\n        handler.write(img_flag)\n    \n    player_img = requests.get(photo).content\n    with open(player_image, 'wb') as handler:\n        handler.write(player_img)\n     \n    logo_img = requests.get(logo).content\n    with open(logo_image, 'wb') as handler:\n        handler.write(logo_img)\n        \n    r = lambda: random.randint(0,255)\n    colorRandom = '#%02X%02X%02X' % (r(),r(),r())\n    \n    if colorRandom == '#ffffff':colorRandom = '#a5d6a7'\n    \n    basic_color = '#37474f'\n    color_annotate = '#01579b'\n    \n    img = mpimg.imread(flag_image)\n    #flg_img = mpimg.imread(logo_image)\n    \n    plt.figure(figsize=(15,8))\n    categories=list(players)[1:]\n    coulumnDontUseGraph = ['Flag', 'Age', 'Nationality', 'Photo', 'Logo', 'Club']\n    N = len(categories) - len(coulumnDontUseGraph)\n    \n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    \n    ax = plt.subplot(111, projection='polar')\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1], categories, color= 'black', size=17)\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75,100], [\"25\",\"50\",\"75\",\"100\"], color= basic_color, size= 10)\n    plt.ylim(0,100)\n    \n    values = players.loc[row].drop('Name').values.flatten().tolist() \n    valuesDontUseGraph = [image, age, nationality, photo, logo, club]\n    values = [e for e in values if e not in (valuesDontUseGraph)]\n    values += values[:1]\n    \n    ax.plot(angles, values, color= basic_color, linewidth=1, linestyle='solid')\n    ax.fill(angles, values, color= colorRandom, alpha=0.5)\n    axes_coords = [0, 0, 1, 1]\n    ax_image = plt.gcf().add_axes(axes_coords,zorder= -1)\n    ax_image.imshow(img,alpha=0.5)\n    ax_image.axis('off')\n    \n    ax.annotate('Nationality: ' + nationality.upper(), xy=(10,10), xytext=(103, 138),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n                      \n    ax.annotate('Age: ' + str(age), xy=(10,10), xytext=(43, 180),\n                fontsize= 15,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n    \n    ax.annotate('Team: ' + club.upper(), xy=(10,10), xytext=(92, 168),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n\n    arr_img_player = plt.imread(player_image, format='jpg')\n\n    imagebox_player = OffsetImage(arr_img_player)\n    imagebox_player.image.axes = ax\n    abPlayer = AnnotationBbox(imagebox_player, (0.5, 0.7),\n                        xybox=(313, 223),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n    arr_img_logo = plt.imread(logo_image, format='jpg')\n\n    imagebox_logo = OffsetImage(arr_img_logo)\n    imagebox_logo.image.axes = ax\n    abLogo = AnnotationBbox(imagebox_logo, (0.5, 0.7),\n                        xybox=(-320, -226),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n\n    ax.add_artist(abPlayer)\n    ax.add_artist(abLogo)\n\n    plt.title(title, size=50, color= basic_color)","d4684af1":"# defining a polar graph\n\ndef get_id_card(id = 0):\n    if 0 <= id < len(df.ID):\n        details(row = players.index[id], \n                title = players['Name'][id], \n                age = players['Age'][id], \n                photo = players['Photo'][id],\n                nationality = players['Nationality'][id],\n                image = players['Flag'][id], \n                logo = players['Club_Logo'][id], \n                club = players['Club'][id])\n    else:\n        print('The base has 17917 players. You can put positive numbers from 0 to 17917')","9cf7ccea":"best_footballers = df['Overall'].nlargest(5)\nfor index in best_footballers.index:\n    get_id_card(index)","1b80a2d3":"df.loc[df.groupby(df['Position'])['Potential'].idxmax()][['Name', 'Position', 'Overall', 'Age', 'Nationality', 'Club']]","39904f2b":"#### sns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nx = df.Wage\nplt.figure(figsize = (12, 8))\nax = sns.distplot(x, bins = 50, kde = False, color = 'm')\nax.set_xlabel(xlabel = 'Player Wage', fontsize = 16)\nax.set_ylabel(ylabel = 'Player Count',fontsize = 16)\nax.set_title(label = 'Histogram that shows the wage of the Players', fontsize = 20)\nplt.show()","085964b1":"df[df['Wage']>300000][['Name','Age','Wage']]","ceed15b8":"df.groupby('Wage')['Overall'].mean().plot()","372cfe8e":"df.groupby('Age')['Overall'].mean().plot()\n","ca65cf84":"sns.countplot(x='Age', data=df)","49b8e708":"df[df['Age']>40][['Name','Overall','Age','Nationality']]","057fd8ed":"new_wage = df[df['Wage']>10000]\nnew_wage['age_group'] = pd.cut(new_wage.Age, bins=4)\nax = new_wage.boxplot(column='Wage', by='age_group', showmeans=True)\nax.set_xlabel(xlabel = 'Age Group', fontsize = 20)\nax.set_ylabel(ylabel = 'Wage', fontsize = 20)","f5cbbe6c":"### Inference\nThere are a lot of null values on the data\n","ce7ef9ba":"## Nation-level Analysis <a class=\"anchor\" id=\"8.3\"><\/a>","f5357df0":"### Best footballing nations  <a class=\"anchor\" id=\"8.3.1\"><\/a>","6dc755c5":"### Inference\n\n- Skills and wage are not completely positively correlated","a7e44d42":"### Filling Wages","78a12fdd":"## Top 5 footballers <a class=\"anchor\" id=\"8.4\"><\/a>\n\n- This gives a pictorial representation of the top 5 footballers\n- Thanks [Roshan sharma](https:\/\/www.kaggle.com\/roshansharma\/fifa-2019-data-analysis-and-visualization) for the ID card code. Really well done!!!","479214fd":"# Wage Analysis  <a class=\"anchor\" id=\"9\"><\/a>","2e569781":"### Best football clubs  <a class=\"anchor\" id=\"8.2.1\"><\/a>\n\n- Here are the top 5 football clubs w.r.t their overall rating","7a53f416":"- Columns\n- row number\n- IDunique id for every player\n- Namename\n- Ageage\n- Photourl to the player's photo\n- Nationalitynationality\n- Flagurl to players's country flag\n- Overalloverall rating\n- Potentialpotential rating\n- Clubcurrent club\n- Club Logourl to club logo\n- Valuecurrent market value\n- Wagecurrent wage\n- Special\n- Preferred Footleft\/right\n- International Reputationrating on scale of 5\n- Weak Footrating on scale of 5\n- Skill Movesrating on scale of 5\n- Work Rateattack work rate\/defence work rate\n- Body Typebody type of player\n- Real Face\n- Positionposition on the pitch\n- Jersey Numberjersey number\n- Joinedjoined date\n- Loaned Fromclub name if applicable\n- Contract Valid Untilcontract end date\n- Heightheight of the player\n- Weightweight of the player\n- LS rating on scale of 100\n- ST rating on scale of 100\n- RS rating on scale of 100\n- LW rating on scale of 100\n- LF rating on scale of 100\n- CF rating on scale of 100\n- RF rating on scale of 100\n- RW rating on scale of 100\n- LAM rating on scale of 100\n- CAM rating on scale of 100\n- RAM rating on scale of 100\n- LM rating on scale of 100\n- LCM rating on scale of 100\n- CM rating on scale of 100\n- RCM rating on scale of 100\n- RM rating on scale of 100\n- LWB rating on scale of 100\n- LDM rating on scale of 100\n- CDM rating on scale of 100\n- RDM rating on scale of 100\n- RWB rating on scale of 100\n- LB rating on scale of 100\n- LCB rating on scale of 100\n- CB rating on scale of 100\n- RCB rating on scale of 100\n- RB rating on scale of 100\n- Crossing rating on scale of 100\n- Finishing rating on scale of 100\n- HeadingAccuracy rating on scale of 100\n- ShortPassing rating on scale of 100\n- Volleys rating on scale of 100\n- Dribbling rating on scale of 100\n- Curverating on scale of 100\n- FKAccuracy rating on scale of 100\n- LongPassing rating on scale of 100\n- BallControl rating on scale of 100\n- Acceleration rating on scale of 100\n- SprintSpeed rating on scale of 100\n- Agility rating on scale of 100\n- Reactions rating on scale of 100\n- Balance rating on scale of 100\n- ShotPower rating on scale of 100\n- Jumping rating on scale of 100\n- Stamina rating on scale of 100\n- Strength rating on scale of 100\n- LongShots rating on scale of 100\n- Aggression rating on scale of 100\n- Interceptions rating on scale of 100\n- Positioning rating on scale of 100\n- Vision rating on scale of 100\n- Penalties rating on scale of 100\n- Composure rating on scale of 100\n- Marking rating on scale of 100\n- StandingTackle rating on scale of 100\n- SlidingTackle rating on scale of 100\n- GK Diving rating on scale of 100\n- GK Handling rating on scale of 100\n- GK Kicking rating on scale of 100\n- GK Positioning rating on scale of 100\n- GK Reflexes rating on scale of 100\n- Release Clauserelease clause value\n","e0cac56d":"### Filling Skill Moves","b0d1bd55":"### Filling the rest of the valeus\n\n- Since all features that have float64 datatypehas continuos values, we will fill it's Nan values with mean\n- Randomly fill 'Contract Valid Until', 'Work Rate', 'International Reputation' , 'Jersey Number', 'Club', ","cf4b8167":"### Fill the rest of the NaN data with 0","b9243289":"- Since all good and recognized players have good wage, the wage wouldn't be filled only for players who aren't famous\n- The wage distribution says that most of the players have very less wages\n- We should not be filling it with mean because the mean would be really high \n- So the players who are not so famous might get higher wages when compared to others who have the same talent\n- So we would fill the Nan wage columns with the probability distribution of the data","fed73bdc":"# Table of contents\n- [1. Information about the data given](#first-bullet)\n- [2. Importing the packages needed](#second-bullet)\n- [3. Load and prepare the data](#third-bullet)\n- [4. Initial Data Insepction](#fourth-bullet)\n- [5. Data Cleaning](#fifth-bullet)\n    - [5.1 Take out Lbs from Weight](#5.1)\n    - [5.2 Change value and wage to a real number](#5.2)\n    - [5.3 Fill the NaN Values](#5.3)\n    - [5.4 Grouping similar skills together](#5.4)\n- [6. Skills\/Position Analysis](#6)\n    - [6.1 Analyzing top 5 features on all skills](#6.1)\n    - [6.2 More stats on skills and special moves](#6.2)\n- [7. Awards Section](#8)\n    - [7.1 Top footballer producing nations](#8.1)\n        - [7.1.1 Player weight distribution in top 5 footballer producing countries](#8.1.1)\n    - [7.2 Club-level Analysis](#8.2)\n        - [7.2.1 Best football clubs ](#8.2.1)\n        - [7.2.2 Clubs that have the best Attack](#8.2.2)\n        - [7.2.3 Clubs that have the best Defense](#8.2.3)\n    - [7.3 Nation-level Analysis](#8.3)\n        - [7.3.1 Best footballing nations](#8.3.1)\n        - [7.3.2 Nations that has the best Attack](#8.3.2)\n        - [7.3.3 Nations that has the best Defense](#8.3.3)\n    - [7.4 Top 5 footballers](#8.4)\n- [8. Dream Team](#7)\n- [9. Wage Analysis](#9)\n- [10. Age Analysis](#10)\n- [11. Next Steps](#11)","e9d2a710":"### Inference\n- The overall performance of the players dips after 30\n- Let us look at why it has gone up after 43","9572be36":"According to [livestrong data](https:\/\/www.livestrong.com\/article\/207894-the-ideal-weight-for-a-soccer-player\/),\n- The normal weight range for a player 5 feet 9 inches tall is 136 to 169 pounds. \n- Since the mean weight of the player is 165 pounds and it gels with the global data, we could set the mean weight to fill the null values","2bb467ea":"### Fixing Height","6012a963":"## Analyzing top 5 features on all skills <a class=\"anchor\" id=\"6.1\"><\/a>\n","698184f0":"## Top footballer producing nations <a class=\"anchor\" id=\"8.1\"><\/a>","be908371":"# Importing the packages needed <a class=\"anchor\" id=\"second-bullet\"><\/a>","a1cb96a2":"# Awards Section<a class=\"anchor\" id=\"8\"><\/a>\n\n- This section would have the top 5\/ top 3 contibutors for many sections","5ac3fa83":"- Interesting Ideas:\n    - come up with dream team (people who are best in all positions)\n    - Top 3 clubs that are good in 'Attacking' and it's top 3 contributers\n    - Top 3 clubs that are good in 'Defense' and it's top 3 contributers\n    - Best club overall  and it's top 3 contributers\n    - Top 3 nations that has best footballers\n    - Next best player according to wages     \n- How wage and players are related\n- Players who aren't performing after age \n- Come up with Id card that would show person's Skills, team, name, weiht, height, income\n- group subset skills under common skills\n- Which position would a person wanna get trained if he wants to make it quickly?","6855fa14":"- From the data, it's clear that 77% of people are right footed\n- So we will fill the preferred foot in the same probability distributsion","30700b78":"## Change value and wage to a real number<a class=\"anchor\" id=\"5.2\"><\/a>","de57d175":"# Introduction\n\n- This notebook is built to analyze in detail on what all could be done using the data provided about all players.\n- This notebook would have an in-depth analysis of the some of the main data features\n","cc5000d2":"# Next Steps  <a class=\"anchor\" id=\"11\"><\/a>","9f3570e7":"- From the data, it's clear that many positions have different percentage\n- So we will fill the position in the same probability distributsion","5d48106b":"### Inference\n- Looks like the wage is highly skewed\n- Only a handful of people get more than 300,000 Euros","81899356":"## Club-level Analysis <a class=\"anchor\" id=\"8.2\"><\/a>","322a6e05":"### Nations that has the best Attack<a class=\"anchor\" id=\"8.3.2\"><\/a>","41e1c176":"# Skills\/Position Analysis <a class=\"anchor\" id=\"6\"><\/a>","a461d82b":"According to [livestrong data](https:\/\/www.livestrong.com\/article\/207894-the-ideal-weight-for-a-soccer-player\/),\n\n- The height of a player varies according to the position he takes\n- Their average height was 5 feet, 11 1\/2 inches tall\n- We also find from the data given that most people are between 5.9 to 6-1\n- So we would fill the height to 5'11\"","c53eecb1":"# Initial Data Inspection<a class=\"anchor\" id=\"fourth-bullet\"><\/a>","b14ca120":"### Player weight distribution in top 5 footballer producing countries <a class=\"anchor\" id=\"8.1.1\"><\/a>","ad067b89":"- Not sure what how 'Neymar', 'Messi', 'Shaqiri', 'Akinfenwa', 'Courtois' are listed as body types because they are they names of the football players\n- We fill the body types with the same probability distribution of the 'Normal' and 'Lean'","a1eb0975":"### Clubs that have the best Defense  <a class=\"anchor\" id=\"8.2.3\"><\/a>\n- Here are the top 5 clubs that specialize in defense\n- [More on interpolation](https:\/\/matplotlib.org\/gallery\/images_contours_and_fields\/interpolation_methods.html)","f93b8781":"### Number of footballers available in each position","6a568895":"# Load and prepare the data <a class=\"anchor\" id=\"third-bullet\"><\/a>","895e0026":"### Inference\n- There is only a handful of people are there > 40\n- Mr.Perez is surely an outlier and a Mexico's pride!!!","e3668e02":"## Grouping similar skills together<a class=\"anchor\" id=\"5.4\"><\/a>\n\n- Here, we are grouping the skills together and generalizing it to 8 categories\n- These 8 categories would let us know which position that player would take \n- We do this because we could analyze the players better and positon them accordingly","857a08f2":"# Dream Team  <a class=\"anchor\" id=\"7\"><\/a>\n\n- Ever dreamt of a team which would have all your favourite players?\n- This team below has the best players in all positions :) ","a2642b89":"### Filling Body Type","0c9907de":"# Age Analysis  <a class=\"anchor\" id=\"10\"><\/a>","ba8f41b3":"### Inference\n- From the [position graph](#6) and the [skill graph](#6.1) above, we get to know the most important skills that are required for each position\n- This helps:\n    - the management to look out for the right set of skills from each players and to buy players with the skills they are looking for\n    - the to-be professionals to understand which skill they need to develop in order to get the position they need","9558f26e":"- From this we could clearly find that majority of the players would have weak foot rating as 3\n- We will also fill the Foot with the same probability distribution","610b951f":"## Fill the Nan Values  <a class=\"anchor\" id=\"5.3\"><\/a>\n- We will try to fill everything with some logic behind it","42a6f0e5":"### Inference\n- It's very evident that the wage is getting higher only for star performers","13286e46":"## Information about the data given<a class=\"anchor\" id=\"first-bullet\"><\/a>","2f6c173e":"## Top 5 nations that have the best skilled footballers","0395a345":"### Inference\n\n- Players Are In High Demand In Their Mid-20s","9b7b1085":"### Filling Position","1d88c76e":"### Nations that has the best Defense<a class=\"anchor\" id=\"8.3.3\"><\/a>","49643d5c":"### Clubs that have the best Attack <a class=\"anchor\" id=\"8.2.2\"><\/a>\n- Here are the top 5 clubs that specialize in attack","0e736aa8":"## Take out Lbs from Weight  <a class=\"anchor\" id=\"5.1\"><\/a>","a716c137":"# Data Cleaning <a class=\"anchor\" id=\"fifth-bullet\"><\/a>","71e26fc9":"- This section would involve some more analysis predictions like:\n    - Who would be the next big star?\n    - What all would contribute to get a better salary?\n    - Please comment on which predctions\/analysis would you need","70305712":"## More stats on skills and special moves <a class=\"anchor\" id=\"6.2\"><\/a>","860ad365":"- We could fill the nan valeus with the same probability distribution","077cff39":"### Fixing Weight","a8ba0f68":"### Fixing Preferred Foot","fbf6a9c0":"### Fixing Weak Foot Rating"}}