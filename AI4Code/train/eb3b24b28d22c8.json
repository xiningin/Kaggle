{"cell_type":{"986eba24":"code","4ab50e07":"code","67813632":"code","b35a6809":"code","0fe1e1ad":"code","2ca8ab34":"code","1fa8db37":"code","ef5f04a1":"code","75a2ba68":"code","6e9bd316":"code","1907f1a3":"code","8e69c840":"code","8658bc10":"code","2c6d24bc":"code","1b772935":"code","3b50f7af":"code","2a13918e":"code","42a34991":"code","5b5805aa":"code","f4b8b4db":"code","13ff9318":"code","41c54479":"code","eef23a15":"code","54796457":"code","eef81726":"code","e5935e86":"code","c07aa5aa":"code","6c155e57":"code","aef1714b":"code","416368ee":"code","57a7f8f7":"code","394e3978":"code","17d15c6a":"code","0d4a7c03":"markdown","11e06333":"markdown","e5ce41b5":"markdown","95121d74":"markdown","447fe279":"markdown","05749c3b":"markdown","5b0cb8d3":"markdown","23be9b13":"markdown","5c9c96fa":"markdown","75a09fde":"markdown","e60d8d84":"markdown","a47cba25":"markdown","3c6f4459":"markdown","82a2fb1a":"markdown","489e9ea8":"markdown","ec9ebdea":"markdown","872c64a1":"markdown","7bbaa890":"markdown","eb7b1f4f":"markdown"},"source":{"986eba24":"import numpy as np\nimport pandas as pd","4ab50e07":"calendar = pd.read_csv(\"..\/input\/calendar.csv\")\ncalendar.head()","67813632":"calendar.info()","b35a6809":"listing = pd.read_csv(\"..\/input\/listings.csv\")\nlisting.head(1)","0fe1e1ad":"reviews = pd.read_csv(\"..\/input\/reviews.csv\")\nreviews.head()","2ca8ab34":"df_listing = listing[listing.applymap(np.isreal)]\ndf_listing.dropna(how = \"all\", axis = 1, inplace = True)\ndf_listing.head()","1fa8db37":"df_listing.fillna(listing.mean(), inplace = True)\ndf_listing.drop([\"latitude\", \"longitude\"], axis = 1, inplace= True)\ndf_listing.head()","ef5f04a1":"calendar.head()","75a2ba68":"calendar[\"price\"] = calendar[\"price\"].apply(lambda x: str(x).replace(\"$\", \"\"))\ncalendar[\"price\"] = pd.to_numeric(calendar[\"price\"] , errors=\"coerce\")\ndf1  = calendar.groupby(\"date\")[[\"price\"]].sum()\ndf1[\"mean\"]  = calendar.groupby(\"date\")[[\"price\"]].mean()\ndf1.columns = [\"Total\", \"Average\"]\ndf1.head()","6e9bd316":"df2 = calendar.set_index(\"date\")\ndf2.index = pd.to_datetime(df2.index)\ndf2 =  df2[[\"price\"]].resample(\"M\").mean()\ndf2.head()","1907f1a3":"import plotly as py\nfrom plotly.offline import iplot, plot, init_notebook_mode, download_plotlyjs\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport plotly.offline as offline","8e69c840":"trace1 = go.Scatter(\n    x = df1.index,\n    y = df1[\"Total\"]\n)\ndata = [trace1]\nlayout = go.Layout(\n    title = \"Price by each time\",\n    xaxis  = dict(title = \"Time\"),\n    yaxis = dict(title = \"Total ($)\")\n)\ntrace2 = go.Scatter(\n    x = df1.index,\n    y = df1[\"Average\"]\n)\n\ndata2 = [trace2]\nlayout2 = go.Layout(\n    title = \"Price by each time\",\n    xaxis  = dict(title = \"Time\"),\n    yaxis = dict(title = \"Mean ($)\")\n)\nfig = go.Figure(data = data, layout = layout)\nfig2 = go.Figure(data = data2, layout = layout2)\noffline.iplot(fig)","8658bc10":"offline.iplot(fig2)","2c6d24bc":"trace3 = go.Scatter(\n    x = df2.index[:-1],\n    y = df2.price[:-1]\n)\nlayout3 = go.Layout(\n    title = \"Average price by month\",\n    xaxis = dict(title = \"time\"),\n    yaxis = dict(title = \"Price\")\n)\ndata3 = [trace3]\nfig3 = go.Figure(data= data3, layout= layout3)\noffline.iplot(fig3)","1b772935":"from statsmodels.tsa.seasonal import seasonal_decompose","3b50f7af":"def draw_interactive_graph(mode):\n    df1.index = pd.to_datetime(df1.index)\n    decomposition = seasonal_decompose(df1[[mode]])\n    trace4_1 = go.Scatter(\n        x = decomposition.observed.index, \n        y = decomposition.observed[mode],\n        name = \"Observed\"\n    )\n    trace4_2 = go.Scatter(\n        x = decomposition.trend.index,\n        y = decomposition.trend[mode],\n        name = \"Trend\"\n    )\n    trace4_3 = go.Scatter(\n        x = decomposition.seasonal.index,\n        y = decomposition.seasonal[mode],\n        name = \"Seasonal\"\n    )\n    trace4_4 = go.Scatter(\n        x = decomposition.resid.index,\n        y = decomposition.resid[mode],\n        name = \"Resid\"\n    )\n\n    fig = py.tools.make_subplots(rows=4, cols=1, subplot_titles=('Observed', 'Trend',\n                                                              'Seasonal', 'Residiual'))\n    # append trace into fig\n    fig.append_trace(trace4_1, 1, 1)\n    fig.append_trace(trace4_2, 2, 1)\n    fig.append_trace(trace4_3, 3, 1)\n    fig.append_trace(trace4_4, 4, 1)\n\n    fig['layout'].update( title='Descompose with TimeSeri')\n    offline.iplot(fig)","2a13918e":"draw_interactive_graph(\"Average\")","42a34991":"draw_interactive_graph(\"Total\")","5b5805aa":"def loc_city(x):\n    if \",\" not in str(x):\n        return x\n    if \"live\" in str(x) or \"Next door to\" in str(x) or \"live\" in str(x) or \"having\" in str(x):\n        return \"USA\"\n    return str(x).split(\",\")[0]\na = listing[\"host_location\"].apply(lambda x: loc_city(x))","f4b8b4db":"df_listing[\"City\"]  = a\ndf_listing.head(1)","13ff9318":"df_seattle = df_listing[df_listing[\"City\"] == \"Seattle\"]\ndf_seattle.head()","41c54479":"calendar_clean = calendar.dropna()\ncalendar_clean.set_index(\"date\", inplace = True)\ncalendar_clean.head()","eef23a15":"calendar_clean.index = pd.to_datetime(calendar_clean.index)\nnumber_hire_room = calendar_clean.resample(\"M\")[[\"price\"]].count()\ntotal_price_each_month  = calendar_clean.resample(\"M\")[[\"price\"]].sum()","54796457":"trace5 = go.Scatter(\n    x = number_hire_room.index[:-1],\n    y = number_hire_room.price[:-1]\n)\ndata5 = [trace5]\nlayout5 = go.Layout(\n    title = \"Number of Hire Room by Month in Seattle\",\n    xaxis = dict(title = \"Month\"),\n    yaxis = dict(title = \"Number hirde\")\n)\nfig5  = go.Figure(data = data5, layout = layout5)","eef81726":"trace6 = go.Scatter(\n    x = number_hire_room.index[:-1],\n    y = number_hire_room.price[:-1]\/number_hire_room.price[0]\n)\ndata6 = [trace6]\nlayout6 = go.Layout(\n    title = \"the ratio of the number of rooms compare with the first month\",\n    xaxis = dict(title = \"Month\"),\n    yaxis = dict(title = \"Ratio\")\n)\nfig6 = go.Figure(data = data6, layout = layout6)","e5935e86":"offline.iplot(fig5)","c07aa5aa":"offline.iplot(fig6)","6c155e57":"from scipy import stats","aef1714b":"a = calendar_clean.index.month\n# calendar_clean[\"Month\"] = a\ncalendar_clean = calendar_clean.assign(Month = a)\ncalendar_clean.head()","416368ee":"result = []\nfor i in range(1,13):\n    result.append(np.array([calendar_clean[calendar_clean[\"Month\"] == i].price]))","57a7f8f7":"data_score = []\nfor i in range(11):\n    score = stats.ttest_rel(result[i][0][:64911],result[-1][0][:64911])\n    data_score.append((score[0], score[1]))","394e3978":"score_board = pd.DataFrame(data = data_score, columns = [\"Test Statistic\", \"P_value\"])\nscore_board[\"Month\"] = range(1, 12)\nscore_board.set_index(\"Month\", inplace = True)\nscore_board","17d15c6a":"offline.iplot(fig3)","0d4a7c03":"**QUESTION**","11e06333":"**Using statistic test to test number visitor**","e5ce41b5":"1. ***Selection***","95121d74":"3. **Transformation**","447fe279":"\n****","05749c3b":"4. **Visualization**","5b0cb8d3":"**PREDICTIVE ANALYTICS**","23be9b13":"2. ****Preprocessing**** ","5c9c96fa":"**PRESCRIPTIVE ANALYTIS**","75a09fde":"3. Is there a general upward trend of both new Airbnb listings and total Airbnb visitors to Seattle?","e60d8d84":"5.** Time series stationarity and using statistic test**","a47cba25":"> Loc numberic columns for Selection","3c6f4459":"* **DESCRIPTIVE ANALYTIS & DIAGNOSTIC ANALYTICS**\n","82a2fb1a":"**DATA AND INFO DATA**","489e9ea8":"2. What are the busiest times of the year to visit Seattle? By how much do prices spike?","ec9ebdea":"1. Can you describe the vibe of each Seattle neighborhood using listing descriptions?","872c64a1":"Fill NAN and relace them by mean","7bbaa890":"As we can see,\n\nIn figure 5, there are graph show number of visting by each month.\n\nThere are high in March, May, October,November and December.\n\nAnd lower in April, June, July, August, Septemper.\n\nIn figure 6, there are graph show ration of hiring room by each month compare with January.\n\n","eb7b1f4f":"Using  Paired sample t-test compares means from the same group at different times.\nIn this case, i compare January to November with December.\n* H0 : Mean of December > Mean of other month.\n* H1 : Mean of December < Mean of other month\n\nWe can see that, every p_value is smaller 0.05 too.\nSo H0 is true and we can conclude : Number of visitor in December is really high compare with other month."}}