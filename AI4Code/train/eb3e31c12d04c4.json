{"cell_type":{"6755f204":"code","06ed6db7":"code","775cab30":"code","21a187cb":"code","d95abe6c":"code","cc869412":"markdown","2fa66040":"markdown","c7b0a6eb":"markdown"},"source":{"6755f204":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","06ed6db7":"import numpy as np\nimport pandas as pd\nfrom IPython.display import display, HTML, Markdown\n        \nKAGGLE_BASE_URL = \"https:\/\/www.kaggle.com\/\"\n\n# medal images\nbronze = 'https:\/\/kaggle.com\/static\/images\/medals\/notebooks\/bronzes@1x.png'\nsilver = 'https:\/\/kaggle.com\/static\/images\/medals\/notebooks\/silvers@1x.png'\ngold = 'https:\/\/kaggle.com\/static\/images\/medals\/notebooks\/golds@1x.png'\n\n# avatiers\nnovice = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-novice@2x.png'\ncontributor = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-contributor@2x.png'\nexpert = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-expert@2x.png'\nmaster = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-master@2x.png'\ngrandmaster = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-grandmaster@2x.png'\nkaggle_staff = 'https:\/\/kaggle.com\/static\/images\/avatier\/avatier-staff@2x.png'","775cab30":"kernels = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Kernels.csv', \n                      parse_dates=['CreationDate', 'MadePublicDate', 'MedalAwardDate'],\n                      infer_datetime_format=True\n                     )\nkernel_versions = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersions.csv', \n                              parse_dates=['CreationDate'],\n                              infer_datetime_format=True\n                             )\nkernel_votes = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVotes.csv', \n                           parse_dates=['VoteDate'], infer_datetime_format=True\n                          )\n\nusers = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Users.csv',\n                    parse_dates=['RegisterDate'], \n                    infer_datetime_format=True\n                   )","21a187cb":"username = 'sahidvelji'\n\nMOST_RECENT_FIRST = True\nINCLUDE_SELF_VOTES = True\nNUM_RESULTS = 20","d95abe6c":"userid = users.loc[users['UserName'].eq(username), 'Id'].item()\ndisplayname = users.loc[users['UserName'].eq(username), 'DisplayName'].item()\n\ndf = (kernel_votes\n      .loc[kernel_votes['UserId'].eq(userid), ['KernelVersionId', 'VoteDate']]\n      .merge(kernel_versions[['Id', 'ScriptId']], left_on='KernelVersionId', right_on='Id')\n      .merge(kernels[['Id', 'AuthorUserId', 'CurrentUrlSlug', 'CurrentKernelVersionId', 'Medal', 'TotalComments', 'TotalVotes']], left_on='ScriptId', right_on='Id')\n      .merge(users, left_on='AuthorUserId', right_on='Id')\n      .merge(kernel_versions[['Id', 'Title']], left_on='CurrentKernelVersionId', right_on='Id')\n      .loc[:, ['VoteDate', 'CurrentUrlSlug', 'Title', 'UserName', 'DisplayName', 'PerformanceTier', 'Medal', 'TotalComments', 'TotalVotes']]\n      .sort_values('VoteDate', ascending=not MOST_RECENT_FIRST)\n     )\n\nif not INCLUDE_SELF_VOTES:\n    df = df[df['UserName'].ne(username)]\ndf = df.head(NUM_RESULTS)\n\ndf.loc[df['Medal'].eq(1), 'Medal'] = f'<img style=\"float:left;padding-right:2px\" src=\"{gold}\">'\ndf.loc[df['Medal'].eq(2), 'Medal'] = f'<img style=\"float:left;padding-right:2px\" src=\"{silver}\">'\ndf.loc[df['Medal'].eq(3), 'Medal'] = f'<img style=\"float:left;padding-right:2px\" src=\"{bronze}\">'\ndf['Medal'] = df['Medal'].fillna('')\n\ndf.loc[df['PerformanceTier'].eq(0), 'PerformanceTier'] = f'<img src=\"{novice}\">'\ndf.loc[df['PerformanceTier'].eq(1), 'PerformanceTier'] = f'<img src=\"{contributor}\">'\ndf.loc[df['PerformanceTier'].eq(2), 'PerformanceTier'] = f'<img src=\"{expert}\">'\ndf.loc[df['PerformanceTier'].eq(3), 'PerformanceTier'] = f'<img src=\"{master}\">'\ndf.loc[df['PerformanceTier'].eq(4), 'PerformanceTier'] = f'<img src=\"{grandmaster}\">'\ndf.loc[df['PerformanceTier'].eq(5), 'PerformanceTier'] = f'<img src=\"{kaggle_staff}\">'\n\ndf['URL'] = df['Medal'] + f'<a href=\"{KAGGLE_BASE_URL}' + df['UserName'] + '\/' + df['CurrentUrlSlug'] + '\">' + df['Title'] + '<\/a>'\ndf['User'] = f'<a href=\"{KAGGLE_BASE_URL}' + df['UserName'] + '\">' + df['DisplayName'] + '<\/a>' + df['PerformanceTier']\n\ncolumns = ['VoteDate', 'TotalVotes', 'User', 'URL', 'TotalComments']\ndf = df.reindex(columns=columns)\n\ndisplay(Markdown(f'# Notebooks upvoted by {displayname}'))\n\nHTML(df\n     .to_html(escape=False, index=False)\n     .replace('<td>', '<td style=\"text-align:left\">')\n    )","cc869412":"To use this notebook:\n1. Fork this notebook by clicking on `Copy and Edit`.\n1. Set the username variable to your own username.\n1. Select sorting and filtering options below and run the notebook.","2fa66040":"# Your favourite notebooks sorted by date upvoted","c7b0a6eb":"Since there is currently no option to sort notebooks by date upvoted in the \"Favorites\" tab, I decided that it wouldn't take long for me to implement this using [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle)."}}