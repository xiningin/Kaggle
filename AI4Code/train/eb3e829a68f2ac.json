{"cell_type":{"46889cdc":"code","8844aa0e":"code","6d51d061":"code","aa64e8f9":"code","67402482":"code","5d6e466c":"code","2cb7f4de":"code","42501c65":"code","a9b4799a":"code","2bf43aa4":"code","babf9417":"code","45f6f955":"code","245632ba":"code","b72db82d":"code","4f405ee9":"code","3ac223ff":"code","5e0019ab":"code","d280246a":"code","675031d6":"code","24c16e34":"code","29dfc7e5":"code","1f1042be":"code","2ded07ce":"code","cc97cfb1":"code","a6705cce":"code","fc3fcba1":"code","947ac72a":"code","c0ea8b87":"code","256c9bf8":"code","d292a93f":"code","510d5d9f":"code","47a51468":"code","d4296092":"code","ad399393":"code","77729142":"code","f4471d8d":"code","9d786e00":"code","40e6501c":"code","211f295a":"code","14dc9013":"code","fd34b0ba":"code","d6adf48d":"code","1465e891":"code","8a078ef4":"code","e027fb09":"code","a0f066dc":"code","10996d02":"code","dcf8a795":"code","709ba4f7":"code","af125678":"code","85104ac2":"code","766176f5":"code","0b626b46":"code","081cc928":"code","aec1c28c":"code","eeee6694":"code","620657e7":"code","518cf02d":"code","8d97c91c":"code","333e6041":"code","9b9867db":"code","1c3ea25b":"code","2866f720":"code","471bda08":"code","aded5a6b":"code","9779ad57":"code","378f0ba5":"code","d64f61d6":"code","51a8d141":"code","3bbd9a25":"code","d094acd4":"code","f7943374":"code","1bd57e37":"code","dbfdf169":"code","ee5b3f05":"markdown","5560bbe5":"markdown","ff6339e7":"markdown","45f9f471":"markdown","ef75f870":"markdown","c9c1c404":"markdown","f84eba66":"markdown","6fcef3bc":"markdown","23db0aa5":"markdown","494b82a6":"markdown","dd0ea5df":"markdown","16ef01d4":"markdown","6cb82dfd":"markdown","d57ade52":"markdown","96d681c9":"markdown","2f495edc":"markdown","bde9cd8d":"markdown","961983f0":"markdown","ac08a9b3":"markdown","b30054e1":"markdown","3eda64cb":"markdown","ebdb5572":"markdown","2456837e":"markdown","a5d3bc7d":"markdown","3d5567ba":"markdown","e47450c3":"markdown","7b079359":"markdown","680970da":"markdown","42367b29":"markdown","fca2f83d":"markdown","5f59688b":"markdown","2ba0ad08":"markdown"},"source":{"46889cdc":"import warnings\nwarnings.simplefilter('ignore')","8844aa0e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6d51d061":"pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)","aa64e8f9":"train = pd.read_csv('..\/input\/disease-prediction-using-machine-learning\/Training.csv')","67402482":"test = pd.read_csv('..\/input\/disease-prediction-using-machine-learning\/Testing.csv')","5d6e466c":"train.sample(10)","2cb7f4de":"train.shape","42501c65":"train.columns","a9b4799a":"train.info(verbose=True, null_counts=True)","2bf43aa4":"train.describe()","babf9417":"train.drop('Unnamed: 133', axis=1, inplace=True)","45f6f955":"train.isnull().sum().any()","245632ba":"duplicate_rows = train[train.duplicated()]\nduplicate_rows.shape[0]","b72db82d":"train.drop_duplicates(inplace=True)\ntrain.shape[0]","4f405ee9":"train['prognosis'].unique()","3ac223ff":"plt.figure(figsize = (10, 12))\ncountplot = sns.countplot(y='prognosis', data=train)\nplt.show()","5e0019ab":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ntrain['prognosis'] = encoder.fit_transform(train['prognosis'])","d280246a":"test.sample(10)","675031d6":"test.shape","24c16e34":"test.isnull().sum().any()","29dfc7e5":"duplicate_rows = test[test.duplicated()]\nduplicate_rows.shape[0]","1f1042be":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ntest['prognosis'] = encoder.fit_transform(test['prognosis'])","2ded07ce":"X_train = train.drop('prognosis', axis=1)\ny_train = train['prognosis']","cc97cfb1":"X_test = test.drop('prognosis', axis=1)\ny_test = test['prognosis']","a6705cce":"from sklearn.feature_selection import VarianceThreshold\nconst_filter = VarianceThreshold(threshold=0)\nconst_filter.fit(X_train)","fc3fcba1":"# Number of features left -\nconst_filter.get_support().sum()","947ac72a":"const_list = const_filter.get_support()\nX_train.columns[const_list]","c0ea8b87":"X_train_filter = const_filter.transform(X_train)\nX_test_filter = const_filter.transform(X_test)","256c9bf8":"X_train_filter.shape","d292a93f":"X_train_T = X_train_filter.T\nX_test_T = X_test_filter.T","510d5d9f":"X_train_T = pd.DataFrame(X_train_T)\nX_test_T = pd.DataFrame(X_test_T)","47a51468":"X_train_T.shape","d4296092":"# Number of duplicate features\nX_train_T.duplicated().sum()","ad399393":"duplicate_features = X_train_T.duplicated()\nnon_duplicate_feat = [not feat for feat in duplicate_features]","77729142":"X_train_unique = X_train_T[non_duplicate_feat].T\nX_test_unique = X_test_T[non_duplicate_feat].T","f4471d8d":"X_train_unique.shape","9d786e00":"plt.figure(figsize = (18, 10))\ncormat = sns.heatmap(X_train_unique.corr(method='spearman'), center=0.0, linecolor='k')\ncormat.set_title('Correlation Matrix')\nplt.show()","40e6501c":"def get_corr(data, threshold):\n    corr_col = set() # Set of names of all correlated columns\n    cormat = data.corr()\n    for i in range(len(cormat.columns)):\n        for j in range(i):\n            if abs(cormat.iloc[i, j])>threshold:\n                col_name = cormat.columns[i]\n                corr_col.add(col_name)\n    return corr_col","211f295a":"corr_features = get_corr(X_train_unique, 0.90)\nlen(corr_features)","14dc9013":"X_train_uncorr = X_train_unique.drop(labels=corr_features, axis=1)\nX_test_uncorr = X_test_unique.drop(labels=corr_features, axis=1)","fd34b0ba":"X_train_uncorr.shape","d6adf48d":"X_train_final = X_train_uncorr\nX_test_final = X_test_uncorr","1465e891":"from sklearn.metrics import accuracy_score, roc_auc_score, f1_score, multilabel_confusion_matrix","8a078ef4":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train_final, y_train)","e027fb09":"lr_train = accuracy_score(y_train, lr.predict(X_train_final))\nlr_test = accuracy_score(y_test, lr.predict(X_test_final))\nprint(\"Train accuracy :{:.2f}\".format(lr_train))\nprint(\"Test accuracy :{:.2f}\".format(lr_test))","a0f066dc":"y_pred_lr = lr.predict(X_test_final)\ny_pred_proba_lr = lr.predict_proba(X_test_final)","10996d02":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_lr, multi_class='ovr')))","dcf8a795":"f1_score(y_test, y_pred_lr, average=None)","709ba4f7":"multilabel_confusion_matrix(y_test, y_pred_lr)","af125678":"from sklearn.svm import SVC\nsvc = SVC(probability=True)\nsvc.fit(X_train_final, y_train)","85104ac2":"svc_train = accuracy_score(y_train, svc.predict(X_train_final))\nsvc_test = accuracy_score(y_test, svc.predict(X_test_final))\nprint(\"Train accuracy :{:.2f}\".format(svc_train))\nprint(\"Test accuracy :{:.2f}\".format(svc_test))","766176f5":"y_pred_svc = svc.predict(X_test_final)\ny_pred_proba_svc = svc.predict_proba(X_test_final)","0b626b46":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_svc, multi_class='ovr')))","081cc928":"f1_score(y_test, y_pred_svc, average=None)","aec1c28c":"multilabel_confusion_matrix(y_test, y_pred_svc)","eeee6694":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(X_train_final, y_train)","620657e7":"dt_train = accuracy_score(y_train, dt.predict(X_train_final))\ndt_test = accuracy_score(y_test, dt.predict(X_test_final))\nprint(\"Train accuracy :{:.2f}\".format(dt_train))\nprint(\"Test accuracy :{:.2f}\".format(dt_test))","518cf02d":"y_pred_dt = dt.predict(X_test_final)\ny_pred_proba_dt = dt.predict_proba(X_test_final)","8d97c91c":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_dt, multi_class='ovr')))","333e6041":"f1_score(y_test, y_pred_dt, average=None)","9b9867db":"multilabel_confusion_matrix(y_test, y_pred_dt)","1c3ea25b":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train_final, y_train)","2866f720":"knn_train = accuracy_score(y_train, knn.predict(X_train_final))\nknn_test = accuracy_score(y_test, knn.predict(X_test_final))\nprint(\"Train accuracy :{:.2f}\".format(knn_train))\nprint(\"Test accuracy :{:.2f}\".format(knn_test))","471bda08":"y_pred_knn = knn.predict(X_test_final)\ny_pred_proba_knn = knn.predict_proba(X_test_final)","aded5a6b":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_knn, multi_class='ovr')))","9779ad57":"f1_score(y_test, y_pred_knn, average=None)","378f0ba5":"multilabel_confusion_matrix(y_test, y_pred_knn)","d64f61d6":"from sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(X_train_final, y_train)","51a8d141":"nb_train = accuracy_score(y_train, nb.predict(X_train_final))\nnb_test = accuracy_score(y_test, nb.predict(X_test_final))\nprint(\"Train accuracy :{:.2f}\".format(nb_train))\nprint(\"Test accuracy :{:.2f}\".format(nb_test))","3bbd9a25":"y_pred_nb = nb.predict(X_test_final)\ny_pred_proba_nb = nb.predict_proba(X_test_final)","d094acd4":"print(\"AUC Score: {:.2f}\".format(roc_auc_score(y_test, y_pred_proba_nb, multi_class='ovr')))","f7943374":"f1_score(y_test, y_pred_nb, average=None)","1bd57e37":"multilabel_confusion_matrix(y_test, y_pred_nb)","dbfdf169":"plt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(10, 6))\nmodels = ['Logistic Regression', 'Support Vector Classifier', 'Decision Tree Classifier', \n          'K-Neighbors Classifier', 'Naive Bayes Classifier']\ntest_accuracy = [lr_test, svc_test, dt_test, knn_test, nb_test]\nplt.plot(models, test_accuracy, '-o')\nplt.ylim(0.90, 1.05)\nplt.ylabel(\"Accuracy Score\")\nplt.show()","ee5b3f05":"### Performing EDA","5560bbe5":"Dropping 'Unnamed: 133' column -","ff6339e7":"### Logistic Regression","45f9f471":"Performing split on test data -","ef75f870":"EDA on train data -","c9c1c404":"### Naive Bayes Classifier","f84eba66":"Checking for duplicate rows -","6fcef3bc":"### Data Pre-Processing","23db0aa5":"Label encoding the target variable -","494b82a6":"Checking for null values -","dd0ea5df":"Label encoding the target variable -","16ef01d4":"Checking for null values -","6cb82dfd":"Plotting the correlation matrix -","d57ade52":"Checking for duplicate rows -","96d681c9":"Importing performance metrics for multi-class classification -","2f495edc":"### K-Neighbors Classifier","bde9cd8d":"EDA on test data -","961983f0":"Loading train data -","ac08a9b3":"### Importing required libraries -","b30054e1":"Loading test data -","3eda64cb":"### Support Vector Classifier","ebdb5572":"Removing constant features -","2456837e":"Removing highly correlated features -","a5d3bc7d":"### Decision Tree Classifier","3d5567ba":"### Loading the dataset","e47450c3":"Performing split on train data -","7b079359":"Removing duplicate rows -","680970da":"### Splitting Dependent and Independent variables -","42367b29":"Comparing the test accuracy of different classifier models -","fca2f83d":"Checking the outcome labels -","5f59688b":"Removing duplicate features -","2ba0ad08":"### Feature Selection"}}