{"cell_type":{"b14376b3":"code","1abc7f12":"code","b3cba75c":"code","b2c4491b":"code","e3aaec36":"code","0b89caf1":"code","06ed897c":"code","0379e28f":"code","ef10430a":"code","f79d39c5":"code","7202996a":"code","c6fa415a":"code","39d22799":"code","5019ff52":"code","d658661b":"code","f954a7ec":"code","bb93ab38":"code","70675fd7":"code","02baf17d":"code","f8bae460":"code","6249dec4":"code","517cb46a":"code","669939e0":"code","605b6965":"code","49b5ecb7":"code","438bc9fb":"code","8af55c85":"code","39dd21df":"code","83bf271a":"code","06c575e3":"code","249d56bb":"code","ac1e64b3":"code","afce03b5":"code","585fd498":"code","1a52e303":"code","d39edb4f":"markdown","bb93ec0d":"markdown","35f2cc09":"markdown","1b90b106":"markdown","a3478505":"markdown","97952fce":"markdown","233242c2":"markdown","bf3eb143":"markdown","690c3dbc":"markdown","006ad444":"markdown","123c2386":"markdown","de6a3525":"markdown","fc190199":"markdown"},"source":{"b14376b3":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\n\n# map\nimport folium\n\n# ML\nimport h2o\nfrom h2o.estimators import H2ORandomForestEstimator\n\n# show all columns\npd.options.display.max_columns = None","1abc7f12":"# file overview\n!ls -l ..\/input\/seagrass-and-hydrographic-data\/","b3cba75c":"# load data\ndf_0 = pd.read_csv('..\/input\/seagrass-and-hydrographic-data\/absence.txt', sep='\\t')\ndf_1 = pd.read_csv('..\/input\/seagrass-and-hydrographic-data\/presence.txt', sep='\\t')\n\n# and combine two tables into one data frame\ndf = pd.concat([df_0,df_1])\ndf.head()","b2c4491b":"# overview\ndf.info(verbose=True, show_counts=True) # show all columns","e3aaec36":"# evaluate BIO_CLASS\ndf.BIO_CLASS = df.BIO_CLASS.astype('category')\nprint(df.BIO_CLASS.value_counts())\n# plot frequencies\ndf.BIO_CLASS.value_counts().plot(kind='bar', figsize=(10,4))\nplt.title('BIO_CLASS')\nplt.grid()\nplt.show()","0b89caf1":"# binary version of class => use as target for model later\ndf['ABSENCE'] = np.where(df.BIO_CLASS == 'absence', 1, 0)\nprint(df.ABSENCE.value_counts())\n# plot frequencies\ndf.ABSENCE.value_counts().plot(kind='bar', figsize=(10,4))\nplt.title('ABSENCE')\nplt.grid()\nplt.show()","06ed897c":"# evaluate Substrate\ndf.Substrate = df.Substrate.astype('category')\nprint(df.Substrate.value_counts())\n# plot frequencies\ndf.Substrate.value_counts().plot(kind='bar', figsize=(10,4))\nplt.title('Substrate')\nplt.grid()\nplt.show()","0379e28f":"# select subset of numerical features\nfeatures_num_select = ['LONGITUDE', 'LATITUDE', \n                       'VOTEMPER_2015_winter', 'VOTEMPER_2015_spring',\n                       'VOTEMPER_2015_summer', 'VOTEMPER_2015_autumn',\n                       'VOTEMPER_2015_year',\n                       'maxTemp_year', 'minTemp_year', \n                       'VOTEMPER_2015_winter_maxDepth', 'VOTEMPER_2015_spring_maxDepth',\n                       'VOTEMPER_2015_summer_maxDepth', 'VOTEMPER_2015_autumn_maxDepth', \n                       'VOTEMPER_2015_year_maxDepth', \n                       'maxTemp_year_maxDepth', 'minTemp_year_maxDepth',\n                       'VOSALINE_2015_winter', 'VOSALINE_2015_spring',\n                       'VOSALINE_2015_summer', 'VOSALINE_2015_autumn',\n                       'VOSALINE_2015_year','maxVosa_year', 'minVosa_year',\n                       'VOSALINE_2015_winter_maxDepth', 'VOSALINE_2015_spring_maxDepth',\n                       'VOSALINE_2015_summer_maxDepth', 'VOSALINE_2015_autumn_maxDepth',\n                       'VOSALINE_2015_year_maxDepth', \n                       'maxVosa_year_maxDepth', 'minVosa_year_maxDepth',\n                       'CHL_2015_winter', 'CHL_2015_spring',\n                       'CHL_2015_summer', 'CHL_2015_autumn',\n                       'CHL_2015_year',\n                       'maxCHL_year', 'minCHL_year',\n                       'NIT_2015_winter', 'NIT_2015_spring',\n                       'NIT_2015_summer', 'NIT_2015_autumn',\n                       'NIT_2015_year', 'maxNIT_year', 'minNIT_year',\n                       'NIT_2015_winter_maxDepth', 'NIT_2015_spring_maxDepth',\n                       'NIT_2015_summer_maxDepth', 'NIT_2015_autumn_maxDepth',\n                       'NIT_2015_year_maxDepth',\n                       'maxNIT_year_maxDepth', 'minNIT_year_maxDepth',\n                       'ZSD_2015_winter', 'ZSD_2015_spring',\n                       'ZSD_2015_summer', 'ZSD_2015_autumn',\n                       'ZSD_2015_year',\n                       'maxZSD_year', 'minZSD_year',\n                       'PHO_2015_winter', 'PHO_2015_spring',\n                       'PHO_2015_summer', 'PHO_2015_autumn',\n                       'PHO_2015_year',\n                       'maxPHO_year', 'minPHO_year',\n                       'PHO_2015_winter_maxDepth', 'PHO_2015_spring_maxDepth',\n                       'PHO_2015_summer_maxDepth', 'PHO_2015_autumn_maxDepth',\n                       'PHO_2015_year_maxDepth',\n                       'maxPHO_year_maxDepth', 'minPHO_year_maxDepth',\n                       'VHM0_2015_winter', 'VHM0_2015_spring',\n                       'VHM0_2015_summer', 'VHM0_2015_autumn', \n                       'VHM0_2015_year',\n                       'maxVHM0_year', 'minVHM0_year',\n                       'Med_bathym', \n                       'Distance_to_Major_Cities', 'Distance_to_Complete_Cities',\n                       'Distance_to_Port', 'Distance_to_Major_River',\n                       'Distance_to_Complete_River',\n                       'Distance_to_Coast']","ef10430a":"len(features_num_select)","f79d39c5":"fig, axs = plt.subplots(22, 4, figsize=(16,100))\ni = 0\nfor f in features_num_select:\n    current_ax = axs.flat[i]\n    current_ax.hist(df[f], bins=50)\n    current_ax.set_title(f)\n    current_ax.grid()\n    i = i + 1","7202996a":"# cross table - absolute counts...\nctab = pd.crosstab(df.ABSENCE, df.Substrate)\nctab","c6fa415a":"# ...and normalized by column\nctab_norm = ctab \/ ctab.sum()\n\nplt.figure(figsize=(12,4))\nsns.heatmap(ctab_norm, cmap='Blues',\n            annot=True,\n            vmin=0, vmax=1,\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","39d22799":"df.ABSENCE = df.ABSENCE.astype('category')","5019ff52":"fig, axs = plt.subplots(22, 4, figsize=(16,120))\ni = 0\nfor f in features_num_select:\n    current_ax = axs.flat[i]\n    sns.violinplot(ax=current_ax, x=f, y='ABSENCE', data=df)\n    current_ax.set_title(f)\n    current_ax.grid()\n    i = i + 1","d658661b":"# aux column, bio_class as integer\ndf['COLOR'] = df.BIO_CLASS.cat.codes","f954a7ec":"# interactive map showing bio class\nzoom_factor = 5 # inital map size\n\nmy_map_1 = folium.Map(location=[38,15], zoom_start=zoom_factor)\n\nv_min = np.min(df.COLOR)\nv_max = np.max(df.COLOR)\n\nfor i in range(0,df.shape[0]):\n    v = df.iloc[i]['COLOR']\n    v_norm = (v-v_min)\/(v_max-v_min)\n    i_col = int(v_norm*256)\n    current_color = matplotlib.colors.to_hex(matplotlib.cm.rainbow(i_col))\n    folium.CircleMarker(\n       location=[df.iloc[i]['LATITUDE'], df.iloc[i]['LONGITUDE']],\n       radius=6,\n       popup='BIO_CLASS: ' + df.iloc[i]['BIO_CLASS'],\n       color='black',\n       weigth=1, # stroke width in pixel\n       opacity=0.25, # stroke opacity\n       fill=True,\n       fill_color=current_color,\n       fill_opacity=0.25\n    ).add_to(my_map_1)\n\nmy_map_1 # display","bb93ab38":"# interactive map showing absence \/ non-absence only\nzoom_factor = 5 # inital map size\n\nmy_map_2 = folium.Map(location=[38,15], zoom_start=zoom_factor)\n\nfor i in range(0,df.shape[0]):\n    v = df.iloc[i]['ABSENCE']    \n    if (v==0):\n        current_color = 'red'\n    else:\n        current_color = 'grey'\n        \n    folium.CircleMarker(\n       location=[df.iloc[i]['LATITUDE'], df.iloc[i]['LONGITUDE']],\n       radius=6,\n       popup='BIO_CLASS: ' + df.iloc[i]['BIO_CLASS'],\n       color='black',\n       weigth=1, # stroke width in pixel\n       opacity=0.25, # stroke opacity\n       fill=True,\n       fill_color=current_color,\n       fill_opacity=0.25\n    ).add_to(my_map_2)\n\nmy_map_2 # display","70675fd7":"# select predictors\npredictors = features_num_select + ['Substrate']\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","02baf17d":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","f8bae460":"# upload data frame in H2O environment\nt1 = time.time()\ndf_hex = h2o.H2OFrame(df)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","6249dec4":"# define target\ntarget = 'ABSENCE'\n# explicitly convert target to categorical => classification problem\ndf_hex[target] = df_hex[target].asfactor()","517cb46a":"# train \/ test split\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","669939e0":"print('Target distribution on training data:')\nprint(train_hex[target].as_data_frame().value_counts())\nprint()\nprint('Target distribution on test set:')\nprint(test_hex[target].as_data_frame().value_counts())","605b6965":"# define (distributed) random forest model\nfit_DRF = H2ORandomForestEstimator(ntrees=40,\n                                   max_depth=20,\n                                   min_rows=10,\n                                   nfolds=5,                                   \n                                   seed=999)\n\n# train model\nt1 = time.time()\nfit_DRF.train(x=predictors,\n              y=target,\n              training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","49b5ecb7":"# show training scoring history\nfit_DRF.plot()","438bc9fb":"# variable importance\nfit_DRF.varimp_plot(25)","8af55c85":"# alternative variable importance using SHAP\nt1 = time.time()\nfit_DRF.shap_summary_plot(train_hex);\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","39dd21df":"# cross validation metrics\nfit_DRF.cross_validation_metrics_summary()","83bf271a":"# ROC Curve on cross validations\nperf_cv = fit_DRF.model_performance(xval=True)\nperf_cv.plot()","06c575e3":"pred_train = fit_DRF.predict(train_hex)\n# add actual target\npred_train['target'] = train_hex[target]\npred_train = pred_train.as_data_frame()\npred_train.head()","249d56bb":"# plot probabilities\nplt.figure(figsize=(8,4))\nplt.hist(pred_train.p1, bins=30)\nplt.title('Predictions on Training Data')\nplt.grid()\nplt.show()","ac1e64b3":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_train = pd.crosstab(pred_train['target'], pred_train['predict'])\n# visualize\nsns.heatmap(conf_train, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","afce03b5":"# predict\npred_test = fit_DRF.predict(test_hex)\n# add actual target\npred_test['target'] = test_hex[target]\npred_test = pred_test.as_data_frame()\npred_test.head()","585fd498":"# plot probabilities\nplt.figure(figsize=(8,4))\nplt.hist(pred_test.p1, bins=30)\nplt.title('Predictions on Test Set')\nplt.grid()\nplt.show()","1a52e303":"# confusion matrix; rows ~ actual observations, cols ~ predictions\nconf_test = pd.crosstab(pred_test['target'], pred_test['predict'])\n# visualize\nsns.heatmap(conf_test, cmap='Blues', annot=True, \n            cbar=False, fmt='d',\n            linecolor='black',\n            linewidths=0.1)\nplt.show()","d39edb4f":"### Impact of Numerical Features","bb93ec0d":"<a id='6'><\/a>\n# Model Performance","35f2cc09":"### Impact of Substrate","1b90b106":"#### Very unbalanced... Let's create a binary version of that:","a3478505":"<a id='5'><\/a>\n# Fit Model for Absence","97952fce":"<a id='4'><\/a>\n# Map","233242c2":"### Performance on Test Set","bf3eb143":"#### Check distribution of target in train \/ test","690c3dbc":"<a id='2'><\/a>\n# Numerical Features (subset)","006ad444":"<a id='1'><\/a>\n# Categorical Variables","123c2386":"<a id='3'><\/a>\n# Absence vs Features","de6a3525":"### Performance on training set","fc190199":"# Table of contents\n* [Categorical Variables](#1)\n* [Numerical Features (subset)](#2)\n* [Absence vs Features](#3)\n* [Map](#4)\n* [Fit Model for Absence](#5)\n* [Model Performance](#6)"}}