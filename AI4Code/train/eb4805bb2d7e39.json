{"cell_type":{"3d470ad6":"code","bcc8d1cd":"code","818106f9":"code","345c443e":"code","6f5f670c":"code","61b7a261":"code","0d68d5d7":"code","14d79a6c":"code","4122932c":"code","317ac8e1":"code","7546a689":"code","2f44aa38":"code","8862dd81":"code","c727372e":"code","efb54288":"code","21c4ab80":"code","1c84fd93":"code","d3b66136":"code","206a6677":"code","b72dd7d6":"code","39bfe001":"code","5bf24b8a":"code","2984441f":"code","75d37427":"code","2eb9bbbd":"code","0b7f368a":"code","c097bb4a":"code","69b256d2":"code","4638dd06":"code","90770166":"code","91215b6f":"code","32c41da9":"code","428d9971":"code","574d4f04":"code","b295410d":"code","23d0df58":"code","de7e7d5a":"code","612dceba":"code","8c6ef892":"code","b9ef7ddc":"markdown","10dfacc2":"markdown","be3a99c5":"markdown","2c811403":"markdown","b87d1e58":"markdown","1a561fc4":"markdown","4984ce79":"markdown","cd56d875":"markdown","c86af032":"markdown","bf56a8ce":"markdown","d53ebc7a":"markdown","77b97a34":"markdown","207de8ef":"markdown","838ed8f0":"markdown","ec0125eb":"markdown","a9862cd5":"markdown","f4e04217":"markdown","217c8b89":"markdown","edcfbe55":"markdown","26d8beea":"markdown","3618efb4":"markdown","a9ce896f":"markdown","e89b6c95":"markdown","8591b097":"markdown","a2d84bca":"markdown","142a9e70":"markdown","9728e461":"markdown"},"source":{"3d470ad6":"import pandas as pd","bcc8d1cd":"# Reading the data:\ndata = pd.read_csv(\"..\/input\/retailtransactiondata\/Retail_Data_Transactions.csv\")","818106f9":"data.head()","345c443e":"# Defining Recency as two of the three columns in data:\nrecency = data[['trans_date', 'customer_id']]","6f5f670c":"recency.apply(pd.Series.nunique)","61b7a261":"recency.shape","0d68d5d7":"import time\n\nrecency['trans_date'] = pd.to_datetime(recency.trans_date)","14d79a6c":"# now refers to the latest date available in the data, to which we will peg our rececny dimensions on:\nnow = max(recency['trans_date'])","4122932c":"recency = recency.groupby(['customer_id']).max()","317ac8e1":"recency_days = now - recency['trans_date']","7546a689":"recency_days = pd.DataFrame(recency_days)\nrecency_days.head()","2f44aa38":"monetary = data[['customer_id', 'tran_amount']]","8862dd81":"monetary = monetary.groupby(['customer_id']).sum()","c727372e":"monetary.head()","efb54288":"frequency = data[['customer_id', 'trans_date']]","21c4ab80":"frequency = frequency.groupby(['customer_id']).count()","1c84fd93":"frequency.head()","d3b66136":"recency = pd.DataFrame(recency_days['trans_date'].astype('timedelta64[D]'))\nrecency.columns = ['recency']","206a6677":"recency.head()\n","b72dd7d6":"rfm = pd.concat([recency, frequency, monetary], axis=1)","39bfe001":"# Defining the columns:\nrfm.columns=['recency', 'frequency', 'monetary']\n\nrfm.head()","5bf24b8a":"# Plotting for the last day since the customer made a purchase:\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8,8))\nsns.set_context(\"poster\")\nsns.distplot(rfm['recency'])\nplt.xlabel('Days since last purchase')","2984441f":"# Plotting the number of times the customer has made a purchase:\n\nplt.figure(figsize=(8,8))\nsns.set_context(\"poster\")\nsns.distplot(rfm['frequency'])\n","75d37427":"# Plotting the total revenue that the particular customer brought in to the shop:\n\nplt.figure(figsize=(8,8))\nsns.set_context(\"poster\")\nsns.distplot(rfm['monetary'])\nplt.xlabel('Dollars')","2eb9bbbd":"rfm.quantile([.25, .5, .75, 1], axis=0)","0b7f368a":"# copying the rfm dataset so that it isn't affected by the changes:\n\nRFMscores = rfm.copy()","c097bb4a":"# Converting Recency:\n\nRFMscores['recency'] = [4 if x <= 22 else x for x in RFMscores['recency']]\nRFMscores['recency'] = [3 if 22 < x <= 53 else x for x in RFMscores['recency']]\nRFMscores['recency'] = [2 if 53 < x <= 111 else x for x in RFMscores['recency']]\nRFMscores['recency'] = [1 if x > 111 else x for x in RFMscores['recency']]","69b256d2":"# Converting Frequency:\n\nRFMscores['frequency'] = [1 if a < 14 else a for a in RFMscores['frequency']]\nRFMscores['frequency'] = [2 if 18 > a >= 14 else a for a in RFMscores['frequency']]\nRFMscores['frequency'] = [3 if 22 > a >= 18 else a for a in RFMscores['frequency']]\nRFMscores['frequency'] = [4 if a >= 22 else a for a in RFMscores['frequency']]","4638dd06":"# Converting Monetary:\n\nRFMscores['monetary'] = [1 if x < 781 else x for x in RFMscores['monetary']]\nRFMscores['monetary'] = [2 if 781 <= x < 1227 else x for x in RFMscores['monetary']]\nRFMscores['monetary'] = [3 if 1227 <= x < 1520 else x for x in RFMscores['monetary']]\nRFMscores['monetary'] = [4 if 1520 <= x else x for x in RFMscores['monetary']]","90770166":"RFMscores.apply(pd.Series.nunique)","91215b6f":"RFMscores.head()","32c41da9":"score = pd.DataFrame((RFMscores['recency'] + RFMscores['frequency'] + RFMscores['monetary'])\/3, columns=['AggrScore'])\n","428d9971":"# Concatenating the two:\nRFMscores = pd.concat([RFMscores, score], axis = 1)","574d4f04":"RFMscores.head()","b295410d":"# Using Quantiles we find the limit for our top 25% customers:\nRFMscores.quantile([.75, 1], axis=0)","23d0df58":"topcustomers = RFMscores['AggrScore'].iloc[[x >= 3.333333 for x in RFMscores['AggrScore']]]","de7e7d5a":"MVCs = pd.DataFrame(topcustomers, columns = ['AggrScore'])","612dceba":"MostValuableCustomers = list(MVCs.index)","8c6ef892":"MostValuableCustomers","b9ef7ddc":"Finally concatenating the dataframes:","10dfacc2":"# Importing and Reading Data:","be3a99c5":"# Most Valuable Customers (MVCs):","2c811403":"Since we have the absolute integer values of all the three key elements lets concatenate them:","b87d1e58":"Below is the conversion of columns into RFM scores between 1 to 4. These will come handy in calculating the aggregate RFM Score. As per the quantile I have assigned the indices in the columns a value between 1 to 4. \n\n> '4' being great and '1' being poor.\n\n\nApart from that what must be noted is that different columns see this score differently. Such as, the higher the monetary value the higher chance of that value being 4 since more revenue is never a bad thing. While, smaller the value of Recency the more likely it is that the index will be given the value of 1, since the more recent customer is more likely to comeback. In case of Frequency the metrics are the same as Monetary since, higher the Frequency the more beneficial it is for business.","1a561fc4":"I think we should take a look at the distribution because plotting can give a really good idea of what is up with the customers:","4984ce79":"# RFM Analysis:","cd56d875":"Well, since there are more examples than the number of unique customer ids this means that a lot of customers bought from us more than once,","c86af032":"Via Groupby here, I sum up all the transactions of every respective customer:","bf56a8ce":"Importing pandas for working with the data:","d53ebc7a":"Lets check if we got it right by taking a look at the number of unique values in each column:","77b97a34":"In this notebook, I will be going through the implementation of RFM or Recency, Frequency and Monetary. This was popularised in the 1960s and 1970s. It might be old but the Wharton's course on Customer Analytics at Coursera teaches this pretty well, so if you feel like checking it out here's the [link](https:\/\/www.google.com\/url?sa=t&rct=j&q=&esrc=s&source=video&cd=&cad=rja&uact=8&ved=2ahUKEwjj4ZeB3bvrAhU16nMBHRuRCJ8QtwIwAXoECAEQAQ&url=https%3A%2F%2Fwww.coursera.org%2Flecture%2Fwharton-customer-analytics%2Fbeyond-period-2-7fduC&usg=AOvVaw3-I-Zc9QAF2OrUWPaAAZGW).","207de8ef":"Time to work with dates:","838ed8f0":"Via Groupby, I use count to count the number of times the customer has made purchases:","ec0125eb":"Frequency refers to the number of times a customer has made purchases:","a9862cd5":"# RFM SCORE CARD:","f4e04217":"# Aggregate RFM Score:","217c8b89":"Monetary refers to the total money spent by a customer overtime:","edcfbe55":"Since we have a basic idea of what the distribution of the three indicators, lets use quantiles to educate ourselves further with quantiles:","26d8beea":"And thus, we have the names of the customers who love the shop! If you liked the notebook, an upvote would be much appreciated. :-)","3618efb4":"Checking the data for the number of unique values:","a9ce896f":"Taking a look at this beauty:","e89b6c95":"The aggregate RFM Score is basically the average of the RFM values in the RFM Scores dataset:","8591b097":"# Playing with the Data:","a2d84bca":"Lets take a look at the dimensions of our data:","142a9e70":"The groupby function in pandas allows of for grouping of many index column values or as we saw above there were more than one instances of a single customer purchasing so why not combine all their purchases?","9728e461":"Okay so, recency refers to the time since the last purchase. So lets find out the number of days:"}}