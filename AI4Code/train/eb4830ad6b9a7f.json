{"cell_type":{"455dd972":"code","d41f7d21":"code","30ee2d33":"code","0aebb951":"code","77351c70":"code","864f16c3":"code","542fea07":"code","d7f3fe52":"code","02f17340":"code","dfb0c26c":"code","732f6307":"code","b1298fda":"code","1e24d310":"code","40918bb2":"code","7154ab42":"code","1b6ca95b":"code","8d96d837":"code","f21c2d78":"code","4188301b":"code","a40033f1":"code","425657f5":"code","d85920e4":"code","b3e897a4":"code","ff35916b":"code","caf9dfc5":"code","0c272e07":"code","2f867d37":"code","3985d919":"code","60349128":"code","00ac3f38":"code","a123cd62":"code","b4e47ffe":"code","7ded8512":"code","6461c602":"code","81404537":"code","dbfd3a2d":"code","64054168":"code","dbaf4cfd":"code","3d1ceb1e":"code","39bf3e2b":"code","59d574ac":"code","204bc8c6":"code","4b304a61":"code","a94b4646":"code","0ee3c3b9":"code","b5a8c721":"code","3fd9fa56":"code","4c362bce":"code","9caff22e":"code","3056eec6":"code","ca514883":"code","14549784":"code","dd36bcae":"code","ebc4e4e0":"code","9f1eb160":"code","0ccd7722":"code","6914d112":"code","3690723a":"code","efdf1dc5":"code","dc7e957a":"code","da35e733":"code","d6e5d076":"code","a6c2a32e":"code","bd761671":"code","43764a06":"code","fd04e742":"code","3a9f31f9":"code","31eec624":"code","4cb35569":"code","f719a43e":"code","cc3f7763":"code","2102ff41":"markdown"},"source":{"455dd972":"# Primeiramente iremos importar todas as bibliotecas necess\u00e1rias para come\u00e7ar a varredura no site do zap_imoveis\nfrom urllib.request import urlretrieve, urlopen, Request\nfrom urllib.error import URLError, HTTPError\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nimport requests\nimport time\nfrom shapely.geometry import Polygon, Point, LineString, MultiPolygon\nimport geopandas as gpd\nimport statsmodels.api as sm","d41f7d21":"def trata_html(input):\n    html_tratada = ' '.join(input.split()).replace('> <', '><')\n    return html_tratada","30ee2d33":"imoveis = []\nfor i in range(1, 11):\n    url = 'https:\/\/www.zapimoveis.com.br\/venda\/imoveis\/sp+sao-bernardo-do-campo\/?__zt=spg%3Ac&pagina=' + str(i) + '&onde=,S%C3%A3o%20Paulo,S%C3%A3o%20Bernardo%20do%20Campo,,,,BR%3ESao%20Paulo%3ENULL%3ESao%20Bernardo%20do%20Campo,-23.6816587,-46.6203412&transacao=Venda&tipo=Im%C3%B3vel%20usado'\n    headers = {'User-Agent': 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/83.0.4103.97 Safari\/537.36'}\n    req = Request(url, headers = headers)\n    response = urlopen(req)\n    html = response.read()\n    html = html.decode('utf-8')\n    trata_html(html)\n    soup = BeautifulSoup(html, 'html.parser')\n    anuncios = soup.findAll('div', {'class': 'card-listing simple-card js-listing-card'})\n\n    for anuncio in anuncios:\n        dic_anuncio = {}\n\n    # Requisitando o pre\u00e7o dos im\u00f3veis\n\n        if anuncio.find('p', {'class':'simple-card__price'}) != None and anuncio.find('p', {'class':'simple-card__price'}).get_text().strip() != 'Sob consulta':\n            dic_anuncio['Valor_Imovel'] = float(''.join(anuncio.find('p', {'class':'simple-card__price'}).get_text().split()[-1].split('.')))\n        \n        else:\n            dic_anuncio['Valor_Imovel'] = 0\n\n    #Requisitando o pre\u00e7o do condominio\n        if anuncio.find('li', {'class':'condominium'}) != None:\n            dic_anuncio['valor_Condominio'] = float(''.join(anuncio.find('li', {'class':'condominium'}).get_text().split()[-1].split('.')))\n        else:\n            dic_anuncio['valor_Condominio'] = 0\n\n\n    #Requisitando IPTU\n        if anuncio.find('li', {'class':'iptu'}) != None:\n            dic_anuncio['IPTU'] = float(anuncio.find('li', {'class':'iptu'}).get_text().split()[-1])\n        else:\n            dic_anuncio['IPTU'] = 0\n\n\n    #Requisitando Endere\u00e7o\n        if anuncio.find('p', {'class':'simple-card__address'}) != None:\n            dic_anuncio['Endereco'] = anuncio.find('p', {'class':'simple-card__address'}).get_text()\n        else:\n            dic_anuncio['Endereco'] = 0\n\n    #Requisitando \u00c0rea do Im\u00f3vel\n        if anuncio.find('li', {'class':'js-areas'}) != None:\n            dic_anuncio['Area_m2'] = anuncio.find('li', {'class':'js-areas'}).get_text().split()[-2]\n        else:\n            dic_anuncio['Area_m2'] = 0\n\n    #Requisitando Quantidade de Quartos\n        if anuncio.find('li', {'class':'js-bedrooms'}) != None:\n            dic_anuncio['Quantidade_Quartos'] = anuncio.find('li', {'class':'js-bedrooms'}).get_text().split()[-1]\n        else:\n            dic_anuncio['Quantidade_Quartos'] = 0\n\n    #Requisitando Quantidade de Garagens\n        if anuncio.find('li', {'class':'js-parking-spaces'}) != None:\n            dic_anuncio['Quantidade_Garangens'] = anuncio.find('li', {'class':'js-parking-spaces'}).get_text().split()[-1]\n        else:\n            dic_anuncio['Quantidade_Garangens'] = 0\n\n    #Requisitando quantidade de banheiros\n        if anuncio.find('li', {'class':'js-bathrooms'})!= None:\n            dic_anuncio['Quantidade_Banheiros'] = anuncio.find('li', {'class':'js-bathrooms'}).get_text().split()[-1]\n        else:\n            dic_anuncio['Quantidade_Banheiros'] = 0\n        imoveis.append(dic_anuncio)\ndataset = pd.DataFrame(imoveis)","0aebb951":"dataset.head()","77351c70":"cep1 = pd.read_csv('..\/input\/correios\/sp.cepaberto_parte_1.csv', names=['col1', 'col2', 'col3', 'col4', 'col5', 'col6'])\ncep2 = pd.read_csv('..\/input\/correios\/sp.cepaberto_parte_2.csv', names=['col1', 'col2', 'col3', 'col4', 'col5', 'col6'])\ncep3 = pd.read_csv('..\/input\/correios\/sp.cepaberto_parte_3.csv', names=['col1', 'col2', 'col3', 'col4', 'col5', 'col6'])\ncep4 = pd.read_csv('..\/input\/correios\/sp.cepaberto_parte_4.csv', names=['col1', 'col2', 'col3', 'col4', 'col5', 'col6'])\ncep5 = pd.read_csv('..\/input\/correios\/sp.cepaberto_parte_5.csv', names=['col1', 'col2', 'col3', 'col4', 'col5', 'col6'])","864f16c3":"cep_total = pd.concat([cep1, cep2, cep3, cep4, cep5])","542fea07":"cep_total = cep_total[(cep_total['col5'] == 8482) | (cep_total['col5'] == 8498)| (cep_total['col5'] == 2955) | (cep_total['col5'] == 8351) | (cep_total['col5'] == 8352) | (cep_total['col5'] == 5590)]","d7f3fe52":"ceps = {}\nfor index, valor in dataset.iterrows():\n    rua = valor['Endereco'].split(',')[0].strip()\n    bairro = valor['Endereco'].split(',')[1].strip()\n    valor = cep_total[(cep_total['col2'] == rua) & (cep_total['col4'] == bairro)]['col1'].values\n    ceps[index] = list(valor)","02f17340":"for i in ceps:\n    if len(ceps[i]) != 0:\n        ceps[i] = str(0) + str(ceps[i][0])","dfb0c26c":"ceps = pd.DataFrame(ceps.values(), index = ceps.keys())","732f6307":"dataset['CEP'] = ceps","b1298fda":"dataset.head()","1e24d310":"for index, data in dataset.iterrows():\n    \n    url = \"https:\/\/www.cepaberto.com\/api\/v3\/cep?cep=\"+ str(data['CEP'])\n    # O seu token est\u00e1 vis\u00edvel apenas pra voc\u00ea\n    headers = {'Authorization': 'Token token=5f71e3519466671e52b02de90aa733fb'}\n    response = requests.get(url, headers=headers)\n    try:\n        if response.json() != {}:\n            dataset.loc[index, 'Latitude'] = response.json()['latitude']\n            dataset.loc[index, 'Longitude'] = response.json()['longitude']\n        else:\n            dataset.loc[index, 'Latitude'] = 0\n            dataset.loc[index, 'Longitude'] = 0\n        time.sleep(1)\n    except ValueError:\n        print(\"Response content is not valid JSON\")","40918bb2":"dataset.dropna(inplace = True)","7154ab42":"print('Quantidade de nulos %s' %dataset.isnull().sum().sum())","1b6ca95b":"dataset['Latitude'] = pd.to_numeric(dataset['Latitude'])\ndataset['Longitude'] = pd.to_numeric(dataset['Longitude'])","8d96d837":"dataset.dtypes","f21c2d78":"geometry = [Point(x) for x in zip(dataset.Longitude, dataset.Latitude)]","4188301b":"crs = {'proj': 'latlong', 'ellps': 'WGS84', 'datum': 'WGS84', 'no_defs': True}","a40033f1":"geo_dataset = gpd.GeoDataFrame(dataset, crs = crs, geometry = geometry)","425657f5":"sbc = gpd.read_file('..\/input\/cidade\/SBC.shp')","d85920e4":"sbc.crs","b3e897a4":"geo_dataset = geo_dataset.to_crs({'init': 'epsg:4674'})","ff35916b":"geo_dataset.crs","caf9dfc5":"geo_dataset = geo_dataset[geo_dataset['Latitude'] != 0]","0c272e07":"ax = sbc.plot(color = 'white', edgecolor = 'black', figsize = (15,12))\ngeo_dataset.plot(ax = ax)","2f867d37":"equipamento = gpd.read_file('..\/input\/equipamento\/EQUIPAMENTO.shp')\nequipamento = equipamento.to_crs({'init': 'epsg:4674'})","3985d919":"estabelecimentos = list(equipamento.TIPO.value_counts().index)","60349128":"ax = sbc.plot(color = 'white', edgecolor = 'black', figsize = (20,12))\ngeo_dataset.plot(ax = ax, color = 'yellow', alpha = 0.5, label = 'Casas', edgecolor = 'black')\nequipamento[(equipamento.TIPO == 'Escola Municipal de Educa\u00e7\u00e3o B\u00e1sica - EMEB') |\n            (equipamento.TIPO == 'Escola Particular') |\n            (equipamento.TIPO == 'Escola Estadual')].plot(ax = ax, color = 'green', alpha = 0.4, Label = 'Escolas')\nequipamento[(equipamento.TIPO == 'Unidade B\u00e1sica de Sa\u00fade - UBS')].plot(ax = ax, color = 'red', alpha = 0.7, Label = 'UBS')\nequipamento[(equipamento.TIPO == 'Teatro')].plot(ax = ax, color = 'orange', alpha = 0.7, Label = 'Teatro')\nequipamento[(equipamento.TIPO == 'Hospital')].plot(ax = ax, color = 'cyan', alpha = 0.7, Label = 'Hospital')\nax.set_title('Mapa de S\u00e3o Bernardo', loc = 'left', fontsize = 16)\nax.legend()","00ac3f38":"print('Quantidade de nulos %s' %dataset.isnull().sum().sum())","a123cd62":"print('Tamanho de DataFrame %s linhas %s colunas' %(dataset.shape[0], dataset.shape[1]))","b4e47ffe":"dataset['Area_m2'] = pd.to_numeric(dataset['Area_m2'])\ndataset['Quantidade_Quartos'] = pd.to_numeric(dataset['Quantidade_Quartos'])\ndataset['Quantidade_Garangens'] = pd.to_numeric(dataset['Quantidade_Garangens'])\ndataset['Quantidade_Banheiros'] = pd.to_numeric(dataset['Quantidade_Banheiros'])","7ded8512":"dataset.info()","6461c602":"# Trabalhando com estatistica descritiva\nQ1 = dataset['valor_Condominio'].quantile(0.25)\nQ3 = dataset['valor_Condominio'].quantile(0.75)\nIIQ =  Q3 - Q1\nlim_inf = Q1 -(1.5 * IIQ)\nlim_sup = Q3 +(1.5 * IIQ)","81404537":"dataset.shape","dbfd3a2d":"dataset = dataset[(dataset['valor_Condominio'] >= lim_inf) & (dataset['valor_Condominio'] <= lim_sup) & (dataset['valor_Condominio'] != 0)]\ndataset.shape","64054168":"dataset = dataset[dataset['Latitude'] != 0]\ndataset.shape","dbaf4cfd":"dataset.corr()","3d1ceb1e":"ax = sns.heatmap(dataset.corr(), annot= True, linewidths=.1, annot_kws={'size':12})\nax.figure.set_size_inches(16,12)\nax.set_title('Correla\u00e7\u00e3o das vari\u00e1veis', fontsize = 16, loc = 'left')\nax = ax","39bf3e2b":"ax = dataset.boxplot(column=['Valor_Imovel'], figsize = (16,12))\nplt.title('Blox plot do Valor do Im\u00f3vel', loc = 'left', fontsize = 18)","59d574ac":"dataset.describe()","204bc8c6":"ax = sns.distplot(dataset.Valor_Imovel)\nax.figure.set_size_inches(20, 6)\nax.set_title('Distribui\u00e7\u00e3o de Frequ\u00eancias', fontsize=20, loc = 'left')\nax = ax","4b304a61":"sns.set_palette('Accent')\nsns.set_style('darkgrid')\nax = sns.pairplot(dataset, x_vars= ['Area_m2','valor_Condominio', 'IPTU', 'Quantidade_Quartos',\n                                    'Quantidade_Garangens', 'Quantidade_Banheiros'  ], y_vars='Valor_Imovel',\n                                      height=5, kind = 'reg')\nax.fig.suptitle('Dispers\u00e3o entre as Vari\u00e1veis', fontsize=20, y=1.08)\nax.fig.set_size_inches(20, 6)\nax = ax","a94b4646":"dataset_log = dataset.copy()","0ee3c3b9":"dataset_log.shape","b5a8c721":"dataset_log['Valor_Imovel'] = np.log(dataset_log['Valor_Imovel'])\ndataset_log['valor_Condominio'] = np.log(dataset_log['valor_Condominio'])\ndataset_log['IPTU'] = np.log(dataset_log['IPTU'] + 1)\ndataset_log['Area_m2'] = np.log(dataset_log['Area_m2'])\ndataset_log['Quantidade_Quartos'] = np.log(dataset_log['Quantidade_Quartos'] + 1)\ndataset_log['Quantidade_Garangens'] = np.log(dataset_log['Quantidade_Garangens'] + 1)\ndataset_log['Quantidade_Banheiros'] = np.log(dataset_log['Quantidade_Banheiros'] + 1)","3fd9fa56":"ax = sns.distplot(dataset_log.Valor_Imovel)\nax.figure.set_size_inches(20, 6)\nax.set_title('Distribui\u00e7\u00e3o de Frequ\u00eancias', fontsize=20, loc = 'left')\nax = ax","4c362bce":"sns.set_palette('Accent')\nsns.set_style('darkgrid')\nax = sns.pairplot(dataset_log, x_vars= ['Area_m2','valor_Condominio', 'IPTU', 'Quantidade_Quartos',\n                                    'Quantidade_Garangens', 'Quantidade_Banheiros'  ], y_vars='Valor_Imovel',\n                                      height=5, kind = 'reg')\nax.fig.suptitle('Dispers\u00e3o entre as Vari\u00e1veis', fontsize=20, y=1.08)\nax.fig.set_size_inches(20, 6)\nax = ax","9caff22e":"y = dataset_log['Valor_Imovel']","3056eec6":"dataset.keys()","ca514883":"X = dataset_log[['Area_m2', 'Quantidade_Quartos', 'Quantidade_Banheiros', 'Quantidade_Garangens', 'valor_Condominio']]","14549784":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 500)","dd36bcae":"X_train_com_constante = sm.add_constant(X_train)\nX_train_com_constante.head()","ebc4e4e0":"modelo_statsmodels = sm.OLS(y_train, X_train_com_constante, hasconst=True).fit()","9f1eb160":"print(modelo_statsmodels.summary())","0ccd7722":"X = dataset_log[['Area_m2', 'Quantidade_Garangens', 'valor_Condominio']]","6914d112":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 500)","3690723a":"X_train_com_constante = sm.add_constant(X_train)\nX_train_com_constante.head()","efdf1dc5":"modelo_statsmodels = sm.OLS(y_train, X_train_com_constante, hasconst=True).fit()","dc7e957a":"print(modelo_statsmodels.summary())","da35e733":"modelo = LinearRegression()","d6e5d076":"modelo.fit(X_train, y_train)","a6c2a32e":"print('R\u00b2 = {:.03f}'.format(modelo.score(X_train, y_train)))","bd761671":"y_previsto = modelo.predict(X_test)","43764a06":"print('R\u00b2 = {0:.3f}'.format(metrics.r2_score(y_test, y_previsto)))","fd04e742":"entrada = X_test[5:6]\nentrada","3a9f31f9":"modelo.predict(entrada)[0]","31eec624":"np.exp(modelo.predict(entrada)[0]).round(2)","4cb35569":"dataset.loc[62]['Valor_Imovel']","f719a43e":"def simulador(Area, Garagens, Valor_Condominio):\n    Area = np.log(Area)\n    Garagens = np.log(Garagens)\n    Valor_Condominio = np.log(Valor_Condominio)\n    resultado = np.exp(modelo.predict([[Area, Garagens, Valor_Condominio ]])[0])\n    print(\"R$ {:.2f}\".format(resultado))","cc3f7763":"simulador(115, 4, 900)","2102ff41":"Analizando o modelo acima vemos que a quantidade de quartos e quantidade de banheiro n\u00e3o estatisticamente significativos por terem um P >|t| de 0.2 e 0.3 sendo que o ideal \u00e9 menor que 0.05, vamos refazer o teste acima e descartalos."}}