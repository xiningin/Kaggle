{"cell_type":{"d331daa8":"code","d261f57c":"code","fd83d00c":"code","1e215818":"code","0d514277":"code","92364c4c":"code","03f7c752":"code","8939f648":"code","7ae8575f":"code","7e6a4c2f":"code","87b28bc8":"code","bb62dd4b":"code","e93a53e8":"code","1169087e":"code","635c2bcf":"code","e4777b68":"code","38a16438":"code","c4265c3d":"code","11683f21":"code","307e2179":"code","de9f0bd1":"code","4c612dcd":"code","92b35ac0":"code","7201d683":"code","68883950":"code","e81edc1f":"markdown"},"source":{"d331daa8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(action='ignore')\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom sklearn.metrics import log_loss","d261f57c":"# !unzip -qo \"archive (13).zip\"","fd83d00c":"train = pd.read_csv('..\/input\/cardiac-risk-prediction\/Train.csv')","1e215818":"train.head()","0d514277":"train.info()","92364c4c":"train.describe()","03f7c752":"train.isnull().sum()","8939f648":"sns.countplot(train.UnderRisk)","7ae8575f":"for c in train.columns :\n    print(train[c].value_counts())","7e6a4c2f":"plt.figure(figsize=(20, 17))\nmatrix = np.triu(train.corr())\nsns.heatmap(train.corr(), annot=True, linewidth=.8, mask=matrix, cmap=\"rocket\");","87b28bc8":"sns.pairplot(train)","bb62dd4b":"X = train.iloc[:,:-1].values\ny = train.iloc[:, 1].values","e93a53e8":"X[0]","1169087e":"# Encoding Dependent Variable with Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder_X_1 = LabelEncoder()\ny = labelencoder_X_1.fit_transform(y)\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 0)\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","635c2bcf":"classifier = Sequential([\n    Dense(48, input_shape=(12,), activation='relu'),\n    Dense(24, activation='relu'),\n    Dense(12, activation='relu'),\n    Dense(6, activation='relu'),\n    Dense(3, activation='relu'),\n    Dense(1, activation='sigmoid')\n])","e4777b68":"classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","38a16438":"history=classifier.fit(X_train, y_train,validation_data=(X_test, y_test), batch_size=100, epochs=20)","c4265c3d":"classifier.summary()","11683f21":"sns.set()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n# Accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n# Loss plot\nplt.plot(epochs, loss, color='green', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","307e2179":"y_pred = classifier.predict(X_test)\ny_pred","de9f0bd1":"y_pred1 = (y_pred > 0.5)\ny_pred1","4c612dcd":"from sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred1)\nprint(cm)\nprint(\"accuracy is {}%\".format(((cm[0][0] + cm[1][1])\/57)*100))","92b35ac0":"def predict(model, X):\n    pred = model.predict(X).flatten()\n    pred[pred > 0.5] = 1\n    pred[pred <= 0.5] = 0\n    return pred\n\ndef plot_actual_vs_predicted(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(7,7))\n    sns.heatmap(cm, annot=True, fmt='g')\n    \n    #Labelling\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(title)\n    plt.show()","7201d683":"plot_actual_vs_predicted(y_test, y_pred1, 'Test Data Predictions')\nprint(classification_report(y_test, y_pred1))","68883950":"classifier.save('cardiack risk prediction.h5')","e81edc1f":"Dataset link:- https:\/\/cainvas-static.s3.amazonaws.com\/media\/user_data\/shyamalkrish\/archive_13.zip"}}