{"cell_type":{"6e272696":"code","9525f0ec":"code","0074fccc":"code","0f629c2e":"code","32534983":"code","80c52a0e":"code","8d61506a":"code","1efd110a":"code","43da6248":"code","2856ac3d":"code","94a1e568":"code","336151ce":"code","eeaddaf1":"code","29c7e17d":"code","5ab426c4":"code","2c5553cd":"code","8150a22b":"code","e47efd68":"code","b24a4677":"code","9a62aee4":"code","5d9afe58":"code","00234d43":"code","3e13f074":"code","b57fc6fa":"code","a45331ec":"code","a3deb643":"code","56df2128":"code","85392e11":"code","61fc7496":"code","ccd9ca07":"code","16910fde":"code","00f838be":"code","2879f3bd":"code","ca19ff6b":"markdown"},"source":{"6e272696":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9525f0ec":"\n# \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf = pd.read_csv('\/kaggle\/input\/predicting-a-pulsar-star\/pulsar_stars.csv')\n\n# \u041d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\ncolumns = ('meanIntProf standardIntProf excessIntProf skewnessIntProf meanDMsnr standardDMsnr excassDMsnr skewnessDMsnr class')\n\n\ndf.columns = columns.split() #\u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u043a\u0430\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 columns","0074fccc":"df.head()","0f629c2e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \n# \u0442.\u043a. \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442\ndf.info()","32534983":"#\u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nlen(list(df.columns)) - len(df._get_numeric_data().columns)","80c52a0e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u043d\u0444\u043e \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ndf.describe()","8d61506a":"from matplotlib import pyplot as plt\n%matplotlib inline\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nfig = plt.figure(figsize=(15,15)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0444\u0438\u0433\u0443\u0440\u044b\ncols = 3                         # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (\u043a\u0430\u043a \u043d\u0430\u043c \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c)\nrows = np.ceil(float(df.shape[1]) \/ cols) # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a | np.ceil - \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u043a \u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443. \u0414\u0435\u043b\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a cols\nfor i, column in enumerate(df.columns): # \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e i, column \u0432 \u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u043d\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a:\n    ax = fig.add_subplot(rows, cols, i + 1)       # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0441\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n    ax.set_title(column)                          # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n    df[column].hist()            # \u043f\u043e [\u043a\u043e\u043b\u043e\u043d\u043a\u0435] \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a. \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 hist, \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 ax\n    plt.xticks(rotation=\"vertical\")               # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439\nplt.subplots_adjust(hspace=0.7, wspace=0.2)       # \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c","1efd110a":"# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443, \u0438\u0449\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\nimport seaborn as sns\n\nplt.subplots(figsize=(10,10))\n#print(plt.subplots(figsize=(10,10)))\nsns.heatmap(df.corr(), square = True, annot = True)     # \u043c\u0435\u0442\u043e\u0434 .corr() \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u043b\u044f\u0446\u0438, .heatmap - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443\nplt.show()                                # \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c","43da6248":"# \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 excessIntProf & skewnessIntProf. \u0414\u0440\u043e\u043f\u043d\u0435\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\ndf.drop(['skewnessIntProf'], inplace = True, axis = 1)","2856ac3d":"#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 numpy \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\nX = np.array(df.drop(['class'], axis = 1))\ny = np.array(df['class'])","94a1e568":"X","336151ce":"y","eeaddaf1":"# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\nfrom sklearn.preprocessing import scale # \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c scale\nX_scaled = scale(np.array(X,dtype = 'float'), with_std = True, with_mean = True) # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 X_scale \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0439 numpy \u043c\u0430\u0441\u0441\u0438\u0432\nX_scaled","29c7e17d":"# \u0411\u0430\u043b\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0437\u0432\u0435\u0437\u0434 \u043d\u0435 \u043f\u0443\u043b\u044c\u0441\u0430\u0440\u043e\u0432\nnot_pulsar_index = np.argwhere(y == 0).flatten() # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \"0\" \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \nnot_pulsar_index, len(not_pulsar_index)","5ab426c4":"#\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\nfrom sklearn.utils import shuffle\n\nnot_pulsar_index = shuffle(not_pulsar_index, random_state = 42)\nnot_pulsar_index = not_pulsar_index[len(np.argwhere(y == 1).flatten()):]\nnot_pulsar_index, len(not_pulsar_index)","2c5553cd":"#\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0431\u0430\u043b\u043b\u0430\u043d\u0441\nlen(np.argwhere(y == 0).flatten()) - len(not_pulsar_index) == len(np.argwhere(y == 1).flatten())","8150a22b":"# \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \nX_scaled = np.delete(X_scaled, not_pulsar_index, 0)\ny = np.delete(y, not_pulsar_index, 0)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\nX_scaled.shape, y.shape","e47efd68":"# \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 80\/20\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.20)","b24a4677":"# K \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439. \u042e\u0437\u0430\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nknn = KNeighborsClassifier()\nknn_grid = {'n_neighbors': np.array(np.linspace(15, 25, 15), dtype='int')}\ngs = GridSearchCV(knn, knn_grid, cv=5)\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\ngs.fit(X_train, y_train)\ngs.best_params_, gs.best_score_\n","9a62aee4":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\n\ndef grid_plot(x, y, x_label, title, y_label='roc_auc'):\n    plt.figure(figsize=(12, 6)) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0442\u0433\u0443\u0440\u0443\n    plt.grid(True)              # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443\n    plt.plot(x, y, 'go-')       # \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n    plt.xlabel(x_label)         # \u041f\u043e\u0434\u043f\u0438\u0441\u044c \u043f\u043e \u043e\u0441\u0438 X \n    plt.ylabel(y_label)         # \u041f\u043e\u0434\u043f\u0438\u0441\u044c \u043f\u043e \u043e\u0441\u0438 Y\n    plt.title(title)            # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430","5d9afe58":"# \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n# \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0435 cv_results_ \u043e\u0431\u044a\u0435\u043a\u0442\u0430 gs\n\ngrid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","00234d43":"# \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0442\u043e\u0447\u0435\u043a\nknn = KNeighborsClassifier()\nknn_grid = {'n_neighbors': np.array(np.linspace(5, 20, 20), dtype='int')}\ngs = GridSearchCV(knn, knn_grid, cv=10)\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\ngs.fit(X_train, y_train)\ngs.best_params_, gs.best_score_\n","3e13f074":"# \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\nbest_par = {}\nbest_par['KNN'] = gs.best_score_","b57fc6fa":"# \u0441\u0442\u0440\u043e\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\ngrid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","a45331ec":"# \u043e\u0431\u0443\u0447\u0430\u0435\u043c  \u0441 \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\nmodel_knn = KNeighborsClassifier(n_neighbors = 10)\nmodel_knn.fit(X_train, y_train)\n\ny_knn = model_knn.predict(X_test)","a3deb643":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn import metrics\n\nprint ('knn.accuracy =', metrics.accuracy_score(y_test, y_knn), 'knn.f1_score =', metrics.f1_score(y_test, y_knn))\ncr = metrics.classification_report(y_test, y_knn)\nprint(cr)","56df2128":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nfrom sklearn.ensemble import RandomForestClassifier\n\nparam_grid = {'n_estimators': [i for i in range(2, 50)]} # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u0438\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n\nalg = RandomForestClassifier()\ngs = GridSearchCV(alg, param_grid, cv=5)\ngs.fit(X_train, y_train)\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\ngrid_plot(param_grid['n_estimators'], gs.cv_results_['mean_test_score'], 'n_estimators', 'forest')","85392e11":"# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nprint(gs.best_params_, gs.best_score_)\nmodel_forest = RandomForestClassifier(n_estimators = gs.best_params_['n_estimators'])\nmodel_forest.fit(X_train, y_train)\n\ny_forest = model_forest.predict(X_test)","61fc7496":"best_par['RandomForest'] = gs.best_score_","ccd9ca07":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nprint(metrics.classification_report(y_test, y_forest))\n","16910fde":"# \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438. \u0412\u0441\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440:\nfrom sklearn.linear_model import LogisticRegression\n\nparam_grid = {'penalty': ['l1', 'l2'],'C': np.array(np.linspace(1, 20, 20), dtype='int')}\nlc = LogisticRegression()\ngs = GridSearchCV(lc, param_grid, cv=5)\n# \u043e\u0431\u0443\u0447\u0430\u0435\u043c\ngs.fit(X_train, y_train)\n\ngs.best_params_, gs.best_score_\n","00f838be":"best_par['LogisticRegression'] = gs.best_score_\nmodel_lr = LogisticRegression(penalty = gs.best_params_['penalty'], C = gs.best_params_['C'])\nmodel_lr.fit(X_train, y_train)\n\ny_forest = model_lr.predict(X_test)","2879f3bd":"import pylab\n\nprint(best_par)\n\nfig = plt.figure(figsize=(8,6))\nplt.bar (range(len(best_par)), best_par.values(), align = 'center')\n\nplt.ylabel('Scores')\nplt.xticks(range(len(best_par)),best_par.keys())\nplt.legend()\nplt.title('\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435')\npylab.ylim(0.85, 0.980)\n\nplt.show()","ca19ff6b":"\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u0444\u0439 \u043b\u0435\u0441 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0443\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u0441\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.\n"}}