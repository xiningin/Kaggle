{"cell_type":{"d76573b9":"code","34383817":"code","e2ccc830":"code","8bb06720":"code","3b2986e1":"code","a330d87b":"code","3985ff91":"code","ae04a1b5":"code","791aabf0":"code","92b19284":"code","7a860771":"code","29087564":"code","61bf4366":"code","8e4f662d":"code","f307e965":"code","d688293c":"code","97c8c8dc":"code","3760b7bc":"code","63e907f4":"code","d4d5cfb3":"code","92ed5eeb":"code","f33afb85":"code","4a9bdbbb":"code","a1f568ec":"code","1587c2ad":"code","3f412e1c":"code","b7ef7392":"code","de373490":"code","e0ff3e16":"code","ce0a6dbf":"code","2e2d3074":"code","170be350":"code","cef2d596":"code","a584fcd4":"code","ba5a5457":"code","8d0fb972":"code","a84adc40":"code","4db4be56":"code","4cb8e9d8":"code","6350eefe":"code","5feae712":"code","1a6d1da0":"code","29b8f5b4":"code","ffb54ad0":"code","07d1ef5f":"code","e1e5f3fe":"code","2051a9a4":"code","ee02eb7b":"code","f7bbfeba":"code","0af6a1c3":"code","ef068824":"code","16a248bf":"code","9d5b3fe8":"markdown","2e5fbabe":"markdown","64df2c93":"markdown","1ef7682b":"markdown","7262c158":"markdown","9685cd0c":"markdown","fb688759":"markdown","a3f982ca":"markdown","6234db85":"markdown","02691c3e":"markdown","509b6a94":"markdown","6808f486":"markdown"},"source":{"d76573b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34383817":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nimport tensorflow_hub as hub\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom collections import OrderedDict,Counter\nimport sklearn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.manifold import TSNE\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nimport string\nimport re","e2ccc830":"n_splits=7\nrandom_state=27","8bb06720":"stop=stopwords.words('english')","3b2986e1":"def get_keyword_mean(train_df,val_df,column='keyword',target='target'):\n    aggregate_column=column+'_mean'\n    train_df[aggregate_column]=train_df.groupby(column)[target].transform('mean')\n    \n    val_df = val_df.merge(\n                train_df[[column, aggregate_column]].drop_duplicates(),\n                on=column,\n                how=\"left\",\n            )\n    return train_df,val_df","a330d87b":"def cv_datasets(df,model,regex='^BERT',target_column='target',use_keyword=False,model_function=None,compile_dic={},**kwargs):\n    '''\n    df: Dataframe to divide the data.\n    model: Model used to fit and evaluate the data.\n    regex: Regex used to pick a column. By default, it searches for the columns starting with BERT.\n    target_column: Name of the column containing the output.\n    compile_dic: It is only used for keras models\n    '''\n    kfold=KFold(n_splits=n_splits,shuffle=True,random_state=random_state)\n    results={'Total':0}\n    i=0\n    \n    #iterate through the folds\n    for train_index,val_index in kfold.split(df):\n        \n        if 'keras' in str(type(model)):\n            #keras\n            model_copy=model_function()\n            model_copy.compile(**compile_dic)\n    \n            model_copy.summary()\n        else:\n            #sklearn\n            model_copy= sklearn.base.clone(model)\n            \n        train_df=df.iloc[train_index]\n        val_df=df.iloc[val_index]\n        \n        if use_keyword:\n            train_df,val_df=get_keyword_mean(train_df,val_df)\n            regex+='|^keyword_'\n        \n        X_train=train_df.filter(regex=regex,axis=1)\n        y_train=train_df[target_column]\n        \n        X_val=val_df.filter(regex=regex,axis=1)\n        y_val=val_df[target_column]\n        \n        #print(X_train)\n        X_train=X_train.copy().values\n        y_train=y_train.copy().values\n        \n        X_val=X_val.copy().values\n        y_val=y_val.copy().values\n        \n        'The problem with keras mmodels is the copy itself'\n        model_copy.fit(X_train,y_train,**kwargs)\n        \n        predicted=model_copy.predict(X_val)\n        \n        metric=confusion_matrix(y_val,predicted)\n        \n        tn, fp, fn, tp = metric.ravel()\n        \n        results_matrix=metric\n        results['Batch '+str(i)]=results_matrix \n        results['Total']+=np.array(results_matrix)\n        i+=1\n        \n        print(f'{i}th run:\\naccuracy: {(tp+tn)\/(tn+fp+fn+tp)}\\nprecision:{tp\/(tp+fp)}\\nrecall:{tp\/(tp+fn)}\\n')\n    \n    \n    tn, fp, fn, tp = results['Total'].ravel()\n    \n    print(f'Total:\\naccuracy: {(tp+tn)\/(tn+fp+fn+tp)}\\nprecision:{tp\/(tp+fp)}\\nrecall:{tp\/(tp+fn)}\\n')\n    \n    return results\n        ","3985ff91":"def fit_and_predict(model,train_df,test_df,use_keyword=False,regex='^BERT',target_column='target',**kwargs):\n    if use_keyword:\n        train_df,test_df=get_keyword_mean(train_df,test_df)\n        regex+='|^keyword_'\n\n    X_train=train_df.filter(regex=regex,axis=1)\n    y_train=train_df[target_column]\n\n    X_test=test_df.filter(regex=regex,axis=1)\n    \n    model.fit(X_train,y_train,**kwargs)\n    \n    test_df['predictions']=(model.predict(X_test)>0.5).astype(int)\n    \n    return test_df","ae04a1b5":"def generate_submission(test_df,predictions_column='predictions',name='submission'):\n#     new_submission=pd.DataFrame()\n#     new_submission['id']=test_df['id']\n#     new_submission['target']=predictions\n#     new_submission=new_submission.set_index('id')\n    \n    new_submission=test_df[['id',predictions_column]].set_index('id').rename(columns={predictions_column:'target'})\n    print(f'saving the results in {name}.csv')\n    new_submission.to_csv(name+'.csv')\n    print('finished saving')\n    \n    return new_submission","791aabf0":"def generate_results(df,model,name='submission',regex='^BERT',target_column='target',use_keyword=False,compile_dic={},model_function=None,**kwargs):\n    df['keyword']=df['keyword'].fillna('unk')\n    df['location']=df['location'].fillna('unk_location')\n    \n    train_df=df[df['trainable']==1]\n    test_df=df[~(df['trainable']==1)]\n    \n    results=cv_datasets(train_df,model,regex=regex,target_column=target_column,model_function=model_function,use_keyword=use_keyword,**kwargs)\n    \n    test_df=fit_and_predict(model,train_df,test_df,use_keyword=use_keyword,regex=regex,target_column=target_column,**kwargs)\n    \n    test_df['predictions']=test_df['predictions'].values>0.5\n    test_df['predictions']=test_df['predictions'].astype(int)\n    \n    submission=generate_submission(test_df,predictions_column='predictions',name=name)\n    \n    return results,test_df,submission","92b19284":"df=pd.read_csv('\/kaggle\/input\/bert-features\/BERT_processed.csv')\nresults,test_df,submission=generate_results(df,model=LogisticRegression(solver='sag'),use_keyword=True)","7a860771":"df=pd.read_csv('\/kaggle\/input\/bert-features\/BERT_processed.csv')\n\nrf_parameters={\n    'n_estimators':300,\n    'max_depth':20,\n    'min_samples_split':80,\n    'min_samples_leaf':30,\n    'min_weight_fraction_leaf':0.0,\n    'max_features':'auto',\n    'max_leaf_nodes':40,\n    'min_impurity_decrease':0.0,\n    'min_impurity_split':None,\n}\nresults,test_df,submission=generate_results(df,model=RandomForestClassifier(**rf_parameters),use_keyword=True)","29087564":"#Best till now\ndf=pd.read_csv('\/kaggle\/input\/bert-features\/BERT_processed.csv')\nresults,test_df,submission=generate_results(df,model=SVC(C=5),use_keyword=True)","61bf4366":"df=pd.read_csv('\/kaggle\/input\/bert-features\/BERT_processed.csv')\nresults,test_df,submission=generate_results(df,model=KNeighborsClassifier(200,weights='distance',p=2),use_keyword=True)","8e4f662d":"results,test_df,submission\nresults['Total']","f307e965":"tn, fp, fn, tp = results['Total'].ravel()\n(tn+tp)\/(tn+fp+fn+tp)","d688293c":"train_df=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')","97c8c8dc":"sample_submission","3760b7bc":"train_df[train_df['keyword'].notnull()]","63e907f4":"test_df['keyword']=test_df['keyword'].fillna('unk')\ntest_df","d4d5cfb3":"train_df.describe()","92ed5eeb":"pd.isna(train_df).sum()\/len(train_df)","f33afb85":"positive_class=train_df['target'].sum()\/len(train_df)\nprint(f'the percentage of ones in the dataset is {np.round(positive_class,2)}')","4a9bdbbb":"keyword_df=pd.DataFrame()\ni=0\nfor keyword,group_df in train_df[['keyword','target']].fillna('unk').groupby('keyword'):\n    positive_Kkeyword=group_df['target'].sum()\/len(group_df)\n    keyword_df.loc[i,['keyword']]=keyword\n    keyword_df.loc[i,['count']]=len(group_df)\n    keyword_df.loc[i,['% positive']]=positive_Kkeyword\n    i+=1\n#keyword_df.to_csv('keyword_df.csv')","a1f568ec":"location_df=pd.DataFrame()\ni=0\nfor keyword,group_df in train_df[['location','target']].fillna('unk').groupby('location'):\n    positive_Kkeyword=group_df['target'].sum()\/len(group_df)\n    location_df.loc[i,['location']]=keyword\n    location_df.loc[i,['count']]=len(group_df)\n    location_df.loc[i,['% positive']]=positive_Kkeyword\n    i+=1\n#location_df.to_csv('location_df.csv')","1587c2ad":"keyword_df.head()","3f412e1c":"print(keyword_df[keyword_df['keyword']==test_df.iloc[0]['keyword']]['% positive'].values[0])\nnew_submission=pd.DataFrame()\nnew_submission['id']=test_df['id']\nnew_submission['target']=test_df.apply(lambda row: int(keyword_df[keyword_df.keyword==row['keyword']]['% positive'].values[0]>=0.5),axis=1)","b7ef7392":"#new_submission.rename({0:'target'},axis=1)\nnew_submission.to_csv('to_submit.csv')","de373490":"new_submission","e0ff3e16":"train_ls=list(train_df['text'].str.split(' ').to_numpy())\ntrain_outputs=train_df['target'].values\n\nassert len(train_ls)==len(train_outputs), 'ERROR'","ce0a6dbf":"Tokenizer=keras.preprocessing.text.Tokenizer(oov_token=0)\nTokenizer.fit_on_texts(train_ls)","2e2d3074":"i=0\nn_words=len(Tokenizer.word_counts)\nfor word,count in Counter(Tokenizer.word_counts).most_common():\n    print(f'{word}: {count}')\n    i+=1\n    if count<100:\n        break\n\nprint(f'{i} word are the most common from {n_words} which is {i\/n_words*100}%')","170be350":"sns.countplot(x='target',data=train_df)","cef2d596":"max_characters=np.max(train_df['text'].apply(lambda x: len(x)))\nprint(f'the max number of characters in a tweet is {max_characters}\\nThus, the number of word < {max_characters}')","a584fcd4":"type(Counter(Tokenizer.word_counts).most_common())","ba5a5457":"top_100=Counter(Tokenizer.word_counts).most_common()[:100]\n\nx_top_100=[x for x,y in top_100]\ny_top_100=[y for x,y in top_100]\nax=sns.barplot(x=y_top_100,y=x_top_100)\nax.figure.set_size_inches(15,20)","8d0fb972":"bottom_100=Counter(Tokenizer.word_counts).most_common()[-100:]\n\nx_bottom_100=[x for x,y in bottom_100]\ny_bottom_100=[y for x,y in bottom_100]\n\n#Horizontal barplot\nax=sns.barplot(x=y_bottom_100,y=x_bottom_100)\nax.figure.set_size_inches(15,20)","a84adc40":"word_occurances={}\nword_occurances_no_stopwords={}\n\nfor i in range(len(train_ls)):\n    sentence=train_ls[i]\n    output=train_outputs[i]\n    \n    sentence=list(filter(lambda a: a != '', sentence))\n    \n    #Get the unique set of words. If a word appeare more than one in a sentence, I do not want to count it\n    unique_words=set(sentence)\n    \n    for word in unique_words:\n        word_lower=word.lower()#convert to lower\n        #get the values from dictionary of present, else return them as (0,0)\n        total_number,positive_number=word_occurances.get(word_lower,(0,0))\n        \n        #remove non alphanumeric words\n        word_lower=re.sub(r'[^a-zA-Z0-9 ]', '', word_lower)\n        \n        total_number+=1#increment total_number\n        # If output is 1, then increment positive_number \n        if output==1:\n            positive_number+=1\n        \n        #update the dictionaries\n        word_occurances[word_lower]=(total_number,positive_number)\n        if (word_lower not in stop) and ('http' not in word_lower):\n            word_occurances_no_stopwords[word_lower]=(total_number,positive_number)","4db4be56":"#Generate new dictonaries with key as word and value as the probability\n#Let us take the values that occured between 20 and 100.\n#If a word appeared just once and it is a disaster, it is difficult to say that the word indictes a disaster.\n#Feel free to change the boundaries and test them.\ndisaster_prob={key:(value[1]\/value[0]) for key,value in word_occurances.items() if value[0]>20 and value[0]<100}\ndisaster_prob_no_stopwords={key:(value[1]\/value[0]) for key,value in word_occurances_no_stopwords.items() if value[0]>20 and value[0]<100}","4cb8e9d8":"print('length of the dictionary:',len(disaster_prob))\nprint('words with probability<1:',len([key for key,value in disaster_prob.items() if value !=1]))","6350eefe":"top_100=Counter(disaster_prob).most_common()[:100]\n\nx_top_100,y_top_100=zip(*top_100)\nax=sns.barplot(x=list(y_top_100),y=list(x_top_100))\nax.figure.set_size_inches(15,20)","5feae712":"bottom_100=Counter(disaster_prob).most_common()[-100:]\n\nx_bottom_100,y_bottom_100=zip(*bottom_100)\nax=sns.barplot(x=list(y_bottom_100),y=list(x_bottom_100))\nax.figure.set_size_inches(15,20)","1a6d1da0":"print('length of the dictionary',len(disaster_prob_no_stopwords))\nprint('words with probability<1',len([key for key,value in disaster_prob_no_stopwords.items() if value !=1]))","29b8f5b4":"top_100=Counter(disaster_prob_no_stopwords).most_common()[:100]\n\nx_top_100,y_top_100=zip(*top_100)\nax=sns.barplot(x=list(y_top_100),y=list(x_top_100))\nax.figure.set_size_inches(15,20)","ffb54ad0":"bottom_100=Counter(disaster_prob_no_stopwords).most_common()[-100:]\n\nx_bottom_100,y_bottom_100=zip(*bottom_100)\nax=sns.barplot(x=list(y_bottom_100),y=list(x_bottom_100))\nax.figure.set_size_inches(15,20)","07d1ef5f":"from nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nimport string\nimport re","e1e5f3fe":"stop=stopwords.words('english')\n\n# for i in stop:\n#     print(i)","2051a9a4":"total_df=pd.DataFrame()\n\ntrain_df['trainable']=1\ntest_df['trainable']=0\n\ntotal_df=pd.concat((train_df,test_df))\ntotal_df","ee02eb7b":"train_ls_tmp=[]\nstemmer= PorterStemmer()","f7bbfeba":"def get_stem(word:str,stemmer):\n    '''\n    Get the stem of the word\n    '''\n    return stemmer.stem(word)","0af6a1c3":"def preprocess_sentence(text,stemmer):\n    new_sentence=[]\n    \n    text = text.replace(r\"won't \", \"will not \")\n    text = text.replace(r\"can't \", \"can not \")\n    text = text.replace(r\"ain't \", \"am not \")\n    \n    text = text.replace(r\"n't \", \" not \")\n    text = text.replace(r\"'re \", \" are \")\n    text = text.replace(r\"'s \", \" is \")\n    text = text.replace(r\"'d \", \" would \")\n    text = text.replace(r\"'ll \", \" will \")\n    text = text.replace(r\"'t \", \" not \")\n    text = text.replace(r\"'ve \", \" have \")\n    text = text.replace(r\"'m \", \" am \")\n    \n    text = text.translate(str.maketrans('','',string.punctuation))\n    \n    text=re.sub(r'[^a-zA-Z0-9 ]', '', text)\n    #print(text)\n    sentence=text.split(' ')\n    \n    #remove words that are not in english\n    sentence=list(filter(lambda a: a != '', sentence))\n    \n    for word in sentence:\n        #word=stemmer.stem(word)\n        word_lower=word.lower()\n        if (word_lower not in stop) and ('http' not in word_lower):# and ():\n            new_sentence.append(word_lower)\n    \n    return ' '.join(new_sentence)\n\npreprocess_sentence(\"Hey I'm Yann, \u00b0 \u00d1  how're you and how's it going ? That's interesting: I'd love to hear more about it. http:idk.com\",stemmer)","ef068824":"total_df['preprocessed_text']=total_df['text'].apply(lambda text: preprocess_sentence(text,stemmer))\ntotal_df.head()","16a248bf":"total_df.to_csv('preprocessed_text.csv')","9d5b3fe8":"<h4>\nThe bottom 100 words are all links. I do not think that the presence of a link means a disater happened. I do not expect that a disaster happened if someone tweeted 'check this link http:...'. If there was a link or a radio source that only give information about disasters. Hence, the links will be removed too.\n<\/h4>","2e5fbabe":"<h4>\n    <b>Relation beteen words and disaster:<\/b><br\/><br\/>\n    Now let us see the probability of positive knowing the word. I ill create a dictionary with keys as words and values as a tuple (total_occurances, positive_occurances,disaster_probability).<br\/><br\/>\n    total_occurances: The number of times the word appears.<br\/>\n    positive_occurances: The number of times the word occurs in a positive sentence.\n    <br\/>\n    <br\/>\n    Afterwards, we can approximate the probability of disaster knowing word gy dividing positive_occurances by total_occurances. This may look useless, but the model may learn to classify sentences as disasters by just checking the occurance of certain words. That is why it is good to know this metric.\n<\/h4>","64df2c93":"<h2><b>Get The Data<\/b><\/h2>","1ef7682b":"<h1><b><u>Disaster Tweets Classification <\/u><\/b><\/h1>\n\n<h4 style='text-align: justify;'>\nThis notebook is mainly to preprocess the dataset. At the beginning, I tested the accuracy that can be reached by using trivial methods to predict the output. Afterwards, the data is procesed to be use by BERT. The machine learning models are notshown in this notebook because I focused on the models on another notebook. Neural networks with BERT was the main interest, yet other algorithm were used too.\n<br\/>\nFor the machine learning models, check the link below:\n    <a href='https:\/\/www.kaggle.com\/fmakarem\/disaster-tweets-bert'>Machine Learning Notebook<\/a>\n<\/h4>","7262c158":"<h4 style='text-align: justify;'>\nLooking at the top 100 words makes us realized the most used words like 'a' do not give a lot of information if a disaster did occur or not. Actually, only emergency and disaster are word that indicate the possibility of a disaster occuring. Hence, most of the words are stop words that do not give much information about the tweet itself. These words will be removed.\n<\/h4>","9685cd0c":"<h1>Conclusion<\/h1>\n\n<h4 style='text-align: justify;'>\nThis notebook started by generating outputs using simple methods from the non-tweet features. The keyword output got 72% accuracy. Afterwards, some plots for visualization were shown. The plot showed the effect of stop words and links. Finally, the text was preprocessed to be used with BERT.\n<\/h4>\n\n<h4>\n    <b>\n        Thank You for reading. I hope it was helpful.\n    <\/b>\n<\/h4>\n\n<h4>\n    If you wish to see the prediction part, Checkout my BERT notebook <a href='https:\/\/www.kaggle.com\/fmakarem\/disaster-tweets-bert'>Here<\/a>\n<\/h4>","fb688759":"<h2><b>Functions<\/b><\/h2>\n\n<h4>\nHere some useful functions are created\n<\/h4>","a3f982ca":"<h2><b>Visualizations<\/b><\/h2>","6234db85":"<h4>\nThe keyword generated output file got 72% score while the location file got a lower score. The location output file generated a lower score than the keyword. This is expected because the location column contains a lot of null values. <br\/>\nNotice the difference between the sample submission (57%) and the result only using the keyword (72%). This shows the value of the keyword column for this task. It is expected because the keyword is a summary of the tweet using one word.\n<\/h4>","02691c3e":"<h2><b>Process Tweets<\/b><\/h2>\n\n<h4>\nThe tweets are processed using the nltk library.\n<\/h4>","509b6a94":"<h2><b>Simple Methods<\/b><\/h2>\n\n<h4 style='text-align: justify;'>\nFirst I did submit the sample results. It achieved a 57% accuracy score. Afterwards, I used generated output files from each of the keyword and location columns. Hence, we can sense what score can be reached using easy methods and whatmore advanced ones can do.\n<\/h4>","6808f486":"<h4>The idea is to group each row with the same column value (for keyword_df the keyword column while for the location_df the location column). Afterwards, some useful information is added, the most important one (the one that is used in the model) is the % positive which is basically the mean of the target for each group.<\/h4>"}}