{"cell_type":{"cad0086a":"code","725e067e":"code","d067e1f6":"code","4444fade":"code","533c5a18":"code","3adc39b2":"code","a545e41e":"code","5c439d48":"code","655b3635":"code","7fc88085":"code","7bbc8e7b":"code","1e1bdb4b":"code","b76e11af":"code","af3c2cff":"code","5f823d13":"code","adc1b76b":"code","572cfc20":"code","82ec2e91":"code","f1467de1":"code","8714cd87":"code","655b0ea3":"code","ffcf1e54":"code","c735f9db":"markdown","6daa8881":"markdown","de1cb6c1":"markdown","6093010e":"markdown","ee1e2e02":"markdown","ea3f1a93":"markdown","f550367b":"markdown","b95a8886":"markdown","8350ecd8":"markdown","65d55b41":"markdown","904ff763":"markdown","cd4728d4":"markdown","7c72c61d":"markdown"},"source":{"cad0086a":"# import relevant libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","725e067e":"# extract the .csv file\nraw_data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\nraw_data.head()","d067e1f6":"# Checking 0 valued features except the \"Pregnancies\" and \"Outcome\" which can be 0.\ntemp = raw_data.drop(labels = [\"Pregnancies\",\"Outcome\"],axis = 1)\nfor i in temp.columns:\n    print((temp[i] == 0).sum().sum())","4444fade":"for i in temp.columns:\n    temp[i] = temp[i].replace(0,round(temp[i].mean(),2))","533c5a18":"temp.head()","3adc39b2":"# assign these values to the orginal dataframe\nraw_data[temp.columns] = temp[temp.columns]\ndata = raw_data","a545e41e":"data.head()","5c439d48":"data.describe()","655b3635":"# residual plots of features\nfig, ax =plt.subplots(2,3,figsize=(15,7))\nsns.distplot(data['Glucose'], ax=ax[0][0])\nsns.distplot(data['BloodPressure'], ax=ax[0][1])\nsns.distplot(data['SkinThickness'], ax=ax[0][2])\nsns.distplot(data['Insulin'], ax=ax[1][0])\nsns.distplot(data['BMI'], ax=ax[1][1])\nsns.distplot(data['DiabetesPedigreeFunction'], ax=ax[1][2])","7fc88085":"initial_data  = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\na = round(initial_data[\"Insulin\"].mean(),2)\nb = round(initial_data[\"SkinThickness\"].mean(),2)\na,b","7bbc8e7b":"data = data.drop(raw_data[((raw_data.Insulin == a) & (raw_data.SkinThickness == b))].index)","1e1bdb4b":"sns.distplot(data['SkinThickness'])","b76e11af":"sns.distplot(data['Insulin'])","af3c2cff":"data.head()","5f823d13":"# The target (dependent variable) is 'Outcome'\ntargets = data[\"Outcome\"]\n\n# And the inputs are the rest\ninputs = data.drop(\"Outcome\",axis = 1)","adc1b76b":"# Import the scaling module\nfrom sklearn.preprocessing import StandardScaler\n\n# I'm going to create an scaler object\nscaler = StandardScaler()\n# Fit the inputs (calculate the mean and standard deviation feature-wise)\nscaler.fit(inputs)","572cfc20":"# Creating new input variable\nscaled_inputs = scaler.transform(inputs)","82ec2e91":"# Import the module for the split\nfrom sklearn.model_selection import train_test_split\n\n# Split the variables with an 80-20 split and some random state\nx_train, x_test, y_train, y_test = train_test_split(scaled_inputs, targets, test_size=0.2, random_state=42)","f1467de1":"# Import the module for the regression\nfrom sklearn.linear_model import LogisticRegression\n# We must use logistic regression because the desired output should be either 1 or 0.\n\n# Create a regression object\nlog_reg = LogisticRegression()\n\n# Fitted the regression with train data\nlog_reg.fit(x_train,y_train)\n\n# Find the R-squared of the model\nlog_reg.score(x_train,y_train)","8714cd87":"from sklearn import metrics\ny_pred = log_reg.predict(x_test)\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\ncnf_matrix","655b0ea3":"# Let's evaluate the model using model evaluation metrics such as accuracy, precision, and recall.\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","ffcf1e54":"y_pred_proba = log_reg.predict_proba(x_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c735f9db":"## Regression Model","6daa8881":"### Scale the data","de1cb6c1":"### Create the regression","6093010e":"Now we have much more appropriate values","ee1e2e02":"### Receiver Operating Characteristic(ROC)","ea3f1a93":"### Train Test Split","f550367b":"Although the other features follow a Normal Distrubition, Insulin and SkinThickness got some spikes in their PDFs. This will confuse our model. I am going to drop the rows which holds both Insulin's and SkinThickness' means.","b95a8886":"### Confusion Matrix Evaluation Metrics\n","8350ecd8":"### Confusion Matrix\n","65d55b41":"## Checking PDFs","904ff763":"## Explore and Clean the Data","cd4728d4":"### Declare the inputs and the targets","7c72c61d":"As we can see there are a lot of non-logical values in the dataset. So we just can't simply drop them. I chose to replace them with their local mean."}}