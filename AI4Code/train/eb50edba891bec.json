{"cell_type":{"d4d5ba42":"code","19cdb751":"code","b954314a":"code","37ff4f5d":"code","548fb12d":"code","f3a6af7b":"code","30a55406":"code","d8927984":"code","349d771b":"code","2ef50529":"code","967109cd":"code","9684be20":"code","b5ced838":"code","c1bae75b":"code","1a312592":"code","8e9b758a":"code","2c50d4fe":"code","6c5dfca7":"markdown","d374d7e7":"markdown","e062d4a7":"markdown","8155cd62":"markdown","7de28367":"markdown","9a4a058d":"markdown","61c03e96":"markdown","db8c7ad4":"markdown","8109517d":"markdown","b9cabd29":"markdown","0657feb3":"markdown","69901e57":"markdown","ba7a94c6":"markdown","10780928":"markdown","9a496d1b":"markdown","c343caa6":"markdown","c77d05d2":"markdown","b808ffe6":"markdown","97e5b726":"markdown","15f62a13":"markdown","82525020":"markdown","238cee79":"markdown","df47aa75":"markdown","212471d6":"markdown","e99718fc":"markdown"},"source":{"d4d5ba42":"# Libraries\nimport pandas as pd\nimport numpy as np","19cdb751":"# Reading the data\nportfolio = pd.read_csv(\"..\/input\/performance-measures-of-a-portfolio\/stock.csv\")\nportfolio = portfolio.set_index('date')\nportfolio.head()","b954314a":"# Initial weight for each stock in order\nstocks = ['AAPL','MSFT','GOOG']\ninitial_weight = np.array([0.30, 0.30, 0.40])","37ff4f5d":"# Daily return from each stock \nreturn_stocks = portfolio.pct_change()\nreturn_stocks.head(5)","548fb12d":"# Answer here\nreturn_stocks[return_stocks.GOOG == return_stocks.GOOG.min()]","f3a6af7b":"# Answer here\nstock_risk = return_stocks.std()\nprint(stock_risk)","30a55406":"# Average daily return from each stock\ndaily_returns_mean = return_stocks.mean()\nprint(daily_returns_mean)","d8927984":"# Answer here\n# Total Portfolio Return - Store the reults in \"portfolio_return\"\n# Total Portfolio Return = Weighted average of return from each stock\nallocated_daily_returns = (initial_weight * daily_returns_mean)\nportfolio_return = np.sum(allocated_daily_returns)\nprint(portfolio_return)","349d771b":"# Portfolio daily returns\nreturn_stocks['Portfolio_Daily_Return'] = return_stocks.dot(initial_weight)\nreturn_stocks.tail(5)","2ef50529":"# Plot\nreturn_stocks['Portfolio_Daily_Return'].plot()","967109cd":"# Cumulative return from the portfolio\nCumulative_returns_daily = (1+return_stocks).cumprod()\nCumulative_returns_daily.tail(5)","9684be20":"# Plot\nCumulative_returns_daily['Portfolio_Daily_Return'].plot()","b5ced838":"# Covariance matrix for the portfolio\n\n# Removing the last column (Portfolio_Daily_Return) from our calculation.\ncovariance_portfolio = return_stocks.iloc[:,:-1]\ncovariance_portfolio = (covariance_portfolio.cov())*252\n\ncovariance_portfolio","c1bae75b":"# Applying the matrix operations mentioned in the image above\nportfolio_variance = np.dot(initial_weight.T,np.dot(covariance_portfolio, initial_weight))","1a312592":"# Standard deviation (risk of portfolio)\nportfolio_risk = np.sqrt(portfolio_variance)\nportfolio_risk","8e9b758a":"# Assuming that the risk free rate is zero\nSharpe_Ratio = return_stocks['Portfolio_Daily_Return'].mean() \/ return_stocks['Portfolio_Daily_Return'].std()\nSharpe_Ratio","2c50d4fe":"Annualised_Sharpe_Ratio = (252**0.5)*Sharpe_Ratio\nAnnualised_Sharpe_Ratio","6c5dfca7":"# Answer here\nThe cumulative return for each stock is:\n\nApple: 75%\nMicrosoft: 171%\nGoogle: 48%\nHence, Microsoft is the biggest driver of the gains earned by the portfolio in the given period.","d374d7e7":"The weight for each stock in the portfolio is already abailable. We need to calculate the daily covariance. Remember, the covariance must be annualised by **multiplying with 252 (the trading days in a year)**.","e062d4a7":"Question: Which of the following dates shows the maximum drop for Google?","8155cd62":"Question: Which of the following stocks is the most risky among the three?","7de28367":"### Portfolio Risk \u2013 Portfolio Standard Deviation","9a4a058d":"### Cumulative return from the Portfolio","61c03e96":"This suggests that the portfolio has achieved a cumulative return of 91% in the given period.","db8c7ad4":"## Performance Measures of a Portfolio","8109517d":"Question: Use the initial weights to determine the total return from the portfolio in the given period.","b9cabd29":"The weighted average can be calculated to determine the return from the portfolio on a daily basis.","0657feb3":"You have a portfolio with the following 3 stocks: Apple (30%), Microsoft (30%) and Google (40%). Calculate different portfolio measures to analyse the portfolio.","69901e57":"### Total Portfolio Return","ba7a94c6":"![image.png](attachment:image.png)","10780928":"Cumulative return of an investment is the cumulative gain or loss from an investment over the given period of time.\nYou can read about the cumprod() function here: https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-cumprod\/","9a496d1b":"Microsoft seems to be the best performer.","c343caa6":"### Average daily return from each stock","c77d05d2":"Question: Which stock is the biggest driver of the gains earned by\u00a0the portfolio in the given period?\u00a0","b808ffe6":"### Sharpe Ratio","97e5b726":"### Daily return from each stock","15f62a13":"- As seen in the plot, the portfolio shows larger variation in prices from 2018 to 2019. \n- Another important point to note is that minimum drop in the daily return is less than 0.5. You can compare this with the value obtained in the question above to check if the variation in portfolio has decreased or not.","82525020":"Average daily return for each stock can be calculated using the dataframe created above - \"return_stocks\"","238cee79":"### Daily return from the portfolio","df47aa75":"By looking into the portfolio standard deviation formula, we need three elements:\n- Portfolio weight array\n- Portfolio covariance matrix\n- Transpose of portfolio weight array","212471d6":"Daily return is the percentage change in the price of the stock from the previous day. This can be calculated using the percentage change in the price on a daily basis.","e99718fc":"<br>"}}