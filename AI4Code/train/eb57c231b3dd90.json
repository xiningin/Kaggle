{"cell_type":{"1d4aa021":"code","02e42c65":"code","e08cea63":"code","d76b4064":"code","cf3e5027":"code","b5ad9be6":"code","068e1f24":"code","18756ffb":"code","8e11e7d4":"code","26732333":"code","cef4aa8e":"code","387ee0f7":"code","f98828c7":"code","d8599e03":"code","5a10a940":"code","487fe927":"code","e0b1e370":"code","0663da11":"code","0b0bd963":"code","80222914":"code","bbeb6662":"code","ca7eff35":"code","9acb5646":"code","07908d98":"code","697de3da":"code","842cd8cb":"code","6fdc8155":"code","525b66b8":"code","6c3278ab":"code","5a866eb5":"code","d171ca68":"code","0e2f8a3d":"code","d7a55b95":"code","8605b846":"code","388796a8":"code","0a616ddf":"code","83a35317":"code","1eb4d809":"code","bb956297":"code","373f50cb":"code","aa2f3f69":"code","5bc2d4fc":"code","8cbe3d7f":"code","be2a451f":"code","fd3256a5":"code","907fb410":"code","27047244":"code","a436e114":"code","7bf03c35":"code","23efe11d":"code","14a54c0b":"code","c26faee6":"code","22266395":"code","fb7096ec":"code","815e2930":"code","202c5ad5":"code","1d9605ed":"code","3079f896":"code","d815d221":"code","ca36a4f6":"code","f7a7de83":"code","b3f94bfd":"code","f8fa45a3":"code","10de4a5d":"code","59143809":"code","00bbcba2":"code","8fb1dd8d":"code","819a1efa":"code","10658791":"code","cf5f05a3":"code","780aa27a":"code","ec0b5398":"code","48f7062f":"code","75cb2bd2":"code","34a81f1b":"code","d4dacb2d":"code","2b6d303b":"code","fc4e04f8":"code","76139651":"code","71826602":"code","876af9de":"code","b6a39786":"code","ba2e7949":"code","e85165fe":"code","cded1b93":"code","9ccc2175":"code","f29cb43e":"code","239cba4a":"code","0ff166cf":"code","f9ec916a":"code","f7b8bd0b":"code","2047faed":"code","1c6997eb":"code","89a25d2c":"code","c8c5a952":"code","b944bdd2":"code","30ea4d9b":"code","ef8d592c":"code","f3c55b35":"code","b49726ab":"code","66895c2c":"code","a641387d":"code","6b0cd9d4":"code","5c2ab773":"code","b0801d5e":"code","a567d1ac":"code","4fc76390":"code","9c3f85cf":"code","b64db64f":"code","70c82232":"code","f86a82da":"code","1e31b3e0":"code","7ea5daf7":"code","e708e5b8":"code","1a901dc9":"code","47030d41":"code","d2f01334":"code","6e3dc387":"code","c90364d3":"code","7431a0f3":"code","4542fab1":"code","2870e743":"code","478d3020":"code","34f02890":"code","c597a5c0":"code","de80679d":"code","9eebb031":"code","87bfb12e":"code","d04fbb18":"code","183490f6":"code","786ec20f":"code","8714f51a":"code","777d344c":"code","329d1feb":"code","c670add6":"code","472b28ec":"code","eff64d3d":"code","5206dd61":"code","bf1c432b":"code","f2b6866b":"code","2488312c":"code","a3b0abef":"code","ef903999":"code","72b86b82":"code","d6e174e6":"code","9a303474":"code","f1e5ad85":"code","0b24d1d7":"code","62318b15":"code","11095506":"code","ea4f9238":"code","b9527467":"code","a660fe28":"code","e6056ce6":"code","9b85095a":"code","6bf0e296":"markdown","59cebe7d":"markdown","be7bb91d":"markdown","eab0dd8e":"markdown","bd27ace0":"markdown","f77d7410":"markdown","c8a816f4":"markdown","6a04efab":"markdown","18ca6a1d":"markdown","9e26cc3d":"markdown","34ac7186":"markdown","649ae3f4":"markdown","237b9410":"markdown","ba057431":"markdown","ce9825dd":"markdown","f8784dd4":"markdown","d10fc3c0":"markdown","630440ad":"markdown","ed6612d7":"markdown","8600860d":"markdown","a0b2b792":"markdown","dcd16729":"markdown","b5899ecb":"markdown","d7aaf8d1":"markdown","ab76739b":"markdown","96d4aab0":"markdown","cf034dc5":"markdown","39b3017f":"markdown","d98e62d1":"markdown","0c878f24":"markdown","5d2c2d04":"markdown","ddfac23b":"markdown","7b929396":"markdown","ceba8331":"markdown","48b624df":"markdown","ced3ec17":"markdown","238d482e":"markdown","b9798b5b":"markdown","4f9dc590":"markdown","8b6a980d":"markdown","d15ea01e":"markdown","fb420c24":"markdown","2bdcbecc":"markdown","b24f80c0":"markdown","adf1b15e":"markdown","04a648d0":"markdown","c4ae5754":"markdown","f379b23b":"markdown","e2cbe97c":"markdown","86abc9c0":"markdown","3b5dabd5":"markdown","8fa9502a":"markdown","b9ed7cb0":"markdown","69c56766":"markdown","194f0c7d":"markdown","0c6299aa":"markdown","3f179ec6":"markdown","271c933c":"markdown","cdda01a2":"markdown","7412184f":"markdown","dcc3c2d7":"markdown","e2912179":"markdown","7e94313c":"markdown","28c1d52a":"markdown","ebf6d56a":"markdown","442890cb":"markdown","a2365f60":"markdown","8c7d0bda":"markdown","0fa4e186":"markdown","b82f4457":"markdown","156b0df1":"markdown","7a9d2eb8":"markdown","7144113f":"markdown","5a285c23":"markdown","7558d3e3":"markdown","377e504c":"markdown","0225b1da":"markdown","ccf38bd1":"markdown","f1503a9d":"markdown","40d86cdb":"markdown","1a7d0aff":"markdown","8b027d28":"markdown","55e2c5da":"markdown","e6522c88":"markdown","fb5317bf":"markdown","3bd49dac":"markdown"},"source":{"1d4aa021":"# Data and statistics libraries\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom datetime import datetime as dt, timedelta, date\nfrom scipy.stats import pointbiserialr\nfrom scipy.stats import f_oneway\nfrom math import floor, ceil\n\n# Visualization libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.filterwarnings(action='once')\n\nlarge = 22; med = 16; small = 12\nparams = {'axes.titlesize': large,\n          'legend.fontsize': med,\n          'figure.figsize': (16, 10),\n          'axes.labelsize': med,\n          'axes.titlesize': med,\n          'xtick.labelsize': med,\n          'ytick.labelsize': med,\n          'figure.titlesize': large}\nplt.rcParams.update(params)\nplt.style.use('seaborn-whitegrid')\nsns.set_style(\"white\")\n%matplotlib inline\n\nimport plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\nplotly.offline.init_notebook_mode(connected=True)","02e42c65":"# Playoffs in or out?\nplayoffs = True\n\n# Specify offense table columns and datatypes\noffense_col_types = {'gid' : int,\n                     'player' : str, \n                     'pa' : float, \n                     'pc' : float, \n                     'py' : float, \n                     'ints' : float, \n                     'tdp' : float, \n                     'ra' : float, \n                     'ry' : float, \n                     'tdr' : float, \n                     'trg' : float, \n                     'rec' : float, \n                     'recy' : float, \n                     'tdrec' : float, \n                     'ret' : float, \n                     'rety' : float, \n                     'tdret' : float, \n                     'fuml' : float, \n                     'conv' : float, \n                     'snp' : float, \n                     'year' : int, \n                     'team' : str,\n                     'dcp' : float\n                    }\n\n# Isolate column names\noffense_cols = offense_col_types.keys()\n\n# Import offense table\noffense = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/OFFENSE.csv',\n                      delimiter=',',\n                      usecols=offense_cols,\n                      dtype=offense_col_types\n                     )\n\n# Filter table to include only 2012 onward (data before that misses key columns)\noffense = offense.loc[offense['year'] >= 2012]\n\n# Add player_gid and player_year columns for merges and groupbys\noffense['player_gid'] = offense['player']+ '-' + offense['gid'].map(str)\noffense['player_year'] = offense['player']+ '-' + offense['year'].map(str)\n\n# Import player table\nplayer = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PLAYER.csv',\n                      delimiter=',',\n                     )\n\n# Import injury table\ninjury = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/INJURY.csv',\n                      delimiter=',',\n                     )\n\n# Add player_gid column to injury table for merges\ninjury['player_gid'] = injury['player']+ '-' + injury['gid'].map(str)\n\n\n# Import schedule table\nschedule = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/SCHEDULE.csv',\n                      delimiter=',',\n                     )\n\n# Create merge columns (team + season + week)\nschedule['home_team_game'] = schedule['h'] + '-' + schedule['seas'].map(str) + '-' + schedule['wk'].map(str)\nschedule['visit_team_game'] = schedule['v'] + '-' + schedule['seas'].map(str) + '-' + schedule['wk'].map(str)\n\n# Merge offense table to player table to get positions\nplayer_cols = ['player', 'pos1']\noffense = pd.merge(offense, player[player_cols], left_on='player', right_on='player', how='left', suffixes=('', '_drop'))\n\n# Merge injury table to offense table to get practice and game status (pstat, gstat)\ninjury_cols = ['player_gid', 'pstat', 'gstat']\noffense = pd.merge(offense, \n                   injury[injury_cols], \n                   left_on='player_gid', \n                   right_on='player_gid', \n                   how='left', \n                   suffixes=('', '_drop')\n                  )\n\n# Fill NA's on injury columns\nfill_values = {'pstat': 'No Injury', \n               'gstat': 'No Injury'\n              }\noffense = offense.fillna(value=fill_values)\n\n# Merge offense table to schedule to bring in week column (wk)\nsched_cols = ['gid','wk']\noffense = pd.merge(offense, \n                   schedule[sched_cols],\n                   left_on='gid',\n                   right_on='gid',\n                   how='left',\n                   suffixes=('', '_drop')\n                  )\n\n# Create next_team_game column in order to help each player's next game\noffense['next_wk'] = offense['wk'] + 1\noffense['next_team_game'] = offense['team'] + '-' + offense['year'].map(str) + '-' + offense['next_wk'].map(str)\n\n\n# Merge offense table to schedule table to bring over next game ids (gid)\nsched_cols = ['home_team_game', 'gid']\noffense = pd.merge(offense, \n                   schedule[sched_cols],\n                   left_on='next_team_game',\n                   right_on='home_team_game',\n                   how='left',\n                   suffixes=('', '_sched')\n                  )\n\nsched_cols = ['visit_team_game', 'gid']\noffense = pd.merge(offense, \n                   schedule[sched_cols], \n                   left_on='next_team_game', \n                   right_on='visit_team_game', \n                   how='left', \n                   suffixes=('', '_sched2')\n                  )","e08cea63":"def add_full_name(data, player_data):\n    player_cols = ['player', 'fname','lname']\n    data = pd.merge(data, player_data[player_cols], left_on='player', right_on='player', how='left')\n    \n    data['full_name'] = data['fname'] + ' ' + data['lname']\n    data = data.drop(columns=['fname', \n                              'lname'\n                             ]\n                    )\n    \n    return data\n\n# Add full names to offense table\noffense = add_full_name(offense, player)\n\n# Add fullback table, remove fullbacks from offense table\nfullback = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/FULLBACK.csv',\n                      delimiter=',',\n                     )\n\noffense = pd.merge(offense,\n                   fullback,\n                   how='left',\n                   left_on='full_name',\n                   right_on='full_name'\n                  )\n\noffense['pos1'] = np.where(offense['fb'] == 'FB', 'FB', offense['pos1'])\noffense = offense.drop(['full_name', 'fb'], axis=1)","d76b4064":"# Drop unnecessary player positions and drop any player games with zero snaps\nposition_list = ['RB', 'WR', 'TE', 'QB']\noffense = offense.loc[(offense['pos1'].isin(position_list)) &\n                      (offense['snp'] > 0)\n                     ]\n\n# Replace NaN in gid columns and combine them to form next_gid column\nfill_values = {'gid_sched': 0.0, \n               'gid_sched2': 0.0\n              }\noffense = offense.fillna(value=fill_values)\noffense['next_gid'] = offense['gid_sched'].map(int) + offense['gid_sched2'].map(int)\n\n# Drop columns used to create next_gid column\noffense = offense.drop(['next_wk', \n                        'next_team_game',\n                        'home_team_game',\n                        'gid_sched',\n                        'visit_team_game',\n                        'gid_sched2'\n                       ], \n                       axis=1\n                      )\n\n# Merge injury table to offense table to get practice and game status (pstat, gstat)\noffense['player_next_gid'] = offense['player'] + '-' + offense['next_gid'].map(str)\n\ninjury_cols = ['player_gid', 'pstat', 'gstat']\n\noffense = pd.merge(offense, \n                   injury[injury_cols],\n                   left_on='player_next_gid',\n                   right_on='player_gid',\n                   how='left',\n                   suffixes=('', '_next_game')\n                  ).drop(['player_gid_next_game'],\n                         axis=1\n                        )\n\n# Fill NA's on injury columns\nfill_values = {'pstat_next_game': 'No Injury', \n               'gstat_next_game': 'No Injury'\n              }\noffense = offense.fillna(value=fill_values)\n\n\n\n# Import sacks table to add sacks to offense table\nplays = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PLAY.csv',\n                    delimiter=','\n                   )\n                   \nsacks = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/SACK.csv',\n                    delimiter=','\n                   )\n\n\n# Merge gid column to sacks table from plays\nplay_cols = ['pid', 'gid']\nsacks = pd.merge(sacks,\n                 plays[play_cols],\n                 how='left',\n                 left_on='pid',\n                 right_on='pid'\n                )\n\n# Group sacks table by player_gid\nsacks['player_gid'] = sacks['qb'] + '-' + sacks['gid'].map(str)\nsacks_by_player_gid = (sacks[['player_gid', 'value']]\n                       .groupby(['player_gid'])\n                       .sum()\n                       .reset_index()\n                       .rename(columns={'value' : 'sk'})\n                      )\n\n# Merge sacks column to offense table\noffense = pd.merge(offense,\n                   sacks_by_player_gid,\n                   how='left',\n                   left_on='player_gid',\n                   right_on='player_gid'\n                  )\n\n# Replace NaN with zero in sacks column\noffense = offense.fillna(value={'sk' : 0.0})","cf3e5027":"# Establish scoring dictionaries\nppr = {'ppr' : 1.0,\n       'pass_yd' : 1.0 \/ 25.0,\n       'pass_td' : 6.0,\n       'int' : -1.0,\n       'sack' : -1.0,\n       'rush_yd' : 1.0 \/ 10.0,\n       'rush_td' : 6.0,\n       'rec_yd' : 1.0 \/ 10.0,\n       'rec_td' : 6.0,\n       'ret_td' : 6.0,\n       '2pc' : 2.0,\n       'fum_lost' : -2.0\n      }\n\nreg = {'ppr' : 0.0,\n       'pass_yd' : 1.0 \/ 25.0,\n       'pass_td' : 6.0,\n       'int' : -1.0,\n       'sack' : -1.0,\n       'rush_yd' : 1.0 \/ 10.0,\n       'rush_td' : 6.0,\n       'rec_yd' : 1.0 \/ 10.0,\n       'rec_td' : 6.0,\n       'ret_td' : 6.0,\n       '2pc' : 2.0,\n       'fum_lost' : -2.0\n      }\n\n# Establish color dictionary for presenting different positions\ncolor_dict = {'WR' : ['blue', 'Blues'], 'RB' : ['green', 'Greens'], 'TE' : ['purple', 'Purples'], 'QB' : ['red', 'Reds']}","b5ad9be6":"def add_scoring_columns(data, score_dict, label):\n    # Add pt per activity columns from score_dict\n    data['pass_yd_pt'] = score_dict['pass_yd']\n    data['pass_td_pt'] = score_dict['pass_td']\n    data['int_pt'] = score_dict['int']\n    data['sack_pt'] = score_dict['sack']\n    data['rush_yd_pt'] = score_dict['rush_yd']\n    data['rush_td_pt'] = score_dict['rush_td']\n    data['rec_yd_pt'] = score_dict['rec_yd']\n    data['rec_td_pt'] = score_dict['rec_td']\n    data['rec_pt'] = score_dict['ppr']\n    data['fuml_pt'] = score_dict['fum_lost']\n    data['conv_pt'] = score_dict['2pc']\n    data['ret_td_pt'] = score_dict['ret_td']\n    \n    # Use pt per activity columns to generate new columns\n    data[label + '_pass_pts'] = ((data['py'] * data['pass_yd_pt']) +\n                                 (data['tdp'] * data['pass_td_pt']) +\n                                 (data['ints'] * data['int_pt']) +\n                                 (data['sk'] * data['sack_pt'])\n                                )\n    \n    data[label + '_rush_pts'] = ((data['ry'] * data['rush_yd_pt']) +\n                                 (data['tdr'] * data['rush_td_pt'])\n                                )\n    \n    data[label + '_rec_pts'] = ((data['recy'] * data['rec_yd_pt']) +\n                               (data['tdrec'] * data['rec_td_pt']) +\n                               (data['rec'] * data['rec_pt'])\n                              )\n    \n    data[label + '_fumbles'] = (data['fuml'] * data['fuml_pt'])\n    \n    data[label + '_2pc'] = (data['conv'] * data['conv_pt'])\n                                         \n    data[label + '_ret_pts'] = (data['tdret'] * data['ret_td_pt'])\n    \n    \n    # Generate aggregate scoring columns\n    data[label + '_opp_no_fumbles'] = (data[label + '_rush_pts'] +\n                                       data[label + '_rec_pts'] +\n                                       data[label + '_2pc']\n                                      )\n    \n    data[label + '_pts_ex_ret'] = (data[label + '_pass_pts'] +\n                                   data[label + '_rush_pts'] +\n                                   data[label + '_rec_pts'] +\n                                   data[label + '_fumbles'] +\n                                   data[label + '_2pc']\n                                  )\n    \n    data[label + '_total_pts'] = data[label + '_pts_ex_ret'] + data[label + '_ret_pts']\n    \n    # Drop score_dict columns\n    data = data.drop(columns=['pass_yd_pt',\n                              'pass_td_pt',\n                              'int_pt',\n                              'sack_pt',\n                              'rush_yd_pt',\n                              'rush_td_pt',\n                              'rec_yd_pt',\n                              'rec_td_pt',\n                              'rec_pt',\n                              'fuml_pt',\n                              'conv_pt',\n                              'ret_td_pt'],\n                     axis=1\n                    )\n    \n    return data","068e1f24":"# Add scoring columns to the offense table\noffense = add_scoring_columns(offense, ppr, 'ppr')\noffense = add_scoring_columns(offense, reg, 'reg')","18756ffb":"def snaps_by_depth_chart_boxplot(game_data, position, color_dict):\n\n    # Define and plot snap information\n    game_data = game_data[(game_data['pos1'] == position) & \n                          (game_data['year'] >= 2015) &\n                          (game_data['dcp'] >= 1)\n                         ]\n    \n    fig = px.box(game_data,\n                 x= 'dcp',\n                 y='snp',\n                 color_discrete_sequence=[color_dict[position][0]]\n                )\n    \n    # Set up title, size, and hover text\n    fig.update_layout(\n        title_text= 'Snaps by Depth Chart - ' + position,\n        title_x=0.5,\n        height=500,\n        hovermode='x'\n    )\n\n    fig.show()\n\ndef depth_chart_snap_hist(game_data, position, color_dict):\n    \n    game_data = game_data[(game_data['pos1'] == position) & \n                          (game_data['year'] >= 2015) &\n                          (game_data['dcp'] >= 1)\n                         ]\n    \n    # Select data to be plotted and set up figure and subplots\n    fig, axs = plt.subplots(2, 3, figsize=(16,10), dpi= 80)\n    fig.subplots_adjust(top=.90, wspace=.3, hspace=.5)\n    fig.suptitle('Snaps by Depth Chart Position - ' + position)\n    axs = axs.ravel()\n    \n    #sns.set_color_codes(color_dict[position])\n    \n    # Loop through subplots and plot \n    i = 1\n    for ax in axs:\n        if len(game_data[game_data['dcp'] == i]) > 1:\n            data = game_data.loc[game_data['dcp'] == i]\n            data = data['snp']\n            sns.distplot(data, ax=ax, color=color_dict[position][0])    \n            ax.set_xlabel('Snaps per Game')\n            ax.set_title('Depth Chart - ' + str(i))\n            ax.tick_params(labelsize=13)\n        else:\n            ax.axis('off')\n        i += 1    \n    \n    fig.show","8e11e7d4":"depth_chart_snap_hist(offense, 'WR', color_dict)","26732333":"snaps_by_depth_chart_boxplot(offense, 'WR', color_dict)","cef4aa8e":"depth_chart_snap_hist(offense, 'RB', color_dict)","387ee0f7":"snaps_by_depth_chart_boxplot(offense, 'RB', color_dict)","f98828c7":"depth_chart_snap_hist(offense, 'TE', color_dict)","d8599e03":"snaps_by_depth_chart_boxplot(offense, 'TE', color_dict)","5a10a940":"depth_chart_snap_hist(offense, 'QB', color_dict)","487fe927":"snaps_by_depth_chart_boxplot(offense, 'QB', color_dict)","e0b1e370":"def points_by_pos_and_x_boxplot(data, title, metric, x, positions, years, color_dict):\n\n    # Define and plot snap information\n    data = data[(data['pos1'].isin(positions)) & \n                (data['year'].isin(years)) &\n                (data['dcp'] >= 1)\n               ]\n    \n    # Specify color code\n    pos_dict = {}\n    color_list = []\n    for position in positions:\n        first_row = data.pos1.eq(position).idxmax()\n        pos_dict[position] = first_row\n\n    pos_dict = sorted(pos_dict.items(), key=lambda kv: kv[1])\n    \n    for item in pos_dict:\n        color_list.append(color_dict[item[0]][0])\n    \n    # Set up boxplot\n    fig = px.box(data,\n                 x=x,\n                 y= metric,\n                 color='pos1',\n                 color_discrete_sequence=color_list\n                )\n    \n    # Prep title\n    title += ' - ' + str(years)\n    \n    # Set up title, size, and hover text\n    fig.update_layout(\n        title_text=title,\n        title_x=0.5,\n        height=625,\n        hovermode='x'\n    )\n\n    fig.show()","0663da11":"points_by_pos_and_x_boxplot(offense, \n                            title='PPR Points by Position and Depth Chart',\n                            metric='ppr_total_pts',\n                            x='dcp',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2015,2016,2017,2018,2019], \n                            color_dict=color_dict\n                           )","0b0bd963":"points_by_pos_and_x_boxplot(offense, \n                            title='Regular Points by Position and Depth Chart',\n                            metric='reg_total_pts',\n                            x='dcp',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2015,2016,2017,2018,2019], \n                            color_dict=color_dict\n                           )","80222914":"def prep_for_correlations(data, drop_cols=[], group_cols=[], avg_cols=[], count_cols=[], reset=False):\n    \n    # Specify sum columns (all others)\n    sum_cols = [x for x in list(data.columns) if ((x not in drop_cols) &\n                                                     (x not in count_cols) &\n                                                     (x not in group_cols) &\n                                                     (x not in avg_cols)\n                                                    )\n               ]\n    # Drop columns\n    new_data = data.drop(columns=drop_cols)\n    \n    # Build aggreations dictionary for groupby\n    aggregations = {}\n    \n    for col in count_cols:\n        aggregations[col] = 'count'\n    for col in avg_cols:\n        aggregations[col] = 'mean'\n    for col in sum_cols:\n        aggregations[col] = 'sum'\n\n    \n    # Group table by by group_cols and apply aggregation functions\n    if reset:\n        new_data = new_data.groupby(group_cols).agg(aggregations).reset_index()\n    else:\n        new_data = new_data.groupby(group_cols).agg(aggregations)\n    \n    return new_data","bbeb6662":"# Set up columns for prep_for_correlations\n\n# Specify columns to drop\ndrop_cols = ['player_gid',\n             'pstat',\n             'gstat',\n             'wk',\n             'next_gid',\n             'player_next_gid',\n             'pstat_next_game',\n             'gstat_next_game'\n            ]\n\n# Specify count columns (games played)\ncount_cols = ['gid']\n\n# Specify grouping columns\ngroup_cols = ['player_year',\n              'player',\n              'year',\n              'team',\n              'pos1',  \n             ]\n\n# Specify average columns (depth chart position)\navg_cols = ['dcp']\n\n# Get offense tables grouped by player_year\nif not playoffs:\n    offense = offense[offense['wk'] <= 17 ]\n\noffense_no_playoffs = offense[offense['wk'] <= 17 ]\n\nfull_season_stats = prep_for_correlations(data=offense_no_playoffs,\n                                          drop_cols=drop_cols,\n                                          group_cols=group_cols, \n                                          avg_cols=avg_cols,\n                                          count_cols=count_cols\n                                         )\nfull_season_stats_w_playoffs = prep_for_correlations(data=offense,\n                                                     drop_cols=drop_cols, \n                                                     group_cols=group_cols, \n                                                     avg_cols=avg_cols,\n                                                     count_cols=count_cols\n                                                    )\n\n# Filter for 2nd half of season only and run prep_for_correlations\nsh_offense = offense[offense['wk'] > 8]\nsh_stats = prep_for_correlations(data=sh_offense,\n                                 drop_cols=drop_cols,\n                                 group_cols=group_cols,\n                                 avg_cols=avg_cols,\n                                 count_cols=count_cols\n                                )\n\n# Create per game tables\nper_game_stats = full_season_stats_w_playoffs.copy(deep=True)\nper_game_stats.iloc[:,2:] = per_game_stats.iloc[:,2:].div(per_game_stats['gid'], axis=0)\n\nsh_per_game = sh_stats.copy(deep=True)\nsh_per_game.iloc[:,2:] = sh_per_game.iloc[:,2:].div(sh_per_game['gid'], axis=0)","ca7eff35":"# Specify play table columns and datatypes\nplay_col_types = {'gid' : int,\n                  'pid' : int,\n                  'off' : str,\n                  'type' : str,\n                  'yfog' : float,\n                  'zone' : int,\n                  'pts' : float,\n                  'sk' : int,\n                  'ints' : int,\n                  'fum' : int\n                 }\n\n# Isolate column names\nplay_cols = play_col_types.keys()\n\n# Import play table\nplays = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PLAY.csv',\n                   delimiter=',',\n                   usecols=play_cols,\n                   dtype=play_col_types\n                  )\n\n# Specify pass table columns and datatypes\npass_col_types = {'pid' : int,\n                  'psr' : str,\n                  'trg' : str,\n                  'loc' : str,\n                  'yds' : float,\n                  'comp' : int\n                 }\n\n# Isolate column names\npass_cols = pass_col_types.keys()\n\n# Import pass table\npasses = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PASS.csv',\n                   delimiter=',',\n                   usecols=pass_cols,\n                   dtype=pass_col_types\n                  )\n\n# Specify rush table columns and datatypes\nrush_col_types = {'pid' : int,\n                  'bc' : str,\n                  'yds' : float,\n                  }\n\n# Isolate column names\nrush_cols = rush_col_types.keys()\n\n# Import rush table\nrushes = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/RUSH.csv',\n                   delimiter=',',\n                   usecols=rush_cols,\n                   dtype=rush_col_types\n                  )\n\n# Specify fumble table columns and datatypes\nfumble_col_types = {'pid' : int,\n                    'fum' : str,\n                    'fuml' : str,\n                   }\n\n# Isolate column names\nfumble_cols = fumble_col_types.keys()\n\n# Import fumble table\nfumble = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/FUMBLE.csv',\n                      delimiter=',',\n                      usecols=fumble_cols,\n                      dtype=fumble_col_types\n                     )\n\n# Specify penalty table columns and datatypes\npenalty_col_types = {'pid' : int,\n                     'act' : str,\n                    }\n\n# Isolate column names\npenalty_cols = penalty_col_types.keys()\n\n# Import fumble table\npenalty = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PENALTY.csv',\n                      delimiter=',',\n                      usecols=penalty_cols,\n                      dtype=penalty_col_types\n                     )\n\n# Specify kickoff table columns and datatypes\nconv_col_types = {'pid' : int,\n                  'type' : str,\n                  'bc' : str,\n                  'psr' : str,\n                  'trg' : str,\n                  'conv' : float,\n                 }\n\n# Isolate column names\nconv_cols = conv_col_types.keys()\n\n# Import kickoff table\nconv = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/CONV.csv',\n                   delimiter=',',\n                   usecols=conv_cols,\n                   dtype=conv_col_types\n                  )\n\n# Specify kickoff table columns and datatypes\nkoff_col_types = {'pid' : int,\n                  'kr' : str,\n                 }\n\n# Isolate column names\nkoff_cols = koff_col_types.keys()\n\n# Import kickoff table\nkoff = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/KOFF.csv',\n                   delimiter=',',\n                   usecols=koff_cols,\n                   dtype=koff_col_types\n                  )\n\n# Specify punt table columns and datatypes\npunt_col_types = {'pid' : int,\n                  'pr' : str,\n                 }\n\n# Isolate column names\npunt_cols = punt_col_types.keys()\n\n# Import kickoff table\npunt = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/PUNT.csv',\n                   delimiter=',',\n                   usecols=punt_cols,\n                   dtype=punt_col_types\n                  )","9acb5646":"# Merge season (year) to plays from schedule table\nsched_cols = ['gid', 'seas']\nplays = pd.merge(plays, \n                 schedule[sched_cols],\n                 left_on='gid',\n                 right_on='gid',\n                 how='left',\n                 suffixes=('', '_sched')\n                )\n\n# Merge passes table to plays\nplays = pd.merge(plays, \n                 passes,\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_pass')\n                ).rename(columns={'yds' : 'py',\n                                  'comp' : 'rec'\n                                 }\n                        )\n\n# Merge rushes table to plays\nplays = pd.merge(plays, \n                 rushes,\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_rush')\n                ).rename(columns={'yds' : 'ry'})\n\n# Merge fumble table to plays\nplays = pd.merge(plays, \n                 fumble,\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_fum')\n                ).rename(columns={'fum_fum' : 'fumbler'})\n\n# Merge penalty table to plays\nplays = pd.merge(plays, \n                 penalty,\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_pen')\n                ).rename(columns={'act': 'penalty'})\n\n# Merge conversion table to plays\nconv_cols = ['pid', 'type', 'bc', 'psr', 'trg', 'conv']\nplays = pd.merge(plays, \n                 conv[conv_cols],\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_conv')\n                )\n\n# Merge kickoff table (returner column) to plays\nkoff_cols = ['pid', 'kr']\nplays = pd.merge(plays, \n                 koff[koff_cols],\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_koff')\n                )\n\n# Merge punt table (returner column) to plays\npunt_cols = ['pid', 'pr']\nplays = pd.merge(plays, \n                 punt[punt_cols],\n                 left_on='pid',\n                 right_on='pid',\n                 how='left',\n                 suffixes=('', '_punt')\n                )","07908d98":"# Replace NaN for non-pass plays in loc field and drop other NaN rows\nmask = (plays['type'] != 'PASS')\nplays['loc'][mask] = '-'\n\nplays = plays.dropna(subset=['loc'])\n\n# Fill NA's in py, ry, rec, and conv columns\nfill_values = {'py': 0.0, \n               'ry': 0.0,\n               'rec' : 0.0,\n               'conv' : 0.0\n              }\nplays = plays.fillna(value=fill_values)\n\n# Add recy column (copy py column)\nplays['recy'] = plays['py']\n\n# Add 1 to rec column for successful passing conversions\nplays['rec'] = plays.apply(lambda row:\n                           row.rec + 1 \n                           if ((row.conv == 6) &\n                               (row.type_conv == 'PASS')\n                              )\n                           else row.rec,\n                           axis=1\n                          )\n\n# Convert fuml from yes\/no to 1\/0\nplays['fuml'] = pd.Series(np.where(plays.fuml.values == 'Y', 1, 0), plays.index)\n\n# Replace null values in penalty column with \"-\"\nplays = plays.fillna(value={'penalty' : '-'})\n\n# Drop plays where penalty was accepted\nmask = ((plays['penalty'] != 'A') &\n        (plays['penalty'] != 'O')\n       )\nplays = plays.loc[mask]\n\n# Replace bc_conv, psr_conv, trg_conv, type_conv, bc, psr, trg values with blank ('')\nplays = plays.fillna(value={'bc' : '',\n                            'psr' : '',\n                            'trg' : '',\n                            'bc_conv' : '',\n                            'psr_conv' : '',\n                            'trg_conv' : '',\n                            'type_conv' : ''\n                           }\n                    )\n\n# Combine bc with bc_conv, psr with psr_conv, trg with trg_conv\nplays['bc'] = plays['bc'] + plays['bc_conv']\nplays['psr'] = plays['psr'] + plays['psr_conv']\nplays['trg'] = plays['trg'] + plays['trg_conv']\n\n# Drop skill player '_conv' columns\nplays = plays.drop(columns=['bc_conv', 'psr_conv', 'trg_conv'])\n\n# Combine kr, pr, trg, bc to a skill player column (sp)\nplays['sp'] = plays['kr'] + plays['pr'] + plays['trg'] + plays['bc']\n\n# Replace kr, pr, trg, bc values with blank ('')\nplays = plays.fillna(value={'kr' : '',\n                            'pr' : '',\n                            'trg' : '',\n                            'bc' : ''\n                           }\n                    )\n\n# Combine kr, pr, trg, bc to a skill player column (sp)\nplays['sp'] = plays['kr'] + plays['pr'] + plays['trg'] + plays['bc']\n\n# Recalculate zone column\nplays['zone'] = plays['yfog'].apply(lambda x:\n                                    '0-20' if x <= 20.0\n                                    else ('20-40' if x <= 40.0\n                                          else ('40-60' if x <= 60.0\n                                                else ('60-80' if x <= 80.0\n                                                      else ('80-90' if x <= 90.0\n                                                            else '90-100'\n                                                           )\n                                                     )\n                                               )\n                                         )\n                                   )\n\n# Drop L, M, R, and NL pass plays (small percentage of total list)\nmask = ((plays['loc'] != 'L') &\n        (plays['loc'] != 'M') &\n        (plays['loc'] != 'NL') &\n        (plays['loc'] != 'R')\n       )\n        \nplays = plays.loc[mask]\n\n# Drop second letter in loc column, leaving only S (short) or D (deep)\nplays['loc'] = plays['loc'].apply(lambda x: x[0])\n\n# Add play type and zone column (type_zone)\nplays['type_zone'] = plays['type'] + '_' + plays['loc'] + '_' + plays['zone']\nplays['type_zone'] = plays['type_zone'].str.replace('_-_','_')","697de3da":"# Add tdp, tdr, tdrec, tdret, conv fields \nplays['tdp'] = plays.apply(lambda row:\n                           1 \n                           if ((row.pts >= 6) &\n                               (row.type == 'PASS')\n                              )\n                           else 0,\n                           axis=1\n                          )\n\nplays['tdrec'] = plays.apply(lambda row:\n                           1 \n                           if ((row.pts >= 6) &\n                               (row.type == 'PASS')\n                              )\n                           else 0,\n                           axis=1\n                          )\n\nplays['tdr'] = plays.apply(lambda row:\n                           1 \n                           if ((row.pts >= 6) &\n                               (row.type == 'RUSH')\n                              )\n                           else 0,\n                           axis=1\n                          )\n\nplays['tdret'] = plays.apply(lambda row:\n                           1 \n                           if ((row.pts >= 6) &\n                               ((row.type == 'KOFF') |\n                                (row.type == 'ONSD') |\n                                (row.type == 'PUNT')\n                               )\n                              )\n                           else 0,\n                           axis=1\n                          )                   ","842cd8cb":"# Add scoring columns to plays table\nplays = add_scoring_columns(plays, ppr, 'ppr')\nplays = add_scoring_columns(plays, reg, 'reg')\n\n# Create second half only plays table\nsh_plays = plays[plays['gid'].isin(sh_offense['gid'])]\n\n# Create table without playoffs\nplays_no_playoffs = plays[plays['gid'].isin(offense_no_playoffs['gid'])]","6fdc8155":"def play_type_zone_avg_points(play_data, pts_metric, ppr=True):\n    # Filter for CONV, PASS, and RUSH plays 2015 or later\n    data = play_data[(play_data['seas'] >= 2015) &\n                     ((play_data['type'] == 'CONV') |\n                      (play_data['type'] == 'PASS') |\n                      (play_data['type'] == 'RUSH')\n                     )\n                    ]\n    \n    # Pivot to show points\/opp by type_zone and season\n    data_pivot = data.pivot_table(values=pts_metric, \n                                  index='type_zone',\n                                  columns='seas',\n                                  aggfunc='mean',\n                                  dropna=True,\n                                  fill_value=0,\n                                  margins=True\n                                 )\n    \n    # Remove rows that are all zero\n    data_pivot = data_pivot.loc[(data_pivot!=0).any(axis=1)]\n    \n    # PPR title string\n    ppr_string = 'PPR Scoring' if ppr else 'Regular Scoring'\n    \n    fig = plt.figure(figsize=(16,10))\n    sns.heatmap(data_pivot, fmt='g', cmap='Blues', annot=True, annot_kws={\"size\": 15})\n    plt.yticks(rotation=0)\n    plt.xlabel('Season', labelpad=20)\n    plt.ylabel('Play Type + Field Location ')\n    plt.title('Average Points per Opportunity (Ex. Fumbles) - ' + ppr_string, pad=30, size=20)\n    \n    data_pivot_weighted  = data_pivot \/ data_pivot.loc['All']\n    \n    return data_pivot, data_pivot_weighted","525b66b8":"ppr_type_zone_pts, ppr_type_zone_pts_weighted = play_type_zone_avg_points(plays, 'ppr_opp_no_fumbles', True)","6c3278ab":"ppr_type_zone_pts_weighted","5a866eb5":"reg_type_zone_pts, reg_type_zone_pts_weighted = play_type_zone_avg_points(plays, 'reg_opp_no_fumbles', False)","d171ca68":"reg_type_zone_pts_weighted","0e2f8a3d":"# Create PPR scoring merge column \nppr_opp_weights = ppr_type_zone_pts_weighted.reset_index().rename_axis(None, axis=1)\n\nppr_opp_weights = pd.melt(ppr_opp_weights, \n                             id_vars=['type_zone'],\n                             value_vars=[2015, 2016, 2017, 2018, 2019],\n                             var_name='seas',\n                             value_name='weight'\n                            )\n\nppr_opp_weights['type_zone_year'] = ppr_opp_weights['type_zone'] + '_' + ppr_opp_weights['seas'].astype(str)\n\n# Create regular scoring merge column\nreg_opp_weights = reg_type_zone_pts_weighted.reset_index().rename_axis(None, axis=1)\n\nreg_opp_weights = pd.melt(reg_opp_weights, \n                             id_vars=['type_zone'],\n                             value_vars=[2015, 2016, 2017, 2018, 2019],\n                             var_name='seas',\n                             value_name='weight'\n                            )\n\nreg_opp_weights['type_zone_year'] = reg_opp_weights['type_zone'] + '_' + reg_opp_weights['seas'].astype(str)","d7a55b95":"# ADD OPPS AND WEIGHTED OPPS (PPR AND REGULAR) TO FULL SEASON, PER GAME, AND OFFENSE TABLES \n\n# Get list of type_zone combos for weighted opps\ntype_zone_list = list(ppr_type_zone_pts.index)[:-1]\n\n# Filter plays table to relevant type_zones and 2015 onward\ntype_zone_plays = plays[plays['type_zone'].isin(type_zone_list)]\ntype_zone_plays = type_zone_plays[type_zone_plays['seas'] >= 2015]\n# Second half only\nsh_type_zone = sh_plays[sh_plays['type_zone'].isin(type_zone_list)]\nsh_type_zone = sh_type_zone[sh_type_zone['seas'] >= 2015]\n# No playoffs\ntype_zone_plays_no_playoffs = plays_no_playoffs[plays_no_playoffs['type_zone'].isin(type_zone_list)]\ntype_zone_plays_no_playoffs = type_zone_plays_no_playoffs[type_zone_plays_no_playoffs['seas'] >= 2015]\n\n# Group by player, season, type_zone to show total opps\nkeep_cols = ['sp', 'type_zone', 'seas', 'pid', 'off']\nplayer_opps_grouped_w_playoffs = type_zone_plays[keep_cols].groupby(['sp','seas','off','type_zone']).count().reset_index().rename(columns={'pid' : 'opps'})\nplayer_opps_grouped = type_zone_plays_no_playoffs[keep_cols].groupby(['sp','seas','off','type_zone']).count().reset_index().rename(columns={'pid' : 'opps'})\n# Second half only\nsh_player_opps = sh_type_zone[keep_cols].groupby(['sp','seas','off','type_zone']).count().reset_index().rename(columns={'pid' : 'opps'})\n# Individual games\nkeep_cols = ['sp', 'type_zone','seas', 'gid', 'pid']\nopps_by_game = type_zone_plays[keep_cols].groupby(['sp', 'seas', 'gid', 'type_zone']).count().reset_index().rename(columns={'pid' : 'opps'})\n\n# Add type_zone_year as lookup columnn for merge\nplayer_opps_grouped_w_playoffs['type_zone_year'] = player_opps_grouped_w_playoffs['type_zone'] + '_' + player_opps_grouped_w_playoffs['seas'].astype(str)\nplayer_opps_grouped['type_zone_year'] = player_opps_grouped['type_zone'] + '_' + player_opps_grouped['seas'].astype(str)\n# Second half only\nsh_player_opps['type_zone_year'] = sh_player_opps['type_zone'] + '_' + sh_player_opps['seas'].astype(str) \n# Individual games\nopps_by_game['type_zone_year'] = opps_by_game['type_zone'] + '_' + opps_by_game['seas'].astype(str)\n\n# Merge weighting column from PPR opp weights table\nweight_cols = ['type_zone_year', 'weight']\nplayer_opps_grouped_w_playoffs = pd.merge(player_opps_grouped_w_playoffs, \n                               ppr_opp_weights[weight_cols],\n                               left_on='type_zone_year',\n                               right_on='type_zone_year',\n                               how='left',\n                               suffixes=('', '_ppr')\n                              ).rename(columns={'weight' : 'weight_ppr'})\nplayer_opps_grouped = pd.merge(player_opps_grouped, \n                               ppr_opp_weights[weight_cols],\n                               left_on='type_zone_year',\n                               right_on='type_zone_year',\n                               how='left',\n                               suffixes=('', '_ppr')\n                              ).rename(columns={'weight' : 'weight_ppr'})\n# Second half only\nsh_player_opps = pd.merge(sh_player_opps, \n                          ppr_opp_weights[weight_cols],\n                          left_on='type_zone_year',\n                          right_on='type_zone_year',\n                          how='left',\n                          suffixes=('', '_ppr')\n                         ).rename(columns={'weight' : 'weight_ppr'})\n# Individual games\nopps_by_game = pd.merge(opps_by_game, \n                        ppr_opp_weights[weight_cols],\n                        left_on='type_zone_year',\n                        right_on='type_zone_year',\n                        how='left',\n                        suffixes=('', '_ppr')\n                       ).rename(columns={'weight' : 'weight_ppr'})\n\n\n# Merge weighting column from REGULAR scoring opp weights table\nplayer_opps_grouped_w_playoffs = pd.merge(player_opps_grouped_w_playoffs, \n                               reg_opp_weights[weight_cols],\n                               left_on='type_zone_year',\n                               right_on='type_zone_year',\n                               how='left',\n                               suffixes=('', '_reg')\n                              ).rename(columns={'weight' : 'weight_reg'})\nplayer_opps_grouped = pd.merge(player_opps_grouped, \n                               reg_opp_weights[weight_cols],\n                               left_on='type_zone_year',\n                               right_on='type_zone_year',\n                               how='left',\n                               suffixes=('', '_reg')\n                              ).rename(columns={'weight' : 'weight_reg'})\n# Second half only\nsh_player_opps = pd.merge(sh_player_opps, \n                          reg_opp_weights[weight_cols],\n                          left_on='type_zone_year',\n                          right_on='type_zone_year',\n                          how='left',\n                          suffixes=('', '_reg')\n                         ).rename(columns={'weight' : 'weight_reg'})\n# Individual games\nopps_by_game = pd.merge(opps_by_game, \n                        reg_opp_weights[weight_cols],\n                        left_on='type_zone_year',\n                        right_on='type_zone_year',\n                        how='left',\n                        suffixes=('', '_reg')\n                       ).rename(columns={'weight' : 'weight_reg'})\n\n\n# Drop type_zone_year (only used for merges)\nplayer_opps_grouped_w_playoffs = player_opps_grouped_w_playoffs.drop(columns=['type_zone_year'])\nplayer_opps_grouped = player_opps_grouped.drop(columns=['type_zone_year'])\n# Second half only\nsh_player_opps = sh_player_opps.drop(columns=['type_zone_year'])\n# Individual games\nopps_by_game = opps_by_game.drop(columns=['type_zone_year'])\n\n\n# Add weighted opps columns (ppr and reg)\nplayer_opps_grouped_w_playoffs['ppr_weighted_opps'] = player_opps_grouped_w_playoffs['opps'] * player_opps_grouped_w_playoffs['weight_ppr']\nplayer_opps_grouped_w_playoffs['reg_weighted_opps'] = player_opps_grouped_w_playoffs['opps'] * player_opps_grouped_w_playoffs['weight_reg']\nplayer_opps_grouped['ppr_weighted_opps'] = player_opps_grouped['opps'] * player_opps_grouped['weight_ppr']\nplayer_opps_grouped['reg_weighted_opps'] = player_opps_grouped['opps'] * player_opps_grouped['weight_reg']\n# Second half only\nsh_player_opps['ppr_weighted_opps'] = sh_player_opps['opps'] * sh_player_opps['weight_ppr']\nsh_player_opps['reg_weighted_opps'] = sh_player_opps['opps'] * sh_player_opps['weight_reg']\n# Individual games\nopps_by_game['ppr_weighted_opps'] = opps_by_game['opps'] * opps_by_game['weight_ppr']\nopps_by_game['reg_weighted_opps'] = opps_by_game['opps'] * opps_by_game['weight_reg']\n\n\n# Add merge columns (player_year \/ player_gid)\nplayer_opps_grouped_w_playoffs['player_year'] = player_opps_grouped_w_playoffs['sp'] + '-' + player_opps_grouped_w_playoffs['seas'].astype(str) \nplayer_opps_grouped_w_playoffs['player_year_team'] = player_opps_grouped_w_playoffs['player_year'] + '-' + player_opps_grouped_w_playoffs['off'] \nplayer_opps_grouped['player_year'] = player_opps_grouped['sp'] + '-' + player_opps_grouped['seas'].astype(str) \nplayer_opps_grouped['player_year_team'] = player_opps_grouped['player_year'] + '-' + player_opps_grouped['off']\n# Second half only\nsh_player_opps['player_year'] = sh_player_opps['sp'] + '-' + sh_player_opps['seas'].astype(str) \nsh_player_opps['player_year_team'] = sh_player_opps['player_year'] + '-' + sh_player_opps['off']\n# Individual games\nopps_by_game['player_gid'] = opps_by_game['sp'] + '-' + opps_by_game['gid'].astype(str) \n\n\n# Create weighted opps table grouped to merge to full season, per game, and offense tables\nopps_by_player_w_playoffs = player_opps_grouped_w_playoffs[['player_year_team', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']].groupby('player_year_team').sum().reset_index()\nopps_by_player = player_opps_grouped[['player_year_team', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']].groupby('player_year_team').sum().reset_index()\n# Second half only\nsh_opps_by_player = sh_player_opps[['player_year_team', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']].groupby('player_year_team').sum().reset_index()\n# Individual games\nopps_by_player_gid = opps_by_game[['player_gid', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']].groupby('player_gid').sum().reset_index()\n    \n\n# Merge weighted opps columns to full season stats table\nfull_season_stats = full_season_stats.reset_index()\nfull_season_stats['player_year_team'] = full_season_stats['player_year'] + '-' + full_season_stats['team']\nopps_cols = ['player_year_team', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']\nfull_season_stats = pd.merge(full_season_stats,\n                             opps_by_player[opps_cols],\n                             left_on='player_year_team',\n                             right_on='player_year_team',\n                             how='left',\n                             suffixes=('', '_opps')\n                            )\n\nfull_season_stats_w_playoffs = full_season_stats_w_playoffs.reset_index()\nfull_season_stats_w_playoffs['player_year_team'] = full_season_stats_w_playoffs['player_year'] + '-' + full_season_stats_w_playoffs['team']\nfull_season_stats_w_playoffs = pd.merge(full_season_stats_w_playoffs,\n                             opps_by_player_w_playoffs[opps_cols],\n                             left_on='player_year_team',\n                             right_on='player_year_team',\n                             how='left',\n                             suffixes=('', '_opps')\n                            )\n# Merge weighted opps columns to per game stats table\nper_game_stats = per_game_stats.reset_index()\nper_game_stats['player_year_team'] = per_game_stats['player_year'] + '-' + per_game_stats['team']\nopps_cols = ['player_year_team', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']\nper_game_stats = pd.merge(per_game_stats,\n                          opps_by_player_w_playoffs[opps_cols],\n                          left_on='player_year_team',\n                          right_on='player_year_team',\n                          how='left',\n                          suffixes=('', '_opps')\n                         )\n# Second half only\nsh_per_game = sh_per_game.reset_index()\nsh_per_game['player_year_team'] = sh_per_game['player_year'] + '-' + sh_per_game['team']\nsh_per_game = pd.merge(sh_per_game,\n                       sh_opps_by_player[opps_cols],\n                       left_on='player_year_team',\n                       right_on='player_year_team',\n                       how='left',\n                       suffixes=('', '_opps')\n                      )\n# Individual games\noffense = offense.reset_index()\nopps_cols = ['player_gid', 'opps', 'ppr_weighted_opps', 'reg_weighted_opps']\noffense = pd.merge(offense,\n                   opps_by_player_gid[opps_cols],\n                   left_on='player_gid',\n                   right_on='player_gid',\n                   how='left',\n                   suffixes=('', '_opps')\n                  )\n\n\n# Divide total opps and weighted opps columns by games played (gid) in per game table\nper_game_stats['opps'] = per_game_stats['opps'] \/ per_game_stats['gid'] \nper_game_stats['ppr_weighted_opps'] = per_game_stats['ppr_weighted_opps'] \/ per_game_stats['gid']\nper_game_stats['reg_weighted_opps'] = per_game_stats['reg_weighted_opps'] \/ per_game_stats['gid']\n# Second half only\nsh_per_game['opps'] = sh_per_game['opps'] \/ sh_per_game['gid'] \nsh_per_game['ppr_weighted_opps'] = sh_per_game['ppr_weighted_opps'] \/ sh_per_game['gid']\nsh_per_game['reg_weighted_opps'] = sh_per_game['reg_weighted_opps'] \/ sh_per_game['gid'] ","8605b846":"def stats_correlogram(data, metrics, num_y, per_game, ppr, prior_year, second_half, year_min=2015, year_max=2019, positions=[], min_games=0):\n    \n    # Filter the data for specified metrics, years, positions, minimum games\n    data = data[(data['year'] >= year_min) & \n                (data['year'] <= year_max) &\n                (data['gid'] >= min_games)\n               ]\n    \n    if prior_year:\n        data = data[data['gid_py'] >= min_games]\n    \n    if len(positions) > 0:\n        data = data[data['pos1'].isin(positions)]\n    \n    data = data[metrics]\n   \n    # Prep title components\n    if per_game:\n        cgram_string = 'Per Game'\n    elif second_half:\n        cgram_string = 'Second Half (Per Game)'\n    else:\n        cgram_string = 'Full Season'\n    \n    cgram_string += (' - PY stats vs CY pts'  if prior_year else ' - CY stats vs CY pts')\n    cgram_string += (' - PPR Scoring\\n' if ppr else ' - Reg Scoring\\n')\n    \n    \n    if len(positions) > 0:\n        position_string = ', '.join([str(x) for x in positions])\n    else:\n        position_string = 'All Positions'\n\n    if year_min == year_max:\n        year_string = str(year_min)\n    else:\n        year_string = str(year_min) + '-' + str(year_max)\n    \n    title = (cgram_string +\n             year_string +\n             ' - ' + position_string +\n             ' - Min Games: ' + str(min_games)\n            )\n\n    # Create correlation column\n    corr_table = data.corr()\n    \n    if ppr:\n        corr_table = corr_table[['ppr_total_pts']]\n    else:\n        corr_table = corr_table[['reg_total_pts']]\n        \n             \n\n    # Plot\n    colors = 'RdYlGn' if ppr else 'RdYlBu'\n    \n    plt.figure(figsize=(12,7), dpi= 80)\n    sns.heatmap(data.corr().head(num_y), \n                xticklabels=data.corr().columns, \n                yticklabels=list(data.corr().columns)[0:num_y], \n                cmap=colors,\n                vmin=-1.0,\n                vmax=1.0,\n                center=0, \n                annot=True)\n\n    # Decorations\n    plt.title(title, fontsize=22, pad=12)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.yticks(rotation=0)\n    plt.show()\n    \n    return corr_table","388796a8":"def corr_table_gradient(full_corr, per_game_corr, ppr, sh_corr=pd.DataFrame()):\n    # Create list of correlation columns\n    corr_list = [full_corr, per_game_corr]\n    if not sh_corr.empty:\n        corr_list.append(sh_corr)\n    \n    # Create list of column names\n    corr_cols = ['full_season', 'per_game']\n    if not sh_corr.empty:\n        corr_cols.append('2nd_half_per_game')\n    \n    # Create table and rename columns\n    corr_comparison = pd.concat(corr_list, axis=1)\n    corr_comparison.columns = corr_cols\n    \n    # Filter for relevant rows\n    corr_comparison = corr_comparison.iloc[0:11]\n    \n    # Determine color map\n    cm = 'RdYlGn' if ppr else 'RdYlBu'\n    \n    # Set high and low float parameters\n    low = (1.0 - abs(corr_comparison.values.min())) \/ 2.0\n    high = (1.0 - abs(corr_comparison.values.max())) \/ 2.0\n    \n    # Stylize table (gradient and column width)\n    corr_comparison = corr_comparison.style.background_gradient(cmap=cm,\n                                                                low=low,\n                                                                high=high\n                                                               ).set_properties(**{'width': '125px'})\n    return corr_comparison\n    \n        ","0a616ddf":"# Establish ppr metrics for correlograms\nppr_metrics = ['dcp',\n               'ra',\n               'ry',\n               'tdr',\n               'trg',\n               'rec',\n               'recy',\n               'tdrec',\n               'snp',\n               'opps',\n               'ppr_weighted_opps',\n               'ppr_rush_pts',\n               'ppr_rec_pts',\n               'ppr_opp_no_fumbles',\n               'ppr_pts_ex_ret',\n               'ppr_total_pts'\n              ]\n\n# Establish regular scoring metrics for correlograms\nreg_metrics = ['dcp',\n               'ra',\n               'ry',\n               'tdr',\n               'trg',\n               'rec',\n               'recy',\n               'tdrec',\n               'snp',\n               'opps',\n               'reg_weighted_opps',\n               'reg_rush_pts',\n               'reg_rec_pts',\n               'reg_opp_no_fumbles',\n               'reg_pts_ex_ret',\n               'reg_total_pts'\n              ]\n\n# Establish regular scoring metrics for correlograms\nqb_metrics = ['dcp',\n              'pa',\n              'pc',\n              'py',\n              'tdp',\n              'ints',\n              'sk',\n              'ra',\n              'ry',\n              'tdr',\n              'snp',\n              'ppr_pass_pts',\n              'ppr_rush_pts',\n              'ppr_opp_no_fumbles',\n              'ppr_pts_ex_ret',\n              'ppr_total_pts'\n             ]","83a35317":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=qb_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['QB'],\n                              min_games=4\n                             )","1eb4d809":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=qb_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['QB'],\n                                  min_games=4\n                                 )","bb956297":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True)\ncorr_table","373f50cb":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB'],\n                              min_games=4\n                             )","aa2f3f69":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB'],\n                                  min_games=4\n                                 )","5bc2d4fc":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True)\ncorr_table","8cbe3d7f":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB'],\n                              min_games=4\n                             )","be2a451f":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB'],\n                                  min_games=4\n                                 )","fd3256a5":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False)\ncorr_table","907fb410":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['WR'],\n                              min_games=4\n                             )","27047244":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['WR'],\n                                  min_games=4\n                                 )","a436e114":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True)\ncorr_table","7bf03c35":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['WR'],\n                              min_games=4\n                             )","23efe11d":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['WR'],\n                                  min_games=4\n                                 )","14a54c0b":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False)\ncorr_table","c26faee6":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['TE'],\n                              min_games=4\n                             )","22266395":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['TE'],\n                                  min_games=4\n                                 )","fb7096ec":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True)\ncorr_table","815e2930":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['TE'],\n                              min_games=4\n                             )","202c5ad5":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['TE'],\n                                  min_games=4\n                                 )","1d9605ed":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False)\ncorr_table","3079f896":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB','WR','TE'],\n                              min_games=4\n                             )","d815d221":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB','WR','TE'],\n                                  min_games=4\n                                 )","ca36a4f6":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True)\ncorr_table","f7a7de83":"full_corr = stats_correlogram(full_season_stats,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=False,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB','WR','TE'],\n                              min_games=4\n                             )","b3f94bfd":"per_game_corr = stats_correlogram(per_game_stats,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=False,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB','WR','TE'],\n                                  min_games=4\n                                 )","f8fa45a3":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False)\ncorr_table","10de4a5d":"def py_stats_vs_cy_pts(data, scoring_labels, cy_pts_data=pd.DataFrame()):\n    # Define columns to keep from current year data (points, player data)\n    cy_cols = ['player_year',\n               'player',\n               'year',\n               'team',\n               'pos1',\n               'gid',\n              ]\n    \n    for label in scoring_labels:\n        cy_cols += [label + '_pass_pts',\n                    label + '_rush_pts',\n                    label+ '_rec_pts',\n                    label + '_fumbles',\n                    label + '_2pc',\n                    label + '_ret_pts',\n                    label + '_opp_no_fumbles',\n                    label + '_pts_ex_ret',\n                    label + '_total_pts'\n                   ]\n    \n    # Copy cy_cols to new table\n    if cy_pts_data.empty:\n        py_vs_cy = data[cy_cols]\n    else:\n        py_vs_cy = cy_pts_data[cy_cols]\n    \n    # Add prior_year and player_prior_year columns\n    if cy_pts_data.empty:\n        py_vs_cy['prior_year'] = py_vs_cy['year'] - 1\n        py_vs_cy['player_prior_year'] = py_vs_cy['player'] + '-' + py_vs_cy['prior_year'].map(str)\n    else:\n        data_copy = data.copy(deep=True)\n        data_copy['prior_year'] = data_copy['year'] - 1\n        data_copy['player_prior_year'] = data_copy['player'] + '-' + data_copy['prior_year'].map(str)\n    \n    # Define prior year columns (metrics, player data)\n    py_cols = ['player_year',\n               'team',\n               'gid',\n               'pa',\n               'dcp',\n               'pc', \n               'py',\n               'ints',\n               'sk',\n               'tdp',\n               'ra', \n               'ry',\n               'tdr',\n               'trg',\n               'rec',\n               'recy',\n               'tdrec',\n               'ret',\n               'rety',\n               'tdret',\n               'fuml',\n               'conv',\n               'snp',\n               'opps',\n               'ppr_weighted_opps',\n               'reg_weighted_opps'\n              ]\n    \n    if cy_pts_data.empty:\n        pass\n    else:\n        py_cols.append('player_prior_year')\n    \n    # Merge prior year metrics to current year points\n    if cy_pts_data.empty:\n        py_vs_cy = pd.merge(py_vs_cy,\n                            data[py_cols],\n                            left_on='player_prior_year',\n                            right_on='player_year',\n                            how='left',\n                            suffixes=('', '_py')\n                           )\n    else:\n        py_vs_cy = pd.merge(data_copy[py_cols],\n                            py_vs_cy,\n                            left_on='player_prior_year',\n                            right_on='player_year',\n                            how='left',\n                            suffixes=('_py', '')\n                           )\n    \n    # Drop unnecessary columns and all rows with NaN values\n    py_vs_cy = py_vs_cy.drop(columns=['player_year_py', 'player_prior_year'])\n    py_vs_cy = py_vs_cy.dropna(axis=0)\n    \n    # Reorder the columns\n    py_vs_cy_cols = list(dict.fromkeys(cy_cols[0:5] + py_cols + cy_cols[6:]))\n    \n    if cy_pts_data.empty: \n        pass\n    else:\n        py_vs_cy_cols.remove('player_prior_year')\n        \n\n    py_vs_cy_cols.insert(6, 'gid_py')\n    py_vs_cy_cols.insert(4, 'team_py')\n    \n    py_vs_cy = py_vs_cy[py_vs_cy_cols]\n    \n    if cy_pts_data.empty: \n        pass\n    else:\n        py_vs_cy['year'] = py_vs_cy['year'] + 1\n    \n    return py_vs_cy","59143809":"# Create table with prior year stats and current year scoring columns\nfull_season_py_vs_cy = py_stats_vs_cy_pts(full_season_stats, ['ppr', 'reg'])\nper_game_py_vs_cy = py_stats_vs_cy_pts(per_game_stats, ['ppr', 'reg'])\n# Second half only\nper_game_sh_py_vs_cy = py_stats_vs_cy_pts(sh_per_game, ['ppr', 'reg'], per_game_stats)\nper_game_sh_py_vs_cy = per_game_sh_py_vs_cy.astype({'year': int})","00bbcba2":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=qb_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['QB'],\n                              min_games=4\n                             )","8fb1dd8d":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=qb_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['QB'],\n                                  min_games=4\n                                 )","819a1efa":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=qb_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=True,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['QB'],\n                            min_games=4\n                           )","10658791":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True, sh_corr=sh_corr)\ncorr_table","cf5f05a3":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB'],\n                              min_games=4\n                             )","780aa27a":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB'],\n                                  min_games=4\n                                 )","ec0b5398":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=ppr_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=True,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['RB'],\n                            min_games=4\n                           )","48f7062f":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True, sh_corr=sh_corr)\ncorr_table","75cb2bd2":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB'],\n                              min_games=4\n                             )","34a81f1b":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB'],\n                                  min_games=4\n                                 )","d4dacb2d":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=reg_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=False,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['RB'],\n                            min_games=4\n                           )","2b6d303b":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False, sh_corr=sh_corr)\ncorr_table","fc4e04f8":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['WR'],\n                              min_games=4\n                             )","76139651":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['WR'],\n                                  min_games=4\n                                 )","71826602":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=ppr_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=True,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['WR'],\n                            min_games=4\n                           )","876af9de":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True, sh_corr=sh_corr)\ncorr_table","b6a39786":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['WR'],\n                              min_games=4\n                             )","ba2e7949":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['WR'],\n                                  min_games=4\n                                 )","e85165fe":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=reg_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=False,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['WR'],\n                            min_games=4\n                           )","cded1b93":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False, sh_corr=sh_corr)\ncorr_table","9ccc2175":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['TE'],\n                              min_games=4\n                             )","f29cb43e":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['TE'],\n                                  min_games=4\n                                 )","239cba4a":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=ppr_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=True,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['TE'],\n                            min_games=4\n                           )","0ff166cf":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True, sh_corr=sh_corr)\ncorr_table","f9ec916a":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['TE'],\n                              min_games=4\n                             )","f7b8bd0b":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['TE'],\n                                  min_games=4\n                                 )","2047faed":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=reg_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=False,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['TE'],\n                            min_games=4\n                           )","1c6997eb":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False, sh_corr=sh_corr)\ncorr_table","89a25d2c":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=ppr_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=True,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB','WR','TE'],\n                              min_games=4\n                             )","c8c5a952":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=ppr_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=True,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB','WR','TE'],\n                                  min_games=4\n                                 )","b944bdd2":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=ppr_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=True,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['RB','WR','TE'],\n                            min_games=4\n                           )","30ea4d9b":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=True, sh_corr=sh_corr)\ncorr_table","ef8d592c":"full_corr = stats_correlogram(full_season_py_vs_cy,\n                              metrics=reg_metrics,\n                              num_y=11,\n                              per_game=False,\n                              ppr=False,\n                              prior_year=True,\n                              second_half=False,\n                              year_min=2015,\n                              year_max=2019,\n                              positions=['RB','WR','TE'],\n                              min_games=4\n                             )","f3c55b35":"per_game_corr = stats_correlogram(per_game_py_vs_cy,\n                                  metrics=reg_metrics,\n                                  num_y=11,\n                                  per_game=True,\n                                  ppr=False,\n                                  prior_year=True,\n                                  second_half=False,\n                                  year_min=2015,\n                                  year_max=2019,\n                                  positions=['RB','WR','TE'],\n                                  min_games=4\n                                 )","b49726ab":"sh_corr = stats_correlogram(per_game_sh_py_vs_cy,\n                            metrics=reg_metrics,\n                            num_y=11,\n                            per_game=False,\n                            ppr=False,\n                            prior_year=True,\n                            second_half=True,\n                            year_min=2015,\n                            year_max=2019,\n                            positions=['RB','WR','TE'],\n                            min_games=4\n                           )","66895c2c":"corr_table = corr_table_gradient(full_corr, per_game_corr, ppr=False, sh_corr=sh_corr)\ncorr_table","a641387d":"# Filter offense table for relevant correlation columns\npast_games = offense[['player',\n                      'gid',\n                      'pa',\n                      'pc',\n                      'py',\n                      'tdp',\n                      'sk',\n                      'ints',\n                      'ra',\n                      'ry',\n                      'tdr',\n                      'trg',\n                      'rec',\n                      'recy',\n                      'tdrec',\n                      'ret',\n                      'rety',\n                      'tdret',\n                      'fuml',\n                      'conv',\n                      'snp',\n                      'dcp',\n                      'opps',\n                      'player_gid',\n                      'player_year',                    \n                      'ppr_weighted_opps',\n                      'reg_weighted_opps'\n                     ]\n                    ]\n\n# Convert past games metrics to rolling averages\npast_games = past_games.sort_values(by=['gid'])\npast_games.set_index(['player', 'player_gid'], inplace=True)\n\n# Past 10 games\npast_10 = past_games.groupby(level=0, \n                            group_keys=False\n                           ).rolling(window=10,\n                                     min_periods=1\n                                    ).mean()\n\n# Past 5 games\npast_5 = past_games.groupby(level=0, \n                            group_keys=False\n                           ).rolling(window=5,\n                                     min_periods=1\n                                    ).mean()\n\n# Past 3 games\npast_3 = past_games.groupby(level=0, \n                            group_keys=False\n                           ).rolling(window=3,\n                                     min_periods=1\n                                    ).mean()","6b0cd9d4":"# Merge offense table scoring columns to past games tables (3, 5, 10), drop NaN rows\noffense_cols = ['player_gid',\n                'player',\n                'year',\n                'team',\n                'pos1',\n                'ppr_pass_pts',\n                'ppr_rush_pts',\n                'ppr_rec_pts',\n                'ppr_opp_no_fumbles',\n                'ppr_pts_ex_ret',\n                'ppr_total_pts',\n                'reg_rush_pts',\n                'reg_rec_pts',\n                'reg_opp_no_fumbles',\n                'reg_pts_ex_ret',\n                'reg_total_pts'\n               ]\n\npast_10 = pd.merge(past_10,\n                   offense[offense_cols],\n                   left_on='player_gid',\n                   right_on='player_gid',\n                   how='left',\n                   suffixes=('', 'past')\n                  ).dropna(axis=0)\n\npast_5 = pd.merge(past_5,\n                   offense[offense_cols],\n                   left_on='player_gid',\n                   right_on='player_gid',\n                   how='left',\n                   suffixes=('', 'past')\n                  ).dropna(axis=0)\n\npast_3 = pd.merge(past_3,\n                   offense[offense_cols],\n                   left_on='player_gid',\n                   right_on='player_gid',\n                   how='left',\n                   suffixes=('', 'past')\n                  ).dropna(axis=0)","5c2ab773":"def past_x_games_corr(data, metrics, ppr, year_min=2015, year_max=2019, positions=[], min_games=0):\n    \n    # Filter the data for specified metrics, years, positions, minimum games\n    data = data[(data['year'] >= year_min) & \n                (data['year'] <= year_max) &\n                (data['gid'] >= min_games)\n               ]\n    \n    if len(positions) > 0:\n        data = data[data['pos1'].isin(positions)]\n    \n    data = data[metrics]\n\n    # Create correlation column\n    corr_table = data.corr()\n    \n    if ppr:\n        corr_table = corr_table[['ppr_total_pts']]\n    else:\n        corr_table = corr_table[['reg_total_pts']]      \n  \n    return corr_table","b0801d5e":"def corr_table_gradient(corr_1, corr_2, ppr, column_names, corr_3=pd.DataFrame()):\n    \n    # Create list of correlation columns\n    corr_list = [corr_1, corr_2]\n    if not sh_corr.empty:\n        corr_list.append(corr_3)\n \n    # Create table and rename columns\n    corr_comparison = pd.concat(corr_list, axis=1)\n    corr_comparison.columns = column_names\n    \n    # Filter for relevant rows\n    corr_comparison = corr_comparison.iloc[0:11]\n    \n    # Determine color map\n    cm = 'RdYlGn' if ppr else 'RdYlBu'\n    \n    # Set high and low float parameters\n    low = (1.0 - abs(corr_comparison.values.min())) \/ 2.0\n    high = (1.0 - abs(corr_comparison.values.max())) \/ 2.0\n    \n    # Stylize table (gradient and column width)\n    corr_comparison = corr_comparison.style.background_gradient(cmap=cm,\n                                                                low=low,\n                                                                high=high,\n                                                                axis=None\n                                                               ).set_properties(**{'width': '125px'})\n    return corr_comparison","a567d1ac":"def corr_3_5_10(positions, qb, ppr, year_min, year_max):\n    \n    if qb:\n        metrics = qb_metrics \n    elif ppr:\n        metrics = ppr_metrics \n    else:\n        metrics = reg_metrics\n    \n    past_10_corr = past_x_games_corr(past_10, \n                                     metrics,\n                                     ppr=ppr,\n                                     year_min=year_min,\n                                     year_max=year_max,\n                                     positions=positions\n                                    )\n\n    past_5_corr = past_x_games_corr(past_5, \n                                     metrics,\n                                     ppr=ppr,\n                                     year_min=year_min,\n                                     year_max=year_max,\n                                     positions=positions\n                                    )\n\n    past_3_corr = past_x_games_corr(past_3, \n                                     metrics,\n                                     ppr=ppr,\n                                     year_min=year_min,\n                                     year_max=year_max,\n                                     positions=positions\n                                    )\n\n    corr_comp = corr_table_gradient(past_3_corr,\n                                    past_5_corr, \n                                    ppr, \n                                    ['past_3','past 5','past 10'],\n                                    past_10_corr\n                                   )\n    \n    return corr_comp","4fc76390":"qb_ppr = corr_3_5_10(positions=['QB'], \n                     qb=True,\n                     ppr=True, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nqb_ppr","9c3f85cf":"rb_ppr = corr_3_5_10(positions=['RB'], \n                     qb=False,\n                     ppr=True, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nrb_ppr","b64db64f":"rb_reg = corr_3_5_10(positions=['RB'], \n                     qb=False,\n                     ppr=False, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nrb_reg","70c82232":"wr_ppr = corr_3_5_10(positions=['WR'], \n                     qb=False,\n                     ppr=True, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nwr_ppr","f86a82da":"wr_reg = corr_3_5_10(positions=['WR'], \n                     qb=False,\n                     ppr=False, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nwr_reg","1e31b3e0":"te_ppr = corr_3_5_10(positions=['TE'], \n                     qb=False,\n                     ppr=True, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nte_ppr","7ea5daf7":"te_reg = corr_3_5_10(positions=['TE'], \n                     qb=False,\n                     ppr=False, \n                     year_min=2015,\n                     year_max=2019\n                    )\n\nte_reg","e708e5b8":"flex_ppr = corr_3_5_10(positions=['RB', 'WR', 'TE'], \n                       qb=False,\n                       ppr=True,\n                       year_min=2015,\n                       year_max=2019\n                      )\n\nflex_ppr","1a901dc9":"flex_reg = corr_3_5_10(positions=['RB', 'WR', 'TE'], \n                       qb=False,\n                       ppr=False, \n                       year_min=2015,\n                       year_max=2019\n                      )\n\nflex_reg","47030d41":"# Specify o_line_cap table columns and datatypes\no_line_cap_col_types = {'seas' : int,\n                        'roster_starters' : str, \n                        'team' : str, \n                        'players' : int, \n                        'cap_dollars' : int, \n                        'avg_cap' : int,\n                        'perc_of_cap' : float\n                       }\n\n# Isolate column names\no_line_cap_cols = o_line_cap_col_types.keys()\n\n# Import o_line_cap table\no_line_cap = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/CAP.csv',\n                         delimiter=',',\n                         usecols=o_line_cap_cols,\n                         dtype=o_line_cap_col_types\n                        )\n\n\n# Specify snap table columns and datatypes\nsnap_col_types = {'gid' : int,\n                  'tname' : str, \n                  'player' : str, \n                  'posd' : str, \n                  'poss' : str, \n                  'snp' : int,\n                 }\n\n# Isolate column names\nsnap_cols = snap_col_types.keys()\n\n# Import snap table\nsnap = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/SNAP.csv',\n                   delimiter=',',\n                   usecols=snap_cols,\n                   dtype=snap_col_types\n                  )\n\n\n# Specify game table columns and datatypes\ngames_col_types = {'gid' : int,\n                   'seas' : int, \n                   'wk' : int, \n                   'day' : str, \n                   'v' : str, \n                   'h' : str,\n                   'temp' : float,\n                   'humd' : float,\n                   'wspd' : float,\n                   'cond' : str,\n                   'surf' : str,\n                   'ou' : float,\n                   'sprv' : float,\n                   'ptsv' : float,\n                   'ptsh' : float\n                 }\n\n# Isolate column names\ngames_cols = games_col_types.keys()\n\n# Import snap table\ngames = pd.read_csv('..\/input\/nfl-game-season-and-salary-data\/GAME.csv',\n                    delimiter=',',\n                    usecols=games_cols,\n                    dtype=games_col_types\n                   )\n\n# Filter for OL only\no_line_pos = ['OL', 'C', 'LG', 'RG', 'LT', 'RT', 'NT']\no_line_table = snap[snap['posd'].isin(o_line_pos)]\n\n# Bring in draft position and start year from player table\no_line_table = pd.merge(o_line_table,\n                        player[['player', 'start', 'dpos']],\n                        how='left',\n                        left_on='player',\n                        right_on='player'\n                       )\n\n# Replace NaN and zero in dpos with 300\no_line_table = o_line_table.replace(0, 300)\nvalues = {'dpos': 300}\no_line_table = o_line_table.fillna(value=values)\n\n\n# Bring in year and week from game table\no_line_table = pd.merge(o_line_table,\n                        games[['gid', 'seas', 'wk']],\n                        how='left',\n                        left_on='gid',\n                        right_on='gid'\n                       )\n\n# Create yrs_in_nfl column\no_line_table['yrs_in_nfl'] = o_line_table['seas'] - o_line_table['start']\n\n# Create team_gid and team_year columns for merges (o_line and offense tables)\no_line_table['team_gid'] = o_line_table['tname'] + '-' + o_line_table['gid'].map(str)\no_line_table['team_year'] = o_line_table['tname'] + '-' + o_line_table['seas'].map(str)\noffense['team_gid'] = offense['team'] + '-' + offense['gid'].map(str)\noffense['team_year'] = offense['team'] + '-' + offense['year'].map(str)\noffense_no_playoffs['team_gid'] = offense_no_playoffs['team'] + '-' + offense_no_playoffs['gid'].map(str)\noffense_no_playoffs['team_year'] = offense_no_playoffs['team'] + '-' + offense_no_playoffs['year'].map(str)\n\n# Calculate weighted avg colums for dpos and yrs_in_nfl (year and game)\no_line_table['dpos_wgt_game'] = (o_line_table.snp \n                                 \/ o_line_table.groupby('team_gid').snp.transform('sum') \n                                 * o_line_table.dpos\n                                )\n\no_line_table['dpos_wgt_seas'] = (o_line_table.snp \n                                 \/ o_line_table.groupby('team_year').snp.transform('sum') \n                                 * o_line_table.dpos\n                                )\n\no_line_table['yrs_nfl_wgt_game'] = (o_line_table.snp \n                                    \/ o_line_table.groupby('team_gid').snp.transform('sum') \n                                    * o_line_table.yrs_in_nfl\n                                   )\n\no_line_table['yrs_nfl_wgt_seas'] = (o_line_table.snp \n                                    \/ o_line_table.groupby('team_year').snp.transform('sum') \n                                    * o_line_table.yrs_in_nfl\n                                   )","d2f01334":"# Create o_line_by_game table\n\n# Specify columns to drop\ndrop_cols = ['gid',\n             'player',\n             'posd',\n             'poss',\n             'snp',\n             'start',\n             'dpos',\n             'wk',\n             'yrs_in_nfl',\n             'wk',\n             'dpos_wgt_seas',\n             'yrs_nfl_wgt_seas',\n             'team_year'\n            ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['team_gid',\n              'seas',\n              'tname'\n             ]\n              \n# Specify average columns\navg_cols = []\n\n# Run prep_for_correlations function\no_line_by_game = prep_for_correlations(data=o_line_table, \n                                       drop_cols=drop_cols, \n                                       group_cols=group_cols,\n                                       avg_cols=avg_cols,\n                                       reset=True\n                                      )\n\n# Create o_line_by_seas table\n\n# Specify columns to drop\ndrop_cols = ['gid',\n             'player',\n             'posd',\n             'poss',\n             'snp',\n             'start',\n             'dpos',\n             'wk',\n             'yrs_in_nfl',\n             'wk',\n             'dpos_wgt_game',\n             'yrs_nfl_wgt_game',\n             'team_gid'\n            ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['team_year',\n              'seas',\n              'tname'\n             ]\n              \n# Specify average columns\navg_cols = []\n\n# Run prep_for_correlations function\no_line_by_seas = prep_for_correlations(data=o_line_table, \n                                       drop_cols=drop_cols, \n                                       group_cols=group_cols,\n                                       avg_cols=avg_cols,\n                                       reset=True\n                                      )\n\n\n# Group offense table to determine fantasy points by team_gid\nteam_gid_pts = offense[['team_gid',\n                        'ppr_pass_pts',\n                        'ppr_rush_pts',\n                        'ppr_rec_pts',\n                        'ppr_total_pts',\n                        'reg_rec_pts',\n                        'reg_total_pts'\n                       ]\n                      ].groupby(['team_gid']).sum()\n\n# Merge scoring columns to o_line_table_by_game\no_line_by_game = pd.merge(o_line_by_game,\n                                team_gid_pts,\n                                how='left',\n                                left_on='team_gid',\n                                right_on='team_gid',\n                               )\n\n\n# Group offense table to determine fantasy points by team_gid\nteam_year_pts = offense_no_playoffs[['team_year',\n                         'ppr_pass_pts',\n                         'ppr_rush_pts',\n                         'ppr_rec_pts',\n                         'ppr_total_pts',\n                         'reg_rec_pts',\n                         'reg_total_pts'\n                        ]\n                       ].groupby(['team_year']).sum()\n\n# Merge scoring columns to o_line_table\no_line_by_seas = pd.merge(o_line_by_seas,\n                                team_year_pts,\n                                how='left',\n                                left_on='team_year',\n                                right_on='team_year',\n                               )\n\n# Rename weighted columns\no_line_by_game = o_line_by_game.rename(columns={'dpos_wgt_game': 'dpos_wgt', 'yrs_nfl_wgt_game': 'yrs_nfl_wgt'})\no_line_by_seas = o_line_by_seas.rename(columns={'dpos_wgt_seas': 'dpos_wgt', 'yrs_nfl_wgt_seas': 'yrs_nfl_wgt'})\n\n# Merge cap information to season table\no_line_cap['team_year'] = o_line_cap['team'] + '-' + o_line_cap['seas'].map(str)\no_line_by_seas = pd.merge(o_line_by_seas,\n                          o_line_cap[['team_year', 'cap_dollars', 'avg_cap', 'perc_of_cap']],\n                          how='left',\n                          left_on='team_year',\n                          right_on='team_year'\n                       )","6e3dc387":"def o_line_stats_correlogram(data, metrics, season, num_y, year_min=2015, year_max=2019):\n    \n    # Filter the data for specified metrics, years, positions, minimum games\n    data = data[(data['seas'] >= year_min) & \n                (data['seas'] <= year_max)\n               ]\n    \n    data = data[metrics]\n   \n    # Prep title components\n    if season:\n        cgram_string = 'O-line Correlation with Fantasy Points - By Season'\n    else:\n        cgram_string = 'O-line Correlation with Fantasy Points - By Game'\n\n    if year_min == year_max:\n        year_string = str(year_min)\n    else:\n        year_string = str(year_min) + '-' + str(year_max)\n    \n    title = (cgram_string + ' - ' +\n             year_string\n            )\n\n    # Create correlation column\n    corr_table = data.corr()\n\n    # Plot\n    colors = 'RdYlGn'\n    \n    plt.figure(figsize=(12,5), dpi= 80)\n    sns.heatmap(data.corr().head(num_y), \n                xticklabels=data.corr().columns, \n                yticklabels=list(data.corr().columns)[0:num_y], \n                cmap=colors,\n                vmin=-1.0,\n                vmax=1.0,\n                center=0, \n                annot=True)\n\n    # Decorations\n    plt.title(title, fontsize=22, pad=12)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.yticks(rotation=0)\n    plt.show()","c90364d3":"# Establish metrics for correlogram (game)\no_line_metrics = ['dpos_wgt',\n                  'yrs_nfl_wgt',\n                  'ppr_pass_pts',\n                  'ppr_rush_pts',\n                  'ppr_rec_pts',\n                  'ppr_total_pts',\n                  'reg_rec_pts',\n                  'reg_total_pts'\n                 ]\n\n# Create o_line_by_game correlogram\no_line_stats_correlogram(o_line_by_game, \n                         o_line_metrics, \n                         num_y=2,\n                         season=False, \n                         year_min=2015, \n                         year_max=2019)\n\n# Establish metrics for correlogram (season)\no_line_metrics = ['dpos_wgt',\n                  'yrs_nfl_wgt',\n                  'cap_dollars',\n                  'avg_cap',\n                  'perc_of_cap',\n                  'ppr_pass_pts',\n                  'ppr_rush_pts',\n                  'ppr_rec_pts',\n                  'ppr_total_pts',\n                  'reg_rec_pts',\n                  'reg_total_pts'\n                 ]\n\n# Create o_line_by_seas correlogram\no_line_stats_correlogram(o_line_by_seas, \n                         o_line_metrics, \n                         num_y=5,\n                         season=True, \n                         year_min=2015, \n                         year_max=2019)","7431a0f3":"# Establish dictionary to consolidate weather conditions\nweather_dict = {'Cold' : 'Snow',\n                'Light Snow' : 'Snow',\n                'Flurries' : 'Snow',\n                'Clear' : 'Fair\/Clear',\n                'Mostly Sunny' : 'Fair\/Clear',\n                'Partly Cloudy' : 'Fair\/Clear',\n                'Sunny' : 'Fair\/Clear',\n                'Fair' : 'Fair\/Clear',\n                'Chance Rain' : 'Light Rain',\n                'Light Showers' : 'Light Rain',\n                'Windy' : 'Light Rain',\n                'Cloiudy' : 'Overcast',\n                'Cloudy' : 'Overcast',\n                'Foggy' : 'Overcast',\n                'Hazy' : 'Overcast',\n                'Mostly Cloudy' : 'Overcast',\n                'Partly Sunny' : 'Overcast',\n                'Raining' : 'Rain',\n                'Showers' : 'Rain',\n                'Thunderstorms' : 'Rain',\n                'Closed Roof' : 'Roof',\n                'Covered Roof' : 'Roof'\n               }\n\n# Establish dictionary to consolidate weather conditions\nsurface_dict = {'AstroTurf' : 'Astro Turf',\n                'FieldTurf' : 'Sythetic Turf',\n                'AstroPlay' : 'Astro Turf',\n                'NeXTurf' : 'Sythetic Turf',\n                'MomentumTurf' : 'Sythetic Turf',\n                'SportGrass' : 'Sythetic Turf',\n                'DD GrassMaster' : 'GrassTurf Hybrid',\n                'Sportex' : 'Sythetic Turf',\n                'A Turf Titan' : 'Sythetic Turf',\n                'UBU Speed Series S5M' : 'Sythetic Turf',\n                'Artificial Turf' : 'Sythetic Turf',\n                'Matrix RealGrass' : 'Sythetic Turf',\n                'Hellas Matrix Turf' : 'Sythetic Turf',\n                'Shaw Sports Momentum Pro' : 'Sythetic Turf',\n               }\n\n# Replace values in cond and surf columns using dictionaries\ngames = games.replace({'cond' : weather_dict,\n                       'surf' : surface_dict\n                      }\n                     )\n\n# Merge cond and surf columns to offense table\ngames_cols = ['gid', \n              'cond', \n              'surf', \n              'v', \n              'h', \n              'temp',\n              'humd',\n              'wspd',\n              'ou',\n              'ptsv',\n              'ptsh']\n\noffense = pd.merge(offense,\n                   games[games_cols],\n                   how='left',\n                   left_on='gid',\n                   right_on='gid'\n                  )\n","4542fab1":"points_by_pos_and_x_boxplot(offense, \n                            title='PPR Points by Position and Weather Conditions',\n                            metric='ppr_total_pts',\n                            x='cond',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","2870e743":"points_by_pos_and_x_boxplot(offense, \n                            title='Regular Points by Position and Weather Conditions',\n                            metric='reg_total_pts',\n                            x='cond',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","478d3020":"points_by_pos_and_x_boxplot(offense, \n                            title='PPR Points by Position and Playing Surface',\n                            metric='ppr_total_pts',\n                            x='surf',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","34f02890":"points_by_pos_and_x_boxplot(offense, \n                            title='Regular Points by Position and Playing Surface',\n                            metric='reg_total_pts',\n                            x='surf',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","c597a5c0":"# Correlation of over\/under and implied home\/visitor scores  to fantasy points \noffense['home_visitor'] = np.where(offense['team'] == offense['h'], 'home', 'visitor')\noffense['proj_team_pts'] = np.where(offense['home_visitor'] == 'home', offense['ptsh'], offense['ptsv'])\n\n# Set up columns for prep_for_correlations\n\n# Specify columns to sum\nsum_cols = ['ppr_pass_pts', \n            'ppr_rush_pts',\n            'ppr_rec_pts', \n            'ppr_pts_ex_ret', \n            'ppr_total_pts',\n            'reg_pass_pts', \n            'reg_rush_pts',\n            'reg_rec_pts', \n            'reg_pts_ex_ret', \n            'reg_total_pts'\n           ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['team_gid',\n              'year',\n              'team'\n             ]\n\n# Specify average columns (depth chart position)\navg_cols = ['ou', 'proj_team_pts']\n\n# Specify columns to drop\ndrop_cols = [x for x in list(offense.columns) if ((x not in sum_cols) &\n                                                  (x not in count_cols) &\n                                                  (x not in group_cols) &\n                                                  (x not in avg_cols)\n                                                 )\n            ]\n\n# Run prep_for_correlations on projected points table\noffense_proj_pts = prep_for_correlations(data=offense, \n                                         drop_cols=drop_cols, \n                                         group_cols=group_cols,\n                                         avg_cols=avg_cols,\n                                         reset=True\n                                        )\n\n# Specify metrics for correlograms\nppr_metrics = ['ou', \n               'proj_team_pts',\n               'ppr_pass_pts', \n               'ppr_rush_pts',\n               'ppr_rec_pts', \n               'ppr_pts_ex_ret', \n               'ppr_total_pts'\n              ]\n\nreg_metrics = ['ou', \n               'proj_team_pts',\n               'reg_pass_pts', \n               'reg_rush_pts',\n               'reg_rec_pts', \n               'reg_pts_ex_ret', \n               'reg_total_pts'\n              ]","de80679d":"def game_conditions_correlogram(data, title, metrics, num_y, ppr, fig_height, year_min=2015, year_max=2019):\n    \n    # Filter the data for specified metrics, years, positions, minimum games\n    data = data[(data['year'] >= year_min) & \n                (data['year'] <= year_max)\n               ]\n    \n    data = data[metrics]\n   \n    # Prep title components\n    cgram_string = title\n\n    if year_min == year_max:\n        year_string = str(year_min)\n    else:\n        year_string = str(year_min) + '-' + str(year_max)\n    \n    title = (cgram_string + ' - ' +\n             year_string\n            )\n\n    # Create correlation column\n    corr_table = data.corr()\n\n    # Plot\n    colors = 'RdYlGn' if ppr else 'RdYlBu'\n    \n    plt.figure(figsize=(12,fig_height), dpi= 80)\n    sns.heatmap(data.corr().head(num_y), \n                xticklabels=data.corr().columns, \n                yticklabels=list(data.corr().columns)[0:num_y], \n                cmap=colors,\n                vmin=-1.0,\n                vmax=1.0,\n                center=0, \n                annot=True)\n\n    # Decorations\n    plt.title(title, fontsize=22, pad=12)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.yticks(rotation=0)\n    plt.show()","9eebb031":"game_conditions_correlogram(offense_proj_pts, \n                            title='Projected Game Points vs PPR Fantasy Points',\n                            metrics=ppr_metrics,  \n                            fig_height=5,\n                            num_y=2,\n                            ppr=True,\n                            year_min=2015, \n                            year_max=2019)","87bfb12e":"game_conditions_correlogram(offense_proj_pts, \n                            title='Projected Game Points vs Regular Fantasy Points',\n                            metrics=reg_metrics,  \n                            fig_height=5,\n                            num_y=2,\n                            ppr=False,\n                            year_min=2015, \n                            year_max=2019)","d04fbb18":"points_by_pos_and_x_boxplot(offense, \n                            title='PPR Points by Position and Home\/Away',\n                            metric='ppr_total_pts',\n                            x='home_visitor',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","183490f6":"points_by_pos_and_x_boxplot(offense, \n                            title='Regular Points by Position and Home\/Away',\n                            metric='reg_total_pts',\n                            x='home_visitor',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","786ec20f":"# Correct blanks in humidity and windspeed for Dome games\noffense['humd'] = np.where(offense['cond'] == 'Dome', 0, offense['humd'])\noffense['wspd'] = np.where(offense['cond'] == 'Dome', 0, offense['wspd'])\n\n# Filter for games where humd, wspd, and temp are all populated\noffense_conditions = offense.dropna()\n\n# Set up columns for prep_for_correlations\n\n# Specify columns to sum\nsum_cols = ['ppr_pass_pts', \n            'ppr_rush_pts',\n            'ppr_rec_pts', \n            'ppr_pts_ex_ret', \n            'ppr_total_pts',\n            'reg_pass_pts', \n            'reg_rush_pts',\n            'reg_rec_pts', \n            'reg_pts_ex_ret', \n            'reg_total_pts'\n           ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['gid',\n              'year',\n             ]\n\n# Specify average columns (depth chart position)\navg_cols = ['temp',\n            'humd',\n            'wspd'\n           ]\n\n# Specify columns to drop\ndrop_cols = [x for x in list(offense_conditions.columns) if ((x not in sum_cols) &\n                                                             (x not in count_cols) &\n                                                             (x not in group_cols) &\n                                                             (x not in avg_cols)\n                                                            )\n            ]\n\n# Run prep_for_correlations on conditions table\noffense_cond_grouped = prep_for_correlations(data=offense_conditions, \n                                             drop_cols=drop_cols, \n                                             group_cols=group_cols,\n                                             avg_cols=avg_cols,\n                                             reset=True\n                                            )\n\n# Specifiy metrics for correlograms\nppr_metrics = ['temp', \n               'humd',\n               'wspd',\n               'ppr_pass_pts', \n               'ppr_rush_pts',\n               'ppr_rec_pts', \n               'ppr_pts_ex_ret', \n               'ppr_total_pts'\n              ]\n\nreg_metrics = ['temp', \n               'humd',\n               'wspd',\n               'reg_pass_pts', \n               'reg_rush_pts',\n               'reg_rec_pts', \n               'reg_pts_ex_ret', \n               'reg_total_pts'\n              ]","8714f51a":"game_conditions_correlogram(offense_cond_grouped, \n                            title='PPR Fantasy Points and Weather Correlation',\n                            metrics=reg_metrics,  \n                            fig_height=5,\n                            num_y=3,\n                            ppr=True,\n                            year_min=2015, \n                            year_max=2019)","777d344c":"game_conditions_correlogram(offense_cond_grouped, \n                            title='Regular Fantasy Points and Weather Correlation',\n                            metrics=reg_metrics,  \n                            fig_height=5,\n                            num_y=3,\n                            ppr=False,\n                            year_min=2015, \n                            year_max=2019)","329d1feb":"# Bin temp column\nbins = [-20, 34, 49, 69, 84, 120]\nlabels = ['A - Under 35',\n          'B - 35-49',\n          'C - 50-69',\n          'D - 70-85',\n          'E - Over 85'\n         ]\n\noffense_conditions['temp_bins'] = pd.cut(offense_conditions['temp'], bins=bins, labels=labels)\noffense_conditions = offense_conditions.sort_values(by=['temp_bins']).reset_index(drop=True)\noffense_conditions = offense_conditions.replace({'temp_bins': {'A - Under 35' : 'Under 35',\n                                                               'B - 35-49' : '35-49',\n                                                               'C - 50-69' : '50-69',\n                                                               'D - 70-85' : '70-85',\n                                                               'E - Over 85' : 'Over 85'\n                                                              }\n                                                }\n                                               )\n\n# Run boxplot\npoints_by_pos_and_x_boxplot(offense_conditions, \n                            title='PPR Points by Position and Game Temp',\n                            metric='ppr_total_pts',\n                            x='temp_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","c670add6":"# Bin humd column\nbins = [-1, 19, 39, 59, 79, 100]\nlabels = ['A - Under 20',\n          'B - 20-39',\n          'C - 40-59',\n          'D - 60-79',\n          'E - Over 80'\n         ]\n\noffense_conditions['humd_bins'] = pd.cut(offense_conditions['humd'], bins=bins, labels=labels)\noffense_conditions = offense_conditions.sort_values(by=['humd_bins']).reset_index(drop=True)\noffense_conditions = offense_conditions.replace({'humd_bins': {'A - Under 20' : 'Under 20',\n                                                               'B - 20-39' : '20-99',\n                                                               'C - 40-59' : '40-59',\n                                                               'D - 60-79' : '60-79',\n                                                               'E - Over 80' : 'Over 80'\n                                                              }\n                                                }\n                                               )\n\n# Run boxplot\npoints_by_pos_and_x_boxplot(offense_conditions, \n                            title='PPR Points by Position and Humidity',\n                            metric='ppr_total_pts',\n                            x='humd_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","472b28ec":"# Bin wspd column\nbins = [-1, 4, 9, 14, 19, 100]\nlabels = ['Under 5',\n          '5-9',\n          '10-14',\n          '15-19',\n          'Over 20'\n         ]\n\noffense_conditions['wspd_bins'] = pd.cut(offense_conditions['wspd'], bins=bins, labels=labels)\noffense_conditions = offense_conditions.sort_values(by=['wspd_bins']).reset_index(drop=True)\noffense_conditions = offense_conditions.replace({'wspd_bins': {'A - Under 5' : 'Under 5',\n                                                               'B - 5-9' : '5-9',\n                                                               'C - 10-14' : '10-14',\n                                                               'D - 15-19' : '15-19',\n                                                               'E - Over 20' : 'Over 20'\n                                                              }\n                                                }\n                                               )\n\n# Run boxplot\npoints_by_pos_and_x_boxplot(offense_conditions, \n                            title='PPR Points by Position and Wind Speed',\n                            metric='ppr_total_pts',\n                            x='wspd_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","eff64d3d":"# Merge start year column from player table and filter for rookies (1st season)\nplayer_cols = ['player', \n               'height',\n               'weight',\n               'forty',\n               'bench',\n               'vertical',\n               'broad',\n               'shuttle',\n               'cone',\n               'arm',\n               'hand',\n               'dpos',\n               'start'\n              ]\n\nfull_season_rookies = pd.merge(full_season_stats,\n                               player[player_cols],\n                               how='left',\n                               left_on='player',\n                               right_on='player'\n                              )\n\nfull_season_rookies = full_season_rookies[full_season_rookies['year'] == full_season_rookies['start']] \n\n# Replace 0 with 300 in dpos column\nfull_season_rookies = full_season_rookies.replace({'dpos' : 0}, 300)\n\n# Replace 0 with NaN in various columns (for correlations)\ncols = ['forty',\n        'bench',\n        'vertical',\n        'broad',\n        'shuttle',\n        'cone',\n        'arm',\n        'hand'\n       ]\n\nfull_season_rookies[cols] = full_season_rookies[cols].replace({0 : np.nan})\n\n\n# Establish metrics for correlograms\nppr_metrics = ['height',\n               'weight',\n               'forty',\n               'bench',\n               'vertical',\n               'broad',\n               'shuttle',\n               'cone',\n               'arm',\n               'hand',\n               'dpos',\n               'ppr_pass_pts',\n               'ppr_rush_pts',\n               'ppr_rec_pts',\n               'ppr_total_pts'\n              ]\n\nreg_metrics = ['height',\n               'weight',\n               'forty',\n               'bench',\n               'vertical',\n               'broad',\n               'shuttle',\n               'cone',\n               'arm',\n               'hand',\n               'dpos',\n               'reg_pass_pts',\n               'reg_rush_pts',\n               'reg_rec_pts',\n               'reg_total_pts'\n              ]","5206dd61":"def rookie_correlogram(data, title, metrics, num_y, fig_height, ppr, positions, year_min=2015, year_max=2019):\n    \n    # Filter the data for specified metrics, years, positions, minimum games\n    data = data[(data['year'] >= year_min) & \n                (data['year'] <= year_max)\n               ]\n    \n    if len(positions) > 0:\n        data = data[data['pos1'].isin(positions)]\n    \n    data = data[metrics]\n   \n    # Prep title components\n    cgram_string = title\n\n    if year_min == year_max:\n        year_string = str(year_min)\n    else:\n        year_string = str(year_min) + '-' + str(year_max)\n    \n    if len(positions) > 0:\n        position_string = ', '.join([str(x) for x in positions])\n    else:\n        position_string = 'All Positions'\n    \n    title = (cgram_string + ' - ' +\n             position_string + ' - ' +\n             year_string\n            )\n\n    # Create correlation column\n    #dropped = data.shape[0] - data.dropna().shape[0]\n    corr_table = data.corr()\n\n    # Plot\n    colors = 'RdYlGn' if ppr else 'RdYlBu'\n    \n    plt.figure(figsize=(12,fig_height), dpi= 80)\n    sns.heatmap(corr_table.head(num_y), \n                xticklabels=corr_table.columns, \n                yticklabels=list(corr_table.columns)[0:num_y], \n                cmap=colors,\n                vmin=-1.0,\n                vmax=1.0,\n                center=0, \n                annot=True)\n\n    # Decorations\n    plt.title(title, fontsize=22, pad=12)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.yticks(rotation=0)\n    plt.show()","bf1c432b":"rookie_correlogram(full_season_rookies,\n                   metrics=ppr_metrics,\n                   title='PPR Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=True, \n                   positions=['WR'], \n                   year_min=2015, \n                   year_max=2019)","f2b6866b":"rookie_correlogram(full_season_rookies,\n                   metrics=reg_metrics,\n                   title='Regular Scoring Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=False, \n                   positions=['WR'], \n                   year_min=2015, \n                   year_max=2019)","2488312c":"rookie_correlogram(full_season_rookies,\n                   metrics=ppr_metrics,\n                   title='PPR Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=True, \n                   positions=['RB'], \n                   year_min=2015, \n                   year_max=2019)","a3b0abef":"rookie_correlogram(full_season_rookies,\n                   metrics=reg_metrics,\n                   title='Regular Scoring Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=False, \n                   positions=['RB'], \n                   year_min=2015, \n                   year_max=2019)","ef903999":"rookie_correlogram(full_season_rookies,\n                   metrics=ppr_metrics,\n                   title='PPR Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=True, \n                   positions=['TE'], \n                   year_min=2015, \n                   year_max=2019)","72b86b82":"rookie_correlogram(full_season_rookies,\n                   metrics=reg_metrics,\n                   title='Regular Scoring Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=False, \n                   positions=['TE'], \n                   year_min=2015, \n                   year_max=2019)","d6e174e6":"rookie_correlogram(full_season_rookies,\n                   metrics=ppr_metrics,\n                   title='PPR Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=True, \n                   positions=['QB'], \n                   year_min=2015, \n                   year_max=2019)","9a303474":"rookie_correlogram(full_season_rookies,\n                   metrics=reg_metrics,\n                   title='Regular Scoring Rookie Correlogram',\n                   num_y=11, \n                   fig_height=8, \n                   ppr=False, \n                   positions=['QB'], \n                   year_min=2015, \n                   year_max=2019)","f1e5ad85":"# Set up bins for draft position\nbins = [0, 32, 64, 96, 128, 224, 500]\nlabels = ['A - 1st Rd',\n          'B - 2nd Rd',\n          'C - 3rd Rd',\n          'D - 4th Rd',\n          'E - 5th-7th', \n          'F - Undrafted'\n         ]\n\nfull_season_rookies['draft_bins'] = pd.cut(full_season_rookies['dpos'], bins=bins, labels=labels)\nfull_season_rookies = full_season_rookies.sort_values(by=['draft_bins']).reset_index(drop=True)\nfull_season_rookies = full_season_rookies.replace({'draft_bins': {'A - 1st Rd' : '1st Rd',\n                                                                  'B - 2nd Rd' : '2nd Rd',\n                                                                  'C - 3rd Rd' : '3rd Rd',\n                                                                  'D - 4th Rd' : '4th Rd',\n                                                                  'E - 5th-7th' : '5th-7th', \n                                                                  'F - Undrafted' : 'Undrafted'\n                                                                 }\n                                                  }\n                                                 )\n                                                      \n# Run rookie draft position boxplot\npoints_by_pos_and_x_boxplot(full_season_rookies, \n                            title='Rookie PPR Points by Position and Draft Position',\n                            metric='ppr_total_pts',\n                            x='draft_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2015, 2016, 2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","0b24d1d7":"# Set up bins for 40 yd dash\nbins = [4.00, 4.40, 4.50, 4.60, 4.80, 5.00, 10.00]\nlabels = ['A - Under 4.4',\n          'B - 4.4-4.49',\n          'C - 4.5-4.59',\n          'D - 4.6-4.79',\n          'E - 4.8-4.99', \n          'F - 5.0+'\n         ]\n\nfull_season_rookies['40_bins'] = pd.cut(full_season_rookies['forty'], bins=bins, labels=labels)\nfull_season_rookies = full_season_rookies.sort_values(by=['40_bins']).reset_index(drop=True)\nfull_season_rookies = full_season_rookies.replace({'40_bins': {'A - Under 4.4' : 'Under 4.4',\n                                                               'B - 4.4-4.49' : '4.4-4.49',\n                                                               'C - 4.5-4.59' : '4.5-4.59',\n                                                               'D - 4.6-4.79' : '4.6-4.79',\n                                                               'E - 4.8-4.99' : '4.8-4.99',\n                                                               'F - 5.0+' : '5.0+'\n                                                              }\n                                                  }\n                                                 )\n                                                      \n# Run rookie 40 yd dash boxplot\npoints_by_pos_and_x_boxplot(full_season_rookies, \n                            title='Rookie PPR Points by Position and 40 Yard Dash',\n                            metric='ppr_total_pts',\n                            x='40_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2015, 2016, 2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","62318b15":"# Set up bins for broad jump\nbins = [5, 100, 110, 120, 130, 200]\nlabels = ['A - Under 100',\n          'B - 100-109',\n          'C - 110-119',\n          'D - 120-129',\n          'E - 130+'\n         ]\n\nfull_season_rookies['broad_jump_bins'] = pd.cut(full_season_rookies['broad'], bins=bins, labels=labels)\nfull_season_rookies = full_season_rookies.sort_values(by=['broad_jump_bins']).reset_index(drop=True)\nfull_season_rookies = full_season_rookies.replace({'broad_jump_bins': {'A - Under 100' : 'Under 100',\n                                                                       'B - 100-109' : '100-109',\n                                                                       'C - 110-119' : '110-119',\n                                                                       'D - 120-129' : '120-129',\n                                                                       'E - 130+' : '130+'\n                                                                      }\n                                                  }\n                                                 )\n                                                      \n# Run rookie broad jump boxplot\npoints_by_pos_and_x_boxplot(full_season_rookies, \n                            title='Rookie PPR Points by Position and Broad Jump',\n                            metric='ppr_total_pts',\n                            x='broad_jump_bins',\n                            positions=['QB', 'RB', 'WR', 'TE'], \n                            years=[2015, 2016, 2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","11095506":"# Set up bins for hand size\nbins = [1, 9.5, 10.0, 20.0]\nlabels = ['A - Under 9.5',\n          'B - 9.5-9.9',\n          'C - 10.0+',\n         ]\n\nfull_season_rookies['hand_size_bins'] = pd.cut(full_season_rookies['hand'], bins=bins, labels=labels)\nfull_season_rookies = full_season_rookies.sort_values(by=['hand_size_bins']).reset_index(drop=True)\nfull_season_rookies = full_season_rookies.replace({'hand_size_bins': {'A - Under 9.5' : 'Under 9.5',\n                                                                      'B - 9.5-9.9' : '9.5-9.9',\n                                                                      'C - 10.0+' : '10.0+',\n                                                                     }\n                                                  }\n                                                 )\n                                                      \n# Run rookie QB hand size boxplot\npoints_by_pos_and_x_boxplot(full_season_rookies, \n                            title='Rookie QB PPR Points by Hand Size',\n                            metric='ppr_total_pts',\n                            x='hand_size_bins',\n                            positions=['QB'], \n                            years=[2015, 2016, 2017, 2018, 2019], \n                            color_dict=color_dict\n                           )","ea4f9238":"# Prepare prior year veteran points table\npy_veteran_points = per_game_stats[['player_year', \n                                    'player', \n                                    'year', \n                                    'team', \n                                    'pos1', \n                                    'gid', \n                                    'ppr_total_pts', \n                                    'reg_total_pts'\n                                   ]\n                                  ]\n\npy_veteran_points['next_year'] = py_veteran_points['year'] + 1\npy_veteran_points['team_next_year_pos1'] = (py_veteran_points['team'] + '-' + \n                                            py_veteran_points['next_year'].map(str) + '-' +\n                                            py_veteran_points['pos1']\n                                           )\n\n# Specify columns to drop\ndrop_cols = ['gid',\n             'player',\n             'player_year',\n             'team',\n             'next_year',\n             'year',\n             'pos1'\n            ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['team_next_year_pos1']\n              \n# Specify average columns\navg_cols = []\n\n# Run prep_for_correlations function\npy_veteran_points_grouped = prep_for_correlations(data=py_veteran_points, \n                                                  drop_cols=drop_cols, \n                                                  group_cols=group_cols,\n                                                  avg_cols=avg_cols,\n                                                  reset=True\n                                                 )\n\n# Rename points columns\npy_veteran_points_grouped = py_veteran_points_grouped.rename(columns={'ppr_total_pts' : 'vet_py_ppr_pts_per_game',\n                                                                      'reg_total_pts' : 'vet_py_reg_pts_per_game'\n                                                                     }\n                                                            )\n\n# Add team_year to full season rookie table\nfull_season_rookies['team_year_pos1'] = (full_season_rookies['team'] + '-' + \n                                         full_season_rookies['year'].map(str) + '-' + \n                                         full_season_rookies['pos1']\n                                        )","b9527467":"# Prepare team points table\nteam_pts_by_position = offense[['pos1',\n                                'year',\n                                'team',\n                                'ppr_total_pts',\n                                'reg_total_pts'\n                               ]\n                              ]\n                               \nteam_pts_by_position['next_year'] = team_pts_by_position['year'] + 1\n\nteam_pts_by_position['team_next_year_pos1'] = (team_pts_by_position['team'] + '-' + \n                                               team_pts_by_position['next_year'].map(str) + '-' +\n                                               team_pts_by_position['pos1']\n                                              )\n\n# Specify columns to drop\ndrop_cols = ['pos1',\n             'year',\n             'team',\n             'next_year'\n            ]\n\n# Specify count columns (games played)\ncount_cols = []\n\n# Specify grouping columns\ngroup_cols = ['team_next_year_pos1']\n              \n# Specify average columns\navg_cols = []\n\n# Run prep_for_correlations function\nteam_pts_by_position_grouped = prep_for_correlations(data=team_pts_by_position, \n                                                     drop_cols=drop_cols, \n                                                     group_cols=group_cols,\n                                                     avg_cols=avg_cols,\n                                                     reset=True\n                                                    )\n\n# Rename points columns\nteam_pts_by_position_grouped = team_pts_by_position_grouped.rename(columns={'ppr_total_pts' : 'py_ppr_pts_by_position',\n                                                                            'reg_total_pts' : 'py_reg_pts_by_position'\n                                                                           }\n                                                                  )","a660fe28":"# Merge tables for correlation of rookie performance vs vet performance\nrookie_cols = ['player_year',\n               'team_year_pos1',\n               'year',\n               'pos1',\n               'ppr_total_pts',\n               'reg_total_pts'\n              ]\n\nvet_cols = ['team_next_year_pos1',\n            'vet_py_ppr_pts_per_game',\n            'vet_py_reg_pts_per_game'\n           ]\n\nrookie_performance_vs_py = pd.merge(full_season_rookies[rookie_cols],\n                                    py_veteran_points_grouped[vet_cols],\n                                    how='left',\n                                    left_on='team_year_pos1',\n                                    right_on='team_next_year_pos1'\n                                   )\n\n# Merge tables for correlation of rookie performance vs team points by position\nteam_pts_cols = ['team_next_year_pos1',\n                 'py_ppr_pts_by_position',\n                 'py_reg_pts_by_position'\n                ]\n\nrookie_performance_vs_py = pd.merge(rookie_performance_vs_py,\n                                    team_pts_by_position_grouped[team_pts_cols],\n                                    how='left',\n                                    left_on='team_year_pos1',\n                                    right_on='team_next_year_pos1'\n                                   )\n","e6056ce6":"ppr_metrics = ['vet_py_ppr_pts_per_game',\n               'py_ppr_pts_by_position',\n               'ppr_total_pts'\n              ]\n\nreg_metrics = ['vet_py_reg_pts_per_game',\n               'py_reg_pts_by_position',\n               'reg_total_pts'\n              ]\n\nrookie_correlogram(rookie_performance_vs_py,\n                   metrics=ppr_metrics,\n                   title='PPR Rookie Pts vs PY Metrics',\n                   num_y=11, \n                   fig_height=4, \n                   ppr=True, \n                   positions=['RB', 'WR', 'TE', 'QB'], \n                   year_min=2015, \n                   year_max=2019)","9b85095a":"rookie_correlogram(rookie_performance_vs_py,\n                   metrics=reg_metrics,\n                   title='Regular Rookie Pts vs PY Metrics',\n                   num_y=11, \n                   fig_height=4, \n                   ppr=False, \n                   positions=['RB', 'WR', 'TE', 'QB'], \n                   year_min=2015, \n                   year_max=2019)","6bf0e296":"#### Correlation with Total Points (FLEX, Regular):","59cebe7d":"##### Run Boxplots","be7bb91d":"### FLEX (RB, WR, TE):\n\nNotes:\n- When combinging RB, WR, and TE, the value of receptions in a PPR format becomes clear. **The metrics correlating most with total fantasy points are weighted opps, receptions, and targets**. Given that pass plays generally have a higher weighted opportunity value, it appears clear that WR's and TE's are more valuable in a FLEX position in PPR formats, however, I imagine the distribution of total points is more widespread for WR\/TE than for RB. In other words, RB's may be a safer bet if they get high touches, whereas a WR\/TE has higher upside. I imagine the depth chart position is important as well, given that depth chart position (dcp) is fairly strongly negatively correlated with weighted opps. \n- **In regular scoring formats, weighted opps are also the highest correlated metric with fantasy points, followed by opps (unweighted), receptions, and targets.**","eab0dd8e":"### TE Past X Games Correlation with PPR Points:","bd27ace0":"#### Create Additional Columns and Clean Up Certain Columns in Plays Table","f77d7410":"### Quarterbacks:\n\nNotes:\n- PPR and Regular scoring are the same (more or less) for QB's, and I have not calculated separate correlations.\n- For QB's, the **full season metrics** most highly correlated with fantasy production are **touchdown passes, pass yards, pass attempts, snaps, pass attempts, and pass completions**.\n- The **per game metrics** most highly correlated with fantasy production are **touchdown passes, pass yards, pass completions, snaps, and pass attempts.**\n- Interestingly, negative metrics like sacks and interceptions correlate strongly with season long fantasy production as well. This makes sense, because with higher snap counts come higher sack and interception totals. On a per game basis, sacks and interceptions still have positive correlations with fantasy points, but much less so.\n- It appears that, above all, it is important that your fantasy QB is on the field as much as possible and playing for a team that scores offensive points.\n- Rushing metrics correlate moderately with fantasy production as well, though must less so than passing. Still, we know that a top-tier rushing QB is incredibly valuable. This will take more research.","c8a816f4":"#### Correlation with Total Points (QB, Prior Year Stats vs. Current Year Points):","6a04efab":"## Correlations with Single Game Performance","18ca6a1d":"#### Calculate Correlations Between O-Line Stats and Fantasy Production","9e26cc3d":"##### Prepare Offense Table","34ac7186":"#### Correlation with Total Points (FLEX, PPR):","649ae3f4":"### WR Past X Games Correlation with Regular Scoring Points:","237b9410":"#### Quarterbacks:","ba057431":"#### Run Boxplots:","ce9825dd":"## Offensive Line Metrics Correlated with Skill Positions","f8784dd4":"## Create Full Season, Per Game, and Second Half Tables for Correlation Calculations","d10fc3c0":"##### Prep Home\/Visitor and Implied Point Columns","630440ad":"### WR Past X Games Correlation with PPR Points:","ed6612d7":"##### Run Correlograms","8600860d":"#### Generate Full Season, Per Game, and Second Half Tables","a0b2b792":"#### Functions for Determining Correlation","dcd16729":"### RB Past X Games Correlation with PPR Points:","b5899ecb":"I explored two metrics related to a team's prior year performance in conjunction with rookie performance:\n\n1. Prior Year Veteran Points per Game - I looked at the fantasy points per game that the veteran players (in the same position as the rookie) achieved in the prior year. The thought was that perhaps if a rookie was on a team with veterans at their position that performed at a lower level, perhaps they would have more opportunity and have better fantasy production. This hypothesis was not supported by the correlation. **There was virtually no correlation between prior year veteran points per game and rookie fantasy production.**\n\n2. Prior Year Team Points by Position - I compared a rookie's team's prior year fantasy points in their position with the rookie's fantasy production. Again, the hypothesis was not supported. **There was virtually no corrleation between prior year team points by position and rookie fantasy production.**\n\n\nI did not bother to break out the correlograms by position, as the correlations were not convincing for any position.","d7aaf8d1":"### Running Backs:\n\nNotes:\n- In regular scoring formats, the prior year metrics correlating most with current year fantasy points are (1) rush yards, (2) rush attempts, (3) snaps, and (4) opps\/weighted opps.\n- In PPR formats, the prior year metrics correlating most with current year fantasy points are (1) rush yards, (2) snaps, (3) rush attempts, and (4) weighted opps.\n- Generally, **second half per game metrics correlate most strongly with current year performance**, followed by per game metrics (full season). Full season metrics from the prior year correlate the least with current year performance.","ab76739b":"Not surprisingly, the rookie metric most correlated with fantasy production is **draft position**. This is true for all positions. The correlation is particularly pronounced for RB's, QB's, and TE's taken in the first round of the draft. For each of these positions, 1st round picks significantly outperform rookies selected in later rounds. For WR's, there is not a significant variance in the distribution of scoring by 1st, 2nd, and 3rd round picks. In fact, over 2015-2019, 2nd round selections have slightly outperformed 1st round selections in their first year, on average.\n\nThere are a few physical attributes and combine performance metrics that have moderate correlations with fantasy production as well. Over 2015-2019, the following metrics correlated most with fantasy production:\n\n- WR: 40 Time (23% PPR, 24% Regular)\n- RB: Nothing over 20% correlation\n- TE: 40 Time (41% PPR, 40% Regular), Broad Jump (26% PPR, 25% Regular)\n- QB: Hand Size (31% PPR, 31% Regular), 3-Cone Drill (28% PPR, 28% Regular), 40 Time (27% PPR, 26% Regular)","96d4aab0":"#### Prepare Offensive Line Data Tables","cf034dc5":"#### Correlation with Total Points (FLEX, PPR, Prior Year Stats vs. Current Year Points):","39b3017f":"##### Import Libraries","d98e62d1":"## How do CURRENT YEAR stats correlate with CURRENT YEAR fantasy points?","0c878f24":"#### Import Plays Tables and Merge Various Columns","5d2c2d04":"##### Run Correlograms","ddfac23b":"**Data Sources:**  \nOffensive statistics from ArmchairAnalysis.com  \nSalary data from Spotrac.com  \n\nOnly data from ***2015-2019*** is included.\n\n**Purpose:**  \nThis exploratory analysis was intended to develop an understanding of which offensive metrics correlate most closely with fantasy football production. Which metrics are most correlated with a player's performance in the upcoming year? Which metrics correlate most with a player's performance in the upcoming game? What time period is most appropriate when looking at a player's past games? How do key metrics change depend on the player's position? What about if different scoring systems are used (PPR vs. Regular, for example)? How closely do individual game attributes like over\/under, implied team points, weather, or playing surface impact fantasy production? Do any available offensive line metrics correlate with fantasy production for different positions? How can we evaluate rookies? These are some of the questions I set out to explore. This exploratory analysis only scratches the surface in what is an inherently unpredictable game.\n\n**Tableau Visualization:**  \nI've taken this information, as well as additional salary data scraped from Spotrac.com, and build a Tableau Public file that can be used as a draft kit and also allows for building some fun scatter plots, histograms, and box plots with lots of interesting filters and paramaters. You can find those here:  https:\/\/public.tableau.com\/profile\/david.wismer#!\/vizhome\/FantasyDraftKit\/RankingsDash\n\n**Abbreviations:**  \ndcp - depth chart position  \npa - pass attempts  \npc - pass completions  \npy - pass yards  \ntdp - touchdown passes  \nints - interceptions  \nsk - sacks  \nra - rush attempts  \nry - rush yards  \ntdr - touchdown rushes  \ntrg - targets  \nrec - receptions  \nrecy - receiving yeards  \ntdrec - touchdown receptions  \nsnp - snaps  \nopps - opportunities  \ndpos - draft position  \nou - over\/under  \ntemp - temperature  \nhumd - humidity  \nwspd - windspeed\n\n**Fantasy Scoring System:**  \nPoints per pass yard = 1.0\/25.0  \nPass touchdown = 6.0  \nInterception = -1.0  \nSack = -1.0  \nPoints per rush yard = 1.0\/10.0  \nRush touchdown = 6.0  \nPoints per receiving yard = 1.0\/10.0  \nPoints per reception = 1.0 (PPR), 0.0 (Regular)  \nReceiving touchdown = 6.0  \nReturn touchdown = 6.0  \nTwo point conversion = 2.0  \nFumble lost = -2.0","7b929396":"#### Correlation with Total Points (RB, Regular, Prior Year Stats vs. Current Year Points):","ceba8331":"### TE Past X Games Correlation with Regular Scoring Points:","48b624df":"#### Determine Average Points per Opportunity and Establish Weighting","ced3ec17":"#### Add Scoring Columns to Plays Table","238d482e":"#### Correlation with Total Points (TE, Regular, Prior Year Stats vs. Current Year Points):","b9798b5b":"## How do individual game attributes (weather, home\/away, playing surface, over\/under) correlate with fantasy points?","4f9dc590":"### FLEX (RB, WR, TE):\n\nNotes:\n- In regular scoring formats, the prior year metrics correlating most with current year fantasy points are (1) opportunities, (2) receptions, (3) weighted opps, and (4) targets.\n- In PPR formats, the prior year metrics correlating most with current year fantasy points are (1) receptions, (2) targets, (3) receiving yards, and (4) snaps.\n- Generally, **second half per game metrics correlate most strongly with current year performance**, followed by per game metrics (full season). Full season metrics from the prior year correlate the least with current year performance.","8b6a980d":"### Tight Ends:\n\nNotes:\n- In both regular and PPR scoring formats, the prior year metrics correlating most with current year fantasy points are (1) receiving yards, (2) receptions, (3) targets, and (4) weighted opps. \n- Generally, **full season per game metrics correlate most strongly with current year performance**, followed by second half per game metrics. Full season metrics from the prior year correlate the least with current year performance.","d15ea01e":"#### Add Opportunities and Weighted Opportunities to Full Season, Per Game, and Offense Tables","fb420c24":"#### Correlation with Total Points (WR, Regular, Prior Year Stats vs. Current Year Points):","2bdcbecc":"## How do PRIOR YEAR stats correlate with CURRENT YEAR fantasy points?","b24f80c0":"## Explore Weighted Opportunities Based on Field Position and Play Type","adf1b15e":"#### Create Tables for Past X Games (3, 5, 10)","04a648d0":"##### Prep Data and Run Boxplots ","c4ae5754":"##### Prep Conditions Data","f379b23b":"The total Vegas Over\/Under for a game does have a moderate correlation with total fantasy production, as well as passing and receiving production. There is no significant correlation with rushing fantasy production. **The stronger correlations are between fantasy production and projected team points.** In PPR scoring, total fantasy production for a team correlated 76% with the team's projected points over 2015-2019. Projected points correlated most highly with passing fantasy production (70%) and a bit less so with rushing production (52%) and receiving production (49%). In Regular scoring, total fantasy production for a team correlated 83% with the team's projected points over 2015-2019. Projected points correlated most highly with passing fantasy production (70%) and a bit less so with receiving production (60%) and rushing production (52%).","e2cbe97c":"#### Correlation with Total Points (TE, Regular):","86abc9c0":"#### Home vs. Away by Position Boxplots","3b5dabd5":"# Fantasy Football - Exploratory Data Analysis","8fa9502a":"### FLEX Past X Games Correlation with PPR Points:","b9ed7cb0":"## Snaps by Depth Chart Position","69c56766":"#### Wide Receivers:","194f0c7d":"### Correlation of Over\/Under and Implied Team Points to Fantasy Production","0c6299aa":"#### Correlation with Total Points (WR, PPR, Prior Year Stats vs. Current Year Points):","3f179ec6":"##### Establish Scoring and Color Coding Dictionaries","271c933c":"## Fantasy Point Distributions by Position and Depth Chart Position (Single Game)","cdda01a2":"### Quarterbacks:\n\nNotes:\n- The prior year metrics correlating most with current year fantasy points are (1) touchdown passes, (2) pass yards, (3) snaps, (4) pass completions, and (5) pass attempts.\n- Generally, **full season metrics correlate most strongly with current year performance**, followed by second half per game metrics. Per game metrics for the full prior season correlate the least with current year performance.","7412184f":"#### Correlation with Total Points (QB):","dcc3c2d7":"##### Clean Games Data and Merge to Offense Table","e2912179":"#### Correlation with Total Points (RB, PPR):","7e94313c":"### Tight Ends:\n\nNotes:\n- **In a PPR format, the correlations for TE's are similar to WR's in that yards, receptions, and targets are king. However, weighted opps has a higher correltion with total points than for WR's**, likely suggesting that TE's getting targets in high value positions (e.g. red zone) score more fantasy points on average. Weighted opportunities are slightly more correlated with fantasy points in a PPR format, but not by much.","28c1d52a":"#### Correlation with Total Points (RB, Regular):","ebf6d56a":"### RB Past X Games Correlation with Regular Scoring Points:","442890cb":"### Distribution of Points by Position and Game Conditions","a2365f60":"#### Correlation with Total Points (WR, PPR):","8c7d0bda":"## Does a team's prior year performance predict rookie performance?","0fa4e186":"\n\nThe correlograms below explore how attributes of a team's offensive line correlate with fantasy point production. I\u2019ve analyzed the following offensive line attributes and observed the following results:\n\n1. Weighted Draft Position (dpos_wgt) \u2013 I calculated dpos_wgt by computing the weighted average of the draft position of the linemen on each team based on the number of snaps played by each lineman during the game.\n     - Correlation to fantasy points is NEGLIGIBLE\n\n\n2. Weighted Tenure in NFL (yrs_nfl_wgt) \u2013 Again, I calculated a weighted tenure of the offensive line based on the number of snaps played in each game.\n    - Correlation to fantasy points is NEGLIGIBLE\n\n\n3. O-Line Cap Dollars (cap_dollars) \u2013 Cap dollar information was downloaded from sportrac.com. \n    - Cap dollars appear to correlate MODERATELY with passing, receiving, and total fantasy production and less so with rushing.\n\n\n4. Average Cap Dollars per Lineman (avg_cap) \u2013 This also came from sportrac.com. \n    - Average lineman cap dollars correlates with fantasty production slightly less than total offensive line cap dollars.\n\n\n5. O-Line Percentage of Cap Dollars (perc_of_cap) \u2013 This also came from sportrac.com and is calculated as the total offensive line cap dollars as a percentage of a team\u2019s total cap dollars.\n    - O-Line Percentage of Cap Dollars correlates MODERATELY with passing, receiving, and total fantasy production. Correlations are slightly stronger than total offensive line cap dollars.\n","b82f4457":"### Wide Receivers:\n\nNotes:\n- For WR's, weighted opps are less correlated with total fantasy points than pure targets in a PPR format. This could mean that, in a PPR format, it's more important to get consistent targets than it is to be targeted in a specific area of the field. Or it could mean that there isn't much variance in the average weighted opportunity amongst wide receivers. This is something to look into. Unsurprisingly, receptions and yards are even more highly correlated with fantasy points than targets. **In both PPR and regular scoring formats, the top three correlations with fantasy points are (1) receiving yards, (2) receptions, and (3) targets.**","156b0df1":"### Correlation of Weather Conditions to Fantasy Production","7a9d2eb8":"#### Correlation with Total Points (TE, PPR, Prior Year Stats vs. Current Year Points):","7144113f":"I\u2019ve run correlations to determine which key metrics over which time period (3, 5, or 10 prior games) correlate most closely with the player\u2019s total fantasy points in their next game. The most highly correlated metrics are listed by position below.\n\n*** In ALL cases, the PRIOR 3 GAMES correlated more highly with next game performance than the prior 5 games or prior 10 games. \n\nQuarterbacks (PPR):\n\n1. Touchdown Passes - (67.7%)\n2. Pass Yards - (58.7%)\n3. Pass Completions - (51.6%)\n4. Pass Attempts - (47.3%)\n\nRunning Backs (PPR):\n1.\tPPR Weighted Opportunities \u2013 (71.9%)\n2.\tOpportunities \u2013 (68.1%)\n3.\tRush Yards \u2013 (64.6%)\n4.\tSnaps \u2013 (64.3%)\n\nRunning Backs (Regular):\n1.\tRegular Weighted Opportunities \u2013 (68.3%)\n2.\tOpportunities \u2013 (66.4%)\n3.\tRush Yards \u2013 (67.6%)\n4.\tRush Attempts \u2013 (62.6%)\n\nWide Receivers (PPR):\n1.\tReceiving Yards \u2013 (72.2%)\n2.\tReceptions \u2013 (69.3%)\n3.\tPPR Weighted Opportunities \u2013 (65.3%)\n4.\tTargets \u2013 (65.0%)\n\nWide Receivers (Regular):\n1.\tReceiving Yards \u2013 (66.3%)\n2.\tTouchdown Receptions \u2013 (59.6%)\n3.\tReceptions \u2013 (59.1%)\n4.\tRegular Weighted Opportunities \u2013 (57.2%)\n\nTight Ends (PPR):\n1.\tReceiving Yards \u2013 (70.1%)\n2.\tReceptions \u2013 (68.6%)\n3.\tPPR Weighted Opportunities \u2013 (65.9%)\n4.\tTargets \u2013 (65.1%)\n\nTight Ends (Regular):\n1.\tReceiving Yards \u2013 (63.2%)\n2.\tTouchdown Receptions \u2013 (58.4%)\n3.\tReceptions \u2013 (58.4%)\n4.\tRegular Weighted Opportunities \u2013 (58.0%)\n","5a285c23":"### QB Past X Games Correlation with PPR Points:","7558d3e3":"#### Run Correlograms:","377e504c":"##### Add Scoring Columns to Offense Table","0225b1da":"#### Running Backs:","ccf38bd1":"## What rookie metrics correlate most strongly with first year fantasy production?","f1503a9d":"#### Correlation with Total Points (TE, PPR):","40d86cdb":"### Wide Receivers:\n\nNotes:\n- In both regular and PPR scoring formats, the prior year metrics correlating most with current year fantasy points are (1) receiving yards, (2) targets, (3) receptions, and (4) snaps. \n- Generally, **second half per game metrics correlate most strongly with current year performance**, followed by per game metrics (full season). Full season metrics from the prior year correlate the least with current year performance.","1a7d0aff":"### FLEX Past X Games Correlation with Regular Scoring Points:","8b027d28":"#### Tight Ends:","55e2c5da":"#### Correlation with Total Points (RB, PPR, Prior Year Stats vs. Current Year Points):","e6522c88":"### Running Backs:\n\nNotes:\n- For RB's, the **metrics most highly correlated with fantasy production in PPR scoring are snaps and weighted opportunities**. Rush attempts, yards, and TD's also have high correlation with total points, more so than receptions, targets, and receiving yards and TD's. However, the highest correlations are with snap count and weighted opportunities. **Weighted opportunities better captures the value of passing in a PPR format**. \n- In a **regular scoring format (no PPR), rush yards correlate most with fantasy points**, followed by rush attempts and then weighted opportunities. It is worth noting that rush TD's have a slightly higher correlation with fantasy points in regular scoring than in PPR scoring.","fb5317bf":"#### Correlation with Total Points (FLEX, Regular, Prior Year Stats vs. Current Year Points):","3bd49dac":"#### Correlation with Total Points (WR, Regular):"}}