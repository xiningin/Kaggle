{"cell_type":{"35a9ab14":"code","6cf6d28d":"code","016e393d":"code","e3e95ba3":"code","09bde655":"code","b123fb31":"code","62256261":"code","c6b9ac90":"code","c97bee6e":"code","c2a4f50e":"code","3ef857ba":"code","b375d8ce":"code","cb793d9d":"code","23282163":"code","b6398ccc":"code","51855749":"code","4c9e8338":"code","f867bb83":"code","a90ec530":"code","e4a9d5d1":"code","97f62e93":"code","7c79d7e2":"code","05c10bff":"code","09d8485d":"code","0a1fe337":"code","6073a8da":"code","189c64a2":"code","f71c6cb9":"code","ef33a5d0":"code","777862f2":"code","0f70f396":"code","f086131b":"markdown","5c05f1c2":"markdown","138bb08a":"markdown","cd675849":"markdown","4f3529f9":"markdown","6e2ba573":"markdown","f49da045":"markdown","433c46f9":"markdown","ee0796ae":"markdown","be595ec6":"markdown"},"source":{"35a9ab14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ndataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\ndf.head()\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cf6d28d":"df.info()","016e393d":"df.describe()","e3e95ba3":"df.isnull().sum()","09bde655":"df[\"Bump\"] = df[\"Bump\"].astype(int)\ndf[\"Crossing\"] = df[\"Crossing\"].astype(int)\ndf[\"Give_Way\"] = df[\"Give_Way\"].astype(int)\ndf[\"Junction\"] = df[\"Junction\"].astype(int)\ndf[\"No_Exit\"] = df[\"No_Exit\"].astype(int)\ndf[\"Railway\"] = df[\"Railway\"].astype(int)\ndf[\"Roundabout\"] = df[\"Roundabout\"].astype(int)\ndf[\"Stop\"] = df[\"Stop\"].astype(int)\ndf[\"Amenity\"] = df[\"Amenity\"].astype(int)\ndf.head()","b123fb31":"f=list(df[\"timestamp\"])                                   #convtring time \nnew_time=[]\nfor i in range (len(f)):\n    new_time.append(f[i].split()[0])\ndf[\"Time\"]=new_time\n\n","62256261":"del df['Side']\ndel df['timestamp']\ndf","c6b9ac90":"df.drop(columns='ID').describe()","c97bee6e":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf2 = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n","c2a4f50e":"time=[]\nd=list(df2[\"Day\"])\nm=list(df2[\"Month\"])\ny=list(df2[\"Year\"])\nfor i in range(len(y)):\n    s=str(y[i])+\"-\"+str(m[i])+\"-\"+str(d[i])\n    time.append(s)\ndel df2['Day']\ndel df2['Year']\ndel df2['Month']\ndel df2['Hour']\n\ndf2[\"Time\"]=time\ndf2","3ef857ba":"df2=df2.drop_duplicates(['Time'], keep='last')\nprint(\"The shape of the Weather After removing dublicate is {}.\\n\\n\".format(df2.shape))","b375d8ce":"del df2[\"Selected\"]\ndf2","cb793d9d":"import xml.etree.ElementTree as et \n\nxtree = et.parse(os.path.join(dataset_path, 'holidays.xml'))\nxroot = xtree.getroot() \n\ndf_cols = [\"date\", \"description\"]\nrows = []\n\nfor node in xroot: \n    s_description = node.find(\"description\").text \n    s_date = node.find(\"date\").text \n    \n    \n    rows.append({\"description\": s_description, \"date\": s_date})\n\ndf3 = pd.DataFrame(rows, columns = df_cols)\ndf3","23282163":"df3.rename(columns = {'date':'Time'}, inplace = True)\ndf3","b6398ccc":"x=df.merge(df2,how=\"left\",on=['Time'])\ny=x.merge(df3,how=\"left\",on=['Time'])\ny","51855749":"del y[\"Weather_Condition\"]\ndel y[\"Give_Way\"]\ndel y[\"description\"]\ndel y[\"Crossing\"]\ny","4c9e8338":"y['Visibility(mi)'].fillna((y['Visibility(mi)'].mean()), inplace=True)\ny['Precipitation(in)'].fillna((y['Precipitation(in)'].mean()), inplace=True)\ny['Wind_Chill(F)'].fillna((y['Wind_Chill(F)'].mean()), inplace=True)\ny['Temperature(F)'].fillna((y['Temperature(F)'].mean()), inplace=True)\ny['Humidity(%)'].fillna((y['Humidity(%)'].mean()), inplace=True)\ny['Wind_Speed(mph)'].fillna((y['Wind_Speed(mph)'].mean()), inplace=True)","f867bb83":"y","a90ec530":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(y, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['ID', 'Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']","e4a9d5d1":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\nX_train = X_train[['Lat', 'Lng', 'Distance(mi)','Junction','Stop']]\nX_val = X_val    [['Lat', 'Lng', 'Distance(mi)','Junction','Stop']]","97f62e93":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","7c79d7e2":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","05c10bff":"feature_imp = pd.Series(classifier.feature_importances_,index=list(X_train.columns.values))\nfeature_imp","09d8485d":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df.head()","0a1fe337":"test_df[\"Bump\"] = test_df[\"Bump\"].astype(int)\ntest_df[\"Crossing\"] = test_df[\"Crossing\"].astype(int)\ntest_df[\"Give_Way\"] = test_df[\"Give_Way\"].astype(int)\ntest_df[\"Junction\"] = test_df[\"Junction\"].astype(int)\ntest_df[\"No_Exit\"] = test_df[\"No_Exit\"].astype(int)\ntest_df[\"Railway\"] = test_df[\"Railway\"].astype(int)\ntest_df[\"Roundabout\"] = test_df[\"Roundabout\"].astype(int)\ntest_df[\"Stop\"] = test_df[\"Stop\"].astype(int)\ntest_df[\"Amenity\"] = test_df[\"Amenity\"].astype(int)\ntest_df.head()","6073a8da":"f1=list(test_df[\"timestamp\"])                                   #convtring time \nnew_time=[]\nfor i in range (len(f1)):\n    new_time.append(f1[i].split()[0])\ntest_df[\"Time\"]=new_time\ntest_df","189c64a2":"del test_df[\"timestamp\"]\ndel test_df['Side']\ntest_df","f71c6cb9":"#test_df=test_df.drop_duplicates(['Time'], keep='last')\n#print(\"The shape of the Weather After removing dublicate is {}.\\n\\n\".format(test_df.shape))\n#test_df","ef33a5d0":"X_train.columns","777862f2":"X_test = test_df.drop(columns=['ID'])\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test[['Lat', 'Lng', 'Distance(mi)','Junction','Stop']]\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","0f70f396":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","f086131b":"# > **SPLIT DATA**","5c05f1c2":"# > **MACHINE LEARNING MODELS**","138bb08a":"# > **SUBMISSION**","cd675849":"# > **READ TEST DATA**","4f3529f9":"# > **PREPROCESSING**","6e2ba573":"# > **IMPORT LIBERIRES AND READ THE DATA**","f49da045":"# > **EDA**","433c46f9":"# **Car Crashes' Severity Prediction**","ee0796ae":"# > **FEATURES SELECTION FOR TRAINING**","be595ec6":"# > **TEST DATA PREPROCESSING**"}}