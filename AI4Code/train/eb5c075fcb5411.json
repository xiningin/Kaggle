{"cell_type":{"23281dd6":"code","14563784":"code","7467aeec":"code","7d5bf83a":"code","152f8183":"code","21f7e2f3":"code","409b5bda":"code","48a7051e":"code","d4ce2a61":"code","fce29f3c":"markdown","97522525":"markdown","54d13a01":"markdown","1ff2d461":"markdown","7b5629f9":"markdown","acef3e3e":"markdown","f9529c84":"markdown","660f3409":"markdown","b994db8c":"markdown","af85ece1":"markdown"},"source":{"23281dd6":"\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","14563784":"\n# Importing the dataset\ndataset = pd.read_csv('..\/input\/Mall_Customers.csv')\n","7467aeec":"#checking the dataset\ndataset.head()","7d5bf83a":"#check null values..\ndataset.isnull().sum()","152f8183":"import seaborn as sns\nplt.figure(figsize=(7,4)) \nsns.heatmap(dataset.corr(),annot=True) \nplt.show()","21f7e2f3":"X = dataset.iloc[:, [3, 4]].values\nprint(X)\n ","409b5bda":"\n# Using the elbow method to find the optimal number of clusters\nfrom sklearn.cluster import KMeans\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","48a7051e":"# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)\n\n# Visualising the clusters\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 50, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 50, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 50, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 50, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 50, c = 'magenta', label = 'Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 100, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","d4ce2a61":"# Fitting K-Means to the dataset\nkmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)\n\n# Visualising the clusters\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 50, c = 'red', label = 'Standard ')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 50, c = 'blue', label = 'Careful ')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 50, c = 'green', label = 'Sensible ')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 50, c = 'cyan', label = 'Careless ')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 50, c = 'magenta', label = 'Target ')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 100, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","fce29f3c":"1. Clusters the data into k groups where k  is predefined.\n2. Select k points at random as cluster centers.\n3. Assign objects to their closest cluster center according to the Euclidean distance function.\n4. Calculate the centroid or mean of all objects in each cluster.\n5. Repeat steps 2, 3 and 4 until the same points are assigned to each cluster in consecutive rounds.\n   have our clusters.","97522525":"From above graph we can understand that **\"Annual income\"** is highly correlated with **\"Spending score\"**","54d13a01":"# ||Elbow method||#\n\n\nThe Elbow method is a method of interpretation and validation of consistency within cluster analysis designed to help finding the appropriate number of clusters .This is how it looks...\n\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSEmFMbQs8_eG8YFFiQ80NrYaqXun6CT4ak1tWGz7ykmwMTstBg)   ","1ff2d461":"We dont have null values so replacement strategy not required...","7b5629f9":"# ||K-means clustering:-||#","acef3e3e":"k-means clustering aims to partition **\"n\"** observations into **\"k\"** clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. ","f9529c84":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAWoAAACLCAMAAAB\/aSNCAAABKVBMVEX\/\/\/8AmQAAAAAjsU0AmwAAmAD4+Pj7+\/sAlgAAlAAAkQD39\/f09PQFAAbPz8\/x8fHg4ODr6+vOzs6RkZGenp6urq7a2tq5ubmJiYmXl5fV1dV\/f38AngDj4+OkpKSoqKjExMRISEh6enpUVFRra2uzs7Mft05RUVFjY2NEREQtLS05OTlnZ2cAfADm8OYGhgfY69gPDw8IdwgpKSn1\/\/WNx4yazZoASw4GVAgIZAkIbQoINQkGEgcHPghvuW8noCjN5swLjDUAdigHHwkAIwAGUgcdHR0ILwoIGggWnUCt161HqkeCw4JxZ280LTMbgDlFO0IAYxlUsFW83bysxqogfiDD48Vot2dPrE4IRAjK1cmn1KYGDgYloCUJaAkYJxxzr3MmUSh8mXzHEWk6AAAWq0lEQVR4nO1diV\/bSJaWlBKWChc+OBxAAYcjIYcRuAFfGOgAbSZkemc6u6G9IZ7d\/f\/\/iH2vqiRLtmQku8Chx98vwUYYqfj06tW76knTZngaHE17ABOjvDPtESTE86faMFanPYRkePZUrxuHxua0B5EIz53qlfWyoe3mpj2MJJBUv3013WGMjYy2YEx7DAkhqF413k95HOOj+KyoLhqG8VzW8SEUjcK0h5AMSHV2vfBhZaM87aGMieL2tEeQEFJX\/5Kf7jAmwIzqJ8OM6ifDjOonw7OjemW6w5gAxbfTHkE6zKh+MsyofjI8Y6oXZlQ\/FWZUPxkSU5151GEkxvu\/NNUXJ3e3P3RCzv84\/jb1qPFzpvr16J8ffLGoZZmmSSp1atn07uvTjCsOf1mqv93aFnEIIbruGKwBLyb98fmpxhaFvyjV+7fU1Emzadddx9Ubp64OIMQ6P3i68Q3ir0n1BWgNXaeMtY1WhbUcHaWbkF5DtxRpkYOvJ1\/Ozs6+fL+YS\/orz5jqtViqv1MuxNblVZX1quyKEkKvWQWod4n9ZfIrX5yZ1IZlAKaJRentyX6i35o61Vm\/wmBvOd1vxlJ9Akw7qKR1p8nqjltjvSZDfd1tm6R9dTbBaBGff1BL5\/ey2gY1pZuWfZdEL02d6pXDrHy3sZbuN9feRR9Hps3LS52Atm6wtuPUWKPBWlVg3iEg2ZWJuP5m2SbSjP+Z0XB0\/M6kZw\/bklOjen5UYjCfxOuIoforMI2MXl4DHaQCAmhWdOKiunYIyHmT0JOxRsxxxnUT3jWU6prbNPm3IN0PWjdTo3r9lxE\/NHYTnCGa6n3LRFYrNcZswldDFEFSrRC90nI53Tq9GGvIcPJzW6gO2qnheZ0b1kP5voFFgD40Wd7Hzdr8cIFIeXHMEUZhLlwtsxQS8qyWANFU\/wlM20CpVa86jUuXCGoqQLzTYjXnqo1HrPFcxwvbNKWWhvOhbF8zfoV7BnfS\/nP0b8dSvT1ctFDaGmuAifC+2H+fiOgYqlF96Az\/coc4jIEuFVJ42iLE7TY7KOugUsZS1xe4CBKHK+pGld9EPkl000bCzepormOpHkRi83FMFOb9t4nURwzV5yaoUZjPfLWq1G2hQXShR5w2u6riEbcyhiuDqgnkuUvdKrpD4h5KxY0+aZddj7yDH0ZSnX8HBORwqq8Zisrj1owhod3C9eKQayd+kZVktzWKahBq0qiZNnWkzIGOpj4pxG27ju4Slxn\/k37k59zyAKORTxoBC6\/j3tRR1BusZ49aG0dTXVgHU2D7AxIQmODzsZ9PgOxw9ejeGtjUc2h07KapDYuiGjS1yYxKl8n5DTr62tMignunzhqUGTS1tj62xb3r2i1GxdnpPWuCpuoxxm+kTUx7hDczmmrA9p72PlzHXFJQK1de1TZ3jbKmbQq\/ZXOBv2TS2ENrH4YO7dvcztM7SAE3wk7bNYYyx3Us5+faqDumZaZ10Pdxclh1F6w8xzsV3kgwrM2GK\/WJbv0Rf4ZIqpEDD6+GLJFMSlcjCrvr2upmCWbL0sbQz5YTnj+C6s82\/\/st25\/hwAG+J6TdsaR6xSWMVu5SjvgODHSnZxj+DOFcNy1+cuKgnIOCcez4RSCS6s2CtlN6wMtQgYXIC3xMWKAeQfWZhQuXSzwhk1ra1JtVxqThxxfIe6Oabqgg1MSl7lVDLgKeQpKvPaOL6prWKvFiHaa6sFWS75ZAN788xHevl+DLMp\/nqq2QX8KaKZOu\/GdlmGpcuUiv6vgyLV+a7LTaRNPDJJwd0mKVZDEiD18sDBRScWan0RVREJP\/40si2uvOtXFpxp43THX+vZzPb\/Gw8DLKSMAS8q0ZKQNCQ4jyt\/EiYqH1F8W9Qnn94ZMNU52xhHfhVgksj8SxmlTQ7YLzQmhPbzG3XkORJ5Z1kWrk4BhZwiZHjcz8ZZdKc8\/lk8XtNM1Yrz9mWXz5aj1CxNYmsj20Ab9IXACtyMVDccSzJ41C+eXDJxum+giZtTs1zoTTuGqzjuO4lHCz2rlkDcPoMaMLprXrWqkyMgdUN5vUAhnmAcNeTUyOKrtxTF26\/8LCMW\/jzjFEdU6avdv4gywo0yVxoFxcQst3K4G4xaPv7We1nCEuDbZHLq\/tBG7CvLEg363sjTjZMNVoJYCGcFoG6GXnnrXAznNhlRSzvs4qFJz1jsHAsGb0e5qBn1igHFqOKbxDoPT6CtM8Iu1QrVuBpSHWjByiehv\/urLU2aCts4aQvpfr3MlYPlTiyiyALIfWxLXgOHwnJz8qFDBM9QElFqa2iMlnc8ME1UzZjaDAxDwMMR27808HDtqpqL6zQIIbDvhAFX7bdMNAFUJsrk6MJp6bilCUfRFzjmipLr3julnLBHktqdxOVXz4Iw9hZWgbzz4lHYNb1C782bTJGbfNvt0HfLsg9XAvTCsV1dzfh\/t0bXRQczSqlYa\/7pJ6i\/L1gHHhjvUYA1QvDGripSF3rDRJ9cpO6eHPpMEw1UeUtOWCZenODc+T60R4HPC2ClZ33agLA81O5cOAkqZN5LMNVjqpGMwk3h3UTX4BwqmG22nFrYsBqg1BRT+6mS8PfHjeU6\/DZlYCrIIG\/jDgsRQL2kpQSaSZOMNUayao6SYIH8ov6mYUYNrucXXiNEAiua8oVGqagFPG1p1D1nOEIU3s1jXx5olvvRMKpjfcTes45iR9qpfknEZreimctisHGNiCXyiMHbguDfieH1a1tcgFMQEiqP4TpRq0cZcK3VxtWBihwDXRaFTB4hO+IicmTRAkAyxe+z4QZi556KlSdfwQXwXsdjCvO04Cqr35jVK9UvY\/sLcdjmrupCAjHqHonuFrlmyaGEgE1cfgaBCc310xvxlrEruNIaGacY3OM3FbSBjptc\/TDBekWiaGpefC32IGnt6IWULRwARXqZuEao5l6aTs+uQGYiCvFWVhNgo5Azn1Mogl3xbp39OVh034\/DDVX20kwazJaBPIuMuTXrppVjk\/TttoOzwB+3+phqz7ayv\/Um2gNJv3zKoaTNyBUxR64prxuvpdmOpF6SrzKNBKKR8K0pcV7Zv5rSwMEEGsp51WdrxIdRm8xgQ79SOoztgmalOHp0owaet76NVLvlySyhWPPjWuLlINmXv8+IuUG+nMqFZ5wVS11eJGH4i8JVIQ8RbIuyFvkevpdfRUNrd3Azq70Nccy0va2wTu3EMQHHvqY0Xo7Pnl0nwpUbglgmrtjPRqskij0vYSi0Kau8IQIVJXpxvqnSlyXC47FeZdz2B4O2+wPAG9xqqvXmJjez7V8i9+peXxzQKIXUbO64J4XeLpk+wizPrlVa2oRsKHLY5VI+lNzEfk3A8oCBxftMDW6zp88eq2wAijdepHn9COSFmfcIIuDKPoe\/JzOk3GFVGlSwM3kie+Ytdbn+oiX6myRl\/KvRTAnqhjnn+JqvXVBImv4mA50m7RGA7BgDxnE93HKKq1P3s1l3PsuFyqzat7ET4FpWLJ2BChrUbKJAz4oWjhgQckzuG0WU0Y7VYFbixtVFBTX59SPT4GMqBAloP2hZTq+WKytOqDyA\/K695mdLBryQhcPv50UVQfWCBwhgN\/fJObwCDljSbXstVGR+YEwfJLnUjCeYKTxAvLul1XvOlwc5tisQLhBk+sF\/oubLtF2rXLA9K4o7yHyNxhWI5RU5eNYX1dDAa4I6nWvlhm1SU2A1kWnFRkhAiOeKFP+r+pHddjG+5V30EUNQoY0avhSTHSAsfcpkNobLx6gGrttZAlOddfffAN4JwvZPPBfFh6gHe4MySwixFqKUKLlG\/+Hvh5dH3UuQkUWPesLYL21CXcUgNRpnKdNPX0FTf71PTuFJxTWCMuei3E5kEVbn841ZYbn0gboDqzJf5mPtfLi\/OYMRfCtdPfebIGB4tjl9+s7WXexumGhVHVZYDSp1\/\/4d\/8V79FfmafB9hMW6yJNmpqLoI3XPy4u3ExxrDv9HqHemn4Dl9kGWvU4ZBzfeMKj8m5NK7jzx2meiPkOMhqJpF7mYMfrfaD1WNQ\/W44YyvQ9\/sLD\/QYK39687d\/edIeQzUWIUmlCvJmnTJK3GvwITtYV4chUDpWNfs+daSVDrYIuKOO7nQ7He4QMaPpeefXI7LDIarLRh5zUnmwMvJ9S2NtXisJyS4LFZfbS1jqFUYpzq7wfcTdhf5FIgFUv3hxJT8QR3W\/tM5tVx3TQmGrA002wewtoWNuiDm2uW\/ONUeVO0Jg4+ErcXueDifxmUXQzSGTo6StAMVz4KnNSW+tgKxmwjZZbnssqgcwNxiQzX3cQ7mHqbMRMBAyGwH8\/T9evHjxpitkP5Zq7cAUqrPObjAeVGf3PGHAs7fmt3EHfE4arGFZ3AHiAo4xEEf6SMKDGXkbQ1Sjv1wMJ1vfo9LOY8RCHF0Qolk0Jt53+THQYyKPsya3552zEEgc5Dq\/BvAC8eYTXxzjqdaO7ihfvrpc+K5Z3SsioLfpEuVB7JMuO2X3ug9SbXpRa5HPtUfW7IWozvIokPjq\/aVIwtYeLItok8wXtoVtPDd5mF86oRk804iIR6725sUg3vz6e2Ek1Zr29YdtwooljWBpotlmqtTLIC5oswLeoh\/g65ebkIbRISNLm7RBqRZitba+ouV2gOO5gOIooDG95M1sBVKtFX7D5SCPfcW4ljqMjKBGUf3izd8u10ZTrWmfb6nlyRzybFHzZMIduRcWj\/\/rA8DAOLt27NFMD1AtsbegFV6jMbIcUsq7Rb8yMjumVL9e6r\/PvgzfrijbOoZqQGc3N5pqUNnH55TatmVZtk1\/nF2MN+Qg9s8xnGJ6fowE+uT2w7sGBqkuRLvKGfQ6djaWJtUbD8Vhs4ubAwneOKrf1HcSdGM8uvh6cnx8\/Pnb+Co6jDMbrGoHU\/FE94KGrOno1sN7YQapXg2Lil\/btc2d8UVF0RCtOOTbF8r864e9Aes7lupff59K48tv\/2Vcgk3dQr+fsktBtU7PHo76RiqQPspcOYfL+BUsidq7gYTOYnYzRh3EUP3mn38vHE4+jnHwn+e2RXh+y+U7YkzXSrRvMZLqgidZpTWuP0UFiOcrbkREPsdCzr9nmfi2JNFUv+kuadOimu\/Gdasm+EkV17Tp7fdk2imSatHY1Shpe3IV47G8spDtV0bRUBPaK4dCmYXok0ZTfVXWpkg1YN\/fY57YqhmhQEobmIJ6W9Y8TS2RS1WtkRg70fuYgeoApKl3iuOZKtVjYJSu5lb0ashmeMRGxpnohWX+A+CdxO\/cMf\/1H\/yjhccZy9HBxcXBY7TEGUV1Zlh6x7WnFaH46Q0uiOKbR6B6\/\/gWnBSEeftFdeuQt0kqaLLl+XJe0Vo4EcqfXrzoeoFW5VSDf2n3Ey0WPf+uVLgTUV2ElXD9Z+hAWv70BhdEAcVUf9f7PHsxE\/tYYTezRFT\/NChe\/6u\/QCul+uLHINEcdupNd\/F4XlSXfw9ImUqqT2gU0Trv9KHqGs+L6hAUUn1n98N0jh\/ol4J9q0iJzKgG\/Gl7wVBdp\/UKcZo9XlUp8mbWuZpNhG8V7JSYEpRRfSer\/FxWI841Yw5msrBGSu4AtVIVCMfiGVOdU0Q17tPn2dkmOyWkctMgpN2Cb5hTvxJdF6y0u6QjMaP6gu\/Tx82letPt62rSpBYzZJHNuFn2EGZUY1bMPOQbbQe2pgdKx8bsQBSCMqrlHqVlkZyde4IHEamh+gT3XjQM2eIjDCKr04FqBSbftiqq5U4lWc+3+ARRNyVUZ3ipIzOajs8tf\/XfUVG9mmpDWDSUUR1Gxpfq0sdHuYCmiOrvlFiW02hbwgaRpapNl8oGevq9KIq0Ju\/vqZbq4T4t2sJSxOeUQAnV57ptgJ4WVp0jik1J0zi9EvtLdV7qh6\/WxJdSS\/XHRxPhCKig+oDyNh+cZx2Ts5QIA7vOKp63KFRJut27UVBINZag9X3YzWBS5VE6x6mg+rsFxHKxdbH9ARGlS9ihBS0Q8Y20QSbWICqoLvCkY84IpWLzgSTC0qPkS1RQfWdK\/Yw70oNtmZBp3GzrRUV0c2KXcbs8+Xjl\/qT48tTcozReVUH1uQnWB6+hbNxw4fa7jRFwzw2+c1e2+5jYtFZBtYflp32qZ3Zyqo9MXjwjCpX4116X1wub9L5DOje8qScTe3vjN7kkhEqqJ9sjkxoKqN4HLm034LyADcJb92I1jesK\/dEQGzNiW6okhUqqnxgqqKZArtHnmjhSqrGF3I3htZgVJsjYNfASk1E9tz7FB4krovpUKhDe1jTQN863qOVmpSlTnX0\/qJ4x1RB6CEB+0oZx8RdXoUBguRPPgKi2KfFbagUtaqctKP+pFMjLvKatg7GRD3Yt233gmUTjQ8WyaIm9YISCcDcc+7TV71TrM65qWdwrTzxeH6+DNnoo9pGyL2QyKKBa+yH2kdZZr8eNPa\/XApF7ifCL7Ig1sbGnkuoQFoJbEMuP4cOooPoPQXWNXTt9B4Y3vb7v6PT+ytS9cJ\/5Y9JrqaW6EJdcfozVUwXVJ7K3aQUZlRuKeNm0\/E99VTJ5xFot1WLj7hM931AF1QdUON7cK2R1YdzZpx2TVFzC\/8tFMb55TWJMRvWeLOTb5iUOa9u5jFbe0YzS1lNUnamgGpsy2XXeOIS3E\/MMPd2uyATYodzEn76N+yAmo3pLBjfW+evae5DoxVVtIfvqKZ6OroTqY8upsyu0qU2rR\/3ki9OS0ScvC6Mgaa5SgWDYKaY7\/s9qgaBr7p72iBfMc72HGdVYVS6Rp1UlVrViXY27GkVoentVC0apf1oLBFu19POITpX3quXfU9l3osubNJkPPF4nCdRQnR20MLAx0StDZs9f\/bwWiOfFiK6m9SpvkkwDQRGdNjDYpCCLq4jqvf4yWOb2xwdwGHNyw9zjJAZUUa19pvx5MVyAuzY+Q7EfgAK7rw32iWnHdYRMA9VSLVuaYReADa9lzSOFpBRRrd1Zonmbp5bJvV8Ugh3f4K0V22UsDT5OurllJRBwyq2F0oiPbF+rolo7NystV3T5EB2vZYM3B9R4lbd+UrJtemKqfwnsq12SO2pBOS+UJzzvw1BG9dEPE11F7ixWZK0kEN\/oiTCIaanZgDQx1b4UzxsrUo6zRlF7GWiV\/HLUEwPGhzKqtaNzS8RKnR5rec+yQ7ecF9uYirZ6TUy1BAjyRhbMas5wX6ds8Ta2j1NBpY5q7IrDy21AN4vWqbBE9ro13k32VtU2L0VUr0jDbmGgpdhyWcnpI6GQak37brtN4LVWd0yZD2jw3u5Uhe0hoOoBAMobSj4MpVSDYFsWaRrM66uC9p5F\/1DVR0RT\/6yFJ4RaqjXt4ItFu02voT0xbXqmdEPujOogvn05N+XG5\/Ozr4o3mqumuhjwV+bSPKQhPR6BasDR\/sW3b4+yn1811aEnqi2raH0Yi8eh+vGgmuonysAg\/t2pVoiIHhkhzKhWh4+jXZ8Z1epQNEY+iObZUb21uyyxubwZxEYIS2GsRmNxJF4GsS6xtb4VwLYRxs6IoT8PqvvdXpd2ttb7eJkMwywOcg43Y+DmBG5b4H4u+9jlKEnk5ubmMmsjmX4mVJcPn7bqfDzsjH7iUQKqMxJziPk58cKRFdjfPzo62h8TB6Pw354MGcZPrKMlHiz0+8V4JngSuh4VXDz7giqlFjTPHAhy6Age9I4NHAwdCU6C0JFMpv+OA68\/eCwDXsXAMd73ato8\/btgdYrF\/jPMMMMMM8wwwwwzzDDDDDPMMMMMM\/wl8f9\/0TrDA7ThgAAAAABJRU5ErkJggg==)","660f3409":"That not looking good....Isn't..?\nLets give name to each cluster.\n\nCluster 1-**Average income and Average spending** -Standard customers\n\nCluster 2-**High income and Low spending** -Careful customers\n           \nCluster 3-**Low income and Low spending** -Sensible customers\n           \nCluster 4-**Low income and High spending** -Careless customers\n           \nCluster 5- **High income and High spending** -Target customers\n           ","b994db8c":"# ||Heatmap||#\n\n Heat map Heat map is used to find out the correlation between different features in the dataset.High positive or negative value shows that the features have high correlation.This helps us to select the parmeters for machine learning.","af85ece1":"# ||Working||#"}}