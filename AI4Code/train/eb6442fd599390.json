{"cell_type":{"6425045b":"code","0ecf22de":"code","e9f7c489":"code","47db2e3f":"code","ff09e196":"code","dd23346c":"code","347b7ed2":"code","f904ee17":"code","efdd9eca":"code","d2577d0a":"code","23011f1b":"code","a6447114":"code","cd710b5f":"code","9d21842c":"code","c94cd4c2":"code","bb020be0":"code","0c1cf381":"code","556f53f6":"code","5077c971":"code","65fdd000":"code","ffd59dd9":"code","c021990c":"code","e4529cee":"code","3ae37abf":"code","ce0b1150":"code","a8272c8e":"code","0f92da67":"code","c91e22e1":"code","4fd0b3a2":"code","f5fd037a":"code","4e4c1c1b":"code","45f0db38":"code","6e6fe010":"code","273c3ace":"code","2bc130c6":"code","3dd0dc79":"code","4091f372":"code","0c042181":"code","0d579fc5":"code","a19910df":"code","2689152e":"code","edaf8aae":"code","70527625":"code","48770c75":"code","5961498a":"code","e2291a00":"code","4791f64b":"code","9f61f188":"code","875d639c":"code","d4ee9108":"code","c30b0d0c":"code","514d17a5":"code","1d686aa9":"code","fb996b93":"code","36071c7b":"code","fef3f5cf":"code","c37ecc35":"code","ba2d6209":"code","b8f22ad4":"code","aee60489":"code","deeaf901":"code","3fd447dd":"code","9ea34d80":"code","3725319d":"code","794c64ee":"code","d75d2e32":"code","ef98e065":"code","9857027e":"code","0ca59385":"code","2dff1137":"code","66dc838a":"code","1ae66bfa":"code","c2cc4dd5":"code","d1b4c712":"code","c0a88627":"code","a9b8fe43":"code","b1896292":"code","26fed13f":"code","742203c2":"code","bfcdcbb4":"code","c26e2364":"code","718ed8b1":"code","9ab48bfd":"code","84106d07":"code","4524d8d1":"code","c6097926":"code","18fe762c":"code","ea4d5a86":"code","1e54adca":"code","cadf38e3":"code","bbd85b39":"code","2c1fe05f":"code","ef46462b":"code","af37eef7":"code","300bd1aa":"code","f225b97d":"code","e95653aa":"code","2a9f4bea":"code","ca17599a":"code","a7fb426a":"code","f106c5ef":"code","00587cf6":"code","8422d05d":"code","2e65e13d":"code","75468e49":"code","61f73352":"code","93668542":"code","4609bf41":"code","62797f89":"code","66ad1091":"code","f18a3802":"code","e203305b":"code","a60f273d":"code","7f2f4be6":"code","b354d33c":"code","60a01d98":"code","1d0ea69d":"code","76f4a4a5":"code","bbbec2a6":"code","7fef7f0b":"markdown","c636f2d1":"markdown","9296c166":"markdown","68725efa":"markdown","9f0f0a41":"markdown","5ce17bce":"markdown","e13d91fd":"markdown","604ef560":"markdown","cc7b4b8d":"markdown","4aef8a66":"markdown","a6622d7c":"markdown","d13602ee":"markdown","b0739da7":"markdown","9e13267b":"markdown","c10e1d81":"markdown","8c124081":"markdown","8c5b20bd":"markdown","16277c5a":"markdown","a8ad14b0":"markdown","88bbd222":"markdown","ada30c2a":"markdown","10e5bbf5":"markdown","896a226e":"markdown","63ab3528":"markdown","ca5b1b3b":"markdown","6b3a7323":"markdown","81e982d9":"markdown","134e2f26":"markdown","ddeeae6c":"markdown","7c005bfd":"markdown","06b62f07":"markdown","634e5f3b":"markdown","3bb20f5e":"markdown","71383120":"markdown","57396944":"markdown","b3ff8e73":"markdown","b3e72c1a":"markdown","5aaed83f":"markdown","3ef99efa":"markdown","0f532edf":"markdown","3752bb6d":"markdown","ae9d3f58":"markdown","cc027b3d":"markdown","d06c5b1b":"markdown","73b2f01a":"markdown","938effae":"markdown","4bf0cd19":"markdown","e76ce401":"markdown","e2b7efbf":"markdown","6b45ced5":"markdown","298685b8":"markdown","89cb1328":"markdown","59a2b6b9":"markdown","71258764":"markdown","48cc0896":"markdown","1986ceb2":"markdown","33e1cc3d":"markdown","1b6d4538":"markdown","70df66c4":"markdown","d4a846ff":"markdown"},"source":{"6425045b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp","0ecf22de":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","e9f7c489":"train.head()","47db2e3f":"train.shape","ff09e196":"train.info()","dd23346c":"train.describe()","347b7ed2":"train.describe(include='O')","f904ee17":"train.isnull().sum()","efdd9eca":"test.head()","d2577d0a":"test.shape","23011f1b":"test.info()","a6447114":"test.isnull().sum()","cd710b5f":"#Printing percentage of passengers survived\nsurvived = train[train['Survived']==1]\nnon_survived = train[train['Survived']==0]\n\nprint(f\"survived:{len(survived)\/len(train['Survived'])*100:.2f}%\"'\\n'\n     f\"not-survived:{len(non_survived)\/len(train['Survived'])*100:.2f}%\")","9d21842c":"#Checking percentage of females and males who survived\n\ntrain.groupby('Sex')['Survived'].mean()*100","c94cd4c2":"pd.crosstab(train['Sex'],train['Survived'])","bb020be0":"sns.barplot(x='Sex',y='Survived',data=train,palette='plasma')","0c1cf381":"train['Pclass'].value_counts()","556f53f6":"pd.crosstab(train['Pclass'],train['Survived'])","5077c971":"train.groupby('Pclass')['Survived'].mean()*100","65fdd000":"sns.barplot(x=train['Pclass'],y=train['Survived'],palette='plasma')","ffd59dd9":"sns.barplot(x='Pclass',y='Survived',hue='Sex',data=train)","c021990c":"sns.factorplot(x='Sex',y='Survived',hue='Pclass',height=4,aspect=2,data=train)","e4529cee":"sns.factorplot(x='Pclass',y='Survived',hue='Sex',col='Embarked',data=train)","3ae37abf":"pd.crosstab(train['Embarked'],train['Survived'])","ce0b1150":"print(f\"{train.groupby('Embarked')['Survived'].sum()}{train.groupby('Embarked')['Survived'].mean()*100}\")","a8272c8e":"sns.barplot(x='Embarked',y='Survived',palette='plasma',data=train)","0f92da67":"train['Parch'].value_counts()","c91e22e1":"train.groupby('Parch')['Survived'].mean()*100","4fd0b3a2":"sns.barplot(x='Parch',y='Survived',data=train)","f5fd037a":"train['SibSp'].value_counts()","4e4c1c1b":"train.groupby('SibSp')['Survived'].mean()*100","45f0db38":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nsns.violinplot(x=\"Embarked\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax1)\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax2)\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=train, split=True, ax=ax3)\n","6e6fe010":"plt.figure(figsize=(15,8))\nsns.heatmap(train.drop('PassengerId',axis=1).corr(),annot=True,cmap='coolwarm')","273c3ace":"train_test_dataset = [train,test]\nfor data in train_test_dataset:\n    print(data.shape)","2bc130c6":"train['Name']","3dd0dc79":"def name_extract(col):\n    name = col.split('.')[0].split(',')[1]\n    \n    return name","4091f372":"for data in train_test_dataset:\n    data['Title']=data['Name'].apply(name_extract)","0c042181":"train.head()","0d579fc5":"pd.crosstab(train['Title'],train['Sex'])","a19910df":"def name2(cols):\n    name = cols.strip()\n    L1=['Dr','Rev','Major','Col','Capt','Don','Jonkheer','Sir','Lady','the Countess','Dona']\n    L2=['Mlle','Ms']\n    if name in L1:\n        return \"Other\"\n    if name in L2:\n        return \"Miss\"\n    if name == 'Mme':\n        return 'Mrs'\n    return name","2689152e":"for data in train_test_dataset:\n    data['Title'] = data['Title'].apply(name2)","edaf8aae":"train['Title'].value_counts()","70527625":"train.groupby('Title')['Survived'].mean()*100","48770c75":"title_map = {'Mrs':1,'Miss':2,'Master':3,'Other':4,'Mr':5}\nfor data in train_test_dataset:\n    data['Title']=data['Title'].map(title_map)\n    data['Title'] = data['Title'].fillna(0)","5961498a":"train['Title']","e2291a00":"sex = pd.get_dummies(train['Sex'],drop_first=True)","4791f64b":"train = pd.concat([train,sex],axis=1)","9f61f188":"train.head()","875d639c":"sex = pd.get_dummies(test['Sex'],drop_first=True)\ntest=pd.concat([test,sex],axis=1)","d4ee9108":"test.head()","c30b0d0c":"for data in train_test_dataset:\n    print(data['Embarked'].isnull().sum())","514d17a5":"train['Embarked'].mode()","1d686aa9":"train['Embarked'].fillna('S',inplace=True)","fb996b93":"train['Embarked'].isnull().sum()","36071c7b":"embarked = pd.get_dummies(train['Embarked'],drop_first=True)\ntrain = pd.concat([train,embarked],axis=1)\ntrain.head()","fef3f5cf":"embarked = pd.get_dummies(test['Embarked'],drop_first=True)\ntest = pd.concat([test,embarked],axis=1)\ntest.head()","c37ecc35":"sns.boxplot(x=train['Pclass'],y=train['Age'])","ba2d6209":"def age_impute(cols):\n    age=cols[1]\n    pclass=cols[0]\n    if pclass==1 and pd.isnull(age):\n        return 37\n    elif pclass==2 and pd.isnull(age):\n        return 29\n    elif pclass==3 and pd.isnull(age):\n        return 24\n    else:\n        return age\n        ","b8f22ad4":"sns.heatmap(train.isnull(),cbar=False,yticklabels=False)","aee60489":"train['Age'] = train[['Pclass','Age']].apply(age_impute,axis=1)","deeaf901":"test['Age'] = test[['Pclass','Age']].apply(age_impute,axis=1)","3fd447dd":"for data in train_test_dataset:\n    print(data['Age'].isnull().sum())","9ea34d80":"train['AgeBand']=pd.cut(train['Age'],5)\ntest['AgeBand']=pd.cut(test['Age'],5)","3725319d":"train.head()","794c64ee":"train.groupby('AgeBand')['Survived'].mean()*100","d75d2e32":"for dataset in train_test_dataset:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","ef98e065":"train.head()","9857027e":"for data in train_test_dataset:\n    print(data['Fare'].isnull().sum())\n    dataset['Fare'].fillna(dataset['Fare'].median(),inplace=True)","0ca59385":"train['FareBand'] = pd.qcut(train['Fare'], 4)\ntrain.groupby('FareBand')['Survived'].mean()*100","2dff1137":"for dataset in train_test_dataset:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","66dc838a":"train.head()","1ae66bfa":"for dataset in train_test_dataset:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1","c2cc4dd5":"train.groupby('FamilySize')['Survived'].mean()*100","d1b4c712":"for data in train_test_dataset:\n    data['Alone'] = 0\n    data.loc[data['FamilySize']==1,'Alone']=1\ntrain.groupby('Alone')['Survived'].mean()*100","c0a88627":"train.head()","a9b8fe43":"feature_drop = ['Name','Sex','AgeBand','Ticket','Cabin','Embarked','SibSp','Parch']\nfor data in train_test_dataset:\n    data.drop(feature_drop,axis=1,inplace=True)","b1896292":"train.drop('FareBand',axis=1,inplace=True)","26fed13f":"test.head()","742203c2":"train.head()","bfcdcbb4":"X=train.drop(['PassengerId','FamilySize','Survived'],axis=1)\ny=train['Survived']\nX_TEST=test.drop(['PassengerId','FamilySize'],axis=1)","c26e2364":"X","718ed8b1":"from sklearn.model_selection import train_test_split","9ab48bfd":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=101)","84106d07":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import GridSearchCV","4524d8d1":"model_params ={\n    'RandomForestClassifier':{\n        'model':RandomForestClassifier(),\n        'parameters':{\n            'n_estimators':[1,5,10,30,50,100,200,300]\n        }\n    },\n    'LogisticRegression':{\n        'model':LogisticRegression(),\n        'parameters':{\n            'solver': ['liblinear','sag','saga']\n        }\n    },\n    'SVC':{\n        'model':SVC(gamma='auto'),\n        'parameters':{\n            'kernel':['rbf'],\n            'C':[1,2,5,10,20,50,80,100]\n        }\n    },\n    'DecisionTreeClassifier':{\n        'model':DecisionTreeClassifier(),\n        'parameters':{\n            'criterion':['gini','entropy']\n        }\n    },\n    'KNN':{\n        'model':KNeighborsClassifier(),\n        'parameters':{\n            'n_neighbors':[1,5,10,20,30,50,100]\n        }\n    }\n}","c6097926":"lr = LogisticRegression()","18fe762c":"lr.fit(X_train,y_train)","ea4d5a86":"pred_lr = lr.predict(X_test)","1e54adca":"from sklearn.metrics import classification_report,confusion_matrix","cadf38e3":"print(classification_report(y_test,pred_lr))","bbd85b39":"grid = GridSearchCV(DecisionTreeClassifier(),model_params['DecisionTreeClassifier']['parameters'],cv=5,return_train_score=False)\ngrid.fit(X_train,y_train)\npred_dc=grid.predict(X_test)","2c1fe05f":"print(classification_report(y_test,pred_dc))","ef46462b":"grid = GridSearchCV(RandomForestClassifier(),model_params['RandomForestClassifier']['parameters'],cv=5,return_train_score=False)\ngrid.fit(X_train,y_train)\npred_rfc=grid.predict(X_test)","af37eef7":"print(classification_report(y_test,pred_rfc))","300bd1aa":"grid = GridSearchCV(SVC(),model_params['SVC']['parameters'],cv=5,return_train_score=False)\ngrid.fit(X_train,y_train)\npred_svm=grid.predict(X_test)","f225b97d":"print(classification_report(y_test,pred_svm))","e95653aa":"mn = MultinomialNB()\nmn.fit(X_train,y_train)\nprint(classification_report(y_test,mn.predict(X_test)))","2a9f4bea":"grid = GridSearchCV(KNeighborsClassifier(),model_params['KNN']['parameters'],cv=5,return_train_score=False)\ngrid.fit(X_train,y_train)\npred_knn=grid.predict(X_test)\nprint(classification_report(y_test,pred_knn))","ca17599a":"grid.fit(X,y)\ngrid.best_params_","a7fb426a":"pred_svm_test = grid.predict(X_TEST)","f106c5ef":"df = pd.DataFrame()","00587cf6":"df['PassengerId']=test['PassengerId']\ndf['Survived']=pred_svm_test","8422d05d":"df.set_index('PassengerId',inplace=True)","2e65e13d":"#df.to_csv('submission1.csv')","75468e49":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Activation\nfrom tensorflow.keras.callbacks import EarlyStopping","61f73352":"early_stop = EarlyStopping(mode='min',monitor='val_loss',verbose=1,patience=25)","93668542":"model = Sequential()\n\nmodel.add(Dense(units=8,activation='sigmoid'))\nmodel.add(Dense(units=8,activation='sigmoid'))\nmodel.add(Dense(units=8,activation='sigmoid'))\n\nmodel.add(Dense(1,activation='sigmoid'))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy')","4609bf41":"model.fit(x=X_train.values,y=y_train.values,validation_data=(X_test.values,y_test.values),\n         callbacks=early_stop,epochs=700,verbose=1)","62797f89":"pd.DataFrame(model.history.history).plot()","66ad1091":"model.fit(x=X,y=y,epochs=400,callbacks=early_stop,verbose=1)","f18a3802":"pred = model.predict_classes(X_test)","e203305b":"from sklearn.metrics import classification_report,confusion_matrix","a60f273d":"print(classification_report(y_test,pred))","7f2f4be6":"confusion_matrix(y_test,pred)","b354d33c":"pred = model.predict_classes(X_TEST)","60a01d98":"df = pd.DataFrame()","1d0ea69d":"df['PassengerId']=test['PassengerId']\ndf['Survived']=pred","76f4a4a5":"df.set_index('PassengerId',inplace=True)","bbbec2a6":"df.to_csv('submission13.csv')","7fef7f0b":"Now we have to map age according to ageband","c636f2d1":"It can be observed that \n1. Passengers who embarked from port C had highest rate of survival\n2. But highest number of passengers (217) survived who boarded from port S\n3. So port has had the highest number of passengers boarding","9296c166":"GridSearchCV will be used for hyper parameter optimization\n","68725efa":"RandomForestClassifier","9f0f0a41":"# EDA","5ce17bce":"### Embarked Feature","e13d91fd":"### From aboved box plot it can be observed that\n1. For Pclass 1 median age is 37.\n2. For Pclass 2 median age is 29.\n3. For Pclass 3 median age is 24.","604ef560":"Here we can observe that Age and Cabin attributes have lot of null values whereas Embarked has only 2 null values","cc7b4b8d":"### Here it can be observed that \n1. Females in class 1 and 2 have a very high rate of survival\n2. Females in class 3 have a good rate of survival\n3. Males in class 1 and 2 have less rate of survival\n4. Males in class 3 have the least rate of survival","4aef8a66":"MultinominalNB","a6622d7c":"## Training and Selecting Model for classification","d13602ee":"Support-Vector-Machine","b0739da7":"As 'S' is the most embarked port we will fill nan with 'S'","9e13267b":"The DataFrame above shows all the titles and their counts we can now replace some of the lesser titles with\ntitle \"Other\"","c10e1d81":"As there are 2 null values in Embarked we need to fill them before getting the dummies","8c124081":"## Fitting training dataset","8c5b20bd":"## Now we are done with feature engineering and feature selection","16277c5a":"New column title has been added","a8ad14b0":"### From Pclass violinplot, we can see that:\n\n1. 1st Pclass has very few children as compared to other two classes.\n2. 1st Plcass has more old people as compared to other two classes.\n3. Almost all children (between age 0 to 10) of 2nd Pclass survived.\n4. Most children of 3rd Pclass survived.\n5. Younger people of 1st Pclass survived as compared to its older people.\n### From Sex violinplot, we can see that:\n\n1. Most male children (between age 0 to 14) survived.\n2. Females with age between 18 to 40 have better survival chance.","88bbd222":"Now using the pandas cut function we have created a new column AgeBand that divides age into 5 ranges","ada30c2a":" So it can be observed that Age has 177 null values Cabin has 687 and embarked has 2","10e5bbf5":"#### So it can be observed that passengers with Parch between 1-3 had the highest rate of survival","896a226e":"## Parch vs Survival","63ab3528":"## Feature Extraction and Feature Engineering","ca5b1b3b":"First lets check Logistic regression before optimizing the other classifiers","6b3a7323":"So here we can observe that we have completely removed all the nan values","81e982d9":"From the above cell it can be seen that approximately 1\/3 of the passengers in the training dataset survived","134e2f26":"1.Females in 1 and 2 class have nearly 100% chance at survival\n2. Males in 3 class have less than 10% chance at survival","ddeeae6c":"### Sex feature","7c005bfd":"### DecisionTreeClassifier","06b62f07":"### Analysing test data as well","634e5f3b":"1. A Positive correlation means as one quantity increases other increases too and vice-versa.\n2. A Negative correlation means as one quantity decreases other increases and vice-versa.","3bb20f5e":"So it can be observed that in test data Age has 86 missing values whereas Cabin has 327","71383120":"## SibSp vs Survival","57396944":"## Age vs Survival","b3ff8e73":"### It can be observed that passengers who travelled in Class 1 had higher rate of survival  as against passengers who travelled by other two classes","b3e72c1a":"### From above we can observe that:\n1. FamilySize 2-4 have the highest chances of survival\n2. And extereme familysize like 8-11 have nearly no chance of survival\n\nNow lets create another feature to check if a passenger was travelling alone","5aaed83f":"## Embarked vs Survival","3ef99efa":"# Feature and Survival realtions","0f532edf":"So our categorical variables have been sucessfully mapped","3752bb6d":"### Name feature","ae9d3f58":"So test has 418 rows and 11 columns and train has 891 rows \nTherefore total 1309 rows","cc027b3d":"### So it is observed that females have a higher rate of survival than males","d06c5b1b":"## Deep Learning Approach","73b2f01a":"#### Passengers with SibSp 1 or 2 had high chances of survival","938effae":"So passengers travelling alone have only 30% of survival chances","4bf0cd19":"## Pclass vs Survived","e76ce401":"So it can be observed that we get 79% accuracy using Linear Regression\n\nNow moving on to hyper parameter optimization for model_params","e2b7efbf":"### SibSp and Parch feature\n\ncreating a feature FamilySize","6b45ced5":"## Feature Selection","298685b8":"## Fare Feature\n\nFirst lets replace nan values","89cb1328":"run svm tab again before running this tab","59a2b6b9":"### From above it can be observed that SVM gave the best prediction results","71258764":"It can be noted that with higher fair price survival chance increases","48cc0896":"Here we have labeled age in descending order of survival rate in that age band","1986ceb2":"The above command runs describe on categorical features","33e1cc3d":"## Sex vs Survived","1b6d4538":"## Pclass,Sex vs Survived","70df66c4":"Now lets convert the categorical values into numerical according to the rate of survival in descending order","d4a846ff":"### Age Feature"}}