{"cell_type":{"989dadec":"code","960a38c5":"code","e4a04f5a":"code","8ebb141d":"code","e4e28075":"code","200165e6":"code","9f2b6747":"code","f9865c93":"code","a429ddde":"code","39b4e760":"code","c1fd7fdd":"code","78c9076e":"code","4b354376":"code","b2ee3470":"code","79ac3d21":"code","76525183":"code","f5222f99":"code","56fb13a9":"code","363f8b2f":"code","dd5b8c88":"code","7a890495":"code","7e9c9e11":"code","7a91cde8":"code","c5d0bb4b":"code","0b0e0177":"code","0f5030a3":"code","3f4d6885":"code","b0a6ee80":"code","f4170c15":"code","f527595e":"code","8c45a9f2":"code","544580fd":"code","0ed037a4":"code","458e9315":"code","74294e0c":"code","1fe6bbe4":"code","35efb5dc":"code","8d1bd4d7":"code","5b4b8c77":"code","d5eabb4b":"code","6039333d":"markdown","9e1e233e":"markdown","880684b1":"markdown","85476910":"markdown","50f75173":"markdown","446632d8":"markdown","1e2359bc":"markdown","3d9dcdc4":"markdown","f5cf9452":"markdown","2d2af94e":"markdown","1ecdc925":"markdown","c7adc27e":"markdown","6da2e395":"markdown","cda91821":"markdown","1eec5dfe":"markdown","9b70f445":"markdown","6befa120":"markdown","47f4ddb6":"markdown"},"source":{"989dadec":"import os\n\nCOLAB=False\nmodels_path=''\n\nif not os.path.exists('..\/input\/rfcx-species-audio-detection'):# Let's check if we use kaggle notebook\n    COLAB=True\n    import gc\n    from google.colab import drive\n    drive.mount('\/content\/drive')# You must grant COLAB access to your Google Drive\n    \n    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    \n    GCS_DS_PATH = 'gs:\/\/kds-5c677f76ce55440722b2a474a5492faa70847c05a8f5d722f5a37feb'# \n    #This is a path to a dataset that changes over time, so you need to constantly update it. To update the path just run the code: \n    #GCS_DS_PATH = KaggleDatasets (). Get_gcs_path ()\n    #print (GCS_DS_PATH)\n    models_path='\/content\/drive\/MyDrive\/Models\/'# I created a folder called Models on my Google Drive and put the kaggle.json file in it\nelse:\n    from kaggle_datasets import KaggleDatasets\n    GCS_DS_PATH = KaggleDatasets().get_gcs_path('rfcx-species-audio-detection')\n    print (GCS_DS_PATH)","960a38c5":"if COLAB:# Prepare the kaggle.json file for use \n    from google.colab import files\n    if not os.path.exists('\/.kaggle\/kaggle.json'):\n        !mkdir ~\/.kaggle\n        if not os.path.exists('\/content\/drive\/My Drive\/Models\/kaggle.json'):\n            files.upload()\n            !cp kaggle.json ~\/.kaggle\/\n        else:\n            !cp '\/content\/drive\/My Drive\/Models\/kaggle.json' ~\/.kaggle\/  \n        !chmod 600 ~\/.kaggle\/kaggle.json","e4a04f5a":"if COLAB:# force TF to 2.2\n    !pip install -q tensorflow~=2.2.0 tensorflow_gcs_config~=2.2.0\n    import tensorflow as tf\n    import requests\n    import os\n    resp = requests.post(\"http:\/\/{}:8475\/requestversion\/{}\".format(os.environ[\"COLAB_TPU_ADDR\"].split(\":\")[0], tf.__version__))\n    if resp.status_code != 200:\n      print(\"Failed to switch the TPU to TF {}\".format(version))","8ebb141d":"if COLAB:    #%tensorflow_version 2.x\n    import tensorflow as tf\n    print(\"Tensorflow version \" + tf.__version__)\n\n    try:\n      tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n      print('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])\n    except ValueError:\n      raise BaseException('ERROR: Not connected to a TPU runtime; please see the previous cell in this notebook for instructions!')\n\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    #tpu_strategy = tf.distribute.TPUStrategy(tpu) ","e4e28075":"!pip install -q tensorflow_io\nimport tensorflow_io as tfio\nimport tensorflow as tf\nimport gc\n!pip install image-classifiers\n!pip install tensorflow_addons==0.10.0\n#0.11.2\nimport tensorflow_addons as tfa\n#import tfa as tfa\nimport numpy as np\nfrom pathlib import Path\nimport io\nimport matplotlib.pyplot as plt\n!pip install soundfile\nimport soundfile as sf\nimport librosa\n#!pip install kaggle_datasets\n\n#from kaggle_datasets import KaggleDatasets\nfrom tqdm import tqdm\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nimport seaborn as sns\nfrom IPython.display import Audio\n\nfrom classification_models.keras import Classifiers\ntf.__version__","200165e6":"\nfrom classification_models.keras import Classifiers","9f2b6747":"#SEED = 42\nimport random \nSEED = random.randint(0, 10000)# !!!!\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(SEED)","f9865c93":"# from https:\/\/github.com\/qubvel\/classification_models\nResNet34, preprocess_input = Classifiers.get('resnet34')","a429ddde":"cfg = {\n    'parse_params': {\n        'cut_time': 10,\n    },\n    'data_params': {\n        'sample_time': 6, # assert 60 % sample_time == 0\n        'spec_fmax': 24000.0,\n        'spec_fmin': 40.0,\n        'spec_mel': 300, \n        'mel_power': 2,\n        'img_shape': (300, 670)\n    },\n    'model_params': {\n        'batchsize_per_tpu': 8,\n        'iteration_per_epoch': 128,\n        'epoch': 25,#  1 epoch just for example\n        'arch': ResNet34,\n        'arch_preprocess': preprocess_input,\n        'freeze_to': 0,  # Freeze to backbone.layers[:freeze_to]. If None, all layers in the backbone will be freezed.\n        'loss': {\n            'fn': tfa.losses.SigmoidFocalCrossEntropy,\n            'params': {},\n        },\n        'optim': {\n            'fn': tfa.optimizers.RectifiedAdam,\n            'params': {'lr': 2e-3, 'total_steps': 18*64, 'warmup_proportion': 0.3, 'min_lr': 1e-6},\n        },\n        'mixup': True # False\n    }\n}","39b4e760":"# detect and init the TPU\nif not COLAB:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    print(\"All devices: \", tf.config.list_logical_devices('TPU'))\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","c1fd7fdd":"\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\n\nTRAIN_TFREC = GCS_DS_PATH + \"\/tfrecords\/train\"\nTEST_TFREC = GCS_DS_PATH + \"\/tfrecords\/test\"","78c9076e":"CUT = cfg['parse_params']['cut_time']\nSR = 48000     # all wave's sample rate may be 48k\n\nTIME = cfg['data_params']['sample_time']\n\nFMAX = cfg['data_params']['spec_fmax']\nFMIN = cfg['data_params']['spec_fmin']\nN_MEL = cfg['data_params']['spec_mel']\n\nHEIGHT, WIDTH = cfg['data_params']['img_shape']\n\nCLASS_N = 24","4b354376":"raw_dataset = tf.data.TFRecordDataset([TRAIN_TFREC + '\/00-148.tfrec'])\nraw_dataset","b2ee3470":"feature_description = {\n    'recording_id': tf.io.FixedLenFeature([], tf.string, default_value=''),\n    'audio_wav': tf.io.FixedLenFeature([], tf.string, default_value=''),\n    'label_info': tf.io.FixedLenFeature([], tf.string, default_value=''),\n}\nparse_dtype = {\n    'audio_wav': tf.float32,\n    'recording_id': tf.string,\n    'species_id': tf.int32,\n    'songtype_id': tf.int32,\n    't_min': tf.float32,\n    'f_min': tf.float32,\n    't_max': tf.float32,\n    'f_max':tf.float32,\n    'is_tp': tf.int32\n}\n\n@tf.function\ndef _parse_function(example_proto):\n    sample = tf.io.parse_single_example(example_proto, feature_description)\n    wav, _ = tf.audio.decode_wav(sample['audio_wav'], desired_channels=1) # mono\n    label_info = tf.strings.split(sample['label_info'], sep='\"')[1]\n    labels = tf.strings.split(label_info, sep=';')\n    \n    @tf.function\n    def _cut_audio(label):\n        items = tf.strings.split(label, sep=',')\n        spid = tf.squeeze(tf.strings.to_number(items[0], tf.int32))\n        soid = tf.squeeze(tf.strings.to_number(items[1], tf.int32))\n        tmin = tf.squeeze(tf.strings.to_number(items[2]))\n        fmin = tf.squeeze(tf.strings.to_number(items[3]))\n        tmax = tf.squeeze(tf.strings.to_number(items[4]))\n        fmax = tf.squeeze(tf.strings.to_number(items[5]))\n        tp = tf.squeeze(tf.strings.to_number(items[6], tf.int32))\n\n        tmax_s = tmax * tf.cast(SR, tf.float32)\n        tmin_s = tmin * tf.cast(SR, tf.float32)\n        cut_s = tf.cast(CUT * SR, tf.float32)\n        all_s = tf.cast(60 * SR, tf.float32)\n        tsize_s = tmax_s - tmin_s\n        cut_min = tf.cast(\n            tf.maximum(0.0, \n                tf.minimum(tmin_s - (cut_s - tsize_s) \/ 2,\n                           tf.minimum(tmax_s + (cut_s - tsize_s) \/ 2, all_s) - cut_s)\n            ), tf.int32\n        )\n        cut_max = cut_min + CUT * SR\n        \n        _sample = {\n            'audio_wav': tf.reshape(wav[cut_min:cut_max], [CUT*SR]),\n            'recording_id': sample['recording_id'],\n            'species_id': spid,\n            'songtype_id': soid,\n            't_min': tmin - tf.cast(cut_min, tf.float32)\/tf.cast(SR, tf.float32),\n            'f_min': fmin,\n            't_max': tmax - tf.cast(cut_min, tf.float32)\/tf.cast(SR, tf.float32),\n            'f_max': fmax,\n            'is_tp': tp\n        }\n        return _sample\n    \n    samples = tf.map_fn(_cut_audio, labels, dtype=parse_dtype)\n    return samples\n\nparsed_dataset = raw_dataset.map(_parse_function).unbatch()","79ac3d21":"@tf.function\ndef _cut_wav(x):\n    # random cut in training\n    cut_min = tf.random.uniform([], maxval=(CUT-TIME)*SR, dtype=tf.int32)\n    cut_max = cut_min + TIME * SR\n    cutwave = tf.reshape(x['audio_wav'][cut_min:cut_max], [TIME*SR])\n    y = {}\n    y.update(x)\n    y['audio_wav'] = cutwave\n    y['t_min'] = tf.maximum(0.0, x['t_min'] - tf.cast(cut_min, tf.float32) \/ SR)\n    y['t_max'] = tf.maximum(0.0, x['t_max'] - tf.cast(cut_min, tf.float32) \/ SR)\n    return y\n    \n@tf.function\ndef _cut_wav_val(x):\n    # center crop in validation\n    cut_min = (CUT-TIME)*SR \/\/ 2\n    cut_max = cut_min + TIME * SR\n    cutwave = tf.reshape(x['audio_wav'][cut_min:cut_max], [TIME*SR])\n    y = {}\n    y.update(x)\n    y['audio_wav'] = cutwave\n    y['t_min'] = tf.maximum(0.0, x['t_min'] - tf.cast(cut_min, tf.float32) \/ SR)\n    y['t_max'] = tf.maximum(0.0, x['t_max'] - tf.cast(cut_min, tf.float32) \/ SR)\n    return y","76525183":"@tf.function\ndef _filtTP(x):\n    return x['is_tp'] == 1","f5222f99":"def show_wav(sample, ax):\n    wav = sample[\"audio_wav\"].numpy()\n    rate = SR\n    ax.plot(np.arange(len(wav)) \/ rate, wav)\n    ax.set_title(\n        sample[\"recording_id\"].numpy().decode()\n        + (\"\/%d\" % sample[\"species_id\"])\n        + (\"TP\" if sample[\"is_tp\"] else \"FP\"))\n\n    return Audio((wav * 2**15).astype(np.int16), rate=rate)\n\nfig, ax = plt.subplots(figsize=(15, 3))\nshow_wav(next(iter(parsed_dataset)), ax)","56fb13a9":"@tf.function\ndef _wav_to_spec(x):\n    mel_power = cfg['data_params']['mel_power']\n    \n    stfts = tf.signal.stft(x[\"audio_wav\"], frame_length=2048, frame_step=512, fft_length=2048)\n    spectrograms = tf.abs(stfts) ** mel_power\n\n    # Warp the linear scale spectrograms into the mel-scale.\n    num_spectrogram_bins = stfts.shape[-1]\n    lower_edge_hertz, upper_edge_hertz, num_mel_bins = FMIN, FMAX, N_MEL\n    \n    linear_to_mel_weight_matrix = tf.signal.linear_to_mel_weight_matrix(\n      num_mel_bins, num_spectrogram_bins, SR, lower_edge_hertz,\n      upper_edge_hertz)\n    mel_spectrograms = tf.tensordot(\n      spectrograms, linear_to_mel_weight_matrix, 1)\n    mel_spectrograms.set_shape(spectrograms.shape[:-1].concatenate(\n      linear_to_mel_weight_matrix.shape[-1:]))\n\n    # Compute a stabilized log to get log-magnitude mel-scale spectrograms.\n    log_mel_spectrograms = tf.math.log(mel_spectrograms + 1e-6)\n\n    y = {\n        'audio_spec': tf.transpose(log_mel_spectrograms), # (num_mel_bins, frames)\n    }\n    y.update(x)\n    return y\n\nspec_dataset = parsed_dataset.filter(_filtTP).map(_cut_wav).map(_wav_to_spec)","363f8b2f":"plt.figure(figsize=(12,5))\nfor i, s in enumerate(spec_dataset.take(3)):\n    plt.subplot(1,3,i+1)\n    plt.imshow(s['audio_spec'])\nplt.show()","dd5b8c88":"import librosa.display\nimport matplotlib.patches as patches\n\ndef show_spectrogram(sample, ax, showlabel=False):\n    S_dB = sample[\"audio_spec\"].numpy()\n    img = librosa.display.specshow(S_dB, x_axis='time',\n                             y_axis='mel', sr=SR,\n                             fmax=FMAX, fmin=FMIN, ax=ax, cmap='magma')\n    ax.set(title=f'Mel-frequency spectrogram of {sample[\"recording_id\"].numpy().decode()}')\n    sid, fmin, fmax, tmin, tmax, istp = (\n            sample[\"species_id\"], sample[\"f_min\"], sample[\"f_max\"], sample[\"t_min\"], sample[\"t_max\"], sample[\"is_tp\"])\n    ec = '#00ff00' if istp == 1 else '#0000ff'\n    ax.add_patch(\n        patches.Rectangle(xy=(tmin, fmin), width=tmax-tmin, height=fmax-fmin, ec=ec, fill=False)\n    )\n\n    if showlabel:\n        ax.text(tmin, fmax, \n        f\"{sid.numpy().item()} {'tp' if istp == 1 else 'fp'}\",\n        horizontalalignment='left', verticalalignment='bottom', color=ec, fontsize=16)","7a890495":"fig, ax = plt.subplots(figsize=(15,3))\nshow_spectrogram(next(iter(spec_dataset)), ax, showlabel=True)","7e9c9e11":"# in validation, annotations will come to the center\nfig, ax = plt.subplots(figsize=(15,3))\nshow_spectrogram(next(iter(parsed_dataset.filter(_filtTP).map(_cut_wav_val).map(_wav_to_spec))), ax, showlabel=True)","7a91cde8":"for sample in spec_dataset.take(5):\n    fig, ax = plt.subplots(figsize=(15,3))\n    show_spectrogram(sample, ax, showlabel=True)","c5d0bb4b":"@tf.function\ndef _create_annot(x):\n    targ = tf.one_hot(x[\"species_id\"], CLASS_N, on_value=x[\"is_tp\"], off_value=0)\n    \n    return {\n        'input': x[\"audio_spec\"],\n        'target': tf.cast(targ, tf.float32)\n    }\n\nannot_dataset = spec_dataset.map(_create_annot)","0b0e0177":"#@tf.function\ndef _preprocess_img(x, training=False, test=False):\n    image = tf.expand_dims(x, axis=-1)\n    image = tf.image.resize(image, [HEIGHT, WIDTH])\n    image = tf.image.per_image_standardization(image)\n    \n    @tf.function\n    def _specaugment(image):\n        ERASE_TIME = 50\n        ERASE_MEL = 16\n        image = tf.squeeze(image, axis=2)\n        image = tfio.experimental.audio.time_mask(image, param=ERASE_TIME)\n        image = tfio.experimental.audio.freq_mask(image, param=ERASE_MEL)\n        image = tf.expand_dims(image, axis=2)\n        return image\n    \n    if training:\n        # gaussian\n        gau = tf.keras.layers.GaussianNoise(0.3)\n        image = tf.cond(tf.random.uniform([]) < 0.5, lambda: gau(image, training=True), lambda: image)\n        # brightness\n        image = tf.image.random_brightness(image, 0.2)\n        # random left right flip (NEW)\n        image = tf.image.random_flip_left_right(image)\n        # specaugment\n        image = tf.cond(tf.random.uniform([]) < 0.5, lambda: _specaugment(image), lambda: image)\n        \n    if test:\n        # specaugment\n        image = tf.cond(tf.random.uniform([]) < 0.5, lambda: _specaugment(image), lambda: image)\n        \n    image = (image - tf.reduce_min(image)) \/ (tf.reduce_max(image) - tf.reduce_min(image)) * 255.0 # rescale to [0, 255]\n    image = tf.image.grayscale_to_rgb(image)\n    image = cfg['model_params']['arch_preprocess'](image)\n\n    return image\n\n@tf.function\ndef _preprocess(x):\n    image = _preprocess_img(x['input'], training=True, test=False)\n    return (image, x[\"target\"])\n\n@tf.function\ndef _preprocess_val(x):\n    image = _preprocess_img(x['input'], training=False, test=False)\n    return (image, x[\"target\"])\n\n@tf.function\ndef _preprocess_test(x):\n    image = _preprocess_img(x['audio_spec'], training=False, test=True)\n    return (image, x[\"recording_id\"])","0f5030a3":"for inp, targ in annot_dataset.map(_preprocess).take(2):\n    plt.imshow(inp.numpy()[:,:,0])\n    t = targ.numpy()\n    if t.sum() == 0:\n        plt.title(f'FP')\n    else:\n        plt.title(f'{t.nonzero()[0]}')\n    plt.colorbar()\n    plt.show()","3f4d6885":"from tensorflow.keras.layers import *\nfrom tensorflow.keras import losses, models, optimizers\nfrom tensorflow.keras.optimizers import Adam\ndef create_model():\n    #with strategy.scope():\n    #backbone = cfg['model_params']['arch'](include_top=False, weights='imagenet')\n    \n    def Classifier(shape_):\n\n        backbone = cfg['model_params']['arch']((shape_), include_top=False, weights='imagenet')\n    \n    \n        \n        def cbr(x, out_layer, kernel, stride, dilation):\n            x = Conv2D(out_layer, kernel_size=kernel, dilation_rate=dilation, strides=stride, padding=\"same\")(x)\n            x = BatchNormalization()(x)\n            x = Activation(\"relu\")(x)\n            return x\n\n        def wave_block(x, filters, kernel_size, n):\n            dilation_rates = [2**i for i in range(n)]\n            x = Conv2D(filters = filters,\n                       kernel_size = 1,\n                       padding = 'same')(x)\n            res_x = x\n            for dilation_rate in dilation_rates:\n                tanh_out = Conv2D(filters = filters,\n                                  kernel_size = kernel_size,\n                                  padding = 'same', \n                                  activation = 'tanh', \n                                  dilation_rate = dilation_rate)(x)\n                sigm_out = Conv2D(filters = filters,\n                                  kernel_size = kernel_size,\n                                  padding = 'same',\n                                  activation = 'sigmoid', \n                                  dilation_rate = dilation_rate)(x)\n                x = Multiply()([tanh_out, sigm_out])\n                x = Conv2D(filters = filters,\n                           kernel_size = 1,\n                           padding = 'same')(x)\n                res_x = Add()([res_x, x])\n            return res_x\n\n        \n        #out1\n        def wavenet(layer):\n          \n          x = cbr(layer, 192, 7, 1, 1)\n          x = BatchNormalization()(x)\n          x = wave_block(x, 192, 3, 1)\n          x = cbr(x, 96, 7, 1, 1)\n          x = BatchNormalization()(x)\n          x = wave_block(x, 96, 3, 1)\n          x = cbr(x, 48, 5, 1, 1)\n          x = BatchNormalization()(x)\n          x = wave_block(x, 48, 3, 1)  \n          return x\n\n        def wavenet1(layer):\n          \n          x = cbr(layer, 4, 7, 1, 1)\n          x = BatchNormalization()(x)\n          x = wave_block(x, 3, 3, 1)\n          x = cbr(x, 3, 7, 1, 1)\n          x = BatchNormalization()(x)\n          x = wave_block(x, 16, 3, 1)\n          x = cbr(x, 3, 5, 1, 1)\n          return x\n        #x = BatchNormalization()(x)\n        \n        x0 = backbone#model\n        print('1')\n        #backbone.summary()\n        x1 = tf.keras.layers.GlobalAveragePooling2D()(x0.layers[-1].output)  #-3,-7,-9,-15  for EF5    \n        #x2 = tf.keras.layers.GlobalAveragePooling2D()(x0.layers[-3].output) # 803,799,797,791 for EF7\n        x3 = tf.keras.layers.GlobalAveragePooling2D()(x0.layers[-7].output)\n        #x4 = tf.keras.layers.GlobalAveragePooling2D()(x0.layers[-12].output)\n        x5 = tf.keras.layers.GlobalAveragePooling2D()(x0.layers[-18].output)\n        print('2')\n        x1=wavenet(x0.layers[-1].output)\n        x3=wavenet(x0.layers[-7].output)\n        x5=wavenet(x0.layers[-18].output)\n\n        x1 = tf.keras.layers.GlobalAveragePooling2D()(x1)\n        x3 = tf.keras.layers.GlobalAveragePooling2D()(x3)\n        x5 = tf.keras.layers.GlobalAveragePooling2D()(x5)\n       \n        \n        \n        print('4')\n        #x =  tf.concat([x1,x2,x3,x4,x5],axis = 1)\n       \n        x =  tf.concat([x1,x3,x5],axis = 1)\n      \n        x = tf.keras.layers.Dropout(0.7)(x)\n        x = tf.keras.layers.Dense(192)(x)\n        #x =  tf.keras.layers.BatchNormalization()(x)          \n        x = tf.keras.layers.Dropout(0.4)(x)\n        #x =  margin([x , label])\n        \n        output = tf.keras.layers.Softmax(dtype='float32')(x)\n        output =tf.keras.layers.Dense(CLASS_N)(x)\n        print('5')\n        model = tf.keras.models.Model(inputs = x0.input, outputs = output)\n        #model.compile(optimizer=optimizer, loss=loss_fn, metrics=[LWLRAP(CLASS_N)])\n        \n\n        \n        \n        return model\n    return Classifier([HEIGHT,WIDTH,3])\n\n\nmodel = create_model()\nmodel.summary()\n","b0a6ee80":"@tf.function\ndef _mixup(inp, targ):\n    indice = tf.range(len(inp))\n    indice = tf.random.shuffle(indice)\n    sinp = tf.gather(inp, indice, axis=0)\n    starg = tf.gather(targ, indice, axis=0)\n    \n    alpha = 0.2\n    t = tf.compat.v1.distributions.Beta(alpha, alpha).sample([len(inp)])\n    tx = tf.reshape(t, [-1, 1, 1, 1])\n    ty = tf.reshape(t, [-1, 1])\n    x = inp * tx + sinp * (1-tx)\n    y = targ * ty + starg * (1-ty)\n#     y = tf.minimum(targ + starg, 1.0) # for multi-label???\n    return x, y","f4170c15":"tfrecs = sorted(tf.io.gfile.glob(TRAIN_TFREC + '\/*.tfrec'))\nparsed_trainval = (tf.data.TFRecordDataset(tfrecs, num_parallel_reads=AUTOTUNE)\n                    .map(_parse_function, num_parallel_calls=AUTOTUNE).unbatch()\n                    .filter(_filtTP).enumerate())","f527595e":"indices = []\nspid = []\nrecid = []\n\nfor i, sample in tqdm(parsed_trainval.prefetch(AUTOTUNE)):\n    indices.append(i.numpy())\n    spid.append(sample['species_id'].numpy())\n    recid.append(sample['recording_id'].numpy().decode())","8c45a9f2":"table = pd.DataFrame({'indices': indices, 'species_id': spid, 'recording_id': recid})\ntable","544580fd":"skf = StratifiedKFold(n_splits=5, random_state=SEED, shuffle=True)\nsplits = list(skf.split(table.index, table.species_id))\n\nplt.hist([table.loc[splits[0][0], 'species_id'], table.loc[splits[0][1], 'species_id']], bins=CLASS_N,stacked=True)\nplt.show()","0ed037a4":"def create_idx_filter(indice):\n    @tf.function\n    def _filt(i, x):\n        return tf.reduce_any(indice == i)\n    return _filt\n\n@tf.function\ndef _remove_idx(i, x):\n    return x","458e9315":"def create_train_dataset(batchsize, train_idx):\n    global parsed_trainval\n    parsed_train = (parsed_trainval\n                    .filter(create_idx_filter(train_idx))\n                    .map(_remove_idx))\n    \n    dataset = (parsed_train.cache()\n        .shuffle(len(train_idx))\n        .repeat()\n        .map(_cut_wav, num_parallel_calls=AUTOTUNE)\n        .map(_wav_to_spec, num_parallel_calls=AUTOTUNE)\n        .map(_create_annot, num_parallel_calls=AUTOTUNE)\n        .map(_preprocess, num_parallel_calls=AUTOTUNE)\n        .batch(batchsize))\n\n    if cfg['model_params']['mixup']:\n        dataset = (dataset.map(_mixup, num_parallel_calls=AUTOTUNE)\n                    .prefetch(AUTOTUNE))\n    else:\n        dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ndef create_val_dataset(batchsize, val_idx):\n    global parsed_trainval\n    parsed_val = (parsed_trainval\n                  .filter(create_idx_filter(val_idx))\n                  .map(_remove_idx))\n\n    vdataset = (parsed_val\n        .map(_cut_wav_val, num_parallel_calls=AUTOTUNE)\n        .map(_wav_to_spec, num_parallel_calls=AUTOTUNE)\n        .map(_create_annot, num_parallel_calls=AUTOTUNE)\n        .map(_preprocess_val, num_parallel_calls=AUTOTUNE)\n        .batch(8*tpu_strategy.num_replicas_in_sync)\n        .cache())\n    return vdataset","74294e0c":"# from https:\/\/www.kaggle.com\/carlthome\/l-lrap-metric-for-tf-keras\n@tf.function\ndef _one_sample_positive_class_precisions(example):\n    y_true, y_pred = example\n\n    retrieved_classes = tf.argsort(y_pred, direction='DESCENDING')\n    class_rankings = tf.argsort(retrieved_classes)\n    retrieved_class_true = tf.gather(y_true, retrieved_classes)\n    retrieved_cumulative_hits = tf.math.cumsum(tf.cast(retrieved_class_true, tf.float32))\n\n    idx = tf.where(y_true)[:, 0]\n    i = tf.boolean_mask(class_rankings, y_true)\n    r = tf.gather(retrieved_cumulative_hits, i)\n    c = 1 + tf.cast(i, tf.float32)\n    precisions = r \/ c\n\n    dense = tf.scatter_nd(idx[:, None], precisions, [y_pred.shape[0]])\n    return dense\n\nclass LWLRAP(tf.keras.metrics.Metric):\n    def __init__(self, num_classes, name='lwlrap'):\n        super().__init__(name=name)\n\n        self._precisions = self.add_weight(\n            name='per_class_cumulative_precision',\n            shape=[num_classes],\n            initializer='zeros',\n        )\n\n        self._counts = self.add_weight(\n            name='per_class_cumulative_count',\n            shape=[num_classes],\n            initializer='zeros',\n        )\n\n    def update_state(self, y_true, y_pred, sample_weight=None):\n        precisions = tf.map_fn(\n            fn=_one_sample_positive_class_precisions,\n            elems=(y_true, y_pred),\n            dtype=(tf.float32),\n        )\n\n        increments = tf.cast(precisions > 0, tf.float32)\n        total_increments = tf.reduce_sum(increments, axis=0)\n        total_precisions = tf.reduce_sum(precisions, axis=0)\n\n        self._precisions.assign_add(total_precisions)\n        self._counts.assign_add(total_increments)        \n\n    def result(self):\n        per_class_lwlrap = self._precisions \/ tf.maximum(self._counts, 1.0)\n        per_class_weight = self._counts \/ tf.reduce_sum(self._counts)\n        overall_lwlrap = tf.reduce_sum(per_class_lwlrap * per_class_weight)\n        return overall_lwlrap\n\n    def reset_states(self):\n        self._precisions.assign(self._precisions * 0)\n        self._counts.assign(self._counts * 0)","1fe6bbe4":"\ndef _parse_function_test(example_proto):\n    sample = tf.io.parse_single_example(example_proto, feature_description)\n    wav, _ = tf.audio.decode_wav(sample['audio_wav'], desired_channels=1) # mono\n    \n    @tf.function\n    def _cut_audio(i):\n        _sample = {\n            'audio_wav': tf.reshape(wav[i*SR*TIME:(i+1)*SR*TIME], [SR*TIME]),\n            'recording_id': sample['recording_id']\n        }\n        return _sample\n\n    return tf.map_fn(_cut_audio, tf.range(60\/\/TIME), dtype={\n        'audio_wav': tf.float32,\n        'recording_id': tf.string\n    })\n\ndef inference(model):\n    tdataset = (tf.data.TFRecordDataset(tf.io.gfile.glob(TEST_TFREC + '\/*.tfrec'), num_parallel_reads=AUTOTUNE)\n        .map(_parse_function_test, num_parallel_calls=AUTOTUNE).unbatch()\n        .map(_wav_to_spec, num_parallel_calls=AUTOTUNE)\n        .map(_preprocess_test, num_parallel_calls=AUTOTUNE)\n        .batch(128*(60\/\/TIME)).prefetch(AUTOTUNE))\n    \n    rec_ids = []\n    probs = []\n    for inp, rec_id in tqdm(tdataset):\n        with tpu_strategy.scope():\n            pred = model.predict_on_batch(tf.reshape(inp, [-1, HEIGHT, WIDTH, 3]))\n            prob = tf.sigmoid(pred)\n            prob = tf.reduce_max(tf.reshape(prob, [-1, 60\/\/TIME, CLASS_N]), axis=1)\n\n        rec_id_stack = tf.reshape(rec_id, [-1, 60\/\/TIME])\n        for rec in rec_id.numpy():\n            assert len(np.unique(rec)) == 1\n        rec_ids.append(rec_id_stack.numpy()[:,0])\n        probs.append(prob.numpy())\n        \n    crec_ids = np.concatenate(rec_ids)\n    cprobs = np.concatenate(probs)\n    \n    sub = pd.DataFrame({\n        'recording_id': list(map(lambda x: x.decode(), crec_ids.tolist())),\n        **{f's{i}': cprobs[:,i] for i in range(CLASS_N)}\n    })\n    sub = sub.sort_values('recording_id')\n\n    return sub","35efb5dc":"def plot_history(history, name):\n    plt.figure(figsize=(8,3))\n    plt.subplot(1,2,1)\n    plt.plot(history.history[\"loss\"])\n    plt.plot(history.history[\"val_loss\"])\n    plt.legend(['Train', 'Test'], loc='upper left')\n    plt.title(\"loss\")\n    # plt.yscale('log')\n\n    plt.subplot(1,2,2)\n    plt.plot(history.history[\"lwlrap\"])\n    plt.plot(history.history[\"val_lwlrap\"])\n    plt.legend(['Train', 'Test'], loc='upper left')\n    plt.title(\"metric\")\n\n    plt.savefig(name)","8d1bd4d7":"def train_and_inference(splits, split_id):\n    print(split_id)\n\n    batchsize = cfg['model_params']['batchsize_per_tpu'] * tpu_strategy.num_replicas_in_sync\n    print(\"batchsize\", batchsize)\n    loss_fn = cfg['model_params']['loss']['fn'](from_logits=True, **cfg['model_params']['loss']['params'])\n\n    idx_train_tf = tf.constant(splits[split_id][0])\n    idx_val_tf = tf.constant(splits[split_id][1])\n\n    dataset = create_train_dataset(batchsize, idx_train_tf)\n    vdataset = create_val_dataset(batchsize, idx_val_tf)\n    \n    optimizer = cfg['model_params']['optim']['fn'](**cfg['model_params']['optim']['params'])\n    \n    with tpu_strategy.scope():\n        model = create_model()\n        model.compile(optimizer=optimizer, loss=loss_fn, metrics=[LWLRAP(CLASS_N)])\n    \n    if split_id not in (10,10):#!!!!!!!!!!!!! For convenience: If your Colab shuts down for some reason, you can always download your already trained models from Google Drive\n\n        history = model.fit(dataset,\n                          steps_per_epoch=cfg['model_params']['iteration_per_epoch'],\n                          epochs=cfg['model_params']['epoch'],\n                          validation_data=vdataset,\n                          callbacks=[\n                              tf.keras.callbacks.ReduceLROnPlateau(\n                                  'val_lwlrap', patience=10\n                              ),  \n                              tf.keras.callbacks.ModelCheckpoint(\n                                  filepath=models_path+'model_best_%d.h5' % split_id,\n                                  save_weights_only=True,\n                                  monitor='val_lwlrap',\n                                  mode='max',\n                                  save_best_only=True),\n                          ]\n                          )\n        plot_history(history, 'history_%d.png' % split_id)\n        best_score = max(history.history['val_lwlrap'])\n        print (best_score)\n    ### inference ###\n    \n    model.load_weights(models_path+'model_best_%d.h5' % split_id)\n    sub=inference(model)\n    del model\n    gc.collect()\n    return sub,best_score","5b4b8c77":"# train and inference\n# sub, _ = train_and_inference(splits, 0)\n\n# N-fold ensemble\n\n\n\"\"\" Delete this line to start training the model\nprint(SEED)\ntrain_n=0\ndf = pd.DataFrame(columns=[\"train_n\",'split_id','best_score','CSV','SEED'])\nfor split_id in range(len(splits)):\n    sub, best_score=train_and_inference(splits, split_id)\n    sub.set_index('recording_id').to_csv(models_path+f\"submission_train_n_{train_n}_split_id_{split_id}.csv\", index=False)\n    df = df.append({'train_n': train_n,'split_id': split_id,'best_score': best_score,'CSV': f\"submission_train_n_{train_n}_split_id_{split_id}.csv\",'SEED':SEED}, ignore_index=True)\ndf.to_csv(models_path+f\"train_n_{train_n}.csv\", index=False)\n#\"\"\"\n","d5eabb4b":"#sub.describe()","6039333d":"# Stratified 5-Fold","9e1e233e":"## create labels","880684b1":"\n# If you like my notebook don't forget to upvoted it\n\nIf you have questions then ask, I will help as I can\n","85476910":"# *Hi to all!!!*\n# *I have prepared a notebook that works on both COLAB and KAGGLE!!!*","50f75173":"It is important to work with colab you need kaggle.json (https:\/\/www.kaggle.com\/docs\/api)\n\nI also created a folder called Models on my Google Drive and put the kaggle.json file in it.","446632d8":"IMPORTANTLY!\nThis notebook didn't work after the changes to kaggle, but thanks to a discussion by Martin G\u00f6rner and Allohvk (https:\/\/www.kaggle.com\/c\/rfcx-species-audio-detection\/discussion\/216408 ), I made the necessary changes in version 4 and now everything works.\nHere are the changes:\nfrom\n\n@tf.function\n\ndef _preprocess_img(x, training=False, test=False):\n\nto\n\n@tf.function\ndef _preprocess_img(x, training=False, test=False):\n\nAnd from\n\ndef _specaugment(image):\n\n    image = tfa.image.cutout(image, [HEIGHT, xsize[0]], offset=[HEIGHT\/\/2, xoff[0]])\n    image = tfa.image.cutout(image, [HEIGHT, xsize[1]], offset=[HEIGHT\/\/2, xoff[1]])\n    image = tfa.image.cutout(image, [ysize[0], WIDTH], offset=[yoff[0], WIDTH\/\/2])\n    image = tfa.image.cutout(image, [ysize[1], WIDTH], offset=[yoff[1], WIDTH\/\/2])\n    image = tf.squeeze(image, axis=0)\n    return image\n\nto\n\n    #image = tfa.image.cutout(image, [HEIGHT, xsize[0]], offset=[HEIGHT\/\/2, xoff[0]])\n    #image = tfa.image.cutout(image, [HEIGHT, xsize[1]], offset=[HEIGHT\/\/2, xoff[1]])\n    #image = tfa.image.cutout(image, [ysize[0], WIDTH], offset=[yoff[0], WIDTH\/\/2])\n    #image = tfa.image.cutout(image, [ysize[1], WIDTH], offset=[yoff[1], WIDTH\/\/2])\n    image = tf.squeeze(image, axis=0)\n    return image","1e2359bc":"# Now start training!","3d9dcdc4":"## parse tfrecords","f5cf9452":"# Explore the tfrecords, Create dataset","2d2af94e":"In versions 3 and 4 I show the model I treated on Google COLAB for this notebook https:\/\/www.kaggle.com\/aikhmelnytskyy\/bagging-rainforest","1ecdc925":"# Metrics","c7adc27e":"Version 5 changes as shown in this discussion https:\/\/www.kaggle.com\/c\/rfcx-species-audio-detection\/discussion\/218930 (special thanks to the author)","6da2e395":"## proprocessing and data augmentation\n\nIn training, I use\n\n* gaussian noise\n* random brightness\n* specaugment","cda91821":"# Other setup","1eec5dfe":"I used these notebooks as a basis:\nhttps:\/\/www.kaggle.com\/mekhdigakhramanian\/rfcx-resnet50-tpu\nhttps:\/\/www.kaggle.com\/khoongweihao\/resnet34-more-augmentations-mixup-tta-inference\n","9b70f445":"## create mel-spectrogram","6befa120":"# Testset and Inference function","47f4ddb6":"# Model"}}