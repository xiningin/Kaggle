{"cell_type":{"7e7cf6cd":"code","24ceb428":"code","48d14fcb":"code","e15cd21f":"code","656d765a":"code","46373899":"code","750b9b81":"code","b98c74ac":"code","dceb310e":"code","273c7691":"code","bf558341":"code","f45da9e9":"code","4fd8fbfc":"code","36266286":"code","092a2fbf":"code","474ed823":"code","560ad935":"code","2a0d07ea":"code","636bd54d":"code","ca9f9409":"code","8f8e4fa2":"code","6d02b918":"code","0915c46d":"code","431e1096":"code","5bee3138":"code","7d796a00":"code","ac5d0013":"code","9d44b12d":"code","03c86fdd":"code","5ebd6114":"code","f9aa5caa":"code","08b53b6d":"code","b2a504da":"code","e5678f69":"code","58544c88":"code","73452892":"code","6ee23644":"code","ceb22d79":"code","2de8afe8":"code","8fdc1368":"code","109a14c7":"code","75301085":"code","d3cfe21c":"code","c4064129":"code","1c03b623":"code","11ca803a":"markdown","6cb27a2c":"markdown","5c42e76c":"markdown","b7500cbd":"markdown","ca632ad6":"markdown","8f15fef7":"markdown","44acf7c5":"markdown","fa6e5633":"markdown","4c958ce7":"markdown","9ec0fff8":"markdown","40edae76":"markdown","2aaf7c49":"markdown","459c9ded":"markdown","55e6415e":"markdown","06f6c3b5":"markdown","8b426b2d":"markdown","759b5d78":"markdown"},"source":{"7e7cf6cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n# Any results you write to the current directory are saved as output.","24ceb428":"dt_app_data = pd.read_csv('..\/input\/googleplaystore.csv')\ndt_user_review_data = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","48d14fcb":"dt_app_data.shape","e15cd21f":"dt_app_data.head()","656d765a":"dt_app_data.info()","46373899":"dt_app_data.isnull().sum()","750b9b81":"dt_app_data.isnull().sum()","b98c74ac":"dt_app_data.Category.value_counts()","dceb310e":"\n# Delete the row with Categroy value as 1.9  , The complete row has mis managed data so we can remove it\n\n# Get names of indexes for which column Age has value 30\nindexNames = dt_app_data[ dt_app_data['Category'] == '1.9' ].index\ndt_app_data.loc[indexNames]\n# Delete these row indexes from dataFrame\ndt_app_data.drop(indexNames , inplace=True)\n","273c7691":"dt_app_data.Category.nunique()","bf558341":"labels = dt_app_data.Category.value_counts().index\nvalues = dt_app_data.Category.value_counts().values\ntrace = go.Pie(labels=labels, values=values)\n#fig = go.Figure(data=[visData],layout=layout)\niplot([trace])","f45da9e9":"dt_app_data.Rating.value_counts()","4fd8fbfc":"print (\"There are %d null values out of  %d total values \" % (dt_app_data.Rating.isna().sum(), len(dt_app_data)))\n\nprint( (dt_app_data.Rating.isna().sum()\/ len(dt_app_data)) *100 )","36266286":"# Fill 13% Null values with mean rating values\ndt_app_data['Rating'] =  dt_app_data['Rating'].fillna(value=dt_app_data['Rating'].mean())","092a2fbf":"dt_app_data.Size.value_counts()\n","474ed823":"#Contains M &k to signify MB & kB \ndt_app_data.Size = dt_app_data.Size.apply(lambda x: x.replace('M', '000') if 'M' in x else x)\ndt_app_data.Size = dt_app_data.Size.apply(lambda x: x.replace('k','') if 'k' in str(x) else x)\ndt_app_data.Size = dt_app_data.Size.apply(lambda x: x.replace('Varies with device','0') if 'Varies with device' in str(x) else x)\n#dt_app_data.Size = dt_app_data.Size.apply(lambda x: float(x))","560ad935":"#Find the row which has non numeric value\ndt_app_data[~dt_app_data.Size.str.isnumeric()]","2a0d07ea":"dt_app_data.Size=pd.to_numeric(dt_app_data.Size)\n","636bd54d":"dt_app_data.Installs.value_counts()\n# + & , needs to removed and Free should be moved to Nan","ca9f9409":"# + & , needs to removed and Free should be moved to Nan\ndt_app_data.Installs = dt_app_data.Installs.apply(lambda x:x.strip('+'))\ndt_app_data.Installs = dt_app_data.Installs.apply(lambda x:x.replace(',',''))\ndt_app_data.Installs = dt_app_data.Installs.replace('Free','0')\n","8f8e4fa2":"#Convert to Numeric \ndt_app_data.Installs = pd.to_numeric(dt_app_data.Installs)","6d02b918":"#Check non numeric column\ndt_app_data.Reviews.str.isnumeric().sum()","0915c46d":"#Find the row which has non numeric value\ndt_app_data[~dt_app_data.Reviews.str.isnumeric()]","431e1096":"#Convert to Numeric \ndt_app_data.Reviews = pd.to_numeric(dt_app_data.Reviews)","5bee3138":"dt_app_data.Type.value_counts()","7d796a00":"dt_app_data.Price.value_counts()","ac5d0013":"# The Price data is clean , only $ sign needs to be removed before converting it to numeric\ndt_app_data.Price = dt_app_data.Price.apply(lambda x:x.strip('$'))\ndt_app_data.Price = pd.to_numeric(dt_app_data.Price)","9d44b12d":"dt_app_data['Content Rating'].value_counts()","03c86fdd":"dt_app_data[dt_app_data['Content Rating'].isna()]","5ebd6114":"dt_app_data.Genres.value_counts()\n","f9aa5caa":"dt_app_data.Genres.nunique()","08b53b6d":"dt_app_data['Primary_Genres'] = dt_app_data.Genres.apply(lambda x: x.split(';')[0] )\ndt_app_data['Secondary_Genres'] = dt_app_data.Genres.apply(lambda x: x.split(';')[-1])","b2a504da":"from datetime import date,datetime\ndt_app_data['Last Updated'] = pd.to_datetime(dt_app_data['Last Updated'])\ndt_app_data['Last_Updated_Since'] =  dt_app_data['Last Updated'].apply(lambda x: date.today() - datetime.date(x))","e5678f69":"dt_app_data['Android Ver'].value_counts()","58544c88":"x='4.1 and up'\ny='4.0.3 - 7.1.1'\nz='4.4W and up'\n\na=x.split('and')\nb=y.split('-')\n\na = [i.strip(' ') for i in a]\na[0]","73452892":"\ndt_app_data['Android_Base_Ver']=dt_app_data['Android Ver'].apply(lambda x:str(x).split(' and ')[0].split(' - ')[0])\ndt_app_data['Android_Base_Ver']=dt_app_data['Android_Base_Ver'].replace('4.4W','4.4')\ndt_app_data['Android_Last_Ver']=dt_app_data['Android Ver'].apply(lambda x:str(x).split(' and ')[-1].split(' - ')[-1])\n","6ee23644":"dt_app_data['Android_Base_Ver']","ceb22d79":"dt_app_data['Current Ver'].value_counts()","2de8afe8":"dt_app_data['Current Ver'].isna().sum()","8fdc1368":"import plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n# plotly\ninit_notebook_mode(connected=True)\n","109a14c7":"labels = dt_app_data.Category.value_counts().index\nvalues = dt_app_data.Category.value_counts().values\ntrace = go.Pie(labels=labels, values=values)\n#fig = go.Figure(data=[visData],layout=layout)\niplot([trace])","75301085":"group_category_rating = dt_app_data.groupby('Category')['Rating'].mean()\n#group_category_rating.sort_values()[-10:].plot(kind='boxplot');\nsns.boxplot(x = group_category_rating.values, y = group_category_rating.index )","d3cfe21c":"trace = [go.Histogram(x = dt_app_data.Rating, xbins = {'start': 1, 'size': 0.1, 'end' :5})]\niplot(trace, filename='overall_rating_distribution')","c4064129":"sns.jointplot(data = dt_app_data , x= 'Rating' , y= 'Price');","1c03b623":"dt_app_data.info()","11ca803a":"**Last Updated**","6cb27a2c":"**Size**","5c42e76c":"**Review**","b7500cbd":"**Category**","ca632ad6":"**Current Version**","8f15fef7":"**Content Rating**","44acf7c5":"**Install**","fa6e5633":"The data is clean for this field so no pre processing required","4c958ce7":"**Rating**","9ec0fff8":"Given there are 33 Unique categories that exist for this column no data cleaning is required","40edae76":"**Price**","2aaf7c49":"**Type**","459c9ded":"**Category distribution w.r.t Rating**","55e6415e":"**Android Version**","06f6c3b5":"**Genres**","8b426b2d":"**Visualization**","759b5d78":"No changes are required in this column as no repeation exist"}}