{"cell_type":{"4e2e87c6":"code","6534a132":"code","b27beae7":"code","5e050c52":"code","f1081a3c":"code","3b3ea11f":"code","a24bcb74":"code","2b41a4bb":"code","e85d283d":"code","929479ff":"code","799a8816":"code","9e9cd5b2":"code","7895311d":"code","4241883c":"code","f08e18aa":"code","0f661ab7":"code","e59def78":"code","d86594fd":"code","12b56be2":"markdown","93e98386":"markdown","e64a04d4":"markdown","cbe888aa":"markdown","6d6a5ca0":"markdown","a5dcd8e3":"markdown","d749f1a8":"markdown","0495ca11":"markdown","a4c1f231":"markdown","ce4fc918":"markdown","82070644":"markdown","d8869114":"markdown","349e368e":"markdown","2a508bed":"markdown","bc218411":"markdown"},"source":{"4e2e87c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6534a132":"train = pd.read_csv(\"..\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\")\nsub = pd.read_csv(\"..\/input\/learn-together\/sample_submission.csv\")","b27beae7":"y = train[\"Cover_Type\"] # cover type is the prediction we will want to make\nX = train.drop([\"Id\", \"Cover_Type\"], axis = 1) # Id and Cover_Type are the two things we won't use\n# to make a prediction","5e050c52":"X.head()","f1081a3c":"y.head()","3b3ea11f":"from sklearn import tree","a24bcb74":"clf = tree.DecisionTreeClassifier()\n","2b41a4bb":"clf = clf.fit(X, y)","e85d283d":"Z = test.drop([\"Id\"], axis = 1)","929479ff":"Z.head()","799a8816":"X.shape","9e9cd5b2":"Z.shape","7895311d":"predicted = clf.predict(Z)","4241883c":"predicted","f08e18aa":"sub = pd.read_csv(\"..\/input\/learn-together\/sample_submission.csv\")\n","0f661ab7":"sub[\"Cover_Type\"] = predicted","e59def78":"sub.head()","d86594fd":"sub.to_csv('DecTrePrediction.csv',index = False)","12b56be2":"We can see that this data is similar to X.","93e98386":"And finally, we just need to write that submission data to a csv so we can submit it.","e64a04d4":"Let's take a look at that submission:","cbe888aa":"The firs step is to load that data from the files on the Kaggle server:","6d6a5ca0":"This code creates the decision tree classifier.","a5dcd8e3":"Now let's look at the test data. (I dropped \"Id\" because it's not relevant to the predicion, and also because I dropped it above and it's import that the train and test data sets have the same shape and format.","d749f1a8":"As an easy way to ensure my submission matches the sample submission in format, I read the sample submission into a pandas data frame, then write the predicted values to the `\"Cover_Type\"` column. Note that this will overwrite the dummy data in that column from the sample submission document, but leave the column of Ids in place","0495ca11":"Next we isolate the parts of the training data we intend to use. `y` is for the \"answers,\" that is, the category of tree. This is what we will ultimately be trying to predict, but for now we already have the answers. `X` is the type of information we will use to make a prediction. It includes elevation, slope, soil type, etc...  \nNote that X is capital and 'y' is lower case. I'm not sure of the reason for this convention, but it seems to be stardard, so I'm using it.","a4c1f231":"They are because they have the same number of columns.","ce4fc918":"Credit where credit is due: I got started by following parts of this notebook: https:\/\/www.kaggle.com\/pulkitmehtawork1985\/simple-model-to-get-into-top-20\/output","82070644":"Here's a look at that data:","d8869114":"I'm looking at the shape to confirm that X and Z are compatible","349e368e":"And next is to generate the predictions from the test dataset using the decision tree classifier we created and trained above.","2a508bed":"And this bit fits it to our train data.","bc218411":"We need to import the tree module from sklearn because the houses the decision tree classifier we will be using."}}