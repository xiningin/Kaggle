{"cell_type":{"967f8f66":"code","47324190":"code","da8538fe":"code","af137d4e":"code","03a0da7a":"code","e8c5b491":"code","f682443f":"code","065e32cd":"code","49ce712e":"code","23e9c76c":"code","ba0c38ff":"code","4f2c26f6":"code","6ee002f9":"code","a64e1267":"code","ed43e4f4":"code","4b763040":"code","064c0088":"code","48189fdb":"code","29714853":"code","0ec12c1a":"code","bde3a715":"code","b240c5d8":"code","dda1ce95":"code","783de40e":"code","d8234b91":"code","0bc4b842":"code","7c06d405":"code","33167c4a":"code","8a85770e":"code","2cf56880":"code","ee96b81d":"code","c184a484":"code","2a832b2c":"code","7668cb8e":"code","30cae718":"code","56f93c41":"code","9c9bf9c5":"code","01fe08f0":"code","cc8e87c0":"code","f197a0d1":"code","5a18d189":"code","0d7da950":"code","fdf439b8":"code","960fbd3e":"code","0f3f1969":"code","b4ff6c10":"code","49856662":"code","2645e3f1":"code","07e11ff6":"code","f04a5e65":"markdown","9c772a8a":"markdown","05f92d24":"markdown","c640d9f9":"markdown","d70a8c0c":"markdown","64df4c03":"markdown","d4d7e1f0":"markdown","a3afe981":"markdown","6ef55bba":"markdown"},"source":{"967f8f66":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='charges')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","47324190":"import sklearn\nfrom sklearn import *\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import AdaBoostRegressor, ExtraTreesRegressor, GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, PassiveAggressiveRegressor, SGDRegressor\nfrom sklearn.metrics import mean_squared_error,mean_squared_log_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as xg\nfrom xgboost import XGBRFRegressor, XGBRegressor","da8538fe":"X_train.reset_index(drop=True, inplace=True)\nX_test.reset_index(drop=True, inplace=True)\ny_train.reset_index(drop=True, inplace=True)\ny_test.reset_index(drop=True, inplace=True)","af137d4e":"X_train.head()","03a0da7a":"X_test.head()","e8c5b491":"X_train.describe()","f682443f":"X_test.describe()","065e32cd":"X_train.info()","49ce712e":"X_test.info()","23e9c76c":"X_train.drop('id',axis=1, inplace=True)\nX_test.drop('id',axis=1, inplace=True)","ba0c38ff":"X_train.boxplot()","4f2c26f6":"X_test.boxplot()","6ee002f9":"obj = ['sex', 'smoker','region']\nfor i in range(3):\n    X_train = pd.concat([X_train,pd.get_dummies(X_train[obj[i]]).iloc[:,:-1]],axis=1)\n    X_test = pd.concat([X_test,pd.get_dummies(X_test[obj[i]]).iloc[:,:-1]],axis=1)\n    \n    X_train.drop(obj[i], inplace=True, axis=1)  \n    X_test.drop(obj[i], inplace=True, axis=1)    ","a64e1267":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","ed43e4f4":"X_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","4b763040":"model_list = [AdaBoostRegressor(random_state=0), ExtraTreesRegressor(random_state=0), GradientBoostingRegressor(random_state=0), \n              RandomForestRegressor(random_state=0), LinearRegression(), Ridge(), Lasso(), PassiveAggressiveRegressor(), SGDRegressor(),\n              DecisionTreeRegressor(random_state=0), SVR(), XGBRFRegressor(random_state=0), XGBRegressor(random_state=0)]\n\nfor i in range(len(model_list)):\n    clf = model_list[i]\n    clf.fit(X_tra, y_tra.iloc[:,1])\n    print(model_list[i],\":\",mean_squared_error(y_val.iloc[:,1], clf.predict(X_val)))","064c0088":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(ExtraTreesRegressor(random_state=0) , parameters, scoring='neg_mean_squared_error')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","48189fdb":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(RandomForestRegressor(random_state=0) , parameters, scoring='neg_mean_squared_error')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","29714853":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(XGBRFRegressor(random_state=0) , parameters, scoring='neg_mean_squared_error')\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","0ec12c1a":"clf = RandomForestRegressor(random_state=0, max_depth= 5, n_estimators= 500)\nclf.fit(X_train, y_train.iloc[:,1])\npred = y_test.copy()\npred.iloc[:,1] = clf.predict(X_test)","bde3a715":"np.sqrt(mean_squared_error(y_test.iloc[:,1], pred.iloc[:,1]))","b240c5d8":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='charges')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","dda1ce95":"X_train.head()","783de40e":"y_train.head()","d8234b91":"y_train['charges'].hist()","0bc4b842":"X_train.isnull().sum()","7c06d405":"X_test.isnull().sum()","33167c4a":"X_train.info()","8a85770e":"X_train.select_dtypes(\"object\").columns","2cf56880":"# Train ['sex', 'smoker', 'region']\ncols = X_train.select_dtypes(\"object\").columns\n\nfor col in cols:\n    print(\"\\n=====\", col, \"=====\")\n    print(\"[train]\")\n    print(X_train[col].value_counts())\n    print(\"[test]\")\n    print(X_test[col].value_counts())","ee96b81d":"X_train = pd.get_dummies(X_train, columns = cols)\nX_test = pd.get_dummies(X_test, columns = cols)","c184a484":"X_train.head(2)","2a832b2c":"y_train['charges'].hist()","7668cb8e":"y_train['charges'] = np.log1p(y_train['charges'])","30cae718":"y_train['charges'].hist()","56f93c41":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train['bmi'] = scaler.fit_transform(X_train[['bmi']])\nX_test['bmi'] = scaler.transform(X_test[['bmi']])","9c9bf9c5":"# \ub098\uc774\ub97c 10\ub300, 20\ub300, 30\ub300\ub85c \uad6c\ubd84\ud558\uae30 \uc704\ud574 10\uc744 \ub098\ub208 \ubaab \uac12\ub9cc \uad6c\ud568\nX_train['age'] = X_train['age'].apply(lambda x: x\/\/10)\nX_test['age'] = X_test['age'].apply(lambda x: x\/\/10)","01fe08f0":"X_train.head(3)","cc8e87c0":"target = y_train['charges']\nX_train = X_train.drop('id', 1)","f197a0d1":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","5a18d189":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor()\nrf.fit(X_tr, y_tr)\npred = rf.predict(X_val)","0d7da950":"from sklearn.metrics import mean_squared_error\ndef rmse2(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\nrmse2(y_val, pred)","fdf439b8":"def rmse(y_true, y_pred):\n    return np.sqrt(np.mean((y_true-y_pred)**2))\n\nrmse(y_val, pred)","960fbd3e":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor()\nxgb.fit(X_tr, y_tr)\npred = xgb.predict(X_val)","0f3f1969":"rmse2(y_val, pred)","b4ff6c10":"rf.fit(X_train, y_train['charges'])\npred = rf.predict(X_test.drop('id',1))","49856662":"pred = np.exp(pred)\noutput = pd.DataFrame({'id': y_test['id'], 'charges':pred})\noutput.head()","2645e3f1":"#output.to_csv(\"000000.csv\", index=False)","07e11ff6":"rmse(y_test['charges'], pred)","f04a5e65":"## Standard Scaler","9c772a8a":"## Categorical Variables","05f92d24":"- GradientBoostingRegressor(random_state=0) : 20770311.91731298\n- RandomForestRegressor(random_state=0) : 21320357.258106053\n- XGBRFRegressor() : 19860470.720311243","c640d9f9":"## label encoding","d70a8c0c":"# Preprocessing","64df4c03":"## Train-Validation Split","d4d7e1f0":"# EDA","a3afe981":"## Log Transform","6ef55bba":"# \uacb0\uacfc \uccb4\uc810"}}