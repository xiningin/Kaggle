{"cell_type":{"a64f803a":"code","6de2978c":"code","e99abf9c":"code","481a180d":"code","78ec58f0":"code","f786a534":"code","ef08e432":"code","70dfd8f0":"code","5bb38101":"code","c4e2eb9d":"code","e441ea8c":"code","fd0cc6d7":"code","c56ff471":"code","c9615b31":"code","c649ac68":"code","71c6c501":"code","4cdab89a":"code","85ce6afd":"code","8fb79c8a":"code","b4748d2f":"code","0e063532":"code","696fc853":"code","34588f54":"code","e853bce3":"code","b48d5d43":"code","e75470b0":"code","c09268ec":"code","5183b32d":"code","4374cdf5":"code","0856bda1":"code","f9a863e5":"code","fb015a49":"code","ab19dbeb":"code","e263150c":"code","f2a308df":"code","8fb19fb1":"code","fb20cc0a":"code","a3b38c75":"code","33984079":"code","98478d2e":"code","c076b06d":"code","17faa2f7":"code","e3cefa6e":"code","a30d29dc":"code","a3c260ce":"code","cef2b53b":"code","fea7de96":"code","18475bfc":"code","d8bc5657":"code","689a2594":"code","72426235":"code","a68c7197":"markdown","828df2d4":"markdown","21d26521":"markdown","877eb710":"markdown","fb2c2291":"markdown","dab47ccf":"markdown"},"source":{"a64f803a":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import OrdinalEncoder","6de2978c":"Dados = pd.read_csv (r'..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv', delimiter=',', encoding = \"ISO-8859-1\")   \nDados","e99abf9c":"Dados.describe()","481a180d":"Dados.columns","78ec58f0":"columns = ['SeniorCitizen', 'gender', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'Churn']\nfor i in columns :\n    print(Dados.groupby(i).agg(Count = ('customerID','count')))","f786a534":"Dados['Churn_cat'] = (Dados['Churn'] == 'Yes').astype(int)","ef08e432":"Dados['Churn_cat'].sum()","70dfd8f0":"fig=plt.figure(figsize=(20,20))\nj = 1\nfor i in columns :\n  ax=fig.add_subplot(5,5,j)\n  j = j + 1\n  plt.figure(figsize=(2, 2))\n  sns.barplot(x=i,y='Churn_cat',data=Dados,ci=None,ax=ax)\n  # ax.set_title(i+\" Distribution\",color='DarkRed')\n  # ax.set_yscale('log')\n  fig.tight_layout()  \nplt.show()","5bb38101":"sns.barplot(x='PaymentMethod',y='Churn_cat',data=Dados,ci=None)","c4e2eb9d":"sns.histplot(Dados, x='tenure', bins = range(0,80,5), hue='Churn_cat')","e441ea8c":"sns.histplot(Dados, x='MonthlyCharges', bins = range(0,130,5), hue='Churn_cat')","fd0cc6d7":"# Categorizing important dichotomous variables\nDados['Partner_cat'] = (Dados['Partner'] == 'Yes').astype(int)\nDados['Dependents_cat'] = (Dados['Dependents'] == 'Yes').astype(int)\nDados['MultipleLines_cat'] = (Dados['MultipleLines'] == 'Yes').astype(int)\nDados['InternetService_cat'] = (Dados['InternetService'] == 'Fiber optic').astype(int)\nDados['NoOnlineSecurity_cat'] = (Dados['OnlineSecurity'] == 'No').astype(int)\nDados['OnlineBackup_cat'] = (Dados['OnlineBackup'] == 'Yes').astype(int)\nDados['NoDeviceProtection_cat'] = (Dados['DeviceProtection'] == 'No').astype(int)\nDados['NoTechSupport_cat'] = (Dados['TechSupport'] == 'No').astype(int)\nDados['MtoMContract_cat'] = (Dados['Contract'] == 'Month-to-month').astype(int)\nDados['PaperlessBilling_cat'] = (Dados['PaperlessBilling'] == 'Yes').astype(int)\nDados['PaymMethElectCheck_cat'] = (Dados['PaymentMethod'] == 'Electronic check').astype(int)","c56ff471":"list(Dados.columns)","c9615b31":"Dados.describe()","c649ac68":"Dados2 = Dados.loc[:,['SeniorCitizen','tenure','MonthlyCharges','Churn_cat','Partner_cat',\n                     'Dependents_cat','MultipleLines_cat','InternetService_cat','NoOnlineSecurity_cat',\n                     'OnlineBackup_cat','NoDeviceProtection_cat','NoTechSupport_cat','MtoMContract_cat',\n                     'PaperlessBilling_cat','PaymMethElectCheck_cat']]","71c6c501":"plt.figure(figsize=(18, 8))\nsns.heatmap(Dados2.corr(), vmin=-1, vmax=1, annot=True, cmap='vlag') # cmap='BrBG'\nplt.title('Correlation Map', fontdict={'fontsize':12}, pad=12);","4cdab89a":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x='tenure', y='MonthlyCharges', data= Dados, hue='Churn_cat')","85ce6afd":"# Balancing Dataset\nDados3Y = Dados2[Dados2['Churn_cat'] == 1]\nDados3X = Dados2[Dados2['Churn_cat'] == 0].sample(n=len(Dados3Y), random_state=1)","8fb79c8a":"len(Dados3Y)","b4748d2f":"len(Dados3X)","0e063532":"Dados3 = pd.concat([Dados3X,Dados3Y])","696fc853":"Dados3","34588f54":"Dados3.describe()","e853bce3":"DadosX = Dados3.loc[:,['SeniorCitizen','tenure','MonthlyCharges','Partner_cat',\n                     'Dependents_cat','MultipleLines_cat','InternetService_cat','NoOnlineSecurity_cat',\n                     'OnlineBackup_cat','NoDeviceProtection_cat','NoTechSupport_cat','MtoMContract_cat',\n                     'PaperlessBilling_cat','PaymMethElectCheck_cat']]","b48d5d43":"DadosY = Dados3['Churn_cat']","e75470b0":"DadosX","c09268ec":"DadosY","5183b32d":"# Splitting data\n\nX_train, X_test, Y_train, Y_test = train_test_split(DadosX, DadosY,random_state=101, test_size=0.3)","4374cdf5":"X_train.describe()","0856bda1":"X_test.describe()","f9a863e5":"# Multi MLP Generator - 1 Layer\ntraining_accuracy = []\ntesting_accuracy = []\nLayer1 = range(10,110,10)\nLayersComb = len(Layer1)\nStep=0\nscore=0\n\nfor i in Layer1 :\n    mlp = MLPRegressor(hidden_layer_sizes=(i),activation=\"logistic\" ,random_state=1, max_iter=2000).fit(X_train, Y_train)\n    Y_pred_train = mlp.predict(X_train).round()\n    training_accuracy.append(accuracy_score(Y_train, Y_pred_train))\n    Y_pred_test = mlp.predict(X_test).round()\n    acc_score = accuracy_score(Y_test,Y_pred_test)\n    testing_accuracy.append(acc_score)\n    Step = Step + 1\n    if score < acc_score:\n        score = acc_score\n        best_Layer1 = i\n        best_Step = Step\n    \n    print('Step ', Step, ' of ', LayersComb, ' Layer1: ', i,' Accuracy', acc_score.round(4))    \n    print('Best Accuracy Score', score.round(4), ' Best Layer1: ', best_Layer1, ' do Step:', best_Step)","fb015a49":"sns.lineplot(data=[training_accuracy,testing_accuracy])","ab19dbeb":"# Selected Model - 1 Layer\nmlp_selected = MLPRegressor(hidden_layer_sizes=(40),activation=\"logistic\" ,random_state=1, max_iter=2000)\nmlp_selected.fit(X_test, Y_test)","e263150c":"Y_pred_train = mlp_selected.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = mlp_selected.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","f2a308df":"# Confusion Matrix for Selected Model - 1 Layer\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","8fb19fb1":"# 1 Layer\nprint(classification_report(Y_test,Y_pred_test)) ","fb20cc0a":"# Multi MLP Generator\ntraining_accuracy = []\ntesting_accuracy = []\nLayer1 = range(10,90,20)\nLayer2 = range(10,90,20)\nLayersComb = len(Layer1)*len(Layer2)\nStep=0\nscore=0\n\nfor i in Layer1 :\n  for j in Layer2 :\n    mlp = MLPRegressor(hidden_layer_sizes=(i,j),activation=\"logistic\" ,random_state=1, max_iter=2000).fit(X_train, Y_train)\n    Y_pred_train = mlp.predict(X_train).round()\n    training_accuracy.append(accuracy_score(Y_train, Y_pred_train))\n    Y_pred_test = mlp.predict(X_test).round()\n    acc_score = accuracy_score(Y_test,Y_pred_test)\n    testing_accuracy.append(acc_score)\n    Step = Step + 1\n    if score < acc_score:\n        score = acc_score\n        best_Layer1 = i\n        best_Layer2 = j\n        best_Step = Step\n    \n    print('Step ', Step, ' of ', LayersComb, ' Layer1: ', i, ' Layer2: ', j, ' Accuracy', acc_score.round(4))    \n    print('Best Accuracy Score', score.round(4), ' Best Layer1: ', best_Layer1, ' Best Layer2: ', best_Layer2, ' do Step:', best_Step)","a3b38c75":"# 2 Layers\nsns.lineplot(data=[training_accuracy,testing_accuracy])","33984079":"# Selected Model - 2 Layers\nmlp_selected = MLPRegressor(hidden_layer_sizes=(30,30),activation=\"logistic\" ,random_state=1, max_iter=2000)\nmlp_selected.fit(X_test, Y_test)","98478d2e":"Y_pred_train = mlp_selected.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = mlp_selected.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","c076b06d":"# Confusion Matrix for Selected Model - 2 Layers\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","17faa2f7":"# 2 Layers\nprint(classification_report(Y_test,Y_pred_test))","e3cefa6e":"from sklearn.ensemble import RandomForestClassifier","a30d29dc":"rfc = RandomForestClassifier(criterion = 'entropy', random_state = 42)\nrfc.fit(X_train,Y_train)","a3c260ce":"Y_pred_train = rfc.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = rfc.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","cef2b53b":"# Confusion Matrix for Selected Model - Random Forest Classifier\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","fea7de96":"# Random Forest Classifier\nprint(classification_report(Y_test,Y_pred_test))","18475bfc":"rfc = RandomForestClassifier(criterion = 'gini', random_state = 42)\nrfc.fit(X_train,Y_train)","d8bc5657":"Y_pred_train = rfc.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = rfc.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","689a2594":"# Confusion Matrix for Selected Model - Random Forest Classifier\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","72426235":"# Random Forest Classifier\nprint(classification_report(Y_test,Y_pred_test))","a68c7197":"# Preparing dependent \/ independent variables and splitting training \/ testing data","828df2d4":"# Models Generation and Evaluation","21d26521":"# Balancing dataset for modeling","877eb710":"# Data Evaluation, Preparation and Analysis","fb2c2291":"# Random Forest Classifier","dab47ccf":"# Telco Customer Churn - Multilayer Perceptron Model & Random Forest Classification"}}