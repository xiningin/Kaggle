{"cell_type":{"5656024c":"code","323012fe":"code","6806c66a":"code","6924e7e1":"code","ced2e896":"code","fab3dbd5":"code","07d99999":"code","444c14e5":"code","b68ff47e":"code","2482be81":"code","8725bcd8":"code","a8ed28a9":"code","5bdda013":"code","b9fa69bf":"code","dffee184":"code","56e6131a":"code","7271454b":"code","d6078121":"code","c3934969":"code","7a26de91":"code","031d1268":"code","51ec673d":"code","70366338":"code","e6e31d5a":"code","2ba50e01":"markdown","c2d38560":"markdown","16ec22e7":"markdown","9ec20664":"markdown","1266b3f2":"markdown","551e759e":"markdown","774e50ed":"markdown","13c29945":"markdown","145db7cb":"markdown","3bdbf2be":"markdown","e044a676":"markdown","ba435a9b":"markdown","98c1f84e":"markdown"},"source":{"5656024c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","323012fe":"# for basic visualizations\nimport spacy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# for advanced visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff","6806c66a":"#loading english module\nnlp = spacy.load('en')","6924e7e1":"#reading the csv file\ndata = pd.read_csv('..\/input\/amazon-alexa\/amazon_alexa.tsv', delimiter = '\\t', quoting = 3)","ced2e896":"#display data\ndata.head()","fab3dbd5":"#number of rows and columns present in the dataset.\ndata.shape","07d99999":"data[\"variation\"].head()","444c14e5":"txt = data[\"verified_reviews\"][1009]\ntxt","b68ff47e":"data.describe()","2482be81":"#to see any null data is there\ndata.isnull().any().any()","8725bcd8":"doc = nlp(txt)    \nolist = []\nfor token in doc:\n    l = [token.text,\n        token.idx,\n        token.lemma_,\n        token.is_punct,\n        token.is_space,\n        token.shape_,\n        token.pos_,\n        token.tag_]\n    olist.append(l)\n    \nodf = pd.DataFrame(olist)\nodf.columns= [\"Text\", \"StartIndex\", \"Lemma\", \"IsPunctuation\", \"IsSpace\", \"WordShape\", \"PartOfSpeech\", \"POSTag\"]\nodf","a8ed28a9":"doc = nlp(txt)\nolist = []\nfor ent in doc.ents:\n    olist.append([ent.text, ent.label_])\n    \nodf = pd.DataFrame(olist)\nodf.columns = [\"Text\", \"EntityType\"]\nodf","5bdda013":"from spacy import displacy\ndef explain_text_entities(text):\n    doc = nlp(text)\n    for ent in doc.ents:\n        print(f'Entity: {ent}, Label: {ent.label_}, {spacy.explain(ent.label_)}')\nfor i in range(15, 50):\n    one_sentence = data['verified_reviews'][i]\n    doc = nlp(one_sentence)\ndisplacy.render(doc, style='ent', jupyter=True)","b9fa69bf":"doc = nlp(data[\"verified_reviews\"][1009])\nolist = []\nfor token in doc:\n    olist.append([token.text, token.dep_, token.head.text, token.head.pos_,\n          [child for child in token.children]])\nodf = pd.DataFrame(olist)\nodf.columns = [\"Text\", \"Dep\", \"Head text\", \"Head POS\", \"Children\"]\nodf","dffee184":"displacy.render(doc, style='dep', jupyter=True, options={'distance': 90})","56e6131a":"nlp = spacy.load('en_core_web_lg')","7271454b":"from scipy import spatial\n\ncosine_similarity = lambda x, y: 1 - spatial.distance.cosine(x, y)\n\nlove = nlp.vocab['love'].vector\ncomputed_similarities = []\nfor word in nlp.vocab:\n    # Ignore words without vectors\n    if not word.has_vector:\n        continue\n    similarity = cosine_similarity(love, word.vector)\n    computed_similarities.append((word, similarity))\n\ncomputed_similarities = sorted(computed_similarities, key=lambda item: -item[1])\nprint([w[0].text for w in computed_similarities[:10]])","d6078121":"queen = nlp.vocab['love']\nhappy = nlp.vocab['happy']\nfun = nlp.vocab['fun']\nkids = nlp.vocab['kids']\nking = nlp.vocab['King']\n \nprint(\"Word similarity score between love and happy : \",queen.similarity(happy))\nprint(\"Word similarity score between love and funn : \",queen.similarity(fun))","c3934969":"ratings = data['rating'].value_counts()\n\nlabel_rating = ratings.index\nsize_rating = ratings.values\n\ncolors = ['pink', 'lightblue', 'aqua', 'gold', 'crimson']\n\nrating_piechart = go.Pie(labels = label_rating,\n                         values = size_rating,\n                         marker = dict(colors = colors),\n                         name = 'Alexa', hole = 0.3)\n\ndf = [rating_piechart]\n\nlayout = go.Layout(\n           title = 'Distribution of Ratings for Alexa')\n\nfig = go.Figure(data = df,\n                 layout = layout)\n\npy.iplot(fig)","7a26de91":"feedbacks = data['feedback'].value_counts()\n\nlabel_feedback = feedbacks.index\nsize_feedback = feedbacks.values\n\ncolors = ['yellow', 'lightgreen']\n\nfeedback_piechart = go.Pie(labels = label_feedback,\n                         values = size_feedback,\n                         marker = dict(colors = colors),\n                         name = 'Alexa', hole = 0.3)\n\ndf2 = [feedback_piechart]\n\nlayout = go.Layout(title = 'Distribution of Feedbacks for Alexa')\n\nfig = go.Figure(data = df2,layout = layout)\n\npy.iplot(fig)","031d1268":"from sklearn.feature_extraction.text import CountVectorizer\n\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(data.verified_reviews)\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.head(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Most Frequently Occuring Words - Top 20\")\nplt.show()","51ec673d":"from wordcloud import WordCloud\n\nwordcloud = WordCloud(background_color = 'lightcyan', width = 2000, height = 2000).generate_from_frequencies(dict(words_freq))\n\n#plt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.imshow(wordcloud)\n#plt.title(\"Vocabulary from Reviews\", fontsize = 20)\nplt.show()","70366338":"data['length'] = data['verified_reviews'].apply(len)\n\ndata.groupby('length').describe().sample(10)","e6e31d5a":"trace = go.Scatter3d(\n    x = data['length'],\n    y = data['rating'],\n    z = data['variation'],\n    name = 'Amazon Alexa',\n    mode='markers',\n    marker=dict(\n        size=10,\n        color = data['rating'],\n        colorscale = 'Viridis',\n    )\n)\ndf = [trace]\n\nlayout = go.Layout(\n    title = 'feedback vs Variation vs Ratings',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data = df, layout = layout)\niplot(fig)","2ba50e01":"* Text: The original token text.\n* Dep: The syntactic relation connecting child to head.\n* Head text: The original text of the token head.\n* Head POS: The part-of-speech tag of the token head.\n* Children: The immediate syntactic dependents of the token.","c2d38560":"## **Importing basic packages and modules**","16ec22e7":"## Word Similarity:\n\nSpacy has word vector model as well. So we can use the same to find similar words. ","9ec20664":"By looking at the above pie chart, we can infer that most of the Ratings are good for alexa. Around 72.6% people have given Alexa 5 Star rating, which is very good. 14.4% people have given Alexa a 4 Star Rating, which is also good. that means 72.6+14.4 = 87% people have given alexa good rating.\n\n4.38% people have given alexa an average rating of 3 stars. 3.05% people did not like alexa and chose to give only 2 star ratings to alexa whereas 5.11% people hated alexa and decided to give alexa only 1 Star Rating. This a total of 3.05+5.11 = 8.16% people did not like alexa.","1266b3f2":"## Data Visualization","551e759e":"Now we can use the cosine similarity to find the words that are similar to the word \"Love\"","774e50ed":"## Dependency Parser\n\nA dependency parser analyzes the grammatical structure of a sentence, establishing relationships between \"head\" words and words which modify those heads \n\nSpacy can be used to create these dependency parsers which can be used in a variety of tasks.","13c29945":"Word level attributes :","145db7cb":"Just calling the function \"nlp\" on the text column gets us a lot of information. The details are as follows:\n\n* Text - Tokenized word\n* StartIndex - Index at which the word starts in the sentence\n* Lemma - Lemma of the word (we need not do lemmatization separately)\n* IsPunctuation - Whether the given word is a punctuation or not\n* IsSpace - Whether the given word is just a white space or not\n* WordShape - Gives information about the shape of word (If all letters are in upper case, we will get XXXXX, if all in lower case then xxxxx, if the first letter is upper and others lower then Xxxxx and so on)\n* PartOfSpeech - Part of speech of the word\n* POSTag - Tag for part of speech of word","3bdbf2be":"Here again we are going to analyze the Pie Chart representing the Distribution of feedback for Amazon Alexa which says that around 92% people gave a positive feedback to Amazon Alexa and only 8% people gave negative feedback to Amazon Alexa. This Suggests that Amazon Alexa is a popular product amongst so many people and only few people did not like it for some unforeseeable factors.","e044a676":"The Above Bar plot represents the most frequnt words in the reviews so that we can get a rough idea about the reviews and what people think of the product.\n\nWe can see that love is the most frequent word in the word suggesting that most of the people absolutely love alexa. Other frequent words that suggest alexa is doing well are amazing, like, great, works etc.","ba435a9b":"## Named Entity Recognition:\n\nA named entity is a \"real-world object\" that's assigned a name \u2013 for example, a person, a country, a product or a book title.\n\nWe also get named entity recognition as part of spacy package. It is inbuilt in the english language model and we can also train our own entities if needed.","98c1f84e":"Plotting a wordscloud for the Words to see all the words, The Larger the words the larger is the frequency for that word."}}