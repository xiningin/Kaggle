{"cell_type":{"a6b358fb":"code","85f83ee0":"code","bd567a90":"code","003a0abd":"code","9f67e5ec":"code","6f59a8bd":"code","12c9252e":"code","045e4a3c":"code","8673909a":"code","0376daa4":"code","93dd1b0d":"code","bde31a2e":"code","938da802":"code","7599c70c":"code","b0a477b4":"markdown","65febaea":"markdown","6199f73e":"markdown","6ecb8e15":"markdown","9ee20366":"markdown","deddab22":"markdown","2a1636f8":"markdown","c30b196a":"markdown","f6a70cc5":"markdown","f51d5600":"markdown"},"source":{"a6b358fb":"from keras.preprocessing.image import load_img, img_to_array\nimport os\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')","85f83ee0":"plt.figure(figsize= (12,12))\nfor i in range(1, 10, 1):\n    plt.subplot(3,3,i)\n    img = load_img(\"..\/input\/parkinsons-drawings\/spiral\/training\/healthy\/\"+\n                  os.listdir(\"..\/input\/parkinsons-drawings\/spiral\/training\/healthy\")[i])\n    plt.imshow(img)   \nplt.show() ","bd567a90":"plt.figure(figsize= (12,12))\nfor i in range(1, 10, 1):\n    plt.subplot(3,3,i)\n    img = load_img(\"..\/input\/parkinsons-drawings\/spiral\/training\/parkinson\/\"+\n                  os.listdir(\"..\/input\/parkinsons-drawings\/spiral\/training\/parkinson\")[i])\n    plt.imshow(img)   \nplt.show()","003a0abd":"plt.figure(figsize= (12,12))\nfor i in range(1, 10, 1):\n    plt.subplot(3,3,i)\n    img = load_img(\"..\/input\/parkinsons-drawings\/wave\/training\/healthy\/\"+\n                  os.listdir(\"..\/input\/parkinsons-drawings\/wave\/training\/healthy\")[i])\n    plt.imshow(img)   \nplt.show()","9f67e5ec":"plt.figure(figsize= (12,12))\nfor i in range(1, 10, 1):\n    plt.subplot(3,3,i)\n    img = load_img(\"..\/input\/parkinsons-drawings\/wave\/training\/parkinson\/\"+\n                  os.listdir(\"..\/input\/parkinsons-drawings\/wave\/training\/parkinson\")[i])\n    plt.imshow(img)   \nplt.show()","6f59a8bd":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense","12c9252e":"classifier=Sequential()\nclassifier.add(Conv2D(32,(3,3),input_shape=(128, 128, 3),activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\nclassifier.add(Conv2D(32,(3,3),activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\nclassifier.add(Flatten())\nclassifier.add(Dense(activation='relu',units=128))\nclassifier.add(Dense(activation='sigmoid',units=1))","045e4a3c":"from keras.preprocessing.image import ImageDataGenerator","8673909a":"train_datagen = ImageDataGenerator(rescale = 1.\/255, \n                                  shear_range = 0.2, \n                                  zoom_range = 0.2, \n                                  horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","0376daa4":"spiral_train_generator = train_datagen.flow_from_directory('..\/input\/parkinsons-drawings\/spiral\/training',\n                                                   target_size = (128,128),\n                                                   batch_size = 32,\n                                                   class_mode = 'binary')\n\nspiral_test_generator = test_datagen.flow_from_directory('..\/input\/parkinsons-drawings\/spiral\/testing',\n                                                   target_size = (128,128),\n                                                   batch_size = 32,\n                                                   class_mode = 'binary')","93dd1b0d":"wave_train_generator = train_datagen.flow_from_directory('..\/input\/parkinsons-drawings\/wave\/training',\n                                                   target_size = (128,128),\n                                                   batch_size = 32,\n                                                   class_mode = 'binary')\n\nwave_test_generator = test_datagen.flow_from_directory('..\/input\/parkinsons-drawings\/wave\/testing',\n                                                   target_size = (128,128),\n                                                   batch_size = 32,\n                                                   class_mode = 'binary')","bde31a2e":"from keras.optimizers import Adam\n\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nearly_stopping = EarlyStopping(monitor='val_loss',\n                          min_delta=0,\n                          patience=3,\n                          verbose=1,\n                          restore_best_weights=True\n                          )\n\nreduce_learningrate = ReduceLROnPlateau(monitor='val_loss',\n                              factor=0.2,\n                              patience=3,\n                              verbose=1,\n                              min_delta=0.0001)\n\ncallbacks_list = [early_stopping,reduce_learningrate]\n\nepochs = 48\n\nclassifier.compile(loss='binary_crossentropy',\n              optimizer = Adam(lr=0.001),\n              metrics=['accuracy'])","938da802":"history = classifier.fit_generator(\n        spiral_train_generator,\n        steps_per_epoch=spiral_train_generator.n\/\/spiral_train_generator.batch_size,\n        epochs=48,\n        validation_data=spiral_test_generator,\n        validation_steps=spiral_test_generator.n\/\/spiral_test_generator.batch_size,\n        callbacks=callbacks_list)","7599c70c":"plt.style.use('dark_background')\nplt.figure(figsize=(12,6))\nplt.subplot(1,2,1)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(history.history['accuracy'], label='Training Accuracy', color = 'green')\nplt.legend(loc='lower right')\n\n\n\nplt.subplot(1,2,2)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(history.history['loss'], label='Training Loss', color = 'red')\nplt.legend(loc='lower right')\nplt.show()\n","b0a477b4":"# Building Classifier","65febaea":"# # Wave (Healthy)","6199f73e":"# # Spiral (Parkinson)","6ecb8e15":"# Image Data Generation","9ee20366":"# Plotting Accuracy and Loss","deddab22":"# # Spiral (Healthy)","2a1636f8":"# Fitting The Model with Data","c30b196a":"# Importing CNN Layers","f6a70cc5":"# # Wave (Parkinson)","f51d5600":"# Visualising Dataset"}}