{"cell_type":{"ff9d4838":"code","4e4d608b":"code","6312e1e1":"code","6c074f62":"code","3533dcc5":"code","8594be78":"code","2b5078b3":"code","c35b178b":"code","e4d0bde8":"code","ca3f3316":"code","2ac2ce1f":"code","1fe8121f":"code","0cc2a9c1":"code","315d73e7":"code","597dc003":"code","9bf64ff3":"code","b6f4859d":"code","b86035c8":"code","c7b4b987":"code","7512f850":"code","3408622a":"code","dfd5321b":"code","aa118341":"code","0e299a95":"code","7467844b":"code","8e463ac4":"code","e44295de":"code","878f33d6":"code","669b055c":"code","b27b8bf4":"code","d4bd7610":"code","a402b358":"code","de0cb289":"code","75ccc570":"markdown","7084b771":"markdown","e3d77ccf":"markdown","92e58050":"markdown","89afdfe6":"markdown","e2a88ac0":"markdown","0f4908a5":"markdown","aa6b9d96":"markdown","d49a24e4":"markdown","a64309e8":"markdown","3560dba5":"markdown","675193c6":"markdown","9fd96f69":"markdown","2c5377a4":"markdown","2cc41c8f":"markdown","81072474":"markdown","1fc96806":"markdown","bb21f093":"markdown","96ef8fbf":"markdown","8931764d":"markdown","9473c663":"markdown","6863b008":"markdown","225dd3de":"markdown","9ac0e262":"markdown","2227a7ec":"markdown","3476a0bb":"markdown","b8e71865":"markdown","c95a5d7b":"markdown","36e23aee":"markdown"},"source":{"ff9d4838":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4e4d608b":"# Additional Imports\nimport tensorflow as tf\nimport sklearn as sk\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","6312e1e1":"INPUT_DIR = '..\/input'\ninput_item = pd.read_csv(os.path.join(INPUT_DIR, 'items.csv'))\ninput_test = pd.read_csv(os.path.join(INPUT_DIR, 'test.csv'))\ninput_train = pd.read_csv(os.path.join(INPUT_DIR, 'sales_train.csv'))\ninput_item_categories = pd.read_csv(os.path.join(INPUT_DIR, 'item_categories.csv'))\ninput_shops = pd.read_csv(os.path.join(INPUT_DIR, 'shops.csv'))\noutput_sample = pd.read_csv(os.path.join(INPUT_DIR, 'sample_submission.csv'))","6c074f62":"input_item.head()","3533dcc5":"print(\"Following are the unique Item Category IDs:\\n\", input_item['item_category_id'].unique(), \"(\" + str(len(input_item['item_category_id'].unique())) + \" categories)\")\n\nsns.countplot('item_category_id', data=input_item).set_title('Number of items in Each Category')\nplt.show()","8594be78":"input_test.head()","2b5078b3":"sns.countplot('shop_id', data=input_test).set_title('Number of items in Each Shop')\nplt.show()\nprint('There are a total of', len(input_test.index), 'Rows.')\nprint('It contains', len(input_test['item_id'].unique()), 'unique items.')\nprint('It contains', len(input_test['shop_id'].unique()), 'unique shops.')\nprint('It contains', len(input_test.groupby(['shop_id', 'item_id'])), 'unique shops-item pairs.')","c35b178b":"input_train.head()","e4d0bde8":"print('There are a total of', len(input_train.index), 'Rows.')\nprint('It contains', len(input_train['item_id'].unique()), 'unique items.')\nprint('It contains', len(input_train['shop_id'].unique()), 'unique shops.')\nprint('It contains', len(input_train['date_block_num'].unique()), 'date blocks.')\nprint('It contains', len(input_train.groupby(['shop_id', 'item_id'])), 'unique shops-item pairs.')","ca3f3316":"sns.countplot('shop_id', data=input_train).set_title('Number of items in Each Shop')\nplt.show()\n_, plot_price_axes = plt.subplots(1,2, figsize=(15, 5))\nsns.distplot(input_train['item_price'], bins=100, ax=plot_price_axes[0]).set_title('Price of items (all prices)')\nsns.distplot(input_train['item_price'], bins=1000, ax=plot_price_axes[1]).set_title('Price of items (lower price)')\nplt.xlim(0, 10000)\nplt.show()\nsns.countplot('date_block_num', data=input_train).set_title('Number of items in Each Date-Block')\nplt.show()","2ac2ce1f":"for i in range(100):\n    query = input_train.loc[input_train['item_id'] == i]\n    if (len(query) < 50): continue\n    x = pd.to_datetime(query['date'])\n    y = query['item_price']\n    sns.lineplot(x, y).set_title('Price with time')","1fe8121f":"print(input_train['item_cnt_day'].unique())\ninput_train['item_cnt_day'].describe()","0cc2a9c1":"input_item_categories.head()","315d73e7":"print(\"Total Categories\", len(input_item_categories))","597dc003":"input_shops.head()","9bf64ff3":"output_sample.head()","b6f4859d":"temp_categories = input_item['item_category_id'].values\ninput_train['item_category_id'] = input_train.apply(lambda x: temp_categories[x['item_id']], axis=1)","b86035c8":"process_categories = pd.DataFrame(columns=('item_category_id', 'price_mean', 'items_count', 'price_min', 'price_quartile1', \n                                           'price_median', 'price_quartile3', 'price_max', 'std_dev'))\nfor i in range(len(input_item_categories)):\n    temp_query = input_train.loc[input_train['item_category_id'] == i]['item_price']\n    process_categories = process_categories.append(pd.Series([i, temp_query.mean(), temp_query.count(), temp_query.min(), temp_query.quantile(0.25), temp_query.median(), \n                                                              temp_query.quantile(0.75), temp_query.max(), temp_query.std()],\n                                                             index=process_categories.columns), ignore_index=True)\n\npd.set_option('display.max_rows', 100)\nprocess_categories.head(len(process_categories))","c7b4b987":"_, plot_category_axes = plt.subplots(2,4, figsize=(20, 10))\nsns.barplot(x='item_category_id', y='price_mean', data=process_categories, ax=plot_category_axes[0][0]).set_title('Mean Price')\nsns.barplot(x='item_category_id', y='items_count', data=process_categories, ax=plot_category_axes[0][1]).set_title('Number of Samples')\nsns.barplot(x='item_category_id', y='price_min', data=process_categories, ax=plot_category_axes[0][2]).set_title('Min Price')\nsns.barplot(x='item_category_id', y='price_quartile1', data=process_categories, ax=plot_category_axes[0][3]).set_title('First Quartile Price')\nsns.barplot(x='item_category_id', y='price_median', data=process_categories, ax=plot_category_axes[1][0]).set_title('Median Price')\nsns.barplot(x='item_category_id', y='price_quartile3', data=process_categories, ax=plot_category_axes[1][1]).set_title('Third Quartile Price')\nsns.barplot(x='item_category_id', y='price_max', data=process_categories, ax=plot_category_axes[1][2]).set_title('Max Price')\nsns.barplot(x='item_category_id', y='std_dev', data=process_categories, ax=plot_category_axes[1][3]).set_title('Price Standard Deviation')\nplt.show()","7512f850":"temp_train = input_train[input_train['date_block_num'] < input_train['date_block_num'].max()] \ntemp_valid = input_train[input_train['date_block_num'] == input_train['date_block_num'].max()]\nx_train, y_train = temp_train[[col for col in temp_train.columns if 'item_cnt_day' not in col]], temp_train['item_cnt_day']\nx_valid, y_valid = temp_valid[[col for col in temp_valid.columns if 'item_cnt_day' not in col]], temp_valid['item_cnt_day']\n\nprint('The Shapes are:', x_train.shape, y_train.shape, x_valid.shape, y_valid.shape)\nx_train = x_train.drop('date', axis=1)\nx_valid = x_valid.drop('date', axis=1)\nx_train.head()","3408622a":"z_train, p_train = x_train[[col for col in  x_train.columns if 'item_price' not in col]], x_train['item_price']\nz_valid, p_valid = x_valid[[col for col in  x_valid.columns if 'item_price' not in col]], x_valid['item_price']\nz_train.head()","dfd5321b":"from sklearn.ensemble import RandomForestClassifier\n\ndef forest_classifier(x_val, y_val, importance=True):\n    # Build a forest and compute the feature importances\n    forest = RandomForestClassifier(n_estimators=3, random_state=0)\n\n    forest.fit(x_val, y_val)\n    importances = forest.feature_importances_\n    std = np.std([tree.feature_importances_ for tree in forest.estimators_], axis=0)\n    indices = np.argsort(importances)[::-1]\n\n    # Print the feature ranking\n    print(\"Feature ranking:\")\n    for f in range(x_val.shape[1]):\n        print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n    # Plot the feature importances of the forest\n    plt.title(\"Feature importances\")\n    plt.bar(range(x_val.shape[1]), importances[indices], color=\"r\", yerr=std[indices], align=\"center\")\n    plt.xticks(range(x_val.shape[1]), indices)\n    plt.xlim([-1, x_val.shape[1]])\n    plt.show()\n    \n    return forest","aa118341":"from sklearn.ensemble import RandomForestRegressor\n\ndef forest_regressor(x_val, y_val, importance=True):\n    # Build a forest and compute the feature importances\n    forest = RandomForestRegressor(n_estimators=3, random_state=0)\n\n    forest.fit(x_val, y_val)\n    importances = forest.feature_importances_\n    std = np.std([tree.feature_importances_ for tree in forest.estimators_], axis=0)\n    indices = np.argsort(importances)[::-1]\n\n    # Print the feature ranking\n    print(\"Feature ranking:\")\n    for f in range(x_val.shape[1]):\n        print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n    # Plot the feature importances of the forest\n    plt.title(\"Feature importances\")\n    plt.bar(range(x_val.shape[1]), importances[indices], color=\"r\", yerr=std[indices], align=\"center\")\n    plt.xticks(range(x_val.shape[1]), indices)\n    plt.xlim([-1, x_val.shape[1]])\n    plt.show()\n    \n    return forest","0e299a95":"forest_1 = forest_regressor(z_train, p_train)","7467844b":"forest_2 = forest_regressor(x_train, y_train)","8e463ac4":"forest_3 = forest_regressor(z_train, y_train)","e44295de":"predict_valid = z_valid.copy()\npredict_valid['predicted_price'] = forest_1.predict(z_valid)\npredict_valid['predicted_cnt_1'] = forest_2.predict(predict_valid)\npredict_valid['predicted_cnt_2'] = forest_3.predict(z_valid)\npredict_valid['actual_price'] = p_valid\npredict_valid['actual_cnt'] = y_valid\npredict_valid.head(100)","878f33d6":"print(input_test.columns)\nprint(z_train.columns)","669b055c":"i_test, x_test = input_test['ID'], input_test[[col for col in input_test.columns if 'ID' not in col]]\nx_test.insert(0, 'date_block_num', input_train['date_block_num'].max() + 1)\nx_test.insert(3, 'item_category_id', input_test.apply(lambda x: temp_categories[x.loc['item_id']], axis=1))\nx_test.head()","b27b8bf4":"x_test['price'] = forest_1.predict(x_test)\nx_test['cnt'] = forest_2.predict(x_test)\nx_test.insert(0, 'ID', x_test.index)","d4bd7610":"x_test.head()","a402b358":"with open('submission.csv', 'w') as file:\n    file.write('ID,item_cnt_month' + '\\n')\n    for index, item in x_test.iterrows():\n        file.write(str(int(item['ID'])) + ',' + str(item['cnt']) + '\\n')","de0cb289":"with open('submission.csv', 'r') as file:\n    for i in range(100):\n        print(next(file), end='')","75ccc570":"### The Test Set","7084b771":"This is what the problem statement says about the provided files. Let's now start the exploration.\n* sales_train.csv - the training set. Daily historical data from January 2013 to October 2015.\n* test.csv - the test set. You need to forecast the sales for these shops and products for November 2015.\n* sample_submission.csv - a sample submission file in the correct format.\n* items.csv - supplemental information about the items\/products.\n* item_categories.csv - supplemental information about the items categories.\n* shops.csv - supplemental information about the shops.\n\nThe Following is a list of the Data Fields and what they represent\n* **ID** - an Id that represents a (Shop, Item) tuple within the test set\n* **shop_id** - unique identifier of a shop\n* **item_id** - unique identifier of a product\n* **item_category_id** - unique identifier of item category\n* **item_cnt_day** - number of products sold. You are predicting a monthly amount of this measure\n* **item_price** - current price of an item\n* **date** - date in format dd\/mm\/yyyy\n* **date_block_num** - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n* **item_name** - name of item\n* **shop_name** - name of shop\n* **item_category_name** - name of item category","e3d77ccf":"## Random Forest Classifier and Feature Importance","92e58050":"# Baseline Classifier Model","89afdfe6":"Of course, we have a single target a real number prediction for the expected number of sales of the product.","e2a88ac0":"## Training and Validation Sets","0f4908a5":"For now, I am just outputting the **Random Forest Classifier** predictions. Will update to a better model in the future versions of the notebook.","aa6b9d96":"This first file gives us a list of all the items, their names, ids, and corresponding **Category IDs**. There are a total of 84 item categories, some having way more items than the others. Some have about 5000 items, some have as few as 1.","d49a24e4":"### Items and Categories","a64309e8":"Here is the training set for the sales data. It has, for each unique shop-item pair. This data **unlike the test set, is not uniformly sampled from all shops**. Also, this has **way more examples of low-price products than high-price products**.","3560dba5":"We need to get some estimate of how important each of the features are to the result. So we train a bunch of Random Forest regressors and see the weights they output.","675193c6":"### Item Category and Shops Names","9fd96f69":"## Get the Column and Print to File","2c5377a4":"### Training Data","2cc41c8f":"### Running the Regressors and Plotting Importance","81072474":"Following is the test data input, it's a list of all the items and the shops to which it belongs. All the **shops are equally sampled** for their items. Each *shop-item pair in the test set is unique*.","1fc96806":"## In shape to make Predictions","bb21f093":"Output one final `submission.csv`. Job Complete!","96ef8fbf":"# Loading and Analyzing the Input Data","8931764d":"This is just a list of names, maybe we can further improve our results with some complex text processing to recognize classes of products, but this is mostly additional useless information. Nevertheless, good for fault finding when we are close to done.","9473c663":"## Making the PREDICTIONS!!!","6863b008":"# The Final Output","225dd3de":"## Loading the data into Pandas dataframes","9ac0e262":"Just adding in the extra columns, date-block and item-category from the other files so that our Model can make it's predictions","2227a7ec":"# Data Insights","3476a0bb":"All the predictions are numberic. Forest-1 and Forest-2 are a combination, Forest-1 predicts the cost and Forest-2 predicts the count of sale. Forest-3 tries to make the prediction in one single step.","b8e71865":"Here, we are splitting the data into the training set which is the first 32 months, and the validation set which is all the data from the last month.","c95a5d7b":"## Looking through the files","36e23aee":"## Understanding Each Category"}}