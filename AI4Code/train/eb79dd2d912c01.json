{"cell_type":{"40242cd9":"code","955b85f0":"code","9d0f273b":"code","8dc3b2fc":"code","b02099e7":"code","09413ecd":"code","683314fc":"code","cab9bc0e":"code","0748023d":"code","9d0f71c1":"code","4f41261b":"code","e85dcde7":"code","4b64048f":"code","ae1a17c8":"code","1fdb3896":"code","d31caa8e":"code","1444b4f4":"code","079d9738":"code","3e98fd42":"code","9bdb4e6b":"code","7b8cb501":"code","034d81f1":"code","c34da9eb":"code","1760a1c6":"code","83579fdc":"code","d1b1ccf6":"code","df130663":"code","1a65d5de":"code","7f59fa75":"code","18786e25":"code","636bb0c8":"code","70973841":"code","fcb185e1":"code","8fd3c0c9":"code","c9382205":"markdown","83971c87":"markdown","46c836d1":"markdown","a0419156":"markdown","8447c9c0":"markdown","ec0a6952":"markdown","1e8d8911":"markdown","d2bbd01c":"markdown","9cfafda9":"markdown","b21704e6":"markdown","7e2254de":"markdown","87990c60":"markdown","e751fa27":"markdown","2542d2d4":"markdown","7baad46e":"markdown"},"source":{"40242cd9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","955b85f0":"cd = pd.read_csv(\"..\/input\/CancerData.csv\")","9d0f273b":"cd.head()","8dc3b2fc":"import seaborn as sns \nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')","b02099e7":"dv = cd.diagnosis         # dependent variable                 # M or B \nlist = ['id','diagnosis']\niv = cd.drop(list,axis = 1 ) # independent variable\niv.head()","09413ecd":"ax = sns.countplot(dv,label=\"Count\")\nplt.grid(True,color='G')","683314fc":"B, M = dv.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","cab9bc0e":"y=dv\nx=iv\ndata_n_2 = (iv - iv.mean()) \/ (iv.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\", aspect=9)\nplt.grid(True,color='G')\nplt.xticks(rotation=90)","0748023d":"sns.catplot(x=\"features\", y=\"value\", hue=\"diagnosis\", aspect=.6,\n            kind=\"swarm\", data=data);","9d0f71c1":"sns.catplot(x=\"features\", y=\"value\", hue=\"diagnosis\", palette=\"ch:.25\", data=data, aspect=3);","4f41261b":"sns.catplot(x=\"features\", y=\"value\", hue=\"diagnosis\", kind=\"bar\", data=data, aspect=3);","e85dcde7":"sns.catplot(x=\"features\", y=\"value\", hue=\"diagnosis\", jitter=False, data=data, aspect=3);","4b64048f":"sns.catplot(x=\"features\", y=\"value\", data=data, legend=True, aspect=3);","ae1a17c8":"sns.set(rc={'figure.figsize':(1001.7,8.27)})\nsns.catplot(x=\"features\", y=\"value\", data=data,kind=\"box\", legend=True , aspect=3);","1fdb3896":"sns.catplot(x=\"features\", y=\"value\", hue=\"diagnosis\", kind=\"box\", data=data, aspect=3);","d31caa8e":"%matplotlib inline\nplt.figure(figsize=(20, 5))\nsns.catplot(x=\"features\", y=\"value\", kind=\"boxen\",\n            data=data, aspect=3);","1444b4f4":"g = sns.factorplot(x=\"features\", y=\"value\", hue=\"diagnosis\",\n        data=data, kind=\"box\", aspect=3)","079d9738":"sns.set_style('ticks')\nsns.violinplot(data=data, inner=\"points\", ax=ax, aspect=3)    \nsns.despine()","3e98fd42":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=90)","9bdb4e6b":"data.head()","7b8cb501":"x.head()","034d81f1":"g = sns.jointplot(x.loc[:,'texture_mean'], x.loc[:,'smoothness_mean'], data=cd, kind=\"hex\", color=\"R\")","c34da9eb":"sns.jointplot(x.loc[:,'texture_mean'], x.loc[:,'smoothness_mean'], kind=\"regg\", color=\"G\")","1760a1c6":"sns.jointplot(x.loc[:,'concavity_worst'], x.loc[:,'concave points_worst'], kind=\"regg\", color=\"#ce1414\")","83579fdc":"y.head()","d1b1ccf6":"import plotly.express as px\nfig = px.scatter(x, x=x.loc[:,'concavity_worst'], y=x.loc[:,'concave points_worst'],log_x=True, size_max=600)\nfig.show()","df130663":"sns.set(style=\"white\")\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3)\ng = g.add_legend()","1a65d5de":"df = cd.loc[:,['diagnosis','radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False, hue=\"diagnosis\")\ng = g.map_offdiag(plt.scatter)\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3)\ng = g.add_legend()","7f59fa75":"df = cd.loc[:,['diagnosis','radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False, hue=\"diagnosis\")\ng = g.map(sns.scatterplot, linewidths=1, edgecolor=\"w\", s=40)\ng = g.add_legend()","18786e25":"import time\nfrom subprocess import check_output","636bb0c8":"sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\ntic = time.time()\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\n\nplt.xticks(rotation=90)","70973841":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","fcb185e1":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(14,12))\n\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data = data, ax = axis1)\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data = data, split = True, ax = axis2)\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data = data, ax = axis3)\n","8fd3c0c9":"fig, saxis = plt.subplots(2, 3,figsize=(16,12))\n\nsns.barplot(x=\"features\", y=\"value\", data=data, ax = saxis[0,0])\nsns.barplot(x=\"features\", y=\"value\", order=[1,2,3], data=data, ax = saxis[0,1])\nsns.barplot(x=\"features\", y=\"value\", order=[1,0], data=data, ax = saxis[0,2])\n\nsns.pointplot(x=\"features\", y=\"value\",  data=data, ax = saxis[1,0])\nsns.pointplot(x=\"features\", y=\"value\",  data=data, ax = saxis[1,1])\nsns.pointplot(x=\"features\", y=\"value\", data=data, ax = saxis[1,2])","c9382205":"# Violin Plot ->\nA violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","83971c87":"# Box Plot ->\nThe box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.\n","46c836d1":"# Data Visualization : Cancer Data","a0419156":"# Factor Plot ->","8447c9c0":"# Joint Plot ->","ec0a6952":"# Correlation Map","1e8d8911":"# Pair Grid Plot ->\nSubplot grid for plotting pairwise relationships in a dataset.\n\nThis class maps each variable in a dataset onto a column and row in a grid of multiple axes. Different axes-level plotting functions can be used to draw bivariate plots in the upper and lower triangles, and the the marginal distribution of each variable can be shown on the diagonal.","d2bbd01c":"# Joint Plot ->","9cfafda9":"# Scatter Plot ->\nA scatter plot is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data. If the points are coded, one additional variable can be displayed.","b21704e6":"Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.","7e2254de":"# Cat Plot ->","87990c60":"### Color the points using a categorical variable","e751fa27":"# Count plot ->\nA count plot can be thought of as a histogram across a categorical, instead of quantitative, variable. The basic API and options are identical to those for barplot(), so you can compare counts across nested variables.","2542d2d4":"# Swarm Plot ->","7baad46e":"#  Seaborn: Statistical Data Visualization"}}