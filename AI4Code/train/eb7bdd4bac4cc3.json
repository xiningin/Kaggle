{"cell_type":{"668f8452":"code","823f4d06":"code","bcfca1af":"code","2514a079":"code","15b5873d":"code","2950b8d2":"code","1bd8f967":"code","83dbb183":"code","2650904b":"code","e10ba573":"code","d805d930":"code","6b3849e0":"code","523a8397":"code","b0c6abd3":"code","ff3112c3":"code","a85814a4":"code","f0198370":"code","e62bb9af":"code","9c24fa6a":"code","9c7ef534":"code","77c3c894":"code","875dcc6b":"code","da07a19c":"code","5baae621":"code","96e73d22":"code","d602de9b":"code","6817ffb1":"code","54bc2526":"code","f8a262f5":"code","37c6e5db":"code","979daeaa":"code","e23bd3a9":"code","e7f852dd":"code","49fcb5a8":"code","eca9a128":"code","45562746":"code","0b6b760f":"code","e7bf1c42":"code","71faaf28":"code","f8246b9e":"code","b80cf7c7":"markdown","4f2f5c30":"markdown","8232feba":"markdown","2eae6d7c":"markdown","ee2a5fbd":"markdown","7967b8ee":"markdown","0bdbbd0c":"markdown","a85cfbc2":"markdown","09716c03":"markdown","8f2148ab":"markdown","39c4355b":"markdown","d14b9497":"markdown","1711cc70":"markdown","7a19b8e7":"markdown","1b4cf495":"markdown","1dabefaa":"markdown","a0c2ab68":"markdown","1af28ba6":"markdown","8b4292c3":"markdown","99be29c2":"markdown","f199885e":"markdown","c6cf9453":"markdown","a77b1621":"markdown","f744771f":"markdown","b0e6cdcd":"markdown","50ba69bf":"markdown","816f6d07":"markdown","8f0362d2":"markdown","479e6b28":"markdown","56aa7b57":"markdown","86d388fe":"markdown"},"source":{"668f8452":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","823f4d06":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd \nimport plotly.express as px\nimport math\n%matplotlib inline ","bcfca1af":"df = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndf_line = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\n\ndf_open = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\n\n\n#preprocess\ndf_line = df_line.iloc[:,:-6]\ndf_line.drop(['Unnamed: 3',\"source\",\"link\"],axis=1,inplace=True)","2514a079":"confirmed = df.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths = df.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered = df.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['ObservationDate'], \n                         y=confirmed['Confirmed'],\n                         mode='lines+markers',\n                         name='Confirmed',\n                         line=dict(color='blue', width=2)\n                        ))\nfig.add_trace(go.Scatter(x=deaths['ObservationDate'], \n                         y=deaths['Deaths'],\n                         mode='lines+markers',\n                         name='Deaths',\n                         line=dict(color='Red', width=2)\n                        ))\nfig.add_trace(go.Scatter(x=recovered['ObservationDate'], \n                         y=recovered['Recovered'],\n                         mode='lines+markers',\n                         name='Recovered',\n                         line=dict(color='Green', width=2)\n                        ))\nfig.update_layout(\n    title='Worldwide Corona Virus Cases - Confirmed, Deaths, Recovered (Line Chart)',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Number of Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    )\n)\nfig.show()\n","15b5873d":"# China\n\nchina = df[df[\"Country\/Region\"] == \"Mainland China\"]\nconfirmed_china = china.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths_china = china.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered_china = china.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n# USA\nusa = df[df[\"Country\/Region\"] == \"US\"]\nconfirmed_usa = usa.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths_usa = usa.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered_usa = usa.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n# \u0131taly\n\nitaly = df[df[\"Country\/Region\"] == \"Italy\"]\nconfirmed_italy = italy.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths_italy = italy.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered_italy = italy.groupby('ObservationDate').sum()['Recovered'].reset_index()\n\n# Germany\n\ngermany = df[df[\"Country\/Region\"] == \"Germany\"]\nconfirmed_germany = germany.groupby('ObservationDate').sum()['Confirmed'].reset_index()\ndeaths_germany =germany.groupby('ObservationDate').sum()['Deaths'].reset_index()\nrecovered_germany = germany.groupby('ObservationDate').sum()['Recovered'].reset_index()","2950b8d2":"# Visualization\nplt.rc('ytick', labelsize=20) \nplt.rc('xtick', labelsize=10)\nfig, axes = plt.subplots(2,2,sharex=True,figsize=(20,20))\n\naxes[0,0].plot(confirmed_china['ObservationDate'],confirmed_china['Confirmed'],label=\"Confirmed\",color=\"Blue\",linewidth=5)\naxes[0,0].plot(recovered_china['ObservationDate'],recovered_china['Recovered'],label=\"Recovered\",color=\"Green\",linewidth=4)\naxes[0,0].plot(deaths_china['ObservationDate'],deaths_china['Deaths'],label=\"Deaths\",color=\"Red\",linewidth=4)\naxes[0,0].legend(prop={'size': 20},shadow=True)\naxes[0,0].set_title(\"China Corona Virus Cases - Confirmed, Deaths, Recovered\",weight=\"bold\",fontsize=15)\n\n\naxes[0,1].plot(confirmed_usa['ObservationDate'],confirmed_usa['Confirmed'],label=\"Confirmed\",color=\"Blue\",linewidth=5)\naxes[0,1].plot(recovered_usa['ObservationDate'],recovered_usa['Recovered'],label=\"Recovered\",color=\"Green\",linewidth=4)\naxes[0,1].plot(deaths_usa['ObservationDate'],deaths_usa['Deaths'],label=\"Deaths\",color=\"Red\",linewidth=4)\naxes[0,1].legend(prop={'size': 20},shadow=True)\naxes[0,1].set_title(\"USA Corona Virus Cases - Confirmed, Deaths, Recovered\",weight=\"bold\",fontsize=15)\n\n\naxes[1,0].plot(confirmed_italy['ObservationDate'],confirmed_italy['Confirmed'],label=\"Confirmed\",color=\"Blue\",linewidth=5)\naxes[1,0].plot(recovered_italy['ObservationDate'],recovered_italy['Recovered'],label=\"Recovered\",color=\"Green\",linewidth=4)\naxes[1,0].plot(deaths_italy['ObservationDate'],deaths_italy['Deaths'],label=\"Deaths\",color=\"Red\",linewidth=4)\naxes[1,0].legend(loc='upper left', bbox_to_anchor=(0, 1),\n           fancybox=True, shadow=True,prop={'size': 20})\naxes[1,0].set_title(\"Italy Corona Virus Cases - Confirmed, Deaths, Recovered\",weight=\"bold\",fontsize=15)\n\naxes[1,1].plot(confirmed_germany['ObservationDate'],confirmed_germany['Confirmed'],label=\"Confirmed\",color=\"Blue\",linewidth=5)\naxes[1,1].plot(recovered_germany['ObservationDate'],recovered_germany['Recovered'],label=\"Recovered\",color=\"Green\",linewidth=4)\naxes[1,1].plot(deaths_germany['ObservationDate'],deaths_germany['Deaths'],label=\"Deaths\",color=\"Red\",linewidth=4)\naxes[1,1].legend(loc='upper left', bbox_to_anchor=(0, 1),\n           fancybox=True, shadow=True,prop={'size': 20})\naxes[1,1].set_title(\"Germany Corona Virus Cases - Confirmed, Deaths, Recovered\",weight=\"bold\",fontsize=15)\n\n\naxes[1][0].xaxis.set_tick_params(rotation=90)\naxes[1][1].xaxis.set_tick_params(rotation=90)\n\nplt.show()","1bd8f967":"deaths = df_line[df_line[\"death\"]!=\"0\"]\n\nprint(\"Average age of death: \" + str(int(round(deaths[\"age\"].mean()))))\nprint(\"\\n=> One of the biggest reasons for the high average age of death is low immunity of elderly people.\")","83dbb183":"male_number = deaths[\"gender\"].value_counts()[\"male\"]\n\nfemale_number = deaths[\"gender\"].value_counts()[\"female\"]\n\ntotal = female_number  + male_number\n\nprint(\"% of deaths by gender => Male: %{0}, Female: %{1}\".format(int(round(male_number*100\/total)),int(round(female_number*100\/total))))","2650904b":"only_death_date = deaths[df_line[\"death\"]!=\"1\"]\n\nonly_death_date.dropna(subset=['symptom_onset'],inplace=True)\n\nonly_death_date.reset_index(inplace=True)\n\nonly_death_date[\"death_time(day)\"] = (pd.to_datetime(only_death_date['death']) - pd.to_datetime(only_death_date['symptom_onset']))\n\nonly_death_date[\"death_time(day)\"] = only_death_date[\"death_time(day)\"].apply(lambda x: int(x.days))\n\n\nonly_death_date = only_death_date[[\"location\",\"country\",\"gender\",\"age\",\"symptom_onset\",\"death\",\"symptom\",\"death_time(day)\"]]\n\nonly_death_date.drop([\"location\"],axis=1,inplace=True)\n# there are not enough data, lets use df_open dataset to gain more data.\n\ndf_open[\"outcome\"] = df_open[\"outcome\"].apply(lambda x:\"death\" if x== \"died\" else x)\n\ndeaths_df2 = df_open[df_open[\"outcome\"]==\"death\"]\ndeaths_df2.dropna(subset=['date_death_or_discharge',\"date_onset_symptoms\"],inplace=True)\n\ndeaths_df2 = deaths_df2[[\"province\",\"country\",\"sex\",\"age\",\"date_onset_symptoms\",\"symptoms\",'date_death_or_discharge']]\ndeaths_df2.reset_index(inplace=True)\n\ndeaths_df2['date_death_or_discharge'][0] = \"02.09.2020\"\ndeaths_df2[\"death_time(day)\"] = (pd.to_datetime(deaths_df2['date_death_or_discharge']) - pd.to_datetime(deaths_df2['date_onset_symptoms']))\ndeaths_df2[\"death_time(day)\"] = deaths_df2[\"death_time(day)\"].apply(lambda x: int(x.days))\n\ndeaths_df2[\"country\"][2] =deaths_df2[\"province\"][2]\ndeaths_df2.drop([\"index\",\"province\"],axis=1,inplace=True)\n\n\ndeaths_df2.columns = [\"country\",\"gender\",\"age\",\"symptom_onset\",\"symptom\",\"death\",\"death_time(day)\"]\n\nonly_death_date = only_death_date.append(deaths_df2)\nonly_death_date.reset_index(inplace=True)\n\nonly_death_date.drop([\"index\"],axis=1,inplace=True)","e10ba573":"import seaborn as sns\nonly_death_date = only_death_date[['country','age','gender','symptom_onset','death','death_time(day)','symptom']]\n\ncm = sns.light_palette(\"red\", as_cmap=True)\ns = only_death_date .style.background_gradient(cmap=cm)\ns","d805d930":"print(\"Average death time after symptom onset:{0} days\".format(round(only_death_date[\"death_time(day)\"].mean())))","6b3849e0":"print(\"Average death time after symptom onset by gender (Note: There is not enough data to make a good inference.)\\n=> male:{} days, female:{} days\"\n      .format(int(only_death_date.groupby(\"gender\").mean()[\"death_time(day)\"][\"male\"]),int(only_death_date.groupby(\"gender\").mean()[\"death_time(day)\"][\"female\"])))","523a8397":"recovered = df_line[df_line[\"recovered\"] != \"0\"]\n\nprint(\"Average recovered age: \" + str(round(recovered[\"age\"].mean())))","b0c6abd3":"male_number = recovered[\"gender\"].value_counts()[\"male\"]\n\nfemale_number = recovered[\"gender\"].value_counts()[\"female\"]\n\ntotal = female_number  + male_number\n\nprint(\"% of recovered by gender => Male: %{0}, Female: %{1}\".format(int(round(male_number*100\/total)),int(round(female_number*100\/total))))\nprint(\"\\nImportant Note: As we have analyzed before, the number of infected male is higher than the number of infected female. So it is necessary to be careful when evaluating this result.\")","ff3112c3":"recovered = recovered[recovered[\"recovered\"] != \"1\"]\n\nrecovered = recovered[[ 'reporting date', 'country', 'gender', 'age','recovered','symptom']]\n\n# deleting wrong entries (like recovered date: 12\/30\/1899 etc.)\nrecovered.reset_index(inplace=True,drop=True)\n\nfor index,date in enumerate(recovered[\"recovered\"].values):\n    if(date.split(\"\/\")[2] == \"1899\"):\n        recovered.drop(index,axis=0,inplace=True)\n\n    \nrecovered[\"recover_time\"] = (pd.to_datetime(recovered['recovered']) - pd.to_datetime(recovered['reporting date']))\nrecovered[\"recover_time\"] = recovered[\"recover_time\"].apply(lambda x: int(x.days))\n\n\n#  some fixes\nrecovered = recovered[recovered[\"recover_time\"]>=0]\n\nrecovered[\"recover_time\"] = recovered[\"recover_time\"].apply(lambda x: 1 if x== 0 else x)\n\nrecovered = recovered[['country', 'gender', 'age','reporting date', 'recovered','recover_time', 'symptom']]\nprint(\"Average treatment time(days): {0}\".format(round(recovered[\"recover_time\"].mean())))","a85814a4":"print(\"\\nAverage treatment time(days) (by gender) => Male: {0} Female: {1}\"\n      .format(round(recovered.groupby(\"gender\").mean()[\"recover_time\"][\"male\"])\n      ,round(recovered.groupby(\"gender\").mean()[\"recover_time\"][\"female\"])))","f0198370":"recovered_by_country = recovered.groupby(\"country\").mean()\n\nrecovered_by_country[\"age\"] = recovered_by_country[\"age\"].apply(lambda x:int(x) if(math.isnan(x)==False) else x)\n\nrecovered_by_country[\"recover_time\"] = recovered_by_country[\"recover_time\"].apply(lambda x:int(x) if(math.isnan(x)==False) else x)\n\nrecovered_by_country.rename(columns={'age':\"avarage age\",\"recover_time\":\"avarage recover time(days)\"},inplace=True)\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ns2 = recovered_by_country.style.background_gradient(cmap=cm)\ns2","e62bb9af":"def set_interval(age):\n    if(age>0 and age<=10):\n        return \"0-10\"\n    elif(age> 10 and age<=18):\n        return \"10-18\"\n    elif(age>18 and age <30 ):\n        return \"18-30\"\n    elif(age>=30 and age <60):\n        return \"30-60\"\n    elif(math.isnan(age)):\n        return np.nan\n    else :\n        return \"60+\"\n    \n\nrecovered[\"age_interval\"] = recovered[\"age\"].apply(set_interval)\n\nrecover_by_age = recovered.groupby(\"age_interval\").mean()[\"recover_time\"]\n\nrecover_by_age = recover_by_age.astype(int)\n\nrecover_by_age = pd.DataFrame(recover_by_age.values,index =recover_by_age.index,columns=[\"avg recover time(days)\"])\n\ncm = sns.light_palette(\"seagreen\", as_cmap=True)\ns3 = recover_by_age.style.background_gradient(cmap=cm)\ns3","9c24fa6a":"# lets use df_open\n\nsymptoms = df_open.copy()\nsymptoms.dropna(subset=['symptoms'],inplace=True)\n\nsymptoms.drop(11233,axis=0,inplace=True)\n\n# creating symptoms dict\n\nsymp_dict = {\"fever\":0,\"cough\":0,\"pneumonia\":0,\"fatigue\":0,\"headache\":0,\n             \"chills\":0,\"sputum\":0,\"joint_pain\":0,\"diarrhea\":0,\n             \"runny_nose\":0,\"malaise\":0,\"vomiting\":0,\"nausea\":0}\n\nfor sym in symptoms['symptoms'].values:\n    if(\"fever\" in sym.lower()):\n        symp_dict[\"fever\"]+=1\n    if(\"cough\" in sym.lower()):\n        symp_dict[\"cough\"]+=1 \n    if(\"pneumonitis\" in sym.lower() or \"pneumonia\" in sym.lower() ):\n        symp_dict[\"pneumonia\"]+=1        \n    if(\"fatigue\" in sym.lower()):\n        symp_dict[\"fatigue\"]+=1 \n    if(\"headache\" in sym.lower()):\n        symp_dict[\"headache\"]+=1    \n        \n    if(\"chills\" in sym.lower()):\n        symp_dict[\"chills\"]+=1 \n    if(\"sputum\" in sym.lower()):\n        symp_dict[\"sputum\"]+=1\n    if(\"joint\" in sym.lower()):\n        symp_dict[\"joint_pain\"]+=1\n        \n    if(\"diar\" in sym.lower()):\n        symp_dict[\"diarrhea\"]+=1 \n        \n    if(\"runny\" in sym.lower()):\n        symp_dict[\"runny_nose\"]+=1 \n        \n    if(\"mala\" in sym.lower()):\n        symp_dict[\"malaise\"]+=1 \n       \n    if(\"vomit\" in sym.lower()):\n        symp_dict[\"vomiting\"]+=1      \n    if(\"nau\" in sym.lower()):\n        symp_dict[\"nausea\"]+=1         \n\nsympts = pd.DataFrame(data = symp_dict.items(),columns=[\"symptom\",\"symptom_count\"])  # dict to dataframe\n\nsympts.set_index(\"symptom\",inplace=True)\n        \nsympts[\"Occurance Rate\"] = sympts[\"symptom_count\"]\/symptoms.shape[0]*100\n\nsympts[\"Occurance Rate\"] = sympts[\"Occurance Rate\"].apply(lambda x: \"% \"+str(int(round(x))))\n\ncm = sns.light_palette(\"#c90000\", as_cmap=True)\ns = sympts.style.background_gradient(cmap=cm)\ns","9c7ef534":"after_days = df_open.dropna(subset=[\"date_onset_symptoms\",\"date_admission_hospital\"])\n\n\nafter_days = after_days[[\"country\",\"age\",\"sex\",\"outcome\",\"date_onset_symptoms\",\"date_admission_hospital\"]]\n\n\nafter_days.drop([476,477,478,479,480,1379,101],inplace=True,axis=0) # deleting some rows\n\nafter_days[\"hospital_admission_time\"]  = (pd.to_datetime(after_days[\"date_admission_hospital\"],utc=True,dayfirst=True) - pd.to_datetime(after_days[\"date_onset_symptoms\"],utc=True,dayfirst=True))\n\nafter_days[\"hospital_admission_time\"] = after_days[\"hospital_admission_time\"].apply(lambda x: int(x.days))\n\n\nafter_days = after_days[after_days[\"hospital_admission_time\"]>=0]\nafter_days.reset_index(inplace=True,drop=True)\n\nafter_days[\"hospital_admission_time\"] = after_days[\"hospital_admission_time\"].apply(lambda x: 1 if x==0 else x)\n\n","77c3c894":"cm = sns.light_palette(\"#c99100\", as_cmap=True)\ns = after_days.sample(n=10).style.background_gradient(cmap=cm)\ns","875dcc6b":"print(\"\\nAverage hospital admission time(days) after symptoms on set:{0} \".format(int(round(after_days[\"hospital_admission_time\"].mean()))))","da07a19c":"admission_by_country = after_days.groupby(\"country\").mean()[\"hospital_admission_time\"].apply(lambda x: int(round(x)) )\nadmission_by_country = pd.DataFrame(admission_by_country)\nadmission_by_country.columns = [\"Average hospital_admission_time (day)\"]\ncm = sns.light_palette(\"#ed6e6d\", as_cmap=True)\ns = admission_by_country.sample(n=10).style.background_gradient(cmap=cm)\ns","5baae621":"df = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")","96e73d22":"total_confirmed = df.groupby('Country\/Region')['3\/14\/20'].sum()\n\ntotal_confirmed = pd.DataFrame(data=total_confirmed,index=total_confirmed.index)\n\ntotal_confirmed.columns = [\"Total Confirmed\"]\n\ntotal_confirmed.sort_values(\"Total Confirmed\",axis=0,inplace=True,ascending=False)\n\n# top five\ncm = sns.light_palette(\"#5c60c7\", as_cmap=True)\ns = total_confirmed.head().style.background_gradient(cmap=cm)\ns","d602de9b":"ax1 = total_confirmed[0:10].plot(kind=\"barh\",colormap=\"coolwarm\",width=0.7,stacked=True,figsize=(10,10))\nax1.set_title(\"Top 10 Confirmed Case Count by Country\",fontweight=\"bold\")\nax1.set_xlabel(\"Total Confirmed\")\n\nfor p in ax1.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    if(width<4000):\n        ax1.annotate(str(int(width)), xy=(left+3*width, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")\n    else:\n        ax1.annotate(str(int(width)), xy=(left+width\/2, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")","6817ffb1":"df.drop([104,105],axis=0,inplace=True) # removing duplicate records\ndf[\"Province\/State\"].fillna(df[\"Country\/Region\"],inplace=True)\n\ntotal_confirmed = pd.DataFrame(df.groupby([\"Country\/Region\",'Province\/State'])['3\/14\/20'].sum())\n\ntotal_confirmed.columns = [\"Total Confirmed\"]\n\ntotal_confirmed[\"Lat\"] = np.nan\ntotal_confirmed[\"Long\"] = np.nan\n\n\n\nfor loc in total_confirmed.index:\n    \n    temp = df[(df[\"Country\/Region\"] == loc[0]) & (df[\"Province\/State\"]== loc[1])]\n    total_confirmed[\"Lat\"][loc] = temp[\"Lat\"]\n    total_confirmed[\"Long\"][loc] = temp[\"Long\"]\n\n\ntotal_confirmed = total_confirmed[total_confirmed[\"Total Confirmed\"]>0]     ","54bc2526":"\nfig = px.density_mapbox(total_confirmed, \n                        lat=\"Lat\", \n                        lon=\"Long\", \n                        hover_name=total_confirmed.index.get_level_values(1), \n                        hover_data=[\"Total Confirmed\"], \n                        color_continuous_scale=\"Portland\",\n                        radius=7, \n                        zoom=1,height=600,width=1200)    \nfig.update_layout(title=\"World Wide Corona Virus Cases Confirmed\",\n                  font=dict(family=\"Courier New, monospace\",\n                            size=18,\n                            color=\"#7f7f7f\")\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","f8a262f5":"df = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")","37c6e5db":"# \u00fclkelere g\u00f6re toplam \u00f6l\u00fcm say\u0131lar\u0131\n\ntotal_deaths = df.groupby('Country\/Region')['3\/14\/20'].sum()\n\ntotal_deaths = pd.DataFrame(data=total_deaths,index=total_deaths.index)\n\ntotal_deaths.columns = [\"Total Deaths\"]\n\ntotal_deaths.sort_values(\"Total Deaths\",axis=0,inplace=True,ascending=False)\n\n# top five\ncm = sns.light_palette(\"#cb504e\", as_cmap=True)\ns = total_deaths.head().style.background_gradient(cmap=cm)\ns","979daeaa":"# Top 10 country\n\nax1 = total_deaths[0:10].plot(kind=\"barh\",colormap=\"Set1\",width=0.7,stacked=True,figsize=(10,10))\nax1.set_title(\"Top 10 Death Count by Country\",fontweight=\"bold\")\nax1.set_xlabel(\"Total Deaths\")\n\nfor p in ax1.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    if(width<60):\n        ax1.annotate(str(int(width)), xy=(left+3*width+10, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")\n    else:\n        ax1.annotate(str(int(width)), xy=(left+width\/2, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")","e23bd3a9":"df.drop([104,105],axis=0,inplace=True) # dublike kay\u0131tlar \ndf[\"Province\/State\"].fillna(df[\"Country\/Region\"],inplace=True)\n\ntotal_deaths = pd.DataFrame(df.groupby([\"Country\/Region\",'Province\/State'])['3\/14\/20'].sum())\n\ntotal_deaths.columns = [\"Total Deaths\"]\n\ntotal_deaths[\"Lat\"] = np.nan\ntotal_deaths[\"Long\"] = np.nan\n\n\nfor loc in total_deaths.index:\n    temp = df[(df[\"Country\/Region\"] == loc[0]) & (df[\"Province\/State\"]== loc[1])]\n    total_deaths[\"Lat\"][loc] = temp[\"Lat\"]\n    total_deaths[\"Long\"][loc] = temp[\"Long\"]\n\n\ntotal_deaths = total_deaths[total_deaths[\"Total Deaths\"]>0]   ","e7f852dd":"fig = px.density_mapbox(total_deaths, \n                        lat=\"Lat\", \n                        lon=\"Long\", \n                        hover_name=total_deaths.index.get_level_values(1), \n                        hover_data=[\"Total Deaths\"], \n                        color_continuous_scale=\"Portland\",\n                        radius=8, \n                        zoom=1,height=600,width=1200)    \nfig.update_layout(title=\"World Wide Corona Virus Death Cases\",\n                  font=dict(family=\"Courier New, monospace\",\n                            size=18,\n                            color=\"#7f7f7f\")\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","49fcb5a8":"df = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","eca9a128":"# all world\n\ntotal_recovered = df.groupby('Country\/Region')['3\/14\/20'].sum()\n\ntotal_recovered = pd.DataFrame(data=total_recovered,index=total_recovered.index)\n\ntotal_recovered.columns = [\"Total Recovered\"]\n\ntotal_recovered.sort_values(\"Total Recovered\",axis=0,inplace=True,ascending=False)\n\n\n# top five\ncm = sns.light_palette(\"#68a05f\", as_cmap=True)\ns = total_recovered.head().style.background_gradient(cmap=cm)\ns","45562746":"# Top 10 country\n\nax1 = total_recovered[0:10].plot(kind=\"barh\",colormap=\"summer\",width=0.7,stacked=True,figsize=(10,10))\nax1.set_title(\"Top 10 Recovered Count by Country\",fontweight=\"bold\")\nax1.set_xlabel(\"Total Recovered\")\n\nfor p in ax1.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    if(width<2000):\n        ax1.annotate(str(int(width)), xy=(left+4*width+5, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")\n    else:\n        ax1.annotate(str(int(width)), xy=(left+width\/2, bottom+height\/2),ha='center', va='center',fontweight=\"bold\")","0b6b760f":"df.drop([104,105],axis=0,inplace=True) # dublike kay\u0131tlar \n\ndf[\"Province\/State\"].fillna(df[\"Country\/Region\"],inplace=True)\n\ntotal_recovered = pd.DataFrame(df.groupby([\"Country\/Region\",'Province\/State'])['3\/14\/20'].sum())\n\ntotal_recovered.columns = [\"Total Recovered\"]\n\ntotal_recovered[\"Lat\"] = np.nan\ntotal_recovered[\"Long\"] = np.nan\n\nfor loc in total_recovered.index:\n    temp = df[(df[\"Country\/Region\"] == loc[0]) & (df[\"Province\/State\"]== loc[1])]\n    total_recovered[\"Lat\"][loc] = temp[\"Lat\"]\n    total_recovered[\"Long\"][loc] = temp[\"Long\"]\n\n\ntotal_recovered = total_recovered[total_recovered[\"Total Recovered\"]>0]","e7bf1c42":"for loc in total_recovered.index:\n    temp = df[(df[\"Country\/Region\"] == loc[0]) & (df[\"Province\/State\"]== loc[1])]\n    total_recovered[\"Lat\"][loc] = temp[\"Lat\"]\n    total_recovered[\"Long\"][loc] = temp[\"Long\"]\n\n\ntotal_recovered = total_recovered[total_recovered[\"Total Recovered\"]>0]     \n \nfig = px.density_mapbox(total_recovered, \n                        lat=\"Lat\", \n                        lon=\"Long\", \n                        hover_name=total_recovered.index.get_level_values(1), \n                        hover_data=[\"Total Recovered\"], \n                        color_continuous_scale=\"Portland\",\n                        radius=7, \n                        zoom=1,height=600,width=1200)    \nfig.update_layout(title=\"World Wide Corona Virus Cases Deaths\",\n                  font=dict(family=\"Courier New, monospace\",\n                            size=18,\n                            color=\"#7f7f7f\")\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","71faaf28":"df = pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\",parse_dates=['Last Update'])\n\ndf_confirmed =  pd.read_csv(r\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\n\n\ndf.rename(columns={'ObservationDate':'Date'}, inplace=True)\n\n\ndf_confirmed = df_confirmed[[\"Province\/State\",\"Lat\",\"Long\",\"Country\/Region\"]]\n\ndf['Country\/Region'].replace({'Mainland China': 'China'}, inplace=True)\n\n\ndf_cordi = pd.merge(df, df_confirmed, on=[\"Country\/Region\", \"Province\/State\"])\n\n","f8246b9e":"fig = px.density_mapbox(df_cordi, \n                        lat=\"Lat\", \n                        lon=\"Long\", \n                        hover_name=\"Province\/State\", \n                        hover_data=[\"Confirmed\",\"Deaths\",\"Recovered\"], \n                        animation_frame=\"Date\",\n                        color_continuous_scale=\"Portland\",\n                        radius=7, \n                        zoom=1,height=700,width=1200)\nfig.update_layout(title='Worldwide Corona Virus Cases Time Lapse - Confirmed, Deaths, Recovered',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=18,\n                            color=\"#7f7f7f\")\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n\nfig.show()","b80cf7c7":"# <font size=\"5\">c) Analysis of COVID-19 Recovered Time Series Data<\/font>","4f2f5c30":"# <font size=\"5\">Mortality rates of COVID-19 by gender<\/font>","8232feba":"> Thanks to https:\/\/www.kaggle.com\/khoongweihao\/covid-19-novel-coronavirus-eda-forecasting-cases","2eae6d7c":"# <font size=\"5\">World Wide Corona Virus Confirmed Cases <\/font>","ee2a5fbd":"> # <font size=\"6\">Let's Start<\/font>","7967b8ee":"# <font size=\"5\">How many weeks does the treatment take<\/font>\n","0bdbbd0c":"# <font size=\"5\">Worldwide Corona Virus Cases Time Lapse - Confirmed, Deaths, Recovered<\/font>\n","a85cfbc2":"# <font size=\"5\">Importing Data and Libraries<\/font>","09716c03":"# <font size=\"5\">COVID-19 cases by several countries<\/font>\n","8f2148ab":"# <font size=\"5\">World Wide Corona Virus Recovered Cases <\/font>","39c4355b":"# <font size=\"5\">Comparison by countries<\/font>","d14b9497":"# <font size=\"5\">Average treatment times by country<\/font>","1711cc70":"# <font size=\"5\">Ratio of treated patients by gender<\/font>","7a19b8e7":"# <font size=\"5\">How many days do patients die after symptoms begin<\/font>\n","1b4cf495":"# <font size=\"5\">1) Analysis of Novel-Corona-Virus-2019 and COVID-19 Open Line Dataset<\/font>","1dabefaa":"# <font size=\"5\">How many days do patients go to the hospital after the symptoms of COVID-19 started<\/font>","a0c2ab68":"# <font size=\"5\">World Wide Corona Virus Death Cases <\/font>","1af28ba6":"# <font size=\"5\">Average age of people who died from COVID-19<\/font>\n","8b4292c3":"# <font size=\"5\">2) Analysis of COVID-19 Time Series Data<\/font>","99be29c2":"# <font size=\"5\">a) Analysis of COVID-19 Confirmed Time Series Data<\/font>","f199885e":"# <font size=\"5\">Avarage age of treated patients<\/font>","c6cf9453":"# <font size=\"5\">Analysis of some COVID-19 symptoms<\/font>","a77b1621":"# <font size=\"5\">Top 5 Death Cases (By Country)<\/font>","f744771f":"# <font size=\"5\">b) Analysis of COVID-19 Death Time Series Data<\/font>","b0e6cdcd":"10 RANDOM SAMPLES","50ba69bf":"# <font size=\"5\">Avarage treatment times by age<\/font>","816f6d07":"# <font size=\"5\">Top 5 Recovered Cases (By Country)<\/font>","8f0362d2":"# <font size=\"5\">This notebook contains analyzes and visualizations about the corona virus outbreak that greatly affects our lives. Various inferences have been made by making use of the available data. It should be remembered that the number of data should be increased in order for some analysis to give better results.<\/font>\n![](https:\/\/wrm5sysfkg-flywheel.netdna-ssl.com\/wp-content\/uploads\/2020\/03\/coronavirus-COVID-19.jpg)\n*Source: https:\/\/wrm5sysfkg-flywheel.netdna-ssl.com\/wp-content\/uploads\/2020\/03\/coronavirus-COVID-19.jpg","479e6b28":"# # <font size=\"5\">Top 5 Confirmed Cases (By Country)<\/font>","56aa7b57":"# <font size=\"5\">Worldwide Corona Virus Cases<\/font>","86d388fe":"<font size=\"10\">Scope<\/font>\n\n"}}