{"cell_type":{"3eb638ca":"code","370d696b":"code","60c31245":"code","3b5badc9":"code","7a4cc280":"code","ceebd5ed":"code","bdb957f3":"code","6f4a7cb8":"code","660e7894":"code","70e2600e":"code","2e7057bc":"code","4936f9cd":"code","ed443bce":"code","a886e0e4":"code","c0bbeb10":"code","a625113b":"code","b08bb137":"code","cf993cf4":"markdown","a1a7468c":"markdown","26ef7cbf":"markdown","5340e2f4":"markdown","bf136423":"markdown"},"source":{"3eb638ca":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom numba import cuda, float32\nimport PIL\nimport math","370d696b":"image = np.asarray(PIL.Image.open('..\/input\/fruit-recognition\/train\/train\/Pineapple\/Pineapple_108.jpg'))","60c31245":"img2d = image[:,:,0]\nimg3d = image","3b5badc9":"f, axarr = plt.subplots(1,2,figsize=(15,15))\naxarr[0].set_title('2D')\naxarr[0].imshow(img2d)\naxarr[1].set_title('3D')\naxarr[1].imshow(img3d)","7a4cc280":"MASK_WIDTH = 3\nMASK_RADIUS = MASK_WIDTH \/\/ 2\nTILE_WIDTH = 8\nW = TILE_WIDTH + MASK_WIDTH - 1","ceebd5ed":"@cuda.jit\ndef conv2d(I, O, M, height, width):\n    s = cuda.shared.array(shape=(W, W), dtype=float32)\n    \n    dest = cuda.threadIdx.x + cuda.threadIdx.y * TILE_WIDTH\n    destY = dest \/\/ W\n    destX = dest % W\n\n    srcY = destY + cuda.blockIdx.y * TILE_WIDTH - MASK_RADIUS\n    srcX = destX + cuda.blockIdx.x * TILE_WIDTH - MASK_RADIUS\n    src = srcX, srcY\n\n    if destY < W:\n        if (srcY >= 0) and (srcY < height) and (srcX >= 0) and (srcX < width):\n            s[destY][destX] = I[src]\n        else:\n            s[destY][destX] = 0\n\n    cuda.syncthreads()\n\n    dest = cuda.threadIdx.x + (cuda.threadIdx.y * TILE_WIDTH) + TILE_WIDTH * TILE_WIDTH\n    destY = dest \/\/ W\n    destX = dest % W\n\n    srcY = destY + (cuda.blockIdx.y * TILE_WIDTH) - MASK_RADIUS\n    srcX = destX + (cuda.blockIdx.x * TILE_WIDTH) - MASK_RADIUS\n    src = srcX, srcY\n\n    if(destY < W):\n        if(srcY >= 0 and srcY < height and srcX >= 0 and srcX < width):\n            s[destY][destX] = I[src]\n        else:\n            s[destY][destX] = 0;\n\n    cuda.syncthreads()\n\n    sum = 0\n    for y in range(MASK_WIDTH):\n        for x in range(MASK_WIDTH):\n            sum = sum + s[cuda.threadIdx.y + y][cuda.threadIdx.x + x] * M[x, y * MASK_WIDTH]\n\n    y = cuda.threadIdx.y + (cuda.blockIdx.y * TILE_WIDTH)\n    x = cuda.threadIdx.x + (cuda.blockIdx.x * TILE_WIDTH)\n\n    if(y < height and x < width):\n        O[x, y] = sum","bdb957f3":"np.random.seed(23432423)\nI = img2d \/ 255.\nO = np.zeros((100,100))\nM = np.random.randn(3,3)","6f4a7cb8":"dimBlock = (TILE_WIDTH, TILE_WIDTH, 1)\ndimGrid = ((I.shape[0] + TILE_WIDTH - 1) \/\/ TILE_WIDTH, (I.shape[1] + TILE_WIDTH - 1) \/\/ TILE_WIDTH)","660e7894":"# Return a contiguous array (ndim >= 1) in memory (C order)\nI = np.ascontiguousarray(I, dtype=np.float32)\nO = np.ascontiguousarray(O, dtype=np.float32)","70e2600e":"conv2d[dimGrid, dimBlock](I, O, M, 100, 100)","2e7057bc":"plt.figure(figsize=(8,8))\nplt.imshow(O * 255.)","4936f9cd":"@cuda.jit\ndef conv3d(I, O, M, height, width, depth):\n    s = cuda.shared.array(shape=(W, W, W), dtype=float32)\n\n    dest = cuda.threadIdx.x + (cuda.threadIdx.y * TILE_WIDTH) + (cuda.threadIdx.z * TILE_WIDTH * TILE_WIDTH)\n    destTmp = dest\n    destX = destTmp % W\n    destTmp = destTmp \/\/ W\n    destY = destTmp % W\n    destTmp = destTmp \/\/ W\n    destZ = destTmp\n\n    srcZ = destZ + (cuda.blockIdx.z * TILE_WIDTH) - MASK_RADIUS\n    srcY = destY + (cuda.blockIdx.y * TILE_WIDTH) - MASK_RADIUS\n    srcX = destX + (cuda.blockIdx.x * TILE_WIDTH) - MASK_RADIUS\n    src = srcX, srcY, srcZ\n\n    if(srcZ >= 0 and srcZ < depth and srcY >= 0 and srcY < height and srcX >= 0 and srcX < width):\n        s[destZ][destY][destX] = I[src]\n    else:\n        s[destZ][destY][destX] = 0\n\n    dest = cuda.threadIdx.x + (cuda.threadIdx.y * TILE_WIDTH) + (cuda.threadIdx.z * TILE_WIDTH * TILE_WIDTH) + TILE_WIDTH * TILE_WIDTH * TILE_WIDTH\n    destTmp = dest\n    destX = destTmp % W\n    destTmp = destTmp \/\/ W\n    destY = destTmp % W\n    destTmp = destTmp \/\/ W\n    destZ = destTmp\n\n    srcZ = destZ + (cuda.blockIdx.z * TILE_WIDTH) - MASK_RADIUS\n    srcY = destY + (cuda.blockIdx.y * TILE_WIDTH) - MASK_RADIUS\n    srcX = destX + (cuda.blockIdx.x * TILE_WIDTH) - MASK_RADIUS\n    src = srcX, srcY * width, srcZ * width * height\n\n    if(destZ < W):\n        if(srcZ >= 0 and srcZ < depth and srcY >= 0 and srcY < height and srcX >= 0 and srcX < width):\n            s[destZ][destY][destX] = I[src]\n        else:\n            s[destZ][destY][destX] = 0\n\n    cuda.syncthreads()\n\n    sum = 0.\n\n    for z in range(MASK_WIDTH):\n        for y in range(MASK_WIDTH):\n            for x in range(MASK_WIDTH):\n                sum = sum + s[cuda.threadIdx.z + z][cuda.threadIdx.y + y][cuda.threadIdx.x + x] * M[x, y * MASK_WIDTH,  z * MASK_WIDTH * MASK_WIDTH]\n\n    z = cuda.threadIdx.z + (cuda.blockIdx.z * TILE_WIDTH)\n    y = cuda.threadIdx.y + (cuda.blockIdx.y * TILE_WIDTH)\n    x = cuda.threadIdx.x + (cuda.blockIdx.x * TILE_WIDTH)\n\n    if(z < depth and y < height and x < width):\n        O[x, y, z] = sum\n\n    cuda.syncthreads()","ed443bce":"np.random.seed(23432423)\nI = img3d \/ 255.\nO = np.zeros((100,100,3))\nM = np.random.randn(3,3,3)","a886e0e4":"dimBlock = (TILE_WIDTH, TILE_WIDTH, TILE_WIDTH)\ndimGrid = ((I.shape[0] + TILE_WIDTH - 1) \/\/ TILE_WIDTH, (I.shape[1] + TILE_WIDTH - 1) \/\/ TILE_WIDTH, (I.shape[2] + TILE_WIDTH - 1) \/\/ TILE_WIDTH)","c0bbeb10":"# Return a contiguous array (ndim >= 1) in memory (C order)\nI = np.ascontiguousarray(I, dtype=np.float32)\nO = np.ascontiguousarray(O, dtype=np.float32)","a625113b":"conv3d[dimGrid, dimBlock](I, O, M, 100, 100, 3)","b08bb137":"plt.figure(figsize=(8,8))\nplt.imshow(O * 255.)","cf993cf4":"# Parameters","a1a7468c":"# 2D Convolution","26ef7cbf":"# 2D & 3D Convolutions using CUDA","5340e2f4":"# Get a random image and display it in 2D & 3D","bf136423":"# 3D Convolution"}}