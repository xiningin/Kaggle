{"cell_type":{"a4a01997":"code","f0b657ea":"code","df384f9c":"code","bc05b2c8":"code","1152bdaf":"code","694005d1":"code","b72ffeb8":"code","ca3730cb":"code","ca6d1d84":"code","f0e58e07":"code","5227c7da":"code","34c1063e":"code","a68ebe8a":"code","1bd14155":"code","350fc8f6":"code","2dbe2d3e":"code","e72c6f88":"code","ca16d565":"code","2bbd561b":"code","c2ef8f53":"code","5d3ca0bd":"code","573b7615":"code","cbea4216":"code","6ea51bd6":"code","143b59e4":"code","fc823a49":"code","c13133c5":"code","c7b9f062":"code","3cd399ad":"code","9c98bd9f":"code","66790386":"code","039e47a3":"code","32d8a760":"code","5572abb0":"code","50ad6c26":"code","a9b883e1":"code","e84ec919":"code","d4368c2d":"code","792d701f":"code","5d235756":"code","1494a5cb":"code","c121d56a":"code","3eedc704":"code","3b2763aa":"markdown","9f693125":"markdown","83da5254":"markdown","cfa8dee5":"markdown","31ea0324":"markdown","27eb7b50":"markdown","db2545dc":"markdown","e8e84c03":"markdown","f4447113":"markdown","c09b5a40":"markdown"},"source":{"a4a01997":"import gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\n# Encord\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder, quantile_transform\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\n# Model\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n# Validation\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score","f0b657ea":"# \u6642\u7cfb\u5217\u3068\u3057\u3066\u6709\u7528\u306a\u9805\u76ee\u3092\u65e5\u4ed8\u578b\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])\n# df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, skiprows=lambda x: x%20!=0, parse_dates=['issue_d', 'earliest_cr_line'])\ndf_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])\n\n# df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, skiprows=lambda x: x%20!=0)\n# #df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0)\n# df_test = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv', index_col=0)","df384f9c":"df_train_1 = df_train[df_train['issue_d'].dt.year >= 2014]\ndf_train_1['year'] = df_train['issue_d'].dt.year\ndf_test_1 = df_test\ndf_test_1['year'] = df_test['issue_d'].dt.year","bc05b2c8":"# # \u8ffd\u52a0\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f -> \u8ffd\u52a0\u3057\u305f\u7d50\u679c\u3001\u6570\u5024\u4f4e\u4e0b\n# gdp = pd.read_csv('..\/input\/homework-for-students4plus\/US_GDP_by_State.csv', names=['city', 'locale', 'gross', 'growth', 'population', 'year'], header=1)\n# # gdp = gdp[gdp.year==2015] # \u76f4\u8fd11\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u306e\u307f\u306b\u9650\u5b9a\u3057\u3066\u53d6\u5f97\n# # gdp.drop(['year'], axis=1, inplace=True)\n\n# sl = pd.read_csv('..\/input\/homework-for-students4plus\/statelatlong.csv',names=['addr_state', 'latitude', 'longitude', 'city'], header=1)\n\n# # \u8ffd\u52a0\u30c7\u30fc\u30bf\u540c\u58eb\u3092\u7d50\u5408\n# sl_gdp = pd.merge(sl, gdp, on=['city'], how='left')","1152bdaf":"# # statelatlong, US_GDP_by_State \u3092\u7d50\u5408\n# df_train_2 = pd.merge(df_train_1, sl_gdp, on=['addr_state','year'], how='left')\n# df_test_2 = pd.merge(df_test_1, sl_gdp, on=['addr_state', 'year'], how='left')","694005d1":"# X,y \u3078\u5206\u5272\ny_train = []\nX_train = []\n\n# y_train = df_train_2.loan_condition\n# X_train = df_train_2.drop(['loan_condition'], axis=1)\n# X_test = df_test_2\n\ny_train = df_train_1.loan_condition\nX_train = df_train_1.drop(['loan_condition'], axis=1)\nX_test = df_test_1\n\nX_all = pd.concat([X_train,X_test], axis=0)","b72ffeb8":"# grade \u306e\u5e8f\u5217\u3092\u30de\u30c3\u30d4\u30f3\u30b0\nX_all=X_all.replace({'grade':{'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}})\nX_all['grade'] = X_all['grade'].astype('object')\nX_all.dtypes","ca3730cb":"# subgrade \u306e\u5e8f\u5217\u3092\u30de\u30c3\u30d4\u30f3\u30b0\nX_all=X_all.replace({'sub_grade':{'A1':1,'A2':2,'A3':3,'A4':4,'A5':5,\n                                      'B1':6,'B2':7,'B3':8,'B4':9,'B5':10,\n                                      'C1':11,'C2':12,'C3':13,'C4':14,'C5':15,\n                                      'D1':16,'D2':17,'D3':18,'D4':19,'D5':20,\n                                      'E1':21,'E2':22,'E3':23,'E4':24,'E5':25,\n                                      'F1':26,'F2':27,'F3':28,'F4':29,'F5':30,\n                                      'G1':31,'G2':32,'G3':33,'G4':34,'G5':35}})\nX_all['sub_grade'] = X_all['sub_grade'].astype('object')","ca6d1d84":"# emp_length \u306e\u5e8f\u5217\u3092\u30de\u30c3\u30d4\u30f3\u30b0\nX_all=X_all.replace({'emp_length':{'10+ years':1,'9 years':2,'8 years':3,'7 years':4,'6 years':5,\n                                      '5 years':6,'4 years':7,'3 years':8,'2 years':9,'1 year':10,'< 1 year':11}})\nX_all['emp_length'] = X_all['emp_length'].astype('object')","f0e58e07":"# \u65e5\u4ed8\u9805\u76ee\u3092\u6570\u5024\u9805\u76ee\u306b\u5909\u63db\nX_all['issue_d'] = X_all['issue_d'].map(pd.Timestamp.timestamp).astype(int)\nX_all['earliest_cr_line'] = X_all['earliest_cr_line'].map(pd.Timestamp.timestamp).astype(int)\n","5227c7da":"# \u7533\u8acb\u304b\u3089\u878d\u8cc7\u6708\u307e\u3067\u306e\u671f\u9593\u3092\u4fdd\u6301\nX_all['processing_d'] = X_all['issue_d'] - X_all['earliest_cr_line']","34c1063e":"X_all.dtypes","a68ebe8a":"# \u5404\u30ab\u30e9\u30e0\u3067\u306e\u6b20\u640d\u5024\u306e\u6709\u7121\u3092\u4fdd\u6301\nfor col in X_all.columns:\n    X_all[col+\"_null\"] = (X_all[col].isnull()*1).astype('object')","1bd14155":"# \u7279\u5fb4\u91cf\u30bf\u30a4\u30d7\u3054\u3068\u306b\u5206\u5272\u3059\u308b\ncat = []\nnum = []\n\nfor col in X_all.columns:\n    if X_all[col].dtype == 'object':\n        if X_all[col].nunique() != 1: # \u30e6\u30cb\u30fc\u30af\u5024\u3057\u304b\u306a\u3044\u30c7\u30fc\u30bf\u306f\u9664\u5916\n            cat.append(col)\n            print(col, X_all[col].nunique())\n    else:\n        if col != 'issue_d': # issue_d \u306f\u672a\u6765\u4e88\u6e2c\u3067\u4e0d\u8981\u306e\u305f\u3081\u9664\u5916\n            num.append(col)\n\ncat.remove('emp_title')\ncat.remove('title')\ncat.remove('zip_code')\n\ncat_all = X_all[cat]\nnum_all = X_all[num].fillna(-9999)\n\nemp_title_all = X_all.emp_title\ntitle_all = X_all.title","350fc8f6":"cat_all","2dbe2d3e":"#\u3000\u91d1\u984d\u7cfb\u306e\u7279\u5fb4\u91cf\u3068\u3057\u3066\u5404\u6bd4\u7387\u8a08\u7b97\u7d50\u679c\u3092\u8ffd\u52a0\nnum_all['loan_inst'] = num_all['loan_amnt'] \/ num_all['installment']\nnum_all['loan_inc'] = num_all['loan_amnt'] \/ num_all['annual_inc']\nnum_all['loan_revol'] = num_all['loan_amnt'] \/ num_all['revol_bal']\nnum_all['loan_coll'] = num_all['loan_amnt'] \/ num_all['tot_coll_amt']\nnum_all['loan_cur'] = num_all['loan_amnt'] \/ num_all['tot_cur_bal']\n\nnum_all['inst_inc'] = num_all['installment'] \/ num_all['annual_inc']\nnum_all['inst_revol'] = num_all['installment'] \/ num_all['revol_bal']\nnum_all['inst_coll'] = num_all['installment'] \/ num_all['tot_coll_amt']\nnum_all['inst_cur'] = num_all['installment'] \/ num_all['tot_cur_bal']\n\nnum_all['inc_revol'] = num_all['annual_inc'] \/ num_all['revol_bal']\nnum_all['inc_coll'] = num_all['annual_inc'] \/ num_all['tot_coll_amt']\nnum_all['inc_cur'] = num_all['annual_inc'] \/ num_all['tot_cur_bal']\n\nnum_all['revol_coll'] = num_all['revol_bal'] \/ num_all['tot_coll_amt']\nnum_all['revol_cur'] = num_all['revol_bal'] \/ num_all['tot_cur_bal']\n\nnum_all['coll_cur'] = num_all['tot_coll_amt'] \/ num_all['tot_cur_bal']\n\nnum_all['monthly_free_money'] = (num_all['annual_inc'] \/ 12 * num_all['dti'] \/ 100 + num_all['tot_cur_bal']) - num_all['installment']\n\n# 0\u5024\u306b\u3088\u308b\u9664\u7b97\u30a8\u30e9\u30fc\u3078\u5bfe\u5fdc\nnum_all.replace([np.inf, -np.inf], np.nan, inplace=True)\n\nnum_all.describe()","e72c6f88":"#\u3000RankGauss\nnum_all[num] = quantile_transform(num_all[num], n_quantiles=100, random_state=0, output_distribution='normal')\nnum_all","ca16d565":"# Ordinal Encoding\nfor col in tqdm(cat):\n    oe = OrdinalEncoder(return_df=False)\n\n    cat_all[col] = oe.fit_transform(cat_all[col])","2bbd561b":"count_cat = ['grade',\n 'sub_grade',\n 'emp_length',\n 'home_ownership',\n 'purpose',\n 'addr_state',\n 'initial_list_status',\n 'application_type']","c2ef8f53":"# \u5404\u30ab\u30e9\u30e0\u3067\u306e\u6b20\u640d\u5024\u306e\u6709\u7121\u3092\u4fdd\u6301\nfor col in tqdm(count_cat):\n    summary = cat_all[col].value_counts()\n    cat_all[col+\"_cnt\"] = cat_all[col].map(summary).astype('object')\n\ncat_all","5d3ca0bd":"X_all = pd.concat([num_all, cat_all], axis=1) # numeric\u306bconcat\u3057\u3066\u3044\u304f","573b7615":"X_all","cbea4216":"# emp_title\nemp_title_all.fillna('#', inplace=True)\ntfidf1 = TfidfVectorizer(strip_accents='ascii', stop_words='english', max_features=300, ngram_range=(1,2))\nemp_title_all = tfidf1.fit_transform(emp_title_all.fillna('#'))","6ea51bd6":"# # title\n# title_all.fillna('#', inplace=True)\n# tfidf2 = TfidfVectorizer(strip_accents='ascii', stop_words='english', max_features=300, ngram_range=(1,2))\n# title_all = tfidf2.fit_transform(title_all.fillna('#'))","143b59e4":"X_all = pd.concat([X_all, pd.DataFrame(emp_title_all.todense(), index=X_all.index)], axis=1)\n# X_all = pd.concat([X_all, pd.DataFrame(title_all.todense(), index=X_all.index)], axis=1)","fc823a49":"X_all.fillna(-9999, inplace=True)","c13133c5":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\nX_train = X_all.iloc[:X_train.shape[0], :]\nX_test = X_all.iloc[X_train.shape[0]:, :]\n\ndel X_all\ngc.collect()","c7b9f062":"# \u5b66\u7fd2\u7528\u3068\u691c\u8a3c\u7528\u306b\u5206\u5272\u3059\u308b\nX_train_, X_val, y_train_, y_val= train_test_split(X_train, y_train, test_size=0.05, random_state=71)\n\nclf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.71,\n                     importance_type='split', learning_rate=0.05, max_depth=-1,\n                     min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                     n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None,\n                     random_state=71, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n                     subsample=0.9, subsample_for_bin=200000, subsample_freq=0)","3cd399ad":"# \u5b66\u7fd2\n# %%time\nclf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])","9c98bd9f":"# \u7279\u5fb4\u91cf\u30a4\u30f3\u30d1\u30af\u30c8\u96c6\u8a08\nimp = DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train.columns, columns=['importance']).sort_values(['importance'], ascending=False)\nimp","66790386":"fig, ax = plt.subplots(figsize=(5, 8))\nlgb.plot_importance(clf, max_num_features=50, ax=ax, importance_type='gain')","039e47a3":"# \u7279\u5fb4\u91cf\u30a4\u30f3\u30d1\u30af\u30c8\u3092\u3057\u304d\u3044\u5024\u3068\u3057\u3066\u30ab\u30e9\u30e0\u3092\u9650\u5b9a\nuse_col = imp[imp['importance'] > 50].index\n# use_col = imp.index[:164] # \u5909\u6570\u91cd\u8981\u5ea6\u3067\u7279\u5fb4\u91cf\u3092\u7d5e\u308a\u8fbc\u3093\u3067\u307f\u307e\u3057\u3087\u3046\nuse_col","32d8a760":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\nX_train = X_train[use_col]\nX_test = X_test[use_col]","5572abb0":"# from hyperopt import fmin, tpe, hp, rand, Trials\n\n# # \u76ee\u7684\u95a2\u6570\n# def objective(space):\n#     scores = []\n\n#     skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n#     for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#         X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n#         X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n#         clf = LGBMClassifier(n_estimators=9999, **space) \n\n#         clf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric='auc', eval_set=[(X_val, y_val)])\n#         y_pred = clf.predict_proba(X_val)[:,1]\n#         score = roc_auc_score(y_val, y_pred)\n#         scores.append(score)\n        \n#     scores = np.array(scores)\n#     print(scores.mean())\n    \n#     return -scores.mean()","50ad6c26":"# # \u63a2\u7d22\u7a7a\u9593\u3092\u6307\u5b9a\u3059\u308b\u3002\n# space ={\n#         'max_depth': hp.choice('max_depth', np.arange(10, 30, dtype=int)),\n#         'subsample': hp.uniform ('subsample', 0.8, 1),\n#         'learning_rate' : hp.quniform('learning_rate', 0.025, 0.5, 0.025),\n#         'colsample_bytree' : hp.quniform('colsample_bytree', 0.5, 1, 0.05)\n#     }","a9b883e1":"# # \u63a2\u7d22\u7d50\u679c\u306e\u683c\u7d0d\u5148\n# trials = Trials()\n\n# best = fmin(fn=objective,\n#               space=space, \n#               algo=tpe.suggest,\n#               max_evals=20, \n#               trials=trials, \n#               rstate=np.random.RandomState(71) \n#              )\n\n# trials = Trials()","e84ec919":"# # \u6700\u9069\u5316\u5b9f\u884c\n# best = fmin(fn=objective,\n# space=space,\n# algo=tpe.suggest,\n# max_evals=100, trials=trials,\n# rstate=np.random.RandomState(71)\n# )","d4368c2d":"# # \u7d50\u679c\u306e\u51fa\u529b\n# clf = LGBMClassifier(**best)\n# print(clf)","792d701f":"# # LightGBM + Random seed averaging + CV averaging\n# scores = []\n\n# for j in range(42,73):\n#     skf = StratifiedKFold(n_splits=5, random_state=j, shuffle=True)\n#     y_tests = np.zeros(len(X_test.index))\n\n#     clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.71,\n#                          importance_type='split', learning_rate=0.05, max_depth=-1,\n#                          min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n#                          n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None,\n#                          random_state=j, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n#                          subsample=0.9, subsample_for_bin=200000, subsample_freq=0)\n\n#     for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n#         X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n#         X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n#         clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n#         y_pred = clf.predict_proba(X_val)[:,1]\n#         score = roc_auc_score(y_val, y_pred)\n#         scores.append(score)\n#         y_tests += clf.predict_proba(X_test)[:,1]","5d235756":"# LightGBM\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=72, shuffle=True)\ny_tests = np.zeros(len(X_test.index))\n\nclf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.71,\n                     importance_type='split', learning_rate=0.05, max_depth=-1,\n                     min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                     n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None,\n                     random_state=71, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n                     subsample=0.9, subsample_for_bin=200000, subsample_freq=0)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n\n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    y_tests += clf.predict_proba(X_test)[:,1]","1494a5cb":"np.mean(scores)","c121d56a":"y_pred  = y_tests\/len(scores)","3eedc704":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","3b2763aa":"### \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf","9f693125":"### \u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf","83da5254":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","cfa8dee5":"# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff08hyperopt\uff09\u203b\u65ad\u5ff5","31ea0324":"### \u6570\u5024\u7279\u5fb4\u91cf","27eb7b50":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","db2545dc":"# \u691c\u8a3c","e8e84c03":"# \u7279\u5fb4\u91cf\u691c\u8a3c","f4447113":"# Submit","c09b5a40":"# AI\u30a2\u30ab\u30c7\u30df\u30fc\u7b2c4\u56de\u8ab2\u984c\u7528\u30ce\u30fc\u30c8\u30d6\u30c3\u30af"}}