{"cell_type":{"3856d671":"code","fc5eb6a7":"code","e4ffa3a9":"code","3a3d3ab8":"code","4ae5113a":"code","7c55da3a":"code","6117f88b":"code","5a0b222a":"code","a332e3e8":"code","c68cea9e":"code","7a4405a2":"code","52530e0f":"code","3df5507a":"code","8757d7c4":"code","6c2a92b1":"code","2b764596":"code","46505536":"code","d2bdc5e6":"code","fccc8ce1":"code","1e648924":"code","4d66cdc3":"code","138c79c2":"code","57173c0e":"code","454952b2":"code","82a07360":"code","2f966b98":"code","2c739427":"code","f8b8ea45":"code","f9b6c25e":"code","92aefbf6":"code","d1f7b70f":"code","927ade63":"code","82857836":"code","9b9d4a69":"markdown"},"source":{"3856d671":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc5eb6a7":"#Reading data\ndata = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","e4ffa3a9":"#Display first five rows of data\ndata.head()","3a3d3ab8":"#get to know about number of species (classes)\ndata['Species'].unique()","4ae5113a":"#Length of data\ndata.shape","7c55da3a":"#Column names\ndata.columns","6117f88b":"#if there is any NAN value\ndata.isnull().values.any()","5a0b222a":"#seperating X_features\nX_data = data.drop(['Id','Species'],axis=1)","a332e3e8":"X_data.shape","c68cea9e":"#seperating labels and converting categorial labels to numbers.\nY_data = pd.get_dummies(data[\"Species\"], columns=[\"Species\"])","7a4405a2":"Y_data.head()","52530e0f":"Y_data.shape","3df5507a":"#Preprocessing\nfrom sklearn import preprocessing","8757d7c4":"MinMaxScaler = preprocessing.MinMaxScaler()\nX_data_minmax = MinMaxScaler.fit_transform(X_data)","6c2a92b1":"#To DataFrame\nX_data_frame = pd.DataFrame(X_data_minmax,columns=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'])","2b764596":"X_data_frame.head()","46505536":"#Train_test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_data_frame, Y_data,\n                                                    test_size=0.2, random_state = 1)","d2bdc5e6":"X_train.shape","fccc8ce1":"#NN based classifier using Keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport keras.backend as K","1e648924":"K.clear_session()\nmodel = Sequential()\nmodel.add(Dense(6,input_shape = (None,4), activation='relu'))\nmodel.add(Dense(3, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","4d66cdc3":"model.summary()","138c79c2":"model.fit(X_train, y_train, batch_size=8,\n          epochs=200, verbose=1, validation_split=0.1)","57173c0e":"model.evaluate(X_test, y_test)","454952b2":"from sklearn.neighbors import KNeighborsClassifier","82a07360":"ytrain_knn = np.argmax(y_train.values, axis = 1)","2f966b98":"ytrain_knn","2c739427":"y_train.head()","f8b8ea45":"ytest_knn = np.argmax(y_test.values, axis = 1)","f9b6c25e":"#Selecting different Ks in range [1,10] and choose the one with high accuracy\nfrom sklearn import metrics\nK_range = 11\nacc = [] #np.zeros((Ks-1))\n#ConfustionMx = [];\nfor i in range(1,K_range):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = i).fit(X_train,ytrain_knn)\n    yhat=neigh.predict(X_test)\n    #acc[n-1] = metrics.accuracy_score(ytest_knn, yhat)\n    acc.append(metrics.accuracy_score(ytest_knn, yhat))\n    \n    #std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nacc","92aefbf6":"#We can see that with K = 1,2,3,4,6,7,8 we are getting 100 % accuracy, so we are going to select K=6","d1f7b70f":"knn_model = KNeighborsClassifier(n_neighbors = 6).fit(X_train,ytrain_knn)","927ade63":"ypred=knn_model.predict(X_test)","82857836":"metrics.accuracy_score(ytest_knn, ypred)","9b9d4a69":"## Now training and testing using KNN classifier"}}