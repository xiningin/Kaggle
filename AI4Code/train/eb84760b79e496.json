{"cell_type":{"40bf7c53":"code","bce89415":"code","d5b7658d":"code","02500865":"code","8c91b679":"code","b096d5f0":"code","1679cdc3":"code","df6dc094":"code","60a816ce":"code","3165bcc3":"code","447e10f1":"code","5164da60":"code","4ea11fb7":"code","d9f6fe00":"code","c73491df":"code","ebc06b0a":"code","baae81c8":"code","42030ce8":"code","dd672239":"code","4e05b102":"code","7f6518e8":"code","27aa7741":"code","9b5f2da1":"code","beb20edb":"markdown","911d3bdb":"markdown","4d962223":"markdown","48adb205":"markdown","82f8d1bc":"markdown","e4dea44d":"markdown","469f8d68":"markdown","14d41b1c":"markdown","26c41f8a":"markdown","be0fab0c":"markdown","6448ead7":"markdown","03518e59":"markdown"},"source":{"40bf7c53":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.graph_objects as go\nimport plotly.express as px\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\n\nfrom statsmodels.tsa.stattools import grangercausalitytests\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.api import VAR\n\nfrom sklearn.metrics import mean_squared_error\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bce89415":"data = pd.read_csv('\/kaggle\/input\/covid-tracking-project-racial-data-tracker\/Race Data Entry - CRDT.csv')\ndata.head()","d5b7658d":"data.fillna(0, inplace=True)\ndata['Cases_Total'] = data['Cases_Total'].str.replace(',','')\ndata['Cases_Total'] = data['Cases_Total'].astype('float64')\ndata['Cases_White'] = data['Cases_White'].str.replace(',','')\ndata['Cases_White'] = data['Cases_White'].astype('float64')","02500865":"state_date = data[['State','Date']]\nstate_date.head()","8c91b679":"cases_data = data[data.columns[pd.Series(data.columns).str.startswith('Cases_')]]\ncases_data = pd.concat([cases_data, state_date], axis=1)\ncases_data['Date'] = pd.to_datetime(cases_data['Date'], format='%Y%m%d')\ncases_data = cases_data.sort_values(by='Date', ascending=True).reset_index(drop=True)\ncases_data.index = cases_data.Date\ncases_data = cases_data.drop('Date', axis=1)\ncases_data.head()","b096d5f0":"latest_cases = pd.DataFrame(cases_data.groupby('State')['Cases_Total'].max()).reset_index()\nfig = px.choropleth(latest_cases,\n                    locations=\"State\",\n                    color=\"Cases_Total\",\n                    hover_name=\"State\",\n                    locationmode = 'USA-states')\nfig.update_layout(\n    title_text = 'Total Cases in all States',\n    geo_scope='usa',\n)\nfig.show()","1679cdc3":"daily_total_cases = cases_data.reset_index().dropna()\ndaily_total_cases['Date'] = daily_total_cases['Date'].astype('str')\nfig = px.scatter_geo(daily_total_cases, \n                     locations=\"State\", \n                     color=\"Cases_Black\", \n                     hover_name=\"State\", \n                     size=\"Cases_Black\",\n                     animation_frame=\"Date\", \n                     locationmode = 'USA-states')\nfig.update_layout(\n    title_text = 'Total Daily Cases in all States',\n    geo_scope='usa',\n)\nfig.show()","df6dc094":"fig = px.pie(cases_data.groupby('State').sum()[['Cases_Total']], \n             values='Cases_Total', names=cases_data.groupby('State').sum().index,\n             title='Total Cases in all States',\n             hover_data=['Cases_Total'])\nfig.update_traces(textposition='inside', textinfo='percent+label',showlegend=False)\nfig.show()","60a816ce":"cases_data.groupby('State').mean()","3165bcc3":"state_ = 'OR'\nstate = cases_data[cases_data['State'] == state_].drop('State', axis=1)\n\nstate_pc = pd.DataFrame()\nstate_pc['Cases'] = state.columns[1:]\nstate_pc['Ratio'] = np.round(state.sum()[1:]\/np.sum(state.sum()[1:]) * 100, 2).values\nstate_pc = state_pc.sort_values(by='Ratio', ascending=False).reset_index(drop=True)\n\nplt.figure(figsize=(12, 6))\nfor col in state.columns[1:]:\n    plt.plot(state[col], label=col)\nplt.title('Cases in State: '+state_)\nplt.legend()\nplt.show()\n    \nstate_pc.style.background_gradient()","447e10f1":"plt.figure(figsize=(14,7))\nax = sns.heatmap(state[state.columns[1:]].corr(), annot=True, cmap=\"mako\")\nplt.title('Correlation Matrix of various cases in state '+state_)\nplt.show()","5164da60":"melt = pd.melt(state[state.columns[1:]].reset_index(), id_vars=['Date'])\nmelt.dropna(inplace=True)\nmelt['Date'] = melt['Date'].astype('str')\nmelt = melt.rename({\"variable\":'Cases_Type', 'value':'Cases'}, axis=1)\nfig = px.bar(melt, x='Cases', y='Cases_Type', color='Cases',\n             animation_frame=\"Date\", height=850, orientation='h',\n             title=\"Detailed COVID-19 Daily Cases Analysis of all types in state \"+state_)\nfig.show()","4ea11fb7":"state_sum = pd.DataFrame(state.sum()[1:]).reset_index().rename({'index':'Type', 0:'Cases'}, axis=1)\nfig = px.pie(state_sum,\n             values='Cases', names='Type',\n             title='Ratio of cases type in state '+state_)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","d9f6fe00":"def adfuller_test(series, signif=0.05, name='', verbose=False):\n    r = adfuller(series, autolag='AIC')\n    output = {'test_statistic':round(r[0], 4), 'pvalue':round(r[1], 4), 'n_lags':round(r[2], 4), 'n_obs':r[3]}\n    p_value = output['pvalue']\n    def adjust(val, length= 6): return str(val).ljust(length)\n\n    # Print Summary\n    print(f'    Augmented Dickey-Fuller Test on \"{name}\"', \"\\n   \", '-'*47)\n    print(f' Null Hypothesis: Data has unit root. Non-Stationary.')\n    print(f' Significance Level    = {signif}')\n    print(f' Test Statistic        = {output[\"test_statistic\"]}')\n    print(f' No. Lags Chosen       = {output[\"n_lags\"]}')\n\n    for key,val in r[4].items():\n        print(f' Critical value {adjust(key)} = {round(val, 3)}')\n\n    if p_value <= signif:\n        print(f\" => P-Value = {p_value}. Rejecting Null Hypothesis.\")\n        print(f\" => Series is Stationary.\")\n    else:\n        print(f\" => P-Value = {p_value}. Weak evidence to reject the Null Hypothesis.\")\n        print(f\" => Series is Non-Stationary.\")\n    return\n\ndef grangers_causation_matrix(data, variables, test='ssr_chi2test', verbose=False):\n    df = pd.DataFrame(np.zeros((len(variables), len(variables))), columns=variables, index=variables)\n    for c in df.columns:\n        for r in df.index:\n            test_result = grangercausalitytests(data[[r, c]], maxlag=maxlag, verbose=False)\n            p_values = [round(test_result[i+1][0][test][1],4) for i in range(maxlag)]\n            if verbose: print(f'Y = {r}, X = {c}, P Values = {p_values}')\n            min_p_value = np.min(p_values)\n            df.loc[r, c] = min_p_value\n    df.columns = [var + '_x' for var in variables]\n    df.index = [var + '_y' for var in variables]\n    return df","c73491df":"df = pd.DataFrame(state[state.columns[1:]])\ndf.fillna(0, inplace=True)\ndf = df.loc[:, (df != 0).any(axis=0)]\n\nprint(\"Columns: \", df.columns.tolist())","ebc06b0a":"print(\"Plot for each variables\")\n\nnrow = 6\nncol = 2\nk = 0\ncols = df.columns\n\nfig = plt.figure(figsize=(20, 19))\nfor i in range(1, len(cols)+1):\n    plt.subplot(nrow, ncol, i)\n    plt.plot(df.index, df[cols[k]])\n    plt.title(cols[k])\n    k = k + 1\nplt.tight_layout()\nplt.show()","baae81c8":"print(\"Grangers Casualty Test\")\n\nmaxlag = 4\ntest = 'ssr_chi2test'\n\ngrangers_causation_matrix(df, variables = df.columns)","42030ce8":"nobs = 7\ndf_train, df_test = df[0:-nobs], df[-nobs:]\ndf_train = df_train.loc[:, (df_train != 0).any(axis=0)]\ndf_test = df_test[df_train.columns]\ncols = df_train.columns\n#df_train = df\nprint(df_train.shape)\nprint(df_test.shape)","dd672239":"for name, column in df.iteritems():\n    adfuller_test(column, name=column.name)\n    print('\\n')","4e05b102":"model = VAR(df_train.reset_index(drop=True))\nmodel_fitted = model.fit(maxlag)\nmodel_fitted.summary()","7f6518e8":"lag_order = model_fitted.k_ar\n\nprint(\"Lag Order: \",lag_order)\n\nforecast_input = df_train.values[-lag_order:]\nforecast_input\n\nfc = model_fitted.forecast(y=forecast_input, steps=nobs)\n\ndf_result = pd.concat([df_test, pd.DataFrame(fc, \n                                             index=df_test.index, \n                                             columns=['Predicted_'+str(i) for i in range(df_test.shape[1])])], \n                      axis=1)\n\ndf_result","27aa7741":"n = 0\nfor col in df_test.columns.tolist():\n    rmse = np.sqrt(mean_squared_error(df_result[col], df_result['Predicted_'+str(n)]))\n    print(\"RMSE of variable\", col, \": \",np.round(rmse, 4))\n    n = n + 1","9b5f2da1":"k = 0\nn = 0\nfig = plt.figure(figsize=(22, 20))\nfor i in range(1, len(cols)+1):\n    z = np.polyfit(df_train.reset_index(drop=True).index, df_train[cols[k]], 1)\n    p = np.poly1d(z)\n    trend = pd.DataFrame(p(df_train.reset_index(drop=True).index), \n                         columns=['Trend'], index=df_train.index)\n    plt.subplot(nrow, ncol, i)\n    plt.plot(df_train[cols[k]], label='Train')\n    plt.plot(df_result[cols[k]], label='Validation')\n    plt.plot(df_result['Predicted_'+str(n)], label='VAR Forecasting')\n    plt.plot(trend['Trend'], label='Trendline')\n    plt.legend()\n    plt.title(cols[k])\n    n = n + 1\n    k = k + 1\nplt.tight_layout()\nplt.show()","beb20edb":"# Actual vs Predicted Values on State: OR","911d3bdb":"# Granger Casuality Test\n\nIf p-value < 0.05, which means X causes Y","4d962223":"# Correlation Matrix on all type of cases\n* excluding total cases","48adb205":"# EDA on all types of cases","82f8d1bc":"# VAR Model","e4dea44d":"# ADF Test\n\nAll series are non-stationary","469f8d68":"# Hey, America!\n\nThis notebook consists of two section\n* EDA on all type of cases (you can perform in deaths too by specifying the deaths in line 5)\n* State-wise VAR analysis (here I considered only state OR, but it can work on any states)\n    * The Granger Casuality test was performed, followed by ADF test","14d41b1c":"# Model Accuracy (RMSE)","26c41f8a":"    Functions to perform Granger Casaulity and ADF test","be0fab0c":"# Data Preparation and Analysis for Modelling","6448ead7":"# Selecting state to perform VAR model","03518e59":"# Extract all the cases columns"}}