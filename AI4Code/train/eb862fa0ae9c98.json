{"cell_type":{"373cfcf5":"code","bdaf95cf":"code","0e761673":"code","c3dc3a4f":"code","bcc3d485":"code","1eeefbcd":"code","04f34bbe":"code","aded60ec":"code","d87670df":"code","4c1b33d8":"code","40d1319c":"code","5ec42e01":"code","a34ef0ee":"code","af5c4e44":"code","37fd1b2b":"code","ed9881b6":"code","82b6a877":"code","0b569386":"code","35d609ba":"code","8e7e9ed7":"code","439476d7":"code","3189d743":"code","6e859b65":"code","1cd251d5":"code","93cf38ec":"code","4fdbac52":"code","9bbda5e7":"code","7a13ac8d":"code","bc01f68a":"code","512d06a2":"code","1d2ee067":"code","608bcd19":"code","f0477c60":"code","cda4ac0f":"code","04c983ec":"code","c6d56971":"code","adee7375":"code","2a56b15d":"code","dce35c70":"code","aec5ae50":"code","239bc5dd":"code","6d4eddb3":"code","0e6206f7":"code","225d112e":"code","bccfa2fc":"code","2ae987e7":"code","d8f88049":"code","e19015d4":"code","d900a1d0":"code","a92958c5":"code","1f77cbf7":"code","554a8a33":"code","db937848":"code","222f0a0c":"code","8f93372c":"code","d8f6c12e":"code","82f3f6c9":"code","0b2f7e1c":"code","0795c832":"code","d8f89cbd":"code","44dcd54e":"code","9d0fb644":"code","7327b3e7":"code","d699948e":"code","129c7320":"code","f4eabc8e":"code","518585e6":"code","d290041b":"code","ac081608":"code","4c2780e6":"code","01b9d24f":"code","566ad0de":"code","9e769ae8":"code","212e385c":"code","ef13c3b7":"code","de85d814":"code","8f0a30ad":"code","d3888ac1":"code","ec49c3d4":"code","d5183abd":"code","90d833e4":"code","94a870be":"code","25e99872":"code","8fffae6f":"code","8f5f9a87":"code","32e26735":"code","7c9586c3":"code","7f943fcb":"code","cb9c6937":"code","393caa35":"code","a830e254":"code","76ac7e26":"code","1bd9fca5":"code","4cbdf661":"code","3f4a0fb3":"code","d9a096f1":"code","23f17901":"markdown","25a1f8e8":"markdown","5a75f1d7":"markdown","a8bdcc69":"markdown","fb755d5d":"markdown","347dbddd":"markdown","f6a568ed":"markdown","400f8fa5":"markdown","b5497e24":"markdown","e1763f32":"markdown","f1918769":"markdown","ecbfcc8d":"markdown","d4232b15":"markdown","5c42992b":"markdown","18df4af6":"markdown","9011252c":"markdown","89ce9910":"markdown","744faa84":"markdown","e956f466":"markdown","4c2fa01a":"markdown","1c692b56":"markdown","899a91c1":"markdown","3351b120":"markdown","907fcac2":"markdown","9754b80a":"markdown","2471835a":"markdown","7915b62f":"markdown"},"source":{"373cfcf5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdaf95cf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n\nplt.rcParams[\"figure.figsize\"]=[10,5]","0e761673":"df=pd.read_csv(\"..\/input\/online-retail-listing\/online_retail_listing.csv\",delimiter=\";\",encoding=\"latin-1\")","c3dc3a4f":"df.head()","bcc3d485":"df.shape","1eeefbcd":"df.nunique()","04f34bbe":"df.info()","aded60ec":"df[\"InvoiceDate\"]=pd.to_datetime(df[\"InvoiceDate\"])","d87670df":"df[\"Customer ID\"]=df[\"Customer ID\"].astype(\"object\")","4c1b33d8":"def myfunction(column):\n    if isinstance(column,str):\n        a=column.replace(\",\",\".\")\n        return a","40d1319c":"df[\"Price\"]=df[\"Price\"].apply(myfunction)","5ec42e01":"df[\"Price\"]","a34ef0ee":"df[\"Price\"]=pd.to_numeric(df[\"Price\"])","af5c4e44":"df[\"Price\"].dtype","37fd1b2b":"df.describe()","ed9881b6":"df[\"Quantity\"][df[\"Quantity\"]<0]=0","82b6a877":"df[\"Quantity\"].iloc[178]","0b569386":"Missing=df.isnull().sum()[df.isnull().sum()>0]\nMissing","35d609ba":"percent_missing=(Missing\/df.shape[0])*100\npercent_missing","8e7e9ed7":"df=df.dropna(subset=[\"Description\",\"Customer ID\"],axis=0)","439476d7":"df.shape","3189d743":"df.isnull().sum()","6e859b65":"sns.heatmap(df.isnull(),cbar=False)\nplt.show()","1cd251d5":"num_features=df.select_dtypes(include=\"number\")\nnum_features.columns","93cf38ec":"cat_features=df.select_dtypes(exclude=\"number\")\ncat_features.columns","4fdbac52":"for i in num_features.columns:\n    sns.boxplot(df[i])\n    plt.show()","9bbda5e7":"df[\"Amount\"]=df[\"Price\"]*df[\"Quantity\"]","7a13ac8d":"df[\"Amount\"]","bc01f68a":"monetary=df.groupby([\"Customer ID\"])[\"Amount\"].sum()","512d06a2":"monetary","1d2ee067":"frequency=df.groupby([\"Customer ID\"])[\"Description\"].count()","608bcd19":"frequency","f0477c60":"df1=pd.merge(monetary,frequency,how=\"inner\",on=\"Customer ID\")\ndf1=df1.reset_index()\ndf1.columns=[\"Customer ID\",\"Monetary\",\"Frequency\"]\ndf1.head()","cda4ac0f":"recency=df[[\"Customer ID\",\"InvoiceDate\"]]\nrecency","04c983ec":"maximum=recency[\"InvoiceDate\"].max()\nmaximum","c6d56971":"maximum=maximum+pd.DateOffset(days=1)\nmaximum","adee7375":"recency['diff']=maximum-recency.InvoiceDate\nrecency.head()","2a56b15d":"df2=pd.DataFrame(recency.groupby(\"Customer ID\")[\"diff\"].min())\ndf2=df2.reset_index()\ndf2.columns=[\"Customer ID\",\"Recency\"]\ndf2.head()","dce35c70":"RFM=pd.merge(df1,df2,how=\"inner\",on=\"Customer ID\")\nRFM","aec5ae50":"# Plot RFM distributions\nplt.figure(figsize=(12,10))\n# Plot distribution of R\nplt.subplot(3, 1, 1); sns.distplot(RFM['Recency'])\n# Plot distribution of F\nplt.subplot(3, 1, 2); sns.distplot(RFM['Frequency'])\n# Plot distribution of M\nplt.subplot(3, 1, 3); sns.distplot(RFM['Monetary'])\n# Show the plot\nplt.show()","239bc5dd":"RFM.info()","6d4eddb3":"RFM['Recency'] = RFM['Recency']\/np.timedelta64(1,'D')","0e6206f7":"RFM.info()","225d112e":"for i in RFM.columns:\n    sns.boxplot(RFM[i])\n    plt.show()","bccfa2fc":"for i in RFM .columns.drop([\"Customer ID\"]):\n    q1=RFM [i].quantile(0.25)\n    q3=RFM [i].quantile(0.75)\n    iqr=q3-q1\n    ll=q1-(1.5*iqr)\n    ul=q3+(1.5*iqr)\n    RFM=RFM[(RFM[i]>ll)&(RFM [i]<ul)] ","2ae987e7":"for i in RFM.columns:\n    sns.boxplot(RFM[i])\n    plt.show()","d8f88049":"RFM.shape","e19015d4":"RFM.head()","d900a1d0":"from sklearn.preprocessing import StandardScaler","a92958c5":"ss=StandardScaler()\ndf_std=pd.DataFrame(ss.fit_transform(RFM),columns=RFM.columns)\ndf_std","1f77cbf7":"df_std.drop([\"Customer ID\"],axis=1,inplace=True)","554a8a33":"from sklearn.cluster import  KMeans","db937848":"k_neighbors=np.arange(1,15)\nkmeans_clusters=[]\n\nfor i in k_neighbors:\n  kmeans=KMeans(n_clusters=i)\n  kmeans.fit(df_std)\n  kmeans_clusters.append(kmeans.inertia_)\n","222f0a0c":"kmeans_clusters","8f93372c":"plt.plot(k_neighbors,kmeans_clusters,marker=\"o\")\nplt.show()","d8f6c12e":"kmeans=KMeans(n_clusters=3,random_state=10)\nkmeans.fit(df_std)","82f3f6c9":"predict=kmeans.predict(df_std)","0b2f7e1c":"df_kmeans=df_std.copy(deep=True)","0795c832":"df_kmeans.head()","d8f89cbd":"df_kmeans[\"Labels\"]=predict","44dcd54e":"df_kmeans.head()","9d0fb644":"kmeans.inertia_","7327b3e7":"from sklearn import metrics","d699948e":"metrics.silhouette_score(df_std,df_kmeans.Labels)","129c7320":"# Recency: How recently a customer has made a purchase. \n# Frequency: How often a customer makes a purchase. \n# Monetary Value: How much money a customer spends on purchases.","f4eabc8e":"sns.lmplot(x='Frequency', y='Monetary', hue='Labels', data=df_kmeans)\nplt.show()","518585e6":"sns.lmplot(x='Recency', y='Monetary', hue='Labels', data=df_kmeans)\nplt.show()","d290041b":"sns.lmplot(x='Frequency', y='Monetary', hue='Labels', data=df_kmeans)\nplt.show()","ac081608":"from scipy.cluster.hierarchy import linkage, dendrogram,cophenet\nfrom scipy.spatial.distance import pdist","4c2780e6":"Z = linkage(df_std, 'ward')   # cophenetic distance (single\/complete\/average)\nc, coph_dists = cophenet(Z , pdist(df_std))\nc","01b9d24f":"Z = linkage(df_std, 'single')   # cophenetic distance (single\/complete\/average)\nc, coph_dists = cophenet(Z , pdist(df_std))\nc","566ad0de":"Z = linkage(df_std, 'complete')   # cophenetic distance (single\/complete\/average)\nc, coph_dists = cophenet(Z , pdist(df_std))\nc","9e769ae8":"Z = linkage(df_std, 'average')   # cophenetic distance (single\/complete\/average)\nc, coph_dists = cophenet(Z , pdist(df_std))\nc","212e385c":"# Avearage cophenetic distance is best.","ef13c3b7":"plt.figure(figsize=[10,10])\nmerg = linkage(df_std, method='average')\ndendrogram(merg, leaf_rotation=90)\nplt.title('Dendrogram')\nplt.xlabel('Data Points')\nplt.ylabel('Euclidean Distances')\nplt.show()","de85d814":"from sklearn.cluster import AgglomerativeClustering\n\nhie_clus = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='average')\ncluster2 = hie_clus.fit_predict(df_std)\n\ndf_h = df_std.copy(deep=True)\ndf_h['label'] = cluster2","8f0a30ad":"metrics.silhouette_score(df_h,df_h.label)\n","d3888ac1":"AGC_clusters = df_h.groupby(['label'])\nDf0=AGC_clusters.get_group(0)\nDf1=AGC_clusters.get_group(1)\n","ec49c3d4":"Df0.shape,Df1.shape","d5183abd":"Df0.head()","90d833e4":"Df1.head()","94a870be":"C0=np.array(Df0.mean())\nC1=np.array(Df1.mean())","25e99872":"C0=C0[:-1]\nC0 #High group Customers","8fffae6f":"C1=C1[:-1]\nC1 #Low group Customers","8f5f9a87":"AGC_I0=0\nAGC_I1=0\n\nfor i in np.arange(Df0.shape[0]):\n  AGC_I0=AGC_I0+np.sum((Df0.iloc[i,:-1]-C0)**2)\nfor i in np.arange(Df1.shape[0]):  \n  AGC_I1=AGC_I1+np.sum((Df1.iloc[i,:-1]-C1)**2)","32e26735":"AGC_I0,AGC_I1","7c9586c3":"AGC_I0+AGC_I1","7f943fcb":"sns.lmplot(x='Frequency', y='Monetary', hue='label', data=df_h)\nplt.show()","cb9c6937":"sns.lmplot(x='Recency', y='Monetary', hue='label', data=df_h)\nplt.show()","393caa35":"x= df_h.drop('label',axis=1)\ny= df_h['label']","a830e254":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report ","76ac7e26":"test_size = 0.30 # taking 70:30 training and test set\nseed = 10  # Random numbmer seeding for reapeatability of the code\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=seed)","1bd9fca5":"#DecisionTreeClassifier is the corresponding Classifier\nDtree = DecisionTreeClassifier(max_depth=3)\nDtree.fit (x_train, y_train)","4cbdf661":"predictValues_train = Dtree.predict(x_train)\npredictValues_validate = Dtree.predict(x_test)\n","3f4a0fb3":"print(classification_report(y_train, predictValues_train))","d9a096f1":"print(classification_report(y_test, predictValues_validate))","23f17901":"# **Inferecnce:**\n#Recent customers is spending less money in purchasing the products.\n\n# Customers who purchased back is spending money in less,medium and high level","25a1f8e8":"# n_clusters=3","5a75f1d7":"**MISSING VALUES**","a8bdcc69":" **0% 22% OF MISSING VALUES SO DROP ROWS**","fb755d5d":"# **Inferecnce:**\n#Customer whose frequency is high is often spending more money in purchasing the products\n#Customer whose frequency is less is spending less money in purchasing the products.","347dbddd":"# Frequency: How often a customer makes a purchase.","f6a568ed":"# **CUSTOMER SEGMENTATION BASED ON RFM ANALYSIS**","400f8fa5":"# OUTLIER TREATMENT","b5497e24":"# ELBOW PLOT  OF N_CLUSTERS VS INERTIA","e1763f32":"# RFM","f1918769":"# **Inference** \n# Orange(1) is high level customers \n# Blue(0) is low level customers\n# Green(2) is medium level customers.","ecbfcc8d":"# Recency: How recently a customer has made a purchase. ","d4232b15":"# Combine monetary ,frequency with customer id","5c42992b":"InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\n\nStockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n\nDescription: Product (item) name. Nominal.\n\nQuantity: The quantities of each product (item) per transaction. Numeric.\n\nInvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n\nUnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n\nCustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n\nCountry: Country name. Nominal. The name of the country where a customer resides.","18df4af6":"# Good Model f1_score is 96%\n# Model has no overfit and underfit.","9011252c":"**DATA TYPE CONVERSION**","89ce9910":"# Highest correlation_score is best distance method","744faa84":"# Recency ","e956f466":"# FOR CLUSTERING Scaling IS IMPORTANT","4c2fa01a":"**CATEGORICAL COLUMNS**","1c692b56":"# Monetary Value: How much money a customer spends on purchases. \n# so it is based on amount so multipluing price and quantity","899a91c1":"# Kmeans clustering","3351b120":"# **Agglomerative clustering**","907fcac2":"# silhouette score of agglomerative clustering is high and inertia is low caompared to kmeans so agglomerative is good cluster.With the help of that we built  classification models.","9754b80a":"**An e-commerce company wants to segment its customers and determine marketing strategies according to these segments. To this end, we will define the behavior of customers and create groups according to clusters in these behaviors. In other words, we will include those who exhibit common behaviors in the same groups and we will try to develop special sales and marketing techniques for these groups.**\n\n","2471835a":"**NUMERICAL COLUMNS**","7915b62f":"# Recency: How recently a customer has made a purchase. \n# Frequency: How often a customer makes a purchase. \n# Monetary Value: How much money a customer spends on purchases. "}}