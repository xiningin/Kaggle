{"cell_type":{"9ff4d005":"code","4d5268be":"code","80816ffc":"code","f8d7c513":"code","3cb454fe":"code","b7102a0d":"code","0a7ad095":"code","db1a5faf":"code","31cac9a1":"markdown","a61aaaf8":"markdown","311c15b4":"markdown","30e31d11":"markdown","140c0420":"markdown","4c82a035":"markdown","f56a8833":"markdown","0aa8a1c8":"markdown"},"source":{"9ff4d005":"%matplotlib inline\nimport os\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torchvision\n\ntorch.set_default_tensor_type(torch.FloatTensor)","4d5268be":"DATA_DIR = '\/kaggle\/input\/house-prices-advanced-regression-techniques'\nOUT_DIR = '\/kaggle\/working'\ntrain_data = pd.read_csv(os.path.join(DATA_DIR, 'train.csv'))\ntest_data = pd.read_csv(os.path.join(DATA_DIR, 'test.csv'))","80816ffc":"all_features = pd.concat((train_data.iloc[:, 1:-1], test_data.iloc[:, 1:]))\nidx = all_features.dtypes[all_features.dtypes != 'object'].index\nall_features[idx] = all_features[idx].apply(\n    lambda x: (x - x.mean()) \/ (x.std())).fillna(0)\nall_features = pd.get_dummies(all_features, dummy_na=True)","f8d7c513":"n_train = train_data.shape[0]\ntrain_features = torch.tensor(all_features[:n_train].values, dtype=torch.float)\ntest_features = torch.tensor(all_features[n_train:].values, dtype=torch.float)\ntrain_labels = torch.tensor(train_data.SalePrice.values, dtype=torch.float).view(-1, 1)","3cb454fe":"def get_k_fold_data(k, i, X, y):\n    assert k > 1 and k > i\n    fold_size = X.shape[0] \/\/ k\n    # if i == 0:\n    #     return X[fold_size:, :], y[fold_size:], X[:fold_size, :], y[:fold_size]\n    return (\n        torch.cat((X[:i*fold_size, :], X[(i + 1) * fold_size:, :]), dim=0),\n        torch.cat((y[:i*fold_size], y[(i + 1) * fold_size:]), dim=0),\n        X[i*fold_size:(i+1) * fold_size, :],\n        y[i*fold_size:(i+1) * fold_size],\n    )\n\ndef log_rmse(net: nn.Module, features: torch.Tensor, labels: torch.Tensor) -> float:\n    with torch.no_grad():\n        # \u5c06\u5c0f\u4e8e1\u7684\u503c\u8bbe\u62101\uff0c\u4f7f\u5f97\u53d6\u5bf9\u6570\u65f6\u6570\u503c\u66f4\u7a33\u5b9a\n        clipped_preds = torch.max(net(features), torch.tensor(1.0))\n        rmse = torch.sqrt(2 * loss(clipped_preds.log(), labels.log()).mean())\n    return rmse.item()","b7102a0d":"lr  = 5\nk = 5\nepochs = 100\nbatch_size = 64\nweight_decay = 0.01\nnum_inputs = train_features.shape[1]\nloss = nn.MSELoss()\ndef get_net(num_inputs: int):\n    net = nn.Linear(num_inputs, 1)\n    for param in net.parameters():\n        nn.init.normal_(param, mean=0, std=0.1)\n    return net","0a7ad095":"train_l_sum, valid_l_sum = 0.0, 0.0\nnet = get_net(num_inputs)\noptimizer = torch.optim.Adam(net.parameters(), lr=lr, weight_decay=weight_decay)\nfor i in range(k):\n    X_train, y_train, X_valid, y_valid = get_k_fold_data(k, i, train_features, train_labels)\n    dataset = torch.utils.data.TensorDataset(X_train, y_train)\n    data_iter = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)\n    train_rmse, valid_rmse = list(), list()\n    net = net.float()\n    for epoch in range(epochs):\n        for X, y in data_iter:\n            l = loss(net(X.float()), y.float())\n            optimizer.zero_grad()\n            l.backward()\n            optimizer.step()\n        train_rmse.append(log_rmse(net, X_train, y_train))\n        valid_rmse.append(log_rmse(net, X_valid, y_valid))\n    train_l_sum += train_rmse[-1]\n    valid_l_sum += valid_rmse[-1]\n    print(f'fold {i}, train {train_rmse[-1]}, valid {valid_rmse[-1]}')\nprint(f'train {train_l_sum \/ k}, valid {valid_l_sum \/ k}')\nprint(f'std {torch.std(net(train_features) \/ train_labels - 1).detach().item()}')","db1a5faf":"predicts = net(test_features).detach().numpy()\ntest_data['SalePrice'] = pd.Series(predicts.reshape(1, -1)[0])\nsubmission = pd.concat((test_data['Id'], test_data['SalePrice']), axis=1)\nsubmission.to_csv(os.path.join(OUT_DIR, 'submission.csv'), index=False)","31cac9a1":"## \u6570\u636e\u9884\u5904\u7406","a61aaaf8":"## \u5bfc\u5165\u5e93","311c15b4":"## \u9884\u6d4b","30e31d11":"## \u8bad\u7ec3\u53c2\u6570","140c0420":"## \u8bad\u7ec3\u76f8\u5173\u7684\u51fd\u6570","4c82a035":"## Pytorch \u8f93\u5165\u8f93\u51fa\u6570\u636e","f56a8833":"## \u8bad\u7ec3","0aa8a1c8":"## \u8bfb\u53d6\u6570\u636e"}}