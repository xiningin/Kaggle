{"cell_type":{"e00d175a":"code","b97c02b7":"code","6a7d35b4":"code","78903e0a":"code","706d8be2":"code","37258038":"code","f8e26b38":"code","cfef83fe":"code","ea89e145":"code","53296135":"code","e9922700":"code","659cfe28":"code","7796ef74":"code","fea9ee50":"markdown","49402ef5":"markdown","a19ffde7":"markdown","1af484bb":"markdown","ac3d47bf":"markdown","86d8245a":"markdown","ffba4135":"markdown"},"source":{"e00d175a":"import os\nimport json\nimport pickle\nfrom glob import glob\nfrom PIL import Image\n\nimport torch\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom torchvision import models, transforms\nfrom torch.utils.data import DataLoader, Dataset\n\nfrom os.path import basename, splitext\nfrom collections import Counter","b97c02b7":"%%capture\n!wget -nc https:\/\/s3.amazonaws.com\/deep-learning-models\/image-models\/imagenet_class_index.json\n!wget -nc https:\/\/git.tools.f4.htw-berlin.de\/smi\/pytorch-hierarchical-imagenet-dataset\/raw\/0ef57a30eb1b7887e35ad59529c00f7ffcfc121a\/wordnet.is_a.txt\n!wget -nc https:\/\/git.tools.f4.htw-berlin.de\/smi\/pytorch-hierarchical-imagenet-dataset\/raw\/0ef57a30eb1b7887e35ad59529c00f7ffcfc121a\/words.txt\n\npath = '\/kaggle\/input\/petfinder-pawpularity-score\/'\ntrain_df = pd.read_csv(path + '\/train.csv')\n#test_df = pd.read_csv(path + '\/test.csv') not used for now!\n\n# those are the classes in resnet\nwith open('\/kaggle\/working\/imagenet_class_index.json') as f:\n    resnet_classes = [id for (id, name) in list(json.load(f).values())]\n\n# parent element for each class\nchild_parent = {}\nwith open('\/kaggle\/working\/wordnet.is_a.txt') as f:\n    for line in f.readlines():\n        parent, child = line.split()\n        child_parent[child] = parent\n\n# label map\nlabels = {}\nwith open('\/kaggle\/working\/words.txt') as f:\n    for line in f.readlines():\n        code, label = line.split('\\t')\n        labels[code] = label.strip()","6a7d35b4":"# Sanity Test\n[labels[c] + ' > '+ labels[child_parent[c]] for c in resnet_classes][0:10]","78903e0a":"%%capture\nmodel = models.resnet50(pretrained=True)\nmodel.eval()\n\nclass PetDataset(Dataset):\n    def __init__(self, path):\n        self.image_paths = glob(os.path.join(path, '*.jpg'))\n        \n    def __len__(self):\n        return len(self.image_paths)\n    \n    def __getitem__(self, index):\n        im = Image.open(self.image_paths[index])\n        return self.trans(im)\n        \n    \n    def get_paths(self):\n        return self.image_paths\n    \n    \n    trans = transforms.Compose([transforms.Resize([224,224]),\n                            transforms.ToTensor(),\n                            transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                                 std=[0.229, 0.224, 0.225])\n                           ])\nbatch_size = 128\ntrain_data = PetDataset(path + '\/train')\ntrain_dl = DataLoader(train_data, batch_size)\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","706d8be2":"print(device)\nmodel.to(device)\ninferred_classes = []\nfor batch in train_dl:\n    batch = batch.to(device)\n    with torch.no_grad():\n        inferred_classes.extend([resnet_classes[x] for x in np.argmax(model(batch).cpu().numpy(), axis=1)])\n    ","37258038":"def get_parent(c):\n    '''return the parent class but do not go up to generic dog\/cat\/entity'''\n    return child_parent[c] if child_parent[c] not in ['n02121808', 'n02084071', 'n00001740'] else c\n\ndef get_classes_below(all_items, n):\n    return [class_id  for (class_id, count) in  Counter(all_items).items() if count < n]\n\ndef is_pet(c):\n    parent = child_parent[c]\n    while parent not in ['n02121808', 'n02084071', 'n00001740']:\n        parent = child_parent[parent]\n    return parent in  ['n02121808', 'n02084071']","f8e26b38":"updated_classes = [get_parent(c) for c in inferred_classes]\nsmall_classes = get_classes_below(updated_classes, 50)\nwhile small_classes:\n    old_len = len(small_classes)\n    updated_classes = [get_parent(c) if c in small_classes else c for c in updated_classes ]\n    small_classes = get_classes_below(updated_classes, 50)\n    if len(small_classes) == old_len:\n        break","cfef83fe":"inferred_class_names = [labels[p] if is_pet(p) else 'other' for p in updated_classes]\ninferred_class_names = [c.split(',')[0] for c in inferred_class_names] # shorten\nids = [splitext(basename(p))[0] for p in train_data.get_paths()]\nclass_df = pd.DataFrame(list(zip(ids, inferred_class_names)), columns = ['Id', 'Class'])","ea89e145":"sns.set(rc={'figure.figsize':(15,5)})\nsns.countplot(data=class_df, x='Class', order=class_df['Class'].value_counts().index)\nplt.xticks(rotation=90);","53296135":"counts = class_df.groupby('Class').count().sort_values('Id', ascending=False)\ncounts","e9922700":"train_df.set_index('Id', inplace=True)\nclass_df.set_index('Id', inplace=True)\ntrain_df = train_df.join(class_df)  #.groupby('Class')['Pawpularity'].mean().sort_values(ascending=False)","659cfe28":"sns.set_theme(style=\"ticks\")\nax = sns.boxplot(x=\"Class\", y=\"Pawpularity\", data=train_df )\nplt.xticks(rotation=90);\n\nax.yaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)","7796ef74":"class_df.to_csv('train_imagenet_classes.csv')","fea9ee50":"# TODO \n* See if there is some correlation between class and pawpularity\n* Set up pipeline to recreat the same transformation for test set. since we used no additional information we could do this in one step. However we will need a mapping from start to end to use this method on a test set. This should map every possible imagenet class to one of the resulting classes.","49402ef5":"# Load ImageNet Classes and hierarchy information","a19ffde7":"# Clean Labels\n* Go recursively up in hierarchy to remove small classes but not if this results in one of the too generic classes 'dog', 'cat' or above the highest\n* Replace class id with readable string\n* Replace everything that is not a cat or dog with 'other'","1af484bb":"The original ImageNet dataset consists of 1000 classes of which a substantiall amount are pets (I did not go through the classes but 118 dog breeds are reported [here](https:\/\/github.com\/megvii-research\/FSSD_OoD_Detection\/issues\/1)). So the idea is simply to use the ImageNet trained ResNet on those to infer those classes and use them for further exploration. \n\nTo reduce the amount of result categories, we use the hierarchical nature of ImageNet\/WorldNet and go up one step from each label. But if this step up is too generic, we omit it.\n\n","ac3d47bf":"# First Look","86d8245a":"# Result\nAs we can see, we have a typical long tail. Also the second largest class is 'other'. If this information is valuable for inferring the desired Pawpularity can be explored next.","ffba4135":"# Create Dataset and Labels"}}