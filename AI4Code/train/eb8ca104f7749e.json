{"cell_type":{"ba3689f3":"code","b937e19a":"code","92ba52c8":"code","1d65dc56":"code","314c7207":"code","fc3f2d34":"code","58fce60c":"code","40e008c9":"code","2724ba79":"code","afecee0c":"code","a0a7ce36":"code","927ab4b3":"code","c464f28a":"code","e178774c":"code","ae2a49fb":"code","60091d61":"code","51dca73c":"code","9bffdb67":"code","84949c1d":"code","28f9df15":"code","6051c59e":"code","500280f8":"code","2397babc":"code","ada38262":"code","95288925":"code","dab3b92c":"code","26532133":"code","f0103220":"code","5845165a":"code","b17082e0":"code","ee078078":"code","7bc3498a":"code","f935903f":"code","efb6a892":"code","d013d63f":"code","cf3ad060":"code","a2f5c1ee":"code","00f447a7":"code","2f754ec5":"code","6359f131":"code","07f34911":"code","ce79566f":"code","676bff59":"code","62f7486e":"code","8e0d9f3c":"code","e2ef4a6a":"code","f9be5add":"code","437e3a91":"code","37fa31d7":"code","4bfe0ad4":"code","868ac73a":"code","62a33752":"code","9b83bcff":"code","ee212d22":"code","e69bc5e6":"code","b0111fff":"code","baf30b6f":"code","f695532b":"code","752dddc8":"code","04984695":"code","91ab2306":"code","49a15fab":"code","2254afa7":"code","4bf79f3f":"code","5424265b":"code","341304a3":"code","ecc54112":"code","4cee139f":"code","57b938d9":"code","727f2fc7":"code","a5148a24":"code","aa2630f4":"code","13ec43fa":"code","39a4ec21":"code","45031895":"code","f79bf28d":"code","f243e330":"code","5ff822c5":"code","db0732a3":"code","0c24c727":"code","c33428f6":"code","c4ddb07c":"code","139f22cb":"code","5363bff5":"code","712a539f":"code","210eaa9d":"code","7f3b12fb":"code","1916e115":"code","b3844dad":"code","9ad4c1fc":"code","adeb3657":"code","fd69d902":"code","79c8a51f":"markdown"},"source":{"ba3689f3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","b937e19a":"'''\nREASONS = {\n    '0': 'Missing',\n    '1': 'Infectious\/Parasitic',\n    '2': 'Neoplasms',\n    '3': 'Blood Organs\/Immune Disorders',\n    '4': 'Endocrine\/Nutritional\/Metabolic',\n    '5': 'Mental\/Behavioral',\n    '6': 'Nervous system',\n    '7': 'Eyes and Adnexa',\n    '8': 'Ears and mastroid',\n    '9': 'Circulatory system',\n    '10': 'Respiratory system',\n    '11': 'Digestive system',\n    '12': 'Skin\/Subcutaneous tissue',\n    '13': 'Musculoskeletal system\/Connective tissue',\n    '14': 'Genitourinary system',\n    '15': 'Pregnancy\/Childbirth\/Puerperium',\n    '16': 'Perinatal period',\n    '17': 'Congenital\/Chromosomal Abnormalities',\n    '18': 'Abnormal clinical\/Laboratory findings',\n    '19': 'Injury\/Poisoning\/External causes',\n    '20': 'External causes of morbidity\/mortality',\n    '21': 'Patient follow-up',\n    '22': 'Medical consultation',\n    '23': 'Blood donation',\n    '24': 'Laboratory examination',\n    '25': 'Unjustified absence',\n    '26': 'Physiotherapy',\n    '27': 'Dental consultation'\n} '''","92ba52c8":"REASONS = ['Missing', 'Infectious\/Parasitic', 'Neoplasms', 'Blood Organs\/Immune Disorders', 'Endocrine\/Nutritional\/Metabolic', 'Mental\/Behavioral',\n          'Nervous system', 'Eyes and Adnexa', 'Ears and mastoid', 'Circulatory system', 'Respiratory system', 'Digestive system', 'Skin\/Subcutaneous tissue',\n          'Musculoskeletal system\/Connective tissue', 'Genitourinary system', 'Pregnancy\/Childbirth\/Puerperium', 'Perinatal period', 'Congenital\/Chromosomal Abnormalities',\n          'Abnormal clinical\/Laboratory findings', 'Injury\/Poisoning\/External causes', 'External causes of morbidity\/mortality', 'Health status factors', 'Patient follow-up', 'Medical consultation',\n          'Blood donation', 'Laboratory examination', 'Unjustified absence', 'Physiotherapy', 'Dental consultation']","1d65dc56":"df = pd.read_csv(\"..\/input\/absenteeism-cascade\/Absenteesim\/Absenteeism_at_work.csv\", sep=';')\n#df = df.drop_duplicates().reset_index(drop=True)","314c7207":"df = df[df['Absenteeism time in hours'] != 0]","fc3f2d34":"style_df = pd.DataFrame(df['Absenteeism time in hours'].value_counts().reset_index())","58fce60c":"style_df.columns","40e008c9":"def color(val):\n    if val >=8 :\n        color='blue'\n    else:\n        color=None\n    return 'background-color: %s' % color","2724ba79":"style_df = style_df.sort_values(by='index')","afecee0c":"style_df = style_df.rename(columns={\"index\": \"Number of hours\", \"Absenteeism time in hours\": \"Count\"})","a0a7ce36":"new_df = style_df.style.applymap(color, subset=['Number of hours'])","927ab4b3":"new_df","c464f28a":"df.info()","e178774c":"df[df.drop(\"Absenteeism time in hours\", axis=1).duplicated(keep=False)]","ae2a49fb":"df[df.drop(\"Absenteeism time in hours\", axis=1).duplicated(keep=False)].shape","60091d61":"df_0 = df[df['Absenteeism time in hours'] == 0]","51dca73c":"df = df[df['Absenteeism time in hours'] != 0]\ndf = df[df['Absenteeism time in hours'] <= 24]","9bffdb67":"df.columns","84949c1d":"cat_cols = ['ID', 'Reason for absence', 'Month of absence', 'Day of the week',\n       'Seasons','Disciplinary failure', 'Education', 'Social drinker',\n       'Social smoker']\n\ncont_cols = [i for i in df.columns if i not in cat_cols]\ncont_cols","28f9df15":"corr_mat = df[cont_cols].corr()\nplt.figure(figsize=(14,7))\nmask = np.triu(np.ones_like(corr_mat, dtype=bool))\nsns.heatmap(corr_mat, annot=True, linewidth=1, linecolor='black', mask=mask, vmin=-1, vmax=1)\n#plt.xticks(rotation=50)\n#plt.savefig('CorrelationMat.png')","6051c59e":"\"\"\"\n'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r',\n'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2',\n'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', \n'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral',\n'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', \n'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', \n'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', \n'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r',\n'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', \n'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket',\n'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', \n'tab20c_r', 'terrain', 'terrain_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', \n'winter_r'\n\"\"\"","500280f8":"df.shape","2397babc":"df[\"Reason for absence\"] = df[\"Reason for absence\"].apply(lambda x: REASONS[x])","ada38262":"temp_df = df[\"Reason for absence\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Reason for absence'],\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Reason for absence'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'REASON OF ABSENCE FOR THE EMPLOYEES' , xaxis = dict(title = 'Reason for absence'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","95288925":"def pie_plot(cnt_srs, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent+label',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=False,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    \n    return trace","dab3b92c":"def pie_plot(cnt_srs, title):\n    labels=['No']\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent+label',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=False,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    \n    return trace\n#layout = go.Layout(legend=dict(orientation=\"h\"))\nfigure=go.Figure(data=[pie_plot(df['Reason for absence'].value_counts(), 'Reason of Absence')])\niplot(figure)","26532133":"MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']","f0103220":"temp_df = df[\"Month of absence\"].value_counts().sort_index()\ntrace1 = go.Bar(\n                x = MONTHS,\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'MONTH OF ABSENCE' , xaxis = dict(title = 'Months'), yaxis = dict(title = 'Count'),\n                  width=700, height=500)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","5845165a":"fig = go.Figure()\n\nfor i,month in enumerate(MONTHS):\n    fig.add_trace(go.Box(x=df['Month of absence'][df['Month of absence'] == (i+1)],\n                            y=df['Absenteeism time in hours'][df['Month of absence'] == (i+1)],\n                        boxpoints='all'))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS MONTHS' , xaxis = dict(title = 'Month',tickvals=list(range(1,13)),ticktext=MONTHS), \n                  height=500, width=900,yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","b17082e0":"DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']","ee078078":"temp_df = df[\"Day of the week\"].value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = DAYS,\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5, 0.5, 0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'DAY OF THE WEEK' , xaxis = dict(title = 'Day of the week'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","7bc3498a":"fig = go.Figure()\n\nfor i,day in enumerate(DAYS):\n    fig.add_trace(go.Box(x=df['Day of the week'][df['Day of the week'] == (i+2)],\n                            y=df['Absenteeism time in hours'][df['Day of the week'] == (i+2)],\n                        boxpoints='all'))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS DAYS OF THE WEEK' , xaxis = dict(title = 'Week Day',tickvals=[2,3,4,5,6],ticktext=DAYS),\n                  height=500, width=700,\n                  yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","f935903f":"fig = px.scatter(df, x='Day of the week', y='Absenteeism time in hours')\nfig.show()","efb6a892":"SEASONS = ['Summer', 'Autumn', 'Winter', 'Spring']","d013d63f":"temp_df = df[\"Seasons\"].value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = SEASONS,\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(0,255,103)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5, 0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'SEASONS' , xaxis = dict(title = 'Seasons'), yaxis = dict(title = 'Count'),\n                  width=600, height=500)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","cf3ad060":"fig = go.Figure()\n\nfor i,season in enumerate(SEASONS):\n    fig.add_trace(go.Box(x=df['Seasons'][df['Seasons'] == (i+1)],\n                            y=df['Absenteeism time in hours'][df['Seasons'] == (i+1)],\n                        hovertext=df['Day of the week'], boxpoints='all'))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS SEASONS' , xaxis = dict(title ='Season',tickvals=[1,2,3,4],ticktext=SEASONS), \n                  height=500, width=700,\n                  yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","a2f5c1ee":"df['Social smoker'].value_counts()","00f447a7":"temp_df = df['Social smoker'].value_counts().sort_index()\nsmoker_labels = ['No','Yes']\n\ntrace1 = go.Bar(\n                x = smoker_labels,\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(252,222,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'DISTRIBUTION AMONG SMOKERS AND NON-SMOKERS' , xaxis = dict(title = 'Smokers'), yaxis = dict(title = 'Count'),\n                  width=700, height=500)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","2f754ec5":"fig = go.Figure()\n\nsmoker_labels = ['No', 'Yes']\n\nfor i,smoker_label in enumerate(smoker_labels):\n    fig.add_trace(go.Violin(x=df['Social smoker'][df['Social smoker'] == i],\n                            y=df['Absenteeism time in hours'][df['Social smoker'] == i],\n                            box_visible=True,\n                            meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS SMOKERS & NON-SMOKERS' , xaxis = dict(title ='Smoker',tickvals=[0,1],ticktext=smoker_labels), \n                   height=500,width=500,yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","6359f131":"temp_df = df['Social drinker'].value_counts().sort_index()\ndrinker_labels = ['No', 'Yes']\n\ntrace1 = go.Bar(\n                x = drinker_labels,\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(17,0,255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'DISTRIBUTION AMONG DRINKERS AND NON-DRINKERS' , xaxis = dict(title = 'Drinkers'), yaxis = dict(title = 'Count'),\n                  width=700, height=500)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","07f34911":"fig = go.Figure()\n\ndrinker_labels = ['No', 'Yes']\n\nfor i,drinker_label in enumerate(drinker_labels):\n    fig.add_trace(go.Violin(x=df['Social drinker'][df['Social drinker'] == i],\n                            y=df['Absenteeism time in hours'][df['Social drinker'] == i],\n                            box_visible=True,\n                            meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS DRINKERS & NON-DRINKERS' , xaxis = dict(title ='Drinker',tickvals=[0,1],ticktext=drinker_labels), \n                  width=550, height=500,yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","ce79566f":"fig = go.Figure()\n\nfor i,season in enumerate(SEASONS):\n    fig.add_trace(go.Violin(x=df['Seasons'][df['Seasons'] == (i+1)],\n                            y=df['Work load Average\/day '][df['Seasons'] == (i+1)],\n                            box_visible=True,\n                            meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'WORK LOAD DISTRIBUTION ACROSS SEASONS' , xaxis = dict(title ='Season',tickvals=[1,2,3,4],ticktext=SEASONS), \n                  yaxis = dict(title = 'Average Work load per day'), showlegend=False)\nfig.show()","676bff59":"fig = go.Figure()\n\nfor i,day in enumerate(DAYS):\n    fig.add_trace(go.Box(x=df['Day of the week'][df['Day of the week'] == (i+2)],\n                            y=df['Work load Average\/day '][df['Day of the week'] == (i+2)]))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'WORK LOAD DISTRIBUTION ACROSS DAYS OF THE WEEK' , xaxis = dict(title = 'Week Day',tickvals=[2,3,4,5,6],ticktext=DAYS), \n                  yaxis = dict(title = 'Average Work load per day'), showlegend=False)\nfig.show()","62f7486e":"fig = go.Figure()\n\nfor i,month in enumerate(MONTHS):\n    fig.add_trace(go.Box(x=df['Month of absence'][df['Month of absence'] == (i+1)],\n                            y=df['Work load Average\/day '][df['Month of absence'] == (i+1)]))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'WORK LOAD DISTRIBUTION ACROSS MONTHS' , xaxis = dict(title = 'Month',tickvals=list(range(1,13)),ticktext=MONTHS), \n                  yaxis = dict(title = 'Average Work load per day'), showlegend=False)\nfig.show()","8e0d9f3c":"sns.pairplot(df)","e2ef4a6a":"fig = px.scatter(df, y=\"Service time\", x=\"Age\")\nfig.update_layout(template='plotly_dark', legend=dict(orientation='h'))\nfig.show()","f9be5add":"df[\"Education\"].value_counts()","437e3a91":"fig = go.Figure()\n\nedu_levels = ['High school', 'Graduate', 'Postgraduate', 'Masters and PHD']\n\nfor i,edu_level in enumerate(edu_levels):\n    fig.add_trace(go.Violin(x=df['Education'][df['Education'] == (i+1)],\n                            y=df['Absenteeism time in hours'][df['Education'] == (i+1)],\n                            box_visible=True,\n                            meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS EDUCATION LEVELS' , xaxis = dict(title = 'Education levels',tickvals=[1,2,3,4],ticktext=edu_levels), \n                  yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","37fa31d7":"temp_df = df[\"Education\"].value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = ['High school', 'Graduate', 'Postgraduate', 'Masters and PHD'],\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(0,255,103)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5, 0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'EDUCATION' , xaxis = dict(title = 'Education'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","4bfe0ad4":"def categorize_BMI(x):\n    if x>=18.5 and x<=24.9:\n        return 'Normal'\n    elif x>=25 and x<=29.9:\n        return 'Overweight'\n    elif x>=30:\n        return 'Obese'","868ac73a":"df[\"BMI Category\"] = df[\"Body mass index\"].apply(categorize_BMI)","62a33752":"df[\"BMI Category\"].value_counts()","9b83bcff":"df[\"BMI Category\"].value_counts().sort_index()","ee212d22":"temp_df = df[\"BMI Category\"].value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = ['Normal', 'Overweight', 'Obese'],\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(0,255,103)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5, 0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'EDUCATION' , xaxis = dict(title = 'Education'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","e69bc5e6":"df['Work load Average\/day ']","b0111fff":"fig = go.Figure()\nBMI_list = ['Normal', 'Overweight', 'Obese']\n\nfor bmi in BMI_list:\n    fig.add_trace(go.Box(x=df['BMI Category'][df['BMI Category'] == bmi],\n                            y=df['Work load Average\/day '][df['BMI Category'] == bmi]))\n                            #box_visible=True,\n                            #meanline_visible=True))\n\nfig.update_layout(template='plotly_dark',title = 'DISTRIBUTION ACROSS BMI CATEGORY' , xaxis = dict(title = 'BMI Category'), \n                  yaxis = dict(title = 'Absenteeism Hours Distribution'), showlegend=False)\nfig.show()","baf30b6f":"fig = px.scatter(df, x=\"Weight\", y=\"Age\", size=\"Service time\")\nfig.update_layout(template='plotly_dark')\nfig.add_annotation(x=110, y=63,\n            text=\"Size of bubble represents Service time\",\n            showarrow=False,\n            yshift=10)\nfig.show()","f695532b":"fig = px.scatter(df, x=\"Service time\", y=\"Age\")\nfig.update_layout(template='plotly_dark')\nfig.show()","752dddc8":"fig = px.scatter(df, x=\"Body mass index\", y=\"Age\")\nfig.update_layout(template='plotly_dark')\nfig.show()","04984695":"fig = px.scatter(df, x=\"Body mass index\", y=\"Service time\")\nfig.update_layout(template='plotly_dark')\nfig.show()","91ab2306":"fig = px.scatter(df, x=\"Body mass index\", y=\"Weight\")\nfig.update_layout(template='plotly_dark')\nfig.show()","49a15fab":"df_unjustified = df[df[\"Reason for absence\"] == 'Unjustified absence']","2254afa7":"df_unjustified","4bf79f3f":"df[df['Hit target'] == 100]","5424265b":"df[df[\"Reason for absence\"] == 'Unjustified absence'][\"Seasons\"].value_counts()","341304a3":"df[df[\"Reason for absence\"] == 'Unjustified absence'][\"BMI Category\"].value_counts()","ecc54112":"df_0['Reason for absence'].value_counts()","4cee139f":"sns.scatterplot(data=df, x='Age', y='Hit target')","57b938d9":"fig = px.scatter(df, x=\"Age\", y=\"Hit target\", size='Distance from Residence to Work')\nfig.update_layout(template='plotly_dark')\nfig.show()","727f2fc7":"fig = px.scatter(df, x=\"Distance from Residence to Work\", y=\"Transportation expense\")\nfig.update_layout(template='plotly_dark')\nfig.show()","a5148a24":"df['Age'].plot(kind='kde')","aa2630f4":"df['Distance from Residence to Work'].plot(kind='hist', bins=df['Distance from Residence to Work'].nunique())","13ec43fa":"df['Work load Average\/day '].plot(kind='hist',bins=df['Work load Average\/day '].nunique())","39a4ec21":"df['Cohabitants'] = df['Pet'] + df['Son']","45031895":"df['Cohabitants'].value_counts()","f79bf28d":"temp_df = df[\"Cohabitants\"].value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = ['0','1','2','3','4','5','6','7','8','9'],\n                y = [278,40,107,155,49,23,9,0,0,7],\n                marker = dict(color = 'rgb(255,0,43)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=[278,40,107,155,49,23,9,0,0,7], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'COHABITANTS' , xaxis = dict(title = 'Number of Cohabitants'), yaxis = dict(title = 'Count'),\n                  height=500, width=700)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","f243e330":"df['Disciplinary failure'].value_counts()","5ff822c5":"layout = go.Layout(height=500, width=500,template= \"plotly_dark\")\nfigure=go.Figure(data=[pie_plot(df['Disciplinary failure'].value_counts(), 'Disciplinary failure')], layout=layout)\niplot(figure)","db0732a3":"labels=['No']\nvalues=df['Disciplinary failure'].value_counts()\ntrace = go.Pie(labels=labels, \n               values=values, \n               title='Disciplinary Failure', \n               hoverinfo='percent+value', \n               textinfo='percent+label',\n               textposition='inside',\n               hole=0.7,\n               showlegend=False,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n              )\nlayout = go.Layout(height=500, width=500,template= \"plotly_dark\")\nfigure=go.Figure(data=[trace], layout=layout)\niplot(figure)","0c24c727":"df['Education'].value_counts(normalize=True)","c33428f6":"labels=['High School', 'Post Graduate', 'Graduate', 'Master and Doctor']\nvalues=df['Education'].value_counts()\ntrace = go.Pie(labels=labels, \n               values=values, \n               title='Education', \n               hoverinfo='percent+value', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.7,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n              )\nlayout = go.Layout(height=600, width=600,template= \"plotly_dark\")\nfigure=go.Figure(data=[trace], layout=layout)\niplot(figure)","c4ddb07c":"df['ID'].unique()","139f22cb":"df[df['ID'] == 29]","5363bff5":"df_edu = df.groupby('ID')['Education'].median()","712a539f":"df_edu.value_counts(normalize=True)","210eaa9d":"labels=['High School', 'Post Graduate', 'Graduate', 'Master and Doctor']\nvalues=df_edu.value_counts()\ntrace = go.Pie(labels=labels, \n               values=values, \n               title='Education', \n               hoverinfo='percent+value', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.7,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n              )\nlayout = go.Layout(height=600, width=600,template= \"plotly_dark\", title='EDUCATION LEVEL OF THE 33 EMPLOYEES')\nfigure=go.Figure(data=[trace], layout=layout)\niplot(figure)","7f3b12fb":"df_cohabitants = df.groupby('ID')['Cohabitants'].median()","1916e115":"df_cohabitants.value_counts()","b3844dad":"temp_df = df_cohabitants.value_counts().sort_index()\n\ntrace1 = go.Bar(\n                x = ['0','1','2','3','4','5','6','7','8','9'],\n                y = [11,2,7,6,3,1,2,0,0,1],\n                marker = dict(color = 'rgb(255,0,43)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=[11,2,7,6,3,1,2,0,0,1], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'COHABITANTS OF THE 33 EMPLOYEES' , xaxis = dict(title = 'Number of Cohabitants'), yaxis = dict(title = 'Number of Employees'),\n                  height=500, width=700)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","9ad4c1fc":"df_bmi_cat = df.groupby(['ID','BMI Category']).count().reset_index()['BMI Category'].value_counts()","adeb3657":"df_bmi_cat","fd69d902":"temp_df = df_bmi_cat\n\ntrace1 = go.Bar(\n                x = ['Normal', 'Overweight', 'Obese'],\n                y = temp_df.tolist(),\n                marker = dict(color = 'rgb(0,255,103)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df.tolist(), textposition='outside',\n                width=[0.5, 0.5, 0.5, 0.5])\nlayout = go.Layout(template= \"plotly_dark\",title = 'BMI CATEGORY OF THE 33 EMPLOYEES' , xaxis = dict(title = 'BMI Category'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","79c8a51f":"## Update: Some code cells weren't saved, They have been rerunned and saved"}}