{"cell_type":{"32503705":"code","52b97ddb":"code","41d5a15a":"code","39416fd7":"code","7fbc67b7":"code","edeb3632":"code","786a364c":"code","ce3955ca":"code","4287e785":"code","cb18b117":"markdown","dfe3d9c2":"markdown"},"source":{"32503705":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\nimport warnings\n\nwarnings.filterwarnings('ignore')","52b97ddb":"df=pd.read_csv('..\/input\/data-scientist-job-market-in-the-us\/alldata.csv')\ndf.head(2)","41d5a15a":"# job-description printer, you pick the index number\ndef job_describe(n, df=df):\n    print ('Position:',df.iloc[n]['position'])\n    print('---------------')\n    print(df.iloc[n]['description'])\n    \njob_describe(7)","39416fd7":"#a handful of descriptions are NaN, remove these rows\ndf.dropna(axis=0,subset=['description'],inplace=True)","7fbc67b7":"#make column with States\ndef extract_state (s):\n    return s.split(',')[1].split(' ')[1]\n\ndf['state']=df['location'].apply(extract_state)","edeb3632":"#extract tf-idf representation, and compute similarities\nvectorizer=TfidfVectorizer(analyzer='word',\n                           stop_words='english',ngram_range=(1,3),min_df=0)\nvectors=vectorizer.fit_transform(df['description'])\n\nkernel=linear_kernel(vectors,vectors)","786a364c":"#Sanity check. A dark square with an orange diagonal line is what you'd expect.\nimport matplotlib.pyplot as plt\nfrom skimage.io import imshow\n\nimshow(kernel)\nplt.show()","ce3955ca":"#similar job finder\ndef similar_jobs (index, more=False, state=None):\n    if state==None:\n        if more==False:\n            ind=kernel[index].argsort()[-2:-10:-1]\n        elif more==True:\n            ind=kernel[index].argsort()[-2:-20:-1]\n        kers=[kernel[index,i] for i in ind]\n        kers=np.array(kers)\n        sims=df.iloc[ind]\n        sims['similarity score']=kers\n        return sims\n    else:\n        ind=kernel[index].argsort()[-2:-100:-1]\n        if more==False:\n            kers=[kernel[index,i] for i in ind]\n            kers=np.array(kers)\n            sims=df.iloc[ind]\n            sims['similarity score']=kers\n            return sims[sims['state']==state][0:10]\n        else:\n            kers=[kernel[index,i] for i in ind]\n            kers=np.array(kers)\n            sims=df.iloc[ind]\n            sims['similarity score']=kers\n            return sims[sims['state']==state][0:20]","4287e785":"#let's try it out\nsimilar_jobs(7,more=True)","cb18b117":"It works! For example, job n.7 is for Geologist or Environmental Scientist, and we get, from the descriptions alone, similar positions, like Aquatic Scientist, Environmental Engineer, etc. When we search in a specific state there may not be enough similar positions, but the algorithm will still try its best to find the most similar, based on the content of the descriptions.\n\nUse that in conjuction with the job_describe function. Find an interesting-looking job, search for similar jobs, and inspect the job descriptions. \n\nHappy job hunting!","dfe3d9c2":"# Similar Job Finder #\n\n\n\n\nThis is a simple and cool little project, where you pick a data-science-related job, and the algorithm finds you others that are similar. Let's say while you were surveying the job-postings dataset you found an interesting position. You want to check out any similar jobs, but the dataset has 7.000 postings, you can't search them all!\n\nWe compute a tf-idf representation of the job-descriptions, and calculate the cosine similarities among the resulting vectors. The vectors with higher cosine similarity to a given vector are the jobs with the most similar descriptions.\n\nThere's the option of searching for similar jobs only in a specific State, as well as the option to display more search results."}}