{"cell_type":{"01e02f60":"code","4f26333f":"code","166fc179":"code","6fe62378":"code","8af02610":"code","775ca418":"code","e5fc0982":"code","87582064":"code","0475e92e":"code","bee01fd9":"code","5f46adba":"code","c182def8":"code","01031f99":"code","7a6b4391":"code","32b4bd28":"code","b2d933a9":"code","46e400fa":"code","82548d6f":"code","977da353":"code","46360eaf":"markdown","e3ea0df1":"markdown","0dbf97cb":"markdown","620220a6":"markdown","5e1616c6":"markdown","2eab21eb":"markdown","158becf2":"markdown","0a3e184d":"markdown","976049d7":"markdown","7cd1010c":"markdown","ac820307":"markdown","e5758b26":"markdown","b9ab8649":"markdown","7ee323f2":"markdown","a99850e3":"markdown","c5268ddd":"markdown"},"source":{"01e02f60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f26333f":"data_file = '\/kaggle\/input\/car-insurance-data\/Car_Insurance_Claim.csv'\ndata = pd.read_csv(data_file)\ndata.head(10)","166fc179":"# Label data\ny = data.OUTCOME","6fe62378":"features = []\nfor i in data.columns:\n    if i != 'OUTCOME' and i != 'ID' and i != 'POSTAL_CODE':\n        features.append(i)\nX = data[features]","8af02610":"# Split data\nfrom sklearn.model_selection import train_test_split\ntrain_X, test_X, train_y, test_y = train_test_split(X, y)","775ca418":"from sklearn.preprocessing import LabelEncoder\n\ntrain_X2 = train_X.copy()\ntest_X2 = test_X.copy()\ntrain_y2 = train_y.copy()\ntest_y2 = test_y.copy()\n\nage_encoder = LabelEncoder()\ntrain_X2['AGE'] = age_encoder.fit_transform(train_X['AGE'])\ntest_X2['AGE'] = age_encoder.transform(test_X['AGE'])\nage_encoder.transform(['16-25', '26-39', '40-64', '65+'])","e5fc0982":"gender_encoder = LabelEncoder()\ntrain_X2['GENDER'] = gender_encoder.fit_transform(train_X['GENDER'])\ntest_X2['GENDER'] = gender_encoder.transform(test_X['GENDER'])\ngender_encoder.transform(['female', 'male'])","87582064":"race_encoder = LabelEncoder()\ntrain_X2['RACE'] = race_encoder.fit_transform(train_X['RACE'])\ntest_X2['RACE'] = race_encoder.transform(test_X['RACE'])\nrace_encoder.transform(['majority', 'minority'])","0475e92e":"exp_encoder = LabelEncoder()\ntrain_X2['DRIVING_EXPERIENCE'] = exp_encoder.fit_transform(train_X['DRIVING_EXPERIENCE'])\ntest_X2['DRIVING_EXPERIENCE'] = exp_encoder.transform(test_X['DRIVING_EXPERIENCE'])\nexp_encoder.transform(['0-9y', '10-19y', '20-29y', '30y+'])","bee01fd9":"train_X2['EDUCATION'] = train_X2['EDUCATION'].str.replace('none','0')\ntrain_X2['EDUCATION'] = train_X2['EDUCATION'].str.replace('high school','1')\ntrain_X2['EDUCATION'] = train_X2['EDUCATION'].str.replace('university','2')\ntest_X2['EDUCATION'] = test_X2['EDUCATION'].str.replace('none','0')\ntest_X2['EDUCATION'] = test_X2['EDUCATION'].str.replace('high school','1')\ntest_X2['EDUCATION'] = test_X2['EDUCATION'].str.replace('university','2')","5f46adba":"train_X2['INCOME'] = train_X2['INCOME'].str.replace('poverty','0')\ntrain_X2['INCOME'] = train_X2['INCOME'].str.replace('working class','1')\ntrain_X2['INCOME'] = train_X2['INCOME'].str.replace('middle class','2')\ntrain_X2['INCOME'] = train_X2['INCOME'].str.replace('upper class','3')\ntest_X2['INCOME'] = test_X2['INCOME'].str.replace('poverty','0')\ntest_X2['INCOME'] = test_X2['INCOME'].str.replace('working class','1')\ntest_X2['INCOME'] = test_X2['INCOME'].str.replace('middle class','2')\ntest_X2['INCOME'] = test_X2['INCOME'].str.replace('upper class','3')","c182def8":"train_X2['VEHICLE_OWNERSHIP'] = train_X2['VEHICLE_OWNERSHIP'].apply(lambda x: 1 if x >= 0.5 else 0)\ntest_X2['VEHICLE_OWNERSHIP'] = test_X2['VEHICLE_OWNERSHIP'].apply(lambda x: 1 if x >= 0.5 else 0)\ntrain_X2['MARRIED'] = train_X2['MARRIED'].apply(lambda x: 1 if x >= 0.5 else 0)\ntest_X2['MARRIED'] = test_X2['MARRIED'].apply(lambda x: 1 if x >= 0.5 else 0)\ntrain_X2['CHILDREN'] = train_X2['CHILDREN'].apply(lambda x: int(x) if x >= 0.5 else 0)\ntest_X2['CHILDREN'] = test_X2['CHILDREN'].apply(lambda x: int(x) if x >= 0.5 else 0)","01031f99":"train_X2['VEHICLE_YEAR'] = train_X2['VEHICLE_YEAR'].str.replace('before 2015','0')\ntrain_X2['VEHICLE_YEAR'] = train_X2['VEHICLE_YEAR'].str.replace('after 2015','1')\ntest_X2['VEHICLE_YEAR'] = test_X2['VEHICLE_YEAR'].str.replace('before 2015','0')\ntest_X2['VEHICLE_YEAR'] = test_X2['VEHICLE_YEAR'].str.replace('after 2015','1')","7a6b4391":"vht_encoder = LabelEncoder()\ntrain_X2['VEHICLE_TYPE'] = vht_encoder.fit_transform(train_X['VEHICLE_TYPE'])\ntest_X2['VEHICLE_TYPE'] = vht_encoder.transform(test_X['VEHICLE_TYPE'])\nvht_encoder.transform(['sedan', 'sports car'])","32b4bd28":"from sklearn.impute import SimpleImputer\n\nimputation = SimpleImputer()\nimputed_X_train = pd.DataFrame(imputation.fit_transform(train_X2))\nimputed_X_test = pd.DataFrame(imputation.transform(test_X2))","b2d933a9":"train_X2.head(10)","46e400fa":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import mean_absolute_error\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(imputed_X_train, train_y)\n\ntest_predictions = decision_tree.predict(imputed_X_test)\ntest_predictions = [1 if x >= 0.5 else 0 for x in test_predictions]","82548d6f":"test_y_cv = []\nfor row in test_y:\n    test_y_cv.append(int(row))","977da353":"total = 0\ncount = 0  # Correct\nfor i in zip(test_predictions, test_y_cv):\n    if i[0] == i[1]:\n        count += 1\n    total += 1\nprint(count, total)","46360eaf":"### Race encoding","e3ea0df1":"## Get labels and features","0dbf97cb":"### Gender encoding","620220a6":"### Age encoding","5e1616c6":"### Education encoding","2eab21eb":"### Income encoding","158becf2":"### Driving exp. encoding","0a3e184d":"## Decision Tree Classifier","976049d7":"## Load data","7cd1010c":"### Vehicle type","ac820307":"## Split data","e5758b26":"### Vehicle ownership, married, children encoding","b9ab8649":"Drop `ID`, `POSTAL_CODE` and `OUTCOME` (which is the label).","7ee323f2":"### Vehicle year","a99850e3":"## Categorial label encoding\nConvert categorial labels to integer number to work with Decision Tree Classifier.","c5268ddd":"### Fill missing values"}}