{"cell_type":{"4f53f6c6":"code","c2aa793f":"code","cb6be8d9":"code","dd485c62":"code","acf42c8c":"code","8409f3b2":"code","c79e14ec":"code","9e0377e4":"code","95ca73d3":"code","b4f03a81":"code","b64620c3":"code","3c9e8d40":"code","e4bbc40a":"code","c3527088":"code","f3171360":"code","97d9c5d9":"code","135171ff":"code","67a8113f":"code","7e4ea114":"code","f0c598d8":"code","072e7f27":"code","a5d8a1c5":"code","3c608343":"code","aabaf1ae":"code","7d8e26f2":"code","b4829881":"code","463523e4":"code","75db97ce":"code","afc92745":"code","3c2b6664":"code","ad6ae8e7":"code","a6b87ebb":"code","4a4aabf1":"code","2ef38625":"code","647643a7":"code","04e52456":"code","11ec1ff1":"markdown","5b339ff9":"markdown","899b7736":"markdown","5360ff2b":"markdown","abbeb1cf":"markdown","d8aba757":"markdown","ec2084d5":"markdown","1b0898d3":"markdown","cda01d4c":"markdown","1ab9afba":"markdown","713c21e9":"markdown","ea798dd9":"markdown","f577ff78":"markdown","af8a52dc":"markdown","116f51b9":"markdown"},"source":{"4f53f6c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2aa793f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\nimport plotly.express as px\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\n\n","cb6be8d9":"df = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","dd485c62":"df.head()","acf42c8c":"df.info()","8409f3b2":"df.describe()","c79e14ec":"df.isnull().sum()","9e0377e4":"df = df.fillna(0)","95ca73d3":"df.isnull().sum()","b4f03a81":"df_deg = df.degree_t.value_counts()\n\ntrace = go.Bar(\n    x=df_deg.index,\n    y=df_deg.values,\n    marker=dict(\n        color = df_deg.values,\n        colorscale='electric',\n        showscale=True\n    )\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='Field of degree education', \n    yaxis = dict(title = '# of Students')\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b64620c3":"df_deg = df.hsc_s.value_counts()\n\ntrace = go.Bar(\n    x=df_deg.index,\n    y=df_deg.values,\n    marker=dict(\n        color = df_deg.values,\n        colorscale='electric',\n        showscale=True\n    )\n)\n\ndata = [trace]\nlayout = go.Layout(\n    title='Specialization in Higher Secondary Education', \n    yaxis = dict(title = '# of Students')\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3c9e8d40":"types = df['gender'].value_counts().reset_index()\n\ntrace = go.Pie(labels=types['index'], values=types['gender'], \n               pull=[0.1, 0], marker=dict(colors=[\"blue\", \"pink\"]),\n               title=\"Genders\")\nfig = go.Figure([trace])\nfig.show()","e4bbc40a":"types = df['specialisation'].value_counts().reset_index()\n\ntrace = go.Pie(labels=types['index'], values=types['specialisation'], \n               pull=[0.1, 0], marker=dict(colors=[\"#BC08A6\", \"32BCA1\"]),\n               title=\"specialisation\")\nfig = go.Figure([trace])\nfig.show()","c3527088":"types = df['workex'].value_counts().reset_index()\n\ntrace = go.Pie(labels=types['index'], values=types['workex'], \n               pull=[0.1, 0], marker=dict(colors=[\"#4992EB\", \"#CCEB31\"]),\n               title=\"Work Experience\")\nfig = go.Figure([trace])\nfig.show()","f3171360":"sns.catplot(\n    data=df, kind=\"bar\",\n    x=\"status\", y=\"etest_p\", hue=\"gender\",\n    ci=\"sd\", palette=\"Set2\", alpha=.6, height=6)\n","97d9c5d9":"sns.histplot(data=df, x=\"hsc_p\" , kde=True)","135171ff":"plt.figure(figsize=(12,6))\nsns.scatterplot(data=df, x='ssc_p', y='degree_p', hue='gender')\nplt.show()","67a8113f":"sns.boxplot(x='gender', y='salary', hue='hsc_s', data=df, palette=['blue', 'green', 'red'])","7e4ea114":"sns.heatmap(df.corr(), annot=True)","f0c598d8":"print('Categorical Variables are: \\n',df.select_dtypes(include=['object']).columns.tolist())","072e7f27":"print('Numerical Variables are: \\n', df.select_dtypes(exclude=['object']).columns.tolist())","a5d8a1c5":"df.drop(['sl_no','salary'], axis=1 , inplace=True)","3c608343":"categorical_var =  ['gender', 'ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation', 'status']\nfor var in categorical_var:\n    print(df[var].unique())","aabaf1ae":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder","7d8e26f2":"le = LabelEncoder()\ndf['gender'] = le.fit_transform(df['gender'])\ndf['status'] = le.fit_transform(df['status'])\ndf['ssc_b'] = le.fit_transform(df['ssc_b'])\ndf['hsc_b'] = le.fit_transform(df['hsc_b'])\ndf['workex'] = le.fit_transform(df['workex'])\ndf['specialisation'] = le.fit_transform(df['specialisation'])\n#le.fit_transform(df['workex'])\ndf.head()","b4829881":"ohe = OneHotEncoder()\ndf['hsc_s'] = pd.Categorical(df['hsc_s'])\ndfDummies_hsc_s = pd.get_dummies(df['hsc_s'], prefix = 'hsc_s_ohe')\ndfDummies_hsc_s\n\nprint(\"********************************\")\n\ndf['degree_t'] = pd.Categorical(df['degree_t'])\ndfDummies_degree_t = pd.get_dummies(df['degree_t'], prefix = 'degree_t_ohe')\ndfDummies_degree_t","463523e4":"df.drop(\"hsc_s\", axis=1, inplace=True)\ndf.drop(\"degree_t\", axis=1, inplace=True)\n\ndf = pd.concat([df, dfDummies_hsc_s], axis=1)\ndf = pd.concat([df, dfDummies_degree_t], axis=1)\ndf.head()","75db97ce":"scaled = ['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p']","afc92745":"ss = StandardScaler()\ncolumns = ['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p']\nscaled = ss.fit_transform(df[['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p']])\nscaled = pd.DataFrame(scaled,columns=columns)\ndf=df.drop(columns=columns,axis=1)\n\ndf=df.merge(scaled, left_index=True, right_index=True, how = \"right\")\ndf","3c2b6664":"y = df[\"status\"]\nX = df.drop(['status'],axis=1)","ad6ae8e7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 42)","a6b87ebb":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\ndecision_tree_predicted = decision_tree.predict(X_test)\ndecision_tree_conf_matrix = confusion_matrix(y_test, decision_tree_predicted)\ndecision_tree_acc_score = accuracy_score(y_test,decision_tree_predicted)\nprint(\"confussion matrix\")\nprint(decision_tree_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of DecisionTreeClassifier:\",decision_tree_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,decision_tree_predicted))","4a4aabf1":"sns.heatmap(decision_tree_conf_matrix, annot=True, cmap=\"gist_heat\")","2ef38625":"parameters = {'criterion': ['gini', 'entropy'],\n              'splitter': ['best', 'random'],\n              'max_depth': range(1,14), \n              'min_samples_split': range(2,10), \n              'min_samples_leaf': range(1,3),\n             'max_features': ['auto', 'sqrt', 'log2'],\n             }\n\ngcv = GridSearchCV(decision_tree, parameters, cv=10).fit(X_train, y_train)\nprint(f\"Best Estimator: {gcv.best_estimator_}\")\nprint(f\"Best Parameter: {gcv.best_params_}\")\nprint(f\"Best Score: {gcv.best_score_}\")","647643a7":"params = {'criterion': ['gini', 'entropy'],\n              'splitter': ['best', 'random'],\n              'max_depth': range(1,14), \n              'min_samples_split': range(2,8), \n              'min_samples_leaf': range(1,3),\n             'max_features': ['auto', 'sqrt', 'log2'],\n             }\n\nrandomizedcv = RandomizedSearchCV(decision_tree, params, n_iter=1000, cv=5, scoring='accuracy', n_jobs=-1, verbose=2).fit(X_train,y_train)\n\nprint(f'RandomizedSearchCV Best Score: {randomizedcv.best_score_*100}')\nprint(f'RandomizedSearchCV Best Estimator: {randomizedcv.best_estimator_}')\nprint(f'RandomizedSearchCV Best Params: {randomizedcv.best_params_}')","04e52456":"imp_feature = pd.DataFrame({'Feature': ['gender', 'ssc_b', 'hsc_b', 'workex', 'specialisation',\n       'hsc_s_ohe_Arts', 'hsc_s_ohe_Commerce', 'hsc_s_ohe_Science',\n       'degree_t_ohe_Comm&Mgmt', 'degree_t_ohe_Others',\n       'degree_t_ohe_Sci&Tech', 'ssc_p', 'hsc_p', 'degree_p', 'etest_p',\n       'mba_p'], 'Importance': decision_tree.feature_importances_})\nplt.figure(figsize=(10,4))\nplt.title(\"Feature Importance for DecisionTreeClassifier\")\nplt.xlabel(\"Importance \")\nplt.ylabel(\"Features\")\nplt.barh(imp_feature['Feature'],imp_feature['Importance'],color = ['r', 'g', 'b', 'c', 'm', 'y', 'k'])\nplt.show()","11ec1ff1":"![Thank-you-word-cloud.jpg](attachment:f9b19635-7789-46b9-b9e1-850431085776.jpg)","5b339ff9":"* GridSearchCV gave me better results than RandomizedSearchCV\n* ssc_p seen as the most important feature\n* We achieve 88% accuracy on DecisionTreeClassifier","899b7736":"* Placed: Male's have higher employability test percentage\n* Not Placed: Female's have higher employability test percentage","5360ff2b":"# Conclusion","abbeb1cf":"**DATA DESCRIPTION**\n\n1. sl_no ----> Serial Number\n2. gender ---> Gender- Male='M',Female='F'\n3. ssc_p ---> Secondary Education percentage- 10th Grade\n4. ssc_b ---> Board of Education- Central\/ Others\n5. hsc_p ---> Higher Secondary Education percentage- 12th Grade\n6. hsc_b ---> Board of Education- Central\/ Others\n7. hsc_s ---> Specialization in Higher Secondary Education\n8. degree_p ---> Degree Percentage\n9. degree_t ---> Under Graduation(Degree type)- Field of degree education\n10. workex ---> Work Experience\n11. etest_p ---> Employability test percentage ( conducted by college)\n12. specialisation ---> Post Graduation(MBA)- Specialization\n13. mba_p ---> MBA percentage\n14. status ---> Status of placement- Placed\/Not placed\n15. salary ---> Salary offered by corporate to candidates","d8aba757":"# Importing Libraries","ec2084d5":"# Hyper-parameter Optimization","1b0898d3":"*** Even though numbers are close to each other, there are more students choose to specialize in Marketing & Finance**","cda01d4c":"* **Our dataset contains almost 3 male for every 2 female students**","1ab9afba":"# Data Visualization","713c21e9":"Source : https:\/\/www.kaggle.com\/barisscal\/heart-disease-dtclassifier-evaluation-metrics#Decision-Tree","ea798dd9":"* **In higher education, students mostly preferred commerce and science instead of arts degree**","f577ff78":"**Thank you for visiting my kernel. !**\n\n**Feel free to comment anything you want**\n","af8a52dc":"# Data Preprocessing","116f51b9":"* Higher percentage of students does not have any prior work experience"}}