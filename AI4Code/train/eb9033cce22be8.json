{"cell_type":{"583837b7":"code","d6d32783":"code","8d51200f":"code","2e714b5c":"code","493efbbd":"code","3ef0d1aa":"code","cd974c26":"code","776fd8a5":"code","796ef614":"code","0105aa87":"code","16fc4a91":"code","9cd11907":"code","bdbcd58c":"code","a5e48423":"code","f027fe73":"code","84436f67":"code","a19b66ee":"code","a2a45176":"code","837c861b":"code","ded66aae":"code","df88d5d6":"code","3ce3a3e5":"code","41ba25e0":"code","bffdd8ac":"code","97505d3c":"code","a7718f15":"code","ca41a23b":"code","f0c5176e":"markdown","2b816f2d":"markdown","8b2ad12b":"markdown"},"source":{"583837b7":"#Imports and Dependencies \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns \ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(20,10)})\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n% matplotlib inline\n\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler  \n\nimport warnings\nwarnings.filterwarnings('ignore')","d6d32783":"#Data Import\nfile = r'..\/input\/googleplaystore.csv'\ndf = pd.read_csv(file)\ndf.drop_duplicates(subset='App', inplace=True)\nprint('Number of Applications in the Data Set:', len(df))","8d51200f":"#Eliminating stray entries in the 'Installs' and 'Android Ver' columns \ndf = df[df['Android Ver'] != 'NaN']\ndf = df[df['Installs'] != 'Free']","2e714b5c":"#Data Cleaning\n#Removing , + M K and $ Symbols + All type conversions\n\n#'Installs' Column\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndf['Installs'] = df['Installs'].apply(lambda x: float(x))\n#'Size' Column\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: float(x))\n#'Price' Column\ndf['Price'] = df['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndf['Price'] = df['Price'].apply(lambda x: float(x))\n#'Reviews' Column\ndf['Reviews'] = df['Reviews'].apply(lambda x: int(x))\n","493efbbd":"df.sample(10)","3ef0d1aa":"#Overview of the data - Pie Plot of Categories and App Count \ncategories = df['Category'].value_counts()\n\npie_chart = [go.Pie(\n        labels = categories.index,\n        values = categories.values,\n        hoverinfo = 'value + label'\n    \n)]\n\nlayout = go.Layout(title = 'Distribution of Apps across Categories')\n\nprint('Total number of categories:', categories.count())\nprint('Count by categories:')\nprint(categories)\ntoPlot = go.Figure(data = pie_chart, layout = layout)\n\n#Please refer to the Results section of the Kernel to find the plot\nplotly.offline.plot(toPlot, filename='Pie Chart')","cd974c26":"#Pairwise Plot of Numeric Features \nrating = df['Rating'].dropna()\nsize = df['Size'].dropna()\ninstalls = df['Installs'][df.Installs!=0].dropna()\nreviews = df['Reviews'][df.Reviews!=0].dropna()\ntype = df['Type'].dropna()\npairplot = sns.pairplot(pd.DataFrame(list(zip(rating, np.log10(installs), size, np.log10(reviews), type)),\n                                     columns=['Rating', 'Installs', 'Size','Reviews', 'Type']), hue='Type', palette=\"Set1\")\n\n","776fd8a5":"#Further Analysis using Join Plots\nsns.set_style(\"ticks\")\nplt.figure(figsize = (10,10))\nsize_vs_rating = sns.jointplot(df['Size'], df['Rating'], kind = 'kde', color = \"orange\", size = 8)\nreview_vs_rating = sns.jointplot(df['Reviews'], df['Rating'], kind = 'reg', color = \"orange\", size = 8)\ninstalls_vs_rating = sns.jointplot(df['Installs'], df['Rating'], kind ='reg', color = \"orange\", size = 8)\n","796ef614":"#Box Plot of Category and Avergae App Rating\nprint('Average App Rating = ', np.nanmean(df['Rating']))\nprint('Category vs. Avg Rating')\ndata = [{\n    'y': df.loc[df.Category==category]['Rating'], \n    'type':'box',\n    'name' : category,\n    'showlegend' : False\n    } for i,category in enumerate(list(set(df['Category'])))]\n\nlayout = {'title' : 'App ratings across major categories',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Rating'}\n         }\ntoPlot = go.Figure(data = data, layout = layout)\n\n#Please refer to the Results section of the Kernel to find the plot\nplotly.offline.plot(toPlot,filename = \"BoxPlot\")","0105aa87":"df.head()","16fc4a91":"#Discard insignificant features\ndf.drop(['App', 'Last Updated', 'Current Ver'], 1, inplace = True)","9cd11907":"df.head()","bdbcd58c":"#Feature correlation matrix\nfig = plt.figure(figsize = (16,8))\n#corr = plt.matshow(df.apply(lambda x:pd.factorize(x)[0]).corr(), fignum = 1)\ncorr = df.corr(method = 'spearman', min_periods = 5)\nplot = plt.matshow(corr, fignum = 1)\nfig.colorbar(plot)","a5e48423":"#Conversion of categorical variables to numeric variables - one hot encoding (manual)\nnew_df = pd.get_dummies(df, columns = ['Category', 'Content Rating', 'Genres', 'Android Ver', 'Type'])\nnew_df.head()","f027fe73":"new_df.replace('?', -9999, inplace = True )\nnew_df.dropna(inplace = True)","84436f67":"new_df.head()","a19b66ee":"#Test-Train Split\nX = np.array(new_df.drop(['Rating'],1))\ny = np.array(new_df['Rating'])\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X,y,test_size = 0.3)","a2a45176":"#Feature scaling \nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","837c861b":"#Model Defn. and Fitting\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)  ","ded66aae":"#Prediction \ny_pred = regressor.predict(X_test)","df88d5d6":"result = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  \nprint('Simple Regression Results')\nprint(result.head())  ","3ce3a3e5":"#Predictions with XGBoost \nimport xgboost as xgb\nmodel = xgb.XGBRegressor(n_estimators=70, learning_rate=0.08, gamma=0, subsample=0.70,\n                           colsample_bytree=1, max_depth=7)","41ba25e0":"model.fit(X_train, y_train)","bffdd8ac":"import math\nprint(\"RMSE: %.2f\"\n      % math.sqrt(np.mean((model.predict(X_test) - y_test) ** 2)))","97505d3c":"y_pred1 = model.predict(X_test)\nresult = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred1})  \nresult.head()  ","a7718f15":"#Introducing a range for the predicted Ratings\n\ndiff_list = abs(result['Predicted']-result['Actual'])\nmean_diff = np.nanmean(diff_list)\nvariance = np.square(diff_list-mean_diff).sum()\/len(diff_list)\nstandard_deviation = np.sqrt(variance)\nlower_bound = np.around(y_pred - (standard_deviation),2)\nupper_bound = np.around(y_pred + (standard_deviation),2)","ca41a23b":"result_final = pd.DataFrame({'Actual Rating':y_test, 'Lower Bound on Predicted Rating': lower_bound, 'Upper Bound on Predicted Rating': upper_bound })\nprint(result_final.sample(10))\nprint('Writng results to Result Set file')\nresult_final.to_csv(\"Result Set.csv\")","f0c5176e":"# A simple Regression Model to define and predict the Range of the Ratings for the Applications(Exploratory only)","2b816f2d":"Fine tuning the prediction - by introducing a range","8b2ad12b":"# An analysis of Applications on Google Play Store\n"}}