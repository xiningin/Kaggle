{"cell_type":{"91e3daf0":"code","f75b319c":"code","93cd124d":"code","896ef5d5":"code","d7b3ce66":"code","23879c13":"code","0531a96e":"code","aac3582f":"code","be5d0cf1":"code","f2f737ca":"code","5fcfa565":"code","bef24b40":"code","eae6420b":"code","754f5a31":"code","ab96bb1e":"code","9c06e724":"code","b0ffe49d":"code","de6bfbda":"code","437cec87":"code","0d9537de":"code","fdd4b329":"code","1f00741a":"code","1f754118":"code","2a67182b":"code","3dcb3c5e":"code","19d749e2":"code","6388aabf":"code","f8dd598d":"code","14a9eada":"code","28f0a8bb":"code","9a81c2bd":"code","0038fa60":"code","becaa388":"code","476868e3":"code","0bfaf358":"code","d50b36df":"code","29f74a45":"code","4f0034ef":"code","6047957d":"code","c7ca0fa7":"code","343bb1f8":"code","f63bb1cd":"code","efcbaaf1":"code","bdc33645":"code","0df1e791":"code","1e7dd17f":"code","70f5f301":"code","6e8b6d7a":"code","1e42368b":"code","aa242fb4":"code","a3612378":"code","ebeb17fd":"code","ceea870a":"code","5d9780dd":"code","e9248a2f":"code","f7a2ce70":"code","4d7322d7":"code","b4b5629c":"code","68fad88d":"code","6599d970":"code","0e61d613":"code","6f72412e":"code","4383b387":"code","f1f34836":"code","99dc6933":"code","86370adf":"code","813c11ad":"code","ad605e5e":"code","851a5004":"code","39e4526b":"code","6cc4c39d":"code","55a80c12":"code","2e94d28b":"code","9d217bcd":"code","d795bc2a":"code","b4d67eb8":"code","95b8cbc6":"code","657190f9":"code","74ef03d1":"code","7e8ad81f":"markdown","64dde8e1":"markdown","2044e2a6":"markdown","4b974a9a":"markdown","1ccad132":"markdown","1f39aee3":"markdown","d47c47f5":"markdown","de21862c":"markdown","46da36a2":"markdown","ca987db5":"markdown","22dfcb25":"markdown","617984ec":"markdown","6f16a69e":"markdown","532dd735":"markdown","6071d685":"markdown","81911137":"markdown","142687f6":"markdown","b95234e3":"markdown","b044803b":"markdown","37a34f3b":"markdown","113c260c":"markdown","24a3319f":"markdown","bb1292a1":"markdown","256a0942":"markdown","1e4a1def":"markdown","facd15d5":"markdown","755be4f9":"markdown","751090f7":"markdown","1bb7c264":"markdown","67fa15b0":"markdown","cd27cd1b":"markdown","e260a9f7":"markdown","66f49981":"markdown","5b90c1c8":"markdown","903cc696":"markdown","6c2fc025":"markdown","77f62273":"markdown"},"source":{"91e3daf0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport re\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.metrics import r2_score\n\nfrom math import sqrt\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom mlxtend.regressor import StackingRegressor\n\nfrom sklearn.preprocessing import LabelEncoder\n","f75b319c":"df = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndf.head()","93cd124d":"df.shape","896ef5d5":"df.describe()","d7b3ce66":"df.describe(include = ['O'])","23879c13":"print(df['Source'].unique())\ndf['Destination'].unique()","0531a96e":"df.isnull().sum()","aac3582f":"df.sort_values('Date_of_Journey', inplace = True)","be5d0cf1":"df['year'] = pd.DatetimeIndex(df['Date_of_Journey']).year\ndf['month'] = pd.DatetimeIndex(df['Date_of_Journey']).month\ndf['Day'] = pd.DatetimeIndex(df['Date_of_Journey']).day","f2f737ca":"df['Additional_Info'].unique()","5fcfa565":"plt.figure(figsize = (10, 10))\nplt.title('Price VS Additional Information')\nplt.scatter(df['Additional_Info'], df['Price'])\nplt.xticks(rotation = 90)\nplt.xlabel('Information')\nplt.ylabel('Price of ticket')","bef24b40":"plt.figure(figsize = (10 , 10))\nplt.title('Count of flights month wise')\nsns.countplot(x = 'month', data = df)\nplt.xlabel('Month')\nplt.ylabel('Count of flights')","eae6420b":"plt.figure(figsize = (10, 10))\nplt.title('Price VS Airlines')\nplt.scatter(df['Airline'], df['Price'])\nplt.xticks(rotation = 90)\nplt.xlabel('Airline')\nplt.ylabel('Price of ticket')\nplt.xticks(rotation = 90)","754f5a31":"plt.figure(figsize = (10, 10))\nplt.title('Count of flights with different Airlines')\nsns.countplot(x = 'Airline', data = df)\nplt.xlabel('Airline')\nplt.ylabel('Count of flights')\nplt.xticks(rotation = 90)","ab96bb1e":"df['Airline'].replace(['Trujet', 'Vistara Premium economy'], 'Another', inplace = True)","9c06e724":"df[df['Total_Stops'].isnull()]","b0ffe49d":"df.dropna(axis = 0, inplace = True)","de6bfbda":"def convert_into_stops(X):\n    if X == '4 stops':\n        return 4\n    elif X == '3 stops':\n        return 3\n    elif X == '2 stops':\n        return 2\n    elif X == '1 stop':\n        return 1\n    elif X == 'non stop':\n        return 0","437cec87":"df['Total_Stops'] = df['Total_Stops'].map(convert_into_stops)","0d9537de":"df.fillna(0, inplace  = True)\ndf['Total_Stops'] = df['Total_Stops'].apply(lambda x : int(x))","fdd4b329":"def flight_dep_time(X):\n    '''\n    This function takes the flight Departure time \n    and convert into appropriate format.\n    '''\n    if int(X[:2]) >= 0 and int(X[:2]) < 6:\n        return 'mid_night'\n    elif int(X[:2]) >= 6 and int(X[:2]) < 12:\n        return 'morning'\n    elif int(X[:2]) >= 12 and int(X[:2]) < 18:\n        return 'afternoon'\n    elif int(X[:2]) >= 18 and int(X[:2]) < 24:\n        return 'evening'","1f00741a":"df['flight_time'] = df['Dep_Time'].apply(flight_dep_time)","1f754118":"plt.figure(figsize = (10, 10))\nplt.title('Count of flights according to departure time')\nsns.countplot(x = 'flight_time', data = df)\nplt.xlabel('Flight Time')\nplt.ylabel('Count of flights')","2a67182b":"def convert_into_seconds(X):\n    '''\n    This function takes the total time of flight from\n    one city to another and converts it into the seconds.\n    '''\n    a = [int(s) for s in re.findall(r'-?\\d+\\.?\\d*', X)]\n    if len(a) == 2:\n        hr = a[0] * 3600\n        min = a[1] * 60\n    else:\n        hr = a[0] * 3600\n        min = 0   \n    total = hr + min\n    return total\n\ndf['Duration(sec)'] = df['Duration'].map(convert_into_seconds)","3dcb3c5e":"plt.figure(figsize = (10, 10))\nplt.title('Price VS duration of flights')\nplt.scatter(df['Duration(sec)'], df['Price'])\nplt.xlabel('Duartion in seconds')\nplt.ylabel('Price of ticket')","19d749e2":"df.corr()","6388aabf":"df.shape","f8dd598d":"df = df.drop_duplicates()\ndf.shape","14a9eada":"df['Additional_Info'].unique()","28f0a8bb":"df['Additional_Info'].replace('No Info', 'No info', inplace = True)","9a81c2bd":"sns.boxplot(df['Price'])","0038fa60":"df.to_csv('cleaned_data.csv', index = None)","becaa388":"df = pd.get_dummies(df, columns = ['Airline', 'Source', 'Destination', 'Additional_Info', 'flight_time'])","476868e3":"pd.set_option('display.max_columns', 50)\ndf.head()","0bfaf358":"df.drop(['Date_of_Journey', 'Route', 'Dep_Time', 'Arrival_Time', 'Duration'], axis = 1, inplace = True)","d50b36df":"df.to_csv('final_data.csv', index = None)","29f74a45":"y = df['Price']\nX = df.drop('Price', axis = 1)","4f0034ef":"s = StandardScaler()\nX = s.fit_transform(X)","6047957d":"print(X.mean())\nX.std()","c7ca0fa7":"# Splitting data into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","343bb1f8":"print(\"The size of training input is\", X_train.shape)\nprint(\"The size of training output is\", y_train.shape)\nprint(50 *'*')\nprint(\"The size of testing input is\", X_test.shape)\nprint(\"The size of testing output is\", y_test.shape)","f63bb1cd":"y_train_pred = np.ones(X_train.shape[0]) * y_train.mean()\ny_test_pred = np.ones(X_test.shape[0]) * y_train.mean()","efcbaaf1":"print(\"Train Results for Baseline Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","bdc33645":"print(\"Test Results for Baseline Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","0df1e791":"k_range = list(range(1, 30))\nparams = dict(n_neighbors = k_range)\nknn_regressor = GridSearchCV(KNeighborsRegressor(), params, cv = 10, scoring = 'neg_mean_squared_error')\nknn_regressor.fit(X_train, y_train)","1e7dd17f":"print(knn_regressor.best_estimator_)\nknn_regressor.best_params_","70f5f301":"y_train_pred =knn_regressor.predict(X_train) ##Predict train result\ny_test_pred =knn_regressor.predict(X_test) ##Predict test result","6e8b6d7a":"print(\"Train Results for KNN Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","1e42368b":"print(\"Test Results for KNN Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","aa242fb4":"params ={'alpha' :[0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]}\nridge_regressor =GridSearchCV(Ridge(), params ,cv =5,scoring = 'neg_mean_absolute_error', n_jobs =-1)\nridge_regressor.fit(X_train ,y_train)","a3612378":"print(ridge_regressor.best_estimator_)\nridge_regressor.best_params_","ebeb17fd":"y_train_pred =ridge_regressor.predict(X_train) ##Predict train result\ny_test_pred =ridge_regressor.predict(X_test) ##Predict test result","ceea870a":"print(\"Train Results for Ridge Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","5d9780dd":"print(\"Test Results for Ridge Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","e9248a2f":"params ={'alpha' :[0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]}\nlasso_regressor =GridSearchCV(Lasso(), params ,cv =15,scoring = 'neg_mean_absolute_error', n_jobs =-1)\nlasso_regressor.fit(X_train ,y_train)","f7a2ce70":"print(lasso_regressor.best_estimator_)\nlasso_regressor.best_params_","4d7322d7":"y_train_pred =lasso_regressor.predict(X_train) ##Predict train result\ny_test_pred =lasso_regressor.predict(X_test) ##Predict test result","b4b5629c":"print(\"Train Results for Lasso Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","68fad88d":"print(\"Test Results for Lasso Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","6599d970":"depth  =list(range(3,30))\nparam_grid =dict(max_depth =depth)\ntree =GridSearchCV(DecisionTreeRegressor(),param_grid,cv =10)\ntree.fit(X_train,y_train)","0e61d613":"print(tree.best_estimator_)\ntree.best_params_","6f72412e":"y_train_pred =tree.predict(X_train) ##Predict train result\ny_test_pred =tree.predict(X_test) ##Predict test result","4383b387":"print(\"Train Results for Decision Tree Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","f1f34836":"print(\"Test Results for Decision Tree Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","99dc6933":"tuned_params = {'n_estimators': [100, 200, 300, 400, 500], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}\nrandom_regressor = RandomizedSearchCV(RandomForestRegressor(), tuned_params, n_iter = 20, scoring = 'neg_mean_absolute_error', cv = 5, n_jobs = -1)\nrandom_regressor.fit(X_train, y_train)","86370adf":"print(random_regressor.best_estimator_)\nrandom_regressor.best_params_","813c11ad":"y_train_pred = random_regressor.predict(X_train)\ny_test_pred = random_regressor.predict(X_test)","ad605e5e":"print(\"Train Results for Random Forest Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","851a5004":"print(\"Test Results for Random Forest Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","39e4526b":"tuned_params = {'max_depth': [1, 2, 3, 4, 5], 'learning_rate': [0.01, 0.05, 0.1], 'n_estimators': [100, 200, 300, 400, 500], 'reg_lambda': [0.001, 0.1, 1.0, 10.0, 100.0]}\nmodel = RandomizedSearchCV(XGBRegressor(), tuned_params, n_iter=20, scoring = 'neg_mean_absolute_error', cv=5, n_jobs=-1)\nmodel.fit(X_train, y_train)","6cc4c39d":"print(model.best_estimator_)\nmodel.best_params_","55a80c12":"y_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)","2e94d28b":"print(\"Train Results for XGBoost Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","9d217bcd":"print(\"Test Results for XGBoost Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","d795bc2a":"# Initializing models\nridge = Ridge()\nlasso = Lasso()\ntree = DecisionTreeRegressor()\nknn = KNeighborsRegressor()\n\nstack = StackingRegressor(regressors = [ridge, lasso, knn], meta_regressor = tree)\nstack.fit(X_train, y_train)","b4d67eb8":"print(stack.regr_)\nstack.meta_regr_","95b8cbc6":"y_train_pred = stack.predict(X_train)\ny_test_pred = stack.predict(X_test)","657190f9":"print(\"Train Results for Stacking Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_train.values, y_train_pred)))\nprint(\"R-squared: \", r2_score(y_train.values, y_train_pred))","74ef03d1":"print(\"Test Results for Stacking Regressor Model:\")\nprint(50 * '-')\nprint(\"Root mean squared error: \", sqrt(mse(y_test, y_test_pred)))\nprint(\"R-squared: \", r2_score(y_test, y_test_pred))","7e8ad81f":"#### Preparing the data for ML models.","64dde8e1":"#### Converting the Date_of_journey into date, month and year.","2044e2a6":"#### Converting sparse classes of Airline into one category","4b974a9a":"As we can see that there are some points which are seeems like outliers but we cannot remove them because these can be flight ticket price also.","1ccad132":"#### 6. Random Forest Regressor","1f39aee3":"#### 5. Decision Tree Regressor","d47c47f5":"* There are more number of flights in the morning time as compared to other time.","de21862c":"#### Data Standardization","46da36a2":"# Flight Ticket Price Prediction\n* Flight ticket prices can be something hard to guess, today we might see a price, check out the price of the same flight tomorrow, it will be a different story. We might have often heard travellers saying that flight ticket prices are so unpredictable. \n* Here you will be provided with prices of flight tickets for various airlines between the months of March and June of 2019 and between various cities.\n\n## Data Overview\nHere each data point corresponds to trip of flight from one city to another.\n* Airline: The name of the airline.\n\n* Date_of_Journey: The date of the journey\n\n* Source: The source from which the service begins.\n\n* Destination: The destination where the service ends.\n\n* Route: The route taken by the flight to reach the destination.\n\n* Dep_Time: The time when the journey starts from the source.\n\n* Arrival_Time: Time of arrival at the destination.\n\n* Duration: Total duration of the flight.\n\n* Total_Stops: Total stops between the source and destination.\n\n* Additional_Info: Additional information about the flight\n\n* Price(target): The price of the ticket\n\n#### Type of Machine Learning task : \nIt is an regression problem where given a set of features we need to predict the price of ticket from one city to another.\n\n#### Performace Metric\nSince it is an regression problem we will use Root Mean Squared error (RMSE) and R-squared as regression metric.\n\n#### Importing Libraries","ca987db5":"#### Machine Learning Models","22dfcb25":"It is important to notice that the correlation for 'year' is shown NaN. This is because that feature is not vary at all.","617984ec":"#### Converting the flight duration into seconds.","6f16a69e":"From above scatter plot it is clear that the ticket prices for Business class is higher which is quite obivious.","532dd735":"The ticket rate for Jet Airways Business airline is high.","6071d685":"#### Converting the flight Dep_Time into proper time i.e. mid_night, morning, afternoon and evening.","81911137":"#### Saving the final dataframe to directory.","142687f6":"The maximum ticket price is Rs.79512 and minimum is Rs.1759.","b95234e3":"All the flight are from 5 different cities to all other 6 different cities except the same city.","b044803b":"#### Handling the Typos","37a34f3b":"#### Converting the Total_Stops into numbers and dropping the rows with NaN.","113c260c":"There are around 2500 flights scheduled in the month of may so at this time can be the peak month for the airlines as compared to april which seems like slack season for airlines.","24a3319f":"'No info' is same as 'No Info'. So replacing them with single common label.","bb1292a1":"There are 10683 instances each is having 11 different features.","256a0942":"#### 2. KNN Regressor","1e4a1def":"#### 3. Ridge Regression","facd15d5":"* There are more number of flights of Jet Airways. \n* Jet Airways Business, Vistara Premium economy, Trujet have actually almost negligible flights.","755be4f9":"There is only single entry is missing in Route and Total_stops.","751090f7":"#### 8. Stackinig","1bb7c264":"#### Removing the unused features.","67fa15b0":"#### 4. Lasso Regressor","cd27cd1b":"#### 7.XGBoost Regressor","e260a9f7":"#### Encoding the dummy varibales (for categorical features).","66f49981":"#### Dropping the duplicate rows.","5b90c1c8":"It looks like there were around 220 duplicate rows. So it is good idea to drop them.","903cc696":"#### Sorting the entire dataset on date of journey.","6c2fc025":"#### Before we move to the next module, let's save the new dataframe that we have cleaned.","77f62273":"#### 1. Baseline Model\n* In baseline model we predict the flight ticket price as average of all the prices.\n* We will use this baseline model to perform hypothesis testing for other complex models."}}