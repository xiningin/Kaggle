{"cell_type":{"6d894e2e":"code","f3fb41f6":"code","fee3326a":"code","261100a7":"code","a89fd6f2":"code","c8456391":"code","171f33a9":"code","a7990226":"code","54443449":"code","9488bd1a":"code","6f494f53":"code","fba77717":"code","2ece85eb":"code","fb20df69":"code","96d11779":"code","28dd98e7":"code","7b0ebfbb":"code","bc8b8b73":"code","3f43b467":"code","ceaafe9f":"code","b4fd3dc6":"code","db8fb7cf":"code","d7092180":"code","69929568":"markdown","decde98f":"markdown","cc52b5f9":"markdown","360ebc7b":"markdown","b9c2c67f":"markdown","54af0cb9":"markdown","94b3f4c6":"markdown","92dc3598":"markdown","7536629a":"markdown","136894e9":"markdown","713064c2":"markdown","8ca3f3e7":"markdown","f6c07cc1":"markdown","59f63303":"markdown","75df71a3":"markdown","e6a1e018":"markdown","93b03941":"markdown"},"source":{"6d894e2e":"import pandas as pd\nimport numpy as np\nimport itertools","f3fb41f6":"dist_m = pd.read_csv('..\/input\/santa-2021\/distance_matrix.csv')\nperm_m = pd.read_csv('..\/input\/santa-2021\/permutations.csv')\nwild_m = pd.read_csv('..\/input\/santa-2021\/wildcards.csv')\nsamp_m = pd.read_csv('..\/input\/santa-2021\/sample_submission.csv')","fee3326a":"dist_m.head()","261100a7":"perm_m.head()","a89fd6f2":"wild_m.head()","c8456391":"samp_m.head()","171f33a9":"# The super-permutation of 7 with above formula turns out to be ?\n\ndef factorial(n):\n    # Factorial of 0 is 1 (base case)\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef n_method_supermutation(n):\n    sp = 0\n    for i in range(1, n+1):\n        sp += factorial(i)\n    return sp\n\nlen_of_sp = n_method_supermutation(7)\nprint(len_of_sp)","a7990226":"# A list that contains all the 7 symbols \n\nsymbols = [x for x in perm_m['Permutation'][0]]","54443449":"symbols","9488bd1a":"best_solutionf494f53":"len(best_solution)","fba77717":"# All possible permutations\n\nall_permu = [''.join(i) for i in itertools.permutations(symbols, 7)]","2ece85eb":"# Permutations that are mandatory .\n\nman_per = ['\ud83c\udf85\ud83e\udd36'+''.join(j) for j in itertools.permutations(symbols[2:], 5)]","fb20df69":"# Converting the number string to symbols .\n\nbest_sy_sol = \"\"\n\nfor x in best_solution:\n    best_sy_sol += symbols[int(x) % 7 - 1]","96d11779":"len(best_sy_sol)","28dd98e7":"indices = [len(best_sy_sol)\/\/3, (len(best_sy_sol)\/\/3)*2]","7b0ebfbb":"indices","bc8b8b73":"combos = [best_sy_sol[:indices[0]+7], best_sy_sol[indices[0]-7:indices[1]+7], best_sy_sol[indices[1]-7:]]","3f43b467":"print(f\"Length t1 = {len(combos[0])}, t2 = {len(combos[1])}, t3 = {len(combos[2])}\")","ceaafe9f":"# Now let's optimize these strings according to our rules. \n\nfor i in range(3):\n    for per in man_per:\n        if per not in combos[i]:\n            combos[i] += per","b4fd3dc6":"for j in all_permu:\n    if j not in combos[0] and j not in combos[1] and j not in combos[2]:\n        print(j)","db8fb7cf":"# Creating the submission file .\n\ndata = pd.DataFrame({'schedule': [combos[0], combos[1], combos[2]]})","d7092180":"data.to_csv('submit.csv', index=False)","69929568":"# The Problem Statement and it's Explanation\n\nFind a set of three strings containing every permutation of the seven symbols \ud83c\udf85, \ud83e\udd36, \ud83e\udd8c, \ud83e\udddd, \ud83c\udf84, \ud83c\udf81, and \ud83c\udf80 as substrings, subject to the following conditions:\n\n1) Every permutation must be in at least one string.\n\n2) Each permutation beginning with \ud83c\udf85\ud83e\udd36 must be in all three strings.\n\n3) Each string may have up to two wildcards \ud83c\udf1f, which will match any symbol in a permutation. No string of length    seven containing more than one wildcard will count as a permutation.\n\n4) Your score is the length of the longest of the three strings, with lower scores better.\n\n\n#### Now what does the above statement mean ? Let's understand the problem with a simple example (consider only 3 symbols):\n\nLet, \ud83c\udf85, \ud83e\udd36, \ud83e\udd8c be represented as 1, 2, 3 respectively . Now there can be 6 unique combinations of these symbols (numbers in our example) such as 123, 321, 213 and so on . But how 6 combinations? The answer is simply 3! (!-factorial sign, don't mistake it to be an exclaimation sign), factorial is a mathematical concept which is defined as $n! = n\\dot (n-1)\\dot (n-2)...1 \\hspace{0.25cm} Eg: 7! = 7.6.5.4.3.2.1 = 5040$ . \n\nNow we have been asked to create 3 strings (here let's say 3 number) made of these permutations , but there are certain conditions:\n\n1) There must be atleast 1 number out of these 3 numbers which has all the permutations in it , all 6 of them . Like 123132213231312321 . \n\n2) All combinations of first 2 numbers must be there in all the three numbers , which means all such unique combinations which starts with 12.., must be there in all the numbers . In our case it is only 123, but when we will start working with the whole dataset there are going to be lot more and for your string to be valid all such combinations must be there in all 3 strings . Like in our case 123 must be in all our numbers .\n\n3) Now there is a wildcard , represented by \ud83c\udf1f which gives us the independence of using any symbol (number here in example) in that place . \n\n***But the restriction is when string lenght is 7 in the original problem , we can't use more than 1 wildcard but if the string lenght is more than 7 we can use atmost 2 wildcards .***\n\n4) Our score is the length of the largest string (or number here) amongst the 3 strings that we'll be creating .\n\n\nSay considering only those 3 symbols (or numbers) the strings possible are: \n123132213231312321, 123, 12 . (This set satisfies all conditions, 1st string has all possible combinations of the numbers and also has all combinations of 12..., 2nd string has all combinations of 12.., 3rd string as well has all combinations of 12.... )\n\n**So each and every condition is satisfied** \n\nHere the score is going to be = 18 , i.e. len(123132213231312321) .\n\nBut we can write 123132213231312321 in more and more optimised ways, like say 123121321 - see this also is a valid string and satisfies all conditions , but the length is only 9 . As a result our score becomes 9 which much better than our previous score (lower the better) . **So this is the objective of this problem**  ","decde98f":"**This shows all the possible permutations , all 7! = 5040 are given here in this csv file .** ","cc52b5f9":"**Here we are just checking each of the 3 strings if it contains all the mandatory combinations of '\ud83c\udf85\ud83e\udd36', if not we just concatenate those permutations to those strings** ","360ebc7b":"**This csv contains all possible places where the wildcard can be placed, see only 1 wildcard is used in every permutation cause as the condition says any string with length 7 cannot have more than 1 wildcard .**","b9c2c67f":"The length turns out to be 5913, but still date the shortest has been found to be 5906 . So definitely the pattern does not hold . But yes, it is better than the sample file which has a length of 6985.","54af0cb9":"# Super-permutation Problem","94b3f4c6":"**distance-matrix** is a dataset which shows us the distance between two combinations say in our above example , 1 represented \ud83c\udf85 and \ud83e\udd36 represented 2 and \ud83e\udd8c was 3 , 123 and 132 has a distance of 3 , but why ? Because to get 132 from 123 we have to write all the **3** digits all over again, but the distance between 123 and 231 is 1 because inorder to get 231 from we just need to add **1** at the end of 123, (like this - 1231). \n\n**Note: Here all the diagonal elements are 0 and the upper triangle of the matrix is the same as the lower triangle . 0 indicates the distance between two same permutation is 0 , that is distance between 123 and 123 is 0 since we are not changing anything but still we get our desired output .**","92dc3598":"The best solution is the best till date , superpermutation of with 7 numbers or digits or anything less than 5906 has been found till date , so as we need **3 strings which in total would have all the permutations** , we just need to divide the best solution into 3 parts and try to add to it as needed to satisfy the given conditions . ","7536629a":"**This is a sample submission csv , where the largest string is of length 6985 and set of 3 strings which satisfies all given conditions**\n\nThe length can be checked if we make a submission using this sample_submission.csv file","136894e9":"# Data Loading","713064c2":"# The Solution","8ca3f3e7":"**Now, the sample file provided has a very basic solution, we need to optimise the same to get a better score .**\n\nNow whatever I explained in the above cells, like how to reduce the string size yet contain all permutations , that has a special name called **super-permutation**, but suprisingly see the string \"super-permutation\" can be written as su**PER**mutation . \n\n- The supermutation of 1 is 1 . length = 1\n- The supermutation of 2 is 121 Length = 3, (12 and 21, the first two digits in 121 has one permutation and the last two digit has another one.)\n- The supermutation of 3 has Length = 9 . (See the example above in the first cell)\n- The supermutation of 4 has Length = 33 . \n- The supermutation of 5 has Length = 153 .\n\nBut that's it , supermutation of 5 is the last known to us. But do you see any pattern here ?\nYeah!\n\n- 1! = 1\n- 1!+2! = 3\n- 1!+2!+3! = 9\n- 1!+2!+3!+4! = 33\n- 1!+2!+3!+4!+5! = 153\n\nBut, then super-permutation of 6 should have been 1!+2!+3!+4!+5!+6! = 873 ? But unfortunately, this didn't hold, recently someone has found the super-permutation of 6 to be **872** . ","f6c07cc1":"Let's divide the string into 3 parts using these indices but we'll slice it in such a way so that no combination misses out , because if we slice it at the indices obtained we **might break the sequence of a permutation midway**, so take a overlap , because repeatation is better than breaking sequence .","59f63303":"As discussed the best solution for super-permutation of n=7 is 5906 . Let's take that solution and optimize it .","75df71a3":"# Import Statements","e6a1e018":"**It prints nothing showing that none of the permutation has gone missing**","93b03941":"Let's check if we are missing out any permutation when all the 3 strings are taken together."}}