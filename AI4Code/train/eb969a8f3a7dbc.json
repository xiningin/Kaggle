{"cell_type":{"5516e037":"code","b29dbdad":"code","19292c59":"code","9e13c1ae":"code","e28c2fe2":"code","fabf17a2":"code","f5704544":"code","bb55bc1f":"code","172fdb7f":"code","1dfd6fd2":"code","b25922c1":"code","8f15697c":"code","fbb714e1":"code","8cc46786":"code","50c1da1b":"code","9746928b":"markdown","759bf283":"markdown","1d35d622":"markdown","8931d120":"markdown"},"source":{"5516e037":"# Importing Packages & Dependancies\nimport pandas as pd\nimport pandas_datareader.data as web\nfrom pandas import Series, DataFrame\nimport numpy as np\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport matplotlib as mpl\nimport datetime\n","b29dbdad":"# Uploading & Importing the MSFT Stock data\ndf = pd.read_csv(\"\/kaggle\/input\/Microsoft-Stock\/MSFT-stock.csv\")\ndf.head (7)","19292c59":"#Creates two lists called dates and prices\ndates = []\nprices = []","9e13c1ae":"#Prints the last row and column within the dataset. This is the price we will be predicting (167.770004)\ndf.tail(1)","e28c2fe2":"#Creates a new dataset that includes all but the last row\ndf = df.head(len(df)-1)\n","fabf17a2":"#Counts and prints the number of rows and columns within the dataset\ndf.shape","f5704544":"#Gets all of the roads from the dates & open cloumn\ndf_dates = df.loc[:, 'Date']\ndf_open = df.loc[:, 'Open']","bb55bc1f":"#Creates an dataset for dates and open prices\nfor date in df_dates:\n  dates.append( [int(date.split('-')[2])])\n\nfor open_price in df_open:\n  prices.append(float(open_price))","172fdb7f":"#Prints the prices that was recorded\nprint(prices)","1dfd6fd2":"#Prints the dates that was recorded\nprint(dates)","b25922c1":"def predict_prices(dates, prices, x):\n\n  #Creates 3 SVR models\n  svr_lin = SVR(kernel='linear', C=1e3)\n  svr_poly = SVR(kernel='poly', C=1e3)\n  svr_rbf = SVR(kernel='rbf', C=1e3)\n\n  #Trains the SVR models\n  svr_lin.fit(dates, prices)\n  svr_poly.fit(dates, prices)\n  svr_rbf.fit(dates, prices)\n\n  #Creates & Trains the Linear Regression Model\n  lin_reg = LinearRegression()\n  lin_reg.fit(dates, prices)\n\n  #Plots all models and data onto a graph\n  plt.scatter(dates, prices, color='black', label='Data')\n  plt.plot(dates, svr_rbf.predict(dates), color='red', label='SVR RBF')\n  plt.plot(dates, svr_poly.predict(dates), color='blue', label='SVR POLY')\n  plt.plot(dates, svr_lin.predict(dates), color='green', label='SVR LINEAR')\n  plt.plot(dates, lin_reg.predict(dates), color='orange', label='LINEAR REG')\n  plt.xlabel('Days')\n  plt.ylabel('Price')\n  plt.title('Regression')\n  plt.legend()\n  plt.show()\n\n  return svr_rbf.predict(x)[0], svr_lin.predict(x)[0], svr_poly.predict(x)[0], lin_reg.predict(x)[0]","8f15697c":"predicted_price = predict_prices(dates, prices, [[24]])\nprint(predicted_price)","fbb714e1":"start = datetime.datetime(2010, 1, 1)\nend = datetime.datetime(2020, 1, 1)\ndf = web.DataReader(\"MSFT\", 'yahoo', start, end)\ndf.tail()","8cc46786":"close_px = df['Adj Close']\nmavg = close_px.rolling(window=100).mean()","50c1da1b":"# Adjusting the size of matplotlib\nmpl.rc('figure', figsize=(8, 7))\nmpl.__version__\n\n# Adjusting the style of matplotlib\nstyle.use('ggplot')\n\nclose_px.plot(label='MSFT')\nmavg.plot(label='Moving Average')\nplt.legend()","9746928b":"# Machine Learning - Predicting Stock Opening Prices","759bf283":"# Imports","1d35d622":"# MSFT Moving Average","8931d120":"This program attempts to predict Microsoft Corp stock for a specific day by importing histroical MSFT stock data and using Machine Learning algorithm called Support Vector Regression (SVR) & Linear Regression (LR) models."}}