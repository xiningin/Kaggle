{"cell_type":{"988b6f5d":"code","7390d30b":"code","a4e14e13":"code","6f0f313e":"code","7a0c3830":"code","7b055779":"code","a22ecb47":"code","0070ecd7":"code","ee9e86c4":"code","5ec84f8b":"code","cba48c3a":"code","ce73b062":"code","03f52860":"markdown","8d36b313":"markdown"},"source":{"988b6f5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7390d30b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","a4e14e13":"AgeGroupDetails=pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv\")\nAgeGroupDetails.head()","6f0f313e":"sns.set(rc={'figure.figsize':(11,8)})\nx=AgeGroupDetails.AgeGroup\ny=AgeGroupDetails.TotalCases\ny_pos=np.arange(len(x))\nplt.xticks(y_pos,x)\nplt.xticks(rotation=90)\nplt.xlabel('Age Groups')\nax=sns.kdeplot(y_pos,y,cmap='Blues',shade=True,cbar=True)","7a0c3830":"covid_19_india=pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_19_india.head()","7b055779":"sns.pairplot(covid_19_india, palette=\"Set2\")","a22ecb47":"from IPython.core.display import HTML\nimport folium\nimport datetime\nfrom datetime import datetime\nimport requests\nfrom bs4 import BeautifulSoup\nimport lxml.html as lh\nimport pandas as pd\nimport re\nimport time\nimport psutil\nimport json\n\nimport numpy as np\nfrom PIL import Image\nimport os\nfrom os import path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import solve_ivp\n\nimport plotly.graph_objects as go\nfrom pandas.plotting import register_matplotlib_converters\nimport plotly.express as px\nfrom IPython.display import display, Markdown, Latex\nimport matplotlib as plot\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\n\nregister_matplotlib_converters()\nfrom IPython.display import Markdown\n\n\ndataset = pd.DataFrame()","0070ecd7":"indiaLiveJson = 'https:\/\/api.covid19india.org\/data.json'\nr = requests.get(indiaLiveJson)\nindiaData = r.json()","ee9e86c4":"testingHistory = pd.DataFrame()\ntestingNO = []\ntestedPos = []\ntimeStamp = []\nfor index in range(len(indiaData['tested'])):\n    try:\n        testingNO.append(int(re.sub(',','',indiaData['tested'][index]['totalindividualstested'])))\n        testedPos.append(int(re.sub(',','',indiaData['tested'][index]['totalpositivecases'])))\n    except:\n        testingNO.append(testingNO[len(testingNO)-1])\n        testedPos.append(testedPos[len(testedPos)-1])\n        \n    timeStamp.append(indiaData['tested'][index]['updatetimestamp'][:-9])\n    \ntestingHistory['testing_no'] = testingNO[:-1]\ntestingHistory['testing_pos'] = testedPos\ntestingHistory['time_stamp'] = timeStamp\n\ntestingHistory.drop_duplicates(subset =\"time_stamp\", \n                     keep = False, inplace = True) \n\n\nfig = go.Figure()\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_no'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='Testing Pattern'))\n\nfig = fig.add_trace(go.Scatter(y=testingHistory['testing_pos'], x=testingHistory['time_stamp'],\n                    mode='lines+markers',\n                    name='Tested Positive'))\n\nfig = fig.update_layout(\n    title=\"India COVID-19 Testing History\",\n    xaxis_title=\"Testing\",\n    yaxis_title=\"Date\",\n    \n)\n\n\nfig.show()","5ec84f8b":"indiaConfirmed = []\nindiaRecovered = []\nindiaDeseased = []\ntimeStamp = []\nfor index in range(len(indiaData['cases_time_series'])):\n    indiaConfirmed.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalconfirmed'])))\n    indiaRecovered.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totalrecovered'])))\n    indiaDeseased.append(int(re.sub(',','',indiaData['cases_time_series'][index]['totaldeceased'])))\n    \n    timeStamp.append(indiaData['cases_time_series'][index]['date'])\n    \n\nfig = go.Figure()\n#fig = px.scatter(testingHistory,x=\"time_stamp\", y=\"testing_no\")\n\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaConfirmed,\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaRecovered,\n                    mode='lines+markers',\n                    name='Recoverd Patients'))\nfig = fig.add_trace(go.Scatter(x=timeStamp, y=indiaDeseased,\n                    mode='lines+markers',\n                    name='Deseased Patients'))\n\nfig = fig.update_layout(\n    title=\"India COVID-19 \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Testing\",\n    \n)\n\n\nfig.show()","cba48c3a":"plt.figure(figsize=(5,5))\ncured=covid_19_india[covid_19_india['Cured']==True]\ndeaths=covid_19_india[covid_19_india['Deaths']==True]\nslices_hours = [cured['Time'].count(),deaths['Time'].count()]\nactivities = ['Cured', 'Deaths']\ncolors = ['red', 'green']\nexplode=(0,0.1)\nplt.pie(slices_hours, labels=activities,explode=explode, colors=colors, startangle=90, autopct='%1.1f%%',shadow=True)\nplt.show()","ce73b062":"covid_19_india['active']=covid_19_india['Confirmed']-(covid_19_india['Cured']+covid_19_india['Deaths'])\nf,axes = plt.subplots(2, 2, figsize=(15,10))\nsns.distplot( covid_19_india[\"Cured\"] , color=\"blue\", ax=axes[0, 0])\nsns.distplot( covid_19_india[\"Deaths\"] , color=\"violet\", ax=axes[0, 1])\nsns.distplot( covid_19_india[\"Confirmed\"] , color=\"olive\", ax=axes[1, 0])\nsns.distplot( covid_19_india[\"active\"] , color=\"orange\", ax=axes[1, 1])\nf.subplots_adjust(hspace=.3,wspace=0.03) ","03f52860":"Visualising the impact of covid-19 on various age groups","8d36b313":"Working on in it to further improve!!! Please upvote if you like it!!!\n\nFor more details on covid-19 visit: http:\/\/www.mohfw.gov.in\/"}}