{"cell_type":{"7887ef54":"code","73af9e6a":"code","f16dec2b":"code","76d58979":"code","f8630f6e":"code","624f8864":"code","784cd42c":"code","87c2a9c6":"code","6bc8ba2d":"code","226e3469":"code","638d49b6":"code","1b6ac9a0":"markdown","e124355d":"markdown","0cc05326":"markdown","bf1c11a2":"markdown","d22b5095":"markdown","50c9b7a2":"markdown","3d66b976":"markdown","15de9c80":"markdown","5a0da1a7":"markdown","a9679bc4":"markdown","b6c2ccf2":"markdown","06448589":"markdown","5e5ae595":"markdown"},"source":{"7887ef54":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))","73af9e6a":"!git clone https:\/\/gitlab.com\/YannBerthelot\/kaggle_pystacknet.git\nprint(os.listdir(\"kaggle_pystacknet\/pystacknet\"))\n!pip install \"kaggle_pystacknet\/pystacknet\"\nimport pystacknet","f16dec2b":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","76d58979":"def feature_engineering(df):\n    df[\"Cabin\"]=df[\"Cabin\"].fillna(\"C\")\n    deck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\n    df['Deck'] = df['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    mean = df[\"Age\"].mean()\n    std = df[\"Age\"].std()\n    is_null = df[\"Age\"].isnull().sum()\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n\n    age_slice = df[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    df[\"Age\"] = age_slice\n    df[\"Age\"] = df[\"Age\"].astype(int)\n    df[\"Embarked\"]=df['Embarked'].fillna(\"S\")\n    \n    df[\"Siblings\"]=df[\"SibSp\"]+df[\"Parch\"]\n    df=df.drop([\"Name\",\"Ticket\",\"SibSp\",\"Parch\",\"PassengerId\",\"Cabin\",\"Fare\"],axis=1)\n    return(df)\n\ntrain=feature_engineering(train)\ntest=feature_engineering(test)","f8630f6e":"X=train.drop(\"Survived\",axis=1)\nY=train[\"Survived\"]","624f8864":"from sklearn.model_selection import train_test_split\n\nx, x_test, y, y_test = train_test_split(X, Y, test_size=0.20, random_state=42,shuffle=True)\n\nX_oh=pd.get_dummies(X)\n\ntest_oh=pd.get_dummies(test)\ntest_oh[\"Deck_T\"]=0","784cd42c":"from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesClassifier, ExtraTreesRegressor, GradientBoostingClassifier,GradientBoostingRegressor\nfrom sklearn.linear_model import LogisticRegression, Ridge\nfrom sklearn.decomposition import PCA\nfrom lightgbm import LGBMClassifier\nmodels=[ \n            \n            [RandomForestClassifier (n_estimators=100, criterion=\"entropy\", max_depth=5, max_features=0.5, random_state=1),\n             ExtraTreesClassifier (n_estimators=100, criterion=\"entropy\", max_depth=5, max_features=0.5, random_state=1),\n             GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=5, max_features=0.5, random_state=1),\n             LogisticRegression(random_state=1),\n             LGBMClassifier()],\n            [RandomForestClassifier (n_estimators=100, criterion=\"entropy\", max_depth=5, max_features=0.5, random_state=1),\n             ExtraTreesClassifier (n_estimators=100, criterion=\"entropy\", max_depth=5, max_features=0.5, random_state=1),\n             GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=5, max_features=0.5, random_state=1),\n             LogisticRegression(random_state=1),\n             LGBMClassifier()],           \n            \n            ]","87c2a9c6":"from pystacknet.pystacknet import StackNetClassifier\n\nmodel=StackNetClassifier(models, metric=\"auc\", folds=5,\n\trestacking=False,use_retraining=True, use_proba=True, \n\trandom_state=12345,n_jobs=1, verbose=1)\n\nmodel.fit(X_oh,Y)\noutput=model.predict_proba(test_oh)","6bc8ba2d":"output=pd.DataFrame(output).rename(index=str, columns={\"index\": \"PassengerId\", 0: \"Survived\"})\n\noutput=output.reset_index()\n\noutput=output.rename(columns={\"index\":\"PassengerId\"})\n\noutput[\"PassengerId\"]=output[\"PassengerId\"].astype(\"int\")+892\n\noutput[\"Survived\"]=(output[output.columns[output.shape[1]-1]]>0.5).apply(int)\n\noutput=output[[\"PassengerId\",\"Survived\"]]","226e3469":"import shutil\nshutil.rmtree(\"kaggle_pystacknet\")","638d49b6":"output.to_csv(\"results.csv\",index=False,header=True)","1b6ac9a0":"## pyStackNet installation","e124355d":"## Output preparation","0cc05326":"## pyStackNet","bf1c11a2":"Please comment and\/or like if this kernel helped you so that others can see it.","d22b5095":"*because I can't do better*","50c9b7a2":"# pyStackNet on Kaggle","3d66b976":"This kernel aims at exposing a working implentation of pyStackNet inside kaggle. The original pyStackNet does not work straightforward and some modifications are necessary to make it run in Kaggle. \nThis includes small modifications in the code that I uploaded on https:\/\/gitlab.com\/YannBerthelot\/kaggle_pystacknet.git\n\nAll credit goes to the original authors of StackNet and pyStackNet.\nhttps:\/\/github.com\/h2oai\/pystacknet\nhttps:\/\/github.com\/kaz-Anova\/StackNet","15de9c80":"## Titanic basic example","5a0da1a7":"don't forget to turn internet \"On\" in the kernel settings.","a9679bc4":"### IMPORTANT : due to the number of folders we created, commit will fail if we don't erase them. So let's do some cleaning","b6c2ccf2":"Including LGBM implementation in pystacknet for your pleasure","06448589":"## Classic start","5e5ae595":"## Output for submission"}}