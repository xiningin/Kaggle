{"cell_type":{"2a442274":"code","00048646":"code","1d7ce17e":"code","f28c3404":"code","b4b049cd":"code","9eff8c40":"code","e2e7c893":"code","884072d4":"code","336dd8f0":"code","0a150464":"code","b8b0e6ba":"code","42a3aaed":"code","95e52029":"code","b4316262":"code","da1fe98f":"code","127f39e6":"code","a4d6153c":"code","6b281fd9":"code","3ccbd8b2":"code","69685b0a":"code","408004a8":"code","cbab9d6f":"code","b9e8f00b":"code","65e3041f":"code","bae58003":"code","21ca4037":"code","af5d0b32":"code","19139ea2":"code","f6a9dc6f":"code","40639383":"code","e1053e96":"code","3ed8c11a":"code","11f7b441":"code","fd367165":"code","b5dcae90":"code","c9cab845":"code","fcc00c8e":"code","adc3140a":"code","6b8ee3cc":"code","02895d17":"code","1dc45959":"code","b7af4e2d":"code","a0c8aed7":"markdown","4bc5b33c":"markdown","815576ba":"markdown","a7d40469":"markdown","ca66ed17":"markdown","b0709617":"markdown","3ebfeee8":"markdown","cea99999":"markdown","25229ad4":"markdown","ca25eb97":"markdown","cb39aba0":"markdown","b71f16c5":"markdown","0dd5c26a":"markdown","8c983dac":"markdown","1a3e181e":"markdown","d587faac":"markdown","a04556c2":"markdown","bda3e979":"markdown","fd509c83":"markdown","65a926c3":"markdown","281cc20a":"markdown","6d3571b3":"markdown","f5dd91d6":"markdown","b5f3beba":"markdown","a20e8aff":"markdown","af6378a5":"markdown","876bf79f":"markdown","6d9ec4e7":"markdown","d0c425fa":"markdown","818e4afe":"markdown","56840a25":"markdown"},"source":{"2a442274":"import gc\nimport os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotnine import *\nfrom wordcloud import WordCloud, STOPWORDS\nimport gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.stem.porter import *\nimport nltk\nfrom gensim import corpora, models\nimport pyLDAvis\nimport pyLDAvis.gensim\nfrom pandas.plotting import lag_plot\nfrom pandas.plotting import autocorrelation_plot\n\npyLDAvis.enable_notebook()\nnp.random.seed(2018)\nwarnings.filterwarnings('ignore')","00048646":"%%time\nJIGSAW_PATH = \"..\/input\/\"\ntrain = pd.read_csv(os.path.join(JIGSAW_PATH,'train.csv'), index_col='id')\ntest = pd.read_csv(os.path.join(JIGSAW_PATH,'test.csv'), index_col='id')","1d7ce17e":"train.head()","f28c3404":"test.head()","b4b049cd":"print(\"Train and test shape: {} {}\".format(train.shape, test.shape))","9eff8c40":"train.info()","e2e7c893":"%%html\n<style>\n.container { width:1000px !important; }\n<\/style>","884072d4":"fig, axarr = plt.subplots(nrows=1,ncols=1,figsize=(12,4))\nsns.distplot(train.target, kde=False, bins=40).set_title(\"Histogram Plot of target\", fontsize=15)","336dd8f0":"fig, axarr = plt.subplots(nrows=1,ncols=1,figsize=(12,4))\nsns.kdeplot(train.target).set_title(\"Kernel Density Estimate(kde) Plot of target\", fontsize=15)","0a150464":"fig, axarr = plt.subplots(nrows=3,ncols=2,figsize=(12,8))\nfig.suptitle('Distribution of toxicity subtype attributes in train data', fontsize=15)\nsns.kdeplot(train['severe_toxicity'], ax=axarr[0][0])\nsns.kdeplot(train['obscene'], ax=axarr[0][1])\nsns.kdeplot(train['threat'], ax=axarr[1][0])\nsns.kdeplot(train['insult'], ax=axarr[1][1])\nsns.kdeplot(train['identity_attack'], ax=axarr[2][0])\nsns.kdeplot(train['sexual_explicit'], ax=axarr[2][1])\nsns.despine()","b8b0e6ba":"train['target_binarized'] = train['target'].apply(lambda x : 'Toxic' if  x >= 0.5 else 'Non-Toxic')\nfig, axarr = plt.subplots(1,1,figsize=(12, 4))\ntrain['target_binarized'].value_counts().plot.bar(fontsize=10).set_title(\"Toxic vs Non-Toxic Comments Count\", \n                                                                         fontsize=15)\nsns.despine(bottom=True,  left=True)","42a3aaed":"#train = train.drop(columns='target_binarized')","95e52029":"f = (\n    train.loc[:, ['target', 'severe_toxicity', 'obscene', 'threat', 'insult', 'identity_attack', 'sexual_explicit']]\n        .applymap(lambda v: float(v))\n        .dropna()\n)","b4316262":"f.head()","da1fe98f":"f_corr=f.corr()","127f39e6":"fig, ax = plt.subplots(1, 1, figsize=(12,6))\nsns.heatmap(f_corr, annot=True)","a4d6153c":"fig, axarr = plt.subplots(nrows=3,ncols=2,figsize=(12,8))\nfig.suptitle('Distribution of race and ethnicity features values in the train set', fontsize=15)\nsns.kdeplot(train['asian'], ax=axarr[0][0], color='mediumvioletred')\nsns.kdeplot(train['black'], ax=axarr[0][1], color='mediumvioletred')\nsns.kdeplot(train['jewish'], ax=axarr[1][0], color='mediumvioletred')\nsns.kdeplot(train['latino'], ax=axarr[1][1], color='mediumvioletred')\nsns.kdeplot(train['other_race_or_ethnicity'], ax=axarr[2][0], color='mediumvioletred')\nsns.kdeplot(train['white'], ax=axarr[2][1], color='mediumvioletred')\nsns.despine()","6b281fd9":"g = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"asian\", color='mediumvioletred')\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"black\", color='mediumvioletred')\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"jewish\", color='mediumvioletred')\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"latino\", color='mediumvioletred')\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"other_race_or_ethnicity\", color='mediumvioletred')\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"white\", color='mediumvioletred')","3ccbd8b2":"fig, axarr = plt.subplots(nrows=1,ncols=2,figsize=(12,4))\nfig.suptitle('Distribution of toxicity target for every race\/ethnicity sample that has been annotated with value of 1', \n             fontsize=14)\nsns.violinplot(train[train['asian'] == np.max(train.asian)]['target'], ax=axarr[0]).set_title(\"asian\")\nsns.violinplot(train[train['black'] == np.max(train.black)]['target'], ax=axarr[1]).set_title(\"black\")\nsns.despine()\nfig, axarr = plt.subplots(nrows=1,ncols=2,figsize=(12,4))\nsns.violinplot(train[train['jewish'] == np.max(train.jewish)]['target'], ax=axarr[0]).set_title(\"jewish\")\nsns.violinplot(train[train['latino'] == np.max(train.latino)]['target'], ax=axarr[1]).set_title(\"latino\")\nsns.despine()\nfig, axarr = plt.subplots(nrows=1,ncols=2,figsize=(12,4))\nsns.violinplot(train[train['other_race_or_ethnicity'] == np.max(train.other_race_or_ethnicity)]['target'], ax=axarr[0]).set_title(\"other_race_or_ethnicity\")\nsns.violinplot(train[train['white'] == np.max(train.white)]['target'], ax=axarr[1]).set_title(\"white\")\nsns.despine()","69685b0a":"np.min(train.target)","408004a8":"fig, axarr = plt.subplots(nrows=2,ncols=2,figsize=(12,8))\nfig.suptitle('Distribution of gender in the train set', fontsize=15)\nsns.kdeplot(train['female'], ax=axarr[0][0], color='violet')\nsns.kdeplot(train['male'], ax=axarr[0][1], color='violet')\nsns.kdeplot(train['transgender'], ax=axarr[1][0], color='violet')\nsns.kdeplot(train['other_gender'], ax=axarr[1][1], color='violet')\nsns.despine()","cbab9d6f":"g = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"female\", color=\"violet\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"male\", color=\"violet\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"transgender\", color=\"violet\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"other_gender\", color=\"violet\")","b9e8f00b":"fig, axarr = plt.subplots(nrows=2,ncols=2,figsize=(12,8))\nfig.suptitle('Distribution of sexual orientation in the train set', fontsize=15)\nsns.kdeplot(train['bisexual'], ax=axarr[0][0], color='red')\nsns.kdeplot(train['heterosexual'], ax=axarr[0][1], color='red')\nsns.kdeplot(train['homosexual_gay_or_lesbian'], ax=axarr[1][0], color='red')\nsns.kdeplot(train['other_sexual_orientation'], ax=axarr[1][1], color='red')\nsns.despine()","65e3041f":"g = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"bisexual\", color=\"red\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"heterosexual\", color=\"red\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"homosexual_gay_or_lesbian\", color=\"red\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"other_sexual_orientation\", color=\"red\")","bae58003":"fig, axarr = plt.subplots(nrows=2,ncols=2,figsize=(12,8))\nfig.suptitle('Distribution of disability in the train set', fontsize=15)\nsns.kdeplot(train['intellectual_or_learning_disability'], ax=axarr[0][0], color='green')\nsns.kdeplot(train['physical_disability'], ax=axarr[0][1], color='green')\nsns.kdeplot(train['psychiatric_or_mental_illness'], ax=axarr[1][0], color='green')\nsns.kdeplot(train['other_disability'], ax=axarr[1][1], color='green')\nsns.despine()","21ca4037":"g = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"intellectual_or_learning_disability\", color=\"green\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"physical_disability\", color=\"green\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"psychiatric_or_mental_illness\", color=\"green\")\n\ng = sns.FacetGrid(train.dropna(), col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.violinplot, \"other_disability\", color=\"green\")","af5d0b32":"train['created_date_time'] = pd.to_datetime(train['created_date']).values.astype('datetime64[M]')\n#datetime64[Y] ==> Month and Date is always 1\n#datetime64[M] ==> Date is always 1\n#datetime64[D] ==> Year, Month and Data not neglected","19139ea2":"fig, axarr = plt.subplots(nrows=1,ncols=1,figsize=(12,6))\ntrain['created_date_time'].value_counts().sort_values().plot.line(fontsize=10).set_title(\"Number of comments vs Year-Month\", \n                                                                                           fontsize=15)\nsns.despine(bottom=True,  left=True)","f6a9dc6f":"fig, axarr = plt.subplots(nrows=1,ncols=1,figsize=(12,6))\ntrain['created_date_time'].value_counts().resample('Y').sum().plot.line(fontsize=10).set_title(\"Number of comments vs Year\", \n                                                                                           fontsize=15)\nsns.despine(bottom=True,  left=True)","40639383":"fig, axarr = plt.subplots(nrows=1,ncols=1,figsize=(12,6))\nlag_plot(train['target']).set_title(\"Lag Plot\", fontsize=15)","e1053e96":"train['comment_text_length'] = train['comment_text'].apply(lambda x : len(x))\nfig, axarr = plt.subplots(1,1,figsize=(12, 6))\nsns.kdeplot(train['comment_text_length']).set_title(\"Distribution of comment_text_length\", fontsize=15)","3ed8c11a":"g = sns.FacetGrid(train, col=\"target_binarized\", size=4, aspect=1.5)\ng.map(sns.kdeplot, \"comment_text_length\", color='red')","11f7b441":"(\n    ggplot(train.sample(100000))\n        + geom_point()\n        + aes(color='comment_text_length')\n        + aes('comment_text_length', 'target')\n)","fd367165":"sns.jointplot(x='comment_text_length', y='target', data=train, kind='hex', gridsize=20, size=8)","b5dcae90":"stopwords = set(STOPWORDS)\n\ndef plot_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","c9cab845":"plot_wordcloud(train['comment_text'], title = 'Frequently used words in train data')","fcc00c8e":"plot_wordcloud(train[train['target'] == np.max(train.target)]['comment_text'], title = 'Frequent Words : Toxicity target value = 1 #Toxic')","adc3140a":"plot_wordcloud(train[train['target'] == np.min(train.target)]['comment_text'], title = 'Frequent Words : Toxicity target value = 0 #Non-Toxic')","6b8ee3cc":"plot_wordcloud(train[(train['female'] >0)&(train['target']>0.8)]['comment_text'], title = 'Frequent Words : toxicity target > 0.8 and Female')","02895d17":"plot_wordcloud(train[(train['male'] >0)&(train['target']>0.8)]['comment_text'], title = 'Frequent Words : toxicity target > 0.8 and Male')","1dc45959":"plot_wordcloud(train[(train['insult'] >0.8)&(train['target']>0.8)]['comment_text'], title = 'Frequent Words : toxicity target > 0.8 and insult > 0.8')","b7af4e2d":"plot_wordcloud(train[(train['threat'] >0.8)&(train['target']>0.8)]['comment_text'], title = 'Frequent Words : toxicity target > 0.8 and threat > 0.8')","a0c8aed7":"Considering not all, but only 100000 samples of train data for a scatter plot using ggplot library.","4bc5b33c":"Evaluation will be done like so:\n+ target >= 0.5 ==> toxic comment\n+ target < 0.5 ==> non-toxic comment\n\nLet us plot a bar chart of the count of comments labelled as toxic vs non-toxic","815576ba":"##  <a id='33'>Time Series Analysis<\/a>\n\nLet's do some basic time series analysis on the train data.","a7d40469":"##  <a id='35'>Word clouds<\/a>","ca66ed17":"**Distribution of sexual orientation with respect to target_binarized : ** ","b0709617":"**Distribution of gender with respect to target_binarized : ** ","3ebfeee8":"This suggests that the relationship between 'target' and time is weak or infact no relationship. So, let's not go ahead with an autocorrelation plot which would quantify the strength and type of relationship between observation and their lags.","cea99999":"##  <a id='31'>Target feature<\/a>\n\nLet's check the distribution of `target` value in the train set.","25229ad4":"**Distribution of comment_text_length with respect to target_binarized : ** ","ca25eb97":"**Distribution of disability with respect to target_binarized :**","cb39aba0":"## Load data","b71f16c5":"The above plots tell us that most of the comments in the train data set are non-toxic.\nAlso, kde is plotted to get the real shape of the data not a line plot because otherwise, we wouldn't get a smooth plot since a lot of outliers and inbetweeners would be introduced.","0dd5c26a":"**Please upvote if you find this kernel useful and comment below for any suggestions.**","8c983dac":"+ [1] https:\/\/www.kaggle.com\/gpreda\/jigsaw-eda\n+ [2] https:\/\/www.kaggle.com\/chewzy\/eda-toxicity-of-identities-updated-29-4\n+ [3] https:\/\/www.kaggle.com\/artgor\/toxicity-eda-logreg-and-nn-interpretation","1a3e181e":"So, the data distriution shapes of the target feature and its sub-types are similar ","d587faac":"# <a id='1'>Introduction<\/a>  \n\n## Competition objective\n\nThe competition objective is to build models that detect toxicity and reduce unwanted bias. \n\n## Background\n\nAt the end of 2017 the Civil Comments platform shut down and chose make their ~2m public comments from their platform available in a lasting open archive so that researchers could understand and improve civility in online conversations for years to come. Jigsaw sponsored this effort and extended annotation of this data by human raters for various toxic conversational attributes.","a04556c2":"**Scatter plots**","bda3e979":"One thing that really stands out is the high degree of correlation between 'target' and its sub-type 'insult'.","fd509c83":"# <a id='2'>Prepare the data for analysis<\/a>  \n\n## Load packages","65a926c3":"So, year-wise, the trend is that the number of comments have increased.","281cc20a":"## <a id='32'>Identity attributes<\/a>\n\nLet's check now the distribution of these attribute values.","6d3571b3":"**Distribution of ethnicity with respect to target_binarized : ** ","f5dd91d6":"# <a id='3'>Data exploration<\/a>  \n\nThe comments are stored in `train` and `test` in `comment_text` column.  \nAdditionally, in `train` we have identity attributes, representing the identities that are mentioned in the comment.\n* **race or ethnicity**: asian, black, jewish, latino, other_race_or_ethnicity, white  \n* **gender**: female, male, transgender, other_gender  \n* **sexual orientation**: bisexual, heterosexual, homosexual_gay_or_lesbian, other_sexual_orientation  \n* **religion**: atheist,buddhist,  christian, hindu, muslim, other_religion  \n* **disability**: intellectual_or_learning_disability, other_disability, physical_disability, psychiatric_or_mental_illness  \n\nToxicity subtype attributes:\n* severe_toxicity\n* obscene\n* threat\n* insult\n* identity_attack\n* sexual_explicit\n\nWe also have few article\/comment identification information:\n* created_date  \n* publication_id   \n* parent_id  \n* article_id \n\nSeveral user feedback information associated with the comments are provided:\n* rating  \n* funny  \n* wow  \n* sad  \n* likes  \n* disagree  \n* sexual_explicit  \n\nIn the datasets are also 2 fields relative to annotations:\n* identity_annotator_count  \n* toxicity_annotator_count\n\n\n","b5f3beba":"<h1><center><font size=\"6\">Jigsaw Toxicity - EDA<\/font><\/center><\/h1>\n\n<br>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Prepare the data for analysis<\/a>  \n- <a href='#3'>Data exploration<\/a>   \n    - <a href='#31'>Target feature<\/a>   \n    - <a href='#32'>Identity attributes<\/a>   \n    - <a href='#33'>Time Series Analysis<\/a>   \n    - <a href='#34'>Comment length analysis<\/a>   \n    - <a href='#35'>Word clouds<\/a>  \n- <a href='#4'>References<\/a>   ","a20e8aff":"##  <a id='34'>Comment Length Analysis<\/a>","af6378a5":"Highest overlap between comment_text_length = ~90 and target = 0","876bf79f":"Let us also plots the **kernel density estimates of toxicity(target) subtype attributes** as below.","6d9ec4e7":"So, the maximum number of comments have a length of about ~70 characters","d0c425fa":"## Style\n\nWe insert a small *style* cell to try to correct the style applied by the topic modelling visualization using pyLDAVis. ","818e4afe":"##  <a id='4'>References<\/a>","56840a25":"Very long Toxic comments are lesser in number in comparison with Non-Toxic comments. Also Toxic comments with #characters > ~1100 don't exist."}}