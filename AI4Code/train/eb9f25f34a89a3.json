{"cell_type":{"95fcdb66":"code","3d34ff29":"code","19fadda7":"code","48d6d5e4":"code","f3f02636":"code","bd970982":"code","206df329":"code","9def80a7":"code","f734cc63":"code","bdccb2ed":"code","892da659":"code","d4300f90":"code","e6c32b4b":"code","4e7bb07f":"code","dc67cac6":"markdown"},"source":{"95fcdb66":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 100)\nfrom ipywidgets import interact, fixed\n%matplotlib inline\nfrom matplotlib import animation\nfrom matplotlib.animation import FFMpegWriter\nimport dateutil\nfrom math import radians\nfrom IPython.display import Video\nimport warnings\nwarnings.filterwarnings('ignore')\n\nGames = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv', low_memory=False)\nPlays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\nPlayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nWeek1 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week1.csv')\nWeek2 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week2.csv')\nWeek3 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week3.csv')\nWeek4 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week4.csv')\nWeek5 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week5.csv')\nWeek6 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week6.csv')\nWeek7 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week7.csv')\nWeek8 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week8.csv')\nWeek9 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week9.csv')\nWeek10 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week10.csv')\nWeek11 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week11.csv')\nWeek12 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week12.csv')\nWeek13 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week13.csv')\nWeek14 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week14.csv')\nWeek15 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week15.csv')\nWeek16 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week16.csv')\nWeek17 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week17.csv')","3d34ff29":"for col in Plays.columns: \n    print(col) ","19fadda7":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=55,\n                          highlight_first_down_line=False,\n                          yards_to_go=10,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        #plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n        \n    if highlight_first_down_line:\n        fl = hl + yards_to_go\n        plt.plot([fl, fl], [0, 53.3], color='yellow')\n        #plt.text(fl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n    return fig, ax\ncreate_football_field()\nplt.show()","48d6d5e4":"Week1.head()","f3f02636":"fig, ax = create_football_field()\nWeek1.query(\"playId == 75 and team == 'away'\") \\\n    .plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\nWeek1.query(\"playId == 75 and team == 'home'\") \\\n    .plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nplt.title('Play # 75')\nplt.legend()\nplt.show()","bd970982":"def calculate_dx_dy_arrow(x, y, angle, speed, multiplier):\n    if angle <= 90:\n        angle = angle\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 90 and angle <= 180:\n        angle = angle - 90\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = -np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 180 and angle <= 270:\n        angle = angle - 180\n        dx = -(np.sin(radians(angle)) * multiplier * speed)\n        dy = -(np.cos(radians(angle)) * multiplier * speed)\n        return dx, dy\n    if angle > 270 and angle <= 360:\n        angle = 360 - angle\n        dx = -np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    \n        \ndef animate_player_movement(weekNumber, playId, gameId):\n    weekData = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week' + str(weekNumber) + '.csv')\n    playData = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\n    \n    playHome = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"home\"')\n    playAway = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"away\"')\n    playFootball = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"football\"')\n    \n    playHome['time'] = playHome['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playAway['time'] = playAway['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playFootball['time'] = playFootball['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    \n    maxTime = int(playAway['time'].unique().max())\n    minTime = int(playAway['time'].unique().min())\n    \n    yardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardlineNumber'].item()\n    yardsToGo = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardsToGo'].item()\n    absoluteYardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['absoluteYardlineNumber'].item() - 10\n    playDir = playHome.sample(1)['playDirection'].item()\n    \n    if (absoluteYardlineNumber > 50):\n        yardlineNumber = 100 - yardlineNumber\n    if (absoluteYardlineNumber <= 50):\n        yardlineNumber = yardlineNumber\n        \n    if (playDir == 'left'):\n        yardsToGo = -yardsToGo\n    else:\n        yardsToGo = yardsToGo\n    \n    fig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber, highlight_first_down_line=True, yards_to_go=yardsToGo)\n    playDesc = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['playDescription'].item()\n    plt.title(f'Game # {gameId} Play # {playId} \\n {playDesc}')\n    \n    def update_animation(time):\n        patch = []\n        \n        homeX = playHome.query('time == ' + str(time))['x']\n        homeY = playHome.query('time == ' + str(time))['y']\n        homeNum = playHome.query('time == ' + str(time))['jerseyNumber']\n        homeOrient = playHome.query('time == ' + str(time))['o']\n        homeDir = playHome.query('time == ' + str(time))['dir']\n        homeSpeed = playHome.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(homeX, homeY, 'o',c='gold', ms=20, mec='white'))\n        \n        # Home players' jersey number \n        for x, y, num in zip(homeX, homeY, homeNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='black', size='medium'))\n            \n        # Home players' orientation\n        for x, y, orient in zip(homeX, homeY, homeOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='gold', width=0.5, shape='full'))\n            \n        # Home players' direction\n        for x, y, direction, speed in zip(homeX, homeY, homeDir, homeSpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        # Home players' location\n        awayX = playAway.query('time == ' + str(time))['x']\n        awayY = playAway.query('time == ' + str(time))['y']\n        awayNum = playAway.query('time == ' + str(time))['jerseyNumber']\n        awayOrient = playAway.query('time == ' + str(time))['o']\n        awayDir = playAway.query('time == ' + str(time))['dir']\n        awaySpeed = playAway.query('time == ' + str(time))['s']\n        patch.extend(plt.plot(awayX, awayY, 'o',c='orangered', ms=20, mec='white'))\n        \n        # Away players' jersey number \n        for x, y, num in zip(awayX, awayY, awayNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='white', size='medium'))\n            \n        # Away players' orientation\n        for x, y, orient in zip(awayX, awayY, awayOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='orangered', width=0.5, shape='full'))\n        \n        # Away players' direction\n        for x, y, direction, speed in zip(awayX, awayY, awayDir, awaySpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        # Away players' location\n        footballX = playFootball.query('time == ' + str(time))['x']\n        footballY = playFootball.query('time == ' + str(time))['y']\n        patch.extend(plt.plot(footballX, footballY, 'o', c='black', ms=10, mec='white', data=playFootball.query('time == ' + str(time))['team']))\n        \n        \n        return patch\n    \n    ims = [[]]\n    for time in np.arange(minTime, maxTime+1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False)\n    \n    return anim","206df329":"anim = animate_player_movement(1, 75, 2018090600)","9def80a7":"writer = FFMpegWriter(fps=10)\nanim.save('animation_notrail.mp4', writer=writer)","f734cc63":"Video(\"animation_notrail.mp4\")","bdccb2ed":"anim = animate_player_movement(1, 4192, 2018091001)","892da659":"writer = FFMpegWriter(fps=10)\nanim.save('animation_notrail.mp4', writer=writer)","d4300f90":"Video(\"animation_notrail.mp4\")","e6c32b4b":"fig, ax = create_football_field()\nWeek1.query(\"playId == 4192 and team == 'away'\") \\\n    .plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\nWeek1.query(\"playId == 4192 and team == 'home'\") \\\n    .plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nplt.title('Play # 4192')\nplt.legend()\nplt.show()","4e7bb07f":"Week1.tail()","dc67cac6":"The concept of our code (This is our first attempt at doing any moderate level coding on Python so please hold all laughing until the end of the document) is to demonstrate that the development of plays can alter the success or failure of defensive schemes. Specifically, we found that quarterbacks who can release the ball in under 3 seconds tend to complete 8 and 10 yard passes at a higher rate than QB's who lag in this category. Additionally, deep balls (Throws that exceed 15 yards) need at least 3 seconds to develop a route that puts the offensive at an advantage and defense at a disadvantage. Since the data was not available, we recommend that NFL Team Analytic Deparments utilize the Amazon Web Services (AWS) QB release data to optimize defensive schemes. Specifically, it seems that the Tampa 2 and Fairbanks-Bullough 3\u20134 defensive systems allow quick release QB's to have utility in completing a large amount of 8 to 10 yard passes. To assess release, we utilized the data to convert the play data into MP4 and manually gauged a wide variety of passes (All videos are not shown to shorten the notebook) regarding QB release (Which was relatively simple with 10 Frames Per Second Speed Setting). "}}