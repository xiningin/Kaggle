{"cell_type":{"6e246b10":"code","1613cc45":"code","fdc0eed2":"code","75d378ec":"code","526003c0":"code","bf839f0f":"code","3cac3383":"code","7fffe418":"code","b120d42f":"code","43ca3ee6":"code","60811b07":"code","6e673c3e":"code","a15c347e":"code","20016355":"code","7e5bc297":"code","6e953fca":"code","a9815f53":"code","3f132e07":"code","de6f2f75":"code","71f70b19":"code","bb84a32f":"code","6b96a48c":"code","39bb00ca":"code","f42a1aa7":"code","79fa9cca":"code","f4d2f114":"code","f5cdc669":"code","e8d02fb8":"code","00162489":"code","bd206701":"code","c7da0ae6":"code","9773002b":"code","bc5dacd1":"code","40625cca":"code","78923cac":"code","bcdd979b":"code","355564fa":"code","43d1e9cb":"code","adc08931":"markdown","970dde2d":"markdown"},"source":{"6e246b10":"cd \/kaggle\/input\/","1613cc45":"import pandas as pd\nimport numpy as np\nimport keras\nimport matplotlib.pyplot as plt\nimport os","fdc0eed2":"from glob import glob\nfrom keras.preprocessing.image import load_img, img_to_array","75d378ec":"files = glob('\/kaggle\/input\/breast-histopathology-images\/*\/*\/*')","526003c0":"count =0 \nfor file in files:\n    if file[-5] == '1':\n        count+=1\nprint(count)","bf839f0f":"len(files)","3cac3383":"def show_img(files):\n    plt.figure(figsize= (10,10))\n    ind = np.random.randint(0, len(files), 25)\n    i=0\n    for loc in ind:\n        plt.subplot(5,5,i+1)\n        sample = load_img(files[loc], target_size=(150,150))\n        sample = img_to_array(sample)\n        plt.axis(\"off\")\n        plt.imshow(sample.astype(\"uint8\"))\n        i+=1","7fffe418":"show_img(files)","b120d42f":"def load_data(files, lower_limit, upper_limit):\n    X = []\n    y = []\n    for file in files[lower_limit:upper_limit]:\n        if file.endswith(\".png\"):\n            img = load_img(file, target_size = (50,50))\n            pixels = img_to_array(img)\n            pixels \/= 255\n            X.append(pixels)\n            if(file[-5] == '1'):\n                y.append(1)\n            elif(file[-5] == '0'):\n                y.append(0)\n    return np.stack(X), y\n        \n    ","43ca3ee6":"X_train,y_train = load_data(files,0, 90000)","60811b07":"import seaborn as sns","6e673c3e":"sns.countplot(y_train)","a15c347e":"X_test, y_test = load_data(files, 90000, 110000)","20016355":"sns.countplot(y_train)","7e5bc297":"files[:5]","6e953fca":"def load_balanced_data(files, size, start_index):\n    half_size = int(size\/2)\n    count=0\n    res = []\n    y = []\n    for file in files[start_index:]:\n        if (count!=half_size):\n            if file[-5] == '1' and file.endswith(\".png\"):\n                img = load_img(file, target_size = (50,50))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(1)\n                count += 1\n                \n    for file in files[start_index:]:\n        if(count!=0):\n            if(file[-5] == '0'):\n                img = load_img(file, target_size = (50,50))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(0)\n                count -= 1\n    return np.stack(res), y\n    \n            ","a9815f53":"X_train2, y_train2 = load_balanced_data(files, 90000,0)","3f132e07":"sns.countplot(y_train2)","de6f2f75":"x_test2, y_test2 = load_balanced_data(files, 20000, 100000)","71f70b19":"sns.countplot(y_test2)","bb84a32f":"data.shape","6b96a48c":"from keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, Conv2D, Activation, MaxPooling2D, Flatten, BatchNormalization","39bb00ca":"def def_model(inp_shape = (50,50,3)):\n    inp = Input(inp_shape)\n    m = Conv2D(32, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(inp)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(64, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Flatten()(m)\n    m = Dense(128, activation = \"relu\")(m)\n    out = Dense(1, activation = \"sigmoid\")(m)\n    model = Model(inp, out)\n    model.compile(optimizer = keras.optimizers.SGD(1e-3, momentum=0.9), loss=\"binary_crossentropy\", metrics = ['acc'])\n    return model","f42a1aa7":"model = def_model()","79fa9cca":"model.summary()","f4d2f114":"history = model.fit(X_train2, y_train2, validation_data=(x_test2, y_test2), epochs = 25, batch_size=256)","f5cdc669":"plt.figure(figsize = (12,6))\nplt.subplot(2,1,1)\nplt.plot(history.history['acc'], label=\"train_acc\")\nplt.plot(history.history['val_acc'], label = \"test_acc\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(history.history['loss'], label = \"train_loss\")\nplt.plot(history.history['val_loss'], label = \"val_loss\")\nplt.legend()","e8d02fb8":"def def_model2(inp_shape = (50,50,3)):\n    inp = Input(inp_shape)\n    m = Conv2D(32, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(inp)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(64, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(256, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n\n    m = Dropout(0.2)(m)\n    m = Flatten()(m)\n\n    m = Dense(128, activation = \"relu\")(m)\n    out = Dense(1, activation = \"sigmoid\")(m)\n    model = Model(inp, out)\n    model.compile(optimizer = keras.optimizers.SGD(1e-3, momentum=0.9), loss=\"binary_crossentropy\", metrics = ['acc'])\n    return model","00162489":"model2 = def_model2()","bd206701":"from keras.preprocessing.image import ImageDataGenerator","c7da0ae6":"datagen = ImageDataGenerator(height_shift_range=0.2,\n                            width_shift_range=0.2,\n                            zoom_range=0.2,\n                            shear_range=0.2)","9773002b":"train_generator = datagen.flow(X_train2, y_train2, batch_size=256)\nval_generator = datagen.flow(x_test2, y_test2, batch_size=256)","bc5dacd1":"history2 = model2.fit(train_generator, validation_data=val_generator, epochs = 15)","40625cca":"plt.figure(figsize = (12,6))\nplt.subplot(2,1,1)\nplt.plot(history2.history['acc'], label=\"train_acc\")\nplt.plot(history2.history['val_acc'], label = \"test_acc\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(history2.history['loss'], label = \"train_loss\")\nplt.plot(history2.history['val_loss'], label = \"val_loss\")\nplt.legend()","78923cac":"pred = model.predict(x_test2)","bcdd979b":"res = []\nfor prediction in pred:\n    if(prediction > 0.5):\n        res.append(1)\n    else:\n        res.append(0)","355564fa":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test2, res))\nprint(classification_report(y_test2, res))","43d1e9cb":"\nplt.figure(figsize= (10,10))\nind = np.random.randint(0, len(pred), 9)\ni=0\nfor loc in ind:\n    plt.subplot(3,3,i+1)\n    plt.xlabel(None)\n    plt.title(\"IDC ({})\".format(res[loc]))\n        \n    plt.imshow(x_test2[loc])\n    i+=1","adc08931":"## Trying Dropout and Data Augmentation ","970dde2d":"## Handling Class Imbalance Problem "}}