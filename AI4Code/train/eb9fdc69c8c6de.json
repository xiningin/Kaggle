{"cell_type":{"7e136666":"code","ebd171a6":"code","e857a84e":"code","3c42281c":"code","c7d52b63":"code","55791e57":"code","51f68e75":"code","631e97ff":"code","029fbe9b":"code","af9ea553":"code","eb326932":"code","f1adc72d":"code","b96ef607":"code","614af31c":"code","6b78dda1":"code","a74fa13f":"code","24b04529":"code","439a68d1":"markdown","37d56f3f":"markdown","426e2ef3":"markdown","030f8b49":"markdown","9b130bff":"markdown","c7949e1c":"markdown","fb4bbd8b":"markdown","a0c4f1cf":"markdown","51d67ff7":"markdown","d2110bc7":"markdown","78aec116":"markdown"},"source":{"7e136666":"import numpy as np\nimport pandas as pd\nimport re\nimport optuna\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split","ebd171a6":"train =pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')\n\ntrain.head(5)","e857a84e":"PassengerId = test['PassengerId']\nfull_data = [train, test]\n\n# Feature engineering steps taken from Anisotropic\n# Create a new feature with the length of a name \ntrain['Name_length'] = train['Name'].apply(len)\ntest['Name_length'] = test['Name'].apply(len)\n# Crate an new feature that tells whether a passenger had a cabin on the Titanic\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\n# Feature engineering steps taken from Sina\n# Create a new feature FamilySize as a combination of SibSp and Parch\nfor dataset in full_data:\n    dataset['FamilySize'] = (dataset['SibSp'] + dataset['Parch'] + 1)*100\n    dataset['Pclass'] = dataset['Pclass']*10\n# Create a new feature IsAlone from FamilySize\nfor dataset in full_data:\n    dataset['IsAlone'] = -1\n    dataset.loc[dataset['FamilySize'] == 100, 'IsAlone'] = 1\n# Remove all NULLS in the Embarked column\nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n# Remove all NULLS in the Fare column and create a new feature CategoricalFare\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare'] = pd.qcut(train['Fare'], 4)\n\n# Create a new feature CategoricalAge\nfor dataset in full_data:\n    dataset['Age'].fillna((dataset['Age'].mean()), inplace=True)\n    dataset['Age'] = dataset['Age'].astype(int)\ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)\n# Define a function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n# Create a new feature Title, containing the titles of passenger names\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nfor dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 2, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare']                               = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare']                                  = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age']                          = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4 ;\n    \nfor dataset in full_data:\n    # Some features of my own, it's a product of the most value previous features\n    dataset['Pclass_Sex'] = (dataset['Pclass']*dataset['Sex'])\n    dataset['Pclass_FS'] = (dataset['Pclass']*dataset['FamilySize'])\n    dataset['Pclass_IsAlone'] = (dataset['Pclass']*dataset['IsAlone'])\n    dataset['Sex_FS'] = (dataset['Sex']*dataset['FamilySize'])\n    dataset['Sex_IsAlone'] = (dataset['Sex']*dataset['IsAlone'])\n    dataset['FS_IsAlone'] = (dataset['FamilySize']*dataset['IsAlone'])\n    dataset['Pclass_Sex_FS'] = (dataset['Pclass']*dataset['Sex']*dataset['FamilySize'])\n    dataset['Pclass_Sex_IsAlone'] = (dataset['Pclass']*dataset['Sex']*dataset['IsAlone'])\n    dataset['Pclass_Sex_FS_IsAlone'] = (dataset['Pclass']*dataset['Sex']*dataset['FamilySize']*dataset['IsAlone'])\n    \n# Feature selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge'], axis = 1)\ntrain = train.drop(['CategoricalFare'], axis = 1)\ntest  = test.drop(drop_elements, axis = 1)\n\ny = train[\"Survived\"]\ntrain.drop(columns=[\"Survived\"], inplace=True)\n\ntrain.head(5)","3c42281c":"x_train, x_val, y_train, y_val = train_test_split(train, y, test_size=0.2)\nx_train.shape, x_val.shape","c7d52b63":"!pip install scikit-learn-intelex --progress-bar off >> \/tmp\/pip_sklearnex.log\nfrom sklearnex import patch_sklearn\npatch_sklearn()\n\n# import Random Forest classifier\nfrom sklearn.ensemble import RandomForestClassifier","55791e57":"def objective(trial):\n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 100, 2000, 100),\n        'max_depth': trial.suggest_int('max_depth', 5, 20, 5),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 5, 1),\n        'max_features': trial.suggest_categorical('max_features', ['sqrt', 'log2'])\n    }\n\n    rf = RandomForestClassifier(**params, random_state=777, n_jobs=-1)\n    rf.fit(x_train, y_train)\n    return rf.score(x_val, y_val)","51f68e75":"%%time\n\nsearch_space = {'n_estimators': [500, 1000, 2000],\n                'max_depth': [10, 15, 20],\n                'min_samples_leaf': [1, 2, 3],\n                'max_features': ['sqrt', 'log2']}\nstudy = optuna.create_study(sampler=optuna.samplers.GridSampler(search_space),\n                            direction=\"maximize\",\n                            pruner=optuna.pruners.MedianPruner())\nstudy.optimize(objective, show_progress_bar=True)","631e97ff":"print(f\"Best Value: {study.best_trial.value}\")\nprint(f\"Best Params: {study.best_params}\")","029fbe9b":"%%time\n\ncl = RandomForestClassifier(**study.best_params, random_state=777)\ncl.fit(train, y)","af9ea553":"%%time\n\npredict = cl.predict(test)","eb326932":"sample_submission[\"Survived\"] = predict\nsample_submission.head()\nsample_submission.to_csv('sklearnex.csv', index=False)","f1adc72d":"from sklearnex import unpatch_sklearn\nunpatch_sklearn()\n\n# import Random Forest classifier\nfrom sklearn.ensemble import RandomForestClassifier","b96ef607":"def objective(trial):\n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 100, 2000, 100),\n        'max_depth': trial.suggest_int('max_depth', 5, 20, 5),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 5, 1),\n        'max_features': trial.suggest_categorical('max_features', ['sqrt', 'log2'])\n    }\n\n    rf = RandomForestClassifier(**params, random_state=777, n_jobs=-1)\n    rf.fit(x_train, y_train)\n    return rf.score(x_val, y_val)","614af31c":"%%time\n\nsearch_space = {'n_estimators': [500, 1000, 2000],\n                'max_depth': [10, 15, 20],\n                'min_samples_leaf': [1, 2, 3],\n                'max_features': ['sqrt', 'log2']}\nstudy = optuna.create_study(sampler=optuna.samplers.GridSampler(search_space),\n                            direction=\"maximize\",\n                            pruner=optuna.pruners.MedianPruner())\nstudy.optimize(objective, show_progress_bar=True)","6b78dda1":"print(f\"Best Value: {study.best_trial.value}\")\nprint(f\"Best Params: {study.best_params}\")","a74fa13f":"%%time\n\ncl = RandomForestClassifier(**study.best_params, random_state=777, n_jobs=-1)\ncl.fit(train, y)","24b04529":"%%time\n\npredict = cl.predict(test)","439a68d1":"# Find optimal parameters using Optuna\n\nIt's time to adjust the hyperparameters of the algorithm to our data. To search for the optimal values of the hyperparameters, let's use [**Optuna**](https:\/\/optuna.readthedocs.io\/en\/stable\/index.html), a hyperparameter optimization framework.","37d56f3f":"# Preprocessing\n\nMost of the preprocessing was taken from Anisotropic's [Introduction to Ensembling\/Stacking in Python](https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python) notebook. I have also added several new features  that are based on the existing ones. While doing this will allow us to take previously unknown regularities into account, it might also lead to a strong correlation in data and, consequently, to overfitting. We would need to find a balance.\n\n","426e2ef3":"# Random Forest\n\nRandom Forest is an ensemble of Decision Trees. The work of this algorithm can be represented as a collective decision made by some expert committee. First, each expert (decision tree) expresses their opinion. The opinions are aggregated and the final decision is reached by the head of the committee.\n\nLet's select some of the hyperparameters that are available for Random Forest: the number of trees to be used in the algorithm `n_estimators`, the depth of each tree `max_depth`, the minimum number of samples in a tree leaf `min_samples_leaf` and the maximum number of features in a tree `max_features`. More information about parameters can be found in [**Scikit-learn library documentation**](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html).","030f8b49":"# Intel\u00ae Extension for Scikit-learn\n\nAs was mentioned earlier, we will use a library that accelerates Scikit-learn. Patch Scikit-learn using and compare a training time to get optimizations:","9b130bff":"# Conclusions\n\nWe can see that using only one classical machine learning algorithm may give you a pretty hight accuracy score. We also use well-known libraries [Scikit-learn](https:\/\/scikit-learn.org\/stable\/) and [Optuna](https:\/\/optuna.readthedocs.io\/en\/stable\/index.html), as well as the increasingly popular library [**Intel\u00ae Extension for Scikit-learn**](https:\/\/github.com\/intel\/scikit-learn-intelex). Noted that Intel\u00ae Extension for Scikit-learn gives you opportunities to:\n\n* Use your Scikit-learn code for training and inference without modification.\n* Train Scikit-learn models and use them for prediction up to 1.7 - 2 times faster.\n* Get predictions of the similar quality as the other tested frameworks.\n\n*Please upvote if you liked it.*","c7949e1c":"In Kaggle competitions and in solving real-life problems, we tend to use complex models: combinations of various algorithms, neural networks, various boosts, and much more. However, for a quick start and plunge into the field of machine learning and big data, it is enough to know how to use the algorithms of classical machine learning. An example of a classical machine learning algorithm is Random Forest. Using only this algorithm may already give you a fairly good solution.\n\nFor classical machine learning algorithms, we often use the most popular Python library, Scikit-learn. With Scikit-learn you can fit models and search for optimal parameters, but\u202fit\u202fsometimes works for hours. Speeding up this process is something anyone who uses Scikit-learn would be interested in.\n\nI want to show you how to use Scikit-learn library and get the results faster without changing the code. To do this, we will make use of another Python library,\u202f[**Intel\u00ae Extension for Scikit-learn***](https:\/\/github.com\/intel\/scikit-learn-intelex). It accelerates Scikit-learn and does not require you to change the code written for Scikit-learn.\n\nI will show you how to speed up your kernel from **25 minutes to 14 minutes** without changing your code!","fb4bbd8b":"**Predict using test data**","a0c4f1cf":"# Call stock Scikit-learn\n\nLet\u2019s run the same Scikit-learn code without the patching offered by Intel\u00ae Extension for Scikit-learn and compare its execution time with the execution time of the patched Scikit-learn.","51d67ff7":"**Train the final model**\n\nNow let's train the final model using the best parameters.","d2110bc7":"**Save the result**","78aec116":"**Split the data into two parts: for training and prediction**"}}