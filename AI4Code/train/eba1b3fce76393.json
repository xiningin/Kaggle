{"cell_type":{"5353a845":"code","0c24bf2d":"code","b89a3879":"code","e27e7d5d":"code","943d2b18":"code","d5f1b73d":"code","022cce9e":"code","1fc5a768":"code","a0486536":"code","a7df3f0c":"code","8df8bb08":"code","b8d2f036":"code","9d522769":"code","20615a2d":"code","b7ecb854":"code","6f34fe3b":"code","cc1ffb74":"code","990d90c2":"code","a56d84c3":"code","57057d80":"code","4bc5bb7c":"code","5b9e4034":"code","0ff9c7a6":"code","71a92d3a":"code","ba704cee":"code","9b6e3c86":"code","58a21a95":"code","72bebc0f":"code","173fa717":"code","d869e694":"code","a18cbb38":"code","69529323":"code","89ca560c":"code","ac4bcda8":"code","a3eaa506":"code","e6881592":"code","62e08600":"code","8231b1ca":"code","c2ff8856":"code","5924491f":"code","40e6c122":"code","a89248bc":"code","ac690d5c":"code","73722e78":"code","9e1727a6":"code","fc52f36d":"code","02640570":"code","60b8c10e":"code","8b07939a":"code","eb86d794":"code","625f29de":"code","1fc3181e":"code","ae0c8fd0":"code","f062c8d1":"code","97689062":"code","324e0fbc":"code","e4a6d733":"code","440b5a54":"code","5550ec50":"code","3e4ddbbe":"code","16196de6":"code","3d756f03":"code","bb34671d":"code","e13a732a":"code","00b22c8d":"code","5003882f":"code","7be38007":"code","38078c4e":"code","0c292492":"code","9110ce33":"code","d630c81e":"code","03795d98":"code","0305f879":"code","b09d4ae8":"code","75629b3e":"code","70a72ac3":"code","fff82855":"code","94b9c655":"code","85a0e8c5":"code","15fd9631":"code","2b42ef74":"code","b301c8ec":"code","4fa0ce11":"code","43bda5db":"code","10bb466d":"code","523c75fc":"code","9039e1c5":"code","abb9d690":"code","118e7f97":"code","7c48077f":"code","44ac5be8":"code","d5936808":"code","7ec9fdaa":"code","0271789d":"code","7d94388f":"code","caaf5bd1":"code","dcc39edf":"code","b8795b08":"code","0673a423":"code","8d1d5fba":"code","3fe3bcf1":"code","0e742dd5":"code","99bc61a3":"code","b18a49d5":"code","2370cafe":"code","dc268002":"code","9613d645":"code","f0e50bb3":"code","40517228":"code","8abd8436":"code","c405d48f":"code","3a9f8b87":"code","3b5e9cc7":"code","0387cdd6":"code","4b7cfcda":"code","d47d31d2":"code","e5db5cf0":"markdown","163a3db3":"markdown","a1adc80d":"markdown","f42794df":"markdown","2253c3fc":"markdown","5a413add":"markdown","e0fbaa1a":"markdown","803b4b49":"markdown","6d167890":"markdown","584bd87d":"markdown","97e06bea":"markdown","ee9baa20":"markdown","aa568152":"markdown","988ed6c7":"markdown","a1c1a09a":"markdown","4be6b87c":"markdown","0a41c877":"markdown","c2b276e1":"markdown","7c5cc372":"markdown","87826fe1":"markdown","1e7233c5":"markdown","80427879":"markdown"},"source":{"5353a845":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time","0c24bf2d":"print(os.listdir('..\/input\/kdd-cup-1999-data'))","b89a3879":"with open(\"..\/input\/kdd-cup-1999-data\/kddcup.names\",'r') as f:\n    print(f.read())","e27e7d5d":"cols=\"\"\"duration,\nprotocol_type,\nservice,\nflag,\nsrc_bytes,\ndst_bytes,\nland,\nwrong_fragment,\nurgent,\nhot,\nnum_failed_logins,\nlogged_in,\nnum_compromised,\nroot_shell,\nsu_attempted,\nnum_root,\nnum_file_creations,\nnum_shells,\nnum_access_files,\nnum_outbound_cmds,\nis_host_login,\nis_guest_login,\ncount,\nsrv_count,\nserror_rate,\nsrv_serror_rate,\nrerror_rate,\nsrv_rerror_rate,\nsame_srv_rate,\ndiff_srv_rate,\nsrv_diff_host_rate,\ndst_host_count,\ndst_host_srv_count,\ndst_host_same_srv_rate,\ndst_host_diff_srv_rate,\ndst_host_same_src_port_rate,\ndst_host_srv_diff_host_rate,\ndst_host_serror_rate,\ndst_host_srv_serror_rate,\ndst_host_rerror_rate,\ndst_host_srv_rerror_rate\"\"\"\n\ncolumns=[]\nfor c in cols.split(','):\n    if(c.strip()):\n       columns.append(c.strip())\n\ncolumns.append('target')\n#print(columns)\nprint(len(columns))","943d2b18":"with open(\"..\/input\/kdd-cup-1999-data\/training_attack_types\",'r') as f:\n    print(f.read())","d5f1b73d":"attacks_types = {\n    'normal': 'normal',\n'back': 'dos',\n'buffer_overflow': 'u2r',\n'ftp_write': 'r2l',\n'guess_passwd': 'r2l',\n'imap': 'r2l',\n'ipsweep': 'probe',\n'land': 'dos',\n'loadmodule': 'u2r',\n'multihop': 'r2l',\n'neptune': 'dos',\n'nmap': 'probe',\n'perl': 'u2r',\n'phf': 'r2l',\n'pod': 'dos',\n'portsweep': 'probe',\n'rootkit': 'u2r',\n'satan': 'probe',\n'smurf': 'dos',\n'spy': 'r2l',\n'teardrop': 'dos',\n'warezclient': 'r2l',\n'warezmaster': 'r2l',\n}\n","022cce9e":"path = \"..\/input\/kdd-cup-1999-data\/kddcup.data_10_percent.gz\"\ndf = pd.read_csv(path,names=columns)\n\n#Adding Attack Type column\ndf['Attack Type'] = df.target.apply(lambda r:attacks_types[r[:-1]])\n\ndf.head()","1fc5a768":"df.shape","a0486536":"df['target'].value_counts()","a7df3f0c":"df['Attack Type'].value_counts()","8df8bb08":"df.dtypes","b8d2f036":"df.isnull().sum()","9d522769":"#Finding categorical features\nnum_cols = df._get_numeric_data().columns\n\ncate_cols = list(set(df.columns)-set(num_cols))\ncate_cols.remove('target')\ncate_cols.remove('Attack Type')\n\ncate_cols","20615a2d":"#Visualization\ndef bar_graph(feature):\n    df[feature].value_counts().plot(kind=\"bar\")","b7ecb854":"bar_graph('protocol_type')","6f34fe3b":"plt.figure(figsize=(15,3))\nbar_graph('service')","cc1ffb74":"bar_graph('flag')","990d90c2":"bar_graph('logged_in')","a56d84c3":"bar_graph('target')","57057d80":"bar_graph('Attack Type')","4bc5bb7c":"df.columns","5b9e4034":"df = df.dropna('columns')# drop columns with NaN\n\ndf = df[[col for col in df if df[col].nunique() > 1]]# keep columns where there are more than 1 unique values\n\ncorr = df.corr()\n\nplt.figure(figsize=(15,12))\n\nsns.heatmap(corr)\n\nplt.show()","0ff9c7a6":"df['num_root'].corr(df['num_compromised'])","71a92d3a":"df['srv_serror_rate'].corr(df['serror_rate'])","ba704cee":"df['srv_count'].corr(df['count'])","9b6e3c86":"df['srv_rerror_rate'].corr(df['rerror_rate'])","58a21a95":"df['dst_host_same_srv_rate'].corr(df['dst_host_srv_count'])","72bebc0f":"df['dst_host_srv_serror_rate'].corr(df['dst_host_serror_rate'])","173fa717":"df['dst_host_srv_rerror_rate'].corr(df['dst_host_rerror_rate'])","d869e694":"df['dst_host_same_srv_rate'].corr(df['same_srv_rate'])","a18cbb38":"df['dst_host_srv_count'].corr(df['same_srv_rate'])","69529323":"df['dst_host_same_src_port_rate'].corr(df['srv_count'])","89ca560c":"df['dst_host_serror_rate'].corr(df['serror_rate'])","ac4bcda8":"df['dst_host_serror_rate'].corr(df['srv_serror_rate'])","a3eaa506":"df['dst_host_srv_serror_rate'].corr(df['serror_rate'])","e6881592":"df['dst_host_srv_serror_rate'].corr(df['srv_serror_rate'])","62e08600":"df['dst_host_rerror_rate'].corr(df['rerror_rate'])","8231b1ca":"df['dst_host_rerror_rate'].corr(df['srv_rerror_rate'])","c2ff8856":"df['dst_host_srv_rerror_rate'].corr(df['rerror_rate'])","5924491f":"df['dst_host_srv_rerror_rate'].corr(df['srv_rerror_rate'])","40e6c122":"#This variable is highly correlated with num_compromised and should be ignored for analysis.\n#(Correlation = 0.9938277978738366)\ndf.drop('num_root',axis = 1,inplace = True)\n\n#This variable is highly correlated with serror_rate and should be ignored for analysis.\n#(Correlation = 0.9983615072725952)\ndf.drop('srv_serror_rate',axis = 1,inplace = True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9947309539817937)\ndf.drop('srv_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with srv_serror_rate and should be ignored for analysis.\n#(Correlation = 0.9993041091850098)\ndf.drop('dst_host_srv_serror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9869947924956001)\ndf.drop('dst_host_serror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with srv_rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9821663427308375)\ndf.drop('dst_host_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9851995540751249)\ndf.drop('dst_host_srv_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with dst_host_srv_count and should be ignored for analysis.\n#(Correlation = 0.9736854572953938)\ndf.drop('dst_host_same_srv_rate',axis = 1, inplace=True)","a89248bc":"df.head()","ac690d5c":"df.shape","73722e78":"df.columns","9e1727a6":"df_std = df.std()\ndf_std = df_std.sort_values(ascending = True)\ndf_std","fc52f36d":"df['protocol_type'].value_counts()","02640570":"#protocol_type feature mapping\npmap = {'icmp':0,'tcp':1,'udp':2}\ndf['protocol_type'] = df['protocol_type'].map(pmap)","60b8c10e":"df['flag'].value_counts()","8b07939a":"#flag feature mapping\nfmap = {'SF':0,'S0':1,'REJ':2,'RSTR':3,'RSTO':4,'SH':5 ,'S1':6 ,'S2':7,'RSTOS0':8,'S3':9 ,'OTH':10}\ndf['flag'] = df['flag'].map(fmap)","eb86d794":"df.head()","625f29de":"df.drop('service',axis = 1,inplace= True)","1fc3181e":"df.shape","ae0c8fd0":"df.head()","f062c8d1":"df.dtypes","97689062":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score","324e0fbc":"df = df.drop(['target',], axis=1)\nprint(df.shape)\n\n# Target variable and train set\nY = df[['Attack Type']]\nX = df.drop(['Attack Type',], axis=1)\n\nsc = MinMaxScaler()\nX = sc.fit_transform(X)\n\n# Split test and train data \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)\nprint(X_train.shape, X_test.shape)\nprint(Y_train.shape, Y_test.shape)","e4a6d733":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB","440b5a54":"model1 = GaussianNB()","5550ec50":"start_time = time.time()\nmodel1.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","3e4ddbbe":"print(\"Training time: \",end_time-start_time)","16196de6":"start_time = time.time()\nY_test_pred1 = model1.predict(X_test)\nend_time = time.time()","3d756f03":"print(\"Testing time: \",end_time-start_time)","bb34671d":"print(\"Train score is:\", model1.score(X_train, Y_train))\nprint(\"Test score is:\",model1.score(X_test,Y_test))","e13a732a":"#Decision Tree \nfrom sklearn.tree import DecisionTreeClassifier","00b22c8d":"model2 = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)","5003882f":"start_time = time.time()\nmodel2.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","7be38007":"print(\"Training time: \",end_time-start_time)","38078c4e":"start_time = time.time()\nY_test_pred2 = model2.predict(X_test)\nend_time = time.time()","0c292492":"print(\"Testing time: \",end_time-start_time)","9110ce33":"print(\"Train score is:\", model2.score(X_train, Y_train))\nprint(\"Test score is:\",model2.score(X_test,Y_test))","d630c81e":"from sklearn.ensemble import RandomForestClassifier","03795d98":"model3 = RandomForestClassifier(n_estimators=30)","0305f879":"start_time = time.time()\nmodel3.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","b09d4ae8":"print(\"Training time: \",end_time-start_time)","75629b3e":"start_time = time.time()\nY_test_pred3 = model3.predict(X_test)\nend_time = time.time()","70a72ac3":"print(\"Testing time: \",end_time-start_time)","fff82855":"print(\"Train score is:\", model3.score(X_train, Y_train))\nprint(\"Test score is:\",model3.score(X_test,Y_test))","94b9c655":"from sklearn.svm import SVC","85a0e8c5":"model4 = SVC(gamma = 'scale')","15fd9631":"start_time = time.time()\nmodel4.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","2b42ef74":"print(\"Training time: \",end_time-start_time)","b301c8ec":"start_time = time.time()\nY_test_pred4 = model4.predict(X_test)\nend_time = time.time()","4fa0ce11":"print(\"Testing time: \",end_time-start_time)","43bda5db":"print(\"Train score is:\", model4.score(X_train, Y_train))\nprint(\"Test score is:\", model4.score(X_test,Y_test))","10bb466d":"from sklearn.linear_model import LogisticRegression","523c75fc":"model5 = LogisticRegression(max_iter=1200000)","9039e1c5":"start_time = time.time()\nmodel5.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","abb9d690":"print(\"Training time: \",end_time-start_time)","118e7f97":"start_time = time.time()\nY_test_pred5 = model5.predict(X_test)\nend_time = time.time()","7c48077f":"print(\"Testing time: \",end_time-start_time)","44ac5be8":"print(\"Train score is:\", model5.score(X_train, Y_train))\nprint(\"Test score is:\",model5.score(X_test,Y_test))","d5936808":"from sklearn.ensemble import GradientBoostingClassifier","7ec9fdaa":"model6 = GradientBoostingClassifier(random_state=0)","0271789d":"start_time = time.time()\nmodel6.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","7d94388f":"print(\"Training time: \",end_time-start_time)","caaf5bd1":"start_time = time.time()\nY_test_pred6 = model6.predict(X_test)\nend_time = time.time()","dcc39edf":"print(\"Testing time: \",end_time-start_time)","b8795b08":"print(\"Train score is:\", model6.score(X_train, Y_train))\nprint(\"Test score is:\", model6.score(X_test,Y_test))","0673a423":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier","8d1d5fba":"def fun():\n    model = Sequential()\n    \n    #here 30 is output dimension\n    model.add(Dense(30,input_dim =30,activation = 'relu',kernel_initializer='random_uniform'))\n    \n    #in next layer we do not specify the input_dim as the model is sequential so output of previous layer is input to next layer\n    model.add(Dense(1,activation='sigmoid',kernel_initializer='random_uniform'))\n    \n    #5 classes-normal,dos,probe,r2l,u2r\n    model.add(Dense(5,activation='softmax'))\n    \n    #loss is categorical_crossentropy which specifies that we have multiple classes\n    \n    model.compile(loss ='categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])\n    \n    return model","3fe3bcf1":"#Since,the dataset is very big and we cannot fit complete data at once so we use batch size.\n#This divides our data into batches each of size equal to batch_size.\n#Now only this number of samples will be loaded into memory and processed. \n#Once we are done with one batch it is flushed from memory and the next batch will be processed.\nmodel7 = KerasClassifier(build_fn=fun,epochs=100,batch_size=64)","0e742dd5":"start = time.time()\nmodel7.fit(X_train, Y_train.values.ravel())\nend = time.time()","99bc61a3":"print('Training time')\nprint((end-start))","b18a49d5":"start_time = time.time()\nY_test_pred7 = model7.predict(X_test)\nend_time = time.time()","2370cafe":"print(\"Testing time: \",end_time-start_time)","dc268002":"start_time = time.time()\nY_train_pred7 = model7.predict(X_train)\nend_time = time.time()","9613d645":"accuracy_score(Y_train,Y_train_pred7)","f0e50bb3":"accuracy_score(Y_test,Y_test_pred7)","40517228":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [87.951,99.058,99.997,99.875,99.352,99.793,99.914]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.ylim(80,102)\nplt.bar(names,values)","8abd8436":"f.savefig('training_accuracy_figure.png',bbox_inches='tight')","c405d48f":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [87.903,99.052,99.969,99.879,99.352,99.771,99.886]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.ylim(80,102)\nplt.bar(names,values)","3a9f8b87":"f.savefig('test_accuracy_figure.png',bbox_inches='tight')","3b5e9cc7":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [1.04721,1.50483,11.45332,126.96016,56.67286,446.69099,1211.54094]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.bar(names,values)","0387cdd6":"f.savefig('train_time_figure.png',bbox_inches='tight')","4b7cfcda":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [0.79089,0.10471,0.60961,32.72654,0.02198,1.41416,1.72521]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.bar(names,values)","d47d31d2":"f.savefig('test_time_figure.png',bbox_inches='tight')","e5db5cf0":"MODELLING","163a3db3":"This is the second version of my public kernel(Intrusion Detection System). ANN is also trained & tested on the dataset in this version.\nI would really appreciate your feedback.","a1adc80d":"DATA PREPROCESSING","f42794df":"TRAINING TIME","2253c3fc":"FEATURE MAPPING","5a413add":"CATEGORICAL FEATURES DISTRIBUTION","e0fbaa1a":"TESTING TIME","803b4b49":"TARGET FEATURE DISTRIBUTION","6d167890":"GAUSSIAN NAIVE BAYES","584bd87d":"DECISION TREE","97e06bea":"RANDOM FOREST","ee9baa20":"LOGISTIC REGRESSION","aa568152":"READING DATASET","988ed6c7":"SUPPORT VECTOR MACHINE","a1c1a09a":"TRAINING ACCURACY","4be6b87c":"DATA CORRELATION","0a41c877":"Attack Type(The attack types grouped by attack, it's what we will predict)","c2b276e1":"logged_in (1 if successfully logged in; 0 otherwise): We notice that just 70000 packets are successfully logged in.","7c5cc372":"Protocol type: We notice that ICMP is the most present in the used data, then TCP and almost 20000 packets of UDP type","87826fe1":"Artificial Neural Network","1e7233c5":"TESTING ACCURACY","80427879":"GRADIENT BOOSTING CLASSIFIER"}}