{"cell_type":{"42e668b1":"code","69357daa":"code","78a9a74a":"code","35892c3c":"code","5524adc5":"code","e492d40d":"code","8681d404":"code","a15255b4":"code","2d1b4916":"code","83068f4e":"code","2d8371ec":"code","f5c42022":"code","c99af046":"code","338c4a5a":"code","f96f7204":"code","63d7aa7b":"code","30389be8":"code","3f3f8d2b":"code","fb8be826":"code","f27ba6e8":"code","20117d38":"code","0a476c90":"code","a4f4e226":"code","23df6d70":"code","eaa0eab7":"code","125edbdd":"code","82f47bf5":"code","788b894b":"code","7462f9ca":"code","b9ef054c":"code","b9f1b2e5":"code","fb5f0129":"code","1499dac6":"code","a9c3ac84":"code","63add711":"code","344f0442":"code","63b3c2de":"code","526d32c3":"code","30343a6f":"code","d97bb580":"code","a89ef088":"code","08d6ccfe":"code","32ba6f56":"code","40be7592":"code","65a9c15f":"code","2aa184c6":"markdown","6cf83527":"markdown","816f8e66":"markdown","9d88303a":"markdown","a908a96e":"markdown"},"source":{"42e668b1":"!pip install catboost","69357daa":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport copy\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm","78a9a74a":"train = pd.read_csv('..\/input\/zindiml\/\/Train.csv')\ntest = pd.read_csv('..\/input\/zindiml\/Test.csv')\nsubmission = pd.read_csv('..\/input\/zindiml\/SampleSubmission.csv')","35892c3c":"train.head()","5524adc5":"train.loc[train['marital_status']=='f', 'marital_status'] = 'F'","e492d40d":"train['occupation_code'].unique()","8681d404":"X_train = []\nX_train_columns = train.columns\nc = 0\nfor v in train.values:\n  info = v[:8]\n  binary = v[8:]\n  index = [k for k, i in enumerate(binary) if i == 1]\n  for i in index:\n    c+=1\n    for k in range(len(binary)):\n      if k == i:\n        binary_transformed = list(copy.copy(binary))\n        binary_transformed[i] = 0\n        X_train.append(list(info) + binary_transformed + [X_train_columns[8+k]] + [c])\n\nX_train = pd.DataFrame(X_train)\nX_train.columns = ['ID', 'join_date', 'sex', 'marital_status', 'birth_year', 'branch_code',\n       'occupation_code', 'occupation_category_code', 'P5DA', 'RIBP', '8NN1',\n       '7POT', '66FJ', 'GYSR', 'SOP4', 'RVSZ', 'PYUQ', 'LJR9', 'N2MW', 'AHXO',\n       'BSTQ', 'FM3X', 'K6QO', 'QBOL', 'JWFN', 'JZ9D', 'J9JW', 'GHYX', 'ECY3', 'product_pred', 'ID2']","a15255b4":"X_test = []\ntrue_values = []\nc = 0\nfor v in test.values:\n  c += 1\n  info = v[:8]\n  binary = v[8:]\n  index = [k for k, i in enumerate(binary) if i == 1]\n  X_test.append(list(info) + list(binary) + [c])\n  for k in test.columns[8:][index]:\n    true_values.append(v[0] + ' X ' + k)\n\nX_test = pd.DataFrame(X_test)\nX_test.columns = ['ID', 'join_date', 'sex', 'marital_status', 'birth_year', 'branch_code',\n       'occupation_code', 'occupation_category_code', 'P5DA', 'RIBP', '8NN1',\n       '7POT', '66FJ', 'GYSR', 'SOP4', 'RVSZ', 'PYUQ', 'LJR9', 'N2MW', 'AHXO',\n       'BSTQ', 'FM3X', 'K6QO', 'QBOL', 'JWFN', 'JZ9D', 'J9JW', 'GHYX', 'ECY3', 'ID2']","2d1b4916":"features_train = []\nfeatures_test = []\ncolumns = []\n\nappend_features = ['P5DA', 'RIBP', '8NN1', '7POT', '66FJ', 'GYSR', 'SOP4', 'RVSZ', 'PYUQ', 'LJR9', \n'N2MW', 'AHXO','BSTQ', 'FM3X', 'K6QO', 'QBOL', 'JWFN', 'JZ9D', 'J9JW', 'GHYX', \n'ECY3', 'ID', 'ID2', 'join_date', 'sex', 'marital_status', 'branch_code', 'occupation_code', 'occupation_category_code',\n'birth_year']\nfor v in append_features:\n  features_train.append(X_train[v].values.reshape(-1, 1))\n  features_test.append(X_test[v].values.reshape(-1, 1))\n  columns.append(np.array([v]))\n\ny_train = X_train[['product_pred']]","83068f4e":"features_train = np.concatenate(features_train, axis=1)\nfeatures_test = np.concatenate(features_test, axis=1)\ncolumns = np.concatenate(np.array(columns))\n\nX_train = pd.DataFrame(features_train)\nX_train.columns = columns\nX_test = pd.DataFrame(features_test)\nX_test.columns = columns","2d8371ec":"features_train","f5c42022":"X_train","c99af046":"from datetime import date\n\nX_train['day'] = X_train['join_date'].apply(lambda x: int(x.split('\/')[0]) if (x == x) else np.nan)\nX_train['month'] = X_train['join_date'].apply(lambda x: int(x.split('\/')[1]) if (x == x) else np.nan)\nX_train['year'] = X_train['join_date'].apply(lambda x: int(x.split('\/')[2]) if (x == x) else np.nan)\nX_train['passed_years'] = date.today().year - pd.to_datetime(X_train['join_date']).dt.year\nX_train.loc[:, 'dayofweek'] = pd.to_datetime(X_train['join_date']).dt.dayofweek\n\n\nX_test.loc[:, 'dayofweek'] = pd.to_datetime(X_test['join_date']).dt.dayofweek\nX_test['day'] = X_test['join_date'].apply(lambda x: int(x.split('\/')[0]) if (x == x) else np.nan)\nX_test['month'] = X_test['join_date'].apply(lambda x: int(x.split('\/')[1]) if (x == x) else np.nan)\nX_test['year'] = X_test['join_date'].apply(lambda x: int(x.split('\/')[2]) if (x == x) else np.nan)\nX_test['passed_years'] = date.today().year - pd.to_datetime(X_test['join_date']).dt.year\n\nX_train['join_date'] = X_train['join_date'].fillna(X_train['join_date'].mode()[0])\nst_date = pd.to_datetime(X_train['join_date']).min()\nX_train['join_date'] = (pd.to_datetime(X_train['join_date']) - st_date).dt.days\nX_train['join_date'] = X_train['join_date'].astype(int)\n\nX_test['join_date'] = X_test['join_date'].fillna(X_test['join_date'].mode()[0])\nX_test['join_date'] = (pd.to_datetime(X_test['join_date']) - st_date).dt.days\nX_test['join_date'] = X_test['join_date'].astype(int)\n\n\n# X_train['join_date'] = (X_train['join_date'] - np.mean(X_train['join_date']))\/ np.std(X_train['join_date'])\n# X_test['join_date'] = (X_test['join_date'] - np.mean(X_test['join_date']))\/ np.std(X_test['join_date'])\n\nX_train['date_diff'] = X_train['year'] - X_train['birth_year']\nX_test['date_diff'] = X_test['year'] - X_test['birth_year']","338c4a5a":"X_train['day'] = X_train['day'].fillna(X_train['day'].mode()[0])\nX_train['month'] = X_train['month'].fillna(X_train['month'].mode()[0])\nX_train['year'] = X_train['year'].fillna(X_train['year'].mode()[0])\nX_train['date_diff'] = X_train['date_diff'].fillna(X_train['date_diff'].mode()[0])\nX_train['passed_years'] = X_train['passed_years'].fillna(X_train['passed_years'].mode()[0])\nX_train['dayofweek'] = X_train['dayofweek'].fillna(X_train['dayofweek'].mode()[0])\n\n\nX_test['day'] = X_test['day'].fillna(X_test['day'].mode()[0])\nX_test['month'] = X_test['month'].fillna(X_test['month'].mode()[0])\nX_test['year'] = X_test['year'].fillna(X_test['year'].mode()[0])\nX_test['date_diff'] = X_test['date_diff'].fillna(X_test['date_diff'].mode()[0])\nX_test['passed_years'] = X_test['passed_years'].fillna(X_test['passed_years'].mode()[0])\nX_test['dayofweek'] = X_test['dayofweek'].fillna(X_test['dayofweek'].mode()[0])","f96f7204":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata = X_train.append(X_test)\n\nle.fit(y_train.iloc[:,0])\ny_train = pd.DataFrame(le.transform(y_train.iloc[:,0]))\ny_train.columns = ['target']","63d7aa7b":"X_train.columns","30389be8":"X_train['birth_year'] = X_train['birth_year'].astype(int)\nX_test['birth_year'] = X_test['birth_year'].astype(int)","3f3f8d2b":"# numeric_col = ['join_date','date_diff','birth_year','dayofweek']\n# idx = []\n# for col in numeric_col:\n    \n#     mean = X_train[col].mean()\n#     std = X_train[col].std()\n\n#     std3r = mean + 4*std\n#     std3l = mean - 4*std\n\n#     drop = X_train[col][(X_train[col]>std3r) | (X_train[col]<std3l)].index.values\n#     idx.append(drop)\n    \n#     X_train = X_train.drop(drop).reset_index(drop=True)\n#     y_train = y_train.drop(drop).reset_index(drop=True)    ","fb8be826":"# without doing dummies\nplt.figure(figsize=(14,8))\nplt.scatter(X_train['join_date'], y_train['target'])","f27ba6e8":"indices = []\n\nindices.append([c for c in X_train.loc[X_train['date_diff']<=15].index.values])\nindices.append([c for c in X_train.loc[X_train['date_diff']>=80].index.values])\n# indices.append([c for c in X_train.loc[X_train['birth_year']>2010].index.values])\nidx = [item for sublist in indices for item in sublist]\n\nidx","20117d38":"print(X_train.shape)\nX_train.drop(idx, inplace=True)\ny_train.drop(idx, inplace=True)\nprint(X_train.shape)","0a476c90":"all_data = X_train.append(X_test)\n\n# Removed join date from skewness\nnumeric_col = ['join_date','date_diff','birth_year','dayofweek']\nskew = all_data[numeric_col].skew()\nskew = skew[abs(skew) > 0.75]\nskew","a4f4e226":"\nall_data['join_date'] = np.square(all_data['join_date'])\n# all_data['birth_year_mean'] = np.log1p(all_data['birth_year_mean'])\n# all_data['join_date'] = boxcox(all_data['join_date']+1)\n\nX_train = all_data[:X_train.shape[0]]\nX_test = all_data[-X_test.shape[0]:]","23df6d70":"# ONEHOT\ndata = X_train.append(X_test)\ndata = pd.get_dummies(data, columns=['sex', 'marital_status', \\\n                                     'branch_code','occupation_code',\\\n                                     'occupation_category_code','month','year','passed_years'])\nX_train = data[:X_train.shape[0]]\nX_test = data[-X_test.shape[0]:]","eaa0eab7":"data.columns.values","125edbdd":"remove_features = []\nfor i in X_train.columns:\n    if X_train[i].sum()==0:\n        remove_features.append(i)","82f47bf5":"from sklearn.model_selection import train_test_split\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neural_network import MLPClassifier","788b894b":"len(X_train.columns)","7462f9ca":"cat_features = ['sex_F', 'sex_M',\n       'marital_status_D', 'marital_status_F', 'marital_status_M',\n       'marital_status_P', 'marital_status_R', 'marital_status_S',\n       'marital_status_U', 'marital_status_W', 'branch_code_1X1H',\n       'branch_code_30H5', 'branch_code_49BM', 'branch_code_748L',\n       'branch_code_94KC', 'branch_code_9F9T', 'branch_code_BOAS',\n       'branch_code_E5SW', 'branch_code_EU3L', 'branch_code_O4JC',\n       'branch_code_O67J', 'branch_code_UAOD', 'branch_code_X23B',\n       'branch_code_XX25', 'branch_code_ZFER', 'occupation_code_00MO',\n       'occupation_code_0B60', 'occupation_code_0FOI',\n       'occupation_code_0KID', 'occupation_code_0OJM',\n       'occupation_code_0PO7', 'occupation_code_0S50',\n       'occupation_code_0SH6', 'occupation_code_0VYC',\n       'occupation_code_0ZND', 'occupation_code_1AN5',\n       'occupation_code_1DT6', 'occupation_code_1H8Y',\n       'occupation_code_1MB4', 'occupation_code_1MSV',\n       'occupation_code_1NFK', 'occupation_code_1YKL',\n       'occupation_code_2346', 'occupation_code_2686',\n       'occupation_code_2A7I', 'occupation_code_2BE6',\n       'occupation_code_2G86', 'occupation_code_2HLT',\n       'occupation_code_2JHV', 'occupation_code_2MBB',\n       'occupation_code_2R78', 'occupation_code_2US6',\n       'occupation_code_2XZ1', 'occupation_code_2YAO',\n       'occupation_code_31GG', 'occupation_code_31JW',\n       'occupation_code_374O', 'occupation_code_3NHZ',\n       'occupation_code_3X46', 'occupation_code_3YQ1',\n       'occupation_code_44SU', 'occupation_code_4M0E',\n       'occupation_code_4W0D', 'occupation_code_59QM',\n       'occupation_code_5FPK', 'occupation_code_5JRZ',\n       'occupation_code_5LNN', 'occupation_code_5OVC',\n       'occupation_code_6E4H', 'occupation_code_6KYM',\n       'occupation_code_6LKA', 'occupation_code_6PE7',\n       'occupation_code_6SKY', 'occupation_code_6XXU',\n       'occupation_code_6YZA', 'occupation_code_734F',\n       'occupation_code_738L', 'occupation_code_73AC',\n       'occupation_code_74BF', 'occupation_code_7G9M',\n       'occupation_code_7KM4', 'occupation_code_7UDQ',\n       'occupation_code_7UHW', 'occupation_code_7UWC',\n       'occupation_code_820B', 'occupation_code_834U',\n       'occupation_code_8CHJ', 'occupation_code_8HRZ',\n       'occupation_code_8Y24', 'occupation_code_93OJ',\n       'occupation_code_9B5B', 'occupation_code_9F96',\n       'occupation_code_9FA1', 'occupation_code_9HD1',\n       'occupation_code_9IM8', 'occupation_code_9IP9',\n       'occupation_code_A4ZC', 'occupation_code_A793',\n       'occupation_code_AIDS', 'occupation_code_AIIN',\n       'occupation_code_APO0', 'occupation_code_AQIB',\n       'occupation_code_B3QW', 'occupation_code_B8W8',\n       'occupation_code_BER4', 'occupation_code_BFD1',\n       'occupation_code_BIA0', 'occupation_code_BP09',\n       'occupation_code_BPSA', 'occupation_code_BWBW',\n       'occupation_code_BX9E', 'occupation_code_C1E3',\n       'occupation_code_C8F6', 'occupation_code_CAAV',\n       'occupation_code_CEL6', 'occupation_code_CV2C',\n       'occupation_code_CYDC', 'occupation_code_DD8W',\n       'occupation_code_DE5D', 'occupation_code_DHSN',\n       'occupation_code_DPRV', 'occupation_code_DZRV',\n       'occupation_code_E2MJ', 'occupation_code_E39I',\n       'occupation_code_E5PF', 'occupation_code_EE5R',\n       'occupation_code_F35Z', 'occupation_code_F57O',\n       'occupation_code_FJBW', 'occupation_code_FLNZ',\n       'occupation_code_FLXH', 'occupation_code_FSWO',\n       'occupation_code_FSXG', 'occupation_code_GQ0N',\n       'occupation_code_GVZ1', 'occupation_code_GWEP',\n       'occupation_code_GZA8', 'occupation_code_H1K7',\n       'occupation_code_HAXM', 'occupation_code_HJF4',\n       'occupation_code_HSI5', 'occupation_code_HSVE',\n       'occupation_code_HTQS', 'occupation_code_I2OD',\n       'occupation_code_I31I', 'occupation_code_IE90',\n       'occupation_code_IJ01', 'occupation_code_IMHI',\n       'occupation_code_INEJ', 'occupation_code_IQFS',\n       'occupation_code_IUT9', 'occupation_code_IX8T',\n       'occupation_code_IZ77', 'occupation_code_J9SY',\n       'occupation_code_JBJP', 'occupation_code_JHU5',\n       'occupation_code_JI64', 'occupation_code_JN20',\n       'occupation_code_JQH3', 'occupation_code_JS7M',\n       'occupation_code_JSAX', 'occupation_code_JUIP',\n       'occupation_code_K0DL', 'occupation_code_K5GV',\n       'occupation_code_K5LB', 'occupation_code_KBWO',\n       'occupation_code_KNVN', 'occupation_code_KPG9',\n       'occupation_code_KUPK', 'occupation_code_L1P3',\n       'occupation_code_L4PL', 'occupation_code_LAYD',\n       'occupation_code_LGTN', 'occupation_code_LLLH',\n       'occupation_code_LQ0W', 'occupation_code_M0WG',\n       'occupation_code_MEFQ', 'occupation_code_MU16',\n       'occupation_code_N2ZZ', 'occupation_code_N7K2',\n       'occupation_code_NDL9', 'occupation_code_NFJH',\n       'occupation_code_NO3L', 'occupation_code_NQW1',\n       'occupation_code_NSJX', 'occupation_code_NX5Y',\n       'occupation_code_OEH6', 'occupation_code_OME4',\n       'occupation_code_ONY7', 'occupation_code_OPVX',\n       'occupation_code_OQMY', 'occupation_code_OYQF',\n       'occupation_code_P2K2', 'occupation_code_P4MD',\n       'occupation_code_PJR4', 'occupation_code_PKW3',\n       'occupation_code_PMAI', 'occupation_code_PPNK',\n       'occupation_code_PSUY', 'occupation_code_PWCW',\n       'occupation_code_Q0LY', 'occupation_code_Q231',\n       'occupation_code_Q2L0', 'occupation_code_Q57T',\n       'occupation_code_Q6J6', 'occupation_code_QJID',\n       'occupation_code_QQUP', 'occupation_code_QQVA',\n       'occupation_code_QS0L', 'occupation_code_QX54',\n       'occupation_code_QZYX', 'occupation_code_R44Q',\n       'occupation_code_R7GL', 'occupation_code_RE69',\n       'occupation_code_RF6M', 'occupation_code_RH2K',\n       'occupation_code_RM3L', 'occupation_code_RSN9',\n       'occupation_code_RUFT', 'occupation_code_RXV3',\n       'occupation_code_RY9B', 'occupation_code_S96O',\n       'occupation_code_S9KU', 'occupation_code_SF1X',\n       'occupation_code_SS6D', 'occupation_code_SST3',\n       'occupation_code_SSTX', 'occupation_code_T6AB',\n       'occupation_code_TUN1', 'occupation_code_U37O',\n       'occupation_code_U9RX', 'occupation_code_UBBX',\n       'occupation_code_UC7E', 'occupation_code_UJ5T',\n       'occupation_code_URYD', 'occupation_code_UYDZ',\n       'occupation_code_V4XX', 'occupation_code_VREH',\n       'occupation_code_VVTC', 'occupation_code_VYSA',\n       'occupation_code_VZN9', 'occupation_code_W1X2',\n       'occupation_code_W3Y9', 'occupation_code_W3ZV',\n       'occupation_code_WE0G', 'occupation_code_WE7U',\n       'occupation_code_WIWP', 'occupation_code_WMTK',\n       'occupation_code_WSID', 'occupation_code_WSRG',\n       'occupation_code_WV7U', 'occupation_code_WVQF',\n       'occupation_code_X1JO', 'occupation_code_XC1N',\n       'occupation_code_XHJD', 'occupation_code_XVMH',\n       'occupation_code_Y1WG', 'occupation_code_Y7G1',\n       'occupation_code_YJXM', 'occupation_code_YMGT',\n       'occupation_code_YX47', 'occupation_code_Z7PM',\n       'occupation_code_ZA1S', 'occupation_code_ZCQR',\n       'occupation_code_ZHC2', 'occupation_code_ZKQ3',\n       'occupation_code_ZWPL', 'occupation_category_code_56SI',\n       'occupation_category_code_90QI', 'occupation_category_code_AHH5',\n       'occupation_category_code_JD7X', 'occupation_category_code_L44T',\n       'occupation_category_code_T4MS', 'month_1.0', 'month_2.0',\n       'month_3.0', 'month_4.0', 'month_5.0', 'month_6.0', 'month_7.0',\n       'month_8.0', 'month_9.0', 'month_10.0', 'month_11.0', 'month_12.0',\n       'year_2010.0', 'year_2011.0', 'year_2012.0', 'year_2013.0',\n       'year_2014.0', 'year_2015.0', 'year_2016.0', 'year_2017.0',\n       'year_2018.0', 'year_2019.0', 'year_2020.0', 'passed_years_0.0',\n       'passed_years_1.0', 'passed_years_2.0', 'passed_years_3.0',\n       'passed_years_4.0', 'passed_years_5.0', 'passed_years_6.0',\n       'passed_years_7.0', 'passed_years_8.0', 'passed_years_9.0',\n       'passed_years_10.0']","b9ef054c":"# remove_features = [str(i) for i in remove_features]","b9f1b2e5":"# cat_features = [c for c in cat_features if c not in remove_features]","fb5f0129":"# X_train,xeval,y_train,yeval = train_test_split(X_train,y_train,train_size=0.80,random_state=1236)","1499dac6":"# X_train.drop(remove_features, axis=1, inplace=True)\n# # xeval.drop(remove_features, axis=1, inplace=True)\n# X_test.drop(remove_features, axis=1, inplace=True)","a9c3ac84":"models = []\n\n\nmodels.append(CatBoostClassifier(random_state=1, max_depth=3, task_type='GPU', iterations=1900, learning_rate=0.2))\nmodels.append(CatBoostClassifier(random_state=2, max_depth=3, task_type='GPU', iterations=1900, learning_rate=0.2))\nmodels.append(CatBoostClassifier(random_state=21, max_depth=4, task_type='GPU', iterations=1250,learning_rate=0.2))\nmodels.append(CatBoostClassifier(random_state=22, max_depth=4, task_type='GPU', iterations=1250,learning_rate=0.2))\nmodels.append(CatBoostClassifier(random_state=3, max_depth=7, task_type='GPU', iterations=750))\nmodels.append(CatBoostClassifier(random_state=4, max_depth=7, task_type='GPU', iterations=750))\nmodels.append(CatBoostClassifier(random_state=5, max_depth=9, task_type='GPU', iterations=750, l2_leaf_reg=0.3))\nmodels.append(CatBoostClassifier(random_state=6, max_depth=9, task_type='GPU', iterations=750, l2_leaf_reg=0.3))\n\nmodels_xg = []\n\nmodels_xg.append(XGBClassifier(random_state=1, max_depth=3, tree_method='gpu_hist', n_estimators=150))\nmodels_xg.append(XGBClassifier(random_state=2, max_depth=3, tree_method='gpu_hist', n_estimators=150))\nmodels_xg.append(XGBClassifier(random_state=21, max_depth=4, tree_method='gpu_hist', n_estimators=120))\nmodels_xg.append(XGBClassifier(random_state=22, max_depth=4, tree_method='gpu_hist', n_estimators=120))\n\nmodels_xg.append(XGBClassifier(random_state=2, max_depth=5, tree_method='gpu_hist', n_estimators=100))\nmodels_xg.append(XGBClassifier(random_state=2, max_depth=6, tree_method='gpu_hist', n_estimators=100))\nmodels_xg.append(XGBClassifier(random_state=3, max_depth=7, tree_method='gpu_hist', n_estimators=90))\nmodels_xg.append(XGBClassifier(random_state=5, max_depth=11, tree_method='gpu_hist', n_estimators=55, reg_lambda=0.3))\nmodels_xg.append(XGBClassifier(random_state=6, max_depth=11, tree_method='gpu_hist', n_estimators=55, reg_lambda=0.3))\nmodels_xg.append(XGBClassifier(random_state=7, max_depth=12, tree_method='gpu_hist', n_estimators=50, reg_lambda=0.7))\nmodels_xg.append(XGBClassifier(random_state=8, max_depth=12, tree_method='gpu_hist', n_estimators=50, reg_lambda=0.7))\nmodels_xg.append(XGBClassifier(random_state=9, max_depth=13, tree_method='gpu_hist', n_estimators=35, reg_lambda=0.9))\nmodels_xg.append(XGBClassifier(random_state=10, max_depth=13, tree_method='gpu_hist', n_estimators=35, reg_lambda=0.9))\nmodels_xg.append(XGBClassifier(random_state=11, max_depth=14, tree_method='gpu_hist', n_estimators=35, reg_lambda=0.9))\nmodels_xg.append(XGBClassifier(random_state=12, max_depth=14, tree_method='gpu_hist', n_estimators=35, reg_lambda=0.9))\n","63add711":"for i in range(len(models)):\n    models[i].fit(X_train.drop(columns=['ID', 'ID2','day']), y_train,verbose=100,\\\n          cat_features=cat_features,\\\n#          eval_set=(xeval.drop(columns=['ID', 'ID2','day']),yeval),\n#           plot=True\n         )\n    \n#CHnaging these features to int\nfeatures = ['P5DA', 'RIBP', '8NN1', '7POT', '66FJ', 'GYSR', 'SOP4', 'RVSZ', 'PYUQ', 'LJR9', 'N2MW', 'AHXO', 'BSTQ', 'FM3X', 'K6QO', 'QBOL', 'JWFN', 'JZ9D', 'J9JW', 'GHYX', 'ECY3', 'birth_year']\nX_train[features] = X_train[features].astype(int)\nX_test[features] = X_test[features].astype(int)\n# xeval[features] = xeval[features].astype(int)\n\n\nfor i in tqdm(range(len(models_xg))):\n    models_xg[i].fit(X_train.drop(columns=['ID', 'ID2','day']), y_train,verbose=100\n#                     eval_set=(xeval.drop(columns=['ID', 'ID2','day']),yeval)\n                     )\n\n#3900","344f0442":"predicts = []\nfor i in tqdm(range(len(models))):\n    predicts.append(models[i].predict_proba(X_test.drop(columns=['ID','ID2','day'], axis=1)))\nfor i in tqdm(range(len(models_xg))):\n    predicts.append(models_xg[i].predict_proba(X_test.drop(columns=['ID','ID2','day'], axis=1))) ","63b3c2de":"# df_feature = pd.DataFrame(index=X_test.drop(columns=['ID','ID2','day']).columns)\n# for i in tqdm(range(len(models))):\n#     feature_importance = pd.Series(models[i].feature_importances_,index=X_test.drop(columns=['ID','ID2','day']).columns)\n#     df_feature[i] = feature_importance\n\n# for i in tqdm(range(len(models_xg))):    \n#     feature_importance = pd.Series(models_xg[i].feature_importances_,index=X_test.drop(columns=['ID','ID2','day']).columns)\n#     df_feature[i+6] = feature_importance\n    \n# df_feature\n# # feature_importance = pd.Series(models[0].feature_importances_,index=X_test.drop(columns=['ID','ID2','day']).columns)\n# # feature_importance\n# # for i in range(len(df_feature)):\n# # df_feature.plot(kind='barh',figsize=(100,100))\n","526d32c3":"# df_feature['mean_importance'] = df_feature.mean(axis=1)\n# df_feature.drop([c for c in df_feature.columns if c != 'mean_importance'], axis=1, inplace=True)\n# df_feature = df_feature.sort_values(by=['mean_importance'], ascending=True)","30343a6f":"# pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None) # to print full dataframe","d97bb580":"# df_feature","a89ef088":"# remove_features = df_feature[df_feature['mean_importance']<1.020845e-05].index.values\n# remove_features","08d6ccfe":"y_test = pd.DataFrame(np.mean(predicts, axis=0))\ny_test.columns = le.inverse_transform(y_test.columns)","32ba6f56":"y_test","40be7592":"answer_mass = []\nfor i in range(X_test.shape[0]):\n    id = X_test['ID'].iloc[i]\n    \n    for c in y_test.columns:\n            answer_mass.append([id + ' X ' + c, y_test[c].iloc[i]])\n            \ndf_answer = pd.DataFrame(answer_mass)\ndf_answer.columns = ['ID X PCODE', 'Label']\nfor i in range(df_answer.shape[0]):\n    if df_answer['ID X PCODE'].iloc[i] in true_values:\n        df_answer['Label'].iloc[i] = 1.0","65a9c15f":"df_answer.reset_index(drop=True, inplace=True)\ndf_answer.to_csv('submission1.csv', index=False)","2aa184c6":"# if x = Nan\n\nx == x will give False","6cf83527":"# Updates:\n1. [WORKED]day,month,year columns Nan values replaces by .mode [earlier 0]\n* [Dind't work]adding day,month,year as cat features\n* Version 4: [Worked] Dropping day column and making month, year categorical again\n* Version 5:  [Didn't work] Dropping day, year and making month categorical\n* Version 6: [Didn't work] Dropping day and keeping month, year as numerical values\n* Version 7: [Didn't work] version 4 + making 'birth_year' categorical\n* Version 8: [Didn't work] version 4 + 'date diff' categorical\n* Version 9: [Didn't work] version 4 + mean normalization of '['date_diff']' column and dropping 'birth_year'\n* Version 10: version 4 + mean normalization of '['date_diff']' ","816f8e66":"# feature importance","9d88303a":"# outlier removal","a908a96e":"# [old] outlier removal"}}