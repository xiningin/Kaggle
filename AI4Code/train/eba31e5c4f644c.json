{"cell_type":{"d758964e":"code","3283c9fb":"code","c1a8e32a":"code","c398bef4":"code","585a4f5c":"code","51de7d7a":"code","17c42a17":"code","29c8038a":"code","3eaa2959":"code","ddf133fd":"code","efb7d50f":"code","8fd5011e":"code","a70ff72e":"code","5f64e320":"code","5bf0b8d3":"code","512a438b":"code","808e47d0":"code","31f9dc51":"code","b660d034":"code","25b38f95":"code","b558cfd7":"code","0b3c8068":"code","8f57d045":"code","81c96cc1":"code","9c5f0ca1":"code","22b4b3a4":"code","dde21daa":"code","98cebde3":"code","617da676":"code","2aa8108f":"code","b2c14674":"code","db15530c":"code","38ca3f86":"markdown","7925cd70":"markdown"},"source":{"d758964e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","3283c9fb":"dataset= pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\n","c1a8e32a":"dataset.shape","c398bef4":"dataset.info()","585a4f5c":"dataset.describe()","51de7d7a":"plt.figure(figsize=(20,8))\n#----------------Charges Distribution plot\nplt.subplot(1,2,1)\nplt.title('Insurance Charges Distribution Plot')\nsns.distplot(dataset.charges)\n# Flexibly plot a univariate distribution of observations.\n\nplt.subplot(1,2,2)\nplt.title('Insurance charges Spread')\nsns.boxplot(y=dataset.charges)\n# In descriptive statistics, a box plot or boxplot\n# is a method for graphically depicting groups of numerical data through their quartiles.\nplt.show()","17c42a17":"#---------------Sex plot\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = dataset.sex.value_counts().plot(kind='bar')\nplt.title('Sex Histogram')\nplt1.set(xlabel = 'Sex', ylabel='Frequency')\n\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['sex'])['charges'].mean().sort_values(ascending = False))\ndf.plot.bar(color='orange')\nplt.title('sex vs Average Charges')\nplt.show()\n","29c8038a":"#---------------Region plot\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = dataset.region.value_counts().plot(kind='bar')\nplt.title('Region Histogram')\nplt1.set(xlabel = 'Region', ylabel='Frequency')\n\nplt.show()\n","3eaa2959":"#---------------Bmi vs Charges\ndataset[\"bmi_range\"] = dataset['bmi'].apply(lambda x : \"thin\" if x < 19\n                                                     else (\"fit\" if  19 <= x < 25\n                                                           else (\"overweight\" if  25 <= x < 28\n                                                                else (\"Obese\"))))\ndf = pd.DataFrame(dataset.groupby(['bmi_range'])['charges'].mean().sort_values(ascending = False))\ndf.plot.bar(color='orange')\nplt.title('bmi-range vs Average Charges')\nplt.show()\n","ddf133fd":"#---------------Age plot\n#setting up levels for price.\ndataset[\"age_range\"] = dataset['age'].apply(lambda x : \"low\" if x < 25 \n                                                     else (\"Medium\" if 25 <= x < 40\n                                                           else (\"High\")))\ndataset.head()\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = dataset.age_range.value_counts().plot(kind='bar')\nplt.title('age_range Histogram')\nplt1.set(xlabel = 'age_range', ylabel='Frequency')\n\nplt.show()","efb7d50f":"#---------------No of children\nfig, ax = plt.subplots(figsize = (15,5))\nplt1 = sns.countplot(dataset['children'], order=pd.value_counts(dataset['children']).index,)\nplt1.set(xlabel = 'No of children', ylabel= 'No of children')\nplt.show()\nplt.tight_layout()\n","8fd5011e":"#--------------Smoker or not\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Smoker Histogram')\nsns.countplot(dataset.smoker, palette=(\"RdBu\"))\n\nplt.subplot(1,2,2)\nplt.title('Smoking vs Price')\nsns.boxplot(x=dataset.smoker, y=dataset.charges, palette=(\"RdBu\"))\n\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['smoker'])['charges'].mean().sort_values(ascending = False))\ndf.plot.bar(color='orange')\nplt.title('smoker vs Average Charges')\nplt.show()\n","a70ff72e":"#Significant features are: sex, bmi_range, age_range, number, smoker\n#Dropping nonimportant features\ndataset = dataset.drop([\"region\"], axis = 1)\ndataset = dataset.drop([\"age\"], axis = 1)\ndataset = dataset.drop([\"bmi\"], axis = 1)","5f64e320":"#Converting numbers into string in column 'children'\ndef replace_name(a,b):\n    dataset.children.replace(a,b,inplace=True)\n\nreplace_name(0,'0children')\nreplace_name(1,'1children')\nreplace_name(2,'2children')\nreplace_name(3,'3children')\nreplace_name(5,'5children')\nreplace_name(6,'6children')\n","5bf0b8d3":"attributes = dataset[['age_range','sex','bmi_range','children','smoker','charges']]\nattributes.head()\n\ny=dataset.iloc[:,3].values\n","512a438b":"#Handling Categorical Data\n# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n\nattributes = dummies('age_range',attributes)\nattributes = dummies('sex',attributes)\nattributes = dummies('bmi_range',attributes)\nattributes = dummies('smoker',attributes)\nattributes = dummies('children',attributes)","808e47d0":"#Splitting into training and test set\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(0)\nx_train, x_test, y_train, y_test = train_test_split(attributes,y, train_size = 0.8, test_size = 0.2, random_state = 100)\n","31f9dc51":"#Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nnum_vars=['charges']\nx_train[num_vars] = scaler.fit_transform(x_train[num_vars])\n","b660d034":"#Dividing the training size into X and y \ny_train = x_train.pop('charges')","25b38f95":"import statsmodels.api as sm\nmodel = sm.OLS(y_train, x_train.astype(float)).fit()\nmodel.summary()\n","b558cfd7":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X","0b3c8068":"X_train_new = build_model(x_train.astype(float),y_train)\n","8f57d045":"X_train_new = x_train.drop(['male','0children','1children','2children','3children','5children','thin'], axis = 1)","81c96cc1":"X_train_new = build_model(X_train_new.astype(float),y_train)","9c5f0ca1":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)","22b4b3a4":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18) \n","dde21daa":"num_vars = ['charges']\nx_test[num_vars] = scaler.fit_transform(x_test[num_vars])","98cebde3":"#Dividing the test size into X and y \ny_test = x_test.pop('charges')","617da676":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nx_test_new = x_test[X_train_new.columns]\n","2aa8108f":"# Adding a constant variable \nx_test_new = sm.add_constant(x_test_new)\n\n\ny_pred = lm.predict(x_test_new.astype(float))","b2c14674":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)\n","db15530c":"#EVALUATION OF THE MODEL\n# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)  ","38ca3f86":"**--------------------------------------Data Visualization----------------------------------------------------------**","7925cd70":"**------------------------------------------Model Building------------------------------------------------------\n**"}}