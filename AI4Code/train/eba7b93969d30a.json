{"cell_type":{"acce54d1":"code","515355cf":"code","a76542a9":"code","93e69af7":"code","182c6718":"code","f2760803":"code","ca3b44d5":"code","bc365bdb":"code","955f0ceb":"code","a6e33cec":"code","53125f55":"code","286fbe20":"code","6b563fdd":"code","da865a95":"code","0bed6db3":"code","3c5cbbb8":"code","2a0ea429":"markdown","64f31ba6":"markdown","7ebda60c":"markdown","0845d821":"markdown","e3d07526":"markdown"},"source":{"acce54d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","515355cf":"data_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',index_col='Id')\ndata_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col='Id')\ndata_train","a76542a9":"data_train.describe()","93e69af7":"for i in data_train.columns:    \n    print(i ,': ',data_train[i].isnull().sum())","182c6718":"cols_with_missing_train = [col for col in data_train.columns\n                     if data_train[col].isnull().any()]\ncols_with_missing_test = [col for col in data_test.columns\n                     if data_test[col].isnull().any()]\n#print(cols_with_missing_train)\n#print('----------------------')\n#print(cols_with_missing_test)\n#print(set(cols_with_missing_test) - set(cols_with_missing_train))\nall_missing_columns = cols_with_missing_train + cols_with_missing_test\nprint(len(all_missing_columns))\n#Drop columns in training and validation data\ndata_train.drop(all_missing_columns, axis=1,inplace=True)\ndata_test.drop(all_missing_columns, axis=1,inplace=True)","f2760803":"# Get  columns whose data type is object i.e. string\nfilteredColumns = data_train.dtypes[data_train.dtypes == np.object]\n# list of columns whose data type is object i.e. string\n#print(filteredColumns.index)\nlistOfColumnNames = list(filteredColumns.index)\nprint(listOfColumnNames)\ndata_train.drop(listOfColumnNames, axis=1,inplace=True)\ndata_test.drop(listOfColumnNames, axis=1,inplace=True)","ca3b44d5":"data_train","bc365bdb":"#for i in data_train.columns:    \n #   print(i ,': ',len(data_train[i].unique()))\n#len(data_train.Name.unique)","955f0ceb":"y = data_train.SalePrice\n#############################\nX = data_train.drop(columns=['SalePrice'])","a6e33cec":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)","53125f55":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error ,explained_variance_score, mean_squared_error","286fbe20":"def getBestScore(n_est):\n    my_model = XGBRegressor(n_estimators=n_est,random_state=1,learning_rate=0.05, n_jobs=4)\n    my_model.fit(X_train, y_train)\n    predictions = my_model.predict(X_test)\n    mean_Error = mean_squared_error(y_true=y_test,y_pred = predictions)\n    return mean_Error \n","6b563fdd":"#explained_variance_score\nrange_Estimation = getBestScore(1)\nminEstim = 1\nfor i in range(1,100,1):\n    #print(getBestScore(i),'*-*',i)\n    if range_Estimation > getBestScore(i):\n        minEstim = i\nprint(range_Estimation,'>>>',minEstim)\n##### 196 is the best...'''","da865a95":"final_model = XGBRegressor(n_estimators=minEstim,random_state=1,learning_rate=0.05, n_jobs=4)\nfinal_model.fit(X, y)\npredictions = final_model.predict(X)\n#print(predictions)\n#mean_absolute_error(y_true=y , y_pred = predictions)\n#print(predictions[:5])\n#print(y[:5])","0bed6db3":"data_test","3c5cbbb8":"test_preds = final_model.predict(data_test)\noutput = pd.DataFrame({'Id': data_test.index,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)\nprint('Done')","2a0ea429":"# Drop any column content datatype is String or object","64f31ba6":"# Drop any column have missing value","7ebda60c":"# Show describe()","0845d821":"# Read DataSet & Show data_train","e3d07526":"# View the sum of empty values in each column."}}