{"cell_type":{"a0a1f9bc":"code","1d4cdadd":"code","06690901":"code","81154bc1":"code","531381a2":"code","c670c35a":"code","40b860bd":"code","79aecf51":"code","5f7708c6":"code","25386089":"code","c9bcc9f8":"code","db9c8076":"code","82f0c660":"code","7d2c7bfc":"code","99c76c73":"code","91bd45b1":"code","77009bb3":"code","da4d9d70":"code","dc3189ea":"code","b382834f":"code","6fcd03d4":"code","6029e49b":"code","2eeb8ddb":"markdown","646fab29":"markdown","23703487":"markdown","4352cfe5":"markdown","1aed22a8":"markdown","f08cd763":"markdown","3250798c":"markdown","9ea926a9":"markdown","714c3495":"markdown","019020ac":"markdown","e2f8a1bc":"markdown","8774046a":"markdown","3ff3ddbf":"markdown","315c89c5":"markdown","32705f7b":"markdown","22070789":"markdown","fb30f6ec":"markdown","460a2fed":"markdown","6f2af022":"markdown","ca5a4bd8":"markdown","7a18b6b1":"markdown","54fb052d":"markdown","5200a512":"markdown","54f2c152":"markdown","db894912":"markdown","d7546252":"markdown","abd07039":"markdown","7c85c29d":"markdown"},"source":{"a0a1f9bc":"from IPython.display import Image\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nfrom plotly.offline import (download_plotlyjs, \n                            init_notebook_mode, \n                            plot, \n                            iplot)\nfrom plotly import io as pio\nimport random\nimport seaborn as sns","1d4cdadd":"# plot styling\n\nmpl.rcParams['figure.figsize'] = (19.2, 10.8)\nmpl.rcParams['figure.dpi'] = 100\nmpl.rcParams['font.size'] = 12","06690901":"init_notebook_mode(connected=True)","81154bc1":"# from update_dump import update_dump\n# update_dump()\nrenfe = pd.read_csv('..\/input\/renfe.csv', parse_dates=['insert_date', 'start_date', 'end_date'])","531381a2":"renfe.head()","c670c35a":"renfe.shape","40b860bd":"renfe.info(memory_usage='deep')","79aecf51":"renfe.describe(include='all')","5f7708c6":"renfe.loc[:,'trip_id'] = renfe_index_hash = renfe[['origin', \n                                             'destination', \n                                             'start_date', \n                                             'end_date',\n                                             'train_type']] \\\n                                           .apply(lambda x: hash(tuple(x.tolist())), \n                                                  axis=1)","25386089":"renfe.loc[:, 'start_date_weekday'] = renfe['start_date'].dt.weekday\nrenfe.loc[:, 'start_date_time'] = renfe['start_date'].dt.strftime(\"%H:%M\")","c9bcc9f8":"renfe.loc[:, 'train_id'] = renfe_index_hash = renfe[['origin', \n                                                     'destination', \n                                                     'start_date_weekday',\n                                                     'start_date_time',\n                                                     'train_type']] \\\n                           .apply(lambda x: hash(tuple(x.tolist())), axis=1)","db9c8076":"renfe.loc[:, 'trip_duration'] = renfe['end_date'] - renfe['start_date']\nrenfe.loc[:, 'trip_duration_hours'] = renfe['trip_duration'].dt.components.hours + \\\n                                      renfe['trip_duration'].dt.components.minutes \/ 60","82f0c660":"sns.distplot(renfe['trip_duration_hours']);","7d2c7bfc":"high_speed_max_duration = 4\nrenfe = renfe.loc[renfe['trip_duration_hours'] < high_speed_max_duration, :]","99c76c73":"renfe.loc[:,'time_to_departure'] = renfe['start_date'] - renfe['insert_date']\nrenfe.loc[:,'time_to_departure_days'] = renfe['time_to_departure'].dt.components.days \\\n                                      + renfe['time_to_departure'].dt.components.hours \/ 24 + \\\n                                        renfe['time_to_departure'].dt.components.minutes \/ 60 \/ 24","91bd45b1":"renfe = renfe.loc[renfe['time_to_departure_days'] > 0, :]","77009bb3":"renfe['price_change'] = renfe.groupby('trip_id')['price'].transform(lambda x: x - x.shift(1))\nrenfe['price_change_direction'] = renfe['price_change'].clip(-1, 1)","da4d9d70":"def plot_price_vs_time_to_departure(origin, destination, min_obs=256, n_trips=8, dynamic=True):\n    trips_obs = renfe['trip_id'].value_counts()\n    min_obs_filter = renfe['trip_id'].isin(trips_obs[trips_obs > min_obs].index.tolist())\n    filter_origin_destination = (renfe['origin'] == origin) & (renfe['destination'] == destination)\n\n    traces = []\n\n    for trip_id in random.sample(list(renfe[filter_origin_destination \\\n                                            & min_obs_filter].trip_id.unique()), n_trips):\n\n        trip = renfe[renfe['trip_id'] == trip_id] \\\n        .drop_duplicates(subset='insert_date', keep='first').sort_values('insert_date', ascending=False)\n\n#         filter_departure_filter = trip['time_to_departure_days'] >= 0.0\n\n#         trip = trip.loc[filter_departure_filter, :]\n\n        traces.append(go.Scatter(\n                      x=trip['time_to_departure_days'],\n                      y=trip['price'],\n                      name = f\"{origin}-{destination}-{trip['start_date'].iloc[0].strftime('%A-%H:%M')}\",\n                      text = trip['fare'] + \\\n                             '_' + trip['train_class'] + \\\n                             '_' + trip['train_type'],\n                      hoverinfo = 'text+y+x',\n                      opacity = 0.6))\n\n    layout = dict(\n        title='price vs time to departure (days)',\n        xaxis=dict(title='time to departure (days)', \n                   rangeslider=dict(visible = True)),\n        yaxis=dict(title='price (\u20ac)'),\n        legend=dict(font=dict(size=10)),\n    )\n\n    fig = dict(data=traces, layout=layout)\n    \n    if dynamic:\n        \n        iplot(fig, filename = \"price_vs_time_to_departure\")\n    else:\n        img_bytes = pio.to_image(fig, format='png', width=1200, height=700, scale=1)\n        Image(img_bytes)\n        display(Image(img_bytes))\n        \n    plot(fig, filename = f\"price_vs_time_to_departure_{origin}_{destination}.html\", auto_open=False)","dc3189ea":"plot_price_vs_time_to_departure('BARCELONA', 'MADRID', min_obs=400, n_trips=8)","b382834f":"plot_price_vs_time_to_departure('MADRID', 'SEVILLA')","6fcd03d4":"plot_price_vs_time_to_departure('MADRID', 'VALENCIA')","6029e49b":"plot_price_vs_time_to_departure('MADRID', 'PONFERRADA')","2eeb8ddb":"As seen in the plot, there is a variation in price, going up and down depending on different situations. The general trend is that, the closer the departure time is, the higher the price. Price changes because of two reasons:\n\n* Cheaper tickets are sold out: it means that only more expensive tickets are available (for example fare Promo -> Flexible, or train class Turista -> Preferente).\n* Due to ticket cancellations or increases in train capacity (longer trains) cheaper tickets are released and price drops.\n\nGaps in the series means that all tickets are sold our or problems with our scrapping system (more likely the first option).","646fab29":"Second, let's check trip duration:","23703487":"## config","4352cfe5":"First, let's create a unique index for every trip. A trip id must be defined as a 'primary key' resulting from combination of columns, Python hash stardard library function can be used to perform this task efficiently:\n* `origin`\n* `destination`\n* `start_date`\n* `end_date`\n* `train_type`","1aed22a8":"## price vs time to departure","f08cd763":"Let's plot other destinations:","3250798c":"---","9ea926a9":"Most trips that are 'high' speed should take far less than 4 hours. Otherwise it means that the train is not really high speed or there is a transfer involved. We are not interested in those trip, so, can set a threshold and filter any trip over that value:","714c3495":"## data loading","019020ac":"Let's plot `trip duration` (in hours) distribution:","e2f8a1bc":"A similar behavior is shown here, maybe with more stable\/predictable prices and less price drops.","8774046a":"Up to this point, data looks promising. Copying directly from our project Trello board, our idea is described as:\n\n1. Show tickets from Renfe and 2nd hand stores for user selected day and time period.\n2. Give the user the option to set an alarm and be notified in case ticket (second hand or Renfe) experiment a price drop (only drops, not rises).\n3. In case there is no options available, set up an alarm when the new ticket is released.","3ff3ddbf":"---","315c89c5":"# Renfe trips scrapping exploratory data analysis (I)","32705f7b":"We will also need a variable that represents how much time lasts to train departure from the very moment of data scrapping. This impacts heavily on price as it increases as departure is closer in time (intuition says that is important getting tickets with enough time).","22070789":"Te goal if this analysis in answering the following:\n\n* **Is our project feasible?** There must be strong variations in ticket price between its release to market (about 2 months before departure) and departure date. The goal of the project is to take advantage of those variations to send automatic reminders to users.","fb30f6ec":"Same feeling here, stable\/predictable prices with only a few price drops.","460a2fed":"## python imports","6f2af022":"---","ca5a4bd8":"There are some trains that are scheduled periodically, for example, a trains departure from Seville to Madrid every day at 7h. Let's create and train_id to indentify those periodically scheduled trips. This id can be made combining columns:\n\n* `origin`\n* `destination`\n* `start_date` -> weekday & departure time\n* `train_type`\n","7a18b6b1":"## data wrangling","54fb052d":"## conclusions","5200a512":"Negative values for `time_to_departure` must be filtered as they are probably due to errors in scrapping or Renfe webpage maintenance.","54f2c152":"Let's plot trips with destination Madrid and origin Barcelona:","db894912":"---","d7546252":"Let's create an indicator to identify price changes, this can probably be made in a more efficient fashion:","abd07039":"Let's make a function that plots price vs time to departure given an origin, destination, and a minimum of scrapped points to plot. It is interesting to make it interactive, as it is expected that price changes are due to fare and train class differences, and tooltips with that information will be useful to have.","7c85c29d":"I this case there is no direct High Speed Train to Ponferrada and a transfer is needed in Le\u00f3n."}}