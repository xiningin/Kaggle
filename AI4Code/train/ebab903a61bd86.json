{"cell_type":{"d95296c1":"code","a17cdcb5":"code","dd0e370c":"code","508e81c4":"code","77bbbe9f":"code","16d7bf03":"code","793d8a2d":"code","49b15259":"code","287e6d90":"code","b92a1b1e":"code","89315d28":"code","747e9543":"code","fc2a1b13":"code","d595094a":"code","5a6fed1a":"code","15c70a01":"code","d88a1db5":"code","8aaca37f":"code","3860d3a6":"code","0fdc9e32":"code","f962edeb":"code","242ed4dd":"code","002fdc8f":"code","08636b16":"code","7cacf123":"code","4e8b57f3":"code","472036bf":"code","0cfe63af":"code","2fc28493":"code","01491358":"code","c78caf4c":"code","92a8576b":"code","2288542b":"markdown","713202e1":"markdown","6793f0bc":"markdown","6d7a75e1":"markdown","a4d41a26":"markdown"},"source":{"d95296c1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport math\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, mean_squared_error , mean_absolute_error ,median_absolute_error , f1_score","a17cdcb5":"df = pd.read_csv('..\/input\/room-occupancy\/file.csv')","dd0e370c":"df.shape","508e81c4":"df.head()","77bbbe9f":"df.tail()","16d7bf03":"df.describe()","793d8a2d":"df.info()","49b15259":"df.columns","287e6d90":"df.Occupancy.unique()","b92a1b1e":"df['Occupancy'].value_counts()","89315d28":"sns.countplot(data = df , x = 'Occupancy')","747e9543":"df.isnull()","fc2a1b13":"df.isnull().sum()","d595094a":"sns.boxplot(x='Temperature' , y='Humidity' , data=df)","5a6fed1a":"sns.boxplot(x='Light' , y='CO2' , data=df)","15c70a01":"plt.figure(figsize = (12,9))\nsns.heatmap(df.corr(), vmax = 0.9, square = True , annot=True , cmap= 'viridis')","d88a1db5":"plt.figure(figsize=(10,6),dpi = 150)\nsns.pairplot(df , hue = 'Occupancy')","8aaca37f":"\nX = df.drop('Occupancy', axis = 1)\ny = df['Occupancy']","3860d3a6":"#Standard Scaler for Data\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX = scaler.fit_transform(X)\n\n#showing data\nprint('X \\n' , X[:10])","0fdc9e32":"#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=44, shuffle =True)\n\n\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","f962edeb":"#Applying SVC Model \nSVCModel = SVC(kernel= 'rbf', max_iter=1000000,C=1,gamma=0.001)\nSVCModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('SVCModel Train Score is : ' , SVCModel.score(X_train, y_train))\nprint('SVCModel Test Score is : ' , SVCModel.score(X_test, y_test))\n","242ed4dd":"#Calculating Prediction\ny_pred = SVCModel.predict(X_test)\nprint('Predicted Value for SVCModel is : ' , y_pred[:10])","002fdc8f":"#Calculating Confusion Matrix\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\n# drawing confusion matrix\nsns.heatmap(CM, center = True )\nplt.show()","08636b16":"#Calculating classification Report :  \nClassificationReport = classification_report(y_test,y_pred)\nprint('Classification Report is : ', ClassificationReport )","7cacf123":"#Calculating Accuracy Score  : ((TP + TN) \/ float(TP + TN + FP + FN))\nAccScore = accuracy_score(y_test, y_pred)\nprint('Accuracy Score is : ', AccScore)","4e8b57f3":"#Calculating Mean Absolute Error\nMAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Absolute Error Value is : ', MAEValue)\n\n#----------------------------------------------------\n#Calculating Mean Squared Error\nMSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Squared Error Value is : ', MSEValue)\n\n#----------------------------------------------------\n#Calculating Median Absolute Error\nMdSEValue = median_absolute_error(y_test, y_pred)\nprint('Median Absolute Error Value is : ', MdSEValue )","472036bf":"#Applying KNeighborsClassifier Model \n\nKNNClassifierModel = KNeighborsClassifier(n_neighbors= 5,weights ='uniform',  algorithm='auto')\n\nKNNClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('KNNClassifierModel Train Score is : ' , KNNClassifierModel.score(X_train, y_train))\nprint('KNNClassifierModel Test Score is : ' , KNNClassifierModel.score(X_test, y_test))\n#print('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = KNNClassifierModel.predict(X_test)\ny_pred_prob = KNNClassifierModel.predict_proba(X_test)\nprint('Predicted Value for KNNClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for KNNClassifierModel is : ' , y_pred_prob[:10])","0cfe63af":"# I want to know the best K value that achieves Lowest error rate \n\nerror_rate = []\n\nfor k in range(1,20):\n    KNNClassifier = KNeighborsClassifier(n_neighbors = k )\n    KNNClassifier.fit(X_train , y_train)\n    y_pred = KNNClassifier.predict(X_test)\n    error = 1 - accuracy_score(y_test , y_pred)\n    \n    error_rate.append(error)","2fc28493":"\nplt.figure(figsize=(10,5),dpi = 100)\nplt.plot(range(1,20) , error_rate)\nplt.ylabel('error_rate')\nplt.xlabel('K value')","01491358":"#  k=1 is the lowest error_rate\nKNNClassifierModel2 = KNeighborsClassifier(n_neighbors= 1,weights ='uniform',  algorithm='auto')\n\nKNNClassifierModel2.fit(X_train, y_train)\n\n#Calculating Details\nprint('KNNClassifierModel2 Train Score is : ' , KNNClassifierModel2.score(X_train, y_train))\nprint('KNNClassifierModel2 Test Score is : ' , KNNClassifierModel2.score(X_test, y_test))\n#print('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = KNNClassifierModel2.predict(X_test)\ny_pred_prob = KNNClassifierModel2.predict_proba(X_test)\nprint('Predicted Value for KNNClassifierModel2 is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for KNNClassifierModel2 is : ' , y_pred_prob[:10])","c78caf4c":"#Calculating Confusion Matrix for KNN model\nCM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\n\n# drawing confusion matrix\nsns.heatmap(CM, center = True )\nplt.show()","92a8576b":"#Calculating classification Report :  \nClassificationReport = classification_report(y_test,y_pred)\nprint('Classification Report is : ', ClassificationReport )","2288542b":"Data Extraction","713202e1":"there positive corr","6793f0bc":"divid the data to X and y : ","6d7a75e1":"no null value","a4d41a26":"import library"}}