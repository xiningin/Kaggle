{"cell_type":{"7290c4ce":"code","3ee26e5a":"code","1ecfa1a7":"code","83842237":"code","059dfbf9":"code","b981256b":"code","6e365145":"code","6b30f012":"code","fe30fad2":"code","24b5e760":"code","3192e1b1":"code","11e04b8b":"code","5fdf24d7":"code","d13b41c1":"code","d3dad082":"code","9f4781be":"code","3c3c9534":"code","6f4d5961":"code","17f76dcf":"code","0f9f18b6":"code","1a5af76e":"code","97bbc205":"code","5cf1ed20":"code","b1dc3da7":"code","1a742988":"code","b2a8893d":"code","115af7fe":"code","47b78287":"code","d27b9aa4":"code","926a643d":"code","30ae0aa9":"code","8869436f":"code","47e6ece5":"code","b615bfeb":"code","68e96d92":"code","922904b7":"code","0c8c77bf":"code","a128b3cd":"code","0643c4fb":"code","3c2bd0ad":"code","6a949232":"markdown","95d0143d":"markdown","80d7ae93":"markdown","6d2a409b":"markdown","e1e6a1e5":"markdown","4b2852fa":"markdown","e4d8ca34":"markdown","25b5765a":"markdown","f58d92c2":"markdown","74421754":"markdown","f3e8d754":"markdown","9e025b84":"markdown","b2d74101":"markdown","af58bfbc":"markdown","b634d61b":"markdown","3da8cad0":"markdown","a6d71bd1":"markdown","92d7533a":"markdown","57992c7e":"markdown","a8225af1":"markdown","f0772d12":"markdown","f1801d13":"markdown","fc15bde7":"markdown","8eb5d8ca":"markdown","3e1df6c3":"markdown","76b011f7":"markdown","cca29382":"markdown","bfdbb9ce":"markdown","1316e9ee":"markdown"},"source":{"7290c4ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3ee26e5a":"#Unzipping and reading from data files\n\nimport zipfile\n\nzf = zipfile.ZipFile('..\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip') \ntrain_users = pd.read_csv(zf.open('train_users_2.csv'))\nzf = zipfile.ZipFile('\/kaggle\/input\/airbnb-recruiting-new-user-bookings\/test_users.csv.zip') \ntest_users = pd.read_csv(zf.open('test_users.csv'))\ntest_users.head()\n","1ecfa1a7":"print(\"We have\", train_users.shape[0], \"users in the training set and\", \n      test_users.shape[0], \"in the test set.\")\nprint(\"In total we have\", train_users.shape[0] + test_users.shape[0], \"users.\")\n","83842237":"# Merge train and test users\nusers = pd.concat((train_users, test_users), axis=0, ignore_index=True, sort=True)\n\n\nusers.head()","059dfbf9":"users.describe()","b981256b":"\ntrain_users.loc[train_users['age'] == 2014]\n","6e365145":"web_2014 = users.loc[users['age'] == 2014, 'signup_app'].value_counts() \nprint (web_2014)","6b30f012":"print(users.signup_app.value_counts())","fe30fad2":"np.unique(users[users.age > 122]['age'])","24b5e760":"print(sum(users.age > 122))\nprint(sum(users.age < 18))","3192e1b1":"users.loc[users.age > 95, 'age'].count()","11e04b8b":"users.loc[users.age < 13, 'age'].count()","5fdf24d7":"users.loc[users.age > 95, 'age'] = np.nan\nusers.loc[users.age < 13, 'age'] = np.nan","d13b41c1":"users.age.value_counts()","d3dad082":"users.corr()","9f4781be":"import seaborn as sns\nsns.pairplot(train_users)","3c3c9534":"users[\"gender\"]=users[\"gender\"].fillna(\"-unknown-\" )\nusers.head()","6f4d5961":"#How much data is missing from the dataset (apart from destination country)\nusers_nan = (users.isnull().sum() \/ users.shape[0]) * 100\nusers_nan[users_nan > 0].drop('country_destination')","17f76dcf":"train_users.date_first_booking.isnull().sum() \/ train_users.shape[0] * 100","0f9f18b6":"train_users.country_destination.isnull().sum() \/ train_users.shape[0] * 100","1a5af76e":"users.gender.value_counts(dropna=False)","97bbc205":"users.gender.describe()","5cf1ed20":"users.age.describe()","b1dc3da7":"#For now, let's fill the missing values of age with the median since the mean is highly affectd by extreme values\nusers[\"age\"]=users[\"age\"].fillna( users[\"age\"].median())\n\nusers.head()\n","1a742988":"categorical_features = [\n    'affiliate_channel',\n    'affiliate_provider',\n    'country_destination',\n    'first_affiliate_tracked',\n    'first_browser',\n    'first_device_type',\n    'gender',\n    'language',\n    'signup_app',\n    'signup_method'\n]\n\nfor categorical_feature in categorical_features:\n    print (categorical_feature,users[categorical_feature].unique())\n\n","b2a8893d":"users['date_account_created'] = pd.to_datetime(users['date_account_created'])\nusers['date_first_booking'] = pd.to_datetime(users['date_first_booking'])\nusers['date_first_active'] = pd.to_datetime((users.timestamp_first_active \/\/ 1000000), format='%Y%m%d')","115af7fe":"users.head()","47b78287":"users.gender.value_counts(dropna=False).plot(kind='bar', color='#FD5C64', rot=0)\nplt.xlabel('Gender')\nsns.despine()","d27b9aa4":"women = sum(users['gender'] == 'FEMALE')\nmen = sum(users['gender'] == 'MALE')\n\nfemale_destinations = users.loc[users['gender'] == 'FEMALE', 'country_destination'].value_counts() \/ women * 100\nmale_destinations = users.loc[users['gender'] == 'MALE', 'country_destination'].value_counts() \/ men * 100\n\n# Bar width\nwidth = 0.4\n\nmale_destinations.plot(kind='bar', width=width, color='#4DD3C9', position=0, label='Male', rot=0)\nfemale_destinations.plot(kind='bar', width=width, color='#FFA35D', position=1, label='Female', rot=0)\n\nplt.legend()\nplt.xlabel('Destination Country')\nplt.ylabel('Percentage')\n\nsns.despine()\nplt.show()","926a643d":"destination_percentage = users.country_destination.value_counts() \/ users.shape[0] * 100\ndestination_percentage.plot(kind='bar',color='#FD5C64', rot=0)\n# Using seaborn can also be plotted\n# sns.countplot(x=\"country_destination\", data=users, order=list(users.country_destination.value_counts().keys()))\nplt.xlabel('Destination Country')\nplt.ylabel('Percentage')\nsns.despine()","30ae0aa9":"age = 45\n\nyounger = sum(users.loc[users['age'] < age, 'country_destination'].value_counts())\nolder = sum(users.loc[users['age'] > age, 'country_destination'].value_counts())\n\nyounger_destinations = users.loc[users['age'] < age, 'country_destination'].value_counts() \/ younger * 100\nolder_destinations = users.loc[users['age'] > age, 'country_destination'].value_counts() \/ older * 100\n\nyounger_destinations.plot(kind='bar', width=width, color='#63EA55', position=0, label='Youngers', rot=0)\nolder_destinations.plot(kind='bar', width=width, color='#4DD3C9', position=1, label='Olders', rot=0)\n\nplt.legend()\nplt.xlabel('Destination Country')\nplt.ylabel('Percentage')\n\nsns.despine()\nplt.show()","8869436f":"print((sum(users.language == 'en') \/ users.shape[0])*100)\n\nEn = sum(users.loc[users['language']==\"en\", 'country_destination'].value_counts());\nNo_En=sum(users.loc[users['language']!=\"en\", 'country_destination'].value_counts());\nEn_destinations = users.loc[users['language']==\"en\" , 'country_destination'].value_counts() \/ En * 100\nNo_En_destinations = users.loc[users['language'] !=\"en\", 'country_destination'].value_counts() \/ No_En * 100\n\nyounger_destinations.plot(kind='bar', width=width, color='#63EA55', position=0, label='English', rot=0)\nolder_destinations.plot(kind='bar', width=width, color='#4DD3C9', position=1, label='Non English', rot=0)\n\nplt.legend()\nplt.xlabel('Destination Country')\nplt.ylabel('Percentage')\n\nsns.despine()\nplt.show()","47e6ece5":"import math\nusers[\"age\"].isna().any()","b615bfeb":"users[\"gender\"].isnull().values.any()\n","68e96d92":"users[\"age\"].isnull().values.any()\n","922904b7":"train_users = users.iloc[:213451 , :]\ntrain_users","0c8c77bf":"test_users = users.iloc[213451: , :]\ntest_users.drop(['country_destination'], axis=1)","a128b3cd":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import validation_curve\n\n#Convert categorical variable into dummy\/indicator variables.\n\ny = train_users[\"country_destination\"]\nfeatures = [\"gender\",\"age\"]\nX = pd.get_dummies(train_users[features])\nX_test = pd.get_dummies(test_users[features])\nX.head()","0643c4fb":"from sklearn.model_selection import cross_val_score\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=1)\nmodel_random_cv=cross_val_score(model, X, y, cv=5) \nprint (model_random_cv.mean())","3c2bd0ad":"\nmodel.fit(X, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'id': test_users.id, 'country': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","6a949232":"# Feature Encoding","95d0143d":"#One hot encoder only takes numerical categorical values, hence any value of string type should be label encoded before one hot encoded.\n\nfrom sklearn.preprocessing import LabelEncoder \n  \nle = LabelEncoder() \n  \nusers['gender']= le.fit_transform(users['gender']) \nusers.head()\n\n#creating one hot encoder object with categorical feature 0 \n#indicating the 9th column which is gender\nfrom sklearn.preprocessing import OneHotEncoder \nonehotencoder = OneHotEncoder(categorical_features = [9]) \ndata = onehotencoder.fit_transform(users).toarray() ","80d7ae93":"We can see that the young people tends to stay in the US, and the older people choose to travel outside the country. Of vourse, there are no big differences between them and we must remember that we do not have the 42% of the ages.\n\nNow, Let's see the language of users.","6d2a409b":"1) Handeling missing data","e1e6a1e5":"# Data Exploration\nIn the next few cells I am going to explore the data, both train_users and test_useres, to get some insights from it and discover the outliers and possible errors.","4b2852fa":"We see a very low correlation which makes sense as there is no dependency between these three features.","e4d8ca34":"English people seem to be more determined to book unlike non-english whom percentage is quite large in NDF!","25b5765a":"Looking at the country_destination we can be sure that there are different values associated with this age, which makes dropping these 710 records out of over 213000 records a quite suitable solution that probably wouldn't ommit valuable information.\nHowever, noticing that the only field that seems to be consistent with records of age=2014 is that signup_app=web, I'll investigate more.\n","f58d92c2":"We have quite a lot of *NaN* in the `age` and `gender` wich will yield in lesser performance of the classifiers we will build. The feature `date_first_booking` has a 67.7% of NaN values probably because this feature is not present at the tests users, and therefore, we won't need it at the *modeling* part. Let's see the NaN values of `date_first_booking` in train_data:","74421754":"# Random Forest Model","f3e8d754":"2) Data Types\n\nLet's treat each feature as what they are. This means we need to transform into categorical those features that we treat as categories and the same with the dates:\n\n\n\n\n\n\n","9e025b84":"This is a relatively low accuracy but I will accept it for now, again due to time limitation.\n4) Fit the model to the train-set and then predicting y for the test-set ","b2d74101":"As we can see, There are no big differences between the 2 main genders.\n\nLet's see now the relative destination frecuency of the countries.","af58bfbc":"As you can see, the web value has nothing to do with the age=2014, it just happens to be the most common value of signup_app.\nLet's see now other inconsistent values of age, considering that the longest confirmed human lifespan record=122.\n","b634d61b":"The first thing we can see that if there is a reservation, it's likely to be inside the US. But there is around 45% of people that never did a reservation.\n\nLet's now see the age relations with the destination.","3da8cad0":"3) Build the model and calculate the cross validation accuracy\n\nDue to time limitation, I only considered two features to use in the training. This is of course not an efficient way to train the model.","a6d71bd1":"The third feature with a high rate of NaN was age. Let's see:\n\n","92d7533a":"The maximum value of age is 2014 which means there is some errors in the age column, so let's see the number and the nature of the records where this value exists to determine whether or not dropping these records would significantly affect the dataset.\nWe can also notice that the count of values in age column is much less than number of records which means there is a lot of missing data in this field (will be investigated later).","57992c7e":"First, let's see how the gender porpotion is visualized","a8225af1":"Since we will not need this feature in the modeling we don't need to handle its missing data.\nThe other feature with a high rate of *NaN* was `gender`. Let's see:","f0772d12":"# Data Visualization","f1801d13":"1) Check that there is no null values:\n","fc15bde7":" For now, we can set an acceptance range and replace those out of it with NaN.","8eb5d8ca":"Let's see linear correlation between the input features","3e1df6c3":"Let's see now if there is any gender preferences when travelling.","76b011f7":"Now let's see non-linear correlation","cca29382":"2) Split the data again to train set and test set","bfdbb9ce":"# Data Cleaning","1316e9ee":"As we can see there are some features with large number of categories, whereas there are others with relatively small number of categories.Hence, in the data encoding step we will use one hot encoding with features of small number of categories."}}