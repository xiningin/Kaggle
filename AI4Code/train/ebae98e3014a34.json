{"cell_type":{"b5a8c6da":"code","3812a5b8":"code","7e698b8b":"code","3b9a68a0":"code","f7e5e036":"code","c72fb7d7":"code","d9f799ef":"code","78491c61":"code","78f4be19":"code","dc59db80":"code","786dc76c":"code","d7edb7af":"code","097e0d9a":"code","e61b3777":"code","67008bb4":"code","96c44c36":"code","a47963ed":"code","a9d9c2aa":"code","19145248":"code","a97ae723":"code","90d61947":"code","92448325":"code","df9781b9":"code","8fc92273":"code","2bdbe833":"code","dd10a5f5":"code","faafa872":"code","0b05c385":"code","5473e8af":"code","b670a858":"code","11abb113":"code","e3f78d5c":"code","4ebbc67a":"code","53f2911e":"code","5d408093":"code","2b746d54":"code","052a959f":"code","53680064":"code","615d8f1c":"code","6671caf7":"code","3121823a":"code","67e438b4":"code","f6ba33df":"code","cf519e63":"code","530ff8d6":"code","e7583014":"code","96d9a66b":"code","f1e18682":"code","dccefe50":"code","c9967c0e":"code","5c0ab77e":"code","30527d4f":"code","ace1e99c":"code","9d1385f0":"code","85f94f69":"code","11b850f6":"code","4c620bd9":"code","d3767185":"code","b3596795":"code","309940e7":"code","7e8db223":"code","378f2c50":"code","4ca6e248":"code","28385d62":"code","5fcb95ac":"code","96979d3e":"code","50d65c2d":"code","7c2f120d":"code","82066d4e":"code","a7e7ba7c":"code","f440058b":"code","9c40ba6a":"code","ea5a63b5":"code","d48ab5ca":"code","31a5297c":"code","2c54bf0e":"code","b6c3c98c":"code","1b2b5e07":"code","9940c53a":"code","4a3382b8":"code","0c1c87b1":"code","4e80c595":"code","0eb5b92b":"code","a00e621a":"code","8a5c1ce7":"code","8c54d818":"code","40660963":"markdown","ebb94d33":"markdown","447c17cc":"markdown","505637d8":"markdown","25ce83b6":"markdown","761829d4":"markdown","1a9f8c69":"markdown","7152a277":"markdown","11f19cee":"markdown","439eca44":"markdown","f358e013":"markdown","b099adad":"markdown","49b70dc1":"markdown","e8bde588":"markdown","dede131f":"markdown","2a116997":"markdown","6e624f10":"markdown","3a72be73":"markdown","3b115ef7":"markdown","bc872e14":"markdown","16b325a1":"markdown","0dd494e1":"markdown","5b69fb99":"markdown","c7c62a5d":"markdown","13695acc":"markdown","ee8ea288":"markdown","9e91dbeb":"markdown","f3999041":"markdown","3846a036":"markdown","2c91a650":"markdown","5fa0de7c":"markdown","42974b45":"markdown","fb955b19":"markdown","28625fc2":"markdown","7e7210d2":"markdown","6e5a79d5":"markdown","012a5b0e":"markdown","8d18ab09":"markdown","ed1c5aa6":"markdown","6a84a393":"markdown","22ea1ecb":"markdown","6c298489":"markdown","b66d0505":"markdown","f3146ab4":"markdown","947c1ac2":"markdown","20a058cd":"markdown","06eddf13":"markdown"},"source":{"b5a8c6da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns \nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3812a5b8":"# Load and Check Data","7e698b8b":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","3b9a68a0":"train_df.columns\n","f7e5e036":"train_df.describe()","c72fb7d7":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex:\"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of C variable\n    varValue=var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","d9f799ef":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","78491c61":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","78f4be19":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} disributiion with hist\".format(variable))\n    plt.show()","dc59db80":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","786dc76c":"# Pclass vs Survived \ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean()","d7edb7af":"# Pclass vs Survived \ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","097e0d9a":"# Sex vs Survived \ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","e61b3777":"# SibSp vs Survived \ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","67008bb4":"# Parch vs Survived \ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","96c44c36":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier step\n        outlier_step=IQR *1.5\n        #detect outlier and their indeces\n        outlier_list_col=df[(df[c]<Q1 - outlier_step) | (df[c]>Q3 + outlier_step)].index\n        #store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v >2)\n    \n    return multiple_outliers","a47963ed":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","a9d9c2aa":"#drop outliers \ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","19145248":"train_df_len= len(train_df)\ntrain_df= pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","a97ae723":"train_df.head()","90d61947":"train_df.columns[train_df.isnull().any()]","92448325":"train_df.isnull().sum()","df9781b9":"train_df[train_df[\"Embarked\"].isnull()]","8fc92273":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","2bdbe833":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","dd10a5f5":"train_df[train_df[\"Fare\"].isnull()]","faafa872":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","0b05c385":"train_df[train_df[\"Fare\"].isnull()]","5473e8af":"list1= [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","b670a858":"g = sns.factorplot(x=\"SibSp\", y=\"Survived\", data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probality\")\nplt.show()","11abb113":"g = sns.factorplot(x=\"Parch\", y=\"Survived\", data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probality\")\nplt.show()","e3f78d5c":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", data=train_df,kind=\"bar\",size=5)\ng.set_ylabels(\"Survived Probality\")\nplt.show()","4ebbc67a":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","53f2911e":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","5d408093":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 4)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","2b746d54":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","052a959f":"train_df[train_df[\"Age\"].isnull()]","53680064":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","615d8f1c":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","6671caf7":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","3121823a":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","67e438b4":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","f6ba33df":"train_df[train_df[\"Age\"].isnull()]","cf519e63":"train_df[\"Name\"].head(10)","530ff8d6":"name=train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","e7583014":"train_df[\"Title\"].head(10)","96d9a66b":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation=60)\nplt.show()","f1e18682":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","dccefe50":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","c9967c0e":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","5c0ab77e":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","30527d4f":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","ace1e99c":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","9d1385f0":"train_df.head()","85f94f69":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","11b850f6":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","4c620bd9":"train_df.head(10)","d3767185":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","b3596795":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","309940e7":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","7e8db223":"train_df[\"Embarked\"].head()","378f2c50":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","4ca6e248":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","28385d62":"train_df[\"Ticket\"].head(20)","5fcb95ac":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","96979d3e":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","50d65c2d":"train_df[\"Ticket\"].head(20)","7c2f120d":"train_df.head()","82066d4e":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","a7e7ba7c":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","f440058b":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","9c40ba6a":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","ea5a63b5":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","d48ab5ca":"train_df.head()","31a5297c":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","2c54bf0e":"train_df_len","b6c3c98c":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n","1b2b5e07":"test.head()","9940c53a":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","4a3382b8":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","0c1c87b1":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","4e80c595":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","0eb5b92b":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","a00e621a":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","8a5c1ce7":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","8c54d818":"test_survived","40660963":"### Train - Test Split","ebb94d33":"# Introduction\n*The sinking of Titanik is one of the most notorious shipwrecks in the history. In 1912 , during her voyage.The titanik sank after colliding with an iceberg,killing 1502 out of 2224 passengers and crew.*\n\n**Content**:\n\n1.[Load and Check Data](#1)\n2.[Variable Description](#2)","447c17cc":"# Pclass -- Survived -- Age","505637d8":"## Fill Missing: Age Feature","25ce83b6":"# Feature Engineering","761829d4":"### pclass is important feature for model training.","1a9f8c69":"### age <= 10 has a high survival rate,\n### oldest passengers (80) survived,\n### large number of 20 years old did not survive,\n### most passengers are in 15-35 age range,\n### use age feature in training\n### use age distribution for missing value of age","7152a277":"### Having a lot of SibSp have less chance to survive.\n### if sibsp ==0 or 1 or 2 passanger has more chance to survive.\n### We can consider a new feature describing these categories.","11f19cee":"# Categorical Variable","439eca44":"## Sex","f358e013":"### Name -- Title","b099adad":"# Numerical Variable ","49b70dc1":"# Embarked -- Sex -- Fare -- Survived","e8bde588":"### Small familes have more chance to survive than large families.","dede131f":"### 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","2a116997":"## Embarked","6e624f10":"### train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","3a72be73":"## Ticket","3b115ef7":"### Sex is not informative for age prediction, age distribution seems to be same.","bc872e14":"## Find Missing\n","16b325a1":"## Drop Passenger ID and Cabin","0dd494e1":"# Outlier Detection ","5b69fb99":"# Age -- Survived ","c7c62a5d":"# Embarked -- Sex -- Pclass -- Survived","13695acc":"# Parch -- Survived ","ee8ea288":"# Univariate Variable Analysis\n\n   * Categorical Variable: Survived , Sex, Pclass, Embarked, Name, Cabin, Name, Ticket, Sibsp And Parch\n   * Numerical Variable: Age, Fare, PassengerId","9e91dbeb":"### Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","f3999041":"### Ensemble Modeling","3846a036":"### Sibsp and parch can be used for new feature extraction with th = 3\n### small familes have more chance to survive.\n### there is a std in survival of passenger with parch = 3","2c91a650":"### Simple Logistic Regression","5fa0de7c":"# Variable Description\n1.PassengerId\n2.Survived\n3.Pclass\n4.Name\n5.Sex\n6.Age \n7.SibSp\n8.Parch \n9.Ticket \n10.Fare \n11.Cabin\n12.Embarked","42974b45":"# Hyperparameter Tuning -- Grid Search -- Cross Validation","fb955b19":"## Fill Missing","28625fc2":"* Desicion Tree\n* SVM \n* Random Forest \n* KNN\n* Logistic Regression","7e7210d2":"# Basic Data Analysis","6e5a79d5":"### Female passengers have much better survival rate than males.\n### males have better surv\u015fval rate in pclass 3 in C.\n### embarked and sex will be used in training.","012a5b0e":"### Fare feature seems to have correlation with survived feature","8d18ab09":"## Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","ed1c5aa6":"# Modeling","6a84a393":"# Visualization","22ea1ecb":"## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","6c298489":"# SibSp -- Survived","b66d0505":"### We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.","f3146ab4":"# Missing Value","947c1ac2":"### Family Size","20a058cd":"### Prediction and Submission","06eddf13":"## Pclass"}}