{"cell_type":{"cb5f023f":"code","d9432567":"code","44b25f95":"code","aa5be5d0":"code","90143a5a":"code","0763dc88":"code","2ed61197":"code","7bc463c6":"code","ae38b292":"code","24d6ea0f":"code","ba087531":"code","0caa72cb":"code","f96352ae":"code","0a6b1040":"code","db1441d2":"code","df1b2c10":"code","5f927d47":"code","f2101f2e":"code","b2e27b48":"code","3756286c":"code","6e4b3dbd":"code","a4449eb6":"markdown","bdd8149c":"markdown"},"source":{"cb5f023f":"import os\nimport pandas as pd\nfrom kaggle.competitions import nflrush\nimport numpy as np\n\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport seaborn\nimport random\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport tqdm, gc\nfrom scipy.stats import norm","d9432567":"env = nflrush.make_env()","44b25f95":"train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","aa5be5d0":"pd.set_option('display.max_columns', None)  \ntrain_df.head()","90143a5a":"# distribution of target label\nseaborn.distplot(train_df['Yards'])\nplt.show()","0763dc88":"not_used = [\"GameId\",\"PlayId\",\"Yards\"]\nunique_columns = []\nfor c in train_df.columns:\n    if c not in not_used and len(set(train_df[c][:11]))!= 1:\n        unique_columns.append(c)","2ed61197":"def fe(df):\n    df['X1'] = 120 - df['X']\n    df['Y1'] = 53.3 - df['Y']\n    df['DefendersInTheBox_vs_Distance'] = df['DefendersInTheBox'] \/ df['Distance']\n    \n    def give_me_WindSpeed(x):\n        x = str(x)\n        x = x.replace('mph', '').strip()\n        if '-' in x:\n            x = (int(x.split('-')[0]) + int(x.split('-')[1])) \/ 2\n        try:\n            return float(x)\n        except:\n            return -99\n    \n    df['WindSpeed'] = df['WindSpeed'].apply(lambda p: give_me_WindSpeed(p))\n    \n    def give_me_GameWeather(x):\n        x = str(x).lower()\n        if 'indoor' in x:\n            return  'indoor'\n        elif 'cloud' in x or 'coudy' in x or 'clouidy' in x:\n            return 'cloudy'\n        elif 'rain' in x or 'shower' in x:\n            return 'rain'\n        elif 'sunny' in x:\n            return 'sunny'\n        elif 'clear' in x:\n            return 'clear'\n        elif 'cold' in x or 'cool' in x:\n            return 'cool'\n        elif 'snow' in x:\n            return 'snow'\n        return x\n    \n    df['GameWeather'] = df['GameWeather'].apply(lambda p: give_me_GameWeather(p))\n    \n    # from https:\/\/www.kaggle.com\/ryches\/model-free-benchmark\n    df['Field_eq_Possession'] = df['FieldPosition'] == df['PossessionTeam']\n    \n    df['is_rusher'] = df['NflId'] == df['NflIdRusher']\n    \n    for c in df.columns:\n        if c in not_used: continue\n        elif c == 'TimeHandoff':\n            df['TimeHandoff_min'] = pd.Series([int(x[-7:-5]) for x in df[c]])\n            df['TimeHandoff_sec'] = pd.Series([int(x[-4:-2]) for x in df[c]])\n            # '2017-09-08T00:44:05.000Z'to '00:44:05.000Z' as time matters more than date\n            df[c] = pd.Series([x[11:] for x in df[c]])\n        elif c == 'TimeSnap':\n            df['TimeSnap_min'] = pd.Series([int(x[-7:-5]) for x in df[c]])\n            df['TimeSnap_sec'] = pd.Series([int(x[-4:-2]) for x in df[c]])\n            # '2017-09-08T00:44:05.000Z'to '00:44:05.000Z' as time matters more than date\n            df[c] = pd.Series([x[11:] for x in df[c]])\n        elif c == 'PlayerHeight':\n            df['height_1'] = pd.Series([int(x[0]) for x in df[c]])\n            df['height_2'] = pd.Series([int(x[2]) for x in df[c]])\n            df['height_3'] = df['height_1'] * 12 + df['height_2']\n            df['BMI'] = (df['PlayerWeight'] * 703) \/ ((df['height_1'] * 12 + df['height_2']) ** 2)\n        elif c == \"DefensePersonnel\":\n            arr = [[int(s[0]) for s in t.split(\", \")] for t in df[\"DefensePersonnel\"]]\n            df[\"DL\"] = pd.Series([a[0] for a in arr])\n            df[\"LB\"] = pd.Series([a[1] for a in arr])\n            df[\"DB\"] = pd.Series([a[2] for a in arr])\n        elif c == \"OffensePersonnel\":\n            arr = [[int(s[0]) for s in t.split(\", \")] for t in df[\"OffensePersonnel\"]]\n            df[\"RB\"] = pd.Series([a[0] for a in arr])\n            df[\"TE\"] = pd.Series([a[1] for a in arr])\n            df[\"WR\"] = pd.Series([a[2] for a in arr])\n        elif c == \"GameClock\":\n            arr = [[int(s[0]) for s in t.split(\":\")] for t in df[\"GameClock\"]]\n            df[\"GameHour\"] = pd.Series([a[0] for a in arr])\n            df[\"GameMinute\"] = pd.Series([a[1] for a in arr])\n        elif c == \"PlayerBirthDate\":\n            df['Season'] = pd.Series([int(x) for x in df['Season']])\n            df[\"BirthY\"] = pd.Series([int(t.split('\/')[2]) for t in df[\"PlayerBirthDate\"]])\n            df['age'] = df['Season'] - df['BirthY']\n            df['Season'] = pd.Series([str(x) for x in df['Season']])\n            \n    df['handoff_snap_diff_min'] = df['TimeHandoff_min'] - df['TimeSnap_min']\n    df['handoff_snap_diff_sec'] = df['handoff_snap_diff_min'] * 60 + df['TimeHandoff_sec'] - df['TimeSnap_sec']\n    return df","7bc463c6":"train_df = fe(train_df)","ae38b292":"lbl_dict = {}\nfor c in train_df.columns:\n    if train_df[c].dtype=='object' and c not in not_used: \n        lbl = preprocessing.LabelEncoder()\n        train_df[c] = lbl.fit_transform(list(train_df[c].values))\n        lbl_dict[c] = lbl","24d6ea0f":"train_df.head(10)","ba087531":"train_df.shape","0caa72cb":"all_columns = []\nfor c in train_df.columns:\n    if c in not_used: continue\n    all_columns.append(c)\n\nfor c in unique_columns:\n    for i in range(22):\n        all_columns.append(c+str(i))","f96352ae":"len(all_columns)","0a6b1040":"# from https:\/\/www.kaggle.com\/hukuda222\/nfl-simple-model-using-lightgbm\n\ntrain_data=np.zeros((509762\/\/22,len(all_columns)))\nfor i in tqdm.tqdm(range(0,509762,22)):\n    count=0\n    for c in train_df.columns:\n        if c in not_used: continue\n        train_data[i\/\/22][count] = train_df[c][i]\n        count+=1\n    for c in unique_columns:\n        for j in range(22):\n            train_data[i\/\/22][count] = train_df[c][i+j]\n            count+=1        ","db1441d2":"y_train_ = np.array([train_df[\"Yards\"][i] for i in range(0,509762,22)])\nX_train = pd.DataFrame(data=train_data,columns=all_columns)","df1b2c10":"X_train.shape, y_train_.shape","5f927d47":"data = [0 for i in range(199)]\nfor y in y_train_:\n    data[int(y+99)]+=1\nplt.plot([i-99 for i in range(199)],data)","f2101f2e":"# from https:\/\/www.kaggle.com\/hukuda222\/nfl-simple-model-using-lightgbm\n\ny_train = np.zeros(len(y_train_),dtype=np.float)\nfor i in range(len(y_train)):\n    y_train[i]=(y_train_[i])\n\nscaler = preprocessing.StandardScaler()\nscaler.fit([[y] for y in y_train])\ny_train = np.array([y[0] for y in scaler.transform([[y] for y in y_train])])\ndata = [0 for i in range(199)]\nfor y in y_train:\n    data[int(y+99)]+=1\nplt.plot([i-99 for i in range(199)],data)","b2e27b48":"folds = 10\nseed = 1997\nkf = KFold(n_splits = folds, shuffle = True, random_state=seed)\ny_valid_pred = np.zeros(X_train.shape[0])\nmodels = []\n\nlgb_params = dict(\n    objective='regression',\n    n_estimators=1000, \n    learning_rate=0.01,\n    metric='rmse',\n    bagging_fraction = 0.8,\n    feature_fraction = 0.8,\n)\n\nfor tr_idx, val_idx in kf.split(X_train, y_train):\n    tr_x, tr_y = X_train.iloc[tr_idx,:], y_train[tr_idx]\n    vl_x, vl_y = X_train.iloc[val_idx,:], y_train[val_idx]\n\n    tr_data = lgb.Dataset(tr_x, label=tr_y)\n    vl_data = lgb.Dataset(vl_x, label=vl_y)  \n    clf = lgb.LGBMRegressor(**lgb_params)\n    clf.fit(tr_x, tr_y,\n        eval_set=[(vl_x, vl_y)],\n        early_stopping_rounds=50,\n        verbose=100)\n    try:\n        plt.figure(figsize=(50, 30))\n        ax = lgb.plot_importance(clf, max_num_features=20)\n        plt.show()\n    except Exception as e:\n        print('fi error', e)\n        pass\n    y_valid_pred[val_idx] += clf.predict(vl_x, num_iteration=clf.best_iteration_)\n    models.append(clf)\n\ngc.collect()","3756286c":"# from https:\/\/www.kaggle.com\/hukuda222\/nfl-simple-model-using-lightgbm\n\ny_pred = np.zeros((509762\/\/22,199))\ny_ans = np.zeros((509762\/\/22,199))\n\nfor i,p in enumerate(np.round(scaler.inverse_transform(y_valid_pred))):\n    for j in range(199):\n        if j>=p+10:\n            y_pred[i][j]=1.0\n        elif j>=p-10:\n            y_pred[i][j]=(j+10-p)*0.05\n\nfor i,p in enumerate(y_train):\n    for j in range(199):\n        if j>=p:\n            y_ans[i][j]=1.0\n\nprint(\"validation score:\",np.sum(np.power(y_pred-y_ans,2))\/(199*(509762\/\/22)))","6e4b3dbd":"index = 0\nfor (test_df, sample_prediction_df) in tqdm.tqdm(env.iter_test()):\n    test_df = fe(test_df)\n    for c in test_df.columns:\n        if c in lbl_dict and test_df[c].dtype=='object' and c not in not_used and not pd.isnull(test_df[c]).any(): \n#             vals = test_df[c].values\n#             test_col = []\n#             for val in vals:\n#                 try:\n#                     test_col.append(lbl_dict[c].transform(list(val))[0])\n#                 except:\n#                     test_col.append(np.nan)\n#             test_df[c] = test_col\n            try:\n                test_df[c] = lbl_dict[c].transform(list(test_df[c].values))\n            except:\n                test_df[c] = [np.nan for i in range(22)]\n    \n    count=0\n    test_data = np.zeros((1,len(all_columns)))\n    for c in test_df.columns:\n        if c in not_used: continue\n        test_data[0][count] = test_df[c][index]\n        count+=1\n    for c in unique_columns:\n        for j in range(22):\n            test_data[0][count] = test_df[c][index + j]\n            count+=1        \n    y_pred = np.zeros(199)        \n    y_pred_p = np.sum(np.round(scaler.inverse_transform(\n        [model.predict(test_data)[0] for model in models])))\/folds\n    y_pred_p += 99\n    for j in range(199):\n        if j>=y_pred_p+10:\n            y_pred[j]=1.0\n        elif j>=y_pred_p-10:\n            y_pred[j]=(j+10-y_pred_p)*0.05\n    env.predict(pd.DataFrame(data=[y_pred],columns=sample_prediction_df.columns))\n    index += 22\nenv.write_submission_file()","a4449eb6":"Whenever value is not seen in train data, we put NaN in place of it.","bdd8149c":"## **How many yards will an NFL player gain after receiving a handoff?**"}}