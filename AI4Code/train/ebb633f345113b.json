{"cell_type":{"7f857bad":"code","5a01ade5":"code","81bd59eb":"code","b344604c":"code","aca4b7bd":"code","eca4080a":"code","598d4897":"code","2c0c6dc4":"code","12587fd2":"code","831ecefc":"code","dabc2f6b":"code","161d2005":"code","fcff6574":"code","462326bc":"code","41606b8a":"code","143a2896":"code","add8ba6b":"code","0b5d03f9":"code","d5610d1a":"code","83a3eac6":"code","f29ddef8":"code","d7146bd8":"code","a1846fbc":"code","3fb42984":"code","cae27cff":"code","d35bef79":"code","538427b4":"code","813c31ef":"code","d58ec57d":"code","d343533c":"code","67b28881":"code","e9aef56a":"code","95eec8b9":"code","e44b72a9":"code","82d917dc":"code","fcd347f6":"code","ae650990":"code","1b7fa006":"code","8f63c9d5":"code","5e3fe68c":"code","1ef8c8c1":"code","ee796ee6":"code","498e96a9":"code","1c112e5b":"code","e1942693":"code","c1910c08":"code","9059f3c2":"code","c3750b9a":"code","9b353684":"code","6c639108":"code","9d89e08e":"code","aad05f14":"code","c8af0864":"code","080aa751":"code","e965e59d":"code","373f9143":"code","f7cf429a":"code","b136bc46":"markdown","2300c485":"markdown","53a5a403":"markdown","abcf5ff8":"markdown","c51d6926":"markdown","b804e5cf":"markdown","6ff79d01":"markdown","3226f293":"markdown","c975d4b9":"markdown","54da3047":"markdown","1a931f35":"markdown","90526e66":"markdown","687212e2":"markdown","8faf54dd":"markdown","911e75f5":"markdown","d7f0c077":"markdown","a65e0ed2":"markdown","663eb779":"markdown","82bedd33":"markdown","482edca0":"markdown","f3975b54":"markdown","7ce81018":"markdown","9dc8a231":"markdown","9671f7fd":"markdown","ae8e4407":"markdown","5f7a23a1":"markdown","66d200ef":"markdown","ea4b0983":"markdown","69fd15bb":"markdown","001cdcca":"markdown"},"source":{"7f857bad":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5a01ade5":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","81bd59eb":"#\u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb 2 t\u1eadp train.tsv v\u00e0 test_stg2.tsv v\u00e0 \u0111\u01b0a v\u1ec1 d\u1ea1ng b\u1ea3ng\ntrain_data = pd.read_table(\"train.tsv\")\ntest_data = pd.read_table(\"test_stg2.tsv\")\n","b344604c":"#Ki\u1ec3m tra th\u00f4ng tin c\u1ee7a t\u1ec7p train\ntrain_data.info()\ntest_data.info()","aca4b7bd":"print(train_data.shape)\nprint(test_data.shape)","eca4080a":"train_data.head()","598d4897":"# \u0110\u1ed3 th\u1ecb ph\u00e2n ph\u1ed1i Price\nplt.figure(figsize=(7, 7))\nsns.histplot(train_data['price'], kde=False, stat=\"density\", linewidth=0)\nplt.show()","2c0c6dc4":"#Bi\u1ec3u di\u1ec5n \u0111\u1ed3 th\u1ecb m\u1ed9t c\u00e1ch d\u1ec5 nh\u00ecn h\u01a1n, k\u00e8m theo ph\u00e2n ph\u1ed1i chu\u1ea9n maximum likelihood\nfrom scipy.stats import norm\nplt.figure(figsize=(7, 7))\nax = sns.distplot(train_data['price'], fit=norm, kde=False)\nax.set_xlim(0, 250)\nplt.show()","12587fd2":"#thu h\u1eb9p kho\u1ea3ng gi\u00e1 tr\u1ecb \u0111\u1ec3 bi\u1ec3u di\u1ec5n tr\u00ean log cho d\u1ec5 quan s\u00e1t\nplt.figure(figsize=(7, 7))\nsns.distplot(np.log1p(train_data['price']), fit=norm, kde=False)\nplt.show()","831ecefc":"#Ch\u1ec9 l\u1ea5y c\u00e1c price > 0 v\u00e0 lo\u1ea1i b\u1ecf price<=0(v\u00ec c\u00e1c s\u1ea3n ph\u1ea9m kh\u00f4ng c\u00f3 \u00fd ngh\u0129a khi price <=0)\ntrain_data = train_data[train_data['price'] > 0].reset_index(drop = True)\n# train, validation = train_test_split(train_data, test_size = 0.1, random_state = 30)\ntrain = train_data.copy()\ntest = test_data.copy()\nprint(train.shape)\nprint(test.shape)","dabc2f6b":"train.price.describe().apply(lambda x: format(x, 'f'))","161d2005":"\nunique_brands = train['brand_name'].value_counts()\nprint(\"S\u1ed1 nh\u00e3n hi\u1ec7u ph\u00e2n bi\u1ec7t l\u00e0 {}\".format(len(unique_brands)))\nplt.figure(figsize=(20, 5))\nsns.barplot(unique_brands.index[1:11], unique_brands[1:11])\nplt.title('Top 10 c\u00e1c nh\u00e3n hi\u1ec7u v\u00e0 s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m c\u1ee7a t\u1eebng th\u01b0\u01a1ng hi\u1ec7u')\nplt.xlabel('T\u00ean c\u00e1c nh\u00e3n hi\u1ec7u')\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m')\nplt.show()","fcff6574":"plt.figure(figsize=(15, 5))\nplt.subplot(1, 2, 1)\nplt.hist(train['price'], bins=50, range=[0, 200], edgecolor='white')\nplt.title('Ph\u00e2n ph\u1ed1i c\u1ee7a gi\u00e1 s\u1ea3n ph\u1ea9m')\nplt.xlabel('Price(Gi\u00e1)')\nplt.ylabel('S\u1ed1 s\u1ea3n ph\u1ea9m')\nplt.subplot(1, 2, 2)\nplt.hist(np.log1p(train['price']), bins=50, edgecolor='white')\nplt.title('Ph\u00e2n ph\u1ed1i c\u1ee7a Log(Price)')\nplt.xlabel('Log(Price)')\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m')\nplt.show()\n# sns.displot(np.log1p(train['price']))","462326bc":"sns.distplot(train['price'])","41606b8a":"train['price'] = np.log1p(train['price'])\nsns.distplot(train['price'])","143a2896":"train['item_condition_id'].value_counts()","add8ba6b":"count = train['item_condition_id'].value_counts()\nplt.figure(figsize=(15, 5))\nsns.barplot(count.index[:5], count[:5])\nplt.ylabel('S\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m')\nplt.xlabel('\u0110i\u1ec1u ki\u1ec7n s\u1ea3n ph\u1ea9m')","0b5d03f9":"train['shipping'].value_counts()","d5610d1a":"count = train['shipping'].value_counts()\nplt.figure(figsize=(7, 3))\nplt.subplot(1, 2, 1)\nsns.barplot(count.index, count)\nplt.xlabel('Shipping')\nplt.ylabel('S\u1ed1 s\u1ea3n ph\u1ea9m')\nplt.subplot(1, 2, 2)\nlabels = ['Kh\u00f4ng Ship', 'C\u00f3 Ship']\nsizes = count\ncolors = ['green', 'yellow']\nexplode = (0.1, 0)\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","83a3eac6":"train['item_description'].value_counts().head()","f29ddef8":"print(train['category_name'].nunique())","d7146bd8":"train['category_name'].value_counts().head(10)","a1846fbc":"train['category_name'].isnull().sum()","3fb42984":"def category_split(category_name):\n    try:\n        return category_name.split('\/')\n    except:\n        return ['Missing', 'Missing', 'Missing']\ntrain['main_cat'], train['sub_cat'], train['item_cat'] = zip(*train['category_name'].apply(lambda x: category_split(x)))\ntest['main_cat'], test['sub_cat'], test['item_cat'] = zip(*test['category_name'].apply(lambda x: category_split(x)))","cae27cff":"def fill(data):\n    data['category_name'].fillna('Missing', inplace = True)\n    data['brand_name'].fillna('Missing', inplace = True)\n    data['item_description'].fillna('Missing', inplace = True)\n    return data\n\nfill(train)\nfill(test)","d35bef79":"train.head()","538427b4":"train.nunique()","813c31ef":"# Quy \u0111\u1ed5i time\nimport time\ndef format_time(seconds):\n    days = int(seconds \/ 3600 \/ 24)\n    seconds = seconds - days * 3600 * 24\n    hours = int(seconds \/ 3600)\n    seconds = seconds - hours * 3600\n    minutes = int(seconds \/ 60)\n    seconds = seconds - minutes * 60\n    secondsf = int(seconds)\n    seconds = seconds - secondsf\n    millis = int(seconds * 1000)\n\n    f = ''\n    i = 1\n    if days > 0:\n        f += str(days) + 'D'\n        i += 1\n    if hours > 0 and i <= 2:\n        f += str(hours) + 'h'\n        i += 1\n    if minutes > 0 and i <= 2:\n        f += str(minutes) + 'm'\n        i += 1\n    if secondsf > 0 and i <= 2:\n        f += str(secondsf) + 's'\n        i += 1\n    if millis > 0 and i <= 2:\n        f += str(millis) + 'ms'\n        i += 1\n    if f == '':\n        f = '0ms'\n    return f","d58ec57d":"import seaborn as sns\n\nfrom sklearn.linear_model import Ridge, Lasso, LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","d343533c":"start_time = time.time()\ncnt_vec = CountVectorizer()\n\nX_train_name = cnt_vec.fit_transform(train['name'])\nX_test_name = cnt_vec.transform(test['name'])\nprint('Name Completed: {}'.format(format_time(time.time() - start_time)))\nprint(X_train_name.shape)\nprint(X_test_name.shape)","67b28881":"start_time = time.time()\ntfidf_descp = TfidfVectorizer(max_features=50000, ngram_range=(1, 3), stop_words='english')\n\nX_train_descp = tfidf_descp.fit_transform(train['item_description'])\nX_test_descp = tfidf_descp.transform(test['item_description'])\nprint('Item Description Completed: {}'.format(format_time(time.time() - start_time)))","e9aef56a":"train.head()","95eec8b9":"from sklearn.preprocessing import LabelBinarizer","e44b72a9":"start_time = time.time()\n\nlb_brand_name = LabelBinarizer(sparse_output=True)\nX_train_brand = lb_brand_name.fit_transform(train['brand_name'])\nX_test_brand = lb_brand_name.transform(test['brand_name'])\n\nlb_item_cond_id = LabelBinarizer(sparse_output=True)\nX_train_item_condition_id = lb_item_cond_id.fit_transform(train['item_condition_id'])\nX_test_item_condition_id = lb_item_cond_id.transform(test['item_condition_id'])\n\nlb_shipping = LabelBinarizer(sparse_output=True)\nX_train_shipping = lb_shipping.fit_transform(train['shipping'])\nX_test_shipping = lb_shipping.transform(test['shipping'])\n\nprint('Complete in: {}'.format(format_time(time.time() - start_time)))","82d917dc":"start_time = time.time()\n\nlb_main_cat = LabelBinarizer(sparse_output=True)\nX_train_main_cat = lb_main_cat.fit_transform(train['main_cat'])\nX_test_main_cat = lb_main_cat.transform(test['main_cat'])\n\nlb_sub_cat = LabelBinarizer(sparse_output=True)\nX_train_sub_cat = lb_sub_cat.fit_transform(train['sub_cat'])\nX_test_sub_cat = lb_sub_cat.transform(test['sub_cat'])\n\nlb_item_cat = LabelBinarizer(sparse_output=True)\nX_train_item_cat = lb_item_cat.fit_transform(train['item_cat'])\nX_test_item_cat = lb_item_cat.transform(test['item_cat'])\n\nprint('Complete in: {}'.format(format_time(time.time() - start_time)))","fcd347f6":"# Full dataframe printing\nprint(type(X_train_brand), type(X_train_item_condition_id), type(X_train_shipping))\nprint(type(X_test_brand), type(X_test_item_condition_id), type(X_test_shipping))","ae650990":"# Train dataframe printing\nprint('X_train_brand shape:', X_train_brand.shape)\nprint('X_train_item_cond_id shape:', X_train_item_condition_id.shape)\nprint('X_train_shipping shape:', X_train_shipping.shape)\nprint('X_train_main_cat shape:', X_train_main_cat.shape)\nprint('X_train_sub_cat shape:', X_train_sub_cat.shape)\nprint('X_train_item_cat shape:', X_train_item_cat.shape)","1b7fa006":"#  Test dataframe printing\nprint('X_test_brand shape:', X_test_brand.shape)\nprint('X_test_item_cond_id shape:', X_test_item_condition_id.shape)\nprint('X_test_shipping shape:', X_test_shipping.shape)\nprint('X_test_main_cat shape:', X_test_main_cat.shape)\nprint('X_test_sub_cat shape:', X_test_sub_cat.shape)\nprint('X_test_item_cat shape:', X_test_item_cat.shape)","8f63c9d5":"from scipy.sparse import hstack\nimport gc","5e3fe68c":"sparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, \n                      X_train_item_condition_id, X_train_shipping, \n                      X_train_main_cat, X_train_sub_cat, X_train_item_cat)","1ef8c8c1":"X_train = hstack(sparse_matrix_list).tocsr()\nprint(type(X_train), X_train.shape)","ee796ee6":"del X_train\ngc.collect()","498e96a9":"def rmsle(y, y_pred):\n    return np.sqrt(np.mean(np.power(np.log1p(y) - np.log1p(y_pred), 2)))\n\ndef evaluate_orig_price(y_test, preds):\n    preds_exmpm = np.expm1(preds)\n    y_test_exmpm = np.expm1(y_test)\n    \n    return rmsle(y_test_exmpm, preds_exmpm)","1c112e5b":"def model_train_predict(model, matrix_list):\n    X = hstack(matrix_list).tocsr()\n    X_train, X_test, y_train, y_test = train_test_split(X, train['price'], test_size=0.2)\n\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    \n    del X, X_train, X_test, y_train\n    gc.collect()\n    \n    return preds, y_test","e1942693":"start_time = time.time()\nlinear_model = Ridge(solver='lsqr', fit_intercept=False)\n\nsparse_matrix_list = (X_train_name, X_train_brand, \n                      X_train_item_condition_id, X_train_shipping, \n                      X_train_main_cat, X_train_sub_cat, X_train_item_cat)\n\nlinear_preds, y_test = model_train_predict(model=linear_model, \n                                           matrix_list=sparse_matrix_list)\n\nprint('Item Description rmsle:', evaluate_orig_price(y_test, linear_preds))\n\nsparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, \n                      X_train_item_condition_id, X_train_shipping, \n                      X_train_main_cat, X_train_sub_cat, X_train_item_cat)\n\n\nlinear_preds, y_test = model_train_predict(model=linear_model, \n                                           matrix_list=sparse_matrix_list)\nprint('Item Description rmsle:', evaluate_orig_price(y_test, linear_preds))\n\nprint('Complete in: {}'.format(format_time(time.time() - start_time)))","c1910c08":"sparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, \n                      X_train_item_condition_id, X_train_shipping, \n                      X_train_main_cat, X_train_sub_cat, X_train_item_cat)\n\nX_train = hstack(sparse_matrix_list).tocsr()\nX_train","9059f3c2":"sparse_matrix_list = (X_test_name, X_test_descp, X_test_brand, \n                      X_test_item_condition_id, X_test_shipping, \n                      X_test_main_cat, X_test_sub_cat, X_test_item_cat)\nX_test = hstack(sparse_matrix_list).tocsr()","c3750b9a":"y_train = train['price']\ny_train","9b353684":"linear_model.fit(X_train, y_train)","6c639108":"preds = linear_model.predict(X_test)\npreds","9d89e08e":"preds = np.expm1(preds)\npreds","aad05f14":"sparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, \n                      X_train_item_condition_id, X_train_shipping, \n                      X_train_main_cat, X_train_sub_cat, X_train_item_cat)\n\ntrain_X = hstack(sparse_matrix_list).tocsr()\ntrain_Y = train_data[\"price\"]\nX_train, X_validation, y_train, y_validation = train_test_split(train_X, train_Y, test_size=0.1, random_state=42)\ndef evaluation(model):\n    train_pred = model.predict(X_train)\n    val_pred = model.predict(X_validation)\n    train_score = rmsle(np.expm1(train_pred), y_train)\n    validation_score = rmsle(np.expm1(val_pred), y_validation)\n    print(\"Evaluation ---- Training Dataset Score: {}, Validation Dataset Score: {}\".format(train_score, validation_score))\n    return train_score, validation_score\n\ndef train(model):\n    X, y = X_train, np.log1p(y_train)\n    model.fit(X, y)\n    evaluation(model)\n    return model","c8af0864":"lasso_model = Lasso(alpha=1e-06, fit_intercept=False)\nlasso_model = train(lasso_model)","080aa751":"import lightgbm as lgb\nparams = {\n    'learning_rate': 0.75,\n    'application': 'regression',\n    'max_depth': 3,\n    'num_leaves': 100,\n    'verbosity': -1,\n    'metric': 'RMSE',\n}\nd_train = lgb.Dataset(X_train, label=np.log1p(y_train))\nd_valid = lgb.Dataset(X_validation, label=np.log1p(y_validation))\nwatchlist = [d_train, d_valid]\n\nlgbm_model = lgb.train(\n    params, \n    train_set=d_train, \n    num_boost_round=2200, \n    valid_sets=watchlist, \n    early_stopping_rounds=50, \n    verbose_eval=100\n)","e965e59d":"from prettytable import PrettyTable\ntable = PrettyTable()\ntable.field_names = [\"Model\", \"Train RMSLE\", \"Validation RMSLE\"]\ntable.add_row([\"Ridge Regression\", 0.497253, 0.464687])\ntable.add_row([\"Lasso Regression\", 0.439915, 0.456478])\ntable.add_row([\"LightGBM\", 0.438928, 0.45633])\nprint(table)","373f9143":"submission: pd.DataFrame = test[['test_id']]\nsubmission['price'] = preds\nsubmission.to_csv(\"submission.csv\", index=False)","f7cf429a":"submission.head()","b136bc46":"**Shipping**","2300c485":"**Vect\u01a1 h\u00f3a Item_Description Column**\n\nS\u1eed d\u1ee5ng m\u00f4 h\u00ecnh **TF-IDF** (Term Frequency \u2013 Inverse Document Frequency)\nl\u00e0 1 k\u0129 thu\u1eadt s\u1eed d\u1ee5ng trong khai ph\u00e1 d\u1eef li\u1ec7u v\u0103n b\u1ea3n. Tr\u1ecdng s\u1ed1 n\u00e0y \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 t\u1ea7m quan tr\u1ecdng c\u1ee7a m\u1ed9t t\u1eeb trong m\u1ed9t v\u0103n b\u1ea3n.\n\nTF: Term Frequency(T\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a t\u1eeb) l\u00e0 s\u1ed1 l\u1ea7n t\u1eeb xu\u1ea5t hi\u1ec7n trong v\u0103n b\u1ea3n. Trong c\u00e1c v\u0103n b\u1ea3n th\u00ec t\u1ea7n su\u1ea5t xu\u1ea5t hi\u1ec7n c\u1ee7a c\u00e1c t\u1eeb c\u00f3 th\u1ec3 l\u1edbn ho\u1eb7c nh\u1ecf, TF s\u1ebd chia \u0111\u1ed9 d\u00e0i v\u0103n b\u1ea3n (theo s\u1ed1 t\u1eeb)\n\nIDF: Inverse Document Frequency(Ngh\u1ecbch \u0111\u1ea3o t\u1ea7n su\u1ea5t c\u1ee7a v\u0103n b\u1ea3n), nh\u1eb1m \u0111\u00e1nh gi\u00e1 gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c t\u1eeb. Khi t\u00ednh to\u00e1n TF , t\u1ea5t c\u1ea3 c\u00e1c t\u1eeb \u0111\u01b0\u1ee3c coi nh\u01b0 c\u00f3 \u0111\u1ed9 quan tr\u1ecdng b\u1eb1ng nhau. Nh\u01b0ng m\u1ed9t s\u1ed1 t\u1eeb ng\u1eafn nh\u01b0 \"is\" \"a\" \"or\"... th\u01b0\u1eddng xu\u1ea5t hi\u1ec7n nhi\u1ec1u nh\u01b0ng gi\u00e1 tr\u1ecb kh\u00f4ng l\u1edbn => IDF s\u1ebd gi\u1ea3m gi\u00e1 tr\u1ecb \u0111\u00e1nh gi\u00e1 c\u00e1c t\u1eeb n\u00e0y.","53a5a403":"**II. X\u1eed l\u00fd d\u1eef li\u1ec7u**\n\n**L\u00e0m s\u1ea1ch d\u1eef li\u1ec7u**\n\nX\u1eed l\u00fd column *Category_name*","abcf5ff8":"**So s\u00e1nh k\u1ebft qu\u1ea3**","c51d6926":"T\u1eadp d\u1eef li\u1ec7u n\u00e0y ch\u1ee9a 1482535 m\u1eabu, c\u00f3 th\u1ec3 coi l\u00e0 \u0111\u1ee7 l\u1edbn cho m\u1ed9t m\u00f4 h\u00ecnh h\u1ecdc m\u00e1y. L\u01b0u \u00fd r\u1eb1ng, c\u00e1c thu\u1ed9c t\u00ednh category_name, brand_name v\u00e0 item_desciption c\u00f3 c\u00e1c gi\u00e1 tr\u1ecb null v\u00e0 ta s\u1ebd c\u1ea7n x\u1eed l\u00fd v\u1ea5n \u0111\u1ec1 n\u00e0y.\nD\u1eef li\u1ec7u bao g\u1ed3m:\n\n1. 2 thu\u1ed9c t\u00ednh d\u1ea1ng v\u0103n b\u1ea3n l\u00e0 name v\u00e0 **item_description**.\n2. 2 thu\u1ed9c t\u00ednh d\u1ea1ng nh\u00e3n l\u00e0 **category_name** v\u00e0 **brand_name**.\n3. 2 thu\u1ed9c t\u00ednh c\u00f3 gi\u00e1 tr\u1ecb s\u1ed1 l\u00e0 **item_condition_id** v\u00e0 **shipping**, nh\u01b0ng ch\u00fang v\u1eabn thu\u1ed9c ki\u1ec3u d\u1eef li\u1ec7u d\u1ea1ng nh\u00e3n.\nprice c\u00f3 gi\u00e1 tr\u1ecb s\u1ed1 th\u1ef1c.","b804e5cf":"**I. T\u1ed5ng quan v\u1ec1 d\u1eef li\u1ec7u**\n\n**1. M\u00f4 t\u1ea3 b\u00e0i to\u00e1n**\n\nMercari Price suggestion l\u00e0 cu\u1ed9c thi d\u1ef1 \u0111o\u00e1n m\u1ed9t m\u1eb7t h\u00e0ng- th\u1ef1c s\u1ef1 \u0111\u00e1ng gi\u00e1 bao nhi\u00eau. Chi ti\u1ebft nh\u1ecf c\u00f3 th\u1ec3 c\u00f3 ngh\u0129a l\u00e0 s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn v\u1ec1 gi\u00e1 c\u1ea3. V\u00ed d\u1ee5, m\u1ed9t trong nh\u1eefng chi\u1ebfc \u00e1o len c\u00f3 gi\u00e1 335 \u0111\u00f4 la v\u00e0 chi\u1ebfc c\u00f2n l\u1ea1i c\u00f3 gi\u00e1 9,99 \u0111\u00f4 la th\u00ec \u0111i\u1ec1u g\u00ec quy\u1ebft \u0111\u1ecbnh v\u1ec1 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m.\n\nVi\u1ec7c \u0111\u1ecbnh gi\u00e1 s\u1ea3n ph\u1ea9m th\u1eadm ch\u00ed c\u00f2n kh\u00f3 h\u01a1n tr\u00ean quy m\u00f4 l\u1edbn, ch\u1ec9 c\u1ea7n xem x\u00e9t c\u00f3 bao nhi\u00eau s\u1ea3n ph\u1ea9m \u0111\u01b0\u1ee3c b\u00e1n tr\u1ef1c tuy\u1ebfn. Qu\u1ea7n \u00e1o c\u00f3 xu h\u01b0\u1edbng \u0111\u1ecbnh gi\u00e1 theo m\u00f9a m\u1ea1nh m\u1ebd v\u00e0 b\u1ecb \u1ea3nh h\u01b0\u1edfng nhi\u1ec1u b\u1edfi th\u01b0\u01a1ng hi\u1ec7u, trong khi \u0111\u1ed3 \u0111i\u1ec7n t\u1eed c\u00f3 gi\u00e1 dao \u0111\u1ed9ng d\u1ef1a tr\u00ean th\u00f4ng s\u1ed1 k\u1ef9 thu\u1eadt c\u1ee7a s\u1ea3n ph\u1ea9m. \n\nMercari mu\u1ed1n \u0111\u01b0a ra \u0111\u1ec1 xu\u1ea5t v\u1ec1 gi\u00e1 cho ng\u01b0\u1eddi b\u00e1n, nh\u01b0ng \u0111i\u1ec1u n\u00e0y r\u1ea5t kh\u00f3 v\u00ec ng\u01b0\u1eddi b\u00e1n c\u1ee7a h\u1ecd \u0111\u01b0\u1ee3c ph\u00e9p \u0111\u01b0a b\u1ea5t k\u1ef3 th\u1ee9 g\u00ec ho\u1eb7c b\u1ea5t k\u1ef3 g\u00f3i n\u00e0o l\u00ean th\u1ecb tr\u01b0\u1eddng c\u1ee7a Mercari.\n\nInput: D\u1eef li\u1ec7u d\u1ea1ng text g\u1ed3m name, **item_condition**, **category**, **brand_name**, **shippin**g v\u00e0 **item_description** v\u1ec1 s\u1ea3n ph\u1ea9m.\n\nOutput: Gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m.\n\n**2. C\u1ea5u tr\u00fac c\u1ee7a d\u1eef li\u1ec7u**\n\nImport th\u01b0 vi\u1ec7n v\u00e0 gi\u1ea3i n\u00e9n","6ff79d01":"**Result**","3226f293":"**X\u1ebfp ch\u1ed3ng c\u00e1c kh\u1ed1i d\u1eef li\u1ec7u th\u00e0nh ma tr\u1eadn**","c975d4b9":"**Vector h\u00f3a d\u1eef li\u1ec7u**","54da3047":"**Lasso Regression**\n\nM\u1ed9t m\u00f4 h\u00ecnh anh em v\u1edbi Ridge l\u00e0 Laso, thay v\u00ec Ridge s\u1eed d\u1ee5ng c\u00f4ng th\u1ee9c chu\u1ea9n h\u00f3a L2 khi t\u00ecm h\u1ec7 s\u1ed1 w th\u00ec Laso s\u1eed d\u1ee5ng c\u00f4ng th\u1ee9c chu\u1ea9n h\u00f3a L1. S\u1eed d\u1ee5ng c\u00f4ng th\u1ee9c chu\u1ea9n h\u00f3a L1 nh\u1eb1m m\u1ee5c \u0111\u00edch lo\u1ea1i b\u1edbt feature \u00edt \u1ea3nh h\u01b0\u1edfng t\u1edbi \u0111\u1ea7u ra ngh\u0129a l\u00e0 l\u00e0m cho ph\u1ea7n l\u1edbn c\u00e1c tr\u1ecdng s\u1ed1 w = 0.","1a931f35":"**X\u00e2y D\u1ef1ng C\u00e1c M\u00f4 H\u00ecnh H\u1ecdc M\u00e1y V\u00e0 Hu\u1ea5n Luy\u1ec7n D\u1eef Li\u1ec7u**","90526e66":"***Ki\u1ec3m tra l\u1ea1i sau khi \u0111\u00e3 l\u00e0m s\u1ea1ch***","687212e2":"**3. Ph\u00e2n t\u00edch d\u1eef li\u1ec7u**\n","8faf54dd":"Nh\u1eadn x\u00e9t :\n\n1. T\u1eadp train g\u1ed3m 8 c\u1ed9t th\u00f4ng tin v\u1ec1 s\u1ea3n ph\u1ea9m v\u00e0 c\u00f3 t\u1ed5ng c\u1ed9ng 1482535 s\u1ea3n ph\u1ea9m\n2. T\u1eadp test g\u1ed3m 3460725 s\u1ea3n ph\u1ea9m, c\u00f3 7 c\u1ed9t th\u00f4ng tin v\u00e0 ta d\u1ef1 v\u00e0o \u0111\u00f3 \u0111\u1ec3 t\u00ecm ra 'price' c\u1ee7a s\u1ea3n ph\u1ea9m","911e75f5":"**Ridge Regression Model**\n\nT\u1ed5ng quan:\n\nH\u1ed3i quy Ridge l\u00e0 m\u1ed9t k\u1ef9 thu\u1eadt \u0111\u1ec3 ph\u00e2n t\u00edch nhi\u1ec1u d\u1eef li\u1ec7u h\u1ed3i quy ch\u1ecbu s\u1ef1 \u0111a h\u00ecnh. Khi \u0111a c\u1ed9ng tuy\u1ebfn x\u1ea3y ra, \u01b0\u1edbc t\u00ednh b\u00ecnh ph\u01b0\u01a1ng t\u1ed1i thi\u1ec3u l\u00e0 kh\u00f4ng thi\u00ean v\u1ecb, nh\u01b0ng ph\u01b0\u01a1ng sai c\u1ee7a ch\u00fang l\u1edbn n\u00ean ch\u00fang c\u00f3 th\u1ec3 c\u00e1ch xa gi\u00e1 tr\u1ecb th\u1ef1c. B\u1eb1ng c\u00e1ch th\u00eam m\u1ed9t m\u1ee9c \u0111\u1ed9 sai l\u1ec7ch cho c\u00e1c \u01b0\u1edbc t\u00ednh h\u1ed3i quy, h\u1ed3i quy s\u01b0\u1eddn gi\u00fap gi\u1ea3m c\u00e1c l\u1ed7i ti\u00eau chu\u1ea9n.\n\nRidge Regression l\u00e0 m\u00f4 h\u00ecnh h\u1ed3i quy ph\u00e2n t\u00edch m\u1ed1i quan h\u1ec7 gi\u1eefa c\u00e1c bi\u1ebfn \u0111\u1ed9c l\u1eadp v\u00e0 c\u00e1c bi\u1ebfn ph\u1ee5 thu\u1ed9c s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p Regularization, \u0111i\u1ec1u ch\u00ecnh m\u00f4 h\u00ecnh sao cho gi\u1ea3m thi\u1ec3u c\u00e1c v\u1ea5n \u0111\u1ec1 Overfitting, t\u1ed1i \u01b0u hay ki\u1ec3m so\u00e1t m\u1ee9c \u0111\u1ed9 ph\u1ee9c t\u1ea1p c\u1ee7a m\u00f4 h\u00ecnh \u0111\u1ec3 c\u00e2n \u0111\u1ed1i gi\u1eefa Biased v\u00e0 Variance Quan \u0111\u00f3 gi\u1ea3m sai s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh.\n\nC\u00f4ng th\u1ee9c t\u1ed5ng qu\u00e1t c\u1ee7a m\u00f4 h\u00ecnh:\n\n\n![image.png](attachment:82a93637-c543-4cb9-ae0c-d88b5cd127df.png)\n\n\nH\u1ec7 s\u1ed1 \u03bb hay c\u00f2n g\u1ecdi l\u00e0 tham s\u1ed1 Regularization, l\u00e0 s\u1ed1 lu\u00f4n d\u01b0\u01a1ng, l\u00e0 gi\u00e1 tr\u1ecb m\u00e0 \u1edf \u0111\u00f3 ph\u01b0\u01a1ng tr\u00ecnh tuy\u1ebfn t\u00ednh s\u1ebd t\u00ednh to\u00e1n \u0111\u01b0\u1ee3c \u0111\u1ec3 sai s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c gi\u1ea3m t\u1ed1i \u0111a, ngh\u0129a l\u00e0 gi\u00e1 tr\u1ecb \u03bb n\u00e0o l\u00e0m cho MSE (\u1edf \u0111\u00e2y d\u00f9ng RLMSE) nh\u1ecf nh\u1ea5t th\u00ec m\u00f4 h\u00ecnh \u0111\u00f3 \u0111\u01b0\u1ee3c ch\u1ecdn","d7f0c077":"**C\u00e1c thu\u1ed9c t\u00ednh d\u00e3n nh\u00e3n**","a65e0ed2":"**Vector h\u00f3a name column**\n\nS\u1eed d\u1ee5ng m\u00f4 h\u00ecnh BoW(Bag-of-words)\nM\u00f4 h\u00ecnh t\u00fai t\u1eeb (bag-of-words) l\u00e0 m\u1ed9t bi\u1ec3u di\u1ec5n \u0111\u01a1n gi\u1ea3n h\u00f3a \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong x\u1eed l\u00fd ng\u00f4n ng\u1eef t\u1ef1 nhi\u00ean v\u00e0 truy v\u1ea5n th\u00f4ng tin (IR). Trong m\u00f4 h\u00ecnh n\u00e0y, m\u1ed9t v\u0103n b\u1ea3n (ch\u1eb3ng h\u1ea1n nh\u01b0 m\u1ed9t c\u00e2u ho\u1eb7c m\u1ed9t t\u00e0i li\u1ec7u) \u0111\u01b0\u1ee3c th\u1ec3 hi\u1ec7n d\u01b0\u1edbi d\u1ea1ng t\u00fai (multiset) ch\u1ee9a c\u00e1c t\u1eeb c\u1ee7a n\u00f3, kh\u00f4ng quan t\u00e2m \u0111\u1ebfn ng\u1eef ph\u00e1p v\u00e0 th\u1eadm ch\u00ed tr\u1eadt t\u1ef1 t\u1eeb nh\u01b0ng v\u1eabn gi\u1eef t\u00ednh \u0111a d\u1ea1ng.\n\nM\u00f4 h\u00ecnh t\u00fai t\u1eeb th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trong c\u00e1c ph\u01b0\u01a1ng ph\u00e1p ph\u00e2n lo\u1ea1i t\u00e0i li\u1ec7u trong \u0111\u00f3 s\u1ef1 xu\u1ea5t hi\u1ec7n (t\u1ea7n su\u1ea5t) c\u1ee7a m\u1ed7i t\u1eeb \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng nh\u01b0 m\u1ed9t \u0111\u1eb7c tr\u01b0ng \u0111\u1ec3 \u0111\u00e0o t\u1ea1o m\u00e1y ph\u00e2n lo\u1ea1i.\n\n","663eb779":"# **Mercari Price Suggestion Challenge**","82bedd33":"**Ph\u00e2n lo\u1ea1i c\u00e1c features th\u00f4ng qua LabelBinarizer**","482edca0":"T\u1ed5ng quan v\u1ec1 d\u1eef li\u1ec7u.\nTrong t\u1eadp train ta c\u00f3 8 tr\u01b0\u1eddng th\u00f4ng tin d\u1eef li\u1ec7u:\n\n* **train_id** l\u00e0 ch\u1ec9 s\u1ed1 c\u1ee7a s\u1ea3n ph\u1ea9m\n* **name id** t\u00ean c\u1ee7a s\u1ea3n ph\u1ea9m (d\u1ea1ng text)\n* **item_condition_id** l\u00e0 t\u00ecnh tr\u1ea1ng c\u1ee7a c\u00e1c m\u1eb7t h\u00e0ng do ng\u01b0\u1eddi b\u00e1n cung c\u1ea5p. (d\u1ea1ng s\u1ed1 1-5)\n* **category_name** l\u00e0 danh m\u1ee5c c\u1ee7a s\u1ea3n ph\u1ea9m\n* **brand_name** l\u00e0 t\u00ean nh\u00e3n hi\u1ec7u c\u1ee7a s\u1ea3n ph\u1ea9m\n* **price** l\u00e0 gi\u00e1 c\u1ee7a s\u1ea3n ph\u1ea9m v\u00e0 \u0111\u00e2y c\u0169ng l\u00e0 m\u1ee5c ti\u00eau c\u1ee7a b\u00e0i to\u00e1n n\u00e0y\n* **shipping** l\u00e0 s\u1ea3n ph\u1ea9m n\u00e0y c\u00f3 \u0111\u01b0\u1ee3c v\u1eadn chuy\u1ec3n \u0111\u1ebfn nh\u00e0 (d\u1ea1ng s\u1ed1 0\/1)\n* **item_description** l\u00e0 m\u00f4 t\u1ea3 th\u00f4ng tin s\u1ea3n ph\u1ea9m (d\u1ea1ng v\u0103n b\u1ea3n) D\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c l\u00e0m s\u1ea1ch \u0111\u1ec3 x\u00f3a v\u0103n b\u1ea3n tr\u00f4ng gi\u1ed1ng nh\u01b0 gi\u00e1 (v\u00ed d\u1ee5: 20) \u0111\u1ec3 tr\u00e1nh r\u00f2 r\u1ec9. C\u00e1c gi\u00e1 b\u1ecb lo\u1ea1i b\u1ecf n\u00e0y \u0111\u01b0\u1ee3c bi\u1ec3u th\u1ecb l\u00e0 [rm]\n\nNh\u1eadn x\u00e9t:\n* \u1ede t\u1eadp train, m\u1ed7i 1 s\u1ea3n ph\u1ea5m s\u1ebd c\u00f3 c\u00e1c thu\u1ed9c t\u00ednh: train_id, name, item_condition_id, category_name, shipping, item_description v\u00e0 c\u1ed9t price\n* \u1ede c\u1ed9t brand_name c\u00f3 nhi\u1ec1u gi\u00e1 tr\u1ecb NaN(gi\u00e1 tr\u1ecb r\u1ed7ng)","f3975b54":"X\u1eed l\u00fd gi\u00e1 tr\u1ecb Null","7ce81018":"**LightGBM**\n\nLightGBM vi\u1ebft t\u1eaft c\u1ee7a Light Gradient Boosting Machine, l\u00e0 m\u00e3 ngu\u1ed3n m\u1edf x\u1eed l\u00fd thu\u1eadt to\u00e1n t\u0103ng c\u01b0\u1eddng \u0111\u1ed9 d\u1ed1c (Gradient Boosting) \u0111\u01b0\u1ee3c ph\u00e1t tri\u1ec3n b\u1edfi Microsoft. Gradient Boosting l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n xu\u1ea5t ph\u00e1t t\u1eeb thu\u1eadt to\u00e1n C\u00e2y quy\u1ebft \u0111\u1ecbnh (Decision Tree), n\u00f3 th\u1ef1c hi\u1ec7n vi\u1ec7c x\u00e2y d\u1ef1ng tu\u1ea7n t\u1ef1 nhi\u1ec1u C\u00e2y quy\u1ebft \u0111\u1ecbnh v\u00e0 ti\u1ebfn h\u00e0nh h\u1ecdc t\u1eadp.","9dc8a231":"**Category**","9671f7fd":"Nh\u1eadn x\u00e9t: \n1. Nike v\u00e0 Victoria's Secret l\u00e0 2 th\u01b0\u01a1ng hi\u1ec7u c\u00f3 s\u1ed1 l\u01b0\u1ee3ng s\u1ea3n ph\u1ea9m l\u1edbn nh\u1ea5t.\n2. Th\u01b0\u01a1ng hi\u1ec7u s\u1ea3n ph\u1ea9m \u1ea3nh h\u01b0\u1edfng t\u1edbi gi\u00e1 c\u1ee7a t\u1eebng s\u1ea3n ph\u1ea9m.","ae8e4407":"Nh\u1eadn x\u00e9t:\n1. gi\u00e1 tr\u1ecb \u1edf name v\u00e0 item_description l\u1edbn h\u01a1n h\u1eb3n c\u00e1c c\u1ed9t kh\u00e1c\n2. C\u1ea7n vector h\u00f3a name v\u00e0 item_description\n3. Ph\u00e2n lo\u1ea1i theo lable c\u00e1c features","5f7a23a1":"**RMSLE**\n\nL\u1ed7i trung b\u00ecnh b\u00ecnh ph\u01b0\u01a1ng (RMSE) l\u00e0 \u0111\u1ed9 l\u1ec7ch chu\u1ea9n c\u1ee7a ph\u1ea7n d\u01b0 ( l\u1ed7i d\u1ef1 \u0111o\u00e1n ). ... N\u00f3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\u00e0y b\u1eb1ng c\u00e1ch \u0111o s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa c\u00e1c gi\u00e1 tr\u1ecb d\u1ef1 \u0111o\u00e1n v\u00e0 gi\u00e1 tr\u1ecb th\u1ef1c t\u1ebf . R-MSE c\u00e0ng nh\u1ecf t\u1ee9c l\u00e0 sai s\u1ed1 c\u00e0ng b\u00e9 th\u00ec m\u1ee9c \u0111\u1ed9 \u01b0\u1edbc l\u01b0\u1ee3ng cho th\u1ea5y \u0111\u1ed9 tin c\u1eady c\u1ee7a m\u00f4 h\u00ecnh c\u00f3 th\u1ec3 \u0111\u1ea1t cao nh\u1ea5t.\nC\u00f4ng th\u1ee9c:\n![image.png](attachment:1355ec06-c833-4dbf-a84d-de62efcbb855.png)\n\n\nTrong \u0111\u00f3:\n\n* y^i l\u00e0 gi\u00e1 tr\u1ecb \u01b0\u1edbc l\u01b0\u1ee3ng\n* yi l\u00e0 bi\u1ebfn \u0111\u1ed9c l\u1eadp\n* n=(N \u2013 k \u2013 1)\n* N : s\u1ed1 t\u1ed5ng l\u01b0\u1ee3ng quan s\u00e1t\n* K : t\u1ed5ng l\u01b0\u1ee3ng bi\u1ebfn","66d200ef":"**Item_description**\n\nKi\u1ec3m tra bi\u1ebfn item_description","ea4b0983":"**Item_condition_id**","69fd15bb":"**Chu\u1ea9n b\u1ecb Submission**","001cdcca":"**3. Chi ti\u1ebft v\u1ec1 t\u1eebng thu\u1ed9c t\u00ednh**\n\n\n***Price***"}}