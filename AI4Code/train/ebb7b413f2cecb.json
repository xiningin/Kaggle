{"cell_type":{"37d3e936":"code","4d8408e5":"code","00e790b3":"code","4aa0222e":"code","cf26bff2":"code","93e4fef2":"code","5fb41659":"code","9f005625":"code","a7f9a762":"code","f0ec396f":"code","3560db9a":"code","eef72758":"code","7552fe34":"code","c95dc60a":"code","676b2db7":"code","966ddaf7":"code","03bbff36":"code","d7d15a27":"code","bfe63ab6":"code","df0c39c2":"code","2f52f4db":"code","094b1cbf":"code","f4d1f1ee":"code","80fe6d58":"code","fd34af0a":"code","f5bbbf79":"markdown","77dd84fe":"markdown","783ceaa1":"markdown","0487d926":"markdown","11aaf06a":"markdown","95bc251d":"markdown","28eb4483":"markdown","45fa5829":"markdown"},"source":{"37d3e936":"from google.colab import drive\ndrive.mount('\/content\/drive')\n","4d8408e5":"import numpy as np\nimport os\nimport pandas as pd\n# To make this notebook's output stable across runs\nnp.random.seed(42)\n\n# To plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\nimport seaborn as sns\n#set style of plots\nsns.set_style('white')\n\n#define a custom palette\ncustomPalette = ['#630C3A', '#39C8C6', '#D3500C', '#FFB139']\nsns.set_palette(customPalette)\nsns.palplot(customPalette)\n\n\n# Ignore useless warnings (see SciPy issue #5998)\nimport warnings\nwarnings.filterwarnings(action=\"ignore\", message=\"^internal gelsd\")","00e790b3":"path='\/content\/drive\/MyDrive\/spotify\/data.csv'","4aa0222e":"data=pd.read_csv('\/content\/drive\/MyDrive\/spotify\/data.csv')","cf26bff2":"data","93e4fef2":"data.head()","5fb41659":"data.describe()","9f005625":"data.info()","a7f9a762":"s=data.groupby(\"artists\")[\"popularity\"].sum().sort_values(ascending=False).head(170652)\n","f0ec396f":"\"s.head(10)","3560db9a":"plt.figure(figsize=(12,6))\nsns.heatmap(data.corr(),annot=True)","eef72758":"plt.figure(figsize=(16, 8))\nsns.set(style=\"whitegrid\")\ncols = [\"popularity\",\"acousticness\",\"instrumentalness\",\"speechiness\",\"danceability\" ]\nsns.pairplot(data[cols], height = 2.5 )\nplt.show();","7552fe34":"data.info()","c95dc60a":"\nfeatures = data[['danceability','liveness','acousticness','loudness','speechiness','valence','energy']]\n","676b2db7":"from sklearn import preprocessing\n\nloudness = features[['loudness']].values\nmin_max_scaler = preprocessing.MinMaxScaler()\nloudness_scaled = min_max_scaler.fit_transform(loudness)\ndata['loudness'] = pd.DataFrame(loudness_scaled)\n\n\n\n\nfeatures.hist(bins=50,figsize=(20,15))","966ddaf7":"from sklearn.cluster import KMeans\n\nsse = {}\nK = range(1,12)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(features)\n    sse[k]=km.inertia_","03bbff36":"\nplt.xlabel('k')\nplt.ylabel('sse')\nplt.title('Elbow Method To Find k')\nsns.pointplot(x=list(sse.keys()),y=list(sse.values()))","d7d15a27":"kmeans = KMeans(n_clusters=3)\nkmeans.fit(features)\nlabels=kmeans.labels_","bfe63ab6":"rfm=data.assign(Cluster=labels)\ngroup=rfm.groupby([\"Cluster\"])\ngroup.agg({\n    \n    'danceability':'mean',\n    'loudness':'mean',\n     'valence':'mean',\n    'acousticness':['mean','count'],\n   \n\n}).round(1)","df0c39c2":"rfm_melt=pd.melt(rfm.reset_index(), id_vars =['artists','Cluster'],value_vars=['danceability','loudness','acousticness','valence'],var_name='Metric',value_name='Value')\n","2f52f4db":"\nplt.xlabel('Metric')\nplt.ylabel('Value')\nplt.title('snake plot')\nsns.pointplot(data=rfm_melt,x='Metric',y='Value',hue='Cluster')","094b1cbf":"rfm[rfm['Cluster']==1]","f4d1f1ee":"rfm[rfm['Cluster']==2]","80fe6d58":"rfm[rfm['Cluster']==0]","fd34af0a":"def recommend(n):\n  print(rfm[rfm['Cluster']==n])\n\n\n\ncol=['name','Cluster']\nn=rfm.name.to_list()\nfor i in n:\n  i=i.upper()\nv=rfm.Cluster.to_list()\nwhile(1):\n  print('Enter a song name:\\n')\n  song=input()\n  song.upper()\n  if song in n:\n    print('Song found, generating recommendations:\\n')\n    song_index = n.index(song)\n    sv=v[song_index]\n    recommend(sv)\n  else:\n    print('Please enter a valid song name:\\n')\n    continue\n\n\n\n  print(\"Do you want to type another song? (Y\/N):\\n\")\n  ans = input()\n  ans.upper()\n  if(ans=='N'):\n    break\n  else:\n    continue\n","f5bbbf79":"# **FEATURE SELECTION**","77dd84fe":"OPTIMAL VALUE OF K IS 3","783ceaa1":"#     **SPOTIFY MOOD PREDICTION AND MUSIC RECOMMENDATION SYSYEM** ","0487d926":"# **MUSIC RECOMMENDATION**","11aaf06a":"cluster 0--->sad,depreesed\n\n\ncluster 1--->cheerful,happy\n\n\ncluster 2--->normal happy mood","95bc251d":"**K NEAREST NEIGHBOR ALGORITHM**","28eb4483":"#**CLUSTERING AND MOOD PREDICTION**\n\n\n\n","45fa5829":"DATA PREPROCESSING"}}