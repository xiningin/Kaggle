{"cell_type":{"20171d93":"code","aaf8bdd9":"code","8ebdbc2e":"code","dbaacc20":"code","3e414c7c":"code","09565baa":"code","b0131b32":"code","db5610da":"code","55331d86":"code","954b7448":"code","23357b26":"code","733267d5":"code","8b07e655":"code","240ecf59":"code","06c2a887":"code","5034abd3":"code","7c86c698":"code","4c88807b":"code","7f4e8e97":"code","75a6f862":"code","9a13b35e":"code","92754792":"code","48a87456":"code","f089b657":"code","6c0f61fc":"markdown","683a75a5":"markdown","f77a039a":"markdown","eb37a220":"markdown","8c8f377c":"markdown","9203b290":"markdown","0ba940bc":"markdown","5997ff30":"markdown","89c248d5":"markdown","6ce43b84":"markdown"},"source":{"20171d93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aaf8bdd9":"import tensorflow as tf\ndata=pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\")\n(X_train,y_train),(X_test,y_test)= tf.keras.datasets.mnist.load_data()","8ebdbc2e":"\ndata.head()\n","dbaacc20":"data.tail()","3e414c7c":"data.info()","09565baa":"X_train.shape","b0131b32":"y_train[:50]","db5610da":"L=pd.DataFrame(y_train)\nL[0].value_counts() \n# to check the number of unique values present( arranged in descending order such that first element is the most frequently occuring element.)","55331d86":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimage_index = 7777 \nprint(y_train[image_index]) \nplt.imshow(X_train[image_index], cmap='Greys')","954b7448":"image_index=5999\nprint(y_train[image_index])\nplt.imshow(X_train[image_index],cmap='pink')","23357b26":"X_train = X_train.reshape(X_train.shape[0],28,28,1)\nX_test = X_test.reshape(X_test.shape[0],28,28,1) ","733267d5":"\n# one hot encode target values\ny_train = tf.keras.utils.to_categorical(y_train)\ny_test = tf.keras.utils.to_categorical(y_test)\n","8b07e655":"print(y_train.shape)\nprint(y_test.shape)","240ecf59":"# Converting integer to  float so that we can get decimal points after division\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","06c2a887":"#Normalizing the RGB codes by dividing it by 255 to convert into  0 and 1\nX_train = X_train\/255\nX_test = X_test\/255","5034abd3":"print('X_train shape:', X_train.shape)\nprint('Number of images in X_train', X_train.shape[0])\nprint('Number of images in X_test', X_test.shape[0])","7c86c698":"# Defining CNN model\n# Importing the required Keras modules containing model and layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D","4c88807b":"# Creating a Sequential Model and adding the layers\nmodel=Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dense(10, activation='softmax'))","7f4e8e97":"# compiling model using Stochastic Gradient Descent algorithm as optimizer\nfrom keras.optimizers import SGD\nopt = SGD(lr=0.01, momentum=0.9)# where learning rate is specified as lr (default is 0.01)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x=X_train,y=y_train, epochs=10)","75a6f862":"#using adam optimizer\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x=X_train,y=y_train,epochs=10)","9a13b35e":"model.evaluate(X_test,y_test)","92754792":"image_index = 4474\nplt.imshow(X_test[image_index].reshape(28, 28),cmap='Greys') \npred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","48a87456":"image_index = 2\nplt.imshow(X_test[image_index].reshape(28, 28),cmap='Purples')\npred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","f089b657":"image_index = 5000\nplt.imshow(X_test[image_index].reshape(28, 28),cmap='bone')\npred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))\nprint(pred.argmax())","6c0f61fc":"Now, testing our model on test data- Few examples are as follows:","683a75a5":"*This function returns a matrix of binary values(either 0 or 1). It has number of rows equal to the length of the input vector and number of columns equal to the  number of classes.*","f77a039a":"Model shows 98.5% accuracy.","eb37a220":"*60000 represents the number of images in train dataset and 28x28 is the size of images in pixel*","8c8f377c":"To normalize the pixel values of grayscale images, we rescale them to the range 0 to 1. \nThis involves first converting the data type from unsigned integers to floats, then dividing the pixel values by the maximum value i.e. 255 (as the maximum RGB values ranges from 0 to 256.)","9203b290":" Reshaping the data arrays to have a single colour channel.","0ba940bc":"There are 10 classes which are represented as unique integers. We can, therefore, use a one hot encoding for the class element of each sample, transforming the integer into a 10 element binary vector with a 1 for the index of the class value, and 0 values for all other classes. We can achieve this with the to_categorical() utility function.","5997ff30":"At image index position 5000, the value present is 3 which is correctly predicted.","89c248d5":"Similarly, at image index position 2, the value present is 1 and it is correctly predicted.","6ce43b84":"At image index 4474, the image is of value 7 and our model correctly predicted it as 7."}}