{"cell_type":{"dd793552":"code","c32977aa":"code","1059d1bc":"code","07167834":"code","62026288":"code","a8f5d701":"code","33eb3f22":"code","623ad2a5":"code","236d74dc":"code","178997cc":"code","4cdb6be1":"code","7cd98de4":"code","eca9937d":"code","8bce0d4b":"code","54ae41ff":"code","81feca98":"code","4abd18b3":"markdown","9d75e1cf":"markdown","76f2f4b2":"markdown","482456ff":"markdown","1bd17dd0":"markdown","a28dc353":"markdown","83a000f2":"markdown","03d19dd7":"markdown","59d26042":"markdown","1caa1f91":"markdown","b3d932e8":"markdown","3a23112f":"markdown","e353036b":"markdown","40822756":"markdown","d1724d92":"markdown","001f2590":"markdown","a4673f8b":"markdown","d835d429":"markdown","fc9c4b05":"markdown"},"source":{"dd793552":"from sklearn.datasets import make_classification","c32977aa":"X, Y = make_classification(n_samples=1000, n_classes=2, n_features=5, n_redundant=0, random_state=1)","1059d1bc":"X.shape","07167834":"Y.shape","62026288":"from sklearn.model_selection import train_test_split","a8f5d701":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)","33eb3f22":"X_train.shape, Y_train.shape","623ad2a5":"X_test.shape, Y_test.shape","236d74dc":"import pandas as pd\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import SGDClassifier","178997cc":"names = [\"Nearest_Neighbors\", \"Linear_SVM\", \"Polynomial_SVM\", \"RBF_SVM\", \"Gaussian_Process\",\n         \"Gradient_Boosting\", \"Decision_Tree\", \"Extra_Trees\", \"Random_Forest\", \"Neural_Net\", \"AdaBoost\",\n         \"Naive_Bayes\", \"QDA\", \"SGD\"]\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"linear\", C=0.025),\n    SVC(kernel=\"poly\", degree=3, C=0.025),\n    SVC(kernel=\"rbf\", C=1, gamma=2),\n    GaussianProcessClassifier(1.0 * RBF(1.0)),\n    GradientBoostingClassifier(n_estimators=100, learning_rate=1.0),\n    DecisionTreeClassifier(max_depth=5),\n    ExtraTreesClassifier(n_estimators=10, min_samples_split=2),\n    RandomForestClassifier(max_depth=5, n_estimators=100),\n    MLPClassifier(alpha=1, max_iter=1000),\n    AdaBoostClassifier(n_estimators=100),\n    GaussianNB(),\n    QuadraticDiscriminantAnalysis(),\n    SGDClassifier(loss=\"hinge\", penalty=\"l2\")]","4cdb6be1":"scores = []\nfor name, clf in zip(names, classifiers):\n    clf.fit(X_train, Y_train)\n    score = clf.score(X_test, Y_test)\n    scores.append(score)","7cd98de4":"scores","eca9937d":"import pandas as pd\nimport seaborn as sns","8bce0d4b":"df = pd.DataFrame()\ndf['name'] = names\ndf['score'] = scores\ndf","54ae41ff":"#https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html\n\ncm = sns.light_palette(\"green\", as_cmap=True)\ns = df.style.background_gradient(cmap=cm)\ns","81feca98":"sns.set(style=\"whitegrid\")\nax = sns.barplot(y=\"name\", x=\"score\", data=df)","4abd18b3":"### 1.1. Import library","9d75e1cf":"### 2.3. Let's examine the data dimension","76f2f4b2":"### 3.1. Import modules","482456ff":"### 2.2. Data split","1bd17dd0":"### 3.2. Defining learning classifiers","a28dc353":"### 3.3. Build Model, Apply Model on Test Data & Record Accuracy Scores","83a000f2":"### 1.2. Generate the dataset","03d19dd7":"### 2.1. Import library","59d26042":"# Comparing Classifiers for Building Classification Models\n\n\n\nIn this Jupyter notebook, we will be comparing the performance of different classifiers for building classification models.","1caa1f91":"## 1. Make synthetic dataset","b3d932e8":"### 4.4. Bar plot of model performance","3a23112f":"### 1.3. Let's examine the data dimension","e353036b":"## 3. Build Classification Models\n\nModified from: https:\/\/scikit-learn.org\/stable\/auto_examples\/classification\/plot_classifier_comparison.html","40822756":"## 4. Analysis of Model Performance","d1724d92":"---","001f2590":"### 4.3. Adding colors to the data frame","a4673f8b":"### 4.2. Create data frame of *model performance*","d835d429":"### 4.1. Import library","fc9c4b05":"## 2. Data split (80\/20 ratio)"}}