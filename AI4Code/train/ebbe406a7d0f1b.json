{"cell_type":{"c9a71aa0":"code","9fa71dff":"code","20718680":"code","9ab412f9":"code","1b02ff26":"code","9a50e139":"code","3814088d":"code","251c7441":"code","f5c39fc9":"code","9c5b5442":"code","7558a3de":"code","719f364c":"code","14de4968":"code","52647273":"code","7d14a5bd":"markdown","3021a506":"markdown","0e2b246b":"markdown","a1d27742":"markdown","22dbea50":"markdown","c85f8a84":"markdown","f9c3b24d":"markdown","b449a09c":"markdown","2766fa50":"markdown","53fd7f87":"markdown"},"source":{"c9a71aa0":"import numpy as np\nimport tensorflow as tf\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom scipy.stats.mstats import gmean ","9fa71dff":"# N = length of last name = 8\n# S = (8 % 5) + 1 = 4\n\nN_SAMPLES = 10000\nN_TEST = 1000\n\n# Lengths up to S + 5\nMAX_TIMESTEPS = 9\nMASK_VALUE = 1\n\ntrain_X = np.random.uniform(size=(N_SAMPLES, MAX_TIMESTEPS, 1))\ntrain_L = np.random.randint(2, MAX_TIMESTEPS, N_SAMPLES)\n\ntest_X = np.random.uniform(size=(N_TEST, MAX_TIMESTEPS, 1))\ntest_L = np.random.randint(2, MAX_TIMESTEPS, N_TEST)","20718680":"for i in range(N_SAMPLES):\n    train_X[i, train_L[i]:] = MASK_VALUE","9ab412f9":"for i in range(N_TEST):\n    test_X[i, test_L[i]:] = MASK_VALUE","1b02ff26":"train_y = gmean(train_X, axis=1)\ntest_y = gmean(test_X, axis=1)","9a50e139":"input_ = tf.keras.Input(shape=(None, 1))\nmasked = tf.keras.layers.Masking(MASK_VALUE)(input_)\nlstm1 = tf.keras.layers.LSTM(32, return_sequences=True)(masked)\nlstm2 = tf.keras.layers.LSTM(32)(lstm1)\noutput = tf.keras.layers.Dense(1)(lstm2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","3814088d":"model.compile('adam', 'mse')","251c7441":"hist = model.fit(train_X, train_y, epochs=8)","f5c39fc9":"prediction = model.predict(test_X)","9c5b5442":"prediction[:8]","7558a3de":"test_y[:8]","719f364c":"mean_squared_error(test_y, prediction)","14de4968":"mean_absolute_error(test_y, prediction)","52647273":"np.percentile(test_y, np.arange(0, 100, 10)) ","7d14a5bd":"### Compile the model by providing the optimization algorithm and the loss function","3021a506":"# Recurrent Network\n\nThis notebook shows how to create a recurrent network","0e2b246b":"### Mean absolute error","a1d27742":"### Mean squared error","22dbea50":"### Decile error","c85f8a84":"### Train the model for 8 epochs","f9c3b24d":"### View the predictions on the test set","b449a09c":"### Define the connections of the nodes in the network and verify the model\n\nThe ```Masking``` layer removes the numbers whose values are equal to 1. This allows us to tell the network that the data lengths are different.\n\nThe ```return_sequence``` flag defines if the LSTM should return only the last or the full sequence.","2766fa50":"### Import all the needed modules","53fd7f87":"### Generate random values and calculate the label using the problem\n\nThe model shold be able to learn how to calculate the geometric mean of a sequence.\n\nTo define data with different lengths, we set the unused parts of the data as 1."}}