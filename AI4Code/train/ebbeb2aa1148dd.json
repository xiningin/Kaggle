{"cell_type":{"59e471f4":"code","4880fe27":"code","fbc83991":"code","7786fd24":"code","ba483e68":"code","cf9d79ae":"code","9560b9a5":"code","b2ef1f8c":"code","d8e786ac":"code","db6f79ee":"code","d4090c0c":"code","8fea92ba":"code","274fc75c":"code","a7332364":"code","18065f9c":"code","c593aec2":"code","b9b9dbf5":"code","c12e51f4":"code","77f70c02":"code","6e50ea8c":"code","10b7ce8b":"code","e29855e5":"code","04733499":"code","e39e9ce2":"code","358e3bbb":"markdown","50392376":"markdown","d96dc5c6":"markdown","62aef77b":"markdown","d23e61ea":"markdown","6a331155":"markdown","9aff5551":"markdown"},"source":{"59e471f4":"import numpy as np\nimport pandas as pd\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\n\nimport bisect\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","4880fe27":"df = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","fbc83991":"df.info()","7786fd24":"ax = sns.countplot(df.gender[(df[\"Churn\"] == 'No')], color='Red')\nax = sns.countplot(df.gender[(df[\"Churn\"] == 'Yes')], color='Blue', ax =ax)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')","ba483e68":"ax = sns.countplot(df.tenure[:3521][(df[\"Churn\"] == 'No')], color='Red')\nax = sns.countplot(df.tenure[3522:][(df[\"Churn\"] == 'Yes')], color='Blue', ax =ax)\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')","cf9d79ae":"services = ['PhoneService','MultipleLines','InternetService','OnlineSecurity',\n           'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\nfig, axes = plt.subplots(nrows = 3,ncols = 3,figsize = (15,12))\nfor i, item in enumerate(services):\n    if i < 3:\n        ax = df[item].value_counts().plot(kind = 'bar',ax=axes[i,0],rot = 0)\n        \n    elif i >=3 and i < 6:\n        ax = df[item].value_counts().plot(kind = 'bar',ax=axes[i-3,1],rot = 0)\n        \n    elif i < 9:\n        ax = df[item].value_counts().plot(kind = 'bar',ax=axes[i-6,2],rot = 0)\n    ax.set_title(item)","9560b9a5":"churn = df[df['Churn'] == 'Yes']\nnot_churn = df[df['Churn'] == 'No']","b2ef1f8c":"churn['cat'] = 'churn'\nnot_churn['cat'] = 'not churn'\ndf_combined = pd.concat([churn, not_churn])\n\nfig, ((ax1,ax2, ax3), (ax4,ax5, ax6), (ax7,ax8, ax9)) = plt.subplots(nrows=3, ncols=3)\nfig.set_size_inches(15,12)\nplt.xticks(rotation=30, ha='right')\n\nsns.countplot(x=\"OnlineSecurity\", hue='cat', data=df_combined, ax=ax1)\nsns.countplot(x=\"PaperlessBilling\", hue='cat', data=df_combined, ax=ax2)\nsns.countplot(x=\"InternetService\", hue='cat', data=df_combined, ax=ax3)\nsns.countplot(x=\"StreamingMovies\", hue='cat', data=df_combined, ax=ax4)\nsns.countplot(x=\"OnlineBackup\", hue='cat', data=df_combined, ax=ax5)\nsns.countplot(x=\"DeviceProtection\", hue='cat', data=df_combined, ax=ax6)\nsns.countplot(x=\"TechSupport\", hue='cat', data=df_combined, ax=ax7)\nsns.countplot(x=\"StreamingTV\", hue='cat', data=df_combined, ax=ax8)\nsns.countplot(x=\"PaymentMethod\", hue='cat', data=df_combined, ax=ax9)\n\nplt.show()","d8e786ac":"charge = df.sort_values(by=['MonthlyCharges'])\nlow_charge = charge[:2347]\nmedian_charge = charge[2347:4694]\nhigh_charge = charge[4694:]","db6f79ee":"tenure = df.sort_values(by=['tenure'])\nlow_tenure = tenure[:3521]\nhigh_tenure = tenure[3522:]","d4090c0c":"low_tenure['cat'] = 'low tenure'\nhigh_tenure['cat'] = 'high tenure'\n\ndf_combined = pd.concat([low_tenure, high_tenure])\n\nfig, ((ax1,ax2, ax3), (ax4,ax5, ax6), (ax7,ax8, ax9)) = plt.subplots(nrows=3, ncols=3)\nfig.set_size_inches(15,12)\n\nsns.countplot(x=\"Contract\", hue='cat', data=df_combined, ax=ax1)\nsns.countplot(x=\"MultipleLines\", hue='cat', data=df_combined, ax=ax2)\nsns.countplot(x=\"OnlineSecurity\", hue='cat', data=df_combined, ax=ax3)\nsns.countplot(x=\"StreamingMovies\", hue='cat', data=df_combined, ax=ax4)\nsns.countplot(x=\"OnlineBackup\", hue='cat', data=df_combined, ax=ax5)\nsns.countplot(x=\"DeviceProtection\", hue='cat', data=df_combined, ax=ax6)\nsns.countplot(x=\"TechSupport\", hue='cat', data=df_combined, ax=ax7)\nsns.countplot(x=\"StreamingTV\", hue='cat', data=df_combined, ax=ax8)\nsns.countplot(x=\"PaymentMethod\", hue='cat', data=df_combined, ax=ax9)\nplt.xticks(rotation=30, ha='right')\n\nplt.show()","8fea92ba":"df['TotalCharges'] = df['TotalCharges'].replace(\" \", 0).astype('float32')","274fc75c":"def kdeplot(feature):\n    plt.figure(figsize=(9, 4))\n    plt.title(\"KDE for {}\".format(feature))\n    ax0 = sns.kdeplot(df[df['Churn'] == 'No'][feature].dropna(), color= 'navy', label= 'Churn: No')\n    ax1 = sns.kdeplot(df[df['Churn'] == 'Yes'][feature].dropna(), color= 'orange', label= 'Churn: Yes')\nkdeplot('tenure')\nkdeplot('MonthlyCharges')\nkdeplot('TotalCharges')\n","a7332364":"g = sns.PairGrid(df, y_vars=[\"tenure\"], x_vars=[\"MonthlyCharges\", \"TotalCharges\"], height=4.5, hue=\"Churn\", aspect=1.1)\nax = g.map(plt.scatter, alpha=0.6)","18065f9c":"df2 = df.iloc[:,1:]\ndf2['Churn'].replace(to_replace='Yes', value=1, inplace=True)\ndf2['Churn'].replace(to_replace='No',  value=0, inplace=True)\ndf_dummies = pd.get_dummies(df2)","c593aec2":"sns.scatterplot(x=df.MonthlyCharges, y = df.TotalCharges)","b9b9dbf5":"ax = sns.kdeplot(df.MonthlyCharges[(df[\"Churn\"] == 'No') ], color=\"Red\")\nax = sns.kdeplot(df.MonthlyCharges[(df[\"Churn\"] == 'Yes') ], color=\"Blue\")\nax.legend([\"Not Churn\",\"Churn\"],loc='upper right')\nax.set_ylabel('Density')\nax.set_xlabel('Monthly Charges')\nax.set_title('Distribution of monthly charges by churn')","c12e51f4":"y = df_dummies['Churn'].values\nX = df_dummies.drop(columns = ['Churn'])\n\n# Scaling all the variables to a range of 0 to 1\nfrom sklearn.preprocessing import MinMaxScaler\nfeatures = X.columns.values\nscaler = MinMaxScaler(feature_range = (0,1))\nscaler.fit(X)\nX = pd.DataFrame(scaler.transform(X))\nX.columns = features","77f70c02":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","6e50ea8c":"model = LogisticRegression()\nresult = model.fit(X_train, y_train)","10b7ce8b":"prediction_test = model.predict(X_test)\n# Print the prediction accuracy\nprint (metrics.accuracy_score(y_test, prediction_test))","e29855e5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\nmodel_rf = RandomForestClassifier(n_estimators=1000 , oob_score = True, n_jobs = -1,\n                                  random_state =50, max_features = \"auto\",\n                                  max_leaf_nodes = 30)\nmodel_rf.fit(X_train, y_train)\n\n# Make predictions\nprediction_test = model_rf.predict(X_test)\nprint (metrics.accuracy_score(y_test, prediction_test))","04733499":"model = AdaBoostClassifier()\nmodel.fit(X_train,y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","e39e9ce2":"model = XGBClassifier()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","358e3bbb":"### AdaBoostClassifier","50392376":"# Build a model","d96dc5c6":"### RandomForestClassifier","62aef77b":"### LogisticRegression","d23e61ea":"### XGBClassifier","6a331155":"I referred to other people's wisdom thank you, guys!!","9aff5551":"# EDA"}}