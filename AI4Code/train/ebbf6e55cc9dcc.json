{"cell_type":{"80a654dc":"code","96017e57":"code","f8e65de7":"code","fc30e901":"code","df64ed11":"code","720117e5":"code","2fc9633d":"code","203d2f72":"code","d8d259ba":"code","c761e430":"code","804984d5":"code","189d860d":"code","3709e192":"code","3c45172f":"code","b6da3fa8":"code","e21674eb":"code","61d4a510":"code","31d66fcf":"code","3d23b835":"code","2ee49fc7":"code","b64afb55":"code","464d1fe7":"code","e2101fcb":"code","bbfa138b":"code","ca317029":"code","e7bfc15f":"code","996e38a2":"code","e79aaf20":"code","0e5a273e":"code","542f5c45":"markdown","b5909bc0":"markdown","757af447":"markdown","15db8b23":"markdown","c1eee0a9":"markdown","b36e436e":"markdown","adb81383":"markdown"},"source":{"80a654dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96017e57":"df = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')","f8e65de7":"df.head()","fc30e901":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","df64ed11":"df.describe()","720117e5":"df.info()","2fc9633d":"df.drop('Serial No.', axis=1, inplace=True)","203d2f72":"df.hist(figsize = (20,20))\nplt.show()","d8d259ba":"sns.jointplot(x='CGPA', y='GRE Score', data=df, kind='scatter')","c761e430":"df.columns","804984d5":"sns.jointplot(x='CGPA', y='Chance of Admit ', data=df, kind='scatter')","189d860d":"sns.jointplot(x='CGPA', y='TOEFL Score', data=df, kind='scatter')","3709e192":"sns.jointplot(y='Chance of Admit ', x='TOEFL Score', data=df, kind='scatter')","3c45172f":"sns.pairplot(data=df,vars=['SOP', 'LOR ','Research', 'Chance of Admit '])\nplt.show()","b6da3fa8":"from sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, GridSearchCV","e21674eb":"from sklearn.metrics import mean_squared_error","61d4a510":"X = df.drop('Chance of Admit ', axis=1)\ny = df['Chance of Admit ']","31d66fcf":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","3d23b835":"lin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_test)\n\nprint('Error', np.sqrt(mean_squared_error(y_test, y_pred)))","2ee49fc7":"print(lin_reg.score(X_test, y_test))\nprint(r2_score(y_test, y_pred))","b64afb55":"coef = pd.Series(lin_reg.coef_, X.columns).sort_values()\ncoef.plot(kind='bar', title =  'Model Coeff\\'s')","464d1fe7":"from sklearn.metrics import mean_squared_error, r2_score","e2101fcb":"ridge = Ridge(alpha=0.05, normalize=True)\nridge.fit(X_train, y_train)\n\ny_pred = ridge.predict(X_test)\n\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\n\nprint ('RMSE is', rmse,'\\nR2 error is', r2)","bbfa138b":"coefridge = pd.Series(ridge.coef_, X.columns).sort_values()\n\ncoefridge.plot(kind='bar', title =  'Model Coeff\\'s')\nplt.show()","ca317029":"rf1 = RandomForestRegressor()\n\nn_estimators = [200, 300,250]\nmax_depth = [4,5,6,7]\nmin_samples_split = [3,4,2]\n\nhyperF = dict(n_estimators = n_estimators, max_depth = max_depth,  \n              min_samples_split = min_samples_split)\n\ngridF = GridSearchCV(rf1, hyperF, cv = 3, verbose = 1, \n                      n_jobs = -1)\nbestF = gridF.fit(X_train, y_train)","e7bfc15f":"print(\"Best: %f using %s\" % (bestF.best_score_, bestF.best_params_))","996e38a2":"rf_best = RandomForestRegressor(max_depth= 5, min_samples_split= 2, n_estimators= 250)\nrf_best.fit(X_train, y_train)\ny_pred = rf_best.predict(X_test)","e79aaf20":"print('Error', np.sqrt(mean_squared_error(y_test, y_pred)))","0e5a273e":"importance = rf_best.feature_importances_\nindices = np.argsort(importance)[::-1]\nfeature_names = X.columns # e.g. ['A', 'B', 'C', 'D', 'E']\n\nf, ax = plt.subplots(figsize=(11, 9))\nplt.title(\"Feature ranking\", fontsize = 20)\nplt.bar(range(X.shape[1]), importance[indices],\n    color=\"b\", \n    align=\"center\")\nplt.xticks(range(X.shape[1]), feature_names)\nplt.xlim([-1, X.shape[1]])\nplt.ylabel(\"importance\", fontsize = 18)\nplt.xlabel(\"index of the feature\", fontsize = 18)","542f5c45":"AS expected CGPA explains most of the relationship between CGPA+GPA+Toefl scores","b5909bc0":"**Suggested Reading : https:\/\/datascience.stackexchange.com\/questions\/12148\/feature-importance-via-random-forest-and-linear-regression-are-different#:~:text=The%20variables%20with%20highest%20difference,compared%20to%20random%20forest%20model.&text=If%20it%20does%2C%20then%20the,process%20might%20be%20non%2Dlinear.**","757af447":"Clear trend for CGPA and GRE scores","15db8b23":"A simple linear regression gave us an accuracy of 82.6%","c1eee0a9":"We can see a direct trend between CGPA scores and Chances of admit","b36e436e":"We can clearly see that the feature importances\/weights for random forests differ greatly from the linear regression.\nThis is due to:\n* Feature importance calculations for Linear Regression does not consider correaltion among variables. A better approach might be to calculate stepwise how much of the R2 score is improved by the addition of variables.\n* But for Random Forests each variable is permuted among all trees and the difference in out of sample error of before and after permutation is calculated. The variables with highest difference are considered most important, and ones with lower values are less important.\n* The method by which the model is fit on the training data is very different for a linear regression model as compared to random forest model. ","adb81383":"Let's try Random Forests"}}