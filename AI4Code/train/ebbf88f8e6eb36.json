{"cell_type":{"bc41c2f0":"code","b445ef70":"code","9c595596":"code","171eeac9":"code","3043887f":"code","144316c9":"code","239888d0":"code","90d40b4d":"code","49166107":"code","81ef63d9":"code","e2b88161":"code","a638c0ed":"code","0bd06a13":"code","2da8a4bd":"code","cbc44fde":"code","aee484f9":"code","0881f9e4":"code","44f28fc5":"code","935fbc14":"code","183ac05b":"code","54c4aa0a":"code","cc32bd01":"code","56d7217b":"code","214d2e82":"code","4b8aaad8":"code","acb60acb":"code","aeff6bc2":"code","7456a87b":"markdown"},"source":{"bc41c2f0":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b445ef70":"import numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Using Tensorflow Keras instead of the original Keras\n\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nimport seaborn as sns\nimport warnings\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense,Conv2D,Flatten,MaxPooling2D,Dropout,BatchNormalization\nimport keras\n\nimport numpy as np\nimport pandas as pd\nimport warnings \nimport tensorflow as tf # import tensor flow \nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport random\nfrom keras.utils.np_utils import to_categorical \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import ReduceLROnPlateau","9c595596":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubs =  pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","171eeac9":"train.columns","3043887f":"train.shape","144316c9":"x_train = train.drop('label',axis=1)\ny_train = train['label']","239888d0":"x_train.head()","90d40b4d":"y_train","49166107":"x_train.shape,y_train.shape","81ef63d9":"test.shape","e2b88161":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>0.998):\n            print(\"\\nReached 99%accuracy so cancelling training!\")\n            self.model.stop_training = True","a638c0ed":"x_train = x_train.astype('float32')\ntest = test.astype('float32')\nx_train = x_train\/225.0\ntest = test\/225.0\n\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0bd06a13":"print(x_train.shape),print(test.shape)","2da8a4bd":"#model = tf.keras.models.Sequential([\n ##  tf.keras.layers.MaxPooling2D(2,2),\n   # tf.keras.layers.Flatten(),    \n    #tf.keras.layers.Dense(10,activation='softmax')\n#])","cbc44fde":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()\n","aee484f9":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","0881f9e4":"from keras.optimizers import Adam, RMSprop\nmodel.compile(optimizer = optimizer, loss='sparse_categorical_crossentropy',\n              metrics=['accuracy']) ","44f28fc5":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0001)","935fbc14":"from keras.utils import plot_model\nplot_model(model, to_file='classifier.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"classifier.png\")","183ac05b":"epochs = 32\nbatch_size = 16","54c4aa0a":"model.fit(x_train,y_train,batch_size = batch_size,epochs=epochs, verbose = 2, steps_per_epoch=x_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","cc32bd01":"result = model.predict(test)","56d7217b":"y_pred = np.argmax(result, axis=1)\ny_pred","214d2e82":"len(test)","4b8aaad8":"y_pred_df = pd.DataFrame({'ImageID': range(1, len(test)+1), 'Label': y_pred})","acb60acb":"y_pred_df","aeff6bc2":"y_pred_df.to_csv('\/kaggle\/working\/Predictions.csv', index=False)","7456a87b":"model = Sequential()\n\nmodel.add(Conv2D(64, kernel_size = 3, activation = \"relu\", padding=\"same\", input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size = 5, strides=2, activation = \"relu\", padding=\"same\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size = 3, activation = \"relu\"))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(64, kernel_size = 5, strides=2, activation = \"relu\", padding=\"same\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64, kernel_size = 4, activation = \"relu\"))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(units = 10, activation = \"softmax\"))"}}