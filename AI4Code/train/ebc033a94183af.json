{"cell_type":{"447a9b15":"code","c3af6c81":"code","822abde0":"code","a176e31d":"code","03503a1a":"code","b621c639":"code","175d036a":"code","88fb94e0":"code","ef2c6e23":"code","e1d4247a":"code","b0cae9d5":"code","b72fecb6":"code","736ed58f":"code","03debd57":"code","fd231067":"code","18864020":"code","0aaa5421":"code","3d9f88c6":"code","0f02a23d":"code","3ea2c744":"code","83d521f0":"code","d2a430a0":"code","bf488e22":"code","44230531":"code","bcbabdef":"code","22ae51b1":"code","73c2d122":"code","a53fa049":"code","9e440e91":"code","7fc886a7":"code","55d98e04":"code","f6d123f4":"code","c5ce67bd":"code","a0082ba4":"code","a6b8fb72":"code","6a4e766d":"code","9008270f":"code","8df492d3":"code","dd3ff451":"code","5868bf56":"code","4654c465":"code","bf3900a8":"code","a8a5fec1":"code","936ff3a3":"markdown","4455eccf":"markdown","3dd2e391":"markdown","a034f2e1":"markdown","8b4d8b82":"markdown","33ec4f6b":"markdown","d5e95d4b":"markdown","966a07ee":"markdown","d44c560e":"markdown","5b443102":"markdown","58d5326e":"markdown","0798a084":"markdown","7d16c89f":"markdown","9361f8d0":"markdown","106797fe":"markdown","a8e50d1c":"markdown","a2fc48a3":"markdown","21704de0":"markdown","dfad1d60":"markdown","b512cb7f":"markdown"},"source":{"447a9b15":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV\nfrom lightgbm import LGBMClassifier\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom collections import Counter\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom tqdm import tqdm\n","c3af6c81":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntrain.head()","822abde0":"#to check if there are any missing values in the dataset\ntrain.isnull().sum()","a176e31d":"train.info()","03503a1a":"def metric(model, target):\n    return roc_auc_score(target,model.predict_proba(X_valid)[:,1])\n\n\ndef split(df, y,number = 30000):\n    df = df.sample(number)\n    return df, y[df.index]\n\ndef feat_imp(df, model):\n    return pd.DataFrame({'cols': df.columns, 'Imp': model.feature_importances_}).sort_values('Imp', ascending = False)\n","b621c639":"train['Response'].plot(kind = 'hist')","175d036a":"train.columns","88fb94e0":"cols = [ 'Age', 'Annual_Premium',\n       'Policy_Sales_Channel', 'Vintage']\n\n\nfor i, j in enumerate(cols):\n \n    sns.distplot(train[j])\n    plt.show()","ef2c6e23":"sns.countplot(train['Gender'])","e1d4247a":"df_g = train.groupby(['Gender', 'Response']).agg({'Response': 'count'}).unstack()\nprint(df_g)\ndf_g.plot(kind = 'bar', stacked = True)\nplt.show()","b0cae9d5":"plt.rcParams['figure.figsize'] = 12, 8\nsns.boxplot(train['Gender'], train['Annual_Premium'], hue = train['Response'])","b72fecb6":"sns.countplot(train['Vehicle_Age'])","736ed58f":"df2 = train.groupby(['Vehicle_Age', 'Response']).agg({'Response': 'count'}).unstack()\nprint(df2)\ndf2.plot(kind = 'bar', stacked =True)\nplt.show()","03debd57":"sns.countplot(train['Vehicle_Damage'])","fd231067":"df3 = train.groupby(['Vehicle_Damage', 'Response']).agg({'Response': 'count'}).unstack()\nprint(df3)\ndf3.plot(kind = 'bar', stacked =True)\nplt.show()","18864020":"train['Region_Code'].nunique()","0aaa5421":"plt.rcParams['figure.figsize'] = 18, 8\ndf_rc = train.groupby(['Region_Code', 'Response']).agg({'Response': 'count'}).unstack()\ndf_rc.plot(kind = 'bar', stacked = True)\nplt.show()","3d9f88c6":"Counter(train['Driving_License'])","0f02a23d":"Counter(train['Previously_Insured'])","3ea2c744":"df_pi = train.groupby(['Previously_Insured', 'Response']).agg({'Response': \"count\"}).unstack()\ndf_pi.plot(kind = 'bar', stacked = True)\nplt.show()","83d521f0":"test = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ntest.head(2)","d2a430a0":"df_full = pd.concat([train.iloc[:,:-1], test])\ndf_full.shape","bf488e22":"df_full['Age_bin_round'] = np.array(np.floor(\n                              np.array(df_full['Age']) \/ 5.))\ndf_full[[ 'Age', 'Age_bin_round']].iloc[1071:1076]\n\ndf_full[\"Annual_Premium_log\"] = np.log((df_full['Annual_Premium']))\ndf_full[['Annual_Premium', 'Annual_Premium_log']]","44230531":"df_full_copy = df_full.copy()","bcbabdef":"Lb = LabelEncoder()\nfor i in df_full.columns:\n    if df_full[i].dtype == 'object':\n        df_full[i] = Lb.fit_transform(df_full[i])","22ae51b1":"df_full = df_full.drop('id', axis =1)\ndf_full.head()","73c2d122":"X = df_full[:train.shape[0]]\ny = train['Response']\n\nX, y = split(X, y, 40000)\nX.shape, y.shape\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 42)","a53fa049":"%%time\nRf = RandomForestClassifier(n_estimators=400, min_samples_leaf=25, max_features=0.5, max_depth = 10, random_state=42)\nmodel_Rf = Rf.fit(X_train, y_train)\nprint(metric(model_Rf, y_valid))","9e440e91":"feat10 = feat_imp(X_train, model_Rf)\nfeat10","7fc886a7":"to_keep = feat10[feat10['Imp'] > 0.03].cols\nlen(to_keep)","55d98e04":"df_to_keep = X[to_keep]\ndf_to_keep.shape","f6d123f4":"X_train, X_valid, y_train, y_valid = train_test_split(df_to_keep, y, test_size = 0.2, random_state = 42)","c5ce67bd":"%%time\nRf = RandomForestClassifier(n_estimators=400, min_samples_leaf=25, max_features=0.5, max_depth = 10, random_state=42)\nmodel_Rf = Rf.fit(X_train, y_train)\nprint(metric(model_Rf, y_valid))","a0082ba4":"df_full_copy.info()","a6b8fb72":"df_full_copy['Gender'] = df_full_copy['Gender'].astype('category')\ndf_full_copy['Driving_License'] = df_full_copy['Driving_License'].astype('category')\ndf_full_copy['Previously_Insured'] = df_full_copy['Previously_Insured'].astype('category')\ndf_full_copy['Vehicle_Age'] = df_full_copy['Vehicle_Age'].astype('category')\ndf_full_copy['Vehicle_Damage'] = df_full_copy['Vehicle_Damage'].astype('category')\ndf_full_copy['Region_Code'] = df_full_copy['Region_Code'].astype('int').astype('category')\ndf_full_copy['Policy_Sales_Channel'] = df_full_copy['Policy_Sales_Channel'].astype('int').astype('category')","6a4e766d":"cat_features = [ 'Gender', 'Region_Code', 'Vehicle_Age', 'Driving_License', \n                'Previously_Insured',  'Vehicle_Damage', 'Policy_Sales_Channel'\n               ]\n","9008270f":"df_full_copy = df_full_copy.drop('id', axis = 1)","8df492d3":"X = df_full_copy[:train.shape[0]]\ny = train['Response']\n\n\n#X, y = split(X, y , 40000)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 42)","dd3ff451":"clf = CatBoostClassifier(\n    iterations= 600, \n    learning_rate=0.08, \n    random_seed = 78,\n    custom_loss=['AUC'],\n    od_type = \"Iter\",\n    depth= 11,\n    #l2_leaf_reg= 3,\n    bootstrap_type = 'Bernoulli',\n)\n\nclf.fit(X_train,y_train, \n        cat_features = cat_features, \n        verbose=False,\n        eval_set = (X_valid, y_valid),\n        plot = True,\n        \n)\n\nprint('CatBoost model is fitted: ' + str(clf.is_fitted()))\nprint('CatBoost model parameters:')\nprint(clf.get_params())","5868bf56":"print(metric(clf, y_valid))","4654c465":"import shap\n\n# DF, based on which importance is checked\nX_importance = X_valid\n\n# Explain model predictions using shap library:\nexplainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(X_importance)","bf3900a8":"shap.summary_plot(shap_values, X_importance)","a8a5fec1":"sns.heatmap(df_full_copy.corr(), annot=True)","936ff3a3":"# SHAP\n\nThis is a very imporatnt and exciting package which actually helps us in knowing the insides if the model and which variable affects the dependent variable in what manner, I always use SHAP to check for my feature importance and dont only reply on the feature imp from the models","4455eccf":"# Catboost","3dd2e391":"#  Helper Functions","a034f2e1":"As expected the if there was no vehicle damage, the Response has been 0 for majority of that class and most of the Response 1 is when there have been some vehicle damage in the past.","8b4d8b82":"# Data Exploration","33ec4f6b":"# Gender","d5e95d4b":"This gives a really good score, what we can do is just use a weighted average of both the models and submit it to the leaderboard, I am sure it would cross that .8585 mark","966a07ee":"# Vehicle Age","d44c560e":"# Driving License","5b443102":"it is always a useful thing to check your explainability using SHAP. I would suggest try different Boosting techniques and try to improve your score. Most importantly please use a Stratified CV to know your actual CV and dont trust the leaderboard blindly. ","58d5326e":"Removing some features did not help, lets now move onto a Boosting technique and cheque how it performs.","0798a084":"This seems to be an interesting observation that, people with vehicle_age less than 1 year seem to be very less interested in the Insurance.","7d16c89f":"# Random Forest","9361f8d0":"# Vehicle Damage","106797fe":"# Feature Engineering and Model Building","a8e50d1c":"We get a score of .8556 without doing much, which I guess is a good starting point for Random Forest we can further improve this doing some parameter tuning and can further also use Boosting techniques. Next we will try to see the feature importance and check which are the important features.","a2fc48a3":"# Distributions","21704de0":"# Previously Insured","dfad1d60":"Here we can clearly see an imbalance in the Dependent variable, maybe in the further section we will treat this as an Imbalanced dataset problem","b512cb7f":"# RegionCode"}}