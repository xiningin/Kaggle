{"cell_type":{"19e47706":"code","111bc736":"code","eb8485dd":"code","ffb26586":"code","8fe64469":"code","0675828b":"code","d45ed822":"code","fee43664":"code","8fda8e71":"code","a59065e1":"code","9effc6dc":"code","43aea4c3":"code","b895dd15":"code","de8b8bee":"code","fb70f302":"code","ba983056":"code","effac38b":"code","f34516a8":"code","142652b9":"code","b8f6d79b":"code","11a1f8a5":"code","e1ffdac2":"code","0d26cb41":"code","4e048137":"code","f8845b9c":"code","a15ff69b":"code","cce1a80d":"code","1eacf99c":"code","9b9215a0":"markdown","ed62a6ab":"markdown","ae61b61f":"markdown","6acc8023":"markdown","116a6dd2":"markdown","6783a9b7":"markdown","d8412a85":"markdown","a44749bd":"markdown","927f8bf8":"markdown","8f01c7d4":"markdown","3e725cc1":"markdown","cd93a2ea":"markdown"},"source":{"19e47706":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","111bc736":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom pandas_profiling import ProfileReport","eb8485dd":"# Credits - https:\/\/towardsdatascience.com\/python-plotting-basics-simple-charts-with-matplotlib-seaborn-and-plotly-e36346952a3a\n\ncolor_palette_list = ['#009ACD', '#ADD8E6', '#63D1F4', '#0EBFE9',   \n                      '#C1F0F6', '#0099CC']\n\ndef plot_piechart(labels, percentages, title):\n    fig, ax = plt.subplots()\n    plt.rcParams['font.sans-serif'] = 'Arial'\n    plt.rcParams['font.family'] = 'Arial'\n    plt.rcParams['text.color'] = '#0a1df0'\n    plt.rcParams['axes.labelcolor']= '#0a1df0'\n    plt.rcParams['xtick.color'] = '#909090'\n    plt.rcParams['ytick.color'] = '#909090'\n    plt.rcParams['font.size']=12\n    \n    explode=(0.1,0)\n    ax.pie(percentages, explode=explode, labels=labels, \n           autopct='%1.0f%%', colors=color_palette_list[0:2],\n           shadow=False, startangle=0,   \n           pctdistance=1.2,labeldistance=1.4)\n    ax.axis('equal')\n    ax.set_title(title, fontsize=16)\n    ax.legend(frameon=False, bbox_to_anchor=(1.5,0.8))","ffb26586":"df_covid_list_list = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\ndf_covid_open_line_list = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")","8fe64469":"df_covid_list_list.info()","0675828b":"unnamed_columns = [c for c in df_covid_list_list.columns if c.startswith('Unnamed')]\ndf_covid_list_list.drop(unnamed_columns, axis=1, inplace=True)\ndf_covid_list_list.head()","d45ed822":"df_covid_list_list['death'].unique()","fee43664":"df_covid_list_list['recovered'].unique()","8fda8e71":"df_covid_list_list['death_flag'] = ['1' if v not in ['0', '1'] else v for v in df_covid_list_list['death'].values]\ndf_covid_list_list['recovered_flag'] = ['1' if v not in ['0', '1'] else v for v in df_covid_list_list['recovered'].values]","a59065e1":"def count_to_pie(input_series, title, alias=[]):\n    \"\"\"\n    function to plot pie chart for distinct value counts\n    :param input_series - value_counts() of a column\n    :param title - title of the output plot\n    :param alias - alias for the unique values to be mapped based on index\n    \"\"\"\n    _labels = []\n    _percentages = []\n    total = input_series.sum()\n    for i, r in input_series.items():\n        _labels.append(i)\n        _percentages.append(r\/total)\n    if alias and len(alias) == len(_labels):\n        _labels = alias\n    plot_piechart(_labels, _percentages, title)","9effc6dc":"count_to_pie(df_covid_list_list['death_flag'].value_counts(), title=\"Overall Death Percentage\", alias=[\"Alive\", \"Dead\"])","43aea4c3":"count_to_pie(df_covid_list_list['recovered_flag'].value_counts(), title=\"Overall Recovery Percentage\",\n             alias=[\"Not recovered\", \"Recovered\"])","b895dd15":"df_death = df_covid_list_list[df_covid_list_list['death_flag'] == '1']\ndf_recovered = df_covid_list_list[df_covid_list_list['recovered_flag'] == '1']","de8b8bee":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\ndf_death.age.fillna(int(df_death.age.mean()), inplace=True)\ndf_recovered.age.fillna(int(df_recovered.age.mean()), inplace=True)","fb70f302":"fig, ax = plt.subplots()\nsns.kdeplot(df_death.age, ax=ax, color=\"r\", label=\"Dead\", shade=True)\nsns.kdeplot(df_recovered.age, ax=ax, color=\"g\", label=\"Recovered\", shade=True)\nplt.show()","ba983056":"df_covid_list_list['symptom_onset'] = pd.to_datetime(df_covid_list_list['symptom_onset'], errors='ignore')\ndf_covid_list_list['alive_period'] = [\n    pd.to_datetime('02\/28\/2020') \n        if (r['death_flag'] == \"0\" and r['recovered_flag'] == \"0\") # when the patient is not recovered yet\n        else pd.to_datetime(r['death'], errors='ignore')  # when the patient is dead\n            if r['death_flag'] == \"1\"\n            else pd.to_datetime(r['recovered'], errors='ignore')\n    for i,r in df_covid_list_list.iterrows()\n]","effac38b":"df_covid_list_list['alive_period'] = [ \n    v if isinstance(v, pd._libs.tslibs.timestamps.Timestamp) else pd.to_datetime('01\/31\/2020') # dates recorded since 1st Feb\n    for v in df_covid_list_list['alive_period'].values\n]\ndf_covid_list_list['symptom_onset'] = [\n    v if isinstance(v, np.datetime64) else None for v in df_covid_list_list['symptom_onset'].values\n]","f34516a8":"df_covid_list_list['infection_period'] = df_covid_list_list['alive_period'] - df_covid_list_list['symptom_onset']\ndf_covid_list_list['infection_period'] = df_covid_list_list['infection_period'].dt.days\ndf_covid_list_list.infection_period.fillna(df_covid_list_list['infection_period'].mean(), inplace=True)","142652b9":"df_death_infc = df_covid_list_list[(df_covid_list_list['death_flag'] == '1') & (df_covid_list_list['infection_period'] > 0) ]\ndf_recovered_infc = df_covid_list_list[(df_covid_list_list['recovered_flag'] == '1') & (df_covid_list_list['infection_period'] > 0)]","b8f6d79b":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\ndf_death_infc.age.fillna(int(df_death_infc.age.mean()), inplace=True)\ndf_recovered_infc.age.fillna(int(df_recovered_infc.age.mean()), inplace=True)","11a1f8a5":"# code credits - https:\/\/becominghuman.ai\/introduction-to-timeseries-analysis-using-python-numpy-only-3a7c980231af\n\ndef moving_average(signal, period):\n    buffer = [np.nan] * period\n    for i in range(period,len(signal)):\n        buffer.append(signal[i-period:i].mean())\n    return buffer","e1ffdac2":"# Scaling the values of infection period and age in common range\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nage_scaled = MinMaxScaler().fit_transform(df_death_infc.age.values.reshape(-1, 1))\nage_scaled = age_scaled.reshape(1, -1)[0]\ndf_death_infc['age_scaled'] = age_scaled\n\ninfection_period_scaled = MinMaxScaler().fit_transform(df_death_infc.infection_period.values.reshape(-1, 1))\ninfection_period_scaled = infection_period_scaled.reshape(1, -1)[0]\ndf_death_infc['infection_period_scaled'] = infection_period_scaled","0d26cb41":"fig, ax = plt.subplots()\n\nax.set_title(\"Comparison of age and infection period of dead patients\")\n\ndf_death_infc['smoothen_infc_period'] = moving_average(df_death_infc.infection_period, 5)\n\nsns.lineplot(x=\"age\", y=\"infection_period\", data=df_death_infc, ax=ax)\nsns.lineplot(x=\"age\", y=\"smoothen_infc_period\", data=df_death_infc, ax=ax)\n\nplt.show()","4e048137":"fig, ax = plt.subplots()\n\nax.set_title(\"Comparison of age and infection period of recovered patients\")\n\ndf_recovered_infc['smoothen_infc_period'] = moving_average(df_recovered_infc.infection_period, 5)\n\nsns.lineplot(x=\"age\", y=\"infection_period\", data=df_recovered_infc, ax=ax)\nsns.lineplot(x=\"age\", y=\"smoothen_infc_period\", data=df_recovered_infc, ax=ax)\n\n\nplt.show()","f8845b9c":"import math","a15ff69b":"list_of_symptoms = df_covid_list_list['symptom'].unique()\n# before split and strip\nlist_of_symptoms[:5]","cce1a80d":"list_of_symptoms = [list(map(str.strip, v.split(\",\"))) for v in list_of_symptoms if isinstance(v, str)]","1eacf99c":"# after split and strip\nunique_symptoms = np.unique([i for v in list_of_symptoms for i in v])\n\ncommon_name_dict = {\n    'abdominal pain': 'abdominal pain',\n    'breathlessness': 'breathlessness',\n    'difficult in breathing': 'breathlessness',\n    'difficulty breathing': 'breathlessness',\n    'dyspnea': 'breathlessness',\n    'respiratory distress': 'breathlessness',\n    'shortness of breath': 'breathlessness',\n    'chest discomfort': 'chest pain',\n    'chest pain': 'chest pain',\n    'chill': 'chillness',\n    'chills': 'chillness',\n    'cold': 'cold',\n    'cough': 'cough',\n    'coughing': 'cough',\n    'dry cough': 'cough',\n    'mild cough': 'cough',\n    'cough with sputum': 'cough with sputum',\n    'sputum': 'cough with sputum',\n    'diarrhea': 'diarrhea',\n    'aching muscles': 'fatigue',\n    'fatigue': 'fatigue',\n    'malaise': 'fatigue',\n    'muscle aches': 'fatigue',\n    'muscle cramps': 'fatigue',\n    'muscle pain': 'fatigue',\n    'myalgia': 'fatigue',\n    'myalgias': 'fatigue',\n    'physical discomfort': 'fatigue',\n    'sore body': 'fatigue',\n    'tired': 'fatigue',\n    'feaver': 'fever',\n    'feve\\\\': 'fever',\n    'fever': 'fever',\n    'flu': 'fever',\n    'flu symptoms': 'fever',\n    'high fever': 'fever',\n    'mild fever': 'fever',\n    'headache': 'headache',\n    'heavy head': 'headache',\n    'joint pain': 'joint pain',\n    'loss of appetite': 'loss of appetite',\n    'nausea': 'nausea',\n    'vomiting': 'nausea',\n    'pneumonia': 'pneumonia',\n    'reflux': 'reflux',\n    'nasal discharge': 'running nose',\n    'runny nose': 'running nose',\n    'sneeze': 'sneeze',\n    'thirst': 'thirst',\n    'itchy throat': 'throat pain',\n    'sore throat': 'throat pain',\n    'throat discomfort': 'throat pain',\n    'throat pain': 'throat pain'\n}\n\n# replace the list of symptoms by the common name\ncn_list_of_symptoms = [\n    [common_name_dict.get(s, s) for s in l] # return same name if not found in common names\n    for l in list_of_symptoms\n]\n\nprint(f\"before: {list_of_symptoms[:5]}\")\nprint(\"-----------------------------------\")\nprint(f\"after: {cn_list_of_symptoms[:5]}\")","9b9215a0":"### Comparison of Infection period between dead and recovered patients of different age group","ed62a6ab":"## Sypmtoms Study","ae61b61f":"#### calculating alive period ","6acc8023":"#### drop unnamed columns","116a6dd2":"#### Step 1\n- to observe patterns on recovered and death patient I am creating a flag variable for death and recovered","6783a9b7":"### Infection sustained duration","d8412a85":"### Percentage of people recovered and dead 01\/20\/2020 till 02\/28\/2020","a44749bd":"## About COVID19_line_list_data.csv\n\n- Contains individual level information of \n    - patient gender and age\n    - observation on patient condition\n    - symptoms onsite date\n    - COVID confirmation date\n    - patient dead or alive\n    - first hospital visit date\n    - Symptoms","927f8bf8":"###  Distribution of age group on alive and dead","8f01c7d4":"#### mean imputing missing age values","3e725cc1":"### COVID LINE and OPEN LINE LIST","cd93a2ea":"### Data Cleaning and Preprocessing"}}