{"cell_type":{"0e82c855":"code","48568080":"code","412ae003":"code","906651fa":"code","a7d09eab":"code","57247a6d":"code","d6050795":"code","b498657e":"code","3ff87be3":"code","47c3a3fd":"code","fb32028d":"code","9e3b835d":"code","ed8a0281":"code","065a061c":"code","1bd3222c":"code","ac46598c":"code","5f5dde41":"code","abf1159c":"code","790f735d":"code","d3975c34":"code","d2354d7b":"code","0ba733af":"code","aaf2f14f":"code","d4f6b85c":"code","7f824639":"code","59e1eee1":"code","8cf8b417":"code","0ae2cf1a":"code","0702829b":"code","87a276ad":"code","63037943":"code","20b5b2cc":"code","a1a6f3c2":"code","48c5fd78":"code","68c7330c":"code","587e12f9":"code","fdf6842c":"code","584d2eef":"code","0c26b2e2":"code","8aaa601e":"code","19c06069":"code","9fde3b3f":"code","c002044c":"code","56d15b99":"code","8f432eb1":"code","e36a0ae7":"code","e27d192b":"code","59ba84a8":"code","a64d81bc":"code","ceaf0521":"code","14c07cda":"code","1c67dedb":"code","b6794b13":"code","4f2702b8":"code","40d71283":"code","c01c7da0":"code","cf67ba6e":"code","6d1d97b9":"code","5339dfc3":"code","2c2022fe":"code","ad8242c7":"code","1160abc5":"code","680890c5":"code","eb4bb71b":"code","5fe492ad":"code","29c798fe":"code","281c1191":"code","295f558d":"code","2035d6ca":"code","fe3f2396":"code","60c5f4d5":"code","4172405f":"code","72395b4b":"code","0b4efcf6":"code","5b3c5b61":"code","97bd595a":"code","dea3e71e":"code","4f0cde9e":"code","a9d4da2c":"code","30ea0acb":"code","9411abfc":"code","b7d07085":"code","d81353fe":"code","093382ed":"code","f79a6b59":"markdown","52857610":"markdown","f517dcf8":"markdown","7026964b":"markdown","022e6a50":"markdown","38016ec3":"markdown","da09a997":"markdown","081bf5b0":"markdown","9f2b6f39":"markdown","24f822a3":"markdown","6a10aa60":"markdown","acba30cd":"markdown","4badd426":"markdown","1fc7ad48":"markdown","19a9cd82":"markdown","97a86b24":"markdown","2373637c":"markdown","dffd42e3":"markdown"},"source":{"0e82c855":"#Importing the libraries for Data Manipulation and Visualization\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\n%matplotlib inline\nmatplotlib.style.use('fivethirtyeight')\n","48568080":"#Importing the libraries for data modelling and error metrics\nfrom sklearn import preprocessing\nlbl = preprocessing.LabelEncoder()\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import RandomizedSearchCV","412ae003":"#Importing the train and test dataset\ntrain=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","906651fa":"traindata=train.copy()\ntestdata=test.copy()","a7d09eab":"train.head()","57247a6d":"train.shape","d6050795":"train.info()","b498657e":"features_withna=[features for features in train.columns if train[features].isna().sum()>1]\nfor features in features_withna:\n    print(features,' has ' , train[features].isna().sum(), \"  Missing Values out of \", train.shape[0], \"\\n\")","3ff87be3":"#Removing the features with large number of missing values\ntrain.drop(['MiscFeature','Fence','PoolQC','Alley'], axis=1, inplace=True)","47c3a3fd":"features_withna.remove('MiscFeature')\nfeatures_withna.remove('Fence')\nfeatures_withna.remove('PoolQC')\nfeatures_withna.remove('Alley')","fb32028d":"train.columns.str.contains('Yr') |train.columns.str.contains('Year')","9e3b835d":"temporal_features=[features for features in train.columns if 'Yr' in features or 'Year' in features]\nnumeric_features=[features for features in train.columns if train[features].dtypes in ['int64', 'float64'] and features not in temporal_features ]\nobject_features=[features for features in train.columns if train[features].dtypes=='object']\n","ed8a0281":"numeric_features","065a061c":"object_features","1bd3222c":"temporal_features","ac46598c":"for features in object_features:\n    print(features ,' has ', train[features].nunique(), ' unique values\\n')","5f5dde41":"for features in features_withna:\n    if features in object_features:\n        train[features].fillna(train[features].mode()[0], inplace=True)\n    else:\n        train[features].fillna(train[features].median(), inplace=True)        ","abf1159c":"for features in features_withna:\n    print(features, train[features].isna().sum(), \"  Missing Values out of \", train.shape[0], \"\\n\")","790f735d":"test.head()","d3975c34":"test.shape","d2354d7b":"train.info()","0ba733af":"features_withnatest=[features for features in test.columns if test[features].isna().sum()>1]\nfor features in features_withnatest:\n    print(features, ' has ' , test[features].isna().sum(), \"  Missing Values out of \", test.shape[0], \"\\n\")","aaf2f14f":"#Removing the features with large number of missing values\ntest.drop(['MiscFeature','Fence','PoolQC','Alley'], axis=1, inplace=True)","d4f6b85c":"features_withnatest","7f824639":"features_withnatest.remove('MiscFeature')\nfeatures_withnatest.remove('Fence')\nfeatures_withnatest.remove('PoolQC')\nfeatures_withnatest.remove('Alley')","59e1eee1":"temporal_features_test=[features for features in test.columns if 'Yr' in features or 'Year' in features]\nnumeric_features_test=[features for features in test.columns if test[features].dtypes in ['int64', 'float64'] and features not in temporal_features ]\nobject_features_test=[features for features in test.columns if test[features].dtypes=='object']","8cf8b417":"for features in object_features_test:\n    print(features ,' has ', test[features].nunique(), 'unique values\\n')","0ae2cf1a":"for features in features_withnatest:\n    if features in object_features_test:\n        test[features].fillna(test[features].mode()[0], inplace=True)\n    else:\n        test[features].fillna(test[features].median(), inplace=True)    ","0702829b":"for features in features_withnatest:\n    print(features, ' has ' , test[features].isna().sum(), \"  Missing Values out of \", test.shape[0], \"\\n\")","87a276ad":"test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].mode()[0], inplace=True)","63037943":"test['BsmtFullBath'].fillna(test['BsmtFullBath'].mode()[0], inplace=True)","20b5b2cc":"test['Functional'].fillna(test['Functional'].mode()[0], inplace=True)","a1a6f3c2":"test['MSZoning'].fillna(test['MSZoning'].mode()[0], inplace=True)","48c5fd78":"test['Utilities'].fillna(test['Utilities'].mode()[0], inplace=True)","68c7330c":"train.head()","587e12f9":"## Lets Find the relationship between Categorical Features and Sale PRice\n\nfor feature in object_features:\n    sns.barplot(x=train[feature],y=train['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","fdf6842c":"## Lets Find the realtionship between Categorical Features and Sale Price\n\nfor feature in numeric_features:\n    plt.scatter(x=train[feature],y=train['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","584d2eef":"## Lets Find the realtionship between Temporal Features and Sale PRice\n\nfor feature in temporal_features:\n    sns.lineplot(x=train[feature],y=train['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","0c26b2e2":"## Lets Find the realtionship between Categorical Features and Sale Price\n\nfor feature in numeric_features:\n    sns.boxplot(y=train[feature])\n    plt.ylabel(feature)\n    plt.title(feature)\n    plt.show()","8aaa601e":"for feature in numeric_features:\n    if 0 in train[feature].unique():\n        pass\n    else:\n        train[feature]=np.log(train[feature])\n        train.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","19c06069":"temporal_features","9fde3b3f":"train['YearBuilt']=train['YrSold']-train['YearBuilt']","c002044c":"train['YearRemodAdd']=train['YrSold']-train['YearRemodAdd']","56d15b99":"train['GarageYrBlt']=train['YrSold']-train['GarageYrBlt']","8f432eb1":"## Here we will compare the difference between All years feature with SalePrice\n\nfor feature in temporal_features:\n    if feature!='YrSold':\n        sns.lineplot(train[feature],train['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","e36a0ae7":"object_features","e27d192b":"train.head()","59ba84a8":"for feature in numeric_features_test:\n    if 0 in train[feature].unique():\n        pass\n    else:\n        test[feature]=np.log(test[feature])\n        test.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","a64d81bc":"temporal_features_test","ceaf0521":"test['YearBuilt']=test['YrSold']-test['YearBuilt']","14c07cda":"test['YearRemodAdd']=test['YrSold']-test['YearRemodAdd']","1c67dedb":"test['GarageYrBlt']=test['YrSold']-test['GarageYrBlt']","b6794b13":"final_df=pd.concat([train,test],axis=0)\n","4f2702b8":"final_df.info()","40d71283":"final_df.head()","c01c7da0":"object_features=[features for features in final_df.columns if final_df[features].dtypes=='object']","cf67ba6e":"def one_hot_encoding(obj_features):\n    final_dfcopy=final_df.copy()\n    for features in obj_features:\n        print(features)\n        df=pd.get_dummies(final_dfcopy[features],drop_first=True)\n        df.head()\n        final_dfcopy=pd.concat([df,final_dfcopy],axis=1)\n    final_dfcopy.drop(obj_features,axis=1,inplace=True)   \n    return final_dfcopy","6d1d97b9":"final_df=one_hot_encoding(object_features)","5339dfc3":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","2c2022fe":"final_df.shape","ad8242c7":"final_df.head()","1160abc5":"final_df['SalePrice']","680890c5":"final_df.info()","eb4bb71b":"df_Train=final_df.iloc[:1422,:]\ndf_Test=final_df.iloc[1422:,:]","5fe492ad":"df_Train.head()","29c798fe":"df_Train['SalePrice']","281c1191":"df_Test.head()","295f558d":"X_train=df_Train.drop(['SalePrice'],axis=1)\ny_train=df_Train['SalePrice']","2035d6ca":"regressor=XGBRegressor()","fe3f2396":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]","60c5f4d5":"## Hyper Parameter Optimization\n\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","4172405f":"# Set up the random search with 4-fold cross validation\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","72395b4b":"random_cv.fit(X_train,y_train)\n","0b4efcf6":"random_cv.best_estimator_","5b3c5b61":"model = XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.05, max_delta_step=0,\n             max_depth=2, min_child_weight=4, missing=None, n_estimators=900,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)\n","97bd595a":"regressor.fit(X_train,y_train)","dea3e71e":"df_Test.drop(['SalePrice'],axis=1,inplace=True)","4f0cde9e":"df_Test.shape\n","a9d4da2c":"df_Test.head()","30ea0acb":"df_Test.head()","9411abfc":"y_pred=regressor.predict(df_Test)\n","b7d07085":"y_pred","d81353fe":"#Create Sample Submission file and Submit using ANN\npred=pd.DataFrame(y_pred)\nsub_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('AdvancedHousingusingXGBoost.csv',index=False)","093382ed":"pred","f79a6b59":"## Test Data","52857610":"### Handling the Temporal Variables","f517dcf8":"## Handling Categorical Variables","7026964b":"### Handling Missing values","022e6a50":"### Checking the various categorical variables","38016ec3":"## Model Building and Prediction","da09a997":"Here we have 1 feature less which is the Target variable 'Sale Price'","081bf5b0":"#### Checking the train data","9f2b6f39":"### Handling Temporal Variables","24f822a3":"### Replacing the Numeric missing values with Median values of the Column and Object Column missing values with max values ","6a10aa60":"### Replacing the Numeric missing values with Median values of the Column and Object Column missing values with max values ","acba30cd":"### Get number of unique values for categorical features","4badd426":"## EDA for Training Data","1fc7ad48":"### Handling Missing values in Test Data","19a9cd82":"## Performing the same Feature Engineering on Test Data","97a86b24":"### Get number of Unique features for Categorical Values","2373637c":"### Boxplot for outliers","dffd42e3":"Now all the missing values are handled in train data, let's check out test data"}}