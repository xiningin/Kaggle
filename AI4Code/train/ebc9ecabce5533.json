{"cell_type":{"5d8e7060":"code","28175894":"code","12178866":"code","a7ba32c5":"code","561dd4b4":"code","ea318ab9":"code","3c692a26":"code","c5e1a8b7":"code","64c68ada":"code","f5c34c5a":"code","b9a5a7e7":"code","64d1aacd":"code","9b85fcbb":"code","b4b2b118":"code","9e10eea1":"code","59c95f18":"code","b1b3b1f8":"code","0929d2db":"code","badfdbe2":"code","eaf03af9":"code","ccbbdace":"code","a62d9b23":"code","f4f6a3a6":"code","1678fbf7":"code","cce058b0":"code","a9c2cedb":"code","9c04d2ed":"code","875ff78e":"code","3db12699":"code","08c92ec4":"code","bec4a4bd":"code","b3ce9b3a":"code","f0d039a0":"code","d8c6cfed":"code","c5b04df9":"markdown","b1273e7f":"markdown","69435c1f":"markdown"},"source":{"5d8e7060":"from sklearn import linear_model\n\nclf = linear_model.LinearRegression()\nclf.fit(X_train,y_train)\n\nprint(clf.coef_)#\u56de\u5e30\u4fc2\u6570\nprint(clf.intercept_)#\u5207\u7247","28175894":"from sklearn import KMeans\n\nkm = KMeans(n_clusters=9, init=\"k-means++\")\ny_km = km.predict(train)","12178866":"\nimport pandas as pd","a7ba32c5":"train_path = \"..\/input\/train.csv\"\n","561dd4b4":"train = pd.read_csv(train_path)\ntrain.head()","ea318ab9":"train.describe()","3c692a26":"train.info()","c5e1a8b7":"#\u6b20\u640d\u5024\u3092\u88dc\u5b8c\ntrain[\"Alley\"] = train[\"Alley\"].fillna(0)","64c68ada":"#\u8981\u7d20\u306e\u6570\u3092\u78ba\u8a8d\ntrain[\"MSZoning\"].value_counts()","f5c34c5a":"train.groupby(\"MSZoning\").mean()","b9a5a7e7":"from matplotlib import pyplot as plt","64d1aacd":"var = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","9b85fcbb":"import seaborn as sns","b4b2b118":"sns.distplot(train['SalePrice']);","9e10eea1":"train.columns[:20]","59c95f18":"train.loc[1,:]","b1b3b1f8":"#correlation matrix\ncorrmat = train[train.columns[:40]].corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","0929d2db":"#\u7269\u4ef6\u306e\u5e83\u3055\u3092\u5408\u8a08\u3057\u305f\u5909\u6570\u3092\u4f5c\u6210\ndf = train\ndf[\"TotalSF\"] = df[\"1stFlrSF\"] + df[\"2ndFlrSF\"] + df[\"TotalBsmtSF\"] + df[\"GrLivArea\"]\nfig = plt.figure(figsize=(9,6))\nsns.regplot(x=df[\"TotalSF\"], y=df[\"SalePrice\"])\nplt.xlabel(\"TotalSF\")\nplt.ylabel(\"SalePrice\")\nplt.show()\nfig.savefig(\"figure4.png\")","badfdbe2":"import pandas as pd\nimport numpy as np\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","eaf03af9":"#id\ntest_id = test[\"Id\"]\n\ntrain = train.drop(\"Id\",axis=1)\ntest = test.drop(\"Id\",axis=1)\n\n#Mssubclass\nfor i in [train,test]:\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY 1946 & NEWER ALL STYLES\" if x==20 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY 1945 & OLDER\" if x==30 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY W\/FINISHED ATTIC ALL AGES\" if x==40 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY - UNFINISHED ALL AGES\" if x==45 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY FINISHED ALL AGES\" if x==50 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY 1946 & NEWER\" if x==60 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY 1945 & OLDER\" if x==70 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-1\/2 STORY ALL AGES\" if x==75 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"SPLIT OR MULTI-LEVEL\" if x==80 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"SPLIT FOYER\" if x==85 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"DUPLEX - ALL STYLES AND AGES\" if x==90 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY PUD (Planned Unit Development) - 1946 & NEWER\" if x==120 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY PUD - ALL AGES\" if x==150 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY PUD - 1946 & NEWER\" if x==160 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\" if x==180 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2 FAMILY CONVERSION - ALL STYLES AND AGES\" if x==190 else x)\ndel i\n\ntrain['MSSubClass'] = train['MSSubClass'].fillna(\"None\")\ntest['MSSubClass'] = test['MSSubClass'].fillna(\"None\")\n\n# poolqc\n\"\"\"\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\"\"\"\n# poolQC\ntrain[\"PoolQC\"] = train[\"PoolQC\"].fillna(\"None\")\ntest[\"PoolQC\"] = test[\"PoolQC\"].fillna(\"None\")","ccbbdace":"plt.scatter(train[\"LotFrontage\"],train[\"SalePrice\"])","a62d9b23":"#lotfrontage\ntrain[\"LotFrontage\"] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\ntest[\"LotFrontage\"] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\n\n\n#MiscFeature\ntrain[\"MiscFeature\"] = train[\"MiscFeature\"].fillna(\"None\")\ntest[\"MiscFeature\"] = test[\"MiscFeature\"].fillna(\"None\")\n\n#Alley\ntrain[\"Alley\"] = train[\"Alley\"].fillna(\"None\")\ntest[\"Alley\"] = test[\"Alley\"].fillna(\"None\")\n\n#Fence\ntrain[\"Fence\"] = train[\"Fence\"].fillna(\"None\")\ntest[\"Fence\"] = test[\"Fence\"].fillna(\"None\")\n\n#fireplace\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna(\"None\")\ntest[\"FireplaceQu\"] = test[\"FireplaceQu\"].fillna(\"None\")\n    \n#garage\u7cfb\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    train[col] = train[col].fillna('None')\n    test[col] = test[col].fillna('None')\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    train[col] = train[col].fillna(0)\n    test[col] = test[col].fillna(0)\ndel col\n# bsmtfin\u7cfb\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    train[col] = train[col].fillna(0)\n    test[col] = test[col].fillna(0)\n    \nfor col in (\"BsmtQual\",'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    train[col] = train[col].fillna(\"None\")\n    test[col] = test[col].fillna(\"None\")\ndel col\n\n# masvnr\u7cfb\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntest[\"MasVnrType\"] = test[\"MasVnrType\"].fillna(\"None\")\n\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(0)\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].fillna(0)\n\n#MSZoning\ntrain['MSZoning'] = train['MSZoning'].fillna(train['MSZoning'].mode()[0])\ntest['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])\n\n#Utilities\ntrain = train.drop(['Utilities'], axis=1)\ntest = test.drop(['Utilities'], axis=1)\n\n#Functional\ntrain[\"Functional\"] = train[\"Functional\"].fillna(\"Typ\")\ntest[\"Functional\"] = test[\"Functional\"].fillna(\"Typ\")\n\n#Electrical\ntrain[\"Electrical\"] = train[\"Electrical\"].fillna(\"SBrkr\")\ntest[\"Electrical\"] = test[\"Electrical\"].fillna(\"SBrkr\")\n\n# Kitchen\ntrain['KitchenQual'] = train['KitchenQual'].fillna(train['KitchenQual'].mode()[0])\ntest['KitchenQual'] = test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\n\n#Exterior\ntrain['Exterior1st'] = train['Exterior1st'].fillna(train['Exterior1st'].mode()[0])\ntest['Exterior1st'] = test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\n\ntrain['Exterior2nd'] = train['Exterior2nd'].fillna(train['Exterior2nd'].mode()[0])\ntest['Exterior2nd'] = test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\n\n#saletype\ntrain['SaleType'] = train['SaleType'].fillna(train['SaleType'].mode()[0])\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].mode()[0])\n\n#overallcond\ntrain['OverallCond'] = train['OverallCond'].astype(str)\ntest['OverallCond'] = test['OverallCond'].astype(str)\n\n#yrsold mosold\ntrain['YrSold'] = train['YrSold'].astype(str)\ntest['YrSold'] = test['YrSold'].astype(str)\n\ntrain['MoSold'] = train['MoSold'].astype(str)\ntest['MoSold'] = test['MoSold'].astype(str)\n\n# year\ntrain['YrBltAndRemod']=train['YearBuilt']+train['YearRemodAdd']\ntest['YrBltAndRemod']=test['YearBuilt']+test['YearRemodAdd']\n\n#total\ntrain['TotalSF'] = train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']\ntest['TotalSF'] = test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']\n\ntrain['Total_sqr_footage'] = (train['BsmtFinSF1'] + train['BsmtFinSF2'] + train['1stFlrSF'] + train['2ndFlrSF'])\ntest['Total_sqr_footage'] = (test['BsmtFinSF1'] + test['BsmtFinSF2'] + test['1stFlrSF'] + test['2ndFlrSF'])\n\ntrain['Total_Bathrooms'] = (train['FullBath'] + (0.5 * train['HalfBath']) + train['BsmtFullBath'] + (0.5 * train['BsmtHalfBath']))\ntest['Total_Bathrooms'] = (test['FullBath'] + (0.5 * test['HalfBath']) + test['BsmtFullBath'] + (0.5 * test['BsmtHalfBath']))\n\ntrain['Total_porch_sf'] = (train['OpenPorchSF'] + train['3SsnPorch'] + train['EnclosedPorch'] + train['ScreenPorch'] + train['WoodDeckSF'])\ntest['Total_porch_sf'] = (test['OpenPorchSF'] + test['3SsnPorch'] + test['EnclosedPorch'] + test['ScreenPorch'] + test['WoodDeckSF'])\n\n#street\n#train = train.drop('Street',axis=1)\n#test = test.drop('Street',axis=1)\n\n\ntrain = train.fillna(train.median())\ntest = test.fillna(test.median())\n\n#train = train.sample(frac=1, random_state=0)\n\n    \n# \u6b63\u898f\u5316\ntrain[\"SalePrice\"] = np.log(train[\"SalePrice\"])","f4f6a3a6":"# encording\u3092\u5b9a\u7fa9\u3059\u308b\nfrom sklearn.preprocessing import LabelEncoder\ndef encoding(enc_train,enc_test):\n    #\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n    co_box = []\n    for co in enc_train.columns:\n        try:\n            sumup = enc_train[co].sum()\n            if(type(sumup) == type(\"dokabenman\")):\n                co_box.append(co)\n        except:\n            print(co + \":\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304a\u304b\u3057\u3044\uff01\")\n\n    for obj_col in co_box:\n        le = LabelEncoder()\n        enc_train[obj_col] = enc_train[obj_col].apply(lambda x:str(x))\n        enc_train[obj_col] = pd.DataFrame({obj_col:le.fit_transform(enc_train[obj_col])})\n\n        enc_test[obj_col] = enc_test[obj_col].apply(lambda x:str(x))\n        enc_test[obj_col] = pd.DataFrame({obj_col:le.fit_transform(enc_test[obj_col])}) \n    \n    return enc_train,enc_test\n\ndef train_only_encoding(enc_train):\n    #\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n    co_box = []\n    for co in enc_train.columns:\n        try:\n            sumup = enc_train[co].sum()\n            if(type(sumup) == type(\"dokabenman\")):\n                co_box.append(co)\n        except:\n            print(co + \":\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304a\u304b\u3057\u3044\uff01\")\n\n    for obj_col in co_box:\n        le = LabelEncoder()\n        enc_train[obj_col] = enc_train[obj_col].apply(lambda x:str(x))\n        enc_train[obj_col] = pd.DataFrame({obj_col:le.fit_transform(enc_train[obj_col])})\n    \n    return enc_train","1678fbf7":"from sklearn import model_selection\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error\nfrom IPython.display import clear_output \nfrom sklearn.model_selection import cross_val_score","cce058b0":"# \u5206\u5e03\u304c\u3082\u304a\u6700\u3082\u4e00\u81f4\u3059\u308brandom_state\u3092\u63a2\u3059\nfrom sklearn.model_selection import KFold\nfrom scipy.stats import ks_2samp\n\npur,exa = train[\"SalePrice\"].copy(),train.drop(\"SalePrice\",axis=1).copy()\npur = (pur - pur.mean())\/pur.std()\n\np_value = []\nmean_box = []\nfor i in range(0,500):\n    kf = KFold(n_splits=3,random_state=i,shuffle=True)\n    for tr ,te in kf.split(exa,pur,groups=None):\n        X_train, y_train = exa.iloc[tr], pur.iloc[tr]\n        X_test, y_test = exa.iloc[te], pur.iloc[te]\n        p_value.append(ks_2samp(y_train,y_test)[1])\n\n    mean_value = np.mean(p_value)\n    mean_box.append(mean_value)\nclear_output()\nprint(np.argmin(mean_box))\nprint(np.min(mean_box))\ndel pur,exa,kf,X_train, X_test, y_train, y_test","a9c2cedb":"# \u3072\u3068\u307e\u305aLGMRegressor\u3092\u6700\u9069\u5316\u3059\u308b\nfrom sklearn.model_selection import KFold\nfrom scipy.stats import ks_2samp\n\nk_train = train.copy()\nk_train = train_only_encoding(k_train)\npur,exa = k_train[\"SalePrice\"].copy(),k_train.drop(\"SalePrice\",axis=1).copy()\npur = (pur - pur.mean())\/pur.std()\nfinal_result = []\nkf = KFold(n_splits=3,random_state=9,shuffle=True)\nfor i in range(20,100):\n    result = []\n    for tr ,te in kf.split(pur):\n        X_train, y_train = exa.iloc[tr], pur.iloc[tr]\n        X_test, y_test = exa.iloc[te], pur.iloc[te]\n        model =lgb.LGBMRegressor(random_state=0,boosting_type=\"gbdt\",objective=\"regression\",metric=\"rmse\",num_boost_round=i)\n        model.fit(X_train,y_train)\n        pre = model.predict(X_test)\n        result.append(mean_squared_error(y_test,pre))\n    clear_output()\n    final_result.append(np.mean(result))\n    \nfrom matplotlib import pyplot as plt\nx,y = np.arange(20,100),final_result\nplt.plot(x,y)\nplt.ylabel(\"RMSE\")\nplt.xlabel(\"num_boost_round\")\nplt.show()\n\ndel k_train,pur,exa,kf,X_train, X_test, y_train, y_test,model,pre,result,x,y","9c04d2ed":"\"\"\"\n[0.11009861503409565, 0.11913828267732557, 0.11980643889955646]\n0.1163477788703259\n\"\"\"","875ff78e":"# \u4ee5\u4e0a\u304b\u3089CV\u8a55\u4fa1\u306f\u4ee5\u4e0b\u3092\u7528\u3044\u308b\n# \u3072\u3068\u307e\u305aLGMRegressor\u3092\u6700\u9069\u5316\u3059\u308b\n# \u5b9f\u969b\u3001\u7d50\u679c\u3092\u898b\u3066\u3082\u5b89\u5b9a\u3057\u305fCV\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\nfrom sklearn.model_selection import KFold\nfrom scipy.stats import ks_2samp\n\npur,exa = train[\"SalePrice\"].copy(),train.drop(\"SalePrice\",axis=1).copy()\nexa = train_only_encoding(exa)\npur = (pur - pur.mean())\/pur.std()\nkf = KFold(n_splits=3,random_state=9,shuffle=True)\nresult = []\nfor tr ,te in kf.split(pur):\n    X_train, y_train = exa.iloc[tr], pur.iloc[tr]\n    X_test, y_test = exa.iloc[te], pur.iloc[te]\n    model =lgb.LGBMRegressor(random_state=0,boosting_type=\"gbdt\",objective=\"regression\",metric=\"rmse\",num_boost_round=50)\n    model.fit(X_train,y_train)\n    pre = model.predict(X_test)\n    result.append(mean_squared_error(y_test,pre))\nclear_output()\nprint(result)\nprint(np.mean(result))\n\ndel pur,exa,kf,X_train, X_test, y_train, y_test,model,pre,result","3db12699":"0.11742963929941917","08c92ec4":"pd.set_option('display.max_columns', 50)\ntrain.head(1)","bec4a4bd":"# MSSubClass\n\"\"\"\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\"\"\"\nfor i in [train,test]:\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY 1946 & NEWER ALL STYLES\" if x==20 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY 1945 & OLDER\" if x==30 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY W\/FINISHED ATTIC ALL AGES\" if x==40 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY - UNFINISHED ALL AGES\" if x==45 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY FINISHED ALL AGES\" if x==50 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY 1946 & NEWER\" if x==60 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY 1945 & OLDER\" if x==70 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-1\/2 STORY ALL AGES\" if x==75 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"SPLIT OR MULTI-LEVEL\" if x==80 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"SPLIT FOYER\" if x==85 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"DUPLEX - ALL STYLES AND AGES\" if x==90 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-STORY PUD (Planned Unit Development) - 1946 & NEWER\" if x==120 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"1-1\/2 STORY PUD - ALL AGES\" if x==150 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2-STORY PUD - 1946 & NEWER\" if x==160 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\" if x==180 else x)\n    i[\"MSSubClass\"] = i[\"MSSubClass\"].apply(lambda x:\"2 FAMILY CONVERSION - ALL STYLES AND AGES\" if x==190 else x)\ndel i","b3ce9b3a":"pur,exa = train[\"SalePrice\"].copy(),train.drop(\"SalePrice\",axis=1).copy()\nmean = pur.mean()\nstd = pur.std()\npur = (pur - mean) \/ std\nmodel =lgb.LGBMRegressor(random_state=0,boosting_type=\"gbdt\",objective=\"regression\",metric=\"rmse\",num_boost_round=100)\nmodel.fit(exa,pur)\npre = model.predict(test)\npre = pre*std + mean\npre = np.exp(pre)\n\nsubmission = pd.DataFrame({\n    \"Id\": test_id,\n    \"SalePrice\": pre\n})\nsubmission.to_csv('submission.csv', index=False)\ndel pur,exa,model,pre","f0d039a0":"submission.head()","d8c6cfed":"import seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nimport numpy as np\nfrom matplotlib import pyplot as plt\nall_data = pd.concat((train.drop(\"SalePrice\",axis=1),test)).copy()\nsign = all_data[\"PoolArea\"].copy()\nsign = all_data[all_data[\"PoolArea\"]!=0][\"PoolArea\"]\nprint(sign.min())\nsign = np.log(sign)\nsign = np.sqrt(sign)\n\n\nsns.distplot(sign,fit = norm)\n(mu, sigma) = norm.fit(sign)\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],loc='best')\nplt.ylabel('Frequency')\nplt.title('Distribution')\nfig = plt.figure()\nres = stats.probplot(sign, plot=plt)\nplt.show()\nprint(stats.shapiro(sign))\ndel sign,all_data,mu,sigma,res","c5b04df9":"\u25cf\u5b89\u5b9a\u3057\u305fCV\u3092\u63a2\u7d22\u3059\u308b","b1273e7f":"\u25cf\u7279\u5fb4\u91cf\u9078\u629e","69435c1f":"\u25cf\u7279\u5fb4\u91cf\u9078\u629e"}}