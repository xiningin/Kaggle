{"cell_type":{"18fb3079":"code","ad2a17a5":"code","67f4400a":"code","3bca75b8":"code","ed1a543b":"code","3dcec6cf":"code","8a61ec8a":"code","cb6cdf18":"code","c86ed19f":"code","0109e48c":"code","e54d6c70":"code","6c8cb0ab":"code","83b7c7bf":"code","8e669b26":"code","be764d13":"code","8aff3b66":"code","b672444d":"code","ef5e11ed":"code","3a554200":"code","b593df65":"code","fe061fd3":"code","abb9fe95":"code","87f6c3c5":"code","24cd9e4c":"code","05622f91":"code","d1a8520b":"code","5a998ca7":"code","63f21f4e":"code","e8c92c96":"code","9d062d4c":"code","fcc01c9d":"code","587ad4f2":"code","cb2a3602":"code","ffcf53d9":"code","a9edf39b":"code","9fb3e3ba":"code","bf959c9a":"code","89155518":"code","1226b2d1":"code","34836ec6":"code","8f60e351":"code","39c8e743":"code","b863f219":"code","04730d4f":"code","7a10a60a":"code","4d70fbcd":"code","8a49f9db":"code","2d6f6ada":"code","b4b56bfa":"code","59086539":"code","488ec35d":"code","34ac0931":"code","72088522":"code","2ea313d5":"code","d339dab3":"code","56384640":"code","82c72a45":"markdown"},"source":{"18fb3079":"import pandas as pd\nimport numpy as np\nimport os","ad2a17a5":"dataset_path = '\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\ntest_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\n","67f4400a":"df.keys()","3bca75b8":"df.isnull().sum()","ed1a543b":"df.dtypes","3dcec6cf":"df[['Area','Perimeter','MajorAxisLength','EquivDiameter','roundness']].head(20)","8a61ec8a":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp = IterativeImputer(random_state=0)\nimp.fit(df[['Area','Perimeter','MajorAxisLength','MinorAxisLength','AspectRation','Eccentricity','ConvexArea','EquivDiameter','Extent','Solidity','roundness','ShapeFactor1','ShapeFactor2','ShapeFactor3','ShapeFactor4']]\n)\nIterativeImputer(random_state=0)\ndf2 = df[['Area','Perimeter','MajorAxisLength','MinorAxisLength','AspectRation','Eccentricity','ConvexArea','EquivDiameter','Extent','Solidity','roundness','ShapeFactor1','ShapeFactor2','ShapeFactor3','ShapeFactor4']]\n\ndf2 = imp.transform(df2)\n\n## test df\ntest_df2 = test_df[['Area','Perimeter','MajorAxisLength','MinorAxisLength','AspectRation','Eccentricity','ConvexArea','EquivDiameter','Extent','Solidity','roundness','ShapeFactor1','ShapeFactor2','ShapeFactor3','ShapeFactor4']]\ntest_df2 = imp.transform(test_df2)\n","cb6cdf18":"# df2.astype(float)\ndf2","c86ed19f":"df2 = pd.DataFrame(df2, columns=['Area','Perimeter','MajorAxisLength','MinorAxisLength','AspectRation','Eccentricity','ConvexArea','EquivDiameter','Extent','Solidity','roundness','ShapeFactor1','ShapeFactor2','ShapeFactor3','ShapeFactor4'])\n\ntest_df2 = pd.DataFrame(test_df2, columns=['Area','Perimeter','MajorAxisLength','MinorAxisLength','AspectRation','Eccentricity','ConvexArea','EquivDiameter','Extent','Solidity','roundness','ShapeFactor1','ShapeFactor2','ShapeFactor3','ShapeFactor4'])\ndf2","0109e48c":"df.rename(columns = {'y': 'Class'}, inplace=True)","e54d6c70":"#print(list(df[\"Class\"]))","6c8cb0ab":"df2['Class'] = list(df[\"Class\"])","83b7c7bf":"df2","8e669b26":"df2.isnull().sum()\n","be764d13":"df2.dtypes","8aff3b66":"import matplotlib.pyplot as plt\nimport seaborn as sns","b672444d":"sns.pairplot(df2, hue='Class')","ef5e11ed":"plt.figure(figsize=(10,5)) \nsns.barplot(x='Class',y='Area',data=df2)","3a554200":"plt.figure(figsize=(15,15))\nsns.heatmap(df2.corr(), annot=True)","b593df65":"plt.figure(figsize=(10,5))\nsns.countplot(x='Class',data=df2)","fe061fd3":"plt.figure(figsize=(25,20))\nsns.FacetGrid(df2, hue =\"Class\",height = 6).map(plt.scatter,'EquivDiameter','AspectRation').add_legend()","abb9fe95":"plt.figure(figsize=(15,10))\nsns.violinplot(x='Class', y='roundness', data=df2)","87f6c3c5":"plt.figure(figsize=(15,10))\nsns.scatterplot(x='Perimeter', y='EquivDiameter', hue='Class', data=df2)","24cd9e4c":"plt.figure(figsize=(15,10))\nsns.violinplot(x='Class', y='AspectRation', data=df2)","05622f91":"X = df2.drop('Class', axis=1).values.astype(np.float)\nX[0:5]","d1a8520b":"y = df['Class'].values\ny[0:5]","5a998ca7":"from sklearn import preprocessing","63f21f4e":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\n\ntest_df2 = preprocessing.StandardScaler().fit(test_df2).transform(test_df2.astype(float))\n\nX[0:5]","e8c92c96":"from sklearn.model_selection import train_test_split","9d062d4c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","fcc01c9d":"from sklearn.neighbors import KNeighborsClassifier","587ad4f2":"k = 7\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh","cb2a3602":"pred = neigh.predict(X_test)\npred[0:5]","ffcf53d9":"from sklearn.metrics import classification_report, accuracy_score\nprint(\"Train set Accuracy: \", accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", accuracy_score(y_test, pred))","a9edf39b":"from sklearn import metrics\nKs = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, pred)\n\n    \n    std_acc[n-1]=np.std(pred==y_test)\/np.sqrt(pred.shape[0])\n\nmean_acc","9fb3e3ba":"print(classification_report(y_test,pred))","bf959c9a":"print(np.round(metrics.accuracy_score(y_test,pred),decimals=4))","89155518":"from sklearn.svm import SVC\n\nsvm_model = SVC()\nsvm_model.fit(X_train,y_train)","1226b2d1":"pred2 = svm_model.predict(X_test)","34836ec6":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test,pred2))","8f60e351":"print(classification_report(y_test,pred2))","39c8e743":"print(np.round(metrics.accuracy_score(y_test,pred2),decimals=4))","b863f219":"from sklearn.linear_model import SGDClassifier\nclf = SGDClassifier(loss=\"hinge\", penalty=\"l2\", max_iter=1000)\nclf.fit(X_train, y_train)\nSGDClassifier()","04730d4f":"pred3 = clf.predict(X_test)","7a10a60a":"print(classification_report(y_test,pred3))","4d70fbcd":"print(np.round(metrics.accuracy_score(y_test,pred3),decimals=4))","8a49f9db":"from sklearn import tree\ndtree = tree.DecisionTreeClassifier()\ndtree = dtree.fit(X_train, y_train)","2d6f6ada":"pred4 = dtree.predict(X_test)","b4b56bfa":"print(classification_report(y_test,pred4))","59086539":"print(np.round(metrics.accuracy_score(y_test,pred4),decimals=4))","488ec35d":"from sklearn.neighbors import NearestCentroid\nncd = NearestCentroid()\nncd.fit(X_train, y_train)\nNearestCentroid()","34ac0931":"pred5 = ncd.predict(X_test)","72088522":"print(classification_report(y_test,pred5))","2ea313d5":"print(np.round(metrics.accuracy_score(y_test,pred5),decimals=4))\n# print(accuracy_score(y_test,pre))\n","d339dab3":"y_test_predicted = neigh.predict(test_df2)\n\ntest_df['y'] = y_test_predicted\n\ntest_df['y'] = test_df['y'].astype('object') \n\ntest_df.head()","56384640":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","82c72a45":"# predicting using KNN"}}