{"cell_type":{"e204963f":"code","8ad543c1":"code","0844de5c":"code","8fb685b0":"code","d8c2fe99":"code","07a7ec94":"code","393e7aa0":"code","2e8ca395":"code","927f761f":"code","fc687198":"code","9fd5b908":"code","b889eb86":"code","34e1c3cc":"code","a32cf545":"code","3dd4be35":"code","7565238f":"code","bff7a9ec":"code","5889973c":"code","2de5770a":"code","b7192f68":"code","e94f70b8":"code","c1df1c48":"code","8c85e743":"code","656ff4ba":"code","bea33336":"code","097ae731":"code","2dd62185":"code","631f3104":"code","b0c79b09":"code","bfde21c5":"markdown","752ac289":"markdown","aa0b45b3":"markdown","6ef1f39e":"markdown","a7f4cdbc":"markdown","6f4df389":"markdown","7b67ff0c":"markdown","480171d0":"markdown","f313f9af":"markdown","ff24261e":"markdown","7c282234":"markdown","1e7aa5b5":"markdown","6c25a9ad":"markdown","786f3ef8":"markdown","805b33eb":"markdown","ae8909a3":"markdown"},"source":{"e204963f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ad543c1":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\ndef evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()\n","0844de5c":"# \u0418\u043c\u043f\u043e\u0440\u0442 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV\n\n# \u041c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor, plot_tree\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\n\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\n    \nSAMPLE_SUBMISSION = '\/kaggle\/input\/gb-black-friday-sales\/sample_submission.csv'\nTRAIN = '\/kaggle\/input\/gb-black-friday-sales\/train.csv'\nTEST = '\/kaggle\/input\/gb-black-friday-sales\/test.csv'","8fb685b0":"X = pd.read_csv(TRAIN)\ndf_TEST = pd.read_csv(TEST)\nsubmit = pd.read_csv(SAMPLE_SUBMISSION)","d8c2fe99":"#  \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439, \u0442\u0430\u043a \u0447\u0442\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 33%\nX_1 = X.drop(columns='Purchase')\ny_1 = X.Purchase\nX_train, X_test, y_train, y_test = train_test_split(X_1, y_1, test_size=0.33, shuffle=True, random_state=100)\nX_train.head()","07a7ec94":"import matplotlib\nimport matplotlib.image as img\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","393e7aa0":"matplotlib.rcParams.update({'font.size': 14})","2e8ca395":"class DataPipeLine:\n    \"\"\" \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \"\"\"\n    def __init__(self):\n        pass\n    \n    def fit(self):\n        pass\n    \n    \"\"\" \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \"\"\"\n    def transform(self, df):\n        \n        \"\"\" \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0438\u0447\u0438 Age. \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \"\"\"\n        df.loc[df['Age'] == '0-17', 'Age'] = 0\n        df.loc[df['Age'] == '18-25', 'Age'] = 1\n        df.loc[df['Age'] == '26-35', 'Age'] = 2\n        df.loc[df['Age'] == '36-45', 'Age'] = 3\n        df.loc[df['Age'] == '51-55', 'Age'] = 4\n        df.loc[df['Age'] == '46-50', 'Age'] = 5\n        df.loc[df['Age'] == '55+', 'Age'] = 6\n        df['Age'] = df['Age'].astype('int')\n        \n        \"\"\" \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0438\u0447\u0438 Stay_In_Current_City_Years \"\"\"\n        df.loc[df['Stay_In_Current_City_Years'] == '0', 'Stay_In_Current_City_Years'] = 0\n        df.loc[df['Stay_In_Current_City_Years'] == '1', 'Stay_In_Current_City_Years'] = 1\n        df.loc[df['Stay_In_Current_City_Years'] == '2', 'Stay_In_Current_City_Years'] = 2\n        df.loc[df['Stay_In_Current_City_Years'] == '3', 'Stay_In_Current_City_Years'] = 3\n        df.loc[df['Stay_In_Current_City_Years'] == '4+', 'Stay_In_Current_City_Years'] = 4\n        df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].astype(int)\n        \n        \"\"\" \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0438\u0447\u0438 Product_ID. \u0414\u043b\u044f Product_ID \u0443\u0431\u0435\u0440\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0431\u0443\u043a\u0432\u0443 P, \u0442\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0442\u0430\u043d\u0435\u0442 \u043f\u0440\u043e\u0449\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \"\"\"\n        df.Product_ID = df.Product_ID.astype('str').str.replace('P', '')\n        df.Product_ID = df.Product_ID.astype(int)\n        \n        \"\"\"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432\"\"\"\n#         Product_ID = df.Product_ID.value_counts().reset_index().rename(columns={'index': \"Product_ID\", 'Product_ID': 'Product_popular'})\n#         df = df.merge(Product_ID, on='Product_ID', how='left')\n        # df.Product_popular = df.Product_popular.astype('int')\n        \n        \"\"\" \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \n        \u0447\u0442\u043e \u0431\u044b \u043d\u0435 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0445 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e\"\"\"\n        df.Product_Category_2 = df.Product_Category_2.fillna(1)\n        df.Product_Category_3 = df.Product_Category_3.fillna(1)\n        \n        \"\"\" \u041f\u0440\u0438\u0437\u043d\u0430\u043a City_Category \u0438\u043c\u0435\u0435\u0442 3 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0434\u0430\u043c\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \n        \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0441 Gender\"\"\"\n        df = pd.concat([df, pd.get_dummies(df['City_Category'])], axis=1)\n        df = pd.concat([df, pd.get_dummies(df['Gender'])], axis=1)\n        \n        \n        \"\"\" \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 \u0447\u0430\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\"\"\"\n#         Product_Category_1 = X_train.Product_Category_1.value_counts().reset_index().rename(columns={'index': \"Product_Category_1\", 'Product_Category_1': 'p_c_1'})\n#         Product_Category_1\n#         df = df.merge(Product_Category_1, on='Product_Category_1', how='left')\n        \n#         Product_Category_2 = X_train.Product_Category_2.value_counts().reset_index().rename(columns={'index': \"Product_Category_2\", 'Product_Category_2': 'p_c_2'})\n#         Product_Category_2\n#         df = df.merge(Product_Category_2, on='Product_Category_2', how='left')\n        \n#         Product_Category_3 = X_train.Product_Category_3.value_counts().reset_index().rename(columns={'index': \"Product_Category_3\", 'Product_Category_3': 'p_c_3'})\n#         Product_Category_3\n#         df = df.merge(Product_Category_3, on='Product_Category_3', how='left')\n        \n        df.Product_Category_1 = df.Product_Category_1.astype('str')\n        df.Product_Category_2 = df.Product_Category_2.astype('str')\n        df.Product_Category_3 = df.Product_Category_3.astype('str')\n        \n        return df\n        \n    \n\"\"\"iterate through all the columns of a dataframe and modify the data type to reduce memory usage.\"\"\"\ndef reduce_mem_usage(df):\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","927f761f":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0435\u0433\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\npipe = DataPipeLine()\nX_train = pipe.transform(X_train)\nX_test = pipe.transform(X_test)\ndf_TEST = pipe.transform(df_TEST)\n\nX_train = reduce_mem_usage(X_train)\nX_test = reduce_mem_usage(X_test)\ndf_TEST = reduce_mem_usage(df_TEST)","fc687198":"X_train.head()","9fd5b908":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442\nX_train.isna().sum().sum(), X_test.isna().sum().sum(), df_TEST.isna().sum().sum()","b889eb86":"X_train.dtypes","34e1c3cc":"X_train.columns.tolist()","a32cf545":"X_train","3dd4be35":"feature_names = ['User_ID', 'Product_ID', 'Age', 'Occupation','Stay_In_Current_City_Years', 'Marital_Status',\n'Product_Category_1', 'Product_Category_2',  'Product_Category_3', 'A', 'B', 'C', 'F', 'M']\n# feature_names = ['User_ID', 'Age', 'Occupation','Stay_In_Current_City_Years', 'Marital_Status',\n# 'Product_Category_1', 'Product_Category_2',  'Product_Category_3', 'A', 'B', 'C', 'F', 'M', 'Product_popular']","7565238f":"X_train = X_train[feature_names]\nX_test = X_test[feature_names]\ndf_TEST = df_TEST[feature_names]\nX_train","bff7a9ec":"corrmat = X_train.corr()\nf, ax = plt.subplots(figsize=(14, 10))\nsns.heatmap(corrmat, vmax=.9, annot=True, fmt=' .2f', square=True)","5889973c":"X_num_features = X_train.select_dtypes(include=['int64', 'int32', 'int16','int8', 'float64'])\nX_num_features.head()","2de5770a":"X_num_features.describe()","b7192f68":"X_num_features.info()","e94f70b8":"X_num_features = X_train.select_dtypes(include=['int32', 'int16','int8', 'uint8', 'float32'])\nX_num_features.head()","c1df1c48":"X_num_features.hist(figsize=(16, 16), bins=13, grid=False)","8c85e743":"rf_model = RandomForestRegressor(random_state=21, criterion='mse')\nrf_model.fit(X_train, y_train)","656ff4ba":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_test)\n\nevaluate_preds(y_train, y_train_preds, y_test, y_test_preds)","bea33336":"df_TEST.shape","097ae731":"df_TEST","2dd62185":"predictions = rf_model.predict(df_TEST)\npredictions","631f3104":"submit['Purchase'] = predictions\nsubmit.head()","b0c79b09":"submit.to_csv('rf_submit.csv', index=False)","bfde21c5":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","752ac289":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","aa0b45b3":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","6ef1f39e":"### \u041e\u0431\u0437\u043e\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b(\u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435) \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435","a7f4cdbc":"\u041c\u043e\u0436\u043d\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043d\u0438\u0445 \u0432\u0431\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u043d\u0435\u0442. \u041f\u043e\u043a\u0430 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0432\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442(\u0441\u0440\u0430\u0432\u043d\u0438\u043b\u0438 mean - \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438 50% \u0441\u0440\u0435\u0434\u043d\u044e\u044e).","6f4df389":"## \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","7b67ff0c":"## 1. \u0426\u0435\u043b\u044c - \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a(feature) Purchase, \u043e\u043d \u0435\u0441\u0442\u044c \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \/ \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0435\u0433\u043e \u043d\u0435\u0442, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0441 sample_submission.csv.","480171d0":"### \u0412\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u0444\u0438\u0447\u0435\u0439","f313f9af":"\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n\n*     \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n*     \u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n*     \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","ff24261e":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","7c282234":"### \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0444\u0438\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c","1e7aa5b5":"* Age - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0432\u043d\u043e\u0435, \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 2 - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 '26-35'\n* Occupation - \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u0433\u0434\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0432\u0435\u043d 0\n* Stay_In_Current_City_Years - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0432\u043d\u043e\u0435, \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u0434\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u0436\u0438\u0432\u0435\u0442 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0433\u043e\u0434\n* Marital_Status - \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n* Product_Category \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043f\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u043d\u0430\u0432\u0435\u0440\u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c","6c25a9ad":"# DataScience Project\n\n\n1. **\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438**\n2. **\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**\n3. **\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445**\n4. **\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445**\n5. **\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**\n6. **\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**\n7. **\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**\n8. **\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430**","786f3ef8":"## 2. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","805b33eb":"\u0421\u043b\u0430\u0431\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f (0.32) \u0435\u0441\u0442\u044c \u0443 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438 \u0441\u0435\u043c\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c","ae8909a3":"## Data fields\n\n* User_ID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f\n* Product_ID - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430\n* Age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f\n* Occupation - \u0440\u043e\u0434 \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f\n* City_Category - \u0433\u043e\u0440\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\n* Stay_In_Current_City_Years - \u043a\u0430\u043a \u0434\u043e\u043b\u0433\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c \u0436\u0438\u0432\u0435\u0442 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Marital_Status - \u0441\u0435\u043c\u0435\u0439\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f\n* Product_Category_1 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 1\n* Product_Category_2 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 2\n* Product_Category_3 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u043e\u0432\u0430\u0440\u0430 3\n* Purchase - \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043a\u0443\u043f\u043e\u043a"}}