{"cell_type":{"c64c3b45":"code","0a65751e":"code","e10aadc7":"code","b1b2b803":"code","43723cb8":"code","51bd4df4":"code","3a5db568":"code","3ffc320e":"code","f7bf8ca2":"code","d0352cb6":"code","8a5e2260":"code","1fd317e5":"code","0613034e":"code","0dffbac4":"code","b0dacf67":"code","a47e9023":"code","a2389aa5":"code","00756920":"code","ba03291e":"code","8ef30d27":"code","93d0f0e9":"code","b228a185":"code","2e0f6971":"code","e64902a7":"code","0bc7efa5":"code","ca285f43":"code","33f8b705":"code","b2677bd4":"code","2470747a":"code","cb9631c7":"code","47a91fa5":"code","d85da774":"code","dd5404be":"code","7eb10bae":"code","a1dc9ef2":"code","82c59efb":"code","dba47050":"code","cdafb1dc":"code","3a3849d0":"code","a407d077":"code","4784f294":"code","f088c447":"code","bd2a5684":"code","2ab97a73":"code","e2288741":"code","05ef992c":"code","b9698942":"code","b9c6dee2":"code","051ec25b":"code","454c5d7d":"code","772e0060":"code","66388e0b":"code","6f3aeec9":"code","e8b8f2e9":"code","c17274d5":"code","b40dedb6":"code","e4100112":"markdown","17c0c5d8":"markdown","1f6cb015":"markdown","fe932182":"markdown","f447e558":"markdown","721e703c":"markdown","92dbab33":"markdown","dccbb033":"markdown","bf787f11":"markdown","d7045b66":"markdown","ac020b8e":"markdown","81be349f":"markdown","88b9ec2e":"markdown","f2755881":"markdown","d8ded56d":"markdown","96fce589":"markdown","e73c5b84":"markdown","dce1568d":"markdown","ac7f0a8f":"markdown","ed2523b0":"markdown","c1e67feb":"markdown","58d8d4db":"markdown","b9889793":"markdown","d7c545ea":"markdown","53662884":"markdown","e6f195d6":"markdown","74aaa7d9":"markdown"},"source":{"c64c3b45":"#importing numpy \n'''\nwe import numpy as np because :\na) shortening it avoids the namespace issues \nb) makes your code easier to read \n'''\nimport numpy as np\n\n#Note : Do not forget to import the library or importing it wrongly will raise an error that 'np' is not defined","0a65751e":"#We use 'array()' function to create the Numpy ndarray object \n\narr = np.array([1,2,3,4,5])    #we have passed a list to the array() function\nprint(\"Array : \",arr)\nprint(\"Type : \",type(arr))","e10aadc7":"#passing a tuple in the array() function \n\narr = np.array((1,2,3,4,5))\nprint(\"Array : \",arr)\nprint(\"Type : \",type(arr))","b1b2b803":"#passing a 2d list to the array() function\n\narr = np.array([[1,2,3,4],[5,6,7,8]])\nprint(\"Array : \\n\",arr)\nprint(\"Type : \",type(arr))","43723cb8":"#creating ndarrays of different dimensions \n\narr1 = np.array(22)\narr2 = np.array([1,2,3,4,5])\narr3 = np.array([[1,2,3,4,5],[1,2,3,4,5]])\narr4 = np.array([[[1,2,3,4],[5,6,7,8]]])\n\n#ndim : attribute provided by the numpy array \n#returning value : an integer which tells the dimensions the array have\nprint(\"Array 1 : \\n\",arr1)\nprint(\"Dim : \",arr1.ndim)\nprint()\nprint(\"Array 2 : \\n\",arr2)\nprint(\"Dim : \",arr2.ndim)      \nprint()\nprint(\"Array 3 : \\n\",arr3)\nprint(\"Dim : \",arr3.ndim)  \nprint()\nprint(\"Array 4 : \\n\",arr4)\nprint(\"Dim : \",arr4.ndim)  ","51bd4df4":"#we can pass ndim attribute to the array() function\n\narr = np.array([1,2,3,4,5],ndmin=3)\nprint(\"Array : \",arr)\nprint(\"Dim : \",arr.ndim)","3a5db568":"#creating a numpy array \n\narr = np.array([11,12,13,14,15])\nprint(arr)\nprint(\"Ele 1 : \",arr[0])\nprint(\"Ele 3 : \",arr[2])\nprint(\"Ele 1 to 3 : \",arr[0:3])   #we have performed slicing here. If you have no idea about this, do not worry we conquer this too! :) \nprint(\"All elements : \",arr[:])\nprint(\"All elements except first 2 : \",arr[2:])","3ffc320e":"#let's perform indexing with higher array dimension \n\n#2d Array\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(\"Array : \",arr)\nprint(\"Dim : \",arr.ndim)\nprint(\"Ele (1,1) : \",arr[1][1])\nprint(\"Ele (0,0) : \",arr[0][0])\nprint(\"Ele (1,3) : \",arr[1][3])\nprint(\"Ele in first row : \",arr[0][:])\nprint(\"Ele in second row : \",arr[1][:])\nprint(\"All the elements in the matrix : \\n\",arr[:][:])","f7bf8ca2":"#let's create an array \n\narr = np.array([20,21,22,23,24])\nprint(\"Array : \",arr)\nprint(\"Ele 1 : \",arr[-len(arr)])\nprint(\"Last Ele : \",arr[-1])\n#if you face any confusion, do refer to the image which shows positive and negative indexing \nprint(\"Last three element : \",arr[-3:])","d0352cb6":"#negative indexing with higher dimension array \n\narr = np.array([[12,14,34,26,16],[56,34,54,23,87]])\nprint(\"Array : \\n\",arr)\nprint(\"First row : \",arr[-len(arr)][:])\nprint(\"Ele (1,1) : \",arr[-len(arr)][-len(arr[-len(arr)])])\nprint(\"Ele (1,5) : \",arr[-len(arr)][-1])\nprint(\"Last row : \",arr[-1][:])\nprint(\"Ele (2,1) : \",arr[-1][-len(arr[-1])])\nprint(\"Ele (2,5) : \",arr[-1][-1])","8a5e2260":"#let's create a 2D array\n\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(arr) \nprint(arr[:][:])  #returns the whole matrix\nprint(arr[0][:])  #returns the first row\nprint(arr[:][0])  #returns the first row\nprint(arr[-1][1:3]) \nprint(arr[0][-3:])","1fd317e5":"#data types of different arrays \narr = np.array([1,2,3,4,5])\nprint(arr.dtype)","0613034e":"arr = np.array(['hello','peter'])\nprint(arr.dtype)","0dffbac4":"arr = np.array([1.1,1.2,1.3,1.4,1.5])\nprint(arr.dtype)","b0dacf67":"arr = np.array([True,False,True])\nprint(arr.dtype)","a47e9023":"#What if we have different data type values in a single list ? \n#What would be the dtype of our array object then ?\n#Let's dig out !!!\n\narr = np.array([1,'hey!',True,1.1])\nprint(arr.dtype)","a2389aa5":"#Numpy allows us to create array with a defined data type \n\narr = np.array([1,2,3,4,5],dtype='S')\nprint(\"Array : \",arr)\nprint(\"dtype : \",arr.dtype)","00756920":"#We can also define the size of the array with these dtypes : i, u, f, S and U\n\narr = np.array([1,2,3,4,5],dtype='i8')\nprint(arr)\nprint(arr.dtype)  ","ba03291e":"#If the elements of the array cannot be converted to the defined dtype, then it raises the 'ValueError'\n\n# arr = np.array(['hello','world'],dtype='i2')  #raises 'ValueError'\n# print(arr)","8ef30d27":"#converting dtype of the arrays \n\narr = np.array([1.1,1.2,1.3,1.4,1.5])\nprint(arr)\nprint(arr.dtype)\n#converting dtype to int \narr = arr.astype(np.int64)   #we can even specify the size of the integer with the help of numpy\nprint(\"After conversion : \\n\")\nprint(arr)\nprint(arr.dtype)","93d0f0e9":"arr = np.array([1, 0, 3])\nprint(arr)\nprint(arr.dtype)\narr = arr.astype(bool)\nprint(\"After conversion : \")\nprint(arr)\nprint(arr.dtype)","b228a185":"#copy() function \n\narr = np.array(['hey','there'])\n\n#creating a new array with copy() function \n\nnew = arr.copy()\n#let's alter our new array\nnew[0]='hi'\nprint(\"Newly created array : \",new)\nprint(\"Original array : \",arr)\n\n#We can clearly see that the changes made in the newly created array were not reflected in the original array","2e0f6971":"#view() function \n\narr = np.array(['hey','there'])\n\n#creating a new array with view() function \n\nnew = arr.view()\n#let's alter our new array\nnew[0]='hi'\nprint(\"Newly created array : \",new)\nprint(\"Original array : \",arr)\n#The changes made in the newly created array were reflected in the original array","e64902a7":"#getting the shape of the numpy arrays\n\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(arr.shape)\n#whereas ndim gives the dimension\nprint(arr.ndim)","0bc7efa5":"#converting 1D array to 2D\n\narr = np.array([1,2,3,4,5,6,7,8,9,10])\narr = arr.reshape(2,5)\nprint(arr)","ca285f43":"#converting 1D array to 3D array \n\narr = np.array([1,2,3,4,5,6,7,8,9,10,11,12])\narr = arr.reshape(2,3,2)\nprint(arr)","33f8b705":"#what does reshape() returns ? Does it returns a copy() or a view ? \n#let's find out!\n\nprint(arr.reshape(1,12).base)\n\n#As it returns the original array, reshape() returns like view() function","b2677bd4":"#Flattening the array : Converting multidimensional array in single dimensional array \n'''\nThere are two ways to do it : \na) using reshape() -> pass -1 to the reshape function \nb) use flatten() -> call the flatten function of the numpy array object\n'''\n\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(arr)\n#converting into 1D array \narr = arr.reshape(-1)\nprint(arr)\n","2470747a":"#using flatten() function \n\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\nprint(arr)\n#converting into 1D array \narr = arr.flatten()\nprint(\"After using flatten() function : \")\nprint(arr)","cb9631c7":"#iterating 1D array\narr = np.array([1,2,3,4,5,6])\n\nfor x in arr:\n    print(x)","47a91fa5":"#iterating 2D array \narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n\nfor x in arr:\n    print(x)","d85da774":"#iterating each element of the 2D array \nfor x in arr:\n    for y in x:\n        print(y)","dd5404be":"#iterating a 3D array \narr = np.array([[[1,2,3,4,5],[6,7,8,9,10]]])\n\nfor x in arr :\n    print(x)","7eb10bae":"#ietarting each element of the 3D array \n\nfor x in arr :\n    for y in x:\n        for z in y:\n            print(z)","a1dc9ef2":"arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nfor x in np.nditer(arr):\n  print(x)","82c59efb":"#by using nditer() function we can even iterate with different step size\n\nfor x in np.nditer(arr[:, ::2]):\n  print(x)","dba47050":"arr = np.array([1, 2, 3, 4, 5])\n\nfor idx, x in np.ndenumerate(arr):\n  print(idx, x)","cdafb1dc":"#joining two 1D arrays \narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)","3a3849d0":"#If we change the argument 'axis' to 1 in the concatenate function, then the arrays will be concatenated row wise \narr1 = np.array([[1],[ 2],[ 3]])\narr2 = np.array([[4], [5], [6]])\narr = np.concatenate((arr1, arr2),axis=1)\nprint(arr)","a407d077":"#joining two 2D arrays \narr1 = np.array([[1, 2, 3],[7,8,9]])\narr2 = np.array([[4, 5, 6],[10,11,12]])\narr = np.concatenate((arr1, arr2))\nprint(arr)","4784f294":"#joining two arrays with different dimensions \narr1 = np.array([1, 2, 3])\narr2 = np.array([[4, 5, 6],[7,8,9],[10,11,12]])\n# arr = np.concatenate((arr1, arr2))   #contenate function cannot join two arrays with different dimension\n#we can use column_stack function for completing this task\narr = np.column_stack((arr1,arr2))\nprint(arr)","f088c447":"arr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=0)\nprint(arr)","bd2a5684":"#when axis = 1 \narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)","2ab97a73":"#hstack()\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)","e2288741":"#vstack()\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)","05ef992c":"#dstack()\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)","b9698942":"#Splitting 1D array into 3\narr = np.array([1,2,3,4,5,6])\narr = np.array_split(arr,3)\nprint(arr)","b9c6dee2":"#Splittig 2d array \narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\narr = np.array_split(arr,3)\nprint(arr)","051ec25b":"#Splitting along rows\n#For achieveing this, set axis=1 in array_split() function\narr = np.array([[1,2,3,4,5],[6,7,8,9,10]])\narr = np.array_split(arr,3,axis=1)\nprint(arr)","454c5d7d":"#where() function returns all the index values where the element is found\narr = np.array([11,12,13,14,12,12,15,16])\nx = np.where(arr == 12)\nprint(x)","772e0060":"#what if element is not found ? \narr = np.array([11,12,13,14,12,12,15,16])\nx = np.where(arr == 100)\nprint(x)\n\n#an empty list is returned when the element is not found","66388e0b":"arr = np.array([6, 7, 7, 7, 8, 9])\nx = np.searchsorted(arr, 7)\nprint(x)","6f3aeec9":"#if we want to search element from the right side, then we can set the side='right' inside the searchsorted() function\narr = np.array([6, 7, 7, 7, 8, 9])\nx = np.searchsorted(arr, 7, side='right')\nprint(x)","e8b8f2e9":"#Sorting a 1D array : It sorts all the sub arrays\narr = np.array([4,3,2,5,6,1,8])\nprint(arr)\nprint(\"Array after sorting : \")\narr = np.sort(arr)\nprint(arr)","c17274d5":"#sorting a 2D array \narr = np.array([[4,3,2,1],[6,5,4,3]])\nprint(arr)\nprint(\"Array after sorting : \")\narr = np.sort(arr)\nprint(arr)\n","b40dedb6":"#sorting in descending order : set axis=0 \narr = np.array([[4,3,2,1],[6,5,4,3]])\nprint(arr)\nprint(\"Array after sorting : \")\narr = np.sort(arr,axis=0)\nprint(arr)","e4100112":"Note : array() function takes only one parameter. It can a 'list','tuple' or can be a '2d list'","17c0c5d8":"### **Using ndenumerate()**\nEnumeration means mentioning sequence number of somethings one by one.<br>\n\nIn some cases we might need the index of the element too, so in those cases you can use this ndenumerate() function. ","1f6cb015":"# **Why do we use numpy ?**\n\nLet us have a look on the significance of using Numpy. \n\n1. Numpy is an open source library and it can be used to perform a wide variety of mathematical operations on arrays. \n2. It adds powerful data structures to Python that guarentee efficient calculations. \n3. It also supplies an enormous library of high-level mathematical functions that operates on arrays and matrices. \n\nNumPy arrays are faster and more compact than Python lists. An array consumes less memory and is convenient to use but NumPy uses much less memory to store data and it provides a mechanism of specifying the data types. This allows the code to be optimized even further.\n\nNow without wasting any time, lets get into the implementation part ! :)","fe932182":"# **6. Iterating on Numpy Array**\nWe can ieterate through the numpy arrays in three ways :<br> \na) Using for loop <br>\nb) Using nditer() <br>\nc) Using ndenumerate()","f447e558":"### **Positive Indexing** ","721e703c":"### **Using for loop**","92dbab33":"# **8. Splitting Numpy Arrays**\nSplitting : breaking an array into multiple arrays.<br>\nWe use the array_split() function. \n<br>It takes two arguments : <br>\na) the array which has to be split<br>\nb) the number of splits","dccbb033":"Note : dtype is different from data type<br>\n\nIt gives us information about: <br>\n\na) Type of the data (integer, float, Python object, etc.)<br>\nb) Size of the data (number of bytes)<br>\nc) The byte order of the data (little-endian or big-endian)<br>\nd) If the data type is a sub-array, what is its shape and data type?<br>","bf787f11":"# **4. Copy v\/s View in Numpy**\nCopy() and the view() function both creates a copy of the array. <br>\nBut the copy OWNS the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy.<br>\n\nWhile the view DOES NOT OWN the data and any changes made to the view will affect the original array","d7045b66":"### **Using concatenate()**","ac020b8e":"# **5. Reshaping of an array in Numpy**\nFirstly, let us understand what does 'shape' refers to.<br>\nShape refers to the number of elements in each dimension<br>\n\nNumpy provides 'shape' attribute that returns a tuple with each index having number of corresponding elements. \n\nNote :- Do not get confuse between the shape('shape') and the dimension('ndim').","81be349f":"### **Using stack() function**","88b9ec2e":"# **3. Data Types in Numpy**\nNumpy has some extra data types apart from the data types python provides us. <br>\nNumpy data types and the characters which represent them are : <br>\ni - integer<br>\nb - boolean<br>\nu - unsigned integer<br>\nf - float<br>\nc - complex float<br>\nm - timedelta<br>\nM - datetime<br>\nO - object<br>\nS - string<br>\nU - unicode string<br>\nV - fixed chunk of memory for other type ( void )<br>\n\nThe Numpy array has a property 'dtype' which returns the data type of the numpy array.<br>\nLet's find out the different types of data type :o","f2755881":"Reshaping : It means to change the shape of the array. By reshaping, we can add or remove dimensions or change the number of elements in each dimension. ","d8ded56d":"### **Determine the number of dimensions of the ndarray**","96fce589":"### **Slicing in arrays**\nSlicing in python simply means retrieving elements from one given index to another given index.\narr[start : end : step]\n\nstart : starting index (if no value given, then its default value is 0)<br>\nend   : ending index (it is excluded, if no value mentioned then it iterates to the last element of the array)<br>\nstep  : step refers to the incrementing value (if no value passed, then it is 1 by default) ","e73c5b84":"There are three more stack functions : <br>\na) hstack() : It stacks along rows<br>\nb) vstack() : It stacks along columns<br>\nc) dstack() : It stacks along height (depth)","dce1568d":"### **Using nditer()**\nWe have to use n loops for iterating each element of a nD array but if we use nditer() function, our task becomes easier.<br>\n\nLet's see how!","ac7f0a8f":"### **Negative Indexing** ","ed2523b0":"# **1. Creating our first Numpy object** ","c1e67feb":"# **7. Joining Numpy Arrays**\nThere are two ways to join the numpy arrays :<br> \na) Using concatenate() function<br>\nb) Using stack() functions","58d8d4db":"# **10. Sorting in Numpy Arrays**\nSorting means putting elements in an ordered sequence.<br>\nOrdered sequence is any sequence that has an order corresponding to elements, like numeric or alphabetical, ascending or descending.\n\nNumpy array has a function sort() which sorts the specified array. ","b9889793":"### **Using searchsorted()**\nsearchsorted() : It performs binary search in the array, and returns the index where the element is found. <br>\nNote : searchsorted() works on sorted arrays","d7c545ea":"# **2. Numpy Array Indexing & Slicing**\nThere is two type of indexing :\n1. Positive indexing (starts from 0)\n2. Negative indexing (starts from -N where N is the number of elements in the list)","53662884":"# **9. Searching elements in Numpy Arrays**\nThere are two ways to perform serach operation in numpy arrays : <br>\na) Using where() func.<br>\nb) Using searchsorted() func.","e6f195d6":"### **Can we convert array to any shape ?**\nWe can convert array to any shape as long as the elements required for reshaping are equal in both shapes. <br>\n\nWe can reshape 10 elements 1D array into 5 elements in 2 rows in 2D arrays but we cannot reshape it into 5 elements in 3 rows.  ","74aaa7d9":"### **Using where()**"}}