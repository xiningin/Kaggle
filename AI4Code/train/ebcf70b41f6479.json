{"cell_type":{"cab7e6a8":"code","8ab2585c":"code","d98c707c":"code","2e17503f":"code","003c6b82":"code","9eb2d789":"code","7ca9da0d":"code","476033b2":"code","48c6dd9b":"code","72cfb708":"code","c3436247":"code","4f678da0":"code","772213c3":"code","d33823a0":"code","56940c20":"code","7c6e8168":"code","c218d195":"code","0276035e":"code","5b77f5ce":"code","a922005a":"code","6d3cdf6b":"code","ae64fe22":"code","3a8dd6d5":"code","5c99da5e":"code","93d0d6e5":"code","ca86051f":"code","4c09e049":"code","5f416f60":"code","60c71809":"code","e36aaf34":"code","cf4853b0":"code","87de933e":"code","180ef533":"code","518d2543":"code","3fc560dc":"code","800d7e9a":"code","45fd8961":"code","872f1611":"code","5e7b0cad":"code","3b7e6f57":"code","67d7321f":"code","b2909c3a":"code","759243ae":"code","b5a18f3c":"code","3bdcb49a":"code","e7550391":"code","0a58780e":"code","108d179d":"code","7dc2567c":"code","679b62e1":"code","2d70d796":"code","95fdfe1a":"code","d9e31d0e":"code","0cd482e8":"code","1bf85f0b":"code","16cd97cf":"code","f8431917":"code","b55d7aa2":"code","77314ae1":"code","5fe27a5e":"code","d8b5cbe9":"code","245d5fd0":"code","225fa279":"code","ad9ace88":"code","bb35bc71":"code","bde0b46f":"code","05cba146":"code","57b3a963":"code","bc224868":"code","43b93697":"code","4c633ebc":"code","4cdc06b8":"code","cb2395db":"code","63d72e02":"code","552b518d":"code","9e5ac34c":"code","3c67965d":"code","a1f5d593":"code","33e8952c":"code","e1a5e4e6":"code","908d8ad3":"code","542f0df9":"code","faa9754d":"code","7f29891a":"code","fae799d5":"code","f8f4919a":"code","734eff59":"code","9296f7ca":"code","3b0f2b40":"code","b3efe12b":"code","b9040b7e":"code","d1acd01b":"code","d91b796e":"code","ec6386cf":"code","257655c4":"code","eedadd32":"code","9ca6772e":"code","7512d07a":"code","e39b2ef6":"code","03aac30a":"code","1f527bd0":"code","55e4129d":"code","a9eb38eb":"code","61c7283b":"code","c215182c":"code","d3472335":"code","7339a0f7":"code","5c8ae266":"code","9444e9e5":"code","ebabb875":"code","8474e0b9":"code","2b58560c":"code","3e96181e":"code","7ea72021":"code","4305fad8":"code","f48d51f6":"code","a4ae0eee":"code","2b50a14a":"code","30ed84b1":"code","6fca80d9":"code","b801069d":"code","5eeb677e":"code","2ce0cc16":"code","d0a16cd7":"code","41df6fcc":"code","b9946a8a":"code","b32b76bb":"code","91d225ca":"code","eb0144a9":"markdown","b8334b23":"markdown","e19dc8f0":"markdown","dba72518":"markdown","30dcad70":"markdown","0198c297":"markdown","9a5c235d":"markdown","9c315933":"markdown","59bc66df":"markdown","d4622f16":"markdown","101be17f":"markdown","fa14ad70":"markdown","14ca96d9":"markdown","27113507":"markdown","71b37813":"markdown","38adedd2":"markdown","8631db5c":"markdown","9cf1e2d0":"markdown","933a8cdb":"markdown","951f4550":"markdown","5e48d3ca":"markdown","5d29d12d":"markdown","e5201ed9":"markdown","86452d72":"markdown","0831f39f":"markdown","8627584b":"markdown","8ce35cf0":"markdown","57aef371":"markdown","ad18bae8":"markdown","9c11c085":"markdown","c973368d":"markdown","a411c3d1":"markdown","52031146":"markdown","f602f551":"markdown","35e74460":"markdown","fc31e558":"markdown","0048b1f5":"markdown","ee6fea79":"markdown","c1deba92":"markdown","1add9cf9":"markdown","e58dd9f0":"markdown","202f39b9":"markdown","b03f3bad":"markdown","03ae0d14":"markdown","74f8246b":"markdown","be90b9e1":"markdown","029cdb1e":"markdown","e884b14b":"markdown","e541dc06":"markdown","58ad548f":"markdown","b36b8350":"markdown","5e82f812":"markdown","2bc778aa":"markdown","c58cacef":"markdown"},"source":{"cab7e6a8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')","8ab2585c":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf","d98c707c":"df.drop(['id','Unnamed: 32'],axis = 1,inplace = True)\ndf","2e17503f":"df.head()","003c6b82":"df.tail()","9eb2d789":"df.dtypes","7ca9da0d":"df.columns","476033b2":"df.shape","48c6dd9b":"df.size","72cfb708":"df.info()","c3436247":"df.describe()","4f678da0":"df.isnull().sum()","772213c3":"df.duplicated().sum()","d33823a0":"df.skew()","56940c20":"df.corr()","7c6e8168":"! pip install Autoviz","c218d195":"! pip install xlrd","0276035e":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndftc = AV.AutoViz(\n    filename='', \n    sep='' , \n    depVar='diagnosis', \n    dfte=df, \n    header=0, \n    verbose=1, \n    lowess=False, \n    chart_format='png', \n    max_rows_analyzed=300000, \n    max_cols_analyzed=30\n)","5b77f5ce":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","a922005a":"''' Plot a Shifted Correlation Matrix '''\n# Diagonal correlation is always unity & less relevant, shifted variant shows only relevant cases\ndef corrMat(df,id=False):\n    \n    corr_mat = df.corr().round(2)\n    f, ax = plt.subplots(figsize=(12,7))\n    mask = np.triu(np.ones_like(corr_mat, dtype=bool))\n    mask = mask[1:,:-1]\n    corr = corr_mat.iloc[1:,:-1].copy()\n    sns.heatmap(corr,mask=mask,vmin=-0.3,vmax=0.3,center=0, \n                cmap='RdPu_r',square=False,lw=2,annot=True,cbar=False)\n#     bottom, top = ax.get_ylim() \n#     ax.set_ylim(bottom + 0.5, top - 0.5) \n    ax.set_title('Shifted Linear Correlation Matrix')\n    \ncorrMat(df.drop(['diagnosis'],axis = 1))","6d3cdf6b":"df['diagnosis'].value_counts()","ae64fe22":"fig = make_subplots(rows=1,cols=2,\n                    subplot_titles=('Countplot',\n                                    'Percentages'),\n                    specs=[[{\"type\": \"xy\"},\n                            {'type':'domain'}]])\nfig.add_trace(go.Bar(y = df['diagnosis'].value_counts().values.tolist(), \n                      x = df['diagnosis'].value_counts().index, \n                      text=df['diagnosis'].value_counts().values.tolist(),\n              textfont=dict(size=15),\n                      textposition = 'outside',\n                      showlegend=False,\n              marker = dict(color = 'cyan',\n                            line_color = 'black',\n                            line_width=3)),row = 1,col = 1)\nfig.add_trace((go.Pie(labels=df['diagnosis'].value_counts().keys(),\n                             values=df['diagnosis'].value_counts().values,textfont = dict(size = 16),\n                     textposition='auto',\n                     showlegend = True)), row = 1, col = 2)\nfig.update_layout(title={'text': 'Diagnosis Tissue State',\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  template='plotly_white')\nfig.update_yaxes(range=[0,500])\niplot(fig)","3a8dd6d5":"fig = px.histogram(data_frame = df,\n             x = \"radius_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"texture_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs texture mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","5c99da5e":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"radius & texture mean\",\n                                    \"radius mean\",\n                                    \"texture mean\",\n                                    \"radius mean vs texture mean\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['radius_mean'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['texture_mean'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['radius_mean'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['texture_mean'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['radius_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['radius_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['texture_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['texture_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='radius_mean',\n                     y = tpc['radius_mean'],\n                     showlegend=False,\n                     text =df['radius_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='texture_mean',\n                     y = tpc['texture_mean']\n                     ,showlegend=False,\n                     text =df['texture_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"radius_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"texture_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,30]), row=2, col=2)\nfig.update_layout(title={'text': \"radius_mean vs texture_mean with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1000,\n                  template='plotly_white')\n\niplot(fig)","93d0d6e5":"fig = px.histogram(data_frame = df,\n             x = \"perimeter_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs perimeter mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"area_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs area mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","ca86051f":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"perimeter & area mean\",\n                                    \"perimeter mean\",\n                                    \"area mean\",\n                                    \"perimeter mean vs area mean\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['perimeter_mean'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['area_mean'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['perimeter_mean'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['area_mean'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['perimeter_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['perimeter_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['area_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['area_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='perimeter_mean',\n                     y = tpc['perimeter_mean'],\n                     showlegend=False,\n                     text =df['perimeter_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='area_mean',\n                     y = tpc['area_mean']\n                     ,showlegend=False,\n                     text =df['area_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"perimeter_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"area_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,1000]), row=2, col=2)\nfig.update_layout(title={'text': \"perimeter_mean vs area_mean with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1000,\n                  template='plotly_white')\n\niplot(fig)","4c09e049":"fig = px.histogram(data_frame = df,\n             x = \"smoothness_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs smoothness mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"compactness_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs compactness mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","5f416f60":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"smoothness & compactness mean\",\n                                    \"smoothness mean\",\n                                    \"compactness mean\",\n                                    \"smoothness mean vs compactness mean\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['smoothness_mean'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['compactness_mean'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['smoothness_mean'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['compactness_mean'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['smoothness_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['smoothness_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['compactness_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['compactness_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='smoothness_mean',\n                     y = tpc['smoothness_mean'],\n                     showlegend=False,\n                     text =df['smoothness_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='compactness_mean',\n                     y = tpc['compactness_mean']\n                     ,showlegend=False,\n                     text =df['compactness_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"smoothness_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"compactness_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.2]), row=2, col=2)\nfig.update_layout(title={'text': \"smoothness_mean vs compactness_mean with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","60c71809":"fig = px.histogram(data_frame = df,\n             x = \"concavity_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concavity mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"concave points_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concave points mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","e36aaf34":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"concavity & concave points mean\",\n                                    \"concavity mean\",\n                                    \"concave points mean\",\n                                    \"concavity mean vs concave points mean\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['concavity_mean'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['concave points_mean'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['concavity_mean'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['concave points_mean'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concavity_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concavity_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concave points_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concave points_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='concavity_mean',\n                     y = tpc['concavity_mean'],\n                     showlegend=False,\n                     text =df['concavity_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='concave points_mean',\n                     y = tpc['concave points_mean']\n                     ,showlegend=False,\n                     text =df['concave points_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"concavity_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"concave points_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.2]), row=2, col=2)\nfig.update_layout(title={'text': \"concavity_mean vs concave points_mean with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","cf4853b0":"fig = px.histogram(data_frame = df,\n             x = \"symmetry_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs symmetry mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"fractal_dimension_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs fractal dimension mean<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","87de933e":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"symmetry & fractal_dimension mean\",\n                                    \"symmetry mean\",\n                                    \"fractal_dimension mean\",\n                                    \"symmetry mean vs fractal_dimension mean\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['symmetry_mean'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['fractal_dimension_mean'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['symmetry_mean'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['fractal_dimension_mean'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['symmetry_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['symmetry_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['fractal_dimension_mean'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['fractal_dimension_mean'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='symmetry_mean',\n                     y = tpc['symmetry_mean'],\n                     showlegend=False,\n                     text =df['symmetry_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='fractal_dimension_mean',\n                     y = tpc['fractal_dimension_mean']\n                     ,showlegend=False,\n                     text =df['fractal_dimension_mean'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"symmetry_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"fractal_dimension_mean\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.2]), row=2, col=2)\nfig.update_layout(title={'text': \"symmetry_mean vs fractal_dimension_mean with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","180ef533":"fig = px.histogram(data_frame = df,\n             x = \"radius_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"texture_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs texture se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","518d2543":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"radius & texture Scores\",\n                                    \"radius se\",\n                                    \"texture se\",\n                                    \"radius se vs texture se\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['radius_se'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['texture_se'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['radius_se'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['texture_se'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['radius_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['radius_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['texture_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['texture_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='radius_se',\n                     y = tpc['radius_se'],\n                     showlegend=False,\n                     text =df['radius_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='texture_se',\n                     y = tpc['texture_se']\n                     ,showlegend=False,\n                     text =df['texture_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"radius_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"texture_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,1.5]), row=2, col=2)\nfig.update_layout(title={'text': \"radius_se vs texture_se with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","3fc560dc":"fig = px.histogram(data_frame = df,\n             x = \"perimeter_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs perimeter se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"area_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs area se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","800d7e9a":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"perimeter & area Scores\",\n                                    \"perimeter se\",\n                                    \"area se\",\n                                    \"perimeter se vs area se\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['perimeter_se'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['area_se'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['perimeter_se'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['area_se'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['perimeter_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['perimeter_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['area_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['area_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='perimeter_se',\n                     y = tpc['perimeter_se'],\n                     showlegend=False,\n                     text =round(tpc['perimeter_se'].mean(),1),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='area_se',\n                     y = tpc['area_se']\n                     ,showlegend=False,\n                     text =round(tpc['area_se'].mean(),1),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"perimeter_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"area_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,80]), row=2, col=2)\nfig.update_layout(title={'text': \"perimeter_se vs area_se with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","45fd8961":"fig = px.histogram(data_frame = df,\n             x = \"smoothness_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs smoothness se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"compactness_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs compactness se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","872f1611":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"smoothness & compactness Scores\",\n                                    \"smoothness se\",\n                                    \"compactness se\",\n                                    \"smoothness se vs compactness se\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['smoothness_se'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['compactness_se'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['smoothness_se'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['compactness_se'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['smoothness_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['smoothness_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['compactness_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['compactness_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='smoothness_se',\n                     y = tpc['smoothness_se'],\n                     showlegend=False,\n                     text =tpc['smoothness_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='compactness_se',\n                     y = tpc['compactness_se']\n                     ,showlegend=False,\n                     text =tpc['compactness_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"smoothness_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"compactness_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.04]), row=2, col=2)\nfig.update_layout(title={'text': \"smoothness_se vs compactness_se with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","5e7b0cad":"fig = px.histogram(data_frame = df,\n             x = \"concavity_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concavity se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"concave points_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concave points se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","3b7e6f57":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"concavity & concave points Scores\",\n                                    \"concavity se\",\n                                    \"concave points se\",\n                                    \"concavity se vs concave points se\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['concavity_se'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['concave points_se'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['concavity_se'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['concave points_se'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concavity_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concavity_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concave points_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concave points_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='concavity_se',\n                     y = tpc['concavity_se'],\n                     showlegend=False,\n                     text =tpc['concavity_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='concave points_se',\n                     y = tpc['concave points_se']\n                     ,showlegend=False,\n                     text =tpc['concave points_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"concavity_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"concave points_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.05]), row=2, col=2)\nfig.update_layout(title={'text': \"concavity_se vs concave points_se with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","67d7321f":"fig = px.histogram(data_frame = df,\n             x = \"symmetry_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs symmetry se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"fractal_dimension_se\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs fractal dimension se<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","b2909c3a":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"symmetry & fractal_dimension Scores\",\n                                    \"symmetry se\",\n                                    \"fractal_dimension se\",\n                                    \"symmetry se vs fractal_dimension se\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['symmetry_se'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['fractal_dimension_se'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['symmetry_se'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['fractal_dimension_se'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['symmetry_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['symmetry_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['fractal_dimension_se'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['fractal_dimension_se'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='symmetry_se',\n                     y = tpc['symmetry_se'],\n                     showlegend=False,\n                     text =tpc['symmetry_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='fractal_dimension_se',\n                     y = tpc['fractal_dimension_se']\n                     ,showlegend=False,\n                     text =tpc['fractal_dimension_se'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"symmetry_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"fractal_dimension_se\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.03]), row=2, col=2)\nfig.update_layout(title={'text': \"symmetry_se vs fractal_dimension_se with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","759243ae":"fig = px.histogram(data_frame = df,\n             x = \"radius_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"texture_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs texture worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","b5a18f3c":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"radius & texture Scores\",\n                                    \"radius worst\",\n                                    \"texture worst\",\n                                    \"radius worst vs texture worst\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['radius_worst'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['texture_worst'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['radius_worst'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['texture_worst'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['radius_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['radius_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['texture_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['texture_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='radius_worst',\n                     y = tpc['radius_worst'],\n                     showlegend=False,\n                     text =df['radius_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='texture_worst',\n                     y = tpc['texture_worst']\n                     ,showlegend=False,\n                     text =df['texture_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"radius_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"texture_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,30]), row=2, col=2)\nfig.update_layout(title={'text': \"radius_worst vs texture_worst with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","3bdcb49a":"fig = px.histogram(data_frame = df,\n             x = \"perimeter_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs perimeter worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"area_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs area worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","e7550391":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"perimeter & area Scores\",\n                                    \"perimeter worst\",\n                                    \"area worst\",\n                                    \"perimeter worst vs area worst\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['perimeter_worst'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['area_worst'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['perimeter_worst'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['area_worst'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['perimeter_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['perimeter_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['area_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['area_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='perimeter_worst',\n                     y = tpc['perimeter_worst'],\n                     showlegend=False,\n                     text =df['perimeter_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='area_worst',\n                     y = tpc['area_worst']\n                     ,showlegend=False,\n                     text =df['area_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"perimeter_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"area_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,1500]), row=2, col=2)\nfig.update_layout(title={'text': \"perimeter_worst vs area_worst with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","0a58780e":"fig = px.histogram(data_frame = df,\n             x = \"smoothness_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs smoothness worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"compactness_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs compactness worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","108d179d":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"smoothness & compactness Scores\",\n                                    \"smoothness worst\",\n                                    \"compactness worst\",\n                                    \"smoothness worst vs compactness worst\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['smoothness_worst'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['compactness_worst'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['smoothness_worst'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['compactness_worst'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['smoothness_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['smoothness_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['compactness_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['compactness_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='smoothness_worst',\n                     y = tpc['smoothness_worst'],\n                     showlegend=False,\n                     text =df['smoothness_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='compactness_worst',\n                     y = tpc['compactness_worst']\n                     ,showlegend=False,\n                     text =df['compactness_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"smoothness_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"compactness_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.4]), row=2, col=2)\nfig.update_layout(title={'text': \"smoothness_worst vs compactness_worst with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","7dc2567c":"fig = px.histogram(data_frame = df,\n             x = \"concavity_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concavity worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"concave points_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs concave points worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","679b62e1":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"concavity & concave points Scores\",\n                                    \"concavity worst\",\n                                    \"concave points worst\",\n                                    \"concavity worst vs concave points worst\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['concavity_worst'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['concave points_worst'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['concavity_worst'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['concave points_worst'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concavity_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concavity_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['concave points_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['concave points_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='concavity_worst',\n                     y = tpc['concavity_worst'],\n                     showlegend=False,\n                     text =df['concavity_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='concave points_worst',\n                     y = tpc['concave points_worst']\n                     ,showlegend=False,\n                     text =df['concave points_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"concavity_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"concave points_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.5]), row=2, col=2)\nfig.update_layout(title={'text': \"concavity_worst vs concave points_worst with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","2d70d796":"fig = px.histogram(data_frame = df,\n             x = \"symmetry_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs symmetry worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig1 = px.histogram(data_frame = df,\n             x = \"fractal_dimension_worst\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs fractal dimension worst<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='plotly_dark')\n\nfig.update_layout(bargap=0.2)\nfig1.update_layout(bargap = 0.2)\n\nfig.show()\nfig1.show()","95fdfe1a":"tpc = pd.DataFrame(df.groupby(['diagnosis']).mean())\ntpc['tpc'] = tpc.index\ntpc = tpc.reset_index()\nfig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"symmetry & fractal_dimension Scores\",\n                                    \"symmetry worst\",\n                                    \"fractal_dimension worst\",\n                                    \"symmetry worst vs fractal_dimension worst\"))\n\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='M']['symmetry_worst'],\n                          showlegend=False,\n                          text='M',\n                   y = df[df['diagnosis']=='M']['fractal_dimension_worst'],\n                          name='M',\n                          mode='markers',\n                  marker = dict(color= 'cornflowerblue',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\nfig.add_trace((go.Scatter(x=df[df['diagnosis']=='B']['symmetry_worst'],\n                          showlegend=False,\n                          text='B',\n                   y = df[df['diagnosis']=='B']['fractal_dimension_worst'],\n                          name='B',\n                          mode='markers',\n                  marker = dict(color= 'darkorange',\n                                size=6,\n                                opacity = 0.5))),\n              row=1,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['symmetry_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['symmetry_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=1,col=2)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='M']['fractal_dimension_worst'],\n                        showlegend=False,\n                        name = 'M',\n                        marker_color='#55EAE8'),\n              row=2,col=1)\n\nfig.add_trace(go.Violin(y =df[df['diagnosis']=='B']['fractal_dimension_worst'],\n                        showlegend=False,\n                        name = 'B',\n                        marker_color='#EA5555'),\n              row=2,col=1)\nfig.add_trace(go.Bar(x = tpc['tpc'],name='symmetry_worst',\n                     y = tpc['symmetry_worst'],\n                     showlegend=False,\n                     text =df['symmetry_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#B900FF',\n                                   opacity=0.6)),\n              row=2,col=2)\n\nfig.add_trace(go.Bar(x = tpc['tpc'],\n                     name='fractal_dimension_worst',\n                     y = tpc['fractal_dimension_worst']\n                     ,showlegend=False,\n                     text =df['fractal_dimension_worst'].mean(),\n                     textposition= 'auto',\n                     marker = dict(color = '#F7FA10',\n                                   opacity=0.6)),\n              row=2,col=2)\n\n\nfig.update_xaxes(title_text=\"symmetry_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"fractal_dimension_worst\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=1)\nfig.update_xaxes(title_text=\"diagnosis\", row=2, col=2)\nfig.update_yaxes(range = ([0,0.5]), row=2, col=2)\nfig.update_layout(title={'text': \"symmetry_worst vs fractal_dimension_worst with hue as diagnosis\",\n                         'y':1,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},height = 1000, width = 1200,\n                  template='plotly_white')\n\niplot(fig)","d9e31d0e":"df1 = df.groupby('diagnosis').agg({'radius_mean' : 'mean', 'texture_mean' : 'mean', 'perimeter_mean' : 'mean',\n       'area_mean' : 'mean', 'smoothness_mean' : 'mean', 'compactness_mean' : 'mean', 'concavity_mean' :'mean',\n       'concave points_mean' : 'mean', 'symmetry_mean' : 'mean', 'fractal_dimension_mean' : 'mean',\n       'radius_se' : 'mean', 'texture_se' : 'mean', 'perimeter_se' : 'mean', 'area_se' : 'mean', 'smoothness_se' : 'mean',\n       'compactness_se' : 'mean', 'concavity_se' : 'mean', 'concave points_se' : 'mean', 'symmetry_se' : 'mean',\n       'fractal_dimension_se' : 'mean', 'radius_worst' : 'mean', 'texture_worst' : 'mean',\n       'perimeter_worst' : 'mean', 'area_worst' : 'mean', 'smoothness_worst' : 'mean',\n       'compactness_worst' : 'mean', 'concavity_worst' : 'mean', 'concave points_worst' : 'mean',\n       'symmetry_worst' : 'mean', 'fractal_dimension_worst': 'mean'})\ndf1","0cd482e8":"px.bar(data_frame=df1.drop(['radius_worst','texture_worst',\n       'perimeter_worst' , 'area_worst','area_se','perimeter_mean','area_mean','texture_mean','radius_mean'],axis = 1), barmode='group',\n       title = \"<b>diagnosis wise Analyzing<\/b>\",template=\"plotly_dark\")","1bf85f0b":"px.bar(data_frame=df1[['radius_worst','texture_worst',\n       'perimeter_worst' , 'area_worst','area_se','perimeter_mean','area_mean','texture_mean','radius_mean']], barmode='group',\n       title = \"<b>diagnosis wise Analyzing<\/b>\",template=\"plotly_dark\")","16cd97cf":"df1.loc['B'] > df1.loc['M']","f8431917":"px.bar(data_frame=df1[['fractal_dimension_mean','texture_se','smoothness_se','symmetry_se']], barmode='group',\n       title = \"<b>diagnosis wise Analyzing<\/b>\",template=\"plotly_dark\")","b55d7aa2":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nx = df.drop('diagnosis',axis = 1)\nfor i in x.columns:\n    count_outliers(x,i)","77314ae1":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\n\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['smoothness_mean'],\n                     showlegend=False ,\n                     name = 'smoothness_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['compactness_mean'],\n                     showlegend=False ,\n                     name = 'compactness_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concavity_mean'],\n                     showlegend=False ,\n                     name = 'concaveity_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concave points_mean'],\n                     showlegend=False ,\n                     name = 'concave points_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['symmetry_mean'],\n                     showlegend=False ,\n                     name = 'symmetry_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['compactness_se'],\n                     showlegend=False ,\n                     name = 'compactness_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concavity_se'],\n                     showlegend=False ,\n                     name = 'concaveity_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concave points_worst'],\n                     showlegend=False ,\n                     name = 'concave points_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['symmetry_worst'],\n                     showlegend=False ,\n                     name = 'symmetry_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['smoothness_worst'],\n                     showlegend=False ,\n                     name = 'smoothness_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['fractal_dimension_worst'],\n                     showlegend=False ,\n                     name = 'factal_dimension_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 2000,\n                  height=450,\n                  template='plotly')\niplot(fig)","5fe27a5e":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\n\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['fractal_dimension_mean'],\n                     showlegend=False ,\n                     name = 'factal_dimension_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['smoothness_se'],\n                     showlegend=False ,\n                     name = 'smoothness_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concave points_se'],\n                     showlegend=False ,\n                     name = 'concave points_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['symmetry_se'],\n                     showlegend=False ,\n                     name = 'symmetry_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['fractal_dimension_se'],\n                     showlegend=False ,\n                     name = 'factal_dimension_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 1000,\n                  height=450,\n                  template='plotly')\niplot(fig)","d8b5cbe9":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['radius_se'],\n                     showlegend=False,\n                     name = 'radius_se',\n                     marker_color='#1760E1'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['compactness_worst'],\n                     showlegend=False ,\n                     name = 'compactness_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['concavity_worst'],\n                     showlegend=False ,\n                     name = 'concaveity_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","245d5fd0":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['texture_se'],\n                     showlegend=False ,\n                     name = 'texture_se',\n                     marker_color='#17E160'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['perimeter_se'],\n                     showlegend=False ,\n                     name = 'perimeter_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","225fa279":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['radius_mean'],\n                     showlegend=False,\n                     name = 'radius_mean',\n                     marker_color='#1760E1'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['texture_mean'],\n                     showlegend=False ,\n                     name = 'texture_mean',\n                     marker_color='#17E160'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['area_se'],\n                     showlegend=False ,\n                     name = 'area_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['radius_worst'],\n                     showlegend=False,\n                     name = 'radius_worst',\n                     marker_color='#1760E1'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['texture_worst'],\n                     showlegend=False ,\n                     name = 'texture_worst',\n                     marker_color='#17E160'),\n              row=1,col=1)\n\n\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","ad9ace88":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['perimeter_mean'],\n                     showlegend=False ,\n                     name = 'perimeter_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['perimeter_worst'],\n                     showlegend=False ,\n                     name = 'perimeter_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","bb35bc71":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"B\"))\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['area_mean'],\n                     showlegend=False ,\n                     name = 'area_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='B']['area_worst'],\n                     showlegend=False ,\n                     name = 'area_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","bde0b46f":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\n\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['smoothness_mean'],\n                     showlegend=False ,\n                     name = 'smoothness_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['compactness_mean'],\n                     showlegend=False ,\n                     name = 'compactness_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concavity_mean'],\n                     showlegend=False ,\n                     name = 'concaveity_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concave points_mean'],\n                     showlegend=False ,\n                     name = 'concave points_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['symmetry_mean'],\n                     showlegend=False ,\n                     name = 'symmetry_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['compactness_se'],\n                     showlegend=False ,\n                     name = 'compactness_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concavity_se'],\n                     showlegend=False ,\n                     name = 'concaveity_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concave points_worst'],\n                     showlegend=False ,\n                     name = 'concave points_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['symmetry_worst'],\n                     showlegend=False ,\n                     name = 'symmetry_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['smoothness_worst'],\n                     showlegend=False ,\n                     name = 'smoothness_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['fractal_dimension_worst'],\n                     showlegend=False ,\n                     name = 'factal_dimension_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 2000,\n                  height=450,\n                  template='plotly')\niplot(fig)","05cba146":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\n\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['fractal_dimension_mean'],\n                     showlegend=False ,\n                     name = 'factal_dimension_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['smoothness_se'],\n                     showlegend=False ,\n                     name = 'smoothness_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concave points_se'],\n                     showlegend=False ,\n                     name = 'concave points_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['symmetry_se'],\n                     showlegend=False ,\n                     name = 'symmetry_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['fractal_dimension_se'],\n                     showlegend=False ,\n                     name = 'factal_dimension_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 1000,\n                  height=450,\n                  template='plotly')\niplot(fig)","57b3a963":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['radius_se'],\n                     showlegend=False,\n                     name = 'radius_se',\n                     marker_color='#1760E1'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['compactness_worst'],\n                     showlegend=False ,\n                     name = 'compactness_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['concavity_worst'],\n                     showlegend=False ,\n                     name = 'concaveity_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","bc224868":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['radius_mean'],\n                     showlegend=False,\n                     name = 'radius_mean',\n                     marker_color='#1760E1'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['texture_mean'],\n                     showlegend=False ,\n                     name = 'texture_mean',\n                     marker_color='#17E160'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['perimeter_se'],\n                     showlegend=False ,\n                     name = 'perimeter_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['radius_worst'],\n                     showlegend=False,\n                     name = 'radius_worst',\n                     marker_color='#1760E1'),\n              row=1,col=1)\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['texture_worst'],\n                     showlegend=False ,\n                     name = 'texture_worst',\n                     marker_color='#17E160'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['texture_se'],\n                     showlegend=False ,\n                     name = 'texture_se',\n                     marker_color='#17E160'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['perimeter_se'],\n                     showlegend=False ,\n                     name = 'perimeter_se',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","43b93697":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['perimeter_mean'],\n                     showlegend=False ,\n                     name = 'perimeter_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['perimeter_worst'],\n                     showlegend=False ,\n                     name = 'perimeter_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","4c633ebc":"fig = make_subplots(rows=1,cols=1,shared_yaxes=True,subplot_titles=(\"M\"))\n\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['area_mean'],\n                     showlegend=False ,\n                     name = 'area_mean',\n                     marker_color='#E1E117'),\n              row=1,col=1)\nfig.add_trace(go.Box(y =df[df['diagnosis']=='M']['area_worst'],\n                     showlegend=False ,\n                     name = 'area_worst',\n                     marker_color='#E1E117'),\n              row=1,col=1)\n\nfig.update_layout(title={'text': \"Diagnosis\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  width = 800,\n                  height=450,\n                  template='plotly')      \niplot(fig)","4cdc06b8":"label_encoder = preprocessing.LabelEncoder()\n \n# Encode labels in column 'species'.\ndf['diagnosis']= label_encoder.fit_transform(df['diagnosis'])\n \ndf['diagnosis'].unique()","cb2395db":"df","63d72e02":"scaler = StandardScaler()\nscaler.fit(df.drop('diagnosis',axis = 1))","552b518d":"scaled_features = scaler.transform(df.drop('diagnosis',axis = 1))\ndf_feat = pd.DataFrame(scaled_features,columns = df.columns[1:])\ndf_feat.head()","9e5ac34c":"X = df_feat\ny = df['diagnosis']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","3c67965d":"knn = KNeighborsClassifier(n_neighbors = 9)\nknn.fit(X_train,y_train)","a1f5d593":"pred = knn.predict(X_test)\npred","33e8952c":"print(confusion_matrix(y_test,pred))","e1a5e4e6":"print(classification_report(y_test,pred))","908d8ad3":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))","542f0df9":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","faa9754d":"print(metrics.accuracy_score(y_test, pred))","7f29891a":"forest= RandomForestClassifier(n_estimators =40, random_state = 0)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)\nforest.score(X_test,y_test)","fae799d5":"print(classification_report(y_test,pred))","f8f4919a":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","734eff59":"pred = logmodel.predict(X_test)","9296f7ca":"print(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","3b0f2b40":"logmodel.score(X_test,y_test)","b3efe12b":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)","b9040b7e":"confusion_matrix(y_test, y_pred)","d1acd01b":"print(classification_report(y_test, y_pred))","d91b796e":"print(accuracy_score(y_test, y_pred))","ec6386cf":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\ny_pred = dtc.predict(X_test)","257655c4":"confusion_matrix(y_test, y_pred)","eedadd32":"print(classification_report(y_test, y_pred))","9ca6772e":"print(accuracy_score(y_test, y_pred))","7512d07a":"from sklearn.model_selection import GridSearchCV\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, y_train)","e39b2ef6":"dtc = grid_search.best_estimator_\ny_pred = dtc.predict(X_test) ","03aac30a":"confusion_matrix(y_test, y_pred)","1f527bd0":"print(classification_report(y_test, y_pred))","55e4129d":"print(accuracy_score(y_test, y_pred))","a9eb38eb":"# best parameters and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","61c7283b":"from sklearn.ensemble import AdaBoostClassifier\n\nada = AdaBoostClassifier(base_estimator = dtc)\n\nparameters = {\n    'n_estimators' : [50, 70, 90, 120, 180, 200],\n    'learning_rate' : [0.001, 0.01, 0.1, 1, 10],\n    'algorithm' : ['SAMME', 'SAMME.R']\n}\n\ngrid_search = GridSearchCV(ada, parameters, n_jobs = -1, cv = 10, verbose = 1)\ngrid_search.fit(X_train, y_train)","c215182c":"print(grid_search.best_params_)\nprint(grid_search.best_score_)","d3472335":"ada = AdaBoostClassifier(base_estimator = dtc, algorithm = 'SAMME.R', learning_rate = 0.001, n_estimators = 200)\nada.fit(X_train, y_train)","7339a0f7":"confusion_matrix(y_test, y_pred)","5c8ae266":"print(classification_report(y_test, y_pred))","9444e9e5":"print(accuracy_score(y_test, y_pred))","ebabb875":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\n\nparameters = {\n    'loss': ['deviance', 'exponential'],\n    'learning_rate': [0.001, 0.1, 1, 10],\n    'n_estimators': [100, 150, 180, 200]\n}\n\ngrid_search = GridSearchCV(gb, parameters, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, y_train)","8474e0b9":"# best parameter and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","2b58560c":"confusion_matrix(y_test, y_pred)","3e96181e":"print(classification_report(y_test, y_pred))","7ea72021":"print(accuracy_score(y_test, y_pred))","4305fad8":"sgbc = GradientBoostingClassifier(learning_rate = 0.1, subsample = 0.9, max_features = 0.75, loss = 'deviance',\n                                  n_estimators = 100)\nsgbc.fit(X_train, y_train)\ny_pred = sgbc.predict(X_test)","f48d51f6":"confusion_matrix(y_test, y_pred)","a4ae0eee":"print(classification_report(y_test, y_pred))","2b50a14a":"print(accuracy_score(y_test, y_pred))","30ed84b1":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations = 180, learning_rate = 0.1)\ncat.fit(X_train, y_train)\ny_pred = cat.predict(X_test)","6fca80d9":"confusion_matrix(y_test, y_pred)","b801069d":"print(classification_report(y_test, y_pred))","5eeb677e":"print(accuracy_score(y_test, y_pred))","2ce0cc16":"from xgboost import XGBClassifier\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, n_estimators = 10)\nxgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)","d0a16cd7":"confusion_matrix(y_test, y_pred)","41df6fcc":"print(classification_report(y_test, y_pred))","b9946a8a":"print(accuracy_score(y_test, y_pred))","b32b76bb":"feature = pd.Series(forest.feature_importances_, index = X_train.columns).sort_values(ascending = False)\nprint(feature)","91d225ca":"plt.figure(figsize = (10,6))\nsns.barplot(x = feature, y = feature.index)\nplt.title(\"Feature Importance\")\nplt.xlabel('Score')\nplt.ylabel('Features')\nplt.show()\n","eb0144a9":"># Data Visualisation","b8334b23":"> # XGB Classifier","e19dc8f0":"> #### All tumors of type M have more texture and radius mean than type B tumors\n> #### Mean of texture greather than mean of radius in both the tumors and mean values are greather in tumor M","dba72518":"># Analysis of smoothness and compactness se","30dcad70":"># Analysis of radius and texture se","0198c297":"> # Boosting: ADA boost classifier","9a5c235d":"> # Count of Outliers","9c315933":"># Stochastic Gradient Boosting (SGB)","59bc66df":"># Basic Data Cleaning","d4622f16":"> # Group by analysis of both the tumors","101be17f":"> # Encoding","fa14ad70":"#### Let us explore our target column","14ca96d9":"> # Box Plot for diagnosis with type B","27113507":"> # Hyper Parameter Tuning","71b37813":"># Analysis of symmetry and fractal dimension mean ","38adedd2":"># Loading Data Set","8631db5c":"># Analysis of symmetry and fractal dimension worst","9cf1e2d0":"> #### All tumors of type M have more perimeter and area mean than type B tumors\n> #### Mean of perimeter less than mean of area in both the tumors and mean values are greather in tumor M","933a8cdb":"># Analysis of perimeter and area worst","951f4550":"># Analysis of symmetry and factal dimension se","5e48d3ca":"># Analysis of smoothness and compactness mean","5d29d12d":"#### There is only one column(diagnosis) of object type and it is our target ariable","e5201ed9":"> # Cat boost Classifier","86452d72":"># Analysis of concavity and concave points mean","0831f39f":"># Analysis of concavity and concave points se","8627584b":"> # prediction of Breast Cancer using randomforest classifier","8ce35cf0":"># Analysis of radius and texture mean","57aef371":"> # Prediction of Breast Cancer with decisiontree classifier","ad18bae8":"># Gradient Boosting Classifier","9c11c085":">#### We have data which has more non-cancerous symptoms\n>#### 62.7% of data gives us non- cancerous symptoms (B type Bengin)\n>#### 37.3% of data gives us cancerous symptoms(M type Maligant)","c973368d":"> #### In four cases mean values of Tumor B is greather than Tumor M (fractal_dimension_mean,texture_se,smoothness_se,symmetry_se)","a411c3d1":"># Importing Libraries","52031146":"># Analysis of smoothness and compactness worst","f602f551":"> #### All cancer tumors of type M have radius less than 18 and most of them are between 12-12.99\n> #### All cancer tumors of type B have radius greather than 10 and most of them are between 19-19.99\n> #### upto 19.99 texture mean value cancer tumors of type B are more\n> #### From 19.99 texture mean value cancer tumors of type M are more","35e74460":"#### There are no null values in any of the column..!!!","fc31e558":"## Let us check in any case does the mean value of B tumor is greather than M","0048b1f5":"> # Feature Importance","ee6fea79":"> # Feature Scaling","c1deba92":"># Analysis of perimeter and area mean","1add9cf9":"># Data Visualisation using Autoviz","e58dd9f0":"># Prediction of Breast Cancer using Logistic regression","202f39b9":">#### What are B and M..??\n>#### B is Benign tumors and they are not considered cancerous: their cells are close to normal in appearance, they grow slowly, and they do not invade nearby tissues or spread to other parts of the body.\n>#### M is Malignant tumors and they are cancerous.","b03f3bad":"#### Now lets take 2 columns at a time and analyse","03ae0d14":"#### Let us remove Id column and last column named unnamed: 32 since they are not useful for our classification","74f8246b":"> # Prediction of Breast Cancer using support vector classifier","be90b9e1":"#### Since it was a cancer prediction problem dont look at accuracy check your F1 score, recall and precision","029cdb1e":"># Exploratory Data Analysis","e884b14b":"> # Feature Selection","e541dc06":"># Analysis of perimeter and area se","58ad548f":"># Analysis of radius and texture worst","b36b8350":"> #### All cancer tumors of type M have perimeter mean less than 110-115 and most of them are between 75-80.\n> #### All cancer tumors of type B have radius greather than 70 and most of them are between 130-135\n> #### upto 700 area mean value cancer tumors of type B are more\n> #### From 700 texture mean value cancer tumors of type M are more","5e82f812":"># Analysis of concavity and concave points worst","2bc778aa":"> # Prediction of Breast Cancer using KNN","c58cacef":"> # Box Plot for diagnosis with type M"}}