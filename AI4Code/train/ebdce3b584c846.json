{"cell_type":{"47b8685b":"code","3f973c40":"code","6f2e7dd3":"code","c15058f0":"code","25fecd80":"code","cc9a6739":"markdown","9a9c8f05":"markdown","9c12e02b":"markdown","68964494":"markdown"},"source":{"47b8685b":"import pandas as pd\nimport numpy as np\nimport joblib\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\n\n","3f973c40":"df = pd.read_csv(\"..\/input\/30days-folds\/train_folds.csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n\ndf1 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_train_1.csv\")\ndf2 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_train_2.csv\")\ndf3 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_train_3.csv\")\n\ndf_test1 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_test_1.csv\")\ndf_test2 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_test_2.csv\")\ndf_test3 = pd.read_csv(\"..\/input\/30dml-stacking-5cv\/base_test_3.csv\")\n\ndf = df.merge(df1, on=\"id\", how=\"left\")\ndf = df.merge(df2, on=\"id\", how=\"left\")\ndf = df.merge(df3, on=\"id\", how=\"left\")\n\ndf_test = df_test.merge(df_test1, on=\"id\", how=\"left\")\ndf_test = df_test.merge(df_test2, on=\"id\", how=\"left\")\ndf_test = df_test.merge(df_test3, on=\"id\", how=\"left\")","6f2e7dd3":"useful_features = [\"pred_1\", \"pred_2\", \"pred_3\"]\ndf_test = df_test[useful_features]\n\nfinal_predictions = []\nscores = []\nfor fold in range(5):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    #model = LinearRegression(fit_intercept=False)\n    model= Lasso(alpha=0.0001,precompute=True,max_iter=1000,\n            positive=True, random_state=9999, selection='random', fit_intercept=True)\n    \n\n    model.fit(xtrain, ytrain)\n    \n    #print(model.coef_)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    rmse = mean_squared_error(yvalid, preds_valid, squared=False)\n    print(fold, rmse)\n    scores.append(rmse)\n\nprint(np.mean(scores), np.std(scores))","c15058f0":"#0.7163095767796752","25fecd80":"sample_submission.target = np.mean(np.column_stack(final_predictions), axis=1)\nsample_submission.to_csv(\"submission.csv\", index=False)","cc9a6739":"# Stacking Ensemble: 30 Days of ML\n**Importing libraries:**","9a9c8f05":"**Training the Meta Linear Regression model:**","9c12e02b":"**Getting Pretrained Base Learners:**\n> The base learners are XGBoost and LightGBM models optimized with Optuna.","68964494":"**Submitting to the leaderboard:**"}}