{"cell_type":{"e96ff5b6":"code","03a65ebc":"code","313e8e7d":"code","0b5d02a4":"code","26e4c1e0":"code","07c35bbc":"code","12de5023":"code","10073deb":"code","366009e5":"code","3483f6be":"code","7eb589f6":"code","7740fe69":"markdown"},"source":{"e96ff5b6":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix, precision_score, recall_score\nfrom sklearn.svm import SVC","03a65ebc":"df_ks = pd.read_csv(\"..\/input\/ks-projects-201801.csv\")\ndisplay(df_ks.head())\ndf_ks.describe()","313e8e7d":"#\u8a08\u7b97\u304c\u91cd\u3044\u306e\u3067\u30e9\u30f3\u30c0\u30e05000\u30b5\u30f3\u30d7\u30eb\u30014000\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30011000\u30c6\u30b9\u30c8\ndf = df_ks.sample(n=5000, random_state=10)\n\n#\u4f7f\u3048\u308b\u5909\u6570\u306e\u307f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3059\u308b\ndrop_col = ['pledged','backers','usd pledged','usd_pledged_real','usd_goal_real']\ndf = df.drop(drop_col, axis=1)\n\n#nan\u3092\u524a\u9664\ndf = df.dropna()\n\n#\u958b\u59cb\u304b\u3089\u7de0\u3081\u5207\u308a\u65e5\u307e\u3067\u306eUNIX\u6642\u9593\uff08\u79d2\uff09\u3092\u8a08\u7b97\u3057\u3066\u8ffd\u52a0\ndf['period'] = pd.to_datetime(df['deadline']).map(pd.Timestamp.timestamp) - pd.to_datetime(df['launched']).map(pd.Timestamp.timestamp)\ndisplay(df.head())\ndf_train  = df[:4000]\ndisplay(df_train.head())\ndf_test = df[4000:]\ndisplay(df_test.head())","0b5d02a4":"#\u76ee\u6a19\u91d1\u984d\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u8868\u793a\u3002\u30ad\u30ea\u306e\u3044\u3044\u5024\u6bb5\u306e\u3068\u304d\u5931\u6557\u7387\u304c\u4e0a\u304c\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\nsccss = df_train[df_train['state']==\"successful\"]['goal'].values\nothrs = df_train[df_train['state']!=\"successful\"]['goal'].values\n\nplt.title('distribution of goal')\nplt.hist([x for x in sccss if 0<x and x<10000],bins=100,color=\"#5F9BFF\", alpha=.5,range=(0,10000))\nplt.hist([x for x in othrs if 0<x and x<10000],bins=100,color=\"#F8766D\", alpha=.5,range=(0,10000))\n\nplt.xlabel(\"goal\")\nplt.ylabel(\"fleq\")\n\nplt.show()","26e4c1e0":"#\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u4ed8\u4e0e\n#display(df_train)\ndf_train['label'] = 0\ndf_test['label'] = 0\ndf_train = df_train.reset_index()\ndf_test = df_test.reset_index()\n#print(df_train['state'])\n\n#display(df_main['label'])\n#state\u304csuccessful\u306e\u3068\u304d\u306f1,\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306f-1\u306e\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\nfor i in range(len(df_train)):\n    if df_train['state'][i] == 'successful':\n        df_train['label'][i] = True\n    else:\n        df_train['label'][i] = False\ndisplay(df_train)\n\nfor i in range(len(df_test)):\n    if df_test['state'][i] == 'successful':\n        df_test['label'][i] = True\n    else:\n        df_test['label'][i] = False\ndisplay(df_test)","07c35bbc":"#goal\u91d1\u984d\u304c500\u30c9\u30eb\u306e\u500d\u6570\u306e\u3068\u304d1\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d0\ndf_train['multiple_500'] = 0\ndf_test['multiple_500'] = 0\n\nfor i in range(len(df_train)):\n    if df_train['goal'][i]%500 == 0:\n        df_train['multiple_500'][i] = 1\n        \nfor i in range(len(df_test)):\n    if df_test['goal'][i]%500 == 0:\n        df_test['multiple_500'][i] = 1","12de5023":"#\u5358\u8a9e\u306e\u30ab\u30a6\u30f3\u30c8\n\nword_count_suc = {}\nword_count_otr = {}\nfor i in range(len(df_train)):\n    if df_train['state'][i] == 'successful':\n        for word in df_train['name'][i].split():\n            if not word in word_count_suc:\n                word_count_suc[word] = 0\n            word_count_suc[word] += 1\n#print(word_count_train)\n\nfor i in range(len(df_train)):\n    if df_train['state'][i] != 'successful':\n        for word in df_train['name'][i].split():\n            if not word in word_count_otr:\n                word_count_otr[word] = 0\n            word_count_otr[word] += 1\n\n#\u51fa\u73fe\u56de\u6570\u9806\u306b\u30bd\u30fc\u30c8\ncount_sorted_suc = sorted(word_count_suc.items(), key=lambda x:x[1], reverse=True)\ncount_sorted_otr = sorted(word_count_otr.items(), key=lambda x:x[1], reverse=True)\n\n#print(count_sorted_suc)\n\n#\u6210\u529f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u591a\u3044\u5358\u8a9e\u3001\u305d\u3046\u3067\u306a\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u591a\u3044\u5358\u8a9e\u3092\u62bd\u51fa\n#\u3069\u3061\u3089\u306b\u3082\u51fa\u3066\u304f\u308b\u5358\u8a9e\u306f\u9664\u5916\nsuccessful_words = list(set([count_sorted_suc[i][0] for i in range(200)]) - set([count_sorted_otr[i][0] for i in range(300)]))\nunsuccessful_words = list(set([count_sorted_otr[i][0] for i in range(200)]) - set([count_sorted_suc[i][0] for i in range(300)]))\n\n#\u9069\u5207\u3067\u306a\u3055\u305d\u3046\u306a\u5358\u8a9e\u3092\u9664\u5916\nsuccessful_words.remove('2012')\nsuccessful_words.remove('2014')\nsuccessful_words.remove('2017')\nunsuccessful_words.remove('(Canceled)')\nunsuccessful_words.remove('(Suspended)')\nprint(successful_words)\nprint(unsuccessful_words)\n","10073deb":"#\u4e0a\u8a18\u6210\u529f\u7387\u306b\u95a2\u308f\u308a\u305d\u3046\u306a\u5358\u8a9e\u3092\u307e\u3068\u3081\u308b\nwords = successful_words\nwords.extend(unsuccessful_words)\n\n#\u4e0a\u8a18\u5358\u8a9e\u304c\u51fa\u73fe\u3057\u305f\u30891\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306f0\nfor word in words:\n    df_train[word] = 0\n    df_test[word] = 0\n    for i in range(len(df_train)):\n        for word_in_name in df_train['name'][i].split():\n            if word_in_name == word:\n                df_train[word][i] = 1\n    for j in range(len(df_test)):\n        for word_in_name in df_test['name'][j].split():\n            if word_in_name == word:\n                df_test[word][j] = 1\ndisplay(df_test)","366009e5":"#goal\u91d1\u984d\u3001\u958b\u59cb\u65e5\u304b\u3089\u7d42\u4e86\u65e5\u307e\u3067\u306e\u671f\u9593\u3001\u8a2d\u5b9a\u91d1\u984d\u304c500\u30c9\u30eb\u306e\u500d\u6570\u304b\u3001\u983b\u51fa\u5358\u8a9e\u306b\u5f15\u3063\u304b\u304b\u308b\u304b\u3000\u3092\u8aac\u660e\u5909\u6570\u3068\u3059\u308b\nvaliables = words\nvaliables.extend(['goal','period','multiple_500'])\n\ny_train = df_train[\"label\"].values\n#print(y_train)\nfor i in range(len(y_train)):\n    if y_train[i] == True:\n        y_train[i] = 1\n    else:\n        y_train[i] = 0\ny = y_train.astype('int')\nX = df_train[valiables].values\nclf = SGDClassifier(loss='log', penalty='none', max_iter=10000, fit_intercept=True, random_state=1234)\nclf.fit(X, y)\n","3483f6be":"#\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\nX_test = df_test[valiables].values\ny_test_tmp = df_test['label'].values\ny_test = y_test_tmp\nfor i in range(len(y_test_tmp)):\n    if y_test[i] == True:\n        y_test[i] = 1\n    else:\n        y_test[i] = 0\ny_test = y_test.astype('int')\n\n# \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\ny_est = clf.predict(X_test)\n\n# \u5bfe\u6570\u5c24\u5ea6\u3092\u8868\u793a\nprint('\u5bfe\u6570\u5c24\u5ea6 = {:.3f}'.format(- log_loss(y_test, y_est)))\n\n# \u6b63\u7b54\u7387\u3092\u8868\u793a\nprint('\u6b63\u7b54\u7387 = {:.3f}%'.format(100 * accuracy_score(y_test, y_est)))","7eb589f6":"#SVM\n#y_train_svm = y_train\n#for i in range(len(y_train)):\n#    if y_train[i] == True:\n#        y_train_svm[i] = 1\n#    else:\n#        y_train_svm[i] = -1\n#y_train_svm = y_train_svm.astype('int')\n#print(y_train_svm)\n#print(np.shape(X))\n\n#C = 5\n#clf = SVC(C=C, kernel=\"linear\")\n#clf.fit(X, y_train_svm)","7740fe69":"\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u4f7f\u3048\u308b\u306e\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u958b\u59cb\u6642\u306b\u6c7a\u307e\u3063\u3066\u3044\u308b\u3082\u306e\u3002\n\n\u3053\u3053\u3067\u306f\n\nID\nname\ncategory\nmain_category\ncurrency\uff08\u901a\u8ca8\uff09\ndeadline\uff08\u7de0\u3081\u5207\u308a\uff09\ngoal\uff08\u76ee\u6a19\u984d\uff09\nlaunched\uff08\u958b\u59cb\u65e5\uff09\ncountry\uff08\u5730\u57df\uff09\n\n\u3067\u3042\u308b\u3002"}}