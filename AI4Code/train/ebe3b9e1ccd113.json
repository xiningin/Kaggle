{"cell_type":{"34973712":"code","967a16fa":"code","b8691900":"code","6ad7a003":"code","10ccc224":"code","42812a3e":"code","78fd1be1":"code","e84b6e41":"code","6beb386f":"code","18df3af8":"code","1499b93c":"code","d6a36c7a":"code","1f10799d":"code","4f3469fe":"code","f1b52048":"code","0a2731ca":"code","45435ec5":"code","f0f76b71":"code","9ae09aef":"code","5f9e9061":"code","8f93c014":"code","8455ddf0":"code","cb0d5aa1":"code","c1216169":"code","4132a707":"code","208124b1":"code","d71aaaf2":"code","0df135ca":"code","f4eb8f0a":"code","c7eb8e39":"code","7b731237":"code","33c4a4ff":"code","3c6d1747":"code","76fdd238":"code","96d6284e":"code","99a60b11":"code","31d0211b":"code","93e30b3a":"code","475cef41":"code","7b01d64b":"code","b4ac448a":"code","4d45205d":"code","9984fdd9":"code","c71c7eb3":"markdown"},"source":{"34973712":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","967a16fa":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","b8691900":"train.head()","6ad7a003":"train.info()","10ccc224":"train.shape","42812a3e":"train.isnull().sum()","78fd1be1":"test.isnull().sum()\ntest.shape","e84b6e41":"test.head()","6beb386f":"train.describe()","18df3af8":"train[\"Survived\"].value_counts()","1499b93c":"# sns.pairplot(train)\n# plt.show()","d6a36c7a":"# sns.heatmap(train)","1f10799d":"890*.5\n","4f3469fe":"def bar_graph(features):\n    survived = train[train[\"Survived\"]==1][features].value_counts()\n    dead = train[train[\"Survived\"]==0][features].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index=['survived' , 'dead']\n    df.plot(kind='bar',stacked=True)","f1b52048":"bar_graph(\"Sex\")","0a2731ca":"# (train[train[\"Survived\"]==1][\"Sex\"].value_counts())","45435ec5":"bar_graph(\"Pclass\")","f0f76b71":"bar_graph(\"SibSp\")","9ae09aef":"bar_graph(\"Parch\")","5f9e9061":"bar_graph(\"Embarked\")","8f93c014":"train[\"Age\"].fillna(train[\"Age\"].mean() , inplace=True)\ntest[\"Age\"].fillna(test[\"Age\"].mean() , inplace=True)\n# train[\"Age\"] =train[\"Age\"].fillna(train[\"Age\"].mean() )\ntrain.isnull().sum()","8455ddf0":"train.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"], axis = 1 , inplace =True)\ntest.drop([\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\"], axis = 1 , inplace =True)","cb0d5aa1":"train.dropna(axis = 0,inplace=True)\ntest.dropna(axis = 0,inplace=True)","c1216169":"train","4132a707":"train.loc[train[\"Sex\"]==\"male\" , \"Sex\"]=0\ntrain.loc[train[\"Sex\"]==\"female\" , \"Sex\"]=1\n\ntrain.loc[train[\"Embarked\"]==\"S\" , \"Embarked\"]=0\ntrain.loc[train[\"Embarked\"]==\"Q\" , \"Embarked\"]=1\ntrain.loc[train[\"Embarked\"]==\"C\" , \"Embarked\"]=2\n\n\ntest.loc[test[\"Sex\"]==\"male\" , \"Sex\"]=0\ntest.loc[test[\"Sex\"]==\"female\" , \"Sex\"]=1\n\ntest.loc[test[\"Embarked\"]==\"S\" , \"Embarked\"]=0\ntest.loc[test[\"Embarked\"]==\"Q\" , \"Embarked\"]=1\ntest.loc[test[\"Embarked\"]==\"C\" , \"Embarked\"]=2","208124b1":"train.columns","d71aaaf2":"train.head()","0df135ca":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])","f4eb8f0a":"prediction = clf.predict(test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']])","c7eb8e39":"clf.score(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])","7b731237":"from sklearn.tree import DecisionTreeClassifier","33c4a4ff":"sk  = DecisionTreeClassifier(criterion=\"entropy\" , max_depth=5)\nsk.fit(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])\nsk.predict(test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']])","3c6d1747":"sk.score(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])","76fdd238":"!pip install pydotplus\n!pip install --upgrade scikit-learn==0.20.3\n!pip install mglearn","96d6284e":"import pydotplus\n\nfrom sklearn.externals.six import StringIO\nfrom IPython.display import Image\nfrom sklearn.tree import export_graphviz","99a60b11":"dot_data = StringIO()\nexport_graphviz(sk,out_file=dot_data,filled=True,rounded=True)","31d0211b":"['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']","93e30b3a":"\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(graph.create_png())","475cef41":"!pip install --upgrade scikit-learn","7b01d64b":"from sklearn.ensemble import  RandomForestClassifier","b4ac448a":"rf = RandomForestClassifier(n_estimators=10 , criterion=\"entropy\" , max_depth=5)","4d45205d":"rf.fit(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])","9984fdd9":"rf.score(train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']], train[\"Survived\"])","c71c7eb3":"## Decision tree\n"}}