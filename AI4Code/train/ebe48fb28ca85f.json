{"cell_type":{"8f9db45e":"code","86e20884":"code","24e7257b":"code","8f088bdc":"code","88bacbbd":"code","eaa164f7":"code","bae2ac99":"code","a2bea13c":"code","c591c03b":"code","57a67ace":"code","38bb9b07":"code","09774ebf":"code","b01059b5":"code","c0c2d553":"code","6e26ebc2":"code","ee942226":"code","7a6d57a4":"code","7552f504":"code","c1c65bf7":"code","2308e4e4":"code","606825b8":"code","b1284947":"code","4a3e46d0":"code","244968b0":"code","162e165e":"code","1ec3d17d":"code","00cfb492":"code","bf0161cb":"code","48012a81":"code","355b0772":"code","9c9e7252":"code","d06636d5":"code","283bb84f":"code","a05d86fa":"code","02885979":"code","6e06d4c5":"code","b422b4fd":"code","50e44546":"code","1cbf4c19":"code","71e3f5bb":"code","a4e0fda0":"code","388bfe14":"code","ae8d5732":"code","a9516d30":"code","b17dc27e":"code","8fc0a684":"code","d70c37b8":"code","1ac7b9b4":"code","83dc44c5":"code","6bc260fd":"code","53f71121":"code","f374b896":"code","6095d976":"code","e852332e":"code","ae8c0d28":"code","6252751a":"code","4dd16401":"code","754b1cb7":"code","3fcbe070":"code","2ef8b92d":"code","314b45e6":"code","20cb82e4":"code","8bcd207e":"code","a59ca1f2":"code","717227db":"code","952a2add":"code","41b6286e":"code","87a8f6ff":"code","7997981b":"code","88b29653":"code","4abf6bc0":"code","4ae72bfe":"code","2637c82f":"code","ba26d48f":"code","9ebf516b":"code","3bf52e0d":"code","3c86dbeb":"code","da01a322":"code","1489b496":"code","b89e2e3f":"code","e835cde1":"code","9835e2a8":"code","07126ab1":"code","31752805":"code","d40c3e3a":"code","ae55d7ac":"code","4855b6ca":"code","8d987c31":"code","f346cf30":"code","419f032d":"code","0ecb03ec":"code","6b4a8fec":"code","7d2b1a97":"code","2f8ecf7b":"code","39576e3d":"code","9a35e4de":"code","20f25695":"code","c15be4c8":"code","39e41f54":"code","7018de69":"code","7e47391c":"code","b63f54b6":"code","15f07d62":"code","2443c384":"code","24d65914":"code","23122075":"code","d563375d":"code","85e70c6a":"code","d962caf3":"code","5c07d47f":"code","9714de84":"code","a356bd46":"code","61d2d66b":"code","3ba40e24":"code","9d40dcc2":"code","ed0eb637":"code","9837e76d":"code","be07ef1a":"code","351d2de5":"code","f6256182":"code","1682cd4f":"code","36a4cd05":"code","e9812a5e":"code","36b2b7d8":"code","64ca8d1f":"code","0e177528":"code","f4dc5f32":"code","43179cda":"code","d43c8d31":"code","d7128854":"code","78db1f19":"code","a5371d38":"code","0e68e41c":"code","525ef118":"code","779e8d92":"code","80915702":"code","b35f6d78":"code","8020458c":"code","2c6f9ab7":"markdown","cab5d3c5":"markdown","f79313ee":"markdown","eb8aeaa1":"markdown","9438c1cd":"markdown","7510b206":"markdown","702e8308":"markdown","98e2ce3d":"markdown","64771c19":"markdown","285bc06c":"markdown","3cfd1ddf":"markdown","68f48144":"markdown","66b368a2":"markdown","7aedd2e3":"markdown","40516eb4":"markdown","642ab4eb":"markdown","73cd817b":"markdown","1b298d84":"markdown","0b338ef3":"markdown","16d7d450":"markdown","2a46775e":"markdown","6de39483":"markdown","fdb069bc":"markdown","eb4063cc":"markdown","de56d72b":"markdown","6d2c9182":"markdown","4feb8dd5":"markdown","a21b6d8c":"markdown","7d3fafeb":"markdown","251870ea":"markdown","a6e0f998":"markdown","539451fc":"markdown","f88b5e53":"markdown","2aa40393":"markdown","be5ecbdd":"markdown","455523ba":"markdown","d86b165a":"markdown","502a7043":"markdown","ba535452":"markdown","79fce97c":"markdown","a8f8c57c":"markdown","934eea5d":"markdown","3f6e9413":"markdown","ead62290":"markdown","22759315":"markdown","0e480d49":"markdown","8bef017b":"markdown","9d41d0db":"markdown","045f02a9":"markdown","306c6c84":"markdown","36e2abfd":"markdown","5f37127d":"markdown","ca9aebe8":"markdown","02d144af":"markdown","faf469bd":"markdown","bbc1969d":"markdown","6de7f456":"markdown","cc15417a":"markdown","e3a6cd09":"markdown","dda251d3":"markdown","03df8c3d":"markdown","3c8603fb":"markdown","9ce8e9b7":"markdown","7221b8cc":"markdown","db34789b":"markdown","c98ec07c":"markdown","2990724c":"markdown","9a9cf23a":"markdown","61d01e77":"markdown","a3d59612":"markdown","73b9cb7d":"markdown","f298d15e":"markdown","6054e64e":"markdown","39c3ef3c":"markdown","646a34fe":"markdown","435731c6":"markdown","f38694b2":"markdown","8607308d":"markdown","a1306f03":"markdown","8f56825a":"markdown","81d0f084":"markdown","4847f238":"markdown","cacc2e17":"markdown","82db7650":"markdown","0c6c8583":"markdown","b7d5966e":"markdown","d38f6168":"markdown","f7a25a00":"markdown","43203176":"markdown","c55e0201":"markdown","f3acff73":"markdown","0437b47d":"markdown","a4e86bb9":"markdown","b913e16f":"markdown","a52f1218":"markdown","13d28c7f":"markdown","72ae4fee":"markdown","43a79dc8":"markdown","32d22ed6":"markdown","8475fc87":"markdown","0977104e":"markdown","591812ff":"markdown","b9c5e594":"markdown","483e9d45":"markdown","0a93de41":"markdown","896b8cad":"markdown","58b695ca":"markdown","81db924c":"markdown","7c815e71":"markdown","55ddd9f5":"markdown","78a9f4ca":"markdown","f04ba7cd":"markdown","eae38c43":"markdown","81f1c056":"markdown","ec8c9a2f":"markdown","7d1799e5":"markdown","938a23a8":"markdown","29cc45e1":"markdown","53765f9a":"markdown","506d07e8":"markdown","c91d7fbd":"markdown","3b93455e":"markdown","6eaac785":"markdown","28462554":"markdown","8b358fda":"markdown","0e06af7b":"markdown","961126fd":"markdown","7a76eb92":"markdown","f7f170c4":"markdown","bd5141ac":"markdown","a233d522":"markdown","dce50c95":"markdown","2596789a":"markdown","d404b658":"markdown","bdf77e79":"markdown","40f153fd":"markdown","16b89400":"markdown","ccd09a27":"markdown","3c454d06":"markdown","9cddb6a2":"markdown","81ac2d6e":"markdown","affc527c":"markdown","ba1a5f0b":"markdown","4d5d3eb8":"markdown","7a507a8e":"markdown","db5f9d90":"markdown","80dc596b":"markdown","81e88398":"markdown","cd18bfb6":"markdown","98cce114":"markdown","fffe564a":"markdown","71197750":"markdown","dc571685":"markdown","c3719a8f":"markdown","772cc3a0":"markdown","058db8bd":"markdown","baee5e0d":"markdown","afd1736b":"markdown","60695f98":"markdown","605e9270":"markdown","be2d187d":"markdown","da168813":"markdown","577cf66f":"markdown","c9d6fc2a":"markdown","e69f087f":"markdown","89b63d0f":"markdown","dafa2814":"markdown","74fc6ee0":"markdown","07d1cf35":"markdown","a672a1be":"markdown","e7c096b9":"markdown","d32d2ddb":"markdown","f08e68ec":"markdown"},"source":{"8f9db45e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image # converting images into arrays\n%matplotlib inline\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches # needed for waffle Charts\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","86e20884":"df_can = pd.read_excel('\/kaggle\/input\/immigration-to-canada-ibm-dataset\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2)\n\nprint ('Data read into a pandas dataframe!')","24e7257b":"df_can.head()\n# tip: You can specify the number of rows you'd like to see as follows: df_can.head(10) ","8f088bdc":"df_can.tail()","88bacbbd":"df_can.info()","eaa164f7":"df_can.columns.values ","bae2ac99":"df_can.index.values","a2bea13c":"print(type(df_can.columns))\nprint(type(df_can.index))","c591c03b":"df_can.columns.tolist()\ndf_can.index.tolist()\n\nprint (type(df_can.columns.tolist()))\nprint (type(df_can.index.tolist()))","57a67ace":"# size of dataframe (rows, columns)\ndf_can.shape    ","38bb9b07":"# in pandas axis=0 represents rows (default) and axis=1 represents columns.\ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndf_can.head(2)","09774ebf":"df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)\ndf_can.columns","b01059b5":"df_can['Total'] = df_can.sum(axis=1)","c0c2d553":"df_can.isnull().sum()","6e26ebc2":"df_can.describe()","ee942226":"df_can.Country  # returns a series","7a6d57a4":"df_can[['Country', 1980, 1981, 1982, 1983, 1984, 1985]] # returns a dataframe\n# notice that 'Country' is string, and the years are integers. \n# for the sake of consistency, we will convert all column names to string later on.","7552f504":"df_can.set_index('Country', inplace=True)\n# tip: The opposite of set is reset. So to reset the index, we can use df_can.reset_index()","c1c65bf7":"df_can.head(3)","2308e4e4":"# optional: to remove the name of the index\ndf_can.index.name = None\ndf_can.head(3)","606825b8":"# 1. the full row data (all columns)\nprint(df_can.loc['Japan'])\n\n# alternate methods\nprint(df_can.iloc[87])\nprint(df_can[df_can.index == 'Japan'].T.squeeze())","b1284947":"# 2. for year 2013\nprint(df_can.loc['Japan', 2013])\n\n# alternate method\nprint(df_can.iloc[87, 36]) # year 2013 is the last column, with a positional index of 36","4a3e46d0":"# 3. for years 1980 to 1985\nprint(df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]])\nprint(df_can.iloc[87, [3, 4, 5, 6, 7, 8]])","244968b0":"df_can.columns = list(map(str, df_can.columns))\n# [print (type(x)) for x in df_can.columns.values] #<-- uncomment to check type of column headers","162e165e":"# useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nyears","1ec3d17d":"# 1. create the condition boolean series\ncondition = df_can['Continent'] == 'Asia'\nprint(condition)","00cfb492":"# 2. pass this condition into the dataFrame\ndf_can[condition]","bf0161cb":"# we can pass mutliple criteria in the same line. \n# let's filter for AreaNAme = Asia and RegName = Southern Asia\n\ndf_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]\n\n# note: When using 'and' and 'or' operators, pandas requires we use '&' and '|' instead of 'and' and 'or'\n# don't forget to enclose the two conditions in parentheses","48012a81":"print('data dimensions:', df_can.shape)\nprint(df_can.columns)\ndf_can.head(2)","355b0772":"# we are using the inline backend\n%matplotlib inline \n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","9c9e7252":"print ('Matplotlib version: ', mpl.__version__)","d06636d5":"print(plt.style.available)\nmpl.style.use(['ggplot']) ","283bb84f":"haiti = df_can.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column\nhaiti.head()\n","a05d86fa":"haiti.plot()","02885979":"haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting\nhaiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of immigrants')\nplt.xlabel('Years')\n\nplt.show() # need this line to show the updates made to the figure","6e06d4c5":"haiti.plot(kind='line')\n\nplt.title('Immigration from Haiti')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\n# annotate the 2010 Earthquake. \n# syntax: plt.text(x, y, label)\nplt.text(2000, 6000, '2010 Earthquake') # see note below\n\nplt.show() ","b422b4fd":"df_can.head(80)","50e44546":"\ndf = df_can.loc[['India','China'],years]\ndf = df.transpose()\n### type your answer here\ndf.index = df.index.map(int)\ndf.plot(kind='line')\nplt.title('Immigration from China and India')\nplt.ylabel('Number of Immigrations')\nplt.xlabel('Years')\nplt.show()","1cbf4c19":"### type your answer here\ndf_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)\ndf_top5 = df_can.head(5)\ndf_top5 = df_top5[years].transpose()\n \n# print(df_top5)\n \ndf_top5.index = df_top5.index.map(int)\ndf_top5.plot(kind='line', figsize=(14,8))\n \nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigration')\nplt.xlabel('Years')\nplt.show()","71e3f5bb":"df_can.sort_values(['Total'], ascending = False, axis = 0, inplace = True)\n\n#get the top5 entries\ndf_top5 = df_can.head()\n\n#transpose the dataframe\ndf_top5 = df_top5[years].transpose()\n\ndf_top5.head()","a4e0fda0":"df_top5.index = df_top5.index.map(int)#change the index value to type integer\ndf_top5.plot(kind = 'area',stacked=False, figsize = (20,10),#pass a tuple (x,y) size\n            )\nplt.title('Immigration Trend of Top5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\nplt.show()","388bfe14":"df_top5.plot(kind='area', \n             alpha=0.25, # 0-1, default value a= 0.5\n             stacked=False,\n             figsize=(20, 10),\n            )\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","ae8d5732":"# option 2: preferred option with more flexibility\nax = df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10))\n\nax.set_title('Immigration Trend of Top 5 Countries')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","a9516d30":"df_can.sort_values(['Total'], ascending = True, axis = 0, inplace = True)\n\n#get the top5 entries\ndf_least5 = df_can.head()\n\n#transpose the dataframe\ndf_least5 = df_least5[years].transpose()\n\ndf_least5.head()","b17dc27e":"\ndf_least5.index = df_least5.index.map(int)#change the index value to type integer\ndf_least5.plot(kind='area', \n             alpha=0.45, # 0-1, default value a= 0.5\n             stacked=True,\n             figsize=(20, 10),\n            )\n\nplt.title('Immigration Trend of 5 Countries contributed the least to Canada')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","8fc0a684":"# option 2: preferred option with more flexibility\nax = df_least5.plot(kind='area',stacked=False, alpha=0.55, figsize=(20, 10))\n\nax.set_title('Immigration Trend of 5 Countries contributed the least to Canada')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')","d70c37b8":"# let's quickly view the 2013 data\ndf_can.sort_values(['Total'], ascending = False, axis = 0, inplace = True)\n\ndf_can['2013'].head()","1ac7b9b4":"# np.histogram returns 2 values\ncount, bin_edges = np.histogram(df_can['2013'])\n\nprint(count) # frequency count\nprint(bin_edges) # bin ranges, default = 10 bins","83dc44c5":"df_can['2013'].plot(kind='hist', figsize=(8, 5))\n\nplt.title('Histogram of Immigration from 195 Countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","6bc260fd":"# 'bin_edges' is a list of bin intervals\ncount, bin_edges = np.histogram(df_can['2013'])\n\ndf_can['2013'].plot(kind='hist', figsize=(8, 5), xticks=bin_edges)\n\nplt.title('Histogram of Immigration from 195 countries in 2013') # add a title to the histogram\nplt.ylabel('Number of Countries') # add y-label\nplt.xlabel('Number of Immigrants') # add x-label\n\nplt.show()","53f71121":"# let's quickly view the dataset \ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years]","f374b896":"# generate histogram\ndf_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()","6095d976":"# transpose dataframe\ndf_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\ndf_t.head()","e852332e":"# generate histogram\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","ae8c0d28":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\ndf_t.plot(kind ='hist', \n          figsize=(10, 6),\n          bins=15,\n          alpha=0.6,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen']\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","6252751a":"count, bin_edges = np.histogram(df_t, 15)\nxmin = bin_edges[0] - 10   #  first bin value is 31.0, adding buffer of 10 for aesthetic purposes \nxmax = bin_edges[-1] + 10  #  last bin value is 308.0, adding buffer of 10 for aesthetic purposes\n\n# stacked Histogram\ndf_t.plot(kind='hist',\n          figsize=(10, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True,\n          xlim=(xmin, xmax)\n         )\n\nplt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants') \n\nplt.show()","4dd16401":"df_cof = df_can.loc[['Greece', 'Albania', 'Bulgaria'], years]\ndf_cof = df_cof.transpose()\ncount, bin_edges = np.histogram(df_cof, 15)\ndf_cof.plot(kind ='hist',\n            figsize=(10, 6),\n            bins=15,\n            alpha=0.35,\n            xticks=bin_edges,\n            color=['coral', 'darkslateblue', 'mediumseagreen']\n            )\nplt.title('Histogram of Immigration from Greece, Albania, and Bulgaria from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\nplt.show()","754b1cb7":"# step 1: get the data\ndf_iceland = df_can.loc['Iceland', years]\ndf_iceland.head()","3fcbe070":"# step 2: plot data\ndf_iceland.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","2ef8b92d":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) # rotate the bars by 90 degrees\n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\nplt.show()","314b45e6":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90) \n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',                      # s: str. will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n            )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=72.5,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.show()","20cb82e4":"df_can.sort_values(by='Total', ascending=True, inplace=True)\n\n# get top 15 countries\ndf_top15 = df_can['Total'].tail(15)\ndf_top15","8bcd207e":" # generate plot\ndf_top15.plot(kind='barh', figsize=(12, 12), color='steelblue')\nplt.xlabel('Number of Immigrants')\nplt.title('Top 15 Conuntries Contributing to the Immigration to Canada between 1980 - 2013')\n\n# annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')\n    \nplt.show()    ","a59ca1f2":"# group countries by continents and apply sum() function \ndf_continents = df_can.groupby('Continent', axis=0).sum()\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(df_can.groupby('Continent', axis=0)))\n\ndf_continents.head()","717227db":"# autopct create %, start angle represent starting point\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(5, 6),\n                            autopct='%1.1f%%', # add in percentages\n                            startangle=90,     # start angle 90\u00b0 (Africa)\n                            shadow=True,       # add shadow      \n                            )\n\nplt.title('Immigration to Canada by Continent [1980 - 2013]')\nplt.axis('equal') # Sets the pie chart to look like a circle.\n\nplt.show()","952a2add":"colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","41b6286e":"explode_list = [0.1, 0, 0, 0, 0.1, 0.2] # ratio for each continent with which to offset each wedge.\n\ndf_continents['2013'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,                 # turn off labels on pie chart\n                            pctdistance=1.12,            # the ratio between the pie center and start of text label\n                            explode=explode_list         # 'explode' lowest 3 continents\n                            )\n\nplt.title('Immigration to Canada by Continent in 2013', y=1.12) \nplt.axis('equal') \n\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","87a8f6ff":"# to get a dataframe, place extra square brackets around 'Japan'.\ndf_japan = df_can.loc[['Japan'], years].transpose()\ndf_japan.head()","7997981b":"df_japan.plot(kind='box', figsize=(8, 6))\n\nplt.title('Box plot of Japanese Immigrants from 1980 - 2013')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","88b29653":"df_japan.describe()","4abf6bc0":"# to get a dataframe, place extra square brackets around 'Japan'.\ndf_CI = df_can.loc[['China','India'], years].transpose()\ndf_CI.head()","4ae72bfe":"df_CI.plot(kind='box', figsize=(8, 6))\n\nplt.title('Box plots of Immigrants from China and India (1980 - 2013)')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","2637c82f":"df_CI.describe()","ba26d48f":"# horizontal box plots\ndf_CI.plot(kind='box', figsize=(10, 7), color='blue', vert=False)\n\nplt.title('Box plots of Immigrants from China and India (1980 - 2013)')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","9ebf516b":"fig = plt.figure() # create figure\n\nax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)\nax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**\n\n# Subplot 1: Box plot\ndf_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1\nax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')\nax0.set_xlabel('Number of Immigrants')\nax0.set_ylabel('Countries')\n\n# Subplot 2: Line plot\ndf_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')\nax1.set_ylabel('Number of Immigrants')\nax1.set_xlabel('Years')\n\nplt.show()","3bf52e0d":"df_top15 = df_can.sort_values(['Total'], ascending=False, axis=0).head(15)\ndf_top15","3c86dbeb":"# create a list of all years in decades 80's, 90's, and 00's\nyears_80s = list(map(str, range(1980, 1990))) \nyears_90s = list(map(str, range(1990, 2000))) \nyears_00s = list(map(str, range(2000, 2010)))\n\n# slice the original dataframe df_can to create a series for each decade\ndf_80s = df_top15.loc[:, years_80s].sum(axis=1) \ndf_90s = df_top15.loc[:, years_90s].sum(axis=1) \ndf_00s = df_top15.loc[:, years_00s].sum(axis=1)\n\n# merge the three series into a new data frame\nnew_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) \n\n # display dataframe\nnew_df.head()","da01a322":"new_df.describe()","1489b496":"new_df.plot(kind='box', figsize=(10, 6))\n\nplt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')\n\nplt.show()","b89e2e3f":"# let's check how many entries fall above the outlier threshold \nnew_df[new_df['2000s']> 209611.5]","e835cde1":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type int (useful for regression later on)\ndf_tot.index = map(int, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace = True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","9835e2a8":"df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","07126ab1":"x = df_tot['year']      # year on x-axis\ny = df_tot['total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\n\nfit","31752805":"df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n# plot line of best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) ","d40c3e3a":"df_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'],years].transpose()\n\n# create df_total by summing across three countries for each year\ndf_total = pd.DataFrame(df_countries.sum(axis=1))\n\n# reset index in place\ndf_total.reset_index(inplace=True)\n\n # rename columns\ndf_total.columns = ['year', 'total']\n\n# change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n\n# show resulting dataframe\ndf_total.head()","ae55d7ac":" # generate scatter plot\ndf_total.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\n # add title and label to axes\nplt.title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n # show plot\nplt.show()","4855b6ca":"df_can_t = df_can[years].transpose() # transposed dataframe\n\n# cast the Years (the index) to type int\ndf_can_t.index = map(int, df_can_t.index)\n\n# let's label the index. This will automatically be the column name when we reset the index\ndf_can_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndf_can_t.reset_index(inplace=True)\n\n# view the changes\ndf_can_t.head()","8d987c31":"# normalize Brazil data\nnorm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) \/ (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())\n\n# normalize Argentina data\nnorm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) \/ (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())","f346cf30":"# Brazil\nax0 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Brazil',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_brazil * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\n# Argentina\nax1 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='Argentina',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_argentina * 2000 + 10,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')\nax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')","419f032d":" # normalize China data\nnorm_china = (df_can_t['China'] - df_can_t['China'].min()) \/ (df_can_t['China'].max() - df_can_t['China'].min())\n\n# normalize India data\nnorm_india = (df_can_t['India'] - df_can_t['India'].min()) \/ (df_can_t['India'].max() - df_can_t['India'].min())","0ecb03ec":" # China\nax0 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='China',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_china * 2000 + 10,  # pass in weights \n                    xlim=(1975, 2015)\n                   )\n\n# India\nax1 = df_can_t.plot(kind='scatter',\n                    x='Year',\n                    y='India',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_india * 2000 + 10,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from China and India from 1980 - 2013')\nax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')","6b4a8fec":"# let's create a new dataframe for these three countries \ndf_dsn = df_can.loc[['Denmark', 'Norway', 'Sweden'], :]\n\n# let's take a look at our dataframe\ndf_dsn","7d2b1a97":"# compute the proportion of each category with respect to the total\ntotal_values = sum(df_dsn['Total'])\ncategory_proportions = [(float(value) \/ total_values) for value in df_dsn['Total']]\n\n# print out proportions\nfor i, proportion in enumerate(category_proportions):\n    print (df_dsn.index.values[i] + ': ' + str(proportion))","2f8ecf7b":"width = 40 # width of chart\nheight = 10 # height of chart\n\ntotal_num_tiles = width * height # total number of tiles\n\nprint ('Total number of tiles is ', total_num_tiles)","39576e3d":"# compute the number of tiles for each catagory\ntiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n# print out number of tiles per category\nfor i, tiles in enumerate(tiles_per_category):\n    print (df_dsn.index.values[i] + ': ' + str(tiles))","9a35e4de":"# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width))\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index\n        \nprint ('Waffle chart populated!')","20f25695":"waffle_chart","c15be4c8":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()","39e41f54":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])","7018de69":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\n\n# compute cumulative sum of individual categories to match color schemes between chart and legend\nvalues_cumsum = np.cumsum(df_dsn['Total'])\ntotal_values = values_cumsum[len(values_cumsum) - 1]\n\n# create legend\nlegend_handles = []\nfor i, category in enumerate(df_dsn.index.values):\n    label_str = category + ' (' + str(df_dsn['Total'][i]) + ')'\n    color_val = colormap(float(values_cumsum[i])\/total_values)\n    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n# add legend to chart\nplt.legend(handles=legend_handles,\n           loc='lower center', \n           ncol=len(df_dsn.index.values),\n           bbox_to_anchor=(0., -0.2, 0.95, .1)\n          )","7e47391c":"def create_waffle_chart(categories, values, height, width, colormap, value_sign=''):\n\n    # compute the proportion of each category with respect to the total\n    total_values = sum(values)\n    category_proportions = [(float(value) \/ total_values) for value in values]\n\n    # compute the total number of tiles\n    total_num_tiles = width * height # total number of tiles\n    print ('Total number of tiles is', total_num_tiles)\n    \n    # compute the number of tiles for each catagory\n    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n    # print out number of tiles per category\n    for i, tiles in enumerate(tiles_per_category):\n        print (df_dsn.index.values[i] + ': ' + str(tiles))\n    \n    # initialize the waffle chart as an empty matrix\n    waffle_chart = np.zeros((height, width))\n\n    # define indices to loop through waffle chart\n    category_index = 0\n    tile_index = 0\n\n    # populate the waffle chart\n    for col in range(width):\n        for row in range(height):\n            tile_index += 1\n\n            # if the number of tiles populated for the current category \n            # is equal to its corresponding allocated tiles...\n            if tile_index > sum(tiles_per_category[0:category_index]):\n                # ...proceed to the next category\n                category_index += 1       \n            \n            # set the class value to an integer, which increases with class\n            waffle_chart[row, col] = category_index\n    \n    # instantiate a new figure object\n    fig = plt.figure()\n\n    # use matshow to display the waffle chart\n    colormap = plt.cm.coolwarm\n    plt.matshow(waffle_chart, cmap=colormap)\n    plt.colorbar()\n\n    # get the axis\n    ax = plt.gca()\n\n    # set minor ticks\n    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)\n    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n    # add dridlines based on minor ticks\n    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\n    plt.xticks([])\n    plt.yticks([])\n\n    # compute cumulative sum of individual categories to match color schemes between chart and legend\n    values_cumsum = np.cumsum(values)\n    total_values = values_cumsum[len(values_cumsum) - 1]\n\n    # create legend\n    legend_handles = []\n    for i, category in enumerate(categories):\n        if value_sign == '%':\n            label_str = category + ' (' + str(values[i]) + value_sign + ')'\n        else:\n            label_str = category + ' (' + value_sign + str(values[i]) + ')'\n            \n        color_val = colormap(float(values_cumsum[i])\/total_values)\n        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n    # add legend to chart\n    plt.legend(\n        handles=legend_handles,\n        loc='lower center', \n        ncol=len(categories),\n        bbox_to_anchor=(0., -0.2, 0.95, .1)\n    )","b63f54b6":"width = 40 # width of chart\nheight = 10 # height of chart\n\ncategories = df_dsn.index.values # categories\nvalues = df_dsn['Total'] # correponding values of categories\n\ncolormap = plt.cm.coolwarm # color map class","15f07d62":"create_waffle_chart(categories, values, height, width, colormap)","2443c384":"# # install wordcloud\n# !conda install -c conda-forge wordcloud==1.4.1 --yes\n\n# import package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nprint ('Wordcloud is installed and imported!')","24d65914":"STOPWORDS =  ['were', 'the', 'amp', 'dont', 'got', 'know', 'gon', 'na', 'wan', 'like', 'im', 'hers', 'why', 'over', \"'d\",'our', 'these', 'nevertheless', 'its', 'them', 'empty', 'how', 'whereas', 'whether', 'fifteen', 'about', 'four', 'give', 'otherwise', 'move', 'do', 'say', '\u2018ve', 'hence', 'n\u2018t', 'between', 'bottom', 'some', 'against', 'whole', 'i', 'into', 'they', 'already', 'she', 'either', 'an', 'both', 'him', 'due', 'using', 'five', 'across', 'front', 'in', 'off', 'only', 'really', 'twelve', 'twenty', 'show', 'whereupon', '\u2018m', 'n\u2019t', 'himself', '\u2019m', 'from', 'often', 'three', 'various', 'thereupon', 'should', 'put', 'take', 'who', 'above', 'their', 'been', 'towards', 'however', \"n't\", 'her', 'go', 'thereby', 'just', 'yourselves', 'become', 'thru', 'while', 'nowhere', 'neither', 'anyway', 'because', 'ca', 'which', 'moreover', 'forty', 'besides', 'us', 'more', 'third', 'wherein', 'whoever', 'used', 'every', 'whose', 'onto', 'your', 'hereafter', 'itself', 'sometimes', 'name', 'too', 'own', 'somewhere', 'there', 'we', 'you', '\u2019ve', 'ourselves', 'sixty', 'would', 'first', 'must', 'whereafter', 'wherever', 'his', 'around', 'has', 'yours', 'became', 'doing','the', 'below', 'then', 'everyone', 'else', 'any', 'latterly', 'noone', 'part', 'might', \"'ve\", 'becoming', 'same', 'top', 'yourself', 'he', 'each', 'anyone', 'my', 'seeming', 'six', 'the', 'during', 'afterwards', 'throughout', 'formerly', 'seem', 'therefore', 'another', 'keep', 'without', 'being', 'can', 'had', 'per', \"'s\", 'other', 'side', '\u2019s', 'also', 'herself', '\u2019ll', 'eight', 'what', 'please', 'a', 'therein', 'back', 'me', 'never', 'not', 'does', 'enough', 'meanwhile', 'toward', 'even', 'get', 'and', 'it', 'perhaps', 'this', 'regarding', 'somehow', 'cannot', 'anyhow', 'through', 'whenever', 'thereafter', 'rather', 'by', 'still', 'where', 'than', 'made', 'of', 'will', 'within', 'are', 'amongst', 'although', 'former', 'full', 'nobody', 'was', 'to', 'is', 'at', 'hundred', 'all', 'on', 'such', 'after', 'almost', 'most', 'no', 'our', 'see', 'thus', 'upon', \"'ll\", 'whence', 'make', '\u2018s', 'could', 'quite', 'or', 'beyond', 'thence', 'mostly', 'though', 'alone', 'for', 'under', 'seemed', 'until', 'much', 'nine', 'least', 'that', 'nor', 'further', 'themselves', 'whatever', 'whom', 'anywhere', 'myself', 'eleven', 'none', 'with', 'as', 'have', '\u2018ll', \"'m\", 'up', 'if', 'several', 'whereby', 'now', 'always', 'amount', 'done', 'hereupon', 'others', 'may', 'one', 'everything', 'so', 'hereby', 'anything', 'fifty', 'last', 'am', 'beforehand', 'few', 'ever', 'together', 'unless', 'ten', 'behind', 'when', 'those', 'mine', 'everywhere', 'be', 'less', 'nothing', 'something', 'very', \"'re\", 'here', '\u2018re', 'since', 'seems', 'down', 'did', 'before', 'serious', '\u2018d', '\u2019d', 'many', 'call', 'along', 'once', 'herein', 'out', 'namely', 'someone', 'becomes', 'whither', 're', 'two', 'but', 'again', 'elsewhere', 'well', 'next', 'sometime', 'indeed', 'ours', 'yet', '\u2019re', 'via', 'latter', 'except', 'among', 'beside']\n","23122075":"stopwords = set(STOPWORDS)","d563375d":"# instantiate a word cloud object\ntext = \" \".join(str(each) for each in df_can.Region)\nalice_wc = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\nalice_wc.generate(text)","85e70c6a":"# display the word cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","d962caf3":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\n# display the cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","5c07d47f":"import seaborn as sns\n","9714de84":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\ndf_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","a356bd46":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot)","61d2d66b":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green')","3ba40e24":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","9d40dcc2":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","ed0eb637":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\n\nax.set(xlabel='Year', ylabel='Total Immigration') # add x- and y-labels\nax.set_title('Total Immigration to Canada from 1980 - 2013') # add title","9837e76d":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","be07ef1a":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('ticks') # change background to white background\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","351d2de5":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","f6256182":"### type your answer here\n\n# create df_countries dataframe\ndf_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\n\n # create df_total by summing across three countries for each year\ndf_total = pd.DataFrame(df_countries.sum(axis=1))\n\n # reset index in place\ndf_total.reset_index(inplace=True)\n\n # rename columns\ndf_total.columns = ['year', 'total']\n\n # change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n\n# define figure size\nplt.figure(figsize=(15, 10))\n\n# define background style and font size\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\n# generate plot and add title and axes labels\nax = sns.regplot(x='year', y='total', data=df_total, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigrationn from Denmark, Sweden, and Norway to Canada from 1980 - 2013')","1682cd4f":"# !conda install -c conda-forge folium=0.5.0 --yes\nimport folium\n\nprint('Folium installed and imported!')","36a4cd05":"# define the world map\nworld_map = folium.Map()\n\n# display world map\nworld_map","e9812a5e":"# define the world map centered around Canada with a low zoom level\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4)\n\n# display world map\nworld_map","36b2b7d8":"# define the world map centered around Canada with a higher zoom level\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=8)\n\n# display world map\nworld_map","64ca8d1f":"# define Mexico's geolocation coordinates\nmexico_latitude = 23.6345 \nmexico_longitude = -102.5528\n\n# define the world map centered around mexico with a higher zoom level\nmexico_map = folium.Map(location=[mexico_latitude, mexico_longitude], zoom_start=4)\n\n# display world map\nmexico_map","0e177528":"# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Toner')\n\n# display map\nworld_map","f4dc5f32":"# create a Stamen Toner map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Terrain')\n\n# display map\nworld_map","43179cda":"# create a world map with a Mapbox Bright style.\nworld_map = folium.Map(tiles='Mapbox Bright')\n\n# display the map\nworld_map","d43c8d31":"# define Mexico's geolocation coordinates\nmexico_latitude = 23.6345 \nmexico_longitude = -102.5528\n\n# define the world map centered around mexico with a higher zoom level\nmexico_map = folium.Map(location=[mexico_latitude, mexico_longitude], zoom_start=6, tiles='Stamen Terrain')\n\n# display world map\nmexico_map","d7128854":"\ndf_can = pd.read_excel('\/kaggle\/input\/canadian-immigration-from-1980-to-2013\/Canada.xlsx',\n                     sheet_name='Canada by Citizenship',\n                     skiprows=range(20),\n                     skipfooter=2)\n\nprint('Data downloaded and read into a dataframe!')","78db1f19":"df_can.head()","a5371d38":"# print the dimensions of the dataframe\nprint(df_can.shape)","0e68e41c":"# clean up the dataset to remove unnecessary columns (eg. REG) \ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\n\n# let's rename the columns so that they make sense\ndf_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)\n\n# for sake of consistency, let's also make all column labels of type string\ndf_can.columns = list(map(str, df_can.columns))\n\n# add total column\ndf_can['Total'] = df_can.sum(axis=1)\n\n# years that we will be using in this lesson - useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint ('data dimensions:', df_can.shape)","525ef118":"df_can.head()","779e8d92":"# download countries geojson file\n!wget --quiet https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/world_countries.json -O world_countries.json\n    \nprint('GeoJSON file downloaded!')","80915702":"import folium\n\nworld_geo = r'world_countries.json' # geojson file\n\n# create a plain world map\nworld_map = folium.Map(location=[0, 0], zoom_start=2, tiles='Mapbox Bright')","b35f6d78":"\n# world_geo = r'world_countries.json' # geojson file\n# # create a plain world map\n# world_map = folium.Map(location=[0, 0], zoom_start=2, tiles='Mapbox Bright')\n\n# # generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\n# folium.Choropleth(\n#     geo_data=world_geo,\n#     data=df_can,\n#     columns=['Country', 'Total'],\n#     key_on='feature.properties.name',\n#     fill_color='YlOrRd', \n#     fill_opacity=0.7, \n#     line_opacity=0.2,\n#     legend_name='Immigration to Canada'\n# ).add_to(world_map)\n\n# # display map\n\n# world_map","8020458c":"# # generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\n\n# world_map.choropleth(\n#     geo_data=world_geo,\n#     data=df_can,\n#     columns=['Country', 'Total'],\n#     key_on='feature.properties.name',\n#     fill_color='YlOrRd', \n#     fill_opacity=0.7, \n#     line_opacity=0.2,\n#     legend_name='Immigration to Canada'\n# )\n\n# # display map\n# world_map","2c6f9ab7":"**Horizontal Bar Plot**\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to label categetorical variables.\n\n**Question:** Using the scripting layter and the df_can dataset, create a horizontal bar plot showing the total number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.\n\nStep 1: Get the data pertaining to the top 15 countries.","cab5d3c5":"Now to create a `waffle` chart, all we have to do is call the function `create_waffle_chart`. Let's define the input parameters:","f79313ee":"**Let's start with a case study:**\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and aout three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a Line plot:\n\n**Question:** Plot a line graph of immigration from Haiti using df.plot().\n\nFirst, we will extract the data series for Haiti.","eb8aeaa1":"We can check to see how many null objects we have in the dataset as follows:","9438c1cd":"#  Box Plots \n\nA box plot is a way of statistically representing the distribution of the data through five main dimensions:\n\n* **Minimun:** Smallest number in the dataset.\n* **First quartile:** Middle number between the minimum and the median.\n* **Second quartile (Median):** Middle number of the (sorted) dataset.\n* **Third quartile:** Middle number between median and maximum.\n* **Maximum:** Highest number in the dataset.\n","7510b206":"Awesome! Now that the `word` cloud is created, let's visualize it.","702e8308":"\nThat does not look right!\n\nDon't worry, you'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.\n\nInstead of plotting the population frequency distribution of the population for the 3 countries, pandas instead plotted the population frequency distribution for the years.\n\nThis can be easily fixed by first transposing the dataset, and then plotting as shown below.","98e2ce3d":"Folium is a powerful Python library that helps you create several types of Leaflet maps. The fact that the Folium results are interactive makes this library very useful for dashboard building.\n\nFrom the official Folium documentation page:\n\n> Folium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library. Manipulate your data in Python, then visualize it in on a Leaflet map via Folium.\n\n> Folium makes it easy to visualize data that's been manipulated in Python on an interactive Leaflet map. It enables both the binding of data to a map for choropleth visualizations as well as passing Vincent\/Vega visualizations as markers on the map.\n\n> The library has a number of built-in tilesets from OpenStreetMap, Mapbox, and Stamen, and supports custom tilesets with Mapbox or Cloudmade API keys. Folium supports both GeoJSON and TopoJSON overlays, as well as the binding of data to those overlays to create choropleth maps with color-brewer color schemes.","64771c19":"One of the key benefits of box plots is comparing the distribution of multiple datasets. In one of the previous labs, we observed that China and India had very similar immigration trends. Let's analyize these two countries further using box plots.\n\n**Question:** Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.","285bc06c":"# Regression Plots <a id=\"10\"><\/a>\n\n\n> Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics. You can learn more about *seaborn* by following this [link](https:\/\/seaborn.pydata.org\/) and more about *seaborn* regression plots by following this [link](http:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html).","3cfd1ddf":"Step 1: Normalize the data pertaining to China and India.","68f48144":"# Waffle Charts <a id=\"6\"><\/a>\n\n\nA `waffle chart` is an interesting visualization that is normally created to display progress toward goals. It is commonly an effective option when you are trying to add interesting visualization features to a visual that consists mainly of cells, such as an Excel dashboard.","66b368a2":"Unfortunately, unlike R, `waffle` charts are not built into any of the Python visualization libraries. Therefore, we will learn how to create them from scratch.","7aedd2e3":"Step 2: Create the normalized weights. \n\nThere are several methods of normalizations in statistics, each with its own use. In this case, we will use [feature scaling](https:\/\/en.wikipedia.org\/wiki\/Feature_scaling) to bring all values into the range [0,1]. The general formula is:\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/Mod3Fig3FeatureScaling.png\" align=\"center\">\n\nwhere *`X`* is an original value, *`X'`* is the normalized value. The formula sets the max value in the dataset to 1, and sets the min value to 0. The rest of the datapoints are scaled to a value between 0-1 accordingly.\n","40516eb4":"Before we proceed: let's review the changes we have made to our dataframe.","642ab4eb":"# Visualizing Data using Matplotlib\n\nMatplotlib: Standard Python Visualization Library","73cd817b":"Based on the calculated proportions, Denmark will occupy 129 tiles of the `waffle` chart, Norway will occupy 77 tiles, and Sweden will occupy 194 tiles.","1b298d84":"Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.","0b338ef3":"**Step 6.** Prettify the chart.","16d7d450":"# Pie Charts \n\nA pie chart is a circualr graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. You are most likely already familiar with pie charts as it is widely used in business and media. We can create pie charts in Matplotlib by passing in the **kind=pie** keyword.\n\nLet's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for the entire time period from 1980 to 2013.","2a46775e":"### A. Stamen Toner Maps\n\nThese are high-contrast B+W (black and white) maps. They are perfect for data mashups and exploring river meanders and coastal zones. \n\nLet's create a Stamen Toner map of canada with a zoom level of 4.","6de39483":"Step 2: Plot data:\n\n* Use kind='barh' to generate a bar chart with horizontal bars.\n* Make sure to choose a good size for the plot and to label your axes and to give the plot a title.\n* Loop through the countries and annotate the immigrant population using the anotate function of the scripting interface.","fdb069bc":"Select Column\n\nThere are two ways to filter on a column name:\n\nMethod 1: Quick and easy, but only works if the column name does NOT have spaces or special characters.\n\n    df.column_name \n        (returns series)\n       \nMethod 2: More robust, and can filter on multiple columns.\n\n    df['column']  \n        (returns series)\n    df[['column 1', 'column 2']] \n        (returns dataframe)       \n","eb4063cc":"**Question:** Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.\n\n**Note:** You might need to play with the explore values in order to fix any overlapping slice values.","de56d72b":"Example: Let's view the number of immigrants from Japan (row 87) for the following scenarios: \n1. The full row data (all columns) \n\n2. For year 2013 \n\n3. For years 1980 to 1985","6d2c9182":"As expected, the matrix consists of three categories and the total number of each category's instances matches the total number of tiles allocated to each category.","4feb8dd5":"Let's start by importing Matplotlib and Matplotlib.pyplot as follows:","a21b6d8c":"**Question**: Create a map of Mexico to visualize its hill shading and natural vegetation. Use a zoom level of 6.","7d3fafeb":"Let's create a Stamen Terrain map of Canada with zoom level 4.","251870ea":"What is a line plot and why use it?\n\nA line chart or line plot is a type of plot which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields. Use line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.","a6e0f998":"![](https:\/\/www.w3resource.com\/w3r_images\/pandas-dataframe-transpose-1.png)","539451fc":"\n**Question:** Use the scripting layer to create a stacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.45.","f88b5e53":"With just a few lines of code, you were able to quickly identify and visualize the spike in immigration!\n\nQuick note on x and y values in plt.text(x, y, label):\n\n Since the x-axis (years) is type 'integer', we specified x as a year. The y axis (number of immigrants) is type 'integer', so we can just specify the value y = 6000.\n \n    plt.text(2000, 6000, '2010 Earthquake') # years stored as type int\n\nIf the years were stored as type 'string', we would need to specify x as the index position of the year. Eg 20th index is year 2000 since it is the 20th year with a base year of 1980.\n\n    plt.text(20, 6000, '2010 Earthquake') # years stored as type int\n","2aa40393":"The above visual is not very clear, the numbers and text overlap in some instances. Let's make a few modifications to improve the visuals:\n\n* Remove the text labels on the pie chart by passing in *legend* and add it as a seperate legend using *plt.legend()*.\n* Push out the percentages to sit just outside the pie chart by passing in *pctdistance* parameter.\n* Pass in a custom set of *colors* for continents by passing in colors parameter.\n* **Explode** the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Carribbean) by pasing in *explode* parameter.\n","be5ecbdd":"**Question:** Use the scripting layer to display the immigration distribution for Greece, Albania, and Bulgaria for years 1980 - 2013? Use an overlapping plot with 15 bins and a transparency value of 0.35.","455523ba":"China and India are both considered as outliers since their population for the decade exceeds 209,611.5.\n\nThe box plot is an advanced visualizaiton tool, and there are many options and customizations that exceed the scope of this notebook. Please refer to [Matplotlib documentation](http:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.boxplot) on box plots for more information.\n\n","d86b165a":"# Histograms\n\nA histogram is a way of representing the frequency distribution of numeric dataset. The way it works is it partitions the x-axis into bins, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.","502a7043":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/Mod3Fig4SplitApplyCombine.png\" height=400 align=\"center\">","ba535452":"**Step 5.** Map the `waffle` chart matrix into a visual.","79fce97c":"> <font color='purple'>**Side Note:**\nWe could use df_can['2013'].plot.hist(), instead. In fact, throughout this lesson, using some_data.plot(kind='type_plot', ...) is equivalent to some_data.plot.type_plot(...). That is, passing the type of the plot as argument or method behaves the same.<\/font>","a8f8c57c":"Another cool feature of Folium is that you can generate different map styles.","934eea5d":"Example: Let's try filtering on the list of countries ('Country').","3f6e9413":"Let's resize the cloud so that we can see the less frequent words a little better.","ead62290":"Step 3: Plot the data. \n- To plot two different scatter plots in one plot, we can include the axes one plot into the other by passing it via the `ax` parameter. \n- We will also pass in the weights using the `s` parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore we will:\n    - multiply weights by 2000 to scale it up on the graph, and,\n    - add 10 to compensate for the min value (which has a 0 weight and therefore scale with x2000).","22759315":"Step 2: Generate the scatter plot by plotting the total versus year in df_total.","0e480d49":"To view the dimensions of the dataframe, we use the .shape parameter.","8bef017b":"# Choropleth Maps <a id=\"8\"><\/a>\n\nA `Choropleth` map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed on the map, such as population density or per-capita income. The choropleth map provides an easy way to visualize how a measurement varies across a geographic area or it shows the level of variability within a region. Below is a `Choropleth` map of the US depicting the population by square mile per state.\n\n<img src = \"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/2000_census_population_density_map_by_state.png\" width = 600> ","9d41d0db":"# Word Clouds <a id=\"8\"><\/a>\n\n\n`Word` clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud.","045f02a9":"![matplotlib](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSCxplEZIBShDOEEpz_O-U0U_NhN42ARJvmT5TNsAK18XT97z56&usqp=CAU)\n![matplotlib](https:\/\/matplotlib.org\/_static\/logo2_compressed.svg)","306c6c84":"Now it would very inefficient to repeat these seven steps every time we wish to create a `waffle` chart. So let's combine all seven steps into one function called *create_waffle_chart*. This function would take the following parameters as input:\n\n> 1. **categories**: Unique categories or classes in dataframe.\n> 2. **values**: Values corresponding to categories or classes.\n> 3. **height**: Defined height of waffle chart.\n> 4. **width**: Defined width of waffle chart.\n> 5. **colormap**: Colormap class\n> 6. **value_sign**: In order to make our function more generalizable, we will add this parameter to address signs that could be associated with a value such as %, $, and so on. **value_sign** has a default value of empty string.","36e2abfd":"Step 1: Get the data:\n   1. Create a dataframe the consists of the numbers associated with Denmark, Norway, and Sweden only. Name it **df_countries**.\n   2. Sum the immigration numbers across all three countries for each year and turn the result into a dataframe. Name this new dataframe **df_total**.\n   3. Reset the index in place.\n   4. Rename the columns to **year** and **total**.\n   5. Display the resulting dataframe.","5f37127d":"Let's make a few modifications to improve the impact and aesthetics of the previous plot:\n\n* increase the bin size to 15 by passing in bins parameter\n* set transparency to 60% by passing in alpha paramemter\n* label the x-axis by passing in x-label paramater\n* change the colors of the plots by passing in color parameter","ca9aebe8":"We can immediately make a few key observations from the plot above:\n\n1. The minimum number of immigrants is around 200 (min), maximum number is around 1300 (max), and median number of immigrants is around 900 (median).\n2. 25% of the years for period 1980 - 2013 had an annual immigrant count of ~500 or fewer (First quartile).\n3. 75% of the years for period 1980 - 2013 had an annual immigrant count of ~1100 or fewer (Third quartile).\n\nWe can view the actual numbers by calling the **describe()** method on the dataframe.","02d144af":"# Scatter Plots <a id=\"10\"><\/a>\n\nA `scatter plot` (2D) is a useful method of comparing variables against each other. `Scatter` plots look similar to `line plots` in that they both map independent and dependent variables on a 2D graph. While the datapoints are connected together by a line in a line plot, they are not connected in a scatter plot. The data in a scatter plot is considered to express a trend. With further analysis using tools like regression, we can mathematically calculate this relationship and use it to predict trends outside the dataset.\n\nLet's start by exploring the following:\n\nUsing a `scatter plot`, let's visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.","faf469bd":"We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, as follows:","bbc1969d":"And there you go! What a good looking *delicious* `waffle` chart, don't you think?","6de7f456":"As you can see, the higher the zoom level the more the map is zoomed into the given center.","cc15417a":"And let's increase the size of markers so they match the new size of the figure, and add a title and x- and y-labels.","e3a6cd09":"Create a word cloud object and generate a word cloud","dda251d3":"The output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression `y= a*x + b`, our output has 2 elements `[5.56709228e+03, -1.09261952e+07]` with the the slope in position 0 and intercept in position 1. \n\nStep 2: Plot the regression line on the `scatter plot`.","03df8c3d":"With *seaborn*, generating a regression plot is as simple as calling the **regplot** function.","3c8603fb":"Step 2: Plot the data. In `Matplotlib`, we can create a `scatter` plot set by passing in `kind='scatter'` as plot argument. We will also need to pass in `x` and `y` keywords to specify the columns that go on the x- and the y-axis.","9ce8e9b7":"Step 1: Get the dataset. Since we are expecting to use the relationship betewen `years` and `total population`, we will convert `years` to `int` type.","7221b8cc":"Amazing! A complete scatter plot with a regression fit with 5 lines of code only. Isn't this really amazing?\n\nIf you are not a big fan of the purple background, you can easily change the style to a white plain background.","db34789b":"Select Row\nThere are main 3 ways to select rows:\n\n    df.loc[label]        \n        #filters by the labels of the index\/column\n    df.iloc[index]       \n        #filters by the positions of the index\/column\n","c98ec07c":"When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the info() method.","2990724c":"**Step 2.** The second step is defining the overall size of the `waffle` chart.","9a9cf23a":"Step 3: Plot the box plots.","61d01e77":"Let's clean the data set to remove a few unnecessary columns. We can use pandas drop() method as follows:","a3d59612":"In order to create a `Choropleth` map, we need a GeoJSON file that defines the areas\/boundaries of the state, county, or country that we are interested in. In our case, since we are endeavoring to create a world map, we want a GeoJSON that defines the boundaries of all world countries. For your convenience, we will be providing you with this file, so let's go ahead and download it. Let's name it **world_countries.json**.","73b9cb7d":"Before we proceed, notice that the defaul index of the dataset is a numeric range from 0 to 194. This makes it very difficult to do a query by a specific country. For example to search for data on Japan, we need to know the corressponding index value.\n\nThis can be fixed very easily by setting the 'Country' column as the index using set_index() method.","f298d15e":"Let's view the top 5 rows of the dataset using the head() function.","6054e64e":"# Line Pots (Series\/Dataframe)\n\n","39c3ef3c":"check if Matplotlib is loaded.","646a34fe":"The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008.\n\nLet's annotate this on the plot using the annotate method of the scripting layer or the pyplot interface. We will pass in the following parameters:\n\n* s: str, the text of annotation.\n* xy: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n* xytext: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n* xycoords: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n* arrowprops: Takes a dictionary of properties to draw the arrow:\n* arrowstyle: Specifies the arrow style, '->' is standard arrow.\n* connectionstyle: Specifies the connection type. arc3 is a straight line.\n* color: Specifes color of arror.\n* lw: Specifies the line width.\nI encourage you to read the Matplotlib documentation for more details on annotations: http:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.annotate.","435731c6":"If someone don't know what transform() does please refer this example","f38694b2":"Let's blow up the plot a little bit so that it is more appealing to the sight.","8607308d":"**Subplots**\n\nOften times we might want to plot multiple plots within the same figure. For example, we might want to perform a side by side comparison of the box plot with the line plot of China and India's immigration.\n\nTo visualize multiple plots together, we can create a **figure** (overall canvas) and divide it into subplots, each containing a plot. With **subplots**, we usually work with the **artist layer** instead of the **scripting layer**.\n\nTypical syntax is :\n\n    fig = plt.figure() # create figure\n    ax = fig.add_subplot(nrows, ncols, plot_number) # create subplots\nWhere\n\n* nrows and ncols are used to notionally split the figure into (nrows * ncols) sub-axes,\n* plot_number is used to identify the particular subplot that this function is to create within the notional grid. plot_number starts at 1, increments across rows first and has a maximum of nrows * ncols as shown below.\n\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/Mod3Fig5Subplots_V2.png\" width=500 align=\"center\">","a1306f03":"**Step 7.** Create a legend and add it to chart.","8f56825a":"Note: The main types stored in pandas objects are float, int, bool, datetime64[ns] and datetime64[ns, tz] (in >= 0.17.0), timedelta[ns], category (in >= 0.15.0), and object (string). In addition these dtypes have item sizes, e.g. int64 and int32.\n","81d0f084":"Let's find out how many entries there are in our dataset.","4847f238":"We can also plot multiple histograms on the same plot. For example, let's try to answer the following questions using a histogram.","cacc2e17":"Clean up data. We will make some modifications to the original dataset to make it easier to create our visualizations. Refer to *Introduction to Matplotlib and Line Plots* and *Area Plots, Histograms, and Bar Plots* notebooks for a detailed description of this preprocessing.","82db7650":"To make a box plot, we can use kind=box in plot method invoked on a pandas series or dataframe.\n\nLet's plot the box plot for the Japanese immigrants between 1980 - 2013.","0c6c8583":"Luckily, a Python package already exists in Python for generating `word` clouds. The package, called `word_cloud` was developed by **Andreas Mueller**. You can learn more about the package by following this [link](https:\/\/github.com\/amueller\/word_cloud\/).\n\nLet's use this package to learn how to generate a word cloud for a given text document.","b7d5966e":"![](http:\/\/)","d38f6168":"And now let's call our function to create a `waffle` chart.","f7a25a00":"Next, we will plot a line plot by appending .plot() to the haiti dataframe.","43203176":"# Pandas Intermediate: Indexing and Selection (slicing)**","c55e0201":"**Question:** What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?\n\n","f3acff73":"**Step 1.** The first step into creating a waffle chart is determing the proportion of each category with respect to the total.","0437b47d":"Let's also annotate a text to go over the arrow. We will pass in the following additional parameters:\n\n* rotation: rotation angle of text in degrees (counter clockwise)\n* va: vertical alignment of text [\u2018center\u2019 | \u2018top\u2019 | \u2018bottom\u2019 | \u2018baseline\u2019]\n* ha: horizontal alignment of text [\u2018center\u2019 | \u2018right\u2019 | \u2018left\u2019]","a4e86bb9":"`Word` clouds are commonly used to perform high-level analysis and visualization of text data. Accordinly, let's digress from the immigration dataset and work with an example that involves analyzing text data. Let's try to analyze a short novel written by **Lewis Carroll** titled *Alice's Adventures in Wonderland*. Let's go ahead and download a _.txt_ file of the novel.","b913e16f":"Step 2: Create a new dataframe which contains the aggregate for each decade. One way to do that:\n\n1. Create a list of all years in decades 80's, 90's, and 00's.\n2. Slice the original dataframe df_can to create a series for each decade and sum across all years for each country.\n3. Merge the three series into a new data frame. Call your dataframe **new_df**.","a52f1218":"This is not magic; it is seaborn! You can also customize the color of the scatter plot and regression line. Let's change the color to green.","13d28c7f":"**Step 1:** Get the dataset for China and India and call the dataframe **df_CI**.","72ae4fee":"### B. Stamen Terrain Maps\n\nThese are maps that feature hill shading and natural vegetation colors. They showcase advanced labeling and linework generalization of dual-carriageway roads.\n\n","43a79dc8":"We can then specify which subplot to place each plot by passing in the ax paramemter in plot() method as follows:","32d22ed6":"Notice how the scatter plot does not connect the datapoints together. We can clearly observe an upward trend in the data: as the years go by, the total number of immigrants increases. We can mathematically analyze this upward trend using a regression line (line of best fit). ","8475fc87":"> Two types of plotting\n\nThere are two styles\/options of ploting with matplotlib. Plotting using the Artist layer and plotting using the scripting layer.\n\n*Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' *\n\nYou can use plt i.e. matplotlib.pyplot and add more elements by calling different methods procedurally; for example, plt.title(...) to add title or plt.xlabel(...) to add label to the x-axis.\n\n * Option 1: This is what we have been using so far\n  \n        df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10)) \n        plt.title('Immigration trend of top 5 countries')\n        plt.ylabel('Number of immigrants')\n        plt.xlabel('Years')\n        \n        \n * Option 2: Artist layer (Object oriented method) - using an Axes instance from Matplotlib (preferred) *\n\nYou can use an Axes instance of your current plot and store it in a variable (eg. ax). You can add more elements by calling methods with a little change in syntax (by adding \"set_\" to the previous methods). For example, use ax.set_title() instead of plt.title() to add title, or ax.set_xlabel() instead of plt.xlabel() to add label to the x-axis.\n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).\n\nIn this notebook, we will stick to the scripting layer, except for some advanced visualizations where we will need to use the artist layer to manipulate advanced aspects of the plots.    ","0977104e":"Finally, let's view a quick summary of each column in our dataframe using the describe() method.","591812ff":"Zoom in and notice how the borders start showing as you zoom in, and the displayed country names are in English.","b9c5e594":"> > > > ***TO BE CONTINUE......***","483e9d45":"Now that we have the GeoJSON file, let's create a world map, centered around **[0, 0]** *latitude* and *longitude* values, with an intial zoom level of 2, and using *Mapbox Bright* style.","0a93de41":"In the above plot, the x-axis represents the population range of immigrants. The y-axis represents the number of countries that contributed to the aforementioned population.\n\n<font color='red'>Notice that the x-axis labels do not match with the bin size. This can be fixed by passing in a **`xticks`** keyword that contains the list of the bin sizes, as follows:<\/font>","896b8cad":"Step 2: Generate the bubble plots.","58b695ca":"Let's create the map again with a higher zoom level","81db924c":"**Step 4.** The fourth step is creating a matrix that resembles the `waffle` chart and populating it.","7c815e71":"# Introduction to Folium <a id=\"4\"><\/a>","55ddd9f5":"*Step 1*: Gather data.\n\nWe will use pandas groupby method to summarize the immigration data by Continent. The general process of groupby involves the following steps:\n\n*  Split: Splitting the data into groups based on some criteria.\n*  Apply: Applying a function to each group independently:\n    .sum()\n    .count()\n    .mean() \n    .std() \n    .aggregate()\n    .apply()\n    .etc..\n* Combine: Combining the results into a data structure.","78a9f4ca":"To get the list of column headers we can call upon the dataframe's .columns parameter.","f04ba7cd":"**`Tip regarding subplot convention`** \n\nIn the case when **nrows**, **ncols**, and **plot_number** are all less than 10, a convenience exists such that the a 3 digit number can be given instead, where the hundreds represent **nrows**, the tens represent **ncols** and the units represent **plot_number**. For instance,\n\n   subplot(211) == subplot(2, 1, 1) \n   \nproduces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 rows by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).","eae38c43":"By default, the histrogram method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n\n* 178 countries contributed between 0 to 3412.9 immigrants\n* 11 countries contributed between 3412.9 to 6825.8 immigrants\n* 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..\n<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/Mod2Fig1-Histogram.JPG\" align=\"center\" width=800>\n\nWe can easily graph this distribution by passing kind=hist to plot().\n\n","81f1c056":"Note how the box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:<br>\n* larger than Q3 by at least 1.5 times the interquartile range (IQR), or,\n* smaller than Q1 by at least 1.5 times the IQR.\n\nLet's look at decade 2000s as an example: <br>\n* Q1 (25%) = 36,101.5 <br>\n* Q3 (75%) = 105,505.5 <br>\n* IQR = Q3 - Q1 = 69,404 <br>\n\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 105,505.5 + (1.5 * 69,404) <br>\nOutlier > 209,611.5","ec8c9a2f":"Similarly, to get the list of indicies we use the .index parameter.","7d1799e5":"Since we converted the years to string, let's declare a variable that will allow us to easily call upon the full range of years:","938a23a8":"### C. Mapbox Bright Maps\n\nThese are maps that quite similar to the default style, except that the borders are not visible with a low zoom level. Furthermore, unlike the default style where country names are displayed in each country's native language, *Mapbox Bright* style displays all country names in English.","29cc45e1":"**Question**: Create a map of Mexico with a zoom level of 4.","53765f9a":"# Pandas Basics","506d07e8":"Area plots are stacked by default. And to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass stacked=False.","c91d7fbd":"references - [examples](https:\/\/www.w3resource.com\/pandas\/dataframe\/dataframe-transpose.php#:~:text=DataFrame%20%2D%20transpose()%20function,as%20columns%20and%20vice%2Dversa.&text=If%20True%2C%20the%20underlying%20data,copy%20is%20made%20if%20possible)","3b93455e":"Earlier we learned how to create a scatter plot and then fit a regression line. It took ~20 lines of code to create the scatter plot along with the regression fit. In this final section, we will explore *seaborn* and see how efficient it is to create regression lines and fits using this library!","6eaac785":"Using the equation of line of best fit, we can estimate the number of immigrants in 2015:\n```python\nNo. Immigrants = 5567 * Year - 10926195\nNo. Immigrants = 5567 * 2015 - 10926195\nNo. Immigrants = 291,310\n```\nWhen compared to the actuals from Citizenship and Immigration Canada's (CIC) [2016 Annual Report](http:\/\/www.cic.gc.ca\/english\/resources\/publications\/annual-report-2016\/index.asp), we see that Canada accepted 271,845 immigrants in 2015. Our estimated value of 291,310 is within 7% of the actual number, which is pretty good considering our original data came from United Nations (and might differ slightly from CIC data).\n\nAs a side note, we can observe that immigration took a dip around 1993 - 1997. Further analysis into the topic revealed that in 1993 Canada introcuded Bill C-86 which introduced revisions to the refugee determination system, mostly restrictive. Further amendments to the Immigration Regulations cancelled the sponsorship required for \"assisted relatives\" and reduced the points awarded to them, making it more difficult for family members (other than nuclear family) to immigrate to Canada. These restrictive measures had a direct impact on the immigration numbers for the next several years.","28462554":"# Filtering based on a criteria\n\nTo filter the dataframe based on a condition, we simply pass the condition as a boolean vector.\n\nFor example, Let's filter the dataframe to show the data on Asian countries (AreaName = Asia).","8b358fda":"Let's take a peek at how the matrix looks like.","0e06af7b":"Line plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than `5-10 lines` on a single graph; any more than that and it becomes difficult to interpret.\n\n**Question:** Compare the trend of top 5 countries that contributed the most to immigration to Canada.","961126fd":"# Bubble Plots <a id=\"12\"><\/a>\n\nA `bubble plot` is a variation of the `scatter plot` that displays three dimensions of data (x, y, z). The datapoints are replaced with bubbles, and the size of the bubble is determined by the third variable 'z', also known as the weight. In `maplotlib`, we can pass in an array or scalar to the keyword `s` to `plot()`, that contains the weight of each point.\n\n**Let's start by analyzing the effect of Argentina's great depression**.\n\nArgentina suffered a great depression from 1998 - 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002. \n\nLet's analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. Let's do that using a `bubble plot` of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the *normalized* value of the population for each year.","7a76eb92":"We can also veiw the bottom 5 rows of the dataset using the tail() function.","f7f170c4":"Let's rename the columns so that they make sense. We can use rename() method by passing in a dictionary of old and new names as follows:","bd5141ac":"**Step 1:** Get the dataset. Even though we are extracting the data for just one country, we will obtain it as a dataframe. This will help us with calling the **dataframe.describe()** method to view the percentiles.","a233d522":"**Question:** Use the artist layer to create an unstacked area plot of the 5 countries that contributed the least to immigration to Canada from 1980 to 2013. Use a transparency value of 0.55.","dce50c95":"Create a new dataframe that stores that total number of landed immigrants to Canada per year from 1980 to 2013.","2596789a":"**Question:** What is the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013?","d404b658":"Before we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us Numpy's histrogram method to get the bin ranges and frequency counts as follows:","bdf77e79":"**Step 3.** The third step is using the proportion of each category to determe it respective number of tiles","40f153fd":"Note: The default type of index and columns is NOT list.","16b89400":"**Question**: Previously in this notebook, we created box plots to compare immigration from China and India to Canada. Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013. You can use **df_can_t** that we defined and used in the previous example.","ccd09a27":"**Question**: Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013?","3c454d06":"There seems to be a new Python package for generating `waffle charts` called [PyWaffle](https:\/\/github.com\/ligyxy\/PyWaffle), but it looks like the repository is still being built. But feel free to check it out and play with it.","9cddb6a2":"<img src=\"https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/boxplot_complete.png\" width=440, align=\"center\">","81ac2d6e":"To get the index and columns as lists, we can use the tolist() method.","affc527c":"Or to a white background with gridlines.","ba1a5f0b":"Let's try something a little more advanced.\n\nPreviously we identified the top 15 countries based on total immigration from 1980 - 2013.\n\n**Question:** Create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the decades 1980s, 1990s, and 2000s.","4d5d3eb8":"Let's try filtering on the list of countries ('OdName') and the data for years: 1980 - 1985.","7a507a8e":"Matplotlib.Pyplot\n\nOne of the core aspects of Matplotlib is matplotlib.pyplot. It is Matplotlib's scripting layer. Recall that it is a collection of command style functions that make Matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. In this notebook, we will work with the scripting layer to learn how to generate line plots. In future notebooks, we will get to work with the Artist layer as well to experiment first hand how it differs from the scripting layer.\n\n","db5f9d90":"pandas automatically populated the x-axis with the index values (years), and the y-axis with the column values (population). However, notice how the years were not displayed because they are of type string. Therefore, let's change the type of the index values to integer for plotting.\n\nAlso, let's label the x and y axis using plt.title(), plt.ylabel(), and plt.xlabel() as follows:","80dc596b":"Step 2: Plot the data. We will pass in kind = 'pie' keyword, along with the following additional parameters:\n\n* autopct - is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be fmt%pct.\n* startangle - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.\n* shadow - Draws a shadow beneath the pie (to give a 3D feel).","81e88398":"So let's try to plot a linear line of best fit, and use it to  predict the number of immigrants in 2015.\n\nStep 1: Get the equation of line of best fit. We will use **Numpy**'s `polyfit()` method by passing in the following:\n- `x`: x-coordinates of the data. \n- `y`: y-coordinates of the data. \n- `deg`: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.","cd18bfb6":"<font color='purple'>**Tip:** For a full listing of colors available in Matplotlib, run the following code in your python shell:<\/font>\n\n    import matplotlib\n    for name, hex in matplotlib.colors.cnames.items():\n        print(name, hex)","98cce114":"> Plotting in pandas\n\nFortunately, pandas has a built-in implementation of Matplotlib that we can use. Plotting in pandas is as simple as appending a .plot() method to a series or dataframe.\n\nDocumentation:\n\n* Plotting with Series\n* Plotting with Dataframes","fffe564a":"Now, let's create our own `Choropleth` map of the world depicting immigration from various countries to Canada.\n\nLet's first download and import our primary Canadian immigration dataset using *pandas* `read_excel()` method. Normally, before we can do that, we would need to download a module which *pandas* requires to read in excel files. This module is **xlrd**. For your convenience, we have pre-installed this module, so you would not have to worry about that. Otherwise, you would need to run the following line of code to install the **xlrd** module:\n```\n!conda install -c anaconda xlrd --yes\n```","71197750":"**Step 2:** Plot by passing in **kind='box'**.","dc571685":"you can always customize the marker shape, so instead of circular markers, let's use '+'.","c3719a8f":"apply a style to Matplotlib.","772cc3a0":"And now to create a `Choropleth` map, we will use the *choropleth* method with the following main parameters:\n\n1. geo_data, which is the GeoJSON file.\n2. data, which is the dataframe containing the data.\n3. columns, which represents the columns in the dataframe that will be used to create the `Choropleth` map.\n4. key_on, which is the key or variable in the GeoJSON file that contains the name of the variable of interest. To determine that, you will need to open the GeoJSON file using any text editor and note the name of the key or variable that contains the name of the countries, since the countries are our variable of interest. In this case, **name** is the key in the GeoJSON file that contains the name of the countries. Note that this key is case_sensitive, so you need to pass exactly as it exists in the GeoJSON file.","058db8bd":"*We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let's annotate this spike in the plot by using the plt.text() method.*","baee5e0d":"We can easily add more countries to line plot to make meaningful comparisons immigration from different countries.\n\n**Question:** Let's compare the number of immigrants from India and China from 1980 to 2013.","afd1736b":"Let's take a look at the first five items of our cleaned dataframe.","60695f98":"If we do no want the plots to overlap each other, we can stack them using the stacked paramemter. Let's also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot. We can pass a tuple (min,max) using the xlim paramater, as show below.","605e9270":"Column names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index.\n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","be2d187d":"Step 1: Get the data for Brazil and Argentina. Like in the previous example, we will convert the `Years` to type int and bring it in the dataframe.","da168813":"Step 1: Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe **df_top15**.","577cf66f":"The size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. The larger the bubble, the more immigrants in that year.\n\nFrom the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 - 1990, just before the onset of 1998 - 2002 great depression. \n\nOn a similar note, Brazil suffered the *Samba Effect* where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.","c9d6fc2a":"And finally increase the font size of the tickmark labels, the title, and the x- and y-labels so they don't feel left out!","e69f087f":"Let's revisit the previous case study about Denmark, Norway, and Sweden.","89b63d0f":"We can observe that, while both countries have around the same median immigrant population (~20,000), China's immigrant population range is more spread out than India's. The maximum population from India for any year (36,210) is around 15% lower than the maximum population from China (42,584).\n\nIf you prefer to create horizontal box plots, you can pass the *vert* parameter in the **plot** function and assign it to False. You can also specify a different color in case you are not a big fan of the default red color.","dafa2814":"# Area Plot\n\nWith a little modification to the code, we can visualize this plot as a `cumulative plot`, also knows as a `Stacked Line Plot` or `Area plot`.","74fc6ee0":"The unstacked plot has a default transparency (alpha value) at 0.5. We can modify this value by passing in the alpha parameter.","07d1cf35":"Generating the world map is straigtforward in **Folium**. You simply create a **Folium** *Map* object and then you display it. What is attactive about **Folium** maps is that they are interactive, so you can zoom into any region of interest despite the initial zoom level. ","a672a1be":"You can customize this default definition of the world map by specifying the centre of your map and the intial zoom level. \n\nAll locations on a map are defined by their respective *Latitude* and *Longitude* values. So you can create a map and pass in a center of *Latitude* and *Longitude* values of **[0, 0]**. \n\nFor a defined center, you can also define the intial zoom level into that location when the map is rendered. **The higher the zoom level the more the map is zoomed into the center**.\n\nLet's create a map centered around Canada and play with the zoom level to see how it affects the rendered map.","e7c096b9":"# Bar Charts (Dataframe)\n\nA bar plot is a way of representing data where the length of the bars represents the magnitude\/size of the feature\/variable. Bar graphs usually represent `numerical` and `categorical` variables grouped in intervals.\n\nTo create a bar plot, we can pass one of two arguments via kind parameter in plot():\n\n* kind=bar creates a vertical bar plot\n* kind=barh creates a horizontal bar plot","d32d2ddb":"**Vertical bar plot**\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar.\n\n*Let's start off by analyzing the effect of Iceland's Financial Crisis:*\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\n**Question:** Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013.","f08e68ec":"![](https:\/\/www.w3resource.com\/w3r_images\/pandas-dataframe-transpose.png)"}}