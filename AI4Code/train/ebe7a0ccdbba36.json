{"cell_type":{"36069ac3":"code","808f7a4f":"code","03e5288e":"code","097a4540":"code","3ddbd7ae":"code","9842f808":"code","ec25757d":"code","4efff8dd":"code","86fe4338":"code","4aad41ea":"code","af1aaf07":"code","a0c00e50":"code","76f893c1":"code","27230516":"code","2e023e82":"code","d97e19f4":"markdown"},"source":{"36069ac3":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error\npd.options.display.precision = 15\n\nimport lightgbm as lgb\nimport xgboost as xgb\nimport time\nimport datetime\nfrom catboost import CatBoostRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold, GroupKFold, GridSearchCV, train_test_split, TimeSeriesSplit\nfrom sklearn import metrics\nfrom sklearn import linear_model\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Seed Everything\nimport random\nseed = 13\nrandom.seed(seed)\nos.environ[\"PYTHONHASHSEED\"] = str(seed)\nnp.random.seed(seed)","808f7a4f":"def read_data(train_path, test_path):\n    train = pd.read_csv(train_path)\n    test = pd.read_csv(test_path)\n    return train, test","03e5288e":"# Read the data\ntrain, test = read_data(\n    train_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv',\n    test_path = '..\/input\/house-prices-advanced-regression-techniques\/test.csv',\n)","097a4540":"def preprocess_data(train, test):\n    \n    # Concatenate train and test data together\n    data = pd.concat([train, test], sort=False)\n    \n    # Label Encoding\n    for f in data.columns:\n        if data[f].dtype=='object':\n            lbl = preprocessing.LabelEncoder()\n            lbl.fit(list(data[f].values))\n            data[f] = lbl.transform(list(data[f].values))\n            \n    # Fill in the missing data\n    data.fillna(0, inplace=True)\n\n    train = data[: len(train)]\n    test = data[-len(test) :]\n\n    return train, test","3ddbd7ae":"train, test = preprocess_data(train, test)","9842f808":"train.head()","ec25757d":"test.head()","4efff8dd":"y = train[\"SalePrice\"]\n\n# Drop all the ID variables\nX = train.drop([\"Id\", \"SalePrice\"], axis=1)\nX_test = test.drop([\"Id\", \"SalePrice\"], axis=1)","86fe4338":"from sklearn.model_selection import train_test_split\nX_train, X_test2, y_train,  y_test = train_test_split(X, y, test_size=0.3, random_state = 0)","4aad41ea":"from sklearn import  linear_model\nfrom sklearn.metrics import mean_absolute_error, r2_score\nfrom sklearn.linear_model import Ridge","af1aaf07":"# Create linear regression object\n# regr = linear_model.LinearRegression()\nregr = Ridge(alpha=0.001)\n\n# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred_val = regr.predict(X_test2)\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean absolute error: %.2f'\n      % mean_absolute_error(y_test, y_pred_val))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_test, y_pred_val))","a0c00e50":"submission = pd.DataFrame(\n    {\n        \"Id\": test[\"Id\"],\n        \"SalePrice\": y_pred,\n    }\n)\nsubmission.to_csv(\"submission_reg.csv\", index=False)","76f893c1":"submission.head()","27230516":"submission['SalePrice'].hist()","2e023e82":"train['SalePrice'].hist()","d97e19f4":"### Train a model"}}