{"cell_type":{"fda5178f":"code","8b4de370":"code","0fad9510":"code","ff63bcd4":"code","43b35dcd":"code","e4cb06d5":"code","e44778a3":"code","612c254b":"code","aac3649f":"code","0cdcb819":"code","170d0ce9":"code","5422a7a4":"code","10f0a408":"code","ae152962":"code","a05089ce":"code","051d11fb":"code","346dbf66":"code","033321e9":"code","61cd6e68":"code","60872375":"code","e6cfd81d":"code","ef9f72f7":"code","d96d2bfb":"code","f98d1e37":"code","9f484abe":"code","dfe3d1c2":"code","608d3eb8":"code","e530f3dc":"code","d1bd00f6":"code","40371728":"code","fdb67ef0":"code","141761c0":"code","9b06c91f":"code","b667993e":"code","2a2b1f0f":"code","4863b84f":"markdown","ca6a5c27":"markdown","8597c99d":"markdown","64261338":"markdown","2d444a7e":"markdown","d3ea99e1":"markdown","f2daced4":"markdown","f58201fd":"markdown","6560bf70":"markdown","8ba325f4":"markdown","a9a1b603":"markdown","b0a12bd6":"markdown","01c3f3ec":"markdown","e0233fc7":"markdown","2e581c72":"markdown","4b0f7cef":"markdown","b091ab62":"markdown","aeca0ad2":"markdown","3d8de5b7":"markdown","7060fcdc":"markdown"},"source":{"fda5178f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","8b4de370":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata.head() ","0fad9510":"data.info()","ff63bcd4":"data = data.iloc[0:150,54:80]","43b35dcd":"data.info()","e4cb06d5":"data.corr()","e44778a3":"f,ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data.corr(), annot=True, linewidths=.4, fmt= '.1f',ax=ax)\nplt.show()","612c254b":"data.columns","aac3649f":"# Line Plot\ndata.Finishing.plot(kind = 'line', color = 'g',label = 'Potential',linewidth=0.7,alpha = 1,grid = True, linestyle = '-')\ndata.Positioning.plot(color = 'r',label = 'Special',linewidth=1, alpha = 0.7,grid = True, linestyle = '-')\nplt.legend(loc='upper right')     \nplt.xlabel('x axis')              \nplt.ylabel('y axis')\nplt.title('Line Plot')           \nplt.show()","0cdcb819":"# Scatter Plot \ndata.plot(kind='scatter', x='ShortPassing', y='Agility',alpha = 0.5,color = 'b')\nplt.xlabel('ShortPassing')             \nplt.ylabel('Positioning')\nplt.title('Finishing - Positioning Scatter Plot')            \nplt.show()","170d0ce9":"# Histogram\n\ndata.SprintSpeed.plot(kind = 'hist',bins = 150,figsize = (15,8))\nplt.show()","5422a7a4":"dictionary = {'Ali' : 35,'Ahmet' : 25, 'Veli' : 49}\nprint(dictionary.keys())\nprint(dictionary.values())","10f0a408":"dictionary['Ali'] = 37 # Ali'nin ya\u015f\u0131n\u0131 g\u00fcnceller.\nprint(dictionary)\ndictionary['Mehmet'] = 15 # Mehmet'i dictionary'e ekler.\nprint(dictionary)\ndel dictionary['Veli'] # Veli'nin b\u00fct\u00fcn bilgilerini siler.\nprint(dictionary)\nprint('Kaz\u0131m' in dictionary) # dictionary'de 'Kaz\u0131m' key'inin bulunup bulunmad\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr.\ndictionary.clear() # dictionary'deki t\u00fcm verileri siler ve i\u00e7ini bo\u015falt\u0131r.\nprint(dictionary)","ae152962":"del dictionary # dictionary'i tamamen siler.\n#print(dictionary)","a05089ce":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\n","051d11fb":"series = data['Potential']        \nprint(type(series))\ndata_frame = data[['Potential']]  \nprint(type(data_frame))","346dbf66":"print(35*4 > 3*40)\nprint(4\/2!=2)\nprint(True and False)\nprint(True or False)","033321e9":"x = data['Potential']>93     # Potansiyeli 94 puan\u0131ndan daha y\u00fcksek olan oyuncular\u0131 listeler (4 oyuncu)\ndata[x]","61cd6e68":"data[np.logical_and(data['Potential']>93, data['SprintSpeed']>86 )] \n# Potansiyeli 93 den, Sprint h\u0131z\u0131 86 dan y\u00fcksek oyuncular\u0131 listeler (2 ki\u015fi)","60872375":"data[(data['Potential']>93) & (data['SprintSpeed']>86)]\n# Bir \u00fcst sat\u0131rdaki kod ile ayn\u0131 i\u015fleve sahiptir.","e6cfd81d":"i = 0\na = 5\nwhile i != a :\n    print('{} *'.format(i),'{} = '.format(a), i*a)\n    i +=2\n    a +=1\nprint('i is equal to a = ',a)","ef9f72f7":"lis = ['Ankara','\u0130stanbul','Ayd\u0131n','Denizli','Mardin']\nfor i in lis:\n    print('S\u0131radaki \u015fehir : ',i)\nprint('')\n\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\nfor index,value in data[['SprintSpeed']][0:1].iterrows():\n    print(index,\" : \",value)","d96d2bfb":"def tuple_example():\n    t = (\"a\",\"b\",\"c\")\n    return t \nf,g,h = tuple_example()\nprint(f,g,h)\nprint(g)","f98d1e37":"x = 2\ndef f():\n    x = \"Ali\"\n    return x\nprint(x)\nprint(f())","9f484abe":"def square(x,y):\n    def nested():\n        \n        z = x * y\n        return z\n    return nested()**2\nprint(square(2,3))    ","dfe3d1c2":"def f(a, b = 3, c = 0):\n    y = a ** (b * c)\n    return y\nprint(f(2))\n\nprint(f(3,1,3))","608d3eb8":"def f(*args):\n    for i in args:\n        print(i**2)\nf(1)\nprint(\"\")\nf(2,3,5,7)\n\n\ndef f(**kwargs):\n    for key, value in kwargs.items():           \n        print(key, \" \", value)\nf(Name = 'As\u0131m', Surname = 'Madran', Age = 43)","e530f3dc":"multiply15 = lambda x: x*15     \nprint(multiply15(2.5))\ntot = lambda x,y,z: (x+y)*z   \nprint(tot(7.13,0.151,3.14))","d1bd00f6":"location_list = [\"Mardin\",\"I\u011fd\u0131r\",\"A\u011fr\u0131\",\"Venedik\"]\n\nfunc = map(lambda x:x+ \" \u015eehri\",location_list)\nprint(list(func))","40371728":"# iteration example\nname = \"Hello World\"\nit = iter(name)\nprint(next(it))\nprint(*it)         ","fdb67ef0":"list1 = [\"Gaziantep\",\"\u0130zmir\",\"Adana\",\"Kahramanmara\u015f\"]\nlist2 = [\"Baklavas\u0131\",\"Bombas\u0131\",\"Kebab\u0131\",\"Dondurmas\u0131\"]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\n","141761c0":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","9b06c91f":"num1 = [\"Ali\",\"Veli\",\"Abdullah\"]\nnum2 = [i + \" Bey\" for i in num1 ]\nprint(num2)","b667993e":"data = data.iloc[:,54:80]\ndata.info()","2a2b1f0f":"threshold = sum(data.Positioning)\/len(data.Positioning)\ndata[\"position_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Positioning]\ndata.loc[:13,[\"position_level\",\"Positioning\"]] # we will learn loc more detailed later","4863b84f":"**Default Arguments**","ca6a5c27":"fifa19 adl\u0131 verisetimizde, profesyonel futbol oyuncular\u0131 ile ilgili bilgiler bulunmaktad\u0131r. S\u00fctunlar\u0131 inceleyecek olursak, futbolcular\u0131n; ad\u0131, ya\u015f\u0131, foto\u011fraf\u0131, vatanda\u015fl\u0131\u011f\u0131, \u00fclkesinin bayra\u011f\u0131, 100 \u00fczerinden de\u011ferlendirme ile verilen puan\u0131, bulundu\u011fu futbol kul\u00fcb\u00fc, potansiyel derecesi gibi bir \u00e7ok bilgi bulunmaktad\u0131r.","8597c99d":"Line Plot grafi\u011fini inceledi\u011fimizde, oyuncular\u0131n bitiricilik ve pozisyon alma becerilerinin birbiri ile ba\u011flant\u0131l\u0131 oldu\u011funu g\u00f6zlemleyebiliyoruz.","64261338":"Veri karma\u015fas\u0131n\u0131 azaltmak i\u00e7in iloc kullanarak veritaban\u0131ndaki s\u00fctunlar\u0131n ve sat\u0131rlar\u0131n \u00e7o\u011funu siliyorum.","2d444a7e":"info'dan ald\u0131\u011f\u0131m\u0131z bilgi ile, veritaban\u0131nda 89 farkl\u0131 s\u00fctunun bulundu\u011funu ve bunlardan bir\u00e7o\u011funun float de\u011fer oldu\u011funu g\u00f6rmekteyiz. De\u011ferlerinin \u00e7o\u011funun float olmas\u0131, veri g\u00f6rselle\u015ftirmeyi kolayla\u015ft\u0131racakt\u0131r.","d3ea99e1":"**Zip Example**","f2daced4":"**Anonymous Function**","f58201fd":"Ki\u015filerin isimlerinin ve ya\u015flar\u0131n\u0131n tutuldu\u011fu bir dictionary olu\u015fturduk. Ard\u0131ndan dictionary'de bulunan key ve value de\u011ferlerini d\u00f6nd\u00fcrd\u00fck.","6560bf70":"**Tupple**","8ba325f4":"**Nested Function**","a9a1b603":"**Scope**","b0a12bd6":"**Flexible Arguments**","01c3f3ec":"Histogram grafi\u011fi ile, oyuncular\u0131n sprint h\u0131zlar\u0131n\u0131n puanlar\u0131 g\u00f6r\u00fclmektedir.","e0233fc7":"**Iterators**","2e581c72":"Korelasyonu inceledi\u011fimizde bir\u00e7ok s\u00fctunu silmemize ra\u011fmen ili\u015fkili verilerin oldu\u011fu g\u00f6r\u00fclmektedir.\n","4b0f7cef":"# **User Defined Function**","b091ab62":"**Lambda Function**","aeca0ad2":"Scatter Plot grafi\u011fine bakarak oyuncular\u0131n k\u0131sa pasla\u015fma yetene\u011fi ile \u00e7evikliklerinin ili\u015fkisi g\u00f6zlemlenebiliyor.","3d8de5b7":"**List Comprehension**","7060fcdc":"Vekt\u00f6r \u015feklinde (tek boyutlu) veriyi ald\u0131\u011f\u0131m\u0131zda numpy bunu bizim i\u00e7in Series olarak kay\u0131t ederken, matris \u015feklinde veriyi ald\u0131\u011f\u0131m\u0131zda ise DataFrame olarak kay\u0131t ediyor."}}