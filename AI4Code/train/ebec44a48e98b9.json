{"cell_type":{"fd8cf810":"code","5880bdb5":"code","4e561233":"code","d25abdb0":"code","e5c2ef3c":"code","913c3276":"code","54d2d507":"code","6d4826d9":"code","53a23de9":"code","15c0b2fd":"code","fb7d8549":"markdown","f2d81212":"markdown","d0c1bc8d":"markdown","666369b9":"markdown","f445180a":"markdown","e0486a8c":"markdown","c34de900":"markdown","2d460b82":"markdown","db134996":"markdown","7b4a04b8":"markdown"},"source":{"fd8cf810":"# Imports\nimport numpy as np\nimport random\nimport json\nimport difflib\nfrom PIL import ImageColor\nimport matplotlib.pyplot as plt","5880bdb5":"def rgb2hex(rgb) -> str:\n    \"\"\"\n    :return: returns hex code with formatting #E4B3D1\n    \"\"\"\n    return \"#{:02x}{:02x}{:02x}\".format(rgb[0], rgb[1], rgb[2]).upper()\n\n# Fetch our color palette database demo\n!curl --remote-name \\\n     -H 'Accept: application\/vnd.github.v3.raw' \\\n     --location https:\/\/raw.githubusercontent.com\/DesignStripe\/colab_notebooks\/main\/small_palette_database.json","4e561233":"# Open the json file and read all palettes.\nhex_palettes = []\nwith open(\"small_palette_database.json\") as f:\n  rgb_palettes = json.load(f)","d25abdb0":"# Transfer rgb to hex\nfor palette in rgb_palettes:\n  hex_palettes.append([rgb2hex(color) for color in palette])","e5c2ef3c":"# Transform to fit the Markov model input style\ndef clean_txt(txt):\n  cleaned_txt = []\n  for line in txt:\n    words = [word for word in line]\n    cleaned_txt+=words\n  return cleaned_txt\n\ncleaned_dataset = clean_txt(hex_palettes)\nprint(\"Number of colors in your dataset:\", len(cleaned_dataset))\nprint(\"One color looks like this:\",cleaned_dataset[10])","913c3276":"def make_markov_model(cleaned_dataset, n_gram=1):\n  \"\"\"\n  :return: Return the markov model (dictionnary) built from the cleaned dataset\n  \"\"\"\n  markov_model = {}\n  for i in range(len(cleaned_dataset)-n_gram):\n    curr_state, next_state = \"\", \"\"\n    curr_state += cleaned_dataset[i] + \" \"\n    next_state += cleaned_dataset[i+n_gram] + \" \"\n    curr_state = curr_state[:-1]\n    next_state = next_state[:-1]\n    if curr_state not in markov_model:\n      markov_model[curr_state] = {}\n      markov_model[curr_state][next_state] = 1\n    else:\n      if next_state in markov_model[curr_state]:\n        markov_model[curr_state][next_state] += 1\n      else:\n        markov_model[curr_state][next_state] = 1\n  \n  # calculating transition probabilities\n  for curr_state, transition in markov_model.items():\n    total = sum(transition.values())\n    for state, count in transition.items():\n      markov_model[curr_state][state] = count\/total\n      \n  return markov_model\n\ndef display_palette(palette_to_display_hex, palette_length, title):\n  \"\"\"\n  Display a given palette in hex codes with the appripriate title\n  \"\"\"\n  palette_to_display_rgb = []\n  for i in range(palette_length):\n    if (palette_to_display_hex[i] == ''):\n      palette_to_display_rgb.append((0,0,0))\n    else:\n      palette_to_display_rgb.append(ImageColor.getcolor(palette_to_display_hex[i], \"RGB\"))\n\n  # Palette to generate\n  palette_to_display_rgb = np.array(palette_to_display_rgb)\n  plt.figure(figsize=(12,12))\n  plt.imshow(palette_to_display_rgb[np.concatenate([[i] * 100 for i in range(len(palette_to_display_rgb))]).reshape((-1,10)).T])\n  plt.title(title)\n  plt.grid()\n  plt.axis('off')\n  plt.show()","54d2d507":"# Build the model with our cleaned dataset \nmarkov_model = make_markov_model(cleaned_dataset)\nprint(\"Number of possible states (color transitions) in our model:\", len(markov_model.keys()))","6d4826d9":"def fill_my_palette(palette_to_fill_hex):\n  \"\"\"\n  This function fills a palette and returns the new palette\n  return: palette generated from the input palette in hex codes\n  \"\"\"\n  # Calculate the number of colors to fill and prepare your variables\n  palette_generated_hex = palette_to_fill_hex.copy()\n  nb_colors_to_fill = np.where(np.array(palette_to_fill_hex) == '')[0].shape[0]\n  palette_length = len(palette_to_fill_hex)\n\n  # Fill in the missing colors\n  for i in range(nb_colors_to_fill):\n    i = i + (palette_length-nb_colors_to_fill)\n\n    # Find the most probable next color with some variations\n    top_3_closest_colors = difflib.get_close_matches(palette_generated_hex[i-1],markov_model.keys())\n    next_color = list(markov_model[top_3_closest_colors[random.randint(0,2)]].keys())[0]\n    palette_generated_hex[i] = next_color\n\n  return palette_generated_hex, palette_length","53a23de9":"palette_to_fill_hex = ['#51386E','','','','']\n\n# Generate and display 5 possible palettes\nfor i in range(5):\n  # Generate our palette\n  palette_generated_hex, palette_length = fill_my_palette(palette_to_fill_hex)\n\n  # Display our initial and generated palettes\n  print(\"\\nGeneration #%i:\" %(i+1))\n  display_palette(palette_to_fill_hex, palette_length, \"Palette to generate\")\n  display_palette(palette_generated_hex, palette_length, \"Palette generated\")","15c0b2fd":"# Start coding now:\n\n\n\n\n","fb7d8549":"Try another model or technique with our demo dataset using `rgb_palettes` or `hex_palettes` we created earlier!","f2d81212":"## Imports","d0c1bc8d":"### Util function to generate a palette from an incomplete palette","666369b9":"### Build the model","f445180a":"## Dataset pre-processing","e0486a8c":"## Play with the code!\n\nI hope you enjoyed this quick Markov chain model (or dictionary search in other words), allowing you to generate a complete palette based on the previous color. \n\nFeel free to change the code and improve it, use your own dataset, or even use another model to compare the results! Play with it and have fun. Let us know what you create at louis@designstripe.com. We would love to exchange with you!","c34de900":"### Useful functions for the model","2d460b82":"# Fill a color palette dynamically using Markov Chains\nThis notebook by designstripe allows anyone to upload a color palette database (in RGB format) to build a Markov model able to generate colors based on a given color. You can generate a palette of any size from a single or a handful of colors, taking advantage of this behavior.","db134996":"### Generate our palettes!","7b4a04b8":"## Inference time!\n### Let's generate a handful of new palettes from one color!\n\nLet's say you want a palette with the image hex code: '#51386E', here's what you would do:"}}