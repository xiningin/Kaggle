{"cell_type":{"3ced84ab":"code","be6f9dfd":"code","3474c4d5":"code","c8f62bc8":"code","8a7e2b7d":"code","6103f130":"code","9645d1e6":"code","e97a7b25":"code","5c2a411a":"code","36f4245c":"code","9f5c230c":"code","3bb4d45f":"code","71818cbe":"code","0481e0e2":"code","170da780":"code","95742abf":"code","5bb39c31":"code","c79f9796":"code","451d5b9e":"code","01bfdc9a":"code","fadf2f35":"code","77732aa3":"code","c78cbfe7":"code","39615ee4":"code","49527de6":"code","ea2bae27":"code","d20215d2":"code","95d74e7c":"code","c2cbd81e":"markdown","cb735f51":"markdown","4163c39c":"markdown"},"source":{"3ced84ab":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import average_precision_score\nfrom xgboost import XGBClassifier, plot_importance\nfrom sklearn.model_selection import train_test_split\nimport pickle\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","be6f9dfd":"import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","3474c4d5":"df = pd.read_csv('\/kaggle\/input\/banksim1\/bs140513_032310.csv')","c8f62bc8":"df['step'] = 1577836800 + df['step'] * 3600 * 24\ndf['step'] = pd.to_datetime(df['step'], unit='s')","8a7e2b7d":"df.columns","6103f130":"df","9645d1e6":"print('No. of fraud transactions: {}, No. of non-fraud transactions: {}'.format((df.fraud == 1).sum(), (df.fraud == 0).sum()))","e97a7b25":"df.loc[df.fraud == 1,'age'].value_counts()","5c2a411a":"df.loc[df.fraud == 1,'gender'].value_counts()","36f4245c":"df.loc[df.fraud == 1,'category'].value_counts()","9f5c230c":"print('Min, Max amount of fraud transactions {}, {}'.format(df.loc[df.fraud == 1].amount.min(), df.loc[df.fraud == 1].amount.max()))\nprint('Min, Max amount of genuine transactions {}, {}'.format(df.loc[df.fraud == 0].amount.min(), df.loc[df.fraud == 0].amount.max()))","3bb4d45f":"def last1DayTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_1_day').sort_index()\n    count_1_day = temp.rolling('1d').count() - 1\n    count_1_day.index = temp.values\n    x['count_1_day'] = count_1_day.reindex(x.index)\n    return x\ndef last7DaysTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_7_days').sort_index()\n    count_7_days = temp.rolling('7d').count() - 1\n    count_7_days.index = temp.values\n    x['count_7_days'] = count_7_days.reindex(x.index)\n    return x\ndef last30DaysTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_30_days').sort_index()\n    count_30_days = temp.rolling('30d').count() - 1\n    count_30_days.index = temp.values\n    x['count_30_days'] = count_30_days.reindex(x.index)\n    return x","71818cbe":"df = df.groupby('customer').apply(last1DayTransactionCount)\ndf = df.groupby('customer').apply(last7DaysTransactionCount)\ndf = df.groupby('customer').apply(last30DaysTransactionCount)","0481e0e2":"def last1DayCustMerchTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_1_day').sort_index()\n    count_1_day = temp.rolling('1d').count() - 1\n    count_1_day.index = temp.values\n    x['count_cust_merch_1_day'] = count_1_day.reindex(x.index)\n    return x\ndef last7DaysCustMerchTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_7_days').sort_index()\n    count_7_days = temp.rolling('7d').count() - 1\n    count_7_days.index = temp.values\n    x['count_cust_merch_7_days'] = count_7_days.reindex(x.index)\n    return x\ndef last30DaysCustMerchTransactionCount(x):\n    temp = pd.Series(x.index, index = x.step, name='count_30_days').sort_index()\n    count_30_days = temp.rolling('30d').count() - 1\n    count_30_days.index = temp.values\n    x['count_cust_merch_30_days'] = count_30_days.reindex(x.index)\n    return x","170da780":"df = df.groupby(['customer','merchant']).apply(last1DayCustMerchTransactionCount)\ndf = df.groupby(['customer','merchant']).apply(last7DaysCustMerchTransactionCount)\ndf = df.groupby(['customer','merchant']).apply(last30DaysCustMerchTransactionCount)","95742abf":"df","5bb39c31":"cust = df.groupby('customer').apply(lambda df:len(df))\nsns.distplot(cust.values,kde=False)","c79f9796":"df.count_1_day[df.fraud == 1].value_counts() \/ len(df.count_1_day[df.fraud == 1])","451d5b9e":"df.count_1_day[df.fraud == 0].value_counts() \/ len(df.count_1_day[df.fraud == 0])","01bfdc9a":"data = df.drop(['customer','merchant','zipcodeOri','zipMerchant','step'],axis=1)","fadf2f35":"cat_cols = ['age', 'gender', 'category']\nenc = LabelEncoder()\nfor col in cat_cols:\n    data[col] = enc.fit_transform(data[col])","77732aa3":"data","c78cbfe7":"Y = data['fraud']\nX = data.drop(['fraud','count_1_day','count_7_days','count_30_days','count_cust_merch_1_day','count_cust_merch_7_days','count_cust_merch_30_days'],axis=1)\n\nXtrain, Xtest, Ytrain, Ytest = train_test_split(X,Y,test_size=0.2, random_state = 1)\n\nweights = (Y == 0).sum() \/ (Y == 1).sum()\nclf = XGBClassifier(max_depth=3,scale_pos_weights=weights,n_jobs=4)\nclf.fit(Xtrain,Ytrain)\n\nprint('AUPRC = {}'.format(average_precision_score(Ytest, clf.predict_proba(Xtest)[:,1])))","39615ee4":"Y = data['fraud']\nX = data.drop('fraud',axis=1)\n\nXtrain, Xtest, Ytrain, Ytest = train_test_split(X,Y,test_size=0.2, random_state = 1)\n\nweights = (Y == 0).sum() \/ (Y == 1).sum()\nclf = XGBClassifier(max_depth=3,scale_pos_weights=weights,n_jobs=4)\nclf.fit(Xtrain,Ytrain)\n\nprint('AUPRC = {}'.format(average_precision_score(Ytest, clf.predict_proba(Xtest)[:,1])))","49527de6":"fig = plt.figure(figsize = (14, 9))\nax = fig.add_subplot(111)\n\ncolours = plt.cm.Set1(np.linspace(0, 1, 9))\n\nax = plot_importance(clf, height = 1, color = colours, grid = False, \\\n                     show_values = False, importance_type = 'cover', ax = ax);\nfor axis in ['top','bottom','left','right']:\n            ax.spines[axis].set_linewidth(2)\n        \nax.set_xlabel('importance score', size = 16);\nax.set_ylabel('features', size = 16);\nax.set_yticklabels(ax.get_yticklabels(), size = 12);\nax.set_title('Ordering of features by importance to the model learnt', size = 20);","ea2bae27":"data","d20215d2":"pickle.dump(clf,open('XGB-BankSim.pkl','wb'))","95d74e7c":"clf.score(Xtest.loc[Ytest==1],Ytest.loc[Ytest==1])","c2cbd81e":"## Feature Engineered Data","cb735f51":"## Standard Data without Feature Engineering","4163c39c":"# Model Training"}}