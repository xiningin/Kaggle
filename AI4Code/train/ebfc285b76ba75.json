{"cell_type":{"8b465cd5":"code","8c160b25":"code","7b9d5459":"code","85d0a18d":"code","89c58787":"code","f88016cb":"code","00f84c46":"code","36618bbd":"code","4fe9ed7d":"code","337f02bc":"code","0e716454":"code","b9059633":"code","cf70de2a":"code","3d646cf4":"code","8ce4da20":"code","380883ea":"code","606744c8":"code","28c1caf9":"code","b24a4b41":"code","08aa2a59":"code","3171cf4a":"code","5f06b613":"code","e5949458":"code","45d1b91c":"code","25613dda":"code","d0dc3b4e":"markdown","548491d9":"markdown","9e00e471":"markdown","f2c034bf":"markdown","3689a751":"markdown","82f45e8c":"markdown","583aa773":"markdown","8db9b9a9":"markdown","6cdeda96":"markdown","17e6d589":"markdown","33051882":"markdown","96143353":"markdown","f61473d9":"markdown","b5630ba9":"markdown","cfa08b0f":"markdown","2abb91cc":"markdown","7135fd38":"markdown","352761ca":"markdown","9d897c33":"markdown"},"source":{"8b465cd5":"# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8c160b25":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")","7b9d5459":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","85d0a18d":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","89c58787":"y_train = train[\"label\"]\nx_train = train.drop(labels = [\"label\"],axis = 1)","f88016cb":"plt.figure(figsize=(15,7))\nsns.countplot(y_train, palette = \"icefire\")\nplt.title(\"Number of Digit Classes\")\ny_train.value_counts()","00f84c46":"random_img = x_train.iloc[27].to_numpy()\nrandom_img = random_img.reshape((28,28))\nplt.imshow(random_img,cmap='gray')\nplt.title(train.iloc[27,0])\nplt.axis(\"off\")\nplt.show()","36618bbd":"x_train = x_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape : \", x_train.shape)\nprint(\"test : shape : \", test.shape)","4fe9ed7d":"x_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape : \", x_train.shape)\nprint(\"test : shape : \", test.shape)","337f02bc":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)","0e716454":"from sklearn.model_selection import train_test_split\nx_train,x_val ,y_train, y_val = train_test_split(x_train, y_train, test_size = 0.05, random_state = 2)\nprint(\"x_train shape : \", x_train.shape)\nprint(\"x_test : shape : \", x_val.shape)\nprint(\"y_train shape : \", y_train.shape)\nprint(\"y_test : shape : \", y_val.shape)","b9059633":"from sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","cf70de2a":"model = Sequential()","3d646cf4":"\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",\n                input_shape =(28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",))\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5), padding = \"Same\",activation = \"relu\",))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(3,3)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","8ce4da20":"print (model.summary())","380883ea":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","606744c8":"model.compile(optimizer = optimizer , \n              loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","28c1caf9":"epochs = 30  # for better result increase the epochs\nbatch_size = 32","b24a4b41":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.2,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.2, # Randomly zoom image 5%\n        width_shift_range=0.2,  # randomly shift images horizontally 5%\n        height_shift_range=0.2,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images","08aa2a59":"datagen.fit(x_train)","3171cf4a":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_val,y_val), \n                              steps_per_epoch=x_train.shape[0] \/\/ batch_size)","5f06b613":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"Validation Accuracy\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()\nplt.figure()","e5949458":"plt.plot(history.history['val_accuracy'], color='b', label=\"Valdation Accuracy\")\nplt.title(\"Test Accuracy\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()\nplt.figure()","45d1b91c":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \npred = np.argmax(Y_pred,axis = 1) \n\n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","25613dda":"predictions = model.predict(test)\npredictions = np.argmax(predictions, axis=1)\nsample_submission['Label'] = predictions\nsample_submission.to_csv(\"output3.csv\", index=False)","d0dc3b4e":"# Normalization\n* We should perform normalization images to make process, in our case CNN model,faster\n* With normalization, gray scale images are obtained. ","548491d9":"**Needed Libraries**","9e00e471":"# Load Train and Test Data","f2c034bf":"**Compiling The Model**","3689a751":"**Data Augmentation**","82f45e8c":"**Buiding The Model Structure**","583aa773":"# Loading data which will be submitted \n","8db9b9a9":"# Spliting Test and Train Data\n* In my model, I prefer to split test and train data with 1\/20 ratio.\n* Train size is 95%.\n* Test size is 5%.","6cdeda96":"# Reshaping\n*  Train and test images (28 x 28)\n* We reshape all data to 28x28x1 3D matrices.\n* Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel.","17e6d589":"# Label Encoding","33051882":"**Optimizer**","96143353":"**Initializing The Model**","f61473d9":"# Visualization of Result\n\n**Test Loss**","b5630ba9":"**Processing Data with The Model (Fitting)**","cfa08b0f":"**Confusion Matrix**","2abb91cc":"# Write The Results to Output File","7135fd38":"**Hyperparatemers**","352761ca":"**Test Accuracy**","9d897c33":"# Implementing Our Model\n"}}