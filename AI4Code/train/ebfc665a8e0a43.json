{"cell_type":{"daf2aa7f":"code","d72a1efc":"code","2e36e239":"code","0b4ada5f":"code","09dc8c5b":"code","bce502de":"code","1fbaf209":"code","25750ce2":"code","6e92844d":"code","b3790b0d":"code","7618391a":"code","5c151838":"code","f8015d39":"code","df6247a1":"code","0f9c39f5":"code","f2a2ada2":"code","a741e0ea":"code","77cdd2e4":"code","b813ec6d":"code","334dd574":"code","0d0ee6af":"code","9e2701de":"code","ee9089e5":"markdown","90ddc977":"markdown","07974278":"markdown","95b9d7c2":"markdown","e2824e76":"markdown","bef409d9":"markdown","bbd798af":"markdown","b4def36f":"markdown","078de58a":"markdown"},"source":{"daf2aa7f":"batch_size = 32\nepochs = 1500\nchannels = 3\nimg_height = 256\nimg_width = 256\nlearning_rate = 0.00001\ntrain_dir = '..\/input\/rgbeurosat\/RBG\/train'\nval_dir = '..\/input\/rgbeurosat\/RBG\/val'\ntest_dir = '..\/input\/rgbeurosat\/RBG\/test'","d72a1efc":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_data_generator = ImageDataGenerator(\n    rescale = 1.\/255,\n    width_shift_range = 0.15,\n    height_shift_range = 0.15,\n    horizontal_flip=True,\n    zoom_range=0.3\n)","2e36e239":"validation_data_generator = ImageDataGenerator(\n    rescale=1.\/255\n)","0b4ada5f":"train_data = train_data_generator.flow_from_directory(\n    batch_size=batch_size,\n    directory=train_dir,\n    shuffle=True,\n    target_size=(img_height, img_width),\n    class_mode='categorical'\n)","09dc8c5b":"val_data = validation_data_generator.flow_from_directory(\n    batch_size=batch_size,\n    directory=val_dir,\n    shuffle=True,\n    target_size=(img_height, img_width),\n    class_mode='categorical'\n)","bce502de":"from keras import applications\nbase_model = applications.resnet50.ResNet50(weights= None, include_top=False, input_shape= (img_height, img_width, channels))","1fbaf209":"from keras import Model\nfrom keras.layers import Dense, Dropout, GlobalAveragePooling2D\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dropout(0.7)(x)\npredictions = Dense(10, activation= 'softmax')(x)\nmodel = Model(inputs = base_model.input, outputs = predictions)","25750ce2":"from keras.optimizers import Adam\nadam = Adam(lr=learning_rate)\nmodel.compile(optimizer= adam, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","6e92844d":"from keras.callbacks import ModelCheckpoint\n\nmcp_save = ModelCheckpoint('ResNet.h5', save_best_only=True, monitor='val_loss', mode='min')","b3790b0d":"history = model.fit_generator(\n    train_data,\n    epochs=epochs,\n    validation_data=val_data,\n    steps_per_epoch=24,\n    validation_steps=10,\n    callbacks=[mcp_save]\n)","7618391a":"import matplotlib.pyplot as plt","5c151838":"plt.figure(figsize = (20,10))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'vaidation'], loc='upper left')\nplt.show()","f8015d39":"plt.figure(figsize = (20,10))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'vaidation'], loc='upper left')\nplt.show()","df6247a1":"test_data_generator = ImageDataGenerator(\n    rescale=1.\/255\n)","0f9c39f5":"test_data = test_data_generator.flow_from_directory(\n    batch_size=1,\n    directory=test_dir,\n    shuffle=False,\n    target_size=(img_height, img_width),\n    class_mode='categorical'\n)\nidx2label_dict = {test_data.class_indices[k]: k for k in test_data.class_indices}","f2a2ada2":"import time \n\nmodel.load_weights('ResNet.h5')\ninference_times = []\nfor i in range(5):\n    start_time = time.time()\n    y_pred = model.predict_generator(test_data, steps=2700)\n    inference_time = time.time() - start_time\n    inference_times.append(inference_time)\nprint('Average inference time: %.2f seconds' % (sum(inference_times)\/len(inference_times)))\ny_true = test_data.classes","a741e0ea":"import numpy as np\n\ny_pred = np.argmax(y_pred, axis = 1)","77cdd2e4":"from sklearn.metrics import confusion_matrix\nimport seaborn as sn\nimport pandas as pd","b813ec6d":"def get_key(mydict,val): \n    for key, value in mydict.items(): \n         if val == value: \n             return key ","334dd574":"def find_metrics(y_true, y_pred, idx2label_dict, class_name):\n    cm = confusion_matrix(y_true, y_pred)\n    out1 = np.sum(cm, axis = 1)\n    out2 = np.sum(cm, axis = 0)\n    id = get_key(idx2label_dict, class_name)\n    r1 = cm[id][id]\/out1[id]\n    r2 = cm[id][id]\/out2[id]\n    s = cm[id][id]\n    return (r1, r2, s)","0d0ee6af":"import prettytable\n\ntable = prettytable.PrettyTable(['Class', 'Recall', 'Precision', 'Accuracy', 'F1 Score'])\nclass_names = ['AnnualCrop', 'Forest', 'HerbaceousVegetation', 'Highway', 'Industrial', 'Pasture', 'PermanentCrop', 'Residential', 'River', 'SeaLake']\nsum = 0\n\ncm = confusion_matrix(y_true, y_pred)\ncm_sum = np.sum(cm)\ncol_sum = np.sum(cm, axis = 0)\nrow_sum = np.sum(cm, axis = 1)\n\nclass_acc = []\n\nrow = len(cm)\n\nfor x in range(0,row):\n    tp = cm[x][x] \n    fp = row_sum[x] - cm[x][x]\n    fn = col_sum[x] - cm[x][x]\n    tn = cm_sum - row_sum[x]- col_sum[x] + cm[x][x]\n\n    temp = (tp+tn)\/(tp+fn+fp+tn)\n    class_acc.append(temp)\n\ntemp = 0    \nfor _class in class_names:\n    result1, result2, s = find_metrics(y_true, y_pred, idx2label_dict, _class)\n    sum += s\n    f1 = (2*(result1* result2))\/ (result1 + result2)\n    table.add_row([_class, round(result1, 2), round(result2, 2), round(class_acc[temp], 2), round(f1, 2)])\n    temp +=1\nprint(table)\nprint(\"Accuracy: %.2f\" % (sum\/2700*100))","9e2701de":"cm = confusion_matrix(y_true, y_pred)\ndf_cm = pd.DataFrame(cm, index = [idx2label_dict[int(i)] for i in \"0123456789\"], columns = [idx2label_dict[int(i)] for i in \"0123456789\"])\nplt.figure(figsize = (20,10))\nsn.heatmap(df_cm, annot=True, linewidths=.5, fmt=\"d\")","ee9089e5":"# Confusion Matrix","90ddc977":"# Building model","07974278":"# Loading data","95b9d7c2":"# Declaring paths and variables","e2824e76":"# Running Model","bef409d9":"# Loading test data","bbd798af":"# Predicting values","b4def36f":"# Precision and Recall","078de58a":"# Plotting Metrics"}}