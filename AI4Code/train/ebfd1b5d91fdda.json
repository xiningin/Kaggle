{"cell_type":{"bcab0c3e":"code","6efc9ff0":"code","b37082d9":"code","40701c83":"code","a5dcb5ac":"code","6228bd15":"code","0a35fc0b":"code","3f60dc9b":"code","f93a525a":"code","3e282eb6":"code","971e3f36":"code","c539806f":"code","7a437207":"code","62714ae3":"code","cea98fdb":"code","dcaf8c6d":"code","30737759":"code","9537a8b0":"code","29de6408":"code","331bf9d9":"code","4095a140":"markdown","7a9c74b9":"markdown","ccd7b7a0":"markdown","8daed185":"markdown","60416eed":"markdown","fb2833c3":"markdown","34bba257":"markdown","cfb44d95":"markdown","4620d282":"markdown"},"source":{"bcab0c3e":"# ! pip install -U spacy","6efc9ff0":"# ! pip install -U spacy-lookups-data","b37082d9":"# !python -m spacy download en_core_web_sm","40701c83":"import spacy\nnlp = spacy.load('en_core_web_sm')","a5dcb5ac":"doc = nlp('Apple is looking to buy a UK startup of $1 billion')","6228bd15":"# To display a list of available properties\n# help(nlp)\n# help(doc)","0a35fc0b":"for token in doc:\n    print(token.text, token.i)","3f60dc9b":"for token in doc:\n    print(token.text, token.pos_)","f93a525a":"for token in doc:\n    print(token.text, token.dep_)","3e282eb6":"from spacy import displacy\n    \n# displacy.render(doc, jupyter=True)\ndisplacy.render(doc, style=\"dep\", options={'distance': 100, 'compact': True}, jupyter=True)","971e3f36":"for e in doc.ents:\n    print(e, e.label_)","c539806f":"displacy.render(doc, style=\"ent\", jupyter=True)","7a437207":"doc = nlp('Apple is looking to buy a U.K. startup of $1 billion. So is Microsoft.')\n\nfor s in doc.sents:\n    print(s)","62714ae3":"from spacy.matcher import Matcher\n\nmatcher = Matcher(nlp.vocab)\n\napple = [{\"LOWER\": \"apple\"}, {\"LEMMA\": \"be\", \"OP\": \"?\"}];\n\nmatcher.add('Find apple', [apple])\n\nmatches = matcher(doc)\n\nfor mid, start, end in matches:\n#     nlp.vocab.strings[mid] # Find apple\n    span = doc[start:end]\n    print(span)\n","cea98fdb":"positive = ['\ud83d\ude00', '\ud83d\ude03', '\ud83d\ude04', '\ud83d\ude01', '\ud83d\ude06']\nnegative = ['\ud83d\ude22', '\ud83d\ude2d', '\ud83d\ude24', '\ud83d\ude20', '\ud83d\ude21']","dcaf8c6d":"match_pos = [[{ \"TEXT\": e }] for e in positive]\nmatch_neg = [[{ \"TEXT\": e }] for e in negative]\n\nmatch_hash = [{\"TEXT\": \"#\"}, {\"IS_ASCII\": True}]","30737759":"def sentiment_up(matcher, doc, i, matches):\n    doc.sentiment += 0.1\n    \ndef sentiment_down(matcher, doc, i, matches):\n    doc.sentiment -= 0.1","9537a8b0":"matcher = Matcher(nlp.vocab)\n\nmatcher.add('Positive', match_pos, on_match=sentiment_up)\nmatcher.add('Negative', match_neg, on_match=sentiment_down)\n\nmatcher.add('Hashtag', [match_hash])","29de6408":"doc = nlp('Hello guys \ud83d\ude04 \ud83d\ude01 #goodvibes')","331bf9d9":"matches = matcher(doc)\n\nprint(doc.sentiment)\n\nfor mid, start, end in matches:\n    print(doc[start:end])    ","4095a140":"# Dependency Parsing","7a9c74b9":"# Emoji Sentiment","ccd7b7a0":"# Tokenization","8daed185":"### Features\n\n| Name | Description |\n| --- | --- |\n| Tokenization | Segmenting text into words, punctuation marks etc. |\n| Part-of-speech (POS) Tagging | Assigning word types to tokens, e.g. verb, noun |\n| Dependency Parsing | Assigning syntatic dependency labels, describing the relations between individual tokens e.g. subject or object |\n| Lemmatization | Assigning the base forms of words, e.g. lemma of \"was\" is \"be\", lemma of \"rats\" is \"rat\" |\n| Sentence Boundary Detection (SBD) | Finding and segmenting individual sentences |\n| Named Entity Recognition (NER) | Labelling named \"real-world\" objects, e.g. people, companies or locations |\n| Entity Linking (EL) | Disambiguating textual entities to unique identifiers in a Knowledge Base |\n| Similarity | Comparing words, text spans and documents and how similar they are to each other |\n| Text Classification | Assigning categories or labels to a whole document (or parts of it) |\n| Rule-based Matching | Finding sequences of tokens based on their content and linguistic annotations, similar to regex |\n| Training | Updating and improving a statistical model's predictions |\n| Serialization | Saving objects to files or byte strings |\n\n\n\n### Pipelines\n\nHow spaCy processes text.\n\n![spacy pipeline](..\/input\/nlp-in-python-1\/01\/images\/spacy_pipeline.png)","60416eed":"# Sentence Boundary Detection (SBD)","fb2833c3":"# Named Entity Recognition (NER)","34bba257":"# spaCy\n\nspaCy is a free, open-source library for advanced NLP in Python.\n\nIt's designed for production use and helps design applications that process and \"understand\" large volumes of text.\n\nIt can be used for information extraction, natural language understanding systems or pre-processing text for deep learning.","cfb44d95":"# POS Tagging","4620d282":"# Rule-based Matching"}}