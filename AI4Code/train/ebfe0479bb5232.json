{"cell_type":{"381c1c04":"code","de99cdb7":"code","550f95dd":"code","f940fde0":"code","0925d856":"code","92e3c62b":"code","30077326":"code","34adf653":"code","66ec18f6":"code","bb923535":"code","ff7f05df":"code","41ba8a12":"code","f227a599":"code","de82be26":"code","03cd11c3":"code","d2e3250a":"code","6febb86f":"code","b90947e6":"code","da1fe5cf":"markdown","bf44b774":"markdown","e4a5b0ca":"markdown","e957c3df":"markdown","b2dc95ea":"markdown","b6a8f7dd":"markdown","c28ebb13":"markdown"},"source":{"381c1c04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de99cdb7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\nimport lightgbm as lgb\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 130","550f95dd":"train_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\ntrain_set.head()","f940fde0":"train_set.shape","0925d856":"target_category = train_set[\"claim\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)\n","92e3c62b":"train_set.isnull().sum().sort_values(ascending =False)","30077326":"y= train_set['claim']\nx= train_set.drop(columns=['claim','id'])\nprint(len(x.columns))\n","34adf653":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))","66ec18f6":"\nfrom sklearn.metrics import mean_absolute_error\n\n# Function for comparing different approaches\ndef score_dataset_LGBM(X_train, X_test, Y_train, Y_test):\n    model = LGBMRegressor()\n    model.fit(X_train, Y_train)\n    preds = model.predict(X_test)\n    auc = metrics.roc_auc_score(Y_test, preds)\n    print(\"AUC :\",auc)\n    return mean_absolute_error(Y_test, preds)","bb923535":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n\nimputed_X_train.columns = X_train.columns\nimputed_X_test.columns = X_test.columns\n\nprint(\"Mean Absolute Error for LGBMRegressor  :\")\nprint(score_dataset_LGBM(imputed_X_train, imputed_X_test, Y_train, Y_test))\n","ff7f05df":"lgbm = LGBMRegressor()\n       \nlgbm.fit(X_train, Y_train)\n\ntest_predict = lgbm.predict(X_test)\n","41ba8a12":"y_pred_proba = lgbm.predict(X_test)\nfpr, tpr, _ = metrics.roc_curve(Y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(Y_test, y_pred_proba)\nprint(auc)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()\n","f227a599":"test_set.isnull().sum().sort_values(ascending = False)","de82be26":"test_id = test_set['id']\ntest_x= test_set.drop(columns=['id'])\nprint(len(test_x.columns))\n","03cd11c3":"\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(test_x))\n\n\nimputed_X_train.columns = X_test.columns\n","d2e3250a":"y_prdict =lgbm.predict(test_x)","6febb86f":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['id', 'claim'])\nsubmission.head(20)","b90947e6":"submission.to_csv('submission.csv', index=False)","da1fe5cf":"# Test Set","bf44b774":"# Imputation","e4a5b0ca":"# LGBM Regressor","e957c3df":"# Use SimpleImputer to replace missing values with the mean value of each column.\n\n","b2dc95ea":"# Read datasets","b6a8f7dd":"# Check null values","c28ebb13":"# LGBMRegressor"}}