{"cell_type":{"71086adf":"code","c46060c6":"code","323ed602":"code","ce5fc93a":"code","b7de6e04":"code","7db422ed":"code","b0339fab":"code","b0474890":"code","d0a0d98a":"code","a26c3a23":"markdown","5507b034":"markdown","8fc98e83":"markdown","9b511922":"markdown","7ba14e41":"markdown"},"source":{"71086adf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c46060c6":"trainingset = \"..\/input\/starcraft-2-player-prediction-challenge-2019\/TRAIN.CSV\"\ntestset = \"..\/input\/starcraft-2-player-prediction-challenge-2019\/TEST.CSV\"\n\ntrain_data = pd.read_fwf(trainingset, header=None)\ntrain_data = train_data[0].str.split(',', expand=True)\n\ntest_data = pd.read_fwf(testset, header=None)\ntest_data = test_data[0].str.split(',', expand=True)\n\n#loading of the training data\n\n#creation of the matrix to store the players activity\ntrain_columns_mode = ['id_list','id_player','race','s','f00','f01','f02','f10','f11','f12','f20','f21','f22','f30','f31','f32','f40','f41','f42','f50','f51','f52','f60','f61','f62','f70','f71','f72','f80','f81','f82','f90','f91','f92']\ntrain_columns = ['id_list','id_player', 'race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0']\ntrain_dataframe = pd.DataFrame([], columns=train_columns)\ntrain_dataframe_mode = pd.DataFrame([], columns=train_columns_mode)\n\n#creation of the matrix to store the players activity\ntest_columns_mode = ['id_list','race','s','f00','f01','f02','f10','f11','f12','f20','f21','f22','f30','f31','f32','f40','f41','f42','f50','f51','f52','f60','f61','f62','f70','f71','f72','f80','f81','f82','f90','f91','f92']\ntest_columns = ['id_list',\n               'race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0']\ntest_dataframe = pd.DataFrame([], columns=test_columns)\ntest_dataframe_mode = pd.DataFrame([], columns=test_columns_mode)","323ed602":"def loadMatrix(data, dataframe, train):\n    id_list = 0\n    for index in data.iterrows():\n        features = [0 for _ in range(10)]\n        time = 1\n        s_nb = 0\n        for value in index[1]:\n            if value:\n                if (\"hotkey\" in value):\n                    hotkey_number = value[-2]\n                    try:\n                        hotkey_number = int(hotkey_number)\n                        features[hotkey_number] += 1\n                    except:\n                        print(\"Error: no int in hotkey\")\n                elif (value == \"s\"):\n                    s_nb += 1\n                elif (value[0] == \"t\"):\n                    try:\n                        time = int(value[1:])\n                    except:\n                        print(\"Error: Time is wrong\") \n                        print(value[1:])\n        #Insert into dataframe\n        if train and time>=30:\n            id_player = index[1][0]\n            race = index[1][1]\n            df = pd.DataFrame([[id_list, id_player, race, s_nb\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[0]\/time]], columns=['id_list',\n               'id_player','race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0'])\n            dataframe = dataframe.append(df)\n            id_list += 1\n        elif not train:\n            race = index[1][0]\n            df = pd.DataFrame([[id_list, race, s_nb\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[0]\/time]], columns=['id_list',\n               'race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0'])\n            dataframe = dataframe.append(df)\n            id_list += 1\n    return dataframe\n\ndef loadMatrix_mode(data, dataframe, train):\n    id_list = 0\n    for index in data.iterrows():\n        features = [0 for _ in range(30)]\n        time = 1\n        s_nb = 0\n        for value in index[1]:\n            if value:\n                if (\"hotkey\" in value):\n                    hotkey_number = value[-2]\n                    hotkey_mode = value[-1]\n                    try:\n                        hotkey_number = int(hotkey_number)\n                        hotkey_mode = int(hotkey_mode)\n                        features[hotkey_number*3 + hotkey_mode] += 1\n                    except:\n                        print(\"Error: no int in hotkey\")\n                elif (value == \"s\"):\n                    s_nb += 1\n                elif (value[0] == \"t\"):\n                    try:\n                        time = int(value[1:])\n                    except:\n                        print(\"Error: Time is wrong\") \n                        print(value[1:])\n        #Insert into dataframe\n        if train and time>=30:\n            id_player = index[1][0]\n            race = index[1][1]\n            df = pd.DataFrame([[id_list, id_player, race, s_nb\/time, features[0]\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[10]\/time, features[11]\/time, features[12]\/time, features[13]\/time, features[14]\/time, features[15]\/time, features[16]\/time, features[17]\/time, features[18]\/time, features[19]\/time, features[20]\/time, features[21]\/time, features[22]\/time, features[23]\/time, features[24]\/time, features[25]\/time, features[26]\/time, features[27]\/time, features[28]\/time, features[29]\/time]], columns=train_columns_mode)\n            dataframe = dataframe.append(df)\n            id_list += 1\n        elif not train:\n            race = index[1][0]\n            df = pd.DataFrame([[id_list, race, s_nb\/time,features[0]\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[10]\/time, features[11]\/time, features[12]\/time, features[13]\/time, features[14]\/time, features[15]\/time, features[16]\/time, features[17]\/time, features[18]\/time, features[19]\/time, features[20]\/time, features[21]\/time, features[22]\/time, features[23]\/time, features[24]\/time, features[25]\/time, features[26]\/time, features[27]\/time, features[28]\/time, features[29]\/time]], columns=test_columns_mode)\n            dataframe = dataframe.append(df)\n            id_list += 1\n    return dataframe","ce5fc93a":"train_dataframe = loadMatrix(train_data, train_dataframe, True)\ntest_dataframe = loadMatrix(test_data, test_dataframe, False)\n\ntrain_dataframe_mode = loadMatrix_mode(train_data, train_dataframe_mode, True)\ntest_dataframe_mode = loadMatrix_mode(test_data, test_dataframe_mode, False)\n\n#Using one hot encoding for races\ntest_dataframe = pd.get_dummies(test_dataframe, columns=['race'])\ntrain_dataframe = pd.get_dummies(train_dataframe, columns=['race'])\n\ntest_dataframe_mode = pd.get_dummies(test_dataframe_mode, columns=['race'])\ntrain_dataframe_mode = pd.get_dummies(train_dataframe_mode, columns=['race'])","b7de6e04":"#separating between labels and data\nattributes = train_dataframe.iloc[:,2:].values\nlabels = train_dataframe.iloc[:,1].values\ntests = test_dataframe.iloc[:,1:].values\n\n#train and evaluate the classifier by separating training data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(attributes, labels, test_size=0.2, random_state=30)\n\nclassifier = RandomForestClassifier(n_estimators=400, random_state=20)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\nprint(\"score with hotkeys : \", classifier.score(X_test,y_test))\n\n#modes\nattributes_mode = train_dataframe_mode.iloc[:,2:].values\nlabels_mode = train_dataframe_mode.iloc[:,1].values\ntests_mode = test_dataframe_mode.iloc[:,1:].values\n\nX_train_mode, X_test_mode, y_train_mode, y_test_mode = train_test_split(attributes_mode, labels_mode, test_size=0.2, random_state=30)\nclassifier.fit(X_train_mode, y_train_mode)\ny_pred_mode = classifier.predict(X_test_mode)\n\nprint(\"score with hotkeys and mode : \", classifier.score(X_test_mode,y_test_mode))","7db422ed":"#coying dataframe to avoid data corruption and converting player id to number\ntest_dataframe = train_dataframe = pd.DataFrame([], columns=train_columns)\ntest_dataframe = loadMatrix(train_data, test_dataframe, True)\n\ntest_dataframe = pd.get_dummies(test_dataframe, columns=['race'])\ntest_dataframe['id_player'] = test_dataframe['id_player'].astype('category').cat.codes\n\nvar_correlation = test_dataframe.corr()\nsns.heatmap(var_correlation, xticklabels=var_correlation.columns, yticklabels=var_correlation.columns, annot=False)","b0339fab":"test_datraframe_mode = train_dataframe_mode.copy()\ntest_datraframe_mode['id_player'] = test_datraframe_mode['id_player'].astype('category').cat.codes\n\nvar_correlation_mode = test_datraframe_mode.corr()\nsns.heatmap(var_correlation_mode, xticklabels=var_correlation_mode.columns, yticklabels=var_correlation_mode.columns, annot=False)","b0474890":"optimal_time_cut = 60\noptimal_minimal_time = 30\n\ndef loadMatrix_time(data, dataframe, train):\n    id_list = 0\n    for index in data.iterrows():\n        features = [0 for _ in range(10)]\n        time = 1\n        s_nb = 0\n        for value in index[1]:\n            if value:\n                if time <=optimal_time_cut:\n                    if (\"hotkey\" in value):\n                        hotkey_number = value[-2]\n                        try:\n                            hotkey_number = int(hotkey_number)\n                            features[hotkey_number] += 1\n                        except:\n                            print(\"Error: no int in hotkey\")\n                    elif (value == \"s\"):\n                        s_nb += 1\n                if (value[0] == \"t\"):\n                    try:\n                        time = int(value[1:])\n                    except:\n                        print(\"Error: Time is wrong\") \n                        print(value[1:])\n        #Insert into dataframe\n        if train and time>=optimal_minimal_time:\n            id_player = index[1][0]\n            race = index[1][1]\n            df = pd.DataFrame([[id_list, id_player, race, s_nb\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[0]\/time]], columns=['id_list',\n               'id_player','race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0'])\n            dataframe = dataframe.append(df)\n            id_list += 1\n        elif not train:\n            race = index[1][0]\n            df = pd.DataFrame([[id_list, race, s_nb\/time, features[1]\/time, features[2]\/time, features[3]\/time, features[4]\/time, features[5]\/time, features[6]\/time, features[7]\/time, features[8]\/time, features[9]\/time, features[0]\/time]], columns=['id_list',\n               'race','s','f1','f2','f3','f4','f5','f6','f7','f8','f9','f0'])\n            dataframe = dataframe.append(df)\n            id_list += 1\n    return dataframe","d0a0d98a":"dataframe =  pd.DataFrame([], columns=train_columns)\ndataframe = loadMatrix_time(train_data, dataframe, True)\ndataframe = pd.get_dummies(dataframe, columns=['race'])\n\nattributes = dataframe.iloc[:,2:16].values\nlabels = dataframe.iloc[:,1].values\ntests = test_dataframe.iloc[:,1:15].values\n\nX_train, X_test, y_train, y_test = train_test_split(attributes, labels, test_size=0.2, random_state=30)\n\nclassifier = RandomForestClassifier(n_estimators=400, random_state=20)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\nprint(\"score with optimal time : \", classifier.score(X_test,y_test))\n\n","a26c3a23":"3. Data exploration","5507b034":"Only significant correlation is between id_player and race; we speculate that each player has a favorite race and always plays it.\nAs adding hotkey mode doesn't seems to add much information, and do not improve score while making the models harder to understand, we discard the mode dataset.","8fc98e83":"4. Changing game time consideration","9b511922":"1. Data loading","7ba14e41":"2. Simple classification using random forest"}}