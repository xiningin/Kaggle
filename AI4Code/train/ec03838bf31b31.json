{"cell_type":{"9782ea35":"code","4bb8a3f3":"code","bc2af337":"code","027ab849":"code","887f0a43":"code","de4c8822":"code","073fc6ef":"code","eaaec629":"code","f4df0889":"code","2d74c3c5":"code","696a4006":"code","3d72b3c3":"code","588f9f8f":"code","2c4c1369":"code","9ec141a2":"code","56ae09fe":"code","1f104cdb":"code","3e252548":"code","a60b44ab":"code","60914892":"code","a835ba51":"code","271d5ecb":"code","5d890d01":"code","aa4d3ca8":"code","f6a3fa9a":"code","09c3c172":"code","f539a4ac":"code","b9b13bdd":"code","31ec050e":"code","081225a4":"code","6d0f3a9f":"code","f29f6461":"code","af4c3898":"code","9e985ef2":"code","0a3572e5":"code","5b0b7e2f":"code","b1d12e65":"markdown","5bb07ee4":"markdown","df6a2ba8":"markdown","131fe6d4":"markdown","7f94a882":"markdown","f835f0fb":"markdown","e10093d0":"markdown","eaf1a6d6":"markdown","611f204a":"markdown","060a3d5a":"markdown","6c9ac857":"markdown","a5b4fee1":"markdown","a9445dde":"markdown","4d7ac04a":"markdown","e5f3f987":"markdown","431c7728":"markdown","a6d68974":"markdown","b452facb":"markdown","1618390e":"markdown","01617904":"markdown","0ed25b89":"markdown","59ae7bfc":"markdown","eed0813f":"markdown","497be57d":"markdown","7a590264":"markdown","129542d6":"markdown","7019e7c9":"markdown","62cbd63e":"markdown","29a509ea":"markdown","5c88a77e":"markdown","51850e10":"markdown","b95865fb":"markdown","5f6a73e3":"markdown","1d8dfba1":"markdown","9fe169c0":"markdown","95854c77":"markdown","c849965d":"markdown","c4e96dc3":"markdown","5cc55433":"markdown","ed1bff64":"markdown","adbb36d3":"markdown"},"source":{"9782ea35":"!pip install fastai2 -q","4bb8a3f3":"#Load the dependancies\nfrom fastai2.basics import *\nfrom fastai2.callback.all import *\nfrom fastai2.vision.all import *\nfrom fastai2.medical.imaging import *\n\nimport pydicom\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd\nimport os\n\nsns.set(style=\"whitegrid\")\nsns.set_context(\"paper\")","bc2af337":"source = Path('..\/input\/osic-pulmonary-fibrosis-progression')\nfiles = os.listdir(source)\nprint(files)","027ab849":"train = source\/'train'\ntrain_files = get_dicom_files(train)\ntrain_files","887f0a43":"info_view = train_files[777]\ndimg = dcmread(info_view)\ndimg","de4c8822":"dimg.PixelData[:200]","073fc6ef":"dimg.pixel_array, dimg.pixel_array.shape","eaaec629":"dimg.show()","f4df0889":"px = dimg.pixels.flatten()\nplt.hist(px, color='c')","2d74c3c5":"tensor_dicom = pixels(dimg) #convert into tensor\n\nprint(f'RescaleIntercept: {dimg.RescaleIntercept:1f}\\nRescaleSlope: {dimg.RescaleSlope:1f}\\nMax pixel: '\n      f'{tensor_dicom.max()}\\nMin pixel: {tensor_dicom.min()}\\nShape: {tensor_dicom.shape}')","696a4006":"tensor_dicom_scaled = scaled_px(dimg) #convert into tensor taking RescaleIntercept and RescaleSlope into consideration\nplt.hist(tensor_dicom_scaled.flatten(), color='c')","3d72b3c3":"print(f'Max pixel: {tensor_dicom_scaled.max()}\\nMin pixel: {tensor_dicom_scaled.min()}')","588f9f8f":"dimg.show(max_px=None, min_px=300, figsize=(7,7))","2c4c1369":"dimg.show(max_px=100, min_px=-100, figsize=(7,7))","9ec141a2":"dimg.show(max_px=None, min_px=-1000, figsize=(7,7))","56ae09fe":"dimg.show(max_px=-1000, min_px=-2000, figsize=(7,7))","1f104cdb":"def show_one_image(file):\n    \"\"\" function to view patient image and choosen tags within the head of the DICOM\"\"\"\n    pat = dcmread(file)\n    print(f'Patient ID: {pat.PatientID}')\n    print(f'File Number: {pat.InstanceNumber}')\n    print(f'\\nWindow Center: {pat.WindowCenter}')\n    print(f'Window Width: {pat.WindowWidth}')\n    print(f'Rescale Intercept: {pat.RescaleIntercept}')\n    print(f'Rescale Slope: {pat.RescaleSlope}')\n    print(f'Body part: {pat.BodyPartExamined}')\n    img = dcmread(file)\n    return img.show()","3e252548":"show_one_image(info_view)","a60b44ab":"df = pd.read_csv(source\/'train.csv')\ndf.head()","60914892":"#Plot 3 comparisons\ndef plot_comparison3(df, feature, feature1, feature2):\n    \"Plot 3 comparisons from a dataframe\"\n    fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (25, 4))\n    s1 = sns.countplot(df[feature], ax=ax1)\n    s1.set_title(feature)\n    s2 = sns.countplot(df[feature1], ax=ax2)\n    s2.set_title(feature1)\n    s3 = sns.countplot(df[feature2], ax=ax3)\n    s3.set_title(feature2)\n    plt.show()","a835ba51":"plot_comparison3(df, 'Age', 'Sex', 'SmokingStatus')","271d5ecb":"#Plot 1 comparisons\ndef plot_comparison1(df, feature):\n    \"Plot 1 comparisons from a dataframe\"\n    fig, (ax1) = plt.subplots(1,1, figsize = (25, 4))\n    s1 = sns.countplot(df[feature], ax=ax1)\n    s1.set_title(feature)\n    plt.show()","5d890d01":"plot_comparison1(df, 'Patient')","aa4d3ca8":"no_of_patients = df.Patient.nunique()\nno_of_patients","f6a3fa9a":"patient_01 = df[df.Patient == 'ID00082637202201836229724']\npatient_01","09c3c172":"patient_01.plot(kind='line',x='Weeks',y='FVC',color='red')\nplt.show()","f539a4ac":"patient_01.plot(kind='line',x='Weeks',y='Percent', color='c')\nplt.show()","b9b13bdd":"patient001 = train\/'ID00082637202201836229724'\npatient001_files = get_dicom_files(patient001)\npatient001_files","31ec050e":"@delegates(subplots)\ndef show_images(ims, nrows=1, ncols=None, titles=None, cmap=None, **kwargs):\n    \"Show all images `ims` as subplots with `rows` using `titles`\"\n    if ncols is None: ncols = int(math.ceil(len(ims)\/nrows))\n    if titles is None: titles = [None]*len(ims)\n    axs = subplots(nrows, ncols, **kwargs)[1].flat\n    for im,t,ax in zip(ims, titles, axs): show_image(im, ax=ax, title=t, cmap=cmap)","081225a4":"im_list = []","6d0f3a9f":"def get_files(pat):\n        folder = f'{train}\/{pat}'\n        fl = get_dicom_files(folder)\n        for file in fl:\n            im_list.append(file)","f29f6461":"get_files('ID00082637202201836229724')","af4c3898":"sorted_list = sorted(im_list, key=lambda i: int(os.path.splitext(os.path.basename(i))[0]))","9e985ef2":"pat_list =[]","0a3572e5":"def view_patient(l):\n    for file in l:\n        trans = Transform(Resize(256))\n        dicom_create = PILDicom.create(file)\n        dicom_transform = trans(dicom_create)\n        pat_list.append(dicom_transform)\n    show_images(pat_list, cmap='bone', nrows=38)","5b0b7e2f":"view_patient(sorted_list)","b1d12e65":"By default `pydicom` reads `PixelData` as the raw bytes. Because of the complexity in interpreting `PixelData`, `pydicom` provides an easy way to get it in a convenient form known as the `pixel_array` which returns a `numpy.ndarray` containing the `PixelData`","5bb07ee4":"After re-scaling the maximum pixel value is 2492 and the minimum value is -3674 and we can now correctly see what parts of the image correspond to what parts of the body based on the Hounsfield scale.","df6a2ba8":"Specify the folder that contains the training images train and use `get_dicom_files` to access the dicom images","131fe6d4":"Taking a look at patient: `ID00082637202201836229724`, there are 9 entries ranging from week 19 to week 79","7f94a882":"Taking a look at the the pixel data using the `show` function","f835f0fb":"Looking at the bones `+300 HUs`","e10093d0":"Create a function to view an image and some header `tags`","eaf1a6d6":"That's better the file names are now in sequence\n\n![list_two.PNG](attachment:list_two.PNG)","611f204a":"# Looking at patient ID00082637202201836229724","060a3d5a":"# Next Steps:\n\n- Viewing various aspects; orthogonal slices\n- Create a DataBlock\n- Experimentation with tissue densities","6c9ac857":"There are some 'key' aspects within the header:\n\n**(0018, 0015) Body Part Examined CS: Chest**: images are from the chest area\n\n**(0020, 0013) Instance Number IS: \"420\"**: this is the same as the `.dcm` image file\n\n**(0020, 0032) Image Position (Patient) DS: [-182.800, -177.600, -165.000]**: represents the x, y and z positions\n\n**(0020, 0037) Image Orientation (Patient) DS: [1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000]**: This is 6 values that represent two normalized 3D vectors(in this case directions) where the first vector [1,0,0] represents Xx, Xy, Xz and the second vector [0,1,0] that represents Yx, Yy, Yz.\n\n![sq.PNG](attachment:sq.PNG)\nIn this case the image plane is parallel to the patient Axial Plane [source](http:\/\/dicomiseasy.blogspot.com\/2013\/06\/getting-oriented-using-image-plane.html)\n\n**(0028, 0004) Photometric Interpretation CS: MONOCHROME2**: aka the colorspace, images are being stored as low values=dark, high values=bright. If the colorspace was **MONOCHROME** then the low values=bright and high values=dark.\n\n**(0028, 0100) Bits Allocated US: 16**: each image is 16 bits\n\n**(0028, 1050) Window Center DS: \"-500.0\"**   : aka Brightness\n\n**(0028, 1051) Window Width  DS: \"-1500.0\"**  : aka Contrast  \n\n**(0028, 1052) Rescale Intercept DS: \"-1024.0\"** and **(0028, 1053) Rescale Slope DS: \"1.0\"**: The Rescale Intercept and Rescale Slope are applied to transform the pixel values of the   image into values that are meaningful to the application. It's importance is explained further in the kernel.\n\n**(7fe0, 0010) Pixel Data OW: Array of 524288 elements**: the image pixel data that `pydicom` uses to convert the pixel data into an image. \n\nThis can be calculated by this formula: **Array of elements** = **Rows X Columns X Number of frames X Samples per pixel X (bits_allocated\/8)** so in this example it would be **512 X 512 X 1 X 1 X (16\/8) = 524288**\n","a5b4fee1":"![list_one.PNG](attachment:list_one.PNG)","a9445dde":"Customizing `show_images` so that it can take a `cmap` attribute. This can be easily done by using `@delegates`, the out of the box fastai version does not allow `cmap` as an option. `show_images` provides a convenient way of viewing mutiple images.","4d7ac04a":"### Looking at various densities","e5f3f987":"Now to view the images. `show_images` provides a convenient way of viewing mutiple images.","431c7728":"Let's view all the slices for this patient.  This is a multi-step process because we know from the `header` of the dicom file that tag **(0020, 0013) Instance Number** represents the chronological order of the slices of the CT scan.  Each file has a number so `file` 1 will be the first slice and the last file in the sequence will be the last slice.\n\nThe direction of the slices is represented in the diagram below so the first slice is from the bottom moving up the body\n\n![dir.PNG](attachment:dir.PNG)","a6d68974":"You can even view the CT chamber","b452facb":"This image has a RescaleIntercept of -1024 and a RescaleSlope of 1. These two values allows for transforming pixel values into [Hounsfield Units(HU)](https:\/\/en.wikipedia.org\/wiki\/Hounsfield_scale). Densities of different tissues on CT scans are measured in HUs\n\nThe Hounsfield scale is a quantitative scale for describing radiodensity in medical CT and provides an accurate density for the type of tissue. On the Hounsfield scale, air is represented by a value of \u22121000 (black on the grey scale) and bone between +300 (cancellous bone) to +3000 (dense bone) (white on the grey scale), water has a value of 0 HUs and metals have a much higher HU range +2000 HUs.\n\nThe pixel values in the histogram above do not correctly correspond to tissue densities. For example most of the pixels are between pixel values 0 and 200 which correspond to water but this image is predominantly showing the lungs which are filled with air. Air on the Hounsfield scale is -1000 HUs.\n\nThis is where RescaleIntercept and RescaleSlope are important. Fastai provides a convenient way by using a function `scaled_px` to rescale the pixels with respect to RescaleIntercept and RescaleSlope.\n\n### rescaled pixel = pixel * RescaleSlope + RescaleIntercept","1618390e":"We notice that the images in the list are not in sequence so we need to put them in sequence using a `lamba` function","01617904":"To be able to view all the images we need to create a custom function that will create a `PILDicom` image and for `show_images` to work we will iterate through all the images in the patients folder and append them to `im_list`.","0ed25b89":"### Viewing the slices in chronological order","59ae7bfc":"Looking at the water based areas `0 HUs`","eed0813f":"# Load Dependancies","497be57d":"And the same patient has `266` dicom images representing the slices of the CT scan acquired at `Week=0`","7a590264":"There are `33026` files in the train set","129542d6":"The images are now in chronological order","7019e7c9":"plotting `Percent` over the weeks","62cbd63e":"What does `Pixel Data` look like?","29a509ea":"# EDA","5c88a77e":"# Understanding Dicom's","51850e10":"Looking at the air filled areas `-1000 HUs`","b95865fb":"# Pixel Distribution and Tissue Densities","5f6a73e3":"To access the files I will be using `fastai2.medical.imaging module`.  Under the hood `fastai` uses `pydicom` to access the dicom files.\n\nPydicom is a python package for parsing DICOM files and makes it easy to covert DICOM files into pythonic structures for easier manipulation. Files are opened using pydicom.dcmread","1d8dfba1":"There are a total of `176` unique patients and each patient has between `6` and `10` visits logged in the csv file","9fe169c0":"DICOM(Digital Imaging and COmmunications in Medicine) is the de-facto standard that establishes rules that allow medical images(X-Ray, MRI, CT) and associated information to be exchanged between imaging equipment from different vendors, computers, and hospitals.\n\nDICOM files typically have a .dcm extension and provides a means of storing data in separate 'tags' such as patient information as well as image\/pixel data. A DICOM file consists of a header and image data sets packed into a single file. The information within the header is organized as a constant and standardized series of tags.\n\nBy extracting data from these tags one can access important information regarding the patient demographics, study parameters, etc\n\nThis competition specifically uses CT scans\n\nIf you are interested in knowing more about medical imaging you can view my [blog](https:\/\/asvcode.github.io\/MedicalImaging\/)\n\n![dicom_.PNG](attachment:dicom_.PNG)","95854c77":"These images are 16 bit DICOM images and typically the pixel values in these type of images can range from `-32768` to `32768`.\n\nLooking at the pixel distribution of this image","c849965d":"Now lets take a look the `header` section of the dicom image","c4e96dc3":"Taking a look at the `csv` file","5cc55433":"plotting `FVC` over the weeks","ed1bff64":"In this case the pixel distribution is from `-2000` to `2437` and as this image is stored in `MONOCHROME2` format the low values appear as dark and the high values as bright.","adbb36d3":"# Contents\n\n- Load dependancies\n- Understanding Dicom's\n- Pixel distribution and Tissue densitites\n- EDA\n- Looking at patient ID00082637202201836229724\n    - viewing the slices in chronological order\n- Next Steps\n\n![pneu.PNG](attachment:pneu.PNG)"}}