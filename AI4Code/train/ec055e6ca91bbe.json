{"cell_type":{"3d06b98f":"code","e8275696":"code","cc422c04":"code","b40831ad":"code","243b1da3":"code","ed333c24":"code","ffffc762":"code","7cfb08ec":"code","13fa7158":"code","1fecd9ca":"code","e595e288":"code","a566fd75":"code","2e61bdfc":"code","a598cd6a":"code","50b4b657":"code","1ff1485d":"markdown","745ac155":"markdown","6bd19517":"markdown","5b431ad2":"markdown"},"source":{"3d06b98f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8275696":"import pandas as pd\ncreditcard = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\",index_col=0)","cc422c04":"creditcard.head()","b40831ad":"# summarize the shape of the dataset\nprint(creditcard.shape)","243b1da3":"creditcard.describe()","ed333c24":"creditcard.info()","ffffc762":"plt.hist(creditcard['Class'])","7cfb08ec":"creditcard.Class.unique()","13fa7158":"creditcard.Class.value_counts()","1fecd9ca":"cor = creditcard.corr()\n#Correlation with output variable\ncor_target = abs(cor[\"Class\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target>0.2]\nrelevant_features","e595e288":"#Selecting highly correlated features\nrelevant_features = cor_target[cor_target>0.1]\nrelevant_features","a566fd75":"df=relevant_features.to_frame()\ndf.head()","2e61bdfc":"df1=cor[['V1','V3','V4','V7','V10','Class']]\ndf1.head()","a598cd6a":"import seaborn as sns\n#Using Pearson Correlation\nplt.figure(figsize=(12,10))\n#cor = creditcard.corr()\nsns.heatmap(df1, annot=True, cmap=plt.cm.Reds)\nplt.show()","50b4b657":"creditcard.isnull().sum(axis=0)","1ff1485d":"## Finding Columns with NULL Values\n\nAs we see here, there are no null values in the dataset.","745ac155":"# Selecting Highly Correlated Features","6bd19517":"# Exploratory Data Analysis","5b431ad2":"## Target Distribution"}}