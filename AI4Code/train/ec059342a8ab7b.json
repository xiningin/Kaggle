{"cell_type":{"e142d33f":"code","327ead26":"code","dfb2b25d":"code","9fa732e0":"code","560883fd":"code","89792b8c":"code","82564f1a":"code","2141f1bd":"code","e559984e":"code","a1d11966":"code","c0f20e82":"code","cd4132fa":"code","cf96d85f":"markdown","ec6a0ad5":"markdown","6dbd0fe0":"markdown","003fe269":"markdown","1fced013":"markdown","8a63ea17":"markdown","a7e25230":"markdown","f7b71a73":"markdown","13b053af":"markdown","01e2d450":"markdown","497e1423":"markdown","70f68bda":"markdown","ca96c255":"markdown"},"source":{"e142d33f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\nfrom plotly.plotly import iplot\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nfrom wordcloud import WordCloud \n\nimport os\nprint(os.listdir(\"..\/input\"))","327ead26":"data1 = pd.read_csv(\"..\/input\/dota.csv\")","dfb2b25d":"data1.head()","9fa732e0":"data1.Health = [((x-min(data1.Health))\/(max(data1.Health)-min(data1.Health)))*100 for x in data1.Health]\ndata1.Mana = [((x-min(data1.Mana))\/(max(data1.Mana)-min(data1.Mana)))*100 for x in data1.Mana]\ndata1.Damage = [((x-min(data1.Damage))\/(max(data1.Damage)-min(data1.Damage)))*100 for x in data1.Damage]\ndata1.AttackSpeed = [((x-min(data1.AttackSpeed))\/(max(data1.AttackSpeed)-min(data1.AttackSpeed)))*100 for x in data1.AttackSpeed]\ndata1.Range = [((x-min(data1.Range))\/(max(data1.Range)-min(data1.Range)))*100 for x in data1.Range]\ndata1.Armor = [((x-min(data1.Armor))\/(max(data1.Armor)-min(data1.Armor)))*100 for x in data1.Armor]\ndata1.MovementSpeed = [((x-min(data1.MovementSpeed))\/(max(data1.MovementSpeed)-min(data1.MovementSpeed)))*100 for x in data1.MovementSpeed]\ndata1.head()","560883fd":"data1.info()","89792b8c":"data = data1.Name[:5:-1]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","82564f1a":"# first line plot\ntrace1 = go.Scatter(\n    x=data1.index,\n    y=data1.Damage,\n    name = \"Damage\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=data1.index,\n    y=data1.Range,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Range\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Damage and Range'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","2141f1bd":"trace1 = go.Histogram(\n    x=data1.Range,\n    opacity=0.75,\n    name = \"Range\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=data1.Mana,\n    opacity=0.75,\n    name = \"Mana\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' Mana and Range',\n                   xaxis=dict(title='Attack Speed and Range Ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e559984e":"trace0 = go.Box(\n    y=data1.Health,\n    name = 'Health',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=data1.Damage,\n    name = 'Damage',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","a1d11966":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndata2 = data1.loc[:,[\"Mana\",\"Health\", \"Damage\"]]\ndata2[\"index\"] = np.arange(1,len(data2)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","c0f20e82":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=data1.index,\n    y=data1.Health,\n    z=data1.Mana,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cd4132fa":"trace1 = go.Scatter(\n    x=data1.index,\n    y=data1.Health,\n    name = \"Health\"\n)\ntrace2 = go.Scatter(\n    x=data1.index,\n    y=data1.Mana,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Mana\"\n)\ntrace3 = go.Scatter(\n    x=data1.index,\n    y=data1.Damage,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Damage\"\n)\ntrace4 = go.Scatter(\n    x=data1.index,\n    y=data1.AttackSpeed,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"AttackSpeed\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Health, Damage, Mana and Attack Speed VS Index of Ancients'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cf96d85f":"<p id='10'><h2><b>Conclusion<\/b><\/h2><\/p>\n* In this kernel we used some of the visualization tools.\n* We have learned how to use them.\n* If you like, please upvote!","ec6a0ad5":"<p id='3'><h3><b>Word Cloud<\/b><\/h3><\/p>","6dbd0fe0":"> <h1><b>TABLE OF CONTENTS<\/b><\/h1>\n<ul>\n    <a href='#1'><li>Data Overview<\/li><\/a>\n<\/ul>\n<ul>\n    <a href='#2'><li>Visualization<\/li><\/a>\n        <ul>\n             <a href='#3'><li>Word Cloud<\/li><\/a>\n             <a href='#4'><li>Inset Plots<\/li><\/a>\n             <a href='#5'><li>Histogram<\/li><\/a>\n             <a href='#6'><li>Box Plots<\/li><\/a>\n             <a href='#7'><li>Scatter Matrix Plots<\/li><\/a>\n             <a href='#8'><li>3D Scatter Plot with Colorscaling<\/li><\/a>\n             <a href='#9'><li>Multiple Subplots<\/li><\/a>\n        <\/ul>\n<\/ul>\n<ul>\n    <a href='#10'><li>Conclusion<\/li><\/a>\n    <a href='#11'><li>References<\/li><\/a>\n<\/ul>","003fe269":"<p id='5'><h3><b>Histogram<\/b><\/h3><\/p>","1fced013":"<p id='1'><h2><b>Data Overview<\/b><\/h2><\/p>\n\nThis is a game ,named Dota, dataset.  \n\nHere columns that dataset contains:  \n* Name  \n* Type  \n* Alignment  \n* Health  \n* Mana  \n* Damage\n* AttackSpeed\n* Range\n* Armor\n* MovementSpeed","8a63ea17":"<p id='11'><h2><b>Reference<\/b><\/h2><\/p>\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners","a7e25230":"Normalization of datas.","f7b71a73":"<p id='4'><h3><b>Inset Plots<\/b><\/h3><\/p>","13b053af":"<p id='6'><h3><b>Box Plots<\/b><\/h3><\/p>","01e2d450":"<p id='8'><h3><b>3D Scatter Plot with Colorscaling<\/b><\/h3><\/p>","497e1423":"<p id='2'><h2><b>Visualization<\/b><\/h2><\/p>","70f68bda":"<p id='9'><h3><b>Multiple Subplots<\/b><\/h3><\/p>","ca96c255":"<p id='7'><h3><b>Scatter Matrix Plots<\/b><\/h3><\/p>"}}