{"cell_type":{"e9dbfa0a":"code","db040e1d":"code","be10f61f":"code","e90e9d88":"code","bb50c583":"code","b4e85d22":"code","5e217267":"code","628383b0":"code","d1aa6649":"code","6bc8d35a":"code","a8f9d94e":"code","83a03a8d":"code","fd4e07c4":"code","d379c7e5":"code","e5165b06":"code","37441ef3":"code","3b340737":"code","0c76a09d":"code","f978c2aa":"code","829a11bd":"code","d5b0fe92":"code","9d9dc861":"code","f460d74d":"code","b10053aa":"code","c4a9bba4":"code","a5cf70a9":"code","1fbcef51":"code","78818e0c":"code","41b9ed58":"code","ca03bed1":"code","91e54151":"code","32f1e949":"code","6df9ec31":"code","c25abd84":"code","c0bfca4c":"code","68246335":"code","c8be9ed1":"code","fb51a61d":"markdown","082818c0":"markdown","8abd1baf":"markdown","cd230911":"markdown","437c41a8":"markdown","25917827":"markdown","9dec5405":"markdown","cb6df76a":"markdown","c442b05c":"markdown","13c0b742":"markdown"},"source":{"e9dbfa0a":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport random\n\n# plots\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D \nimport seaborn as sns\nimport plotly.express as px\n\n# image specific\nfrom PIL import Image","db040e1d":"# function to convert R,G,B in hex representation\ndef rgb2hex(red,green,blue):\n    rgb = (red,green,blue)\n    return '#%02x%02x%02x' % rgb","be10f61f":"# example\nrgb2hex(192,128,64)","e90e9d88":"# load image\nfilename = 'lena.jpg'\n# filename = 'galaxy.jpg'\nimg = Image.open('..\/input\/image-for-basic-digital-image-processing-operation\/'+filename)","bb50c583":"# show image\nplt.imshow(img)\nplt.show()","b4e85d22":"# convert to numeric array\nimg = np.asarray(img)\nimg","5e217267":"# extract RGB components\nimg_R = img[:,:,0]\nimg_G = img[:,:,1]\nimg_B = img[:,:,2]","628383b0":"plt.hist(img_R.flatten(), bins=25, color='red')\nplt.title('Histogram - Red')\nplt.grid()\nplt.show()","d1aa6649":"plt.hist(img_G.flatten(), bins=25, color='green')\nplt.title('Histogram - Green')\nplt.grid()\nplt.show()","6bc8d35a":"plt.hist(img_B.flatten(), bins=25, color='blue')\nplt.title('Histogram - Blue')\nplt.grid()\nplt.show()","a8f9d94e":"# all in one chart\nmy_alpha=0.5\nplt.hist(img_R.flatten(), bins=25, color='red', alpha=my_alpha)\nplt.hist(img_G.flatten(), bins=25, color='green', alpha=my_alpha)\nplt.hist(img_B.flatten(), bins=25, color='blue', alpha=my_alpha)\nplt.title('Histogram - RGB')\nplt.grid()\nplt.show()","83a03a8d":"# red component\nplt.figure(figsize=(7,6))\nsns.heatmap(img_R, cmap='Reds_r', cbar=True)\nplt.show()","fd4e07c4":"# green component\nplt.figure(figsize=(7,6))\nsns.heatmap(img_G, cmap='Greens_r', cbar=True)\nplt.show()","d379c7e5":"# blue component\nplt.figure(figsize=(7,6))\nsns.heatmap(img_B, cmap='Blues_r', cbar=True)\nplt.show()","e5165b06":"# use blue component for the following\nimg_df_col = pd.DataFrame(img_B)","37441ef3":"# example: show scatter plots of first 8 columns\ndemo_col = img_df_col[[0,1,2,3,4,5,6,7]]\n# plot\nsns.pairplot(demo_col)\nplt.show()","3b340737":"# calc correlation matrix\nimg_cor_col = img_df_col.corr()\nimg_cor_col","0c76a09d":"# plot correlation matrix of COLUMNS\nplt.figure(figsize=(7,6))\ncol_map = 'hot'\n# col_map = 'rocket'\n# col_map = 'autumn'\nsns.heatmap(img_cor_col, cmap=col_map)\nplt.show()","f978c2aa":"# calc correlation of image ROWS now (again use blue component)\nimg_df_row = pd.DataFrame(img_B.transpose())","829a11bd":"# example: show scatter plots of first 8 rows\ndemo_row = img_df_row[[0,1,2,3,4,5,6,7]]\n# plot\nsns.pairplot(demo_row)\nplt.show()","d5b0fe92":"# calc correlation matrix\nimg_cor_row = img_df_row.corr()\nimg_cor_row","9d9dc861":"# plot correlation matrix of ROWS\nplt.figure(figsize=(7,6))\ncol_map = 'hot'\n# col_map = 'rocket'\n# col_map = 'autumn'\nsns.heatmap(img_cor_row, cmap=col_map)\nplt.show()","f460d74d":"# zoom in\nplt.figure(figsize=(7,6))\ncol_map = 'hot'\n# col_map = 'rocket'\n# col_map = 'autumn'\nsns.heatmap(img_cor_row.iloc[150:380,30:210], cmap=col_map)\nplt.show()","b10053aa":"# transfer color values into data frame\ndf_RGB = pd.DataFrame(np.asarray([img_R.flatten(), img_G.flatten(), img_B.flatten()]).transpose(),\n                     columns=['R','G','B'])","c4a9bba4":"# add column with hex representation of RGB color\ndf_RGB['color_hex'] = df_RGB.apply(lambda x: rgb2hex(red = x['R'], green = x['G'], blue = x['B']), axis=1)\ndf_RGB.head()","a5cf70a9":"df_RGB.shape","1fbcef51":"# pairplot of RGB components\nsns.pairplot(df_RGB, plot_kws={'alpha': 0.1})\nplt.show()","78818e0c":"df_RGB.corr(method='pearson')","41b9ed58":"df_RGB.corr(method='spearman')","ca03bed1":"# interactive plot of RGB components: plot each pixel as point in 3-space\nrandom.seed(123)\ndf_RGB_sub = df_RGB.sample(500) # we can use only a small subset due to performance constraints\npx.scatter_3d(df_RGB_sub, x= 'R', y='G', z='B', color='color_hex',\n              color_discrete_map = 'identity', # use colors as defined in data frame\n              opacity=0.2)","91e54151":"# if we do without interactivity, we can actually plot all (262'144) pixels\nfig = plt.figure(figsize=(11,10))\nax = fig.add_subplot(111, projection='3d')\nax.scatter3D(df_RGB.R, df_RGB.G, df_RGB.B, color=df_RGB.color_hex, \n             alpha=0.05)\nax.set_xlabel('R')\nax.set_ylabel('G')\nax.set_zlabel('B')\nplt.show()","32f1e949":"# mean of rows \/ mean of columns\nmean_row_R = img_R.mean(axis=1)\nmean_col_R = img_R.mean(axis=0)\n\nmean_row_G = img_G.mean(axis=1)\nmean_col_G = img_G.mean(axis=0)\n\nmean_row_B = img_B.mean(axis=1)\nmean_col_B = img_B.mean(axis=0)","6df9ec31":"# plot mean of rows\nplt.plot(mean_row_R, c='red')\nplt.plot(mean_row_G, c='green')\nplt.plot(mean_row_B, c='blue')\nplt.grid()\nplt.title('Mean of rows')\nplt.show()","c25abd84":"# plot mean of columns\nplt.plot(mean_col_R, c='red')\nplt.plot(mean_col_G, c='green')\nplt.plot(mean_col_B, c='blue')\nplt.grid()\nplt.title('Mean of columns')\nplt.show()","c0bfca4c":"# tensor product of row mean and column mean - red\nproduct_image_R = np.outer(mean_row_R,mean_col_R)\n\n# plot product of marginal averages\nplt.figure(figsize=(7,6))\nmy_colors = 'Reds_r'\nsns.heatmap(product_image_R, cmap = my_colors)\nplt.show()","68246335":"# tensor product of row mean and column mean - green\nproduct_image_G = np.outer(mean_row_G,mean_col_G)\n\n# plot product of marginal averages\nplt.figure(figsize=(7,6))\nmy_colors = 'Greens_r'\nsns.heatmap(product_image_G, cmap = my_colors)\nplt.show()","c8be9ed1":"# tensor product of row mean and column mean - blue\nproduct_image_B = np.outer(mean_row_B,mean_col_B)\n\n# plot product of marginal averages\nplt.figure(figsize=(7,6))\nmy_colors = 'Blues_r'\nsns.heatmap(product_image_B, cmap = my_colors)\nplt.show()","fb51a61d":"# Visualize correlation of image rows \/ columns and RGB components","082818c0":"# > Correlation of Columns","8abd1baf":"# > Correlation of Rows","cd230911":"Let's check how much we can reconstruct from the row and column averages:","437c41a8":"Available colormaps:\n'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r'","25917827":"### Plot RGB components","9dec5405":"# > Means","cb6df76a":"### Histograms for RGB components","c442b05c":"# > Correlation of RGB components","13c0b742":"# > Extract RGB Components"}}