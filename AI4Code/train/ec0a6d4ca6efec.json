{"cell_type":{"eed86389":"code","297d54c8":"code","106166f1":"code","6a17700a":"code","2b71c255":"code","6b80ba05":"code","331471a0":"code","81a67a98":"code","441f1ddf":"code","3018bbc4":"code","067165e9":"code","f0fd1b7a":"code","5d6f56ef":"markdown","9ff505e9":"markdown","32627002":"markdown","4bad0a06":"markdown","17ee41c8":"markdown","b58ee9a9":"markdown"},"source":{"eed86389":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","297d54c8":"data = pd.read_csv('\/kaggle\/input\/brazilian-football-championship\/BRA.csv')\n\ndata.head()","106166f1":"data.drop(data.iloc[:, 10:19], inplace = True, axis = 1)\n\ndata.head()","6a17700a":"def update_vals(row, data=data):\n    if row.Home == 'Chapecoense-SC':\n        if row.Date == '11\/12\/2016':\n            row.Res = 'A'\n            row.HG = 0\n            row.AG = 3\n    return row\n\ndata = data.apply(update_vals, axis=1)\ndata = data.append(pd.Series(['Brazil','Serie A', 2012, '11\/12\/2016', '22:30', 'Chapecoense-SC', 'Atletico-MG', 0, 3, 'H'], index=data.columns), ignore_index=True)","2b71c255":"season = data.groupby(by=\"Season\").sum().sort_values(by=\"Season\", ascending=False).reset_index()\n\nseason","6b80ba05":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=season['Season'],\n    y=season['HG'],\n    name=\"Home Goals\",\n))\n\n\nfig.add_trace(go.Scatter(\n    x=season['Season'],\n    y=season['AG'],\n    name=\"Away Goals\"\n))\n\nfig.update_layout(\n    title=\"Home and Away goals by Season\",\n    xaxis_title=\"Season\",\n    yaxis_title=\"Goals\",\n    legend_title=\"Type\",\n    font=dict(\n        size=18,\n    )\n)\n\nfig.show()","331471a0":"teams = data.groupby(by=\"Home\").sum().sort_values(by=\"Season\", ascending=False).reset_index()\n\nteams","81a67a98":"fig = px.scatter(teams, x=\"HG\", y=\"AG\", color=teams['Home'])\n\nfig.update_layout(\n    title=\"Home and Away goals by Club\",\n    xaxis_title=\"Conceded Goals\",\n    yaxis_title=\"Scored Goals\",\n    legend_title=\"Team\",\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","441f1ddf":"home_results = data.groupby(by=\"Home\")\n\nhome_results_teams = pd.DataFrame(columns=[\"Team\", \"Win\", \"Draw\", \"Lose\"])\n\nrows = []\nfor index, item in enumerate(home_results):\n    home_results_teams.loc[index, 'Team'] = item[0]\n    temp_df = item[1].groupby(by=\"Res\").count()\n    temp_df = temp_df['Home'].reset_index()\n\n    home_results_teams.loc[index, 'Win'] = temp_df['Home'][2]\n    home_results_teams.loc[index, 'Draw'] = temp_df['Home'][1]\n    home_results_teams.loc[index, 'Lose'] = temp_df['Home'][0]\n\n    \nhome_results_teams = home_results_teams.sort_values(by=\"Win\", ascending=False)\n\nhome_results_teams.reset_index(drop=True)","3018bbc4":"fig = go.Figure(data=[\n    go.Bar(name='Win', x=home_results_teams['Team'], y=home_results_teams['Win']),\n    go.Bar(name='Draw', x=home_results_teams['Team'], y=home_results_teams['Draw']),\n    go.Bar(name='Lose', x=home_results_teams['Team'], y=home_results_teams['Lose'])\n])\nfig.update_layout(\n    barmode='group',\n    title=\"Results by Club playing as home\",\n    legend_title=\"Result\",\n)\nfig.show()","067165e9":"away_results = data.groupby(by=\"Away\")\n\naway_results_teams = pd.DataFrame(columns=[\"Team\", \"Win\", \"Draw\", \"Lose\"])\n\nrows = []\nfor index, item in enumerate(away_results):\n    away_results_teams.loc[index, 'Team'] = item[0]\n    temp_away_df = item[1].groupby(by=\"Res\").count()\n    temp_away_df = temp_away_df['Away'].reset_index()\n\n    try:\n        away_results_teams.loc[index, 'Win'] = temp_away_df['Away'][0]\n        away_results_teams.loc[index, 'Draw'] = temp_away_df['Away'][1]\n        away_results_teams.loc[index, 'Lose'] = temp_away_df['Away'][2]\n    except:\n        print('ERR')\n\n    \naway_results_teams = away_results_teams.sort_values(by=\"Win\", ascending=False)\n\naway_results_teams.reset_index(drop=True)","f0fd1b7a":"fig = go.Figure(data=[\n    go.Bar(name='Win', x=away_results_teams['Team'], y=away_results_teams['Win']),\n    go.Bar(name='Draw', x=away_results_teams['Team'], y=away_results_teams['Draw']),\n    go.Bar(name='Lose', x=away_results_teams['Team'], y=away_results_teams['Lose'])\n])\nfig.update_layout(\n    barmode='group',\n    title=\"Results by Club playing as away\",\n    legend_title=\"Result\",\n)\nfig.show()","5d6f56ef":"\nLet's look at the goals made and conceded per season","9ff505e9":"We will work mainly with the Season, Home, Away, HG and AG columns\n\nSeason = The Season\n\nHome = Home Team Name\n\nAway = Away Team Name\n\nHG = Full Time Home Team Goals\n\nAG = Full Time Away Team Goals","32627002":"Reading the csv file we have the following data:","4bad0a06":"Now we add up all the goals scored and conceded by each team playing as principal","17ee41c8":"Hello there!\nThis is my first Kaggle colaboration, so, I decided to explore a dataset that handle data from the first Brazilian football league aka Brasileir\u00e3o.\nFrom 2013 to the present moment 34 teams participated in the competition, detail for Clube Atl\u00e9tico Paranaense which is now called Clube Athletico Paranaense.\n\nMy purpose is to show performance by season, teams and performances playing as a home and away\n\nRight now, let's start!","b58ee9a9":"\nDue to the accident that occurred on November 28, 2016 involving the Chapecoense delegation, the match between Chapecoense and Atl\u00e9tico-MG on December 11, 2016 was not played, both teams lost by w.o."}}