{"cell_type":{"7acebc41":"code","7153dca1":"code","6e294d12":"code","a6b0d862":"code","50becd10":"code","390eabf5":"code","61b49778":"code","d16421dd":"code","9abf9eb2":"code","003c8746":"code","c64db763":"code","6b7d64ff":"code","96cc4f1d":"code","5f65eef7":"code","fb6de97d":"code","ada037de":"code","a3ae3746":"code","5d48d7bd":"code","0b49180a":"code","33332bc3":"code","14fd1a19":"code","3f677fd3":"code","a17c0fd3":"code","5251c710":"code","721d66f3":"code","09cea016":"code","da05060e":"code","219daaf0":"code","4ccd0698":"code","2cef4da1":"code","40637e24":"code","46d75e19":"code","17be9817":"code","377be0b6":"code","2be5edf9":"code","a78cf295":"code","99a770b6":"code","1b0c84b6":"code","0fab5667":"code","c40bdf6f":"code","7300cccb":"code","94b0fc5f":"code","bfa07bfa":"code","ff84394e":"code","68b033b7":"code","3dce4ea4":"code","5b13a852":"code","ca99f4f6":"code","eb31f672":"code","912784e6":"code","a21b0c43":"code","69123f59":"code","17460255":"code","7806af83":"code","b592e177":"code","d58f56ce":"code","c6bfbf0a":"code","e36e70a6":"code","6653f301":"code","af329134":"code","459d48a3":"code","3d84f4fb":"code","a955944a":"code","b2c439bc":"code","422145e0":"code","20b3d049":"code","1ed0aa2a":"code","095c00e6":"code","5b2e4bd2":"code","1362bc77":"code","2d95aa57":"code","144aa3d5":"code","fca90cea":"code","0b90f27a":"code","cbc41fe8":"code","f196f05f":"code","0b8b89f5":"code","cf9a26b5":"code","55726a2f":"code","7be7939e":"code","bc702b13":"code","cb3eedc3":"code","11e19f54":"code","7552867d":"code","3cc250d3":"code","bc9f0ab9":"code","343a2c80":"code","2756be3b":"code","e7d69f30":"code","b978be47":"code","34fcac43":"code","99271c25":"code","48943447":"code","1d89d00b":"code","e9747d5b":"code","279879a0":"code","011ec5a8":"code","f61e3dba":"code","5d2d831d":"code","52aabd66":"code","bfabbed6":"code","dee9c4a9":"code","73c6f463":"code","93ee421b":"code","675c59b4":"code","16ac34ec":"code","9bf8e7bf":"code","11117809":"code","f76336b0":"code","1f63e9c3":"code","9ddf8fe5":"code","994f20e4":"code","6c134c6c":"code","32d9e58d":"code","92d32c77":"code","8bd44da0":"code","fe00f439":"code","89cdc316":"code","3dcdfd4c":"code","9c9da89d":"code","d318a8b8":"code","f703147d":"code","8736ee9c":"code","cf4f222f":"code","b86bb9c2":"code","f354ac5f":"code","b738cd37":"code","38b773a3":"code","4fed1262":"code","a4db280c":"code","a8e505ed":"code","8aea76c4":"code","7f75ee76":"code","503e60a9":"markdown","b808839e":"markdown","51302491":"markdown","cfd5cbc7":"markdown","266efd89":"markdown","6624f12b":"markdown","aa8226a5":"markdown","f3d626cc":"markdown","e6636d09":"markdown","fad159c2":"markdown","6b3eef3c":"markdown","f36f295f":"markdown","28d23566":"markdown","523e28ee":"markdown","24c953c7":"markdown","c150fca2":"markdown","20d9c0de":"markdown","685d8afc":"markdown","3885eaaf":"markdown","69388ac9":"markdown","18b7d0fb":"markdown","90c11a45":"markdown","6c2c485a":"markdown","0a0a06f1":"markdown","7e1d26e0":"markdown","9b3a58cd":"markdown","6cabad76":"markdown","26eaf139":"markdown","3ba7cd09":"markdown","e01a5e36":"markdown","692179dc":"markdown","7bb7f38a":"markdown","988c4604":"markdown","84e98998":"markdown","d85fa457":"markdown","10da29b7":"markdown"},"source":{"7acebc41":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","7153dca1":"df = pd.read_csv('\/kaggle\/input\/credit-risk-loan-eliginility\/train_split.csv')\nprint('Shape of Dataframe:',df.shape)","6e294d12":"df.columns","a6b0d862":"df.head(10)","50becd10":"print(df.info())\nprint('\\n\\nNo of columns:',len(df.columns))","390eabf5":"df.isnull().sum()","61b49778":"sns.heatmap(df.isnull())","d16421dd":"dfcopy = df.copy()","9abf9eb2":"toomanynull = ['mths_since_last_delinq','mths_since_last_record',\n               'mths_since_last_major_derog','pymnt_plan','desc',\n               'verification_status_joint']\ndf.drop(toomanynull,inplace=True,axis=1)","003c8746":"## getting numeric columns\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = df.select_dtypes(include=numerics).columns","c64db763":"num","6b7d64ff":"## getting categorical columns\ncat = df.drop(num,axis=1)\ncat = cat.columns","96cc4f1d":"cat","5f65eef7":"df[cat].head(3)","fb6de97d":"df[num].head(3)","ada037de":"df.corr()","a3ae3746":"plt.figure(figsize=(20,20))\nsns.heatmap(df[num].corr(),annot=True,square=True,cmap='Set2')","5d48d7bd":"df[num].isnull().sum()","0b49180a":"## revol_util","33332bc3":"plt.figure(figsize = (14,10)) \nplt.subplot(221)\nsns.boxplot(df['revol_util'])\nplt.subplot(222)\nsns.violinplot(df['revol_util'])\nplt.subplot(223)\ndf['revol_util'].plot.hist()\nplt.suptitle('revol_util columns',size=20)","14fd1a19":"## checking mean nd median and imputing median\nprint(df['revol_util'].mean())\nprint(df['revol_util'].median())\ndf['revol_util'].fillna(value=df['revol_util'].median(),inplace=True)","3f677fd3":"sns.distplot(df['revol_util'])","a17c0fd3":"# tot_coll_amt  (total collected amount)","5251c710":"plt.figure(figsize = (14,10)) \nplt.subplot(221)\nsns.boxplot(df['tot_coll_amt'])\nplt.subplot(222)\nsns.violinplot(df['tot_coll_amt'])\nplt.subplot(223)\ndf['tot_coll_amt'].plot.hist()\nplt.suptitle('tot_coll_amt columns',size=20)\n\nprint('Mean :',df['tot_coll_amt'].mean())\nprint('Median :',df['tot_coll_amt'].median())","721d66f3":"df.tot_coll_amt.value_counts()","09cea016":"df.drop('tot_coll_amt',axis=1,inplace=True)","da05060e":"## tot_cur_bal ","219daaf0":"plt.figure(figsize = (14,10)) \nplt.subplot(221)\nsns.boxplot(df['tot_cur_bal'])\nplt.subplot(222)\nsns.violinplot(df['tot_cur_bal'])\nplt.subplot(223)\ndf['tot_cur_bal'].plot.hist()\nplt.suptitle('tot_cur_bal (Total Current Balance of user) columns',size=20)\n\nprint('Mean :',df['tot_cur_bal'].mean())\nprint('Median :',df['tot_cur_bal'].median())","4ccd0698":"#### Data is totally biased and has too many outliers so imputing Median","2cef4da1":"df['tot_cur_bal'].fillna(value=df['tot_cur_bal'].median(),inplace=True) ","40637e24":"## total_rev_hi_lim","46d75e19":"plt.figure(figsize = (14,10)) \nplt.subplot(221)\nsns.boxplot(df['total_rev_hi_lim'])\nplt.subplot(222)\nsns.violinplot(df['total_rev_hi_lim'])\nplt.subplot(223)\ndf['total_rev_hi_lim'].plot.hist()\nplt.suptitle('total_rev_hi_lim columns',size=20)\n\nprint('Mean :',df['total_rev_hi_lim'].mean())\nprint('Median :',df['total_rev_hi_lim'].median())","17be9817":"df['total_rev_hi_lim'].fillna(value=df['total_rev_hi_lim'].median(),inplace=True) ","377be0b6":"df['collections_12_mths_ex_med'].value_counts()","2be5edf9":"df['collections_12_mths_ex_med'].plot.hist()","a78cf295":"## dropping column as its just 0\ndf.drop('collections_12_mths_ex_med',axis=1,inplace=True)","99a770b6":"df[cat]","1b0c84b6":"## Dropping Useless columns\nprint(df['batch_enrolled'].head(5))","0fab5667":"df['title']","c40bdf6f":"# 1. batch_enrolled >> it doesn't concern which batch the user was from\n# 2. desc >> too many null values \n# 5. zip_code >> not a significant column\n## the columns is no significance so we drop it\ntemp = ['batch_enrolled','zip_code']\ndf.drop(temp,axis=1,inplace=True)","7300cccb":"df['emp_title'].value_counts()","94b0fc5f":"df.purpose","bfa07bfa":"df.title","ff84394e":"#we drop 'title' as its serves  same pupose as 'purpose'\ndf.drop('title',axis=1,inplace=True)","68b033b7":"## Replaceing Nan Employment Type with 'Unknown' as we cannot mode it and guess it(impute)\ndf['emp_title'].fillna(value=\"Unknown\",inplace=True)","3dce4ea4":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = df.select_dtypes(include=numerics).columns\ncat = df.drop(num,axis=1)\ncat = cat.columns","5b13a852":"## emp_length\ndf['emp_length'].head()","ca99f4f6":"## extracts the number form emp_length\ndf['emp_length'] = df['emp_length'].astype(str)\ndf['emp_length'].replace(\"[^0-9]\",\"\",regex=True,inplace=True)\ndf['emp_length'].replace(\"\",\"-1\",regex=True,inplace=True)\ndf['emp_length'] = df['emp_length'].apply(lambda x: x.strip())","eb31f672":"df.emp_length = df.emp_length.astype(int)","912784e6":"## here -1 stands for unknown\ndf['emp_length'].fillna(value='-1',inplace=True)","a21b0c43":"### remoing moths tag from term\ndf.term = df.term.apply(lambda x: x.split(' ')[0])\ndf.term = df.term.astype(int)","69123f59":"df[cat].isnull().sum()","17460255":"df.verification_status.value_counts()","7806af83":"df[cat]","b592e177":"## serves no relevance\ndf.drop('addr_state',inplace=True,axis=1)","d58f56ce":"## extracts the number form 'last_week_pay'\ndf['last_week_pay'] = df['last_week_pay'].astype(str)\ndf['last_week_pay'].replace(\"[^0-9]\",\"\",regex=True,inplace=True)\ndf['last_week_pay'].replace(\"\",\"-1\",regex=True,inplace=True)\ndf['last_week_pay'] = df['last_week_pay'].apply(lambda x: x.strip())\ndf.last_week_pay = df.last_week_pay.astype(int)","c6bfbf0a":"df['last_week_pay']","e36e70a6":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","6653f301":"## Making seprate df for Visualization\ndf1 = df.copy()\ndf1.drop('member_id',inplace=True,axis=1)\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = df1.select_dtypes(include=numerics).columns\ncat = df1.drop(num,axis=1)\ncat = cat.columns","af329134":"df1.loan_status.value_counts().values","459d48a3":"### getting ratio of target variable to check balance between values\nlabels = ['Loan Granted','Loan Not Granted']\nfig = px.pie(names=labels,values = df1.loan_status.value_counts().values,title='Percentage Loan Granted of Total Application')\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\nfig.show()","3d84f4fb":"# data prepararion\nfrom wordcloud import WordCloud \nx2011 = df1.emp_title\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.title('Employment Types Word Cloud',size=25)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","a955944a":"px.histogram(df1,x='loan_amnt',color='loan_status',title='Loam amount W.R.t Loan Status',\n             labels = labels)","b2c439bc":"## lets see successs rate for loan pass for each profession people\ntemp = pd.DataFrame()\ntemp['emp'] = df1.emp_title\ntemp['loan_status'] = df1.loan_status\n\nlist1 = temp.emp.value_counts().head(25).index\n\nlabels = ['Loan Granted','Loan Not Granted']\nfor i in list1:\n    temp1 = temp[temp.emp == i].loan_status.value_counts()\n    fig1 = make_subplots(rows=1, cols=2)\n    fig1.add_trace(go.Pie(labels=labels,values=temp1))\n    fig1.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n    fig1.update_layout(\n        title_text=\"Percentage Loan Pass Success according to Employment -- \"+ i,\n        # Add annotations in the center of the donut pies.\n        annotations=[dict(text=i, x=0.50,y=0.5, font_size=20, showarrow=False)])\n    fig1.show()","422145e0":"plt.figure(figsize=(20,10))\nsns.barplot(df1.purpose,df1.loan_amnt)\nplt.title('loan amount passed for each purpose',size=20)","20b3d049":"plt.figure(figsize=(20,10))\nsns.barplot(df1.emp_length,df1.loan_amnt)\nplt.title('Loan amnt wrt Experience',size=20)\nplt.xlabel('NO of Year Experience')","1ed0aa2a":"plt.figure(figsize=(10,5))\nsns.barplot(df1.term,df1.loan_amnt)\nplt.title('Term period wrt loan amount',size=20)","095c00e6":"plt.figure(figsize=(20,10))\nsns.barplot(df1.grade,df1.loan_amnt)\nplt.title('Grade wrt Loan amount',size=20)","5b2e4bd2":"temp = ['loan_amnt','funded_amnt','funded_amnt_inv']\nsns.heatmap(df[temp].corr(),annot=True)","1362bc77":"df.drop('funded_amnt',axis=1,inplace=True)\ndf.drop('funded_amnt_inv',axis=1,inplace=True)","2d95aa57":"temp = ['total_rec_int','total_rec_late_fee','recoveries','collection_recovery_fee']","144aa3d5":"for i in temp:\n    sns.distplot(df[i])\n    plt.show()","fca90cea":"for i in temp:\n    print(df[i].value_counts())","0b90f27a":"temp = ['total_rec_late_fee','recoveries','collection_recovery_fee']\ndf.drop(temp,axis=1,inplace=True)","cbc41fe8":"df.acc_now_delinq.value_counts()","f196f05f":"## has only 0 in it mostly so we drop it\ndf.drop('acc_now_delinq',axis=1,inplace=True)","0b8b89f5":"df.delinq_2yrs.value_counts()","cf9a26b5":"sns.distplot(df.delinq_2yrs)","55726a2f":"df.drop('delinq_2yrs',axis=1,inplace=True)","7be7939e":"df.pub_rec.value_counts()","bc702b13":"sns.distplot(df.pub_rec)","cb3eedc3":"df.drop('pub_rec',axis=1,inplace=True)","11e19f54":"sns.countplot(df.application_type)","7552867d":"## its one sided data so we drop column\ndf.drop('application_type',axis=1,inplace=True)","3cc250d3":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnum = df.select_dtypes(include=numerics).columns\ncat = df.drop(num,axis=1)\ncat = cat.columns","bc9f0ab9":"df[cat]","343a2c80":"df[num]","2756be3b":"for i in df[cat].columns:\n    print(i,\":\\n\\n\",df[i].value_counts())","e7d69f30":"from sklearn.preprocessing import LabelEncoder","b978be47":"df[cat] = df[cat].apply(LabelEncoder().fit_transform)","34fcac43":"df.home_ownership.value_counts()","99271c25":"dfcopy.home_ownership.value_counts()","48943447":"df[cat].head(10)","1d89d00b":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),annot=True,square=True,cmap='ocean')","e9747d5b":"toohightcorr = ['grade','sub_grade','total_rev_hi_lim','total_acc']","279879a0":"df.drop(toohightcorr,axis=1,inplace=True)","011ec5a8":"## Storing member id \nids = df['member_id']\ndf.drop('member_id',axis=1,inplace=True)","f61e3dba":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),annot=True,square=True,cmap='ocean')\nplt.title('After Removing Highly Co-related Columns')","5d2d831d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score","52aabd66":"X = df.drop('loan_status',axis=1)\ny = df['loan_status']","bfabbed6":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state=101)","dee9c4a9":"from sklearn.ensemble import RandomForestClassifier","73c6f463":"rfc = RandomForestClassifier(n_estimators=100,max_depth=8, random_state=101,class_weight='balanced')\nrfc.fit(X_train,y_train)","93ee421b":"y_pred = rfc.predict(X_test)","675c59b4":"print('AUC-ROC Score :',roc_auc_score(y_test, y_pred))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('confusion Matrix:\\n',confusion_matrix(y_pred,y_test))\nprint('cross validation:',cross_val_score(rfc, X, y, cv=3).mean())","16ac34ec":"importances=rfc.feature_importances_\nfeature_importances=pd.Series(importances, index=X_train.columns).sort_values(ascending=False)\nplt.figure(figsize=(10,7))\nsns.barplot(x=feature_importances[0:10], y=feature_importances.index[0:10])\nplt.title('Feature Importance',size=20)\nplt.ylabel(\"Features\")\nplt.show()","9bf8e7bf":"from sklearn.feature_selection import RFE","11117809":"rfe = RFE(rfc, 8) \nrfe.fit(X_train,y_train)","f76336b0":"rfecols = X_train.columns[rfe.support_]","1f63e9c3":"rfecols","9ddf8fe5":"rfc = RandomForestClassifier(n_estimators=200,random_state=101,class_weight='balanced')\nrfc.fit(X_train[rfecols],y_train)\ny_pred = rfc.predict(X_test[rfecols])\nprint('AUC-ROC Score :',roc_auc_score(y_test, y_pred))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('confusion Matrix:\\n',confusion_matrix(y_test,y_pred))\n#print('cross validation:',cross_val_score(rfc, X, y, cv=3).mean())","994f20e4":"X_train['laon_status'] = y_train\nX_train.laon_status.value_counts()\ntemp = X_train[X_train.laon_status == 0].sample(12000)\nX_train = X_train[X_train.laon_status==1]\nX_train = X_train.append(temp)\nX_train.laon_status.value_counts()\nX_train = X_train.sample(frac=1)","6c134c6c":"y_train = X_train.laon_status\nX_train.drop('laon_status',axis=1,inplace=True)","32d9e58d":"X_train['laon_status'] = y_train\ntemp = X_train[X_train.laon_status==1]\nX_train = X_train.append(temp)\nX_train = X_train.append(temp)","92d32c77":"X_train.laon_status.value_counts()","8bd44da0":"X_train = X_train.sample(frac=1)","fe00f439":"y_train = X_train.laon_status\nX_train.drop('laon_status',axis=1,inplace=True)","89cdc316":"rfc = RandomForestClassifier(n_estimators=200,random_state=101,class_weight='balanced')\nrfc.fit(X_train[rfecols],y_train)\ny_pred = rfc.predict(X_test[rfecols])\nprint('AUC-ROC Score :',roc_auc_score(y_test, y_pred))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('confusion Matrix:\\n',confusion_matrix(y_test,y_pred))\n#print('cross validation:',cross_val_score(rfc, X, y, cv=3).mean())","3dcdfd4c":"from xgboost import XGBClassifier","9c9da89d":"xgb = XGBClassifier(n_estimator=100,max_depth=12,class_weight='balanced',refit='AUC')","d318a8b8":"xgb.fit(X_train[rfecols],y_train)","f703147d":"y_pred = xgb.predict(X_test[rfecols])","8736ee9c":"print('AUC-ROC Score :',roc_auc_score(y_test, y_pred))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('confusion Matrix:\\n',confusion_matrix(y_pred,y_test))\n#print('cross validation:',cross_val_score(xgb, X, y, cv=3).mean())","cf4f222f":"import lightgbm as lgb","b86bb9c2":"#y_train = y_train.values","f354ac5f":"model = lgb.LGBMClassifier(n_estimators=600,random_state=101,max_depth=8,class_weight='balanced')\nmodel.fit(X_train[rfecols], y_train)","b738cd37":"y_pred = model.predict(X_test[rfecols])","38b773a3":"print('AUC-ROC Score :',roc_auc_score(y_test, y_pred))\nprint('Report:\\n',classification_report(y_test, y_pred))\nprint('confusion Matrix:\\n',confusion_matrix(y_pred,y_test))\nprint('cross validation:',cross_val_score(model, X, y, cv=5).mean())","4fed1262":"fig, ax = plt.subplots(figsize=(12,8))\nlgb.plot_importance(model, max_num_features=10, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()","a4db280c":"fpr, tpr, threshold = metrics.roc_curve(y_test, y_pred)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nimport matplotlib.pyplot as plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","a8e505ed":"sns.heatmap(confusion_matrix(y_test,y_pred),annot=True,fmt='d')\nplt.title('Confusion Matrix',size=20)","8aea76c4":"tempval = pd.Series(y_test).value_counts()\ntempvalpred = pd.Series(y_pred).value_counts()","7f75ee76":"labels = ['Loan Granted','Loan Not Granted']\n\nfig1 = make_subplots(rows=1, cols=2)\nfig1.add_trace(go.Pie(labels=labels, values=tempval))\nfig2 = make_subplots(rows=1, cols=2)\nfig2.add_trace(go.Pie(labels=labels,values=tempvalpred))\n\n# Use `hole` to create a donut-like pie chart\nfig1.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\nfig2.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig1.update_layout(\n    title_text=\"Predicted Vs Actual Loan Granted Ratio Comparision\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Actual Loan Status Ratio', x=0.25, y=0.5, font_size=20, showarrow=False)])\nfig2.update_layout(\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Predicted Loan Status Ratio', x=0.25,y=0.5, font_size=20, showarrow=False)])\n\n\nfig1.show()\nfig2.show()\n","503e60a9":"## we see there are many only 1\/4 people were granted loan","b808839e":"## ROC - AUC curve\n- AUC stands for \"Area under the ROC Curve.\" That is, AUC measures the entire two-dimensional area underneath the entire ROC curve (think integral calculus) from (0,0) to (1,1). AUC provides an aggregate measure of performance across all possible classification thresholds.\n","51302491":"This shows us distribution of Loan amnt appplied for and count and frequency the loan was passed for in red and blue respectively","cfd5cbc7":"* After analysis the Loan Granting status of Banks is 25%.\n* Means only 25% of applicants are granted loan of total application.\n* The Accuracy in cosideration with AUC is 81 %\n* Interest Rate & Last week Pay have higher Significance in Predicting Loan status.\n* The Ratio of Acutal and Predicted has 1% error.","266efd89":"### Problem Statement <a id=\"problemstatement\"><\/a>\nThe task is to Preidcit wheather the customer is Elgible for loan\/Credit or not on the Basis of Given data columns.\n<Br>\n[Dataset can be found here](https:\/\/www.kaggle.com\/shadabhussain\/credit-risk-loan-eliginility)","6624f12b":"## LigthGBM <a id=\"lgb\"><\/a>","aa8226a5":"#### Data is totally biased and too many nulls like 0 se we drop it","f3d626cc":"### Thank you ","e6636d09":"### Data Import & Important Libraries Import <a id=\"dataimport\"><\/a>","fad159c2":"we see 'total_rec_late_fee','recoveries','collection_recovery_fee' has only 0 in it so we drop them","6b3eef3c":"<hr>","f36f295f":"Using Rfe selected Featrues","28d23566":"## Data Wrangling & Data Cleaning <a id=\"dwdc\"><\/a>","523e28ee":"#### Under Sampling X_train","24c953c7":"## Analyzing & Visualizing Results <a id=\"resultviz\"><\/a>","c150fca2":"This shows the HIgh Loan amount were granted for purpose like small business,credit card, debt_consolation etc,","20d9c0de":"### dropping ","685d8afc":"## Using RFE (Reccursive Feature Elimination) <a id=\"rfe\"><\/a>","3885eaaf":"## Oversampling","69388ac9":"## EDA <a id=\"eda\"><\/a>","18b7d0fb":"#### The Distribution of the data forms bell curve & data has some outlier so we impute median in nulls","90c11a45":"### after oversampling result with rfe and without rfe cols","6c2c485a":"## Random Forest Classifier <a id=\"rfc\"><\/a>","0a0a06f1":"## Machine learning Algorithm <a id=\"machinelearning\"><\/a>","7e1d26e0":"## Table Of Content:  <a id=\"index\"><\/a>\n* [Problem Statement](#problemstatement)\n* [Data & Libraries Import & Analysis](#dataimport)\n* [Data Wrangling & Cleaning](#dwdc)\n* [Exporatary Data Analysis](#eda)\n* [Data Preprocessing](#pp)\n* [Machine Learning](#machinelearning)\n    * [Random Forest Classifier](#rfc)\n    * [Reccursive Feature Elimination (RFE)](#rfe)\n    * [XGB Classifier](#xgb)\n    * [Light GBM Classifier](#Lgb)\n* [Result Analysis](#resultviz)","9b3a58cd":"### numeric columns Handling","6cabad76":"# Credit Risk Loan Eligibility\n<hr>\n<h4> Chintan Chitroda <\/h4>\n","26eaf139":"with Rfe","3ba7cd09":"<hr>","e01a5e36":"## Data PreProcessing <a id=\"pp\"><\/a>","692179dc":"####  Employment Title (emp_title)","7bb7f38a":"## Key Points Conclusion","988c4604":"## XGB Classifier <a id=\"xgb\"><\/a>","84e98998":"### Categorical columns","d85fa457":"This shows us the most frequent word in emp_title which tells us that Director,Manager,Superviseor,Teacher are apply more for loan in compare to other profession","10da29b7":"We see there three columns are exactly same so only take loan_amnt and drop rest"}}