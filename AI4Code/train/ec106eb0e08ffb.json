{"cell_type":{"956ab168":"code","9b7263f9":"code","00c08b29":"code","4c4386b5":"code","30e56acb":"code","c0a9c8b9":"code","1107a0cb":"code","eaeeedad":"code","51d8b46b":"markdown","d5ab11b8":"markdown","cdba238b":"markdown","5482d3a6":"markdown","7dbefc19":"markdown","5c137aa7":"markdown"},"source":{"956ab168":"!pip install kaggle-environments --upgrade -q","9b7263f9":"%%writefile epsilon_greedy.py\n\nimport math\nimport random\nimport numpy as np\n\nrandom.seed(2020)\n\nepsilon = 0.15\n\ntotal_reward = 0\nQ = None\nrewards = None\nn_chosen = None\nlast_action = None\n\n# agent\ndef agent(observation, configuration):\n    global Q, rewards, total_reward, n_chosen, last_action\n    # initialize\n    if observation.step == 0:\n        n_chosen = [0] * configuration.banditCount\n        rewards = [0] * configuration.banditCount\n        Q = [0] * configuration.banditCount\n        total_reward = 0\n        last_action = random.randint(0, configuration.banditCount - 1)\n    \n    # update values\n    r = observation.reward - total_reward\n    n_chosen[last_action] += 1\n    Q[last_action] += (r - Q[last_action]) \/ n_chosen[last_action]\n    total_reward += r\n    rewards[last_action] += r\n    \n    # epsilon-greed algorithm\n    # incremental update fashion\n    \n    if random.random() < epsilon:\n        # random action, prob epsilon\n        action = random.randint(0, configuration.banditCount - 1)\n    else:\n        # max Q\n        action = int(np.argmax(Q))\n        \n    last_action = action\n    \n    return action","00c08b29":"from kaggle_environments import make\nenv = make(\"mab\", debug=True)","4c4386b5":"env.reset()\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"epsilon_greedy.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","30e56acb":"%%writefile ucb.py\n\nimport math\nimport random\nimport numpy as np\n\nrandom.seed(2020)\nnp.random.seed(2020)\n\n# params\ntotal_reward = 0\nQ = None\nrewards = None\nn_chosen = None\nlast_action = None\neps = 1e-9\nc = 2\n\n# agent\ndef agent(observation, configuration):\n    global Q, rewards, total_reward, n_chosen, last_action\n    # initialize\n    if observation.step == 0:\n        n_chosen = [0] * configuration.banditCount\n        rewards = [0] * configuration.banditCount\n        Q = [0] * configuration.banditCount\n        total_reward = 0\n        last_action = random.randint(0, configuration.banditCount - 1)\n    \n    # update values\n    r = observation.reward - total_reward\n    n_chosen[last_action] += 1\n    Q[last_action] += (r - Q[last_action]) \/ n_chosen[last_action]\n    total_reward += r\n    rewards[last_action] += r\n    \n    # ucb\n    t = observation.step\n    Q_ucb = [qa + c * math.sqrt(math.log(t+1) \/ (na + eps)) for qa, na in zip(Q, n_chosen)]\n    action = int(np.argmax(Q_ucb))\n    \n    last_action = action\n    \n    return action","c0a9c8b9":"env.reset()\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"ucb.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","1107a0cb":"%%writefile gradient_bandit.py\n\nimport math\nimport random\nimport numpy as np\n\nrandom.seed(2020)\nnp.random.seed(2020)\n\n# params\ntotal_reward = 0\nH = None\nrewards = None\nn_chosen = None\nlast_action = None\npi = None\neps = 1e-9\nalpha = 0.1\n\ndef policy(H):\n    return np.exp(H) \/ np.sum(np.exp(H))\n\n# agent\ndef agent(observation, configuration):\n    global H, rewards, total_reward, last_action, pi\n    # initialize\n    if observation.step == 0:\n        # init values\n        n_chosen = [0] * configuration.banditCount\n        rewards = [0] * configuration.banditCount\n        # equal prob H\n        H = [0] * configuration.banditCount\n        pi = policy(H)\n        # reward\n        total_reward = 0\n    else:\n        # update values\n        r = observation.reward - total_reward\n        r_bar = observation.reward \/ (observation.step + 1)\n        # update H\n        for a in range(configuration.banditCount):\n            if a == last_action:\n                H[a] += alpha * (r - r_bar) * (1 - pi[a])\n            else:\n                H[a] -= alpha * (r - r_bar) * pi[a]\n        \n        # update rewards\n        total_reward += r\n        rewards[last_action] += r\n\n    # update policy\n    pi = policy(H)\n    action = int(np.argmax(pi))    \n    last_action = action\n    \n    return action","eaeeedad":"env.reset()\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"gradient_bandit.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","51d8b46b":"# Upper-Confidence-Bound","d5ab11b8":"# $\\varepsilon$-Greedy","cdba238b":"## Simulation","5482d3a6":"# Gradient Bandit","7dbefc19":"## Simulation","5c137aa7":"## Simulation"}}