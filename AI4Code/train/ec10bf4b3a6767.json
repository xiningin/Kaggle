{"cell_type":{"1a863933":"code","edc14b55":"code","7ff0ca2c":"code","f40e329c":"code","cac0034b":"code","4b4dac4b":"code","e26be53c":"code","bb06fd79":"code","cef76bc1":"code","231c89c0":"code","d97736df":"code","0d6ffd18":"code","0aec969e":"code","6400581a":"code","5cb75f71":"code","e23bc79b":"code","fe31874b":"code","50e353d2":"code","790a52ef":"code","32e02ca9":"code","7ece08d6":"code","986b9f41":"code","683c13da":"code","bee4554f":"code","ec9bb835":"markdown","cbcb8b8f":"markdown","4f5a2f4f":"markdown","a4bed285":"markdown","a500ecfb":"markdown","a8e8e50f":"markdown","fdf90674":"markdown","262766f8":"markdown"},"source":{"1a863933":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","edc14b55":"print(tf.config.list_physical_devices('GPU'))\n","7ff0ca2c":"print(tf.test.is_gpu_available(cuda_only=False, min_cuda_compute_capability=None))","f40e329c":"tf.__version__","cac0034b":"epochs = 1 # Change the number of epochs to typically 30-50 to get better accuracy\nbatch_size = 86","4b4dac4b":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsubm = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","e26be53c":"test.head()","bb06fd79":"train_images = []\nX_train_full, y_train_full = train.iloc[:,1:].to_numpy(), train.iloc[:,0].to_numpy()\nX_test = test.iloc[:].to_numpy()\nX_train_full = X_train_full.reshape(X_train_full.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)","cef76bc1":"i2 = 0\nfor i in range(60, 69):\n    i2 += 1\n    plt.subplot(3,3,(i2))\n    plt.imshow(X_train_full[i][:,:,0], cmap=plt.get_cmap('gray'))\n    plt.title(y_train_full[i]);","231c89c0":"X_train_full.shape","d97736df":"X_test.shape","0d6ffd18":"Ntrain = int(X_train_full.shape[0]*0.9)","0aec969e":"X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, test_size = 0.1, random_state=66)\nX_train, X_valid, X_test = X_train\/255., X_valid\/255., X_test\/255.","6400581a":"# Simple NN with dense layers only\n# model = keras.models.Sequential()\n# model.add(keras.layers.Flatten(input_shape=[28, 28]))\n# model.add(keras.layers.Dense(300, activation='relu'))\n# model.add(keras.layers.Dense(100, activation='relu'))\n# model.add(keras.layers.Dense(10, activation='softmax'))\n#\n# CNN whose architecture is inspired by C. Deotte's network \nmodel = keras.models.Sequential([\n    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    keras.layers.BatchNormalization(axis=1),\n    keras.layers.Conv2D(32, (3,3), activation='relu'),\n    keras.layers.BatchNormalization(axis=1),\n    keras.layers.Conv2D(32, (5,5), activation='relu', strides=2, padding='same'),\n    keras.layers.BatchNormalization(axis=1),\n    #keras.layers.MaxPooling2D(2, 2),\n    keras.layers.Dropout(0.25),\n    #\n    keras.layers.Conv2D(64, (3,3), activation='relu'),\n    keras.layers.BatchNormalization(axis=1),\n    keras.layers.Conv2D(64, (3,3), activation='relu'),\n    keras.layers.BatchNormalization(axis=1),\n    keras.layers.Conv2D(64, (5,5), activation='relu', strides=2, padding='same'),\n    keras.layers.BatchNormalization(axis=1),\n    #keras.layers.MaxPooling2D(2,2),\n    keras.layers.Dropout(0.25),\n    #\n    keras.layers.Conv2D(128, (4,4), activation='relu'),\n    #keras.layers.MaxPooling2D(2,2),\n    #keras.layers.Conv2D(128, (3,3), activation='relu'),\n    #keras.layers.MaxPooling2D(2,2),\n    keras.layers.Flatten(),\n    keras.layers.BatchNormalization(),\n    #keras.layers.Dense(512, activation='relu'),\n    keras.layers.BatchNormalization(),\n    #keras.layers.Dense(128, activation='relu'),\n    #keras.layers.BatchNormalization(),\n    keras.layers.Dense(10, activation='softmax')\n])","5cb75f71":"model.summary()","e23bc79b":"model.compile(loss=keras.losses.sparse_categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(lr=0.001, decay=1e-4), \n              metrics=[keras.metrics.sparse_categorical_accuracy])#","fe31874b":"early_stopping_cb = keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)\n#checkpoint_cb = keras.callbacks.ModelCheckpoint('my_1st_keras_model.h5', save_best_only=True)\nhistory = model.fit(X_train, y_train, \n                    epochs=epochs, \n                    validation_data=(X_valid, y_valid),\n                    batch_size=batch_size,\n                    steps_per_epoch=X_train.shape[0] \/\/ batch_size, \n                    callbacks=[early_stopping_cb])#","50e353d2":"import pandas as pd\nimport matplotlib.pyplot as plt\n\npd.DataFrame(history.history).plot(figsize=(7,5))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.yscale('log')\nplt.show()","790a52ef":"datagen = keras.preprocessing.image.ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        shear_range=0.2, # Randomly shear image\n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n#\ndatagen.fit(X_train)","32e02ca9":"def exponential_decay(lr0, s):\n    def exponential_decay_fn(epoch):\n        return lr0 * 0.1**(epoch\/s)\n    return exponential_decay_fn","7ece08d6":"exponential_decay_fn = exponential_decay(lr0=0.01, s=20)\n#lr_scheduler = keras.callbacks.LearningRateScheduler(exponential_decay_fn)\nlr_scheduler = keras.callbacks.ReduceLROnPlateau(monitor='val_sparse_categorical_accuracy', \n                                            patience=3, \n#                                             verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nearly_stopping_cb = keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)","986b9f41":"# Fit the model\nhistory = model.fit(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, \n                              validation_data = (X_valid,y_valid),\n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size, ##verbose = 2, \n                              callbacks=[early_stopping_cb, lr_scheduler])","683c13da":"pd.DataFrame(history.history).plot(figsize=(7,5))\nplt.yscale('log')\nplt.grid(True)\nplt.show()","bee4554f":"#X_test = X_test\/255.\ny_pred = model.predict_classes(X_test)\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(y_pred)+1)),\n                         \"Label\": y_pred})\nsubmissions.to_csv(\"predictions_mnist.csv\", index=False, header=True)","ec9bb835":"### Compile and run the model ","cbcb8b8f":"### Create image arrays from dataframes","4f5a2f4f":"### Design CNN architecture","a4bed285":"### Perform predictions","a500ecfb":"### Import packages","a8e8e50f":"### Read csv files","fdf90674":"### Check if GPUs are available","262766f8":"### Add image augmentation"}}