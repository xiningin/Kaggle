{"cell_type":{"dcac26d6":"code","9edf1b80":"code","a6940bb1":"code","312c6932":"code","720f5470":"code","a6754856":"code","ef72ffb9":"code","cf6ee09d":"code","18577865":"code","e7d44a9d":"code","5a9dae92":"code","72b269b3":"code","263c9418":"code","93a7763a":"code","c6c1dab0":"code","3b4b194d":"code","195e4cf3":"code","85a44174":"code","f1e61d4a":"code","aba454a2":"code","0ca18a5c":"code","6bd8b882":"code","37955a1d":"markdown","a2507352":"markdown","fc302cb9":"markdown","55ca6d27":"markdown","26688ca6":"markdown","9c075f04":"markdown","c8a6bb64":"markdown","c6f09e61":"markdown","eac74554":"markdown","f4e91328":"markdown","d3faba4d":"markdown","966ebe07":"markdown","87a7c07e":"markdown","ad26be76":"markdown","50fbbf9c":"markdown","d55fef6a":"markdown","360e2a02":"markdown","174baf24":"markdown"},"source":{"dcac26d6":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime,date,time\nimport seaborn as sns\nimport numpy as np\nimport plotly.express as px\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom pandas.plotting import register_matplotlib_converters  \n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n","9edf1b80":"import pandas as pd\nCase = pd.read_csv(\"..\/input\/coronavirusdataset\/Case.csv\")\nPatientInfo = pd.read_csv(\"..\/input\/coronavirusdataset\/PatientInfo.csv\")\nTime = pd.read_csv(\"..\/input\/coronavirusdataset\/Time.csv\", parse_dates=['date'])\nTimeAge = pd.read_csv(\"..\/input\/coronavirusdataset\/TimeAge.csv\")\nTimeProvince = pd.read_csv(\"..\/input\/coronavirusdataset\/TimeProvince.csv\")","a6940bb1":"\nPatientInfo['confirmed_date'] = PatientInfo['confirmed_date'].apply(pd.to_datetime)\nPatientInfo['released_date'] = PatientInfo['released_date'].apply(pd.to_datetime)\nPatientInfo['deceased_date'] = PatientInfo['deceased_date'].apply(pd.to_datetime)\nreleased_people = PatientInfo[PatientInfo['released_date'].isnull() == 0]\nreleased_people['recover_period'] = released_people['released_date'] - released_people['confirmed_date']\n\nPatientInfo.loc[PatientInfo['age'] == '10s', 'ageGroup'] = '10~30'\nPatientInfo.loc[PatientInfo['age'] == '20s', 'ageGroup'] = '10~30'\nPatientInfo.loc[PatientInfo['age'] == '30s', 'ageGroup'] = '10~30'\nPatientInfo.loc[PatientInfo['age'] == '40s', 'ageGroup'] = '40~60'\nPatientInfo.loc[PatientInfo['age'] == '50s', 'ageGroup'] = '40~60'\nPatientInfo.loc[PatientInfo['age'] == '60s', 'ageGroup'] = '40~60'\nPatientInfo.loc[PatientInfo['age'] == '70s', 'ageGroup'] = '70~'\nPatientInfo.loc[PatientInfo['age'] == '80s', 'ageGroup'] = '70~'\nPatientInfo.loc[PatientInfo['age'] == '90s', 'ageGroup'] = '70~'\n\n\n","312c6932":"Time.tail(10)\ndf_cases = Time.copy().drop(['date', 'time'], axis=1)\ndf_t = df_cases.tail(1)\ndf_t[\"Mortality Rate (%)\"] = np.round(100*df_t[\"deceased\"]\/df_t[\"confirmed\"],2)\ndf_t['test'] = df_t['test'].apply(lambda x:format(x,\",\"))\ndf_t['negative'] = df_t['negative'].apply(lambda x:format(x,\",\"))\ndf_t['released'] = df_t['released'].apply(lambda x:format(x,\",\"))\ndf_t['confirmed'] = df_t['confirmed'].apply(lambda x:format(x,\",\"))\ndf_t.reset_index(0)\ndf_t.style.background_gradient(cmap='summer',axis=1).set_properties(**{'font-size': '12pt'})\n","720f5470":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\ndf_t = df_t.copy().drop(['date', 'time'], axis=1)\ndf_t[\"Mortality Rate (%)\"] = np.round(100*df_t[\"deceased\"]\/df_t[\"confirmed\"],2)\n#df_t['released'] = df_t['released'].apply(lambda x:format(x,\",\"))\n#df_t['confirmed'] = df_t['confirmed'].apply(lambda x:format(x,\",\"))\ndf_t.reset_index(0)\ndf_t.style.background_gradient(cmap='summer',axis=1)\\\n      .background_gradient(cmap='YlOrBr',subset=[\"confirmed\"])\\\n     .background_gradient(cmap='Reds',subset=[\"deceased\"])\\\n     .background_gradient(cmap='Purples',subset=[\"Mortality Rate (%)\"]).set_properties(**{'font-size': '10pt'})","a6754856":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\ndf_t.set_index(\"province\", inplace=True)\nplt.axes(axisbelow=True)\nplt.barh(df_t.sort_values('confirmed')[\"confirmed\"].index[-10:],df_t.sort_values('confirmed')[\"confirmed\"].values[-10:],color=\"skyblue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 province (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","ef72ffb9":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\ndf_t.set_index(\"province\", inplace=True)\nplt.axes(axisbelow=True)\nplt.barh(df_t.sort_values('deceased')[\"deceased\"].index[-10:],df_t.sort_values('deceased')[\"deceased\"].values[-10:],color=\"red\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"deceased Cases\",fontsize=18)\nplt.title(\"Top 10 province (deceased Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","cf6ee09d":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\ndf_t['active'] = df_t['confirmed'] - df_t['released'] - df_t['deceased']\ndf_t.set_index(\"province\", inplace=True)\nplt.axes(axisbelow=True)\nplt.barh(df_t.sort_values('active')[\"active\"].index[-10:],df_t.sort_values('active')[\"active\"].values[-10:],color=\"pink\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"active Cases\",fontsize=18)\nplt.title(\"Top 10 province (active Cases)\",fontsize=20)\nplt.grid(alpha=0.3)","18577865":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\ndf_t.set_index(\"province\", inplace=True)\nplt.axes(axisbelow=True)\nplt.barh(df_t.sort_values('released')[\"released\"].index[-10:],df_t.sort_values('released')[\"released\"].values[-10:],color=\"yellow\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"released Cases\",fontsize=18)\nplt.title(\"Top 10 province (released Cases)\",fontsize=20)\nplt.grid(alpha=0.5)","e7d44a9d":"recentDate = TimeProvince['date'].max()\ndf_t = TimeProvince[TimeProvince['date']== recentDate]\ndf_t = df_t.copy().drop(['date', 'time'], axis=1)\ndf_t[\"Mortality Rate (%)\"] = np.round(100*df_t[\"deceased\"]\/df_t[\"confirmed\"],2)\ndf_t.iloc[:,:-1].corr().style.background_gradient(cmap='Reds')","5a9dae92":"df = PatientInfo.groupby([PatientInfo['confirmed_date'].dt.date, 'ageGroup']).count()['patient_id']\ndf_temp = pd.DataFrame(data=df[:])    \ndf_temp = df_temp.reset_index()\ndf_temp.rename(columns = {'patient_id' : 'count'}, inplace = True)\nplt.figure(figsize=(20,8))\nsns.barplot(x='confirmed_date', y='count', hue='ageGroup',  data=df_temp) # default : dodge=True\nplt.title('Confirmed Case \/ AgeGroup', fontsize=20)\nplt.xticks( rotation=90)\nplt.legend(fontsize=12)\nplt.show()","72b269b3":"temp = Case['infection_case'].str.split()\nfor i in range(len(temp)):\n    Case['infection_case'][i] = temp[i][-1]\n\ncg = Case.groupby('infection_case').agg(sum)['confirmed']\ndata_pie = []\ndata_pie_index = []\nfor a in range(len(cg)):\n    if cg[a] > 20:\n        data_pie.append(cg[a])\n        data_pie_index.append(cg.index[a])\nnumber_case = len(data_pie)\nexplode=np.zeros(number_case)\n\nfig = plt.gcf() \nfig.set_size_inches(10,10)\nplt.pie(data_pie,autopct='%1.1f%%',shadow=True)\ntitle = \"Top \"+str(number_case) +\" infection Case\" \nplt.title(title,fontsize=20, fontweight=\"bold\")\nplt.legend(data_pie_index, loc=\"best\") # bbx required to place legend without overlapping\nplt.show()","263c9418":"released_people.head(10)\n\ntemp2 = released_people.groupby('confirmed_date')['recover_period'].sum().reset_index()\ntemp3 = released_people.groupby('confirmed_date')['recover_period'].count().reset_index()\naa = pd.merge(temp2, temp3, on='confirmed_date')\n\naa.set_index('confirmed_date', inplace=True)\naa['recover_mean'] = aa['recover_period_x'] \/\/ aa['recover_period_y']\naa['recover_mean'] = aa['recover_mean'].astype('timedelta64[D]').astype(int)\nmarker_style = dict(c=\"crimson\",linewidth=5, linestyle='-', marker='o',markersize=8, markerfacecolor='#ffffff')\n#aa['recover_mean'].plot(figsize=(8,5), color='blue', zorder=1)\naa['recover_mean'].plot(figsize=(15,5))\naa.rolling(window=5).mean()['recover_mean'].plot(**marker_style)\nplt.title('Recovery Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', fontsize=18)\nplt.ylabel('means of Recovery Time', fontsize=18)\nplt.grid(alpha = 0.5)\n","93a7763a":"temp2 = released_people.groupby('province')['recover_period'].sum().reset_index()\ntemp3 = released_people.groupby('province')['recover_period'].count().reset_index()\naa = pd.merge(temp2, temp3, on='province')\n\naa['recover_mean'] = aa['recover_period_x'].dt.days \/ aa['recover_period_y']\naa.sort_values(by='recover_mean', ascending=True, inplace=True)\nfig, ax = plt.subplots(1,1,figsize=(10,6))\nplt.barh(aa['province'], aa['recover_mean'] ,height=0.6,alpha=0.5)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions', size=12)\nplt.xlabel('Recovery Days', size=12)\nax.set_xlim([5,22])\nfig.autofmt_xdate()\n","c6c1dab0":"released_people.head()\ntemp2 = released_people.groupby('age')['recover_period'].sum().reset_index()\ntemp3 = released_people.groupby('age')['recover_period'].count().reset_index()\naa = pd.merge(temp2, temp3, on='age')\naa['recover_mean'] = aa['recover_period_x'].dt.days \/ aa['recover_period_y']\n\nfig, ax = plt.subplots(1,1,figsize=(10,6))\naa.sort_values(by='recover_mean', ascending=True, inplace=True)\nplt.barh(aa['age'], aa['recover_mean'] ,height=0.6,alpha=0.5)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions', size=12)\nplt.xlabel('Recovery Days', fontsize=12,fontweight=\"bold\")\nax.set_xlim([10,28])\nfig.autofmt_xdate()","3b4b194d":"data = pd.DataFrame({'ds':Time['date'], 'y': Time['confirmed']})\nm=Prophet()\nm.fit(data)\nf=m.make_future_dataframe(periods=40)\nprop_forecast=m.predict(f)\nforecast = prop_forecast[['ds','yhat']].tail()\nfig = plot_plotly(m, prop_forecast)\nfig = m.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","195e4cf3":"import datetime\n\na = ARIMA(data['y'], order=(5, 1, 0))\na = a.fit(trend='c', full_output=True, disp=True)\nforecast = a.forecast(steps= 15)\npred = list(forecast[0])\n\nstart_date = data['ds'].max()\nprediction_dates = []\nfor i in range(15):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,5))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Confirmed cases',fontsize = 20)\n\nplt.plot_date(y= pred,x= prediction_dates,label = 'Predicted');\nplt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',label = 'Actual');\nplt.legend();\nplt.xticks(rotation=90)","85a44174":"register_matplotlib_converters()     \ndf = pd.DataFrame(columns = ['date','confirmed'])\ndf['date'] = Time['date']\ndf['confirmed'] = Time['confirmed']\ndf.set_index('date', inplace=True)\n   \ndef plot_decompose(decomposeresult):\n    fig,(ax1, ax2, ax3, ax4) = plt.subplots(4,1, figsize=(15,8))   \n    decomposeresult.observed.plot(legend=False, ax=ax1)\n    ax1.set_ylabel('Observed')\n    decomposeresult.trend.plot(legend=False, ax=ax2)\n    ax2.set_ylabel('Trend')\n    decomposeresult.seasonal.plot(legend=False, ax=ax3)\n    ax3.set_ylabel('Seasonal')\n    decomposeresult.resid.plot(legend=False, ax=ax4)\n    ax4.set_ylabel('Resid')\n    \nresult = seasonal_decompose(df, model='additive', freq=1)\n\nplot_decompose(result)\n\n\n","f1e61d4a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dropout, Dense, Activation\nfrom keras.callbacks import TensorBoard, ModelCheckpoint, ReduceLROnPlateau\nimport datetime\n#import keras.callbacks\n","aba454a2":"data_temp = pd.DataFrame(columns = ['date','confirmed'])\ndata_temp['date'] = Time['date']\ndata_temp['confirmed'] = Time['confirmed']\ndata_temp.head(20)\n\nseq_len = 5\nsequence_length = seq_len + 1\n\nresult = []\nfor index in range(len(data_temp) - sequence_length):\n    result.append(data_temp['confirmed'].values[index: index + sequence_length])\n\ndef normalize_windows(data):\n    normalized_data = []\n    for window in data:\n        normalized_window = [((float(p) \/ float(window[0])) - 1) for p in window]\n        normalized_data.append(normalized_window)\n    return np.array(normalized_data)\n\nresult = normalize_windows(result)  ","0ca18a5c":"row = int(round(result.shape[0] * 0.6))\ntrain = result[:row, :]\nnp.random.shuffle(train)\n\nx_train = train[:, :-1]\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\ny_train = train[:, -1]\n\nx_test = result[row:, :-1]\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\ny_test = result[row:, -1]\n\nx_train.shape, x_test.shape\nmodel = Sequential()\nprint(x_train.shape)\nmodel.add(LSTM(50, return_sequences=True, input_shape=(5, 1)))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dense(1, activation='linear'))\nmodel.compile(loss='mse', optimizer='rmsprop')\nmodel.summary()\nstart_time = datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')\n\nmodel.fit(x_train, y_train,\n    validation_data=(x_test, y_test),\n    batch_size=20,\n    epochs=80\n    \n )","6bd8b882":"pred = model.predict(x_test)\n\nfig = plt.figure(facecolor='white', figsize=(15, 5))\nax = fig.add_subplot(111)\nax.plot(y_test, label='True')\nax.plot(pred, label='Prediction', linewidth=5, linestyle=':')\nplt.ylim([0,0.5])   \n\nax.legend()\nplt.show()","37955a1d":"\n### As a result of analysis, Daegu showed the most infection cases.","a2507352":"## Age Group\/Time Analysis <a id=\"4\"><\/a>","fc302cb9":"## Top 10 province (Confirmed Cases and Deaths) <a id=\"2\"><\/a>","55ca6d27":"## Prediction using Keras <a id=\"11\"><\/a>","26688ca6":"### The time it takes to heal the corona virus is generally decreasing.","9c075f04":"# Table of Contents\n\n* [General Analysis of Data](#1)\n* [Top 10 province (Confirmed Cases and Deaths)](#2)\n* [Correlation Analysis](#3)\n* [Age Group\/Time Analysis](#4)\n* [Top 12 infection Case](#5)\n* [Recovery Time Analysis](#6)\n* [Prediction](#7)\n     * [Prophet Model](#8)\n     * [ARIMA](#9)\n     * [ETS](#10)\n     * [KERAS](#11)\n   ","c8a6bb64":"## Correlation Analysis <a id=\"3\"><\/a>\n<hr>\n","c6f09e61":"### Prediction using Prophet Model <a id=\"8\"><\/a>","eac74554":"## Prediction using ARIMA <a id=\"9\"><\/a>","f4e91328":"## Prediction using ETS Model <a id=\"10\"><\/a>","d3faba4d":"# Corona Virus(COVID-19) in Korea","966ebe07":"## Preprocessing","87a7c07e":"## Recovery Time Analysis <a id=\"6\"><\/a>","ad26be76":"## General Analysis of Data <a id=\"1\"><\/a>","50fbbf9c":"> ","d55fef6a":"# Introduction\n<hr>\n***Coronavirus disease 2019*** : Coronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).\n\nThe disease was first identified in December 2019 in Wuhan, the capital of China's Hubei province, and has since spread globally, resulting in the ongoing 2019\u201320 coronavirus pandemic.\nCommon symptoms include fever, cough and shortness of breath. Other symptoms may include fatigue, muscle pain, diarrhea, sore throat, loss of smell and abdominal pain.\n<br>\nRecommended measures to prevent infection include frequent hand washing, social distancing (maintaining physical distance from others, especially from those with symptoms), covering coughs and sneezes with a tissue or inner elbow and keeping unwashed hands away from the face. The use of masks is recommended for those who suspect they have the virus and their caregivers.\n\n\n\n","360e2a02":"## Top 12 infection Case <a id=\"5\"><\/a>","174baf24":"## Prediction <a id=\"7\"><\/a>"}}