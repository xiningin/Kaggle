{"cell_type":{"ec12925c":"code","d33d2683":"code","6384c2c2":"code","904bf532":"code","3c00c892":"code","018fbb71":"code","a9dd0088":"code","c55482d0":"code","8365e296":"code","fdec42c5":"code","0e6cfa70":"code","69bb1377":"code","fc4e7970":"code","70f5c9a5":"code","39549fd8":"code","def8f9b6":"code","e938ad16":"code","a4885858":"code","e70b6e9a":"code","a5bd0ca5":"code","cdd7c762":"code","049cb191":"code","0633a527":"code","c14952eb":"markdown","2cd99232":"markdown","cddc670c":"markdown","709cc99c":"markdown","07408e15":"markdown","e3d62a5f":"markdown","248a34ba":"markdown","94414d8b":"markdown","ed9f6e6e":"markdown","64f7d601":"markdown"},"source":{"ec12925c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir('..\/input\/lego-database'))\n\nimport matplotlib.image as mpimg\nimg=mpimg.imread('..\/input\/lego-database\/downloads_schema.png')\nplt.figure(figsize= (12,12))\nimgplot = plt.imshow(img)\nplt.show()","d33d2683":"# Read All dataset first\ncolors = pd.read_csv('..\/input\/lego-database\/colors.csv')\nsets = pd.read_csv('..\/input\/lego-database\/sets.csv')\nthemes = pd.read_csv('..\/input\/lego-database\/themes.csv')\nparts =pd.read_csv('..\/input\/lego-database\/parts.csv')\ninventories = pd.read_csv('..\/input\/lego-database\/inventories.csv')\ninventory_sets = pd.read_csv('..\/input\/lego-database\/inventory_sets.csv')\npart_categories =  pd.read_csv('..\/input\/lego-database\/part_categories.csv')\ninventory_parts = pd.read_csv('..\/input\/lego-database\/inventory_parts.csv')\n\ncolors.head()","6384c2c2":"#colors = colors.drop(['id', 'is_trans'], axis=1)\ncolors['rgb'] = colors['rgb'].apply(lambda x : '#'+x)\ncolors_set = dict(zip(colors.name, colors.rgb))\ncolors.head()","904bf532":"colors.describe(include='all')\n","3c00c892":"# source code from https:\/\/matplotlib.org\/3.1.1\/gallery\/color\/named_colors.html\nimport matplotlib.colors as mcolors\n\n\ndef plot_colortable(colors, title, sort_colors=True, emptycols=0):\n\n    cell_width = 212\n    cell_height = 22\n    swatch_width = 48\n    margin = 12\n    topmargin = 40\n\n    # Sort colors by hue, saturation, value and name.\n    if sort_colors is True:\n        by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(color))),\n                         name)\n                        for name, color in colors.items())\n        names = [name for hsv, name in by_hsv]\n    else:\n        names = list(colors)\n\n    n = len(names)\n    ncols = 4 - emptycols\n    nrows = n \/\/ ncols + int(n % ncols > 0)\n\n    width = cell_width * 4 + 2 * margin\n    height = cell_height * nrows + margin + topmargin\n    dpi = 64\n\n    fig, ax = plt.subplots(figsize=(width \/ dpi, height \/ dpi), dpi=dpi)\n    fig.subplots_adjust(margin\/width, margin\/height,\n                        (width-margin)\/width, (height-topmargin)\/height)\n    ax.set_xlim(0, cell_width * 4)\n    ax.set_ylim(cell_height * (nrows-0.5), -cell_height\/2.)\n    ax.yaxis.set_visible(False)\n    ax.xaxis.set_visible(False)\n    ax.set_axis_off()\n    ax.set_title(title, fontsize=24, loc=\"left\", pad=10)\n\n    for i, name in enumerate(names):\n        row = i % nrows\n        col = i \/\/ nrows\n        y = row * cell_height\n\n        swatch_start_x = cell_width * col\n        swatch_end_x = cell_width * col + swatch_width\n        text_pos_x = cell_width * col + swatch_width + 7\n\n        ax.text(text_pos_x, y, name, fontsize=14,\n                horizontalalignment='left',\n                verticalalignment='center')\n\n        ax.hlines(y, swatch_start_x, swatch_end_x,\n                  color=colors[name], linewidth=18)\n\n    return fig\n\nplot_colortable(colors_set, \"Lego Colors\")\nplt.show()","018fbb71":"themes.head(5)","a9dd0088":"themes['name'].value_counts()","c55482d0":"sets.head()","8365e296":"sets['name'].value_counts()","fdec42c5":"fig, ax = plt.subplots(1,1,figsize=(25, 8))\nsns.countplot(sets['year'],)\nplt.xticks(rotation=90)\nplt.title('History of Lego Sets')\nplt.show()","0e6cfa70":"inventories.head()","69bb1377":"inventories.describe()","fc4e7970":"inventory_sets.head(5)","70f5c9a5":"parts.head()","39549fd8":"parts.info()","def8f9b6":"part_categories.head()","e938ad16":"part_categories.info()","a4885858":"inventory_parts.head()","e70b6e9a":"inventory_parts['color_id'].value_counts()","a5bd0ca5":"color_count = inventory_parts['color_id'].value_counts()\n","cdd7c762":"fig, ax = plt.subplots(1,1,figsize=(25, 5))\nsns.barplot(color_count.index, color_count, ax=ax)\nax.set_xticklabels(sorted(color_count.index), rotation=90)\nplt.show()","049cb191":"colors_id = dict(zip(colors.id, colors.rgb))\n#print(colors_id)\ninventory_parts['color'] = inventory_parts['color_id'].apply(lambda id : colors_id[id])","0633a527":"import squarify\ny = inventory_parts['color'].value_counts()[:30]\n    \nplt.rcParams['figure.figsize'] = (30, 10)\nplt.style.use('fivethirtyeight')\n\ncolor_this_graph = y.index\nsquarify.plot(sizes = y.values, label = y.index, color = color_this_graph)\nplt.title('Top 30 Color : inventory parts', fontsize = 30)\nplt.axis('off')\nplt.show()","c14952eb":"## 1. Color set : Colors.csv","2cd99232":"## 5. Parts & Part_categories","cddc670c":"What is themes?","709cc99c":"The dataset is quite annoying than I thought.\nIt's a graph that reminds me of my previous DB class.","07408e15":"## 2. themes","e3d62a5f":"## 4. Inventories & Inventory Sets","248a34ba":"# 6. Inventory Parts","94414d8b":"Let's see what color is in Lego","ed9f6e6e":"Now let's color the graph (origin color)","64f7d601":"## 3. Sets"}}