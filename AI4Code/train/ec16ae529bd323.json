{"cell_type":{"b1f7a8c1":"code","fa79a371":"code","faf56b72":"code","004fe494":"code","aabc3383":"code","1e931e0c":"code","4d0de68a":"code","e4ce6456":"code","16f36500":"code","e007177c":"code","73fa6cb5":"code","bc32811b":"code","c1b93c51":"code","4ea99e66":"code","65acfdde":"code","57dddf35":"code","c8d85fa3":"code","42904d10":"markdown","e961bb2f":"markdown"},"source":{"b1f7a8c1":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import Ridge\nfrom lightgbm import LGBMRegressor\nimport catboost as catb\nimport xgboost as xgb","fa79a371":"data_tr   = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndata_tr = data_tr.drop(\"Id\", axis=1)\ndata_test = data_test.drop(\"Id\", axis=1)\ntarget = data_tr['SalePrice']\nall_data = pd.DataFrame(np.vstack((data_tr.drop(\"SalePrice\", axis=1), data_test)))\nall_data = all_data.fillna(0)\nall_data = pd.get_dummies(all_data)","faf56b72":"scaler = StandardScaler()\nall_data_scaled = pd.DataFrame(scaler.fit_transform(all_data))","004fe494":"X_train = all_data_scaled[:1460][:]\nX_test  = all_data_scaled[1460:][:]\ny_train = pd.DataFrame(target)","aabc3383":"data_tr.corr()","1e931e0c":"#logistic_est     = LogisticRegression(solver='liblinear')\n#lgbm_est = LGBMRegressor()\nxgb_est          = xgb.XGBRegressor(n_estimators=500, max_depth=5)\nridge_est        = Ridge(alpha=10)\nneighbors_est    = KNeighborsRegressor(n_neighbors=12)\n#randomforest_est = RandomForestRegressor(n_estimators=200, max_depth=5)\ncatboost_est     = catb.CatBoostRegressor()","4d0de68a":"(X_train_big, X_train_small, y_train_big, y_train_small) = train_test_split(X_train, y_train, test_size=0.5, shuffle=False)","e4ce6456":"%%time\n#logistic_est.fit(X_train_big, y_train_big)\n#lgbm_est.fit(X_train_big, y_train_big)\nxgb_est.fit(X_train_big, y_train_big)\nridge_est.fit(X_train_big, y_train_big)\nneighbors_est.fit(X_train_big, y_train_big)\n#randomforest_est.fit(X_train_big, y_train_big)\ncatboost_est.fit(X_train_big, y_train_big)","16f36500":"# Answers on test\n#y_test_logistic = logistic_est.predict(X_test)\ny_test_xgb      = xgb_est.predict(X_test)\n#y_test_lgbm     = lgbm_est.predict(X_test)\ny_test_ridge    = ridge_est.predict(X_test)\ny_test_neighbors= neighbors_est.predict(X_test)\n#y_test_randomfor= randomforest_est.predict(X_test)\ny_test_catb     = catboost_est.predict(X_test)","e007177c":"X_train_multialgorithm = pd.DataFrame(np.column_stack(([xgb_est.predict(X_train_small), catboost_est.predict(X_train_small), neighbors_est.predict(X_train_small), ridge_est.predict(X_train_small)])))","73fa6cb5":"X_test_multialgorithm = pd.DataFrame(np.column_stack(([y_test_xgb, y_test_catb, y_test_neighbors, y_test_ridge])))","bc32811b":"X_train_multialgorithm","c1b93c51":"X_test_multialgorithm","4ea99e66":"%%time\ncatboost_est.fit(X_train_multialgorithm, y_train_small)","65acfdde":"result = catboost_est.predict(X_test_multialgorithm)","57dddf35":"Id = np.arange(1461, 2920, 1)\nsubmission = pd.DataFrame({'Id': Id, 'SalePrice': result})\nsubmission.to_csv(\"my_submission_stacking_real_deal.csv\", index=False)","c8d85fa3":"pd.DataFrame(result).head(50)","42904d10":"## Lets make some stacking","e961bb2f":"## Import data and do some preprocessing"}}