{"cell_type":{"cbcbd686":"code","08fe18fc":"code","fcfa7a8a":"code","7f9fa2aa":"code","2eb5f634":"code","5fce5665":"code","7222632f":"code","53d1b418":"code","bd9582d0":"code","5cbdc98b":"code","a0942636":"code","c4e98f2d":"code","b4c9d8fd":"code","d3dd2d95":"code","c1382bd6":"code","2fc1be94":"code","febbe6fc":"code","b3081946":"code","42debfe5":"code","d40bbcc4":"code","2277fe02":"code","46f9dd93":"code","75453247":"code","bc9d9db2":"code","bd257a48":"code","b55942cd":"code","7ff5e3d8":"code","6c89d0d3":"code","3395ff47":"code","ee28ebfd":"code","61e95efe":"code","1385a980":"code","ffb55e96":"code","101952e7":"code","7937ccc1":"code","dfdade7f":"code","e99bb165":"code","a6b5326f":"code","10c1e116":"code","3c4e474f":"code","e59d1829":"code","a8c8f930":"code","245fcde5":"code","f697ef8e":"code","17d8fc1a":"code","9485275a":"code","df19ec6b":"code","05cd6e66":"code","56a4167e":"code","a6010184":"code","ff3fa801":"code","9cc51b23":"code","aaf7afd2":"code","fa9960d0":"code","421d0e8f":"code","9507d20d":"code","5f0b1c54":"code","5f117caa":"code","87cba4a5":"code","039111f4":"code","12b36bcd":"code","1c24586e":"code","39323f77":"code","c7ce575a":"code","3918333f":"code","14cdedd8":"code","47382bfc":"code","b7c69b23":"code","b31897b1":"code","3ef1067d":"code","faad0062":"markdown","19e2b4e8":"markdown","2c0fbc4a":"markdown","9b82facc":"markdown","d498911a":"markdown","adf9277f":"markdown","42d9c6d6":"markdown","cb1a45fb":"markdown","80a08866":"markdown","b4526338":"markdown","4044c6c7":"markdown","bb711e25":"markdown","7a7f6e51":"markdown","07074515":"markdown","96e6bb4f":"markdown","9d0f1c6a":"markdown","1273ac96":"markdown","98934292":"markdown","7895fb8f":"markdown","f9c5daf0":"markdown","bcc78079":"markdown","dfa19da1":"markdown","bb57c524":"markdown","f4e5feb3":"markdown","30b751a5":"markdown","7385542f":"markdown","24849687":"markdown","c288aea0":"markdown","c47c0662":"markdown"},"source":{"cbcbd686":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns\n\nfrom functools import reduce\n\n\nimport os \nimport gc\nimport psutil\n\n%matplotlib inline","08fe18fc":"print(os.listdir(\"..\/input\/nfl-playing-surface-analytics\/\"))","fcfa7a8a":"#InjuryRecord = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/InjuryRecord.csv\")\n#PlayList = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/PlayList.csv\")\n#PlayerTrackData = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/PlayerTrackData.csv\")","7f9fa2aa":"# Sample 100 rows of data to determine dtypes.\n#df_test = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/PlayerTrackData.csv\", nrows=100)\n\n#float_cols = [c for c in df_test if df_test[c].dtype == \"float64\"]\n#float32_cols = {c: np.float32 for c in float_cols}\n#float16_cols = {c: np.float16 for c in float_cols}\n\n#PlayerTrackData = pd.read_csv(\"..\/input\/nfl-playing-surface-analytics\/PlayerTrackData.csv\", engine='c', dtype=float16_cols)","2eb5f634":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","5fce5665":"InjuryRecord = import_data(\"..\/input\/nfl-playing-surface-analytics\/InjuryRecord.csv\")\nPlayList = import_data(\"..\/input\/nfl-playing-surface-analytics\/PlayList.csv\")\nPlayerTrackData = import_data(\"..\/input\/nfl-playing-surface-analytics\/PlayerTrackData.csv\")","7222632f":"#float_types = [\"float16\", \"float32\", \"float64\"]\n#for it in float_types:\n#    print(np.finfo(it))","53d1b418":"#InjuryRecord.info(memory_usage='deep')#memory usage: 35.7 KB\n#PlayList.info(memory_usage='deep') #memory usage: 162.2 MB\nPlayerTrackData.info(memory_usage='deep')#memory usage: 11.1 GB\n# memory usage: 9.1 GB after converting float64 to float32\n# memory usage: 8.1 GB after converting float64 to float32\n# memory usage: 3.6 GB after converting object to category for \"PlayKey\" column\n# memory usage: 1.4 GB after converting object to category for \"event\" column","bd9582d0":"#PlayerTrackData[\"PlayKey\"] = PlayerTrackData.PlayKey.astype('category')\n# memory usage: 3.6 GB after converting object to category for \"PlayKey\" column\n#PlayerTrackData[\"event\"] = PlayerTrackData.event.astype('category')","5cbdc98b":"print(\"available RAM:\", psutil.virtual_memory())\ngc.collect()\nprint(\"available RAM:\", psutil.virtual_memory())","a0942636":"#PlayerTrackData.describe()","c4e98f2d":"print(InjuryRecord.columns)\nprint(PlayList.columns)\nprint(PlayerTrackData.columns)","b4c9d8fd":"print(PlayerTrackData.shape)\nprint(PlayList.shape)\nprint(InjuryRecord.shape)","d3dd2d95":"PlayerTrackData.head(4)","c1382bd6":"PlayList.head(2)","2fc1be94":"InjuryRecord.head(3)","febbe6fc":"sns.catplot(x=\"BodyPart\", data=InjuryRecord, kind=\"count\", order = InjuryRecord['BodyPart'].value_counts().index)","b3081946":"sns.catplot(x=\"Surface\", data=InjuryRecord, kind=\"count\")","42debfe5":"sns.catplot(x=\"RosterPosition\", data=PlayList, kind=\"count\", order = PlayList['RosterPosition'].value_counts().index)\nplt.gcf().set_size_inches(16, 8)","d40bbcc4":"sns.catplot(x=\"PlayerDay\", data=PlayList, kind=\"count\")\nplt.gcf().set_size_inches(100, 8)","2277fe02":"sns.catplot(x=\"StadiumType\", data=PlayList, kind=\"count\", order = PlayList['StadiumType'].value_counts().index)\nplt.gcf().set_size_inches(50, 8)","46f9dd93":"sns.catplot(x=\"Weather\", data=PlayList, kind=\"count\")\nplt.gcf().set_size_inches(450, 8)","75453247":"sns.catplot(x=\"PlayType\", data=PlayList, kind=\"count\", order = PlayList['PlayType'].value_counts().index)\nplt.gcf().set_size_inches(16, 8)","bc9d9db2":"sns.catplot(x=\"Position\", data=PlayList, kind=\"count\", order = PlayList['Position'].value_counts().index)\nplt.gcf().set_size_inches(16, 8)","bd257a48":"sns.catplot(x=\"PlayerGamePlay\", data=PlayList, kind=\"count\")\nplt.gcf().set_size_inches(50, 8)","b55942cd":"sns.catplot(x=\"PositionGroup\", data=PlayList, kind=\"count\", order = PlayList['PositionGroup'].value_counts().index )\nplt.gcf().set_size_inches(16, 8)","7ff5e3d8":"PlayerTrackData.event.value_counts()","6c89d0d3":"print(PlayerTrackData.event.unique())","3395ff47":"InjuryRecord.BodyPart.value_counts()","ee28ebfd":"sns.catplot(x=\"BodyPart\", data=InjuryRecord, kind=\"count\", order = InjuryRecord['BodyPart'].value_counts().index)\nplt.gcf().set_size_inches(16, 8)","61e95efe":"InjuryRecord.DM_M1.value_counts()","1385a980":"sns.catplot(x=\"DM_M1\", hue='BodyPart', data=InjuryRecord, kind=\"count\",  order = InjuryRecord['DM_M1'].value_counts().index )","ffb55e96":"InjuryRecord.DM_M7.value_counts()","101952e7":"#sns.catplot(x=\"DM_M7\", hue='BodyPart', data=InjuryRecord, kind=\"count\")\nsns.catplot(x=\"DM_M7\", hue='BodyPart', data=InjuryRecord[(InjuryRecord.DM_M7==1)], kind=\"count\")\n","7937ccc1":"InjuryRecord.DM_M28.value_counts()","dfdade7f":"sns.catplot(x=\"DM_M28\", hue='BodyPart', data=InjuryRecord[(InjuryRecord.DM_M28==1)], kind=\"count\")","e99bb165":"InjuryRecord.DM_M42.value_counts()","a6b5326f":"sns.catplot(x=\"DM_M42\", hue='BodyPart', data=InjuryRecord[(InjuryRecord.DM_M42==1)], kind=\"count\")","10c1e116":"PlayList.StadiumType = PlayList.StadiumType.str.lower()\nPlayList.StadiumType = PlayList.StadiumType.str.strip()\nPlayList.StadiumType = PlayList.StadiumType.str.rstrip()\nPlayList.StadiumType = PlayList.StadiumType.str.lstrip()","3c4e474f":"stadium_name = PlayList.StadiumType.unique()\nprint(len(stadium_name))\n# printing the list using * and sep operator \nprint(\"printing lists separated by commas\") \n  \nprint(*stadium_name, sep = \"\/\") ","e59d1829":"#Similar word array:\narray_outdoors = [\"outdoor\", \"oudoor\", \"ourdoor\",\n                 \"outddors\", \"outdor\", \"outside\", \"heinz field\"]\narray_indoors = [\"indoor\", \"indoor\", \"indoor\", \"retractable roof\"]\narray_open = [\" open\", \"outdoor retr roof-open\", \"retr. roof-open\",\n             \"open roof\", \"retr. roof - open\", \" open roof\", \" open roof \", \"indoor, open roof\", \"domed, open\"] #1 issue\narray_closed = [\"closed dome\",\" closed\",\"  closed\", \"domed\", \"dome\", \"retr. roof-closed\",\n               \"bowl\", \"closed\", \"retr. roof closed\", \" roof closed\",\"roof closed\", \"retr. roof - closed\", \"  roof closed\",\n               \"domed, closed\", \"indoor, roof closed\", \"dome, closed\"]\n#array_","a8c8f930":"#df.replace(0, 5)\nPlayList[\"StadiumType\"] = PlayList[\"StadiumType\"].replace(array_outdoors, \"outdoors\" )\nPlayList[\"StadiumType\"] = PlayList[\"StadiumType\"].replace(array_indoors, \"indoors\" )\nPlayList[\"StadiumType\"] = PlayList[\"StadiumType\"].replace(array_open, \"open\" )\nPlayList[\"StadiumType\"] = PlayList[\"StadiumType\"].replace(array_closed, \"closed\" )","245fcde5":"InjuryRecord.head(2)","f697ef8e":"PlayList.head(2)","17d8fc1a":"PlayList.loc[PlayList['PlayKey']==\"39873-4-32\"]","9485275a":"#result = pd.merge(InjuryRecord,\n#                 PlayList,\n#                 on='PlayKey', \n#                 how='left')\nInjury_games_play = InjuryRecord.merge(PlayList,\n                  on='PlayKey',\n                  how='left')","df19ec6b":"Injury_games_play.tail()","05cd6e66":"Injury_games_play.isna().sum()","56a4167e":"#Drop rows with Nan in PlayKey column\nInjury_games_play = Injury_games_play[pd.notnull(Injury_games_play['PlayKey'])]","a6010184":"Injury_games_play.tail()","ff3fa801":"Injury_games_play.shape","9cc51b23":"Injury_games_play.columns","aaf7afd2":"sns.catplot(x=\"BodyPart\", hue='StadiumType', data=Injury_games_play, kind=\"count\")","fa9960d0":"Injury_games_play.isna().sum()","421d0e8f":"Injury_games_play=Injury_games_play.dropna()","9507d20d":"data=Injury_games_play[['BodyPart', 'Surface', 'RosterPosition', 'PlayerDay', 'PlayerGame', 'StadiumType', 'FieldType',\n       'Temperature', 'Weather', 'PlayType', 'PlayerGamePlay', 'Position',\n       'PositionGroup']]\n\nax = sns.pairplot(data, hue='BodyPart', kind=\"reg\")","5f0b1c54":"sns.catplot(x=\"BodyPart\", hue='Surface', data=Injury_games_play, kind=\"count\")","5f117caa":"Injury_games_play.head()","87cba4a5":"Injury_games_play.info()","039111f4":"Injury_games_play.loc[Injury_games_play['PlayerKey_x'] == 39873]","12b36bcd":"Injury_games_play.shape","1c24586e":"print(InjuryRecord.shape)\nprint(PlayList.shape)\nprint(PlayerTrackData.shape)","39323f77":"PlayList.head(4)","c7ce575a":"dfs = [PlayList, InjuryRecord, PlayerTrackData]","3918333f":"df_final = reduce(lambda left,right: pd.merge(left,right,on='PlayKey'), dfs)","14cdedd8":"df_final.shape","47382bfc":"print(df_final.head(10))","b7c69b23":"df_final.tail(10)","b31897b1":"df_final.isna().sum()","3ef1067d":"df_final.groupby('PlayKey')[['s']].max() \\\n    .sort_values('s', ascending=False) \\\n    .query('s != 0').head(10) \\\n    .plot(kind='barh', figsize=(15, 5), title='Top 10 Plays by Max Player Speed')\nplt.show()\n\ndf_final.groupby('PlayKey')[['s']].max() \\\n    .sort_values('s', ascending=True) \\\n    .query('s != 0').head(10) \\\n    .plot(kind='barh', figsize=(15, 5), title='Bottom 10 Plays by Min Player Speed')\nplt.show()","faad0062":"#### NOTES\n\nThe GameID field is a unique identifier of player games but does not strictly reflect the order in which the games were played. The PlayerDay is an integer sequence that provides an accurate timeline for player game participation. In order to generate an accurate timeline of an individual player\u2019s game participation, the PlayerDay variable should be used.","19e2b4e8":"### Relationship between the playing surface and the injury","2c0fbc4a":"Now, we see that for ```28``` Player in InjuryRecord, the PlayKey is missing. ","9b82facc":"1. #### Memory usage for our numeric columns.","d498911a":"_Weather_ column has many repeated entry with slight typos e.g. clean and warm, most cloudy, sunny, clear etc. Therefore, we need to clean this up and update the column with correct _Weather._","adf9277f":"_Standium Type_ column has many repeated entry with slight typos e.g. Outdoor, Outdoors etc. Therefore, we need to clean this up and update the column with correct _Standium type._","42d9c6d6":"### What is the relationship between the playing surface and the injury and performance of National Football League (NFL) athletes \n\nFindings from the data analysis:\n* ```Synthetic surface``` causes more _ankle_ injury than the ```Natural surface```,\n* On the other hand, ```Natural surface``` games lead to more _knee_ injuries than ```Synthetic surface```.\n* With respect to foot injury, one can conlcude that ```natural surface``` games lead to more _foot_ injuries than ```synthetic surfaces1```.\n\n\n\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 30%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/artificialturfexpress.com\/wp-content\/uploads\/2015\/10\/nrg-stadium-artificial-turf-field.jpg\" style=\"width: 100%\">Syntheic turf<\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 30%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/images-na.ssl-images-amazon.com\/images\/I\/3164kTNXjkL.jpg\" style=\"width: 100%\">Causes <\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 30%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/cdn.newsapi.com.au\/image\/v1\/861bd9a522cc078836d25e50036e8ec9?width=650\" style=\"width: 100%\">Ankle Injury<\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 30%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/akns-images.eonline.com\/eol_images\/Entire_Site\/20191010\/rs_1024x759-191110182813-1024-david-spade-people-choice-awards.jpg?fit=inside|900:auto&output-quality=90\" style=\"width: 100%\">Awww!<\/p>\n\n\n\n","cb1a45fb":"### Memory usage\n\nwe can get a better understanding of where we can reduce this memory usage.\n\n![image.png](attachment:image.png)","80a08866":"Check what kind of injuries lead to how many days on non-play for the players.","b4526338":"## Speed comparison","4044c6c7":"* Link for memory optimization\n\nhttps:\/\/www.dataquest.io\/blog\/pandas-big-data\/","bb711e25":"#### Visualize InjuryRecord table data\n","7a7f6e51":"```event``` column has 81 unique categories( 1 bbeing Nan); serious need to clean the data by removing similar events e.g. free_kick and free_kick_play sounds same. ","07074515":"# Data","96e6bb4f":"Note that there is not a PlayKey available for every injury. This indicates that the game in which the injury occurred is known, but the specific play in which the injury occurred was not noted at the time of injury.","9d0f1c6a":"## Helper function to reduce RAM\/memory usage by 76% ","1273ac96":"Let us join ```InjuryRecord``` and ```PlayList``` table on ```PlayKey``` where the injury occured i.e. use left join.","98934292":"### Merge table\n\nLet us make a master table by merging the three tables for the actual injury_record based on PlayKey, GameID, and PlayerKey i.e. there were 105 injury recorded. \n\nUse ```InjuryRecord``` all the rows and join it to Play_list. Then join the resulting table to ```PlayerTrackRecord``` for all those games- with all the play for that given game in which injury occured. This should be our master table for further analysis.","7895fb8f":"\n\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 25%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/www.sportscasting.com\/wp-content\/uploads\/2019\/11\/Natural-grass-at-Levis-Stadium.jpg\" style=\"width: 100%\">Natural turf<\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 25%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/images-na.ssl-images-amazon.com\/images\/I\/3164kTNXjkL.jpg\" style=\"width: 100%\">Causes <\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 25%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRswd9PRd8vtVIz4XdvqbWrxWyT1p3eIVAHkKe9vbf30_1qQM_4&s\" style=\"width: 100%\">Knee Injury<\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 25%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSJBYixnWKA8zlIB_FJoS5hR7dmYu6DroJgL_q6JZNFNPSdoWKl&s\" style=\"width: 100%\">Foot Injury<\/p>\n<p style=\"float: left; font-size: 9pt; text-align: center; width: 100%; margin-right: 1%; margin-bottom: 0.5em;\"><img src=\"https:\/\/i.ytimg.com\/vi\/jk5KWEpgm9A\/maxresdefault.jpg\" style=\"width: 50%\">Awwwwww! Injury<\/p>","f9c5daf0":"```Knee``` injury is most frequent, closely followed by ```Ankle``` injuries among the players. While, ```foot``` and ```toe``` injuries are low. Injury to ```HeelBodyPart``` is least.","bcc78079":"# Introduction\n#### Please upvote, motivate me to improve this kernel.\nWe're tasked to investigate the relationship between the _playing surface_ and the _injury_ and _performance_ of National Football League (NFL) athletes and to _examine factors that may contribute to lower extremity injuries._\n\n![image.png](attachment:image.png)\n\n\n","dfa19da1":"Use arrays above to replace the entries with correct word in ```StadiumType``` column of ```PlayList```","bb57c524":"Join the three basic tables on key \"PlayKey\".","f4e5feb3":"## Findings:\n- Players' foot injuries increase with increasing number of PlayDay, suggests players need to take break after certain number of games. Count of game-play is an area of study.\n- Players' knee injury increase with decreasing temperature.","30b751a5":"Therefore, out of 105 ```InjuryRecord``` we have only 77 rows with ```PlayKey``` that is being used for further analysis.\n\n#### EDA on InjuryRecord and Play where injury occured.","7385542f":"# EDA","24849687":"From the plot above, following points can be concluded:\n* ```Synthetic surface``` causes more _ankle_ injury than the ```Natural surface```,\n* On the other hand, ```Natural surface``` games lead to more _knee_ injuries than ```Synthetic surface```.\n* With respect to foot injury, one can conlcude that ```natural surface``` games lead to more _foot_ injuries than ```synthetic surfaces1```.","c288aea0":"* Injury Record: The injury record file in .csv format contains information on 105 lower-limb injuries that occurred during regular season games over the two seasons. Injuries can be linked to specific records in a player history using the PlayerKey, GameID, and PlayKey fields.\n```\n['PlayerKey', 'GameID', 'PlayKey', 'BodyPart', 'Surface', 'DM_M1',\n       'DM_M7', 'DM_M28', 'DM_M42']\n```\n\n* Play List: \u2013 The play list file contains the details for the 267,005 player-plays that make up the dataset. Each play is indexed by PlayerKey, GameID, and PlayKey fields. Details about the game and play include the player\u2019s assigned roster position, stadium type, field type, weather, play type, position for the play, and position group.\n```\n['PlayerKey', 'GameID', 'PlayKey', 'RosterPosition', 'PlayerDay',\n       'PlayerGame', 'StadiumType', 'FieldType', 'Temperature', 'Weather',\n       'PlayType', 'PlayerGamePlay', 'Position', 'PositionGroup']\n```\n* Player Track Data: player level data that describes the location, orientation, speed, and direction of each player during a play recorded at 10 Hz (i.e. 10 observations recorded per second).\n```\n['PlayKey', 'time', 'event', 'x', 'y', 'dir', 'dis', 'o', 's']\n```\n\n","c47c0662":"### Data Cleaning\nStaium names repeated with slight variation in ```PlayList``` table."}}