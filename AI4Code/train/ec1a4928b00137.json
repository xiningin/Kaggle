{"cell_type":{"dfe65a31":"code","d5309cc3":"code","1cc24719":"code","f56ac92e":"code","7b61f6c7":"code","71fb0ccc":"code","0ba150ca":"code","28050ece":"code","7c79375b":"code","9d539cba":"code","ee95f506":"code","bf2fa070":"code","072c4954":"code","b8ed87ca":"code","756643ed":"code","74e0a338":"code","e2a7fd7a":"code","588b236b":"code","357b38f1":"code","d7f5461f":"code","55abf913":"code","3b5833e5":"code","565441eb":"code","03ce1b69":"code","cc1c838d":"code","97e0e305":"code","038bdae9":"code","8f7d597a":"code","012e1180":"code","4b5fb963":"code","d43ecd02":"code","49cdecfb":"code","fd9b7ffd":"markdown","b43c19b1":"markdown"},"source":{"dfe65a31":"pip install auto-sklearn","d5309cc3":"# Import Lab\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom autosklearn.regression import AutoSklearnRegressor\nfrom autosklearn.metrics import mean_absolute_error as auto_mean_absolute_error","1cc24719":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","f56ac92e":"df_train.head()","7b61f6c7":"df_test.head()","71fb0ccc":"df_train.info()","0ba150ca":"df_train.describe()","28050ece":"df_train['SalePrice'].describe()","7c79375b":"df_train.isna().sum()","9d539cba":"df_test.isna().sum()","ee95f506":"# Convert strings to categories with using pandas API\n\nfor label, content in df_train.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","bf2fa070":"for label, content in df_train.items():\n    if pd.api.types.is_string_dtype(content):\n        df_train[label] = content.astype('category').cat.as_ordered()","072c4954":"df_train.info()","b8ed87ca":"df_train.isnull().sum()\/len(df_train)","756643ed":"for label, content in df_train.items():\n    if pd.api.types.is_numeric_dtype(content):\n        print(label)","74e0a338":"for label, content in df_train.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","e2a7fd7a":"# Fill numeric rows with median()\n\nfor label, content in df_train.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            df_train[label+ '_is_missing'] = pd.isnull(content)\n            df_train[label] = content.fillna(content.median())","588b236b":"for label, content in df_train.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","357b38f1":"for label, content in df_train.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        print(label)","d7f5461f":"for label, content in df_train.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df_train[label + '_is_missing'] = pd.isnull(content)\n        df_train[label] = pd.Categorical(content).codes+1","55abf913":"sns.distplot(df_train['SalePrice'], kde=False, color='m')","3b5833e5":"sns.kdeplot(df_train['SalePrice'], shade=True, color='m')","565441eb":"# split into train and test sets\nX = df_train.drop('SalePrice', axis=1)\ny = df_train['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)","03ce1b69":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","cc1c838d":"# Auto-Sklearn Initialization\nmodel = AutoSklearnRegressor(time_left_for_this_task=300, \n                              per_run_time_limit=30, \n                              ensemble_size=1, \n                              initial_configurations_via_metalearning=0)\n# Init training\nmodel.fit(X_train, y_train)","97e0e305":"y_hat =model.predict(X_test)","038bdae9":"y_hat","8f7d597a":"y_test","012e1180":"# summarize\nprint(model.sprint_statistics())","4b5fb963":"model.score(X_test, y_test)","d43ecd02":"# evaluate best model\ny_hat = model.predict(X_test)\nmae = mean_absolute_error(y_test, y_hat)\nprint(\"MAE: %.3f\" % mae)","49cdecfb":"print(model.show_models())","fd9b7ffd":"# Auto-Sklearn for Regression\nIn this section, we will use Auto-Sklearn to discover a model for the auto House Price Prediction dataset.\n\n\n## Auto-Sklearn\nThe Auto-Sklearn architecture is composed of 3 phases: meta-learning, bayesian optimization, ensemble selection. The key idea of the meta-learning phase is to reduce the space search by learning from models that performed well on similar datasets. Right after, the bayesian optimization phase takes the space search created in the meta-learning step and creates bayesian models for finding the optimal pipeline configuration. Finally, an ensemble selection model is created by reusing the most accurate models found in the bayesian optimization step. In Figure 2 it\u2019s described the Auto-Sklearn architectur\n\n![](https:\/\/miro.medium.com\/max\/1000\/1*w8qIzewO97qdqmiZi69Maw.jpeg)","b43c19b1":"## Data Description\nThe data set describing the sale of individual residential property in Ames, Iowafrom 2006 to 2010. The data set contains 2930 observations and a large number of explanatory variables (23 nominal, 23 ordinal, 14 discrete, and 20 continuous) involved in assessing home values.\n\nIf need more information in this link\n\n(Ames, Iowa: Alternative to the Boston Housing Data as an End of Semester Regression Project)\n\n[Paper ](http:\/\/jse.amstat.org\/v19n3\/decock.pdf)\n\n\n\n\n### File descriptions\n* train.csv - the training set\n* test.csv - the test set\n* data_description.txt - full description of each column, originally prepared by Dean De Cock but lightly edited to match the column names used here\n* sample_submission.csv - a benchmark submission from a linear regression on year and month of sale, lot square footage, and number of bedrooms\n\n\n### Dataset\n\n\n\n[Link](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview)"}}