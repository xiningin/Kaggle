{"cell_type":{"98bc9746":"code","5310fa56":"code","e6bb9ee8":"code","288189c3":"code","acdee6a5":"code","c52e2eee":"code","93041377":"code","67087d05":"code","38add68d":"code","886e42b8":"code","5f72fed8":"code","8aa3329b":"code","1d8f788a":"code","be87dc82":"code","aa37f642":"code","885d434b":"code","65cc03b4":"code","fa770b2e":"code","addfd5d1":"code","f12ad321":"code","f51ee977":"markdown","03bd2b0e":"markdown","dc604e0c":"markdown","2a4eeb52":"markdown","6662e42d":"markdown","54ff74f0":"markdown","278a10d5":"markdown","9a5d667f":"markdown","e27c00a3":"markdown","364df3d0":"markdown","0b3cc317":"markdown","a1d212d1":"markdown","215acab5":"markdown"},"source":{"98bc9746":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","5310fa56":"print(pd.__version__)","e6bb9ee8":"print(pd.show_versions(as_json=True))","288189c3":"a_list = list('abcdefg')\nnp_array = np.arange(1,10)\ndict = {'a': 0 , 'b' : 1, 'c' : 2, 'd' : 3}","acdee6a5":"print(a_list)\nprint(np_array)\nprint(dict)","c52e2eee":"list_series = pd.Series(a_list)\nnpa_series = pd.Series(np_array)\ndict_series = pd.Series(dict)","93041377":"print(list_series)\nprint(npa_series)\nprint(dict_series)","67087d05":"pdser = pd.Series(dict_series)\nprint(type(pdser))","38add68d":"dfser = pd.DataFrame(pdser)\nprint(type(dfser))\nprint(dfser.shape)\nprint(dfser)","886e42b8":"dfser.reset_index()","5f72fed8":"dir(pd)","8aa3329b":"print(pd.Index.__doc__)","1d8f788a":"help(pd.Index)","be87dc82":"ser_lower = pd.Series(list('abcdefghijklmnopqrstuvwxyz'))\nser_upper = pd.Series(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nser_letterindex = pd.Series(np.arange(26))\n# This can be done using either the dictionary argument to the DataFrame method, \n# or the list of Series objects to the concat method\n\n#df_alphabet = pd.DataFrame({'lower': ser_lower, 'upper' : ser_upper, 'slno' : ser_letterindex})\n\ndf_alphabet = pd.concat([ser_lower, ser_upper, ser_letterindex], axis = 1)\n\ndf_alphabet.rename(columns={0: \"Lower\", 1: \"Upper\", 2: \"letterIndex\"}, inplace=True)\ndf_alphabet.rename_axis(\"alphabet\")\n\ndf_alphabet","aa37f642":"oneseries = pd.Series([1,3,5,2,4,8])\ntwoseries = pd.Series([2,1,5,7,0,9])\n\n#Elements NOT common between arrays\ns1 = oneseries[~oneseries.isin(twoseries)]\n\n#Elements Common between arrays\ns2 = oneseries[oneseries.isin(twoseries)]\nprint(\"Elements NOT common with their indices\")\nprint(s1)\nprint(\"Elements common with their indices\")\nprint(s2)","885d434b":"one_not2 = oneseries[~oneseries.isin(twoseries)]\ntwo_not1 = twoseries[~twoseries.isin(oneseries)]\n\none_not2.append(two_not1, ignore_index = True)","65cc03b4":"series_union = pd.Series(np.union1d(oneseries, twoseries))\nseries_intersection = pd.Series(np.intersect1d(oneseries, twoseries))\n\nprint(series_union)\nprint(series_intersection)\n\nseries_uncommon = series_union[~series_union.isin(series_intersection)]\nprint(series_uncommon)","fa770b2e":"state = np.random.RandomState(25)\nprint(type(state))\nrandomseries = pd.Series(state.normal(5,10,25))\nprint(randomseries)\nprint(type(state.normal(5,10,25)))\nprint(state.normal(5,10,25))","addfd5d1":"#using pandas describe\nprint(randomseries.describe())\n\n#using numpy percentile\nprint(np.percentile(randomseries, q=[25,50,75,100]))\n\n#finding any percentile in the series using numpy\nprint(np.percentile(randomseries, q  = [66]))","f12ad321":"frequencyseries = pd.Series(np.take(list('abcdefgh'), np.random.randint(8, size=30)))\nprint(frequencyseries)\n\nprint(\"value counts :\\n\" , frequencyseries.value_counts())\nprint(frequencyseries.value_counts())","f51ee977":"Getting array elements that are present in one array and not in another array.","03bd2b0e":"To find the usage and details of each method or attribute, check its docstring with the __doc__ attribute of the members.","dc604e0c":"Getting the frequency of elements in a series","2a4eeb52":"alternatively, this is displayed using the help function","6662e42d":"Get the items not common to both series A and series B","54ff74f0":"Listing the methods and attributes of the library","278a10d5":"Convert a dictionary into a series and dataframe","9a5d667f":"The same as above, using numpy Union and Intersection","e27c00a3":"![](http:\/\/)Using multiple Series to populate a DataFrame","364df3d0":"Creating a series from a list, numpy array and dictionary","0b3cc317":"Print all pandas dependencies","a1d212d1":"Get version","215acab5":"Getting the percentiles in a numeric series"}}