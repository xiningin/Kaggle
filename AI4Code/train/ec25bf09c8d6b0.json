{"cell_type":{"da4dd613":"code","6a7d8b97":"code","e96dedf2":"code","a08663ba":"code","330ed872":"code","39e69f86":"code","8c128cfe":"code","e148b522":"code","34147d97":"code","4f7fff83":"code","b23d0197":"code","6659b14a":"code","e8c2e95e":"code","e94ea4c9":"code","e09fc28c":"code","be273704":"code","33347128":"code","d25ae860":"code","bc664dee":"code","d6d4016a":"markdown","c0734fa5":"markdown","a98ec8a8":"markdown","55812897":"markdown","9eb26e6b":"markdown","4c78c505":"markdown","dd78dd34":"markdown","5f9c1329":"markdown","4611486b":"markdown","410df571":"markdown","c98ab363":"markdown","ded83024":"markdown","e4f043f4":"markdown","e5693877":"markdown","d189ebf9":"markdown","65ade5f3":"markdown"},"source":{"da4dd613":"import os\nprint(os.listdir(\"..\/input\"))","6a7d8b97":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nimport gc\nimport time\nfrom pandas.core.common import SettingWithCopyWarning\nimport warnings\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, GridSearchCV\n\n# I don't like SettingWithCopyWarnings ...\nwarnings.simplefilter('error', SettingWithCopyWarning)\ngc.enable()\n%matplotlib inline","e96dedf2":"train = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_train.gz', \n                    dtype={'date': str, 'fullVisitorId': str, 'sessionId':str}, nrows=None)\ntest = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_test.gz', \n                   dtype={'date': str, 'fullVisitorId': str, 'sessionId':str}, nrows=None)\ntrain.shape, test.shape","a08663ba":"for df in [train, test]:\n    df['date'] = pd.to_datetime(df['visitStartTime'], unit='s')\n    df['sess_date_dow'] = df['date'].dt.dayofweek\n    df['sess_date_hours'] = df['date'].dt.hour\n    df['sess_date_dom'] = df['date'].dt.day\n\n# https:\/\/www.kaggle.com\/prashantkikani\/teach-lightgbm-to-sum-predictions-fe\ndef browser_mapping(x):\n    browsers = ['chrome','safari','firefox','internet explorer','edge','opera','coc coc','maxthon','iron']\n    if x in browsers:\n        return x.lower()\n    elif  ('android' in x) or ('samsung' in x) or ('mini' in x) or ('iphone' in x) or ('in-app' in x) or ('playstation' in x):\n        return 'mobile browser'\n    elif  ('mozilla' in x) or ('chrome' in x) or ('blackberry' in x) or ('nokia' in x) or ('browser' in x) or ('amazon' in x):\n        return 'mobile browser'\n    elif  ('lunascape' in x) or ('netscape' in x) or ('blackberry' in x) or ('konqueror' in x) or ('puffin' in x) or ('amazon' in x):\n        return 'mobile browser'\n    elif '(not set)' in x:\n        return x\n    else:\n        return 'others'\n    \n    \ndef adcontents_mapping(x):\n    if  ('google' in x):\n        return 'google'\n    elif  ('placement' in x) | ('placememnt' in x):\n        return 'placement'\n    elif '(not set)' in x or 'nan' in x:\n        return x\n    elif 'ad' in x:\n        return 'ad'\n    else:\n        return 'others'\n    \ndef source_mapping(x):\n    if  ('google' in x):\n        return 'google'\n    elif  ('youtube' in x):\n        return 'youtube'\n    elif '(not set)' in x or 'nan' in x:\n        return x\n    elif 'yahoo' in x:\n        return 'yahoo'\n    elif 'facebook' in x:\n        return 'facebook'\n    elif 'reddit' in x:\n        return 'reddit'\n    elif 'bing' in x:\n        return 'bing'\n    elif 'quora' in x:\n        return 'quora'\n    elif 'outlook' in x:\n        return 'outlook'\n    elif 'linkedin' in x:\n        return 'linkedin'\n    elif 'pinterest' in x:\n        return 'pinterest'\n    elif 'ask' in x:\n        return 'ask'\n    elif 'siliconvalley' in x:\n        return 'siliconvalley'\n    elif 'lunametrics' in x:\n        return 'lunametrics'\n    elif 'amazon' in x:\n        return 'amazon'\n    elif 'mysearch' in x:\n        return 'mysearch'\n    elif 'qiita' in x:\n        return 'qiita'\n    elif 'messenger' in x:\n        return 'messenger'\n    elif 'twitter' in x:\n        return 'twitter'\n    elif 't.co' in x:\n        return 't.co'\n    elif 'vk.com' in x:\n        return 'vk.com'\n    elif 'search' in x:\n        return 'search'\n    elif 'edu' in x:\n        return 'edu'\n    elif 'mail' in x:\n        return 'mail'\n    elif 'ad' in x:\n        return 'ad'\n    elif 'golang' in x:\n        return 'golang'\n    elif 'direct' in x:\n        return 'direct'\n    elif 'dealspotr' in x:\n        return 'dealspotr'\n    elif 'sashihara' in x:\n        return 'sashihara'\n    elif 'phandroid' in x:\n        return 'phandroid'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'mdn' in x:\n        return 'mdn'\n    elif 'duckduckgo' in x:\n        return 'duckduckgo'\n    elif 'seroundtable' in x:\n        return 'seroundtable'\n    elif 'metrics' in x:\n        return 'metrics'\n    elif 'sogou' in x:\n        return 'sogou'\n    elif 'businessinsider' in x:\n        return 'businessinsider'\n    elif 'github' in x:\n        return 'github'\n    elif 'gophergala' in x:\n        return 'gophergala'\n    elif 'yandex' in x:\n        return 'yandex'\n    elif 'msn' in x:\n        return 'msn'\n    elif 'dfa' in x:\n        return 'dfa'\n    elif '(not set)' in x:\n        return '(not set)'\n    elif 'feedly' in x:\n        return 'feedly'\n    elif 'arstechnica' in x:\n        return 'arstechnica'\n    elif 'squishable' in x:\n        return 'squishable'\n    elif 'flipboard' in x:\n        return 'flipboard'\n    elif 't-online.de' in x:\n        return 't-online.de'\n    elif 'sm.cn' in x:\n        return 'sm.cn'\n    elif 'wow' in x:\n        return 'wow'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'partners' in x:\n        return 'partners'\n    else:\n        return 'others'\n\ntrain['device.browser'] = train['device.browser'].map(lambda x:browser_mapping(str(x).lower())).astype('str')\ntrain['trafficSource.adContent'] = train['trafficSource.adContent'].map(lambda x:adcontents_mapping(str(x).lower())).astype('str')\ntrain['trafficSource.source'] = train['trafficSource.source'].map(lambda x:source_mapping(str(x).lower())).astype('str')\n\ntest['device.browser'] = test['device.browser'].map(lambda x:browser_mapping(str(x).lower())).astype('str')\ntest['trafficSource.adContent'] = test['trafficSource.adContent'].map(lambda x:adcontents_mapping(str(x).lower())).astype('str')\ntest['trafficSource.source'] = test['trafficSource.source'].map(lambda x:source_mapping(str(x).lower())).astype('str')\n\ndef process_device(data_df):\n    print(\"process device ...\")\n    data_df['source.country'] = data_df['trafficSource.source'] + '_' + data_df['geoNetwork.country']\n    data_df['campaign.medium'] = data_df['trafficSource.campaign'] + '_' + data_df['trafficSource.medium']\n    data_df['browser.category'] = data_df['device.browser'] + '_' + data_df['device.deviceCategory']\n    data_df['browser.os'] = data_df['device.browser'] + '_' + data_df['device.operatingSystem']\n    return data_df\n\ntrain = process_device(train)\ntest = process_device(test)\n\ndef custom(data):\n    print('custom..')\n    data['device_deviceCategory_channelGrouping'] = data['device.deviceCategory'] + \"_\" + data['channelGrouping']\n    data['channelGrouping_browser'] = data['device.browser'] + \"_\" + data['channelGrouping']\n    data['channelGrouping_OS'] = data['device.operatingSystem'] + \"_\" + data['channelGrouping']\n    \n    for i in ['geoNetwork.city', 'geoNetwork.continent', 'geoNetwork.country','geoNetwork.metro', 'geoNetwork.networkDomain', 'geoNetwork.region','geoNetwork.subContinent']:\n        for j in ['device.browser','device.deviceCategory', 'device.operatingSystem', 'trafficSource.source']:\n            data[i + \"_\" + j] = data[i] + \"_\" + data[j]\n    \n    data['content.source'] = data['trafficSource.adContent'] + \"_\" + data['source.country']\n    data['medium.source'] = data['trafficSource.medium'] + \"_\" + data['source.country']\n    return data\n\ntrain = custom(train)\ntest = custom(test)","330ed872":"excluded_features = [\n    'date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', \n    'visitId', 'visitStartTime'\n]\n\ncategorical_features = [\n    _f for _f in train.columns\n    if (_f not in excluded_features) & (train[_f].dtype == 'object')\n]","39e69f86":"for f in categorical_features:\n    train[f], indexer = pd.factorize(train[f])\n    test[f] = indexer.get_indexer(test[f])","8c128cfe":"print(train.shape, test.shape)\n\ntrain['istrain'] = 1\ntest['istrain'] = 0\n\ndf = pd.concat([train, test])\n\ntarget = df['istrain']\ndf.drop('istrain', axis=1, inplace=True)\n\nuse_cols = [col for col in df.columns if col not in excluded_features]\n\ndf = df[use_cols]","e148b522":"%%time\n\nparams = {\n    \"objective\" : \"binary\",\n    \"metric\" : \"auc\",\n    \"num_leaves\" : 64,\n    \"learning_rate\" : 0.01,\n    \"bagging_fraction\" : 0.7,\n    \"feature_fraction\" : 0.7,\n    \"bagging_frequency\" : 1,\n    \"bagging_seed\" : 1989,\n    \"verbosity\" : -1,\n    'lambda_l1':1,\n    'lambda_l2':1,\n    'max_depth': -1,\n    'min_data_in_leaf': 100,\n    \"seed\": 1989,\n}\n\nFOLDs = KFold(n_splits=5, shuffle=True, random_state=1989)\nfeatures = list(df.columns)\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(FOLDs.split(df)):\n    print('#'*30, '{} of 5 folds'.format(fold_ +1), '#'*30)\n    trn_data = lgb.Dataset(df.iloc[trn_idx].values, label = target.iloc[trn_idx].values)\n    val_data = lgb.Dataset(df.iloc[val_idx].values, label = target.iloc[val_idx].values)\n    \n    num_round = 2000\n    clf = lgb.train(params, trn_data, num_round, valid_sets = [trn_data, val_data], \n                    verbose_eval=200, early_stopping_rounds = 50)\n    \n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"split\"] = clf.feature_importance(importance_type='split')\n    fold_importance_df[\"gain\"] = clf.feature_importance(importance_type='gain')\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)    \n    del trn_data, val_data, clf","34147d97":"feature_importance_df = feature_importance_df.groupby('feature').mean().sort_values('gain', ascending=False).reset_index()","4f7fff83":"plt.figure(figsize=(10, 30))\nsns.barplot(x='gain', y='feature', data=feature_importance_df)\nplt.show()","b23d0197":"plt.figure(figsize=(10, 30))\nsns.barplot(x='split', y='feature', data=feature_importance_df.sort_values('split', ascending=False))\nplt.show()","6659b14a":"del df","e8c2e95e":"%%time\nnew_train = train[use_cols + ['fullVisitorId']].groupby('fullVisitorId').mean()\nnew_test = test[use_cols + ['fullVisitorId']].groupby('fullVisitorId').mean()","e94ea4c9":"print(new_train.shape, new_test.shape)\n\nnew_train['istrain'] = 1\nnew_test['istrain'] = 0\n\ndf = pd.concat([new_train, new_test])\n\ntarget = df['istrain']\ndf.drop('istrain', axis=1, inplace=True)","e09fc28c":"print(df.shape)","be273704":"%%time\n\nparams = {\n    \"objective\" : \"binary\",\n    \"metric\" : \"auc\",\n    \"num_leaves\" : 64,\n    \"learning_rate\" : 0.01,\n    \"bagging_fraction\" : 0.7,\n    \"feature_fraction\" : 0.7,\n    \"bagging_frequency\" : 1,\n    \"bagging_seed\" : 1989,\n    \"verbosity\" : -1,\n    'lambda_l1':1,\n    'lambda_l2':1,\n    'max_depth': -1,\n    'min_data_in_leaf': 100,\n    \"seed\": 1989,\n}\n\nFOLDs = KFold(n_splits=5, shuffle=True, random_state=1989)\nfeatures = list(df.columns)\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(FOLDs.split(df)):\n    print('#'*30, '{} of 5 folds'.format(fold_ +1), '#'*30)\n    trn_data = lgb.Dataset(df.iloc[trn_idx].values, label = target.iloc[trn_idx].values)\n    val_data = lgb.Dataset(df.iloc[val_idx].values, label = target.iloc[val_idx].values)\n    \n    num_round = 2000\n    clf = lgb.train(params, trn_data, num_round, valid_sets = [trn_data, val_data], \n                    verbose_eval=200, early_stopping_rounds = 50)\n    \n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"split\"] = clf.feature_importance(importance_type='split')\n    fold_importance_df[\"gain\"] = clf.feature_importance(importance_type='gain')\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)    \n    del trn_data, val_data, clf","33347128":"feature_importance_df = feature_importance_df.groupby('feature').mean().sort_values('gain', ascending=False).reset_index()","d25ae860":"plt.figure(figsize=(10, 30))\nsns.barplot(x='gain', y='feature', data=feature_importance_df)\nplt.show()","bc664dee":"plt.figure(figsize=(10, 30))\nsns.barplot(x='split', y='feature', data=feature_importance_df.sort_values('split', ascending=False))\nplt.show()","d6d4016a":"## Sorted by gain","c0734fa5":"# User-level","a98ec8a8":"# Prepare features","55812897":"# Read data","9eb26e6b":"# Feature engineering","4c78c505":"# Factorize features","dd78dd34":"## Sorted by split","5f9c1329":"# Feature importance","4611486b":"# Check auc","410df571":"# Background\n- In this competition, many kaggler suffer from the discrepancy between CV and LB.\n- This could be caused by some features which have different distribution in both train and test.\n- I asked some methods to find those features. https:\/\/www.kaggle.com\/c\/ga-customer-revenue-prediction\/discussion\/67850\n- Very kind kaggler, \"kain\" recommended some strategies.\n- After searching and studying them, I want to share the adversarial validation.\n- I referred to various kernels. Thanks for sharing! If you got a help, please upvote them!\n- https:\/\/www.kaggle.com\/konradb\/adversarial-validation-and-other-scary-terms\n- https:\/\/www.kaggle.com\/rspadim\/adversarial-validation-porto-seguro\n- https:\/\/www.kaggle.com\/ogrellier\/adversarial-validation-and-lb-shakeup\n- I forked this helpful kernel, https:\/\/www.kaggle.com\/prashantkikani\/ensembling-fe-is-the-answer. Thanks!","c98ab363":"## Sorted by split","ded83024":"# Conclusion\n- Unfortunately, train and test are different.\n- So, we need to consider the difference when make features!","e4f043f4":"## Sorted by gain","e5693877":"# Prepare target for adversarial validation","d189ebf9":"# Feature importance when distinguish train from test","65ade5f3":"- If there is bug or mistake, please talk to me! And if you have any feedback, please talk to me. \n- Hope this kernel helps you."}}