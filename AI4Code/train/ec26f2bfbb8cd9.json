{"cell_type":{"6bebeb75":"code","5591f0f1":"code","88a3da05":"code","a9bef849":"code","dd1f69f3":"code","27521a88":"code","533fccea":"code","833f7746":"code","ce3c5124":"code","a36018be":"code","591d7172":"code","221cd05e":"code","7ebcc2b2":"code","4f477448":"code","cf66b53d":"code","b25f6353":"markdown","ecef0872":"markdown","587135c5":"markdown","80d3b954":"markdown","9ff89755":"markdown","c48d0893":"markdown","44df6eac":"markdown"},"source":{"6bebeb75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5591f0f1":"# Seed Everything\nimport random\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()","88a3da05":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv')","a9bef849":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                #    df[col] = df[col].astype(np.float16)\n                #el\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        #else:\n            #df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","dd1f69f3":"# Reduce Memory Usage\ntrain = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","27521a88":"train.head()","533fccea":"# Dtypes\ntrain.info()","833f7746":"# Missing Values\ntrain.columns[train.isnull().sum() > 0]","ce3c5124":"# Drop Id","a36018be":"# Train-Test Split\nfrom sklearn.model_selection import train_test_split\n\nX = train.drop('target', axis=1)\ny = train['target']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","591d7172":"# Fitting\nfrom lightgbm import LGBMRegressor\n\nlgbm = LGBMRegressor(\n    metric=\"auc\"\n)\n\nlgbm.fit(X_train, y_train)","221cd05e":"# Predict, Evaluate\nfrom sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_valid, lgbm.predict(X_valid))","7ebcc2b2":"# Fit with promissing data\nlgbm.fit(X, y)","4f477448":"# Predict\ny_pred = lgbm.predict(test)\ny_pred","cf66b53d":"# Submit\nsubmission = pd.DataFrame({\n    'id': test['id'],\n    'target': y_pred\n})\nsubmission.to_csv('submission.csv', index=False)","b25f6353":"# Load data","ecef0872":"# Workflow\n1. Load data\n1. EDA\n1. Data Analysis\n1. Feature Engineering\n1. Modeling\n1. Submit","587135c5":"# Data Analysis","80d3b954":"# Modeling","9ff89755":"# EDA","c48d0893":"# Submit","44df6eac":"# Feature Engineering"}}