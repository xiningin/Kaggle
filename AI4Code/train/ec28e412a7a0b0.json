{"cell_type":{"f66baf45":"code","a96b9520":"code","7f90e488":"code","63240f1a":"code","5aeda970":"code","175ad57b":"code","95b08a68":"code","c843664c":"code","795e7177":"code","0d4cd724":"code","321d3091":"code","8bead441":"code","d2cb4d10":"code","4b2d0704":"code","afad70b5":"code","3d259884":"markdown","545b1e1a":"markdown","5fecec0c":"markdown","5ff422ff":"markdown","df569546":"markdown","02cb88ef":"markdown","61ca55a2":"markdown","24463d21":"markdown"},"source":{"f66baf45":"import numpy as np\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\nimport matplotlib.pyplot as plt\n%pylab inline\nimport pandas as pd\nfrom tqdm import tqdm_notebook\nfrom itertools import product","a96b9520":"train = np.loadtxt('..\/input\/ts-data\/sig1.train')","7f90e488":"test = np.loadtxt('..\/input\/ts-data\/sig1.test.public')","63240f1a":"X_train = train[:, 0]\nind_train = train[:, 1]\nplt.hist(X_train[ind_train == 1], bins=20)\n# plt.gca().set_xscale('log')","5aeda970":"changepoints = np.where(np.diff(ind_train) != 0)[0] + 1","175ad57b":"# \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u0439\ndef normal_likelihood(value, mean_0, mean_8, std):\n    return np.log(scs.norm.pdf(value, mean_0, std) \/ \n                  scs.norm.pdf(value, mean_8, std))","95b08a68":"# \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\nclass Stat(object):\n    def __init__(self, threshold, direction=\"unknown\", init_stat=0.0):\n        self._direction = str(direction)\n        self._threshold = float(threshold)\n        self._stat = float(init_stat)\n        self._alarm = self._stat \/ self._threshold\n    \n    @property\n    def direction(self):\n        return self._direction\n\n    @property\n    def stat(self):\n        return self._stat\n        \n    @property\n    def alarm(self):\n        return self._alarm\n        \n    @property\n    def threshold(self):\n        return self._threshold\n    \n    def update(self, **kwargs):\n        # Statistics may use any of the following kwargs:\n        #   ts - timestamp for the value\n        #   value - original value\n        #   mean - current estimated mean\n        #   std - current estimated std\n        #   adjusted_value - usually (value - mean) \/ std\n        # Statistics call this after updating '_stat'\n        self._alarm = self._stat \/ self._threshold","c843664c":"class MeanExpNoDataException(Exception):\n    pass\n\n# \u041a\u043b\u0430\u0441\u0441, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0433\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\nclass MeanExp(object):\n    def __init__(self, new_value_weight, load_function=median):\n        self._load_function = load_function\n        self._new_value_weight = new_value_weight\n        self.load([])\n\n    @property\n    def value(self):\n        if self._weights_sum <= 1:\n            raise MeanExpNoDataException('self._weights_sum <= 1')\n        return self._values_sum \/ self._weights_sum\n\n    def update(self, new_value, **kwargs):\n        self._values_sum = (1 - self._new_value_weight) * self._values_sum + self._new_value_weight * new_value\n        self._weights_sum = (1 - self._new_value_weight) * self._weights_sum + 1.0\n\n    def load(self, old_values):\n        if old_values:\n            old_values = [value for ts, value in old_values]\n            mean = float(self._load_function(old_values))\n            self._weights_sum = min(float(len(old_values)), 1.0 \/ self._new_value_weight)\n            self._values_sum = mean * self._weights_sum\n        else:\n            self._values_sum = 0.0\n            self._weights_sum = 0.0","795e7177":"class AdjustedCusum(Stat):\n    def __init__(self, mean_diff,\n                 threshold, direction=\"unknown\", init_stat=0.0):\n        self.mean_diff = mean_diff\n        super(AdjustedCusum, self).__init__(threshold, direction, init_stat)\n        \n    def update(self, value):\n        zeta_k = normal_likelihood(value, mean_diff, 0., 1.)\n        self._stat = max(0, self._stat + zeta_k)\n        super(AdjustedCusum, self).update()","0d4cd724":"X_train_fl = X_train.copy()","321d3091":"def clip_by_abs(X, threshold=5):\n    for i, x in enumerate(X):\n        if abs(x) > threshold:\n            X[i] = np.mean([X[i - 1], X[i + 1]])\n    X_max = max(abs(X))\n    if abs(X_max) > threshold:\n        return clip_by_abs(X, threshold)\n    else:\n        return X","8bead441":"X_train_fl = clip_by_abs(X_train_fl, threshold=8)","d2cb4d10":"mean = 0.\nvar = 1.\nalpha = 0.05\nbeta = 0.05\nmean_diff = 1.0\n\nX = X_train_fl\n\nstat_trajectory, mean_values, var_values = [], [], []\n\nmean_exp = MeanExp(new_value_weight=alpha)\nvar_exp = MeanExp(new_value_weight=beta)\ncusum = AdjustedCusum(mean_diff, 30.)\nfor k, x_k in enumerate(X):\n    try:\n        mean_estimate = mean_exp.value\n    except MeanExpNoDataException:\n        mean_estimate = 0.\n    \n    try:\n        var_estimate = var_exp.value\n    except MeanExpNoDataException:\n        var_estimate = 1.\n    \n    adjusted_value = (x_k - mean_estimate) \/ np.sqrt(var_estimate)\n    cusum.update(adjusted_value)\n    \n    mean_exp.update(x_k)\n    diff_value = (x_k - mean) ** 2\n    var_exp.update(diff_value)\n    \n    stat_trajectory.append(cusum._stat)\n    mean_values.append(mean_estimate)\n    var_values.append(np.sqrt(var_estimate))\n\nplot(stat_trajectory)\ngrid()\ntitle('\u0422\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\\n\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0442\u043e\u0447\u043a\u0438 \u0440\u0430\u0437\u043b\u0430\u0434\u043a\u0438')\naxvline(x=changepoints[0], color='r')\naxvline(x=changepoints[1], color='k')\n\nfigure()\nplot(X)\nplot(ind_train * 8)\n\nplot(np.array(mean_values), 'k')\nplot(np.array(mean_values) + np.sqrt(var_values), 'k')\nplot(np.array(mean_values) - np.sqrt(var_values), 'k')\naxvline(x=changepoints[0], color='r')\naxvline(x=changepoints[1], color='k')\ngrid()","4b2d0704":"test_fl = test.copy()\ntest_fl = clip_by_abs(test_fl, threshold=8)","afad70b5":"\n\nX = test_fl\n\nstat_trajectory, mean_values, var_values = [], [], []\n\nmean_exp = MeanExp(new_value_weight=alpha)\nvar_exp = MeanExp(new_value_weight=beta)\ncusum = AdjustedCusum(mean_diff, 30.)\nfor k, x_k in enumerate(X):\n    try:\n        mean_estimate = mean_exp.value\n    except MeanExpNoDataException:\n        mean_estimate = 0.\n    \n    try:\n        var_estimate = var_exp.value\n    except MeanExpNoDataException:\n        var_estimate = 1.\n    \n    adjusted_value = (x_k - mean_estimate) \/ np.sqrt(var_estimate)\n    cusum.update(adjusted_value)\n    \n    mean_exp.update(x_k)\n    diff_value = (x_k - mean) ** 2\n    var_exp.update(diff_value)\n    \n    stat_trajectory.append(cusum._stat)\n    mean_values.append(mean_estimate)\n    var_values.append(np.sqrt(var_estimate))\n\nplot(stat_trajectory)\ngrid()\ntitle('\u0422\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438')\n\n\nfigure()\nplot(X)\n\ngrid()","3d259884":"\u0412\u044b\u0442\u0430\u0449\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0430\u0437\u043b\u0430\u0434\u043a\u0438 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435","545b1e1a":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0447\u0438\u0441\u0442\u0438\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432. ","5fecec0c":"\u0422\u043e\u0447\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0430\u0437\u043b\u0430\u0434\u043a\u0430 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","5ff422ff":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b","df569546":"\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0442\u043e\u0447\u043a\u0430\u0445. \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u044f \u043d\u0443\u0436\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u043e\u0447\u0435\u043a","02cb88ef":"\u041f\u0440\u043e\u0434\u0435\u043b\u0430\u0435\u043c \u0432\u0441\u0451 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","61ca55a2":"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","24463d21":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"}}