{"cell_type":{"7aba53ac":"code","583fc88d":"code","a3cc370e":"code","95a24fde":"code","db3c2b5a":"code","1b1a0a88":"code","90021d88":"code","30e7a174":"code","6be9095d":"code","cbc785b2":"code","ffd4a598":"code","4abfe1f1":"code","02eb5c7f":"code","51d1308e":"code","8841b72f":"code","9889c7c1":"code","5fb00417":"markdown"},"source":{"7aba53ac":"import numpy as np \nimport pandas as pd \n\nimport os\nfrom transformers import *\n\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\n\nimport random\n\nimport torch\nimport torch.nn as nn\n\nfrom torch.utils.data import DataLoader, Dataset\n\nfrom tqdm import tqdm","583fc88d":"def set_seed(seed = 0):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    random_state = np.random.RandomState(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    return random_state\n\nseed = 82\nrandom_state = set_seed(seed)","a3cc370e":"if torch.cuda.is_available():\n    device = torch.device(\"cuda\")\n    print(\"GPU is available\")\nelse:\n    device = torch.device(\"cpu\")\n    print(\"GPU not available, CPU used\")","95a24fde":"train_df = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')","db3c2b5a":"train_df","1b1a0a88":"train_df['excerpt_len'] = train_df.excerpt.apply(lambda x: len(x.split()))","90021d88":"print(train_df.excerpt_len.max())","30e7a174":"def create_folds(data, num_splits):\n    # we create a new column called kfold and fill it with -1\n    data[\"kfold\"] = -1\n    \n    # the next step is to randomize the rows of the data\n    data = data.sample(frac=1, random_state=random_state).reset_index(drop=True)\n\n    # calculate number of bins by Sturge's rule\n    # I take the floor of the value, you can also\n    # just round it\n    num_bins = int(np.floor(1 + np.log2(len(data))))\n    \n    # bin targets\n    data.loc[:, \"bins\"] = pd.cut(\n        data[\"target\"], bins=num_bins, labels=False\n    )\n    \n    # initiate the kfold class from model_selection module\n    kf = StratifiedKFold(n_splits=num_splits)\n    \n    # fill the new kfold column\n    # note that, instead of targets, we use bins!\n    for f, (t_, v_) in enumerate(kf.split(X=data, y=data.bins.values)):\n        data.loc[v_, 'kfold'] = f\n    \n    # drop the bins column\n    data = data.drop(\"bins\", axis=1)\n\n    # return dataframe with folds\n    return data","6be9095d":"#train_df['fold'] = -1\n#gkf = KFold(n_splits=5)\n#for fold, (train, val) in enumerate(gkf.split(train_df.excerpt, train_df.target)):\n#    train_df.loc[val,'fold']=fold\n\ntrain_df = create_folds(train_df, num_splits=5)\n\nfold = 0\nvalidation_df = train_df[train_df.kfold==0].reset_index(drop=True)\ntrain_df = train_df[train_df.kfold!=0].reset_index(drop=True)","cbc785b2":"print(train_df.target.mean(), validation_df.target.mean())","ffd4a598":"class Data(Dataset):\n    def __init__(self, data):\n        super().__init__()\n        self.data = data\n\n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):       \n        excerpt = self.data.excerpt[idx]\n        target = self.data.target[idx]\n        return excerpt, target","4abfe1f1":"train_data = Data(data = train_df) \ntrain_loader = DataLoader(dataset = train_data, shuffle=True, batch_size = 8)\n\nval_data = Data(data = validation_df) \nval_loader = DataLoader(dataset = val_data, shuffle=False, batch_size = 64)","02eb5c7f":"class ReadabilityModel(PreTrainedModel): \n    def __init__(self, conf):\n        super(ReadabilityModel, self).__init__(conf) \n        self.roberta = RobertaModel.from_pretrained(model_name, config=conf)\n        self.drop_out = nn.Dropout(0.1)\n        self.l1 = nn.Linear(768 * 1, 1)\n        torch.nn.init.normal_(self.l1.weight, std=0.02)\n    \n    def forward(self, ids, mask):\n        out = self.roberta(\n            input_ids=ids,\n            attention_mask=mask\n        )\n        out = out['hidden_states']\n        out = out[-1]\n        out = self.drop_out(out)\n        out = torch.mean(out, 1, True)\n        \n        preds = self.l1(out)\n\n        preds = preds.squeeze(-1).squeeze(-1)\n\n        return preds","51d1308e":"model_name = 'roberta-base'\ntokenizer = RobertaTokenizerFast.from_pretrained(model_name)\n\nmodel_config = RobertaConfig.from_pretrained(model_name)\nmodel_config.output_hidden_states = True\n\nmodel = ReadabilityModel(model_config)\nmodel = model.to(device)\n\noptimizer = AdamW(model.parameters(), lr=1e-5, weight_decay=0.01)\nscheduler = get_constant_schedule_with_warmup(optimizer, 100)\n\nloss_fct = nn.MSELoss()\n\nepochs = 6","8841b72f":"for epoch in range(epochs):\n    model.train()\n    for i, (excerpts, targets) in enumerate(tqdm(train_loader)):\n        optimizer.zero_grad()\n        batch = tokenizer(list(excerpts), truncation=True, padding=True, return_tensors='pt', add_special_tokens=True)\n        input_ids = batch['input_ids']\n        input_ids = input_ids.to(device, dtype=torch.long)\n        attention_mask = batch['attention_mask']\n        attention_mask = attention_mask.to(device, dtype=torch.long)\n            \n        targets=torch.tensor(targets).to(device, dtype=torch.float)\n \n        preds = model(input_ids, attention_mask)       \n        \n        loss = torch.sqrt(loss_fct(preds, targets))\n        \n        loss.backward()\n        optimizer.step()\n        scheduler.step()\n        loss = loss.item()\n        \n        if i==0:\n            loss_train = loss\n        else:\n            loss_train = loss_train + loss  \n    loss_train = loss_train\/(i+1)\n    \n    model.eval()\n    with torch.no_grad():\n        for i, (excerpts, targets) in enumerate(tqdm(val_loader)):\n            optimizer.zero_grad()\n            batch = tokenizer(list(excerpts), truncation=True, padding=True, return_tensors='pt', add_special_tokens=True)\n            input_ids = batch['input_ids']\n            input_ids = input_ids.to(device, dtype=torch.long)\n            attention_mask = batch['attention_mask']\n            attention_mask = attention_mask.to(device, dtype=torch.long)\n                \n            targets=torch.tensor(targets).to(device, dtype=torch.float)\n     \n            preds = model(input_ids, attention_mask)       \n            \n            loss = torch.sqrt(loss_fct(preds, targets))\n            loss = loss.item()\n            \n            preds = preds.cpu().detach().numpy()\n            targets = targets.cpu().detach().numpy()\n            if i==0:\n                loss_val = loss\n                preds_val = preds\n                targets_val = targets\n            else:\n                loss_val = loss_val + loss  \n                preds_val = np.concatenate((preds_val,preds), axis=None)\n                targets_val = np.concatenate((targets_val,targets), axis=None)\n                \n        loss_val = loss_val \/ (i+1)\n        rms_val = mean_squared_error(targets_val, preds_val, squared=False)\n        print('Epoch: {} - Loss: {:.6f} - Loss val: {:.6f} - RMSE: {:.3f}'.format(\n            epoch + 1, loss_train, loss_val, rms_val))","9889c7c1":"torch.save(model.state_dict(), 'roberta_baseline.bin')","5fb00417":"Just a very simple baseline applying a RoBerta model to predict the readibility of excerpts. If you have any questions, please let me know.\n\nThe notebook for inference can be found here: https:\/\/www.kaggle.com\/hannes82\/commonlit-readability-roberta-inference\/"}}