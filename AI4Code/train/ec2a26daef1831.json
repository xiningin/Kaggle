{"cell_type":{"14475fbc":"code","10e39968":"code","c2e602fc":"code","64e3259c":"code","62a2ae9f":"code","b14f7bb4":"code","d0c859c7":"code","a3172bfc":"code","856e49f4":"code","9c8ac6cc":"code","8afea7cf":"code","e0dd8894":"code","ac9fe8ea":"code","9c8a4417":"code","ceb465d7":"code","65375793":"code","355aa152":"code","17b8202f":"code","53d8df97":"code","1064a38f":"code","fdd3d584":"markdown","992cbf3a":"markdown","f96d6aab":"markdown","1e28d5c6":"markdown","1e801218":"markdown","ecb84f9d":"markdown","7fae335e":"markdown","82c2a7af":"markdown","50b223a7":"markdown","5d22fc15":"markdown","b9f925ca":"markdown","3680e875":"markdown","f80d860d":"markdown","209d9159":"markdown","472cc935":"markdown","1c4bcf22":"markdown","9c00deb7":"markdown","51ec3e8d":"markdown"},"source":{"14475fbc":"# !pip list | grep numpy\n# !pip list | grep pandas\n!pip install pandas==1.1.3\n!pip install numpy==1.18.5\n\nfrom IPython.core.display import HTML\nHTML(\"<script>Jupyter.notebook.kernel.restart()<\/script>\")","10e39968":"\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nimport warnings\n# current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings('ignore')\nsns.set_style('whitegrid')\n\nimport missingno as msno # missing data visualization module for Python\nimport pandas_profiling\n\nimport gc\nimport datetime\n\n%matplotlib inline\ncolor = sns.color_palette()\npd.set_option('display.max_rows', 10000)\npd.set_option('display.max_columns', 100)\npd.options.display.float_format = '{:.2f}'.format\n# specify encoding to deal with different formats\ndf = pd.read_csv('..\/input\/ecommerce-data\/data.csv', encoding = 'ISO-8859-1')\n# change the column names\ndf.rename(index=str, columns={'InvoiceNo': 'invoice_num',\n                              'StockCode' : 'stock_code',\n                              'Description' : 'description',\n                              'Quantity' : 'quantity',\n                              'InvoiceDate' : 'invoice_date',\n                              'UnitPrice' : 'unit_price',\n                              'CustomerID' : 'cust_id',\n                              'Country' : 'country'}, inplace=True)\n# Checking the missing values in all the columns\n\nprint(\"Missing values in all the columns:\")\nprint(df.isna().sum())\n\n# Replace missing values with a default value\ndf.description.fillna('No description', inplace=True) #inplace will replace the column in same dataframe and wont return a new dataframe\nprint(\"\\nMissing values in all the columns after replacement:\")\nprint(df.isna().sum())\n\n# Replace missing values with a mean value\ndf.cust_id.fillna(np.mean(df.cust_id), inplace=True) \nprint(\"\\nMissing values in all the columns after replacement:\")\nprint(df.isna().sum())\n# change the invoice_date format - String to Timestamp format\ndf['invoice_date'] = pd.to_datetime(df.invoice_date, format='%m\/%d\/%Y %H:%M')\n# change description - UPPER case to LOWER case\ndf['description'] = df.description.str.lower()\n\n# df_new without missing values\ndf_new = df.dropna()\n\n# check missing values for each column \ndf_new.isnull().sum().sort_values(ascending=False)\n\n# change columns tyoe - String to Int type \ndf_new['cust_id'] = df_new['cust_id'].astype('int64')\n\ndf_new = df_new[df_new.quantity > 0]\ndf_new = df_new[df_new.unit_price >= 0]\n\ndf_new['amount_spent'] = df_new['quantity'] * df_new['unit_price']\n\n# rearrange all the columns for easy reference\ndf_new = df_new[['invoice_num','invoice_date','stock_code','description','quantity','unit_price','amount_spent','cust_id','country']]\ndf_new.insert(loc=2, column='year_month', value=df_new['invoice_date'].map(lambda x: 100*x.year + x.month))\ndf_new.insert(loc=3, column='month', value=df_new.invoice_date.dt.month)\n# +1 to make Monday=1.....until Sunday=7\ndf_new.insert(loc=4, column='day', value=(df_new.invoice_date.dt.dayofweek)+1)\ndf_new.insert(loc=5, column='hour', value=df_new.invoice_date.dt.hour)\n\n","c2e602fc":"orders = df_new.groupby(by=['cust_id','country'], as_index=False)['invoice_num'].count()\n\norders = orders.sort_values(by='invoice_num', ascending=False).head()\norders.cust_id = orders.cust_id.astype('str')\nax = orders.plot(kind='bar',x='cust_id', y=\"invoice_num\",color=color[0],figsize=(15,6))\nax.set_xticklabels(orders.cust_id)\nplt.xlabel('Customers ID')\nplt.ylabel('Number of Orders')\nplt.title('Number of Orders for different Customers')\n\n\nplt.show()","64e3259c":"print('The TOP 5 customers with most number of orders...')\norders.sort_values(by='invoice_num', ascending=False).head()","62a2ae9f":"money_spent = df_new.groupby(by=['cust_id','country'], as_index=False)['amount_spent'].sum()\n\nmoney_spent = money_spent.sort_values(by='amount_spent', ascending=False).head()\nmoney_spent.cust_id = money_spent.cust_id.astype('str')\nax = money_spent.plot(kind='bar',x='cust_id', y=\"amount_spent\",color=color[0],figsize=(15,6))\nax.set_xticklabels(money_spent.cust_id)\nplt.xlabel('Customers ID')\nplt.ylabel('Money spent (Dollar)')\nplt.title('Money Spent by different Customers')\n\nax.ticklabel_format(useOffset=False, style='plain', axis='y') # Used to prevent exponential notation in y-axis ticks\n\nplt.show()","b14f7bb4":"print('The top 5 customers with highest money spent...')\nprint(money_spent.sort_values(by='amount_spent', ascending=False).head())","d0c859c7":"ax = df_new.groupby('invoice_num')['year_month'].unique().value_counts().sort_index().plot(kind='bar',color=color[0],figsize=(15,6))\nax.set_xlabel('Month',fontsize=15)\nax.set_ylabel('Number of Orders',fontsize=15)\nax.set_title('Number of orders for different Months (1st Dec 2010 - 9th Dec 2011)',fontsize=15)\nax.set_xticklabels(('Dec_10','Jan_11','Feb_11','Mar_11','Apr_11','May_11','Jun_11','July_11','Aug_11','Sep_11','Oct_11','Nov_11','Dec_11'), rotation='horizontal', fontsize=13)\nplt.show()","a3172bfc":"ax = df_new.groupby('invoice_num')['day'].unique().value_counts().sort_index().plot(kind='bar',color=color[0],figsize=(15,6))\nax.set_xlabel('Day of the week',fontsize=15)\nax.set_ylabel('Number of Orders',fontsize=15)\nax.set_title('Number of orders for different Days',fontsize=15)\nax.set_xticklabels(('Mon','Tue','Wed','Thu','Fri','Sun'), rotation='horizontal', fontsize=15)\nplt.show()","856e49f4":"ax = df_new.groupby('invoice_num')['hour'].unique().value_counts().iloc[:-1].sort_index().plot(kind='bar',color=color[0],figsize=(15,6))\nax.set_xlabel('Hour',fontsize=15)\nax.set_ylabel('Number of Orders',fontsize=15)\nax.set_title('Number of orders for different Hours',fontsize=15)\nax.set_xticklabels(range(6,21), rotation='horizontal', fontsize=15)\nplt.show()","9c8ac6cc":"df_new.unit_price.describe()","8afea7cf":"# check the distribution of unit price\nplt.subplots(figsize=(12,6))\nsns.boxplot(df_new.unit_price)\nplt.show()","e0dd8894":"df_free = df_new[df_new.unit_price == 0]","ac9fe8ea":"df_free.head()","9c8a4417":"df_free.year_month.value_counts().sort_index()","ceb465d7":"\nax = df_free.year_month.value_counts().sort_index().plot(kind='bar',figsize=(12,6), color=color[0])\nax.set_xlabel('Month',fontsize=15)\nax.set_ylabel('Frequency',fontsize=15)\nax.set_title('Frequency for different Months (Dec 2010 - Dec 2011)',fontsize=15)\nax.set_xticklabels(('Dec_10','Jan_11','Feb_11','Mar_11','Apr_11','May_11','June_11','July_11','Aug_11','Sep_11','Oct_11','Nov_11','Dec_11'), rotation='horizontal', fontsize=13)\nplt.show()","65375793":"df_new.head()","355aa152":"group_country_orders = df_new.groupby('country')['invoice_num'].count().sort_values()\n# del group_country_orders['United Kingdom']\n\n# plot number of unique customers in each country (with UK)\nplt.subplots(figsize=(15,8))\ngroup_country_orders.plot(kind='barh', fontsize=12, color=color[0])\nplt.xlabel('Number of Orders', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.title('Number of Orders for different Countries', fontsize=12)\nplt.show()","17b8202f":"group_country_orders = df_new.groupby('country')['invoice_num'].count().sort_values()\ndel group_country_orders['United Kingdom']\n\n# plot number of unique customers in each country (without UK)\nplt.subplots(figsize=(15,8))\ngroup_country_orders.plot(kind='barh', fontsize=12, color=color[0])\nplt.xlabel('Number of Orders', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.title('Number of Orders for different Countries', fontsize=12)\nplt.show()","53d8df97":"group_country_amount_spent = df_new.groupby('country')['amount_spent'].sum().sort_values()\n# del group_country_orders['United Kingdom']\n\n# plot total money spent by each country (with UK)\nplt.subplots(figsize=(15,8))\ngroup_country_amount_spent.plot(kind='barh', fontsize=12, color=color[0])\nplt.xlabel('Money Spent (Dollar)', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.title('Money Spent by different Countries', fontsize=12)\nplt.show()","1064a38f":"group_country_amount_spent = df_new.groupby('country')['amount_spent'].sum().sort_values()\ndel group_country_amount_spent['United Kingdom']\n\n# plot total money spent by each country (without UK)\nplt.subplots(figsize=(15,8))\ngroup_country_amount_spent.plot(kind='barh', fontsize=12, color=color[0])\nplt.xlabel('Money Spent (Dollar)', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.title('Money Spent by different Countries', fontsize=12)\nplt.show()","fdd3d584":"### Check TOP 5 most number of orders","992cbf3a":"## How much money spent by the customers?","f96d6aab":"### Check top 5 highest money spenders","1e28d5c6":"## How many orders (per day)?","1e801218":"# Discover patterns for Number of Orders\nCredit: https:\/\/www.kaggle.com\/hendraherviawan\/customer-purchasing-patterns","ecb84f9d":" ## How many orders (per hour)?\n","7fae335e":"# Context of Dataset\nCompany - UK-based and registered non-store online retail\n\nProducts for selling - Mainly all-occasion gifts\n\nCustomers - Most are wholesalers (local or international)\n\nTransactions Period - **1st Dec 2010 - 9th Dec 2011 (One year)**","82c2a7af":"**We see that there are unit price = 0 (FREE items)**\n\n<span class=\"mark\">There are some free items given to customers from time to time<\/span>.","50b223a7":"## How many orders placed by the customers?","5d22fc15":"## How many orders for each country?","b9f925ca":"* #  *Loading the dataset & preparing dataframe for EDA*\n\nIMPORTANT: Run the below cell & go to \"Run-> Restart & clear cell outputs\", before proceeding further","3680e875":"# Discover patterns for each Country","f80d860d":"## How much money spent by each country?","209d9159":"## How many orders (per month)?","472cc935":"# Results obtained from Exploratory Data Analysis (EDA)\n\n1. The **customer with the highest number of orders comes from the United Kingdom (UK)** \n2. The **customer with the highest money spent on purchases comes from Netherlands** \n3. The company receives the highest number of orders from customers in the UK (since it is a UK-based company). Therefore, the TOP 5 countries (including UK) that place the highest number of orders are as below: \n    - United Kingdom \n\t- Germany \n\t- France\n\t- Ireland (EIRE)\n\t- Spain\n4. As the company receives the highest number of orders from customers in the UK (since it is a UK-based company), customers in the UK spend the most on their purchases. Therefore, the TOP 5 countries (including UK) that spend the most money on purchases are as below: \n    - United Kingdom \n\t- Netherlands\n\t- Ireland (EIRE)\n\t- Germany\n\t- France\n5. **November 2011 has the highest sales** \n\t- The month with the lowest sales is undetermined as the dataset consists of transactions until 9th December 2011 in December \n6. There are **no transactions on Saturday** between 1st Dec 2010 - 9th Dec 2011 \n7. The number of orders received by the company tends to increases from Monday to Thursday and decrese afterward\n8. The company receives the **highest number of orders at 12:00pm** \n\t- Possibly most customers made purchases during **lunch hour between 12:00pm - 2:00pm**\n9. The company tends to **give out FREE items for purchases occasionally each month (Except June 2011)** \n\t- However, it is not clear what factors contribute to giving out the FREE items to the particular customers ","1c4bcf22":"# Discover patterns for Unit Price","9c00deb7":"# Exploratory Data Analysis (EDA)","51ec3e8d":"**Not clear why there are FREE items given to certain customers**\n- On average, the company <span class=\"mark\">gave out 2-4 times FREE items<\/span> to customers <span class=\"mark\">each month (Except in June 2011)<\/span>"}}