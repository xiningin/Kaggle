{"cell_type":{"21a79027":"code","d2dc63a0":"code","e4df39bb":"code","7ceb38ee":"code","f9bab6f9":"code","03193059":"code","579f62be":"code","27c140bb":"code","89090d5c":"code","365aaaf6":"code","e8134623":"code","c84792d1":"markdown"},"source":{"21a79027":"!pip install timm","d2dc63a0":"import math\nimport timm\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nfrom pathlib import Path\nfrom PIL import Image\nfrom fastai.vision.all import *\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","e4df39bb":"ROOT = Path('..\/input\/petfinder-pawpularity-score')\nTRAIN_IMG_PATH = ROOT \/ 'train'\n\nID_COL = 'Id'\nTARGET_COL = 'Pawpularity'\n\nSEED = 42\nIMG_SIZE = 224\nBATCH_SIZE = 128\nN_EPOCHS = 3\nN_SPLITS = 5\n# Tensorflow EfficientNet B0 Noisy-Student\nMODEL_NAME = 'tf_efficientnet_b0_ns'","7ceb38ee":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(SEED)","f9bab6f9":"train_df = pd.read_csv(ROOT \/ 'train.csv')\ntarget = train_df[TARGET_COL]\ntrain_df.head()","03193059":"train_transform = A.Compose([\n    A.RandomResizedCrop(IMG_SIZE, IMG_SIZE, scale=(0.85, 1.1)),\n    A.RandomRotate90(),\n    A.Flip(),\n    A.Transpose(),\n    A.Normalize(\n        mean=[0.485, 0.456, 0.406],\n        std=[0.229, 0.224, 0.225],\n    ),\n    ToTensorV2(),\n])\n\nvalid_transform = A.Compose([\n    A.Resize(IMG_SIZE, IMG_SIZE),\n    A.Normalize(\n        mean=[0.485, 0.456, 0.406],\n        std=[0.229, 0.224, 0.225],\n    ),\n    ToTensorV2(),\n])","579f62be":"class PetDataset(Dataset):\n    def __init__(self, df, data_dir, transform=None, mode='train'):\n        self.df = df\n        self.data_dir = data_dir\n        self.transform = transform\n        self.mode = mode\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, idx):\n        row = self.df.iloc[idx]\n        img_path = self.data_dir \/ f'{row[ID_COL]}.jpg'\n        img = np.array(Image.open(img_path).convert('RGB'))\n        if self.transform is not None:\n            img = self.transform(image=img)['image']\n        tgt = row[TARGET_COL] if self.mode == 'train' else 0\n        return img.float().to(device), torch.tensor(tgt).float().to(device)","27c140bb":"class CustomModel(nn.Module):\n    def __init__(self, model_name=MODEL_NAME, pretrained=True):\n        super(CustomModel, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        self.model.global_pool = nn.Identity()\n        self.model.classifier = nn.Identity()\n        self.head = create_head(self.model.num_features, 1)\n        self.act = nn.ReLU()\n        \n    def forward(self, x):\n        x = self.model(x)\n        x = self.head(x)\n        x = self.act(x)\n        return x","89090d5c":"kfold = KFold(n_splits=N_SPLITS, random_state=SEED, shuffle=True)\noof_pred = torch.zeros(len(train_df))\ncriterion = MSELossFlat()\nfor fold, (train_idx, valid_idx) in enumerate(kfold.split(train_df)):\n    print('='*5, f'Start Fold: {fold}', '='*5)\n    train_x, valid_x = train_df.loc[train_idx], train_df.loc[valid_idx]\n    \n    train_ds, valid_ds = PetDataset(train_x, TRAIN_IMG_PATH, train_transform), PetDataset(valid_x, TRAIN_IMG_PATH, valid_transform)\n    train_dl = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True)\n    valid_dl = DataLoader(valid_ds, batch_size=BATCH_SIZE, shuffle=False)\n    dls = DataLoaders(train_dl, valid_dl)\n    \n    model = CustomModel(MODEL_NAME).to(device)\n    learner = Learner(dls, model, loss_func=criterion, metrics=rmse)\n    learner.fine_tune(N_EPOCHS)\n    \n    pred, tgt = learner.get_preds(dl=valid_dl)\n    oof_pred[valid_idx] = pred.detach().cpu().view(-1)\n    \n    print(f'Fold: {fold}, RMSE: {mean_squared_error(tgt, pred, squared=False)}')\n    \n    learner.save(f'learner_fold_{fold}')\n    torch.save(learner.model.state_dict(), f'.\/fold_{fold}.pth')\n    \n    torch.cuda.empty_cache()","365aaaf6":"print(f'CV Score = {mean_squared_error(target, oof_pred, squared=False)}')","e8134623":"plt.figure(figsize=(10, 6))\nplt.hist(target, bins=30)\nplt.hist(oof_pred.numpy(), bins=30)","c84792d1":"### Forked from https:\/\/www.kaggle.com\/alibaba19\/fast-ai-training-pipeline"}}