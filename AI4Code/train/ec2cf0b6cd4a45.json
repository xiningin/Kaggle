{"cell_type":{"bbe1c815":"code","6b319a31":"code","f170a491":"code","5cd72c7c":"code","12b15039":"code","a1d968cf":"code","2cbc0d14":"code","36ca568b":"code","8a2b5be3":"code","6574a961":"code","40fa0a4e":"code","f1c0827d":"code","e8b21da8":"code","79530f8e":"code","fae4f988":"code","a66dd673":"code","093f8e7a":"code","f09fc788":"code","af0bd034":"code","c7214740":"code","04331018":"code","56b6941b":"code","b81648e6":"code","50ba303a":"code","91c8ac18":"code","cc738e5e":"code","a2f2b481":"code","9b2db983":"code","a17c2ba7":"code","93ad445d":"code","fd90c67f":"code","686d1bfb":"code","81bf979c":"code","cb897f15":"code","2da38baf":"code","73ffd335":"code","46a66b1d":"code","d6041adb":"code","9c172624":"code","31bdda57":"code","e439976b":"code","2975c911":"code","28be32b8":"code","b5490ac9":"code","05fdadcc":"code","e7083c6e":"markdown","b29075e1":"markdown","506cadc6":"markdown","2df64c22":"markdown","a7fe86fa":"markdown","158ea7d1":"markdown","2db7c5df":"markdown","785d2009":"markdown","bd6ce9e6":"markdown","b2af059e":"markdown"},"source":{"bbe1c815":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b319a31":"#Importing required libraries and packages\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","f170a491":"train=pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv')\ntrain.head()","5cd72c7c":"test=pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv')\ntest.head()","12b15039":"xtrain=train[train.columns.difference(['target'])]\nxtrain.head()","a1d968cf":"ytrain=train['target']\n","2cbc0d14":"train.info","36ca568b":"test.info","8a2b5be3":"test.nunique()","6574a961":"train.nunique()","40fa0a4e":"print(train.cat0.value_counts())\nprint(train.cat1.value_counts())\nprint(train.cat2.value_counts())\nprint(train.cat3.value_counts())\nprint(train.cat4.value_counts())\nprint(train.cat5.value_counts())\nprint(train.cat6.value_counts())\nprint(train.cat7.value_counts())\nprint(train.cat8.value_counts())\nprint(train.cat9.value_counts())","f1c0827d":"print(test.cat0.value_counts())\nprint(test.cat1.value_counts())\nprint(test.cat2.value_counts())\nprint(test.cat3.value_counts())\nprint(test.cat4.value_counts())\nprint(test.cat5.value_counts())\nprint(test.cat6.value_counts())\nprint(test.cat7.value_counts())\nprint(test.cat8.value_counts())\nprint(test.cat9.value_counts())","e8b21da8":"\n\ndummy1=pd.get_dummies(xtrain['cat0'])\nxtrain=xtrain.join(dummy1,how='left',rsuffix='_cat0')\ndummy2=pd.get_dummies(test['cat0'])\ntest=test.join(dummy2,how='left',rsuffix='_cat0')\n\nxtrain.head()","79530f8e":"test.head()","fae4f988":"dummy1=pd.get_dummies(xtrain['cat1'])\nxtrain=xtrain.join(dummy1,how='left',rsuffix='_cat1')\ndummy2=pd.get_dummies(test['cat1'])\ntest=test.join(dummy2,how='left',rsuffix='_cat1')\n\nxtrain.head()","a66dd673":"dummy1=pd.get_dummies(xtrain['cat2'])\nxtrain=xtrain.join(dummy1,how='left',rsuffix='_cat2')\ndummy2=pd.get_dummies(test['cat2'])\ntest=test.join(dummy2,how='left',rsuffix='_cat2')\n\nxtrain.head()","093f8e7a":"xtrain.drop('cat0',axis=1,inplace=True)\nxtrain.drop('cat1',axis=1,inplace=True)\nxtrain.drop('cat2',axis=1,inplace=True)\nxtrain.head()","f09fc788":"test.drop('cat0',axis=1,inplace=True)\ntest.drop('cat1',axis=1,inplace=True)\ntest.drop('cat2',axis=1,inplace=True)\ntest.head()","af0bd034":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat3')['target'].mean().to_dict()","c7214740":"xtrain['c3enc'] = xtrain['cat3'].map(target_mapper)\ntest['c3enc'] = test['cat3'].map(target_mapper)","04331018":"xtrain.drop('target',axis=1,inplace=True) ","56b6941b":"xtrain.head()","b81648e6":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat4')['target'].mean().to_dict()\nxtrain['c4enc'] = xtrain['cat4'].map(target_mapper)\ntest['c4enc'] = test['cat4'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","50ba303a":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat5')['target'].mean().to_dict()\nxtrain['c5enc'] = xtrain['cat5'].map(target_mapper)\ntest['c5enc'] = test['cat5'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","91c8ac18":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat6')['target'].mean().to_dict()\nxtrain['c6enc'] = xtrain['cat6'].map(target_mapper)\ntest['c6enc'] = test['cat6'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","cc738e5e":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat7')['target'].mean().to_dict()\nxtrain['c7enc'] = xtrain['cat7'].map(target_mapper)\ntest['c7enc'] = test['cat7'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","a2f2b481":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat8')['target'].mean().to_dict()\nxtrain['c8enc'] = xtrain['cat8'].map(target_mapper)\ntest['c8enc'] = test['cat8'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","9b2db983":"xtrain['target'] = ytrain\ntarget_mapper = xtrain.groupby('cat9')['target'].mean().to_dict()\nxtrain['c9enc'] = xtrain['cat9'].map(target_mapper)\ntest['c9enc'] = test['cat9'].map(target_mapper)\nxtrain.drop('target',axis=1,inplace=True) ","a17c2ba7":"xtrain.head()","93ad445d":"test.head()","fd90c67f":"xtrain.drop('cat3',axis=1,inplace=True)\nxtrain.drop('cat4',axis=1,inplace=True)\nxtrain.drop('cat5',axis=1,inplace=True)\nxtrain.drop('cat6',axis=1,inplace=True)\nxtrain.drop('cat7',axis=1,inplace=True)\nxtrain.drop('cat8',axis=1,inplace=True)\nxtrain.drop('cat9',axis=1,inplace=True)\n\nxtrain.head()","686d1bfb":"test.drop('cat3',axis=1,inplace=True)\ntest.drop('cat4',axis=1,inplace=True)\ntest.drop('cat5',axis=1,inplace=True)\ntest.drop('cat6',axis=1,inplace=True)\ntest.drop('cat7',axis=1,inplace=True)\ntest.drop('cat8',axis=1,inplace=True)\ntest.drop('cat9',axis=1,inplace=True)\ntest.head()","81bf979c":"xtrain.drop('id',axis=1,inplace=True)\nxtrain.head()","cb897f15":"tid=test.id\ntid","2da38baf":"test.drop('id',axis=1,inplace=True)\ntest.head()","73ffd335":"xtrain = xtrain.reindex(sorted(xtrain.columns), axis=1)\nxtrain.head()","46a66b1d":"test = test.reindex(sorted(test.columns), axis=1)\ntest.head()","d6041adb":"# Defining Lists to Store in the Results and Names of Algorithms\nMSE_Score = []\nR2_Score = []\nRMSE_Score=[]\nAlgorithm = []","9c172624":"# Fitting Simple Linear Regression to the Training Set\nAlgorithm.append('Linear Regression')\nclf = LinearRegression()\nclf.fit(xtrain, ytrain)\n\n# Predicting the train Set Results\npredicted = clf.predict(xtrain)\n\n# Appending the Scores For Visualisation at a Later Part\nMSE_Score.append(mean_squared_error(ytrain, predicted))\nR2_Score.append(r2_score(ytrain, predicted))\nRMSE_Score.append(mean_squared_error(ytrain, predicted, squared=False))","31bdda57":"# Fitting Decision Tree to the Training Set\nAlgorithm.append('Decision Tree Regressor')\nclf = DecisionTreeRegressor(random_state=0, max_depth=5)\nclf.fit(xtrain, ytrain)\n\n# Predicting the Train Set Results\npredicted = clf.predict(xtrain)\n\n# Appending the Scores For Visualisation at a Later Part\nMSE_Score.append(mean_squared_error(ytrain, predicted))\nR2_Score.append(r2_score(ytrain, predicted))\nRMSE_Score.append(mean_squared_error(ytrain, predicted, squared=False))","e439976b":"# Fitting Random Forest Regressor Tree to the Training Set\nAlgorithm.append('Random Forest Regressor')\nclf = RandomForestRegressor(n_estimators=10,max_depth=5)\nclf.fit(xtrain, ytrain)\n\n# Predicting the Train Set Results\npredicted = clf.predict(xtrain)\n\n# Appending the Scores For Visualisation at a Later Part\nMSE_Score.append(mean_squared_error(ytrain, predicted))\nR2_Score.append(r2_score(ytrain, predicted))\nRMSE_Score.append(mean_squared_error(ytrain, predicted, squared=False))\n","2975c911":"# Fitting XGBoost Regressor to the Training Set\nAlgorithm.append('XGB Regressor')\nclf = xgb.XGBRegressor(random_state=0, n_estimators=500, learning_rate=0.1)\nclf.fit(xtrain, ytrain)\n\n# Predicting the Train Set Results\npredicted = clf.predict(xtrain)\n\n# Appending the Scores For Visualisation at a Later Part\nMSE_Score.append(mean_squared_error(ytrain, predicted))\nR2_Score.append(r2_score(ytrain, predicted))\nRMSE_Score.append(mean_squared_error(ytrain, predicted, squared=False))","28be32b8":"# Just Combining the Lists into a DataFrame for a Better Visualisation\nComparison_train = pd.DataFrame(list(zip(Algorithm, MSE_Score, R2_Score,RMSE_Score)), columns = ['Algorithms', 'MSE_Train', 'R2_Train','RMSE_Train'])\n# Score Card\nComparison_train","b5490ac9":"clf = xgb.XGBRegressor(random_state=0, n_estimators=500, learning_rate=0.1)\nclf.fit(xtrain, ytrain)\n\npredictions = clf.predict(test)\npredictions\n","05fdadcc":"\noutput = pd.DataFrame({'id': tid, 'target': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","e7083c6e":"**Report Card:**","b29075e1":"**Computing Scores for Various Models and Selecting the best one**","506cadc6":"**XGBoost is the best according to above RMSE scores so we select it to predict our final values**","2df64c22":"**One Hot Encoding Cat0, Cat1, Cat2**","a7fe86fa":"**Checking Unique Values**","158ea7d1":"**TARGET ENCODING ON Cat3 to Cat9 since categories are more to be handled in OHE**","2db7c5df":"# Predictions\n","785d2009":"# **ENCODING CATEGORICAL VALUES**","bd6ce9e6":"**Checking Value Counts of categories in train set**","b2af059e":"**Checking Value Counts of categories in test set**"}}