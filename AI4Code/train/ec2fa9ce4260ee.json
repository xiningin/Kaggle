{"cell_type":{"2e0f1b74":"code","8f1277e8":"code","944c620e":"code","4d9f504a":"code","c295733a":"code","884f8ce2":"code","366ebd84":"code","dd703fee":"code","ba8f2b2f":"code","7281e212":"code","ee289982":"code","c955d5fd":"code","6026c976":"code","3086ec61":"code","838b5e10":"code","743106f1":"code","ee640235":"code","beca86e4":"code","1daa4745":"code","1c4e71aa":"code","94e14534":"code","b5835814":"code","9a5ec9f9":"code","37a88dc3":"code","a21e7892":"code","165b92b0":"code","5871a5c5":"code","9306ee9b":"code","096d41e1":"code","cccc5a76":"code","b54026ce":"code","c635d022":"code","0c9d233b":"code","5775918d":"code","2ef11ba6":"code","4236ce24":"code","93a05a3f":"code","5ee8deef":"code","194cda93":"code","ece9e887":"markdown","de711ee3":"markdown","95362bb3":"markdown","20a00c8f":"markdown","8e873a5d":"markdown","2ed5ddcd":"markdown","4dc4c4f5":"markdown","b93b425a":"markdown","1caa8459":"markdown","47bee954":"markdown","9a156aeb":"markdown","43f944f2":"markdown","407d8d79":"markdown","31e55034":"markdown","f936cb75":"markdown","030e9cbd":"markdown","61a0353b":"markdown","36c6c83d":"markdown","fc3cb00b":"markdown","2d985718":"markdown","4a18cc88":"markdown","cead8aca":"markdown","bd5a8442":"markdown","f93e21ff":"markdown","dac7f7a8":"markdown"},"source":{"2e0f1b74":"# Basic\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom matplotlib import cm\nimport seaborn as sns \nimport plotly as py\nimport plotly.graph_objs as go\n\n# Tools\nfrom sklearn.preprocessing import LabelEncoder\n\n# Cluster Visualization\nfrom scipy.cluster.hierarchy import dendrogram, ward\nfrom sklearn.decomposition import PCA as PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import silhouette_samples\n\n# Cluster Algorithms\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering as AggClus\nimport scipy.cluster.hierarchy as sch\n\n# Defaults\nimport warnings\nimport os\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected = True)\n%matplotlib inline\n#plt.rcParams['figure.figsize'] = (16, 9)\n#plt.style.use('ggplot')","8f1277e8":"print(os.listdir(\"..\/input\"))","944c620e":"df = pd.read_csv('..\/input\/Mall_Customers.csv')","4d9f504a":"df.shape","c295733a":"df.columns","884f8ce2":"Id = df['CustomerID']","366ebd84":"df = df.drop(['CustomerID'], axis=1)","dd703fee":"df.info()","ba8f2b2f":"df.head()","7281e212":"df.describe().transpose()","ee289982":"sns.countplot(y = 'Gender' , data = df)","c955d5fd":"sns.pairplot(df, hue=\"Gender\")","6026c976":"plt.figure(1, figsize = (25,25) )\nn = 0\n\nfor x in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:\n    for y in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:\n        if( x != y ):\n            n = n + 1\n            plt.subplot(3, 3, n)\n            plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n            for gender in ['Male', 'Female']:\n                sns.regplot(x = x, y = y, data = df[ df['Gender'] == gender ], label = gender)\n                plt.title(\"{} vs {} wrt Gender\".format(x,y))\n                \nplt.legend()\nplt.show()","3086ec61":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor cols in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1 \n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    sns.violinplot(x = cols , y = 'Gender' , data = df , palette = 'vlag')\n    sns.swarmplot(x = cols , y = 'Gender' , data = df)\n    plt.ylabel('Gender' if n == 1 else '')\n    plt.title('Boxplots & Swarmplots' if n == 2 else '')\nplt.show()","838b5e10":"fig = plt.figure(figsize=(15,15))\nax1 = fig.add_subplot(3,3,1)\nsns.barplot(y='Age',x='Gender', data=df);\nax2 = fig.add_subplot(3,3,2)\nsns.barplot(y='Annual Income (k$)',x='Gender', data=df);\nax3 = fig.add_subplot(3,3,3)\nsns.barplot(y='Spending Score (1-100)',x='Gender', data=df);","743106f1":"# Option 1\n'''le = LabelEncoder()\ndf['Gender'] = le.fit_transform(df['Gender'])'''","ee640235":"# Option 2\ndf = df.drop(['Gender'], axis=1)","beca86e4":"# Annual Income and spending Score\nX2 = df[['Annual Income (k$)' , 'Spending Score (1-100)']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X2)\n    inertia.append(algorithm.inertia_)","1daa4745":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","1c4e71aa":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X2)\nlabels2 = algorithm.labels_\ncentroids2 = algorithm.cluster_centers_","94e14534":"h = 0.02\nx_min, x_max = X2[:, 0].min() - 1, X2[:, 0].max() + 1\ny_min, y_max = X2[:, 1].min() - 1, X2[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","b5835814":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ2 = Z2.reshape(xx.shape)\nplt.imshow(Z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Annual Income (k$)' ,y = 'Spending Score (1-100)' , data = df , c = labels2 , \n            s = 200 )\nplt.scatter(x = centroids2[: , 0] , y =  centroids2[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Annual Income (k$)')\nplt.show()","9a5ec9f9":"X = df.iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X)\n    inertia.append(algorithm.inertia_)","37a88dc3":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","a21e7892":"algorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X)\nlabels = algorithm.labels_\ncentroids = algorithm.cluster_centers_","165b92b0":"df['label'] =  labels\ntrace1 = go.Scatter3d(\n    x= df['Age'],\n    y= df['Spending Score (1-100)'],\n    z= df['Annual Income (k$)'],\n    mode='markers',\n     marker=dict(\n        color = df['label'], \n        size= 20,\n        line=dict(\n            color= df['label'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n#     margin=dict(\n#         l=0,\n#         r=0,\n#         b=0,\n#         t=0\n#     )\n    title= 'Clusters',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n        )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","5871a5c5":"pca = PCA(n_components=2)\npca.fit(df)\nXpca = pca.transform(df)\nsns.set()\nplt.figure(figsize=(8,8))\nplt.scatter(Xpca[:,0],Xpca[:,1], c='Red')\nplt.show()","9306ee9b":"tsn = TSNE()\nres_tsne = tsn.fit_transform(df)\nplt.figure(figsize=(8,8))\nplt.scatter(res_tsne[:,0],res_tsne[:,1]);","096d41e1":"fig = plt.figure(figsize=(20,20))\nax1 = fig.add_subplot(3,3,1)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=df['Spending Score (1-100)']);\nax2 = fig.add_subplot(3,3,2)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=df['Annual Income (k$)']);\nax3 = fig.add_subplot(3,3,3)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=df['Age']);","cccc5a76":"sns.set(style='white')\nplt.figure(figsize=(10,7))\nlink = ward(res_tsne)\ndendrogram(link)\nax = plt.gca()\nbounds = ax.get_xbound()\nax.plot(bounds, [30,30],'--', c='k')\nax.plot(bounds,'--', c='k')\nplt.show()","b54026ce":"clus_mod = AggClus(n_clusters=6)\nassign = clus_mod.fit_predict(df)\nplt.figure(figsize=(8,8))\nsns.set(style='darkgrid',palette='muted')\ncmap = sns.cubehelix_palette(dark=.3, light=.8, as_cmap=True)\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=assign, palette='Set1');","c635d022":"def clust_sill(num):\n    fig = plt.figure(figsize=(25,20))\n    ax1 = fig.add_subplot(3,3,1)\n\n    clus_mod = AggClus(n_clusters=num)\n    assign = clus_mod.fit_predict(df)\n    sns.set(style='darkgrid',palette='muted')\n    cmap = sns.cubehelix_palette(dark=.3, light=.8, as_cmap=True)\n    sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=assign, palette='copper');\n    cluster_labels=np.unique(assign)\n    n_clusters = len(np.unique(assign))\n    silhouette_vals = silhouette_samples(res_tsne, assign, metric='euclidean')\n\n    y_ax_lower, y_ax_upper = 0, 0\n    yticks = []\n    ax2 = fig.add_subplot(3,3,2)\n    for i , c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[assign==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i) \/ n_clusters)\n        plt.barh(range(y_ax_lower,y_ax_upper),\n                c_silhouette_vals,height=1.0,edgecolor='none',color=color)\n        yticks.append((y_ax_lower+y_ax_upper) \/ 2)\n        y_ax_lower += len(c_silhouette_vals)\n    silhouette_avg = np.mean(silhouette_vals)\n    \n    plt.title(str(num)+ ' Clusters')\n    plt.axvline(silhouette_avg,color=\"red\",linestyle= \"--\")\n    plt.yticks(yticks , cluster_labels + 1)\n    plt.ylabel ('Cluster')\n    plt.xlabel('Silhouette coefficient')","0c9d233b":"clust_sill(3)\nclust_sill(4)\nclust_sill(5)\nclust_sill(6)\nclust_sill(7)","5775918d":"cluster_labels=np.unique(assign)\nn_clusters = len(np.unique(assign))\nsilhouette_vals = silhouette_samples(res_tsne, assign, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nplt.figure(figsize=(10,8))\nfor i , c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[assign==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i) \/ n_clusters)\n        plt.barh(range(y_ax_lower,y_ax_upper),\n                c_silhouette_vals,height=1.0,edgecolor='none',color=color)\n        yticks.append((y_ax_lower+y_ax_upper) \/ 2)\n        y_ax_lower += len(c_silhouette_vals)\nsilhouette_avg = np.mean(silhouette_vals)\n\nplt.axvline(silhouette_avg,color=\"red\",linestyle= \"--\")\nplt.yticks(yticks , cluster_labels + 1)\nplt.ylabel ('Cluster')\nplt.xlabel('Silhouette coefficient')","2ef11ba6":"df['predict'] = pd.DataFrame(assign)","4236ce24":"df.head(3)","93a05a3f":"sns.boxplot(y='Spending Score (1-100)',x='predict',data=df);","5ee8deef":"model = pd.DataFrame()\nmodel['age'] = df['Age'].groupby(df['predict']).median()\nmodel['annual income'] = df['Annual Income (k$)'].groupby(df['predict']).median()\nmodel['spending score'] = df['Spending Score (1-100)'].groupby(df['predict']).median()\nmodel.reset_index(inplace=True)","194cda93":"model","ece9e887":"We can see the algoritm well caught the Annual Income - Spending Score relation.","de711ee3":"# Customer Segmentation","95362bb3":"## PCA","20a00c8f":"**If that's helpfull, please upvote!**","8e873a5d":"The least square method is a natural way of visualisating both two-dimensional (pair or coupled segmentation) and 3D clusters.","2ed5ddcd":"Gender plays no to little regarding Spending Score.","4dc4c4f5":"**Table of content**\n\n1. EDA\n2. Clustering with K-means\n    * Pair Segmentation\n    * 3D Visualization\n3. PCA\n4. Hierarchial Clustering\n    * Dendogram\n    * Agglomerative Clustering\n5. TSNE\n6. Silulete Graphs\n7. Prediction\n8. Group Characteristics","b93b425a":"### Dendograms","1caa8459":"## K- means","47bee954":"## LOAD DATA","9a156aeb":"## Predict","43f944f2":"Guassian Mixture and DBSCAN to come, so say tuned!","407d8d79":"![](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_cluster_comparison_0011.png)","31e55034":"TSNE is a usefull technique for visualisating high-dimensionality data. The t-SNE algorithm is interesting because it uses joint probability distributions to describe the closeness of data points.","f936cb75":"### Pair segmentation (example)","030e9cbd":"### 3D","61a0353b":"## Characteristics","36c6c83d":"### Agglomerative Clustering","fc3cb00b":"## t-SNE","2d985718":"## Exploratory Data Analysis (EDA)","4a18cc88":"I've attempted to create a comprehensive framework for customer segmentation here, which I hope will help you speed up your project by from weeks to months.\n\nThe two most popular algorithms for customer segmentation are k-means and hiearchial clustering. Scatter plots or 3D plots are usefull for visualization of low-dimensionality data or a mutual dependance of two attributes, Principal Component Analysis is a method of choice when the number of attributes is higher and t-SNE can be used for high-dimensionality data as well.","cead8aca":"## LOAD LIBRARIES","bd5a8442":"## Silulete graphs","f93e21ff":"## Feature engineering","dac7f7a8":"Dimenasional reduction is one of the most popular way of displaying higher number of dimensions."}}