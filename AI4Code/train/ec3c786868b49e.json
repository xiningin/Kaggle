{"cell_type":{"9c7481c4":"code","d38b8d73":"code","ddccd95a":"code","39718142":"code","a548bf4b":"code","d756d627":"code","c038871b":"code","49dea41a":"code","83677618":"code","21e2a122":"code","6f66d608":"code","9b96a8b8":"code","0bed9e7b":"code","beaee743":"code","5a52ab09":"code","8f3a5324":"code","e16914cb":"code","33ef9f57":"code","4b84df2e":"code","6717c92d":"code","e506a6d9":"code","62598845":"code","efde2368":"code","d0458775":"code","0fbbb1a3":"code","cd7031b1":"code","1f595de6":"code","21708b1e":"code","c4eefe83":"code","e005b002":"code","783760fa":"code","bf6c3912":"code","86e7a1c0":"code","62249005":"code","ee796843":"code","852328ff":"code","6cf67068":"code","209b65b6":"code","0780df09":"code","2b5b8737":"code","b7c90ab6":"code","7702a6ef":"code","8b5cf599":"code","b3ac112a":"code","d83842db":"code","cd25d493":"code","674a1f6a":"code","7d92c673":"markdown","210e6ade":"markdown","0011438a":"markdown","35b228f9":"markdown","c2080e2b":"markdown","db0a06aa":"markdown","958c99fd":"markdown","c1e9d54d":"markdown","2738599f":"markdown","59925627":"markdown","cc0e5040":"markdown","a2e48f34":"markdown","8e3f7b70":"markdown","13540dea":"markdown","7d0580be":"markdown","8712f6fb":"markdown","4c6ae50b":"markdown","eb3f6688":"markdown","3618f28e":"markdown"},"source":{"9c7481c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# Any results you write to the current directory are saved as output.","d38b8d73":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","ddccd95a":"data.info()","39718142":"data.corr()","a548bf4b":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","d756d627":"data.head()","c038871b":"data.columns","49dea41a":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","83677618":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot\nplt.show()","21e2a122":"# Histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","6f66d608":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","9b96a8b8":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","0bed9e7b":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n","beaee743":"print(dictionary)","5a52ab09":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","8f3a5324":"series = data['Defense']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['Defense']]  # data[['Defense']] = data frame\nprint(type(data_frame))\n","e16914cb":"# 1 - Filtering Pandas data frame\nx = data['Defense']>200     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","33ef9f57":"data[data['Defense']>200 ]","4b84df2e":"data[np.logical_and(data['Defense']>200, data['Attack']>100 )]","6717c92d":"data[(data['Defense']>200) & (data['Attack']>100)]","e506a6d9":"i = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","62598845":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('end')","efde2368":"# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Attack']][0:1].iterrows():\n    print(index,\" : \",value)\n","d0458775":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","0fbbb1a3":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","cd7031b1":"f","1f595de6":"x = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","21708b1e":"# How can we learn what is built in scope\nimport builtins\nlist = [dir(builtins)]\nlist","c4eefe83":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square()) ","e005b002":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","783760fa":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","bf6c3912":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","86e7a1c0":"number_list = [1,2,3]\ny = [(lambda x:x**2,number_list)]\ny","62249005":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","ee796843":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","852328ff":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","6cf67068":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","209b65b6":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()  # head shows first 5 rows","0780df09":"# tail shows last 5 rows\ndata.tail()","2b5b8737":"# columns gives column names of features\ndata.columns","b7c90ab6":"# shape gives number of rows and columns in a tuble\ndata.shape","7702a6ef":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","8b5cf599":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","b3ac112a":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","d83842db":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Attack',by = 'Legendary')\nplt.title('')\nplt.show()","cd25d493":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","674a1f6a":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmelted","7d92c673":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n<br>outliers: the value that is considerably higher or lower from rest of the data\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n<br>We will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n<br> What is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11.\n\n* The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n* The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","210e6ade":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list\n","0011438a":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","35b228f9":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","c2080e2b":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","db0a06aa":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot is a python library that help us to plot data. The easiest and basic plots are line, scatter and histogram plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle ","958c99fd":"<a id=\"4\"><\/a> <br>\n### PANDAS\nWhat we need to know about pandas?\n* CSV: comma - separated values\n\n","c1e9d54d":"# DATA SCIENTIST\n**In this tutorial, I only explain you what you need to be a data scientist.**\n\nData scientist need to have these skills:\n\n1. Basic Tools: Like python, R or SQL. You do not need to know everything. What you only need is to learn how to use **python**\n1. Basic Statistics: Like mean, median or standart deviation. If you know basic statistics, you can use **python** easily. \n1. Data Munging: Working with messy and difficult data. Like a inconsistent date and string formatting. As you guess, **python** helps us.\n1. Data Visualization: Title is actually explanatory. We will visualize the data with **python** like matplot and seaborn libraries.\n1. Machine Learning: You do not need to understand math behind the machine learning technique. You only need is understanding basics of machine learning and learning how to implement it while using **python**.\n\n### As a summary we will learn python to be data scientist !!!\n\n**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [Iterators](#14)\n    1. [List comprehension](#15)\n1. [Cleaning Data](#16)\n    1. [Diagnose data for cleaning](#17)\n    1. [Exploratory data analysis](#18)\n    1. [Visual exploratory data analysis](#19)\n    1. [Tidy data](#20)\n    1. [Pivoting data](#21)\n    1. [Concatenating data](#22)\n    1. [Data types](#23)\n    1. [Missing data and testing with assert](#24)\n1. [Pandas Foundation](#25)\n    1. [Review of pandas](#26)\n    1. [Building data frames from scratch](#27)\n    1. [Visual exploratory data analysis](#28)\n    1. [Statistical explatory data analysis](#29)\n    1. [Indexing pandas time series](#30)\n    1. [Resampling pandas time series](#31)\n1. [Manipulating Data Frames with Pandas](#32)\n    1. [Indexing data frames](#33)\n    1. [Slicing data frames](#34)\n    1. [Filtering data frames](#35)\n    1. [Transforming data frames](#36)\n    1. [Index objects and labeled data](#37)\n    1. [Hierarchical indexing](#38)\n    1. [Pivoting data frames](#39)\n    1. [Stacking and unstacking data frames](#40)\n    1. [Melting data frames](#41)\n    1. [Categoricals and groupby](#42)","2738599f":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","59925627":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","cc0e5040":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","a2e48f34":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.\n","8e3f7b70":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","13540dea":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn most basic while and for loops","7d0580be":"<a id=\"3\"><\/a> <br>\n### DICTIONARY\nWhy we need dictionary?\n* It has 'key' and 'value'\n* Faster than lists\n<br>\nWhat is key and value. Example:\n* dictionary = {'spain' : 'madrid'}\n* Key is spain.\n* Values is madrid.\n<br>\n<br>**It's that easy.**\n<br>Lets practice some other properties like keys(), values(), update, add, check, remove key, remove all entries and remove dicrionary.","8712f6fb":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function","4c6ae50b":"<a id=\"17\"><\/a> <br>\n### DIAGNOSE DATA for CLEANING\nWe need to diagnose and clean data before exploring.\n<br>Unclean data:\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language\n\n<br> We will use head, tail, columns, shape and info methods to diagnose data","eb3f6688":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION\nWhat we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuble uses paranthesis like tuble = (1,2,3)\n<br>unpack tuble into several variables like a,b,c = tuble","3618f28e":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples"}}