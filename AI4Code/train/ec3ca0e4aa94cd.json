{"cell_type":{"73374099":"code","0d7fba1c":"code","76967864":"code","a83aeeff":"code","514e251c":"code","768c744e":"code","0214f1ca":"code","adb783ea":"code","5b6bffdd":"code","6a345720":"code","9789e81b":"code","7ba00154":"code","60a2bb09":"code","1da61e89":"code","4a001f93":"code","d5d5af9e":"code","2ba4495d":"code","62f5e7e5":"markdown","2ce2016a":"markdown","7e4b4d99":"markdown","6132796e":"markdown","77f3b06d":"markdown","a5a593d4":"markdown","e12e579a":"markdown","51409fd1":"markdown","f32ce9d3":"markdown"},"source":{"73374099":"print('Importing libraries...')\nfrom IPython.display import clear_output\nimport keras\nimport itertools\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nimport matplotlib\nimport altair as alt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras import layers, Input, Model\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.layers import Dense, Activation, Dropout, Flatten, BatchNormalization, Input, concatenate, Reshape\nclear_output(wait=True)\nprint('Done...')","0d7fba1c":"df=pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")\ndf = df.drop('veil-type', axis = 1)","76967864":"df.head()","a83aeeff":"sf=df.iloc[0:1999,:]\na=list(sf)\na=a[1:]","514e251c":"alt.Chart(sf).mark_bar().encode(\n    alt.X(alt.repeat(), type='ordinal'),\n    y='class'\n).properties(\n    width=400,\n    height=200\n).repeat(a)","768c744e":"train_df = df.select_dtypes(exclude=['int','float'])","0214f1ca":"from sklearn.preprocessing import OrdinalEncoder\n\nord_enc = OrdinalEncoder()\nfor i in train_df:\n    train_df[i] = ord_enc.fit_transform(train_df[[i]])","adb783ea":"for i in train_df:\n    df[i] = train_df[i]","5b6bffdd":"col_train = list(df.columns)\nprediction_set = df['class']\ndf.drop('class',axis = 1, inplace = True)\ntraining_set = df\nFEATURES = list(df.columns)","6a345720":"x_train, x_test, y_train, y_test = train_test_split(training_set , prediction_set, test_size=0.15, random_state=33)","9789e81b":"print(x_train.shape)","7ba00154":"model = Sequential()\nmodel.add(Dense(64, input_dim=21, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\nmodel.compile(optimizer='adam',\n                 loss='binary_crossentropy', metrics=['acc'])","60a2bb09":"model.fit(x_train, y_train, epochs=30, validation_data=(x_test, y_test), batch_size=28, verbose=1)","1da61e89":"y = model.predict(x_test)","4a001f93":"final = pd.DataFrame(y_test)\nfinal['prdicted'] = y\nfinal['actual'] = final['class']\nfinal = final.drop('class', axis = 1)","d5d5af9e":"final.head()","2ba4495d":"final.to_csv('result.csv', index=False)","62f5e7e5":"# Please upvote \u2b06\ufe0f\n**Thank you**","2ce2016a":"# Reading the CSV File \ud83d\udcc1","7e4b4d99":"# **Importing Libraries** \ud83d\udcda","6132796e":"# **Relationship of ech feature with Class** \ud83d\udc6b","77f3b06d":"# **Train Test division** \u2797","a5a593d4":"# Preprocessing \u2699\ufe0f","e12e579a":"<img src= \"https:\/\/storage.googleapis.com\/use_for\/fiona-smallwood-9G00z_MOIZo-unsplash.jpg\" alt =\"Mushroom\" style='width: 700px; height: 900px; margin-left: auto; margin-right:auto'>","51409fd1":"# MLP model \ud83d\udc7b","f32ce9d3":"# **Introduction**\n\nthis notebook does a binary classification on tabular dataset and decides whether or not mushroom speices is edible"}}