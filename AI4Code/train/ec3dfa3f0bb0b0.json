{"cell_type":{"d98e677a":"code","97ff844b":"code","b0a5d732":"code","da865c70":"code","f500b6b9":"code","2b722b2d":"code","d04be96e":"code","cfdb9fdb":"code","d9f837a0":"code","5197c0ad":"code","8c203f18":"code","ca4bead0":"code","2bc831e0":"code","584a2c0a":"code","70dee22b":"code","a82aef13":"code","3b276cdd":"code","e4b71784":"code","349c8090":"code","136bf3ec":"code","8d8c369d":"code","ad096d44":"code","cef728ed":"code","0478f273":"code","6a1c44ab":"code","d932a0ab":"code","10cfc2f9":"code","9a9e7388":"code","2b2c9ffb":"code","7c5fea4c":"code","d9517c26":"code","565d31b2":"code","c6435f91":"code","93e7573d":"markdown","209b4913":"markdown","3353bbd4":"markdown"},"source":{"d98e677a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndf = pd.read_csv(\"..\/input\/hourly-energy-consumption\/AEP_hourly.csv\")\ndf","97ff844b":"df.info()","b0a5d732":"df[\"Month\"] = pd.to_datetime(df[\"Datetime\"]).dt.month\ndf[\"Year\"] = pd.to_datetime(df[\"Datetime\"]).dt.year\ndf[\"Date\"] = pd.to_datetime(df[\"Datetime\"]).dt.date\ndf[\"Time\"] = pd.to_datetime(df[\"Datetime\"]).dt.time\ndf[\"Week\"] = pd.to_datetime(df[\"Datetime\"]).dt.week\ndf[\"Day\"] = pd.to_datetime(df[\"Datetime\"]).dt.day_name()","da865c70":"df","f500b6b9":"df2=df.set_index(\"Datetime\")","2b722b2d":"df.index = pd.to_datetime(df.index)","d04be96e":"df.head(4)","cfdb9fdb":"df_2018=df[df['Year']== 2018]","d9f837a0":"df_2018=df_2018.set_index('Datetime')","5197c0ad":"df_2018","8c203f18":"sns.distplot(df_2018[\"AEP_MW\"])\nplt.title(\"Energy Distribution\")","ca4bead0":"from matplotlib import style\n\nfig = plt.figure()\nax1 = plt.subplot2grid((1,1), (0,0))\n\nstyle.use('ggplot')\n\nsns.lineplot(x=df_2018[\"Month\"], y=df_2018[\"AEP_MW\"], data=df)\nsns.set(rc={'figure.figsize':(15,6)})\n\nplt.title(\"Energy consumptionnin Year 2018\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Energy in MW\")\nplt.grid(True)\nplt.legend()\n\nfor label in ax1.xaxis.get_ticklabels():\n    label.set_rotation(90)\n\n\nplt.title(\"Energy Consumption According to 2018\")","2bc831e0":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential","584a2c0a":"df_new_3=df_2018.iloc[:, 0:1]\ndf_new_3","70dee22b":"df_new_2 = df_2018.iloc[:, 0:1]\ndf_new_2 = df_new_2[:-136]","a82aef13":"df_new_2","3b276cdd":"\ndf_new_3.plot(figsize=(16,4),legend=True)\n\nplt.title('AEP hourly power consumption data - BEFORE NORMALIZATION')\n\nplt.show()","e4b71784":"df_new_3_copy=df_new_3","349c8090":"df_new_3_copy","136bf3ec":"from sklearn.preprocessing import MinMaxScaler\ndef normalize_data(df):\n    scaler = MinMaxScaler()\n    df_new_3_copy['AEP_MW']=scaler.fit_transform(df_new_3_copy['AEP_MW'].values.reshape(-1,1))\n    return df\n\ndf_norm = normalize_data(df_new_3_copy)\ndf_norm.shape","8d8c369d":"df_norm.plot(figsize=(16,4),legend=True)\n\nplt.title('AEP hourly power consumption data - AFTER NORMALIZATION')\n\nplt.show()","ad096d44":"def load_data(df_req, seq_len):\n    X_train = []\n    y_train = []\n    for i in range(seq_len, len(df_req)):\n        X_train.append(df_req.iloc[i-seq_len : i, 0])\n        y_train.append(df_req.iloc[i, 0])\n    \n    #1 last 136 days are going to be used in test\n    #1son 136 g\u00fcn test a\u015famas\u0131 i\u00e7in kullan\u0131lacak.\n    X_test = X_train[5000:]             \n    y_test = y_train[5000:]\n    \n    #2 first 5000 days are going to be used in training\n    #2 ilk 5000 g\u00fcn e\u011fitim a\u015famas\u0131 i\u00e7in kullan\u0131lacak\n    X_train = X_train[:5000]           \n    y_train = y_train[:5000]\n    \n    #3 convert to numpy array\n    #3 numpy dizi d\u00f6n\u00fc\u015f\u00fcm\u00fc\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    \n    X_test = np.array(X_test)\n    y_test = np.array(y_test)\n    \n    #4 reshape data to input into RNN models\n    #4 verilerin RNN modellerine girilmesi i\u00e7in yeniden \u015fekillendirilmesi\n    X_train = np.reshape(X_train, (5000, seq_len, 1))\n    \n    X_test = np.reshape(X_test, (X_test.shape[0], seq_len, 1))\n    \n    return [X_train, y_train, X_test, y_test]","cef728ed":"seq_len = 20 #dizi uzunlu\u011funu se\u00e7imi\n\nX_train, y_train, X_test, y_test = load_data(df_new_3, seq_len)\n\nprint('X_train.shape = ',X_train.shape)\nprint('y_train.shape = ', y_train.shape)\nprint('X_test.shape = ', X_test.shape)\nprint('y_test.shape = ',y_test.shape)","0478f273":"from keras.layers import SimpleRNN","6a1c44ab":"rnn_model_for_ec = Sequential()\n\nrnn_model_for_ec.add(SimpleRNN(40,activation=\"tanh\",return_sequences=True, input_shape=(X_train.shape[1],1)))\nrnn_model_for_ec.add(Dropout(0.15))\n\nrnn_model_for_ec.add(SimpleRNN(40,activation=\"tanh\",return_sequences=True))\nrnn_model_for_ec.add(Dropout(0.15))\n\nrnn_model_for_ec.add(SimpleRNN(40,activation=\"tanh\",return_sequences=False))\nrnn_model_for_ec.add(Dropout(0.15))\n\nrnn_model_for_ec.add(Dense(1))\n\nrnn_model_for_ec.summary()","d932a0ab":"rnn_model_for_ec.compile(optimizer=\"adam\",loss=\"MSE\")\nrnn_model_for_ec.fit(X_train, y_train, epochs=40, batch_size=1000)","10cfc2f9":"from sklearn.metrics import r2_score\nrnn_predictions = rnn_model_for_ec.predict(X_test)\n\nrnn_score = r2_score(y_test,rnn_predictions)\nprint(\"R2 Score of RNN model = \",rnn_score)","9a9e7388":"def plot_predictions(test, predicted, title):\n    plt.figure(figsize=(16,4))\n    plt.plot(test, color='blue',label='Actual power consumption data')\n    plt.plot(predicted, alpha=0.7, color='orange',label='Predicted power consumption data')\n    plt.title(title)\n    plt.xlabel('Time')\n    plt.ylabel('Normalized power consumption scale')\n    plt.legend()\n    plt.show()\n    \nplot_predictions(y_test, rnn_predictions, \"Predictions made by simple RNN model\")","2b2c9ffb":"lstm_model_for_ec = Sequential()\n\nlstm_model_for_ec.add(LSTM(40,activation=\"tanh\",return_sequences=True, input_shape=(X_train.shape[1],1)))\nlstm_model_for_ec.add(Dropout(0.15))\n\nlstm_model_for_ec.add(LSTM(40,activation=\"tanh\",return_sequences=True))\nlstm_model_for_ec.add(Dropout(0.15))\n\nlstm_model_for_ec.add(LSTM(40,activation=\"tanh\",return_sequences=False))\nlstm_model_for_ec.add(Dropout(0.15))\n\nlstm_model_for_ec.add(Dense(1))\n\nlstm_model_for_ec.summary()","7c5fea4c":"lstm_model_for_ec.compile(optimizer=\"adam\",loss=\"MSE\")\nlstm_model_for_ec.fit(X_train, y_train, epochs=40, batch_size=1000)","d9517c26":"lstm_predictions = lstm_model_for_ec.predict(X_test)\n\nlstm_score = r2_score(y_test, lstm_predictions)\nprint(\"R^2 Score of LSTM model = \",lstm_score)","565d31b2":"plot_predictions(y_test, lstm_predictions, \"Predictions made by LSTM model\")","c6435f91":"plt.figure(figsize=(15,8))\n\nplt.plot(y_test, c=\"orange\", linewidth=3, label=\"Original values\")\nplt.plot(lstm_predictions, c=\"red\", linewidth=3, label=\"LSTM predictions\")\nplt.plot(rnn_predictions, alpha=0.5, c=\"green\", linewidth=3, label=\"RNN predictions\")\nplt.legend()\nplt.title(\"Predictions vs Actual Data\", fontsize=20)\nplt.show()","93e7573d":"#Re-LSTM","209b4913":"RNN MODEL","3353bbd4":"**LSTM MODEL**"}}