{"cell_type":{"c9ae3b12":"code","ca47ffcc":"code","4851048d":"code","36c67fd1":"code","7ede5dcb":"code","86285ad5":"code","ba6f07dc":"code","c98de44d":"code","c2d18154":"code","33b59265":"code","4eb280f7":"code","2763737d":"code","fc001db6":"code","dc158edb":"code","d084a817":"code","02a16f2a":"markdown"},"source":{"c9ae3b12":"!pip install -U --no-build-isolation --no-deps ..\/input\/transformers-master\/ -qq # necessary for mixed precision roberta and rembert","ca47ffcc":"import os\nimport gc\nimport json\nimport collections\nimport warnings\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold\n\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' \nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport tensorflow.keras.backend as K\n\nimport transformers\nfrom transformers import AutoTokenizer, TFAutoModel, AutoConfig\n\nwarnings.simplefilter(action='ignore', category=Warning)\n%env TOKENIZERS_PARALLELISM=true","4851048d":"CFG = {\n    'EPOCHS': 2,\n    \"MODEL\": \"..\/input\/rembert-tf\",\n    'N_FOLDS': 5,\n    'SEED': 777,\n    'VERBOSE': 1,\n    'BATCH_SIZE': 32,\n    'MAX_LENGTH': 384,\n    'DOC_STRIDE': 128,\n    'VALIDATE_EVERY': 0.3, # fraction of epoch between validations\n    'VAL_START_BATCH': 0.5, # don't do validation on first epoch until after this fraction of batches has been passed\n    'LANG_FOCUS': None, # set to hindi or tamil to focus on those scores. None does overall score\n    'MIN_SCORE_TO_SAVE': 0.6, # don't save unless jaccard score above this value\n    \"LR\": 3e-5,\n}","36c67fd1":"# https:\/\/www.kaggle.com\/hidehisaarai1213\/g2net-tf-on-the-fly-cqt-tpu-training?scriptVersionId=71575767&cellId=11\ndef auto_select_accelerator():\n    TPU_DETECTED = False\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n        TPU_DETECTED = True\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n\n    return strategy, TPU_DETECTED\n\nstrategy, tpu_detected = auto_select_accelerator()\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\n# tf.keras.mixed_precision.set_global_policy('mixed_bfloat16')\n\nprint(f'REPLICAS: {REPLICAS}')","7ede5dcb":"tokenizer = AutoTokenizer.from_pretrained(CFG[\"MODEL\"])\npad_on_right = tokenizer.padding_side == \"right\"","86285ad5":"train = pd.read_csv('..\/input\/chaiimlqaxquad\/chaii-mlqa-xquad-5folds.csv')\nexternal_hi = train[train[\"src\"]!='chaii'].sample(frac=1, random_state=2021).reset_index(drop=True)\nexternal_te = pd.read_csv(\"..\/input\/all-mlqa-xquad-tydiqa\/tydiqa.csv\")\nexternal_te = external_te[external_te[\"language\"].str.contains(\"telugu\")][[\"answer_start\", \"answer_text\", \"context\", \"question\"]]\nexternal_te = external_te.sample(frac=1, random_state=2021).reset_index(drop=True)\nexternal_te[\"source\"] = \"tydiqa\"\nexternal_te[\"fold\"] = -1\nexternal = pd.concat([external_hi, external_te], axis=0, ignore_index=True)\ntrain = train[train[\"src\"]=='chaii'].sample(frac=1, random_state=2021).reset_index(drop=True)","ba6f07dc":"# Split data to folds\nn_folds = CFG['N_FOLDS']\ntrain['kfold'] = -1\nexternal[\"kfold\"] = -1\n\ntrain[\"id\"] = [f\"chaii{i}\" for i in range(len(train))]\nexternal[\"id\"] = [f\"external{i}\" for i in range(len(external))]\n\n\nskf = StratifiedKFold(n_splits=n_folds, shuffle=True, random_state=CFG[\"SEED\"])\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=train['language'].values)):\n    train.loc[val_idx, 'kfold'] = fold\ntrain.head(2)","c98de44d":"def prepare_training(examples):\n    examples['question'] = [q.lstrip() for q in examples['question']] #remove leading white space\n    \n    #Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    #in one example possible giving several features when a context is long, each of those features having a\n    #context that overlaps a bit the context of the previous feature.\n    \n    tokenized_examples = tokenizer(\n                list(examples['question' if pad_on_right else 'context'].values),\n                list(examples['context' if pad_on_right else 'question'].values),\n                truncation='only_second' if pad_on_right else 'only_first',\n                max_length=CFG['MAX_LENGTH'],\n                stride=CFG['DOC_STRIDE'],\n                return_overflowing_tokens=True,\n                return_offsets_mapping=True,\n                padding='max_length'\n            )\n    #Since one example might give us several features if it has a long context, we need a map from a feature to\n    #its corresponding example. This key gives us just that.\n    \n    sample_mapping = tokenized_examples.pop('overflow_to_sample_mapping')\n    \n    #The offset mappings will give us a map from token to character position in the original context. This will\n    #help us compute the start_positions and end_positions.\n    \n    offset_mapping = tokenized_examples.pop('offset_mapping')\n    \n    tokenized_examples['start_positions'] = []\n    tokenized_examples['end_positions'] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples['input_ids'][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n        \n        sequence_ids = tokenized_examples.sequence_ids(i)\n        \n        #One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples.loc[sample_index, 'answer_text']\n        start_char = examples.loc[sample_index, 'answer_start']\n        \n        # If no answers are given, set the cls_index as answer.\n        if start_char is None:\n            tokenized_examples['start_positions'].append(cls_index)\n            tokenized_examples['end_positions'].append(cls_index)\n        else:\n            # Start\/end character idx of the answer in the text.\n            end_char = start_char + len(answers)\n            \n             #Start token idx of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n            #Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples['start_positions'].append(cls_index)\n                tokenized_examples['end_positions'].append(cls_index)\n            else:\n                #Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                #Note: we could go after the last offset if the answer is the last word (edge case).\n                \n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples['start_positions'].append(token_start_index - 1)\n                \n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples['end_positions'].append(token_end_index + 1)\n\n    return tokenized_examples","c2d18154":"def prepare_validation(examples):\n    examples['question'] = [q.lstrip() for q in examples['question']]\n    \n    tokenized_examples = tokenizer(\n                list(examples['question' if pad_on_right else 'context'].values),\n                list(examples['context' if pad_on_right else 'question'].values),\n                truncation = 'only_second' if pad_on_right else 'only_first',\n                max_length = CFG['MAX_LENGTH'],\n                stride = CFG['DOC_STRIDE'],\n                return_overflowing_tokens = True,\n                return_offsets_mapping = True,\n                padding = 'max_length'\n            )\n    \n    sample_mapping = tokenized_examples.pop('overflow_to_sample_mapping')\n    \n    #id column from the dataset\n    tokenized_examples['example_id'] = []\n\n    for i in range(len(tokenized_examples['input_ids'])):\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n        sample_index = sample_mapping[i]\n        tokenized_examples['example_id'].append(examples.loc[sample_index, 'id'])\n        tokenized_examples['offset_mapping'][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples['offset_mapping'][i])\n        ]\n\n    return tokenized_examples","33b59265":"def build_tf_dataset(df, batch_size=4, flag='train'):\n    \n    if flag == 'train':\n        features = prepare_training(df)\n    else:\n        features = prepare_validation(df)\n    \n    input_ids = features['input_ids']\n    attn_masks = features['attention_mask']\n    \n    if flag == 'train':\n        \n        # This enables label smoothing\n        start_positions = np.zeros((len(features['start_positions']), CFG['MAX_LENGTH']))\n        for row, pos in enumerate(features['start_positions']):\n            start_positions[row, pos] = 1\n    \n        end_positions = np.zeros((len(features['end_positions']), CFG['MAX_LENGTH']))\n        for row, pos in enumerate(features['end_positions']):\n            end_positions[row, pos] = 1\n        \n        train_dataset = tf.data.Dataset.from_tensor_slices((input_ids, attn_masks, start_positions, end_positions))\n        train_dataset = train_dataset.map(lambda x1, x2, y1, y2: ({'input_ids': x1, 'attention_mask': x2}, {'start_positions': y1, 'end_positions': y2}))\n        train_dataset = train_dataset.batch(batch_size)\n        train_dataset = train_dataset.shuffle(1000)\n        train_dataset = train_dataset.prefetch(AUTO)\n        \n        return train_dataset, features\n    \n    elif flag == 'valid':\n        dataset = tf.data.Dataset.from_tensor_slices((input_ids, attn_masks))\n        dataset = dataset.map(lambda x1, x2: ({'input_ids': x1, 'attention_mask': x2}))\n        dataset = dataset.batch(batch_size)\n        dataset = dataset.prefetch(buffer_size=AUTO)\n        \n        return dataset, features","4eb280f7":"def build_model(num_steps):\n    roberta = TFAutoModel.from_pretrained(CFG['MODEL'])\n    \n    input_ids = tf.keras.layers.Input(shape=(CFG[\"MAX_LENGTH\"], ), name='input_ids', dtype=tf.int32)\n    attention_mask=tf.keras.layers.Input(shape=(CFG[\"MAX_LENGTH\"], ), name='attention_mask', dtype=tf.int32)\n    \n    embeddings = roberta(input_ids=input_ids, attention_mask=attention_mask)[0]\n    \n    x1 = tf.keras.layers.Dropout(0.1)(embeddings) \n    x1 = tf.keras.layers.Dense(1, dtype=tf.float32)(x1)\n    x1 = tf.keras.layers.Flatten()(x1)\n    x1 = tf.keras.layers.Activation('softmax', name='start_positions', dtype=tf.float32)(x1)\n    \n    x2 = tf.keras.layers.Dropout(0.1)(embeddings) \n    x2 = tf.keras.layers.Dense(1, dtype=tf.float32)(x2)\n    x2 = tf.keras.layers.Flatten()(x2)\n    x2 = tf.keras.layers.Activation('softmax', name='end_positions', dtype=tf.float32)(x2)\n\n    model = tf.keras.models.Model(inputs=[input_ids, attention_mask], outputs=[x1, x2])\n    \n    # linear decay\n    sched = tf.keras.optimizers.schedules.PolynomialDecay(\n            CFG[\"LR\"], num_steps, end_learning_rate=1e-6, power=1.0,\n            cycle=False, name=None\n        )\n    optimizer = tf.keras.optimizers.Adam(learning_rate=sched)\n#     optimizer = tfa.optimizers.AdamW(learning_rate=clr, weight_decay=0.01)  # adamw does very poorly\n#     optimizer = tfa.optimizers.SWA(optimizer) # https:\/\/www.tensorflow.org\/addons\/api_docs\/python\/tfa\/optimizers\/SWA\n    loss = tf.keras.losses.CategoricalCrossentropy(from_logits=False, label_smoothing=0.1)\n    \n    model.compile(loss=[loss, loss], optimizer=optimizer)\n\n    return model","2763737d":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","fc001db6":"def post_process_predictions(examples, features, start, end, n_best_size=20, max_answer_length=30):\n    \n    all_start_logits, all_end_logits = start, end\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples['id'])}\n    features_per_example = collections.defaultdict(list)\n    \n    for i, feature in enumerate(features['example_id']):\n        features_per_example[example_id_to_index[feature]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features['input_ids'])} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in examples.iterrows():\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example['context']\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features['offset_mapping'][feature_index]\n\n            # Update minimum null prediction.\n            cls_index = features['input_ids'][feature_index].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        #if not squad_v2:\n        #    predictions[example[\"id\"]] = best_answer[\"text\"]\n        #else:\n        answer = best_answer[\"text\"] \n        predictions[example['id']] = answer\n\n    return predictions","dc158edb":"class JaccardVal(tf.keras.callbacks.Callback):\n    \"\"\"Learning rate scheduler which sets the learning rate according to schedule.\n\n  Arguments:\n      schedule: a function that takes an epoch index\n          (integer, indexed from 0) and current learning rate\n          as inputs and returns a new learning rate as output (float).\n  \"\"\"\n\n    def __init__(self, valid_df, valid_dataset, valid_enc, fold, epoch_steps, best_scores):\n        super().__init__()\n        self.valid_df = valid_df\n        self.valid_dataset = valid_dataset\n        self.valid_enc = valid_enc\n        self.epoch = 0\n        self.fold = fold\n        self.validate_steps = int(epoch_steps*CFG[\"VALIDATE_EVERY\"])\n        self.val_start_batch = epoch_steps*CFG[\"VAL_START_BATCH\"]\n        self.best_scores = best_scores\n        \n    def on_epoch_begin(self, epoch, logs=None):\n        self.epoch = epoch # starts counting at 0, printed epoch adds 1\n        \n    def on_batch_end(self, batch, logs=None):\n        if self.epoch==0 and batch < self.val_start_batch:\n            # don't validate in first epoch until passed val_start_batch\n            pass\n        elif batch % self.validate_steps == 0:\n            start_pred, end_pred = self.model.predict(self.valid_dataset, batch_size=CFG[\"BATCH_SIZE\"], verbose=1)\n        \n            valid_preds = post_process_predictions(self.valid_df, self.valid_enc, start_pred, end_pred)\n\n            valid_df[\"pred\"] = valid_df[\"id\"].map(valid_preds)\n\n            valid_df[\"scores\"] = [jaccard(str1, str2) for str1, str2 in valid_df[[\"pred\", \"answer_text\"]].values]\n\n            valid_df[[\"id\", \"pred\"]].to_csv(f\"predictions_fold{self.fold}.csv\", index=False)\n\n            j_score = np.mean(valid_df[\"scores\"])\n            print(f'Jaccard Score after epoch {self.epoch}, batch {batch}: {j_score}')\n            hi_score = np.mean(valid_df[valid_df[\"language\"]==\"hindi\"][\"scores\"])\n            print(f'HINDI - Jaccard Score after epoch {self.epoch}, batch {batch}: {hi_score}')\n            ta_score = np.mean(valid_df[valid_df[\"language\"]==\"tamil\"][\"scores\"])\n            print(f'TAMIL - Jaccard Score after epoch {self.epoch}, batch {batch}: {ta_score}')\n\n            if CFG['LANG_FOCUS'] == \"hindi\":\n                \n                if hi_score > self.best_scores[self.fold]:\n                    self.best_scores[self.fold] = hi_score\n                    self.model.save_weights(f\"fold{self.fold}\"+\"\/tf_model.h5\")\n                    print(f\"New best Hindi Jaccard Score in epoch {self.epoch}, batch {batch}. Saving model.\")    \n            \n            elif CFG['LANG_FOCUS'] == \"tamil\":\n                \n                if ta_score > self.best_scores[self.fold]:\n                    self.best_scores[self.fold] = ta_score\n                    self.model.save_weights(f\"fold{self.fold}\"+\"\/tf_model.h5\")\n                    print(f\"New best Tamil Jaccard Score in epoch {self.epoch}, batch {batch}. Saving model.\") \n            else:\n                if j_score > self.best_scores[self.fold]:\n                    self.best_scores[self.fold] = j_score\n                    self.model.save_weights(f\"fold{self.fold}\"+\"\/tf_model.h5\")\n                    print(f\"New best Overall Jaccard Score in epoch {self.epoch}, batch {batch}. Saving model.\") ","d084a817":"best_scores = {f:CFG['MIN_SCORE_TO_SAVE'] for f in range(CFG['N_FOLDS'])}\n\nfor fold in range(CFG['N_FOLDS']):\n    output_dir = f\"fold{fold}\"\n    %mkdir $output_dir\n    print('#########' * 15)\n    print(f\"Fold: {fold}\")\n    print('#########' * 15)\n\n    train_df = train[train['kfold'] != fold]\n    valid_df = train[train['kfold'] == fold]\n\n    train_df = pd.concat([train_df, external], axis=0, ignore_index=True)\n\n    valid_df = valid_df.reset_index(drop=True)\n    print(train_df.shape, valid_df.shape)\n\n    K.clear_session()\n\n    strategy, tpu_detected = auto_select_accelerator()\n    \n    train_dataset, train_enc = build_tf_dataset(train_df, batch_size=CFG[\"BATCH_SIZE\"], flag='train')\n    valid_dataset, valid_enc = build_tf_dataset(valid_df, batch_size=CFG[\"BATCH_SIZE\"], flag='valid')\n    \n    epoch_steps = len(train_dataset)\n    total_steps = epoch_steps*CFG['EPOCHS']\n\n    with strategy.scope():\n        model = build_model(total_steps)\n        model.load_weights(\"..\/input\/remb-pretrain-tpu-tf\/tf_model.h5\")\n    \n    if fold==0:\n        print(model.summary())\n\n\n    \n    \n\n    history = model.fit(train_dataset, \n                        epochs=CFG['EPOCHS'], \n                        batch_size=CFG[\"BATCH_SIZE\"],\n                        callbacks=[\n                            JaccardVal(valid_df, valid_dataset, valid_enc, fold, epoch_steps, best_scores)\n                        ],\n                        verbose=1\n                        )\n    \n    del model\n    del train_dataset\n    del train_enc\n    del valid_dataset\n    del valid_enc\n    del train_df\n    del valid_df\n    gc.collect();\n    \nfocus = CFG[\"LANG_FOCUS\"]\nif focus not in {\"hindi\", \"tamil\"}:\n    focus = \"Overall\"\n\nfor fold, score in best_scores.items():\n    if score - CFG[\"MIN_SCORE_TO_SAVE\"] < 1e-5: # when the best score wasn't higher than the minimum score to save\n        score = f'<{CFG[\"MIN_SCORE_TO_SAVE\"]}'\n    else:\n        score = round(score, 3)\n    print(f\"Best {focus} score - fold {fold}: {score}\")","02a16f2a":"# Finetuning RemBERT on Tensorflow TPU\n\n### RemBERT is a pain to finetune on Kaggle GPUs, but simple on TPU! Hopefully this can help people in the future.\n\nI made my own callback that does validation every few batches, saving when it goes over a certain level.  \nNote:\n- I'll try to update this to include Hugging Face datasets\n- If you do more than 8 folds, it will likely run out of space in the output directory\n\n### A huge shoutout to this notebook from which I modified heavily: https:\/\/www.kaggle.com\/msafi04\/tensorflow-hf-qa-using-externaldata-tpu"}}