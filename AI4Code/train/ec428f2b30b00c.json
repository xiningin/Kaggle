{"cell_type":{"30b292e1":"code","308eaaa1":"code","a4efd390":"code","16d6bde9":"code","759dc453":"code","c4d45e00":"code","909043c0":"code","1f59c23b":"code","e6db1675":"code","40f98aed":"code","6c7ab4b5":"code","73d94ad1":"code","0f1b03f8":"code","156a8e98":"code","cc50bd51":"code","a8670a27":"code","d0dda83b":"code","c2e8999d":"code","1497b7b6":"code","b9bbbd37":"code","b477a697":"code","b915e8f0":"code","97199ccf":"code","cd40e002":"code","db52cda1":"code","eef8d23b":"markdown","6c2c4c59":"markdown","4c7108d8":"markdown","5af4fa92":"markdown","520f5551":"markdown","55617b1a":"markdown","8b273379":"markdown","749d677c":"markdown","db3f47a0":"markdown","6a4f6eab":"markdown","94081ea4":"markdown","6f377584":"markdown","1dc679e0":"markdown","6f871c0f":"markdown","5723761c":"markdown","19ada024":"markdown"},"source":{"30b292e1":"import pandas as pd\nfrom keras import layers\nfrom keras import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras import regularizers\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import neighbors\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom sklearn.ensemble import IsolationForest","308eaaa1":"\ndf =  pd.read_csv(r'..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf = df.sample(frac=1).reset_index(drop=True)","a4efd390":"print(f'First 5 rows:\\n {df.head(5)}')","16d6bde9":"print(f'Null values:\\n {df.isnull().sum()}')\n","759dc453":"print(f'Exaples:\\n {len(df)}')\n","c4d45e00":"print(f'Dataset info:\\n {df.describe()}')\n","909043c0":"plt.figure(figsize=[20,10])\nsns.heatmap(df.corr(), vmin=-1, cmap='coolwarm', annot=True)","1f59c23b":"# Getting only highly correlated features\nFeatures = ['time', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', 'age']","e6db1675":"# Setting number of training samples\ntraining_samples = 250\ndata = df[Features]\nlabels = df.iloc[:, -1]","40f98aed":"# Applying scaling to data\nscaler = MinMaxScaler()\ndata = scaler.fit_transform(data)","6c7ab4b5":"# Splitting data to train and test\nX_train = data[:training_samples]\ny_train = labels[:training_samples]\nX_test = data[training_samples:]\ny_test = labels[training_samples:]","73d94ad1":"# Box plot before dealing with outliers\npx.box(X_train, points='all')","0f1b03f8":"# Fitting data to Isolation Forest for detecting and removing outliers\niso = IsolationForest(contamination=0.1)\nisoPred = iso.fit_predict(X_train)\nmask = isoPred != -1\nX_train, y_train = X_train[mask, :], y_train[mask]","156a8e98":"# Box plot after dealing with outliers\npx.box(X_train, points='all')\n","cc50bd51":"# Setting simple neural network model\nmodel = Sequential()\nmodel.add(layers.Dense(32, kernel_regularizer=regularizers.l2(0.01), activation='relu', input_shape=(X_train.shape[1],)))\nmodel.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.01), activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training model\nhistory = model.fit(X_train,\n                    y_train,\n                    epochs=20,\n                    batch_size=4,\n                    validation_split=0.2)","a8670a27":"accDict = {}\naccNameList = []\naccValueList = []","d0dda83b":"print(f'Neural network: {model.evaluate(X_test, y_test)[1]}')\naccNameList.append('NeuralNetwork')\naccValueList.append(model.evaluate(X_test, y_test)[1])","c2e8999d":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nprint(f'Logistic Regression: {lr.score(X_test, y_test)}')\naccNameList.append('LogisticRegression')\naccValueList.append(lr.score(X_test, y_test))","1497b7b6":"sv = svm.SVC()\nsv.fit(X_train, y_train)\nprint(f'Support Vector Machine Classifier: {sv.score(X_test, y_test)}')\naccNameList.append('SupportVectorMachineClassifier')\naccValueList.append(sv.score(X_test, y_test))","b9bbbd37":"rfc = RandomForestClassifier(max_depth=20)\nrfc.fit(X_train, y_train)\nprint(f'Random Forest Classifier: {rfc.score(X_test, y_test)}')\naccNameList.append('RandomForestClassifier')\naccValueList.append(rfc.score(X_test, y_test))","b477a697":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)\nprint(f'Gaussian Naive Bayes: {gnb.score(X_test, y_test)}')\naccNameList.append('GaussianNaiveBayes')\naccValueList.append(gnb.score(X_test, y_test))","b915e8f0":"sgd = SGDClassifier()\nsgd.fit(X_train, y_train)\nprint(f'SGD Classifier: {sgd.score(X_test, y_test)}')\naccNameList.append('SGDClassifier')\naccValueList.append(sgd.score(X_test, y_test))","97199ccf":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train, y_train)\nprint(f'Gradient Boosting Classifier: {gbc.score(X_test, y_test)}')\naccNameList.append('GradientBoostingClassifier')\naccValueList.append(gbc.score(X_test, y_test))","cd40e002":"\nxgb = xgboost.sklearn.XGBClassifier()\nxgb.fit(X_train, y_train)\nprint(f'XGB Classifier: {xgb.score(X_test, y_test)}')\naccNameList.append('XGBClassifier')\naccValueList.append(xgb.score(X_test, y_test))","db52cda1":"accDict['Model'] = accNameList\naccDict['Value'] = accValueList\naccDf = pd.DataFrame(accDict)\npx.bar(accDf, x='Model', y='Value')\n","eef8d23b":"***Number of examples***","6c2c4c59":"***Gradient Boosting Classifier***","4c7108d8":"***SGD Classifier***","5af4fa92":"***Gaussian Naive Bayes***","520f5551":"***Simple neural network***","55617b1a":"# **Accuracy scores for each algorithm**","8b273379":"***Support Vector Machine Classifier***","749d677c":"***Correlation matrix***","db3f47a0":"***First 5 rows***","6a4f6eab":"***More info about dataset***","94081ea4":"***Null values***","6f377584":"***XGB Classifier***","1dc679e0":"# **Imports**","6f871c0f":"# **Data info**","5723761c":"***Random Forest Classifier***","19ada024":"***Logistic Regression***"}}