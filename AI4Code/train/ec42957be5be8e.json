{"cell_type":{"15d528b6":"code","51708554":"code","3c93b521":"code","da20ac91":"code","228533f6":"code","3590c862":"code","d4940cce":"code","7e6aeb80":"code","31f66658":"code","a9e3e562":"code","3910e250":"code","cd67889d":"code","5bc604fd":"code","2368a672":"code","1a491cfa":"code","8d995441":"code","3b51555d":"code","9b5009e5":"code","1d943792":"code","0cce63e3":"code","cefa37b2":"code","a80862d1":"code","df68c808":"markdown","6757a215":"markdown","eafb2876":"markdown","a44cbd0b":"markdown","524f395e":"markdown","2d0b48fa":"markdown","980c0d47":"markdown","9bb0ef23":"markdown","7e02b850":"markdown","928cb611":"markdown","3130e312":"markdown"},"source":{"15d528b6":"import os\nimport gc\nimport datetime\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport xgboost as xgb\n\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nprint(os.listdir(\"..\/input\"))","51708554":"train = pd.read_csv('..\/input\/train.csv', parse_dates=[\"first_active_month\"])\ntest = pd.read_csv('..\/input\/test.csv', parse_dates=[\"first_active_month\"])\n\nmerchants = pd.read_csv('..\/input\/merchants.csv')\nhistorical_transactions = pd.read_csv('..\/input\/historical_transactions.csv')\nnew_merchant_transactions = pd.read_csv('..\/input\/new_merchant_transactions.csv')\n\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv')","3c93b521":"train.shape, test.shape, sample_submission.shape","da20ac91":"merchants.shape, historical_transactions.shape, new_merchant_transactions.shape","228533f6":"train.head()","3590c862":"merchants.head()","d4940cce":"historical_transactions.head()","7e6aeb80":"new_merchant_transactions.head()","31f66658":"def missing_impute(df):\n    for i in df.columns:\n        if df[i].dtype == \"object\":\n            df[i] = df[i].fillna(\"other\")\n        elif (df[i].dtype == \"int64\" or df[i].dtype == \"float64\"):\n            df[i] = df[i].fillna(df[i].mean())\n        else:\n            pass\n    return df\n\ndef datetime_extract(df, dt_col='first_active_month'):\n    df['date'] = df[dt_col].dt.date \n    df['day'] = df[dt_col].dt.day \n    df['dayofweek'] = df[dt_col].dt.dayofweek\n    df['dayofyear'] = df[dt_col].dt.dayofyear\n    df['days_in_month'] = df[dt_col].dt.days_in_month\n    df['daysinmonth'] = df[dt_col].dt.daysinmonth \n    df['month'] = df[dt_col].dt.month\n    df['week'] = df[dt_col].dt.week \n    df['weekday'] = df[dt_col].dt.weekday\n    df['weekofyear'] = df[dt_col].dt.weekofyear\n    df['year'] = train[dt_col].dt.year\n    \n    df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['date']).dt.days\n\n    return df\n\n\n# Do impute missing values for all datasets\nfor df in [train, test, merchants, historical_transactions, new_merchant_transactions]:\n    missing_impute(df)\n    \n\n# Do extract datetime values for train and test\ntrain = datetime_extract(train, dt_col='first_active_month')\ntest = datetime_extract(test, dt_col='first_active_month')","a9e3e562":"# Define the aggregation procedure outside of the groupby operation\naggregations = {\n    'purchase_amount': ['sum', 'mean', 'std', 'min', 'max', 'size', 'median']\n}\n\ngrouped = historical_transactions.groupby('card_id').agg(aggregations)\ngrouped.columns = grouped.columns.droplevel(level=0)\ngrouped.rename(columns={\n    \"sum\": \"sum_purchase_amount\", \n    \"mean\": \"mean_purchase_amount\",\n    \"std\": \"std_purchase_amount\", \n    \"min\": \"min_purchase_amount\",\n    \"max\": \"max_purchase_amount\", \n    \"size\": \"num_purchase_amount\",\n    \"median\": \"median_purchase_amount\"\n}, inplace=True)\ngrouped.reset_index(inplace=True)\n\ntrain = pd.merge(train, grouped, on=\"card_id\", how=\"left\")\ntest = pd.merge(test, grouped, on=\"card_id\", how=\"left\")\n\ndel grouped\ngc.collect()","3910e250":"# Define the aggregation procedure outside of the groupby operation\naggregations = {\n    'purchase_amount': ['sum', 'mean', 'std', 'min', 'max', 'size', 'median']\n}\n\ngrouped = new_merchant_transactions.groupby('card_id').agg(aggregations)\ngrouped.columns = grouped.columns.droplevel(level=0)\ngrouped.rename(columns={\n    \"sum\": \"sum_purchase_amount\", \n    \"mean\": \"mean_purchase_amount\",\n    \"std\": \"std_purchase_amount\", \n    \"min\": \"min_purchase_amount\",\n    \"max\": \"max_purchase_amount\", \n    \"size\": \"num_purchase_amount\",\n    \"median\": \"median_purchase_amount\"\n}, inplace=True)\ngrouped.reset_index(inplace=True)\n\ntrain = pd.merge(train, grouped, on=\"card_id\", how=\"left\")\ntest = pd.merge(test, grouped, on=\"card_id\", how=\"left\")\n\ndel grouped\ngc.collect()","cd67889d":"train.shape, test.shape","5bc604fd":"train.head()","2368a672":"# One-hot encode features\nohe_df_1 = pd.get_dummies(train['feature_1'], prefix='f1_')\nohe_df_2 = pd.get_dummies(train['feature_2'], prefix='f2_')\nohe_df_3 = pd.get_dummies(train['feature_3'], prefix='f3_')\n\nohe_df_4 = pd.get_dummies(test['feature_1'], prefix='f1_')\nohe_df_5 = pd.get_dummies(test['feature_2'], prefix='f2_')\nohe_df_6 = pd.get_dummies(test['feature_3'], prefix='f3_')\n\n# Numerical representation of the first active month\ntrain = pd.concat([train, ohe_df_1, ohe_df_2, ohe_df_3], axis=1, sort=False)\ntest = pd.concat([test, ohe_df_4, ohe_df_5, ohe_df_6], axis=1, sort=False)\n\ndel ohe_df_1, ohe_df_2, ohe_df_3\ndel ohe_df_4, ohe_df_5, ohe_df_6\ngc.collect()","1a491cfa":"train.shape, test.shape","8d995441":"excluded_features = ['first_active_month', 'card_id', 'target', 'date', 'year']\ntrain_features = [c for c in train.columns if c not in excluded_features]","3b51555d":"# Final fill missing values\nfor col in train_features:\n    for df in [train, test]:\n        if df[col].dtype == \"float64\":\n            df[col] = df[col].fillna(df[col].mean())","9b5009e5":"# Prepare data for training\nX = train.copy()\ny = X['target']\n\n# Split data with kfold\nkfolds = KFold(n_splits=5, shuffle=True, random_state=2018)\n\n# Make importance dataframe\nimportances = pd.DataFrame()\n\noof_preds = np.zeros(X.shape[0])\nsub_preds = np.zeros(test.shape[0])\n\nfor n_fold, (trn_idx, val_idx) in enumerate(kfolds.split(X, y)):\n    X_train, y_train = X[train_features].iloc[trn_idx], y.iloc[trn_idx]\n    X_valid, y_valid = X[train_features].iloc[val_idx], y.iloc[val_idx]\n    \n    # XGBoost Regressor estimator\n    model = xgb.XGBRegressor(\n        max_depth = 31,\n        learning_rate = 0.03,\n        n_estimators = 1000,\n        subsample = .9,\n        colsample_bylevel = .9,\n        colsample_bytree = .9,\n        min_child_weight= .9,\n        gamma = 0,\n        random_state = 100,\n        booster = 'gbtree',\n        objective = 'reg:linear'\n    )\n    \n    # Fit\n    model.fit(\n        X_train, y_train,\n        eval_set=[(X_train, y_train), (X_valid, y_valid)],\n        verbose=None, eval_metric='rmse',\n        early_stopping_rounds=100\n    )\n    \n    # Feature importance\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = model.feature_importances_\n    imp_df['fold'] = n_fold + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_preds[val_idx] = model.predict(X_valid)\n    test_preds = model.predict(test[train_features])\n    sub_preds += test_preds \/ kfolds.n_splits\n    \nprint(np.sqrt(mean_squared_error(y, oof_preds)))","1d943792":"importances['gain_log'] = importances['gain']\nmean_gain = importances[['gain', 'feature']].groupby('feature').mean()\nimportances['mean_gain'] = importances['feature'].map(mean_gain['gain'])\n\nplt.figure(figsize=(8, 12))\nsns.barplot(x='gain_log', y='feature', data=importances.sort_values('mean_gain', ascending=False))","0cce63e3":"# Length of submission\nlen(sub_preds)","cefa37b2":"sub_preds","a80862d1":"# Make submission\nsample_submission['target'] = sub_preds\nsample_submission.to_csv(\"xgb_submission.csv\", index=False)\nsample_submission.head()","df68c808":"# One Hot Encoding","6757a215":"# Make submission","eafb2876":"# XGBoost training","a44cbd0b":"# Preprocessing\n","524f395e":"# Load datasets","2d0b48fa":"## Merge with historical transactions","980c0d47":"## Merge with new merchant","9bb0ef23":"## Final fill NA","7e02b850":"# Feature Importances","928cb611":"# Notes\n\n* This kernel is cover baseline modeling with XGBoost","3130e312":"# Load libs"}}