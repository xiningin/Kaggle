{"cell_type":{"f100b389":"code","8a3b0b60":"code","77c826cd":"code","fdb905f6":"code","80908863":"code","c661c775":"code","f0b452bc":"code","4362874a":"code","b8b5f00c":"code","861b9be1":"code","2d716158":"code","e1635284":"code","b85c5d4d":"code","c13dde34":"code","85118375":"code","effb53c2":"code","8fc41ac8":"code","6ac891b9":"code","5af5639d":"code","c61f5b6a":"code","0c70913f":"code","42899c14":"code","caf9c52b":"code","52bd3b54":"code","4a9f9bc0":"code","3bf5f1ad":"code","d4c5099e":"code","25040414":"code","ba26b456":"code","565658d6":"code","921556e2":"code","2183eeda":"code","22d7da5f":"code","7f0da5d8":"code","29de6235":"code","28d60024":"code","8da61b61":"code","28b7d68c":"code","3a778aab":"code","ad3a45be":"code","4fc08f39":"code","e0d81a0a":"code","338ba2e2":"code","fa3847b6":"code","9793df0f":"code","aac16fe5":"code","24ddbf5c":"code","672c3c79":"code","d65c3065":"code","f202ff16":"code","b8a822e1":"code","4723223d":"code","7e0b221e":"code","52598d68":"code","1719c6ed":"code","bae19080":"code","c137265b":"markdown","eeea3c50":"markdown"},"source":{"f100b389":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8a3b0b60":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","77c826cd":"from sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas_datareader as web\nimport datetime as dt","fdb905f6":"import keras\nimport tensorflow as tf\nfrom keras.models import Model\nfrom keras.layers import Dense, Dropout, LSTM, Input, Activation, concatenate\nfrom keras import optimizers\nimport time","80908863":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom statsmodels.tsa.seasonal import seasonal_decompose","c661c775":"df1=pd.read_csv(\"\/kaggle\/input\/bitstamp-btc-stock-time-series\/bitstampUSD_1-min_data_2012-01-01_to_2020-04-22.csv\")","f0b452bc":"df1.head()","4362874a":"df1.shape","b8b5f00c":"sns.heatmap(df1.isnull(),yticklabels=False)","861b9be1":"df1.dropna(how='any',inplace=True)#drops rows who have all of their inputs as NaN ","2d716158":"df1.shape","e1635284":"df1.head()","b85c5d4d":"plt.plot(df1['Close'], color=\"black\")\nplt.show()","c13dde34":"df1.dtypes","85118375":"#first =df1[\"Timestamp\"][0]","effb53c2":"#from datetime import datetime\n#dt_obj = datetime.fromtimestamp(first)\n  \n#print(\"date_time:\",dt_obj)\n#print(\"type of dt:\",type(dt_obj))","8fc41ac8":"\n%matplotlib inline \nplt.gcf().set_size_inches(20, 10, forward=True)\nplt.plot(df1['Weighted_Price'], color=\"black\")\n\nplt.title(\" Share Price\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Share Price\")\n\nplt.show()\n","6ac891b9":"#pd.to_datetime(df1['Timestamp']).apply(lambda x: x.date())","5af5639d":"#df2=df1\n#pd.to_datetime(df2['Timestamp']).dt.date","c61f5b6a":"#df1.head()","0c70913f":"#df2.head()","42899c14":"df1[\"Date\"]=df1.Timestamp.apply(lambda x: pd.datetime.fromtimestamp(x).date())","caf9c52b":"df1.head()","52bd3b54":"df1.drop(['Timestamp'], axis = 1,inplace=True)","4a9f9bc0":"df1.head()","3bf5f1ad":"df1.set_index('Date', inplace=True)\ndf1.info()","d4c5099e":"df1.head()","25040414":"df1.tail()","ba26b456":"%matplotlib inline \nplt.gcf().set_size_inches(20, 10, forward=True)\nplt.plot(df1['Weighted_Price'], color=\"red\")\n\nplt.title(\" Share Price\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Share Price\")\n\nplt.show()\n","565658d6":"df2 = df1[2458600:]","921556e2":"df2","2183eeda":"%matplotlib inline \nplt.gcf().set_size_inches(20, 10, forward=True)\nplt.plot(df2['Weighted_Price'], color=\"red\")\n\nplt.title(\" Share Price\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Share Price\")\n\nplt.show()","22d7da5f":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom matplotlib import pyplot\nresult = seasonal_decompose(df2[\"Weighted_Price\"], model ='additive', period=100000)\nresult.plot()\npyplot.show()","7f0da5d8":"from sklearn import preprocessing\ndata_normaliser = preprocessing.StandardScaler()\ndf2_normalised = data_normaliser.fit_transform(df2)","29de6235":"df2_normalised[0,:]","28d60024":"history_points=60\n ","8da61b61":"ohlcv_histories_normalised = np.array([df2_normalised[i  : i + history_points].copy() for i in range(len(df2_normalised) - history_points)])","28b7d68c":"weighted_avg_values_normalised = np.array([df2_normalised[:,-1][i + history_points].copy() for i in range(len(df2_normalised) - history_points)])","3a778aab":"print(weighted_avg_values_normalised.shape)\nweighted_avg_values_normalised = np.expand_dims(weighted_avg_values_normalised, -1)\nweighted_avg_values_normalised.shape","ad3a45be":"weighted_avg_values = np.array([df2[\"Weighted_Price\"][i + history_points].copy() for i in range(len(df2) - history_points)])","4fc08f39":"y_normaliser = preprocessing.StandardScaler()\ny_normaliser.fit(np.expand_dims( weighted_avg_values,-1 ))","e0d81a0a":"print(weighted_avg_values.shape)","338ba2e2":"test_split = 0.95 # the percent of data to be used for testing\nn = int(ohlcv_histories_normalised.shape[0] * test_split)\nn","fa3847b6":"x_train = ohlcv_histories_normalised[:n]\nprint(x_train.shape)","9793df0f":"y_train = weighted_avg_values_normalised[:n]\ny_train.reshape(n,1)\nprint(y_train.shape)","aac16fe5":"x_test = ohlcv_histories_normalised[n:]\ny_test = weighted_avg_values_normalised[n:]","24ddbf5c":"corrMatx =  df1.corr()\ncorrMatx","672c3c79":"start = time.process_time()\nmodel21=Sequential()\nmodel21.add(LSTM(units=100, return_sequences=True, input_shape=(history_points,7)))\nmodel21.add(Dropout(0.20))\nmodel21.add(LSTM(units=100, return_sequences=True))\nmodel21.add(Dropout(0.20)) \nmodel21.add(LSTM(units=100, return_sequences=True))\nmodel21.add(Dropout(0.20)) \nmodel21.add(LSTM(units=100))\nmodel21.add(Dropout(0.20)) \nmodel21.add(Dense(units=1))\nmodel21.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\nmodel21.fit(x_train,y_train,batch_size=640, epochs=12) \nprint(time.process_time() - start)","d65c3065":"print(model21.summary())","f202ff16":"y_test_predicted21 = model21.predict(x_test)","b8a822e1":"y_test= y_normaliser.inverse_transform(y_test)\ny_test","4723223d":"y_test_predicted21 = y_normaliser.inverse_transform(y_test_predicted21)\ny_test_predicted21","7e0b221e":"plt.gcf().set_size_inches(22, 10, forward=True)\n\nstart = 0\nend = -1\n#actual=plt.plot(actual[start+60:end], label= \"actual\")\nreal = plt.plot(y_test[start:end], label='real', color=\"black\")\npred = plt.plot(y_test_predicted21[start:end], label='predicted', color=\"red\")\n\nplt.legend(['Real', 'Predicted'])\nplt.title(\" Share Price\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Share Price\")\nplt.show()","52598d68":"real_mse21 = np.mean(np.square(y_test - y_test_predicted21))\nmape21 = np.mean(np.abs((y_test - y_test_predicted21)\/y_test))","1719c6ed":"real_mse21","bae19080":"mape21","c137265b":"To find out the null values","eeea3c50":"time series analysis"}}