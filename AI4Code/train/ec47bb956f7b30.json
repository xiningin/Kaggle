{"cell_type":{"2def4c33":"code","37942e93":"code","dccd9597":"code","ac00e5d1":"code","674c92e1":"code","b947b5e6":"code","062c9202":"code","34424fc1":"code","0a0cfa10":"code","5bf8f2fd":"code","442b8bd8":"code","6efc5a13":"code","fb1591ae":"code","61dbd232":"code","97dd8e91":"code","3bc143e8":"code","8b76518a":"code","6e86260e":"code","6b810677":"code","b73230c7":"code","62e0fcc0":"code","23e80f22":"code","9223c412":"code","677ba2fd":"code","34913fed":"code","686278e4":"code","f6c52eda":"code","855ec9ad":"code","d2721abe":"code","2d55dd13":"code","4ffce063":"code","44fd388c":"code","f2d5845c":"code","981d6958":"code","1126cb17":"code","ca8ee359":"code","dfedb4bd":"code","19f9b359":"code","c808617e":"code","300f3224":"code","601f193b":"code","12e12ba1":"code","d9188feb":"code","2bc0f30a":"code","5390c152":"code","c9b9b4c4":"code","f786103d":"code","76c3be49":"code","09ecb3b8":"code","3e02ea67":"code","ac428547":"code","fd5a2352":"code","f60c5a52":"code","7b1a50e4":"code","eb546125":"code","77b1d630":"code","ec400ed0":"code","eb4cc106":"code","009dd599":"code","12116f4f":"code","4e4614c3":"markdown","ccaadb82":"markdown","9db2c4c6":"markdown","5dd0c527":"markdown","8889f4f0":"markdown","92e0debd":"markdown","2d560172":"markdown","467a7b02":"markdown","e6bca725":"markdown","4ba13e7d":"markdown","514680a4":"markdown","c8ea3249":"markdown","c9c93e5c":"markdown","5fff73fa":"markdown","c1ce6b39":"markdown","777fc02d":"markdown"},"source":{"2def4c33":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","37942e93":"ad_data = pd.read_csv('..\/input\/clicked-on-add\/advertising.csv')","dccd9597":"ad_data.head()","ac00e5d1":"ad_data.info()","674c92e1":"ad_data.describe()","b947b5e6":"sns.set_style('whitegrid')\nad_data['Age'].hist(bins=30)\nplt.xlabel('Age')","062c9202":"sns.countplot(data=ad_data,x='Clicked on Ad')","34424fc1":"sns.jointplot(x='Age',y='Area Income',data=ad_data,hue='Clicked on Ad')","0a0cfa10":"sns.jointplot(x='Age',y='Daily Time Spent on Site',data=ad_data,color='red',kind='kde');","5bf8f2fd":"sns.jointplot(x='Daily Time Spent on Site',y='Daily Internet Usage',data=ad_data,color='green',hue='Clicked on Ad')","442b8bd8":"sns.pairplot(ad_data,hue='Clicked on Ad',palette='bwr')","6efc5a13":"ad_data['Timestamp'] = pd.to_datetime(ad_data['Timestamp'])\n\nad_data['Hour'] = ad_data['Timestamp'].apply(lambda time: time.hour)\nad_data['Month'] = ad_data['Timestamp'].apply(lambda time: time.month)\nad_data['Day of Week'] = ad_data['Timestamp'].apply(lambda time: time.dayofweek)\nad_data['Year'] = ad_data['Timestamp'].apply(lambda time: time.year)\nad_data['Minute'] = ad_data['Timestamp'].apply(lambda time: time.minute)\nad_data['Second'] = ad_data['Timestamp'].apply(lambda time: time.second)","fb1591ae":"ad_data.info()","61dbd232":"ad_data = ad_data.drop(['Ad Topic Line'],axis=1)\nad_data = ad_data.drop(['Country'],axis=1)\nad_data = ad_data.drop(['City'],axis=1)\nad_data = ad_data.drop(['Timestamp'],axis=1)","97dd8e91":"ad_data.info()","3bc143e8":"from sklearn.model_selection import train_test_split","8b76518a":"ad_data.columns","6e86260e":"X = ad_data[['Daily Time Spent on Site', 'Age', 'Area Income',\n       'Daily Internet Usage', 'Male', 'Hour', 'Month',\n       'Day of Week', 'Year', 'Minute', 'Second']]\ny = ad_data['Clicked on Ad']","6b810677":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","b73230c7":"from sklearn.linear_model import LogisticRegression","62e0fcc0":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","23e80f22":"predictions = logmodel.predict(X_test)","9223c412":"from sklearn.metrics import classification_report,confusion_matrix","677ba2fd":"print(classification_report(y_test,predictions))\nprint('\\n')\nprint(confusion_matrix(y_test,predictions))","34913fed":"from sklearn.metrics import accuracy_score\naccLR = accuracy_score(y_test,predictions)*100\naccLR","686278e4":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm\nfrom sklearn.metrics import classification_report,confusion_matrix","f6c52eda":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","855ec9ad":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","d2721abe":"model= Sequential()\n\nmodel.add(Dense(11, activation='relu'))\nmodel.add(Dropout(0.2))\n          \nmodel.add(Dense(6, activation='relu'))\nmodel.add(Dropout(0.2))\n          \nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='RMSProp',loss='binary_crossentropy') \n","2d55dd13":"model.fit(x=X_train, \n          y=y_train, \n          epochs=300,\n          batch_size=64,\n          validation_data=(X_test, y_test), )","4ffce063":"losses = pd.DataFrame(model.history.history)","44fd388c":"losses[['loss','val_loss']].plot()","f2d5845c":"pred = model.predict_classes(X_test)","981d6958":"print(classification_report(y_test,pred))\nprint('\\n')\nprint(confusion_matrix(y_test,pred))","1126cb17":"from sklearn.metrics import accuracy_score\naccNN = accuracy_score(y_test,pred)*100\naccNN","ca8ee359":"from sklearn.ensemble import RandomForestClassifier","dfedb4bd":"rfc = RandomForestClassifier(n_estimators=200)","19f9b359":"rfc.fit(X_train,y_train)","c808617e":"rfc_preds = rfc.predict(X_test)","300f3224":"print(classification_report(y_test,rfc_preds))\nprint('\\n')\nprint(confusion_matrix(y_test,rfc_preds))","601f193b":"accRF = accuracy_score(y_test,rfc_preds)*100\naccRF","12e12ba1":"from sklearn.tree import DecisionTreeClassifier","d9188feb":"dtree = DecisionTreeClassifier()","2bc0f30a":"dtree.fit(X_train,y_train)","5390c152":"pre = dtree.predict(X_test)","c9b9b4c4":"print(classification_report(y_test,pre))\nprint('\\n')\nprint(confusion_matrix(y_test,pre))","f786103d":"accDT = accuracy_score(y_test,pre)*100\naccDT","76c3be49":"from sklearn.svm import SVC","09ecb3b8":"svc_model = SVC()","3e02ea67":"svc_model.fit(X_train,y_train)","ac428547":"predSVM = svc_model.predict(X_test)","fd5a2352":"print(classification_report(y_test,predSVM))\nprint('\\n')\nprint(confusion_matrix(y_test,predSVM))","f60c5a52":"accSVM = accuracy_score(y_test,predSVM)*100\naccSVM","7b1a50e4":"from sklearn.model_selection import GridSearchCV","eb546125":"param_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001]} ","77b1d630":"grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)\ngrid.fit(X_train,y_train)","ec400ed0":"grid_predictions = grid.predict(X_test)","eb4cc106":"print(classification_report(y_test,grid_predictions))\nprint('\\n')\nprint(confusion_matrix(y_test,grid_predictions))","009dd599":"accGRID = accuracy_score(y_test,predSVM)*100\naccGRID","12116f4f":"conc = [accLR,\naccNN,\naccRF,\naccDT,\naccSVM,\naccGRID,]\nans = pd.DataFrame(conc,columns=['ACCURACY OF MODELS'],index=['Logistic Regression',\n                                                                  'Neural Network',\n                                                                  'Random Forest',\n                                                                  'Descision Tree',\n                                                                  'SVM',\n                                                                   'Grid Search'])\nans","4e4614c3":"#    THANK YOU !!!","ccaadb82":"# --------------------------------------------------------------------------------------------------------------- ","9db2c4c6":"# ---------------------------------------------------------------------------------------------------------------","5dd0c527":"# 1) Logistic Regression","8889f4f0":"** Finally, create a pairplot with the hue defined by the 'Clicked on Ad' column feature.**","92e0debd":"#  So we can see that LOGISTIC REGRESSION was the best fit then followed by SVM , GRID SEARCH and NEURAL NETWORK...     ","2d560172":"# --------------------------------------------------------------------------------------------------------------","467a7b02":"# 6) Grid Search ","e6bca725":"# ---------------------------------------------------------------------------------------------------------------","4ba13e7d":"# ---------------------------------------------------------------------------------------------------------------","514680a4":"# 3) Random Forest ","c8ea3249":"# --------------------------------------------------------------------------------------------------------------","c9c93e5c":"# ---------------------------------------------------------------------------------------------------------------","5fff73fa":"# 4) Descision Tree","c1ce6b39":"# 5) SVM ","777fc02d":"# 2) Neural Network "}}