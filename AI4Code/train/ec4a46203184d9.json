{"cell_type":{"313dd93d":"code","7c787bcf":"code","a548a1c4":"code","14738449":"code","48748b87":"code","78658c0b":"code","c2e6bb3f":"code","cdbd478f":"code","6aa09b70":"code","20326ff5":"code","cc462e80":"code","0582e0d4":"code","88f2e404":"code","e5ad6507":"code","906f1cd7":"code","72838782":"code","0661111b":"code","b1c59c52":"code","47621156":"code","8964e331":"code","f861be5f":"code","2ec3158d":"code","547f4847":"code","5687d007":"code","5616867f":"code","8a3bd104":"markdown","65daacc8":"markdown","0510f321":"markdown","4cbf1787":"markdown"},"source":{"313dd93d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use(\"ggplot\")","7c787bcf":"data = pd.read_csv(\"..\/input\/Iris.csv\")","a548a1c4":"data.head()","14738449":"data.info()","48748b87":"data.isnull().sum()","78658c0b":"data.describe()","c2e6bb3f":"#Drop \"Id\" Column\ndata.drop([\"Id\"],axis=1,inplace=True)","cdbd478f":"data.Species.value_counts(ascending=False) ","6aa09b70":"#One-Hot-Encoding\ndata.loc[:,\"Species\"] = data.Species.replace([\"Iris-virginica\" , \"Iris-versicolor\" , \"Iris-setosa\"] , [1,2,3])","20326ff5":"#Correlation Map\nplt.figure(figsize = (10,5))\nsns.heatmap(data.corr() , annot=True)\n\nplt.tight_layout()\nplt.show()","cc462e80":"corr_m = data.corr()\ncorr_m[\"Species\"].sort_values(ascending=False)","0582e0d4":"plt.figure(figsize = (20,7))\n\nsns.countplot(x = \"SepalLengthCm\" , hue=\"Species\" , data=data)\nplt.legend([\"Iris-virginica\" , \"Iris-versicolor\" , \"Iris-setosa\"] , loc=1 , fontsize=\"xx-large\" )\nplt.title(\"Sepal Length\")\n\nplt.show()","88f2e404":"plt.figure(figsize = (20,7))\n\nsns.countplot(x = \"SepalWidthCm\" , hue=\"Species\" , data=data)\nplt.legend([\"Iris-virginica\" , \"Iris-versicolor\" , \"Iris-setosa\"] , loc=1 , fontsize=\"xx-large\" )\nplt.title(\"Sepal Width\")\n\nplt.show()","e5ad6507":"plt.figure(figsize = (20,7))\n\nsns.countplot(x = \"PetalLengthCm\" , hue=\"Species\" , data=data)\nplt.legend([\"Iris-virginica\" , \"Iris-versicolor\" , \"Iris-setosa\"] , loc=1 , fontsize=\"xx-large\" )\nplt.title(\"Petal Length\")\n\nplt.show()","906f1cd7":"plt.figure(figsize = (20,7))\n\nsns.countplot(x = \"PetalWidthCm\" , hue=\"Species\" , data=data)\nplt.legend([\"Iris-virginica\" , \"Iris-versicolor\" , \"Iris-setosa\"] , loc=1 , fontsize=\"xx-large\" )\nplt.title(\"Petal Width\")\n\nplt.show()","72838782":"data.plot(kind = \"scatter\" ,  x = \"Species\" , y = \"SepalLengthCm\" , figsize = (10,5) )\n\nplt.title(\"SpealLengthCm\")\nplt.show()","0661111b":"data.plot(kind = \"scatter\" ,  x = \"Species\" , y = \"SepalWidthCm\" , figsize = (10,5) )\n\nplt.title(\"SepalWidthCm\")\nplt.show()","b1c59c52":"data.plot(kind = \"scatter\" ,  x = \"Species\" , y = \"PetalLengthCm\" , figsize = (10,5) )\n\nplt.title(\"PetalLengthCm\")\nplt.show()","47621156":"data.plot(kind = \"scatter\" ,  x = \"Species\" , y = \"PetalWidthCm\" , figsize = (10,5) )\n\nplt.title(\"PetalWidthCm\")\nplt.show()","8964e331":"sns.pairplot(data , hue=\"Species\")\n\nplt.show()","f861be5f":"data.boxplot(by = \"Species\" , figsize=(12,6))\n\nplt.show()","2ec3158d":"#Create x and y\ny = data[\"Species\"]\ndata.drop([\"Species\"] , axis=1 , inplace=True)\nx = data","547f4847":"#Normalization\nfrom sklearn.preprocessing import StandardScaler\nx = StandardScaler().fit_transform(x)","5687d007":"#train test split\nfrom sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x , y , test_size=0.25 , random_state=0)","5616867f":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\n#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=27,random_state=42)\nrf.fit(x_train,y_train)\n\n#Knn\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=4)\nknn.fit(x_train,y_train)\n\n#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\n\n#Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\n#SVM\nfrom sklearn.svm import SVC\nsvm = SVC(random_state=1)\nsvm.fit(x_train,y_train)\n\n\nprint(\"Decision Tree Score ...: {}\".format(dt.score(x_test,y_test)))\nprint(\"Random Forest Score ...: {}\".format(rf.score(x_test,y_test)))\nprint(\"Knn Score : {}\".format(knn.score(x_test,y_test)))\nprint(\"Logistic Regression Score {}\".format(lr.score(x_test,y_test)))\nprint(\"Naive Bayes Score ...: {}\".format(nb.score(x_test,y_test)))\nprint(\"SVM Score ...: {}\".format(svm.score(x_test,y_test)))","8a3bd104":"*Naive bayes has 100% score for all Iris Species.*","65daacc8":"**If you dont want to be complex with maps , you can use this version of heatmap :)**","0510f321":"**We can see the characteristic features of Species. Between 4.3 cm and 4.8 cm sepal length , there is just Iris-Setosa , also between 7.1 cm and 7.9 cm Sepal Length,there is just  Iris-Virginica.  Iris=versicolor has more range which is 4.9 cm to 7.0 cm. **","4cbf1787":"There is no need to use `stratify` for train-test-split"}}