{"cell_type":{"b2624226":"code","b19fe9e5":"code","3c7836ce":"code","1ffc4141":"code","a6b11582":"code","6e7f0635":"code","11fbfa5a":"code","6e9ee4ae":"code","c42377c1":"code","7d087629":"code","cfc7be93":"code","8d439bd8":"code","4bd9ec05":"code","a5067efd":"code","d8621b92":"code","f974cb2e":"code","d2c0f959":"code","f0ec2094":"code","1993d809":"code","bb27f4bf":"markdown","5f8bd566":"markdown","c3da0715":"markdown","9b61077b":"markdown","91f398b9":"markdown","e840bffe":"markdown","6995c339":"markdown","fe18b6bb":"markdown","b830ef8b":"markdown","b0a6870e":"markdown","8c02386c":"markdown","a49c07e1":"markdown"},"source":{"b2624226":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b19fe9e5":"dataset=pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')","3c7836ce":"print(dataset.info())","1ffc4141":"sns.distplot(dataset['Age'],kde=True,bins=10)\nplt.show()","a6b11582":"sns.distplot(dataset['Na_to_K'],kde=True,bins=10)\nplt.show()","6e7f0635":"sns.countplot(x='Sex',data=dataset)\nplt.show()","11fbfa5a":"plt.figure(figsize=(12,8))\nsns.stripplot(x='BP',y='Age',data=dataset,hue='Drug',jitter=True,dodge=True)\nplt.xticks(rotation=45)\nplt.show()","6e9ee4ae":"sns.pairplot(dataset,kind = \"scatter\",hue = \"Drug\")\nplt.show()","c42377c1":"plt.figure(figsize=(8,6))\nsns.violinplot(data=dataset,x='Drug',y='Age',hue='Sex',palette='PRGn')\nplt.show()","7d087629":"plt.figure(figsize=(12,8))\nsns.countplot(data=dataset,x='BP',hue='Drug')\nplt.show()","cfc7be93":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndataset['Drug']=le.fit_transform(dataset['Drug'])\ndataset=pd.get_dummies(dataset)\n","8d439bd8":"from sklearn.model_selection import train_test_split\n\nx = dataset.drop(['Drug'],axis=1)\ny = dataset.Drug\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42, shuffle = True)\n\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)\n\n","4bd9ec05":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\naccuracies = cross_val_score(knn, x_train, y_train, cv=5)\nknn.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",knn.score(x_test,y_test))","a5067efd":"grid={'n_neighbors':np.arange(1,100),\n       'p':np.arange(1,5),\n       'weights':['uniform','distance']\n      }\nknn=KNeighborsClassifier()\nknn_cv=GridSearchCV(knn,grid,cv=5)\nknn_cv.fit(x_train,y_train)\nprint(\"Hyperparameters:\",knn_cv.best_params_)\nprint(\"Train Score:\",knn_cv.best_score_)\nprint(\"Test Score:\",knn_cv.score(x_test,y_test))","d8621b92":"from sklearn.ensemble import  RandomForestClassifier\nrfc=RandomForestClassifier(random_state=42)\naccuracies=cross_val_score(rfc,x_train,y_train,cv=5)\nrfc.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',rfc.score(x_test,y_test))","f974cb2e":"grid = {'n_estimators':np.arange(10,1000,10),\n        'criterion':['gini','entropy']\n       }\n\nrf = RandomForestClassifier(random_state = 42)\nrf_cv = GridSearchCV(rf,grid,cv=5)\nrf_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",rf_cv.best_params_)\nprint(\"Train Score:\",rf_cv.best_score_)\nprint(\"Test Score:\",rf_cv.score(x_test,y_test))","d2c0f959":"from sklearn.pipeline import Pipeline \nfrom sklearn.preprocessing  import StandardScaler \nfrom sklearn.svm import LinearSVC\nsvm_clf=Pipeline((\n   ('scaler',StandardScaler()),\n   ('linear_svc',LinearSVC(C=1,loss='hinge')), \n))\naccuracies=cross_val_score(svm_clf,x_train,y_train,cv=5)\nsvm_clf.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',svm_clf.score(x_test,y_test))","f0ec2094":"from sklearn.svm import SVC\ngrid = {\n    'C':[0.01,0.1,1,10,100],\n    'kernel' : [\"linear\",\"poly\",\"rbf\",\"sigmoid\"],\n    'degree' : [1,2,3,4,5,7],\n    'gamma' : [0.01,1]\n}\n\nsvm  = SVC ();\nsvm_cv = GridSearchCV(svm, grid, cv = 5)\nsvm_cv.fit(x_train,y_train)\nprint(\"Best Parameters:\",svm_cv.best_params_)\nprint(\"Train Score:\",svm_cv.best_score_)\nprint(\"Test Score:\",svm_cv.score(x_test,y_test))\n","1993d809":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nada_clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=4), n_estimators=200,algorithm=\"SAMME.R\", learning_rate=0.5) \nada_clf.fit(x_train, y_train)\naccuracies=cross_val_score(ada_clf,x_train,y_train,cv=5)\nada_clf.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',ada_clf.score(x_test,y_test))\n","bb27f4bf":"<a id='6'><\/a>\n# KNN GridSearch","5f8bd566":"<a id='3'><\/a>\n# Data Preperation","c3da0715":"<a id='1'><\/a>\n# Load and Check Data","9b61077b":" <a id='9'><\/a>\n # Linear SVC","91f398b9":"<a id='7'><\/a>\n# Random Forest","e840bffe":"<a id='5'><\/a>\n# KNN","6995c339":"<a id='10'><\/a>\n# SVC GridSearch","fe18b6bb":"* [Load and Check Data](#1)<br><br>\n* [EDA](#2)\n* [Data Preperation](#3)\n* [Classification](#4)\n  * [KNN](#5)\n  * [KNN GridSearch](#6)\n  * [Random Forest](#7)\n  * [Random Forest GridSearch](#8)\n  * [SVC](#9)\n  * [SVC GridSearch](#10)\n  * [AdaBoost](#11)\n ","b830ef8b":"<a id='8'><\/a>\n# Random Forest GridSearch","b0a6870e":"<a id='11'><\/a>\n# AdaBoost","8c02386c":"![sr.jpg](attachment:sr.jpg)","a49c07e1":"<a id='2'><\/a>\n# EDA"}}