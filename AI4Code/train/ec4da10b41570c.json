{"cell_type":{"a96df8fe":"code","269cc400":"code","ec032291":"code","5f01246f":"code","02edebc8":"code","ec67e48d":"code","fc10bea6":"code","34876250":"code","7fd50cc8":"code","64ddf03c":"code","6dcda7a9":"code","731d32e1":"code","6d4dfa5d":"code","b70fac38":"code","e8be6232":"markdown","4a49f1d7":"markdown","bed86dc9":"markdown","286072b0":"markdown","4f16c9e6":"markdown","23f28042":"markdown","d95e0b6a":"markdown","1fd74a68":"markdown","f9aa908a":"markdown","edbb54b2":"markdown","ceeb4742":"markdown"},"source":{"a96df8fe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport random\nimport sys\nimport gc\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import LabelBinarizer\nimport PIL\nfrom PIL import Image\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\n\nimport keras\nfrom keras.applications import Xception\nfrom keras import layers\nfrom keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D, GlobalAveragePooling2D, Dropout\nfrom keras import optimizers\nfrom keras import models\nfrom keras.models import Sequential, Model\nfrom keras import preprocessing\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.utils import plot_model","269cc400":"img_size = 299\nbatch_size = 32\nepochs = 50\ntrain_size = 0.7\nval_size = 0.2\ntest_size = 0.1\nseed = 4321\nchannels = 3\nlearning_rate = 0.00001","ec032291":"d = '..\/input\/tobacco3482-jpg\/Tobacco3482-jpg\/'\nPATH = '..\/'\n\nclasses = (os.listdir(d))\n\npaths = [os.path.join(d, o) for o in os.listdir(d) \n                    if os.path.isdir(os.path.join(d,o))]\n\nnbEntries = []\n\nfor i in range(len(classes)):\n    nbEntries.append(len(os.listdir(paths[i])))\n\n#################################################\n    \nprint(classes)\nprint(nbEntries)\n\ndf = pd.DataFrame({'classes':classes, 'entries':nbEntries})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 classes Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-30))","5f01246f":"total_set = []\ntotal_labels = []\n\n\nfor root, dirs, files in os.walk(d):\n    for file in files:\n        if file.endswith(\".jpg\"):\n            path = os.path.join(root, file)\n            total_set.append(path)\n            total_labels.append(root.split(os.path.sep)[-1])\n            \n\n# Return image class based on list entry (path)         \ndef getClass(img):\n    return img.split(os.path.sep)[-2]\n\n\nprint(total_set[0])\nprint('GetClass : ', getClass(total_set[0]))\nprint('Label : ', total_labels[0])","02edebc8":"random.Random(seed).shuffle(total_set)\n\nfor ima in total_set[0:3] :\n    print(ima)\n    img = mpimg.imread(ima)\n    plt.figure(figsize=(7,7))\n    imgplot = plt.imshow(img, cmap=\"gray\")\n    plt.show()\n","ec67e48d":"# Get data and separate it in sets\ntotal_len = len(total_set)\nindex = 0\n\ntrain_set = []\ntrain_label = []\n\nval_set = []\nval_label = []\n\ntest_set = []\ntest_label = []\n\n\nfor i in total_set[0: int(total_len*train_size)] :\n    train_set.append(i)\n    train_label.append(getClass(i))\n    \nindex = int(total_len*train_size)+1\n    \nfor i in total_set[index: int(index + total_len*val_size)] :\n    val_set.append(i)\n    val_label.append(getClass(i))\n    \nindex = int(index + total_len*val_size)+1 \n\nfor i in total_set[index: total_len] :\n    test_set.append(i)\n    test_label.append(getClass(i))\n\nprint(val_set[200])\nprint(val_label[200])\n","fc10bea6":"#################################################\n# TRAIN SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in train_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 TRAIN SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-20))\n\n#################################################\n# VAL SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in val_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 VAL SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-3))\n    \n#################################################\n# TEST SET\ninstances = [0] * len(classes)\nfor index, val in enumerate(classes) :\n    for e in test_set :\n        if(val == getClass(e)) :\n            instances[index] += 1\n\n            \ndf = pd.DataFrame({'classes':classes, 'entries':instances})\nax = df.sort_values(by='entries', ascending=True).plot.bar(x='classes', y='entries', color='cornflowerblue',legend=False, figsize=(12,8))\nax.set_title('Tobacco3482 TEST SET Distribution')\nax.set_ylabel(\"# entries\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), xy=(p.get_x(), p.get_height()-8))","34876250":"def process_images(img_set) : \n    processed_img = []\n\n    for i in range(len(img_set)) :\n        processed_img.append(cv2.resize(cv2.imread(img_set[i], cv2.IMREAD_COLOR), (img_size, img_size)))\n    \n    return processed_img\n    \nx_train = process_images(train_set)\nx_test = process_images(test_set)\nx_val = process_images(val_set)","7fd50cc8":"lb = LabelBinarizer()\nlb.fit(list(classes))\n\nx_train = np.array(x_train)\ny_train =lb.transform(np.array(train_label))\n\nx_test = np.array(x_test)\ny_test = lb.transform(np.array(test_label))\n\nx_val = np.array(x_val)\ny_val = lb.transform(np.array(val_label))\n\nprint(\"train shape : \", x_train.shape)\nprint(y_train.shape)\nprint(\"test shape : \", x_test.shape)\nprint(y_test.shape)\nprint(\"valdiation shape : \", x_val.shape)\nprint(y_val.shape)\n\n\nfor i in range(3) :\n    plt.figure(figsize=(6,6))\n    imgplot = plt.imshow(x_train[i])\n\nprint(train_label[0])\nprint(y_train[0])\nprint(lb.classes_)","64ddf03c":"base_model = Xception(weights = \"imagenet\", include_top=False, input_shape = (img_size, img_size, channels))\n\n#for layer in base_model.layers:\n#    layer.trainable = False\n    \nbase_model.summary()","6dcda7a9":"x = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128,activation='relu')(x) \nx = Dropout(0.5)(x)\npredictions = Dense(len(classes), activation='softmax')(x)\n\n# add your top layer block to your base model\nmodel = Model(base_model.input, predictions)\n    \nmodel.summary()\n\nprint('Number of trainable weights : ', len(model.trainable_weights))\n\nplot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","731d32e1":"model.compile(optimizer=optimizers.Adam(lr=learning_rate), loss='categorical_crossentropy', metrics=['accuracy'])\n\ntrain_model = model.fit(x_train, y_train,\n                        batch_size=batch_size,\n                        epochs=epochs,\n                        verbose=1,\n                        validation_data=(x_val, y_val))","6d4dfa5d":"plt.plot(train_model.history['loss'])\nplt.plot(train_model.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.grid()\nplt.legend(['training loss', 'validation loss'], loc='upper right')\nplt.show()\n\nplt.plot(train_model.history['acc'])\nplt.plot(train_model.history['val_acc'])\nplt.title('model accuracy')\nplt.grid()\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['training accuracy', 'validation accuracy'], loc='lower right')\nplt.show()","b70fac38":"score = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","e8be6232":"# Global variables","4a49f1d7":"# Creating model (pretrained CNN)","bed86dc9":"# Test prediction accuracy","286072b0":"# Sorting data in usable sets\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*HpvpA9pBJXKxaPCl5tKnLg.jpeg)","4f16c9e6":"# Preprocess data (resize and transform to Numpy array)","23f28042":"# Imports","d95e0b6a":"# Plot accuracy and loss","1fd74a68":"# Get classes and entries per classes","f9aa908a":"# Get all images","edbb54b2":"# Visualize classes distribution","ceeb4742":"# Plot data "}}