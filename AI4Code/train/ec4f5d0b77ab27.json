{"cell_type":{"9b2bfd06":"code","ea1d392d":"code","1d2b447b":"code","ee179ceb":"code","baff0b3b":"code","fc79c781":"code","1c48ba1e":"code","b271cd9f":"code","f32a9ede":"code","49d8663e":"code","0e2c249c":"code","32c25ac4":"code","897479b4":"code","3f5b9567":"code","5d62b9db":"code","2728acf3":"code","14c93eb6":"code","53b7e9c9":"code","80e94ef3":"code","5774a27b":"markdown","75bf2865":"markdown","0d66a2eb":"markdown","9a199553":"markdown","679c89ac":"markdown","9e78a58d":"markdown","cbd4cdd5":"markdown","88e51347":"markdown","f7378b1d":"markdown"},"source":{"9b2bfd06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea1d392d":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","1d2b447b":"data.head()","ee179ceb":"data.info()","baff0b3b":"data.describe()","fc79c781":"corr_matrix = data.corr()\ncorr_matrix","1c48ba1e":"import seaborn as sns\nsns.pairplot(data)","b271cd9f":"%matplotlib inline\nimport matplotlib.pyplot as plt","f32a9ede":"corrmat=data.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,20))\n# plot heat map\ng=sns.heatmap(data[top_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","49d8663e":"from sklearn.model_selection import train_test_split\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","0e2c249c":"print(\"total number of rows : {0}\".format(len(data)))\nprint(\"number of rows missing Glucose: {0}\".format(len(data.loc[data['Glucose'] == 0])))\nprint(\"number of rows missing BloodPressure: {0}\".format(len(data.loc[data['BloodPressure'] == 0])))\nprint(\"number of rows missing Insulin: {0}\".format(len(data.loc[data['Insulin'] == 0])))\nprint(\"number of rows missing BMI: {0}\".format(len(data.loc[data['BMI'] == 0])))\nprint(\"number of rows missing DiabetesPedigreeFunction: {0}\".format(len(data.loc[data['DiabetesPedigreeFunction'] == 0])))\nprint(\"number of rows missing Age: {0}\".format(len(data.loc[data['Age'] == 0])))\nprint(\"number of rows missing SkinThickness: {0}\".format(len(data.loc[data['SkinThickness'] == 0])))","32c25ac4":"from sklearn.impute import SimpleImputer\n\nfill_values = SimpleImputer(missing_values=0, strategy=\"mean\")\n\nX_train = fill_values.fit_transform(X_train)\nX_test = fill_values.fit_transform(X_test)","897479b4":"from sklearn.ensemble import RandomForestClassifier\n# from xgboost import XGBClassifier\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.naive_bayes import GaussianNB\nmodel = RandomForestClassifier(random_state=10)\n# model = XGBClassifier()\n# model = DecisionTreeClassifier()\n# model = GaussianNB()","3f5b9567":"model.fit(X_train,y_train) #fitting the model \ny_pred = model.predict(X_test) #prediction\ny_train_pred = model.predict(X_train)","5d62b9db":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","2728acf3":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_test, y_pred)","14c93eb6":"recall_score(y_test, y_pred)","53b7e9c9":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","80e94ef3":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","5774a27b":"## Confusion Matrix, Precison and Recall","75bf2865":"## Model Selection","0d66a2eb":"## Plot Visualizations","9a199553":"## Check how many other missing(zero) values","679c89ac":"## Feature Engineering","9e78a58d":"## F-Score","cbd4cdd5":"## Train-Test Splitting","88e51347":"## Correlations","f7378b1d":"## Accuracy"}}