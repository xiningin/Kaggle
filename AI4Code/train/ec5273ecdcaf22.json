{"cell_type":{"e48aa82f":"code","ceec03a8":"code","ce73dbd6":"code","f53b337a":"code","b0e8ab74":"code","ce6336b6":"code","dc7327a2":"code","0175a2a2":"code","e63ed2f5":"code","2011c4bc":"code","0880dc21":"code","e05d0a4d":"code","6b1ff766":"code","89ed5654":"code","9d24bedb":"code","440f4388":"code","06eb9ee5":"code","a34d74cf":"code","afd1bbd9":"code","91595ea5":"code","0c3ce87f":"code","e1611db8":"code","1206df1d":"code","c7710903":"code","69a18135":"code","1ea20804":"code","da0dd9a4":"code","4ebb5d5a":"code","efb92fbd":"code","0f155814":"code","ad8286a1":"code","45688d44":"code","9f17870b":"markdown","d39f89d2":"markdown","8850cb47":"markdown","02d23230":"markdown","7cc23c04":"markdown","282340f5":"markdown","d610f507":"markdown","ad55cd35":"markdown"},"source":{"e48aa82f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer\n\nfrom shapely.geometry import Point,Polygon\nimport requests ","ceec03a8":"train_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission_csv = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","ce73dbd6":"convert_dict = {'Province_State': str,'Country_Region':str,'ConfirmedCases':int,'Fatalities':int}\nconvert_dict_test = {'Province_State': str,'Country_Region':str}\ntrain_data = train_data.astype(convert_dict)\ntest_data = test_data.astype(convert_dict_test)","f53b337a":"train_data['Date'] = pd.to_datetime(train_data['Date'], infer_datetime_format=True)\ntest_data['Date'] = pd.to_datetime(test_data['Date'], infer_datetime_format=True)","b0e8ab74":"train_data.loc[:, 'Date'] = train_data.Date.dt.strftime('%m%d')\ntrain_data.loc[:, 'Date'] = train_data['Date'].astype(int)\n\ntest_data.loc[:, 'Date'] = test_data.Date.dt.strftime('%m%d')\ntest_data.loc[:, 'Date'] = test_data['Date'].astype(int)","ce6336b6":"train_data['Country_Region'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State']+' '+train_data['Country_Region'])\ntest_data['Country_Region'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State']+' '+test_data['Country_Region'])\n\n#train_data['Province_State'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State']+train_data['Country_Region'])\n#test_data['Province_State'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State']+test_data['Country_Region'])\n\n\n","dc7327a2":"train_data = train_data.drop(columns=['Province_State'])\ntest_data = test_data.drop(columns=['Province_State'])","0175a2a2":"test_data.head(2)","e63ed2f5":"#get list of categorical variables\ns = (train_data.dtypes == 'object')\nobject_cols = list(s[s].index)","2011c4bc":"from sklearn.preprocessing import LabelEncoder","0880dc21":"label_encoder1 = LabelEncoder()\nlabel_encoder2 = LabelEncoder()\n\n#train_data['Province_State'] = label_encoder1.fit_transform(train_data['Province_State'])\n#test_data['Province_State'] = label_encoder1.transform(test_data['Province_State'])\n\ntrain_data['Country_Region'] = label_encoder2.fit_transform(train_data['Country_Region'])\ntest_data['Country_Region'] = label_encoder2.transform(test_data['Country_Region'])\n\n    ","e05d0a4d":"train_data.head(2)","6b1ff766":"test_data.head(2)","89ed5654":"Test_id = test_data.ForecastId","9d24bedb":"train_data.drop(['Id'], axis=1, inplace=True)\ntest_data.drop('ForecastId', axis=1, inplace=True)","440f4388":"missing_val_count_by_column = (train_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column>0])","06eb9ee5":"from xgboost import XGBRegressor","a34d74cf":"train_data.head(1)","afd1bbd9":"X_train = train_data[['Country_Region','Date']]\ny_train = train_data[['ConfirmedCases', 'Fatalities']]","91595ea5":"x_train = X_train.iloc[:,:].values\nx_test = test_data.iloc[:,:].values","0c3ce87f":"#from sklearn.metrics import mean_squared_error","e1611db8":"#X_train,X_test,Y_train,Y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42, shuffle=True)","1206df1d":"error_list = []\ndef return_error(estimator, x_train,x_test,y_train):\n    model = MultiOutputRegressor(XGBRegressor(n_estimators=estimator, random_state=42, max_depth=40))\n    model.fit(x_train, y_train)\n\n    predict = MultiOutputRegressor(model.predict(x_test))\n    \n    #error = mean_squared_error( y_test.values, predict.estimator)\n    #error_list.append(error)\n    \n    return predict","c7710903":"#from sklearn.model_selection import RandomizedSearchCV, GridSearchCV","69a18135":"#num_estimators = [1000,1100,1200,1250,1300]\n#learn_rates = [0.02,0.05,0.06,0.07]\n\n#param_grid = {'n_estimators':num_estimators,\n #             'learning_rate':learn_rates\n#            }","1ea20804":"#random_search = GridSearchCV(XGBRegressor(loss='huber'), param_grid,cv=3,return_train_score=True, n_jobs=1)","da0dd9a4":"#random_search.fit(x_train, y_train.Fatalities)","4ebb5d5a":"#random_search.best_params_","efb92fbd":"#estimator_list = [1200,1250,1300,1350]\n#for value in estimator_list:\n#    error_ = return_error(value, X_train,X_test,Y_train,Y_test)","0f155814":"predict = return_error(2000,x_train,x_test,y_train)","ad8286a1":"df_sub = pd.DataFrame()\ndf_sub['ForecastId'] = Test_id\ndf_sub['ConfirmedCases'] = np.round(predict.estimator[:,0],0)\ndf_sub['Fatalities'] = np.round(predict.estimator[:,1],0)\n\ndf_sub.to_csv('submission.csv', index=False)","45688d44":"df_sub","9f17870b":"**Convert String Datetime to python datetime**","d39f89d2":"**Splitting data train\/test**","8850cb47":"**Submission**","02d23230":"**Label Encoding Country**","7cc23c04":"**Loading Training and Testing Data**","282340f5":"**Make model XGBRegressor**","d610f507":"**Try using Label Encoder**","ad55cd35":"**Check missing value**"}}