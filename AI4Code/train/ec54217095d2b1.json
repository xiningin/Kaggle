{"cell_type":{"6ec918f8":"code","0efcdf51":"code","4549c05f":"code","8c159834":"code","1eb24b45":"code","3a28b178":"code","088aa844":"code","e45b22b1":"code","757bdc28":"code","dc411f5c":"code","e05a0837":"code","22986d74":"code","20913347":"code","2747417b":"code","0ebad42d":"code","25c5ef5d":"code","bd0104a6":"code","5d98ed85":"code","3019bb75":"code","4e0b409b":"code","4bba8e44":"code","1fe4d293":"code","ad2f72ab":"code","d3f075f2":"code","809559e2":"code","65f02a2e":"code","69f769f3":"code","158e61d1":"code","35f74ca2":"code","63647541":"code","76f9d454":"code","2a301a6a":"markdown"},"source":{"6ec918f8":"from pylab import rcParams\nrcParams['figure.figsize'] = 30, 5","0efcdf51":"import numpy   as np\nimport pandas  as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nfrom keras.utils import np_utils\nfrom sklearn.metrics import confusion_matrix,classification_report","4549c05f":"df = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndf.head()","8c159834":"columns = ['age', 'anaemia', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking',\n       'DEATH_EVENT']","1eb24b45":"def plot_data(name):\n    result = df[[name]].value_counts()\n    result.plot(kind=\"bar\")","3a28b178":"for item in columns:\n    plot_data(item)\n    plt.legend()\n    plt.figure()","088aa844":"rel_with_target = df.corr()[['DEATH_EVENT']].sort_values(['DEATH_EVENT'],ascending=True)\nrel_with_target.plot(kind=\"bar\")","e45b22b1":"rel_with_target.plot()","757bdc28":"rel_with_target","dc411f5c":"sns.heatmap(df.corr())","e05a0837":"feature_matrix = df.drop(\"DEATH_EVENT\",axis=1)\ntarget         = df[['DEATH_EVENT']]","22986d74":"new_target = np_utils.to_categorical(target)","20913347":"normalized_fm=(feature_matrix-feature_matrix.min())\/(feature_matrix.max()-feature_matrix.min())","2747417b":"X_train,X_test,y_train,y_test = train_test_split(normalized_fm,new_target,test_size=.2)","0ebad42d":"n_col = X_train.shape[1]","25c5ef5d":"def build_model(n_col):\n    model = Sequential()\n    model.add(Dense(32, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(32, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(64, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(64, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(64, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(64, input_dim=n_col, activation='relu'))\n    model.add(Dropout(.1))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(2, activation='softmax'))\n    # compile the keras model\n    model.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\n    return model","bd0104a6":"model= build_model(n_col)","5d98ed85":"model.summary()","3019bb75":"history = model.fit(X_train,y_train,epochs=100,validation_data=(X_test, y_test))","4e0b409b":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","4bba8e44":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","1fe4d293":"predicted_value = []\nfor item in model.predict(X_test):\n    predicted_value.append(np.argmax(item))\nprint(predicted_value)    \n    \n    ","ad2f72ab":"actual_result = []\nfor item in y_test:\n    actual_result.append(np.argmax(item))","d3f075f2":"pd.DataFrame(predicted_value).value_counts().plot(kind=\"bar\")","809559e2":"pd.DataFrame(actual_result).value_counts().plot(kind=\"bar\")","65f02a2e":"loss,acc = model.evaluate(X_test,y_test)","69f769f3":"print(\"LOSS OF THE MODEL     : {}\".format(loss))\nprint(\"ACCURACY OF THE MODEL : {}\".format(acc))","158e61d1":"report = classification_report(y_pred=predicted_value,y_true=actual_result)","35f74ca2":"print(report)","63647541":"cm = confusion_matrix(predicted_value,actual_result)","76f9d454":"sns.heatmap(cm,annot=True)","2a301a6a":"# EDA"}}