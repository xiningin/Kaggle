{"cell_type":{"7fa32da8":"code","4daedc79":"code","07d75e57":"code","55ec0943":"code","21c2568a":"code","a842ef2e":"code","0b657673":"code","f78f97cc":"code","7915bf30":"code","7416e38c":"code","eea4d977":"code","ac85209a":"code","0b5bb49f":"code","fac6ac8f":"code","ffc09668":"code","04b13c7e":"code","5d32e279":"code","aba03103":"code","6d5fdc3e":"code","aba5c47c":"code","8d9c35b6":"code","6f4b2813":"code","1f54f39d":"code","fd0335f7":"code","2a6d999b":"code","b4ba6d5c":"code","8c221fb4":"code","45f058a8":"code","e6b47db2":"code","637c49dc":"code","781f2360":"code","dae6cfa3":"markdown","9f16c019":"markdown","a48bafa0":"markdown","35f78826":"markdown","4184ff2c":"markdown","0ed8b75c":"markdown","42b82486":"markdown","6532cbd1":"markdown","f458e13e":"markdown","315783b1":"markdown"},"source":{"7fa32da8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4daedc79":"# libraries\nimport seaborn as sns\n\n#color\nfrom colorama import Fore, Back, Style\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n#read the .dcm file\nimport pydicom","07d75e57":"train_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')","55ec0943":"# preview the train dataframe\ntrain_df","21c2568a":"# preview the train dataframe\ntest_df","a842ef2e":"# Check the list of files or folders in the data source\nlist(os.listdir(\"..\/input\/siim-isic-melanoma-classification\/\"))","0b657673":"sample_submission = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\nsample_submission","f78f97cc":"submission1 = sample_submission\nsubmission1.to_csv('submission1.csv',index = False)","7915bf30":"# check if there is missing data in the dataframe\n# check the null part in the whole data set, red part is missing data, blue is non-null\nsns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')\ntrain_df.isnull().sum()","7416e38c":"# check the Missing data distribution in train_df\nfig = px.scatter(train_df.isnull().sum())\n\nfig.update_layout(\n    title=\"Missing Data in train_df\",\n    xaxis_title=\"Columns\",\n    yaxis_title=\"Missing data count\",\n    showlegend=False,\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","eea4d977":"# check if there is missing data in the dataframe\n# check the null part in the whole data set, red part is missing data, blue is non-null\nsns.heatmap(test_df.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')\ntest_df.isnull().sum()","ac85209a":"# check the Missing data distribution in test_df\nfig = px.scatter(test_df.isnull().sum())\n\nfig.update_layout(\n    title=\"Missing Data in test_df\",\n    xaxis_title=\"Columns\",\n    yaxis_title=\"Missing data count\",\n    showlegend=False,\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=12,\n        color=\"RebeccaPurple\"\n    )\n)\n\nfig.show()","0b5bb49f":"# Shape of train and test dataframe\nprint(Fore.RED + 'Training data shape: ',Style.RESET_ALL,train_df.shape)\nprint(Fore.BLUE + 'Test data shape: ',Style.RESET_ALL,test_df.shape)","fac6ac8f":"# Show the list of columns\ncolumns = train_df.keys()\ncolumns = list(columns)\nprint(Fore.RED + \"List of columns in the train_df\",Fore.GREEN + \"\", columns)","ffc09668":"# This dataset has some missing values, which we set to the median of the column for the purpose of this tutorial. \ncleaned_train_df = train_df.dropna()","04b13c7e":"# check if there is missing data in the dataframe\n# check the null part in the whole data set, red part is missing data, blue is non-null\nsns.heatmap(cleaned_train_df.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')\ncleaned_train_df.isnull().sum()","5d32e279":"# verify if the patient_id is unique for the train_df\n\nprint ('Rows in trains_df is', len(train_df))\nprint ('Number of unique patient id is', train_df['patient_id'].nunique())","aba03103":"# verify if the image_name is unique for the train_df\n\nprint ('Rows in trains_df is', len(train_df))\nprint ('Number of unique patient id is', train_df['image_name'].nunique())","6d5fdc3e":"# The Histogram of sex\ntrain_df['sex'].value_counts().iplot(kind='bar',yTitle='Counts',xTitle = 'Sex',linecolor='black',opacity=0.7,color='green',theme='pearl',bargap=0.5,\n                                       gridcolor='white',title='Distribution of the Sex column in the Unique Patient Set')","aba5c47c":"# The Histogram of benign_malignant\ntrain_df['benign_malignant'].value_counts().iplot(kind='bar',yTitle='Counts',xTitle = 'Sex',linecolor='black',opacity=0.7,color='blue',theme='pearl',bargap=0.5,\n                                       gridcolor='white',title='Distribution of the Sex column in the Unique Patient Set')\n","8d9c35b6":"# the 'benign' corresponds to 0 in 'target'.\n# The Histogram of target\ntrain_df['target'].value_counts().iplot(kind='bar',yTitle='Counts',xTitle = 'Sex',linecolor='black',opacity=0.7,color='orange',theme='pearl',bargap=0.5,\n                                       gridcolor='white',title='Distribution of the Sex column in the Unique Patient Set')","6f4b2813":"# The Histogram of tadiagnosisrget\ntrain_df['diagnosis'].value_counts().iplot(kind='bar',yTitle='Counts',xTitle = 'Sex',linecolor='black',opacity=0.7,color='red',theme='pearl',bargap=0.5,\n                                       gridcolor='white',title='Distribution of the Sex column in the Unique Patient Set')","1f54f39d":"# The Histogram of anatom_site_general_challenge\ntrain_df['anatom_site_general_challenge'].value_counts().iplot(kind='bar',yTitle='Counts',xTitle = 'Sex',linecolor='black',opacity=0.7,color='purple',theme='pearl',bargap=0.5,\n                                       gridcolor='white',title='Distribution of the Position column in the Unique Patient Set')","fd0335f7":"# https:\/\/www.kaggle.com\/aadhavvignesh\/lung-segmentation-by-marker-controlled-watershed\ndef load_scan(path):\n    \"\"\"\n    Loads scans from a folder and into a list.\n    \n    Parameters: path (Folder path)\n    \n    Returns: slices (List of slices)\n    \"\"\"\n    slices = pydicom.dcmread(path)\n    #slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    #slices.sort(key = lambda x: int(x.InstanceNumber))\n        \n    return slices","2a6d999b":"# https:\/\/www.kaggle.com\/aadhavvignesh\/lung-segmentation-by-marker-controlled-watershed\ndef get_pixels_hu(scans):\n    \"\"\"\n    Converts raw images to Hounsfield Units (HU).\n    \n    Parameters: scans (Raw images)\n    \n    Returns: image (NumPy array)\n    \"\"\"\n    \n    image = np.stack([s.pixel_array for s in scans])\n    image = image.astype(np.int16)\n\n    # Since the scanning equipment is cylindrical in nature and image output is square,\n    # we set the out-of-scan pixels to 0\n    image[image == -2000] = 0\n    \n    \n    # HU = m*P + b\n    intercept = scans[0].RescaleIntercept\n    slope = scans[0].RescaleSlope\n    \n    if slope != 1:\n        image = slope * image.astype(np.float64)\n        image = image.astype(np.int16)\n        \n    image += np.int16(intercept)\n    \n    return np.array(image, dtype=np.int16)","b4ba6d5c":"INPUT_FOLDER = '\/kaggle\/input\/siim-isic-melanoma-classification\/train\/'\n\npictures = os.listdir(INPUT_FOLDER)\npictures.sort()\npictures[0]","8c221fb4":"test_patient_scans = load_scan(INPUT_FOLDER + pictures[0])","45f058a8":"test_patient_scans.dir()","e6b47db2":"test_patient_scans.PixelData","637c49dc":"test_patient_images = get_pixels_hu(test_patient_scans)","781f2360":"plt.imshow(test_patient_scans.PixelData, cmap='gray')\nplt.title(\"Original Slice\")\nplt.show()","dae6cfa3":"## Clean data\n### Because `sex` and 'age-approx' are two important features. Comparing to the number of rows in train_df (33126), the missing data of `sex` (65) and `age-approx` (68) is less than 0.1%. We can drop the null elements.","9f16c019":"# 1. Input the DataFrame","a48bafa0":"There are only 2056 unique `patient id`.","35f78826":"The image name is called `PatientID` in the `.dcm` file","4184ff2c":"![WechatIMG14.jpeg](http:\/\/github.com\/daiwofei\/skin_cancer_classification\/blob\/master\/WechatIMG14.jpeg)","0ed8b75c":"# 4. Analyze the .dcm image","42b82486":"# 3. Exploraty Data Analysis","6532cbd1":"Because the `benign` is naturally highly possibile. If there is no machine learning and only guess the patient to be `benigh`. How good the result will be ?","f458e13e":"# 2. Check the NULL value","315783b1":"`image_name` is unique in train_df."}}