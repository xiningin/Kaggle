{"cell_type":{"1f17fdbe":"code","c1bb2e2f":"code","74045a8b":"code","03253ff6":"code","f7726537":"code","4620d7c5":"code","611a7825":"code","e436b3e8":"code","66b919f4":"code","f67e0f26":"code","d236c078":"code","83260965":"code","4f0bdbab":"code","7bb7aabe":"code","ea17b2dc":"code","a8d03471":"code","1fab75fb":"code","838537fb":"code","ff0b4efc":"code","14138e22":"code","d3156097":"code","9f1f4b5b":"code","7361277a":"code","731ef498":"code","2e3b14d5":"code","aad0ce49":"code","ccfc5cee":"code","b9c3a103":"code","db9b3839":"code","cb68b27d":"code","699ddc58":"code","e96e7c48":"code","f94c83b4":"code","e0a2e263":"code","f5c832b0":"code","194a80b8":"markdown","9a607166":"markdown","1327da02":"markdown","7f3ab116":"markdown","a5e86d87":"markdown","860ff226":"markdown","644cf534":"markdown","d11da6ad":"markdown","ed3f286e":"markdown","84a013ce":"markdown","2be58aa8":"markdown","92be5833":"markdown","aaa671d5":"markdown","18ab4d64":"markdown","6e75ded1":"markdown","d16739a2":"markdown","facb0a60":"markdown","22e67132":"markdown"},"source":{"1f17fdbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1bb2e2f":"import tensorflow as tf\n\n# Get the GPU device name.\ndevice_name = tf.test.gpu_device_name()\n\n# The device name should look like the following:\nif device_name == '\/device:GPU:0':\n    print('Found GPU at: {}'.format(device_name))\nelse:\n    raise SystemError('GPU device not found')","74045a8b":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","03253ff6":"!pip install transformers","f7726537":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/new-addition\/indonesian_train.csv')\ndf.head()","4620d7c5":"df.drop(['Unnamed: 0'],axis=1,inplace=True)","611a7825":"emotion_dict={'joy':4,'sadness':5,'fear':3,'trust':7,'anger':0,'anticipation':1,'disgust':2,'surprise':6}\n","e436b3e8":"df.head()","66b919f4":"df['len']=df['content'].astype(str).apply(len)\ndf.head()","f67e0f26":"df.emotion.value_counts()","d236c078":"df.quantile(0.95,axis=0)","83260965":"# Get the lists of sentences and their labels.\nsentences = df.content.values\nlabels = df.emotion.values","4f0bdbab":"from transformers import XLMRobertaTokenizer\n\n# Load the XLMRoberta tokenizer.\nprint('Loading XLMRoberta tokenizer...')\ntokenizer = XLMRobertaTokenizer.from_pretrained('xlm-roberta-base')","7bb7aabe":"# Print the original sentence.\nprint(' Original: ', sentences[0])\nprint('\\n')\n# Print the sentence split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\nprint('\\n')\n# Print the sentence mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))","ea17b2dc":"ls=[]\nfor i in range(len(df)):\n    ls.append(len(tokenizer.tokenize(sentences[i])))\n","a8d03471":"temp=pd.DataFrame()\ntemp['len_token']=ls\ntemp.quantile(0.99,axis=0)","1fab75fb":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    encoded_sent = tokenizer.encode(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n\n                        # This function also supports truncation and conversion\n                        # to pytorch tensors, but we need to do padding, so we\n                        # can't use these features :( .\n                        #max_length = 128,          # Truncate all sentences.\n                        #return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.\n    input_ids.append(encoded_sent)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[0])\nprint('Token IDs:', input_ids[0])\n\n","838537fb":"print('Max sentence length: ', max([len(sen) for sen in input_ids]))\nprint('\\n')\nh=[len(i) for i in input_ids]\nh.sort(reverse=True)\nprint('Total no lengths',len(h))\nprint('\\n')\nprint('Top 70 tokens having highest lenght',h[:50])\n","ff0b4efc":"# We'll borrow the `pad_sequences` utility function to do this.\nfrom keras.preprocessing.sequence import pad_sequences\n\n# Set the maximum sequence length.\n# I've chosen 300 somewhat arbitrarily.\nMAX_LEN = 300\n\nprint('\\nPadding\/truncating all sentences to %d values...' % MAX_LEN)\n\nprint('\\nPadding token: \"{:}\", ID: {:}'.format(tokenizer.pad_token, tokenizer.pad_token_id))\n\n# Pad our input tokens with value 0.\n# \"post\" indicates that we want to pad and truncate at the end of the sequence,\n# as opposed to the beginning.\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", \n                          value=0, truncating=\"post\", padding=\"post\")\n\nprint('\\nDone.')","14138e22":"# Create attention masks\nattention_masks = []\n\n# For each sentence...\nfor sent in input_ids:\n    \n    # Create the attention mask.\n    #   - If a token ID is 0, then it's padding, set the mask to 0.\n    #   - If a token ID is > 0, then it's a real token, set the mask to 1.\n    att_mask = [int(token_id > 0) for token_id in sent]\n    \n    # Store the attention mask for this sentence.\n    attention_masks.append(att_mask)","d3156097":"# Use train_test_split to split our data into train and validation sets for\n# training\nfrom sklearn.model_selection import train_test_split\n\n# Use 90% for training and 10% for validation.\ntrain_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids, labels, \n                                                            random_state=2018, test_size=0.1)\n# Do the same for the masks.\ntrain_masks, validation_masks, _, _ = train_test_split(attention_masks, labels,\n                                             random_state=2018, test_size=0.1)","9f1f4b5b":"# Convert all inputs and labels into torch tensors, the required datatype \n# for our model.\ntrain_inputs = torch.tensor(train_inputs)\nvalidation_inputs = torch.tensor(validation_inputs)\n\ntrain_labels = torch.tensor(train_labels)\nvalidation_labels = torch.tensor(validation_labels)\n\ntrain_masks = torch.tensor(train_masks)\nvalidation_masks = torch.tensor(validation_masks)","7361277a":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n# The DataLoader needs to know our batch size for training, so we specify it \n# here.\n# For fine-tuning BERT on a specific task, the authors recommend a batch size of\n# 16 or 32 or less\n\nbatch_size = 4\n\n# Create the DataLoader for our training set.\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set.\nvalidation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\nvalidation_sampler = SequentialSampler(validation_data)\nvalidation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)\n","731ef498":"from transformers import BertForSequenceClassification, AdamW, BertConfig,XLMRobertaForSequenceClassification\n\n# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = XLMRobertaForSequenceClassification.from_pretrained(\n    \"xlm-roberta-base\", # Use the 12-layer XLMRoberta,\n    num_labels = 8, # The number of output labels--8 for multiclass classification.\n                       \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","2e3b14d5":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 1e-5, # args.learning_rate - default is 5e-5, our notebook had 1e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )\n","aad0ce49":"from transformers import get_linear_schedule_with_warmup\n\n\nepochs = 20\n\n# Total number of training steps is number of batches * number of epochs.\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)","ccfc5cee":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","b9c3a103":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))\n","db9b3839":"import random\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# Store the average loss after each epoch so we can plot them.\nloss_values = []\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # This will return the loss (rather than the model output) because we\n        # have provided the `labels`.\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        outputs = model(b_input_ids, \n                    token_type_ids=None, \n                    attention_mask=b_input_mask, \n                    labels=b_labels)\n        \n        # The call to `model` always returns a tuple, so we need to pull the \n        # loss value out of the tuple.\n        loss = outputs[0]\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over the training data.\n    avg_train_loss = total_loss \/ len(train_dataloader)            \n    \n    # Store the loss value for plotting the learning curve.\n    loss_values.append(avg_train_loss)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(format_time(time.time() - t0)))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    eval_loss, eval_accuracy = 0, 0\n    nb_eval_steps, nb_eval_examples = 0, 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Add batch to GPU\n        batch = tuple(t.to(device) for t in batch)\n        \n        # Unpack the inputs from our dataloader\n        b_input_ids, b_input_mask, b_labels = batch\n        \n        # Telling the model not to compute or store gradients, saving memory and\n        # speeding up validation\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # This will return the logits rather than the loss because we have\n            # not provided labels.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # The documentation for this `model` function is here: \n            # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n            outputs = model(b_input_ids, \n                            token_type_ids=None, \n                            attention_mask=b_input_mask)\n        \n        # Get the \"logits\" output by the model. The \"logits\" are the output\n        # values prior to applying an activation function like the softmax.\n        logits = outputs[0]\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n        \n        # Calculate the accuracy for this batch of test sentences.\n        tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n        \n        # Accumulate the total accuracy.\n        eval_accuracy += tmp_eval_accuracy\n\n        # Track the number of batches\n        nb_eval_steps += 1\n\n    # Report the final accuracy for this validation run.\n    print(\"  Accuracy: {0:.2f}\".format(eval_accuracy\/nb_eval_steps))\n    print(\"  Validation took: {:}\".format(format_time(time.time() - t0)))\n\nprint(\"\")\nprint(\"Training complete!\")","cb68b27d":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(loss_values, 'b-o')\n\n# Label the plot.\nplt.title(\"Training loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\n\nplt.show()","699ddc58":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf = pd.read_csv(\"\/kaggle\/input\/new-addition\/indonesian_test.csv\" )\n\n# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(df.shape[0]))\n\n# Create sentence and label lists\nsentences = df.content.values\nlabels = df.emotion.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    encoded_sent = tokenizer.encode(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                   )\n    \n    input_ids.append(encoded_sent)\n\n# Pad our input tokens\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, \n                          dtype=\"long\", truncating=\"post\", padding=\"post\")\n\n# Create attention masks\nattention_masks = []\n\n# Create a mask of 1s for each token followed by 0s for padding\nfor seq in input_ids:\n    seq_mask = [float(i>0) for i in seq]\n    attention_masks.append(seq_mask) \n\n# Convert to tensors.\nprediction_inputs = torch.tensor(input_ids)\nprediction_masks = torch.tensor(attention_masks)\nprediction_labels = torch.tensor(labels)\n\n# Set the batch size.  \nbatch_size = 2\n\n# Create the DataLoader.\nprediction_data = TensorDataset(prediction_inputs, prediction_masks, prediction_labels)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","e96e7c48":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(prediction_inputs)))\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n    # Add batch to GPU\n    batch = tuple(t.to(device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n    b_input_ids, b_input_mask, b_labels = batch\n  \n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n    with torch.no_grad():# Forward pass, calculate logit predictions\n        outputs = model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n    logits = outputs[0]\n    # Move logits and labels to CPU\n    logits = logits.detach().cpu().numpy()\n    label_ids = b_labels.to('cpu').numpy()\n    # Store predictions and true labels\n    predictions.append(logits)\n    true_labels.append(label_ids)\n\nprint('    DONE.')\n    \n","f94c83b4":"from sklearn.metrics import f1_score,precision_score,recall_score\n\nf1_set = []\nre_set=[]\npre_set=[]\n\n# Evaluate each test batch \nprint('Calculating  F1 ,Precision, Recall score  for each batch...')\n\n# For each input batch...\nfor i in range(len(true_labels)):\n  \n  # The predictions for this batch are a 2-column ndarray (one column for \"0\" \n  # and one column for \"1\"). Pick the label with the highest value and turn this\n  # in to a list of 0s and 1s.\n    pred_labels_i = np.argmax(predictions[i], axis=1).flatten()\n    # Calculate and store the coef for this batch.  \n    justice = f1_score(true_labels[i], pred_labels_i,average='macro')    \n    justice_re=recall_score(true_labels[i], pred_labels_i,average='macro')\n    justice_pre=precision_score(true_labels[i], pred_labels_i,average='macro')\n    \n    f1_set.append(justice)\n    re_set.append(justice_re)\n    pre_set.append(justice_pre)","e0a2e263":"# Combine the predictions for each batch into a single list of 0s and 1s.\nflat_predictions = [item for sublist in predictions for item in sublist]\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n\n# Combine the correct labels for each batch into a single list.\nflat_true_labels = [item for sublist in true_labels for item in sublist]\n\n# Calculate the f1\nf1 = f1_score(flat_true_labels, flat_predictions,average='macro')\n\nrec = recall_score(flat_true_labels, flat_predictions,average='macro')\n\npre = precision_score(flat_true_labels, flat_predictions,average='macro')\n\nprint('F1 score for XLM robrta: %.3f' % f1)\nprint('Recall score for XLM robrta: %.3f' % rec)\nprint('Precision score for XLM robrta: %.3f' % pre)\n","f5c832b0":"import os\n\n# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n\noutput_dir = '\/model_save\/'\n\n# Create output directory if needed\nif not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\nprint(\"Saving model to %s\" % output_dir)\n\n# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n# They can then be reloaded using `from_pretrained()`\nmodel_to_save = model.module if hasattr(model, 'module') else model  # Take care of distributed\/parallel training\nmodel_to_save.save_pretrained(output_dir)\ntokenizer.save_pretrained(output_dir)\n\n# Good practice: save your training arguments together with the trained model\n# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n","194a80b8":"# performance on test set","9a607166":"## Attention Masks","1327da02":"## Sentences to IDs\n## The tokenizer.encode function combines multiple steps for us:\n\n1. Split the sentence into tokens.\n1. Add the special [CLS] and [SEP] tokens.\n1. Map the tokens to their IDs.","7f3ab116":"## Length of Tokens","a5e86d87":"## Training Validation Splits","860ff226":"#  Saving and Loading Pretrained Model","644cf534":"We see 95 % of length of Comments in Training Data have length less than 380 which is way less than BERT's Input (512 tokens) but this gives us intuition of our token length","d11da6ad":"## Important observation\nAfter tokenisation we saw 98% comments after tokenisation have length of **293 tokens** it means we can safely choose length of input of to \n\n**bert will be 300** which is less than 512.","ed3f286e":"# Tokenisation","84a013ce":"some results","2be58aa8":"# Optimizer and Learning Rate Scheduler","92be5833":"We see out of nearly 7000 traiing sentences\nwe have nearly 99 % tokens have length less than 216","aaa671d5":"**Required Formatting**\n\nThe above code left out a few required formatting steps that we'll look at here.\n\nSide Note: The input format to BERT seems \"over-specified\" to me... We are required to give it a number of pieces of information which seem redundant, or like they could easily be inferred from the data without us explicity providing it. But it is what it is, and I suspect it will make more sense once I have a deeper understanding of the BERT internals.\n\nWe are required to:\n\nAdd special tokens to the start and end of each sentence.\nPad & truncate all sentences to a single constant length.\nExplicitly differentiate real tokens from padding tokens with the \"attention mask\".\nSpecial Tokens\n**[SEP]\n**\nAt the end of every sentence, we need to append the special **[SEP]** token.\n\nThis token is an artifact of two-sentence tasks, where BERT is given two separate sentences and asked to determine something (e.g., can the answer to the question in sentence A be found in sentence B?).\n\nI am not certain yet why the token is still required when we have only single-sentence input, but it is!\n\n**[CLS]**\n\nFor classification tasks, we must prepend the special **[CLS]** token to the beginning of every sentence.\n\nThis token has special significance. BERT consists of 12 Transformer layers. Each transformer takes in a list of token embeddings, and produces the same number of embeddings on the output (but with the feature values changed, of course!).\n\nOn the output of the final (12th) transformer, only the first embedding (corresponding to the **[CLS]** token) is used by the classifier\n> \"The first token of every sequence is always a special classification token ([CLS]). The final hidden state corresponding to this token is used as the aggregate sequence representation for classification tasks.\" \n\nI'm not sure why the authors took this strategy instead of some kind of pooling of all the final vectors, but I'm sure that if pooling were better they would have gone that route.\n\nAlso, because BERT is trained to only use this [CLS] token for classification, we know that the model has been motivated to encode everything it needs for the classification step into that single 768-value embedding vector.","18ab4d64":"### Maximum Length","6e75ded1":"# Training Loop","d16739a2":"## Converting to Pytorch DataTypes","facb0a60":"## To see Percentile of length of comments","22e67132":"## We used this Dictionary for Label Encoding of our emotions"}}