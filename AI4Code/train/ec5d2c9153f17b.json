{"cell_type":{"fd385e1f":"code","48ba92bf":"code","b94339e5":"code","14535bfc":"code","4faf30d4":"code","342b746a":"code","d8793312":"code","9756dbf8":"code","384a1c6f":"code","7b75cbe3":"code","bd2a28ec":"code","24480eae":"code","721cebf3":"code","6607deaa":"code","cac391dc":"code","02a9645e":"code","36891668":"code","f7b594c4":"code","a7e0b369":"code","7a4bf342":"code","99af3b22":"code","9cdc8ceb":"code","eaa31e71":"code","ec14e839":"code","445b3cb5":"code","16e27856":"code","9b0ee57c":"code","2d720a86":"code","4f12ca97":"code","e81bd20f":"code","d8a7fa3f":"code","1a502f09":"code","d1c0764d":"code","350d4307":"code","1f7f6d68":"code","7374c99c":"code","61633e73":"code","1b3b6d20":"code","a7c1f4cd":"code","61efd872":"code","c4329b43":"code","bc6f0bea":"code","d0f20253":"code","4fad481e":"code","28092517":"code","b9daedc8":"code","9638b3a6":"code","ca205e51":"code","d9b2a845":"code","25fca0c6":"code","a9f977ef":"code","d4aff921":"code","141eba2a":"code","c53d1448":"code","34c74cd9":"code","4d758f86":"code","4c168ef2":"code","79902e36":"code","8465e517":"code","f79732d8":"code","d2d33974":"code","e42bfdca":"code","555cb0d1":"code","d7cfee55":"code","8905451b":"code","b57fa7da":"code","6ed442d2":"code","dcbb2d74":"code","9a778dab":"code","8cf96a60":"code","c56e354f":"code","e0e09d29":"code","1bf04588":"code","649ec21b":"code","f1b693cf":"code","d3e91e89":"code","6ea274d0":"code","c98df4ae":"code","78999290":"code","d5277aa9":"code","02f6b89a":"code","8436e7dc":"code","b2f4aecb":"code","d257885e":"code","cd4b4d6a":"code","b66bc046":"code","f550c750":"markdown","b76f68ef":"markdown","153bd171":"markdown","66fb0d5b":"markdown","4a475882":"markdown","68d6aaed":"markdown","a3650e15":"markdown","f7752e00":"markdown","ffd7f42d":"markdown","66703c6e":"markdown","25764939":"markdown","44dce28a":"markdown","3f799cea":"markdown","98302267":"markdown","67f18f29":"markdown","818c8b44":"markdown","db92aff7":"markdown","72c65ea9":"markdown","26dcb4d4":"markdown","ddb53fd0":"markdown","9099a0e4":"markdown","7cd8783b":"markdown","9bcd3666":"markdown","2f8c6697":"markdown","8b67ecc4":"markdown","86059555":"markdown","d2e05b12":"markdown","de66379b":"markdown","ee758cb8":"markdown","b093fe3c":"markdown","10c93bb9":"markdown","b3fec516":"markdown","b8bcc27d":"markdown","ab277559":"markdown","bd754aec":"markdown","b6c0f138":"markdown","7cd684d5":"markdown","5c488c82":"markdown","12604f80":"markdown","36a384af":"markdown","92d9e47a":"markdown","0decb20a":"markdown","b1472c57":"markdown","8120b8e9":"markdown","c5d2b991":"markdown","dca3d409":"markdown","82208a5d":"markdown","f0b329e1":"markdown","45a89108":"markdown","6ee1af61":"markdown","07c919ac":"markdown","365155dc":"markdown","0349ab87":"markdown","44f12ae1":"markdown","8ecc394f":"markdown","36a89b5c":"markdown","716b9661":"markdown","76b1f146":"markdown","2a23ec0b":"markdown","48278d88":"markdown","56376873":"markdown","7b029ba0":"markdown","7dea0abd":"markdown","7b47f519":"markdown","f6c697a6":"markdown","6401e8c4":"markdown","a12aa0ed":"markdown","aa411534":"markdown","facbd033":"markdown","c7de6104":"markdown","1b2c4f30":"markdown","44b7281c":"markdown","6a02d87e":"markdown","bb151aed":"markdown","79dd54bb":"markdown","582faeea":"markdown","4d128fb4":"markdown","5d35caa3":"markdown","2e79e59f":"markdown","a7e945a6":"markdown","c76cb804":"markdown","b9085e35":"markdown","c7547fff":"markdown","6a36bcc9":"markdown","eb56413a":"markdown","d763ed2c":"markdown","ab678081":"markdown","a937bbf9":"markdown","25e155a0":"markdown","dc85252b":"markdown","149ad516":"markdown","d649438d":"markdown","df05d540":"markdown","e6ef81f3":"markdown","53a8ab0c":"markdown"},"source":{"fd385e1f":"!pip install pandarallel","48ba92bf":"import numpy as np\nimport pandas as pd\nimport os\nimport gc\nimport holoviews as hv\nfrom holoviews import opts\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nhv.extension('bokeh')\nfrom pandarallel import pandarallel\npandarallel.initialize()\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom itertools import product\nimport lightgbm as lgb\nimport optuna.integration.lightgbm as lgb_optuna","b94339e5":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","14535bfc":"items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nprint(f'items.csv : {items.shape}')\nitems.head(3)","4faf30d4":"item_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nprint(f'item_categories.csv : {item_categories.shape}')\nitem_categories.head(3)","342b746a":"shops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nprint(f'shops.csv : {shops.shape}')\nshops.head(3)","d8793312":"sales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nprint(f'sales_train.csv : {sales_train.shape}')\nsales_train.head(3)","9756dbf8":"test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint(f'test.csv : {test.shape}')\ntest.head(3)","384a1c6f":"submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nprint(f'sample_submission.csv : {submission.shape}')\nsubmission.head(3)","7b75cbe3":"shops['city_name'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops['city_name'].unique()","bd2a28ec":"shops.loc[shops['city_name']=='!\u042f\u043a\u0443\u0442\u0441\u043a', 'city_name'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city_name']).astype(np.int8)\nshops.head(3)","24480eae":"item_categories['item_maincategory_name'] = item_categories['item_category_name'].str.split(' - ').map(lambda x: x[0])\nitem_categories['item_maincategory_name'].unique()","721cebf3":"item_categories['item_subcategory_name'] = item_categories['item_category_name'].str.split('-').map(lambda x: '-'.join(x[1:]).strip() if len(x) > 1 else x[0].strip())\nitem_categories['item_subcategory_name'].unique()","6607deaa":"item_categories.loc[item_categories['item_maincategory_name']=='\u0418\u0433\u0440\u044b Android', 'item_maincategory_name'] = '\u0418\u0433\u0440\u044b'\nitem_categories.loc[item_categories['item_maincategory_name']=='\u0418\u0433\u0440\u044b MAC', 'item_maincategory_name'] = '\u0418\u0433\u0440\u044b'\nitem_categories.loc[item_categories['item_maincategory_name']=='\u0418\u0433\u0440\u044b PC', 'item_maincategory_name'] = '\u0418\u0433\u0440\u044b'\nitem_categories.loc[item_categories['item_maincategory_name']=='\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b (\u041a\u0438\u043d\u043e, \u041c\u0443\u0437\u044b\u043a\u0430, \u0418\u0433\u0440\u044b)', 'item_maincategory_name'] = '\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b'\nitem_categories.loc[item_categories['item_maincategory_name']=='\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u043f\u0438\u043b\u044c)', 'item_maincategory_name'] = '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438'\nitem_categories.loc[item_categories['item_maincategory_name']=='\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u0442\u0443\u0447\u043d\u044b\u0435)', 'item_maincategory_name'] = '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438'\nitem_categories['item_maincategory_id'] = LabelEncoder().fit_transform(item_categories['item_maincategory_name']).astype(np.int8)\nitem_categories['item_subcategory_id'] = LabelEncoder().fit_transform(item_categories['item_subcategory_name']).astype(np.int8)\nitem_categories.head(3)","cac391dc":"item_info = pd.merge(items, item_categories, on='item_category_id', how='inner')\ntrain_tmp = pd.merge(sales_train,item_info, on='item_id', how='inner')\ntrain = pd.merge(train_tmp, shops, on='shop_id', how='inner')\ntrain.head(3)","02a9645e":"test_tmp = pd.merge(test,item_info, on='item_id', how='inner')\ntest = pd.merge(test_tmp, shops, on='shop_id', how='inner')\ntest.head(3)","36891668":"train.date = pd.to_datetime(train.date,format='%d.%m.%Y')\ntrain =  train.sort_values('date').reset_index(drop=True)\ntrain.head(3)","f7b594c4":"train['total_sales'] = train['item_price'] * train['item_cnt_day']\ntrain.head(3)","a7e0b369":"train['date_block_num'] =train['date_block_num'].astype(np.int8)\ntrain['shop_id'] = train['shop_id'].astype(np.int8)\ntrain['item_id'] = train['item_id'].astype(np.int16)\ntrain['item_category_id'] = train['item_category_id'].astype(np.int16)","7a4bf342":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\ntest['item_category_id'] = test['item_category_id'].astype(np.int16)","99af3b22":"shop_rank_df = train.shop_name.value_counts().sort_values(ascending=False)\nhv.Bars(shop_rank_df[0:20]).opts(title=\"Shop Count top20\", color=\"red\", xlabel=\"Shop Name\", ylabel=\"Count\")\\\n                            .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","9cdc8ceb":"pd.DataFrame(shop_rank_df[0:5])","eaa31e71":"hv.Bars(train['city_name'].value_counts()).opts(title=\"City Count\", color=\"red\", xlabel=\"City Name\", ylabel=\"Count\")\\\n                                            .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","ec14e839":"item_rank_df = train.item_name.value_counts().sort_values(ascending=False)\nhv.Bars(item_rank_df[0:20]).opts(title=\"Item Count top20\", color=\"blue\", xlabel=\"Item Name\", ylabel=\"Count\")\\\n                            .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","445b3cb5":"pd.DataFrame(item_rank_df[0:5])","16e27856":"price_rank = train[['item_name','item_category_name','item_price']].groupby(['item_name','item_category_name']).max()\nprice_rank.sort_values('item_price',ascending=False).head(3)","9b0ee57c":"price_rank.sort_values('item_price',ascending=True).head(3)","2d720a86":"item_cat_rank_df = train.item_category_name.value_counts().sort_values(ascending=False)\nhv.Bars(item_cat_rank_df[0:20]).opts(title=\"Item Category Count top20\", color=\"green\" ,xlabel=\"Item categories\", ylabel=\"Count\")\\\n                                .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","4f12ca97":"pd.DataFrame(item_cat_rank_df[0:5])","e81bd20f":"hv.Bars(train['item_maincategory_name'].value_counts()).opts(title=\"Item Main-Category Count\", color=\"green\" ,xlabel=\"Main Categories\" ,ylabel=\"Count\") \\\n                                                        .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","d8a7fa3f":"hv.Bars(train['item_subcategory_name'].value_counts()).opts(title=\"Item Sub-Category Count\", color=\"green\" ,xlabel=\"Sub Categories\" ,ylabel=\"Count\")\\\n                                                        .opts(opts.Bars(width=700, height=500,tools=['hover'],xrotation=45,show_grid=True))","1a502f09":"train.groupby('item_name').sum()[['total_sales','item_cnt_day']].sort_values('total_sales',ascending=False).head()","d1c0764d":"train[train[['total_sales','item_cnt_day']].values > 0].groupby('item_name').sum()[['total_sales','item_cnt_day']].sort_values('total_sales',ascending=True).head(3)","350d4307":"train.groupby('shop_name').sum()[['total_sales','item_cnt_day']].sort_values('total_sales',ascending=False).head()","1f7f6d68":"train.groupby('shop_name').sum()[['total_sales','item_cnt_day']].sort_values('total_sales',ascending=True).head()","7374c99c":"train.groupby('item_category_name').sum()[['total_sales','item_cnt_day']].sort_values('total_sales',ascending=False).head()","61633e73":"train[[\"date_block_num\",\"shop_id\",\"item_id\",\"date\",\"item_price\",\"item_cnt_day\",\"total_sales\"]].groupby([\"date_block_num\",\"shop_id\",\"item_id\"])\\\n            .agg({\"date\":[\"min\",'max'],\"item_price\":\"mean\",\"item_cnt_day\":\"sum\",\"total_sales\":\"sum\"}).head(10)","1b3b6d20":"monthly_ts = train.groupby([\"date_block_num\"])[\"total_sales\",\"item_cnt_day\"].sum()\nmonth_ts_sales = hv.Curve(monthly_ts[\"total_sales\"]).opts(title=\"Monthly Sales Time Series\", xlabel=\"Month\", ylabel=\"Total Sales\")\nmonth_ts_cnt = hv.Curve(monthly_ts[\"item_cnt_day\"]).opts(title=\"Monthly Item Count Time Series\", xlabel=\"Month\", ylabel=\"Item Count\")\n(month_ts_sales + month_ts_cnt).opts(opts.Curve(width=400, height=300,tools=['hover'],show_grid=True))","a7c1f4cd":"print('ADF testing ...')\nprint(f\"p-value[total_sales] : {adfuller(monthly_ts['total_sales'].values, autolag='AIC', regression = 'ct')[1]}\")\nprint(f\"p-value[item_cnt_day] : {adfuller(monthly_ts['item_cnt_day'].values, autolag='AIC', regression = 'ct')[1]}\")","61efd872":"sales_dec = sm.tsa.seasonal_decompose(monthly_ts[\"total_sales\"].values,period=12,model=\"multiplicative\").plot()","c4329b43":"item_cnt_dec = sm.tsa.seasonal_decompose(monthly_ts[\"item_cnt_day\"].values,period=12,model=\"multiplicative\").plot()","bc6f0bea":"sales_acf = sm.graphics.tsa.plot_acf(monthly_ts[\"total_sales\"].values, lags=24)","d0f20253":"item_cnt_acf = sm.graphics.tsa.plot_acf(monthly_ts[\"item_cnt_day\"].values, lags=24)","4fad481e":"price_bx = hv.BoxWhisker(train[['item_price']].sort_values('item_price',ascending=False)[0:500].values,label='Item Price BoxPlot',vdims='Price')\ncnt_bx = hv.BoxWhisker(train[['item_cnt_day']].sort_values('item_cnt_day',ascending=False)[0:500].values,label='Item Count Day BoxPlot',vdims='Count')\n(price_bx + cnt_bx).opts(opts.BoxWhisker(width=300, height=300,show_grid=True,tools=['hover']))","28092517":"def fill_anomaly(x, trg):\n    shop_id = int(x.shop_id)\n    item_id = int(x.item_id)\n    db_num = int(x.date_block_num)\n    ret = train[(train.shop_id==shop_id)&(train.item_id==item_id)&(train.date_block_num==db_num)&(train.item_cnt_day<1000)&(train.item_cnt_day>=0)&(train.item_price<100000)&(train.item_price>=0)][trg].mean()\n    if np.isnan(ret):\n        ret = train[(train.shop_id==shop_id)&(train.item_id==item_id)&(train.item_cnt_day<1000)&(train.item_cnt_day>=0)&(train.item_price<100000)&(train.item_price>=0)][trg].mean()\n    if np.isnan(ret):\n        ret = train[(train.item_id==item_id)&(train.item_cnt_day<1000)&(train.item_cnt_day>=0)&(train.item_price<100000)&(train.item_price>=0)][trg].mean()\n    if np.isnan(ret):\n        ret = train[(train.shop_id==shop_id)&(train.item_cnt_day<1000)&(train.item_cnt_day>=0)&(train.item_price<100000)&(train.item_price>=0)][trg].mean()\n    return ret","b9daedc8":"tmp = train[['date_block_num','shop_id','item_id','item_price','item_cnt_day']]\n\ntrain.loc[(train['item_cnt_day'] < 0),'item_cnt_day'] = tmp[tmp['item_cnt_day'] < 0].parallel_apply(fill_anomaly, trg='item_cnt_day', axis=1)\ntrain.loc[(train['item_cnt_day'] > 1000),'item_cnt_day'] = tmp[tmp['item_cnt_day'] > 1000].parallel_apply(fill_anomaly, trg='item_cnt_day', axis=1)\ntrain.loc[(train['item_price'] < 0),'item_price'] = tmp[tmp['item_price'] < 0].parallel_apply(fill_anomaly, trg='item_price', axis=1)\ntrain.loc[(train['item_price'] > 100000),'item_price'] = tmp[tmp['item_price'] > 100000].parallel_apply(fill_anomaly, trg='item_price', axis=1)\n#recalculate total_sales\ntrain['total_sales'] = train['item_price'] * train['item_cnt_day']","9638b3a6":"del items,item_categories,sales_train,shop_rank_df,item_rank_df,price_rank,item_cat_rank_df,monthly_ts,month_ts_sales,month_ts_cnt,\\\n    sales_dec,item_cnt_dec,sales_acf,item_cnt_acf,price_bx,cnt_bx,tmp\ngc.collect()","ca205e51":"prophet_df = pd.DataFrame()\nprophet_df[\"ds\"] = pd.date_range(start = '2013-01-01',end='2015-10-01', freq = 'MS')\nprophet_df['y'] = train.groupby([\"date_block_num\"])[\"total_sales\"].sum()\nprophet_df.head(3)","d9b2a845":"m = Prophet(changepoint_prior_scale=0.08)\nm.fit(prophet_df)\nfuture = m.make_future_dataframe(periods = 20, freq = 'MS')\nprophe_result = m.predict(future)\nprophe_result.tail(3)","25fca0c6":"fig1 = m.plot(prophe_result)\nax = fig1.gca()\nax.set_title(\"Sales Prediction\", size=25)\nax.set_xlabel(\"Date\", size=15)\nax.set_ylabel(\"Sales\", size=15)\na = add_changepoints_to_plot(ax, m, prophe_result)","a9f977ef":"fig2 = m.plot_components(prophe_result)","d4aff921":"len(test[test.duplicated(['shop_id','item_id'])==False])","141eba2a":"del prophet_df,m,future,prophe_result,fig1,ax,a,fig2\ngc.collect()","c53d1448":"train.drop(['date','item_name', 'item_category_name', 'item_maincategory_name', 'item_subcategory_name', 'shop_name', 'city_name'],axis=1, inplace=True)\ntest.drop(['ID','item_name', 'item_category_name', 'item_maincategory_name', 'item_subcategory_name', 'shop_name', 'city_name'],axis=1, inplace=True)\ndata = pd.concat([train, test], ignore_index=True, sort=\n                 False, keys=['date_block_num','shop_id','item_id']).fillna(0)\ndata.head(3)","34c74cd9":"feature_df = []\ncols = ['date_block_num','shop_id','item_id']\nfor i in range(35):\n    sales = data[data.date_block_num==i]\n    feature_df.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n    \nfeature_df = pd.DataFrame(np.vstack(feature_df), columns=cols)\nfeature_df['date_block_num'] = feature_df['date_block_num'].astype(np.int8)\nfeature_df['shop_id'] = feature_df['shop_id'].astype(np.int8)\nfeature_df['item_id'] = feature_df['item_id'].astype(np.int16)\nfeature_df.sort_values(cols,inplace=True)\n\nfeature_df = pd.merge(feature_df, shops[['shop_id','city_code']], on=['shop_id'], how='left')\nfeature_df = pd.merge(feature_df, item_info[['item_id','item_category_id','item_maincategory_id','item_subcategory_id']], on=['item_id'], how='left')\nfeature_df['city_code'] = feature_df['city_code'].astype(np.int8)\nfeature_df['item_category_id'] = feature_df['item_category_id'].astype(np.int8)\nfeature_df['item_maincategory_id'] = feature_df['item_maincategory_id'].astype(np.int8)\nfeature_df['item_subcategory_id'] = feature_df['item_subcategory_id'].astype(np.int8)","4d758f86":"tmp = data.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ntmp.columns = ['item_cnt_month']\ntmp.reset_index(inplace=True)\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','shop_id','item_id'], how='left')\nfeature_df['item_cnt_month'] = (feature_df['item_cnt_month'].fillna(0).clip(0,20).astype(np.float16))","4c168ef2":"feature_df['christmas'] = 0\nf = lambda x : (x.date_block_num+1) % 12 == 0\nfeature_df.loc[feature_df[['date_block_num']].parallel_apply(f,axis=1)==True,'christmas'] = 1","79902e36":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","8465e517":"feature_df = lag_feature(feature_df, [1,2,3,6,12], 'item_cnt_month')","f79732d8":"tmp = feature_df.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num'], how='left')\nfeature_df['item_cnt_month_avg'] = feature_df['item_cnt_month_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_avg')","d2d33974":"tmp = feature_df.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_item_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_id'], how='left')\nfeature_df['item_cnt_month_item_avg'] = feature_df['item_cnt_month_item_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1,2,3,6,12], 'item_cnt_month_item_avg')","e42bfdca":"tmp = feature_df.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_shop_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','shop_id'], how='left')\nfeature_df['item_cnt_month_shop_avg'] = feature_df['item_cnt_month_shop_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1,2,3,6,12], 'item_cnt_month_shop_avg')","555cb0d1":"tmp = feature_df.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_cat_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_category_id'], how='left')\nfeature_df['item_cnt_month_cat_avg'] = feature_df['item_cnt_month_cat_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_cat_avg')","d7cfee55":"tmp = feature_df.groupby(['date_block_num', 'item_maincategory_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_maincat_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_maincategory_id'], how='left')\nfeature_df['item_cnt_month_maincat_avg'] = feature_df['item_cnt_month_maincat_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_maincat_avg')","8905451b":"tmp = feature_df.groupby(['date_block_num', 'item_maincategory_id', 'shop_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_maincat_shop_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_maincategory_id','shop_id'], how='left')\nfeature_df['item_cnt_month_maincat_shop_avg'] = feature_df['item_cnt_month_maincat_shop_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_maincat_shop_avg')","b57fa7da":"tmp = feature_df.groupby(['date_block_num', 'item_subcategory_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_subcat_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_subcategory_id'], how='left')\nfeature_df['item_cnt_month_subcat_avg'] = feature_df['item_cnt_month_subcat_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_subcat_avg')","6ed442d2":"tmp = feature_df.groupby(['date_block_num', 'item_subcategory_id', 'shop_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_subcat_shop_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','item_subcategory_id','shop_id'], how='left')\nfeature_df['item_cnt_month_subcat_shop_avg'] = feature_df['item_cnt_month_subcat_shop_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1], 'item_cnt_month_subcat_shop_avg')","dcbb2d74":"tmp = feature_df.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_city_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','city_code'], how='left')\nfeature_df['item_cnt_month_city_avg'] = feature_df['item_cnt_month_city_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1,2,3,6,12], 'item_cnt_month_city_avg')","9a778dab":"tmp = feature_df.groupby(['date_block_num', 'city_code', 'item_id']).agg({'item_cnt_month': ['mean']})\ntmp.columns = ['item_cnt_month_city_item_avg']\ntmp.reset_index(inplace=True)\n\nfeature_df = pd.merge(feature_df, tmp, on=['date_block_num','city_code','item_id'], how='left')\nfeature_df['item_cnt_month_city_item_avg'] = feature_df['item_cnt_month_city_item_avg'].astype(np.float16)\nfeature_df = lag_feature(feature_df, [1,2,3,6,12], 'item_cnt_month_city_item_avg')","8cf96a60":"del tmp\ngc.collect()","c56e354f":"trend_df = feature_df[['date_block_num','shop_id','item_id']]\n\n#per item average\ntmp1 = data.groupby(['item_id']).agg({'item_price': ['mean']})\ntmp1.columns = ['item_price_item_avg']\ntmp1.reset_index(inplace=True)\ntrend_df = pd.merge(trend_df, tmp1, on=['item_id'], how='left')\ntrend_df['item_price_item_avg'] = trend_df['item_price_item_avg'].astype(np.float16)\n\n#per item&month average\ntmp2 = data.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ntmp2.columns = ['item_price_month_item_avg']\ntmp2.reset_index(inplace=True)\ntrend_df = pd.merge(trend_df, tmp2, on=['date_block_num','item_id'], how='left')\ntrend_df['item_price_month_item_avg'] = trend_df['item_price_month_item_avg'].astype(np.float16)\n\nlags = [1,2,3,4,5,6,12]\ntrend_df = lag_feature(trend_df, lags, 'item_price_month_item_avg')\n\nfor i in lags:\n    trend_df['delta_price_lag_'+str(i)] = (trend_df['item_price_month_item_avg_lag_'+str(i)] - trend_df['item_price_item_avg']) \/ trend_df['item_price_item_avg']\n\ndef select_trend(x):\n    for i in lags:\n        if x['delta_price_lag_'+str(i)]:\n            return x['delta_price_lag_'+str(i)]\n    return 0\n    \ntrend_df['delta_price_lag'] = trend_df.parallel_apply(select_trend, axis=1)\ntrend_df['delta_price_lag'] = trend_df['delta_price_lag'].astype(np.float16).fillna(0)\n\nfeature_df['delta_price_lag'] = trend_df['delta_price_lag']","e0e09d29":"del tmp1,tmp2,trend_df\ngc.collect()","1bf04588":"feature_df['month'] = feature_df['date_block_num'] % 12\ndays = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nfeature_df['days_num'] =  feature_df['month'].map(days).astype(np.int8)","649ec21b":"total_sales_df = feature_df[['date_block_num','shop_id','item_id']]\n\n#sum of shop& month total_sales\ntmp1 = data.groupby(['date_block_num','shop_id']).agg({'total_sales': ['sum']})\ntmp1.columns = ['date_shop_total_sales']\ntmp1.reset_index(inplace=True)\ntotal_sales_df = pd.merge(total_sales_df, tmp1, on=['date_block_num','shop_id'], how='left')\ntotal_sales_df['date_shop_total_sales'] = total_sales_df['date_shop_total_sales'].astype(np.float32)\n\n#mean of sum of shop& month total_sales in all date\ntmp2 = total_sales_df.groupby(['shop_id']).agg({'date_shop_total_sales': ['mean']})\ntmp2.columns = ['shop_avg_total_sales']\ntmp2.reset_index(inplace=True)\ntotal_sales_df = pd.merge(total_sales_df, tmp2, on=['shop_id'], how='left')\ntotal_sales_df['shop_avg_total_sales'] = total_sales_df['shop_avg_total_sales'].astype(np.float32)\n\ntotal_sales_df['delta_total_sales'] = (total_sales_df['date_shop_total_sales'] - total_sales_df['shop_avg_total_sales']) \/ total_sales_df['shop_avg_total_sales']\ntotal_sales_df['delta_total_sales'] = total_sales_df['delta_total_sales'].astype(np.float16)\n\nfeature_df['delta_total_sales'] = total_sales_df['delta_total_sales']","f1b693cf":"feature_df['item_shop_first_sale'] = feature_df['date_block_num'] - feature_df.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nfeature_df['item_first_sale'] = feature_df['date_block_num'] - feature_df.groupby('item_id')['date_block_num'].transform('min') ","d3e91e89":"feature_df = feature_df[feature_df.date_block_num > 11]","6ea274d0":"for col in feature_df.columns:\n    if ('_lag_' in col) & (feature_df[col].isnull().any()):\n        feature_df[col].fillna(0, inplace=True)","c98df4ae":"feature_df.columns","78999290":"feature_df.head(3)","d5277aa9":"X_train = feature_df[feature_df.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = feature_df[feature_df.date_block_num < 33]['item_cnt_month']\nX_valid = feature_df[feature_df.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = feature_df[feature_df.date_block_num == 33]['item_cnt_month']\nX_test = feature_df[feature_df.date_block_num == 34].drop(['item_cnt_month'], axis=1)\n\nlgb_train = lgb.Dataset(X_train, Y_train)\nlgb_valid = lgb.Dataset(X_valid, Y_valid, reference=lgb_train)","02f6b89a":"params = {\n    'task' : 'train',\n    'boosting' : 'gbdt',\n    'objective': 'regression',\n    'metric': 'l2'\n}\nbest_params, history = {}, []\nmodel = lgb_optuna.train(params, \n                  lgb_train, \n                  valid_sets=lgb_valid,\n                  verbose_eval=False,\n                  num_boost_round=20,\n                  early_stopping_rounds=5,\n                  best_params=best_params,\n                  tuning_history=history)","8436e7dc":"best_params","b2f4aecb":"params.update(best_params)","d257885e":"gbm = lgb.train(params,\n            lgb_train,\n            num_boost_round=100,\n            valid_sets=lgb_valid,\n            early_stopping_rounds=100)","cd4b4d6a":"feature_imp = pd.DataFrame()\nfeature_imp['feature'] = gbm.feature_name()\nfeature_imp['importance'] = gbm.feature_importance()\nhv.Bars(feature_imp.sort_values(by='importance', ascending=True)).opts(title=\"Feature Importance\", color=\"purple\", xlabel=\"Features\", ylabel=\"Importance\", invert_axes=True)\\\n                            .opts(opts.Bars(width=700, height=700, tools=['hover'], show_grid=True))","b66bc046":"Y_test = gbm.predict(X_test).clip(0, 20)\nsubmission['item_cnt_month'] = Y_test\nsubmission.to_csv('submission.csv', index=False)","f550c750":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","b76f68ef":"### Insight\n><div class=\"alert alert-success\" role=\"alert\">\n>Cheapest items:\n><ol>\n><li>Corporate package<\/li>\n><li>Battery<\/li>\n><li>Monday Night Combat(PC Game)<\/li>\n><\/ol>\n><\/div>","153bd171":"### Worst Sales Shop\n\n><div class=\"alert alert-success\" role=\"alert\">Shops with poor sales are located in the eastern part of the continent, and the type of shops is likely to be medium to small.<\/div>","66fb0d5b":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","4a475882":">Merging sales dataframe and item\/shop dataframe into one dataframe by item_id and shop_id as a key","68d6aaed":"> Because of using 12 as max lag feature, we need to drop first 12 months.","a3650e15":">Item count mean by month for 1 lag  ","f7752e00":"### Stationality\n><div class=\"alert alert-success\" role=\"alert\">\n>Stationality is important for time-series modeling because many time-series modeling method require the data to be stationality.<br\/>\n>Stationality condition is:  \n><ul>\n><li><b>The mean of the data is constant<\/b><\/li>\n><li><b>The variance of the data is constant<\/b><\/li>\n><li><b>The covariance of the data is constant<\/b><\/li>\n><\/ul>\n>The simple concept of stationality is explained in <a href='https:\/\/www.kaggle.com\/jagangupta\/time-series-basics-exploring-traditional-ts'>this notebook<\/a>.\n><\/div>","ffd7f42d":">With no parameter tuning, decreasing trend and yearly peak are correctly predicted!","66703c6e":"### Feature Engineering\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>Item Count by month in each shops<\/li>\n><li>Christmas flag<br\/>\n>    <p>In Decenber, it is thought that consumers tends to buy much more gifts than in other month<\/p><\/li>\n><li>Some lag features<\/li>\n><li>Difference of total sales between months<\/li>\n><\/ul>\n><\/div>","25764939":"### Data Preparation\n\n>To try Prophet modeling, we need to re-format the data into datetime-index\/value shape.","44dce28a":"### Worst Sales Item","3f799cea":">With these features created above, we build the model","98302267":">Item count mean by month\/city\/item for 1,2,3,6,12 lag","67f18f29":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","818c8b44":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","db92aff7":">Function for making N-lag features([sample notebook](https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost#Part-1,-perfect-features))","72c65ea9":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Let's see cities where shops are located.\n><ul>\n><li>As mentioned above, Moscow is the top city<\/li>\n><li>Next to Moscow, there were many large cities and state capitals such as St. Petersburg and Yakutsk<\/li>\n><\/ul>\n><\/div>","26dcb4d4":">Replacing outliers with value of the row having similar condition.","ddb53fd0":"### Prediction & Submission","9099a0e4":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","7cd8783b":"<h1 style=\"text-align:center;font-size:200%;;\">Prophet\/LightGBM - EDA&Feature Engineering&Tuning<\/h1>\n<h3  style=\"text-align:center;\">Keywords : <span class=\"label label-success\">Time Series Analysis<\/span> <span class=\"label label-success\">Feature Engineering<\/span> <span class=\"label label-success\">Boosting Technique<\/span> <span class=\"label label-success\">Hyperparameter Tuning<\/span><\/h3>","9bcd3666":"## Outlier\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>It can be seen that there is an obvious outlier in item price and item sales per day<\/li>\n><li>Item sales per day has a wider distribution, and it seems that the part of long-tail in the distribution shows that large quantities of items are sold at the time of sale or inventory disposal<\/li>\n><\/ul>\n><\/div>","2f8c6697":"### Feature Importance","8b67ecc4":">Adding column city names where shops are located","86059555":">Processing date column into convenient format","d2e05b12":"# 8. References\n\n>* **Good EDA example**  \n>https:\/\/www.kaggle.com\/kabure\/simple-eda-model-hyperopt-w-easy-code\n>* **Good notebook about time series analysis**  \n>https:\/\/www.kaggle.com\/jagangupta\/time-series-basics-exploring-traditional-ts  \n>* **Prophet Document**  \n>https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html\n>* **Prophet Paper**  \n>https:\/\/peerj.com\/preprints\/3190.pdf\n>* **Very good example of boosting method**  \n>https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost#Part-1,-perfect-features  \n>* **Optuna for LightGBM document(step-wise algorithm)**  \n>https:\/\/tech.preferred.jp\/en\/blog\/lightgbm-tuner-new-optuna-integration-for-hyperparameter-optimization\/  ","de66379b":"# 4. Pre-processing","ee758cb8":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Translate top-5 shop names as below :\n><ol>\n><li>Moscow Shopping Center \"Semenovsky\"<\/li>\n><li>Moscow TRC \"Atrium\"<\/li>\n><li>Khimki Shopping Center \"Mega\"<\/li>\n><li>Moscow TC \"MEGA Teply Stan\" II<\/li>\n><li>Yakutsk Ordzhonikidze, 56<\/li>\n><\/ol>\n>Looking at the style of each shops, there are many shopping malls and many of them are located in cities near Moscow.\n><\/div>","b093fe3c":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","10c93bb9":"### Top Sales Item\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>It turns out that the game-related items are making the most profit<\/li>\n><li>PS4 is considered to be popular in hardware, and Grand Theft Auto is considered to be popular in software<\/li>\n><\/ul>\n><\/div>","b3fec516":"><div class=\"alert alert-success\" role=\"alert\">\n>For testing the stationality, I used Augmented Dickey-Fuller test.As a result of the ADF test, p-value of item_cnt_day is within 5%, but the value of total_sales is nearly 10%.<br\/>\n>So we can say that the time-series of item_cnt_day have stationality, but not for the time-series of total_sales.\n><\/div>","b8bcc27d":">Converting class type to reduce memory load","ab277559":"## Item Category Analysis","bd754aec":">Item count mean by month\/sub item category\/shop for 1 lag","b6c0f138":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","7cd684d5":"### Insights\n\n><div class=\"alert alert-success\" role=\"alert\">Looking at the distribution of item names, one particular item stands out(I prefer later).<\/div>","5c488c82":"### Trend in Time Series\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>Both of Sales and Item Count have seasonality<\/li>\n><li>Item Count have decreasing trend consistently, but Sales have increasing trend until middle of the data, and decreasing from that point<\/li>\n><li>The data shows non-linear time series, so I select 'multiplicative' model when using decomposing method<\/li>\n><\/ul>\n><\/div>","12604f80":"### Model Fitting & Visualization","36a384af":">Christmas flag","92d9e47a":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","0decb20a":"## Item Analysis","b1472c57":"### Modeling with Prophet \n\n>Checking the test data, there is 214200 rows in the data.  \n>So we need build 214200 time-series models when using Prophet, and this is impossible.  \n> <font color='red'>I decided to quit using Prophet in this problem .....<\/font>","8120b8e9":">Item price trend","c5d2b991":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Let's see item main\/sub category distribution  \n><ul>\n><li>Entertainment related categories such as games, movies and misic are top-3<\/li>\n><li>Next to them, gift such as toy, ornament and stamp is in the top-ranking<\/li>\n><\/ul>\n><\/div>","dca3d409":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","82208a5d":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Translate top-5 item categories as below :\n><ol>\n><li>Cinema - DVD<\/li>\n><li>PC Games - Standard Editions<\/li>\n><li>Music - Local Production CD<\/li>\n><li>Games - PS3<\/li>\n><li>Cinema - Blu-ray<\/li>\n><\/ol>\n>In addition to the game software of different hardware, movie products(DVD,Blu-ray) of different type of media are also prominent.\n><\/div>","f0b329e1":">Month number \/ number of days in a month","45a89108":"### Data Preparation","6ee1af61":"### Hyperparameter Tuning with Optuna","07c919ac":"# Table of Contents <a id='top'><\/a>\n\n>1. [Overview](#1.-Overview)  \n>    * [Project Detail](#Project-Detail)\n>    * [Goal of this notebook](#Goal-of-this-notebook)\n>1. [Import libraries](#2.-Import-libraries)\n>1. [Load the dataset](#3.-Load-the-dataset)\n>1. [Pre-processing](#4.-Pre-processing)\n>1. [EDA](#5.-EDA)  \n>    * [Shops Analysis](#Shops-Analysis)\n>    * [Item Analysis](#Item-Analysis)\n>    * [Item Category Analysis](#Item-Category-Analysis)\n>    * [Sales Analysis](#Sales-Analysis)\n>    * [Basic Time Series EDA](#Basic-Time-Series-EDA)\n>    * [Outlier](#Outlier)\n>1. [Modelling](#6.-Modelling)\n>    * [Let's try Prophet](#Let's-try-Prophet)\n>    * [Let's try Lightgbm](#Let's-try-Lightgbm)\n>1. [Conclusion](#7.-Conclusion)\n>1. [References](#8.-References)","365155dc":"### Modeling with LightGBM using best parameter","0349ab87":">Making new dataframe for feature engineering","44f12ae1":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","8ecc394f":"### Top Sales Shop\n\n><div class=\"alert alert-success\" role=\"alert\">The shops that make the most contribution to sales are the ones near Moscow, which are mostly large shops like a shopping mall.<\/div>","36a89b5c":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Translate top-5 item names as below :\n><ol>\n><li>Corporate package shirt 1C Interest white (34 * 42) 45 microns<\/li>\n><li>Playstation Store wallet replenishment: Payment card 1000 rub.<\/li>\n><li>Acceptance of funds for 1C-Online<\/li>\n><li> Diablo III [PC, Jewel, Russian version]<\/li>\n><li>Kaspersky Internet Security Multi-Device Russian Edition. 2-Device 1 year Renewal Box<\/li>\n><\/ol>\n>The number one is most prominent, but it's probably not a specific(real) item, but rather accessories that accompanies the purchase.And many others are related to games.<br\/>\n>It is interesting that the internet security software(Kaspersky) is in the list.\n><\/div>","716b9661":"## Let's try Prophet","76b1f146":">Item count mean by month\/main item category\/shop for 1 lag","2a23ec0b":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">\n>Most expensive items:\n><ol>\n><li>Remote Control Software<\/li>\n><li>Shipping cost<\/li>\n><li>Lord of the Ring(DVD)<\/li>\n><\/ol>\n><\/div>","48278d88":">Item count mean by month\/item_category for 1 lag","56376873":"# 5. EDA\n\n### Some points to focus on\n><div class=\"alert alert-success\" role=\"alert\">\n><ul>\n><li>Most populer items,categories and shops<\/li>\n><li>The distribution of item price and item sales per a day<\/li>\n><li>The seasonal trend of sales through a year<\/li>\n><li>Some outliers and missing values<\/li>\n><\/ul>\n><\/div>","7b029ba0":">Fill null value with 0 for lag features","7dea0abd":"### Monthly Aggregation\n\n>Getting the statistics description by grouping by months","7b47f519":"# 1. Overview\n## Project Detail\n>In this project([Predict Future Sales](https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales)), the motivation is to predict total sales for every product and store in the next month by using the dataset provided by Russian software firms [1C Company](https:\/\/1c.ru\/eng\/title.htm).\n\n## Goal of this notebook\n>* Practice EDA technique to deal with time-series data\n>    * check stationiality with ADF test\n>    * ACF analysis\n>    * Series Decomposition into trend\/seasonality\n>* Practice visualising technique(especially using bokeh via holoviews)\n>* Practice feature enginieering technique  \n>    * Lag features\n>    * Differential feature\n>* Practice modeling technique\n>    * Prophet\n>    * LightGBM\n>* Hyperparameter tuning technique\n>    * Step-wise algorithm\n>      * Optune - LightGBM Tuner","f6c697a6":">Trend and seasonality look similar to the ones which we got by traditional metohod.","6401e8c4":"### Time Series Graph of Whole Company Sales\n><div class=\"alert alert-success\" role=\"alert\">\n>Get the whole sales of this company in each month, and see how the sales changes through a year.\n><ul>\n><li>There are obviously two peaks by each 12 points<br\/>\n>    <p>the data is aggregated by each month, so 12 points mean a year<\/p><\/li>\n><li>It is said that the peaks are related to Christmas events or New-Year sales<\/li>\n><li>Monthly Item Count shows decreasing trend, but not Monthly Sales<\/li>\n><\/ul>\n><\/div>","a12aa0ed":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","aa411534":"### Top Sales Item Category\n\n><div class=\"alert alert-success\" role=\"alert\">Top sales items are related to game software or hardware.So, it is natural that the top sales item category is related to games.<\/div>","facbd033":">Number of days after first sale","c7de6104":"### Insights\n\n><div class=\"alert alert-success\" role=\"alert\">Looking at the distribution of item categories, it seems that a lot of TV-game related software and movie DVDs are selling well.<\/div>","1b2c4f30":">Item Count by month in each shop and item","44b7281c":">Item count mean by month\/sub item category for 1 lag","6a02d87e":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","bb151aed":">Item count by month for 1,2,3,6,12 lag  ","79dd54bb":"# 2. Import libraries","582faeea":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","4d128fb4":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","5d35caa3":"# 7. Conclusion\n><div class=\"alert alert-success\" role=\"alert\">\n>According to feature importance analysis above, it is said that:\n><ul>\n><li>shop\/city related features are likely to be more important than other features<\/li>\n><li>lag features which has large lag numbers(3,4,5,...,12) are likely to be less important than these with smaller number<\/li>\n><\/ul>\n><\/div>","2e79e59f":"<a href=\"#top\" class=\"btn btn-success btn-sm active\" role=\"button\" aria-pressed=\"true\" style=\"color:white;\">Table of Contents<\/a>","a7e945a6":">Normalizing category columns which have similar values","c76cb804":"## Basic Time Series EDA","b9085e35":">Total sales trend","c7547fff":"### Periodicity\n><div class=\"alert alert-success\" role=\"alert\">\n>To confirm the yearly periodicity in the data, the autocorrelation is useful. As a result, 12-months period is observed in the correlogram.\n><\/div>","6a36bcc9":">Adding column item main\/sub-category","eb56413a":"## Shops Analysis","d763ed2c":">Item count mean by month\/main item category for 1 lag","ab678081":">Item count mean by month\/item for 1,2,3,6,12 lag","a937bbf9":">Item count mean by month\/city for 1,2,3,6,12 lag","25e155a0":"## Sales Analysis\n\n>Let's aggregate the data based on total sales.","dc85252b":">Calculating the amount of sales per a day","149ad516":"## Let's try Lightgbm","d649438d":"# 3. Load the dataset","df05d540":"# 6. Modelling","e6ef81f3":"### Insights\n><div class=\"alert alert-success\" role=\"alert\">Looking at the number of shops,  the shops in Moscow stand out.<\/div>","53a8ab0c":">Item count mean by month\/shop for 1,2,3,6,12 lag"}}