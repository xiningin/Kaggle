{"cell_type":{"4e1457e9":"code","5688dde2":"code","86598a7d":"code","343de365":"code","bf0051e9":"code","5789d0aa":"code","e9057502":"code","39eca76c":"code","ee8549a8":"code","9e254d67":"code","626ca664":"code","e53e5d74":"code","91f8e2e8":"code","c2264343":"code","ecf7acfd":"code","52c4fdb3":"code","07b89694":"markdown","bbca0eb1":"markdown","2876f5aa":"markdown","b2058c06":"markdown","ac9b0662":"markdown","f512d816":"markdown","d2c8f5e1":"markdown","b3fa42a2":"markdown","3b8ced9e":"markdown","6a5ab09a":"markdown","8872b8f8":"markdown","d601684c":"markdown","ff5e661f":"markdown","b09d113f":"markdown","c830bc01":"markdown","d04b2051":"markdown","7022e55c":"markdown","befed4a8":"markdown","2fd46681":"markdown","0ab4214d":"markdown","cca91a80":"markdown"},"source":{"4e1457e9":"import pandas as pd\nimport altair as alt\nfrom IPython.display import Image\nalt.renderers.enable('colab')\n\nurl = 'https:\/\/query.data.world\/s\/u7jddcn4jdjidyncwf5nztoougzshw'\ndf = pd.read_csv(url)\ndf.head()","5688dde2":"df.dtypes","86598a7d":"# Check for unique values in useful columns\nprint(df['atmo_opacity'].unique())","343de365":"print(df['wind_speed'].unique())","bf0051e9":"print(df['month'].unique())","5789d0aa":"Image(\"http:\/\/www-mars.lmd.jussieu.fr\/mars\/time\/orbit.png\")","e9057502":"# Drop columns from our existing dataframe\nmars = df.drop(['id', 'terrestrial_date', 'wind_speed', 'atmo_opacity'], axis=1)\n\nmars.head()","39eca76c":" #Create the modification function\ndef change_month(orig_value):\n  return int(orig_value.strip().strip('Month '))\n\n#Create an empty list to store modified values in\nmod_values = []\n\n#For Loop for iterating through the column and creating the list of new values\nfor i in mars['month']:\n  mod_values.append(change_month(i))\n\n#Add the list to the dataset as a new column\nmars['month'] = pd.Series(mod_values)\nmars.head()","ee8549a8":"# LS GRAPH\n\nchart = alt.Chart(mars, title='Solar Longitude (Ls) Measurements').mark_point(color='blue').encode(\n    alt.X('sol', \n          axis=alt.Axis(title='Sol (Martian Day)')),\n    alt.Y('ls',\n        axis=alt.Axis(title='Solar Longitude (Ls) Mars\/Sun Angle')),\n    tooltip=list(mars.columns),\n).properties(\n    width=800,\n    height=400\n)\nchart","9e254d67":"chart = alt.Chart(mars, title='Max Temp colored by Solar Longitude').mark_point(color='red').encode(\n    alt.X('sol', \n          axis=alt.Axis(title='Sol (Martian Day)')),\n    y=alt.Y('max_temp',\n        axis=alt.Axis(title='Maximum Temperature')),\n    color=alt.Color('ls', legend=alt.Legend(title='Solar Longitude'), scale=alt.Scale(scheme='plasma')),\n    tooltip=list(mars.columns),\n).properties(\n    width=700,\n    height=400\n)\nchart","626ca664":"chart = alt.Chart(mars, title='Max Temp colored by Month').mark_point(color='red').encode(\n    alt.X('ls',\n          axis=alt.Axis(title='Solar Longitude')),\n    y=alt.Y('max_temp',\n        axis=alt.Axis(title='Maximum Temperature')),\n    color=alt.Color('month', legend=alt.Legend(title='Month'), scale=alt.Scale(scheme='plasma')),\n    tooltip=list(mars.columns),\n).properties(\n    width=700,\n    height=400\n)\nchart","e53e5d74":"chart = chart = alt.Chart(mars, title='Mars Atmo Pressure').mark_point(color='red').encode(\n    alt.X('sol', \n          axis=alt.Axis(title='Sol (Martian Day)')),\n    y=alt.Y('pressure',\n            axis=alt.Axis(title='Atmospheric Pressure'),\n            scale=alt.Scale(domain=(720, 940))),\n    color=alt.Color('max_temp', legend=alt.Legend(title='Max Temperature'), scale=alt.Scale(scheme='plasma')),\n    tooltip=list(mars.columns),\n).properties(\n    width=700,\n    height=400\n)\nchart","91f8e2e8":"mars_by_month = mars.groupby('month').mean()\nmars_by_month = mars_by_month.reset_index()\nmars_by_month.head()","c2264343":"chart = alt.Chart(mars_by_month, title='Average Max Temps by Month').mark_bar(size=54, color='red').encode(\n    alt.X('month',\n        axis=alt.Axis(values=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n                      title='Month')),\n    alt.Y('max_temp',\n        axis=alt.Axis(title='Average Maximum Temperature')),\n    color=alt.Color('pressure', legend=alt.Legend(title='Air Pressure'), scale=alt.Scale(scheme='plasma')),\n    tooltip=list(mars_by_month.columns),\n).properties(\n    width=700,\n    height=400\n).configure_axis(\n    grid=False\n).configure_view(\n    strokeWidth=0\n)\nchart","ecf7acfd":"mars_by_month['temp_difference'] = mars_by_month['max_temp'] - mars_by_month['min_temp']\nmars.head()","52c4fdb3":"chart = alt.Chart(mars_by_month, title='Average Max Temps by Month').mark_bar(size=54, color='red').encode(\n    alt.X('month',\n          axis=alt.Axis(values=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n                        title='Month')),\n    alt.Y('temp_difference',\n          axis=alt.Axis(title='Temperature Difference')),\n    color=alt.Color('pressure', legend=alt.Legend(title='Air Pressure'), scale=alt.Scale(scheme='plasma')),\n    tooltip=list(mars_by_month.columns),\n).properties(\n    width=700,\n    height=400\n).configure_axis(\n    grid=False\n).configure_view(\n    strokeWidth=0\n)\nchart","07b89694":"What we're seeing is a visual representation of the Ls measurement compared to the Martian Sol.  What we see is that throughout approximately 2000 sols, which is roughly the same span of time as a day on Earth, we see about 3 full orbits around the sound.","bbca0eb1":"# Now that we've adjusted the data some, we need to understand how time is considered on Mars\n\nIn order to help deal with the discrpancies between how we keep track of our location in our orbit around the sun, and Mars being an entirely different, and larger orbit, we will mostly keep track of our time via `sols`, which is the length of time it takes for Mars to complete one full rotation (about 3% long than an Earth day), and it's Ls measurement.\n\nMonths on Mars are then broken down into 12 months, divided out each so that each month equals about 30 degrees worth of it's Ls span.  Due to Mar's more eliptical orbit, some months are much longer than others.\n\nLet's look at a comparison between `ls` and `sol` to try and gain a better understanding:","2876f5aa":"Now THIS is interesting!  Right away it's obvious that some sort of seasonality exists in Mars! Not that temperature differences throughout the year should be so surprising, but it's still interesting to see laid out in colors for us.  Above us our visual is showing a 2 dimensional graph, with `Maximum Temperature` on our y-axis, and the `Sol` on our x-axis, and I added a bit of extra information to the visual with `ls` and the patterns are clear.\n\nBut why did I use `sol` after a whole bit earlier about how it's not specifically relational to a Martian year? Frankly because we're just starting out, and for looking for annual patterns, it gives a simple count that we can look for annual patterns in, and we definitely see some annual patterns above.  Remember a Martian year is almost twice as long as an Earth year, so it's not surprising that in approximately 6 years of our time we see the patters for approximately 3 Martian years.\n\nThis is the fun stuff of data science:)","b2058c06":"# Initial Data Analysis\n\nSo we've downloaded our data and are taking a quick look at the type of information it contains.  I just want to take a moment to point out that we are looking at a dateset that is collected from sensors located over 200 million miles away. That's right kids - we're doing data science with information collected from the actual planet of Mars.  How cool is that!\n\nSorry, let's get back to being professional.  Looking at the table above, we're getting the following information at a glance:\n- Terrestrial Date \/ Sol\n- Ls (Solar Longitude)\n- Month\n- Minimum Temperature for the day\n- Maximum Temperature for the day\n- Average Pressure for the day\n- Average Wind Speed for the day\n- Atmospheric Opacity\n\nThere are lots of things here, all relevant to the question of seasonality on our neighbor planet. The question for us at this point is how much of this data is usable, and how much of it can answer our question. Let's look at a couple of things in closer detail.  First, let's check out the types being used in our dataframe.  Often it's not uncommon for data types to be `object` after reading in a csv, so we want to make sure we know what we're working with.","ac9b0662":"# Visualizing our data\n\nNow that we've got some cleaned data, and an understanding of time as it relates to our subject, let's start visualizing some of our data and see what we see.\n\nVisualizing data is an important part of any EDA.  Often, with visualizations we can spot relationships and patterns in the data that are not evident when staring at excel spreadsheets of numbers.  Data visualization is a massive topic in its own right, and I won't pretend to do it justice here, but I hope to show how we can use visualizations to analyze data and gain insights from them.\n\nSo let's throw our data into some visuals, and see what's there.  Let's start with something simple that most of us are familiar with regards to changing seasons.  Temperature.","f512d816":"Now, rather than looking at changes in `max_temp` over consecutive time, we're looking at the changes in `max_temp` as Mars moves throughout it's orbit.  There's not really anything profound here, other than the coolness of seeing how temperature changes throughout the Martian year, with regards to it's position to the sun.","d2c8f5e1":"# A little feature engineering!\nAny good EDA will look at new features that might be created from existing ones.  This is almost a necessity when getting into model building, but any good analysis should always look for new features that can be created for new ways to view the data.  Through this we have a `min_temp` and `max_temp`, which makes it easy to derive a new feature, `temp_difference`.","b3fa42a2":"# Our Features\nThe first several features have to do with accounting for time. There is `terrestrial_date` and `sol` which correspond to specific days on different calendars.  This is all fine and dandy, however outside of referencing specific dates, these numbers don't mean much to us.  Terrestrial dates will not line up with Mars year after year and so have little value, and Sol values pertain to the mission days, starting with 1, so have a limited use as well with regards to the Martian year.  For measuring weather we have our `min_temp` and `max_temp` values, `pressure`, `wind_speed`, and `atmo_opacity`.  These are the features that we can track weather by, but the time measurement with which we track is important.\n\nWhile `sol` and `month` are important to us for different reasons, most people are pretty familiar with what they stand for.  `sol` represents each Martian day from teh start of the mission, and `monsth` of course stands for the month of the year, of which Mars has 12.  `ls` is a measurement that many might not be familiar with, let's check it out:\n\n**Solar Longitude**, or `ls` (No I don't know why it seems backwards) has to do with a measurement with where the planet is in relationship to the sun.  Specifically, it is the Mars-Sun angle measured from the Northern Hemisphere Spring Equinox where ls=0.  Ls=90 then thusly corresponds to the Summer Solstice, etc etc.\n\nIt's in this manner that we can begin to account for an actual Martian year.  Here on Earth we think of a year of being 365 days, but on Mars, a year is approximately 687 days.  So while each planet's year is accounted for with 12 months, the months on Mars are much longer than they are here on Earth.  Almost twice as long, as the twelve months are divided by the `ls` measure, accounting for the proper positioning in the orbit as outlined below.\n","3b8ced9e":"Awesome.  Now we've got a nice clean dataset that we can do some exploration in.  While some of our features are qualitative and others are quantitative, all are being represented by numbers which makes it easier to work with.","6a5ab09a":"# Average Monthly Temperatures on Mars\n\nSo far we've looked at temperature and air pressure on Mars through time, but Pandas also gives us some great features for grouping by certain features for evaluating our data through different lenses.  Let's look at the temperature as it cahnges through the Martian year below:","8872b8f8":"It looks like we see a fairly consistent temperature difference throughout the Martian year.  I had added the pressure variable to color by in case there might be a relationship that we might find interesting, but at a glance it doesn't appear so.  Worth noting, though, is that while the difference between min and max temps is fairly consistent, an average of 60 degrees difference in a day is one heck of a temperature swing!","d601684c":"# Different ways to view time\n\nYou will remember that we mentioned `ls`, or Solar Longitude as being a measurement of the position of the planet within it's orbit.  In our visualization above, we are looking at a simple time series - `sol` is a consecutive time series, starting at 1 and advancing each day, great for looking for patterns in time without being reliant on any specific time frame.\n\nBut you'll remember we talked about the importance of the difference between `sol` and `ls` above, so let's look at our same data in a different time frame below:","ff5e661f":"# There's more than just temperatures!\nWe've been focusing on the `max_temp` feature, which makes sense given as most of us will think of temperature when thinking of the difference in seasons, but there is much more to seasonality than just how hot or cold it is.  (Even if on Mars it's always cold!)\n\nWe have a whole other feature here to checkout to look for seasonal patters, `pressure`, which is a measure of the atmospheric pressure.","b09d113f":"As we can see, `atmo_opacity` and `wind_speed` don't do much for us with regards to what they contain.  `atmo_opacity` is either sunny, or missing, not exactly useful for our purposes, and `wind_speed` doesn't contain any information at all!  `nan`, or \"Not a Number\" is a common thing we see in data that is missing information for a particular observation.  There are many methods and ideas on the best ways for dealing with NaNs, but outside of this particular column, we don't really have too many, so there isn't much for us to do about them.  If you need some tips for dealing with NaN's, I recommend this [post](https:\/\/towardsdatascience.com\/navigating-the-hell-of-nans-in-python-71b12558895b).\n\nIn addition to that, `terrestrial_date` and `month` are not exactly congruent with each other, as will be explained in the next section.  Point is, of the 3 features that are of type `object`, only one is relevant. We will deal with it in our next section.","c830bc01":"# Detecting Seasonal Patterns on Mars\n\nThis notebook is for beginning beginners.  There is nothing here for experienced data scientists outside of the exciting topic, but I hope that this notebook can provide not only the perspective that our profession can have a lot of fun with little known data sets, but also a basic entry into simple and beginning Exploratory Data Analysis, also known as EDA. At a minimum, I hope this notebook provides a fun topic to those interested in Data Science, and a brief introduction into EDA for newcomers.  The data for this can be downloaded from [here](https:\/\/data.world\/the-pudding\/mars-weather) if anyone is interested. It was originally done as my first project at [Bloom Institute](https:\/\/www.bloomtech.com) for a blog post we had to create.  If anyone is interested, you can read the blog post on [Towards Data Science](https:\/\/towardsdatascience.com\/interplanetary-forecasts-17b3fd05afc2)\n\nOne of the great things about being a data scientist is finding things in data that you didn't know where there, or at least learning about things you might know are there in new ways.  This notebook will step through just such an exploration and discovery.  The notion that Mars has seasons shouldn't be a surprise to anyone that has any notion of what causes seasons, but this was my first real notebook with exploring data, and through it I discovered some things about seasons on Mars that I did not know that made the exercise all that much more exciting. I hope that my sharing here helps share that excitement and interest with others who also enjoy data and day dreaming about our red neighbor.\n\nThis notebook will be looking at weather data collected from the REMS package located on the Mars Rover Curisoity over a 6 year period starting in August of 2012 to 2018.  It will perform very basic EDA on the dataset, and through it, will discover some interesting insights about the seasonal patterns that occur on Mars. Our question, which every good exploration should start with, is **Can we detect seasonal patterns on Mars through the data collected by the Mars Rover Curiosity?**\n\nLater in the notebook, I'll be using the Altair visualization libraries.  Altair is one of the top visualization libraries, and is known for it's beautiful visualizations that are quick and easy to make comapred to other libraries.\n\nBut before we get to that, let's import the data and look at what it contains:","d04b2051":"Above we can see the variation in Martian temperatures throughout the Martian year, at least where our rover is located of course.","7022e55c":"# Conclusions:\nWe started this notebook with a question: Using data from the Mars Rover Curiosity, is it possible to detect and learn about seasonal weather patterns on Mars?\n\nThough our dataset mainly only looked at temperature and air pressure, only two parts to what constitutes seasonal weather, I think we've been able to answer that question with a resounding yes!  We've detected within the data patterns in both temperature and air pressure throughout the year, which is even more interesting given that annual patterns in air pressure is not something that exists here on Earth.\n\nThroughout it all I hope I've been able to show some beginner level techniques for EDA, and give a brief overview of the beauty of the Altair visualization library.  I have edited this notebook for readability, but it was my first real Jupyter notebook I ever made, and I had a blast making it, and I hope people have just as much fun reading it.","befed4a8":"# Numerical vs Categorical data\n\nNow we got some data we can work with, at least in regards to our question of seasonality on Mars.  We've got an `ls` measurement, which we've learned is a measurement of where the planet is with regards to the sun in it's year; a `month`, a similar but different measurement based on the same count; a `min_temp`, `max_temp`, and `pressure`, all useful for measuring changes in weather.  If we are to see seasonal changes in Mars, we should see them in these features.\n\nBut not all features are created the same!  There are different ways with which we can evaluate this data, the most obvious being the difference between the `month` feature and the rest.  All of our other features are numerical values, while `month` is.. well.. not.  Here's the even stranger part:  While we can change the month feature to a purely numerical feature, it still itself isn't a numerical feature.  But how can that make sense?  If `month` is changed to be a simple number of 1-12, how are those not numerical values?\n\nThe answer is that because even though these features use numbers, they are still categorical values, because they represent categories, not mathematical numbers.  Let's dig into that a bit.\n\nThe world of data science is a world of statistics, and one of the fundamental aspects of statistics is the difference between quantitative and qualitative data.  More can be read on the topic [here](https:\/\/courses.lumenlearning.com\/odessa-introstats1-1\/chapter\/sampling-and-data\/), but the quick takeaway is this:\n- Quantitative data has to do with quantities, something that is counted, numerical in nature\n- Qualitative data has to do with data that is divided into categories, hence categorical\n\nWith these two definitions, we can see how some parts of our data is numerical, or quantitative, while other parts of it is categorical, or qualitative.  Our Month feature is of course qualitative.  While we may use numbers to represent months, the months themselves are arbitrary categories, representing the position of the planet in it's orbit. We could change the number of months from 10 to 12 and it wouldn't really matter, outside of increasing the number of days in each month, and perhaps spreading our averages out a bit.  Likewise, data like temperature and pressure are not categorical in nature.  These are not arbitrary numbers, but measurements taken with relation to a universal value.\n\nSpeaking of months, currently our `month` feature contains a bunch of text that we don't need.  Let's remove that text making our feature easier to work with.","2fd46681":"We've got a few columns that are type `object` while the rest are either `int` or `float`.  This is good. The instinct can be to recongize an object datatype and jump to correct it, casting it to a string or some other relevant type, however we are in the beginning stages of exploration and don't want to get ahead of ourselves.  Let's check out some of our features and see what we have:","0ab4214d":"Now THAT is an interesting pattern!  Without a doubt we see some seasonality with regards to atmospheric pressure as well.  Fun little fact: There is no real seasonal variability of air pressure here on Earth, so this is something we've never had to deal with as humans.  Our air pressure changes from variations in altitude, and small changes corresponding with weather changes, but no real significant change throughout the year.  Not the case for our red sister planet.\n\nYou may notice the interesting double peak of the pattern.  While I go into further detail in the [article](https:\/\/towardsdatascience.com\/interplanetary-forecasts-17b3fd05afc2), the short version is that this appears to be a result of the orbit of Mars being more oval.","cca91a80":"# Evaluating which variables to keep and use\n\nMost EDA will involve removing some data. It's often the idea that more data is better, but in practice, that is rarely the case. Often more data is confusing data, as is the case here.  For example; If we were to try and look at both `terrestrial_date` and `sol` at the same time, this could lead to some redundant information, as `sol` is really just a count from a specific `terrestrial_date`. Likewise looking at `terrestrial_date` and `ls` will also provide confusing information, given that they are operating on two different time cycles. Truth is, when we are looking at a time series, we want to pay the most attention to the most relevant metric.  Sometimes that may be days, others hours, or in some cases, like ours here, it will be something entirely different, like our `ls` , or even our `sol` variable.  Taking this into consideration we can see where the feature `terrestrial_date` is not as useful to our analysis as `ls` or `sol` is, so we can remove it from our set. In the case of time series, it doesn't make sense to use Earth centered dates for a planet that isn't Earth, so the solution is to remove earth centric time metrics, and focus on Mars-centric ones. `sol` only makes the cut because it is a continuous time metric rather than a cyclic one like `ls`.\n\nIn addition to that and looking at the above data, we can see the columns for `atmo_opacity` and `wind_speed` do not really contain any information, with `wind_speed` containing all NaNs.\n- According to the data information located at: https:\/\/data.world\/the-pudding\/mars-weather, it states that `wind_speed` has not been recorded since Sol 1485, however our table does not appear to contain any wind speed data.\n\nSince these columns do not contain anything that we can use, we will remove them from our data to keep things clean.  I'm also going to remove the `id` feature, as it doesn't really have any relevancy to the question we are asking."}}