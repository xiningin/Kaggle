{"cell_type":{"a60efdf8":"code","cee3ff09":"code","f29bb24b":"code","42f9705a":"code","4f559e1b":"code","44f69108":"code","d16ac1f2":"code","a1bfb83e":"code","8354f76f":"code","a238952d":"code","79cbd98e":"code","74ccea8e":"code","95cbfb5d":"code","4a361724":"code","4f6bbe46":"code","756173e3":"markdown","0df913b4":"markdown","41eed308":"markdown","bc4d3dce":"markdown","a4e62bd4":"markdown","59e944c6":"markdown","15c5ab26":"markdown"},"source":{"a60efdf8":"# Bibliotecas para carregar\/manipular os dados\nimport pandas as pd\nimport numpy as np\n\n# Bibliotecas para gera\u00e7\u00e3o de gr\u00e1ficos\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport graphviz\n\n# Bibliotecas de machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.metrics import (accuracy_score, confusion_matrix,\n                             classification_report)\n","cee3ff09":"# Carrega a base de dados mushrooms dispon\u00edvel no pr\u00f3prio Kaggle e adicionado neste notebook\nmushrooms = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\n","f29bb24b":"mushrooms.head() #exibe as 5 (cinco) primeiras linhas do dataset","42f9705a":"# Breve an\u00e1lise explorat\u00f3ria do dataset\n# Quantidade de linhas agrupadas pelas classes comestiveis e venenosas\nprint(mushrooms.groupby('class').size(), '\\n')\n\n# View geral do dataset\nmushrooms.info()","4f559e1b":"fig, ax = plt.subplots(figsize=(15, 8))\n\n# N\u00e3o consegui colocar o jitter como par\u00e2metro da fun\u00e7\u00e3o scatterplot\nsns.scatterplot(x='odor',  y='veil-color', data=mushrooms, hue='class', size='class', sizes=(500, 1000))\n\nax.set(xlabel='odor',\n       ylabel='veil-color',\n       title='Gr\u00e1fico de Dispers\u00e3o - Base de Dados Mushrooms',\n       )\n\nplt.show()\n# \u00c9 poss\u00edvel identificar por ex. que o odor igual a 'n' e o veil_color igual a 'w'\n# \u00e9 o \u00fanico local onde h\u00e1 interse\u00e7\u00e3o entre as classes venenosas e comestiveis","44f69108":"features = mushrooms.iloc[:, 1:23] # Seleciona os dados sem as classes na vari\u00e1vel features\nlabels = mushrooms.iloc[:,0] # Seleciona os dados das classes na vari\u00e1vel labels\n\n\n# Convers\u00e3o das features para valores inteiros\nfeatures = pd.get_dummies(features)\n\n# Realiza a divis\u00e3o do dataset inserindo 20% dos dados para teste e 80% para treino\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, stratify=labels)","d16ac1f2":"print(y_train.value_counts(), '\\n') # Valores de classe utilizados para treino\nprint(y_test.value_counts()) # Valores de classe utilizados para teste","a1bfb83e":"# A vari\u00e1vel X_train recebe a por\u00e7\u00e3o de dados usado para treinar o modelo.\n# Este cont\u00e9m apenas os dados (80% deles), sem as classes:\nX_train","8354f76f":"# As classes dos dados de treino est\u00e3o na vari\u00e1vel y_train:\ny_train","a238952d":"# J\u00e1 a vari\u00e1vel X_test est\u00e3o os dados (20% deles) usados para testar o modelo \n# (dados que o modelo n\u00e3o conhece)\nX_test","79cbd98e":"# As classes dos dados de teste est\u00e3o na vari\u00e1vel y_test\ny_test","74ccea8e":"model = DecisionTreeClassifier(criterion = 'gini', random_state = None) # Instanciando uma \u00e1rvore para classifica\u00e7\u00e3o \n\nmodel = model.fit(X_train, y_train) # Constr\u00f3i o modelo a partir da base de treinamento\n#score = model.score(X_train, y_train)\n#print(score)\n\ny_pred = model.predict(X_test) # Utiliza o modelo treinado para realizar\n                               # previs\u00f5es sobre a base teste desconhecida \n\naccuracy = accuracy_score(y_test, y_pred) # Verifica a acur\u00e1cia do modelo\n\nprint(f'Acur\u00e1ria obtida por meio do modelo \u00e1rvore de Decis\u00e3o: {accuracy:.2%}')","95cbfb5d":"pd.crosstab(y_pred,\n            y_test,\n            rownames=['Previsto'],\n            colnames=['Real'],\n            margins=True)","4a361724":"# Relat\u00f3rio de classifica\u00e7\u00e3o\nprint(classification_report(y_test, y_pred))","4f6bbe46":"feature_names = features.columns.to_list() # Lista contendo o nome dos atributos \n\nplot_data = export_graphviz(model,\n                           #max_depth=10,\n                           feature_names=feature_names, \n                           filled=True, rounded=True, \n                           special_characters=True,\n                          leaves_parallel=True) \n\ngraphviz.Source(plot_data)","756173e3":"**Aplicando a \u00c1rvore de Decis\u00e3o**","0df913b4":"**Visualiza\u00e7\u00e3o da \u00c1rvore de Decis\u00e3o**","41eed308":"**Confer\u00eancia do split realizado no dataset entre treino e teste**","bc4d3dce":"**Gr\u00e1fico de Dispers\u00e3o (Scatter - Rapidminer)**","a4e62bd4":"**Split no dataset entre treino e teste**","59e944c6":"**Introdu\u00e7\u00e3o Data Mining - Dataset Mushrooms**","15c5ab26":"**Matrix de Confus\u00e3o com Pandas Crosstab**"}}