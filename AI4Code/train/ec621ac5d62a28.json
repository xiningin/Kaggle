{"cell_type":{"0e4d9b16":"code","af8faec8":"code","1be208c2":"code","ff17a437":"code","215a458c":"code","fb012fbb":"code","bd26d039":"code","1c94d380":"code","f0e744f9":"code","342efbce":"code","7cc19385":"code","f34d010d":"markdown","708ddbdf":"markdown"},"source":{"0e4d9b16":"import tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom matplotlib import pyplot as plt\n%matplotlib inline","af8faec8":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\ny_train = train[\"label\"]\nx_train = train.drop(labels = [\"label\"], axis = 1)\nx_train = x_train.values.reshape(-1,28,28,1)\ntest    = test.values.reshape(-1,28,28,1)\ndel train\n\nX_train \/= 255\ntest \/= 255","1be208c2":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)","ff17a437":"print(x_train.shape, y_train.shape)\n#print(x_test.shape, y_test.shape)\nprint(test.shape)","215a458c":"from sklearn.model_selection import train_test_split\nrandom_seed = 2\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, \n                                                  test_size = 0.2, random_state = random_seed)","fb012fbb":"import tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import Dropout, Flatten, Input, Dense\n\ndef create_model():\n  def add_conv_block(model, num_filters):\n    model.add(Conv2D(num_filters,3,activation='relu', padding = 'same'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(num_filters,3, activation= 'relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    model.add(Dropout(0.5))\n    return model\n  \n  model = tf.keras.models.Sequential()\n  model.add(Input(shape=(28,28,1)))\n\n  model = add_conv_block(model, 32)\n  model = add_conv_block(model, 64)\n  model = add_conv_block(model, 128)\n\n  model.add(Flatten())\n  model.add(Dense(128, activation=\"relu\"))\n  model.add(Dense(128, activation=\"relu\"))\n  model.add(Dense(10,activation = 'softmax'))\n\n  model.compile(\n      loss = 'categorical_crossentropy',\n      optimizer = 'adam', metrics = ['accuracy']\n  )\n  return model\n\nmodel = create_model()\nmodel.summary()","bd26d039":"print(x_train.shape,y_train.shape,x_val.shape,y_val.shape)","1c94d380":"h = model.fit(\n    x_train,y_train,\n    validation_data = (x_val,y_val),\n    epochs=20,batch_size=30\n#     ,callbacks=[\n#                tf.keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3),\n#                tf.keras.callbacks.ModelCheckpoint(\n#                    'models\/model_{val_accuracy:.3f}.h5',\n#                    svae_best_only=True,save_weights_only=False,\n#                    monitor='val_accuracy'\n#                )\n#     ]\n)","f0e744f9":"accs = h.history['accuracy']\nval_accs = h.history['val_accuracy']\n\nplt.plot(range(len(accs)),accs, label = 'Training')\nplt.plot(range(len(accs)), val_accs, label = 'Validation')\nplt.legend()\nplt.show()","342efbce":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","7cc19385":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","f34d010d":"# Task 1: Import Libraries","708ddbdf":"# Task 2: Preprocess Data"}}