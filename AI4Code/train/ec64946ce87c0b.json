{"cell_type":{"001b9206":"code","b8ef6afa":"code","af66e646":"code","032fcea0":"code","8f1f8141":"code","0db9adaa":"code","50ae5248":"code","4ad705e4":"code","9a9b7da3":"code","c9dcb0de":"code","82a994b3":"code","fa71186f":"code","3d6d0f2c":"code","b1404554":"code","5ef83110":"code","a0c1e9e1":"code","91aec3d6":"markdown","7371066a":"markdown"},"source":{"001b9206":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8ef6afa":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score, auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets\n\n\nfrom keras.utils.np_utils import to_categorical\n\nfrom keras.models import Sequential\n\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, AvgPool2D, BatchNormalization, Reshape\n\nfrom sklearn.neural_network import MLPClassifier","af66e646":"import cv2\nimport os\nimport glob\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndf = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_L.csv')\n\n\n","032fcea0":"df.head(10).T\ndf.shape","8f1f8141":"df.head(5)\n","0db9adaa":"y = df['label']\nx = df.drop('label', axis = 1)\nx = x\/255\nx_train,x_test,y_train,y_test = train_test_split(x, y,test_size = 0.2 ,random_state = 1)\n\nn_samples = len(df.index)\nx1 = np.array(x)\nimages = x1.reshape(n_samples,28,28)\n\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","50ae5248":"mlp = MLPClassifier(hidden_layer_sizes=(200,60))\nmlp.fit(x_train,y_train)\ny_mlp = mlp.predict(x_test)","4ad705e4":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","9a9b7da3":"from keras.utils.np_utils import to_categorical\nprint(y[0])\ny_cat = to_categorical(y)\nprint(y_cat[0])\nnum_classes = y_cat.shape[1]\nprint(num_classes)","c9dcb0de":"from sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nx_train, x_test, y_train, y_test = train_test_split(x, y_cat, test_size=0.2, random_state=1)\nx_train = np.array(x_train)\nx_test = np.array(x_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\nmodel = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(120, activation='relu'))\nmodel.add(Dense(120, activation='relu'))\nmodel.add(Dense(80, activation='relu'))\nmodel.add(Dense(80, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","82a994b3":"train = model.fit(x_train , y_train , validation_data=(x_test,y_test), epochs=400, verbose=1)","fa71186f":"print(train.history['accuracy'])","3d6d0f2c":"print(train.history['val_accuracy'])","b1404554":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()\n\n    \nplot_scores(train)","5ef83110":"x_train, x_test, y_train, y_test = train_test_split(x, y_cat, test_size=0.2, random_state=1)\nx_train = np.array(x_train)\nx_test = np.array(x_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\nmodel = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(80, activation='relu'))\nmodel.add(Dense(80, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\ntrain = model.fit(x_train , y_train , validation_data=(x_test,y_test), epochs=400, verbose=1)\n\nmodel.evaluate(x_test,y_test)\n\nprint(train.history['accuracy'])\n\nprint(train.history['val_accuracy'])\n\nplot_scores(train)","a0c1e9e1":"x_train, x_test, y_train, y_test = train_test_split(x, y_cat, test_size=0.2, random_state=1) \nx_train = np.array(x_train) \nx_test = np.array(x_test) \ny_train = np.array(y_train) \ny_test = np.array(y_test) \nmodel = Sequential() \nmodel.add(Dense(300, activation='relu')) \nmodel.add(Dense(250, activation='relu')) \nmodel.add(Dense(200, activation='relu')) \nmodel.add(Dense(150, activation='relu')) \nmodel.add(Dense(100, activation='relu')) \nmodel.add(Dense(60, activation='relu'))\n\nmodel.add(Dense(num_classes, activation='softmax')) \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\ntrain = model.fit(x_train , y_train , validation_data=(x_test,y_test), epochs=400, verbose=1)\n\nmodel.evaluate(x_test,y_test)\n\nprint(train.history['accuracy'])\n\nprint(train.history['val_accuracy'])\n\nplot_scores(train)","91aec3d6":"Il s'agit donc d'un score pas tr\u00e8s satisfaisant","7371066a":"# Methode Multi Layer Perceptrons"}}