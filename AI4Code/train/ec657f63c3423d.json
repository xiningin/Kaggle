{"cell_type":{"ee732393":"code","4262a851":"code","c13a45e4":"code","37d03cd1":"code","aba4b1d8":"code","7cfdfb81":"code","dc53a12b":"code","5621be13":"code","93a7efdf":"code","920002ff":"code","c7ca1511":"code","d19b71f0":"code","fed59fa4":"code","6401efcd":"code","7b3c6fc1":"code","a53d451e":"code","9ec230dc":"code","52d3fea1":"code","84a7e2dd":"markdown","0d43355d":"markdown","1b03f64d":"markdown","992f83ac":"markdown","ca5cf225":"markdown","7d6ef722":"markdown","0895ecfa":"markdown","dbf78fef":"markdown","fd1405c5":"markdown","fb8efd79":"markdown","ba4e9eff":"markdown","3a4c4287":"markdown"},"source":{"ee732393":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4262a851":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nimport cv2, PIL, glob, pathlib","c13a45e4":"cushion = pathlib.Path(\"..\/input\/natural-diamonds-prices-images\/Diamonds\/images\/cushion\")\nemerald = pathlib.Path(\"..\/input\/natural-diamonds-prices-images\/Diamonds\/images\/emerald\")\nheart = pathlib.Path(\"..\/input\/natural-diamonds-prices-images\/Diamonds\/images\/heart\")\noval = pathlib.Path(\"..\/input\/natural-diamonds-prices-images\/Diamonds\/images\/oval\")\nradiant = pathlib.Path(\"..\/input\/natural-diamonds-prices-images\/Diamonds\/images\/radiant\")","37d03cd1":"images_dict = {\n    \"cushion\" : list(cushion.glob(\"*.jpg\")),\n    \"emerald\" : list(emerald.glob(\"*.jpg\")),\n    \"heart\"   : list(heart.glob(\"*.jpg\")),\n    \"oval\"    : list(oval.glob(\"*.jpg\")),\n    \"radiant\" : list(radiant.glob(\"*.jpg\"))\n}\nlabelsDict = {\n    \"cushion\" : 0,\n    \"emerald\" : 1,\n    \"heart\"   : 2,\n    \"oval\"    : 3,\n    \"radiant\" : 4\n}","aba4b1d8":"PIL.Image.open(str(images_dict[\"emerald\"][0]))","7cfdfb81":"X, y = [], []\nfor label, images in images_dict.items():\n    for image in images:\n        image = cv2.imread(str(image)) # -----------> 1\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # ------------> 2\n        if image is not None:\n            X.append(image) # --------> 3\n            y.append(labelsDict[label]) # ----------->3","dc53a12b":"X = np.array(X)\ny = np.array(y)\n# Converting lists into numpy array","5621be13":"# Displaying first image in X\nplt.imshow(X[0])\nplt.show()","93a7efdf":"X = X\/255\n# Dividing X by 255","920002ff":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","c7ca1511":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras import models, layers","d19b71f0":"data_argumentation = keras.Sequential([\n    keras.layers.experimental.preprocessing.RandomRotation(0.2),\n    keras.layers.experimental.preprocessing.RandomContrast(0.3),\n    keras.layers.experimental.preprocessing.RandomZoom(0.3),\n    keras.layers.experimental.preprocessing.RandomZoom(0.7)\n])","fed59fa4":"model = keras.Sequential([\n    data_argumentation,\n    layers.Conv2D(64, (5, 5), padding=\"same\",   input_shape=(300, 300, 3), activation=\"softmax\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(32, (5, 5), padding=\"same\", activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(16, (5, 5), padding=\"same\", activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.Conv2D(8, (5, 5), padding=\"same\", activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.Dropout(0.2),\n    layers.Flatten(),\n    layers.Dense(50, activation=\"sigmoid\"),\n])\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.fit(X_train, y_train, epochs=200)","6401efcd":"model.evaluate(X_test, y_test)","7b3c6fc1":"answers = [\"cushion\", 'emerald', \"heart\", \"oval\", \"radiant\"]","a53d451e":"pred = model.predict(X_test[:10]) # predicting first 10 values\npredslist = []\nfor i in pred:\n    predslist.append(np.argmax(i)) # argmax() returns max value of an array","9ec230dc":"for i in range(10):\n    plt.imshow(X_test[i])\n    plt.title(\"Predicted : \"+ str(answers[predslist[i]]))\n    plt.xlabel(\"Actual : \"+str(answers[y_test[i]]))\n    plt.show()","52d3fea1":"y_test[0]","84a7e2dd":"Data augmentation in data analysis are techniques used to increase the amount of data by adding slightly modified copies of already existing data or newly created synthetic data from existing data. It acts as a regularizer and helps reduce overfitting when training a machine learning model.","0d43355d":"**Example Image**","1b03f64d":"***Storing all images that has .jpg extension into an dictionary images_dict***","992f83ac":"***Making labels of different diamonds***","ca5cf225":"# Preprocessing","7d6ef722":"***If you like it please do upvote***","0895ecfa":"**Predictions :**","dbf78fef":"**Data Argumentation**","fd1405c5":"# Model Training","fb8efd79":"**I'm gonna store each variety of diamond into different dictionaries**","ba4e9eff":"I'm making two lists X and y\n1. Converting each image into numpy array.\n2. Changing colour to RGB\n3. Appending array to X and appending label to y","3a4c4287":"*This shows the first image of emerald type in our images_dict*"}}