{"cell_type":{"90d9dd07":"code","9b1840e7":"code","37734fb6":"code","907e587e":"code","fd477d14":"code","892a455e":"code","8e2902de":"code","40c2a469":"code","cc767cf6":"code","4837115b":"markdown","ebf35488":"markdown","772bd0b2":"markdown"},"source":{"90d9dd07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b1840e7":"# data can be found here: https:\/\/www.kaggle.com\/andrewmvd\/ocular-disease-recognition-odir5k","37734fb6":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.utils import get_file","907e587e":"pip install openpyxl","fd477d14":"data_directory = '..\/input\/ocular-disease-recognition-odir5k\/ODIR-5K\/ODIR-5K\/data.xlsx'\ndata = pd.read_excel(data_directory)\ndata.head()","892a455e":"full_df = pd.read_csv('\/kaggle\/input\/ocular-disease-recognition-odir5k\/full_df.csv')\nfull_df.head(10)","8e2902de":"# I'm only going to keep the columns that are actually useful. I don't need the filepath, left\/right keywords\n# Also, the labels and target are unreliable, as I have shown previously so I'll drop those too and create my own\ndf = full_df[['ID','Patient Age','Patient Sex','N','D','G','C','A','H','M','O','filename']]","40c2a469":"target = pd.Series(dtype='object')\n# this code iterates through every row in the dataframe and creates a list which contains the correct values for the target, when reading the actual columns\n# then appends this list to a series which contains the target values\nfor i in range(df.shape[0]):\n    target_list = []\n    for col in ['N','D','G','C','A','H','M','O']:\n        if (df.loc[i][col] == 1):\n            target_list.append(1)\n        else:\n            target_list.append(0)\n    d = {'target':target_list}\n    input_df_row = pd.Series(data=d)\n    target = target.append(input_df_row)\ntarget.index = df.index","cc767cf6":"target","4837115b":"# Re-engineering the 'target'","ebf35488":"The diagnoses can be broken down into: \n* Normal (N),\n* Diabetes (D),\n* Glaucoma (G),\n* Cataract (C),\n* Age related Macular Degeneration (A),\n* Hypertension (H),\n* Pathological Myopia (M),\n* Other diseases\/abnormalities (O)\n\nLooking at the full_df, I am a little bit confused. It doesn't seem like the 'target' column lines up with the N, D, G, C, A, H, M, and O columns. For example in ID 0, the target is [1, 0, 0, 0, 0, 0, 0, 0] but the diagnosis is cataract which I think should have been [0, 0, 0, 1, 0, 0, 0, 0]. Also, for ID 2, the exact same target is present [1, 0, 0, 0, 0, 0, 0, 0] but this time it is normal in both eyes. So the target column seems very unreliable. I think I'm better off just engineering my own target based on the N, D, G, C, A, H, M, and O columns. Also the labels seem off since patient ID 0 says 'N' even though this patient has a cataract. Even more reason to engineer my own features.","772bd0b2":"# Loading Images"}}