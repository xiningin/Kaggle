{"cell_type":{"9cec4b7d":"code","9137c75e":"code","e9d2af40":"code","b89b32de":"code","518f0378":"code","1392f637":"code","3d1fabc8":"code","021add7a":"code","6f40f672":"code","f0574784":"code","74642849":"code","491be345":"code","9b18c369":"code","515d91fb":"code","567acf35":"code","f87c132b":"code","017ee9b0":"code","a81b232c":"code","77e5bb7f":"code","1c627674":"code","2ab48fab":"code","d5343a3b":"code","23b6bb46":"code","2fa4ea97":"code","2cc59f5c":"code","a26fd791":"code","2b97a947":"code","dde201f6":"code","4959a875":"code","21f92050":"code","6f5ed28a":"code","7354bf97":"code","3ee449f4":"code","0f18a245":"code","80f07850":"code","dd020678":"markdown","ea6b7af2":"markdown","cbd9902d":"markdown","fc47452e":"markdown","f8d43255":"markdown","731e89f2":"markdown","2fb16fc6":"markdown","43464aea":"markdown","b32c864c":"markdown","06d6fbc9":"markdown","f3d9bf35":"markdown","311a94ac":"markdown","ae5ee308":"markdown","44f05864":"markdown","2d18e7be":"markdown","4cf2dbf3":"markdown","ae62ed2b":"markdown","a9c81089":"markdown","bad331d9":"markdown","0ddaba3e":"markdown","b1656f01":"markdown","026d2dae":"markdown"},"source":{"9cec4b7d":"#import the necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport matplotlib.ticker as ticker","9137c75e":"df = pd.read_csv('..\/input\/sales-forecasting\/train.csv') #Read the dataset","e9d2af40":"df.head()","b89b32de":"df.describe() #Describing the data ","518f0378":"df.drop('Row ID',axis = 1, inplace = True) #Dropping the Row ID column\ndf['Order Date'] = pd.to_datetime(df['Order Date'], format='%d\/%m\/%Y') #convert Order dates to pandas datetime format\ndf['Ship Date'] = pd.to_datetime(df['Ship Date'], format='%d\/%m\/%Y')   #convert shipping dates to pandas datetime format","1392f637":"#sorting data by order date\ndf.sort_values(by=['Order Date'], inplace=True, ascending=True)","3d1fabc8":"#setting the index to be the date will help us a lot later on\ndf.set_index(\"Order Date\", inplace = True)","021add7a":"print(df.isnull().sum())","6f40f672":"df[df['Postal Code'].isnull()]","f0574784":"df['Postal Code'] = df['Postal Code'].fillna(5401) # Postal code for Burlington city","74642849":"print(df.isnull().sum())","491be345":"Top_customers = df.groupby([\"Customer Name\"]).sum().sort_values(\"Sales\", ascending=False).head(20) # Sort the Customers as per the sales\nTop_customers = Top_customers[[\"Sales\"]].round(2) # Round off the Sales Value up to 2 decimal places\nTop_customers.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the customer name into dataframe ","9b18c369":"plt.figure(figsize = (15,5)) # width and height of figure is defined in inches\nplt.title(\"Most Valuable Customers (2015-2019)\", fontsize=18) \nplt.bar(Top_customers[\"Customer Name\"], Top_customers[\"Sales\"],color= '#99ff99',edgecolor='green', linewidth = 1)\nplt.xlabel(\"Customers\",fontsize=15) # x axis shows the customers \nplt.ylabel(\"Revenue\",fontsize=15) # y axis shows the Revenue\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in Top_customers[\"Sales\"].items(): #To show the exact revenue generated on the figure\n    plt.text(k,v-8000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","515d91fb":"Top_states = df.groupby([\"State\"]).sum().sort_values(\"Sales\", ascending=False).head(20) # Sort the States as per the sales\nTop_states = Top_states[[\"Sales\"]].round(2) # Round off the Sales Value up to 2 decimal places\nTop_states.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the states into dataframe","567acf35":"plt.figure(figsize = (15,5)) # width and height of figure is defined in inches\nplt.title(\"States which generated Highest Revenue (2015-2019)\", fontsize=18) \nplt.bar(Top_states[\"State\"], Top_states[\"Sales\"],color= '#FF6F61',edgecolor='Red', linewidth = 1)\nplt.xlabel(\"States\",fontsize=15) # x axis shows the States\nplt.ylabel(\"Revenue\",fontsize=15) # y axis shows the Revenue\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in Top_states[\"Sales\"].items(): #To show the exact revenue generated on the figure\n    if v>400000:\n        plt.text(k,v-150000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');\n    else:\n        plt.text(k,v+15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","f87c132b":"Top_cities = df.groupby([\"City\"]).sum().sort_values(\"Sales\", ascending=False).head(20) # Sort the States as per the sales\nTop_cities = Top_cities[[\"Sales\"]].round(2) # Round off the Sales Value up to 2 decimal places\nTop_cities.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the cities into the dataframe","017ee9b0":"plt.figure(figsize = (15,5)) # width and height of figure is defined in inches\nplt.title(\"Cities which generated Highest Revenue (2015-2019)\", fontsize=18)\nplt.bar(Top_cities[\"City\"], Top_cities[\"Sales\"],color= '#95DEE3',edgecolor='blue', linewidth = 1)\nplt.xlabel(\"Cities\",fontsize=15)  # x axis shows the States\nplt.ylabel(\"Revenue\",fontsize=15)  # y axis shows the Revenue\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in Top_cities[\"Sales\"].items(): #To show the exact revenue generated on the figure\n    if v>250000:\n        plt.text(k,v-75000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');\n    else:\n        plt.text(k,v+15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","a81b232c":"Top_category = df.groupby([\"Category\"]).sum().sort_values(\"Sales\", ascending=False)  # Sort the Categories as per the sales\nTop_category = Top_category[[\"Sales\"]] # keep only the sales column in the dataframe\ntotal_revenue_category = Top_category[\"Sales\"].sum() # To find the total revenue generated as per category\ntotal_revenue_category = str(int(total_revenue_category)) # Convert the total_revenue_category from float to int and then to string\ntotal_revenue_category = '$' + total_revenue_category # Adding '$' sign before the Value\nTop_category.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the category into the dataframe","77e5bb7f":"plt.rcParams[\"figure.figsize\"] = (13,5) # width and height of figure is defined in inches\nplt.rcParams['font.size'] = 12.0 # Font size is defined\nplt.rcParams['font.weight'] = 6 # Font weight is defined\n# we don't want to look at the percentage distribution in the pie chart. Instead, we want to look at the exact revenue generated by the categories.\ndef autopct_format(values): \n    def my_format(pct): \n        total = sum(values) \n        val = int(round(pct*total\/100.0))\n        return ' ${v:d}'.format(v=val)\n    return my_format\ncolors = ['#BC243C','#FE840E','#C62168'] # Colors are defined for the pie chart\nexplode = (0.05,0.05,0.05)\nfig1, ax1 = plt.subplots()\nax1.pie(Top_category['Sales'], colors = colors, labels=Top_category['Category'], autopct= autopct_format(Top_category['Sales']), startangle=90,explode=explode)\ncentre_circle = plt.Circle((0,0),0.82,fc='white') # drawing a circle on the pie chart to make it look better \nfig = plt.gcf()\nfig.gca().add_artist(centre_circle) # Add the circle on the pie chart\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal') \n# we can look the total revenue generated by all the categories at the center\nlabel = ax1.annotate('Total Revenue \\n'+str(total_revenue_category),color = 'red', xy=(0, 0), fontsize=12, ha=\"center\")\nplt.tight_layout()\nplt.show()","1c627674":"Top_products = df.groupby([\"Product Name\"]).sum().sort_values(\"Sales\",ascending=False).head(8) # Sort the product names as per the sales\nTop_products = Top_products[[\"Sales\"]].round(2) # Round off the Sales Value up to 2 decimal places\nTop_products.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the product names into the dataframe\ntotal_revenue_products = Top_products[\"Sales\"].sum() # To find the total revenue generated by all the top products\ntotal_revenue_products = str(int(total_revenue_products)) # Convert the total_revenue_products from float to int and then to string\ntotal_revenue_products = '$' + total_revenue_products # Adding '$' sign before the Value","2ab48fab":"plt.rcParams[\"figure.figsize\"] = (13,7) # width and height of figure is defined in inches\nplt.rcParams['font.size'] = 12.0 # Font size is defined for the figure\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#55B4B0','#E15D44','#009B77','#B565A7'] # colors are defined for the pie chart\nexplode = (0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05)\nfig1, ax1 = plt.subplots()\nax1.pie(Top_products['Sales'], colors = colors, labels=Top_products['Product Name'], autopct= autopct_format(Top_products['Sales']), startangle=90,explode=explode)\ncentre_circle = plt.Circle((0,0),0.80,fc='white') # Draw a circle on the pie chart\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \nlabel = ax1.annotate('Total Revenue \\n of these products \\n'+str(total_revenue_products),color = 'red', xy=(0, 0), fontsize=12, ha=\"center\")\nplt.tight_layout()\nplt.show()","d5343a3b":"# Sort both category and  sub category as per the sales\nTop_subcat = df.groupby(['Category','Sub-Category']).sum().sort_values(\"Sales\", ascending=False).head(10)\nTop_subcat = Top_subcat[[\"Sales\"]].astype(int) # Cast Sales column to integer data type\nTop_subcat = Top_subcat.sort_values(\"Category\") # Sort the values as per Category\nTop_subcat.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add both columns into data frame\nTop_subcat_1 = Top_subcat.groupby(['Category']).sum() # Calculated the total Sales of all the categories\nTop_subcat_1.reset_index(inplace=True) # Reset the index","23b6bb46":"plt.rcParams[\"figure.figsize\"] = (15,10) # width and height of figure is defined in inches\nfig, ax = plt.subplots()\nax.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle\nwidth = 0.1\nouter_colors = ['#FE840E','#009B77','#BC243C'] # Outer colors of the pie chart\ninner_colors = ['Orangered','tomato','coral',\"darkturquoise\",\"mediumturquoise\",\"paleturquoise\",\"lightpink\",\"pink\",\"hotpink\",\"deeppink\"] # inner colors of the pie chart\npie = ax.pie(Top_subcat_1['Sales'], radius=1, labels=Top_subcat_1['Category'],colors=outer_colors,wedgeprops=dict(edgecolor='w'))\npie2 = ax.pie(Top_subcat['Sales'], radius=1-width, labels=Top_subcat['Sub-Category'],autopct= autopct_format(Top_subcat['Sales']),labeldistance=0.7,colors=inner_colors,wedgeprops=dict(edgecolor='w'), pctdistance=0.53,rotatelabels =True)\n# Rotate fractions\n# [0] = wedges, [1] = labels, [2] = fractions\nfraction_text_list = pie2[2]\nfor text in fraction_text_list: \n    text.set_rotation(315) # rotate the autopct values\ncentre_circle = plt.Circle((0,0),0.6,fc='white') # Draw a circle on the pie chart\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \nplt.tight_layout()\nplt.show()","2fa4ea97":"Top_segment = df.groupby([\"Segment\"]).sum().sort_values(\"Sales\", ascending=False) # Sort the segment as per the sales\nTop_segment = Top_segment[[\"Sales\"]] # keep only the sales column in the dataframe\nTop_segment.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the segment column into the data frame\ntotal_revenue_segement = Top_segment[\"Sales\"].sum() # To find the total revenue generated as per segment\ntotal_revenue_segement = str(int(total_revenue_segement)) # Convert the total_revenue_segment from float to int and then to string\ntotal_revenue_segement= '$' + total_revenue_segement # Adding '$' sign before the Value","2cc59f5c":"plt.rcParams[\"figure.figsize\"] = (13,5) # width and height of figure is defined in inches\nplt.rcParams['font.size'] = 12.0 # Font size is defined\nplt.rcParams['font.weight'] = 6 # Font weight is defined\ncolors = ['#BC243C','#FE840E','#C62168'] # Colors are defined for the pie chart\nexplode = (0.05,0.05,0.05)\nfig1, ax1 = plt.subplots()\nax1.pie(Top_segment['Sales'], colors = colors, labels=Top_segment['Segment'], autopct= autopct_format(Top_segment['Sales']),startangle=90,explode=explode)\ncentre_circle = plt.Circle((0,0),0.85,fc='white') # Draw a circle on the pie chart\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal') \nlabel = ax1.annotate('Total Revenue \\n'+str(total_revenue_segement),color = 'red', xy=(0, 0), fontsize=12, ha=\"center\")\nplt.tight_layout()\nplt.show()","a26fd791":"Top_region = df.groupby([\"Region\"]).sum().sort_values(\"Sales\", ascending=False) # Sort the Region as per the sales\nTop_region = Top_region[[\"Sales\"]].astype(int) # Cast Sales column to integer data type\nTop_region.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the Region column into the data frame","2b97a947":"plt.figure(figsize = (10,5)) # width and height of figure is defined in inches\nplt.title(\"Region-wise Revenue Generation\", fontsize=18)\nplt.bar(Top_region[\"Region\"], Top_region[\"Sales\"],color= '#FF6F61',edgecolor='Red', linewidth = 1)\nplt.xlabel(\"Region\",fontsize=15) # x axis shows the Region \nplt.ylabel(\"Revenue\",fontsize=15) # y axis show the Revenue generated\nplt.xticks(fontsize=12, rotation=90)\nplt.yticks(fontsize=12)\nfor k,v in Top_region[\"Sales\"].items(): #To show the exact revenue generated on the figure\n        plt.text(k,v-150000,'$'+ str(v), fontsize=12,color='k', horizontalalignment='center');","dde201f6":"Top_shipping = df.groupby([\"Ship Mode\"]).sum().sort_values(\"Sales\", ascending=False) # Sort the Shipping modes as per the sales\nTop_shipping = Top_shipping[[\"Sales\"]] # keep only the sales column in the dataframe\nTop_shipping.reset_index(inplace=True) # Since we have used groupby, we will have to reset the index to add the Ship Mode column into the data frame\ntotal_revenue_ship = Top_segment[\"Sales\"].sum() # To find the total revenue generated as per shipping mode\ntotal_revenue_ship = str(int(total_revenue_ship)) # Convert the total_revenue_ship from float to int and then to string\ntotal_revenue_ship = '$' + total_revenue_ship # Adding '$' sign before the Value","4959a875":"plt.rcParams[\"figure.figsize\"] = (13,5) # width and height of figure is defined in inches\nplt.rcParams['font.size'] = 12.0 # Font size is defined\nplt.rcParams['font.weight'] = 6 # Font weight is defined\ncolors = ['#BC243C','#FE840E','#C62168',\"limegreen\"] # define colors for the pie chart\nfig1, ax1 = plt.subplots()\nax1.pie(Top_shipping['Sales'], colors = colors, labels=Top_shipping['Ship Mode'], autopct= autopct_format(Top_shipping['Sales']), startangle=90)\ncentre_circle = plt.Circle((0,0),0.82,fc='white') # Draw a circle on the pie chart\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal') \nlabel = ax1.annotate('Total Revenue \\n'+str(total_revenue_ship),color = 'red', xy=(0, 0), fontsize=12, ha=\"center\")\nplt.tight_layout()\nplt.show()","21f92050":"df1 = df[['Segment','Sales']]\ndf_cat = pd.get_dummies(df1)\ncor_mat = df_cat.corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)]=False\nfig = plt.gcf()\nfig.set_size_inches(20,5)\nsns.heatmap(data = cor_mat, mask = mask, square = True, annot = True, cbar = True)","6f5ed28a":"df1 = df[['Category','Sales']]\ndf_cat = pd.get_dummies(df1)\ncor_mat = df_cat.corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)]=False\nfig = plt.gcf()\nfig.set_size_inches(20,5)\nsns.heatmap(data = cor_mat, mask = mask, square = True, annot = True, cbar = True)","7354bf97":"df1 = df[['Ship Mode','Sales']]\ndf_cat = pd.get_dummies(df1)\ncor_mat = df_cat.corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)]=False\nfig = plt.gcf()\nfig.set_size_inches(20,5)\nsns.heatmap(data = cor_mat, mask = mask, square = True, annot = True, cbar = True)","3ee449f4":"state = ['Alabama', 'Arizona' ,'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', \n         'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland',\n         'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana','Nebraska', 'Nevada', 'New Hampshire',\n         'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\n         'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington',\n         'West Virginia', 'Wisconsin','Wyoming']\nstate_code = ['AL','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA',\n              'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN',\n              'TX','UT','VT','VA','WA','WV','WI','WY']","0f18a245":"state_df = pd.DataFrame(state, state_code) # Create a dataframe\nstate_df.reset_index(level=0, inplace=True)\nstate_df.columns = ['State Code','State']\nsales = df.groupby([\"State\"]).sum().sort_values(\"Sales\", ascending=False)\nsales.reset_index(level=0, inplace=True)\nsales.drop('Postal Code',1, inplace = True)\nsales= sales.sort_values('State', ascending=True)\nsales.reset_index(inplace = True)\nsales.drop('index',1,inplace = True)\nsales.insert(1, 'State Code', state_df['State Code'])","80f07850":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, plot_mpl\n\nsales['text'] = sales['State']\nfig = go.Figure(data=go.Choropleth(\n    locations=sales['State Code'], # Spatial coordinates\n    text=sales['text'],\n    z = sales['Sales'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Reds',\n    colorbar_title = \"Sales\",\n    \n))\n\nfig.update_layout(\n    title_text = 'Sales',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show();","dd020678":"**checking if there is any null data or not**","ea6b7af2":"**<h3> Which products contributed most to the revenue? <\/h3>**","cbd9902d":"**<h3>Let's find out who are the Most Valuable customers!<\/h3>**\n\nThe Most Valuable Customers are the customers who are the most profitable for a company. <br>\nThese customers buy more or higher-value products than the average customer.","fc47452e":"We can see that <i><b>Category - Technology<\/b><\/i> generated the highest revenue of about <b>$827426!<\/b><br>\n\nThe <b>Total Revenue<\/b> generated by all the categories - <b>$2261536!<\/b>","f8d43255":"We can see that <i><b>Sub-Category - Phones<\/b><\/i> generated the highest revenue of about <b>$327782!<\/b><br>","731e89f2":"<h3><b>Correlation of Features<\/b><\/h3>\nBy plotting a correlation matrix, we have a very nice overview of how the features are related to one another. For a Pandas dataframe, we can conveniently use the call <b>.corr<\/b> which by default provides the Pearson Correlation values of the columns pairwise in that dataframe.","2fb16fc6":"**<h3>Let's look at the revenue generated by each category!<\/h3>**","43464aea":"**<h3>Let's find out which cities generated highest revenue!<\/h3>**\n\nHere are the top 10 cities which generated the highest revenue","b32c864c":"<b><h1><center>Superstore Sales Dataset Analysis!<\/center><\/h1><\/b>","06d6fbc9":"We can see that <i><b>Product - Canon imageCLASS 2200 Advanced Copier<\/b><\/i> generated the highest revenue of about <b>$61600!<\/b><br>\n\nThe <b>Total Revenue<\/b> generated by all these products - <b>$209624!<\/b>","f3d9bf35":"**<h3>Let's find out which states generated the highest revenue!<\/h3>**\n\nHere are the Top 10 States which generated the highest revenue","311a94ac":"![image.png](attachment:image.png)","ae5ee308":"We can see that <i><b>Shipping mode - Standard Class<\/b><\/i> generated the highest revenue of about <b>$1340831!<\/b><br>\n\nThe <b>Total Revenue<\/b> generated by all the shipping modes - <b>$2261536!<\/b>","44f05864":"**Let's take a look at the dataset**","2d18e7be":"**We can see that the postal code is not mentioned only for Burlington city in Vermont state. So, we need to fill the postal code of that city.**","4cf2dbf3":"We can see that <i><b>Segment - Consumer<\/b><\/i> generated the highest revenue of about <b>$1148061!<\/b><br>\n\nThe <b>Total Revenue<\/b> generated by all the segments - <b>$209624!<\/b>","ae62ed2b":"<h3><b>Let's look at the revenue generated by each Sub-Category!<h3****>","a9c81089":"<b>To handle the null values in postal code. We will not drop them, instead we will add the postal code of respective city.<br>\n1. we need to find the cities for which the postal code is not mentioned. \n2. Fill the postal code of the respective city into the postal code column.<\/b>","bad331d9":"<h3><b>Which Segment has the highest sales?<\/h3>","0ddaba3e":"<h3>Which shipping mode has the highest sales?<\/h3>","b1656f01":"<b><h3>Choropleth map<\/h3>\n<br>\nSince the state abbreviation or the latitude and longitude are not given, it is difficult to plot a map.\nSo, the state abbreviations are added to the respective states and a choropleth map is plotted.","026d2dae":"<h3><b>Which Region has the highest sales?<\/h3>\n"}}