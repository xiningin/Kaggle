{"cell_type":{"069017a5":"code","7cf48e04":"code","a38cc122":"code","0a4e4297":"code","51fde1c5":"code","fb873ded":"code","e029a7f9":"code","9491d048":"code","204b5fc9":"code","ff171aa5":"code","3bad7f19":"code","a36ba91a":"code","97c1037b":"code","db69b6f7":"code","bba0bb0a":"code","37dc6397":"code","835a55d8":"code","6fc09445":"code","793e3988":"code","ea661336":"code","5bbb65d6":"code","0d44fa5f":"code","7988a960":"code","8c39e784":"code","309f5895":"code","a702ea1a":"code","b5d8330b":"code","58648bfc":"markdown","3eb03410":"markdown"},"source":{"069017a5":"import pandas as pd\nimport numpy as np\nimport keras\nimport matplotlib.pyplot as plt\nimport os\nfrom tqdm import tqdm","7cf48e04":"from glob import glob\nfrom keras.preprocessing.image import load_img, img_to_array","a38cc122":"files = glob('\/kaggle\/input\/breast-histopathology-images\/*\/*\/*')","0a4e4297":"files[:10]","51fde1c5":"count =0 \nfor file in files:\n    if file[-5] == '1':\n        count+=1\nprint(count)","fb873ded":"len(files)","e029a7f9":"def show_img(files):\n    plt.figure(figsize= (10,10))\n    ind = np.random.randint(0, len(files), 25)\n    i=0\n    for loc in ind:\n        plt.subplot(5,5,i+1)\n        sample = load_img(files[loc], target_size=(150,150))\n        sample = img_to_array(sample)\n        plt.axis(\"off\")\n        plt.imshow(sample.astype(\"uint8\"))\n        i+=1","9491d048":"show_img(files)","204b5fc9":"import seaborn as sns","ff171aa5":"def load_balanced_data(files, size, start_index):\n    half_size = int(size\/2)\n    count=0\n    res = []\n    y = []\n    for file in tqdm(files[start_index:]):\n        if (count!=half_size):\n            if file[-5] == '1' and file.endswith(\".png\"):\n                img = load_img(file, target_size = (75,75))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(1)\n                count += 1      \n        else:\n            break\n                \n    for file in tqdm(files[start_index:]):\n        if(count!=0):\n            if(file[-5] == '0'):\n                img = load_img(file, target_size = (75,75))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(0)\n                count -= 1\n        else:\n            break\n    return np.stack(res), y","3bad7f19":"X_train2, y_train2 = load_balanced_data(files, 70000,0)","a36ba91a":"sns.countplot(y_train2)","97c1037b":"x_test2, y_test2 = load_balanced_data(files, 16000, 162000)","db69b6f7":"sns.countplot(y_test2)","bba0bb0a":"from keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, Conv2D, Activation, MaxPooling2D, Flatten, BatchNormalization,GlobalMaxPooling2D","37dc6397":"pip install -U efficientnet","835a55d8":"import efficientnet.keras as efn","6fc09445":" def def_model2(inp_shape = (75,75,3)):\n    model = keras.models.Sequential([\n            efn.EfficientNetB5(weights='imagenet',\n                                include_top=False,\n                                input_shape=inp_shape),\n            GlobalMaxPooling2D(),\n            Dense(1, activation = \"sigmoid\")          \n        ])\n    model.compile(optimizer = keras.optimizers.Adam(1e-3), loss=\"binary_crossentropy\", metrics = ['acc',keras.metrics.AUC(name='auc')])\n    return model","793e3988":"model2 = def_model2()\nmodel2.summary()","ea661336":"from keras.preprocessing.image import ImageDataGenerator","5bbb65d6":"datagen = ImageDataGenerator(height_shift_range=0.2,\n                            width_shift_range=0.2,\n                            zoom_range=0.2,\n                            shear_range=0.2)\ntrain_generator = datagen.flow(X_train2, y_train2, batch_size=64)\nval_generator = datagen.flow(x_test2, y_test2, batch_size=64)","0d44fa5f":"callback = keras.callbacks.ReduceLROnPlateau(\n    monitor='loss',factor=0.25,patience=2, verbose=1,min_delta=0.0001,cooldown=0,min_lr=0.00001, mode='auto',\n)\n\nes = keras.callbacks.EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=3, restore_best_weights=True)","7988a960":"history2 = model2.fit(train_generator, validation_data=val_generator, epochs = 1,\n                     callbacks=[es,callback])\nmodel2.save('model_EfficientNetB5.h5')","8c39e784":"plt.figure(figsize = (12,6))\nplt.subplot(2,1,1)\nplt.plot(history2.history['acc'], label=\"train_acc\")\nplt.plot(history2.history['val_acc'], label = \"test_acc\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(history2.history['loss'], label = \"train_loss\")\nplt.plot(history2.history['val_loss'], label = \"val_loss\")\nplt.legend()","309f5895":"pred = model2.predict(x_test2)\n\nres = []\nfor prediction in pred:\n    if(prediction > 0.5):\n        res.append(1)\n    else:\n        res.append(0)\n        \nfrom sklearn.metrics import classification_report, confusion_matrix\nconf = confusion_matrix(y_test2, res)\nsns.heatmap(conf,annot=True,fmt='0.2f',cmap='Oranges',xticklabels=['0','1'],yticklabels=['0','1'])\nprint(classification_report(y_test2, res))\n\nfrom sklearn.metrics import roc_curve,roc_auc_score\npred_prob = pred\n\n# roc curve for models\nfpr1, tpr1, thresh1 = roc_curve(y_test2, pred_prob[:], pos_label=1)\n\n# roc curve for tpr = fpr \nrandom_probs = [0 for i in range(len(y_test2))]\np_fpr, p_tpr, _ = roc_curve(y_test2, random_probs, pos_label=1)\n\n# auc score\nauc_score = roc_auc_score(y_test2, pred_prob[:])\n\nprint('AUC Score : ',auc_score)","a702ea1a":"# plot roc curves\nplt.plot(fpr1, tpr1, linestyle='--',color='red', label='VGG16 Model')\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue')\n# title\nplt.title('ROC curve')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();","b5d8330b":"plt.figure(figsize= (20,15))\nind = np.random.randint(0, len(pred), 16)\ni=0\nfor loc in ind:\n    plt.subplot(4,4,i+1)\n    plt.xlabel(None)\n    plt.title(f\"pred {res[loc]}, original {y_test2[loc]}\")\n        \n    plt.imshow(x_test2[loc])\n    i+=1","58648bfc":"## Trying Dropout and Data Augmentation ","3eb03410":"## Handling Class Imbalance Problem "}}