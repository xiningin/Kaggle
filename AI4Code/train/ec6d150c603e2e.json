{"cell_type":{"63452190":"code","38c11f08":"code","2c765c94":"code","b5dddd8c":"code","cb950b65":"code","cf45128d":"code","bef91be8":"code","fbf34b57":"code","661a2f22":"code","162984f6":"code","044c6af6":"code","560c0358":"code","9fb83848":"code","30160e0d":"code","b851b040":"code","3a65e354":"markdown","7dccd93d":"markdown","3b7b42a6":"markdown","fc2dd260":"markdown","8655a598":"markdown","e690a08e":"markdown","e79955bc":"markdown"},"source":{"63452190":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport cv2\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","38c11f08":"import matplotlib.ticker as ticker\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras","2c765c94":"test = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/train.csv\")\ntrain['image_id']=train['image_id']+'.jpg'\ntest['image_id']=test['image_id']+'.jpg'\ntrain.head()\nimg_size=256","b5dddd8c":"train_images=[]\npro_tr_images=[]\nfilename=train.image_id\nfor file in filename:\n    image_tr=cv2.imread(\"..\/input\/plant-pathology-2020-fgvc7\/images\/\"+file)\n    res_tr=cv2.resize(image_tr,(img_size,img_size))\n    train_images.append(res_tr)\n    #image_tr = cv2.cvtColor(image_tr, cv2.COLOR_BGR2GRAY)\n    #pro_tr_images.append(image_tr)\n    \ntrain_images=np.array(train_images)\n#pro_tr_images=np.array(pro_tr_images)","cb950b65":"pro_tr_images=np.array(pro_tr_images)\npro_tr_images[0].shape","cf45128d":"test_images=[]\npro_test_images=[]\nfilename=test.image_id\nfor file in filename:\n    image=cv2.imread(\"..\/input\/plant-pathology-2020-fgvc7\/images\/\"+file)\n    res=cv2.resize(image,(img_size,img_size))\n    test_images.append(res)\n    #image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    #pro_test_images.append(image)\n    \ntest_images=np.array(test_images)\n#pro_test_images=np.array(pro_test_images)","bef91be8":"from sklearn import preprocessing\nmm = preprocessing.MinMaxScaler()\nfor i in range(len(pro_tr_images)):\n    #pro_tr_images[i] = mm.fit_transform(pro_tr_images[i])\n    train_images= mm.fit_transform(train_images)\n    \nfor j in range(len(pro_test_images)):\n    #pro_test_images[j] = mm.fit_transform(pro_test_images[j])\n    test_images= mm.fit_transform(test_images)","fbf34b57":"plt.figure(figsize=(15,15))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(pro_tr_images[i])","661a2f22":"train_labels = np.float32(train.loc[:, 'healthy':'scab'].values)","162984f6":"\"\"\"\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator( horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=.1,\n    fill_mode='nearest',\n    shear_range=0.1,\n    rescale=1\/255,\n    brightness_range=[0.5, 1.5])\n\"\"\"","044c6af6":"from keras.utils import plot_model\nfrom keras.layers import Flatten\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Conv2D,MaxPooling2D,Reshape\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Model\nfrom keras.layers import Dense, GlobalAveragePooling2D,Input\nfrom keras.applications.vgg16 import VGG16, preprocess_input, decode_predictions","560c0358":"def cnn_model(train_X, train_Y,test_X,epochs):\n    input_tensor = Input(shape=(img_size, img_size,3))\n    base_model = VGG16(weights='imagenet', include_top=False,input_tensor=input_tensor)\n    x = base_model.output\n    \n    #model.add(Conv2D(filters=32, kernel_size=5,padding='same',input_shape=(img_size, img_size, 3)))\n    \n    #x = MaxPooling2D()(x)\n    x = Flatten()(x)\n    #x = Dense(8000, activation='relu')(x)\n    x = Dense(2000, activation='relu')(x)\n    x = Dense(500, activation='relu')(x)\n    x = Dense(100, activation='relu')(x)\n    x = Dense(20, activation='relu')(x)\n    predictions = Dense(4, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n    model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])\n    model.summary()\n    \n    plot_model(model)\n    history = model.fit(train_X, train_Y, validation_split=0.1, epochs=epochs)\n    plt.plot(range(epochs), history.history['loss'], label='loss')\n    plt.plot(range(epochs), history.history['val_loss'], label='val_loss')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend() \n    plt.show()\n    result = model.predict(test_X)\n    \n    return result","9fb83848":"from sklearn.preprocessing import MinMaxScaler\nepochs = 100\nresult = cnn_model(train_images, train_labels,test_images,epochs)","30160e0d":"cl = pd.DataFrame(result)\ncl.columns = ['healthy', 'multiple_diseases', 'rust', 'scab']\nsubmission = pd.read_csv(\"..\/input\/plant-pathology-2020-fgvc7\/test.csv\")\ndf_end = pd.concat([submission, cl],axis=1)\ndf_end.to_csv('submission.csv', index=False)","b851b040":"df_end","3a65e354":"# model","7dccd93d":"# execution","3b7b42a6":"# using\u3000Transfer Learning(VGG16)\u3000\nPreprocessing (only normalization)","fc2dd260":"# Confirmation","8655a598":"# making label","e690a08e":"# input","e79955bc":"# Preprocessing"}}