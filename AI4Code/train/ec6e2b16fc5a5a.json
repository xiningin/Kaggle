{"cell_type":{"64085861":"code","18b5b6cc":"code","18d097ec":"code","94e76222":"code","79ff19a1":"code","b80dacbe":"code","29d9c868":"code","02f036af":"code","e47f89d3":"code","e2626112":"code","33e31ace":"code","1b1c480e":"code","5d4a9b03":"code","e2a9f6fc":"code","8fcba4a2":"code","e0f745cb":"code","a5b393f4":"code","16baccbc":"code","5d9aa5f3":"code","7dafe95c":"code","51a91e67":"code","91a640ba":"code","dba49553":"code","6a46ab94":"code","f5e9e2e3":"code","21e598b2":"code","21ba75a9":"code","a48f3153":"code","5c401b09":"code","9914dfb0":"code","81ab6571":"code","e8f28855":"code","3065f2df":"code","509e5ceb":"code","3b5dcc7c":"code","811bd396":"markdown","1e76be75":"markdown","f5a8fed1":"markdown","0e60b34f":"markdown","a72b6cd2":"markdown","13600cb4":"markdown","7b3abe37":"markdown","c3b537e7":"markdown","62d994de":"markdown","9e8ce958":"markdown","d64d950e":"markdown","a69bb70a":"markdown","d7813a3b":"markdown","f2ce95e0":"markdown"},"source":{"64085861":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,ConfusionMatrixDisplay,precision_score,recall_score,f1_score,classification_report,roc_curve,plot_roc_curve,auc,precision_recall_curve,plot_precision_recall_curve,average_precision_score\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.pipeline import Pipeline as imbpipeline\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import plot_confusion_matrix\n\nimport folium\nfrom folium.plugins import HeatMap\nimport plotly.express as px\n\nplt.style.use('fivethirtyeight')\n%matplotlib inline\npd.set_option('display.max_columns', 32)","18b5b6cc":"stroke_df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nstroke_df.head()","18d097ec":"stroke_df.describe()","94e76222":"stroke_df.info()","79ff19a1":"for i in stroke_df.columns[1:]:\n    print (\"Unique data in {} is: {}\".format(i, stroke_df[i].unique()))","b80dacbe":"null_df = pd.DataFrame({'Null Values' : stroke_df.isnull().sum(), 'Percentage Missing (%)': round((stroke_df.isnull().sum()\/stroke_df.shape[0])*100,3) })\nnull_df","29d9c868":"stroke_df.shape","02f036af":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(stroke_df['stroke'], palette = \"Set2\")\nax.set_title(\"Distribution of stroke\")\n","e47f89d3":"stroke_df['gender'].value_counts()","e2626112":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(stroke_df['gender'], palette = \"Set2\")\nax.set_title(\"Distribution of gender\")\n","33e31ace":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(stroke_df['stroke'], hue='gender', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of gender vs stroke\")\n","1b1c480e":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.violinplot(x='gender', y='age', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of age vs gender\")\n","5d4a9b03":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(x='gender', hue='work_type', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of work type vs gender\")","e2a9f6fc":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(x='stroke', hue='work_type', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of work type vs stroke\")","8fcba4a2":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.violinplot(y='bmi', x='gender', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of age vs bmi\")\n","e0f745cb":"plt.figure(figsize=(10,6))\nfor i, col in enumerate(['age', 'bmi']):\n    plt.subplot(1,2,i+1)\n    sns.boxplot(stroke_df[col])\n    plt.tight_layout()","a5b393f4":"stroke_0 = stroke_df[stroke_df['stroke'] ==0]\nstroke_1 = stroke_df[stroke_df['stroke'] ==1]\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.distplot(stroke_0['bmi'], kde=\"true\", ax=ax)\nax = sns.distplot(stroke_1['bmi'], kde=\"true\", ax=ax)\nax.set_title(\"Bmi distribution\")\nax.legend(loc='upper right')\n","16baccbc":"labels=['no stroke','stroke']\nstroke_0 = stroke_df[stroke_df['stroke'] ==0]\nstroke_1 = stroke_df[stroke_df['stroke'] ==1]\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.distplot(stroke_0['avg_glucose_level'], kde=\"true\", color= 'blue', ax=ax)\nax = sns.distplot(stroke_1['avg_glucose_level'], kde=\"true\", color = 'green', ax=ax)\nax.set_title(\"Average glucose distribution\")\nax.legend(labels=labels, loc='upper right')","5d9aa5f3":"labels = ['Not stroke', 'Stroke']\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(x='Residence_type', hue='stroke', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of work type vs stroke\")\nax.legend(labels=labels)","7dafe95c":"bmi_avg_glucose_df = stroke_df[['bmi','avg_glucose_level','stroke']]\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.scatterplot(x='bmi', y= 'avg_glucose_level', hue='stroke', data= bmi_avg_glucose_df , palette = \"Set2\")\nax.set_title(\"Distribution of bmi and avg_glucose vs stroke\")","51a91e67":"for i, column in enumerate(['hypertension','heart_disease']):\n    fig, ax = plt.subplots(figsize=(15,10))\n    ax = sns.countplot(x=column, hue = 'stroke', data = stroke_df)\n","91a640ba":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.violinplot(y='age', x='stroke', data=stroke_df, palette = \"Set2\")\nax.set_title(\"Distribution of age vs stroke\")","dba49553":"fig, ax = plt.subplots(figsize=(15,10))\nax = sns.countplot(x='smoking_status', data=stroke_1, palette = \"Set2\")\nax.set_title('Smoking status vs stroke')","6a46ab94":"# Pearson Correlation Heatmap\nplt.figure(figsize=(15,8))\n\nsns.heatmap(stroke_df.corr(method = 'pearson'), vmax=1, center=0, annot = True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","f5e9e2e3":"# Pearson Correlation Heatmap\nplt.figure(figsize=(15,8))\n\nsns.heatmap(stroke_df.corr(method = 'spearman'), vmax=1, center=0, annot = True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","21e598b2":"stroke_df.drop('id', axis=1, inplace = True)\nstroke_df = stroke_df.drop(stroke_df[stroke_df.gender == 'Other'].index)\nstroke_df.bmi.fillna(stroke_df['bmi'].mean(),inplace=True)","21ba75a9":"le = LabelEncoder()\nstroke_df['gender'] = le.fit_transform(stroke_df['gender'])\nstroke_df['ever_married'] = le.fit_transform(stroke_df['ever_married'])\nstroke_df['work_type'] = le.fit_transform(stroke_df['work_type'])\nstroke_df['Residence_type'] = le.fit_transform(stroke_df['Residence_type'])\nstroke_df['smoking_status'] = le.fit_transform(stroke_df['smoking_status'])","a48f3153":"stroke_df.head()","5c401b09":"y = stroke_df['stroke']","9914dfb0":"X = stroke_df.drop('stroke',axis=1)\nX","81ab6571":"X_train,X_test, y_train, y_test = train_test_split(X , y , test_size = 0.2, stratify = y, random_state=11)","e8f28855":"\n# pipeline = make_pipeline(MinMaxScaler(),SMOTE(random_state=11), \n#                               RandomForestClassifier(random_state=11))\n# params ={'n_estimators': np.arange(10,500,10),\n#  'max_depth': np.arange(4,50,2)}\n# new_params = {'randomforestclassifier__' + key: params[key] for key in params}\n# stratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\n# grid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\n# grid_search.fit(X_train, y_train)\n# cv_score = grid_search.best_score_\n# test_score = grid_search.score(X_test,y_test)\n# print(cv_score,test_score)","3065f2df":"# y_test_predict = grid_search.predict(X_test)\n# recall_score(y_test, y_test_predict)","509e5ceb":"pipeline = make_pipeline(MinMaxScaler(), SMOTE(random_state=11), \n                              SVC(random_state=11))\nparams = {'C': [0.001,0.1, 0.01, 1, 2, 3, 4, 5, 10, 100],  \n              'gamma': [10, 5, 1,  0.5, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0001], \n              'kernel': ['linear','rbf','kernel']} \nnew_params = {'svc__' + key: params[key] for key in params}\nstratified_kfold = StratifiedKFold(n_splits=5, shuffle = True, random_state=11)\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=new_params, scoring='recall', cv= stratified_kfold, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\ncv_score = grid_search.best_score_\ntest_score = grid_search.score(X_test,y_test)\nprint(cv_score,test_score)","3b5dcc7c":"print(grid_search.best_params_)\ny_test_predict = grid_search.predict(X_test)\nprint(classification_report(y_test,y_test_predict))\nrecall_score(y_test, y_test_predict)","811bd396":"## Heatmap","1e76be75":"## As we can see, the dataset is strongly imbalanced, we will deal with that later","f5a8fed1":"## We can see that bmi does not contribute as much to stroke as avg_glucose, most people who suffer from stroke has relatively high average glucose, whereas their bmi are relatively low","0e60b34f":"## Distribution is number of stroke vs not stroke","a72b6cd2":"# There are more female than male in this dataset. Let see who gets more stroke","13600cb4":"## This dataset is so weird, more than 70 people who used to smoke suffer from stroke, whereas 44 for still smoking, 90 for never smoke","7b3abe37":"## Don't understand why there is only one gender \"other\", for simplicity, we will just drop that row","c3b537e7":"## Not so much data to get from residence type, since the number of people suffer from stroke are equal","62d994de":"## It is easy to see that, most people who suffer from stroke are more than 60 years old, no surprise at all !","9e8ce958":"# The distribution of age is the same !!","d64d950e":"## People who suffer from stroke has a very high average glucose level, especially when it comes to >170. However, people will low glucose level still suffer from stroke","a69bb70a":"# Preprocessing","d7813a3b":"## People who suffer from stroke has a slightly high average bmi than those who dont ","f2ce95e0":"# EDA"}}