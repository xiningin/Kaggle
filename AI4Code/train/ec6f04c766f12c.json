{"cell_type":{"121f84a2":"code","296508ad":"code","363b2130":"code","565e2e86":"code","c0b078ac":"code","0e6c5bda":"code","6d1b7d2e":"code","30632948":"code","56583d19":"code","d13c6c80":"code","5a946494":"code","8aa53c05":"code","2746a2b2":"code","ac9e4bb1":"code","3b3a1006":"code","7865a3f0":"code","e579d749":"code","525ceef0":"code","603e4036":"code","1cf5d438":"code","a4ff2cc1":"code","6d9af841":"code","e3d827fb":"code","80ee84bd":"code","4294358d":"code","65c9c2ec":"code","aab78189":"markdown","7c8832fa":"markdown","0aaaf36f":"markdown","2cf4b034":"markdown","7427b3f9":"markdown","521e3b4d":"markdown","b2cfd445":"markdown","1b4da838":"markdown","ae720974":"markdown","ea9bab8a":"markdown"},"source":{"121f84a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","296508ad":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats","363b2130":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain.head(5)","565e2e86":"test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.head(5)","c0b078ac":"train.describe()","0e6c5bda":"missing_value=train.isna().sum().sort_values(ascending=False)\nmissing_value.head(20)","6d1b7d2e":"train.drop(missing_value[missing_value>5].index,axis=1,inplace=True)","30632948":"train.shape","56583d19":"X=train","d13c6c80":"Y=X.SalePrice","5a946494":"normalize=stats.boxcox(Y)\nfig,ax=plt.subplots(1,2)\nsns.distplot(Y,ax=ax[0])\nax[0].set_title(\"Original\")\nsns.distplot(normalize[0],ax=ax[1])\nax[1].set_title(\"Normalize\")","8aa53c05":"Correlation=X.corr()\nhigh_corr=Correlation.index[Correlation['SalePrice']>.5]\nplt.figure(figsize=(10,10))\nsns.heatmap(X[high_corr].corr(),annot=True)","2746a2b2":"high_corr","ac9e4bb1":"features=['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea']","3b3a1006":"for i in features:\n    sns.lmplot(x='SalePrice',y=i,data=X)","7865a3f0":"test_id = test['Id']\ntotal_data = pd.concat([X, test], axis=0, sort=False)\ntotal_data = total_data.drop(['Id', 'SalePrice'], axis=1)","e579d749":"missing_values_count = total_data.isna().sum().sort_values(ascending=False)\nmissing_values_count.head(20)","525ceef0":"total_data.drop(missing_data[missing_data['missing']>5].index,axis=1,inplace=True)","603e4036":"total_data.info()","1cf5d438":"from sklearn.preprocessing import LabelEncoder\nobject_cols = [col for col in total_data.columns if total_data[col].dtype == \"object\"]\nlabel_encoder=LabelEncoder()\nfor col in object_cols:\n    total_data[col]=label_encoder.fit_transform(total_data[col])\ntotal_data.info()","a4ff2cc1":"from sklearn.impute import SimpleImputer\nnumeric_cols = [col for col in total_data.columns if total_data[col].dtype in ['int64','float64']]\nmy_imputer=SimpleImputer(strategy='median')\ndata = pd.DataFrame(my_imputer.fit_transform(total_data))\ndata.columns = total_data.columns\na=data.isnull().sum().sort_values(ascending=False)\na.head(25)","6d9af841":"x_train =data[:len(Y)]\nx_test = data[len(Y):]\nx_train.info()\nx_test.info()","e3d827fb":"X_train, X_valid, y_train, y_valid = train_test_split(x_train, Y, train_size=0.8, test_size=0.2, random_state=1)","80ee84bd":"model = RandomForestRegressor(n_estimators=200, random_state=1)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_valid)\nprint(mean_absolute_error(y_valid, preds))","4294358d":"preds_test =model.predict(x_test)\nprint(preds_test)","65c9c2ec":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = preds_test\nsub.to_csv('mysubmission.csv',index=False)\nprint(sub)","aab78189":"***drop all columns where missing value greater than 5***","7c8832fa":"***set target variable***","0aaaf36f":"***set the features variable which is greater correlation respect to target variable(SalePrice)***","2cf4b034":"***reading the test data***","7427b3f9":"***import all library***","521e3b4d":"***reading the train data***","b2cfd445":"***imputer method for numeric value***","1b4da838":"***correlation between features variable and Target variables***","ae720974":"***set feature variable***","ea9bab8a":"***Label Encoder***"}}