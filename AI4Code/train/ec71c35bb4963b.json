{"cell_type":{"64431759":"code","2764daf2":"code","30156c46":"code","b47a583e":"code","e2890847":"code","a9302db2":"code","3e4d8f4a":"code","e5a904a7":"code","875b40f6":"code","0187ae37":"code","fc022f2b":"code","c7d4ba37":"code","4f144461":"code","e70db2fc":"code","e4a5edad":"code","6990013d":"markdown","c446efcf":"markdown","500692cd":"markdown","ce696693":"markdown","59fe1c83":"markdown"},"source":{"64431759":"import numpy as np \nimport pandas as pd \n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2764daf2":"import os\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","30156c46":"encoder = OneHotEncoder()\nencoder.fit([[0], [1]]) \n\n# 0 - Tumeur\n# 1 - Normal","b47a583e":"# on stocke dans result les images avec tumeur\n\ndata = []\npaths = []\nresult = []\n                                                                        #-------Dossier o\u00f9 se trouvent les bonnes images------#\nfor r, d, f in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/'):\n                                                                        #-------------#\n\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        #------Remplir le tableau data-------#\n        \n         #-------------#\n                                  #------Valeur appropri\u00e9e \u00e0 encoder-------#\n        result.append(encoder.transform([[]]).toarray()) \n                                     #-------------#\n","e2890847":"# on stocke dans result les images normales\n\npaths = []\n                                                               #------Dossier o\u00f9 se trouvent les bonnes images-------#\nfor r, d, f in os.walk(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/\"):\n                                                             #-------------#\n\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n                                #------Remplir le tableau data-------#\n        \n                                     #-------------#\n        #------Valeur appropri\u00e9e \u00e0 encoder-------#\n        result.append(encoder.transform([[]]).toarray())\n                                             #-------------#","a9302db2":"data = np.array(data)\ndata.shape","3e4d8f4a":"result = np.array(result)\nresult = result.reshape(139,2)","e5a904a7":"                                     #------D\u00e9finir correctement la fonction train_test_split-------#\n= train_test_split(, , test_size=, shuffle=True, random_state=0)\n                                     #-------------#","875b40f6":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(2, 2), input_shape=(128, 128, 3), padding = 'Same'))\nmodel.add(Conv2D(32, kernel_size=(2, 2),  activation ='relu', padding = 'Same'))\n\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(loss = \"categorical_crossentropy\", optimizer='Adamax')\nprint(model.summary())","0187ae37":"y_train.shape","fc022f2b":"                                     #-------Donner les bons arguments \u00e0 la fonction fit------#\nhistory = model.fit(, , epochs = , batch_size = 40, verbose = 1,validation_data = (, ))\n                                     #-------------#","c7d4ba37":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Test', 'Validation'], loc='upper right')\nplt.show()","4f144461":"def names(number):\n    if number==0:\n        return 'Its a Tumor'\n    else:\n        return 'No, Its not a tumor'","e70db2fc":"from matplotlib.pyplot import imshow\n                                              #------Indiquer l'emplacement d'une image en particulier pour la pr\u00e9diction------#\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/\")\n                                                                #-------------#\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))","e4a5edad":"from matplotlib.pyplot import imshow\n                                                #-----Indiquer l'emplacement d'une image en particulier pour la pr\u00e9diction--------#\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/\")\n                                                      #-------------#\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is A ' + names(classification))","6990013d":"[](http:\/\/)# **D\u00e9finition de notre CNN**\n","c446efcf":"# **Cr\u00e9ation du jeu de test et du jeu de validation**","500692cd":"# **Cr\u00e9ation de 3 listes importantes** \n1. data contient les donn\u00e9es des images sous forme de tableaux numpy\n2. paths contient l'emplacement des images dans le dossier\n3. result contient les valeurs cibles (tumeur ou normal)  ","ce696693":"# **One Hot Encoding des classes \u00e0 pr\u00e9dire**","59fe1c83":"# **Importation des librairies**\n"}}