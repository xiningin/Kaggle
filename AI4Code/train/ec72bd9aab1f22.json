{"cell_type":{"ae2c9365":"code","d2724f75":"code","44f21b77":"code","744b2573":"code","d800f42f":"code","9a2bd250":"code","13fc9d50":"code","528a8ce4":"code","268b71bb":"code","b4977028":"code","0d62842e":"markdown","4388b00e":"markdown","90b05feb":"markdown","7ae075a9":"markdown","fa6caf9e":"markdown"},"source":{"ae2c9365":"# import library\nimport os\nimport tqdm\nimport numpy as np\nimport pandas as pd\nimport pydicom # for DICOM images\nimport matplotlib.pyplot as plt\n%matplotlib inline","d2724f75":"# Read the Dataset\nIMAGE_PATH = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/'\ntrain_df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\n# First Five training data\ntrain_df.head()","44f21b77":"print (f\"Train has {train_df.shape[0]} rows and {train_df.shape[1]} columns\")\nimage_files = list(os.listdir(IMAGE_PATH))\nprint(\"Number of image files: {}\".format(len(image_files)))","744b2573":"# Function for Calculating missing data ratio in feature columns\ndef missing_ratio(data_df):\n    data_mis = 100 * data_df.isnull().sum() \/ len(data_df)\n    data_mis = data_mis.drop(data_mis[data_mis == 0].index).sort_values(ascending=False).round(1)\n    data_mis = pd.DataFrame({'Percentage' :data_mis})\n    data_mis['Columns'] = data_mis.index\n    data_mis.reset_index(drop=True,level=0, inplace=True)\n    # Print some summary information\n    print (\"Your selected dataframe has \" + str(data_df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(data_mis.shape[0]) +\n              \" columns that have missing values.\")\n        \n    return data_mis#.head()","d800f42f":"# calculate percentage of missing data in training dataset\ntrain_mis = missing_ratio(train_df)","9a2bd250":"# Count total number of files in each subdirectory in train and test\n\n# Images Path\ntrain_path = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/\"\ntest_path = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/\"\n\n# --- TRAIN\n\ntrain_dcm = 0\n\n# dirpath - the directory path in string\n# dirnames - all main directories\n# filenames - all subdirectories\n\nfor dirpath, dirnames, filenames in tqdm.tqdm(os.walk(train_path)):\n    train_dcm += len(filenames)\n        \n# --- TEST\n\ntest_dcm = 0\n\nfor dirpath, dirnames, filenames in tqdm.tqdm(os.walk(test_path)):\n    test_dcm += len(filenames)","13fc9d50":"print(\"Train: total .dcm files - {:,}\".format(train_dcm), \"\\n\" +\n      \"Test: total .dcm files - {:,}\".format(test_dcm))","528a8ce4":"def load_dicom(path):\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n    data = data - np.min(data)\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n\npath = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR\/Image-113.dcm\"\ndata = load_dicom(path)\nplt.figure(figsize = (5, 5))\nplt.imshow(data,cmap=\"gray\")\nplt.axis('off');\n","268b71bb":"# Study \"T1wCE\"\nstudy_dir = \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00003\/T1wCE\/\"\ndatasets = []\n\n# Read in the Dataset\nfor dcm in os.listdir(study_dir):\n    path = study_dir + \"\/\" + dcm\n    datasets.append(pydicom.dcmread(path))","b4977028":"# Plot the images\nfig=plt.figure(figsize=(16, 6))\ncolumns = 10\nrows = 3\n\nfor i in range(1, columns*rows +1):\n    img = datasets[i-1].pixel_array\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img, cmap=\"gray\")\n    plt.title(i, fontsize = 9)\n    plt.axis('off');","0d62842e":"# Visualize a DICOM image","4388b00e":"# DICOM Data\n### Now let's explore the .dcm files we were provided and to extract insights about it.","90b05feb":"<h1>RSNA-MICCAI Brain Tumor Radiogenomic Classification<\/h1>\n","7ae075a9":" # Visualize a set of images for a Study","fa6caf9e":"<h3>Predict the status of a genetic biomarker important for brain cancer treatment<\/h3>"}}