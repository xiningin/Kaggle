{"cell_type":{"335da76f":"code","58a5f107":"code","704be69f":"code","f120996c":"code","f7036871":"code","3d06859f":"code","4208d48e":"code","e5238dba":"code","764fc2c5":"code","36fa47ef":"code","f8537af1":"code","3a2cad23":"code","0f570785":"code","9210ddca":"code","812f1a24":"code","d8595ed5":"code","1c3c4973":"code","5c858263":"code","2e29f79d":"code","8ff422ed":"code","b9665e81":"code","76e2958b":"code","fb43379e":"code","82c4d6bb":"code","3d0b1cfb":"code","2c5b69c6":"code","6604c7bb":"code","f39d12da":"code","8dd6a293":"code","d3e27201":"code","9b7fa4e5":"code","77c61944":"code","aa96f19d":"code","420a85ec":"code","160b7735":"code","e8de8eaf":"code","9edb2952":"code","cdfd8b49":"code","92168b72":"code","1da1f211":"code","897c229e":"code","2be5f687":"code","e3db0146":"code","c05741fa":"code","f568aee7":"code","f3a48a61":"code","7b7ec9d8":"code","5ae2a1b9":"code","8e9d94e3":"code","7a29ea10":"code","786dfa89":"markdown","14213de4":"markdown","2b3a4616":"markdown","1b544392":"markdown","747f05af":"markdown","f7bcf4a7":"markdown","eec6b8cf":"markdown","643a3c24":"markdown","8ec5b270":"markdown","c6ae54c4":"markdown","99960289":"markdown","cb952e81":"markdown"},"source":{"335da76f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, KFold\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score,\\\n                            precision_score, recall_score, roc_curve,\\\n                            roc_auc_score, plot_roc_curve, plot_precision_recall_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nSEED = 41\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, ENGLISH_STOP_WORDS\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","58a5f107":"df = pd.read_csv(\"..\/input\/fake-news\/train.csv\")\ndf.head()","704be69f":"df.describe()","f120996c":"df.info()","f7036871":"df.shape\n#rows and columns","3d06859f":"df.isnull().sum()","4208d48e":"df=df.dropna()","e5238dba":"df.isnull().sum()","764fc2c5":"df['label'].hist()","36fa47ef":"_ = sns.countplot(x=\"label\", data=df)","f8537af1":"# WordCloud\ntext = df.text[0]\nwordcloud = WordCloud().generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","3a2cad23":"label1_df = df[df['label'] == 1]\nprint (label1_df)","0f570785":"df.drop(['id','author','title'],axis=1,inplace=True)","9210ddca":"df.info()","812f1a24":"X=df['text']\ny=df['label']","d8595ed5":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)","1c3c4973":"#Bag of Words (Bow) method\/technique\ncountVect = CountVectorizer()\ncountVect.fit(X)\n\nX_train_cv = countVect.transform(X_train)\nX_test_cv = countVect.transform(X_test)\n\nlen(countVect.get_feature_names())","5c858263":"X_train_cv.shape","2e29f79d":"%%time\nlr = LogisticRegression()\nlr.fit(X_train_cv, y_train)","8ff422ed":"y_pred = lr.predict(X_test_cv)\ny_pred_proba = lr.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","b9665e81":"#Logistic regression score","76e2958b":"y_pred = lr.predict(X_train_cv)\ntrain_accuracy = accuracy_score(y_train,y_pred)","fb43379e":"print('train accuracy score : ', train_accuracy)","82c4d6bb":"%%time\nrf = RandomForestClassifier()\nrf.fit(X_train_cv, y_train)","3d0b1cfb":"y_pred = rf.predict(X_test_cv)\ny_pred_proba = rf.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","2c5b69c6":"#Random Forest results","6604c7bb":"%%time\nsvm = SVC()\nsvm.fit(X_train_cv, y_train)","f39d12da":"y_pred = svm.predict(X_test_cv.toarray())\nprint(classification_report(y_test, y_pred))","8dd6a293":"#TF-IDF method\/technique\ntfidf = TfidfVectorizer()\ntfidf.fit(X)\n\nX_train_cv = tfidf.transform(X_train)\nX_test_cv = tfidf.transform(X_test)\n\nlen(tfidf.get_feature_names())","d3e27201":"%%time\nlr = LogisticRegression()\nlr.fit(X_train_cv, y_train)","9b7fa4e5":"y_pred = lr.predict(X_test_cv)\ny_pred_proba = lr.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","77c61944":"#logistic Regression using TF-IDF","aa96f19d":"%%time\nrf = RandomForestClassifier()\nrf.fit(X_train_cv, y_train)","420a85ec":"y_pred = rf.predict(X_test_cv)\ny_pred_proba = rf.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","160b7735":"# Random Forest using TF-IDF","e8de8eaf":"%%time\nsvm = SVC()\nsvm.fit(X_train_cv, y_train)","9edb2952":"y_pred = svm.predict(X_test_cv.toarray())\nprint(classification_report(y_test, y_pred))","cdfd8b49":"# SVM using TF-IDF","92168b72":"#TF-IDF method\/technique\ntfidf = TfidfVectorizer(stop_words='english')\ntfidf.fit(X)\n\nX_train_cv = tfidf.transform(X_train)\nX_test_cv = tfidf.transform(X_test)\n\nlen(tfidf.get_feature_names())","1da1f211":"%%time\nlr = LogisticRegression()\nlr.fit(X_train_cv, y_train)","897c229e":"y_pred = lr.predict(X_test_cv)\ny_pred_proba = lr.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","2be5f687":"%%time\nrf = RandomForestClassifier()\nrf.fit(X_train_cv, y_train)","e3db0146":"y_pred = rf.predict(X_test_cv)\ny_pred_proba = rf.predict_proba(X_test_cv)\nprint(classification_report(y_test, y_pred))","c05741fa":"%%time\nsvm = SVC()\nsvm.fit(X_train_cv, y_train)","f568aee7":"y_pred = svm.predict(X_test_cv.toarray())\nprint(classification_report(y_test, y_pred))","f3a48a61":"# SVM sith Stop words most accurate","7b7ec9d8":"## Confusion Matrix\n\nconf_mat = confusion_matrix(y_test, y_pred)\nsns.heatmap(conf_mat.T, annot=True, fmt='d', cbar=False, cmap=sns.cubehelix_palette(start=.5, rot=-.5, as_cmap=True),\n          xticklabels=['No','Yes'],\n          yticklabels=['No','Yes'] )\nplt.xlabel('Actuals')\nplt.ylabel('Predicted')","5ae2a1b9":"#cross-validation score\ncross_val_score(lr, X_test_cv, y_test, cv=10, scoring = 'accuracy').mean()","8e9d94e3":"def classify_message(text):\n    text = tfidf.transform(text)\n    predicted = lr.predict(text)\n    probability = lr.predict_proba(text).max()*100\n\n    if predicted==0:\n        print(\"not Fake news\")\n        print('the probability percentage is:',round(probability))\n    else:\n        print(\"The news is Fake\")\n        print('the probability percentage is:',round(probability))","7a29ea10":"test = ['Grandiose Ideas for Donald Trump Inaugural Give Way to Traditional - The New York Times']\n\nclassify_message(test)","786dfa89":"#### Feature Scaling (Normalization\/Standardization)","14213de4":"## Exploratory Data Analysis (EDA)","2b3a4616":"## Model Selection","1b544392":"### Hyperparameter Fine-tuning for final selected model","747f05af":"### Train a Baseline Model using Logistic Regression with TF-IDF technique","f7bcf4a7":"## Load Database\/Import Data","eec6b8cf":"### Train a Baseline Model using Logistic Regression with BoW technique","643a3c24":"### Evaluate Multiple Models and Select Best Model","8ec5b270":"## Example","c6ae54c4":"## Import Library and Initialize Global Variables","99960289":"## Data Preprocessing\/Feature Engineering","cb952e81":"### Split Data (Features\/Target, Train\/Validation\/Testing)"}}