{"cell_type":{"bf4f1960":"code","04ce9ea1":"code","6eae9819":"code","55fbe524":"code","3a793b74":"code","c445b358":"code","b325924f":"code","ffb2882a":"code","7dd40733":"markdown","c4ceebff":"markdown","924092a6":"markdown","05052470":"markdown","4adf7f0f":"markdown","c6fbffb2":"markdown"},"source":{"bf4f1960":"%%capture\n!pip install selenium\n!apt-get update \n!apt install chromium-chromedriver -y","04ce9ea1":"from selenium import webdriver\nfrom bs4 import BeautifulSoup\nimport time\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')","6eae9819":"def getSoup(sub_id):\n    options = webdriver.ChromeOptions()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    browser = webdriver.Chrome(options=options)\n\n    URL = 'https:\/\/www.kaggle.com\/c\/lux-ai-2021\/submissions?dialog=episodes-submission-'\n\n    print('Loading submission page...')\n    browser.get(URL + str(sub_id))\n    time.sleep(2)\n\n    print('Scrolling results...')\n    scrolling_element = browser.find_element(\n        webdriver.common.by.By.XPATH,\n        \"\/\/div[@class='mdc-dialog__surface']\")\n    for k in tqdm(range(100)):\n        browser.execute_script('arguments[0].scrollTop = arguments[0].scrollHeight', scrolling_element)\n    time.sleep(1)\n\n    print('Parsing page...')\n    html_source = browser.page_source\n    soup = BeautifulSoup(html_source, 'html.parser')\n    print('Done!')\n    \n    return soup\n\ndef getStats(soup):\n    outcomes = []\n    scores = []\n    scores_delta = []\n    \n    text_select = []\n    team_names = []\n    \n    for span in soup.select('span[class*=\"sc-\"]'):\n        text = span.get_text()\n        if 'vs' in text and '[' in text and 'ago' not in text:\n            text_select.append(text)\n            for part in text.split(' vs '):\n                part_split = part.split(' ')\n                team_name = ' '.join(part_split[1:-2])\n                team_names.append(team_name)\n                \n    team_name = max(set(team_names), key = team_names.count)\n    \n    for text in text_select:\n        for part in text.split(' vs '):\n            if team_name in part:\n                result = part.split(' ')\n                delta = result[-1].strip('()+')\n                if delta != 'Validation':\n                    scores.append(int(result[-2]))\n                    scores_delta.append(int(delta))\n                    outcome = result[0].strip('[]')\n                    if outcome == 'Win':\n                        outcomes.append(1)\n                    elif outcome == 'Loss':\n                        outcomes.append(0)\n                    else: # Tie\n                        outcomes.append(0.5)\n    \n    scores.insert(0, scores[0] + scores_delta[0])\n    scores = np.array(scores[::-1])\n    outcomes = np.array(outcomes[::-1])\n    scores_delta = np.array(scores_delta[::-1])\n        \n    return scores, outcomes, scores_delta","55fbe524":"SUB_ID = 23032370\n\nsoup = getSoup(SUB_ID)\nscores, outcomes, scores_delta = getStats(soup)","3a793b74":"plt.figure(figsize=(15, 8))\nplt.plot(scores, label='scores')\nplt.hlines(np.mean(scores), 0, len(scores), color='tab:orange', label=f'mean score {np.mean(scores):.2f}')\nplt.hlines(np.median(scores), 0, len(scores), color='tab:olive', label=f'median score {np.median(scores):.0f}')\n\nplt.scatter(np.argmax(scores), np.max(scores), color='tab:green', label=f'top score {np.max(scores)}')\nplt.legend()\nplt.show()","c445b358":"plt.figure(figsize=(15, 8))\nplt.plot(scores_delta)\n\nplt.scatter(np.argwhere(scores_delta > 0), scores_delta[scores_delta > 0], c='tab:green', label='Positive')\nplt.scatter(np.argwhere(scores_delta < 0), scores_delta[scores_delta < 0], c='tab:red', label='Negative')\n\nplt.hlines(0, 0, len(scores_delta), color='black', linestyles='--')\nplt.title('score delta')\nplt.legend()\nplt.show()","b325924f":"plt.figure(figsize=(15, 8))\nplt.plot(outcomes, c='lightgray', linestyle='--')\n\nplt.scatter(np.argwhere(outcomes == 1), outcomes[outcomes == 1], c='tab:green', label='Win')\nplt.scatter(np.argwhere(outcomes == 0), outcomes[outcomes == 0], c='tab:red', label='Loss')\nplt.scatter(np.argwhere(outcomes == 0.5), outcomes[outcomes == 0.5], c='tab:blue', label='Tie')\n\nplt.hlines(np.mean(outcomes), 0, len(outcomes), color='tab:orange', label='win rate')\nplt.legend()\nplt.title(f'win rate = {np.mean(outcomes):.3f}')\nplt.show()","ffb2882a":"plt.figure(figsize=(15, 8))\n\nplt.plot(range(1, len(outcomes)+1), [sum(outcomes[:n])\/n for n in range(1, len(outcomes)+1)], label='win rate')\nplt.hlines(np.mean(outcomes), 1, len(outcomes), color='tab:orange', label='current win rate')\nplt.title('win rate change')\nplt.legend()\nplt.show()","7dd40733":"## Score changes (delta) plot","c4ceebff":"## \ud83d\udcc8 This notebook can show various plots about submission's games: score change, win rate change.\n\nIt uses [Selenium](https:\/\/selenium-python.readthedocs.io\/) and [Beautiful Soup](https:\/\/www.crummy.com\/software\/BeautifulSoup\/bs4\/doc\/)\nto download and parse submission page (e.g. https:\/\/www.kaggle.com\/c\/lux-ai-2021\/leaderboard?dialog=episodes-submission-23032370). Meta Kaggle dataset is not used because of extremely slow data loading.","924092a6":"## Win rate change by match","05052470":"## Score growth plot","4adf7f0f":"# Setting up\n`SUB_ID` is the number in the end of link in form https:\/\/www.kaggle.com\/c\/lux-ai-2021\/leaderboard?dialog=episodes-submission-23032370. It also can be seen from submission's page:\n\n![SUB_ID](https:\/\/i.imgur.com\/vniyMkL.png)","c6fbffb2":"## Win\/Loss\/Tie plot by match"}}