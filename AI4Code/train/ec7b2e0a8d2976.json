{"cell_type":{"cd56bec9":"code","70349efd":"code","323742f2":"code","f57e8e50":"code","8db732cb":"code","b041ece3":"code","f950085e":"code","41b18e93":"code","fc26be64":"code","ff56d561":"code","d4da5d64":"code","2d98736b":"code","1942b494":"code","db584d90":"code","03527590":"code","9611171f":"code","e8a802c4":"code","9aaa8f3b":"code","7d097ea2":"code","62611286":"code","7a28c57f":"code","78fdcba6":"code","803fb8ff":"code","c52222f6":"code","da9111eb":"code","32f59194":"code","72677e9d":"code","bae8e4ca":"code","62726644":"code","e38b15fa":"code","754cb735":"code","17c55c87":"code","1c580130":"code","f7f0288c":"code","e689dd49":"code","eb833b05":"code","426cc3e3":"code","b53c2999":"code","169de8ff":"code","5795cf24":"code","2f55f6db":"code","e79dd559":"code","66a9b51d":"code","93d95774":"code","35ca7703":"code","89b50327":"code","81ca8724":"code","754a485f":"code","69e23684":"code","334af6fb":"code","928bb037":"code","b7987e78":"code","2f20e9fa":"code","b8663b27":"code","843cd5be":"code","eb6ad5dc":"code","0c77027a":"code","7ef82e2f":"code","8f39ea22":"code","649aa7cb":"code","1b2632a0":"code","f330b009":"code","7192d4eb":"code","1872de96":"code","63c6638f":"code","700e4eee":"code","48fef471":"code","49170c1d":"code","ecc2d44c":"code","49d5694c":"code","48bd068f":"code","bde64fe3":"code","60cc18c3":"code","5f08f331":"code","0985b195":"code","022a696e":"code","80a38c8d":"code","7917c66b":"code","5cd3539d":"code","e7543a23":"code","0ec9ee2a":"code","e50f0276":"code","9269f79c":"code","55b6c4b6":"code","aacb9d2d":"code","2eb2afa5":"code","857653c4":"code","6521febe":"code","c66c6483":"code","452fa002":"code","e9fad349":"code","2a81b5c5":"code","3d3a7185":"code","aed93929":"code","9d7e2797":"code","d4bd3f82":"code","e3ee706f":"code","9209c7b7":"code","2eb98081":"code","b504f718":"code","56db8861":"code","b21eb97c":"code","1fb5b7ae":"code","659d53d2":"code","53be814a":"code","83639fef":"code","78d41a60":"code","e4023440":"code","638178a9":"code","aad405df":"code","99418a66":"code","af56613a":"code","a45d055b":"code","aefb9526":"code","ad82cc71":"code","0a464956":"code","f5f1486e":"code","e02f9025":"code","0c73898a":"code","12d6cacd":"code","c93c0910":"code","70524a6b":"code","296cd406":"code","1b24a45e":"code","32d87b94":"code","e5c6a054":"code","88381462":"code","8277587f":"code","0be231aa":"code","dbadf1b6":"code","c6c9b820":"code","f7f9c98f":"code","37ee412b":"code","5b9ce37a":"code","c90abc51":"code","a96eccae":"code","6be86e91":"code","2c3941c5":"code","5bc2b422":"code","33382066":"code","453fef45":"code","dbd4bcf4":"code","2d1f3c33":"code","f7de2d9a":"code","6fbe75d9":"code","f866cd4c":"code","bdf77a63":"code","1a69c1e9":"code","036e58ae":"code","8d0d9c9e":"code","fc63ee34":"code","fa5da4e8":"code","79e8b13c":"code","292fb61e":"code","48a301e6":"markdown","0ad2135d":"markdown","18065a35":"markdown","fdd7879a":"markdown","ce131ac9":"markdown","fed59e69":"markdown","0dcbdbc7":"markdown","9a0e2fb7":"markdown","8e3ba816":"markdown","62144c42":"markdown","7c41d27f":"markdown","f24740cd":"markdown","085c8387":"markdown","7ec06732":"markdown","64c21a48":"markdown","e059850f":"markdown","03b7837b":"markdown","647dfe65":"markdown","7d7651f2":"markdown","c6d446b0":"markdown","70bea1e8":"markdown","5557bf40":"markdown","88d7d1ee":"markdown","24ed651e":"markdown","2f1ddc4f":"markdown","36364b10":"markdown","cfd5b284":"markdown","d6c667ec":"markdown","f90ae8db":"markdown","1482fb90":"markdown","11cfcfa1":"markdown","34272edd":"markdown","2c14973f":"markdown","bfd6a25b":"markdown","7b498dba":"markdown"},"source":{"cd56bec9":"import numpy as np\nimport pandas as pd","70349efd":"from tqdm.notebook import tqdm\nimport random\nimport gc\nimport time","323742f2":"from sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import ExtraTreesClassifier","f57e8e50":"import lightgbm as lgb","8db732cb":"gc.enable()","b041ece3":"train_data = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_train.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)\ntest_data = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_test.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","f950085e":"train_counts = train_data.count().sort_values()\/len(train_data)\ntest_counts = test_data.count().sort_values()\/len(test_data)","41b18e93":"cols = set(train_counts[(train_counts < 1) & (train_counts > 0.99)].index) - set(test_counts[(test_counts < 1) & (test_counts > 0.9)].index)","fc26be64":"cols","ff56d561":"train_data.dropna(subset=cols, inplace=True)","d4da5d64":"train_target = train_data[['SK_ID_CURR', 'TARGET']]","2d98736b":"submit = test_data[['SK_ID_CURR']]","1942b494":"train_data.drop(columns=['TARGET'], inplace=True)","db584d90":"test_data['IS_TRAIN'] = 0\ntrain_data['IS_TRAIN'] = 1","03527590":"application_data = train_data.append(test_data)","9611171f":"del(train_data)\ndel(test_data)","e8a802c4":"appl_counts = application_data.count().sort_values()\/len(application_data)","9aaa8f3b":"appl_counts[(appl_counts < 0.6)]","7d097ea2":"appl_counts = application_data.count().sort_values()\/len(application_data)","62611286":"cols = list(set(appl_counts[(appl_counts < 0.6)].index) - set(['EXT_SOURCE_1', 'OWN_CAR_AGE']))","7a28c57f":"#application_data.drop(columns=cols, inplace=True)","78fdcba6":"le = LabelEncoder()\nfor col in application_data.select_dtypes('object'):\n    if len(application_data[col].unique()) <= 2:\n        le.fit(application_data[col])\n        application_data[col] = le.transform(application_data[col])","803fb8ff":"application_data = pd.get_dummies(application_data, dummy_na=True)","c52222f6":"appl_counts = application_data.count().sort_values()\/len(application_data)","da9111eb":"appl_counts[(appl_counts < 1)]","32f59194":"train_data = application_data[application_data.IS_TRAIN == 1].merge(train_target, how='left', on='SK_ID_CURR')","72677e9d":"corrs = train_data.corr()","bae8e4ca":"del(train_data)","62726644":"corrs['TARGET'].abs().sort_values().tail(40)","e38b15fa":"bureau = pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","754cb735":"application_data[application_data.AMT_REQ_CREDIT_BUREAU_WEEK.isnull() & application_data.SK_ID_CURR.isin(bureau.SK_ID_CURR.unique())]","17c55c87":"application_data['IS_IN_BUREAU'] = 0","1c580130":"application_data.loc[application_data.SK_ID_CURR.isin(bureau.SK_ID_CURR.unique()), 'IS_IN_BUREAU'] = 1","f7f0288c":"appl_counts = application_data.count().sort_values()\/len(application_data)\nappl_counts[(appl_counts < 1)]","e689dd49":"application_data['HAS_SOCIAL_CIRCLE'] = 0","eb833b05":"application_data.loc[~application_data.OBS_30_CNT_SOCIAL_CIRCLE.isnull(), 'HAS_SOCIAL_CIRCLE'] = 1","426cc3e3":"application_data","b53c2999":"application_data['AMT_CREDIT_FRAC'] = application_data.AMT_CREDIT \/ application_data.AMT_INCOME_TOTAL","169de8ff":"application_data['AMT_CREDIT_FRAC'] = application_data.AMT_ANNUITY \/ application_data.AMT_CREDIT","5795cf24":"application_data['AMT_GOODS_FRAC'] = application_data.AMT_GOODS_PRICE \/ application_data.AMT_CREDIT","2f55f6db":"application_data['AMT_ANNUITY_FRAC'] = application_data.AMT_ANNUITY \/ application_data.AMT_INCOME_TOTAL","e79dd559":"application_data['AMT_DPD_DEF'] = application_data.DEF_30_CNT_SOCIAL_CIRCLE + application_data.OBS_30_CNT_SOCIAL_CIRCLE","66a9b51d":"bureau_balance = pd.read_csv('..\/input\/home-credit-default-risk\/bureau_balance.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","93d95774":"bureau = bureau[bureau.SK_ID_CURR.isin(application_data.SK_ID_CURR.unique())]","35ca7703":"bureau_balance = bureau_balance[bureau_balance.SK_ID_BUREAU.isin(bureau.SK_ID_BUREAU.unique())]","89b50327":"bureau_balance = pd.get_dummies(bureau_balance)","81ca8724":"bureau_balance = bureau_balance.sort_values(['SK_ID_BUREAU', 'MONTHS_BALANCE'])","754a485f":"temp = bureau_balance.groupby('SK_ID_BUREAU').size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","69e23684":"bureau_balance = bureau_balance.groupby('SK_ID_BUREAU').agg({'last', 'sum', 'mean'})","334af6fb":"bureau_balance.columns = bureau_balance.columns.map('_'.join)","928bb037":"bureau_balance.reset_index(inplace=True)","b7987e78":"bureau_balance = bureau_balance.merge(temp, how='left', on='SK_ID_BUREAU')","2f20e9fa":"bureau_balance.columns = bureau_balance.columns.map(lambda x : 'BLN_' + x if x != 'SK_ID_BUREAU' else x)","b8663b27":"bureau = bureau.merge(bureau_balance, how='left', on='SK_ID_BUREAU')","843cd5be":"bureau.drop(columns='SK_ID_BUREAU', inplace=True)","eb6ad5dc":"del(bureau_balance)","0c77027a":"bureau = bureau.sort_values(['SK_ID_CURR', 'DAYS_CREDIT'])","7ef82e2f":"bureau = pd.get_dummies(bureau, dummy_na=True)","8f39ea22":"temp = bureau.groupby('SK_ID_CURR').size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","649aa7cb":"bureau = bureau.groupby('SK_ID_CURR').agg({'sum', 'mean', 'max'})","1b2632a0":"bureau.columns = bureau.columns.map('_'.join)","f330b009":"bureau.reset_index(inplace=True)","7192d4eb":"bureau = bureau.merge(temp, how='left', on='SK_ID_CURR')","1872de96":"bureau.columns = bureau.columns.map(lambda x : 'BRU_' + x if x != 'SK_ID_CURR' else x)","63c6638f":"application_data = application_data.merge(bureau, how='left', on='SK_ID_CURR')","700e4eee":"del(bureau)","48fef471":"prev_application = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/previous_application.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","49170c1d":"prev_application = prev_application[prev_application.SK_ID_CURR.isin(application_data.SK_ID_CURR.unique())]","ecc2d44c":"prev_application = pd.get_dummies(prev_application, dummy_na=True)","49d5694c":"prev_application.drop(columns='SK_ID_PREV', inplace=True)","48bd068f":"prev_application = prev_application.sort_values(['SK_ID_CURR', 'DAYS_DECISION'])","bde64fe3":"temp = prev_application.groupby('SK_ID_CURR').size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","60cc18c3":"prev_application = prev_application.groupby('SK_ID_CURR').agg(['max', 'sum', 'mean']) # last","5f08f331":"prev_application.columns = prev_application.columns.map('_'.join)","0985b195":"prev_application.reset_index(inplace=True)","022a696e":"prev_application = prev_application.merge(temp, how='left', on='SK_ID_CURR')","80a38c8d":"prev_application.columns = prev_application.columns.map(lambda x : 'PREV_' + x if x != 'SK_ID_CURR' else x)","7917c66b":"application_data = application_data.merge(prev_application, how='left', on='SK_ID_CURR')","5cd3539d":"del(prev_application)","e7543a23":"pos_cash_balance = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/POS_CASH_balance.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","0ec9ee2a":"pos_cash_balance = pos_cash_balance.sort_values(['SK_ID_CURR', 'SK_ID_PREV', 'MONTHS_BALANCE'])","e50f0276":"temp = pos_cash_balance.groupby(['SK_ID_CURR', 'SK_ID_PREV']).size().to_frame()\ntemp = temp.rename(columns={0: 'BLN_COUNT'})\ntemp.reset_index(inplace=True)","9269f79c":"pos_cash_balance = pd.get_dummies(pos_cash_balance, dummy_na=True)","55b6c4b6":"pos_cash_balance = pos_cash_balance.groupby(['SK_ID_PREV', 'SK_ID_CURR']).agg(['sum', 'mean', 'max']) # last","aacb9d2d":"pos_cash_balance.columns = pos_cash_balance.columns.map('_'.join)","2eb2afa5":"pos_cash_balance.reset_index(inplace=True)","857653c4":"pos_cash_balance = pos_cash_balance.merge(temp, how='left', on=['SK_ID_CURR', 'SK_ID_PREV'])","6521febe":"pos_cash_balance.drop(columns='SK_ID_PREV', inplace=True)","c66c6483":"temp = pos_cash_balance.groupby('SK_ID_CURR').size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","452fa002":"pos_cash_balance = pos_cash_balance.groupby(['SK_ID_CURR']).agg(['sum', 'mean', 'max']) ","e9fad349":"pos_cash_balance.columns = pos_cash_balance.columns.map('_'.join)","2a81b5c5":"pos_cash_balance.reset_index(inplace=True)","3d3a7185":"pos_cash_balance = pos_cash_balance.merge(temp, how='left', on='SK_ID_CURR')","aed93929":"pos_cash_balance.columns = pos_cash_balance.columns.map(lambda x : 'CSH_' + x if x != 'SK_ID_CURR' else x)","9d7e2797":"application_data = application_data.merge(pos_cash_balance, how='left', on='SK_ID_CURR')","d4bd3f82":"del(pos_cash_balance)","e3ee706f":"credit_card_balance = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/credit_card_balance.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","9209c7b7":"credit_card_balance = pd.get_dummies(credit_card_balance, dummy_na=True)","2eb98081":"credit_card_balance = credit_card_balance.sort_values(['SK_ID_CURR', 'SK_ID_PREV', 'MONTHS_BALANCE'])","b504f718":"temp = credit_card_balance.groupby(['SK_ID_CURR', 'SK_ID_PREV']).size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","56db8861":"credit_card_balance = credit_card_balance.groupby(['SK_ID_PREV', 'SK_ID_CURR']).agg(['sum', 'mean', 'max']) # last","b21eb97c":"credit_card_balance.columns = credit_card_balance.columns.map('_'.join)","1fb5b7ae":"credit_card_balance.reset_index(inplace=True)","659d53d2":"credit_card_balance = credit_card_balance.merge(temp, how='left', on=['SK_ID_CURR', 'SK_ID_PREV'])","53be814a":"credit_card_balance.drop(columns='SK_ID_PREV', inplace=True)","83639fef":"credit_card_balance = credit_card_balance.groupby(['SK_ID_CURR']).agg(['sum', 'mean'])","78d41a60":"credit_card_balance.columns = credit_card_balance.columns.map('_'.join)","e4023440":"credit_card_balance.reset_index(inplace=True)","638178a9":"credit_card_balance.columns = credit_card_balance.columns.map(lambda x : 'CRD_' + x if x != 'SK_ID_CURR' else x)","aad405df":"application_data = application_data.merge(credit_card_balance, how='left', on='SK_ID_CURR')","99418a66":"del(credit_card_balance)","af56613a":"installments_payments = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/installments_payments.csv', \n                               na_values=['XNA', 'XAP'], na_filter=True)","a45d055b":"installments_payments = installments_payments.sort_values(['SK_ID_CURR', 'SK_ID_PREV', 'DAYS_ENTRY_PAYMENT'])","aefb9526":"temp = installments_payments.groupby(['SK_ID_CURR', 'SK_ID_PREV']).size().to_frame()\ntemp = temp.rename(columns={0: 'COUNT'})\ntemp.reset_index(inplace=True)","ad82cc71":"installments_payments.fillna(0, inplace=True)","0a464956":"installments_payments = installments_payments.groupby(['SK_ID_PREV', 'SK_ID_CURR']).agg(['sum', 'mean', 'max', 'min'])","f5f1486e":"installments_payments.columns = installments_payments.columns.map('_'.join)","e02f9025":"installments_payments.reset_index(inplace=True)","0c73898a":"installments_payments = installments_payments.merge(temp, how='left', on=['SK_ID_CURR', 'SK_ID_PREV'])","12d6cacd":"installments_payments.drop(columns='SK_ID_PREV', inplace=True)","c93c0910":"installments_payments = installments_payments.groupby(['SK_ID_CURR']).agg(['sum', 'mean', 'max', 'min'])","70524a6b":"installments_payments.columns = installments_payments.columns.map('_'.join)","296cd406":"installments_payments.reset_index(inplace=True)","1b24a45e":"installments_payments.columns = installments_payments.columns.map(lambda x : 'INS_' + x if x != 'SK_ID_CURR' else x)","32d87b94":"application_data = application_data.merge(installments_payments, how='left', on='SK_ID_CURR')","e5c6a054":"del(installments_payments)","88381462":"for col in application_data.columns:\n    if len(application_data[col].unique()) <= 1:\n        application_data.drop(columns=col,inplace=True)","8277587f":"application_data.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in application_data.columns]","0be231aa":"model = lgb.LGBMClassifier()","dbadf1b6":"train_data = application_data[application_data.IS_TRAIN == 1.0]","c6c9b820":"test_data = application_data[application_data.IS_TRAIN == 0.0]","f7f9c98f":"train_data.drop(columns='IS_TRAIN', inplace=True)\ntest_data.drop(columns='IS_TRAIN', inplace=True)","37ee412b":"del(application_data)","5b9ce37a":"params = model.get_params()","c90abc51":"params['objective'] = 'binary'\nparams['metric'] = 'auc'","a96eccae":"skf = StratifiedKFold(n_splits=3, random_state=42, shuffle=True)\nfinal_importance = np.zeros(len(train_data.columns))\nfor n_fold, (train_index, valid_index) in tqdm(enumerate(skf.split(train_data, train_target.TARGET))):\n    X_train = train_data.iloc[train_index]\n    y_train = train_target.iloc[train_index].TARGET\n    X_valid = train_data.iloc[valid_index]\n    y_valid = train_target.iloc[valid_index].TARGET\n    lgb_train = lgb.Dataset(data=X_train, label=y_train)\n    lgb_eval = lgb.Dataset(data=X_valid, label=y_valid)\n    model = lgb.train(params, lgb_train, valid_sets=lgb_eval, early_stopping_rounds=150, verbose_eval=100)\n    final_importance += model.feature_importance()","6be86e91":"fi = pd.DataFrame()\nfi['FEAT'] = train_data.columns","2c3941c5":"fi['importance'] = final_importance","5bc2b422":"fi = fi.sort_values(by='importance', ascending=False)","33382066":"fi = fi[fi.importance != 0]","453fef45":"fi.head(30)","dbd4bcf4":"cols = list(set(fi.FEAT.values).union(set(['SK_ID_CURR'])))","2d1f3c33":"len(cols)","f7de2d9a":"train_data = train_data[cols]","6fbe75d9":"test_data = test_data[cols]","f866cd4c":"def get_random_params():\n    params = {\n        'boosting_type': 'gbdt',\n        'metric': 'auc',\n        'num_leaves': random.randint(10, 60),\n        'max_depth': random.randint(10, 30),\n        'learning_rate': random.choice([0.0001, 0.0005, 0.001, 0.005, 0.01]),\n        'n_estimators': random.randint(1000, 20000),\n        'objective': 'binary',\n        'reg_alpha': random.choice([0.001, 0.005, 0.01, 0.05, 0.1]),\n        'reg_lambda': random.choice([0.001, 0.005, 0.01, 0.05, 0.1]),       \n        'colsample_bytree': random.choice([0.4, 0.5, 0.6, 0.7, 0.8, 0.9]),\n        'min_child_samples': random.randint(10, 100),\n        'subsample_for_bin': random.randint(50000, 300000)\n    }\n    return params","bdf77a63":"best_params = {'boosting_type': 'gbdt', \n               'metric': 'auc', \n               'num_leaves': 46, \n               'max_depth': 18, \n               'learning_rate': 0.01, \n               'n_estimators': 6289, \n               'objective': 'binary', \n               'reg_alpha': 0.05, \n               'reg_lambda': 0.05, \n               'colsample_bytree': 0.4, \n               'min_child_samples': 79, \n               'subsample_for_bin': 113092}\nbest_auc = 0.787228","1a69c1e9":"def get_best_params(hyper_rounds, n_folds, best_params=None, best_auc=0):\n    best_params = best_params\n    best_auc = best_auc\n    lgb_train = lgb.Dataset(data=train_data, label=train_target.TARGET)\n    for i in tqdm(range(hyper_rounds)):\n        curr_params = get_random_params()\n        start = time.time()\n        print(curr_params)\n        eval_hist = lgb.cv(curr_params, lgb_train, early_stopping_rounds = 200, nfold = n_folds, seed = 42, verbose_eval = 100)\n        end = time.time()\n        print('TIME:', end-start)\n        curr_auc = eval_hist['auc-mean'][-1]\n        if curr_auc > best_auc:\n            best_params = curr_params\n            best_auc = curr_auc\n    return best_params, best_auc","036e58ae":"HYPER_ROUNDS = 1\nFOLDS = 5\n#best_params, best_auc = get_best_params(HYPER_ROUNDS, FOLDS, best_params, best_auc)","8d0d9c9e":"N_FOLDS = 10","fc63ee34":"skf = StratifiedKFold(n_splits=N_FOLDS, random_state=42, shuffle=True)\nsub_preds = np.zeros(len(test_data))\navg_valid_auc = 0\nfor n_fold, (train_index, valid_index) in tqdm(enumerate(skf.split(train_data, train_target.TARGET))):\n    print(\"FOLD N:\", n_fold)\n    X_train = train_data.iloc[train_index]\n    y_train = train_target.iloc[train_index].TARGET\n    X_valid = train_data.iloc[valid_index]\n    y_valid = train_target.iloc[valid_index].TARGET\n    lgb_train = lgb.Dataset(data=X_train, label=y_train)\n    lgb_eval = lgb.Dataset(data=X_valid, label=y_valid)\n    model = lgb.train(best_params, lgb_train, valid_sets=lgb_eval, early_stopping_rounds=150, verbose_eval=100)\n    y_pred = model.predict(X_valid)\n    sub_preds += model.predict(test_data) \/ skf.n_splits\n    avg_valid_auc += roc_auc_score(y_valid, y_pred) \/ N_FOLDS","fa5da4e8":"avg_valid_auc","79e8b13c":"submit['TARGET'] = sub_preds","292fb61e":"submit.to_csv('submission.csv', index = False)","48a301e6":"Training and evaluation","0ad2135d":"Hand crafted features. The few application data features that actually regard the entity of the loan are only slightly correlated to the target. So I tried to build a few new features","18065a35":"One hot encoding of all the other categorical features","fdd7879a":"In order to reduce the number of features before starting the training and evaluation, I use the lgbm algorithm to select the most important features based on the number of times the feature is used in a model. ","ce131ac9":"EXT_SOURCE_1 will be imputed when the external bureau data is added.\nThe rest is data relative to the housing and it is mostly missing, so I drop all those columns.","fed59e69":"The 6 AMT_REQ_CREDIT_BUREAU features are missing because these clients are not present in the bureau credit data. So I add a new feature IS_IN_BUREAU.","0dcbdbc7":"Bureau Balance data","9a0e2fb7":"I check the correlation of the features with the target to see if I can drop the remaining columns with missing values","8e3ba816":"POS Cash Balance","62144c42":"EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 are the best features, which are scores obtained from external sources. I tried to impute them using the rest of the data, but I only end up lowering the correlation with the target feature so I prefer to let them as they are since the the lgbm algorithm can handle missing data.","7c41d27f":"One-hot encoding","f24740cd":"Hyperparameter Tuning","085c8387":"Next I handle the three categorical features with missing values: ORGANIZATION_TYPE, NAME_TYPE_SUITE, OCCUPATION_TYPE. The approach that I prefer to follow is to create a new categorical value for all of them called Nan in order to avoid messing up the existing data, which will be handled by the get_dummies function used for the one hot encoding. I will use the same approch for all the following data.","7ec06732":"Previous applications","64c21a48":"Analysis of columns with more than 60% of missing values","e059850f":"For all the csv files I consider XNA and XAP as nan (along with the default nan).","03b7837b":"References\n\n1. Guolin Ke Qi Meng Thomas Finely Taifeng Wang Wei Chen Weidong Ma Qiwei Ye Tie-Yan Liu. 2017. [LightGBM: A Highly Efficient Gradient Boosting Decision Tree](https:\/\/papers.nips.cc\/paper\/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.pdf)","647dfe65":"In the final submission I decided to also leave the housing features which slightly improve the score.","7d7651f2":"Installment payments","c6d446b0":"Credit Card Balance","70bea1e8":"Feature selection","5557bf40":"I drop the data of loans that are not related to clients in the application data.","88d7d1ee":"I drop a few rows in the train data where there are less than .01% missing values in columns where the test data has got no missing values and then I join the two datasets adding one column IS_TRAIN to identify where each record belongs.","24ed651e":"Cleaning the application data","2f1ddc4f":"As for the CNT_SOCIAL_CIRCLE features, not knowing how this data was gathered, I decided to add a feature HAS_SOCIAL_CIRCLE.","36364b10":"OWN_CAR_AGE can be handled with FLAG_OWN_CAR when using the tree based gradient boosting.","cfd5b284":"Application data","d6c667ec":"Label encoding for binary categorical features","f90ae8db":"The approach that I follow for the hyperparameter tuning is the random search on the interval around the main default parameters of the lgbt classifier.","1482fb90":"remove the comment to do hyperparameter tuning","11cfcfa1":"Submission","34272edd":"Aggregation","2c14973f":"One of the main problems that I faced is the large amount of data that needs to be handled, so I process the data one portion at a time in order to always keep under control the memory usage, applying similar transformations multiple times.","bfd6a25b":"Only AMT_GOODS_FRAC is actually a very good feature. I kept all the others leaving the machine learning algorithm to decide how to use them.","7b498dba":"Bureau data"}}