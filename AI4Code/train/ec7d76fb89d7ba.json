{"cell_type":{"7489b1ac":"code","c0a9e011":"code","a6e071a0":"code","e1c7e775":"code","64cbba99":"code","e0a7dbd5":"code","37ba6704":"code","b43580aa":"code","cd0030c6":"code","0d58812b":"code","17b9f7ef":"code","1fb4db64":"code","469d492d":"code","9679c90b":"code","1d7ea52e":"code","d3a3828c":"code","b82d621c":"code","25dd9810":"code","5008d0cd":"code","8c95f0ac":"code","f91172ee":"code","ea6b76d6":"code","6eb6294e":"code","9a777a2e":"code","05e7986d":"code","e6a1d9c7":"markdown","f542ed47":"markdown","fd4b30e3":"markdown"},"source":{"7489b1ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport re\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0a9e011":"df = pd.read_csv('\/kaggle\/input\/earthquakedatasetforindiansubcontinent\/clead_earth_quake_data.csv',names=[\"index\",\"datetime\",\"nearest_volcano_distance\",\"location\",\"latitude\",\"longitude\",\"magnitude\",\"depth\"],header=None)","a6e071a0":"df=df.drop(0,axis=0)\ndf = df.set_index('index')\ndf.index = df.index.astype(int)","e1c7e775":"def DateTimePreprocessing(s):\n    \n    matched = re.search(r\"\\(\\d\\d.*?\\)\",s)\n    if matched is not None:\n        date = re.search(r'\\((.*?)\\)',matched.group(0)).group(1)\n        return datetime.strptime(date.replace(' ','-'),\"%d-%b-%Y-%H:%M:%S-GMT\")\n    else:\n        date = re.search(r'\\((\\d.*?)\\)',s)\n        if date is not None:\n            \n            return datetime.strptime(date.group(0).replace(' ','-'),\"(%d-%b-%Y-%H:%M:%S-GMT)\")\n        else:\n            return datetime.strptime(s.replace(' ','-'),\"%d-%b-%Y-%H:%M:%S-GMT\")","64cbba99":"df.datetime=df.datetime.apply(lambda s: pd.to_datetime(DateTimePreprocessing(s)))","e0a7dbd5":"df.depth=df.depth.apply(lambda s: re.search(\"\\d+\\.\\d+\", s).group(0)).astype('float32')","37ba6704":"df.latitude = df.latitude.astype('float32')\ndf.longitude = df.longitude.astype('float32')\ndf.magnitude = df.magnitude.astype('float32')\n\n\n\ndf.nearest_volcano_distance=df.nearest_volcano_distance.apply(lambda s: re.search(r'\\((.*?)\\)',s).group(1))","b43580aa":"df.nearest_volcano_distance=df.nearest_volcano_distance.apply(lambda s: re.search(\"\\d+\", s).group(0)).astype('int')","cd0030c6":"df.nearest_volcano_distance","0d58812b":"df.dtypes","17b9f7ef":"import seaborn as sns\nimport matplotlib.pyplot as plt","1fb4db64":"sns.lineplot(data=df,y=\"datetime\",x=\"magnitude\")","469d492d":"df.plot(x=\"datetime\",y=\"depth\")","9679c90b":"sns.heatmap(df.corr())","1d7ea52e":"!pip install fbprophet","d3a3828c":"p = df[df.location.duplicated()]\np.plot(x=\"datetime\",y=\"magnitude\")","b82d621c":"sns.countplot(data=p,x=\"magnitude\")","25dd9810":"data=df\ndata.datetime = data.datetime.astype('string')","5008d0cd":"import plotly.express as px\n\npx.scatter_geo(data,lat='latitude',lon='longitude',\n               scope=\"asia\",animation_frame=\"datetime\",\n               hover_name=\"location\",color='depth',size='magnitude')\n","8c95f0ac":"from fbprophet import Prophet","f91172ee":"data = df[['datetime','magnitude']]\ndata.columns = ['ds','y']","ea6b76d6":"m = Prophet()\nm.fit(data)\nfuture = m.make_future_dataframe(periods=365)\nfuture.tail()","6eb6294e":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()\n","9a777a2e":"\nsolution = m.plot(forecast)\n","05e7986d":"solution1 = m.plot_components(forecast)\n","e6a1d9c7":"# Show the earthquake time frame animation with Geoplot?","f542ed47":"# Find the seasonality and trend of the earthquake","fd4b30e3":"# How powerful earthquake can happen next 1 year?"}}