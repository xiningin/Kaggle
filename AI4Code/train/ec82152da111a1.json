{"cell_type":{"418bd067":"code","b48328fb":"code","7b0ab609":"code","0f9e8bbb":"code","caa78fab":"code","f6d46784":"code","a461e8e2":"code","3cda90bc":"code","20ba58d3":"code","e0abd4e3":"code","ed843061":"code","d0132f4e":"code","3150470b":"code","e7f938dc":"code","2b50462b":"code","3870efbb":"code","38ae0b89":"code","1906695e":"code","c3325a42":"code","eb258358":"code","b802dd6f":"markdown","67462775":"markdown","2aa9a3ba":"markdown","c329914e":"markdown","65f6ff42":"markdown","12cce7fa":"markdown","439d52d4":"markdown","e1781b9c":"markdown","14ece699":"markdown","02d6b4ff":"markdown","279e70ef":"markdown","ef81b6bc":"markdown","634f8497":"markdown","055f8e4c":"markdown","c6e51d71":"markdown","8b946d32":"markdown","600488d8":"markdown","fe0f09a5":"markdown","3b08e886":"markdown","6463ade6":"markdown","5896067b":"markdown","2fca2436":"markdown","08458be6":"markdown","8a98f09d":"markdown","c3a0eede":"markdown"},"source":{"418bd067":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b48328fb":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7b0ab609":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0f9e8bbb":"X = train.iloc[:,1:].values\ny = train.iloc[:,0].values\n\ntest = test.iloc[:,:].values","caa78fab":"np.unique(np.isnan(X))","f6d46784":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","a461e8e2":"sns.countplot(y_train)","3cda90bc":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nsc_test = sc_X.transform(test)","20ba58d3":"from sklearn.svm import SVC\nprint('SVM Classifier with gamma = 0.1; Kernel = Polynomial')\nclassifier = SVC(gamma=0.1, kernel='poly', random_state = 0)\nclassifier.fit(X_train,y_train)","e0abd4e3":"y_pred = classifier.predict(X_test)","ed843061":"from sklearn.metrics import accuracy_score,confusion_matrix\nmodel_acc = classifier.score(X_test, y_test)\ntest_acc = accuracy_score(y_test, y_pred)\nconf_mat = confusion_matrix(y_test,y_pred)","d0132f4e":"print('\\nSVM Trained Classifier Accuracy: ', model_acc)\nprint('\\nPredicted Values: ',y_pred)\nprint('\\nAccuracy of Classifier on Validation Images: ',test_acc)\nprint('\\nConfusion Matrix: \\n',conf_mat)","3150470b":"plt.matshow(conf_mat)\nplt.title('Confusion Matrix for Validation Data')\nplt.colorbar()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.show()","e7f938dc":"result = classifier.predict(sc_test)","2b50462b":"a = np.random.randint(1,400,5)\nfor i in a:\n    two_d = (np.reshape(test[i], (28, 28)) * 255).astype(np.uint8)\n    plt.title('Predicted Label: {0}'.format(result[i]))\n    plt.imshow(two_d, interpolation='nearest',cmap='gray')\n    plt.show()","3870efbb":"submission = pd.Series(result,name=\"Label\")","38ae0b89":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),submission],axis = 1)\nsubmission.head()","1906695e":"submission.to_csv(\"final_submission_v1.csv\",index=False)","c3325a42":"final_submission = pd.read_csv(\"final_submission_v1.csv\")","eb258358":"final_submission.head()","b802dd6f":"click <a href=\".\/final_submission_v1.csv\">here<\/a> to download the generated submission file","67462775":"### A Simple Tricky Markdown to download Submission file while running your notebook in cloud","2aa9a3ba":"### Import train and test datasets","c329914e":"## 1.1 Fit the Support Vector Classifier to the Training data (Train our Model) \nHere I've used Polynomial Kernel. Feel free to use any other kernel and play with other parameters.","65f6ff42":"### Concat ' ImageId ' Column  with the '*submission*' Pandas series","12cce7fa":"### Split Train data into Training and Validation sets","439d52d4":"## 2. Test our Model","e1781b9c":"### Verify your submission csv file before submitting it","14ece699":"### Check for Missing Data (NaN)","02d6b4ff":"### Import numpy and pandas\n","279e70ef":"### Import Visualization Libraries","ef81b6bc":"## 3.1 Convert the Pandas Series to CSV file","634f8497":"### Extract Features(X) and Labels(y) from datasets as Numpy Array","055f8e4c":"### Plot the Confusion Matrix with matplotlib.pyplot","c6e51d71":"### Predict the labels with Validation Data","8b946d32":"**Dataset:**  \n* ..\/input\/  \n       |_ train.csv  \n       |_ test.csv  \n       |_ sample_submission.csv","600488d8":"### Visualize some Sample Image Prediction from ' test ' data","fe0f09a5":"## 1. Prepare our Classification Model","3b08e886":"# MNIST Digit Classification using Kernel SVM  \n\n*1 November 2018*  \n\n#### ***[Soumya Ranjan Behera](https:\/\/www.linkedin.com\/in\/soumya044)***\n\n### In this Kernel I have used a simple Polynomial kernel SVM Classifier (SVC) to classify the digits into their respective categories which have scored **97.314 %** Accuracy in the Digit Recognizer Competition.\n\n### Goals of this Kenel:  \n* To provide a basic implementation of Support Vector Classification  \n* A beginner friendly kernel to show a procedure to compete in Kaggle Digit Recognizer Competition","6463ade6":"### 2.1 Predict for the ' test ' data provided for competition  \nHere I've scaled the 'test' data to 'sc_test'","5896067b":"## 1.2 Performance Evaluation  \n### Calculate the Model Accuracy and Confusion Matrix","2fca2436":"## 3. Prepare for Final Submission  \n\n### Convert Numpy Array to Pandas Series and provide Column names","08458be6":"# Thank You  \n\nIf you liked this kernel please **Upvote**. Don't forget to drop a comment or suggestion.  \n\n### *Soumya Ranjan Behera*\nLet's stay Connected! [LinkedIn](https:\/\/www.linkedin.com\/in\/soumya044)  \n\n**Happy Coding !**","8a98f09d":"### Standardize the data\nThis step is to transform the data such that its distribution will have a mean value 0 and standard deviation of 1.  \nGiven the distribution of the data, each value in the dataset will have the sample mean value subtracted, and then divided by the standard deviation of the whole dataset.","c3a0eede":"### Visualize the distribution of Training Set Labels  \nThis step is to check if there exist any biased or insufficient data for any class."}}