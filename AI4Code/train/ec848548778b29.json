{"cell_type":{"d802062f":"code","6e2f93c1":"code","fc882611":"code","cdf8ee62":"code","18403226":"code","727e3fc4":"code","2d9f00ab":"code","b18c82fc":"code","b7a70b16":"code","d9bf224f":"code","13d85ca6":"code","237ecb9d":"code","68ab625a":"code","a1b23a26":"code","b05d9808":"code","ac40fddb":"code","81a1bc14":"code","ac558098":"code","2ff41d22":"code","aa42d649":"markdown","f4d55f97":"markdown","fed2e9dd":"markdown","f88eddae":"markdown","388a5291":"markdown","b9e56bfc":"markdown","db065d45":"markdown","2d8d1bdd":"markdown","7e05c905":"markdown","7429cc2f":"markdown"},"source":{"d802062f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(rc={'figure.figsize': [20, 5]}, font_scale=.90)\n\nimport nltk\n#pyo.init_notebook_mode()\nimport re\nimport string\nnltk.download('vader_lexicon')\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom collections import defaultdict\npd.set_option('display.max_columns', None)\n\nplt.rc('figure',figsize=(17,13))\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e2f93c1":"!pip install vaderSentiment\n!pip install twython","fc882611":"data = pd.read_csv(\"\/kaggle\/input\/dataset-accessibility-user-reviews\/VADER_A11y_Labels.csv\", delimiter=',', encoding='ISO-8859-2')\ndata.head()","cdf8ee62":"#To avoid below TypeError: expected string or bytes-like object\n#https:\/\/stackoverflow.com\/questions\/43727583\/re-sub-erroring-with-expected-string-or-bytes-like-object\n\ndata['review_text']=data['review_text'].apply(str)","18403226":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\ndef clean(text):\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub(r'\\s+', ' ', text, flags=re.I)\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    text = re.sub('<.*?>+', '', text)\n    return text\n    \n\n\ndata['review_text'] = data['review_text'].apply(lambda x:clean(x))\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nanalyser = SentimentIntensityAnalyzer()\nscores=[]\nfor i in range(len(data['review_text'])):\n    \n    score = analyser.polarity_scores(data['review_text'][i])\n    score=score['compound']\n    scores.append(score)\nsentiment=[]\nfor i in scores:\n    if i>=0.05:\n        sentiment.append('Positive')\n    elif i<=(-0.05):\n        sentiment.append('Negative')\n    else:\n        sentiment.append('Neutral')\ndata['sentiment']=pd.Series(np.array(sentiment))","727e3fc4":"data.head(2)","2d9f00ab":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\nfrom wordcloud import WordCloud, STOPWORDS , ImageColorGenerator\n\ntweet_All = \" \".join(review for review in data.review_text)\n\n\nfig, ax = plt.subplots(1, 1, figsize  = (10,10))\n# Create and generate a word cloud image:\nwordcloud_ALL = WordCloud(max_font_size=50, max_words=100, background_color=\"black\").generate(tweet_All)\n\n# Display the generated image:\nax.imshow(wordcloud_ALL, interpolation='bilinear')\n\nax.axis('off')","b18c82fc":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\ndef clean_text(text):\n    \n    text = str(text).lower()\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    \n    return text\ndata['review_text'] = data['review_text'].apply(lambda x:clean_text(x))","b7a70b16":"data['review_text']","d9bf224f":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\ndf=pd.DataFrame()\ndf['review_text']=data['review_text']\ndef tokenization(text):\n    text = re.split('\\W+', text)\n    return text\n\ndf['tokenized'] = df['review_text'].apply(lambda x: tokenization(x.lower()))\nstopword = nltk.corpus.stopwords.words('english')\ndef remove_stopwords(text):\n    text = [word for word in text if word not in stopword]\n    return text\n    \ndf['No_stopwords'] = df['tokenized'].apply(lambda x: remove_stopwords(x))\n\nps = nltk.PorterStemmer()\n\ndef stemming1(text):\n    text = [ps.stem(word) for word in text]\n    return text\n\ndf['stemmed_porter'] = df['No_stopwords'].apply(lambda x: stemming1(x))\n\nfrom nltk.stem.snowball import SnowballStemmer\ns_stemmer = SnowballStemmer(language='english')\ndef stemming2(text):\n    text = [s_stemmer.stem(word) for word in text]\n    return text\ndf['stemmed_snowball'] = df['No_stopwords'].apply(lambda x: stemming2(x))\n\nwn = nltk.WordNetLemmatizer()\n\ndef lemmatizer(text):\n    text = [wn.lemmatize(word) for word in text]\n    return text\n\ndf['lemmatized'] = df['No_stopwords'].apply(lambda x: lemmatizer(x))","13d85ca6":"df.head(2)","237ecb9d":"data['review_text']=df['lemmatized']\ndata.head(2)","68ab625a":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\ntemp = data.groupby('Vader Sentiment').count()['review_text'].reset_index().sort_values(by='review_text',ascending=False)\ntemp.style.background_gradient(cmap='Purples')","a1b23a26":"temp = temp.rename(columns={'Vader Sentiment':'sentiment', 'review_text': 'text'})","b05d9808":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='sentiment',data=temp)\n#fig = go.Figure(go.Funnelarea(\n #   text =temp.sentiment,\n  #  values = temp.text,\n   # title = {\"position\": \"top center\", \"text\": \"Funnel-Chart of Sentiment Distribution\"}\n    #))  #Draft session error with Plotly \nfig.show()","ac40fddb":"#Code by  Shreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda\n\ngenre_difference_metric = [data['Vader Sentiment'].value_counts().index,data.groupby(['Vader Sentiment']).sum()['Vader Score'].sort_values(ascending=False).index,data.groupby(['Vader Sentiment']).sum()['desc_id'].sort_values(ascending=False).index]\n\n#Dataframe to be used for plotting.\ngenre_evolution_df = pd.DataFrame(columns=['genre', 'rank_type', 'rank'])\n\n#Populate the dataframe\nfor metric in range(3):\n    for genre in range(len(genre_difference_metric[metric])):\n        genre_evolution_df = genre_evolution_df.append({'genre':genre_difference_metric[metric][genre], 'rank_type': metric, 'rank':genre},\n                                   ignore_index=True)\nplt.style.use('seaborn-bright')       \nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(111)\n\n    \n\nax.set_xlim([-2,4])\nxs = [0.0, 1.0, 2.0]\nx_labels = ['Vader Sentiment count', 'sum of Vader Score', 'sum of desc_id']\nplt.xticks(range(len(xs)), x_labels)\nplt.xticks(xs, x_labels, rotation='vertical')\nsns.pointplot(x=genre_evolution_df.rank_type,\n              y=3-genre_evolution_df['rank'], \n              hue=genre_evolution_df.genre)\nys = range(1,4)#To avoid he number of FixedLocator locations (4), usually from a call to set_ticks, does not match the number of ticklabels (3)\ny_labels = ['3rd', '2nd', '1st']\nplt.yticks(ys, y_labels)  \nax.set_ylabel('Sentiment Category Rank')\n\nplt.legend(bbox_to_anchor=(0.7,0., 0.5, 0.5),loc='best',ncol=1)\nplt.show(); ","81a1bc14":"sns.catplot(data=data, x='is_accessibility', kind= 'count',height=5,aspect=2);","ac558098":"sns.barplot(x=\"desc_id\", y=\"Vader Score\", hue=\"Vader Sentiment\", data=data);","2ff41d22":"#Code by https:\/\/www.geeksforgeeks.org\/python-sentiment-analysis-using-vader\/\n\n# import SentimentIntensityAnalyzer class\n# from vaderSentiment.vaderSentiment module.\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n \n# function to print sentiments\n# of the sentence.\ndef sentiment_scores(sentence):\n \n    # Create a SentimentIntensityAnalyzer object.\n    sid_obj = SentimentIntensityAnalyzer()\n \n    # polarity_scores method of SentimentIntensityAnalyzer\n    # object gives a sentiment dictionary.\n    # which contains pos, neg, neu, and compound scores.\n    sentiment_dict = sid_obj.polarity_scores(sentence)\n     \n    print(\"Overall sentiment dictionary is : \", sentiment_dict)\n    print(\"sentence was rated as \", sentiment_dict['neg']*100, \"% Negative\")\n    print(\"sentence was rated as \", sentiment_dict['neu']*100, \"% Neutral\")\n    print(\"sentence was rated as \", sentiment_dict['pos']*100, \"% Positive\")\n \n    print(\"Sentence Overall Rated As\", end = \" \")\n \n    # decide sentiment as positive, negative and neutral\n    if sentiment_dict['compound'] >= 0.05 :\n        print(\"Positive\")\n \n    elif sentiment_dict['compound'] <= - 0.05 :\n        print(\"Negative\")\n \n    else :\n        print(\"Neutral\")\n \n \n   \n# Driver code\nif __name__ == \"__main__\" :\n \n    print(\"\\n1st statement :\")\n    sentence = \"text reflow doesnt work i want my money back.\"\n \n    # function calling\n    sentiment_scores(sentence)\n \n    print(\"\\n2nd Statement :\")\n    sentence = \"like the simplicity of this app and the dark\"\n    sentiment_scores(sentence)\n \n    print(\"\\n3rd Statement :\")\n    sentence = \"too barebone  no way to set font size and no r.\"\n    sentiment_scores(sentence)","aa42d649":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT1fdNJu8vflrjAvCVP2ZZO_r46fFU7nJdwag&usqp=CAU)javacodemonk.com","f4d55f97":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #ADD8E6;\"><b style=\"color:black;\">VADER (Valence Aware Dictionary and sEntiment Reasoner)<\/b><\/h1><\/center>\n\nVADER Sentiment Analysis :\n\n'VADER (Valence Aware Dictionary and sEntiment Reasoner) is a lexicon and rule-based sentiment analysis tool that is specifically attuned to sentiments expressed in social media. VADER uses a combination of A sentiment lexicon is a list of lexical features (e.g., words) which are generally labeled according to their semantic orientation as either positive or negative. VADER not only tells about the Positivity and Negativity score but also tells us about how positive or negative a sentiment is.\"\n\nhttps:\/\/www.geeksforgeeks.org\/python-sentiment-analysis-using-vader\/","fed2e9dd":"#Above, the original code was Sentiment. Since we already have Vader Sentiment in the feature\/columns I kept it.","f88eddae":"#I think I didn't need to make that above since I had Vader Sentiment since the very beginning.","388a5291":"#Acknowledgment:\n\nShreya Sajal https:\/\/www.kaggle.com\/shreyasajal\/pfizer-vaccine-tweets-vader-sentiment-analysis-eda","b9e56bfc":"\"We need a Female Darth Vader Scientist \n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQQjV4VXBiGNklbK4MA61W74CIwMsmfvPvDfA&usqp=CAU)m.facebook.com","db065d45":"#Removing Punctuations and making text lowercase","2d8d1bdd":"#STEMMING AND LEMMATIZATION\n\ndf shows the text at each step of the preprocessing\nFrom the dataframe df we can decide which one of the stemming(Porter or Snowball)\/lemmatization or both is suitable for our data.","7e05c905":"#To avoid error below : \"number of FixedLocator locations (4), usually from a call to set_ticks, does not match the number of ticklabels (3)\n\nI changed ys = range(1,5)Original code\nto ys = range(1,4)","7429cc2f":"TEXT PREPROCESSING FOR VADER SENTIMENT ANALYSIS\n\n\"Here we don't touch punctuations and case for now as VADER SENTIMENT ANALYSIS SCORES are affected by factors like punctuations,capitalization,preceeding-trigrams,degree modifiers,conjunctions etc.\"\n\n\"The Sentiments have been classified based on scores according to the VADER convention.\nA new column 'Sentiment'is thus, added giving sentiment corresponding to each Tweet text.\""}}