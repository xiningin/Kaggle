{"cell_type":{"54547a39":"code","c7bd638e":"code","2a831009":"code","335b9aee":"code","4d17e3b9":"code","e21f25d2":"code","06a05351":"code","52bfd5c2":"code","8d6d90e1":"code","26afc6bb":"code","1ba03c04":"code","f9225ddb":"markdown"},"source":{"54547a39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7bd638e":"df = pd.read_csv(\"..\/input\/train_ship_segmentations_v2.csv\")\ndfWtShipOnly = df.drop( df.index[df.EncodedPixels.apply(lambda x: not isinstance(x, str)).tolist()])","2a831009":"# Use rle and its position in the image as identifier of the image\ndfWtShipOnly[\"rleAndPosition\"] = dfWtShipOnly.EncodedPixels.apply(lambda x: ' '.join(x.split(\" \")[1::2]) + ' ' + ' '.join([ str(int(hor) % 256) for hor in x.split(\" \")[0::2]]) if (isinstance(x, str)) else x)\ndfWtShipOnly.head()","335b9aee":"#List in a new column all the ImageId where the 'rleAndPosition' occurs.\ndfWtShipOnly[\"allSameRle\"] = dfWtShipOnly[\"rleAndPosition\"].apply(lambda x: dfWtShipOnly.ImageId[dfWtShipOnly[\"rleAndPosition\"] == x].tolist())\ndfWtShipOnly.head(10)","4d17e3b9":"# Verify that 'rleAndPosition' values only occurs mainly a few times \ndfWtShipOnly[\"rleAndPosition\"].value_counts().describe()","e21f25d2":"# Plot \"allSameRle\"\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\nfrom PIL import Image\n\ndef get_image_data(image_id, image_type, **kwargs):\n    img = _get_image_data_opencv(image_id, image_type, **kwargs)\n    img = img.astype('uint8')\n    return img\n\ndef _get_image_data_opencv(image_id, image_type, **kwargs):\n    fname = \"..\/input\/train_v2\/\" + image_id\n    img = cv2.imread(fname)\n    assert img is not None, \"Failed to read image : %s, %s\" % (image_id, image_type)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    return img\n\nmaxRepetition = 8\nplt.figure(figsize=(20,20))\nImgNumber = 10\ni = 0\nfor y in range(ImgNumber) :\n    image_id = dfWtShipOnly[\"ImageId\"].tolist()[np.random.randint(0,len(dfWtShipOnly))]\n    img = get_image_data(image_id, 'Train')\n    ID_list = dfWtShipOnly[dfWtShipOnly[\"ImageId\"] == image_id][\"allSameRle\"].tolist()[0]\n    if len(ID_list) > maxRepetition: ID_list = ID_list[0:maxRepetition-1]\n    for ID in ID_list :\n        i += 1\n        img = get_image_data(ID, 'Train')\n        plt.subplot(ImgNumber,maxRepetition,i)\n        plt.imshow(img, cmap='binary')\n    i = maxRepetition * (y+1)","06a05351":"# Group the 'rleAndPosition' by ImageId  \ndfWtShipOnlyUnique = dfWtShipOnly.groupby('ImageId')['allSameRle'].apply(lambda x: set(x.sum())) ","52bfd5c2":"print(len(df))\nprint(len(dfWtShipOnly))\nprint(len(dfWtShipOnlyUnique))","8d6d90e1":"print(len(dfWtShipOnlyUnique))\nalreadyDropped = []\ndfWtShipOnlyUniqueCopy = dfWtShipOnlyUnique\nfor itemKeeped in dfWtShipOnlyUnique.iteritems() :\n    if not itemKeeped[0] in alreadyDropped :\n        for itemToCheck in dfWtShipOnlyUnique.iteritems() :\n            if itemToCheck[0] in itemKeeped[1] and not itemToCheck[0] in alreadyDropped and itemToCheck[0] != itemKeeped[0]:\n                dfWtShipOnlyUnique = dfWtShipOnlyUnique.drop(itemToCheck[0])  \n                alreadyDropped = alreadyDropped + [itemToCheck[0]]\nprint(len(dfWtShipOnlyUnique))","26afc6bb":"# Splitting\ntrainDfWtShipOnlyUnique=dfWtShipOnlyUnique.sample(frac=0.9,random_state=768)\nvalidationDfWtShipOnlyUnique=dfWtShipOnlyUnique.drop(trainDfWtShipOnlyUnique.index)","1ba03c04":"# Save the labels\nallUniqLabels = dfWtShipOnly.loc[[True if ID in dfWtShipOnlyUnique.index else False for ID in dfWtShipOnly[\"ImageId\"]]]\nallUniqLabels.to_csv('\/kaggle\/working\/uniqueAllLabels.csv', index=True)\nprint(len(allUniqLabels))\ntrainUniqLabels = dfWtShipOnly.loc[[True if ID in trainDfWtShipOnlyUnique.index else False for ID in dfWtShipOnly[\"ImageId\"]]]\ntrainUniqLabels.to_csv('\/kaggle\/working\/uniqueTrainLabels.csv', index=True)\nprint(len(trainUniqLabels))\nvalidationUniqLabels = dfWtShipOnly.loc[[True if ID in validationDfWtShipOnlyUnique.index else False for ID in dfWtShipOnly[\"ImageId\"]]]\nvalidationUniqLabels.to_csv('\/kaggle\/working\/uniqueValidationLabels.csv', index=True)\nprint(len(validationUniqLabels))","f9225ddb":"# Creating the clean dataset (with boat only)"}}