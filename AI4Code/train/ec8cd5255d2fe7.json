{"cell_type":{"9062cb8a":"code","c5a5a970":"code","23d06884":"code","8b9c1a6b":"code","60c87199":"code","87161267":"code","7cce65ed":"code","5ee074c4":"code","3fd556b0":"code","24eb25ba":"code","85419f84":"code","48695574":"code","818236f9":"code","2905f35d":"code","ef16e116":"code","d6c99e73":"code","b47e14bb":"code","6406d00a":"code","a2ab64ce":"code","c55f1cbf":"code","32b9bd66":"code","abf94a8d":"code","e1a1d8f7":"code","4d44d088":"code","7846c3b6":"code","d12818d1":"code","50e81c22":"code","456bdfee":"code","d9cd7f2e":"code","9d44aa2f":"code","9521683d":"code","3776f30a":"code","08d0bad6":"code","d3bb5837":"code","bcca8dc8":"code","fc149471":"code","2cfe7c82":"code","8ccb7762":"code","0e2f95d0":"markdown","f1a2a5fe":"markdown","993d4f86":"markdown","fad999a1":"markdown","6ae21759":"markdown","2125e6b1":"markdown","678d4d23":"markdown","1fec24da":"markdown","d31323d7":"markdown","ac7389bb":"markdown","bbec8acc":"markdown","50889ad2":"markdown","38493700":"markdown","f18ab999":"markdown","10a2e352":"markdown","171a3e25":"markdown","c8262f59":"markdown","dc1fa3f8":"markdown","1ea36dcf":"markdown","33672b28":"markdown"},"source":{"9062cb8a":"!pip install pydotplus","c5a5a970":"\n# data manuipulation\nimport numpy as np\nimport pandas as pd\n\n# modeling utilities\nimport pydotplus \nfrom sklearn import tree\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nimport scipy.stats as stats\nfrom sklearn import  linear_model\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_predict\n\n\n\n# plotting libraries\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\n\nsn.set_style('whitegrid')\nsn.set_context('talk')\nparams = {'legend.fontsize': 'x-large',\n          'figure.figsize': (30, 10),\n          'axes.labelsize': 'x-large',\n          'axes.titlesize':'x-large',\n          'xtick.labelsize':'x-large',\n          'ytick.labelsize':'x-large'}\n\nplt.rcParams.update(params)","23d06884":"hour_df = pd.read_csv('..\/input\/bike-sharing-datasets\/hour.csv')\nprint(\"Shape of dataset::{}\".format(hour_df.shape))","8b9c1a6b":"display(hour_df.head())","60c87199":"# data types of attributes\nhour_df.dtypes","87161267":"# dataset summary stats\nhour_df.describe()","7cce65ed":"hour_df.rename(columns={'instant':'rec_id',\n                      'dteday':'datetime',\n                      'holiday':'is_holiday',\n                      'workingday':'is_workingday',\n                      'weathersit':'weather_condition',\n                      'hum':'humidity',\n                      'mnth':'month',\n                      'cnt':'total_count',\n                      'hr':'hour',\n                      'yr':'year'},inplace=True)","5ee074c4":"# date time conversion\nhour_df['datetime'] = pd.to_datetime(hour_df.datetime)\n\n# categorical variables\nhour_df['season'] = hour_df.season.astype('category')\nhour_df['is_holiday'] = hour_df.is_holiday.astype('category')\nhour_df['weekday'] = hour_df.weekday.astype('category')\nhour_df['weather_condition'] = hour_df.weather_condition.astype('category')\nhour_df['is_workingday'] = hour_df.is_workingday.astype('category')\nhour_df['month'] = hour_df.month.astype('category')\nhour_df['year'] = hour_df.year.astype('category')\nhour_df['hour'] = hour_df.hour.astype('category')","3fd556b0":"fig,ax = plt.subplots()\nsn.pointplot(data=hour_df[['hour',\n                           'total_count',\n                           'season']],\n             x='hour',y='total_count',\n             hue='season',ax=ax)\nax.set(title=\"Season wise hourly distribution of counts\")","24eb25ba":"fig,ax = plt.subplots()\nsn.pointplot(data=hour_df[['hour','total_count','weekday']],x='hour',y='total_count',hue='weekday',ax=ax)\nax.set(title=\"Weekday wise hourly distribution of counts\")","85419f84":"fig,ax = plt.subplots()\nsn.boxplot(data=hour_df[['hour','total_count']],x=\"hour\",y=\"total_count\",ax=ax)\nax.set(title=\"Box Pot for hourly distribution of counts\")","48695574":"fig,ax = plt.subplots()\nsn.barplot(data=hour_df[['month',\n                         'total_count']],\n           x=\"month\",y=\"total_count\")\nax.set(title=\"Monthly distribution of counts\")","818236f9":"df_col_list = ['month','weekday','total_count']\nplot_col_list= ['month','total_count']\nspring_df = hour_df[hour_df.season==1][df_col_list]\nsummer_df = hour_df[hour_df.season==2][df_col_list]\nfall_df = hour_df[hour_df.season==3][df_col_list]\nwinter_df = hour_df[hour_df.season==4][df_col_list]\n\nfig,ax= plt.subplots(nrows=2,ncols=2)\nsn.barplot(data=spring_df[plot_col_list],x=\"month\",y=\"total_count\",ax=ax[0][0],)\nax[0][0].set(title=\"Spring\")\n\nsn.barplot(data=summer_df[plot_col_list],x=\"month\",y=\"total_count\",ax=ax[0][1])\nax[0][1].set(title=\"Summer\")\n\nsn.barplot(data=fall_df[plot_col_list],x=\"month\",y=\"total_count\",ax=ax[1][0])\nax[1][0].set(title=\"Fall\")\n\nsn.barplot(data=winter_df[plot_col_list],x=\"month\",y=\"total_count\",ax=ax[1][1])  \nax[1][1].set(title=\"Winter\")","2905f35d":"sn.violinplot(data=hour_df[['year',\n                            'total_count']],\n              x=\"year\",y=\"total_count\")","ef16e116":"fig,(ax1,ax2) = plt.subplots(ncols=2)\nsn.barplot(data=hour_df,x='is_holiday',y='total_count',hue='season',ax=ax1)\nsn.barplot(data=hour_df,x='is_workingday',y='total_count',hue='season',ax=ax2)","d6c99e73":"fig,(ax1,ax2)= plt.subplots(ncols=2)\nsn.boxplot(data=hour_df[['total_count',\n                         'casual','registered']],ax=ax1)\nsn.boxplot(data=hour_df[['temp','windspeed']],ax=ax2)","b47e14bb":"corrMatt = hour_df[[\"temp\",\"atemp\",\n                    \"humidity\",\"windspeed\",\n                    \"casual\",\"registered\",\n                    \"total_count\"]].corr()\nmask = np.array(corrMatt)\nmask[np.tril_indices_from(mask)] = False\nsn.heatmap(corrMatt, mask=mask,\n           vmax=.8, square=True,annot=True)","6406d00a":"hour_df = pd.read_csv('..\/input\/bike-sharing-datasets\/hour.csv')\nprint(\"Shape of dataset::{}\".format(hour_df.shape))","a2ab64ce":"hour_df.rename(columns={'instant':'rec_id',\n                        'dteday':'datetime',\n                        'holiday':'is_holiday',\n                        'workingday':'is_workingday',\n                        'weathersit':'weather_condition',\n                        'hum':'humidity',\n                        'mnth':'month',\n                        'cnt':'total_count',\n                        'hr':'hour',\n                        'yr':'year'},inplace=True)","c55f1cbf":"# date time conversion\nhour_df['datetime'] = pd.to_datetime(hour_df.datetime)\n\n# categorical variables\nhour_df['season'] = hour_df.season.astype('category')\nhour_df['is_holiday'] = hour_df.is_holiday.astype('category')\nhour_df['weekday'] = hour_df.weekday.astype('category')\nhour_df['weather_condition'] = hour_df.weather_condition.astype('category')\nhour_df['is_workingday'] = hour_df.is_workingday.astype('category')\nhour_df['month'] = hour_df.month.astype('category')\nhour_df['year'] = hour_df.year.astype('category')\nhour_df['hour'] = hour_df.hour.astype('category')","32b9bd66":"def fit_transform_ohe(df,col_name):\n    \"\"\"This function performs one hot encoding for the specified\n        column.\n\n    Args:\n        df(pandas.DataFrame): the data frame containing the mentioned column name\n        col_name: the column to be one hot encoded\n\n    Returns:\n        tuple: label_encoder, one_hot_encoder, transformed column as pandas Series\n\n    \"\"\"\n    # label encode the column\n    le = preprocessing.LabelEncoder()\n    le_labels = le.fit_transform(df[col_name])\n    df[col_name+'_label'] = le_labels\n    \n    # one hot encoding\n    ohe = preprocessing.OneHotEncoder()\n    feature_arr = ohe.fit_transform(df[[col_name+'_label']]).toarray()\n    feature_labels = [col_name+'_'+str(cls_label) for cls_label in le.classes_]\n    features_df = pd.DataFrame(feature_arr, columns=feature_labels)\n    \n    return le,ohe,features_df\n\n# given label encoder and one hot encoder objects, \n# encode attribute to ohe\ndef transform_ohe(df,le,ohe,col_name):\n    \"\"\"This function performs one hot encoding for the specified\n        column using the specified encoder objects.\n\n    Args:\n        df(pandas.DataFrame): the data frame containing the mentioned column name\n        le(Label Encoder): the label encoder object used to fit label encoding\n        ohe(One Hot Encoder): the onen hot encoder object used to fit one hot encoding\n        col_name: the column to be one hot encoded\n\n    Returns:\n        tuple: transformed column as pandas Series\n\n    \"\"\"\n    # label encode\n    col_labels = le.transform(df[col_name])\n    df[col_name+'_label'] = col_labels\n    \n    # ohe \n    feature_arr = ohe.fit_transform(df[[col_name+'_label']]).toarray()\n    feature_labels = [col_name+'_'+str(cls_label) for cls_label in le.classes_]\n    features_df = pd.DataFrame(feature_arr, columns=feature_labels)\n    \n    return features_df","abf94a8d":"X, X_test, y, y_test = train_test_split(hour_df.iloc[:,0:-3], hour_df.iloc[:,-1], \n                                                    test_size=0.33, random_state=42)\n\nX.reset_index(inplace=True)\ny = y.reset_index()\n\nX_test.reset_index(inplace=True)\ny_test = y_test.reset_index()\n\nprint(\"Training set::{}{}\".format(X.shape,y.shape))\nprint(\"Testing set::{}\".format(X_test.shape))","e1a1d8f7":"stats.probplot(y.total_count.tolist(), dist=\"norm\", plot=plt)\nplt.show()","4d44d088":"cat_attr_list = ['season','is_holiday',\n                 'weather_condition','is_workingday',\n                 'hour','weekday','month','year']\nnumeric_feature_cols = ['temp','humidity','windspeed','hour','weekday','month','year']\nsubset_cat_features =  ['season','is_holiday','weather_condition','is_workingday']","7846c3b6":"encoded_attr_list = []\nfor col in cat_attr_list:\n    return_obj = fit_transform_ohe(X,col)\n    encoded_attr_list.append({'label_enc':return_obj[0],\n                              'ohe_enc':return_obj[1],\n                              'feature_df':return_obj[2],\n                              'col_name':col})","d12818d1":"feature_df_list = [X[numeric_feature_cols]]\nfeature_df_list.extend([enc['feature_df'] \\\n                        for enc in encoded_attr_list \\\n                        if enc['col_name'] in subset_cat_features])\n\ntrain_df_new = pd.concat(feature_df_list, axis=1)\nprint(\"Shape::{}\".format(train_df_new.shape))","50e81c22":"X = train_df_new\ny= y.total_count.values.reshape(-1,1)\n\nlin_reg = linear_model.LinearRegression()","456bdfee":"r2_scores = cross_val_score(lin_reg, X, y, cv=10)\nmse_scores = cross_val_score(lin_reg, X, y, cv=10,scoring='neg_mean_squared_error')","d9cd7f2e":"fig, ax = plt.subplots()\nax.plot([i for i in range(len(r2_scores))],r2_scores,lw=2)\nax.set_xlabel('Iteration')\nax.set_ylabel('R-Squared')\nax.title.set_text(\"Cross Validation Scores, Avg:{}\".format(np.average(r2_scores)))\nplt.show()","9d44aa2f":"print(\"R-squared::{}\".format(r2_scores))\nprint(\"MSE::{}\".format(mse_scores))","9521683d":"lin_reg.fit(X,y)","3776f30a":"test_encoded_attr_list = []\nfor enc in encoded_attr_list:\n    col_name = enc['col_name']\n    le = enc['label_enc']\n    ohe = enc['ohe_enc']\n    test_encoded_attr_list.append({'feature_df':transform_ohe(X_test,\n                                                              le,ohe,\n                                                              col_name),\n                                   'col_name':col_name})\n    \n    \ntest_feature_df_list = [X_test[numeric_feature_cols]]\ntest_feature_df_list.extend([enc['feature_df'] \\\n                             for enc in test_encoded_attr_list \\\n                             if enc['col_name'] in subset_cat_features])\n\ntest_df_new = pd.concat(test_feature_df_list, axis=1) \nprint(\"Shape::{}\".format(test_df_new.shape))","08d0bad6":"test_df_new.head()","d3bb5837":"X_test = test_df_new\ny_test = y_test.total_count.values.reshape(-1,1)\n\ny_pred = lin_reg.predict(X_test)\n\nresiduals = y_test-y_pred","bcca8dc8":"r2_score = lin_reg.score(X_test,y_test)\nprint(\"R-squared::{}\".format(r2_score))\nprint(\"MSE: %.2f\"\n      % metrics.mean_squared_error(y_test, y_pred))","fc149471":"fig, ax = plt.subplots()\nax.scatter(y_test, residuals)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residuals')\nax.title.set_text(\"Residual Plot with R-Squared={}\".format(np.average(r2_score)))\nplt.show()","2cfe7c82":"import statsmodels.api as sm\n\n# Set the independent variable\nX = X.values.tolist()\n\n# This handles the intercept. \n# Statsmodel takes 0 intercept by default\nX = sm.add_constant(X)\n\nX_test = X_test.values.tolist()\nX_test = sm.add_constant(X_test)\n\n\n# Build OLS model\nmodel = sm.OLS(y, X)\nresults = model.fit()\n\n# Get the predicted values for dependent variable\npred_y = results.predict(X_test)\n\n# View Model stats\nprint(results.summary())","8ccb7762":"plt.scatter(pred_y,y_test)","0e2f95d0":"### Visualize Attributes, Trends and Relationships","f1a2a5fe":"\n### Encode Categoricals (One Hot Encoding)","993d4f86":"### Monthly distribution of Total Counts","fad999a1":"### Outliers","6ae21759":"### Cross Validation","2125e6b1":"## Test Dataset Performance","678d4d23":"### Working Day Vs Holiday Distribution","1fec24da":"### Year Wise Count Distributions","d31323d7":"## Train-Test Split","ac7389bb":"## Linear Regression","bbec8acc":"### Standarize Column Names","50889ad2":"### Standarize Column Names","38493700":"## Stats Models","f18ab999":"### Hourly distribution of Total Counts","10a2e352":"# Import required packages","171a3e25":"predicted = cross_val_predict(lin_reg, X, y, cv=10)\n\nfig, ax = plt.subplots()\nax.scatter(y, y-predicted)\nax.axhline(lw=2,color='black')\nax.set_xlabel('Observed')\nax.set_ylabel('Residual')\nplt.show()","c8262f59":"### Normality Test","dc1fa3f8":"### Correlations","1ea36dcf":"### Typecast Attributes","33672b28":"### Load Dataset"}}