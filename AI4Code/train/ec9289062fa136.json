{"cell_type":{"5a0260d9":"code","485ecdc1":"code","f017b930":"code","2eee116a":"code","d6d15343":"code","a1bd1c0e":"code","c9189b4d":"code","c723ad29":"code","d6cd0619":"code","aac90d52":"code","b415cd1f":"code","3a6d8020":"code","43d1c627":"code","f6d635e0":"code","b757fd6d":"markdown","478e85eb":"markdown","0c6e3d97":"markdown","31dc8115":"markdown","121cff79":"markdown","82f17cf7":"markdown","2825b6b2":"markdown","cd6e4794":"markdown","4f5d8737":"markdown"},"source":{"5a0260d9":"import matplotlib.pyplot as plt \nimport numpy as np \nimport pandas as pd \nimport seaborn as sns \nfrom sklearn import datasets # this library is used to read the dataset provided by sklearn for practice purpose\nfrom sklearn import manifold # this sklearn library is used for t-sne\n%matplotlib inline","485ecdc1":"data = datasets.fetch_openml( 'mnist_784',#this data i m iporting from sklearn\n                             version=1,\n                             return_X_y=True ) # here i m reading both predictor and target columns ","f017b930":"pixel_values, targets = data # here i m retrieving both columns and target , where pixel_values are predictor columns \ntargets = targets.astype(int) #converting target value to Integer type","2eee116a":"print(targets.shape)\nprint(pixel_values.shape)","d6d15343":"#here, i am ploting the 3rd pic and i am reshaping the 3rd row of data set which is 1*784 array we are reshaping 28*28 \nsingle_image1 = pixel_values[3, :].reshape(28, 28) \nplt.imshow(single_image1, cmap='gray')","a1bd1c0e":"# here,i am creating instance of 2 components of t-SNE only from 784 columns  of data \ntsne = manifold.TSNE(n_components=2, random_state=42)\ntransformed_data = tsne.fit_transform(pixel_values[:1000, :]) #here, for simlicity reading only 1000 rows of data and converting into ","c9189b4d":"data_frame_tsne = pd.DataFrame( np.column_stack((transformed_data, targets[:1000])), columns=[\"x\", \"y\", \"targets\"] )\ndata_frame_tsne.loc[:, \"targets\"] = data_frame_tsne.targets.astype(int)","c723ad29":"data_frame_tsne","d6cd0619":"grid = sns.FacetGrid(data_frame_tsne, hue=\"targets\", size=8) \ngrid.map(plt.scatter, \"x\", \"y\").add_legend()","aac90d52":"from sklearn.decomposition import PCA","b415cd1f":"pca = PCA(n_components=2,random_state=42)\npca_transformed_data = pca.fit_transform(pixel_values[:1000, :])","3a6d8020":"data_frame_pca = pd.DataFrame( np.column_stack((pca_transformed_data, targets[:1000])), columns=[\"x\", \"y\", \"targets\"] )\ndata_frame_pca.loc[:, \"targets\"] = data_frame_pca.targets.astype(int)","43d1c627":"data_frame_pca","f6d635e0":"grid = sns.FacetGrid(data_frame_pca, hue=\"targets\", size=8) \ngrid.map(plt.scatter, \"x\", \"y\").add_legend()","b757fd6d":"#But big question may arise in ur mind that, how Tsne is diffrent from PCA ? let's see it by applying it ","478e85eb":"so, if u compare it with t-SNE then with 2 components t-SNE performs far better than PCA. So, here we can conclude that incase of image compression we can use tsne for better compression having ample information.","0c6e3d97":"Credit:- ABHISHEK THAKUR ,inspired by ABHISHEK THAKUR and  wiritten  this kernel. ","31dc8115":"Now, in order to plot the figure we have to reshape the 1 cross 784 array (which will represent 1 figure) have to convert in 28 cross 28 dimesional array. where 1st dimesion will act as x axis and 2nd dimesion will act as y axis,","121cff79":"To make sense of unsupervised problems, we can also use numerous decomposition techniques such as Principal Component Analysis (PCA), t-distributed Stochastic Neighbour Embedding (t-SNE) etc. so, in this kernel i will show that how we can represent 784 dimensional data within 2 dimesional dataset, so here i m taking MNIST dataset, which is 28*28 pixel data set where 784 columns data, in which each column containing value of pixel which is ranging from 0-255 ","82f17cf7":"now, we will make fresh dataframe for transformed_data and target ","2825b6b2":"so, Above figure shows that converting 784 columns data into only 2 components i m clearly able distiguish each image of mnist in their proper cluster","cd6e4794":"necessary library which i have used in this kernel ","4f5d8737":"if u like then plzz click for upvote, all suggestions are welcome!! "}}