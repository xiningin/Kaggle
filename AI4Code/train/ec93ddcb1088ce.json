{"cell_type":{"9514499d":"code","695daf90":"code","e4acfe5c":"code","199ad84e":"code","d1135db0":"code","5471b414":"code","fc4206fc":"code","9d227f4e":"code","63bf959f":"code","37137a80":"code","b7e7c377":"code","e3c67d63":"code","b1e2c58d":"code","b47fef9c":"code","56595111":"code","963edc08":"code","bc8a8206":"code","fcc7b1ca":"code","e8c0645b":"code","1cadb8c1":"code","7bbb63b1":"code","45666afe":"code","43b7a943":"code","1667cd1c":"code","77e30942":"code","623e54c3":"code","e52f7efc":"code","277c5474":"code","a81d79f7":"code","cb8ab4f4":"code","e941aca3":"code","c2bef295":"code","4ecb4eaa":"markdown","cbbd3714":"markdown","7dd24244":"markdown"},"source":{"9514499d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","695daf90":"## Importing necessary libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nimport string\nimport re\nimport warnings\n\nwarnings.filterwarnings('ignore')","e4acfe5c":"## Loading the dataset\ndf = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\ndf.head()","199ad84e":"df.info()","d1135db0":"## Dropping missing values\ndf = df.dropna()","5471b414":"# Taking only the review and sentiment columns\ndf.drop(['App','Sentiment_Polarity','Sentiment_Subjectivity'],axis=1,inplace=True)\ndf.head()","fc4206fc":"# Importing stop words\n#nltk.download(\"stopwords\")\n#nltk.download(\"punkt\")\nstop_words = nltk.corpus.stopwords.words('english') + list(string.punctuation)\n","9d227f4e":"## Count number of words per review\ndf['Num_words'] = df['Translated_Review'].apply(lambda x : len([x for x in x.split()]))\ndf.head()","63bf959f":"## Count of number of Stopwords \ndf['Num_stopwords'] = df['Translated_Review'].apply(lambda x : len([x for x in x.lower().split() if x in stop_words]))\ndf.head()","37137a80":"## Count of number of special characters\ndf['Num_special_char'] = df['Translated_Review'].apply(lambda x : len([x for x in x.split() if x in '[\\w\\s]']))\ndf.head()","b7e7c377":"## Count number of characters(without white space)\ndf['Num_chars'] = df['Translated_Review'].apply(lambda x : len(''.join([x for x in x.split()])))\ndf.head()","e3c67d63":"df.describe()","b1e2c58d":"numerical = []\nfor i in df.columns:\n    if df[i].dtype != 'object':\n        numerical.append(i)","b47fef9c":"plt.gcf().set_size_inches(16,8)\nfor i,j in enumerate(numerical):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(df[j])\n","56595111":"plt.figure(figsize=(10,6))\nsns.countplot(df['Num_special_char'],orient = 'h')","963edc08":"## Converting to lower case\ndf['Translated_Review'] = df['Translated_Review'].apply(lambda x : x.lower())\ndf.head()","bc8a8206":"## removing punctuation\\\ndf['Translated_Review'] = df['Translated_Review'].str.replace('[^\\w\\s]','')\ndf.head()","fcc7b1ca":"## remove stopwords\ndf['Translated_Review'] = df['Translated_Review'].apply(lambda x : ' '.join(x for x in x.split() if x not in stop_words))\ndf.head()","e8c0645b":"## remove numbers\ndf['Translated_Review'] = df['Translated_Review'].apply(lambda x : ' '.join(x for x in x.split() if x.isdigit()==False))\ndf.head()","1cadb8c1":"# Stem every word to it's root word\nfrom nltk.stem import PorterStemmer\nst = PorterStemmer()\ndf['Translated_Review'] = df['Translated_Review'].apply(lambda x : ' '.join(st.stem(x) for x in x.split()))\ndf.head()","7bbb63b1":"most_common = nltk.FreqDist(' '.join(df['Translated_Review']).split()).most_common(2000)","45666afe":"processed_features = df['Translated_Review']\nlabels = df['Sentiment']","43b7a943":"## Creating TFIDF Matrix to convert the reviews into a set of vectors\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(max_features=2500, min_df=7, max_df=0.8)\nprocessed_features = vectorizer.fit_transform(processed_features).toarray()","1667cd1c":"# Splitting dataset into Training and Test data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(processed_features,labels,test_size = 0.3)","77e30942":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf_model = rf.fit(x_train,y_train)","623e54c3":"rf_pred = rf_model.predict(x_test)\nrf_model.score(x_train,y_train)","e52f7efc":"from sklearn.metrics import classification_report,confusion_matrix","277c5474":"print(classification_report(y_test,rf_pred))","a81d79f7":"sns.heatmap(confusion_matrix(y_test,rf_pred),annot=True,fmt = '.5g')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.xticks(ticks = [0,1,2],labels = ['Negative','Neutral','Positive'])\nplt.yticks(ticks = [0,1,2],labels = ['Negative','Neutral','Positive'])","cb8ab4f4":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr_model = lr.fit(x_train,y_train)\nlr_model.score(x_train,y_train)","e941aca3":"lr_pred = lr_model.predict(x_test)","c2bef295":"print(classification_report(y_test,lr_pred))\nsns.heatmap(confusion_matrix(y_test,lr_pred),annot=True,fmt = '.5g')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.xticks(ticks = [0,1,2],labels = ['Negative','Neutral','Positive'])\nplt.yticks(ticks = [0,1,2],labels = ['Negative','Neutral','Positive'])","4ecb4eaa":"## LOGISTIC REGRESSION MODEL","cbbd3714":"To Summarize, the steps involved in the given sentiment analysis : \n1. Loading the dataset\n2. Filtering the text and the sentiment columns\n3. Converting the text into lowercase\n4. Removing the punctuation from the text\n5. Removing the stop words from the text\n6. Removing numbers from the text\n7. Stemming every word to its root word\n8. Creating a matrix of vectors of words using tfidfvectorizer\n9. Splitting the data into training and test data\n10. Training a suitable machine learning model using the training data\n11. Predicting using the test data\n12. Evaluating the model's performance using the predicted test data","7dd24244":"## RANDOM FOREST MODEL"}}